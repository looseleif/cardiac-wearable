
WB_AWEAR_proj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009aa8  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000368  08009be8  08009be8  00019be8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009f50  08009f50  00019f50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08009f58  08009f58  00019f58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08009f5c  08009f5c  00019f5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000084  20000008  08009f60  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 MB_MEM2       00000883  2000008c  08009fe4  0002008c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 BLE_DRIVER_CONTEXT 00000035  20000910  0800a867  00020910  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 SYSTEM_DRIVER_CONTEXT 00000011  20000948  0800a89c  00020948  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          000003c8  2000095c  0800a8ad  0002095c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000d24  0800a8ad  00020d24  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020959  2**0
                  CONTENTS, READONLY
 13 MAPPING_TABLE 00000028  20030000  20030000  00030000  2**2
                  ALLOC
 14 MB_MEM1       000001bb  20030028  20030028  00030000  2**2
                  ALLOC
 15 .debug_info   0002fb34  00000000  00000000  00020989  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00005cae  00000000  00000000  000504bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 000029b0  00000000  00000000  00056170  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 00002718  00000000  00000000  00058b20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0000c041  00000000  00000000  0005b238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0002e507  00000000  00000000  00067279  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000fa660  00000000  00000000  00095780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000050  00000000  00000000  0018fde0  2**0
                  CONTENTS, READONLY
 23 .debug_frame  0000b680  00000000  00000000  0018fe30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	2000095c 	.word	0x2000095c
 800015c:	00000000 	.word	0x00000000
 8000160:	08009bd0 	.word	0x08009bd0

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000960 	.word	0x20000960
 800017c:	08009bd0 	.word	0x08009bd0

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_uldivmod>:
 8000230:	b953      	cbnz	r3, 8000248 <__aeabi_uldivmod+0x18>
 8000232:	b94a      	cbnz	r2, 8000248 <__aeabi_uldivmod+0x18>
 8000234:	2900      	cmp	r1, #0
 8000236:	bf08      	it	eq
 8000238:	2800      	cmpeq	r0, #0
 800023a:	bf1c      	itt	ne
 800023c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000240:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000244:	f000 b974 	b.w	8000530 <__aeabi_idiv0>
 8000248:	f1ad 0c08 	sub.w	ip, sp, #8
 800024c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000258:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800025c:	b004      	add	sp, #16
 800025e:	4770      	bx	lr

08000260 <__udivmoddi4>:
 8000260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000264:	9d08      	ldr	r5, [sp, #32]
 8000266:	4604      	mov	r4, r0
 8000268:	468e      	mov	lr, r1
 800026a:	2b00      	cmp	r3, #0
 800026c:	d14d      	bne.n	800030a <__udivmoddi4+0xaa>
 800026e:	428a      	cmp	r2, r1
 8000270:	4694      	mov	ip, r2
 8000272:	d969      	bls.n	8000348 <__udivmoddi4+0xe8>
 8000274:	fab2 f282 	clz	r2, r2
 8000278:	b152      	cbz	r2, 8000290 <__udivmoddi4+0x30>
 800027a:	fa01 f302 	lsl.w	r3, r1, r2
 800027e:	f1c2 0120 	rsb	r1, r2, #32
 8000282:	fa20 f101 	lsr.w	r1, r0, r1
 8000286:	fa0c fc02 	lsl.w	ip, ip, r2
 800028a:	ea41 0e03 	orr.w	lr, r1, r3
 800028e:	4094      	lsls	r4, r2
 8000290:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000294:	0c21      	lsrs	r1, r4, #16
 8000296:	fbbe f6f8 	udiv	r6, lr, r8
 800029a:	fa1f f78c 	uxth.w	r7, ip
 800029e:	fb08 e316 	mls	r3, r8, r6, lr
 80002a2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002a6:	fb06 f107 	mul.w	r1, r6, r7
 80002aa:	4299      	cmp	r1, r3
 80002ac:	d90a      	bls.n	80002c4 <__udivmoddi4+0x64>
 80002ae:	eb1c 0303 	adds.w	r3, ip, r3
 80002b2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002b6:	f080 811f 	bcs.w	80004f8 <__udivmoddi4+0x298>
 80002ba:	4299      	cmp	r1, r3
 80002bc:	f240 811c 	bls.w	80004f8 <__udivmoddi4+0x298>
 80002c0:	3e02      	subs	r6, #2
 80002c2:	4463      	add	r3, ip
 80002c4:	1a5b      	subs	r3, r3, r1
 80002c6:	b2a4      	uxth	r4, r4
 80002c8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002cc:	fb08 3310 	mls	r3, r8, r0, r3
 80002d0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d4:	fb00 f707 	mul.w	r7, r0, r7
 80002d8:	42a7      	cmp	r7, r4
 80002da:	d90a      	bls.n	80002f2 <__udivmoddi4+0x92>
 80002dc:	eb1c 0404 	adds.w	r4, ip, r4
 80002e0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002e4:	f080 810a 	bcs.w	80004fc <__udivmoddi4+0x29c>
 80002e8:	42a7      	cmp	r7, r4
 80002ea:	f240 8107 	bls.w	80004fc <__udivmoddi4+0x29c>
 80002ee:	4464      	add	r4, ip
 80002f0:	3802      	subs	r0, #2
 80002f2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002f6:	1be4      	subs	r4, r4, r7
 80002f8:	2600      	movs	r6, #0
 80002fa:	b11d      	cbz	r5, 8000304 <__udivmoddi4+0xa4>
 80002fc:	40d4      	lsrs	r4, r2
 80002fe:	2300      	movs	r3, #0
 8000300:	e9c5 4300 	strd	r4, r3, [r5]
 8000304:	4631      	mov	r1, r6
 8000306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030a:	428b      	cmp	r3, r1
 800030c:	d909      	bls.n	8000322 <__udivmoddi4+0xc2>
 800030e:	2d00      	cmp	r5, #0
 8000310:	f000 80ef 	beq.w	80004f2 <__udivmoddi4+0x292>
 8000314:	2600      	movs	r6, #0
 8000316:	e9c5 0100 	strd	r0, r1, [r5]
 800031a:	4630      	mov	r0, r6
 800031c:	4631      	mov	r1, r6
 800031e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000322:	fab3 f683 	clz	r6, r3
 8000326:	2e00      	cmp	r6, #0
 8000328:	d14a      	bne.n	80003c0 <__udivmoddi4+0x160>
 800032a:	428b      	cmp	r3, r1
 800032c:	d302      	bcc.n	8000334 <__udivmoddi4+0xd4>
 800032e:	4282      	cmp	r2, r0
 8000330:	f200 80f9 	bhi.w	8000526 <__udivmoddi4+0x2c6>
 8000334:	1a84      	subs	r4, r0, r2
 8000336:	eb61 0303 	sbc.w	r3, r1, r3
 800033a:	2001      	movs	r0, #1
 800033c:	469e      	mov	lr, r3
 800033e:	2d00      	cmp	r5, #0
 8000340:	d0e0      	beq.n	8000304 <__udivmoddi4+0xa4>
 8000342:	e9c5 4e00 	strd	r4, lr, [r5]
 8000346:	e7dd      	b.n	8000304 <__udivmoddi4+0xa4>
 8000348:	b902      	cbnz	r2, 800034c <__udivmoddi4+0xec>
 800034a:	deff      	udf	#255	; 0xff
 800034c:	fab2 f282 	clz	r2, r2
 8000350:	2a00      	cmp	r2, #0
 8000352:	f040 8092 	bne.w	800047a <__udivmoddi4+0x21a>
 8000356:	eba1 010c 	sub.w	r1, r1, ip
 800035a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800035e:	fa1f fe8c 	uxth.w	lr, ip
 8000362:	2601      	movs	r6, #1
 8000364:	0c20      	lsrs	r0, r4, #16
 8000366:	fbb1 f3f7 	udiv	r3, r1, r7
 800036a:	fb07 1113 	mls	r1, r7, r3, r1
 800036e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000372:	fb0e f003 	mul.w	r0, lr, r3
 8000376:	4288      	cmp	r0, r1
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0x12c>
 800037a:	eb1c 0101 	adds.w	r1, ip, r1
 800037e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x12a>
 8000384:	4288      	cmp	r0, r1
 8000386:	f200 80cb 	bhi.w	8000520 <__udivmoddi4+0x2c0>
 800038a:	4643      	mov	r3, r8
 800038c:	1a09      	subs	r1, r1, r0
 800038e:	b2a4      	uxth	r4, r4
 8000390:	fbb1 f0f7 	udiv	r0, r1, r7
 8000394:	fb07 1110 	mls	r1, r7, r0, r1
 8000398:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800039c:	fb0e fe00 	mul.w	lr, lr, r0
 80003a0:	45a6      	cmp	lr, r4
 80003a2:	d908      	bls.n	80003b6 <__udivmoddi4+0x156>
 80003a4:	eb1c 0404 	adds.w	r4, ip, r4
 80003a8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003ac:	d202      	bcs.n	80003b4 <__udivmoddi4+0x154>
 80003ae:	45a6      	cmp	lr, r4
 80003b0:	f200 80bb 	bhi.w	800052a <__udivmoddi4+0x2ca>
 80003b4:	4608      	mov	r0, r1
 80003b6:	eba4 040e 	sub.w	r4, r4, lr
 80003ba:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003be:	e79c      	b.n	80002fa <__udivmoddi4+0x9a>
 80003c0:	f1c6 0720 	rsb	r7, r6, #32
 80003c4:	40b3      	lsls	r3, r6
 80003c6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ca:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ce:	fa20 f407 	lsr.w	r4, r0, r7
 80003d2:	fa01 f306 	lsl.w	r3, r1, r6
 80003d6:	431c      	orrs	r4, r3
 80003d8:	40f9      	lsrs	r1, r7
 80003da:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003de:	fa00 f306 	lsl.w	r3, r0, r6
 80003e2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003e6:	0c20      	lsrs	r0, r4, #16
 80003e8:	fa1f fe8c 	uxth.w	lr, ip
 80003ec:	fb09 1118 	mls	r1, r9, r8, r1
 80003f0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f4:	fb08 f00e 	mul.w	r0, r8, lr
 80003f8:	4288      	cmp	r0, r1
 80003fa:	fa02 f206 	lsl.w	r2, r2, r6
 80003fe:	d90b      	bls.n	8000418 <__udivmoddi4+0x1b8>
 8000400:	eb1c 0101 	adds.w	r1, ip, r1
 8000404:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000408:	f080 8088 	bcs.w	800051c <__udivmoddi4+0x2bc>
 800040c:	4288      	cmp	r0, r1
 800040e:	f240 8085 	bls.w	800051c <__udivmoddi4+0x2bc>
 8000412:	f1a8 0802 	sub.w	r8, r8, #2
 8000416:	4461      	add	r1, ip
 8000418:	1a09      	subs	r1, r1, r0
 800041a:	b2a4      	uxth	r4, r4
 800041c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000420:	fb09 1110 	mls	r1, r9, r0, r1
 8000424:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000428:	fb00 fe0e 	mul.w	lr, r0, lr
 800042c:	458e      	cmp	lr, r1
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x1e2>
 8000430:	eb1c 0101 	adds.w	r1, ip, r1
 8000434:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000438:	d26c      	bcs.n	8000514 <__udivmoddi4+0x2b4>
 800043a:	458e      	cmp	lr, r1
 800043c:	d96a      	bls.n	8000514 <__udivmoddi4+0x2b4>
 800043e:	3802      	subs	r0, #2
 8000440:	4461      	add	r1, ip
 8000442:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000446:	fba0 9402 	umull	r9, r4, r0, r2
 800044a:	eba1 010e 	sub.w	r1, r1, lr
 800044e:	42a1      	cmp	r1, r4
 8000450:	46c8      	mov	r8, r9
 8000452:	46a6      	mov	lr, r4
 8000454:	d356      	bcc.n	8000504 <__udivmoddi4+0x2a4>
 8000456:	d053      	beq.n	8000500 <__udivmoddi4+0x2a0>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x212>
 800045a:	ebb3 0208 	subs.w	r2, r3, r8
 800045e:	eb61 010e 	sbc.w	r1, r1, lr
 8000462:	fa01 f707 	lsl.w	r7, r1, r7
 8000466:	fa22 f306 	lsr.w	r3, r2, r6
 800046a:	40f1      	lsrs	r1, r6
 800046c:	431f      	orrs	r7, r3
 800046e:	e9c5 7100 	strd	r7, r1, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	f1c2 0320 	rsb	r3, r2, #32
 800047e:	40d8      	lsrs	r0, r3
 8000480:	fa0c fc02 	lsl.w	ip, ip, r2
 8000484:	fa21 f303 	lsr.w	r3, r1, r3
 8000488:	4091      	lsls	r1, r2
 800048a:	4301      	orrs	r1, r0
 800048c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fbb3 f0f7 	udiv	r0, r3, r7
 8000498:	fb07 3610 	mls	r6, r7, r0, r3
 800049c:	0c0b      	lsrs	r3, r1, #16
 800049e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004a2:	fb00 f60e 	mul.w	r6, r0, lr
 80004a6:	429e      	cmp	r6, r3
 80004a8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x260>
 80004ae:	eb1c 0303 	adds.w	r3, ip, r3
 80004b2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004b6:	d22f      	bcs.n	8000518 <__udivmoddi4+0x2b8>
 80004b8:	429e      	cmp	r6, r3
 80004ba:	d92d      	bls.n	8000518 <__udivmoddi4+0x2b8>
 80004bc:	3802      	subs	r0, #2
 80004be:	4463      	add	r3, ip
 80004c0:	1b9b      	subs	r3, r3, r6
 80004c2:	b289      	uxth	r1, r1
 80004c4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004c8:	fb07 3316 	mls	r3, r7, r6, r3
 80004cc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004d0:	fb06 f30e 	mul.w	r3, r6, lr
 80004d4:	428b      	cmp	r3, r1
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x28a>
 80004d8:	eb1c 0101 	adds.w	r1, ip, r1
 80004dc:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004e0:	d216      	bcs.n	8000510 <__udivmoddi4+0x2b0>
 80004e2:	428b      	cmp	r3, r1
 80004e4:	d914      	bls.n	8000510 <__udivmoddi4+0x2b0>
 80004e6:	3e02      	subs	r6, #2
 80004e8:	4461      	add	r1, ip
 80004ea:	1ac9      	subs	r1, r1, r3
 80004ec:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004f0:	e738      	b.n	8000364 <__udivmoddi4+0x104>
 80004f2:	462e      	mov	r6, r5
 80004f4:	4628      	mov	r0, r5
 80004f6:	e705      	b.n	8000304 <__udivmoddi4+0xa4>
 80004f8:	4606      	mov	r6, r0
 80004fa:	e6e3      	b.n	80002c4 <__udivmoddi4+0x64>
 80004fc:	4618      	mov	r0, r3
 80004fe:	e6f8      	b.n	80002f2 <__udivmoddi4+0x92>
 8000500:	454b      	cmp	r3, r9
 8000502:	d2a9      	bcs.n	8000458 <__udivmoddi4+0x1f8>
 8000504:	ebb9 0802 	subs.w	r8, r9, r2
 8000508:	eb64 0e0c 	sbc.w	lr, r4, ip
 800050c:	3801      	subs	r0, #1
 800050e:	e7a3      	b.n	8000458 <__udivmoddi4+0x1f8>
 8000510:	4646      	mov	r6, r8
 8000512:	e7ea      	b.n	80004ea <__udivmoddi4+0x28a>
 8000514:	4620      	mov	r0, r4
 8000516:	e794      	b.n	8000442 <__udivmoddi4+0x1e2>
 8000518:	4640      	mov	r0, r8
 800051a:	e7d1      	b.n	80004c0 <__udivmoddi4+0x260>
 800051c:	46d0      	mov	r8, sl
 800051e:	e77b      	b.n	8000418 <__udivmoddi4+0x1b8>
 8000520:	3b02      	subs	r3, #2
 8000522:	4461      	add	r1, ip
 8000524:	e732      	b.n	800038c <__udivmoddi4+0x12c>
 8000526:	4630      	mov	r0, r6
 8000528:	e709      	b.n	800033e <__udivmoddi4+0xde>
 800052a:	4464      	add	r4, ip
 800052c:	3802      	subs	r0, #2
 800052e:	e742      	b.n	80003b6 <__udivmoddi4+0x156>

08000530 <__aeabi_idiv0>:
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop

08000534 <APPD_EnableCPU2>:
/* USER CODE END APPD_Init */
  return;
}

void APPD_EnableCPU2( void )
{
 8000534:	b5b0      	push	{r4, r5, r7, lr}
 8000536:	b088      	sub	sp, #32
 8000538:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 800053a:	4b0b      	ldr	r3, [pc, #44]	; (8000568 <APPD_EnableCPU2+0x34>)
 800053c:	1d3c      	adds	r4, r7, #4
 800053e:	461d      	mov	r5, r3
 8000540:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000542:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000544:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000548:	c403      	stmia	r4!, {r0, r1}
 800054a:	8022      	strh	r2, [r4, #0]
 800054c:	3402      	adds	r4, #2
 800054e:	0c13      	lsrs	r3, r2, #16
 8000550:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 8000552:	f007 f969 	bl	8007828 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 8000556:	1d3b      	adds	r3, r7, #4
 8000558:	4618      	mov	r0, r3
 800055a:	f006 fc04 	bl	8006d66 <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 800055e:	bf00      	nop
}
 8000560:	3720      	adds	r7, #32
 8000562:	46bd      	mov	sp, r7
 8000564:	bdb0      	pop	{r4, r5, r7, pc}
 8000566:	bf00      	nop
 8000568:	08009be8 	.word	0x08009be8

0800056c <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 800056c:	b480      	push	{r7}
 800056e:	b083      	sub	sp, #12
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 8000574:	4b07      	ldr	r3, [pc, #28]	; (8000594 <LL_C2_PWR_SetPowerMode+0x28>)
 8000576:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800057a:	f023 0207 	bic.w	r2, r3, #7
 800057e:	4905      	ldr	r1, [pc, #20]	; (8000594 <LL_C2_PWR_SetPowerMode+0x28>)
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	4313      	orrs	r3, r2
 8000584:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8000588:	bf00      	nop
 800058a:	370c      	adds	r7, #12
 800058c:	46bd      	mov	sp, r7
 800058e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000592:	4770      	bx	lr
 8000594:	58000400 	.word	0x58000400

08000598 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8000598:	b480      	push	{r7}
 800059a:	b083      	sub	sp, #12
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80005a0:	4b06      	ldr	r3, [pc, #24]	; (80005bc <LL_EXTI_EnableIT_32_63+0x24>)
 80005a2:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80005a6:	4905      	ldr	r1, [pc, #20]	; (80005bc <LL_EXTI_EnableIT_32_63+0x24>)
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	4313      	orrs	r3, r2
 80005ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80005b0:	bf00      	nop
 80005b2:	370c      	adds	r7, #12
 80005b4:	46bd      	mov	sp, r7
 80005b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ba:	4770      	bx	lr
 80005bc:	58000800 	.word	0x58000800

080005c0 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 80005c0:	b480      	push	{r7}
 80005c2:	b083      	sub	sp, #12
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 80005c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80005cc:	4a0a      	ldr	r2, [pc, #40]	; (80005f8 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 80005ce:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 80005d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80005d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80005da:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	021b      	lsls	r3, r3, #8
 80005e2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80005e6:	4313      	orrs	r3, r2
 80005e8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 80005ec:	bf00      	nop
 80005ee:	370c      	adds	r7, #12
 80005f0:	46bd      	mov	sp, r7
 80005f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f6:	4770      	bx	lr
 80005f8:	cafecafe 	.word	0xcafecafe

080005fc <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 80005fc:	b480      	push	{r7}
 80005fe:	b083      	sub	sp, #12
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000604:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000608:	689b      	ldr	r3, [r3, #8]
 800060a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800060e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	4313      	orrs	r3, r2
 8000616:	608b      	str	r3, [r1, #8]
}
 8000618:	bf00      	nop
 800061a:	370c      	adds	r7, #12
 800061c:	46bd      	mov	sp, r7
 800061e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000622:	4770      	bx	lr

08000624 <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000628:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800062c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000630:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000634:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000638:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800063c:	bf00      	nop
 800063e:	46bd      	mov	sp, r7
 8000640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000644:	4770      	bx	lr

08000646 <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 8000646:	b480      	push	{r7}
 8000648:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800064a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800064e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000652:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000656:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800065a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800065e:	bf00      	nop
 8000660:	46bd      	mov	sp, r7
 8000662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000666:	4770      	bx	lr

08000668 <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 8000668:	b480      	push	{r7}
 800066a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 800066c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000670:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000674:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000678:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800067c:	d101      	bne.n	8000682 <LL_RCC_IsActiveFlag_PINRST+0x1a>
 800067e:	2301      	movs	r3, #1
 8000680:	e000      	b.n	8000684 <LL_RCC_IsActiveFlag_PINRST+0x1c>
 8000682:	2300      	movs	r3, #0
}
 8000684:	4618      	mov	r0, r3
 8000686:	46bd      	mov	sp, r7
 8000688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068c:	4770      	bx	lr

0800068e <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 800068e:	b480      	push	{r7}
 8000690:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 8000692:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000696:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800069a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800069e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80006a2:	d101      	bne.n	80006a8 <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 80006a4:	2301      	movs	r3, #1
 80006a6:	e000      	b.n	80006aa <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 80006a8:	2300      	movs	r3, #0
}
 80006aa:	4618      	mov	r0, r3
 80006ac:	46bd      	mov	sp, r7
 80006ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b2:	4770      	bx	lr

080006b4 <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 80006b4:	b480      	push	{r7}
 80006b6:	b085      	sub	sp, #20
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 80006bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80006c0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80006c2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	4313      	orrs	r3, r2
 80006ca:	650b      	str	r3, [r1, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80006cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80006d0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	4013      	ands	r3, r2
 80006d6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80006d8:	68fb      	ldr	r3, [r7, #12]
}
 80006da:	bf00      	nop
 80006dc:	3714      	adds	r7, #20
 80006de:	46bd      	mov	sp, r7
 80006e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e4:	4770      	bx	lr
	...

080006e8 <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 80006e8:	b480      	push	{r7}
 80006ea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 80006ec:	4b04      	ldr	r3, [pc, #16]	; (8000700 <LL_DBGMCU_GetDeviceID+0x18>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 80006f4:	4618      	mov	r0, r3
 80006f6:	46bd      	mov	sp, r7
 80006f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fc:	4770      	bx	lr
 80006fe:	bf00      	nop
 8000700:	e0042000 	.word	0xe0042000

08000704 <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 8000704:	b480      	push	{r7}
 8000706:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 8000708:	4b04      	ldr	r3, [pc, #16]	; (800071c <LL_DBGMCU_GetRevisionID+0x18>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	0c1b      	lsrs	r3, r3, #16
 800070e:	b29b      	uxth	r3, r3
}
 8000710:	4618      	mov	r0, r3
 8000712:	46bd      	mov	sp, r7
 8000714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000718:	4770      	bx	lr
 800071a:	bf00      	nop
 800071c:	e0042000 	.word	0xe0042000

08000720 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000720:	b480      	push	{r7}
 8000722:	b083      	sub	sp, #12
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
 8000728:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	685a      	ldr	r2, [r3, #4]
 800072e:	683b      	ldr	r3, [r7, #0]
 8000730:	041b      	lsls	r3, r3, #16
 8000732:	431a      	orrs	r2, r3
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	605a      	str	r2, [r3, #4]
}
 8000738:	bf00      	nop
 800073a:	370c      	adds	r7, #12
 800073c:	46bd      	mov	sp, r7
 800073e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000742:	4770      	bx	lr

08000744 <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000744:	b480      	push	{r7}
 8000746:	b083      	sub	sp, #12
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
 800074c:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	685a      	ldr	r2, [r3, #4]
 8000752:	683b      	ldr	r3, [r7, #0]
 8000754:	431a      	orrs	r2, r3
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	605a      	str	r2, [r3, #4]
}
 800075a:	bf00      	nop
 800075c:	370c      	adds	r7, #12
 800075e:	46bd      	mov	sp, r7
 8000760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000764:	4770      	bx	lr

08000766 <LL_C2_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000766:	b480      	push	{r7}
 8000768:	b083      	sub	sp, #12
 800076a:	af00      	add	r7, sp, #0
 800076c:	6078      	str	r0, [r7, #4]
 800076e:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	695a      	ldr	r2, [r3, #20]
 8000774:	683b      	ldr	r3, [r7, #0]
 8000776:	041b      	lsls	r3, r3, #16
 8000778:	431a      	orrs	r2, r3
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	615a      	str	r2, [r3, #20]
}
 800077e:	bf00      	nop
 8000780:	370c      	adds	r7, #12
 8000782:	46bd      	mov	sp, r7
 8000784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000788:	4770      	bx	lr

0800078a <LL_C2_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800078a:	b480      	push	{r7}
 800078c:	b083      	sub	sp, #12
 800078e:	af00      	add	r7, sp, #0
 8000790:	6078      	str	r0, [r7, #4]
 8000792:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	695a      	ldr	r2, [r3, #20]
 8000798:	683b      	ldr	r3, [r7, #0]
 800079a:	431a      	orrs	r2, r3
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	615a      	str	r2, [r3, #20]
}
 80007a0:	bf00      	nop
 80007a2:	370c      	adds	r7, #12
 80007a4:	46bd      	mov	sp, r7
 80007a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007aa:	4770      	bx	lr

080007ac <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80007ac:	b480      	push	{r7}
 80007ae:	b083      	sub	sp, #12
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
 80007b4:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	683a      	ldr	r2, [r7, #0]
 80007ba:	609a      	str	r2, [r3, #8]
}
 80007bc:	bf00      	nop
 80007be:	370c      	adds	r7, #12
 80007c0:	46bd      	mov	sp, r7
 80007c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c6:	4770      	bx	lr

080007c8 <LL_C2_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80007c8:	b480      	push	{r7}
 80007ca:	b083      	sub	sp, #12
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
 80007d0:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	683a      	ldr	r2, [r7, #0]
 80007d6:	619a      	str	r2, [r3, #24]
}
 80007d8:	bf00      	nop
 80007da:	370c      	adds	r7, #12
 80007dc:	46bd      	mov	sp, r7
 80007de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e2:	4770      	bx	lr

080007e4 <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80007e8:	4b05      	ldr	r3, [pc, #20]	; (8000800 <LL_LPM_EnableSleep+0x1c>)
 80007ea:	691b      	ldr	r3, [r3, #16]
 80007ec:	4a04      	ldr	r2, [pc, #16]	; (8000800 <LL_LPM_EnableSleep+0x1c>)
 80007ee:	f023 0304 	bic.w	r3, r3, #4
 80007f2:	6113      	str	r3, [r2, #16]
}
 80007f4:	bf00      	nop
 80007f6:	46bd      	mov	sp, r7
 80007f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fc:	4770      	bx	lr
 80007fe:	bf00      	nop
 8000800:	e000ed00 	.word	0xe000ed00

08000804 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8000804:	b480      	push	{r7}
 8000806:	b083      	sub	sp, #12
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	22ff      	movs	r2, #255	; 0xff
 8000810:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000812:	bf00      	nop
 8000814:	370c      	adds	r7, #12
 8000816:	46bd      	mov	sp, r7
 8000818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081c:	4770      	bx	lr

0800081e <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 800081e:	b480      	push	{r7}
 8000820:	b083      	sub	sp, #12
 8000822:	af00      	add	r7, sp, #0
 8000824:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	22ca      	movs	r2, #202	; 0xca
 800082a:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	2253      	movs	r2, #83	; 0x53
 8000830:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000832:	bf00      	nop
 8000834:	370c      	adds	r7, #12
 8000836:	46bd      	mov	sp, r7
 8000838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083c:	4770      	bx	lr

0800083e <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 800083e:	b480      	push	{r7}
 8000840:	b083      	sub	sp, #12
 8000842:	af00      	add	r7, sp, #0
 8000844:	6078      	str	r0, [r7, #4]
 8000846:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	689b      	ldr	r3, [r3, #8]
 800084c:	f023 0207 	bic.w	r2, r3, #7
 8000850:	683b      	ldr	r3, [r7, #0]
 8000852:	431a      	orrs	r2, r3
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	609a      	str	r2, [r3, #8]
}
 8000858:	bf00      	nop
 800085a:	370c      	adds	r7, #12
 800085c:	46bd      	mov	sp, r7
 800085e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000862:	4770      	bx	lr

08000864 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8000868:	4b04      	ldr	r3, [pc, #16]	; (800087c <MX_APPE_Config+0x18>)
 800086a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800086e:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 8000870:	f000 f824 	bl	80008bc <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 8000874:	f000 f864 	bl	8000940 <Config_HSE>

  return;
 8000878:	bf00      	nop
}
 800087a:	bd80      	pop	{r7, pc}
 800087c:	58004000 	.word	0x58004000

08000880 <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 8000884:	f000 f870 	bl	8000968 <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 8000888:	f000 f888 	bl	800099c <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 800088c:	4903      	ldr	r1, [pc, #12]	; (800089c <MX_APPE_Init+0x1c>)
 800088e:	2000      	movs	r0, #0
 8000890:	f000 fdd4 	bl	800143c <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8000894:	f000 f890 	bl	80009b8 <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 8000898:	bf00      	nop
}
 800089a:	bd80      	pop	{r7, pc}
 800089c:	20000aa8 	.word	0x20000aa8

080008a0 <Init_Smps>:

void Init_Smps(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 80008a4:	bf00      	nop
}
 80008a6:	46bd      	mov	sp, r7
 80008a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ac:	4770      	bx	lr

080008ae <Init_Exti>:

void Init_Exti(void)
{
 80008ae:	b580      	push	{r7, lr}
 80008b0:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 80008b2:	2050      	movs	r0, #80	; 0x50
 80008b4:	f7ff fe70 	bl	8000598 <LL_EXTI_EnableIT_32_63>

  return;
 80008b8:	bf00      	nop
}
 80008ba:	bd80      	pop	{r7, pc}

080008bc <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
#if (CFG_HW_RESET_BY_FW == 1)
  Reset_BackupDomain();
 80008c0:	f000 f804 	bl	80008cc <Reset_BackupDomain>

  Reset_IPCC();
 80008c4:	f000 f81a 	bl	80008fc <Reset_IPCC>
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 80008c8:	bf00      	nop
}
 80008ca:	bd80      	pop	{r7, pc}

080008cc <Reset_BackupDomain>:

#if (CFG_HW_RESET_BY_FW == 1)
static void Reset_BackupDomain(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
  if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 80008d0:	f7ff feca 	bl	8000668 <LL_RCC_IsActiveFlag_PINRST>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d00d      	beq.n	80008f6 <Reset_BackupDomain+0x2a>
 80008da:	f7ff fed8 	bl	800068e <LL_RCC_IsActiveFlag_SFTRST>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d108      	bne.n	80008f6 <Reset_BackupDomain+0x2a>
  {
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 80008e4:	f002 fa4c 	bl	8002d80 <HAL_PWR_EnableBkUpAccess>

    /**
     *  Write twice the value to flush the APB-AHB bridge
     *  This bit shall be written in the register before writing the next one
     */
    HAL_PWR_EnableBkUpAccess();
 80008e8:	f002 fa4a 	bl	8002d80 <HAL_PWR_EnableBkUpAccess>

    __HAL_RCC_BACKUPRESET_FORCE();
 80008ec:	f7ff fe9a 	bl	8000624 <LL_RCC_ForceBackupDomainReset>
    __HAL_RCC_BACKUPRESET_RELEASE();
 80008f0:	f7ff fea9 	bl	8000646 <LL_RCC_ReleaseBackupDomainReset>
  }

  return;
 80008f4:	bf00      	nop
 80008f6:	bf00      	nop
}
 80008f8:	bd80      	pop	{r7, pc}
	...

080008fc <Reset_IPCC>:

static void Reset_IPCC(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 8000900:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000904:	f7ff fed6 	bl	80006b4 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_ClearFlag_CHx(
 8000908:	213f      	movs	r1, #63	; 0x3f
 800090a:	480c      	ldr	r0, [pc, #48]	; (800093c <Reset_IPCC+0x40>)
 800090c:	f7ff ff4e 	bl	80007ac <LL_C1_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_ClearFlag_CHx(
 8000910:	213f      	movs	r1, #63	; 0x3f
 8000912:	480a      	ldr	r0, [pc, #40]	; (800093c <Reset_IPCC+0x40>)
 8000914:	f7ff ff58 	bl	80007c8 <LL_C2_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableTransmitChannel(
 8000918:	213f      	movs	r1, #63	; 0x3f
 800091a:	4808      	ldr	r0, [pc, #32]	; (800093c <Reset_IPCC+0x40>)
 800091c:	f7ff ff00 	bl	8000720 <LL_C1_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableTransmitChannel(
 8000920:	213f      	movs	r1, #63	; 0x3f
 8000922:	4806      	ldr	r0, [pc, #24]	; (800093c <Reset_IPCC+0x40>)
 8000924:	f7ff ff1f 	bl	8000766 <LL_C2_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableReceiveChannel(
 8000928:	213f      	movs	r1, #63	; 0x3f
 800092a:	4804      	ldr	r0, [pc, #16]	; (800093c <Reset_IPCC+0x40>)
 800092c:	f7ff ff0a 	bl	8000744 <LL_C1_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableReceiveChannel(
 8000930:	213f      	movs	r1, #63	; 0x3f
 8000932:	4802      	ldr	r0, [pc, #8]	; (800093c <Reset_IPCC+0x40>)
 8000934:	f7ff ff29 	bl	800078a <LL_C2_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  return;
 8000938:	bf00      	nop
}
 800093a:	bd80      	pop	{r7, pc}
 800093c:	58000c00 	.word	0x58000c00

08000940 <Config_HSE>:
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b082      	sub	sp, #8
 8000944:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8000946:	2000      	movs	r0, #0
 8000948:	f006 fffa 	bl	8007940 <OTP_Read>
 800094c:	6078      	str	r0, [r7, #4]
  if (p_otp)
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	2b00      	cmp	r3, #0
 8000952:	d005      	beq.n	8000960 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	799b      	ldrb	r3, [r3, #6]
 8000958:	4618      	mov	r0, r3
 800095a:	f7ff fe31 	bl	80005c0 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 800095e:	bf00      	nop
 8000960:	bf00      	nop
}
 8000962:	3708      	adds	r7, #8
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}

08000968 <System_Init>:

static void System_Init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
  Init_Smps();
 800096c:	f7ff ff98 	bl	80008a0 <Init_Smps>

  Init_Exti();
 8000970:	f7ff ff9d 	bl	80008ae <Init_Exti>

  Init_Rtc();
 8000974:	f000 f802 	bl	800097c <Init_Rtc>

  return;
 8000978:	bf00      	nop
}
 800097a:	bd80      	pop	{r7, pc}

0800097c <Init_Rtc>:

static void Init_Rtc(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 8000980:	4805      	ldr	r0, [pc, #20]	; (8000998 <Init_Rtc+0x1c>)
 8000982:	f7ff ff4c 	bl	800081e <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 8000986:	2100      	movs	r1, #0
 8000988:	4803      	ldr	r0, [pc, #12]	; (8000998 <Init_Rtc+0x1c>)
 800098a:	f7ff ff58 	bl	800083e <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 800098e:	4802      	ldr	r0, [pc, #8]	; (8000998 <Init_Rtc+0x1c>)
 8000990:	f7ff ff38 	bl	8000804 <LL_RTC_EnableWriteProtection>

  return;
 8000994:	bf00      	nop
}
 8000996:	bd80      	pop	{r7, pc}
 8000998:	40002800 	.word	0x40002800

0800099c <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 80009a0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80009a4:	f7ff fe2a 	bl	80005fc <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 80009a8:	f007 fec4 	bl	8008734 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 80009ac:	2004      	movs	r0, #4
 80009ae:	f7ff fddd 	bl	800056c <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 80009b2:	bf00      	nop
}
 80009b4:	bd80      	pop	{r7, pc}
	...

080009b8 <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b088      	sub	sp, #32
 80009bc:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 80009be:	f006 fd7d 	bl	80074bc <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 80009c2:	4a11      	ldr	r2, [pc, #68]	; (8000a08 <appe_Tl_Init+0x50>)
 80009c4:	2100      	movs	r1, #0
 80009c6:	2004      	movs	r0, #4
 80009c8:	f007 fff2 	bl	80089b0 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 80009cc:	4b0f      	ldr	r3, [pc, #60]	; (8000a0c <appe_Tl_Init+0x54>)
 80009ce:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 80009d0:	4b0f      	ldr	r3, [pc, #60]	; (8000a10 <appe_Tl_Init+0x58>)
 80009d2:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 80009d4:	463b      	mov	r3, r7
 80009d6:	4619      	mov	r1, r3
 80009d8:	480e      	ldr	r0, [pc, #56]	; (8000a14 <appe_Tl_Init+0x5c>)
 80009da:	f006 fc35 	bl	8007248 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 80009de:	4b0e      	ldr	r3, [pc, #56]	; (8000a18 <appe_Tl_Init+0x60>)
 80009e0:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 80009e2:	4b0e      	ldr	r3, [pc, #56]	; (8000a1c <appe_Tl_Init+0x64>)
 80009e4:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 80009e6:	4b0e      	ldr	r3, [pc, #56]	; (8000a20 <appe_Tl_Init+0x68>)
 80009e8:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 80009ea:	f240 533c 	movw	r3, #1340	; 0x53c
 80009ee:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 80009f0:	f107 0308 	add.w	r3, r7, #8
 80009f4:	4618      	mov	r0, r3
 80009f6:	f006 fea3 	bl	8007740 <TL_MM_Init>

  TL_Enable();
 80009fa:	f006 fd59 	bl	80074b0 <TL_Enable>

  return;
 80009fe:	bf00      	nop
}
 8000a00:	3720      	adds	r7, #32
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	08007281 	.word	0x08007281
 8000a0c:	200005dc 	.word	0x200005dc
 8000a10:	08000a25 	.word	0x08000a25
 8000a14:	08000a3d 	.word	0x08000a3d
 8000a18:	200007f4 	.word	0x200007f4
 8000a1c:	200006e8 	.word	0x200006e8
 8000a20:	200000a0 	.word	0x200000a0

08000a24 <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 8000a24:	b480      	push	{r7}
 8000a26:	b083      	sub	sp, #12
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 8000a2e:	bf00      	nop
}
 8000a30:	370c      	adds	r7, #12
 8000a32:	46bd      	mov	sp, r7
 8000a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a38:	4770      	bx	lr
	...

08000a3c <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b088      	sub	sp, #32
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	685b      	ldr	r3, [r3, #4]
 8000a48:	330b      	adds	r3, #11
 8000a4a:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 8000a4c:	69fb      	ldr	r3, [r7, #28]
 8000a4e:	881b      	ldrh	r3, [r3, #0]
 8000a50:	b29b      	uxth	r3, r3
 8000a52:	f5a3 4312 	sub.w	r3, r3, #37376	; 0x9200
 8000a56:	2b07      	cmp	r3, #7
 8000a58:	d81f      	bhi.n	8000a9a <APPE_SysUserEvtRx+0x5e>
 8000a5a:	a201      	add	r2, pc, #4	; (adr r2, 8000a60 <APPE_SysUserEvtRx+0x24>)
 8000a5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a60:	08000a81 	.word	0x08000a81
 8000a64:	08000a93 	.word	0x08000a93
 8000a68:	08000a9b 	.word	0x08000a9b
 8000a6c:	08000a9b 	.word	0x08000a9b
 8000a70:	08000a9b 	.word	0x08000a9b
 8000a74:	08000a9b 	.word	0x08000a9b
 8000a78:	08000a9b 	.word	0x08000a9b
 8000a7c:	08000a9b 	.word	0x08000a9b
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 8000a80:	f107 030c 	add.w	r3, r7, #12
 8000a84:	4618      	mov	r0, r3
 8000a86:	f006 f99b 	bl	8006dc0 <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
    APPE_SysEvtReadyProcessing(pPayload);
 8000a8a:	6878      	ldr	r0, [r7, #4]
 8000a8c:	f000 f81b 	bl	8000ac6 <APPE_SysEvtReadyProcessing>
    break;
 8000a90:	e004      	b.n	8000a9c <APPE_SysUserEvtRx+0x60>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
    APPE_SysEvtError(pPayload);
 8000a92:	6878      	ldr	r0, [r7, #4]
 8000a94:	f000 f806 	bl	8000aa4 <APPE_SysEvtError>
    break;
 8000a98:	e000      	b.n	8000a9c <APPE_SysUserEvtRx+0x60>
  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
    break;

  default:
    break;
 8000a9a:	bf00      	nop
  }

  return;
 8000a9c:	bf00      	nop
}
 8000a9e:	3720      	adds	r7, #32
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}

08000aa4 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	b085      	sub	sp, #20
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	685b      	ldr	r3, [r3, #4]
 8000ab0:	330b      	adds	r3, #11
 8000ab2:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	3302      	adds	r3, #2
 8000ab8:	60bb      	str	r3, [r7, #8]
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 8000aba:	bf00      	nop
}
 8000abc:	3714      	adds	r7, #20
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr

08000ac6 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 8000ac6:	b580      	push	{r7, lr}
 8000ac8:	b08a      	sub	sp, #40	; 0x28
 8000aca:	af00      	add	r7, sp, #0
 8000acc:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 8000ace:	f107 0308 	add.w	r3, r7, #8
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	601a      	str	r2, [r3, #0]
 8000ad6:	605a      	str	r2, [r3, #4]
 8000ad8:	609a      	str	r2, [r3, #8]
 8000ada:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 8000adc:	2300      	movs	r3, #0
 8000ade:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t DeviceID=0;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	685b      	ldr	r3, [r3, #4]
 8000ae8:	330b      	adds	r3, #11
 8000aea:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 8000aec:	69fb      	ldr	r3, [r7, #28]
 8000aee:	3302      	adds	r3, #2
 8000af0:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 8000af2:	69bb      	ldr	r3, [r7, #24]
 8000af4:	781b      	ldrb	r3, [r3, #0]
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d11d      	bne.n	8000b36 <APPE_SysEvtReadyProcessing+0x70>
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");

    /* Traces channel initialization */
    APPD_EnableCPU2();
 8000afa:	f7ff fd1b 	bl	8000534 <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 8000afe:	230f      	movs	r3, #15
 8000b00:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 8000b02:	237f      	movs	r3, #127	; 0x7f
 8000b04:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 8000b06:	f7ff fdfd 	bl	8000704 <LL_DBGMCU_GetRevisionID>
 8000b0a:	6278      	str	r0, [r7, #36]	; 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);

    config_param.RevisionID = (uint16_t)RevisionID;
 8000b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b0e:	b29b      	uxth	r3, r3
 8000b10:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 8000b12:	f7ff fde9 	bl	80006e8 <LL_DBGMCU_GetDeviceID>
 8000b16:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
    config_param.DeviceID = (uint16_t)DeviceID;
 8000b18:	6a3b      	ldr	r3, [r7, #32]
 8000b1a:	b29b      	uxth	r3, r3
 8000b1c:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 8000b1e:	f107 0308 	add.w	r3, r7, #8
 8000b22:	4618      	mov	r0, r3
 8000b24:	f006 f936 	bl	8006d94 <SHCI_C2_Config>

    APP_BLE_Init();
 8000b28:	f007 f814 	bl	8007b54 <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	2001      	movs	r0, #1
 8000b30:	f007 fe12 	bl	8008758 <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 8000b34:	e007      	b.n	8000b46 <APPE_SysEvtReadyProcessing+0x80>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 8000b36:	69bb      	ldr	r3, [r7, #24]
 8000b38:	781b      	ldrb	r3, [r3, #0]
 8000b3a:	2b01      	cmp	r3, #1
 8000b3c:	d103      	bne.n	8000b46 <APPE_SysEvtReadyProcessing+0x80>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	2200      	movs	r2, #0
 8000b42:	701a      	strb	r2, [r3, #0]
  return;
 8000b44:	bf00      	nop
 8000b46:	bf00      	nop
}
 8000b48:	3728      	adds	r7, #40	; 0x28
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}

08000b4e <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 8000b4e:	b580      	push	{r7, lr}
 8000b50:	b084      	sub	sp, #16
 8000b52:	af00      	add	r7, sp, #0
 8000b54:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b56:	f001 fbe3 	bl	8002320 <HAL_GetTick>
 8000b5a:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000b66:	d00a      	beq.n	8000b7e <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 8000b68:	f001 fbf2 	bl	8002350 <HAL_GetTickFreq>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	461a      	mov	r2, r3
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	4413      	add	r3, r2
 8000b74:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b76:	e002      	b.n	8000b7e <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 8000b78:	f7ff fe34 	bl	80007e4 <LL_LPM_EnableSleep>
     */
  #if defined (__CC_ARM)
    __force_stores();
  #endif /* __CC_ARM */

    __WFI();
 8000b7c:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 8000b7e:	f001 fbcf 	bl	8002320 <HAL_GetTick>
 8000b82:	4602      	mov	r2, r0
 8000b84:	68bb      	ldr	r3, [r7, #8]
 8000b86:	1ad3      	subs	r3, r2, r3
 8000b88:	68fa      	ldr	r2, [r7, #12]
 8000b8a:	429a      	cmp	r2, r3
 8000b8c:	d8f4      	bhi.n	8000b78 <HAL_Delay+0x2a>
  }
}
 8000b8e:	bf00      	nop
 8000b90:	bf00      	nop
 8000b92:	3710      	adds	r7, #16
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}

08000b98 <MX_APPE_Process>:

void MX_APPE_Process(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8000b9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ba0:	f007 fe0a 	bl	80087b8 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 8000ba4:	bf00      	nop
 8000ba6:	bd80      	pop	{r7, pc}

08000ba8 <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 8000bac:	bf00      	nop
}
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr

08000bb6 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 8000bb6:	b580      	push	{r7, lr}
 8000bb8:	b082      	sub	sp, #8
 8000bba:	af00      	add	r7, sp, #0
 8000bbc:	6078      	str	r0, [r7, #4]
 8000bbe:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8000bc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bc4:	f007 fdf8 	bl	80087b8 <UTIL_SEQ_Run>

  return;
 8000bc8:	bf00      	nop
}
 8000bca:	3708      	adds	r7, #8
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}

08000bd0 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8000bd8:	2100      	movs	r1, #0
 8000bda:	2004      	movs	r0, #4
 8000bdc:	f007 ff0a 	bl	80089f4 <UTIL_SEQ_SetTask>
  return;
 8000be0:	bf00      	nop
}
 8000be2:	3708      	adds	r7, #8
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}

08000be8 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b082      	sub	sp, #8
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8000bf0:	2002      	movs	r0, #2
 8000bf2:	f007 ff6b 	bl	8008acc <UTIL_SEQ_SetEvt>
  return;
 8000bf6:	bf00      	nop
}
 8000bf8:	3708      	adds	r7, #8
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}

08000bfe <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 8000bfe:	b580      	push	{r7, lr}
 8000c00:	b082      	sub	sp, #8
 8000c02:	af00      	add	r7, sp, #0
 8000c04:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8000c06:	2002      	movs	r0, #2
 8000c08:	f007 ff80 	bl	8008b0c <UTIL_SEQ_WaitEvt>
  return;
 8000c0c:	bf00      	nop
}
 8000c0e:	3708      	adds	r7, #8
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}

08000c14 <LL_EXTI_EnableIT_0_31>:
{
 8000c14:	b480      	push	{r7}
 8000c16:	b083      	sub	sp, #12
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8000c1c:	4b06      	ldr	r3, [pc, #24]	; (8000c38 <LL_EXTI_EnableIT_0_31+0x24>)
 8000c1e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8000c22:	4905      	ldr	r1, [pc, #20]	; (8000c38 <LL_EXTI_EnableIT_0_31+0x24>)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	4313      	orrs	r3, r2
 8000c28:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8000c2c:	bf00      	nop
 8000c2e:	370c      	adds	r7, #12
 8000c30:	46bd      	mov	sp, r7
 8000c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c36:	4770      	bx	lr
 8000c38:	58000800 	.word	0x58000800

08000c3c <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	b083      	sub	sp, #12
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8000c44:	4b05      	ldr	r3, [pc, #20]	; (8000c5c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000c46:	681a      	ldr	r2, [r3, #0]
 8000c48:	4904      	ldr	r1, [pc, #16]	; (8000c5c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	4313      	orrs	r3, r2
 8000c4e:	600b      	str	r3, [r1, #0]

}
 8000c50:	bf00      	nop
 8000c52:	370c      	adds	r7, #12
 8000c54:	46bd      	mov	sp, r7
 8000c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5a:	4770      	bx	lr
 8000c5c:	58000800 	.word	0x58000800

08000c60 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	b083      	sub	sp, #12
 8000c64:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000c66:	4b0d      	ldr	r3, [pc, #52]	; (8000c9c <ReadRtcSsrValue+0x3c>)
 8000c68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c6a:	b29b      	uxth	r3, r3
 8000c6c:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000c6e:	4b0b      	ldr	r3, [pc, #44]	; (8000c9c <ReadRtcSsrValue+0x3c>)
 8000c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c72:	b29b      	uxth	r3, r3
 8000c74:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 8000c76:	e005      	b.n	8000c84 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000c7c:	4b07      	ldr	r3, [pc, #28]	; (8000c9c <ReadRtcSsrValue+0x3c>)
 8000c7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c80:	b29b      	uxth	r3, r3
 8000c82:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8000c84:	687a      	ldr	r2, [r7, #4]
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	429a      	cmp	r2, r3
 8000c8a:	d1f5      	bne.n	8000c78 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8000c8c:	683b      	ldr	r3, [r7, #0]
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	370c      	adds	r7, #12
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop
 8000c9c:	40002800 	.word	0x40002800

08000ca0 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b085      	sub	sp, #20
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	460a      	mov	r2, r1
 8000caa:	71fb      	strb	r3, [r7, #7]
 8000cac:	4613      	mov	r3, r2
 8000cae:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8000cb0:	79ba      	ldrb	r2, [r7, #6]
 8000cb2:	491d      	ldr	r1, [pc, #116]	; (8000d28 <LinkTimerAfter+0x88>)
 8000cb4:	4613      	mov	r3, r2
 8000cb6:	005b      	lsls	r3, r3, #1
 8000cb8:	4413      	add	r3, r2
 8000cba:	00db      	lsls	r3, r3, #3
 8000cbc:	440b      	add	r3, r1
 8000cbe:	3315      	adds	r3, #21
 8000cc0:	781b      	ldrb	r3, [r3, #0]
 8000cc2:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000cc4:	7bfb      	ldrb	r3, [r7, #15]
 8000cc6:	2b06      	cmp	r3, #6
 8000cc8:	d009      	beq.n	8000cde <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8000cca:	7bfa      	ldrb	r2, [r7, #15]
 8000ccc:	4916      	ldr	r1, [pc, #88]	; (8000d28 <LinkTimerAfter+0x88>)
 8000cce:	4613      	mov	r3, r2
 8000cd0:	005b      	lsls	r3, r3, #1
 8000cd2:	4413      	add	r3, r2
 8000cd4:	00db      	lsls	r3, r3, #3
 8000cd6:	440b      	add	r3, r1
 8000cd8:	3314      	adds	r3, #20
 8000cda:	79fa      	ldrb	r2, [r7, #7]
 8000cdc:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8000cde:	79fa      	ldrb	r2, [r7, #7]
 8000ce0:	4911      	ldr	r1, [pc, #68]	; (8000d28 <LinkTimerAfter+0x88>)
 8000ce2:	4613      	mov	r3, r2
 8000ce4:	005b      	lsls	r3, r3, #1
 8000ce6:	4413      	add	r3, r2
 8000ce8:	00db      	lsls	r3, r3, #3
 8000cea:	440b      	add	r3, r1
 8000cec:	3315      	adds	r3, #21
 8000cee:	7bfa      	ldrb	r2, [r7, #15]
 8000cf0:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8000cf2:	79fa      	ldrb	r2, [r7, #7]
 8000cf4:	490c      	ldr	r1, [pc, #48]	; (8000d28 <LinkTimerAfter+0x88>)
 8000cf6:	4613      	mov	r3, r2
 8000cf8:	005b      	lsls	r3, r3, #1
 8000cfa:	4413      	add	r3, r2
 8000cfc:	00db      	lsls	r3, r3, #3
 8000cfe:	440b      	add	r3, r1
 8000d00:	3314      	adds	r3, #20
 8000d02:	79ba      	ldrb	r2, [r7, #6]
 8000d04:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8000d06:	79ba      	ldrb	r2, [r7, #6]
 8000d08:	4907      	ldr	r1, [pc, #28]	; (8000d28 <LinkTimerAfter+0x88>)
 8000d0a:	4613      	mov	r3, r2
 8000d0c:	005b      	lsls	r3, r3, #1
 8000d0e:	4413      	add	r3, r2
 8000d10:	00db      	lsls	r3, r3, #3
 8000d12:	440b      	add	r3, r1
 8000d14:	3315      	adds	r3, #21
 8000d16:	79fa      	ldrb	r2, [r7, #7]
 8000d18:	701a      	strb	r2, [r3, #0]

  return;
 8000d1a:	bf00      	nop
}
 8000d1c:	3714      	adds	r7, #20
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop
 8000d28:	20000978 	.word	0x20000978

08000d2c <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b085      	sub	sp, #20
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	4603      	mov	r3, r0
 8000d34:	460a      	mov	r2, r1
 8000d36:	71fb      	strb	r3, [r7, #7]
 8000d38:	4613      	mov	r3, r2
 8000d3a:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8000d3c:	4b29      	ldr	r3, [pc, #164]	; (8000de4 <LinkTimerBefore+0xb8>)
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	b2db      	uxtb	r3, r3
 8000d42:	79ba      	ldrb	r2, [r7, #6]
 8000d44:	429a      	cmp	r2, r3
 8000d46:	d032      	beq.n	8000dae <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8000d48:	79ba      	ldrb	r2, [r7, #6]
 8000d4a:	4927      	ldr	r1, [pc, #156]	; (8000de8 <LinkTimerBefore+0xbc>)
 8000d4c:	4613      	mov	r3, r2
 8000d4e:	005b      	lsls	r3, r3, #1
 8000d50:	4413      	add	r3, r2
 8000d52:	00db      	lsls	r3, r3, #3
 8000d54:	440b      	add	r3, r1
 8000d56:	3314      	adds	r3, #20
 8000d58:	781b      	ldrb	r3, [r3, #0]
 8000d5a:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8000d5c:	7bfa      	ldrb	r2, [r7, #15]
 8000d5e:	4922      	ldr	r1, [pc, #136]	; (8000de8 <LinkTimerBefore+0xbc>)
 8000d60:	4613      	mov	r3, r2
 8000d62:	005b      	lsls	r3, r3, #1
 8000d64:	4413      	add	r3, r2
 8000d66:	00db      	lsls	r3, r3, #3
 8000d68:	440b      	add	r3, r1
 8000d6a:	3315      	adds	r3, #21
 8000d6c:	79fa      	ldrb	r2, [r7, #7]
 8000d6e:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8000d70:	79fa      	ldrb	r2, [r7, #7]
 8000d72:	491d      	ldr	r1, [pc, #116]	; (8000de8 <LinkTimerBefore+0xbc>)
 8000d74:	4613      	mov	r3, r2
 8000d76:	005b      	lsls	r3, r3, #1
 8000d78:	4413      	add	r3, r2
 8000d7a:	00db      	lsls	r3, r3, #3
 8000d7c:	440b      	add	r3, r1
 8000d7e:	3315      	adds	r3, #21
 8000d80:	79ba      	ldrb	r2, [r7, #6]
 8000d82:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8000d84:	79fa      	ldrb	r2, [r7, #7]
 8000d86:	4918      	ldr	r1, [pc, #96]	; (8000de8 <LinkTimerBefore+0xbc>)
 8000d88:	4613      	mov	r3, r2
 8000d8a:	005b      	lsls	r3, r3, #1
 8000d8c:	4413      	add	r3, r2
 8000d8e:	00db      	lsls	r3, r3, #3
 8000d90:	440b      	add	r3, r1
 8000d92:	3314      	adds	r3, #20
 8000d94:	7bfa      	ldrb	r2, [r7, #15]
 8000d96:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000d98:	79ba      	ldrb	r2, [r7, #6]
 8000d9a:	4913      	ldr	r1, [pc, #76]	; (8000de8 <LinkTimerBefore+0xbc>)
 8000d9c:	4613      	mov	r3, r2
 8000d9e:	005b      	lsls	r3, r3, #1
 8000da0:	4413      	add	r3, r2
 8000da2:	00db      	lsls	r3, r3, #3
 8000da4:	440b      	add	r3, r1
 8000da6:	3314      	adds	r3, #20
 8000da8:	79fa      	ldrb	r2, [r7, #7]
 8000daa:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8000dac:	e014      	b.n	8000dd8 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8000dae:	79fa      	ldrb	r2, [r7, #7]
 8000db0:	490d      	ldr	r1, [pc, #52]	; (8000de8 <LinkTimerBefore+0xbc>)
 8000db2:	4613      	mov	r3, r2
 8000db4:	005b      	lsls	r3, r3, #1
 8000db6:	4413      	add	r3, r2
 8000db8:	00db      	lsls	r3, r3, #3
 8000dba:	440b      	add	r3, r1
 8000dbc:	3315      	adds	r3, #21
 8000dbe:	79ba      	ldrb	r2, [r7, #6]
 8000dc0:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000dc2:	79ba      	ldrb	r2, [r7, #6]
 8000dc4:	4908      	ldr	r1, [pc, #32]	; (8000de8 <LinkTimerBefore+0xbc>)
 8000dc6:	4613      	mov	r3, r2
 8000dc8:	005b      	lsls	r3, r3, #1
 8000dca:	4413      	add	r3, r2
 8000dcc:	00db      	lsls	r3, r3, #3
 8000dce:	440b      	add	r3, r1
 8000dd0:	3314      	adds	r3, #20
 8000dd2:	79fa      	ldrb	r2, [r7, #7]
 8000dd4:	701a      	strb	r2, [r3, #0]
  return;
 8000dd6:	bf00      	nop
}
 8000dd8:	3714      	adds	r7, #20
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	20000a08 	.word	0x20000a08
 8000de8:	20000978 	.word	0x20000978

08000dec <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b084      	sub	sp, #16
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	4603      	mov	r3, r0
 8000df4:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000df6:	4b4e      	ldr	r3, [pc, #312]	; (8000f30 <linkTimer+0x144>)
 8000df8:	781b      	ldrb	r3, [r3, #0]
 8000dfa:	b2db      	uxtb	r3, r3
 8000dfc:	2b06      	cmp	r3, #6
 8000dfe:	d118      	bne.n	8000e32 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000e00:	4b4b      	ldr	r3, [pc, #300]	; (8000f30 <linkTimer+0x144>)
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	b2da      	uxtb	r2, r3
 8000e06:	4b4b      	ldr	r3, [pc, #300]	; (8000f34 <linkTimer+0x148>)
 8000e08:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8000e0a:	4a49      	ldr	r2, [pc, #292]	; (8000f30 <linkTimer+0x144>)
 8000e0c:	79fb      	ldrb	r3, [r7, #7]
 8000e0e:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8000e10:	79fa      	ldrb	r2, [r7, #7]
 8000e12:	4949      	ldr	r1, [pc, #292]	; (8000f38 <linkTimer+0x14c>)
 8000e14:	4613      	mov	r3, r2
 8000e16:	005b      	lsls	r3, r3, #1
 8000e18:	4413      	add	r3, r2
 8000e1a:	00db      	lsls	r3, r3, #3
 8000e1c:	440b      	add	r3, r1
 8000e1e:	3315      	adds	r3, #21
 8000e20:	2206      	movs	r2, #6
 8000e22:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000e24:	4b45      	ldr	r3, [pc, #276]	; (8000f3c <linkTimer+0x150>)
 8000e26:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e2a:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	81fb      	strh	r3, [r7, #14]
 8000e30:	e078      	b.n	8000f24 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8000e32:	f000 f909 	bl	8001048 <ReturnTimeElapsed>
 8000e36:	4603      	mov	r3, r0
 8000e38:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8000e3a:	79fa      	ldrb	r2, [r7, #7]
 8000e3c:	493e      	ldr	r1, [pc, #248]	; (8000f38 <linkTimer+0x14c>)
 8000e3e:	4613      	mov	r3, r2
 8000e40:	005b      	lsls	r3, r3, #1
 8000e42:	4413      	add	r3, r2
 8000e44:	00db      	lsls	r3, r3, #3
 8000e46:	440b      	add	r3, r1
 8000e48:	3308      	adds	r3, #8
 8000e4a:	6819      	ldr	r1, [r3, #0]
 8000e4c:	89fb      	ldrh	r3, [r7, #14]
 8000e4e:	79fa      	ldrb	r2, [r7, #7]
 8000e50:	4419      	add	r1, r3
 8000e52:	4839      	ldr	r0, [pc, #228]	; (8000f38 <linkTimer+0x14c>)
 8000e54:	4613      	mov	r3, r2
 8000e56:	005b      	lsls	r3, r3, #1
 8000e58:	4413      	add	r3, r2
 8000e5a:	00db      	lsls	r3, r3, #3
 8000e5c:	4403      	add	r3, r0
 8000e5e:	3308      	adds	r3, #8
 8000e60:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8000e62:	79fa      	ldrb	r2, [r7, #7]
 8000e64:	4934      	ldr	r1, [pc, #208]	; (8000f38 <linkTimer+0x14c>)
 8000e66:	4613      	mov	r3, r2
 8000e68:	005b      	lsls	r3, r3, #1
 8000e6a:	4413      	add	r3, r2
 8000e6c:	00db      	lsls	r3, r3, #3
 8000e6e:	440b      	add	r3, r1
 8000e70:	3308      	adds	r3, #8
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8000e76:	4b2e      	ldr	r3, [pc, #184]	; (8000f30 <linkTimer+0x144>)
 8000e78:	781b      	ldrb	r3, [r3, #0]
 8000e7a:	b2db      	uxtb	r3, r3
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	4a2e      	ldr	r2, [pc, #184]	; (8000f38 <linkTimer+0x14c>)
 8000e80:	460b      	mov	r3, r1
 8000e82:	005b      	lsls	r3, r3, #1
 8000e84:	440b      	add	r3, r1
 8000e86:	00db      	lsls	r3, r3, #3
 8000e88:	4413      	add	r3, r2
 8000e8a:	3308      	adds	r3, #8
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	68ba      	ldr	r2, [r7, #8]
 8000e90:	429a      	cmp	r2, r3
 8000e92:	d337      	bcc.n	8000f04 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8000e94:	4b26      	ldr	r3, [pc, #152]	; (8000f30 <linkTimer+0x144>)
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8000e9a:	7b7a      	ldrb	r2, [r7, #13]
 8000e9c:	4926      	ldr	r1, [pc, #152]	; (8000f38 <linkTimer+0x14c>)
 8000e9e:	4613      	mov	r3, r2
 8000ea0:	005b      	lsls	r3, r3, #1
 8000ea2:	4413      	add	r3, r2
 8000ea4:	00db      	lsls	r3, r3, #3
 8000ea6:	440b      	add	r3, r1
 8000ea8:	3315      	adds	r3, #21
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000eae:	e013      	b.n	8000ed8 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8000eb0:	7b7a      	ldrb	r2, [r7, #13]
 8000eb2:	4921      	ldr	r1, [pc, #132]	; (8000f38 <linkTimer+0x14c>)
 8000eb4:	4613      	mov	r3, r2
 8000eb6:	005b      	lsls	r3, r3, #1
 8000eb8:	4413      	add	r3, r2
 8000eba:	00db      	lsls	r3, r3, #3
 8000ebc:	440b      	add	r3, r1
 8000ebe:	3315      	adds	r3, #21
 8000ec0:	781b      	ldrb	r3, [r3, #0]
 8000ec2:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8000ec4:	7b7a      	ldrb	r2, [r7, #13]
 8000ec6:	491c      	ldr	r1, [pc, #112]	; (8000f38 <linkTimer+0x14c>)
 8000ec8:	4613      	mov	r3, r2
 8000eca:	005b      	lsls	r3, r3, #1
 8000ecc:	4413      	add	r3, r2
 8000ece:	00db      	lsls	r3, r3, #3
 8000ed0:	440b      	add	r3, r1
 8000ed2:	3315      	adds	r3, #21
 8000ed4:	781b      	ldrb	r3, [r3, #0]
 8000ed6:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000ed8:	7b3b      	ldrb	r3, [r7, #12]
 8000eda:	2b06      	cmp	r3, #6
 8000edc:	d00b      	beq.n	8000ef6 <linkTimer+0x10a>
 8000ede:	7b3a      	ldrb	r2, [r7, #12]
 8000ee0:	4915      	ldr	r1, [pc, #84]	; (8000f38 <linkTimer+0x14c>)
 8000ee2:	4613      	mov	r3, r2
 8000ee4:	005b      	lsls	r3, r3, #1
 8000ee6:	4413      	add	r3, r2
 8000ee8:	00db      	lsls	r3, r3, #3
 8000eea:	440b      	add	r3, r1
 8000eec:	3308      	adds	r3, #8
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	68ba      	ldr	r2, [r7, #8]
 8000ef2:	429a      	cmp	r2, r3
 8000ef4:	d2dc      	bcs.n	8000eb0 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8000ef6:	7b7a      	ldrb	r2, [r7, #13]
 8000ef8:	79fb      	ldrb	r3, [r7, #7]
 8000efa:	4611      	mov	r1, r2
 8000efc:	4618      	mov	r0, r3
 8000efe:	f7ff fecf 	bl	8000ca0 <LinkTimerAfter>
 8000f02:	e00f      	b.n	8000f24 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8000f04:	4b0a      	ldr	r3, [pc, #40]	; (8000f30 <linkTimer+0x144>)
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	b2da      	uxtb	r2, r3
 8000f0a:	79fb      	ldrb	r3, [r7, #7]
 8000f0c:	4611      	mov	r1, r2
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f7ff ff0c 	bl	8000d2c <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8000f14:	4b06      	ldr	r3, [pc, #24]	; (8000f30 <linkTimer+0x144>)
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	b2da      	uxtb	r2, r3
 8000f1a:	4b06      	ldr	r3, [pc, #24]	; (8000f34 <linkTimer+0x148>)
 8000f1c:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8000f1e:	4a04      	ldr	r2, [pc, #16]	; (8000f30 <linkTimer+0x144>)
 8000f20:	79fb      	ldrb	r3, [r7, #7]
 8000f22:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8000f24:	89fb      	ldrh	r3, [r7, #14]
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	3710      	adds	r7, #16
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	20000a08 	.word	0x20000a08
 8000f34:	20000a09 	.word	0x20000a09
 8000f38:	20000978 	.word	0x20000978
 8000f3c:	20000a0c 	.word	0x20000a0c

08000f40 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b085      	sub	sp, #20
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	4603      	mov	r3, r0
 8000f48:	460a      	mov	r2, r1
 8000f4a:	71fb      	strb	r3, [r7, #7]
 8000f4c:	4613      	mov	r3, r2
 8000f4e:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8000f50:	4b39      	ldr	r3, [pc, #228]	; (8001038 <UnlinkTimer+0xf8>)
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	b2db      	uxtb	r3, r3
 8000f56:	79fa      	ldrb	r2, [r7, #7]
 8000f58:	429a      	cmp	r2, r3
 8000f5a:	d111      	bne.n	8000f80 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000f5c:	4b36      	ldr	r3, [pc, #216]	; (8001038 <UnlinkTimer+0xf8>)
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	b2da      	uxtb	r2, r3
 8000f62:	4b36      	ldr	r3, [pc, #216]	; (800103c <UnlinkTimer+0xfc>)
 8000f64:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8000f66:	79fa      	ldrb	r2, [r7, #7]
 8000f68:	4935      	ldr	r1, [pc, #212]	; (8001040 <UnlinkTimer+0x100>)
 8000f6a:	4613      	mov	r3, r2
 8000f6c:	005b      	lsls	r3, r3, #1
 8000f6e:	4413      	add	r3, r2
 8000f70:	00db      	lsls	r3, r3, #3
 8000f72:	440b      	add	r3, r1
 8000f74:	3315      	adds	r3, #21
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	b2da      	uxtb	r2, r3
 8000f7a:	4b2f      	ldr	r3, [pc, #188]	; (8001038 <UnlinkTimer+0xf8>)
 8000f7c:	701a      	strb	r2, [r3, #0]
 8000f7e:	e03e      	b.n	8000ffe <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8000f80:	79fa      	ldrb	r2, [r7, #7]
 8000f82:	492f      	ldr	r1, [pc, #188]	; (8001040 <UnlinkTimer+0x100>)
 8000f84:	4613      	mov	r3, r2
 8000f86:	005b      	lsls	r3, r3, #1
 8000f88:	4413      	add	r3, r2
 8000f8a:	00db      	lsls	r3, r3, #3
 8000f8c:	440b      	add	r3, r1
 8000f8e:	3314      	adds	r3, #20
 8000f90:	781b      	ldrb	r3, [r3, #0]
 8000f92:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8000f94:	79fa      	ldrb	r2, [r7, #7]
 8000f96:	492a      	ldr	r1, [pc, #168]	; (8001040 <UnlinkTimer+0x100>)
 8000f98:	4613      	mov	r3, r2
 8000f9a:	005b      	lsls	r3, r3, #1
 8000f9c:	4413      	add	r3, r2
 8000f9e:	00db      	lsls	r3, r3, #3
 8000fa0:	440b      	add	r3, r1
 8000fa2:	3315      	adds	r3, #21
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8000fa8:	79f9      	ldrb	r1, [r7, #7]
 8000faa:	7bfa      	ldrb	r2, [r7, #15]
 8000fac:	4824      	ldr	r0, [pc, #144]	; (8001040 <UnlinkTimer+0x100>)
 8000fae:	460b      	mov	r3, r1
 8000fb0:	005b      	lsls	r3, r3, #1
 8000fb2:	440b      	add	r3, r1
 8000fb4:	00db      	lsls	r3, r3, #3
 8000fb6:	4403      	add	r3, r0
 8000fb8:	3315      	adds	r3, #21
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	b2d8      	uxtb	r0, r3
 8000fbe:	4920      	ldr	r1, [pc, #128]	; (8001040 <UnlinkTimer+0x100>)
 8000fc0:	4613      	mov	r3, r2
 8000fc2:	005b      	lsls	r3, r3, #1
 8000fc4:	4413      	add	r3, r2
 8000fc6:	00db      	lsls	r3, r3, #3
 8000fc8:	440b      	add	r3, r1
 8000fca:	3315      	adds	r3, #21
 8000fcc:	4602      	mov	r2, r0
 8000fce:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000fd0:	7bbb      	ldrb	r3, [r7, #14]
 8000fd2:	2b06      	cmp	r3, #6
 8000fd4:	d013      	beq.n	8000ffe <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8000fd6:	79f9      	ldrb	r1, [r7, #7]
 8000fd8:	7bba      	ldrb	r2, [r7, #14]
 8000fda:	4819      	ldr	r0, [pc, #100]	; (8001040 <UnlinkTimer+0x100>)
 8000fdc:	460b      	mov	r3, r1
 8000fde:	005b      	lsls	r3, r3, #1
 8000fe0:	440b      	add	r3, r1
 8000fe2:	00db      	lsls	r3, r3, #3
 8000fe4:	4403      	add	r3, r0
 8000fe6:	3314      	adds	r3, #20
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	b2d8      	uxtb	r0, r3
 8000fec:	4914      	ldr	r1, [pc, #80]	; (8001040 <UnlinkTimer+0x100>)
 8000fee:	4613      	mov	r3, r2
 8000ff0:	005b      	lsls	r3, r3, #1
 8000ff2:	4413      	add	r3, r2
 8000ff4:	00db      	lsls	r3, r3, #3
 8000ff6:	440b      	add	r3, r1
 8000ff8:	3314      	adds	r3, #20
 8000ffa:	4602      	mov	r2, r0
 8000ffc:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8000ffe:	79fa      	ldrb	r2, [r7, #7]
 8001000:	490f      	ldr	r1, [pc, #60]	; (8001040 <UnlinkTimer+0x100>)
 8001002:	4613      	mov	r3, r2
 8001004:	005b      	lsls	r3, r3, #1
 8001006:	4413      	add	r3, r2
 8001008:	00db      	lsls	r3, r3, #3
 800100a:	440b      	add	r3, r1
 800100c:	330c      	adds	r3, #12
 800100e:	2201      	movs	r2, #1
 8001010:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8001012:	4b09      	ldr	r3, [pc, #36]	; (8001038 <UnlinkTimer+0xf8>)
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	b2db      	uxtb	r3, r3
 8001018:	2b06      	cmp	r3, #6
 800101a:	d107      	bne.n	800102c <UnlinkTimer+0xec>
 800101c:	79bb      	ldrb	r3, [r7, #6]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d104      	bne.n	800102c <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001022:	4b08      	ldr	r3, [pc, #32]	; (8001044 <UnlinkTimer+0x104>)
 8001024:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001028:	601a      	str	r2, [r3, #0]
  }

  return;
 800102a:	bf00      	nop
 800102c:	bf00      	nop
}
 800102e:	3714      	adds	r7, #20
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr
 8001038:	20000a08 	.word	0x20000a08
 800103c:	20000a09 	.word	0x20000a09
 8001040:	20000978 	.word	0x20000978
 8001044:	20000a0c 	.word	0x20000a0c

08001048 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 800104e:	4b1a      	ldr	r3, [pc, #104]	; (80010b8 <ReturnTimeElapsed+0x70>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001056:	d026      	beq.n	80010a6 <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8001058:	f7ff fe02 	bl	8000c60 <ReadRtcSsrValue>
 800105c:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 800105e:	4b16      	ldr	r3, [pc, #88]	; (80010b8 <ReturnTimeElapsed+0x70>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	687a      	ldr	r2, [r7, #4]
 8001064:	429a      	cmp	r2, r3
 8001066:	d805      	bhi.n	8001074 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8001068:	4b13      	ldr	r3, [pc, #76]	; (80010b8 <ReturnTimeElapsed+0x70>)
 800106a:	681a      	ldr	r2, [r3, #0]
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	1ad3      	subs	r3, r2, r3
 8001070:	607b      	str	r3, [r7, #4]
 8001072:	e00a      	b.n	800108a <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8001074:	4b11      	ldr	r3, [pc, #68]	; (80010bc <ReturnTimeElapsed+0x74>)
 8001076:	881b      	ldrh	r3, [r3, #0]
 8001078:	461a      	mov	r2, r3
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	1ad3      	subs	r3, r2, r3
 800107e:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8001080:	4b0d      	ldr	r3, [pc, #52]	; (80010b8 <ReturnTimeElapsed+0x70>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	683a      	ldr	r2, [r7, #0]
 8001086:	4413      	add	r3, r2
 8001088:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 800108a:	4b0d      	ldr	r3, [pc, #52]	; (80010c0 <ReturnTimeElapsed+0x78>)
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	461a      	mov	r2, r3
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	fb02 f303 	mul.w	r3, r2, r3
 8001096:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8001098:	4b0a      	ldr	r3, [pc, #40]	; (80010c4 <ReturnTimeElapsed+0x7c>)
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	461a      	mov	r2, r3
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	40d3      	lsrs	r3, r2
 80010a2:	607b      	str	r3, [r7, #4]
 80010a4:	e001      	b.n	80010aa <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 80010a6:	2300      	movs	r3, #0
 80010a8:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	b29b      	uxth	r3, r3
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	3708      	adds	r7, #8
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	20000a0c 	.word	0x20000a0c
 80010bc:	20000a14 	.word	0x20000a14
 80010c0:	20000a12 	.word	0x20000a12
 80010c4:	20000a11 	.word	0x20000a11

080010c8 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	4603      	mov	r3, r0
 80010d0:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 80010d2:	88fb      	ldrh	r3, [r7, #6]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d108      	bne.n	80010ea <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 80010d8:	f7ff fdc2 	bl	8000c60 <ReadRtcSsrValue>
 80010dc:	4603      	mov	r3, r0
 80010de:	4a21      	ldr	r2, [pc, #132]	; (8001164 <RestartWakeupCounter+0x9c>)
 80010e0:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 80010e2:	2003      	movs	r0, #3
 80010e4:	f001 fabd 	bl	8002662 <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 80010e8:	e039      	b.n	800115e <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 80010ea:	88fb      	ldrh	r3, [r7, #6]
 80010ec:	2b01      	cmp	r3, #1
 80010ee:	d803      	bhi.n	80010f8 <RestartWakeupCounter+0x30>
 80010f0:	4b1d      	ldr	r3, [pc, #116]	; (8001168 <RestartWakeupCounter+0xa0>)
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	2b01      	cmp	r3, #1
 80010f6:	d002      	beq.n	80010fe <RestartWakeupCounter+0x36>
      Value -= 1;
 80010f8:	88fb      	ldrh	r3, [r7, #6]
 80010fa:	3b01      	subs	r3, #1
 80010fc:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 80010fe:	bf00      	nop
 8001100:	4b1a      	ldr	r3, [pc, #104]	; (800116c <RestartWakeupCounter+0xa4>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	68db      	ldr	r3, [r3, #12]
 8001106:	f003 0304 	and.w	r3, r3, #4
 800110a:	2b00      	cmp	r3, #0
 800110c:	d0f8      	beq.n	8001100 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 800110e:	4b17      	ldr	r3, [pc, #92]	; (800116c <RestartWakeupCounter+0xa4>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	68db      	ldr	r3, [r3, #12]
 8001114:	b2da      	uxtb	r2, r3
 8001116:	4b15      	ldr	r3, [pc, #84]	; (800116c <RestartWakeupCounter+0xa4>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800111e:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001120:	4b13      	ldr	r3, [pc, #76]	; (8001170 <RestartWakeupCounter+0xa8>)
 8001122:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001126:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001128:	2003      	movs	r0, #3
 800112a:	f001 faa8 	bl	800267e <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 800112e:	4b11      	ldr	r3, [pc, #68]	; (8001174 <RestartWakeupCounter+0xac>)
 8001130:	695b      	ldr	r3, [r3, #20]
 8001132:	0c1b      	lsrs	r3, r3, #16
 8001134:	041b      	lsls	r3, r3, #16
 8001136:	88fa      	ldrh	r2, [r7, #6]
 8001138:	490e      	ldr	r1, [pc, #56]	; (8001174 <RestartWakeupCounter+0xac>)
 800113a:	4313      	orrs	r3, r2
 800113c:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 800113e:	f7ff fd8f 	bl	8000c60 <ReadRtcSsrValue>
 8001142:	4603      	mov	r3, r0
 8001144:	4a07      	ldr	r2, [pc, #28]	; (8001164 <RestartWakeupCounter+0x9c>)
 8001146:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 8001148:	4b08      	ldr	r3, [pc, #32]	; (800116c <RestartWakeupCounter+0xa4>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	689a      	ldr	r2, [r3, #8]
 800114e:	4b07      	ldr	r3, [pc, #28]	; (800116c <RestartWakeupCounter+0xa4>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001156:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8001158:	f3af 8000 	nop.w
  return ;
 800115c:	bf00      	nop
}
 800115e:	3708      	adds	r7, #8
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	20000a0c 	.word	0x20000a0c
 8001168:	20000a11 	.word	0x20000a11
 800116c:	20000aa8 	.word	0x20000aa8
 8001170:	58000800 	.word	0x58000800
 8001174:	40002800 	.word	0x40002800

08001178 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b084      	sub	sp, #16
 800117c:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 800117e:	4b45      	ldr	r3, [pc, #276]	; (8001294 <RescheduleTimerList+0x11c>)
 8001180:	689b      	ldr	r3, [r3, #8]
 8001182:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001186:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800118a:	d107      	bne.n	800119c <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 800118c:	bf00      	nop
 800118e:	4b42      	ldr	r3, [pc, #264]	; (8001298 <RescheduleTimerList+0x120>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	68db      	ldr	r3, [r3, #12]
 8001194:	f003 0304 	and.w	r3, r3, #4
 8001198:	2b00      	cmp	r3, #0
 800119a:	d1f8      	bne.n	800118e <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 800119c:	4b3e      	ldr	r3, [pc, #248]	; (8001298 <RescheduleTimerList+0x120>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	689a      	ldr	r2, [r3, #8]
 80011a2:	4b3d      	ldr	r3, [pc, #244]	; (8001298 <RescheduleTimerList+0x120>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80011aa:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 80011ac:	4b3b      	ldr	r3, [pc, #236]	; (800129c <RescheduleTimerList+0x124>)
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 80011b2:	7bfa      	ldrb	r2, [r7, #15]
 80011b4:	493a      	ldr	r1, [pc, #232]	; (80012a0 <RescheduleTimerList+0x128>)
 80011b6:	4613      	mov	r3, r2
 80011b8:	005b      	lsls	r3, r3, #1
 80011ba:	4413      	add	r3, r2
 80011bc:	00db      	lsls	r3, r3, #3
 80011be:	440b      	add	r3, r1
 80011c0:	3308      	adds	r3, #8
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 80011c6:	f7ff ff3f 	bl	8001048 <ReturnTimeElapsed>
 80011ca:	4603      	mov	r3, r0
 80011cc:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 80011ce:	88fb      	ldrh	r3, [r7, #6]
 80011d0:	68ba      	ldr	r2, [r7, #8]
 80011d2:	429a      	cmp	r2, r3
 80011d4:	d205      	bcs.n	80011e2 <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 80011d6:	2300      	movs	r3, #0
 80011d8:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80011da:	4b32      	ldr	r3, [pc, #200]	; (80012a4 <RescheduleTimerList+0x12c>)
 80011dc:	2201      	movs	r2, #1
 80011de:	701a      	strb	r2, [r3, #0]
 80011e0:	e04d      	b.n	800127e <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 80011e2:	88fb      	ldrh	r3, [r7, #6]
 80011e4:	4a30      	ldr	r2, [pc, #192]	; (80012a8 <RescheduleTimerList+0x130>)
 80011e6:	8812      	ldrh	r2, [r2, #0]
 80011e8:	b292      	uxth	r2, r2
 80011ea:	4413      	add	r3, r2
 80011ec:	461a      	mov	r2, r3
 80011ee:	68bb      	ldr	r3, [r7, #8]
 80011f0:	4293      	cmp	r3, r2
 80011f2:	d906      	bls.n	8001202 <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 80011f4:	4b2c      	ldr	r3, [pc, #176]	; (80012a8 <RescheduleTimerList+0x130>)
 80011f6:	881b      	ldrh	r3, [r3, #0]
 80011f8:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 80011fa:	4b2a      	ldr	r3, [pc, #168]	; (80012a4 <RescheduleTimerList+0x12c>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	701a      	strb	r2, [r3, #0]
 8001200:	e03d      	b.n	800127e <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8001202:	68bb      	ldr	r3, [r7, #8]
 8001204:	b29a      	uxth	r2, r3
 8001206:	88fb      	ldrh	r3, [r7, #6]
 8001208:	1ad3      	subs	r3, r2, r3
 800120a:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 800120c:	4b25      	ldr	r3, [pc, #148]	; (80012a4 <RescheduleTimerList+0x12c>)
 800120e:	2201      	movs	r2, #1
 8001210:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001212:	e034      	b.n	800127e <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8001214:	7bfa      	ldrb	r2, [r7, #15]
 8001216:	4922      	ldr	r1, [pc, #136]	; (80012a0 <RescheduleTimerList+0x128>)
 8001218:	4613      	mov	r3, r2
 800121a:	005b      	lsls	r3, r3, #1
 800121c:	4413      	add	r3, r2
 800121e:	00db      	lsls	r3, r3, #3
 8001220:	440b      	add	r3, r1
 8001222:	3308      	adds	r3, #8
 8001224:	681a      	ldr	r2, [r3, #0]
 8001226:	88fb      	ldrh	r3, [r7, #6]
 8001228:	429a      	cmp	r2, r3
 800122a:	d20a      	bcs.n	8001242 <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 800122c:	7bfa      	ldrb	r2, [r7, #15]
 800122e:	491c      	ldr	r1, [pc, #112]	; (80012a0 <RescheduleTimerList+0x128>)
 8001230:	4613      	mov	r3, r2
 8001232:	005b      	lsls	r3, r3, #1
 8001234:	4413      	add	r3, r2
 8001236:	00db      	lsls	r3, r3, #3
 8001238:	440b      	add	r3, r1
 800123a:	3308      	adds	r3, #8
 800123c:	2200      	movs	r2, #0
 800123e:	601a      	str	r2, [r3, #0]
 8001240:	e013      	b.n	800126a <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8001242:	7bfa      	ldrb	r2, [r7, #15]
 8001244:	4916      	ldr	r1, [pc, #88]	; (80012a0 <RescheduleTimerList+0x128>)
 8001246:	4613      	mov	r3, r2
 8001248:	005b      	lsls	r3, r3, #1
 800124a:	4413      	add	r3, r2
 800124c:	00db      	lsls	r3, r3, #3
 800124e:	440b      	add	r3, r1
 8001250:	3308      	adds	r3, #8
 8001252:	6819      	ldr	r1, [r3, #0]
 8001254:	88fb      	ldrh	r3, [r7, #6]
 8001256:	7bfa      	ldrb	r2, [r7, #15]
 8001258:	1ac9      	subs	r1, r1, r3
 800125a:	4811      	ldr	r0, [pc, #68]	; (80012a0 <RescheduleTimerList+0x128>)
 800125c:	4613      	mov	r3, r2
 800125e:	005b      	lsls	r3, r3, #1
 8001260:	4413      	add	r3, r2
 8001262:	00db      	lsls	r3, r3, #3
 8001264:	4403      	add	r3, r0
 8001266:	3308      	adds	r3, #8
 8001268:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 800126a:	7bfa      	ldrb	r2, [r7, #15]
 800126c:	490c      	ldr	r1, [pc, #48]	; (80012a0 <RescheduleTimerList+0x128>)
 800126e:	4613      	mov	r3, r2
 8001270:	005b      	lsls	r3, r3, #1
 8001272:	4413      	add	r3, r2
 8001274:	00db      	lsls	r3, r3, #3
 8001276:	440b      	add	r3, r1
 8001278:	3315      	adds	r3, #21
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800127e:	7bfb      	ldrb	r3, [r7, #15]
 8001280:	2b06      	cmp	r3, #6
 8001282:	d1c7      	bne.n	8001214 <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8001284:	89bb      	ldrh	r3, [r7, #12]
 8001286:	4618      	mov	r0, r3
 8001288:	f7ff ff1e 	bl	80010c8 <RestartWakeupCounter>

  return ;
 800128c:	bf00      	nop
}
 800128e:	3710      	adds	r7, #16
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	40002800 	.word	0x40002800
 8001298:	20000aa8 	.word	0x20000aa8
 800129c:	20000a08 	.word	0x20000a08
 80012a0:	20000978 	.word	0x20000978
 80012a4:	20000a10 	.word	0x20000a10
 80012a8:	20000a16 	.word	0x20000a16

080012ac <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b08a      	sub	sp, #40	; 0x28
 80012b0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80012b2:	f3ef 8310 	mrs	r3, PRIMASK
 80012b6:	617b      	str	r3, [r7, #20]
  return(result);
 80012b8:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80012ba:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 80012bc:	b672      	cpsid	i
}
 80012be:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80012c0:	4b59      	ldr	r3, [pc, #356]	; (8001428 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	22ca      	movs	r2, #202	; 0xca
 80012c6:	625a      	str	r2, [r3, #36]	; 0x24
 80012c8:	4b57      	ldr	r3, [pc, #348]	; (8001428 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	2253      	movs	r2, #83	; 0x53
 80012ce:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 80012d0:	4b55      	ldr	r3, [pc, #340]	; (8001428 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	689a      	ldr	r2, [r3, #8]
 80012d6:	4b54      	ldr	r3, [pc, #336]	; (8001428 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80012de:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 80012e0:	4b52      	ldr	r3, [pc, #328]	; (800142c <HW_TS_RTC_Wakeup_Handler+0x180>)
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 80012e8:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80012ec:	4950      	ldr	r1, [pc, #320]	; (8001430 <HW_TS_RTC_Wakeup_Handler+0x184>)
 80012ee:	4613      	mov	r3, r2
 80012f0:	005b      	lsls	r3, r3, #1
 80012f2:	4413      	add	r3, r2
 80012f4:	00db      	lsls	r3, r3, #3
 80012f6:	440b      	add	r3, r1
 80012f8:	330c      	adds	r3, #12
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	b2db      	uxtb	r3, r3
 80012fe:	2b02      	cmp	r3, #2
 8001300:	d16e      	bne.n	80013e0 <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8001302:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001306:	494a      	ldr	r1, [pc, #296]	; (8001430 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001308:	4613      	mov	r3, r2
 800130a:	005b      	lsls	r3, r3, #1
 800130c:	4413      	add	r3, r2
 800130e:	00db      	lsls	r3, r3, #3
 8001310:	440b      	add	r3, r1
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8001316:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800131a:	4945      	ldr	r1, [pc, #276]	; (8001430 <HW_TS_RTC_Wakeup_Handler+0x184>)
 800131c:	4613      	mov	r3, r2
 800131e:	005b      	lsls	r3, r3, #1
 8001320:	4413      	add	r3, r2
 8001322:	00db      	lsls	r3, r3, #3
 8001324:	440b      	add	r3, r1
 8001326:	3310      	adds	r3, #16
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 800132c:	4b41      	ldr	r3, [pc, #260]	; (8001434 <HW_TS_RTC_Wakeup_Handler+0x188>)
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	b2db      	uxtb	r3, r3
 8001332:	2b00      	cmp	r3, #0
 8001334:	d04c      	beq.n	80013d0 <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8001336:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800133a:	493d      	ldr	r1, [pc, #244]	; (8001430 <HW_TS_RTC_Wakeup_Handler+0x184>)
 800133c:	4613      	mov	r3, r2
 800133e:	005b      	lsls	r3, r3, #1
 8001340:	4413      	add	r3, r2
 8001342:	00db      	lsls	r3, r3, #3
 8001344:	440b      	add	r3, r1
 8001346:	330d      	adds	r3, #13
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	b2db      	uxtb	r3, r3
 800134c:	2b01      	cmp	r3, #1
 800134e:	d124      	bne.n	800139a <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8001350:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001354:	2101      	movs	r1, #1
 8001356:	4618      	mov	r0, r3
 8001358:	f7ff fdf2 	bl	8000f40 <UnlinkTimer>
 800135c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800135e:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001360:	693b      	ldr	r3, [r7, #16]
 8001362:	f383 8810 	msr	PRIMASK, r3
}
 8001366:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8001368:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800136c:	4930      	ldr	r1, [pc, #192]	; (8001430 <HW_TS_RTC_Wakeup_Handler+0x184>)
 800136e:	4613      	mov	r3, r2
 8001370:	005b      	lsls	r3, r3, #1
 8001372:	4413      	add	r3, r2
 8001374:	00db      	lsls	r3, r3, #3
 8001376:	440b      	add	r3, r1
 8001378:	3304      	adds	r3, #4
 800137a:	681a      	ldr	r2, [r3, #0]
 800137c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001380:	4611      	mov	r1, r2
 8001382:	4618      	mov	r0, r3
 8001384:	f000 f9b8 	bl	80016f8 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001388:	4b27      	ldr	r3, [pc, #156]	; (8001428 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	22ca      	movs	r2, #202	; 0xca
 800138e:	625a      	str	r2, [r3, #36]	; 0x24
 8001390:	4b25      	ldr	r3, [pc, #148]	; (8001428 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	2253      	movs	r2, #83	; 0x53
 8001396:	625a      	str	r2, [r3, #36]	; 0x24
 8001398:	e012      	b.n	80013c0 <HW_TS_RTC_Wakeup_Handler+0x114>
 800139a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800139c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	f383 8810 	msr	PRIMASK, r3
}
 80013a4:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 80013a6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80013aa:	4618      	mov	r0, r3
 80013ac:	f000 f920 	bl	80015f0 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80013b0:	4b1d      	ldr	r3, [pc, #116]	; (8001428 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	22ca      	movs	r2, #202	; 0xca
 80013b6:	625a      	str	r2, [r3, #36]	; 0x24
 80013b8:	4b1b      	ldr	r3, [pc, #108]	; (8001428 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	2253      	movs	r2, #83	; 0x53
 80013be:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 80013c0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80013c4:	69fa      	ldr	r2, [r7, #28]
 80013c6:	4619      	mov	r1, r3
 80013c8:	69b8      	ldr	r0, [r7, #24]
 80013ca:	f000 fa1b 	bl	8001804 <HW_TS_RTC_Int_AppNot>
 80013ce:	e022      	b.n	8001416 <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 80013d0:	f7ff fed2 	bl	8001178 <RescheduleTimerList>
 80013d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013d6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80013d8:	68bb      	ldr	r3, [r7, #8]
 80013da:	f383 8810 	msr	PRIMASK, r3
}
 80013de:	e01a      	b.n	8001416 <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 80013e0:	bf00      	nop
 80013e2:	4b11      	ldr	r3, [pc, #68]	; (8001428 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	68db      	ldr	r3, [r3, #12]
 80013e8:	f003 0304 	and.w	r3, r3, #4
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d0f8      	beq.n	80013e2 <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80013f0:	4b0d      	ldr	r3, [pc, #52]	; (8001428 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	68db      	ldr	r3, [r3, #12]
 80013f6:	b2da      	uxtb	r2, r3
 80013f8:	4b0b      	ldr	r3, [pc, #44]	; (8001428 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001400:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001402:	4b0d      	ldr	r3, [pc, #52]	; (8001438 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001404:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001408:	60da      	str	r2, [r3, #12]
 800140a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800140c:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	f383 8810 	msr	PRIMASK, r3
}
 8001414:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001416:	4b04      	ldr	r3, [pc, #16]	; (8001428 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	22ff      	movs	r2, #255	; 0xff
 800141c:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 800141e:	bf00      	nop
}
 8001420:	3728      	adds	r7, #40	; 0x28
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	20000aa8 	.word	0x20000aa8
 800142c:	20000a08 	.word	0x20000a08
 8001430:	20000978 	.word	0x20000978
 8001434:	20000a10 	.word	0x20000a10
 8001438:	58000800 	.word	0x58000800

0800143c <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b088      	sub	sp, #32
 8001440:	af00      	add	r7, sp, #0
 8001442:	4603      	mov	r3, r0
 8001444:	6039      	str	r1, [r7, #0]
 8001446:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001448:	4b5e      	ldr	r3, [pc, #376]	; (80015c4 <HW_TS_Init+0x188>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	22ca      	movs	r2, #202	; 0xca
 800144e:	625a      	str	r2, [r3, #36]	; 0x24
 8001450:	4b5c      	ldr	r3, [pc, #368]	; (80015c4 <HW_TS_Init+0x188>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	2253      	movs	r2, #83	; 0x53
 8001456:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8001458:	4b5b      	ldr	r3, [pc, #364]	; (80015c8 <HW_TS_Init+0x18c>)
 800145a:	689b      	ldr	r3, [r3, #8]
 800145c:	4a5a      	ldr	r2, [pc, #360]	; (80015c8 <HW_TS_Init+0x18c>)
 800145e:	f043 0320 	orr.w	r3, r3, #32
 8001462:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8001464:	4b58      	ldr	r3, [pc, #352]	; (80015c8 <HW_TS_Init+0x18c>)
 8001466:	689b      	ldr	r3, [r3, #8]
 8001468:	b2db      	uxtb	r3, r3
 800146a:	f003 0307 	and.w	r3, r3, #7
 800146e:	b2db      	uxtb	r3, r3
 8001470:	f1c3 0304 	rsb	r3, r3, #4
 8001474:	b2da      	uxtb	r2, r3
 8001476:	4b55      	ldr	r3, [pc, #340]	; (80015cc <HW_TS_Init+0x190>)
 8001478:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 800147a:	4b53      	ldr	r3, [pc, #332]	; (80015c8 <HW_TS_Init+0x18c>)
 800147c:	691b      	ldr	r3, [r3, #16]
 800147e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001482:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 8001486:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001488:	693a      	ldr	r2, [r7, #16]
 800148a:	fa92 f2a2 	rbit	r2, r2
 800148e:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001490:	68fa      	ldr	r2, [r7, #12]
 8001492:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001494:	697a      	ldr	r2, [r7, #20]
 8001496:	2a00      	cmp	r2, #0
 8001498:	d101      	bne.n	800149e <HW_TS_Init+0x62>
  {
    return 32U;
 800149a:	2220      	movs	r2, #32
 800149c:	e003      	b.n	80014a6 <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 800149e:	697a      	ldr	r2, [r7, #20]
 80014a0:	fab2 f282 	clz	r2, r2
 80014a4:	b2d2      	uxtb	r2, r2
 80014a6:	40d3      	lsrs	r3, r2
 80014a8:	b2db      	uxtb	r3, r3
 80014aa:	3301      	adds	r3, #1
 80014ac:	b2da      	uxtb	r2, r3
 80014ae:	4b48      	ldr	r3, [pc, #288]	; (80015d0 <HW_TS_Init+0x194>)
 80014b0:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 80014b2:	4b45      	ldr	r3, [pc, #276]	; (80015c8 <HW_TS_Init+0x18c>)
 80014b4:	691b      	ldr	r3, [r3, #16]
 80014b6:	b29b      	uxth	r3, r3
 80014b8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80014bc:	b29b      	uxth	r3, r3
 80014be:	3301      	adds	r3, #1
 80014c0:	b29a      	uxth	r2, r3
 80014c2:	4b44      	ldr	r3, [pc, #272]	; (80015d4 <HW_TS_Init+0x198>)
 80014c4:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 80014c6:	4b43      	ldr	r3, [pc, #268]	; (80015d4 <HW_TS_Init+0x198>)
 80014c8:	881b      	ldrh	r3, [r3, #0]
 80014ca:	3b01      	subs	r3, #1
 80014cc:	4a40      	ldr	r2, [pc, #256]	; (80015d0 <HW_TS_Init+0x194>)
 80014ce:	7812      	ldrb	r2, [r2, #0]
 80014d0:	fb02 f303 	mul.w	r3, r2, r3
 80014d4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80014d8:	4a3c      	ldr	r2, [pc, #240]	; (80015cc <HW_TS_Init+0x190>)
 80014da:	7812      	ldrb	r2, [r2, #0]
 80014dc:	40d3      	lsrs	r3, r2
 80014de:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 80014e0:	69bb      	ldr	r3, [r7, #24]
 80014e2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d904      	bls.n	80014f4 <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 80014ea:	4b3b      	ldr	r3, [pc, #236]	; (80015d8 <HW_TS_Init+0x19c>)
 80014ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014f0:	801a      	strh	r2, [r3, #0]
 80014f2:	e003      	b.n	80014fc <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 80014f4:	69bb      	ldr	r3, [r7, #24]
 80014f6:	b29a      	uxth	r2, r3
 80014f8:	4b37      	ldr	r3, [pc, #220]	; (80015d8 <HW_TS_Init+0x19c>)
 80014fa:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80014fc:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001500:	f7ff fb9c 	bl	8000c3c <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8001504:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001508:	f7ff fb84 	bl	8000c14 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 800150c:	79fb      	ldrb	r3, [r7, #7]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d13d      	bne.n	800158e <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001512:	4b32      	ldr	r3, [pc, #200]	; (80015dc <HW_TS_Init+0x1a0>)
 8001514:	2201      	movs	r2, #1
 8001516:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001518:	4b31      	ldr	r3, [pc, #196]	; (80015e0 <HW_TS_Init+0x1a4>)
 800151a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800151e:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8001520:	2300      	movs	r3, #0
 8001522:	77fb      	strb	r3, [r7, #31]
 8001524:	e00c      	b.n	8001540 <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8001526:	7ffa      	ldrb	r2, [r7, #31]
 8001528:	492e      	ldr	r1, [pc, #184]	; (80015e4 <HW_TS_Init+0x1a8>)
 800152a:	4613      	mov	r3, r2
 800152c:	005b      	lsls	r3, r3, #1
 800152e:	4413      	add	r3, r2
 8001530:	00db      	lsls	r3, r3, #3
 8001532:	440b      	add	r3, r1
 8001534:	330c      	adds	r3, #12
 8001536:	2200      	movs	r2, #0
 8001538:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 800153a:	7ffb      	ldrb	r3, [r7, #31]
 800153c:	3301      	adds	r3, #1
 800153e:	77fb      	strb	r3, [r7, #31]
 8001540:	7ffb      	ldrb	r3, [r7, #31]
 8001542:	2b05      	cmp	r3, #5
 8001544:	d9ef      	bls.n	8001526 <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8001546:	4b28      	ldr	r3, [pc, #160]	; (80015e8 <HW_TS_Init+0x1ac>)
 8001548:	2206      	movs	r2, #6
 800154a:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 800154c:	4b1d      	ldr	r3, [pc, #116]	; (80015c4 <HW_TS_Init+0x188>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	689a      	ldr	r2, [r3, #8]
 8001552:	4b1c      	ldr	r3, [pc, #112]	; (80015c4 <HW_TS_Init+0x188>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800155a:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 800155c:	4b19      	ldr	r3, [pc, #100]	; (80015c4 <HW_TS_Init+0x188>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	68db      	ldr	r3, [r3, #12]
 8001562:	b2da      	uxtb	r2, r3
 8001564:	4b17      	ldr	r3, [pc, #92]	; (80015c4 <HW_TS_Init+0x188>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800156c:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 800156e:	4b1f      	ldr	r3, [pc, #124]	; (80015ec <HW_TS_Init+0x1b0>)
 8001570:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001574:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8001576:	2003      	movs	r0, #3
 8001578:	f001 f881 	bl	800267e <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 800157c:	4b11      	ldr	r3, [pc, #68]	; (80015c4 <HW_TS_Init+0x188>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	689a      	ldr	r2, [r3, #8]
 8001582:	4b10      	ldr	r3, [pc, #64]	; (80015c4 <HW_TS_Init+0x188>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800158a:	609a      	str	r2, [r3, #8]
 800158c:	e009      	b.n	80015a2 <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 800158e:	4b0d      	ldr	r3, [pc, #52]	; (80015c4 <HW_TS_Init+0x188>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	68db      	ldr	r3, [r3, #12]
 8001594:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001598:	2b00      	cmp	r3, #0
 800159a:	d002      	beq.n	80015a2 <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 800159c:	2003      	movs	r0, #3
 800159e:	f001 f860 	bl	8002662 <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80015a2:	4b08      	ldr	r3, [pc, #32]	; (80015c4 <HW_TS_Init+0x188>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	22ff      	movs	r2, #255	; 0xff
 80015a8:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 80015aa:	2200      	movs	r2, #0
 80015ac:	2103      	movs	r1, #3
 80015ae:	2003      	movs	r0, #3
 80015b0:	f001 f815 	bl	80025de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80015b4:	2003      	movs	r0, #3
 80015b6:	f001 f82c 	bl	8002612 <HAL_NVIC_EnableIRQ>

  return;
 80015ba:	bf00      	nop
}
 80015bc:	3720      	adds	r7, #32
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	20000aa8 	.word	0x20000aa8
 80015c8:	40002800 	.word	0x40002800
 80015cc:	20000a11 	.word	0x20000a11
 80015d0:	20000a12 	.word	0x20000a12
 80015d4:	20000a14 	.word	0x20000a14
 80015d8:	20000a16 	.word	0x20000a16
 80015dc:	20000a10 	.word	0x20000a10
 80015e0:	20000a0c 	.word	0x20000a0c
 80015e4:	20000978 	.word	0x20000978
 80015e8:	20000a08 	.word	0x20000a08
 80015ec:	58000800 	.word	0x58000800

080015f0 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b086      	sub	sp, #24
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	4603      	mov	r3, r0
 80015f8:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80015fa:	f3ef 8310 	mrs	r3, PRIMASK
 80015fe:	60fb      	str	r3, [r7, #12]
  return(result);
 8001600:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001602:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001604:	b672      	cpsid	i
}
 8001606:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001608:	2003      	movs	r0, #3
 800160a:	f001 f810 	bl	800262e <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 800160e:	4b34      	ldr	r3, [pc, #208]	; (80016e0 <HW_TS_Stop+0xf0>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	22ca      	movs	r2, #202	; 0xca
 8001614:	625a      	str	r2, [r3, #36]	; 0x24
 8001616:	4b32      	ldr	r3, [pc, #200]	; (80016e0 <HW_TS_Stop+0xf0>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	2253      	movs	r2, #83	; 0x53
 800161c:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 800161e:	79fa      	ldrb	r2, [r7, #7]
 8001620:	4930      	ldr	r1, [pc, #192]	; (80016e4 <HW_TS_Stop+0xf4>)
 8001622:	4613      	mov	r3, r2
 8001624:	005b      	lsls	r3, r3, #1
 8001626:	4413      	add	r3, r2
 8001628:	00db      	lsls	r3, r3, #3
 800162a:	440b      	add	r3, r1
 800162c:	330c      	adds	r3, #12
 800162e:	781b      	ldrb	r3, [r3, #0]
 8001630:	b2db      	uxtb	r3, r3
 8001632:	2b02      	cmp	r3, #2
 8001634:	d142      	bne.n	80016bc <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8001636:	79fb      	ldrb	r3, [r7, #7]
 8001638:	2100      	movs	r1, #0
 800163a:	4618      	mov	r0, r3
 800163c:	f7ff fc80 	bl	8000f40 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8001640:	4b29      	ldr	r3, [pc, #164]	; (80016e8 <HW_TS_Stop+0xf8>)
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001646:	7cfb      	ldrb	r3, [r7, #19]
 8001648:	2b06      	cmp	r3, #6
 800164a:	d12f      	bne.n	80016ac <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 800164c:	4b27      	ldr	r3, [pc, #156]	; (80016ec <HW_TS_Stop+0xfc>)
 800164e:	689b      	ldr	r3, [r3, #8]
 8001650:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001654:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001658:	d107      	bne.n	800166a <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 800165a:	bf00      	nop
 800165c:	4b20      	ldr	r3, [pc, #128]	; (80016e0 <HW_TS_Stop+0xf0>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	68db      	ldr	r3, [r3, #12]
 8001662:	f003 0304 	and.w	r3, r3, #4
 8001666:	2b00      	cmp	r3, #0
 8001668:	d1f8      	bne.n	800165c <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 800166a:	4b1d      	ldr	r3, [pc, #116]	; (80016e0 <HW_TS_Stop+0xf0>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	689a      	ldr	r2, [r3, #8]
 8001670:	4b1b      	ldr	r3, [pc, #108]	; (80016e0 <HW_TS_Stop+0xf0>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001678:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 800167a:	bf00      	nop
 800167c:	4b18      	ldr	r3, [pc, #96]	; (80016e0 <HW_TS_Stop+0xf0>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	68db      	ldr	r3, [r3, #12]
 8001682:	f003 0304 	and.w	r3, r3, #4
 8001686:	2b00      	cmp	r3, #0
 8001688:	d0f8      	beq.n	800167c <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 800168a:	4b15      	ldr	r3, [pc, #84]	; (80016e0 <HW_TS_Stop+0xf0>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	68db      	ldr	r3, [r3, #12]
 8001690:	b2da      	uxtb	r2, r3
 8001692:	4b13      	ldr	r3, [pc, #76]	; (80016e0 <HW_TS_Stop+0xf0>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800169a:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 800169c:	4b14      	ldr	r3, [pc, #80]	; (80016f0 <HW_TS_Stop+0x100>)
 800169e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80016a2:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 80016a4:	2003      	movs	r0, #3
 80016a6:	f000 ffea 	bl	800267e <HAL_NVIC_ClearPendingIRQ>
 80016aa:	e007      	b.n	80016bc <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80016ac:	4b11      	ldr	r3, [pc, #68]	; (80016f4 <HW_TS_Stop+0x104>)
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	b2db      	uxtb	r3, r3
 80016b2:	7cfa      	ldrb	r2, [r7, #19]
 80016b4:	429a      	cmp	r2, r3
 80016b6:	d001      	beq.n	80016bc <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 80016b8:	f7ff fd5e 	bl	8001178 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80016bc:	4b08      	ldr	r3, [pc, #32]	; (80016e0 <HW_TS_Stop+0xf0>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	22ff      	movs	r2, #255	; 0xff
 80016c2:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80016c4:	2003      	movs	r0, #3
 80016c6:	f000 ffa4 	bl	8002612 <HAL_NVIC_EnableIRQ>
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80016ce:	68bb      	ldr	r3, [r7, #8]
 80016d0:	f383 8810 	msr	PRIMASK, r3
}
 80016d4:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80016d6:	bf00      	nop
}
 80016d8:	3718      	adds	r7, #24
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	20000aa8 	.word	0x20000aa8
 80016e4:	20000978 	.word	0x20000978
 80016e8:	20000a08 	.word	0x20000a08
 80016ec:	40002800 	.word	0x40002800
 80016f0:	58000800 	.word	0x58000800
 80016f4:	20000a09 	.word	0x20000a09

080016f8 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b086      	sub	sp, #24
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	4603      	mov	r3, r0
 8001700:	6039      	str	r1, [r7, #0]
 8001702:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001704:	79fa      	ldrb	r2, [r7, #7]
 8001706:	493b      	ldr	r1, [pc, #236]	; (80017f4 <HW_TS_Start+0xfc>)
 8001708:	4613      	mov	r3, r2
 800170a:	005b      	lsls	r3, r3, #1
 800170c:	4413      	add	r3, r2
 800170e:	00db      	lsls	r3, r3, #3
 8001710:	440b      	add	r3, r1
 8001712:	330c      	adds	r3, #12
 8001714:	781b      	ldrb	r3, [r3, #0]
 8001716:	b2db      	uxtb	r3, r3
 8001718:	2b02      	cmp	r3, #2
 800171a:	d103      	bne.n	8001724 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 800171c:	79fb      	ldrb	r3, [r7, #7]
 800171e:	4618      	mov	r0, r3
 8001720:	f7ff ff66 	bl	80015f0 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001724:	f3ef 8310 	mrs	r3, PRIMASK
 8001728:	60fb      	str	r3, [r7, #12]
  return(result);
 800172a:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800172c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800172e:	b672      	cpsid	i
}
 8001730:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001732:	2003      	movs	r0, #3
 8001734:	f000 ff7b 	bl	800262e <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001738:	4b2f      	ldr	r3, [pc, #188]	; (80017f8 <HW_TS_Start+0x100>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	22ca      	movs	r2, #202	; 0xca
 800173e:	625a      	str	r2, [r3, #36]	; 0x24
 8001740:	4b2d      	ldr	r3, [pc, #180]	; (80017f8 <HW_TS_Start+0x100>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	2253      	movs	r2, #83	; 0x53
 8001746:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8001748:	79fa      	ldrb	r2, [r7, #7]
 800174a:	492a      	ldr	r1, [pc, #168]	; (80017f4 <HW_TS_Start+0xfc>)
 800174c:	4613      	mov	r3, r2
 800174e:	005b      	lsls	r3, r3, #1
 8001750:	4413      	add	r3, r2
 8001752:	00db      	lsls	r3, r3, #3
 8001754:	440b      	add	r3, r1
 8001756:	330c      	adds	r3, #12
 8001758:	2202      	movs	r2, #2
 800175a:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 800175c:	79fa      	ldrb	r2, [r7, #7]
 800175e:	4925      	ldr	r1, [pc, #148]	; (80017f4 <HW_TS_Start+0xfc>)
 8001760:	4613      	mov	r3, r2
 8001762:	005b      	lsls	r3, r3, #1
 8001764:	4413      	add	r3, r2
 8001766:	00db      	lsls	r3, r3, #3
 8001768:	440b      	add	r3, r1
 800176a:	3308      	adds	r3, #8
 800176c:	683a      	ldr	r2, [r7, #0]
 800176e:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8001770:	79fa      	ldrb	r2, [r7, #7]
 8001772:	4920      	ldr	r1, [pc, #128]	; (80017f4 <HW_TS_Start+0xfc>)
 8001774:	4613      	mov	r3, r2
 8001776:	005b      	lsls	r3, r3, #1
 8001778:	4413      	add	r3, r2
 800177a:	00db      	lsls	r3, r3, #3
 800177c:	440b      	add	r3, r1
 800177e:	3304      	adds	r3, #4
 8001780:	683a      	ldr	r2, [r7, #0]
 8001782:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8001784:	79fb      	ldrb	r3, [r7, #7]
 8001786:	4618      	mov	r0, r3
 8001788:	f7ff fb30 	bl	8000dec <linkTimer>
 800178c:	4603      	mov	r3, r0
 800178e:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8001790:	4b1a      	ldr	r3, [pc, #104]	; (80017fc <HW_TS_Start+0x104>)
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001796:	4b1a      	ldr	r3, [pc, #104]	; (8001800 <HW_TS_Start+0x108>)
 8001798:	781b      	ldrb	r3, [r3, #0]
 800179a:	b2db      	uxtb	r3, r3
 800179c:	7c7a      	ldrb	r2, [r7, #17]
 800179e:	429a      	cmp	r2, r3
 80017a0:	d002      	beq.n	80017a8 <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 80017a2:	f7ff fce9 	bl	8001178 <RescheduleTimerList>
 80017a6:	e013      	b.n	80017d0 <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 80017a8:	79fa      	ldrb	r2, [r7, #7]
 80017aa:	4912      	ldr	r1, [pc, #72]	; (80017f4 <HW_TS_Start+0xfc>)
 80017ac:	4613      	mov	r3, r2
 80017ae:	005b      	lsls	r3, r3, #1
 80017b0:	4413      	add	r3, r2
 80017b2:	00db      	lsls	r3, r3, #3
 80017b4:	440b      	add	r3, r1
 80017b6:	3308      	adds	r3, #8
 80017b8:	6819      	ldr	r1, [r3, #0]
 80017ba:	8a7b      	ldrh	r3, [r7, #18]
 80017bc:	79fa      	ldrb	r2, [r7, #7]
 80017be:	1ac9      	subs	r1, r1, r3
 80017c0:	480c      	ldr	r0, [pc, #48]	; (80017f4 <HW_TS_Start+0xfc>)
 80017c2:	4613      	mov	r3, r2
 80017c4:	005b      	lsls	r3, r3, #1
 80017c6:	4413      	add	r3, r2
 80017c8:	00db      	lsls	r3, r3, #3
 80017ca:	4403      	add	r3, r0
 80017cc:	3308      	adds	r3, #8
 80017ce:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80017d0:	4b09      	ldr	r3, [pc, #36]	; (80017f8 <HW_TS_Start+0x100>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	22ff      	movs	r2, #255	; 0xff
 80017d6:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80017d8:	2003      	movs	r0, #3
 80017da:	f000 ff1a 	bl	8002612 <HAL_NVIC_EnableIRQ>
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80017e2:	68bb      	ldr	r3, [r7, #8]
 80017e4:	f383 8810 	msr	PRIMASK, r3
}
 80017e8:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80017ea:	bf00      	nop
}
 80017ec:	3718      	adds	r7, #24
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	20000978 	.word	0x20000978
 80017f8:	20000aa8 	.word	0x20000aa8
 80017fc:	20000a08 	.word	0x20000a08
 8001800:	20000a09 	.word	0x20000a09

08001804 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b084      	sub	sp, #16
 8001808:	af00      	add	r7, sp, #0
 800180a:	60f8      	str	r0, [r7, #12]
 800180c:	460b      	mov	r3, r1
 800180e:	607a      	str	r2, [r7, #4]
 8001810:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	4798      	blx	r3

  return;
 8001816:	bf00      	nop
}
 8001818:	3710      	adds	r7, #16
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}

0800181e <LL_RCC_LSE_SetDriveCapability>:
{
 800181e:	b480      	push	{r7}
 8001820:	b083      	sub	sp, #12
 8001822:	af00      	add	r7, sp, #0
 8001824:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001826:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800182a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800182e:	f023 0218 	bic.w	r2, r3, #24
 8001832:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	4313      	orrs	r3, r2
 800183a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800183e:	bf00      	nop
 8001840:	370c      	adds	r7, #12
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr

0800184a <LL_AHB2_GRP1_EnableClock>:
{
 800184a:	b480      	push	{r7}
 800184c:	b085      	sub	sp, #20
 800184e:	af00      	add	r7, sp, #0
 8001850:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001852:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001856:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001858:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	4313      	orrs	r3, r2
 8001860:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001862:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001866:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	4013      	ands	r3, r2
 800186c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800186e:	68fb      	ldr	r3, [r7, #12]
}
 8001870:	bf00      	nop
 8001872:	3714      	adds	r7, #20
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr

0800187c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001880:	f000 fce0 	bl	8002244 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 8001884:	f7fe ffee 	bl	8000864 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001888:	f000 f81c 	bl	80018c4 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800188c:	f000 f87c 	bl	8001988 <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 8001890:	f000 f8da 	bl	8001a48 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001894:	f000 f976 	bl	8001b84 <MX_GPIO_Init>
  MX_RTC_Init();
 8001898:	f000 f8f2 	bl	8001a80 <MX_RTC_Init>
  MX_I2C1_Init();
 800189c:	f000 f894 	bl	80019c8 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80018a0:	f000 f922 	bl	8001ae8 <MX_USART1_UART_Init>
  MX_RF_Init();
 80018a4:	f000 f8e4 	bl	8001a70 <MX_RF_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 80018a8:	f7fe ffea 	bl	8000880 <MX_APPE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_APPE_Process();
 80018ac:	f7ff f974 	bl	8000b98 <MX_APPE_Process>

    /* USER CODE BEGIN 3 */
    printf("Hello World\n\r");
 80018b0:	4803      	ldr	r0, [pc, #12]	; (80018c0 <main+0x44>)
 80018b2:	f007 f9ff 	bl	8008cb4 <iprintf>
    HAL_Delay(1000);
 80018b6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80018ba:	f7ff f948 	bl	8000b4e <HAL_Delay>
    MX_APPE_Process();
 80018be:	e7f5      	b.n	80018ac <main+0x30>
 80018c0:	08009c04 	.word	0x08009c04

080018c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b09a      	sub	sp, #104	; 0x68
 80018c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018ca:	f107 0320 	add.w	r3, r7, #32
 80018ce:	2248      	movs	r2, #72	; 0x48
 80018d0:	2100      	movs	r1, #0
 80018d2:	4618      	mov	r0, r3
 80018d4:	f007 f9e6 	bl	8008ca4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018d8:	1d3b      	adds	r3, r7, #4
 80018da:	2200      	movs	r2, #0
 80018dc:	601a      	str	r2, [r3, #0]
 80018de:	605a      	str	r2, [r3, #4]
 80018e0:	609a      	str	r2, [r3, #8]
 80018e2:	60da      	str	r2, [r3, #12]
 80018e4:	611a      	str	r2, [r3, #16]
 80018e6:	615a      	str	r2, [r3, #20]
 80018e8:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80018ea:	f001 fa49 	bl	8002d80 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 80018ee:	2010      	movs	r0, #16
 80018f0:	f7ff ff95 	bl	800181e <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80018f4:	4b23      	ldr	r3, [pc, #140]	; (8001984 <SystemClock_Config+0xc0>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80018fc:	4a21      	ldr	r2, [pc, #132]	; (8001984 <SystemClock_Config+0xc0>)
 80018fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001902:	6013      	str	r3, [r2, #0]
 8001904:	4b1f      	ldr	r3, [pc, #124]	; (8001984 <SystemClock_Config+0xc0>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800190c:	603b      	str	r3, [r7, #0]
 800190e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8001910:	2327      	movs	r3, #39	; 0x27
 8001912:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001914:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001918:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800191a:	2301      	movs	r3, #1
 800191c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800191e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001922:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001924:	2301      	movs	r3, #1
 8001926:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001928:	2340      	movs	r3, #64	; 0x40
 800192a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800192c:	2300      	movs	r3, #0
 800192e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 8001930:	23a0      	movs	r3, #160	; 0xa0
 8001932:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001934:	2300      	movs	r3, #0
 8001936:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001938:	f107 0320 	add.w	r3, r7, #32
 800193c:	4618      	mov	r0, r3
 800193e:	f001 fdb3 	bl	80034a8 <HAL_RCC_OscConfig>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d001      	beq.n	800194c <SystemClock_Config+0x88>
  {
    Error_Handler();
 8001948:	f000 f988 	bl	8001c5c <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 800194c:	236f      	movs	r3, #111	; 0x6f
 800194e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001950:	2300      	movs	r3, #0
 8001952:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001954:	2300      	movs	r3, #0
 8001956:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001958:	2300      	movs	r3, #0
 800195a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800195c:	2300      	movs	r3, #0
 800195e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8001960:	2300      	movs	r3, #0
 8001962:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8001964:	2300      	movs	r3, #0
 8001966:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001968:	1d3b      	adds	r3, r7, #4
 800196a:	2101      	movs	r1, #1
 800196c:	4618      	mov	r0, r3
 800196e:	f002 f90f 	bl	8003b90 <HAL_RCC_ClockConfig>
 8001972:	4603      	mov	r3, r0
 8001974:	2b00      	cmp	r3, #0
 8001976:	d001      	beq.n	800197c <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8001978:	f000 f970 	bl	8001c5c <Error_Handler>
  }
}
 800197c:	bf00      	nop
 800197e:	3768      	adds	r7, #104	; 0x68
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}
 8001984:	58000400 	.word	0x58000400

08001988 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b094      	sub	sp, #80	; 0x50
 800198c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800198e:	463b      	mov	r3, r7
 8001990:	2250      	movs	r2, #80	; 0x50
 8001992:	2100      	movs	r1, #0
 8001994:	4618      	mov	r0, r3
 8001996:	f007 f985 	bl	8008ca4 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 800199a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800199e:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 80019a0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80019a4:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 80019a6:	2300      	movs	r3, #0
 80019a8:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 80019aa:	2300      	movs	r3, #0
 80019ac:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019ae:	463b      	mov	r3, r7
 80019b0:	4618      	mov	r0, r3
 80019b2:	f002 fd2a 	bl	800440a <HAL_RCCEx_PeriphCLKConfig>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d001      	beq.n	80019c0 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 80019bc:	f000 f94e 	bl	8001c5c <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 80019c0:	bf00      	nop
 80019c2:	3750      	adds	r7, #80	; 0x50
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}

080019c8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80019cc:	4b1b      	ldr	r3, [pc, #108]	; (8001a3c <MX_I2C1_Init+0x74>)
 80019ce:	4a1c      	ldr	r2, [pc, #112]	; (8001a40 <MX_I2C1_Init+0x78>)
 80019d0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 80019d2:	4b1a      	ldr	r3, [pc, #104]	; (8001a3c <MX_I2C1_Init+0x74>)
 80019d4:	4a1b      	ldr	r2, [pc, #108]	; (8001a44 <MX_I2C1_Init+0x7c>)
 80019d6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80019d8:	4b18      	ldr	r3, [pc, #96]	; (8001a3c <MX_I2C1_Init+0x74>)
 80019da:	2200      	movs	r2, #0
 80019dc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80019de:	4b17      	ldr	r3, [pc, #92]	; (8001a3c <MX_I2C1_Init+0x74>)
 80019e0:	2201      	movs	r2, #1
 80019e2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80019e4:	4b15      	ldr	r3, [pc, #84]	; (8001a3c <MX_I2C1_Init+0x74>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80019ea:	4b14      	ldr	r3, [pc, #80]	; (8001a3c <MX_I2C1_Init+0x74>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80019f0:	4b12      	ldr	r3, [pc, #72]	; (8001a3c <MX_I2C1_Init+0x74>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80019f6:	4b11      	ldr	r3, [pc, #68]	; (8001a3c <MX_I2C1_Init+0x74>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80019fc:	4b0f      	ldr	r3, [pc, #60]	; (8001a3c <MX_I2C1_Init+0x74>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001a02:	480e      	ldr	r0, [pc, #56]	; (8001a3c <MX_I2C1_Init+0x74>)
 8001a04:	f000 fff6 	bl	80029f4 <HAL_I2C_Init>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d001      	beq.n	8001a12 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001a0e:	f000 f925 	bl	8001c5c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001a12:	2100      	movs	r1, #0
 8001a14:	4809      	ldr	r0, [pc, #36]	; (8001a3c <MX_I2C1_Init+0x74>)
 8001a16:	f001 f896 	bl	8002b46 <HAL_I2CEx_ConfigAnalogFilter>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d001      	beq.n	8001a24 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001a20:	f000 f91c 	bl	8001c5c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001a24:	2100      	movs	r1, #0
 8001a26:	4805      	ldr	r0, [pc, #20]	; (8001a3c <MX_I2C1_Init+0x74>)
 8001a28:	f001 f8d8 	bl	8002bdc <HAL_I2CEx_ConfigDigitalFilter>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d001      	beq.n	8001a36 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001a32:	f000 f913 	bl	8001c5c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001a36:	bf00      	nop
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	20000a18 	.word	0x20000a18
 8001a40:	40005400 	.word	0x40005400
 8001a44:	00707cbb 	.word	0x00707cbb

08001a48 <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8001a4c:	4b06      	ldr	r3, [pc, #24]	; (8001a68 <MX_IPCC_Init+0x20>)
 8001a4e:	4a07      	ldr	r2, [pc, #28]	; (8001a6c <MX_IPCC_Init+0x24>)
 8001a50:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 8001a52:	4805      	ldr	r0, [pc, #20]	; (8001a68 <MX_IPCC_Init+0x20>)
 8001a54:	f001 f90e 	bl	8002c74 <HAL_IPCC_Init>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d001      	beq.n	8001a62 <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 8001a5e:	f000 f8fd 	bl	8001c5c <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 8001a62:	bf00      	nop
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	20000a6c 	.word	0x20000a6c
 8001a6c:	58000c00 	.word	0x58000c00

08001a70 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8001a74:	bf00      	nop
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr
	...

08001a80 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001a84:	4b16      	ldr	r3, [pc, #88]	; (8001ae0 <MX_RTC_Init+0x60>)
 8001a86:	4a17      	ldr	r2, [pc, #92]	; (8001ae4 <MX_RTC_Init+0x64>)
 8001a88:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001a8a:	4b15      	ldr	r3, [pc, #84]	; (8001ae0 <MX_RTC_Init+0x60>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8001a90:	4b13      	ldr	r3, [pc, #76]	; (8001ae0 <MX_RTC_Init+0x60>)
 8001a92:	220f      	movs	r2, #15
 8001a94:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8001a96:	4b12      	ldr	r3, [pc, #72]	; (8001ae0 <MX_RTC_Init+0x60>)
 8001a98:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8001a9c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001a9e:	4b10      	ldr	r3, [pc, #64]	; (8001ae0 <MX_RTC_Init+0x60>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001aa4:	4b0e      	ldr	r3, [pc, #56]	; (8001ae0 <MX_RTC_Init+0x60>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001aaa:	4b0d      	ldr	r3, [pc, #52]	; (8001ae0 <MX_RTC_Init+0x60>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001ab0:	4b0b      	ldr	r3, [pc, #44]	; (8001ae0 <MX_RTC_Init+0x60>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001ab6:	480a      	ldr	r0, [pc, #40]	; (8001ae0 <MX_RTC_Init+0x60>)
 8001ab8:	f002 ff2e 	bl	8004918 <HAL_RTC_Init>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d001      	beq.n	8001ac6 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8001ac2:	f000 f8cb 	bl	8001c5c <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	2100      	movs	r1, #0
 8001aca:	4805      	ldr	r0, [pc, #20]	; (8001ae0 <MX_RTC_Init+0x60>)
 8001acc:	f003 f824 	bl	8004b18 <HAL_RTCEx_SetWakeUpTimer_IT>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d001      	beq.n	8001ada <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8001ad6:	f000 f8c1 	bl	8001c5c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001ada:	bf00      	nop
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	20000aa8 	.word	0x20000aa8
 8001ae4:	40002800 	.word	0x40002800

08001ae8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001aec:	4b23      	ldr	r3, [pc, #140]	; (8001b7c <MX_USART1_UART_Init+0x94>)
 8001aee:	4a24      	ldr	r2, [pc, #144]	; (8001b80 <MX_USART1_UART_Init+0x98>)
 8001af0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001af2:	4b22      	ldr	r3, [pc, #136]	; (8001b7c <MX_USART1_UART_Init+0x94>)
 8001af4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001af8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001afa:	4b20      	ldr	r3, [pc, #128]	; (8001b7c <MX_USART1_UART_Init+0x94>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001b00:	4b1e      	ldr	r3, [pc, #120]	; (8001b7c <MX_USART1_UART_Init+0x94>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_ODD;
 8001b06:	4b1d      	ldr	r3, [pc, #116]	; (8001b7c <MX_USART1_UART_Init+0x94>)
 8001b08:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8001b0c:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001b0e:	4b1b      	ldr	r3, [pc, #108]	; (8001b7c <MX_USART1_UART_Init+0x94>)
 8001b10:	220c      	movs	r2, #12
 8001b12:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b14:	4b19      	ldr	r3, [pc, #100]	; (8001b7c <MX_USART1_UART_Init+0x94>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b1a:	4b18      	ldr	r3, [pc, #96]	; (8001b7c <MX_USART1_UART_Init+0x94>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b20:	4b16      	ldr	r3, [pc, #88]	; (8001b7c <MX_USART1_UART_Init+0x94>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001b26:	4b15      	ldr	r3, [pc, #84]	; (8001b7c <MX_USART1_UART_Init+0x94>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b2c:	4b13      	ldr	r3, [pc, #76]	; (8001b7c <MX_USART1_UART_Init+0x94>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001b32:	4812      	ldr	r0, [pc, #72]	; (8001b7c <MX_USART1_UART_Init+0x94>)
 8001b34:	f003 f8cc 	bl	8004cd0 <HAL_UART_Init>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d001      	beq.n	8001b42 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8001b3e:	f000 f88d 	bl	8001c5c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b42:	2100      	movs	r1, #0
 8001b44:	480d      	ldr	r0, [pc, #52]	; (8001b7c <MX_USART1_UART_Init+0x94>)
 8001b46:	f003 fe1b 	bl	8005780 <HAL_UARTEx_SetTxFifoThreshold>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d001      	beq.n	8001b54 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8001b50:	f000 f884 	bl	8001c5c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b54:	2100      	movs	r1, #0
 8001b56:	4809      	ldr	r0, [pc, #36]	; (8001b7c <MX_USART1_UART_Init+0x94>)
 8001b58:	f003 fe50 	bl	80057fc <HAL_UARTEx_SetRxFifoThreshold>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d001      	beq.n	8001b66 <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 8001b62:	f000 f87b 	bl	8001c5c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001b66:	4805      	ldr	r0, [pc, #20]	; (8001b7c <MX_USART1_UART_Init+0x94>)
 8001b68:	f003 fdd1 	bl	800570e <HAL_UARTEx_DisableFifoMode>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d001      	beq.n	8001b76 <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 8001b72:	f000 f873 	bl	8001c5c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001b76:	bf00      	nop
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	20000acc 	.word	0x20000acc
 8001b80:	40013800 	.word	0x40013800

08001b84 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b086      	sub	sp, #24
 8001b88:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b8a:	1d3b      	adds	r3, r7, #4
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	601a      	str	r2, [r3, #0]
 8001b90:	605a      	str	r2, [r3, #4]
 8001b92:	609a      	str	r2, [r3, #8]
 8001b94:	60da      	str	r2, [r3, #12]
 8001b96:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b98:	2004      	movs	r0, #4
 8001b9a:	f7ff fe56 	bl	800184a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b9e:	2002      	movs	r0, #2
 8001ba0:	f7ff fe53 	bl	800184a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ba4:	2001      	movs	r0, #1
 8001ba6:	f7ff fe50 	bl	800184a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001baa:	2008      	movs	r0, #8
 8001bac:	f7ff fe4d 	bl	800184a <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	2123      	movs	r1, #35	; 0x23
 8001bb4:	481d      	ldr	r0, [pc, #116]	; (8001c2c <MX_GPIO_Init+0xa8>)
 8001bb6:	f000 fee1 	bl	800297c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001bba:	2310      	movs	r3, #16
 8001bbc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001bc6:	1d3b      	adds	r3, r7, #4
 8001bc8:	4619      	mov	r1, r3
 8001bca:	4819      	ldr	r0, [pc, #100]	; (8001c30 <MX_GPIO_Init+0xac>)
 8001bcc:	f000 fd66 	bl	800269c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 8001bd0:	2323      	movs	r3, #35	; 0x23
 8001bd2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001be0:	1d3b      	adds	r3, r7, #4
 8001be2:	4619      	mov	r1, r3
 8001be4:	4811      	ldr	r0, [pc, #68]	; (8001c2c <MX_GPIO_Init+0xa8>)
 8001be6:	f000 fd59 	bl	800269c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001bea:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001bee:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bf0:	2302      	movs	r3, #2
 8001bf2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8001bfc:	230a      	movs	r3, #10
 8001bfe:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c00:	1d3b      	adds	r3, r7, #4
 8001c02:	4619      	mov	r1, r3
 8001c04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c08:	f000 fd48 	bl	800269c <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 8001c0c:	2303      	movs	r3, #3
 8001c0e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c10:	2300      	movs	r3, #0
 8001c12:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c14:	2300      	movs	r3, #0
 8001c16:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c18:	1d3b      	adds	r3, r7, #4
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	4805      	ldr	r0, [pc, #20]	; (8001c34 <MX_GPIO_Init+0xb0>)
 8001c1e:	f000 fd3d 	bl	800269c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001c22:	bf00      	nop
 8001c24:	3718      	adds	r7, #24
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	48000400 	.word	0x48000400
 8001c30:	48000800 	.word	0x48000800
 8001c34:	48000c00 	.word	0x48000c00

08001c38 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8001c40:	1d39      	adds	r1, r7, #4
 8001c42:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c46:	2201      	movs	r2, #1
 8001c48:	4803      	ldr	r0, [pc, #12]	; (8001c58 <__io_putchar+0x20>)
 8001c4a:	f003 f891 	bl	8004d70 <HAL_UART_Transmit>

  return ch;
 8001c4e:	687b      	ldr	r3, [r7, #4]
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	3708      	adds	r7, #8
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	20000acc 	.word	0x20000acc

08001c5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001c60:	b672      	cpsid	i
}
 8001c62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c64:	e7fe      	b.n	8001c64 <Error_Handler+0x8>

08001c66 <LL_RCC_EnableRTC>:
{
 8001c66:	b480      	push	{r7}
 8001c68:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001c6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c72:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c7a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001c7e:	bf00      	nop
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr

08001c88 <LL_AHB2_GRP1_EnableClock>:
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b085      	sub	sp, #20
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001c90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c94:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001c96:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001ca0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ca4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	4013      	ands	r3, r2
 8001caa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001cac:	68fb      	ldr	r3, [r7, #12]
}
 8001cae:	bf00      	nop
 8001cb0:	3714      	adds	r7, #20
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr

08001cba <LL_AHB3_GRP1_EnableClock>:
{
 8001cba:	b480      	push	{r7}
 8001cbc:	b085      	sub	sp, #20
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8001cc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cc6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001cc8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8001cd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cd6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	4013      	ands	r3, r2
 8001cdc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001cde:	68fb      	ldr	r3, [r7, #12]
}
 8001ce0:	bf00      	nop
 8001ce2:	3714      	adds	r7, #20
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr

08001cec <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b085      	sub	sp, #20
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001cf4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cf8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001cfa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	4313      	orrs	r3, r2
 8001d02:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001d04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d08:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001d10:	68fb      	ldr	r3, [r7, #12]
}
 8001d12:	bf00      	nop
 8001d14:	3714      	adds	r7, #20
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr

08001d1e <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001d1e:	b480      	push	{r7}
 8001d20:	b085      	sub	sp, #20
 8001d22:	af00      	add	r7, sp, #0
 8001d24:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001d26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d2a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001d2c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	4313      	orrs	r3, r2
 8001d34:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001d36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d3a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	4013      	ands	r3, r2
 8001d40:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001d42:	68fb      	ldr	r3, [r7, #12]
}
 8001d44:	bf00      	nop
 8001d46:	3714      	adds	r7, #20
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr

08001d50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8001d54:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001d58:	f7ff ffaf 	bl	8001cba <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	2100      	movs	r1, #0
 8001d60:	202e      	movs	r0, #46	; 0x2e
 8001d62:	f000 fc3c 	bl	80025de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8001d66:	202e      	movs	r0, #46	; 0x2e
 8001d68:	f000 fc53 	bl	8002612 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d6c:	bf00      	nop
 8001d6e:	bd80      	pop	{r7, pc}

08001d70 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b09c      	sub	sp, #112	; 0x70
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d78:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	601a      	str	r2, [r3, #0]
 8001d80:	605a      	str	r2, [r3, #4]
 8001d82:	609a      	str	r2, [r3, #8]
 8001d84:	60da      	str	r2, [r3, #12]
 8001d86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d88:	f107 030c 	add.w	r3, r7, #12
 8001d8c:	2250      	movs	r2, #80	; 0x50
 8001d8e:	2100      	movs	r1, #0
 8001d90:	4618      	mov	r0, r3
 8001d92:	f006 ff87 	bl	8008ca4 <memset>
  if(hi2c->Instance==I2C1)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a1b      	ldr	r2, [pc, #108]	; (8001e08 <HAL_I2C_MspInit+0x98>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d12e      	bne.n	8001dfe <HAL_I2C_MspInit+0x8e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001da0:	2304      	movs	r3, #4
 8001da2:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001da4:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8001da8:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001daa:	f107 030c 	add.w	r3, r7, #12
 8001dae:	4618      	mov	r0, r3
 8001db0:	f002 fb2b 	bl	800440a <HAL_RCCEx_PeriphCLKConfig>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d001      	beq.n	8001dbe <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001dba:	f7ff ff4f 	bl	8001c5c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dbe:	2002      	movs	r0, #2
 8001dc0:	f7ff ff62 	bl	8001c88 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001dc4:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001dc8:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001dca:	2312      	movs	r3, #18
 8001dcc:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001dd6:	2304      	movs	r3, #4
 8001dd8:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dda:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001dde:	4619      	mov	r1, r3
 8001de0:	480a      	ldr	r0, [pc, #40]	; (8001e0c <HAL_I2C_MspInit+0x9c>)
 8001de2:	f000 fc5b 	bl	800269c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001de6:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001dea:	f7ff ff7f 	bl	8001cec <LL_APB1_GRP1_EnableClock>
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001dee:	2200      	movs	r2, #0
 8001df0:	2100      	movs	r1, #0
 8001df2:	201e      	movs	r0, #30
 8001df4:	f000 fbf3 	bl	80025de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001df8:	201e      	movs	r0, #30
 8001dfa:	f000 fc0a 	bl	8002612 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001dfe:	bf00      	nop
 8001e00:	3770      	adds	r7, #112	; 0x70
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	40005400 	.word	0x40005400
 8001e0c:	48000400 	.word	0x48000400

08001e10 <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b082      	sub	sp, #8
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a0d      	ldr	r2, [pc, #52]	; (8001e54 <HAL_IPCC_MspInit+0x44>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d113      	bne.n	8001e4a <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8001e22:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001e26:	f7ff ff48 	bl	8001cba <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	2100      	movs	r1, #0
 8001e2e:	202c      	movs	r0, #44	; 0x2c
 8001e30:	f000 fbd5 	bl	80025de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8001e34:	202c      	movs	r0, #44	; 0x2c
 8001e36:	f000 fbec 	bl	8002612 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	2100      	movs	r1, #0
 8001e3e:	202d      	movs	r0, #45	; 0x2d
 8001e40:	f000 fbcd 	bl	80025de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8001e44:	202d      	movs	r0, #45	; 0x2d
 8001e46:	f000 fbe4 	bl	8002612 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 8001e4a:	bf00      	nop
 8001e4c:	3708      	adds	r7, #8
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	58000c00 	.word	0x58000c00

08001e58 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b096      	sub	sp, #88	; 0x58
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e60:	f107 0308 	add.w	r3, r7, #8
 8001e64:	2250      	movs	r2, #80	; 0x50
 8001e66:	2100      	movs	r1, #0
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f006 ff1b 	bl	8008ca4 <memset>
  if(hrtc->Instance==RTC)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a12      	ldr	r2, [pc, #72]	; (8001ebc <HAL_RTC_MspInit+0x64>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d11d      	bne.n	8001eb4 <HAL_RTC_MspInit+0x5c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001e78:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001e7c:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001e7e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e82:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e84:	f107 0308 	add.w	r3, r7, #8
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f002 fabe 	bl	800440a <HAL_RCCEx_PeriphCLKConfig>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d001      	beq.n	8001e98 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001e94:	f7ff fee2 	bl	8001c5c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001e98:	f7ff fee5 	bl	8001c66 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001e9c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001ea0:	f7ff ff24 	bl	8001cec <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	2100      	movs	r1, #0
 8001ea8:	2003      	movs	r0, #3
 8001eaa:	f000 fb98 	bl	80025de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8001eae:	2003      	movs	r0, #3
 8001eb0:	f000 fbaf 	bl	8002612 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001eb4:	bf00      	nop
 8001eb6:	3758      	adds	r7, #88	; 0x58
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	40002800 	.word	0x40002800

08001ec0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b09c      	sub	sp, #112	; 0x70
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ec8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001ecc:	2200      	movs	r2, #0
 8001ece:	601a      	str	r2, [r3, #0]
 8001ed0:	605a      	str	r2, [r3, #4]
 8001ed2:	609a      	str	r2, [r3, #8]
 8001ed4:	60da      	str	r2, [r3, #12]
 8001ed6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ed8:	f107 030c 	add.w	r3, r7, #12
 8001edc:	2250      	movs	r2, #80	; 0x50
 8001ede:	2100      	movs	r1, #0
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f006 fedf 	bl	8008ca4 <memset>
  if(huart->Instance==USART1)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a16      	ldr	r2, [pc, #88]	; (8001f44 <HAL_UART_MspInit+0x84>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d124      	bne.n	8001f3a <HAL_UART_MspInit+0x7a>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ef8:	f107 030c 	add.w	r3, r7, #12
 8001efc:	4618      	mov	r0, r3
 8001efe:	f002 fa84 	bl	800440a <HAL_RCCEx_PeriphCLKConfig>
 8001f02:	4603      	mov	r3, r0
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d001      	beq.n	8001f0c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001f08:	f7ff fea8 	bl	8001c5c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001f0c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001f10:	f7ff ff05 	bl	8001d1e <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f14:	2002      	movs	r0, #2
 8001f16:	f7ff feb7 	bl	8001c88 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001f1a:	23c0      	movs	r3, #192	; 0xc0
 8001f1c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f1e:	2302      	movs	r3, #2
 8001f20:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f22:	2300      	movs	r3, #0
 8001f24:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f26:	2300      	movs	r3, #0
 8001f28:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001f2a:	2307      	movs	r3, #7
 8001f2c:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f2e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001f32:	4619      	mov	r1, r3
 8001f34:	4804      	ldr	r0, [pc, #16]	; (8001f48 <HAL_UART_MspInit+0x88>)
 8001f36:	f000 fbb1 	bl	800269c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001f3a:	bf00      	nop
 8001f3c:	3770      	adds	r7, #112	; 0x70
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	40013800 	.word	0x40013800
 8001f48:	48000400 	.word	0x48000400

08001f4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f50:	e7fe      	b.n	8001f50 <NMI_Handler+0x4>

08001f52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f52:	b480      	push	{r7}
 8001f54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f56:	e7fe      	b.n	8001f56 <HardFault_Handler+0x4>

08001f58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f5c:	e7fe      	b.n	8001f5c <MemManage_Handler+0x4>

08001f5e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f5e:	b480      	push	{r7}
 8001f60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f62:	e7fe      	b.n	8001f62 <BusFault_Handler+0x4>

08001f64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f64:	b480      	push	{r7}
 8001f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f68:	e7fe      	b.n	8001f68 <UsageFault_Handler+0x4>

08001f6a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f6a:	b480      	push	{r7}
 8001f6c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f6e:	bf00      	nop
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr

08001f78 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f7c:	bf00      	nop
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr

08001f86 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f86:	b480      	push	{r7}
 8001f88:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f8a:	bf00      	nop
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr

08001f94 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f98:	f000 f9ae 	bl	80022f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f9c:	bf00      	nop
 8001f9e:	bd80      	pop	{r7, pc}

08001fa0 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8001fa4:	f7ff f982 	bl	80012ac <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8001fa8:	bf00      	nop
 8001faa:	bd80      	pop	{r7, pc}

08001fac <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001fb0:	4802      	ldr	r0, [pc, #8]	; (8001fbc <I2C1_EV_IRQHandler+0x10>)
 8001fb2:	f000 fdae 	bl	8002b12 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001fb6:	bf00      	nop
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	20000a18 	.word	0x20000a18

08001fc0 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8001fc4:	f006 fa72 	bl	80084ac <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8001fc8:	bf00      	nop
 8001fca:	bd80      	pop	{r7, pc}

08001fcc <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 8001fd0:	f006 faa4 	bl	800851c <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8001fd4:	bf00      	nop
 8001fd6:	bd80      	pop	{r7, pc}

08001fd8 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8001fdc:	f000 fce6 	bl	80029ac <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8001fe0:	bf00      	nop
 8001fe2:	bd80      	pop	{r7, pc}

08001fe4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b086      	sub	sp, #24
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	60f8      	str	r0, [r7, #12]
 8001fec:	60b9      	str	r1, [r7, #8]
 8001fee:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	617b      	str	r3, [r7, #20]
 8001ff4:	e00a      	b.n	800200c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001ff6:	f3af 8000 	nop.w
 8001ffa:	4601      	mov	r1, r0
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	1c5a      	adds	r2, r3, #1
 8002000:	60ba      	str	r2, [r7, #8]
 8002002:	b2ca      	uxtb	r2, r1
 8002004:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002006:	697b      	ldr	r3, [r7, #20]
 8002008:	3301      	adds	r3, #1
 800200a:	617b      	str	r3, [r7, #20]
 800200c:	697a      	ldr	r2, [r7, #20]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	429a      	cmp	r2, r3
 8002012:	dbf0      	blt.n	8001ff6 <_read+0x12>
  }

  return len;
 8002014:	687b      	ldr	r3, [r7, #4]
}
 8002016:	4618      	mov	r0, r3
 8002018:	3718      	adds	r7, #24
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}

0800201e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800201e:	b580      	push	{r7, lr}
 8002020:	b086      	sub	sp, #24
 8002022:	af00      	add	r7, sp, #0
 8002024:	60f8      	str	r0, [r7, #12]
 8002026:	60b9      	str	r1, [r7, #8]
 8002028:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800202a:	2300      	movs	r3, #0
 800202c:	617b      	str	r3, [r7, #20]
 800202e:	e009      	b.n	8002044 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	1c5a      	adds	r2, r3, #1
 8002034:	60ba      	str	r2, [r7, #8]
 8002036:	781b      	ldrb	r3, [r3, #0]
 8002038:	4618      	mov	r0, r3
 800203a:	f7ff fdfd 	bl	8001c38 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	3301      	adds	r3, #1
 8002042:	617b      	str	r3, [r7, #20]
 8002044:	697a      	ldr	r2, [r7, #20]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	429a      	cmp	r2, r3
 800204a:	dbf1      	blt.n	8002030 <_write+0x12>
  }
  return len;
 800204c:	687b      	ldr	r3, [r7, #4]
}
 800204e:	4618      	mov	r0, r3
 8002050:	3718      	adds	r7, #24
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}

08002056 <_close>:

int _close(int file)
{
 8002056:	b480      	push	{r7}
 8002058:	b083      	sub	sp, #12
 800205a:	af00      	add	r7, sp, #0
 800205c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800205e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002062:	4618      	mov	r0, r3
 8002064:	370c      	adds	r7, #12
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr

0800206e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800206e:	b480      	push	{r7}
 8002070:	b083      	sub	sp, #12
 8002072:	af00      	add	r7, sp, #0
 8002074:	6078      	str	r0, [r7, #4]
 8002076:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800207e:	605a      	str	r2, [r3, #4]
  return 0;
 8002080:	2300      	movs	r3, #0
}
 8002082:	4618      	mov	r0, r3
 8002084:	370c      	adds	r7, #12
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr

0800208e <_isatty>:

int _isatty(int file)
{
 800208e:	b480      	push	{r7}
 8002090:	b083      	sub	sp, #12
 8002092:	af00      	add	r7, sp, #0
 8002094:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002096:	2301      	movs	r3, #1
}
 8002098:	4618      	mov	r0, r3
 800209a:	370c      	adds	r7, #12
 800209c:	46bd      	mov	sp, r7
 800209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a2:	4770      	bx	lr

080020a4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b085      	sub	sp, #20
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	60f8      	str	r0, [r7, #12]
 80020ac:	60b9      	str	r1, [r7, #8]
 80020ae:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80020b0:	2300      	movs	r3, #0
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	3714      	adds	r7, #20
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr
	...

080020c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b086      	sub	sp, #24
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020c8:	4a14      	ldr	r2, [pc, #80]	; (800211c <_sbrk+0x5c>)
 80020ca:	4b15      	ldr	r3, [pc, #84]	; (8002120 <_sbrk+0x60>)
 80020cc:	1ad3      	subs	r3, r2, r3
 80020ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020d4:	4b13      	ldr	r3, [pc, #76]	; (8002124 <_sbrk+0x64>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d102      	bne.n	80020e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020dc:	4b11      	ldr	r3, [pc, #68]	; (8002124 <_sbrk+0x64>)
 80020de:	4a12      	ldr	r2, [pc, #72]	; (8002128 <_sbrk+0x68>)
 80020e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020e2:	4b10      	ldr	r3, [pc, #64]	; (8002124 <_sbrk+0x64>)
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	4413      	add	r3, r2
 80020ea:	693a      	ldr	r2, [r7, #16]
 80020ec:	429a      	cmp	r2, r3
 80020ee:	d207      	bcs.n	8002100 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020f0:	f006 fda0 	bl	8008c34 <__errno>
 80020f4:	4603      	mov	r3, r0
 80020f6:	220c      	movs	r2, #12
 80020f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80020fe:	e009      	b.n	8002114 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002100:	4b08      	ldr	r3, [pc, #32]	; (8002124 <_sbrk+0x64>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002106:	4b07      	ldr	r3, [pc, #28]	; (8002124 <_sbrk+0x64>)
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	4413      	add	r3, r2
 800210e:	4a05      	ldr	r2, [pc, #20]	; (8002124 <_sbrk+0x64>)
 8002110:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002112:	68fb      	ldr	r3, [r7, #12]
}
 8002114:	4618      	mov	r0, r3
 8002116:	3718      	adds	r7, #24
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}
 800211c:	20030000 	.word	0x20030000
 8002120:	00000400 	.word	0x00000400
 8002124:	20000b60 	.word	0x20000b60
 8002128:	20000d28 	.word	0x20000d28

0800212c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800212c:	b480      	push	{r7}
 800212e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8002130:	4b24      	ldr	r3, [pc, #144]	; (80021c4 <SystemInit+0x98>)
 8002132:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002136:	4a23      	ldr	r2, [pc, #140]	; (80021c4 <SystemInit+0x98>)
 8002138:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800213c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002140:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800214a:	f043 0301 	orr.w	r3, r3, #1
 800214e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8002150:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002154:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8002158:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 800215a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002164:	4b18      	ldr	r3, [pc, #96]	; (80021c8 <SystemInit+0x9c>)
 8002166:	4013      	ands	r3, r2
 8002168:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 800216a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800216e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002172:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002176:	f023 0305 	bic.w	r3, r3, #5
 800217a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800217e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002182:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002186:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800218a:	f023 0301 	bic.w	r3, r3, #1
 800218e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8002192:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002196:	4a0d      	ldr	r2, [pc, #52]	; (80021cc <SystemInit+0xa0>)
 8002198:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 800219a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800219e:	4a0b      	ldr	r2, [pc, #44]	; (80021cc <SystemInit+0xa0>)
 80021a0:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80021a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80021ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021b0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80021b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021b6:	2200      	movs	r2, #0
 80021b8:	619a      	str	r2, [r3, #24]
}
 80021ba:	bf00      	nop
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr
 80021c4:	e000ed00 	.word	0xe000ed00
 80021c8:	faf6fefb 	.word	0xfaf6fefb
 80021cc:	22041000 	.word	0x22041000

080021d0 <CopyDataInit>:
 80021d0:	58d4      	ldr	r4, [r2, r3]
 80021d2:	50c4      	str	r4, [r0, r3]
 80021d4:	3304      	adds	r3, #4

080021d6 <LoopCopyDataInit>:
 80021d6:	18c4      	adds	r4, r0, r3
 80021d8:	428c      	cmp	r4, r1
 80021da:	d3f9      	bcc.n	80021d0 <CopyDataInit>
 80021dc:	4770      	bx	lr

080021de <FillZerobss>:
 80021de:	6003      	str	r3, [r0, #0]
 80021e0:	3004      	adds	r0, #4

080021e2 <LoopFillZerobss>:
 80021e2:	4288      	cmp	r0, r1
 80021e4:	d3fb      	bcc.n	80021de <FillZerobss>
 80021e6:	4770      	bx	lr

080021e8 <Reset_Handler>:
 80021e8:	480c      	ldr	r0, [pc, #48]	; (800221c <LoopForever+0x2>)
 80021ea:	4685      	mov	sp, r0
 80021ec:	f7ff ff9e 	bl	800212c <SystemInit>
 80021f0:	480b      	ldr	r0, [pc, #44]	; (8002220 <LoopForever+0x6>)
 80021f2:	490c      	ldr	r1, [pc, #48]	; (8002224 <LoopForever+0xa>)
 80021f4:	4a0c      	ldr	r2, [pc, #48]	; (8002228 <LoopForever+0xe>)
 80021f6:	2300      	movs	r3, #0
 80021f8:	f7ff ffed 	bl	80021d6 <LoopCopyDataInit>
 80021fc:	480b      	ldr	r0, [pc, #44]	; (800222c <LoopForever+0x12>)
 80021fe:	490c      	ldr	r1, [pc, #48]	; (8002230 <LoopForever+0x16>)
 8002200:	4a0c      	ldr	r2, [pc, #48]	; (8002234 <LoopForever+0x1a>)
 8002202:	2300      	movs	r3, #0
 8002204:	f7ff ffe7 	bl	80021d6 <LoopCopyDataInit>
 8002208:	480b      	ldr	r0, [pc, #44]	; (8002238 <LoopForever+0x1e>)
 800220a:	490c      	ldr	r1, [pc, #48]	; (800223c <LoopForever+0x22>)
 800220c:	2300      	movs	r3, #0
 800220e:	f7ff ffe8 	bl	80021e2 <LoopFillZerobss>
 8002212:	f006 fd15 	bl	8008c40 <__libc_init_array>
 8002216:	f7ff fb31 	bl	800187c <main>

0800221a <LoopForever>:
 800221a:	e7fe      	b.n	800221a <LoopForever>
 800221c:	20030000 	.word	0x20030000
 8002220:	20000008 	.word	0x20000008
 8002224:	2000008c 	.word	0x2000008c
 8002228:	08009f60 	.word	0x08009f60
 800222c:	200301e3 	.word	0x200301e3
 8002230:	200301e3 	.word	0x200301e3
 8002234:	0800a8ad 	.word	0x0800a8ad
 8002238:	2000095c 	.word	0x2000095c
 800223c:	20000d24 	.word	0x20000d24

08002240 <ADC1_IRQHandler>:
 8002240:	e7fe      	b.n	8002240 <ADC1_IRQHandler>
	...

08002244 <HAL_Init>:
 8002244:	b580      	push	{r7, lr}
 8002246:	b082      	sub	sp, #8
 8002248:	af00      	add	r7, sp, #0
 800224a:	2300      	movs	r3, #0
 800224c:	71fb      	strb	r3, [r7, #7]
 800224e:	4b0c      	ldr	r3, [pc, #48]	; (8002280 <HAL_Init+0x3c>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a0b      	ldr	r2, [pc, #44]	; (8002280 <HAL_Init+0x3c>)
 8002254:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002258:	6013      	str	r3, [r2, #0]
 800225a:	2003      	movs	r0, #3
 800225c:	f000 f9b4 	bl	80025c8 <HAL_NVIC_SetPriorityGrouping>
 8002260:	2000      	movs	r0, #0
 8002262:	f000 f80f 	bl	8002284 <HAL_InitTick>
 8002266:	4603      	mov	r3, r0
 8002268:	2b00      	cmp	r3, #0
 800226a:	d002      	beq.n	8002272 <HAL_Init+0x2e>
 800226c:	2301      	movs	r3, #1
 800226e:	71fb      	strb	r3, [r7, #7]
 8002270:	e001      	b.n	8002276 <HAL_Init+0x32>
 8002272:	f7ff fd6d 	bl	8001d50 <HAL_MspInit>
 8002276:	79fb      	ldrb	r3, [r7, #7]
 8002278:	4618      	mov	r0, r3
 800227a:	3708      	adds	r7, #8
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}
 8002280:	58004000 	.word	0x58004000

08002284 <HAL_InitTick>:
 8002284:	b580      	push	{r7, lr}
 8002286:	b084      	sub	sp, #16
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
 800228c:	2300      	movs	r3, #0
 800228e:	73fb      	strb	r3, [r7, #15]
 8002290:	4b17      	ldr	r3, [pc, #92]	; (80022f0 <HAL_InitTick+0x6c>)
 8002292:	781b      	ldrb	r3, [r3, #0]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d024      	beq.n	80022e2 <HAL_InitTick+0x5e>
 8002298:	f001 fe26 	bl	8003ee8 <HAL_RCC_GetHCLKFreq>
 800229c:	4602      	mov	r2, r0
 800229e:	4b14      	ldr	r3, [pc, #80]	; (80022f0 <HAL_InitTick+0x6c>)
 80022a0:	781b      	ldrb	r3, [r3, #0]
 80022a2:	4619      	mov	r1, r3
 80022a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022a8:	fbb3 f3f1 	udiv	r3, r3, r1
 80022ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80022b0:	4618      	mov	r0, r3
 80022b2:	f000 f9ca 	bl	800264a <HAL_SYSTICK_Config>
 80022b6:	4603      	mov	r3, r0
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d10f      	bne.n	80022dc <HAL_InitTick+0x58>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2b0f      	cmp	r3, #15
 80022c0:	d809      	bhi.n	80022d6 <HAL_InitTick+0x52>
 80022c2:	2200      	movs	r2, #0
 80022c4:	6879      	ldr	r1, [r7, #4]
 80022c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80022ca:	f000 f988 	bl	80025de <HAL_NVIC_SetPriority>
 80022ce:	4a09      	ldr	r2, [pc, #36]	; (80022f4 <HAL_InitTick+0x70>)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6013      	str	r3, [r2, #0]
 80022d4:	e007      	b.n	80022e6 <HAL_InitTick+0x62>
 80022d6:	2301      	movs	r3, #1
 80022d8:	73fb      	strb	r3, [r7, #15]
 80022da:	e004      	b.n	80022e6 <HAL_InitTick+0x62>
 80022dc:	2301      	movs	r3, #1
 80022de:	73fb      	strb	r3, [r7, #15]
 80022e0:	e001      	b.n	80022e6 <HAL_InitTick+0x62>
 80022e2:	2301      	movs	r3, #1
 80022e4:	73fb      	strb	r3, [r7, #15]
 80022e6:	7bfb      	ldrb	r3, [r7, #15]
 80022e8:	4618      	mov	r0, r3
 80022ea:	3710      	adds	r7, #16
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	20000010 	.word	0x20000010
 80022f4:	2000000c 	.word	0x2000000c

080022f8 <HAL_IncTick>:
 80022f8:	b480      	push	{r7}
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	4b06      	ldr	r3, [pc, #24]	; (8002318 <HAL_IncTick+0x20>)
 80022fe:	781b      	ldrb	r3, [r3, #0]
 8002300:	461a      	mov	r2, r3
 8002302:	4b06      	ldr	r3, [pc, #24]	; (800231c <HAL_IncTick+0x24>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4413      	add	r3, r2
 8002308:	4a04      	ldr	r2, [pc, #16]	; (800231c <HAL_IncTick+0x24>)
 800230a:	6013      	str	r3, [r2, #0]
 800230c:	bf00      	nop
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr
 8002316:	bf00      	nop
 8002318:	20000010 	.word	0x20000010
 800231c:	20000b64 	.word	0x20000b64

08002320 <HAL_GetTick>:
 8002320:	b480      	push	{r7}
 8002322:	af00      	add	r7, sp, #0
 8002324:	4b03      	ldr	r3, [pc, #12]	; (8002334 <HAL_GetTick+0x14>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4618      	mov	r0, r3
 800232a:	46bd      	mov	sp, r7
 800232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002330:	4770      	bx	lr
 8002332:	bf00      	nop
 8002334:	20000b64 	.word	0x20000b64

08002338 <HAL_GetTickPrio>:
 8002338:	b480      	push	{r7}
 800233a:	af00      	add	r7, sp, #0
 800233c:	4b03      	ldr	r3, [pc, #12]	; (800234c <HAL_GetTickPrio+0x14>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4618      	mov	r0, r3
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr
 800234a:	bf00      	nop
 800234c:	2000000c 	.word	0x2000000c

08002350 <HAL_GetTickFreq>:
 8002350:	b480      	push	{r7}
 8002352:	af00      	add	r7, sp, #0
 8002354:	4b03      	ldr	r3, [pc, #12]	; (8002364 <HAL_GetTickFreq+0x14>)
 8002356:	781b      	ldrb	r3, [r3, #0]
 8002358:	4618      	mov	r0, r3
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr
 8002362:	bf00      	nop
 8002364:	20000010 	.word	0x20000010

08002368 <__NVIC_SetPriorityGrouping>:
 8002368:	b480      	push	{r7}
 800236a:	b085      	sub	sp, #20
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	f003 0307 	and.w	r3, r3, #7
 8002376:	60fb      	str	r3, [r7, #12]
 8002378:	4b0c      	ldr	r3, [pc, #48]	; (80023ac <__NVIC_SetPriorityGrouping+0x44>)
 800237a:	68db      	ldr	r3, [r3, #12]
 800237c:	60bb      	str	r3, [r7, #8]
 800237e:	68ba      	ldr	r2, [r7, #8]
 8002380:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002384:	4013      	ands	r3, r2
 8002386:	60bb      	str	r3, [r7, #8]
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	021a      	lsls	r2, r3, #8
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	4313      	orrs	r3, r2
 8002390:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002394:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002398:	60bb      	str	r3, [r7, #8]
 800239a:	4a04      	ldr	r2, [pc, #16]	; (80023ac <__NVIC_SetPriorityGrouping+0x44>)
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	60d3      	str	r3, [r2, #12]
 80023a0:	bf00      	nop
 80023a2:	3714      	adds	r7, #20
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr
 80023ac:	e000ed00 	.word	0xe000ed00

080023b0 <__NVIC_GetPriorityGrouping>:
 80023b0:	b480      	push	{r7}
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	4b04      	ldr	r3, [pc, #16]	; (80023c8 <__NVIC_GetPriorityGrouping+0x18>)
 80023b6:	68db      	ldr	r3, [r3, #12]
 80023b8:	0a1b      	lsrs	r3, r3, #8
 80023ba:	f003 0307 	and.w	r3, r3, #7
 80023be:	4618      	mov	r0, r3
 80023c0:	46bd      	mov	sp, r7
 80023c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c6:	4770      	bx	lr
 80023c8:	e000ed00 	.word	0xe000ed00

080023cc <__NVIC_EnableIRQ>:
 80023cc:	b480      	push	{r7}
 80023ce:	b083      	sub	sp, #12
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	4603      	mov	r3, r0
 80023d4:	71fb      	strb	r3, [r7, #7]
 80023d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	db0b      	blt.n	80023f6 <__NVIC_EnableIRQ+0x2a>
 80023de:	79fb      	ldrb	r3, [r7, #7]
 80023e0:	f003 021f 	and.w	r2, r3, #31
 80023e4:	4907      	ldr	r1, [pc, #28]	; (8002404 <__NVIC_EnableIRQ+0x38>)
 80023e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ea:	095b      	lsrs	r3, r3, #5
 80023ec:	2001      	movs	r0, #1
 80023ee:	fa00 f202 	lsl.w	r2, r0, r2
 80023f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80023f6:	bf00      	nop
 80023f8:	370c      	adds	r7, #12
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr
 8002402:	bf00      	nop
 8002404:	e000e100 	.word	0xe000e100

08002408 <__NVIC_DisableIRQ>:
 8002408:	b480      	push	{r7}
 800240a:	b083      	sub	sp, #12
 800240c:	af00      	add	r7, sp, #0
 800240e:	4603      	mov	r3, r0
 8002410:	71fb      	strb	r3, [r7, #7]
 8002412:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002416:	2b00      	cmp	r3, #0
 8002418:	db12      	blt.n	8002440 <__NVIC_DisableIRQ+0x38>
 800241a:	79fb      	ldrb	r3, [r7, #7]
 800241c:	f003 021f 	and.w	r2, r3, #31
 8002420:	490a      	ldr	r1, [pc, #40]	; (800244c <__NVIC_DisableIRQ+0x44>)
 8002422:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002426:	095b      	lsrs	r3, r3, #5
 8002428:	2001      	movs	r0, #1
 800242a:	fa00 f202 	lsl.w	r2, r0, r2
 800242e:	3320      	adds	r3, #32
 8002430:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8002434:	f3bf 8f4f 	dsb	sy
 8002438:	bf00      	nop
 800243a:	f3bf 8f6f 	isb	sy
 800243e:	bf00      	nop
 8002440:	bf00      	nop
 8002442:	370c      	adds	r7, #12
 8002444:	46bd      	mov	sp, r7
 8002446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244a:	4770      	bx	lr
 800244c:	e000e100 	.word	0xe000e100

08002450 <__NVIC_SetPendingIRQ>:
 8002450:	b480      	push	{r7}
 8002452:	b083      	sub	sp, #12
 8002454:	af00      	add	r7, sp, #0
 8002456:	4603      	mov	r3, r0
 8002458:	71fb      	strb	r3, [r7, #7]
 800245a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800245e:	2b00      	cmp	r3, #0
 8002460:	db0c      	blt.n	800247c <__NVIC_SetPendingIRQ+0x2c>
 8002462:	79fb      	ldrb	r3, [r7, #7]
 8002464:	f003 021f 	and.w	r2, r3, #31
 8002468:	4907      	ldr	r1, [pc, #28]	; (8002488 <__NVIC_SetPendingIRQ+0x38>)
 800246a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800246e:	095b      	lsrs	r3, r3, #5
 8002470:	2001      	movs	r0, #1
 8002472:	fa00 f202 	lsl.w	r2, r0, r2
 8002476:	3340      	adds	r3, #64	; 0x40
 8002478:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800247c:	bf00      	nop
 800247e:	370c      	adds	r7, #12
 8002480:	46bd      	mov	sp, r7
 8002482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002486:	4770      	bx	lr
 8002488:	e000e100 	.word	0xe000e100

0800248c <__NVIC_ClearPendingIRQ>:
 800248c:	b480      	push	{r7}
 800248e:	b083      	sub	sp, #12
 8002490:	af00      	add	r7, sp, #0
 8002492:	4603      	mov	r3, r0
 8002494:	71fb      	strb	r3, [r7, #7]
 8002496:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800249a:	2b00      	cmp	r3, #0
 800249c:	db0c      	blt.n	80024b8 <__NVIC_ClearPendingIRQ+0x2c>
 800249e:	79fb      	ldrb	r3, [r7, #7]
 80024a0:	f003 021f 	and.w	r2, r3, #31
 80024a4:	4907      	ldr	r1, [pc, #28]	; (80024c4 <__NVIC_ClearPendingIRQ+0x38>)
 80024a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024aa:	095b      	lsrs	r3, r3, #5
 80024ac:	2001      	movs	r0, #1
 80024ae:	fa00 f202 	lsl.w	r2, r0, r2
 80024b2:	3360      	adds	r3, #96	; 0x60
 80024b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80024b8:	bf00      	nop
 80024ba:	370c      	adds	r7, #12
 80024bc:	46bd      	mov	sp, r7
 80024be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c2:	4770      	bx	lr
 80024c4:	e000e100 	.word	0xe000e100

080024c8 <__NVIC_SetPriority>:
 80024c8:	b480      	push	{r7}
 80024ca:	b083      	sub	sp, #12
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	4603      	mov	r3, r0
 80024d0:	6039      	str	r1, [r7, #0]
 80024d2:	71fb      	strb	r3, [r7, #7]
 80024d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	db0a      	blt.n	80024f2 <__NVIC_SetPriority+0x2a>
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	b2da      	uxtb	r2, r3
 80024e0:	490c      	ldr	r1, [pc, #48]	; (8002514 <__NVIC_SetPriority+0x4c>)
 80024e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024e6:	0112      	lsls	r2, r2, #4
 80024e8:	b2d2      	uxtb	r2, r2
 80024ea:	440b      	add	r3, r1
 80024ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 80024f0:	e00a      	b.n	8002508 <__NVIC_SetPriority+0x40>
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	b2da      	uxtb	r2, r3
 80024f6:	4908      	ldr	r1, [pc, #32]	; (8002518 <__NVIC_SetPriority+0x50>)
 80024f8:	79fb      	ldrb	r3, [r7, #7]
 80024fa:	f003 030f 	and.w	r3, r3, #15
 80024fe:	3b04      	subs	r3, #4
 8002500:	0112      	lsls	r2, r2, #4
 8002502:	b2d2      	uxtb	r2, r2
 8002504:	440b      	add	r3, r1
 8002506:	761a      	strb	r2, [r3, #24]
 8002508:	bf00      	nop
 800250a:	370c      	adds	r7, #12
 800250c:	46bd      	mov	sp, r7
 800250e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002512:	4770      	bx	lr
 8002514:	e000e100 	.word	0xe000e100
 8002518:	e000ed00 	.word	0xe000ed00

0800251c <NVIC_EncodePriority>:
 800251c:	b480      	push	{r7}
 800251e:	b089      	sub	sp, #36	; 0x24
 8002520:	af00      	add	r7, sp, #0
 8002522:	60f8      	str	r0, [r7, #12]
 8002524:	60b9      	str	r1, [r7, #8]
 8002526:	607a      	str	r2, [r7, #4]
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	f003 0307 	and.w	r3, r3, #7
 800252e:	61fb      	str	r3, [r7, #28]
 8002530:	69fb      	ldr	r3, [r7, #28]
 8002532:	f1c3 0307 	rsb	r3, r3, #7
 8002536:	2b04      	cmp	r3, #4
 8002538:	bf28      	it	cs
 800253a:	2304      	movcs	r3, #4
 800253c:	61bb      	str	r3, [r7, #24]
 800253e:	69fb      	ldr	r3, [r7, #28]
 8002540:	3304      	adds	r3, #4
 8002542:	2b06      	cmp	r3, #6
 8002544:	d902      	bls.n	800254c <NVIC_EncodePriority+0x30>
 8002546:	69fb      	ldr	r3, [r7, #28]
 8002548:	3b03      	subs	r3, #3
 800254a:	e000      	b.n	800254e <NVIC_EncodePriority+0x32>
 800254c:	2300      	movs	r3, #0
 800254e:	617b      	str	r3, [r7, #20]
 8002550:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002554:	69bb      	ldr	r3, [r7, #24]
 8002556:	fa02 f303 	lsl.w	r3, r2, r3
 800255a:	43da      	mvns	r2, r3
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	401a      	ands	r2, r3
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	409a      	lsls	r2, r3
 8002564:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	fa01 f303 	lsl.w	r3, r1, r3
 800256e:	43d9      	mvns	r1, r3
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	400b      	ands	r3, r1
 8002574:	4313      	orrs	r3, r2
 8002576:	4618      	mov	r0, r3
 8002578:	3724      	adds	r7, #36	; 0x24
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr
	...

08002584 <SysTick_Config>:
 8002584:	b580      	push	{r7, lr}
 8002586:	b082      	sub	sp, #8
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	3b01      	subs	r3, #1
 8002590:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002594:	d301      	bcc.n	800259a <SysTick_Config+0x16>
 8002596:	2301      	movs	r3, #1
 8002598:	e00f      	b.n	80025ba <SysTick_Config+0x36>
 800259a:	4a0a      	ldr	r2, [pc, #40]	; (80025c4 <SysTick_Config+0x40>)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	3b01      	subs	r3, #1
 80025a0:	6053      	str	r3, [r2, #4]
 80025a2:	210f      	movs	r1, #15
 80025a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80025a8:	f7ff ff8e 	bl	80024c8 <__NVIC_SetPriority>
 80025ac:	4b05      	ldr	r3, [pc, #20]	; (80025c4 <SysTick_Config+0x40>)
 80025ae:	2200      	movs	r2, #0
 80025b0:	609a      	str	r2, [r3, #8]
 80025b2:	4b04      	ldr	r3, [pc, #16]	; (80025c4 <SysTick_Config+0x40>)
 80025b4:	2207      	movs	r2, #7
 80025b6:	601a      	str	r2, [r3, #0]
 80025b8:	2300      	movs	r3, #0
 80025ba:	4618      	mov	r0, r3
 80025bc:	3708      	adds	r7, #8
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	e000e010 	.word	0xe000e010

080025c8 <HAL_NVIC_SetPriorityGrouping>:
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b082      	sub	sp, #8
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
 80025d0:	6878      	ldr	r0, [r7, #4]
 80025d2:	f7ff fec9 	bl	8002368 <__NVIC_SetPriorityGrouping>
 80025d6:	bf00      	nop
 80025d8:	3708      	adds	r7, #8
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}

080025de <HAL_NVIC_SetPriority>:
 80025de:	b580      	push	{r7, lr}
 80025e0:	b086      	sub	sp, #24
 80025e2:	af00      	add	r7, sp, #0
 80025e4:	4603      	mov	r3, r0
 80025e6:	60b9      	str	r1, [r7, #8]
 80025e8:	607a      	str	r2, [r7, #4]
 80025ea:	73fb      	strb	r3, [r7, #15]
 80025ec:	f7ff fee0 	bl	80023b0 <__NVIC_GetPriorityGrouping>
 80025f0:	6178      	str	r0, [r7, #20]
 80025f2:	687a      	ldr	r2, [r7, #4]
 80025f4:	68b9      	ldr	r1, [r7, #8]
 80025f6:	6978      	ldr	r0, [r7, #20]
 80025f8:	f7ff ff90 	bl	800251c <NVIC_EncodePriority>
 80025fc:	4602      	mov	r2, r0
 80025fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002602:	4611      	mov	r1, r2
 8002604:	4618      	mov	r0, r3
 8002606:	f7ff ff5f 	bl	80024c8 <__NVIC_SetPriority>
 800260a:	bf00      	nop
 800260c:	3718      	adds	r7, #24
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}

08002612 <HAL_NVIC_EnableIRQ>:
 8002612:	b580      	push	{r7, lr}
 8002614:	b082      	sub	sp, #8
 8002616:	af00      	add	r7, sp, #0
 8002618:	4603      	mov	r3, r0
 800261a:	71fb      	strb	r3, [r7, #7]
 800261c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002620:	4618      	mov	r0, r3
 8002622:	f7ff fed3 	bl	80023cc <__NVIC_EnableIRQ>
 8002626:	bf00      	nop
 8002628:	3708      	adds	r7, #8
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}

0800262e <HAL_NVIC_DisableIRQ>:
 800262e:	b580      	push	{r7, lr}
 8002630:	b082      	sub	sp, #8
 8002632:	af00      	add	r7, sp, #0
 8002634:	4603      	mov	r3, r0
 8002636:	71fb      	strb	r3, [r7, #7]
 8002638:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800263c:	4618      	mov	r0, r3
 800263e:	f7ff fee3 	bl	8002408 <__NVIC_DisableIRQ>
 8002642:	bf00      	nop
 8002644:	3708      	adds	r7, #8
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}

0800264a <HAL_SYSTICK_Config>:
 800264a:	b580      	push	{r7, lr}
 800264c:	b082      	sub	sp, #8
 800264e:	af00      	add	r7, sp, #0
 8002650:	6078      	str	r0, [r7, #4]
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	f7ff ff96 	bl	8002584 <SysTick_Config>
 8002658:	4603      	mov	r3, r0
 800265a:	4618      	mov	r0, r3
 800265c:	3708      	adds	r7, #8
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}

08002662 <HAL_NVIC_SetPendingIRQ>:
 8002662:	b580      	push	{r7, lr}
 8002664:	b082      	sub	sp, #8
 8002666:	af00      	add	r7, sp, #0
 8002668:	4603      	mov	r3, r0
 800266a:	71fb      	strb	r3, [r7, #7]
 800266c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002670:	4618      	mov	r0, r3
 8002672:	f7ff feed 	bl	8002450 <__NVIC_SetPendingIRQ>
 8002676:	bf00      	nop
 8002678:	3708      	adds	r7, #8
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}

0800267e <HAL_NVIC_ClearPendingIRQ>:
 800267e:	b580      	push	{r7, lr}
 8002680:	b082      	sub	sp, #8
 8002682:	af00      	add	r7, sp, #0
 8002684:	4603      	mov	r3, r0
 8002686:	71fb      	strb	r3, [r7, #7]
 8002688:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800268c:	4618      	mov	r0, r3
 800268e:	f7ff fefd 	bl	800248c <__NVIC_ClearPendingIRQ>
 8002692:	bf00      	nop
 8002694:	3708      	adds	r7, #8
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}
	...

0800269c <HAL_GPIO_Init>:
 800269c:	b480      	push	{r7}
 800269e:	b087      	sub	sp, #28
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
 80026a4:	6039      	str	r1, [r7, #0]
 80026a6:	2300      	movs	r3, #0
 80026a8:	617b      	str	r3, [r7, #20]
 80026aa:	e14c      	b.n	8002946 <HAL_GPIO_Init+0x2aa>
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	681a      	ldr	r2, [r3, #0]
 80026b0:	2101      	movs	r1, #1
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	fa01 f303 	lsl.w	r3, r1, r3
 80026b8:	4013      	ands	r3, r2
 80026ba:	60fb      	str	r3, [r7, #12]
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	f000 813e 	beq.w	8002940 <HAL_GPIO_Init+0x2a4>
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	f003 0303 	and.w	r3, r3, #3
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	d005      	beq.n	80026dc <HAL_GPIO_Init+0x40>
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	f003 0303 	and.w	r3, r3, #3
 80026d8:	2b02      	cmp	r3, #2
 80026da:	d130      	bne.n	800273e <HAL_GPIO_Init+0xa2>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	613b      	str	r3, [r7, #16]
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	005b      	lsls	r3, r3, #1
 80026e6:	2203      	movs	r2, #3
 80026e8:	fa02 f303 	lsl.w	r3, r2, r3
 80026ec:	43db      	mvns	r3, r3
 80026ee:	693a      	ldr	r2, [r7, #16]
 80026f0:	4013      	ands	r3, r2
 80026f2:	613b      	str	r3, [r7, #16]
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	68da      	ldr	r2, [r3, #12]
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	005b      	lsls	r3, r3, #1
 80026fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002700:	693a      	ldr	r2, [r7, #16]
 8002702:	4313      	orrs	r3, r2
 8002704:	613b      	str	r3, [r7, #16]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	693a      	ldr	r2, [r7, #16]
 800270a:	609a      	str	r2, [r3, #8]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	613b      	str	r3, [r7, #16]
 8002712:	2201      	movs	r2, #1
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	fa02 f303 	lsl.w	r3, r2, r3
 800271a:	43db      	mvns	r3, r3
 800271c:	693a      	ldr	r2, [r7, #16]
 800271e:	4013      	ands	r3, r2
 8002720:	613b      	str	r3, [r7, #16]
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	091b      	lsrs	r3, r3, #4
 8002728:	f003 0201 	and.w	r2, r3, #1
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	fa02 f303 	lsl.w	r3, r2, r3
 8002732:	693a      	ldr	r2, [r7, #16]
 8002734:	4313      	orrs	r3, r2
 8002736:	613b      	str	r3, [r7, #16]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	693a      	ldr	r2, [r7, #16]
 800273c:	605a      	str	r2, [r3, #4]
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	f003 0303 	and.w	r3, r3, #3
 8002746:	2b03      	cmp	r3, #3
 8002748:	d017      	beq.n	800277a <HAL_GPIO_Init+0xde>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	68db      	ldr	r3, [r3, #12]
 800274e:	613b      	str	r3, [r7, #16]
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	005b      	lsls	r3, r3, #1
 8002754:	2203      	movs	r2, #3
 8002756:	fa02 f303 	lsl.w	r3, r2, r3
 800275a:	43db      	mvns	r3, r3
 800275c:	693a      	ldr	r2, [r7, #16]
 800275e:	4013      	ands	r3, r2
 8002760:	613b      	str	r3, [r7, #16]
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	689a      	ldr	r2, [r3, #8]
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	005b      	lsls	r3, r3, #1
 800276a:	fa02 f303 	lsl.w	r3, r2, r3
 800276e:	693a      	ldr	r2, [r7, #16]
 8002770:	4313      	orrs	r3, r2
 8002772:	613b      	str	r3, [r7, #16]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	693a      	ldr	r2, [r7, #16]
 8002778:	60da      	str	r2, [r3, #12]
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	f003 0303 	and.w	r3, r3, #3
 8002782:	2b02      	cmp	r3, #2
 8002784:	d123      	bne.n	80027ce <HAL_GPIO_Init+0x132>
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	08da      	lsrs	r2, r3, #3
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	3208      	adds	r2, #8
 800278e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002792:	613b      	str	r3, [r7, #16]
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	f003 0307 	and.w	r3, r3, #7
 800279a:	009b      	lsls	r3, r3, #2
 800279c:	220f      	movs	r2, #15
 800279e:	fa02 f303 	lsl.w	r3, r2, r3
 80027a2:	43db      	mvns	r3, r3
 80027a4:	693a      	ldr	r2, [r7, #16]
 80027a6:	4013      	ands	r3, r2
 80027a8:	613b      	str	r3, [r7, #16]
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	691a      	ldr	r2, [r3, #16]
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	f003 0307 	and.w	r3, r3, #7
 80027b4:	009b      	lsls	r3, r3, #2
 80027b6:	fa02 f303 	lsl.w	r3, r2, r3
 80027ba:	693a      	ldr	r2, [r7, #16]
 80027bc:	4313      	orrs	r3, r2
 80027be:	613b      	str	r3, [r7, #16]
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	08da      	lsrs	r2, r3, #3
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	3208      	adds	r2, #8
 80027c8:	6939      	ldr	r1, [r7, #16]
 80027ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	613b      	str	r3, [r7, #16]
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	005b      	lsls	r3, r3, #1
 80027d8:	2203      	movs	r2, #3
 80027da:	fa02 f303 	lsl.w	r3, r2, r3
 80027de:	43db      	mvns	r3, r3
 80027e0:	693a      	ldr	r2, [r7, #16]
 80027e2:	4013      	ands	r3, r2
 80027e4:	613b      	str	r3, [r7, #16]
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	f003 0203 	and.w	r2, r3, #3
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	005b      	lsls	r3, r3, #1
 80027f2:	fa02 f303 	lsl.w	r3, r2, r3
 80027f6:	693a      	ldr	r2, [r7, #16]
 80027f8:	4313      	orrs	r3, r2
 80027fa:	613b      	str	r3, [r7, #16]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	693a      	ldr	r2, [r7, #16]
 8002800:	601a      	str	r2, [r3, #0]
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800280a:	2b00      	cmp	r3, #0
 800280c:	f000 8098 	beq.w	8002940 <HAL_GPIO_Init+0x2a4>
 8002810:	4a54      	ldr	r2, [pc, #336]	; (8002964 <HAL_GPIO_Init+0x2c8>)
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	089b      	lsrs	r3, r3, #2
 8002816:	3302      	adds	r3, #2
 8002818:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800281c:	613b      	str	r3, [r7, #16]
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	f003 0303 	and.w	r3, r3, #3
 8002824:	009b      	lsls	r3, r3, #2
 8002826:	220f      	movs	r2, #15
 8002828:	fa02 f303 	lsl.w	r3, r2, r3
 800282c:	43db      	mvns	r3, r3
 800282e:	693a      	ldr	r2, [r7, #16]
 8002830:	4013      	ands	r3, r2
 8002832:	613b      	str	r3, [r7, #16]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800283a:	d019      	beq.n	8002870 <HAL_GPIO_Init+0x1d4>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	4a4a      	ldr	r2, [pc, #296]	; (8002968 <HAL_GPIO_Init+0x2cc>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d013      	beq.n	800286c <HAL_GPIO_Init+0x1d0>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	4a49      	ldr	r2, [pc, #292]	; (800296c <HAL_GPIO_Init+0x2d0>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d00d      	beq.n	8002868 <HAL_GPIO_Init+0x1cc>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	4a48      	ldr	r2, [pc, #288]	; (8002970 <HAL_GPIO_Init+0x2d4>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d007      	beq.n	8002864 <HAL_GPIO_Init+0x1c8>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	4a47      	ldr	r2, [pc, #284]	; (8002974 <HAL_GPIO_Init+0x2d8>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d101      	bne.n	8002860 <HAL_GPIO_Init+0x1c4>
 800285c:	2304      	movs	r3, #4
 800285e:	e008      	b.n	8002872 <HAL_GPIO_Init+0x1d6>
 8002860:	2307      	movs	r3, #7
 8002862:	e006      	b.n	8002872 <HAL_GPIO_Init+0x1d6>
 8002864:	2303      	movs	r3, #3
 8002866:	e004      	b.n	8002872 <HAL_GPIO_Init+0x1d6>
 8002868:	2302      	movs	r3, #2
 800286a:	e002      	b.n	8002872 <HAL_GPIO_Init+0x1d6>
 800286c:	2301      	movs	r3, #1
 800286e:	e000      	b.n	8002872 <HAL_GPIO_Init+0x1d6>
 8002870:	2300      	movs	r3, #0
 8002872:	697a      	ldr	r2, [r7, #20]
 8002874:	f002 0203 	and.w	r2, r2, #3
 8002878:	0092      	lsls	r2, r2, #2
 800287a:	4093      	lsls	r3, r2
 800287c:	693a      	ldr	r2, [r7, #16]
 800287e:	4313      	orrs	r3, r2
 8002880:	613b      	str	r3, [r7, #16]
 8002882:	4938      	ldr	r1, [pc, #224]	; (8002964 <HAL_GPIO_Init+0x2c8>)
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	089b      	lsrs	r3, r3, #2
 8002888:	3302      	adds	r3, #2
 800288a:	693a      	ldr	r2, [r7, #16]
 800288c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8002890:	4b39      	ldr	r3, [pc, #228]	; (8002978 <HAL_GPIO_Init+0x2dc>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	613b      	str	r3, [r7, #16]
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	43db      	mvns	r3, r3
 800289a:	693a      	ldr	r2, [r7, #16]
 800289c:	4013      	ands	r3, r2
 800289e:	613b      	str	r3, [r7, #16]
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d003      	beq.n	80028b4 <HAL_GPIO_Init+0x218>
 80028ac:	693a      	ldr	r2, [r7, #16]
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	4313      	orrs	r3, r2
 80028b2:	613b      	str	r3, [r7, #16]
 80028b4:	4a30      	ldr	r2, [pc, #192]	; (8002978 <HAL_GPIO_Init+0x2dc>)
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	6013      	str	r3, [r2, #0]
 80028ba:	4b2f      	ldr	r3, [pc, #188]	; (8002978 <HAL_GPIO_Init+0x2dc>)
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	613b      	str	r3, [r7, #16]
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	43db      	mvns	r3, r3
 80028c4:	693a      	ldr	r2, [r7, #16]
 80028c6:	4013      	ands	r3, r2
 80028c8:	613b      	str	r3, [r7, #16]
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d003      	beq.n	80028de <HAL_GPIO_Init+0x242>
 80028d6:	693a      	ldr	r2, [r7, #16]
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	4313      	orrs	r3, r2
 80028dc:	613b      	str	r3, [r7, #16]
 80028de:	4a26      	ldr	r2, [pc, #152]	; (8002978 <HAL_GPIO_Init+0x2dc>)
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	6053      	str	r3, [r2, #4]
 80028e4:	4b24      	ldr	r3, [pc, #144]	; (8002978 <HAL_GPIO_Init+0x2dc>)
 80028e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80028ea:	613b      	str	r3, [r7, #16]
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	43db      	mvns	r3, r3
 80028f0:	693a      	ldr	r2, [r7, #16]
 80028f2:	4013      	ands	r3, r2
 80028f4:	613b      	str	r3, [r7, #16]
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d003      	beq.n	800290a <HAL_GPIO_Init+0x26e>
 8002902:	693a      	ldr	r2, [r7, #16]
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	4313      	orrs	r3, r2
 8002908:	613b      	str	r3, [r7, #16]
 800290a:	4a1b      	ldr	r2, [pc, #108]	; (8002978 <HAL_GPIO_Init+0x2dc>)
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002912:	4b19      	ldr	r3, [pc, #100]	; (8002978 <HAL_GPIO_Init+0x2dc>)
 8002914:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002918:	613b      	str	r3, [r7, #16]
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	43db      	mvns	r3, r3
 800291e:	693a      	ldr	r2, [r7, #16]
 8002920:	4013      	ands	r3, r2
 8002922:	613b      	str	r3, [r7, #16]
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800292c:	2b00      	cmp	r3, #0
 800292e:	d003      	beq.n	8002938 <HAL_GPIO_Init+0x29c>
 8002930:	693a      	ldr	r2, [r7, #16]
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	4313      	orrs	r3, r2
 8002936:	613b      	str	r3, [r7, #16]
 8002938:	4a0f      	ldr	r2, [pc, #60]	; (8002978 <HAL_GPIO_Init+0x2dc>)
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	3301      	adds	r3, #1
 8002944:	617b      	str	r3, [r7, #20]
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	fa22 f303 	lsr.w	r3, r2, r3
 8002950:	2b00      	cmp	r3, #0
 8002952:	f47f aeab 	bne.w	80026ac <HAL_GPIO_Init+0x10>
 8002956:	bf00      	nop
 8002958:	bf00      	nop
 800295a:	371c      	adds	r7, #28
 800295c:	46bd      	mov	sp, r7
 800295e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002962:	4770      	bx	lr
 8002964:	40010000 	.word	0x40010000
 8002968:	48000400 	.word	0x48000400
 800296c:	48000800 	.word	0x48000800
 8002970:	48000c00 	.word	0x48000c00
 8002974:	48001000 	.word	0x48001000
 8002978:	58000800 	.word	0x58000800

0800297c <HAL_GPIO_WritePin>:
 800297c:	b480      	push	{r7}
 800297e:	b083      	sub	sp, #12
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
 8002984:	460b      	mov	r3, r1
 8002986:	807b      	strh	r3, [r7, #2]
 8002988:	4613      	mov	r3, r2
 800298a:	707b      	strb	r3, [r7, #1]
 800298c:	787b      	ldrb	r3, [r7, #1]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d003      	beq.n	800299a <HAL_GPIO_WritePin+0x1e>
 8002992:	887a      	ldrh	r2, [r7, #2]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	619a      	str	r2, [r3, #24]
 8002998:	e002      	b.n	80029a0 <HAL_GPIO_WritePin+0x24>
 800299a:	887a      	ldrh	r2, [r7, #2]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	629a      	str	r2, [r3, #40]	; 0x28
 80029a0:	bf00      	nop
 80029a2:	370c      	adds	r7, #12
 80029a4:	46bd      	mov	sp, r7
 80029a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029aa:	4770      	bx	lr

080029ac <HAL_HSEM_IRQHandler>:
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b082      	sub	sp, #8
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	4b0a      	ldr	r3, [pc, #40]	; (80029dc <HAL_HSEM_IRQHandler+0x30>)
 80029b4:	68db      	ldr	r3, [r3, #12]
 80029b6:	607b      	str	r3, [r7, #4]
 80029b8:	4b08      	ldr	r3, [pc, #32]	; (80029dc <HAL_HSEM_IRQHandler+0x30>)
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	43db      	mvns	r3, r3
 80029c0:	4906      	ldr	r1, [pc, #24]	; (80029dc <HAL_HSEM_IRQHandler+0x30>)
 80029c2:	4013      	ands	r3, r2
 80029c4:	600b      	str	r3, [r1, #0]
 80029c6:	4a05      	ldr	r2, [pc, #20]	; (80029dc <HAL_HSEM_IRQHandler+0x30>)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6053      	str	r3, [r2, #4]
 80029cc:	6878      	ldr	r0, [r7, #4]
 80029ce:	f000 f807 	bl	80029e0 <HAL_HSEM_FreeCallback>
 80029d2:	bf00      	nop
 80029d4:	3708      	adds	r7, #8
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	bf00      	nop
 80029dc:	58001500 	.word	0x58001500

080029e0 <HAL_HSEM_FreeCallback>:
 80029e0:	b480      	push	{r7}
 80029e2:	b083      	sub	sp, #12
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
 80029e8:	bf00      	nop
 80029ea:	370c      	adds	r7, #12
 80029ec:	46bd      	mov	sp, r7
 80029ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f2:	4770      	bx	lr

080029f4 <HAL_I2C_Init>:
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b082      	sub	sp, #8
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d101      	bne.n	8002a06 <HAL_I2C_Init+0x12>
 8002a02:	2301      	movs	r3, #1
 8002a04:	e081      	b.n	8002b0a <HAL_I2C_Init+0x116>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d106      	bne.n	8002a20 <HAL_I2C_Init+0x2c>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2200      	movs	r2, #0
 8002a16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f7ff f9a8 	bl	8001d70 <HAL_I2C_MspInit>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2224      	movs	r2, #36	; 0x24
 8002a24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f022 0201 	bic.w	r2, r2, #1
 8002a36:	601a      	str	r2, [r3, #0]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	685a      	ldr	r2, [r3, #4]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002a44:	611a      	str	r2, [r3, #16]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	689a      	ldr	r2, [r3, #8]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002a54:	609a      	str	r2, [r3, #8]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	68db      	ldr	r3, [r3, #12]
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	d107      	bne.n	8002a6e <HAL_I2C_Init+0x7a>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	689a      	ldr	r2, [r3, #8]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a6a:	609a      	str	r2, [r3, #8]
 8002a6c:	e006      	b.n	8002a7c <HAL_I2C_Init+0x88>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	689a      	ldr	r2, [r3, #8]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002a7a:	609a      	str	r2, [r3, #8]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	68db      	ldr	r3, [r3, #12]
 8002a80:	2b02      	cmp	r3, #2
 8002a82:	d104      	bne.n	8002a8e <HAL_I2C_Init+0x9a>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002a8c:	605a      	str	r2, [r3, #4]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	687a      	ldr	r2, [r7, #4]
 8002a96:	6812      	ldr	r2, [r2, #0]
 8002a98:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002a9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002aa0:	6053      	str	r3, [r2, #4]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	68da      	ldr	r2, [r3, #12]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ab0:	60da      	str	r2, [r3, #12]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	691a      	ldr	r2, [r3, #16]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	695b      	ldr	r3, [r3, #20]
 8002aba:	ea42 0103 	orr.w	r1, r2, r3
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	699b      	ldr	r3, [r3, #24]
 8002ac2:	021a      	lsls	r2, r3, #8
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	430a      	orrs	r2, r1
 8002aca:	60da      	str	r2, [r3, #12]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	69d9      	ldr	r1, [r3, #28]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6a1a      	ldr	r2, [r3, #32]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	430a      	orrs	r2, r1
 8002ada:	601a      	str	r2, [r3, #0]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	681a      	ldr	r2, [r3, #0]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f042 0201 	orr.w	r2, r2, #1
 8002aea:	601a      	str	r2, [r3, #0]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2200      	movs	r2, #0
 8002af0:	645a      	str	r2, [r3, #68]	; 0x44
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2220      	movs	r2, #32
 8002af6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2200      	movs	r2, #0
 8002afe:	631a      	str	r2, [r3, #48]	; 0x30
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2200      	movs	r2, #0
 8002b04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b08:	2300      	movs	r3, #0
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	3708      	adds	r7, #8
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}

08002b12 <HAL_I2C_EV_IRQHandler>:
 8002b12:	b580      	push	{r7, lr}
 8002b14:	b084      	sub	sp, #16
 8002b16:	af00      	add	r7, sp, #0
 8002b18:	6078      	str	r0, [r7, #4]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	699b      	ldr	r3, [r3, #24]
 8002b20:	60fb      	str	r3, [r7, #12]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	60bb      	str	r3, [r7, #8]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d005      	beq.n	8002b3e <HAL_I2C_EV_IRQHandler+0x2c>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b36:	68ba      	ldr	r2, [r7, #8]
 8002b38:	68f9      	ldr	r1, [r7, #12]
 8002b3a:	6878      	ldr	r0, [r7, #4]
 8002b3c:	4798      	blx	r3
 8002b3e:	bf00      	nop
 8002b40:	3710      	adds	r7, #16
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}

08002b46 <HAL_I2CEx_ConfigAnalogFilter>:
 8002b46:	b480      	push	{r7}
 8002b48:	b083      	sub	sp, #12
 8002b4a:	af00      	add	r7, sp, #0
 8002b4c:	6078      	str	r0, [r7, #4]
 8002b4e:	6039      	str	r1, [r7, #0]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b56:	b2db      	uxtb	r3, r3
 8002b58:	2b20      	cmp	r3, #32
 8002b5a:	d138      	bne.n	8002bce <HAL_I2CEx_ConfigAnalogFilter+0x88>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b62:	2b01      	cmp	r3, #1
 8002b64:	d101      	bne.n	8002b6a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002b66:	2302      	movs	r3, #2
 8002b68:	e032      	b.n	8002bd0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2224      	movs	r2, #36	; 0x24
 8002b76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	681a      	ldr	r2, [r3, #0]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f022 0201 	bic.w	r2, r2, #1
 8002b88:	601a      	str	r2, [r3, #0]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	681a      	ldr	r2, [r3, #0]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002b98:	601a      	str	r2, [r3, #0]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	6819      	ldr	r1, [r3, #0]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	683a      	ldr	r2, [r7, #0]
 8002ba6:	430a      	orrs	r2, r1
 8002ba8:	601a      	str	r2, [r3, #0]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	681a      	ldr	r2, [r3, #0]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f042 0201 	orr.w	r2, r2, #1
 8002bb8:	601a      	str	r2, [r3, #0]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2220      	movs	r2, #32
 8002bbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002bca:	2300      	movs	r3, #0
 8002bcc:	e000      	b.n	8002bd0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002bce:	2302      	movs	r3, #2
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	370c      	adds	r7, #12
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bda:	4770      	bx	lr

08002bdc <HAL_I2CEx_ConfigDigitalFilter>:
 8002bdc:	b480      	push	{r7}
 8002bde:	b085      	sub	sp, #20
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
 8002be4:	6039      	str	r1, [r7, #0]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	2b20      	cmp	r3, #32
 8002bf0:	d139      	bne.n	8002c66 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002bf8:	2b01      	cmp	r3, #1
 8002bfa:	d101      	bne.n	8002c00 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002bfc:	2302      	movs	r3, #2
 8002bfe:	e033      	b.n	8002c68 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2201      	movs	r2, #1
 8002c04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2224      	movs	r2, #36	; 0x24
 8002c0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	681a      	ldr	r2, [r3, #0]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f022 0201 	bic.w	r2, r2, #1
 8002c1e:	601a      	str	r2, [r3, #0]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	60fb      	str	r3, [r7, #12]
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002c2e:	60fb      	str	r3, [r7, #12]
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	021b      	lsls	r3, r3, #8
 8002c34:	68fa      	ldr	r2, [r7, #12]
 8002c36:	4313      	orrs	r3, r2
 8002c38:	60fb      	str	r3, [r7, #12]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	68fa      	ldr	r2, [r7, #12]
 8002c40:	601a      	str	r2, [r3, #0]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	681a      	ldr	r2, [r3, #0]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f042 0201 	orr.w	r2, r2, #1
 8002c50:	601a      	str	r2, [r3, #0]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2220      	movs	r2, #32
 8002c56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c62:	2300      	movs	r3, #0
 8002c64:	e000      	b.n	8002c68 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002c66:	2302      	movs	r3, #2
 8002c68:	4618      	mov	r0, r3
 8002c6a:	3714      	adds	r7, #20
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c72:	4770      	bx	lr

08002c74 <HAL_IPCC_Init>:
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b084      	sub	sp, #16
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	73fb      	strb	r3, [r7, #15]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d01e      	beq.n	8002cc4 <HAL_IPCC_Init+0x50>
 8002c86:	4b13      	ldr	r3, [pc, #76]	; (8002cd4 <HAL_IPCC_Init+0x60>)
 8002c88:	60bb      	str	r3, [r7, #8]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d102      	bne.n	8002c9c <HAL_IPCC_Init+0x28>
 8002c96:	6878      	ldr	r0, [r7, #4]
 8002c98:	f7ff f8ba 	bl	8001e10 <HAL_IPCC_MspInit>
 8002c9c:	68b8      	ldr	r0, [r7, #8]
 8002c9e:	f000 f85b 	bl	8002d58 <IPCC_Reset_Register>
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	601a      	str	r2, [r3, #0]
 8002cae:	6878      	ldr	r0, [r7, #4]
 8002cb0:	f000 f82c 	bl	8002d0c <IPCC_SetDefaultCallbacks>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	635a      	str	r2, [r3, #52]	; 0x34
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2201      	movs	r2, #1
 8002cbe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8002cc2:	e001      	b.n	8002cc8 <HAL_IPCC_Init+0x54>
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	73fb      	strb	r3, [r7, #15]
 8002cc8:	7bfb      	ldrb	r3, [r7, #15]
 8002cca:	4618      	mov	r0, r3
 8002ccc:	3710      	adds	r7, #16
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}
 8002cd2:	bf00      	nop
 8002cd4:	58000c00 	.word	0x58000c00

08002cd8 <HAL_IPCC_RxCallback>:
 8002cd8:	b480      	push	{r7}
 8002cda:	b085      	sub	sp, #20
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	60f8      	str	r0, [r7, #12]
 8002ce0:	60b9      	str	r1, [r7, #8]
 8002ce2:	4613      	mov	r3, r2
 8002ce4:	71fb      	strb	r3, [r7, #7]
 8002ce6:	bf00      	nop
 8002ce8:	3714      	adds	r7, #20
 8002cea:	46bd      	mov	sp, r7
 8002cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf0:	4770      	bx	lr

08002cf2 <HAL_IPCC_TxCallback>:
 8002cf2:	b480      	push	{r7}
 8002cf4:	b085      	sub	sp, #20
 8002cf6:	af00      	add	r7, sp, #0
 8002cf8:	60f8      	str	r0, [r7, #12]
 8002cfa:	60b9      	str	r1, [r7, #8]
 8002cfc:	4613      	mov	r3, r2
 8002cfe:	71fb      	strb	r3, [r7, #7]
 8002d00:	bf00      	nop
 8002d02:	3714      	adds	r7, #20
 8002d04:	46bd      	mov	sp, r7
 8002d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0a:	4770      	bx	lr

08002d0c <IPCC_SetDefaultCallbacks>:
 8002d0c:	b480      	push	{r7}
 8002d0e:	b085      	sub	sp, #20
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
 8002d14:	2300      	movs	r3, #0
 8002d16:	60fb      	str	r3, [r7, #12]
 8002d18:	e00f      	b.n	8002d3a <IPCC_SetDefaultCallbacks+0x2e>
 8002d1a:	687a      	ldr	r2, [r7, #4]
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	009b      	lsls	r3, r3, #2
 8002d20:	4413      	add	r3, r2
 8002d22:	4a0b      	ldr	r2, [pc, #44]	; (8002d50 <IPCC_SetDefaultCallbacks+0x44>)
 8002d24:	605a      	str	r2, [r3, #4]
 8002d26:	687a      	ldr	r2, [r7, #4]
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	3306      	adds	r3, #6
 8002d2c:	009b      	lsls	r3, r3, #2
 8002d2e:	4413      	add	r3, r2
 8002d30:	4a08      	ldr	r2, [pc, #32]	; (8002d54 <IPCC_SetDefaultCallbacks+0x48>)
 8002d32:	605a      	str	r2, [r3, #4]
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	3301      	adds	r3, #1
 8002d38:	60fb      	str	r3, [r7, #12]
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	2b05      	cmp	r3, #5
 8002d3e:	d9ec      	bls.n	8002d1a <IPCC_SetDefaultCallbacks+0xe>
 8002d40:	bf00      	nop
 8002d42:	bf00      	nop
 8002d44:	3714      	adds	r7, #20
 8002d46:	46bd      	mov	sp, r7
 8002d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4c:	4770      	bx	lr
 8002d4e:	bf00      	nop
 8002d50:	08002cd9 	.word	0x08002cd9
 8002d54:	08002cf3 	.word	0x08002cf3

08002d58 <IPCC_Reset_Register>:
 8002d58:	b480      	push	{r7}
 8002d5a:	b083      	sub	sp, #12
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2200      	movs	r2, #0
 8002d64:	601a      	str	r2, [r3, #0]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
 8002d6c:	605a      	str	r2, [r3, #4]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	223f      	movs	r2, #63	; 0x3f
 8002d72:	609a      	str	r2, [r3, #8]
 8002d74:	bf00      	nop
 8002d76:	370c      	adds	r7, #12
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7e:	4770      	bx	lr

08002d80 <HAL_PWR_EnableBkUpAccess>:
 8002d80:	b480      	push	{r7}
 8002d82:	af00      	add	r7, sp, #0
 8002d84:	4b05      	ldr	r3, [pc, #20]	; (8002d9c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a04      	ldr	r2, [pc, #16]	; (8002d9c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002d8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d8e:	6013      	str	r3, [r2, #0]
 8002d90:	bf00      	nop
 8002d92:	46bd      	mov	sp, r7
 8002d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d98:	4770      	bx	lr
 8002d9a:	bf00      	nop
 8002d9c:	58000400 	.word	0x58000400

08002da0 <HAL_PWREx_GetVoltageRange>:
 8002da0:	b480      	push	{r7}
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	4b04      	ldr	r3, [pc, #16]	; (8002db8 <HAL_PWREx_GetVoltageRange+0x18>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002dac:	4618      	mov	r0, r3
 8002dae:	46bd      	mov	sp, r7
 8002db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db4:	4770      	bx	lr
 8002db6:	bf00      	nop
 8002db8:	58000400 	.word	0x58000400

08002dbc <LL_RCC_HSE_IsEnabledDiv2>:
 8002dbc:	b480      	push	{r7}
 8002dbe:	af00      	add	r7, sp, #0
 8002dc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002dca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002dce:	d101      	bne.n	8002dd4 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	e000      	b.n	8002dd6 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dde:	4770      	bx	lr

08002de0 <LL_RCC_HSE_Enable>:
 8002de0:	b480      	push	{r7}
 8002de2:	af00      	add	r7, sp, #0
 8002de4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002dee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002df2:	6013      	str	r3, [r2, #0]
 8002df4:	bf00      	nop
 8002df6:	46bd      	mov	sp, r7
 8002df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfc:	4770      	bx	lr

08002dfe <LL_RCC_HSE_Disable>:
 8002dfe:	b480      	push	{r7}
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e10:	6013      	str	r3, [r2, #0]
 8002e12:	bf00      	nop
 8002e14:	46bd      	mov	sp, r7
 8002e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1a:	4770      	bx	lr

08002e1c <LL_RCC_HSE_IsReady>:
 8002e1c:	b480      	push	{r7}
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e2a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002e2e:	d101      	bne.n	8002e34 <LL_RCC_HSE_IsReady+0x18>
 8002e30:	2301      	movs	r3, #1
 8002e32:	e000      	b.n	8002e36 <LL_RCC_HSE_IsReady+0x1a>
 8002e34:	2300      	movs	r3, #0
 8002e36:	4618      	mov	r0, r3
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3e:	4770      	bx	lr

08002e40 <LL_RCC_HSI_Enable>:
 8002e40:	b480      	push	{r7}
 8002e42:	af00      	add	r7, sp, #0
 8002e44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e52:	6013      	str	r3, [r2, #0]
 8002e54:	bf00      	nop
 8002e56:	46bd      	mov	sp, r7
 8002e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5c:	4770      	bx	lr

08002e5e <LL_RCC_HSI_Disable>:
 8002e5e:	b480      	push	{r7}
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e70:	6013      	str	r3, [r2, #0]
 8002e72:	bf00      	nop
 8002e74:	46bd      	mov	sp, r7
 8002e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7a:	4770      	bx	lr

08002e7c <LL_RCC_HSI_IsReady>:
 8002e7c:	b480      	push	{r7}
 8002e7e:	af00      	add	r7, sp, #0
 8002e80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e8e:	d101      	bne.n	8002e94 <LL_RCC_HSI_IsReady+0x18>
 8002e90:	2301      	movs	r3, #1
 8002e92:	e000      	b.n	8002e96 <LL_RCC_HSI_IsReady+0x1a>
 8002e94:	2300      	movs	r3, #0
 8002e96:	4618      	mov	r0, r3
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9e:	4770      	bx	lr

08002ea0 <LL_RCC_HSI_SetCalibTrimming>:
 8002ea0:	b480      	push	{r7}
 8002ea2:	b083      	sub	sp, #12
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
 8002ea8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	061b      	lsls	r3, r3, #24
 8002eb6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	604b      	str	r3, [r1, #4]
 8002ebe:	bf00      	nop
 8002ec0:	370c      	adds	r7, #12
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec8:	4770      	bx	lr

08002eca <LL_RCC_HSI48_Enable>:
 8002eca:	b480      	push	{r7}
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ed2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002ed6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002eda:	f043 0301 	orr.w	r3, r3, #1
 8002ede:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
 8002ee2:	bf00      	nop
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eea:	4770      	bx	lr

08002eec <LL_RCC_HSI48_Disable>:
 8002eec:	b480      	push	{r7}
 8002eee:	af00      	add	r7, sp, #0
 8002ef0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ef4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002ef8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002efc:	f023 0301 	bic.w	r3, r3, #1
 8002f00:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
 8002f04:	bf00      	nop
 8002f06:	46bd      	mov	sp, r7
 8002f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0c:	4770      	bx	lr

08002f0e <LL_RCC_HSI48_IsReady>:
 8002f0e:	b480      	push	{r7}
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f16:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002f1a:	f003 0302 	and.w	r3, r3, #2
 8002f1e:	2b02      	cmp	r3, #2
 8002f20:	d101      	bne.n	8002f26 <LL_RCC_HSI48_IsReady+0x18>
 8002f22:	2301      	movs	r3, #1
 8002f24:	e000      	b.n	8002f28 <LL_RCC_HSI48_IsReady+0x1a>
 8002f26:	2300      	movs	r3, #0
 8002f28:	4618      	mov	r0, r3
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f30:	4770      	bx	lr

08002f32 <LL_RCC_LSE_Enable>:
 8002f32:	b480      	push	{r7}
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f3e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f42:	f043 0301 	orr.w	r3, r3, #1
 8002f46:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f4a:	bf00      	nop
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f52:	4770      	bx	lr

08002f54 <LL_RCC_LSE_Disable>:
 8002f54:	b480      	push	{r7}
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f60:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f64:	f023 0301 	bic.w	r3, r3, #1
 8002f68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f6c:	bf00      	nop
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f74:	4770      	bx	lr

08002f76 <LL_RCC_LSE_EnableBypass>:
 8002f76:	b480      	push	{r7}
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f82:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f86:	f043 0304 	orr.w	r3, r3, #4
 8002f8a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f8e:	bf00      	nop
 8002f90:	46bd      	mov	sp, r7
 8002f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f96:	4770      	bx	lr

08002f98 <LL_RCC_LSE_DisableBypass>:
 8002f98:	b480      	push	{r7}
 8002f9a:	af00      	add	r7, sp, #0
 8002f9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fa4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002fa8:	f023 0304 	bic.w	r3, r3, #4
 8002fac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002fb0:	bf00      	nop
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb8:	4770      	bx	lr

08002fba <LL_RCC_LSE_IsReady>:
 8002fba:	b480      	push	{r7}
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fc6:	f003 0302 	and.w	r3, r3, #2
 8002fca:	2b02      	cmp	r3, #2
 8002fcc:	d101      	bne.n	8002fd2 <LL_RCC_LSE_IsReady+0x18>
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e000      	b.n	8002fd4 <LL_RCC_LSE_IsReady+0x1a>
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fdc:	4770      	bx	lr

08002fde <LL_RCC_LSI1_Enable>:
 8002fde:	b480      	push	{r7}
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fe6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002fee:	f043 0301 	orr.w	r3, r3, #1
 8002ff2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8002ff6:	bf00      	nop
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffe:	4770      	bx	lr

08003000 <LL_RCC_LSI1_Disable>:
 8003000:	b480      	push	{r7}
 8003002:	af00      	add	r7, sp, #0
 8003004:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003008:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800300c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003010:	f023 0301 	bic.w	r3, r3, #1
 8003014:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8003018:	bf00      	nop
 800301a:	46bd      	mov	sp, r7
 800301c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003020:	4770      	bx	lr

08003022 <LL_RCC_LSI1_IsReady>:
 8003022:	b480      	push	{r7}
 8003024:	af00      	add	r7, sp, #0
 8003026:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800302a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800302e:	f003 0302 	and.w	r3, r3, #2
 8003032:	2b02      	cmp	r3, #2
 8003034:	d101      	bne.n	800303a <LL_RCC_LSI1_IsReady+0x18>
 8003036:	2301      	movs	r3, #1
 8003038:	e000      	b.n	800303c <LL_RCC_LSI1_IsReady+0x1a>
 800303a:	2300      	movs	r3, #0
 800303c:	4618      	mov	r0, r3
 800303e:	46bd      	mov	sp, r7
 8003040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003044:	4770      	bx	lr

08003046 <LL_RCC_LSI2_Enable>:
 8003046:	b480      	push	{r7}
 8003048:	af00      	add	r7, sp, #0
 800304a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800304e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003052:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003056:	f043 0304 	orr.w	r3, r3, #4
 800305a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800305e:	bf00      	nop
 8003060:	46bd      	mov	sp, r7
 8003062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003066:	4770      	bx	lr

08003068 <LL_RCC_LSI2_Disable>:
 8003068:	b480      	push	{r7}
 800306a:	af00      	add	r7, sp, #0
 800306c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003070:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003074:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003078:	f023 0304 	bic.w	r3, r3, #4
 800307c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8003080:	bf00      	nop
 8003082:	46bd      	mov	sp, r7
 8003084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003088:	4770      	bx	lr

0800308a <LL_RCC_LSI2_IsReady>:
 800308a:	b480      	push	{r7}
 800308c:	af00      	add	r7, sp, #0
 800308e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003092:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003096:	f003 0308 	and.w	r3, r3, #8
 800309a:	2b08      	cmp	r3, #8
 800309c:	d101      	bne.n	80030a2 <LL_RCC_LSI2_IsReady+0x18>
 800309e:	2301      	movs	r3, #1
 80030a0:	e000      	b.n	80030a4 <LL_RCC_LSI2_IsReady+0x1a>
 80030a2:	2300      	movs	r3, #0
 80030a4:	4618      	mov	r0, r3
 80030a6:	46bd      	mov	sp, r7
 80030a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ac:	4770      	bx	lr

080030ae <LL_RCC_LSI2_SetTrimming>:
 80030ae:	b480      	push	{r7}
 80030b0:	b083      	sub	sp, #12
 80030b2:	af00      	add	r7, sp, #0
 80030b4:	6078      	str	r0, [r7, #4]
 80030b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030be:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	021b      	lsls	r3, r3, #8
 80030c6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80030ca:	4313      	orrs	r3, r2
 80030cc:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
 80030d0:	bf00      	nop
 80030d2:	370c      	adds	r7, #12
 80030d4:	46bd      	mov	sp, r7
 80030d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030da:	4770      	bx	lr

080030dc <LL_RCC_MSI_Enable>:
 80030dc:	b480      	push	{r7}
 80030de:	af00      	add	r7, sp, #0
 80030e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80030ea:	f043 0301 	orr.w	r3, r3, #1
 80030ee:	6013      	str	r3, [r2, #0]
 80030f0:	bf00      	nop
 80030f2:	46bd      	mov	sp, r7
 80030f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f8:	4770      	bx	lr

080030fa <LL_RCC_MSI_Disable>:
 80030fa:	b480      	push	{r7}
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003108:	f023 0301 	bic.w	r3, r3, #1
 800310c:	6013      	str	r3, [r2, #0]
 800310e:	bf00      	nop
 8003110:	46bd      	mov	sp, r7
 8003112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003116:	4770      	bx	lr

08003118 <LL_RCC_MSI_IsReady>:
 8003118:	b480      	push	{r7}
 800311a:	af00      	add	r7, sp, #0
 800311c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f003 0302 	and.w	r3, r3, #2
 8003126:	2b02      	cmp	r3, #2
 8003128:	d101      	bne.n	800312e <LL_RCC_MSI_IsReady+0x16>
 800312a:	2301      	movs	r3, #1
 800312c:	e000      	b.n	8003130 <LL_RCC_MSI_IsReady+0x18>
 800312e:	2300      	movs	r3, #0
 8003130:	4618      	mov	r0, r3
 8003132:	46bd      	mov	sp, r7
 8003134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003138:	4770      	bx	lr

0800313a <LL_RCC_MSI_SetRange>:
 800313a:	b480      	push	{r7}
 800313c:	b083      	sub	sp, #12
 800313e:	af00      	add	r7, sp, #0
 8003140:	6078      	str	r0, [r7, #4]
 8003142:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800314c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	4313      	orrs	r3, r2
 8003154:	600b      	str	r3, [r1, #0]
 8003156:	bf00      	nop
 8003158:	370c      	adds	r7, #12
 800315a:	46bd      	mov	sp, r7
 800315c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003160:	4770      	bx	lr

08003162 <LL_RCC_MSI_GetRange>:
 8003162:	b480      	push	{r7}
 8003164:	b083      	sub	sp, #12
 8003166:	af00      	add	r7, sp, #0
 8003168:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003172:	607b      	str	r3, [r7, #4]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2bb0      	cmp	r3, #176	; 0xb0
 8003178:	d901      	bls.n	800317e <LL_RCC_MSI_GetRange+0x1c>
 800317a:	23b0      	movs	r3, #176	; 0xb0
 800317c:	607b      	str	r3, [r7, #4]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	4618      	mov	r0, r3
 8003182:	370c      	adds	r7, #12
 8003184:	46bd      	mov	sp, r7
 8003186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318a:	4770      	bx	lr

0800318c <LL_RCC_MSI_SetCalibTrimming>:
 800318c:	b480      	push	{r7}
 800318e:	b083      	sub	sp, #12
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
 8003194:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	021b      	lsls	r3, r3, #8
 80031a2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80031a6:	4313      	orrs	r3, r2
 80031a8:	604b      	str	r3, [r1, #4]
 80031aa:	bf00      	nop
 80031ac:	370c      	adds	r7, #12
 80031ae:	46bd      	mov	sp, r7
 80031b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b4:	4770      	bx	lr

080031b6 <LL_RCC_SetSysClkSource>:
 80031b6:	b480      	push	{r7}
 80031b8:	b083      	sub	sp, #12
 80031ba:	af00      	add	r7, sp, #0
 80031bc:	6078      	str	r0, [r7, #4]
 80031be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	f023 0203 	bic.w	r2, r3, #3
 80031c8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	4313      	orrs	r3, r2
 80031d0:	608b      	str	r3, [r1, #8]
 80031d2:	bf00      	nop
 80031d4:	370c      	adds	r7, #12
 80031d6:	46bd      	mov	sp, r7
 80031d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031dc:	4770      	bx	lr

080031de <LL_RCC_GetSysClkSource>:
 80031de:	b480      	push	{r7}
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	f003 030c 	and.w	r3, r3, #12
 80031ec:	4618      	mov	r0, r3
 80031ee:	46bd      	mov	sp, r7
 80031f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f4:	4770      	bx	lr

080031f6 <LL_RCC_SetAHBPrescaler>:
 80031f6:	b480      	push	{r7}
 80031f8:	b083      	sub	sp, #12
 80031fa:	af00      	add	r7, sp, #0
 80031fc:	6078      	str	r0, [r7, #4]
 80031fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003208:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	4313      	orrs	r3, r2
 8003210:	608b      	str	r3, [r1, #8]
 8003212:	bf00      	nop
 8003214:	370c      	adds	r7, #12
 8003216:	46bd      	mov	sp, r7
 8003218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321c:	4770      	bx	lr

0800321e <LL_C2_RCC_SetAHBPrescaler>:
 800321e:	b480      	push	{r7}
 8003220:	b083      	sub	sp, #12
 8003222:	af00      	add	r7, sp, #0
 8003224:	6078      	str	r0, [r7, #4]
 8003226:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800322a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800322e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003232:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	4313      	orrs	r3, r2
 800323a:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
 800323e:	bf00      	nop
 8003240:	370c      	adds	r7, #12
 8003242:	46bd      	mov	sp, r7
 8003244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003248:	4770      	bx	lr

0800324a <LL_RCC_SetAHB4Prescaler>:
 800324a:	b480      	push	{r7}
 800324c:	b083      	sub	sp, #12
 800324e:	af00      	add	r7, sp, #0
 8003250:	6078      	str	r0, [r7, #4]
 8003252:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003256:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800325a:	f023 020f 	bic.w	r2, r3, #15
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	091b      	lsrs	r3, r3, #4
 8003262:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003266:	4313      	orrs	r3, r2
 8003268:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
 800326c:	bf00      	nop
 800326e:	370c      	adds	r7, #12
 8003270:	46bd      	mov	sp, r7
 8003272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003276:	4770      	bx	lr

08003278 <LL_RCC_SetAPB1Prescaler>:
 8003278:	b480      	push	{r7}
 800327a:	b083      	sub	sp, #12
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
 8003280:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800328a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	4313      	orrs	r3, r2
 8003292:	608b      	str	r3, [r1, #8]
 8003294:	bf00      	nop
 8003296:	370c      	adds	r7, #12
 8003298:	46bd      	mov	sp, r7
 800329a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329e:	4770      	bx	lr

080032a0 <LL_RCC_SetAPB2Prescaler>:
 80032a0:	b480      	push	{r7}
 80032a2:	b083      	sub	sp, #12
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
 80032a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80032b2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	4313      	orrs	r3, r2
 80032ba:	608b      	str	r3, [r1, #8]
 80032bc:	bf00      	nop
 80032be:	370c      	adds	r7, #12
 80032c0:	46bd      	mov	sp, r7
 80032c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c6:	4770      	bx	lr

080032c8 <LL_RCC_GetAHBPrescaler>:
 80032c8:	b480      	push	{r7}
 80032ca:	af00      	add	r7, sp, #0
 80032cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032d6:	4618      	mov	r0, r3
 80032d8:	46bd      	mov	sp, r7
 80032da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032de:	4770      	bx	lr

080032e0 <LL_RCC_GetAHB4Prescaler>:
 80032e0:	b480      	push	{r7}
 80032e2:	af00      	add	r7, sp, #0
 80032e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032e8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80032ec:	011b      	lsls	r3, r3, #4
 80032ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032f2:	4618      	mov	r0, r3
 80032f4:	46bd      	mov	sp, r7
 80032f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fa:	4770      	bx	lr

080032fc <LL_RCC_GetAPB1Prescaler>:
 80032fc:	b480      	push	{r7}
 80032fe:	af00      	add	r7, sp, #0
 8003300:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003304:	689b      	ldr	r3, [r3, #8]
 8003306:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800330a:	4618      	mov	r0, r3
 800330c:	46bd      	mov	sp, r7
 800330e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003312:	4770      	bx	lr

08003314 <LL_RCC_GetAPB2Prescaler>:
 8003314:	b480      	push	{r7}
 8003316:	af00      	add	r7, sp, #0
 8003318:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003322:	4618      	mov	r0, r3
 8003324:	46bd      	mov	sp, r7
 8003326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332a:	4770      	bx	lr

0800332c <LL_RCC_PLL_Enable>:
 800332c:	b480      	push	{r7}
 800332e:	af00      	add	r7, sp, #0
 8003330:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800333a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800333e:	6013      	str	r3, [r2, #0]
 8003340:	bf00      	nop
 8003342:	46bd      	mov	sp, r7
 8003344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003348:	4770      	bx	lr

0800334a <LL_RCC_PLL_Disable>:
 800334a:	b480      	push	{r7}
 800334c:	af00      	add	r7, sp, #0
 800334e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003358:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800335c:	6013      	str	r3, [r2, #0]
 800335e:	bf00      	nop
 8003360:	46bd      	mov	sp, r7
 8003362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003366:	4770      	bx	lr

08003368 <LL_RCC_PLL_IsReady>:
 8003368:	b480      	push	{r7}
 800336a:	af00      	add	r7, sp, #0
 800336c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003376:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800337a:	d101      	bne.n	8003380 <LL_RCC_PLL_IsReady+0x18>
 800337c:	2301      	movs	r3, #1
 800337e:	e000      	b.n	8003382 <LL_RCC_PLL_IsReady+0x1a>
 8003380:	2300      	movs	r3, #0
 8003382:	4618      	mov	r0, r3
 8003384:	46bd      	mov	sp, r7
 8003386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338a:	4770      	bx	lr

0800338c <LL_RCC_PLL_GetN>:
 800338c:	b480      	push	{r7}
 800338e:	af00      	add	r7, sp, #0
 8003390:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003394:	68db      	ldr	r3, [r3, #12]
 8003396:	0a1b      	lsrs	r3, r3, #8
 8003398:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800339c:	4618      	mov	r0, r3
 800339e:	46bd      	mov	sp, r7
 80033a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a4:	4770      	bx	lr

080033a6 <LL_RCC_PLL_GetR>:
 80033a6:	b480      	push	{r7}
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033ae:	68db      	ldr	r3, [r3, #12]
 80033b0:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
 80033b4:	4618      	mov	r0, r3
 80033b6:	46bd      	mov	sp, r7
 80033b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033bc:	4770      	bx	lr

080033be <LL_RCC_PLL_GetDivider>:
 80033be:	b480      	push	{r7}
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033c6:	68db      	ldr	r3, [r3, #12]
 80033c8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80033cc:	4618      	mov	r0, r3
 80033ce:	46bd      	mov	sp, r7
 80033d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d4:	4770      	bx	lr

080033d6 <LL_RCC_PLL_GetMainSource>:
 80033d6:	b480      	push	{r7}
 80033d8:	af00      	add	r7, sp, #0
 80033da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033de:	68db      	ldr	r3, [r3, #12]
 80033e0:	f003 0303 	and.w	r3, r3, #3
 80033e4:	4618      	mov	r0, r3
 80033e6:	46bd      	mov	sp, r7
 80033e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ec:	4770      	bx	lr

080033ee <LL_RCC_IsActiveFlag_HPRE>:
 80033ee:	b480      	push	{r7}
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003400:	d101      	bne.n	8003406 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8003402:	2301      	movs	r3, #1
 8003404:	e000      	b.n	8003408 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8003406:	2300      	movs	r3, #0
 8003408:	4618      	mov	r0, r3
 800340a:	46bd      	mov	sp, r7
 800340c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003410:	4770      	bx	lr

08003412 <LL_RCC_IsActiveFlag_C2HPRE>:
 8003412:	b480      	push	{r7}
 8003414:	af00      	add	r7, sp, #0
 8003416:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800341a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800341e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003422:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003426:	d101      	bne.n	800342c <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8003428:	2301      	movs	r3, #1
 800342a:	e000      	b.n	800342e <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 800342c:	2300      	movs	r3, #0
 800342e:	4618      	mov	r0, r3
 8003430:	46bd      	mov	sp, r7
 8003432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003436:	4770      	bx	lr

08003438 <LL_RCC_IsActiveFlag_SHDHPRE>:
 8003438:	b480      	push	{r7}
 800343a:	af00      	add	r7, sp, #0
 800343c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003440:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003444:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003448:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800344c:	d101      	bne.n	8003452 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800344e:	2301      	movs	r3, #1
 8003450:	e000      	b.n	8003454 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8003452:	2300      	movs	r3, #0
 8003454:	4618      	mov	r0, r3
 8003456:	46bd      	mov	sp, r7
 8003458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345c:	4770      	bx	lr

0800345e <LL_RCC_IsActiveFlag_PPRE1>:
 800345e:	b480      	push	{r7}
 8003460:	af00      	add	r7, sp, #0
 8003462:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003466:	689b      	ldr	r3, [r3, #8]
 8003468:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800346c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003470:	d101      	bne.n	8003476 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8003472:	2301      	movs	r3, #1
 8003474:	e000      	b.n	8003478 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8003476:	2300      	movs	r3, #0
 8003478:	4618      	mov	r0, r3
 800347a:	46bd      	mov	sp, r7
 800347c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003480:	4770      	bx	lr

08003482 <LL_RCC_IsActiveFlag_PPRE2>:
 8003482:	b480      	push	{r7}
 8003484:	af00      	add	r7, sp, #0
 8003486:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003490:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003494:	d101      	bne.n	800349a <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8003496:	2301      	movs	r3, #1
 8003498:	e000      	b.n	800349c <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800349a:	2300      	movs	r3, #0
 800349c:	4618      	mov	r0, r3
 800349e:	46bd      	mov	sp, r7
 80034a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a4:	4770      	bx	lr
	...

080034a8 <HAL_RCC_OscConfig>:
 80034a8:	b590      	push	{r4, r7, lr}
 80034aa:	b08d      	sub	sp, #52	; 0x34
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d101      	bne.n	80034ba <HAL_RCC_OscConfig+0x12>
 80034b6:	2301      	movs	r3, #1
 80034b8:	e363      	b.n	8003b82 <HAL_RCC_OscConfig+0x6da>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f003 0320 	and.w	r3, r3, #32
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	f000 808d 	beq.w	80035e2 <HAL_RCC_OscConfig+0x13a>
 80034c8:	f7ff fe89 	bl	80031de <LL_RCC_GetSysClkSource>
 80034cc:	62f8      	str	r0, [r7, #44]	; 0x2c
 80034ce:	f7ff ff82 	bl	80033d6 <LL_RCC_PLL_GetMainSource>
 80034d2:	62b8      	str	r0, [r7, #40]	; 0x28
 80034d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d005      	beq.n	80034e6 <HAL_RCC_OscConfig+0x3e>
 80034da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034dc:	2b0c      	cmp	r3, #12
 80034de:	d147      	bne.n	8003570 <HAL_RCC_OscConfig+0xc8>
 80034e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034e2:	2b01      	cmp	r3, #1
 80034e4:	d144      	bne.n	8003570 <HAL_RCC_OscConfig+0xc8>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	69db      	ldr	r3, [r3, #28]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d101      	bne.n	80034f2 <HAL_RCC_OscConfig+0x4a>
 80034ee:	2301      	movs	r3, #1
 80034f0:	e347      	b.n	8003b82 <HAL_RCC_OscConfig+0x6da>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80034f6:	f7ff fe34 	bl	8003162 <LL_RCC_MSI_GetRange>
 80034fa:	4603      	mov	r3, r0
 80034fc:	429c      	cmp	r4, r3
 80034fe:	d914      	bls.n	800352a <HAL_RCC_OscConfig+0x82>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003504:	4618      	mov	r0, r3
 8003506:	f000 fd2f 	bl	8003f68 <RCC_SetFlashLatencyFromMSIRange>
 800350a:	4603      	mov	r3, r0
 800350c:	2b00      	cmp	r3, #0
 800350e:	d001      	beq.n	8003514 <HAL_RCC_OscConfig+0x6c>
 8003510:	2301      	movs	r3, #1
 8003512:	e336      	b.n	8003b82 <HAL_RCC_OscConfig+0x6da>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003518:	4618      	mov	r0, r3
 800351a:	f7ff fe0e 	bl	800313a <LL_RCC_MSI_SetRange>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6a1b      	ldr	r3, [r3, #32]
 8003522:	4618      	mov	r0, r3
 8003524:	f7ff fe32 	bl	800318c <LL_RCC_MSI_SetCalibTrimming>
 8003528:	e013      	b.n	8003552 <HAL_RCC_OscConfig+0xaa>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800352e:	4618      	mov	r0, r3
 8003530:	f7ff fe03 	bl	800313a <LL_RCC_MSI_SetRange>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6a1b      	ldr	r3, [r3, #32]
 8003538:	4618      	mov	r0, r3
 800353a:	f7ff fe27 	bl	800318c <LL_RCC_MSI_SetCalibTrimming>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003542:	4618      	mov	r0, r3
 8003544:	f000 fd10 	bl	8003f68 <RCC_SetFlashLatencyFromMSIRange>
 8003548:	4603      	mov	r3, r0
 800354a:	2b00      	cmp	r3, #0
 800354c:	d001      	beq.n	8003552 <HAL_RCC_OscConfig+0xaa>
 800354e:	2301      	movs	r3, #1
 8003550:	e317      	b.n	8003b82 <HAL_RCC_OscConfig+0x6da>
 8003552:	f000 fcc9 	bl	8003ee8 <HAL_RCC_GetHCLKFreq>
 8003556:	4603      	mov	r3, r0
 8003558:	4aa4      	ldr	r2, [pc, #656]	; (80037ec <HAL_RCC_OscConfig+0x344>)
 800355a:	6013      	str	r3, [r2, #0]
 800355c:	4ba4      	ldr	r3, [pc, #656]	; (80037f0 <HAL_RCC_OscConfig+0x348>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4618      	mov	r0, r3
 8003562:	f7fe fe8f 	bl	8002284 <HAL_InitTick>
 8003566:	4603      	mov	r3, r0
 8003568:	2b00      	cmp	r3, #0
 800356a:	d039      	beq.n	80035e0 <HAL_RCC_OscConfig+0x138>
 800356c:	2301      	movs	r3, #1
 800356e:	e308      	b.n	8003b82 <HAL_RCC_OscConfig+0x6da>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	69db      	ldr	r3, [r3, #28]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d01e      	beq.n	80035b6 <HAL_RCC_OscConfig+0x10e>
 8003578:	f7ff fdb0 	bl	80030dc <LL_RCC_MSI_Enable>
 800357c:	f7fe fed0 	bl	8002320 <HAL_GetTick>
 8003580:	6278      	str	r0, [r7, #36]	; 0x24
 8003582:	e008      	b.n	8003596 <HAL_RCC_OscConfig+0xee>
 8003584:	f7fe fecc 	bl	8002320 <HAL_GetTick>
 8003588:	4602      	mov	r2, r0
 800358a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800358c:	1ad3      	subs	r3, r2, r3
 800358e:	2b02      	cmp	r3, #2
 8003590:	d901      	bls.n	8003596 <HAL_RCC_OscConfig+0xee>
 8003592:	2303      	movs	r3, #3
 8003594:	e2f5      	b.n	8003b82 <HAL_RCC_OscConfig+0x6da>
 8003596:	f7ff fdbf 	bl	8003118 <LL_RCC_MSI_IsReady>
 800359a:	4603      	mov	r3, r0
 800359c:	2b00      	cmp	r3, #0
 800359e:	d0f1      	beq.n	8003584 <HAL_RCC_OscConfig+0xdc>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a4:	4618      	mov	r0, r3
 80035a6:	f7ff fdc8 	bl	800313a <LL_RCC_MSI_SetRange>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6a1b      	ldr	r3, [r3, #32]
 80035ae:	4618      	mov	r0, r3
 80035b0:	f7ff fdec 	bl	800318c <LL_RCC_MSI_SetCalibTrimming>
 80035b4:	e015      	b.n	80035e2 <HAL_RCC_OscConfig+0x13a>
 80035b6:	f7ff fda0 	bl	80030fa <LL_RCC_MSI_Disable>
 80035ba:	f7fe feb1 	bl	8002320 <HAL_GetTick>
 80035be:	6278      	str	r0, [r7, #36]	; 0x24
 80035c0:	e008      	b.n	80035d4 <HAL_RCC_OscConfig+0x12c>
 80035c2:	f7fe fead 	bl	8002320 <HAL_GetTick>
 80035c6:	4602      	mov	r2, r0
 80035c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ca:	1ad3      	subs	r3, r2, r3
 80035cc:	2b02      	cmp	r3, #2
 80035ce:	d901      	bls.n	80035d4 <HAL_RCC_OscConfig+0x12c>
 80035d0:	2303      	movs	r3, #3
 80035d2:	e2d6      	b.n	8003b82 <HAL_RCC_OscConfig+0x6da>
 80035d4:	f7ff fda0 	bl	8003118 <LL_RCC_MSI_IsReady>
 80035d8:	4603      	mov	r3, r0
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d1f1      	bne.n	80035c2 <HAL_RCC_OscConfig+0x11a>
 80035de:	e000      	b.n	80035e2 <HAL_RCC_OscConfig+0x13a>
 80035e0:	bf00      	nop
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f003 0301 	and.w	r3, r3, #1
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d047      	beq.n	800367e <HAL_RCC_OscConfig+0x1d6>
 80035ee:	f7ff fdf6 	bl	80031de <LL_RCC_GetSysClkSource>
 80035f2:	6238      	str	r0, [r7, #32]
 80035f4:	f7ff feef 	bl	80033d6 <LL_RCC_PLL_GetMainSource>
 80035f8:	61f8      	str	r0, [r7, #28]
 80035fa:	6a3b      	ldr	r3, [r7, #32]
 80035fc:	2b08      	cmp	r3, #8
 80035fe:	d005      	beq.n	800360c <HAL_RCC_OscConfig+0x164>
 8003600:	6a3b      	ldr	r3, [r7, #32]
 8003602:	2b0c      	cmp	r3, #12
 8003604:	d108      	bne.n	8003618 <HAL_RCC_OscConfig+0x170>
 8003606:	69fb      	ldr	r3, [r7, #28]
 8003608:	2b03      	cmp	r3, #3
 800360a:	d105      	bne.n	8003618 <HAL_RCC_OscConfig+0x170>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d134      	bne.n	800367e <HAL_RCC_OscConfig+0x1d6>
 8003614:	2301      	movs	r3, #1
 8003616:	e2b4      	b.n	8003b82 <HAL_RCC_OscConfig+0x6da>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003620:	d102      	bne.n	8003628 <HAL_RCC_OscConfig+0x180>
 8003622:	f7ff fbdd 	bl	8002de0 <LL_RCC_HSE_Enable>
 8003626:	e001      	b.n	800362c <HAL_RCC_OscConfig+0x184>
 8003628:	f7ff fbe9 	bl	8002dfe <LL_RCC_HSE_Disable>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d012      	beq.n	800365a <HAL_RCC_OscConfig+0x1b2>
 8003634:	f7fe fe74 	bl	8002320 <HAL_GetTick>
 8003638:	6278      	str	r0, [r7, #36]	; 0x24
 800363a:	e008      	b.n	800364e <HAL_RCC_OscConfig+0x1a6>
 800363c:	f7fe fe70 	bl	8002320 <HAL_GetTick>
 8003640:	4602      	mov	r2, r0
 8003642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003644:	1ad3      	subs	r3, r2, r3
 8003646:	2b64      	cmp	r3, #100	; 0x64
 8003648:	d901      	bls.n	800364e <HAL_RCC_OscConfig+0x1a6>
 800364a:	2303      	movs	r3, #3
 800364c:	e299      	b.n	8003b82 <HAL_RCC_OscConfig+0x6da>
 800364e:	f7ff fbe5 	bl	8002e1c <LL_RCC_HSE_IsReady>
 8003652:	4603      	mov	r3, r0
 8003654:	2b00      	cmp	r3, #0
 8003656:	d0f1      	beq.n	800363c <HAL_RCC_OscConfig+0x194>
 8003658:	e011      	b.n	800367e <HAL_RCC_OscConfig+0x1d6>
 800365a:	f7fe fe61 	bl	8002320 <HAL_GetTick>
 800365e:	6278      	str	r0, [r7, #36]	; 0x24
 8003660:	e008      	b.n	8003674 <HAL_RCC_OscConfig+0x1cc>
 8003662:	f7fe fe5d 	bl	8002320 <HAL_GetTick>
 8003666:	4602      	mov	r2, r0
 8003668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800366a:	1ad3      	subs	r3, r2, r3
 800366c:	2b64      	cmp	r3, #100	; 0x64
 800366e:	d901      	bls.n	8003674 <HAL_RCC_OscConfig+0x1cc>
 8003670:	2303      	movs	r3, #3
 8003672:	e286      	b.n	8003b82 <HAL_RCC_OscConfig+0x6da>
 8003674:	f7ff fbd2 	bl	8002e1c <LL_RCC_HSE_IsReady>
 8003678:	4603      	mov	r3, r0
 800367a:	2b00      	cmp	r3, #0
 800367c:	d1f1      	bne.n	8003662 <HAL_RCC_OscConfig+0x1ba>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f003 0302 	and.w	r3, r3, #2
 8003686:	2b00      	cmp	r3, #0
 8003688:	d04c      	beq.n	8003724 <HAL_RCC_OscConfig+0x27c>
 800368a:	f7ff fda8 	bl	80031de <LL_RCC_GetSysClkSource>
 800368e:	61b8      	str	r0, [r7, #24]
 8003690:	f7ff fea1 	bl	80033d6 <LL_RCC_PLL_GetMainSource>
 8003694:	6178      	str	r0, [r7, #20]
 8003696:	69bb      	ldr	r3, [r7, #24]
 8003698:	2b04      	cmp	r3, #4
 800369a:	d005      	beq.n	80036a8 <HAL_RCC_OscConfig+0x200>
 800369c:	69bb      	ldr	r3, [r7, #24]
 800369e:	2b0c      	cmp	r3, #12
 80036a0:	d10e      	bne.n	80036c0 <HAL_RCC_OscConfig+0x218>
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	2b02      	cmp	r3, #2
 80036a6:	d10b      	bne.n	80036c0 <HAL_RCC_OscConfig+0x218>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	68db      	ldr	r3, [r3, #12]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d101      	bne.n	80036b4 <HAL_RCC_OscConfig+0x20c>
 80036b0:	2301      	movs	r3, #1
 80036b2:	e266      	b.n	8003b82 <HAL_RCC_OscConfig+0x6da>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	691b      	ldr	r3, [r3, #16]
 80036b8:	4618      	mov	r0, r3
 80036ba:	f7ff fbf1 	bl	8002ea0 <LL_RCC_HSI_SetCalibTrimming>
 80036be:	e031      	b.n	8003724 <HAL_RCC_OscConfig+0x27c>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	68db      	ldr	r3, [r3, #12]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d019      	beq.n	80036fc <HAL_RCC_OscConfig+0x254>
 80036c8:	f7ff fbba 	bl	8002e40 <LL_RCC_HSI_Enable>
 80036cc:	f7fe fe28 	bl	8002320 <HAL_GetTick>
 80036d0:	6278      	str	r0, [r7, #36]	; 0x24
 80036d2:	e008      	b.n	80036e6 <HAL_RCC_OscConfig+0x23e>
 80036d4:	f7fe fe24 	bl	8002320 <HAL_GetTick>
 80036d8:	4602      	mov	r2, r0
 80036da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036dc:	1ad3      	subs	r3, r2, r3
 80036de:	2b02      	cmp	r3, #2
 80036e0:	d901      	bls.n	80036e6 <HAL_RCC_OscConfig+0x23e>
 80036e2:	2303      	movs	r3, #3
 80036e4:	e24d      	b.n	8003b82 <HAL_RCC_OscConfig+0x6da>
 80036e6:	f7ff fbc9 	bl	8002e7c <LL_RCC_HSI_IsReady>
 80036ea:	4603      	mov	r3, r0
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d0f1      	beq.n	80036d4 <HAL_RCC_OscConfig+0x22c>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	691b      	ldr	r3, [r3, #16]
 80036f4:	4618      	mov	r0, r3
 80036f6:	f7ff fbd3 	bl	8002ea0 <LL_RCC_HSI_SetCalibTrimming>
 80036fa:	e013      	b.n	8003724 <HAL_RCC_OscConfig+0x27c>
 80036fc:	f7ff fbaf 	bl	8002e5e <LL_RCC_HSI_Disable>
 8003700:	f7fe fe0e 	bl	8002320 <HAL_GetTick>
 8003704:	6278      	str	r0, [r7, #36]	; 0x24
 8003706:	e008      	b.n	800371a <HAL_RCC_OscConfig+0x272>
 8003708:	f7fe fe0a 	bl	8002320 <HAL_GetTick>
 800370c:	4602      	mov	r2, r0
 800370e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003710:	1ad3      	subs	r3, r2, r3
 8003712:	2b02      	cmp	r3, #2
 8003714:	d901      	bls.n	800371a <HAL_RCC_OscConfig+0x272>
 8003716:	2303      	movs	r3, #3
 8003718:	e233      	b.n	8003b82 <HAL_RCC_OscConfig+0x6da>
 800371a:	f7ff fbaf 	bl	8002e7c <LL_RCC_HSI_IsReady>
 800371e:	4603      	mov	r3, r0
 8003720:	2b00      	cmp	r3, #0
 8003722:	d1f1      	bne.n	8003708 <HAL_RCC_OscConfig+0x260>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f003 0308 	and.w	r3, r3, #8
 800372c:	2b00      	cmp	r3, #0
 800372e:	d106      	bne.n	800373e <HAL_RCC_OscConfig+0x296>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f003 0310 	and.w	r3, r3, #16
 8003738:	2b00      	cmp	r3, #0
 800373a:	f000 80a3 	beq.w	8003884 <HAL_RCC_OscConfig+0x3dc>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	695b      	ldr	r3, [r3, #20]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d076      	beq.n	8003834 <HAL_RCC_OscConfig+0x38c>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 0310 	and.w	r3, r3, #16
 800374e:	2b00      	cmp	r3, #0
 8003750:	d046      	beq.n	80037e0 <HAL_RCC_OscConfig+0x338>
 8003752:	f7ff fc66 	bl	8003022 <LL_RCC_LSI1_IsReady>
 8003756:	4603      	mov	r3, r0
 8003758:	2b00      	cmp	r3, #0
 800375a:	d113      	bne.n	8003784 <HAL_RCC_OscConfig+0x2dc>
 800375c:	f7ff fc3f 	bl	8002fde <LL_RCC_LSI1_Enable>
 8003760:	f7fe fdde 	bl	8002320 <HAL_GetTick>
 8003764:	6278      	str	r0, [r7, #36]	; 0x24
 8003766:	e008      	b.n	800377a <HAL_RCC_OscConfig+0x2d2>
 8003768:	f7fe fdda 	bl	8002320 <HAL_GetTick>
 800376c:	4602      	mov	r2, r0
 800376e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003770:	1ad3      	subs	r3, r2, r3
 8003772:	2b02      	cmp	r3, #2
 8003774:	d901      	bls.n	800377a <HAL_RCC_OscConfig+0x2d2>
 8003776:	2303      	movs	r3, #3
 8003778:	e203      	b.n	8003b82 <HAL_RCC_OscConfig+0x6da>
 800377a:	f7ff fc52 	bl	8003022 <LL_RCC_LSI1_IsReady>
 800377e:	4603      	mov	r3, r0
 8003780:	2b00      	cmp	r3, #0
 8003782:	d0f1      	beq.n	8003768 <HAL_RCC_OscConfig+0x2c0>
 8003784:	f7ff fc5f 	bl	8003046 <LL_RCC_LSI2_Enable>
 8003788:	f7fe fdca 	bl	8002320 <HAL_GetTick>
 800378c:	6278      	str	r0, [r7, #36]	; 0x24
 800378e:	e008      	b.n	80037a2 <HAL_RCC_OscConfig+0x2fa>
 8003790:	f7fe fdc6 	bl	8002320 <HAL_GetTick>
 8003794:	4602      	mov	r2, r0
 8003796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003798:	1ad3      	subs	r3, r2, r3
 800379a:	2b03      	cmp	r3, #3
 800379c:	d901      	bls.n	80037a2 <HAL_RCC_OscConfig+0x2fa>
 800379e:	2303      	movs	r3, #3
 80037a0:	e1ef      	b.n	8003b82 <HAL_RCC_OscConfig+0x6da>
 80037a2:	f7ff fc72 	bl	800308a <LL_RCC_LSI2_IsReady>
 80037a6:	4603      	mov	r3, r0
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d0f1      	beq.n	8003790 <HAL_RCC_OscConfig+0x2e8>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	699b      	ldr	r3, [r3, #24]
 80037b0:	4618      	mov	r0, r3
 80037b2:	f7ff fc7c 	bl	80030ae <LL_RCC_LSI2_SetTrimming>
 80037b6:	f7ff fc23 	bl	8003000 <LL_RCC_LSI1_Disable>
 80037ba:	f7fe fdb1 	bl	8002320 <HAL_GetTick>
 80037be:	6278      	str	r0, [r7, #36]	; 0x24
 80037c0:	e008      	b.n	80037d4 <HAL_RCC_OscConfig+0x32c>
 80037c2:	f7fe fdad 	bl	8002320 <HAL_GetTick>
 80037c6:	4602      	mov	r2, r0
 80037c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ca:	1ad3      	subs	r3, r2, r3
 80037cc:	2b02      	cmp	r3, #2
 80037ce:	d901      	bls.n	80037d4 <HAL_RCC_OscConfig+0x32c>
 80037d0:	2303      	movs	r3, #3
 80037d2:	e1d6      	b.n	8003b82 <HAL_RCC_OscConfig+0x6da>
 80037d4:	f7ff fc25 	bl	8003022 <LL_RCC_LSI1_IsReady>
 80037d8:	4603      	mov	r3, r0
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d1f1      	bne.n	80037c2 <HAL_RCC_OscConfig+0x31a>
 80037de:	e051      	b.n	8003884 <HAL_RCC_OscConfig+0x3dc>
 80037e0:	f7ff fbfd 	bl	8002fde <LL_RCC_LSI1_Enable>
 80037e4:	f7fe fd9c 	bl	8002320 <HAL_GetTick>
 80037e8:	6278      	str	r0, [r7, #36]	; 0x24
 80037ea:	e00c      	b.n	8003806 <HAL_RCC_OscConfig+0x35e>
 80037ec:	20000008 	.word	0x20000008
 80037f0:	2000000c 	.word	0x2000000c
 80037f4:	f7fe fd94 	bl	8002320 <HAL_GetTick>
 80037f8:	4602      	mov	r2, r0
 80037fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037fc:	1ad3      	subs	r3, r2, r3
 80037fe:	2b02      	cmp	r3, #2
 8003800:	d901      	bls.n	8003806 <HAL_RCC_OscConfig+0x35e>
 8003802:	2303      	movs	r3, #3
 8003804:	e1bd      	b.n	8003b82 <HAL_RCC_OscConfig+0x6da>
 8003806:	f7ff fc0c 	bl	8003022 <LL_RCC_LSI1_IsReady>
 800380a:	4603      	mov	r3, r0
 800380c:	2b00      	cmp	r3, #0
 800380e:	d0f1      	beq.n	80037f4 <HAL_RCC_OscConfig+0x34c>
 8003810:	f7ff fc2a 	bl	8003068 <LL_RCC_LSI2_Disable>
 8003814:	e008      	b.n	8003828 <HAL_RCC_OscConfig+0x380>
 8003816:	f7fe fd83 	bl	8002320 <HAL_GetTick>
 800381a:	4602      	mov	r2, r0
 800381c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800381e:	1ad3      	subs	r3, r2, r3
 8003820:	2b03      	cmp	r3, #3
 8003822:	d901      	bls.n	8003828 <HAL_RCC_OscConfig+0x380>
 8003824:	2303      	movs	r3, #3
 8003826:	e1ac      	b.n	8003b82 <HAL_RCC_OscConfig+0x6da>
 8003828:	f7ff fc2f 	bl	800308a <LL_RCC_LSI2_IsReady>
 800382c:	4603      	mov	r3, r0
 800382e:	2b00      	cmp	r3, #0
 8003830:	d1f1      	bne.n	8003816 <HAL_RCC_OscConfig+0x36e>
 8003832:	e027      	b.n	8003884 <HAL_RCC_OscConfig+0x3dc>
 8003834:	f7ff fc18 	bl	8003068 <LL_RCC_LSI2_Disable>
 8003838:	f7fe fd72 	bl	8002320 <HAL_GetTick>
 800383c:	6278      	str	r0, [r7, #36]	; 0x24
 800383e:	e008      	b.n	8003852 <HAL_RCC_OscConfig+0x3aa>
 8003840:	f7fe fd6e 	bl	8002320 <HAL_GetTick>
 8003844:	4602      	mov	r2, r0
 8003846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003848:	1ad3      	subs	r3, r2, r3
 800384a:	2b03      	cmp	r3, #3
 800384c:	d901      	bls.n	8003852 <HAL_RCC_OscConfig+0x3aa>
 800384e:	2303      	movs	r3, #3
 8003850:	e197      	b.n	8003b82 <HAL_RCC_OscConfig+0x6da>
 8003852:	f7ff fc1a 	bl	800308a <LL_RCC_LSI2_IsReady>
 8003856:	4603      	mov	r3, r0
 8003858:	2b00      	cmp	r3, #0
 800385a:	d1f1      	bne.n	8003840 <HAL_RCC_OscConfig+0x398>
 800385c:	f7ff fbd0 	bl	8003000 <LL_RCC_LSI1_Disable>
 8003860:	f7fe fd5e 	bl	8002320 <HAL_GetTick>
 8003864:	6278      	str	r0, [r7, #36]	; 0x24
 8003866:	e008      	b.n	800387a <HAL_RCC_OscConfig+0x3d2>
 8003868:	f7fe fd5a 	bl	8002320 <HAL_GetTick>
 800386c:	4602      	mov	r2, r0
 800386e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003870:	1ad3      	subs	r3, r2, r3
 8003872:	2b02      	cmp	r3, #2
 8003874:	d901      	bls.n	800387a <HAL_RCC_OscConfig+0x3d2>
 8003876:	2303      	movs	r3, #3
 8003878:	e183      	b.n	8003b82 <HAL_RCC_OscConfig+0x6da>
 800387a:	f7ff fbd2 	bl	8003022 <LL_RCC_LSI1_IsReady>
 800387e:	4603      	mov	r3, r0
 8003880:	2b00      	cmp	r3, #0
 8003882:	d1f1      	bne.n	8003868 <HAL_RCC_OscConfig+0x3c0>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f003 0304 	and.w	r3, r3, #4
 800388c:	2b00      	cmp	r3, #0
 800388e:	d05b      	beq.n	8003948 <HAL_RCC_OscConfig+0x4a0>
 8003890:	4ba7      	ldr	r3, [pc, #668]	; (8003b30 <HAL_RCC_OscConfig+0x688>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003898:	2b00      	cmp	r3, #0
 800389a:	d114      	bne.n	80038c6 <HAL_RCC_OscConfig+0x41e>
 800389c:	f7ff fa70 	bl	8002d80 <HAL_PWR_EnableBkUpAccess>
 80038a0:	f7fe fd3e 	bl	8002320 <HAL_GetTick>
 80038a4:	6278      	str	r0, [r7, #36]	; 0x24
 80038a6:	e008      	b.n	80038ba <HAL_RCC_OscConfig+0x412>
 80038a8:	f7fe fd3a 	bl	8002320 <HAL_GetTick>
 80038ac:	4602      	mov	r2, r0
 80038ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b0:	1ad3      	subs	r3, r2, r3
 80038b2:	2b02      	cmp	r3, #2
 80038b4:	d901      	bls.n	80038ba <HAL_RCC_OscConfig+0x412>
 80038b6:	2303      	movs	r3, #3
 80038b8:	e163      	b.n	8003b82 <HAL_RCC_OscConfig+0x6da>
 80038ba:	4b9d      	ldr	r3, [pc, #628]	; (8003b30 <HAL_RCC_OscConfig+0x688>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d0f0      	beq.n	80038a8 <HAL_RCC_OscConfig+0x400>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	689b      	ldr	r3, [r3, #8]
 80038ca:	2b01      	cmp	r3, #1
 80038cc:	d102      	bne.n	80038d4 <HAL_RCC_OscConfig+0x42c>
 80038ce:	f7ff fb30 	bl	8002f32 <LL_RCC_LSE_Enable>
 80038d2:	e00c      	b.n	80038ee <HAL_RCC_OscConfig+0x446>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	2b05      	cmp	r3, #5
 80038da:	d104      	bne.n	80038e6 <HAL_RCC_OscConfig+0x43e>
 80038dc:	f7ff fb4b 	bl	8002f76 <LL_RCC_LSE_EnableBypass>
 80038e0:	f7ff fb27 	bl	8002f32 <LL_RCC_LSE_Enable>
 80038e4:	e003      	b.n	80038ee <HAL_RCC_OscConfig+0x446>
 80038e6:	f7ff fb35 	bl	8002f54 <LL_RCC_LSE_Disable>
 80038ea:	f7ff fb55 	bl	8002f98 <LL_RCC_LSE_DisableBypass>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d014      	beq.n	8003920 <HAL_RCC_OscConfig+0x478>
 80038f6:	f7fe fd13 	bl	8002320 <HAL_GetTick>
 80038fa:	6278      	str	r0, [r7, #36]	; 0x24
 80038fc:	e00a      	b.n	8003914 <HAL_RCC_OscConfig+0x46c>
 80038fe:	f7fe fd0f 	bl	8002320 <HAL_GetTick>
 8003902:	4602      	mov	r2, r0
 8003904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003906:	1ad3      	subs	r3, r2, r3
 8003908:	f241 3288 	movw	r2, #5000	; 0x1388
 800390c:	4293      	cmp	r3, r2
 800390e:	d901      	bls.n	8003914 <HAL_RCC_OscConfig+0x46c>
 8003910:	2303      	movs	r3, #3
 8003912:	e136      	b.n	8003b82 <HAL_RCC_OscConfig+0x6da>
 8003914:	f7ff fb51 	bl	8002fba <LL_RCC_LSE_IsReady>
 8003918:	4603      	mov	r3, r0
 800391a:	2b00      	cmp	r3, #0
 800391c:	d0ef      	beq.n	80038fe <HAL_RCC_OscConfig+0x456>
 800391e:	e013      	b.n	8003948 <HAL_RCC_OscConfig+0x4a0>
 8003920:	f7fe fcfe 	bl	8002320 <HAL_GetTick>
 8003924:	6278      	str	r0, [r7, #36]	; 0x24
 8003926:	e00a      	b.n	800393e <HAL_RCC_OscConfig+0x496>
 8003928:	f7fe fcfa 	bl	8002320 <HAL_GetTick>
 800392c:	4602      	mov	r2, r0
 800392e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003930:	1ad3      	subs	r3, r2, r3
 8003932:	f241 3288 	movw	r2, #5000	; 0x1388
 8003936:	4293      	cmp	r3, r2
 8003938:	d901      	bls.n	800393e <HAL_RCC_OscConfig+0x496>
 800393a:	2303      	movs	r3, #3
 800393c:	e121      	b.n	8003b82 <HAL_RCC_OscConfig+0x6da>
 800393e:	f7ff fb3c 	bl	8002fba <LL_RCC_LSE_IsReady>
 8003942:	4603      	mov	r3, r0
 8003944:	2b00      	cmp	r3, #0
 8003946:	d1ef      	bne.n	8003928 <HAL_RCC_OscConfig+0x480>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003950:	2b00      	cmp	r3, #0
 8003952:	d02c      	beq.n	80039ae <HAL_RCC_OscConfig+0x506>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003958:	2b00      	cmp	r3, #0
 800395a:	d014      	beq.n	8003986 <HAL_RCC_OscConfig+0x4de>
 800395c:	f7ff fab5 	bl	8002eca <LL_RCC_HSI48_Enable>
 8003960:	f7fe fcde 	bl	8002320 <HAL_GetTick>
 8003964:	6278      	str	r0, [r7, #36]	; 0x24
 8003966:	e008      	b.n	800397a <HAL_RCC_OscConfig+0x4d2>
 8003968:	f7fe fcda 	bl	8002320 <HAL_GetTick>
 800396c:	4602      	mov	r2, r0
 800396e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003970:	1ad3      	subs	r3, r2, r3
 8003972:	2b02      	cmp	r3, #2
 8003974:	d901      	bls.n	800397a <HAL_RCC_OscConfig+0x4d2>
 8003976:	2303      	movs	r3, #3
 8003978:	e103      	b.n	8003b82 <HAL_RCC_OscConfig+0x6da>
 800397a:	f7ff fac8 	bl	8002f0e <LL_RCC_HSI48_IsReady>
 800397e:	4603      	mov	r3, r0
 8003980:	2b00      	cmp	r3, #0
 8003982:	d0f1      	beq.n	8003968 <HAL_RCC_OscConfig+0x4c0>
 8003984:	e013      	b.n	80039ae <HAL_RCC_OscConfig+0x506>
 8003986:	f7ff fab1 	bl	8002eec <LL_RCC_HSI48_Disable>
 800398a:	f7fe fcc9 	bl	8002320 <HAL_GetTick>
 800398e:	6278      	str	r0, [r7, #36]	; 0x24
 8003990:	e008      	b.n	80039a4 <HAL_RCC_OscConfig+0x4fc>
 8003992:	f7fe fcc5 	bl	8002320 <HAL_GetTick>
 8003996:	4602      	mov	r2, r0
 8003998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800399a:	1ad3      	subs	r3, r2, r3
 800399c:	2b02      	cmp	r3, #2
 800399e:	d901      	bls.n	80039a4 <HAL_RCC_OscConfig+0x4fc>
 80039a0:	2303      	movs	r3, #3
 80039a2:	e0ee      	b.n	8003b82 <HAL_RCC_OscConfig+0x6da>
 80039a4:	f7ff fab3 	bl	8002f0e <LL_RCC_HSI48_IsReady>
 80039a8:	4603      	mov	r3, r0
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d1f1      	bne.n	8003992 <HAL_RCC_OscConfig+0x4ea>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	f000 80e4 	beq.w	8003b80 <HAL_RCC_OscConfig+0x6d8>
 80039b8:	f7ff fc11 	bl	80031de <LL_RCC_GetSysClkSource>
 80039bc:	6138      	str	r0, [r7, #16]
 80039be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039c2:	68db      	ldr	r3, [r3, #12]
 80039c4:	60fb      	str	r3, [r7, #12]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ca:	2b02      	cmp	r3, #2
 80039cc:	f040 80b4 	bne.w	8003b38 <HAL_RCC_OscConfig+0x690>
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	f003 0203 	and.w	r2, r3, #3
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039da:	429a      	cmp	r2, r3
 80039dc:	d123      	bne.n	8003a26 <HAL_RCC_OscConfig+0x57e>
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039e8:	429a      	cmp	r2, r3
 80039ea:	d11c      	bne.n	8003a26 <HAL_RCC_OscConfig+0x57e>
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	0a1b      	lsrs	r3, r3, #8
 80039f0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039f8:	429a      	cmp	r2, r3
 80039fa:	d114      	bne.n	8003a26 <HAL_RCC_OscConfig+0x57e>
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a06:	429a      	cmp	r2, r3
 8003a08:	d10d      	bne.n	8003a26 <HAL_RCC_OscConfig+0x57e>
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a14:	429a      	cmp	r2, r3
 8003a16:	d106      	bne.n	8003a26 <HAL_RCC_OscConfig+0x57e>
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a22:	429a      	cmp	r2, r3
 8003a24:	d05d      	beq.n	8003ae2 <HAL_RCC_OscConfig+0x63a>
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	2b0c      	cmp	r3, #12
 8003a2a:	d058      	beq.n	8003ade <HAL_RCC_OscConfig+0x636>
 8003a2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d001      	beq.n	8003a3e <HAL_RCC_OscConfig+0x596>
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e0a1      	b.n	8003b82 <HAL_RCC_OscConfig+0x6da>
 8003a3e:	f7ff fc84 	bl	800334a <LL_RCC_PLL_Disable>
 8003a42:	f7fe fc6d 	bl	8002320 <HAL_GetTick>
 8003a46:	6278      	str	r0, [r7, #36]	; 0x24
 8003a48:	e008      	b.n	8003a5c <HAL_RCC_OscConfig+0x5b4>
 8003a4a:	f7fe fc69 	bl	8002320 <HAL_GetTick>
 8003a4e:	4602      	mov	r2, r0
 8003a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a52:	1ad3      	subs	r3, r2, r3
 8003a54:	2b02      	cmp	r3, #2
 8003a56:	d901      	bls.n	8003a5c <HAL_RCC_OscConfig+0x5b4>
 8003a58:	2303      	movs	r3, #3
 8003a5a:	e092      	b.n	8003b82 <HAL_RCC_OscConfig+0x6da>
 8003a5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d1ef      	bne.n	8003a4a <HAL_RCC_OscConfig+0x5a2>
 8003a6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a6e:	68da      	ldr	r2, [r3, #12]
 8003a70:	4b30      	ldr	r3, [pc, #192]	; (8003b34 <HAL_RCC_OscConfig+0x68c>)
 8003a72:	4013      	ands	r3, r2
 8003a74:	687a      	ldr	r2, [r7, #4]
 8003a76:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8003a78:	687a      	ldr	r2, [r7, #4]
 8003a7a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003a7c:	4311      	orrs	r1, r2
 8003a7e:	687a      	ldr	r2, [r7, #4]
 8003a80:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003a82:	0212      	lsls	r2, r2, #8
 8003a84:	4311      	orrs	r1, r2
 8003a86:	687a      	ldr	r2, [r7, #4]
 8003a88:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003a8a:	4311      	orrs	r1, r2
 8003a8c:	687a      	ldr	r2, [r7, #4]
 8003a8e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003a90:	4311      	orrs	r1, r2
 8003a92:	687a      	ldr	r2, [r7, #4]
 8003a94:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003a96:	430a      	orrs	r2, r1
 8003a98:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	60cb      	str	r3, [r1, #12]
 8003aa0:	f7ff fc44 	bl	800332c <LL_RCC_PLL_Enable>
 8003aa4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003aa8:	68db      	ldr	r3, [r3, #12]
 8003aaa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003aae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ab2:	60d3      	str	r3, [r2, #12]
 8003ab4:	f7fe fc34 	bl	8002320 <HAL_GetTick>
 8003ab8:	6278      	str	r0, [r7, #36]	; 0x24
 8003aba:	e008      	b.n	8003ace <HAL_RCC_OscConfig+0x626>
 8003abc:	f7fe fc30 	bl	8002320 <HAL_GetTick>
 8003ac0:	4602      	mov	r2, r0
 8003ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac4:	1ad3      	subs	r3, r2, r3
 8003ac6:	2b02      	cmp	r3, #2
 8003ac8:	d901      	bls.n	8003ace <HAL_RCC_OscConfig+0x626>
 8003aca:	2303      	movs	r3, #3
 8003acc:	e059      	b.n	8003b82 <HAL_RCC_OscConfig+0x6da>
 8003ace:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d0ef      	beq.n	8003abc <HAL_RCC_OscConfig+0x614>
 8003adc:	e050      	b.n	8003b80 <HAL_RCC_OscConfig+0x6d8>
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e04f      	b.n	8003b82 <HAL_RCC_OscConfig+0x6da>
 8003ae2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d147      	bne.n	8003b80 <HAL_RCC_OscConfig+0x6d8>
 8003af0:	f7ff fc1c 	bl	800332c <LL_RCC_PLL_Enable>
 8003af4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003af8:	68db      	ldr	r3, [r3, #12]
 8003afa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003afe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b02:	60d3      	str	r3, [r2, #12]
 8003b04:	f7fe fc0c 	bl	8002320 <HAL_GetTick>
 8003b08:	6278      	str	r0, [r7, #36]	; 0x24
 8003b0a:	e008      	b.n	8003b1e <HAL_RCC_OscConfig+0x676>
 8003b0c:	f7fe fc08 	bl	8002320 <HAL_GetTick>
 8003b10:	4602      	mov	r2, r0
 8003b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b14:	1ad3      	subs	r3, r2, r3
 8003b16:	2b02      	cmp	r3, #2
 8003b18:	d901      	bls.n	8003b1e <HAL_RCC_OscConfig+0x676>
 8003b1a:	2303      	movs	r3, #3
 8003b1c:	e031      	b.n	8003b82 <HAL_RCC_OscConfig+0x6da>
 8003b1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d0ef      	beq.n	8003b0c <HAL_RCC_OscConfig+0x664>
 8003b2c:	e028      	b.n	8003b80 <HAL_RCC_OscConfig+0x6d8>
 8003b2e:	bf00      	nop
 8003b30:	58000400 	.word	0x58000400
 8003b34:	11c1808c 	.word	0x11c1808c
 8003b38:	693b      	ldr	r3, [r7, #16]
 8003b3a:	2b0c      	cmp	r3, #12
 8003b3c:	d01e      	beq.n	8003b7c <HAL_RCC_OscConfig+0x6d4>
 8003b3e:	f7ff fc04 	bl	800334a <LL_RCC_PLL_Disable>
 8003b42:	f7fe fbed 	bl	8002320 <HAL_GetTick>
 8003b46:	6278      	str	r0, [r7, #36]	; 0x24
 8003b48:	e008      	b.n	8003b5c <HAL_RCC_OscConfig+0x6b4>
 8003b4a:	f7fe fbe9 	bl	8002320 <HAL_GetTick>
 8003b4e:	4602      	mov	r2, r0
 8003b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b52:	1ad3      	subs	r3, r2, r3
 8003b54:	2b02      	cmp	r3, #2
 8003b56:	d901      	bls.n	8003b5c <HAL_RCC_OscConfig+0x6b4>
 8003b58:	2303      	movs	r3, #3
 8003b5a:	e012      	b.n	8003b82 <HAL_RCC_OscConfig+0x6da>
 8003b5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d1ef      	bne.n	8003b4a <HAL_RCC_OscConfig+0x6a2>
 8003b6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b6e:	68da      	ldr	r2, [r3, #12]
 8003b70:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003b74:	4b05      	ldr	r3, [pc, #20]	; (8003b8c <HAL_RCC_OscConfig+0x6e4>)
 8003b76:	4013      	ands	r3, r2
 8003b78:	60cb      	str	r3, [r1, #12]
 8003b7a:	e001      	b.n	8003b80 <HAL_RCC_OscConfig+0x6d8>
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	e000      	b.n	8003b82 <HAL_RCC_OscConfig+0x6da>
 8003b80:	2300      	movs	r3, #0
 8003b82:	4618      	mov	r0, r3
 8003b84:	3734      	adds	r7, #52	; 0x34
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd90      	pop	{r4, r7, pc}
 8003b8a:	bf00      	nop
 8003b8c:	eefefffc 	.word	0xeefefffc

08003b90 <HAL_RCC_ClockConfig>:
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b084      	sub	sp, #16
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
 8003b98:	6039      	str	r1, [r7, #0]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d101      	bne.n	8003ba4 <HAL_RCC_ClockConfig+0x14>
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	e12d      	b.n	8003e00 <HAL_RCC_ClockConfig+0x270>
 8003ba4:	4b98      	ldr	r3, [pc, #608]	; (8003e08 <HAL_RCC_ClockConfig+0x278>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f003 0307 	and.w	r3, r3, #7
 8003bac:	683a      	ldr	r2, [r7, #0]
 8003bae:	429a      	cmp	r2, r3
 8003bb0:	d91b      	bls.n	8003bea <HAL_RCC_ClockConfig+0x5a>
 8003bb2:	4b95      	ldr	r3, [pc, #596]	; (8003e08 <HAL_RCC_ClockConfig+0x278>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f023 0207 	bic.w	r2, r3, #7
 8003bba:	4993      	ldr	r1, [pc, #588]	; (8003e08 <HAL_RCC_ClockConfig+0x278>)
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	600b      	str	r3, [r1, #0]
 8003bc2:	f7fe fbad 	bl	8002320 <HAL_GetTick>
 8003bc6:	60f8      	str	r0, [r7, #12]
 8003bc8:	e008      	b.n	8003bdc <HAL_RCC_ClockConfig+0x4c>
 8003bca:	f7fe fba9 	bl	8002320 <HAL_GetTick>
 8003bce:	4602      	mov	r2, r0
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	1ad3      	subs	r3, r2, r3
 8003bd4:	2b02      	cmp	r3, #2
 8003bd6:	d901      	bls.n	8003bdc <HAL_RCC_ClockConfig+0x4c>
 8003bd8:	2303      	movs	r3, #3
 8003bda:	e111      	b.n	8003e00 <HAL_RCC_ClockConfig+0x270>
 8003bdc:	4b8a      	ldr	r3, [pc, #552]	; (8003e08 <HAL_RCC_ClockConfig+0x278>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f003 0307 	and.w	r3, r3, #7
 8003be4:	683a      	ldr	r2, [r7, #0]
 8003be6:	429a      	cmp	r2, r3
 8003be8:	d1ef      	bne.n	8003bca <HAL_RCC_ClockConfig+0x3a>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f003 0302 	and.w	r3, r3, #2
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d016      	beq.n	8003c24 <HAL_RCC_ClockConfig+0x94>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	689b      	ldr	r3, [r3, #8]
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f7ff fafb 	bl	80031f6 <LL_RCC_SetAHBPrescaler>
 8003c00:	f7fe fb8e 	bl	8002320 <HAL_GetTick>
 8003c04:	60f8      	str	r0, [r7, #12]
 8003c06:	e008      	b.n	8003c1a <HAL_RCC_ClockConfig+0x8a>
 8003c08:	f7fe fb8a 	bl	8002320 <HAL_GetTick>
 8003c0c:	4602      	mov	r2, r0
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	1ad3      	subs	r3, r2, r3
 8003c12:	2b02      	cmp	r3, #2
 8003c14:	d901      	bls.n	8003c1a <HAL_RCC_ClockConfig+0x8a>
 8003c16:	2303      	movs	r3, #3
 8003c18:	e0f2      	b.n	8003e00 <HAL_RCC_ClockConfig+0x270>
 8003c1a:	f7ff fbe8 	bl	80033ee <LL_RCC_IsActiveFlag_HPRE>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d0f1      	beq.n	8003c08 <HAL_RCC_ClockConfig+0x78>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f003 0320 	and.w	r3, r3, #32
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d016      	beq.n	8003c5e <HAL_RCC_ClockConfig+0xce>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	695b      	ldr	r3, [r3, #20]
 8003c34:	4618      	mov	r0, r3
 8003c36:	f7ff faf2 	bl	800321e <LL_C2_RCC_SetAHBPrescaler>
 8003c3a:	f7fe fb71 	bl	8002320 <HAL_GetTick>
 8003c3e:	60f8      	str	r0, [r7, #12]
 8003c40:	e008      	b.n	8003c54 <HAL_RCC_ClockConfig+0xc4>
 8003c42:	f7fe fb6d 	bl	8002320 <HAL_GetTick>
 8003c46:	4602      	mov	r2, r0
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	1ad3      	subs	r3, r2, r3
 8003c4c:	2b02      	cmp	r3, #2
 8003c4e:	d901      	bls.n	8003c54 <HAL_RCC_ClockConfig+0xc4>
 8003c50:	2303      	movs	r3, #3
 8003c52:	e0d5      	b.n	8003e00 <HAL_RCC_ClockConfig+0x270>
 8003c54:	f7ff fbdd 	bl	8003412 <LL_RCC_IsActiveFlag_C2HPRE>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d0f1      	beq.n	8003c42 <HAL_RCC_ClockConfig+0xb2>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d016      	beq.n	8003c98 <HAL_RCC_ClockConfig+0x108>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	699b      	ldr	r3, [r3, #24]
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f7ff faeb 	bl	800324a <LL_RCC_SetAHB4Prescaler>
 8003c74:	f7fe fb54 	bl	8002320 <HAL_GetTick>
 8003c78:	60f8      	str	r0, [r7, #12]
 8003c7a:	e008      	b.n	8003c8e <HAL_RCC_ClockConfig+0xfe>
 8003c7c:	f7fe fb50 	bl	8002320 <HAL_GetTick>
 8003c80:	4602      	mov	r2, r0
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	1ad3      	subs	r3, r2, r3
 8003c86:	2b02      	cmp	r3, #2
 8003c88:	d901      	bls.n	8003c8e <HAL_RCC_ClockConfig+0xfe>
 8003c8a:	2303      	movs	r3, #3
 8003c8c:	e0b8      	b.n	8003e00 <HAL_RCC_ClockConfig+0x270>
 8003c8e:	f7ff fbd3 	bl	8003438 <LL_RCC_IsActiveFlag_SHDHPRE>
 8003c92:	4603      	mov	r3, r0
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d0f1      	beq.n	8003c7c <HAL_RCC_ClockConfig+0xec>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f003 0304 	and.w	r3, r3, #4
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d016      	beq.n	8003cd2 <HAL_RCC_ClockConfig+0x142>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	68db      	ldr	r3, [r3, #12]
 8003ca8:	4618      	mov	r0, r3
 8003caa:	f7ff fae5 	bl	8003278 <LL_RCC_SetAPB1Prescaler>
 8003cae:	f7fe fb37 	bl	8002320 <HAL_GetTick>
 8003cb2:	60f8      	str	r0, [r7, #12]
 8003cb4:	e008      	b.n	8003cc8 <HAL_RCC_ClockConfig+0x138>
 8003cb6:	f7fe fb33 	bl	8002320 <HAL_GetTick>
 8003cba:	4602      	mov	r2, r0
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	1ad3      	subs	r3, r2, r3
 8003cc0:	2b02      	cmp	r3, #2
 8003cc2:	d901      	bls.n	8003cc8 <HAL_RCC_ClockConfig+0x138>
 8003cc4:	2303      	movs	r3, #3
 8003cc6:	e09b      	b.n	8003e00 <HAL_RCC_ClockConfig+0x270>
 8003cc8:	f7ff fbc9 	bl	800345e <LL_RCC_IsActiveFlag_PPRE1>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d0f1      	beq.n	8003cb6 <HAL_RCC_ClockConfig+0x126>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f003 0308 	and.w	r3, r3, #8
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d017      	beq.n	8003d0e <HAL_RCC_ClockConfig+0x17e>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	691b      	ldr	r3, [r3, #16]
 8003ce2:	00db      	lsls	r3, r3, #3
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	f7ff fadb 	bl	80032a0 <LL_RCC_SetAPB2Prescaler>
 8003cea:	f7fe fb19 	bl	8002320 <HAL_GetTick>
 8003cee:	60f8      	str	r0, [r7, #12]
 8003cf0:	e008      	b.n	8003d04 <HAL_RCC_ClockConfig+0x174>
 8003cf2:	f7fe fb15 	bl	8002320 <HAL_GetTick>
 8003cf6:	4602      	mov	r2, r0
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	1ad3      	subs	r3, r2, r3
 8003cfc:	2b02      	cmp	r3, #2
 8003cfe:	d901      	bls.n	8003d04 <HAL_RCC_ClockConfig+0x174>
 8003d00:	2303      	movs	r3, #3
 8003d02:	e07d      	b.n	8003e00 <HAL_RCC_ClockConfig+0x270>
 8003d04:	f7ff fbbd 	bl	8003482 <LL_RCC_IsActiveFlag_PPRE2>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d0f1      	beq.n	8003cf2 <HAL_RCC_ClockConfig+0x162>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f003 0301 	and.w	r3, r3, #1
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d043      	beq.n	8003da2 <HAL_RCC_ClockConfig+0x212>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	2b02      	cmp	r3, #2
 8003d20:	d106      	bne.n	8003d30 <HAL_RCC_ClockConfig+0x1a0>
 8003d22:	f7ff f87b 	bl	8002e1c <LL_RCC_HSE_IsReady>
 8003d26:	4603      	mov	r3, r0
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d11e      	bne.n	8003d6a <HAL_RCC_ClockConfig+0x1da>
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	e067      	b.n	8003e00 <HAL_RCC_ClockConfig+0x270>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	2b03      	cmp	r3, #3
 8003d36:	d106      	bne.n	8003d46 <HAL_RCC_ClockConfig+0x1b6>
 8003d38:	f7ff fb16 	bl	8003368 <LL_RCC_PLL_IsReady>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d113      	bne.n	8003d6a <HAL_RCC_ClockConfig+0x1da>
 8003d42:	2301      	movs	r3, #1
 8003d44:	e05c      	b.n	8003e00 <HAL_RCC_ClockConfig+0x270>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d106      	bne.n	8003d5c <HAL_RCC_ClockConfig+0x1cc>
 8003d4e:	f7ff f9e3 	bl	8003118 <LL_RCC_MSI_IsReady>
 8003d52:	4603      	mov	r3, r0
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d108      	bne.n	8003d6a <HAL_RCC_ClockConfig+0x1da>
 8003d58:	2301      	movs	r3, #1
 8003d5a:	e051      	b.n	8003e00 <HAL_RCC_ClockConfig+0x270>
 8003d5c:	f7ff f88e 	bl	8002e7c <LL_RCC_HSI_IsReady>
 8003d60:	4603      	mov	r3, r0
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d101      	bne.n	8003d6a <HAL_RCC_ClockConfig+0x1da>
 8003d66:	2301      	movs	r3, #1
 8003d68:	e04a      	b.n	8003e00 <HAL_RCC_ClockConfig+0x270>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f7ff fa21 	bl	80031b6 <LL_RCC_SetSysClkSource>
 8003d74:	f7fe fad4 	bl	8002320 <HAL_GetTick>
 8003d78:	60f8      	str	r0, [r7, #12]
 8003d7a:	e00a      	b.n	8003d92 <HAL_RCC_ClockConfig+0x202>
 8003d7c:	f7fe fad0 	bl	8002320 <HAL_GetTick>
 8003d80:	4602      	mov	r2, r0
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	1ad3      	subs	r3, r2, r3
 8003d86:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d901      	bls.n	8003d92 <HAL_RCC_ClockConfig+0x202>
 8003d8e:	2303      	movs	r3, #3
 8003d90:	e036      	b.n	8003e00 <HAL_RCC_ClockConfig+0x270>
 8003d92:	f7ff fa24 	bl	80031de <LL_RCC_GetSysClkSource>
 8003d96:	4602      	mov	r2, r0
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	009b      	lsls	r3, r3, #2
 8003d9e:	429a      	cmp	r2, r3
 8003da0:	d1ec      	bne.n	8003d7c <HAL_RCC_ClockConfig+0x1ec>
 8003da2:	4b19      	ldr	r3, [pc, #100]	; (8003e08 <HAL_RCC_ClockConfig+0x278>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f003 0307 	and.w	r3, r3, #7
 8003daa:	683a      	ldr	r2, [r7, #0]
 8003dac:	429a      	cmp	r2, r3
 8003dae:	d21b      	bcs.n	8003de8 <HAL_RCC_ClockConfig+0x258>
 8003db0:	4b15      	ldr	r3, [pc, #84]	; (8003e08 <HAL_RCC_ClockConfig+0x278>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f023 0207 	bic.w	r2, r3, #7
 8003db8:	4913      	ldr	r1, [pc, #76]	; (8003e08 <HAL_RCC_ClockConfig+0x278>)
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	600b      	str	r3, [r1, #0]
 8003dc0:	f7fe faae 	bl	8002320 <HAL_GetTick>
 8003dc4:	60f8      	str	r0, [r7, #12]
 8003dc6:	e008      	b.n	8003dda <HAL_RCC_ClockConfig+0x24a>
 8003dc8:	f7fe faaa 	bl	8002320 <HAL_GetTick>
 8003dcc:	4602      	mov	r2, r0
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	1ad3      	subs	r3, r2, r3
 8003dd2:	2b02      	cmp	r3, #2
 8003dd4:	d901      	bls.n	8003dda <HAL_RCC_ClockConfig+0x24a>
 8003dd6:	2303      	movs	r3, #3
 8003dd8:	e012      	b.n	8003e00 <HAL_RCC_ClockConfig+0x270>
 8003dda:	4b0b      	ldr	r3, [pc, #44]	; (8003e08 <HAL_RCC_ClockConfig+0x278>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f003 0307 	and.w	r3, r3, #7
 8003de2:	683a      	ldr	r2, [r7, #0]
 8003de4:	429a      	cmp	r2, r3
 8003de6:	d1ef      	bne.n	8003dc8 <HAL_RCC_ClockConfig+0x238>
 8003de8:	f000 f87e 	bl	8003ee8 <HAL_RCC_GetHCLKFreq>
 8003dec:	4603      	mov	r3, r0
 8003dee:	4a07      	ldr	r2, [pc, #28]	; (8003e0c <HAL_RCC_ClockConfig+0x27c>)
 8003df0:	6013      	str	r3, [r2, #0]
 8003df2:	f7fe faa1 	bl	8002338 <HAL_GetTickPrio>
 8003df6:	4603      	mov	r3, r0
 8003df8:	4618      	mov	r0, r3
 8003dfa:	f7fe fa43 	bl	8002284 <HAL_InitTick>
 8003dfe:	4603      	mov	r3, r0
 8003e00:	4618      	mov	r0, r3
 8003e02:	3710      	adds	r7, #16
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bd80      	pop	{r7, pc}
 8003e08:	58004000 	.word	0x58004000
 8003e0c:	20000008 	.word	0x20000008

08003e10 <HAL_RCC_GetSysClockFreq>:
 8003e10:	b590      	push	{r4, r7, lr}
 8003e12:	b085      	sub	sp, #20
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	f7ff f9e2 	bl	80031de <LL_RCC_GetSysClkSource>
 8003e1a:	6078      	str	r0, [r7, #4]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d10a      	bne.n	8003e38 <HAL_RCC_GetSysClockFreq+0x28>
 8003e22:	f7ff f99e 	bl	8003162 <LL_RCC_MSI_GetRange>
 8003e26:	4603      	mov	r3, r0
 8003e28:	091b      	lsrs	r3, r3, #4
 8003e2a:	f003 030f 	and.w	r3, r3, #15
 8003e2e:	4a2b      	ldr	r2, [pc, #172]	; (8003edc <HAL_RCC_GetSysClockFreq+0xcc>)
 8003e30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e34:	60fb      	str	r3, [r7, #12]
 8003e36:	e04b      	b.n	8003ed0 <HAL_RCC_GetSysClockFreq+0xc0>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2b04      	cmp	r3, #4
 8003e3c:	d102      	bne.n	8003e44 <HAL_RCC_GetSysClockFreq+0x34>
 8003e3e:	4b28      	ldr	r3, [pc, #160]	; (8003ee0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003e40:	60fb      	str	r3, [r7, #12]
 8003e42:	e045      	b.n	8003ed0 <HAL_RCC_GetSysClockFreq+0xc0>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2b08      	cmp	r3, #8
 8003e48:	d10a      	bne.n	8003e60 <HAL_RCC_GetSysClockFreq+0x50>
 8003e4a:	f7fe ffb7 	bl	8002dbc <LL_RCC_HSE_IsEnabledDiv2>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	2b01      	cmp	r3, #1
 8003e52:	d102      	bne.n	8003e5a <HAL_RCC_GetSysClockFreq+0x4a>
 8003e54:	4b22      	ldr	r3, [pc, #136]	; (8003ee0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003e56:	60fb      	str	r3, [r7, #12]
 8003e58:	e03a      	b.n	8003ed0 <HAL_RCC_GetSysClockFreq+0xc0>
 8003e5a:	4b22      	ldr	r3, [pc, #136]	; (8003ee4 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003e5c:	60fb      	str	r3, [r7, #12]
 8003e5e:	e037      	b.n	8003ed0 <HAL_RCC_GetSysClockFreq+0xc0>
 8003e60:	f7ff fab9 	bl	80033d6 <LL_RCC_PLL_GetMainSource>
 8003e64:	6038      	str	r0, [r7, #0]
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	2b02      	cmp	r3, #2
 8003e6a:	d003      	beq.n	8003e74 <HAL_RCC_GetSysClockFreq+0x64>
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	2b03      	cmp	r3, #3
 8003e70:	d003      	beq.n	8003e7a <HAL_RCC_GetSysClockFreq+0x6a>
 8003e72:	e00d      	b.n	8003e90 <HAL_RCC_GetSysClockFreq+0x80>
 8003e74:	4b1a      	ldr	r3, [pc, #104]	; (8003ee0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003e76:	60bb      	str	r3, [r7, #8]
 8003e78:	e015      	b.n	8003ea6 <HAL_RCC_GetSysClockFreq+0x96>
 8003e7a:	f7fe ff9f 	bl	8002dbc <LL_RCC_HSE_IsEnabledDiv2>
 8003e7e:	4603      	mov	r3, r0
 8003e80:	2b01      	cmp	r3, #1
 8003e82:	d102      	bne.n	8003e8a <HAL_RCC_GetSysClockFreq+0x7a>
 8003e84:	4b16      	ldr	r3, [pc, #88]	; (8003ee0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003e86:	60bb      	str	r3, [r7, #8]
 8003e88:	e00d      	b.n	8003ea6 <HAL_RCC_GetSysClockFreq+0x96>
 8003e8a:	4b16      	ldr	r3, [pc, #88]	; (8003ee4 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003e8c:	60bb      	str	r3, [r7, #8]
 8003e8e:	e00a      	b.n	8003ea6 <HAL_RCC_GetSysClockFreq+0x96>
 8003e90:	f7ff f967 	bl	8003162 <LL_RCC_MSI_GetRange>
 8003e94:	4603      	mov	r3, r0
 8003e96:	091b      	lsrs	r3, r3, #4
 8003e98:	f003 030f 	and.w	r3, r3, #15
 8003e9c:	4a0f      	ldr	r2, [pc, #60]	; (8003edc <HAL_RCC_GetSysClockFreq+0xcc>)
 8003e9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ea2:	60bb      	str	r3, [r7, #8]
 8003ea4:	bf00      	nop
 8003ea6:	f7ff fa71 	bl	800338c <LL_RCC_PLL_GetN>
 8003eaa:	4602      	mov	r2, r0
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	fb03 f402 	mul.w	r4, r3, r2
 8003eb2:	f7ff fa84 	bl	80033be <LL_RCC_PLL_GetDivider>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	091b      	lsrs	r3, r3, #4
 8003eba:	3301      	adds	r3, #1
 8003ebc:	fbb4 f4f3 	udiv	r4, r4, r3
 8003ec0:	f7ff fa71 	bl	80033a6 <LL_RCC_PLL_GetR>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	0f5b      	lsrs	r3, r3, #29
 8003ec8:	3301      	adds	r3, #1
 8003eca:	fbb4 f3f3 	udiv	r3, r4, r3
 8003ece:	60fb      	str	r3, [r7, #12]
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	3714      	adds	r7, #20
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd90      	pop	{r4, r7, pc}
 8003eda:	bf00      	nop
 8003edc:	08009e18 	.word	0x08009e18
 8003ee0:	00f42400 	.word	0x00f42400
 8003ee4:	01e84800 	.word	0x01e84800

08003ee8 <HAL_RCC_GetHCLKFreq>:
 8003ee8:	b598      	push	{r3, r4, r7, lr}
 8003eea:	af00      	add	r7, sp, #0
 8003eec:	f7ff ff90 	bl	8003e10 <HAL_RCC_GetSysClockFreq>
 8003ef0:	4604      	mov	r4, r0
 8003ef2:	f7ff f9e9 	bl	80032c8 <LL_RCC_GetAHBPrescaler>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	091b      	lsrs	r3, r3, #4
 8003efa:	f003 030f 	and.w	r3, r3, #15
 8003efe:	4a03      	ldr	r2, [pc, #12]	; (8003f0c <HAL_RCC_GetHCLKFreq+0x24>)
 8003f00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f04:	fbb4 f3f3 	udiv	r3, r4, r3
 8003f08:	4618      	mov	r0, r3
 8003f0a:	bd98      	pop	{r3, r4, r7, pc}
 8003f0c:	08009db8 	.word	0x08009db8

08003f10 <HAL_RCC_GetPCLK1Freq>:
 8003f10:	b598      	push	{r3, r4, r7, lr}
 8003f12:	af00      	add	r7, sp, #0
 8003f14:	f7ff ffe8 	bl	8003ee8 <HAL_RCC_GetHCLKFreq>
 8003f18:	4604      	mov	r4, r0
 8003f1a:	f7ff f9ef 	bl	80032fc <LL_RCC_GetAPB1Prescaler>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	0a1b      	lsrs	r3, r3, #8
 8003f22:	f003 0307 	and.w	r3, r3, #7
 8003f26:	4a04      	ldr	r2, [pc, #16]	; (8003f38 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003f28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f2c:	f003 031f 	and.w	r3, r3, #31
 8003f30:	fa24 f303 	lsr.w	r3, r4, r3
 8003f34:	4618      	mov	r0, r3
 8003f36:	bd98      	pop	{r3, r4, r7, pc}
 8003f38:	08009df8 	.word	0x08009df8

08003f3c <HAL_RCC_GetPCLK2Freq>:
 8003f3c:	b598      	push	{r3, r4, r7, lr}
 8003f3e:	af00      	add	r7, sp, #0
 8003f40:	f7ff ffd2 	bl	8003ee8 <HAL_RCC_GetHCLKFreq>
 8003f44:	4604      	mov	r4, r0
 8003f46:	f7ff f9e5 	bl	8003314 <LL_RCC_GetAPB2Prescaler>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	0adb      	lsrs	r3, r3, #11
 8003f4e:	f003 0307 	and.w	r3, r3, #7
 8003f52:	4a04      	ldr	r2, [pc, #16]	; (8003f64 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003f54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f58:	f003 031f 	and.w	r3, r3, #31
 8003f5c:	fa24 f303 	lsr.w	r3, r4, r3
 8003f60:	4618      	mov	r0, r3
 8003f62:	bd98      	pop	{r3, r4, r7, pc}
 8003f64:	08009df8 	.word	0x08009df8

08003f68 <RCC_SetFlashLatencyFromMSIRange>:
 8003f68:	b590      	push	{r4, r7, lr}
 8003f6a:	b085      	sub	sp, #20
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2bb0      	cmp	r3, #176	; 0xb0
 8003f74:	d903      	bls.n	8003f7e <RCC_SetFlashLatencyFromMSIRange+0x16>
 8003f76:	4b15      	ldr	r3, [pc, #84]	; (8003fcc <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8003f78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f7a:	60fb      	str	r3, [r7, #12]
 8003f7c:	e007      	b.n	8003f8e <RCC_SetFlashLatencyFromMSIRange+0x26>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	091b      	lsrs	r3, r3, #4
 8003f82:	f003 030f 	and.w	r3, r3, #15
 8003f86:	4a11      	ldr	r2, [pc, #68]	; (8003fcc <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8003f88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f8c:	60fb      	str	r3, [r7, #12]
 8003f8e:	f7ff f9a7 	bl	80032e0 <LL_RCC_GetAHB4Prescaler>
 8003f92:	4603      	mov	r3, r0
 8003f94:	091b      	lsrs	r3, r3, #4
 8003f96:	f003 030f 	and.w	r3, r3, #15
 8003f9a:	4a0d      	ldr	r2, [pc, #52]	; (8003fd0 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8003f9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fa0:	68fa      	ldr	r2, [r7, #12]
 8003fa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fa6:	60bb      	str	r3, [r7, #8]
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	4a0a      	ldr	r2, [pc, #40]	; (8003fd4 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8003fac:	fba2 2303 	umull	r2, r3, r2, r3
 8003fb0:	0c9c      	lsrs	r4, r3, #18
 8003fb2:	f7fe fef5 	bl	8002da0 <HAL_PWREx_GetVoltageRange>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	4619      	mov	r1, r3
 8003fba:	4620      	mov	r0, r4
 8003fbc:	f000 f80c 	bl	8003fd8 <RCC_SetFlashLatency>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	3714      	adds	r7, #20
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd90      	pop	{r4, r7, pc}
 8003fca:	bf00      	nop
 8003fcc:	08009e18 	.word	0x08009e18
 8003fd0:	08009db8 	.word	0x08009db8
 8003fd4:	431bde83 	.word	0x431bde83

08003fd8 <RCC_SetFlashLatency>:
 8003fd8:	b590      	push	{r4, r7, lr}
 8003fda:	b093      	sub	sp, #76	; 0x4c
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
 8003fe0:	6039      	str	r1, [r7, #0]
 8003fe2:	4b37      	ldr	r3, [pc, #220]	; (80040c0 <RCC_SetFlashLatency+0xe8>)
 8003fe4:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8003fe8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003fea:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8003fee:	4a35      	ldr	r2, [pc, #212]	; (80040c4 <RCC_SetFlashLatency+0xec>)
 8003ff0:	f107 031c 	add.w	r3, r7, #28
 8003ff4:	ca07      	ldmia	r2, {r0, r1, r2}
 8003ff6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003ffa:	4b33      	ldr	r3, [pc, #204]	; (80040c8 <RCC_SetFlashLatency+0xf0>)
 8003ffc:	f107 040c 	add.w	r4, r7, #12
 8004000:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004002:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8004006:	2300      	movs	r3, #0
 8004008:	647b      	str	r3, [r7, #68]	; 0x44
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004010:	d11a      	bne.n	8004048 <RCC_SetFlashLatency+0x70>
 8004012:	2300      	movs	r3, #0
 8004014:	643b      	str	r3, [r7, #64]	; 0x40
 8004016:	e013      	b.n	8004040 <RCC_SetFlashLatency+0x68>
 8004018:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800401a:	009b      	lsls	r3, r3, #2
 800401c:	3348      	adds	r3, #72	; 0x48
 800401e:	443b      	add	r3, r7
 8004020:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8004024:	687a      	ldr	r2, [r7, #4]
 8004026:	429a      	cmp	r2, r3
 8004028:	d807      	bhi.n	800403a <RCC_SetFlashLatency+0x62>
 800402a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800402c:	009b      	lsls	r3, r3, #2
 800402e:	3348      	adds	r3, #72	; 0x48
 8004030:	443b      	add	r3, r7
 8004032:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8004036:	647b      	str	r3, [r7, #68]	; 0x44
 8004038:	e020      	b.n	800407c <RCC_SetFlashLatency+0xa4>
 800403a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800403c:	3301      	adds	r3, #1
 800403e:	643b      	str	r3, [r7, #64]	; 0x40
 8004040:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004042:	2b03      	cmp	r3, #3
 8004044:	d9e8      	bls.n	8004018 <RCC_SetFlashLatency+0x40>
 8004046:	e019      	b.n	800407c <RCC_SetFlashLatency+0xa4>
 8004048:	2300      	movs	r3, #0
 800404a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800404c:	e013      	b.n	8004076 <RCC_SetFlashLatency+0x9e>
 800404e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004050:	009b      	lsls	r3, r3, #2
 8004052:	3348      	adds	r3, #72	; 0x48
 8004054:	443b      	add	r3, r7
 8004056:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800405a:	687a      	ldr	r2, [r7, #4]
 800405c:	429a      	cmp	r2, r3
 800405e:	d807      	bhi.n	8004070 <RCC_SetFlashLatency+0x98>
 8004060:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004062:	009b      	lsls	r3, r3, #2
 8004064:	3348      	adds	r3, #72	; 0x48
 8004066:	443b      	add	r3, r7
 8004068:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800406c:	647b      	str	r3, [r7, #68]	; 0x44
 800406e:	e005      	b.n	800407c <RCC_SetFlashLatency+0xa4>
 8004070:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004072:	3301      	adds	r3, #1
 8004074:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004076:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004078:	2b02      	cmp	r3, #2
 800407a:	d9e8      	bls.n	800404e <RCC_SetFlashLatency+0x76>
 800407c:	4b13      	ldr	r3, [pc, #76]	; (80040cc <RCC_SetFlashLatency+0xf4>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f023 0207 	bic.w	r2, r3, #7
 8004084:	4911      	ldr	r1, [pc, #68]	; (80040cc <RCC_SetFlashLatency+0xf4>)
 8004086:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004088:	4313      	orrs	r3, r2
 800408a:	600b      	str	r3, [r1, #0]
 800408c:	f7fe f948 	bl	8002320 <HAL_GetTick>
 8004090:	63b8      	str	r0, [r7, #56]	; 0x38
 8004092:	e008      	b.n	80040a6 <RCC_SetFlashLatency+0xce>
 8004094:	f7fe f944 	bl	8002320 <HAL_GetTick>
 8004098:	4602      	mov	r2, r0
 800409a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800409c:	1ad3      	subs	r3, r2, r3
 800409e:	2b02      	cmp	r3, #2
 80040a0:	d901      	bls.n	80040a6 <RCC_SetFlashLatency+0xce>
 80040a2:	2303      	movs	r3, #3
 80040a4:	e007      	b.n	80040b6 <RCC_SetFlashLatency+0xde>
 80040a6:	4b09      	ldr	r3, [pc, #36]	; (80040cc <RCC_SetFlashLatency+0xf4>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f003 0307 	and.w	r3, r3, #7
 80040ae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80040b0:	429a      	cmp	r2, r3
 80040b2:	d1ef      	bne.n	8004094 <RCC_SetFlashLatency+0xbc>
 80040b4:	2300      	movs	r3, #0
 80040b6:	4618      	mov	r0, r3
 80040b8:	374c      	adds	r7, #76	; 0x4c
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd90      	pop	{r4, r7, pc}
 80040be:	bf00      	nop
 80040c0:	08009c14 	.word	0x08009c14
 80040c4:	08009c24 	.word	0x08009c24
 80040c8:	08009c30 	.word	0x08009c30
 80040cc:	58004000 	.word	0x58004000

080040d0 <LL_RCC_LSE_IsEnabled>:
 80040d0:	b480      	push	{r7}
 80040d2:	af00      	add	r7, sp, #0
 80040d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040dc:	f003 0301 	and.w	r3, r3, #1
 80040e0:	2b01      	cmp	r3, #1
 80040e2:	d101      	bne.n	80040e8 <LL_RCC_LSE_IsEnabled+0x18>
 80040e4:	2301      	movs	r3, #1
 80040e6:	e000      	b.n	80040ea <LL_RCC_LSE_IsEnabled+0x1a>
 80040e8:	2300      	movs	r3, #0
 80040ea:	4618      	mov	r0, r3
 80040ec:	46bd      	mov	sp, r7
 80040ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f2:	4770      	bx	lr

080040f4 <LL_RCC_LSE_IsReady>:
 80040f4:	b480      	push	{r7}
 80040f6:	af00      	add	r7, sp, #0
 80040f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004100:	f003 0302 	and.w	r3, r3, #2
 8004104:	2b02      	cmp	r3, #2
 8004106:	d101      	bne.n	800410c <LL_RCC_LSE_IsReady+0x18>
 8004108:	2301      	movs	r3, #1
 800410a:	e000      	b.n	800410e <LL_RCC_LSE_IsReady+0x1a>
 800410c:	2300      	movs	r3, #0
 800410e:	4618      	mov	r0, r3
 8004110:	46bd      	mov	sp, r7
 8004112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004116:	4770      	bx	lr

08004118 <LL_RCC_SetRFWKPClockSource>:
 8004118:	b480      	push	{r7}
 800411a:	b083      	sub	sp, #12
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
 8004120:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004124:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004128:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800412c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	4313      	orrs	r3, r2
 8004134:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
 8004138:	bf00      	nop
 800413a:	370c      	adds	r7, #12
 800413c:	46bd      	mov	sp, r7
 800413e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004142:	4770      	bx	lr

08004144 <LL_RCC_SetSMPSClockSource>:
 8004144:	b480      	push	{r7}
 8004146:	b083      	sub	sp, #12
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
 800414c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004152:	f023 0203 	bic.w	r2, r3, #3
 8004156:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	4313      	orrs	r3, r2
 800415e:	624b      	str	r3, [r1, #36]	; 0x24
 8004160:	bf00      	nop
 8004162:	370c      	adds	r7, #12
 8004164:	46bd      	mov	sp, r7
 8004166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416a:	4770      	bx	lr

0800416c <LL_RCC_SetSMPSPrescaler>:
 800416c:	b480      	push	{r7}
 800416e:	b083      	sub	sp, #12
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
 8004174:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800417a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800417e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	4313      	orrs	r3, r2
 8004186:	624b      	str	r3, [r1, #36]	; 0x24
 8004188:	bf00      	nop
 800418a:	370c      	adds	r7, #12
 800418c:	46bd      	mov	sp, r7
 800418e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004192:	4770      	bx	lr

08004194 <LL_RCC_SetUSARTClockSource>:
 8004194:	b480      	push	{r7}
 8004196:	b083      	sub	sp, #12
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
 800419c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041a4:	f023 0203 	bic.w	r2, r3, #3
 80041a8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	4313      	orrs	r3, r2
 80041b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80041b4:	bf00      	nop
 80041b6:	370c      	adds	r7, #12
 80041b8:	46bd      	mov	sp, r7
 80041ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041be:	4770      	bx	lr

080041c0 <LL_RCC_SetLPUARTClockSource>:
 80041c0:	b480      	push	{r7}
 80041c2:	b083      	sub	sp, #12
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
 80041c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041d0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80041d4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	4313      	orrs	r3, r2
 80041dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80041e0:	bf00      	nop
 80041e2:	370c      	adds	r7, #12
 80041e4:	46bd      	mov	sp, r7
 80041e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ea:	4770      	bx	lr

080041ec <LL_RCC_SetI2CClockSource>:
 80041ec:	b480      	push	{r7}
 80041ee:	b083      	sub	sp, #12
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
 80041f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041f8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	091b      	lsrs	r3, r3, #4
 8004200:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8004204:	43db      	mvns	r3, r3
 8004206:	401a      	ands	r2, r3
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	011b      	lsls	r3, r3, #4
 800420c:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8004210:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004214:	4313      	orrs	r3, r2
 8004216:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800421a:	bf00      	nop
 800421c:	370c      	adds	r7, #12
 800421e:	46bd      	mov	sp, r7
 8004220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004224:	4770      	bx	lr

08004226 <LL_RCC_SetLPTIMClockSource>:
 8004226:	b480      	push	{r7}
 8004228:	b083      	sub	sp, #12
 800422a:	af00      	add	r7, sp, #0
 800422c:	6078      	str	r0, [r7, #4]
 800422e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004232:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	0c1b      	lsrs	r3, r3, #16
 800423a:	041b      	lsls	r3, r3, #16
 800423c:	43db      	mvns	r3, r3
 800423e:	401a      	ands	r2, r3
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	041b      	lsls	r3, r3, #16
 8004244:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004248:	4313      	orrs	r3, r2
 800424a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800424e:	bf00      	nop
 8004250:	370c      	adds	r7, #12
 8004252:	46bd      	mov	sp, r7
 8004254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004258:	4770      	bx	lr

0800425a <LL_RCC_SetSAIClockSource>:
 800425a:	b480      	push	{r7}
 800425c:	b083      	sub	sp, #12
 800425e:	af00      	add	r7, sp, #0
 8004260:	6078      	str	r0, [r7, #4]
 8004262:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004266:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800426a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800426e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	4313      	orrs	r3, r2
 8004276:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800427a:	bf00      	nop
 800427c:	370c      	adds	r7, #12
 800427e:	46bd      	mov	sp, r7
 8004280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004284:	4770      	bx	lr

08004286 <LL_RCC_SetRNGClockSource>:
 8004286:	b480      	push	{r7}
 8004288:	b083      	sub	sp, #12
 800428a:	af00      	add	r7, sp, #0
 800428c:	6078      	str	r0, [r7, #4]
 800428e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004292:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004296:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800429a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	4313      	orrs	r3, r2
 80042a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80042a6:	bf00      	nop
 80042a8:	370c      	adds	r7, #12
 80042aa:	46bd      	mov	sp, r7
 80042ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b0:	4770      	bx	lr

080042b2 <LL_RCC_SetCLK48ClockSource>:
 80042b2:	b480      	push	{r7}
 80042b4:	b083      	sub	sp, #12
 80042b6:	af00      	add	r7, sp, #0
 80042b8:	6078      	str	r0, [r7, #4]
 80042ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042c2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80042c6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	4313      	orrs	r3, r2
 80042ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80042d2:	bf00      	nop
 80042d4:	370c      	adds	r7, #12
 80042d6:	46bd      	mov	sp, r7
 80042d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042dc:	4770      	bx	lr

080042de <LL_RCC_SetUSBClockSource>:
 80042de:	b580      	push	{r7, lr}
 80042e0:	b082      	sub	sp, #8
 80042e2:	af00      	add	r7, sp, #0
 80042e4:	6078      	str	r0, [r7, #4]
 80042e6:	6878      	ldr	r0, [r7, #4]
 80042e8:	f7ff ffe3 	bl	80042b2 <LL_RCC_SetCLK48ClockSource>
 80042ec:	bf00      	nop
 80042ee:	3708      	adds	r7, #8
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bd80      	pop	{r7, pc}

080042f4 <LL_RCC_SetADCClockSource>:
 80042f4:	b480      	push	{r7}
 80042f6:	b083      	sub	sp, #12
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
 80042fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004300:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004304:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004308:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	4313      	orrs	r3, r2
 8004310:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004314:	bf00      	nop
 8004316:	370c      	adds	r7, #12
 8004318:	46bd      	mov	sp, r7
 800431a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431e:	4770      	bx	lr

08004320 <LL_RCC_SetRTCClockSource>:
 8004320:	b480      	push	{r7}
 8004322:	b083      	sub	sp, #12
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
 8004328:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800432c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004330:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004334:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	4313      	orrs	r3, r2
 800433c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004340:	bf00      	nop
 8004342:	370c      	adds	r7, #12
 8004344:	46bd      	mov	sp, r7
 8004346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434a:	4770      	bx	lr

0800434c <LL_RCC_GetRTCClockSource>:
 800434c:	b480      	push	{r7}
 800434e:	af00      	add	r7, sp, #0
 8004350:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004354:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004358:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800435c:	4618      	mov	r0, r3
 800435e:	46bd      	mov	sp, r7
 8004360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004364:	4770      	bx	lr

08004366 <LL_RCC_ForceBackupDomainReset>:
 8004366:	b480      	push	{r7}
 8004368:	af00      	add	r7, sp, #0
 800436a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800436e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004372:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004376:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800437a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800437e:	bf00      	nop
 8004380:	46bd      	mov	sp, r7
 8004382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004386:	4770      	bx	lr

08004388 <LL_RCC_ReleaseBackupDomainReset>:
 8004388:	b480      	push	{r7}
 800438a:	af00      	add	r7, sp, #0
 800438c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004390:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004394:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004398:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800439c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80043a0:	bf00      	nop
 80043a2:	46bd      	mov	sp, r7
 80043a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a8:	4770      	bx	lr

080043aa <LL_RCC_PLLSAI1_Enable>:
 80043aa:	b480      	push	{r7}
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80043b8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80043bc:	6013      	str	r3, [r2, #0]
 80043be:	bf00      	nop
 80043c0:	46bd      	mov	sp, r7
 80043c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c6:	4770      	bx	lr

080043c8 <LL_RCC_PLLSAI1_Disable>:
 80043c8:	b480      	push	{r7}
 80043ca:	af00      	add	r7, sp, #0
 80043cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80043d6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80043da:	6013      	str	r3, [r2, #0]
 80043dc:	bf00      	nop
 80043de:	46bd      	mov	sp, r7
 80043e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e4:	4770      	bx	lr

080043e6 <LL_RCC_PLLSAI1_IsReady>:
 80043e6:	b480      	push	{r7}
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80043f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80043f8:	d101      	bne.n	80043fe <LL_RCC_PLLSAI1_IsReady+0x18>
 80043fa:	2301      	movs	r3, #1
 80043fc:	e000      	b.n	8004400 <LL_RCC_PLLSAI1_IsReady+0x1a>
 80043fe:	2300      	movs	r3, #0
 8004400:	4618      	mov	r0, r3
 8004402:	46bd      	mov	sp, r7
 8004404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004408:	4770      	bx	lr

0800440a <HAL_RCCEx_PeriphCLKConfig>:
 800440a:	b580      	push	{r7, lr}
 800440c:	b088      	sub	sp, #32
 800440e:	af00      	add	r7, sp, #0
 8004410:	6078      	str	r0, [r7, #4]
 8004412:	2300      	movs	r3, #0
 8004414:	77fb      	strb	r3, [r7, #31]
 8004416:	2300      	movs	r3, #0
 8004418:	77bb      	strb	r3, [r7, #30]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004422:	2b00      	cmp	r3, #0
 8004424:	d034      	beq.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x86>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800442a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800442e:	d021      	beq.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8004430:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004434:	d81b      	bhi.n	800446e <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004436:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800443a:	d01d      	beq.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 800443c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004440:	d815      	bhi.n	800446e <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004442:	2b00      	cmp	r3, #0
 8004444:	d00b      	beq.n	800445e <HAL_RCCEx_PeriphCLKConfig+0x54>
 8004446:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800444a:	d110      	bne.n	800446e <HAL_RCCEx_PeriphCLKConfig+0x64>
 800444c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004450:	68db      	ldr	r3, [r3, #12]
 8004452:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004456:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800445a:	60d3      	str	r3, [r2, #12]
 800445c:	e00d      	b.n	800447a <HAL_RCCEx_PeriphCLKConfig+0x70>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	3304      	adds	r3, #4
 8004462:	4618      	mov	r0, r3
 8004464:	f000 f947 	bl	80046f6 <RCCEx_PLLSAI1_ConfigNP>
 8004468:	4603      	mov	r3, r0
 800446a:	77fb      	strb	r3, [r7, #31]
 800446c:	e005      	b.n	800447a <HAL_RCCEx_PeriphCLKConfig+0x70>
 800446e:	2301      	movs	r3, #1
 8004470:	77fb      	strb	r3, [r7, #31]
 8004472:	e002      	b.n	800447a <HAL_RCCEx_PeriphCLKConfig+0x70>
 8004474:	bf00      	nop
 8004476:	e000      	b.n	800447a <HAL_RCCEx_PeriphCLKConfig+0x70>
 8004478:	bf00      	nop
 800447a:	7ffb      	ldrb	r3, [r7, #31]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d105      	bne.n	800448c <HAL_RCCEx_PeriphCLKConfig+0x82>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004484:	4618      	mov	r0, r3
 8004486:	f7ff fee8 	bl	800425a <LL_RCC_SetSAIClockSource>
 800448a:	e001      	b.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x86>
 800448c:	7ffb      	ldrb	r3, [r7, #31]
 800448e:	77bb      	strb	r3, [r7, #30]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004498:	2b00      	cmp	r3, #0
 800449a:	d046      	beq.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x120>
 800449c:	f7ff ff56 	bl	800434c <LL_RCC_GetRTCClockSource>
 80044a0:	61b8      	str	r0, [r7, #24]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a6:	69ba      	ldr	r2, [r7, #24]
 80044a8:	429a      	cmp	r2, r3
 80044aa:	d03c      	beq.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 80044ac:	f7fe fc68 	bl	8002d80 <HAL_PWR_EnableBkUpAccess>
 80044b0:	69bb      	ldr	r3, [r7, #24]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d105      	bne.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0xb8>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ba:	4618      	mov	r0, r3
 80044bc:	f7ff ff30 	bl	8004320 <LL_RCC_SetRTCClockSource>
 80044c0:	e02e      	b.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80044c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044ca:	617b      	str	r3, [r7, #20]
 80044cc:	f7ff ff4b 	bl	8004366 <LL_RCC_ForceBackupDomainReset>
 80044d0:	f7ff ff5a 	bl	8004388 <LL_RCC_ReleaseBackupDomainReset>
 80044d4:	697b      	ldr	r3, [r7, #20]
 80044d6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044de:	4313      	orrs	r3, r2
 80044e0:	617b      	str	r3, [r7, #20]
 80044e2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80044e6:	697b      	ldr	r3, [r7, #20]
 80044e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80044ec:	f7ff fdf0 	bl	80040d0 <LL_RCC_LSE_IsEnabled>
 80044f0:	4603      	mov	r3, r0
 80044f2:	2b01      	cmp	r3, #1
 80044f4:	d114      	bne.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80044f6:	f7fd ff13 	bl	8002320 <HAL_GetTick>
 80044fa:	6138      	str	r0, [r7, #16]
 80044fc:	e00b      	b.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80044fe:	f7fd ff0f 	bl	8002320 <HAL_GetTick>
 8004502:	4602      	mov	r2, r0
 8004504:	693b      	ldr	r3, [r7, #16]
 8004506:	1ad3      	subs	r3, r2, r3
 8004508:	f241 3288 	movw	r2, #5000	; 0x1388
 800450c:	4293      	cmp	r3, r2
 800450e:	d902      	bls.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004510:	2303      	movs	r3, #3
 8004512:	77fb      	strb	r3, [r7, #31]
 8004514:	e004      	b.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004516:	f7ff fded 	bl	80040f4 <LL_RCC_LSE_IsReady>
 800451a:	4603      	mov	r3, r0
 800451c:	2b01      	cmp	r3, #1
 800451e:	d1ee      	bne.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004520:	7ffb      	ldrb	r3, [r7, #31]
 8004522:	77bb      	strb	r3, [r7, #30]
 8004524:	e001      	b.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x120>
 8004526:	7ffb      	ldrb	r3, [r7, #31]
 8004528:	77bb      	strb	r3, [r7, #30]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f003 0301 	and.w	r3, r3, #1
 8004532:	2b00      	cmp	r3, #0
 8004534:	d004      	beq.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	699b      	ldr	r3, [r3, #24]
 800453a:	4618      	mov	r0, r3
 800453c:	f7ff fe2a 	bl	8004194 <LL_RCC_SetUSARTClockSource>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f003 0302 	and.w	r3, r3, #2
 8004548:	2b00      	cmp	r3, #0
 800454a:	d004      	beq.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	69db      	ldr	r3, [r3, #28]
 8004550:	4618      	mov	r0, r3
 8004552:	f7ff fe35 	bl	80041c0 <LL_RCC_SetLPUARTClockSource>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f003 0310 	and.w	r3, r3, #16
 800455e:	2b00      	cmp	r3, #0
 8004560:	d004      	beq.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x162>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004566:	4618      	mov	r0, r3
 8004568:	f7ff fe5d 	bl	8004226 <LL_RCC_SetLPTIMClockSource>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f003 0320 	and.w	r3, r3, #32
 8004574:	2b00      	cmp	r3, #0
 8004576:	d004      	beq.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0x178>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800457c:	4618      	mov	r0, r3
 800457e:	f7ff fe52 	bl	8004226 <LL_RCC_SetLPTIMClockSource>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f003 0304 	and.w	r3, r3, #4
 800458a:	2b00      	cmp	r3, #0
 800458c:	d004      	beq.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x18e>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6a1b      	ldr	r3, [r3, #32]
 8004592:	4618      	mov	r0, r3
 8004594:	f7ff fe2a 	bl	80041ec <LL_RCC_SetI2CClockSource>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f003 0308 	and.w	r3, r3, #8
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d004      	beq.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a8:	4618      	mov	r0, r3
 80045aa:	f7ff fe1f 	bl	80041ec <LL_RCC_SetI2CClockSource>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d022      	beq.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045be:	4618      	mov	r0, r3
 80045c0:	f7ff fe8d 	bl	80042de <LL_RCC_SetUSBClockSource>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80045cc:	d107      	bne.n	80045de <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 80045ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045d2:	68db      	ldr	r3, [r3, #12]
 80045d4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80045d8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80045dc:	60d3      	str	r3, [r2, #12]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045e2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80045e6:	d10b      	bne.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	3304      	adds	r3, #4
 80045ec:	4618      	mov	r0, r3
 80045ee:	f000 f8dd 	bl	80047ac <RCCEx_PLLSAI1_ConfigNQ>
 80045f2:	4603      	mov	r3, r0
 80045f4:	77fb      	strb	r3, [r7, #31]
 80045f6:	7ffb      	ldrb	r3, [r7, #31]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d001      	beq.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 80045fc:	7ffb      	ldrb	r3, [r7, #31]
 80045fe:	77bb      	strb	r3, [r7, #30]
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004608:	2b00      	cmp	r3, #0
 800460a:	d02b      	beq.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004610:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004614:	d008      	beq.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800461a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800461e:	d003      	beq.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004624:	2b00      	cmp	r3, #0
 8004626:	d105      	bne.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800462c:	4618      	mov	r0, r3
 800462e:	f7ff fe2a 	bl	8004286 <LL_RCC_SetRNGClockSource>
 8004632:	e00a      	b.n	800464a <HAL_RCCEx_PeriphCLKConfig+0x240>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004638:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800463c:	60fb      	str	r3, [r7, #12]
 800463e:	2000      	movs	r0, #0
 8004640:	f7ff fe21 	bl	8004286 <LL_RCC_SetRNGClockSource>
 8004644:	68f8      	ldr	r0, [r7, #12]
 8004646:	f7ff fe34 	bl	80042b2 <LL_RCC_SetCLK48ClockSource>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800464e:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8004652:	d107      	bne.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8004654:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004658:	68db      	ldr	r3, [r3, #12]
 800465a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800465e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004662:	60d3      	str	r3, [r2, #12]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800466c:	2b00      	cmp	r3, #0
 800466e:	d022      	beq.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004674:	4618      	mov	r0, r3
 8004676:	f7ff fe3d 	bl	80042f4 <LL_RCC_SetADCClockSource>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800467e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004682:	d107      	bne.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0x28a>
 8004684:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004688:	68db      	ldr	r3, [r3, #12]
 800468a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800468e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004692:	60d3      	str	r3, [r2, #12]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004698:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800469c:	d10b      	bne.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	3304      	adds	r3, #4
 80046a2:	4618      	mov	r0, r3
 80046a4:	f000 f8dd 	bl	8004862 <RCCEx_PLLSAI1_ConfigNR>
 80046a8:	4603      	mov	r3, r0
 80046aa:	77fb      	strb	r3, [r7, #31]
 80046ac:	7ffb      	ldrb	r3, [r7, #31]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d001      	beq.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 80046b2:	7ffb      	ldrb	r3, [r7, #31]
 80046b4:	77bb      	strb	r3, [r7, #30]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d004      	beq.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046c6:	4618      	mov	r0, r3
 80046c8:	f7ff fd26 	bl	8004118 <LL_RCC_SetRFWKPClockSource>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d009      	beq.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046dc:	4618      	mov	r0, r3
 80046de:	f7ff fd45 	bl	800416c <LL_RCC_SetSMPSPrescaler>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046e6:	4618      	mov	r0, r3
 80046e8:	f7ff fd2c 	bl	8004144 <LL_RCC_SetSMPSClockSource>
 80046ec:	7fbb      	ldrb	r3, [r7, #30]
 80046ee:	4618      	mov	r0, r3
 80046f0:	3720      	adds	r7, #32
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}

080046f6 <RCCEx_PLLSAI1_ConfigNP>:
 80046f6:	b580      	push	{r7, lr}
 80046f8:	b084      	sub	sp, #16
 80046fa:	af00      	add	r7, sp, #0
 80046fc:	6078      	str	r0, [r7, #4]
 80046fe:	2300      	movs	r3, #0
 8004700:	73fb      	strb	r3, [r7, #15]
 8004702:	f7ff fe61 	bl	80043c8 <LL_RCC_PLLSAI1_Disable>
 8004706:	f7fd fe0b 	bl	8002320 <HAL_GetTick>
 800470a:	60b8      	str	r0, [r7, #8]
 800470c:	e009      	b.n	8004722 <RCCEx_PLLSAI1_ConfigNP+0x2c>
 800470e:	f7fd fe07 	bl	8002320 <HAL_GetTick>
 8004712:	4602      	mov	r2, r0
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	1ad3      	subs	r3, r2, r3
 8004718:	2b02      	cmp	r3, #2
 800471a:	d902      	bls.n	8004722 <RCCEx_PLLSAI1_ConfigNP+0x2c>
 800471c:	2303      	movs	r3, #3
 800471e:	73fb      	strb	r3, [r7, #15]
 8004720:	e004      	b.n	800472c <RCCEx_PLLSAI1_ConfigNP+0x36>
 8004722:	f7ff fe60 	bl	80043e6 <LL_RCC_PLLSAI1_IsReady>
 8004726:	4603      	mov	r3, r0
 8004728:	2b00      	cmp	r3, #0
 800472a:	d1f0      	bne.n	800470e <RCCEx_PLLSAI1_ConfigNP+0x18>
 800472c:	7bfb      	ldrb	r3, [r7, #15]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d137      	bne.n	80047a2 <RCCEx_PLLSAI1_ConfigNP+0xac>
 8004732:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004736:	691b      	ldr	r3, [r3, #16]
 8004738:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	021b      	lsls	r3, r3, #8
 8004742:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004746:	4313      	orrs	r3, r2
 8004748:	610b      	str	r3, [r1, #16]
 800474a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800474e:	691b      	ldr	r3, [r3, #16]
 8004750:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800475c:	4313      	orrs	r3, r2
 800475e:	610b      	str	r3, [r1, #16]
 8004760:	f7ff fe23 	bl	80043aa <LL_RCC_PLLSAI1_Enable>
 8004764:	f7fd fddc 	bl	8002320 <HAL_GetTick>
 8004768:	60b8      	str	r0, [r7, #8]
 800476a:	e009      	b.n	8004780 <RCCEx_PLLSAI1_ConfigNP+0x8a>
 800476c:	f7fd fdd8 	bl	8002320 <HAL_GetTick>
 8004770:	4602      	mov	r2, r0
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	1ad3      	subs	r3, r2, r3
 8004776:	2b02      	cmp	r3, #2
 8004778:	d902      	bls.n	8004780 <RCCEx_PLLSAI1_ConfigNP+0x8a>
 800477a:	2303      	movs	r3, #3
 800477c:	73fb      	strb	r3, [r7, #15]
 800477e:	e004      	b.n	800478a <RCCEx_PLLSAI1_ConfigNP+0x94>
 8004780:	f7ff fe31 	bl	80043e6 <LL_RCC_PLLSAI1_IsReady>
 8004784:	4603      	mov	r3, r0
 8004786:	2b01      	cmp	r3, #1
 8004788:	d1f0      	bne.n	800476c <RCCEx_PLLSAI1_ConfigNP+0x76>
 800478a:	7bfb      	ldrb	r3, [r7, #15]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d108      	bne.n	80047a2 <RCCEx_PLLSAI1_ConfigNP+0xac>
 8004790:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004794:	691a      	ldr	r2, [r3, #16]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	691b      	ldr	r3, [r3, #16]
 800479a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800479e:	4313      	orrs	r3, r2
 80047a0:	610b      	str	r3, [r1, #16]
 80047a2:	7bfb      	ldrb	r3, [r7, #15]
 80047a4:	4618      	mov	r0, r3
 80047a6:	3710      	adds	r7, #16
 80047a8:	46bd      	mov	sp, r7
 80047aa:	bd80      	pop	{r7, pc}

080047ac <RCCEx_PLLSAI1_ConfigNQ>:
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b084      	sub	sp, #16
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
 80047b4:	2300      	movs	r3, #0
 80047b6:	73fb      	strb	r3, [r7, #15]
 80047b8:	f7ff fe06 	bl	80043c8 <LL_RCC_PLLSAI1_Disable>
 80047bc:	f7fd fdb0 	bl	8002320 <HAL_GetTick>
 80047c0:	60b8      	str	r0, [r7, #8]
 80047c2:	e009      	b.n	80047d8 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
 80047c4:	f7fd fdac 	bl	8002320 <HAL_GetTick>
 80047c8:	4602      	mov	r2, r0
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	1ad3      	subs	r3, r2, r3
 80047ce:	2b02      	cmp	r3, #2
 80047d0:	d902      	bls.n	80047d8 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
 80047d2:	2303      	movs	r3, #3
 80047d4:	73fb      	strb	r3, [r7, #15]
 80047d6:	e004      	b.n	80047e2 <RCCEx_PLLSAI1_ConfigNQ+0x36>
 80047d8:	f7ff fe05 	bl	80043e6 <LL_RCC_PLLSAI1_IsReady>
 80047dc:	4603      	mov	r3, r0
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d1f0      	bne.n	80047c4 <RCCEx_PLLSAI1_ConfigNQ+0x18>
 80047e2:	7bfb      	ldrb	r3, [r7, #15]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d137      	bne.n	8004858 <RCCEx_PLLSAI1_ConfigNQ+0xac>
 80047e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047ec:	691b      	ldr	r3, [r3, #16]
 80047ee:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	021b      	lsls	r3, r3, #8
 80047f8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80047fc:	4313      	orrs	r3, r2
 80047fe:	610b      	str	r3, [r1, #16]
 8004800:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004804:	691b      	ldr	r3, [r3, #16]
 8004806:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	689b      	ldr	r3, [r3, #8]
 800480e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004812:	4313      	orrs	r3, r2
 8004814:	610b      	str	r3, [r1, #16]
 8004816:	f7ff fdc8 	bl	80043aa <LL_RCC_PLLSAI1_Enable>
 800481a:	f7fd fd81 	bl	8002320 <HAL_GetTick>
 800481e:	60b8      	str	r0, [r7, #8]
 8004820:	e009      	b.n	8004836 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
 8004822:	f7fd fd7d 	bl	8002320 <HAL_GetTick>
 8004826:	4602      	mov	r2, r0
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	1ad3      	subs	r3, r2, r3
 800482c:	2b02      	cmp	r3, #2
 800482e:	d902      	bls.n	8004836 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
 8004830:	2303      	movs	r3, #3
 8004832:	73fb      	strb	r3, [r7, #15]
 8004834:	e004      	b.n	8004840 <RCCEx_PLLSAI1_ConfigNQ+0x94>
 8004836:	f7ff fdd6 	bl	80043e6 <LL_RCC_PLLSAI1_IsReady>
 800483a:	4603      	mov	r3, r0
 800483c:	2b01      	cmp	r3, #1
 800483e:	d1f0      	bne.n	8004822 <RCCEx_PLLSAI1_ConfigNQ+0x76>
 8004840:	7bfb      	ldrb	r3, [r7, #15]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d108      	bne.n	8004858 <RCCEx_PLLSAI1_ConfigNQ+0xac>
 8004846:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800484a:	691a      	ldr	r2, [r3, #16]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	691b      	ldr	r3, [r3, #16]
 8004850:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004854:	4313      	orrs	r3, r2
 8004856:	610b      	str	r3, [r1, #16]
 8004858:	7bfb      	ldrb	r3, [r7, #15]
 800485a:	4618      	mov	r0, r3
 800485c:	3710      	adds	r7, #16
 800485e:	46bd      	mov	sp, r7
 8004860:	bd80      	pop	{r7, pc}

08004862 <RCCEx_PLLSAI1_ConfigNR>:
 8004862:	b580      	push	{r7, lr}
 8004864:	b084      	sub	sp, #16
 8004866:	af00      	add	r7, sp, #0
 8004868:	6078      	str	r0, [r7, #4]
 800486a:	2300      	movs	r3, #0
 800486c:	73fb      	strb	r3, [r7, #15]
 800486e:	f7ff fdab 	bl	80043c8 <LL_RCC_PLLSAI1_Disable>
 8004872:	f7fd fd55 	bl	8002320 <HAL_GetTick>
 8004876:	60b8      	str	r0, [r7, #8]
 8004878:	e009      	b.n	800488e <RCCEx_PLLSAI1_ConfigNR+0x2c>
 800487a:	f7fd fd51 	bl	8002320 <HAL_GetTick>
 800487e:	4602      	mov	r2, r0
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	1ad3      	subs	r3, r2, r3
 8004884:	2b02      	cmp	r3, #2
 8004886:	d902      	bls.n	800488e <RCCEx_PLLSAI1_ConfigNR+0x2c>
 8004888:	2303      	movs	r3, #3
 800488a:	73fb      	strb	r3, [r7, #15]
 800488c:	e004      	b.n	8004898 <RCCEx_PLLSAI1_ConfigNR+0x36>
 800488e:	f7ff fdaa 	bl	80043e6 <LL_RCC_PLLSAI1_IsReady>
 8004892:	4603      	mov	r3, r0
 8004894:	2b00      	cmp	r3, #0
 8004896:	d1f0      	bne.n	800487a <RCCEx_PLLSAI1_ConfigNR+0x18>
 8004898:	7bfb      	ldrb	r3, [r7, #15]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d137      	bne.n	800490e <RCCEx_PLLSAI1_ConfigNR+0xac>
 800489e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048a2:	691b      	ldr	r3, [r3, #16]
 80048a4:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	021b      	lsls	r3, r3, #8
 80048ae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80048b2:	4313      	orrs	r3, r2
 80048b4:	610b      	str	r3, [r1, #16]
 80048b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048ba:	691b      	ldr	r3, [r3, #16]
 80048bc:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	68db      	ldr	r3, [r3, #12]
 80048c4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80048c8:	4313      	orrs	r3, r2
 80048ca:	610b      	str	r3, [r1, #16]
 80048cc:	f7ff fd6d 	bl	80043aa <LL_RCC_PLLSAI1_Enable>
 80048d0:	f7fd fd26 	bl	8002320 <HAL_GetTick>
 80048d4:	60b8      	str	r0, [r7, #8]
 80048d6:	e009      	b.n	80048ec <RCCEx_PLLSAI1_ConfigNR+0x8a>
 80048d8:	f7fd fd22 	bl	8002320 <HAL_GetTick>
 80048dc:	4602      	mov	r2, r0
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	1ad3      	subs	r3, r2, r3
 80048e2:	2b02      	cmp	r3, #2
 80048e4:	d902      	bls.n	80048ec <RCCEx_PLLSAI1_ConfigNR+0x8a>
 80048e6:	2303      	movs	r3, #3
 80048e8:	73fb      	strb	r3, [r7, #15]
 80048ea:	e004      	b.n	80048f6 <RCCEx_PLLSAI1_ConfigNR+0x94>
 80048ec:	f7ff fd7b 	bl	80043e6 <LL_RCC_PLLSAI1_IsReady>
 80048f0:	4603      	mov	r3, r0
 80048f2:	2b01      	cmp	r3, #1
 80048f4:	d1f0      	bne.n	80048d8 <RCCEx_PLLSAI1_ConfigNR+0x76>
 80048f6:	7bfb      	ldrb	r3, [r7, #15]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d108      	bne.n	800490e <RCCEx_PLLSAI1_ConfigNR+0xac>
 80048fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004900:	691a      	ldr	r2, [r3, #16]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	691b      	ldr	r3, [r3, #16]
 8004906:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800490a:	4313      	orrs	r3, r2
 800490c:	610b      	str	r3, [r1, #16]
 800490e:	7bfb      	ldrb	r3, [r7, #15]
 8004910:	4618      	mov	r0, r3
 8004912:	3710      	adds	r7, #16
 8004914:	46bd      	mov	sp, r7
 8004916:	bd80      	pop	{r7, pc}

08004918 <HAL_RTC_Init>:
 8004918:	b580      	push	{r7, lr}
 800491a:	b084      	sub	sp, #16
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d101      	bne.n	800492a <HAL_RTC_Init+0x12>
 8004926:	2301      	movs	r3, #1
 8004928:	e09f      	b.n	8004a6a <HAL_RTC_Init+0x152>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004930:	b2db      	uxtb	r3, r3
 8004932:	2b00      	cmp	r3, #0
 8004934:	d106      	bne.n	8004944 <HAL_RTC_Init+0x2c>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2200      	movs	r2, #0
 800493a:	f883 2020 	strb.w	r2, [r3, #32]
 800493e:	6878      	ldr	r0, [r7, #4]
 8004940:	f7fd fa8a 	bl	8001e58 <HAL_RTC_MspInit>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2202      	movs	r2, #2
 8004948:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 800494c:	4b49      	ldr	r3, [pc, #292]	; (8004a74 <HAL_RTC_Init+0x15c>)
 800494e:	68db      	ldr	r3, [r3, #12]
 8004950:	f003 0310 	and.w	r3, r3, #16
 8004954:	2b10      	cmp	r3, #16
 8004956:	d07e      	beq.n	8004a56 <HAL_RTC_Init+0x13e>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	22ca      	movs	r2, #202	; 0xca
 800495e:	625a      	str	r2, [r3, #36]	; 0x24
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	2253      	movs	r2, #83	; 0x53
 8004966:	625a      	str	r2, [r3, #36]	; 0x24
 8004968:	6878      	ldr	r0, [r7, #4]
 800496a:	f000 f8ab 	bl	8004ac4 <RTC_EnterInitMode>
 800496e:	4603      	mov	r3, r0
 8004970:	2b00      	cmp	r3, #0
 8004972:	d00a      	beq.n	800498a <HAL_RTC_Init+0x72>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	22ff      	movs	r2, #255	; 0xff
 800497a:	625a      	str	r2, [r3, #36]	; 0x24
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2204      	movs	r2, #4
 8004980:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8004984:	2301      	movs	r3, #1
 8004986:	73fb      	strb	r3, [r7, #15]
 8004988:	e067      	b.n	8004a5a <HAL_RTC_Init+0x142>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	689b      	ldr	r3, [r3, #8]
 8004990:	687a      	ldr	r2, [r7, #4]
 8004992:	6812      	ldr	r2, [r2, #0]
 8004994:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004998:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800499c:	6093      	str	r3, [r2, #8]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	6899      	ldr	r1, [r3, #8]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	685a      	ldr	r2, [r3, #4]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	691b      	ldr	r3, [r3, #16]
 80049ac:	431a      	orrs	r2, r3
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	699b      	ldr	r3, [r3, #24]
 80049b2:	431a      	orrs	r2, r3
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	430a      	orrs	r2, r1
 80049ba:	609a      	str	r2, [r3, #8]
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	687a      	ldr	r2, [r7, #4]
 80049c2:	68d2      	ldr	r2, [r2, #12]
 80049c4:	611a      	str	r2, [r3, #16]
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	6919      	ldr	r1, [r3, #16]
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	689b      	ldr	r3, [r3, #8]
 80049d0:	041a      	lsls	r2, r3, #16
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	430a      	orrs	r2, r1
 80049d8:	611a      	str	r2, [r3, #16]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	68da      	ldr	r2, [r3, #12]
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80049e8:	60da      	str	r2, [r3, #12]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f022 0203 	bic.w	r2, r2, #3
 80049f8:	64da      	str	r2, [r3, #76]	; 0x4c
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	69da      	ldr	r2, [r3, #28]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	695b      	ldr	r3, [r3, #20]
 8004a08:	431a      	orrs	r2, r3
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	430a      	orrs	r2, r1
 8004a10:	64da      	str	r2, [r3, #76]	; 0x4c
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	689b      	ldr	r3, [r3, #8]
 8004a18:	f003 0320 	and.w	r3, r3, #32
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d113      	bne.n	8004a48 <HAL_RTC_Init+0x130>
 8004a20:	6878      	ldr	r0, [r7, #4]
 8004a22:	f000 f829 	bl	8004a78 <HAL_RTC_WaitForSynchro>
 8004a26:	4603      	mov	r3, r0
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d00d      	beq.n	8004a48 <HAL_RTC_Init+0x130>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	22ff      	movs	r2, #255	; 0xff
 8004a32:	625a      	str	r2, [r3, #36]	; 0x24
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2204      	movs	r2, #4
 8004a38:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	f883 2020 	strb.w	r2, [r3, #32]
 8004a44:	2301      	movs	r3, #1
 8004a46:	e010      	b.n	8004a6a <HAL_RTC_Init+0x152>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	22ff      	movs	r2, #255	; 0xff
 8004a4e:	625a      	str	r2, [r3, #36]	; 0x24
 8004a50:	2300      	movs	r3, #0
 8004a52:	73fb      	strb	r3, [r7, #15]
 8004a54:	e001      	b.n	8004a5a <HAL_RTC_Init+0x142>
 8004a56:	2300      	movs	r3, #0
 8004a58:	73fb      	strb	r3, [r7, #15]
 8004a5a:	7bfb      	ldrb	r3, [r7, #15]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d103      	bne.n	8004a68 <HAL_RTC_Init+0x150>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2201      	movs	r2, #1
 8004a64:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8004a68:	7bfb      	ldrb	r3, [r7, #15]
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	3710      	adds	r7, #16
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bd80      	pop	{r7, pc}
 8004a72:	bf00      	nop
 8004a74:	40002800 	.word	0x40002800

08004a78 <HAL_RTC_WaitForSynchro>:
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b084      	sub	sp, #16
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	68da      	ldr	r2, [r3, #12]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004a8e:	60da      	str	r2, [r3, #12]
 8004a90:	f7fd fc46 	bl	8002320 <HAL_GetTick>
 8004a94:	60f8      	str	r0, [r7, #12]
 8004a96:	e009      	b.n	8004aac <HAL_RTC_WaitForSynchro+0x34>
 8004a98:	f7fd fc42 	bl	8002320 <HAL_GetTick>
 8004a9c:	4602      	mov	r2, r0
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	1ad3      	subs	r3, r2, r3
 8004aa2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004aa6:	d901      	bls.n	8004aac <HAL_RTC_WaitForSynchro+0x34>
 8004aa8:	2303      	movs	r3, #3
 8004aaa:	e007      	b.n	8004abc <HAL_RTC_WaitForSynchro+0x44>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	68db      	ldr	r3, [r3, #12]
 8004ab2:	f003 0320 	and.w	r3, r3, #32
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d0ee      	beq.n	8004a98 <HAL_RTC_WaitForSynchro+0x20>
 8004aba:	2300      	movs	r3, #0
 8004abc:	4618      	mov	r0, r3
 8004abe:	3710      	adds	r7, #16
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bd80      	pop	{r7, pc}

08004ac4 <RTC_EnterInitMode>:
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b084      	sub	sp, #16
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	68db      	ldr	r3, [r3, #12]
 8004ad2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d119      	bne.n	8004b0e <RTC_EnterInitMode+0x4a>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004ae2:	60da      	str	r2, [r3, #12]
 8004ae4:	f7fd fc1c 	bl	8002320 <HAL_GetTick>
 8004ae8:	60f8      	str	r0, [r7, #12]
 8004aea:	e009      	b.n	8004b00 <RTC_EnterInitMode+0x3c>
 8004aec:	f7fd fc18 	bl	8002320 <HAL_GetTick>
 8004af0:	4602      	mov	r2, r0
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	1ad3      	subs	r3, r2, r3
 8004af6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004afa:	d901      	bls.n	8004b00 <RTC_EnterInitMode+0x3c>
 8004afc:	2303      	movs	r3, #3
 8004afe:	e007      	b.n	8004b10 <RTC_EnterInitMode+0x4c>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	68db      	ldr	r3, [r3, #12]
 8004b06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d0ee      	beq.n	8004aec <RTC_EnterInitMode+0x28>
 8004b0e:	2300      	movs	r3, #0
 8004b10:	4618      	mov	r0, r3
 8004b12:	3710      	adds	r7, #16
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bd80      	pop	{r7, pc}

08004b18 <HAL_RTCEx_SetWakeUpTimer_IT>:
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b086      	sub	sp, #24
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	60f8      	str	r0, [r7, #12]
 8004b20:	60b9      	str	r1, [r7, #8]
 8004b22:	607a      	str	r2, [r7, #4]
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004b2a:	2b01      	cmp	r3, #1
 8004b2c:	d101      	bne.n	8004b32 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 8004b2e:	2302      	movs	r3, #2
 8004b30:	e0a8      	b.n	8004c84 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	2201      	movs	r2, #1
 8004b36:	f883 2020 	strb.w	r2, [r3, #32]
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	2202      	movs	r2, #2
 8004b3e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	22ca      	movs	r2, #202	; 0xca
 8004b48:	625a      	str	r2, [r3, #36]	; 0x24
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	2253      	movs	r2, #83	; 0x53
 8004b50:	625a      	str	r2, [r3, #36]	; 0x24
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	689b      	ldr	r3, [r3, #8]
 8004b58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d020      	beq.n	8004ba2 <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
 8004b60:	f7fd fbde 	bl	8002320 <HAL_GetTick>
 8004b64:	6178      	str	r0, [r7, #20]
 8004b66:	e015      	b.n	8004b94 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
 8004b68:	f7fd fbda 	bl	8002320 <HAL_GetTick>
 8004b6c:	4602      	mov	r2, r0
 8004b6e:	697b      	ldr	r3, [r7, #20]
 8004b70:	1ad3      	subs	r3, r2, r3
 8004b72:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004b76:	d90d      	bls.n	8004b94 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	22ff      	movs	r2, #255	; 0xff
 8004b7e:	625a      	str	r2, [r3, #36]	; 0x24
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	2203      	movs	r2, #3
 8004b84:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	f883 2020 	strb.w	r2, [r3, #32]
 8004b90:	2303      	movs	r3, #3
 8004b92:	e077      	b.n	8004c84 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	68db      	ldr	r3, [r3, #12]
 8004b9a:	f003 0304 	and.w	r3, r3, #4
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d1e2      	bne.n	8004b68 <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	689a      	ldr	r2, [r3, #8]
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bb0:	609a      	str	r2, [r3, #8]
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	68db      	ldr	r3, [r3, #12]
 8004bb8:	b2da      	uxtb	r2, r3
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8004bc2:	60da      	str	r2, [r3, #12]
 8004bc4:	f7fd fbac 	bl	8002320 <HAL_GetTick>
 8004bc8:	6178      	str	r0, [r7, #20]
 8004bca:	e015      	b.n	8004bf8 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
 8004bcc:	f7fd fba8 	bl	8002320 <HAL_GetTick>
 8004bd0:	4602      	mov	r2, r0
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	1ad3      	subs	r3, r2, r3
 8004bd6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004bda:	d90d      	bls.n	8004bf8 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	22ff      	movs	r2, #255	; 0xff
 8004be2:	625a      	str	r2, [r3, #36]	; 0x24
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	2203      	movs	r2, #3
 8004be8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	f883 2020 	strb.w	r2, [r3, #32]
 8004bf4:	2303      	movs	r3, #3
 8004bf6:	e045      	b.n	8004c84 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	68db      	ldr	r3, [r3, #12]
 8004bfe:	f003 0304 	and.w	r3, r3, #4
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d0e2      	beq.n	8004bcc <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	68ba      	ldr	r2, [r7, #8]
 8004c0c:	615a      	str	r2, [r3, #20]
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	689a      	ldr	r2, [r3, #8]
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f022 0207 	bic.w	r2, r2, #7
 8004c1c:	609a      	str	r2, [r3, #8]
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	6899      	ldr	r1, [r3, #8]
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	687a      	ldr	r2, [r7, #4]
 8004c2a:	430a      	orrs	r2, r1
 8004c2c:	609a      	str	r2, [r3, #8]
 8004c2e:	4b17      	ldr	r3, [pc, #92]	; (8004c8c <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8004c30:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c34:	4a15      	ldr	r2, [pc, #84]	; (8004c8c <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8004c36:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004c3a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004c3e:	4b13      	ldr	r3, [pc, #76]	; (8004c8c <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4a12      	ldr	r2, [pc, #72]	; (8004c8c <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8004c44:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004c48:	6013      	str	r3, [r2, #0]
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	689a      	ldr	r2, [r3, #8]
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004c58:	609a      	str	r2, [r3, #8]
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	689a      	ldr	r2, [r3, #8]
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004c68:	609a      	str	r2, [r3, #8]
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	22ff      	movs	r2, #255	; 0xff
 8004c70:	625a      	str	r2, [r3, #36]	; 0x24
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	2201      	movs	r2, #1
 8004c76:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	f883 2020 	strb.w	r2, [r3, #32]
 8004c82:	2300      	movs	r3, #0
 8004c84:	4618      	mov	r0, r3
 8004c86:	3718      	adds	r7, #24
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	bd80      	pop	{r7, pc}
 8004c8c:	58000800 	.word	0x58000800

08004c90 <LL_RCC_GetUSARTClockSource>:
 8004c90:	b480      	push	{r7}
 8004c92:	b083      	sub	sp, #12
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
 8004c98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c9c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	4013      	ands	r3, r2
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	370c      	adds	r7, #12
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cae:	4770      	bx	lr

08004cb0 <LL_RCC_GetLPUARTClockSource>:
 8004cb0:	b480      	push	{r7}
 8004cb2:	b083      	sub	sp, #12
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
 8004cb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cbc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	4013      	ands	r3, r2
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	370c      	adds	r7, #12
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cce:	4770      	bx	lr

08004cd0 <HAL_UART_Init>:
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b082      	sub	sp, #8
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d101      	bne.n	8004ce2 <HAL_UART_Init+0x12>
 8004cde:	2301      	movs	r3, #1
 8004ce0:	e042      	b.n	8004d68 <HAL_UART_Init+0x98>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d106      	bne.n	8004cfa <HAL_UART_Init+0x2a>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 8004cf4:	6878      	ldr	r0, [r7, #4]
 8004cf6:	f7fd f8e3 	bl	8001ec0 <HAL_UART_MspInit>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2224      	movs	r2, #36	; 0x24
 8004cfe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	681a      	ldr	r2, [r3, #0]
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f022 0201 	bic.w	r2, r2, #1
 8004d10:	601a      	str	r2, [r3, #0]
 8004d12:	6878      	ldr	r0, [r7, #4]
 8004d14:	f000 f8ba 	bl	8004e8c <UART_SetConfig>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	2b01      	cmp	r3, #1
 8004d1c:	d101      	bne.n	8004d22 <HAL_UART_Init+0x52>
 8004d1e:	2301      	movs	r3, #1
 8004d20:	e022      	b.n	8004d68 <HAL_UART_Init+0x98>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d002      	beq.n	8004d30 <HAL_UART_Init+0x60>
 8004d2a:	6878      	ldr	r0, [r7, #4]
 8004d2c:	f000 fad6 	bl	80052dc <UART_AdvFeatureConfig>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	685a      	ldr	r2, [r3, #4]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004d3e:	605a      	str	r2, [r3, #4]
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	689a      	ldr	r2, [r3, #8]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004d4e:	609a      	str	r2, [r3, #8]
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	681a      	ldr	r2, [r3, #0]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f042 0201 	orr.w	r2, r2, #1
 8004d5e:	601a      	str	r2, [r3, #0]
 8004d60:	6878      	ldr	r0, [r7, #4]
 8004d62:	f000 fb5d 	bl	8005420 <UART_CheckIdleState>
 8004d66:	4603      	mov	r3, r0
 8004d68:	4618      	mov	r0, r3
 8004d6a:	3708      	adds	r7, #8
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	bd80      	pop	{r7, pc}

08004d70 <HAL_UART_Transmit>:
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b08a      	sub	sp, #40	; 0x28
 8004d74:	af02      	add	r7, sp, #8
 8004d76:	60f8      	str	r0, [r7, #12]
 8004d78:	60b9      	str	r1, [r7, #8]
 8004d7a:	603b      	str	r3, [r7, #0]
 8004d7c:	4613      	mov	r3, r2
 8004d7e:	80fb      	strh	r3, [r7, #6]
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d86:	2b20      	cmp	r3, #32
 8004d88:	d17b      	bne.n	8004e82 <HAL_UART_Transmit+0x112>
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d002      	beq.n	8004d96 <HAL_UART_Transmit+0x26>
 8004d90:	88fb      	ldrh	r3, [r7, #6]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d101      	bne.n	8004d9a <HAL_UART_Transmit+0x2a>
 8004d96:	2301      	movs	r3, #1
 8004d98:	e074      	b.n	8004e84 <HAL_UART_Transmit+0x114>
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	2221      	movs	r2, #33	; 0x21
 8004da6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8004daa:	f7fd fab9 	bl	8002320 <HAL_GetTick>
 8004dae:	6178      	str	r0, [r7, #20]
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	88fa      	ldrh	r2, [r7, #6]
 8004db4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	88fa      	ldrh	r2, [r7, #6]
 8004dbc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	689b      	ldr	r3, [r3, #8]
 8004dc4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dc8:	d108      	bne.n	8004ddc <HAL_UART_Transmit+0x6c>
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	691b      	ldr	r3, [r3, #16]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d104      	bne.n	8004ddc <HAL_UART_Transmit+0x6c>
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	61fb      	str	r3, [r7, #28]
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	61bb      	str	r3, [r7, #24]
 8004dda:	e003      	b.n	8004de4 <HAL_UART_Transmit+0x74>
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	61fb      	str	r3, [r7, #28]
 8004de0:	2300      	movs	r3, #0
 8004de2:	61bb      	str	r3, [r7, #24]
 8004de4:	e030      	b.n	8004e48 <HAL_UART_Transmit+0xd8>
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	9300      	str	r3, [sp, #0]
 8004dea:	697b      	ldr	r3, [r7, #20]
 8004dec:	2200      	movs	r2, #0
 8004dee:	2180      	movs	r1, #128	; 0x80
 8004df0:	68f8      	ldr	r0, [r7, #12]
 8004df2:	f000 fbbf 	bl	8005574 <UART_WaitOnFlagUntilTimeout>
 8004df6:	4603      	mov	r3, r0
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d005      	beq.n	8004e08 <HAL_UART_Transmit+0x98>
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	2220      	movs	r2, #32
 8004e00:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8004e04:	2303      	movs	r3, #3
 8004e06:	e03d      	b.n	8004e84 <HAL_UART_Transmit+0x114>
 8004e08:	69fb      	ldr	r3, [r7, #28]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d10b      	bne.n	8004e26 <HAL_UART_Transmit+0xb6>
 8004e0e:	69bb      	ldr	r3, [r7, #24]
 8004e10:	881b      	ldrh	r3, [r3, #0]
 8004e12:	461a      	mov	r2, r3
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e1c:	629a      	str	r2, [r3, #40]	; 0x28
 8004e1e:	69bb      	ldr	r3, [r7, #24]
 8004e20:	3302      	adds	r3, #2
 8004e22:	61bb      	str	r3, [r7, #24]
 8004e24:	e007      	b.n	8004e36 <HAL_UART_Transmit+0xc6>
 8004e26:	69fb      	ldr	r3, [r7, #28]
 8004e28:	781a      	ldrb	r2, [r3, #0]
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	629a      	str	r2, [r3, #40]	; 0x28
 8004e30:	69fb      	ldr	r3, [r7, #28]
 8004e32:	3301      	adds	r3, #1
 8004e34:	61fb      	str	r3, [r7, #28]
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004e3c:	b29b      	uxth	r3, r3
 8004e3e:	3b01      	subs	r3, #1
 8004e40:	b29a      	uxth	r2, r3
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004e4e:	b29b      	uxth	r3, r3
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d1c8      	bne.n	8004de6 <HAL_UART_Transmit+0x76>
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	9300      	str	r3, [sp, #0]
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	2140      	movs	r1, #64	; 0x40
 8004e5e:	68f8      	ldr	r0, [r7, #12]
 8004e60:	f000 fb88 	bl	8005574 <UART_WaitOnFlagUntilTimeout>
 8004e64:	4603      	mov	r3, r0
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d005      	beq.n	8004e76 <HAL_UART_Transmit+0x106>
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	2220      	movs	r2, #32
 8004e6e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8004e72:	2303      	movs	r3, #3
 8004e74:	e006      	b.n	8004e84 <HAL_UART_Transmit+0x114>
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	2220      	movs	r2, #32
 8004e7a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8004e7e:	2300      	movs	r3, #0
 8004e80:	e000      	b.n	8004e84 <HAL_UART_Transmit+0x114>
 8004e82:	2302      	movs	r3, #2
 8004e84:	4618      	mov	r0, r3
 8004e86:	3720      	adds	r7, #32
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	bd80      	pop	{r7, pc}

08004e8c <UART_SetConfig>:
 8004e8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e90:	b08c      	sub	sp, #48	; 0x30
 8004e92:	af00      	add	r7, sp, #0
 8004e94:	6178      	str	r0, [r7, #20]
 8004e96:	2300      	movs	r3, #0
 8004e98:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	689a      	ldr	r2, [r3, #8]
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	691b      	ldr	r3, [r3, #16]
 8004ea4:	431a      	orrs	r2, r3
 8004ea6:	697b      	ldr	r3, [r7, #20]
 8004ea8:	695b      	ldr	r3, [r3, #20]
 8004eaa:	431a      	orrs	r2, r3
 8004eac:	697b      	ldr	r3, [r7, #20]
 8004eae:	69db      	ldr	r3, [r3, #28]
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004eb4:	697b      	ldr	r3, [r7, #20]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	681a      	ldr	r2, [r3, #0]
 8004eba:	4baf      	ldr	r3, [pc, #700]	; (8005178 <UART_SetConfig+0x2ec>)
 8004ebc:	4013      	ands	r3, r2
 8004ebe:	697a      	ldr	r2, [r7, #20]
 8004ec0:	6812      	ldr	r2, [r2, #0]
 8004ec2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004ec4:	430b      	orrs	r3, r1
 8004ec6:	6013      	str	r3, [r2, #0]
 8004ec8:	697b      	ldr	r3, [r7, #20]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	68da      	ldr	r2, [r3, #12]
 8004ed6:	697b      	ldr	r3, [r7, #20]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	430a      	orrs	r2, r1
 8004edc:	605a      	str	r2, [r3, #4]
 8004ede:	697b      	ldr	r3, [r7, #20]
 8004ee0:	699b      	ldr	r3, [r3, #24]
 8004ee2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ee4:	697b      	ldr	r3, [r7, #20]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4aa4      	ldr	r2, [pc, #656]	; (800517c <UART_SetConfig+0x2f0>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d004      	beq.n	8004ef8 <UART_SetConfig+0x6c>
 8004eee:	697b      	ldr	r3, [r7, #20]
 8004ef0:	6a1b      	ldr	r3, [r3, #32]
 8004ef2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ef4:	4313      	orrs	r3, r2
 8004ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ef8:	697b      	ldr	r3, [r7, #20]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	689b      	ldr	r3, [r3, #8]
 8004efe:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004f02:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004f06:	697a      	ldr	r2, [r7, #20]
 8004f08:	6812      	ldr	r2, [r2, #0]
 8004f0a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004f0c:	430b      	orrs	r3, r1
 8004f0e:	6093      	str	r3, [r2, #8]
 8004f10:	697b      	ldr	r3, [r7, #20]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f16:	f023 010f 	bic.w	r1, r3, #15
 8004f1a:	697b      	ldr	r3, [r7, #20]
 8004f1c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004f1e:	697b      	ldr	r3, [r7, #20]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	430a      	orrs	r2, r1
 8004f24:	62da      	str	r2, [r3, #44]	; 0x2c
 8004f26:	697b      	ldr	r3, [r7, #20]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a95      	ldr	r2, [pc, #596]	; (8005180 <UART_SetConfig+0x2f4>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d125      	bne.n	8004f7c <UART_SetConfig+0xf0>
 8004f30:	2003      	movs	r0, #3
 8004f32:	f7ff fead 	bl	8004c90 <LL_RCC_GetUSARTClockSource>
 8004f36:	4603      	mov	r3, r0
 8004f38:	2b03      	cmp	r3, #3
 8004f3a:	d81b      	bhi.n	8004f74 <UART_SetConfig+0xe8>
 8004f3c:	a201      	add	r2, pc, #4	; (adr r2, 8004f44 <UART_SetConfig+0xb8>)
 8004f3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f42:	bf00      	nop
 8004f44:	08004f55 	.word	0x08004f55
 8004f48:	08004f65 	.word	0x08004f65
 8004f4c:	08004f5d 	.word	0x08004f5d
 8004f50:	08004f6d 	.word	0x08004f6d
 8004f54:	2301      	movs	r3, #1
 8004f56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f5a:	e042      	b.n	8004fe2 <UART_SetConfig+0x156>
 8004f5c:	2302      	movs	r3, #2
 8004f5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f62:	e03e      	b.n	8004fe2 <UART_SetConfig+0x156>
 8004f64:	2304      	movs	r3, #4
 8004f66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f6a:	e03a      	b.n	8004fe2 <UART_SetConfig+0x156>
 8004f6c:	2308      	movs	r3, #8
 8004f6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f72:	e036      	b.n	8004fe2 <UART_SetConfig+0x156>
 8004f74:	2310      	movs	r3, #16
 8004f76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f7a:	e032      	b.n	8004fe2 <UART_SetConfig+0x156>
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a7e      	ldr	r2, [pc, #504]	; (800517c <UART_SetConfig+0x2f0>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d12a      	bne.n	8004fdc <UART_SetConfig+0x150>
 8004f86:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8004f8a:	f7ff fe91 	bl	8004cb0 <LL_RCC_GetLPUARTClockSource>
 8004f8e:	4603      	mov	r3, r0
 8004f90:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004f94:	d01a      	beq.n	8004fcc <UART_SetConfig+0x140>
 8004f96:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004f9a:	d81b      	bhi.n	8004fd4 <UART_SetConfig+0x148>
 8004f9c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004fa0:	d00c      	beq.n	8004fbc <UART_SetConfig+0x130>
 8004fa2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004fa6:	d815      	bhi.n	8004fd4 <UART_SetConfig+0x148>
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d003      	beq.n	8004fb4 <UART_SetConfig+0x128>
 8004fac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fb0:	d008      	beq.n	8004fc4 <UART_SetConfig+0x138>
 8004fb2:	e00f      	b.n	8004fd4 <UART_SetConfig+0x148>
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004fba:	e012      	b.n	8004fe2 <UART_SetConfig+0x156>
 8004fbc:	2302      	movs	r3, #2
 8004fbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004fc2:	e00e      	b.n	8004fe2 <UART_SetConfig+0x156>
 8004fc4:	2304      	movs	r3, #4
 8004fc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004fca:	e00a      	b.n	8004fe2 <UART_SetConfig+0x156>
 8004fcc:	2308      	movs	r3, #8
 8004fce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004fd2:	e006      	b.n	8004fe2 <UART_SetConfig+0x156>
 8004fd4:	2310      	movs	r3, #16
 8004fd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004fda:	e002      	b.n	8004fe2 <UART_SetConfig+0x156>
 8004fdc:	2310      	movs	r3, #16
 8004fde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004fe2:	697b      	ldr	r3, [r7, #20]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4a65      	ldr	r2, [pc, #404]	; (800517c <UART_SetConfig+0x2f0>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	f040 8097 	bne.w	800511c <UART_SetConfig+0x290>
 8004fee:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004ff2:	2b08      	cmp	r3, #8
 8004ff4:	d823      	bhi.n	800503e <UART_SetConfig+0x1b2>
 8004ff6:	a201      	add	r2, pc, #4	; (adr r2, 8004ffc <UART_SetConfig+0x170>)
 8004ff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ffc:	08005021 	.word	0x08005021
 8005000:	0800503f 	.word	0x0800503f
 8005004:	08005029 	.word	0x08005029
 8005008:	0800503f 	.word	0x0800503f
 800500c:	0800502f 	.word	0x0800502f
 8005010:	0800503f 	.word	0x0800503f
 8005014:	0800503f 	.word	0x0800503f
 8005018:	0800503f 	.word	0x0800503f
 800501c:	08005037 	.word	0x08005037
 8005020:	f7fe ff76 	bl	8003f10 <HAL_RCC_GetPCLK1Freq>
 8005024:	6278      	str	r0, [r7, #36]	; 0x24
 8005026:	e010      	b.n	800504a <UART_SetConfig+0x1be>
 8005028:	4b56      	ldr	r3, [pc, #344]	; (8005184 <UART_SetConfig+0x2f8>)
 800502a:	627b      	str	r3, [r7, #36]	; 0x24
 800502c:	e00d      	b.n	800504a <UART_SetConfig+0x1be>
 800502e:	f7fe feef 	bl	8003e10 <HAL_RCC_GetSysClockFreq>
 8005032:	6278      	str	r0, [r7, #36]	; 0x24
 8005034:	e009      	b.n	800504a <UART_SetConfig+0x1be>
 8005036:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800503a:	627b      	str	r3, [r7, #36]	; 0x24
 800503c:	e005      	b.n	800504a <UART_SetConfig+0x1be>
 800503e:	2300      	movs	r3, #0
 8005040:	627b      	str	r3, [r7, #36]	; 0x24
 8005042:	2301      	movs	r3, #1
 8005044:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005048:	bf00      	nop
 800504a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800504c:	2b00      	cmp	r3, #0
 800504e:	f000 812b 	beq.w	80052a8 <UART_SetConfig+0x41c>
 8005052:	697b      	ldr	r3, [r7, #20]
 8005054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005056:	4a4c      	ldr	r2, [pc, #304]	; (8005188 <UART_SetConfig+0x2fc>)
 8005058:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800505c:	461a      	mov	r2, r3
 800505e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005060:	fbb3 f3f2 	udiv	r3, r3, r2
 8005064:	61bb      	str	r3, [r7, #24]
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	685a      	ldr	r2, [r3, #4]
 800506a:	4613      	mov	r3, r2
 800506c:	005b      	lsls	r3, r3, #1
 800506e:	4413      	add	r3, r2
 8005070:	69ba      	ldr	r2, [r7, #24]
 8005072:	429a      	cmp	r2, r3
 8005074:	d305      	bcc.n	8005082 <UART_SetConfig+0x1f6>
 8005076:	697b      	ldr	r3, [r7, #20]
 8005078:	685b      	ldr	r3, [r3, #4]
 800507a:	031b      	lsls	r3, r3, #12
 800507c:	69ba      	ldr	r2, [r7, #24]
 800507e:	429a      	cmp	r2, r3
 8005080:	d903      	bls.n	800508a <UART_SetConfig+0x1fe>
 8005082:	2301      	movs	r3, #1
 8005084:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005088:	e10e      	b.n	80052a8 <UART_SetConfig+0x41c>
 800508a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800508c:	2200      	movs	r2, #0
 800508e:	60bb      	str	r3, [r7, #8]
 8005090:	60fa      	str	r2, [r7, #12]
 8005092:	697b      	ldr	r3, [r7, #20]
 8005094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005096:	4a3c      	ldr	r2, [pc, #240]	; (8005188 <UART_SetConfig+0x2fc>)
 8005098:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800509c:	b29b      	uxth	r3, r3
 800509e:	2200      	movs	r2, #0
 80050a0:	603b      	str	r3, [r7, #0]
 80050a2:	607a      	str	r2, [r7, #4]
 80050a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80050a8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80050ac:	f7fb f8c0 	bl	8000230 <__aeabi_uldivmod>
 80050b0:	4602      	mov	r2, r0
 80050b2:	460b      	mov	r3, r1
 80050b4:	4610      	mov	r0, r2
 80050b6:	4619      	mov	r1, r3
 80050b8:	f04f 0200 	mov.w	r2, #0
 80050bc:	f04f 0300 	mov.w	r3, #0
 80050c0:	020b      	lsls	r3, r1, #8
 80050c2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80050c6:	0202      	lsls	r2, r0, #8
 80050c8:	6979      	ldr	r1, [r7, #20]
 80050ca:	6849      	ldr	r1, [r1, #4]
 80050cc:	0849      	lsrs	r1, r1, #1
 80050ce:	2000      	movs	r0, #0
 80050d0:	460c      	mov	r4, r1
 80050d2:	4605      	mov	r5, r0
 80050d4:	eb12 0804 	adds.w	r8, r2, r4
 80050d8:	eb43 0905 	adc.w	r9, r3, r5
 80050dc:	697b      	ldr	r3, [r7, #20]
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	2200      	movs	r2, #0
 80050e2:	469a      	mov	sl, r3
 80050e4:	4693      	mov	fp, r2
 80050e6:	4652      	mov	r2, sl
 80050e8:	465b      	mov	r3, fp
 80050ea:	4640      	mov	r0, r8
 80050ec:	4649      	mov	r1, r9
 80050ee:	f7fb f89f 	bl	8000230 <__aeabi_uldivmod>
 80050f2:	4602      	mov	r2, r0
 80050f4:	460b      	mov	r3, r1
 80050f6:	4613      	mov	r3, r2
 80050f8:	623b      	str	r3, [r7, #32]
 80050fa:	6a3b      	ldr	r3, [r7, #32]
 80050fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005100:	d308      	bcc.n	8005114 <UART_SetConfig+0x288>
 8005102:	6a3b      	ldr	r3, [r7, #32]
 8005104:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005108:	d204      	bcs.n	8005114 <UART_SetConfig+0x288>
 800510a:	697b      	ldr	r3, [r7, #20]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	6a3a      	ldr	r2, [r7, #32]
 8005110:	60da      	str	r2, [r3, #12]
 8005112:	e0c9      	b.n	80052a8 <UART_SetConfig+0x41c>
 8005114:	2301      	movs	r3, #1
 8005116:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800511a:	e0c5      	b.n	80052a8 <UART_SetConfig+0x41c>
 800511c:	697b      	ldr	r3, [r7, #20]
 800511e:	69db      	ldr	r3, [r3, #28]
 8005120:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005124:	d16d      	bne.n	8005202 <UART_SetConfig+0x376>
 8005126:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800512a:	3b01      	subs	r3, #1
 800512c:	2b07      	cmp	r3, #7
 800512e:	d82d      	bhi.n	800518c <UART_SetConfig+0x300>
 8005130:	a201      	add	r2, pc, #4	; (adr r2, 8005138 <UART_SetConfig+0x2ac>)
 8005132:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005136:	bf00      	nop
 8005138:	08005159 	.word	0x08005159
 800513c:	08005161 	.word	0x08005161
 8005140:	0800518d 	.word	0x0800518d
 8005144:	08005167 	.word	0x08005167
 8005148:	0800518d 	.word	0x0800518d
 800514c:	0800518d 	.word	0x0800518d
 8005150:	0800518d 	.word	0x0800518d
 8005154:	0800516f 	.word	0x0800516f
 8005158:	f7fe fef0 	bl	8003f3c <HAL_RCC_GetPCLK2Freq>
 800515c:	6278      	str	r0, [r7, #36]	; 0x24
 800515e:	e01b      	b.n	8005198 <UART_SetConfig+0x30c>
 8005160:	4b08      	ldr	r3, [pc, #32]	; (8005184 <UART_SetConfig+0x2f8>)
 8005162:	627b      	str	r3, [r7, #36]	; 0x24
 8005164:	e018      	b.n	8005198 <UART_SetConfig+0x30c>
 8005166:	f7fe fe53 	bl	8003e10 <HAL_RCC_GetSysClockFreq>
 800516a:	6278      	str	r0, [r7, #36]	; 0x24
 800516c:	e014      	b.n	8005198 <UART_SetConfig+0x30c>
 800516e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005172:	627b      	str	r3, [r7, #36]	; 0x24
 8005174:	e010      	b.n	8005198 <UART_SetConfig+0x30c>
 8005176:	bf00      	nop
 8005178:	cfff69f3 	.word	0xcfff69f3
 800517c:	40008000 	.word	0x40008000
 8005180:	40013800 	.word	0x40013800
 8005184:	00f42400 	.word	0x00f42400
 8005188:	08009e58 	.word	0x08009e58
 800518c:	2300      	movs	r3, #0
 800518e:	627b      	str	r3, [r7, #36]	; 0x24
 8005190:	2301      	movs	r3, #1
 8005192:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005196:	bf00      	nop
 8005198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800519a:	2b00      	cmp	r3, #0
 800519c:	f000 8084 	beq.w	80052a8 <UART_SetConfig+0x41c>
 80051a0:	697b      	ldr	r3, [r7, #20]
 80051a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a4:	4a4b      	ldr	r2, [pc, #300]	; (80052d4 <UART_SetConfig+0x448>)
 80051a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80051aa:	461a      	mov	r2, r3
 80051ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ae:	fbb3 f3f2 	udiv	r3, r3, r2
 80051b2:	005a      	lsls	r2, r3, #1
 80051b4:	697b      	ldr	r3, [r7, #20]
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	085b      	lsrs	r3, r3, #1
 80051ba:	441a      	add	r2, r3
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	685b      	ldr	r3, [r3, #4]
 80051c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80051c4:	623b      	str	r3, [r7, #32]
 80051c6:	6a3b      	ldr	r3, [r7, #32]
 80051c8:	2b0f      	cmp	r3, #15
 80051ca:	d916      	bls.n	80051fa <UART_SetConfig+0x36e>
 80051cc:	6a3b      	ldr	r3, [r7, #32]
 80051ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051d2:	d212      	bcs.n	80051fa <UART_SetConfig+0x36e>
 80051d4:	6a3b      	ldr	r3, [r7, #32]
 80051d6:	b29b      	uxth	r3, r3
 80051d8:	f023 030f 	bic.w	r3, r3, #15
 80051dc:	83fb      	strh	r3, [r7, #30]
 80051de:	6a3b      	ldr	r3, [r7, #32]
 80051e0:	085b      	lsrs	r3, r3, #1
 80051e2:	b29b      	uxth	r3, r3
 80051e4:	f003 0307 	and.w	r3, r3, #7
 80051e8:	b29a      	uxth	r2, r3
 80051ea:	8bfb      	ldrh	r3, [r7, #30]
 80051ec:	4313      	orrs	r3, r2
 80051ee:	83fb      	strh	r3, [r7, #30]
 80051f0:	697b      	ldr	r3, [r7, #20]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	8bfa      	ldrh	r2, [r7, #30]
 80051f6:	60da      	str	r2, [r3, #12]
 80051f8:	e056      	b.n	80052a8 <UART_SetConfig+0x41c>
 80051fa:	2301      	movs	r3, #1
 80051fc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005200:	e052      	b.n	80052a8 <UART_SetConfig+0x41c>
 8005202:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005206:	3b01      	subs	r3, #1
 8005208:	2b07      	cmp	r3, #7
 800520a:	d822      	bhi.n	8005252 <UART_SetConfig+0x3c6>
 800520c:	a201      	add	r2, pc, #4	; (adr r2, 8005214 <UART_SetConfig+0x388>)
 800520e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005212:	bf00      	nop
 8005214:	08005235 	.word	0x08005235
 8005218:	0800523d 	.word	0x0800523d
 800521c:	08005253 	.word	0x08005253
 8005220:	08005243 	.word	0x08005243
 8005224:	08005253 	.word	0x08005253
 8005228:	08005253 	.word	0x08005253
 800522c:	08005253 	.word	0x08005253
 8005230:	0800524b 	.word	0x0800524b
 8005234:	f7fe fe82 	bl	8003f3c <HAL_RCC_GetPCLK2Freq>
 8005238:	6278      	str	r0, [r7, #36]	; 0x24
 800523a:	e010      	b.n	800525e <UART_SetConfig+0x3d2>
 800523c:	4b26      	ldr	r3, [pc, #152]	; (80052d8 <UART_SetConfig+0x44c>)
 800523e:	627b      	str	r3, [r7, #36]	; 0x24
 8005240:	e00d      	b.n	800525e <UART_SetConfig+0x3d2>
 8005242:	f7fe fde5 	bl	8003e10 <HAL_RCC_GetSysClockFreq>
 8005246:	6278      	str	r0, [r7, #36]	; 0x24
 8005248:	e009      	b.n	800525e <UART_SetConfig+0x3d2>
 800524a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800524e:	627b      	str	r3, [r7, #36]	; 0x24
 8005250:	e005      	b.n	800525e <UART_SetConfig+0x3d2>
 8005252:	2300      	movs	r3, #0
 8005254:	627b      	str	r3, [r7, #36]	; 0x24
 8005256:	2301      	movs	r3, #1
 8005258:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800525c:	bf00      	nop
 800525e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005260:	2b00      	cmp	r3, #0
 8005262:	d021      	beq.n	80052a8 <UART_SetConfig+0x41c>
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005268:	4a1a      	ldr	r2, [pc, #104]	; (80052d4 <UART_SetConfig+0x448>)
 800526a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800526e:	461a      	mov	r2, r3
 8005270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005272:	fbb3 f2f2 	udiv	r2, r3, r2
 8005276:	697b      	ldr	r3, [r7, #20]
 8005278:	685b      	ldr	r3, [r3, #4]
 800527a:	085b      	lsrs	r3, r3, #1
 800527c:	441a      	add	r2, r3
 800527e:	697b      	ldr	r3, [r7, #20]
 8005280:	685b      	ldr	r3, [r3, #4]
 8005282:	fbb2 f3f3 	udiv	r3, r2, r3
 8005286:	623b      	str	r3, [r7, #32]
 8005288:	6a3b      	ldr	r3, [r7, #32]
 800528a:	2b0f      	cmp	r3, #15
 800528c:	d909      	bls.n	80052a2 <UART_SetConfig+0x416>
 800528e:	6a3b      	ldr	r3, [r7, #32]
 8005290:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005294:	d205      	bcs.n	80052a2 <UART_SetConfig+0x416>
 8005296:	6a3b      	ldr	r3, [r7, #32]
 8005298:	b29a      	uxth	r2, r3
 800529a:	697b      	ldr	r3, [r7, #20]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	60da      	str	r2, [r3, #12]
 80052a0:	e002      	b.n	80052a8 <UART_SetConfig+0x41c>
 80052a2:	2301      	movs	r3, #1
 80052a4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80052a8:	697b      	ldr	r3, [r7, #20]
 80052aa:	2201      	movs	r2, #1
 80052ac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80052b0:	697b      	ldr	r3, [r7, #20]
 80052b2:	2201      	movs	r2, #1
 80052b4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 80052b8:	697b      	ldr	r3, [r7, #20]
 80052ba:	2200      	movs	r2, #0
 80052bc:	675a      	str	r2, [r3, #116]	; 0x74
 80052be:	697b      	ldr	r3, [r7, #20]
 80052c0:	2200      	movs	r2, #0
 80052c2:	679a      	str	r2, [r3, #120]	; 0x78
 80052c4:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80052c8:	4618      	mov	r0, r3
 80052ca:	3730      	adds	r7, #48	; 0x30
 80052cc:	46bd      	mov	sp, r7
 80052ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80052d2:	bf00      	nop
 80052d4:	08009e58 	.word	0x08009e58
 80052d8:	00f42400 	.word	0x00f42400

080052dc <UART_AdvFeatureConfig>:
 80052dc:	b480      	push	{r7}
 80052de:	b083      	sub	sp, #12
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052e8:	f003 0301 	and.w	r3, r3, #1
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d00a      	beq.n	8005306 <UART_AdvFeatureConfig+0x2a>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	685b      	ldr	r3, [r3, #4]
 80052f6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	430a      	orrs	r2, r1
 8005304:	605a      	str	r2, [r3, #4]
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800530a:	f003 0302 	and.w	r3, r3, #2
 800530e:	2b00      	cmp	r3, #0
 8005310:	d00a      	beq.n	8005328 <UART_AdvFeatureConfig+0x4c>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	430a      	orrs	r2, r1
 8005326:	605a      	str	r2, [r3, #4]
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800532c:	f003 0304 	and.w	r3, r3, #4
 8005330:	2b00      	cmp	r3, #0
 8005332:	d00a      	beq.n	800534a <UART_AdvFeatureConfig+0x6e>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	685b      	ldr	r3, [r3, #4]
 800533a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	430a      	orrs	r2, r1
 8005348:	605a      	str	r2, [r3, #4]
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800534e:	f003 0308 	and.w	r3, r3, #8
 8005352:	2b00      	cmp	r3, #0
 8005354:	d00a      	beq.n	800536c <UART_AdvFeatureConfig+0x90>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	685b      	ldr	r3, [r3, #4]
 800535c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	430a      	orrs	r2, r1
 800536a:	605a      	str	r2, [r3, #4]
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005370:	f003 0310 	and.w	r3, r3, #16
 8005374:	2b00      	cmp	r3, #0
 8005376:	d00a      	beq.n	800538e <UART_AdvFeatureConfig+0xb2>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	689b      	ldr	r3, [r3, #8]
 800537e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	430a      	orrs	r2, r1
 800538c:	609a      	str	r2, [r3, #8]
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005392:	f003 0320 	and.w	r3, r3, #32
 8005396:	2b00      	cmp	r3, #0
 8005398:	d00a      	beq.n	80053b0 <UART_AdvFeatureConfig+0xd4>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	689b      	ldr	r3, [r3, #8]
 80053a0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	430a      	orrs	r2, r1
 80053ae:	609a      	str	r2, [r3, #8]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d01a      	beq.n	80053f2 <UART_AdvFeatureConfig+0x116>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	430a      	orrs	r2, r1
 80053d0:	605a      	str	r2, [r3, #4]
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80053da:	d10a      	bne.n	80053f2 <UART_AdvFeatureConfig+0x116>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	430a      	orrs	r2, r1
 80053f0:	605a      	str	r2, [r3, #4]
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d00a      	beq.n	8005414 <UART_AdvFeatureConfig+0x138>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	685b      	ldr	r3, [r3, #4]
 8005404:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	430a      	orrs	r2, r1
 8005412:	605a      	str	r2, [r3, #4]
 8005414:	bf00      	nop
 8005416:	370c      	adds	r7, #12
 8005418:	46bd      	mov	sp, r7
 800541a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541e:	4770      	bx	lr

08005420 <UART_CheckIdleState>:
 8005420:	b580      	push	{r7, lr}
 8005422:	b098      	sub	sp, #96	; 0x60
 8005424:	af02      	add	r7, sp, #8
 8005426:	6078      	str	r0, [r7, #4]
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2200      	movs	r2, #0
 800542c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8005430:	f7fc ff76 	bl	8002320 <HAL_GetTick>
 8005434:	6578      	str	r0, [r7, #84]	; 0x54
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f003 0308 	and.w	r3, r3, #8
 8005440:	2b08      	cmp	r3, #8
 8005442:	d12f      	bne.n	80054a4 <UART_CheckIdleState+0x84>
 8005444:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005448:	9300      	str	r3, [sp, #0]
 800544a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800544c:	2200      	movs	r2, #0
 800544e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005452:	6878      	ldr	r0, [r7, #4]
 8005454:	f000 f88e 	bl	8005574 <UART_WaitOnFlagUntilTimeout>
 8005458:	4603      	mov	r3, r0
 800545a:	2b00      	cmp	r3, #0
 800545c:	d022      	beq.n	80054a4 <UART_CheckIdleState+0x84>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	63bb      	str	r3, [r7, #56]	; 0x38
 8005464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005466:	e853 3f00 	ldrex	r3, [r3]
 800546a:	637b      	str	r3, [r7, #52]	; 0x34
 800546c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800546e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005472:	653b      	str	r3, [r7, #80]	; 0x50
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	461a      	mov	r2, r3
 800547a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800547c:	647b      	str	r3, [r7, #68]	; 0x44
 800547e:	643a      	str	r2, [r7, #64]	; 0x40
 8005480:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005482:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005484:	e841 2300 	strex	r3, r2, [r1]
 8005488:	63fb      	str	r3, [r7, #60]	; 0x3c
 800548a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800548c:	2b00      	cmp	r3, #0
 800548e:	d1e6      	bne.n	800545e <UART_CheckIdleState+0x3e>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2220      	movs	r2, #32
 8005494:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2200      	movs	r2, #0
 800549c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 80054a0:	2303      	movs	r3, #3
 80054a2:	e063      	b.n	800556c <UART_CheckIdleState+0x14c>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f003 0304 	and.w	r3, r3, #4
 80054ae:	2b04      	cmp	r3, #4
 80054b0:	d149      	bne.n	8005546 <UART_CheckIdleState+0x126>
 80054b2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80054b6:	9300      	str	r3, [sp, #0]
 80054b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80054ba:	2200      	movs	r2, #0
 80054bc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80054c0:	6878      	ldr	r0, [r7, #4]
 80054c2:	f000 f857 	bl	8005574 <UART_WaitOnFlagUntilTimeout>
 80054c6:	4603      	mov	r3, r0
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d03c      	beq.n	8005546 <UART_CheckIdleState+0x126>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	627b      	str	r3, [r7, #36]	; 0x24
 80054d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d4:	e853 3f00 	ldrex	r3, [r3]
 80054d8:	623b      	str	r3, [r7, #32]
 80054da:	6a3b      	ldr	r3, [r7, #32]
 80054dc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80054e0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	461a      	mov	r2, r3
 80054e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054ea:	633b      	str	r3, [r7, #48]	; 0x30
 80054ec:	62fa      	str	r2, [r7, #44]	; 0x2c
 80054ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80054f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054f2:	e841 2300 	strex	r3, r2, [r1]
 80054f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80054f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d1e6      	bne.n	80054cc <UART_CheckIdleState+0xac>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	3308      	adds	r3, #8
 8005504:	613b      	str	r3, [r7, #16]
 8005506:	693b      	ldr	r3, [r7, #16]
 8005508:	e853 3f00 	ldrex	r3, [r3]
 800550c:	60fb      	str	r3, [r7, #12]
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	f023 0301 	bic.w	r3, r3, #1
 8005514:	64bb      	str	r3, [r7, #72]	; 0x48
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	3308      	adds	r3, #8
 800551c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800551e:	61fa      	str	r2, [r7, #28]
 8005520:	61bb      	str	r3, [r7, #24]
 8005522:	69b9      	ldr	r1, [r7, #24]
 8005524:	69fa      	ldr	r2, [r7, #28]
 8005526:	e841 2300 	strex	r3, r2, [r1]
 800552a:	617b      	str	r3, [r7, #20]
 800552c:	697b      	ldr	r3, [r7, #20]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d1e5      	bne.n	80054fe <UART_CheckIdleState+0xde>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2220      	movs	r2, #32
 8005536:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2200      	movs	r2, #0
 800553e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 8005542:	2303      	movs	r3, #3
 8005544:	e012      	b.n	800556c <UART_CheckIdleState+0x14c>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2220      	movs	r2, #32
 800554a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2220      	movs	r2, #32
 8005552:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2200      	movs	r2, #0
 800555a:	66da      	str	r2, [r3, #108]	; 0x6c
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2200      	movs	r2, #0
 8005560:	671a      	str	r2, [r3, #112]	; 0x70
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2200      	movs	r2, #0
 8005566:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 800556a:	2300      	movs	r3, #0
 800556c:	4618      	mov	r0, r3
 800556e:	3758      	adds	r7, #88	; 0x58
 8005570:	46bd      	mov	sp, r7
 8005572:	bd80      	pop	{r7, pc}

08005574 <UART_WaitOnFlagUntilTimeout>:
 8005574:	b580      	push	{r7, lr}
 8005576:	b084      	sub	sp, #16
 8005578:	af00      	add	r7, sp, #0
 800557a:	60f8      	str	r0, [r7, #12]
 800557c:	60b9      	str	r1, [r7, #8]
 800557e:	603b      	str	r3, [r7, #0]
 8005580:	4613      	mov	r3, r2
 8005582:	71fb      	strb	r3, [r7, #7]
 8005584:	e049      	b.n	800561a <UART_WaitOnFlagUntilTimeout+0xa6>
 8005586:	69bb      	ldr	r3, [r7, #24]
 8005588:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800558c:	d045      	beq.n	800561a <UART_WaitOnFlagUntilTimeout+0xa6>
 800558e:	f7fc fec7 	bl	8002320 <HAL_GetTick>
 8005592:	4602      	mov	r2, r0
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	1ad3      	subs	r3, r2, r3
 8005598:	69ba      	ldr	r2, [r7, #24]
 800559a:	429a      	cmp	r2, r3
 800559c:	d302      	bcc.n	80055a4 <UART_WaitOnFlagUntilTimeout+0x30>
 800559e:	69bb      	ldr	r3, [r7, #24]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d101      	bne.n	80055a8 <UART_WaitOnFlagUntilTimeout+0x34>
 80055a4:	2303      	movs	r3, #3
 80055a6:	e048      	b.n	800563a <UART_WaitOnFlagUntilTimeout+0xc6>
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f003 0304 	and.w	r3, r3, #4
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d031      	beq.n	800561a <UART_WaitOnFlagUntilTimeout+0xa6>
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	69db      	ldr	r3, [r3, #28]
 80055bc:	f003 0308 	and.w	r3, r3, #8
 80055c0:	2b08      	cmp	r3, #8
 80055c2:	d110      	bne.n	80055e6 <UART_WaitOnFlagUntilTimeout+0x72>
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	2208      	movs	r2, #8
 80055ca:	621a      	str	r2, [r3, #32]
 80055cc:	68f8      	ldr	r0, [r7, #12]
 80055ce:	f000 f838 	bl	8005642 <UART_EndRxTransfer>
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	2208      	movs	r2, #8
 80055d6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	2200      	movs	r2, #0
 80055de:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 80055e2:	2301      	movs	r3, #1
 80055e4:	e029      	b.n	800563a <UART_WaitOnFlagUntilTimeout+0xc6>
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	69db      	ldr	r3, [r3, #28]
 80055ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055f4:	d111      	bne.n	800561a <UART_WaitOnFlagUntilTimeout+0xa6>
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80055fe:	621a      	str	r2, [r3, #32]
 8005600:	68f8      	ldr	r0, [r7, #12]
 8005602:	f000 f81e 	bl	8005642 <UART_EndRxTransfer>
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	2220      	movs	r2, #32
 800560a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	2200      	movs	r2, #0
 8005612:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 8005616:	2303      	movs	r3, #3
 8005618:	e00f      	b.n	800563a <UART_WaitOnFlagUntilTimeout+0xc6>
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	69da      	ldr	r2, [r3, #28]
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	4013      	ands	r3, r2
 8005624:	68ba      	ldr	r2, [r7, #8]
 8005626:	429a      	cmp	r2, r3
 8005628:	bf0c      	ite	eq
 800562a:	2301      	moveq	r3, #1
 800562c:	2300      	movne	r3, #0
 800562e:	b2db      	uxtb	r3, r3
 8005630:	461a      	mov	r2, r3
 8005632:	79fb      	ldrb	r3, [r7, #7]
 8005634:	429a      	cmp	r2, r3
 8005636:	d0a6      	beq.n	8005586 <UART_WaitOnFlagUntilTimeout+0x12>
 8005638:	2300      	movs	r3, #0
 800563a:	4618      	mov	r0, r3
 800563c:	3710      	adds	r7, #16
 800563e:	46bd      	mov	sp, r7
 8005640:	bd80      	pop	{r7, pc}

08005642 <UART_EndRxTransfer>:
 8005642:	b480      	push	{r7}
 8005644:	b095      	sub	sp, #84	; 0x54
 8005646:	af00      	add	r7, sp, #0
 8005648:	6078      	str	r0, [r7, #4]
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	637b      	str	r3, [r7, #52]	; 0x34
 8005650:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005652:	e853 3f00 	ldrex	r3, [r3]
 8005656:	633b      	str	r3, [r7, #48]	; 0x30
 8005658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800565a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800565e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	461a      	mov	r2, r3
 8005666:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005668:	643b      	str	r3, [r7, #64]	; 0x40
 800566a:	63fa      	str	r2, [r7, #60]	; 0x3c
 800566c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800566e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005670:	e841 2300 	strex	r3, r2, [r1]
 8005674:	63bb      	str	r3, [r7, #56]	; 0x38
 8005676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005678:	2b00      	cmp	r3, #0
 800567a:	d1e6      	bne.n	800564a <UART_EndRxTransfer+0x8>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	3308      	adds	r3, #8
 8005682:	623b      	str	r3, [r7, #32]
 8005684:	6a3b      	ldr	r3, [r7, #32]
 8005686:	e853 3f00 	ldrex	r3, [r3]
 800568a:	61fb      	str	r3, [r7, #28]
 800568c:	69fb      	ldr	r3, [r7, #28]
 800568e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005692:	f023 0301 	bic.w	r3, r3, #1
 8005696:	64bb      	str	r3, [r7, #72]	; 0x48
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	3308      	adds	r3, #8
 800569e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80056a0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80056a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80056a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80056a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80056a8:	e841 2300 	strex	r3, r2, [r1]
 80056ac:	627b      	str	r3, [r7, #36]	; 0x24
 80056ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d1e3      	bne.n	800567c <UART_EndRxTransfer+0x3a>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80056b8:	2b01      	cmp	r3, #1
 80056ba:	d118      	bne.n	80056ee <UART_EndRxTransfer+0xac>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	60fb      	str	r3, [r7, #12]
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	e853 3f00 	ldrex	r3, [r3]
 80056c8:	60bb      	str	r3, [r7, #8]
 80056ca:	68bb      	ldr	r3, [r7, #8]
 80056cc:	f023 0310 	bic.w	r3, r3, #16
 80056d0:	647b      	str	r3, [r7, #68]	; 0x44
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	461a      	mov	r2, r3
 80056d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056da:	61bb      	str	r3, [r7, #24]
 80056dc:	617a      	str	r2, [r7, #20]
 80056de:	6979      	ldr	r1, [r7, #20]
 80056e0:	69ba      	ldr	r2, [r7, #24]
 80056e2:	e841 2300 	strex	r3, r2, [r1]
 80056e6:	613b      	str	r3, [r7, #16]
 80056e8:	693b      	ldr	r3, [r7, #16]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d1e6      	bne.n	80056bc <UART_EndRxTransfer+0x7a>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2220      	movs	r2, #32
 80056f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2200      	movs	r2, #0
 80056fa:	66da      	str	r2, [r3, #108]	; 0x6c
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2200      	movs	r2, #0
 8005700:	675a      	str	r2, [r3, #116]	; 0x74
 8005702:	bf00      	nop
 8005704:	3754      	adds	r7, #84	; 0x54
 8005706:	46bd      	mov	sp, r7
 8005708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570c:	4770      	bx	lr

0800570e <HAL_UARTEx_DisableFifoMode>:
 800570e:	b480      	push	{r7}
 8005710:	b085      	sub	sp, #20
 8005712:	af00      	add	r7, sp, #0
 8005714:	6078      	str	r0, [r7, #4]
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800571c:	2b01      	cmp	r3, #1
 800571e:	d101      	bne.n	8005724 <HAL_UARTEx_DisableFifoMode+0x16>
 8005720:	2302      	movs	r3, #2
 8005722:	e027      	b.n	8005774 <HAL_UARTEx_DisableFifoMode+0x66>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2201      	movs	r2, #1
 8005728:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2224      	movs	r2, #36	; 0x24
 8005730:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	60fb      	str	r3, [r7, #12]
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	681a      	ldr	r2, [r3, #0]
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f022 0201 	bic.w	r2, r2, #1
 800574a:	601a      	str	r2, [r3, #0]
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005752:	60fb      	str	r3, [r7, #12]
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2200      	movs	r2, #0
 8005758:	665a      	str	r2, [r3, #100]	; 0x64
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	68fa      	ldr	r2, [r7, #12]
 8005760:	601a      	str	r2, [r3, #0]
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2220      	movs	r2, #32
 8005766:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2200      	movs	r2, #0
 800576e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 8005772:	2300      	movs	r3, #0
 8005774:	4618      	mov	r0, r3
 8005776:	3714      	adds	r7, #20
 8005778:	46bd      	mov	sp, r7
 800577a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577e:	4770      	bx	lr

08005780 <HAL_UARTEx_SetTxFifoThreshold>:
 8005780:	b580      	push	{r7, lr}
 8005782:	b084      	sub	sp, #16
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
 8005788:	6039      	str	r1, [r7, #0]
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005790:	2b01      	cmp	r3, #1
 8005792:	d101      	bne.n	8005798 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005794:	2302      	movs	r3, #2
 8005796:	e02d      	b.n	80057f4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2201      	movs	r2, #1
 800579c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2224      	movs	r2, #36	; 0x24
 80057a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	60fb      	str	r3, [r7, #12]
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	681a      	ldr	r2, [r3, #0]
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f022 0201 	bic.w	r2, r2, #1
 80057be:	601a      	str	r2, [r3, #0]
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	689b      	ldr	r3, [r3, #8]
 80057c6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	683a      	ldr	r2, [r7, #0]
 80057d0:	430a      	orrs	r2, r1
 80057d2:	609a      	str	r2, [r3, #8]
 80057d4:	6878      	ldr	r0, [r7, #4]
 80057d6:	f000 f84f 	bl	8005878 <UARTEx_SetNbDataToProcess>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	68fa      	ldr	r2, [r7, #12]
 80057e0:	601a      	str	r2, [r3, #0]
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2220      	movs	r2, #32
 80057e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2200      	movs	r2, #0
 80057ee:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 80057f2:	2300      	movs	r3, #0
 80057f4:	4618      	mov	r0, r3
 80057f6:	3710      	adds	r7, #16
 80057f8:	46bd      	mov	sp, r7
 80057fa:	bd80      	pop	{r7, pc}

080057fc <HAL_UARTEx_SetRxFifoThreshold>:
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b084      	sub	sp, #16
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
 8005804:	6039      	str	r1, [r7, #0]
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800580c:	2b01      	cmp	r3, #1
 800580e:	d101      	bne.n	8005814 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005810:	2302      	movs	r3, #2
 8005812:	e02d      	b.n	8005870 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2201      	movs	r2, #1
 8005818:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2224      	movs	r2, #36	; 0x24
 8005820:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	60fb      	str	r3, [r7, #12]
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	681a      	ldr	r2, [r3, #0]
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f022 0201 	bic.w	r2, r2, #1
 800583a:	601a      	str	r2, [r3, #0]
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	689b      	ldr	r3, [r3, #8]
 8005842:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	683a      	ldr	r2, [r7, #0]
 800584c:	430a      	orrs	r2, r1
 800584e:	609a      	str	r2, [r3, #8]
 8005850:	6878      	ldr	r0, [r7, #4]
 8005852:	f000 f811 	bl	8005878 <UARTEx_SetNbDataToProcess>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	68fa      	ldr	r2, [r7, #12]
 800585c:	601a      	str	r2, [r3, #0]
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2220      	movs	r2, #32
 8005862:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2200      	movs	r2, #0
 800586a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 800586e:	2300      	movs	r3, #0
 8005870:	4618      	mov	r0, r3
 8005872:	3710      	adds	r7, #16
 8005874:	46bd      	mov	sp, r7
 8005876:	bd80      	pop	{r7, pc}

08005878 <UARTEx_SetNbDataToProcess>:
 8005878:	b480      	push	{r7}
 800587a:	b085      	sub	sp, #20
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005884:	2b00      	cmp	r3, #0
 8005886:	d108      	bne.n	800589a <UARTEx_SetNbDataToProcess+0x22>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2201      	movs	r2, #1
 800588c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2201      	movs	r2, #1
 8005894:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8005898:	e031      	b.n	80058fe <UARTEx_SetNbDataToProcess+0x86>
 800589a:	2308      	movs	r3, #8
 800589c:	73fb      	strb	r3, [r7, #15]
 800589e:	2308      	movs	r3, #8
 80058a0:	73bb      	strb	r3, [r7, #14]
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	689b      	ldr	r3, [r3, #8]
 80058a8:	0e5b      	lsrs	r3, r3, #25
 80058aa:	b2db      	uxtb	r3, r3
 80058ac:	f003 0307 	and.w	r3, r3, #7
 80058b0:	737b      	strb	r3, [r7, #13]
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	689b      	ldr	r3, [r3, #8]
 80058b8:	0f5b      	lsrs	r3, r3, #29
 80058ba:	b2db      	uxtb	r3, r3
 80058bc:	f003 0307 	and.w	r3, r3, #7
 80058c0:	733b      	strb	r3, [r7, #12]
 80058c2:	7bbb      	ldrb	r3, [r7, #14]
 80058c4:	7b3a      	ldrb	r2, [r7, #12]
 80058c6:	4911      	ldr	r1, [pc, #68]	; (800590c <UARTEx_SetNbDataToProcess+0x94>)
 80058c8:	5c8a      	ldrb	r2, [r1, r2]
 80058ca:	fb02 f303 	mul.w	r3, r2, r3
 80058ce:	7b3a      	ldrb	r2, [r7, #12]
 80058d0:	490f      	ldr	r1, [pc, #60]	; (8005910 <UARTEx_SetNbDataToProcess+0x98>)
 80058d2:	5c8a      	ldrb	r2, [r1, r2]
 80058d4:	fb93 f3f2 	sdiv	r3, r3, r2
 80058d8:	b29a      	uxth	r2, r3
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80058e0:	7bfb      	ldrb	r3, [r7, #15]
 80058e2:	7b7a      	ldrb	r2, [r7, #13]
 80058e4:	4909      	ldr	r1, [pc, #36]	; (800590c <UARTEx_SetNbDataToProcess+0x94>)
 80058e6:	5c8a      	ldrb	r2, [r1, r2]
 80058e8:	fb02 f303 	mul.w	r3, r2, r3
 80058ec:	7b7a      	ldrb	r2, [r7, #13]
 80058ee:	4908      	ldr	r1, [pc, #32]	; (8005910 <UARTEx_SetNbDataToProcess+0x98>)
 80058f0:	5c8a      	ldrb	r2, [r1, r2]
 80058f2:	fb93 f3f2 	sdiv	r3, r3, r2
 80058f6:	b29a      	uxth	r2, r3
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 80058fe:	bf00      	nop
 8005900:	3714      	adds	r7, #20
 8005902:	46bd      	mov	sp, r7
 8005904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005908:	4770      	bx	lr
 800590a:	bf00      	nop
 800590c:	08009e70 	.word	0x08009e70
 8005910:	08009e78 	.word	0x08009e78

08005914 <aci_gap_set_non_discoverable>:
 8005914:	b580      	push	{r7, lr}
 8005916:	b088      	sub	sp, #32
 8005918:	af00      	add	r7, sp, #0
 800591a:	2300      	movs	r3, #0
 800591c:	71fb      	strb	r3, [r7, #7]
 800591e:	f107 0308 	add.w	r3, r7, #8
 8005922:	2218      	movs	r2, #24
 8005924:	2100      	movs	r1, #0
 8005926:	4618      	mov	r0, r3
 8005928:	f001 f8d8 	bl	8006adc <Osal_MemSet>
 800592c:	233f      	movs	r3, #63	; 0x3f
 800592e:	813b      	strh	r3, [r7, #8]
 8005930:	2381      	movs	r3, #129	; 0x81
 8005932:	817b      	strh	r3, [r7, #10]
 8005934:	1dfb      	adds	r3, r7, #7
 8005936:	61bb      	str	r3, [r7, #24]
 8005938:	2301      	movs	r3, #1
 800593a:	61fb      	str	r3, [r7, #28]
 800593c:	f107 0308 	add.w	r3, r7, #8
 8005940:	2100      	movs	r1, #0
 8005942:	4618      	mov	r0, r3
 8005944:	f001 fb54 	bl	8006ff0 <hci_send_req>
 8005948:	4603      	mov	r3, r0
 800594a:	2b00      	cmp	r3, #0
 800594c:	da01      	bge.n	8005952 <aci_gap_set_non_discoverable+0x3e>
 800594e:	23ff      	movs	r3, #255	; 0xff
 8005950:	e000      	b.n	8005954 <aci_gap_set_non_discoverable+0x40>
 8005952:	79fb      	ldrb	r3, [r7, #7]
 8005954:	4618      	mov	r0, r3
 8005956:	3720      	adds	r7, #32
 8005958:	46bd      	mov	sp, r7
 800595a:	bd80      	pop	{r7, pc}

0800595c <aci_gap_set_discoverable>:
 800595c:	b5b0      	push	{r4, r5, r7, lr}
 800595e:	b0ce      	sub	sp, #312	; 0x138
 8005960:	af00      	add	r7, sp, #0
 8005962:	4605      	mov	r5, r0
 8005964:	460c      	mov	r4, r1
 8005966:	4610      	mov	r0, r2
 8005968:	4619      	mov	r1, r3
 800596a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800596e:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8005972:	462a      	mov	r2, r5
 8005974:	701a      	strb	r2, [r3, #0]
 8005976:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800597a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800597e:	4622      	mov	r2, r4
 8005980:	801a      	strh	r2, [r3, #0]
 8005982:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005986:	f5a3 739b 	sub.w	r3, r3, #310	; 0x136
 800598a:	4602      	mov	r2, r0
 800598c:	801a      	strh	r2, [r3, #0]
 800598e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005992:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8005996:	460a      	mov	r2, r1
 8005998:	701a      	strb	r2, [r3, #0]
 800599a:	f107 0310 	add.w	r3, r7, #16
 800599e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 80059a2:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 80059a6:	3308      	adds	r3, #8
 80059a8:	f107 0210 	add.w	r2, r7, #16
 80059ac:	4413      	add	r3, r2
 80059ae:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 80059b2:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 80059b6:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 80059ba:	4413      	add	r3, r2
 80059bc:	3309      	adds	r3, #9
 80059be:	f107 0210 	add.w	r2, r7, #16
 80059c2:	4413      	add	r3, r2
 80059c4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80059c8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80059cc:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80059d0:	2200      	movs	r2, #0
 80059d2:	701a      	strb	r2, [r3, #0]
 80059d4:	2300      	movs	r3, #0
 80059d6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80059da:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80059de:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80059e2:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 80059e6:	7812      	ldrb	r2, [r2, #0]
 80059e8:	701a      	strb	r2, [r3, #0]
 80059ea:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80059ee:	3301      	adds	r3, #1
 80059f0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80059f4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80059f8:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80059fc:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 8005a00:	8812      	ldrh	r2, [r2, #0]
 8005a02:	f8a3 2001 	strh.w	r2, [r3, #1]
 8005a06:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005a0a:	3302      	adds	r3, #2
 8005a0c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005a10:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005a14:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8005a18:	f5a2 729b 	sub.w	r2, r2, #310	; 0x136
 8005a1c:	8812      	ldrh	r2, [r2, #0]
 8005a1e:	f8a3 2003 	strh.w	r2, [r3, #3]
 8005a22:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005a26:	3302      	adds	r3, #2
 8005a28:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005a2c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005a30:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8005a34:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8005a38:	7812      	ldrb	r2, [r2, #0]
 8005a3a:	715a      	strb	r2, [r3, #5]
 8005a3c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005a40:	3301      	adds	r3, #1
 8005a42:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005a46:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005a4a:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8005a4e:	719a      	strb	r2, [r3, #6]
 8005a50:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005a54:	3301      	adds	r3, #1
 8005a56:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005a5a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005a5e:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8005a62:	71da      	strb	r2, [r3, #7]
 8005a64:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005a68:	3301      	adds	r3, #1
 8005a6a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005a6e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005a72:	3308      	adds	r3, #8
 8005a74:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8005a78:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	f001 f81d 	bl	8006abc <Osal_MemCpy>
 8005a82:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8005a86:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8005a8a:	4413      	add	r3, r2
 8005a8c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005a90:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005a94:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8005a98:	701a      	strb	r2, [r3, #0]
 8005a9a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005a9e:	3301      	adds	r3, #1
 8005aa0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005aa4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005aa8:	3301      	adds	r3, #1
 8005aaa:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8005aae:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	f001 f802 	bl	8006abc <Osal_MemCpy>
 8005ab8:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8005abc:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8005ac0:	4413      	add	r3, r2
 8005ac2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005ac6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005aca:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 8005ace:	801a      	strh	r2, [r3, #0]
 8005ad0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005ad4:	3302      	adds	r3, #2
 8005ad6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005ada:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ade:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 8005ae2:	805a      	strh	r2, [r3, #2]
 8005ae4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005ae8:	3302      	adds	r3, #2
 8005aea:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005aee:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005af2:	2218      	movs	r2, #24
 8005af4:	2100      	movs	r1, #0
 8005af6:	4618      	mov	r0, r3
 8005af8:	f000 fff0 	bl	8006adc <Osal_MemSet>
 8005afc:	233f      	movs	r3, #63	; 0x3f
 8005afe:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
 8005b02:	2383      	movs	r3, #131	; 0x83
 8005b04:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
 8005b08:	f107 0310 	add.w	r3, r7, #16
 8005b0c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005b10:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005b14:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005b18:	f107 030f 	add.w	r3, r7, #15
 8005b1c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005b20:	2301      	movs	r3, #1
 8005b22:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005b26:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005b2a:	2100      	movs	r1, #0
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	f001 fa5f 	bl	8006ff0 <hci_send_req>
 8005b32:	4603      	mov	r3, r0
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	da01      	bge.n	8005b3c <aci_gap_set_discoverable+0x1e0>
 8005b38:	23ff      	movs	r3, #255	; 0xff
 8005b3a:	e004      	b.n	8005b46 <aci_gap_set_discoverable+0x1ea>
 8005b3c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005b40:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8005b44:	781b      	ldrb	r3, [r3, #0]
 8005b46:	4618      	mov	r0, r3
 8005b48:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	bdb0      	pop	{r4, r5, r7, pc}

08005b50 <aci_gap_set_io_capability>:
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b0cc      	sub	sp, #304	; 0x130
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	4602      	mov	r2, r0
 8005b58:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b5c:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8005b60:	701a      	strb	r2, [r3, #0]
 8005b62:	f107 0310 	add.w	r3, r7, #16
 8005b66:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8005b6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b6e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8005b72:	2200      	movs	r2, #0
 8005b74:	701a      	strb	r2, [r3, #0]
 8005b76:	2300      	movs	r3, #0
 8005b78:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005b7c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b80:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005b84:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8005b88:	7812      	ldrb	r2, [r2, #0]
 8005b8a:	701a      	strb	r2, [r3, #0]
 8005b8c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005b90:	3301      	adds	r3, #1
 8005b92:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005b96:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005b9a:	2218      	movs	r2, #24
 8005b9c:	2100      	movs	r1, #0
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	f000 ff9c 	bl	8006adc <Osal_MemSet>
 8005ba4:	233f      	movs	r3, #63	; 0x3f
 8005ba6:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
 8005baa:	2385      	movs	r3, #133	; 0x85
 8005bac:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
 8005bb0:	f107 0310 	add.w	r3, r7, #16
 8005bb4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005bb8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005bbc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005bc0:	f107 030f 	add.w	r3, r7, #15
 8005bc4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005bc8:	2301      	movs	r3, #1
 8005bca:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005bce:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005bd2:	2100      	movs	r1, #0
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	f001 fa0b 	bl	8006ff0 <hci_send_req>
 8005bda:	4603      	mov	r3, r0
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	da01      	bge.n	8005be4 <aci_gap_set_io_capability+0x94>
 8005be0:	23ff      	movs	r3, #255	; 0xff
 8005be2:	e004      	b.n	8005bee <aci_gap_set_io_capability+0x9e>
 8005be4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005be8:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8005bec:	781b      	ldrb	r3, [r3, #0]
 8005bee:	4618      	mov	r0, r3
 8005bf0:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	bd80      	pop	{r7, pc}

08005bf8 <aci_gap_set_authentication_requirement>:
 8005bf8:	b5b0      	push	{r4, r5, r7, lr}
 8005bfa:	b0cc      	sub	sp, #304	; 0x130
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	4605      	mov	r5, r0
 8005c00:	460c      	mov	r4, r1
 8005c02:	4610      	mov	r0, r2
 8005c04:	4619      	mov	r1, r3
 8005c06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c0a:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8005c0e:	462a      	mov	r2, r5
 8005c10:	701a      	strb	r2, [r3, #0]
 8005c12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c16:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8005c1a:	4622      	mov	r2, r4
 8005c1c:	701a      	strb	r2, [r3, #0]
 8005c1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c22:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8005c26:	4602      	mov	r2, r0
 8005c28:	701a      	strb	r2, [r3, #0]
 8005c2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c2e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005c32:	460a      	mov	r2, r1
 8005c34:	701a      	strb	r2, [r3, #0]
 8005c36:	f107 0310 	add.w	r3, r7, #16
 8005c3a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8005c3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c42:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8005c46:	2200      	movs	r2, #0
 8005c48:	701a      	strb	r2, [r3, #0]
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005c50:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c54:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005c58:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8005c5c:	7812      	ldrb	r2, [r2, #0]
 8005c5e:	701a      	strb	r2, [r3, #0]
 8005c60:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005c64:	3301      	adds	r3, #1
 8005c66:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005c6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c6e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005c72:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8005c76:	7812      	ldrb	r2, [r2, #0]
 8005c78:	705a      	strb	r2, [r3, #1]
 8005c7a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005c7e:	3301      	adds	r3, #1
 8005c80:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005c84:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c88:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005c8c:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8005c90:	7812      	ldrb	r2, [r2, #0]
 8005c92:	709a      	strb	r2, [r3, #2]
 8005c94:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005c98:	3301      	adds	r3, #1
 8005c9a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005c9e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ca2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005ca6:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8005caa:	7812      	ldrb	r2, [r2, #0]
 8005cac:	70da      	strb	r2, [r3, #3]
 8005cae:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005cb2:	3301      	adds	r3, #1
 8005cb4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005cb8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005cbc:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 8005cc0:	711a      	strb	r2, [r3, #4]
 8005cc2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005cc6:	3301      	adds	r3, #1
 8005cc8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005ccc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005cd0:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 8005cd4:	715a      	strb	r2, [r3, #5]
 8005cd6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005cda:	3301      	adds	r3, #1
 8005cdc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005ce0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ce4:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8005ce8:	719a      	strb	r2, [r3, #6]
 8005cea:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005cee:	3301      	adds	r3, #1
 8005cf0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005cf4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005cf8:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8005cfc:	f8c3 2007 	str.w	r2, [r3, #7]
 8005d00:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005d04:	3304      	adds	r3, #4
 8005d06:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005d0a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d0e:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8005d12:	72da      	strb	r2, [r3, #11]
 8005d14:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005d18:	3301      	adds	r3, #1
 8005d1a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005d1e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005d22:	2218      	movs	r2, #24
 8005d24:	2100      	movs	r1, #0
 8005d26:	4618      	mov	r0, r3
 8005d28:	f000 fed8 	bl	8006adc <Osal_MemSet>
 8005d2c:	233f      	movs	r3, #63	; 0x3f
 8005d2e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
 8005d32:	2386      	movs	r3, #134	; 0x86
 8005d34:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
 8005d38:	f107 0310 	add.w	r3, r7, #16
 8005d3c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005d40:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005d44:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005d48:	f107 030f 	add.w	r3, r7, #15
 8005d4c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005d50:	2301      	movs	r3, #1
 8005d52:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005d56:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005d5a:	2100      	movs	r1, #0
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	f001 f947 	bl	8006ff0 <hci_send_req>
 8005d62:	4603      	mov	r3, r0
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	da01      	bge.n	8005d6c <aci_gap_set_authentication_requirement+0x174>
 8005d68:	23ff      	movs	r3, #255	; 0xff
 8005d6a:	e004      	b.n	8005d76 <aci_gap_set_authentication_requirement+0x17e>
 8005d6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d70:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8005d74:	781b      	ldrb	r3, [r3, #0]
 8005d76:	4618      	mov	r0, r3
 8005d78:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	bdb0      	pop	{r4, r5, r7, pc}

08005d80 <aci_gap_pass_key_resp>:
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b0cc      	sub	sp, #304	; 0x130
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	4602      	mov	r2, r0
 8005d88:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d8c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d90:	6019      	str	r1, [r3, #0]
 8005d92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d96:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8005d9a:	801a      	strh	r2, [r3, #0]
 8005d9c:	f107 0310 	add.w	r3, r7, #16
 8005da0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8005da4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005da8:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8005dac:	2200      	movs	r2, #0
 8005dae:	701a      	strb	r2, [r3, #0]
 8005db0:	2300      	movs	r3, #0
 8005db2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005db6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005dba:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005dbe:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8005dc2:	8812      	ldrh	r2, [r2, #0]
 8005dc4:	801a      	strh	r2, [r3, #0]
 8005dc6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005dca:	3302      	adds	r3, #2
 8005dcc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005dd0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005dd4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005dd8:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 8005ddc:	6812      	ldr	r2, [r2, #0]
 8005dde:	f8c3 2002 	str.w	r2, [r3, #2]
 8005de2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005de6:	3304      	adds	r3, #4
 8005de8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005dec:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005df0:	2218      	movs	r2, #24
 8005df2:	2100      	movs	r1, #0
 8005df4:	4618      	mov	r0, r3
 8005df6:	f000 fe71 	bl	8006adc <Osal_MemSet>
 8005dfa:	233f      	movs	r3, #63	; 0x3f
 8005dfc:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
 8005e00:	2388      	movs	r3, #136	; 0x88
 8005e02:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
 8005e06:	f107 0310 	add.w	r3, r7, #16
 8005e0a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005e0e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005e12:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005e16:	f107 030f 	add.w	r3, r7, #15
 8005e1a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005e1e:	2301      	movs	r3, #1
 8005e20:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005e24:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005e28:	2100      	movs	r1, #0
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	f001 f8e0 	bl	8006ff0 <hci_send_req>
 8005e30:	4603      	mov	r3, r0
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	da01      	bge.n	8005e3a <aci_gap_pass_key_resp+0xba>
 8005e36:	23ff      	movs	r3, #255	; 0xff
 8005e38:	e004      	b.n	8005e44 <aci_gap_pass_key_resp+0xc4>
 8005e3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e3e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8005e42:	781b      	ldrb	r3, [r3, #0]
 8005e44:	4618      	mov	r0, r3
 8005e46:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	bd80      	pop	{r7, pc}

08005e4e <aci_gap_init>:
 8005e4e:	b590      	push	{r4, r7, lr}
 8005e50:	b0cd      	sub	sp, #308	; 0x134
 8005e52:	af00      	add	r7, sp, #0
 8005e54:	4604      	mov	r4, r0
 8005e56:	4608      	mov	r0, r1
 8005e58:	4611      	mov	r1, r2
 8005e5a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005e5e:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 8005e62:	6013      	str	r3, [r2, #0]
 8005e64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e68:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8005e6c:	4622      	mov	r2, r4
 8005e6e:	701a      	strb	r2, [r3, #0]
 8005e70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e74:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8005e78:	4602      	mov	r2, r0
 8005e7a:	701a      	strb	r2, [r3, #0]
 8005e7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e80:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8005e84:	460a      	mov	r2, r1
 8005e86:	701a      	strb	r2, [r3, #0]
 8005e88:	f107 0310 	add.w	r3, r7, #16
 8005e8c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8005e90:	f107 0308 	add.w	r3, r7, #8
 8005e94:	2207      	movs	r2, #7
 8005e96:	2100      	movs	r1, #0
 8005e98:	4618      	mov	r0, r3
 8005e9a:	f000 fe1f 	bl	8006adc <Osal_MemSet>
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005ea4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ea8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005eac:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8005eb0:	7812      	ldrb	r2, [r2, #0]
 8005eb2:	701a      	strb	r2, [r3, #0]
 8005eb4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005eb8:	3301      	adds	r3, #1
 8005eba:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005ebe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ec2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005ec6:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8005eca:	7812      	ldrb	r2, [r2, #0]
 8005ecc:	705a      	strb	r2, [r3, #1]
 8005ece:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005ed2:	3301      	adds	r3, #1
 8005ed4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005ed8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005edc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005ee0:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8005ee4:	7812      	ldrb	r2, [r2, #0]
 8005ee6:	709a      	strb	r2, [r3, #2]
 8005ee8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005eec:	3301      	adds	r3, #1
 8005eee:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005ef2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005ef6:	2218      	movs	r2, #24
 8005ef8:	2100      	movs	r1, #0
 8005efa:	4618      	mov	r0, r3
 8005efc:	f000 fdee 	bl	8006adc <Osal_MemSet>
 8005f00:	233f      	movs	r3, #63	; 0x3f
 8005f02:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
 8005f06:	238a      	movs	r3, #138	; 0x8a
 8005f08:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
 8005f0c:	f107 0310 	add.w	r3, r7, #16
 8005f10:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005f14:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005f18:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005f1c:	f107 0308 	add.w	r3, r7, #8
 8005f20:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005f24:	2307      	movs	r3, #7
 8005f26:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005f2a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005f2e:	2100      	movs	r1, #0
 8005f30:	4618      	mov	r0, r3
 8005f32:	f001 f85d 	bl	8006ff0 <hci_send_req>
 8005f36:	4603      	mov	r3, r0
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	da01      	bge.n	8005f40 <aci_gap_init+0xf2>
 8005f3c:	23ff      	movs	r3, #255	; 0xff
 8005f3e:	e02e      	b.n	8005f9e <aci_gap_init+0x150>
 8005f40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f44:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005f48:	781b      	ldrb	r3, [r3, #0]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d005      	beq.n	8005f5a <aci_gap_init+0x10c>
 8005f4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f52:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005f56:	781b      	ldrb	r3, [r3, #0]
 8005f58:	e021      	b.n	8005f9e <aci_gap_init+0x150>
 8005f5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f5e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005f62:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8005f66:	b29a      	uxth	r2, r3
 8005f68:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f6c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	801a      	strh	r2, [r3, #0]
 8005f74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f78:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005f7c:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8005f80:	b29a      	uxth	r2, r3
 8005f82:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8005f86:	801a      	strh	r2, [r3, #0]
 8005f88:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f8c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005f90:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8005f94:	b29a      	uxth	r2, r3
 8005f96:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8005f9a:	801a      	strh	r2, [r3, #0]
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	bd90      	pop	{r4, r7, pc}

08005fa8 <aci_gap_update_adv_data>:
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b0cc      	sub	sp, #304	; 0x130
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	4602      	mov	r2, r0
 8005fb0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fb4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005fb8:	6019      	str	r1, [r3, #0]
 8005fba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fbe:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8005fc2:	701a      	strb	r2, [r3, #0]
 8005fc4:	f107 0310 	add.w	r3, r7, #16
 8005fc8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8005fcc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fd0:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	701a      	strb	r2, [r3, #0]
 8005fd8:	2300      	movs	r3, #0
 8005fda:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005fde:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005fe2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005fe6:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8005fea:	7812      	ldrb	r2, [r2, #0]
 8005fec:	701a      	strb	r2, [r3, #0]
 8005fee:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005ff2:	3301      	adds	r3, #1
 8005ff4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005ff8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ffc:	1c58      	adds	r0, r3, #1
 8005ffe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006002:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8006006:	781a      	ldrb	r2, [r3, #0]
 8006008:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800600c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006010:	6819      	ldr	r1, [r3, #0]
 8006012:	f000 fd53 	bl	8006abc <Osal_MemCpy>
 8006016:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800601a:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800601e:	781b      	ldrb	r3, [r3, #0]
 8006020:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8006024:	4413      	add	r3, r2
 8006026:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800602a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800602e:	2218      	movs	r2, #24
 8006030:	2100      	movs	r1, #0
 8006032:	4618      	mov	r0, r3
 8006034:	f000 fd52 	bl	8006adc <Osal_MemSet>
 8006038:	233f      	movs	r3, #63	; 0x3f
 800603a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
 800603e:	238e      	movs	r3, #142	; 0x8e
 8006040:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
 8006044:	f107 0310 	add.w	r3, r7, #16
 8006048:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800604c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006050:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006054:	f107 030f 	add.w	r3, r7, #15
 8006058:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800605c:	2301      	movs	r3, #1
 800605e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006062:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006066:	2100      	movs	r1, #0
 8006068:	4618      	mov	r0, r3
 800606a:	f000 ffc1 	bl	8006ff0 <hci_send_req>
 800606e:	4603      	mov	r3, r0
 8006070:	2b00      	cmp	r3, #0
 8006072:	da01      	bge.n	8006078 <aci_gap_update_adv_data+0xd0>
 8006074:	23ff      	movs	r3, #255	; 0xff
 8006076:	e004      	b.n	8006082 <aci_gap_update_adv_data+0xda>
 8006078:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800607c:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8006080:	781b      	ldrb	r3, [r3, #0]
 8006082:	4618      	mov	r0, r3
 8006084:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006088:	46bd      	mov	sp, r7
 800608a:	bd80      	pop	{r7, pc}

0800608c <aci_gap_configure_whitelist>:
 800608c:	b580      	push	{r7, lr}
 800608e:	b088      	sub	sp, #32
 8006090:	af00      	add	r7, sp, #0
 8006092:	2300      	movs	r3, #0
 8006094:	71fb      	strb	r3, [r7, #7]
 8006096:	f107 0308 	add.w	r3, r7, #8
 800609a:	2218      	movs	r2, #24
 800609c:	2100      	movs	r1, #0
 800609e:	4618      	mov	r0, r3
 80060a0:	f000 fd1c 	bl	8006adc <Osal_MemSet>
 80060a4:	233f      	movs	r3, #63	; 0x3f
 80060a6:	813b      	strh	r3, [r7, #8]
 80060a8:	2392      	movs	r3, #146	; 0x92
 80060aa:	817b      	strh	r3, [r7, #10]
 80060ac:	1dfb      	adds	r3, r7, #7
 80060ae:	61bb      	str	r3, [r7, #24]
 80060b0:	2301      	movs	r3, #1
 80060b2:	61fb      	str	r3, [r7, #28]
 80060b4:	f107 0308 	add.w	r3, r7, #8
 80060b8:	2100      	movs	r1, #0
 80060ba:	4618      	mov	r0, r3
 80060bc:	f000 ff98 	bl	8006ff0 <hci_send_req>
 80060c0:	4603      	mov	r3, r0
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	da01      	bge.n	80060ca <aci_gap_configure_whitelist+0x3e>
 80060c6:	23ff      	movs	r3, #255	; 0xff
 80060c8:	e000      	b.n	80060cc <aci_gap_configure_whitelist+0x40>
 80060ca:	79fb      	ldrb	r3, [r7, #7]
 80060cc:	4618      	mov	r0, r3
 80060ce:	3720      	adds	r7, #32
 80060d0:	46bd      	mov	sp, r7
 80060d2:	bd80      	pop	{r7, pc}

080060d4 <aci_gap_numeric_comparison_value_confirm_yesno>:
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b0cc      	sub	sp, #304	; 0x130
 80060d8:	af00      	add	r7, sp, #0
 80060da:	4602      	mov	r2, r0
 80060dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060e0:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80060e4:	801a      	strh	r2, [r3, #0]
 80060e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060ea:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 80060ee:	460a      	mov	r2, r1
 80060f0:	701a      	strb	r2, [r3, #0]
 80060f2:	f107 0310 	add.w	r3, r7, #16
 80060f6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80060fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060fe:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8006102:	2200      	movs	r2, #0
 8006104:	701a      	strb	r2, [r3, #0]
 8006106:	2300      	movs	r3, #0
 8006108:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800610c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006110:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006114:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8006118:	8812      	ldrh	r2, [r2, #0]
 800611a:	801a      	strh	r2, [r3, #0]
 800611c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006120:	3302      	adds	r3, #2
 8006122:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006126:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800612a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800612e:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8006132:	7812      	ldrb	r2, [r2, #0]
 8006134:	709a      	strb	r2, [r3, #2]
 8006136:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800613a:	3301      	adds	r3, #1
 800613c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006140:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006144:	2218      	movs	r2, #24
 8006146:	2100      	movs	r1, #0
 8006148:	4618      	mov	r0, r3
 800614a:	f000 fcc7 	bl	8006adc <Osal_MemSet>
 800614e:	233f      	movs	r3, #63	; 0x3f
 8006150:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
 8006154:	23a5      	movs	r3, #165	; 0xa5
 8006156:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
 800615a:	f107 0310 	add.w	r3, r7, #16
 800615e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006162:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006166:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800616a:	f107 030f 	add.w	r3, r7, #15
 800616e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006172:	2301      	movs	r3, #1
 8006174:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006178:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800617c:	2100      	movs	r1, #0
 800617e:	4618      	mov	r0, r3
 8006180:	f000 ff36 	bl	8006ff0 <hci_send_req>
 8006184:	4603      	mov	r3, r0
 8006186:	2b00      	cmp	r3, #0
 8006188:	da01      	bge.n	800618e <aci_gap_numeric_comparison_value_confirm_yesno+0xba>
 800618a:	23ff      	movs	r3, #255	; 0xff
 800618c:	e004      	b.n	8006198 <aci_gap_numeric_comparison_value_confirm_yesno+0xc4>
 800618e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006192:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8006196:	781b      	ldrb	r3, [r3, #0]
 8006198:	4618      	mov	r0, r3
 800619a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800619e:	46bd      	mov	sp, r7
 80061a0:	bd80      	pop	{r7, pc}

080061a2 <aci_gatt_init>:
 80061a2:	b580      	push	{r7, lr}
 80061a4:	b088      	sub	sp, #32
 80061a6:	af00      	add	r7, sp, #0
 80061a8:	2300      	movs	r3, #0
 80061aa:	71fb      	strb	r3, [r7, #7]
 80061ac:	f107 0308 	add.w	r3, r7, #8
 80061b0:	2218      	movs	r2, #24
 80061b2:	2100      	movs	r1, #0
 80061b4:	4618      	mov	r0, r3
 80061b6:	f000 fc91 	bl	8006adc <Osal_MemSet>
 80061ba:	233f      	movs	r3, #63	; 0x3f
 80061bc:	813b      	strh	r3, [r7, #8]
 80061be:	f240 1301 	movw	r3, #257	; 0x101
 80061c2:	817b      	strh	r3, [r7, #10]
 80061c4:	1dfb      	adds	r3, r7, #7
 80061c6:	61bb      	str	r3, [r7, #24]
 80061c8:	2301      	movs	r3, #1
 80061ca:	61fb      	str	r3, [r7, #28]
 80061cc:	f107 0308 	add.w	r3, r7, #8
 80061d0:	2100      	movs	r1, #0
 80061d2:	4618      	mov	r0, r3
 80061d4:	f000 ff0c 	bl	8006ff0 <hci_send_req>
 80061d8:	4603      	mov	r3, r0
 80061da:	2b00      	cmp	r3, #0
 80061dc:	da01      	bge.n	80061e2 <aci_gatt_init+0x40>
 80061de:	23ff      	movs	r3, #255	; 0xff
 80061e0:	e000      	b.n	80061e4 <aci_gatt_init+0x42>
 80061e2:	79fb      	ldrb	r3, [r7, #7]
 80061e4:	4618      	mov	r0, r3
 80061e6:	3720      	adds	r7, #32
 80061e8:	46bd      	mov	sp, r7
 80061ea:	bd80      	pop	{r7, pc}

080061ec <aci_gatt_add_service>:
 80061ec:	b590      	push	{r4, r7, lr}
 80061ee:	b0cf      	sub	sp, #316	; 0x13c
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	4604      	mov	r4, r0
 80061f4:	f507 709c 	add.w	r0, r7, #312	; 0x138
 80061f8:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
 80061fc:	6001      	str	r1, [r0, #0]
 80061fe:	4610      	mov	r0, r2
 8006200:	4619      	mov	r1, r3
 8006202:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006206:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 800620a:	4622      	mov	r2, r4
 800620c:	701a      	strb	r2, [r3, #0]
 800620e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006212:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8006216:	4602      	mov	r2, r0
 8006218:	701a      	strb	r2, [r3, #0]
 800621a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800621e:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8006222:	460a      	mov	r2, r1
 8006224:	701a      	strb	r2, [r3, #0]
 8006226:	f107 0310 	add.w	r3, r7, #16
 800622a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 800622e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006232:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8006236:	781b      	ldrb	r3, [r3, #0]
 8006238:	2b01      	cmp	r3, #1
 800623a:	d00a      	beq.n	8006252 <aci_gatt_add_service+0x66>
 800623c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006240:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8006244:	781b      	ldrb	r3, [r3, #0]
 8006246:	2b02      	cmp	r3, #2
 8006248:	d101      	bne.n	800624e <aci_gatt_add_service+0x62>
 800624a:	2311      	movs	r3, #17
 800624c:	e002      	b.n	8006254 <aci_gatt_add_service+0x68>
 800624e:	2301      	movs	r3, #1
 8006250:	e000      	b.n	8006254 <aci_gatt_add_service+0x68>
 8006252:	2303      	movs	r3, #3
 8006254:	f107 0210 	add.w	r2, r7, #16
 8006258:	4413      	add	r3, r2
 800625a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800625e:	f107 030c 	add.w	r3, r7, #12
 8006262:	2203      	movs	r2, #3
 8006264:	2100      	movs	r1, #0
 8006266:	4618      	mov	r0, r3
 8006268:	f000 fc38 	bl	8006adc <Osal_MemSet>
 800626c:	2300      	movs	r3, #0
 800626e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006272:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006276:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800627a:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 800627e:	7812      	ldrb	r2, [r2, #0]
 8006280:	701a      	strb	r2, [r3, #0]
 8006282:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006286:	3301      	adds	r3, #1
 8006288:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800628c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006290:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8006294:	781b      	ldrb	r3, [r3, #0]
 8006296:	2b01      	cmp	r3, #1
 8006298:	d002      	beq.n	80062a0 <aci_gatt_add_service+0xb4>
 800629a:	2b02      	cmp	r3, #2
 800629c:	d004      	beq.n	80062a8 <aci_gatt_add_service+0xbc>
 800629e:	e007      	b.n	80062b0 <aci_gatt_add_service+0xc4>
 80062a0:	2302      	movs	r3, #2
 80062a2:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 80062a6:	e005      	b.n	80062b4 <aci_gatt_add_service+0xc8>
 80062a8:	2310      	movs	r3, #16
 80062aa:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 80062ae:	e001      	b.n	80062b4 <aci_gatt_add_service+0xc8>
 80062b0:	2397      	movs	r3, #151	; 0x97
 80062b2:	e06c      	b.n	800638e <aci_gatt_add_service+0x1a2>
 80062b4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80062b8:	1c58      	adds	r0, r3, #1
 80062ba:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 80062be:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80062c2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80062c6:	6819      	ldr	r1, [r3, #0]
 80062c8:	f000 fbf8 	bl	8006abc <Osal_MemCpy>
 80062cc:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 80062d0:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80062d4:	4413      	add	r3, r2
 80062d6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80062da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062de:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80062e2:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 80062e6:	7812      	ldrb	r2, [r2, #0]
 80062e8:	701a      	strb	r2, [r3, #0]
 80062ea:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80062ee:	3301      	adds	r3, #1
 80062f0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80062f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062f8:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80062fc:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 8006300:	7812      	ldrb	r2, [r2, #0]
 8006302:	705a      	strb	r2, [r3, #1]
 8006304:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006308:	3301      	adds	r3, #1
 800630a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800630e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006312:	2218      	movs	r2, #24
 8006314:	2100      	movs	r1, #0
 8006316:	4618      	mov	r0, r3
 8006318:	f000 fbe0 	bl	8006adc <Osal_MemSet>
 800631c:	233f      	movs	r3, #63	; 0x3f
 800631e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
 8006322:	f44f 7381 	mov.w	r3, #258	; 0x102
 8006326:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
 800632a:	f107 0310 	add.w	r3, r7, #16
 800632e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006332:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006336:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800633a:	f107 030c 	add.w	r3, r7, #12
 800633e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006342:	2303      	movs	r3, #3
 8006344:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006348:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800634c:	2100      	movs	r1, #0
 800634e:	4618      	mov	r0, r3
 8006350:	f000 fe4e 	bl	8006ff0 <hci_send_req>
 8006354:	4603      	mov	r3, r0
 8006356:	2b00      	cmp	r3, #0
 8006358:	da01      	bge.n	800635e <aci_gatt_add_service+0x172>
 800635a:	23ff      	movs	r3, #255	; 0xff
 800635c:	e017      	b.n	800638e <aci_gatt_add_service+0x1a2>
 800635e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006362:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006366:	781b      	ldrb	r3, [r3, #0]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d005      	beq.n	8006378 <aci_gatt_add_service+0x18c>
 800636c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006370:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006374:	781b      	ldrb	r3, [r3, #0]
 8006376:	e00a      	b.n	800638e <aci_gatt_add_service+0x1a2>
 8006378:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800637c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006380:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8006384:	b29a      	uxth	r2, r3
 8006386:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800638a:	801a      	strh	r2, [r3, #0]
 800638c:	2300      	movs	r3, #0
 800638e:	4618      	mov	r0, r3
 8006390:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8006394:	46bd      	mov	sp, r7
 8006396:	bd90      	pop	{r4, r7, pc}

08006398 <aci_gatt_add_char>:
 8006398:	b590      	push	{r4, r7, lr}
 800639a:	b0d1      	sub	sp, #324	; 0x144
 800639c:	af00      	add	r7, sp, #0
 800639e:	4604      	mov	r4, r0
 80063a0:	4608      	mov	r0, r1
 80063a2:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 80063a6:	f5a1 719c 	sub.w	r1, r1, #312	; 0x138
 80063aa:	600a      	str	r2, [r1, #0]
 80063ac:	4619      	mov	r1, r3
 80063ae:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80063b2:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 80063b6:	4622      	mov	r2, r4
 80063b8:	801a      	strh	r2, [r3, #0]
 80063ba:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80063be:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 80063c2:	4602      	mov	r2, r0
 80063c4:	701a      	strb	r2, [r3, #0]
 80063c6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80063ca:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 80063ce:	460a      	mov	r2, r1
 80063d0:	801a      	strh	r2, [r3, #0]
 80063d2:	f107 0318 	add.w	r3, r7, #24
 80063d6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 80063da:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80063de:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 80063e2:	781b      	ldrb	r3, [r3, #0]
 80063e4:	2b01      	cmp	r3, #1
 80063e6:	d00a      	beq.n	80063fe <aci_gatt_add_char+0x66>
 80063e8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80063ec:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 80063f0:	781b      	ldrb	r3, [r3, #0]
 80063f2:	2b02      	cmp	r3, #2
 80063f4:	d101      	bne.n	80063fa <aci_gatt_add_char+0x62>
 80063f6:	2313      	movs	r3, #19
 80063f8:	e002      	b.n	8006400 <aci_gatt_add_char+0x68>
 80063fa:	2303      	movs	r3, #3
 80063fc:	e000      	b.n	8006400 <aci_gatt_add_char+0x68>
 80063fe:	2305      	movs	r3, #5
 8006400:	f107 0218 	add.w	r2, r7, #24
 8006404:	4413      	add	r3, r2
 8006406:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 800640a:	f107 0314 	add.w	r3, r7, #20
 800640e:	2203      	movs	r2, #3
 8006410:	2100      	movs	r1, #0
 8006412:	4618      	mov	r0, r3
 8006414:	f000 fb62 	bl	8006adc <Osal_MemSet>
 8006418:	2300      	movs	r3, #0
 800641a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 800641e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8006422:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8006426:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 800642a:	8812      	ldrh	r2, [r2, #0]
 800642c:	801a      	strh	r2, [r3, #0]
 800642e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006432:	3302      	adds	r3, #2
 8006434:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8006438:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800643c:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8006440:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 8006444:	7812      	ldrb	r2, [r2, #0]
 8006446:	709a      	strb	r2, [r3, #2]
 8006448:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800644c:	3301      	adds	r3, #1
 800644e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8006452:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8006456:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 800645a:	781b      	ldrb	r3, [r3, #0]
 800645c:	2b01      	cmp	r3, #1
 800645e:	d002      	beq.n	8006466 <aci_gatt_add_char+0xce>
 8006460:	2b02      	cmp	r3, #2
 8006462:	d004      	beq.n	800646e <aci_gatt_add_char+0xd6>
 8006464:	e007      	b.n	8006476 <aci_gatt_add_char+0xde>
 8006466:	2302      	movs	r3, #2
 8006468:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 800646c:	e005      	b.n	800647a <aci_gatt_add_char+0xe2>
 800646e:	2310      	movs	r3, #16
 8006470:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 8006474:	e001      	b.n	800647a <aci_gatt_add_char+0xe2>
 8006476:	2397      	movs	r3, #151	; 0x97
 8006478:	e091      	b.n	800659e <aci_gatt_add_char+0x206>
 800647a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800647e:	1cd8      	adds	r0, r3, #3
 8006480:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 8006484:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8006488:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800648c:	6819      	ldr	r1, [r3, #0]
 800648e:	f000 fb15 	bl	8006abc <Osal_MemCpy>
 8006492:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8006496:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 800649a:	4413      	add	r3, r2
 800649c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 80064a0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80064a4:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 80064a8:	f5a2 729d 	sub.w	r2, r2, #314	; 0x13a
 80064ac:	8812      	ldrh	r2, [r2, #0]
 80064ae:	801a      	strh	r2, [r3, #0]
 80064b0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80064b4:	3302      	adds	r3, #2
 80064b6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 80064ba:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80064be:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 80064c2:	709a      	strb	r2, [r3, #2]
 80064c4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80064c8:	3301      	adds	r3, #1
 80064ca:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 80064ce:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80064d2:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 80064d6:	70da      	strb	r2, [r3, #3]
 80064d8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80064dc:	3301      	adds	r3, #1
 80064de:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 80064e2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80064e6:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 80064ea:	711a      	strb	r2, [r3, #4]
 80064ec:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80064f0:	3301      	adds	r3, #1
 80064f2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 80064f6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80064fa:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 80064fe:	715a      	strb	r2, [r3, #5]
 8006500:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006504:	3301      	adds	r3, #1
 8006506:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 800650a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800650e:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 8006512:	719a      	strb	r2, [r3, #6]
 8006514:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006518:	3301      	adds	r3, #1
 800651a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 800651e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006522:	2218      	movs	r2, #24
 8006524:	2100      	movs	r1, #0
 8006526:	4618      	mov	r0, r3
 8006528:	f000 fad8 	bl	8006adc <Osal_MemSet>
 800652c:	233f      	movs	r3, #63	; 0x3f
 800652e:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
 8006532:	f44f 7382 	mov.w	r3, #260	; 0x104
 8006536:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
 800653a:	f107 0318 	add.w	r3, r7, #24
 800653e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006542:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006546:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800654a:	f107 0314 	add.w	r3, r7, #20
 800654e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006552:	2303      	movs	r3, #3
 8006554:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8006558:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800655c:	2100      	movs	r1, #0
 800655e:	4618      	mov	r0, r3
 8006560:	f000 fd46 	bl	8006ff0 <hci_send_req>
 8006564:	4603      	mov	r3, r0
 8006566:	2b00      	cmp	r3, #0
 8006568:	da01      	bge.n	800656e <aci_gatt_add_char+0x1d6>
 800656a:	23ff      	movs	r3, #255	; 0xff
 800656c:	e017      	b.n	800659e <aci_gatt_add_char+0x206>
 800656e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8006572:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006576:	781b      	ldrb	r3, [r3, #0]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d005      	beq.n	8006588 <aci_gatt_add_char+0x1f0>
 800657c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8006580:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006584:	781b      	ldrb	r3, [r3, #0]
 8006586:	e00a      	b.n	800659e <aci_gatt_add_char+0x206>
 8006588:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800658c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006590:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8006594:	b29a      	uxth	r2, r3
 8006596:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800659a:	801a      	strh	r2, [r3, #0]
 800659c:	2300      	movs	r3, #0
 800659e:	4618      	mov	r0, r3
 80065a0:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 80065a4:	46bd      	mov	sp, r7
 80065a6:	bd90      	pop	{r4, r7, pc}

080065a8 <aci_gatt_update_char_value>:
 80065a8:	b5b0      	push	{r4, r5, r7, lr}
 80065aa:	b0cc      	sub	sp, #304	; 0x130
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	4605      	mov	r5, r0
 80065b0:	460c      	mov	r4, r1
 80065b2:	4610      	mov	r0, r2
 80065b4:	4619      	mov	r1, r3
 80065b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065ba:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80065be:	462a      	mov	r2, r5
 80065c0:	801a      	strh	r2, [r3, #0]
 80065c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065c6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80065ca:	4622      	mov	r2, r4
 80065cc:	801a      	strh	r2, [r3, #0]
 80065ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065d2:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 80065d6:	4602      	mov	r2, r0
 80065d8:	701a      	strb	r2, [r3, #0]
 80065da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065de:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 80065e2:	460a      	mov	r2, r1
 80065e4:	701a      	strb	r2, [r3, #0]
 80065e6:	f107 0310 	add.w	r3, r7, #16
 80065ea:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80065ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065f2:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80065f6:	2200      	movs	r2, #0
 80065f8:	701a      	strb	r2, [r3, #0]
 80065fa:	2300      	movs	r3, #0
 80065fc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006600:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006604:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006608:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800660c:	8812      	ldrh	r2, [r2, #0]
 800660e:	801a      	strh	r2, [r3, #0]
 8006610:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006614:	3302      	adds	r3, #2
 8006616:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800661a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800661e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006622:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8006626:	8812      	ldrh	r2, [r2, #0]
 8006628:	805a      	strh	r2, [r3, #2]
 800662a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800662e:	3302      	adds	r3, #2
 8006630:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006634:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006638:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800663c:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 8006640:	7812      	ldrb	r2, [r2, #0]
 8006642:	711a      	strb	r2, [r3, #4]
 8006644:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006648:	3301      	adds	r3, #1
 800664a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800664e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006652:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006656:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 800665a:	7812      	ldrb	r2, [r2, #0]
 800665c:	715a      	strb	r2, [r3, #5]
 800665e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006662:	3301      	adds	r3, #1
 8006664:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006668:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800666c:	1d98      	adds	r0, r3, #6
 800666e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006672:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8006676:	781b      	ldrb	r3, [r3, #0]
 8006678:	461a      	mov	r2, r3
 800667a:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800667e:	f000 fa1d 	bl	8006abc <Osal_MemCpy>
 8006682:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006686:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 800668a:	781b      	ldrb	r3, [r3, #0]
 800668c:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8006690:	4413      	add	r3, r2
 8006692:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006696:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800669a:	2218      	movs	r2, #24
 800669c:	2100      	movs	r1, #0
 800669e:	4618      	mov	r0, r3
 80066a0:	f000 fa1c 	bl	8006adc <Osal_MemSet>
 80066a4:	233f      	movs	r3, #63	; 0x3f
 80066a6:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
 80066aa:	f44f 7383 	mov.w	r3, #262	; 0x106
 80066ae:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
 80066b2:	f107 0310 	add.w	r3, r7, #16
 80066b6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80066ba:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80066be:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80066c2:	f107 030f 	add.w	r3, r7, #15
 80066c6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80066ca:	2301      	movs	r3, #1
 80066cc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80066d0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80066d4:	2100      	movs	r1, #0
 80066d6:	4618      	mov	r0, r3
 80066d8:	f000 fc8a 	bl	8006ff0 <hci_send_req>
 80066dc:	4603      	mov	r3, r0
 80066de:	2b00      	cmp	r3, #0
 80066e0:	da01      	bge.n	80066e6 <aci_gatt_update_char_value+0x13e>
 80066e2:	23ff      	movs	r3, #255	; 0xff
 80066e4:	e004      	b.n	80066f0 <aci_gatt_update_char_value+0x148>
 80066e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066ea:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80066ee:	781b      	ldrb	r3, [r3, #0]
 80066f0:	4618      	mov	r0, r3
 80066f2:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bdb0      	pop	{r4, r5, r7, pc}

080066fa <aci_hal_write_config_data>:
 80066fa:	b580      	push	{r7, lr}
 80066fc:	b0cc      	sub	sp, #304	; 0x130
 80066fe:	af00      	add	r7, sp, #0
 8006700:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006704:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006708:	601a      	str	r2, [r3, #0]
 800670a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800670e:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8006712:	4602      	mov	r2, r0
 8006714:	701a      	strb	r2, [r3, #0]
 8006716:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800671a:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800671e:	460a      	mov	r2, r1
 8006720:	701a      	strb	r2, [r3, #0]
 8006722:	f107 0310 	add.w	r3, r7, #16
 8006726:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800672a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800672e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8006732:	2200      	movs	r2, #0
 8006734:	701a      	strb	r2, [r3, #0]
 8006736:	2300      	movs	r3, #0
 8006738:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800673c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006740:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006744:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8006748:	7812      	ldrb	r2, [r2, #0]
 800674a:	701a      	strb	r2, [r3, #0]
 800674c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006750:	3301      	adds	r3, #1
 8006752:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006756:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800675a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800675e:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8006762:	7812      	ldrb	r2, [r2, #0]
 8006764:	705a      	strb	r2, [r3, #1]
 8006766:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800676a:	3301      	adds	r3, #1
 800676c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006770:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006774:	1c98      	adds	r0, r3, #2
 8006776:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800677a:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800677e:	781a      	ldrb	r2, [r3, #0]
 8006780:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006784:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006788:	6819      	ldr	r1, [r3, #0]
 800678a:	f000 f997 	bl	8006abc <Osal_MemCpy>
 800678e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006792:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8006796:	781b      	ldrb	r3, [r3, #0]
 8006798:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800679c:	4413      	add	r3, r2
 800679e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80067a2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80067a6:	2218      	movs	r2, #24
 80067a8:	2100      	movs	r1, #0
 80067aa:	4618      	mov	r0, r3
 80067ac:	f000 f996 	bl	8006adc <Osal_MemSet>
 80067b0:	233f      	movs	r3, #63	; 0x3f
 80067b2:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
 80067b6:	230c      	movs	r3, #12
 80067b8:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
 80067bc:	f107 0310 	add.w	r3, r7, #16
 80067c0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80067c4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80067c8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80067cc:	f107 030f 	add.w	r3, r7, #15
 80067d0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80067d4:	2301      	movs	r3, #1
 80067d6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80067da:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80067de:	2100      	movs	r1, #0
 80067e0:	4618      	mov	r0, r3
 80067e2:	f000 fc05 	bl	8006ff0 <hci_send_req>
 80067e6:	4603      	mov	r3, r0
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	da01      	bge.n	80067f0 <aci_hal_write_config_data+0xf6>
 80067ec:	23ff      	movs	r3, #255	; 0xff
 80067ee:	e004      	b.n	80067fa <aci_hal_write_config_data+0x100>
 80067f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067f4:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80067f8:	781b      	ldrb	r3, [r3, #0]
 80067fa:	4618      	mov	r0, r3
 80067fc:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006800:	46bd      	mov	sp, r7
 8006802:	bd80      	pop	{r7, pc}

08006804 <aci_hal_set_tx_power_level>:
 8006804:	b580      	push	{r7, lr}
 8006806:	b0cc      	sub	sp, #304	; 0x130
 8006808:	af00      	add	r7, sp, #0
 800680a:	4602      	mov	r2, r0
 800680c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006810:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8006814:	701a      	strb	r2, [r3, #0]
 8006816:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800681a:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800681e:	460a      	mov	r2, r1
 8006820:	701a      	strb	r2, [r3, #0]
 8006822:	f107 0310 	add.w	r3, r7, #16
 8006826:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800682a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800682e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8006832:	2200      	movs	r2, #0
 8006834:	701a      	strb	r2, [r3, #0]
 8006836:	2300      	movs	r3, #0
 8006838:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800683c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006840:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006844:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8006848:	7812      	ldrb	r2, [r2, #0]
 800684a:	701a      	strb	r2, [r3, #0]
 800684c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006850:	3301      	adds	r3, #1
 8006852:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006856:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800685a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800685e:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8006862:	7812      	ldrb	r2, [r2, #0]
 8006864:	705a      	strb	r2, [r3, #1]
 8006866:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800686a:	3301      	adds	r3, #1
 800686c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006870:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006874:	2218      	movs	r2, #24
 8006876:	2100      	movs	r1, #0
 8006878:	4618      	mov	r0, r3
 800687a:	f000 f92f 	bl	8006adc <Osal_MemSet>
 800687e:	233f      	movs	r3, #63	; 0x3f
 8006880:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
 8006884:	230f      	movs	r3, #15
 8006886:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
 800688a:	f107 0310 	add.w	r3, r7, #16
 800688e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006892:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006896:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800689a:	f107 030f 	add.w	r3, r7, #15
 800689e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80068a2:	2301      	movs	r3, #1
 80068a4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80068a8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80068ac:	2100      	movs	r1, #0
 80068ae:	4618      	mov	r0, r3
 80068b0:	f000 fb9e 	bl	8006ff0 <hci_send_req>
 80068b4:	4603      	mov	r3, r0
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	da01      	bge.n	80068be <aci_hal_set_tx_power_level+0xba>
 80068ba:	23ff      	movs	r3, #255	; 0xff
 80068bc:	e004      	b.n	80068c8 <aci_hal_set_tx_power_level+0xc4>
 80068be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068c2:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80068c6:	781b      	ldrb	r3, [r3, #0]
 80068c8:	4618      	mov	r0, r3
 80068ca:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80068ce:	46bd      	mov	sp, r7
 80068d0:	bd80      	pop	{r7, pc}

080068d2 <aci_hal_set_radio_activity_mask>:
 80068d2:	b580      	push	{r7, lr}
 80068d4:	b0cc      	sub	sp, #304	; 0x130
 80068d6:	af00      	add	r7, sp, #0
 80068d8:	4602      	mov	r2, r0
 80068da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068de:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80068e2:	801a      	strh	r2, [r3, #0]
 80068e4:	f107 0310 	add.w	r3, r7, #16
 80068e8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80068ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068f0:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80068f4:	2200      	movs	r2, #0
 80068f6:	701a      	strb	r2, [r3, #0]
 80068f8:	2300      	movs	r3, #0
 80068fa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80068fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006902:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006906:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800690a:	8812      	ldrh	r2, [r2, #0]
 800690c:	801a      	strh	r2, [r3, #0]
 800690e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006912:	3302      	adds	r3, #2
 8006914:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006918:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800691c:	2218      	movs	r2, #24
 800691e:	2100      	movs	r1, #0
 8006920:	4618      	mov	r0, r3
 8006922:	f000 f8db 	bl	8006adc <Osal_MemSet>
 8006926:	233f      	movs	r3, #63	; 0x3f
 8006928:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
 800692c:	2318      	movs	r3, #24
 800692e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
 8006932:	f107 0310 	add.w	r3, r7, #16
 8006936:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800693a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800693e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006942:	f107 030f 	add.w	r3, r7, #15
 8006946:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800694a:	2301      	movs	r3, #1
 800694c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006950:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006954:	2100      	movs	r1, #0
 8006956:	4618      	mov	r0, r3
 8006958:	f000 fb4a 	bl	8006ff0 <hci_send_req>
 800695c:	4603      	mov	r3, r0
 800695e:	2b00      	cmp	r3, #0
 8006960:	da01      	bge.n	8006966 <aci_hal_set_radio_activity_mask+0x94>
 8006962:	23ff      	movs	r3, #255	; 0xff
 8006964:	e004      	b.n	8006970 <aci_hal_set_radio_activity_mask+0x9e>
 8006966:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800696a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800696e:	781b      	ldrb	r3, [r3, #0]
 8006970:	4618      	mov	r0, r3
 8006972:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006976:	46bd      	mov	sp, r7
 8006978:	bd80      	pop	{r7, pc}

0800697a <hci_reset>:
 800697a:	b580      	push	{r7, lr}
 800697c:	b088      	sub	sp, #32
 800697e:	af00      	add	r7, sp, #0
 8006980:	2300      	movs	r3, #0
 8006982:	71fb      	strb	r3, [r7, #7]
 8006984:	f107 0308 	add.w	r3, r7, #8
 8006988:	2218      	movs	r2, #24
 800698a:	2100      	movs	r1, #0
 800698c:	4618      	mov	r0, r3
 800698e:	f000 f8a5 	bl	8006adc <Osal_MemSet>
 8006992:	2303      	movs	r3, #3
 8006994:	813b      	strh	r3, [r7, #8]
 8006996:	2303      	movs	r3, #3
 8006998:	817b      	strh	r3, [r7, #10]
 800699a:	1dfb      	adds	r3, r7, #7
 800699c:	61bb      	str	r3, [r7, #24]
 800699e:	2301      	movs	r3, #1
 80069a0:	61fb      	str	r3, [r7, #28]
 80069a2:	f107 0308 	add.w	r3, r7, #8
 80069a6:	2100      	movs	r1, #0
 80069a8:	4618      	mov	r0, r3
 80069aa:	f000 fb21 	bl	8006ff0 <hci_send_req>
 80069ae:	4603      	mov	r3, r0
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	da01      	bge.n	80069b8 <hci_reset+0x3e>
 80069b4:	23ff      	movs	r3, #255	; 0xff
 80069b6:	e000      	b.n	80069ba <hci_reset+0x40>
 80069b8:	79fb      	ldrb	r3, [r7, #7]
 80069ba:	4618      	mov	r0, r3
 80069bc:	3720      	adds	r7, #32
 80069be:	46bd      	mov	sp, r7
 80069c0:	bd80      	pop	{r7, pc}

080069c2 <hci_le_set_default_phy>:
 80069c2:	b590      	push	{r4, r7, lr}
 80069c4:	b0cd      	sub	sp, #308	; 0x134
 80069c6:	af00      	add	r7, sp, #0
 80069c8:	4604      	mov	r4, r0
 80069ca:	4608      	mov	r0, r1
 80069cc:	4611      	mov	r1, r2
 80069ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069d2:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80069d6:	4622      	mov	r2, r4
 80069d8:	701a      	strb	r2, [r3, #0]
 80069da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069de:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80069e2:	4602      	mov	r2, r0
 80069e4:	701a      	strb	r2, [r3, #0]
 80069e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069ea:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 80069ee:	460a      	mov	r2, r1
 80069f0:	701a      	strb	r2, [r3, #0]
 80069f2:	f107 0310 	add.w	r3, r7, #16
 80069f6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80069fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069fe:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8006a02:	2200      	movs	r2, #0
 8006a04:	701a      	strb	r2, [r3, #0]
 8006a06:	2300      	movs	r3, #0
 8006a08:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006a0c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a10:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006a14:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8006a18:	7812      	ldrb	r2, [r2, #0]
 8006a1a:	701a      	strb	r2, [r3, #0]
 8006a1c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006a20:	3301      	adds	r3, #1
 8006a22:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006a26:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a2a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006a2e:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8006a32:	7812      	ldrb	r2, [r2, #0]
 8006a34:	705a      	strb	r2, [r3, #1]
 8006a36:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006a3a:	3301      	adds	r3, #1
 8006a3c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006a40:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a44:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006a48:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8006a4c:	7812      	ldrb	r2, [r2, #0]
 8006a4e:	709a      	strb	r2, [r3, #2]
 8006a50:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006a54:	3301      	adds	r3, #1
 8006a56:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006a5a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006a5e:	2218      	movs	r2, #24
 8006a60:	2100      	movs	r1, #0
 8006a62:	4618      	mov	r0, r3
 8006a64:	f000 f83a 	bl	8006adc <Osal_MemSet>
 8006a68:	2308      	movs	r3, #8
 8006a6a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
 8006a6e:	2331      	movs	r3, #49	; 0x31
 8006a70:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
 8006a74:	f107 0310 	add.w	r3, r7, #16
 8006a78:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006a7c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006a80:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006a84:	f107 030f 	add.w	r3, r7, #15
 8006a88:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006a8c:	2301      	movs	r3, #1
 8006a8e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006a92:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006a96:	2100      	movs	r1, #0
 8006a98:	4618      	mov	r0, r3
 8006a9a:	f000 faa9 	bl	8006ff0 <hci_send_req>
 8006a9e:	4603      	mov	r3, r0
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	da01      	bge.n	8006aa8 <hci_le_set_default_phy+0xe6>
 8006aa4:	23ff      	movs	r3, #255	; 0xff
 8006aa6:	e004      	b.n	8006ab2 <hci_le_set_default_phy+0xf0>
 8006aa8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006aac:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8006ab0:	781b      	ldrb	r3, [r3, #0]
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	bd90      	pop	{r4, r7, pc}

08006abc <Osal_MemCpy>:
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b084      	sub	sp, #16
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	60f8      	str	r0, [r7, #12]
 8006ac4:	60b9      	str	r1, [r7, #8]
 8006ac6:	607a      	str	r2, [r7, #4]
 8006ac8:	687a      	ldr	r2, [r7, #4]
 8006aca:	68b9      	ldr	r1, [r7, #8]
 8006acc:	68f8      	ldr	r0, [r7, #12]
 8006ace:	f002 f8db 	bl	8008c88 <memcpy>
 8006ad2:	4603      	mov	r3, r0
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	3710      	adds	r7, #16
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	bd80      	pop	{r7, pc}

08006adc <Osal_MemSet>:
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b084      	sub	sp, #16
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	60f8      	str	r0, [r7, #12]
 8006ae4:	60b9      	str	r1, [r7, #8]
 8006ae6:	607a      	str	r2, [r7, #4]
 8006ae8:	687a      	ldr	r2, [r7, #4]
 8006aea:	68b9      	ldr	r1, [r7, #8]
 8006aec:	68f8      	ldr	r0, [r7, #12]
 8006aee:	f002 f8d9 	bl	8008ca4 <memset>
 8006af2:	4603      	mov	r3, r0
 8006af4:	4618      	mov	r0, r3
 8006af6:	3710      	adds	r7, #16
 8006af8:	46bd      	mov	sp, r7
 8006afa:	bd80      	pop	{r7, pc}

08006afc <BAS_Init>:
 8006afc:	b480      	push	{r7}
 8006afe:	af00      	add	r7, sp, #0
 8006b00:	bf00      	nop
 8006b02:	46bd      	mov	sp, r7
 8006b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b08:	4770      	bx	lr

08006b0a <BLS_Init>:
 8006b0a:	b480      	push	{r7}
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	bf00      	nop
 8006b10:	46bd      	mov	sp, r7
 8006b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b16:	4770      	bx	lr

08006b18 <CRS_STM_Init>:
 8006b18:	b480      	push	{r7}
 8006b1a:	af00      	add	r7, sp, #0
 8006b1c:	bf00      	nop
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b24:	4770      	bx	lr

08006b26 <DIS_Init>:
 8006b26:	b480      	push	{r7}
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	bf00      	nop
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b32:	4770      	bx	lr

08006b34 <EDS_STM_Init>:
 8006b34:	b480      	push	{r7}
 8006b36:	af00      	add	r7, sp, #0
 8006b38:	bf00      	nop
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b40:	4770      	bx	lr

08006b42 <HIDS_Init>:
 8006b42:	b480      	push	{r7}
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	bf00      	nop
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4e:	4770      	bx	lr

08006b50 <HRS_Init>:
 8006b50:	b480      	push	{r7}
 8006b52:	af00      	add	r7, sp, #0
 8006b54:	bf00      	nop
 8006b56:	46bd      	mov	sp, r7
 8006b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5c:	4770      	bx	lr

08006b5e <HTS_Init>:
 8006b5e:	b480      	push	{r7}
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	bf00      	nop
 8006b64:	46bd      	mov	sp, r7
 8006b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6a:	4770      	bx	lr

08006b6c <IAS_Init>:
 8006b6c:	b480      	push	{r7}
 8006b6e:	af00      	add	r7, sp, #0
 8006b70:	bf00      	nop
 8006b72:	46bd      	mov	sp, r7
 8006b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b78:	4770      	bx	lr

08006b7a <LLS_Init>:
 8006b7a:	b480      	push	{r7}
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	bf00      	nop
 8006b80:	46bd      	mov	sp, r7
 8006b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b86:	4770      	bx	lr

08006b88 <TPS_Init>:
 8006b88:	b480      	push	{r7}
 8006b8a:	af00      	add	r7, sp, #0
 8006b8c:	bf00      	nop
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b94:	4770      	bx	lr

08006b96 <MOTENV_STM_Init>:
 8006b96:	b480      	push	{r7}
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	bf00      	nop
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba2:	4770      	bx	lr

08006ba4 <P2PS_STM_Init>:
 8006ba4:	b480      	push	{r7}
 8006ba6:	af00      	add	r7, sp, #0
 8006ba8:	bf00      	nop
 8006baa:	46bd      	mov	sp, r7
 8006bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb0:	4770      	bx	lr

08006bb2 <ZDD_STM_Init>:
 8006bb2:	b480      	push	{r7}
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	bf00      	nop
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bbe:	4770      	bx	lr

08006bc0 <OTAS_STM_Init>:
 8006bc0:	b480      	push	{r7}
 8006bc2:	af00      	add	r7, sp, #0
 8006bc4:	bf00      	nop
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bcc:	4770      	bx	lr

08006bce <MESH_Init>:
 8006bce:	b480      	push	{r7}
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	bf00      	nop
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bda:	4770      	bx	lr

08006bdc <BVOPUS_STM_Init>:
 8006bdc:	b480      	push	{r7}
 8006bde:	af00      	add	r7, sp, #0
 8006be0:	bf00      	nop
 8006be2:	46bd      	mov	sp, r7
 8006be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be8:	4770      	bx	lr
	...

08006bec <SVCCTL_Init>:
 8006bec:	b580      	push	{r7, lr}
 8006bee:	af00      	add	r7, sp, #0
 8006bf0:	4b04      	ldr	r3, [pc, #16]	; (8006c04 <SVCCTL_Init+0x18>)
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	771a      	strb	r2, [r3, #28]
 8006bf6:	4b04      	ldr	r3, [pc, #16]	; (8006c08 <SVCCTL_Init+0x1c>)
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	701a      	strb	r2, [r3, #0]
 8006bfc:	f000 f806 	bl	8006c0c <SVCCTL_SvcInit>
 8006c00:	bf00      	nop
 8006c02:	bd80      	pop	{r7, pc}
 8006c04:	20000910 	.word	0x20000910
 8006c08:	20000930 	.word	0x20000930

08006c0c <SVCCTL_SvcInit>:
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	af00      	add	r7, sp, #0
 8006c10:	f7ff ff74 	bl	8006afc <BAS_Init>
 8006c14:	f7ff ff79 	bl	8006b0a <BLS_Init>
 8006c18:	f7ff ff7e 	bl	8006b18 <CRS_STM_Init>
 8006c1c:	f7ff ff83 	bl	8006b26 <DIS_Init>
 8006c20:	f7ff ff88 	bl	8006b34 <EDS_STM_Init>
 8006c24:	f7ff ff8d 	bl	8006b42 <HIDS_Init>
 8006c28:	f7ff ff92 	bl	8006b50 <HRS_Init>
 8006c2c:	f7ff ff97 	bl	8006b5e <HTS_Init>
 8006c30:	f7ff ff9c 	bl	8006b6c <IAS_Init>
 8006c34:	f7ff ffa1 	bl	8006b7a <LLS_Init>
 8006c38:	f7ff ffa6 	bl	8006b88 <TPS_Init>
 8006c3c:	f7ff ffab 	bl	8006b96 <MOTENV_STM_Init>
 8006c40:	f7ff ffb0 	bl	8006ba4 <P2PS_STM_Init>
 8006c44:	f7ff ffb5 	bl	8006bb2 <ZDD_STM_Init>
 8006c48:	f7ff ffba 	bl	8006bc0 <OTAS_STM_Init>
 8006c4c:	f7ff ffc6 	bl	8006bdc <BVOPUS_STM_Init>
 8006c50:	f7ff ffbd 	bl	8006bce <MESH_Init>
 8006c54:	f001 faaa 	bl	80081ac <SVCCTL_InitCustomSvc>
 8006c58:	bf00      	nop
 8006c5a:	bd80      	pop	{r7, pc}

08006c5c <SVCCTL_RegisterSvcHandler>:
 8006c5c:	b480      	push	{r7}
 8006c5e:	b083      	sub	sp, #12
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
 8006c64:	4b09      	ldr	r3, [pc, #36]	; (8006c8c <SVCCTL_RegisterSvcHandler+0x30>)
 8006c66:	7f1b      	ldrb	r3, [r3, #28]
 8006c68:	4619      	mov	r1, r3
 8006c6a:	4a08      	ldr	r2, [pc, #32]	; (8006c8c <SVCCTL_RegisterSvcHandler+0x30>)
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8006c72:	4b06      	ldr	r3, [pc, #24]	; (8006c8c <SVCCTL_RegisterSvcHandler+0x30>)
 8006c74:	7f1b      	ldrb	r3, [r3, #28]
 8006c76:	3301      	adds	r3, #1
 8006c78:	b2da      	uxtb	r2, r3
 8006c7a:	4b04      	ldr	r3, [pc, #16]	; (8006c8c <SVCCTL_RegisterSvcHandler+0x30>)
 8006c7c:	771a      	strb	r2, [r3, #28]
 8006c7e:	bf00      	nop
 8006c80:	370c      	adds	r7, #12
 8006c82:	46bd      	mov	sp, r7
 8006c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c88:	4770      	bx	lr
 8006c8a:	bf00      	nop
 8006c8c:	20000910 	.word	0x20000910

08006c90 <SVCCTL_UserEvtRx>:
 8006c90:	b580      	push	{r7, lr}
 8006c92:	b086      	sub	sp, #24
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	3301      	adds	r3, #1
 8006c9c:	613b      	str	r3, [r7, #16]
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	75fb      	strb	r3, [r7, #23]
 8006ca2:	693b      	ldr	r3, [r7, #16]
 8006ca4:	781b      	ldrb	r3, [r3, #0]
 8006ca6:	2bff      	cmp	r3, #255	; 0xff
 8006ca8:	d125      	bne.n	8006cf6 <SVCCTL_UserEvtRx+0x66>
 8006caa:	693b      	ldr	r3, [r7, #16]
 8006cac:	3302      	adds	r3, #2
 8006cae:	60fb      	str	r3, [r7, #12]
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	881b      	ldrh	r3, [r3, #0]
 8006cb4:	b29b      	uxth	r3, r3
 8006cb6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006cba:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006cbe:	d118      	bne.n	8006cf2 <SVCCTL_UserEvtRx+0x62>
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	757b      	strb	r3, [r7, #21]
 8006cc4:	e00d      	b.n	8006ce2 <SVCCTL_UserEvtRx+0x52>
 8006cc6:	7d7b      	ldrb	r3, [r7, #21]
 8006cc8:	4a1a      	ldr	r2, [pc, #104]	; (8006d34 <SVCCTL_UserEvtRx+0xa4>)
 8006cca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006cce:	6878      	ldr	r0, [r7, #4]
 8006cd0:	4798      	blx	r3
 8006cd2:	4603      	mov	r3, r0
 8006cd4:	75fb      	strb	r3, [r7, #23]
 8006cd6:	7dfb      	ldrb	r3, [r7, #23]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d108      	bne.n	8006cee <SVCCTL_UserEvtRx+0x5e>
 8006cdc:	7d7b      	ldrb	r3, [r7, #21]
 8006cde:	3301      	adds	r3, #1
 8006ce0:	757b      	strb	r3, [r7, #21]
 8006ce2:	4b14      	ldr	r3, [pc, #80]	; (8006d34 <SVCCTL_UserEvtRx+0xa4>)
 8006ce4:	7f1b      	ldrb	r3, [r3, #28]
 8006ce6:	7d7a      	ldrb	r2, [r7, #21]
 8006ce8:	429a      	cmp	r2, r3
 8006cea:	d3ec      	bcc.n	8006cc6 <SVCCTL_UserEvtRx+0x36>
 8006cec:	e002      	b.n	8006cf4 <SVCCTL_UserEvtRx+0x64>
 8006cee:	bf00      	nop
 8006cf0:	e000      	b.n	8006cf4 <SVCCTL_UserEvtRx+0x64>
 8006cf2:	bf00      	nop
 8006cf4:	e000      	b.n	8006cf8 <SVCCTL_UserEvtRx+0x68>
 8006cf6:	bf00      	nop
 8006cf8:	7dfb      	ldrb	r3, [r7, #23]
 8006cfa:	2b02      	cmp	r3, #2
 8006cfc:	d00f      	beq.n	8006d1e <SVCCTL_UserEvtRx+0x8e>
 8006cfe:	2b02      	cmp	r3, #2
 8006d00:	dc10      	bgt.n	8006d24 <SVCCTL_UserEvtRx+0x94>
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d002      	beq.n	8006d0c <SVCCTL_UserEvtRx+0x7c>
 8006d06:	2b01      	cmp	r3, #1
 8006d08:	d006      	beq.n	8006d18 <SVCCTL_UserEvtRx+0x88>
 8006d0a:	e00b      	b.n	8006d24 <SVCCTL_UserEvtRx+0x94>
 8006d0c:	6878      	ldr	r0, [r7, #4]
 8006d0e:	f000 ff7b 	bl	8007c08 <SVCCTL_App_Notification>
 8006d12:	4603      	mov	r3, r0
 8006d14:	75bb      	strb	r3, [r7, #22]
 8006d16:	e008      	b.n	8006d2a <SVCCTL_UserEvtRx+0x9a>
 8006d18:	2301      	movs	r3, #1
 8006d1a:	75bb      	strb	r3, [r7, #22]
 8006d1c:	e005      	b.n	8006d2a <SVCCTL_UserEvtRx+0x9a>
 8006d1e:	2300      	movs	r3, #0
 8006d20:	75bb      	strb	r3, [r7, #22]
 8006d22:	e002      	b.n	8006d2a <SVCCTL_UserEvtRx+0x9a>
 8006d24:	2301      	movs	r3, #1
 8006d26:	75bb      	strb	r3, [r7, #22]
 8006d28:	bf00      	nop
 8006d2a:	7dbb      	ldrb	r3, [r7, #22]
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	3718      	adds	r7, #24
 8006d30:	46bd      	mov	sp, r7
 8006d32:	bd80      	pop	{r7, pc}
 8006d34:	20000910 	.word	0x20000910

08006d38 <SHCI_C2_BLE_Init>:
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b088      	sub	sp, #32
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
 8006d40:	f107 030c 	add.w	r3, r7, #12
 8006d44:	61fb      	str	r3, [r7, #28]
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	f103 020c 	add.w	r2, r3, #12
 8006d4c:	69fb      	ldr	r3, [r7, #28]
 8006d4e:	212e      	movs	r1, #46	; 0x2e
 8006d50:	f64f 4066 	movw	r0, #64614	; 0xfc66
 8006d54:	f000 fae2 	bl	800731c <shci_send>
 8006d58:	69fb      	ldr	r3, [r7, #28]
 8006d5a:	330b      	adds	r3, #11
 8006d5c:	78db      	ldrb	r3, [r3, #3]
 8006d5e:	4618      	mov	r0, r3
 8006d60:	3720      	adds	r7, #32
 8006d62:	46bd      	mov	sp, r7
 8006d64:	bd80      	pop	{r7, pc}

08006d66 <SHCI_C2_DEBUG_Init>:
 8006d66:	b580      	push	{r7, lr}
 8006d68:	b088      	sub	sp, #32
 8006d6a:	af00      	add	r7, sp, #0
 8006d6c:	6078      	str	r0, [r7, #4]
 8006d6e:	f107 030c 	add.w	r3, r7, #12
 8006d72:	61fb      	str	r3, [r7, #28]
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	f103 020c 	add.w	r2, r3, #12
 8006d7a:	69fb      	ldr	r3, [r7, #28]
 8006d7c:	210f      	movs	r1, #15
 8006d7e:	f64f 4068 	movw	r0, #64616	; 0xfc68
 8006d82:	f000 facb 	bl	800731c <shci_send>
 8006d86:	69fb      	ldr	r3, [r7, #28]
 8006d88:	330b      	adds	r3, #11
 8006d8a:	78db      	ldrb	r3, [r3, #3]
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	3720      	adds	r7, #32
 8006d90:	46bd      	mov	sp, r7
 8006d92:	bd80      	pop	{r7, pc}

08006d94 <SHCI_C2_Config>:
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b088      	sub	sp, #32
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
 8006d9c:	f107 030c 	add.w	r3, r7, #12
 8006da0:	61fb      	str	r3, [r7, #28]
 8006da2:	69fb      	ldr	r3, [r7, #28]
 8006da4:	687a      	ldr	r2, [r7, #4]
 8006da6:	2110      	movs	r1, #16
 8006da8:	f64f 4075 	movw	r0, #64629	; 0xfc75
 8006dac:	f000 fab6 	bl	800731c <shci_send>
 8006db0:	69fb      	ldr	r3, [r7, #28]
 8006db2:	330b      	adds	r3, #11
 8006db4:	78db      	ldrb	r3, [r3, #3]
 8006db6:	4618      	mov	r0, r3
 8006db8:	3720      	adds	r7, #32
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	bd80      	pop	{r7, pc}
	...

08006dc0 <SHCI_GetWirelessFwInfo>:
 8006dc0:	b480      	push	{r7}
 8006dc2:	b08b      	sub	sp, #44	; 0x2c
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
 8006dc8:	2300      	movs	r3, #0
 8006dca:	613b      	str	r3, [r7, #16]
 8006dcc:	2300      	movs	r3, #0
 8006dce:	60fb      	str	r3, [r7, #12]
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	627b      	str	r3, [r7, #36]	; 0x24
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	623b      	str	r3, [r7, #32]
 8006dd8:	2300      	movs	r3, #0
 8006dda:	61fb      	str	r3, [r7, #28]
 8006ddc:	2300      	movs	r3, #0
 8006dde:	60bb      	str	r3, [r7, #8]
 8006de0:	2300      	movs	r3, #0
 8006de2:	61bb      	str	r3, [r7, #24]
 8006de4:	2300      	movs	r3, #0
 8006de6:	617b      	str	r3, [r7, #20]
 8006de8:	4b4a      	ldr	r3, [pc, #296]	; (8006f14 <SHCI_GetWirelessFwInfo+0x154>)
 8006dea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dec:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8006df0:	613b      	str	r3, [r7, #16]
 8006df2:	693b      	ldr	r3, [r7, #16]
 8006df4:	009b      	lsls	r3, r3, #2
 8006df6:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8006dfa:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	60bb      	str	r3, [r7, #8]
 8006e02:	68bb      	ldr	r3, [r7, #8]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	4a44      	ldr	r2, [pc, #272]	; (8006f18 <SHCI_GetWirelessFwInfo+0x158>)
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	d10f      	bne.n	8006e2c <SHCI_GetWirelessFwInfo+0x6c>
 8006e0c:	68bb      	ldr	r3, [r7, #8]
 8006e0e:	695b      	ldr	r3, [r3, #20]
 8006e10:	627b      	str	r3, [r7, #36]	; 0x24
 8006e12:	68bb      	ldr	r3, [r7, #8]
 8006e14:	699b      	ldr	r3, [r3, #24]
 8006e16:	623b      	str	r3, [r7, #32]
 8006e18:	68bb      	ldr	r3, [r7, #8]
 8006e1a:	69db      	ldr	r3, [r3, #28]
 8006e1c:	61fb      	str	r3, [r7, #28]
 8006e1e:	68bb      	ldr	r3, [r7, #8]
 8006e20:	68db      	ldr	r3, [r3, #12]
 8006e22:	61bb      	str	r3, [r7, #24]
 8006e24:	68bb      	ldr	r3, [r7, #8]
 8006e26:	691b      	ldr	r3, [r3, #16]
 8006e28:	617b      	str	r3, [r7, #20]
 8006e2a:	e01a      	b.n	8006e62 <SHCI_GetWirelessFwInfo+0xa2>
 8006e2c:	693b      	ldr	r3, [r7, #16]
 8006e2e:	009b      	lsls	r3, r3, #2
 8006e30:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8006e34:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8006e38:	60fb      	str	r3, [r7, #12]
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	691b      	ldr	r3, [r3, #16]
 8006e40:	627b      	str	r3, [r7, #36]	; 0x24
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	695b      	ldr	r3, [r3, #20]
 8006e48:	623b      	str	r3, [r7, #32]
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	699b      	ldr	r3, [r3, #24]
 8006e50:	61fb      	str	r3, [r7, #28]
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	685b      	ldr	r3, [r3, #4]
 8006e58:	61bb      	str	r3, [r7, #24]
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	689b      	ldr	r3, [r3, #8]
 8006e60:	617b      	str	r3, [r7, #20]
 8006e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e64:	0e1b      	lsrs	r3, r3, #24
 8006e66:	b2da      	uxtb	r2, r3
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	701a      	strb	r2, [r3, #0]
 8006e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e6e:	0c1b      	lsrs	r3, r3, #16
 8006e70:	b2da      	uxtb	r2, r3
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	705a      	strb	r2, [r3, #1]
 8006e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e78:	0a1b      	lsrs	r3, r3, #8
 8006e7a:	b2da      	uxtb	r2, r3
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	709a      	strb	r2, [r3, #2]
 8006e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e82:	091b      	lsrs	r3, r3, #4
 8006e84:	b2db      	uxtb	r3, r3
 8006e86:	f003 030f 	and.w	r3, r3, #15
 8006e8a:	b2da      	uxtb	r2, r3
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	70da      	strb	r2, [r3, #3]
 8006e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e92:	b2db      	uxtb	r3, r3
 8006e94:	f003 030f 	and.w	r3, r3, #15
 8006e98:	b2da      	uxtb	r2, r3
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	711a      	strb	r2, [r3, #4]
 8006e9e:	6a3b      	ldr	r3, [r7, #32]
 8006ea0:	0e1b      	lsrs	r3, r3, #24
 8006ea2:	b2da      	uxtb	r2, r3
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	715a      	strb	r2, [r3, #5]
 8006ea8:	6a3b      	ldr	r3, [r7, #32]
 8006eaa:	0c1b      	lsrs	r3, r3, #16
 8006eac:	b2da      	uxtb	r2, r3
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	719a      	strb	r2, [r3, #6]
 8006eb2:	6a3b      	ldr	r3, [r7, #32]
 8006eb4:	0a1b      	lsrs	r3, r3, #8
 8006eb6:	b2da      	uxtb	r2, r3
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	71da      	strb	r2, [r3, #7]
 8006ebc:	6a3b      	ldr	r3, [r7, #32]
 8006ebe:	b2da      	uxtb	r2, r3
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	721a      	strb	r2, [r3, #8]
 8006ec4:	69fb      	ldr	r3, [r7, #28]
 8006ec6:	b2da      	uxtb	r2, r3
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	725a      	strb	r2, [r3, #9]
 8006ecc:	69bb      	ldr	r3, [r7, #24]
 8006ece:	0e1b      	lsrs	r3, r3, #24
 8006ed0:	b2da      	uxtb	r2, r3
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	729a      	strb	r2, [r3, #10]
 8006ed6:	69bb      	ldr	r3, [r7, #24]
 8006ed8:	0c1b      	lsrs	r3, r3, #16
 8006eda:	b2da      	uxtb	r2, r3
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	72da      	strb	r2, [r3, #11]
 8006ee0:	69bb      	ldr	r3, [r7, #24]
 8006ee2:	0a1b      	lsrs	r3, r3, #8
 8006ee4:	b2da      	uxtb	r2, r3
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	731a      	strb	r2, [r3, #12]
 8006eea:	697b      	ldr	r3, [r7, #20]
 8006eec:	0e1b      	lsrs	r3, r3, #24
 8006eee:	b2da      	uxtb	r2, r3
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	735a      	strb	r2, [r3, #13]
 8006ef4:	697b      	ldr	r3, [r7, #20]
 8006ef6:	0c1b      	lsrs	r3, r3, #16
 8006ef8:	b2da      	uxtb	r2, r3
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	739a      	strb	r2, [r3, #14]
 8006efe:	697b      	ldr	r3, [r7, #20]
 8006f00:	b2da      	uxtb	r2, r3
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	73da      	strb	r2, [r3, #15]
 8006f06:	2300      	movs	r3, #0
 8006f08:	4618      	mov	r0, r3
 8006f0a:	372c      	adds	r7, #44	; 0x2c
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f12:	4770      	bx	lr
 8006f14:	58004000 	.word	0x58004000
 8006f18:	a94656b9 	.word	0xa94656b9

08006f1c <hci_init>:
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b082      	sub	sp, #8
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
 8006f24:	6039      	str	r1, [r7, #0]
 8006f26:	683b      	ldr	r3, [r7, #0]
 8006f28:	685b      	ldr	r3, [r3, #4]
 8006f2a:	4a08      	ldr	r2, [pc, #32]	; (8006f4c <hci_init+0x30>)
 8006f2c:	6013      	str	r3, [r2, #0]
 8006f2e:	4a08      	ldr	r2, [pc, #32]	; (8006f50 <hci_init+0x34>)
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	61d3      	str	r3, [r2, #28]
 8006f34:	4806      	ldr	r0, [pc, #24]	; (8006f50 <hci_init+0x34>)
 8006f36:	f000 f973 	bl	8007220 <hci_register_io_bus>
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	4618      	mov	r0, r3
 8006f40:	f000 f8d4 	bl	80070ec <TlInit>
 8006f44:	bf00      	nop
 8006f46:	3708      	adds	r7, #8
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	bd80      	pop	{r7, pc}
 8006f4c:	20000b90 	.word	0x20000b90
 8006f50:	20000b68 	.word	0x20000b68

08006f54 <hci_user_evt_proc>:
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b084      	sub	sp, #16
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	4822      	ldr	r0, [pc, #136]	; (8006fe4 <hci_user_evt_proc+0x90>)
 8006f5c:	f000 fd28 	bl	80079b0 <LST_is_empty>
 8006f60:	4603      	mov	r3, r0
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d12b      	bne.n	8006fbe <hci_user_evt_proc+0x6a>
 8006f66:	4b20      	ldr	r3, [pc, #128]	; (8006fe8 <hci_user_evt_proc+0x94>)
 8006f68:	781b      	ldrb	r3, [r3, #0]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d027      	beq.n	8006fbe <hci_user_evt_proc+0x6a>
 8006f6e:	f107 030c 	add.w	r3, r7, #12
 8006f72:	4619      	mov	r1, r3
 8006f74:	481b      	ldr	r0, [pc, #108]	; (8006fe4 <hci_user_evt_proc+0x90>)
 8006f76:	f000 fdaa 	bl	8007ace <LST_remove_head>
 8006f7a:	4b1c      	ldr	r3, [pc, #112]	; (8006fec <hci_user_evt_proc+0x98>)
 8006f7c:	69db      	ldr	r3, [r3, #28]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d00c      	beq.n	8006f9c <hci_user_evt_proc+0x48>
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	60bb      	str	r3, [r7, #8]
 8006f86:	2301      	movs	r3, #1
 8006f88:	713b      	strb	r3, [r7, #4]
 8006f8a:	4b18      	ldr	r3, [pc, #96]	; (8006fec <hci_user_evt_proc+0x98>)
 8006f8c:	69db      	ldr	r3, [r3, #28]
 8006f8e:	1d3a      	adds	r2, r7, #4
 8006f90:	4610      	mov	r0, r2
 8006f92:	4798      	blx	r3
 8006f94:	793a      	ldrb	r2, [r7, #4]
 8006f96:	4b14      	ldr	r3, [pc, #80]	; (8006fe8 <hci_user_evt_proc+0x94>)
 8006f98:	701a      	strb	r2, [r3, #0]
 8006f9a:	e002      	b.n	8006fa2 <hci_user_evt_proc+0x4e>
 8006f9c:	4b12      	ldr	r3, [pc, #72]	; (8006fe8 <hci_user_evt_proc+0x94>)
 8006f9e:	2201      	movs	r2, #1
 8006fa0:	701a      	strb	r2, [r3, #0]
 8006fa2:	4b11      	ldr	r3, [pc, #68]	; (8006fe8 <hci_user_evt_proc+0x94>)
 8006fa4:	781b      	ldrb	r3, [r3, #0]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d004      	beq.n	8006fb4 <hci_user_evt_proc+0x60>
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	4618      	mov	r0, r3
 8006fae:	f000 fc03 	bl	80077b8 <TL_MM_EvtDone>
 8006fb2:	e004      	b.n	8006fbe <hci_user_evt_proc+0x6a>
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	4619      	mov	r1, r3
 8006fb8:	480a      	ldr	r0, [pc, #40]	; (8006fe4 <hci_user_evt_proc+0x90>)
 8006fba:	f000 fd1b 	bl	80079f4 <LST_insert_head>
 8006fbe:	4809      	ldr	r0, [pc, #36]	; (8006fe4 <hci_user_evt_proc+0x90>)
 8006fc0:	f000 fcf6 	bl	80079b0 <LST_is_empty>
 8006fc4:	4603      	mov	r3, r0
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d107      	bne.n	8006fda <hci_user_evt_proc+0x86>
 8006fca:	4b07      	ldr	r3, [pc, #28]	; (8006fe8 <hci_user_evt_proc+0x94>)
 8006fcc:	781b      	ldrb	r3, [r3, #0]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d003      	beq.n	8006fda <hci_user_evt_proc+0x86>
 8006fd2:	4804      	ldr	r0, [pc, #16]	; (8006fe4 <hci_user_evt_proc+0x90>)
 8006fd4:	f001 f830 	bl	8008038 <hci_notify_asynch_evt>
 8006fd8:	bf00      	nop
 8006fda:	bf00      	nop
 8006fdc:	3710      	adds	r7, #16
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	bd80      	pop	{r7, pc}
 8006fe2:	bf00      	nop
 8006fe4:	20000938 	.word	0x20000938
 8006fe8:	20000944 	.word	0x20000944
 8006fec:	20000b68 	.word	0x20000b68

08006ff0 <hci_send_req>:
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b088      	sub	sp, #32
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
 8006ff8:	460b      	mov	r3, r1
 8006ffa:	70fb      	strb	r3, [r7, #3]
 8006ffc:	2000      	movs	r0, #0
 8006ffe:	f000 f8cb 	bl	8007198 <NotifyCmdStatus>
 8007002:	2300      	movs	r3, #0
 8007004:	77fb      	strb	r3, [r7, #31]
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	885b      	ldrh	r3, [r3, #2]
 800700a:	b21b      	sxth	r3, r3
 800700c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007010:	b21a      	sxth	r2, r3
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	881b      	ldrh	r3, [r3, #0]
 8007016:	029b      	lsls	r3, r3, #10
 8007018:	b21b      	sxth	r3, r3
 800701a:	4313      	orrs	r3, r2
 800701c:	b21b      	sxth	r3, r3
 800701e:	83bb      	strh	r3, [r7, #28]
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	68db      	ldr	r3, [r3, #12]
 8007024:	b2d9      	uxtb	r1, r3
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	689a      	ldr	r2, [r3, #8]
 800702a:	8bbb      	ldrh	r3, [r7, #28]
 800702c:	4618      	mov	r0, r3
 800702e:	f000 f88d 	bl	800714c <SendCmd>
 8007032:	e04e      	b.n	80070d2 <hci_send_req+0xe2>
 8007034:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8007038:	f001 f815 	bl	8008066 <hci_cmd_resp_wait>
 800703c:	e043      	b.n	80070c6 <hci_send_req+0xd6>
 800703e:	f107 030c 	add.w	r3, r7, #12
 8007042:	4619      	mov	r1, r3
 8007044:	4828      	ldr	r0, [pc, #160]	; (80070e8 <hci_send_req+0xf8>)
 8007046:	f000 fd42 	bl	8007ace <LST_remove_head>
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	7a5b      	ldrb	r3, [r3, #9]
 800704e:	2b0f      	cmp	r3, #15
 8007050:	d114      	bne.n	800707c <hci_send_req+0x8c>
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	330b      	adds	r3, #11
 8007056:	613b      	str	r3, [r7, #16]
 8007058:	693b      	ldr	r3, [r7, #16]
 800705a:	885b      	ldrh	r3, [r3, #2]
 800705c:	b29b      	uxth	r3, r3
 800705e:	8bba      	ldrh	r2, [r7, #28]
 8007060:	429a      	cmp	r2, r3
 8007062:	d104      	bne.n	800706e <hci_send_req+0x7e>
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	691b      	ldr	r3, [r3, #16]
 8007068:	693a      	ldr	r2, [r7, #16]
 800706a:	7812      	ldrb	r2, [r2, #0]
 800706c:	701a      	strb	r2, [r3, #0]
 800706e:	693b      	ldr	r3, [r7, #16]
 8007070:	785b      	ldrb	r3, [r3, #1]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d027      	beq.n	80070c6 <hci_send_req+0xd6>
 8007076:	2301      	movs	r3, #1
 8007078:	77fb      	strb	r3, [r7, #31]
 800707a:	e024      	b.n	80070c6 <hci_send_req+0xd6>
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	330b      	adds	r3, #11
 8007080:	61bb      	str	r3, [r7, #24]
 8007082:	69bb      	ldr	r3, [r7, #24]
 8007084:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8007088:	b29b      	uxth	r3, r3
 800708a:	8bba      	ldrh	r2, [r7, #28]
 800708c:	429a      	cmp	r2, r3
 800708e:	d114      	bne.n	80070ba <hci_send_req+0xca>
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	7a9b      	ldrb	r3, [r3, #10]
 8007094:	3b03      	subs	r3, #3
 8007096:	75fb      	strb	r3, [r7, #23]
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	695a      	ldr	r2, [r3, #20]
 800709c:	7dfb      	ldrb	r3, [r7, #23]
 800709e:	429a      	cmp	r2, r3
 80070a0:	bfa8      	it	ge
 80070a2:	461a      	movge	r2, r3
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	615a      	str	r2, [r3, #20]
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	6918      	ldr	r0, [r3, #16]
 80070ac:	69bb      	ldr	r3, [r7, #24]
 80070ae:	1cd9      	adds	r1, r3, #3
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	695b      	ldr	r3, [r3, #20]
 80070b4:	461a      	mov	r2, r3
 80070b6:	f001 fde7 	bl	8008c88 <memcpy>
 80070ba:	69bb      	ldr	r3, [r7, #24]
 80070bc:	781b      	ldrb	r3, [r3, #0]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d001      	beq.n	80070c6 <hci_send_req+0xd6>
 80070c2:	2301      	movs	r3, #1
 80070c4:	77fb      	strb	r3, [r7, #31]
 80070c6:	4808      	ldr	r0, [pc, #32]	; (80070e8 <hci_send_req+0xf8>)
 80070c8:	f000 fc72 	bl	80079b0 <LST_is_empty>
 80070cc:	4603      	mov	r3, r0
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d0b5      	beq.n	800703e <hci_send_req+0x4e>
 80070d2:	7ffb      	ldrb	r3, [r7, #31]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d0ad      	beq.n	8007034 <hci_send_req+0x44>
 80070d8:	2001      	movs	r0, #1
 80070da:	f000 f85d 	bl	8007198 <NotifyCmdStatus>
 80070de:	2300      	movs	r3, #0
 80070e0:	4618      	mov	r0, r3
 80070e2:	3720      	adds	r7, #32
 80070e4:	46bd      	mov	sp, r7
 80070e6:	bd80      	pop	{r7, pc}
 80070e8:	20000b88 	.word	0x20000b88

080070ec <TlInit>:
 80070ec:	b580      	push	{r7, lr}
 80070ee:	b086      	sub	sp, #24
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
 80070f4:	480f      	ldr	r0, [pc, #60]	; (8007134 <TlInit+0x48>)
 80070f6:	f000 fc4b 	bl	8007990 <LST_init_head>
 80070fa:	4a0f      	ldr	r2, [pc, #60]	; (8007138 <TlInit+0x4c>)
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	6013      	str	r3, [r2, #0]
 8007100:	480e      	ldr	r0, [pc, #56]	; (800713c <TlInit+0x50>)
 8007102:	f000 fc45 	bl	8007990 <LST_init_head>
 8007106:	4b0e      	ldr	r3, [pc, #56]	; (8007140 <TlInit+0x54>)
 8007108:	2201      	movs	r2, #1
 800710a:	701a      	strb	r2, [r3, #0]
 800710c:	4b0d      	ldr	r3, [pc, #52]	; (8007144 <TlInit+0x58>)
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d00a      	beq.n	800712a <TlInit+0x3e>
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	613b      	str	r3, [r7, #16]
 8007118:	4b0b      	ldr	r3, [pc, #44]	; (8007148 <TlInit+0x5c>)
 800711a:	60bb      	str	r3, [r7, #8]
 800711c:	4b09      	ldr	r3, [pc, #36]	; (8007144 <TlInit+0x58>)
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f107 0208 	add.w	r2, r7, #8
 8007124:	4610      	mov	r0, r2
 8007126:	4798      	blx	r3
 8007128:	bf00      	nop
 800712a:	bf00      	nop
 800712c:	3718      	adds	r7, #24
 800712e:	46bd      	mov	sp, r7
 8007130:	bd80      	pop	{r7, pc}
 8007132:	bf00      	nop
 8007134:	20000b88 	.word	0x20000b88
 8007138:	20000940 	.word	0x20000940
 800713c:	20000938 	.word	0x20000938
 8007140:	20000944 	.word	0x20000944
 8007144:	20000b68 	.word	0x20000b68
 8007148:	080071d9 	.word	0x080071d9

0800714c <SendCmd>:
 800714c:	b580      	push	{r7, lr}
 800714e:	b082      	sub	sp, #8
 8007150:	af00      	add	r7, sp, #0
 8007152:	4603      	mov	r3, r0
 8007154:	603a      	str	r2, [r7, #0]
 8007156:	80fb      	strh	r3, [r7, #6]
 8007158:	460b      	mov	r3, r1
 800715a:	717b      	strb	r3, [r7, #5]
 800715c:	4b0c      	ldr	r3, [pc, #48]	; (8007190 <SendCmd+0x44>)
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	88fa      	ldrh	r2, [r7, #6]
 8007162:	f8a3 2009 	strh.w	r2, [r3, #9]
 8007166:	4b0a      	ldr	r3, [pc, #40]	; (8007190 <SendCmd+0x44>)
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	797a      	ldrb	r2, [r7, #5]
 800716c:	72da      	strb	r2, [r3, #11]
 800716e:	4b08      	ldr	r3, [pc, #32]	; (8007190 <SendCmd+0x44>)
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	330c      	adds	r3, #12
 8007174:	797a      	ldrb	r2, [r7, #5]
 8007176:	6839      	ldr	r1, [r7, #0]
 8007178:	4618      	mov	r0, r3
 800717a:	f001 fd85 	bl	8008c88 <memcpy>
 800717e:	4b05      	ldr	r3, [pc, #20]	; (8007194 <SendCmd+0x48>)
 8007180:	691b      	ldr	r3, [r3, #16]
 8007182:	2100      	movs	r1, #0
 8007184:	2000      	movs	r0, #0
 8007186:	4798      	blx	r3
 8007188:	bf00      	nop
 800718a:	3708      	adds	r7, #8
 800718c:	46bd      	mov	sp, r7
 800718e:	bd80      	pop	{r7, pc}
 8007190:	20000940 	.word	0x20000940
 8007194:	20000b68 	.word	0x20000b68

08007198 <NotifyCmdStatus>:
 8007198:	b580      	push	{r7, lr}
 800719a:	b082      	sub	sp, #8
 800719c:	af00      	add	r7, sp, #0
 800719e:	4603      	mov	r3, r0
 80071a0:	71fb      	strb	r3, [r7, #7]
 80071a2:	79fb      	ldrb	r3, [r7, #7]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d108      	bne.n	80071ba <NotifyCmdStatus+0x22>
 80071a8:	4b0a      	ldr	r3, [pc, #40]	; (80071d4 <NotifyCmdStatus+0x3c>)
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d00d      	beq.n	80071cc <NotifyCmdStatus+0x34>
 80071b0:	4b08      	ldr	r3, [pc, #32]	; (80071d4 <NotifyCmdStatus+0x3c>)
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	2000      	movs	r0, #0
 80071b6:	4798      	blx	r3
 80071b8:	e008      	b.n	80071cc <NotifyCmdStatus+0x34>
 80071ba:	4b06      	ldr	r3, [pc, #24]	; (80071d4 <NotifyCmdStatus+0x3c>)
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d004      	beq.n	80071cc <NotifyCmdStatus+0x34>
 80071c2:	4b04      	ldr	r3, [pc, #16]	; (80071d4 <NotifyCmdStatus+0x3c>)
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	2001      	movs	r0, #1
 80071c8:	4798      	blx	r3
 80071ca:	bf00      	nop
 80071cc:	bf00      	nop
 80071ce:	3708      	adds	r7, #8
 80071d0:	46bd      	mov	sp, r7
 80071d2:	bd80      	pop	{r7, pc}
 80071d4:	20000b90 	.word	0x20000b90

080071d8 <TlEvtReceived>:
 80071d8:	b580      	push	{r7, lr}
 80071da:	b082      	sub	sp, #8
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	7a5b      	ldrb	r3, [r3, #9]
 80071e4:	2b0f      	cmp	r3, #15
 80071e6:	d003      	beq.n	80071f0 <TlEvtReceived+0x18>
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	7a5b      	ldrb	r3, [r3, #9]
 80071ec:	2b0e      	cmp	r3, #14
 80071ee:	d107      	bne.n	8007200 <TlEvtReceived+0x28>
 80071f0:	6879      	ldr	r1, [r7, #4]
 80071f2:	4809      	ldr	r0, [pc, #36]	; (8007218 <TlEvtReceived+0x40>)
 80071f4:	f000 fc24 	bl	8007a40 <LST_insert_tail>
 80071f8:	2000      	movs	r0, #0
 80071fa:	f000 ff29 	bl	8008050 <hci_cmd_resp_release>
 80071fe:	e006      	b.n	800720e <TlEvtReceived+0x36>
 8007200:	6879      	ldr	r1, [r7, #4]
 8007202:	4806      	ldr	r0, [pc, #24]	; (800721c <TlEvtReceived+0x44>)
 8007204:	f000 fc1c 	bl	8007a40 <LST_insert_tail>
 8007208:	4804      	ldr	r0, [pc, #16]	; (800721c <TlEvtReceived+0x44>)
 800720a:	f000 ff15 	bl	8008038 <hci_notify_asynch_evt>
 800720e:	bf00      	nop
 8007210:	3708      	adds	r7, #8
 8007212:	46bd      	mov	sp, r7
 8007214:	bd80      	pop	{r7, pc}
 8007216:	bf00      	nop
 8007218:	20000b88 	.word	0x20000b88
 800721c:	20000938 	.word	0x20000938

08007220 <hci_register_io_bus>:
 8007220:	b480      	push	{r7}
 8007222:	b083      	sub	sp, #12
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	4a05      	ldr	r2, [pc, #20]	; (8007240 <hci_register_io_bus+0x20>)
 800722c:	601a      	str	r2, [r3, #0]
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	4a04      	ldr	r2, [pc, #16]	; (8007244 <hci_register_io_bus+0x24>)
 8007232:	611a      	str	r2, [r3, #16]
 8007234:	bf00      	nop
 8007236:	370c      	adds	r7, #12
 8007238:	46bd      	mov	sp, r7
 800723a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723e:	4770      	bx	lr
 8007240:	08007531 	.word	0x08007531
 8007244:	08007599 	.word	0x08007599

08007248 <shci_init>:
 8007248:	b580      	push	{r7, lr}
 800724a:	b082      	sub	sp, #8
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
 8007250:	6039      	str	r1, [r7, #0]
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	685b      	ldr	r3, [r3, #4]
 8007256:	4a08      	ldr	r2, [pc, #32]	; (8007278 <shci_init+0x30>)
 8007258:	6013      	str	r3, [r2, #0]
 800725a:	4a08      	ldr	r2, [pc, #32]	; (800727c <shci_init+0x34>)
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	61d3      	str	r3, [r2, #28]
 8007260:	4806      	ldr	r0, [pc, #24]	; (800727c <shci_init+0x34>)
 8007262:	f000 f911 	bl	8007488 <shci_register_io_bus>
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	4618      	mov	r0, r3
 800726c:	f000 f894 	bl	8007398 <TlInit>
 8007270:	bf00      	nop
 8007272:	3708      	adds	r7, #8
 8007274:	46bd      	mov	sp, r7
 8007276:	bd80      	pop	{r7, pc}
 8007278:	20000bb4 	.word	0x20000bb4
 800727c:	20000b94 	.word	0x20000b94

08007280 <shci_user_evt_proc>:
 8007280:	b580      	push	{r7, lr}
 8007282:	b084      	sub	sp, #16
 8007284:	af00      	add	r7, sp, #0
 8007286:	4822      	ldr	r0, [pc, #136]	; (8007310 <shci_user_evt_proc+0x90>)
 8007288:	f000 fb92 	bl	80079b0 <LST_is_empty>
 800728c:	4603      	mov	r3, r0
 800728e:	2b00      	cmp	r3, #0
 8007290:	d12b      	bne.n	80072ea <shci_user_evt_proc+0x6a>
 8007292:	4b20      	ldr	r3, [pc, #128]	; (8007314 <shci_user_evt_proc+0x94>)
 8007294:	781b      	ldrb	r3, [r3, #0]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d027      	beq.n	80072ea <shci_user_evt_proc+0x6a>
 800729a:	f107 030c 	add.w	r3, r7, #12
 800729e:	4619      	mov	r1, r3
 80072a0:	481b      	ldr	r0, [pc, #108]	; (8007310 <shci_user_evt_proc+0x90>)
 80072a2:	f000 fc14 	bl	8007ace <LST_remove_head>
 80072a6:	4b1c      	ldr	r3, [pc, #112]	; (8007318 <shci_user_evt_proc+0x98>)
 80072a8:	69db      	ldr	r3, [r3, #28]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d00c      	beq.n	80072c8 <shci_user_evt_proc+0x48>
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	60bb      	str	r3, [r7, #8]
 80072b2:	2301      	movs	r3, #1
 80072b4:	713b      	strb	r3, [r7, #4]
 80072b6:	4b18      	ldr	r3, [pc, #96]	; (8007318 <shci_user_evt_proc+0x98>)
 80072b8:	69db      	ldr	r3, [r3, #28]
 80072ba:	1d3a      	adds	r2, r7, #4
 80072bc:	4610      	mov	r0, r2
 80072be:	4798      	blx	r3
 80072c0:	793a      	ldrb	r2, [r7, #4]
 80072c2:	4b14      	ldr	r3, [pc, #80]	; (8007314 <shci_user_evt_proc+0x94>)
 80072c4:	701a      	strb	r2, [r3, #0]
 80072c6:	e002      	b.n	80072ce <shci_user_evt_proc+0x4e>
 80072c8:	4b12      	ldr	r3, [pc, #72]	; (8007314 <shci_user_evt_proc+0x94>)
 80072ca:	2201      	movs	r2, #1
 80072cc:	701a      	strb	r2, [r3, #0]
 80072ce:	4b11      	ldr	r3, [pc, #68]	; (8007314 <shci_user_evt_proc+0x94>)
 80072d0:	781b      	ldrb	r3, [r3, #0]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d004      	beq.n	80072e0 <shci_user_evt_proc+0x60>
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	4618      	mov	r0, r3
 80072da:	f000 fa6d 	bl	80077b8 <TL_MM_EvtDone>
 80072de:	e004      	b.n	80072ea <shci_user_evt_proc+0x6a>
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	4619      	mov	r1, r3
 80072e4:	480a      	ldr	r0, [pc, #40]	; (8007310 <shci_user_evt_proc+0x90>)
 80072e6:	f000 fb85 	bl	80079f4 <LST_insert_head>
 80072ea:	4809      	ldr	r0, [pc, #36]	; (8007310 <shci_user_evt_proc+0x90>)
 80072ec:	f000 fb60 	bl	80079b0 <LST_is_empty>
 80072f0:	4603      	mov	r3, r0
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d107      	bne.n	8007306 <shci_user_evt_proc+0x86>
 80072f6:	4b07      	ldr	r3, [pc, #28]	; (8007314 <shci_user_evt_proc+0x94>)
 80072f8:	781b      	ldrb	r3, [r3, #0]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d003      	beq.n	8007306 <shci_user_evt_proc+0x86>
 80072fe:	4804      	ldr	r0, [pc, #16]	; (8007310 <shci_user_evt_proc+0x90>)
 8007300:	f7f9 fc66 	bl	8000bd0 <shci_notify_asynch_evt>
 8007304:	bf00      	nop
 8007306:	bf00      	nop
 8007308:	3710      	adds	r7, #16
 800730a:	46bd      	mov	sp, r7
 800730c:	bd80      	pop	{r7, pc}
 800730e:	bf00      	nop
 8007310:	20000948 	.word	0x20000948
 8007314:	20000958 	.word	0x20000958
 8007318:	20000b94 	.word	0x20000b94

0800731c <shci_send>:
 800731c:	b580      	push	{r7, lr}
 800731e:	b084      	sub	sp, #16
 8007320:	af00      	add	r7, sp, #0
 8007322:	60ba      	str	r2, [r7, #8]
 8007324:	607b      	str	r3, [r7, #4]
 8007326:	4603      	mov	r3, r0
 8007328:	81fb      	strh	r3, [r7, #14]
 800732a:	460b      	mov	r3, r1
 800732c:	737b      	strb	r3, [r7, #13]
 800732e:	2000      	movs	r0, #0
 8007330:	f000 f864 	bl	80073fc <Cmd_SetStatus>
 8007334:	4b16      	ldr	r3, [pc, #88]	; (8007390 <shci_send+0x74>)
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	89fa      	ldrh	r2, [r7, #14]
 800733a:	f8a3 2009 	strh.w	r2, [r3, #9]
 800733e:	4b14      	ldr	r3, [pc, #80]	; (8007390 <shci_send+0x74>)
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	7b7a      	ldrb	r2, [r7, #13]
 8007344:	72da      	strb	r2, [r3, #11]
 8007346:	4b12      	ldr	r3, [pc, #72]	; (8007390 <shci_send+0x74>)
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	330c      	adds	r3, #12
 800734c:	7b7a      	ldrb	r2, [r7, #13]
 800734e:	68b9      	ldr	r1, [r7, #8]
 8007350:	4618      	mov	r0, r3
 8007352:	f001 fc99 	bl	8008c88 <memcpy>
 8007356:	4b0f      	ldr	r3, [pc, #60]	; (8007394 <shci_send+0x78>)
 8007358:	691b      	ldr	r3, [r3, #16]
 800735a:	2100      	movs	r1, #0
 800735c:	2000      	movs	r0, #0
 800735e:	4798      	blx	r3
 8007360:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8007364:	f7f9 fc4b 	bl	8000bfe <shci_cmd_resp_wait>
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	f103 0008 	add.w	r0, r3, #8
 800736e:	4b08      	ldr	r3, [pc, #32]	; (8007390 <shci_send+0x74>)
 8007370:	6819      	ldr	r1, [r3, #0]
 8007372:	4b07      	ldr	r3, [pc, #28]	; (8007390 <shci_send+0x74>)
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	789b      	ldrb	r3, [r3, #2]
 8007378:	3303      	adds	r3, #3
 800737a:	461a      	mov	r2, r3
 800737c:	f001 fc84 	bl	8008c88 <memcpy>
 8007380:	2001      	movs	r0, #1
 8007382:	f000 f83b 	bl	80073fc <Cmd_SetStatus>
 8007386:	bf00      	nop
 8007388:	3710      	adds	r7, #16
 800738a:	46bd      	mov	sp, r7
 800738c:	bd80      	pop	{r7, pc}
 800738e:	bf00      	nop
 8007390:	20000954 	.word	0x20000954
 8007394:	20000b94 	.word	0x20000b94

08007398 <TlInit>:
 8007398:	b580      	push	{r7, lr}
 800739a:	b086      	sub	sp, #24
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
 80073a0:	4a10      	ldr	r2, [pc, #64]	; (80073e4 <TlInit+0x4c>)
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	6013      	str	r3, [r2, #0]
 80073a6:	4810      	ldr	r0, [pc, #64]	; (80073e8 <TlInit+0x50>)
 80073a8:	f000 faf2 	bl	8007990 <LST_init_head>
 80073ac:	2001      	movs	r0, #1
 80073ae:	f000 f825 	bl	80073fc <Cmd_SetStatus>
 80073b2:	4b0e      	ldr	r3, [pc, #56]	; (80073ec <TlInit+0x54>)
 80073b4:	2201      	movs	r2, #1
 80073b6:	701a      	strb	r2, [r3, #0]
 80073b8:	4b0d      	ldr	r3, [pc, #52]	; (80073f0 <TlInit+0x58>)
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d00c      	beq.n	80073da <TlInit+0x42>
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	617b      	str	r3, [r7, #20]
 80073c4:	4b0b      	ldr	r3, [pc, #44]	; (80073f4 <TlInit+0x5c>)
 80073c6:	60fb      	str	r3, [r7, #12]
 80073c8:	4b0b      	ldr	r3, [pc, #44]	; (80073f8 <TlInit+0x60>)
 80073ca:	613b      	str	r3, [r7, #16]
 80073cc:	4b08      	ldr	r3, [pc, #32]	; (80073f0 <TlInit+0x58>)
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	f107 020c 	add.w	r2, r7, #12
 80073d4:	4610      	mov	r0, r2
 80073d6:	4798      	blx	r3
 80073d8:	bf00      	nop
 80073da:	bf00      	nop
 80073dc:	3718      	adds	r7, #24
 80073de:	46bd      	mov	sp, r7
 80073e0:	bd80      	pop	{r7, pc}
 80073e2:	bf00      	nop
 80073e4:	20000954 	.word	0x20000954
 80073e8:	20000948 	.word	0x20000948
 80073ec:	20000958 	.word	0x20000958
 80073f0:	20000b94 	.word	0x20000b94
 80073f4:	0800744d 	.word	0x0800744d
 80073f8:	08007465 	.word	0x08007465

080073fc <Cmd_SetStatus>:
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b082      	sub	sp, #8
 8007400:	af00      	add	r7, sp, #0
 8007402:	4603      	mov	r3, r0
 8007404:	71fb      	strb	r3, [r7, #7]
 8007406:	79fb      	ldrb	r3, [r7, #7]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d10b      	bne.n	8007424 <Cmd_SetStatus+0x28>
 800740c:	4b0d      	ldr	r3, [pc, #52]	; (8007444 <Cmd_SetStatus+0x48>)
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d003      	beq.n	800741c <Cmd_SetStatus+0x20>
 8007414:	4b0b      	ldr	r3, [pc, #44]	; (8007444 <Cmd_SetStatus+0x48>)
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	2000      	movs	r0, #0
 800741a:	4798      	blx	r3
 800741c:	4b0a      	ldr	r3, [pc, #40]	; (8007448 <Cmd_SetStatus+0x4c>)
 800741e:	2200      	movs	r2, #0
 8007420:	701a      	strb	r2, [r3, #0]
 8007422:	e00b      	b.n	800743c <Cmd_SetStatus+0x40>
 8007424:	4b08      	ldr	r3, [pc, #32]	; (8007448 <Cmd_SetStatus+0x4c>)
 8007426:	2201      	movs	r2, #1
 8007428:	701a      	strb	r2, [r3, #0]
 800742a:	4b06      	ldr	r3, [pc, #24]	; (8007444 <Cmd_SetStatus+0x48>)
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d004      	beq.n	800743c <Cmd_SetStatus+0x40>
 8007432:	4b04      	ldr	r3, [pc, #16]	; (8007444 <Cmd_SetStatus+0x48>)
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	2001      	movs	r0, #1
 8007438:	4798      	blx	r3
 800743a:	bf00      	nop
 800743c:	bf00      	nop
 800743e:	3708      	adds	r7, #8
 8007440:	46bd      	mov	sp, r7
 8007442:	bd80      	pop	{r7, pc}
 8007444:	20000bb4 	.word	0x20000bb4
 8007448:	20000950 	.word	0x20000950

0800744c <TlCmdEvtReceived>:
 800744c:	b580      	push	{r7, lr}
 800744e:	b082      	sub	sp, #8
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
 8007454:	2000      	movs	r0, #0
 8007456:	f7f9 fbc7 	bl	8000be8 <shci_cmd_resp_release>
 800745a:	bf00      	nop
 800745c:	3708      	adds	r7, #8
 800745e:	46bd      	mov	sp, r7
 8007460:	bd80      	pop	{r7, pc}
	...

08007464 <TlUserEvtReceived>:
 8007464:	b580      	push	{r7, lr}
 8007466:	b082      	sub	sp, #8
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
 800746c:	6879      	ldr	r1, [r7, #4]
 800746e:	4805      	ldr	r0, [pc, #20]	; (8007484 <TlUserEvtReceived+0x20>)
 8007470:	f000 fae6 	bl	8007a40 <LST_insert_tail>
 8007474:	4803      	ldr	r0, [pc, #12]	; (8007484 <TlUserEvtReceived+0x20>)
 8007476:	f7f9 fbab 	bl	8000bd0 <shci_notify_asynch_evt>
 800747a:	bf00      	nop
 800747c:	3708      	adds	r7, #8
 800747e:	46bd      	mov	sp, r7
 8007480:	bd80      	pop	{r7, pc}
 8007482:	bf00      	nop
 8007484:	20000948 	.word	0x20000948

08007488 <shci_register_io_bus>:
 8007488:	b480      	push	{r7}
 800748a:	b083      	sub	sp, #12
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	4a05      	ldr	r2, [pc, #20]	; (80074a8 <shci_register_io_bus+0x20>)
 8007494:	601a      	str	r2, [r3, #0]
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	4a04      	ldr	r2, [pc, #16]	; (80074ac <shci_register_io_bus+0x24>)
 800749a:	611a      	str	r2, [r3, #16]
 800749c:	bf00      	nop
 800749e:	370c      	adds	r7, #12
 80074a0:	46bd      	mov	sp, r7
 80074a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a6:	4770      	bx	lr
 80074a8:	08007645 	.word	0x08007645
 80074ac:	08007699 	.word	0x08007699

080074b0 <TL_Enable>:
 80074b0:	b580      	push	{r7, lr}
 80074b2:	af00      	add	r7, sp, #0
 80074b4:	f001 f86c 	bl	8008590 <HW_IPCC_Enable>
 80074b8:	bf00      	nop
 80074ba:	bd80      	pop	{r7, pc}

080074bc <TL_Init>:
 80074bc:	b580      	push	{r7, lr}
 80074be:	af00      	add	r7, sp, #0
 80074c0:	4b10      	ldr	r3, [pc, #64]	; (8007504 <TL_Init+0x48>)
 80074c2:	4a11      	ldr	r2, [pc, #68]	; (8007508 <TL_Init+0x4c>)
 80074c4:	601a      	str	r2, [r3, #0]
 80074c6:	4b0f      	ldr	r3, [pc, #60]	; (8007504 <TL_Init+0x48>)
 80074c8:	4a10      	ldr	r2, [pc, #64]	; (800750c <TL_Init+0x50>)
 80074ca:	605a      	str	r2, [r3, #4]
 80074cc:	4b0d      	ldr	r3, [pc, #52]	; (8007504 <TL_Init+0x48>)
 80074ce:	4a10      	ldr	r2, [pc, #64]	; (8007510 <TL_Init+0x54>)
 80074d0:	609a      	str	r2, [r3, #8]
 80074d2:	4b0c      	ldr	r3, [pc, #48]	; (8007504 <TL_Init+0x48>)
 80074d4:	4a0f      	ldr	r2, [pc, #60]	; (8007514 <TL_Init+0x58>)
 80074d6:	621a      	str	r2, [r3, #32]
 80074d8:	4b0a      	ldr	r3, [pc, #40]	; (8007504 <TL_Init+0x48>)
 80074da:	4a0f      	ldr	r2, [pc, #60]	; (8007518 <TL_Init+0x5c>)
 80074dc:	625a      	str	r2, [r3, #36]	; 0x24
 80074de:	4b09      	ldr	r3, [pc, #36]	; (8007504 <TL_Init+0x48>)
 80074e0:	4a0e      	ldr	r2, [pc, #56]	; (800751c <TL_Init+0x60>)
 80074e2:	60da      	str	r2, [r3, #12]
 80074e4:	4b07      	ldr	r3, [pc, #28]	; (8007504 <TL_Init+0x48>)
 80074e6:	4a0e      	ldr	r2, [pc, #56]	; (8007520 <TL_Init+0x64>)
 80074e8:	611a      	str	r2, [r3, #16]
 80074ea:	4b06      	ldr	r3, [pc, #24]	; (8007504 <TL_Init+0x48>)
 80074ec:	4a0d      	ldr	r2, [pc, #52]	; (8007524 <TL_Init+0x68>)
 80074ee:	615a      	str	r2, [r3, #20]
 80074f0:	4b04      	ldr	r3, [pc, #16]	; (8007504 <TL_Init+0x48>)
 80074f2:	4a0d      	ldr	r2, [pc, #52]	; (8007528 <TL_Init+0x6c>)
 80074f4:	619a      	str	r2, [r3, #24]
 80074f6:	4b03      	ldr	r3, [pc, #12]	; (8007504 <TL_Init+0x48>)
 80074f8:	4a0c      	ldr	r2, [pc, #48]	; (800752c <TL_Init+0x70>)
 80074fa:	61da      	str	r2, [r3, #28]
 80074fc:	f001 f85c 	bl	80085b8 <HW_IPCC_Init>
 8007500:	bf00      	nop
 8007502:	bd80      	pop	{r7, pc}
 8007504:	20030000 	.word	0x20030000
 8007508:	20030028 	.word	0x20030028
 800750c:	20030048 	.word	0x20030048
 8007510:	20030058 	.word	0x20030058
 8007514:	20030068 	.word	0x20030068
 8007518:	20030070 	.word	0x20030070
 800751c:	20030078 	.word	0x20030078
 8007520:	20030080 	.word	0x20030080
 8007524:	2003009c 	.word	0x2003009c
 8007528:	200300a0 	.word	0x200300a0
 800752c:	200300ac 	.word	0x200300ac

08007530 <TL_BLE_Init>:
 8007530:	b580      	push	{r7, lr}
 8007532:	b084      	sub	sp, #16
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	60fb      	str	r3, [r7, #12]
 800753c:	4811      	ldr	r0, [pc, #68]	; (8007584 <TL_BLE_Init+0x54>)
 800753e:	f000 fa27 	bl	8007990 <LST_init_head>
 8007542:	4b11      	ldr	r3, [pc, #68]	; (8007588 <TL_BLE_Init+0x58>)
 8007544:	685b      	ldr	r3, [r3, #4]
 8007546:	60bb      	str	r3, [r7, #8]
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	689a      	ldr	r2, [r3, #8]
 800754c:	68bb      	ldr	r3, [r7, #8]
 800754e:	601a      	str	r2, [r3, #0]
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	68da      	ldr	r2, [r3, #12]
 8007554:	68bb      	ldr	r3, [r7, #8]
 8007556:	60da      	str	r2, [r3, #12]
 8007558:	68bb      	ldr	r3, [r7, #8]
 800755a:	4a0c      	ldr	r2, [pc, #48]	; (800758c <TL_BLE_Init+0x5c>)
 800755c:	605a      	str	r2, [r3, #4]
 800755e:	68bb      	ldr	r3, [r7, #8]
 8007560:	4a08      	ldr	r2, [pc, #32]	; (8007584 <TL_BLE_Init+0x54>)
 8007562:	609a      	str	r2, [r3, #8]
 8007564:	f001 f83e 	bl	80085e4 <HW_IPCC_BLE_Init>
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	4a08      	ldr	r2, [pc, #32]	; (8007590 <TL_BLE_Init+0x60>)
 800756e:	6013      	str	r3, [r2, #0]
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	685b      	ldr	r3, [r3, #4]
 8007574:	4a07      	ldr	r2, [pc, #28]	; (8007594 <TL_BLE_Init+0x64>)
 8007576:	6013      	str	r3, [r2, #0]
 8007578:	2300      	movs	r3, #0
 800757a:	4618      	mov	r0, r3
 800757c:	3710      	adds	r7, #16
 800757e:	46bd      	mov	sp, r7
 8007580:	bd80      	pop	{r7, pc}
 8007582:	bf00      	nop
 8007584:	200300c8 	.word	0x200300c8
 8007588:	20030000 	.word	0x20030000
 800758c:	20000900 	.word	0x20000900
 8007590:	20000bc0 	.word	0x20000bc0
 8007594:	20000bc4 	.word	0x20000bc4

08007598 <TL_BLE_SendCmd>:
 8007598:	b580      	push	{r7, lr}
 800759a:	b082      	sub	sp, #8
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
 80075a0:	460b      	mov	r3, r1
 80075a2:	807b      	strh	r3, [r7, #2]
 80075a4:	4b09      	ldr	r3, [pc, #36]	; (80075cc <TL_BLE_SendCmd+0x34>)
 80075a6:	685b      	ldr	r3, [r3, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	2201      	movs	r2, #1
 80075ac:	721a      	strb	r2, [r3, #8]
 80075ae:	4b07      	ldr	r3, [pc, #28]	; (80075cc <TL_BLE_SendCmd+0x34>)
 80075b0:	685b      	ldr	r3, [r3, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	4619      	mov	r1, r3
 80075b6:	2001      	movs	r0, #1
 80075b8:	f000 f96c 	bl	8007894 <OutputDbgTrace>
 80075bc:	f001 f81c 	bl	80085f8 <HW_IPCC_BLE_SendCmd>
 80075c0:	2300      	movs	r3, #0
 80075c2:	4618      	mov	r0, r3
 80075c4:	3708      	adds	r7, #8
 80075c6:	46bd      	mov	sp, r7
 80075c8:	bd80      	pop	{r7, pc}
 80075ca:	bf00      	nop
 80075cc:	20030000 	.word	0x20030000

080075d0 <HW_IPCC_BLE_RxEvtNot>:
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b082      	sub	sp, #8
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	e01c      	b.n	8007612 <HW_IPCC_BLE_RxEvtNot+0x42>
 80075d8:	1d3b      	adds	r3, r7, #4
 80075da:	4619      	mov	r1, r3
 80075dc:	4812      	ldr	r0, [pc, #72]	; (8007628 <HW_IPCC_BLE_RxEvtNot+0x58>)
 80075de:	f000 fa76 	bl	8007ace <LST_remove_head>
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	7a5b      	ldrb	r3, [r3, #9]
 80075e6:	2b0f      	cmp	r3, #15
 80075e8:	d003      	beq.n	80075f2 <HW_IPCC_BLE_RxEvtNot+0x22>
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	7a5b      	ldrb	r3, [r3, #9]
 80075ee:	2b0e      	cmp	r3, #14
 80075f0:	d105      	bne.n	80075fe <HW_IPCC_BLE_RxEvtNot+0x2e>
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	4619      	mov	r1, r3
 80075f6:	2002      	movs	r0, #2
 80075f8:	f000 f94c 	bl	8007894 <OutputDbgTrace>
 80075fc:	e004      	b.n	8007608 <HW_IPCC_BLE_RxEvtNot+0x38>
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	4619      	mov	r1, r3
 8007602:	2003      	movs	r0, #3
 8007604:	f000 f946 	bl	8007894 <OutputDbgTrace>
 8007608:	4b08      	ldr	r3, [pc, #32]	; (800762c <HW_IPCC_BLE_RxEvtNot+0x5c>)
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	687a      	ldr	r2, [r7, #4]
 800760e:	4610      	mov	r0, r2
 8007610:	4798      	blx	r3
 8007612:	4805      	ldr	r0, [pc, #20]	; (8007628 <HW_IPCC_BLE_RxEvtNot+0x58>)
 8007614:	f000 f9cc 	bl	80079b0 <LST_is_empty>
 8007618:	4603      	mov	r3, r0
 800761a:	2b00      	cmp	r3, #0
 800761c:	d0dc      	beq.n	80075d8 <HW_IPCC_BLE_RxEvtNot+0x8>
 800761e:	bf00      	nop
 8007620:	3708      	adds	r7, #8
 8007622:	46bd      	mov	sp, r7
 8007624:	bd80      	pop	{r7, pc}
 8007626:	bf00      	nop
 8007628:	200300c8 	.word	0x200300c8
 800762c:	20000bc0 	.word	0x20000bc0

08007630 <HW_IPCC_BLE_AclDataAckNot>:
 8007630:	b580      	push	{r7, lr}
 8007632:	af00      	add	r7, sp, #0
 8007634:	4b02      	ldr	r3, [pc, #8]	; (8007640 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	4798      	blx	r3
 800763a:	bf00      	nop
 800763c:	bd80      	pop	{r7, pc}
 800763e:	bf00      	nop
 8007640:	20000bc4 	.word	0x20000bc4

08007644 <TL_SYS_Init>:
 8007644:	b580      	push	{r7, lr}
 8007646:	b084      	sub	sp, #16
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	60fb      	str	r3, [r7, #12]
 8007650:	480d      	ldr	r0, [pc, #52]	; (8007688 <TL_SYS_Init+0x44>)
 8007652:	f000 f99d 	bl	8007990 <LST_init_head>
 8007656:	4b0d      	ldr	r3, [pc, #52]	; (800768c <TL_SYS_Init+0x48>)
 8007658:	68db      	ldr	r3, [r3, #12]
 800765a:	60bb      	str	r3, [r7, #8]
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	689a      	ldr	r2, [r3, #8]
 8007660:	68bb      	ldr	r3, [r7, #8]
 8007662:	601a      	str	r2, [r3, #0]
 8007664:	68bb      	ldr	r3, [r7, #8]
 8007666:	4a08      	ldr	r2, [pc, #32]	; (8007688 <TL_SYS_Init+0x44>)
 8007668:	605a      	str	r2, [r3, #4]
 800766a:	f000 ffe7 	bl	800863c <HW_IPCC_SYS_Init>
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	4a07      	ldr	r2, [pc, #28]	; (8007690 <TL_SYS_Init+0x4c>)
 8007674:	6013      	str	r3, [r2, #0]
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	685b      	ldr	r3, [r3, #4]
 800767a:	4a06      	ldr	r2, [pc, #24]	; (8007694 <TL_SYS_Init+0x50>)
 800767c:	6013      	str	r3, [r2, #0]
 800767e:	2300      	movs	r3, #0
 8007680:	4618      	mov	r0, r3
 8007682:	3710      	adds	r7, #16
 8007684:	46bd      	mov	sp, r7
 8007686:	bd80      	pop	{r7, pc}
 8007688:	200300d0 	.word	0x200300d0
 800768c:	20030000 	.word	0x20030000
 8007690:	20000bc8 	.word	0x20000bc8
 8007694:	20000bcc 	.word	0x20000bcc

08007698 <TL_SYS_SendCmd>:
 8007698:	b580      	push	{r7, lr}
 800769a:	b082      	sub	sp, #8
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
 80076a0:	460b      	mov	r3, r1
 80076a2:	807b      	strh	r3, [r7, #2]
 80076a4:	4b09      	ldr	r3, [pc, #36]	; (80076cc <TL_SYS_SendCmd+0x34>)
 80076a6:	68db      	ldr	r3, [r3, #12]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	2210      	movs	r2, #16
 80076ac:	721a      	strb	r2, [r3, #8]
 80076ae:	4b07      	ldr	r3, [pc, #28]	; (80076cc <TL_SYS_SendCmd+0x34>)
 80076b0:	68db      	ldr	r3, [r3, #12]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	4619      	mov	r1, r3
 80076b6:	2004      	movs	r0, #4
 80076b8:	f000 f8ec 	bl	8007894 <OutputDbgTrace>
 80076bc:	f000 ffc8 	bl	8008650 <HW_IPCC_SYS_SendCmd>
 80076c0:	2300      	movs	r3, #0
 80076c2:	4618      	mov	r0, r3
 80076c4:	3708      	adds	r7, #8
 80076c6:	46bd      	mov	sp, r7
 80076c8:	bd80      	pop	{r7, pc}
 80076ca:	bf00      	nop
 80076cc:	20030000 	.word	0x20030000

080076d0 <HW_IPCC_SYS_CmdEvtNot>:
 80076d0:	b580      	push	{r7, lr}
 80076d2:	af00      	add	r7, sp, #0
 80076d4:	4b07      	ldr	r3, [pc, #28]	; (80076f4 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 80076d6:	68db      	ldr	r3, [r3, #12]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	4619      	mov	r1, r3
 80076dc:	2005      	movs	r0, #5
 80076de:	f000 f8d9 	bl	8007894 <OutputDbgTrace>
 80076e2:	4b05      	ldr	r3, [pc, #20]	; (80076f8 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	4a03      	ldr	r2, [pc, #12]	; (80076f4 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 80076e8:	68d2      	ldr	r2, [r2, #12]
 80076ea:	6812      	ldr	r2, [r2, #0]
 80076ec:	4610      	mov	r0, r2
 80076ee:	4798      	blx	r3
 80076f0:	bf00      	nop
 80076f2:	bd80      	pop	{r7, pc}
 80076f4:	20030000 	.word	0x20030000
 80076f8:	20000bc8 	.word	0x20000bc8

080076fc <HW_IPCC_SYS_EvtNot>:
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b082      	sub	sp, #8
 8007700:	af00      	add	r7, sp, #0
 8007702:	e00e      	b.n	8007722 <HW_IPCC_SYS_EvtNot+0x26>
 8007704:	1d3b      	adds	r3, r7, #4
 8007706:	4619      	mov	r1, r3
 8007708:	480b      	ldr	r0, [pc, #44]	; (8007738 <HW_IPCC_SYS_EvtNot+0x3c>)
 800770a:	f000 f9e0 	bl	8007ace <LST_remove_head>
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	4619      	mov	r1, r3
 8007712:	2006      	movs	r0, #6
 8007714:	f000 f8be 	bl	8007894 <OutputDbgTrace>
 8007718:	4b08      	ldr	r3, [pc, #32]	; (800773c <HW_IPCC_SYS_EvtNot+0x40>)
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	687a      	ldr	r2, [r7, #4]
 800771e:	4610      	mov	r0, r2
 8007720:	4798      	blx	r3
 8007722:	4805      	ldr	r0, [pc, #20]	; (8007738 <HW_IPCC_SYS_EvtNot+0x3c>)
 8007724:	f000 f944 	bl	80079b0 <LST_is_empty>
 8007728:	4603      	mov	r3, r0
 800772a:	2b00      	cmp	r3, #0
 800772c:	d0ea      	beq.n	8007704 <HW_IPCC_SYS_EvtNot+0x8>
 800772e:	bf00      	nop
 8007730:	3708      	adds	r7, #8
 8007732:	46bd      	mov	sp, r7
 8007734:	bd80      	pop	{r7, pc}
 8007736:	bf00      	nop
 8007738:	200300d0 	.word	0x200300d0
 800773c:	20000bcc 	.word	0x20000bcc

08007740 <TL_MM_Init>:
 8007740:	b580      	push	{r7, lr}
 8007742:	b082      	sub	sp, #8
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
 8007748:	4817      	ldr	r0, [pc, #92]	; (80077a8 <TL_MM_Init+0x68>)
 800774a:	f000 f921 	bl	8007990 <LST_init_head>
 800774e:	4817      	ldr	r0, [pc, #92]	; (80077ac <TL_MM_Init+0x6c>)
 8007750:	f000 f91e 	bl	8007990 <LST_init_head>
 8007754:	4b16      	ldr	r3, [pc, #88]	; (80077b0 <TL_MM_Init+0x70>)
 8007756:	691b      	ldr	r3, [r3, #16]
 8007758:	4a16      	ldr	r2, [pc, #88]	; (80077b4 <TL_MM_Init+0x74>)
 800775a:	6013      	str	r3, [r2, #0]
 800775c:	4b15      	ldr	r3, [pc, #84]	; (80077b4 <TL_MM_Init+0x74>)
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	687a      	ldr	r2, [r7, #4]
 8007762:	6892      	ldr	r2, [r2, #8]
 8007764:	609a      	str	r2, [r3, #8]
 8007766:	4b13      	ldr	r3, [pc, #76]	; (80077b4 <TL_MM_Init+0x74>)
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	687a      	ldr	r2, [r7, #4]
 800776c:	68d2      	ldr	r2, [r2, #12]
 800776e:	60da      	str	r2, [r3, #12]
 8007770:	4b10      	ldr	r3, [pc, #64]	; (80077b4 <TL_MM_Init+0x74>)
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	4a0c      	ldr	r2, [pc, #48]	; (80077a8 <TL_MM_Init+0x68>)
 8007776:	611a      	str	r2, [r3, #16]
 8007778:	4b0e      	ldr	r3, [pc, #56]	; (80077b4 <TL_MM_Init+0x74>)
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	687a      	ldr	r2, [r7, #4]
 800777e:	6812      	ldr	r2, [r2, #0]
 8007780:	601a      	str	r2, [r3, #0]
 8007782:	4b0c      	ldr	r3, [pc, #48]	; (80077b4 <TL_MM_Init+0x74>)
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	687a      	ldr	r2, [r7, #4]
 8007788:	6852      	ldr	r2, [r2, #4]
 800778a:	605a      	str	r2, [r3, #4]
 800778c:	4b09      	ldr	r3, [pc, #36]	; (80077b4 <TL_MM_Init+0x74>)
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	687a      	ldr	r2, [r7, #4]
 8007792:	6912      	ldr	r2, [r2, #16]
 8007794:	615a      	str	r2, [r3, #20]
 8007796:	4b07      	ldr	r3, [pc, #28]	; (80077b4 <TL_MM_Init+0x74>)
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	687a      	ldr	r2, [r7, #4]
 800779c:	6952      	ldr	r2, [r2, #20]
 800779e:	619a      	str	r2, [r3, #24]
 80077a0:	bf00      	nop
 80077a2:	3708      	adds	r7, #8
 80077a4:	46bd      	mov	sp, r7
 80077a6:	bd80      	pop	{r7, pc}
 80077a8:	200300b8 	.word	0x200300b8
 80077ac:	20000bb8 	.word	0x20000bb8
 80077b0:	20030000 	.word	0x20030000
 80077b4:	20000bd0 	.word	0x20000bd0

080077b8 <TL_MM_EvtDone>:
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b082      	sub	sp, #8
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
 80077c0:	6879      	ldr	r1, [r7, #4]
 80077c2:	4807      	ldr	r0, [pc, #28]	; (80077e0 <TL_MM_EvtDone+0x28>)
 80077c4:	f000 f93c 	bl	8007a40 <LST_insert_tail>
 80077c8:	6879      	ldr	r1, [r7, #4]
 80077ca:	2000      	movs	r0, #0
 80077cc:	f000 f862 	bl	8007894 <OutputDbgTrace>
 80077d0:	4804      	ldr	r0, [pc, #16]	; (80077e4 <TL_MM_EvtDone+0x2c>)
 80077d2:	f000 ff63 	bl	800869c <HW_IPCC_MM_SendFreeBuf>
 80077d6:	bf00      	nop
 80077d8:	3708      	adds	r7, #8
 80077da:	46bd      	mov	sp, r7
 80077dc:	bd80      	pop	{r7, pc}
 80077de:	bf00      	nop
 80077e0:	20000bb8 	.word	0x20000bb8
 80077e4:	080077e9 	.word	0x080077e9

080077e8 <SendFreeBuf>:
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b082      	sub	sp, #8
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	e00c      	b.n	800780a <SendFreeBuf+0x22>
 80077f0:	1d3b      	adds	r3, r7, #4
 80077f2:	4619      	mov	r1, r3
 80077f4:	480a      	ldr	r0, [pc, #40]	; (8007820 <SendFreeBuf+0x38>)
 80077f6:	f000 f96a 	bl	8007ace <LST_remove_head>
 80077fa:	4b0a      	ldr	r3, [pc, #40]	; (8007824 <SendFreeBuf+0x3c>)
 80077fc:	691b      	ldr	r3, [r3, #16]
 80077fe:	691b      	ldr	r3, [r3, #16]
 8007800:	687a      	ldr	r2, [r7, #4]
 8007802:	4611      	mov	r1, r2
 8007804:	4618      	mov	r0, r3
 8007806:	f000 f91b 	bl	8007a40 <LST_insert_tail>
 800780a:	4805      	ldr	r0, [pc, #20]	; (8007820 <SendFreeBuf+0x38>)
 800780c:	f000 f8d0 	bl	80079b0 <LST_is_empty>
 8007810:	4603      	mov	r3, r0
 8007812:	2b00      	cmp	r3, #0
 8007814:	d0ec      	beq.n	80077f0 <SendFreeBuf+0x8>
 8007816:	bf00      	nop
 8007818:	3708      	adds	r7, #8
 800781a:	46bd      	mov	sp, r7
 800781c:	bd80      	pop	{r7, pc}
 800781e:	bf00      	nop
 8007820:	20000bb8 	.word	0x20000bb8
 8007824:	20030000 	.word	0x20030000

08007828 <TL_TRACES_Init>:
 8007828:	b580      	push	{r7, lr}
 800782a:	af00      	add	r7, sp, #0
 800782c:	4805      	ldr	r0, [pc, #20]	; (8007844 <TL_TRACES_Init+0x1c>)
 800782e:	f000 f8af 	bl	8007990 <LST_init_head>
 8007832:	4b05      	ldr	r3, [pc, #20]	; (8007848 <TL_TRACES_Init+0x20>)
 8007834:	695b      	ldr	r3, [r3, #20]
 8007836:	4a03      	ldr	r2, [pc, #12]	; (8007844 <TL_TRACES_Init+0x1c>)
 8007838:	601a      	str	r2, [r3, #0]
 800783a:	f000 ff65 	bl	8008708 <HW_IPCC_TRACES_Init>
 800783e:	bf00      	nop
 8007840:	bd80      	pop	{r7, pc}
 8007842:	bf00      	nop
 8007844:	200300c0 	.word	0x200300c0
 8007848:	20030000 	.word	0x20030000

0800784c <HW_IPCC_TRACES_EvtNot>:
 800784c:	b580      	push	{r7, lr}
 800784e:	b082      	sub	sp, #8
 8007850:	af00      	add	r7, sp, #0
 8007852:	e008      	b.n	8007866 <HW_IPCC_TRACES_EvtNot+0x1a>
 8007854:	1d3b      	adds	r3, r7, #4
 8007856:	4619      	mov	r1, r3
 8007858:	4808      	ldr	r0, [pc, #32]	; (800787c <HW_IPCC_TRACES_EvtNot+0x30>)
 800785a:	f000 f938 	bl	8007ace <LST_remove_head>
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	4618      	mov	r0, r3
 8007862:	f000 f80d 	bl	8007880 <TL_TRACES_EvtReceived>
 8007866:	4805      	ldr	r0, [pc, #20]	; (800787c <HW_IPCC_TRACES_EvtNot+0x30>)
 8007868:	f000 f8a2 	bl	80079b0 <LST_is_empty>
 800786c:	4603      	mov	r3, r0
 800786e:	2b00      	cmp	r3, #0
 8007870:	d0f0      	beq.n	8007854 <HW_IPCC_TRACES_EvtNot+0x8>
 8007872:	bf00      	nop
 8007874:	3708      	adds	r7, #8
 8007876:	46bd      	mov	sp, r7
 8007878:	bd80      	pop	{r7, pc}
 800787a:	bf00      	nop
 800787c:	200300c0 	.word	0x200300c0

08007880 <TL_TRACES_EvtReceived>:
 8007880:	b480      	push	{r7}
 8007882:	b083      	sub	sp, #12
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
 8007888:	bf00      	nop
 800788a:	370c      	adds	r7, #12
 800788c:	46bd      	mov	sp, r7
 800788e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007892:	4770      	bx	lr

08007894 <OutputDbgTrace>:
 8007894:	b480      	push	{r7}
 8007896:	b085      	sub	sp, #20
 8007898:	af00      	add	r7, sp, #0
 800789a:	4603      	mov	r3, r0
 800789c:	6039      	str	r1, [r7, #0]
 800789e:	71fb      	strb	r3, [r7, #7]
 80078a0:	79fb      	ldrb	r3, [r7, #7]
 80078a2:	2b06      	cmp	r3, #6
 80078a4:	d845      	bhi.n	8007932 <OutputDbgTrace+0x9e>
 80078a6:	a201      	add	r2, pc, #4	; (adr r2, 80078ac <OutputDbgTrace+0x18>)
 80078a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078ac:	080078c9 	.word	0x080078c9
 80078b0:	080078ed 	.word	0x080078ed
 80078b4:	080078f3 	.word	0x080078f3
 80078b8:	08007907 	.word	0x08007907
 80078bc:	08007913 	.word	0x08007913
 80078c0:	08007919 	.word	0x08007919
 80078c4:	08007927 	.word	0x08007927
 80078c8:	683b      	ldr	r3, [r7, #0]
 80078ca:	60fb      	str	r3, [r7, #12]
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	7a5b      	ldrb	r3, [r3, #9]
 80078d0:	2bff      	cmp	r3, #255	; 0xff
 80078d2:	d005      	beq.n	80078e0 <OutputDbgTrace+0x4c>
 80078d4:	2bff      	cmp	r3, #255	; 0xff
 80078d6:	dc05      	bgt.n	80078e4 <OutputDbgTrace+0x50>
 80078d8:	2b0e      	cmp	r3, #14
 80078da:	d005      	beq.n	80078e8 <OutputDbgTrace+0x54>
 80078dc:	2b0f      	cmp	r3, #15
 80078de:	e001      	b.n	80078e4 <OutputDbgTrace+0x50>
 80078e0:	bf00      	nop
 80078e2:	e027      	b.n	8007934 <OutputDbgTrace+0xa0>
 80078e4:	bf00      	nop
 80078e6:	e025      	b.n	8007934 <OutputDbgTrace+0xa0>
 80078e8:	bf00      	nop
 80078ea:	e023      	b.n	8007934 <OutputDbgTrace+0xa0>
 80078ec:	683b      	ldr	r3, [r7, #0]
 80078ee:	60bb      	str	r3, [r7, #8]
 80078f0:	e020      	b.n	8007934 <OutputDbgTrace+0xa0>
 80078f2:	683b      	ldr	r3, [r7, #0]
 80078f4:	60fb      	str	r3, [r7, #12]
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	7a5b      	ldrb	r3, [r3, #9]
 80078fa:	2b0e      	cmp	r3, #14
 80078fc:	d001      	beq.n	8007902 <OutputDbgTrace+0x6e>
 80078fe:	2b0f      	cmp	r3, #15
 8007900:	e000      	b.n	8007904 <OutputDbgTrace+0x70>
 8007902:	bf00      	nop
 8007904:	e016      	b.n	8007934 <OutputDbgTrace+0xa0>
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	60fb      	str	r3, [r7, #12]
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	7a5b      	ldrb	r3, [r3, #9]
 800790e:	2bff      	cmp	r3, #255	; 0xff
 8007910:	e010      	b.n	8007934 <OutputDbgTrace+0xa0>
 8007912:	683b      	ldr	r3, [r7, #0]
 8007914:	60bb      	str	r3, [r7, #8]
 8007916:	e00d      	b.n	8007934 <OutputDbgTrace+0xa0>
 8007918:	683b      	ldr	r3, [r7, #0]
 800791a:	60fb      	str	r3, [r7, #12]
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	7a5b      	ldrb	r3, [r3, #9]
 8007920:	2b0e      	cmp	r3, #14
 8007922:	bf00      	nop
 8007924:	e006      	b.n	8007934 <OutputDbgTrace+0xa0>
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	60fb      	str	r3, [r7, #12]
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	7a5b      	ldrb	r3, [r3, #9]
 800792e:	2bff      	cmp	r3, #255	; 0xff
 8007930:	e000      	b.n	8007934 <OutputDbgTrace+0xa0>
 8007932:	bf00      	nop
 8007934:	bf00      	nop
 8007936:	3714      	adds	r7, #20
 8007938:	46bd      	mov	sp, r7
 800793a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793e:	4770      	bx	lr

08007940 <OTP_Read>:
 8007940:	b480      	push	{r7}
 8007942:	b085      	sub	sp, #20
 8007944:	af00      	add	r7, sp, #0
 8007946:	4603      	mov	r3, r0
 8007948:	71fb      	strb	r3, [r7, #7]
 800794a:	4b0f      	ldr	r3, [pc, #60]	; (8007988 <OTP_Read+0x48>)
 800794c:	60fb      	str	r3, [r7, #12]
 800794e:	e002      	b.n	8007956 <OTP_Read+0x16>
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	3b08      	subs	r3, #8
 8007954:	60fb      	str	r3, [r7, #12]
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	3307      	adds	r3, #7
 800795a:	781b      	ldrb	r3, [r3, #0]
 800795c:	79fa      	ldrb	r2, [r7, #7]
 800795e:	429a      	cmp	r2, r3
 8007960:	d003      	beq.n	800796a <OTP_Read+0x2a>
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	4a09      	ldr	r2, [pc, #36]	; (800798c <OTP_Read+0x4c>)
 8007966:	4293      	cmp	r3, r2
 8007968:	d1f2      	bne.n	8007950 <OTP_Read+0x10>
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	3307      	adds	r3, #7
 800796e:	781b      	ldrb	r3, [r3, #0]
 8007970:	79fa      	ldrb	r2, [r7, #7]
 8007972:	429a      	cmp	r2, r3
 8007974:	d001      	beq.n	800797a <OTP_Read+0x3a>
 8007976:	2300      	movs	r3, #0
 8007978:	60fb      	str	r3, [r7, #12]
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	4618      	mov	r0, r3
 800797e:	3714      	adds	r7, #20
 8007980:	46bd      	mov	sp, r7
 8007982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007986:	4770      	bx	lr
 8007988:	1fff73f8 	.word	0x1fff73f8
 800798c:	1fff7000 	.word	0x1fff7000

08007990 <LST_init_head>:
 8007990:	b480      	push	{r7}
 8007992:	b083      	sub	sp, #12
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	687a      	ldr	r2, [r7, #4]
 800799c:	601a      	str	r2, [r3, #0]
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	687a      	ldr	r2, [r7, #4]
 80079a2:	605a      	str	r2, [r3, #4]
 80079a4:	bf00      	nop
 80079a6:	370c      	adds	r7, #12
 80079a8:	46bd      	mov	sp, r7
 80079aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ae:	4770      	bx	lr

080079b0 <LST_is_empty>:
 80079b0:	b480      	push	{r7}
 80079b2:	b087      	sub	sp, #28
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
 80079b8:	f3ef 8310 	mrs	r3, PRIMASK
 80079bc:	60fb      	str	r3, [r7, #12]
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	613b      	str	r3, [r7, #16]
 80079c2:	b672      	cpsid	i
 80079c4:	bf00      	nop
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	687a      	ldr	r2, [r7, #4]
 80079cc:	429a      	cmp	r2, r3
 80079ce:	d102      	bne.n	80079d6 <LST_is_empty+0x26>
 80079d0:	2301      	movs	r3, #1
 80079d2:	75fb      	strb	r3, [r7, #23]
 80079d4:	e001      	b.n	80079da <LST_is_empty+0x2a>
 80079d6:	2300      	movs	r3, #0
 80079d8:	75fb      	strb	r3, [r7, #23]
 80079da:	693b      	ldr	r3, [r7, #16]
 80079dc:	60bb      	str	r3, [r7, #8]
 80079de:	68bb      	ldr	r3, [r7, #8]
 80079e0:	f383 8810 	msr	PRIMASK, r3
 80079e4:	bf00      	nop
 80079e6:	7dfb      	ldrb	r3, [r7, #23]
 80079e8:	4618      	mov	r0, r3
 80079ea:	371c      	adds	r7, #28
 80079ec:	46bd      	mov	sp, r7
 80079ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f2:	4770      	bx	lr

080079f4 <LST_insert_head>:
 80079f4:	b480      	push	{r7}
 80079f6:	b087      	sub	sp, #28
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
 80079fc:	6039      	str	r1, [r7, #0]
 80079fe:	f3ef 8310 	mrs	r3, PRIMASK
 8007a02:	60fb      	str	r3, [r7, #12]
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	617b      	str	r3, [r7, #20]
 8007a08:	b672      	cpsid	i
 8007a0a:	bf00      	nop
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681a      	ldr	r2, [r3, #0]
 8007a10:	683b      	ldr	r3, [r7, #0]
 8007a12:	601a      	str	r2, [r3, #0]
 8007a14:	683b      	ldr	r3, [r7, #0]
 8007a16:	687a      	ldr	r2, [r7, #4]
 8007a18:	605a      	str	r2, [r3, #4]
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	683a      	ldr	r2, [r7, #0]
 8007a1e:	601a      	str	r2, [r3, #0]
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	683a      	ldr	r2, [r7, #0]
 8007a26:	605a      	str	r2, [r3, #4]
 8007a28:	697b      	ldr	r3, [r7, #20]
 8007a2a:	613b      	str	r3, [r7, #16]
 8007a2c:	693b      	ldr	r3, [r7, #16]
 8007a2e:	f383 8810 	msr	PRIMASK, r3
 8007a32:	bf00      	nop
 8007a34:	bf00      	nop
 8007a36:	371c      	adds	r7, #28
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3e:	4770      	bx	lr

08007a40 <LST_insert_tail>:
 8007a40:	b480      	push	{r7}
 8007a42:	b087      	sub	sp, #28
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
 8007a48:	6039      	str	r1, [r7, #0]
 8007a4a:	f3ef 8310 	mrs	r3, PRIMASK
 8007a4e:	60fb      	str	r3, [r7, #12]
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	617b      	str	r3, [r7, #20]
 8007a54:	b672      	cpsid	i
 8007a56:	bf00      	nop
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	687a      	ldr	r2, [r7, #4]
 8007a5c:	601a      	str	r2, [r3, #0]
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	685a      	ldr	r2, [r3, #4]
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	605a      	str	r2, [r3, #4]
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	683a      	ldr	r2, [r7, #0]
 8007a6a:	605a      	str	r2, [r3, #4]
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	685b      	ldr	r3, [r3, #4]
 8007a70:	683a      	ldr	r2, [r7, #0]
 8007a72:	601a      	str	r2, [r3, #0]
 8007a74:	697b      	ldr	r3, [r7, #20]
 8007a76:	613b      	str	r3, [r7, #16]
 8007a78:	693b      	ldr	r3, [r7, #16]
 8007a7a:	f383 8810 	msr	PRIMASK, r3
 8007a7e:	bf00      	nop
 8007a80:	bf00      	nop
 8007a82:	371c      	adds	r7, #28
 8007a84:	46bd      	mov	sp, r7
 8007a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8a:	4770      	bx	lr

08007a8c <LST_remove_node>:
 8007a8c:	b480      	push	{r7}
 8007a8e:	b087      	sub	sp, #28
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
 8007a94:	f3ef 8310 	mrs	r3, PRIMASK
 8007a98:	60fb      	str	r3, [r7, #12]
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	617b      	str	r3, [r7, #20]
 8007a9e:	b672      	cpsid	i
 8007aa0:	bf00      	nop
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	685b      	ldr	r3, [r3, #4]
 8007aa6:	687a      	ldr	r2, [r7, #4]
 8007aa8:	6812      	ldr	r2, [r2, #0]
 8007aaa:	601a      	str	r2, [r3, #0]
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	687a      	ldr	r2, [r7, #4]
 8007ab2:	6852      	ldr	r2, [r2, #4]
 8007ab4:	605a      	str	r2, [r3, #4]
 8007ab6:	697b      	ldr	r3, [r7, #20]
 8007ab8:	613b      	str	r3, [r7, #16]
 8007aba:	693b      	ldr	r3, [r7, #16]
 8007abc:	f383 8810 	msr	PRIMASK, r3
 8007ac0:	bf00      	nop
 8007ac2:	bf00      	nop
 8007ac4:	371c      	adds	r7, #28
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007acc:	4770      	bx	lr

08007ace <LST_remove_head>:
 8007ace:	b580      	push	{r7, lr}
 8007ad0:	b086      	sub	sp, #24
 8007ad2:	af00      	add	r7, sp, #0
 8007ad4:	6078      	str	r0, [r7, #4]
 8007ad6:	6039      	str	r1, [r7, #0]
 8007ad8:	f3ef 8310 	mrs	r3, PRIMASK
 8007adc:	60fb      	str	r3, [r7, #12]
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	617b      	str	r3, [r7, #20]
 8007ae2:	b672      	cpsid	i
 8007ae4:	bf00      	nop
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681a      	ldr	r2, [r3, #0]
 8007aea:	683b      	ldr	r3, [r7, #0]
 8007aec:	601a      	str	r2, [r3, #0]
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	4618      	mov	r0, r3
 8007af4:	f7ff ffca 	bl	8007a8c <LST_remove_node>
 8007af8:	697b      	ldr	r3, [r7, #20]
 8007afa:	613b      	str	r3, [r7, #16]
 8007afc:	693b      	ldr	r3, [r7, #16]
 8007afe:	f383 8810 	msr	PRIMASK, r3
 8007b02:	bf00      	nop
 8007b04:	bf00      	nop
 8007b06:	3718      	adds	r7, #24
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	bd80      	pop	{r7, pc}

08007b0c <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8007b0c:	b480      	push	{r7}
 8007b0e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 8007b10:	4b03      	ldr	r3, [pc, #12]	; (8007b20 <LL_FLASH_GetUDN+0x14>)
 8007b12:	681b      	ldr	r3, [r3, #0]
}
 8007b14:	4618      	mov	r0, r3
 8007b16:	46bd      	mov	sp, r7
 8007b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1c:	4770      	bx	lr
 8007b1e:	bf00      	nop
 8007b20:	1fff7580 	.word	0x1fff7580

08007b24 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8007b24:	b480      	push	{r7}
 8007b26:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8007b28:	4b03      	ldr	r3, [pc, #12]	; (8007b38 <LL_FLASH_GetDeviceID+0x14>)
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	b2db      	uxtb	r3, r3
}
 8007b2e:	4618      	mov	r0, r3
 8007b30:	46bd      	mov	sp, r7
 8007b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b36:	4770      	bx	lr
 8007b38:	1fff7584 	.word	0x1fff7584

08007b3c <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8007b3c:	b480      	push	{r7}
 8007b3e:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8007b40:	4b03      	ldr	r3, [pc, #12]	; (8007b50 <LL_FLASH_GetSTCompanyID+0x14>)
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	0a1b      	lsrs	r3, r3, #8
}
 8007b46:	4618      	mov	r0, r3
 8007b48:	46bd      	mov	sp, r7
 8007b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4e:	4770      	bx	lr
 8007b50:	1fff7584 	.word	0x1fff7584

08007b54 <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 8007b54:	b5b0      	push	{r4, r5, r7, lr}
 8007b56:	b090      	sub	sp, #64	; 0x40
 8007b58:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
#if (RADIO_ACTIVITY_EVENT != 0)
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8007b5a:	2392      	movs	r3, #146	; 0x92
 8007b5c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#endif /* RADIO_ACTIVITY_EVENT != 0 */
  /* USER CODE BEGIN APP_BLE_Init_1 */

  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 8007b60:	4b25      	ldr	r3, [pc, #148]	; (8007bf8 <APP_BLE_Init+0xa4>)
 8007b62:	1d3c      	adds	r4, r7, #4
 8007b64:	461d      	mov	r5, r3
 8007b66:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007b68:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007b6a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007b6c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007b6e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007b70:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007b72:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8007b76:	c403      	stmia	r4!, {r0, r1}
 8007b78:	8022      	strh	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 8007b7a:	f000 f905 	bl	8007d88 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 8007b7e:	2101      	movs	r1, #1
 8007b80:	2002      	movs	r0, #2
 8007b82:	f000 fde9 	bl	8008758 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 8007b86:	4a1d      	ldr	r2, [pc, #116]	; (8007bfc <APP_BLE_Init+0xa8>)
 8007b88:	2100      	movs	r1, #0
 8007b8a:	2002      	movs	r0, #2
 8007b8c:	f000 ff10 	bl	80089b0 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 8007b90:	1d3b      	adds	r3, r7, #4
 8007b92:	4618      	mov	r0, r3
 8007b94:	f7ff f8d0 	bl	8006d38 <SHCI_C2_BLE_Init>
 8007b98:	4603      	mov	r3, r0
 8007b9a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  if (status != SHCI_Success)
 8007b9e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d001      	beq.n	8007baa <APP_BLE_Init+0x56>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 8007ba6:	f7fa f859 	bl	8001c5c <Error_Handler>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 8007baa:	f000 f903 	bl	8007db4 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 8007bae:	f7ff f81d 	bl	8006bec <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8007bb2:	4b13      	ldr	r3, [pc, #76]	; (8007c00 <APP_BLE_Init+0xac>)
 8007bb4:	2200      	movs	r2, #0
 8007bb6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 8007bba:	4b11      	ldr	r3, [pc, #68]	; (8007c00 <APP_BLE_Init+0xac>)
 8007bbc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007bc0:	82da      	strh	r2, [r3, #22]

  /**
   * From here, all initialization are BLE application specific
   */

  UTIL_SEQ_RegTask(1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 8007bc2:	4a10      	ldr	r2, [pc, #64]	; (8007c04 <APP_BLE_Init+0xb0>)
 8007bc4:	2100      	movs	r1, #0
 8007bc6:	2001      	movs	r0, #1
 8007bc8:	f000 fef2 	bl	80089b0 <UTIL_SEQ_RegTask>

  /**
   * Initialization of ADV - Ad Manufacturer Element - Support OTA Bit Mask
   */
#if (RADIO_ACTIVITY_EVENT != 0)
  ret = aci_hal_set_radio_activity_mask(0x0006);
 8007bcc:	2006      	movs	r0, #6
 8007bce:	f7fe fe80 	bl	80068d2 <aci_hal_set_radio_activity_mask>
 8007bd2:	4603      	mov	r3, r0
 8007bd4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

  /**
   * Initialize Custom Template Application
   */
  Custom_APP_Init();
 8007bd8:	f000 fa9b 	bl	8008112 <Custom_APP_Init>
  /* USER CODE END APP_BLE_Init_3 */

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 8007bdc:	4b08      	ldr	r3, [pc, #32]	; (8007c00 <APP_BLE_Init+0xac>)
 8007bde:	2200      	movs	r2, #0
 8007be0:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 8007be2:	4b07      	ldr	r3, [pc, #28]	; (8007c00 <APP_BLE_Init+0xac>)
 8007be4:	2200      	movs	r2, #0
 8007be6:	761a      	strb	r2, [r3, #24]

  /**
   * Start to Advertise to be connected by a Client
   */
  Adv_Request(APP_BLE_FAST_ADV);
 8007be8:	2001      	movs	r0, #1
 8007bea:	f000 f997 	bl	8007f1c <Adv_Request>

  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */

  return;
 8007bee:	bf00      	nop
}
 8007bf0:	3740      	adds	r7, #64	; 0x40
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	bdb0      	pop	{r4, r5, r7, pc}
 8007bf6:	bf00      	nop
 8007bf8:	08009c40 	.word	0x08009c40
 8007bfc:	08006f55 	.word	0x08006f55
 8007c00:	20000bdc 	.word	0x20000bdc
 8007c04:	08008005 	.word	0x08008005

08007c08 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b08a      	sub	sp, #40	; 0x28
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
  hci_event_pckt    *p_event_pckt;
  evt_le_meta_event *p_meta_evt;
  evt_blecore_aci   *p_blecore_evt;
  tBleStatus        ret = BLE_STATUS_INVALID_PARAMS;
 8007c10:	2392      	movs	r3, #146	; 0x92
 8007c12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	3301      	adds	r3, #1
 8007c1a:	623b      	str	r3, [r7, #32]

  switch (p_event_pckt->evt)
 8007c1c:	6a3b      	ldr	r3, [r7, #32]
 8007c1e:	781b      	ldrb	r3, [r3, #0]
 8007c20:	2bff      	cmp	r3, #255	; 0xff
 8007c22:	d053      	beq.n	8007ccc <SVCCTL_App_Notification+0xc4>
 8007c24:	2bff      	cmp	r3, #255	; 0xff
 8007c26:	f300 80a1 	bgt.w	8007d6c <SVCCTL_App_Notification+0x164>
 8007c2a:	2b05      	cmp	r3, #5
 8007c2c:	d002      	beq.n	8007c34 <SVCCTL_App_Notification+0x2c>
 8007c2e:	2b3e      	cmp	r3, #62	; 0x3e
 8007c30:	d020      	beq.n	8007c74 <SVCCTL_App_Notification+0x6c>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 8007c32:	e09b      	b.n	8007d6c <SVCCTL_App_Notification+0x164>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
 8007c34:	6a3b      	ldr	r3, [r7, #32]
 8007c36:	3302      	adds	r3, #2
 8007c38:	60fb      	str	r3, [r7, #12]
      if (p_disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8007c40:	b29a      	uxth	r2, r3
 8007c42:	4b4e      	ldr	r3, [pc, #312]	; (8007d7c <SVCCTL_App_Notification+0x174>)
 8007c44:	8adb      	ldrh	r3, [r3, #22]
 8007c46:	429a      	cmp	r2, r3
 8007c48:	d106      	bne.n	8007c58 <SVCCTL_App_Notification+0x50>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 8007c4a:	4b4c      	ldr	r3, [pc, #304]	; (8007d7c <SVCCTL_App_Notification+0x174>)
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8007c50:	4b4a      	ldr	r3, [pc, #296]	; (8007d7c <SVCCTL_App_Notification+0x174>)
 8007c52:	2200      	movs	r2, #0
 8007c54:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
      Adv_Request(APP_BLE_FAST_ADV);
 8007c58:	2001      	movs	r0, #1
 8007c5a:	f000 f95f 	bl	8007f1c <Adv_Request>
      HandleNotification.Custom_Evt_Opcode = CUSTOM_DISCON_HANDLE_EVT;
 8007c5e:	4b48      	ldr	r3, [pc, #288]	; (8007d80 <SVCCTL_App_Notification+0x178>)
 8007c60:	2201      	movs	r2, #1
 8007c62:	701a      	strb	r2, [r3, #0]
      HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8007c64:	4b45      	ldr	r3, [pc, #276]	; (8007d7c <SVCCTL_App_Notification+0x174>)
 8007c66:	8ada      	ldrh	r2, [r3, #22]
 8007c68:	4b45      	ldr	r3, [pc, #276]	; (8007d80 <SVCCTL_App_Notification+0x178>)
 8007c6a:	805a      	strh	r2, [r3, #2]
      Custom_APP_Notification(&HandleNotification);
 8007c6c:	4844      	ldr	r0, [pc, #272]	; (8007d80 <SVCCTL_App_Notification+0x178>)
 8007c6e:	f000 fa3c 	bl	80080ea <Custom_APP_Notification>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 8007c72:	e07e      	b.n	8007d72 <SVCCTL_App_Notification+0x16a>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 8007c74:	6a3b      	ldr	r3, [r7, #32]
 8007c76:	3302      	adds	r3, #2
 8007c78:	617b      	str	r3, [r7, #20]
      switch (p_meta_evt->subevent)
 8007c7a:	697b      	ldr	r3, [r7, #20]
 8007c7c:	781b      	ldrb	r3, [r3, #0]
 8007c7e:	2b01      	cmp	r3, #1
 8007c80:	d001      	beq.n	8007c86 <SVCCTL_App_Notification+0x7e>
 8007c82:	2b03      	cmp	r3, #3
          break;
 8007c84:	e021      	b.n	8007cca <SVCCTL_App_Notification+0xc2>
          p_connection_complete_event = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
 8007c86:	697b      	ldr	r3, [r7, #20]
 8007c88:	3301      	adds	r3, #1
 8007c8a:	613b      	str	r3, [r7, #16]
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 8007c8c:	4b3b      	ldr	r3, [pc, #236]	; (8007d7c <SVCCTL_App_Notification+0x174>)
 8007c8e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007c92:	2b04      	cmp	r3, #4
 8007c94:	d104      	bne.n	8007ca0 <SVCCTL_App_Notification+0x98>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 8007c96:	4b39      	ldr	r3, [pc, #228]	; (8007d7c <SVCCTL_App_Notification+0x174>)
 8007c98:	2206      	movs	r2, #6
 8007c9a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 8007c9e:	e003      	b.n	8007ca8 <SVCCTL_App_Notification+0xa0>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 8007ca0:	4b36      	ldr	r3, [pc, #216]	; (8007d7c <SVCCTL_App_Notification+0x174>)
 8007ca2:	2205      	movs	r2, #5
 8007ca4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_connection_complete_event->Connection_Handle;
 8007ca8:	693b      	ldr	r3, [r7, #16]
 8007caa:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8007cae:	b29a      	uxth	r2, r3
 8007cb0:	4b32      	ldr	r3, [pc, #200]	; (8007d7c <SVCCTL_App_Notification+0x174>)
 8007cb2:	82da      	strh	r2, [r3, #22]
          HandleNotification.Custom_Evt_Opcode = CUSTOM_CONN_HANDLE_EVT;
 8007cb4:	4b32      	ldr	r3, [pc, #200]	; (8007d80 <SVCCTL_App_Notification+0x178>)
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	701a      	strb	r2, [r3, #0]
          HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8007cba:	4b30      	ldr	r3, [pc, #192]	; (8007d7c <SVCCTL_App_Notification+0x174>)
 8007cbc:	8ada      	ldrh	r2, [r3, #22]
 8007cbe:	4b30      	ldr	r3, [pc, #192]	; (8007d80 <SVCCTL_App_Notification+0x178>)
 8007cc0:	805a      	strh	r2, [r3, #2]
          Custom_APP_Notification(&HandleNotification);
 8007cc2:	482f      	ldr	r0, [pc, #188]	; (8007d80 <SVCCTL_App_Notification+0x178>)
 8007cc4:	f000 fa11 	bl	80080ea <Custom_APP_Notification>
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 8007cc8:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 8007cca:	e052      	b.n	8007d72 <SVCCTL_App_Notification+0x16a>
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 8007ccc:	6a3b      	ldr	r3, [r7, #32]
 8007cce:	3302      	adds	r3, #2
 8007cd0:	61fb      	str	r3, [r7, #28]
      switch (p_blecore_evt->ecode)
 8007cd2:	69fb      	ldr	r3, [r7, #28]
 8007cd4:	881b      	ldrh	r3, [r3, #0]
 8007cd6:	b29b      	uxth	r3, r3
 8007cd8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007cdc:	d040      	beq.n	8007d60 <SVCCTL_App_Notification+0x158>
 8007cde:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ce2:	dc45      	bgt.n	8007d70 <SVCCTL_App_Notification+0x168>
 8007ce4:	2b04      	cmp	r3, #4
 8007ce6:	d03d      	beq.n	8007d64 <SVCCTL_App_Notification+0x15c>
 8007ce8:	2b04      	cmp	r3, #4
 8007cea:	db41      	blt.n	8007d70 <SVCCTL_App_Notification+0x168>
 8007cec:	f240 420a 	movw	r2, #1034	; 0x40a
 8007cf0:	4293      	cmp	r3, r2
 8007cf2:	dc3d      	bgt.n	8007d70 <SVCCTL_App_Notification+0x168>
 8007cf4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007cf8:	dd3a      	ble.n	8007d70 <SVCCTL_App_Notification+0x168>
 8007cfa:	f2a3 4301 	subw	r3, r3, #1025	; 0x401
 8007cfe:	2b09      	cmp	r3, #9
 8007d00:	d836      	bhi.n	8007d70 <SVCCTL_App_Notification+0x168>
 8007d02:	a201      	add	r2, pc, #4	; (adr r2, 8007d08 <SVCCTL_App_Notification+0x100>)
 8007d04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d08:	08007d59 	.word	0x08007d59
 8007d0c:	08007d31 	.word	0x08007d31
 8007d10:	08007d71 	.word	0x08007d71
 8007d14:	08007d71 	.word	0x08007d71
 8007d18:	08007d71 	.word	0x08007d71
 8007d1c:	08007d71 	.word	0x08007d71
 8007d20:	08007d69 	.word	0x08007d69
 8007d24:	08007d71 	.word	0x08007d71
 8007d28:	08007d45 	.word	0x08007d45
 8007d2c:	08007d69 	.word	0x08007d69
          ret = aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, CFG_FIXED_PIN);
 8007d30:	4b12      	ldr	r3, [pc, #72]	; (8007d7c <SVCCTL_App_Notification+0x174>)
 8007d32:	8adb      	ldrh	r3, [r3, #22]
 8007d34:	4913      	ldr	r1, [pc, #76]	; (8007d84 <SVCCTL_App_Notification+0x17c>)
 8007d36:	4618      	mov	r0, r3
 8007d38:	f7fe f822 	bl	8005d80 <aci_gap_pass_key_resp>
 8007d3c:	4603      	mov	r3, r0
 8007d3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          break;
 8007d42:	e012      	b.n	8007d6a <SVCCTL_App_Notification+0x162>
          ret = aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES);
 8007d44:	4b0d      	ldr	r3, [pc, #52]	; (8007d7c <SVCCTL_App_Notification+0x174>)
 8007d46:	8adb      	ldrh	r3, [r3, #22]
 8007d48:	2101      	movs	r1, #1
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	f7fe f9c2 	bl	80060d4 <aci_gap_numeric_comparison_value_confirm_yesno>
 8007d50:	4603      	mov	r3, r0
 8007d52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          break;
 8007d56:	e008      	b.n	8007d6a <SVCCTL_App_Notification+0x162>
          p_pairing_complete = (aci_gap_pairing_complete_event_rp0*)p_blecore_evt->data;
 8007d58:	69fb      	ldr	r3, [r7, #28]
 8007d5a:	3302      	adds	r3, #2
 8007d5c:	61bb      	str	r3, [r7, #24]
          break;
 8007d5e:	e004      	b.n	8007d6a <SVCCTL_App_Notification+0x162>
          break;
 8007d60:	bf00      	nop
 8007d62:	e005      	b.n	8007d70 <SVCCTL_App_Notification+0x168>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 8007d64:	bf00      	nop
 8007d66:	e003      	b.n	8007d70 <SVCCTL_App_Notification+0x168>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 8007d68:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8007d6a:	e001      	b.n	8007d70 <SVCCTL_App_Notification+0x168>
      break;
 8007d6c:	bf00      	nop
 8007d6e:	e000      	b.n	8007d72 <SVCCTL_App_Notification+0x16a>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8007d70:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 8007d72:	2301      	movs	r3, #1
}
 8007d74:	4618      	mov	r0, r3
 8007d76:	3728      	adds	r7, #40	; 0x28
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	bd80      	pop	{r7, pc}
 8007d7c:	20000bdc 	.word	0x20000bdc
 8007d80:	20000c60 	.word	0x20000c60
 8007d84:	0001b207 	.word	0x0001b207

08007d88 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b082      	sub	sp, #8
 8007d8c:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 8007d8e:	4b06      	ldr	r3, [pc, #24]	; (8007da8 <Ble_Tl_Init+0x20>)
 8007d90:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 8007d92:	4b06      	ldr	r3, [pc, #24]	; (8007dac <Ble_Tl_Init+0x24>)
 8007d94:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 8007d96:	463b      	mov	r3, r7
 8007d98:	4619      	mov	r1, r3
 8007d9a:	4805      	ldr	r0, [pc, #20]	; (8007db0 <Ble_Tl_Init+0x28>)
 8007d9c:	f7ff f8be 	bl	8006f1c <hci_init>

  return;
 8007da0:	bf00      	nop
}
 8007da2:	3708      	adds	r7, #8
 8007da4:	46bd      	mov	sp, r7
 8007da6:	bd80      	pop	{r7, pc}
 8007da8:	200300d8 	.word	0x200300d8
 8007dac:	080080b5 	.word	0x080080b5
 8007db0:	0800807d 	.word	0x0800807d

08007db4 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 8007db4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007db6:	b08d      	sub	sp, #52	; 0x34
 8007db8:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 8007dba:	2300      	movs	r3, #0
 8007dbc:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8007dbe:	2392      	movs	r3, #146	; 0x92
 8007dc0:	75fb      	strb	r3, [r7, #23]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 8007dc2:	f7fe fdda 	bl	800697a <hci_reset>
 8007dc6:	4603      	mov	r3, r0
 8007dc8:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 8007dca:	f000 f8d7 	bl	8007f7c <BleGetBdAddress>
 8007dce:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 8007dd0:	693a      	ldr	r2, [r7, #16]
 8007dd2:	2106      	movs	r1, #6
 8007dd4:	2000      	movs	r0, #0
 8007dd6:	f7fe fc90 	bl	80066fa <aci_hal_write_config_data>
 8007dda:	4603      	mov	r3, r0
 8007ddc:	75fb      	strb	r3, [r7, #23]
#endif /* CFG_BLE_ADDRESS_TYPE != GAP_PUBLIC_ADDR */

  /**
   * Write Identity root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 8007dde:	4a4a      	ldr	r2, [pc, #296]	; (8007f08 <Ble_Hci_Gap_Gatt_Init+0x154>)
 8007de0:	2110      	movs	r1, #16
 8007de2:	2018      	movs	r0, #24
 8007de4:	f7fe fc89 	bl	80066fa <aci_hal_write_config_data>
 8007de8:	4603      	mov	r3, r0
 8007dea:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 8007dec:	4a47      	ldr	r2, [pc, #284]	; (8007f0c <Ble_Hci_Gap_Gatt_Init+0x158>)
 8007dee:	2110      	movs	r1, #16
 8007df0:	2008      	movs	r0, #8
 8007df2:	f7fe fc82 	bl	80066fa <aci_hal_write_config_data>
 8007df6:	4603      	mov	r3, r0
 8007df8:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 8007dfa:	2118      	movs	r1, #24
 8007dfc:	2001      	movs	r0, #1
 8007dfe:	f7fe fd01 	bl	8006804 <aci_hal_set_tx_power_level>
 8007e02:	4603      	mov	r3, r0
 8007e04:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 8007e06:	f7fe f9cc 	bl	80061a2 <aci_gatt_init>
 8007e0a:	4603      	mov	r3, r0
 8007e0c:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 8007e0e:	2300      	movs	r3, #0
 8007e10:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 8007e12:	7bfb      	ldrb	r3, [r7, #15]
 8007e14:	f043 0301 	orr.w	r3, r3, #1
 8007e18:	73fb      	strb	r3, [r7, #15]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  if (role > 0)
 8007e1a:	7bfb      	ldrb	r3, [r7, #15]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d01f      	beq.n	8007e60 <Ble_Hci_Gap_Gatt_Init+0xac>
  {
    const char *name = CFG_GAP_DEVICE_NAME;
 8007e20:	4b3b      	ldr	r3, [pc, #236]	; (8007f10 <Ble_Hci_Gap_Gatt_Init+0x15c>)
 8007e22:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 8007e24:	1dba      	adds	r2, r7, #6
 8007e26:	7bf8      	ldrb	r0, [r7, #15]
 8007e28:	1cbb      	adds	r3, r7, #2
 8007e2a:	9301      	str	r3, [sp, #4]
 8007e2c:	1d3b      	adds	r3, r7, #4
 8007e2e:	9300      	str	r3, [sp, #0]
 8007e30:	4613      	mov	r3, r2
 8007e32:	2208      	movs	r2, #8
 8007e34:	2100      	movs	r1, #0
 8007e36:	f7fe f80a 	bl	8005e4e <aci_gap_init>
 8007e3a:	4603      	mov	r3, r0
 8007e3c:	75fb      	strb	r3, [r7, #23]
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 8007e3e:	88fc      	ldrh	r4, [r7, #6]
 8007e40:	88bd      	ldrh	r5, [r7, #4]
 8007e42:	68b8      	ldr	r0, [r7, #8]
 8007e44:	f7f8 f99c 	bl	8000180 <strlen>
 8007e48:	4603      	mov	r3, r0
 8007e4a:	b2da      	uxtb	r2, r3
 8007e4c:	68bb      	ldr	r3, [r7, #8]
 8007e4e:	9300      	str	r3, [sp, #0]
 8007e50:	4613      	mov	r3, r2
 8007e52:	2200      	movs	r2, #0
 8007e54:	4629      	mov	r1, r5
 8007e56:	4620      	mov	r0, r4
 8007e58:	f7fe fba6 	bl	80065a8 <aci_gatt_update_char_value>
 8007e5c:	4603      	mov	r3, r0
 8007e5e:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 8007e60:	88f8      	ldrh	r0, [r7, #6]
 8007e62:	8879      	ldrh	r1, [r7, #2]
 8007e64:	463b      	mov	r3, r7
 8007e66:	9300      	str	r3, [sp, #0]
 8007e68:	2302      	movs	r3, #2
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	f7fe fb9c 	bl	80065a8 <aci_gatt_update_char_value>
 8007e70:	4603      	mov	r3, r0
 8007e72:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize Default PHY
   */
  ret = hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 8007e74:	2202      	movs	r2, #2
 8007e76:	2102      	movs	r1, #2
 8007e78:	2000      	movs	r0, #0
 8007e7a:	f7fe fda2 	bl	80069c2 <hci_le_set_default_phy>
 8007e7e:	4603      	mov	r3, r0
 8007e80:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 8007e82:	4b24      	ldr	r3, [pc, #144]	; (8007f14 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8007e84:	2201      	movs	r2, #1
 8007e86:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 8007e88:	4b22      	ldr	r3, [pc, #136]	; (8007f14 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8007e8a:	781b      	ldrb	r3, [r3, #0]
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	f7fd fe5f 	bl	8005b50 <aci_gap_set_io_capability>
 8007e92:	4603      	mov	r3, r0
 8007e94:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 8007e96:	4b1f      	ldr	r3, [pc, #124]	; (8007f14 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8007e98:	2201      	movs	r2, #1
 8007e9a:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 8007e9c:	4b1d      	ldr	r3, [pc, #116]	; (8007f14 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8007e9e:	2208      	movs	r2, #8
 8007ea0:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 8007ea2:	4b1c      	ldr	r3, [pc, #112]	; (8007f14 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8007ea4:	2210      	movs	r2, #16
 8007ea6:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 8007ea8:	4b1a      	ldr	r3, [pc, #104]	; (8007f14 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8007eaa:	2200      	movs	r2, #0
 8007eac:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 8007eae:	4b19      	ldr	r3, [pc, #100]	; (8007f14 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8007eb0:	4a19      	ldr	r2, [pc, #100]	; (8007f18 <Ble_Hci_Gap_Gatt_Init+0x164>)
 8007eb2:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 8007eb4:	4b17      	ldr	r3, [pc, #92]	; (8007f14 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 8007eba:	4b16      	ldr	r3, [pc, #88]	; (8007f14 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8007ebc:	789c      	ldrb	r4, [r3, #2]
 8007ebe:	4b15      	ldr	r3, [pc, #84]	; (8007f14 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8007ec0:	785d      	ldrb	r5, [r3, #1]
 8007ec2:	4b14      	ldr	r3, [pc, #80]	; (8007f14 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8007ec4:	791b      	ldrb	r3, [r3, #4]
 8007ec6:	4a13      	ldr	r2, [pc, #76]	; (8007f14 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8007ec8:	7952      	ldrb	r2, [r2, #5]
 8007eca:	4912      	ldr	r1, [pc, #72]	; (8007f14 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8007ecc:	78c9      	ldrb	r1, [r1, #3]
 8007ece:	4811      	ldr	r0, [pc, #68]	; (8007f14 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8007ed0:	6880      	ldr	r0, [r0, #8]
 8007ed2:	2600      	movs	r6, #0
 8007ed4:	9604      	str	r6, [sp, #16]
 8007ed6:	9003      	str	r0, [sp, #12]
 8007ed8:	9102      	str	r1, [sp, #8]
 8007eda:	9201      	str	r2, [sp, #4]
 8007edc:	9300      	str	r3, [sp, #0]
 8007ede:	2300      	movs	r3, #0
 8007ee0:	2201      	movs	r2, #1
 8007ee2:	4629      	mov	r1, r5
 8007ee4:	4620      	mov	r0, r4
 8007ee6:	f7fd fe87 	bl	8005bf8 <aci_gap_set_authentication_requirement>
 8007eea:	4603      	mov	r3, r0
 8007eec:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 8007eee:	4b09      	ldr	r3, [pc, #36]	; (8007f14 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8007ef0:	789b      	ldrb	r3, [r3, #2]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d003      	beq.n	8007efe <Ble_Hci_Gap_Gatt_Init+0x14a>
  {
    ret = aci_gap_configure_whitelist();
 8007ef6:	f7fe f8c9 	bl	800608c <aci_gap_configure_whitelist>
 8007efa:	4603      	mov	r3, r0
 8007efc:	75fb      	strb	r3, [r7, #23]
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
}
 8007efe:	bf00      	nop
 8007f00:	371c      	adds	r7, #28
 8007f02:	46bd      	mov	sp, r7
 8007f04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f06:	bf00      	nop
 8007f08:	08009e88 	.word	0x08009e88
 8007f0c:	08009e98 	.word	0x08009e98
 8007f10:	08009c7c 	.word	0x08009c7c
 8007f14:	20000bdc 	.word	0x20000bdc
 8007f18:	0001b207 	.word	0x0001b207

08007f1c <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t NewStatus)
{
 8007f1c:	b580      	push	{r7, lr}
 8007f1e:	b08c      	sub	sp, #48	; 0x30
 8007f20:	af08      	add	r7, sp, #32
 8007f22:	4603      	mov	r3, r0
 8007f24:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8007f26:	2392      	movs	r3, #146	; 0x92
 8007f28:	73fb      	strb	r3, [r7, #15]

  BleApplicationContext.Device_Connection_Status = NewStatus;
 8007f2a:	4a12      	ldr	r2, [pc, #72]	; (8007f74 <Adv_Request+0x58>)
 8007f2c:	79fb      	ldrb	r3, [r7, #7]
 8007f2e:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
  /* Start Fast or Low Power Advertising */
  ret = aci_gap_set_discoverable(ADV_TYPE,
 8007f32:	2300      	movs	r3, #0
 8007f34:	9306      	str	r3, [sp, #24]
 8007f36:	2300      	movs	r3, #0
 8007f38:	9305      	str	r3, [sp, #20]
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	9304      	str	r3, [sp, #16]
 8007f3e:	2300      	movs	r3, #0
 8007f40:	9303      	str	r3, [sp, #12]
 8007f42:	2300      	movs	r3, #0
 8007f44:	9302      	str	r3, [sp, #8]
 8007f46:	2300      	movs	r3, #0
 8007f48:	9301      	str	r3, [sp, #4]
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	9300      	str	r3, [sp, #0]
 8007f4e:	2300      	movs	r3, #0
 8007f50:	22a0      	movs	r2, #160	; 0xa0
 8007f52:	2180      	movs	r1, #128	; 0x80
 8007f54:	2000      	movs	r0, #0
 8007f56:	f7fd fd01 	bl	800595c <aci_gap_set_discoverable>
 8007f5a:	4603      	mov	r3, r0
 8007f5c:	73fb      	strb	r3, [r7, #15]
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - Success\n");
  }

  /* Update Advertising data */
  ret = aci_gap_update_adv_data(sizeof(a_AdvData), (uint8_t*) a_AdvData);
 8007f5e:	4906      	ldr	r1, [pc, #24]	; (8007f78 <Adv_Request+0x5c>)
 8007f60:	2009      	movs	r0, #9
 8007f62:	f7fe f821 	bl	8005fa8 <aci_gap_update_adv_data>
 8007f66:	4603      	mov	r3, r0
 8007f68:	73fb      	strb	r3, [r7, #15]
  else
  {
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
  }

  return;
 8007f6a:	bf00      	nop
}
 8007f6c:	3710      	adds	r7, #16
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	bd80      	pop	{r7, pc}
 8007f72:	bf00      	nop
 8007f74:	20000bdc 	.word	0x20000bdc
 8007f78:	20000014 	.word	0x20000014

08007f7c <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b086      	sub	sp, #24
 8007f80:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 8007f82:	f7ff fdc3 	bl	8007b0c <LL_FLASH_GetUDN>
 8007f86:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 8007f88:	693b      	ldr	r3, [r7, #16]
 8007f8a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007f8e:	d023      	beq.n	8007fd8 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 8007f90:	f7ff fdd4 	bl	8007b3c <LL_FLASH_GetSTCompanyID>
 8007f94:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 8007f96:	f7ff fdc5 	bl	8007b24 <LL_FLASH_GetDeviceID>
 8007f9a:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 8007f9c:	693b      	ldr	r3, [r7, #16]
 8007f9e:	b2da      	uxtb	r2, r3
 8007fa0:	4b16      	ldr	r3, [pc, #88]	; (8007ffc <BleGetBdAddress+0x80>)
 8007fa2:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 8007fa4:	693b      	ldr	r3, [r7, #16]
 8007fa6:	0a1b      	lsrs	r3, r3, #8
 8007fa8:	b2da      	uxtb	r2, r3
 8007faa:	4b14      	ldr	r3, [pc, #80]	; (8007ffc <BleGetBdAddress+0x80>)
 8007fac:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	b2da      	uxtb	r2, r3
 8007fb2:	4b12      	ldr	r3, [pc, #72]	; (8007ffc <BleGetBdAddress+0x80>)
 8007fb4:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 8007fb6:	68bb      	ldr	r3, [r7, #8]
 8007fb8:	b2da      	uxtb	r2, r3
 8007fba:	4b10      	ldr	r3, [pc, #64]	; (8007ffc <BleGetBdAddress+0x80>)
 8007fbc:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 8007fbe:	68bb      	ldr	r3, [r7, #8]
 8007fc0:	0a1b      	lsrs	r3, r3, #8
 8007fc2:	b2da      	uxtb	r2, r3
 8007fc4:	4b0d      	ldr	r3, [pc, #52]	; (8007ffc <BleGetBdAddress+0x80>)
 8007fc6:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 8007fc8:	68bb      	ldr	r3, [r7, #8]
 8007fca:	0c1b      	lsrs	r3, r3, #16
 8007fcc:	b2da      	uxtb	r2, r3
 8007fce:	4b0b      	ldr	r3, [pc, #44]	; (8007ffc <BleGetBdAddress+0x80>)
 8007fd0:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 8007fd2:	4b0a      	ldr	r3, [pc, #40]	; (8007ffc <BleGetBdAddress+0x80>)
 8007fd4:	617b      	str	r3, [r7, #20]
 8007fd6:	e00b      	b.n	8007ff0 <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 8007fd8:	2000      	movs	r0, #0
 8007fda:	f7ff fcb1 	bl	8007940 <OTP_Read>
 8007fde:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d002      	beq.n	8007fec <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	617b      	str	r3, [r7, #20]
 8007fea:	e001      	b.n	8007ff0 <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 8007fec:	4b04      	ldr	r3, [pc, #16]	; (8008000 <BleGetBdAddress+0x84>)
 8007fee:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 8007ff0:	697b      	ldr	r3, [r7, #20]
}
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	3718      	adds	r7, #24
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	bd80      	pop	{r7, pc}
 8007ffa:	bf00      	nop
 8007ffc:	20000bd4 	.word	0x20000bd4
 8008000:	08009e80 	.word	0x08009e80

08008004 <Adv_Cancel>:
 *
 * SPECIFIC FUNCTIONS FOR CUSTOM
 *
 *************************************************************/
static void Adv_Cancel(void)
{
 8008004:	b580      	push	{r7, lr}
 8008006:	b082      	sub	sp, #8
 8008008:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_1 */

  /* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 800800a:	4b0a      	ldr	r3, [pc, #40]	; (8008034 <Adv_Cancel+0x30>)
 800800c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008010:	2b05      	cmp	r3, #5
 8008012:	d00a      	beq.n	800802a <Adv_Cancel+0x26>
  {
    tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8008014:	2392      	movs	r3, #146	; 0x92
 8008016:	71fb      	strb	r3, [r7, #7]

    ret = aci_gap_set_non_discoverable();
 8008018:	f7fd fc7c 	bl	8005914 <aci_gap_set_non_discoverable>
 800801c:	4603      	mov	r3, r0
 800801e:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8008020:	4b04      	ldr	r3, [pc, #16]	; (8008034 <Adv_Cancel+0x30>)
 8008022:	2200      	movs	r2, #0
 8008024:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* USER CODE BEGIN Adv_Cancel_2 */

  /* USER CODE END Adv_Cancel_2 */

  return;
 8008028:	bf00      	nop
 800802a:	bf00      	nop
}
 800802c:	3708      	adds	r7, #8
 800802e:	46bd      	mov	sp, r7
 8008030:	bd80      	pop	{r7, pc}
 8008032:	bf00      	nop
 8008034:	20000bdc 	.word	0x20000bdc

08008038 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 8008038:	b580      	push	{r7, lr}
 800803a:	b082      	sub	sp, #8
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8008040:	2100      	movs	r1, #0
 8008042:	2002      	movs	r0, #2
 8008044:	f000 fcd6 	bl	80089f4 <UTIL_SEQ_SetTask>

  return;
 8008048:	bf00      	nop
}
 800804a:	3708      	adds	r7, #8
 800804c:	46bd      	mov	sp, r7
 800804e:	bd80      	pop	{r7, pc}

08008050 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 8008050:	b580      	push	{r7, lr}
 8008052:	b082      	sub	sp, #8
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8008058:	2001      	movs	r0, #1
 800805a:	f000 fd37 	bl	8008acc <UTIL_SEQ_SetEvt>

  return;
 800805e:	bf00      	nop
}
 8008060:	3708      	adds	r7, #8
 8008062:	46bd      	mov	sp, r7
 8008064:	bd80      	pop	{r7, pc}

08008066 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 8008066:	b580      	push	{r7, lr}
 8008068:	b082      	sub	sp, #8
 800806a:	af00      	add	r7, sp, #0
 800806c:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800806e:	2001      	movs	r0, #1
 8008070:	f000 fd4c 	bl	8008b0c <UTIL_SEQ_WaitEvt>

  return;
 8008074:	bf00      	nop
}
 8008076:	3708      	adds	r7, #8
 8008078:	46bd      	mov	sp, r7
 800807a:	bd80      	pop	{r7, pc}

0800807c <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 800807c:	b580      	push	{r7, lr}
 800807e:	b084      	sub	sp, #16
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	685b      	ldr	r3, [r3, #4]
 800808c:	3308      	adds	r3, #8
 800808e:	4618      	mov	r0, r3
 8008090:	f7fe fdfe 	bl	8006c90 <SVCCTL_UserEvtRx>
 8008094:	4603      	mov	r3, r0
 8008096:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 8008098:	7afb      	ldrb	r3, [r7, #11]
 800809a:	2b00      	cmp	r3, #0
 800809c:	d003      	beq.n	80080a6 <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	2201      	movs	r2, #1
 80080a2:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 80080a4:	e003      	b.n	80080ae <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	2200      	movs	r2, #0
 80080aa:	701a      	strb	r2, [r3, #0]
  return;
 80080ac:	bf00      	nop
}
 80080ae:	3710      	adds	r7, #16
 80080b0:	46bd      	mov	sp, r7
 80080b2:	bd80      	pop	{r7, pc}

080080b4 <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 80080b4:	b580      	push	{r7, lr}
 80080b6:	b084      	sub	sp, #16
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	4603      	mov	r3, r0
 80080bc:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 80080be:	79fb      	ldrb	r3, [r7, #7]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d002      	beq.n	80080ca <BLE_StatusNot+0x16>
 80080c4:	2b01      	cmp	r3, #1
 80080c6:	d006      	beq.n	80080d6 <BLE_StatusNot+0x22>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 80080c8:	e00b      	b.n	80080e2 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 80080ca:	2303      	movs	r3, #3
 80080cc:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 80080ce:	68f8      	ldr	r0, [r7, #12]
 80080d0:	f000 fcbc 	bl	8008a4c <UTIL_SEQ_PauseTask>
      break;
 80080d4:	e005      	b.n	80080e2 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 80080d6:	2303      	movs	r3, #3
 80080d8:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 80080da:	68f8      	ldr	r0, [r7, #12]
 80080dc:	f000 fcd6 	bl	8008a8c <UTIL_SEQ_ResumeTask>
      break;
 80080e0:	bf00      	nop
  }

  return;
 80080e2:	bf00      	nop
}
 80080e4:	3710      	adds	r7, #16
 80080e6:	46bd      	mov	sp, r7
 80080e8:	bd80      	pop	{r7, pc}

080080ea <Custom_APP_Notification>:
  /* USER CODE END CUSTOM_STM_App_Notification_2 */
  return;
}

void Custom_APP_Notification(Custom_App_ConnHandle_Not_evt_t *pNotification)
{
 80080ea:	b480      	push	{r7}
 80080ec:	b083      	sub	sp, #12
 80080ee:	af00      	add	r7, sp, #0
 80080f0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_APP_Notification_1 */

  /* USER CODE END CUSTOM_APP_Notification_1 */

  switch (pNotification->Custom_Evt_Opcode)
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	781b      	ldrb	r3, [r3, #0]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d002      	beq.n	8008100 <Custom_APP_Notification+0x16>
 80080fa:	2b01      	cmp	r3, #1
 80080fc:	d002      	beq.n	8008104 <Custom_APP_Notification+0x1a>

    default:
      /* USER CODE BEGIN CUSTOM_APP_Notification_default */

      /* USER CODE END CUSTOM_APP_Notification_default */
      break;
 80080fe:	e002      	b.n	8008106 <Custom_APP_Notification+0x1c>
      break;
 8008100:	bf00      	nop
 8008102:	e000      	b.n	8008106 <Custom_APP_Notification+0x1c>
      break;
 8008104:	bf00      	nop

  /* USER CODE BEGIN CUSTOM_APP_Notification_2 */

  /* USER CODE END CUSTOM_APP_Notification_2 */

  return;
 8008106:	bf00      	nop
}
 8008108:	370c      	adds	r7, #12
 800810a:	46bd      	mov	sp, r7
 800810c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008110:	4770      	bx	lr

08008112 <Custom_APP_Init>:

void Custom_APP_Init(void)
{
 8008112:	b480      	push	{r7}
 8008114:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CUSTOM_APP_Init */

  /* USER CODE END CUSTOM_APP_Init */
  return;
 8008116:	bf00      	nop
}
 8008118:	46bd      	mov	sp, r7
 800811a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811e:	4770      	bx	lr

08008120 <Custom_STM_Event_Handler>:
 8008120:	b480      	push	{r7}
 8008122:	b08b      	sub	sp, #44	; 0x2c
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]
 8008128:	2300      	movs	r3, #0
 800812a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	3301      	adds	r3, #1
 8008132:	623b      	str	r3, [r7, #32]
 8008134:	6a3b      	ldr	r3, [r7, #32]
 8008136:	781b      	ldrb	r3, [r3, #0]
 8008138:	2bff      	cmp	r3, #255	; 0xff
 800813a:	d12b      	bne.n	8008194 <Custom_STM_Event_Handler+0x74>
 800813c:	6a3b      	ldr	r3, [r7, #32]
 800813e:	3302      	adds	r3, #2
 8008140:	61fb      	str	r3, [r7, #28]
 8008142:	69fb      	ldr	r3, [r7, #28]
 8008144:	881b      	ldrh	r3, [r3, #0]
 8008146:	b29b      	uxth	r3, r3
 8008148:	f640 4214 	movw	r2, #3092	; 0xc14
 800814c:	4293      	cmp	r3, r2
 800814e:	d01b      	beq.n	8008188 <Custom_STM_Event_Handler+0x68>
 8008150:	f640 4214 	movw	r2, #3092	; 0xc14
 8008154:	4293      	cmp	r3, r2
 8008156:	dc19      	bgt.n	800818c <Custom_STM_Event_Handler+0x6c>
 8008158:	f640 4201 	movw	r2, #3073	; 0xc01
 800815c:	4293      	cmp	r3, r2
 800815e:	d003      	beq.n	8008168 <Custom_STM_Event_Handler+0x48>
 8008160:	f640 4213 	movw	r2, #3091	; 0xc13
 8008164:	4293      	cmp	r3, r2
 8008166:	e014      	b.n	8008192 <Custom_STM_Event_Handler+0x72>
 8008168:	69fb      	ldr	r3, [r7, #28]
 800816a:	3302      	adds	r3, #2
 800816c:	61bb      	str	r3, [r7, #24]
 800816e:	69bb      	ldr	r3, [r7, #24]
 8008170:	885b      	ldrh	r3, [r3, #2]
 8008172:	b29b      	uxth	r3, r3
 8008174:	461a      	mov	r2, r3
 8008176:	4b0c      	ldr	r3, [pc, #48]	; (80081a8 <Custom_STM_Event_Handler+0x88>)
 8008178:	885b      	ldrh	r3, [r3, #2]
 800817a:	3301      	adds	r3, #1
 800817c:	429a      	cmp	r2, r3
 800817e:	d107      	bne.n	8008190 <Custom_STM_Event_Handler+0x70>
 8008180:	2301      	movs	r3, #1
 8008182:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008186:	e003      	b.n	8008190 <Custom_STM_Event_Handler+0x70>
 8008188:	bf00      	nop
 800818a:	e004      	b.n	8008196 <Custom_STM_Event_Handler+0x76>
 800818c:	bf00      	nop
 800818e:	e002      	b.n	8008196 <Custom_STM_Event_Handler+0x76>
 8008190:	bf00      	nop
 8008192:	e000      	b.n	8008196 <Custom_STM_Event_Handler+0x76>
 8008194:	bf00      	nop
 8008196:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800819a:	4618      	mov	r0, r3
 800819c:	372c      	adds	r7, #44	; 0x2c
 800819e:	46bd      	mov	sp, r7
 80081a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a4:	4770      	bx	lr
 80081a6:	bf00      	nop
 80081a8:	20000c64 	.word	0x20000c64

080081ac <SVCCTL_InitCustomSvc>:
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b08c      	sub	sp, #48	; 0x30
 80081b0:	af06      	add	r7, sp, #24
 80081b2:	2392      	movs	r3, #146	; 0x92
 80081b4:	75fb      	strb	r3, [r7, #23]
 80081b6:	4834      	ldr	r0, [pc, #208]	; (8008288 <SVCCTL_InitCustomSvc+0xdc>)
 80081b8:	f7fe fd50 	bl	8006c5c <SVCCTL_RegisterSvcHandler>
 80081bc:	238f      	movs	r3, #143	; 0x8f
 80081be:	713b      	strb	r3, [r7, #4]
 80081c0:	23e5      	movs	r3, #229	; 0xe5
 80081c2:	717b      	strb	r3, [r7, #5]
 80081c4:	23b3      	movs	r3, #179	; 0xb3
 80081c6:	71bb      	strb	r3, [r7, #6]
 80081c8:	23d5      	movs	r3, #213	; 0xd5
 80081ca:	71fb      	strb	r3, [r7, #7]
 80081cc:	232e      	movs	r3, #46	; 0x2e
 80081ce:	723b      	strb	r3, [r7, #8]
 80081d0:	237f      	movs	r3, #127	; 0x7f
 80081d2:	727b      	strb	r3, [r7, #9]
 80081d4:	234a      	movs	r3, #74	; 0x4a
 80081d6:	72bb      	strb	r3, [r7, #10]
 80081d8:	2398      	movs	r3, #152	; 0x98
 80081da:	72fb      	strb	r3, [r7, #11]
 80081dc:	232a      	movs	r3, #42	; 0x2a
 80081de:	733b      	strb	r3, [r7, #12]
 80081e0:	2348      	movs	r3, #72	; 0x48
 80081e2:	737b      	strb	r3, [r7, #13]
 80081e4:	237a      	movs	r3, #122	; 0x7a
 80081e6:	73bb      	strb	r3, [r7, #14]
 80081e8:	23cc      	movs	r3, #204	; 0xcc
 80081ea:	73fb      	strb	r3, [r7, #15]
 80081ec:	2300      	movs	r3, #0
 80081ee:	743b      	strb	r3, [r7, #16]
 80081f0:	2300      	movs	r3, #0
 80081f2:	747b      	strb	r3, [r7, #17]
 80081f4:	2300      	movs	r3, #0
 80081f6:	74bb      	strb	r3, [r7, #18]
 80081f8:	2300      	movs	r3, #0
 80081fa:	74fb      	strb	r3, [r7, #19]
 80081fc:	1d39      	adds	r1, r7, #4
 80081fe:	4b23      	ldr	r3, [pc, #140]	; (800828c <SVCCTL_InitCustomSvc+0xe0>)
 8008200:	9300      	str	r3, [sp, #0]
 8008202:	2303      	movs	r3, #3
 8008204:	2201      	movs	r2, #1
 8008206:	2002      	movs	r0, #2
 8008208:	f7fd fff0 	bl	80061ec <aci_gatt_add_service>
 800820c:	4603      	mov	r3, r0
 800820e:	75fb      	strb	r3, [r7, #23]
 8008210:	2319      	movs	r3, #25
 8008212:	713b      	strb	r3, [r7, #4]
 8008214:	23ed      	movs	r3, #237	; 0xed
 8008216:	717b      	strb	r3, [r7, #5]
 8008218:	2382      	movs	r3, #130	; 0x82
 800821a:	71bb      	strb	r3, [r7, #6]
 800821c:	23ae      	movs	r3, #174	; 0xae
 800821e:	71fb      	strb	r3, [r7, #7]
 8008220:	23ed      	movs	r3, #237	; 0xed
 8008222:	723b      	strb	r3, [r7, #8]
 8008224:	2321      	movs	r3, #33	; 0x21
 8008226:	727b      	strb	r3, [r7, #9]
 8008228:	234c      	movs	r3, #76	; 0x4c
 800822a:	72bb      	strb	r3, [r7, #10]
 800822c:	239d      	movs	r3, #157	; 0x9d
 800822e:	72fb      	strb	r3, [r7, #11]
 8008230:	2341      	movs	r3, #65	; 0x41
 8008232:	733b      	strb	r3, [r7, #12]
 8008234:	2345      	movs	r3, #69	; 0x45
 8008236:	737b      	strb	r3, [r7, #13]
 8008238:	2322      	movs	r3, #34	; 0x22
 800823a:	73bb      	strb	r3, [r7, #14]
 800823c:	238e      	movs	r3, #142	; 0x8e
 800823e:	73fb      	strb	r3, [r7, #15]
 8008240:	2300      	movs	r3, #0
 8008242:	743b      	strb	r3, [r7, #16]
 8008244:	2300      	movs	r3, #0
 8008246:	747b      	strb	r3, [r7, #17]
 8008248:	2300      	movs	r3, #0
 800824a:	74bb      	strb	r3, [r7, #18]
 800824c:	2300      	movs	r3, #0
 800824e:	74fb      	strb	r3, [r7, #19]
 8008250:	4b0e      	ldr	r3, [pc, #56]	; (800828c <SVCCTL_InitCustomSvc+0xe0>)
 8008252:	8818      	ldrh	r0, [r3, #0]
 8008254:	4b0e      	ldr	r3, [pc, #56]	; (8008290 <SVCCTL_InitCustomSvc+0xe4>)
 8008256:	781b      	ldrb	r3, [r3, #0]
 8008258:	b29b      	uxth	r3, r3
 800825a:	1d3a      	adds	r2, r7, #4
 800825c:	490d      	ldr	r1, [pc, #52]	; (8008294 <SVCCTL_InitCustomSvc+0xe8>)
 800825e:	9105      	str	r1, [sp, #20]
 8008260:	2100      	movs	r1, #0
 8008262:	9104      	str	r1, [sp, #16]
 8008264:	2110      	movs	r1, #16
 8008266:	9103      	str	r1, [sp, #12]
 8008268:	2101      	movs	r1, #1
 800826a:	9102      	str	r1, [sp, #8]
 800826c:	2100      	movs	r1, #0
 800826e:	9101      	str	r1, [sp, #4]
 8008270:	2108      	movs	r1, #8
 8008272:	9100      	str	r1, [sp, #0]
 8008274:	2102      	movs	r1, #2
 8008276:	f7fe f88f 	bl	8006398 <aci_gatt_add_char>
 800827a:	4603      	mov	r3, r0
 800827c:	75fb      	strb	r3, [r7, #23]
 800827e:	bf00      	nop
 8008280:	3718      	adds	r7, #24
 8008282:	46bd      	mov	sp, r7
 8008284:	bd80      	pop	{r7, pc}
 8008286:	bf00      	nop
 8008288:	08008121 	.word	0x08008121
 800828c:	20000c64 	.word	0x20000c64
 8008290:	2000001d 	.word	0x2000001d
 8008294:	20000c66 	.word	0x20000c66

08008298 <LL_PWR_EnableBootC2>:
 8008298:	b480      	push	{r7}
 800829a:	af00      	add	r7, sp, #0
 800829c:	4b05      	ldr	r3, [pc, #20]	; (80082b4 <LL_PWR_EnableBootC2+0x1c>)
 800829e:	68db      	ldr	r3, [r3, #12]
 80082a0:	4a04      	ldr	r2, [pc, #16]	; (80082b4 <LL_PWR_EnableBootC2+0x1c>)
 80082a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80082a6:	60d3      	str	r3, [r2, #12]
 80082a8:	bf00      	nop
 80082aa:	46bd      	mov	sp, r7
 80082ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b0:	4770      	bx	lr
 80082b2:	bf00      	nop
 80082b4:	58000400 	.word	0x58000400

080082b8 <LL_C2_EXTI_EnableEvent_32_63>:
 80082b8:	b480      	push	{r7}
 80082ba:	b083      	sub	sp, #12
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
 80082c0:	4b06      	ldr	r3, [pc, #24]	; (80082dc <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 80082c2:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 80082c6:	4905      	ldr	r1, [pc, #20]	; (80082dc <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	4313      	orrs	r3, r2
 80082cc:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
 80082d0:	bf00      	nop
 80082d2:	370c      	adds	r7, #12
 80082d4:	46bd      	mov	sp, r7
 80082d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082da:	4770      	bx	lr
 80082dc:	58000800 	.word	0x58000800

080082e0 <LL_EXTI_EnableRisingTrig_32_63>:
 80082e0:	b480      	push	{r7}
 80082e2:	b083      	sub	sp, #12
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	6078      	str	r0, [r7, #4]
 80082e8:	4b05      	ldr	r3, [pc, #20]	; (8008300 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80082ea:	6a1a      	ldr	r2, [r3, #32]
 80082ec:	4904      	ldr	r1, [pc, #16]	; (8008300 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	4313      	orrs	r3, r2
 80082f2:	620b      	str	r3, [r1, #32]
 80082f4:	bf00      	nop
 80082f6:	370c      	adds	r7, #12
 80082f8:	46bd      	mov	sp, r7
 80082fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fe:	4770      	bx	lr
 8008300:	58000800 	.word	0x58000800

08008304 <LL_AHB3_GRP1_EnableClock>:
 8008304:	b480      	push	{r7}
 8008306:	b085      	sub	sp, #20
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
 800830c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008310:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008312:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	4313      	orrs	r3, r2
 800831a:	650b      	str	r3, [r1, #80]	; 0x50
 800831c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008320:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	4013      	ands	r3, r2
 8008326:	60fb      	str	r3, [r7, #12]
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	bf00      	nop
 800832c:	3714      	adds	r7, #20
 800832e:	46bd      	mov	sp, r7
 8008330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008334:	4770      	bx	lr

08008336 <LL_C2_AHB3_GRP1_EnableClock>:
 8008336:	b480      	push	{r7}
 8008338:	b085      	sub	sp, #20
 800833a:	af00      	add	r7, sp, #0
 800833c:	6078      	str	r0, [r7, #4]
 800833e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008342:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8008346:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	4313      	orrs	r3, r2
 800834e:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
 8008352:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008356:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	4013      	ands	r3, r2
 800835e:	60fb      	str	r3, [r7, #12]
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	bf00      	nop
 8008364:	3714      	adds	r7, #20
 8008366:	46bd      	mov	sp, r7
 8008368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836c:	4770      	bx	lr

0800836e <LL_C1_IPCC_EnableIT_TXF>:
 800836e:	b480      	push	{r7}
 8008370:	b083      	sub	sp, #12
 8008372:	af00      	add	r7, sp, #0
 8008374:	6078      	str	r0, [r7, #4]
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	601a      	str	r2, [r3, #0]
 8008382:	bf00      	nop
 8008384:	370c      	adds	r7, #12
 8008386:	46bd      	mov	sp, r7
 8008388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838c:	4770      	bx	lr

0800838e <LL_C1_IPCC_EnableIT_RXO>:
 800838e:	b480      	push	{r7}
 8008390:	b083      	sub	sp, #12
 8008392:	af00      	add	r7, sp, #0
 8008394:	6078      	str	r0, [r7, #4]
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	f043 0201 	orr.w	r2, r3, #1
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	601a      	str	r2, [r3, #0]
 80083a2:	bf00      	nop
 80083a4:	370c      	adds	r7, #12
 80083a6:	46bd      	mov	sp, r7
 80083a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ac:	4770      	bx	lr

080083ae <LL_C1_IPCC_EnableTransmitChannel>:
 80083ae:	b480      	push	{r7}
 80083b0:	b083      	sub	sp, #12
 80083b2:	af00      	add	r7, sp, #0
 80083b4:	6078      	str	r0, [r7, #4]
 80083b6:	6039      	str	r1, [r7, #0]
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	685a      	ldr	r2, [r3, #4]
 80083bc:	683b      	ldr	r3, [r7, #0]
 80083be:	041b      	lsls	r3, r3, #16
 80083c0:	43db      	mvns	r3, r3
 80083c2:	401a      	ands	r2, r3
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	605a      	str	r2, [r3, #4]
 80083c8:	bf00      	nop
 80083ca:	370c      	adds	r7, #12
 80083cc:	46bd      	mov	sp, r7
 80083ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d2:	4770      	bx	lr

080083d4 <LL_C1_IPCC_DisableTransmitChannel>:
 80083d4:	b480      	push	{r7}
 80083d6:	b083      	sub	sp, #12
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
 80083dc:	6039      	str	r1, [r7, #0]
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	685a      	ldr	r2, [r3, #4]
 80083e2:	683b      	ldr	r3, [r7, #0]
 80083e4:	041b      	lsls	r3, r3, #16
 80083e6:	431a      	orrs	r2, r3
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	605a      	str	r2, [r3, #4]
 80083ec:	bf00      	nop
 80083ee:	370c      	adds	r7, #12
 80083f0:	46bd      	mov	sp, r7
 80083f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f6:	4770      	bx	lr

080083f8 <LL_C1_IPCC_EnableReceiveChannel>:
 80083f8:	b480      	push	{r7}
 80083fa:	b083      	sub	sp, #12
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
 8008400:	6039      	str	r1, [r7, #0]
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	685a      	ldr	r2, [r3, #4]
 8008406:	683b      	ldr	r3, [r7, #0]
 8008408:	43db      	mvns	r3, r3
 800840a:	401a      	ands	r2, r3
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	605a      	str	r2, [r3, #4]
 8008410:	bf00      	nop
 8008412:	370c      	adds	r7, #12
 8008414:	46bd      	mov	sp, r7
 8008416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841a:	4770      	bx	lr

0800841c <LL_C1_IPCC_ClearFlag_CHx>:
 800841c:	b480      	push	{r7}
 800841e:	b083      	sub	sp, #12
 8008420:	af00      	add	r7, sp, #0
 8008422:	6078      	str	r0, [r7, #4]
 8008424:	6039      	str	r1, [r7, #0]
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	683a      	ldr	r2, [r7, #0]
 800842a:	609a      	str	r2, [r3, #8]
 800842c:	bf00      	nop
 800842e:	370c      	adds	r7, #12
 8008430:	46bd      	mov	sp, r7
 8008432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008436:	4770      	bx	lr

08008438 <LL_C1_IPCC_SetFlag_CHx>:
 8008438:	b480      	push	{r7}
 800843a:	b083      	sub	sp, #12
 800843c:	af00      	add	r7, sp, #0
 800843e:	6078      	str	r0, [r7, #4]
 8008440:	6039      	str	r1, [r7, #0]
 8008442:	683b      	ldr	r3, [r7, #0]
 8008444:	041a      	lsls	r2, r3, #16
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	609a      	str	r2, [r3, #8]
 800844a:	bf00      	nop
 800844c:	370c      	adds	r7, #12
 800844e:	46bd      	mov	sp, r7
 8008450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008454:	4770      	bx	lr

08008456 <LL_C1_IPCC_IsActiveFlag_CHx>:
 8008456:	b480      	push	{r7}
 8008458:	b083      	sub	sp, #12
 800845a:	af00      	add	r7, sp, #0
 800845c:	6078      	str	r0, [r7, #4]
 800845e:	6039      	str	r1, [r7, #0]
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	68da      	ldr	r2, [r3, #12]
 8008464:	683b      	ldr	r3, [r7, #0]
 8008466:	4013      	ands	r3, r2
 8008468:	683a      	ldr	r2, [r7, #0]
 800846a:	429a      	cmp	r2, r3
 800846c:	d101      	bne.n	8008472 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 800846e:	2301      	movs	r3, #1
 8008470:	e000      	b.n	8008474 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 8008472:	2300      	movs	r3, #0
 8008474:	4618      	mov	r0, r3
 8008476:	370c      	adds	r7, #12
 8008478:	46bd      	mov	sp, r7
 800847a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847e:	4770      	bx	lr

08008480 <LL_C2_IPCC_IsActiveFlag_CHx>:
 8008480:	b480      	push	{r7}
 8008482:	b083      	sub	sp, #12
 8008484:	af00      	add	r7, sp, #0
 8008486:	6078      	str	r0, [r7, #4]
 8008488:	6039      	str	r1, [r7, #0]
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	69da      	ldr	r2, [r3, #28]
 800848e:	683b      	ldr	r3, [r7, #0]
 8008490:	4013      	ands	r3, r2
 8008492:	683a      	ldr	r2, [r7, #0]
 8008494:	429a      	cmp	r2, r3
 8008496:	d101      	bne.n	800849c <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 8008498:	2301      	movs	r3, #1
 800849a:	e000      	b.n	800849e <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 800849c:	2300      	movs	r3, #0
 800849e:	4618      	mov	r0, r3
 80084a0:	370c      	adds	r7, #12
 80084a2:	46bd      	mov	sp, r7
 80084a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a8:	4770      	bx	lr
	...

080084ac <HW_IPCC_Rx_Handler>:
 80084ac:	b580      	push	{r7, lr}
 80084ae:	af00      	add	r7, sp, #0
 80084b0:	2102      	movs	r1, #2
 80084b2:	4819      	ldr	r0, [pc, #100]	; (8008518 <HW_IPCC_Rx_Handler+0x6c>)
 80084b4:	f7ff ffe4 	bl	8008480 <LL_C2_IPCC_IsActiveFlag_CHx>
 80084b8:	4603      	mov	r3, r0
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d009      	beq.n	80084d2 <HW_IPCC_Rx_Handler+0x26>
 80084be:	4b16      	ldr	r3, [pc, #88]	; (8008518 <HW_IPCC_Rx_Handler+0x6c>)
 80084c0:	685b      	ldr	r3, [r3, #4]
 80084c2:	43db      	mvns	r3, r3
 80084c4:	f003 0302 	and.w	r3, r3, #2
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d002      	beq.n	80084d2 <HW_IPCC_Rx_Handler+0x26>
 80084cc:	f000 f8da 	bl	8008684 <HW_IPCC_SYS_EvtHandler>
 80084d0:	e01f      	b.n	8008512 <HW_IPCC_Rx_Handler+0x66>
 80084d2:	2101      	movs	r1, #1
 80084d4:	4810      	ldr	r0, [pc, #64]	; (8008518 <HW_IPCC_Rx_Handler+0x6c>)
 80084d6:	f7ff ffd3 	bl	8008480 <LL_C2_IPCC_IsActiveFlag_CHx>
 80084da:	4603      	mov	r3, r0
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d008      	beq.n	80084f2 <HW_IPCC_Rx_Handler+0x46>
 80084e0:	4b0d      	ldr	r3, [pc, #52]	; (8008518 <HW_IPCC_Rx_Handler+0x6c>)
 80084e2:	685b      	ldr	r3, [r3, #4]
 80084e4:	f003 0301 	and.w	r3, r3, #1
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d102      	bne.n	80084f2 <HW_IPCC_Rx_Handler+0x46>
 80084ec:	f000 f88e 	bl	800860c <HW_IPCC_BLE_EvtHandler>
 80084f0:	e00f      	b.n	8008512 <HW_IPCC_Rx_Handler+0x66>
 80084f2:	2108      	movs	r1, #8
 80084f4:	4808      	ldr	r0, [pc, #32]	; (8008518 <HW_IPCC_Rx_Handler+0x6c>)
 80084f6:	f7ff ffc3 	bl	8008480 <LL_C2_IPCC_IsActiveFlag_CHx>
 80084fa:	4603      	mov	r3, r0
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d009      	beq.n	8008514 <HW_IPCC_Rx_Handler+0x68>
 8008500:	4b05      	ldr	r3, [pc, #20]	; (8008518 <HW_IPCC_Rx_Handler+0x6c>)
 8008502:	685b      	ldr	r3, [r3, #4]
 8008504:	43db      	mvns	r3, r3
 8008506:	f003 0308 	and.w	r3, r3, #8
 800850a:	2b00      	cmp	r3, #0
 800850c:	d002      	beq.n	8008514 <HW_IPCC_Rx_Handler+0x68>
 800850e:	f000 f905 	bl	800871c <HW_IPCC_TRACES_EvtHandler>
 8008512:	bf00      	nop
 8008514:	bf00      	nop
 8008516:	bd80      	pop	{r7, pc}
 8008518:	58000c00 	.word	0x58000c00

0800851c <HW_IPCC_Tx_Handler>:
 800851c:	b580      	push	{r7, lr}
 800851e:	af00      	add	r7, sp, #0
 8008520:	2102      	movs	r1, #2
 8008522:	481a      	ldr	r0, [pc, #104]	; (800858c <HW_IPCC_Tx_Handler+0x70>)
 8008524:	f7ff ff97 	bl	8008456 <LL_C1_IPCC_IsActiveFlag_CHx>
 8008528:	4603      	mov	r3, r0
 800852a:	2b00      	cmp	r3, #0
 800852c:	d109      	bne.n	8008542 <HW_IPCC_Tx_Handler+0x26>
 800852e:	4b17      	ldr	r3, [pc, #92]	; (800858c <HW_IPCC_Tx_Handler+0x70>)
 8008530:	685b      	ldr	r3, [r3, #4]
 8008532:	43db      	mvns	r3, r3
 8008534:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008538:	2b00      	cmp	r3, #0
 800853a:	d002      	beq.n	8008542 <HW_IPCC_Tx_Handler+0x26>
 800853c:	f000 f896 	bl	800866c <HW_IPCC_SYS_CmdEvtHandler>
 8008540:	e020      	b.n	8008584 <HW_IPCC_Tx_Handler+0x68>
 8008542:	2108      	movs	r1, #8
 8008544:	4811      	ldr	r0, [pc, #68]	; (800858c <HW_IPCC_Tx_Handler+0x70>)
 8008546:	f7ff ff86 	bl	8008456 <LL_C1_IPCC_IsActiveFlag_CHx>
 800854a:	4603      	mov	r3, r0
 800854c:	2b00      	cmp	r3, #0
 800854e:	d109      	bne.n	8008564 <HW_IPCC_Tx_Handler+0x48>
 8008550:	4b0e      	ldr	r3, [pc, #56]	; (800858c <HW_IPCC_Tx_Handler+0x70>)
 8008552:	685b      	ldr	r3, [r3, #4]
 8008554:	43db      	mvns	r3, r3
 8008556:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800855a:	2b00      	cmp	r3, #0
 800855c:	d002      	beq.n	8008564 <HW_IPCC_Tx_Handler+0x48>
 800855e:	f000 f8bf 	bl	80086e0 <HW_IPCC_MM_FreeBufHandler>
 8008562:	e00f      	b.n	8008584 <HW_IPCC_Tx_Handler+0x68>
 8008564:	2120      	movs	r1, #32
 8008566:	4809      	ldr	r0, [pc, #36]	; (800858c <HW_IPCC_Tx_Handler+0x70>)
 8008568:	f7ff ff75 	bl	8008456 <LL_C1_IPCC_IsActiveFlag_CHx>
 800856c:	4603      	mov	r3, r0
 800856e:	2b00      	cmp	r3, #0
 8008570:	d109      	bne.n	8008586 <HW_IPCC_Tx_Handler+0x6a>
 8008572:	4b06      	ldr	r3, [pc, #24]	; (800858c <HW_IPCC_Tx_Handler+0x70>)
 8008574:	685b      	ldr	r3, [r3, #4]
 8008576:	43db      	mvns	r3, r3
 8008578:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800857c:	2b00      	cmp	r3, #0
 800857e:	d002      	beq.n	8008586 <HW_IPCC_Tx_Handler+0x6a>
 8008580:	f000 f850 	bl	8008624 <HW_IPCC_BLE_AclDataEvtHandler>
 8008584:	bf00      	nop
 8008586:	bf00      	nop
 8008588:	bd80      	pop	{r7, pc}
 800858a:	bf00      	nop
 800858c:	58000c00 	.word	0x58000c00

08008590 <HW_IPCC_Enable>:
 8008590:	b580      	push	{r7, lr}
 8008592:	af00      	add	r7, sp, #0
 8008594:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8008598:	f7ff fecd 	bl	8008336 <LL_C2_AHB3_GRP1_EnableClock>
 800859c:	f44f 7000 	mov.w	r0, #512	; 0x200
 80085a0:	f7ff fe9e 	bl	80082e0 <LL_EXTI_EnableRisingTrig_32_63>
 80085a4:	f44f 7000 	mov.w	r0, #512	; 0x200
 80085a8:	f7ff fe86 	bl	80082b8 <LL_C2_EXTI_EnableEvent_32_63>
 80085ac:	bf40      	sev
 80085ae:	bf20      	wfe
 80085b0:	f7ff fe72 	bl	8008298 <LL_PWR_EnableBootC2>
 80085b4:	bf00      	nop
 80085b6:	bd80      	pop	{r7, pc}

080085b8 <HW_IPCC_Init>:
 80085b8:	b580      	push	{r7, lr}
 80085ba:	af00      	add	r7, sp, #0
 80085bc:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80085c0:	f7ff fea0 	bl	8008304 <LL_AHB3_GRP1_EnableClock>
 80085c4:	4806      	ldr	r0, [pc, #24]	; (80085e0 <HW_IPCC_Init+0x28>)
 80085c6:	f7ff fee2 	bl	800838e <LL_C1_IPCC_EnableIT_RXO>
 80085ca:	4805      	ldr	r0, [pc, #20]	; (80085e0 <HW_IPCC_Init+0x28>)
 80085cc:	f7ff fecf 	bl	800836e <LL_C1_IPCC_EnableIT_TXF>
 80085d0:	202c      	movs	r0, #44	; 0x2c
 80085d2:	f7fa f81e 	bl	8002612 <HAL_NVIC_EnableIRQ>
 80085d6:	202d      	movs	r0, #45	; 0x2d
 80085d8:	f7fa f81b 	bl	8002612 <HAL_NVIC_EnableIRQ>
 80085dc:	bf00      	nop
 80085de:	bd80      	pop	{r7, pc}
 80085e0:	58000c00 	.word	0x58000c00

080085e4 <HW_IPCC_BLE_Init>:
 80085e4:	b580      	push	{r7, lr}
 80085e6:	af00      	add	r7, sp, #0
 80085e8:	2101      	movs	r1, #1
 80085ea:	4802      	ldr	r0, [pc, #8]	; (80085f4 <HW_IPCC_BLE_Init+0x10>)
 80085ec:	f7ff ff04 	bl	80083f8 <LL_C1_IPCC_EnableReceiveChannel>
 80085f0:	bf00      	nop
 80085f2:	bd80      	pop	{r7, pc}
 80085f4:	58000c00 	.word	0x58000c00

080085f8 <HW_IPCC_BLE_SendCmd>:
 80085f8:	b580      	push	{r7, lr}
 80085fa:	af00      	add	r7, sp, #0
 80085fc:	2101      	movs	r1, #1
 80085fe:	4802      	ldr	r0, [pc, #8]	; (8008608 <HW_IPCC_BLE_SendCmd+0x10>)
 8008600:	f7ff ff1a 	bl	8008438 <LL_C1_IPCC_SetFlag_CHx>
 8008604:	bf00      	nop
 8008606:	bd80      	pop	{r7, pc}
 8008608:	58000c00 	.word	0x58000c00

0800860c <HW_IPCC_BLE_EvtHandler>:
 800860c:	b580      	push	{r7, lr}
 800860e:	af00      	add	r7, sp, #0
 8008610:	f7fe ffde 	bl	80075d0 <HW_IPCC_BLE_RxEvtNot>
 8008614:	2101      	movs	r1, #1
 8008616:	4802      	ldr	r0, [pc, #8]	; (8008620 <HW_IPCC_BLE_EvtHandler+0x14>)
 8008618:	f7ff ff00 	bl	800841c <LL_C1_IPCC_ClearFlag_CHx>
 800861c:	bf00      	nop
 800861e:	bd80      	pop	{r7, pc}
 8008620:	58000c00 	.word	0x58000c00

08008624 <HW_IPCC_BLE_AclDataEvtHandler>:
 8008624:	b580      	push	{r7, lr}
 8008626:	af00      	add	r7, sp, #0
 8008628:	2120      	movs	r1, #32
 800862a:	4803      	ldr	r0, [pc, #12]	; (8008638 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 800862c:	f7ff fed2 	bl	80083d4 <LL_C1_IPCC_DisableTransmitChannel>
 8008630:	f7fe fffe 	bl	8007630 <HW_IPCC_BLE_AclDataAckNot>
 8008634:	bf00      	nop
 8008636:	bd80      	pop	{r7, pc}
 8008638:	58000c00 	.word	0x58000c00

0800863c <HW_IPCC_SYS_Init>:
 800863c:	b580      	push	{r7, lr}
 800863e:	af00      	add	r7, sp, #0
 8008640:	2102      	movs	r1, #2
 8008642:	4802      	ldr	r0, [pc, #8]	; (800864c <HW_IPCC_SYS_Init+0x10>)
 8008644:	f7ff fed8 	bl	80083f8 <LL_C1_IPCC_EnableReceiveChannel>
 8008648:	bf00      	nop
 800864a:	bd80      	pop	{r7, pc}
 800864c:	58000c00 	.word	0x58000c00

08008650 <HW_IPCC_SYS_SendCmd>:
 8008650:	b580      	push	{r7, lr}
 8008652:	af00      	add	r7, sp, #0
 8008654:	2102      	movs	r1, #2
 8008656:	4804      	ldr	r0, [pc, #16]	; (8008668 <HW_IPCC_SYS_SendCmd+0x18>)
 8008658:	f7ff feee 	bl	8008438 <LL_C1_IPCC_SetFlag_CHx>
 800865c:	2102      	movs	r1, #2
 800865e:	4802      	ldr	r0, [pc, #8]	; (8008668 <HW_IPCC_SYS_SendCmd+0x18>)
 8008660:	f7ff fea5 	bl	80083ae <LL_C1_IPCC_EnableTransmitChannel>
 8008664:	bf00      	nop
 8008666:	bd80      	pop	{r7, pc}
 8008668:	58000c00 	.word	0x58000c00

0800866c <HW_IPCC_SYS_CmdEvtHandler>:
 800866c:	b580      	push	{r7, lr}
 800866e:	af00      	add	r7, sp, #0
 8008670:	2102      	movs	r1, #2
 8008672:	4803      	ldr	r0, [pc, #12]	; (8008680 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 8008674:	f7ff feae 	bl	80083d4 <LL_C1_IPCC_DisableTransmitChannel>
 8008678:	f7ff f82a 	bl	80076d0 <HW_IPCC_SYS_CmdEvtNot>
 800867c:	bf00      	nop
 800867e:	bd80      	pop	{r7, pc}
 8008680:	58000c00 	.word	0x58000c00

08008684 <HW_IPCC_SYS_EvtHandler>:
 8008684:	b580      	push	{r7, lr}
 8008686:	af00      	add	r7, sp, #0
 8008688:	f7ff f838 	bl	80076fc <HW_IPCC_SYS_EvtNot>
 800868c:	2102      	movs	r1, #2
 800868e:	4802      	ldr	r0, [pc, #8]	; (8008698 <HW_IPCC_SYS_EvtHandler+0x14>)
 8008690:	f7ff fec4 	bl	800841c <LL_C1_IPCC_ClearFlag_CHx>
 8008694:	bf00      	nop
 8008696:	bd80      	pop	{r7, pc}
 8008698:	58000c00 	.word	0x58000c00

0800869c <HW_IPCC_MM_SendFreeBuf>:
 800869c:	b580      	push	{r7, lr}
 800869e:	b082      	sub	sp, #8
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	6078      	str	r0, [r7, #4]
 80086a4:	2108      	movs	r1, #8
 80086a6:	480c      	ldr	r0, [pc, #48]	; (80086d8 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 80086a8:	f7ff fed5 	bl	8008456 <LL_C1_IPCC_IsActiveFlag_CHx>
 80086ac:	4603      	mov	r3, r0
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d007      	beq.n	80086c2 <HW_IPCC_MM_SendFreeBuf+0x26>
 80086b2:	4a0a      	ldr	r2, [pc, #40]	; (80086dc <HW_IPCC_MM_SendFreeBuf+0x40>)
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	6013      	str	r3, [r2, #0]
 80086b8:	2108      	movs	r1, #8
 80086ba:	4807      	ldr	r0, [pc, #28]	; (80086d8 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 80086bc:	f7ff fe77 	bl	80083ae <LL_C1_IPCC_EnableTransmitChannel>
 80086c0:	e006      	b.n	80086d0 <HW_IPCC_MM_SendFreeBuf+0x34>
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	4798      	blx	r3
 80086c6:	2108      	movs	r1, #8
 80086c8:	4803      	ldr	r0, [pc, #12]	; (80086d8 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 80086ca:	f7ff feb5 	bl	8008438 <LL_C1_IPCC_SetFlag_CHx>
 80086ce:	bf00      	nop
 80086d0:	3708      	adds	r7, #8
 80086d2:	46bd      	mov	sp, r7
 80086d4:	bd80      	pop	{r7, pc}
 80086d6:	bf00      	nop
 80086d8:	58000c00 	.word	0x58000c00
 80086dc:	20000c68 	.word	0x20000c68

080086e0 <HW_IPCC_MM_FreeBufHandler>:
 80086e0:	b580      	push	{r7, lr}
 80086e2:	af00      	add	r7, sp, #0
 80086e4:	2108      	movs	r1, #8
 80086e6:	4806      	ldr	r0, [pc, #24]	; (8008700 <HW_IPCC_MM_FreeBufHandler+0x20>)
 80086e8:	f7ff fe74 	bl	80083d4 <LL_C1_IPCC_DisableTransmitChannel>
 80086ec:	4b05      	ldr	r3, [pc, #20]	; (8008704 <HW_IPCC_MM_FreeBufHandler+0x24>)
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	4798      	blx	r3
 80086f2:	2108      	movs	r1, #8
 80086f4:	4802      	ldr	r0, [pc, #8]	; (8008700 <HW_IPCC_MM_FreeBufHandler+0x20>)
 80086f6:	f7ff fe9f 	bl	8008438 <LL_C1_IPCC_SetFlag_CHx>
 80086fa:	bf00      	nop
 80086fc:	bd80      	pop	{r7, pc}
 80086fe:	bf00      	nop
 8008700:	58000c00 	.word	0x58000c00
 8008704:	20000c68 	.word	0x20000c68

08008708 <HW_IPCC_TRACES_Init>:
 8008708:	b580      	push	{r7, lr}
 800870a:	af00      	add	r7, sp, #0
 800870c:	2108      	movs	r1, #8
 800870e:	4802      	ldr	r0, [pc, #8]	; (8008718 <HW_IPCC_TRACES_Init+0x10>)
 8008710:	f7ff fe72 	bl	80083f8 <LL_C1_IPCC_EnableReceiveChannel>
 8008714:	bf00      	nop
 8008716:	bd80      	pop	{r7, pc}
 8008718:	58000c00 	.word	0x58000c00

0800871c <HW_IPCC_TRACES_EvtHandler>:
 800871c:	b580      	push	{r7, lr}
 800871e:	af00      	add	r7, sp, #0
 8008720:	f7ff f894 	bl	800784c <HW_IPCC_TRACES_EvtNot>
 8008724:	2108      	movs	r1, #8
 8008726:	4802      	ldr	r0, [pc, #8]	; (8008730 <HW_IPCC_TRACES_EvtHandler+0x14>)
 8008728:	f7ff fe78 	bl	800841c <LL_C1_IPCC_ClearFlag_CHx>
 800872c:	bf00      	nop
 800872e:	bd80      	pop	{r7, pc}
 8008730:	58000c00 	.word	0x58000c00

08008734 <UTIL_LPM_Init>:
 8008734:	b480      	push	{r7}
 8008736:	af00      	add	r7, sp, #0
 8008738:	4b05      	ldr	r3, [pc, #20]	; (8008750 <UTIL_LPM_Init+0x1c>)
 800873a:	2200      	movs	r2, #0
 800873c:	601a      	str	r2, [r3, #0]
 800873e:	4b05      	ldr	r3, [pc, #20]	; (8008754 <UTIL_LPM_Init+0x20>)
 8008740:	2200      	movs	r2, #0
 8008742:	601a      	str	r2, [r3, #0]
 8008744:	bf00      	nop
 8008746:	46bd      	mov	sp, r7
 8008748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800874c:	4770      	bx	lr
 800874e:	bf00      	nop
 8008750:	20000c6c 	.word	0x20000c6c
 8008754:	20000c70 	.word	0x20000c70

08008758 <UTIL_LPM_SetOffMode>:
 8008758:	b480      	push	{r7}
 800875a:	b087      	sub	sp, #28
 800875c:	af00      	add	r7, sp, #0
 800875e:	6078      	str	r0, [r7, #4]
 8008760:	460b      	mov	r3, r1
 8008762:	70fb      	strb	r3, [r7, #3]
 8008764:	f3ef 8310 	mrs	r3, PRIMASK
 8008768:	613b      	str	r3, [r7, #16]
 800876a:	693b      	ldr	r3, [r7, #16]
 800876c:	617b      	str	r3, [r7, #20]
 800876e:	b672      	cpsid	i
 8008770:	bf00      	nop
 8008772:	78fb      	ldrb	r3, [r7, #3]
 8008774:	2b00      	cmp	r3, #0
 8008776:	d008      	beq.n	800878a <UTIL_LPM_SetOffMode+0x32>
 8008778:	2b01      	cmp	r3, #1
 800877a:	d10e      	bne.n	800879a <UTIL_LPM_SetOffMode+0x42>
 800877c:	4b0d      	ldr	r3, [pc, #52]	; (80087b4 <UTIL_LPM_SetOffMode+0x5c>)
 800877e:	681a      	ldr	r2, [r3, #0]
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	4313      	orrs	r3, r2
 8008784:	4a0b      	ldr	r2, [pc, #44]	; (80087b4 <UTIL_LPM_SetOffMode+0x5c>)
 8008786:	6013      	str	r3, [r2, #0]
 8008788:	e008      	b.n	800879c <UTIL_LPM_SetOffMode+0x44>
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	43da      	mvns	r2, r3
 800878e:	4b09      	ldr	r3, [pc, #36]	; (80087b4 <UTIL_LPM_SetOffMode+0x5c>)
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	4013      	ands	r3, r2
 8008794:	4a07      	ldr	r2, [pc, #28]	; (80087b4 <UTIL_LPM_SetOffMode+0x5c>)
 8008796:	6013      	str	r3, [r2, #0]
 8008798:	e000      	b.n	800879c <UTIL_LPM_SetOffMode+0x44>
 800879a:	bf00      	nop
 800879c:	697b      	ldr	r3, [r7, #20]
 800879e:	60fb      	str	r3, [r7, #12]
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	f383 8810 	msr	PRIMASK, r3
 80087a6:	bf00      	nop
 80087a8:	bf00      	nop
 80087aa:	371c      	adds	r7, #28
 80087ac:	46bd      	mov	sp, r7
 80087ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b2:	4770      	bx	lr
 80087b4:	20000c70 	.word	0x20000c70

080087b8 <UTIL_SEQ_Run>:
 80087b8:	b580      	push	{r7, lr}
 80087ba:	b090      	sub	sp, #64	; 0x40
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
 80087c0:	4b73      	ldr	r3, [pc, #460]	; (8008990 <UTIL_SEQ_Run+0x1d8>)
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80087c6:	4b72      	ldr	r3, [pc, #456]	; (8008990 <UTIL_SEQ_Run+0x1d8>)
 80087c8:	681a      	ldr	r2, [r3, #0]
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	4013      	ands	r3, r2
 80087ce:	4a70      	ldr	r2, [pc, #448]	; (8008990 <UTIL_SEQ_Run+0x1d8>)
 80087d0:	6013      	str	r3, [r2, #0]
 80087d2:	4b70      	ldr	r3, [pc, #448]	; (8008994 <UTIL_SEQ_Run+0x1dc>)
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	63bb      	str	r3, [r7, #56]	; 0x38
 80087d8:	4b6f      	ldr	r3, [pc, #444]	; (8008998 <UTIL_SEQ_Run+0x1e0>)
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	637b      	str	r3, [r7, #52]	; 0x34
 80087de:	4b6f      	ldr	r3, [pc, #444]	; (800899c <UTIL_SEQ_Run+0x1e4>)
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	633b      	str	r3, [r7, #48]	; 0x30
 80087e4:	4b6e      	ldr	r3, [pc, #440]	; (80089a0 <UTIL_SEQ_Run+0x1e8>)
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80087ea:	e08d      	b.n	8008908 <UTIL_SEQ_Run+0x150>
 80087ec:	2300      	movs	r3, #0
 80087ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80087f0:	e002      	b.n	80087f8 <UTIL_SEQ_Run+0x40>
 80087f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087f4:	3301      	adds	r3, #1
 80087f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80087f8:	4a6a      	ldr	r2, [pc, #424]	; (80089a4 <UTIL_SEQ_Run+0x1ec>)
 80087fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087fc:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8008800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008802:	401a      	ands	r2, r3
 8008804:	4b62      	ldr	r3, [pc, #392]	; (8008990 <UTIL_SEQ_Run+0x1d8>)
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	4013      	ands	r3, r2
 800880a:	2b00      	cmp	r3, #0
 800880c:	d0f1      	beq.n	80087f2 <UTIL_SEQ_Run+0x3a>
 800880e:	4a65      	ldr	r2, [pc, #404]	; (80089a4 <UTIL_SEQ_Run+0x1ec>)
 8008810:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008812:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8008816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008818:	401a      	ands	r2, r3
 800881a:	4b5d      	ldr	r3, [pc, #372]	; (8008990 <UTIL_SEQ_Run+0x1d8>)
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	4013      	ands	r3, r2
 8008820:	627b      	str	r3, [r7, #36]	; 0x24
 8008822:	4a60      	ldr	r2, [pc, #384]	; (80089a4 <UTIL_SEQ_Run+0x1ec>)
 8008824:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008826:	00db      	lsls	r3, r3, #3
 8008828:	4413      	add	r3, r2
 800882a:	685a      	ldr	r2, [r3, #4]
 800882c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800882e:	4013      	ands	r3, r2
 8008830:	2b00      	cmp	r3, #0
 8008832:	d106      	bne.n	8008842 <UTIL_SEQ_Run+0x8a>
 8008834:	4a5b      	ldr	r2, [pc, #364]	; (80089a4 <UTIL_SEQ_Run+0x1ec>)
 8008836:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008838:	00db      	lsls	r3, r3, #3
 800883a:	4413      	add	r3, r2
 800883c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008840:	605a      	str	r2, [r3, #4]
 8008842:	4a58      	ldr	r2, [pc, #352]	; (80089a4 <UTIL_SEQ_Run+0x1ec>)
 8008844:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008846:	00db      	lsls	r3, r3, #3
 8008848:	4413      	add	r3, r2
 800884a:	685a      	ldr	r2, [r3, #4]
 800884c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800884e:	4013      	ands	r3, r2
 8008850:	4618      	mov	r0, r3
 8008852:	f000 f9b3 	bl	8008bbc <SEQ_BitPosition>
 8008856:	4603      	mov	r3, r0
 8008858:	461a      	mov	r2, r3
 800885a:	4b53      	ldr	r3, [pc, #332]	; (80089a8 <UTIL_SEQ_Run+0x1f0>)
 800885c:	601a      	str	r2, [r3, #0]
 800885e:	4a51      	ldr	r2, [pc, #324]	; (80089a4 <UTIL_SEQ_Run+0x1ec>)
 8008860:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008862:	00db      	lsls	r3, r3, #3
 8008864:	4413      	add	r3, r2
 8008866:	685a      	ldr	r2, [r3, #4]
 8008868:	4b4f      	ldr	r3, [pc, #316]	; (80089a8 <UTIL_SEQ_Run+0x1f0>)
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	2101      	movs	r1, #1
 800886e:	fa01 f303 	lsl.w	r3, r1, r3
 8008872:	43db      	mvns	r3, r3
 8008874:	401a      	ands	r2, r3
 8008876:	494b      	ldr	r1, [pc, #300]	; (80089a4 <UTIL_SEQ_Run+0x1ec>)
 8008878:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800887a:	00db      	lsls	r3, r3, #3
 800887c:	440b      	add	r3, r1
 800887e:	605a      	str	r2, [r3, #4]
 8008880:	f3ef 8310 	mrs	r3, PRIMASK
 8008884:	61bb      	str	r3, [r7, #24]
 8008886:	69bb      	ldr	r3, [r7, #24]
 8008888:	623b      	str	r3, [r7, #32]
 800888a:	b672      	cpsid	i
 800888c:	bf00      	nop
 800888e:	4b46      	ldr	r3, [pc, #280]	; (80089a8 <UTIL_SEQ_Run+0x1f0>)
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	2201      	movs	r2, #1
 8008894:	fa02 f303 	lsl.w	r3, r2, r3
 8008898:	43da      	mvns	r2, r3
 800889a:	4b3e      	ldr	r3, [pc, #248]	; (8008994 <UTIL_SEQ_Run+0x1dc>)
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	4013      	ands	r3, r2
 80088a0:	4a3c      	ldr	r2, [pc, #240]	; (8008994 <UTIL_SEQ_Run+0x1dc>)
 80088a2:	6013      	str	r3, [r2, #0]
 80088a4:	2302      	movs	r3, #2
 80088a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80088a8:	e013      	b.n	80088d2 <UTIL_SEQ_Run+0x11a>
 80088aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088ac:	3b01      	subs	r3, #1
 80088ae:	4a3d      	ldr	r2, [pc, #244]	; (80089a4 <UTIL_SEQ_Run+0x1ec>)
 80088b0:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 80088b4:	4b3c      	ldr	r3, [pc, #240]	; (80089a8 <UTIL_SEQ_Run+0x1f0>)
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	2201      	movs	r2, #1
 80088ba:	fa02 f303 	lsl.w	r3, r2, r3
 80088be:	43da      	mvns	r2, r3
 80088c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088c2:	3b01      	subs	r3, #1
 80088c4:	400a      	ands	r2, r1
 80088c6:	4937      	ldr	r1, [pc, #220]	; (80089a4 <UTIL_SEQ_Run+0x1ec>)
 80088c8:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 80088cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088ce:	3b01      	subs	r3, #1
 80088d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80088d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d1e8      	bne.n	80088aa <UTIL_SEQ_Run+0xf2>
 80088d8:	6a3b      	ldr	r3, [r7, #32]
 80088da:	617b      	str	r3, [r7, #20]
 80088dc:	697b      	ldr	r3, [r7, #20]
 80088de:	f383 8810 	msr	PRIMASK, r3
 80088e2:	bf00      	nop
 80088e4:	4b30      	ldr	r3, [pc, #192]	; (80089a8 <UTIL_SEQ_Run+0x1f0>)
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	4a30      	ldr	r2, [pc, #192]	; (80089ac <UTIL_SEQ_Run+0x1f4>)
 80088ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80088ee:	4798      	blx	r3
 80088f0:	4b28      	ldr	r3, [pc, #160]	; (8008994 <UTIL_SEQ_Run+0x1dc>)
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	63bb      	str	r3, [r7, #56]	; 0x38
 80088f6:	4b28      	ldr	r3, [pc, #160]	; (8008998 <UTIL_SEQ_Run+0x1e0>)
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	637b      	str	r3, [r7, #52]	; 0x34
 80088fc:	4b27      	ldr	r3, [pc, #156]	; (800899c <UTIL_SEQ_Run+0x1e4>)
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	633b      	str	r3, [r7, #48]	; 0x30
 8008902:	4b27      	ldr	r3, [pc, #156]	; (80089a0 <UTIL_SEQ_Run+0x1e8>)
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008908:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800890a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800890c:	401a      	ands	r2, r3
 800890e:	4b20      	ldr	r3, [pc, #128]	; (8008990 <UTIL_SEQ_Run+0x1d8>)
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	4013      	ands	r3, r2
 8008914:	2b00      	cmp	r3, #0
 8008916:	d005      	beq.n	8008924 <UTIL_SEQ_Run+0x16c>
 8008918:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800891a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800891c:	4013      	ands	r3, r2
 800891e:	2b00      	cmp	r3, #0
 8008920:	f43f af64 	beq.w	80087ec <UTIL_SEQ_Run+0x34>
 8008924:	4b20      	ldr	r3, [pc, #128]	; (80089a8 <UTIL_SEQ_Run+0x1f0>)
 8008926:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800892a:	601a      	str	r2, [r3, #0]
 800892c:	f000 f938 	bl	8008ba0 <UTIL_SEQ_PreIdle>
 8008930:	f3ef 8310 	mrs	r3, PRIMASK
 8008934:	613b      	str	r3, [r7, #16]
 8008936:	693b      	ldr	r3, [r7, #16]
 8008938:	61fb      	str	r3, [r7, #28]
 800893a:	b672      	cpsid	i
 800893c:	bf00      	nop
 800893e:	4b15      	ldr	r3, [pc, #84]	; (8008994 <UTIL_SEQ_Run+0x1dc>)
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	63bb      	str	r3, [r7, #56]	; 0x38
 8008944:	4b14      	ldr	r3, [pc, #80]	; (8008998 <UTIL_SEQ_Run+0x1e0>)
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	637b      	str	r3, [r7, #52]	; 0x34
 800894a:	4b14      	ldr	r3, [pc, #80]	; (800899c <UTIL_SEQ_Run+0x1e4>)
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	633b      	str	r3, [r7, #48]	; 0x30
 8008950:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008954:	401a      	ands	r2, r3
 8008956:	4b0e      	ldr	r3, [pc, #56]	; (8008990 <UTIL_SEQ_Run+0x1d8>)
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	4013      	ands	r3, r2
 800895c:	2b00      	cmp	r3, #0
 800895e:	d107      	bne.n	8008970 <UTIL_SEQ_Run+0x1b8>
 8008960:	4b0f      	ldr	r3, [pc, #60]	; (80089a0 <UTIL_SEQ_Run+0x1e8>)
 8008962:	681a      	ldr	r2, [r3, #0]
 8008964:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008966:	4013      	ands	r3, r2
 8008968:	2b00      	cmp	r3, #0
 800896a:	d101      	bne.n	8008970 <UTIL_SEQ_Run+0x1b8>
 800896c:	f7f8 f91c 	bl	8000ba8 <UTIL_SEQ_Idle>
 8008970:	69fb      	ldr	r3, [r7, #28]
 8008972:	60fb      	str	r3, [r7, #12]
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	f383 8810 	msr	PRIMASK, r3
 800897a:	bf00      	nop
 800897c:	f000 f917 	bl	8008bae <UTIL_SEQ_PostIdle>
 8008980:	4a03      	ldr	r2, [pc, #12]	; (8008990 <UTIL_SEQ_Run+0x1d8>)
 8008982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008984:	6013      	str	r3, [r2, #0]
 8008986:	bf00      	nop
 8008988:	3740      	adds	r7, #64	; 0x40
 800898a:	46bd      	mov	sp, r7
 800898c:	bd80      	pop	{r7, pc}
 800898e:	bf00      	nop
 8008990:	20000024 	.word	0x20000024
 8008994:	20000c74 	.word	0x20000c74
 8008998:	20000c78 	.word	0x20000c78
 800899c:	20000020 	.word	0x20000020
 80089a0:	20000c7c 	.word	0x20000c7c
 80089a4:	20000d04 	.word	0x20000d04
 80089a8:	20000c80 	.word	0x20000c80
 80089ac:	20000c84 	.word	0x20000c84

080089b0 <UTIL_SEQ_RegTask>:
 80089b0:	b580      	push	{r7, lr}
 80089b2:	b088      	sub	sp, #32
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	60f8      	str	r0, [r7, #12]
 80089b8:	60b9      	str	r1, [r7, #8]
 80089ba:	607a      	str	r2, [r7, #4]
 80089bc:	f3ef 8310 	mrs	r3, PRIMASK
 80089c0:	617b      	str	r3, [r7, #20]
 80089c2:	697b      	ldr	r3, [r7, #20]
 80089c4:	61fb      	str	r3, [r7, #28]
 80089c6:	b672      	cpsid	i
 80089c8:	bf00      	nop
 80089ca:	68f8      	ldr	r0, [r7, #12]
 80089cc:	f000 f8f6 	bl	8008bbc <SEQ_BitPosition>
 80089d0:	4603      	mov	r3, r0
 80089d2:	4619      	mov	r1, r3
 80089d4:	4a06      	ldr	r2, [pc, #24]	; (80089f0 <UTIL_SEQ_RegTask+0x40>)
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80089dc:	69fb      	ldr	r3, [r7, #28]
 80089de:	61bb      	str	r3, [r7, #24]
 80089e0:	69bb      	ldr	r3, [r7, #24]
 80089e2:	f383 8810 	msr	PRIMASK, r3
 80089e6:	bf00      	nop
 80089e8:	bf00      	nop
 80089ea:	3720      	adds	r7, #32
 80089ec:	46bd      	mov	sp, r7
 80089ee:	bd80      	pop	{r7, pc}
 80089f0:	20000c84 	.word	0x20000c84

080089f4 <UTIL_SEQ_SetTask>:
 80089f4:	b480      	push	{r7}
 80089f6:	b087      	sub	sp, #28
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	6078      	str	r0, [r7, #4]
 80089fc:	6039      	str	r1, [r7, #0]
 80089fe:	f3ef 8310 	mrs	r3, PRIMASK
 8008a02:	60fb      	str	r3, [r7, #12]
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	617b      	str	r3, [r7, #20]
 8008a08:	b672      	cpsid	i
 8008a0a:	bf00      	nop
 8008a0c:	4b0d      	ldr	r3, [pc, #52]	; (8008a44 <UTIL_SEQ_SetTask+0x50>)
 8008a0e:	681a      	ldr	r2, [r3, #0]
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	4313      	orrs	r3, r2
 8008a14:	4a0b      	ldr	r2, [pc, #44]	; (8008a44 <UTIL_SEQ_SetTask+0x50>)
 8008a16:	6013      	str	r3, [r2, #0]
 8008a18:	4a0b      	ldr	r2, [pc, #44]	; (8008a48 <UTIL_SEQ_SetTask+0x54>)
 8008a1a:	683b      	ldr	r3, [r7, #0]
 8008a1c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	431a      	orrs	r2, r3
 8008a24:	4908      	ldr	r1, [pc, #32]	; (8008a48 <UTIL_SEQ_SetTask+0x54>)
 8008a26:	683b      	ldr	r3, [r7, #0]
 8008a28:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 8008a2c:	697b      	ldr	r3, [r7, #20]
 8008a2e:	613b      	str	r3, [r7, #16]
 8008a30:	693b      	ldr	r3, [r7, #16]
 8008a32:	f383 8810 	msr	PRIMASK, r3
 8008a36:	bf00      	nop
 8008a38:	bf00      	nop
 8008a3a:	371c      	adds	r7, #28
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a42:	4770      	bx	lr
 8008a44:	20000c74 	.word	0x20000c74
 8008a48:	20000d04 	.word	0x20000d04

08008a4c <UTIL_SEQ_PauseTask>:
 8008a4c:	b480      	push	{r7}
 8008a4e:	b087      	sub	sp, #28
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	6078      	str	r0, [r7, #4]
 8008a54:	f3ef 8310 	mrs	r3, PRIMASK
 8008a58:	60fb      	str	r3, [r7, #12]
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	617b      	str	r3, [r7, #20]
 8008a5e:	b672      	cpsid	i
 8008a60:	bf00      	nop
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	43da      	mvns	r2, r3
 8008a66:	4b08      	ldr	r3, [pc, #32]	; (8008a88 <UTIL_SEQ_PauseTask+0x3c>)
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	4013      	ands	r3, r2
 8008a6c:	4a06      	ldr	r2, [pc, #24]	; (8008a88 <UTIL_SEQ_PauseTask+0x3c>)
 8008a6e:	6013      	str	r3, [r2, #0]
 8008a70:	697b      	ldr	r3, [r7, #20]
 8008a72:	613b      	str	r3, [r7, #16]
 8008a74:	693b      	ldr	r3, [r7, #16]
 8008a76:	f383 8810 	msr	PRIMASK, r3
 8008a7a:	bf00      	nop
 8008a7c:	bf00      	nop
 8008a7e:	371c      	adds	r7, #28
 8008a80:	46bd      	mov	sp, r7
 8008a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a86:	4770      	bx	lr
 8008a88:	20000020 	.word	0x20000020

08008a8c <UTIL_SEQ_ResumeTask>:
 8008a8c:	b480      	push	{r7}
 8008a8e:	b087      	sub	sp, #28
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	6078      	str	r0, [r7, #4]
 8008a94:	f3ef 8310 	mrs	r3, PRIMASK
 8008a98:	60fb      	str	r3, [r7, #12]
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	617b      	str	r3, [r7, #20]
 8008a9e:	b672      	cpsid	i
 8008aa0:	bf00      	nop
 8008aa2:	4b09      	ldr	r3, [pc, #36]	; (8008ac8 <UTIL_SEQ_ResumeTask+0x3c>)
 8008aa4:	681a      	ldr	r2, [r3, #0]
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	4313      	orrs	r3, r2
 8008aaa:	4a07      	ldr	r2, [pc, #28]	; (8008ac8 <UTIL_SEQ_ResumeTask+0x3c>)
 8008aac:	6013      	str	r3, [r2, #0]
 8008aae:	697b      	ldr	r3, [r7, #20]
 8008ab0:	613b      	str	r3, [r7, #16]
 8008ab2:	693b      	ldr	r3, [r7, #16]
 8008ab4:	f383 8810 	msr	PRIMASK, r3
 8008ab8:	bf00      	nop
 8008aba:	bf00      	nop
 8008abc:	371c      	adds	r7, #28
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac4:	4770      	bx	lr
 8008ac6:	bf00      	nop
 8008ac8:	20000020 	.word	0x20000020

08008acc <UTIL_SEQ_SetEvt>:
 8008acc:	b480      	push	{r7}
 8008ace:	b087      	sub	sp, #28
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	6078      	str	r0, [r7, #4]
 8008ad4:	f3ef 8310 	mrs	r3, PRIMASK
 8008ad8:	60fb      	str	r3, [r7, #12]
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	617b      	str	r3, [r7, #20]
 8008ade:	b672      	cpsid	i
 8008ae0:	bf00      	nop
 8008ae2:	4b09      	ldr	r3, [pc, #36]	; (8008b08 <UTIL_SEQ_SetEvt+0x3c>)
 8008ae4:	681a      	ldr	r2, [r3, #0]
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	4313      	orrs	r3, r2
 8008aea:	4a07      	ldr	r2, [pc, #28]	; (8008b08 <UTIL_SEQ_SetEvt+0x3c>)
 8008aec:	6013      	str	r3, [r2, #0]
 8008aee:	697b      	ldr	r3, [r7, #20]
 8008af0:	613b      	str	r3, [r7, #16]
 8008af2:	693b      	ldr	r3, [r7, #16]
 8008af4:	f383 8810 	msr	PRIMASK, r3
 8008af8:	bf00      	nop
 8008afa:	bf00      	nop
 8008afc:	371c      	adds	r7, #28
 8008afe:	46bd      	mov	sp, r7
 8008b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b04:	4770      	bx	lr
 8008b06:	bf00      	nop
 8008b08:	20000c78 	.word	0x20000c78

08008b0c <UTIL_SEQ_WaitEvt>:
 8008b0c:	b580      	push	{r7, lr}
 8008b0e:	b088      	sub	sp, #32
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	6078      	str	r0, [r7, #4]
 8008b14:	4b1f      	ldr	r3, [pc, #124]	; (8008b94 <UTIL_SEQ_WaitEvt+0x88>)
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	61bb      	str	r3, [r7, #24]
 8008b1a:	4b1e      	ldr	r3, [pc, #120]	; (8008b94 <UTIL_SEQ_WaitEvt+0x88>)
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008b22:	d102      	bne.n	8008b2a <UTIL_SEQ_WaitEvt+0x1e>
 8008b24:	2300      	movs	r3, #0
 8008b26:	61fb      	str	r3, [r7, #28]
 8008b28:	e005      	b.n	8008b36 <UTIL_SEQ_WaitEvt+0x2a>
 8008b2a:	4b1a      	ldr	r3, [pc, #104]	; (8008b94 <UTIL_SEQ_WaitEvt+0x88>)
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	2201      	movs	r2, #1
 8008b30:	fa02 f303 	lsl.w	r3, r2, r3
 8008b34:	61fb      	str	r3, [r7, #28]
 8008b36:	4b18      	ldr	r3, [pc, #96]	; (8008b98 <UTIL_SEQ_WaitEvt+0x8c>)
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	617b      	str	r3, [r7, #20]
 8008b3c:	4a16      	ldr	r2, [pc, #88]	; (8008b98 <UTIL_SEQ_WaitEvt+0x8c>)
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	6013      	str	r3, [r2, #0]
 8008b42:	e003      	b.n	8008b4c <UTIL_SEQ_WaitEvt+0x40>
 8008b44:	6879      	ldr	r1, [r7, #4]
 8008b46:	69f8      	ldr	r0, [r7, #28]
 8008b48:	f7f8 f835 	bl	8000bb6 <UTIL_SEQ_EvtIdle>
 8008b4c:	4b13      	ldr	r3, [pc, #76]	; (8008b9c <UTIL_SEQ_WaitEvt+0x90>)
 8008b4e:	681a      	ldr	r2, [r3, #0]
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	4013      	ands	r3, r2
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d0f5      	beq.n	8008b44 <UTIL_SEQ_WaitEvt+0x38>
 8008b58:	4a0e      	ldr	r2, [pc, #56]	; (8008b94 <UTIL_SEQ_WaitEvt+0x88>)
 8008b5a:	69bb      	ldr	r3, [r7, #24]
 8008b5c:	6013      	str	r3, [r2, #0]
 8008b5e:	f3ef 8310 	mrs	r3, PRIMASK
 8008b62:	60bb      	str	r3, [r7, #8]
 8008b64:	68bb      	ldr	r3, [r7, #8]
 8008b66:	613b      	str	r3, [r7, #16]
 8008b68:	b672      	cpsid	i
 8008b6a:	bf00      	nop
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	43da      	mvns	r2, r3
 8008b70:	4b0a      	ldr	r3, [pc, #40]	; (8008b9c <UTIL_SEQ_WaitEvt+0x90>)
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	4013      	ands	r3, r2
 8008b76:	4a09      	ldr	r2, [pc, #36]	; (8008b9c <UTIL_SEQ_WaitEvt+0x90>)
 8008b78:	6013      	str	r3, [r2, #0]
 8008b7a:	693b      	ldr	r3, [r7, #16]
 8008b7c:	60fb      	str	r3, [r7, #12]
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	f383 8810 	msr	PRIMASK, r3
 8008b84:	bf00      	nop
 8008b86:	4a04      	ldr	r2, [pc, #16]	; (8008b98 <UTIL_SEQ_WaitEvt+0x8c>)
 8008b88:	697b      	ldr	r3, [r7, #20]
 8008b8a:	6013      	str	r3, [r2, #0]
 8008b8c:	bf00      	nop
 8008b8e:	3720      	adds	r7, #32
 8008b90:	46bd      	mov	sp, r7
 8008b92:	bd80      	pop	{r7, pc}
 8008b94:	20000c80 	.word	0x20000c80
 8008b98:	20000c7c 	.word	0x20000c7c
 8008b9c:	20000c78 	.word	0x20000c78

08008ba0 <UTIL_SEQ_PreIdle>:
 8008ba0:	b480      	push	{r7}
 8008ba2:	af00      	add	r7, sp, #0
 8008ba4:	bf00      	nop
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bac:	4770      	bx	lr

08008bae <UTIL_SEQ_PostIdle>:
 8008bae:	b480      	push	{r7}
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	bf00      	nop
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bba:	4770      	bx	lr

08008bbc <SEQ_BitPosition>:
 8008bbc:	b480      	push	{r7}
 8008bbe:	b085      	sub	sp, #20
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	6078      	str	r0, [r7, #4]
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	73fb      	strb	r3, [r7, #15]
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	60bb      	str	r3, [r7, #8]
 8008bcc:	68bb      	ldr	r3, [r7, #8]
 8008bce:	0c1b      	lsrs	r3, r3, #16
 8008bd0:	041b      	lsls	r3, r3, #16
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d104      	bne.n	8008be0 <SEQ_BitPosition+0x24>
 8008bd6:	2310      	movs	r3, #16
 8008bd8:	73fb      	strb	r3, [r7, #15]
 8008bda:	68bb      	ldr	r3, [r7, #8]
 8008bdc:	041b      	lsls	r3, r3, #16
 8008bde:	60bb      	str	r3, [r7, #8]
 8008be0:	68bb      	ldr	r3, [r7, #8]
 8008be2:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d105      	bne.n	8008bf6 <SEQ_BitPosition+0x3a>
 8008bea:	7bfb      	ldrb	r3, [r7, #15]
 8008bec:	3308      	adds	r3, #8
 8008bee:	73fb      	strb	r3, [r7, #15]
 8008bf0:	68bb      	ldr	r3, [r7, #8]
 8008bf2:	021b      	lsls	r3, r3, #8
 8008bf4:	60bb      	str	r3, [r7, #8]
 8008bf6:	68bb      	ldr	r3, [r7, #8]
 8008bf8:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d105      	bne.n	8008c0c <SEQ_BitPosition+0x50>
 8008c00:	7bfb      	ldrb	r3, [r7, #15]
 8008c02:	3304      	adds	r3, #4
 8008c04:	73fb      	strb	r3, [r7, #15]
 8008c06:	68bb      	ldr	r3, [r7, #8]
 8008c08:	011b      	lsls	r3, r3, #4
 8008c0a:	60bb      	str	r3, [r7, #8]
 8008c0c:	68bb      	ldr	r3, [r7, #8]
 8008c0e:	0f1b      	lsrs	r3, r3, #28
 8008c10:	4a07      	ldr	r2, [pc, #28]	; (8008c30 <SEQ_BitPosition+0x74>)
 8008c12:	5cd2      	ldrb	r2, [r2, r3]
 8008c14:	7bfb      	ldrb	r3, [r7, #15]
 8008c16:	4413      	add	r3, r2
 8008c18:	73fb      	strb	r3, [r7, #15]
 8008c1a:	7bfb      	ldrb	r3, [r7, #15]
 8008c1c:	f1c3 031f 	rsb	r3, r3, #31
 8008c20:	b2db      	uxtb	r3, r3
 8008c22:	4618      	mov	r0, r3
 8008c24:	3714      	adds	r7, #20
 8008c26:	46bd      	mov	sp, r7
 8008c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2c:	4770      	bx	lr
 8008c2e:	bf00      	nop
 8008c30:	08009ea8 	.word	0x08009ea8

08008c34 <__errno>:
 8008c34:	4b01      	ldr	r3, [pc, #4]	; (8008c3c <__errno+0x8>)
 8008c36:	6818      	ldr	r0, [r3, #0]
 8008c38:	4770      	bx	lr
 8008c3a:	bf00      	nop
 8008c3c:	20000028 	.word	0x20000028

08008c40 <__libc_init_array>:
 8008c40:	b570      	push	{r4, r5, r6, lr}
 8008c42:	4d0d      	ldr	r5, [pc, #52]	; (8008c78 <__libc_init_array+0x38>)
 8008c44:	4c0d      	ldr	r4, [pc, #52]	; (8008c7c <__libc_init_array+0x3c>)
 8008c46:	1b64      	subs	r4, r4, r5
 8008c48:	10a4      	asrs	r4, r4, #2
 8008c4a:	2600      	movs	r6, #0
 8008c4c:	42a6      	cmp	r6, r4
 8008c4e:	d109      	bne.n	8008c64 <__libc_init_array+0x24>
 8008c50:	4d0b      	ldr	r5, [pc, #44]	; (8008c80 <__libc_init_array+0x40>)
 8008c52:	4c0c      	ldr	r4, [pc, #48]	; (8008c84 <__libc_init_array+0x44>)
 8008c54:	f000 ffbc 	bl	8009bd0 <_init>
 8008c58:	1b64      	subs	r4, r4, r5
 8008c5a:	10a4      	asrs	r4, r4, #2
 8008c5c:	2600      	movs	r6, #0
 8008c5e:	42a6      	cmp	r6, r4
 8008c60:	d105      	bne.n	8008c6e <__libc_init_array+0x2e>
 8008c62:	bd70      	pop	{r4, r5, r6, pc}
 8008c64:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c68:	4798      	blx	r3
 8008c6a:	3601      	adds	r6, #1
 8008c6c:	e7ee      	b.n	8008c4c <__libc_init_array+0xc>
 8008c6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c72:	4798      	blx	r3
 8008c74:	3601      	adds	r6, #1
 8008c76:	e7f2      	b.n	8008c5e <__libc_init_array+0x1e>
 8008c78:	08009f58 	.word	0x08009f58
 8008c7c:	08009f58 	.word	0x08009f58
 8008c80:	08009f58 	.word	0x08009f58
 8008c84:	08009f5c 	.word	0x08009f5c

08008c88 <memcpy>:
 8008c88:	440a      	add	r2, r1
 8008c8a:	4291      	cmp	r1, r2
 8008c8c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008c90:	d100      	bne.n	8008c94 <memcpy+0xc>
 8008c92:	4770      	bx	lr
 8008c94:	b510      	push	{r4, lr}
 8008c96:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008c9a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008c9e:	4291      	cmp	r1, r2
 8008ca0:	d1f9      	bne.n	8008c96 <memcpy+0xe>
 8008ca2:	bd10      	pop	{r4, pc}

08008ca4 <memset>:
 8008ca4:	4402      	add	r2, r0
 8008ca6:	4603      	mov	r3, r0
 8008ca8:	4293      	cmp	r3, r2
 8008caa:	d100      	bne.n	8008cae <memset+0xa>
 8008cac:	4770      	bx	lr
 8008cae:	f803 1b01 	strb.w	r1, [r3], #1
 8008cb2:	e7f9      	b.n	8008ca8 <memset+0x4>

08008cb4 <iprintf>:
 8008cb4:	b40f      	push	{r0, r1, r2, r3}
 8008cb6:	4b0a      	ldr	r3, [pc, #40]	; (8008ce0 <iprintf+0x2c>)
 8008cb8:	b513      	push	{r0, r1, r4, lr}
 8008cba:	681c      	ldr	r4, [r3, #0]
 8008cbc:	b124      	cbz	r4, 8008cc8 <iprintf+0x14>
 8008cbe:	69a3      	ldr	r3, [r4, #24]
 8008cc0:	b913      	cbnz	r3, 8008cc8 <iprintf+0x14>
 8008cc2:	4620      	mov	r0, r4
 8008cc4:	f000 f866 	bl	8008d94 <__sinit>
 8008cc8:	ab05      	add	r3, sp, #20
 8008cca:	9a04      	ldr	r2, [sp, #16]
 8008ccc:	68a1      	ldr	r1, [r4, #8]
 8008cce:	9301      	str	r3, [sp, #4]
 8008cd0:	4620      	mov	r0, r4
 8008cd2:	f000 f9bd 	bl	8009050 <_vfiprintf_r>
 8008cd6:	b002      	add	sp, #8
 8008cd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008cdc:	b004      	add	sp, #16
 8008cde:	4770      	bx	lr
 8008ce0:	20000028 	.word	0x20000028

08008ce4 <std>:
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	b510      	push	{r4, lr}
 8008ce8:	4604      	mov	r4, r0
 8008cea:	e9c0 3300 	strd	r3, r3, [r0]
 8008cee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008cf2:	6083      	str	r3, [r0, #8]
 8008cf4:	8181      	strh	r1, [r0, #12]
 8008cf6:	6643      	str	r3, [r0, #100]	; 0x64
 8008cf8:	81c2      	strh	r2, [r0, #14]
 8008cfa:	6183      	str	r3, [r0, #24]
 8008cfc:	4619      	mov	r1, r3
 8008cfe:	2208      	movs	r2, #8
 8008d00:	305c      	adds	r0, #92	; 0x5c
 8008d02:	f7ff ffcf 	bl	8008ca4 <memset>
 8008d06:	4b05      	ldr	r3, [pc, #20]	; (8008d1c <std+0x38>)
 8008d08:	6263      	str	r3, [r4, #36]	; 0x24
 8008d0a:	4b05      	ldr	r3, [pc, #20]	; (8008d20 <std+0x3c>)
 8008d0c:	62a3      	str	r3, [r4, #40]	; 0x28
 8008d0e:	4b05      	ldr	r3, [pc, #20]	; (8008d24 <std+0x40>)
 8008d10:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008d12:	4b05      	ldr	r3, [pc, #20]	; (8008d28 <std+0x44>)
 8008d14:	6224      	str	r4, [r4, #32]
 8008d16:	6323      	str	r3, [r4, #48]	; 0x30
 8008d18:	bd10      	pop	{r4, pc}
 8008d1a:	bf00      	nop
 8008d1c:	080095f9 	.word	0x080095f9
 8008d20:	0800961b 	.word	0x0800961b
 8008d24:	08009653 	.word	0x08009653
 8008d28:	08009677 	.word	0x08009677

08008d2c <_cleanup_r>:
 8008d2c:	4901      	ldr	r1, [pc, #4]	; (8008d34 <_cleanup_r+0x8>)
 8008d2e:	f000 b8af 	b.w	8008e90 <_fwalk_reent>
 8008d32:	bf00      	nop
 8008d34:	08009951 	.word	0x08009951

08008d38 <__sfmoreglue>:
 8008d38:	b570      	push	{r4, r5, r6, lr}
 8008d3a:	2268      	movs	r2, #104	; 0x68
 8008d3c:	1e4d      	subs	r5, r1, #1
 8008d3e:	4355      	muls	r5, r2
 8008d40:	460e      	mov	r6, r1
 8008d42:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008d46:	f000 f8e5 	bl	8008f14 <_malloc_r>
 8008d4a:	4604      	mov	r4, r0
 8008d4c:	b140      	cbz	r0, 8008d60 <__sfmoreglue+0x28>
 8008d4e:	2100      	movs	r1, #0
 8008d50:	e9c0 1600 	strd	r1, r6, [r0]
 8008d54:	300c      	adds	r0, #12
 8008d56:	60a0      	str	r0, [r4, #8]
 8008d58:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008d5c:	f7ff ffa2 	bl	8008ca4 <memset>
 8008d60:	4620      	mov	r0, r4
 8008d62:	bd70      	pop	{r4, r5, r6, pc}

08008d64 <__sfp_lock_acquire>:
 8008d64:	4801      	ldr	r0, [pc, #4]	; (8008d6c <__sfp_lock_acquire+0x8>)
 8008d66:	f000 b8b3 	b.w	8008ed0 <__retarget_lock_acquire_recursive>
 8008d6a:	bf00      	nop
 8008d6c:	20000d15 	.word	0x20000d15

08008d70 <__sfp_lock_release>:
 8008d70:	4801      	ldr	r0, [pc, #4]	; (8008d78 <__sfp_lock_release+0x8>)
 8008d72:	f000 b8ae 	b.w	8008ed2 <__retarget_lock_release_recursive>
 8008d76:	bf00      	nop
 8008d78:	20000d15 	.word	0x20000d15

08008d7c <__sinit_lock_acquire>:
 8008d7c:	4801      	ldr	r0, [pc, #4]	; (8008d84 <__sinit_lock_acquire+0x8>)
 8008d7e:	f000 b8a7 	b.w	8008ed0 <__retarget_lock_acquire_recursive>
 8008d82:	bf00      	nop
 8008d84:	20000d16 	.word	0x20000d16

08008d88 <__sinit_lock_release>:
 8008d88:	4801      	ldr	r0, [pc, #4]	; (8008d90 <__sinit_lock_release+0x8>)
 8008d8a:	f000 b8a2 	b.w	8008ed2 <__retarget_lock_release_recursive>
 8008d8e:	bf00      	nop
 8008d90:	20000d16 	.word	0x20000d16

08008d94 <__sinit>:
 8008d94:	b510      	push	{r4, lr}
 8008d96:	4604      	mov	r4, r0
 8008d98:	f7ff fff0 	bl	8008d7c <__sinit_lock_acquire>
 8008d9c:	69a3      	ldr	r3, [r4, #24]
 8008d9e:	b11b      	cbz	r3, 8008da8 <__sinit+0x14>
 8008da0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008da4:	f7ff bff0 	b.w	8008d88 <__sinit_lock_release>
 8008da8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008dac:	6523      	str	r3, [r4, #80]	; 0x50
 8008dae:	4b13      	ldr	r3, [pc, #76]	; (8008dfc <__sinit+0x68>)
 8008db0:	4a13      	ldr	r2, [pc, #76]	; (8008e00 <__sinit+0x6c>)
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	62a2      	str	r2, [r4, #40]	; 0x28
 8008db6:	42a3      	cmp	r3, r4
 8008db8:	bf04      	itt	eq
 8008dba:	2301      	moveq	r3, #1
 8008dbc:	61a3      	streq	r3, [r4, #24]
 8008dbe:	4620      	mov	r0, r4
 8008dc0:	f000 f820 	bl	8008e04 <__sfp>
 8008dc4:	6060      	str	r0, [r4, #4]
 8008dc6:	4620      	mov	r0, r4
 8008dc8:	f000 f81c 	bl	8008e04 <__sfp>
 8008dcc:	60a0      	str	r0, [r4, #8]
 8008dce:	4620      	mov	r0, r4
 8008dd0:	f000 f818 	bl	8008e04 <__sfp>
 8008dd4:	2200      	movs	r2, #0
 8008dd6:	60e0      	str	r0, [r4, #12]
 8008dd8:	2104      	movs	r1, #4
 8008dda:	6860      	ldr	r0, [r4, #4]
 8008ddc:	f7ff ff82 	bl	8008ce4 <std>
 8008de0:	68a0      	ldr	r0, [r4, #8]
 8008de2:	2201      	movs	r2, #1
 8008de4:	2109      	movs	r1, #9
 8008de6:	f7ff ff7d 	bl	8008ce4 <std>
 8008dea:	68e0      	ldr	r0, [r4, #12]
 8008dec:	2202      	movs	r2, #2
 8008dee:	2112      	movs	r1, #18
 8008df0:	f7ff ff78 	bl	8008ce4 <std>
 8008df4:	2301      	movs	r3, #1
 8008df6:	61a3      	str	r3, [r4, #24]
 8008df8:	e7d2      	b.n	8008da0 <__sinit+0xc>
 8008dfa:	bf00      	nop
 8008dfc:	08009eb8 	.word	0x08009eb8
 8008e00:	08008d2d 	.word	0x08008d2d

08008e04 <__sfp>:
 8008e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e06:	4607      	mov	r7, r0
 8008e08:	f7ff ffac 	bl	8008d64 <__sfp_lock_acquire>
 8008e0c:	4b1e      	ldr	r3, [pc, #120]	; (8008e88 <__sfp+0x84>)
 8008e0e:	681e      	ldr	r6, [r3, #0]
 8008e10:	69b3      	ldr	r3, [r6, #24]
 8008e12:	b913      	cbnz	r3, 8008e1a <__sfp+0x16>
 8008e14:	4630      	mov	r0, r6
 8008e16:	f7ff ffbd 	bl	8008d94 <__sinit>
 8008e1a:	3648      	adds	r6, #72	; 0x48
 8008e1c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008e20:	3b01      	subs	r3, #1
 8008e22:	d503      	bpl.n	8008e2c <__sfp+0x28>
 8008e24:	6833      	ldr	r3, [r6, #0]
 8008e26:	b30b      	cbz	r3, 8008e6c <__sfp+0x68>
 8008e28:	6836      	ldr	r6, [r6, #0]
 8008e2a:	e7f7      	b.n	8008e1c <__sfp+0x18>
 8008e2c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008e30:	b9d5      	cbnz	r5, 8008e68 <__sfp+0x64>
 8008e32:	4b16      	ldr	r3, [pc, #88]	; (8008e8c <__sfp+0x88>)
 8008e34:	60e3      	str	r3, [r4, #12]
 8008e36:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008e3a:	6665      	str	r5, [r4, #100]	; 0x64
 8008e3c:	f000 f847 	bl	8008ece <__retarget_lock_init_recursive>
 8008e40:	f7ff ff96 	bl	8008d70 <__sfp_lock_release>
 8008e44:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008e48:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008e4c:	6025      	str	r5, [r4, #0]
 8008e4e:	61a5      	str	r5, [r4, #24]
 8008e50:	2208      	movs	r2, #8
 8008e52:	4629      	mov	r1, r5
 8008e54:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008e58:	f7ff ff24 	bl	8008ca4 <memset>
 8008e5c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008e60:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008e64:	4620      	mov	r0, r4
 8008e66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e68:	3468      	adds	r4, #104	; 0x68
 8008e6a:	e7d9      	b.n	8008e20 <__sfp+0x1c>
 8008e6c:	2104      	movs	r1, #4
 8008e6e:	4638      	mov	r0, r7
 8008e70:	f7ff ff62 	bl	8008d38 <__sfmoreglue>
 8008e74:	4604      	mov	r4, r0
 8008e76:	6030      	str	r0, [r6, #0]
 8008e78:	2800      	cmp	r0, #0
 8008e7a:	d1d5      	bne.n	8008e28 <__sfp+0x24>
 8008e7c:	f7ff ff78 	bl	8008d70 <__sfp_lock_release>
 8008e80:	230c      	movs	r3, #12
 8008e82:	603b      	str	r3, [r7, #0]
 8008e84:	e7ee      	b.n	8008e64 <__sfp+0x60>
 8008e86:	bf00      	nop
 8008e88:	08009eb8 	.word	0x08009eb8
 8008e8c:	ffff0001 	.word	0xffff0001

08008e90 <_fwalk_reent>:
 8008e90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e94:	4606      	mov	r6, r0
 8008e96:	4688      	mov	r8, r1
 8008e98:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008e9c:	2700      	movs	r7, #0
 8008e9e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008ea2:	f1b9 0901 	subs.w	r9, r9, #1
 8008ea6:	d505      	bpl.n	8008eb4 <_fwalk_reent+0x24>
 8008ea8:	6824      	ldr	r4, [r4, #0]
 8008eaa:	2c00      	cmp	r4, #0
 8008eac:	d1f7      	bne.n	8008e9e <_fwalk_reent+0xe>
 8008eae:	4638      	mov	r0, r7
 8008eb0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008eb4:	89ab      	ldrh	r3, [r5, #12]
 8008eb6:	2b01      	cmp	r3, #1
 8008eb8:	d907      	bls.n	8008eca <_fwalk_reent+0x3a>
 8008eba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008ebe:	3301      	adds	r3, #1
 8008ec0:	d003      	beq.n	8008eca <_fwalk_reent+0x3a>
 8008ec2:	4629      	mov	r1, r5
 8008ec4:	4630      	mov	r0, r6
 8008ec6:	47c0      	blx	r8
 8008ec8:	4307      	orrs	r7, r0
 8008eca:	3568      	adds	r5, #104	; 0x68
 8008ecc:	e7e9      	b.n	8008ea2 <_fwalk_reent+0x12>

08008ece <__retarget_lock_init_recursive>:
 8008ece:	4770      	bx	lr

08008ed0 <__retarget_lock_acquire_recursive>:
 8008ed0:	4770      	bx	lr

08008ed2 <__retarget_lock_release_recursive>:
 8008ed2:	4770      	bx	lr

08008ed4 <sbrk_aligned>:
 8008ed4:	b570      	push	{r4, r5, r6, lr}
 8008ed6:	4e0e      	ldr	r6, [pc, #56]	; (8008f10 <sbrk_aligned+0x3c>)
 8008ed8:	460c      	mov	r4, r1
 8008eda:	6831      	ldr	r1, [r6, #0]
 8008edc:	4605      	mov	r5, r0
 8008ede:	b911      	cbnz	r1, 8008ee6 <sbrk_aligned+0x12>
 8008ee0:	f000 fb7a 	bl	80095d8 <_sbrk_r>
 8008ee4:	6030      	str	r0, [r6, #0]
 8008ee6:	4621      	mov	r1, r4
 8008ee8:	4628      	mov	r0, r5
 8008eea:	f000 fb75 	bl	80095d8 <_sbrk_r>
 8008eee:	1c43      	adds	r3, r0, #1
 8008ef0:	d00a      	beq.n	8008f08 <sbrk_aligned+0x34>
 8008ef2:	1cc4      	adds	r4, r0, #3
 8008ef4:	f024 0403 	bic.w	r4, r4, #3
 8008ef8:	42a0      	cmp	r0, r4
 8008efa:	d007      	beq.n	8008f0c <sbrk_aligned+0x38>
 8008efc:	1a21      	subs	r1, r4, r0
 8008efe:	4628      	mov	r0, r5
 8008f00:	f000 fb6a 	bl	80095d8 <_sbrk_r>
 8008f04:	3001      	adds	r0, #1
 8008f06:	d101      	bne.n	8008f0c <sbrk_aligned+0x38>
 8008f08:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8008f0c:	4620      	mov	r0, r4
 8008f0e:	bd70      	pop	{r4, r5, r6, pc}
 8008f10:	20000d1c 	.word	0x20000d1c

08008f14 <_malloc_r>:
 8008f14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f18:	1ccd      	adds	r5, r1, #3
 8008f1a:	f025 0503 	bic.w	r5, r5, #3
 8008f1e:	3508      	adds	r5, #8
 8008f20:	2d0c      	cmp	r5, #12
 8008f22:	bf38      	it	cc
 8008f24:	250c      	movcc	r5, #12
 8008f26:	2d00      	cmp	r5, #0
 8008f28:	4607      	mov	r7, r0
 8008f2a:	db01      	blt.n	8008f30 <_malloc_r+0x1c>
 8008f2c:	42a9      	cmp	r1, r5
 8008f2e:	d905      	bls.n	8008f3c <_malloc_r+0x28>
 8008f30:	230c      	movs	r3, #12
 8008f32:	603b      	str	r3, [r7, #0]
 8008f34:	2600      	movs	r6, #0
 8008f36:	4630      	mov	r0, r6
 8008f38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f3c:	4e2e      	ldr	r6, [pc, #184]	; (8008ff8 <_malloc_r+0xe4>)
 8008f3e:	f000 fdbb 	bl	8009ab8 <__malloc_lock>
 8008f42:	6833      	ldr	r3, [r6, #0]
 8008f44:	461c      	mov	r4, r3
 8008f46:	bb34      	cbnz	r4, 8008f96 <_malloc_r+0x82>
 8008f48:	4629      	mov	r1, r5
 8008f4a:	4638      	mov	r0, r7
 8008f4c:	f7ff ffc2 	bl	8008ed4 <sbrk_aligned>
 8008f50:	1c43      	adds	r3, r0, #1
 8008f52:	4604      	mov	r4, r0
 8008f54:	d14d      	bne.n	8008ff2 <_malloc_r+0xde>
 8008f56:	6834      	ldr	r4, [r6, #0]
 8008f58:	4626      	mov	r6, r4
 8008f5a:	2e00      	cmp	r6, #0
 8008f5c:	d140      	bne.n	8008fe0 <_malloc_r+0xcc>
 8008f5e:	6823      	ldr	r3, [r4, #0]
 8008f60:	4631      	mov	r1, r6
 8008f62:	4638      	mov	r0, r7
 8008f64:	eb04 0803 	add.w	r8, r4, r3
 8008f68:	f000 fb36 	bl	80095d8 <_sbrk_r>
 8008f6c:	4580      	cmp	r8, r0
 8008f6e:	d13a      	bne.n	8008fe6 <_malloc_r+0xd2>
 8008f70:	6821      	ldr	r1, [r4, #0]
 8008f72:	3503      	adds	r5, #3
 8008f74:	1a6d      	subs	r5, r5, r1
 8008f76:	f025 0503 	bic.w	r5, r5, #3
 8008f7a:	3508      	adds	r5, #8
 8008f7c:	2d0c      	cmp	r5, #12
 8008f7e:	bf38      	it	cc
 8008f80:	250c      	movcc	r5, #12
 8008f82:	4629      	mov	r1, r5
 8008f84:	4638      	mov	r0, r7
 8008f86:	f7ff ffa5 	bl	8008ed4 <sbrk_aligned>
 8008f8a:	3001      	adds	r0, #1
 8008f8c:	d02b      	beq.n	8008fe6 <_malloc_r+0xd2>
 8008f8e:	6823      	ldr	r3, [r4, #0]
 8008f90:	442b      	add	r3, r5
 8008f92:	6023      	str	r3, [r4, #0]
 8008f94:	e00e      	b.n	8008fb4 <_malloc_r+0xa0>
 8008f96:	6822      	ldr	r2, [r4, #0]
 8008f98:	1b52      	subs	r2, r2, r5
 8008f9a:	d41e      	bmi.n	8008fda <_malloc_r+0xc6>
 8008f9c:	2a0b      	cmp	r2, #11
 8008f9e:	d916      	bls.n	8008fce <_malloc_r+0xba>
 8008fa0:	1961      	adds	r1, r4, r5
 8008fa2:	42a3      	cmp	r3, r4
 8008fa4:	6025      	str	r5, [r4, #0]
 8008fa6:	bf18      	it	ne
 8008fa8:	6059      	strne	r1, [r3, #4]
 8008faa:	6863      	ldr	r3, [r4, #4]
 8008fac:	bf08      	it	eq
 8008fae:	6031      	streq	r1, [r6, #0]
 8008fb0:	5162      	str	r2, [r4, r5]
 8008fb2:	604b      	str	r3, [r1, #4]
 8008fb4:	4638      	mov	r0, r7
 8008fb6:	f104 060b 	add.w	r6, r4, #11
 8008fba:	f000 fd83 	bl	8009ac4 <__malloc_unlock>
 8008fbe:	f026 0607 	bic.w	r6, r6, #7
 8008fc2:	1d23      	adds	r3, r4, #4
 8008fc4:	1af2      	subs	r2, r6, r3
 8008fc6:	d0b6      	beq.n	8008f36 <_malloc_r+0x22>
 8008fc8:	1b9b      	subs	r3, r3, r6
 8008fca:	50a3      	str	r3, [r4, r2]
 8008fcc:	e7b3      	b.n	8008f36 <_malloc_r+0x22>
 8008fce:	6862      	ldr	r2, [r4, #4]
 8008fd0:	42a3      	cmp	r3, r4
 8008fd2:	bf0c      	ite	eq
 8008fd4:	6032      	streq	r2, [r6, #0]
 8008fd6:	605a      	strne	r2, [r3, #4]
 8008fd8:	e7ec      	b.n	8008fb4 <_malloc_r+0xa0>
 8008fda:	4623      	mov	r3, r4
 8008fdc:	6864      	ldr	r4, [r4, #4]
 8008fde:	e7b2      	b.n	8008f46 <_malloc_r+0x32>
 8008fe0:	4634      	mov	r4, r6
 8008fe2:	6876      	ldr	r6, [r6, #4]
 8008fe4:	e7b9      	b.n	8008f5a <_malloc_r+0x46>
 8008fe6:	230c      	movs	r3, #12
 8008fe8:	603b      	str	r3, [r7, #0]
 8008fea:	4638      	mov	r0, r7
 8008fec:	f000 fd6a 	bl	8009ac4 <__malloc_unlock>
 8008ff0:	e7a1      	b.n	8008f36 <_malloc_r+0x22>
 8008ff2:	6025      	str	r5, [r4, #0]
 8008ff4:	e7de      	b.n	8008fb4 <_malloc_r+0xa0>
 8008ff6:	bf00      	nop
 8008ff8:	20000d18 	.word	0x20000d18

08008ffc <__sfputc_r>:
 8008ffc:	6893      	ldr	r3, [r2, #8]
 8008ffe:	3b01      	subs	r3, #1
 8009000:	2b00      	cmp	r3, #0
 8009002:	b410      	push	{r4}
 8009004:	6093      	str	r3, [r2, #8]
 8009006:	da08      	bge.n	800901a <__sfputc_r+0x1e>
 8009008:	6994      	ldr	r4, [r2, #24]
 800900a:	42a3      	cmp	r3, r4
 800900c:	db01      	blt.n	8009012 <__sfputc_r+0x16>
 800900e:	290a      	cmp	r1, #10
 8009010:	d103      	bne.n	800901a <__sfputc_r+0x1e>
 8009012:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009016:	f000 bb33 	b.w	8009680 <__swbuf_r>
 800901a:	6813      	ldr	r3, [r2, #0]
 800901c:	1c58      	adds	r0, r3, #1
 800901e:	6010      	str	r0, [r2, #0]
 8009020:	7019      	strb	r1, [r3, #0]
 8009022:	4608      	mov	r0, r1
 8009024:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009028:	4770      	bx	lr

0800902a <__sfputs_r>:
 800902a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800902c:	4606      	mov	r6, r0
 800902e:	460f      	mov	r7, r1
 8009030:	4614      	mov	r4, r2
 8009032:	18d5      	adds	r5, r2, r3
 8009034:	42ac      	cmp	r4, r5
 8009036:	d101      	bne.n	800903c <__sfputs_r+0x12>
 8009038:	2000      	movs	r0, #0
 800903a:	e007      	b.n	800904c <__sfputs_r+0x22>
 800903c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009040:	463a      	mov	r2, r7
 8009042:	4630      	mov	r0, r6
 8009044:	f7ff ffda 	bl	8008ffc <__sfputc_r>
 8009048:	1c43      	adds	r3, r0, #1
 800904a:	d1f3      	bne.n	8009034 <__sfputs_r+0xa>
 800904c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009050 <_vfiprintf_r>:
 8009050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009054:	460d      	mov	r5, r1
 8009056:	b09d      	sub	sp, #116	; 0x74
 8009058:	4614      	mov	r4, r2
 800905a:	4698      	mov	r8, r3
 800905c:	4606      	mov	r6, r0
 800905e:	b118      	cbz	r0, 8009068 <_vfiprintf_r+0x18>
 8009060:	6983      	ldr	r3, [r0, #24]
 8009062:	b90b      	cbnz	r3, 8009068 <_vfiprintf_r+0x18>
 8009064:	f7ff fe96 	bl	8008d94 <__sinit>
 8009068:	4b89      	ldr	r3, [pc, #548]	; (8009290 <_vfiprintf_r+0x240>)
 800906a:	429d      	cmp	r5, r3
 800906c:	d11b      	bne.n	80090a6 <_vfiprintf_r+0x56>
 800906e:	6875      	ldr	r5, [r6, #4]
 8009070:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009072:	07d9      	lsls	r1, r3, #31
 8009074:	d405      	bmi.n	8009082 <_vfiprintf_r+0x32>
 8009076:	89ab      	ldrh	r3, [r5, #12]
 8009078:	059a      	lsls	r2, r3, #22
 800907a:	d402      	bmi.n	8009082 <_vfiprintf_r+0x32>
 800907c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800907e:	f7ff ff27 	bl	8008ed0 <__retarget_lock_acquire_recursive>
 8009082:	89ab      	ldrh	r3, [r5, #12]
 8009084:	071b      	lsls	r3, r3, #28
 8009086:	d501      	bpl.n	800908c <_vfiprintf_r+0x3c>
 8009088:	692b      	ldr	r3, [r5, #16]
 800908a:	b9eb      	cbnz	r3, 80090c8 <_vfiprintf_r+0x78>
 800908c:	4629      	mov	r1, r5
 800908e:	4630      	mov	r0, r6
 8009090:	f000 fb5a 	bl	8009748 <__swsetup_r>
 8009094:	b1c0      	cbz	r0, 80090c8 <_vfiprintf_r+0x78>
 8009096:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009098:	07dc      	lsls	r4, r3, #31
 800909a:	d50e      	bpl.n	80090ba <_vfiprintf_r+0x6a>
 800909c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80090a0:	b01d      	add	sp, #116	; 0x74
 80090a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090a6:	4b7b      	ldr	r3, [pc, #492]	; (8009294 <_vfiprintf_r+0x244>)
 80090a8:	429d      	cmp	r5, r3
 80090aa:	d101      	bne.n	80090b0 <_vfiprintf_r+0x60>
 80090ac:	68b5      	ldr	r5, [r6, #8]
 80090ae:	e7df      	b.n	8009070 <_vfiprintf_r+0x20>
 80090b0:	4b79      	ldr	r3, [pc, #484]	; (8009298 <_vfiprintf_r+0x248>)
 80090b2:	429d      	cmp	r5, r3
 80090b4:	bf08      	it	eq
 80090b6:	68f5      	ldreq	r5, [r6, #12]
 80090b8:	e7da      	b.n	8009070 <_vfiprintf_r+0x20>
 80090ba:	89ab      	ldrh	r3, [r5, #12]
 80090bc:	0598      	lsls	r0, r3, #22
 80090be:	d4ed      	bmi.n	800909c <_vfiprintf_r+0x4c>
 80090c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80090c2:	f7ff ff06 	bl	8008ed2 <__retarget_lock_release_recursive>
 80090c6:	e7e9      	b.n	800909c <_vfiprintf_r+0x4c>
 80090c8:	2300      	movs	r3, #0
 80090ca:	9309      	str	r3, [sp, #36]	; 0x24
 80090cc:	2320      	movs	r3, #32
 80090ce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80090d2:	f8cd 800c 	str.w	r8, [sp, #12]
 80090d6:	2330      	movs	r3, #48	; 0x30
 80090d8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800929c <_vfiprintf_r+0x24c>
 80090dc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80090e0:	f04f 0901 	mov.w	r9, #1
 80090e4:	4623      	mov	r3, r4
 80090e6:	469a      	mov	sl, r3
 80090e8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80090ec:	b10a      	cbz	r2, 80090f2 <_vfiprintf_r+0xa2>
 80090ee:	2a25      	cmp	r2, #37	; 0x25
 80090f0:	d1f9      	bne.n	80090e6 <_vfiprintf_r+0x96>
 80090f2:	ebba 0b04 	subs.w	fp, sl, r4
 80090f6:	d00b      	beq.n	8009110 <_vfiprintf_r+0xc0>
 80090f8:	465b      	mov	r3, fp
 80090fa:	4622      	mov	r2, r4
 80090fc:	4629      	mov	r1, r5
 80090fe:	4630      	mov	r0, r6
 8009100:	f7ff ff93 	bl	800902a <__sfputs_r>
 8009104:	3001      	adds	r0, #1
 8009106:	f000 80aa 	beq.w	800925e <_vfiprintf_r+0x20e>
 800910a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800910c:	445a      	add	r2, fp
 800910e:	9209      	str	r2, [sp, #36]	; 0x24
 8009110:	f89a 3000 	ldrb.w	r3, [sl]
 8009114:	2b00      	cmp	r3, #0
 8009116:	f000 80a2 	beq.w	800925e <_vfiprintf_r+0x20e>
 800911a:	2300      	movs	r3, #0
 800911c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009120:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009124:	f10a 0a01 	add.w	sl, sl, #1
 8009128:	9304      	str	r3, [sp, #16]
 800912a:	9307      	str	r3, [sp, #28]
 800912c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009130:	931a      	str	r3, [sp, #104]	; 0x68
 8009132:	4654      	mov	r4, sl
 8009134:	2205      	movs	r2, #5
 8009136:	f814 1b01 	ldrb.w	r1, [r4], #1
 800913a:	4858      	ldr	r0, [pc, #352]	; (800929c <_vfiprintf_r+0x24c>)
 800913c:	f7f7 f828 	bl	8000190 <memchr>
 8009140:	9a04      	ldr	r2, [sp, #16]
 8009142:	b9d8      	cbnz	r0, 800917c <_vfiprintf_r+0x12c>
 8009144:	06d1      	lsls	r1, r2, #27
 8009146:	bf44      	itt	mi
 8009148:	2320      	movmi	r3, #32
 800914a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800914e:	0713      	lsls	r3, r2, #28
 8009150:	bf44      	itt	mi
 8009152:	232b      	movmi	r3, #43	; 0x2b
 8009154:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009158:	f89a 3000 	ldrb.w	r3, [sl]
 800915c:	2b2a      	cmp	r3, #42	; 0x2a
 800915e:	d015      	beq.n	800918c <_vfiprintf_r+0x13c>
 8009160:	9a07      	ldr	r2, [sp, #28]
 8009162:	4654      	mov	r4, sl
 8009164:	2000      	movs	r0, #0
 8009166:	f04f 0c0a 	mov.w	ip, #10
 800916a:	4621      	mov	r1, r4
 800916c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009170:	3b30      	subs	r3, #48	; 0x30
 8009172:	2b09      	cmp	r3, #9
 8009174:	d94e      	bls.n	8009214 <_vfiprintf_r+0x1c4>
 8009176:	b1b0      	cbz	r0, 80091a6 <_vfiprintf_r+0x156>
 8009178:	9207      	str	r2, [sp, #28]
 800917a:	e014      	b.n	80091a6 <_vfiprintf_r+0x156>
 800917c:	eba0 0308 	sub.w	r3, r0, r8
 8009180:	fa09 f303 	lsl.w	r3, r9, r3
 8009184:	4313      	orrs	r3, r2
 8009186:	9304      	str	r3, [sp, #16]
 8009188:	46a2      	mov	sl, r4
 800918a:	e7d2      	b.n	8009132 <_vfiprintf_r+0xe2>
 800918c:	9b03      	ldr	r3, [sp, #12]
 800918e:	1d19      	adds	r1, r3, #4
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	9103      	str	r1, [sp, #12]
 8009194:	2b00      	cmp	r3, #0
 8009196:	bfbb      	ittet	lt
 8009198:	425b      	neglt	r3, r3
 800919a:	f042 0202 	orrlt.w	r2, r2, #2
 800919e:	9307      	strge	r3, [sp, #28]
 80091a0:	9307      	strlt	r3, [sp, #28]
 80091a2:	bfb8      	it	lt
 80091a4:	9204      	strlt	r2, [sp, #16]
 80091a6:	7823      	ldrb	r3, [r4, #0]
 80091a8:	2b2e      	cmp	r3, #46	; 0x2e
 80091aa:	d10c      	bne.n	80091c6 <_vfiprintf_r+0x176>
 80091ac:	7863      	ldrb	r3, [r4, #1]
 80091ae:	2b2a      	cmp	r3, #42	; 0x2a
 80091b0:	d135      	bne.n	800921e <_vfiprintf_r+0x1ce>
 80091b2:	9b03      	ldr	r3, [sp, #12]
 80091b4:	1d1a      	adds	r2, r3, #4
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	9203      	str	r2, [sp, #12]
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	bfb8      	it	lt
 80091be:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80091c2:	3402      	adds	r4, #2
 80091c4:	9305      	str	r3, [sp, #20]
 80091c6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80092ac <_vfiprintf_r+0x25c>
 80091ca:	7821      	ldrb	r1, [r4, #0]
 80091cc:	2203      	movs	r2, #3
 80091ce:	4650      	mov	r0, sl
 80091d0:	f7f6 ffde 	bl	8000190 <memchr>
 80091d4:	b140      	cbz	r0, 80091e8 <_vfiprintf_r+0x198>
 80091d6:	2340      	movs	r3, #64	; 0x40
 80091d8:	eba0 000a 	sub.w	r0, r0, sl
 80091dc:	fa03 f000 	lsl.w	r0, r3, r0
 80091e0:	9b04      	ldr	r3, [sp, #16]
 80091e2:	4303      	orrs	r3, r0
 80091e4:	3401      	adds	r4, #1
 80091e6:	9304      	str	r3, [sp, #16]
 80091e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091ec:	482c      	ldr	r0, [pc, #176]	; (80092a0 <_vfiprintf_r+0x250>)
 80091ee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80091f2:	2206      	movs	r2, #6
 80091f4:	f7f6 ffcc 	bl	8000190 <memchr>
 80091f8:	2800      	cmp	r0, #0
 80091fa:	d03f      	beq.n	800927c <_vfiprintf_r+0x22c>
 80091fc:	4b29      	ldr	r3, [pc, #164]	; (80092a4 <_vfiprintf_r+0x254>)
 80091fe:	bb1b      	cbnz	r3, 8009248 <_vfiprintf_r+0x1f8>
 8009200:	9b03      	ldr	r3, [sp, #12]
 8009202:	3307      	adds	r3, #7
 8009204:	f023 0307 	bic.w	r3, r3, #7
 8009208:	3308      	adds	r3, #8
 800920a:	9303      	str	r3, [sp, #12]
 800920c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800920e:	443b      	add	r3, r7
 8009210:	9309      	str	r3, [sp, #36]	; 0x24
 8009212:	e767      	b.n	80090e4 <_vfiprintf_r+0x94>
 8009214:	fb0c 3202 	mla	r2, ip, r2, r3
 8009218:	460c      	mov	r4, r1
 800921a:	2001      	movs	r0, #1
 800921c:	e7a5      	b.n	800916a <_vfiprintf_r+0x11a>
 800921e:	2300      	movs	r3, #0
 8009220:	3401      	adds	r4, #1
 8009222:	9305      	str	r3, [sp, #20]
 8009224:	4619      	mov	r1, r3
 8009226:	f04f 0c0a 	mov.w	ip, #10
 800922a:	4620      	mov	r0, r4
 800922c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009230:	3a30      	subs	r2, #48	; 0x30
 8009232:	2a09      	cmp	r2, #9
 8009234:	d903      	bls.n	800923e <_vfiprintf_r+0x1ee>
 8009236:	2b00      	cmp	r3, #0
 8009238:	d0c5      	beq.n	80091c6 <_vfiprintf_r+0x176>
 800923a:	9105      	str	r1, [sp, #20]
 800923c:	e7c3      	b.n	80091c6 <_vfiprintf_r+0x176>
 800923e:	fb0c 2101 	mla	r1, ip, r1, r2
 8009242:	4604      	mov	r4, r0
 8009244:	2301      	movs	r3, #1
 8009246:	e7f0      	b.n	800922a <_vfiprintf_r+0x1da>
 8009248:	ab03      	add	r3, sp, #12
 800924a:	9300      	str	r3, [sp, #0]
 800924c:	462a      	mov	r2, r5
 800924e:	4b16      	ldr	r3, [pc, #88]	; (80092a8 <_vfiprintf_r+0x258>)
 8009250:	a904      	add	r1, sp, #16
 8009252:	4630      	mov	r0, r6
 8009254:	f3af 8000 	nop.w
 8009258:	4607      	mov	r7, r0
 800925a:	1c78      	adds	r0, r7, #1
 800925c:	d1d6      	bne.n	800920c <_vfiprintf_r+0x1bc>
 800925e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009260:	07d9      	lsls	r1, r3, #31
 8009262:	d405      	bmi.n	8009270 <_vfiprintf_r+0x220>
 8009264:	89ab      	ldrh	r3, [r5, #12]
 8009266:	059a      	lsls	r2, r3, #22
 8009268:	d402      	bmi.n	8009270 <_vfiprintf_r+0x220>
 800926a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800926c:	f7ff fe31 	bl	8008ed2 <__retarget_lock_release_recursive>
 8009270:	89ab      	ldrh	r3, [r5, #12]
 8009272:	065b      	lsls	r3, r3, #25
 8009274:	f53f af12 	bmi.w	800909c <_vfiprintf_r+0x4c>
 8009278:	9809      	ldr	r0, [sp, #36]	; 0x24
 800927a:	e711      	b.n	80090a0 <_vfiprintf_r+0x50>
 800927c:	ab03      	add	r3, sp, #12
 800927e:	9300      	str	r3, [sp, #0]
 8009280:	462a      	mov	r2, r5
 8009282:	4b09      	ldr	r3, [pc, #36]	; (80092a8 <_vfiprintf_r+0x258>)
 8009284:	a904      	add	r1, sp, #16
 8009286:	4630      	mov	r0, r6
 8009288:	f000 f880 	bl	800938c <_printf_i>
 800928c:	e7e4      	b.n	8009258 <_vfiprintf_r+0x208>
 800928e:	bf00      	nop
 8009290:	08009edc 	.word	0x08009edc
 8009294:	08009efc 	.word	0x08009efc
 8009298:	08009ebc 	.word	0x08009ebc
 800929c:	08009f1c 	.word	0x08009f1c
 80092a0:	08009f26 	.word	0x08009f26
 80092a4:	00000000 	.word	0x00000000
 80092a8:	0800902b 	.word	0x0800902b
 80092ac:	08009f22 	.word	0x08009f22

080092b0 <_printf_common>:
 80092b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80092b4:	4616      	mov	r6, r2
 80092b6:	4699      	mov	r9, r3
 80092b8:	688a      	ldr	r2, [r1, #8]
 80092ba:	690b      	ldr	r3, [r1, #16]
 80092bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80092c0:	4293      	cmp	r3, r2
 80092c2:	bfb8      	it	lt
 80092c4:	4613      	movlt	r3, r2
 80092c6:	6033      	str	r3, [r6, #0]
 80092c8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80092cc:	4607      	mov	r7, r0
 80092ce:	460c      	mov	r4, r1
 80092d0:	b10a      	cbz	r2, 80092d6 <_printf_common+0x26>
 80092d2:	3301      	adds	r3, #1
 80092d4:	6033      	str	r3, [r6, #0]
 80092d6:	6823      	ldr	r3, [r4, #0]
 80092d8:	0699      	lsls	r1, r3, #26
 80092da:	bf42      	ittt	mi
 80092dc:	6833      	ldrmi	r3, [r6, #0]
 80092de:	3302      	addmi	r3, #2
 80092e0:	6033      	strmi	r3, [r6, #0]
 80092e2:	6825      	ldr	r5, [r4, #0]
 80092e4:	f015 0506 	ands.w	r5, r5, #6
 80092e8:	d106      	bne.n	80092f8 <_printf_common+0x48>
 80092ea:	f104 0a19 	add.w	sl, r4, #25
 80092ee:	68e3      	ldr	r3, [r4, #12]
 80092f0:	6832      	ldr	r2, [r6, #0]
 80092f2:	1a9b      	subs	r3, r3, r2
 80092f4:	42ab      	cmp	r3, r5
 80092f6:	dc26      	bgt.n	8009346 <_printf_common+0x96>
 80092f8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80092fc:	1e13      	subs	r3, r2, #0
 80092fe:	6822      	ldr	r2, [r4, #0]
 8009300:	bf18      	it	ne
 8009302:	2301      	movne	r3, #1
 8009304:	0692      	lsls	r2, r2, #26
 8009306:	d42b      	bmi.n	8009360 <_printf_common+0xb0>
 8009308:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800930c:	4649      	mov	r1, r9
 800930e:	4638      	mov	r0, r7
 8009310:	47c0      	blx	r8
 8009312:	3001      	adds	r0, #1
 8009314:	d01e      	beq.n	8009354 <_printf_common+0xa4>
 8009316:	6823      	ldr	r3, [r4, #0]
 8009318:	68e5      	ldr	r5, [r4, #12]
 800931a:	6832      	ldr	r2, [r6, #0]
 800931c:	f003 0306 	and.w	r3, r3, #6
 8009320:	2b04      	cmp	r3, #4
 8009322:	bf08      	it	eq
 8009324:	1aad      	subeq	r5, r5, r2
 8009326:	68a3      	ldr	r3, [r4, #8]
 8009328:	6922      	ldr	r2, [r4, #16]
 800932a:	bf0c      	ite	eq
 800932c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009330:	2500      	movne	r5, #0
 8009332:	4293      	cmp	r3, r2
 8009334:	bfc4      	itt	gt
 8009336:	1a9b      	subgt	r3, r3, r2
 8009338:	18ed      	addgt	r5, r5, r3
 800933a:	2600      	movs	r6, #0
 800933c:	341a      	adds	r4, #26
 800933e:	42b5      	cmp	r5, r6
 8009340:	d11a      	bne.n	8009378 <_printf_common+0xc8>
 8009342:	2000      	movs	r0, #0
 8009344:	e008      	b.n	8009358 <_printf_common+0xa8>
 8009346:	2301      	movs	r3, #1
 8009348:	4652      	mov	r2, sl
 800934a:	4649      	mov	r1, r9
 800934c:	4638      	mov	r0, r7
 800934e:	47c0      	blx	r8
 8009350:	3001      	adds	r0, #1
 8009352:	d103      	bne.n	800935c <_printf_common+0xac>
 8009354:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800935c:	3501      	adds	r5, #1
 800935e:	e7c6      	b.n	80092ee <_printf_common+0x3e>
 8009360:	18e1      	adds	r1, r4, r3
 8009362:	1c5a      	adds	r2, r3, #1
 8009364:	2030      	movs	r0, #48	; 0x30
 8009366:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800936a:	4422      	add	r2, r4
 800936c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009370:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009374:	3302      	adds	r3, #2
 8009376:	e7c7      	b.n	8009308 <_printf_common+0x58>
 8009378:	2301      	movs	r3, #1
 800937a:	4622      	mov	r2, r4
 800937c:	4649      	mov	r1, r9
 800937e:	4638      	mov	r0, r7
 8009380:	47c0      	blx	r8
 8009382:	3001      	adds	r0, #1
 8009384:	d0e6      	beq.n	8009354 <_printf_common+0xa4>
 8009386:	3601      	adds	r6, #1
 8009388:	e7d9      	b.n	800933e <_printf_common+0x8e>
	...

0800938c <_printf_i>:
 800938c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009390:	7e0f      	ldrb	r7, [r1, #24]
 8009392:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009394:	2f78      	cmp	r7, #120	; 0x78
 8009396:	4691      	mov	r9, r2
 8009398:	4680      	mov	r8, r0
 800939a:	460c      	mov	r4, r1
 800939c:	469a      	mov	sl, r3
 800939e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80093a2:	d807      	bhi.n	80093b4 <_printf_i+0x28>
 80093a4:	2f62      	cmp	r7, #98	; 0x62
 80093a6:	d80a      	bhi.n	80093be <_printf_i+0x32>
 80093a8:	2f00      	cmp	r7, #0
 80093aa:	f000 80d8 	beq.w	800955e <_printf_i+0x1d2>
 80093ae:	2f58      	cmp	r7, #88	; 0x58
 80093b0:	f000 80a3 	beq.w	80094fa <_printf_i+0x16e>
 80093b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80093b8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80093bc:	e03a      	b.n	8009434 <_printf_i+0xa8>
 80093be:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80093c2:	2b15      	cmp	r3, #21
 80093c4:	d8f6      	bhi.n	80093b4 <_printf_i+0x28>
 80093c6:	a101      	add	r1, pc, #4	; (adr r1, 80093cc <_printf_i+0x40>)
 80093c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80093cc:	08009425 	.word	0x08009425
 80093d0:	08009439 	.word	0x08009439
 80093d4:	080093b5 	.word	0x080093b5
 80093d8:	080093b5 	.word	0x080093b5
 80093dc:	080093b5 	.word	0x080093b5
 80093e0:	080093b5 	.word	0x080093b5
 80093e4:	08009439 	.word	0x08009439
 80093e8:	080093b5 	.word	0x080093b5
 80093ec:	080093b5 	.word	0x080093b5
 80093f0:	080093b5 	.word	0x080093b5
 80093f4:	080093b5 	.word	0x080093b5
 80093f8:	08009545 	.word	0x08009545
 80093fc:	08009469 	.word	0x08009469
 8009400:	08009527 	.word	0x08009527
 8009404:	080093b5 	.word	0x080093b5
 8009408:	080093b5 	.word	0x080093b5
 800940c:	08009567 	.word	0x08009567
 8009410:	080093b5 	.word	0x080093b5
 8009414:	08009469 	.word	0x08009469
 8009418:	080093b5 	.word	0x080093b5
 800941c:	080093b5 	.word	0x080093b5
 8009420:	0800952f 	.word	0x0800952f
 8009424:	682b      	ldr	r3, [r5, #0]
 8009426:	1d1a      	adds	r2, r3, #4
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	602a      	str	r2, [r5, #0]
 800942c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009430:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009434:	2301      	movs	r3, #1
 8009436:	e0a3      	b.n	8009580 <_printf_i+0x1f4>
 8009438:	6820      	ldr	r0, [r4, #0]
 800943a:	6829      	ldr	r1, [r5, #0]
 800943c:	0606      	lsls	r6, r0, #24
 800943e:	f101 0304 	add.w	r3, r1, #4
 8009442:	d50a      	bpl.n	800945a <_printf_i+0xce>
 8009444:	680e      	ldr	r6, [r1, #0]
 8009446:	602b      	str	r3, [r5, #0]
 8009448:	2e00      	cmp	r6, #0
 800944a:	da03      	bge.n	8009454 <_printf_i+0xc8>
 800944c:	232d      	movs	r3, #45	; 0x2d
 800944e:	4276      	negs	r6, r6
 8009450:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009454:	485e      	ldr	r0, [pc, #376]	; (80095d0 <_printf_i+0x244>)
 8009456:	230a      	movs	r3, #10
 8009458:	e019      	b.n	800948e <_printf_i+0x102>
 800945a:	680e      	ldr	r6, [r1, #0]
 800945c:	602b      	str	r3, [r5, #0]
 800945e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009462:	bf18      	it	ne
 8009464:	b236      	sxthne	r6, r6
 8009466:	e7ef      	b.n	8009448 <_printf_i+0xbc>
 8009468:	682b      	ldr	r3, [r5, #0]
 800946a:	6820      	ldr	r0, [r4, #0]
 800946c:	1d19      	adds	r1, r3, #4
 800946e:	6029      	str	r1, [r5, #0]
 8009470:	0601      	lsls	r1, r0, #24
 8009472:	d501      	bpl.n	8009478 <_printf_i+0xec>
 8009474:	681e      	ldr	r6, [r3, #0]
 8009476:	e002      	b.n	800947e <_printf_i+0xf2>
 8009478:	0646      	lsls	r6, r0, #25
 800947a:	d5fb      	bpl.n	8009474 <_printf_i+0xe8>
 800947c:	881e      	ldrh	r6, [r3, #0]
 800947e:	4854      	ldr	r0, [pc, #336]	; (80095d0 <_printf_i+0x244>)
 8009480:	2f6f      	cmp	r7, #111	; 0x6f
 8009482:	bf0c      	ite	eq
 8009484:	2308      	moveq	r3, #8
 8009486:	230a      	movne	r3, #10
 8009488:	2100      	movs	r1, #0
 800948a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800948e:	6865      	ldr	r5, [r4, #4]
 8009490:	60a5      	str	r5, [r4, #8]
 8009492:	2d00      	cmp	r5, #0
 8009494:	bfa2      	ittt	ge
 8009496:	6821      	ldrge	r1, [r4, #0]
 8009498:	f021 0104 	bicge.w	r1, r1, #4
 800949c:	6021      	strge	r1, [r4, #0]
 800949e:	b90e      	cbnz	r6, 80094a4 <_printf_i+0x118>
 80094a0:	2d00      	cmp	r5, #0
 80094a2:	d04d      	beq.n	8009540 <_printf_i+0x1b4>
 80094a4:	4615      	mov	r5, r2
 80094a6:	fbb6 f1f3 	udiv	r1, r6, r3
 80094aa:	fb03 6711 	mls	r7, r3, r1, r6
 80094ae:	5dc7      	ldrb	r7, [r0, r7]
 80094b0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80094b4:	4637      	mov	r7, r6
 80094b6:	42bb      	cmp	r3, r7
 80094b8:	460e      	mov	r6, r1
 80094ba:	d9f4      	bls.n	80094a6 <_printf_i+0x11a>
 80094bc:	2b08      	cmp	r3, #8
 80094be:	d10b      	bne.n	80094d8 <_printf_i+0x14c>
 80094c0:	6823      	ldr	r3, [r4, #0]
 80094c2:	07de      	lsls	r6, r3, #31
 80094c4:	d508      	bpl.n	80094d8 <_printf_i+0x14c>
 80094c6:	6923      	ldr	r3, [r4, #16]
 80094c8:	6861      	ldr	r1, [r4, #4]
 80094ca:	4299      	cmp	r1, r3
 80094cc:	bfde      	ittt	le
 80094ce:	2330      	movle	r3, #48	; 0x30
 80094d0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80094d4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80094d8:	1b52      	subs	r2, r2, r5
 80094da:	6122      	str	r2, [r4, #16]
 80094dc:	f8cd a000 	str.w	sl, [sp]
 80094e0:	464b      	mov	r3, r9
 80094e2:	aa03      	add	r2, sp, #12
 80094e4:	4621      	mov	r1, r4
 80094e6:	4640      	mov	r0, r8
 80094e8:	f7ff fee2 	bl	80092b0 <_printf_common>
 80094ec:	3001      	adds	r0, #1
 80094ee:	d14c      	bne.n	800958a <_printf_i+0x1fe>
 80094f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80094f4:	b004      	add	sp, #16
 80094f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094fa:	4835      	ldr	r0, [pc, #212]	; (80095d0 <_printf_i+0x244>)
 80094fc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009500:	6829      	ldr	r1, [r5, #0]
 8009502:	6823      	ldr	r3, [r4, #0]
 8009504:	f851 6b04 	ldr.w	r6, [r1], #4
 8009508:	6029      	str	r1, [r5, #0]
 800950a:	061d      	lsls	r5, r3, #24
 800950c:	d514      	bpl.n	8009538 <_printf_i+0x1ac>
 800950e:	07df      	lsls	r7, r3, #31
 8009510:	bf44      	itt	mi
 8009512:	f043 0320 	orrmi.w	r3, r3, #32
 8009516:	6023      	strmi	r3, [r4, #0]
 8009518:	b91e      	cbnz	r6, 8009522 <_printf_i+0x196>
 800951a:	6823      	ldr	r3, [r4, #0]
 800951c:	f023 0320 	bic.w	r3, r3, #32
 8009520:	6023      	str	r3, [r4, #0]
 8009522:	2310      	movs	r3, #16
 8009524:	e7b0      	b.n	8009488 <_printf_i+0xfc>
 8009526:	6823      	ldr	r3, [r4, #0]
 8009528:	f043 0320 	orr.w	r3, r3, #32
 800952c:	6023      	str	r3, [r4, #0]
 800952e:	2378      	movs	r3, #120	; 0x78
 8009530:	4828      	ldr	r0, [pc, #160]	; (80095d4 <_printf_i+0x248>)
 8009532:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009536:	e7e3      	b.n	8009500 <_printf_i+0x174>
 8009538:	0659      	lsls	r1, r3, #25
 800953a:	bf48      	it	mi
 800953c:	b2b6      	uxthmi	r6, r6
 800953e:	e7e6      	b.n	800950e <_printf_i+0x182>
 8009540:	4615      	mov	r5, r2
 8009542:	e7bb      	b.n	80094bc <_printf_i+0x130>
 8009544:	682b      	ldr	r3, [r5, #0]
 8009546:	6826      	ldr	r6, [r4, #0]
 8009548:	6961      	ldr	r1, [r4, #20]
 800954a:	1d18      	adds	r0, r3, #4
 800954c:	6028      	str	r0, [r5, #0]
 800954e:	0635      	lsls	r5, r6, #24
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	d501      	bpl.n	8009558 <_printf_i+0x1cc>
 8009554:	6019      	str	r1, [r3, #0]
 8009556:	e002      	b.n	800955e <_printf_i+0x1d2>
 8009558:	0670      	lsls	r0, r6, #25
 800955a:	d5fb      	bpl.n	8009554 <_printf_i+0x1c8>
 800955c:	8019      	strh	r1, [r3, #0]
 800955e:	2300      	movs	r3, #0
 8009560:	6123      	str	r3, [r4, #16]
 8009562:	4615      	mov	r5, r2
 8009564:	e7ba      	b.n	80094dc <_printf_i+0x150>
 8009566:	682b      	ldr	r3, [r5, #0]
 8009568:	1d1a      	adds	r2, r3, #4
 800956a:	602a      	str	r2, [r5, #0]
 800956c:	681d      	ldr	r5, [r3, #0]
 800956e:	6862      	ldr	r2, [r4, #4]
 8009570:	2100      	movs	r1, #0
 8009572:	4628      	mov	r0, r5
 8009574:	f7f6 fe0c 	bl	8000190 <memchr>
 8009578:	b108      	cbz	r0, 800957e <_printf_i+0x1f2>
 800957a:	1b40      	subs	r0, r0, r5
 800957c:	6060      	str	r0, [r4, #4]
 800957e:	6863      	ldr	r3, [r4, #4]
 8009580:	6123      	str	r3, [r4, #16]
 8009582:	2300      	movs	r3, #0
 8009584:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009588:	e7a8      	b.n	80094dc <_printf_i+0x150>
 800958a:	6923      	ldr	r3, [r4, #16]
 800958c:	462a      	mov	r2, r5
 800958e:	4649      	mov	r1, r9
 8009590:	4640      	mov	r0, r8
 8009592:	47d0      	blx	sl
 8009594:	3001      	adds	r0, #1
 8009596:	d0ab      	beq.n	80094f0 <_printf_i+0x164>
 8009598:	6823      	ldr	r3, [r4, #0]
 800959a:	079b      	lsls	r3, r3, #30
 800959c:	d413      	bmi.n	80095c6 <_printf_i+0x23a>
 800959e:	68e0      	ldr	r0, [r4, #12]
 80095a0:	9b03      	ldr	r3, [sp, #12]
 80095a2:	4298      	cmp	r0, r3
 80095a4:	bfb8      	it	lt
 80095a6:	4618      	movlt	r0, r3
 80095a8:	e7a4      	b.n	80094f4 <_printf_i+0x168>
 80095aa:	2301      	movs	r3, #1
 80095ac:	4632      	mov	r2, r6
 80095ae:	4649      	mov	r1, r9
 80095b0:	4640      	mov	r0, r8
 80095b2:	47d0      	blx	sl
 80095b4:	3001      	adds	r0, #1
 80095b6:	d09b      	beq.n	80094f0 <_printf_i+0x164>
 80095b8:	3501      	adds	r5, #1
 80095ba:	68e3      	ldr	r3, [r4, #12]
 80095bc:	9903      	ldr	r1, [sp, #12]
 80095be:	1a5b      	subs	r3, r3, r1
 80095c0:	42ab      	cmp	r3, r5
 80095c2:	dcf2      	bgt.n	80095aa <_printf_i+0x21e>
 80095c4:	e7eb      	b.n	800959e <_printf_i+0x212>
 80095c6:	2500      	movs	r5, #0
 80095c8:	f104 0619 	add.w	r6, r4, #25
 80095cc:	e7f5      	b.n	80095ba <_printf_i+0x22e>
 80095ce:	bf00      	nop
 80095d0:	08009f2d 	.word	0x08009f2d
 80095d4:	08009f3e 	.word	0x08009f3e

080095d8 <_sbrk_r>:
 80095d8:	b538      	push	{r3, r4, r5, lr}
 80095da:	4d06      	ldr	r5, [pc, #24]	; (80095f4 <_sbrk_r+0x1c>)
 80095dc:	2300      	movs	r3, #0
 80095de:	4604      	mov	r4, r0
 80095e0:	4608      	mov	r0, r1
 80095e2:	602b      	str	r3, [r5, #0]
 80095e4:	f7f8 fd6c 	bl	80020c0 <_sbrk>
 80095e8:	1c43      	adds	r3, r0, #1
 80095ea:	d102      	bne.n	80095f2 <_sbrk_r+0x1a>
 80095ec:	682b      	ldr	r3, [r5, #0]
 80095ee:	b103      	cbz	r3, 80095f2 <_sbrk_r+0x1a>
 80095f0:	6023      	str	r3, [r4, #0]
 80095f2:	bd38      	pop	{r3, r4, r5, pc}
 80095f4:	20000d20 	.word	0x20000d20

080095f8 <__sread>:
 80095f8:	b510      	push	{r4, lr}
 80095fa:	460c      	mov	r4, r1
 80095fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009600:	f000 fab2 	bl	8009b68 <_read_r>
 8009604:	2800      	cmp	r0, #0
 8009606:	bfab      	itete	ge
 8009608:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800960a:	89a3      	ldrhlt	r3, [r4, #12]
 800960c:	181b      	addge	r3, r3, r0
 800960e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009612:	bfac      	ite	ge
 8009614:	6563      	strge	r3, [r4, #84]	; 0x54
 8009616:	81a3      	strhlt	r3, [r4, #12]
 8009618:	bd10      	pop	{r4, pc}

0800961a <__swrite>:
 800961a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800961e:	461f      	mov	r7, r3
 8009620:	898b      	ldrh	r3, [r1, #12]
 8009622:	05db      	lsls	r3, r3, #23
 8009624:	4605      	mov	r5, r0
 8009626:	460c      	mov	r4, r1
 8009628:	4616      	mov	r6, r2
 800962a:	d505      	bpl.n	8009638 <__swrite+0x1e>
 800962c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009630:	2302      	movs	r3, #2
 8009632:	2200      	movs	r2, #0
 8009634:	f000 f9c8 	bl	80099c8 <_lseek_r>
 8009638:	89a3      	ldrh	r3, [r4, #12]
 800963a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800963e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009642:	81a3      	strh	r3, [r4, #12]
 8009644:	4632      	mov	r2, r6
 8009646:	463b      	mov	r3, r7
 8009648:	4628      	mov	r0, r5
 800964a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800964e:	f000 b869 	b.w	8009724 <_write_r>

08009652 <__sseek>:
 8009652:	b510      	push	{r4, lr}
 8009654:	460c      	mov	r4, r1
 8009656:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800965a:	f000 f9b5 	bl	80099c8 <_lseek_r>
 800965e:	1c43      	adds	r3, r0, #1
 8009660:	89a3      	ldrh	r3, [r4, #12]
 8009662:	bf15      	itete	ne
 8009664:	6560      	strne	r0, [r4, #84]	; 0x54
 8009666:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800966a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800966e:	81a3      	strheq	r3, [r4, #12]
 8009670:	bf18      	it	ne
 8009672:	81a3      	strhne	r3, [r4, #12]
 8009674:	bd10      	pop	{r4, pc}

08009676 <__sclose>:
 8009676:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800967a:	f000 b8d3 	b.w	8009824 <_close_r>
	...

08009680 <__swbuf_r>:
 8009680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009682:	460e      	mov	r6, r1
 8009684:	4614      	mov	r4, r2
 8009686:	4605      	mov	r5, r0
 8009688:	b118      	cbz	r0, 8009692 <__swbuf_r+0x12>
 800968a:	6983      	ldr	r3, [r0, #24]
 800968c:	b90b      	cbnz	r3, 8009692 <__swbuf_r+0x12>
 800968e:	f7ff fb81 	bl	8008d94 <__sinit>
 8009692:	4b21      	ldr	r3, [pc, #132]	; (8009718 <__swbuf_r+0x98>)
 8009694:	429c      	cmp	r4, r3
 8009696:	d12b      	bne.n	80096f0 <__swbuf_r+0x70>
 8009698:	686c      	ldr	r4, [r5, #4]
 800969a:	69a3      	ldr	r3, [r4, #24]
 800969c:	60a3      	str	r3, [r4, #8]
 800969e:	89a3      	ldrh	r3, [r4, #12]
 80096a0:	071a      	lsls	r2, r3, #28
 80096a2:	d52f      	bpl.n	8009704 <__swbuf_r+0x84>
 80096a4:	6923      	ldr	r3, [r4, #16]
 80096a6:	b36b      	cbz	r3, 8009704 <__swbuf_r+0x84>
 80096a8:	6923      	ldr	r3, [r4, #16]
 80096aa:	6820      	ldr	r0, [r4, #0]
 80096ac:	1ac0      	subs	r0, r0, r3
 80096ae:	6963      	ldr	r3, [r4, #20]
 80096b0:	b2f6      	uxtb	r6, r6
 80096b2:	4283      	cmp	r3, r0
 80096b4:	4637      	mov	r7, r6
 80096b6:	dc04      	bgt.n	80096c2 <__swbuf_r+0x42>
 80096b8:	4621      	mov	r1, r4
 80096ba:	4628      	mov	r0, r5
 80096bc:	f000 f948 	bl	8009950 <_fflush_r>
 80096c0:	bb30      	cbnz	r0, 8009710 <__swbuf_r+0x90>
 80096c2:	68a3      	ldr	r3, [r4, #8]
 80096c4:	3b01      	subs	r3, #1
 80096c6:	60a3      	str	r3, [r4, #8]
 80096c8:	6823      	ldr	r3, [r4, #0]
 80096ca:	1c5a      	adds	r2, r3, #1
 80096cc:	6022      	str	r2, [r4, #0]
 80096ce:	701e      	strb	r6, [r3, #0]
 80096d0:	6963      	ldr	r3, [r4, #20]
 80096d2:	3001      	adds	r0, #1
 80096d4:	4283      	cmp	r3, r0
 80096d6:	d004      	beq.n	80096e2 <__swbuf_r+0x62>
 80096d8:	89a3      	ldrh	r3, [r4, #12]
 80096da:	07db      	lsls	r3, r3, #31
 80096dc:	d506      	bpl.n	80096ec <__swbuf_r+0x6c>
 80096de:	2e0a      	cmp	r6, #10
 80096e0:	d104      	bne.n	80096ec <__swbuf_r+0x6c>
 80096e2:	4621      	mov	r1, r4
 80096e4:	4628      	mov	r0, r5
 80096e6:	f000 f933 	bl	8009950 <_fflush_r>
 80096ea:	b988      	cbnz	r0, 8009710 <__swbuf_r+0x90>
 80096ec:	4638      	mov	r0, r7
 80096ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80096f0:	4b0a      	ldr	r3, [pc, #40]	; (800971c <__swbuf_r+0x9c>)
 80096f2:	429c      	cmp	r4, r3
 80096f4:	d101      	bne.n	80096fa <__swbuf_r+0x7a>
 80096f6:	68ac      	ldr	r4, [r5, #8]
 80096f8:	e7cf      	b.n	800969a <__swbuf_r+0x1a>
 80096fa:	4b09      	ldr	r3, [pc, #36]	; (8009720 <__swbuf_r+0xa0>)
 80096fc:	429c      	cmp	r4, r3
 80096fe:	bf08      	it	eq
 8009700:	68ec      	ldreq	r4, [r5, #12]
 8009702:	e7ca      	b.n	800969a <__swbuf_r+0x1a>
 8009704:	4621      	mov	r1, r4
 8009706:	4628      	mov	r0, r5
 8009708:	f000 f81e 	bl	8009748 <__swsetup_r>
 800970c:	2800      	cmp	r0, #0
 800970e:	d0cb      	beq.n	80096a8 <__swbuf_r+0x28>
 8009710:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8009714:	e7ea      	b.n	80096ec <__swbuf_r+0x6c>
 8009716:	bf00      	nop
 8009718:	08009edc 	.word	0x08009edc
 800971c:	08009efc 	.word	0x08009efc
 8009720:	08009ebc 	.word	0x08009ebc

08009724 <_write_r>:
 8009724:	b538      	push	{r3, r4, r5, lr}
 8009726:	4d07      	ldr	r5, [pc, #28]	; (8009744 <_write_r+0x20>)
 8009728:	4604      	mov	r4, r0
 800972a:	4608      	mov	r0, r1
 800972c:	4611      	mov	r1, r2
 800972e:	2200      	movs	r2, #0
 8009730:	602a      	str	r2, [r5, #0]
 8009732:	461a      	mov	r2, r3
 8009734:	f7f8 fc73 	bl	800201e <_write>
 8009738:	1c43      	adds	r3, r0, #1
 800973a:	d102      	bne.n	8009742 <_write_r+0x1e>
 800973c:	682b      	ldr	r3, [r5, #0]
 800973e:	b103      	cbz	r3, 8009742 <_write_r+0x1e>
 8009740:	6023      	str	r3, [r4, #0]
 8009742:	bd38      	pop	{r3, r4, r5, pc}
 8009744:	20000d20 	.word	0x20000d20

08009748 <__swsetup_r>:
 8009748:	4b32      	ldr	r3, [pc, #200]	; (8009814 <__swsetup_r+0xcc>)
 800974a:	b570      	push	{r4, r5, r6, lr}
 800974c:	681d      	ldr	r5, [r3, #0]
 800974e:	4606      	mov	r6, r0
 8009750:	460c      	mov	r4, r1
 8009752:	b125      	cbz	r5, 800975e <__swsetup_r+0x16>
 8009754:	69ab      	ldr	r3, [r5, #24]
 8009756:	b913      	cbnz	r3, 800975e <__swsetup_r+0x16>
 8009758:	4628      	mov	r0, r5
 800975a:	f7ff fb1b 	bl	8008d94 <__sinit>
 800975e:	4b2e      	ldr	r3, [pc, #184]	; (8009818 <__swsetup_r+0xd0>)
 8009760:	429c      	cmp	r4, r3
 8009762:	d10f      	bne.n	8009784 <__swsetup_r+0x3c>
 8009764:	686c      	ldr	r4, [r5, #4]
 8009766:	89a3      	ldrh	r3, [r4, #12]
 8009768:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800976c:	0719      	lsls	r1, r3, #28
 800976e:	d42c      	bmi.n	80097ca <__swsetup_r+0x82>
 8009770:	06dd      	lsls	r5, r3, #27
 8009772:	d411      	bmi.n	8009798 <__swsetup_r+0x50>
 8009774:	2309      	movs	r3, #9
 8009776:	6033      	str	r3, [r6, #0]
 8009778:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800977c:	81a3      	strh	r3, [r4, #12]
 800977e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009782:	e03e      	b.n	8009802 <__swsetup_r+0xba>
 8009784:	4b25      	ldr	r3, [pc, #148]	; (800981c <__swsetup_r+0xd4>)
 8009786:	429c      	cmp	r4, r3
 8009788:	d101      	bne.n	800978e <__swsetup_r+0x46>
 800978a:	68ac      	ldr	r4, [r5, #8]
 800978c:	e7eb      	b.n	8009766 <__swsetup_r+0x1e>
 800978e:	4b24      	ldr	r3, [pc, #144]	; (8009820 <__swsetup_r+0xd8>)
 8009790:	429c      	cmp	r4, r3
 8009792:	bf08      	it	eq
 8009794:	68ec      	ldreq	r4, [r5, #12]
 8009796:	e7e6      	b.n	8009766 <__swsetup_r+0x1e>
 8009798:	0758      	lsls	r0, r3, #29
 800979a:	d512      	bpl.n	80097c2 <__swsetup_r+0x7a>
 800979c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800979e:	b141      	cbz	r1, 80097b2 <__swsetup_r+0x6a>
 80097a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80097a4:	4299      	cmp	r1, r3
 80097a6:	d002      	beq.n	80097ae <__swsetup_r+0x66>
 80097a8:	4630      	mov	r0, r6
 80097aa:	f000 f991 	bl	8009ad0 <_free_r>
 80097ae:	2300      	movs	r3, #0
 80097b0:	6363      	str	r3, [r4, #52]	; 0x34
 80097b2:	89a3      	ldrh	r3, [r4, #12]
 80097b4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80097b8:	81a3      	strh	r3, [r4, #12]
 80097ba:	2300      	movs	r3, #0
 80097bc:	6063      	str	r3, [r4, #4]
 80097be:	6923      	ldr	r3, [r4, #16]
 80097c0:	6023      	str	r3, [r4, #0]
 80097c2:	89a3      	ldrh	r3, [r4, #12]
 80097c4:	f043 0308 	orr.w	r3, r3, #8
 80097c8:	81a3      	strh	r3, [r4, #12]
 80097ca:	6923      	ldr	r3, [r4, #16]
 80097cc:	b94b      	cbnz	r3, 80097e2 <__swsetup_r+0x9a>
 80097ce:	89a3      	ldrh	r3, [r4, #12]
 80097d0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80097d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80097d8:	d003      	beq.n	80097e2 <__swsetup_r+0x9a>
 80097da:	4621      	mov	r1, r4
 80097dc:	4630      	mov	r0, r6
 80097de:	f000 f92b 	bl	8009a38 <__smakebuf_r>
 80097e2:	89a0      	ldrh	r0, [r4, #12]
 80097e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80097e8:	f010 0301 	ands.w	r3, r0, #1
 80097ec:	d00a      	beq.n	8009804 <__swsetup_r+0xbc>
 80097ee:	2300      	movs	r3, #0
 80097f0:	60a3      	str	r3, [r4, #8]
 80097f2:	6963      	ldr	r3, [r4, #20]
 80097f4:	425b      	negs	r3, r3
 80097f6:	61a3      	str	r3, [r4, #24]
 80097f8:	6923      	ldr	r3, [r4, #16]
 80097fa:	b943      	cbnz	r3, 800980e <__swsetup_r+0xc6>
 80097fc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009800:	d1ba      	bne.n	8009778 <__swsetup_r+0x30>
 8009802:	bd70      	pop	{r4, r5, r6, pc}
 8009804:	0781      	lsls	r1, r0, #30
 8009806:	bf58      	it	pl
 8009808:	6963      	ldrpl	r3, [r4, #20]
 800980a:	60a3      	str	r3, [r4, #8]
 800980c:	e7f4      	b.n	80097f8 <__swsetup_r+0xb0>
 800980e:	2000      	movs	r0, #0
 8009810:	e7f7      	b.n	8009802 <__swsetup_r+0xba>
 8009812:	bf00      	nop
 8009814:	20000028 	.word	0x20000028
 8009818:	08009edc 	.word	0x08009edc
 800981c:	08009efc 	.word	0x08009efc
 8009820:	08009ebc 	.word	0x08009ebc

08009824 <_close_r>:
 8009824:	b538      	push	{r3, r4, r5, lr}
 8009826:	4d06      	ldr	r5, [pc, #24]	; (8009840 <_close_r+0x1c>)
 8009828:	2300      	movs	r3, #0
 800982a:	4604      	mov	r4, r0
 800982c:	4608      	mov	r0, r1
 800982e:	602b      	str	r3, [r5, #0]
 8009830:	f7f8 fc11 	bl	8002056 <_close>
 8009834:	1c43      	adds	r3, r0, #1
 8009836:	d102      	bne.n	800983e <_close_r+0x1a>
 8009838:	682b      	ldr	r3, [r5, #0]
 800983a:	b103      	cbz	r3, 800983e <_close_r+0x1a>
 800983c:	6023      	str	r3, [r4, #0]
 800983e:	bd38      	pop	{r3, r4, r5, pc}
 8009840:	20000d20 	.word	0x20000d20

08009844 <__sflush_r>:
 8009844:	898a      	ldrh	r2, [r1, #12]
 8009846:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800984a:	4605      	mov	r5, r0
 800984c:	0710      	lsls	r0, r2, #28
 800984e:	460c      	mov	r4, r1
 8009850:	d458      	bmi.n	8009904 <__sflush_r+0xc0>
 8009852:	684b      	ldr	r3, [r1, #4]
 8009854:	2b00      	cmp	r3, #0
 8009856:	dc05      	bgt.n	8009864 <__sflush_r+0x20>
 8009858:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800985a:	2b00      	cmp	r3, #0
 800985c:	dc02      	bgt.n	8009864 <__sflush_r+0x20>
 800985e:	2000      	movs	r0, #0
 8009860:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009864:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009866:	2e00      	cmp	r6, #0
 8009868:	d0f9      	beq.n	800985e <__sflush_r+0x1a>
 800986a:	2300      	movs	r3, #0
 800986c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009870:	682f      	ldr	r7, [r5, #0]
 8009872:	602b      	str	r3, [r5, #0]
 8009874:	d032      	beq.n	80098dc <__sflush_r+0x98>
 8009876:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009878:	89a3      	ldrh	r3, [r4, #12]
 800987a:	075a      	lsls	r2, r3, #29
 800987c:	d505      	bpl.n	800988a <__sflush_r+0x46>
 800987e:	6863      	ldr	r3, [r4, #4]
 8009880:	1ac0      	subs	r0, r0, r3
 8009882:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009884:	b10b      	cbz	r3, 800988a <__sflush_r+0x46>
 8009886:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009888:	1ac0      	subs	r0, r0, r3
 800988a:	2300      	movs	r3, #0
 800988c:	4602      	mov	r2, r0
 800988e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009890:	6a21      	ldr	r1, [r4, #32]
 8009892:	4628      	mov	r0, r5
 8009894:	47b0      	blx	r6
 8009896:	1c43      	adds	r3, r0, #1
 8009898:	89a3      	ldrh	r3, [r4, #12]
 800989a:	d106      	bne.n	80098aa <__sflush_r+0x66>
 800989c:	6829      	ldr	r1, [r5, #0]
 800989e:	291d      	cmp	r1, #29
 80098a0:	d82c      	bhi.n	80098fc <__sflush_r+0xb8>
 80098a2:	4a2a      	ldr	r2, [pc, #168]	; (800994c <__sflush_r+0x108>)
 80098a4:	40ca      	lsrs	r2, r1
 80098a6:	07d6      	lsls	r6, r2, #31
 80098a8:	d528      	bpl.n	80098fc <__sflush_r+0xb8>
 80098aa:	2200      	movs	r2, #0
 80098ac:	6062      	str	r2, [r4, #4]
 80098ae:	04d9      	lsls	r1, r3, #19
 80098b0:	6922      	ldr	r2, [r4, #16]
 80098b2:	6022      	str	r2, [r4, #0]
 80098b4:	d504      	bpl.n	80098c0 <__sflush_r+0x7c>
 80098b6:	1c42      	adds	r2, r0, #1
 80098b8:	d101      	bne.n	80098be <__sflush_r+0x7a>
 80098ba:	682b      	ldr	r3, [r5, #0]
 80098bc:	b903      	cbnz	r3, 80098c0 <__sflush_r+0x7c>
 80098be:	6560      	str	r0, [r4, #84]	; 0x54
 80098c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80098c2:	602f      	str	r7, [r5, #0]
 80098c4:	2900      	cmp	r1, #0
 80098c6:	d0ca      	beq.n	800985e <__sflush_r+0x1a>
 80098c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80098cc:	4299      	cmp	r1, r3
 80098ce:	d002      	beq.n	80098d6 <__sflush_r+0x92>
 80098d0:	4628      	mov	r0, r5
 80098d2:	f000 f8fd 	bl	8009ad0 <_free_r>
 80098d6:	2000      	movs	r0, #0
 80098d8:	6360      	str	r0, [r4, #52]	; 0x34
 80098da:	e7c1      	b.n	8009860 <__sflush_r+0x1c>
 80098dc:	6a21      	ldr	r1, [r4, #32]
 80098de:	2301      	movs	r3, #1
 80098e0:	4628      	mov	r0, r5
 80098e2:	47b0      	blx	r6
 80098e4:	1c41      	adds	r1, r0, #1
 80098e6:	d1c7      	bne.n	8009878 <__sflush_r+0x34>
 80098e8:	682b      	ldr	r3, [r5, #0]
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d0c4      	beq.n	8009878 <__sflush_r+0x34>
 80098ee:	2b1d      	cmp	r3, #29
 80098f0:	d001      	beq.n	80098f6 <__sflush_r+0xb2>
 80098f2:	2b16      	cmp	r3, #22
 80098f4:	d101      	bne.n	80098fa <__sflush_r+0xb6>
 80098f6:	602f      	str	r7, [r5, #0]
 80098f8:	e7b1      	b.n	800985e <__sflush_r+0x1a>
 80098fa:	89a3      	ldrh	r3, [r4, #12]
 80098fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009900:	81a3      	strh	r3, [r4, #12]
 8009902:	e7ad      	b.n	8009860 <__sflush_r+0x1c>
 8009904:	690f      	ldr	r7, [r1, #16]
 8009906:	2f00      	cmp	r7, #0
 8009908:	d0a9      	beq.n	800985e <__sflush_r+0x1a>
 800990a:	0793      	lsls	r3, r2, #30
 800990c:	680e      	ldr	r6, [r1, #0]
 800990e:	bf08      	it	eq
 8009910:	694b      	ldreq	r3, [r1, #20]
 8009912:	600f      	str	r7, [r1, #0]
 8009914:	bf18      	it	ne
 8009916:	2300      	movne	r3, #0
 8009918:	eba6 0807 	sub.w	r8, r6, r7
 800991c:	608b      	str	r3, [r1, #8]
 800991e:	f1b8 0f00 	cmp.w	r8, #0
 8009922:	dd9c      	ble.n	800985e <__sflush_r+0x1a>
 8009924:	6a21      	ldr	r1, [r4, #32]
 8009926:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009928:	4643      	mov	r3, r8
 800992a:	463a      	mov	r2, r7
 800992c:	4628      	mov	r0, r5
 800992e:	47b0      	blx	r6
 8009930:	2800      	cmp	r0, #0
 8009932:	dc06      	bgt.n	8009942 <__sflush_r+0xfe>
 8009934:	89a3      	ldrh	r3, [r4, #12]
 8009936:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800993a:	81a3      	strh	r3, [r4, #12]
 800993c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009940:	e78e      	b.n	8009860 <__sflush_r+0x1c>
 8009942:	4407      	add	r7, r0
 8009944:	eba8 0800 	sub.w	r8, r8, r0
 8009948:	e7e9      	b.n	800991e <__sflush_r+0xda>
 800994a:	bf00      	nop
 800994c:	20400001 	.word	0x20400001

08009950 <_fflush_r>:
 8009950:	b538      	push	{r3, r4, r5, lr}
 8009952:	690b      	ldr	r3, [r1, #16]
 8009954:	4605      	mov	r5, r0
 8009956:	460c      	mov	r4, r1
 8009958:	b913      	cbnz	r3, 8009960 <_fflush_r+0x10>
 800995a:	2500      	movs	r5, #0
 800995c:	4628      	mov	r0, r5
 800995e:	bd38      	pop	{r3, r4, r5, pc}
 8009960:	b118      	cbz	r0, 800996a <_fflush_r+0x1a>
 8009962:	6983      	ldr	r3, [r0, #24]
 8009964:	b90b      	cbnz	r3, 800996a <_fflush_r+0x1a>
 8009966:	f7ff fa15 	bl	8008d94 <__sinit>
 800996a:	4b14      	ldr	r3, [pc, #80]	; (80099bc <_fflush_r+0x6c>)
 800996c:	429c      	cmp	r4, r3
 800996e:	d11b      	bne.n	80099a8 <_fflush_r+0x58>
 8009970:	686c      	ldr	r4, [r5, #4]
 8009972:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009976:	2b00      	cmp	r3, #0
 8009978:	d0ef      	beq.n	800995a <_fflush_r+0xa>
 800997a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800997c:	07d0      	lsls	r0, r2, #31
 800997e:	d404      	bmi.n	800998a <_fflush_r+0x3a>
 8009980:	0599      	lsls	r1, r3, #22
 8009982:	d402      	bmi.n	800998a <_fflush_r+0x3a>
 8009984:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009986:	f7ff faa3 	bl	8008ed0 <__retarget_lock_acquire_recursive>
 800998a:	4628      	mov	r0, r5
 800998c:	4621      	mov	r1, r4
 800998e:	f7ff ff59 	bl	8009844 <__sflush_r>
 8009992:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009994:	07da      	lsls	r2, r3, #31
 8009996:	4605      	mov	r5, r0
 8009998:	d4e0      	bmi.n	800995c <_fflush_r+0xc>
 800999a:	89a3      	ldrh	r3, [r4, #12]
 800999c:	059b      	lsls	r3, r3, #22
 800999e:	d4dd      	bmi.n	800995c <_fflush_r+0xc>
 80099a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80099a2:	f7ff fa96 	bl	8008ed2 <__retarget_lock_release_recursive>
 80099a6:	e7d9      	b.n	800995c <_fflush_r+0xc>
 80099a8:	4b05      	ldr	r3, [pc, #20]	; (80099c0 <_fflush_r+0x70>)
 80099aa:	429c      	cmp	r4, r3
 80099ac:	d101      	bne.n	80099b2 <_fflush_r+0x62>
 80099ae:	68ac      	ldr	r4, [r5, #8]
 80099b0:	e7df      	b.n	8009972 <_fflush_r+0x22>
 80099b2:	4b04      	ldr	r3, [pc, #16]	; (80099c4 <_fflush_r+0x74>)
 80099b4:	429c      	cmp	r4, r3
 80099b6:	bf08      	it	eq
 80099b8:	68ec      	ldreq	r4, [r5, #12]
 80099ba:	e7da      	b.n	8009972 <_fflush_r+0x22>
 80099bc:	08009edc 	.word	0x08009edc
 80099c0:	08009efc 	.word	0x08009efc
 80099c4:	08009ebc 	.word	0x08009ebc

080099c8 <_lseek_r>:
 80099c8:	b538      	push	{r3, r4, r5, lr}
 80099ca:	4d07      	ldr	r5, [pc, #28]	; (80099e8 <_lseek_r+0x20>)
 80099cc:	4604      	mov	r4, r0
 80099ce:	4608      	mov	r0, r1
 80099d0:	4611      	mov	r1, r2
 80099d2:	2200      	movs	r2, #0
 80099d4:	602a      	str	r2, [r5, #0]
 80099d6:	461a      	mov	r2, r3
 80099d8:	f7f8 fb64 	bl	80020a4 <_lseek>
 80099dc:	1c43      	adds	r3, r0, #1
 80099de:	d102      	bne.n	80099e6 <_lseek_r+0x1e>
 80099e0:	682b      	ldr	r3, [r5, #0]
 80099e2:	b103      	cbz	r3, 80099e6 <_lseek_r+0x1e>
 80099e4:	6023      	str	r3, [r4, #0]
 80099e6:	bd38      	pop	{r3, r4, r5, pc}
 80099e8:	20000d20 	.word	0x20000d20

080099ec <__swhatbuf_r>:
 80099ec:	b570      	push	{r4, r5, r6, lr}
 80099ee:	460e      	mov	r6, r1
 80099f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099f4:	2900      	cmp	r1, #0
 80099f6:	b096      	sub	sp, #88	; 0x58
 80099f8:	4614      	mov	r4, r2
 80099fa:	461d      	mov	r5, r3
 80099fc:	da08      	bge.n	8009a10 <__swhatbuf_r+0x24>
 80099fe:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009a02:	2200      	movs	r2, #0
 8009a04:	602a      	str	r2, [r5, #0]
 8009a06:	061a      	lsls	r2, r3, #24
 8009a08:	d410      	bmi.n	8009a2c <__swhatbuf_r+0x40>
 8009a0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009a0e:	e00e      	b.n	8009a2e <__swhatbuf_r+0x42>
 8009a10:	466a      	mov	r2, sp
 8009a12:	f000 f8bb 	bl	8009b8c <_fstat_r>
 8009a16:	2800      	cmp	r0, #0
 8009a18:	dbf1      	blt.n	80099fe <__swhatbuf_r+0x12>
 8009a1a:	9a01      	ldr	r2, [sp, #4]
 8009a1c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009a20:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009a24:	425a      	negs	r2, r3
 8009a26:	415a      	adcs	r2, r3
 8009a28:	602a      	str	r2, [r5, #0]
 8009a2a:	e7ee      	b.n	8009a0a <__swhatbuf_r+0x1e>
 8009a2c:	2340      	movs	r3, #64	; 0x40
 8009a2e:	2000      	movs	r0, #0
 8009a30:	6023      	str	r3, [r4, #0]
 8009a32:	b016      	add	sp, #88	; 0x58
 8009a34:	bd70      	pop	{r4, r5, r6, pc}
	...

08009a38 <__smakebuf_r>:
 8009a38:	898b      	ldrh	r3, [r1, #12]
 8009a3a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009a3c:	079d      	lsls	r5, r3, #30
 8009a3e:	4606      	mov	r6, r0
 8009a40:	460c      	mov	r4, r1
 8009a42:	d507      	bpl.n	8009a54 <__smakebuf_r+0x1c>
 8009a44:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009a48:	6023      	str	r3, [r4, #0]
 8009a4a:	6123      	str	r3, [r4, #16]
 8009a4c:	2301      	movs	r3, #1
 8009a4e:	6163      	str	r3, [r4, #20]
 8009a50:	b002      	add	sp, #8
 8009a52:	bd70      	pop	{r4, r5, r6, pc}
 8009a54:	ab01      	add	r3, sp, #4
 8009a56:	466a      	mov	r2, sp
 8009a58:	f7ff ffc8 	bl	80099ec <__swhatbuf_r>
 8009a5c:	9900      	ldr	r1, [sp, #0]
 8009a5e:	4605      	mov	r5, r0
 8009a60:	4630      	mov	r0, r6
 8009a62:	f7ff fa57 	bl	8008f14 <_malloc_r>
 8009a66:	b948      	cbnz	r0, 8009a7c <__smakebuf_r+0x44>
 8009a68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a6c:	059a      	lsls	r2, r3, #22
 8009a6e:	d4ef      	bmi.n	8009a50 <__smakebuf_r+0x18>
 8009a70:	f023 0303 	bic.w	r3, r3, #3
 8009a74:	f043 0302 	orr.w	r3, r3, #2
 8009a78:	81a3      	strh	r3, [r4, #12]
 8009a7a:	e7e3      	b.n	8009a44 <__smakebuf_r+0xc>
 8009a7c:	4b0d      	ldr	r3, [pc, #52]	; (8009ab4 <__smakebuf_r+0x7c>)
 8009a7e:	62b3      	str	r3, [r6, #40]	; 0x28
 8009a80:	89a3      	ldrh	r3, [r4, #12]
 8009a82:	6020      	str	r0, [r4, #0]
 8009a84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a88:	81a3      	strh	r3, [r4, #12]
 8009a8a:	9b00      	ldr	r3, [sp, #0]
 8009a8c:	6163      	str	r3, [r4, #20]
 8009a8e:	9b01      	ldr	r3, [sp, #4]
 8009a90:	6120      	str	r0, [r4, #16]
 8009a92:	b15b      	cbz	r3, 8009aac <__smakebuf_r+0x74>
 8009a94:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009a98:	4630      	mov	r0, r6
 8009a9a:	f000 f889 	bl	8009bb0 <_isatty_r>
 8009a9e:	b128      	cbz	r0, 8009aac <__smakebuf_r+0x74>
 8009aa0:	89a3      	ldrh	r3, [r4, #12]
 8009aa2:	f023 0303 	bic.w	r3, r3, #3
 8009aa6:	f043 0301 	orr.w	r3, r3, #1
 8009aaa:	81a3      	strh	r3, [r4, #12]
 8009aac:	89a0      	ldrh	r0, [r4, #12]
 8009aae:	4305      	orrs	r5, r0
 8009ab0:	81a5      	strh	r5, [r4, #12]
 8009ab2:	e7cd      	b.n	8009a50 <__smakebuf_r+0x18>
 8009ab4:	08008d2d 	.word	0x08008d2d

08009ab8 <__malloc_lock>:
 8009ab8:	4801      	ldr	r0, [pc, #4]	; (8009ac0 <__malloc_lock+0x8>)
 8009aba:	f7ff ba09 	b.w	8008ed0 <__retarget_lock_acquire_recursive>
 8009abe:	bf00      	nop
 8009ac0:	20000d14 	.word	0x20000d14

08009ac4 <__malloc_unlock>:
 8009ac4:	4801      	ldr	r0, [pc, #4]	; (8009acc <__malloc_unlock+0x8>)
 8009ac6:	f7ff ba04 	b.w	8008ed2 <__retarget_lock_release_recursive>
 8009aca:	bf00      	nop
 8009acc:	20000d14 	.word	0x20000d14

08009ad0 <_free_r>:
 8009ad0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009ad2:	2900      	cmp	r1, #0
 8009ad4:	d044      	beq.n	8009b60 <_free_r+0x90>
 8009ad6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009ada:	9001      	str	r0, [sp, #4]
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	f1a1 0404 	sub.w	r4, r1, #4
 8009ae2:	bfb8      	it	lt
 8009ae4:	18e4      	addlt	r4, r4, r3
 8009ae6:	f7ff ffe7 	bl	8009ab8 <__malloc_lock>
 8009aea:	4a1e      	ldr	r2, [pc, #120]	; (8009b64 <_free_r+0x94>)
 8009aec:	9801      	ldr	r0, [sp, #4]
 8009aee:	6813      	ldr	r3, [r2, #0]
 8009af0:	b933      	cbnz	r3, 8009b00 <_free_r+0x30>
 8009af2:	6063      	str	r3, [r4, #4]
 8009af4:	6014      	str	r4, [r2, #0]
 8009af6:	b003      	add	sp, #12
 8009af8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009afc:	f7ff bfe2 	b.w	8009ac4 <__malloc_unlock>
 8009b00:	42a3      	cmp	r3, r4
 8009b02:	d908      	bls.n	8009b16 <_free_r+0x46>
 8009b04:	6825      	ldr	r5, [r4, #0]
 8009b06:	1961      	adds	r1, r4, r5
 8009b08:	428b      	cmp	r3, r1
 8009b0a:	bf01      	itttt	eq
 8009b0c:	6819      	ldreq	r1, [r3, #0]
 8009b0e:	685b      	ldreq	r3, [r3, #4]
 8009b10:	1949      	addeq	r1, r1, r5
 8009b12:	6021      	streq	r1, [r4, #0]
 8009b14:	e7ed      	b.n	8009af2 <_free_r+0x22>
 8009b16:	461a      	mov	r2, r3
 8009b18:	685b      	ldr	r3, [r3, #4]
 8009b1a:	b10b      	cbz	r3, 8009b20 <_free_r+0x50>
 8009b1c:	42a3      	cmp	r3, r4
 8009b1e:	d9fa      	bls.n	8009b16 <_free_r+0x46>
 8009b20:	6811      	ldr	r1, [r2, #0]
 8009b22:	1855      	adds	r5, r2, r1
 8009b24:	42a5      	cmp	r5, r4
 8009b26:	d10b      	bne.n	8009b40 <_free_r+0x70>
 8009b28:	6824      	ldr	r4, [r4, #0]
 8009b2a:	4421      	add	r1, r4
 8009b2c:	1854      	adds	r4, r2, r1
 8009b2e:	42a3      	cmp	r3, r4
 8009b30:	6011      	str	r1, [r2, #0]
 8009b32:	d1e0      	bne.n	8009af6 <_free_r+0x26>
 8009b34:	681c      	ldr	r4, [r3, #0]
 8009b36:	685b      	ldr	r3, [r3, #4]
 8009b38:	6053      	str	r3, [r2, #4]
 8009b3a:	4421      	add	r1, r4
 8009b3c:	6011      	str	r1, [r2, #0]
 8009b3e:	e7da      	b.n	8009af6 <_free_r+0x26>
 8009b40:	d902      	bls.n	8009b48 <_free_r+0x78>
 8009b42:	230c      	movs	r3, #12
 8009b44:	6003      	str	r3, [r0, #0]
 8009b46:	e7d6      	b.n	8009af6 <_free_r+0x26>
 8009b48:	6825      	ldr	r5, [r4, #0]
 8009b4a:	1961      	adds	r1, r4, r5
 8009b4c:	428b      	cmp	r3, r1
 8009b4e:	bf04      	itt	eq
 8009b50:	6819      	ldreq	r1, [r3, #0]
 8009b52:	685b      	ldreq	r3, [r3, #4]
 8009b54:	6063      	str	r3, [r4, #4]
 8009b56:	bf04      	itt	eq
 8009b58:	1949      	addeq	r1, r1, r5
 8009b5a:	6021      	streq	r1, [r4, #0]
 8009b5c:	6054      	str	r4, [r2, #4]
 8009b5e:	e7ca      	b.n	8009af6 <_free_r+0x26>
 8009b60:	b003      	add	sp, #12
 8009b62:	bd30      	pop	{r4, r5, pc}
 8009b64:	20000d18 	.word	0x20000d18

08009b68 <_read_r>:
 8009b68:	b538      	push	{r3, r4, r5, lr}
 8009b6a:	4d07      	ldr	r5, [pc, #28]	; (8009b88 <_read_r+0x20>)
 8009b6c:	4604      	mov	r4, r0
 8009b6e:	4608      	mov	r0, r1
 8009b70:	4611      	mov	r1, r2
 8009b72:	2200      	movs	r2, #0
 8009b74:	602a      	str	r2, [r5, #0]
 8009b76:	461a      	mov	r2, r3
 8009b78:	f7f8 fa34 	bl	8001fe4 <_read>
 8009b7c:	1c43      	adds	r3, r0, #1
 8009b7e:	d102      	bne.n	8009b86 <_read_r+0x1e>
 8009b80:	682b      	ldr	r3, [r5, #0]
 8009b82:	b103      	cbz	r3, 8009b86 <_read_r+0x1e>
 8009b84:	6023      	str	r3, [r4, #0]
 8009b86:	bd38      	pop	{r3, r4, r5, pc}
 8009b88:	20000d20 	.word	0x20000d20

08009b8c <_fstat_r>:
 8009b8c:	b538      	push	{r3, r4, r5, lr}
 8009b8e:	4d07      	ldr	r5, [pc, #28]	; (8009bac <_fstat_r+0x20>)
 8009b90:	2300      	movs	r3, #0
 8009b92:	4604      	mov	r4, r0
 8009b94:	4608      	mov	r0, r1
 8009b96:	4611      	mov	r1, r2
 8009b98:	602b      	str	r3, [r5, #0]
 8009b9a:	f7f8 fa68 	bl	800206e <_fstat>
 8009b9e:	1c43      	adds	r3, r0, #1
 8009ba0:	d102      	bne.n	8009ba8 <_fstat_r+0x1c>
 8009ba2:	682b      	ldr	r3, [r5, #0]
 8009ba4:	b103      	cbz	r3, 8009ba8 <_fstat_r+0x1c>
 8009ba6:	6023      	str	r3, [r4, #0]
 8009ba8:	bd38      	pop	{r3, r4, r5, pc}
 8009baa:	bf00      	nop
 8009bac:	20000d20 	.word	0x20000d20

08009bb0 <_isatty_r>:
 8009bb0:	b538      	push	{r3, r4, r5, lr}
 8009bb2:	4d06      	ldr	r5, [pc, #24]	; (8009bcc <_isatty_r+0x1c>)
 8009bb4:	2300      	movs	r3, #0
 8009bb6:	4604      	mov	r4, r0
 8009bb8:	4608      	mov	r0, r1
 8009bba:	602b      	str	r3, [r5, #0]
 8009bbc:	f7f8 fa67 	bl	800208e <_isatty>
 8009bc0:	1c43      	adds	r3, r0, #1
 8009bc2:	d102      	bne.n	8009bca <_isatty_r+0x1a>
 8009bc4:	682b      	ldr	r3, [r5, #0]
 8009bc6:	b103      	cbz	r3, 8009bca <_isatty_r+0x1a>
 8009bc8:	6023      	str	r3, [r4, #0]
 8009bca:	bd38      	pop	{r3, r4, r5, pc}
 8009bcc:	20000d20 	.word	0x20000d20

08009bd0 <_init>:
 8009bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bd2:	bf00      	nop
 8009bd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009bd6:	bc08      	pop	{r3}
 8009bd8:	469e      	mov	lr, r3
 8009bda:	4770      	bx	lr

08009bdc <_fini>:
 8009bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bde:	bf00      	nop
 8009be0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009be2:	bc08      	pop	{r3}
 8009be4:	469e      	mov	lr, r3
 8009be6:	4770      	bx	lr
