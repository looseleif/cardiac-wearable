
WB_AWEAR_proj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d2ec  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000047c  0800d42c  0800d42c  0001d42c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800d8a8  0800d8a8  0001d8a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800d8b0  0800d8b0  0001d8b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800d8b4  0800d8b4  0001d8b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000084  20000008  0800d8b8  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 MB_MEM2       00000883  2000008c  0800d93c  0002008c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 BLE_DRIVER_CONTEXT 00000035  20000910  0800e1bf  00020910  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 SYSTEM_DRIVER_CONTEXT 00000011  20000948  0800e1f4  00020948  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00000548  2000095c  0800e205  0002095c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000ea4  0800e205  00020ea4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020959  2**0
                  CONTENTS, READONLY
 13 MAPPING_TABLE 00000028  20030000  20030000  00030000  2**2
                  ALLOC
 14 MB_MEM1       000001bb  20030028  20030028  00030000  2**2
                  ALLOC
 15 .debug_info   00035dd1  00000000  00000000  00020989  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 000067fc  00000000  00000000  0005675a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00002f20  00000000  00000000  0005cf58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 00002c38  00000000  00000000  0005fe78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002e83f  00000000  00000000  00062ab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00034e25  00000000  00000000  000912ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000ff53f  00000000  00000000  000c6114  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000050  00000000  00000000  001c5653  2**0
                  CONTENTS, READONLY
 23 .debug_frame  0000cf5c  00000000  00000000  001c56a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	2000095c 	.word	0x2000095c
 800015c:	00000000 	.word	0x00000000
 8000160:	0800d414 	.word	0x0800d414

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000960 	.word	0x20000960
 800017c:	0800d414 	.word	0x0800d414

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_uldivmod>:
 8000230:	b953      	cbnz	r3, 8000248 <__aeabi_uldivmod+0x18>
 8000232:	b94a      	cbnz	r2, 8000248 <__aeabi_uldivmod+0x18>
 8000234:	2900      	cmp	r1, #0
 8000236:	bf08      	it	eq
 8000238:	2800      	cmpeq	r0, #0
 800023a:	bf1c      	itt	ne
 800023c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000240:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000244:	f000 b974 	b.w	8000530 <__aeabi_idiv0>
 8000248:	f1ad 0c08 	sub.w	ip, sp, #8
 800024c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000258:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800025c:	b004      	add	sp, #16
 800025e:	4770      	bx	lr

08000260 <__udivmoddi4>:
 8000260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000264:	9d08      	ldr	r5, [sp, #32]
 8000266:	4604      	mov	r4, r0
 8000268:	468e      	mov	lr, r1
 800026a:	2b00      	cmp	r3, #0
 800026c:	d14d      	bne.n	800030a <__udivmoddi4+0xaa>
 800026e:	428a      	cmp	r2, r1
 8000270:	4694      	mov	ip, r2
 8000272:	d969      	bls.n	8000348 <__udivmoddi4+0xe8>
 8000274:	fab2 f282 	clz	r2, r2
 8000278:	b152      	cbz	r2, 8000290 <__udivmoddi4+0x30>
 800027a:	fa01 f302 	lsl.w	r3, r1, r2
 800027e:	f1c2 0120 	rsb	r1, r2, #32
 8000282:	fa20 f101 	lsr.w	r1, r0, r1
 8000286:	fa0c fc02 	lsl.w	ip, ip, r2
 800028a:	ea41 0e03 	orr.w	lr, r1, r3
 800028e:	4094      	lsls	r4, r2
 8000290:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000294:	0c21      	lsrs	r1, r4, #16
 8000296:	fbbe f6f8 	udiv	r6, lr, r8
 800029a:	fa1f f78c 	uxth.w	r7, ip
 800029e:	fb08 e316 	mls	r3, r8, r6, lr
 80002a2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002a6:	fb06 f107 	mul.w	r1, r6, r7
 80002aa:	4299      	cmp	r1, r3
 80002ac:	d90a      	bls.n	80002c4 <__udivmoddi4+0x64>
 80002ae:	eb1c 0303 	adds.w	r3, ip, r3
 80002b2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002b6:	f080 811f 	bcs.w	80004f8 <__udivmoddi4+0x298>
 80002ba:	4299      	cmp	r1, r3
 80002bc:	f240 811c 	bls.w	80004f8 <__udivmoddi4+0x298>
 80002c0:	3e02      	subs	r6, #2
 80002c2:	4463      	add	r3, ip
 80002c4:	1a5b      	subs	r3, r3, r1
 80002c6:	b2a4      	uxth	r4, r4
 80002c8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002cc:	fb08 3310 	mls	r3, r8, r0, r3
 80002d0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d4:	fb00 f707 	mul.w	r7, r0, r7
 80002d8:	42a7      	cmp	r7, r4
 80002da:	d90a      	bls.n	80002f2 <__udivmoddi4+0x92>
 80002dc:	eb1c 0404 	adds.w	r4, ip, r4
 80002e0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002e4:	f080 810a 	bcs.w	80004fc <__udivmoddi4+0x29c>
 80002e8:	42a7      	cmp	r7, r4
 80002ea:	f240 8107 	bls.w	80004fc <__udivmoddi4+0x29c>
 80002ee:	4464      	add	r4, ip
 80002f0:	3802      	subs	r0, #2
 80002f2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002f6:	1be4      	subs	r4, r4, r7
 80002f8:	2600      	movs	r6, #0
 80002fa:	b11d      	cbz	r5, 8000304 <__udivmoddi4+0xa4>
 80002fc:	40d4      	lsrs	r4, r2
 80002fe:	2300      	movs	r3, #0
 8000300:	e9c5 4300 	strd	r4, r3, [r5]
 8000304:	4631      	mov	r1, r6
 8000306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030a:	428b      	cmp	r3, r1
 800030c:	d909      	bls.n	8000322 <__udivmoddi4+0xc2>
 800030e:	2d00      	cmp	r5, #0
 8000310:	f000 80ef 	beq.w	80004f2 <__udivmoddi4+0x292>
 8000314:	2600      	movs	r6, #0
 8000316:	e9c5 0100 	strd	r0, r1, [r5]
 800031a:	4630      	mov	r0, r6
 800031c:	4631      	mov	r1, r6
 800031e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000322:	fab3 f683 	clz	r6, r3
 8000326:	2e00      	cmp	r6, #0
 8000328:	d14a      	bne.n	80003c0 <__udivmoddi4+0x160>
 800032a:	428b      	cmp	r3, r1
 800032c:	d302      	bcc.n	8000334 <__udivmoddi4+0xd4>
 800032e:	4282      	cmp	r2, r0
 8000330:	f200 80f9 	bhi.w	8000526 <__udivmoddi4+0x2c6>
 8000334:	1a84      	subs	r4, r0, r2
 8000336:	eb61 0303 	sbc.w	r3, r1, r3
 800033a:	2001      	movs	r0, #1
 800033c:	469e      	mov	lr, r3
 800033e:	2d00      	cmp	r5, #0
 8000340:	d0e0      	beq.n	8000304 <__udivmoddi4+0xa4>
 8000342:	e9c5 4e00 	strd	r4, lr, [r5]
 8000346:	e7dd      	b.n	8000304 <__udivmoddi4+0xa4>
 8000348:	b902      	cbnz	r2, 800034c <__udivmoddi4+0xec>
 800034a:	deff      	udf	#255	; 0xff
 800034c:	fab2 f282 	clz	r2, r2
 8000350:	2a00      	cmp	r2, #0
 8000352:	f040 8092 	bne.w	800047a <__udivmoddi4+0x21a>
 8000356:	eba1 010c 	sub.w	r1, r1, ip
 800035a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800035e:	fa1f fe8c 	uxth.w	lr, ip
 8000362:	2601      	movs	r6, #1
 8000364:	0c20      	lsrs	r0, r4, #16
 8000366:	fbb1 f3f7 	udiv	r3, r1, r7
 800036a:	fb07 1113 	mls	r1, r7, r3, r1
 800036e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000372:	fb0e f003 	mul.w	r0, lr, r3
 8000376:	4288      	cmp	r0, r1
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0x12c>
 800037a:	eb1c 0101 	adds.w	r1, ip, r1
 800037e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x12a>
 8000384:	4288      	cmp	r0, r1
 8000386:	f200 80cb 	bhi.w	8000520 <__udivmoddi4+0x2c0>
 800038a:	4643      	mov	r3, r8
 800038c:	1a09      	subs	r1, r1, r0
 800038e:	b2a4      	uxth	r4, r4
 8000390:	fbb1 f0f7 	udiv	r0, r1, r7
 8000394:	fb07 1110 	mls	r1, r7, r0, r1
 8000398:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800039c:	fb0e fe00 	mul.w	lr, lr, r0
 80003a0:	45a6      	cmp	lr, r4
 80003a2:	d908      	bls.n	80003b6 <__udivmoddi4+0x156>
 80003a4:	eb1c 0404 	adds.w	r4, ip, r4
 80003a8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003ac:	d202      	bcs.n	80003b4 <__udivmoddi4+0x154>
 80003ae:	45a6      	cmp	lr, r4
 80003b0:	f200 80bb 	bhi.w	800052a <__udivmoddi4+0x2ca>
 80003b4:	4608      	mov	r0, r1
 80003b6:	eba4 040e 	sub.w	r4, r4, lr
 80003ba:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003be:	e79c      	b.n	80002fa <__udivmoddi4+0x9a>
 80003c0:	f1c6 0720 	rsb	r7, r6, #32
 80003c4:	40b3      	lsls	r3, r6
 80003c6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ca:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ce:	fa20 f407 	lsr.w	r4, r0, r7
 80003d2:	fa01 f306 	lsl.w	r3, r1, r6
 80003d6:	431c      	orrs	r4, r3
 80003d8:	40f9      	lsrs	r1, r7
 80003da:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003de:	fa00 f306 	lsl.w	r3, r0, r6
 80003e2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003e6:	0c20      	lsrs	r0, r4, #16
 80003e8:	fa1f fe8c 	uxth.w	lr, ip
 80003ec:	fb09 1118 	mls	r1, r9, r8, r1
 80003f0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f4:	fb08 f00e 	mul.w	r0, r8, lr
 80003f8:	4288      	cmp	r0, r1
 80003fa:	fa02 f206 	lsl.w	r2, r2, r6
 80003fe:	d90b      	bls.n	8000418 <__udivmoddi4+0x1b8>
 8000400:	eb1c 0101 	adds.w	r1, ip, r1
 8000404:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000408:	f080 8088 	bcs.w	800051c <__udivmoddi4+0x2bc>
 800040c:	4288      	cmp	r0, r1
 800040e:	f240 8085 	bls.w	800051c <__udivmoddi4+0x2bc>
 8000412:	f1a8 0802 	sub.w	r8, r8, #2
 8000416:	4461      	add	r1, ip
 8000418:	1a09      	subs	r1, r1, r0
 800041a:	b2a4      	uxth	r4, r4
 800041c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000420:	fb09 1110 	mls	r1, r9, r0, r1
 8000424:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000428:	fb00 fe0e 	mul.w	lr, r0, lr
 800042c:	458e      	cmp	lr, r1
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x1e2>
 8000430:	eb1c 0101 	adds.w	r1, ip, r1
 8000434:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000438:	d26c      	bcs.n	8000514 <__udivmoddi4+0x2b4>
 800043a:	458e      	cmp	lr, r1
 800043c:	d96a      	bls.n	8000514 <__udivmoddi4+0x2b4>
 800043e:	3802      	subs	r0, #2
 8000440:	4461      	add	r1, ip
 8000442:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000446:	fba0 9402 	umull	r9, r4, r0, r2
 800044a:	eba1 010e 	sub.w	r1, r1, lr
 800044e:	42a1      	cmp	r1, r4
 8000450:	46c8      	mov	r8, r9
 8000452:	46a6      	mov	lr, r4
 8000454:	d356      	bcc.n	8000504 <__udivmoddi4+0x2a4>
 8000456:	d053      	beq.n	8000500 <__udivmoddi4+0x2a0>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x212>
 800045a:	ebb3 0208 	subs.w	r2, r3, r8
 800045e:	eb61 010e 	sbc.w	r1, r1, lr
 8000462:	fa01 f707 	lsl.w	r7, r1, r7
 8000466:	fa22 f306 	lsr.w	r3, r2, r6
 800046a:	40f1      	lsrs	r1, r6
 800046c:	431f      	orrs	r7, r3
 800046e:	e9c5 7100 	strd	r7, r1, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	f1c2 0320 	rsb	r3, r2, #32
 800047e:	40d8      	lsrs	r0, r3
 8000480:	fa0c fc02 	lsl.w	ip, ip, r2
 8000484:	fa21 f303 	lsr.w	r3, r1, r3
 8000488:	4091      	lsls	r1, r2
 800048a:	4301      	orrs	r1, r0
 800048c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fbb3 f0f7 	udiv	r0, r3, r7
 8000498:	fb07 3610 	mls	r6, r7, r0, r3
 800049c:	0c0b      	lsrs	r3, r1, #16
 800049e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004a2:	fb00 f60e 	mul.w	r6, r0, lr
 80004a6:	429e      	cmp	r6, r3
 80004a8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x260>
 80004ae:	eb1c 0303 	adds.w	r3, ip, r3
 80004b2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004b6:	d22f      	bcs.n	8000518 <__udivmoddi4+0x2b8>
 80004b8:	429e      	cmp	r6, r3
 80004ba:	d92d      	bls.n	8000518 <__udivmoddi4+0x2b8>
 80004bc:	3802      	subs	r0, #2
 80004be:	4463      	add	r3, ip
 80004c0:	1b9b      	subs	r3, r3, r6
 80004c2:	b289      	uxth	r1, r1
 80004c4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004c8:	fb07 3316 	mls	r3, r7, r6, r3
 80004cc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004d0:	fb06 f30e 	mul.w	r3, r6, lr
 80004d4:	428b      	cmp	r3, r1
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x28a>
 80004d8:	eb1c 0101 	adds.w	r1, ip, r1
 80004dc:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004e0:	d216      	bcs.n	8000510 <__udivmoddi4+0x2b0>
 80004e2:	428b      	cmp	r3, r1
 80004e4:	d914      	bls.n	8000510 <__udivmoddi4+0x2b0>
 80004e6:	3e02      	subs	r6, #2
 80004e8:	4461      	add	r1, ip
 80004ea:	1ac9      	subs	r1, r1, r3
 80004ec:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004f0:	e738      	b.n	8000364 <__udivmoddi4+0x104>
 80004f2:	462e      	mov	r6, r5
 80004f4:	4628      	mov	r0, r5
 80004f6:	e705      	b.n	8000304 <__udivmoddi4+0xa4>
 80004f8:	4606      	mov	r6, r0
 80004fa:	e6e3      	b.n	80002c4 <__udivmoddi4+0x64>
 80004fc:	4618      	mov	r0, r3
 80004fe:	e6f8      	b.n	80002f2 <__udivmoddi4+0x92>
 8000500:	454b      	cmp	r3, r9
 8000502:	d2a9      	bcs.n	8000458 <__udivmoddi4+0x1f8>
 8000504:	ebb9 0802 	subs.w	r8, r9, r2
 8000508:	eb64 0e0c 	sbc.w	lr, r4, ip
 800050c:	3801      	subs	r0, #1
 800050e:	e7a3      	b.n	8000458 <__udivmoddi4+0x1f8>
 8000510:	4646      	mov	r6, r8
 8000512:	e7ea      	b.n	80004ea <__udivmoddi4+0x28a>
 8000514:	4620      	mov	r0, r4
 8000516:	e794      	b.n	8000442 <__udivmoddi4+0x1e2>
 8000518:	4640      	mov	r0, r8
 800051a:	e7d1      	b.n	80004c0 <__udivmoddi4+0x260>
 800051c:	46d0      	mov	r8, sl
 800051e:	e77b      	b.n	8000418 <__udivmoddi4+0x1b8>
 8000520:	3b02      	subs	r3, #2
 8000522:	4461      	add	r1, ip
 8000524:	e732      	b.n	800038c <__udivmoddi4+0x12c>
 8000526:	4630      	mov	r0, r6
 8000528:	e709      	b.n	800033e <__udivmoddi4+0xde>
 800052a:	4464      	add	r4, ip
 800052c:	3802      	subs	r0, #2
 800052e:	e742      	b.n	80003b6 <__udivmoddi4+0x156>

08000530 <__aeabi_idiv0>:
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop

08000534 <BH1790GLC_init>:

#include "BH1790GLC.h"


uint8_t BH1790GLC_init( BH1790GLC *dev, I2C_HandleTypeDef *i2cHandle )
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b084      	sub	sp, #16
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
 800053c:	6039      	str	r1, [r7, #0]
	/* Set struct parameters */
	dev->i2cHandle = i2cHandle;
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	683a      	ldr	r2, [r7, #0]
 8000542:	601a      	str	r2, [r3, #0]
	dev->ppg_data[0] = 0;
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	2200      	movs	r2, #0
 8000548:	809a      	strh	r2, [r3, #4]
	dev->ppg_data[1] = 0;
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	2200      	movs	r2, #0
 800054e:	80da      	strh	r2, [r3, #6]
	/* Keep count of errors */
	HAL_StatusTypeDef status;

	/* Take initial reads to make sure I2C is working */
	uint8_t regData;
	status = read(dev, BH1790GLC_MANUFACTURER_ID, &regData);	//get manufacturer id
 8000550:	f107 030e 	add.w	r3, r7, #14
 8000554:	461a      	mov	r2, r3
 8000556:	210f      	movs	r1, #15
 8000558:	6878      	ldr	r0, [r7, #4]
 800055a:	f000 f8a3 	bl	80006a4 <read>
 800055e:	4603      	mov	r3, r0
 8000560:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK){
 8000562:	7bfb      	ldrb	r3, [r7, #15]
 8000564:	2b00      	cmp	r3, #0
 8000566:	d001      	beq.n	800056c <BH1790GLC_init+0x38>
		return ERR_MID_VAL;
 8000568:	230a      	movs	r3, #10
 800056a:	e04a      	b.n	8000602 <BH1790GLC_init+0xce>
	}
	if(regData != BH1790GLC_MID_VAL){
 800056c:	7bbb      	ldrb	r3, [r7, #14]
 800056e:	2be0      	cmp	r3, #224	; 0xe0
 8000570:	d001      	beq.n	8000576 <BH1790GLC_init+0x42>
		return ERR_MID_VAL;
 8000572:	230a      	movs	r3, #10
 8000574:	e045      	b.n	8000602 <BH1790GLC_init+0xce>
	}

	status = read(dev, BH1790GLC_PART_ID, &regData);	//get part id
 8000576:	f107 030e 	add.w	r3, r7, #14
 800057a:	461a      	mov	r2, r3
 800057c:	2110      	movs	r1, #16
 800057e:	6878      	ldr	r0, [r7, #4]
 8000580:	f000 f890 	bl	80006a4 <read>
 8000584:	4603      	mov	r3, r0
 8000586:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK){
 8000588:	7bfb      	ldrb	r3, [r7, #15]
 800058a:	2b00      	cmp	r3, #0
 800058c:	d001      	beq.n	8000592 <BH1790GLC_init+0x5e>
		return ERR_PID_VAL;
 800058e:	230b      	movs	r3, #11
 8000590:	e037      	b.n	8000602 <BH1790GLC_init+0xce>
	}
	if(regData != BH1790GLC_PID_VAL){
 8000592:	7bbb      	ldrb	r3, [r7, #14]
 8000594:	2b0d      	cmp	r3, #13
 8000596:	d001      	beq.n	800059c <BH1790GLC_init+0x68>
		return ERR_PID_VAL;
 8000598:	230b      	movs	r3, #11
 800059a:	e032      	b.n	8000602 <BH1790GLC_init+0xce>
	}

	/* Configure the 3 registers needed to start taking measurements */
	uint8_t configData[3];
	configData[0] = BH1790GLC_MEAS_CONTROL1_VAL;	//to BH1790GLC_MEAS_CONTROL1 (0x41)
 800059c:	2382      	movs	r3, #130	; 0x82
 800059e:	723b      	strb	r3, [r7, #8]
	configData[1] = BH1790GLC_MEAS_CONTROL2_VAL;	//to BH1790GLC_MEAS_CONTROL2 (0x42)
 80005a0:	230c      	movs	r3, #12
 80005a2:	727b      	strb	r3, [r7, #9]
	configData[2] = BH1790GLC_MEAS_START_VAL;		//to BH1790GLC_MEAS_START (0x43)
 80005a4:	2301      	movs	r3, #1
 80005a6:	72bb      	strb	r3, [r7, #10]

	status = write(dev, BH1790GLC_MEAS_CONTROL1, &configData[0]);
 80005a8:	f107 0308 	add.w	r3, r7, #8
 80005ac:	461a      	mov	r2, r3
 80005ae:	2141      	movs	r1, #65	; 0x41
 80005b0:	6878      	ldr	r0, [r7, #4]
 80005b2:	f000 f855 	bl	8000660 <write>
 80005b6:	4603      	mov	r3, r0
 80005b8:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK){
 80005ba:	7bfb      	ldrb	r3, [r7, #15]
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d001      	beq.n	80005c4 <BH1790GLC_init+0x90>
		return ERR_MEAS_CONTROL1;
 80005c0:	2314      	movs	r3, #20
 80005c2:	e01e      	b.n	8000602 <BH1790GLC_init+0xce>
	}
	status = write(dev, BH1790GLC_MEAS_CONTROL2, &configData[1]);
 80005c4:	f107 0308 	add.w	r3, r7, #8
 80005c8:	3301      	adds	r3, #1
 80005ca:	461a      	mov	r2, r3
 80005cc:	2142      	movs	r1, #66	; 0x42
 80005ce:	6878      	ldr	r0, [r7, #4]
 80005d0:	f000 f846 	bl	8000660 <write>
 80005d4:	4603      	mov	r3, r0
 80005d6:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK){
 80005d8:	7bfb      	ldrb	r3, [r7, #15]
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d001      	beq.n	80005e2 <BH1790GLC_init+0xae>
		return ERR_MEAS_CONTROL2;
 80005de:	2315      	movs	r3, #21
 80005e0:	e00f      	b.n	8000602 <BH1790GLC_init+0xce>
	}
	status = write(dev, BH1790GLC_MEAS_START, &configData[2]);
 80005e2:	f107 0308 	add.w	r3, r7, #8
 80005e6:	3302      	adds	r3, #2
 80005e8:	461a      	mov	r2, r3
 80005ea:	2143      	movs	r1, #67	; 0x43
 80005ec:	6878      	ldr	r0, [r7, #4]
 80005ee:	f000 f837 	bl	8000660 <write>
 80005f2:	4603      	mov	r3, r0
 80005f4:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK){
 80005f6:	7bfb      	ldrb	r3, [r7, #15]
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d001      	beq.n	8000600 <BH1790GLC_init+0xcc>
		return ERR_MEAS_START;
 80005fc:	2316      	movs	r3, #22
 80005fe:	e000      	b.n	8000602 <BH1790GLC_init+0xce>
	}

	return SUCCESS;
 8000600:	2300      	movs	r3, #0
}
 8000602:	4618      	mov	r0, r3
 8000604:	3710      	adds	r7, #16
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}

0800060a <get_val>:

/*
 * Puts the ppg readings into the ppg_data struct variable
 */
uint8_t get_val( BH1790GLC *dev )
{
 800060a:	b580      	push	{r7, lr}
 800060c:	b084      	sub	sp, #16
 800060e:	af00      	add	r7, sp, #0
 8000610:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status;
	uint8_t sensorData[4];

	status = many_reads(dev, BH1790GLC_DATAOUT_LEDOFF, sensorData, 4);
 8000612:	f107 0208 	add.w	r2, r7, #8
 8000616:	2304      	movs	r3, #4
 8000618:	2154      	movs	r1, #84	; 0x54
 800061a:	6878      	ldr	r0, [r7, #4]
 800061c:	f000 f864 	bl	80006e8 <many_reads>
 8000620:	4603      	mov	r3, r0
 8000622:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK){
 8000624:	7bfb      	ldrb	r3, [r7, #15]
 8000626:	2b00      	cmp	r3, #0
 8000628:	d001      	beq.n	800062e <get_val+0x24>
		return ERR_DATA_OUT;		//error check
 800062a:	231e      	movs	r3, #30
 800062c:	e014      	b.n	8000658 <get_val+0x4e>
	}

	//convert the sensorData values to useful data
	dev->ppg_data[0] = ((uint16_t)sensorData[1]<<8)|(sensorData[0]);	//LED OFF
 800062e:	7a7b      	ldrb	r3, [r7, #9]
 8000630:	021b      	lsls	r3, r3, #8
 8000632:	b21a      	sxth	r2, r3
 8000634:	7a3b      	ldrb	r3, [r7, #8]
 8000636:	b21b      	sxth	r3, r3
 8000638:	4313      	orrs	r3, r2
 800063a:	b21b      	sxth	r3, r3
 800063c:	b29a      	uxth	r2, r3
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	809a      	strh	r2, [r3, #4]
	dev->ppg_data[1] = ((uint16_t)sensorData[3]<<8)|(sensorData[2]);	//LED ON
 8000642:	7afb      	ldrb	r3, [r7, #11]
 8000644:	021b      	lsls	r3, r3, #8
 8000646:	b21a      	sxth	r2, r3
 8000648:	7abb      	ldrb	r3, [r7, #10]
 800064a:	b21b      	sxth	r3, r3
 800064c:	4313      	orrs	r3, r2
 800064e:	b21b      	sxth	r3, r3
 8000650:	b29a      	uxth	r2, r3
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	80da      	strh	r2, [r3, #6]

	return SUCCESS;
 8000656:	2300      	movs	r3, #0
}
 8000658:	4618      	mov	r0, r3
 800065a:	3710      	adds	r7, #16
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}

08000660 <write>:
 * dev : device
 * reg : register to write to
 * data : what to write
 */
HAL_StatusTypeDef write( BH1790GLC *dev, uint8_t reg, uint8_t *data)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b08a      	sub	sp, #40	; 0x28
 8000664:	af04      	add	r7, sp, #16
 8000666:	60f8      	str	r0, [r7, #12]
 8000668:	460b      	mov	r3, r1
 800066a:	607a      	str	r2, [r7, #4]
 800066c:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef ret;

	//passing my handle, read from peripheral, get from this register, size of that register,
	// where to put the data, 1 byte of data, max delay
	ret = HAL_I2C_Mem_Write(dev->i2cHandle, (BH1790GLC_DEVICE_ADDRESS<<1), reg, 1, data, 1, HAL_MAX_DELAY);
 800066e:	68fb      	ldr	r3, [r7, #12]
 8000670:	6818      	ldr	r0, [r3, #0]
 8000672:	7afb      	ldrb	r3, [r7, #11]
 8000674:	b29a      	uxth	r2, r3
 8000676:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800067a:	9302      	str	r3, [sp, #8]
 800067c:	2301      	movs	r3, #1
 800067e:	9301      	str	r3, [sp, #4]
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	9300      	str	r3, [sp, #0]
 8000684:	2301      	movs	r3, #1
 8000686:	21b6      	movs	r1, #182	; 0xb6
 8000688:	f003 fb7c 	bl	8003d84 <HAL_I2C_Mem_Write>
 800068c:	4603      	mov	r3, r0
 800068e:	75fb      	strb	r3, [r7, #23]
	if(ret != HAL_OK){
 8000690:	7dfb      	ldrb	r3, [r7, #23]
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <write+0x3a>
		return ret;			//error check
 8000696:	7dfb      	ldrb	r3, [r7, #23]
 8000698:	e000      	b.n	800069c <write+0x3c>
	}

	return HAL_OK;
 800069a:	2300      	movs	r3, #0
}
 800069c:	4618      	mov	r0, r3
 800069e:	3718      	adds	r7, #24
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}

080006a4 <read>:
 * dev : device
 * reg : register to read from
 * data : stores what was read
 */
HAL_StatusTypeDef read( BH1790GLC *dev, uint8_t reg, uint8_t *data)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b08a      	sub	sp, #40	; 0x28
 80006a8:	af04      	add	r7, sp, #16
 80006aa:	60f8      	str	r0, [r7, #12]
 80006ac:	460b      	mov	r3, r1
 80006ae:	607a      	str	r2, [r7, #4]
 80006b0:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef ret;

	ret = HAL_I2C_Mem_Read(dev->i2cHandle, (BH1790GLC_DEVICE_ADDRESS<<1), reg, 1, data, 1, HAL_MAX_DELAY);
 80006b2:	68fb      	ldr	r3, [r7, #12]
 80006b4:	6818      	ldr	r0, [r3, #0]
 80006b6:	7afb      	ldrb	r3, [r7, #11]
 80006b8:	b29a      	uxth	r2, r3
 80006ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80006be:	9302      	str	r3, [sp, #8]
 80006c0:	2301      	movs	r3, #1
 80006c2:	9301      	str	r3, [sp, #4]
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	9300      	str	r3, [sp, #0]
 80006c8:	2301      	movs	r3, #1
 80006ca:	21b6      	movs	r1, #182	; 0xb6
 80006cc:	f003 fc6e 	bl	8003fac <HAL_I2C_Mem_Read>
 80006d0:	4603      	mov	r3, r0
 80006d2:	75fb      	strb	r3, [r7, #23]
	if(ret != HAL_OK){
 80006d4:	7dfb      	ldrb	r3, [r7, #23]
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <read+0x3a>
		return ret;			//error check
 80006da:	7dfb      	ldrb	r3, [r7, #23]
 80006dc:	e000      	b.n	80006e0 <read+0x3c>
	}


	return HAL_OK;
 80006de:	2300      	movs	r3, #0
}
 80006e0:	4618      	mov	r0, r3
 80006e2:	3718      	adds	r7, #24
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}

080006e8 <many_reads>:
 * reg : register to read from
 * data : stores what was read
 * length : number of registers to read (in bytes)
 */
HAL_StatusTypeDef many_reads( BH1790GLC *dev, uint8_t reg, uint8_t *data, uint8_t length )
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b08a      	sub	sp, #40	; 0x28
 80006ec:	af04      	add	r7, sp, #16
 80006ee:	60f8      	str	r0, [r7, #12]
 80006f0:	607a      	str	r2, [r7, #4]
 80006f2:	461a      	mov	r2, r3
 80006f4:	460b      	mov	r3, r1
 80006f6:	72fb      	strb	r3, [r7, #11]
 80006f8:	4613      	mov	r3, r2
 80006fa:	72bb      	strb	r3, [r7, #10]
	HAL_StatusTypeDef ret;

	ret = HAL_I2C_Mem_Read(dev->i2cHandle, (BH1790GLC_DEVICE_ADDRESS<<1), reg, 1, data, length, HAL_MAX_DELAY);
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	6818      	ldr	r0, [r3, #0]
 8000700:	7afb      	ldrb	r3, [r7, #11]
 8000702:	b29a      	uxth	r2, r3
 8000704:	7abb      	ldrb	r3, [r7, #10]
 8000706:	b29b      	uxth	r3, r3
 8000708:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800070c:	9102      	str	r1, [sp, #8]
 800070e:	9301      	str	r3, [sp, #4]
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	9300      	str	r3, [sp, #0]
 8000714:	2301      	movs	r3, #1
 8000716:	21b6      	movs	r1, #182	; 0xb6
 8000718:	f003 fc48 	bl	8003fac <HAL_I2C_Mem_Read>
 800071c:	4603      	mov	r3, r0
 800071e:	75fb      	strb	r3, [r7, #23]
	if(ret != HAL_OK){
 8000720:	7dfb      	ldrb	r3, [r7, #23]
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <many_reads+0x42>
		return ret;			//error check
 8000726:	7dfb      	ldrb	r3, [r7, #23]
 8000728:	e000      	b.n	800072c <many_reads+0x44>
	}

	return HAL_OK;
 800072a:	2300      	movs	r3, #0
}
 800072c:	4618      	mov	r0, r3
 800072e:	3718      	adds	r7, #24
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}

08000734 <ICM_readBytes>:
 *
 * SPI abstraction
 *
 */
void ICM_readBytes(ICM20948 *dev, uint8_t reg, uint8_t *pData, uint16_t Size) // ***
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b084      	sub	sp, #16
 8000738:	af00      	add	r7, sp, #0
 800073a:	60f8      	str	r0, [r7, #12]
 800073c:	607a      	str	r2, [r7, #4]
 800073e:	461a      	mov	r2, r3
 8000740:	460b      	mov	r3, r1
 8000742:	72fb      	strb	r3, [r7, #11]
 8000744:	4613      	mov	r3, r2
 8000746:	813b      	strh	r3, [r7, #8]
	reg = reg | 0x80;
 8000748:	7afb      	ldrb	r3, [r7, #11]
 800074a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800074e:	b2db      	uxtb	r3, r3
 8000750:	72fb      	strb	r3, [r7, #11]
	HAL_GPIO_WritePin(ICM_CS_GPIO_Port, ICM_CS_Pin, GPIO_PIN_RESET);
 8000752:	2200      	movs	r2, #0
 8000754:	2108      	movs	r1, #8
 8000756:	480d      	ldr	r0, [pc, #52]	; (800078c <ICM_readBytes+0x58>)
 8000758:	f003 fa48 	bl	8003bec <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_DMA(dev->spiHandle, &reg, 1);
 800075c:	68fb      	ldr	r3, [r7, #12]
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	f107 010b 	add.w	r1, r7, #11
 8000764:	2201      	movs	r2, #1
 8000766:	4618      	mov	r0, r3
 8000768:	f006 fce4 	bl	8007134 <HAL_SPI_Transmit_DMA>
	HAL_SPI_Receive_DMA(dev->spiHandle, pData, Size);
 800076c:	68fb      	ldr	r3, [r7, #12]
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	893a      	ldrh	r2, [r7, #8]
 8000772:	6879      	ldr	r1, [r7, #4]
 8000774:	4618      	mov	r0, r3
 8000776:	f006 fdd1 	bl	800731c <HAL_SPI_Receive_DMA>
	HAL_GPIO_WritePin(ICM_CS_GPIO_Port, ICM_CS_Pin, GPIO_PIN_SET);
 800077a:	2201      	movs	r2, #1
 800077c:	2108      	movs	r1, #8
 800077e:	4803      	ldr	r0, [pc, #12]	; (800078c <ICM_readBytes+0x58>)
 8000780:	f003 fa34 	bl	8003bec <HAL_GPIO_WritePin>
}
 8000784:	bf00      	nop
 8000786:	3710      	adds	r7, #16
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	48000400 	.word	0x48000400

08000790 <ICM_ReadOneByte>:
	HAL_GPIO_WritePin(ICM_CS_GPIO_Port, ICM_CS_Pin, GPIO_PIN_SET);

}

void ICM_ReadOneByte(ICM20948 *dev, uint8_t reg, uint8_t* pData) // ***
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b084      	sub	sp, #16
 8000794:	af00      	add	r7, sp, #0
 8000796:	60f8      	str	r0, [r7, #12]
 8000798:	460b      	mov	r3, r1
 800079a:	607a      	str	r2, [r7, #4]
 800079c:	72fb      	strb	r3, [r7, #11]
	reg = reg | 0x80;
 800079e:	7afb      	ldrb	r3, [r7, #11]
 80007a0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80007a4:	b2db      	uxtb	r3, r3
 80007a6:	72fb      	strb	r3, [r7, #11]
	HAL_GPIO_WritePin(ICM_CS_GPIO_Port, ICM_CS_Pin, GPIO_PIN_RESET);
 80007a8:	2200      	movs	r2, #0
 80007aa:	2108      	movs	r1, #8
 80007ac:	4816      	ldr	r0, [pc, #88]	; (8000808 <ICM_ReadOneByte+0x78>)
 80007ae:	f003 fa1d 	bl	8003bec <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_DMA(dev->spiHandle, &reg, 1);
 80007b2:	68fb      	ldr	r3, [r7, #12]
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	f107 010b 	add.w	r1, r7, #11
 80007ba:	2201      	movs	r2, #1
 80007bc:	4618      	mov	r0, r3
 80007be:	f006 fcb9 	bl	8007134 <HAL_SPI_Transmit_DMA>
	while (HAL_SPI_GetState(dev->spiHandle) != HAL_SPI_STATE_READY)
 80007c2:	bf00      	nop
 80007c4:	68fb      	ldr	r3, [r7, #12]
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	4618      	mov	r0, r3
 80007ca:	f007 f99d 	bl	8007b08 <HAL_SPI_GetState>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b01      	cmp	r3, #1
 80007d2:	d1f7      	bne.n	80007c4 <ICM_ReadOneByte+0x34>
		;
	HAL_SPI_Receive_DMA(dev->spiHandle, pData, 1);
 80007d4:	68fb      	ldr	r3, [r7, #12]
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	2201      	movs	r2, #1
 80007da:	6879      	ldr	r1, [r7, #4]
 80007dc:	4618      	mov	r0, r3
 80007de:	f006 fd9d 	bl	800731c <HAL_SPI_Receive_DMA>
	while (HAL_SPI_GetState(dev->spiHandle) != HAL_SPI_STATE_READY)
 80007e2:	bf00      	nop
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	4618      	mov	r0, r3
 80007ea:	f007 f98d 	bl	8007b08 <HAL_SPI_GetState>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b01      	cmp	r3, #1
 80007f2:	d1f7      	bne.n	80007e4 <ICM_ReadOneByte+0x54>
		;
	HAL_GPIO_WritePin(ICM_CS_GPIO_Port, ICM_CS_Pin, GPIO_PIN_SET);
 80007f4:	2201      	movs	r2, #1
 80007f6:	2108      	movs	r1, #8
 80007f8:	4803      	ldr	r0, [pc, #12]	; (8000808 <ICM_ReadOneByte+0x78>)
 80007fa:	f003 f9f7 	bl	8003bec <HAL_GPIO_WritePin>
}
 80007fe:	bf00      	nop
 8000800:	3710      	adds	r7, #16
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	48000400 	.word	0x48000400

0800080c <ICM_WriteOneByte>:

void ICM_WriteOneByte(ICM20948 *dev, uint8_t reg, uint8_t Data) // ***
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
 8000814:	460b      	mov	r3, r1
 8000816:	70fb      	strb	r3, [r7, #3]
 8000818:	4613      	mov	r3, r2
 800081a:	70bb      	strb	r3, [r7, #2]
	reg = reg & 0x7F;
 800081c:	78fb      	ldrb	r3, [r7, #3]
 800081e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000822:	b2db      	uxtb	r3, r3
 8000824:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(ICM_CS_GPIO_Port, ICM_CS_Pin, GPIO_PIN_RESET);
 8000826:	2200      	movs	r2, #0
 8000828:	2108      	movs	r1, #8
 800082a:	480d      	ldr	r0, [pc, #52]	; (8000860 <ICM_WriteOneByte+0x54>)
 800082c:	f003 f9de 	bl	8003bec <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_DMA(dev->spiHandle, &reg, 1);
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	1cf9      	adds	r1, r7, #3
 8000836:	2201      	movs	r2, #1
 8000838:	4618      	mov	r0, r3
 800083a:	f006 fc7b 	bl	8007134 <HAL_SPI_Transmit_DMA>
	HAL_SPI_Transmit_DMA(dev->spiHandle, &Data, 1);
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	1cb9      	adds	r1, r7, #2
 8000844:	2201      	movs	r2, #1
 8000846:	4618      	mov	r0, r3
 8000848:	f006 fc74 	bl	8007134 <HAL_SPI_Transmit_DMA>
	HAL_GPIO_WritePin(ICM_CS_GPIO_Port, ICM_CS_Pin, GPIO_PIN_SET);
 800084c:	2201      	movs	r2, #1
 800084e:	2108      	movs	r1, #8
 8000850:	4803      	ldr	r0, [pc, #12]	; (8000860 <ICM_WriteOneByte+0x54>)
 8000852:	f003 f9cb 	bl	8003bec <HAL_GPIO_WritePin>
}
 8000856:	bf00      	nop
 8000858:	3708      	adds	r7, #8
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	48000400 	.word	0x48000400

08000864 <i2c_Mag_write>:
 *
 * AUX I2C abstraction for magnetometer
 *
 */
void i2c_Mag_write(ICM20948 *dev, uint8_t reg,uint8_t value)
  {
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
 800086c:	460b      	mov	r3, r1
 800086e:	70fb      	strb	r3, [r7, #3]
 8000870:	4613      	mov	r3, r2
 8000872:	70bb      	strb	r3, [r7, #2]
  	ICM_WriteOneByte(dev, 0x7F, 0x30);
 8000874:	2230      	movs	r2, #48	; 0x30
 8000876:	217f      	movs	r1, #127	; 0x7f
 8000878:	6878      	ldr	r0, [r7, #4]
 800087a:	f7ff ffc7 	bl	800080c <ICM_WriteOneByte>

  	HAL_Delay(1);
 800087e:	2001      	movs	r0, #1
 8000880:	f000 fd77 	bl	8001372 <HAL_Delay>
  	ICM_WriteOneByte(dev, 0x03 ,0x0C);//mode: write
 8000884:	220c      	movs	r2, #12
 8000886:	2103      	movs	r1, #3
 8000888:	6878      	ldr	r0, [r7, #4]
 800088a:	f7ff ffbf 	bl	800080c <ICM_WriteOneByte>

  	HAL_Delay(1);
 800088e:	2001      	movs	r0, #1
 8000890:	f000 fd6f 	bl	8001372 <HAL_Delay>
  	ICM_WriteOneByte(dev, 0x04 ,reg);//set reg addr
 8000894:	78fb      	ldrb	r3, [r7, #3]
 8000896:	461a      	mov	r2, r3
 8000898:	2104      	movs	r1, #4
 800089a:	6878      	ldr	r0, [r7, #4]
 800089c:	f7ff ffb6 	bl	800080c <ICM_WriteOneByte>

  	HAL_Delay(1);
 80008a0:	2001      	movs	r0, #1
 80008a2:	f000 fd66 	bl	8001372 <HAL_Delay>
  	ICM_WriteOneByte(dev, 0x06 ,value);//send value
 80008a6:	78bb      	ldrb	r3, [r7, #2]
 80008a8:	461a      	mov	r2, r3
 80008aa:	2106      	movs	r1, #6
 80008ac:	6878      	ldr	r0, [r7, #4]
 80008ae:	f7ff ffad 	bl	800080c <ICM_WriteOneByte>

  	HAL_Delay(1);
 80008b2:	2001      	movs	r0, #1
 80008b4:	f000 fd5d 	bl	8001372 <HAL_Delay>
  }
 80008b8:	bf00      	nop
 80008ba:	3708      	adds	r7, #8
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}

080008c0 <ICM_Mag_Read>:

  static uint8_t ICM_Mag_Read(ICM20948 *dev, uint8_t reg)
  {
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b084      	sub	sp, #16
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
 80008c8:	460b      	mov	r3, r1
 80008ca:	70fb      	strb	r3, [r7, #3]
  	uint8_t  Data;
  	ICM_WriteOneByte(dev, 0x7F, 0x30);
 80008cc:	2230      	movs	r2, #48	; 0x30
 80008ce:	217f      	movs	r1, #127	; 0x7f
 80008d0:	6878      	ldr	r0, [r7, #4]
 80008d2:	f7ff ff9b 	bl	800080c <ICM_WriteOneByte>
    HAL_Delay(1);
 80008d6:	2001      	movs	r0, #1
 80008d8:	f000 fd4b 	bl	8001372 <HAL_Delay>
  	ICM_WriteOneByte(dev, 0x03 ,0x0C|0x80);
 80008dc:	228c      	movs	r2, #140	; 0x8c
 80008de:	2103      	movs	r1, #3
 80008e0:	6878      	ldr	r0, [r7, #4]
 80008e2:	f7ff ff93 	bl	800080c <ICM_WriteOneByte>
    HAL_Delay(1);
 80008e6:	2001      	movs	r0, #1
 80008e8:	f000 fd43 	bl	8001372 <HAL_Delay>
  	ICM_WriteOneByte(dev, 0x04 ,reg);// set reg addr
 80008ec:	78fb      	ldrb	r3, [r7, #3]
 80008ee:	461a      	mov	r2, r3
 80008f0:	2104      	movs	r1, #4
 80008f2:	6878      	ldr	r0, [r7, #4]
 80008f4:	f7ff ff8a 	bl	800080c <ICM_WriteOneByte>
    HAL_Delay(1);
 80008f8:	2001      	movs	r0, #1
 80008fa:	f000 fd3a 	bl	8001372 <HAL_Delay>
  	ICM_WriteOneByte(dev, 0x06 ,0xff);//read
 80008fe:	22ff      	movs	r2, #255	; 0xff
 8000900:	2106      	movs	r1, #6
 8000902:	6878      	ldr	r0, [r7, #4]
 8000904:	f7ff ff82 	bl	800080c <ICM_WriteOneByte>
  	HAL_Delay(1);
 8000908:	2001      	movs	r0, #1
 800090a:	f000 fd32 	bl	8001372 <HAL_Delay>
  	ICM_WriteOneByte(dev, 0x7F, 0x00);
 800090e:	2200      	movs	r2, #0
 8000910:	217f      	movs	r1, #127	; 0x7f
 8000912:	6878      	ldr	r0, [r7, #4]
 8000914:	f7ff ff7a 	bl	800080c <ICM_WriteOneByte>
  	ICM_ReadOneByte(dev, 0x3B,&Data);
 8000918:	f107 030f 	add.w	r3, r7, #15
 800091c:	461a      	mov	r2, r3
 800091e:	213b      	movs	r1, #59	; 0x3b
 8000920:	6878      	ldr	r0, [r7, #4]
 8000922:	f7ff ff35 	bl	8000790 <ICM_ReadOneByte>
    HAL_Delay(1);
 8000926:	2001      	movs	r0, #1
 8000928:	f000 fd23 	bl	8001372 <HAL_Delay>
  	return Data;
 800092c:	7bfb      	ldrb	r3, [r7, #15]
  }
 800092e:	4618      	mov	r0, r3
 8000930:	3710      	adds	r7, #16
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}

08000936 <ICM_ReadMagData>:
/*
 *
 * Read magnetometer
 *
 */
void ICM_ReadMagData(ICM20948 *dev, int16_t magn[3]) {
 8000936:	b580      	push	{r7, lr}
 8000938:	b086      	sub	sp, #24
 800093a:	af00      	add	r7, sp, #0
 800093c:	6078      	str	r0, [r7, #4]
 800093e:	6039      	str	r1, [r7, #0]
	uint8_t mag_buffer[10];

	      mag_buffer[0] =ICM_Mag_Read(dev, 0x01);
 8000940:	2101      	movs	r1, #1
 8000942:	6878      	ldr	r0, [r7, #4]
 8000944:	f7ff ffbc 	bl	80008c0 <ICM_Mag_Read>
 8000948:	4603      	mov	r3, r0
 800094a:	733b      	strb	r3, [r7, #12]

	      mag_buffer[1] =ICM_Mag_Read(dev, 0x11);
 800094c:	2111      	movs	r1, #17
 800094e:	6878      	ldr	r0, [r7, #4]
 8000950:	f7ff ffb6 	bl	80008c0 <ICM_Mag_Read>
 8000954:	4603      	mov	r3, r0
 8000956:	737b      	strb	r3, [r7, #13]
	  	  mag_buffer[2] =ICM_Mag_Read(dev, 0x12);
 8000958:	2112      	movs	r1, #18
 800095a:	6878      	ldr	r0, [r7, #4]
 800095c:	f7ff ffb0 	bl	80008c0 <ICM_Mag_Read>
 8000960:	4603      	mov	r3, r0
 8000962:	73bb      	strb	r3, [r7, #14]
	  	  magn[0]=mag_buffer[1]|mag_buffer[2]<<8;
 8000964:	7b7b      	ldrb	r3, [r7, #13]
 8000966:	b21a      	sxth	r2, r3
 8000968:	7bbb      	ldrb	r3, [r7, #14]
 800096a:	021b      	lsls	r3, r3, #8
 800096c:	b21b      	sxth	r3, r3
 800096e:	4313      	orrs	r3, r2
 8000970:	b21a      	sxth	r2, r3
 8000972:	683b      	ldr	r3, [r7, #0]
 8000974:	801a      	strh	r2, [r3, #0]
	    	mag_buffer[3] =ICM_Mag_Read(dev, 0x13);
 8000976:	2113      	movs	r1, #19
 8000978:	6878      	ldr	r0, [r7, #4]
 800097a:	f7ff ffa1 	bl	80008c0 <ICM_Mag_Read>
 800097e:	4603      	mov	r3, r0
 8000980:	73fb      	strb	r3, [r7, #15]
	      mag_buffer[4] =ICM_Mag_Read(dev, 0x14);
 8000982:	2114      	movs	r1, #20
 8000984:	6878      	ldr	r0, [r7, #4]
 8000986:	f7ff ff9b 	bl	80008c0 <ICM_Mag_Read>
 800098a:	4603      	mov	r3, r0
 800098c:	743b      	strb	r3, [r7, #16]
	    	magn[1]=mag_buffer[3]|mag_buffer[4]<<8;
 800098e:	7bfb      	ldrb	r3, [r7, #15]
 8000990:	b219      	sxth	r1, r3
 8000992:	7c3b      	ldrb	r3, [r7, #16]
 8000994:	021b      	lsls	r3, r3, #8
 8000996:	b21a      	sxth	r2, r3
 8000998:	683b      	ldr	r3, [r7, #0]
 800099a:	3302      	adds	r3, #2
 800099c:	430a      	orrs	r2, r1
 800099e:	b212      	sxth	r2, r2
 80009a0:	801a      	strh	r2, [r3, #0]
	  	 	mag_buffer[5] =ICM_Mag_Read(dev, 0x15);
 80009a2:	2115      	movs	r1, #21
 80009a4:	6878      	ldr	r0, [r7, #4]
 80009a6:	f7ff ff8b 	bl	80008c0 <ICM_Mag_Read>
 80009aa:	4603      	mov	r3, r0
 80009ac:	747b      	strb	r3, [r7, #17]
	      mag_buffer[6] =ICM_Mag_Read(dev, 0x16);
 80009ae:	2116      	movs	r1, #22
 80009b0:	6878      	ldr	r0, [r7, #4]
 80009b2:	f7ff ff85 	bl	80008c0 <ICM_Mag_Read>
 80009b6:	4603      	mov	r3, r0
 80009b8:	74bb      	strb	r3, [r7, #18]
	  		magn[2]=mag_buffer[5]|mag_buffer[6]<<8;
 80009ba:	7c7b      	ldrb	r3, [r7, #17]
 80009bc:	b219      	sxth	r1, r3
 80009be:	7cbb      	ldrb	r3, [r7, #18]
 80009c0:	021b      	lsls	r3, r3, #8
 80009c2:	b21a      	sxth	r2, r3
 80009c4:	683b      	ldr	r3, [r7, #0]
 80009c6:	3304      	adds	r3, #4
 80009c8:	430a      	orrs	r2, r1
 80009ca:	b212      	sxth	r2, r2
 80009cc:	801a      	strh	r2, [r3, #0]

	     	i2c_Mag_write(dev, 0x31,0x01);
 80009ce:	2201      	movs	r2, #1
 80009d0:	2131      	movs	r1, #49	; 0x31
 80009d2:	6878      	ldr	r0, [r7, #4]
 80009d4:	f7ff ff46 	bl	8000864 <i2c_Mag_write>
}
 80009d8:	bf00      	nop
 80009da:	3718      	adds	r7, #24
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}

080009e0 <ICM_PowerOn>:
/*
 *
 * Sequence to setup ICM290948 as early as possible after power on
 *
 */
void ICM_PowerOn(ICM20948 *dev, SPI_HandleTypeDef *spiHandle) {
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b0b6      	sub	sp, #216	; 0xd8
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
 80009e8:	6039      	str	r1, [r7, #0]

	dev->spiHandle = spiHandle;
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	683a      	ldr	r2, [r7, #0]
 80009ee:	601a      	str	r2, [r3, #0]

	dev->accel_data[0] = 0;
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	2200      	movs	r2, #0
 80009f4:	809a      	strh	r2, [r3, #4]
	dev->accel_data[1] = 0;
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	2200      	movs	r2, #0
 80009fa:	80da      	strh	r2, [r3, #6]
	dev->accel_data[2] = 0;
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	2200      	movs	r2, #0
 8000a00:	811a      	strh	r2, [r3, #8]

	dev->gyro_data[0] = 0;
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	2200      	movs	r2, #0
 8000a06:	815a      	strh	r2, [r3, #10]
	dev->gyro_data[1] = 0;
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	819a      	strh	r2, [r3, #12]
	dev->gyro_data[2] = 0;
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	2200      	movs	r2, #0
 8000a12:	81da      	strh	r2, [r3, #14]

	dev->mag_data[0] = 0;
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	2200      	movs	r2, #0
 8000a18:	821a      	strh	r2, [r3, #16]
	dev->mag_data[1] = 0;
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	825a      	strh	r2, [r3, #18]
	dev->mag_data[2] = 0;
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	2200      	movs	r2, #0
 8000a24:	829a      	strh	r2, [r3, #20]

	char uart_buffer[200];
	uint8_t whoami = 0xEA;
 8000a26:	23ea      	movs	r3, #234	; 0xea
 8000a28:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
	uint8_t test = ICM_WHOAMI(dev);
 8000a2c:	6878      	ldr	r0, [r7, #4]
 8000a2e:	f000 f96b 	bl	8000d08 <ICM_WHOAMI>
 8000a32:	4603      	mov	r3, r0
 8000a34:	f887 30d6 	strb.w	r3, [r7, #214]	; 0xd6
	//if (test == whoami) {
		ICM_CSHigh();
 8000a38:	f000 f930 	bl	8000c9c <ICM_CSHigh>
		HAL_Delay(10);
 8000a3c:	200a      	movs	r0, #10
 8000a3e:	f000 fc98 	bl	8001372 <HAL_Delay>
		ICM_SelectBank(dev, USER_BANK_0);
 8000a42:	2100      	movs	r1, #0
 8000a44:	6878      	ldr	r0, [r7, #4]
 8000a46:	f000 f90b 	bl	8000c60 <ICM_SelectBank>
		HAL_Delay(10);
 8000a4a:	200a      	movs	r0, #10
 8000a4c:	f000 fc91 	bl	8001372 <HAL_Delay>
		ICM_Disable_I2C(dev);
 8000a50:	6878      	ldr	r0, [r7, #4]
 8000a52:	f000 f915 	bl	8000c80 <ICM_Disable_I2C>
		HAL_Delay(10);
 8000a56:	200a      	movs	r0, #10
 8000a58:	f000 fc8b 	bl	8001372 <HAL_Delay>
		ICM_SetClock(dev, (uint8_t)CLK_BEST_AVAIL);
 8000a5c:	2101      	movs	r1, #1
 8000a5e:	6878      	ldr	r0, [r7, #4]
 8000a60:	f000 f928 	bl	8000cb4 <ICM_SetClock>
		HAL_Delay(10);
 8000a64:	200a      	movs	r0, #10
 8000a66:	f000 fc84 	bl	8001372 <HAL_Delay>
		ICM_AccelGyroOff(dev);
 8000a6a:	6878      	ldr	r0, [r7, #4]
 8000a6c:	f000 f932 	bl	8000cd4 <ICM_AccelGyroOff>
		HAL_Delay(20);
 8000a70:	2014      	movs	r0, #20
 8000a72:	f000 fc7e 	bl	8001372 <HAL_Delay>
		ICM_AccelGyroOn(dev);
 8000a76:	6878      	ldr	r0, [r7, #4]
 8000a78:	f000 f939 	bl	8000cee <ICM_AccelGyroOn>
		HAL_Delay(10);
 8000a7c:	200a      	movs	r0, #10
 8000a7e:	f000 fc78 	bl	8001372 <HAL_Delay>
		ICM_Initialize(dev);
 8000a82:	6878      	ldr	r0, [r7, #4]
 8000a84:	f000 f804 	bl	8000a90 <ICM_Initialize>
	//} else {
		//sprintf(uart_buffer, "Failed WHO_AM_I.  %i is not 0xEA\r\n", test);
		//HAL_UART_Transmit_DMA(UART_BUS, (uint8_t*) uart_buffer, strlen(uart_buffer));
		//HAL_Delay(100);
	//}
}
 8000a88:	bf00      	nop
 8000a8a:	37d8      	adds	r7, #216	; 0xd8
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}

08000a90 <ICM_Initialize>:
uint16_t ICM_Initialize(ICM20948 *dev) {
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
		ICM_SelectBank(dev, USER_BANK_2);
 8000a98:	2120      	movs	r1, #32
 8000a9a:	6878      	ldr	r0, [r7, #4]
 8000a9c:	f000 f8e0 	bl	8000c60 <ICM_SelectBank>
		HAL_Delay(20);
 8000aa0:	2014      	movs	r0, #20
 8000aa2:	f000 fc66 	bl	8001372 <HAL_Delay>
		ICM_SetGyroRateLPF(dev, GYRO_RATE_250, GYRO_LPF_17HZ);
 8000aa6:	2229      	movs	r2, #41	; 0x29
 8000aa8:	2100      	movs	r1, #0
 8000aaa:	6878      	ldr	r0, [r7, #4]
 8000aac:	f000 f93e 	bl	8000d2c <ICM_SetGyroRateLPF>
		HAL_Delay(10);
 8000ab0:	200a      	movs	r0, #10
 8000ab2:	f000 fc5e 	bl	8001372 <HAL_Delay>

		// Set gyroscope sample rate to 100hz (0x0A) in GYRO_SMPLRT_DIV register (0x00)
		ICM_WriteOneByte(dev, 0x00, 0x0A);
 8000ab6:	220a      	movs	r2, #10
 8000ab8:	2100      	movs	r1, #0
 8000aba:	6878      	ldr	r0, [r7, #4]
 8000abc:	f7ff fea6 	bl	800080c <ICM_WriteOneByte>
		HAL_Delay(10);
 8000ac0:	200a      	movs	r0, #10
 8000ac2:	f000 fc56 	bl	8001372 <HAL_Delay>

		// Set accelerometer low pass filter to 136hz (0x11) and the rate to 8G (0x04) in register ACCEL_CONFIG (0x14)
		ICM_WriteOneByte(dev, 0x14, (0x04 | 0x11));
 8000ac6:	2215      	movs	r2, #21
 8000ac8:	2114      	movs	r1, #20
 8000aca:	6878      	ldr	r0, [r7, #4]
 8000acc:	f7ff fe9e 	bl	800080c <ICM_WriteOneByte>

		// Set accelerometer sample rate to 225hz (0x00) in ACCEL_SMPLRT_DIV_1 register (0x10)
		ICM_WriteOneByte(dev, 0x10, 0x00);
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	2110      	movs	r1, #16
 8000ad4:	6878      	ldr	r0, [r7, #4]
 8000ad6:	f7ff fe99 	bl	800080c <ICM_WriteOneByte>
		HAL_Delay(10);
 8000ada:	200a      	movs	r0, #10
 8000adc:	f000 fc49 	bl	8001372 <HAL_Delay>

		// Set accelerometer sample rate to 100 hz (0x0A) in ACCEL_SMPLRT_DIV_2 register (0x11)
		ICM_WriteOneByte(dev, 0x11, 0x0A);
 8000ae0:	220a      	movs	r2, #10
 8000ae2:	2111      	movs	r1, #17
 8000ae4:	6878      	ldr	r0, [r7, #4]
 8000ae6:	f7ff fe91 	bl	800080c <ICM_WriteOneByte>
		HAL_Delay(10);
 8000aea:	200a      	movs	r0, #10
 8000aec:	f000 fc41 	bl	8001372 <HAL_Delay>

		ICM_SelectBank(dev, USER_BANK_2);
 8000af0:	2120      	movs	r1, #32
 8000af2:	6878      	ldr	r0, [r7, #4]
 8000af4:	f000 f8b4 	bl	8000c60 <ICM_SelectBank>
		HAL_Delay(20);
 8000af8:	2014      	movs	r0, #20
 8000afa:	f000 fc3a 	bl	8001372 <HAL_Delay>

		// Configure AUX_I2C Magnetometer (onboard ICM-20948)
		ICM_WriteOneByte(dev, 0x7F, 0x00); // Select user bank 0
 8000afe:	2200      	movs	r2, #0
 8000b00:	217f      	movs	r1, #127	; 0x7f
 8000b02:	6878      	ldr	r0, [r7, #4]
 8000b04:	f7ff fe82 	bl	800080c <ICM_WriteOneByte>
		ICM_WriteOneByte(dev, 0x0F, 0x30); // INT Pin / Bypass Enable Configuration
 8000b08:	2230      	movs	r2, #48	; 0x30
 8000b0a:	210f      	movs	r1, #15
 8000b0c:	6878      	ldr	r0, [r7, #4]
 8000b0e:	f7ff fe7d 	bl	800080c <ICM_WriteOneByte>
		ICM_WriteOneByte(dev, 0x03, 0x20); // I2C_MST_EN
 8000b12:	2220      	movs	r2, #32
 8000b14:	2103      	movs	r1, #3
 8000b16:	6878      	ldr	r0, [r7, #4]
 8000b18:	f7ff fe78 	bl	800080c <ICM_WriteOneByte>
		ICM_WriteOneByte(dev, 0x7F, 0x30); // Select user bank 3
 8000b1c:	2230      	movs	r2, #48	; 0x30
 8000b1e:	217f      	movs	r1, #127	; 0x7f
 8000b20:	6878      	ldr	r0, [r7, #4]
 8000b22:	f7ff fe73 	bl	800080c <ICM_WriteOneByte>
		ICM_WriteOneByte(dev, 0x01, 0x4D); // I2C Master mode and Speed 400 kHz
 8000b26:	224d      	movs	r2, #77	; 0x4d
 8000b28:	2101      	movs	r1, #1
 8000b2a:	6878      	ldr	r0, [r7, #4]
 8000b2c:	f7ff fe6e 	bl	800080c <ICM_WriteOneByte>
		ICM_WriteOneByte(dev, 0x02, 0x01); // I2C_SLV0 _DLY_ enable
 8000b30:	2201      	movs	r2, #1
 8000b32:	2102      	movs	r1, #2
 8000b34:	6878      	ldr	r0, [r7, #4]
 8000b36:	f7ff fe69 	bl	800080c <ICM_WriteOneByte>
		ICM_WriteOneByte(dev, 0x05, 0x81); // enable IIC	and EXT_SENS_DATA==1 Byte
 8000b3a:	2281      	movs	r2, #129	; 0x81
 8000b3c:	2105      	movs	r1, #5
 8000b3e:	6878      	ldr	r0, [r7, #4]
 8000b40:	f7ff fe64 	bl	800080c <ICM_WriteOneByte>

		// Initialize magnetometer
		i2c_Mag_write(dev, 0x32, 0x01); // Reset AK8963
 8000b44:	2201      	movs	r2, #1
 8000b46:	2132      	movs	r1, #50	; 0x32
 8000b48:	6878      	ldr	r0, [r7, #4]
 8000b4a:	f7ff fe8b 	bl	8000864 <i2c_Mag_write>
		HAL_Delay(1000);
 8000b4e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b52:	f000 fc0e 	bl	8001372 <HAL_Delay>
		i2c_Mag_write(dev, 0x31, 0x02); // use i2c to set AK8963 working on Continuous measurement mode1 & 16-bit output
 8000b56:	2202      	movs	r2, #2
 8000b58:	2131      	movs	r1, #49	; 0x31
 8000b5a:	6878      	ldr	r0, [r7, #4]
 8000b5c:	f7ff fe82 	bl	8000864 <i2c_Mag_write>

		return 1337;
 8000b60:	f240 5339 	movw	r3, #1337	; 0x539
	}
 8000b64:	4618      	mov	r0, r3
 8000b66:	3708      	adds	r7, #8
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}

08000b6c <ICM_ReadAccelGyroData>:

void ICM_ReadAccelGyroData(ICM20948 *dev) {
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b086      	sub	sp, #24
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
	uint8_t raw_data[12];
	ICM_readBytes(dev, 0x2D, raw_data, 12);
 8000b74:	f107 020c 	add.w	r2, r7, #12
 8000b78:	230c      	movs	r3, #12
 8000b7a:	212d      	movs	r1, #45	; 0x2d
 8000b7c:	6878      	ldr	r0, [r7, #4]
 8000b7e:	f7ff fdd9 	bl	8000734 <ICM_readBytes>

	dev->accel_data[0] = (raw_data[0] << 8) | raw_data[1];
 8000b82:	7b3b      	ldrb	r3, [r7, #12]
 8000b84:	021b      	lsls	r3, r3, #8
 8000b86:	b21a      	sxth	r2, r3
 8000b88:	7b7b      	ldrb	r3, [r7, #13]
 8000b8a:	b21b      	sxth	r3, r3
 8000b8c:	4313      	orrs	r3, r2
 8000b8e:	b21b      	sxth	r3, r3
 8000b90:	b29a      	uxth	r2, r3
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	809a      	strh	r2, [r3, #4]
	dev->accel_data[1] = (raw_data[2] << 8) | raw_data[3];
 8000b96:	7bbb      	ldrb	r3, [r7, #14]
 8000b98:	021b      	lsls	r3, r3, #8
 8000b9a:	b21a      	sxth	r2, r3
 8000b9c:	7bfb      	ldrb	r3, [r7, #15]
 8000b9e:	b21b      	sxth	r3, r3
 8000ba0:	4313      	orrs	r3, r2
 8000ba2:	b21b      	sxth	r3, r3
 8000ba4:	b29a      	uxth	r2, r3
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	80da      	strh	r2, [r3, #6]
	dev->accel_data[2] = (raw_data[4] << 8) | raw_data[5];
 8000baa:	7c3b      	ldrb	r3, [r7, #16]
 8000bac:	021b      	lsls	r3, r3, #8
 8000bae:	b21a      	sxth	r2, r3
 8000bb0:	7c7b      	ldrb	r3, [r7, #17]
 8000bb2:	b21b      	sxth	r3, r3
 8000bb4:	4313      	orrs	r3, r2
 8000bb6:	b21b      	sxth	r3, r3
 8000bb8:	b29a      	uxth	r2, r3
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	811a      	strh	r2, [r3, #8]

	dev->gyro_data[0] = (raw_data[6] << 8) | raw_data[7];
 8000bbe:	7cbb      	ldrb	r3, [r7, #18]
 8000bc0:	021b      	lsls	r3, r3, #8
 8000bc2:	b21a      	sxth	r2, r3
 8000bc4:	7cfb      	ldrb	r3, [r7, #19]
 8000bc6:	b21b      	sxth	r3, r3
 8000bc8:	4313      	orrs	r3, r2
 8000bca:	b21b      	sxth	r3, r3
 8000bcc:	b29a      	uxth	r2, r3
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	815a      	strh	r2, [r3, #10]
	dev->gyro_data[1] = (raw_data[8] << 8) | raw_data[9];
 8000bd2:	7d3b      	ldrb	r3, [r7, #20]
 8000bd4:	021b      	lsls	r3, r3, #8
 8000bd6:	b21a      	sxth	r2, r3
 8000bd8:	7d7b      	ldrb	r3, [r7, #21]
 8000bda:	b21b      	sxth	r3, r3
 8000bdc:	4313      	orrs	r3, r2
 8000bde:	b21b      	sxth	r3, r3
 8000be0:	b29a      	uxth	r2, r3
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	819a      	strh	r2, [r3, #12]
	dev->gyro_data[2] = (raw_data[10] << 8) | raw_data[11];
 8000be6:	7dbb      	ldrb	r3, [r7, #22]
 8000be8:	021b      	lsls	r3, r3, #8
 8000bea:	b21a      	sxth	r2, r3
 8000bec:	7dfb      	ldrb	r3, [r7, #23]
 8000bee:	b21b      	sxth	r3, r3
 8000bf0:	4313      	orrs	r3, r2
 8000bf2:	b21b      	sxth	r3, r3
 8000bf4:	b29a      	uxth	r2, r3
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	81da      	strh	r2, [r3, #14]

	dev->accel_data[0] = dev->accel_data[0] / 8;
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	889b      	ldrh	r3, [r3, #4]
 8000bfe:	08db      	lsrs	r3, r3, #3
 8000c00:	b29a      	uxth	r2, r3
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	809a      	strh	r2, [r3, #4]
	dev->accel_data[1] = dev->accel_data[1] / 8;
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	88db      	ldrh	r3, [r3, #6]
 8000c0a:	08db      	lsrs	r3, r3, #3
 8000c0c:	b29a      	uxth	r2, r3
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	80da      	strh	r2, [r3, #6]
	dev->accel_data[2] = dev->accel_data[2] / 8;
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	891b      	ldrh	r3, [r3, #8]
 8000c16:	08db      	lsrs	r3, r3, #3
 8000c18:	b29a      	uxth	r2, r3
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	811a      	strh	r2, [r3, #8]

	dev->gyro_data[0] = dev->gyro_data[0] / 250;
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	895b      	ldrh	r3, [r3, #10]
 8000c22:	4a0e      	ldr	r2, [pc, #56]	; (8000c5c <ICM_ReadAccelGyroData+0xf0>)
 8000c24:	fba2 2303 	umull	r2, r3, r2, r3
 8000c28:	091b      	lsrs	r3, r3, #4
 8000c2a:	b29a      	uxth	r2, r3
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	815a      	strh	r2, [r3, #10]
	dev->gyro_data[1] = dev->gyro_data[1] / 250;
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	899b      	ldrh	r3, [r3, #12]
 8000c34:	4a09      	ldr	r2, [pc, #36]	; (8000c5c <ICM_ReadAccelGyroData+0xf0>)
 8000c36:	fba2 2303 	umull	r2, r3, r2, r3
 8000c3a:	091b      	lsrs	r3, r3, #4
 8000c3c:	b29a      	uxth	r2, r3
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	819a      	strh	r2, [r3, #12]
	dev->gyro_data[2] = dev->gyro_data[2] / 250;
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	89db      	ldrh	r3, [r3, #14]
 8000c46:	4a05      	ldr	r2, [pc, #20]	; (8000c5c <ICM_ReadAccelGyroData+0xf0>)
 8000c48:	fba2 2303 	umull	r2, r3, r2, r3
 8000c4c:	091b      	lsrs	r3, r3, #4
 8000c4e:	b29a      	uxth	r2, r3
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	81da      	strh	r2, [r3, #14]
}
 8000c54:	bf00      	nop
 8000c56:	3718      	adds	r7, #24
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	10624dd3 	.word	0x10624dd3

08000c60 <ICM_SelectBank>:
void ICM_SelectBank(ICM20948 *dev, uint8_t bank) {
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
 8000c68:	460b      	mov	r3, r1
 8000c6a:	70fb      	strb	r3, [r7, #3]
	ICM_WriteOneByte(dev, USER_BANK_SEL, bank);
 8000c6c:	78fb      	ldrb	r3, [r7, #3]
 8000c6e:	461a      	mov	r2, r3
 8000c70:	217f      	movs	r1, #127	; 0x7f
 8000c72:	6878      	ldr	r0, [r7, #4]
 8000c74:	f7ff fdca 	bl	800080c <ICM_WriteOneByte>
}
 8000c78:	bf00      	nop
 8000c7a:	3708      	adds	r7, #8
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}

08000c80 <ICM_Disable_I2C>:
void ICM_Disable_I2C(ICM20948 *dev) {
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
	ICM_WriteOneByte(dev, 0x03, 0x78);
 8000c88:	2278      	movs	r2, #120	; 0x78
 8000c8a:	2103      	movs	r1, #3
 8000c8c:	6878      	ldr	r0, [r7, #4]
 8000c8e:	f7ff fdbd 	bl	800080c <ICM_WriteOneByte>
}
 8000c92:	bf00      	nop
 8000c94:	3708      	adds	r7, #8
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
	...

08000c9c <ICM_CSHigh>:
void ICM_CSHigh(void) {
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ICM_CS_GPIO_Port, ICM_CS_Pin, SET);
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	2108      	movs	r1, #8
 8000ca4:	4802      	ldr	r0, [pc, #8]	; (8000cb0 <ICM_CSHigh+0x14>)
 8000ca6:	f002 ffa1 	bl	8003bec <HAL_GPIO_WritePin>
}
 8000caa:	bf00      	nop
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	48000400 	.word	0x48000400

08000cb4 <ICM_SetClock>:
void ICM_CSLow(void) {
	HAL_GPIO_WritePin(ICM_CS_GPIO_Port, ICM_CS_Pin, RESET);
}
void ICM_SetClock(ICM20948 *dev, uint8_t clk) {
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
 8000cbc:	460b      	mov	r3, r1
 8000cbe:	70fb      	strb	r3, [r7, #3]
	ICM_WriteOneByte(dev, PWR_MGMT_1, clk);
 8000cc0:	78fb      	ldrb	r3, [r7, #3]
 8000cc2:	461a      	mov	r2, r3
 8000cc4:	2106      	movs	r1, #6
 8000cc6:	6878      	ldr	r0, [r7, #4]
 8000cc8:	f7ff fda0 	bl	800080c <ICM_WriteOneByte>
}
 8000ccc:	bf00      	nop
 8000cce:	3708      	adds	r7, #8
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}

08000cd4 <ICM_AccelGyroOff>:
void ICM_AccelGyroOff(ICM20948 *dev) {
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
	ICM_WriteOneByte(dev, PWR_MGMT_2, (0x38 | 0x07));
 8000cdc:	223f      	movs	r2, #63	; 0x3f
 8000cde:	2107      	movs	r1, #7
 8000ce0:	6878      	ldr	r0, [r7, #4]
 8000ce2:	f7ff fd93 	bl	800080c <ICM_WriteOneByte>
}
 8000ce6:	bf00      	nop
 8000ce8:	3708      	adds	r7, #8
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}

08000cee <ICM_AccelGyroOn>:
void ICM_AccelGyroOn(ICM20948 *dev) {
 8000cee:	b580      	push	{r7, lr}
 8000cf0:	b082      	sub	sp, #8
 8000cf2:	af00      	add	r7, sp, #0
 8000cf4:	6078      	str	r0, [r7, #4]
	ICM_WriteOneByte(dev, 0x07, (0x00 | 0x00));
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	2107      	movs	r1, #7
 8000cfa:	6878      	ldr	r0, [r7, #4]
 8000cfc:	f7ff fd86 	bl	800080c <ICM_WriteOneByte>
}
 8000d00:	bf00      	nop
 8000d02:	3708      	adds	r7, #8
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}

08000d08 <ICM_WHOAMI>:
uint8_t ICM_WHOAMI(ICM20948 *dev) {
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b084      	sub	sp, #16
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
	uint8_t spiData = 0x01;
 8000d10:	2301      	movs	r3, #1
 8000d12:	73fb      	strb	r3, [r7, #15]
	ICM_ReadOneByte(dev, 0x00, &spiData);
 8000d14:	f107 030f 	add.w	r3, r7, #15
 8000d18:	461a      	mov	r2, r3
 8000d1a:	2100      	movs	r1, #0
 8000d1c:	6878      	ldr	r0, [r7, #4]
 8000d1e:	f7ff fd37 	bl	8000790 <ICM_ReadOneByte>
	return spiData;
 8000d22:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d24:	4618      	mov	r0, r3
 8000d26:	3710      	adds	r7, #16
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}

08000d2c <ICM_SetGyroRateLPF>:
void ICM_SetGyroRateLPF(ICM20948 *dev, uint8_t rate, uint8_t lpf) {
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
 8000d34:	460b      	mov	r3, r1
 8000d36:	70fb      	strb	r3, [r7, #3]
 8000d38:	4613      	mov	r3, r2
 8000d3a:	70bb      	strb	r3, [r7, #2]
	ICM_WriteOneByte(dev, GYRO_CONFIG_1, (rate|lpf));
 8000d3c:	78fa      	ldrb	r2, [r7, #3]
 8000d3e:	78bb      	ldrb	r3, [r7, #2]
 8000d40:	4313      	orrs	r3, r2
 8000d42:	b2db      	uxtb	r3, r3
 8000d44:	461a      	mov	r2, r3
 8000d46:	2101      	movs	r1, #1
 8000d48:	6878      	ldr	r0, [r7, #4]
 8000d4a:	f7ff fd5f 	bl	800080c <ICM_WriteOneByte>
}
 8000d4e:	bf00      	nop
 8000d50:	3708      	adds	r7, #8
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
	...

08000d58 <APPD_EnableCPU2>:
/* USER CODE END APPD_Init */
  return;
}

void APPD_EnableCPU2( void )
{
 8000d58:	b5b0      	push	{r4, r5, r7, lr}
 8000d5a:	b088      	sub	sp, #32
 8000d5c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 8000d5e:	4b0b      	ldr	r3, [pc, #44]	; (8000d8c <APPD_EnableCPU2+0x34>)
 8000d60:	1d3c      	adds	r4, r7, #4
 8000d62:	461d      	mov	r5, r3
 8000d64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d68:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000d6c:	c403      	stmia	r4!, {r0, r1}
 8000d6e:	8022      	strh	r2, [r4, #0]
 8000d70:	3402      	adds	r4, #2
 8000d72:	0c13      	lsrs	r3, r2, #16
 8000d74:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 8000d76:	f009 ffab 	bl	800acd0 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 8000d7a:	1d3b      	adds	r3, r7, #4
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f009 fa46 	bl	800a20e <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 8000d82:	bf00      	nop
}
 8000d84:	3720      	adds	r7, #32
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bdb0      	pop	{r4, r5, r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	0800d42c 	.word	0x0800d42c

08000d90 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b083      	sub	sp, #12
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 8000d98:	4b07      	ldr	r3, [pc, #28]	; (8000db8 <LL_C2_PWR_SetPowerMode+0x28>)
 8000d9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000d9e:	f023 0207 	bic.w	r2, r3, #7
 8000da2:	4905      	ldr	r1, [pc, #20]	; (8000db8 <LL_C2_PWR_SetPowerMode+0x28>)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	4313      	orrs	r3, r2
 8000da8:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8000dac:	bf00      	nop
 8000dae:	370c      	adds	r7, #12
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr
 8000db8:	58000400 	.word	0x58000400

08000dbc <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b083      	sub	sp, #12
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000dc4:	4b06      	ldr	r3, [pc, #24]	; (8000de0 <LL_EXTI_EnableIT_32_63+0x24>)
 8000dc6:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8000dca:	4905      	ldr	r1, [pc, #20]	; (8000de0 <LL_EXTI_EnableIT_32_63+0x24>)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	4313      	orrs	r3, r2
 8000dd0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000dd4:	bf00      	nop
 8000dd6:	370c      	adds	r7, #12
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dde:	4770      	bx	lr
 8000de0:	58000800 	.word	0x58000800

08000de4 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b083      	sub	sp, #12
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8000dec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000df0:	4a0a      	ldr	r2, [pc, #40]	; (8000e1c <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8000df2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 8000df6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000dfa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000dfe:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	021b      	lsls	r3, r3, #8
 8000e06:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000e0a:	4313      	orrs	r3, r2
 8000e0c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 8000e10:	bf00      	nop
 8000e12:	370c      	adds	r7, #12
 8000e14:	46bd      	mov	sp, r7
 8000e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1a:	4770      	bx	lr
 8000e1c:	cafecafe 	.word	0xcafecafe

08000e20 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b083      	sub	sp, #12
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000e28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e2c:	689b      	ldr	r3, [r3, #8]
 8000e2e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000e32:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	4313      	orrs	r3, r2
 8000e3a:	608b      	str	r3, [r1, #8]
}
 8000e3c:	bf00      	nop
 8000e3e:	370c      	adds	r7, #12
 8000e40:	46bd      	mov	sp, r7
 8000e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e46:	4770      	bx	lr

08000e48 <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000e4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000e54:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000e58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000e60:	bf00      	nop
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr

08000e6a <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 8000e6a:	b480      	push	{r7}
 8000e6c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000e6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000e76:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000e7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e7e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000e82:	bf00      	nop
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr

08000e8c <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 8000e90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e94:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000e98:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000e9c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8000ea0:	d101      	bne.n	8000ea6 <LL_RCC_IsActiveFlag_PINRST+0x1a>
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	e000      	b.n	8000ea8 <LL_RCC_IsActiveFlag_PINRST+0x1c>
 8000ea6:	2300      	movs	r3, #0
}
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr

08000eb2 <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 8000eb2:	b480      	push	{r7}
 8000eb4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 8000eb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000eba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000ebe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ec2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000ec6:	d101      	bne.n	8000ecc <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 8000ec8:	2301      	movs	r3, #1
 8000eca:	e000      	b.n	8000ece <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 8000ecc:	2300      	movs	r3, #0
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed6:	4770      	bx	lr

08000ed8 <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b085      	sub	sp, #20
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 8000ee0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ee4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000ee6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	4313      	orrs	r3, r2
 8000eee:	650b      	str	r3, [r1, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8000ef0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ef4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	4013      	ands	r3, r2
 8000efa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000efc:	68fb      	ldr	r3, [r7, #12]
}
 8000efe:	bf00      	nop
 8000f00:	3714      	adds	r7, #20
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr
	...

08000f0c <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 8000f10:	4b04      	ldr	r3, [pc, #16]	; (8000f24 <LL_DBGMCU_GetDeviceID+0x18>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8000f18:	4618      	mov	r0, r3
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop
 8000f24:	e0042000 	.word	0xe0042000

08000f28 <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 8000f2c:	4b04      	ldr	r3, [pc, #16]	; (8000f40 <LL_DBGMCU_GetRevisionID+0x18>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	0c1b      	lsrs	r3, r3, #16
 8000f32:	b29b      	uxth	r3, r3
}
 8000f34:	4618      	mov	r0, r3
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop
 8000f40:	e0042000 	.word	0xe0042000

08000f44 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
 8000f4c:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	685a      	ldr	r2, [r3, #4]
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	041b      	lsls	r3, r3, #16
 8000f56:	431a      	orrs	r2, r3
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	605a      	str	r2, [r3, #4]
}
 8000f5c:	bf00      	nop
 8000f5e:	370c      	adds	r7, #12
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr

08000f68 <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b083      	sub	sp, #12
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
 8000f70:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	685a      	ldr	r2, [r3, #4]
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	431a      	orrs	r2, r3
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	605a      	str	r2, [r3, #4]
}
 8000f7e:	bf00      	nop
 8000f80:	370c      	adds	r7, #12
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr

08000f8a <LL_C2_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000f8a:	b480      	push	{r7}
 8000f8c:	b083      	sub	sp, #12
 8000f8e:	af00      	add	r7, sp, #0
 8000f90:	6078      	str	r0, [r7, #4]
 8000f92:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	695a      	ldr	r2, [r3, #20]
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	041b      	lsls	r3, r3, #16
 8000f9c:	431a      	orrs	r2, r3
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	615a      	str	r2, [r3, #20]
}
 8000fa2:	bf00      	nop
 8000fa4:	370c      	adds	r7, #12
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr

08000fae <LL_C2_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000fae:	b480      	push	{r7}
 8000fb0:	b083      	sub	sp, #12
 8000fb2:	af00      	add	r7, sp, #0
 8000fb4:	6078      	str	r0, [r7, #4]
 8000fb6:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	695a      	ldr	r2, [r3, #20]
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	431a      	orrs	r2, r3
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	615a      	str	r2, [r3, #20]
}
 8000fc4:	bf00      	nop
 8000fc6:	370c      	adds	r7, #12
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr

08000fd0 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
 8000fd8:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	683a      	ldr	r2, [r7, #0]
 8000fde:	609a      	str	r2, [r3, #8]
}
 8000fe0:	bf00      	nop
 8000fe2:	370c      	adds	r7, #12
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr

08000fec <LL_C2_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b083      	sub	sp, #12
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
 8000ff4:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	683a      	ldr	r2, [r7, #0]
 8000ffa:	619a      	str	r2, [r3, #24]
}
 8000ffc:	bf00      	nop
 8000ffe:	370c      	adds	r7, #12
 8001000:	46bd      	mov	sp, r7
 8001002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001006:	4770      	bx	lr

08001008 <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800100c:	4b05      	ldr	r3, [pc, #20]	; (8001024 <LL_LPM_EnableSleep+0x1c>)
 800100e:	691b      	ldr	r3, [r3, #16]
 8001010:	4a04      	ldr	r2, [pc, #16]	; (8001024 <LL_LPM_EnableSleep+0x1c>)
 8001012:	f023 0304 	bic.w	r3, r3, #4
 8001016:	6113      	str	r3, [r2, #16]
}
 8001018:	bf00      	nop
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop
 8001024:	e000ed00 	.word	0xe000ed00

08001028 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8001028:	b480      	push	{r7}
 800102a:	b083      	sub	sp, #12
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	22ff      	movs	r2, #255	; 0xff
 8001034:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001036:	bf00      	nop
 8001038:	370c      	adds	r7, #12
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr

08001042 <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 8001042:	b480      	push	{r7}
 8001044:	b083      	sub	sp, #12
 8001046:	af00      	add	r7, sp, #0
 8001048:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	22ca      	movs	r2, #202	; 0xca
 800104e:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	2253      	movs	r2, #83	; 0x53
 8001054:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001056:	bf00      	nop
 8001058:	370c      	adds	r7, #12
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr

08001062 <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 8001062:	b480      	push	{r7}
 8001064:	b083      	sub	sp, #12
 8001066:	af00      	add	r7, sp, #0
 8001068:	6078      	str	r0, [r7, #4]
 800106a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	689b      	ldr	r3, [r3, #8]
 8001070:	f023 0207 	bic.w	r2, r3, #7
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	431a      	orrs	r2, r3
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	609a      	str	r2, [r3, #8]
}
 800107c:	bf00      	nop
 800107e:	370c      	adds	r7, #12
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr

08001088 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800108c:	4b04      	ldr	r3, [pc, #16]	; (80010a0 <MX_APPE_Config+0x18>)
 800108e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001092:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 8001094:	f000 f824 	bl	80010e0 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 8001098:	f000 f864 	bl	8001164 <Config_HSE>

  return;
 800109c:	bf00      	nop
}
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	58004000 	.word	0x58004000

080010a4 <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 80010a8:	f000 f870 	bl	800118c <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 80010ac:	f000 f888 	bl	80011c0 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 80010b0:	4903      	ldr	r1, [pc, #12]	; (80010c0 <MX_APPE_Init+0x1c>)
 80010b2:	2000      	movs	r0, #0
 80010b4:	f000 fdd4 	bl	8001c60 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 80010b8:	f000 f890 	bl	80011dc <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 80010bc:	bf00      	nop
}
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	20000ae0 	.word	0x20000ae0

080010c4 <Init_Smps>:

void Init_Smps(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 80010c8:	bf00      	nop
}
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr

080010d2 <Init_Exti>:

void Init_Exti(void)
{
 80010d2:	b580      	push	{r7, lr}
 80010d4:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 80010d6:	2050      	movs	r0, #80	; 0x50
 80010d8:	f7ff fe70 	bl	8000dbc <LL_EXTI_EnableIT_32_63>

  return;
 80010dc:	bf00      	nop
}
 80010de:	bd80      	pop	{r7, pc}

080010e0 <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
#if (CFG_HW_RESET_BY_FW == 1)
  Reset_BackupDomain();
 80010e4:	f000 f804 	bl	80010f0 <Reset_BackupDomain>

  Reset_IPCC();
 80010e8:	f000 f81a 	bl	8001120 <Reset_IPCC>
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 80010ec:	bf00      	nop
}
 80010ee:	bd80      	pop	{r7, pc}

080010f0 <Reset_BackupDomain>:

#if (CFG_HW_RESET_BY_FW == 1)
static void Reset_BackupDomain(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
  if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 80010f4:	f7ff feca 	bl	8000e8c <LL_RCC_IsActiveFlag_PINRST>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d00d      	beq.n	800111a <Reset_BackupDomain+0x2a>
 80010fe:	f7ff fed8 	bl	8000eb2 <LL_RCC_IsActiveFlag_SFTRST>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d108      	bne.n	800111a <Reset_BackupDomain+0x2a>
  {
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 8001108:	f003 ffe8 	bl	80050dc <HAL_PWR_EnableBkUpAccess>

    /**
     *  Write twice the value to flush the APB-AHB bridge
     *  This bit shall be written in the register before writing the next one
     */
    HAL_PWR_EnableBkUpAccess();
 800110c:	f003 ffe6 	bl	80050dc <HAL_PWR_EnableBkUpAccess>

    __HAL_RCC_BACKUPRESET_FORCE();
 8001110:	f7ff fe9a 	bl	8000e48 <LL_RCC_ForceBackupDomainReset>
    __HAL_RCC_BACKUPRESET_RELEASE();
 8001114:	f7ff fea9 	bl	8000e6a <LL_RCC_ReleaseBackupDomainReset>
  }

  return;
 8001118:	bf00      	nop
 800111a:	bf00      	nop
}
 800111c:	bd80      	pop	{r7, pc}
	...

08001120 <Reset_IPCC>:

static void Reset_IPCC(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 8001124:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001128:	f7ff fed6 	bl	8000ed8 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_ClearFlag_CHx(
 800112c:	213f      	movs	r1, #63	; 0x3f
 800112e:	480c      	ldr	r0, [pc, #48]	; (8001160 <Reset_IPCC+0x40>)
 8001130:	f7ff ff4e 	bl	8000fd0 <LL_C1_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_ClearFlag_CHx(
 8001134:	213f      	movs	r1, #63	; 0x3f
 8001136:	480a      	ldr	r0, [pc, #40]	; (8001160 <Reset_IPCC+0x40>)
 8001138:	f7ff ff58 	bl	8000fec <LL_C2_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableTransmitChannel(
 800113c:	213f      	movs	r1, #63	; 0x3f
 800113e:	4808      	ldr	r0, [pc, #32]	; (8001160 <Reset_IPCC+0x40>)
 8001140:	f7ff ff00 	bl	8000f44 <LL_C1_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableTransmitChannel(
 8001144:	213f      	movs	r1, #63	; 0x3f
 8001146:	4806      	ldr	r0, [pc, #24]	; (8001160 <Reset_IPCC+0x40>)
 8001148:	f7ff ff1f 	bl	8000f8a <LL_C2_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableReceiveChannel(
 800114c:	213f      	movs	r1, #63	; 0x3f
 800114e:	4804      	ldr	r0, [pc, #16]	; (8001160 <Reset_IPCC+0x40>)
 8001150:	f7ff ff0a 	bl	8000f68 <LL_C1_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableReceiveChannel(
 8001154:	213f      	movs	r1, #63	; 0x3f
 8001156:	4802      	ldr	r0, [pc, #8]	; (8001160 <Reset_IPCC+0x40>)
 8001158:	f7ff ff29 	bl	8000fae <LL_C2_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  return;
 800115c:	bf00      	nop
}
 800115e:	bd80      	pop	{r7, pc}
 8001160:	58000c00 	.word	0x58000c00

08001164 <Config_HSE>:
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 800116a:	2000      	movs	r0, #0
 800116c:	f009 fe3c 	bl	800ade8 <OTP_Read>
 8001170:	6078      	str	r0, [r7, #4]
  if (p_otp)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d005      	beq.n	8001184 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	799b      	ldrb	r3, [r3, #6]
 800117c:	4618      	mov	r0, r3
 800117e:	f7ff fe31 	bl	8000de4 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 8001182:	bf00      	nop
 8001184:	bf00      	nop
}
 8001186:	3708      	adds	r7, #8
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}

0800118c <System_Init>:

static void System_Init(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
  Init_Smps();
 8001190:	f7ff ff98 	bl	80010c4 <Init_Smps>

  Init_Exti();
 8001194:	f7ff ff9d 	bl	80010d2 <Init_Exti>

  Init_Rtc();
 8001198:	f000 f802 	bl	80011a0 <Init_Rtc>

  return;
 800119c:	bf00      	nop
}
 800119e:	bd80      	pop	{r7, pc}

080011a0 <Init_Rtc>:

static void Init_Rtc(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 80011a4:	4805      	ldr	r0, [pc, #20]	; (80011bc <Init_Rtc+0x1c>)
 80011a6:	f7ff ff4c 	bl	8001042 <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 80011aa:	2100      	movs	r1, #0
 80011ac:	4803      	ldr	r0, [pc, #12]	; (80011bc <Init_Rtc+0x1c>)
 80011ae:	f7ff ff58 	bl	8001062 <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 80011b2:	4802      	ldr	r0, [pc, #8]	; (80011bc <Init_Rtc+0x1c>)
 80011b4:	f7ff ff38 	bl	8001028 <LL_RTC_EnableWriteProtection>

  return;
 80011b8:	bf00      	nop
}
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	40002800 	.word	0x40002800

080011c0 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 80011c4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80011c8:	f7ff fe2a 	bl	8000e20 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 80011cc:	f00a fd06 	bl	800bbdc <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 80011d0:	2004      	movs	r0, #4
 80011d2:	f7ff fddd 	bl	8000d90 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 80011d6:	bf00      	nop
}
 80011d8:	bd80      	pop	{r7, pc}
	...

080011dc <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b088      	sub	sp, #32
 80011e0:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 80011e2:	f009 fbbf 	bl	800a964 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 80011e6:	4a11      	ldr	r2, [pc, #68]	; (800122c <appe_Tl_Init+0x50>)
 80011e8:	2100      	movs	r1, #0
 80011ea:	2004      	movs	r0, #4
 80011ec:	f00a fe34 	bl	800be58 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 80011f0:	4b0f      	ldr	r3, [pc, #60]	; (8001230 <appe_Tl_Init+0x54>)
 80011f2:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 80011f4:	4b0f      	ldr	r3, [pc, #60]	; (8001234 <appe_Tl_Init+0x58>)
 80011f6:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 80011f8:	463b      	mov	r3, r7
 80011fa:	4619      	mov	r1, r3
 80011fc:	480e      	ldr	r0, [pc, #56]	; (8001238 <appe_Tl_Init+0x5c>)
 80011fe:	f009 fa77 	bl	800a6f0 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 8001202:	4b0e      	ldr	r3, [pc, #56]	; (800123c <appe_Tl_Init+0x60>)
 8001204:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8001206:	4b0e      	ldr	r3, [pc, #56]	; (8001240 <appe_Tl_Init+0x64>)
 8001208:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 800120a:	4b0e      	ldr	r3, [pc, #56]	; (8001244 <appe_Tl_Init+0x68>)
 800120c:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 800120e:	f240 533c 	movw	r3, #1340	; 0x53c
 8001212:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 8001214:	f107 0308 	add.w	r3, r7, #8
 8001218:	4618      	mov	r0, r3
 800121a:	f009 fce5 	bl	800abe8 <TL_MM_Init>

  TL_Enable();
 800121e:	f009 fb9b 	bl	800a958 <TL_Enable>

  return;
 8001222:	bf00      	nop
}
 8001224:	3720      	adds	r7, #32
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	0800a729 	.word	0x0800a729
 8001230:	200005dc 	.word	0x200005dc
 8001234:	08001249 	.word	0x08001249
 8001238:	08001261 	.word	0x08001261
 800123c:	200007f4 	.word	0x200007f4
 8001240:	200006e8 	.word	0x200006e8
 8001244:	200000a0 	.word	0x200000a0

08001248 <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 8001248:	b480      	push	{r7}
 800124a:	b083      	sub	sp, #12
 800124c:	af00      	add	r7, sp, #0
 800124e:	4603      	mov	r3, r0
 8001250:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 8001252:	bf00      	nop
}
 8001254:	370c      	adds	r7, #12
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr
	...

08001260 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b088      	sub	sp, #32
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	330b      	adds	r3, #11
 800126e:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 8001270:	69fb      	ldr	r3, [r7, #28]
 8001272:	881b      	ldrh	r3, [r3, #0]
 8001274:	b29b      	uxth	r3, r3
 8001276:	f5a3 4312 	sub.w	r3, r3, #37376	; 0x9200
 800127a:	2b07      	cmp	r3, #7
 800127c:	d81f      	bhi.n	80012be <APPE_SysUserEvtRx+0x5e>
 800127e:	a201      	add	r2, pc, #4	; (adr r2, 8001284 <APPE_SysUserEvtRx+0x24>)
 8001280:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001284:	080012a5 	.word	0x080012a5
 8001288:	080012b7 	.word	0x080012b7
 800128c:	080012bf 	.word	0x080012bf
 8001290:	080012bf 	.word	0x080012bf
 8001294:	080012bf 	.word	0x080012bf
 8001298:	080012bf 	.word	0x080012bf
 800129c:	080012bf 	.word	0x080012bf
 80012a0:	080012bf 	.word	0x080012bf
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 80012a4:	f107 030c 	add.w	r3, r7, #12
 80012a8:	4618      	mov	r0, r3
 80012aa:	f008 ffdd 	bl	800a268 <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
    APPE_SysEvtReadyProcessing(pPayload);
 80012ae:	6878      	ldr	r0, [r7, #4]
 80012b0:	f000 f81b 	bl	80012ea <APPE_SysEvtReadyProcessing>
    break;
 80012b4:	e004      	b.n	80012c0 <APPE_SysUserEvtRx+0x60>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
    APPE_SysEvtError(pPayload);
 80012b6:	6878      	ldr	r0, [r7, #4]
 80012b8:	f000 f806 	bl	80012c8 <APPE_SysEvtError>
    break;
 80012bc:	e000      	b.n	80012c0 <APPE_SysUserEvtRx+0x60>
  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
    break;

  default:
    break;
 80012be:	bf00      	nop
  }

  return;
 80012c0:	bf00      	nop
}
 80012c2:	3720      	adds	r7, #32
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}

080012c8 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b085      	sub	sp, #20
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	330b      	adds	r3, #11
 80012d6:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	3302      	adds	r3, #2
 80012dc:	60bb      	str	r3, [r7, #8]
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 80012de:	bf00      	nop
}
 80012e0:	3714      	adds	r7, #20
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr

080012ea <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 80012ea:	b580      	push	{r7, lr}
 80012ec:	b08a      	sub	sp, #40	; 0x28
 80012ee:	af00      	add	r7, sp, #0
 80012f0:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 80012f2:	f107 0308 	add.w	r3, r7, #8
 80012f6:	2200      	movs	r2, #0
 80012f8:	601a      	str	r2, [r3, #0]
 80012fa:	605a      	str	r2, [r3, #4]
 80012fc:	609a      	str	r2, [r3, #8]
 80012fe:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 8001300:	2300      	movs	r3, #0
 8001302:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t DeviceID=0;
 8001304:	2300      	movs	r3, #0
 8001306:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	330b      	adds	r3, #11
 800130e:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 8001310:	69fb      	ldr	r3, [r7, #28]
 8001312:	3302      	adds	r3, #2
 8001314:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 8001316:	69bb      	ldr	r3, [r7, #24]
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d11d      	bne.n	800135a <APPE_SysEvtReadyProcessing+0x70>
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");

    /* Traces channel initialization */
    APPD_EnableCPU2();
 800131e:	f7ff fd1b 	bl	8000d58 <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 8001322:	230f      	movs	r3, #15
 8001324:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 8001326:	237f      	movs	r3, #127	; 0x7f
 8001328:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 800132a:	f7ff fdfd 	bl	8000f28 <LL_DBGMCU_GetRevisionID>
 800132e:	6278      	str	r0, [r7, #36]	; 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);

    config_param.RevisionID = (uint16_t)RevisionID;
 8001330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001332:	b29b      	uxth	r3, r3
 8001334:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 8001336:	f7ff fde9 	bl	8000f0c <LL_DBGMCU_GetDeviceID>
 800133a:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
    config_param.DeviceID = (uint16_t)DeviceID;
 800133c:	6a3b      	ldr	r3, [r7, #32]
 800133e:	b29b      	uxth	r3, r3
 8001340:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 8001342:	f107 0308 	add.w	r3, r7, #8
 8001346:	4618      	mov	r0, r3
 8001348:	f008 ff78 	bl	800a23c <SHCI_C2_Config>

    APP_BLE_Init();
 800134c:	f009 fe56 	bl	800affc <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8001350:	2100      	movs	r1, #0
 8001352:	2001      	movs	r0, #1
 8001354:	f00a fc54 	bl	800bc00 <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 8001358:	e007      	b.n	800136a <APPE_SysEvtReadyProcessing+0x80>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 800135a:	69bb      	ldr	r3, [r7, #24]
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	2b01      	cmp	r3, #1
 8001360:	d103      	bne.n	800136a <APPE_SysEvtReadyProcessing+0x80>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	2200      	movs	r2, #0
 8001366:	701a      	strb	r2, [r3, #0]
  return;
 8001368:	bf00      	nop
 800136a:	bf00      	nop
}
 800136c:	3728      	adds	r7, #40	; 0x28
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}

08001372 <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 8001372:	b580      	push	{r7, lr}
 8001374:	b084      	sub	sp, #16
 8001376:	af00      	add	r7, sp, #0
 8001378:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800137a:	f001 fe35 	bl	8002fe8 <HAL_GetTick>
 800137e:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800138a:	d00a      	beq.n	80013a2 <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 800138c:	f001 fe44 	bl	8003018 <HAL_GetTickFreq>
 8001390:	4603      	mov	r3, r0
 8001392:	461a      	mov	r2, r3
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	4413      	add	r3, r2
 8001398:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800139a:	e002      	b.n	80013a2 <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 800139c:	f7ff fe34 	bl	8001008 <LL_LPM_EnableSleep>
     */
  #if defined (__CC_ARM)
    __force_stores();
  #endif /* __CC_ARM */

    __WFI();
 80013a0:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 80013a2:	f001 fe21 	bl	8002fe8 <HAL_GetTick>
 80013a6:	4602      	mov	r2, r0
 80013a8:	68bb      	ldr	r3, [r7, #8]
 80013aa:	1ad3      	subs	r3, r2, r3
 80013ac:	68fa      	ldr	r2, [r7, #12]
 80013ae:	429a      	cmp	r2, r3
 80013b0:	d8f4      	bhi.n	800139c <HAL_Delay+0x2a>
  }
}
 80013b2:	bf00      	nop
 80013b4:	bf00      	nop
 80013b6:	3710      	adds	r7, #16
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}

080013bc <MX_APPE_Process>:

void MX_APPE_Process(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 80013c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80013c4:	f00a fc4c 	bl	800bc60 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 80013c8:	bf00      	nop
 80013ca:	bd80      	pop	{r7, pc}

080013cc <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 80013d0:	bf00      	nop
}
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr

080013da <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 80013da:	b580      	push	{r7, lr}
 80013dc:	b082      	sub	sp, #8
 80013de:	af00      	add	r7, sp, #0
 80013e0:	6078      	str	r0, [r7, #4]
 80013e2:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 80013e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80013e8:	f00a fc3a 	bl	800bc60 <UTIL_SEQ_Run>

  return;
 80013ec:	bf00      	nop
}
 80013ee:	3708      	adds	r7, #8
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}

080013f4 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 80013fc:	2100      	movs	r1, #0
 80013fe:	2004      	movs	r0, #4
 8001400:	f00a fd4c 	bl	800be9c <UTIL_SEQ_SetTask>
  return;
 8001404:	bf00      	nop
}
 8001406:	3708      	adds	r7, #8
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}

0800140c <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8001414:	2002      	movs	r0, #2
 8001416:	f00a fdad 	bl	800bf74 <UTIL_SEQ_SetEvt>
  return;
 800141a:	bf00      	nop
}
 800141c:	3708      	adds	r7, #8
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}

08001422 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 8001422:	b580      	push	{r7, lr}
 8001424:	b082      	sub	sp, #8
 8001426:	af00      	add	r7, sp, #0
 8001428:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 800142a:	2002      	movs	r0, #2
 800142c:	f00a fdc2 	bl	800bfb4 <UTIL_SEQ_WaitEvt>
  return;
 8001430:	bf00      	nop
}
 8001432:	3708      	adds	r7, #8
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}

08001438 <LL_EXTI_EnableIT_0_31>:
{
 8001438:	b480      	push	{r7}
 800143a:	b083      	sub	sp, #12
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8001440:	4b06      	ldr	r3, [pc, #24]	; (800145c <LL_EXTI_EnableIT_0_31+0x24>)
 8001442:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8001446:	4905      	ldr	r1, [pc, #20]	; (800145c <LL_EXTI_EnableIT_0_31+0x24>)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	4313      	orrs	r3, r2
 800144c:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8001450:	bf00      	nop
 8001452:	370c      	adds	r7, #12
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr
 800145c:	58000800 	.word	0x58000800

08001460 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8001460:	b480      	push	{r7}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8001468:	4b05      	ldr	r3, [pc, #20]	; (8001480 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800146a:	681a      	ldr	r2, [r3, #0]
 800146c:	4904      	ldr	r1, [pc, #16]	; (8001480 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	4313      	orrs	r3, r2
 8001472:	600b      	str	r3, [r1, #0]

}
 8001474:	bf00      	nop
 8001476:	370c      	adds	r7, #12
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr
 8001480:	58000800 	.word	0x58000800

08001484 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8001484:	b480      	push	{r7}
 8001486:	b083      	sub	sp, #12
 8001488:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 800148a:	4b0d      	ldr	r3, [pc, #52]	; (80014c0 <ReadRtcSsrValue+0x3c>)
 800148c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800148e:	b29b      	uxth	r3, r3
 8001490:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001492:	4b0b      	ldr	r3, [pc, #44]	; (80014c0 <ReadRtcSsrValue+0x3c>)
 8001494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001496:	b29b      	uxth	r3, r3
 8001498:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 800149a:	e005      	b.n	80014a8 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80014a0:	4b07      	ldr	r3, [pc, #28]	; (80014c0 <ReadRtcSsrValue+0x3c>)
 80014a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014a4:	b29b      	uxth	r3, r3
 80014a6:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 80014a8:	687a      	ldr	r2, [r7, #4]
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	429a      	cmp	r2, r3
 80014ae:	d1f5      	bne.n	800149c <ReadRtcSsrValue+0x18>
  }

  return second_read;
 80014b0:	683b      	ldr	r3, [r7, #0]
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	370c      	adds	r7, #12
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr
 80014be:	bf00      	nop
 80014c0:	40002800 	.word	0x40002800

080014c4 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b085      	sub	sp, #20
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	4603      	mov	r3, r0
 80014cc:	460a      	mov	r2, r1
 80014ce:	71fb      	strb	r3, [r7, #7]
 80014d0:	4613      	mov	r3, r2
 80014d2:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 80014d4:	79ba      	ldrb	r2, [r7, #6]
 80014d6:	491d      	ldr	r1, [pc, #116]	; (800154c <LinkTimerAfter+0x88>)
 80014d8:	4613      	mov	r3, r2
 80014da:	005b      	lsls	r3, r3, #1
 80014dc:	4413      	add	r3, r2
 80014de:	00db      	lsls	r3, r3, #3
 80014e0:	440b      	add	r3, r1
 80014e2:	3315      	adds	r3, #21
 80014e4:	781b      	ldrb	r3, [r3, #0]
 80014e6:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80014e8:	7bfb      	ldrb	r3, [r7, #15]
 80014ea:	2b06      	cmp	r3, #6
 80014ec:	d009      	beq.n	8001502 <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 80014ee:	7bfa      	ldrb	r2, [r7, #15]
 80014f0:	4916      	ldr	r1, [pc, #88]	; (800154c <LinkTimerAfter+0x88>)
 80014f2:	4613      	mov	r3, r2
 80014f4:	005b      	lsls	r3, r3, #1
 80014f6:	4413      	add	r3, r2
 80014f8:	00db      	lsls	r3, r3, #3
 80014fa:	440b      	add	r3, r1
 80014fc:	3314      	adds	r3, #20
 80014fe:	79fa      	ldrb	r2, [r7, #7]
 8001500:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8001502:	79fa      	ldrb	r2, [r7, #7]
 8001504:	4911      	ldr	r1, [pc, #68]	; (800154c <LinkTimerAfter+0x88>)
 8001506:	4613      	mov	r3, r2
 8001508:	005b      	lsls	r3, r3, #1
 800150a:	4413      	add	r3, r2
 800150c:	00db      	lsls	r3, r3, #3
 800150e:	440b      	add	r3, r1
 8001510:	3315      	adds	r3, #21
 8001512:	7bfa      	ldrb	r2, [r7, #15]
 8001514:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8001516:	79fa      	ldrb	r2, [r7, #7]
 8001518:	490c      	ldr	r1, [pc, #48]	; (800154c <LinkTimerAfter+0x88>)
 800151a:	4613      	mov	r3, r2
 800151c:	005b      	lsls	r3, r3, #1
 800151e:	4413      	add	r3, r2
 8001520:	00db      	lsls	r3, r3, #3
 8001522:	440b      	add	r3, r1
 8001524:	3314      	adds	r3, #20
 8001526:	79ba      	ldrb	r2, [r7, #6]
 8001528:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 800152a:	79ba      	ldrb	r2, [r7, #6]
 800152c:	4907      	ldr	r1, [pc, #28]	; (800154c <LinkTimerAfter+0x88>)
 800152e:	4613      	mov	r3, r2
 8001530:	005b      	lsls	r3, r3, #1
 8001532:	4413      	add	r3, r2
 8001534:	00db      	lsls	r3, r3, #3
 8001536:	440b      	add	r3, r1
 8001538:	3315      	adds	r3, #21
 800153a:	79fa      	ldrb	r2, [r7, #7]
 800153c:	701a      	strb	r2, [r3, #0]

  return;
 800153e:	bf00      	nop
}
 8001540:	3714      	adds	r7, #20
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr
 800154a:	bf00      	nop
 800154c:	20000978 	.word	0x20000978

08001550 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8001550:	b480      	push	{r7}
 8001552:	b085      	sub	sp, #20
 8001554:	af00      	add	r7, sp, #0
 8001556:	4603      	mov	r3, r0
 8001558:	460a      	mov	r2, r1
 800155a:	71fb      	strb	r3, [r7, #7]
 800155c:	4613      	mov	r3, r2
 800155e:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8001560:	4b29      	ldr	r3, [pc, #164]	; (8001608 <LinkTimerBefore+0xb8>)
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	b2db      	uxtb	r3, r3
 8001566:	79ba      	ldrb	r2, [r7, #6]
 8001568:	429a      	cmp	r2, r3
 800156a:	d032      	beq.n	80015d2 <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 800156c:	79ba      	ldrb	r2, [r7, #6]
 800156e:	4927      	ldr	r1, [pc, #156]	; (800160c <LinkTimerBefore+0xbc>)
 8001570:	4613      	mov	r3, r2
 8001572:	005b      	lsls	r3, r3, #1
 8001574:	4413      	add	r3, r2
 8001576:	00db      	lsls	r3, r3, #3
 8001578:	440b      	add	r3, r1
 800157a:	3314      	adds	r3, #20
 800157c:	781b      	ldrb	r3, [r3, #0]
 800157e:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8001580:	7bfa      	ldrb	r2, [r7, #15]
 8001582:	4922      	ldr	r1, [pc, #136]	; (800160c <LinkTimerBefore+0xbc>)
 8001584:	4613      	mov	r3, r2
 8001586:	005b      	lsls	r3, r3, #1
 8001588:	4413      	add	r3, r2
 800158a:	00db      	lsls	r3, r3, #3
 800158c:	440b      	add	r3, r1
 800158e:	3315      	adds	r3, #21
 8001590:	79fa      	ldrb	r2, [r7, #7]
 8001592:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8001594:	79fa      	ldrb	r2, [r7, #7]
 8001596:	491d      	ldr	r1, [pc, #116]	; (800160c <LinkTimerBefore+0xbc>)
 8001598:	4613      	mov	r3, r2
 800159a:	005b      	lsls	r3, r3, #1
 800159c:	4413      	add	r3, r2
 800159e:	00db      	lsls	r3, r3, #3
 80015a0:	440b      	add	r3, r1
 80015a2:	3315      	adds	r3, #21
 80015a4:	79ba      	ldrb	r2, [r7, #6]
 80015a6:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 80015a8:	79fa      	ldrb	r2, [r7, #7]
 80015aa:	4918      	ldr	r1, [pc, #96]	; (800160c <LinkTimerBefore+0xbc>)
 80015ac:	4613      	mov	r3, r2
 80015ae:	005b      	lsls	r3, r3, #1
 80015b0:	4413      	add	r3, r2
 80015b2:	00db      	lsls	r3, r3, #3
 80015b4:	440b      	add	r3, r1
 80015b6:	3314      	adds	r3, #20
 80015b8:	7bfa      	ldrb	r2, [r7, #15]
 80015ba:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 80015bc:	79ba      	ldrb	r2, [r7, #6]
 80015be:	4913      	ldr	r1, [pc, #76]	; (800160c <LinkTimerBefore+0xbc>)
 80015c0:	4613      	mov	r3, r2
 80015c2:	005b      	lsls	r3, r3, #1
 80015c4:	4413      	add	r3, r2
 80015c6:	00db      	lsls	r3, r3, #3
 80015c8:	440b      	add	r3, r1
 80015ca:	3314      	adds	r3, #20
 80015cc:	79fa      	ldrb	r2, [r7, #7]
 80015ce:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 80015d0:	e014      	b.n	80015fc <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 80015d2:	79fa      	ldrb	r2, [r7, #7]
 80015d4:	490d      	ldr	r1, [pc, #52]	; (800160c <LinkTimerBefore+0xbc>)
 80015d6:	4613      	mov	r3, r2
 80015d8:	005b      	lsls	r3, r3, #1
 80015da:	4413      	add	r3, r2
 80015dc:	00db      	lsls	r3, r3, #3
 80015de:	440b      	add	r3, r1
 80015e0:	3315      	adds	r3, #21
 80015e2:	79ba      	ldrb	r2, [r7, #6]
 80015e4:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 80015e6:	79ba      	ldrb	r2, [r7, #6]
 80015e8:	4908      	ldr	r1, [pc, #32]	; (800160c <LinkTimerBefore+0xbc>)
 80015ea:	4613      	mov	r3, r2
 80015ec:	005b      	lsls	r3, r3, #1
 80015ee:	4413      	add	r3, r2
 80015f0:	00db      	lsls	r3, r3, #3
 80015f2:	440b      	add	r3, r1
 80015f4:	3314      	adds	r3, #20
 80015f6:	79fa      	ldrb	r2, [r7, #7]
 80015f8:	701a      	strb	r2, [r3, #0]
  return;
 80015fa:	bf00      	nop
}
 80015fc:	3714      	adds	r7, #20
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr
 8001606:	bf00      	nop
 8001608:	20000a08 	.word	0x20000a08
 800160c:	20000978 	.word	0x20000978

08001610 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b084      	sub	sp, #16
 8001614:	af00      	add	r7, sp, #0
 8001616:	4603      	mov	r3, r0
 8001618:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800161a:	4b4e      	ldr	r3, [pc, #312]	; (8001754 <linkTimer+0x144>)
 800161c:	781b      	ldrb	r3, [r3, #0]
 800161e:	b2db      	uxtb	r3, r3
 8001620:	2b06      	cmp	r3, #6
 8001622:	d118      	bne.n	8001656 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001624:	4b4b      	ldr	r3, [pc, #300]	; (8001754 <linkTimer+0x144>)
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	b2da      	uxtb	r2, r3
 800162a:	4b4b      	ldr	r3, [pc, #300]	; (8001758 <linkTimer+0x148>)
 800162c:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 800162e:	4a49      	ldr	r2, [pc, #292]	; (8001754 <linkTimer+0x144>)
 8001630:	79fb      	ldrb	r3, [r7, #7]
 8001632:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8001634:	79fa      	ldrb	r2, [r7, #7]
 8001636:	4949      	ldr	r1, [pc, #292]	; (800175c <linkTimer+0x14c>)
 8001638:	4613      	mov	r3, r2
 800163a:	005b      	lsls	r3, r3, #1
 800163c:	4413      	add	r3, r2
 800163e:	00db      	lsls	r3, r3, #3
 8001640:	440b      	add	r3, r1
 8001642:	3315      	adds	r3, #21
 8001644:	2206      	movs	r2, #6
 8001646:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001648:	4b45      	ldr	r3, [pc, #276]	; (8001760 <linkTimer+0x150>)
 800164a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800164e:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8001650:	2300      	movs	r3, #0
 8001652:	81fb      	strh	r3, [r7, #14]
 8001654:	e078      	b.n	8001748 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8001656:	f000 f909 	bl	800186c <ReturnTimeElapsed>
 800165a:	4603      	mov	r3, r0
 800165c:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 800165e:	79fa      	ldrb	r2, [r7, #7]
 8001660:	493e      	ldr	r1, [pc, #248]	; (800175c <linkTimer+0x14c>)
 8001662:	4613      	mov	r3, r2
 8001664:	005b      	lsls	r3, r3, #1
 8001666:	4413      	add	r3, r2
 8001668:	00db      	lsls	r3, r3, #3
 800166a:	440b      	add	r3, r1
 800166c:	3308      	adds	r3, #8
 800166e:	6819      	ldr	r1, [r3, #0]
 8001670:	89fb      	ldrh	r3, [r7, #14]
 8001672:	79fa      	ldrb	r2, [r7, #7]
 8001674:	4419      	add	r1, r3
 8001676:	4839      	ldr	r0, [pc, #228]	; (800175c <linkTimer+0x14c>)
 8001678:	4613      	mov	r3, r2
 800167a:	005b      	lsls	r3, r3, #1
 800167c:	4413      	add	r3, r2
 800167e:	00db      	lsls	r3, r3, #3
 8001680:	4403      	add	r3, r0
 8001682:	3308      	adds	r3, #8
 8001684:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8001686:	79fa      	ldrb	r2, [r7, #7]
 8001688:	4934      	ldr	r1, [pc, #208]	; (800175c <linkTimer+0x14c>)
 800168a:	4613      	mov	r3, r2
 800168c:	005b      	lsls	r3, r3, #1
 800168e:	4413      	add	r3, r2
 8001690:	00db      	lsls	r3, r3, #3
 8001692:	440b      	add	r3, r1
 8001694:	3308      	adds	r3, #8
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 800169a:	4b2e      	ldr	r3, [pc, #184]	; (8001754 <linkTimer+0x144>)
 800169c:	781b      	ldrb	r3, [r3, #0]
 800169e:	b2db      	uxtb	r3, r3
 80016a0:	4619      	mov	r1, r3
 80016a2:	4a2e      	ldr	r2, [pc, #184]	; (800175c <linkTimer+0x14c>)
 80016a4:	460b      	mov	r3, r1
 80016a6:	005b      	lsls	r3, r3, #1
 80016a8:	440b      	add	r3, r1
 80016aa:	00db      	lsls	r3, r3, #3
 80016ac:	4413      	add	r3, r2
 80016ae:	3308      	adds	r3, #8
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	68ba      	ldr	r2, [r7, #8]
 80016b4:	429a      	cmp	r2, r3
 80016b6:	d337      	bcc.n	8001728 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 80016b8:	4b26      	ldr	r3, [pc, #152]	; (8001754 <linkTimer+0x144>)
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 80016be:	7b7a      	ldrb	r2, [r7, #13]
 80016c0:	4926      	ldr	r1, [pc, #152]	; (800175c <linkTimer+0x14c>)
 80016c2:	4613      	mov	r3, r2
 80016c4:	005b      	lsls	r3, r3, #1
 80016c6:	4413      	add	r3, r2
 80016c8:	00db      	lsls	r3, r3, #3
 80016ca:	440b      	add	r3, r1
 80016cc:	3315      	adds	r3, #21
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 80016d2:	e013      	b.n	80016fc <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 80016d4:	7b7a      	ldrb	r2, [r7, #13]
 80016d6:	4921      	ldr	r1, [pc, #132]	; (800175c <linkTimer+0x14c>)
 80016d8:	4613      	mov	r3, r2
 80016da:	005b      	lsls	r3, r3, #1
 80016dc:	4413      	add	r3, r2
 80016de:	00db      	lsls	r3, r3, #3
 80016e0:	440b      	add	r3, r1
 80016e2:	3315      	adds	r3, #21
 80016e4:	781b      	ldrb	r3, [r3, #0]
 80016e6:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 80016e8:	7b7a      	ldrb	r2, [r7, #13]
 80016ea:	491c      	ldr	r1, [pc, #112]	; (800175c <linkTimer+0x14c>)
 80016ec:	4613      	mov	r3, r2
 80016ee:	005b      	lsls	r3, r3, #1
 80016f0:	4413      	add	r3, r2
 80016f2:	00db      	lsls	r3, r3, #3
 80016f4:	440b      	add	r3, r1
 80016f6:	3315      	adds	r3, #21
 80016f8:	781b      	ldrb	r3, [r3, #0]
 80016fa:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 80016fc:	7b3b      	ldrb	r3, [r7, #12]
 80016fe:	2b06      	cmp	r3, #6
 8001700:	d00b      	beq.n	800171a <linkTimer+0x10a>
 8001702:	7b3a      	ldrb	r2, [r7, #12]
 8001704:	4915      	ldr	r1, [pc, #84]	; (800175c <linkTimer+0x14c>)
 8001706:	4613      	mov	r3, r2
 8001708:	005b      	lsls	r3, r3, #1
 800170a:	4413      	add	r3, r2
 800170c:	00db      	lsls	r3, r3, #3
 800170e:	440b      	add	r3, r1
 8001710:	3308      	adds	r3, #8
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	68ba      	ldr	r2, [r7, #8]
 8001716:	429a      	cmp	r2, r3
 8001718:	d2dc      	bcs.n	80016d4 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 800171a:	7b7a      	ldrb	r2, [r7, #13]
 800171c:	79fb      	ldrb	r3, [r7, #7]
 800171e:	4611      	mov	r1, r2
 8001720:	4618      	mov	r0, r3
 8001722:	f7ff fecf 	bl	80014c4 <LinkTimerAfter>
 8001726:	e00f      	b.n	8001748 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8001728:	4b0a      	ldr	r3, [pc, #40]	; (8001754 <linkTimer+0x144>)
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	b2da      	uxtb	r2, r3
 800172e:	79fb      	ldrb	r3, [r7, #7]
 8001730:	4611      	mov	r1, r2
 8001732:	4618      	mov	r0, r3
 8001734:	f7ff ff0c 	bl	8001550 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8001738:	4b06      	ldr	r3, [pc, #24]	; (8001754 <linkTimer+0x144>)
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	b2da      	uxtb	r2, r3
 800173e:	4b06      	ldr	r3, [pc, #24]	; (8001758 <linkTimer+0x148>)
 8001740:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8001742:	4a04      	ldr	r2, [pc, #16]	; (8001754 <linkTimer+0x144>)
 8001744:	79fb      	ldrb	r3, [r7, #7]
 8001746:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8001748:	89fb      	ldrh	r3, [r7, #14]
}
 800174a:	4618      	mov	r0, r3
 800174c:	3710      	adds	r7, #16
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	20000a08 	.word	0x20000a08
 8001758:	20000a09 	.word	0x20000a09
 800175c:	20000978 	.word	0x20000978
 8001760:	20000a0c 	.word	0x20000a0c

08001764 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8001764:	b480      	push	{r7}
 8001766:	b085      	sub	sp, #20
 8001768:	af00      	add	r7, sp, #0
 800176a:	4603      	mov	r3, r0
 800176c:	460a      	mov	r2, r1
 800176e:	71fb      	strb	r3, [r7, #7]
 8001770:	4613      	mov	r3, r2
 8001772:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8001774:	4b39      	ldr	r3, [pc, #228]	; (800185c <UnlinkTimer+0xf8>)
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	b2db      	uxtb	r3, r3
 800177a:	79fa      	ldrb	r2, [r7, #7]
 800177c:	429a      	cmp	r2, r3
 800177e:	d111      	bne.n	80017a4 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001780:	4b36      	ldr	r3, [pc, #216]	; (800185c <UnlinkTimer+0xf8>)
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	b2da      	uxtb	r2, r3
 8001786:	4b36      	ldr	r3, [pc, #216]	; (8001860 <UnlinkTimer+0xfc>)
 8001788:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 800178a:	79fa      	ldrb	r2, [r7, #7]
 800178c:	4935      	ldr	r1, [pc, #212]	; (8001864 <UnlinkTimer+0x100>)
 800178e:	4613      	mov	r3, r2
 8001790:	005b      	lsls	r3, r3, #1
 8001792:	4413      	add	r3, r2
 8001794:	00db      	lsls	r3, r3, #3
 8001796:	440b      	add	r3, r1
 8001798:	3315      	adds	r3, #21
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	b2da      	uxtb	r2, r3
 800179e:	4b2f      	ldr	r3, [pc, #188]	; (800185c <UnlinkTimer+0xf8>)
 80017a0:	701a      	strb	r2, [r3, #0]
 80017a2:	e03e      	b.n	8001822 <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 80017a4:	79fa      	ldrb	r2, [r7, #7]
 80017a6:	492f      	ldr	r1, [pc, #188]	; (8001864 <UnlinkTimer+0x100>)
 80017a8:	4613      	mov	r3, r2
 80017aa:	005b      	lsls	r3, r3, #1
 80017ac:	4413      	add	r3, r2
 80017ae:	00db      	lsls	r3, r3, #3
 80017b0:	440b      	add	r3, r1
 80017b2:	3314      	adds	r3, #20
 80017b4:	781b      	ldrb	r3, [r3, #0]
 80017b6:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 80017b8:	79fa      	ldrb	r2, [r7, #7]
 80017ba:	492a      	ldr	r1, [pc, #168]	; (8001864 <UnlinkTimer+0x100>)
 80017bc:	4613      	mov	r3, r2
 80017be:	005b      	lsls	r3, r3, #1
 80017c0:	4413      	add	r3, r2
 80017c2:	00db      	lsls	r3, r3, #3
 80017c4:	440b      	add	r3, r1
 80017c6:	3315      	adds	r3, #21
 80017c8:	781b      	ldrb	r3, [r3, #0]
 80017ca:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 80017cc:	79f9      	ldrb	r1, [r7, #7]
 80017ce:	7bfa      	ldrb	r2, [r7, #15]
 80017d0:	4824      	ldr	r0, [pc, #144]	; (8001864 <UnlinkTimer+0x100>)
 80017d2:	460b      	mov	r3, r1
 80017d4:	005b      	lsls	r3, r3, #1
 80017d6:	440b      	add	r3, r1
 80017d8:	00db      	lsls	r3, r3, #3
 80017da:	4403      	add	r3, r0
 80017dc:	3315      	adds	r3, #21
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	b2d8      	uxtb	r0, r3
 80017e2:	4920      	ldr	r1, [pc, #128]	; (8001864 <UnlinkTimer+0x100>)
 80017e4:	4613      	mov	r3, r2
 80017e6:	005b      	lsls	r3, r3, #1
 80017e8:	4413      	add	r3, r2
 80017ea:	00db      	lsls	r3, r3, #3
 80017ec:	440b      	add	r3, r1
 80017ee:	3315      	adds	r3, #21
 80017f0:	4602      	mov	r2, r0
 80017f2:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80017f4:	7bbb      	ldrb	r3, [r7, #14]
 80017f6:	2b06      	cmp	r3, #6
 80017f8:	d013      	beq.n	8001822 <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 80017fa:	79f9      	ldrb	r1, [r7, #7]
 80017fc:	7bba      	ldrb	r2, [r7, #14]
 80017fe:	4819      	ldr	r0, [pc, #100]	; (8001864 <UnlinkTimer+0x100>)
 8001800:	460b      	mov	r3, r1
 8001802:	005b      	lsls	r3, r3, #1
 8001804:	440b      	add	r3, r1
 8001806:	00db      	lsls	r3, r3, #3
 8001808:	4403      	add	r3, r0
 800180a:	3314      	adds	r3, #20
 800180c:	781b      	ldrb	r3, [r3, #0]
 800180e:	b2d8      	uxtb	r0, r3
 8001810:	4914      	ldr	r1, [pc, #80]	; (8001864 <UnlinkTimer+0x100>)
 8001812:	4613      	mov	r3, r2
 8001814:	005b      	lsls	r3, r3, #1
 8001816:	4413      	add	r3, r2
 8001818:	00db      	lsls	r3, r3, #3
 800181a:	440b      	add	r3, r1
 800181c:	3314      	adds	r3, #20
 800181e:	4602      	mov	r2, r0
 8001820:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8001822:	79fa      	ldrb	r2, [r7, #7]
 8001824:	490f      	ldr	r1, [pc, #60]	; (8001864 <UnlinkTimer+0x100>)
 8001826:	4613      	mov	r3, r2
 8001828:	005b      	lsls	r3, r3, #1
 800182a:	4413      	add	r3, r2
 800182c:	00db      	lsls	r3, r3, #3
 800182e:	440b      	add	r3, r1
 8001830:	330c      	adds	r3, #12
 8001832:	2201      	movs	r2, #1
 8001834:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8001836:	4b09      	ldr	r3, [pc, #36]	; (800185c <UnlinkTimer+0xf8>)
 8001838:	781b      	ldrb	r3, [r3, #0]
 800183a:	b2db      	uxtb	r3, r3
 800183c:	2b06      	cmp	r3, #6
 800183e:	d107      	bne.n	8001850 <UnlinkTimer+0xec>
 8001840:	79bb      	ldrb	r3, [r7, #6]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d104      	bne.n	8001850 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001846:	4b08      	ldr	r3, [pc, #32]	; (8001868 <UnlinkTimer+0x104>)
 8001848:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800184c:	601a      	str	r2, [r3, #0]
  }

  return;
 800184e:	bf00      	nop
 8001850:	bf00      	nop
}
 8001852:	3714      	adds	r7, #20
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr
 800185c:	20000a08 	.word	0x20000a08
 8001860:	20000a09 	.word	0x20000a09
 8001864:	20000978 	.word	0x20000978
 8001868:	20000a0c 	.word	0x20000a0c

0800186c <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b082      	sub	sp, #8
 8001870:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8001872:	4b1a      	ldr	r3, [pc, #104]	; (80018dc <ReturnTimeElapsed+0x70>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800187a:	d026      	beq.n	80018ca <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 800187c:	f7ff fe02 	bl	8001484 <ReadRtcSsrValue>
 8001880:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8001882:	4b16      	ldr	r3, [pc, #88]	; (80018dc <ReturnTimeElapsed+0x70>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	687a      	ldr	r2, [r7, #4]
 8001888:	429a      	cmp	r2, r3
 800188a:	d805      	bhi.n	8001898 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 800188c:	4b13      	ldr	r3, [pc, #76]	; (80018dc <ReturnTimeElapsed+0x70>)
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	1ad3      	subs	r3, r2, r3
 8001894:	607b      	str	r3, [r7, #4]
 8001896:	e00a      	b.n	80018ae <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8001898:	4b11      	ldr	r3, [pc, #68]	; (80018e0 <ReturnTimeElapsed+0x74>)
 800189a:	881b      	ldrh	r3, [r3, #0]
 800189c:	461a      	mov	r2, r3
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	1ad3      	subs	r3, r2, r3
 80018a2:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 80018a4:	4b0d      	ldr	r3, [pc, #52]	; (80018dc <ReturnTimeElapsed+0x70>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	683a      	ldr	r2, [r7, #0]
 80018aa:	4413      	add	r3, r2
 80018ac:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 80018ae:	4b0d      	ldr	r3, [pc, #52]	; (80018e4 <ReturnTimeElapsed+0x78>)
 80018b0:	781b      	ldrb	r3, [r3, #0]
 80018b2:	461a      	mov	r2, r3
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	fb02 f303 	mul.w	r3, r2, r3
 80018ba:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 80018bc:	4b0a      	ldr	r3, [pc, #40]	; (80018e8 <ReturnTimeElapsed+0x7c>)
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	461a      	mov	r2, r3
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	40d3      	lsrs	r3, r2
 80018c6:	607b      	str	r3, [r7, #4]
 80018c8:	e001      	b.n	80018ce <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 80018ca:	2300      	movs	r3, #0
 80018cc:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	b29b      	uxth	r3, r3
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3708      	adds	r7, #8
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	20000a0c 	.word	0x20000a0c
 80018e0:	20000a14 	.word	0x20000a14
 80018e4:	20000a12 	.word	0x20000a12
 80018e8:	20000a11 	.word	0x20000a11

080018ec <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	4603      	mov	r3, r0
 80018f4:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 80018f6:	88fb      	ldrh	r3, [r7, #6]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d108      	bne.n	800190e <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 80018fc:	f7ff fdc2 	bl	8001484 <ReadRtcSsrValue>
 8001900:	4603      	mov	r3, r0
 8001902:	4a21      	ldr	r2, [pc, #132]	; (8001988 <RestartWakeupCounter+0x9c>)
 8001904:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001906:	2003      	movs	r0, #3
 8001908:	f001 fd0f 	bl	800332a <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 800190c:	e039      	b.n	8001982 <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 800190e:	88fb      	ldrh	r3, [r7, #6]
 8001910:	2b01      	cmp	r3, #1
 8001912:	d803      	bhi.n	800191c <RestartWakeupCounter+0x30>
 8001914:	4b1d      	ldr	r3, [pc, #116]	; (800198c <RestartWakeupCounter+0xa0>)
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	2b01      	cmp	r3, #1
 800191a:	d002      	beq.n	8001922 <RestartWakeupCounter+0x36>
      Value -= 1;
 800191c:	88fb      	ldrh	r3, [r7, #6]
 800191e:	3b01      	subs	r3, #1
 8001920:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8001922:	bf00      	nop
 8001924:	4b1a      	ldr	r3, [pc, #104]	; (8001990 <RestartWakeupCounter+0xa4>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	68db      	ldr	r3, [r3, #12]
 800192a:	f003 0304 	and.w	r3, r3, #4
 800192e:	2b00      	cmp	r3, #0
 8001930:	d0f8      	beq.n	8001924 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001932:	4b17      	ldr	r3, [pc, #92]	; (8001990 <RestartWakeupCounter+0xa4>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	68db      	ldr	r3, [r3, #12]
 8001938:	b2da      	uxtb	r2, r3
 800193a:	4b15      	ldr	r3, [pc, #84]	; (8001990 <RestartWakeupCounter+0xa4>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001942:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001944:	4b13      	ldr	r3, [pc, #76]	; (8001994 <RestartWakeupCounter+0xa8>)
 8001946:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800194a:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 800194c:	2003      	movs	r0, #3
 800194e:	f001 fcfa 	bl	8003346 <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8001952:	4b11      	ldr	r3, [pc, #68]	; (8001998 <RestartWakeupCounter+0xac>)
 8001954:	695b      	ldr	r3, [r3, #20]
 8001956:	0c1b      	lsrs	r3, r3, #16
 8001958:	041b      	lsls	r3, r3, #16
 800195a:	88fa      	ldrh	r2, [r7, #6]
 800195c:	490e      	ldr	r1, [pc, #56]	; (8001998 <RestartWakeupCounter+0xac>)
 800195e:	4313      	orrs	r3, r2
 8001960:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8001962:	f7ff fd8f 	bl	8001484 <ReadRtcSsrValue>
 8001966:	4603      	mov	r3, r0
 8001968:	4a07      	ldr	r2, [pc, #28]	; (8001988 <RestartWakeupCounter+0x9c>)
 800196a:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 800196c:	4b08      	ldr	r3, [pc, #32]	; (8001990 <RestartWakeupCounter+0xa4>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	689a      	ldr	r2, [r3, #8]
 8001972:	4b07      	ldr	r3, [pc, #28]	; (8001990 <RestartWakeupCounter+0xa4>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800197a:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 800197c:	f3af 8000 	nop.w
  return ;
 8001980:	bf00      	nop
}
 8001982:	3708      	adds	r7, #8
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}
 8001988:	20000a0c 	.word	0x20000a0c
 800198c:	20000a11 	.word	0x20000a11
 8001990:	20000ae0 	.word	0x20000ae0
 8001994:	58000800 	.word	0x58000800
 8001998:	40002800 	.word	0x40002800

0800199c <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b084      	sub	sp, #16
 80019a0:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 80019a2:	4b45      	ldr	r3, [pc, #276]	; (8001ab8 <RescheduleTimerList+0x11c>)
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019ae:	d107      	bne.n	80019c0 <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 80019b0:	bf00      	nop
 80019b2:	4b42      	ldr	r3, [pc, #264]	; (8001abc <RescheduleTimerList+0x120>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	68db      	ldr	r3, [r3, #12]
 80019b8:	f003 0304 	and.w	r3, r3, #4
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d1f8      	bne.n	80019b2 <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 80019c0:	4b3e      	ldr	r3, [pc, #248]	; (8001abc <RescheduleTimerList+0x120>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	689a      	ldr	r2, [r3, #8]
 80019c6:	4b3d      	ldr	r3, [pc, #244]	; (8001abc <RescheduleTimerList+0x120>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80019ce:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 80019d0:	4b3b      	ldr	r3, [pc, #236]	; (8001ac0 <RescheduleTimerList+0x124>)
 80019d2:	781b      	ldrb	r3, [r3, #0]
 80019d4:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 80019d6:	7bfa      	ldrb	r2, [r7, #15]
 80019d8:	493a      	ldr	r1, [pc, #232]	; (8001ac4 <RescheduleTimerList+0x128>)
 80019da:	4613      	mov	r3, r2
 80019dc:	005b      	lsls	r3, r3, #1
 80019de:	4413      	add	r3, r2
 80019e0:	00db      	lsls	r3, r3, #3
 80019e2:	440b      	add	r3, r1
 80019e4:	3308      	adds	r3, #8
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 80019ea:	f7ff ff3f 	bl	800186c <ReturnTimeElapsed>
 80019ee:	4603      	mov	r3, r0
 80019f0:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 80019f2:	88fb      	ldrh	r3, [r7, #6]
 80019f4:	68ba      	ldr	r2, [r7, #8]
 80019f6:	429a      	cmp	r2, r3
 80019f8:	d205      	bcs.n	8001a06 <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 80019fa:	2300      	movs	r3, #0
 80019fc:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80019fe:	4b32      	ldr	r3, [pc, #200]	; (8001ac8 <RescheduleTimerList+0x12c>)
 8001a00:	2201      	movs	r2, #1
 8001a02:	701a      	strb	r2, [r3, #0]
 8001a04:	e04d      	b.n	8001aa2 <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8001a06:	88fb      	ldrh	r3, [r7, #6]
 8001a08:	4a30      	ldr	r2, [pc, #192]	; (8001acc <RescheduleTimerList+0x130>)
 8001a0a:	8812      	ldrh	r2, [r2, #0]
 8001a0c:	b292      	uxth	r2, r2
 8001a0e:	4413      	add	r3, r2
 8001a10:	461a      	mov	r2, r3
 8001a12:	68bb      	ldr	r3, [r7, #8]
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d906      	bls.n	8001a26 <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8001a18:	4b2c      	ldr	r3, [pc, #176]	; (8001acc <RescheduleTimerList+0x130>)
 8001a1a:	881b      	ldrh	r3, [r3, #0]
 8001a1c:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8001a1e:	4b2a      	ldr	r3, [pc, #168]	; (8001ac8 <RescheduleTimerList+0x12c>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	701a      	strb	r2, [r3, #0]
 8001a24:	e03d      	b.n	8001aa2 <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8001a26:	68bb      	ldr	r3, [r7, #8]
 8001a28:	b29a      	uxth	r2, r3
 8001a2a:	88fb      	ldrh	r3, [r7, #6]
 8001a2c:	1ad3      	subs	r3, r2, r3
 8001a2e:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001a30:	4b25      	ldr	r3, [pc, #148]	; (8001ac8 <RescheduleTimerList+0x12c>)
 8001a32:	2201      	movs	r2, #1
 8001a34:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001a36:	e034      	b.n	8001aa2 <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8001a38:	7bfa      	ldrb	r2, [r7, #15]
 8001a3a:	4922      	ldr	r1, [pc, #136]	; (8001ac4 <RescheduleTimerList+0x128>)
 8001a3c:	4613      	mov	r3, r2
 8001a3e:	005b      	lsls	r3, r3, #1
 8001a40:	4413      	add	r3, r2
 8001a42:	00db      	lsls	r3, r3, #3
 8001a44:	440b      	add	r3, r1
 8001a46:	3308      	adds	r3, #8
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	88fb      	ldrh	r3, [r7, #6]
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	d20a      	bcs.n	8001a66 <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8001a50:	7bfa      	ldrb	r2, [r7, #15]
 8001a52:	491c      	ldr	r1, [pc, #112]	; (8001ac4 <RescheduleTimerList+0x128>)
 8001a54:	4613      	mov	r3, r2
 8001a56:	005b      	lsls	r3, r3, #1
 8001a58:	4413      	add	r3, r2
 8001a5a:	00db      	lsls	r3, r3, #3
 8001a5c:	440b      	add	r3, r1
 8001a5e:	3308      	adds	r3, #8
 8001a60:	2200      	movs	r2, #0
 8001a62:	601a      	str	r2, [r3, #0]
 8001a64:	e013      	b.n	8001a8e <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8001a66:	7bfa      	ldrb	r2, [r7, #15]
 8001a68:	4916      	ldr	r1, [pc, #88]	; (8001ac4 <RescheduleTimerList+0x128>)
 8001a6a:	4613      	mov	r3, r2
 8001a6c:	005b      	lsls	r3, r3, #1
 8001a6e:	4413      	add	r3, r2
 8001a70:	00db      	lsls	r3, r3, #3
 8001a72:	440b      	add	r3, r1
 8001a74:	3308      	adds	r3, #8
 8001a76:	6819      	ldr	r1, [r3, #0]
 8001a78:	88fb      	ldrh	r3, [r7, #6]
 8001a7a:	7bfa      	ldrb	r2, [r7, #15]
 8001a7c:	1ac9      	subs	r1, r1, r3
 8001a7e:	4811      	ldr	r0, [pc, #68]	; (8001ac4 <RescheduleTimerList+0x128>)
 8001a80:	4613      	mov	r3, r2
 8001a82:	005b      	lsls	r3, r3, #1
 8001a84:	4413      	add	r3, r2
 8001a86:	00db      	lsls	r3, r3, #3
 8001a88:	4403      	add	r3, r0
 8001a8a:	3308      	adds	r3, #8
 8001a8c:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8001a8e:	7bfa      	ldrb	r2, [r7, #15]
 8001a90:	490c      	ldr	r1, [pc, #48]	; (8001ac4 <RescheduleTimerList+0x128>)
 8001a92:	4613      	mov	r3, r2
 8001a94:	005b      	lsls	r3, r3, #1
 8001a96:	4413      	add	r3, r2
 8001a98:	00db      	lsls	r3, r3, #3
 8001a9a:	440b      	add	r3, r1
 8001a9c:	3315      	adds	r3, #21
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001aa2:	7bfb      	ldrb	r3, [r7, #15]
 8001aa4:	2b06      	cmp	r3, #6
 8001aa6:	d1c7      	bne.n	8001a38 <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8001aa8:	89bb      	ldrh	r3, [r7, #12]
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f7ff ff1e 	bl	80018ec <RestartWakeupCounter>

  return ;
 8001ab0:	bf00      	nop
}
 8001ab2:	3710      	adds	r7, #16
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	40002800 	.word	0x40002800
 8001abc:	20000ae0 	.word	0x20000ae0
 8001ac0:	20000a08 	.word	0x20000a08
 8001ac4:	20000978 	.word	0x20000978
 8001ac8:	20000a10 	.word	0x20000a10
 8001acc:	20000a16 	.word	0x20000a16

08001ad0 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b08a      	sub	sp, #40	; 0x28
 8001ad4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001ad6:	f3ef 8310 	mrs	r3, PRIMASK
 8001ada:	617b      	str	r3, [r7, #20]
  return(result);
 8001adc:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001ade:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8001ae0:	b672      	cpsid	i
}
 8001ae2:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001ae4:	4b59      	ldr	r3, [pc, #356]	; (8001c4c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	22ca      	movs	r2, #202	; 0xca
 8001aea:	625a      	str	r2, [r3, #36]	; 0x24
 8001aec:	4b57      	ldr	r3, [pc, #348]	; (8001c4c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	2253      	movs	r2, #83	; 0x53
 8001af2:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 8001af4:	4b55      	ldr	r3, [pc, #340]	; (8001c4c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	689a      	ldr	r2, [r3, #8]
 8001afa:	4b54      	ldr	r3, [pc, #336]	; (8001c4c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b02:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8001b04:	4b52      	ldr	r3, [pc, #328]	; (8001c50 <HW_TS_RTC_Wakeup_Handler+0x180>)
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8001b0c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001b10:	4950      	ldr	r1, [pc, #320]	; (8001c54 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001b12:	4613      	mov	r3, r2
 8001b14:	005b      	lsls	r3, r3, #1
 8001b16:	4413      	add	r3, r2
 8001b18:	00db      	lsls	r3, r3, #3
 8001b1a:	440b      	add	r3, r1
 8001b1c:	330c      	adds	r3, #12
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	2b02      	cmp	r3, #2
 8001b24:	d16e      	bne.n	8001c04 <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8001b26:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001b2a:	494a      	ldr	r1, [pc, #296]	; (8001c54 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001b2c:	4613      	mov	r3, r2
 8001b2e:	005b      	lsls	r3, r3, #1
 8001b30:	4413      	add	r3, r2
 8001b32:	00db      	lsls	r3, r3, #3
 8001b34:	440b      	add	r3, r1
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8001b3a:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001b3e:	4945      	ldr	r1, [pc, #276]	; (8001c54 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001b40:	4613      	mov	r3, r2
 8001b42:	005b      	lsls	r3, r3, #1
 8001b44:	4413      	add	r3, r2
 8001b46:	00db      	lsls	r3, r3, #3
 8001b48:	440b      	add	r3, r1
 8001b4a:	3310      	adds	r3, #16
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8001b50:	4b41      	ldr	r3, [pc, #260]	; (8001c58 <HW_TS_RTC_Wakeup_Handler+0x188>)
 8001b52:	781b      	ldrb	r3, [r3, #0]
 8001b54:	b2db      	uxtb	r3, r3
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d04c      	beq.n	8001bf4 <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8001b5a:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001b5e:	493d      	ldr	r1, [pc, #244]	; (8001c54 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001b60:	4613      	mov	r3, r2
 8001b62:	005b      	lsls	r3, r3, #1
 8001b64:	4413      	add	r3, r2
 8001b66:	00db      	lsls	r3, r3, #3
 8001b68:	440b      	add	r3, r1
 8001b6a:	330d      	adds	r3, #13
 8001b6c:	781b      	ldrb	r3, [r3, #0]
 8001b6e:	b2db      	uxtb	r3, r3
 8001b70:	2b01      	cmp	r3, #1
 8001b72:	d124      	bne.n	8001bbe <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8001b74:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001b78:	2101      	movs	r1, #1
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f7ff fdf2 	bl	8001764 <UnlinkTimer>
 8001b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b82:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001b84:	693b      	ldr	r3, [r7, #16]
 8001b86:	f383 8810 	msr	PRIMASK, r3
}
 8001b8a:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8001b8c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001b90:	4930      	ldr	r1, [pc, #192]	; (8001c54 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001b92:	4613      	mov	r3, r2
 8001b94:	005b      	lsls	r3, r3, #1
 8001b96:	4413      	add	r3, r2
 8001b98:	00db      	lsls	r3, r3, #3
 8001b9a:	440b      	add	r3, r1
 8001b9c:	3304      	adds	r3, #4
 8001b9e:	681a      	ldr	r2, [r3, #0]
 8001ba0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001ba4:	4611      	mov	r1, r2
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f000 f9b8 	bl	8001f1c <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001bac:	4b27      	ldr	r3, [pc, #156]	; (8001c4c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	22ca      	movs	r2, #202	; 0xca
 8001bb2:	625a      	str	r2, [r3, #36]	; 0x24
 8001bb4:	4b25      	ldr	r3, [pc, #148]	; (8001c4c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	2253      	movs	r2, #83	; 0x53
 8001bba:	625a      	str	r2, [r3, #36]	; 0x24
 8001bbc:	e012      	b.n	8001be4 <HW_TS_RTC_Wakeup_Handler+0x114>
 8001bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	f383 8810 	msr	PRIMASK, r3
}
 8001bc8:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 8001bca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f000 f920 	bl	8001e14 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001bd4:	4b1d      	ldr	r3, [pc, #116]	; (8001c4c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	22ca      	movs	r2, #202	; 0xca
 8001bda:	625a      	str	r2, [r3, #36]	; 0x24
 8001bdc:	4b1b      	ldr	r3, [pc, #108]	; (8001c4c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	2253      	movs	r2, #83	; 0x53
 8001be2:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8001be4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001be8:	69fa      	ldr	r2, [r7, #28]
 8001bea:	4619      	mov	r1, r3
 8001bec:	69b8      	ldr	r0, [r7, #24]
 8001bee:	f000 fa1b 	bl	8002028 <HW_TS_RTC_Int_AppNot>
 8001bf2:	e022      	b.n	8001c3a <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 8001bf4:	f7ff fed2 	bl	800199c <RescheduleTimerList>
 8001bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bfa:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	f383 8810 	msr	PRIMASK, r3
}
 8001c02:	e01a      	b.n	8001c3a <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8001c04:	bf00      	nop
 8001c06:	4b11      	ldr	r3, [pc, #68]	; (8001c4c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	68db      	ldr	r3, [r3, #12]
 8001c0c:	f003 0304 	and.w	r3, r3, #4
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d0f8      	beq.n	8001c06 <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001c14:	4b0d      	ldr	r3, [pc, #52]	; (8001c4c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	68db      	ldr	r3, [r3, #12]
 8001c1a:	b2da      	uxtb	r2, r3
 8001c1c:	4b0b      	ldr	r3, [pc, #44]	; (8001c4c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001c24:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001c26:	4b0d      	ldr	r3, [pc, #52]	; (8001c5c <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001c28:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001c2c:	60da      	str	r2, [r3, #12]
 8001c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c30:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	f383 8810 	msr	PRIMASK, r3
}
 8001c38:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001c3a:	4b04      	ldr	r3, [pc, #16]	; (8001c4c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	22ff      	movs	r2, #255	; 0xff
 8001c40:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 8001c42:	bf00      	nop
}
 8001c44:	3728      	adds	r7, #40	; 0x28
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	20000ae0 	.word	0x20000ae0
 8001c50:	20000a08 	.word	0x20000a08
 8001c54:	20000978 	.word	0x20000978
 8001c58:	20000a10 	.word	0x20000a10
 8001c5c:	58000800 	.word	0x58000800

08001c60 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b088      	sub	sp, #32
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	4603      	mov	r3, r0
 8001c68:	6039      	str	r1, [r7, #0]
 8001c6a:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001c6c:	4b5e      	ldr	r3, [pc, #376]	; (8001de8 <HW_TS_Init+0x188>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	22ca      	movs	r2, #202	; 0xca
 8001c72:	625a      	str	r2, [r3, #36]	; 0x24
 8001c74:	4b5c      	ldr	r3, [pc, #368]	; (8001de8 <HW_TS_Init+0x188>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	2253      	movs	r2, #83	; 0x53
 8001c7a:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8001c7c:	4b5b      	ldr	r3, [pc, #364]	; (8001dec <HW_TS_Init+0x18c>)
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	4a5a      	ldr	r2, [pc, #360]	; (8001dec <HW_TS_Init+0x18c>)
 8001c82:	f043 0320 	orr.w	r3, r3, #32
 8001c86:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8001c88:	4b58      	ldr	r3, [pc, #352]	; (8001dec <HW_TS_Init+0x18c>)
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	b2db      	uxtb	r3, r3
 8001c8e:	f003 0307 	and.w	r3, r3, #7
 8001c92:	b2db      	uxtb	r3, r3
 8001c94:	f1c3 0304 	rsb	r3, r3, #4
 8001c98:	b2da      	uxtb	r2, r3
 8001c9a:	4b55      	ldr	r3, [pc, #340]	; (8001df0 <HW_TS_Init+0x190>)
 8001c9c:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8001c9e:	4b53      	ldr	r3, [pc, #332]	; (8001dec <HW_TS_Init+0x18c>)
 8001ca0:	691b      	ldr	r3, [r3, #16]
 8001ca2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001ca6:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 8001caa:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cac:	693a      	ldr	r2, [r7, #16]
 8001cae:	fa92 f2a2 	rbit	r2, r2
 8001cb2:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001cb4:	68fa      	ldr	r2, [r7, #12]
 8001cb6:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001cb8:	697a      	ldr	r2, [r7, #20]
 8001cba:	2a00      	cmp	r2, #0
 8001cbc:	d101      	bne.n	8001cc2 <HW_TS_Init+0x62>
  {
    return 32U;
 8001cbe:	2220      	movs	r2, #32
 8001cc0:	e003      	b.n	8001cca <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 8001cc2:	697a      	ldr	r2, [r7, #20]
 8001cc4:	fab2 f282 	clz	r2, r2
 8001cc8:	b2d2      	uxtb	r2, r2
 8001cca:	40d3      	lsrs	r3, r2
 8001ccc:	b2db      	uxtb	r3, r3
 8001cce:	3301      	adds	r3, #1
 8001cd0:	b2da      	uxtb	r2, r3
 8001cd2:	4b48      	ldr	r3, [pc, #288]	; (8001df4 <HW_TS_Init+0x194>)
 8001cd4:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8001cd6:	4b45      	ldr	r3, [pc, #276]	; (8001dec <HW_TS_Init+0x18c>)
 8001cd8:	691b      	ldr	r3, [r3, #16]
 8001cda:	b29b      	uxth	r3, r3
 8001cdc:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001ce0:	b29b      	uxth	r3, r3
 8001ce2:	3301      	adds	r3, #1
 8001ce4:	b29a      	uxth	r2, r3
 8001ce6:	4b44      	ldr	r3, [pc, #272]	; (8001df8 <HW_TS_Init+0x198>)
 8001ce8:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8001cea:	4b43      	ldr	r3, [pc, #268]	; (8001df8 <HW_TS_Init+0x198>)
 8001cec:	881b      	ldrh	r3, [r3, #0]
 8001cee:	3b01      	subs	r3, #1
 8001cf0:	4a40      	ldr	r2, [pc, #256]	; (8001df4 <HW_TS_Init+0x194>)
 8001cf2:	7812      	ldrb	r2, [r2, #0]
 8001cf4:	fb02 f303 	mul.w	r3, r2, r3
 8001cf8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001cfc:	4a3c      	ldr	r2, [pc, #240]	; (8001df0 <HW_TS_Init+0x190>)
 8001cfe:	7812      	ldrb	r2, [r2, #0]
 8001d00:	40d3      	lsrs	r3, r2
 8001d02:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8001d04:	69bb      	ldr	r3, [r7, #24]
 8001d06:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d904      	bls.n	8001d18 <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8001d0e:	4b3b      	ldr	r3, [pc, #236]	; (8001dfc <HW_TS_Init+0x19c>)
 8001d10:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d14:	801a      	strh	r2, [r3, #0]
 8001d16:	e003      	b.n	8001d20 <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8001d18:	69bb      	ldr	r3, [r7, #24]
 8001d1a:	b29a      	uxth	r2, r3
 8001d1c:	4b37      	ldr	r3, [pc, #220]	; (8001dfc <HW_TS_Init+0x19c>)
 8001d1e:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8001d20:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001d24:	f7ff fb9c 	bl	8001460 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8001d28:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001d2c:	f7ff fb84 	bl	8001438 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8001d30:	79fb      	ldrb	r3, [r7, #7]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d13d      	bne.n	8001db2 <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001d36:	4b32      	ldr	r3, [pc, #200]	; (8001e00 <HW_TS_Init+0x1a0>)
 8001d38:	2201      	movs	r2, #1
 8001d3a:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001d3c:	4b31      	ldr	r3, [pc, #196]	; (8001e04 <HW_TS_Init+0x1a4>)
 8001d3e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001d42:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8001d44:	2300      	movs	r3, #0
 8001d46:	77fb      	strb	r3, [r7, #31]
 8001d48:	e00c      	b.n	8001d64 <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8001d4a:	7ffa      	ldrb	r2, [r7, #31]
 8001d4c:	492e      	ldr	r1, [pc, #184]	; (8001e08 <HW_TS_Init+0x1a8>)
 8001d4e:	4613      	mov	r3, r2
 8001d50:	005b      	lsls	r3, r3, #1
 8001d52:	4413      	add	r3, r2
 8001d54:	00db      	lsls	r3, r3, #3
 8001d56:	440b      	add	r3, r1
 8001d58:	330c      	adds	r3, #12
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8001d5e:	7ffb      	ldrb	r3, [r7, #31]
 8001d60:	3301      	adds	r3, #1
 8001d62:	77fb      	strb	r3, [r7, #31]
 8001d64:	7ffb      	ldrb	r3, [r7, #31]
 8001d66:	2b05      	cmp	r3, #5
 8001d68:	d9ef      	bls.n	8001d4a <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8001d6a:	4b28      	ldr	r3, [pc, #160]	; (8001e0c <HW_TS_Init+0x1ac>)
 8001d6c:	2206      	movs	r2, #6
 8001d6e:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 8001d70:	4b1d      	ldr	r3, [pc, #116]	; (8001de8 <HW_TS_Init+0x188>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	689a      	ldr	r2, [r3, #8]
 8001d76:	4b1c      	ldr	r3, [pc, #112]	; (8001de8 <HW_TS_Init+0x188>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d7e:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8001d80:	4b19      	ldr	r3, [pc, #100]	; (8001de8 <HW_TS_Init+0x188>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	68db      	ldr	r3, [r3, #12]
 8001d86:	b2da      	uxtb	r2, r3
 8001d88:	4b17      	ldr	r3, [pc, #92]	; (8001de8 <HW_TS_Init+0x188>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001d90:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8001d92:	4b1f      	ldr	r3, [pc, #124]	; (8001e10 <HW_TS_Init+0x1b0>)
 8001d94:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001d98:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8001d9a:	2003      	movs	r0, #3
 8001d9c:	f001 fad3 	bl	8003346 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8001da0:	4b11      	ldr	r3, [pc, #68]	; (8001de8 <HW_TS_Init+0x188>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	689a      	ldr	r2, [r3, #8]
 8001da6:	4b10      	ldr	r3, [pc, #64]	; (8001de8 <HW_TS_Init+0x188>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001dae:	609a      	str	r2, [r3, #8]
 8001db0:	e009      	b.n	8001dc6 <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 8001db2:	4b0d      	ldr	r3, [pc, #52]	; (8001de8 <HW_TS_Init+0x188>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	68db      	ldr	r3, [r3, #12]
 8001db8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d002      	beq.n	8001dc6 <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001dc0:	2003      	movs	r0, #3
 8001dc2:	f001 fab2 	bl	800332a <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001dc6:	4b08      	ldr	r3, [pc, #32]	; (8001de8 <HW_TS_Init+0x188>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	22ff      	movs	r2, #255	; 0xff
 8001dcc:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8001dce:	2200      	movs	r2, #0
 8001dd0:	2103      	movs	r1, #3
 8001dd2:	2003      	movs	r0, #3
 8001dd4:	f001 fa67 	bl	80032a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001dd8:	2003      	movs	r0, #3
 8001dda:	f001 fa7e 	bl	80032da <HAL_NVIC_EnableIRQ>

  return;
 8001dde:	bf00      	nop
}
 8001de0:	3720      	adds	r7, #32
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	20000ae0 	.word	0x20000ae0
 8001dec:	40002800 	.word	0x40002800
 8001df0:	20000a11 	.word	0x20000a11
 8001df4:	20000a12 	.word	0x20000a12
 8001df8:	20000a14 	.word	0x20000a14
 8001dfc:	20000a16 	.word	0x20000a16
 8001e00:	20000a10 	.word	0x20000a10
 8001e04:	20000a0c 	.word	0x20000a0c
 8001e08:	20000978 	.word	0x20000978
 8001e0c:	20000a08 	.word	0x20000a08
 8001e10:	58000800 	.word	0x58000800

08001e14 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b086      	sub	sp, #24
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001e1e:	f3ef 8310 	mrs	r3, PRIMASK
 8001e22:	60fb      	str	r3, [r7, #12]
  return(result);
 8001e24:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001e26:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001e28:	b672      	cpsid	i
}
 8001e2a:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001e2c:	2003      	movs	r0, #3
 8001e2e:	f001 fa62 	bl	80032f6 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001e32:	4b34      	ldr	r3, [pc, #208]	; (8001f04 <HW_TS_Stop+0xf0>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	22ca      	movs	r2, #202	; 0xca
 8001e38:	625a      	str	r2, [r3, #36]	; 0x24
 8001e3a:	4b32      	ldr	r3, [pc, #200]	; (8001f04 <HW_TS_Stop+0xf0>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	2253      	movs	r2, #83	; 0x53
 8001e40:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001e42:	79fa      	ldrb	r2, [r7, #7]
 8001e44:	4930      	ldr	r1, [pc, #192]	; (8001f08 <HW_TS_Stop+0xf4>)
 8001e46:	4613      	mov	r3, r2
 8001e48:	005b      	lsls	r3, r3, #1
 8001e4a:	4413      	add	r3, r2
 8001e4c:	00db      	lsls	r3, r3, #3
 8001e4e:	440b      	add	r3, r1
 8001e50:	330c      	adds	r3, #12
 8001e52:	781b      	ldrb	r3, [r3, #0]
 8001e54:	b2db      	uxtb	r3, r3
 8001e56:	2b02      	cmp	r3, #2
 8001e58:	d142      	bne.n	8001ee0 <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8001e5a:	79fb      	ldrb	r3, [r7, #7]
 8001e5c:	2100      	movs	r1, #0
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f7ff fc80 	bl	8001764 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8001e64:	4b29      	ldr	r3, [pc, #164]	; (8001f0c <HW_TS_Stop+0xf8>)
 8001e66:	781b      	ldrb	r3, [r3, #0]
 8001e68:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001e6a:	7cfb      	ldrb	r3, [r7, #19]
 8001e6c:	2b06      	cmp	r3, #6
 8001e6e:	d12f      	bne.n	8001ed0 <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8001e70:	4b27      	ldr	r3, [pc, #156]	; (8001f10 <HW_TS_Stop+0xfc>)
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e7c:	d107      	bne.n	8001e8e <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8001e7e:	bf00      	nop
 8001e80:	4b20      	ldr	r3, [pc, #128]	; (8001f04 <HW_TS_Stop+0xf0>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	68db      	ldr	r3, [r3, #12]
 8001e86:	f003 0304 	and.w	r3, r3, #4
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d1f8      	bne.n	8001e80 <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8001e8e:	4b1d      	ldr	r3, [pc, #116]	; (8001f04 <HW_TS_Stop+0xf0>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	689a      	ldr	r2, [r3, #8]
 8001e94:	4b1b      	ldr	r3, [pc, #108]	; (8001f04 <HW_TS_Stop+0xf0>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e9c:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8001e9e:	bf00      	nop
 8001ea0:	4b18      	ldr	r3, [pc, #96]	; (8001f04 <HW_TS_Stop+0xf0>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	68db      	ldr	r3, [r3, #12]
 8001ea6:	f003 0304 	and.w	r3, r3, #4
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d0f8      	beq.n	8001ea0 <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001eae:	4b15      	ldr	r3, [pc, #84]	; (8001f04 <HW_TS_Stop+0xf0>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	68db      	ldr	r3, [r3, #12]
 8001eb4:	b2da      	uxtb	r2, r3
 8001eb6:	4b13      	ldr	r3, [pc, #76]	; (8001f04 <HW_TS_Stop+0xf0>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001ebe:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001ec0:	4b14      	ldr	r3, [pc, #80]	; (8001f14 <HW_TS_Stop+0x100>)
 8001ec2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001ec6:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001ec8:	2003      	movs	r0, #3
 8001eca:	f001 fa3c 	bl	8003346 <HAL_NVIC_ClearPendingIRQ>
 8001ece:	e007      	b.n	8001ee0 <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001ed0:	4b11      	ldr	r3, [pc, #68]	; (8001f18 <HW_TS_Stop+0x104>)
 8001ed2:	781b      	ldrb	r3, [r3, #0]
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	7cfa      	ldrb	r2, [r7, #19]
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	d001      	beq.n	8001ee0 <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 8001edc:	f7ff fd5e 	bl	800199c <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001ee0:	4b08      	ldr	r3, [pc, #32]	; (8001f04 <HW_TS_Stop+0xf0>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	22ff      	movs	r2, #255	; 0xff
 8001ee6:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001ee8:	2003      	movs	r0, #3
 8001eea:	f001 f9f6 	bl	80032da <HAL_NVIC_EnableIRQ>
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001ef2:	68bb      	ldr	r3, [r7, #8]
 8001ef4:	f383 8810 	msr	PRIMASK, r3
}
 8001ef8:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8001efa:	bf00      	nop
}
 8001efc:	3718      	adds	r7, #24
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	20000ae0 	.word	0x20000ae0
 8001f08:	20000978 	.word	0x20000978
 8001f0c:	20000a08 	.word	0x20000a08
 8001f10:	40002800 	.word	0x40002800
 8001f14:	58000800 	.word	0x58000800
 8001f18:	20000a09 	.word	0x20000a09

08001f1c <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b086      	sub	sp, #24
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	4603      	mov	r3, r0
 8001f24:	6039      	str	r1, [r7, #0]
 8001f26:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001f28:	79fa      	ldrb	r2, [r7, #7]
 8001f2a:	493b      	ldr	r1, [pc, #236]	; (8002018 <HW_TS_Start+0xfc>)
 8001f2c:	4613      	mov	r3, r2
 8001f2e:	005b      	lsls	r3, r3, #1
 8001f30:	4413      	add	r3, r2
 8001f32:	00db      	lsls	r3, r3, #3
 8001f34:	440b      	add	r3, r1
 8001f36:	330c      	adds	r3, #12
 8001f38:	781b      	ldrb	r3, [r3, #0]
 8001f3a:	b2db      	uxtb	r3, r3
 8001f3c:	2b02      	cmp	r3, #2
 8001f3e:	d103      	bne.n	8001f48 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8001f40:	79fb      	ldrb	r3, [r7, #7]
 8001f42:	4618      	mov	r0, r3
 8001f44:	f7ff ff66 	bl	8001e14 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001f48:	f3ef 8310 	mrs	r3, PRIMASK
 8001f4c:	60fb      	str	r3, [r7, #12]
  return(result);
 8001f4e:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001f50:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001f52:	b672      	cpsid	i
}
 8001f54:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001f56:	2003      	movs	r0, #3
 8001f58:	f001 f9cd 	bl	80032f6 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001f5c:	4b2f      	ldr	r3, [pc, #188]	; (800201c <HW_TS_Start+0x100>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	22ca      	movs	r2, #202	; 0xca
 8001f62:	625a      	str	r2, [r3, #36]	; 0x24
 8001f64:	4b2d      	ldr	r3, [pc, #180]	; (800201c <HW_TS_Start+0x100>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	2253      	movs	r2, #83	; 0x53
 8001f6a:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8001f6c:	79fa      	ldrb	r2, [r7, #7]
 8001f6e:	492a      	ldr	r1, [pc, #168]	; (8002018 <HW_TS_Start+0xfc>)
 8001f70:	4613      	mov	r3, r2
 8001f72:	005b      	lsls	r3, r3, #1
 8001f74:	4413      	add	r3, r2
 8001f76:	00db      	lsls	r3, r3, #3
 8001f78:	440b      	add	r3, r1
 8001f7a:	330c      	adds	r3, #12
 8001f7c:	2202      	movs	r2, #2
 8001f7e:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8001f80:	79fa      	ldrb	r2, [r7, #7]
 8001f82:	4925      	ldr	r1, [pc, #148]	; (8002018 <HW_TS_Start+0xfc>)
 8001f84:	4613      	mov	r3, r2
 8001f86:	005b      	lsls	r3, r3, #1
 8001f88:	4413      	add	r3, r2
 8001f8a:	00db      	lsls	r3, r3, #3
 8001f8c:	440b      	add	r3, r1
 8001f8e:	3308      	adds	r3, #8
 8001f90:	683a      	ldr	r2, [r7, #0]
 8001f92:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8001f94:	79fa      	ldrb	r2, [r7, #7]
 8001f96:	4920      	ldr	r1, [pc, #128]	; (8002018 <HW_TS_Start+0xfc>)
 8001f98:	4613      	mov	r3, r2
 8001f9a:	005b      	lsls	r3, r3, #1
 8001f9c:	4413      	add	r3, r2
 8001f9e:	00db      	lsls	r3, r3, #3
 8001fa0:	440b      	add	r3, r1
 8001fa2:	3304      	adds	r3, #4
 8001fa4:	683a      	ldr	r2, [r7, #0]
 8001fa6:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8001fa8:	79fb      	ldrb	r3, [r7, #7]
 8001faa:	4618      	mov	r0, r3
 8001fac:	f7ff fb30 	bl	8001610 <linkTimer>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8001fb4:	4b1a      	ldr	r3, [pc, #104]	; (8002020 <HW_TS_Start+0x104>)
 8001fb6:	781b      	ldrb	r3, [r3, #0]
 8001fb8:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001fba:	4b1a      	ldr	r3, [pc, #104]	; (8002024 <HW_TS_Start+0x108>)
 8001fbc:	781b      	ldrb	r3, [r3, #0]
 8001fbe:	b2db      	uxtb	r3, r3
 8001fc0:	7c7a      	ldrb	r2, [r7, #17]
 8001fc2:	429a      	cmp	r2, r3
 8001fc4:	d002      	beq.n	8001fcc <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 8001fc6:	f7ff fce9 	bl	800199c <RescheduleTimerList>
 8001fca:	e013      	b.n	8001ff4 <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8001fcc:	79fa      	ldrb	r2, [r7, #7]
 8001fce:	4912      	ldr	r1, [pc, #72]	; (8002018 <HW_TS_Start+0xfc>)
 8001fd0:	4613      	mov	r3, r2
 8001fd2:	005b      	lsls	r3, r3, #1
 8001fd4:	4413      	add	r3, r2
 8001fd6:	00db      	lsls	r3, r3, #3
 8001fd8:	440b      	add	r3, r1
 8001fda:	3308      	adds	r3, #8
 8001fdc:	6819      	ldr	r1, [r3, #0]
 8001fde:	8a7b      	ldrh	r3, [r7, #18]
 8001fe0:	79fa      	ldrb	r2, [r7, #7]
 8001fe2:	1ac9      	subs	r1, r1, r3
 8001fe4:	480c      	ldr	r0, [pc, #48]	; (8002018 <HW_TS_Start+0xfc>)
 8001fe6:	4613      	mov	r3, r2
 8001fe8:	005b      	lsls	r3, r3, #1
 8001fea:	4413      	add	r3, r2
 8001fec:	00db      	lsls	r3, r3, #3
 8001fee:	4403      	add	r3, r0
 8001ff0:	3308      	adds	r3, #8
 8001ff2:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001ff4:	4b09      	ldr	r3, [pc, #36]	; (800201c <HW_TS_Start+0x100>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	22ff      	movs	r2, #255	; 0xff
 8001ffa:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001ffc:	2003      	movs	r0, #3
 8001ffe:	f001 f96c 	bl	80032da <HAL_NVIC_EnableIRQ>
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002006:	68bb      	ldr	r3, [r7, #8]
 8002008:	f383 8810 	msr	PRIMASK, r3
}
 800200c:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 800200e:	bf00      	nop
}
 8002010:	3718      	adds	r7, #24
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	20000978 	.word	0x20000978
 800201c:	20000ae0 	.word	0x20000ae0
 8002020:	20000a08 	.word	0x20000a08
 8002024:	20000a09 	.word	0x20000a09

08002028 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b084      	sub	sp, #16
 800202c:	af00      	add	r7, sp, #0
 800202e:	60f8      	str	r0, [r7, #12]
 8002030:	460b      	mov	r3, r1
 8002032:	607a      	str	r2, [r7, #4]
 8002034:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	4798      	blx	r3

  return;
 800203a:	bf00      	nop
}
 800203c:	3710      	adds	r7, #16
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}

08002042 <LL_RCC_LSE_SetDriveCapability>:
{
 8002042:	b480      	push	{r7}
 8002044:	b083      	sub	sp, #12
 8002046:	af00      	add	r7, sp, #0
 8002048:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 800204a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800204e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002052:	f023 0218 	bic.w	r2, r3, #24
 8002056:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	4313      	orrs	r3, r2
 800205e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002062:	bf00      	nop
 8002064:	370c      	adds	r7, #12
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr

0800206e <LL_AHB1_GRP1_EnableClock>:
{
 800206e:	b480      	push	{r7}
 8002070:	b085      	sub	sp, #20
 8002072:	af00      	add	r7, sp, #0
 8002074:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8002076:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800207a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800207c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	4313      	orrs	r3, r2
 8002084:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8002086:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800208a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	4013      	ands	r3, r2
 8002090:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002092:	68fb      	ldr	r3, [r7, #12]
}
 8002094:	bf00      	nop
 8002096:	3714      	adds	r7, #20
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr

080020a0 <LL_AHB2_GRP1_EnableClock>:
{
 80020a0:	b480      	push	{r7}
 80020a2:	b085      	sub	sp, #20
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80020a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020ac:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80020ae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	4313      	orrs	r3, r2
 80020b6:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80020b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020bc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	4013      	ands	r3, r2
 80020c2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80020c4:	68fb      	ldr	r3, [r7, #12]
}
 80020c6:	bf00      	nop
 80020c8:	3714      	adds	r7, #20
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr
	...

080020d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80020d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020d6:	b0bf      	sub	sp, #252	; 0xfc
 80020d8:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80020da:	f000 ff17 	bl	8002f0c <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 80020de:	f7fe ffd3 	bl	8001088 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80020e2:	f000 f8d3 	bl	800228c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80020e6:	f000 f933 	bl	8002350 <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 80020ea:	f000 f991 	bl	8002410 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80020ee:	f000 fab1 	bl	8002654 <MX_GPIO_Init>
  MX_DMA_Init();
 80020f2:	f000 fa95 	bl	8002620 <MX_DMA_Init>
  MX_RTC_Init();
 80020f6:	f000 f9d3 	bl	80024a0 <MX_RTC_Init>
  MX_I2C1_Init();
 80020fa:	f000 f949 	bl	8002390 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80020fe:	f000 fa41 	bl	8002584 <MX_USART1_UART_Init>
  MX_LPTIM1_Init();
 8002102:	f000 f999 	bl	8002438 <MX_LPTIM1_Init>
  MX_SPI1_Init();
 8002106:	f000 f9ff 	bl	8002508 <MX_SPI1_Init>
  MX_RF_Init();
 800210a:	f000 f9c1 	bl	8002490 <MX_RF_Init>
  /* USER CODE BEGIN 2 */

  /* Set up heart rate sensor */
  uint8_t status;									//see BH1780GLC.h for err codes

  printf("Configuring PPG sensor...");
 800210e:	4851      	ldr	r0, [pc, #324]	; (8002254 <main+0x180>)
 8002110:	f00a f824 	bl	800c15c <iprintf>
  HAL_Delay(10);									//wait as a precaution
 8002114:	200a      	movs	r0, #10
 8002116:	f7ff f92c 	bl	8001372 <HAL_Delay>
  status = BH1790GLC_init(&hrm, &hi2c1);			//configure sensor
 800211a:	494f      	ldr	r1, [pc, #316]	; (8002258 <main+0x184>)
 800211c:	484f      	ldr	r0, [pc, #316]	; (800225c <main+0x188>)
 800211e:	f7fe fa09 	bl	8000534 <BH1790GLC_init>
 8002122:	4603      	mov	r3, r0
 8002124:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  if(status != 0){
 8002128:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 800212c:	2b00      	cmp	r3, #0
 800212e:	d009      	beq.n	8002144 <main+0x70>
	  printf("Error configuring sensor. Status code: %d\n\r", status);
 8002130:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 8002134:	4619      	mov	r1, r3
 8002136:	484a      	ldr	r0, [pc, #296]	; (8002260 <main+0x18c>)
 8002138:	f00a f810 	bl	800c15c <iprintf>
	  sensorReady = 0;
 800213c:	4b49      	ldr	r3, [pc, #292]	; (8002264 <main+0x190>)
 800213e:	2200      	movs	r2, #0
 8002140:	701a      	strb	r2, [r3, #0]
 8002142:	e008      	b.n	8002156 <main+0x82>
  }else{
	  printf("Sensor configured successfully. Status code: %d\n\r", status);
 8002144:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 8002148:	4619      	mov	r1, r3
 800214a:	4847      	ldr	r0, [pc, #284]	; (8002268 <main+0x194>)
 800214c:	f00a f806 	bl	800c15c <iprintf>
	  sensorReady = 1;
 8002150:	4b44      	ldr	r3, [pc, #272]	; (8002264 <main+0x190>)
 8002152:	2201      	movs	r2, #1
 8002154:	701a      	strb	r2, [r3, #0]
  }

  /* Set up timer */
  if(HAL_LPTIM_TimeOut_Start_IT(&hlptim1, PERIOD, TIMEOUT) != HAL_OK){  //pointer to the handler, period, timeout val to start the timer
 8002156:	2200      	movs	r2, #0
 8002158:	f44f 6183 	mov.w	r1, #1048	; 0x418
 800215c:	4843      	ldr	r0, [pc, #268]	; (800226c <main+0x198>)
 800215e:	f002 fd49 	bl	8004bf4 <HAL_LPTIM_TimeOut_Start_IT>
 8002162:	4603      	mov	r3, r0
 8002164:	2b00      	cmp	r3, #0
 8002166:	d001      	beq.n	800216c <main+0x98>
	  Error_Handler();
 8002168:	f000 faf0 	bl	800274c <Error_Handler>
  }

  /* Set up IMU */
  printf("Configuring IMU...");
 800216c:	4840      	ldr	r0, [pc, #256]	; (8002270 <main+0x19c>)
 800216e:	f009 fff5 	bl	800c15c <iprintf>
  HAL_Delay(10);
 8002172:	200a      	movs	r0, #10
 8002174:	f7ff f8fd 	bl	8001372 <HAL_Delay>
  ICM_SelectBank(&imu, USER_BANK_0);
 8002178:	2100      	movs	r1, #0
 800217a:	483e      	ldr	r0, [pc, #248]	; (8002274 <main+0x1a0>)
 800217c:	f7fe fd70 	bl	8000c60 <ICM_SelectBank>
  HAL_Delay(10);
 8002180:	200a      	movs	r0, #10
 8002182:	f7ff f8f6 	bl	8001372 <HAL_Delay>
  ICM_PowerOn(&imu, &hspi1);
 8002186:	493c      	ldr	r1, [pc, #240]	; (8002278 <main+0x1a4>)
 8002188:	483a      	ldr	r0, [pc, #232]	; (8002274 <main+0x1a0>)
 800218a:	f7fe fc29 	bl	80009e0 <ICM_PowerOn>
  HAL_Delay(10);
 800218e:	200a      	movs	r0, #10
 8002190:	f7ff f8ef 	bl	8001372 <HAL_Delay>


  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 8002194:	f7fe ff86 	bl	80010a4 <MX_APPE_Init>
  /* USER CODE BEGIN WHILE */
  // TO DO: FIGURE OUT IF THIS IS A GOOD IDEA... HAL_PWREx_EnterSTOP1Mode(PWR_STOPENTRY_WFI);	//enter low power mode
  while (1)
  {
    /* USER CODE END WHILE */
    MX_APPE_Process();
 8002198:	f7ff f910 	bl	80013bc <MX_APPE_Process>

    /* USER CODE BEGIN 3 */

    if(sensorReady){
 800219c:	4b31      	ldr	r3, [pc, #196]	; (8002264 <main+0x190>)
 800219e:	781b      	ldrb	r3, [r3, #0]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d019      	beq.n	80021d8 <main+0x104>
    	sensorReady = BUSY;		//flag set back to READY in interrupt every 32 ms
 80021a4:	4b2f      	ldr	r3, [pc, #188]	; (8002264 <main+0x190>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	701a      	strb	r2, [r3, #0]

        uint8_t err;

        err = get_val(&hrm);
 80021aa:	482c      	ldr	r0, [pc, #176]	; (800225c <main+0x188>)
 80021ac:	f7fe fa2d 	bl	800060a <get_val>
 80021b0:	4603      	mov	r3, r0
 80021b2:	f887 30d6 	strb.w	r3, [r7, #214]	; 0xd6
        if(err != 0){
 80021b6:	f897 30d6 	ldrb.w	r3, [r7, #214]	; 0xd6
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d006      	beq.n	80021cc <main+0xf8>
        	printf("Could not read sensor. Error code: %d\n\r", err);
 80021be:	f897 30d6 	ldrb.w	r3, [r7, #214]	; 0xd6
 80021c2:	4619      	mov	r1, r3
 80021c4:	482d      	ldr	r0, [pc, #180]	; (800227c <main+0x1a8>)
 80021c6:	f009 ffc9 	bl	800c15c <iprintf>
 80021ca:	e005      	b.n	80021d8 <main+0x104>
        }else{
        	//printf("ppg_data[0]: %d, ppg_data[1]: %d\n\r", hrm.ppg_data[0], hrm.ppg_data[1]);
    		printf("ppg_data[1]: %d\n\r", hrm.ppg_data[1]);
 80021cc:	4b23      	ldr	r3, [pc, #140]	; (800225c <main+0x188>)
 80021ce:	88db      	ldrh	r3, [r3, #6]
 80021d0:	4619      	mov	r1, r3
 80021d2:	482b      	ldr	r0, [pc, #172]	; (8002280 <main+0x1ac>)
 80021d4:	f009 ffc2 	bl	800c15c <iprintf>
    }else{
    	//not ready
    }

	// Select User Bank 0
	ICM_SelectBank(&imu, USER_BANK_0);
 80021d8:	2100      	movs	r1, #0
 80021da:	4826      	ldr	r0, [pc, #152]	; (8002274 <main+0x1a0>)
 80021dc:	f7fe fd40 	bl	8000c60 <ICM_SelectBank>
	HAL_Delay(10);
 80021e0:	200a      	movs	r0, #10
 80021e2:	f7ff f8c6 	bl	8001372 <HAL_Delay>

	// Obtain accelerometer and gyro data
	ICM_ReadAccelGyroData(&imu);
 80021e6:	4823      	ldr	r0, [pc, #140]	; (8002274 <main+0x1a0>)
 80021e8:	f7fe fcc0 	bl	8000b6c <ICM_ReadAccelGyroData>

	// Obtain magnetometer data
	ICM_ReadMagData(&imu, imu.mag_data);
 80021ec:	4925      	ldr	r1, [pc, #148]	; (8002284 <main+0x1b0>)
 80021ee:	4821      	ldr	r0, [pc, #132]	; (8002274 <main+0x1a0>)
 80021f0:	f7fe fba1 	bl	8000936 <ICM_ReadMagData>
	sprintf(uart_buffer,
			"(Ax: %u | Ay: %u | Az: %u)   "
			"(Gx: %u | Gy: %u | Gz: %u)   "
			"(Mx: %i | My: %i | Mz: %i)"
			" \r\n",
			imu.accel_data[0], imu.accel_data[1], imu.accel_data[2],
 80021f4:	4b1f      	ldr	r3, [pc, #124]	; (8002274 <main+0x1a0>)
 80021f6:	889b      	ldrh	r3, [r3, #4]
	sprintf(uart_buffer,
 80021f8:	469c      	mov	ip, r3
			imu.accel_data[0], imu.accel_data[1], imu.accel_data[2],
 80021fa:	4b1e      	ldr	r3, [pc, #120]	; (8002274 <main+0x1a0>)
 80021fc:	88db      	ldrh	r3, [r3, #6]
	sprintf(uart_buffer,
 80021fe:	469e      	mov	lr, r3
			imu.accel_data[0], imu.accel_data[1], imu.accel_data[2],
 8002200:	4b1c      	ldr	r3, [pc, #112]	; (8002274 <main+0x1a0>)
 8002202:	891b      	ldrh	r3, [r3, #8]
	sprintf(uart_buffer,
 8002204:	461a      	mov	r2, r3
			imu.gyro_data[0], imu.gyro_data[1], imu.gyro_data[2],
 8002206:	4b1b      	ldr	r3, [pc, #108]	; (8002274 <main+0x1a0>)
 8002208:	895b      	ldrh	r3, [r3, #10]
	sprintf(uart_buffer,
 800220a:	4619      	mov	r1, r3
			imu.gyro_data[0], imu.gyro_data[1], imu.gyro_data[2],
 800220c:	4b19      	ldr	r3, [pc, #100]	; (8002274 <main+0x1a0>)
 800220e:	899b      	ldrh	r3, [r3, #12]
	sprintf(uart_buffer,
 8002210:	461c      	mov	r4, r3
			imu.gyro_data[0], imu.gyro_data[1], imu.gyro_data[2],
 8002212:	4b18      	ldr	r3, [pc, #96]	; (8002274 <main+0x1a0>)
 8002214:	89db      	ldrh	r3, [r3, #14]
	sprintf(uart_buffer,
 8002216:	461d      	mov	r5, r3
			imu.mag_data[0], imu.mag_data[1], imu.mag_data[2]);
 8002218:	4b16      	ldr	r3, [pc, #88]	; (8002274 <main+0x1a0>)
 800221a:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
	sprintf(uart_buffer,
 800221e:	461e      	mov	r6, r3
			imu.mag_data[0], imu.mag_data[1], imu.mag_data[2]);
 8002220:	4b14      	ldr	r3, [pc, #80]	; (8002274 <main+0x1a0>)
 8002222:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
	sprintf(uart_buffer,
 8002226:	607b      	str	r3, [r7, #4]
			imu.mag_data[0], imu.mag_data[1], imu.mag_data[2]);
 8002228:	4b12      	ldr	r3, [pc, #72]	; (8002274 <main+0x1a0>)
 800222a:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
	sprintf(uart_buffer,
 800222e:	f107 000c 	add.w	r0, r7, #12
 8002232:	9306      	str	r3, [sp, #24]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	9305      	str	r3, [sp, #20]
 8002238:	9604      	str	r6, [sp, #16]
 800223a:	9503      	str	r5, [sp, #12]
 800223c:	9402      	str	r4, [sp, #8]
 800223e:	9101      	str	r1, [sp, #4]
 8002240:	9200      	str	r2, [sp, #0]
 8002242:	4673      	mov	r3, lr
 8002244:	4662      	mov	r2, ip
 8002246:	4910      	ldr	r1, [pc, #64]	; (8002288 <main+0x1b4>)
 8002248:	f009 ffa0 	bl	800c18c <siprintf>
	//HAL_UART_Transmit(&huart1, (uint8_t*) uart_buffer, strlen(uart_buffer), 1000);
	HAL_Delay(5);
 800224c:	2005      	movs	r0, #5
 800224e:	f7ff f890 	bl	8001372 <HAL_Delay>
    MX_APPE_Process();
 8002252:	e7a1      	b.n	8002198 <main+0xc4>
 8002254:	0800d448 	.word	0x0800d448
 8002258:	20000a18 	.word	0x20000a18
 800225c:	20000cbc 	.word	0x20000cbc
 8002260:	0800d464 	.word	0x0800d464
 8002264:	20000cdc 	.word	0x20000cdc
 8002268:	0800d490 	.word	0x0800d490
 800226c:	20000aa8 	.word	0x20000aa8
 8002270:	0800d4c4 	.word	0x0800d4c4
 8002274:	20000cc4 	.word	0x20000cc4
 8002278:	20000b04 	.word	0x20000b04
 800227c:	0800d4d8 	.word	0x0800d4d8
 8002280:	0800d500 	.word	0x0800d500
 8002284:	20000cd4 	.word	0x20000cd4
 8002288:	0800d514 	.word	0x0800d514

0800228c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b09a      	sub	sp, #104	; 0x68
 8002290:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002292:	f107 0320 	add.w	r3, r7, #32
 8002296:	2248      	movs	r2, #72	; 0x48
 8002298:	2100      	movs	r1, #0
 800229a:	4618      	mov	r0, r3
 800229c:	f009 ff56 	bl	800c14c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80022a0:	1d3b      	adds	r3, r7, #4
 80022a2:	2200      	movs	r2, #0
 80022a4:	601a      	str	r2, [r3, #0]
 80022a6:	605a      	str	r2, [r3, #4]
 80022a8:	609a      	str	r2, [r3, #8]
 80022aa:	60da      	str	r2, [r3, #12]
 80022ac:	611a      	str	r2, [r3, #16]
 80022ae:	615a      	str	r2, [r3, #20]
 80022b0:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80022b2:	f002 ff13 	bl	80050dc <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 80022b6:	2010      	movs	r0, #16
 80022b8:	f7ff fec3 	bl	8002042 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80022bc:	4b23      	ldr	r3, [pc, #140]	; (800234c <SystemClock_Config+0xc0>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80022c4:	4a21      	ldr	r2, [pc, #132]	; (800234c <SystemClock_Config+0xc0>)
 80022c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022ca:	6013      	str	r3, [r2, #0]
 80022cc:	4b1f      	ldr	r3, [pc, #124]	; (800234c <SystemClock_Config+0xc0>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80022d4:	603b      	str	r3, [r7, #0]
 80022d6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 80022d8:	2327      	movs	r3, #39	; 0x27
 80022da:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80022dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80022e0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80022e2:	2301      	movs	r3, #1
 80022e4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80022e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80022ec:	2301      	movs	r3, #1
 80022ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80022f0:	2340      	movs	r3, #64	; 0x40
 80022f2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80022f4:	2300      	movs	r3, #0
 80022f6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 80022f8:	23a0      	movs	r3, #160	; 0xa0
 80022fa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80022fc:	2300      	movs	r3, #0
 80022fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002300:	f107 0320 	add.w	r3, r7, #32
 8002304:	4618      	mov	r0, r3
 8002306:	f003 fa7d 	bl	8005804 <HAL_RCC_OscConfig>
 800230a:	4603      	mov	r3, r0
 800230c:	2b00      	cmp	r3, #0
 800230e:	d001      	beq.n	8002314 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8002310:	f000 fa1c 	bl	800274c <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8002314:	236f      	movs	r3, #111	; 0x6f
 8002316:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8002318:	2300      	movs	r3, #0
 800231a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800231c:	2300      	movs	r3, #0
 800231e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002320:	2300      	movs	r3, #0
 8002322:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002324:	2300      	movs	r3, #0
 8002326:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8002328:	2300      	movs	r3, #0
 800232a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 800232c:	2300      	movs	r3, #0
 800232e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002330:	1d3b      	adds	r3, r7, #4
 8002332:	2101      	movs	r1, #1
 8002334:	4618      	mov	r0, r3
 8002336:	f003 fdd9 	bl	8005eec <HAL_RCC_ClockConfig>
 800233a:	4603      	mov	r3, r0
 800233c:	2b00      	cmp	r3, #0
 800233e:	d001      	beq.n	8002344 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8002340:	f000 fa04 	bl	800274c <Error_Handler>
  }
}
 8002344:	bf00      	nop
 8002346:	3768      	adds	r7, #104	; 0x68
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}
 800234c:	58000400 	.word	0x58000400

08002350 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b094      	sub	sp, #80	; 0x50
 8002354:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002356:	463b      	mov	r3, r7
 8002358:	2250      	movs	r2, #80	; 0x50
 800235a:	2100      	movs	r1, #0
 800235c:	4618      	mov	r0, r3
 800235e:	f009 fef5 	bl	800c14c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 8002362:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002366:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 8002368:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800236c:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 800236e:	2300      	movs	r3, #0
 8002370:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8002372:	2300      	movs	r3, #0
 8002374:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002376:	463b      	mov	r3, r7
 8002378:	4618      	mov	r0, r3
 800237a:	f004 f9f4 	bl	8006766 <HAL_RCCEx_PeriphCLKConfig>
 800237e:	4603      	mov	r3, r0
 8002380:	2b00      	cmp	r3, #0
 8002382:	d001      	beq.n	8002388 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8002384:	f000 f9e2 	bl	800274c <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8002388:	bf00      	nop
 800238a:	3750      	adds	r7, #80	; 0x50
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}

08002390 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002394:	4b1b      	ldr	r3, [pc, #108]	; (8002404 <MX_I2C1_Init+0x74>)
 8002396:	4a1c      	ldr	r2, [pc, #112]	; (8002408 <MX_I2C1_Init+0x78>)
 8002398:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 800239a:	4b1a      	ldr	r3, [pc, #104]	; (8002404 <MX_I2C1_Init+0x74>)
 800239c:	4a1b      	ldr	r2, [pc, #108]	; (800240c <MX_I2C1_Init+0x7c>)
 800239e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80023a0:	4b18      	ldr	r3, [pc, #96]	; (8002404 <MX_I2C1_Init+0x74>)
 80023a2:	2200      	movs	r2, #0
 80023a4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80023a6:	4b17      	ldr	r3, [pc, #92]	; (8002404 <MX_I2C1_Init+0x74>)
 80023a8:	2201      	movs	r2, #1
 80023aa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80023ac:	4b15      	ldr	r3, [pc, #84]	; (8002404 <MX_I2C1_Init+0x74>)
 80023ae:	2200      	movs	r2, #0
 80023b0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80023b2:	4b14      	ldr	r3, [pc, #80]	; (8002404 <MX_I2C1_Init+0x74>)
 80023b4:	2200      	movs	r2, #0
 80023b6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80023b8:	4b12      	ldr	r3, [pc, #72]	; (8002404 <MX_I2C1_Init+0x74>)
 80023ba:	2200      	movs	r2, #0
 80023bc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80023be:	4b11      	ldr	r3, [pc, #68]	; (8002404 <MX_I2C1_Init+0x74>)
 80023c0:	2200      	movs	r2, #0
 80023c2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80023c4:	4b0f      	ldr	r3, [pc, #60]	; (8002404 <MX_I2C1_Init+0x74>)
 80023c6:	2200      	movs	r2, #0
 80023c8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80023ca:	480e      	ldr	r0, [pc, #56]	; (8002404 <MX_I2C1_Init+0x74>)
 80023cc:	f001 fc4a 	bl	8003c64 <HAL_I2C_Init>
 80023d0:	4603      	mov	r3, r0
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d001      	beq.n	80023da <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80023d6:	f000 f9b9 	bl	800274c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80023da:	2100      	movs	r1, #0
 80023dc:	4809      	ldr	r0, [pc, #36]	; (8002404 <MX_I2C1_Init+0x74>)
 80023de:	f002 f9d1 	bl	8004784 <HAL_I2CEx_ConfigAnalogFilter>
 80023e2:	4603      	mov	r3, r0
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d001      	beq.n	80023ec <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80023e8:	f000 f9b0 	bl	800274c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80023ec:	2100      	movs	r1, #0
 80023ee:	4805      	ldr	r0, [pc, #20]	; (8002404 <MX_I2C1_Init+0x74>)
 80023f0:	f002 fa13 	bl	800481a <HAL_I2CEx_ConfigDigitalFilter>
 80023f4:	4603      	mov	r3, r0
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d001      	beq.n	80023fe <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80023fa:	f000 f9a7 	bl	800274c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80023fe:	bf00      	nop
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	20000a18 	.word	0x20000a18
 8002408:	40005400 	.word	0x40005400
 800240c:	00707cbb 	.word	0x00707cbb

08002410 <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8002414:	4b06      	ldr	r3, [pc, #24]	; (8002430 <MX_IPCC_Init+0x20>)
 8002416:	4a07      	ldr	r2, [pc, #28]	; (8002434 <MX_IPCC_Init+0x24>)
 8002418:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 800241a:	4805      	ldr	r0, [pc, #20]	; (8002430 <MX_IPCC_Init+0x20>)
 800241c:	f002 fa4a 	bl	80048b4 <HAL_IPCC_Init>
 8002420:	4603      	mov	r3, r0
 8002422:	2b00      	cmp	r3, #0
 8002424:	d001      	beq.n	800242a <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 8002426:	f000 f991 	bl	800274c <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 800242a:	bf00      	nop
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	20000a6c 	.word	0x20000a6c
 8002434:	58000c00 	.word	0x58000c00

08002438 <MX_LPTIM1_Init>:
  * @brief LPTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM1_Init(void)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 800243c:	4b12      	ldr	r3, [pc, #72]	; (8002488 <MX_LPTIM1_Init+0x50>)
 800243e:	4a13      	ldr	r2, [pc, #76]	; (800248c <MX_LPTIM1_Init+0x54>)
 8002440:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8002442:	4b11      	ldr	r3, [pc, #68]	; (8002488 <MX_LPTIM1_Init+0x50>)
 8002444:	2200      	movs	r2, #0
 8002446:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 8002448:	4b0f      	ldr	r3, [pc, #60]	; (8002488 <MX_LPTIM1_Init+0x50>)
 800244a:	2200      	movs	r2, #0
 800244c:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 800244e:	4b0e      	ldr	r3, [pc, #56]	; (8002488 <MX_LPTIM1_Init+0x50>)
 8002450:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002454:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8002456:	4b0c      	ldr	r3, [pc, #48]	; (8002488 <MX_LPTIM1_Init+0x50>)
 8002458:	2200      	movs	r2, #0
 800245a:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 800245c:	4b0a      	ldr	r3, [pc, #40]	; (8002488 <MX_LPTIM1_Init+0x50>)
 800245e:	2200      	movs	r2, #0
 8002460:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 8002462:	4b09      	ldr	r3, [pc, #36]	; (8002488 <MX_LPTIM1_Init+0x50>)
 8002464:	2200      	movs	r2, #0
 8002466:	629a      	str	r2, [r3, #40]	; 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8002468:	4b07      	ldr	r3, [pc, #28]	; (8002488 <MX_LPTIM1_Init+0x50>)
 800246a:	2200      	movs	r2, #0
 800246c:	62da      	str	r2, [r3, #44]	; 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 800246e:	4b06      	ldr	r3, [pc, #24]	; (8002488 <MX_LPTIM1_Init+0x50>)
 8002470:	2200      	movs	r2, #0
 8002472:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 8002474:	4804      	ldr	r0, [pc, #16]	; (8002488 <MX_LPTIM1_Init+0x50>)
 8002476:	f002 fb1b 	bl	8004ab0 <HAL_LPTIM_Init>
 800247a:	4603      	mov	r3, r0
 800247c:	2b00      	cmp	r3, #0
 800247e:	d001      	beq.n	8002484 <MX_LPTIM1_Init+0x4c>
  {
    Error_Handler();
 8002480:	f000 f964 	bl	800274c <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 8002484:	bf00      	nop
 8002486:	bd80      	pop	{r7, pc}
 8002488:	20000aa8 	.word	0x20000aa8
 800248c:	40007c00 	.word	0x40007c00

08002490 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8002490:	b480      	push	{r7}
 8002492:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8002494:	bf00      	nop
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr
	...

080024a0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80024a4:	4b16      	ldr	r3, [pc, #88]	; (8002500 <MX_RTC_Init+0x60>)
 80024a6:	4a17      	ldr	r2, [pc, #92]	; (8002504 <MX_RTC_Init+0x64>)
 80024a8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80024aa:	4b15      	ldr	r3, [pc, #84]	; (8002500 <MX_RTC_Init+0x60>)
 80024ac:	2200      	movs	r2, #0
 80024ae:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 80024b0:	4b13      	ldr	r3, [pc, #76]	; (8002500 <MX_RTC_Init+0x60>)
 80024b2:	220f      	movs	r2, #15
 80024b4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 80024b6:	4b12      	ldr	r3, [pc, #72]	; (8002500 <MX_RTC_Init+0x60>)
 80024b8:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80024bc:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80024be:	4b10      	ldr	r3, [pc, #64]	; (8002500 <MX_RTC_Init+0x60>)
 80024c0:	2200      	movs	r2, #0
 80024c2:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80024c4:	4b0e      	ldr	r3, [pc, #56]	; (8002500 <MX_RTC_Init+0x60>)
 80024c6:	2200      	movs	r2, #0
 80024c8:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80024ca:	4b0d      	ldr	r3, [pc, #52]	; (8002500 <MX_RTC_Init+0x60>)
 80024cc:	2200      	movs	r2, #0
 80024ce:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80024d0:	4b0b      	ldr	r3, [pc, #44]	; (8002500 <MX_RTC_Init+0x60>)
 80024d2:	2200      	movs	r2, #0
 80024d4:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80024d6:	480a      	ldr	r0, [pc, #40]	; (8002500 <MX_RTC_Init+0x60>)
 80024d8:	f004 fbcc 	bl	8006c74 <HAL_RTC_Init>
 80024dc:	4603      	mov	r3, r0
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d001      	beq.n	80024e6 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 80024e2:	f000 f933 	bl	800274c <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 80024e6:	2200      	movs	r2, #0
 80024e8:	2100      	movs	r1, #0
 80024ea:	4805      	ldr	r0, [pc, #20]	; (8002500 <MX_RTC_Init+0x60>)
 80024ec:	f004 fcc2 	bl	8006e74 <HAL_RTCEx_SetWakeUpTimer_IT>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d001      	beq.n	80024fa <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 80024f6:	f000 f929 	bl	800274c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80024fa:	bf00      	nop
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	20000ae0 	.word	0x20000ae0
 8002504:	40002800 	.word	0x40002800

08002508 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800250c:	4b1b      	ldr	r3, [pc, #108]	; (800257c <MX_SPI1_Init+0x74>)
 800250e:	4a1c      	ldr	r2, [pc, #112]	; (8002580 <MX_SPI1_Init+0x78>)
 8002510:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002512:	4b1a      	ldr	r3, [pc, #104]	; (800257c <MX_SPI1_Init+0x74>)
 8002514:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002518:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800251a:	4b18      	ldr	r3, [pc, #96]	; (800257c <MX_SPI1_Init+0x74>)
 800251c:	2200      	movs	r2, #0
 800251e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002520:	4b16      	ldr	r3, [pc, #88]	; (800257c <MX_SPI1_Init+0x74>)
 8002522:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002526:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002528:	4b14      	ldr	r3, [pc, #80]	; (800257c <MX_SPI1_Init+0x74>)
 800252a:	2200      	movs	r2, #0
 800252c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800252e:	4b13      	ldr	r3, [pc, #76]	; (800257c <MX_SPI1_Init+0x74>)
 8002530:	2201      	movs	r2, #1
 8002532:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002534:	4b11      	ldr	r3, [pc, #68]	; (800257c <MX_SPI1_Init+0x74>)
 8002536:	f44f 7200 	mov.w	r2, #512	; 0x200
 800253a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800253c:	4b0f      	ldr	r3, [pc, #60]	; (800257c <MX_SPI1_Init+0x74>)
 800253e:	2210      	movs	r2, #16
 8002540:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002542:	4b0e      	ldr	r3, [pc, #56]	; (800257c <MX_SPI1_Init+0x74>)
 8002544:	2200      	movs	r2, #0
 8002546:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002548:	4b0c      	ldr	r3, [pc, #48]	; (800257c <MX_SPI1_Init+0x74>)
 800254a:	2200      	movs	r2, #0
 800254c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800254e:	4b0b      	ldr	r3, [pc, #44]	; (800257c <MX_SPI1_Init+0x74>)
 8002550:	2200      	movs	r2, #0
 8002552:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002554:	4b09      	ldr	r3, [pc, #36]	; (800257c <MX_SPI1_Init+0x74>)
 8002556:	2207      	movs	r2, #7
 8002558:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800255a:	4b08      	ldr	r3, [pc, #32]	; (800257c <MX_SPI1_Init+0x74>)
 800255c:	2200      	movs	r2, #0
 800255e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002560:	4b06      	ldr	r3, [pc, #24]	; (800257c <MX_SPI1_Init+0x74>)
 8002562:	2200      	movs	r2, #0
 8002564:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002566:	4805      	ldr	r0, [pc, #20]	; (800257c <MX_SPI1_Init+0x74>)
 8002568:	f004 fd40 	bl	8006fec <HAL_SPI_Init>
 800256c:	4603      	mov	r3, r0
 800256e:	2b00      	cmp	r3, #0
 8002570:	d001      	beq.n	8002576 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002572:	f000 f8eb 	bl	800274c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002576:	bf00      	nop
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	20000b04 	.word	0x20000b04
 8002580:	40013000 	.word	0x40013000

08002584 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002588:	4b23      	ldr	r3, [pc, #140]	; (8002618 <MX_USART1_UART_Init+0x94>)
 800258a:	4a24      	ldr	r2, [pc, #144]	; (800261c <MX_USART1_UART_Init+0x98>)
 800258c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800258e:	4b22      	ldr	r3, [pc, #136]	; (8002618 <MX_USART1_UART_Init+0x94>)
 8002590:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002594:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002596:	4b20      	ldr	r3, [pc, #128]	; (8002618 <MX_USART1_UART_Init+0x94>)
 8002598:	2200      	movs	r2, #0
 800259a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800259c:	4b1e      	ldr	r3, [pc, #120]	; (8002618 <MX_USART1_UART_Init+0x94>)
 800259e:	2200      	movs	r2, #0
 80025a0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_ODD;
 80025a2:	4b1d      	ldr	r3, [pc, #116]	; (8002618 <MX_USART1_UART_Init+0x94>)
 80025a4:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80025a8:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80025aa:	4b1b      	ldr	r3, [pc, #108]	; (8002618 <MX_USART1_UART_Init+0x94>)
 80025ac:	220c      	movs	r2, #12
 80025ae:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025b0:	4b19      	ldr	r3, [pc, #100]	; (8002618 <MX_USART1_UART_Init+0x94>)
 80025b2:	2200      	movs	r2, #0
 80025b4:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80025b6:	4b18      	ldr	r3, [pc, #96]	; (8002618 <MX_USART1_UART_Init+0x94>)
 80025b8:	2200      	movs	r2, #0
 80025ba:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80025bc:	4b16      	ldr	r3, [pc, #88]	; (8002618 <MX_USART1_UART_Init+0x94>)
 80025be:	2200      	movs	r2, #0
 80025c0:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80025c2:	4b15      	ldr	r3, [pc, #84]	; (8002618 <MX_USART1_UART_Init+0x94>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80025c8:	4b13      	ldr	r3, [pc, #76]	; (8002618 <MX_USART1_UART_Init+0x94>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80025ce:	4812      	ldr	r0, [pc, #72]	; (8002618 <MX_USART1_UART_Init+0x94>)
 80025d0:	f005 fdd2 	bl	8008178 <HAL_UART_Init>
 80025d4:	4603      	mov	r3, r0
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d001      	beq.n	80025de <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 80025da:	f000 f8b7 	bl	800274c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80025de:	2100      	movs	r1, #0
 80025e0:	480d      	ldr	r0, [pc, #52]	; (8002618 <MX_USART1_UART_Init+0x94>)
 80025e2:	f006 fb21 	bl	8008c28 <HAL_UARTEx_SetTxFifoThreshold>
 80025e6:	4603      	mov	r3, r0
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d001      	beq.n	80025f0 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 80025ec:	f000 f8ae 	bl	800274c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80025f0:	2100      	movs	r1, #0
 80025f2:	4809      	ldr	r0, [pc, #36]	; (8002618 <MX_USART1_UART_Init+0x94>)
 80025f4:	f006 fb56 	bl	8008ca4 <HAL_UARTEx_SetRxFifoThreshold>
 80025f8:	4603      	mov	r3, r0
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d001      	beq.n	8002602 <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 80025fe:	f000 f8a5 	bl	800274c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002602:	4805      	ldr	r0, [pc, #20]	; (8002618 <MX_USART1_UART_Init+0x94>)
 8002604:	f006 fad7 	bl	8008bb6 <HAL_UARTEx_DisableFifoMode>
 8002608:	4603      	mov	r3, r0
 800260a:	2b00      	cmp	r3, #0
 800260c:	d001      	beq.n	8002612 <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 800260e:	f000 f89d 	bl	800274c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002612:	bf00      	nop
 8002614:	bd80      	pop	{r7, pc}
 8002616:	bf00      	nop
 8002618:	20000c28 	.word	0x20000c28
 800261c:	40013800 	.word	0x40013800

08002620 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8002624:	2004      	movs	r0, #4
 8002626:	f7ff fd22 	bl	800206e <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 800262a:	2001      	movs	r0, #1
 800262c:	f7ff fd1f 	bl	800206e <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002630:	2200      	movs	r2, #0
 8002632:	2100      	movs	r1, #0
 8002634:	200b      	movs	r0, #11
 8002636:	f000 fe36 	bl	80032a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800263a:	200b      	movs	r0, #11
 800263c:	f000 fe4d 	bl	80032da <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8002640:	2200      	movs	r2, #0
 8002642:	2100      	movs	r1, #0
 8002644:	200c      	movs	r0, #12
 8002646:	f000 fe2e 	bl	80032a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800264a:	200c      	movs	r0, #12
 800264c:	f000 fe45 	bl	80032da <HAL_NVIC_EnableIRQ>

}
 8002650:	bf00      	nop
 8002652:	bd80      	pop	{r7, pc}

08002654 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b086      	sub	sp, #24
 8002658:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800265a:	1d3b      	adds	r3, r7, #4
 800265c:	2200      	movs	r2, #0
 800265e:	601a      	str	r2, [r3, #0]
 8002660:	605a      	str	r2, [r3, #4]
 8002662:	609a      	str	r2, [r3, #8]
 8002664:	60da      	str	r2, [r3, #12]
 8002666:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002668:	2004      	movs	r0, #4
 800266a:	f7ff fd19 	bl	80020a0 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800266e:	2002      	movs	r0, #2
 8002670:	f7ff fd16 	bl	80020a0 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002674:	2001      	movs	r0, #1
 8002676:	f7ff fd13 	bl	80020a0 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800267a:	2008      	movs	r0, #8
 800267c:	f7ff fd10 	bl	80020a0 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|GPIO_PIN_3|LD1_Pin, GPIO_PIN_RESET);
 8002680:	2200      	movs	r2, #0
 8002682:	212b      	movs	r1, #43	; 0x2b
 8002684:	481d      	ldr	r0, [pc, #116]	; (80026fc <MX_GPIO_Init+0xa8>)
 8002686:	f001 fab1 	bl	8003bec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800268a:	2310      	movs	r3, #16
 800268c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800268e:	2300      	movs	r3, #0
 8002690:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002692:	2301      	movs	r3, #1
 8002694:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002696:	1d3b      	adds	r3, r7, #4
 8002698:	4619      	mov	r1, r3
 800269a:	4819      	ldr	r0, [pc, #100]	; (8002700 <MX_GPIO_Init+0xac>)
 800269c:	f001 f936 	bl	800390c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin PB3 LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|GPIO_PIN_3|LD1_Pin;
 80026a0:	232b      	movs	r3, #43	; 0x2b
 80026a2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026a4:	2301      	movs	r3, #1
 80026a6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026a8:	2300      	movs	r3, #0
 80026aa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026ac:	2300      	movs	r3, #0
 80026ae:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026b0:	1d3b      	adds	r3, r7, #4
 80026b2:	4619      	mov	r1, r3
 80026b4:	4811      	ldr	r0, [pc, #68]	; (80026fc <MX_GPIO_Init+0xa8>)
 80026b6:	f001 f929 	bl	800390c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80026ba:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80026be:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026c0:	2302      	movs	r3, #2
 80026c2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c4:	2300      	movs	r3, #0
 80026c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026c8:	2300      	movs	r3, #0
 80026ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 80026cc:	230a      	movs	r3, #10
 80026ce:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026d0:	1d3b      	adds	r3, r7, #4
 80026d2:	4619      	mov	r1, r3
 80026d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026d8:	f001 f918 	bl	800390c <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 80026dc:	2303      	movs	r3, #3
 80026de:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80026e0:	2300      	movs	r3, #0
 80026e2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026e4:	2300      	movs	r3, #0
 80026e6:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80026e8:	1d3b      	adds	r3, r7, #4
 80026ea:	4619      	mov	r1, r3
 80026ec:	4805      	ldr	r0, [pc, #20]	; (8002704 <MX_GPIO_Init+0xb0>)
 80026ee:	f001 f90d 	bl	800390c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80026f2:	bf00      	nop
 80026f4:	3718      	adds	r7, #24
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}
 80026fa:	bf00      	nop
 80026fc:	48000400 	.word	0x48000400
 8002700:	48000800 	.word	0x48000800
 8002704:	48000c00 	.word	0x48000c00

08002708 <HAL_LPTIM_CompareMatchCallback>:
/* USER CODE BEGIN 4 */

/*
 * Redefinition of the low power timer interrupt
 */
void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim){
 8002708:	b480      	push	{r7}
 800270a:	b083      	sub	sp, #12
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
	sensorReady = READY;
 8002710:	4b04      	ldr	r3, [pc, #16]	; (8002724 <HAL_LPTIM_CompareMatchCallback+0x1c>)
 8002712:	2201      	movs	r2, #1
 8002714:	701a      	strb	r2, [r3, #0]
}
 8002716:	bf00      	nop
 8002718:	370c      	adds	r7, #12
 800271a:	46bd      	mov	sp, r7
 800271c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002720:	4770      	bx	lr
 8002722:	bf00      	nop
 8002724:	20000cdc 	.word	0x20000cdc

08002728 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b082      	sub	sp, #8
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8002730:	1d39      	adds	r1, r7, #4
 8002732:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002736:	2201      	movs	r2, #1
 8002738:	4803      	ldr	r0, [pc, #12]	; (8002748 <__io_putchar+0x20>)
 800273a:	f005 fd6d 	bl	8008218 <HAL_UART_Transmit>

  return ch;
 800273e:	687b      	ldr	r3, [r7, #4]
}
 8002740:	4618      	mov	r0, r3
 8002742:	3708      	adds	r7, #8
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}
 8002748:	20000c28 	.word	0x20000c28

0800274c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800274c:	b480      	push	{r7}
 800274e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002750:	b672      	cpsid	i
}
 8002752:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002754:	e7fe      	b.n	8002754 <Error_Handler+0x8>

08002756 <LL_RCC_EnableRTC>:
{
 8002756:	b480      	push	{r7}
 8002758:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 800275a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800275e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002762:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002766:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800276a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800276e:	bf00      	nop
 8002770:	46bd      	mov	sp, r7
 8002772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002776:	4770      	bx	lr

08002778 <LL_AHB2_GRP1_EnableClock>:
{
 8002778:	b480      	push	{r7}
 800277a:	b085      	sub	sp, #20
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002780:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002784:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002786:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	4313      	orrs	r3, r2
 800278e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002790:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002794:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	4013      	ands	r3, r2
 800279a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800279c:	68fb      	ldr	r3, [r7, #12]
}
 800279e:	bf00      	nop
 80027a0:	3714      	adds	r7, #20
 80027a2:	46bd      	mov	sp, r7
 80027a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a8:	4770      	bx	lr

080027aa <LL_AHB3_GRP1_EnableClock>:
{
 80027aa:	b480      	push	{r7}
 80027ac:	b085      	sub	sp, #20
 80027ae:	af00      	add	r7, sp, #0
 80027b0:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 80027b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027b6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80027b8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	4313      	orrs	r3, r2
 80027c0:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80027c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027c6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	4013      	ands	r3, r2
 80027cc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80027ce:	68fb      	ldr	r3, [r7, #12]
}
 80027d0:	bf00      	nop
 80027d2:	3714      	adds	r7, #20
 80027d4:	46bd      	mov	sp, r7
 80027d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027da:	4770      	bx	lr

080027dc <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80027dc:	b480      	push	{r7}
 80027de:	b085      	sub	sp, #20
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80027e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027e8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80027ea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	4313      	orrs	r3, r2
 80027f2:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80027f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027f8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	4013      	ands	r3, r2
 80027fe:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002800:	68fb      	ldr	r3, [r7, #12]
}
 8002802:	bf00      	nop
 8002804:	3714      	adds	r7, #20
 8002806:	46bd      	mov	sp, r7
 8002808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280c:	4770      	bx	lr

0800280e <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800280e:	b480      	push	{r7}
 8002810:	b085      	sub	sp, #20
 8002812:	af00      	add	r7, sp, #0
 8002814:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8002816:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800281a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800281c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	4313      	orrs	r3, r2
 8002824:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002826:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800282a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	4013      	ands	r3, r2
 8002830:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002832:	68fb      	ldr	r3, [r7, #12]
}
 8002834:	bf00      	nop
 8002836:	3714      	adds	r7, #20
 8002838:	46bd      	mov	sp, r7
 800283a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283e:	4770      	bx	lr

08002840 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8002844:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002848:	f7ff ffaf 	bl	80027aa <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 800284c:	2200      	movs	r2, #0
 800284e:	2100      	movs	r1, #0
 8002850:	202e      	movs	r0, #46	; 0x2e
 8002852:	f000 fd28 	bl	80032a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8002856:	202e      	movs	r0, #46	; 0x2e
 8002858:	f000 fd3f 	bl	80032da <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800285c:	bf00      	nop
 800285e:	bd80      	pop	{r7, pc}

08002860 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b09c      	sub	sp, #112	; 0x70
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002868:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800286c:	2200      	movs	r2, #0
 800286e:	601a      	str	r2, [r3, #0]
 8002870:	605a      	str	r2, [r3, #4]
 8002872:	609a      	str	r2, [r3, #8]
 8002874:	60da      	str	r2, [r3, #12]
 8002876:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002878:	f107 030c 	add.w	r3, r7, #12
 800287c:	2250      	movs	r2, #80	; 0x50
 800287e:	2100      	movs	r1, #0
 8002880:	4618      	mov	r0, r3
 8002882:	f009 fc63 	bl	800c14c <memset>
  if(hi2c->Instance==I2C1)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a1b      	ldr	r2, [pc, #108]	; (80028f8 <HAL_I2C_MspInit+0x98>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d12e      	bne.n	80028ee <HAL_I2C_MspInit+0x8e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002890:	2304      	movs	r3, #4
 8002892:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002894:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8002898:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800289a:	f107 030c 	add.w	r3, r7, #12
 800289e:	4618      	mov	r0, r3
 80028a0:	f003 ff61 	bl	8006766 <HAL_RCCEx_PeriphCLKConfig>
 80028a4:	4603      	mov	r3, r0
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d001      	beq.n	80028ae <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80028aa:	f7ff ff4f 	bl	800274c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028ae:	2002      	movs	r0, #2
 80028b0:	f7ff ff62 	bl	8002778 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80028b4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80028b8:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80028ba:	2312      	movs	r3, #18
 80028bc:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028be:	2300      	movs	r3, #0
 80028c0:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028c2:	2300      	movs	r3, #0
 80028c4:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80028c6:	2304      	movs	r3, #4
 80028c8:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028ca:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80028ce:	4619      	mov	r1, r3
 80028d0:	480a      	ldr	r0, [pc, #40]	; (80028fc <HAL_I2C_MspInit+0x9c>)
 80028d2:	f001 f81b 	bl	800390c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80028d6:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80028da:	f7ff ff7f 	bl	80027dc <LL_APB1_GRP1_EnableClock>
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80028de:	2200      	movs	r2, #0
 80028e0:	2100      	movs	r1, #0
 80028e2:	201e      	movs	r0, #30
 80028e4:	f000 fcdf 	bl	80032a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80028e8:	201e      	movs	r0, #30
 80028ea:	f000 fcf6 	bl	80032da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80028ee:	bf00      	nop
 80028f0:	3770      	adds	r7, #112	; 0x70
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	bf00      	nop
 80028f8:	40005400 	.word	0x40005400
 80028fc:	48000400 	.word	0x48000400

08002900 <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b082      	sub	sp, #8
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a0d      	ldr	r2, [pc, #52]	; (8002944 <HAL_IPCC_MspInit+0x44>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d113      	bne.n	800293a <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8002912:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002916:	f7ff ff48 	bl	80027aa <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 800291a:	2200      	movs	r2, #0
 800291c:	2100      	movs	r1, #0
 800291e:	202c      	movs	r0, #44	; 0x2c
 8002920:	f000 fcc1 	bl	80032a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8002924:	202c      	movs	r0, #44	; 0x2c
 8002926:	f000 fcd8 	bl	80032da <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 800292a:	2200      	movs	r2, #0
 800292c:	2100      	movs	r1, #0
 800292e:	202d      	movs	r0, #45	; 0x2d
 8002930:	f000 fcb9 	bl	80032a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8002934:	202d      	movs	r0, #45	; 0x2d
 8002936:	f000 fcd0 	bl	80032da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 800293a:	bf00      	nop
 800293c:	3708      	adds	r7, #8
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	58000c00 	.word	0x58000c00

08002948 <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b096      	sub	sp, #88	; 0x58
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002950:	f107 0308 	add.w	r3, r7, #8
 8002954:	2250      	movs	r2, #80	; 0x50
 8002956:	2100      	movs	r1, #0
 8002958:	4618      	mov	r0, r3
 800295a:	f009 fbf7 	bl	800c14c <memset>
  if(hlptim->Instance==LPTIM1)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a11      	ldr	r2, [pc, #68]	; (80029a8 <HAL_LPTIM_MspInit+0x60>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d11a      	bne.n	800299e <HAL_LPTIM_MspInit+0x56>

  /* USER CODE END LPTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 8002968:	2310      	movs	r3, #16
 800296a:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_LSE;
 800296c:	f04f 130c 	mov.w	r3, #786444	; 0xc000c
 8002970:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002972:	f107 0308 	add.w	r3, r7, #8
 8002976:	4618      	mov	r0, r3
 8002978:	f003 fef5 	bl	8006766 <HAL_RCCEx_PeriphCLKConfig>
 800297c:	4603      	mov	r3, r0
 800297e:	2b00      	cmp	r3, #0
 8002980:	d001      	beq.n	8002986 <HAL_LPTIM_MspInit+0x3e>
    {
      Error_Handler();
 8002982:	f7ff fee3 	bl	800274c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 8002986:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800298a:	f7ff ff27 	bl	80027dc <LL_APB1_GRP1_EnableClock>
    /* LPTIM1 interrupt Init */
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 0, 0);
 800298e:	2200      	movs	r2, #0
 8002990:	2100      	movs	r1, #0
 8002992:	202f      	movs	r0, #47	; 0x2f
 8002994:	f000 fc87 	bl	80032a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 8002998:	202f      	movs	r0, #47	; 0x2f
 800299a:	f000 fc9e 	bl	80032da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }

}
 800299e:	bf00      	nop
 80029a0:	3758      	adds	r7, #88	; 0x58
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	bf00      	nop
 80029a8:	40007c00 	.word	0x40007c00

080029ac <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b096      	sub	sp, #88	; 0x58
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80029b4:	f107 0308 	add.w	r3, r7, #8
 80029b8:	2250      	movs	r2, #80	; 0x50
 80029ba:	2100      	movs	r1, #0
 80029bc:	4618      	mov	r0, r3
 80029be:	f009 fbc5 	bl	800c14c <memset>
  if(hrtc->Instance==RTC)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a12      	ldr	r2, [pc, #72]	; (8002a10 <HAL_RTC_MspInit+0x64>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d11d      	bne.n	8002a08 <HAL_RTC_MspInit+0x5c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80029cc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80029d0:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80029d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80029d6:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80029d8:	f107 0308 	add.w	r3, r7, #8
 80029dc:	4618      	mov	r0, r3
 80029de:	f003 fec2 	bl	8006766 <HAL_RCCEx_PeriphCLKConfig>
 80029e2:	4603      	mov	r3, r0
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d001      	beq.n	80029ec <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80029e8:	f7ff feb0 	bl	800274c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80029ec:	f7ff feb3 	bl	8002756 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80029f0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80029f4:	f7ff fef2 	bl	80027dc <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 80029f8:	2200      	movs	r2, #0
 80029fa:	2100      	movs	r1, #0
 80029fc:	2003      	movs	r0, #3
 80029fe:	f000 fc52 	bl	80032a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8002a02:	2003      	movs	r0, #3
 8002a04:	f000 fc69 	bl	80032da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002a08:	bf00      	nop
 8002a0a:	3758      	adds	r7, #88	; 0x58
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}
 8002a10:	40002800 	.word	0x40002800

08002a14 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b088      	sub	sp, #32
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a1c:	f107 030c 	add.w	r3, r7, #12
 8002a20:	2200      	movs	r2, #0
 8002a22:	601a      	str	r2, [r3, #0]
 8002a24:	605a      	str	r2, [r3, #4]
 8002a26:	609a      	str	r2, [r3, #8]
 8002a28:	60da      	str	r2, [r3, #12]
 8002a2a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a3c      	ldr	r2, [pc, #240]	; (8002b24 <HAL_SPI_MspInit+0x110>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d171      	bne.n	8002b1a <HAL_SPI_MspInit+0x106>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002a36:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002a3a:	f7ff fee8 	bl	800280e <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a3e:	2001      	movs	r0, #1
 8002a40:	f7ff fe9a 	bl	8002778 <LL_AHB2_GRP1_EnableClock>
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 8002a44:	23c2      	movs	r3, #194	; 0xc2
 8002a46:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a48:	2302      	movs	r3, #2
 8002a4a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a50:	2300      	movs	r3, #0
 8002a52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002a54:	2305      	movs	r3, #5
 8002a56:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a58:	f107 030c 	add.w	r3, r7, #12
 8002a5c:	4619      	mov	r1, r3
 8002a5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a62:	f000 ff53 	bl	800390c <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel1;
 8002a66:	4b30      	ldr	r3, [pc, #192]	; (8002b28 <HAL_SPI_MspInit+0x114>)
 8002a68:	4a30      	ldr	r2, [pc, #192]	; (8002b2c <HAL_SPI_MspInit+0x118>)
 8002a6a:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8002a6c:	4b2e      	ldr	r3, [pc, #184]	; (8002b28 <HAL_SPI_MspInit+0x114>)
 8002a6e:	2206      	movs	r2, #6
 8002a70:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002a72:	4b2d      	ldr	r3, [pc, #180]	; (8002b28 <HAL_SPI_MspInit+0x114>)
 8002a74:	2200      	movs	r2, #0
 8002a76:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a78:	4b2b      	ldr	r3, [pc, #172]	; (8002b28 <HAL_SPI_MspInit+0x114>)
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002a7e:	4b2a      	ldr	r3, [pc, #168]	; (8002b28 <HAL_SPI_MspInit+0x114>)
 8002a80:	2280      	movs	r2, #128	; 0x80
 8002a82:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002a84:	4b28      	ldr	r3, [pc, #160]	; (8002b28 <HAL_SPI_MspInit+0x114>)
 8002a86:	2200      	movs	r2, #0
 8002a88:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002a8a:	4b27      	ldr	r3, [pc, #156]	; (8002b28 <HAL_SPI_MspInit+0x114>)
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8002a90:	4b25      	ldr	r3, [pc, #148]	; (8002b28 <HAL_SPI_MspInit+0x114>)
 8002a92:	2200      	movs	r2, #0
 8002a94:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002a96:	4b24      	ldr	r3, [pc, #144]	; (8002b28 <HAL_SPI_MspInit+0x114>)
 8002a98:	2200      	movs	r2, #0
 8002a9a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8002a9c:	4822      	ldr	r0, [pc, #136]	; (8002b28 <HAL_SPI_MspInit+0x114>)
 8002a9e:	f000 fc61 	bl	8003364 <HAL_DMA_Init>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d001      	beq.n	8002aac <HAL_SPI_MspInit+0x98>
    {
      Error_Handler();
 8002aa8:	f7ff fe50 	bl	800274c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	4a1e      	ldr	r2, [pc, #120]	; (8002b28 <HAL_SPI_MspInit+0x114>)
 8002ab0:	659a      	str	r2, [r3, #88]	; 0x58
 8002ab2:	4a1d      	ldr	r2, [pc, #116]	; (8002b28 <HAL_SPI_MspInit+0x114>)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6293      	str	r3, [r2, #40]	; 0x28

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel2;
 8002ab8:	4b1d      	ldr	r3, [pc, #116]	; (8002b30 <HAL_SPI_MspInit+0x11c>)
 8002aba:	4a1e      	ldr	r2, [pc, #120]	; (8002b34 <HAL_SPI_MspInit+0x120>)
 8002abc:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8002abe:	4b1c      	ldr	r3, [pc, #112]	; (8002b30 <HAL_SPI_MspInit+0x11c>)
 8002ac0:	2207      	movs	r2, #7
 8002ac2:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002ac4:	4b1a      	ldr	r3, [pc, #104]	; (8002b30 <HAL_SPI_MspInit+0x11c>)
 8002ac6:	2210      	movs	r2, #16
 8002ac8:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002aca:	4b19      	ldr	r3, [pc, #100]	; (8002b30 <HAL_SPI_MspInit+0x11c>)
 8002acc:	2200      	movs	r2, #0
 8002ace:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002ad0:	4b17      	ldr	r3, [pc, #92]	; (8002b30 <HAL_SPI_MspInit+0x11c>)
 8002ad2:	2280      	movs	r2, #128	; 0x80
 8002ad4:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002ad6:	4b16      	ldr	r3, [pc, #88]	; (8002b30 <HAL_SPI_MspInit+0x11c>)
 8002ad8:	2200      	movs	r2, #0
 8002ada:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002adc:	4b14      	ldr	r3, [pc, #80]	; (8002b30 <HAL_SPI_MspInit+0x11c>)
 8002ade:	2200      	movs	r2, #0
 8002ae0:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8002ae2:	4b13      	ldr	r3, [pc, #76]	; (8002b30 <HAL_SPI_MspInit+0x11c>)
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002ae8:	4b11      	ldr	r3, [pc, #68]	; (8002b30 <HAL_SPI_MspInit+0x11c>)
 8002aea:	2200      	movs	r2, #0
 8002aec:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8002aee:	4810      	ldr	r0, [pc, #64]	; (8002b30 <HAL_SPI_MspInit+0x11c>)
 8002af0:	f000 fc38 	bl	8003364 <HAL_DMA_Init>
 8002af4:	4603      	mov	r3, r0
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d001      	beq.n	8002afe <HAL_SPI_MspInit+0xea>
    {
      Error_Handler();
 8002afa:	f7ff fe27 	bl	800274c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	4a0b      	ldr	r2, [pc, #44]	; (8002b30 <HAL_SPI_MspInit+0x11c>)
 8002b02:	655a      	str	r2, [r3, #84]	; 0x54
 8002b04:	4a0a      	ldr	r2, [pc, #40]	; (8002b30 <HAL_SPI_MspInit+0x11c>)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6293      	str	r3, [r2, #40]	; 0x28

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	2100      	movs	r1, #0
 8002b0e:	2022      	movs	r0, #34	; 0x22
 8002b10:	f000 fbc9 	bl	80032a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8002b14:	2022      	movs	r0, #34	; 0x22
 8002b16:	f000 fbe0 	bl	80032da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002b1a:	bf00      	nop
 8002b1c:	3720      	adds	r7, #32
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}
 8002b22:	bf00      	nop
 8002b24:	40013000 	.word	0x40013000
 8002b28:	20000b68 	.word	0x20000b68
 8002b2c:	40020008 	.word	0x40020008
 8002b30:	20000bc8 	.word	0x20000bc8
 8002b34:	4002001c 	.word	0x4002001c

08002b38 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b09c      	sub	sp, #112	; 0x70
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b40:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002b44:	2200      	movs	r2, #0
 8002b46:	601a      	str	r2, [r3, #0]
 8002b48:	605a      	str	r2, [r3, #4]
 8002b4a:	609a      	str	r2, [r3, #8]
 8002b4c:	60da      	str	r2, [r3, #12]
 8002b4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002b50:	f107 030c 	add.w	r3, r7, #12
 8002b54:	2250      	movs	r2, #80	; 0x50
 8002b56:	2100      	movs	r1, #0
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f009 faf7 	bl	800c14c <memset>
  if(huart->Instance==USART1)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a16      	ldr	r2, [pc, #88]	; (8002bbc <HAL_UART_MspInit+0x84>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d124      	bne.n	8002bb2 <HAL_UART_MspInit+0x7a>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002b70:	f107 030c 	add.w	r3, r7, #12
 8002b74:	4618      	mov	r0, r3
 8002b76:	f003 fdf6 	bl	8006766 <HAL_RCCEx_PeriphCLKConfig>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d001      	beq.n	8002b84 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002b80:	f7ff fde4 	bl	800274c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002b84:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002b88:	f7ff fe41 	bl	800280e <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b8c:	2002      	movs	r0, #2
 8002b8e:	f7ff fdf3 	bl	8002778 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8002b92:	23c0      	movs	r3, #192	; 0xc0
 8002b94:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b96:	2302      	movs	r3, #2
 8002b98:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002ba2:	2307      	movs	r3, #7
 8002ba4:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ba6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002baa:	4619      	mov	r1, r3
 8002bac:	4804      	ldr	r0, [pc, #16]	; (8002bc0 <HAL_UART_MspInit+0x88>)
 8002bae:	f000 fead 	bl	800390c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002bb2:	bf00      	nop
 8002bb4:	3770      	adds	r7, #112	; 0x70
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	bf00      	nop
 8002bbc:	40013800 	.word	0x40013800
 8002bc0:	48000400 	.word	0x48000400

08002bc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002bc8:	e7fe      	b.n	8002bc8 <NMI_Handler+0x4>

08002bca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002bca:	b480      	push	{r7}
 8002bcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002bce:	e7fe      	b.n	8002bce <HardFault_Handler+0x4>

08002bd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002bd4:	e7fe      	b.n	8002bd4 <MemManage_Handler+0x4>

08002bd6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002bd6:	b480      	push	{r7}
 8002bd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002bda:	e7fe      	b.n	8002bda <BusFault_Handler+0x4>

08002bdc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002be0:	e7fe      	b.n	8002be0 <UsageFault_Handler+0x4>

08002be2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002be2:	b480      	push	{r7}
 8002be4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002be6:	bf00      	nop
 8002be8:	46bd      	mov	sp, r7
 8002bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bee:	4770      	bx	lr

08002bf0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002bf4:	bf00      	nop
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfc:	4770      	bx	lr

08002bfe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002bfe:	b480      	push	{r7}
 8002c00:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c02:	bf00      	nop
 8002c04:	46bd      	mov	sp, r7
 8002c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0a:	4770      	bx	lr

08002c0c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c10:	f000 f9d6 	bl	8002fc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c14:	bf00      	nop
 8002c16:	bd80      	pop	{r7, pc}

08002c18 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8002c1c:	f7fe ff58 	bl	8001ad0 <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8002c20:	bf00      	nop
 8002c22:	bd80      	pop	{r7, pc}

08002c24 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8002c28:	4802      	ldr	r0, [pc, #8]	; (8002c34 <DMA1_Channel1_IRQHandler+0x10>)
 8002c2a:	f000 fd1d 	bl	8003668 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002c2e:	bf00      	nop
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	bf00      	nop
 8002c34:	20000b68 	.word	0x20000b68

08002c38 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8002c3c:	4802      	ldr	r0, [pc, #8]	; (8002c48 <DMA1_Channel2_IRQHandler+0x10>)
 8002c3e:	f000 fd13 	bl	8003668 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8002c42:	bf00      	nop
 8002c44:	bd80      	pop	{r7, pc}
 8002c46:	bf00      	nop
 8002c48:	20000bc8 	.word	0x20000bc8

08002c4c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002c50:	4802      	ldr	r0, [pc, #8]	; (8002c5c <I2C1_EV_IRQHandler+0x10>)
 8002c52:	f001 fac5 	bl	80041e0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002c56:	bf00      	nop
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	bf00      	nop
 8002c5c:	20000a18 	.word	0x20000a18

08002c60 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002c64:	4802      	ldr	r0, [pc, #8]	; (8002c70 <SPI1_IRQHandler+0x10>)
 8002c66:	f004 fe09 	bl	800787c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8002c6a:	bf00      	nop
 8002c6c:	bd80      	pop	{r7, pc}
 8002c6e:	bf00      	nop
 8002c70:	20000b04 	.word	0x20000b04

08002c74 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8002c78:	f008 fe6c 	bl	800b954 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8002c7c:	bf00      	nop
 8002c7e:	bd80      	pop	{r7, pc}

08002c80 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 8002c84:	f008 fe9e 	bl	800b9c4 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8002c88:	bf00      	nop
 8002c8a:	bd80      	pop	{r7, pc}

08002c8c <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8002c90:	f000 ffc4 	bl	8003c1c <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8002c94:	bf00      	nop
 8002c96:	bd80      	pop	{r7, pc}

08002c98 <LPTIM1_IRQHandler>:

/**
  * @brief This function handles LPTIM1 global interrupt.
  */
void LPTIM1_IRQHandler(void)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM1_IRQn 0 */

  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 8002c9c:	4802      	ldr	r0, [pc, #8]	; (8002ca8 <LPTIM1_IRQHandler+0x10>)
 8002c9e:	f002 f82b 	bl	8004cf8 <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */

  /* USER CODE END LPTIM1_IRQn 1 */
}
 8002ca2:	bf00      	nop
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	bf00      	nop
 8002ca8:	20000aa8 	.word	0x20000aa8

08002cac <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b086      	sub	sp, #24
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	60f8      	str	r0, [r7, #12]
 8002cb4:	60b9      	str	r1, [r7, #8]
 8002cb6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cb8:	2300      	movs	r3, #0
 8002cba:	617b      	str	r3, [r7, #20]
 8002cbc:	e00a      	b.n	8002cd4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002cbe:	f3af 8000 	nop.w
 8002cc2:	4601      	mov	r1, r0
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	1c5a      	adds	r2, r3, #1
 8002cc8:	60ba      	str	r2, [r7, #8]
 8002cca:	b2ca      	uxtb	r2, r1
 8002ccc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	3301      	adds	r3, #1
 8002cd2:	617b      	str	r3, [r7, #20]
 8002cd4:	697a      	ldr	r2, [r7, #20]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	dbf0      	blt.n	8002cbe <_read+0x12>
  }

  return len;
 8002cdc:	687b      	ldr	r3, [r7, #4]
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	3718      	adds	r7, #24
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}

08002ce6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002ce6:	b580      	push	{r7, lr}
 8002ce8:	b086      	sub	sp, #24
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	60f8      	str	r0, [r7, #12]
 8002cee:	60b9      	str	r1, [r7, #8]
 8002cf0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	617b      	str	r3, [r7, #20]
 8002cf6:	e009      	b.n	8002d0c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	1c5a      	adds	r2, r3, #1
 8002cfc:	60ba      	str	r2, [r7, #8]
 8002cfe:	781b      	ldrb	r3, [r3, #0]
 8002d00:	4618      	mov	r0, r3
 8002d02:	f7ff fd11 	bl	8002728 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	3301      	adds	r3, #1
 8002d0a:	617b      	str	r3, [r7, #20]
 8002d0c:	697a      	ldr	r2, [r7, #20]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	429a      	cmp	r2, r3
 8002d12:	dbf1      	blt.n	8002cf8 <_write+0x12>
  }
  return len;
 8002d14:	687b      	ldr	r3, [r7, #4]
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	3718      	adds	r7, #24
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}

08002d1e <_close>:

int _close(int file)
{
 8002d1e:	b480      	push	{r7}
 8002d20:	b083      	sub	sp, #12
 8002d22:	af00      	add	r7, sp, #0
 8002d24:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002d26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	370c      	adds	r7, #12
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d34:	4770      	bx	lr

08002d36 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002d36:	b480      	push	{r7}
 8002d38:	b083      	sub	sp, #12
 8002d3a:	af00      	add	r7, sp, #0
 8002d3c:	6078      	str	r0, [r7, #4]
 8002d3e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002d46:	605a      	str	r2, [r3, #4]
  return 0;
 8002d48:	2300      	movs	r3, #0
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	370c      	adds	r7, #12
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d54:	4770      	bx	lr

08002d56 <_isatty>:

int _isatty(int file)
{
 8002d56:	b480      	push	{r7}
 8002d58:	b083      	sub	sp, #12
 8002d5a:	af00      	add	r7, sp, #0
 8002d5c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002d5e:	2301      	movs	r3, #1
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	370c      	adds	r7, #12
 8002d64:	46bd      	mov	sp, r7
 8002d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6a:	4770      	bx	lr

08002d6c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b085      	sub	sp, #20
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	60f8      	str	r0, [r7, #12]
 8002d74:	60b9      	str	r1, [r7, #8]
 8002d76:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002d78:	2300      	movs	r3, #0
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3714      	adds	r7, #20
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d84:	4770      	bx	lr
	...

08002d88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b086      	sub	sp, #24
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d90:	4a14      	ldr	r2, [pc, #80]	; (8002de4 <_sbrk+0x5c>)
 8002d92:	4b15      	ldr	r3, [pc, #84]	; (8002de8 <_sbrk+0x60>)
 8002d94:	1ad3      	subs	r3, r2, r3
 8002d96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d9c:	4b13      	ldr	r3, [pc, #76]	; (8002dec <_sbrk+0x64>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d102      	bne.n	8002daa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002da4:	4b11      	ldr	r3, [pc, #68]	; (8002dec <_sbrk+0x64>)
 8002da6:	4a12      	ldr	r2, [pc, #72]	; (8002df0 <_sbrk+0x68>)
 8002da8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002daa:	4b10      	ldr	r3, [pc, #64]	; (8002dec <_sbrk+0x64>)
 8002dac:	681a      	ldr	r2, [r3, #0]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	4413      	add	r3, r2
 8002db2:	693a      	ldr	r2, [r7, #16]
 8002db4:	429a      	cmp	r2, r3
 8002db6:	d207      	bcs.n	8002dc8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002db8:	f009 f990 	bl	800c0dc <__errno>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	220c      	movs	r2, #12
 8002dc0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002dc2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002dc6:	e009      	b.n	8002ddc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002dc8:	4b08      	ldr	r3, [pc, #32]	; (8002dec <_sbrk+0x64>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002dce:	4b07      	ldr	r3, [pc, #28]	; (8002dec <_sbrk+0x64>)
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	4413      	add	r3, r2
 8002dd6:	4a05      	ldr	r2, [pc, #20]	; (8002dec <_sbrk+0x64>)
 8002dd8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002dda:	68fb      	ldr	r3, [r7, #12]
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	3718      	adds	r7, #24
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd80      	pop	{r7, pc}
 8002de4:	20030000 	.word	0x20030000
 8002de8:	00000400 	.word	0x00000400
 8002dec:	20000ce0 	.word	0x20000ce0
 8002df0:	20000ea8 	.word	0x20000ea8

08002df4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002df4:	b480      	push	{r7}
 8002df6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8002df8:	4b24      	ldr	r3, [pc, #144]	; (8002e8c <SystemInit+0x98>)
 8002dfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dfe:	4a23      	ldr	r2, [pc, #140]	; (8002e8c <SystemInit+0x98>)
 8002e00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002e04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002e08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e12:	f043 0301 	orr.w	r3, r3, #1
 8002e16:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8002e18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e1c:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8002e20:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8002e22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e26:	681a      	ldr	r2, [r3, #0]
 8002e28:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e2c:	4b18      	ldr	r3, [pc, #96]	; (8002e90 <SystemInit+0x9c>)
 8002e2e:	4013      	ands	r3, r2
 8002e30:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8002e32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e3a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e3e:	f023 0305 	bic.w	r3, r3, #5
 8002e42:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8002e46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e4a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002e4e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e52:	f023 0301 	bic.w	r3, r3, #1
 8002e56:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8002e5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e5e:	4a0d      	ldr	r2, [pc, #52]	; (8002e94 <SystemInit+0xa0>)
 8002e60:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8002e62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e66:	4a0b      	ldr	r2, [pc, #44]	; (8002e94 <SystemInit+0xa0>)
 8002e68:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002e6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e74:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e78:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002e7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e7e:	2200      	movs	r2, #0
 8002e80:	619a      	str	r2, [r3, #24]
}
 8002e82:	bf00      	nop
 8002e84:	46bd      	mov	sp, r7
 8002e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8a:	4770      	bx	lr
 8002e8c:	e000ed00 	.word	0xe000ed00
 8002e90:	faf6fefb 	.word	0xfaf6fefb
 8002e94:	22041000 	.word	0x22041000

08002e98 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8002e98:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e9a:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e9c:	3304      	adds	r3, #4

08002e9e <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e9e:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ea0:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8002ea2:	d3f9      	bcc.n	8002e98 <CopyDataInit>
  bx lr
 8002ea4:	4770      	bx	lr

08002ea6 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8002ea6:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8002ea8:	3004      	adds	r0, #4

08002eaa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8002eaa:	4288      	cmp	r0, r1
  bcc FillZerobss
 8002eac:	d3fb      	bcc.n	8002ea6 <FillZerobss>
  bx lr
 8002eae:	4770      	bx	lr

08002eb0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002eb0:	480c      	ldr	r0, [pc, #48]	; (8002ee4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002eb2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002eb4:	f7ff ff9e 	bl	8002df4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8002eb8:	480b      	ldr	r0, [pc, #44]	; (8002ee8 <LoopForever+0x6>)
 8002eba:	490c      	ldr	r1, [pc, #48]	; (8002eec <LoopForever+0xa>)
 8002ebc:	4a0c      	ldr	r2, [pc, #48]	; (8002ef0 <LoopForever+0xe>)
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	f7ff ffed 	bl	8002e9e <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8002ec4:	480b      	ldr	r0, [pc, #44]	; (8002ef4 <LoopForever+0x12>)
 8002ec6:	490c      	ldr	r1, [pc, #48]	; (8002ef8 <LoopForever+0x16>)
 8002ec8:	4a0c      	ldr	r2, [pc, #48]	; (8002efc <LoopForever+0x1a>)
 8002eca:	2300      	movs	r3, #0
 8002ecc:	f7ff ffe7 	bl	8002e9e <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8002ed0:	480b      	ldr	r0, [pc, #44]	; (8002f00 <LoopForever+0x1e>)
 8002ed2:	490c      	ldr	r1, [pc, #48]	; (8002f04 <LoopForever+0x22>)
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	f7ff ffe8 	bl	8002eaa <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002eda:	f009 f905 	bl	800c0e8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8002ede:	f7ff f8f9 	bl	80020d4 <main>

08002ee2 <LoopForever>:

LoopForever:
  b LoopForever
 8002ee2:	e7fe      	b.n	8002ee2 <LoopForever>
  ldr   r0, =_estack
 8002ee4:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8002ee8:	20000008 	.word	0x20000008
 8002eec:	2000008c 	.word	0x2000008c
 8002ef0:	0800d8b8 	.word	0x0800d8b8
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8002ef4:	200301e3 	.word	0x200301e3
 8002ef8:	200301e3 	.word	0x200301e3
 8002efc:	0800e205 	.word	0x0800e205
  INIT_BSS _sbss, _ebss
 8002f00:	2000095c 	.word	0x2000095c
 8002f04:	20000ea4 	.word	0x20000ea4

08002f08 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002f08:	e7fe      	b.n	8002f08 <ADC1_IRQHandler>
	...

08002f0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b082      	sub	sp, #8
 8002f10:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002f12:	2300      	movs	r3, #0
 8002f14:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f16:	4b0c      	ldr	r3, [pc, #48]	; (8002f48 <HAL_Init+0x3c>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a0b      	ldr	r2, [pc, #44]	; (8002f48 <HAL_Init+0x3c>)
 8002f1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f20:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f22:	2003      	movs	r0, #3
 8002f24:	f000 f9b4 	bl	8003290 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002f28:	2000      	movs	r0, #0
 8002f2a:	f000 f80f 	bl	8002f4c <HAL_InitTick>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d002      	beq.n	8002f3a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	71fb      	strb	r3, [r7, #7]
 8002f38:	e001      	b.n	8002f3e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002f3a:	f7ff fc81 	bl	8002840 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002f3e:	79fb      	ldrb	r3, [r7, #7]
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	3708      	adds	r7, #8
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}
 8002f48:	58004000 	.word	0x58004000

08002f4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b084      	sub	sp, #16
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002f54:	2300      	movs	r3, #0
 8002f56:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8002f58:	4b17      	ldr	r3, [pc, #92]	; (8002fb8 <HAL_InitTick+0x6c>)
 8002f5a:	781b      	ldrb	r3, [r3, #0]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d024      	beq.n	8002faa <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002f60:	f003 f970 	bl	8006244 <HAL_RCC_GetHCLKFreq>
 8002f64:	4602      	mov	r2, r0
 8002f66:	4b14      	ldr	r3, [pc, #80]	; (8002fb8 <HAL_InitTick+0x6c>)
 8002f68:	781b      	ldrb	r3, [r3, #0]
 8002f6a:	4619      	mov	r1, r3
 8002f6c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f70:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f74:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f000 f9ca 	bl	8003312 <HAL_SYSTICK_Config>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d10f      	bne.n	8002fa4 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2b0f      	cmp	r3, #15
 8002f88:	d809      	bhi.n	8002f9e <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	6879      	ldr	r1, [r7, #4]
 8002f8e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002f92:	f000 f988 	bl	80032a6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002f96:	4a09      	ldr	r2, [pc, #36]	; (8002fbc <HAL_InitTick+0x70>)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6013      	str	r3, [r2, #0]
 8002f9c:	e007      	b.n	8002fae <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	73fb      	strb	r3, [r7, #15]
 8002fa2:	e004      	b.n	8002fae <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	73fb      	strb	r3, [r7, #15]
 8002fa8:	e001      	b.n	8002fae <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002fae:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	3710      	adds	r7, #16
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}
 8002fb8:	20000010 	.word	0x20000010
 8002fbc:	2000000c 	.word	0x2000000c

08002fc0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002fc4:	4b06      	ldr	r3, [pc, #24]	; (8002fe0 <HAL_IncTick+0x20>)
 8002fc6:	781b      	ldrb	r3, [r3, #0]
 8002fc8:	461a      	mov	r2, r3
 8002fca:	4b06      	ldr	r3, [pc, #24]	; (8002fe4 <HAL_IncTick+0x24>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4413      	add	r3, r2
 8002fd0:	4a04      	ldr	r2, [pc, #16]	; (8002fe4 <HAL_IncTick+0x24>)
 8002fd2:	6013      	str	r3, [r2, #0]
}
 8002fd4:	bf00      	nop
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fdc:	4770      	bx	lr
 8002fde:	bf00      	nop
 8002fe0:	20000010 	.word	0x20000010
 8002fe4:	20000ce4 	.word	0x20000ce4

08002fe8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	af00      	add	r7, sp, #0
  return uwTick;
 8002fec:	4b03      	ldr	r3, [pc, #12]	; (8002ffc <HAL_GetTick+0x14>)
 8002fee:	681b      	ldr	r3, [r3, #0]
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff8:	4770      	bx	lr
 8002ffa:	bf00      	nop
 8002ffc:	20000ce4 	.word	0x20000ce4

08003000 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8003000:	b480      	push	{r7}
 8003002:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8003004:	4b03      	ldr	r3, [pc, #12]	; (8003014 <HAL_GetTickPrio+0x14>)
 8003006:	681b      	ldr	r3, [r3, #0]
}
 8003008:	4618      	mov	r0, r3
 800300a:	46bd      	mov	sp, r7
 800300c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003010:	4770      	bx	lr
 8003012:	bf00      	nop
 8003014:	2000000c 	.word	0x2000000c

08003018 <HAL_GetTickFreq>:
/**
  * @brief Return tick frequency.
  * @retval tick period in Hz
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 8003018:	b480      	push	{r7}
 800301a:	af00      	add	r7, sp, #0
  return uwTickFreq;
 800301c:	4b03      	ldr	r3, [pc, #12]	; (800302c <HAL_GetTickFreq+0x14>)
 800301e:	781b      	ldrb	r3, [r3, #0]
}
 8003020:	4618      	mov	r0, r3
 8003022:	46bd      	mov	sp, r7
 8003024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003028:	4770      	bx	lr
 800302a:	bf00      	nop
 800302c:	20000010 	.word	0x20000010

08003030 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003030:	b480      	push	{r7}
 8003032:	b085      	sub	sp, #20
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	f003 0307 	and.w	r3, r3, #7
 800303e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003040:	4b0c      	ldr	r3, [pc, #48]	; (8003074 <__NVIC_SetPriorityGrouping+0x44>)
 8003042:	68db      	ldr	r3, [r3, #12]
 8003044:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003046:	68ba      	ldr	r2, [r7, #8]
 8003048:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800304c:	4013      	ands	r3, r2
 800304e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003058:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800305c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003060:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003062:	4a04      	ldr	r2, [pc, #16]	; (8003074 <__NVIC_SetPriorityGrouping+0x44>)
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	60d3      	str	r3, [r2, #12]
}
 8003068:	bf00      	nop
 800306a:	3714      	adds	r7, #20
 800306c:	46bd      	mov	sp, r7
 800306e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003072:	4770      	bx	lr
 8003074:	e000ed00 	.word	0xe000ed00

08003078 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003078:	b480      	push	{r7}
 800307a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800307c:	4b04      	ldr	r3, [pc, #16]	; (8003090 <__NVIC_GetPriorityGrouping+0x18>)
 800307e:	68db      	ldr	r3, [r3, #12]
 8003080:	0a1b      	lsrs	r3, r3, #8
 8003082:	f003 0307 	and.w	r3, r3, #7
}
 8003086:	4618      	mov	r0, r3
 8003088:	46bd      	mov	sp, r7
 800308a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308e:	4770      	bx	lr
 8003090:	e000ed00 	.word	0xe000ed00

08003094 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003094:	b480      	push	{r7}
 8003096:	b083      	sub	sp, #12
 8003098:	af00      	add	r7, sp, #0
 800309a:	4603      	mov	r3, r0
 800309c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800309e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	db0b      	blt.n	80030be <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030a6:	79fb      	ldrb	r3, [r7, #7]
 80030a8:	f003 021f 	and.w	r2, r3, #31
 80030ac:	4907      	ldr	r1, [pc, #28]	; (80030cc <__NVIC_EnableIRQ+0x38>)
 80030ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030b2:	095b      	lsrs	r3, r3, #5
 80030b4:	2001      	movs	r0, #1
 80030b6:	fa00 f202 	lsl.w	r2, r0, r2
 80030ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80030be:	bf00      	nop
 80030c0:	370c      	adds	r7, #12
 80030c2:	46bd      	mov	sp, r7
 80030c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c8:	4770      	bx	lr
 80030ca:	bf00      	nop
 80030cc:	e000e100 	.word	0xe000e100

080030d0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b083      	sub	sp, #12
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	4603      	mov	r3, r0
 80030d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	db12      	blt.n	8003108 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030e2:	79fb      	ldrb	r3, [r7, #7]
 80030e4:	f003 021f 	and.w	r2, r3, #31
 80030e8:	490a      	ldr	r1, [pc, #40]	; (8003114 <__NVIC_DisableIRQ+0x44>)
 80030ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ee:	095b      	lsrs	r3, r3, #5
 80030f0:	2001      	movs	r0, #1
 80030f2:	fa00 f202 	lsl.w	r2, r0, r2
 80030f6:	3320      	adds	r3, #32
 80030f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80030fc:	f3bf 8f4f 	dsb	sy
}
 8003100:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003102:	f3bf 8f6f 	isb	sy
}
 8003106:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003108:	bf00      	nop
 800310a:	370c      	adds	r7, #12
 800310c:	46bd      	mov	sp, r7
 800310e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003112:	4770      	bx	lr
 8003114:	e000e100 	.word	0xe000e100

08003118 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8003118:	b480      	push	{r7}
 800311a:	b083      	sub	sp, #12
 800311c:	af00      	add	r7, sp, #0
 800311e:	4603      	mov	r3, r0
 8003120:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003126:	2b00      	cmp	r3, #0
 8003128:	db0c      	blt.n	8003144 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800312a:	79fb      	ldrb	r3, [r7, #7]
 800312c:	f003 021f 	and.w	r2, r3, #31
 8003130:	4907      	ldr	r1, [pc, #28]	; (8003150 <__NVIC_SetPendingIRQ+0x38>)
 8003132:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003136:	095b      	lsrs	r3, r3, #5
 8003138:	2001      	movs	r0, #1
 800313a:	fa00 f202 	lsl.w	r2, r0, r2
 800313e:	3340      	adds	r3, #64	; 0x40
 8003140:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003144:	bf00      	nop
 8003146:	370c      	adds	r7, #12
 8003148:	46bd      	mov	sp, r7
 800314a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314e:	4770      	bx	lr
 8003150:	e000e100 	.word	0xe000e100

08003154 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8003154:	b480      	push	{r7}
 8003156:	b083      	sub	sp, #12
 8003158:	af00      	add	r7, sp, #0
 800315a:	4603      	mov	r3, r0
 800315c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800315e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003162:	2b00      	cmp	r3, #0
 8003164:	db0c      	blt.n	8003180 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003166:	79fb      	ldrb	r3, [r7, #7]
 8003168:	f003 021f 	and.w	r2, r3, #31
 800316c:	4907      	ldr	r1, [pc, #28]	; (800318c <__NVIC_ClearPendingIRQ+0x38>)
 800316e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003172:	095b      	lsrs	r3, r3, #5
 8003174:	2001      	movs	r0, #1
 8003176:	fa00 f202 	lsl.w	r2, r0, r2
 800317a:	3360      	adds	r3, #96	; 0x60
 800317c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003180:	bf00      	nop
 8003182:	370c      	adds	r7, #12
 8003184:	46bd      	mov	sp, r7
 8003186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318a:	4770      	bx	lr
 800318c:	e000e100 	.word	0xe000e100

08003190 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003190:	b480      	push	{r7}
 8003192:	b083      	sub	sp, #12
 8003194:	af00      	add	r7, sp, #0
 8003196:	4603      	mov	r3, r0
 8003198:	6039      	str	r1, [r7, #0]
 800319a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800319c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	db0a      	blt.n	80031ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	b2da      	uxtb	r2, r3
 80031a8:	490c      	ldr	r1, [pc, #48]	; (80031dc <__NVIC_SetPriority+0x4c>)
 80031aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031ae:	0112      	lsls	r2, r2, #4
 80031b0:	b2d2      	uxtb	r2, r2
 80031b2:	440b      	add	r3, r1
 80031b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80031b8:	e00a      	b.n	80031d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	b2da      	uxtb	r2, r3
 80031be:	4908      	ldr	r1, [pc, #32]	; (80031e0 <__NVIC_SetPriority+0x50>)
 80031c0:	79fb      	ldrb	r3, [r7, #7]
 80031c2:	f003 030f 	and.w	r3, r3, #15
 80031c6:	3b04      	subs	r3, #4
 80031c8:	0112      	lsls	r2, r2, #4
 80031ca:	b2d2      	uxtb	r2, r2
 80031cc:	440b      	add	r3, r1
 80031ce:	761a      	strb	r2, [r3, #24]
}
 80031d0:	bf00      	nop
 80031d2:	370c      	adds	r7, #12
 80031d4:	46bd      	mov	sp, r7
 80031d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031da:	4770      	bx	lr
 80031dc:	e000e100 	.word	0xe000e100
 80031e0:	e000ed00 	.word	0xe000ed00

080031e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b089      	sub	sp, #36	; 0x24
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	60f8      	str	r0, [r7, #12]
 80031ec:	60b9      	str	r1, [r7, #8]
 80031ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	f003 0307 	and.w	r3, r3, #7
 80031f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80031f8:	69fb      	ldr	r3, [r7, #28]
 80031fa:	f1c3 0307 	rsb	r3, r3, #7
 80031fe:	2b04      	cmp	r3, #4
 8003200:	bf28      	it	cs
 8003202:	2304      	movcs	r3, #4
 8003204:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003206:	69fb      	ldr	r3, [r7, #28]
 8003208:	3304      	adds	r3, #4
 800320a:	2b06      	cmp	r3, #6
 800320c:	d902      	bls.n	8003214 <NVIC_EncodePriority+0x30>
 800320e:	69fb      	ldr	r3, [r7, #28]
 8003210:	3b03      	subs	r3, #3
 8003212:	e000      	b.n	8003216 <NVIC_EncodePriority+0x32>
 8003214:	2300      	movs	r3, #0
 8003216:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003218:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800321c:	69bb      	ldr	r3, [r7, #24]
 800321e:	fa02 f303 	lsl.w	r3, r2, r3
 8003222:	43da      	mvns	r2, r3
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	401a      	ands	r2, r3
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800322c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	fa01 f303 	lsl.w	r3, r1, r3
 8003236:	43d9      	mvns	r1, r3
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800323c:	4313      	orrs	r3, r2
         );
}
 800323e:	4618      	mov	r0, r3
 8003240:	3724      	adds	r7, #36	; 0x24
 8003242:	46bd      	mov	sp, r7
 8003244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003248:	4770      	bx	lr
	...

0800324c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b082      	sub	sp, #8
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	3b01      	subs	r3, #1
 8003258:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800325c:	d301      	bcc.n	8003262 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800325e:	2301      	movs	r3, #1
 8003260:	e00f      	b.n	8003282 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003262:	4a0a      	ldr	r2, [pc, #40]	; (800328c <SysTick_Config+0x40>)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	3b01      	subs	r3, #1
 8003268:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800326a:	210f      	movs	r1, #15
 800326c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003270:	f7ff ff8e 	bl	8003190 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003274:	4b05      	ldr	r3, [pc, #20]	; (800328c <SysTick_Config+0x40>)
 8003276:	2200      	movs	r2, #0
 8003278:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800327a:	4b04      	ldr	r3, [pc, #16]	; (800328c <SysTick_Config+0x40>)
 800327c:	2207      	movs	r2, #7
 800327e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003280:	2300      	movs	r3, #0
}
 8003282:	4618      	mov	r0, r3
 8003284:	3708      	adds	r7, #8
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}
 800328a:	bf00      	nop
 800328c:	e000e010 	.word	0xe000e010

08003290 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b082      	sub	sp, #8
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003298:	6878      	ldr	r0, [r7, #4]
 800329a:	f7ff fec9 	bl	8003030 <__NVIC_SetPriorityGrouping>
}
 800329e:	bf00      	nop
 80032a0:	3708      	adds	r7, #8
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}

080032a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032a6:	b580      	push	{r7, lr}
 80032a8:	b086      	sub	sp, #24
 80032aa:	af00      	add	r7, sp, #0
 80032ac:	4603      	mov	r3, r0
 80032ae:	60b9      	str	r1, [r7, #8]
 80032b0:	607a      	str	r2, [r7, #4]
 80032b2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80032b4:	f7ff fee0 	bl	8003078 <__NVIC_GetPriorityGrouping>
 80032b8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80032ba:	687a      	ldr	r2, [r7, #4]
 80032bc:	68b9      	ldr	r1, [r7, #8]
 80032be:	6978      	ldr	r0, [r7, #20]
 80032c0:	f7ff ff90 	bl	80031e4 <NVIC_EncodePriority>
 80032c4:	4602      	mov	r2, r0
 80032c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032ca:	4611      	mov	r1, r2
 80032cc:	4618      	mov	r0, r3
 80032ce:	f7ff ff5f 	bl	8003190 <__NVIC_SetPriority>
}
 80032d2:	bf00      	nop
 80032d4:	3718      	adds	r7, #24
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}

080032da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032da:	b580      	push	{r7, lr}
 80032dc:	b082      	sub	sp, #8
 80032de:	af00      	add	r7, sp, #0
 80032e0:	4603      	mov	r3, r0
 80032e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80032e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032e8:	4618      	mov	r0, r3
 80032ea:	f7ff fed3 	bl	8003094 <__NVIC_EnableIRQ>
}
 80032ee:	bf00      	nop
 80032f0:	3708      	adds	r7, #8
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}

080032f6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80032f6:	b580      	push	{r7, lr}
 80032f8:	b082      	sub	sp, #8
 80032fa:	af00      	add	r7, sp, #0
 80032fc:	4603      	mov	r3, r0
 80032fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003300:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003304:	4618      	mov	r0, r3
 8003306:	f7ff fee3 	bl	80030d0 <__NVIC_DisableIRQ>
}
 800330a:	bf00      	nop
 800330c:	3708      	adds	r7, #8
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}

08003312 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003312:	b580      	push	{r7, lr}
 8003314:	b082      	sub	sp, #8
 8003316:	af00      	add	r7, sp, #0
 8003318:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800331a:	6878      	ldr	r0, [r7, #4]
 800331c:	f7ff ff96 	bl	800324c <SysTick_Config>
 8003320:	4603      	mov	r3, r0
}
 8003322:	4618      	mov	r0, r3
 8003324:	3708      	adds	r7, #8
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}

0800332a <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 800332a:	b580      	push	{r7, lr}
 800332c:	b082      	sub	sp, #8
 800332e:	af00      	add	r7, sp, #0
 8003330:	4603      	mov	r3, r0
 8003332:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8003334:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003338:	4618      	mov	r0, r3
 800333a:	f7ff feed 	bl	8003118 <__NVIC_SetPendingIRQ>
}
 800333e:	bf00      	nop
 8003340:	3708      	adds	r7, #8
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}

08003346 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8003346:	b580      	push	{r7, lr}
 8003348:	b082      	sub	sp, #8
 800334a:	af00      	add	r7, sp, #0
 800334c:	4603      	mov	r3, r0
 800334e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8003350:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003354:	4618      	mov	r0, r3
 8003356:	f7ff fefd 	bl	8003154 <__NVIC_ClearPendingIRQ>
}
 800335a:	bf00      	nop
 800335c:	3708      	adds	r7, #8
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}
	...

08003364 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b084      	sub	sp, #16
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d101      	bne.n	8003376 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	e08e      	b.n	8003494 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	461a      	mov	r2, r3
 800337c:	4b47      	ldr	r3, [pc, #284]	; (800349c <HAL_DMA_Init+0x138>)
 800337e:	429a      	cmp	r2, r3
 8003380:	d80f      	bhi.n	80033a2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	461a      	mov	r2, r3
 8003388:	4b45      	ldr	r3, [pc, #276]	; (80034a0 <HAL_DMA_Init+0x13c>)
 800338a:	4413      	add	r3, r2
 800338c:	4a45      	ldr	r2, [pc, #276]	; (80034a4 <HAL_DMA_Init+0x140>)
 800338e:	fba2 2303 	umull	r2, r3, r2, r3
 8003392:	091b      	lsrs	r3, r3, #4
 8003394:	009a      	lsls	r2, r3, #2
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	4a42      	ldr	r2, [pc, #264]	; (80034a8 <HAL_DMA_Init+0x144>)
 800339e:	641a      	str	r2, [r3, #64]	; 0x40
 80033a0:	e00e      	b.n	80033c0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	461a      	mov	r2, r3
 80033a8:	4b40      	ldr	r3, [pc, #256]	; (80034ac <HAL_DMA_Init+0x148>)
 80033aa:	4413      	add	r3, r2
 80033ac:	4a3d      	ldr	r2, [pc, #244]	; (80034a4 <HAL_DMA_Init+0x140>)
 80033ae:	fba2 2303 	umull	r2, r3, r2, r3
 80033b2:	091b      	lsrs	r3, r3, #4
 80033b4:	009a      	lsls	r2, r3, #2
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	4a3c      	ldr	r2, [pc, #240]	; (80034b0 <HAL_DMA_Init+0x14c>)
 80033be:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2202      	movs	r2, #2
 80033c4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80033d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033da:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80033e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	691b      	ldr	r3, [r3, #16]
 80033ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	699b      	ldr	r3, [r3, #24]
 80033f6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033fc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6a1b      	ldr	r3, [r3, #32]
 8003402:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003404:	68fa      	ldr	r2, [r7, #12]
 8003406:	4313      	orrs	r3, r2
 8003408:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	68fa      	ldr	r2, [r7, #12]
 8003410:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	f000 fa16 	bl	8003844 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003420:	d102      	bne.n	8003428 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2200      	movs	r2, #0
 8003426:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	685a      	ldr	r2, [r3, #4]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003430:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8003434:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800343a:	687a      	ldr	r2, [r7, #4]
 800343c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800343e:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d010      	beq.n	800346a <HAL_DMA_Init+0x106>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	2b04      	cmp	r3, #4
 800344e:	d80c      	bhi.n	800346a <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003450:	6878      	ldr	r0, [r7, #4]
 8003452:	f000 fa35 	bl	80038c0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800345a:	2200      	movs	r2, #0
 800345c:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003462:	687a      	ldr	r2, [r7, #4]
 8003464:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003466:	605a      	str	r2, [r3, #4]
 8003468:	e008      	b.n	800347c <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2200      	movs	r2, #0
 800346e:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2200      	movs	r2, #0
 8003474:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2200      	movs	r2, #0
 800347a:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2200      	movs	r2, #0
 8003480:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2201      	movs	r2, #1
 8003486:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2200      	movs	r2, #0
 800348e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003492:	2300      	movs	r3, #0
}
 8003494:	4618      	mov	r0, r3
 8003496:	3710      	adds	r7, #16
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}
 800349c:	40020407 	.word	0x40020407
 80034a0:	bffdfff8 	.word	0xbffdfff8
 80034a4:	cccccccd 	.word	0xcccccccd
 80034a8:	40020000 	.word	0x40020000
 80034ac:	bffdfbf8 	.word	0xbffdfbf8
 80034b0:	40020400 	.word	0x40020400

080034b4 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b086      	sub	sp, #24
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	60f8      	str	r0, [r7, #12]
 80034bc:	60b9      	str	r1, [r7, #8]
 80034be:	607a      	str	r2, [r7, #4]
 80034c0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80034c2:	2300      	movs	r3, #0
 80034c4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	d101      	bne.n	80034d4 <HAL_DMA_Start_IT+0x20>
 80034d0:	2302      	movs	r3, #2
 80034d2:	e066      	b.n	80035a2 <HAL_DMA_Start_IT+0xee>
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2201      	movs	r2, #1
 80034d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80034e2:	b2db      	uxtb	r3, r3
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	d155      	bne.n	8003594 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2202      	movs	r2, #2
 80034ec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	2200      	movs	r2, #0
 80034f4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	681a      	ldr	r2, [r3, #0]
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f022 0201 	bic.w	r2, r2, #1
 8003504:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	687a      	ldr	r2, [r7, #4]
 800350a:	68b9      	ldr	r1, [r7, #8]
 800350c:	68f8      	ldr	r0, [r7, #12]
 800350e:	f000 f95a 	bl	80037c6 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003516:	2b00      	cmp	r3, #0
 8003518:	d008      	beq.n	800352c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	681a      	ldr	r2, [r3, #0]
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f042 020e 	orr.w	r2, r2, #14
 8003528:	601a      	str	r2, [r3, #0]
 800352a:	e00f      	b.n	800354c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	681a      	ldr	r2, [r3, #0]
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f022 0204 	bic.w	r2, r2, #4
 800353a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	681a      	ldr	r2, [r3, #0]
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f042 020a 	orr.w	r2, r2, #10
 800354a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003556:	2b00      	cmp	r3, #0
 8003558:	d007      	beq.n	800356a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800355e:	681a      	ldr	r2, [r3, #0]
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003564:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003568:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800356e:	2b00      	cmp	r3, #0
 8003570:	d007      	beq.n	8003582 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003576:	681a      	ldr	r2, [r3, #0]
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800357c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003580:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f042 0201 	orr.w	r2, r2, #1
 8003590:	601a      	str	r2, [r3, #0]
 8003592:	e005      	b.n	80035a0 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	2200      	movs	r2, #0
 8003598:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800359c:	2302      	movs	r3, #2
 800359e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80035a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	3718      	adds	r7, #24
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}

080035aa <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80035aa:	b580      	push	{r7, lr}
 80035ac:	b084      	sub	sp, #16
 80035ae:	af00      	add	r7, sp, #0
 80035b0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035b2:	2300      	movs	r3, #0
 80035b4:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80035bc:	b2db      	uxtb	r3, r3
 80035be:	2b02      	cmp	r3, #2
 80035c0:	d005      	beq.n	80035ce <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2204      	movs	r2, #4
 80035c6:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80035c8:	2301      	movs	r3, #1
 80035ca:	73fb      	strb	r3, [r7, #15]
 80035cc:	e047      	b.n	800365e <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	681a      	ldr	r2, [r3, #0]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f022 020e 	bic.w	r2, r2, #14
 80035dc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f022 0201 	bic.w	r2, r2, #1
 80035ec:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035f2:	681a      	ldr	r2, [r3, #0]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80035fc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003602:	f003 021c 	and.w	r2, r3, #28
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800360a:	2101      	movs	r1, #1
 800360c:	fa01 f202 	lsl.w	r2, r1, r2
 8003610:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003616:	687a      	ldr	r2, [r7, #4]
 8003618:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800361a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003620:	2b00      	cmp	r3, #0
 8003622:	d00c      	beq.n	800363e <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800362e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003632:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003638:	687a      	ldr	r2, [r7, #4]
 800363a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800363c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2201      	movs	r2, #1
 8003642:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2200      	movs	r2, #0
 800364a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003652:	2b00      	cmp	r3, #0
 8003654:	d003      	beq.n	800365e <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	4798      	blx	r3
    }
  }
  return status;
 800365e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003660:	4618      	mov	r0, r3
 8003662:	3710      	adds	r7, #16
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}

08003668 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b084      	sub	sp, #16
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003684:	f003 031c 	and.w	r3, r3, #28
 8003688:	2204      	movs	r2, #4
 800368a:	409a      	lsls	r2, r3
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	4013      	ands	r3, r2
 8003690:	2b00      	cmp	r3, #0
 8003692:	d026      	beq.n	80036e2 <HAL_DMA_IRQHandler+0x7a>
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	f003 0304 	and.w	r3, r3, #4
 800369a:	2b00      	cmp	r3, #0
 800369c:	d021      	beq.n	80036e2 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f003 0320 	and.w	r3, r3, #32
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d107      	bne.n	80036bc <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	681a      	ldr	r2, [r3, #0]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f022 0204 	bic.w	r2, r2, #4
 80036ba:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036c0:	f003 021c 	and.w	r2, r3, #28
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c8:	2104      	movs	r1, #4
 80036ca:	fa01 f202 	lsl.w	r2, r1, r2
 80036ce:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d071      	beq.n	80037bc <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036dc:	6878      	ldr	r0, [r7, #4]
 80036de:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80036e0:	e06c      	b.n	80037bc <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036e6:	f003 031c 	and.w	r3, r3, #28
 80036ea:	2202      	movs	r2, #2
 80036ec:	409a      	lsls	r2, r3
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	4013      	ands	r3, r2
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d02e      	beq.n	8003754 <HAL_DMA_IRQHandler+0xec>
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	f003 0302 	and.w	r3, r3, #2
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d029      	beq.n	8003754 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f003 0320 	and.w	r3, r3, #32
 800370a:	2b00      	cmp	r3, #0
 800370c:	d10b      	bne.n	8003726 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	681a      	ldr	r2, [r3, #0]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f022 020a 	bic.w	r2, r2, #10
 800371c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2201      	movs	r2, #1
 8003722:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800372a:	f003 021c 	and.w	r2, r3, #28
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003732:	2102      	movs	r1, #2
 8003734:	fa01 f202 	lsl.w	r2, r1, r2
 8003738:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2200      	movs	r2, #0
 800373e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003746:	2b00      	cmp	r3, #0
 8003748:	d038      	beq.n	80037bc <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003752:	e033      	b.n	80037bc <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003758:	f003 031c 	and.w	r3, r3, #28
 800375c:	2208      	movs	r2, #8
 800375e:	409a      	lsls	r2, r3
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	4013      	ands	r3, r2
 8003764:	2b00      	cmp	r3, #0
 8003766:	d02a      	beq.n	80037be <HAL_DMA_IRQHandler+0x156>
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	f003 0308 	and.w	r3, r3, #8
 800376e:	2b00      	cmp	r3, #0
 8003770:	d025      	beq.n	80037be <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f022 020e 	bic.w	r2, r2, #14
 8003780:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003786:	f003 021c 	and.w	r2, r3, #28
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378e:	2101      	movs	r1, #1
 8003790:	fa01 f202 	lsl.w	r2, r1, r2
 8003794:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2201      	movs	r2, #1
 800379a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2201      	movs	r2, #1
 80037a0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2200      	movs	r2, #0
 80037a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d004      	beq.n	80037be <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037b8:	6878      	ldr	r0, [r7, #4]
 80037ba:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80037bc:	bf00      	nop
 80037be:	bf00      	nop
}
 80037c0:	3710      	adds	r7, #16
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}

080037c6 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80037c6:	b480      	push	{r7}
 80037c8:	b085      	sub	sp, #20
 80037ca:	af00      	add	r7, sp, #0
 80037cc:	60f8      	str	r0, [r7, #12]
 80037ce:	60b9      	str	r1, [r7, #8]
 80037d0:	607a      	str	r2, [r7, #4]
 80037d2:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037d8:	68fa      	ldr	r2, [r7, #12]
 80037da:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80037dc:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d004      	beq.n	80037f0 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037ea:	68fa      	ldr	r2, [r7, #12]
 80037ec:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80037ee:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037f4:	f003 021c 	and.w	r2, r3, #28
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fc:	2101      	movs	r1, #1
 80037fe:	fa01 f202 	lsl.w	r2, r1, r2
 8003802:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	683a      	ldr	r2, [r7, #0]
 800380a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	2b10      	cmp	r3, #16
 8003812:	d108      	bne.n	8003826 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	687a      	ldr	r2, [r7, #4]
 800381a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	68ba      	ldr	r2, [r7, #8]
 8003822:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003824:	e007      	b.n	8003836 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	68ba      	ldr	r2, [r7, #8]
 800382c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	687a      	ldr	r2, [r7, #4]
 8003834:	60da      	str	r2, [r3, #12]
}
 8003836:	bf00      	nop
 8003838:	3714      	adds	r7, #20
 800383a:	46bd      	mov	sp, r7
 800383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003840:	4770      	bx	lr
	...

08003844 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003844:	b480      	push	{r7}
 8003846:	b085      	sub	sp, #20
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	461a      	mov	r2, r3
 8003852:	4b17      	ldr	r3, [pc, #92]	; (80038b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003854:	429a      	cmp	r2, r3
 8003856:	d80a      	bhi.n	800386e <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800385c:	089b      	lsrs	r3, r3, #2
 800385e:	009b      	lsls	r3, r3, #2
 8003860:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003864:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8003868:	687a      	ldr	r2, [r7, #4]
 800386a:	6493      	str	r3, [r2, #72]	; 0x48
 800386c:	e007      	b.n	800387e <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003872:	089b      	lsrs	r3, r3, #2
 8003874:	009a      	lsls	r2, r3, #2
 8003876:	4b0f      	ldr	r3, [pc, #60]	; (80038b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003878:	4413      	add	r3, r2
 800387a:	687a      	ldr	r2, [r7, #4]
 800387c:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	b2db      	uxtb	r3, r3
 8003884:	3b08      	subs	r3, #8
 8003886:	4a0c      	ldr	r2, [pc, #48]	; (80038b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003888:	fba2 2303 	umull	r2, r3, r2, r3
 800388c:	091b      	lsrs	r3, r3, #4
 800388e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	4a0a      	ldr	r2, [pc, #40]	; (80038bc <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003894:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	f003 031f 	and.w	r3, r3, #31
 800389c:	2201      	movs	r2, #1
 800389e:	409a      	lsls	r2, r3
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	651a      	str	r2, [r3, #80]	; 0x50
}
 80038a4:	bf00      	nop
 80038a6:	3714      	adds	r7, #20
 80038a8:	46bd      	mov	sp, r7
 80038aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ae:	4770      	bx	lr
 80038b0:	40020407 	.word	0x40020407
 80038b4:	4002081c 	.word	0x4002081c
 80038b8:	cccccccd 	.word	0xcccccccd
 80038bc:	40020880 	.word	0x40020880

080038c0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80038c0:	b480      	push	{r7}
 80038c2:	b085      	sub	sp, #20
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80038d0:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80038d2:	68fa      	ldr	r2, [r7, #12]
 80038d4:	4b0b      	ldr	r3, [pc, #44]	; (8003904 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80038d6:	4413      	add	r3, r2
 80038d8:	009b      	lsls	r3, r3, #2
 80038da:	461a      	mov	r2, r3
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	4a09      	ldr	r2, [pc, #36]	; (8003908 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 80038e4:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	3b01      	subs	r3, #1
 80038ea:	f003 0303 	and.w	r3, r3, #3
 80038ee:	2201      	movs	r2, #1
 80038f0:	409a      	lsls	r2, r3
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80038f6:	bf00      	nop
 80038f8:	3714      	adds	r7, #20
 80038fa:	46bd      	mov	sp, r7
 80038fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003900:	4770      	bx	lr
 8003902:	bf00      	nop
 8003904:	1000823f 	.word	0x1000823f
 8003908:	40020940 	.word	0x40020940

0800390c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800390c:	b480      	push	{r7}
 800390e:	b087      	sub	sp, #28
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
 8003914:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003916:	2300      	movs	r3, #0
 8003918:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800391a:	e14c      	b.n	8003bb6 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	681a      	ldr	r2, [r3, #0]
 8003920:	2101      	movs	r1, #1
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	fa01 f303 	lsl.w	r3, r1, r3
 8003928:	4013      	ands	r3, r2
 800392a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	2b00      	cmp	r3, #0
 8003930:	f000 813e 	beq.w	8003bb0 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	f003 0303 	and.w	r3, r3, #3
 800393c:	2b01      	cmp	r3, #1
 800393e:	d005      	beq.n	800394c <HAL_GPIO_Init+0x40>
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	f003 0303 	and.w	r3, r3, #3
 8003948:	2b02      	cmp	r3, #2
 800394a:	d130      	bne.n	80039ae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	005b      	lsls	r3, r3, #1
 8003956:	2203      	movs	r2, #3
 8003958:	fa02 f303 	lsl.w	r3, r2, r3
 800395c:	43db      	mvns	r3, r3
 800395e:	693a      	ldr	r2, [r7, #16]
 8003960:	4013      	ands	r3, r2
 8003962:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	68da      	ldr	r2, [r3, #12]
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	005b      	lsls	r3, r3, #1
 800396c:	fa02 f303 	lsl.w	r3, r2, r3
 8003970:	693a      	ldr	r2, [r7, #16]
 8003972:	4313      	orrs	r3, r2
 8003974:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	693a      	ldr	r2, [r7, #16]
 800397a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003982:	2201      	movs	r2, #1
 8003984:	697b      	ldr	r3, [r7, #20]
 8003986:	fa02 f303 	lsl.w	r3, r2, r3
 800398a:	43db      	mvns	r3, r3
 800398c:	693a      	ldr	r2, [r7, #16]
 800398e:	4013      	ands	r3, r2
 8003990:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	091b      	lsrs	r3, r3, #4
 8003998:	f003 0201 	and.w	r2, r3, #1
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	fa02 f303 	lsl.w	r3, r2, r3
 80039a2:	693a      	ldr	r2, [r7, #16]
 80039a4:	4313      	orrs	r3, r2
 80039a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	693a      	ldr	r2, [r7, #16]
 80039ac:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	f003 0303 	and.w	r3, r3, #3
 80039b6:	2b03      	cmp	r3, #3
 80039b8:	d017      	beq.n	80039ea <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	68db      	ldr	r3, [r3, #12]
 80039be:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	005b      	lsls	r3, r3, #1
 80039c4:	2203      	movs	r2, #3
 80039c6:	fa02 f303 	lsl.w	r3, r2, r3
 80039ca:	43db      	mvns	r3, r3
 80039cc:	693a      	ldr	r2, [r7, #16]
 80039ce:	4013      	ands	r3, r2
 80039d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	689a      	ldr	r2, [r3, #8]
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	005b      	lsls	r3, r3, #1
 80039da:	fa02 f303 	lsl.w	r3, r2, r3
 80039de:	693a      	ldr	r2, [r7, #16]
 80039e0:	4313      	orrs	r3, r2
 80039e2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	693a      	ldr	r2, [r7, #16]
 80039e8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	f003 0303 	and.w	r3, r3, #3
 80039f2:	2b02      	cmp	r3, #2
 80039f4:	d123      	bne.n	8003a3e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	08da      	lsrs	r2, r3, #3
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	3208      	adds	r2, #8
 80039fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a02:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003a04:	697b      	ldr	r3, [r7, #20]
 8003a06:	f003 0307 	and.w	r3, r3, #7
 8003a0a:	009b      	lsls	r3, r3, #2
 8003a0c:	220f      	movs	r2, #15
 8003a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a12:	43db      	mvns	r3, r3
 8003a14:	693a      	ldr	r2, [r7, #16]
 8003a16:	4013      	ands	r3, r2
 8003a18:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	691a      	ldr	r2, [r3, #16]
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	f003 0307 	and.w	r3, r3, #7
 8003a24:	009b      	lsls	r3, r3, #2
 8003a26:	fa02 f303 	lsl.w	r3, r2, r3
 8003a2a:	693a      	ldr	r2, [r7, #16]
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	08da      	lsrs	r2, r3, #3
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	3208      	adds	r2, #8
 8003a38:	6939      	ldr	r1, [r7, #16]
 8003a3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	005b      	lsls	r3, r3, #1
 8003a48:	2203      	movs	r2, #3
 8003a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a4e:	43db      	mvns	r3, r3
 8003a50:	693a      	ldr	r2, [r7, #16]
 8003a52:	4013      	ands	r3, r2
 8003a54:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	f003 0203 	and.w	r2, r3, #3
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	005b      	lsls	r3, r3, #1
 8003a62:	fa02 f303 	lsl.w	r3, r2, r3
 8003a66:	693a      	ldr	r2, [r7, #16]
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	693a      	ldr	r2, [r7, #16]
 8003a70:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	f000 8098 	beq.w	8003bb0 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8003a80:	4a54      	ldr	r2, [pc, #336]	; (8003bd4 <HAL_GPIO_Init+0x2c8>)
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	089b      	lsrs	r3, r3, #2
 8003a86:	3302      	adds	r3, #2
 8003a88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a8c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	f003 0303 	and.w	r3, r3, #3
 8003a94:	009b      	lsls	r3, r3, #2
 8003a96:	220f      	movs	r2, #15
 8003a98:	fa02 f303 	lsl.w	r3, r2, r3
 8003a9c:	43db      	mvns	r3, r3
 8003a9e:	693a      	ldr	r2, [r7, #16]
 8003aa0:	4013      	ands	r3, r2
 8003aa2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003aaa:	d019      	beq.n	8003ae0 <HAL_GPIO_Init+0x1d4>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	4a4a      	ldr	r2, [pc, #296]	; (8003bd8 <HAL_GPIO_Init+0x2cc>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d013      	beq.n	8003adc <HAL_GPIO_Init+0x1d0>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	4a49      	ldr	r2, [pc, #292]	; (8003bdc <HAL_GPIO_Init+0x2d0>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d00d      	beq.n	8003ad8 <HAL_GPIO_Init+0x1cc>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	4a48      	ldr	r2, [pc, #288]	; (8003be0 <HAL_GPIO_Init+0x2d4>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d007      	beq.n	8003ad4 <HAL_GPIO_Init+0x1c8>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	4a47      	ldr	r2, [pc, #284]	; (8003be4 <HAL_GPIO_Init+0x2d8>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d101      	bne.n	8003ad0 <HAL_GPIO_Init+0x1c4>
 8003acc:	2304      	movs	r3, #4
 8003ace:	e008      	b.n	8003ae2 <HAL_GPIO_Init+0x1d6>
 8003ad0:	2307      	movs	r3, #7
 8003ad2:	e006      	b.n	8003ae2 <HAL_GPIO_Init+0x1d6>
 8003ad4:	2303      	movs	r3, #3
 8003ad6:	e004      	b.n	8003ae2 <HAL_GPIO_Init+0x1d6>
 8003ad8:	2302      	movs	r3, #2
 8003ada:	e002      	b.n	8003ae2 <HAL_GPIO_Init+0x1d6>
 8003adc:	2301      	movs	r3, #1
 8003ade:	e000      	b.n	8003ae2 <HAL_GPIO_Init+0x1d6>
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	697a      	ldr	r2, [r7, #20]
 8003ae4:	f002 0203 	and.w	r2, r2, #3
 8003ae8:	0092      	lsls	r2, r2, #2
 8003aea:	4093      	lsls	r3, r2
 8003aec:	693a      	ldr	r2, [r7, #16]
 8003aee:	4313      	orrs	r3, r2
 8003af0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003af2:	4938      	ldr	r1, [pc, #224]	; (8003bd4 <HAL_GPIO_Init+0x2c8>)
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	089b      	lsrs	r3, r3, #2
 8003af8:	3302      	adds	r3, #2
 8003afa:	693a      	ldr	r2, [r7, #16]
 8003afc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003b00:	4b39      	ldr	r3, [pc, #228]	; (8003be8 <HAL_GPIO_Init+0x2dc>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	43db      	mvns	r3, r3
 8003b0a:	693a      	ldr	r2, [r7, #16]
 8003b0c:	4013      	ands	r3, r2
 8003b0e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d003      	beq.n	8003b24 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8003b1c:	693a      	ldr	r2, [r7, #16]
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	4313      	orrs	r3, r2
 8003b22:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003b24:	4a30      	ldr	r2, [pc, #192]	; (8003be8 <HAL_GPIO_Init+0x2dc>)
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003b2a:	4b2f      	ldr	r3, [pc, #188]	; (8003be8 <HAL_GPIO_Init+0x2dc>)
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	43db      	mvns	r3, r3
 8003b34:	693a      	ldr	r2, [r7, #16]
 8003b36:	4013      	ands	r3, r2
 8003b38:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d003      	beq.n	8003b4e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8003b46:	693a      	ldr	r2, [r7, #16]
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003b4e:	4a26      	ldr	r2, [pc, #152]	; (8003be8 <HAL_GPIO_Init+0x2dc>)
 8003b50:	693b      	ldr	r3, [r7, #16]
 8003b52:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003b54:	4b24      	ldr	r3, [pc, #144]	; (8003be8 <HAL_GPIO_Init+0x2dc>)
 8003b56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	43db      	mvns	r3, r3
 8003b60:	693a      	ldr	r2, [r7, #16]
 8003b62:	4013      	ands	r3, r2
 8003b64:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d003      	beq.n	8003b7a <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8003b72:	693a      	ldr	r2, [r7, #16]
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	4313      	orrs	r3, r2
 8003b78:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003b7a:	4a1b      	ldr	r2, [pc, #108]	; (8003be8 <HAL_GPIO_Init+0x2dc>)
 8003b7c:	693b      	ldr	r3, [r7, #16]
 8003b7e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8003b82:	4b19      	ldr	r3, [pc, #100]	; (8003be8 <HAL_GPIO_Init+0x2dc>)
 8003b84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	43db      	mvns	r3, r3
 8003b8e:	693a      	ldr	r2, [r7, #16]
 8003b90:	4013      	ands	r3, r2
 8003b92:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d003      	beq.n	8003ba8 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8003ba0:	693a      	ldr	r2, [r7, #16]
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003ba8:	4a0f      	ldr	r2, [pc, #60]	; (8003be8 <HAL_GPIO_Init+0x2dc>)
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	3301      	adds	r3, #1
 8003bb4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	681a      	ldr	r2, [r3, #0]
 8003bba:	697b      	ldr	r3, [r7, #20]
 8003bbc:	fa22 f303 	lsr.w	r3, r2, r3
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	f47f aeab 	bne.w	800391c <HAL_GPIO_Init+0x10>
  }
}
 8003bc6:	bf00      	nop
 8003bc8:	bf00      	nop
 8003bca:	371c      	adds	r7, #28
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd2:	4770      	bx	lr
 8003bd4:	40010000 	.word	0x40010000
 8003bd8:	48000400 	.word	0x48000400
 8003bdc:	48000800 	.word	0x48000800
 8003be0:	48000c00 	.word	0x48000c00
 8003be4:	48001000 	.word	0x48001000
 8003be8:	58000800 	.word	0x58000800

08003bec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b083      	sub	sp, #12
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
 8003bf4:	460b      	mov	r3, r1
 8003bf6:	807b      	strh	r3, [r7, #2]
 8003bf8:	4613      	mov	r3, r2
 8003bfa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003bfc:	787b      	ldrb	r3, [r7, #1]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d003      	beq.n	8003c0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003c02:	887a      	ldrh	r2, [r7, #2]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003c08:	e002      	b.n	8003c10 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003c0a:	887a      	ldrh	r2, [r7, #2]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003c10:	bf00      	nop
 8003c12:	370c      	adds	r7, #12
 8003c14:	46bd      	mov	sp, r7
 8003c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1a:	4770      	bx	lr

08003c1c <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b082      	sub	sp, #8
 8003c20:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8003c22:	4b0a      	ldr	r3, [pc, #40]	; (8003c4c <HAL_HSEM_IRQHandler+0x30>)
 8003c24:	68db      	ldr	r3, [r3, #12]
 8003c26:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8003c28:	4b08      	ldr	r3, [pc, #32]	; (8003c4c <HAL_HSEM_IRQHandler+0x30>)
 8003c2a:	681a      	ldr	r2, [r3, #0]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	43db      	mvns	r3, r3
 8003c30:	4906      	ldr	r1, [pc, #24]	; (8003c4c <HAL_HSEM_IRQHandler+0x30>)
 8003c32:	4013      	ands	r3, r2
 8003c34:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8003c36:	4a05      	ldr	r2, [pc, #20]	; (8003c4c <HAL_HSEM_IRQHandler+0x30>)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8003c3c:	6878      	ldr	r0, [r7, #4]
 8003c3e:	f000 f807 	bl	8003c50 <HAL_HSEM_FreeCallback>
}
 8003c42:	bf00      	nop
 8003c44:	3708      	adds	r7, #8
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}
 8003c4a:	bf00      	nop
 8003c4c:	58001500 	.word	0x58001500

08003c50 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8003c50:	b480      	push	{r7}
 8003c52:	b083      	sub	sp, #12
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8003c58:	bf00      	nop
 8003c5a:	370c      	adds	r7, #12
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c62:	4770      	bx	lr

08003c64 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b082      	sub	sp, #8
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d101      	bne.n	8003c76 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	e081      	b.n	8003d7a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c7c:	b2db      	uxtb	r3, r3
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d106      	bne.n	8003c90 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2200      	movs	r2, #0
 8003c86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003c8a:	6878      	ldr	r0, [r7, #4]
 8003c8c:	f7fe fde8 	bl	8002860 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2224      	movs	r2, #36	; 0x24
 8003c94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	681a      	ldr	r2, [r3, #0]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f022 0201 	bic.w	r2, r2, #1
 8003ca6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	685a      	ldr	r2, [r3, #4]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003cb4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	689a      	ldr	r2, [r3, #8]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003cc4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	68db      	ldr	r3, [r3, #12]
 8003cca:	2b01      	cmp	r3, #1
 8003ccc:	d107      	bne.n	8003cde <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	689a      	ldr	r2, [r3, #8]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003cda:	609a      	str	r2, [r3, #8]
 8003cdc:	e006      	b.n	8003cec <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	689a      	ldr	r2, [r3, #8]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003cea:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	68db      	ldr	r3, [r3, #12]
 8003cf0:	2b02      	cmp	r3, #2
 8003cf2:	d104      	bne.n	8003cfe <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003cfc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	687a      	ldr	r2, [r7, #4]
 8003d06:	6812      	ldr	r2, [r2, #0]
 8003d08:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003d0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d10:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	68da      	ldr	r2, [r3, #12]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003d20:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	691a      	ldr	r2, [r3, #16]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	695b      	ldr	r3, [r3, #20]
 8003d2a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	699b      	ldr	r3, [r3, #24]
 8003d32:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	430a      	orrs	r2, r1
 8003d3a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	69d9      	ldr	r1, [r3, #28]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6a1a      	ldr	r2, [r3, #32]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	430a      	orrs	r2, r1
 8003d4a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	681a      	ldr	r2, [r3, #0]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f042 0201 	orr.w	r2, r2, #1
 8003d5a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2220      	movs	r2, #32
 8003d66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2200      	movs	r2, #0
 8003d74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003d78:	2300      	movs	r3, #0
}
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	3708      	adds	r7, #8
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}
	...

08003d84 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b088      	sub	sp, #32
 8003d88:	af02      	add	r7, sp, #8
 8003d8a:	60f8      	str	r0, [r7, #12]
 8003d8c:	4608      	mov	r0, r1
 8003d8e:	4611      	mov	r1, r2
 8003d90:	461a      	mov	r2, r3
 8003d92:	4603      	mov	r3, r0
 8003d94:	817b      	strh	r3, [r7, #10]
 8003d96:	460b      	mov	r3, r1
 8003d98:	813b      	strh	r3, [r7, #8]
 8003d9a:	4613      	mov	r3, r2
 8003d9c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003da4:	b2db      	uxtb	r3, r3
 8003da6:	2b20      	cmp	r3, #32
 8003da8:	f040 80f9 	bne.w	8003f9e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003dac:	6a3b      	ldr	r3, [r7, #32]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d002      	beq.n	8003db8 <HAL_I2C_Mem_Write+0x34>
 8003db2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d105      	bne.n	8003dc4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003dbe:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	e0ed      	b.n	8003fa0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003dca:	2b01      	cmp	r3, #1
 8003dcc:	d101      	bne.n	8003dd2 <HAL_I2C_Mem_Write+0x4e>
 8003dce:	2302      	movs	r3, #2
 8003dd0:	e0e6      	b.n	8003fa0 <HAL_I2C_Mem_Write+0x21c>
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	2201      	movs	r2, #1
 8003dd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003dda:	f7ff f905 	bl	8002fe8 <HAL_GetTick>
 8003dde:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	9300      	str	r3, [sp, #0]
 8003de4:	2319      	movs	r3, #25
 8003de6:	2201      	movs	r2, #1
 8003de8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003dec:	68f8      	ldr	r0, [r7, #12]
 8003dee:	f000 fadd 	bl	80043ac <I2C_WaitOnFlagUntilTimeout>
 8003df2:	4603      	mov	r3, r0
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d001      	beq.n	8003dfc <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	e0d1      	b.n	8003fa0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	2221      	movs	r2, #33	; 0x21
 8003e00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	2240      	movs	r2, #64	; 0x40
 8003e08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	6a3a      	ldr	r2, [r7, #32]
 8003e16:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003e1c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2200      	movs	r2, #0
 8003e22:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003e24:	88f8      	ldrh	r0, [r7, #6]
 8003e26:	893a      	ldrh	r2, [r7, #8]
 8003e28:	8979      	ldrh	r1, [r7, #10]
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	9301      	str	r3, [sp, #4]
 8003e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e30:	9300      	str	r3, [sp, #0]
 8003e32:	4603      	mov	r3, r0
 8003e34:	68f8      	ldr	r0, [r7, #12]
 8003e36:	f000 f9ed 	bl	8004214 <I2C_RequestMemoryWrite>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d005      	beq.n	8003e4c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	2200      	movs	r2, #0
 8003e44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	e0a9      	b.n	8003fa0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e50:	b29b      	uxth	r3, r3
 8003e52:	2bff      	cmp	r3, #255	; 0xff
 8003e54:	d90e      	bls.n	8003e74 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	22ff      	movs	r2, #255	; 0xff
 8003e5a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e60:	b2da      	uxtb	r2, r3
 8003e62:	8979      	ldrh	r1, [r7, #10]
 8003e64:	2300      	movs	r3, #0
 8003e66:	9300      	str	r3, [sp, #0]
 8003e68:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003e6c:	68f8      	ldr	r0, [r7, #12]
 8003e6e:	f000 fc57 	bl	8004720 <I2C_TransferConfig>
 8003e72:	e00f      	b.n	8003e94 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e78:	b29a      	uxth	r2, r3
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e82:	b2da      	uxtb	r2, r3
 8003e84:	8979      	ldrh	r1, [r7, #10]
 8003e86:	2300      	movs	r3, #0
 8003e88:	9300      	str	r3, [sp, #0]
 8003e8a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003e8e:	68f8      	ldr	r0, [r7, #12]
 8003e90:	f000 fc46 	bl	8004720 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e94:	697a      	ldr	r2, [r7, #20]
 8003e96:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e98:	68f8      	ldr	r0, [r7, #12]
 8003e9a:	f000 fad6 	bl	800444a <I2C_WaitOnTXISFlagUntilTimeout>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d001      	beq.n	8003ea8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	e07b      	b.n	8003fa0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eac:	781a      	ldrb	r2, [r3, #0]
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb8:	1c5a      	adds	r2, r3, #1
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ec2:	b29b      	uxth	r3, r3
 8003ec4:	3b01      	subs	r3, #1
 8003ec6:	b29a      	uxth	r2, r3
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ed0:	3b01      	subs	r3, #1
 8003ed2:	b29a      	uxth	r2, r3
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003edc:	b29b      	uxth	r3, r3
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d034      	beq.n	8003f4c <HAL_I2C_Mem_Write+0x1c8>
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d130      	bne.n	8003f4c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	9300      	str	r3, [sp, #0]
 8003eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	2180      	movs	r1, #128	; 0x80
 8003ef4:	68f8      	ldr	r0, [r7, #12]
 8003ef6:	f000 fa59 	bl	80043ac <I2C_WaitOnFlagUntilTimeout>
 8003efa:	4603      	mov	r3, r0
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d001      	beq.n	8003f04 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003f00:	2301      	movs	r3, #1
 8003f02:	e04d      	b.n	8003fa0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f08:	b29b      	uxth	r3, r3
 8003f0a:	2bff      	cmp	r3, #255	; 0xff
 8003f0c:	d90e      	bls.n	8003f2c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	22ff      	movs	r2, #255	; 0xff
 8003f12:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f18:	b2da      	uxtb	r2, r3
 8003f1a:	8979      	ldrh	r1, [r7, #10]
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	9300      	str	r3, [sp, #0]
 8003f20:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003f24:	68f8      	ldr	r0, [r7, #12]
 8003f26:	f000 fbfb 	bl	8004720 <I2C_TransferConfig>
 8003f2a:	e00f      	b.n	8003f4c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f30:	b29a      	uxth	r2, r3
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f3a:	b2da      	uxtb	r2, r3
 8003f3c:	8979      	ldrh	r1, [r7, #10]
 8003f3e:	2300      	movs	r3, #0
 8003f40:	9300      	str	r3, [sp, #0]
 8003f42:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003f46:	68f8      	ldr	r0, [r7, #12]
 8003f48:	f000 fbea 	bl	8004720 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f50:	b29b      	uxth	r3, r3
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d19e      	bne.n	8003e94 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f56:	697a      	ldr	r2, [r7, #20]
 8003f58:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003f5a:	68f8      	ldr	r0, [r7, #12]
 8003f5c:	f000 fabc 	bl	80044d8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003f60:	4603      	mov	r3, r0
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d001      	beq.n	8003f6a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003f66:	2301      	movs	r3, #1
 8003f68:	e01a      	b.n	8003fa0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	2220      	movs	r2, #32
 8003f70:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	6859      	ldr	r1, [r3, #4]
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681a      	ldr	r2, [r3, #0]
 8003f7c:	4b0a      	ldr	r3, [pc, #40]	; (8003fa8 <HAL_I2C_Mem_Write+0x224>)
 8003f7e:	400b      	ands	r3, r1
 8003f80:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	2220      	movs	r2, #32
 8003f86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	2200      	movs	r2, #0
 8003f96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	e000      	b.n	8003fa0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003f9e:	2302      	movs	r3, #2
  }
}
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	3718      	adds	r7, #24
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bd80      	pop	{r7, pc}
 8003fa8:	fe00e800 	.word	0xfe00e800

08003fac <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b088      	sub	sp, #32
 8003fb0:	af02      	add	r7, sp, #8
 8003fb2:	60f8      	str	r0, [r7, #12]
 8003fb4:	4608      	mov	r0, r1
 8003fb6:	4611      	mov	r1, r2
 8003fb8:	461a      	mov	r2, r3
 8003fba:	4603      	mov	r3, r0
 8003fbc:	817b      	strh	r3, [r7, #10]
 8003fbe:	460b      	mov	r3, r1
 8003fc0:	813b      	strh	r3, [r7, #8]
 8003fc2:	4613      	mov	r3, r2
 8003fc4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003fcc:	b2db      	uxtb	r3, r3
 8003fce:	2b20      	cmp	r3, #32
 8003fd0:	f040 80fd 	bne.w	80041ce <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003fd4:	6a3b      	ldr	r3, [r7, #32]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d002      	beq.n	8003fe0 <HAL_I2C_Mem_Read+0x34>
 8003fda:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d105      	bne.n	8003fec <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003fe6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	e0f1      	b.n	80041d0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003ff2:	2b01      	cmp	r3, #1
 8003ff4:	d101      	bne.n	8003ffa <HAL_I2C_Mem_Read+0x4e>
 8003ff6:	2302      	movs	r3, #2
 8003ff8:	e0ea      	b.n	80041d0 <HAL_I2C_Mem_Read+0x224>
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2201      	movs	r2, #1
 8003ffe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004002:	f7fe fff1 	bl	8002fe8 <HAL_GetTick>
 8004006:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	9300      	str	r3, [sp, #0]
 800400c:	2319      	movs	r3, #25
 800400e:	2201      	movs	r2, #1
 8004010:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004014:	68f8      	ldr	r0, [r7, #12]
 8004016:	f000 f9c9 	bl	80043ac <I2C_WaitOnFlagUntilTimeout>
 800401a:	4603      	mov	r3, r0
 800401c:	2b00      	cmp	r3, #0
 800401e:	d001      	beq.n	8004024 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004020:	2301      	movs	r3, #1
 8004022:	e0d5      	b.n	80041d0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	2222      	movs	r2, #34	; 0x22
 8004028:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	2240      	movs	r2, #64	; 0x40
 8004030:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	2200      	movs	r2, #0
 8004038:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	6a3a      	ldr	r2, [r7, #32]
 800403e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004044:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	2200      	movs	r2, #0
 800404a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800404c:	88f8      	ldrh	r0, [r7, #6]
 800404e:	893a      	ldrh	r2, [r7, #8]
 8004050:	8979      	ldrh	r1, [r7, #10]
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	9301      	str	r3, [sp, #4]
 8004056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004058:	9300      	str	r3, [sp, #0]
 800405a:	4603      	mov	r3, r0
 800405c:	68f8      	ldr	r0, [r7, #12]
 800405e:	f000 f92d 	bl	80042bc <I2C_RequestMemoryRead>
 8004062:	4603      	mov	r3, r0
 8004064:	2b00      	cmp	r3, #0
 8004066:	d005      	beq.n	8004074 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	2200      	movs	r2, #0
 800406c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004070:	2301      	movs	r3, #1
 8004072:	e0ad      	b.n	80041d0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004078:	b29b      	uxth	r3, r3
 800407a:	2bff      	cmp	r3, #255	; 0xff
 800407c:	d90e      	bls.n	800409c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	22ff      	movs	r2, #255	; 0xff
 8004082:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004088:	b2da      	uxtb	r2, r3
 800408a:	8979      	ldrh	r1, [r7, #10]
 800408c:	4b52      	ldr	r3, [pc, #328]	; (80041d8 <HAL_I2C_Mem_Read+0x22c>)
 800408e:	9300      	str	r3, [sp, #0]
 8004090:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004094:	68f8      	ldr	r0, [r7, #12]
 8004096:	f000 fb43 	bl	8004720 <I2C_TransferConfig>
 800409a:	e00f      	b.n	80040bc <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040a0:	b29a      	uxth	r2, r3
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040aa:	b2da      	uxtb	r2, r3
 80040ac:	8979      	ldrh	r1, [r7, #10]
 80040ae:	4b4a      	ldr	r3, [pc, #296]	; (80041d8 <HAL_I2C_Mem_Read+0x22c>)
 80040b0:	9300      	str	r3, [sp, #0]
 80040b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80040b6:	68f8      	ldr	r0, [r7, #12]
 80040b8:	f000 fb32 	bl	8004720 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	9300      	str	r3, [sp, #0]
 80040c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040c2:	2200      	movs	r2, #0
 80040c4:	2104      	movs	r1, #4
 80040c6:	68f8      	ldr	r0, [r7, #12]
 80040c8:	f000 f970 	bl	80043ac <I2C_WaitOnFlagUntilTimeout>
 80040cc:	4603      	mov	r3, r0
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d001      	beq.n	80040d6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80040d2:	2301      	movs	r3, #1
 80040d4:	e07c      	b.n	80041d0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e0:	b2d2      	uxtb	r2, r2
 80040e2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e8:	1c5a      	adds	r2, r3, #1
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040f2:	3b01      	subs	r3, #1
 80040f4:	b29a      	uxth	r2, r3
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040fe:	b29b      	uxth	r3, r3
 8004100:	3b01      	subs	r3, #1
 8004102:	b29a      	uxth	r2, r3
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800410c:	b29b      	uxth	r3, r3
 800410e:	2b00      	cmp	r3, #0
 8004110:	d034      	beq.n	800417c <HAL_I2C_Mem_Read+0x1d0>
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004116:	2b00      	cmp	r3, #0
 8004118:	d130      	bne.n	800417c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	9300      	str	r3, [sp, #0]
 800411e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004120:	2200      	movs	r2, #0
 8004122:	2180      	movs	r1, #128	; 0x80
 8004124:	68f8      	ldr	r0, [r7, #12]
 8004126:	f000 f941 	bl	80043ac <I2C_WaitOnFlagUntilTimeout>
 800412a:	4603      	mov	r3, r0
 800412c:	2b00      	cmp	r3, #0
 800412e:	d001      	beq.n	8004134 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004130:	2301      	movs	r3, #1
 8004132:	e04d      	b.n	80041d0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004138:	b29b      	uxth	r3, r3
 800413a:	2bff      	cmp	r3, #255	; 0xff
 800413c:	d90e      	bls.n	800415c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	22ff      	movs	r2, #255	; 0xff
 8004142:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004148:	b2da      	uxtb	r2, r3
 800414a:	8979      	ldrh	r1, [r7, #10]
 800414c:	2300      	movs	r3, #0
 800414e:	9300      	str	r3, [sp, #0]
 8004150:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004154:	68f8      	ldr	r0, [r7, #12]
 8004156:	f000 fae3 	bl	8004720 <I2C_TransferConfig>
 800415a:	e00f      	b.n	800417c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004160:	b29a      	uxth	r2, r3
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800416a:	b2da      	uxtb	r2, r3
 800416c:	8979      	ldrh	r1, [r7, #10]
 800416e:	2300      	movs	r3, #0
 8004170:	9300      	str	r3, [sp, #0]
 8004172:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004176:	68f8      	ldr	r0, [r7, #12]
 8004178:	f000 fad2 	bl	8004720 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004180:	b29b      	uxth	r3, r3
 8004182:	2b00      	cmp	r3, #0
 8004184:	d19a      	bne.n	80040bc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004186:	697a      	ldr	r2, [r7, #20]
 8004188:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800418a:	68f8      	ldr	r0, [r7, #12]
 800418c:	f000 f9a4 	bl	80044d8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004190:	4603      	mov	r3, r0
 8004192:	2b00      	cmp	r3, #0
 8004194:	d001      	beq.n	800419a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	e01a      	b.n	80041d0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	2220      	movs	r2, #32
 80041a0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	6859      	ldr	r1, [r3, #4]
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681a      	ldr	r2, [r3, #0]
 80041ac:	4b0b      	ldr	r3, [pc, #44]	; (80041dc <HAL_I2C_Mem_Read+0x230>)
 80041ae:	400b      	ands	r3, r1
 80041b0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	2220      	movs	r2, #32
 80041b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	2200      	movs	r2, #0
 80041be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	2200      	movs	r2, #0
 80041c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80041ca:	2300      	movs	r3, #0
 80041cc:	e000      	b.n	80041d0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80041ce:	2302      	movs	r3, #2
  }
}
 80041d0:	4618      	mov	r0, r3
 80041d2:	3718      	adds	r7, #24
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bd80      	pop	{r7, pc}
 80041d8:	80002400 	.word	0x80002400
 80041dc:	fe00e800 	.word	0xfe00e800

080041e0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b084      	sub	sp, #16
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	699b      	ldr	r3, [r3, #24]
 80041ee:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d005      	beq.n	800420c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004204:	68ba      	ldr	r2, [r7, #8]
 8004206:	68f9      	ldr	r1, [r7, #12]
 8004208:	6878      	ldr	r0, [r7, #4]
 800420a:	4798      	blx	r3
  }
}
 800420c:	bf00      	nop
 800420e:	3710      	adds	r7, #16
 8004210:	46bd      	mov	sp, r7
 8004212:	bd80      	pop	{r7, pc}

08004214 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b086      	sub	sp, #24
 8004218:	af02      	add	r7, sp, #8
 800421a:	60f8      	str	r0, [r7, #12]
 800421c:	4608      	mov	r0, r1
 800421e:	4611      	mov	r1, r2
 8004220:	461a      	mov	r2, r3
 8004222:	4603      	mov	r3, r0
 8004224:	817b      	strh	r3, [r7, #10]
 8004226:	460b      	mov	r3, r1
 8004228:	813b      	strh	r3, [r7, #8]
 800422a:	4613      	mov	r3, r2
 800422c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800422e:	88fb      	ldrh	r3, [r7, #6]
 8004230:	b2da      	uxtb	r2, r3
 8004232:	8979      	ldrh	r1, [r7, #10]
 8004234:	4b20      	ldr	r3, [pc, #128]	; (80042b8 <I2C_RequestMemoryWrite+0xa4>)
 8004236:	9300      	str	r3, [sp, #0]
 8004238:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800423c:	68f8      	ldr	r0, [r7, #12]
 800423e:	f000 fa6f 	bl	8004720 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004242:	69fa      	ldr	r2, [r7, #28]
 8004244:	69b9      	ldr	r1, [r7, #24]
 8004246:	68f8      	ldr	r0, [r7, #12]
 8004248:	f000 f8ff 	bl	800444a <I2C_WaitOnTXISFlagUntilTimeout>
 800424c:	4603      	mov	r3, r0
 800424e:	2b00      	cmp	r3, #0
 8004250:	d001      	beq.n	8004256 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004252:	2301      	movs	r3, #1
 8004254:	e02c      	b.n	80042b0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004256:	88fb      	ldrh	r3, [r7, #6]
 8004258:	2b01      	cmp	r3, #1
 800425a:	d105      	bne.n	8004268 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800425c:	893b      	ldrh	r3, [r7, #8]
 800425e:	b2da      	uxtb	r2, r3
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	629a      	str	r2, [r3, #40]	; 0x28
 8004266:	e015      	b.n	8004294 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004268:	893b      	ldrh	r3, [r7, #8]
 800426a:	0a1b      	lsrs	r3, r3, #8
 800426c:	b29b      	uxth	r3, r3
 800426e:	b2da      	uxtb	r2, r3
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004276:	69fa      	ldr	r2, [r7, #28]
 8004278:	69b9      	ldr	r1, [r7, #24]
 800427a:	68f8      	ldr	r0, [r7, #12]
 800427c:	f000 f8e5 	bl	800444a <I2C_WaitOnTXISFlagUntilTimeout>
 8004280:	4603      	mov	r3, r0
 8004282:	2b00      	cmp	r3, #0
 8004284:	d001      	beq.n	800428a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004286:	2301      	movs	r3, #1
 8004288:	e012      	b.n	80042b0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800428a:	893b      	ldrh	r3, [r7, #8]
 800428c:	b2da      	uxtb	r2, r3
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004294:	69fb      	ldr	r3, [r7, #28]
 8004296:	9300      	str	r3, [sp, #0]
 8004298:	69bb      	ldr	r3, [r7, #24]
 800429a:	2200      	movs	r2, #0
 800429c:	2180      	movs	r1, #128	; 0x80
 800429e:	68f8      	ldr	r0, [r7, #12]
 80042a0:	f000 f884 	bl	80043ac <I2C_WaitOnFlagUntilTimeout>
 80042a4:	4603      	mov	r3, r0
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d001      	beq.n	80042ae <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80042aa:	2301      	movs	r3, #1
 80042ac:	e000      	b.n	80042b0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80042ae:	2300      	movs	r3, #0
}
 80042b0:	4618      	mov	r0, r3
 80042b2:	3710      	adds	r7, #16
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bd80      	pop	{r7, pc}
 80042b8:	80002000 	.word	0x80002000

080042bc <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b086      	sub	sp, #24
 80042c0:	af02      	add	r7, sp, #8
 80042c2:	60f8      	str	r0, [r7, #12]
 80042c4:	4608      	mov	r0, r1
 80042c6:	4611      	mov	r1, r2
 80042c8:	461a      	mov	r2, r3
 80042ca:	4603      	mov	r3, r0
 80042cc:	817b      	strh	r3, [r7, #10]
 80042ce:	460b      	mov	r3, r1
 80042d0:	813b      	strh	r3, [r7, #8]
 80042d2:	4613      	mov	r3, r2
 80042d4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80042d6:	88fb      	ldrh	r3, [r7, #6]
 80042d8:	b2da      	uxtb	r2, r3
 80042da:	8979      	ldrh	r1, [r7, #10]
 80042dc:	4b20      	ldr	r3, [pc, #128]	; (8004360 <I2C_RequestMemoryRead+0xa4>)
 80042de:	9300      	str	r3, [sp, #0]
 80042e0:	2300      	movs	r3, #0
 80042e2:	68f8      	ldr	r0, [r7, #12]
 80042e4:	f000 fa1c 	bl	8004720 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80042e8:	69fa      	ldr	r2, [r7, #28]
 80042ea:	69b9      	ldr	r1, [r7, #24]
 80042ec:	68f8      	ldr	r0, [r7, #12]
 80042ee:	f000 f8ac 	bl	800444a <I2C_WaitOnTXISFlagUntilTimeout>
 80042f2:	4603      	mov	r3, r0
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d001      	beq.n	80042fc <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80042f8:	2301      	movs	r3, #1
 80042fa:	e02c      	b.n	8004356 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80042fc:	88fb      	ldrh	r3, [r7, #6]
 80042fe:	2b01      	cmp	r3, #1
 8004300:	d105      	bne.n	800430e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004302:	893b      	ldrh	r3, [r7, #8]
 8004304:	b2da      	uxtb	r2, r3
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	629a      	str	r2, [r3, #40]	; 0x28
 800430c:	e015      	b.n	800433a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800430e:	893b      	ldrh	r3, [r7, #8]
 8004310:	0a1b      	lsrs	r3, r3, #8
 8004312:	b29b      	uxth	r3, r3
 8004314:	b2da      	uxtb	r2, r3
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800431c:	69fa      	ldr	r2, [r7, #28]
 800431e:	69b9      	ldr	r1, [r7, #24]
 8004320:	68f8      	ldr	r0, [r7, #12]
 8004322:	f000 f892 	bl	800444a <I2C_WaitOnTXISFlagUntilTimeout>
 8004326:	4603      	mov	r3, r0
 8004328:	2b00      	cmp	r3, #0
 800432a:	d001      	beq.n	8004330 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800432c:	2301      	movs	r3, #1
 800432e:	e012      	b.n	8004356 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004330:	893b      	ldrh	r3, [r7, #8]
 8004332:	b2da      	uxtb	r2, r3
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800433a:	69fb      	ldr	r3, [r7, #28]
 800433c:	9300      	str	r3, [sp, #0]
 800433e:	69bb      	ldr	r3, [r7, #24]
 8004340:	2200      	movs	r2, #0
 8004342:	2140      	movs	r1, #64	; 0x40
 8004344:	68f8      	ldr	r0, [r7, #12]
 8004346:	f000 f831 	bl	80043ac <I2C_WaitOnFlagUntilTimeout>
 800434a:	4603      	mov	r3, r0
 800434c:	2b00      	cmp	r3, #0
 800434e:	d001      	beq.n	8004354 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004350:	2301      	movs	r3, #1
 8004352:	e000      	b.n	8004356 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004354:	2300      	movs	r3, #0
}
 8004356:	4618      	mov	r0, r3
 8004358:	3710      	adds	r7, #16
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}
 800435e:	bf00      	nop
 8004360:	80002000 	.word	0x80002000

08004364 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004364:	b480      	push	{r7}
 8004366:	b083      	sub	sp, #12
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	699b      	ldr	r3, [r3, #24]
 8004372:	f003 0302 	and.w	r3, r3, #2
 8004376:	2b02      	cmp	r3, #2
 8004378:	d103      	bne.n	8004382 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	2200      	movs	r2, #0
 8004380:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	699b      	ldr	r3, [r3, #24]
 8004388:	f003 0301 	and.w	r3, r3, #1
 800438c:	2b01      	cmp	r3, #1
 800438e:	d007      	beq.n	80043a0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	699a      	ldr	r2, [r3, #24]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f042 0201 	orr.w	r2, r2, #1
 800439e:	619a      	str	r2, [r3, #24]
  }
}
 80043a0:	bf00      	nop
 80043a2:	370c      	adds	r7, #12
 80043a4:	46bd      	mov	sp, r7
 80043a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043aa:	4770      	bx	lr

080043ac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b084      	sub	sp, #16
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	60f8      	str	r0, [r7, #12]
 80043b4:	60b9      	str	r1, [r7, #8]
 80043b6:	603b      	str	r3, [r7, #0]
 80043b8:	4613      	mov	r3, r2
 80043ba:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80043bc:	e031      	b.n	8004422 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80043c4:	d02d      	beq.n	8004422 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043c6:	f7fe fe0f 	bl	8002fe8 <HAL_GetTick>
 80043ca:	4602      	mov	r2, r0
 80043cc:	69bb      	ldr	r3, [r7, #24]
 80043ce:	1ad3      	subs	r3, r2, r3
 80043d0:	683a      	ldr	r2, [r7, #0]
 80043d2:	429a      	cmp	r2, r3
 80043d4:	d302      	bcc.n	80043dc <I2C_WaitOnFlagUntilTimeout+0x30>
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d122      	bne.n	8004422 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	699a      	ldr	r2, [r3, #24]
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	4013      	ands	r3, r2
 80043e6:	68ba      	ldr	r2, [r7, #8]
 80043e8:	429a      	cmp	r2, r3
 80043ea:	bf0c      	ite	eq
 80043ec:	2301      	moveq	r3, #1
 80043ee:	2300      	movne	r3, #0
 80043f0:	b2db      	uxtb	r3, r3
 80043f2:	461a      	mov	r2, r3
 80043f4:	79fb      	ldrb	r3, [r7, #7]
 80043f6:	429a      	cmp	r2, r3
 80043f8:	d113      	bne.n	8004422 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043fe:	f043 0220 	orr.w	r2, r3, #32
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	2220      	movs	r2, #32
 800440a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	2200      	movs	r2, #0
 8004412:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	2200      	movs	r2, #0
 800441a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800441e:	2301      	movs	r3, #1
 8004420:	e00f      	b.n	8004442 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	699a      	ldr	r2, [r3, #24]
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	4013      	ands	r3, r2
 800442c:	68ba      	ldr	r2, [r7, #8]
 800442e:	429a      	cmp	r2, r3
 8004430:	bf0c      	ite	eq
 8004432:	2301      	moveq	r3, #1
 8004434:	2300      	movne	r3, #0
 8004436:	b2db      	uxtb	r3, r3
 8004438:	461a      	mov	r2, r3
 800443a:	79fb      	ldrb	r3, [r7, #7]
 800443c:	429a      	cmp	r2, r3
 800443e:	d0be      	beq.n	80043be <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004440:	2300      	movs	r3, #0
}
 8004442:	4618      	mov	r0, r3
 8004444:	3710      	adds	r7, #16
 8004446:	46bd      	mov	sp, r7
 8004448:	bd80      	pop	{r7, pc}

0800444a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800444a:	b580      	push	{r7, lr}
 800444c:	b084      	sub	sp, #16
 800444e:	af00      	add	r7, sp, #0
 8004450:	60f8      	str	r0, [r7, #12]
 8004452:	60b9      	str	r1, [r7, #8]
 8004454:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004456:	e033      	b.n	80044c0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004458:	687a      	ldr	r2, [r7, #4]
 800445a:	68b9      	ldr	r1, [r7, #8]
 800445c:	68f8      	ldr	r0, [r7, #12]
 800445e:	f000 f87f 	bl	8004560 <I2C_IsErrorOccurred>
 8004462:	4603      	mov	r3, r0
 8004464:	2b00      	cmp	r3, #0
 8004466:	d001      	beq.n	800446c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004468:	2301      	movs	r3, #1
 800446a:	e031      	b.n	80044d0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004472:	d025      	beq.n	80044c0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004474:	f7fe fdb8 	bl	8002fe8 <HAL_GetTick>
 8004478:	4602      	mov	r2, r0
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	1ad3      	subs	r3, r2, r3
 800447e:	68ba      	ldr	r2, [r7, #8]
 8004480:	429a      	cmp	r2, r3
 8004482:	d302      	bcc.n	800448a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d11a      	bne.n	80044c0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	699b      	ldr	r3, [r3, #24]
 8004490:	f003 0302 	and.w	r3, r3, #2
 8004494:	2b02      	cmp	r3, #2
 8004496:	d013      	beq.n	80044c0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800449c:	f043 0220 	orr.w	r2, r3, #32
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	2220      	movs	r2, #32
 80044a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	2200      	movs	r2, #0
 80044b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	2200      	movs	r2, #0
 80044b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80044bc:	2301      	movs	r3, #1
 80044be:	e007      	b.n	80044d0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	699b      	ldr	r3, [r3, #24]
 80044c6:	f003 0302 	and.w	r3, r3, #2
 80044ca:	2b02      	cmp	r3, #2
 80044cc:	d1c4      	bne.n	8004458 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80044ce:	2300      	movs	r3, #0
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	3710      	adds	r7, #16
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bd80      	pop	{r7, pc}

080044d8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b084      	sub	sp, #16
 80044dc:	af00      	add	r7, sp, #0
 80044de:	60f8      	str	r0, [r7, #12]
 80044e0:	60b9      	str	r1, [r7, #8]
 80044e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80044e4:	e02f      	b.n	8004546 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80044e6:	687a      	ldr	r2, [r7, #4]
 80044e8:	68b9      	ldr	r1, [r7, #8]
 80044ea:	68f8      	ldr	r0, [r7, #12]
 80044ec:	f000 f838 	bl	8004560 <I2C_IsErrorOccurred>
 80044f0:	4603      	mov	r3, r0
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d001      	beq.n	80044fa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	e02d      	b.n	8004556 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044fa:	f7fe fd75 	bl	8002fe8 <HAL_GetTick>
 80044fe:	4602      	mov	r2, r0
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	1ad3      	subs	r3, r2, r3
 8004504:	68ba      	ldr	r2, [r7, #8]
 8004506:	429a      	cmp	r2, r3
 8004508:	d302      	bcc.n	8004510 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d11a      	bne.n	8004546 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	699b      	ldr	r3, [r3, #24]
 8004516:	f003 0320 	and.w	r3, r3, #32
 800451a:	2b20      	cmp	r3, #32
 800451c:	d013      	beq.n	8004546 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004522:	f043 0220 	orr.w	r2, r3, #32
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	2220      	movs	r2, #32
 800452e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	2200      	movs	r2, #0
 8004536:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	2200      	movs	r2, #0
 800453e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004542:	2301      	movs	r3, #1
 8004544:	e007      	b.n	8004556 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	699b      	ldr	r3, [r3, #24]
 800454c:	f003 0320 	and.w	r3, r3, #32
 8004550:	2b20      	cmp	r3, #32
 8004552:	d1c8      	bne.n	80044e6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004554:	2300      	movs	r3, #0
}
 8004556:	4618      	mov	r0, r3
 8004558:	3710      	adds	r7, #16
 800455a:	46bd      	mov	sp, r7
 800455c:	bd80      	pop	{r7, pc}
	...

08004560 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b08a      	sub	sp, #40	; 0x28
 8004564:	af00      	add	r7, sp, #0
 8004566:	60f8      	str	r0, [r7, #12]
 8004568:	60b9      	str	r1, [r7, #8]
 800456a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800456c:	2300      	movs	r3, #0
 800456e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	699b      	ldr	r3, [r3, #24]
 8004578:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800457a:	2300      	movs	r3, #0
 800457c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004582:	69bb      	ldr	r3, [r7, #24]
 8004584:	f003 0310 	and.w	r3, r3, #16
 8004588:	2b00      	cmp	r3, #0
 800458a:	d068      	beq.n	800465e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	2210      	movs	r2, #16
 8004592:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004594:	e049      	b.n	800462a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800459c:	d045      	beq.n	800462a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800459e:	f7fe fd23 	bl	8002fe8 <HAL_GetTick>
 80045a2:	4602      	mov	r2, r0
 80045a4:	69fb      	ldr	r3, [r7, #28]
 80045a6:	1ad3      	subs	r3, r2, r3
 80045a8:	68ba      	ldr	r2, [r7, #8]
 80045aa:	429a      	cmp	r2, r3
 80045ac:	d302      	bcc.n	80045b4 <I2C_IsErrorOccurred+0x54>
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d13a      	bne.n	800462a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045be:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80045c6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	699b      	ldr	r3, [r3, #24]
 80045ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80045d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045d6:	d121      	bne.n	800461c <I2C_IsErrorOccurred+0xbc>
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80045de:	d01d      	beq.n	800461c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80045e0:	7cfb      	ldrb	r3, [r7, #19]
 80045e2:	2b20      	cmp	r3, #32
 80045e4:	d01a      	beq.n	800461c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	685a      	ldr	r2, [r3, #4]
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80045f4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80045f6:	f7fe fcf7 	bl	8002fe8 <HAL_GetTick>
 80045fa:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80045fc:	e00e      	b.n	800461c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80045fe:	f7fe fcf3 	bl	8002fe8 <HAL_GetTick>
 8004602:	4602      	mov	r2, r0
 8004604:	69fb      	ldr	r3, [r7, #28]
 8004606:	1ad3      	subs	r3, r2, r3
 8004608:	2b19      	cmp	r3, #25
 800460a:	d907      	bls.n	800461c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800460c:	6a3b      	ldr	r3, [r7, #32]
 800460e:	f043 0320 	orr.w	r3, r3, #32
 8004612:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004614:	2301      	movs	r3, #1
 8004616:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800461a:	e006      	b.n	800462a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	699b      	ldr	r3, [r3, #24]
 8004622:	f003 0320 	and.w	r3, r3, #32
 8004626:	2b20      	cmp	r3, #32
 8004628:	d1e9      	bne.n	80045fe <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	699b      	ldr	r3, [r3, #24]
 8004630:	f003 0320 	and.w	r3, r3, #32
 8004634:	2b20      	cmp	r3, #32
 8004636:	d003      	beq.n	8004640 <I2C_IsErrorOccurred+0xe0>
 8004638:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800463c:	2b00      	cmp	r3, #0
 800463e:	d0aa      	beq.n	8004596 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004640:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004644:	2b00      	cmp	r3, #0
 8004646:	d103      	bne.n	8004650 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	2220      	movs	r2, #32
 800464e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004650:	6a3b      	ldr	r3, [r7, #32]
 8004652:	f043 0304 	orr.w	r3, r3, #4
 8004656:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004658:	2301      	movs	r3, #1
 800465a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	699b      	ldr	r3, [r3, #24]
 8004664:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004666:	69bb      	ldr	r3, [r7, #24]
 8004668:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800466c:	2b00      	cmp	r3, #0
 800466e:	d00b      	beq.n	8004688 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004670:	6a3b      	ldr	r3, [r7, #32]
 8004672:	f043 0301 	orr.w	r3, r3, #1
 8004676:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004680:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004682:	2301      	movs	r3, #1
 8004684:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004688:	69bb      	ldr	r3, [r7, #24]
 800468a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800468e:	2b00      	cmp	r3, #0
 8004690:	d00b      	beq.n	80046aa <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004692:	6a3b      	ldr	r3, [r7, #32]
 8004694:	f043 0308 	orr.w	r3, r3, #8
 8004698:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80046a2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80046a4:	2301      	movs	r3, #1
 80046a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80046aa:	69bb      	ldr	r3, [r7, #24]
 80046ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d00b      	beq.n	80046cc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80046b4:	6a3b      	ldr	r3, [r7, #32]
 80046b6:	f043 0302 	orr.w	r3, r3, #2
 80046ba:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80046c4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80046c6:	2301      	movs	r3, #1
 80046c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80046cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d01c      	beq.n	800470e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80046d4:	68f8      	ldr	r0, [r7, #12]
 80046d6:	f7ff fe45 	bl	8004364 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	6859      	ldr	r1, [r3, #4]
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681a      	ldr	r2, [r3, #0]
 80046e4:	4b0d      	ldr	r3, [pc, #52]	; (800471c <I2C_IsErrorOccurred+0x1bc>)
 80046e6:	400b      	ands	r3, r1
 80046e8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80046ee:	6a3b      	ldr	r3, [r7, #32]
 80046f0:	431a      	orrs	r2, r3
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	2220      	movs	r2, #32
 80046fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	2200      	movs	r2, #0
 8004702:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	2200      	movs	r2, #0
 800470a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800470e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004712:	4618      	mov	r0, r3
 8004714:	3728      	adds	r7, #40	; 0x28
 8004716:	46bd      	mov	sp, r7
 8004718:	bd80      	pop	{r7, pc}
 800471a:	bf00      	nop
 800471c:	fe00e800 	.word	0xfe00e800

08004720 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004720:	b480      	push	{r7}
 8004722:	b087      	sub	sp, #28
 8004724:	af00      	add	r7, sp, #0
 8004726:	60f8      	str	r0, [r7, #12]
 8004728:	607b      	str	r3, [r7, #4]
 800472a:	460b      	mov	r3, r1
 800472c:	817b      	strh	r3, [r7, #10]
 800472e:	4613      	mov	r3, r2
 8004730:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004732:	897b      	ldrh	r3, [r7, #10]
 8004734:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004738:	7a7b      	ldrb	r3, [r7, #9]
 800473a:	041b      	lsls	r3, r3, #16
 800473c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004740:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004746:	6a3b      	ldr	r3, [r7, #32]
 8004748:	4313      	orrs	r3, r2
 800474a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800474e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	685a      	ldr	r2, [r3, #4]
 8004756:	6a3b      	ldr	r3, [r7, #32]
 8004758:	0d5b      	lsrs	r3, r3, #21
 800475a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800475e:	4b08      	ldr	r3, [pc, #32]	; (8004780 <I2C_TransferConfig+0x60>)
 8004760:	430b      	orrs	r3, r1
 8004762:	43db      	mvns	r3, r3
 8004764:	ea02 0103 	and.w	r1, r2, r3
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	697a      	ldr	r2, [r7, #20]
 800476e:	430a      	orrs	r2, r1
 8004770:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004772:	bf00      	nop
 8004774:	371c      	adds	r7, #28
 8004776:	46bd      	mov	sp, r7
 8004778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477c:	4770      	bx	lr
 800477e:	bf00      	nop
 8004780:	03ff63ff 	.word	0x03ff63ff

08004784 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004784:	b480      	push	{r7}
 8004786:	b083      	sub	sp, #12
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
 800478c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004794:	b2db      	uxtb	r3, r3
 8004796:	2b20      	cmp	r3, #32
 8004798:	d138      	bne.n	800480c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	d101      	bne.n	80047a8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80047a4:	2302      	movs	r3, #2
 80047a6:	e032      	b.n	800480e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2201      	movs	r2, #1
 80047ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2224      	movs	r2, #36	; 0x24
 80047b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	681a      	ldr	r2, [r3, #0]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f022 0201 	bic.w	r2, r2, #1
 80047c6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	681a      	ldr	r2, [r3, #0]
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80047d6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	6819      	ldr	r1, [r3, #0]
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	683a      	ldr	r2, [r7, #0]
 80047e4:	430a      	orrs	r2, r1
 80047e6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	681a      	ldr	r2, [r3, #0]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f042 0201 	orr.w	r2, r2, #1
 80047f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2220      	movs	r2, #32
 80047fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2200      	movs	r2, #0
 8004804:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004808:	2300      	movs	r3, #0
 800480a:	e000      	b.n	800480e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800480c:	2302      	movs	r3, #2
  }
}
 800480e:	4618      	mov	r0, r3
 8004810:	370c      	adds	r7, #12
 8004812:	46bd      	mov	sp, r7
 8004814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004818:	4770      	bx	lr

0800481a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800481a:	b480      	push	{r7}
 800481c:	b085      	sub	sp, #20
 800481e:	af00      	add	r7, sp, #0
 8004820:	6078      	str	r0, [r7, #4]
 8004822:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800482a:	b2db      	uxtb	r3, r3
 800482c:	2b20      	cmp	r3, #32
 800482e:	d139      	bne.n	80048a4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004836:	2b01      	cmp	r3, #1
 8004838:	d101      	bne.n	800483e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800483a:	2302      	movs	r3, #2
 800483c:	e033      	b.n	80048a6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2201      	movs	r2, #1
 8004842:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2224      	movs	r2, #36	; 0x24
 800484a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	681a      	ldr	r2, [r3, #0]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f022 0201 	bic.w	r2, r2, #1
 800485c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800486c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	021b      	lsls	r3, r3, #8
 8004872:	68fa      	ldr	r2, [r7, #12]
 8004874:	4313      	orrs	r3, r2
 8004876:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	68fa      	ldr	r2, [r7, #12]
 800487e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	681a      	ldr	r2, [r3, #0]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f042 0201 	orr.w	r2, r2, #1
 800488e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2220      	movs	r2, #32
 8004894:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2200      	movs	r2, #0
 800489c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80048a0:	2300      	movs	r3, #0
 80048a2:	e000      	b.n	80048a6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80048a4:	2302      	movs	r3, #2
  }
}
 80048a6:	4618      	mov	r0, r3
 80048a8:	3714      	adds	r7, #20
 80048aa:	46bd      	mov	sp, r7
 80048ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b0:	4770      	bx	lr
	...

080048b4 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b084      	sub	sp, #16
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 80048bc:	2300      	movs	r3, #0
 80048be:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d01e      	beq.n	8004904 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 80048c6:	4b13      	ldr	r3, [pc, #76]	; (8004914 <HAL_IPCC_Init+0x60>)
 80048c8:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80048d0:	b2db      	uxtb	r3, r3
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d102      	bne.n	80048dc <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	f7fe f812 	bl	8002900 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 80048dc:	68b8      	ldr	r0, [r7, #8]
 80048de:	f000 f85b 	bl	8004998 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 80048e2:	68bb      	ldr	r3, [r7, #8]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 80048ee:	6878      	ldr	r0, [r7, #4]
 80048f0:	f000 f82c 	bl	800494c <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2200      	movs	r2, #0
 80048f8:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2201      	movs	r2, #1
 80048fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8004902:	e001      	b.n	8004908 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8004904:	2301      	movs	r3, #1
 8004906:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8004908:	7bfb      	ldrb	r3, [r7, #15]
}
 800490a:	4618      	mov	r0, r3
 800490c:	3710      	adds	r7, #16
 800490e:	46bd      	mov	sp, r7
 8004910:	bd80      	pop	{r7, pc}
 8004912:	bf00      	nop
 8004914:	58000c00 	.word	0x58000c00

08004918 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8004918:	b480      	push	{r7}
 800491a:	b085      	sub	sp, #20
 800491c:	af00      	add	r7, sp, #0
 800491e:	60f8      	str	r0, [r7, #12]
 8004920:	60b9      	str	r1, [r7, #8]
 8004922:	4613      	mov	r3, r2
 8004924:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 8004926:	bf00      	nop
 8004928:	3714      	adds	r7, #20
 800492a:	46bd      	mov	sp, r7
 800492c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004930:	4770      	bx	lr

08004932 <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8004932:	b480      	push	{r7}
 8004934:	b085      	sub	sp, #20
 8004936:	af00      	add	r7, sp, #0
 8004938:	60f8      	str	r0, [r7, #12]
 800493a:	60b9      	str	r1, [r7, #8]
 800493c:	4613      	mov	r3, r2
 800493e:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8004940:	bf00      	nop
 8004942:	3714      	adds	r7, #20
 8004944:	46bd      	mov	sp, r7
 8004946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494a:	4770      	bx	lr

0800494c <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 800494c:	b480      	push	{r7}
 800494e:	b085      	sub	sp, #20
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8004954:	2300      	movs	r3, #0
 8004956:	60fb      	str	r3, [r7, #12]
 8004958:	e00f      	b.n	800497a <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 800495a:	687a      	ldr	r2, [r7, #4]
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	009b      	lsls	r3, r3, #2
 8004960:	4413      	add	r3, r2
 8004962:	4a0b      	ldr	r2, [pc, #44]	; (8004990 <IPCC_SetDefaultCallbacks+0x44>)
 8004964:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 8004966:	687a      	ldr	r2, [r7, #4]
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	3306      	adds	r3, #6
 800496c:	009b      	lsls	r3, r3, #2
 800496e:	4413      	add	r3, r2
 8004970:	4a08      	ldr	r2, [pc, #32]	; (8004994 <IPCC_SetDefaultCallbacks+0x48>)
 8004972:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	3301      	adds	r3, #1
 8004978:	60fb      	str	r3, [r7, #12]
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	2b05      	cmp	r3, #5
 800497e:	d9ec      	bls.n	800495a <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8004980:	bf00      	nop
 8004982:	bf00      	nop
 8004984:	3714      	adds	r7, #20
 8004986:	46bd      	mov	sp, r7
 8004988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498c:	4770      	bx	lr
 800498e:	bf00      	nop
 8004990:	08004919 	.word	0x08004919
 8004994:	08004933 	.word	0x08004933

08004998 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8004998:	b480      	push	{r7}
 800499a:	b083      	sub	sp, #12
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2200      	movs	r2, #0
 80049a4:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
 80049ac:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	223f      	movs	r2, #63	; 0x3f
 80049b2:	609a      	str	r2, [r3, #8]
}
 80049b4:	bf00      	nop
 80049b6:	370c      	adds	r7, #12
 80049b8:	46bd      	mov	sp, r7
 80049ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049be:	4770      	bx	lr

080049c0 <LL_RCC_SetLPTIMClockSource>:
{
 80049c0:	b480      	push	{r7}
 80049c2:	b083      	sub	sp, #12
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80049c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049cc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	0c1b      	lsrs	r3, r3, #16
 80049d4:	041b      	lsls	r3, r3, #16
 80049d6:	43db      	mvns	r3, r3
 80049d8:	401a      	ands	r2, r3
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	041b      	lsls	r3, r3, #16
 80049de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80049e2:	4313      	orrs	r3, r2
 80049e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80049e8:	bf00      	nop
 80049ea:	370c      	adds	r7, #12
 80049ec:	46bd      	mov	sp, r7
 80049ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f2:	4770      	bx	lr

080049f4 <LL_RCC_GetLPTIMClockSource>:
{
 80049f4:	b480      	push	{r7}
 80049f6:	b083      	sub	sp, #12
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
  return (uint32_t)((READ_BIT(RCC->CCIPR, LPTIMx) >> 16) | LPTIMx);
 80049fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a00:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	4013      	ands	r3, r2
 8004a08:	0c1a      	lsrs	r2, r3, #16
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	4313      	orrs	r3, r2
}
 8004a0e:	4618      	mov	r0, r3
 8004a10:	370c      	adds	r7, #12
 8004a12:	46bd      	mov	sp, r7
 8004a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a18:	4770      	bx	lr

08004a1a <LL_APB1_GRP1_ForceReset>:
{
 8004a1a:	b480      	push	{r7}
 8004a1c:	b083      	sub	sp, #12
 8004a1e:	af00      	add	r7, sp, #0
 8004a20:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1RSTR1, Periphs);
 8004a22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a28:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	638b      	str	r3, [r1, #56]	; 0x38
}
 8004a32:	bf00      	nop
 8004a34:	370c      	adds	r7, #12
 8004a36:	46bd      	mov	sp, r7
 8004a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3c:	4770      	bx	lr

08004a3e <LL_APB1_GRP2_ForceReset>:
{
 8004a3e:	b480      	push	{r7}
 8004a40:	b083      	sub	sp, #12
 8004a42:	af00      	add	r7, sp, #0
 8004a44:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1RSTR2, Periphs);
 8004a46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a4a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a4c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	4313      	orrs	r3, r2
 8004a54:	63cb      	str	r3, [r1, #60]	; 0x3c
}
 8004a56:	bf00      	nop
 8004a58:	370c      	adds	r7, #12
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a60:	4770      	bx	lr

08004a62 <LL_APB1_GRP1_ReleaseReset>:
{
 8004a62:	b480      	push	{r7}
 8004a64:	b083      	sub	sp, #12
 8004a66:	af00      	add	r7, sp, #0
 8004a68:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1RSTR1, Periphs);
 8004a6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	43db      	mvns	r3, r3
 8004a74:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a78:	4013      	ands	r3, r2
 8004a7a:	638b      	str	r3, [r1, #56]	; 0x38
}
 8004a7c:	bf00      	nop
 8004a7e:	370c      	adds	r7, #12
 8004a80:	46bd      	mov	sp, r7
 8004a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a86:	4770      	bx	lr

08004a88 <LL_APB1_GRP2_ReleaseReset>:
{
 8004a88:	b480      	push	{r7}
 8004a8a:	b083      	sub	sp, #12
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1RSTR2, Periphs);
 8004a90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a94:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	43db      	mvns	r3, r3
 8004a9a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a9e:	4013      	ands	r3, r2
 8004aa0:	63cb      	str	r3, [r1, #60]	; 0x3c
}
 8004aa2:	bf00      	nop
 8004aa4:	370c      	adds	r7, #12
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aac:	4770      	bx	lr
	...

08004ab0 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b084      	sub	sp, #16
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d101      	bne.n	8004ac2 <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	e08f      	b.n	8004be2 <HAL_LPTIM_Init+0x132>
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	2b01      	cmp	r3, #1
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8004ace:	b2db      	uxtb	r3, r3
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d106      	bne.n	8004ae2 <HAL_LPTIM_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 8004adc:	6878      	ldr	r0, [r7, #4]
 8004ade:	f7fd ff33 	bl	8002948 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2202      	movs	r2, #2
 8004ae6:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	68db      	ldr	r3, [r3, #12]
 8004af0:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	2b01      	cmp	r3, #1
 8004af8:	d004      	beq.n	8004b04 <HAL_LPTIM_Init+0x54>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004afe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004b02:	d103      	bne.n	8004b0c <HAL_LPTIM_Init+0x5c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	f023 031e 	bic.w	r3, r3, #30
 8004b0a:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	695b      	ldr	r3, [r3, #20]
 8004b10:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d005      	beq.n	8004b24 <HAL_LPTIM_Init+0x74>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8004b1e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004b22:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8004b24:	68fa      	ldr	r2, [r7, #12]
 8004b26:	4b31      	ldr	r3, [pc, #196]	; (8004bec <HAL_LPTIM_Init+0x13c>)
 8004b28:	4013      	ands	r3, r2
 8004b2a:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8004b34:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 8004b3a:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 8004b40:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 8004b46:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8004b48:	68fa      	ldr	r2, [r7, #12]
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d107      	bne.n	8004b66 <HAL_LPTIM_Init+0xb6>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	68fa      	ldr	r2, [r7, #12]
 8004b62:	4313      	orrs	r3, r2
 8004b64:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	2b01      	cmp	r3, #1
 8004b6c:	d004      	beq.n	8004b78 <HAL_LPTIM_Init+0xc8>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b72:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004b76:	d107      	bne.n	8004b88 <HAL_LPTIM_Init+0xd8>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8004b80:	4313      	orrs	r3, r2
 8004b82:	68fa      	ldr	r2, [r7, #12]
 8004b84:	4313      	orrs	r3, r2
 8004b86:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	695b      	ldr	r3, [r3, #20]
 8004b8c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d00a      	beq.n	8004baa <HAL_LPTIM_Init+0xfa>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8004b9c:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 8004ba2:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8004ba4:	68fa      	ldr	r2, [r7, #12]
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	68fa      	ldr	r2, [r7, #12]
 8004bb0:	60da      	str	r2, [r3, #12]
#if defined(LPTIM_OR_OR)

  /* Configure LPTIM input sources */
  if (hlptim->Instance == LPTIM1)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a0e      	ldr	r2, [pc, #56]	; (8004bf0 <HAL_LPTIM_Init+0x140>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d108      	bne.n	8004bce <HAL_LPTIM_Init+0x11e>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->OR = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	430a      	orrs	r2, r1
 8004bca:	621a      	str	r2, [r3, #32]
 8004bcc:	e004      	b.n	8004bd8 <HAL_LPTIM_Init+0x128>
  {
    /* Check LPTIM2 Input1 source */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

    /* Configure LPTIM2 Input1 source */
    hlptim->Instance->OR = hlptim->Init.Input1Source;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	687a      	ldr	r2, [r7, #4]
 8004bd4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004bd6:	621a      	str	r2, [r3, #32]
  }
#endif /* LPTIM_OR_OR */

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2201      	movs	r2, #1
 8004bdc:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 8004be0:	2300      	movs	r3, #0
}
 8004be2:	4618      	mov	r0, r3
 8004be4:	3710      	adds	r7, #16
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bd80      	pop	{r7, pc}
 8004bea:	bf00      	nop
 8004bec:	ff19f1fe 	.word	0xff19f1fe
 8004bf0:	40007c00 	.word	0x40007c00

08004bf4 <HAL_LPTIM_TimeOut_Start_IT>:
  * @param  Timeout Specifies the TimeOut value to reset the counter.
  *         This parameter must be a value between 0x0000 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_TimeOut_Start_IT(LPTIM_HandleTypeDef *hlptim, uint32_t Period, uint32_t Timeout)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b084      	sub	sp, #16
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	60f8      	str	r0, [r7, #12]
 8004bfc:	60b9      	str	r1, [r7, #8]
 8004bfe:	607a      	str	r2, [r7, #4]
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(Period));
  assert_param(IS_LPTIM_PULSE(Timeout));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	2202      	movs	r2, #2
 8004c04:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Enable EXTI Line interrupt on the LPTIM Wake-up Timer */
  __HAL_LPTIM_WAKEUPTIMER_EXTI_ENABLE_IT(hlptim->Instance);
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a38      	ldr	r2, [pc, #224]	; (8004cf0 <HAL_LPTIM_TimeOut_Start_IT+0xfc>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d108      	bne.n	8004c24 <HAL_LPTIM_TimeOut_Start_IT+0x30>
 8004c12:	4b38      	ldr	r3, [pc, #224]	; (8004cf4 <HAL_LPTIM_TimeOut_Start_IT+0x100>)
 8004c14:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c18:	4a36      	ldr	r2, [pc, #216]	; (8004cf4 <HAL_LPTIM_TimeOut_Start_IT+0x100>)
 8004c1a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004c1e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004c22:	e007      	b.n	8004c34 <HAL_LPTIM_TimeOut_Start_IT+0x40>
 8004c24:	4b33      	ldr	r3, [pc, #204]	; (8004cf4 <HAL_LPTIM_TimeOut_Start_IT+0x100>)
 8004c26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c2a:	4a32      	ldr	r2, [pc, #200]	; (8004cf4 <HAL_LPTIM_TimeOut_Start_IT+0x100>)
 8004c2c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004c30:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Set TIMOUT bit to enable the timeout function */
  hlptim->Instance->CFGR |= LPTIM_CFGR_TIMOUT;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	68da      	ldr	r2, [r3, #12]
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8004c42:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	691a      	ldr	r2, [r3, #16]
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f042 0201 	orr.w	r2, r2, #1
 8004c52:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	2210      	movs	r2, #16
 8004c5a:	605a      	str	r2, [r3, #4]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	68ba      	ldr	r2, [r7, #8]
 8004c62:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8004c64:	2110      	movs	r1, #16
 8004c66:	68f8      	ldr	r0, [r7, #12]
 8004c68:	f000 f92c 	bl	8004ec4 <LPTIM_WaitForFlag>
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	2b03      	cmp	r3, #3
 8004c70:	d101      	bne.n	8004c76 <HAL_LPTIM_TimeOut_Start_IT+0x82>
  {
    return HAL_TIMEOUT;
 8004c72:	2303      	movs	r3, #3
 8004c74:	e038      	b.n	8004ce8 <HAL_LPTIM_TimeOut_Start_IT+0xf4>
  }

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	2208      	movs	r2, #8
 8004c7c:	605a      	str	r2, [r3, #4]

  /* Load the Timeout value in the compare register */
  __HAL_LPTIM_COMPARE_SET(hlptim, Timeout);
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	687a      	ldr	r2, [r7, #4]
 8004c84:	615a      	str	r2, [r3, #20]

  /* Wait for the completion of the write operation to the LPTIM_CMP register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 8004c86:	2108      	movs	r1, #8
 8004c88:	68f8      	ldr	r0, [r7, #12]
 8004c8a:	f000 f91b 	bl	8004ec4 <LPTIM_WaitForFlag>
 8004c8e:	4603      	mov	r3, r0
 8004c90:	2b03      	cmp	r3, #3
 8004c92:	d101      	bne.n	8004c98 <HAL_LPTIM_TimeOut_Start_IT+0xa4>
  {
    return HAL_TIMEOUT;
 8004c94:	2303      	movs	r3, #3
 8004c96:	e027      	b.n	8004ce8 <HAL_LPTIM_TimeOut_Start_IT+0xf4>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 8004c98:	68f8      	ldr	r0, [r7, #12]
 8004c9a:	f000 f943 	bl	8004f24 <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 8004c9e:	68f8      	ldr	r0, [r7, #12]
 8004ca0:	f000 f901 	bl	8004ea6 <HAL_LPTIM_GetState>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	2b03      	cmp	r3, #3
 8004ca8:	d101      	bne.n	8004cae <HAL_LPTIM_TimeOut_Start_IT+0xba>
  {
    return HAL_TIMEOUT;
 8004caa:	2303      	movs	r3, #3
 8004cac:	e01c      	b.n	8004ce8 <HAL_LPTIM_TimeOut_Start_IT+0xf4>
  }

  /* Enable Compare match interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_CMPM);
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	689a      	ldr	r2, [r3, #8]
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f042 0201 	orr.w	r2, r2, #1
 8004cbc:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	691a      	ldr	r2, [r3, #16]
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f042 0201 	orr.w	r2, r2, #1
 8004ccc:	611a      	str	r2, [r3, #16]

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	691a      	ldr	r2, [r3, #16]
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f042 0204 	orr.w	r2, r2, #4
 8004cdc:	611a      	str	r2, [r3, #16]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	2201      	movs	r2, #1
 8004ce2:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 8004ce6:	2300      	movs	r3, #0
}
 8004ce8:	4618      	mov	r0, r3
 8004cea:	3710      	adds	r7, #16
 8004cec:	46bd      	mov	sp, r7
 8004cee:	bd80      	pop	{r7, pc}
 8004cf0:	40007c00 	.word	0x40007c00
 8004cf4:	58000800 	.word	0x58000800

08004cf8 <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b082      	sub	sp, #8
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f003 0301 	and.w	r3, r3, #1
 8004d0a:	2b01      	cmp	r3, #1
 8004d0c:	d10d      	bne.n	8004d2a <HAL_LPTIM_IRQHandler+0x32>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	689b      	ldr	r3, [r3, #8]
 8004d14:	f003 0301 	and.w	r3, r3, #1
 8004d18:	2b01      	cmp	r3, #1
 8004d1a:	d106      	bne.n	8004d2a <HAL_LPTIM_IRQHandler+0x32>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	2201      	movs	r2, #1
 8004d22:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
#else
      HAL_LPTIM_CompareMatchCallback(hlptim);
 8004d24:	6878      	ldr	r0, [r7, #4]
 8004d26:	f7fd fcef 	bl	8002708 <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f003 0302 	and.w	r3, r3, #2
 8004d34:	2b02      	cmp	r3, #2
 8004d36:	d10d      	bne.n	8004d54 <HAL_LPTIM_IRQHandler+0x5c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	689b      	ldr	r3, [r3, #8]
 8004d3e:	f003 0302 	and.w	r3, r3, #2
 8004d42:	2b02      	cmp	r3, #2
 8004d44:	d106      	bne.n	8004d54 <HAL_LPTIM_IRQHandler+0x5c>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	2202      	movs	r2, #2
 8004d4c:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 8004d4e:	6878      	ldr	r0, [r7, #4]
 8004d50:	f000 f86d 	bl	8004e2e <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f003 0304 	and.w	r3, r3, #4
 8004d5e:	2b04      	cmp	r3, #4
 8004d60:	d10d      	bne.n	8004d7e <HAL_LPTIM_IRQHandler+0x86>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	689b      	ldr	r3, [r3, #8]
 8004d68:	f003 0304 	and.w	r3, r3, #4
 8004d6c:	2b04      	cmp	r3, #4
 8004d6e:	d106      	bne.n	8004d7e <HAL_LPTIM_IRQHandler+0x86>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	2204      	movs	r2, #4
 8004d76:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 8004d78:	6878      	ldr	r0, [r7, #4]
 8004d7a:	f000 f862 	bl	8004e42 <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f003 0308 	and.w	r3, r3, #8
 8004d88:	2b08      	cmp	r3, #8
 8004d8a:	d10d      	bne.n	8004da8 <HAL_LPTIM_IRQHandler+0xb0>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	689b      	ldr	r3, [r3, #8]
 8004d92:	f003 0308 	and.w	r3, r3, #8
 8004d96:	2b08      	cmp	r3, #8
 8004d98:	d106      	bne.n	8004da8 <HAL_LPTIM_IRQHandler+0xb0>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	2208      	movs	r2, #8
 8004da0:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 8004da2:	6878      	ldr	r0, [r7, #4]
 8004da4:	f000 f857 	bl	8004e56 <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f003 0310 	and.w	r3, r3, #16
 8004db2:	2b10      	cmp	r3, #16
 8004db4:	d10d      	bne.n	8004dd2 <HAL_LPTIM_IRQHandler+0xda>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	689b      	ldr	r3, [r3, #8]
 8004dbc:	f003 0310 	and.w	r3, r3, #16
 8004dc0:	2b10      	cmp	r3, #16
 8004dc2:	d106      	bne.n	8004dd2 <HAL_LPTIM_IRQHandler+0xda>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	2210      	movs	r2, #16
 8004dca:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 8004dcc:	6878      	ldr	r0, [r7, #4]
 8004dce:	f000 f84c 	bl	8004e6a <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f003 0320 	and.w	r3, r3, #32
 8004ddc:	2b20      	cmp	r3, #32
 8004dde:	d10d      	bne.n	8004dfc <HAL_LPTIM_IRQHandler+0x104>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	689b      	ldr	r3, [r3, #8]
 8004de6:	f003 0320 	and.w	r3, r3, #32
 8004dea:	2b20      	cmp	r3, #32
 8004dec:	d106      	bne.n	8004dfc <HAL_LPTIM_IRQHandler+0x104>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	2220      	movs	r2, #32
 8004df4:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 8004df6:	6878      	ldr	r0, [r7, #4]
 8004df8:	f000 f841 	bl	8004e7e <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e06:	2b40      	cmp	r3, #64	; 0x40
 8004e08:	d10d      	bne.n	8004e26 <HAL_LPTIM_IRQHandler+0x12e>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	689b      	ldr	r3, [r3, #8]
 8004e10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e14:	2b40      	cmp	r3, #64	; 0x40
 8004e16:	d106      	bne.n	8004e26 <HAL_LPTIM_IRQHandler+0x12e>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	2240      	movs	r2, #64	; 0x40
 8004e1e:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 8004e20:	6878      	ldr	r0, [r7, #4]
 8004e22:	f000 f836 	bl	8004e92 <HAL_LPTIM_DirectionDownCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
}
 8004e26:	bf00      	nop
 8004e28:	3708      	adds	r7, #8
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd80      	pop	{r7, pc}

08004e2e <HAL_LPTIM_AutoReloadMatchCallback>:
  * @brief  Autoreload match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004e2e:	b480      	push	{r7}
 8004e30:	b083      	sub	sp, #12
 8004e32:	af00      	add	r7, sp, #0
 8004e34:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadMatchCallback could be implemented in the user file
   */
}
 8004e36:	bf00      	nop
 8004e38:	370c      	adds	r7, #12
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e40:	4770      	bx	lr

08004e42 <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004e42:	b480      	push	{r7}
 8004e44:	b083      	sub	sp, #12
 8004e46:	af00      	add	r7, sp, #0
 8004e48:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 8004e4a:	bf00      	nop
 8004e4c:	370c      	adds	r7, #12
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e54:	4770      	bx	lr

08004e56 <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004e56:	b480      	push	{r7}
 8004e58:	b083      	sub	sp, #12
 8004e5a:	af00      	add	r7, sp, #0
 8004e5c:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 8004e5e:	bf00      	nop
 8004e60:	370c      	adds	r7, #12
 8004e62:	46bd      	mov	sp, r7
 8004e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e68:	4770      	bx	lr

08004e6a <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004e6a:	b480      	push	{r7}
 8004e6c:	b083      	sub	sp, #12
 8004e6e:	af00      	add	r7, sp, #0
 8004e70:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 8004e72:	bf00      	nop
 8004e74:	370c      	adds	r7, #12
 8004e76:	46bd      	mov	sp, r7
 8004e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7c:	4770      	bx	lr

08004e7e <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004e7e:	b480      	push	{r7}
 8004e80:	b083      	sub	sp, #12
 8004e82:	af00      	add	r7, sp, #0
 8004e84:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 8004e86:	bf00      	nop
 8004e88:	370c      	adds	r7, #12
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e90:	4770      	bx	lr

08004e92 <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004e92:	b480      	push	{r7}
 8004e94:	b083      	sub	sp, #12
 8004e96:	af00      	add	r7, sp, #0
 8004e98:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 8004e9a:	bf00      	nop
 8004e9c:	370c      	adds	r7, #12
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea4:	4770      	bx	lr

08004ea6 <HAL_LPTIM_GetState>:
  * @brief  Return the LPTIM handle state.
  * @param  hlptim LPTIM handle
  * @retval HAL state
  */
HAL_LPTIM_StateTypeDef HAL_LPTIM_GetState(LPTIM_HandleTypeDef *hlptim)
{
 8004ea6:	b480      	push	{r7}
 8004ea8:	b083      	sub	sp, #12
 8004eaa:	af00      	add	r7, sp, #0
 8004eac:	6078      	str	r0, [r7, #4]
  /* Return LPTIM handle state */
  return hlptim->State;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8004eb4:	b2db      	uxtb	r3, r3
}
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	370c      	adds	r7, #12
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec0:	4770      	bx	lr
	...

08004ec4 <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b085      	sub	sp, #20
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
 8004ecc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 8004ece:	2300      	movs	r3, #0
 8004ed0:	73fb      	strb	r3, [r7, #15]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 8004ed2:	4b12      	ldr	r3, [pc, #72]	; (8004f1c <LPTIM_WaitForFlag+0x58>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4a12      	ldr	r2, [pc, #72]	; (8004f20 <LPTIM_WaitForFlag+0x5c>)
 8004ed8:	fba2 2303 	umull	r2, r3, r2, r3
 8004edc:	0b9b      	lsrs	r3, r3, #14
 8004ede:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004ee2:	fb02 f303 	mul.w	r3, r2, r3
 8004ee6:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	3b01      	subs	r3, #1
 8004eec:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d101      	bne.n	8004ef8 <LPTIM_WaitForFlag+0x34>
    {
      result = HAL_TIMEOUT;
 8004ef4:	2303      	movs	r3, #3
 8004ef6:	73fb      	strb	r3, [r7, #15]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	681a      	ldr	r2, [r3, #0]
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	4013      	ands	r3, r2
 8004f02:	683a      	ldr	r2, [r7, #0]
 8004f04:	429a      	cmp	r2, r3
 8004f06:	d002      	beq.n	8004f0e <LPTIM_WaitForFlag+0x4a>
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d1ec      	bne.n	8004ee8 <LPTIM_WaitForFlag+0x24>

  return result;
 8004f0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f10:	4618      	mov	r0, r3
 8004f12:	3714      	adds	r7, #20
 8004f14:	46bd      	mov	sp, r7
 8004f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1a:	4770      	bx	lr
 8004f1c:	20000008 	.word	0x20000008
 8004f20:	d1b71759 	.word	0xd1b71759

08004f24 <LPTIM_Disable>:
  *         Please check Errata Sheet ES0335 for more details under "MCU may remain
  *         stuck in LPTIM interrupt when entering Stop mode" section.
  * @retval None
  */
void LPTIM_Disable(LPTIM_HandleTypeDef *hlptim)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b08c      	sub	sp, #48	; 0x30
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpclksource = 0;
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f30:	f3ef 8310 	mrs	r3, PRIMASK
 8004f34:	60fb      	str	r3, [r7, #12]
  return(result);
 8004f36:	68fb      	ldr	r3, [r7, #12]
#if defined(LPTIM_OR_OR)
  uint32_t tmpOR;
#endif /* LPTIM_OR_OR */

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8004f38:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f3e:	693b      	ldr	r3, [r7, #16]
 8004f40:	f383 8810 	msr	PRIMASK, r3
}
 8004f44:	bf00      	nop
  __set_PRIMASK(1) ;

  /*********** Save LPTIM Config ***********/
  /* Save LPTIM source clock */
  switch ((uint32_t)hlptim->Instance)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4a62      	ldr	r2, [pc, #392]	; (80050d4 <LPTIM_Disable+0x1b0>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d003      	beq.n	8004f58 <LPTIM_Disable+0x34>
 8004f50:	4a61      	ldr	r2, [pc, #388]	; (80050d8 <LPTIM_Disable+0x1b4>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d006      	beq.n	8004f64 <LPTIM_Disable+0x40>
    case LPTIM2_BASE:
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
      break;
#endif /* LPTIM2 */
    default:
      break;
 8004f56:	e00b      	b.n	8004f70 <LPTIM_Disable+0x4c>
      tmpclksource = __HAL_RCC_GET_LPTIM1_SOURCE();
 8004f58:	f44f 2040 	mov.w	r0, #786432	; 0xc0000
 8004f5c:	f7ff fd4a 	bl	80049f4 <LL_RCC_GetLPTIMClockSource>
 8004f60:	62f8      	str	r0, [r7, #44]	; 0x2c
      break;
 8004f62:	e005      	b.n	8004f70 <LPTIM_Disable+0x4c>
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
 8004f64:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 8004f68:	f7ff fd44 	bl	80049f4 <LL_RCC_GetLPTIMClockSource>
 8004f6c:	62f8      	str	r0, [r7, #44]	; 0x2c
      break;
 8004f6e:	bf00      	nop
  }

  /* Save LPTIM configuration registers */
  tmpIER = hlptim->Instance->IER;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	689b      	ldr	r3, [r3, #8]
 8004f76:	627b      	str	r3, [r7, #36]	; 0x24
  tmpCFGR = hlptim->Instance->CFGR;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	68db      	ldr	r3, [r3, #12]
 8004f7e:	623b      	str	r3, [r7, #32]
  tmpCMP = hlptim->Instance->CMP;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	695b      	ldr	r3, [r3, #20]
 8004f86:	61fb      	str	r3, [r7, #28]
  tmpARR = hlptim->Instance->ARR;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	699b      	ldr	r3, [r3, #24]
 8004f8e:	61bb      	str	r3, [r7, #24]
#if defined(LPTIM_OR_OR)
  tmpOR = hlptim->Instance->OR;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	6a1b      	ldr	r3, [r3, #32]
 8004f96:	617b      	str	r3, [r7, #20]
#endif /* LPTIM_OR_OR */

  /*********** Reset LPTIM ***********/
  switch ((uint32_t)hlptim->Instance)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4a4d      	ldr	r2, [pc, #308]	; (80050d4 <LPTIM_Disable+0x1b0>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d003      	beq.n	8004faa <LPTIM_Disable+0x86>
 8004fa2:	4a4d      	ldr	r2, [pc, #308]	; (80050d8 <LPTIM_Disable+0x1b4>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d009      	beq.n	8004fbc <LPTIM_Disable+0x98>
      __HAL_RCC_LPTIM2_FORCE_RESET();
      __HAL_RCC_LPTIM2_RELEASE_RESET();
      break;
#endif /* LPTIM2 */
    default:
      break;
 8004fa8:	e00f      	b.n	8004fca <LPTIM_Disable+0xa6>
      __HAL_RCC_LPTIM1_FORCE_RESET();
 8004faa:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8004fae:	f7ff fd34 	bl	8004a1a <LL_APB1_GRP1_ForceReset>
      __HAL_RCC_LPTIM1_RELEASE_RESET();
 8004fb2:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8004fb6:	f7ff fd54 	bl	8004a62 <LL_APB1_GRP1_ReleaseReset>
      break;
 8004fba:	e006      	b.n	8004fca <LPTIM_Disable+0xa6>
      __HAL_RCC_LPTIM2_FORCE_RESET();
 8004fbc:	2020      	movs	r0, #32
 8004fbe:	f7ff fd3e 	bl	8004a3e <LL_APB1_GRP2_ForceReset>
      __HAL_RCC_LPTIM2_RELEASE_RESET();
 8004fc2:	2020      	movs	r0, #32
 8004fc4:	f7ff fd60 	bl	8004a88 <LL_APB1_GRP2_ReleaseReset>
      break;
 8004fc8:	bf00      	nop
  }

  /*********** Restore LPTIM Config ***********/
  if ((tmpCMP != 0UL) || (tmpARR != 0UL))
 8004fca:	69fb      	ldr	r3, [r7, #28]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d102      	bne.n	8004fd6 <LPTIM_Disable+0xb2>
 8004fd0:	69bb      	ldr	r3, [r7, #24]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d05f      	beq.n	8005096 <LPTIM_Disable+0x172>
  {
    /* Force LPTIM source kernel clock from APB */
    switch ((uint32_t)hlptim->Instance)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4a3e      	ldr	r2, [pc, #248]	; (80050d4 <LPTIM_Disable+0x1b0>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d003      	beq.n	8004fe8 <LPTIM_Disable+0xc4>
 8004fe0:	4a3d      	ldr	r2, [pc, #244]	; (80050d8 <LPTIM_Disable+0x1b4>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d005      	beq.n	8004ff2 <LPTIM_Disable+0xce>
      case LPTIM2_BASE:
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_PCLK1);
        break;
#endif /* LPTIM2 */
      default:
        break;
 8004fe6:	e009      	b.n	8004ffc <LPTIM_Disable+0xd8>
        __HAL_RCC_LPTIM1_CONFIG(RCC_LPTIM1CLKSOURCE_PCLK1);
 8004fe8:	f44f 2040 	mov.w	r0, #786432	; 0xc0000
 8004fec:	f7ff fce8 	bl	80049c0 <LL_RCC_SetLPTIMClockSource>
        break;
 8004ff0:	e004      	b.n	8004ffc <LPTIM_Disable+0xd8>
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_PCLK1);
 8004ff2:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 8004ff6:	f7ff fce3 	bl	80049c0 <LL_RCC_SetLPTIMClockSource>
        break;
 8004ffa:	bf00      	nop
    }

    if (tmpCMP != 0UL)
 8004ffc:	69fb      	ldr	r3, [r7, #28]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d01a      	beq.n	8005038 <LPTIM_Disable+0x114>
    {
      /* Restore CMP register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	691a      	ldr	r2, [r3, #16]
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f042 0201 	orr.w	r2, r2, #1
 8005010:	611a      	str	r2, [r3, #16]
      hlptim->Instance->CMP = tmpCMP;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	69fa      	ldr	r2, [r7, #28]
 8005018:	615a      	str	r2, [r3, #20]

      /* Wait for the completion of the write operation to the LPTIM_CMP register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 800501a:	2108      	movs	r1, #8
 800501c:	6878      	ldr	r0, [r7, #4]
 800501e:	f7ff ff51 	bl	8004ec4 <LPTIM_WaitForFlag>
 8005022:	4603      	mov	r3, r0
 8005024:	2b03      	cmp	r3, #3
 8005026:	d103      	bne.n	8005030 <LPTIM_Disable+0x10c>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2203      	movs	r2, #3
 800502c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	2208      	movs	r2, #8
 8005036:	605a      	str	r2, [r3, #4]
    }

    if (tmpARR != 0UL)
 8005038:	69bb      	ldr	r3, [r7, #24]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d01a      	beq.n	8005074 <LPTIM_Disable+0x150>
    {
      /* Restore ARR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	691a      	ldr	r2, [r3, #16]
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f042 0201 	orr.w	r2, r2, #1
 800504c:	611a      	str	r2, [r3, #16]
      hlptim->Instance->ARR = tmpARR;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	69ba      	ldr	r2, [r7, #24]
 8005054:	619a      	str	r2, [r3, #24]

      /* Wait for the completion of the write operation to the LPTIM_ARR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8005056:	2110      	movs	r1, #16
 8005058:	6878      	ldr	r0, [r7, #4]
 800505a:	f7ff ff33 	bl	8004ec4 <LPTIM_WaitForFlag>
 800505e:	4603      	mov	r3, r0
 8005060:	2b03      	cmp	r3, #3
 8005062:	d103      	bne.n	800506c <LPTIM_Disable+0x148>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2203      	movs	r2, #3
 8005068:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
      }

      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	2210      	movs	r2, #16
 8005072:	605a      	str	r2, [r3, #4]
    }

    /* Restore LPTIM source kernel clock */
    switch ((uint32_t)hlptim->Instance)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a16      	ldr	r2, [pc, #88]	; (80050d4 <LPTIM_Disable+0x1b0>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d003      	beq.n	8005086 <LPTIM_Disable+0x162>
 800507e:	4a16      	ldr	r2, [pc, #88]	; (80050d8 <LPTIM_Disable+0x1b4>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d004      	beq.n	800508e <LPTIM_Disable+0x16a>
      case LPTIM2_BASE:
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
        break;
#endif /* LPTIM2 */
      default:
        break;
 8005084:	e008      	b.n	8005098 <LPTIM_Disable+0x174>
        __HAL_RCC_LPTIM1_CONFIG(tmpclksource);
 8005086:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005088:	f7ff fc9a 	bl	80049c0 <LL_RCC_SetLPTIMClockSource>
        break;
 800508c:	e004      	b.n	8005098 <LPTIM_Disable+0x174>
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
 800508e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005090:	f7ff fc96 	bl	80049c0 <LL_RCC_SetLPTIMClockSource>
        break;
 8005094:	e000      	b.n	8005098 <LPTIM_Disable+0x174>
    }
  }
 8005096:	bf00      	nop

  /* Restore configuration registers (LPTIM should be disabled first) */
  hlptim->Instance->CR &= ~(LPTIM_CR_ENABLE);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	691a      	ldr	r2, [r3, #16]
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f022 0201 	bic.w	r2, r2, #1
 80050a6:	611a      	str	r2, [r3, #16]
  hlptim->Instance->IER = tmpIER;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050ae:	609a      	str	r2, [r3, #8]
  hlptim->Instance->CFGR = tmpCFGR;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	6a3a      	ldr	r2, [r7, #32]
 80050b6:	60da      	str	r2, [r3, #12]
#if defined(LPTIM_OR_OR)
  hlptim->Instance->OR = tmpOR;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	697a      	ldr	r2, [r7, #20]
 80050be:	621a      	str	r2, [r3, #32]
 80050c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050c2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	f383 8810 	msr	PRIMASK, r3
}
 80050ca:	bf00      	nop
#endif /* LPTIM_OR_OR */

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 80050cc:	bf00      	nop
 80050ce:	3730      	adds	r7, #48	; 0x30
 80050d0:	46bd      	mov	sp, r7
 80050d2:	bd80      	pop	{r7, pc}
 80050d4:	40007c00 	.word	0x40007c00
 80050d8:	40009400 	.word	0x40009400

080050dc <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80050dc:	b480      	push	{r7}
 80050de:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80050e0:	4b05      	ldr	r3, [pc, #20]	; (80050f8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a04      	ldr	r2, [pc, #16]	; (80050f8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80050e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050ea:	6013      	str	r3, [r2, #0]
}
 80050ec:	bf00      	nop
 80050ee:	46bd      	mov	sp, r7
 80050f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f4:	4770      	bx	lr
 80050f6:	bf00      	nop
 80050f8:	58000400 	.word	0x58000400

080050fc <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80050fc:	b480      	push	{r7}
 80050fe:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8005100:	4b04      	ldr	r3, [pc, #16]	; (8005114 <HAL_PWREx_GetVoltageRange+0x18>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8005108:	4618      	mov	r0, r3
 800510a:	46bd      	mov	sp, r7
 800510c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005110:	4770      	bx	lr
 8005112:	bf00      	nop
 8005114:	58000400 	.word	0x58000400

08005118 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8005118:	b480      	push	{r7}
 800511a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800511c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005126:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800512a:	d101      	bne.n	8005130 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800512c:	2301      	movs	r3, #1
 800512e:	e000      	b.n	8005132 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8005130:	2300      	movs	r3, #0
}
 8005132:	4618      	mov	r0, r3
 8005134:	46bd      	mov	sp, r7
 8005136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513a:	4770      	bx	lr

0800513c <LL_RCC_HSE_Enable>:
{
 800513c:	b480      	push	{r7}
 800513e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8005140:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800514a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800514e:	6013      	str	r3, [r2, #0]
}
 8005150:	bf00      	nop
 8005152:	46bd      	mov	sp, r7
 8005154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005158:	4770      	bx	lr

0800515a <LL_RCC_HSE_Disable>:
{
 800515a:	b480      	push	{r7}
 800515c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800515e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005168:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800516c:	6013      	str	r3, [r2, #0]
}
 800516e:	bf00      	nop
 8005170:	46bd      	mov	sp, r7
 8005172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005176:	4770      	bx	lr

08005178 <LL_RCC_HSE_IsReady>:
{
 8005178:	b480      	push	{r7}
 800517a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800517c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005186:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800518a:	d101      	bne.n	8005190 <LL_RCC_HSE_IsReady+0x18>
 800518c:	2301      	movs	r3, #1
 800518e:	e000      	b.n	8005192 <LL_RCC_HSE_IsReady+0x1a>
 8005190:	2300      	movs	r3, #0
}
 8005192:	4618      	mov	r0, r3
 8005194:	46bd      	mov	sp, r7
 8005196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519a:	4770      	bx	lr

0800519c <LL_RCC_HSI_Enable>:
{
 800519c:	b480      	push	{r7}
 800519e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80051a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80051aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051ae:	6013      	str	r3, [r2, #0]
}
 80051b0:	bf00      	nop
 80051b2:	46bd      	mov	sp, r7
 80051b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b8:	4770      	bx	lr

080051ba <LL_RCC_HSI_Disable>:
{
 80051ba:	b480      	push	{r7}
 80051bc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80051be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80051c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80051cc:	6013      	str	r3, [r2, #0]
}
 80051ce:	bf00      	nop
 80051d0:	46bd      	mov	sp, r7
 80051d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d6:	4770      	bx	lr

080051d8 <LL_RCC_HSI_IsReady>:
{
 80051d8:	b480      	push	{r7}
 80051da:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80051dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051ea:	d101      	bne.n	80051f0 <LL_RCC_HSI_IsReady+0x18>
 80051ec:	2301      	movs	r3, #1
 80051ee:	e000      	b.n	80051f2 <LL_RCC_HSI_IsReady+0x1a>
 80051f0:	2300      	movs	r3, #0
}
 80051f2:	4618      	mov	r0, r3
 80051f4:	46bd      	mov	sp, r7
 80051f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fa:	4770      	bx	lr

080051fc <LL_RCC_HSI_SetCalibTrimming>:
{
 80051fc:	b480      	push	{r7}
 80051fe:	b083      	sub	sp, #12
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8005204:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005208:	685b      	ldr	r3, [r3, #4]
 800520a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	061b      	lsls	r3, r3, #24
 8005212:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005216:	4313      	orrs	r3, r2
 8005218:	604b      	str	r3, [r1, #4]
}
 800521a:	bf00      	nop
 800521c:	370c      	adds	r7, #12
 800521e:	46bd      	mov	sp, r7
 8005220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005224:	4770      	bx	lr

08005226 <LL_RCC_HSI48_Enable>:
{
 8005226:	b480      	push	{r7}
 8005228:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800522a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800522e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005232:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005236:	f043 0301 	orr.w	r3, r3, #1
 800523a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 800523e:	bf00      	nop
 8005240:	46bd      	mov	sp, r7
 8005242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005246:	4770      	bx	lr

08005248 <LL_RCC_HSI48_Disable>:
{
 8005248:	b480      	push	{r7}
 800524a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800524c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005250:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005254:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005258:	f023 0301 	bic.w	r3, r3, #1
 800525c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8005260:	bf00      	nop
 8005262:	46bd      	mov	sp, r7
 8005264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005268:	4770      	bx	lr

0800526a <LL_RCC_HSI48_IsReady>:
{
 800526a:	b480      	push	{r7}
 800526c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800526e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005272:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005276:	f003 0302 	and.w	r3, r3, #2
 800527a:	2b02      	cmp	r3, #2
 800527c:	d101      	bne.n	8005282 <LL_RCC_HSI48_IsReady+0x18>
 800527e:	2301      	movs	r3, #1
 8005280:	e000      	b.n	8005284 <LL_RCC_HSI48_IsReady+0x1a>
 8005282:	2300      	movs	r3, #0
}
 8005284:	4618      	mov	r0, r3
 8005286:	46bd      	mov	sp, r7
 8005288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528c:	4770      	bx	lr

0800528e <LL_RCC_LSE_Enable>:
{
 800528e:	b480      	push	{r7}
 8005290:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005292:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005296:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800529a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800529e:	f043 0301 	orr.w	r3, r3, #1
 80052a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80052a6:	bf00      	nop
 80052a8:	46bd      	mov	sp, r7
 80052aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ae:	4770      	bx	lr

080052b0 <LL_RCC_LSE_Disable>:
{
 80052b0:	b480      	push	{r7}
 80052b2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80052b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052bc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80052c0:	f023 0301 	bic.w	r3, r3, #1
 80052c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80052c8:	bf00      	nop
 80052ca:	46bd      	mov	sp, r7
 80052cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d0:	4770      	bx	lr

080052d2 <LL_RCC_LSE_EnableBypass>:
{
 80052d2:	b480      	push	{r7}
 80052d4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80052d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80052e2:	f043 0304 	orr.w	r3, r3, #4
 80052e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80052ea:	bf00      	nop
 80052ec:	46bd      	mov	sp, r7
 80052ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f2:	4770      	bx	lr

080052f4 <LL_RCC_LSE_DisableBypass>:
{
 80052f4:	b480      	push	{r7}
 80052f6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80052f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005300:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005304:	f023 0304 	bic.w	r3, r3, #4
 8005308:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800530c:	bf00      	nop
 800530e:	46bd      	mov	sp, r7
 8005310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005314:	4770      	bx	lr

08005316 <LL_RCC_LSE_IsReady>:
{
 8005316:	b480      	push	{r7}
 8005318:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800531a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800531e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005322:	f003 0302 	and.w	r3, r3, #2
 8005326:	2b02      	cmp	r3, #2
 8005328:	d101      	bne.n	800532e <LL_RCC_LSE_IsReady+0x18>
 800532a:	2301      	movs	r3, #1
 800532c:	e000      	b.n	8005330 <LL_RCC_LSE_IsReady+0x1a>
 800532e:	2300      	movs	r3, #0
}
 8005330:	4618      	mov	r0, r3
 8005332:	46bd      	mov	sp, r7
 8005334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005338:	4770      	bx	lr

0800533a <LL_RCC_LSI1_Enable>:
{
 800533a:	b480      	push	{r7}
 800533c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800533e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005342:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005346:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800534a:	f043 0301 	orr.w	r3, r3, #1
 800534e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8005352:	bf00      	nop
 8005354:	46bd      	mov	sp, r7
 8005356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535a:	4770      	bx	lr

0800535c <LL_RCC_LSI1_Disable>:
{
 800535c:	b480      	push	{r7}
 800535e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8005360:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005364:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005368:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800536c:	f023 0301 	bic.w	r3, r3, #1
 8005370:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8005374:	bf00      	nop
 8005376:	46bd      	mov	sp, r7
 8005378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537c:	4770      	bx	lr

0800537e <LL_RCC_LSI1_IsReady>:
{
 800537e:	b480      	push	{r7}
 8005380:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8005382:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005386:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800538a:	f003 0302 	and.w	r3, r3, #2
 800538e:	2b02      	cmp	r3, #2
 8005390:	d101      	bne.n	8005396 <LL_RCC_LSI1_IsReady+0x18>
 8005392:	2301      	movs	r3, #1
 8005394:	e000      	b.n	8005398 <LL_RCC_LSI1_IsReady+0x1a>
 8005396:	2300      	movs	r3, #0
}
 8005398:	4618      	mov	r0, r3
 800539a:	46bd      	mov	sp, r7
 800539c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a0:	4770      	bx	lr

080053a2 <LL_RCC_LSI2_Enable>:
{
 80053a2:	b480      	push	{r7}
 80053a4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80053a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80053ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80053b2:	f043 0304 	orr.w	r3, r3, #4
 80053b6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80053ba:	bf00      	nop
 80053bc:	46bd      	mov	sp, r7
 80053be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c2:	4770      	bx	lr

080053c4 <LL_RCC_LSI2_Disable>:
{
 80053c4:	b480      	push	{r7}
 80053c6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80053c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80053d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80053d4:	f023 0304 	bic.w	r3, r3, #4
 80053d8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80053dc:	bf00      	nop
 80053de:	46bd      	mov	sp, r7
 80053e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e4:	4770      	bx	lr

080053e6 <LL_RCC_LSI2_IsReady>:
{
 80053e6:	b480      	push	{r7}
 80053e8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 80053ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80053f2:	f003 0308 	and.w	r3, r3, #8
 80053f6:	2b08      	cmp	r3, #8
 80053f8:	d101      	bne.n	80053fe <LL_RCC_LSI2_IsReady+0x18>
 80053fa:	2301      	movs	r3, #1
 80053fc:	e000      	b.n	8005400 <LL_RCC_LSI2_IsReady+0x1a>
 80053fe:	2300      	movs	r3, #0
}
 8005400:	4618      	mov	r0, r3
 8005402:	46bd      	mov	sp, r7
 8005404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005408:	4770      	bx	lr

0800540a <LL_RCC_LSI2_SetTrimming>:
{
 800540a:	b480      	push	{r7}
 800540c:	b083      	sub	sp, #12
 800540e:	af00      	add	r7, sp, #0
 8005410:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8005412:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005416:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800541a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	021b      	lsls	r3, r3, #8
 8005422:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005426:	4313      	orrs	r3, r2
 8005428:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 800542c:	bf00      	nop
 800542e:	370c      	adds	r7, #12
 8005430:	46bd      	mov	sp, r7
 8005432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005436:	4770      	bx	lr

08005438 <LL_RCC_MSI_Enable>:
{
 8005438:	b480      	push	{r7}
 800543a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800543c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005446:	f043 0301 	orr.w	r3, r3, #1
 800544a:	6013      	str	r3, [r2, #0]
}
 800544c:	bf00      	nop
 800544e:	46bd      	mov	sp, r7
 8005450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005454:	4770      	bx	lr

08005456 <LL_RCC_MSI_Disable>:
{
 8005456:	b480      	push	{r7}
 8005458:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800545a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005464:	f023 0301 	bic.w	r3, r3, #1
 8005468:	6013      	str	r3, [r2, #0]
}
 800546a:	bf00      	nop
 800546c:	46bd      	mov	sp, r7
 800546e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005472:	4770      	bx	lr

08005474 <LL_RCC_MSI_IsReady>:
{
 8005474:	b480      	push	{r7}
 8005476:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8005478:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f003 0302 	and.w	r3, r3, #2
 8005482:	2b02      	cmp	r3, #2
 8005484:	d101      	bne.n	800548a <LL_RCC_MSI_IsReady+0x16>
 8005486:	2301      	movs	r3, #1
 8005488:	e000      	b.n	800548c <LL_RCC_MSI_IsReady+0x18>
 800548a:	2300      	movs	r3, #0
}
 800548c:	4618      	mov	r0, r3
 800548e:	46bd      	mov	sp, r7
 8005490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005494:	4770      	bx	lr

08005496 <LL_RCC_MSI_SetRange>:
{
 8005496:	b480      	push	{r7}
 8005498:	b083      	sub	sp, #12
 800549a:	af00      	add	r7, sp, #0
 800549c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800549e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80054a8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	4313      	orrs	r3, r2
 80054b0:	600b      	str	r3, [r1, #0]
}
 80054b2:	bf00      	nop
 80054b4:	370c      	adds	r7, #12
 80054b6:	46bd      	mov	sp, r7
 80054b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054bc:	4770      	bx	lr

080054be <LL_RCC_MSI_GetRange>:
{
 80054be:	b480      	push	{r7}
 80054c0:	b083      	sub	sp, #12
 80054c2:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 80054c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80054ce:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2bb0      	cmp	r3, #176	; 0xb0
 80054d4:	d901      	bls.n	80054da <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 80054d6:	23b0      	movs	r3, #176	; 0xb0
 80054d8:	607b      	str	r3, [r7, #4]
  return msiRange;
 80054da:	687b      	ldr	r3, [r7, #4]
}
 80054dc:	4618      	mov	r0, r3
 80054de:	370c      	adds	r7, #12
 80054e0:	46bd      	mov	sp, r7
 80054e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e6:	4770      	bx	lr

080054e8 <LL_RCC_MSI_SetCalibTrimming>:
{
 80054e8:	b480      	push	{r7}
 80054ea:	b083      	sub	sp, #12
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80054f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054f4:	685b      	ldr	r3, [r3, #4]
 80054f6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	021b      	lsls	r3, r3, #8
 80054fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005502:	4313      	orrs	r3, r2
 8005504:	604b      	str	r3, [r1, #4]
}
 8005506:	bf00      	nop
 8005508:	370c      	adds	r7, #12
 800550a:	46bd      	mov	sp, r7
 800550c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005510:	4770      	bx	lr

08005512 <LL_RCC_SetSysClkSource>:
{
 8005512:	b480      	push	{r7}
 8005514:	b083      	sub	sp, #12
 8005516:	af00      	add	r7, sp, #0
 8005518:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800551a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800551e:	689b      	ldr	r3, [r3, #8]
 8005520:	f023 0203 	bic.w	r2, r3, #3
 8005524:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	4313      	orrs	r3, r2
 800552c:	608b      	str	r3, [r1, #8]
}
 800552e:	bf00      	nop
 8005530:	370c      	adds	r7, #12
 8005532:	46bd      	mov	sp, r7
 8005534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005538:	4770      	bx	lr

0800553a <LL_RCC_GetSysClkSource>:
{
 800553a:	b480      	push	{r7}
 800553c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800553e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005542:	689b      	ldr	r3, [r3, #8]
 8005544:	f003 030c 	and.w	r3, r3, #12
}
 8005548:	4618      	mov	r0, r3
 800554a:	46bd      	mov	sp, r7
 800554c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005550:	4770      	bx	lr

08005552 <LL_RCC_SetAHBPrescaler>:
{
 8005552:	b480      	push	{r7}
 8005554:	b083      	sub	sp, #12
 8005556:	af00      	add	r7, sp, #0
 8005558:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800555a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800555e:	689b      	ldr	r3, [r3, #8]
 8005560:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005564:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	4313      	orrs	r3, r2
 800556c:	608b      	str	r3, [r1, #8]
}
 800556e:	bf00      	nop
 8005570:	370c      	adds	r7, #12
 8005572:	46bd      	mov	sp, r7
 8005574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005578:	4770      	bx	lr

0800557a <LL_C2_RCC_SetAHBPrescaler>:
{
 800557a:	b480      	push	{r7}
 800557c:	b083      	sub	sp, #12
 800557e:	af00      	add	r7, sp, #0
 8005580:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8005582:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005586:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800558a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800558e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	4313      	orrs	r3, r2
 8005596:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800559a:	bf00      	nop
 800559c:	370c      	adds	r7, #12
 800559e:	46bd      	mov	sp, r7
 80055a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a4:	4770      	bx	lr

080055a6 <LL_RCC_SetAHB4Prescaler>:
{
 80055a6:	b480      	push	{r7}
 80055a8:	b083      	sub	sp, #12
 80055aa:	af00      	add	r7, sp, #0
 80055ac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80055ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055b2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80055b6:	f023 020f 	bic.w	r2, r3, #15
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	091b      	lsrs	r3, r3, #4
 80055be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80055c2:	4313      	orrs	r3, r2
 80055c4:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80055c8:	bf00      	nop
 80055ca:	370c      	adds	r7, #12
 80055cc:	46bd      	mov	sp, r7
 80055ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d2:	4770      	bx	lr

080055d4 <LL_RCC_SetAPB1Prescaler>:
{
 80055d4:	b480      	push	{r7}
 80055d6:	b083      	sub	sp, #12
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80055dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055e0:	689b      	ldr	r3, [r3, #8]
 80055e2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80055e6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	4313      	orrs	r3, r2
 80055ee:	608b      	str	r3, [r1, #8]
}
 80055f0:	bf00      	nop
 80055f2:	370c      	adds	r7, #12
 80055f4:	46bd      	mov	sp, r7
 80055f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fa:	4770      	bx	lr

080055fc <LL_RCC_SetAPB2Prescaler>:
{
 80055fc:	b480      	push	{r7}
 80055fe:	b083      	sub	sp, #12
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8005604:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005608:	689b      	ldr	r3, [r3, #8]
 800560a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800560e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	4313      	orrs	r3, r2
 8005616:	608b      	str	r3, [r1, #8]
}
 8005618:	bf00      	nop
 800561a:	370c      	adds	r7, #12
 800561c:	46bd      	mov	sp, r7
 800561e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005622:	4770      	bx	lr

08005624 <LL_RCC_GetAHBPrescaler>:
{
 8005624:	b480      	push	{r7}
 8005626:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8005628:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800562c:	689b      	ldr	r3, [r3, #8]
 800562e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8005632:	4618      	mov	r0, r3
 8005634:	46bd      	mov	sp, r7
 8005636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563a:	4770      	bx	lr

0800563c <LL_RCC_GetAHB4Prescaler>:
{
 800563c:	b480      	push	{r7}
 800563e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8005640:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005644:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005648:	011b      	lsls	r3, r3, #4
 800564a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800564e:	4618      	mov	r0, r3
 8005650:	46bd      	mov	sp, r7
 8005652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005656:	4770      	bx	lr

08005658 <LL_RCC_GetAPB1Prescaler>:
{
 8005658:	b480      	push	{r7}
 800565a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800565c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005660:	689b      	ldr	r3, [r3, #8]
 8005662:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8005666:	4618      	mov	r0, r3
 8005668:	46bd      	mov	sp, r7
 800566a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566e:	4770      	bx	lr

08005670 <LL_RCC_GetAPB2Prescaler>:
{
 8005670:	b480      	push	{r7}
 8005672:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8005674:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005678:	689b      	ldr	r3, [r3, #8]
 800567a:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 800567e:	4618      	mov	r0, r3
 8005680:	46bd      	mov	sp, r7
 8005682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005686:	4770      	bx	lr

08005688 <LL_RCC_PLL_Enable>:
{
 8005688:	b480      	push	{r7}
 800568a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800568c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005696:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800569a:	6013      	str	r3, [r2, #0]
}
 800569c:	bf00      	nop
 800569e:	46bd      	mov	sp, r7
 80056a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a4:	4770      	bx	lr

080056a6 <LL_RCC_PLL_Disable>:
{
 80056a6:	b480      	push	{r7}
 80056a8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80056aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80056b4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80056b8:	6013      	str	r3, [r2, #0]
}
 80056ba:	bf00      	nop
 80056bc:	46bd      	mov	sp, r7
 80056be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c2:	4770      	bx	lr

080056c4 <LL_RCC_PLL_IsReady>:
{
 80056c4:	b480      	push	{r7}
 80056c6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80056c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056d2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80056d6:	d101      	bne.n	80056dc <LL_RCC_PLL_IsReady+0x18>
 80056d8:	2301      	movs	r3, #1
 80056da:	e000      	b.n	80056de <LL_RCC_PLL_IsReady+0x1a>
 80056dc:	2300      	movs	r3, #0
}
 80056de:	4618      	mov	r0, r3
 80056e0:	46bd      	mov	sp, r7
 80056e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e6:	4770      	bx	lr

080056e8 <LL_RCC_PLL_GetN>:
{
 80056e8:	b480      	push	{r7}
 80056ea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80056ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056f0:	68db      	ldr	r3, [r3, #12]
 80056f2:	0a1b      	lsrs	r3, r3, #8
 80056f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80056f8:	4618      	mov	r0, r3
 80056fa:	46bd      	mov	sp, r7
 80056fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005700:	4770      	bx	lr

08005702 <LL_RCC_PLL_GetR>:
{
 8005702:	b480      	push	{r7}
 8005704:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8005706:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800570a:	68db      	ldr	r3, [r3, #12]
 800570c:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8005710:	4618      	mov	r0, r3
 8005712:	46bd      	mov	sp, r7
 8005714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005718:	4770      	bx	lr

0800571a <LL_RCC_PLL_GetDivider>:
{
 800571a:	b480      	push	{r7}
 800571c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800571e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005722:	68db      	ldr	r3, [r3, #12]
 8005724:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8005728:	4618      	mov	r0, r3
 800572a:	46bd      	mov	sp, r7
 800572c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005730:	4770      	bx	lr

08005732 <LL_RCC_PLL_GetMainSource>:
{
 8005732:	b480      	push	{r7}
 8005734:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8005736:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800573a:	68db      	ldr	r3, [r3, #12]
 800573c:	f003 0303 	and.w	r3, r3, #3
}
 8005740:	4618      	mov	r0, r3
 8005742:	46bd      	mov	sp, r7
 8005744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005748:	4770      	bx	lr

0800574a <LL_RCC_IsActiveFlag_HPRE>:
{
 800574a:	b480      	push	{r7}
 800574c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800574e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005752:	689b      	ldr	r3, [r3, #8]
 8005754:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005758:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800575c:	d101      	bne.n	8005762 <LL_RCC_IsActiveFlag_HPRE+0x18>
 800575e:	2301      	movs	r3, #1
 8005760:	e000      	b.n	8005764 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8005762:	2300      	movs	r3, #0
}
 8005764:	4618      	mov	r0, r3
 8005766:	46bd      	mov	sp, r7
 8005768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576c:	4770      	bx	lr

0800576e <LL_RCC_IsActiveFlag_C2HPRE>:
{
 800576e:	b480      	push	{r7}
 8005770:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8005772:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005776:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800577a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800577e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005782:	d101      	bne.n	8005788 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8005784:	2301      	movs	r3, #1
 8005786:	e000      	b.n	800578a <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8005788:	2300      	movs	r3, #0
}
 800578a:	4618      	mov	r0, r3
 800578c:	46bd      	mov	sp, r7
 800578e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005792:	4770      	bx	lr

08005794 <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 8005794:	b480      	push	{r7}
 8005796:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8005798:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800579c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80057a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80057a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057a8:	d101      	bne.n	80057ae <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80057aa:	2301      	movs	r3, #1
 80057ac:	e000      	b.n	80057b0 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80057ae:	2300      	movs	r3, #0
}
 80057b0:	4618      	mov	r0, r3
 80057b2:	46bd      	mov	sp, r7
 80057b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b8:	4770      	bx	lr

080057ba <LL_RCC_IsActiveFlag_PPRE1>:
{
 80057ba:	b480      	push	{r7}
 80057bc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80057be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057c2:	689b      	ldr	r3, [r3, #8]
 80057c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057c8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80057cc:	d101      	bne.n	80057d2 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80057ce:	2301      	movs	r3, #1
 80057d0:	e000      	b.n	80057d4 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80057d2:	2300      	movs	r3, #0
}
 80057d4:	4618      	mov	r0, r3
 80057d6:	46bd      	mov	sp, r7
 80057d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057dc:	4770      	bx	lr

080057de <LL_RCC_IsActiveFlag_PPRE2>:
{
 80057de:	b480      	push	{r7}
 80057e0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80057e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057e6:	689b      	ldr	r3, [r3, #8]
 80057e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80057ec:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80057f0:	d101      	bne.n	80057f6 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80057f2:	2301      	movs	r3, #1
 80057f4:	e000      	b.n	80057f8 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80057f6:	2300      	movs	r3, #0
}
 80057f8:	4618      	mov	r0, r3
 80057fa:	46bd      	mov	sp, r7
 80057fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005800:	4770      	bx	lr
	...

08005804 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005804:	b590      	push	{r4, r7, lr}
 8005806:	b08d      	sub	sp, #52	; 0x34
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d101      	bne.n	8005816 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005812:	2301      	movs	r3, #1
 8005814:	e363      	b.n	8005ede <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f003 0320 	and.w	r3, r3, #32
 800581e:	2b00      	cmp	r3, #0
 8005820:	f000 808d 	beq.w	800593e <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005824:	f7ff fe89 	bl	800553a <LL_RCC_GetSysClkSource>
 8005828:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800582a:	f7ff ff82 	bl	8005732 <LL_RCC_PLL_GetMainSource>
 800582e:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005832:	2b00      	cmp	r3, #0
 8005834:	d005      	beq.n	8005842 <HAL_RCC_OscConfig+0x3e>
 8005836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005838:	2b0c      	cmp	r3, #12
 800583a:	d147      	bne.n	80058cc <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 800583c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800583e:	2b01      	cmp	r3, #1
 8005840:	d144      	bne.n	80058cc <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	69db      	ldr	r3, [r3, #28]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d101      	bne.n	800584e <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800584a:	2301      	movs	r3, #1
 800584c:	e347      	b.n	8005ede <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8005852:	f7ff fe34 	bl	80054be <LL_RCC_MSI_GetRange>
 8005856:	4603      	mov	r3, r0
 8005858:	429c      	cmp	r4, r3
 800585a:	d914      	bls.n	8005886 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005860:	4618      	mov	r0, r3
 8005862:	f000 fd2f 	bl	80062c4 <RCC_SetFlashLatencyFromMSIRange>
 8005866:	4603      	mov	r3, r0
 8005868:	2b00      	cmp	r3, #0
 800586a:	d001      	beq.n	8005870 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 800586c:	2301      	movs	r3, #1
 800586e:	e336      	b.n	8005ede <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005874:	4618      	mov	r0, r3
 8005876:	f7ff fe0e 	bl	8005496 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6a1b      	ldr	r3, [r3, #32]
 800587e:	4618      	mov	r0, r3
 8005880:	f7ff fe32 	bl	80054e8 <LL_RCC_MSI_SetCalibTrimming>
 8005884:	e013      	b.n	80058ae <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800588a:	4618      	mov	r0, r3
 800588c:	f7ff fe03 	bl	8005496 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6a1b      	ldr	r3, [r3, #32]
 8005894:	4618      	mov	r0, r3
 8005896:	f7ff fe27 	bl	80054e8 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800589e:	4618      	mov	r0, r3
 80058a0:	f000 fd10 	bl	80062c4 <RCC_SetFlashLatencyFromMSIRange>
 80058a4:	4603      	mov	r3, r0
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d001      	beq.n	80058ae <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 80058aa:	2301      	movs	r3, #1
 80058ac:	e317      	b.n	8005ede <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80058ae:	f000 fcc9 	bl	8006244 <HAL_RCC_GetHCLKFreq>
 80058b2:	4603      	mov	r3, r0
 80058b4:	4aa4      	ldr	r2, [pc, #656]	; (8005b48 <HAL_RCC_OscConfig+0x344>)
 80058b6:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80058b8:	4ba4      	ldr	r3, [pc, #656]	; (8005b4c <HAL_RCC_OscConfig+0x348>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4618      	mov	r0, r3
 80058be:	f7fd fb45 	bl	8002f4c <HAL_InitTick>
 80058c2:	4603      	mov	r3, r0
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d039      	beq.n	800593c <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 80058c8:	2301      	movs	r3, #1
 80058ca:	e308      	b.n	8005ede <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	69db      	ldr	r3, [r3, #28]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d01e      	beq.n	8005912 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80058d4:	f7ff fdb0 	bl	8005438 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80058d8:	f7fd fb86 	bl	8002fe8 <HAL_GetTick>
 80058dc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80058de:	e008      	b.n	80058f2 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80058e0:	f7fd fb82 	bl	8002fe8 <HAL_GetTick>
 80058e4:	4602      	mov	r2, r0
 80058e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058e8:	1ad3      	subs	r3, r2, r3
 80058ea:	2b02      	cmp	r3, #2
 80058ec:	d901      	bls.n	80058f2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80058ee:	2303      	movs	r3, #3
 80058f0:	e2f5      	b.n	8005ede <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 80058f2:	f7ff fdbf 	bl	8005474 <LL_RCC_MSI_IsReady>
 80058f6:	4603      	mov	r3, r0
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d0f1      	beq.n	80058e0 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005900:	4618      	mov	r0, r3
 8005902:	f7ff fdc8 	bl	8005496 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6a1b      	ldr	r3, [r3, #32]
 800590a:	4618      	mov	r0, r3
 800590c:	f7ff fdec 	bl	80054e8 <LL_RCC_MSI_SetCalibTrimming>
 8005910:	e015      	b.n	800593e <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005912:	f7ff fda0 	bl	8005456 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005916:	f7fd fb67 	bl	8002fe8 <HAL_GetTick>
 800591a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800591c:	e008      	b.n	8005930 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800591e:	f7fd fb63 	bl	8002fe8 <HAL_GetTick>
 8005922:	4602      	mov	r2, r0
 8005924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005926:	1ad3      	subs	r3, r2, r3
 8005928:	2b02      	cmp	r3, #2
 800592a:	d901      	bls.n	8005930 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800592c:	2303      	movs	r3, #3
 800592e:	e2d6      	b.n	8005ede <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8005930:	f7ff fda0 	bl	8005474 <LL_RCC_MSI_IsReady>
 8005934:	4603      	mov	r3, r0
 8005936:	2b00      	cmp	r3, #0
 8005938:	d1f1      	bne.n	800591e <HAL_RCC_OscConfig+0x11a>
 800593a:	e000      	b.n	800593e <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800593c:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f003 0301 	and.w	r3, r3, #1
 8005946:	2b00      	cmp	r3, #0
 8005948:	d047      	beq.n	80059da <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800594a:	f7ff fdf6 	bl	800553a <LL_RCC_GetSysClkSource>
 800594e:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005950:	f7ff feef 	bl	8005732 <LL_RCC_PLL_GetMainSource>
 8005954:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8005956:	6a3b      	ldr	r3, [r7, #32]
 8005958:	2b08      	cmp	r3, #8
 800595a:	d005      	beq.n	8005968 <HAL_RCC_OscConfig+0x164>
 800595c:	6a3b      	ldr	r3, [r7, #32]
 800595e:	2b0c      	cmp	r3, #12
 8005960:	d108      	bne.n	8005974 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8005962:	69fb      	ldr	r3, [r7, #28]
 8005964:	2b03      	cmp	r3, #3
 8005966:	d105      	bne.n	8005974 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	685b      	ldr	r3, [r3, #4]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d134      	bne.n	80059da <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8005970:	2301      	movs	r3, #1
 8005972:	e2b4      	b.n	8005ede <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	685b      	ldr	r3, [r3, #4]
 8005978:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800597c:	d102      	bne.n	8005984 <HAL_RCC_OscConfig+0x180>
 800597e:	f7ff fbdd 	bl	800513c <LL_RCC_HSE_Enable>
 8005982:	e001      	b.n	8005988 <HAL_RCC_OscConfig+0x184>
 8005984:	f7ff fbe9 	bl	800515a <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	685b      	ldr	r3, [r3, #4]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d012      	beq.n	80059b6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005990:	f7fd fb2a 	bl	8002fe8 <HAL_GetTick>
 8005994:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8005996:	e008      	b.n	80059aa <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005998:	f7fd fb26 	bl	8002fe8 <HAL_GetTick>
 800599c:	4602      	mov	r2, r0
 800599e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059a0:	1ad3      	subs	r3, r2, r3
 80059a2:	2b64      	cmp	r3, #100	; 0x64
 80059a4:	d901      	bls.n	80059aa <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80059a6:	2303      	movs	r3, #3
 80059a8:	e299      	b.n	8005ede <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 80059aa:	f7ff fbe5 	bl	8005178 <LL_RCC_HSE_IsReady>
 80059ae:	4603      	mov	r3, r0
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d0f1      	beq.n	8005998 <HAL_RCC_OscConfig+0x194>
 80059b4:	e011      	b.n	80059da <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059b6:	f7fd fb17 	bl	8002fe8 <HAL_GetTick>
 80059ba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80059bc:	e008      	b.n	80059d0 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80059be:	f7fd fb13 	bl	8002fe8 <HAL_GetTick>
 80059c2:	4602      	mov	r2, r0
 80059c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059c6:	1ad3      	subs	r3, r2, r3
 80059c8:	2b64      	cmp	r3, #100	; 0x64
 80059ca:	d901      	bls.n	80059d0 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80059cc:	2303      	movs	r3, #3
 80059ce:	e286      	b.n	8005ede <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 80059d0:	f7ff fbd2 	bl	8005178 <LL_RCC_HSE_IsReady>
 80059d4:	4603      	mov	r3, r0
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d1f1      	bne.n	80059be <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f003 0302 	and.w	r3, r3, #2
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d04c      	beq.n	8005a80 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80059e6:	f7ff fda8 	bl	800553a <LL_RCC_GetSysClkSource>
 80059ea:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80059ec:	f7ff fea1 	bl	8005732 <LL_RCC_PLL_GetMainSource>
 80059f0:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80059f2:	69bb      	ldr	r3, [r7, #24]
 80059f4:	2b04      	cmp	r3, #4
 80059f6:	d005      	beq.n	8005a04 <HAL_RCC_OscConfig+0x200>
 80059f8:	69bb      	ldr	r3, [r7, #24]
 80059fa:	2b0c      	cmp	r3, #12
 80059fc:	d10e      	bne.n	8005a1c <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 80059fe:	697b      	ldr	r3, [r7, #20]
 8005a00:	2b02      	cmp	r3, #2
 8005a02:	d10b      	bne.n	8005a1c <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	68db      	ldr	r3, [r3, #12]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d101      	bne.n	8005a10 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	e266      	b.n	8005ede <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	691b      	ldr	r3, [r3, #16]
 8005a14:	4618      	mov	r0, r3
 8005a16:	f7ff fbf1 	bl	80051fc <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8005a1a:	e031      	b.n	8005a80 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	68db      	ldr	r3, [r3, #12]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d019      	beq.n	8005a58 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005a24:	f7ff fbba 	bl	800519c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a28:	f7fd fade 	bl	8002fe8 <HAL_GetTick>
 8005a2c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8005a2e:	e008      	b.n	8005a42 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005a30:	f7fd fada 	bl	8002fe8 <HAL_GetTick>
 8005a34:	4602      	mov	r2, r0
 8005a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a38:	1ad3      	subs	r3, r2, r3
 8005a3a:	2b02      	cmp	r3, #2
 8005a3c:	d901      	bls.n	8005a42 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8005a3e:	2303      	movs	r3, #3
 8005a40:	e24d      	b.n	8005ede <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8005a42:	f7ff fbc9 	bl	80051d8 <LL_RCC_HSI_IsReady>
 8005a46:	4603      	mov	r3, r0
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d0f1      	beq.n	8005a30 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	691b      	ldr	r3, [r3, #16]
 8005a50:	4618      	mov	r0, r3
 8005a52:	f7ff fbd3 	bl	80051fc <LL_RCC_HSI_SetCalibTrimming>
 8005a56:	e013      	b.n	8005a80 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005a58:	f7ff fbaf 	bl	80051ba <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a5c:	f7fd fac4 	bl	8002fe8 <HAL_GetTick>
 8005a60:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8005a62:	e008      	b.n	8005a76 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005a64:	f7fd fac0 	bl	8002fe8 <HAL_GetTick>
 8005a68:	4602      	mov	r2, r0
 8005a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a6c:	1ad3      	subs	r3, r2, r3
 8005a6e:	2b02      	cmp	r3, #2
 8005a70:	d901      	bls.n	8005a76 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8005a72:	2303      	movs	r3, #3
 8005a74:	e233      	b.n	8005ede <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8005a76:	f7ff fbaf 	bl	80051d8 <LL_RCC_HSI_IsReady>
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d1f1      	bne.n	8005a64 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f003 0308 	and.w	r3, r3, #8
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d106      	bne.n	8005a9a <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	f000 80a3 	beq.w	8005be0 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	695b      	ldr	r3, [r3, #20]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d076      	beq.n	8005b90 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f003 0310 	and.w	r3, r3, #16
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d046      	beq.n	8005b3c <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8005aae:	f7ff fc66 	bl	800537e <LL_RCC_LSI1_IsReady>
 8005ab2:	4603      	mov	r3, r0
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d113      	bne.n	8005ae0 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8005ab8:	f7ff fc3f 	bl	800533a <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005abc:	f7fd fa94 	bl	8002fe8 <HAL_GetTick>
 8005ac0:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8005ac2:	e008      	b.n	8005ad6 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005ac4:	f7fd fa90 	bl	8002fe8 <HAL_GetTick>
 8005ac8:	4602      	mov	r2, r0
 8005aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005acc:	1ad3      	subs	r3, r2, r3
 8005ace:	2b02      	cmp	r3, #2
 8005ad0:	d901      	bls.n	8005ad6 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8005ad2:	2303      	movs	r3, #3
 8005ad4:	e203      	b.n	8005ede <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8005ad6:	f7ff fc52 	bl	800537e <LL_RCC_LSI1_IsReady>
 8005ada:	4603      	mov	r3, r0
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d0f1      	beq.n	8005ac4 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8005ae0:	f7ff fc5f 	bl	80053a2 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ae4:	f7fd fa80 	bl	8002fe8 <HAL_GetTick>
 8005ae8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8005aea:	e008      	b.n	8005afe <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8005aec:	f7fd fa7c 	bl	8002fe8 <HAL_GetTick>
 8005af0:	4602      	mov	r2, r0
 8005af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005af4:	1ad3      	subs	r3, r2, r3
 8005af6:	2b03      	cmp	r3, #3
 8005af8:	d901      	bls.n	8005afe <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8005afa:	2303      	movs	r3, #3
 8005afc:	e1ef      	b.n	8005ede <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8005afe:	f7ff fc72 	bl	80053e6 <LL_RCC_LSI2_IsReady>
 8005b02:	4603      	mov	r3, r0
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d0f1      	beq.n	8005aec <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	699b      	ldr	r3, [r3, #24]
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	f7ff fc7c 	bl	800540a <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8005b12:	f7ff fc23 	bl	800535c <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b16:	f7fd fa67 	bl	8002fe8 <HAL_GetTick>
 8005b1a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8005b1c:	e008      	b.n	8005b30 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005b1e:	f7fd fa63 	bl	8002fe8 <HAL_GetTick>
 8005b22:	4602      	mov	r2, r0
 8005b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b26:	1ad3      	subs	r3, r2, r3
 8005b28:	2b02      	cmp	r3, #2
 8005b2a:	d901      	bls.n	8005b30 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8005b2c:	2303      	movs	r3, #3
 8005b2e:	e1d6      	b.n	8005ede <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8005b30:	f7ff fc25 	bl	800537e <LL_RCC_LSI1_IsReady>
 8005b34:	4603      	mov	r3, r0
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d1f1      	bne.n	8005b1e <HAL_RCC_OscConfig+0x31a>
 8005b3a:	e051      	b.n	8005be0 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8005b3c:	f7ff fbfd 	bl	800533a <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b40:	f7fd fa52 	bl	8002fe8 <HAL_GetTick>
 8005b44:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8005b46:	e00c      	b.n	8005b62 <HAL_RCC_OscConfig+0x35e>
 8005b48:	20000008 	.word	0x20000008
 8005b4c:	2000000c 	.word	0x2000000c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005b50:	f7fd fa4a 	bl	8002fe8 <HAL_GetTick>
 8005b54:	4602      	mov	r2, r0
 8005b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b58:	1ad3      	subs	r3, r2, r3
 8005b5a:	2b02      	cmp	r3, #2
 8005b5c:	d901      	bls.n	8005b62 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8005b5e:	2303      	movs	r3, #3
 8005b60:	e1bd      	b.n	8005ede <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8005b62:	f7ff fc0c 	bl	800537e <LL_RCC_LSI1_IsReady>
 8005b66:	4603      	mov	r3, r0
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d0f1      	beq.n	8005b50 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8005b6c:	f7ff fc2a 	bl	80053c4 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8005b70:	e008      	b.n	8005b84 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8005b72:	f7fd fa39 	bl	8002fe8 <HAL_GetTick>
 8005b76:	4602      	mov	r2, r0
 8005b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b7a:	1ad3      	subs	r3, r2, r3
 8005b7c:	2b03      	cmp	r3, #3
 8005b7e:	d901      	bls.n	8005b84 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8005b80:	2303      	movs	r3, #3
 8005b82:	e1ac      	b.n	8005ede <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8005b84:	f7ff fc2f 	bl	80053e6 <LL_RCC_LSI2_IsReady>
 8005b88:	4603      	mov	r3, r0
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d1f1      	bne.n	8005b72 <HAL_RCC_OscConfig+0x36e>
 8005b8e:	e027      	b.n	8005be0 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8005b90:	f7ff fc18 	bl	80053c4 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b94:	f7fd fa28 	bl	8002fe8 <HAL_GetTick>
 8005b98:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8005b9a:	e008      	b.n	8005bae <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8005b9c:	f7fd fa24 	bl	8002fe8 <HAL_GetTick>
 8005ba0:	4602      	mov	r2, r0
 8005ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba4:	1ad3      	subs	r3, r2, r3
 8005ba6:	2b03      	cmp	r3, #3
 8005ba8:	d901      	bls.n	8005bae <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8005baa:	2303      	movs	r3, #3
 8005bac:	e197      	b.n	8005ede <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8005bae:	f7ff fc1a 	bl	80053e6 <LL_RCC_LSI2_IsReady>
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d1f1      	bne.n	8005b9c <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8005bb8:	f7ff fbd0 	bl	800535c <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bbc:	f7fd fa14 	bl	8002fe8 <HAL_GetTick>
 8005bc0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8005bc2:	e008      	b.n	8005bd6 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005bc4:	f7fd fa10 	bl	8002fe8 <HAL_GetTick>
 8005bc8:	4602      	mov	r2, r0
 8005bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bcc:	1ad3      	subs	r3, r2, r3
 8005bce:	2b02      	cmp	r3, #2
 8005bd0:	d901      	bls.n	8005bd6 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8005bd2:	2303      	movs	r3, #3
 8005bd4:	e183      	b.n	8005ede <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8005bd6:	f7ff fbd2 	bl	800537e <LL_RCC_LSI1_IsReady>
 8005bda:	4603      	mov	r3, r0
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d1f1      	bne.n	8005bc4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f003 0304 	and.w	r3, r3, #4
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d05b      	beq.n	8005ca4 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005bec:	4ba7      	ldr	r3, [pc, #668]	; (8005e8c <HAL_RCC_OscConfig+0x688>)
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d114      	bne.n	8005c22 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8005bf8:	f7ff fa70 	bl	80050dc <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005bfc:	f7fd f9f4 	bl	8002fe8 <HAL_GetTick>
 8005c00:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005c02:	e008      	b.n	8005c16 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c04:	f7fd f9f0 	bl	8002fe8 <HAL_GetTick>
 8005c08:	4602      	mov	r2, r0
 8005c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c0c:	1ad3      	subs	r3, r2, r3
 8005c0e:	2b02      	cmp	r3, #2
 8005c10:	d901      	bls.n	8005c16 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8005c12:	2303      	movs	r3, #3
 8005c14:	e163      	b.n	8005ede <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005c16:	4b9d      	ldr	r3, [pc, #628]	; (8005e8c <HAL_RCC_OscConfig+0x688>)
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d0f0      	beq.n	8005c04 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	689b      	ldr	r3, [r3, #8]
 8005c26:	2b01      	cmp	r3, #1
 8005c28:	d102      	bne.n	8005c30 <HAL_RCC_OscConfig+0x42c>
 8005c2a:	f7ff fb30 	bl	800528e <LL_RCC_LSE_Enable>
 8005c2e:	e00c      	b.n	8005c4a <HAL_RCC_OscConfig+0x446>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	689b      	ldr	r3, [r3, #8]
 8005c34:	2b05      	cmp	r3, #5
 8005c36:	d104      	bne.n	8005c42 <HAL_RCC_OscConfig+0x43e>
 8005c38:	f7ff fb4b 	bl	80052d2 <LL_RCC_LSE_EnableBypass>
 8005c3c:	f7ff fb27 	bl	800528e <LL_RCC_LSE_Enable>
 8005c40:	e003      	b.n	8005c4a <HAL_RCC_OscConfig+0x446>
 8005c42:	f7ff fb35 	bl	80052b0 <LL_RCC_LSE_Disable>
 8005c46:	f7ff fb55 	bl	80052f4 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	689b      	ldr	r3, [r3, #8]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d014      	beq.n	8005c7c <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c52:	f7fd f9c9 	bl	8002fe8 <HAL_GetTick>
 8005c56:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8005c58:	e00a      	b.n	8005c70 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c5a:	f7fd f9c5 	bl	8002fe8 <HAL_GetTick>
 8005c5e:	4602      	mov	r2, r0
 8005c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c62:	1ad3      	subs	r3, r2, r3
 8005c64:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d901      	bls.n	8005c70 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8005c6c:	2303      	movs	r3, #3
 8005c6e:	e136      	b.n	8005ede <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8005c70:	f7ff fb51 	bl	8005316 <LL_RCC_LSE_IsReady>
 8005c74:	4603      	mov	r3, r0
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d0ef      	beq.n	8005c5a <HAL_RCC_OscConfig+0x456>
 8005c7a:	e013      	b.n	8005ca4 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c7c:	f7fd f9b4 	bl	8002fe8 <HAL_GetTick>
 8005c80:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8005c82:	e00a      	b.n	8005c9a <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c84:	f7fd f9b0 	bl	8002fe8 <HAL_GetTick>
 8005c88:	4602      	mov	r2, r0
 8005c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c8c:	1ad3      	subs	r3, r2, r3
 8005c8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d901      	bls.n	8005c9a <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8005c96:	2303      	movs	r3, #3
 8005c98:	e121      	b.n	8005ede <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8005c9a:	f7ff fb3c 	bl	8005316 <LL_RCC_LSE_IsReady>
 8005c9e:	4603      	mov	r3, r0
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d1ef      	bne.n	8005c84 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d02c      	beq.n	8005d0a <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d014      	beq.n	8005ce2 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005cb8:	f7ff fab5 	bl	8005226 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cbc:	f7fd f994 	bl	8002fe8 <HAL_GetTick>
 8005cc0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8005cc2:	e008      	b.n	8005cd6 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005cc4:	f7fd f990 	bl	8002fe8 <HAL_GetTick>
 8005cc8:	4602      	mov	r2, r0
 8005cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ccc:	1ad3      	subs	r3, r2, r3
 8005cce:	2b02      	cmp	r3, #2
 8005cd0:	d901      	bls.n	8005cd6 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8005cd2:	2303      	movs	r3, #3
 8005cd4:	e103      	b.n	8005ede <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8005cd6:	f7ff fac8 	bl	800526a <LL_RCC_HSI48_IsReady>
 8005cda:	4603      	mov	r3, r0
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d0f1      	beq.n	8005cc4 <HAL_RCC_OscConfig+0x4c0>
 8005ce0:	e013      	b.n	8005d0a <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005ce2:	f7ff fab1 	bl	8005248 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ce6:	f7fd f97f 	bl	8002fe8 <HAL_GetTick>
 8005cea:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8005cec:	e008      	b.n	8005d00 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005cee:	f7fd f97b 	bl	8002fe8 <HAL_GetTick>
 8005cf2:	4602      	mov	r2, r0
 8005cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf6:	1ad3      	subs	r3, r2, r3
 8005cf8:	2b02      	cmp	r3, #2
 8005cfa:	d901      	bls.n	8005d00 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8005cfc:	2303      	movs	r3, #3
 8005cfe:	e0ee      	b.n	8005ede <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8005d00:	f7ff fab3 	bl	800526a <LL_RCC_HSI48_IsReady>
 8005d04:	4603      	mov	r3, r0
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d1f1      	bne.n	8005cee <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	f000 80e4 	beq.w	8005edc <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005d14:	f7ff fc11 	bl	800553a <LL_RCC_GetSysClkSource>
 8005d18:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8005d1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d1e:	68db      	ldr	r3, [r3, #12]
 8005d20:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d26:	2b02      	cmp	r3, #2
 8005d28:	f040 80b4 	bne.w	8005e94 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	f003 0203 	and.w	r2, r3, #3
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d36:	429a      	cmp	r2, r3
 8005d38:	d123      	bne.n	8005d82 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d44:	429a      	cmp	r2, r3
 8005d46:	d11c      	bne.n	8005d82 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	0a1b      	lsrs	r3, r3, #8
 8005d4c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005d54:	429a      	cmp	r2, r3
 8005d56:	d114      	bne.n	8005d82 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8005d62:	429a      	cmp	r2, r3
 8005d64:	d10d      	bne.n	8005d82 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005d70:	429a      	cmp	r2, r3
 8005d72:	d106      	bne.n	8005d82 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005d7e:	429a      	cmp	r2, r3
 8005d80:	d05d      	beq.n	8005e3e <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005d82:	693b      	ldr	r3, [r7, #16]
 8005d84:	2b0c      	cmp	r3, #12
 8005d86:	d058      	beq.n	8005e3a <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005d88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d001      	beq.n	8005d9a <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8005d96:	2301      	movs	r3, #1
 8005d98:	e0a1      	b.n	8005ede <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005d9a:	f7ff fc84 	bl	80056a6 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005d9e:	f7fd f923 	bl	8002fe8 <HAL_GetTick>
 8005da2:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005da4:	e008      	b.n	8005db8 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005da6:	f7fd f91f 	bl	8002fe8 <HAL_GetTick>
 8005daa:	4602      	mov	r2, r0
 8005dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dae:	1ad3      	subs	r3, r2, r3
 8005db0:	2b02      	cmp	r3, #2
 8005db2:	d901      	bls.n	8005db8 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8005db4:	2303      	movs	r3, #3
 8005db6:	e092      	b.n	8005ede <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005db8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d1ef      	bne.n	8005da6 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005dc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005dca:	68da      	ldr	r2, [r3, #12]
 8005dcc:	4b30      	ldr	r3, [pc, #192]	; (8005e90 <HAL_RCC_OscConfig+0x68c>)
 8005dce:	4013      	ands	r3, r2
 8005dd0:	687a      	ldr	r2, [r7, #4]
 8005dd2:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8005dd4:	687a      	ldr	r2, [r7, #4]
 8005dd6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005dd8:	4311      	orrs	r1, r2
 8005dda:	687a      	ldr	r2, [r7, #4]
 8005ddc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005dde:	0212      	lsls	r2, r2, #8
 8005de0:	4311      	orrs	r1, r2
 8005de2:	687a      	ldr	r2, [r7, #4]
 8005de4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005de6:	4311      	orrs	r1, r2
 8005de8:	687a      	ldr	r2, [r7, #4]
 8005dea:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005dec:	4311      	orrs	r1, r2
 8005dee:	687a      	ldr	r2, [r7, #4]
 8005df0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005df2:	430a      	orrs	r2, r1
 8005df4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005df8:	4313      	orrs	r3, r2
 8005dfa:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005dfc:	f7ff fc44 	bl	8005688 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005e00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e04:	68db      	ldr	r3, [r3, #12]
 8005e06:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005e0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e0e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005e10:	f7fd f8ea 	bl	8002fe8 <HAL_GetTick>
 8005e14:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005e16:	e008      	b.n	8005e2a <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e18:	f7fd f8e6 	bl	8002fe8 <HAL_GetTick>
 8005e1c:	4602      	mov	r2, r0
 8005e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e20:	1ad3      	subs	r3, r2, r3
 8005e22:	2b02      	cmp	r3, #2
 8005e24:	d901      	bls.n	8005e2a <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8005e26:	2303      	movs	r3, #3
 8005e28:	e059      	b.n	8005ede <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005e2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d0ef      	beq.n	8005e18 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005e38:	e050      	b.n	8005edc <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	e04f      	b.n	8005ede <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005e3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d147      	bne.n	8005edc <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005e4c:	f7ff fc1c 	bl	8005688 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005e50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e54:	68db      	ldr	r3, [r3, #12]
 8005e56:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005e5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e5e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005e60:	f7fd f8c2 	bl	8002fe8 <HAL_GetTick>
 8005e64:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005e66:	e008      	b.n	8005e7a <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e68:	f7fd f8be 	bl	8002fe8 <HAL_GetTick>
 8005e6c:	4602      	mov	r2, r0
 8005e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e70:	1ad3      	subs	r3, r2, r3
 8005e72:	2b02      	cmp	r3, #2
 8005e74:	d901      	bls.n	8005e7a <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8005e76:	2303      	movs	r3, #3
 8005e78:	e031      	b.n	8005ede <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005e7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d0ef      	beq.n	8005e68 <HAL_RCC_OscConfig+0x664>
 8005e88:	e028      	b.n	8005edc <HAL_RCC_OscConfig+0x6d8>
 8005e8a:	bf00      	nop
 8005e8c:	58000400 	.word	0x58000400
 8005e90:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005e94:	693b      	ldr	r3, [r7, #16]
 8005e96:	2b0c      	cmp	r3, #12
 8005e98:	d01e      	beq.n	8005ed8 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e9a:	f7ff fc04 	bl	80056a6 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e9e:	f7fd f8a3 	bl	8002fe8 <HAL_GetTick>
 8005ea2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005ea4:	e008      	b.n	8005eb8 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ea6:	f7fd f89f 	bl	8002fe8 <HAL_GetTick>
 8005eaa:	4602      	mov	r2, r0
 8005eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eae:	1ad3      	subs	r3, r2, r3
 8005eb0:	2b02      	cmp	r3, #2
 8005eb2:	d901      	bls.n	8005eb8 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8005eb4:	2303      	movs	r3, #3
 8005eb6:	e012      	b.n	8005ede <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005eb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d1ef      	bne.n	8005ea6 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8005ec6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005eca:	68da      	ldr	r2, [r3, #12]
 8005ecc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005ed0:	4b05      	ldr	r3, [pc, #20]	; (8005ee8 <HAL_RCC_OscConfig+0x6e4>)
 8005ed2:	4013      	ands	r3, r2
 8005ed4:	60cb      	str	r3, [r1, #12]
 8005ed6:	e001      	b.n	8005edc <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005ed8:	2301      	movs	r3, #1
 8005eda:	e000      	b.n	8005ede <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8005edc:	2300      	movs	r3, #0
}
 8005ede:	4618      	mov	r0, r3
 8005ee0:	3734      	adds	r7, #52	; 0x34
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	bd90      	pop	{r4, r7, pc}
 8005ee6:	bf00      	nop
 8005ee8:	eefefffc 	.word	0xeefefffc

08005eec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b084      	sub	sp, #16
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
 8005ef4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d101      	bne.n	8005f00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005efc:	2301      	movs	r3, #1
 8005efe:	e12d      	b.n	800615c <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005f00:	4b98      	ldr	r3, [pc, #608]	; (8006164 <HAL_RCC_ClockConfig+0x278>)
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f003 0307 	and.w	r3, r3, #7
 8005f08:	683a      	ldr	r2, [r7, #0]
 8005f0a:	429a      	cmp	r2, r3
 8005f0c:	d91b      	bls.n	8005f46 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f0e:	4b95      	ldr	r3, [pc, #596]	; (8006164 <HAL_RCC_ClockConfig+0x278>)
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f023 0207 	bic.w	r2, r3, #7
 8005f16:	4993      	ldr	r1, [pc, #588]	; (8006164 <HAL_RCC_ClockConfig+0x278>)
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	4313      	orrs	r3, r2
 8005f1c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f1e:	f7fd f863 	bl	8002fe8 <HAL_GetTick>
 8005f22:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f24:	e008      	b.n	8005f38 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005f26:	f7fd f85f 	bl	8002fe8 <HAL_GetTick>
 8005f2a:	4602      	mov	r2, r0
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	1ad3      	subs	r3, r2, r3
 8005f30:	2b02      	cmp	r3, #2
 8005f32:	d901      	bls.n	8005f38 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8005f34:	2303      	movs	r3, #3
 8005f36:	e111      	b.n	800615c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f38:	4b8a      	ldr	r3, [pc, #552]	; (8006164 <HAL_RCC_ClockConfig+0x278>)
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f003 0307 	and.w	r3, r3, #7
 8005f40:	683a      	ldr	r2, [r7, #0]
 8005f42:	429a      	cmp	r2, r3
 8005f44:	d1ef      	bne.n	8005f26 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f003 0302 	and.w	r3, r3, #2
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d016      	beq.n	8005f80 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	689b      	ldr	r3, [r3, #8]
 8005f56:	4618      	mov	r0, r3
 8005f58:	f7ff fafb 	bl	8005552 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005f5c:	f7fd f844 	bl	8002fe8 <HAL_GetTick>
 8005f60:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8005f62:	e008      	b.n	8005f76 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005f64:	f7fd f840 	bl	8002fe8 <HAL_GetTick>
 8005f68:	4602      	mov	r2, r0
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	1ad3      	subs	r3, r2, r3
 8005f6e:	2b02      	cmp	r3, #2
 8005f70:	d901      	bls.n	8005f76 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8005f72:	2303      	movs	r3, #3
 8005f74:	e0f2      	b.n	800615c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8005f76:	f7ff fbe8 	bl	800574a <LL_RCC_IsActiveFlag_HPRE>
 8005f7a:	4603      	mov	r3, r0
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d0f1      	beq.n	8005f64 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f003 0320 	and.w	r3, r3, #32
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d016      	beq.n	8005fba <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	695b      	ldr	r3, [r3, #20]
 8005f90:	4618      	mov	r0, r3
 8005f92:	f7ff faf2 	bl	800557a <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005f96:	f7fd f827 	bl	8002fe8 <HAL_GetTick>
 8005f9a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8005f9c:	e008      	b.n	8005fb0 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005f9e:	f7fd f823 	bl	8002fe8 <HAL_GetTick>
 8005fa2:	4602      	mov	r2, r0
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	1ad3      	subs	r3, r2, r3
 8005fa8:	2b02      	cmp	r3, #2
 8005faa:	d901      	bls.n	8005fb0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8005fac:	2303      	movs	r3, #3
 8005fae:	e0d5      	b.n	800615c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8005fb0:	f7ff fbdd 	bl	800576e <LL_RCC_IsActiveFlag_C2HPRE>
 8005fb4:	4603      	mov	r3, r0
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d0f1      	beq.n	8005f9e <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d016      	beq.n	8005ff4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	699b      	ldr	r3, [r3, #24]
 8005fca:	4618      	mov	r0, r3
 8005fcc:	f7ff faeb 	bl	80055a6 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005fd0:	f7fd f80a 	bl	8002fe8 <HAL_GetTick>
 8005fd4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8005fd6:	e008      	b.n	8005fea <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005fd8:	f7fd f806 	bl	8002fe8 <HAL_GetTick>
 8005fdc:	4602      	mov	r2, r0
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	1ad3      	subs	r3, r2, r3
 8005fe2:	2b02      	cmp	r3, #2
 8005fe4:	d901      	bls.n	8005fea <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8005fe6:	2303      	movs	r3, #3
 8005fe8:	e0b8      	b.n	800615c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8005fea:	f7ff fbd3 	bl	8005794 <LL_RCC_IsActiveFlag_SHDHPRE>
 8005fee:	4603      	mov	r3, r0
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d0f1      	beq.n	8005fd8 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f003 0304 	and.w	r3, r3, #4
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d016      	beq.n	800602e <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	68db      	ldr	r3, [r3, #12]
 8006004:	4618      	mov	r0, r3
 8006006:	f7ff fae5 	bl	80055d4 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800600a:	f7fc ffed 	bl	8002fe8 <HAL_GetTick>
 800600e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8006010:	e008      	b.n	8006024 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006012:	f7fc ffe9 	bl	8002fe8 <HAL_GetTick>
 8006016:	4602      	mov	r2, r0
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	1ad3      	subs	r3, r2, r3
 800601c:	2b02      	cmp	r3, #2
 800601e:	d901      	bls.n	8006024 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8006020:	2303      	movs	r3, #3
 8006022:	e09b      	b.n	800615c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8006024:	f7ff fbc9 	bl	80057ba <LL_RCC_IsActiveFlag_PPRE1>
 8006028:	4603      	mov	r3, r0
 800602a:	2b00      	cmp	r3, #0
 800602c:	d0f1      	beq.n	8006012 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f003 0308 	and.w	r3, r3, #8
 8006036:	2b00      	cmp	r3, #0
 8006038:	d017      	beq.n	800606a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	691b      	ldr	r3, [r3, #16]
 800603e:	00db      	lsls	r3, r3, #3
 8006040:	4618      	mov	r0, r3
 8006042:	f7ff fadb 	bl	80055fc <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006046:	f7fc ffcf 	bl	8002fe8 <HAL_GetTick>
 800604a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800604c:	e008      	b.n	8006060 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800604e:	f7fc ffcb 	bl	8002fe8 <HAL_GetTick>
 8006052:	4602      	mov	r2, r0
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	1ad3      	subs	r3, r2, r3
 8006058:	2b02      	cmp	r3, #2
 800605a:	d901      	bls.n	8006060 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 800605c:	2303      	movs	r3, #3
 800605e:	e07d      	b.n	800615c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8006060:	f7ff fbbd 	bl	80057de <LL_RCC_IsActiveFlag_PPRE2>
 8006064:	4603      	mov	r3, r0
 8006066:	2b00      	cmp	r3, #0
 8006068:	d0f1      	beq.n	800604e <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f003 0301 	and.w	r3, r3, #1
 8006072:	2b00      	cmp	r3, #0
 8006074:	d043      	beq.n	80060fe <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	685b      	ldr	r3, [r3, #4]
 800607a:	2b02      	cmp	r3, #2
 800607c:	d106      	bne.n	800608c <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800607e:	f7ff f87b 	bl	8005178 <LL_RCC_HSE_IsReady>
 8006082:	4603      	mov	r3, r0
 8006084:	2b00      	cmp	r3, #0
 8006086:	d11e      	bne.n	80060c6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006088:	2301      	movs	r3, #1
 800608a:	e067      	b.n	800615c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	685b      	ldr	r3, [r3, #4]
 8006090:	2b03      	cmp	r3, #3
 8006092:	d106      	bne.n	80060a2 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8006094:	f7ff fb16 	bl	80056c4 <LL_RCC_PLL_IsReady>
 8006098:	4603      	mov	r3, r0
 800609a:	2b00      	cmp	r3, #0
 800609c:	d113      	bne.n	80060c6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800609e:	2301      	movs	r3, #1
 80060a0:	e05c      	b.n	800615c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	685b      	ldr	r3, [r3, #4]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d106      	bne.n	80060b8 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80060aa:	f7ff f9e3 	bl	8005474 <LL_RCC_MSI_IsReady>
 80060ae:	4603      	mov	r3, r0
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d108      	bne.n	80060c6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80060b4:	2301      	movs	r3, #1
 80060b6:	e051      	b.n	800615c <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80060b8:	f7ff f88e 	bl	80051d8 <LL_RCC_HSI_IsReady>
 80060bc:	4603      	mov	r3, r0
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d101      	bne.n	80060c6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80060c2:	2301      	movs	r3, #1
 80060c4:	e04a      	b.n	800615c <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	685b      	ldr	r3, [r3, #4]
 80060ca:	4618      	mov	r0, r3
 80060cc:	f7ff fa21 	bl	8005512 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80060d0:	f7fc ff8a 	bl	8002fe8 <HAL_GetTick>
 80060d4:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80060d6:	e00a      	b.n	80060ee <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80060d8:	f7fc ff86 	bl	8002fe8 <HAL_GetTick>
 80060dc:	4602      	mov	r2, r0
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	1ad3      	subs	r3, r2, r3
 80060e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d901      	bls.n	80060ee <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80060ea:	2303      	movs	r3, #3
 80060ec:	e036      	b.n	800615c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80060ee:	f7ff fa24 	bl	800553a <LL_RCC_GetSysClkSource>
 80060f2:	4602      	mov	r2, r0
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	685b      	ldr	r3, [r3, #4]
 80060f8:	009b      	lsls	r3, r3, #2
 80060fa:	429a      	cmp	r2, r3
 80060fc:	d1ec      	bne.n	80060d8 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80060fe:	4b19      	ldr	r3, [pc, #100]	; (8006164 <HAL_RCC_ClockConfig+0x278>)
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f003 0307 	and.w	r3, r3, #7
 8006106:	683a      	ldr	r2, [r7, #0]
 8006108:	429a      	cmp	r2, r3
 800610a:	d21b      	bcs.n	8006144 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800610c:	4b15      	ldr	r3, [pc, #84]	; (8006164 <HAL_RCC_ClockConfig+0x278>)
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f023 0207 	bic.w	r2, r3, #7
 8006114:	4913      	ldr	r1, [pc, #76]	; (8006164 <HAL_RCC_ClockConfig+0x278>)
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	4313      	orrs	r3, r2
 800611a:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800611c:	f7fc ff64 	bl	8002fe8 <HAL_GetTick>
 8006120:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006122:	e008      	b.n	8006136 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006124:	f7fc ff60 	bl	8002fe8 <HAL_GetTick>
 8006128:	4602      	mov	r2, r0
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	1ad3      	subs	r3, r2, r3
 800612e:	2b02      	cmp	r3, #2
 8006130:	d901      	bls.n	8006136 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8006132:	2303      	movs	r3, #3
 8006134:	e012      	b.n	800615c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006136:	4b0b      	ldr	r3, [pc, #44]	; (8006164 <HAL_RCC_ClockConfig+0x278>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f003 0307 	and.w	r3, r3, #7
 800613e:	683a      	ldr	r2, [r7, #0]
 8006140:	429a      	cmp	r2, r3
 8006142:	d1ef      	bne.n	8006124 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8006144:	f000 f87e 	bl	8006244 <HAL_RCC_GetHCLKFreq>
 8006148:	4603      	mov	r3, r0
 800614a:	4a07      	ldr	r2, [pc, #28]	; (8006168 <HAL_RCC_ClockConfig+0x27c>)
 800614c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800614e:	f7fc ff57 	bl	8003000 <HAL_GetTickPrio>
 8006152:	4603      	mov	r3, r0
 8006154:	4618      	mov	r0, r3
 8006156:	f7fc fef9 	bl	8002f4c <HAL_InitTick>
 800615a:	4603      	mov	r3, r0
}
 800615c:	4618      	mov	r0, r3
 800615e:	3710      	adds	r7, #16
 8006160:	46bd      	mov	sp, r7
 8006162:	bd80      	pop	{r7, pc}
 8006164:	58004000 	.word	0x58004000
 8006168:	20000008 	.word	0x20000008

0800616c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800616c:	b590      	push	{r4, r7, lr}
 800616e:	b085      	sub	sp, #20
 8006170:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006172:	f7ff f9e2 	bl	800553a <LL_RCC_GetSysClkSource>
 8006176:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d10a      	bne.n	8006194 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800617e:	f7ff f99e 	bl	80054be <LL_RCC_MSI_GetRange>
 8006182:	4603      	mov	r3, r0
 8006184:	091b      	lsrs	r3, r3, #4
 8006186:	f003 030f 	and.w	r3, r3, #15
 800618a:	4a2b      	ldr	r2, [pc, #172]	; (8006238 <HAL_RCC_GetSysClockFreq+0xcc>)
 800618c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006190:	60fb      	str	r3, [r7, #12]
 8006192:	e04b      	b.n	800622c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2b04      	cmp	r3, #4
 8006198:	d102      	bne.n	80061a0 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800619a:	4b28      	ldr	r3, [pc, #160]	; (800623c <HAL_RCC_GetSysClockFreq+0xd0>)
 800619c:	60fb      	str	r3, [r7, #12]
 800619e:	e045      	b.n	800622c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2b08      	cmp	r3, #8
 80061a4:	d10a      	bne.n	80061bc <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80061a6:	f7fe ffb7 	bl	8005118 <LL_RCC_HSE_IsEnabledDiv2>
 80061aa:	4603      	mov	r3, r0
 80061ac:	2b01      	cmp	r3, #1
 80061ae:	d102      	bne.n	80061b6 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80061b0:	4b22      	ldr	r3, [pc, #136]	; (800623c <HAL_RCC_GetSysClockFreq+0xd0>)
 80061b2:	60fb      	str	r3, [r7, #12]
 80061b4:	e03a      	b.n	800622c <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80061b6:	4b22      	ldr	r3, [pc, #136]	; (8006240 <HAL_RCC_GetSysClockFreq+0xd4>)
 80061b8:	60fb      	str	r3, [r7, #12]
 80061ba:	e037      	b.n	800622c <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80061bc:	f7ff fab9 	bl	8005732 <LL_RCC_PLL_GetMainSource>
 80061c0:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	2b02      	cmp	r3, #2
 80061c6:	d003      	beq.n	80061d0 <HAL_RCC_GetSysClockFreq+0x64>
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	2b03      	cmp	r3, #3
 80061cc:	d003      	beq.n	80061d6 <HAL_RCC_GetSysClockFreq+0x6a>
 80061ce:	e00d      	b.n	80061ec <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80061d0:	4b1a      	ldr	r3, [pc, #104]	; (800623c <HAL_RCC_GetSysClockFreq+0xd0>)
 80061d2:	60bb      	str	r3, [r7, #8]
        break;
 80061d4:	e015      	b.n	8006202 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80061d6:	f7fe ff9f 	bl	8005118 <LL_RCC_HSE_IsEnabledDiv2>
 80061da:	4603      	mov	r3, r0
 80061dc:	2b01      	cmp	r3, #1
 80061de:	d102      	bne.n	80061e6 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80061e0:	4b16      	ldr	r3, [pc, #88]	; (800623c <HAL_RCC_GetSysClockFreq+0xd0>)
 80061e2:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80061e4:	e00d      	b.n	8006202 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 80061e6:	4b16      	ldr	r3, [pc, #88]	; (8006240 <HAL_RCC_GetSysClockFreq+0xd4>)
 80061e8:	60bb      	str	r3, [r7, #8]
        break;
 80061ea:	e00a      	b.n	8006202 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80061ec:	f7ff f967 	bl	80054be <LL_RCC_MSI_GetRange>
 80061f0:	4603      	mov	r3, r0
 80061f2:	091b      	lsrs	r3, r3, #4
 80061f4:	f003 030f 	and.w	r3, r3, #15
 80061f8:	4a0f      	ldr	r2, [pc, #60]	; (8006238 <HAL_RCC_GetSysClockFreq+0xcc>)
 80061fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061fe:	60bb      	str	r3, [r7, #8]
        break;
 8006200:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8006202:	f7ff fa71 	bl	80056e8 <LL_RCC_PLL_GetN>
 8006206:	4602      	mov	r2, r0
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	fb03 f402 	mul.w	r4, r3, r2
 800620e:	f7ff fa84 	bl	800571a <LL_RCC_PLL_GetDivider>
 8006212:	4603      	mov	r3, r0
 8006214:	091b      	lsrs	r3, r3, #4
 8006216:	3301      	adds	r3, #1
 8006218:	fbb4 f4f3 	udiv	r4, r4, r3
 800621c:	f7ff fa71 	bl	8005702 <LL_RCC_PLL_GetR>
 8006220:	4603      	mov	r3, r0
 8006222:	0f5b      	lsrs	r3, r3, #29
 8006224:	3301      	adds	r3, #1
 8006226:	fbb4 f3f3 	udiv	r3, r4, r3
 800622a:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 800622c:	68fb      	ldr	r3, [r7, #12]
}
 800622e:	4618      	mov	r0, r3
 8006230:	3714      	adds	r7, #20
 8006232:	46bd      	mov	sp, r7
 8006234:	bd90      	pop	{r4, r7, pc}
 8006236:	bf00      	nop
 8006238:	0800d770 	.word	0x0800d770
 800623c:	00f42400 	.word	0x00f42400
 8006240:	01e84800 	.word	0x01e84800

08006244 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006244:	b598      	push	{r3, r4, r7, lr}
 8006246:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8006248:	f7ff ff90 	bl	800616c <HAL_RCC_GetSysClockFreq>
 800624c:	4604      	mov	r4, r0
 800624e:	f7ff f9e9 	bl	8005624 <LL_RCC_GetAHBPrescaler>
 8006252:	4603      	mov	r3, r0
 8006254:	091b      	lsrs	r3, r3, #4
 8006256:	f003 030f 	and.w	r3, r3, #15
 800625a:	4a03      	ldr	r2, [pc, #12]	; (8006268 <HAL_RCC_GetHCLKFreq+0x24>)
 800625c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006260:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8006264:	4618      	mov	r0, r3
 8006266:	bd98      	pop	{r3, r4, r7, pc}
 8006268:	0800d710 	.word	0x0800d710

0800626c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800626c:	b598      	push	{r3, r4, r7, lr}
 800626e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8006270:	f7ff ffe8 	bl	8006244 <HAL_RCC_GetHCLKFreq>
 8006274:	4604      	mov	r4, r0
 8006276:	f7ff f9ef 	bl	8005658 <LL_RCC_GetAPB1Prescaler>
 800627a:	4603      	mov	r3, r0
 800627c:	0a1b      	lsrs	r3, r3, #8
 800627e:	f003 0307 	and.w	r3, r3, #7
 8006282:	4a04      	ldr	r2, [pc, #16]	; (8006294 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006284:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006288:	f003 031f 	and.w	r3, r3, #31
 800628c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8006290:	4618      	mov	r0, r3
 8006292:	bd98      	pop	{r3, r4, r7, pc}
 8006294:	0800d750 	.word	0x0800d750

08006298 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006298:	b598      	push	{r3, r4, r7, lr}
 800629a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 800629c:	f7ff ffd2 	bl	8006244 <HAL_RCC_GetHCLKFreq>
 80062a0:	4604      	mov	r4, r0
 80062a2:	f7ff f9e5 	bl	8005670 <LL_RCC_GetAPB2Prescaler>
 80062a6:	4603      	mov	r3, r0
 80062a8:	0adb      	lsrs	r3, r3, #11
 80062aa:	f003 0307 	and.w	r3, r3, #7
 80062ae:	4a04      	ldr	r2, [pc, #16]	; (80062c0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80062b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80062b4:	f003 031f 	and.w	r3, r3, #31
 80062b8:	fa24 f303 	lsr.w	r3, r4, r3
}
 80062bc:	4618      	mov	r0, r3
 80062be:	bd98      	pop	{r3, r4, r7, pc}
 80062c0:	0800d750 	.word	0x0800d750

080062c4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80062c4:	b590      	push	{r4, r7, lr}
 80062c6:	b085      	sub	sp, #20
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2bb0      	cmp	r3, #176	; 0xb0
 80062d0:	d903      	bls.n	80062da <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 80062d2:	4b15      	ldr	r3, [pc, #84]	; (8006328 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80062d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062d6:	60fb      	str	r3, [r7, #12]
 80062d8:	e007      	b.n	80062ea <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	091b      	lsrs	r3, r3, #4
 80062de:	f003 030f 	and.w	r3, r3, #15
 80062e2:	4a11      	ldr	r2, [pc, #68]	; (8006328 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80062e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80062e8:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 80062ea:	f7ff f9a7 	bl	800563c <LL_RCC_GetAHB4Prescaler>
 80062ee:	4603      	mov	r3, r0
 80062f0:	091b      	lsrs	r3, r3, #4
 80062f2:	f003 030f 	and.w	r3, r3, #15
 80062f6:	4a0d      	ldr	r2, [pc, #52]	; (800632c <RCC_SetFlashLatencyFromMSIRange+0x68>)
 80062f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80062fc:	68fa      	ldr	r2, [r7, #12]
 80062fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8006302:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8006304:	68bb      	ldr	r3, [r7, #8]
 8006306:	4a0a      	ldr	r2, [pc, #40]	; (8006330 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8006308:	fba2 2303 	umull	r2, r3, r2, r3
 800630c:	0c9c      	lsrs	r4, r3, #18
 800630e:	f7fe fef5 	bl	80050fc <HAL_PWREx_GetVoltageRange>
 8006312:	4603      	mov	r3, r0
 8006314:	4619      	mov	r1, r3
 8006316:	4620      	mov	r0, r4
 8006318:	f000 f80c 	bl	8006334 <RCC_SetFlashLatency>
 800631c:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 800631e:	4618      	mov	r0, r3
 8006320:	3714      	adds	r7, #20
 8006322:	46bd      	mov	sp, r7
 8006324:	bd90      	pop	{r4, r7, pc}
 8006326:	bf00      	nop
 8006328:	0800d770 	.word	0x0800d770
 800632c:	0800d710 	.word	0x0800d710
 8006330:	431bde83 	.word	0x431bde83

08006334 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8006334:	b590      	push	{r4, r7, lr}
 8006336:	b093      	sub	sp, #76	; 0x4c
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
 800633c:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800633e:	4b37      	ldr	r3, [pc, #220]	; (800641c <RCC_SetFlashLatency+0xe8>)
 8006340:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8006344:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006346:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800634a:	4a35      	ldr	r2, [pc, #212]	; (8006420 <RCC_SetFlashLatency+0xec>)
 800634c:	f107 031c 	add.w	r3, r7, #28
 8006350:	ca07      	ldmia	r2, {r0, r1, r2}
 8006352:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8006356:	4b33      	ldr	r3, [pc, #204]	; (8006424 <RCC_SetFlashLatency+0xf0>)
 8006358:	f107 040c 	add.w	r4, r7, #12
 800635c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800635e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8006362:	2300      	movs	r3, #0
 8006364:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800636c:	d11a      	bne.n	80063a4 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800636e:	2300      	movs	r3, #0
 8006370:	643b      	str	r3, [r7, #64]	; 0x40
 8006372:	e013      	b.n	800639c <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8006374:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006376:	009b      	lsls	r3, r3, #2
 8006378:	3348      	adds	r3, #72	; 0x48
 800637a:	443b      	add	r3, r7
 800637c:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8006380:	687a      	ldr	r2, [r7, #4]
 8006382:	429a      	cmp	r2, r3
 8006384:	d807      	bhi.n	8006396 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8006386:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006388:	009b      	lsls	r3, r3, #2
 800638a:	3348      	adds	r3, #72	; 0x48
 800638c:	443b      	add	r3, r7
 800638e:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8006392:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8006394:	e020      	b.n	80063d8 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8006396:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006398:	3301      	adds	r3, #1
 800639a:	643b      	str	r3, [r7, #64]	; 0x40
 800639c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800639e:	2b03      	cmp	r3, #3
 80063a0:	d9e8      	bls.n	8006374 <RCC_SetFlashLatency+0x40>
 80063a2:	e019      	b.n	80063d8 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80063a4:	2300      	movs	r3, #0
 80063a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80063a8:	e013      	b.n	80063d2 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80063aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063ac:	009b      	lsls	r3, r3, #2
 80063ae:	3348      	adds	r3, #72	; 0x48
 80063b0:	443b      	add	r3, r7
 80063b2:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80063b6:	687a      	ldr	r2, [r7, #4]
 80063b8:	429a      	cmp	r2, r3
 80063ba:	d807      	bhi.n	80063cc <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80063bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063be:	009b      	lsls	r3, r3, #2
 80063c0:	3348      	adds	r3, #72	; 0x48
 80063c2:	443b      	add	r3, r7
 80063c4:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80063c8:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80063ca:	e005      	b.n	80063d8 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80063cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063ce:	3301      	adds	r3, #1
 80063d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80063d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063d4:	2b02      	cmp	r3, #2
 80063d6:	d9e8      	bls.n	80063aa <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 80063d8:	4b13      	ldr	r3, [pc, #76]	; (8006428 <RCC_SetFlashLatency+0xf4>)
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f023 0207 	bic.w	r2, r3, #7
 80063e0:	4911      	ldr	r1, [pc, #68]	; (8006428 <RCC_SetFlashLatency+0xf4>)
 80063e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80063e4:	4313      	orrs	r3, r2
 80063e6:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80063e8:	f7fc fdfe 	bl	8002fe8 <HAL_GetTick>
 80063ec:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80063ee:	e008      	b.n	8006402 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80063f0:	f7fc fdfa 	bl	8002fe8 <HAL_GetTick>
 80063f4:	4602      	mov	r2, r0
 80063f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063f8:	1ad3      	subs	r3, r2, r3
 80063fa:	2b02      	cmp	r3, #2
 80063fc:	d901      	bls.n	8006402 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 80063fe:	2303      	movs	r3, #3
 8006400:	e007      	b.n	8006412 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8006402:	4b09      	ldr	r3, [pc, #36]	; (8006428 <RCC_SetFlashLatency+0xf4>)
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f003 0307 	and.w	r3, r3, #7
 800640a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800640c:	429a      	cmp	r2, r3
 800640e:	d1ef      	bne.n	80063f0 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8006410:	2300      	movs	r3, #0
}
 8006412:	4618      	mov	r0, r3
 8006414:	374c      	adds	r7, #76	; 0x4c
 8006416:	46bd      	mov	sp, r7
 8006418:	bd90      	pop	{r4, r7, pc}
 800641a:	bf00      	nop
 800641c:	0800d56c 	.word	0x0800d56c
 8006420:	0800d57c 	.word	0x0800d57c
 8006424:	0800d588 	.word	0x0800d588
 8006428:	58004000 	.word	0x58004000

0800642c <LL_RCC_LSE_IsEnabled>:
{
 800642c:	b480      	push	{r7}
 800642e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8006430:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006434:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006438:	f003 0301 	and.w	r3, r3, #1
 800643c:	2b01      	cmp	r3, #1
 800643e:	d101      	bne.n	8006444 <LL_RCC_LSE_IsEnabled+0x18>
 8006440:	2301      	movs	r3, #1
 8006442:	e000      	b.n	8006446 <LL_RCC_LSE_IsEnabled+0x1a>
 8006444:	2300      	movs	r3, #0
}
 8006446:	4618      	mov	r0, r3
 8006448:	46bd      	mov	sp, r7
 800644a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644e:	4770      	bx	lr

08006450 <LL_RCC_LSE_IsReady>:
{
 8006450:	b480      	push	{r7}
 8006452:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8006454:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006458:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800645c:	f003 0302 	and.w	r3, r3, #2
 8006460:	2b02      	cmp	r3, #2
 8006462:	d101      	bne.n	8006468 <LL_RCC_LSE_IsReady+0x18>
 8006464:	2301      	movs	r3, #1
 8006466:	e000      	b.n	800646a <LL_RCC_LSE_IsReady+0x1a>
 8006468:	2300      	movs	r3, #0
}
 800646a:	4618      	mov	r0, r3
 800646c:	46bd      	mov	sp, r7
 800646e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006472:	4770      	bx	lr

08006474 <LL_RCC_SetRFWKPClockSource>:
{
 8006474:	b480      	push	{r7}
 8006476:	b083      	sub	sp, #12
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 800647c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006480:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006484:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006488:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	4313      	orrs	r3, r2
 8006490:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8006494:	bf00      	nop
 8006496:	370c      	adds	r7, #12
 8006498:	46bd      	mov	sp, r7
 800649a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649e:	4770      	bx	lr

080064a0 <LL_RCC_SetSMPSClockSource>:
{
 80064a0:	b480      	push	{r7}
 80064a2:	b083      	sub	sp, #12
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 80064a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80064ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ae:	f023 0203 	bic.w	r2, r3, #3
 80064b2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	4313      	orrs	r3, r2
 80064ba:	624b      	str	r3, [r1, #36]	; 0x24
}
 80064bc:	bf00      	nop
 80064be:	370c      	adds	r7, #12
 80064c0:	46bd      	mov	sp, r7
 80064c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c6:	4770      	bx	lr

080064c8 <LL_RCC_SetSMPSPrescaler>:
{
 80064c8:	b480      	push	{r7}
 80064ca:	b083      	sub	sp, #12
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 80064d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80064d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064d6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80064da:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	4313      	orrs	r3, r2
 80064e2:	624b      	str	r3, [r1, #36]	; 0x24
}
 80064e4:	bf00      	nop
 80064e6:	370c      	adds	r7, #12
 80064e8:	46bd      	mov	sp, r7
 80064ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ee:	4770      	bx	lr

080064f0 <LL_RCC_SetUSARTClockSource>:
{
 80064f0:	b480      	push	{r7}
 80064f2:	b083      	sub	sp, #12
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 80064f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80064fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006500:	f023 0203 	bic.w	r2, r3, #3
 8006504:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	4313      	orrs	r3, r2
 800650c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006510:	bf00      	nop
 8006512:	370c      	adds	r7, #12
 8006514:	46bd      	mov	sp, r7
 8006516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651a:	4770      	bx	lr

0800651c <LL_RCC_SetLPUARTClockSource>:
{
 800651c:	b480      	push	{r7}
 800651e:	b083      	sub	sp, #12
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8006524:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006528:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800652c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006530:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	4313      	orrs	r3, r2
 8006538:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800653c:	bf00      	nop
 800653e:	370c      	adds	r7, #12
 8006540:	46bd      	mov	sp, r7
 8006542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006546:	4770      	bx	lr

08006548 <LL_RCC_SetI2CClockSource>:
{
 8006548:	b480      	push	{r7}
 800654a:	b083      	sub	sp, #12
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8006550:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006554:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	091b      	lsrs	r3, r3, #4
 800655c:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8006560:	43db      	mvns	r3, r3
 8006562:	401a      	ands	r2, r3
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	011b      	lsls	r3, r3, #4
 8006568:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800656c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006570:	4313      	orrs	r3, r2
 8006572:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006576:	bf00      	nop
 8006578:	370c      	adds	r7, #12
 800657a:	46bd      	mov	sp, r7
 800657c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006580:	4770      	bx	lr

08006582 <LL_RCC_SetLPTIMClockSource>:
{
 8006582:	b480      	push	{r7}
 8006584:	b083      	sub	sp, #12
 8006586:	af00      	add	r7, sp, #0
 8006588:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800658a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800658e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	0c1b      	lsrs	r3, r3, #16
 8006596:	041b      	lsls	r3, r3, #16
 8006598:	43db      	mvns	r3, r3
 800659a:	401a      	ands	r2, r3
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	041b      	lsls	r3, r3, #16
 80065a0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80065a4:	4313      	orrs	r3, r2
 80065a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80065aa:	bf00      	nop
 80065ac:	370c      	adds	r7, #12
 80065ae:	46bd      	mov	sp, r7
 80065b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b4:	4770      	bx	lr

080065b6 <LL_RCC_SetSAIClockSource>:
{
 80065b6:	b480      	push	{r7}
 80065b8:	b083      	sub	sp, #12
 80065ba:	af00      	add	r7, sp, #0
 80065bc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 80065be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80065c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065c6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80065ca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	4313      	orrs	r3, r2
 80065d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80065d6:	bf00      	nop
 80065d8:	370c      	adds	r7, #12
 80065da:	46bd      	mov	sp, r7
 80065dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e0:	4770      	bx	lr

080065e2 <LL_RCC_SetRNGClockSource>:
{
 80065e2:	b480      	push	{r7}
 80065e4:	b083      	sub	sp, #12
 80065e6:	af00      	add	r7, sp, #0
 80065e8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80065ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80065ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065f2:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80065f6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	4313      	orrs	r3, r2
 80065fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006602:	bf00      	nop
 8006604:	370c      	adds	r7, #12
 8006606:	46bd      	mov	sp, r7
 8006608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660c:	4770      	bx	lr

0800660e <LL_RCC_SetCLK48ClockSource>:
{
 800660e:	b480      	push	{r7}
 8006610:	b083      	sub	sp, #12
 8006612:	af00      	add	r7, sp, #0
 8006614:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8006616:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800661a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800661e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006622:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	4313      	orrs	r3, r2
 800662a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800662e:	bf00      	nop
 8006630:	370c      	adds	r7, #12
 8006632:	46bd      	mov	sp, r7
 8006634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006638:	4770      	bx	lr

0800663a <LL_RCC_SetUSBClockSource>:
{
 800663a:	b580      	push	{r7, lr}
 800663c:	b082      	sub	sp, #8
 800663e:	af00      	add	r7, sp, #0
 8006640:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8006642:	6878      	ldr	r0, [r7, #4]
 8006644:	f7ff ffe3 	bl	800660e <LL_RCC_SetCLK48ClockSource>
}
 8006648:	bf00      	nop
 800664a:	3708      	adds	r7, #8
 800664c:	46bd      	mov	sp, r7
 800664e:	bd80      	pop	{r7, pc}

08006650 <LL_RCC_SetADCClockSource>:
{
 8006650:	b480      	push	{r7}
 8006652:	b083      	sub	sp, #12
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8006658:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800665c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006660:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006664:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	4313      	orrs	r3, r2
 800666c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006670:	bf00      	nop
 8006672:	370c      	adds	r7, #12
 8006674:	46bd      	mov	sp, r7
 8006676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667a:	4770      	bx	lr

0800667c <LL_RCC_SetRTCClockSource>:
{
 800667c:	b480      	push	{r7}
 800667e:	b083      	sub	sp, #12
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8006684:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006688:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800668c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006690:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	4313      	orrs	r3, r2
 8006698:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800669c:	bf00      	nop
 800669e:	370c      	adds	r7, #12
 80066a0:	46bd      	mov	sp, r7
 80066a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a6:	4770      	bx	lr

080066a8 <LL_RCC_GetRTCClockSource>:
{
 80066a8:	b480      	push	{r7}
 80066aa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80066ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80066b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 80066b8:	4618      	mov	r0, r3
 80066ba:	46bd      	mov	sp, r7
 80066bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c0:	4770      	bx	lr

080066c2 <LL_RCC_ForceBackupDomainReset>:
{
 80066c2:	b480      	push	{r7}
 80066c4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80066c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80066ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066ce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80066d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80066d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80066da:	bf00      	nop
 80066dc:	46bd      	mov	sp, r7
 80066de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e2:	4770      	bx	lr

080066e4 <LL_RCC_ReleaseBackupDomainReset>:
{
 80066e4:	b480      	push	{r7}
 80066e6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80066e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80066ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066f0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80066f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80066f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80066fc:	bf00      	nop
 80066fe:	46bd      	mov	sp, r7
 8006700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006704:	4770      	bx	lr

08006706 <LL_RCC_PLLSAI1_Enable>:
{
 8006706:	b480      	push	{r7}
 8006708:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800670a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006714:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006718:	6013      	str	r3, [r2, #0]
}
 800671a:	bf00      	nop
 800671c:	46bd      	mov	sp, r7
 800671e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006722:	4770      	bx	lr

08006724 <LL_RCC_PLLSAI1_Disable>:
{
 8006724:	b480      	push	{r7}
 8006726:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8006728:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006732:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006736:	6013      	str	r3, [r2, #0]
}
 8006738:	bf00      	nop
 800673a:	46bd      	mov	sp, r7
 800673c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006740:	4770      	bx	lr

08006742 <LL_RCC_PLLSAI1_IsReady>:
{
 8006742:	b480      	push	{r7}
 8006744:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8006746:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006750:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006754:	d101      	bne.n	800675a <LL_RCC_PLLSAI1_IsReady+0x18>
 8006756:	2301      	movs	r3, #1
 8006758:	e000      	b.n	800675c <LL_RCC_PLLSAI1_IsReady+0x1a>
 800675a:	2300      	movs	r3, #0
}
 800675c:	4618      	mov	r0, r3
 800675e:	46bd      	mov	sp, r7
 8006760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006764:	4770      	bx	lr

08006766 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006766:	b580      	push	{r7, lr}
 8006768:	b088      	sub	sp, #32
 800676a:	af00      	add	r7, sp, #0
 800676c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 800676e:	2300      	movs	r3, #0
 8006770:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8006772:	2300      	movs	r3, #0
 8006774:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800677e:	2b00      	cmp	r3, #0
 8006780:	d034      	beq.n	80067ec <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006786:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800678a:	d021      	beq.n	80067d0 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 800678c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006790:	d81b      	bhi.n	80067ca <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006792:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006796:	d01d      	beq.n	80067d4 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8006798:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800679c:	d815      	bhi.n	80067ca <HAL_RCCEx_PeriphCLKConfig+0x64>
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d00b      	beq.n	80067ba <HAL_RCCEx_PeriphCLKConfig+0x54>
 80067a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80067a6:	d110      	bne.n	80067ca <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 80067a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80067ac:	68db      	ldr	r3, [r3, #12]
 80067ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80067b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80067b6:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 80067b8:	e00d      	b.n	80067d6 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	3304      	adds	r3, #4
 80067be:	4618      	mov	r0, r3
 80067c0:	f000 f947 	bl	8006a52 <RCCEx_PLLSAI1_ConfigNP>
 80067c4:	4603      	mov	r3, r0
 80067c6:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80067c8:	e005      	b.n	80067d6 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 80067ca:	2301      	movs	r3, #1
 80067cc:	77fb      	strb	r3, [r7, #31]
        break;
 80067ce:	e002      	b.n	80067d6 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80067d0:	bf00      	nop
 80067d2:	e000      	b.n	80067d6 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80067d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80067d6:	7ffb      	ldrb	r3, [r7, #31]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d105      	bne.n	80067e8 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067e0:	4618      	mov	r0, r3
 80067e2:	f7ff fee8 	bl	80065b6 <LL_RCC_SetSAIClockSource>
 80067e6:	e001      	b.n	80067ec <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067e8:	7ffb      	ldrb	r3, [r7, #31]
 80067ea:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d046      	beq.n	8006886 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 80067f8:	f7ff ff56 	bl	80066a8 <LL_RCC_GetRTCClockSource>
 80067fc:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006802:	69ba      	ldr	r2, [r7, #24]
 8006804:	429a      	cmp	r2, r3
 8006806:	d03c      	beq.n	8006882 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8006808:	f7fe fc68 	bl	80050dc <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800680c:	69bb      	ldr	r3, [r7, #24]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d105      	bne.n	800681e <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006816:	4618      	mov	r0, r3
 8006818:	f7ff ff30 	bl	800667c <LL_RCC_SetRTCClockSource>
 800681c:	e02e      	b.n	800687c <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800681e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006822:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006826:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8006828:	f7ff ff4b 	bl	80066c2 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800682c:	f7ff ff5a 	bl	80066e4 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8006830:	697b      	ldr	r3, [r7, #20]
 8006832:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800683a:	4313      	orrs	r3, r2
 800683c:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800683e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006842:	697b      	ldr	r3, [r7, #20]
 8006844:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8006848:	f7ff fdf0 	bl	800642c <LL_RCC_LSE_IsEnabled>
 800684c:	4603      	mov	r3, r0
 800684e:	2b01      	cmp	r3, #1
 8006850:	d114      	bne.n	800687c <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006852:	f7fc fbc9 	bl	8002fe8 <HAL_GetTick>
 8006856:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8006858:	e00b      	b.n	8006872 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800685a:	f7fc fbc5 	bl	8002fe8 <HAL_GetTick>
 800685e:	4602      	mov	r2, r0
 8006860:	693b      	ldr	r3, [r7, #16]
 8006862:	1ad3      	subs	r3, r2, r3
 8006864:	f241 3288 	movw	r2, #5000	; 0x1388
 8006868:	4293      	cmp	r3, r2
 800686a:	d902      	bls.n	8006872 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 800686c:	2303      	movs	r3, #3
 800686e:	77fb      	strb	r3, [r7, #31]
              break;
 8006870:	e004      	b.n	800687c <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8006872:	f7ff fded 	bl	8006450 <LL_RCC_LSE_IsReady>
 8006876:	4603      	mov	r3, r0
 8006878:	2b01      	cmp	r3, #1
 800687a:	d1ee      	bne.n	800685a <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800687c:	7ffb      	ldrb	r3, [r7, #31]
 800687e:	77bb      	strb	r3, [r7, #30]
 8006880:	e001      	b.n	8006886 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006882:	7ffb      	ldrb	r3, [r7, #31]
 8006884:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f003 0301 	and.w	r3, r3, #1
 800688e:	2b00      	cmp	r3, #0
 8006890:	d004      	beq.n	800689c <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	699b      	ldr	r3, [r3, #24]
 8006896:	4618      	mov	r0, r3
 8006898:	f7ff fe2a 	bl	80064f0 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f003 0302 	and.w	r3, r3, #2
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d004      	beq.n	80068b2 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	69db      	ldr	r3, [r3, #28]
 80068ac:	4618      	mov	r0, r3
 80068ae:	f7ff fe35 	bl	800651c <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f003 0310 	and.w	r3, r3, #16
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d004      	beq.n	80068c8 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068c2:	4618      	mov	r0, r3
 80068c4:	f7ff fe5d 	bl	8006582 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f003 0320 	and.w	r3, r3, #32
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d004      	beq.n	80068de <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068d8:	4618      	mov	r0, r3
 80068da:	f7ff fe52 	bl	8006582 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f003 0304 	and.w	r3, r3, #4
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d004      	beq.n	80068f4 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6a1b      	ldr	r3, [r3, #32]
 80068ee:	4618      	mov	r0, r3
 80068f0:	f7ff fe2a 	bl	8006548 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f003 0308 	and.w	r3, r3, #8
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d004      	beq.n	800690a <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006904:	4618      	mov	r0, r3
 8006906:	f7ff fe1f 	bl	8006548 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006912:	2b00      	cmp	r3, #0
 8006914:	d022      	beq.n	800695c <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800691a:	4618      	mov	r0, r3
 800691c:	f7ff fe8d 	bl	800663a <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006924:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006928:	d107      	bne.n	800693a <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800692a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800692e:	68db      	ldr	r3, [r3, #12]
 8006930:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006934:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006938:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800693e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006942:	d10b      	bne.n	800695c <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	3304      	adds	r3, #4
 8006948:	4618      	mov	r0, r3
 800694a:	f000 f8dd 	bl	8006b08 <RCCEx_PLLSAI1_ConfigNQ>
 800694e:	4603      	mov	r3, r0
 8006950:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8006952:	7ffb      	ldrb	r3, [r7, #31]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d001      	beq.n	800695c <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8006958:	7ffb      	ldrb	r3, [r7, #31]
 800695a:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006964:	2b00      	cmp	r3, #0
 8006966:	d02b      	beq.n	80069c0 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800696c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006970:	d008      	beq.n	8006984 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006976:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800697a:	d003      	beq.n	8006984 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006980:	2b00      	cmp	r3, #0
 8006982:	d105      	bne.n	8006990 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006988:	4618      	mov	r0, r3
 800698a:	f7ff fe2a 	bl	80065e2 <LL_RCC_SetRNGClockSource>
 800698e:	e00a      	b.n	80069a6 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006994:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006998:	60fb      	str	r3, [r7, #12]
 800699a:	2000      	movs	r0, #0
 800699c:	f7ff fe21 	bl	80065e2 <LL_RCC_SetRNGClockSource>
 80069a0:	68f8      	ldr	r0, [r7, #12]
 80069a2:	f7ff fe34 	bl	800660e <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069aa:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80069ae:	d107      	bne.n	80069c0 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80069b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80069b4:	68db      	ldr	r3, [r3, #12]
 80069b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80069ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80069be:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d022      	beq.n	8006a12 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069d0:	4618      	mov	r0, r3
 80069d2:	f7ff fe3d 	bl	8006650 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80069de:	d107      	bne.n	80069f0 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80069e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80069e4:	68db      	ldr	r3, [r3, #12]
 80069e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80069ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80069ee:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069f4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80069f8:	d10b      	bne.n	8006a12 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	3304      	adds	r3, #4
 80069fe:	4618      	mov	r0, r3
 8006a00:	f000 f8dd 	bl	8006bbe <RCCEx_PLLSAI1_ConfigNR>
 8006a04:	4603      	mov	r3, r0
 8006a06:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8006a08:	7ffb      	ldrb	r3, [r7, #31]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d001      	beq.n	8006a12 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8006a0e:	7ffb      	ldrb	r3, [r7, #31]
 8006a10:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d004      	beq.n	8006a28 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a22:	4618      	mov	r0, r3
 8006a24:	f7ff fd26 	bl	8006474 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d009      	beq.n	8006a48 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a38:	4618      	mov	r0, r3
 8006a3a:	f7ff fd45 	bl	80064c8 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a42:	4618      	mov	r0, r3
 8006a44:	f7ff fd2c 	bl	80064a0 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8006a48:	7fbb      	ldrb	r3, [r7, #30]
}
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	3720      	adds	r7, #32
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	bd80      	pop	{r7, pc}

08006a52 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8006a52:	b580      	push	{r7, lr}
 8006a54:	b084      	sub	sp, #16
 8006a56:	af00      	add	r7, sp, #0
 8006a58:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8006a5e:	f7ff fe61 	bl	8006724 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006a62:	f7fc fac1 	bl	8002fe8 <HAL_GetTick>
 8006a66:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006a68:	e009      	b.n	8006a7e <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006a6a:	f7fc fabd 	bl	8002fe8 <HAL_GetTick>
 8006a6e:	4602      	mov	r2, r0
 8006a70:	68bb      	ldr	r3, [r7, #8]
 8006a72:	1ad3      	subs	r3, r2, r3
 8006a74:	2b02      	cmp	r3, #2
 8006a76:	d902      	bls.n	8006a7e <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8006a78:	2303      	movs	r3, #3
 8006a7a:	73fb      	strb	r3, [r7, #15]
      break;
 8006a7c:	e004      	b.n	8006a88 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006a7e:	f7ff fe60 	bl	8006742 <LL_RCC_PLLSAI1_IsReady>
 8006a82:	4603      	mov	r3, r0
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d1f0      	bne.n	8006a6a <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8006a88:	7bfb      	ldrb	r3, [r7, #15]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d137      	bne.n	8006afe <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8006a8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a92:	691b      	ldr	r3, [r3, #16]
 8006a94:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	021b      	lsls	r3, r3, #8
 8006a9e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006aa2:	4313      	orrs	r3, r2
 8006aa4:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8006aa6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006aaa:	691b      	ldr	r3, [r3, #16]
 8006aac:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	685b      	ldr	r3, [r3, #4]
 8006ab4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006ab8:	4313      	orrs	r3, r2
 8006aba:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8006abc:	f7ff fe23 	bl	8006706 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ac0:	f7fc fa92 	bl	8002fe8 <HAL_GetTick>
 8006ac4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006ac6:	e009      	b.n	8006adc <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006ac8:	f7fc fa8e 	bl	8002fe8 <HAL_GetTick>
 8006acc:	4602      	mov	r2, r0
 8006ace:	68bb      	ldr	r3, [r7, #8]
 8006ad0:	1ad3      	subs	r3, r2, r3
 8006ad2:	2b02      	cmp	r3, #2
 8006ad4:	d902      	bls.n	8006adc <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8006ad6:	2303      	movs	r3, #3
 8006ad8:	73fb      	strb	r3, [r7, #15]
        break;
 8006ada:	e004      	b.n	8006ae6 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006adc:	f7ff fe31 	bl	8006742 <LL_RCC_PLLSAI1_IsReady>
 8006ae0:	4603      	mov	r3, r0
 8006ae2:	2b01      	cmp	r3, #1
 8006ae4:	d1f0      	bne.n	8006ac8 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8006ae6:	7bfb      	ldrb	r3, [r7, #15]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d108      	bne.n	8006afe <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8006aec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006af0:	691a      	ldr	r2, [r3, #16]
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	691b      	ldr	r3, [r3, #16]
 8006af6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006afa:	4313      	orrs	r3, r2
 8006afc:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8006afe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b00:	4618      	mov	r0, r3
 8006b02:	3710      	adds	r7, #16
 8006b04:	46bd      	mov	sp, r7
 8006b06:	bd80      	pop	{r7, pc}

08006b08 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b084      	sub	sp, #16
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006b10:	2300      	movs	r3, #0
 8006b12:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8006b14:	f7ff fe06 	bl	8006724 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006b18:	f7fc fa66 	bl	8002fe8 <HAL_GetTick>
 8006b1c:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006b1e:	e009      	b.n	8006b34 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006b20:	f7fc fa62 	bl	8002fe8 <HAL_GetTick>
 8006b24:	4602      	mov	r2, r0
 8006b26:	68bb      	ldr	r3, [r7, #8]
 8006b28:	1ad3      	subs	r3, r2, r3
 8006b2a:	2b02      	cmp	r3, #2
 8006b2c:	d902      	bls.n	8006b34 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8006b2e:	2303      	movs	r3, #3
 8006b30:	73fb      	strb	r3, [r7, #15]
      break;
 8006b32:	e004      	b.n	8006b3e <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006b34:	f7ff fe05 	bl	8006742 <LL_RCC_PLLSAI1_IsReady>
 8006b38:	4603      	mov	r3, r0
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d1f0      	bne.n	8006b20 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8006b3e:	7bfb      	ldrb	r3, [r7, #15]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d137      	bne.n	8006bb4 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8006b44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b48:	691b      	ldr	r3, [r3, #16]
 8006b4a:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	021b      	lsls	r3, r3, #8
 8006b54:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006b58:	4313      	orrs	r3, r2
 8006b5a:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8006b5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b60:	691b      	ldr	r3, [r3, #16]
 8006b62:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	689b      	ldr	r3, [r3, #8]
 8006b6a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006b6e:	4313      	orrs	r3, r2
 8006b70:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8006b72:	f7ff fdc8 	bl	8006706 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006b76:	f7fc fa37 	bl	8002fe8 <HAL_GetTick>
 8006b7a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006b7c:	e009      	b.n	8006b92 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006b7e:	f7fc fa33 	bl	8002fe8 <HAL_GetTick>
 8006b82:	4602      	mov	r2, r0
 8006b84:	68bb      	ldr	r3, [r7, #8]
 8006b86:	1ad3      	subs	r3, r2, r3
 8006b88:	2b02      	cmp	r3, #2
 8006b8a:	d902      	bls.n	8006b92 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8006b8c:	2303      	movs	r3, #3
 8006b8e:	73fb      	strb	r3, [r7, #15]
        break;
 8006b90:	e004      	b.n	8006b9c <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006b92:	f7ff fdd6 	bl	8006742 <LL_RCC_PLLSAI1_IsReady>
 8006b96:	4603      	mov	r3, r0
 8006b98:	2b01      	cmp	r3, #1
 8006b9a:	d1f0      	bne.n	8006b7e <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8006b9c:	7bfb      	ldrb	r3, [r7, #15]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d108      	bne.n	8006bb4 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8006ba2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ba6:	691a      	ldr	r2, [r3, #16]
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	691b      	ldr	r3, [r3, #16]
 8006bac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006bb0:	4313      	orrs	r3, r2
 8006bb2:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8006bb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	3710      	adds	r7, #16
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	bd80      	pop	{r7, pc}

08006bbe <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8006bbe:	b580      	push	{r7, lr}
 8006bc0:	b084      	sub	sp, #16
 8006bc2:	af00      	add	r7, sp, #0
 8006bc4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8006bca:	f7ff fdab 	bl	8006724 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006bce:	f7fc fa0b 	bl	8002fe8 <HAL_GetTick>
 8006bd2:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006bd4:	e009      	b.n	8006bea <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006bd6:	f7fc fa07 	bl	8002fe8 <HAL_GetTick>
 8006bda:	4602      	mov	r2, r0
 8006bdc:	68bb      	ldr	r3, [r7, #8]
 8006bde:	1ad3      	subs	r3, r2, r3
 8006be0:	2b02      	cmp	r3, #2
 8006be2:	d902      	bls.n	8006bea <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8006be4:	2303      	movs	r3, #3
 8006be6:	73fb      	strb	r3, [r7, #15]
      break;
 8006be8:	e004      	b.n	8006bf4 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006bea:	f7ff fdaa 	bl	8006742 <LL_RCC_PLLSAI1_IsReady>
 8006bee:	4603      	mov	r3, r0
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d1f0      	bne.n	8006bd6 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8006bf4:	7bfb      	ldrb	r3, [r7, #15]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d137      	bne.n	8006c6a <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8006bfa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006bfe:	691b      	ldr	r3, [r3, #16]
 8006c00:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	021b      	lsls	r3, r3, #8
 8006c0a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006c0e:	4313      	orrs	r3, r2
 8006c10:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8006c12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c16:	691b      	ldr	r3, [r3, #16]
 8006c18:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	68db      	ldr	r3, [r3, #12]
 8006c20:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006c24:	4313      	orrs	r3, r2
 8006c26:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8006c28:	f7ff fd6d 	bl	8006706 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006c2c:	f7fc f9dc 	bl	8002fe8 <HAL_GetTick>
 8006c30:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006c32:	e009      	b.n	8006c48 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006c34:	f7fc f9d8 	bl	8002fe8 <HAL_GetTick>
 8006c38:	4602      	mov	r2, r0
 8006c3a:	68bb      	ldr	r3, [r7, #8]
 8006c3c:	1ad3      	subs	r3, r2, r3
 8006c3e:	2b02      	cmp	r3, #2
 8006c40:	d902      	bls.n	8006c48 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8006c42:	2303      	movs	r3, #3
 8006c44:	73fb      	strb	r3, [r7, #15]
        break;
 8006c46:	e004      	b.n	8006c52 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006c48:	f7ff fd7b 	bl	8006742 <LL_RCC_PLLSAI1_IsReady>
 8006c4c:	4603      	mov	r3, r0
 8006c4e:	2b01      	cmp	r3, #1
 8006c50:	d1f0      	bne.n	8006c34 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8006c52:	7bfb      	ldrb	r3, [r7, #15]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d108      	bne.n	8006c6a <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8006c58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c5c:	691a      	ldr	r2, [r3, #16]
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	691b      	ldr	r3, [r3, #16]
 8006c62:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006c66:	4313      	orrs	r3, r2
 8006c68:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8006c6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	3710      	adds	r7, #16
 8006c70:	46bd      	mov	sp, r7
 8006c72:	bd80      	pop	{r7, pc}

08006c74 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b084      	sub	sp, #16
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d101      	bne.n	8006c86 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8006c82:	2301      	movs	r3, #1
 8006c84:	e09f      	b.n	8006dc6 <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006c8c:	b2db      	uxtb	r3, r3
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d106      	bne.n	8006ca0 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2200      	movs	r2, #0
 8006c96:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8006c9a:	6878      	ldr	r0, [r7, #4]
 8006c9c:	f7fb fe86 	bl	80029ac <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2202      	movs	r2, #2
 8006ca4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8006ca8:	4b49      	ldr	r3, [pc, #292]	; (8006dd0 <HAL_RTC_Init+0x15c>)
 8006caa:	68db      	ldr	r3, [r3, #12]
 8006cac:	f003 0310 	and.w	r3, r3, #16
 8006cb0:	2b10      	cmp	r3, #16
 8006cb2:	d07e      	beq.n	8006db2 <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	22ca      	movs	r2, #202	; 0xca
 8006cba:	625a      	str	r2, [r3, #36]	; 0x24
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	2253      	movs	r2, #83	; 0x53
 8006cc2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8006cc4:	6878      	ldr	r0, [r7, #4]
 8006cc6:	f000 f8ab 	bl	8006e20 <RTC_EnterInitMode>
 8006cca:	4603      	mov	r3, r0
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d00a      	beq.n	8006ce6 <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	22ff      	movs	r2, #255	; 0xff
 8006cd6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2204      	movs	r2, #4
 8006cdc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      status = HAL_ERROR;
 8006ce0:	2301      	movs	r3, #1
 8006ce2:	73fb      	strb	r3, [r7, #15]
 8006ce4:	e067      	b.n	8006db6 <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	689b      	ldr	r3, [r3, #8]
 8006cec:	687a      	ldr	r2, [r7, #4]
 8006cee:	6812      	ldr	r2, [r2, #0]
 8006cf0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006cf4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006cf8:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	6899      	ldr	r1, [r3, #8]
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	685a      	ldr	r2, [r3, #4]
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	691b      	ldr	r3, [r3, #16]
 8006d08:	431a      	orrs	r2, r3
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	699b      	ldr	r3, [r3, #24]
 8006d0e:	431a      	orrs	r2, r3
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	430a      	orrs	r2, r1
 8006d16:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	687a      	ldr	r2, [r7, #4]
 8006d1e:	68d2      	ldr	r2, [r2, #12]
 8006d20:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	6919      	ldr	r1, [r3, #16]
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	689b      	ldr	r3, [r3, #8]
 8006d2c:	041a      	lsls	r2, r3, #16
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	430a      	orrs	r2, r1
 8006d34:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	68da      	ldr	r2, [r3, #12]
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006d44:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f022 0203 	bic.w	r2, r2, #3
 8006d54:	64da      	str	r2, [r3, #76]	; 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	69da      	ldr	r2, [r3, #28]
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	695b      	ldr	r3, [r3, #20]
 8006d64:	431a      	orrs	r2, r3
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	430a      	orrs	r2, r1
 8006d6c:	64da      	str	r2, [r3, #76]	; 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	689b      	ldr	r3, [r3, #8]
 8006d74:	f003 0320 	and.w	r3, r3, #32
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d113      	bne.n	8006da4 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006d7c:	6878      	ldr	r0, [r7, #4]
 8006d7e:	f000 f829 	bl	8006dd4 <HAL_RTC_WaitForSynchro>
 8006d82:	4603      	mov	r3, r0
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d00d      	beq.n	8006da4 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	22ff      	movs	r2, #255	; 0xff
 8006d8e:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2204      	movs	r2, #4
 8006d94:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 8006da0:	2301      	movs	r3, #1
 8006da2:	e010      	b.n	8006dc6 <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	22ff      	movs	r2, #255	; 0xff
 8006daa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      status = HAL_OK;
 8006dac:	2300      	movs	r3, #0
 8006dae:	73fb      	strb	r3, [r7, #15]
 8006db0:	e001      	b.n	8006db6 <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 8006db2:	2300      	movs	r3, #0
 8006db4:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8006db6:	7bfb      	ldrb	r3, [r7, #15]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d103      	bne.n	8006dc4 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2201      	movs	r2, #1
 8006dc0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  return status;
 8006dc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	3710      	adds	r7, #16
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	bd80      	pop	{r7, pc}
 8006dce:	bf00      	nop
 8006dd0:	40002800 	.word	0x40002800

08006dd4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b084      	sub	sp, #16
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	68da      	ldr	r2, [r3, #12]
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006dea:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8006dec:	f7fc f8fc 	bl	8002fe8 <HAL_GetTick>
 8006df0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006df2:	e009      	b.n	8006e08 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006df4:	f7fc f8f8 	bl	8002fe8 <HAL_GetTick>
 8006df8:	4602      	mov	r2, r0
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	1ad3      	subs	r3, r2, r3
 8006dfe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006e02:	d901      	bls.n	8006e08 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8006e04:	2303      	movs	r3, #3
 8006e06:	e007      	b.n	8006e18 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	68db      	ldr	r3, [r3, #12]
 8006e0e:	f003 0320 	and.w	r3, r3, #32
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d0ee      	beq.n	8006df4 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8006e16:	2300      	movs	r3, #0
}
 8006e18:	4618      	mov	r0, r3
 8006e1a:	3710      	adds	r7, #16
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	bd80      	pop	{r7, pc}

08006e20 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b084      	sub	sp, #16
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	68db      	ldr	r3, [r3, #12]
 8006e2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d119      	bne.n	8006e6a <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006e3e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8006e40:	f7fc f8d2 	bl	8002fe8 <HAL_GetTick>
 8006e44:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006e46:	e009      	b.n	8006e5c <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8006e48:	f7fc f8ce 	bl	8002fe8 <HAL_GetTick>
 8006e4c:	4602      	mov	r2, r0
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	1ad3      	subs	r3, r2, r3
 8006e52:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006e56:	d901      	bls.n	8006e5c <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8006e58:	2303      	movs	r3, #3
 8006e5a:	e007      	b.n	8006e6c <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	68db      	ldr	r3, [r3, #12]
 8006e62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d0ee      	beq.n	8006e48 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8006e6a:	2300      	movs	r3, #0
}
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	3710      	adds	r7, #16
 8006e70:	46bd      	mov	sp, r7
 8006e72:	bd80      	pop	{r7, pc}

08006e74 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b086      	sub	sp, #24
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	60f8      	str	r0, [r7, #12]
 8006e7c:	60b9      	str	r1, [r7, #8]
 8006e7e:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006e86:	2b01      	cmp	r3, #1
 8006e88:	d101      	bne.n	8006e8e <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 8006e8a:	2302      	movs	r3, #2
 8006e8c:	e0a8      	b.n	8006fe0 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	2201      	movs	r2, #1
 8006e92:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	2202      	movs	r2, #2
 8006e9a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	22ca      	movs	r2, #202	; 0xca
 8006ea4:	625a      	str	r2, [r3, #36]	; 0x24
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	2253      	movs	r2, #83	; 0x53
 8006eac:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	689b      	ldr	r3, [r3, #8]
 8006eb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d020      	beq.n	8006efe <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 8006ebc:	f7fc f894 	bl	8002fe8 <HAL_GetTick>
 8006ec0:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8006ec2:	e015      	b.n	8006ef0 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006ec4:	f7fc f890 	bl	8002fe8 <HAL_GetTick>
 8006ec8:	4602      	mov	r2, r0
 8006eca:	697b      	ldr	r3, [r7, #20]
 8006ecc:	1ad3      	subs	r3, r2, r3
 8006ece:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006ed2:	d90d      	bls.n	8006ef0 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	22ff      	movs	r2, #255	; 0xff
 8006eda:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	2203      	movs	r2, #3
 8006ee0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8006eec:	2303      	movs	r3, #3
 8006eee:	e077      	b.n	8006fe0 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	68db      	ldr	r3, [r3, #12]
 8006ef6:	f003 0304 	and.w	r3, r3, #4
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d1e2      	bne.n	8006ec4 <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	689a      	ldr	r2, [r3, #8]
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f0c:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	68db      	ldr	r3, [r3, #12]
 8006f14:	b2da      	uxtb	r2, r3
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8006f1e:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8006f20:	f7fc f862 	bl	8002fe8 <HAL_GetTick>
 8006f24:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8006f26:	e015      	b.n	8006f54 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006f28:	f7fc f85e 	bl	8002fe8 <HAL_GetTick>
 8006f2c:	4602      	mov	r2, r0
 8006f2e:	697b      	ldr	r3, [r7, #20]
 8006f30:	1ad3      	subs	r3, r2, r3
 8006f32:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006f36:	d90d      	bls.n	8006f54 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	22ff      	movs	r2, #255	; 0xff
 8006f3e:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	2203      	movs	r2, #3
 8006f44:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 8006f50:	2303      	movs	r3, #3
 8006f52:	e045      	b.n	8006fe0 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	68db      	ldr	r3, [r3, #12]
 8006f5a:	f003 0304 	and.w	r3, r3, #4
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d0e2      	beq.n	8006f28 <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	68ba      	ldr	r2, [r7, #8]
 8006f68:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	689a      	ldr	r2, [r3, #8]
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f022 0207 	bic.w	r2, r2, #7
 8006f78:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	6899      	ldr	r1, [r3, #8]
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	687a      	ldr	r2, [r7, #4]
 8006f86:	430a      	orrs	r2, r1
 8006f88:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8006f8a:	4b17      	ldr	r3, [pc, #92]	; (8006fe8 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8006f8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006f90:	4a15      	ldr	r2, [pc, #84]	; (8006fe8 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8006f92:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006f96:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8006f9a:	4b13      	ldr	r3, [pc, #76]	; (8006fe8 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	4a12      	ldr	r2, [pc, #72]	; (8006fe8 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8006fa0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006fa4:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	689a      	ldr	r2, [r3, #8]
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006fb4:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	689a      	ldr	r2, [r3, #8]
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006fc4:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	22ff      	movs	r2, #255	; 0xff
 8006fcc:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	2201      	movs	r2, #1
 8006fd2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	2200      	movs	r2, #0
 8006fda:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8006fde:	2300      	movs	r3, #0
}
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	3718      	adds	r7, #24
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	bd80      	pop	{r7, pc}
 8006fe8:	58000800 	.word	0x58000800

08006fec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b084      	sub	sp, #16
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d101      	bne.n	8006ffe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006ffa:	2301      	movs	r3, #1
 8006ffc:	e095      	b.n	800712a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007002:	2b00      	cmp	r3, #0
 8007004:	d108      	bne.n	8007018 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	685b      	ldr	r3, [r3, #4]
 800700a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800700e:	d009      	beq.n	8007024 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2200      	movs	r2, #0
 8007014:	61da      	str	r2, [r3, #28]
 8007016:	e005      	b.n	8007024 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2200      	movs	r2, #0
 800701c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2200      	movs	r2, #0
 8007022:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2200      	movs	r2, #0
 8007028:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007030:	b2db      	uxtb	r3, r3
 8007032:	2b00      	cmp	r3, #0
 8007034:	d106      	bne.n	8007044 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2200      	movs	r2, #0
 800703a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800703e:	6878      	ldr	r0, [r7, #4]
 8007040:	f7fb fce8 	bl	8002a14 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2202      	movs	r2, #2
 8007048:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	681a      	ldr	r2, [r3, #0]
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800705a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	68db      	ldr	r3, [r3, #12]
 8007060:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007064:	d902      	bls.n	800706c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007066:	2300      	movs	r3, #0
 8007068:	60fb      	str	r3, [r7, #12]
 800706a:	e002      	b.n	8007072 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800706c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007070:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	68db      	ldr	r3, [r3, #12]
 8007076:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800707a:	d007      	beq.n	800708c <HAL_SPI_Init+0xa0>
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	68db      	ldr	r3, [r3, #12]
 8007080:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007084:	d002      	beq.n	800708c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2200      	movs	r2, #0
 800708a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	685b      	ldr	r3, [r3, #4]
 8007090:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	689b      	ldr	r3, [r3, #8]
 8007098:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800709c:	431a      	orrs	r2, r3
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	691b      	ldr	r3, [r3, #16]
 80070a2:	f003 0302 	and.w	r3, r3, #2
 80070a6:	431a      	orrs	r2, r3
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	695b      	ldr	r3, [r3, #20]
 80070ac:	f003 0301 	and.w	r3, r3, #1
 80070b0:	431a      	orrs	r2, r3
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	699b      	ldr	r3, [r3, #24]
 80070b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80070ba:	431a      	orrs	r2, r3
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	69db      	ldr	r3, [r3, #28]
 80070c0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80070c4:	431a      	orrs	r2, r3
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6a1b      	ldr	r3, [r3, #32]
 80070ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070ce:	ea42 0103 	orr.w	r1, r2, r3
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070d6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	430a      	orrs	r2, r1
 80070e0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	699b      	ldr	r3, [r3, #24]
 80070e6:	0c1b      	lsrs	r3, r3, #16
 80070e8:	f003 0204 	and.w	r2, r3, #4
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070f0:	f003 0310 	and.w	r3, r3, #16
 80070f4:	431a      	orrs	r2, r3
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070fa:	f003 0308 	and.w	r3, r3, #8
 80070fe:	431a      	orrs	r2, r3
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	68db      	ldr	r3, [r3, #12]
 8007104:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8007108:	ea42 0103 	orr.w	r1, r2, r3
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	430a      	orrs	r2, r1
 8007118:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	2200      	movs	r2, #0
 800711e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2201      	movs	r2, #1
 8007124:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8007128:	2300      	movs	r3, #0
}
 800712a:	4618      	mov	r0, r3
 800712c:	3710      	adds	r7, #16
 800712e:	46bd      	mov	sp, r7
 8007130:	bd80      	pop	{r7, pc}
	...

08007134 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8007134:	b580      	push	{r7, lr}
 8007136:	b086      	sub	sp, #24
 8007138:	af00      	add	r7, sp, #0
 800713a:	60f8      	str	r0, [r7, #12]
 800713c:	60b9      	str	r1, [r7, #8]
 800713e:	4613      	mov	r3, r2
 8007140:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007142:	2300      	movs	r3, #0
 8007144:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800714c:	2b01      	cmp	r3, #1
 800714e:	d101      	bne.n	8007154 <HAL_SPI_Transmit_DMA+0x20>
 8007150:	2302      	movs	r3, #2
 8007152:	e0d8      	b.n	8007306 <HAL_SPI_Transmit_DMA+0x1d2>
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	2201      	movs	r2, #1
 8007158:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007162:	b2db      	uxtb	r3, r3
 8007164:	2b01      	cmp	r3, #1
 8007166:	d002      	beq.n	800716e <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8007168:	2302      	movs	r3, #2
 800716a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800716c:	e0c6      	b.n	80072fc <HAL_SPI_Transmit_DMA+0x1c8>
  }

  if ((pData == NULL) || (Size == 0U))
 800716e:	68bb      	ldr	r3, [r7, #8]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d002      	beq.n	800717a <HAL_SPI_Transmit_DMA+0x46>
 8007174:	88fb      	ldrh	r3, [r7, #6]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d102      	bne.n	8007180 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800717a:	2301      	movs	r3, #1
 800717c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800717e:	e0bd      	b.n	80072fc <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	2203      	movs	r2, #3
 8007184:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	2200      	movs	r2, #0
 800718c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	68ba      	ldr	r2, [r7, #8]
 8007192:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	88fa      	ldrh	r2, [r7, #6]
 8007198:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	88fa      	ldrh	r2, [r7, #6]
 800719e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	2200      	movs	r2, #0
 80071a4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	2200      	movs	r2, #0
 80071aa:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	2200      	movs	r2, #0
 80071b0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	2200      	movs	r2, #0
 80071b6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	2200      	movs	r2, #0
 80071be:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	689b      	ldr	r3, [r3, #8]
 80071c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80071ca:	d10f      	bne.n	80071ec <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	681a      	ldr	r2, [r3, #0]
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80071da:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	681a      	ldr	r2, [r3, #0]
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80071ea:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071f0:	4a47      	ldr	r2, [pc, #284]	; (8007310 <HAL_SPI_Transmit_DMA+0x1dc>)
 80071f2:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071f8:	4a46      	ldr	r2, [pc, #280]	; (8007314 <HAL_SPI_Transmit_DMA+0x1e0>)
 80071fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007200:	4a45      	ldr	r2, [pc, #276]	; (8007318 <HAL_SPI_Transmit_DMA+0x1e4>)
 8007202:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007208:	2200      	movs	r2, #0
 800720a:	639a      	str	r2, [r3, #56]	; 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	685a      	ldr	r2, [r3, #4]
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800721a:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	68db      	ldr	r3, [r3, #12]
 8007220:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007224:	d82d      	bhi.n	8007282 <HAL_SPI_Transmit_DMA+0x14e>
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800722a:	699b      	ldr	r3, [r3, #24]
 800722c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007230:	d127      	bne.n	8007282 <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007236:	b29b      	uxth	r3, r3
 8007238:	f003 0301 	and.w	r3, r3, #1
 800723c:	2b00      	cmp	r3, #0
 800723e:	d10f      	bne.n	8007260 <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	685a      	ldr	r2, [r3, #4]
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800724e:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007254:	b29b      	uxth	r3, r3
 8007256:	085b      	lsrs	r3, r3, #1
 8007258:	b29a      	uxth	r2, r3
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800725e:	e010      	b.n	8007282 <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	685a      	ldr	r2, [r3, #4]
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800726e:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007274:	b29b      	uxth	r3, r3
 8007276:	085b      	lsrs	r3, r3, #1
 8007278:	b29b      	uxth	r3, r3
 800727a:	3301      	adds	r3, #1
 800727c:	b29a      	uxth	r2, r3
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800728a:	4619      	mov	r1, r3
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	330c      	adds	r3, #12
 8007292:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007298:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800729a:	f7fc f90b 	bl	80034b4 <HAL_DMA_Start_IT>
 800729e:	4603      	mov	r3, r0
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d00c      	beq.n	80072be <HAL_SPI_Transmit_DMA+0x18a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072a8:	f043 0210 	orr.w	r2, r3, #16
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 80072b0:	2301      	movs	r3, #1
 80072b2:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	2201      	movs	r2, #1
 80072b8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 80072bc:	e01e      	b.n	80072fc <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072c8:	2b40      	cmp	r3, #64	; 0x40
 80072ca:	d007      	beq.n	80072dc <HAL_SPI_Transmit_DMA+0x1a8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	681a      	ldr	r2, [r3, #0]
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80072da:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	685a      	ldr	r2, [r3, #4]
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f042 0220 	orr.w	r2, r2, #32
 80072ea:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	685a      	ldr	r2, [r3, #4]
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f042 0202 	orr.w	r2, r2, #2
 80072fa:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	2200      	movs	r2, #0
 8007300:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007304:	7dfb      	ldrb	r3, [r7, #23]
}
 8007306:	4618      	mov	r0, r3
 8007308:	3718      	adds	r7, #24
 800730a:	46bd      	mov	sp, r7
 800730c:	bd80      	pop	{r7, pc}
 800730e:	bf00      	nop
 8007310:	08007d03 	.word	0x08007d03
 8007314:	08007b25 	.word	0x08007b25
 8007318:	08007d57 	.word	0x08007d57

0800731c <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800731c:	b580      	push	{r7, lr}
 800731e:	b086      	sub	sp, #24
 8007320:	af00      	add	r7, sp, #0
 8007322:	60f8      	str	r0, [r7, #12]
 8007324:	60b9      	str	r1, [r7, #8]
 8007326:	4613      	mov	r3, r2
 8007328:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800732a:	2300      	movs	r3, #0
 800732c:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	689b      	ldr	r3, [r3, #8]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d110      	bne.n	8007358 <HAL_SPI_Receive_DMA+0x3c>
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	685b      	ldr	r3, [r3, #4]
 800733a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800733e:	d10b      	bne.n	8007358 <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	2204      	movs	r2, #4
 8007344:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8007348:	88fb      	ldrh	r3, [r7, #6]
 800734a:	68ba      	ldr	r2, [r7, #8]
 800734c:	68b9      	ldr	r1, [r7, #8]
 800734e:	68f8      	ldr	r0, [r7, #12]
 8007350:	f000 f908 	bl	8007564 <HAL_SPI_TransmitReceive_DMA>
 8007354:	4603      	mov	r3, r0
 8007356:	e0fb      	b.n	8007550 <HAL_SPI_Receive_DMA+0x234>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800735e:	2b01      	cmp	r3, #1
 8007360:	d101      	bne.n	8007366 <HAL_SPI_Receive_DMA+0x4a>
 8007362:	2302      	movs	r3, #2
 8007364:	e0f4      	b.n	8007550 <HAL_SPI_Receive_DMA+0x234>
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	2201      	movs	r2, #1
 800736a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007374:	b2db      	uxtb	r3, r3
 8007376:	2b01      	cmp	r3, #1
 8007378:	d002      	beq.n	8007380 <HAL_SPI_Receive_DMA+0x64>
  {
    errorcode = HAL_BUSY;
 800737a:	2302      	movs	r3, #2
 800737c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800737e:	e0e2      	b.n	8007546 <HAL_SPI_Receive_DMA+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 8007380:	68bb      	ldr	r3, [r7, #8]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d002      	beq.n	800738c <HAL_SPI_Receive_DMA+0x70>
 8007386:	88fb      	ldrh	r3, [r7, #6]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d102      	bne.n	8007392 <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 800738c:	2301      	movs	r3, #1
 800738e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007390:	e0d9      	b.n	8007546 <HAL_SPI_Receive_DMA+0x22a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	2204      	movs	r2, #4
 8007396:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	2200      	movs	r2, #0
 800739e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	68ba      	ldr	r2, [r7, #8]
 80073a4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	88fa      	ldrh	r2, [r7, #6]
 80073aa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	88fa      	ldrh	r2, [r7, #6]
 80073b2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	2200      	movs	r2, #0
 80073ba:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	2200      	movs	r2, #0
 80073c0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->TxXferSize  = 0U;
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	2200      	movs	r2, #0
 80073c6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	2200      	movs	r2, #0
 80073cc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	689b      	ldr	r3, [r3, #8]
 80073d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80073d6:	d10f      	bne.n	80073f8 <HAL_SPI_Receive_DMA+0xdc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	681a      	ldr	r2, [r3, #0]
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80073e6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	681a      	ldr	r2, [r3, #0]
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80073f6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */


  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	685a      	ldr	r2, [r3, #4]
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007406:	605a      	str	r2, [r3, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	68db      	ldr	r3, [r3, #12]
 800740c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007410:	d908      	bls.n	8007424 <HAL_SPI_Receive_DMA+0x108>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	685a      	ldr	r2, [r3, #4]
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007420:	605a      	str	r2, [r3, #4]
 8007422:	e042      	b.n	80074aa <HAL_SPI_Receive_DMA+0x18e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	685a      	ldr	r2, [r3, #4]
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007432:	605a      	str	r2, [r3, #4]

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007438:	699b      	ldr	r3, [r3, #24]
 800743a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800743e:	d134      	bne.n	80074aa <HAL_SPI_Receive_DMA+0x18e>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	685a      	ldr	r2, [r3, #4]
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800744e:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007456:	b29b      	uxth	r3, r3
 8007458:	f003 0301 	and.w	r3, r3, #1
 800745c:	2b00      	cmp	r3, #0
 800745e:	d111      	bne.n	8007484 <HAL_SPI_Receive_DMA+0x168>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	685a      	ldr	r2, [r3, #4]
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800746e:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007476:	b29b      	uxth	r3, r3
 8007478:	085b      	lsrs	r3, r3, #1
 800747a:	b29a      	uxth	r2, r3
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8007482:	e012      	b.n	80074aa <HAL_SPI_Receive_DMA+0x18e>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	685a      	ldr	r2, [r3, #4]
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007492:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800749a:	b29b      	uxth	r3, r3
 800749c:	085b      	lsrs	r3, r3, #1
 800749e:	b29b      	uxth	r3, r3
 80074a0:	3301      	adds	r3, #1
 80074a2:	b29a      	uxth	r2, r3
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074ae:	4a2a      	ldr	r2, [pc, #168]	; (8007558 <HAL_SPI_Receive_DMA+0x23c>)
 80074b0:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074b6:	4a29      	ldr	r2, [pc, #164]	; (800755c <HAL_SPI_Receive_DMA+0x240>)
 80074b8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074be:	4a28      	ldr	r2, [pc, #160]	; (8007560 <HAL_SPI_Receive_DMA+0x244>)
 80074c0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074c6:	2200      	movs	r2, #0
 80074c8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	6d98      	ldr	r0, [r3, #88]	; 0x58
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	330c      	adds	r3, #12
 80074d4:	4619      	mov	r1, r3
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074da:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80074e2:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80074e4:	f7fb ffe6 	bl	80034b4 <HAL_DMA_Start_IT>
 80074e8:	4603      	mov	r3, r0
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d00c      	beq.n	8007508 <HAL_SPI_Receive_DMA+0x1ec>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80074f2:	f043 0210 	orr.w	r2, r3, #16
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 80074fa:	2301      	movs	r3, #1
 80074fc:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	2201      	movs	r2, #1
 8007502:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8007506:	e01e      	b.n	8007546 <HAL_SPI_Receive_DMA+0x22a>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007512:	2b40      	cmp	r3, #64	; 0x40
 8007514:	d007      	beq.n	8007526 <HAL_SPI_Receive_DMA+0x20a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	681a      	ldr	r2, [r3, #0]
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007524:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	685a      	ldr	r2, [r3, #4]
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f042 0220 	orr.w	r2, r2, #32
 8007534:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	685a      	ldr	r2, [r3, #4]
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f042 0201 	orr.w	r2, r2, #1
 8007544:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	2200      	movs	r2, #0
 800754a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800754e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007550:	4618      	mov	r0, r3
 8007552:	3718      	adds	r7, #24
 8007554:	46bd      	mov	sp, r7
 8007556:	bd80      	pop	{r7, pc}
 8007558:	08007d1f 	.word	0x08007d1f
 800755c:	08007bcb 	.word	0x08007bcb
 8007560:	08007d57 	.word	0x08007d57

08007564 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8007564:	b580      	push	{r7, lr}
 8007566:	b086      	sub	sp, #24
 8007568:	af00      	add	r7, sp, #0
 800756a:	60f8      	str	r0, [r7, #12]
 800756c:	60b9      	str	r1, [r7, #8]
 800756e:	607a      	str	r2, [r7, #4]
 8007570:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007572:	2300      	movs	r3, #0
 8007574:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800757c:	2b01      	cmp	r3, #1
 800757e:	d101      	bne.n	8007584 <HAL_SPI_TransmitReceive_DMA+0x20>
 8007580:	2302      	movs	r3, #2
 8007582:	e16c      	b.n	800785e <HAL_SPI_TransmitReceive_DMA+0x2fa>
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	2201      	movs	r2, #1
 8007588:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007592:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	685b      	ldr	r3, [r3, #4]
 8007598:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800759a:	7dbb      	ldrb	r3, [r7, #22]
 800759c:	2b01      	cmp	r3, #1
 800759e:	d00d      	beq.n	80075bc <HAL_SPI_TransmitReceive_DMA+0x58>
 80075a0:	693b      	ldr	r3, [r7, #16]
 80075a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80075a6:	d106      	bne.n	80075b6 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	689b      	ldr	r3, [r3, #8]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d102      	bne.n	80075b6 <HAL_SPI_TransmitReceive_DMA+0x52>
 80075b0:	7dbb      	ldrb	r3, [r7, #22]
 80075b2:	2b04      	cmp	r3, #4
 80075b4:	d002      	beq.n	80075bc <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 80075b6:	2302      	movs	r3, #2
 80075b8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80075ba:	e14b      	b.n	8007854 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80075bc:	68bb      	ldr	r3, [r7, #8]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d005      	beq.n	80075ce <HAL_SPI_TransmitReceive_DMA+0x6a>
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d002      	beq.n	80075ce <HAL_SPI_TransmitReceive_DMA+0x6a>
 80075c8:	887b      	ldrh	r3, [r7, #2]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d102      	bne.n	80075d4 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 80075ce:	2301      	movs	r3, #1
 80075d0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80075d2:	e13f      	b.n	8007854 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80075da:	b2db      	uxtb	r3, r3
 80075dc:	2b04      	cmp	r3, #4
 80075de:	d003      	beq.n	80075e8 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	2205      	movs	r2, #5
 80075e4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	2200      	movs	r2, #0
 80075ec:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	68ba      	ldr	r2, [r7, #8]
 80075f2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	887a      	ldrh	r2, [r7, #2]
 80075f8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	887a      	ldrh	r2, [r7, #2]
 80075fe:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	687a      	ldr	r2, [r7, #4]
 8007604:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	887a      	ldrh	r2, [r7, #2]
 800760a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	887a      	ldrh	r2, [r7, #2]
 8007612:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	2200      	movs	r2, #0
 800761a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	2200      	movs	r2, #0
 8007620:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	685a      	ldr	r2, [r3, #4]
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 8007630:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	68db      	ldr	r3, [r3, #12]
 8007636:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800763a:	d908      	bls.n	800764e <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	685a      	ldr	r2, [r3, #4]
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800764a:	605a      	str	r2, [r3, #4]
 800764c:	e06f      	b.n	800772e <HAL_SPI_TransmitReceive_DMA+0x1ca>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	685a      	ldr	r2, [r3, #4]
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800765c:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007662:	699b      	ldr	r3, [r3, #24]
 8007664:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007668:	d126      	bne.n	80076b8 <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800766e:	f003 0301 	and.w	r3, r3, #1
 8007672:	2b00      	cmp	r3, #0
 8007674:	d10f      	bne.n	8007696 <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	685a      	ldr	r2, [r3, #4]
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007684:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800768a:	b29b      	uxth	r3, r3
 800768c:	085b      	lsrs	r3, r3, #1
 800768e:	b29a      	uxth	r2, r3
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007694:	e010      	b.n	80076b8 <HAL_SPI_TransmitReceive_DMA+0x154>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	685a      	ldr	r2, [r3, #4]
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80076a4:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80076aa:	b29b      	uxth	r3, r3
 80076ac:	085b      	lsrs	r3, r3, #1
 80076ae:	b29b      	uxth	r3, r3
 80076b0:	3301      	adds	r3, #1
 80076b2:	b29a      	uxth	r2, r3
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076bc:	699b      	ldr	r3, [r3, #24]
 80076be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80076c2:	d134      	bne.n	800772e <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	685a      	ldr	r2, [r3, #4]
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80076d2:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80076da:	b29b      	uxth	r3, r3
 80076dc:	f003 0301 	and.w	r3, r3, #1
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d111      	bne.n	8007708 <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	685a      	ldr	r2, [r3, #4]
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80076f2:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80076fa:	b29b      	uxth	r3, r3
 80076fc:	085b      	lsrs	r3, r3, #1
 80076fe:	b29a      	uxth	r2, r3
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8007706:	e012      	b.n	800772e <HAL_SPI_TransmitReceive_DMA+0x1ca>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	685a      	ldr	r2, [r3, #4]
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007716:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800771e:	b29b      	uxth	r3, r3
 8007720:	085b      	lsrs	r3, r3, #1
 8007722:	b29b      	uxth	r3, r3
 8007724:	3301      	adds	r3, #1
 8007726:	b29a      	uxth	r2, r3
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007734:	b2db      	uxtb	r3, r3
 8007736:	2b04      	cmp	r3, #4
 8007738:	d108      	bne.n	800774c <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800773e:	4a4a      	ldr	r2, [pc, #296]	; (8007868 <HAL_SPI_TransmitReceive_DMA+0x304>)
 8007740:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007746:	4a49      	ldr	r2, [pc, #292]	; (800786c <HAL_SPI_TransmitReceive_DMA+0x308>)
 8007748:	62da      	str	r2, [r3, #44]	; 0x2c
 800774a:	e007      	b.n	800775c <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007750:	4a47      	ldr	r2, [pc, #284]	; (8007870 <HAL_SPI_TransmitReceive_DMA+0x30c>)
 8007752:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007758:	4a46      	ldr	r2, [pc, #280]	; (8007874 <HAL_SPI_TransmitReceive_DMA+0x310>)
 800775a:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007760:	4a45      	ldr	r2, [pc, #276]	; (8007878 <HAL_SPI_TransmitReceive_DMA+0x314>)
 8007762:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007768:	2200      	movs	r2, #0
 800776a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	330c      	adds	r3, #12
 8007776:	4619      	mov	r1, r3
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800777c:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007784:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8007786:	f7fb fe95 	bl	80034b4 <HAL_DMA_Start_IT>
 800778a:	4603      	mov	r3, r0
 800778c:	2b00      	cmp	r3, #0
 800778e:	d00c      	beq.n	80077aa <HAL_SPI_TransmitReceive_DMA+0x246>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007794:	f043 0210 	orr.w	r2, r3, #16
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800779c:	2301      	movs	r3, #1
 800779e:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	2201      	movs	r2, #1
 80077a4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 80077a8:	e054      	b.n	8007854 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	685a      	ldr	r2, [r3, #4]
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	f042 0201 	orr.w	r2, r2, #1
 80077b8:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077be:	2200      	movs	r2, #0
 80077c0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077c6:	2200      	movs	r2, #0
 80077c8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077ce:	2200      	movs	r2, #0
 80077d0:	635a      	str	r2, [r3, #52]	; 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077d6:	2200      	movs	r2, #0
 80077d8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077e2:	4619      	mov	r1, r3
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	330c      	adds	r3, #12
 80077ea:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80077f0:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80077f2:	f7fb fe5f 	bl	80034b4 <HAL_DMA_Start_IT>
 80077f6:	4603      	mov	r3, r0
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d00c      	beq.n	8007816 <HAL_SPI_TransmitReceive_DMA+0x2b2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007800:	f043 0210 	orr.w	r2, r3, #16
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8007808:	2301      	movs	r3, #1
 800780a:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	2201      	movs	r2, #1
 8007810:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8007814:	e01e      	b.n	8007854 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007820:	2b40      	cmp	r3, #64	; 0x40
 8007822:	d007      	beq.n	8007834 <HAL_SPI_TransmitReceive_DMA+0x2d0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	681a      	ldr	r2, [r3, #0]
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007832:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	685a      	ldr	r2, [r3, #4]
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	f042 0220 	orr.w	r2, r2, #32
 8007842:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	685a      	ldr	r2, [r3, #4]
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	f042 0202 	orr.w	r2, r2, #2
 8007852:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	2200      	movs	r2, #0
 8007858:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800785c:	7dfb      	ldrb	r3, [r7, #23]
}
 800785e:	4618      	mov	r0, r3
 8007860:	3718      	adds	r7, #24
 8007862:	46bd      	mov	sp, r7
 8007864:	bd80      	pop	{r7, pc}
 8007866:	bf00      	nop
 8007868:	08007d1f 	.word	0x08007d1f
 800786c:	08007bcb 	.word	0x08007bcb
 8007870:	08007d3b 	.word	0x08007d3b
 8007874:	08007c73 	.word	0x08007c73
 8007878:	08007d57 	.word	0x08007d57

0800787c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800787c:	b580      	push	{r7, lr}
 800787e:	b088      	sub	sp, #32
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	685b      	ldr	r3, [r3, #4]
 800788a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	689b      	ldr	r3, [r3, #8]
 8007892:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007894:	69bb      	ldr	r3, [r7, #24]
 8007896:	099b      	lsrs	r3, r3, #6
 8007898:	f003 0301 	and.w	r3, r3, #1
 800789c:	2b00      	cmp	r3, #0
 800789e:	d10f      	bne.n	80078c0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80078a0:	69bb      	ldr	r3, [r7, #24]
 80078a2:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d00a      	beq.n	80078c0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80078aa:	69fb      	ldr	r3, [r7, #28]
 80078ac:	099b      	lsrs	r3, r3, #6
 80078ae:	f003 0301 	and.w	r3, r3, #1
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d004      	beq.n	80078c0 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078ba:	6878      	ldr	r0, [r7, #4]
 80078bc:	4798      	blx	r3
    return;
 80078be:	e0d7      	b.n	8007a70 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80078c0:	69bb      	ldr	r3, [r7, #24]
 80078c2:	085b      	lsrs	r3, r3, #1
 80078c4:	f003 0301 	and.w	r3, r3, #1
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d00a      	beq.n	80078e2 <HAL_SPI_IRQHandler+0x66>
 80078cc:	69fb      	ldr	r3, [r7, #28]
 80078ce:	09db      	lsrs	r3, r3, #7
 80078d0:	f003 0301 	and.w	r3, r3, #1
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d004      	beq.n	80078e2 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078dc:	6878      	ldr	r0, [r7, #4]
 80078de:	4798      	blx	r3
    return;
 80078e0:	e0c6      	b.n	8007a70 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80078e2:	69bb      	ldr	r3, [r7, #24]
 80078e4:	095b      	lsrs	r3, r3, #5
 80078e6:	f003 0301 	and.w	r3, r3, #1
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d10c      	bne.n	8007908 <HAL_SPI_IRQHandler+0x8c>
 80078ee:	69bb      	ldr	r3, [r7, #24]
 80078f0:	099b      	lsrs	r3, r3, #6
 80078f2:	f003 0301 	and.w	r3, r3, #1
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d106      	bne.n	8007908 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80078fa:	69bb      	ldr	r3, [r7, #24]
 80078fc:	0a1b      	lsrs	r3, r3, #8
 80078fe:	f003 0301 	and.w	r3, r3, #1
 8007902:	2b00      	cmp	r3, #0
 8007904:	f000 80b4 	beq.w	8007a70 <HAL_SPI_IRQHandler+0x1f4>
 8007908:	69fb      	ldr	r3, [r7, #28]
 800790a:	095b      	lsrs	r3, r3, #5
 800790c:	f003 0301 	and.w	r3, r3, #1
 8007910:	2b00      	cmp	r3, #0
 8007912:	f000 80ad 	beq.w	8007a70 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007916:	69bb      	ldr	r3, [r7, #24]
 8007918:	099b      	lsrs	r3, r3, #6
 800791a:	f003 0301 	and.w	r3, r3, #1
 800791e:	2b00      	cmp	r3, #0
 8007920:	d023      	beq.n	800796a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007928:	b2db      	uxtb	r3, r3
 800792a:	2b03      	cmp	r3, #3
 800792c:	d011      	beq.n	8007952 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007932:	f043 0204 	orr.w	r2, r3, #4
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800793a:	2300      	movs	r3, #0
 800793c:	617b      	str	r3, [r7, #20]
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	68db      	ldr	r3, [r3, #12]
 8007944:	617b      	str	r3, [r7, #20]
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	689b      	ldr	r3, [r3, #8]
 800794c:	617b      	str	r3, [r7, #20]
 800794e:	697b      	ldr	r3, [r7, #20]
 8007950:	e00b      	b.n	800796a <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007952:	2300      	movs	r3, #0
 8007954:	613b      	str	r3, [r7, #16]
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	68db      	ldr	r3, [r3, #12]
 800795c:	613b      	str	r3, [r7, #16]
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	689b      	ldr	r3, [r3, #8]
 8007964:	613b      	str	r3, [r7, #16]
 8007966:	693b      	ldr	r3, [r7, #16]
        return;
 8007968:	e082      	b.n	8007a70 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800796a:	69bb      	ldr	r3, [r7, #24]
 800796c:	095b      	lsrs	r3, r3, #5
 800796e:	f003 0301 	and.w	r3, r3, #1
 8007972:	2b00      	cmp	r3, #0
 8007974:	d014      	beq.n	80079a0 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800797a:	f043 0201 	orr.w	r2, r3, #1
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007982:	2300      	movs	r3, #0
 8007984:	60fb      	str	r3, [r7, #12]
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	689b      	ldr	r3, [r3, #8]
 800798c:	60fb      	str	r3, [r7, #12]
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	681a      	ldr	r2, [r3, #0]
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800799c:	601a      	str	r2, [r3, #0]
 800799e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80079a0:	69bb      	ldr	r3, [r7, #24]
 80079a2:	0a1b      	lsrs	r3, r3, #8
 80079a4:	f003 0301 	and.w	r3, r3, #1
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d00c      	beq.n	80079c6 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80079b0:	f043 0208 	orr.w	r2, r3, #8
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80079b8:	2300      	movs	r3, #0
 80079ba:	60bb      	str	r3, [r7, #8]
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	689b      	ldr	r3, [r3, #8]
 80079c2:	60bb      	str	r3, [r7, #8]
 80079c4:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d04f      	beq.n	8007a6e <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	685a      	ldr	r2, [r3, #4]
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80079dc:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	2201      	movs	r2, #1
 80079e2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80079e6:	69fb      	ldr	r3, [r7, #28]
 80079e8:	f003 0302 	and.w	r3, r3, #2
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d104      	bne.n	80079fa <HAL_SPI_IRQHandler+0x17e>
 80079f0:	69fb      	ldr	r3, [r7, #28]
 80079f2:	f003 0301 	and.w	r3, r3, #1
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d034      	beq.n	8007a64 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	685a      	ldr	r2, [r3, #4]
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	f022 0203 	bic.w	r2, r2, #3
 8007a08:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d011      	beq.n	8007a36 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a16:	4a18      	ldr	r2, [pc, #96]	; (8007a78 <HAL_SPI_IRQHandler+0x1fc>)
 8007a18:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a1e:	4618      	mov	r0, r3
 8007a20:	f7fb fdc3 	bl	80035aa <HAL_DMA_Abort_IT>
 8007a24:	4603      	mov	r3, r0
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d005      	beq.n	8007a36 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a2e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d016      	beq.n	8007a6c <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a42:	4a0d      	ldr	r2, [pc, #52]	; (8007a78 <HAL_SPI_IRQHandler+0x1fc>)
 8007a44:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	f7fb fdad 	bl	80035aa <HAL_DMA_Abort_IT>
 8007a50:	4603      	mov	r3, r0
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d00a      	beq.n	8007a6c <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a5a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8007a62:	e003      	b.n	8007a6c <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8007a64:	6878      	ldr	r0, [r7, #4]
 8007a66:	f000 f845 	bl	8007af4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8007a6a:	e000      	b.n	8007a6e <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8007a6c:	bf00      	nop
    return;
 8007a6e:	bf00      	nop
  }
}
 8007a70:	3720      	adds	r7, #32
 8007a72:	46bd      	mov	sp, r7
 8007a74:	bd80      	pop	{r7, pc}
 8007a76:	bf00      	nop
 8007a78:	08007d97 	.word	0x08007d97

08007a7c <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007a7c:	b480      	push	{r7}
 8007a7e:	b083      	sub	sp, #12
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8007a84:	bf00      	nop
 8007a86:	370c      	adds	r7, #12
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8e:	4770      	bx	lr

08007a90 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007a90:	b480      	push	{r7}
 8007a92:	b083      	sub	sp, #12
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8007a98:	bf00      	nop
 8007a9a:	370c      	adds	r7, #12
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa2:	4770      	bx	lr

08007aa4 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007aa4:	b480      	push	{r7}
 8007aa6:	b083      	sub	sp, #12
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8007aac:	bf00      	nop
 8007aae:	370c      	adds	r7, #12
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab6:	4770      	bx	lr

08007ab8 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007ab8:	b480      	push	{r7}
 8007aba:	b083      	sub	sp, #12
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8007ac0:	bf00      	nop
 8007ac2:	370c      	adds	r7, #12
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aca:	4770      	bx	lr

08007acc <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007acc:	b480      	push	{r7}
 8007ace:	b083      	sub	sp, #12
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8007ad4:	bf00      	nop
 8007ad6:	370c      	adds	r7, #12
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ade:	4770      	bx	lr

08007ae0 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007ae0:	b480      	push	{r7}
 8007ae2:	b083      	sub	sp, #12
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8007ae8:	bf00      	nop
 8007aea:	370c      	adds	r7, #12
 8007aec:	46bd      	mov	sp, r7
 8007aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af2:	4770      	bx	lr

08007af4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007af4:	b480      	push	{r7}
 8007af6:	b083      	sub	sp, #12
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007afc:	bf00      	nop
 8007afe:	370c      	adds	r7, #12
 8007b00:	46bd      	mov	sp, r7
 8007b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b06:	4770      	bx	lr

08007b08 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8007b08:	b480      	push	{r7}
 8007b0a:	b083      	sub	sp, #12
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007b16:	b2db      	uxtb	r3, r3
}
 8007b18:	4618      	mov	r0, r3
 8007b1a:	370c      	adds	r7, #12
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b22:	4770      	bx	lr

08007b24 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b086      	sub	sp, #24
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b30:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007b32:	f7fb fa59 	bl	8002fe8 <HAL_GetTick>
 8007b36:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	f003 0320 	and.w	r3, r3, #32
 8007b42:	2b20      	cmp	r3, #32
 8007b44:	d03b      	beq.n	8007bbe <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8007b46:	697b      	ldr	r3, [r7, #20]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	685a      	ldr	r2, [r3, #4]
 8007b4c:	697b      	ldr	r3, [r7, #20]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	f022 0220 	bic.w	r2, r2, #32
 8007b54:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8007b56:	697b      	ldr	r3, [r7, #20]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	685a      	ldr	r2, [r3, #4]
 8007b5c:	697b      	ldr	r3, [r7, #20]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	f022 0202 	bic.w	r2, r2, #2
 8007b64:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8007b66:	693a      	ldr	r2, [r7, #16]
 8007b68:	2164      	movs	r1, #100	; 0x64
 8007b6a:	6978      	ldr	r0, [r7, #20]
 8007b6c:	f000 fa9e 	bl	80080ac <SPI_EndRxTxTransaction>
 8007b70:	4603      	mov	r3, r0
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d005      	beq.n	8007b82 <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007b76:	697b      	ldr	r3, [r7, #20]
 8007b78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b7a:	f043 0220 	orr.w	r2, r3, #32
 8007b7e:	697b      	ldr	r3, [r7, #20]
 8007b80:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007b82:	697b      	ldr	r3, [r7, #20]
 8007b84:	689b      	ldr	r3, [r3, #8]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d10a      	bne.n	8007ba0 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	60fb      	str	r3, [r7, #12]
 8007b8e:	697b      	ldr	r3, [r7, #20]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	68db      	ldr	r3, [r3, #12]
 8007b94:	60fb      	str	r3, [r7, #12]
 8007b96:	697b      	ldr	r3, [r7, #20]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	689b      	ldr	r3, [r3, #8]
 8007b9c:	60fb      	str	r3, [r7, #12]
 8007b9e:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8007ba0:	697b      	ldr	r3, [r7, #20]
 8007ba2:	2200      	movs	r2, #0
 8007ba4:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8007ba6:	697b      	ldr	r3, [r7, #20]
 8007ba8:	2201      	movs	r2, #1
 8007baa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007bae:	697b      	ldr	r3, [r7, #20]
 8007bb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d003      	beq.n	8007bbe <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8007bb6:	6978      	ldr	r0, [r7, #20]
 8007bb8:	f7ff ff9c 	bl	8007af4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8007bbc:	e002      	b.n	8007bc4 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8007bbe:	6978      	ldr	r0, [r7, #20]
 8007bc0:	f7ff ff5c 	bl	8007a7c <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007bc4:	3718      	adds	r7, #24
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	bd80      	pop	{r7, pc}

08007bca <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007bca:	b580      	push	{r7, lr}
 8007bcc:	b084      	sub	sp, #16
 8007bce:	af00      	add	r7, sp, #0
 8007bd0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bd6:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007bd8:	f7fb fa06 	bl	8002fe8 <HAL_GetTick>
 8007bdc:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	f003 0320 	and.w	r3, r3, #32
 8007be8:	2b20      	cmp	r3, #32
 8007bea:	d03c      	beq.n	8007c66 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	685a      	ldr	r2, [r3, #4]
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	f022 0220 	bic.w	r2, r2, #32
 8007bfa:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	689b      	ldr	r3, [r3, #8]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d10d      	bne.n	8007c20 <SPI_DMAReceiveCplt+0x56>
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	685b      	ldr	r3, [r3, #4]
 8007c08:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007c0c:	d108      	bne.n	8007c20 <SPI_DMAReceiveCplt+0x56>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	685a      	ldr	r2, [r3, #4]
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	f022 0203 	bic.w	r2, r2, #3
 8007c1c:	605a      	str	r2, [r3, #4]
 8007c1e:	e007      	b.n	8007c30 <SPI_DMAReceiveCplt+0x66>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	685a      	ldr	r2, [r3, #4]
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	f022 0201 	bic.w	r2, r2, #1
 8007c2e:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8007c30:	68ba      	ldr	r2, [r7, #8]
 8007c32:	2164      	movs	r1, #100	; 0x64
 8007c34:	68f8      	ldr	r0, [r7, #12]
 8007c36:	f000 f9e1 	bl	8007ffc <SPI_EndRxTransaction>
 8007c3a:	4603      	mov	r3, r0
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d002      	beq.n	8007c46 <SPI_DMAReceiveCplt+0x7c>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	2220      	movs	r2, #32
 8007c44:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	2200      	movs	r2, #0
 8007c4a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	2201      	movs	r2, #1
 8007c52:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d003      	beq.n	8007c66 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8007c5e:	68f8      	ldr	r0, [r7, #12]
 8007c60:	f7ff ff48 	bl	8007af4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8007c64:	e002      	b.n	8007c6c <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8007c66:	68f8      	ldr	r0, [r7, #12]
 8007c68:	f7ff ff12 	bl	8007a90 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007c6c:	3710      	adds	r7, #16
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	bd80      	pop	{r7, pc}

08007c72 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007c72:	b580      	push	{r7, lr}
 8007c74:	b084      	sub	sp, #16
 8007c76:	af00      	add	r7, sp, #0
 8007c78:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c7e:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007c80:	f7fb f9b2 	bl	8002fe8 <HAL_GetTick>
 8007c84:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	f003 0320 	and.w	r3, r3, #32
 8007c90:	2b20      	cmp	r3, #32
 8007c92:	d030      	beq.n	8007cf6 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	685a      	ldr	r2, [r3, #4]
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	f022 0220 	bic.w	r2, r2, #32
 8007ca2:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8007ca4:	68ba      	ldr	r2, [r7, #8]
 8007ca6:	2164      	movs	r1, #100	; 0x64
 8007ca8:	68f8      	ldr	r0, [r7, #12]
 8007caa:	f000 f9ff 	bl	80080ac <SPI_EndRxTxTransaction>
 8007cae:	4603      	mov	r3, r0
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d005      	beq.n	8007cc0 <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007cb8:	f043 0220 	orr.w	r2, r3, #32
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	685a      	ldr	r2, [r3, #4]
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	f022 0203 	bic.w	r2, r2, #3
 8007cce:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	2200      	movs	r2, #0
 8007cda:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	2201      	movs	r2, #1
 8007ce2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d003      	beq.n	8007cf6 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8007cee:	68f8      	ldr	r0, [r7, #12]
 8007cf0:	f7ff ff00 	bl	8007af4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8007cf4:	e002      	b.n	8007cfc <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8007cf6:	68f8      	ldr	r0, [r7, #12]
 8007cf8:	f7ff fed4 	bl	8007aa4 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007cfc:	3710      	adds	r7, #16
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	bd80      	pop	{r7, pc}

08007d02 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007d02:	b580      	push	{r7, lr}
 8007d04:	b084      	sub	sp, #16
 8007d06:	af00      	add	r7, sp, #0
 8007d08:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d0e:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8007d10:	68f8      	ldr	r0, [r7, #12]
 8007d12:	f7ff fed1 	bl	8007ab8 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007d16:	bf00      	nop
 8007d18:	3710      	adds	r7, #16
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	bd80      	pop	{r7, pc}

08007d1e <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007d1e:	b580      	push	{r7, lr}
 8007d20:	b084      	sub	sp, #16
 8007d22:	af00      	add	r7, sp, #0
 8007d24:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d2a:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8007d2c:	68f8      	ldr	r0, [r7, #12]
 8007d2e:	f7ff fecd 	bl	8007acc <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007d32:	bf00      	nop
 8007d34:	3710      	adds	r7, #16
 8007d36:	46bd      	mov	sp, r7
 8007d38:	bd80      	pop	{r7, pc}

08007d3a <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007d3a:	b580      	push	{r7, lr}
 8007d3c:	b084      	sub	sp, #16
 8007d3e:	af00      	add	r7, sp, #0
 8007d40:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d46:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8007d48:	68f8      	ldr	r0, [r7, #12]
 8007d4a:	f7ff fec9 	bl	8007ae0 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007d4e:	bf00      	nop
 8007d50:	3710      	adds	r7, #16
 8007d52:	46bd      	mov	sp, r7
 8007d54:	bd80      	pop	{r7, pc}

08007d56 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8007d56:	b580      	push	{r7, lr}
 8007d58:	b084      	sub	sp, #16
 8007d5a:	af00      	add	r7, sp, #0
 8007d5c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d62:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	685a      	ldr	r2, [r3, #4]
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	f022 0203 	bic.w	r2, r2, #3
 8007d72:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d78:	f043 0210 	orr.w	r2, r3, #16
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	2201      	movs	r2, #1
 8007d84:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007d88:	68f8      	ldr	r0, [r7, #12]
 8007d8a:	f7ff feb3 	bl	8007af4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007d8e:	bf00      	nop
 8007d90:	3710      	adds	r7, #16
 8007d92:	46bd      	mov	sp, r7
 8007d94:	bd80      	pop	{r7, pc}

08007d96 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007d96:	b580      	push	{r7, lr}
 8007d98:	b084      	sub	sp, #16
 8007d9a:	af00      	add	r7, sp, #0
 8007d9c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007da2:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	2200      	movs	r2, #0
 8007da8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	2200      	movs	r2, #0
 8007db0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007db2:	68f8      	ldr	r0, [r7, #12]
 8007db4:	f7ff fe9e 	bl	8007af4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007db8:	bf00      	nop
 8007dba:	3710      	adds	r7, #16
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	bd80      	pop	{r7, pc}

08007dc0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b088      	sub	sp, #32
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	60f8      	str	r0, [r7, #12]
 8007dc8:	60b9      	str	r1, [r7, #8]
 8007dca:	603b      	str	r3, [r7, #0]
 8007dcc:	4613      	mov	r3, r2
 8007dce:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007dd0:	f7fb f90a 	bl	8002fe8 <HAL_GetTick>
 8007dd4:	4602      	mov	r2, r0
 8007dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dd8:	1a9b      	subs	r3, r3, r2
 8007dda:	683a      	ldr	r2, [r7, #0]
 8007ddc:	4413      	add	r3, r2
 8007dde:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007de0:	f7fb f902 	bl	8002fe8 <HAL_GetTick>
 8007de4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007de6:	4b39      	ldr	r3, [pc, #228]	; (8007ecc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	015b      	lsls	r3, r3, #5
 8007dec:	0d1b      	lsrs	r3, r3, #20
 8007dee:	69fa      	ldr	r2, [r7, #28]
 8007df0:	fb02 f303 	mul.w	r3, r2, r3
 8007df4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007df6:	e054      	b.n	8007ea2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007df8:	683b      	ldr	r3, [r7, #0]
 8007dfa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007dfe:	d050      	beq.n	8007ea2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007e00:	f7fb f8f2 	bl	8002fe8 <HAL_GetTick>
 8007e04:	4602      	mov	r2, r0
 8007e06:	69bb      	ldr	r3, [r7, #24]
 8007e08:	1ad3      	subs	r3, r2, r3
 8007e0a:	69fa      	ldr	r2, [r7, #28]
 8007e0c:	429a      	cmp	r2, r3
 8007e0e:	d902      	bls.n	8007e16 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007e10:	69fb      	ldr	r3, [r7, #28]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d13d      	bne.n	8007e92 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	685a      	ldr	r2, [r3, #4]
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007e24:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	685b      	ldr	r3, [r3, #4]
 8007e2a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007e2e:	d111      	bne.n	8007e54 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	689b      	ldr	r3, [r3, #8]
 8007e34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007e38:	d004      	beq.n	8007e44 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	689b      	ldr	r3, [r3, #8]
 8007e3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e42:	d107      	bne.n	8007e54 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	681a      	ldr	r2, [r3, #0]
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007e52:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e5c:	d10f      	bne.n	8007e7e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	681a      	ldr	r2, [r3, #0]
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007e6c:	601a      	str	r2, [r3, #0]
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	681a      	ldr	r2, [r3, #0]
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007e7c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	2201      	movs	r2, #1
 8007e82:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	2200      	movs	r2, #0
 8007e8a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8007e8e:	2303      	movs	r3, #3
 8007e90:	e017      	b.n	8007ec2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007e92:	697b      	ldr	r3, [r7, #20]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d101      	bne.n	8007e9c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007e98:	2300      	movs	r3, #0
 8007e9a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007e9c:	697b      	ldr	r3, [r7, #20]
 8007e9e:	3b01      	subs	r3, #1
 8007ea0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	689a      	ldr	r2, [r3, #8]
 8007ea8:	68bb      	ldr	r3, [r7, #8]
 8007eaa:	4013      	ands	r3, r2
 8007eac:	68ba      	ldr	r2, [r7, #8]
 8007eae:	429a      	cmp	r2, r3
 8007eb0:	bf0c      	ite	eq
 8007eb2:	2301      	moveq	r3, #1
 8007eb4:	2300      	movne	r3, #0
 8007eb6:	b2db      	uxtb	r3, r3
 8007eb8:	461a      	mov	r2, r3
 8007eba:	79fb      	ldrb	r3, [r7, #7]
 8007ebc:	429a      	cmp	r2, r3
 8007ebe:	d19b      	bne.n	8007df8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007ec0:	2300      	movs	r3, #0
}
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	3720      	adds	r7, #32
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	bd80      	pop	{r7, pc}
 8007eca:	bf00      	nop
 8007ecc:	20000008 	.word	0x20000008

08007ed0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007ed0:	b580      	push	{r7, lr}
 8007ed2:	b08a      	sub	sp, #40	; 0x28
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	60f8      	str	r0, [r7, #12]
 8007ed8:	60b9      	str	r1, [r7, #8]
 8007eda:	607a      	str	r2, [r7, #4]
 8007edc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8007ede:	2300      	movs	r3, #0
 8007ee0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007ee2:	f7fb f881 	bl	8002fe8 <HAL_GetTick>
 8007ee6:	4602      	mov	r2, r0
 8007ee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eea:	1a9b      	subs	r3, r3, r2
 8007eec:	683a      	ldr	r2, [r7, #0]
 8007eee:	4413      	add	r3, r2
 8007ef0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8007ef2:	f7fb f879 	bl	8002fe8 <HAL_GetTick>
 8007ef6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	330c      	adds	r3, #12
 8007efe:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007f00:	4b3d      	ldr	r3, [pc, #244]	; (8007ff8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8007f02:	681a      	ldr	r2, [r3, #0]
 8007f04:	4613      	mov	r3, r2
 8007f06:	009b      	lsls	r3, r3, #2
 8007f08:	4413      	add	r3, r2
 8007f0a:	00da      	lsls	r2, r3, #3
 8007f0c:	1ad3      	subs	r3, r2, r3
 8007f0e:	0d1b      	lsrs	r3, r3, #20
 8007f10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f12:	fb02 f303 	mul.w	r3, r2, r3
 8007f16:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007f18:	e060      	b.n	8007fdc <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007f1a:	68bb      	ldr	r3, [r7, #8]
 8007f1c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007f20:	d107      	bne.n	8007f32 <SPI_WaitFifoStateUntilTimeout+0x62>
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d104      	bne.n	8007f32 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007f28:	69fb      	ldr	r3, [r7, #28]
 8007f2a:	781b      	ldrb	r3, [r3, #0]
 8007f2c:	b2db      	uxtb	r3, r3
 8007f2e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007f30:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8007f32:	683b      	ldr	r3, [r7, #0]
 8007f34:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007f38:	d050      	beq.n	8007fdc <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007f3a:	f7fb f855 	bl	8002fe8 <HAL_GetTick>
 8007f3e:	4602      	mov	r2, r0
 8007f40:	6a3b      	ldr	r3, [r7, #32]
 8007f42:	1ad3      	subs	r3, r2, r3
 8007f44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f46:	429a      	cmp	r2, r3
 8007f48:	d902      	bls.n	8007f50 <SPI_WaitFifoStateUntilTimeout+0x80>
 8007f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d13d      	bne.n	8007fcc <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	685a      	ldr	r2, [r3, #4]
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007f5e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	685b      	ldr	r3, [r3, #4]
 8007f64:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007f68:	d111      	bne.n	8007f8e <SPI_WaitFifoStateUntilTimeout+0xbe>
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	689b      	ldr	r3, [r3, #8]
 8007f6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f72:	d004      	beq.n	8007f7e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	689b      	ldr	r3, [r3, #8]
 8007f78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f7c:	d107      	bne.n	8007f8e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	681a      	ldr	r2, [r3, #0]
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007f8c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f96:	d10f      	bne.n	8007fb8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	681a      	ldr	r2, [r3, #0]
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007fa6:	601a      	str	r2, [r3, #0]
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	681a      	ldr	r2, [r3, #0]
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007fb6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	2201      	movs	r2, #1
 8007fbc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8007fc8:	2303      	movs	r3, #3
 8007fca:	e010      	b.n	8007fee <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007fcc:	69bb      	ldr	r3, [r7, #24]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d101      	bne.n	8007fd6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8007fd6:	69bb      	ldr	r3, [r7, #24]
 8007fd8:	3b01      	subs	r3, #1
 8007fda:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	689a      	ldr	r2, [r3, #8]
 8007fe2:	68bb      	ldr	r3, [r7, #8]
 8007fe4:	4013      	ands	r3, r2
 8007fe6:	687a      	ldr	r2, [r7, #4]
 8007fe8:	429a      	cmp	r2, r3
 8007fea:	d196      	bne.n	8007f1a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8007fec:	2300      	movs	r3, #0
}
 8007fee:	4618      	mov	r0, r3
 8007ff0:	3728      	adds	r7, #40	; 0x28
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	bd80      	pop	{r7, pc}
 8007ff6:	bf00      	nop
 8007ff8:	20000008 	.word	0x20000008

08007ffc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	b086      	sub	sp, #24
 8008000:	af02      	add	r7, sp, #8
 8008002:	60f8      	str	r0, [r7, #12]
 8008004:	60b9      	str	r1, [r7, #8]
 8008006:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	685b      	ldr	r3, [r3, #4]
 800800c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008010:	d111      	bne.n	8008036 <SPI_EndRxTransaction+0x3a>
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	689b      	ldr	r3, [r3, #8]
 8008016:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800801a:	d004      	beq.n	8008026 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	689b      	ldr	r3, [r3, #8]
 8008020:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008024:	d107      	bne.n	8008036 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	681a      	ldr	r2, [r3, #0]
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008034:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	9300      	str	r3, [sp, #0]
 800803a:	68bb      	ldr	r3, [r7, #8]
 800803c:	2200      	movs	r2, #0
 800803e:	2180      	movs	r1, #128	; 0x80
 8008040:	68f8      	ldr	r0, [r7, #12]
 8008042:	f7ff febd 	bl	8007dc0 <SPI_WaitFlagStateUntilTimeout>
 8008046:	4603      	mov	r3, r0
 8008048:	2b00      	cmp	r3, #0
 800804a:	d007      	beq.n	800805c <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008050:	f043 0220 	orr.w	r2, r3, #32
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008058:	2303      	movs	r3, #3
 800805a:	e023      	b.n	80080a4 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	685b      	ldr	r3, [r3, #4]
 8008060:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008064:	d11d      	bne.n	80080a2 <SPI_EndRxTransaction+0xa6>
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	689b      	ldr	r3, [r3, #8]
 800806a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800806e:	d004      	beq.n	800807a <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	689b      	ldr	r3, [r3, #8]
 8008074:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008078:	d113      	bne.n	80080a2 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	9300      	str	r3, [sp, #0]
 800807e:	68bb      	ldr	r3, [r7, #8]
 8008080:	2200      	movs	r2, #0
 8008082:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8008086:	68f8      	ldr	r0, [r7, #12]
 8008088:	f7ff ff22 	bl	8007ed0 <SPI_WaitFifoStateUntilTimeout>
 800808c:	4603      	mov	r3, r0
 800808e:	2b00      	cmp	r3, #0
 8008090:	d007      	beq.n	80080a2 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008096:	f043 0220 	orr.w	r2, r3, #32
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800809e:	2303      	movs	r3, #3
 80080a0:	e000      	b.n	80080a4 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80080a2:	2300      	movs	r3, #0
}
 80080a4:	4618      	mov	r0, r3
 80080a6:	3710      	adds	r7, #16
 80080a8:	46bd      	mov	sp, r7
 80080aa:	bd80      	pop	{r7, pc}

080080ac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80080ac:	b580      	push	{r7, lr}
 80080ae:	b086      	sub	sp, #24
 80080b0:	af02      	add	r7, sp, #8
 80080b2:	60f8      	str	r0, [r7, #12]
 80080b4:	60b9      	str	r1, [r7, #8]
 80080b6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	9300      	str	r3, [sp, #0]
 80080bc:	68bb      	ldr	r3, [r7, #8]
 80080be:	2200      	movs	r2, #0
 80080c0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80080c4:	68f8      	ldr	r0, [r7, #12]
 80080c6:	f7ff ff03 	bl	8007ed0 <SPI_WaitFifoStateUntilTimeout>
 80080ca:	4603      	mov	r3, r0
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d007      	beq.n	80080e0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80080d4:	f043 0220 	orr.w	r2, r3, #32
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80080dc:	2303      	movs	r3, #3
 80080de:	e027      	b.n	8008130 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	9300      	str	r3, [sp, #0]
 80080e4:	68bb      	ldr	r3, [r7, #8]
 80080e6:	2200      	movs	r2, #0
 80080e8:	2180      	movs	r1, #128	; 0x80
 80080ea:	68f8      	ldr	r0, [r7, #12]
 80080ec:	f7ff fe68 	bl	8007dc0 <SPI_WaitFlagStateUntilTimeout>
 80080f0:	4603      	mov	r3, r0
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d007      	beq.n	8008106 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80080fa:	f043 0220 	orr.w	r2, r3, #32
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008102:	2303      	movs	r3, #3
 8008104:	e014      	b.n	8008130 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	9300      	str	r3, [sp, #0]
 800810a:	68bb      	ldr	r3, [r7, #8]
 800810c:	2200      	movs	r2, #0
 800810e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8008112:	68f8      	ldr	r0, [r7, #12]
 8008114:	f7ff fedc 	bl	8007ed0 <SPI_WaitFifoStateUntilTimeout>
 8008118:	4603      	mov	r3, r0
 800811a:	2b00      	cmp	r3, #0
 800811c:	d007      	beq.n	800812e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008122:	f043 0220 	orr.w	r2, r3, #32
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800812a:	2303      	movs	r3, #3
 800812c:	e000      	b.n	8008130 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800812e:	2300      	movs	r3, #0
}
 8008130:	4618      	mov	r0, r3
 8008132:	3710      	adds	r7, #16
 8008134:	46bd      	mov	sp, r7
 8008136:	bd80      	pop	{r7, pc}

08008138 <LL_RCC_GetUSARTClockSource>:
{
 8008138:	b480      	push	{r7}
 800813a:	b083      	sub	sp, #12
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8008140:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008144:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	4013      	ands	r3, r2
}
 800814c:	4618      	mov	r0, r3
 800814e:	370c      	adds	r7, #12
 8008150:	46bd      	mov	sp, r7
 8008152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008156:	4770      	bx	lr

08008158 <LL_RCC_GetLPUARTClockSource>:
{
 8008158:	b480      	push	{r7}
 800815a:	b083      	sub	sp, #12
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8008160:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008164:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	4013      	ands	r3, r2
}
 800816c:	4618      	mov	r0, r3
 800816e:	370c      	adds	r7, #12
 8008170:	46bd      	mov	sp, r7
 8008172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008176:	4770      	bx	lr

08008178 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008178:	b580      	push	{r7, lr}
 800817a:	b082      	sub	sp, #8
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	2b00      	cmp	r3, #0
 8008184:	d101      	bne.n	800818a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008186:	2301      	movs	r3, #1
 8008188:	e042      	b.n	8008210 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008190:	2b00      	cmp	r3, #0
 8008192:	d106      	bne.n	80081a2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	2200      	movs	r2, #0
 8008198:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800819c:	6878      	ldr	r0, [r7, #4]
 800819e:	f7fa fccb 	bl	8002b38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	2224      	movs	r2, #36	; 0x24
 80081a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	681a      	ldr	r2, [r3, #0]
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	f022 0201 	bic.w	r2, r2, #1
 80081b8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80081ba:	6878      	ldr	r0, [r7, #4]
 80081bc:	f000 f8ba 	bl	8008334 <UART_SetConfig>
 80081c0:	4603      	mov	r3, r0
 80081c2:	2b01      	cmp	r3, #1
 80081c4:	d101      	bne.n	80081ca <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80081c6:	2301      	movs	r3, #1
 80081c8:	e022      	b.n	8008210 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d002      	beq.n	80081d8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80081d2:	6878      	ldr	r0, [r7, #4]
 80081d4:	f000 fad6 	bl	8008784 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	685a      	ldr	r2, [r3, #4]
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80081e6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	689a      	ldr	r2, [r3, #8]
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80081f6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	681a      	ldr	r2, [r3, #0]
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	f042 0201 	orr.w	r2, r2, #1
 8008206:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008208:	6878      	ldr	r0, [r7, #4]
 800820a:	f000 fb5d 	bl	80088c8 <UART_CheckIdleState>
 800820e:	4603      	mov	r3, r0
}
 8008210:	4618      	mov	r0, r3
 8008212:	3708      	adds	r7, #8
 8008214:	46bd      	mov	sp, r7
 8008216:	bd80      	pop	{r7, pc}

08008218 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008218:	b580      	push	{r7, lr}
 800821a:	b08a      	sub	sp, #40	; 0x28
 800821c:	af02      	add	r7, sp, #8
 800821e:	60f8      	str	r0, [r7, #12]
 8008220:	60b9      	str	r1, [r7, #8]
 8008222:	603b      	str	r3, [r7, #0]
 8008224:	4613      	mov	r3, r2
 8008226:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800822e:	2b20      	cmp	r3, #32
 8008230:	d17b      	bne.n	800832a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8008232:	68bb      	ldr	r3, [r7, #8]
 8008234:	2b00      	cmp	r3, #0
 8008236:	d002      	beq.n	800823e <HAL_UART_Transmit+0x26>
 8008238:	88fb      	ldrh	r3, [r7, #6]
 800823a:	2b00      	cmp	r3, #0
 800823c:	d101      	bne.n	8008242 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800823e:	2301      	movs	r3, #1
 8008240:	e074      	b.n	800832c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	2200      	movs	r2, #0
 8008246:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	2221      	movs	r2, #33	; 0x21
 800824e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008252:	f7fa fec9 	bl	8002fe8 <HAL_GetTick>
 8008256:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	88fa      	ldrh	r2, [r7, #6]
 800825c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	88fa      	ldrh	r2, [r7, #6]
 8008264:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	689b      	ldr	r3, [r3, #8]
 800826c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008270:	d108      	bne.n	8008284 <HAL_UART_Transmit+0x6c>
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	691b      	ldr	r3, [r3, #16]
 8008276:	2b00      	cmp	r3, #0
 8008278:	d104      	bne.n	8008284 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800827a:	2300      	movs	r3, #0
 800827c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800827e:	68bb      	ldr	r3, [r7, #8]
 8008280:	61bb      	str	r3, [r7, #24]
 8008282:	e003      	b.n	800828c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008284:	68bb      	ldr	r3, [r7, #8]
 8008286:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008288:	2300      	movs	r3, #0
 800828a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800828c:	e030      	b.n	80082f0 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800828e:	683b      	ldr	r3, [r7, #0]
 8008290:	9300      	str	r3, [sp, #0]
 8008292:	697b      	ldr	r3, [r7, #20]
 8008294:	2200      	movs	r2, #0
 8008296:	2180      	movs	r1, #128	; 0x80
 8008298:	68f8      	ldr	r0, [r7, #12]
 800829a:	f000 fbbf 	bl	8008a1c <UART_WaitOnFlagUntilTimeout>
 800829e:	4603      	mov	r3, r0
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d005      	beq.n	80082b0 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	2220      	movs	r2, #32
 80082a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 80082ac:	2303      	movs	r3, #3
 80082ae:	e03d      	b.n	800832c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80082b0:	69fb      	ldr	r3, [r7, #28]
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d10b      	bne.n	80082ce <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80082b6:	69bb      	ldr	r3, [r7, #24]
 80082b8:	881b      	ldrh	r3, [r3, #0]
 80082ba:	461a      	mov	r2, r3
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80082c4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80082c6:	69bb      	ldr	r3, [r7, #24]
 80082c8:	3302      	adds	r3, #2
 80082ca:	61bb      	str	r3, [r7, #24]
 80082cc:	e007      	b.n	80082de <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80082ce:	69fb      	ldr	r3, [r7, #28]
 80082d0:	781a      	ldrb	r2, [r3, #0]
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80082d8:	69fb      	ldr	r3, [r7, #28]
 80082da:	3301      	adds	r3, #1
 80082dc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80082e4:	b29b      	uxth	r3, r3
 80082e6:	3b01      	subs	r3, #1
 80082e8:	b29a      	uxth	r2, r3
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80082f6:	b29b      	uxth	r3, r3
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d1c8      	bne.n	800828e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80082fc:	683b      	ldr	r3, [r7, #0]
 80082fe:	9300      	str	r3, [sp, #0]
 8008300:	697b      	ldr	r3, [r7, #20]
 8008302:	2200      	movs	r2, #0
 8008304:	2140      	movs	r1, #64	; 0x40
 8008306:	68f8      	ldr	r0, [r7, #12]
 8008308:	f000 fb88 	bl	8008a1c <UART_WaitOnFlagUntilTimeout>
 800830c:	4603      	mov	r3, r0
 800830e:	2b00      	cmp	r3, #0
 8008310:	d005      	beq.n	800831e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	2220      	movs	r2, #32
 8008316:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800831a:	2303      	movs	r3, #3
 800831c:	e006      	b.n	800832c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	2220      	movs	r2, #32
 8008322:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8008326:	2300      	movs	r3, #0
 8008328:	e000      	b.n	800832c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800832a:	2302      	movs	r3, #2
  }
}
 800832c:	4618      	mov	r0, r3
 800832e:	3720      	adds	r7, #32
 8008330:	46bd      	mov	sp, r7
 8008332:	bd80      	pop	{r7, pc}

08008334 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008334:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008338:	b08c      	sub	sp, #48	; 0x30
 800833a:	af00      	add	r7, sp, #0
 800833c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800833e:	2300      	movs	r3, #0
 8008340:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008344:	697b      	ldr	r3, [r7, #20]
 8008346:	689a      	ldr	r2, [r3, #8]
 8008348:	697b      	ldr	r3, [r7, #20]
 800834a:	691b      	ldr	r3, [r3, #16]
 800834c:	431a      	orrs	r2, r3
 800834e:	697b      	ldr	r3, [r7, #20]
 8008350:	695b      	ldr	r3, [r3, #20]
 8008352:	431a      	orrs	r2, r3
 8008354:	697b      	ldr	r3, [r7, #20]
 8008356:	69db      	ldr	r3, [r3, #28]
 8008358:	4313      	orrs	r3, r2
 800835a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800835c:	697b      	ldr	r3, [r7, #20]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	681a      	ldr	r2, [r3, #0]
 8008362:	4baf      	ldr	r3, [pc, #700]	; (8008620 <UART_SetConfig+0x2ec>)
 8008364:	4013      	ands	r3, r2
 8008366:	697a      	ldr	r2, [r7, #20]
 8008368:	6812      	ldr	r2, [r2, #0]
 800836a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800836c:	430b      	orrs	r3, r1
 800836e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008370:	697b      	ldr	r3, [r7, #20]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	685b      	ldr	r3, [r3, #4]
 8008376:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800837a:	697b      	ldr	r3, [r7, #20]
 800837c:	68da      	ldr	r2, [r3, #12]
 800837e:	697b      	ldr	r3, [r7, #20]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	430a      	orrs	r2, r1
 8008384:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008386:	697b      	ldr	r3, [r7, #20]
 8008388:	699b      	ldr	r3, [r3, #24]
 800838a:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800838c:	697b      	ldr	r3, [r7, #20]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	4aa4      	ldr	r2, [pc, #656]	; (8008624 <UART_SetConfig+0x2f0>)
 8008392:	4293      	cmp	r3, r2
 8008394:	d004      	beq.n	80083a0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008396:	697b      	ldr	r3, [r7, #20]
 8008398:	6a1b      	ldr	r3, [r3, #32]
 800839a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800839c:	4313      	orrs	r3, r2
 800839e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80083a0:	697b      	ldr	r3, [r7, #20]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	689b      	ldr	r3, [r3, #8]
 80083a6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80083aa:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80083ae:	697a      	ldr	r2, [r7, #20]
 80083b0:	6812      	ldr	r2, [r2, #0]
 80083b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80083b4:	430b      	orrs	r3, r1
 80083b6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80083b8:	697b      	ldr	r3, [r7, #20]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083be:	f023 010f 	bic.w	r1, r3, #15
 80083c2:	697b      	ldr	r3, [r7, #20]
 80083c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80083c6:	697b      	ldr	r3, [r7, #20]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	430a      	orrs	r2, r1
 80083cc:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80083ce:	697b      	ldr	r3, [r7, #20]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	4a95      	ldr	r2, [pc, #596]	; (8008628 <UART_SetConfig+0x2f4>)
 80083d4:	4293      	cmp	r3, r2
 80083d6:	d125      	bne.n	8008424 <UART_SetConfig+0xf0>
 80083d8:	2003      	movs	r0, #3
 80083da:	f7ff fead 	bl	8008138 <LL_RCC_GetUSARTClockSource>
 80083de:	4603      	mov	r3, r0
 80083e0:	2b03      	cmp	r3, #3
 80083e2:	d81b      	bhi.n	800841c <UART_SetConfig+0xe8>
 80083e4:	a201      	add	r2, pc, #4	; (adr r2, 80083ec <UART_SetConfig+0xb8>)
 80083e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083ea:	bf00      	nop
 80083ec:	080083fd 	.word	0x080083fd
 80083f0:	0800840d 	.word	0x0800840d
 80083f4:	08008405 	.word	0x08008405
 80083f8:	08008415 	.word	0x08008415
 80083fc:	2301      	movs	r3, #1
 80083fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008402:	e042      	b.n	800848a <UART_SetConfig+0x156>
 8008404:	2302      	movs	r3, #2
 8008406:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800840a:	e03e      	b.n	800848a <UART_SetConfig+0x156>
 800840c:	2304      	movs	r3, #4
 800840e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008412:	e03a      	b.n	800848a <UART_SetConfig+0x156>
 8008414:	2308      	movs	r3, #8
 8008416:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800841a:	e036      	b.n	800848a <UART_SetConfig+0x156>
 800841c:	2310      	movs	r3, #16
 800841e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008422:	e032      	b.n	800848a <UART_SetConfig+0x156>
 8008424:	697b      	ldr	r3, [r7, #20]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	4a7e      	ldr	r2, [pc, #504]	; (8008624 <UART_SetConfig+0x2f0>)
 800842a:	4293      	cmp	r3, r2
 800842c:	d12a      	bne.n	8008484 <UART_SetConfig+0x150>
 800842e:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8008432:	f7ff fe91 	bl	8008158 <LL_RCC_GetLPUARTClockSource>
 8008436:	4603      	mov	r3, r0
 8008438:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800843c:	d01a      	beq.n	8008474 <UART_SetConfig+0x140>
 800843e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008442:	d81b      	bhi.n	800847c <UART_SetConfig+0x148>
 8008444:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008448:	d00c      	beq.n	8008464 <UART_SetConfig+0x130>
 800844a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800844e:	d815      	bhi.n	800847c <UART_SetConfig+0x148>
 8008450:	2b00      	cmp	r3, #0
 8008452:	d003      	beq.n	800845c <UART_SetConfig+0x128>
 8008454:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008458:	d008      	beq.n	800846c <UART_SetConfig+0x138>
 800845a:	e00f      	b.n	800847c <UART_SetConfig+0x148>
 800845c:	2300      	movs	r3, #0
 800845e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008462:	e012      	b.n	800848a <UART_SetConfig+0x156>
 8008464:	2302      	movs	r3, #2
 8008466:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800846a:	e00e      	b.n	800848a <UART_SetConfig+0x156>
 800846c:	2304      	movs	r3, #4
 800846e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008472:	e00a      	b.n	800848a <UART_SetConfig+0x156>
 8008474:	2308      	movs	r3, #8
 8008476:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800847a:	e006      	b.n	800848a <UART_SetConfig+0x156>
 800847c:	2310      	movs	r3, #16
 800847e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008482:	e002      	b.n	800848a <UART_SetConfig+0x156>
 8008484:	2310      	movs	r3, #16
 8008486:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800848a:	697b      	ldr	r3, [r7, #20]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	4a65      	ldr	r2, [pc, #404]	; (8008624 <UART_SetConfig+0x2f0>)
 8008490:	4293      	cmp	r3, r2
 8008492:	f040 8097 	bne.w	80085c4 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008496:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800849a:	2b08      	cmp	r3, #8
 800849c:	d823      	bhi.n	80084e6 <UART_SetConfig+0x1b2>
 800849e:	a201      	add	r2, pc, #4	; (adr r2, 80084a4 <UART_SetConfig+0x170>)
 80084a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084a4:	080084c9 	.word	0x080084c9
 80084a8:	080084e7 	.word	0x080084e7
 80084ac:	080084d1 	.word	0x080084d1
 80084b0:	080084e7 	.word	0x080084e7
 80084b4:	080084d7 	.word	0x080084d7
 80084b8:	080084e7 	.word	0x080084e7
 80084bc:	080084e7 	.word	0x080084e7
 80084c0:	080084e7 	.word	0x080084e7
 80084c4:	080084df 	.word	0x080084df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80084c8:	f7fd fed0 	bl	800626c <HAL_RCC_GetPCLK1Freq>
 80084cc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80084ce:	e010      	b.n	80084f2 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80084d0:	4b56      	ldr	r3, [pc, #344]	; (800862c <UART_SetConfig+0x2f8>)
 80084d2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80084d4:	e00d      	b.n	80084f2 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80084d6:	f7fd fe49 	bl	800616c <HAL_RCC_GetSysClockFreq>
 80084da:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80084dc:	e009      	b.n	80084f2 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80084de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80084e2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80084e4:	e005      	b.n	80084f2 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 80084e6:	2300      	movs	r3, #0
 80084e8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80084ea:	2301      	movs	r3, #1
 80084ec:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80084f0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80084f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	f000 812b 	beq.w	8008750 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80084fa:	697b      	ldr	r3, [r7, #20]
 80084fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084fe:	4a4c      	ldr	r2, [pc, #304]	; (8008630 <UART_SetConfig+0x2fc>)
 8008500:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008504:	461a      	mov	r2, r3
 8008506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008508:	fbb3 f3f2 	udiv	r3, r3, r2
 800850c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800850e:	697b      	ldr	r3, [r7, #20]
 8008510:	685a      	ldr	r2, [r3, #4]
 8008512:	4613      	mov	r3, r2
 8008514:	005b      	lsls	r3, r3, #1
 8008516:	4413      	add	r3, r2
 8008518:	69ba      	ldr	r2, [r7, #24]
 800851a:	429a      	cmp	r2, r3
 800851c:	d305      	bcc.n	800852a <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800851e:	697b      	ldr	r3, [r7, #20]
 8008520:	685b      	ldr	r3, [r3, #4]
 8008522:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008524:	69ba      	ldr	r2, [r7, #24]
 8008526:	429a      	cmp	r2, r3
 8008528:	d903      	bls.n	8008532 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 800852a:	2301      	movs	r3, #1
 800852c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008530:	e10e      	b.n	8008750 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008534:	2200      	movs	r2, #0
 8008536:	60bb      	str	r3, [r7, #8]
 8008538:	60fa      	str	r2, [r7, #12]
 800853a:	697b      	ldr	r3, [r7, #20]
 800853c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800853e:	4a3c      	ldr	r2, [pc, #240]	; (8008630 <UART_SetConfig+0x2fc>)
 8008540:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008544:	b29b      	uxth	r3, r3
 8008546:	2200      	movs	r2, #0
 8008548:	603b      	str	r3, [r7, #0]
 800854a:	607a      	str	r2, [r7, #4]
 800854c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008550:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008554:	f7f7 fe6c 	bl	8000230 <__aeabi_uldivmod>
 8008558:	4602      	mov	r2, r0
 800855a:	460b      	mov	r3, r1
 800855c:	4610      	mov	r0, r2
 800855e:	4619      	mov	r1, r3
 8008560:	f04f 0200 	mov.w	r2, #0
 8008564:	f04f 0300 	mov.w	r3, #0
 8008568:	020b      	lsls	r3, r1, #8
 800856a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800856e:	0202      	lsls	r2, r0, #8
 8008570:	6979      	ldr	r1, [r7, #20]
 8008572:	6849      	ldr	r1, [r1, #4]
 8008574:	0849      	lsrs	r1, r1, #1
 8008576:	2000      	movs	r0, #0
 8008578:	460c      	mov	r4, r1
 800857a:	4605      	mov	r5, r0
 800857c:	eb12 0804 	adds.w	r8, r2, r4
 8008580:	eb43 0905 	adc.w	r9, r3, r5
 8008584:	697b      	ldr	r3, [r7, #20]
 8008586:	685b      	ldr	r3, [r3, #4]
 8008588:	2200      	movs	r2, #0
 800858a:	469a      	mov	sl, r3
 800858c:	4693      	mov	fp, r2
 800858e:	4652      	mov	r2, sl
 8008590:	465b      	mov	r3, fp
 8008592:	4640      	mov	r0, r8
 8008594:	4649      	mov	r1, r9
 8008596:	f7f7 fe4b 	bl	8000230 <__aeabi_uldivmod>
 800859a:	4602      	mov	r2, r0
 800859c:	460b      	mov	r3, r1
 800859e:	4613      	mov	r3, r2
 80085a0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80085a2:	6a3b      	ldr	r3, [r7, #32]
 80085a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80085a8:	d308      	bcc.n	80085bc <UART_SetConfig+0x288>
 80085aa:	6a3b      	ldr	r3, [r7, #32]
 80085ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80085b0:	d204      	bcs.n	80085bc <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 80085b2:	697b      	ldr	r3, [r7, #20]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	6a3a      	ldr	r2, [r7, #32]
 80085b8:	60da      	str	r2, [r3, #12]
 80085ba:	e0c9      	b.n	8008750 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 80085bc:	2301      	movs	r3, #1
 80085be:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80085c2:	e0c5      	b.n	8008750 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80085c4:	697b      	ldr	r3, [r7, #20]
 80085c6:	69db      	ldr	r3, [r3, #28]
 80085c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80085cc:	d16d      	bne.n	80086aa <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 80085ce:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80085d2:	3b01      	subs	r3, #1
 80085d4:	2b07      	cmp	r3, #7
 80085d6:	d82d      	bhi.n	8008634 <UART_SetConfig+0x300>
 80085d8:	a201      	add	r2, pc, #4	; (adr r2, 80085e0 <UART_SetConfig+0x2ac>)
 80085da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085de:	bf00      	nop
 80085e0:	08008601 	.word	0x08008601
 80085e4:	08008609 	.word	0x08008609
 80085e8:	08008635 	.word	0x08008635
 80085ec:	0800860f 	.word	0x0800860f
 80085f0:	08008635 	.word	0x08008635
 80085f4:	08008635 	.word	0x08008635
 80085f8:	08008635 	.word	0x08008635
 80085fc:	08008617 	.word	0x08008617
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008600:	f7fd fe4a 	bl	8006298 <HAL_RCC_GetPCLK2Freq>
 8008604:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008606:	e01b      	b.n	8008640 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008608:	4b08      	ldr	r3, [pc, #32]	; (800862c <UART_SetConfig+0x2f8>)
 800860a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800860c:	e018      	b.n	8008640 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800860e:	f7fd fdad 	bl	800616c <HAL_RCC_GetSysClockFreq>
 8008612:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008614:	e014      	b.n	8008640 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008616:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800861a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800861c:	e010      	b.n	8008640 <UART_SetConfig+0x30c>
 800861e:	bf00      	nop
 8008620:	cfff69f3 	.word	0xcfff69f3
 8008624:	40008000 	.word	0x40008000
 8008628:	40013800 	.word	0x40013800
 800862c:	00f42400 	.word	0x00f42400
 8008630:	0800d7b0 	.word	0x0800d7b0
      default:
        pclk = 0U;
 8008634:	2300      	movs	r3, #0
 8008636:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008638:	2301      	movs	r3, #1
 800863a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800863e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008642:	2b00      	cmp	r3, #0
 8008644:	f000 8084 	beq.w	8008750 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008648:	697b      	ldr	r3, [r7, #20]
 800864a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800864c:	4a4b      	ldr	r2, [pc, #300]	; (800877c <UART_SetConfig+0x448>)
 800864e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008652:	461a      	mov	r2, r3
 8008654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008656:	fbb3 f3f2 	udiv	r3, r3, r2
 800865a:	005a      	lsls	r2, r3, #1
 800865c:	697b      	ldr	r3, [r7, #20]
 800865e:	685b      	ldr	r3, [r3, #4]
 8008660:	085b      	lsrs	r3, r3, #1
 8008662:	441a      	add	r2, r3
 8008664:	697b      	ldr	r3, [r7, #20]
 8008666:	685b      	ldr	r3, [r3, #4]
 8008668:	fbb2 f3f3 	udiv	r3, r2, r3
 800866c:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800866e:	6a3b      	ldr	r3, [r7, #32]
 8008670:	2b0f      	cmp	r3, #15
 8008672:	d916      	bls.n	80086a2 <UART_SetConfig+0x36e>
 8008674:	6a3b      	ldr	r3, [r7, #32]
 8008676:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800867a:	d212      	bcs.n	80086a2 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800867c:	6a3b      	ldr	r3, [r7, #32]
 800867e:	b29b      	uxth	r3, r3
 8008680:	f023 030f 	bic.w	r3, r3, #15
 8008684:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008686:	6a3b      	ldr	r3, [r7, #32]
 8008688:	085b      	lsrs	r3, r3, #1
 800868a:	b29b      	uxth	r3, r3
 800868c:	f003 0307 	and.w	r3, r3, #7
 8008690:	b29a      	uxth	r2, r3
 8008692:	8bfb      	ldrh	r3, [r7, #30]
 8008694:	4313      	orrs	r3, r2
 8008696:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008698:	697b      	ldr	r3, [r7, #20]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	8bfa      	ldrh	r2, [r7, #30]
 800869e:	60da      	str	r2, [r3, #12]
 80086a0:	e056      	b.n	8008750 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 80086a2:	2301      	movs	r3, #1
 80086a4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80086a8:	e052      	b.n	8008750 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80086aa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80086ae:	3b01      	subs	r3, #1
 80086b0:	2b07      	cmp	r3, #7
 80086b2:	d822      	bhi.n	80086fa <UART_SetConfig+0x3c6>
 80086b4:	a201      	add	r2, pc, #4	; (adr r2, 80086bc <UART_SetConfig+0x388>)
 80086b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086ba:	bf00      	nop
 80086bc:	080086dd 	.word	0x080086dd
 80086c0:	080086e5 	.word	0x080086e5
 80086c4:	080086fb 	.word	0x080086fb
 80086c8:	080086eb 	.word	0x080086eb
 80086cc:	080086fb 	.word	0x080086fb
 80086d0:	080086fb 	.word	0x080086fb
 80086d4:	080086fb 	.word	0x080086fb
 80086d8:	080086f3 	.word	0x080086f3
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80086dc:	f7fd fddc 	bl	8006298 <HAL_RCC_GetPCLK2Freq>
 80086e0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80086e2:	e010      	b.n	8008706 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80086e4:	4b26      	ldr	r3, [pc, #152]	; (8008780 <UART_SetConfig+0x44c>)
 80086e6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80086e8:	e00d      	b.n	8008706 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80086ea:	f7fd fd3f 	bl	800616c <HAL_RCC_GetSysClockFreq>
 80086ee:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80086f0:	e009      	b.n	8008706 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80086f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80086f6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80086f8:	e005      	b.n	8008706 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 80086fa:	2300      	movs	r3, #0
 80086fc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80086fe:	2301      	movs	r3, #1
 8008700:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008704:	bf00      	nop
    }

    if (pclk != 0U)
 8008706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008708:	2b00      	cmp	r3, #0
 800870a:	d021      	beq.n	8008750 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800870c:	697b      	ldr	r3, [r7, #20]
 800870e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008710:	4a1a      	ldr	r2, [pc, #104]	; (800877c <UART_SetConfig+0x448>)
 8008712:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008716:	461a      	mov	r2, r3
 8008718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800871a:	fbb3 f2f2 	udiv	r2, r3, r2
 800871e:	697b      	ldr	r3, [r7, #20]
 8008720:	685b      	ldr	r3, [r3, #4]
 8008722:	085b      	lsrs	r3, r3, #1
 8008724:	441a      	add	r2, r3
 8008726:	697b      	ldr	r3, [r7, #20]
 8008728:	685b      	ldr	r3, [r3, #4]
 800872a:	fbb2 f3f3 	udiv	r3, r2, r3
 800872e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008730:	6a3b      	ldr	r3, [r7, #32]
 8008732:	2b0f      	cmp	r3, #15
 8008734:	d909      	bls.n	800874a <UART_SetConfig+0x416>
 8008736:	6a3b      	ldr	r3, [r7, #32]
 8008738:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800873c:	d205      	bcs.n	800874a <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800873e:	6a3b      	ldr	r3, [r7, #32]
 8008740:	b29a      	uxth	r2, r3
 8008742:	697b      	ldr	r3, [r7, #20]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	60da      	str	r2, [r3, #12]
 8008748:	e002      	b.n	8008750 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800874a:	2301      	movs	r3, #1
 800874c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008750:	697b      	ldr	r3, [r7, #20]
 8008752:	2201      	movs	r2, #1
 8008754:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008758:	697b      	ldr	r3, [r7, #20]
 800875a:	2201      	movs	r2, #1
 800875c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008760:	697b      	ldr	r3, [r7, #20]
 8008762:	2200      	movs	r2, #0
 8008764:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8008766:	697b      	ldr	r3, [r7, #20]
 8008768:	2200      	movs	r2, #0
 800876a:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800876c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8008770:	4618      	mov	r0, r3
 8008772:	3730      	adds	r7, #48	; 0x30
 8008774:	46bd      	mov	sp, r7
 8008776:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800877a:	bf00      	nop
 800877c:	0800d7b0 	.word	0x0800d7b0
 8008780:	00f42400 	.word	0x00f42400

08008784 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008784:	b480      	push	{r7}
 8008786:	b083      	sub	sp, #12
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008790:	f003 0301 	and.w	r3, r3, #1
 8008794:	2b00      	cmp	r3, #0
 8008796:	d00a      	beq.n	80087ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	685b      	ldr	r3, [r3, #4]
 800879e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	430a      	orrs	r2, r1
 80087ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087b2:	f003 0302 	and.w	r3, r3, #2
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d00a      	beq.n	80087d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	685b      	ldr	r3, [r3, #4]
 80087c0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	430a      	orrs	r2, r1
 80087ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087d4:	f003 0304 	and.w	r3, r3, #4
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d00a      	beq.n	80087f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	685b      	ldr	r3, [r3, #4]
 80087e2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	430a      	orrs	r2, r1
 80087f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087f6:	f003 0308 	and.w	r3, r3, #8
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d00a      	beq.n	8008814 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	685b      	ldr	r3, [r3, #4]
 8008804:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	430a      	orrs	r2, r1
 8008812:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008818:	f003 0310 	and.w	r3, r3, #16
 800881c:	2b00      	cmp	r3, #0
 800881e:	d00a      	beq.n	8008836 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	689b      	ldr	r3, [r3, #8]
 8008826:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	430a      	orrs	r2, r1
 8008834:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800883a:	f003 0320 	and.w	r3, r3, #32
 800883e:	2b00      	cmp	r3, #0
 8008840:	d00a      	beq.n	8008858 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	689b      	ldr	r3, [r3, #8]
 8008848:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	430a      	orrs	r2, r1
 8008856:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800885c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008860:	2b00      	cmp	r3, #0
 8008862:	d01a      	beq.n	800889a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	685b      	ldr	r3, [r3, #4]
 800886a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	430a      	orrs	r2, r1
 8008878:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800887e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008882:	d10a      	bne.n	800889a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	685b      	ldr	r3, [r3, #4]
 800888a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	430a      	orrs	r2, r1
 8008898:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800889e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d00a      	beq.n	80088bc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	685b      	ldr	r3, [r3, #4]
 80088ac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	430a      	orrs	r2, r1
 80088ba:	605a      	str	r2, [r3, #4]
  }
}
 80088bc:	bf00      	nop
 80088be:	370c      	adds	r7, #12
 80088c0:	46bd      	mov	sp, r7
 80088c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c6:	4770      	bx	lr

080088c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80088c8:	b580      	push	{r7, lr}
 80088ca:	b098      	sub	sp, #96	; 0x60
 80088cc:	af02      	add	r7, sp, #8
 80088ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	2200      	movs	r2, #0
 80088d4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80088d8:	f7fa fb86 	bl	8002fe8 <HAL_GetTick>
 80088dc:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	f003 0308 	and.w	r3, r3, #8
 80088e8:	2b08      	cmp	r3, #8
 80088ea:	d12f      	bne.n	800894c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80088ec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80088f0:	9300      	str	r3, [sp, #0]
 80088f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80088f4:	2200      	movs	r2, #0
 80088f6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80088fa:	6878      	ldr	r0, [r7, #4]
 80088fc:	f000 f88e 	bl	8008a1c <UART_WaitOnFlagUntilTimeout>
 8008900:	4603      	mov	r3, r0
 8008902:	2b00      	cmp	r3, #0
 8008904:	d022      	beq.n	800894c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800890c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800890e:	e853 3f00 	ldrex	r3, [r3]
 8008912:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008914:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008916:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800891a:	653b      	str	r3, [r7, #80]	; 0x50
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	461a      	mov	r2, r3
 8008922:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008924:	647b      	str	r3, [r7, #68]	; 0x44
 8008926:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008928:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800892a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800892c:	e841 2300 	strex	r3, r2, [r1]
 8008930:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008932:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008934:	2b00      	cmp	r3, #0
 8008936:	d1e6      	bne.n	8008906 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	2220      	movs	r2, #32
 800893c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	2200      	movs	r2, #0
 8008944:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008948:	2303      	movs	r3, #3
 800894a:	e063      	b.n	8008a14 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	f003 0304 	and.w	r3, r3, #4
 8008956:	2b04      	cmp	r3, #4
 8008958:	d149      	bne.n	80089ee <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800895a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800895e:	9300      	str	r3, [sp, #0]
 8008960:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008962:	2200      	movs	r2, #0
 8008964:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008968:	6878      	ldr	r0, [r7, #4]
 800896a:	f000 f857 	bl	8008a1c <UART_WaitOnFlagUntilTimeout>
 800896e:	4603      	mov	r3, r0
 8008970:	2b00      	cmp	r3, #0
 8008972:	d03c      	beq.n	80089ee <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800897a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800897c:	e853 3f00 	ldrex	r3, [r3]
 8008980:	623b      	str	r3, [r7, #32]
   return(result);
 8008982:	6a3b      	ldr	r3, [r7, #32]
 8008984:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008988:	64fb      	str	r3, [r7, #76]	; 0x4c
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	461a      	mov	r2, r3
 8008990:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008992:	633b      	str	r3, [r7, #48]	; 0x30
 8008994:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008996:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008998:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800899a:	e841 2300 	strex	r3, r2, [r1]
 800899e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80089a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d1e6      	bne.n	8008974 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	3308      	adds	r3, #8
 80089ac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089ae:	693b      	ldr	r3, [r7, #16]
 80089b0:	e853 3f00 	ldrex	r3, [r3]
 80089b4:	60fb      	str	r3, [r7, #12]
   return(result);
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	f023 0301 	bic.w	r3, r3, #1
 80089bc:	64bb      	str	r3, [r7, #72]	; 0x48
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	3308      	adds	r3, #8
 80089c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80089c6:	61fa      	str	r2, [r7, #28]
 80089c8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089ca:	69b9      	ldr	r1, [r7, #24]
 80089cc:	69fa      	ldr	r2, [r7, #28]
 80089ce:	e841 2300 	strex	r3, r2, [r1]
 80089d2:	617b      	str	r3, [r7, #20]
   return(result);
 80089d4:	697b      	ldr	r3, [r7, #20]
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d1e5      	bne.n	80089a6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	2220      	movs	r2, #32
 80089de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	2200      	movs	r2, #0
 80089e6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80089ea:	2303      	movs	r3, #3
 80089ec:	e012      	b.n	8008a14 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	2220      	movs	r2, #32
 80089f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	2220      	movs	r2, #32
 80089fa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	2200      	movs	r2, #0
 8008a02:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	2200      	movs	r2, #0
 8008a08:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	2200      	movs	r2, #0
 8008a0e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008a12:	2300      	movs	r3, #0
}
 8008a14:	4618      	mov	r0, r3
 8008a16:	3758      	adds	r7, #88	; 0x58
 8008a18:	46bd      	mov	sp, r7
 8008a1a:	bd80      	pop	{r7, pc}

08008a1c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008a1c:	b580      	push	{r7, lr}
 8008a1e:	b084      	sub	sp, #16
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	60f8      	str	r0, [r7, #12]
 8008a24:	60b9      	str	r1, [r7, #8]
 8008a26:	603b      	str	r3, [r7, #0]
 8008a28:	4613      	mov	r3, r2
 8008a2a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008a2c:	e049      	b.n	8008ac2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008a2e:	69bb      	ldr	r3, [r7, #24]
 8008a30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008a34:	d045      	beq.n	8008ac2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a36:	f7fa fad7 	bl	8002fe8 <HAL_GetTick>
 8008a3a:	4602      	mov	r2, r0
 8008a3c:	683b      	ldr	r3, [r7, #0]
 8008a3e:	1ad3      	subs	r3, r2, r3
 8008a40:	69ba      	ldr	r2, [r7, #24]
 8008a42:	429a      	cmp	r2, r3
 8008a44:	d302      	bcc.n	8008a4c <UART_WaitOnFlagUntilTimeout+0x30>
 8008a46:	69bb      	ldr	r3, [r7, #24]
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d101      	bne.n	8008a50 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008a4c:	2303      	movs	r3, #3
 8008a4e:	e048      	b.n	8008ae2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	f003 0304 	and.w	r3, r3, #4
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d031      	beq.n	8008ac2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	69db      	ldr	r3, [r3, #28]
 8008a64:	f003 0308 	and.w	r3, r3, #8
 8008a68:	2b08      	cmp	r3, #8
 8008a6a:	d110      	bne.n	8008a8e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	2208      	movs	r2, #8
 8008a72:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8008a74:	68f8      	ldr	r0, [r7, #12]
 8008a76:	f000 f838 	bl	8008aea <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	2208      	movs	r2, #8
 8008a7e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	2200      	movs	r2, #0
 8008a86:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8008a8a:	2301      	movs	r3, #1
 8008a8c:	e029      	b.n	8008ae2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	69db      	ldr	r3, [r3, #28]
 8008a94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008a98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008a9c:	d111      	bne.n	8008ac2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008aa6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008aa8:	68f8      	ldr	r0, [r7, #12]
 8008aaa:	f000 f81e 	bl	8008aea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	2220      	movs	r2, #32
 8008ab2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	2200      	movs	r2, #0
 8008aba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8008abe:	2303      	movs	r3, #3
 8008ac0:	e00f      	b.n	8008ae2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	69da      	ldr	r2, [r3, #28]
 8008ac8:	68bb      	ldr	r3, [r7, #8]
 8008aca:	4013      	ands	r3, r2
 8008acc:	68ba      	ldr	r2, [r7, #8]
 8008ace:	429a      	cmp	r2, r3
 8008ad0:	bf0c      	ite	eq
 8008ad2:	2301      	moveq	r3, #1
 8008ad4:	2300      	movne	r3, #0
 8008ad6:	b2db      	uxtb	r3, r3
 8008ad8:	461a      	mov	r2, r3
 8008ada:	79fb      	ldrb	r3, [r7, #7]
 8008adc:	429a      	cmp	r2, r3
 8008ade:	d0a6      	beq.n	8008a2e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008ae0:	2300      	movs	r3, #0
}
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	3710      	adds	r7, #16
 8008ae6:	46bd      	mov	sp, r7
 8008ae8:	bd80      	pop	{r7, pc}

08008aea <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008aea:	b480      	push	{r7}
 8008aec:	b095      	sub	sp, #84	; 0x54
 8008aee:	af00      	add	r7, sp, #0
 8008af0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008af8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008afa:	e853 3f00 	ldrex	r3, [r3]
 8008afe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008b00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b02:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008b06:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	461a      	mov	r2, r3
 8008b0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b10:	643b      	str	r3, [r7, #64]	; 0x40
 8008b12:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b14:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008b16:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008b18:	e841 2300 	strex	r3, r2, [r1]
 8008b1c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008b1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d1e6      	bne.n	8008af2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	3308      	adds	r3, #8
 8008b2a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b2c:	6a3b      	ldr	r3, [r7, #32]
 8008b2e:	e853 3f00 	ldrex	r3, [r3]
 8008b32:	61fb      	str	r3, [r7, #28]
   return(result);
 8008b34:	69fb      	ldr	r3, [r7, #28]
 8008b36:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008b3a:	f023 0301 	bic.w	r3, r3, #1
 8008b3e:	64bb      	str	r3, [r7, #72]	; 0x48
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	3308      	adds	r3, #8
 8008b46:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008b48:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008b4a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b4c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008b4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008b50:	e841 2300 	strex	r3, r2, [r1]
 8008b54:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d1e3      	bne.n	8008b24 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b60:	2b01      	cmp	r3, #1
 8008b62:	d118      	bne.n	8008b96 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	e853 3f00 	ldrex	r3, [r3]
 8008b70:	60bb      	str	r3, [r7, #8]
   return(result);
 8008b72:	68bb      	ldr	r3, [r7, #8]
 8008b74:	f023 0310 	bic.w	r3, r3, #16
 8008b78:	647b      	str	r3, [r7, #68]	; 0x44
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	461a      	mov	r2, r3
 8008b80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b82:	61bb      	str	r3, [r7, #24]
 8008b84:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b86:	6979      	ldr	r1, [r7, #20]
 8008b88:	69ba      	ldr	r2, [r7, #24]
 8008b8a:	e841 2300 	strex	r3, r2, [r1]
 8008b8e:	613b      	str	r3, [r7, #16]
   return(result);
 8008b90:	693b      	ldr	r3, [r7, #16]
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d1e6      	bne.n	8008b64 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	2220      	movs	r2, #32
 8008b9a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	2200      	movs	r2, #0
 8008ba2:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	2200      	movs	r2, #0
 8008ba8:	675a      	str	r2, [r3, #116]	; 0x74
}
 8008baa:	bf00      	nop
 8008bac:	3754      	adds	r7, #84	; 0x54
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb4:	4770      	bx	lr

08008bb6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008bb6:	b480      	push	{r7}
 8008bb8:	b085      	sub	sp, #20
 8008bba:	af00      	add	r7, sp, #0
 8008bbc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008bc4:	2b01      	cmp	r3, #1
 8008bc6:	d101      	bne.n	8008bcc <HAL_UARTEx_DisableFifoMode+0x16>
 8008bc8:	2302      	movs	r3, #2
 8008bca:	e027      	b.n	8008c1c <HAL_UARTEx_DisableFifoMode+0x66>
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	2201      	movs	r2, #1
 8008bd0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	2224      	movs	r2, #36	; 0x24
 8008bd8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	681a      	ldr	r2, [r3, #0]
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	f022 0201 	bic.w	r2, r2, #1
 8008bf2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008bfa:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	2200      	movs	r2, #0
 8008c00:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	68fa      	ldr	r2, [r7, #12]
 8008c08:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	2220      	movs	r2, #32
 8008c0e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	2200      	movs	r2, #0
 8008c16:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008c1a:	2300      	movs	r3, #0
}
 8008c1c:	4618      	mov	r0, r3
 8008c1e:	3714      	adds	r7, #20
 8008c20:	46bd      	mov	sp, r7
 8008c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c26:	4770      	bx	lr

08008c28 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	b084      	sub	sp, #16
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
 8008c30:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008c38:	2b01      	cmp	r3, #1
 8008c3a:	d101      	bne.n	8008c40 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008c3c:	2302      	movs	r3, #2
 8008c3e:	e02d      	b.n	8008c9c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	2201      	movs	r2, #1
 8008c44:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	2224      	movs	r2, #36	; 0x24
 8008c4c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	681a      	ldr	r2, [r3, #0]
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	f022 0201 	bic.w	r2, r2, #1
 8008c66:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	689b      	ldr	r3, [r3, #8]
 8008c6e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	683a      	ldr	r2, [r7, #0]
 8008c78:	430a      	orrs	r2, r1
 8008c7a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008c7c:	6878      	ldr	r0, [r7, #4]
 8008c7e:	f000 f84f 	bl	8008d20 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	68fa      	ldr	r2, [r7, #12]
 8008c88:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	2220      	movs	r2, #32
 8008c8e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	2200      	movs	r2, #0
 8008c96:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008c9a:	2300      	movs	r3, #0
}
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	3710      	adds	r7, #16
 8008ca0:	46bd      	mov	sp, r7
 8008ca2:	bd80      	pop	{r7, pc}

08008ca4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	b084      	sub	sp, #16
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	6078      	str	r0, [r7, #4]
 8008cac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008cb4:	2b01      	cmp	r3, #1
 8008cb6:	d101      	bne.n	8008cbc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008cb8:	2302      	movs	r3, #2
 8008cba:	e02d      	b.n	8008d18 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	2201      	movs	r2, #1
 8008cc0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	2224      	movs	r2, #36	; 0x24
 8008cc8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	681a      	ldr	r2, [r3, #0]
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	f022 0201 	bic.w	r2, r2, #1
 8008ce2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	689b      	ldr	r3, [r3, #8]
 8008cea:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	683a      	ldr	r2, [r7, #0]
 8008cf4:	430a      	orrs	r2, r1
 8008cf6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008cf8:	6878      	ldr	r0, [r7, #4]
 8008cfa:	f000 f811 	bl	8008d20 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	68fa      	ldr	r2, [r7, #12]
 8008d04:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	2220      	movs	r2, #32
 8008d0a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	2200      	movs	r2, #0
 8008d12:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008d16:	2300      	movs	r3, #0
}
 8008d18:	4618      	mov	r0, r3
 8008d1a:	3710      	adds	r7, #16
 8008d1c:	46bd      	mov	sp, r7
 8008d1e:	bd80      	pop	{r7, pc}

08008d20 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008d20:	b480      	push	{r7}
 8008d22:	b085      	sub	sp, #20
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d108      	bne.n	8008d42 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	2201      	movs	r2, #1
 8008d34:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	2201      	movs	r2, #1
 8008d3c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008d40:	e031      	b.n	8008da6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008d42:	2308      	movs	r3, #8
 8008d44:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008d46:	2308      	movs	r3, #8
 8008d48:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	689b      	ldr	r3, [r3, #8]
 8008d50:	0e5b      	lsrs	r3, r3, #25
 8008d52:	b2db      	uxtb	r3, r3
 8008d54:	f003 0307 	and.w	r3, r3, #7
 8008d58:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	689b      	ldr	r3, [r3, #8]
 8008d60:	0f5b      	lsrs	r3, r3, #29
 8008d62:	b2db      	uxtb	r3, r3
 8008d64:	f003 0307 	and.w	r3, r3, #7
 8008d68:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008d6a:	7bbb      	ldrb	r3, [r7, #14]
 8008d6c:	7b3a      	ldrb	r2, [r7, #12]
 8008d6e:	4911      	ldr	r1, [pc, #68]	; (8008db4 <UARTEx_SetNbDataToProcess+0x94>)
 8008d70:	5c8a      	ldrb	r2, [r1, r2]
 8008d72:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008d76:	7b3a      	ldrb	r2, [r7, #12]
 8008d78:	490f      	ldr	r1, [pc, #60]	; (8008db8 <UARTEx_SetNbDataToProcess+0x98>)
 8008d7a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008d7c:	fb93 f3f2 	sdiv	r3, r3, r2
 8008d80:	b29a      	uxth	r2, r3
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008d88:	7bfb      	ldrb	r3, [r7, #15]
 8008d8a:	7b7a      	ldrb	r2, [r7, #13]
 8008d8c:	4909      	ldr	r1, [pc, #36]	; (8008db4 <UARTEx_SetNbDataToProcess+0x94>)
 8008d8e:	5c8a      	ldrb	r2, [r1, r2]
 8008d90:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008d94:	7b7a      	ldrb	r2, [r7, #13]
 8008d96:	4908      	ldr	r1, [pc, #32]	; (8008db8 <UARTEx_SetNbDataToProcess+0x98>)
 8008d98:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008d9a:	fb93 f3f2 	sdiv	r3, r3, r2
 8008d9e:	b29a      	uxth	r2, r3
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008da6:	bf00      	nop
 8008da8:	3714      	adds	r7, #20
 8008daa:	46bd      	mov	sp, r7
 8008dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db0:	4770      	bx	lr
 8008db2:	bf00      	nop
 8008db4:	0800d7c8 	.word	0x0800d7c8
 8008db8:	0800d7d0 	.word	0x0800d7d0

08008dbc <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 8008dbc:	b580      	push	{r7, lr}
 8008dbe:	b088      	sub	sp, #32
 8008dc0:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008dc6:	f107 0308 	add.w	r3, r7, #8
 8008dca:	2218      	movs	r2, #24
 8008dcc:	2100      	movs	r1, #0
 8008dce:	4618      	mov	r0, r3
 8008dd0:	f001 f8d8 	bl	8009f84 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008dd4:	233f      	movs	r3, #63	; 0x3f
 8008dd6:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 8008dd8:	2381      	movs	r3, #129	; 0x81
 8008dda:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8008ddc:	1dfb      	adds	r3, r7, #7
 8008dde:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8008de0:	2301      	movs	r3, #1
 8008de2:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008de4:	f107 0308 	add.w	r3, r7, #8
 8008de8:	2100      	movs	r1, #0
 8008dea:	4618      	mov	r0, r3
 8008dec:	f001 fb54 	bl	800a498 <hci_send_req>
 8008df0:	4603      	mov	r3, r0
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	da01      	bge.n	8008dfa <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 8008df6:	23ff      	movs	r3, #255	; 0xff
 8008df8:	e000      	b.n	8008dfc <aci_gap_set_non_discoverable+0x40>
  return status;
 8008dfa:	79fb      	ldrb	r3, [r7, #7]
}
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	3720      	adds	r7, #32
 8008e00:	46bd      	mov	sp, r7
 8008e02:	bd80      	pop	{r7, pc}

08008e04 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Slave_Conn_Interval_Min,
                                     uint16_t Slave_Conn_Interval_Max )
{
 8008e04:	b5b0      	push	{r4, r5, r7, lr}
 8008e06:	b0ce      	sub	sp, #312	; 0x138
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	4605      	mov	r5, r0
 8008e0c:	460c      	mov	r4, r1
 8008e0e:	4610      	mov	r0, r2
 8008e10:	4619      	mov	r1, r3
 8008e12:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008e16:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8008e1a:	462a      	mov	r2, r5
 8008e1c:	701a      	strb	r2, [r3, #0]
 8008e1e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008e22:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8008e26:	4622      	mov	r2, r4
 8008e28:	801a      	strh	r2, [r3, #0]
 8008e2a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008e2e:	f5a3 739b 	sub.w	r3, r3, #310	; 0x136
 8008e32:	4602      	mov	r2, r0
 8008e34:	801a      	strh	r2, [r3, #0]
 8008e36:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008e3a:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8008e3e:	460a      	mov	r2, r1
 8008e40:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 8008e42:	f107 0310 	add.w	r3, r7, #16
 8008e46:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 8008e4a:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8008e4e:	3308      	adds	r3, #8
 8008e50:	f107 0210 	add.w	r2, r7, #16
 8008e54:	4413      	add	r3, r2
 8008e56:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 8008e5a:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8008e5e:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8008e62:	4413      	add	r3, r2
 8008e64:	3309      	adds	r3, #9
 8008e66:	f107 0210 	add.w	r2, r7, #16
 8008e6a:	4413      	add	r3, r2
 8008e6c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008e70:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008e74:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8008e78:	2200      	movs	r2, #0
 8008e7a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008e7c:	2300      	movs	r3, #0
 8008e7e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Type = Advertising_Type;
 8008e82:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008e86:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8008e8a:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 8008e8e:	7812      	ldrb	r2, [r2, #0]
 8008e90:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008e92:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008e96:	3301      	adds	r3, #1
 8008e98:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 8008e9c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008ea0:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8008ea4:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 8008ea8:	8812      	ldrh	r2, [r2, #0]
 8008eaa:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 8008eae:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008eb2:	3302      	adds	r3, #2
 8008eb4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 8008eb8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008ebc:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8008ec0:	f5a2 729b 	sub.w	r2, r2, #310	; 0x136
 8008ec4:	8812      	ldrh	r2, [r2, #0]
 8008ec6:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 8008eca:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008ece:	3302      	adds	r3, #2
 8008ed0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 8008ed4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008ed8:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8008edc:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8008ee0:	7812      	ldrb	r2, [r2, #0]
 8008ee2:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8008ee4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008ee8:	3301      	adds	r3, #1
 8008eea:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 8008eee:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008ef2:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8008ef6:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8008ef8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008efc:	3301      	adds	r3, #1
 8008efe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 8008f02:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008f06:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8008f0a:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 8008f0c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008f10:	3301      	adds	r3, #1
 8008f12:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 8008f16:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008f1a:	3308      	adds	r3, #8
 8008f1c:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8008f20:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 8008f24:	4618      	mov	r0, r3
 8008f26:	f001 f81d 	bl	8009f64 <Osal_MemCpy>
    index_input += Local_Name_Length;
 8008f2a:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8008f2e:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8008f32:	4413      	add	r3, r2
 8008f34:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 8008f38:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008f3c:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8008f40:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8008f42:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008f46:	3301      	adds	r3, #1
 8008f48:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 8008f4c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008f50:	3301      	adds	r3, #1
 8008f52:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8008f56:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 8008f5a:	4618      	mov	r0, r3
 8008f5c:	f001 f802 	bl	8009f64 <Osal_MemCpy>
    index_input += Service_Uuid_length;
 8008f60:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8008f64:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8008f68:	4413      	add	r3, r2
 8008f6a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Min = Slave_Conn_Interval_Min;
 8008f6e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f72:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 8008f76:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8008f78:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008f7c:	3302      	adds	r3, #2
 8008f7e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Max = Slave_Conn_Interval_Max;
 8008f82:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f86:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 8008f8a:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 8008f8c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008f90:	3302      	adds	r3, #2
 8008f92:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008f96:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008f9a:	2218      	movs	r2, #24
 8008f9c:	2100      	movs	r1, #0
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	f000 fff0 	bl	8009f84 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008fa4:	233f      	movs	r3, #63	; 0x3f
 8008fa6:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 8008faa:	2383      	movs	r3, #131	; 0x83
 8008fac:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008fb0:	f107 0310 	add.w	r3, r7, #16
 8008fb4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008fb8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008fbc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008fc0:	f107 030f 	add.w	r3, r7, #15
 8008fc4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008fc8:	2301      	movs	r3, #1
 8008fca:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008fce:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008fd2:	2100      	movs	r1, #0
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	f001 fa5f 	bl	800a498 <hci_send_req>
 8008fda:	4603      	mov	r3, r0
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	da01      	bge.n	8008fe4 <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 8008fe0:	23ff      	movs	r3, #255	; 0xff
 8008fe2:	e004      	b.n	8008fee <aci_gap_set_discoverable+0x1ea>
  return status;
 8008fe4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008fe8:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8008fec:	781b      	ldrb	r3, [r3, #0]
}
 8008fee:	4618      	mov	r0, r3
 8008ff0:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	bdb0      	pop	{r4, r5, r7, pc}

08008ff8 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 8008ff8:	b580      	push	{r7, lr}
 8008ffa:	b0cc      	sub	sp, #304	; 0x130
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	4602      	mov	r2, r0
 8009000:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009004:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8009008:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 800900a:	f107 0310 	add.w	r3, r7, #16
 800900e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8009012:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009016:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800901a:	2200      	movs	r2, #0
 800901c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800901e:	2300      	movs	r3, #0
 8009020:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->IO_Capability = IO_Capability;
 8009024:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009028:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800902c:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8009030:	7812      	ldrb	r2, [r2, #0]
 8009032:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8009034:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009038:	3301      	adds	r3, #1
 800903a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800903e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009042:	2218      	movs	r2, #24
 8009044:	2100      	movs	r1, #0
 8009046:	4618      	mov	r0, r3
 8009048:	f000 ff9c 	bl	8009f84 <Osal_MemSet>
  rq.ogf = 0x3f;
 800904c:	233f      	movs	r3, #63	; 0x3f
 800904e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x085;
 8009052:	2385      	movs	r3, #133	; 0x85
 8009054:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8009058:	f107 0310 	add.w	r3, r7, #16
 800905c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8009060:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009064:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8009068:	f107 030f 	add.w	r3, r7, #15
 800906c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8009070:	2301      	movs	r3, #1
 8009072:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009076:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800907a:	2100      	movs	r1, #0
 800907c:	4618      	mov	r0, r3
 800907e:	f001 fa0b 	bl	800a498 <hci_send_req>
 8009082:	4603      	mov	r3, r0
 8009084:	2b00      	cmp	r3, #0
 8009086:	da01      	bge.n	800908c <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 8009088:	23ff      	movs	r3, #255	; 0xff
 800908a:	e004      	b.n	8009096 <aci_gap_set_io_capability+0x9e>
  return status;
 800908c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009090:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009094:	781b      	ldrb	r3, [r3, #0]
}
 8009096:	4618      	mov	r0, r3
 8009098:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800909c:	46bd      	mov	sp, r7
 800909e:	bd80      	pop	{r7, pc}

080090a0 <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 80090a0:	b5b0      	push	{r4, r5, r7, lr}
 80090a2:	b0cc      	sub	sp, #304	; 0x130
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	4605      	mov	r5, r0
 80090a8:	460c      	mov	r4, r1
 80090aa:	4610      	mov	r0, r2
 80090ac:	4619      	mov	r1, r3
 80090ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80090b2:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80090b6:	462a      	mov	r2, r5
 80090b8:	701a      	strb	r2, [r3, #0]
 80090ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80090be:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80090c2:	4622      	mov	r2, r4
 80090c4:	701a      	strb	r2, [r3, #0]
 80090c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80090ca:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 80090ce:	4602      	mov	r2, r0
 80090d0:	701a      	strb	r2, [r3, #0]
 80090d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80090d6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80090da:	460a      	mov	r2, r1
 80090dc:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 80090de:	f107 0310 	add.w	r3, r7, #16
 80090e2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80090e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80090ea:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80090ee:	2200      	movs	r2, #0
 80090f0:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80090f2:	2300      	movs	r3, #0
 80090f4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 80090f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80090fc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009100:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8009104:	7812      	ldrb	r2, [r2, #0]
 8009106:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8009108:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800910c:	3301      	adds	r3, #1
 800910e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->MITM_Mode = MITM_Mode;
 8009112:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009116:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800911a:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800911e:	7812      	ldrb	r2, [r2, #0]
 8009120:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8009122:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009126:	3301      	adds	r3, #1
 8009128:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->SC_Support = SC_Support;
 800912c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009130:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009134:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8009138:	7812      	ldrb	r2, [r2, #0]
 800913a:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800913c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009140:	3301      	adds	r3, #1
 8009142:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 8009146:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800914a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800914e:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8009152:	7812      	ldrb	r2, [r2, #0]
 8009154:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 8009156:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800915a:	3301      	adds	r3, #1
 800915c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 8009160:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009164:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 8009168:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800916a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800916e:	3301      	adds	r3, #1
 8009170:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 8009174:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009178:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 800917c:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800917e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009182:	3301      	adds	r3, #1
 8009184:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 8009188:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800918c:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8009190:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8009192:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009196:	3301      	adds	r3, #1
 8009198:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 800919c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80091a0:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80091a4:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 80091a8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80091ac:	3304      	adds	r3, #4
 80091ae:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 80091b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80091b6:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 80091ba:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 80091bc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80091c0:	3301      	adds	r3, #1
 80091c2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80091c6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80091ca:	2218      	movs	r2, #24
 80091cc:	2100      	movs	r1, #0
 80091ce:	4618      	mov	r0, r3
 80091d0:	f000 fed8 	bl	8009f84 <Osal_MemSet>
  rq.ogf = 0x3f;
 80091d4:	233f      	movs	r3, #63	; 0x3f
 80091d6:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 80091da:	2386      	movs	r3, #134	; 0x86
 80091dc:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80091e0:	f107 0310 	add.w	r3, r7, #16
 80091e4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80091e8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80091ec:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80091f0:	f107 030f 	add.w	r3, r7, #15
 80091f4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80091f8:	2301      	movs	r3, #1
 80091fa:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80091fe:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009202:	2100      	movs	r1, #0
 8009204:	4618      	mov	r0, r3
 8009206:	f001 f947 	bl	800a498 <hci_send_req>
 800920a:	4603      	mov	r3, r0
 800920c:	2b00      	cmp	r3, #0
 800920e:	da01      	bge.n	8009214 <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 8009210:	23ff      	movs	r3, #255	; 0xff
 8009212:	e004      	b.n	800921e <aci_gap_set_authentication_requirement+0x17e>
  return status;
 8009214:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009218:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800921c:	781b      	ldrb	r3, [r3, #0]
}
 800921e:	4618      	mov	r0, r3
 8009220:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8009224:	46bd      	mov	sp, r7
 8009226:	bdb0      	pop	{r4, r5, r7, pc}

08009228 <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 8009228:	b580      	push	{r7, lr}
 800922a:	b0cc      	sub	sp, #304	; 0x130
 800922c:	af00      	add	r7, sp, #0
 800922e:	4602      	mov	r2, r0
 8009230:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009234:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009238:	6019      	str	r1, [r3, #0]
 800923a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800923e:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8009242:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 8009244:	f107 0310 	add.w	r3, r7, #16
 8009248:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800924c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009250:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009254:	2200      	movs	r2, #0
 8009256:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009258:	2300      	movs	r3, #0
 800925a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 800925e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009262:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009266:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800926a:	8812      	ldrh	r2, [r2, #0]
 800926c:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800926e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009272:	3302      	adds	r3, #2
 8009274:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Pass_Key = Pass_Key;
 8009278:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800927c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009280:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 8009284:	6812      	ldr	r2, [r2, #0]
 8009286:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 800928a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800928e:	3304      	adds	r3, #4
 8009290:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009294:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009298:	2218      	movs	r2, #24
 800929a:	2100      	movs	r1, #0
 800929c:	4618      	mov	r0, r3
 800929e:	f000 fe71 	bl	8009f84 <Osal_MemSet>
  rq.ogf = 0x3f;
 80092a2:	233f      	movs	r3, #63	; 0x3f
 80092a4:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x088;
 80092a8:	2388      	movs	r3, #136	; 0x88
 80092aa:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80092ae:	f107 0310 	add.w	r3, r7, #16
 80092b2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80092b6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80092ba:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80092be:	f107 030f 	add.w	r3, r7, #15
 80092c2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80092c6:	2301      	movs	r3, #1
 80092c8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80092cc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80092d0:	2100      	movs	r1, #0
 80092d2:	4618      	mov	r0, r3
 80092d4:	f001 f8e0 	bl	800a498 <hci_send_req>
 80092d8:	4603      	mov	r3, r0
 80092da:	2b00      	cmp	r3, #0
 80092dc:	da01      	bge.n	80092e2 <aci_gap_pass_key_resp+0xba>
    return BLE_STATUS_TIMEOUT;
 80092de:	23ff      	movs	r3, #255	; 0xff
 80092e0:	e004      	b.n	80092ec <aci_gap_pass_key_resp+0xc4>
  return status;
 80092e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80092e6:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80092ea:	781b      	ldrb	r3, [r3, #0]
}
 80092ec:	4618      	mov	r0, r3
 80092ee:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80092f2:	46bd      	mov	sp, r7
 80092f4:	bd80      	pop	{r7, pc}

080092f6 <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 80092f6:	b590      	push	{r4, r7, lr}
 80092f8:	b0cd      	sub	sp, #308	; 0x134
 80092fa:	af00      	add	r7, sp, #0
 80092fc:	4604      	mov	r4, r0
 80092fe:	4608      	mov	r0, r1
 8009300:	4611      	mov	r1, r2
 8009302:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009306:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 800930a:	6013      	str	r3, [r2, #0]
 800930c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009310:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8009314:	4622      	mov	r2, r4
 8009316:	701a      	strb	r2, [r3, #0]
 8009318:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800931c:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8009320:	4602      	mov	r2, r0
 8009322:	701a      	strb	r2, [r3, #0]
 8009324:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009328:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 800932c:	460a      	mov	r2, r1
 800932e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 8009330:	f107 0310 	add.w	r3, r7, #16
 8009334:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8009338:	f107 0308 	add.w	r3, r7, #8
 800933c:	2207      	movs	r2, #7
 800933e:	2100      	movs	r1, #0
 8009340:	4618      	mov	r0, r3
 8009342:	f000 fe1f 	bl	8009f84 <Osal_MemSet>
  int index_input = 0;
 8009346:	2300      	movs	r3, #0
 8009348:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = Role;
 800934c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009350:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009354:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8009358:	7812      	ldrb	r2, [r2, #0]
 800935a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800935c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009360:	3301      	adds	r3, #1
 8009362:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = privacy_enabled;
 8009366:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800936a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800936e:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8009372:	7812      	ldrb	r2, [r2, #0]
 8009374:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8009376:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800937a:	3301      	adds	r3, #1
 800937c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = device_name_char_len;
 8009380:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009384:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009388:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 800938c:	7812      	ldrb	r2, [r2, #0]
 800938e:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8009390:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009394:	3301      	adds	r3, #1
 8009396:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800939a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800939e:	2218      	movs	r2, #24
 80093a0:	2100      	movs	r1, #0
 80093a2:	4618      	mov	r0, r3
 80093a4:	f000 fdee 	bl	8009f84 <Osal_MemSet>
  rq.ogf = 0x3f;
 80093a8:	233f      	movs	r3, #63	; 0x3f
 80093aa:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 80093ae:	238a      	movs	r3, #138	; 0x8a
 80093b0:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80093b4:	f107 0310 	add.w	r3, r7, #16
 80093b8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80093bc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80093c0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 80093c4:	f107 0308 	add.w	r3, r7, #8
 80093c8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 80093cc:	2307      	movs	r3, #7
 80093ce:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80093d2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80093d6:	2100      	movs	r1, #0
 80093d8:	4618      	mov	r0, r3
 80093da:	f001 f85d 	bl	800a498 <hci_send_req>
 80093de:	4603      	mov	r3, r0
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	da01      	bge.n	80093e8 <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 80093e4:	23ff      	movs	r3, #255	; 0xff
 80093e6:	e02e      	b.n	8009446 <aci_gap_init+0x150>
  if ( resp.Status )
 80093e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80093ec:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80093f0:	781b      	ldrb	r3, [r3, #0]
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d005      	beq.n	8009402 <aci_gap_init+0x10c>
    return resp.Status;
 80093f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80093fa:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80093fe:	781b      	ldrb	r3, [r3, #0]
 8009400:	e021      	b.n	8009446 <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 8009402:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009406:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800940a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800940e:	b29a      	uxth	r2, r3
 8009410:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009414:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 800941c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009420:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8009424:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8009428:	b29a      	uxth	r2, r3
 800942a:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800942e:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 8009430:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009434:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8009438:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800943c:	b29a      	uxth	r2, r3
 800943e:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8009442:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8009444:	2300      	movs	r3, #0
}
 8009446:	4618      	mov	r0, r3
 8009448:	f507 779a 	add.w	r7, r7, #308	; 0x134
 800944c:	46bd      	mov	sp, r7
 800944e:	bd90      	pop	{r4, r7, pc}

08009450 <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 8009450:	b580      	push	{r7, lr}
 8009452:	b0cc      	sub	sp, #304	; 0x130
 8009454:	af00      	add	r7, sp, #0
 8009456:	4602      	mov	r2, r0
 8009458:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800945c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009460:	6019      	str	r1, [r3, #0]
 8009462:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009466:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800946a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 800946c:	f107 0310 	add.w	r3, r7, #16
 8009470:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8009474:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009478:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800947c:	2200      	movs	r2, #0
 800947e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009480:	2300      	movs	r3, #0
 8009482:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->AdvDataLen = AdvDataLen;
 8009486:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800948a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800948e:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8009492:	7812      	ldrb	r2, [r2, #0]
 8009494:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8009496:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800949a:	3301      	adds	r3, #1
 800949c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 80094a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80094a4:	1c58      	adds	r0, r3, #1
 80094a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80094aa:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80094ae:	781a      	ldrb	r2, [r3, #0]
 80094b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80094b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80094b8:	6819      	ldr	r1, [r3, #0]
 80094ba:	f000 fd53 	bl	8009f64 <Osal_MemCpy>
  index_input += AdvDataLen;
 80094be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80094c2:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80094c6:	781b      	ldrb	r3, [r3, #0]
 80094c8:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80094cc:	4413      	add	r3, r2
 80094ce:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80094d2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80094d6:	2218      	movs	r2, #24
 80094d8:	2100      	movs	r1, #0
 80094da:	4618      	mov	r0, r3
 80094dc:	f000 fd52 	bl	8009f84 <Osal_MemSet>
  rq.ogf = 0x3f;
 80094e0:	233f      	movs	r3, #63	; 0x3f
 80094e2:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08e;
 80094e6:	238e      	movs	r3, #142	; 0x8e
 80094e8:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80094ec:	f107 0310 	add.w	r3, r7, #16
 80094f0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80094f4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80094f8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80094fc:	f107 030f 	add.w	r3, r7, #15
 8009500:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8009504:	2301      	movs	r3, #1
 8009506:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800950a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800950e:	2100      	movs	r1, #0
 8009510:	4618      	mov	r0, r3
 8009512:	f000 ffc1 	bl	800a498 <hci_send_req>
 8009516:	4603      	mov	r3, r0
 8009518:	2b00      	cmp	r3, #0
 800951a:	da01      	bge.n	8009520 <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 800951c:	23ff      	movs	r3, #255	; 0xff
 800951e:	e004      	b.n	800952a <aci_gap_update_adv_data+0xda>
  return status;
 8009520:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009524:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009528:	781b      	ldrb	r3, [r3, #0]
}
 800952a:	4618      	mov	r0, r3
 800952c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8009530:	46bd      	mov	sp, r7
 8009532:	bd80      	pop	{r7, pc}

08009534 <aci_gap_configure_whitelist>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_whitelist( void )
{
 8009534:	b580      	push	{r7, lr}
 8009536:	b088      	sub	sp, #32
 8009538:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800953a:	2300      	movs	r3, #0
 800953c:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800953e:	f107 0308 	add.w	r3, r7, #8
 8009542:	2218      	movs	r2, #24
 8009544:	2100      	movs	r1, #0
 8009546:	4618      	mov	r0, r3
 8009548:	f000 fd1c 	bl	8009f84 <Osal_MemSet>
  rq.ogf = 0x3f;
 800954c:	233f      	movs	r3, #63	; 0x3f
 800954e:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 8009550:	2392      	movs	r3, #146	; 0x92
 8009552:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8009554:	1dfb      	adds	r3, r7, #7
 8009556:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8009558:	2301      	movs	r3, #1
 800955a:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800955c:	f107 0308 	add.w	r3, r7, #8
 8009560:	2100      	movs	r1, #0
 8009562:	4618      	mov	r0, r3
 8009564:	f000 ff98 	bl	800a498 <hci_send_req>
 8009568:	4603      	mov	r3, r0
 800956a:	2b00      	cmp	r3, #0
 800956c:	da01      	bge.n	8009572 <aci_gap_configure_whitelist+0x3e>
    return BLE_STATUS_TIMEOUT;
 800956e:	23ff      	movs	r3, #255	; 0xff
 8009570:	e000      	b.n	8009574 <aci_gap_configure_whitelist+0x40>
  return status;
 8009572:	79fb      	ldrb	r3, [r7, #7]
}
 8009574:	4618      	mov	r0, r3
 8009576:	3720      	adds	r7, #32
 8009578:	46bd      	mov	sp, r7
 800957a:	bd80      	pop	{r7, pc}

0800957c <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 800957c:	b580      	push	{r7, lr}
 800957e:	b0cc      	sub	sp, #304	; 0x130
 8009580:	af00      	add	r7, sp, #0
 8009582:	4602      	mov	r2, r0
 8009584:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009588:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800958c:	801a      	strh	r2, [r3, #0]
 800958e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009592:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8009596:	460a      	mov	r2, r1
 8009598:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 800959a:	f107 0310 	add.w	r3, r7, #16
 800959e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80095a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80095a6:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80095aa:	2200      	movs	r2, #0
 80095ac:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80095ae:	2300      	movs	r3, #0
 80095b0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 80095b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80095b8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80095bc:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80095c0:	8812      	ldrh	r2, [r2, #0]
 80095c2:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80095c4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80095c8:	3302      	adds	r3, #2
 80095ca:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 80095ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80095d2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80095d6:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 80095da:	7812      	ldrb	r2, [r2, #0]
 80095dc:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80095de:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80095e2:	3301      	adds	r3, #1
 80095e4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80095e8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80095ec:	2218      	movs	r2, #24
 80095ee:	2100      	movs	r1, #0
 80095f0:	4618      	mov	r0, r3
 80095f2:	f000 fcc7 	bl	8009f84 <Osal_MemSet>
  rq.ogf = 0x3f;
 80095f6:	233f      	movs	r3, #63	; 0x3f
 80095f8:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x0a5;
 80095fc:	23a5      	movs	r3, #165	; 0xa5
 80095fe:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8009602:	f107 0310 	add.w	r3, r7, #16
 8009606:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800960a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800960e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8009612:	f107 030f 	add.w	r3, r7, #15
 8009616:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800961a:	2301      	movs	r3, #1
 800961c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009620:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009624:	2100      	movs	r1, #0
 8009626:	4618      	mov	r0, r3
 8009628:	f000 ff36 	bl	800a498 <hci_send_req>
 800962c:	4603      	mov	r3, r0
 800962e:	2b00      	cmp	r3, #0
 8009630:	da01      	bge.n	8009636 <aci_gap_numeric_comparison_value_confirm_yesno+0xba>
    return BLE_STATUS_TIMEOUT;
 8009632:	23ff      	movs	r3, #255	; 0xff
 8009634:	e004      	b.n	8009640 <aci_gap_numeric_comparison_value_confirm_yesno+0xc4>
  return status;
 8009636:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800963a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800963e:	781b      	ldrb	r3, [r3, #0]
}
 8009640:	4618      	mov	r0, r3
 8009642:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8009646:	46bd      	mov	sp, r7
 8009648:	bd80      	pop	{r7, pc}

0800964a <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 800964a:	b580      	push	{r7, lr}
 800964c:	b088      	sub	sp, #32
 800964e:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8009650:	2300      	movs	r3, #0
 8009652:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009654:	f107 0308 	add.w	r3, r7, #8
 8009658:	2218      	movs	r2, #24
 800965a:	2100      	movs	r1, #0
 800965c:	4618      	mov	r0, r3
 800965e:	f000 fc91 	bl	8009f84 <Osal_MemSet>
  rq.ogf = 0x3f;
 8009662:	233f      	movs	r3, #63	; 0x3f
 8009664:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 8009666:	f240 1301 	movw	r3, #257	; 0x101
 800966a:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800966c:	1dfb      	adds	r3, r7, #7
 800966e:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8009670:	2301      	movs	r3, #1
 8009672:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009674:	f107 0308 	add.w	r3, r7, #8
 8009678:	2100      	movs	r1, #0
 800967a:	4618      	mov	r0, r3
 800967c:	f000 ff0c 	bl	800a498 <hci_send_req>
 8009680:	4603      	mov	r3, r0
 8009682:	2b00      	cmp	r3, #0
 8009684:	da01      	bge.n	800968a <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 8009686:	23ff      	movs	r3, #255	; 0xff
 8009688:	e000      	b.n	800968c <aci_gatt_init+0x42>
  return status;
 800968a:	79fb      	ldrb	r3, [r7, #7]
}
 800968c:	4618      	mov	r0, r3
 800968e:	3720      	adds	r7, #32
 8009690:	46bd      	mov	sp, r7
 8009692:	bd80      	pop	{r7, pc}

08009694 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 8009694:	b590      	push	{r4, r7, lr}
 8009696:	b0cf      	sub	sp, #316	; 0x13c
 8009698:	af00      	add	r7, sp, #0
 800969a:	4604      	mov	r4, r0
 800969c:	f507 709c 	add.w	r0, r7, #312	; 0x138
 80096a0:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
 80096a4:	6001      	str	r1, [r0, #0]
 80096a6:	4610      	mov	r0, r2
 80096a8:	4619      	mov	r1, r3
 80096aa:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80096ae:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 80096b2:	4622      	mov	r2, r4
 80096b4:	701a      	strb	r2, [r3, #0]
 80096b6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80096ba:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 80096be:	4602      	mov	r2, r0
 80096c0:	701a      	strb	r2, [r3, #0]
 80096c2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80096c6:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 80096ca:	460a      	mov	r2, r1
 80096cc:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 80096ce:	f107 0310 	add.w	r3, r7, #16
 80096d2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 80096d6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80096da:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 80096de:	781b      	ldrb	r3, [r3, #0]
 80096e0:	2b01      	cmp	r3, #1
 80096e2:	d00a      	beq.n	80096fa <aci_gatt_add_service+0x66>
 80096e4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80096e8:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 80096ec:	781b      	ldrb	r3, [r3, #0]
 80096ee:	2b02      	cmp	r3, #2
 80096f0:	d101      	bne.n	80096f6 <aci_gatt_add_service+0x62>
 80096f2:	2311      	movs	r3, #17
 80096f4:	e002      	b.n	80096fc <aci_gatt_add_service+0x68>
 80096f6:	2301      	movs	r3, #1
 80096f8:	e000      	b.n	80096fc <aci_gatt_add_service+0x68>
 80096fa:	2303      	movs	r3, #3
 80096fc:	f107 0210 	add.w	r2, r7, #16
 8009700:	4413      	add	r3, r2
 8009702:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8009706:	f107 030c 	add.w	r3, r7, #12
 800970a:	2203      	movs	r2, #3
 800970c:	2100      	movs	r1, #0
 800970e:	4618      	mov	r0, r3
 8009710:	f000 fc38 	bl	8009f84 <Osal_MemSet>
  int index_input = 0;
 8009714:	2300      	movs	r3, #0
 8009716:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 800971a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800971e:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8009722:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 8009726:	7812      	ldrb	r2, [r2, #0]
 8009728:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800972a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800972e:	3301      	adds	r3, #1
 8009730:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 8009734:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009738:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 800973c:	781b      	ldrb	r3, [r3, #0]
 800973e:	2b01      	cmp	r3, #1
 8009740:	d002      	beq.n	8009748 <aci_gatt_add_service+0xb4>
 8009742:	2b02      	cmp	r3, #2
 8009744:	d004      	beq.n	8009750 <aci_gatt_add_service+0xbc>
 8009746:	e007      	b.n	8009758 <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 8009748:	2302      	movs	r3, #2
 800974a:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 800974e:	e005      	b.n	800975c <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 8009750:	2310      	movs	r3, #16
 8009752:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8009756:	e001      	b.n	800975c <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 8009758:	2397      	movs	r3, #151	; 0x97
 800975a:	e06c      	b.n	8009836 <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 800975c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009760:	1c58      	adds	r0, r3, #1
 8009762:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 8009766:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800976a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800976e:	6819      	ldr	r1, [r3, #0]
 8009770:	f000 fbf8 	bl	8009f64 <Osal_MemCpy>
    index_input += size;
 8009774:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8009778:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800977c:	4413      	add	r3, r2
 800977e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Type = Service_Type;
 8009782:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009786:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800978a:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 800978e:	7812      	ldrb	r2, [r2, #0]
 8009790:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8009792:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009796:	3301      	adds	r3, #1
 8009798:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 800979c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80097a0:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80097a4:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 80097a8:	7812      	ldrb	r2, [r2, #0]
 80097aa:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 80097ac:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80097b0:	3301      	adds	r3, #1
 80097b2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80097b6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80097ba:	2218      	movs	r2, #24
 80097bc:	2100      	movs	r1, #0
 80097be:	4618      	mov	r0, r3
 80097c0:	f000 fbe0 	bl	8009f84 <Osal_MemSet>
  rq.ogf = 0x3f;
 80097c4:	233f      	movs	r3, #63	; 0x3f
 80097c6:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 80097ca:	f44f 7381 	mov.w	r3, #258	; 0x102
 80097ce:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80097d2:	f107 0310 	add.w	r3, r7, #16
 80097d6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80097da:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80097de:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 80097e2:	f107 030c 	add.w	r3, r7, #12
 80097e6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 80097ea:	2303      	movs	r3, #3
 80097ec:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80097f0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80097f4:	2100      	movs	r1, #0
 80097f6:	4618      	mov	r0, r3
 80097f8:	f000 fe4e 	bl	800a498 <hci_send_req>
 80097fc:	4603      	mov	r3, r0
 80097fe:	2b00      	cmp	r3, #0
 8009800:	da01      	bge.n	8009806 <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 8009802:	23ff      	movs	r3, #255	; 0xff
 8009804:	e017      	b.n	8009836 <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 8009806:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800980a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800980e:	781b      	ldrb	r3, [r3, #0]
 8009810:	2b00      	cmp	r3, #0
 8009812:	d005      	beq.n	8009820 <aci_gatt_add_service+0x18c>
    return resp.Status;
 8009814:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009818:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800981c:	781b      	ldrb	r3, [r3, #0]
 800981e:	e00a      	b.n	8009836 <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 8009820:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009824:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009828:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800982c:	b29a      	uxth	r2, r3
 800982e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8009832:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8009834:	2300      	movs	r3, #0
}
 8009836:	4618      	mov	r0, r3
 8009838:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 800983c:	46bd      	mov	sp, r7
 800983e:	bd90      	pop	{r4, r7, pc}

08009840 <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 8009840:	b590      	push	{r4, r7, lr}
 8009842:	b0d1      	sub	sp, #324	; 0x144
 8009844:	af00      	add	r7, sp, #0
 8009846:	4604      	mov	r4, r0
 8009848:	4608      	mov	r0, r1
 800984a:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 800984e:	f5a1 719c 	sub.w	r1, r1, #312	; 0x138
 8009852:	600a      	str	r2, [r1, #0]
 8009854:	4619      	mov	r1, r3
 8009856:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800985a:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 800985e:	4622      	mov	r2, r4
 8009860:	801a      	strh	r2, [r3, #0]
 8009862:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8009866:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 800986a:	4602      	mov	r2, r0
 800986c:	701a      	strb	r2, [r3, #0]
 800986e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8009872:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 8009876:	460a      	mov	r2, r1
 8009878:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 800987a:	f107 0318 	add.w	r3, r7, #24
 800987e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 8009882:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8009886:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 800988a:	781b      	ldrb	r3, [r3, #0]
 800988c:	2b01      	cmp	r3, #1
 800988e:	d00a      	beq.n	80098a6 <aci_gatt_add_char+0x66>
 8009890:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8009894:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8009898:	781b      	ldrb	r3, [r3, #0]
 800989a:	2b02      	cmp	r3, #2
 800989c:	d101      	bne.n	80098a2 <aci_gatt_add_char+0x62>
 800989e:	2313      	movs	r3, #19
 80098a0:	e002      	b.n	80098a8 <aci_gatt_add_char+0x68>
 80098a2:	2303      	movs	r3, #3
 80098a4:	e000      	b.n	80098a8 <aci_gatt_add_char+0x68>
 80098a6:	2305      	movs	r3, #5
 80098a8:	f107 0218 	add.w	r2, r7, #24
 80098ac:	4413      	add	r3, r2
 80098ae:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 80098b2:	f107 0314 	add.w	r3, r7, #20
 80098b6:	2203      	movs	r2, #3
 80098b8:	2100      	movs	r1, #0
 80098ba:	4618      	mov	r0, r3
 80098bc:	f000 fb62 	bl	8009f84 <Osal_MemSet>
  int index_input = 0;
 80098c0:	2300      	movs	r3, #0
 80098c2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Service_Handle = Service_Handle;
 80098c6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80098ca:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 80098ce:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 80098d2:	8812      	ldrh	r2, [r2, #0]
 80098d4:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80098d6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80098da:	3302      	adds	r3, #2
 80098dc:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 80098e0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80098e4:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 80098e8:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 80098ec:	7812      	ldrb	r2, [r2, #0]
 80098ee:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80098f0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80098f4:	3301      	adds	r3, #1
 80098f6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 80098fa:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80098fe:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8009902:	781b      	ldrb	r3, [r3, #0]
 8009904:	2b01      	cmp	r3, #1
 8009906:	d002      	beq.n	800990e <aci_gatt_add_char+0xce>
 8009908:	2b02      	cmp	r3, #2
 800990a:	d004      	beq.n	8009916 <aci_gatt_add_char+0xd6>
 800990c:	e007      	b.n	800991e <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 800990e:	2302      	movs	r3, #2
 8009910:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 8009914:	e005      	b.n	8009922 <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 8009916:	2310      	movs	r3, #16
 8009918:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 800991c:	e001      	b.n	8009922 <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 800991e:	2397      	movs	r3, #151	; 0x97
 8009920:	e091      	b.n	8009a46 <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 8009922:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8009926:	1cd8      	adds	r0, r3, #3
 8009928:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 800992c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8009930:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8009934:	6819      	ldr	r1, [r3, #0]
 8009936:	f000 fb15 	bl	8009f64 <Osal_MemCpy>
    index_input += size;
 800993a:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800993e:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8009942:	4413      	add	r3, r2
 8009944:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 8009948:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800994c:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8009950:	f5a2 729d 	sub.w	r2, r2, #314	; 0x13a
 8009954:	8812      	ldrh	r2, [r2, #0]
 8009956:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8009958:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800995c:	3302      	adds	r3, #2
 800995e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Properties = Char_Properties;
 8009962:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009966:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 800996a:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 800996c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009970:	3301      	adds	r3, #1
 8009972:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 8009976:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800997a:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800997e:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 8009980:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009984:	3301      	adds	r3, #1
 8009986:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 800998a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800998e:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 8009992:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 8009994:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009998:	3301      	adds	r3, #1
 800999a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 800999e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80099a2:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 80099a6:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 80099a8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80099ac:	3301      	adds	r3, #1
 80099ae:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Is_Variable = Is_Variable;
 80099b2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80099b6:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 80099ba:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 80099bc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80099c0:	3301      	adds	r3, #1
 80099c2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80099c6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80099ca:	2218      	movs	r2, #24
 80099cc:	2100      	movs	r1, #0
 80099ce:	4618      	mov	r0, r3
 80099d0:	f000 fad8 	bl	8009f84 <Osal_MemSet>
  rq.ogf = 0x3f;
 80099d4:	233f      	movs	r3, #63	; 0x3f
 80099d6:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x104;
 80099da:	f44f 7382 	mov.w	r3, #260	; 0x104
 80099de:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 80099e2:	f107 0318 	add.w	r3, r7, #24
 80099e6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 80099ea:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80099ee:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 80099f2:	f107 0314 	add.w	r3, r7, #20
 80099f6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 80099fa:	2303      	movs	r3, #3
 80099fc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009a00:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8009a04:	2100      	movs	r1, #0
 8009a06:	4618      	mov	r0, r3
 8009a08:	f000 fd46 	bl	800a498 <hci_send_req>
 8009a0c:	4603      	mov	r3, r0
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	da01      	bge.n	8009a16 <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 8009a12:	23ff      	movs	r3, #255	; 0xff
 8009a14:	e017      	b.n	8009a46 <aci_gatt_add_char+0x206>
  if ( resp.Status )
 8009a16:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8009a1a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009a1e:	781b      	ldrb	r3, [r3, #0]
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d005      	beq.n	8009a30 <aci_gatt_add_char+0x1f0>
    return resp.Status;
 8009a24:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8009a28:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009a2c:	781b      	ldrb	r3, [r3, #0]
 8009a2e:	e00a      	b.n	8009a46 <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 8009a30:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8009a34:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009a38:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8009a3c:	b29a      	uxth	r2, r3
 8009a3e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8009a42:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8009a44:	2300      	movs	r3, #0
}
 8009a46:	4618      	mov	r0, r3
 8009a48:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 8009a4c:	46bd      	mov	sp, r7
 8009a4e:	bd90      	pop	{r4, r7, pc}

08009a50 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 8009a50:	b5b0      	push	{r4, r5, r7, lr}
 8009a52:	b0cc      	sub	sp, #304	; 0x130
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	4605      	mov	r5, r0
 8009a58:	460c      	mov	r4, r1
 8009a5a:	4610      	mov	r0, r2
 8009a5c:	4619      	mov	r1, r3
 8009a5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009a62:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8009a66:	462a      	mov	r2, r5
 8009a68:	801a      	strh	r2, [r3, #0]
 8009a6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009a6e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009a72:	4622      	mov	r2, r4
 8009a74:	801a      	strh	r2, [r3, #0]
 8009a76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009a7a:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8009a7e:	4602      	mov	r2, r0
 8009a80:	701a      	strb	r2, [r3, #0]
 8009a82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009a86:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8009a8a:	460a      	mov	r2, r1
 8009a8c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 8009a8e:	f107 0310 	add.w	r3, r7, #16
 8009a92:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8009a96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009a9a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009a9e:	2200      	movs	r2, #0
 8009aa0:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009aa2:	2300      	movs	r3, #0
 8009aa4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = Service_Handle;
 8009aa8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009aac:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009ab0:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8009ab4:	8812      	ldrh	r2, [r2, #0]
 8009ab6:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8009ab8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009abc:	3302      	adds	r3, #2
 8009abe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 8009ac2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009ac6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009aca:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8009ace:	8812      	ldrh	r2, [r2, #0]
 8009ad0:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8009ad2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009ad6:	3302      	adds	r3, #2
 8009ad8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = Val_Offset;
 8009adc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009ae0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009ae4:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 8009ae8:	7812      	ldrb	r2, [r2, #0]
 8009aea:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8009aec:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009af0:	3301      	adds	r3, #1
 8009af2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 8009af6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009afa:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009afe:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 8009b02:	7812      	ldrb	r2, [r2, #0]
 8009b04:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8009b06:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009b0a:	3301      	adds	r3, #1
 8009b0c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 8009b10:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009b14:	1d98      	adds	r0, r3, #6
 8009b16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009b1a:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8009b1e:	781b      	ldrb	r3, [r3, #0]
 8009b20:	461a      	mov	r2, r3
 8009b22:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8009b26:	f000 fa1d 	bl	8009f64 <Osal_MemCpy>
  index_input += Char_Value_Length;
 8009b2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009b2e:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8009b32:	781b      	ldrb	r3, [r3, #0]
 8009b34:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8009b38:	4413      	add	r3, r2
 8009b3a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009b3e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009b42:	2218      	movs	r2, #24
 8009b44:	2100      	movs	r1, #0
 8009b46:	4618      	mov	r0, r3
 8009b48:	f000 fa1c 	bl	8009f84 <Osal_MemSet>
  rq.ogf = 0x3f;
 8009b4c:	233f      	movs	r3, #63	; 0x3f
 8009b4e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 8009b52:	f44f 7383 	mov.w	r3, #262	; 0x106
 8009b56:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8009b5a:	f107 0310 	add.w	r3, r7, #16
 8009b5e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8009b62:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009b66:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8009b6a:	f107 030f 	add.w	r3, r7, #15
 8009b6e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8009b72:	2301      	movs	r3, #1
 8009b74:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009b78:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009b7c:	2100      	movs	r1, #0
 8009b7e:	4618      	mov	r0, r3
 8009b80:	f000 fc8a 	bl	800a498 <hci_send_req>
 8009b84:	4603      	mov	r3, r0
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	da01      	bge.n	8009b8e <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 8009b8a:	23ff      	movs	r3, #255	; 0xff
 8009b8c:	e004      	b.n	8009b98 <aci_gatt_update_char_value+0x148>
  return status;
 8009b8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009b92:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009b96:	781b      	ldrb	r3, [r3, #0]
}
 8009b98:	4618      	mov	r0, r3
 8009b9a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8009b9e:	46bd      	mov	sp, r7
 8009ba0:	bdb0      	pop	{r4, r5, r7, pc}

08009ba2 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 8009ba2:	b580      	push	{r7, lr}
 8009ba4:	b0cc      	sub	sp, #304	; 0x130
 8009ba6:	af00      	add	r7, sp, #0
 8009ba8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009bac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009bb0:	601a      	str	r2, [r3, #0]
 8009bb2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009bb6:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8009bba:	4602      	mov	r2, r0
 8009bbc:	701a      	strb	r2, [r3, #0]
 8009bbe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009bc2:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8009bc6:	460a      	mov	r2, r1
 8009bc8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 8009bca:	f107 0310 	add.w	r3, r7, #16
 8009bce:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8009bd2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009bd6:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009bda:	2200      	movs	r2, #0
 8009bdc:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009bde:	2300      	movs	r3, #0
 8009be0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = Offset;
 8009be4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009be8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009bec:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8009bf0:	7812      	ldrb	r2, [r2, #0]
 8009bf2:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8009bf4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009bf8:	3301      	adds	r3, #1
 8009bfa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = Length;
 8009bfe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009c02:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009c06:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8009c0a:	7812      	ldrb	r2, [r2, #0]
 8009c0c:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8009c0e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009c12:	3301      	adds	r3, #1
 8009c14:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 8009c18:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009c1c:	1c98      	adds	r0, r3, #2
 8009c1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009c22:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8009c26:	781a      	ldrb	r2, [r3, #0]
 8009c28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009c2c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009c30:	6819      	ldr	r1, [r3, #0]
 8009c32:	f000 f997 	bl	8009f64 <Osal_MemCpy>
  index_input += Length;
 8009c36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009c3a:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8009c3e:	781b      	ldrb	r3, [r3, #0]
 8009c40:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8009c44:	4413      	add	r3, r2
 8009c46:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009c4a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009c4e:	2218      	movs	r2, #24
 8009c50:	2100      	movs	r1, #0
 8009c52:	4618      	mov	r0, r3
 8009c54:	f000 f996 	bl	8009f84 <Osal_MemSet>
  rq.ogf = 0x3f;
 8009c58:	233f      	movs	r3, #63	; 0x3f
 8009c5a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 8009c5e:	230c      	movs	r3, #12
 8009c60:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8009c64:	f107 0310 	add.w	r3, r7, #16
 8009c68:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8009c6c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009c70:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8009c74:	f107 030f 	add.w	r3, r7, #15
 8009c78:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8009c7c:	2301      	movs	r3, #1
 8009c7e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009c82:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009c86:	2100      	movs	r1, #0
 8009c88:	4618      	mov	r0, r3
 8009c8a:	f000 fc05 	bl	800a498 <hci_send_req>
 8009c8e:	4603      	mov	r3, r0
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	da01      	bge.n	8009c98 <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 8009c94:	23ff      	movs	r3, #255	; 0xff
 8009c96:	e004      	b.n	8009ca2 <aci_hal_write_config_data+0x100>
  return status;
 8009c98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009c9c:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009ca0:	781b      	ldrb	r3, [r3, #0]
}
 8009ca2:	4618      	mov	r0, r3
 8009ca4:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8009ca8:	46bd      	mov	sp, r7
 8009caa:	bd80      	pop	{r7, pc}

08009cac <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 8009cac:	b580      	push	{r7, lr}
 8009cae:	b0cc      	sub	sp, #304	; 0x130
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	4602      	mov	r2, r0
 8009cb4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009cb8:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8009cbc:	701a      	strb	r2, [r3, #0]
 8009cbe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009cc2:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8009cc6:	460a      	mov	r2, r1
 8009cc8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 8009cca:	f107 0310 	add.w	r3, r7, #16
 8009cce:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8009cd2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009cd6:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009cda:	2200      	movs	r2, #0
 8009cdc:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009cde:	2300      	movs	r3, #0
 8009ce0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = En_High_Power;
 8009ce4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009ce8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009cec:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8009cf0:	7812      	ldrb	r2, [r2, #0]
 8009cf2:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8009cf4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009cf8:	3301      	adds	r3, #1
 8009cfa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = PA_Level;
 8009cfe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009d02:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009d06:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8009d0a:	7812      	ldrb	r2, [r2, #0]
 8009d0c:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8009d0e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009d12:	3301      	adds	r3, #1
 8009d14:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009d18:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009d1c:	2218      	movs	r2, #24
 8009d1e:	2100      	movs	r1, #0
 8009d20:	4618      	mov	r0, r3
 8009d22:	f000 f92f 	bl	8009f84 <Osal_MemSet>
  rq.ogf = 0x3f;
 8009d26:	233f      	movs	r3, #63	; 0x3f
 8009d28:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 8009d2c:	230f      	movs	r3, #15
 8009d2e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8009d32:	f107 0310 	add.w	r3, r7, #16
 8009d36:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8009d3a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009d3e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8009d42:	f107 030f 	add.w	r3, r7, #15
 8009d46:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8009d4a:	2301      	movs	r3, #1
 8009d4c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009d50:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009d54:	2100      	movs	r1, #0
 8009d56:	4618      	mov	r0, r3
 8009d58:	f000 fb9e 	bl	800a498 <hci_send_req>
 8009d5c:	4603      	mov	r3, r0
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	da01      	bge.n	8009d66 <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 8009d62:	23ff      	movs	r3, #255	; 0xff
 8009d64:	e004      	b.n	8009d70 <aci_hal_set_tx_power_level+0xc4>
  return status;
 8009d66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009d6a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009d6e:	781b      	ldrb	r3, [r3, #0]
}
 8009d70:	4618      	mov	r0, r3
 8009d72:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8009d76:	46bd      	mov	sp, r7
 8009d78:	bd80      	pop	{r7, pc}

08009d7a <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 8009d7a:	b580      	push	{r7, lr}
 8009d7c:	b0cc      	sub	sp, #304	; 0x130
 8009d7e:	af00      	add	r7, sp, #0
 8009d80:	4602      	mov	r2, r0
 8009d82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009d86:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8009d8a:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 8009d8c:	f107 0310 	add.w	r3, r7, #16
 8009d90:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8009d94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009d98:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009d9c:	2200      	movs	r2, #0
 8009d9e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009da0:	2300      	movs	r3, #0
 8009da2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 8009da6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009daa:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009dae:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8009db2:	8812      	ldrh	r2, [r2, #0]
 8009db4:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8009db6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009dba:	3302      	adds	r3, #2
 8009dbc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009dc0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009dc4:	2218      	movs	r2, #24
 8009dc6:	2100      	movs	r1, #0
 8009dc8:	4618      	mov	r0, r3
 8009dca:	f000 f8db 	bl	8009f84 <Osal_MemSet>
  rq.ogf = 0x3f;
 8009dce:	233f      	movs	r3, #63	; 0x3f
 8009dd0:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x018;
 8009dd4:	2318      	movs	r3, #24
 8009dd6:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8009dda:	f107 0310 	add.w	r3, r7, #16
 8009dde:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8009de2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009de6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8009dea:	f107 030f 	add.w	r3, r7, #15
 8009dee:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8009df2:	2301      	movs	r3, #1
 8009df4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009df8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009dfc:	2100      	movs	r1, #0
 8009dfe:	4618      	mov	r0, r3
 8009e00:	f000 fb4a 	bl	800a498 <hci_send_req>
 8009e04:	4603      	mov	r3, r0
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	da01      	bge.n	8009e0e <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 8009e0a:	23ff      	movs	r3, #255	; 0xff
 8009e0c:	e004      	b.n	8009e18 <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 8009e0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009e12:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009e16:	781b      	ldrb	r3, [r3, #0]
}
 8009e18:	4618      	mov	r0, r3
 8009e1a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8009e1e:	46bd      	mov	sp, r7
 8009e20:	bd80      	pop	{r7, pc}

08009e22 <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 8009e22:	b580      	push	{r7, lr}
 8009e24:	b088      	sub	sp, #32
 8009e26:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8009e28:	2300      	movs	r3, #0
 8009e2a:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009e2c:	f107 0308 	add.w	r3, r7, #8
 8009e30:	2218      	movs	r2, #24
 8009e32:	2100      	movs	r1, #0
 8009e34:	4618      	mov	r0, r3
 8009e36:	f000 f8a5 	bl	8009f84 <Osal_MemSet>
  rq.ogf = 0x03;
 8009e3a:	2303      	movs	r3, #3
 8009e3c:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 8009e3e:	2303      	movs	r3, #3
 8009e40:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8009e42:	1dfb      	adds	r3, r7, #7
 8009e44:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8009e46:	2301      	movs	r3, #1
 8009e48:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009e4a:	f107 0308 	add.w	r3, r7, #8
 8009e4e:	2100      	movs	r1, #0
 8009e50:	4618      	mov	r0, r3
 8009e52:	f000 fb21 	bl	800a498 <hci_send_req>
 8009e56:	4603      	mov	r3, r0
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	da01      	bge.n	8009e60 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 8009e5c:	23ff      	movs	r3, #255	; 0xff
 8009e5e:	e000      	b.n	8009e62 <hci_reset+0x40>
  return status;
 8009e60:	79fb      	ldrb	r3, [r7, #7]
}
 8009e62:	4618      	mov	r0, r3
 8009e64:	3720      	adds	r7, #32
 8009e66:	46bd      	mov	sp, r7
 8009e68:	bd80      	pop	{r7, pc}

08009e6a <hci_le_set_default_phy>:
}

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 8009e6a:	b590      	push	{r4, r7, lr}
 8009e6c:	b0cd      	sub	sp, #308	; 0x134
 8009e6e:	af00      	add	r7, sp, #0
 8009e70:	4604      	mov	r4, r0
 8009e72:	4608      	mov	r0, r1
 8009e74:	4611      	mov	r1, r2
 8009e76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009e7a:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8009e7e:	4622      	mov	r2, r4
 8009e80:	701a      	strb	r2, [r3, #0]
 8009e82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009e86:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8009e8a:	4602      	mov	r2, r0
 8009e8c:	701a      	strb	r2, [r3, #0]
 8009e8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009e92:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8009e96:	460a      	mov	r2, r1
 8009e98:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 8009e9a:	f107 0310 	add.w	r3, r7, #16
 8009e9e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8009ea2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009ea6:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009eaa:	2200      	movs	r2, #0
 8009eac:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009eae:	2300      	movs	r3, #0
 8009eb0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 8009eb4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009eb8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009ebc:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8009ec0:	7812      	ldrb	r2, [r2, #0]
 8009ec2:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8009ec4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009ec8:	3301      	adds	r3, #1
 8009eca:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->TX_PHYS = TX_PHYS;
 8009ece:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009ed2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009ed6:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8009eda:	7812      	ldrb	r2, [r2, #0]
 8009edc:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8009ede:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009ee2:	3301      	adds	r3, #1
 8009ee4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->RX_PHYS = RX_PHYS;
 8009ee8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009eec:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009ef0:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8009ef4:	7812      	ldrb	r2, [r2, #0]
 8009ef6:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8009ef8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009efc:	3301      	adds	r3, #1
 8009efe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009f02:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009f06:	2218      	movs	r2, #24
 8009f08:	2100      	movs	r1, #0
 8009f0a:	4618      	mov	r0, r3
 8009f0c:	f000 f83a 	bl	8009f84 <Osal_MemSet>
  rq.ogf = 0x08;
 8009f10:	2308      	movs	r3, #8
 8009f12:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x031;
 8009f16:	2331      	movs	r3, #49	; 0x31
 8009f18:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8009f1c:	f107 0310 	add.w	r3, r7, #16
 8009f20:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8009f24:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009f28:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8009f2c:	f107 030f 	add.w	r3, r7, #15
 8009f30:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8009f34:	2301      	movs	r3, #1
 8009f36:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009f3a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009f3e:	2100      	movs	r1, #0
 8009f40:	4618      	mov	r0, r3
 8009f42:	f000 faa9 	bl	800a498 <hci_send_req>
 8009f46:	4603      	mov	r3, r0
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	da01      	bge.n	8009f50 <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 8009f4c:	23ff      	movs	r3, #255	; 0xff
 8009f4e:	e004      	b.n	8009f5a <hci_le_set_default_phy+0xf0>
  return status;
 8009f50:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009f54:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009f58:	781b      	ldrb	r3, [r3, #0]
}
 8009f5a:	4618      	mov	r0, r3
 8009f5c:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8009f60:	46bd      	mov	sp, r7
 8009f62:	bd90      	pop	{r4, r7, pc}

08009f64 <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 8009f64:	b580      	push	{r7, lr}
 8009f66:	b084      	sub	sp, #16
 8009f68:	af00      	add	r7, sp, #0
 8009f6a:	60f8      	str	r0, [r7, #12]
 8009f6c:	60b9      	str	r1, [r7, #8]
 8009f6e:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 8009f70:	687a      	ldr	r2, [r7, #4]
 8009f72:	68b9      	ldr	r1, [r7, #8]
 8009f74:	68f8      	ldr	r0, [r7, #12]
 8009f76:	f002 f8db 	bl	800c130 <memcpy>
 8009f7a:	4603      	mov	r3, r0
}
 8009f7c:	4618      	mov	r0, r3
 8009f7e:	3710      	adds	r7, #16
 8009f80:	46bd      	mov	sp, r7
 8009f82:	bd80      	pop	{r7, pc}

08009f84 <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 8009f84:	b580      	push	{r7, lr}
 8009f86:	b084      	sub	sp, #16
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	60f8      	str	r0, [r7, #12]
 8009f8c:	60b9      	str	r1, [r7, #8]
 8009f8e:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 8009f90:	687a      	ldr	r2, [r7, #4]
 8009f92:	68b9      	ldr	r1, [r7, #8]
 8009f94:	68f8      	ldr	r0, [r7, #12]
 8009f96:	f002 f8d9 	bl	800c14c <memset>
 8009f9a:	4603      	mov	r3, r0
}
 8009f9c:	4618      	mov	r0, r3
 8009f9e:	3710      	adds	r7, #16
 8009fa0:	46bd      	mov	sp, r7
 8009fa2:	bd80      	pop	{r7, pc}

08009fa4 <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 8009fa4:	b480      	push	{r7}
 8009fa6:	af00      	add	r7, sp, #0
  return;
 8009fa8:	bf00      	nop
}
 8009faa:	46bd      	mov	sp, r7
 8009fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb0:	4770      	bx	lr

08009fb2 <BLS_Init>:

__WEAK void BLS_Init( void )
{
 8009fb2:	b480      	push	{r7}
 8009fb4:	af00      	add	r7, sp, #0
  return;
 8009fb6:	bf00      	nop
}
 8009fb8:	46bd      	mov	sp, r7
 8009fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fbe:	4770      	bx	lr

08009fc0 <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 8009fc0:	b480      	push	{r7}
 8009fc2:	af00      	add	r7, sp, #0
  return;
 8009fc4:	bf00      	nop
}
 8009fc6:	46bd      	mov	sp, r7
 8009fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fcc:	4770      	bx	lr

08009fce <DIS_Init>:
__WEAK void DIS_Init( void )
{
 8009fce:	b480      	push	{r7}
 8009fd0:	af00      	add	r7, sp, #0
  return;
 8009fd2:	bf00      	nop
}
 8009fd4:	46bd      	mov	sp, r7
 8009fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fda:	4770      	bx	lr

08009fdc <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 8009fdc:	b480      	push	{r7}
 8009fde:	af00      	add	r7, sp, #0
  return;
 8009fe0:	bf00      	nop
}
 8009fe2:	46bd      	mov	sp, r7
 8009fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe8:	4770      	bx	lr

08009fea <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 8009fea:	b480      	push	{r7}
 8009fec:	af00      	add	r7, sp, #0
  return;
 8009fee:	bf00      	nop
}
 8009ff0:	46bd      	mov	sp, r7
 8009ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff6:	4770      	bx	lr

08009ff8 <HRS_Init>:
__WEAK void HRS_Init( void )
{
 8009ff8:	b480      	push	{r7}
 8009ffa:	af00      	add	r7, sp, #0
  return;
 8009ffc:	bf00      	nop
}
 8009ffe:	46bd      	mov	sp, r7
 800a000:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a004:	4770      	bx	lr

0800a006 <HTS_Init>:
__WEAK void HTS_Init( void )
{
 800a006:	b480      	push	{r7}
 800a008:	af00      	add	r7, sp, #0
  return;
 800a00a:	bf00      	nop
}
 800a00c:	46bd      	mov	sp, r7
 800a00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a012:	4770      	bx	lr

0800a014 <IAS_Init>:
__WEAK void IAS_Init( void )
{
 800a014:	b480      	push	{r7}
 800a016:	af00      	add	r7, sp, #0
  return;
 800a018:	bf00      	nop
}
 800a01a:	46bd      	mov	sp, r7
 800a01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a020:	4770      	bx	lr

0800a022 <LLS_Init>:
__WEAK void LLS_Init( void )
{
 800a022:	b480      	push	{r7}
 800a024:	af00      	add	r7, sp, #0
  return;
 800a026:	bf00      	nop
}
 800a028:	46bd      	mov	sp, r7
 800a02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a02e:	4770      	bx	lr

0800a030 <TPS_Init>:
__WEAK void TPS_Init( void )
{
 800a030:	b480      	push	{r7}
 800a032:	af00      	add	r7, sp, #0
  return;
 800a034:	bf00      	nop
}
 800a036:	46bd      	mov	sp, r7
 800a038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a03c:	4770      	bx	lr

0800a03e <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 800a03e:	b480      	push	{r7}
 800a040:	af00      	add	r7, sp, #0
  return;
 800a042:	bf00      	nop
}
 800a044:	46bd      	mov	sp, r7
 800a046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a04a:	4770      	bx	lr

0800a04c <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 800a04c:	b480      	push	{r7}
 800a04e:	af00      	add	r7, sp, #0
  return;
 800a050:	bf00      	nop
}
 800a052:	46bd      	mov	sp, r7
 800a054:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a058:	4770      	bx	lr

0800a05a <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 800a05a:	b480      	push	{r7}
 800a05c:	af00      	add	r7, sp, #0
  return;
 800a05e:	bf00      	nop
}
 800a060:	46bd      	mov	sp, r7
 800a062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a066:	4770      	bx	lr

0800a068 <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 800a068:	b480      	push	{r7}
 800a06a:	af00      	add	r7, sp, #0
  return;
 800a06c:	bf00      	nop
}
 800a06e:	46bd      	mov	sp, r7
 800a070:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a074:	4770      	bx	lr

0800a076 <MESH_Init>:
__WEAK void MESH_Init( void )
{
 800a076:	b480      	push	{r7}
 800a078:	af00      	add	r7, sp, #0
  return;
 800a07a:	bf00      	nop
}
 800a07c:	46bd      	mov	sp, r7
 800a07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a082:	4770      	bx	lr

0800a084 <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 800a084:	b480      	push	{r7}
 800a086:	af00      	add	r7, sp, #0
  return;
 800a088:	bf00      	nop
}
 800a08a:	46bd      	mov	sp, r7
 800a08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a090:	4770      	bx	lr
	...

0800a094 <SVCCTL_Init>:
}

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 800a094:	b580      	push	{r7, lr}
 800a096:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 800a098:	4b04      	ldr	r3, [pc, #16]	; (800a0ac <SVCCTL_Init+0x18>)
 800a09a:	2200      	movs	r2, #0
 800a09c:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 800a09e:	4b04      	ldr	r3, [pc, #16]	; (800a0b0 <SVCCTL_Init+0x1c>)
 800a0a0:	2200      	movs	r2, #0
 800a0a2:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 800a0a4:	f000 f806 	bl	800a0b4 <SVCCTL_SvcInit>

  return;
 800a0a8:	bf00      	nop
}
 800a0aa:	bd80      	pop	{r7, pc}
 800a0ac:	20000910 	.word	0x20000910
 800a0b0:	20000930 	.word	0x20000930

0800a0b4 <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 800a0b4:	b580      	push	{r7, lr}
 800a0b6:	af00      	add	r7, sp, #0
  BAS_Init();
 800a0b8:	f7ff ff74 	bl	8009fa4 <BAS_Init>

  BLS_Init();
 800a0bc:	f7ff ff79 	bl	8009fb2 <BLS_Init>

  CRS_STM_Init();
 800a0c0:	f7ff ff7e 	bl	8009fc0 <CRS_STM_Init>

  DIS_Init();
 800a0c4:	f7ff ff83 	bl	8009fce <DIS_Init>

  EDS_STM_Init();
 800a0c8:	f7ff ff88 	bl	8009fdc <EDS_STM_Init>

  HIDS_Init();
 800a0cc:	f7ff ff8d 	bl	8009fea <HIDS_Init>

  HRS_Init();
 800a0d0:	f7ff ff92 	bl	8009ff8 <HRS_Init>

  HTS_Init();
 800a0d4:	f7ff ff97 	bl	800a006 <HTS_Init>

  IAS_Init();
 800a0d8:	f7ff ff9c 	bl	800a014 <IAS_Init>

  LLS_Init();
 800a0dc:	f7ff ffa1 	bl	800a022 <LLS_Init>

  TPS_Init();
 800a0e0:	f7ff ffa6 	bl	800a030 <TPS_Init>

  MOTENV_STM_Init();
 800a0e4:	f7ff ffab 	bl	800a03e <MOTENV_STM_Init>

  P2PS_STM_Init();
 800a0e8:	f7ff ffb0 	bl	800a04c <P2PS_STM_Init>

  ZDD_STM_Init();
 800a0ec:	f7ff ffb5 	bl	800a05a <ZDD_STM_Init>

  OTAS_STM_Init();
 800a0f0:	f7ff ffba 	bl	800a068 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 800a0f4:	f7ff ffc6 	bl	800a084 <BVOPUS_STM_Init>

  MESH_Init();
 800a0f8:	f7ff ffbd 	bl	800a076 <MESH_Init>

  SVCCTL_InitCustomSvc();
 800a0fc:	f001 faaa 	bl	800b654 <SVCCTL_InitCustomSvc>
  
  return;
 800a100:	bf00      	nop
}
 800a102:	bd80      	pop	{r7, pc}

0800a104 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 800a104:	b480      	push	{r7}
 800a106:	b083      	sub	sp, #12
 800a108:	af00      	add	r7, sp, #0
 800a10a:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 800a10c:	4b09      	ldr	r3, [pc, #36]	; (800a134 <SVCCTL_RegisterSvcHandler+0x30>)
 800a10e:	7f1b      	ldrb	r3, [r3, #28]
 800a110:	4619      	mov	r1, r3
 800a112:	4a08      	ldr	r2, [pc, #32]	; (800a134 <SVCCTL_RegisterSvcHandler+0x30>)
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 800a11a:	4b06      	ldr	r3, [pc, #24]	; (800a134 <SVCCTL_RegisterSvcHandler+0x30>)
 800a11c:	7f1b      	ldrb	r3, [r3, #28]
 800a11e:	3301      	adds	r3, #1
 800a120:	b2da      	uxtb	r2, r3
 800a122:	4b04      	ldr	r3, [pc, #16]	; (800a134 <SVCCTL_RegisterSvcHandler+0x30>)
 800a124:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 800a126:	bf00      	nop
}
 800a128:	370c      	adds	r7, #12
 800a12a:	46bd      	mov	sp, r7
 800a12c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a130:	4770      	bx	lr
 800a132:	bf00      	nop
 800a134:	20000910 	.word	0x20000910

0800a138 <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 800a138:	b580      	push	{r7, lr}
 800a13a:	b086      	sub	sp, #24
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	3301      	adds	r3, #1
 800a144:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 800a146:	2300      	movs	r3, #0
 800a148:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 800a14a:	693b      	ldr	r3, [r7, #16]
 800a14c:	781b      	ldrb	r3, [r3, #0]
 800a14e:	2bff      	cmp	r3, #255	; 0xff
 800a150:	d125      	bne.n	800a19e <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 800a152:	693b      	ldr	r3, [r7, #16]
 800a154:	3302      	adds	r3, #2
 800a156:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	881b      	ldrh	r3, [r3, #0]
 800a15c:	b29b      	uxth	r3, r3
 800a15e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800a162:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a166:	d118      	bne.n	800a19a <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800a168:	2300      	movs	r3, #0
 800a16a:	757b      	strb	r3, [r7, #21]
 800a16c:	e00d      	b.n	800a18a <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 800a16e:	7d7b      	ldrb	r3, [r7, #21]
 800a170:	4a1a      	ldr	r2, [pc, #104]	; (800a1dc <SVCCTL_UserEvtRx+0xa4>)
 800a172:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a176:	6878      	ldr	r0, [r7, #4]
 800a178:	4798      	blx	r3
 800a17a:	4603      	mov	r3, r0
 800a17c:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 800a17e:	7dfb      	ldrb	r3, [r7, #23]
 800a180:	2b00      	cmp	r3, #0
 800a182:	d108      	bne.n	800a196 <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800a184:	7d7b      	ldrb	r3, [r7, #21]
 800a186:	3301      	adds	r3, #1
 800a188:	757b      	strb	r3, [r7, #21]
 800a18a:	4b14      	ldr	r3, [pc, #80]	; (800a1dc <SVCCTL_UserEvtRx+0xa4>)
 800a18c:	7f1b      	ldrb	r3, [r3, #28]
 800a18e:	7d7a      	ldrb	r2, [r7, #21]
 800a190:	429a      	cmp	r2, r3
 800a192:	d3ec      	bcc.n	800a16e <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 800a194:	e002      	b.n	800a19c <SVCCTL_UserEvtRx+0x64>
              break;
 800a196:	bf00      	nop
          break;
 800a198:	e000      	b.n	800a19c <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 800a19a:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 800a19c:	e000      	b.n	800a1a0 <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 800a19e:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the applicaiton.
   */
  switch (event_notification_status)
 800a1a0:	7dfb      	ldrb	r3, [r7, #23]
 800a1a2:	2b02      	cmp	r3, #2
 800a1a4:	d00f      	beq.n	800a1c6 <SVCCTL_UserEvtRx+0x8e>
 800a1a6:	2b02      	cmp	r3, #2
 800a1a8:	dc10      	bgt.n	800a1cc <SVCCTL_UserEvtRx+0x94>
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d002      	beq.n	800a1b4 <SVCCTL_UserEvtRx+0x7c>
 800a1ae:	2b01      	cmp	r3, #1
 800a1b0:	d006      	beq.n	800a1c0 <SVCCTL_UserEvtRx+0x88>
 800a1b2:	e00b      	b.n	800a1cc <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 800a1b4:	6878      	ldr	r0, [r7, #4]
 800a1b6:	f000 ff7b 	bl	800b0b0 <SVCCTL_App_Notification>
 800a1ba:	4603      	mov	r3, r0
 800a1bc:	75bb      	strb	r3, [r7, #22]
      break;
 800a1be:	e008      	b.n	800a1d2 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 800a1c0:	2301      	movs	r3, #1
 800a1c2:	75bb      	strb	r3, [r7, #22]
      break;
 800a1c4:	e005      	b.n	800a1d2 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 800a1c6:	2300      	movs	r3, #0
 800a1c8:	75bb      	strb	r3, [r7, #22]
      break;
 800a1ca:	e002      	b.n	800a1d2 <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 800a1cc:	2301      	movs	r3, #1
 800a1ce:	75bb      	strb	r3, [r7, #22]
      break;
 800a1d0:	bf00      	nop
  }

  return (return_status);
 800a1d2:	7dbb      	ldrb	r3, [r7, #22]
}
 800a1d4:	4618      	mov	r0, r3
 800a1d6:	3718      	adds	r7, #24
 800a1d8:	46bd      	mov	sp, r7
 800a1da:	bd80      	pop	{r7, pc}
 800a1dc:	20000910 	.word	0x20000910

0800a1e0 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 800a1e0:	b580      	push	{r7, lr}
 800a1e2:	b088      	sub	sp, #32
 800a1e4:	af00      	add	r7, sp, #0
 800a1e6:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800a1e8:	f107 030c 	add.w	r3, r7, #12
 800a1ec:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 800a1f4:	69fb      	ldr	r3, [r7, #28]
 800a1f6:	212e      	movs	r1, #46	; 0x2e
 800a1f8:	f64f 4066 	movw	r0, #64614	; 0xfc66
 800a1fc:	f000 fae2 	bl	800a7c4 <shci_send>
            p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800a200:	69fb      	ldr	r3, [r7, #28]
 800a202:	330b      	adds	r3, #11
 800a204:	78db      	ldrb	r3, [r3, #3]
}
 800a206:	4618      	mov	r0, r3
 800a208:	3720      	adds	r7, #32
 800a20a:	46bd      	mov	sp, r7
 800a20c:	bd80      	pop	{r7, pc}

0800a20e <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 800a20e:	b580      	push	{r7, lr}
 800a210:	b088      	sub	sp, #32
 800a212:	af00      	add	r7, sp, #0
 800a214:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800a216:	f107 030c 	add.w	r3, r7, #12
 800a21a:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 800a222:	69fb      	ldr	r3, [r7, #28]
 800a224:	210f      	movs	r1, #15
 800a226:	f64f 4068 	movw	r0, #64616	; 0xfc68
 800a22a:	f000 facb 	bl	800a7c4 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800a22e:	69fb      	ldr	r3, [r7, #28]
 800a230:	330b      	adds	r3, #11
 800a232:	78db      	ldrb	r3, [r3, #3]
}
 800a234:	4618      	mov	r0, r3
 800a236:	3720      	adds	r7, #32
 800a238:	46bd      	mov	sp, r7
 800a23a:	bd80      	pop	{r7, pc}

0800a23c <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 800a23c:	b580      	push	{r7, lr}
 800a23e:	b088      	sub	sp, #32
 800a240:	af00      	add	r7, sp, #0
 800a242:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800a244:	f107 030c 	add.w	r3, r7, #12
 800a248:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 800a24a:	69fb      	ldr	r3, [r7, #28]
 800a24c:	687a      	ldr	r2, [r7, #4]
 800a24e:	2110      	movs	r1, #16
 800a250:	f64f 4075 	movw	r0, #64629	; 0xfc75
 800a254:	f000 fab6 	bl	800a7c4 <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800a258:	69fb      	ldr	r3, [r7, #28]
 800a25a:	330b      	adds	r3, #11
 800a25c:	78db      	ldrb	r3, [r3, #3]
}
 800a25e:	4618      	mov	r0, r3
 800a260:	3720      	adds	r7, #32
 800a262:	46bd      	mov	sp, r7
 800a264:	bd80      	pop	{r7, pc}
	...

0800a268 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 800a268:	b480      	push	{r7}
 800a26a:	b08b      	sub	sp, #44	; 0x2c
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 800a270:	2300      	movs	r3, #0
 800a272:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 800a274:	2300      	movs	r3, #0
 800a276:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 800a278:	2300      	movs	r3, #0
 800a27a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t wireless_firmware_memorySize = 0;
 800a27c:	2300      	movs	r3, #0
 800a27e:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 800a280:	2300      	movs	r3, #0
 800a282:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 800a284:	2300      	movs	r3, #0
 800a286:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 800a288:	2300      	movs	r3, #0
 800a28a:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 800a28c:	2300      	movs	r3, #0
 800a28e:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 800a290:	4b4a      	ldr	r3, [pc, #296]	; (800a3bc <SHCI_GetWirelessFwInfo+0x154>)
 800a292:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a294:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800a298:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 800a29a:	693b      	ldr	r3, [r7, #16]
 800a29c:	009b      	lsls	r3, r3, #2
 800a29e:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800a2a2:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 800a2aa:	68bb      	ldr	r3, [r7, #8]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	4a44      	ldr	r2, [pc, #272]	; (800a3c0 <SHCI_GetWirelessFwInfo+0x158>)
 800a2b0:	4293      	cmp	r3, r2
 800a2b2:	d10f      	bne.n	800a2d4 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 800a2b4:	68bb      	ldr	r3, [r7, #8]
 800a2b6:	695b      	ldr	r3, [r3, #20]
 800a2b8:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 800a2ba:	68bb      	ldr	r3, [r7, #8]
 800a2bc:	699b      	ldr	r3, [r3, #24]
 800a2be:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 800a2c0:	68bb      	ldr	r3, [r7, #8]
 800a2c2:	69db      	ldr	r3, [r3, #28]
 800a2c4:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 800a2c6:	68bb      	ldr	r3, [r7, #8]
 800a2c8:	68db      	ldr	r3, [r3, #12]
 800a2ca:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 800a2cc:	68bb      	ldr	r3, [r7, #8]
 800a2ce:	691b      	ldr	r3, [r3, #16]
 800a2d0:	617b      	str	r3, [r7, #20]
 800a2d2:	e01a      	b.n	800a30a <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 800a2d4:	693b      	ldr	r3, [r7, #16]
 800a2d6:	009b      	lsls	r3, r3, #2
 800a2d8:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800a2dc:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 800a2e0:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	691b      	ldr	r3, [r3, #16]
 800a2e8:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	695b      	ldr	r3, [r3, #20]
 800a2f0:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	699b      	ldr	r3, [r3, #24]
 800a2f8:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	685b      	ldr	r3, [r3, #4]
 800a300:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	689b      	ldr	r3, [r3, #8]
 800a308:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800a30a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a30c:	0e1b      	lsrs	r3, r3, #24
 800a30e:	b2da      	uxtb	r2, r3
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800a314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a316:	0c1b      	lsrs	r3, r3, #16
 800a318:	b2da      	uxtb	r2, r3
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800a31e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a320:	0a1b      	lsrs	r3, r3, #8
 800a322:	b2da      	uxtb	r2, r3
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 800a328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a32a:	091b      	lsrs	r3, r3, #4
 800a32c:	b2db      	uxtb	r3, r3
 800a32e:	f003 030f 	and.w	r3, r3, #15
 800a332:	b2da      	uxtb	r2, r3
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 800a338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a33a:	b2db      	uxtb	r3, r3
 800a33c:	f003 030f 	and.w	r3, r3, #15
 800a340:	b2da      	uxtb	r2, r3
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800a346:	6a3b      	ldr	r3, [r7, #32]
 800a348:	0e1b      	lsrs	r3, r3, #24
 800a34a:	b2da      	uxtb	r2, r3
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800a350:	6a3b      	ldr	r3, [r7, #32]
 800a352:	0c1b      	lsrs	r3, r3, #16
 800a354:	b2da      	uxtb	r2, r3
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 800a35a:	6a3b      	ldr	r3, [r7, #32]
 800a35c:	0a1b      	lsrs	r3, r3, #8
 800a35e:	b2da      	uxtb	r2, r3
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800a364:	6a3b      	ldr	r3, [r7, #32]
 800a366:	b2da      	uxtb	r2, r3
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 800a36c:	69fb      	ldr	r3, [r7, #28]
 800a36e:	b2da      	uxtb	r2, r3
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800a374:	69bb      	ldr	r3, [r7, #24]
 800a376:	0e1b      	lsrs	r3, r3, #24
 800a378:	b2da      	uxtb	r2, r3
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800a37e:	69bb      	ldr	r3, [r7, #24]
 800a380:	0c1b      	lsrs	r3, r3, #16
 800a382:	b2da      	uxtb	r2, r3
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800a388:	69bb      	ldr	r3, [r7, #24]
 800a38a:	0a1b      	lsrs	r3, r3, #8
 800a38c:	b2da      	uxtb	r2, r3
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800a392:	697b      	ldr	r3, [r7, #20]
 800a394:	0e1b      	lsrs	r3, r3, #24
 800a396:	b2da      	uxtb	r2, r3
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800a39c:	697b      	ldr	r3, [r7, #20]
 800a39e:	0c1b      	lsrs	r3, r3, #16
 800a3a0:	b2da      	uxtb	r2, r3
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800a3a6:	697b      	ldr	r3, [r7, #20]
 800a3a8:	b2da      	uxtb	r2, r3
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 800a3ae:	2300      	movs	r3, #0
}
 800a3b0:	4618      	mov	r0, r3
 800a3b2:	372c      	adds	r7, #44	; 0x2c
 800a3b4:	46bd      	mov	sp, r7
 800a3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ba:	4770      	bx	lr
 800a3bc:	58004000 	.word	0x58004000
 800a3c0:	a94656b9 	.word	0xa94656b9

0800a3c4 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800a3c4:	b580      	push	{r7, lr}
 800a3c6:	b082      	sub	sp, #8
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	6078      	str	r0, [r7, #4]
 800a3cc:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800a3ce:	683b      	ldr	r3, [r7, #0]
 800a3d0:	685b      	ldr	r3, [r3, #4]
 800a3d2:	4a08      	ldr	r2, [pc, #32]	; (800a3f4 <hci_init+0x30>)
 800a3d4:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 800a3d6:	4a08      	ldr	r2, [pc, #32]	; (800a3f8 <hci_init+0x34>)
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 800a3dc:	4806      	ldr	r0, [pc, #24]	; (800a3f8 <hci_init+0x34>)
 800a3de:	f000 f973 	bl	800a6c8 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800a3e2:	683b      	ldr	r3, [r7, #0]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	f000 f8d4 	bl	800a594 <TlInit>

  return;
 800a3ec:	bf00      	nop
}
 800a3ee:	3708      	adds	r7, #8
 800a3f0:	46bd      	mov	sp, r7
 800a3f2:	bd80      	pop	{r7, pc}
 800a3f4:	20000d10 	.word	0x20000d10
 800a3f8:	20000ce8 	.word	0x20000ce8

0800a3fc <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 800a3fc:	b580      	push	{r7, lr}
 800a3fe:	b084      	sub	sp, #16
 800a400:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800a402:	4822      	ldr	r0, [pc, #136]	; (800a48c <hci_user_evt_proc+0x90>)
 800a404:	f000 fd28 	bl	800ae58 <LST_is_empty>
 800a408:	4603      	mov	r3, r0
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d12b      	bne.n	800a466 <hci_user_evt_proc+0x6a>
 800a40e:	4b20      	ldr	r3, [pc, #128]	; (800a490 <hci_user_evt_proc+0x94>)
 800a410:	781b      	ldrb	r3, [r3, #0]
 800a412:	2b00      	cmp	r3, #0
 800a414:	d027      	beq.n	800a466 <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800a416:	f107 030c 	add.w	r3, r7, #12
 800a41a:	4619      	mov	r1, r3
 800a41c:	481b      	ldr	r0, [pc, #108]	; (800a48c <hci_user_evt_proc+0x90>)
 800a41e:	f000 fdaa 	bl	800af76 <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 800a422:	4b1c      	ldr	r3, [pc, #112]	; (800a494 <hci_user_evt_proc+0x98>)
 800a424:	69db      	ldr	r3, [r3, #28]
 800a426:	2b00      	cmp	r3, #0
 800a428:	d00c      	beq.n	800a444 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 800a42e:	2301      	movs	r3, #1
 800a430:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 800a432:	4b18      	ldr	r3, [pc, #96]	; (800a494 <hci_user_evt_proc+0x98>)
 800a434:	69db      	ldr	r3, [r3, #28]
 800a436:	1d3a      	adds	r2, r7, #4
 800a438:	4610      	mov	r0, r2
 800a43a:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 800a43c:	793a      	ldrb	r2, [r7, #4]
 800a43e:	4b14      	ldr	r3, [pc, #80]	; (800a490 <hci_user_evt_proc+0x94>)
 800a440:	701a      	strb	r2, [r3, #0]
 800a442:	e002      	b.n	800a44a <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800a444:	4b12      	ldr	r3, [pc, #72]	; (800a490 <hci_user_evt_proc+0x94>)
 800a446:	2201      	movs	r2, #1
 800a448:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 800a44a:	4b11      	ldr	r3, [pc, #68]	; (800a490 <hci_user_evt_proc+0x94>)
 800a44c:	781b      	ldrb	r3, [r3, #0]
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d004      	beq.n	800a45c <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	4618      	mov	r0, r3
 800a456:	f000 fc03 	bl	800ac60 <TL_MM_EvtDone>
 800a45a:	e004      	b.n	800a466 <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	4619      	mov	r1, r3
 800a460:	480a      	ldr	r0, [pc, #40]	; (800a48c <hci_user_evt_proc+0x90>)
 800a462:	f000 fd1b 	bl	800ae9c <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800a466:	4809      	ldr	r0, [pc, #36]	; (800a48c <hci_user_evt_proc+0x90>)
 800a468:	f000 fcf6 	bl	800ae58 <LST_is_empty>
 800a46c:	4603      	mov	r3, r0
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d107      	bne.n	800a482 <hci_user_evt_proc+0x86>
 800a472:	4b07      	ldr	r3, [pc, #28]	; (800a490 <hci_user_evt_proc+0x94>)
 800a474:	781b      	ldrb	r3, [r3, #0]
 800a476:	2b00      	cmp	r3, #0
 800a478:	d003      	beq.n	800a482 <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 800a47a:	4804      	ldr	r0, [pc, #16]	; (800a48c <hci_user_evt_proc+0x90>)
 800a47c:	f001 f830 	bl	800b4e0 <hci_notify_asynch_evt>
  }


  return;
 800a480:	bf00      	nop
 800a482:	bf00      	nop
}
 800a484:	3710      	adds	r7, #16
 800a486:	46bd      	mov	sp, r7
 800a488:	bd80      	pop	{r7, pc}
 800a48a:	bf00      	nop
 800a48c:	20000938 	.word	0x20000938
 800a490:	20000944 	.word	0x20000944
 800a494:	20000ce8 	.word	0x20000ce8

0800a498 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 800a498:	b580      	push	{r7, lr}
 800a49a:	b088      	sub	sp, #32
 800a49c:	af00      	add	r7, sp, #0
 800a49e:	6078      	str	r0, [r7, #4]
 800a4a0:	460b      	mov	r3, r1
 800a4a2:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 800a4a4:	2000      	movs	r0, #0
 800a4a6:	f000 f8cb 	bl	800a640 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 800a4aa:	2300      	movs	r3, #0
 800a4ac:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	885b      	ldrh	r3, [r3, #2]
 800a4b2:	b21b      	sxth	r3, r3
 800a4b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a4b8:	b21a      	sxth	r2, r3
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	881b      	ldrh	r3, [r3, #0]
 800a4be:	029b      	lsls	r3, r3, #10
 800a4c0:	b21b      	sxth	r3, r3
 800a4c2:	4313      	orrs	r3, r2
 800a4c4:	b21b      	sxth	r3, r3
 800a4c6:	83bb      	strh	r3, [r7, #28]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	68db      	ldr	r3, [r3, #12]
 800a4cc:	b2d9      	uxtb	r1, r3
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	689a      	ldr	r2, [r3, #8]
 800a4d2:	8bbb      	ldrh	r3, [r7, #28]
 800a4d4:	4618      	mov	r0, r3
 800a4d6:	f000 f88d 	bl	800a5f4 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 800a4da:	e04e      	b.n	800a57a <hci_send_req+0xe2>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 800a4dc:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800a4e0:	f001 f815 	bl	800b50e <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800a4e4:	e043      	b.n	800a56e <hci_send_req+0xd6>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 800a4e6:	f107 030c 	add.w	r3, r7, #12
 800a4ea:	4619      	mov	r1, r3
 800a4ec:	4828      	ldr	r0, [pc, #160]	; (800a590 <hci_send_req+0xf8>)
 800a4ee:	f000 fd42 	bl	800af76 <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	7a5b      	ldrb	r3, [r3, #9]
 800a4f6:	2b0f      	cmp	r3, #15
 800a4f8:	d114      	bne.n	800a524 <hci_send_req+0x8c>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	330b      	adds	r3, #11
 800a4fe:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 800a500:	693b      	ldr	r3, [r7, #16]
 800a502:	885b      	ldrh	r3, [r3, #2]
 800a504:	b29b      	uxth	r3, r3
 800a506:	8bba      	ldrh	r2, [r7, #28]
 800a508:	429a      	cmp	r2, r3
 800a50a:	d104      	bne.n	800a516 <hci_send_req+0x7e>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	691b      	ldr	r3, [r3, #16]
 800a510:	693a      	ldr	r2, [r7, #16]
 800a512:	7812      	ldrb	r2, [r2, #0]
 800a514:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 800a516:	693b      	ldr	r3, [r7, #16]
 800a518:	785b      	ldrb	r3, [r3, #1]
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d027      	beq.n	800a56e <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800a51e:	2301      	movs	r3, #1
 800a520:	77fb      	strb	r3, [r7, #31]
 800a522:	e024      	b.n	800a56e <hci_send_req+0xd6>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	330b      	adds	r3, #11
 800a528:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 800a52a:	69bb      	ldr	r3, [r7, #24]
 800a52c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800a530:	b29b      	uxth	r3, r3
 800a532:	8bba      	ldrh	r2, [r7, #28]
 800a534:	429a      	cmp	r2, r3
 800a536:	d114      	bne.n	800a562 <hci_send_req+0xca>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	7a9b      	ldrb	r3, [r3, #10]
 800a53c:	3b03      	subs	r3, #3
 800a53e:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	695a      	ldr	r2, [r3, #20]
 800a544:	7dfb      	ldrb	r3, [r7, #23]
 800a546:	429a      	cmp	r2, r3
 800a548:	bfa8      	it	ge
 800a54a:	461a      	movge	r2, r3
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	6918      	ldr	r0, [r3, #16]
 800a554:	69bb      	ldr	r3, [r7, #24]
 800a556:	1cd9      	adds	r1, r3, #3
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	695b      	ldr	r3, [r3, #20]
 800a55c:	461a      	mov	r2, r3
 800a55e:	f001 fde7 	bl	800c130 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 800a562:	69bb      	ldr	r3, [r7, #24]
 800a564:	781b      	ldrb	r3, [r3, #0]
 800a566:	2b00      	cmp	r3, #0
 800a568:	d001      	beq.n	800a56e <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800a56a:	2301      	movs	r3, #1
 800a56c:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800a56e:	4808      	ldr	r0, [pc, #32]	; (800a590 <hci_send_req+0xf8>)
 800a570:	f000 fc72 	bl	800ae58 <LST_is_empty>
 800a574:	4603      	mov	r3, r0
 800a576:	2b00      	cmp	r3, #0
 800a578:	d0b5      	beq.n	800a4e6 <hci_send_req+0x4e>
  while(local_cmd_status == HCI_TL_CmdBusy)
 800a57a:	7ffb      	ldrb	r3, [r7, #31]
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d0ad      	beq.n	800a4dc <hci_send_req+0x44>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 800a580:	2001      	movs	r0, #1
 800a582:	f000 f85d 	bl	800a640 <NotifyCmdStatus>

  return 0;
 800a586:	2300      	movs	r3, #0
}
 800a588:	4618      	mov	r0, r3
 800a58a:	3720      	adds	r7, #32
 800a58c:	46bd      	mov	sp, r7
 800a58e:	bd80      	pop	{r7, pc}
 800a590:	20000d08 	.word	0x20000d08

0800a594 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800a594:	b580      	push	{r7, lr}
 800a596:	b086      	sub	sp, #24
 800a598:	af00      	add	r7, sp, #0
 800a59a:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 800a59c:	480f      	ldr	r0, [pc, #60]	; (800a5dc <TlInit+0x48>)
 800a59e:	f000 fc4b 	bl	800ae38 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 800a5a2:	4a0f      	ldr	r2, [pc, #60]	; (800a5e0 <TlInit+0x4c>)
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 800a5a8:	480e      	ldr	r0, [pc, #56]	; (800a5e4 <TlInit+0x50>)
 800a5aa:	f000 fc45 	bl	800ae38 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800a5ae:	4b0e      	ldr	r3, [pc, #56]	; (800a5e8 <TlInit+0x54>)
 800a5b0:	2201      	movs	r2, #1
 800a5b2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 800a5b4:	4b0d      	ldr	r3, [pc, #52]	; (800a5ec <TlInit+0x58>)
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d00a      	beq.n	800a5d2 <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 800a5c0:	4b0b      	ldr	r3, [pc, #44]	; (800a5f0 <TlInit+0x5c>)
 800a5c2:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 800a5c4:	4b09      	ldr	r3, [pc, #36]	; (800a5ec <TlInit+0x58>)
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	f107 0208 	add.w	r2, r7, #8
 800a5cc:	4610      	mov	r0, r2
 800a5ce:	4798      	blx	r3
  }

  return;
 800a5d0:	bf00      	nop
 800a5d2:	bf00      	nop
}
 800a5d4:	3718      	adds	r7, #24
 800a5d6:	46bd      	mov	sp, r7
 800a5d8:	bd80      	pop	{r7, pc}
 800a5da:	bf00      	nop
 800a5dc:	20000d08 	.word	0x20000d08
 800a5e0:	20000940 	.word	0x20000940
 800a5e4:	20000938 	.word	0x20000938
 800a5e8:	20000944 	.word	0x20000944
 800a5ec:	20000ce8 	.word	0x20000ce8
 800a5f0:	0800a681 	.word	0x0800a681

0800a5f4 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 800a5f4:	b580      	push	{r7, lr}
 800a5f6:	b082      	sub	sp, #8
 800a5f8:	af00      	add	r7, sp, #0
 800a5fa:	4603      	mov	r3, r0
 800a5fc:	603a      	str	r2, [r7, #0]
 800a5fe:	80fb      	strh	r3, [r7, #6]
 800a600:	460b      	mov	r3, r1
 800a602:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 800a604:	4b0c      	ldr	r3, [pc, #48]	; (800a638 <SendCmd+0x44>)
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	88fa      	ldrh	r2, [r7, #6]
 800a60a:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 800a60e:	4b0a      	ldr	r3, [pc, #40]	; (800a638 <SendCmd+0x44>)
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	797a      	ldrb	r2, [r7, #5]
 800a614:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 800a616:	4b08      	ldr	r3, [pc, #32]	; (800a638 <SendCmd+0x44>)
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	330c      	adds	r3, #12
 800a61c:	797a      	ldrb	r2, [r7, #5]
 800a61e:	6839      	ldr	r1, [r7, #0]
 800a620:	4618      	mov	r0, r3
 800a622:	f001 fd85 	bl	800c130 <memcpy>

  hciContext.io.Send(0,0);
 800a626:	4b05      	ldr	r3, [pc, #20]	; (800a63c <SendCmd+0x48>)
 800a628:	691b      	ldr	r3, [r3, #16]
 800a62a:	2100      	movs	r1, #0
 800a62c:	2000      	movs	r0, #0
 800a62e:	4798      	blx	r3

  return;
 800a630:	bf00      	nop
}
 800a632:	3708      	adds	r7, #8
 800a634:	46bd      	mov	sp, r7
 800a636:	bd80      	pop	{r7, pc}
 800a638:	20000940 	.word	0x20000940
 800a63c:	20000ce8 	.word	0x20000ce8

0800a640 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 800a640:	b580      	push	{r7, lr}
 800a642:	b082      	sub	sp, #8
 800a644:	af00      	add	r7, sp, #0
 800a646:	4603      	mov	r3, r0
 800a648:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 800a64a:	79fb      	ldrb	r3, [r7, #7]
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d108      	bne.n	800a662 <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 800a650:	4b0a      	ldr	r3, [pc, #40]	; (800a67c <NotifyCmdStatus+0x3c>)
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	2b00      	cmp	r3, #0
 800a656:	d00d      	beq.n	800a674 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 800a658:	4b08      	ldr	r3, [pc, #32]	; (800a67c <NotifyCmdStatus+0x3c>)
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	2000      	movs	r0, #0
 800a65e:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 800a660:	e008      	b.n	800a674 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 800a662:	4b06      	ldr	r3, [pc, #24]	; (800a67c <NotifyCmdStatus+0x3c>)
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	2b00      	cmp	r3, #0
 800a668:	d004      	beq.n	800a674 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 800a66a:	4b04      	ldr	r3, [pc, #16]	; (800a67c <NotifyCmdStatus+0x3c>)
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	2001      	movs	r0, #1
 800a670:	4798      	blx	r3
  return;
 800a672:	bf00      	nop
 800a674:	bf00      	nop
}
 800a676:	3708      	adds	r7, #8
 800a678:	46bd      	mov	sp, r7
 800a67a:	bd80      	pop	{r7, pc}
 800a67c:	20000d10 	.word	0x20000d10

0800a680 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 800a680:	b580      	push	{r7, lr}
 800a682:	b082      	sub	sp, #8
 800a684:	af00      	add	r7, sp, #0
 800a686:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	7a5b      	ldrb	r3, [r3, #9]
 800a68c:	2b0f      	cmp	r3, #15
 800a68e:	d003      	beq.n	800a698 <TlEvtReceived+0x18>
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	7a5b      	ldrb	r3, [r3, #9]
 800a694:	2b0e      	cmp	r3, #14
 800a696:	d107      	bne.n	800a6a8 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 800a698:	6879      	ldr	r1, [r7, #4]
 800a69a:	4809      	ldr	r0, [pc, #36]	; (800a6c0 <TlEvtReceived+0x40>)
 800a69c:	f000 fc24 	bl	800aee8 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 800a6a0:	2000      	movs	r0, #0
 800a6a2:	f000 ff29 	bl	800b4f8 <hci_cmd_resp_release>
 800a6a6:	e006      	b.n	800a6b6 <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 800a6a8:	6879      	ldr	r1, [r7, #4]
 800a6aa:	4806      	ldr	r0, [pc, #24]	; (800a6c4 <TlEvtReceived+0x44>)
 800a6ac:	f000 fc1c 	bl	800aee8 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800a6b0:	4804      	ldr	r0, [pc, #16]	; (800a6c4 <TlEvtReceived+0x44>)
 800a6b2:	f000 ff15 	bl	800b4e0 <hci_notify_asynch_evt>
  }

  return;
 800a6b6:	bf00      	nop
}
 800a6b8:	3708      	adds	r7, #8
 800a6ba:	46bd      	mov	sp, r7
 800a6bc:	bd80      	pop	{r7, pc}
 800a6be:	bf00      	nop
 800a6c0:	20000d08 	.word	0x20000d08
 800a6c4:	20000938 	.word	0x20000938

0800a6c8 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 800a6c8:	b480      	push	{r7}
 800a6ca:	b083      	sub	sp, #12
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	4a05      	ldr	r2, [pc, #20]	; (800a6e8 <hci_register_io_bus+0x20>)
 800a6d4:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	4a04      	ldr	r2, [pc, #16]	; (800a6ec <hci_register_io_bus+0x24>)
 800a6da:	611a      	str	r2, [r3, #16]

  return;
 800a6dc:	bf00      	nop
}
 800a6de:	370c      	adds	r7, #12
 800a6e0:	46bd      	mov	sp, r7
 800a6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e6:	4770      	bx	lr
 800a6e8:	0800a9d9 	.word	0x0800a9d9
 800a6ec:	0800aa41 	.word	0x0800aa41

0800a6f0 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800a6f0:	b580      	push	{r7, lr}
 800a6f2:	b082      	sub	sp, #8
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	6078      	str	r0, [r7, #4]
 800a6f8:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800a6fa:	683b      	ldr	r3, [r7, #0]
 800a6fc:	685b      	ldr	r3, [r3, #4]
 800a6fe:	4a08      	ldr	r2, [pc, #32]	; (800a720 <shci_init+0x30>)
 800a700:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 800a702:	4a08      	ldr	r2, [pc, #32]	; (800a724 <shci_init+0x34>)
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 800a708:	4806      	ldr	r0, [pc, #24]	; (800a724 <shci_init+0x34>)
 800a70a:	f000 f911 	bl	800a930 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800a70e:	683b      	ldr	r3, [r7, #0]
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	4618      	mov	r0, r3
 800a714:	f000 f894 	bl	800a840 <TlInit>

  return;
 800a718:	bf00      	nop
}
 800a71a:	3708      	adds	r7, #8
 800a71c:	46bd      	mov	sp, r7
 800a71e:	bd80      	pop	{r7, pc}
 800a720:	20000d34 	.word	0x20000d34
 800a724:	20000d14 	.word	0x20000d14

0800a728 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 800a728:	b580      	push	{r7, lr}
 800a72a:	b084      	sub	sp, #16
 800a72c:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800a72e:	4822      	ldr	r0, [pc, #136]	; (800a7b8 <shci_user_evt_proc+0x90>)
 800a730:	f000 fb92 	bl	800ae58 <LST_is_empty>
 800a734:	4603      	mov	r3, r0
 800a736:	2b00      	cmp	r3, #0
 800a738:	d12b      	bne.n	800a792 <shci_user_evt_proc+0x6a>
 800a73a:	4b20      	ldr	r3, [pc, #128]	; (800a7bc <shci_user_evt_proc+0x94>)
 800a73c:	781b      	ldrb	r3, [r3, #0]
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d027      	beq.n	800a792 <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800a742:	f107 030c 	add.w	r3, r7, #12
 800a746:	4619      	mov	r1, r3
 800a748:	481b      	ldr	r0, [pc, #108]	; (800a7b8 <shci_user_evt_proc+0x90>)
 800a74a:	f000 fc14 	bl	800af76 <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 800a74e:	4b1c      	ldr	r3, [pc, #112]	; (800a7c0 <shci_user_evt_proc+0x98>)
 800a750:	69db      	ldr	r3, [r3, #28]
 800a752:	2b00      	cmp	r3, #0
 800a754:	d00c      	beq.n	800a770 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 800a75a:	2301      	movs	r3, #1
 800a75c:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 800a75e:	4b18      	ldr	r3, [pc, #96]	; (800a7c0 <shci_user_evt_proc+0x98>)
 800a760:	69db      	ldr	r3, [r3, #28]
 800a762:	1d3a      	adds	r2, r7, #4
 800a764:	4610      	mov	r0, r2
 800a766:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 800a768:	793a      	ldrb	r2, [r7, #4]
 800a76a:	4b14      	ldr	r3, [pc, #80]	; (800a7bc <shci_user_evt_proc+0x94>)
 800a76c:	701a      	strb	r2, [r3, #0]
 800a76e:	e002      	b.n	800a776 <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800a770:	4b12      	ldr	r3, [pc, #72]	; (800a7bc <shci_user_evt_proc+0x94>)
 800a772:	2201      	movs	r2, #1
 800a774:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 800a776:	4b11      	ldr	r3, [pc, #68]	; (800a7bc <shci_user_evt_proc+0x94>)
 800a778:	781b      	ldrb	r3, [r3, #0]
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d004      	beq.n	800a788 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	4618      	mov	r0, r3
 800a782:	f000 fa6d 	bl	800ac60 <TL_MM_EvtDone>
 800a786:	e004      	b.n	800a792 <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	4619      	mov	r1, r3
 800a78c:	480a      	ldr	r0, [pc, #40]	; (800a7b8 <shci_user_evt_proc+0x90>)
 800a78e:	f000 fb85 	bl	800ae9c <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800a792:	4809      	ldr	r0, [pc, #36]	; (800a7b8 <shci_user_evt_proc+0x90>)
 800a794:	f000 fb60 	bl	800ae58 <LST_is_empty>
 800a798:	4603      	mov	r3, r0
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d107      	bne.n	800a7ae <shci_user_evt_proc+0x86>
 800a79e:	4b07      	ldr	r3, [pc, #28]	; (800a7bc <shci_user_evt_proc+0x94>)
 800a7a0:	781b      	ldrb	r3, [r3, #0]
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d003      	beq.n	800a7ae <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 800a7a6:	4804      	ldr	r0, [pc, #16]	; (800a7b8 <shci_user_evt_proc+0x90>)
 800a7a8:	f7f6 fe24 	bl	80013f4 <shci_notify_asynch_evt>
  }


  return;
 800a7ac:	bf00      	nop
 800a7ae:	bf00      	nop
}
 800a7b0:	3710      	adds	r7, #16
 800a7b2:	46bd      	mov	sp, r7
 800a7b4:	bd80      	pop	{r7, pc}
 800a7b6:	bf00      	nop
 800a7b8:	20000948 	.word	0x20000948
 800a7bc:	20000958 	.word	0x20000958
 800a7c0:	20000d14 	.word	0x20000d14

0800a7c4 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 800a7c4:	b580      	push	{r7, lr}
 800a7c6:	b084      	sub	sp, #16
 800a7c8:	af00      	add	r7, sp, #0
 800a7ca:	60ba      	str	r2, [r7, #8]
 800a7cc:	607b      	str	r3, [r7, #4]
 800a7ce:	4603      	mov	r3, r0
 800a7d0:	81fb      	strh	r3, [r7, #14]
 800a7d2:	460b      	mov	r3, r1
 800a7d4:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 800a7d6:	2000      	movs	r0, #0
 800a7d8:	f000 f864 	bl	800a8a4 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 800a7dc:	4b16      	ldr	r3, [pc, #88]	; (800a838 <shci_send+0x74>)
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	89fa      	ldrh	r2, [r7, #14]
 800a7e2:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 800a7e6:	4b14      	ldr	r3, [pc, #80]	; (800a838 <shci_send+0x74>)
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	7b7a      	ldrb	r2, [r7, #13]
 800a7ec:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 800a7ee:	4b12      	ldr	r3, [pc, #72]	; (800a838 <shci_send+0x74>)
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	330c      	adds	r3, #12
 800a7f4:	7b7a      	ldrb	r2, [r7, #13]
 800a7f6:	68b9      	ldr	r1, [r7, #8]
 800a7f8:	4618      	mov	r0, r3
 800a7fa:	f001 fc99 	bl	800c130 <memcpy>

  shciContext.io.Send(0,0);
 800a7fe:	4b0f      	ldr	r3, [pc, #60]	; (800a83c <shci_send+0x78>)
 800a800:	691b      	ldr	r3, [r3, #16]
 800a802:	2100      	movs	r1, #0
 800a804:	2000      	movs	r0, #0
 800a806:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 800a808:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800a80c:	f7f6 fe09 	bl	8001422 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	f103 0008 	add.w	r0, r3, #8
 800a816:	4b08      	ldr	r3, [pc, #32]	; (800a838 <shci_send+0x74>)
 800a818:	6819      	ldr	r1, [r3, #0]
 800a81a:	4b07      	ldr	r3, [pc, #28]	; (800a838 <shci_send+0x74>)
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	789b      	ldrb	r3, [r3, #2]
 800a820:	3303      	adds	r3, #3
 800a822:	461a      	mov	r2, r3
 800a824:	f001 fc84 	bl	800c130 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800a828:	2001      	movs	r0, #1
 800a82a:	f000 f83b 	bl	800a8a4 <Cmd_SetStatus>

  return;
 800a82e:	bf00      	nop
}
 800a830:	3710      	adds	r7, #16
 800a832:	46bd      	mov	sp, r7
 800a834:	bd80      	pop	{r7, pc}
 800a836:	bf00      	nop
 800a838:	20000954 	.word	0x20000954
 800a83c:	20000d14 	.word	0x20000d14

0800a840 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800a840:	b580      	push	{r7, lr}
 800a842:	b086      	sub	sp, #24
 800a844:	af00      	add	r7, sp, #0
 800a846:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 800a848:	4a10      	ldr	r2, [pc, #64]	; (800a88c <TlInit+0x4c>)
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 800a84e:	4810      	ldr	r0, [pc, #64]	; (800a890 <TlInit+0x50>)
 800a850:	f000 faf2 	bl	800ae38 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800a854:	2001      	movs	r0, #1
 800a856:	f000 f825 	bl	800a8a4 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800a85a:	4b0e      	ldr	r3, [pc, #56]	; (800a894 <TlInit+0x54>)
 800a85c:	2201      	movs	r2, #1
 800a85e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 800a860:	4b0d      	ldr	r3, [pc, #52]	; (800a898 <TlInit+0x58>)
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	2b00      	cmp	r3, #0
 800a866:	d00c      	beq.n	800a882 <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 800a86c:	4b0b      	ldr	r3, [pc, #44]	; (800a89c <TlInit+0x5c>)
 800a86e:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 800a870:	4b0b      	ldr	r3, [pc, #44]	; (800a8a0 <TlInit+0x60>)
 800a872:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 800a874:	4b08      	ldr	r3, [pc, #32]	; (800a898 <TlInit+0x58>)
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	f107 020c 	add.w	r2, r7, #12
 800a87c:	4610      	mov	r0, r2
 800a87e:	4798      	blx	r3
  }

  return;
 800a880:	bf00      	nop
 800a882:	bf00      	nop
}
 800a884:	3718      	adds	r7, #24
 800a886:	46bd      	mov	sp, r7
 800a888:	bd80      	pop	{r7, pc}
 800a88a:	bf00      	nop
 800a88c:	20000954 	.word	0x20000954
 800a890:	20000948 	.word	0x20000948
 800a894:	20000958 	.word	0x20000958
 800a898:	20000d14 	.word	0x20000d14
 800a89c:	0800a8f5 	.word	0x0800a8f5
 800a8a0:	0800a90d 	.word	0x0800a90d

0800a8a4 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 800a8a4:	b580      	push	{r7, lr}
 800a8a6:	b082      	sub	sp, #8
 800a8a8:	af00      	add	r7, sp, #0
 800a8aa:	4603      	mov	r3, r0
 800a8ac:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 800a8ae:	79fb      	ldrb	r3, [r7, #7]
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d10b      	bne.n	800a8cc <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 800a8b4:	4b0d      	ldr	r3, [pc, #52]	; (800a8ec <Cmd_SetStatus+0x48>)
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d003      	beq.n	800a8c4 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 800a8bc:	4b0b      	ldr	r3, [pc, #44]	; (800a8ec <Cmd_SetStatus+0x48>)
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	2000      	movs	r0, #0
 800a8c2:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 800a8c4:	4b0a      	ldr	r3, [pc, #40]	; (800a8f0 <Cmd_SetStatus+0x4c>)
 800a8c6:	2200      	movs	r2, #0
 800a8c8:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 800a8ca:	e00b      	b.n	800a8e4 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 800a8cc:	4b08      	ldr	r3, [pc, #32]	; (800a8f0 <Cmd_SetStatus+0x4c>)
 800a8ce:	2201      	movs	r2, #1
 800a8d0:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 800a8d2:	4b06      	ldr	r3, [pc, #24]	; (800a8ec <Cmd_SetStatus+0x48>)
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d004      	beq.n	800a8e4 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 800a8da:	4b04      	ldr	r3, [pc, #16]	; (800a8ec <Cmd_SetStatus+0x48>)
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	2001      	movs	r0, #1
 800a8e0:	4798      	blx	r3
  return;
 800a8e2:	bf00      	nop
 800a8e4:	bf00      	nop
}
 800a8e6:	3708      	adds	r7, #8
 800a8e8:	46bd      	mov	sp, r7
 800a8ea:	bd80      	pop	{r7, pc}
 800a8ec:	20000d34 	.word	0x20000d34
 800a8f0:	20000950 	.word	0x20000950

0800a8f4 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 800a8f4:	b580      	push	{r7, lr}
 800a8f6:	b082      	sub	sp, #8
 800a8f8:	af00      	add	r7, sp, #0
 800a8fa:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 800a8fc:	2000      	movs	r0, #0
 800a8fe:	f7f6 fd85 	bl	800140c <shci_cmd_resp_release>

  return;
 800a902:	bf00      	nop
}
 800a904:	3708      	adds	r7, #8
 800a906:	46bd      	mov	sp, r7
 800a908:	bd80      	pop	{r7, pc}
	...

0800a90c <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 800a90c:	b580      	push	{r7, lr}
 800a90e:	b082      	sub	sp, #8
 800a910:	af00      	add	r7, sp, #0
 800a912:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 800a914:	6879      	ldr	r1, [r7, #4]
 800a916:	4805      	ldr	r0, [pc, #20]	; (800a92c <TlUserEvtReceived+0x20>)
 800a918:	f000 fae6 	bl	800aee8 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800a91c:	4803      	ldr	r0, [pc, #12]	; (800a92c <TlUserEvtReceived+0x20>)
 800a91e:	f7f6 fd69 	bl	80013f4 <shci_notify_asynch_evt>

  return;
 800a922:	bf00      	nop
}
 800a924:	3708      	adds	r7, #8
 800a926:	46bd      	mov	sp, r7
 800a928:	bd80      	pop	{r7, pc}
 800a92a:	bf00      	nop
 800a92c:	20000948 	.word	0x20000948

0800a930 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 800a930:	b480      	push	{r7}
 800a932:	b083      	sub	sp, #12
 800a934:	af00      	add	r7, sp, #0
 800a936:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	4a05      	ldr	r2, [pc, #20]	; (800a950 <shci_register_io_bus+0x20>)
 800a93c:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	4a04      	ldr	r2, [pc, #16]	; (800a954 <shci_register_io_bus+0x24>)
 800a942:	611a      	str	r2, [r3, #16]

  return;
 800a944:	bf00      	nop
}
 800a946:	370c      	adds	r7, #12
 800a948:	46bd      	mov	sp, r7
 800a94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a94e:	4770      	bx	lr
 800a950:	0800aaed 	.word	0x0800aaed
 800a954:	0800ab41 	.word	0x0800ab41

0800a958 <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 800a958:	b580      	push	{r7, lr}
 800a95a:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 800a95c:	f001 f86c 	bl	800ba38 <HW_IPCC_Enable>

  return;
 800a960:	bf00      	nop
}
 800a962:	bd80      	pop	{r7, pc}

0800a964 <TL_Init>:


void TL_Init( void )
{
 800a964:	b580      	push	{r7, lr}
 800a966:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 800a968:	4b10      	ldr	r3, [pc, #64]	; (800a9ac <TL_Init+0x48>)
 800a96a:	4a11      	ldr	r2, [pc, #68]	; (800a9b0 <TL_Init+0x4c>)
 800a96c:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 800a96e:	4b0f      	ldr	r3, [pc, #60]	; (800a9ac <TL_Init+0x48>)
 800a970:	4a10      	ldr	r2, [pc, #64]	; (800a9b4 <TL_Init+0x50>)
 800a972:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 800a974:	4b0d      	ldr	r3, [pc, #52]	; (800a9ac <TL_Init+0x48>)
 800a976:	4a10      	ldr	r2, [pc, #64]	; (800a9b8 <TL_Init+0x54>)
 800a978:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 800a97a:	4b0c      	ldr	r3, [pc, #48]	; (800a9ac <TL_Init+0x48>)
 800a97c:	4a0f      	ldr	r2, [pc, #60]	; (800a9bc <TL_Init+0x58>)
 800a97e:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 800a980:	4b0a      	ldr	r3, [pc, #40]	; (800a9ac <TL_Init+0x48>)
 800a982:	4a0f      	ldr	r2, [pc, #60]	; (800a9c0 <TL_Init+0x5c>)
 800a984:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 800a986:	4b09      	ldr	r3, [pc, #36]	; (800a9ac <TL_Init+0x48>)
 800a988:	4a0e      	ldr	r2, [pc, #56]	; (800a9c4 <TL_Init+0x60>)
 800a98a:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 800a98c:	4b07      	ldr	r3, [pc, #28]	; (800a9ac <TL_Init+0x48>)
 800a98e:	4a0e      	ldr	r2, [pc, #56]	; (800a9c8 <TL_Init+0x64>)
 800a990:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 800a992:	4b06      	ldr	r3, [pc, #24]	; (800a9ac <TL_Init+0x48>)
 800a994:	4a0d      	ldr	r2, [pc, #52]	; (800a9cc <TL_Init+0x68>)
 800a996:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 800a998:	4b04      	ldr	r3, [pc, #16]	; (800a9ac <TL_Init+0x48>)
 800a99a:	4a0d      	ldr	r2, [pc, #52]	; (800a9d0 <TL_Init+0x6c>)
 800a99c:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800a99e:	4b03      	ldr	r3, [pc, #12]	; (800a9ac <TL_Init+0x48>)
 800a9a0:	4a0c      	ldr	r2, [pc, #48]	; (800a9d4 <TL_Init+0x70>)
 800a9a2:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 800a9a4:	f001 f85c 	bl	800ba60 <HW_IPCC_Init>

  return;
 800a9a8:	bf00      	nop
}
 800a9aa:	bd80      	pop	{r7, pc}
 800a9ac:	20030000 	.word	0x20030000
 800a9b0:	20030028 	.word	0x20030028
 800a9b4:	20030048 	.word	0x20030048
 800a9b8:	20030058 	.word	0x20030058
 800a9bc:	20030068 	.word	0x20030068
 800a9c0:	20030070 	.word	0x20030070
 800a9c4:	20030078 	.word	0x20030078
 800a9c8:	20030080 	.word	0x20030080
 800a9cc:	2003009c 	.word	0x2003009c
 800a9d0:	200300a0 	.word	0x200300a0
 800a9d4:	200300ac 	.word	0x200300ac

0800a9d8 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 800a9d8:	b580      	push	{r7, lr}
 800a9da:	b084      	sub	sp, #16
 800a9dc:	af00      	add	r7, sp, #0
 800a9de:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 800a9e4:	4811      	ldr	r0, [pc, #68]	; (800aa2c <TL_BLE_Init+0x54>)
 800a9e6:	f000 fa27 	bl	800ae38 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 800a9ea:	4b11      	ldr	r3, [pc, #68]	; (800aa30 <TL_BLE_Init+0x58>)
 800a9ec:	685b      	ldr	r3, [r3, #4]
 800a9ee:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	689a      	ldr	r2, [r3, #8]
 800a9f4:	68bb      	ldr	r3, [r7, #8]
 800a9f6:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	68da      	ldr	r2, [r3, #12]
 800a9fc:	68bb      	ldr	r3, [r7, #8]
 800a9fe:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 800aa00:	68bb      	ldr	r3, [r7, #8]
 800aa02:	4a0c      	ldr	r2, [pc, #48]	; (800aa34 <TL_BLE_Init+0x5c>)
 800aa04:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 800aa06:	68bb      	ldr	r3, [r7, #8]
 800aa08:	4a08      	ldr	r2, [pc, #32]	; (800aa2c <TL_BLE_Init+0x54>)
 800aa0a:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 800aa0c:	f001 f83e 	bl	800ba8c <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	4a08      	ldr	r2, [pc, #32]	; (800aa38 <TL_BLE_Init+0x60>)
 800aa16:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	685b      	ldr	r3, [r3, #4]
 800aa1c:	4a07      	ldr	r2, [pc, #28]	; (800aa3c <TL_BLE_Init+0x64>)
 800aa1e:	6013      	str	r3, [r2, #0]

  return 0;
 800aa20:	2300      	movs	r3, #0
}
 800aa22:	4618      	mov	r0, r3
 800aa24:	3710      	adds	r7, #16
 800aa26:	46bd      	mov	sp, r7
 800aa28:	bd80      	pop	{r7, pc}
 800aa2a:	bf00      	nop
 800aa2c:	200300c8 	.word	0x200300c8
 800aa30:	20030000 	.word	0x20030000
 800aa34:	20000900 	.word	0x20000900
 800aa38:	20000d40 	.word	0x20000d40
 800aa3c:	20000d44 	.word	0x20000d44

0800aa40 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 800aa40:	b580      	push	{r7, lr}
 800aa42:	b082      	sub	sp, #8
 800aa44:	af00      	add	r7, sp, #0
 800aa46:	6078      	str	r0, [r7, #4]
 800aa48:	460b      	mov	r3, r1
 800aa4a:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 800aa4c:	4b09      	ldr	r3, [pc, #36]	; (800aa74 <TL_BLE_SendCmd+0x34>)
 800aa4e:	685b      	ldr	r3, [r3, #4]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	2201      	movs	r2, #1
 800aa54:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 800aa56:	4b07      	ldr	r3, [pc, #28]	; (800aa74 <TL_BLE_SendCmd+0x34>)
 800aa58:	685b      	ldr	r3, [r3, #4]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	4619      	mov	r1, r3
 800aa5e:	2001      	movs	r0, #1
 800aa60:	f000 f96c 	bl	800ad3c <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 800aa64:	f001 f81c 	bl	800baa0 <HW_IPCC_BLE_SendCmd>

  return 0;
 800aa68:	2300      	movs	r3, #0
}
 800aa6a:	4618      	mov	r0, r3
 800aa6c:	3708      	adds	r7, #8
 800aa6e:	46bd      	mov	sp, r7
 800aa70:	bd80      	pop	{r7, pc}
 800aa72:	bf00      	nop
 800aa74:	20030000 	.word	0x20030000

0800aa78 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 800aa78:	b580      	push	{r7, lr}
 800aa7a:	b082      	sub	sp, #8
 800aa7c:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 800aa7e:	e01c      	b.n	800aaba <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 800aa80:	1d3b      	adds	r3, r7, #4
 800aa82:	4619      	mov	r1, r3
 800aa84:	4812      	ldr	r0, [pc, #72]	; (800aad0 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800aa86:	f000 fa76 	bl	800af76 <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	7a5b      	ldrb	r3, [r3, #9]
 800aa8e:	2b0f      	cmp	r3, #15
 800aa90:	d003      	beq.n	800aa9a <HW_IPCC_BLE_RxEvtNot+0x22>
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	7a5b      	ldrb	r3, [r3, #9]
 800aa96:	2b0e      	cmp	r3, #14
 800aa98:	d105      	bne.n	800aaa6 <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	4619      	mov	r1, r3
 800aa9e:	2002      	movs	r0, #2
 800aaa0:	f000 f94c 	bl	800ad3c <OutputDbgTrace>
 800aaa4:	e004      	b.n	800aab0 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	4619      	mov	r1, r3
 800aaaa:	2003      	movs	r0, #3
 800aaac:	f000 f946 	bl	800ad3c <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 800aab0:	4b08      	ldr	r3, [pc, #32]	; (800aad4 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	687a      	ldr	r2, [r7, #4]
 800aab6:	4610      	mov	r0, r2
 800aab8:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 800aaba:	4805      	ldr	r0, [pc, #20]	; (800aad0 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800aabc:	f000 f9cc 	bl	800ae58 <LST_is_empty>
 800aac0:	4603      	mov	r3, r0
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d0dc      	beq.n	800aa80 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 800aac6:	bf00      	nop
}
 800aac8:	3708      	adds	r7, #8
 800aaca:	46bd      	mov	sp, r7
 800aacc:	bd80      	pop	{r7, pc}
 800aace:	bf00      	nop
 800aad0:	200300c8 	.word	0x200300c8
 800aad4:	20000d40 	.word	0x20000d40

0800aad8 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 800aad8:	b580      	push	{r7, lr}
 800aada:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 800aadc:	4b02      	ldr	r3, [pc, #8]	; (800aae8 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	4798      	blx	r3

  return;
 800aae2:	bf00      	nop
}
 800aae4:	bd80      	pop	{r7, pc}
 800aae6:	bf00      	nop
 800aae8:	20000d44 	.word	0x20000d44

0800aaec <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 800aaec:	b580      	push	{r7, lr}
 800aaee:	b084      	sub	sp, #16
 800aaf0:	af00      	add	r7, sp, #0
 800aaf2:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 800aaf8:	480d      	ldr	r0, [pc, #52]	; (800ab30 <TL_SYS_Init+0x44>)
 800aafa:	f000 f99d 	bl	800ae38 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 800aafe:	4b0d      	ldr	r3, [pc, #52]	; (800ab34 <TL_SYS_Init+0x48>)
 800ab00:	68db      	ldr	r3, [r3, #12]
 800ab02:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	689a      	ldr	r2, [r3, #8]
 800ab08:	68bb      	ldr	r3, [r7, #8]
 800ab0a:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 800ab0c:	68bb      	ldr	r3, [r7, #8]
 800ab0e:	4a08      	ldr	r2, [pc, #32]	; (800ab30 <TL_SYS_Init+0x44>)
 800ab10:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 800ab12:	f000 ffe7 	bl	800bae4 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	4a07      	ldr	r2, [pc, #28]	; (800ab38 <TL_SYS_Init+0x4c>)
 800ab1c:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	685b      	ldr	r3, [r3, #4]
 800ab22:	4a06      	ldr	r2, [pc, #24]	; (800ab3c <TL_SYS_Init+0x50>)
 800ab24:	6013      	str	r3, [r2, #0]

  return 0;
 800ab26:	2300      	movs	r3, #0
}
 800ab28:	4618      	mov	r0, r3
 800ab2a:	3710      	adds	r7, #16
 800ab2c:	46bd      	mov	sp, r7
 800ab2e:	bd80      	pop	{r7, pc}
 800ab30:	200300d0 	.word	0x200300d0
 800ab34:	20030000 	.word	0x20030000
 800ab38:	20000d48 	.word	0x20000d48
 800ab3c:	20000d4c 	.word	0x20000d4c

0800ab40 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 800ab40:	b580      	push	{r7, lr}
 800ab42:	b082      	sub	sp, #8
 800ab44:	af00      	add	r7, sp, #0
 800ab46:	6078      	str	r0, [r7, #4]
 800ab48:	460b      	mov	r3, r1
 800ab4a:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 800ab4c:	4b09      	ldr	r3, [pc, #36]	; (800ab74 <TL_SYS_SendCmd+0x34>)
 800ab4e:	68db      	ldr	r3, [r3, #12]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	2210      	movs	r2, #16
 800ab54:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 800ab56:	4b07      	ldr	r3, [pc, #28]	; (800ab74 <TL_SYS_SendCmd+0x34>)
 800ab58:	68db      	ldr	r3, [r3, #12]
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	4619      	mov	r1, r3
 800ab5e:	2004      	movs	r0, #4
 800ab60:	f000 f8ec 	bl	800ad3c <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 800ab64:	f000 ffc8 	bl	800baf8 <HW_IPCC_SYS_SendCmd>

  return 0;
 800ab68:	2300      	movs	r3, #0
}
 800ab6a:	4618      	mov	r0, r3
 800ab6c:	3708      	adds	r7, #8
 800ab6e:	46bd      	mov	sp, r7
 800ab70:	bd80      	pop	{r7, pc}
 800ab72:	bf00      	nop
 800ab74:	20030000 	.word	0x20030000

0800ab78 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 800ab78:	b580      	push	{r7, lr}
 800ab7a:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800ab7c:	4b07      	ldr	r3, [pc, #28]	; (800ab9c <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800ab7e:	68db      	ldr	r3, [r3, #12]
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	4619      	mov	r1, r3
 800ab84:	2005      	movs	r0, #5
 800ab86:	f000 f8d9 	bl	800ad3c <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800ab8a:	4b05      	ldr	r3, [pc, #20]	; (800aba0 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	4a03      	ldr	r2, [pc, #12]	; (800ab9c <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800ab90:	68d2      	ldr	r2, [r2, #12]
 800ab92:	6812      	ldr	r2, [r2, #0]
 800ab94:	4610      	mov	r0, r2
 800ab96:	4798      	blx	r3

  return;
 800ab98:	bf00      	nop
}
 800ab9a:	bd80      	pop	{r7, pc}
 800ab9c:	20030000 	.word	0x20030000
 800aba0:	20000d48 	.word	0x20000d48

0800aba4 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 800aba4:	b580      	push	{r7, lr}
 800aba6:	b082      	sub	sp, #8
 800aba8:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800abaa:	e00e      	b.n	800abca <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 800abac:	1d3b      	adds	r3, r7, #4
 800abae:	4619      	mov	r1, r3
 800abb0:	480b      	ldr	r0, [pc, #44]	; (800abe0 <HW_IPCC_SYS_EvtNot+0x3c>)
 800abb2:	f000 f9e0 	bl	800af76 <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	4619      	mov	r1, r3
 800abba:	2006      	movs	r0, #6
 800abbc:	f000 f8be 	bl	800ad3c <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 800abc0:	4b08      	ldr	r3, [pc, #32]	; (800abe4 <HW_IPCC_SYS_EvtNot+0x40>)
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	687a      	ldr	r2, [r7, #4]
 800abc6:	4610      	mov	r0, r2
 800abc8:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800abca:	4805      	ldr	r0, [pc, #20]	; (800abe0 <HW_IPCC_SYS_EvtNot+0x3c>)
 800abcc:	f000 f944 	bl	800ae58 <LST_is_empty>
 800abd0:	4603      	mov	r3, r0
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d0ea      	beq.n	800abac <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 800abd6:	bf00      	nop
}
 800abd8:	3708      	adds	r7, #8
 800abda:	46bd      	mov	sp, r7
 800abdc:	bd80      	pop	{r7, pc}
 800abde:	bf00      	nop
 800abe0:	200300d0 	.word	0x200300d0
 800abe4:	20000d4c 	.word	0x20000d4c

0800abe8 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 800abe8:	b580      	push	{r7, lr}
 800abea:	b082      	sub	sp, #8
 800abec:	af00      	add	r7, sp, #0
 800abee:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 800abf0:	4817      	ldr	r0, [pc, #92]	; (800ac50 <TL_MM_Init+0x68>)
 800abf2:	f000 f921 	bl	800ae38 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 800abf6:	4817      	ldr	r0, [pc, #92]	; (800ac54 <TL_MM_Init+0x6c>)
 800abf8:	f000 f91e 	bl	800ae38 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 800abfc:	4b16      	ldr	r3, [pc, #88]	; (800ac58 <TL_MM_Init+0x70>)
 800abfe:	691b      	ldr	r3, [r3, #16]
 800ac00:	4a16      	ldr	r2, [pc, #88]	; (800ac5c <TL_MM_Init+0x74>)
 800ac02:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 800ac04:	4b15      	ldr	r3, [pc, #84]	; (800ac5c <TL_MM_Init+0x74>)
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	687a      	ldr	r2, [r7, #4]
 800ac0a:	6892      	ldr	r2, [r2, #8]
 800ac0c:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 800ac0e:	4b13      	ldr	r3, [pc, #76]	; (800ac5c <TL_MM_Init+0x74>)
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	687a      	ldr	r2, [r7, #4]
 800ac14:	68d2      	ldr	r2, [r2, #12]
 800ac16:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 800ac18:	4b10      	ldr	r3, [pc, #64]	; (800ac5c <TL_MM_Init+0x74>)
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	4a0c      	ldr	r2, [pc, #48]	; (800ac50 <TL_MM_Init+0x68>)
 800ac1e:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 800ac20:	4b0e      	ldr	r3, [pc, #56]	; (800ac5c <TL_MM_Init+0x74>)
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	687a      	ldr	r2, [r7, #4]
 800ac26:	6812      	ldr	r2, [r2, #0]
 800ac28:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 800ac2a:	4b0c      	ldr	r3, [pc, #48]	; (800ac5c <TL_MM_Init+0x74>)
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	687a      	ldr	r2, [r7, #4]
 800ac30:	6852      	ldr	r2, [r2, #4]
 800ac32:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 800ac34:	4b09      	ldr	r3, [pc, #36]	; (800ac5c <TL_MM_Init+0x74>)
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	687a      	ldr	r2, [r7, #4]
 800ac3a:	6912      	ldr	r2, [r2, #16]
 800ac3c:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 800ac3e:	4b07      	ldr	r3, [pc, #28]	; (800ac5c <TL_MM_Init+0x74>)
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	687a      	ldr	r2, [r7, #4]
 800ac44:	6952      	ldr	r2, [r2, #20]
 800ac46:	619a      	str	r2, [r3, #24]

  return;
 800ac48:	bf00      	nop
}
 800ac4a:	3708      	adds	r7, #8
 800ac4c:	46bd      	mov	sp, r7
 800ac4e:	bd80      	pop	{r7, pc}
 800ac50:	200300b8 	.word	0x200300b8
 800ac54:	20000d38 	.word	0x20000d38
 800ac58:	20030000 	.word	0x20030000
 800ac5c:	20000d50 	.word	0x20000d50

0800ac60 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 800ac60:	b580      	push	{r7, lr}
 800ac62:	b082      	sub	sp, #8
 800ac64:	af00      	add	r7, sp, #0
 800ac66:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 800ac68:	6879      	ldr	r1, [r7, #4]
 800ac6a:	4807      	ldr	r0, [pc, #28]	; (800ac88 <TL_MM_EvtDone+0x28>)
 800ac6c:	f000 f93c 	bl	800aee8 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 800ac70:	6879      	ldr	r1, [r7, #4]
 800ac72:	2000      	movs	r0, #0
 800ac74:	f000 f862 	bl	800ad3c <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 800ac78:	4804      	ldr	r0, [pc, #16]	; (800ac8c <TL_MM_EvtDone+0x2c>)
 800ac7a:	f000 ff63 	bl	800bb44 <HW_IPCC_MM_SendFreeBuf>

  return;
 800ac7e:	bf00      	nop
}
 800ac80:	3708      	adds	r7, #8
 800ac82:	46bd      	mov	sp, r7
 800ac84:	bd80      	pop	{r7, pc}
 800ac86:	bf00      	nop
 800ac88:	20000d38 	.word	0x20000d38
 800ac8c:	0800ac91 	.word	0x0800ac91

0800ac90 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 800ac90:	b580      	push	{r7, lr}
 800ac92:	b082      	sub	sp, #8
 800ac94:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800ac96:	e00c      	b.n	800acb2 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 800ac98:	1d3b      	adds	r3, r7, #4
 800ac9a:	4619      	mov	r1, r3
 800ac9c:	480a      	ldr	r0, [pc, #40]	; (800acc8 <SendFreeBuf+0x38>)
 800ac9e:	f000 f96a 	bl	800af76 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 800aca2:	4b0a      	ldr	r3, [pc, #40]	; (800accc <SendFreeBuf+0x3c>)
 800aca4:	691b      	ldr	r3, [r3, #16]
 800aca6:	691b      	ldr	r3, [r3, #16]
 800aca8:	687a      	ldr	r2, [r7, #4]
 800acaa:	4611      	mov	r1, r2
 800acac:	4618      	mov	r0, r3
 800acae:	f000 f91b 	bl	800aee8 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800acb2:	4805      	ldr	r0, [pc, #20]	; (800acc8 <SendFreeBuf+0x38>)
 800acb4:	f000 f8d0 	bl	800ae58 <LST_is_empty>
 800acb8:	4603      	mov	r3, r0
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d0ec      	beq.n	800ac98 <SendFreeBuf+0x8>
  }

  return;
 800acbe:	bf00      	nop
}
 800acc0:	3708      	adds	r7, #8
 800acc2:	46bd      	mov	sp, r7
 800acc4:	bd80      	pop	{r7, pc}
 800acc6:	bf00      	nop
 800acc8:	20000d38 	.word	0x20000d38
 800accc:	20030000 	.word	0x20030000

0800acd0 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 800acd0:	b580      	push	{r7, lr}
 800acd2:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 800acd4:	4805      	ldr	r0, [pc, #20]	; (800acec <TL_TRACES_Init+0x1c>)
 800acd6:	f000 f8af 	bl	800ae38 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 800acda:	4b05      	ldr	r3, [pc, #20]	; (800acf0 <TL_TRACES_Init+0x20>)
 800acdc:	695b      	ldr	r3, [r3, #20]
 800acde:	4a03      	ldr	r2, [pc, #12]	; (800acec <TL_TRACES_Init+0x1c>)
 800ace0:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 800ace2:	f000 ff65 	bl	800bbb0 <HW_IPCC_TRACES_Init>

  return;
 800ace6:	bf00      	nop
}
 800ace8:	bd80      	pop	{r7, pc}
 800acea:	bf00      	nop
 800acec:	200300c0 	.word	0x200300c0
 800acf0:	20030000 	.word	0x20030000

0800acf4 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 800acf4:	b580      	push	{r7, lr}
 800acf6:	b082      	sub	sp, #8
 800acf8:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800acfa:	e008      	b.n	800ad0e <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 800acfc:	1d3b      	adds	r3, r7, #4
 800acfe:	4619      	mov	r1, r3
 800ad00:	4808      	ldr	r0, [pc, #32]	; (800ad24 <HW_IPCC_TRACES_EvtNot+0x30>)
 800ad02:	f000 f938 	bl	800af76 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	4618      	mov	r0, r3
 800ad0a:	f000 f80d 	bl	800ad28 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800ad0e:	4805      	ldr	r0, [pc, #20]	; (800ad24 <HW_IPCC_TRACES_EvtNot+0x30>)
 800ad10:	f000 f8a2 	bl	800ae58 <LST_is_empty>
 800ad14:	4603      	mov	r3, r0
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d0f0      	beq.n	800acfc <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 800ad1a:	bf00      	nop
}
 800ad1c:	3708      	adds	r7, #8
 800ad1e:	46bd      	mov	sp, r7
 800ad20:	bd80      	pop	{r7, pc}
 800ad22:	bf00      	nop
 800ad24:	200300c0 	.word	0x200300c0

0800ad28 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 800ad28:	b480      	push	{r7}
 800ad2a:	b083      	sub	sp, #12
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 800ad30:	bf00      	nop
 800ad32:	370c      	adds	r7, #12
 800ad34:	46bd      	mov	sp, r7
 800ad36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad3a:	4770      	bx	lr

0800ad3c <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 800ad3c:	b480      	push	{r7}
 800ad3e:	b085      	sub	sp, #20
 800ad40:	af00      	add	r7, sp, #0
 800ad42:	4603      	mov	r3, r0
 800ad44:	6039      	str	r1, [r7, #0]
 800ad46:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 800ad48:	79fb      	ldrb	r3, [r7, #7]
 800ad4a:	2b06      	cmp	r3, #6
 800ad4c:	d845      	bhi.n	800adda <OutputDbgTrace+0x9e>
 800ad4e:	a201      	add	r2, pc, #4	; (adr r2, 800ad54 <OutputDbgTrace+0x18>)
 800ad50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad54:	0800ad71 	.word	0x0800ad71
 800ad58:	0800ad95 	.word	0x0800ad95
 800ad5c:	0800ad9b 	.word	0x0800ad9b
 800ad60:	0800adaf 	.word	0x0800adaf
 800ad64:	0800adbb 	.word	0x0800adbb
 800ad68:	0800adc1 	.word	0x0800adc1
 800ad6c:	0800adcf 	.word	0x0800adcf
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800ad70:	683b      	ldr	r3, [r7, #0]
 800ad72:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	7a5b      	ldrb	r3, [r3, #9]
 800ad78:	2bff      	cmp	r3, #255	; 0xff
 800ad7a:	d005      	beq.n	800ad88 <OutputDbgTrace+0x4c>
 800ad7c:	2bff      	cmp	r3, #255	; 0xff
 800ad7e:	dc05      	bgt.n	800ad8c <OutputDbgTrace+0x50>
 800ad80:	2b0e      	cmp	r3, #14
 800ad82:	d005      	beq.n	800ad90 <OutputDbgTrace+0x54>
 800ad84:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 800ad86:	e001      	b.n	800ad8c <OutputDbgTrace+0x50>
          break;
 800ad88:	bf00      	nop
 800ad8a:	e027      	b.n	800addc <OutputDbgTrace+0xa0>
          break;
 800ad8c:	bf00      	nop
 800ad8e:	e025      	b.n	800addc <OutputDbgTrace+0xa0>
          break;
 800ad90:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 800ad92:	e023      	b.n	800addc <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800ad94:	683b      	ldr	r3, [r7, #0]
 800ad96:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800ad98:	e020      	b.n	800addc <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800ad9a:	683b      	ldr	r3, [r7, #0]
 800ad9c:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	7a5b      	ldrb	r3, [r3, #9]
 800ada2:	2b0e      	cmp	r3, #14
 800ada4:	d001      	beq.n	800adaa <OutputDbgTrace+0x6e>
 800ada6:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800ada8:	e000      	b.n	800adac <OutputDbgTrace+0x70>
          break;
 800adaa:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800adac:	e016      	b.n	800addc <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800adae:	683b      	ldr	r3, [r7, #0]
 800adb0:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	7a5b      	ldrb	r3, [r3, #9]
 800adb6:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800adb8:	e010      	b.n	800addc <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800adba:	683b      	ldr	r3, [r7, #0]
 800adbc:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800adbe:	e00d      	b.n	800addc <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800adc0:	683b      	ldr	r3, [r7, #0]
 800adc2:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	7a5b      	ldrb	r3, [r3, #9]
 800adc8:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800adca:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800adcc:	e006      	b.n	800addc <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800adce:	683b      	ldr	r3, [r7, #0]
 800add0:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	7a5b      	ldrb	r3, [r3, #9]
 800add6:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800add8:	e000      	b.n	800addc <OutputDbgTrace+0xa0>

    default:
      break;
 800adda:	bf00      	nop
  }

  return;
 800addc:	bf00      	nop
}
 800adde:	3714      	adds	r7, #20
 800ade0:	46bd      	mov	sp, r7
 800ade2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade6:	4770      	bx	lr

0800ade8 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 800ade8:	b480      	push	{r7}
 800adea:	b085      	sub	sp, #20
 800adec:	af00      	add	r7, sp, #0
 800adee:	4603      	mov	r3, r0
 800adf0:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 800adf2:	4b0f      	ldr	r3, [pc, #60]	; (800ae30 <OTP_Read+0x48>)
 800adf4:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800adf6:	e002      	b.n	800adfe <OTP_Read+0x16>
  {
    p_id -= 8 ;
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	3b08      	subs	r3, #8
 800adfc:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	3307      	adds	r3, #7
 800ae02:	781b      	ldrb	r3, [r3, #0]
 800ae04:	79fa      	ldrb	r2, [r7, #7]
 800ae06:	429a      	cmp	r2, r3
 800ae08:	d003      	beq.n	800ae12 <OTP_Read+0x2a>
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	4a09      	ldr	r2, [pc, #36]	; (800ae34 <OTP_Read+0x4c>)
 800ae0e:	4293      	cmp	r3, r2
 800ae10:	d1f2      	bne.n	800adf8 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	3307      	adds	r3, #7
 800ae16:	781b      	ldrb	r3, [r3, #0]
 800ae18:	79fa      	ldrb	r2, [r7, #7]
 800ae1a:	429a      	cmp	r2, r3
 800ae1c:	d001      	beq.n	800ae22 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 800ae1e:	2300      	movs	r3, #0
 800ae20:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 800ae22:	68fb      	ldr	r3, [r7, #12]
}
 800ae24:	4618      	mov	r0, r3
 800ae26:	3714      	adds	r7, #20
 800ae28:	46bd      	mov	sp, r7
 800ae2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae2e:	4770      	bx	lr
 800ae30:	1fff73f8 	.word	0x1fff73f8
 800ae34:	1fff7000 	.word	0x1fff7000

0800ae38 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 800ae38:	b480      	push	{r7}
 800ae3a:	b083      	sub	sp, #12
 800ae3c:	af00      	add	r7, sp, #0
 800ae3e:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	687a      	ldr	r2, [r7, #4]
 800ae44:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	687a      	ldr	r2, [r7, #4]
 800ae4a:	605a      	str	r2, [r3, #4]
}
 800ae4c:	bf00      	nop
 800ae4e:	370c      	adds	r7, #12
 800ae50:	46bd      	mov	sp, r7
 800ae52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae56:	4770      	bx	lr

0800ae58 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 800ae58:	b480      	push	{r7}
 800ae5a:	b087      	sub	sp, #28
 800ae5c:	af00      	add	r7, sp, #0
 800ae5e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ae60:	f3ef 8310 	mrs	r3, PRIMASK
 800ae64:	60fb      	str	r3, [r7, #12]
  return(result);
 800ae66:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800ae68:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800ae6a:	b672      	cpsid	i
}
 800ae6c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	687a      	ldr	r2, [r7, #4]
 800ae74:	429a      	cmp	r2, r3
 800ae76:	d102      	bne.n	800ae7e <LST_is_empty+0x26>
  {
    return_value = TRUE;
 800ae78:	2301      	movs	r3, #1
 800ae7a:	75fb      	strb	r3, [r7, #23]
 800ae7c:	e001      	b.n	800ae82 <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 800ae7e:	2300      	movs	r3, #0
 800ae80:	75fb      	strb	r3, [r7, #23]
 800ae82:	693b      	ldr	r3, [r7, #16]
 800ae84:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ae86:	68bb      	ldr	r3, [r7, #8]
 800ae88:	f383 8810 	msr	PRIMASK, r3
}
 800ae8c:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 800ae8e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae90:	4618      	mov	r0, r3
 800ae92:	371c      	adds	r7, #28
 800ae94:	46bd      	mov	sp, r7
 800ae96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae9a:	4770      	bx	lr

0800ae9c <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 800ae9c:	b480      	push	{r7}
 800ae9e:	b087      	sub	sp, #28
 800aea0:	af00      	add	r7, sp, #0
 800aea2:	6078      	str	r0, [r7, #4]
 800aea4:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aea6:	f3ef 8310 	mrs	r3, PRIMASK
 800aeaa:	60fb      	str	r3, [r7, #12]
  return(result);
 800aeac:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800aeae:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800aeb0:	b672      	cpsid	i
}
 800aeb2:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	681a      	ldr	r2, [r3, #0]
 800aeb8:	683b      	ldr	r3, [r7, #0]
 800aeba:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800aebc:	683b      	ldr	r3, [r7, #0]
 800aebe:	687a      	ldr	r2, [r7, #4]
 800aec0:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	683a      	ldr	r2, [r7, #0]
 800aec6:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800aec8:	683b      	ldr	r3, [r7, #0]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	683a      	ldr	r2, [r7, #0]
 800aece:	605a      	str	r2, [r3, #4]
 800aed0:	697b      	ldr	r3, [r7, #20]
 800aed2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aed4:	693b      	ldr	r3, [r7, #16]
 800aed6:	f383 8810 	msr	PRIMASK, r3
}
 800aeda:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800aedc:	bf00      	nop
 800aede:	371c      	adds	r7, #28
 800aee0:	46bd      	mov	sp, r7
 800aee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aee6:	4770      	bx	lr

0800aee8 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 800aee8:	b480      	push	{r7}
 800aeea:	b087      	sub	sp, #28
 800aeec:	af00      	add	r7, sp, #0
 800aeee:	6078      	str	r0, [r7, #4]
 800aef0:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aef2:	f3ef 8310 	mrs	r3, PRIMASK
 800aef6:	60fb      	str	r3, [r7, #12]
  return(result);
 800aef8:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800aefa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800aefc:	b672      	cpsid	i
}
 800aefe:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 800af00:	683b      	ldr	r3, [r7, #0]
 800af02:	687a      	ldr	r2, [r7, #4]
 800af04:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	685a      	ldr	r2, [r3, #4]
 800af0a:	683b      	ldr	r3, [r7, #0]
 800af0c:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	683a      	ldr	r2, [r7, #0]
 800af12:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800af14:	683b      	ldr	r3, [r7, #0]
 800af16:	685b      	ldr	r3, [r3, #4]
 800af18:	683a      	ldr	r2, [r7, #0]
 800af1a:	601a      	str	r2, [r3, #0]
 800af1c:	697b      	ldr	r3, [r7, #20]
 800af1e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800af20:	693b      	ldr	r3, [r7, #16]
 800af22:	f383 8810 	msr	PRIMASK, r3
}
 800af26:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800af28:	bf00      	nop
 800af2a:	371c      	adds	r7, #28
 800af2c:	46bd      	mov	sp, r7
 800af2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af32:	4770      	bx	lr

0800af34 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 800af34:	b480      	push	{r7}
 800af36:	b087      	sub	sp, #28
 800af38:	af00      	add	r7, sp, #0
 800af3a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800af3c:	f3ef 8310 	mrs	r3, PRIMASK
 800af40:	60fb      	str	r3, [r7, #12]
  return(result);
 800af42:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800af44:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800af46:	b672      	cpsid	i
}
 800af48:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	685b      	ldr	r3, [r3, #4]
 800af4e:	687a      	ldr	r2, [r7, #4]
 800af50:	6812      	ldr	r2, [r2, #0]
 800af52:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	687a      	ldr	r2, [r7, #4]
 800af5a:	6852      	ldr	r2, [r2, #4]
 800af5c:	605a      	str	r2, [r3, #4]
 800af5e:	697b      	ldr	r3, [r7, #20]
 800af60:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800af62:	693b      	ldr	r3, [r7, #16]
 800af64:	f383 8810 	msr	PRIMASK, r3
}
 800af68:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800af6a:	bf00      	nop
 800af6c:	371c      	adds	r7, #28
 800af6e:	46bd      	mov	sp, r7
 800af70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af74:	4770      	bx	lr

0800af76 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800af76:	b580      	push	{r7, lr}
 800af78:	b086      	sub	sp, #24
 800af7a:	af00      	add	r7, sp, #0
 800af7c:	6078      	str	r0, [r7, #4]
 800af7e:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800af80:	f3ef 8310 	mrs	r3, PRIMASK
 800af84:	60fb      	str	r3, [r7, #12]
  return(result);
 800af86:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800af88:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800af8a:	b672      	cpsid	i
}
 800af8c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	681a      	ldr	r2, [r3, #0]
 800af92:	683b      	ldr	r3, [r7, #0]
 800af94:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	4618      	mov	r0, r3
 800af9c:	f7ff ffca 	bl	800af34 <LST_remove_node>
 800afa0:	697b      	ldr	r3, [r7, #20]
 800afa2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800afa4:	693b      	ldr	r3, [r7, #16]
 800afa6:	f383 8810 	msr	PRIMASK, r3
}
 800afaa:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800afac:	bf00      	nop
 800afae:	3718      	adds	r7, #24
 800afb0:	46bd      	mov	sp, r7
 800afb2:	bd80      	pop	{r7, pc}

0800afb4 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 800afb4:	b480      	push	{r7}
 800afb6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 800afb8:	4b03      	ldr	r3, [pc, #12]	; (800afc8 <LL_FLASH_GetUDN+0x14>)
 800afba:	681b      	ldr	r3, [r3, #0]
}
 800afbc:	4618      	mov	r0, r3
 800afbe:	46bd      	mov	sp, r7
 800afc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afc4:	4770      	bx	lr
 800afc6:	bf00      	nop
 800afc8:	1fff7580 	.word	0x1fff7580

0800afcc <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 800afcc:	b480      	push	{r7}
 800afce:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 800afd0:	4b03      	ldr	r3, [pc, #12]	; (800afe0 <LL_FLASH_GetDeviceID+0x14>)
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	b2db      	uxtb	r3, r3
}
 800afd6:	4618      	mov	r0, r3
 800afd8:	46bd      	mov	sp, r7
 800afda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afde:	4770      	bx	lr
 800afe0:	1fff7584 	.word	0x1fff7584

0800afe4 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 800afe4:	b480      	push	{r7}
 800afe6:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 800afe8:	4b03      	ldr	r3, [pc, #12]	; (800aff8 <LL_FLASH_GetSTCompanyID+0x14>)
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	0a1b      	lsrs	r3, r3, #8
}
 800afee:	4618      	mov	r0, r3
 800aff0:	46bd      	mov	sp, r7
 800aff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff6:	4770      	bx	lr
 800aff8:	1fff7584 	.word	0x1fff7584

0800affc <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 800affc:	b5b0      	push	{r4, r5, r7, lr}
 800affe:	b090      	sub	sp, #64	; 0x40
 800b000:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
#if (RADIO_ACTIVITY_EVENT != 0)
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800b002:	2392      	movs	r3, #146	; 0x92
 800b004:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#endif /* RADIO_ACTIVITY_EVENT != 0 */
  /* USER CODE BEGIN APP_BLE_Init_1 */

  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 800b008:	4b25      	ldr	r3, [pc, #148]	; (800b0a0 <APP_BLE_Init+0xa4>)
 800b00a:	1d3c      	adds	r4, r7, #4
 800b00c:	461d      	mov	r5, r3
 800b00e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b010:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b012:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b014:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b016:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b018:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b01a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800b01e:	c403      	stmia	r4!, {r0, r1}
 800b020:	8022      	strh	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 800b022:	f000 f905 	bl	800b230 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 800b026:	2101      	movs	r1, #1
 800b028:	2002      	movs	r0, #2
 800b02a:	f000 fde9 	bl	800bc00 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 800b02e:	4a1d      	ldr	r2, [pc, #116]	; (800b0a4 <APP_BLE_Init+0xa8>)
 800b030:	2100      	movs	r1, #0
 800b032:	2002      	movs	r0, #2
 800b034:	f000 ff10 	bl	800be58 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 800b038:	1d3b      	adds	r3, r7, #4
 800b03a:	4618      	mov	r0, r3
 800b03c:	f7ff f8d0 	bl	800a1e0 <SHCI_C2_BLE_Init>
 800b040:	4603      	mov	r3, r0
 800b042:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  if (status != SHCI_Success)
 800b046:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d001      	beq.n	800b052 <APP_BLE_Init+0x56>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 800b04e:	f7f7 fb7d 	bl	800274c <Error_Handler>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 800b052:	f000 f903 	bl	800b25c <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 800b056:	f7ff f81d 	bl	800a094 <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800b05a:	4b13      	ldr	r3, [pc, #76]	; (800b0a8 <APP_BLE_Init+0xac>)
 800b05c:	2200      	movs	r2, #0
 800b05e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 800b062:	4b11      	ldr	r3, [pc, #68]	; (800b0a8 <APP_BLE_Init+0xac>)
 800b064:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b068:	82da      	strh	r2, [r3, #22]

  /**
   * From here, all initialization are BLE application specific
   */

  UTIL_SEQ_RegTask(1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 800b06a:	4a10      	ldr	r2, [pc, #64]	; (800b0ac <APP_BLE_Init+0xb0>)
 800b06c:	2100      	movs	r1, #0
 800b06e:	2001      	movs	r0, #1
 800b070:	f000 fef2 	bl	800be58 <UTIL_SEQ_RegTask>

  /**
   * Initialization of ADV - Ad Manufacturer Element - Support OTA Bit Mask
   */
#if (RADIO_ACTIVITY_EVENT != 0)
  ret = aci_hal_set_radio_activity_mask(0x0006);
 800b074:	2006      	movs	r0, #6
 800b076:	f7fe fe80 	bl	8009d7a <aci_hal_set_radio_activity_mask>
 800b07a:	4603      	mov	r3, r0
 800b07c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

  /**
   * Initialize Custom Template Application
   */
  Custom_APP_Init();
 800b080:	f000 fa9b 	bl	800b5ba <Custom_APP_Init>
  /* USER CODE END APP_BLE_Init_3 */

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 800b084:	4b08      	ldr	r3, [pc, #32]	; (800b0a8 <APP_BLE_Init+0xac>)
 800b086:	2200      	movs	r2, #0
 800b088:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 800b08a:	4b07      	ldr	r3, [pc, #28]	; (800b0a8 <APP_BLE_Init+0xac>)
 800b08c:	2200      	movs	r2, #0
 800b08e:	761a      	strb	r2, [r3, #24]

  /**
   * Start to Advertise to be connected by a Client
   */
  Adv_Request(APP_BLE_FAST_ADV);
 800b090:	2001      	movs	r0, #1
 800b092:	f000 f997 	bl	800b3c4 <Adv_Request>

  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */

  return;
 800b096:	bf00      	nop
}
 800b098:	3740      	adds	r7, #64	; 0x40
 800b09a:	46bd      	mov	sp, r7
 800b09c:	bdb0      	pop	{r4, r5, r7, pc}
 800b09e:	bf00      	nop
 800b0a0:	0800d598 	.word	0x0800d598
 800b0a4:	0800a3fd 	.word	0x0800a3fd
 800b0a8:	20000d5c 	.word	0x20000d5c
 800b0ac:	0800b4ad 	.word	0x0800b4ad

0800b0b0 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 800b0b0:	b580      	push	{r7, lr}
 800b0b2:	b08a      	sub	sp, #40	; 0x28
 800b0b4:	af00      	add	r7, sp, #0
 800b0b6:	6078      	str	r0, [r7, #4]
  hci_event_pckt    *p_event_pckt;
  evt_le_meta_event *p_meta_evt;
  evt_blecore_aci   *p_blecore_evt;
  tBleStatus        ret = BLE_STATUS_INVALID_PARAMS;
 800b0b8:	2392      	movs	r3, #146	; 0x92
 800b0ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	3301      	adds	r3, #1
 800b0c2:	623b      	str	r3, [r7, #32]

  switch (p_event_pckt->evt)
 800b0c4:	6a3b      	ldr	r3, [r7, #32]
 800b0c6:	781b      	ldrb	r3, [r3, #0]
 800b0c8:	2bff      	cmp	r3, #255	; 0xff
 800b0ca:	d053      	beq.n	800b174 <SVCCTL_App_Notification+0xc4>
 800b0cc:	2bff      	cmp	r3, #255	; 0xff
 800b0ce:	f300 80a1 	bgt.w	800b214 <SVCCTL_App_Notification+0x164>
 800b0d2:	2b05      	cmp	r3, #5
 800b0d4:	d002      	beq.n	800b0dc <SVCCTL_App_Notification+0x2c>
 800b0d6:	2b3e      	cmp	r3, #62	; 0x3e
 800b0d8:	d020      	beq.n	800b11c <SVCCTL_App_Notification+0x6c>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 800b0da:	e09b      	b.n	800b214 <SVCCTL_App_Notification+0x164>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
 800b0dc:	6a3b      	ldr	r3, [r7, #32]
 800b0de:	3302      	adds	r3, #2
 800b0e0:	60fb      	str	r3, [r7, #12]
      if (p_disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800b0e8:	b29a      	uxth	r2, r3
 800b0ea:	4b4e      	ldr	r3, [pc, #312]	; (800b224 <SVCCTL_App_Notification+0x174>)
 800b0ec:	8adb      	ldrh	r3, [r3, #22]
 800b0ee:	429a      	cmp	r2, r3
 800b0f0:	d106      	bne.n	800b100 <SVCCTL_App_Notification+0x50>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 800b0f2:	4b4c      	ldr	r3, [pc, #304]	; (800b224 <SVCCTL_App_Notification+0x174>)
 800b0f4:	2200      	movs	r2, #0
 800b0f6:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800b0f8:	4b4a      	ldr	r3, [pc, #296]	; (800b224 <SVCCTL_App_Notification+0x174>)
 800b0fa:	2200      	movs	r2, #0
 800b0fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
      Adv_Request(APP_BLE_FAST_ADV);
 800b100:	2001      	movs	r0, #1
 800b102:	f000 f95f 	bl	800b3c4 <Adv_Request>
      HandleNotification.Custom_Evt_Opcode = CUSTOM_DISCON_HANDLE_EVT;
 800b106:	4b48      	ldr	r3, [pc, #288]	; (800b228 <SVCCTL_App_Notification+0x178>)
 800b108:	2201      	movs	r2, #1
 800b10a:	701a      	strb	r2, [r3, #0]
      HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800b10c:	4b45      	ldr	r3, [pc, #276]	; (800b224 <SVCCTL_App_Notification+0x174>)
 800b10e:	8ada      	ldrh	r2, [r3, #22]
 800b110:	4b45      	ldr	r3, [pc, #276]	; (800b228 <SVCCTL_App_Notification+0x178>)
 800b112:	805a      	strh	r2, [r3, #2]
      Custom_APP_Notification(&HandleNotification);
 800b114:	4844      	ldr	r0, [pc, #272]	; (800b228 <SVCCTL_App_Notification+0x178>)
 800b116:	f000 fa3c 	bl	800b592 <Custom_APP_Notification>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 800b11a:	e07e      	b.n	800b21a <SVCCTL_App_Notification+0x16a>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 800b11c:	6a3b      	ldr	r3, [r7, #32]
 800b11e:	3302      	adds	r3, #2
 800b120:	617b      	str	r3, [r7, #20]
      switch (p_meta_evt->subevent)
 800b122:	697b      	ldr	r3, [r7, #20]
 800b124:	781b      	ldrb	r3, [r3, #0]
 800b126:	2b01      	cmp	r3, #1
 800b128:	d001      	beq.n	800b12e <SVCCTL_App_Notification+0x7e>
 800b12a:	2b03      	cmp	r3, #3
          break;
 800b12c:	e021      	b.n	800b172 <SVCCTL_App_Notification+0xc2>
          p_connection_complete_event = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
 800b12e:	697b      	ldr	r3, [r7, #20]
 800b130:	3301      	adds	r3, #1
 800b132:	613b      	str	r3, [r7, #16]
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 800b134:	4b3b      	ldr	r3, [pc, #236]	; (800b224 <SVCCTL_App_Notification+0x174>)
 800b136:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b13a:	2b04      	cmp	r3, #4
 800b13c:	d104      	bne.n	800b148 <SVCCTL_App_Notification+0x98>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 800b13e:	4b39      	ldr	r3, [pc, #228]	; (800b224 <SVCCTL_App_Notification+0x174>)
 800b140:	2206      	movs	r2, #6
 800b142:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 800b146:	e003      	b.n	800b150 <SVCCTL_App_Notification+0xa0>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 800b148:	4b36      	ldr	r3, [pc, #216]	; (800b224 <SVCCTL_App_Notification+0x174>)
 800b14a:	2205      	movs	r2, #5
 800b14c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_connection_complete_event->Connection_Handle;
 800b150:	693b      	ldr	r3, [r7, #16]
 800b152:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800b156:	b29a      	uxth	r2, r3
 800b158:	4b32      	ldr	r3, [pc, #200]	; (800b224 <SVCCTL_App_Notification+0x174>)
 800b15a:	82da      	strh	r2, [r3, #22]
          HandleNotification.Custom_Evt_Opcode = CUSTOM_CONN_HANDLE_EVT;
 800b15c:	4b32      	ldr	r3, [pc, #200]	; (800b228 <SVCCTL_App_Notification+0x178>)
 800b15e:	2200      	movs	r2, #0
 800b160:	701a      	strb	r2, [r3, #0]
          HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800b162:	4b30      	ldr	r3, [pc, #192]	; (800b224 <SVCCTL_App_Notification+0x174>)
 800b164:	8ada      	ldrh	r2, [r3, #22]
 800b166:	4b30      	ldr	r3, [pc, #192]	; (800b228 <SVCCTL_App_Notification+0x178>)
 800b168:	805a      	strh	r2, [r3, #2]
          Custom_APP_Notification(&HandleNotification);
 800b16a:	482f      	ldr	r0, [pc, #188]	; (800b228 <SVCCTL_App_Notification+0x178>)
 800b16c:	f000 fa11 	bl	800b592 <Custom_APP_Notification>
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 800b170:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 800b172:	e052      	b.n	800b21a <SVCCTL_App_Notification+0x16a>
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 800b174:	6a3b      	ldr	r3, [r7, #32]
 800b176:	3302      	adds	r3, #2
 800b178:	61fb      	str	r3, [r7, #28]
      switch (p_blecore_evt->ecode)
 800b17a:	69fb      	ldr	r3, [r7, #28]
 800b17c:	881b      	ldrh	r3, [r3, #0]
 800b17e:	b29b      	uxth	r3, r3
 800b180:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b184:	d040      	beq.n	800b208 <SVCCTL_App_Notification+0x158>
 800b186:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b18a:	dc45      	bgt.n	800b218 <SVCCTL_App_Notification+0x168>
 800b18c:	2b04      	cmp	r3, #4
 800b18e:	d03d      	beq.n	800b20c <SVCCTL_App_Notification+0x15c>
 800b190:	2b04      	cmp	r3, #4
 800b192:	db41      	blt.n	800b218 <SVCCTL_App_Notification+0x168>
 800b194:	f240 420a 	movw	r2, #1034	; 0x40a
 800b198:	4293      	cmp	r3, r2
 800b19a:	dc3d      	bgt.n	800b218 <SVCCTL_App_Notification+0x168>
 800b19c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b1a0:	dd3a      	ble.n	800b218 <SVCCTL_App_Notification+0x168>
 800b1a2:	f2a3 4301 	subw	r3, r3, #1025	; 0x401
 800b1a6:	2b09      	cmp	r3, #9
 800b1a8:	d836      	bhi.n	800b218 <SVCCTL_App_Notification+0x168>
 800b1aa:	a201      	add	r2, pc, #4	; (adr r2, 800b1b0 <SVCCTL_App_Notification+0x100>)
 800b1ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1b0:	0800b201 	.word	0x0800b201
 800b1b4:	0800b1d9 	.word	0x0800b1d9
 800b1b8:	0800b219 	.word	0x0800b219
 800b1bc:	0800b219 	.word	0x0800b219
 800b1c0:	0800b219 	.word	0x0800b219
 800b1c4:	0800b219 	.word	0x0800b219
 800b1c8:	0800b211 	.word	0x0800b211
 800b1cc:	0800b219 	.word	0x0800b219
 800b1d0:	0800b1ed 	.word	0x0800b1ed
 800b1d4:	0800b211 	.word	0x0800b211
          ret = aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, CFG_FIXED_PIN);
 800b1d8:	4b12      	ldr	r3, [pc, #72]	; (800b224 <SVCCTL_App_Notification+0x174>)
 800b1da:	8adb      	ldrh	r3, [r3, #22]
 800b1dc:	4913      	ldr	r1, [pc, #76]	; (800b22c <SVCCTL_App_Notification+0x17c>)
 800b1de:	4618      	mov	r0, r3
 800b1e0:	f7fe f822 	bl	8009228 <aci_gap_pass_key_resp>
 800b1e4:	4603      	mov	r3, r0
 800b1e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          break;
 800b1ea:	e012      	b.n	800b212 <SVCCTL_App_Notification+0x162>
          ret = aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES);
 800b1ec:	4b0d      	ldr	r3, [pc, #52]	; (800b224 <SVCCTL_App_Notification+0x174>)
 800b1ee:	8adb      	ldrh	r3, [r3, #22]
 800b1f0:	2101      	movs	r1, #1
 800b1f2:	4618      	mov	r0, r3
 800b1f4:	f7fe f9c2 	bl	800957c <aci_gap_numeric_comparison_value_confirm_yesno>
 800b1f8:	4603      	mov	r3, r0
 800b1fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          break;
 800b1fe:	e008      	b.n	800b212 <SVCCTL_App_Notification+0x162>
          p_pairing_complete = (aci_gap_pairing_complete_event_rp0*)p_blecore_evt->data;
 800b200:	69fb      	ldr	r3, [r7, #28]
 800b202:	3302      	adds	r3, #2
 800b204:	61bb      	str	r3, [r7, #24]
          break;
 800b206:	e004      	b.n	800b212 <SVCCTL_App_Notification+0x162>
          break;
 800b208:	bf00      	nop
 800b20a:	e005      	b.n	800b218 <SVCCTL_App_Notification+0x168>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 800b20c:	bf00      	nop
 800b20e:	e003      	b.n	800b218 <SVCCTL_App_Notification+0x168>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 800b210:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800b212:	e001      	b.n	800b218 <SVCCTL_App_Notification+0x168>
      break;
 800b214:	bf00      	nop
 800b216:	e000      	b.n	800b21a <SVCCTL_App_Notification+0x16a>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800b218:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 800b21a:	2301      	movs	r3, #1
}
 800b21c:	4618      	mov	r0, r3
 800b21e:	3728      	adds	r7, #40	; 0x28
 800b220:	46bd      	mov	sp, r7
 800b222:	bd80      	pop	{r7, pc}
 800b224:	20000d5c 	.word	0x20000d5c
 800b228:	20000de0 	.word	0x20000de0
 800b22c:	0001b207 	.word	0x0001b207

0800b230 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 800b230:	b580      	push	{r7, lr}
 800b232:	b082      	sub	sp, #8
 800b234:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 800b236:	4b06      	ldr	r3, [pc, #24]	; (800b250 <Ble_Tl_Init+0x20>)
 800b238:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 800b23a:	4b06      	ldr	r3, [pc, #24]	; (800b254 <Ble_Tl_Init+0x24>)
 800b23c:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 800b23e:	463b      	mov	r3, r7
 800b240:	4619      	mov	r1, r3
 800b242:	4805      	ldr	r0, [pc, #20]	; (800b258 <Ble_Tl_Init+0x28>)
 800b244:	f7ff f8be 	bl	800a3c4 <hci_init>

  return;
 800b248:	bf00      	nop
}
 800b24a:	3708      	adds	r7, #8
 800b24c:	46bd      	mov	sp, r7
 800b24e:	bd80      	pop	{r7, pc}
 800b250:	200300d8 	.word	0x200300d8
 800b254:	0800b55d 	.word	0x0800b55d
 800b258:	0800b525 	.word	0x0800b525

0800b25c <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 800b25c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b25e:	b08d      	sub	sp, #52	; 0x34
 800b260:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 800b262:	2300      	movs	r3, #0
 800b264:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800b266:	2392      	movs	r3, #146	; 0x92
 800b268:	75fb      	strb	r3, [r7, #23]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 800b26a:	f7fe fdda 	bl	8009e22 <hci_reset>
 800b26e:	4603      	mov	r3, r0
 800b270:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 800b272:	f000 f8d7 	bl	800b424 <BleGetBdAddress>
 800b276:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 800b278:	693a      	ldr	r2, [r7, #16]
 800b27a:	2106      	movs	r1, #6
 800b27c:	2000      	movs	r0, #0
 800b27e:	f7fe fc90 	bl	8009ba2 <aci_hal_write_config_data>
 800b282:	4603      	mov	r3, r0
 800b284:	75fb      	strb	r3, [r7, #23]
#endif /* CFG_BLE_ADDRESS_TYPE != GAP_PUBLIC_ADDR */

  /**
   * Write Identity root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 800b286:	4a4a      	ldr	r2, [pc, #296]	; (800b3b0 <Ble_Hci_Gap_Gatt_Init+0x154>)
 800b288:	2110      	movs	r1, #16
 800b28a:	2018      	movs	r0, #24
 800b28c:	f7fe fc89 	bl	8009ba2 <aci_hal_write_config_data>
 800b290:	4603      	mov	r3, r0
 800b292:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 800b294:	4a47      	ldr	r2, [pc, #284]	; (800b3b4 <Ble_Hci_Gap_Gatt_Init+0x158>)
 800b296:	2110      	movs	r1, #16
 800b298:	2008      	movs	r0, #8
 800b29a:	f7fe fc82 	bl	8009ba2 <aci_hal_write_config_data>
 800b29e:	4603      	mov	r3, r0
 800b2a0:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 800b2a2:	2118      	movs	r1, #24
 800b2a4:	2001      	movs	r0, #1
 800b2a6:	f7fe fd01 	bl	8009cac <aci_hal_set_tx_power_level>
 800b2aa:	4603      	mov	r3, r0
 800b2ac:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 800b2ae:	f7fe f9cc 	bl	800964a <aci_gatt_init>
 800b2b2:	4603      	mov	r3, r0
 800b2b4:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 800b2b6:	2300      	movs	r3, #0
 800b2b8:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 800b2ba:	7bfb      	ldrb	r3, [r7, #15]
 800b2bc:	f043 0301 	orr.w	r3, r3, #1
 800b2c0:	73fb      	strb	r3, [r7, #15]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  if (role > 0)
 800b2c2:	7bfb      	ldrb	r3, [r7, #15]
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d01f      	beq.n	800b308 <Ble_Hci_Gap_Gatt_Init+0xac>
  {
    const char *name = CFG_GAP_DEVICE_NAME;
 800b2c8:	4b3b      	ldr	r3, [pc, #236]	; (800b3b8 <Ble_Hci_Gap_Gatt_Init+0x15c>)
 800b2ca:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 800b2cc:	1dba      	adds	r2, r7, #6
 800b2ce:	7bf8      	ldrb	r0, [r7, #15]
 800b2d0:	1cbb      	adds	r3, r7, #2
 800b2d2:	9301      	str	r3, [sp, #4]
 800b2d4:	1d3b      	adds	r3, r7, #4
 800b2d6:	9300      	str	r3, [sp, #0]
 800b2d8:	4613      	mov	r3, r2
 800b2da:	2208      	movs	r2, #8
 800b2dc:	2100      	movs	r1, #0
 800b2de:	f7fe f80a 	bl	80092f6 <aci_gap_init>
 800b2e2:	4603      	mov	r3, r0
 800b2e4:	75fb      	strb	r3, [r7, #23]
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 800b2e6:	88fc      	ldrh	r4, [r7, #6]
 800b2e8:	88bd      	ldrh	r5, [r7, #4]
 800b2ea:	68b8      	ldr	r0, [r7, #8]
 800b2ec:	f7f4 ff48 	bl	8000180 <strlen>
 800b2f0:	4603      	mov	r3, r0
 800b2f2:	b2da      	uxtb	r2, r3
 800b2f4:	68bb      	ldr	r3, [r7, #8]
 800b2f6:	9300      	str	r3, [sp, #0]
 800b2f8:	4613      	mov	r3, r2
 800b2fa:	2200      	movs	r2, #0
 800b2fc:	4629      	mov	r1, r5
 800b2fe:	4620      	mov	r0, r4
 800b300:	f7fe fba6 	bl	8009a50 <aci_gatt_update_char_value>
 800b304:	4603      	mov	r3, r0
 800b306:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 800b308:	88f8      	ldrh	r0, [r7, #6]
 800b30a:	8879      	ldrh	r1, [r7, #2]
 800b30c:	463b      	mov	r3, r7
 800b30e:	9300      	str	r3, [sp, #0]
 800b310:	2302      	movs	r3, #2
 800b312:	2200      	movs	r2, #0
 800b314:	f7fe fb9c 	bl	8009a50 <aci_gatt_update_char_value>
 800b318:	4603      	mov	r3, r0
 800b31a:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize Default PHY
   */
  ret = hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 800b31c:	2202      	movs	r2, #2
 800b31e:	2102      	movs	r1, #2
 800b320:	2000      	movs	r0, #0
 800b322:	f7fe fda2 	bl	8009e6a <hci_le_set_default_phy>
 800b326:	4603      	mov	r3, r0
 800b328:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 800b32a:	4b24      	ldr	r3, [pc, #144]	; (800b3bc <Ble_Hci_Gap_Gatt_Init+0x160>)
 800b32c:	2201      	movs	r2, #1
 800b32e:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 800b330:	4b22      	ldr	r3, [pc, #136]	; (800b3bc <Ble_Hci_Gap_Gatt_Init+0x160>)
 800b332:	781b      	ldrb	r3, [r3, #0]
 800b334:	4618      	mov	r0, r3
 800b336:	f7fd fe5f 	bl	8008ff8 <aci_gap_set_io_capability>
 800b33a:	4603      	mov	r3, r0
 800b33c:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 800b33e:	4b1f      	ldr	r3, [pc, #124]	; (800b3bc <Ble_Hci_Gap_Gatt_Init+0x160>)
 800b340:	2201      	movs	r2, #1
 800b342:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 800b344:	4b1d      	ldr	r3, [pc, #116]	; (800b3bc <Ble_Hci_Gap_Gatt_Init+0x160>)
 800b346:	2208      	movs	r2, #8
 800b348:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 800b34a:	4b1c      	ldr	r3, [pc, #112]	; (800b3bc <Ble_Hci_Gap_Gatt_Init+0x160>)
 800b34c:	2210      	movs	r2, #16
 800b34e:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 800b350:	4b1a      	ldr	r3, [pc, #104]	; (800b3bc <Ble_Hci_Gap_Gatt_Init+0x160>)
 800b352:	2200      	movs	r2, #0
 800b354:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 800b356:	4b19      	ldr	r3, [pc, #100]	; (800b3bc <Ble_Hci_Gap_Gatt_Init+0x160>)
 800b358:	4a19      	ldr	r2, [pc, #100]	; (800b3c0 <Ble_Hci_Gap_Gatt_Init+0x164>)
 800b35a:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 800b35c:	4b17      	ldr	r3, [pc, #92]	; (800b3bc <Ble_Hci_Gap_Gatt_Init+0x160>)
 800b35e:	2200      	movs	r2, #0
 800b360:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 800b362:	4b16      	ldr	r3, [pc, #88]	; (800b3bc <Ble_Hci_Gap_Gatt_Init+0x160>)
 800b364:	789c      	ldrb	r4, [r3, #2]
 800b366:	4b15      	ldr	r3, [pc, #84]	; (800b3bc <Ble_Hci_Gap_Gatt_Init+0x160>)
 800b368:	785d      	ldrb	r5, [r3, #1]
 800b36a:	4b14      	ldr	r3, [pc, #80]	; (800b3bc <Ble_Hci_Gap_Gatt_Init+0x160>)
 800b36c:	791b      	ldrb	r3, [r3, #4]
 800b36e:	4a13      	ldr	r2, [pc, #76]	; (800b3bc <Ble_Hci_Gap_Gatt_Init+0x160>)
 800b370:	7952      	ldrb	r2, [r2, #5]
 800b372:	4912      	ldr	r1, [pc, #72]	; (800b3bc <Ble_Hci_Gap_Gatt_Init+0x160>)
 800b374:	78c9      	ldrb	r1, [r1, #3]
 800b376:	4811      	ldr	r0, [pc, #68]	; (800b3bc <Ble_Hci_Gap_Gatt_Init+0x160>)
 800b378:	6880      	ldr	r0, [r0, #8]
 800b37a:	2600      	movs	r6, #0
 800b37c:	9604      	str	r6, [sp, #16]
 800b37e:	9003      	str	r0, [sp, #12]
 800b380:	9102      	str	r1, [sp, #8]
 800b382:	9201      	str	r2, [sp, #4]
 800b384:	9300      	str	r3, [sp, #0]
 800b386:	2300      	movs	r3, #0
 800b388:	2201      	movs	r2, #1
 800b38a:	4629      	mov	r1, r5
 800b38c:	4620      	mov	r0, r4
 800b38e:	f7fd fe87 	bl	80090a0 <aci_gap_set_authentication_requirement>
 800b392:	4603      	mov	r3, r0
 800b394:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 800b396:	4b09      	ldr	r3, [pc, #36]	; (800b3bc <Ble_Hci_Gap_Gatt_Init+0x160>)
 800b398:	789b      	ldrb	r3, [r3, #2]
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d003      	beq.n	800b3a6 <Ble_Hci_Gap_Gatt_Init+0x14a>
  {
    ret = aci_gap_configure_whitelist();
 800b39e:	f7fe f8c9 	bl	8009534 <aci_gap_configure_whitelist>
 800b3a2:	4603      	mov	r3, r0
 800b3a4:	75fb      	strb	r3, [r7, #23]
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
}
 800b3a6:	bf00      	nop
 800b3a8:	371c      	adds	r7, #28
 800b3aa:	46bd      	mov	sp, r7
 800b3ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b3ae:	bf00      	nop
 800b3b0:	0800d7e0 	.word	0x0800d7e0
 800b3b4:	0800d7f0 	.word	0x0800d7f0
 800b3b8:	0800d5d4 	.word	0x0800d5d4
 800b3bc:	20000d5c 	.word	0x20000d5c
 800b3c0:	0001b207 	.word	0x0001b207

0800b3c4 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t NewStatus)
{
 800b3c4:	b580      	push	{r7, lr}
 800b3c6:	b08c      	sub	sp, #48	; 0x30
 800b3c8:	af08      	add	r7, sp, #32
 800b3ca:	4603      	mov	r3, r0
 800b3cc:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800b3ce:	2392      	movs	r3, #146	; 0x92
 800b3d0:	73fb      	strb	r3, [r7, #15]

  BleApplicationContext.Device_Connection_Status = NewStatus;
 800b3d2:	4a12      	ldr	r2, [pc, #72]	; (800b41c <Adv_Request+0x58>)
 800b3d4:	79fb      	ldrb	r3, [r7, #7]
 800b3d6:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
  /* Start Fast or Low Power Advertising */
  ret = aci_gap_set_discoverable(ADV_TYPE,
 800b3da:	2300      	movs	r3, #0
 800b3dc:	9306      	str	r3, [sp, #24]
 800b3de:	2300      	movs	r3, #0
 800b3e0:	9305      	str	r3, [sp, #20]
 800b3e2:	2300      	movs	r3, #0
 800b3e4:	9304      	str	r3, [sp, #16]
 800b3e6:	2300      	movs	r3, #0
 800b3e8:	9303      	str	r3, [sp, #12]
 800b3ea:	2300      	movs	r3, #0
 800b3ec:	9302      	str	r3, [sp, #8]
 800b3ee:	2300      	movs	r3, #0
 800b3f0:	9301      	str	r3, [sp, #4]
 800b3f2:	2300      	movs	r3, #0
 800b3f4:	9300      	str	r3, [sp, #0]
 800b3f6:	2300      	movs	r3, #0
 800b3f8:	22a0      	movs	r2, #160	; 0xa0
 800b3fa:	2180      	movs	r1, #128	; 0x80
 800b3fc:	2000      	movs	r0, #0
 800b3fe:	f7fd fd01 	bl	8008e04 <aci_gap_set_discoverable>
 800b402:	4603      	mov	r3, r0
 800b404:	73fb      	strb	r3, [r7, #15]
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - Success\n");
  }

  /* Update Advertising data */
  ret = aci_gap_update_adv_data(sizeof(a_AdvData), (uint8_t*) a_AdvData);
 800b406:	4906      	ldr	r1, [pc, #24]	; (800b420 <Adv_Request+0x5c>)
 800b408:	2009      	movs	r0, #9
 800b40a:	f7fe f821 	bl	8009450 <aci_gap_update_adv_data>
 800b40e:	4603      	mov	r3, r0
 800b410:	73fb      	strb	r3, [r7, #15]
  else
  {
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
  }

  return;
 800b412:	bf00      	nop
}
 800b414:	3710      	adds	r7, #16
 800b416:	46bd      	mov	sp, r7
 800b418:	bd80      	pop	{r7, pc}
 800b41a:	bf00      	nop
 800b41c:	20000d5c 	.word	0x20000d5c
 800b420:	20000014 	.word	0x20000014

0800b424 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 800b424:	b580      	push	{r7, lr}
 800b426:	b086      	sub	sp, #24
 800b428:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 800b42a:	f7ff fdc3 	bl	800afb4 <LL_FLASH_GetUDN>
 800b42e:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 800b430:	693b      	ldr	r3, [r7, #16]
 800b432:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b436:	d023      	beq.n	800b480 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 800b438:	f7ff fdd4 	bl	800afe4 <LL_FLASH_GetSTCompanyID>
 800b43c:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 800b43e:	f7ff fdc5 	bl	800afcc <LL_FLASH_GetDeviceID>
 800b442:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 800b444:	693b      	ldr	r3, [r7, #16]
 800b446:	b2da      	uxtb	r2, r3
 800b448:	4b16      	ldr	r3, [pc, #88]	; (800b4a4 <BleGetBdAddress+0x80>)
 800b44a:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 800b44c:	693b      	ldr	r3, [r7, #16]
 800b44e:	0a1b      	lsrs	r3, r3, #8
 800b450:	b2da      	uxtb	r2, r3
 800b452:	4b14      	ldr	r3, [pc, #80]	; (800b4a4 <BleGetBdAddress+0x80>)
 800b454:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	b2da      	uxtb	r2, r3
 800b45a:	4b12      	ldr	r3, [pc, #72]	; (800b4a4 <BleGetBdAddress+0x80>)
 800b45c:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 800b45e:	68bb      	ldr	r3, [r7, #8]
 800b460:	b2da      	uxtb	r2, r3
 800b462:	4b10      	ldr	r3, [pc, #64]	; (800b4a4 <BleGetBdAddress+0x80>)
 800b464:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 800b466:	68bb      	ldr	r3, [r7, #8]
 800b468:	0a1b      	lsrs	r3, r3, #8
 800b46a:	b2da      	uxtb	r2, r3
 800b46c:	4b0d      	ldr	r3, [pc, #52]	; (800b4a4 <BleGetBdAddress+0x80>)
 800b46e:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 800b470:	68bb      	ldr	r3, [r7, #8]
 800b472:	0c1b      	lsrs	r3, r3, #16
 800b474:	b2da      	uxtb	r2, r3
 800b476:	4b0b      	ldr	r3, [pc, #44]	; (800b4a4 <BleGetBdAddress+0x80>)
 800b478:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 800b47a:	4b0a      	ldr	r3, [pc, #40]	; (800b4a4 <BleGetBdAddress+0x80>)
 800b47c:	617b      	str	r3, [r7, #20]
 800b47e:	e00b      	b.n	800b498 <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 800b480:	2000      	movs	r0, #0
 800b482:	f7ff fcb1 	bl	800ade8 <OTP_Read>
 800b486:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d002      	beq.n	800b494 <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	617b      	str	r3, [r7, #20]
 800b492:	e001      	b.n	800b498 <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 800b494:	4b04      	ldr	r3, [pc, #16]	; (800b4a8 <BleGetBdAddress+0x84>)
 800b496:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 800b498:	697b      	ldr	r3, [r7, #20]
}
 800b49a:	4618      	mov	r0, r3
 800b49c:	3718      	adds	r7, #24
 800b49e:	46bd      	mov	sp, r7
 800b4a0:	bd80      	pop	{r7, pc}
 800b4a2:	bf00      	nop
 800b4a4:	20000d54 	.word	0x20000d54
 800b4a8:	0800d7d8 	.word	0x0800d7d8

0800b4ac <Adv_Cancel>:
 *
 * SPECIFIC FUNCTIONS FOR CUSTOM
 *
 *************************************************************/
static void Adv_Cancel(void)
{
 800b4ac:	b580      	push	{r7, lr}
 800b4ae:	b082      	sub	sp, #8
 800b4b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_1 */

  /* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 800b4b2:	4b0a      	ldr	r3, [pc, #40]	; (800b4dc <Adv_Cancel+0x30>)
 800b4b4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b4b8:	2b05      	cmp	r3, #5
 800b4ba:	d00a      	beq.n	800b4d2 <Adv_Cancel+0x26>
  {
    tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800b4bc:	2392      	movs	r3, #146	; 0x92
 800b4be:	71fb      	strb	r3, [r7, #7]

    ret = aci_gap_set_non_discoverable();
 800b4c0:	f7fd fc7c 	bl	8008dbc <aci_gap_set_non_discoverable>
 800b4c4:	4603      	mov	r3, r0
 800b4c6:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800b4c8:	4b04      	ldr	r3, [pc, #16]	; (800b4dc <Adv_Cancel+0x30>)
 800b4ca:	2200      	movs	r2, #0
 800b4cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* USER CODE BEGIN Adv_Cancel_2 */

  /* USER CODE END Adv_Cancel_2 */

  return;
 800b4d0:	bf00      	nop
 800b4d2:	bf00      	nop
}
 800b4d4:	3708      	adds	r7, #8
 800b4d6:	46bd      	mov	sp, r7
 800b4d8:	bd80      	pop	{r7, pc}
 800b4da:	bf00      	nop
 800b4dc:	20000d5c 	.word	0x20000d5c

0800b4e0 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 800b4e0:	b580      	push	{r7, lr}
 800b4e2:	b082      	sub	sp, #8
 800b4e4:	af00      	add	r7, sp, #0
 800b4e6:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 800b4e8:	2100      	movs	r1, #0
 800b4ea:	2002      	movs	r0, #2
 800b4ec:	f000 fcd6 	bl	800be9c <UTIL_SEQ_SetTask>

  return;
 800b4f0:	bf00      	nop
}
 800b4f2:	3708      	adds	r7, #8
 800b4f4:	46bd      	mov	sp, r7
 800b4f6:	bd80      	pop	{r7, pc}

0800b4f8 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 800b4f8:	b580      	push	{r7, lr}
 800b4fa:	b082      	sub	sp, #8
 800b4fc:	af00      	add	r7, sp, #0
 800b4fe:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800b500:	2001      	movs	r0, #1
 800b502:	f000 fd37 	bl	800bf74 <UTIL_SEQ_SetEvt>

  return;
 800b506:	bf00      	nop
}
 800b508:	3708      	adds	r7, #8
 800b50a:	46bd      	mov	sp, r7
 800b50c:	bd80      	pop	{r7, pc}

0800b50e <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 800b50e:	b580      	push	{r7, lr}
 800b510:	b082      	sub	sp, #8
 800b512:	af00      	add	r7, sp, #0
 800b514:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800b516:	2001      	movs	r0, #1
 800b518:	f000 fd4c 	bl	800bfb4 <UTIL_SEQ_WaitEvt>

  return;
 800b51c:	bf00      	nop
}
 800b51e:	3708      	adds	r7, #8
 800b520:	46bd      	mov	sp, r7
 800b522:	bd80      	pop	{r7, pc}

0800b524 <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 800b524:	b580      	push	{r7, lr}
 800b526:	b084      	sub	sp, #16
 800b528:	af00      	add	r7, sp, #0
 800b52a:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	685b      	ldr	r3, [r3, #4]
 800b534:	3308      	adds	r3, #8
 800b536:	4618      	mov	r0, r3
 800b538:	f7fe fdfe 	bl	800a138 <SVCCTL_UserEvtRx>
 800b53c:	4603      	mov	r3, r0
 800b53e:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 800b540:	7afb      	ldrb	r3, [r7, #11]
 800b542:	2b00      	cmp	r3, #0
 800b544:	d003      	beq.n	800b54e <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	2201      	movs	r2, #1
 800b54a:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 800b54c:	e003      	b.n	800b556 <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	2200      	movs	r2, #0
 800b552:	701a      	strb	r2, [r3, #0]
  return;
 800b554:	bf00      	nop
}
 800b556:	3710      	adds	r7, #16
 800b558:	46bd      	mov	sp, r7
 800b55a:	bd80      	pop	{r7, pc}

0800b55c <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 800b55c:	b580      	push	{r7, lr}
 800b55e:	b084      	sub	sp, #16
 800b560:	af00      	add	r7, sp, #0
 800b562:	4603      	mov	r3, r0
 800b564:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 800b566:	79fb      	ldrb	r3, [r7, #7]
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d002      	beq.n	800b572 <BLE_StatusNot+0x16>
 800b56c:	2b01      	cmp	r3, #1
 800b56e:	d006      	beq.n	800b57e <BLE_StatusNot+0x22>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 800b570:	e00b      	b.n	800b58a <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800b572:	2303      	movs	r3, #3
 800b574:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 800b576:	68f8      	ldr	r0, [r7, #12]
 800b578:	f000 fcbc 	bl	800bef4 <UTIL_SEQ_PauseTask>
      break;
 800b57c:	e005      	b.n	800b58a <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800b57e:	2303      	movs	r3, #3
 800b580:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 800b582:	68f8      	ldr	r0, [r7, #12]
 800b584:	f000 fcd6 	bl	800bf34 <UTIL_SEQ_ResumeTask>
      break;
 800b588:	bf00      	nop
  }

  return;
 800b58a:	bf00      	nop
}
 800b58c:	3710      	adds	r7, #16
 800b58e:	46bd      	mov	sp, r7
 800b590:	bd80      	pop	{r7, pc}

0800b592 <Custom_APP_Notification>:
  /* USER CODE END CUSTOM_STM_App_Notification_2 */
  return;
}

void Custom_APP_Notification(Custom_App_ConnHandle_Not_evt_t *pNotification)
{
 800b592:	b480      	push	{r7}
 800b594:	b083      	sub	sp, #12
 800b596:	af00      	add	r7, sp, #0
 800b598:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_APP_Notification_1 */

  /* USER CODE END CUSTOM_APP_Notification_1 */

  switch (pNotification->Custom_Evt_Opcode)
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	781b      	ldrb	r3, [r3, #0]
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d002      	beq.n	800b5a8 <Custom_APP_Notification+0x16>
 800b5a2:	2b01      	cmp	r3, #1
 800b5a4:	d002      	beq.n	800b5ac <Custom_APP_Notification+0x1a>

    default:
      /* USER CODE BEGIN CUSTOM_APP_Notification_default */

      /* USER CODE END CUSTOM_APP_Notification_default */
      break;
 800b5a6:	e002      	b.n	800b5ae <Custom_APP_Notification+0x1c>
      break;
 800b5a8:	bf00      	nop
 800b5aa:	e000      	b.n	800b5ae <Custom_APP_Notification+0x1c>
      break;
 800b5ac:	bf00      	nop

  /* USER CODE BEGIN CUSTOM_APP_Notification_2 */

  /* USER CODE END CUSTOM_APP_Notification_2 */

  return;
 800b5ae:	bf00      	nop
}
 800b5b0:	370c      	adds	r7, #12
 800b5b2:	46bd      	mov	sp, r7
 800b5b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5b8:	4770      	bx	lr

0800b5ba <Custom_APP_Init>:

void Custom_APP_Init(void)
{
 800b5ba:	b480      	push	{r7}
 800b5bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CUSTOM_APP_Init */

  /* USER CODE END CUSTOM_APP_Init */
  return;
 800b5be:	bf00      	nop
}
 800b5c0:	46bd      	mov	sp, r7
 800b5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c6:	4770      	bx	lr

0800b5c8 <Custom_STM_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Custom_STM_Event_Handler(void *Event)
{
 800b5c8:	b480      	push	{r7}
 800b5ca:	b08b      	sub	sp, #44	; 0x2c
 800b5cc:	af00      	add	r7, sp, #0
 800b5ce:	6078      	str	r0, [r7, #4]
  Custom_STM_App_Notification_evt_t     Notification;
  /* USER CODE BEGIN Custom_STM_Event_Handler_1 */

  /* USER CODE END Custom_STM_Event_Handler_1 */

  return_value = SVCCTL_EvtNotAck;
 800b5d0:	2300      	movs	r3, #0
 800b5d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	3301      	adds	r3, #1
 800b5da:	623b      	str	r3, [r7, #32]

  switch (event_pckt->evt)
 800b5dc:	6a3b      	ldr	r3, [r7, #32]
 800b5de:	781b      	ldrb	r3, [r3, #0]
 800b5e0:	2bff      	cmp	r3, #255	; 0xff
 800b5e2:	d12b      	bne.n	800b63c <Custom_STM_Event_Handler+0x74>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 800b5e4:	6a3b      	ldr	r3, [r7, #32]
 800b5e6:	3302      	adds	r3, #2
 800b5e8:	61fb      	str	r3, [r7, #28]
      switch (blecore_evt->ecode)
 800b5ea:	69fb      	ldr	r3, [r7, #28]
 800b5ec:	881b      	ldrh	r3, [r3, #0]
 800b5ee:	b29b      	uxth	r3, r3
 800b5f0:	f640 4214 	movw	r2, #3092	; 0xc14
 800b5f4:	4293      	cmp	r3, r2
 800b5f6:	d01b      	beq.n	800b630 <Custom_STM_Event_Handler+0x68>
 800b5f8:	f640 4214 	movw	r2, #3092	; 0xc14
 800b5fc:	4293      	cmp	r3, r2
 800b5fe:	dc19      	bgt.n	800b634 <Custom_STM_Event_Handler+0x6c>
 800b600:	f640 4201 	movw	r2, #3073	; 0xc01
 800b604:	4293      	cmp	r3, r2
 800b606:	d003      	beq.n	800b610 <Custom_STM_Event_Handler+0x48>
 800b608:	f640 4213 	movw	r2, #3091	; 0xc13
 800b60c:	4293      	cmp	r3, r2

          /* USER CODE END EVT_BLUE_GATT_WRITE_PERMIT_REQ_BEGIN */
          /* USER CODE BEGIN EVT_BLUE_GATT_WRITE_PERMIT_REQ_END */

          /* USER CODE END EVT_BLUE_GATT_WRITE_PERMIT_REQ_END */
          break;
 800b60e:	e014      	b.n	800b63a <Custom_STM_Event_Handler+0x72>
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 800b610:	69fb      	ldr	r3, [r7, #28]
 800b612:	3302      	adds	r3, #2
 800b614:	61bb      	str	r3, [r7, #24]
          if (attribute_modified->Attr_Handle == (CustomContext.CustomMycharwriteHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 800b616:	69bb      	ldr	r3, [r7, #24]
 800b618:	885b      	ldrh	r3, [r3, #2]
 800b61a:	b29b      	uxth	r3, r3
 800b61c:	461a      	mov	r2, r3
 800b61e:	4b0c      	ldr	r3, [pc, #48]	; (800b650 <Custom_STM_Event_Handler+0x88>)
 800b620:	885b      	ldrh	r3, [r3, #2]
 800b622:	3301      	adds	r3, #1
 800b624:	429a      	cmp	r2, r3
 800b626:	d107      	bne.n	800b638 <Custom_STM_Event_Handler+0x70>
            return_value = SVCCTL_EvtAckFlowEnable;
 800b628:	2301      	movs	r3, #1
 800b62a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          break;
 800b62e:	e003      	b.n	800b638 <Custom_STM_Event_Handler+0x70>
          break;
 800b630:	bf00      	nop
 800b632:	e004      	b.n	800b63e <Custom_STM_Event_Handler+0x76>
        /* USER CODE END BLECORE_EVT */
        default:
          /* USER CODE BEGIN EVT_DEFAULT */

          /* USER CODE END EVT_DEFAULT */
          break;
 800b634:	bf00      	nop
 800b636:	e002      	b.n	800b63e <Custom_STM_Event_Handler+0x76>
          break;
 800b638:	bf00      	nop
      }
      /* USER CODE BEGIN EVT_VENDOR*/

      /* USER CODE END EVT_VENDOR*/
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800b63a:	e000      	b.n	800b63e <Custom_STM_Event_Handler+0x76>

    default:
      /* USER CODE BEGIN EVENT_PCKT*/

      /* USER CODE END EVENT_PCKT*/
      break;
 800b63c:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_Event_Handler_2 */

  /* USER CODE END Custom_STM_Event_Handler_2 */

  return(return_value);
 800b63e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}/* end Custom_STM_Event_Handler */
 800b642:	4618      	mov	r0, r3
 800b644:	372c      	adds	r7, #44	; 0x2c
 800b646:	46bd      	mov	sp, r7
 800b648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b64c:	4770      	bx	lr
 800b64e:	bf00      	nop
 800b650:	20000de4 	.word	0x20000de4

0800b654 <SVCCTL_InitCustomSvc>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void SVCCTL_InitCustomSvc(void)
{
 800b654:	b580      	push	{r7, lr}
 800b656:	b08c      	sub	sp, #48	; 0x30
 800b658:	af06      	add	r7, sp, #24

  Char_UUID_t  uuid;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800b65a:	2392      	movs	r3, #146	; 0x92
 800b65c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE END SVCCTL_InitCustomSvc_1 */

  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(Custom_STM_Event_Handler);
 800b65e:	4834      	ldr	r0, [pc, #208]	; (800b730 <SVCCTL_InitCustomSvc+0xdc>)
 800b660:	f7fe fd50 	bl	800a104 <SVCCTL_RegisterSvcHandler>
   * service_max_attribute_record = 1 for mySvc +
   *                                2 for myCharWrite +
   *                              = 3
   */

  COPY_MYSVC_UUID(uuid.Char_UUID_128);
 800b664:	238f      	movs	r3, #143	; 0x8f
 800b666:	713b      	strb	r3, [r7, #4]
 800b668:	23e5      	movs	r3, #229	; 0xe5
 800b66a:	717b      	strb	r3, [r7, #5]
 800b66c:	23b3      	movs	r3, #179	; 0xb3
 800b66e:	71bb      	strb	r3, [r7, #6]
 800b670:	23d5      	movs	r3, #213	; 0xd5
 800b672:	71fb      	strb	r3, [r7, #7]
 800b674:	232e      	movs	r3, #46	; 0x2e
 800b676:	723b      	strb	r3, [r7, #8]
 800b678:	237f      	movs	r3, #127	; 0x7f
 800b67a:	727b      	strb	r3, [r7, #9]
 800b67c:	234a      	movs	r3, #74	; 0x4a
 800b67e:	72bb      	strb	r3, [r7, #10]
 800b680:	2398      	movs	r3, #152	; 0x98
 800b682:	72fb      	strb	r3, [r7, #11]
 800b684:	232a      	movs	r3, #42	; 0x2a
 800b686:	733b      	strb	r3, [r7, #12]
 800b688:	2348      	movs	r3, #72	; 0x48
 800b68a:	737b      	strb	r3, [r7, #13]
 800b68c:	237a      	movs	r3, #122	; 0x7a
 800b68e:	73bb      	strb	r3, [r7, #14]
 800b690:	23cc      	movs	r3, #204	; 0xcc
 800b692:	73fb      	strb	r3, [r7, #15]
 800b694:	2300      	movs	r3, #0
 800b696:	743b      	strb	r3, [r7, #16]
 800b698:	2300      	movs	r3, #0
 800b69a:	747b      	strb	r3, [r7, #17]
 800b69c:	2300      	movs	r3, #0
 800b69e:	74bb      	strb	r3, [r7, #18]
 800b6a0:	2300      	movs	r3, #0
 800b6a2:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_service(UUID_TYPE_128,
 800b6a4:	1d39      	adds	r1, r7, #4
 800b6a6:	4b23      	ldr	r3, [pc, #140]	; (800b734 <SVCCTL_InitCustomSvc+0xe0>)
 800b6a8:	9300      	str	r3, [sp, #0]
 800b6aa:	2303      	movs	r3, #3
 800b6ac:	2201      	movs	r2, #1
 800b6ae:	2002      	movs	r0, #2
 800b6b0:	f7fd fff0 	bl	8009694 <aci_gatt_add_service>
 800b6b4:	4603      	mov	r3, r0
 800b6b6:	75fb      	strb	r3, [r7, #23]
  }

  /**
   *  myCharWrite
   */
  COPY_MYCHARWRITE_UUID(uuid.Char_UUID_128);
 800b6b8:	2319      	movs	r3, #25
 800b6ba:	713b      	strb	r3, [r7, #4]
 800b6bc:	23ed      	movs	r3, #237	; 0xed
 800b6be:	717b      	strb	r3, [r7, #5]
 800b6c0:	2382      	movs	r3, #130	; 0x82
 800b6c2:	71bb      	strb	r3, [r7, #6]
 800b6c4:	23ae      	movs	r3, #174	; 0xae
 800b6c6:	71fb      	strb	r3, [r7, #7]
 800b6c8:	23ed      	movs	r3, #237	; 0xed
 800b6ca:	723b      	strb	r3, [r7, #8]
 800b6cc:	2321      	movs	r3, #33	; 0x21
 800b6ce:	727b      	strb	r3, [r7, #9]
 800b6d0:	234c      	movs	r3, #76	; 0x4c
 800b6d2:	72bb      	strb	r3, [r7, #10]
 800b6d4:	239d      	movs	r3, #157	; 0x9d
 800b6d6:	72fb      	strb	r3, [r7, #11]
 800b6d8:	2341      	movs	r3, #65	; 0x41
 800b6da:	733b      	strb	r3, [r7, #12]
 800b6dc:	2345      	movs	r3, #69	; 0x45
 800b6de:	737b      	strb	r3, [r7, #13]
 800b6e0:	2322      	movs	r3, #34	; 0x22
 800b6e2:	73bb      	strb	r3, [r7, #14]
 800b6e4:	238e      	movs	r3, #142	; 0x8e
 800b6e6:	73fb      	strb	r3, [r7, #15]
 800b6e8:	2300      	movs	r3, #0
 800b6ea:	743b      	strb	r3, [r7, #16]
 800b6ec:	2300      	movs	r3, #0
 800b6ee:	747b      	strb	r3, [r7, #17]
 800b6f0:	2300      	movs	r3, #0
 800b6f2:	74bb      	strb	r3, [r7, #18]
 800b6f4:	2300      	movs	r3, #0
 800b6f6:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomMysvcHdle,
 800b6f8:	4b0e      	ldr	r3, [pc, #56]	; (800b734 <SVCCTL_InitCustomSvc+0xe0>)
 800b6fa:	8818      	ldrh	r0, [r3, #0]
 800b6fc:	4b0e      	ldr	r3, [pc, #56]	; (800b738 <SVCCTL_InitCustomSvc+0xe4>)
 800b6fe:	781b      	ldrb	r3, [r3, #0]
 800b700:	b29b      	uxth	r3, r3
 800b702:	1d3a      	adds	r2, r7, #4
 800b704:	490d      	ldr	r1, [pc, #52]	; (800b73c <SVCCTL_InitCustomSvc+0xe8>)
 800b706:	9105      	str	r1, [sp, #20]
 800b708:	2100      	movs	r1, #0
 800b70a:	9104      	str	r1, [sp, #16]
 800b70c:	2110      	movs	r1, #16
 800b70e:	9103      	str	r1, [sp, #12]
 800b710:	2101      	movs	r1, #1
 800b712:	9102      	str	r1, [sp, #8]
 800b714:	2100      	movs	r1, #0
 800b716:	9101      	str	r1, [sp, #4]
 800b718:	2108      	movs	r1, #8
 800b71a:	9100      	str	r1, [sp, #0]
 800b71c:	2102      	movs	r1, #2
 800b71e:	f7fe f88f 	bl	8009840 <aci_gatt_add_char>
 800b722:	4603      	mov	r3, r0
 800b724:	75fb      	strb	r3, [r7, #23]

  /* USER CODE BEGIN SVCCTL_InitCustomSvc_2 */

  /* USER CODE END SVCCTL_InitCustomSvc_2 */

  return;
 800b726:	bf00      	nop
}
 800b728:	3718      	adds	r7, #24
 800b72a:	46bd      	mov	sp, r7
 800b72c:	bd80      	pop	{r7, pc}
 800b72e:	bf00      	nop
 800b730:	0800b5c9 	.word	0x0800b5c9
 800b734:	20000de4 	.word	0x20000de4
 800b738:	2000001d 	.word	0x2000001d
 800b73c:	20000de6 	.word	0x20000de6

0800b740 <LL_PWR_EnableBootC2>:
{
 800b740:	b480      	push	{r7}
 800b742:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 800b744:	4b05      	ldr	r3, [pc, #20]	; (800b75c <LL_PWR_EnableBootC2+0x1c>)
 800b746:	68db      	ldr	r3, [r3, #12]
 800b748:	4a04      	ldr	r2, [pc, #16]	; (800b75c <LL_PWR_EnableBootC2+0x1c>)
 800b74a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b74e:	60d3      	str	r3, [r2, #12]
}
 800b750:	bf00      	nop
 800b752:	46bd      	mov	sp, r7
 800b754:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b758:	4770      	bx	lr
 800b75a:	bf00      	nop
 800b75c:	58000400 	.word	0x58000400

0800b760 <LL_C2_EXTI_EnableEvent_32_63>:
{
 800b760:	b480      	push	{r7}
 800b762:	b083      	sub	sp, #12
 800b764:	af00      	add	r7, sp, #0
 800b766:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 800b768:	4b06      	ldr	r3, [pc, #24]	; (800b784 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800b76a:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800b76e:	4905      	ldr	r1, [pc, #20]	; (800b784 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	4313      	orrs	r3, r2
 800b774:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 800b778:	bf00      	nop
 800b77a:	370c      	adds	r7, #12
 800b77c:	46bd      	mov	sp, r7
 800b77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b782:	4770      	bx	lr
 800b784:	58000800 	.word	0x58000800

0800b788 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 800b788:	b480      	push	{r7}
 800b78a:	b083      	sub	sp, #12
 800b78c:	af00      	add	r7, sp, #0
 800b78e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800b790:	4b05      	ldr	r3, [pc, #20]	; (800b7a8 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800b792:	6a1a      	ldr	r2, [r3, #32]
 800b794:	4904      	ldr	r1, [pc, #16]	; (800b7a8 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	4313      	orrs	r3, r2
 800b79a:	620b      	str	r3, [r1, #32]
}
 800b79c:	bf00      	nop
 800b79e:	370c      	adds	r7, #12
 800b7a0:	46bd      	mov	sp, r7
 800b7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a6:	4770      	bx	lr
 800b7a8:	58000800 	.word	0x58000800

0800b7ac <LL_AHB3_GRP1_EnableClock>:
{
 800b7ac:	b480      	push	{r7}
 800b7ae:	b085      	sub	sp, #20
 800b7b0:	af00      	add	r7, sp, #0
 800b7b2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 800b7b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b7b8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b7ba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	4313      	orrs	r3, r2
 800b7c2:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800b7c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b7c8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	4013      	ands	r3, r2
 800b7ce:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800b7d0:	68fb      	ldr	r3, [r7, #12]
}
 800b7d2:	bf00      	nop
 800b7d4:	3714      	adds	r7, #20
 800b7d6:	46bd      	mov	sp, r7
 800b7d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7dc:	4770      	bx	lr

0800b7de <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 800b7de:	b480      	push	{r7}
 800b7e0:	b085      	sub	sp, #20
 800b7e2:	af00      	add	r7, sp, #0
 800b7e4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 800b7e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b7ea:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 800b7ee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	4313      	orrs	r3, r2
 800b7f6:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 800b7fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b7fe:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	4013      	ands	r3, r2
 800b806:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800b808:	68fb      	ldr	r3, [r7, #12]
}
 800b80a:	bf00      	nop
 800b80c:	3714      	adds	r7, #20
 800b80e:	46bd      	mov	sp, r7
 800b810:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b814:	4770      	bx	lr

0800b816 <LL_C1_IPCC_EnableIT_TXF>:
{
 800b816:	b480      	push	{r7}
 800b818:	b083      	sub	sp, #12
 800b81a:	af00      	add	r7, sp, #0
 800b81c:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	601a      	str	r2, [r3, #0]
}
 800b82a:	bf00      	nop
 800b82c:	370c      	adds	r7, #12
 800b82e:	46bd      	mov	sp, r7
 800b830:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b834:	4770      	bx	lr

0800b836 <LL_C1_IPCC_EnableIT_RXO>:
{
 800b836:	b480      	push	{r7}
 800b838:	b083      	sub	sp, #12
 800b83a:	af00      	add	r7, sp, #0
 800b83c:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	f043 0201 	orr.w	r2, r3, #1
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	601a      	str	r2, [r3, #0]
}
 800b84a:	bf00      	nop
 800b84c:	370c      	adds	r7, #12
 800b84e:	46bd      	mov	sp, r7
 800b850:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b854:	4770      	bx	lr

0800b856 <LL_C1_IPCC_EnableTransmitChannel>:
{
 800b856:	b480      	push	{r7}
 800b858:	b083      	sub	sp, #12
 800b85a:	af00      	add	r7, sp, #0
 800b85c:	6078      	str	r0, [r7, #4]
 800b85e:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	685a      	ldr	r2, [r3, #4]
 800b864:	683b      	ldr	r3, [r7, #0]
 800b866:	041b      	lsls	r3, r3, #16
 800b868:	43db      	mvns	r3, r3
 800b86a:	401a      	ands	r2, r3
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	605a      	str	r2, [r3, #4]
}
 800b870:	bf00      	nop
 800b872:	370c      	adds	r7, #12
 800b874:	46bd      	mov	sp, r7
 800b876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b87a:	4770      	bx	lr

0800b87c <LL_C1_IPCC_DisableTransmitChannel>:
{
 800b87c:	b480      	push	{r7}
 800b87e:	b083      	sub	sp, #12
 800b880:	af00      	add	r7, sp, #0
 800b882:	6078      	str	r0, [r7, #4]
 800b884:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	685a      	ldr	r2, [r3, #4]
 800b88a:	683b      	ldr	r3, [r7, #0]
 800b88c:	041b      	lsls	r3, r3, #16
 800b88e:	431a      	orrs	r2, r3
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	605a      	str	r2, [r3, #4]
}
 800b894:	bf00      	nop
 800b896:	370c      	adds	r7, #12
 800b898:	46bd      	mov	sp, r7
 800b89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b89e:	4770      	bx	lr

0800b8a0 <LL_C1_IPCC_EnableReceiveChannel>:
{
 800b8a0:	b480      	push	{r7}
 800b8a2:	b083      	sub	sp, #12
 800b8a4:	af00      	add	r7, sp, #0
 800b8a6:	6078      	str	r0, [r7, #4]
 800b8a8:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	685a      	ldr	r2, [r3, #4]
 800b8ae:	683b      	ldr	r3, [r7, #0]
 800b8b0:	43db      	mvns	r3, r3
 800b8b2:	401a      	ands	r2, r3
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	605a      	str	r2, [r3, #4]
}
 800b8b8:	bf00      	nop
 800b8ba:	370c      	adds	r7, #12
 800b8bc:	46bd      	mov	sp, r7
 800b8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8c2:	4770      	bx	lr

0800b8c4 <LL_C1_IPCC_ClearFlag_CHx>:
{
 800b8c4:	b480      	push	{r7}
 800b8c6:	b083      	sub	sp, #12
 800b8c8:	af00      	add	r7, sp, #0
 800b8ca:	6078      	str	r0, [r7, #4]
 800b8cc:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	683a      	ldr	r2, [r7, #0]
 800b8d2:	609a      	str	r2, [r3, #8]
}
 800b8d4:	bf00      	nop
 800b8d6:	370c      	adds	r7, #12
 800b8d8:	46bd      	mov	sp, r7
 800b8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8de:	4770      	bx	lr

0800b8e0 <LL_C1_IPCC_SetFlag_CHx>:
{
 800b8e0:	b480      	push	{r7}
 800b8e2:	b083      	sub	sp, #12
 800b8e4:	af00      	add	r7, sp, #0
 800b8e6:	6078      	str	r0, [r7, #4]
 800b8e8:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 800b8ea:	683b      	ldr	r3, [r7, #0]
 800b8ec:	041a      	lsls	r2, r3, #16
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	609a      	str	r2, [r3, #8]
}
 800b8f2:	bf00      	nop
 800b8f4:	370c      	adds	r7, #12
 800b8f6:	46bd      	mov	sp, r7
 800b8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8fc:	4770      	bx	lr

0800b8fe <LL_C1_IPCC_IsActiveFlag_CHx>:
{
 800b8fe:	b480      	push	{r7}
 800b900:	b083      	sub	sp, #12
 800b902:	af00      	add	r7, sp, #0
 800b904:	6078      	str	r0, [r7, #4]
 800b906:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	68da      	ldr	r2, [r3, #12]
 800b90c:	683b      	ldr	r3, [r7, #0]
 800b90e:	4013      	ands	r3, r2
 800b910:	683a      	ldr	r2, [r7, #0]
 800b912:	429a      	cmp	r2, r3
 800b914:	d101      	bne.n	800b91a <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 800b916:	2301      	movs	r3, #1
 800b918:	e000      	b.n	800b91c <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 800b91a:	2300      	movs	r3, #0
}
 800b91c:	4618      	mov	r0, r3
 800b91e:	370c      	adds	r7, #12
 800b920:	46bd      	mov	sp, r7
 800b922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b926:	4770      	bx	lr

0800b928 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800b928:	b480      	push	{r7}
 800b92a:	b083      	sub	sp, #12
 800b92c:	af00      	add	r7, sp, #0
 800b92e:	6078      	str	r0, [r7, #4]
 800b930:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	69da      	ldr	r2, [r3, #28]
 800b936:	683b      	ldr	r3, [r7, #0]
 800b938:	4013      	ands	r3, r2
 800b93a:	683a      	ldr	r2, [r7, #0]
 800b93c:	429a      	cmp	r2, r3
 800b93e:	d101      	bne.n	800b944 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 800b940:	2301      	movs	r3, #1
 800b942:	e000      	b.n	800b946 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 800b944:	2300      	movs	r3, #0
}
 800b946:	4618      	mov	r0, r3
 800b948:	370c      	adds	r7, #12
 800b94a:	46bd      	mov	sp, r7
 800b94c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b950:	4770      	bx	lr
	...

0800b954 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 800b954:	b580      	push	{r7, lr}
 800b956:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 800b958:	2102      	movs	r1, #2
 800b95a:	4819      	ldr	r0, [pc, #100]	; (800b9c0 <HW_IPCC_Rx_Handler+0x6c>)
 800b95c:	f7ff ffe4 	bl	800b928 <LL_C2_IPCC_IsActiveFlag_CHx>
 800b960:	4603      	mov	r3, r0
 800b962:	2b00      	cmp	r3, #0
 800b964:	d009      	beq.n	800b97a <HW_IPCC_Rx_Handler+0x26>
 800b966:	4b16      	ldr	r3, [pc, #88]	; (800b9c0 <HW_IPCC_Rx_Handler+0x6c>)
 800b968:	685b      	ldr	r3, [r3, #4]
 800b96a:	43db      	mvns	r3, r3
 800b96c:	f003 0302 	and.w	r3, r3, #2
 800b970:	2b00      	cmp	r3, #0
 800b972:	d002      	beq.n	800b97a <HW_IPCC_Rx_Handler+0x26>
  {
      HW_IPCC_SYS_EvtHandler();
 800b974:	f000 f8da 	bl	800bb2c <HW_IPCC_SYS_EvtHandler>
 800b978:	e01f      	b.n	800b9ba <HW_IPCC_Rx_Handler+0x66>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 800b97a:	2101      	movs	r1, #1
 800b97c:	4810      	ldr	r0, [pc, #64]	; (800b9c0 <HW_IPCC_Rx_Handler+0x6c>)
 800b97e:	f7ff ffd3 	bl	800b928 <LL_C2_IPCC_IsActiveFlag_CHx>
 800b982:	4603      	mov	r3, r0
 800b984:	2b00      	cmp	r3, #0
 800b986:	d008      	beq.n	800b99a <HW_IPCC_Rx_Handler+0x46>
 800b988:	4b0d      	ldr	r3, [pc, #52]	; (800b9c0 <HW_IPCC_Rx_Handler+0x6c>)
 800b98a:	685b      	ldr	r3, [r3, #4]
 800b98c:	f003 0301 	and.w	r3, r3, #1
 800b990:	2b00      	cmp	r3, #0
 800b992:	d102      	bne.n	800b99a <HW_IPCC_Rx_Handler+0x46>
  {
    HW_IPCC_BLE_EvtHandler();
 800b994:	f000 f88e 	bl	800bab4 <HW_IPCC_BLE_EvtHandler>
 800b998:	e00f      	b.n	800b9ba <HW_IPCC_Rx_Handler+0x66>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 800b99a:	2108      	movs	r1, #8
 800b99c:	4808      	ldr	r0, [pc, #32]	; (800b9c0 <HW_IPCC_Rx_Handler+0x6c>)
 800b99e:	f7ff ffc3 	bl	800b928 <LL_C2_IPCC_IsActiveFlag_CHx>
 800b9a2:	4603      	mov	r3, r0
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d009      	beq.n	800b9bc <HW_IPCC_Rx_Handler+0x68>
 800b9a8:	4b05      	ldr	r3, [pc, #20]	; (800b9c0 <HW_IPCC_Rx_Handler+0x6c>)
 800b9aa:	685b      	ldr	r3, [r3, #4]
 800b9ac:	43db      	mvns	r3, r3
 800b9ae:	f003 0308 	and.w	r3, r3, #8
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d002      	beq.n	800b9bc <HW_IPCC_Rx_Handler+0x68>
  {
    HW_IPCC_TRACES_EvtHandler();
 800b9b6:	f000 f905 	bl	800bbc4 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 800b9ba:	bf00      	nop
 800b9bc:	bf00      	nop
}
 800b9be:	bd80      	pop	{r7, pc}
 800b9c0:	58000c00 	.word	0x58000c00

0800b9c4 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 800b9c4:	b580      	push	{r7, lr}
 800b9c6:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 800b9c8:	2102      	movs	r1, #2
 800b9ca:	481a      	ldr	r0, [pc, #104]	; (800ba34 <HW_IPCC_Tx_Handler+0x70>)
 800b9cc:	f7ff ff97 	bl	800b8fe <LL_C1_IPCC_IsActiveFlag_CHx>
 800b9d0:	4603      	mov	r3, r0
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d109      	bne.n	800b9ea <HW_IPCC_Tx_Handler+0x26>
 800b9d6:	4b17      	ldr	r3, [pc, #92]	; (800ba34 <HW_IPCC_Tx_Handler+0x70>)
 800b9d8:	685b      	ldr	r3, [r3, #4]
 800b9da:	43db      	mvns	r3, r3
 800b9dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d002      	beq.n	800b9ea <HW_IPCC_Tx_Handler+0x26>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 800b9e4:	f000 f896 	bl	800bb14 <HW_IPCC_SYS_CmdEvtHandler>
 800b9e8:	e020      	b.n	800ba2c <HW_IPCC_Tx_Handler+0x68>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 800b9ea:	2108      	movs	r1, #8
 800b9ec:	4811      	ldr	r0, [pc, #68]	; (800ba34 <HW_IPCC_Tx_Handler+0x70>)
 800b9ee:	f7ff ff86 	bl	800b8fe <LL_C1_IPCC_IsActiveFlag_CHx>
 800b9f2:	4603      	mov	r3, r0
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d109      	bne.n	800ba0c <HW_IPCC_Tx_Handler+0x48>
 800b9f8:	4b0e      	ldr	r3, [pc, #56]	; (800ba34 <HW_IPCC_Tx_Handler+0x70>)
 800b9fa:	685b      	ldr	r3, [r3, #4]
 800b9fc:	43db      	mvns	r3, r3
 800b9fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d002      	beq.n	800ba0c <HW_IPCC_Tx_Handler+0x48>
  {
    HW_IPCC_MM_FreeBufHandler();
 800ba06:	f000 f8bf 	bl	800bb88 <HW_IPCC_MM_FreeBufHandler>
 800ba0a:	e00f      	b.n	800ba2c <HW_IPCC_Tx_Handler+0x68>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 800ba0c:	2120      	movs	r1, #32
 800ba0e:	4809      	ldr	r0, [pc, #36]	; (800ba34 <HW_IPCC_Tx_Handler+0x70>)
 800ba10:	f7ff ff75 	bl	800b8fe <LL_C1_IPCC_IsActiveFlag_CHx>
 800ba14:	4603      	mov	r3, r0
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d109      	bne.n	800ba2e <HW_IPCC_Tx_Handler+0x6a>
 800ba1a:	4b06      	ldr	r3, [pc, #24]	; (800ba34 <HW_IPCC_Tx_Handler+0x70>)
 800ba1c:	685b      	ldr	r3, [r3, #4]
 800ba1e:	43db      	mvns	r3, r3
 800ba20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d002      	beq.n	800ba2e <HW_IPCC_Tx_Handler+0x6a>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 800ba28:	f000 f850 	bl	800bacc <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 800ba2c:	bf00      	nop
 800ba2e:	bf00      	nop
}
 800ba30:	bd80      	pop	{r7, pc}
 800ba32:	bf00      	nop
 800ba34:	58000c00 	.word	0x58000c00

0800ba38 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 800ba38:	b580      	push	{r7, lr}
 800ba3a:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 800ba3c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800ba40:	f7ff fecd 	bl	800b7de <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 800ba44:	f44f 7000 	mov.w	r0, #512	; 0x200
 800ba48:	f7ff fe9e 	bl	800b788 <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 800ba4c:	f44f 7000 	mov.w	r0, #512	; 0x200
 800ba50:	f7ff fe86 	bl	800b760 <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 800ba54:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 800ba56:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 800ba58:	f7ff fe72 	bl	800b740 <LL_PWR_EnableBootC2>

  return;
 800ba5c:	bf00      	nop
}
 800ba5e:	bd80      	pop	{r7, pc}

0800ba60 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 800ba60:	b580      	push	{r7, lr}
 800ba62:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 800ba64:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800ba68:	f7ff fea0 	bl	800b7ac <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 800ba6c:	4806      	ldr	r0, [pc, #24]	; (800ba88 <HW_IPCC_Init+0x28>)
 800ba6e:	f7ff fee2 	bl	800b836 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 800ba72:	4805      	ldr	r0, [pc, #20]	; (800ba88 <HW_IPCC_Init+0x28>)
 800ba74:	f7ff fecf 	bl	800b816 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 800ba78:	202c      	movs	r0, #44	; 0x2c
 800ba7a:	f7f7 fc2e 	bl	80032da <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 800ba7e:	202d      	movs	r0, #45	; 0x2d
 800ba80:	f7f7 fc2b 	bl	80032da <HAL_NVIC_EnableIRQ>

  return;
 800ba84:	bf00      	nop
}
 800ba86:	bd80      	pop	{r7, pc}
 800ba88:	58000c00 	.word	0x58000c00

0800ba8c <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 800ba8c:	b580      	push	{r7, lr}
 800ba8e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800ba90:	2101      	movs	r1, #1
 800ba92:	4802      	ldr	r0, [pc, #8]	; (800ba9c <HW_IPCC_BLE_Init+0x10>)
 800ba94:	f7ff ff04 	bl	800b8a0 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800ba98:	bf00      	nop
}
 800ba9a:	bd80      	pop	{r7, pc}
 800ba9c:	58000c00 	.word	0x58000c00

0800baa0 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 800baa0:	b580      	push	{r7, lr}
 800baa2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 800baa4:	2101      	movs	r1, #1
 800baa6:	4802      	ldr	r0, [pc, #8]	; (800bab0 <HW_IPCC_BLE_SendCmd+0x10>)
 800baa8:	f7ff ff1a 	bl	800b8e0 <LL_C1_IPCC_SetFlag_CHx>

  return;
 800baac:	bf00      	nop
}
 800baae:	bd80      	pop	{r7, pc}
 800bab0:	58000c00 	.word	0x58000c00

0800bab4 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 800bab4:	b580      	push	{r7, lr}
 800bab6:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 800bab8:	f7fe ffde 	bl	800aa78 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800babc:	2101      	movs	r1, #1
 800babe:	4802      	ldr	r0, [pc, #8]	; (800bac8 <HW_IPCC_BLE_EvtHandler+0x14>)
 800bac0:	f7ff ff00 	bl	800b8c4 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800bac4:	bf00      	nop
}
 800bac6:	bd80      	pop	{r7, pc}
 800bac8:	58000c00 	.word	0x58000c00

0800bacc <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 800bacc:	b580      	push	{r7, lr}
 800bace:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 800bad0:	2120      	movs	r1, #32
 800bad2:	4803      	ldr	r0, [pc, #12]	; (800bae0 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 800bad4:	f7ff fed2 	bl	800b87c <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 800bad8:	f7fe fffe 	bl	800aad8 <HW_IPCC_BLE_AclDataAckNot>

  return;
 800badc:	bf00      	nop
}
 800bade:	bd80      	pop	{r7, pc}
 800bae0:	58000c00 	.word	0x58000c00

0800bae4 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 800bae4:	b580      	push	{r7, lr}
 800bae6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800bae8:	2102      	movs	r1, #2
 800baea:	4802      	ldr	r0, [pc, #8]	; (800baf4 <HW_IPCC_SYS_Init+0x10>)
 800baec:	f7ff fed8 	bl	800b8a0 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800baf0:	bf00      	nop
}
 800baf2:	bd80      	pop	{r7, pc}
 800baf4:	58000c00 	.word	0x58000c00

0800baf8 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 800baf8:	b580      	push	{r7, lr}
 800bafa:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800bafc:	2102      	movs	r1, #2
 800bafe:	4804      	ldr	r0, [pc, #16]	; (800bb10 <HW_IPCC_SYS_SendCmd+0x18>)
 800bb00:	f7ff feee 	bl	800b8e0 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800bb04:	2102      	movs	r1, #2
 800bb06:	4802      	ldr	r0, [pc, #8]	; (800bb10 <HW_IPCC_SYS_SendCmd+0x18>)
 800bb08:	f7ff fea5 	bl	800b856 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 800bb0c:	bf00      	nop
}
 800bb0e:	bd80      	pop	{r7, pc}
 800bb10:	58000c00 	.word	0x58000c00

0800bb14 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 800bb14:	b580      	push	{r7, lr}
 800bb16:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800bb18:	2102      	movs	r1, #2
 800bb1a:	4803      	ldr	r0, [pc, #12]	; (800bb28 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 800bb1c:	f7ff feae 	bl	800b87c <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 800bb20:	f7ff f82a 	bl	800ab78 <HW_IPCC_SYS_CmdEvtNot>

  return;
 800bb24:	bf00      	nop
}
 800bb26:	bd80      	pop	{r7, pc}
 800bb28:	58000c00 	.word	0x58000c00

0800bb2c <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 800bb2c:	b580      	push	{r7, lr}
 800bb2e:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 800bb30:	f7ff f838 	bl	800aba4 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800bb34:	2102      	movs	r1, #2
 800bb36:	4802      	ldr	r0, [pc, #8]	; (800bb40 <HW_IPCC_SYS_EvtHandler+0x14>)
 800bb38:	f7ff fec4 	bl	800b8c4 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800bb3c:	bf00      	nop
}
 800bb3e:	bd80      	pop	{r7, pc}
 800bb40:	58000c00 	.word	0x58000c00

0800bb44 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 800bb44:	b580      	push	{r7, lr}
 800bb46:	b082      	sub	sp, #8
 800bb48:	af00      	add	r7, sp, #0
 800bb4a:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 800bb4c:	2108      	movs	r1, #8
 800bb4e:	480c      	ldr	r0, [pc, #48]	; (800bb80 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800bb50:	f7ff fed5 	bl	800b8fe <LL_C1_IPCC_IsActiveFlag_CHx>
 800bb54:	4603      	mov	r3, r0
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d007      	beq.n	800bb6a <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 800bb5a:	4a0a      	ldr	r2, [pc, #40]	; (800bb84 <HW_IPCC_MM_SendFreeBuf+0x40>)
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800bb60:	2108      	movs	r1, #8
 800bb62:	4807      	ldr	r0, [pc, #28]	; (800bb80 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800bb64:	f7ff fe77 	bl	800b856 <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 800bb68:	e006      	b.n	800bb78 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800bb6e:	2108      	movs	r1, #8
 800bb70:	4803      	ldr	r0, [pc, #12]	; (800bb80 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800bb72:	f7ff feb5 	bl	800b8e0 <LL_C1_IPCC_SetFlag_CHx>
  return;
 800bb76:	bf00      	nop
}
 800bb78:	3708      	adds	r7, #8
 800bb7a:	46bd      	mov	sp, r7
 800bb7c:	bd80      	pop	{r7, pc}
 800bb7e:	bf00      	nop
 800bb80:	58000c00 	.word	0x58000c00
 800bb84:	20000de8 	.word	0x20000de8

0800bb88 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 800bb88:	b580      	push	{r7, lr}
 800bb8a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800bb8c:	2108      	movs	r1, #8
 800bb8e:	4806      	ldr	r0, [pc, #24]	; (800bba8 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800bb90:	f7ff fe74 	bl	800b87c <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 800bb94:	4b05      	ldr	r3, [pc, #20]	; (800bbac <HW_IPCC_MM_FreeBufHandler+0x24>)
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800bb9a:	2108      	movs	r1, #8
 800bb9c:	4802      	ldr	r0, [pc, #8]	; (800bba8 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800bb9e:	f7ff fe9f 	bl	800b8e0 <LL_C1_IPCC_SetFlag_CHx>

  return;
 800bba2:	bf00      	nop
}
 800bba4:	bd80      	pop	{r7, pc}
 800bba6:	bf00      	nop
 800bba8:	58000c00 	.word	0x58000c00
 800bbac:	20000de8 	.word	0x20000de8

0800bbb0 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 800bbb0:	b580      	push	{r7, lr}
 800bbb2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 800bbb4:	2108      	movs	r1, #8
 800bbb6:	4802      	ldr	r0, [pc, #8]	; (800bbc0 <HW_IPCC_TRACES_Init+0x10>)
 800bbb8:	f7ff fe72 	bl	800b8a0 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800bbbc:	bf00      	nop
}
 800bbbe:	bd80      	pop	{r7, pc}
 800bbc0:	58000c00 	.word	0x58000c00

0800bbc4 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 800bbc4:	b580      	push	{r7, lr}
 800bbc6:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 800bbc8:	f7ff f894 	bl	800acf4 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 800bbcc:	2108      	movs	r1, #8
 800bbce:	4802      	ldr	r0, [pc, #8]	; (800bbd8 <HW_IPCC_TRACES_EvtHandler+0x14>)
 800bbd0:	f7ff fe78 	bl	800b8c4 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800bbd4:	bf00      	nop
}
 800bbd6:	bd80      	pop	{r7, pc}
 800bbd8:	58000c00 	.word	0x58000c00

0800bbdc <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 800bbdc:	b480      	push	{r7}
 800bbde:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800bbe0:	4b05      	ldr	r3, [pc, #20]	; (800bbf8 <UTIL_LPM_Init+0x1c>)
 800bbe2:	2200      	movs	r2, #0
 800bbe4:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800bbe6:	4b05      	ldr	r3, [pc, #20]	; (800bbfc <UTIL_LPM_Init+0x20>)
 800bbe8:	2200      	movs	r2, #0
 800bbea:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800bbec:	bf00      	nop
 800bbee:	46bd      	mov	sp, r7
 800bbf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbf4:	4770      	bx	lr
 800bbf6:	bf00      	nop
 800bbf8:	20000dec 	.word	0x20000dec
 800bbfc:	20000df0 	.word	0x20000df0

0800bc00 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800bc00:	b480      	push	{r7}
 800bc02:	b087      	sub	sp, #28
 800bc04:	af00      	add	r7, sp, #0
 800bc06:	6078      	str	r0, [r7, #4]
 800bc08:	460b      	mov	r3, r1
 800bc0a:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bc0c:	f3ef 8310 	mrs	r3, PRIMASK
 800bc10:	613b      	str	r3, [r7, #16]
  return(result);
 800bc12:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800bc14:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800bc16:	b672      	cpsid	i
}
 800bc18:	bf00      	nop
  
  switch(state)
 800bc1a:	78fb      	ldrb	r3, [r7, #3]
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d008      	beq.n	800bc32 <UTIL_LPM_SetOffMode+0x32>
 800bc20:	2b01      	cmp	r3, #1
 800bc22:	d10e      	bne.n	800bc42 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 800bc24:	4b0d      	ldr	r3, [pc, #52]	; (800bc5c <UTIL_LPM_SetOffMode+0x5c>)
 800bc26:	681a      	ldr	r2, [r3, #0]
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	4313      	orrs	r3, r2
 800bc2c:	4a0b      	ldr	r2, [pc, #44]	; (800bc5c <UTIL_LPM_SetOffMode+0x5c>)
 800bc2e:	6013      	str	r3, [r2, #0]
      break;
 800bc30:	e008      	b.n	800bc44 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	43da      	mvns	r2, r3
 800bc36:	4b09      	ldr	r3, [pc, #36]	; (800bc5c <UTIL_LPM_SetOffMode+0x5c>)
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	4013      	ands	r3, r2
 800bc3c:	4a07      	ldr	r2, [pc, #28]	; (800bc5c <UTIL_LPM_SetOffMode+0x5c>)
 800bc3e:	6013      	str	r3, [r2, #0]
      break;
 800bc40:	e000      	b.n	800bc44 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 800bc42:	bf00      	nop
 800bc44:	697b      	ldr	r3, [r7, #20]
 800bc46:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	f383 8810 	msr	PRIMASK, r3
}
 800bc4e:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800bc50:	bf00      	nop
 800bc52:	371c      	adds	r7, #28
 800bc54:	46bd      	mov	sp, r7
 800bc56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc5a:	4770      	bx	lr
 800bc5c:	20000df0 	.word	0x20000df0

0800bc60 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 800bc60:	b580      	push	{r7, lr}
 800bc62:	b090      	sub	sp, #64	; 0x40
 800bc64:	af00      	add	r7, sp, #0
 800bc66:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 800bc68:	4b73      	ldr	r3, [pc, #460]	; (800be38 <UTIL_SEQ_Run+0x1d8>)
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 800bc6e:	4b72      	ldr	r3, [pc, #456]	; (800be38 <UTIL_SEQ_Run+0x1d8>)
 800bc70:	681a      	ldr	r2, [r3, #0]
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	4013      	ands	r3, r2
 800bc76:	4a70      	ldr	r2, [pc, #448]	; (800be38 <UTIL_SEQ_Run+0x1d8>)
 800bc78:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 800bc7a:	4b70      	ldr	r3, [pc, #448]	; (800be3c <UTIL_SEQ_Run+0x1dc>)
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 800bc80:	4b6f      	ldr	r3, [pc, #444]	; (800be40 <UTIL_SEQ_Run+0x1e0>)
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 800bc86:	4b6f      	ldr	r3, [pc, #444]	; (800be44 <UTIL_SEQ_Run+0x1e4>)
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	633b      	str	r3, [r7, #48]	; 0x30
  local_evtwaited =  EvtWaited;
 800bc8c:	4b6e      	ldr	r3, [pc, #440]	; (800be48 <UTIL_SEQ_Run+0x1e8>)
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800bc92:	e08d      	b.n	800bdb0 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 800bc94:	2300      	movs	r3, #0
 800bc96:	63fb      	str	r3, [r7, #60]	; 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800bc98:	e002      	b.n	800bca0 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 800bc9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc9c:	3301      	adds	r3, #1
 800bc9e:	63fb      	str	r3, [r7, #60]	; 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800bca0:	4a6a      	ldr	r2, [pc, #424]	; (800be4c <UTIL_SEQ_Run+0x1ec>)
 800bca2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bca4:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800bca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcaa:	401a      	ands	r2, r3
 800bcac:	4b62      	ldr	r3, [pc, #392]	; (800be38 <UTIL_SEQ_Run+0x1d8>)
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	4013      	ands	r3, r2
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d0f1      	beq.n	800bc9a <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 800bcb6:	4a65      	ldr	r2, [pc, #404]	; (800be4c <UTIL_SEQ_Run+0x1ec>)
 800bcb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bcba:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800bcbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcc0:	401a      	ands	r2, r3
 800bcc2:	4b5d      	ldr	r3, [pc, #372]	; (800be38 <UTIL_SEQ_Run+0x1d8>)
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	4013      	ands	r3, r2
 800bcc8:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800bcca:	4a60      	ldr	r2, [pc, #384]	; (800be4c <UTIL_SEQ_Run+0x1ec>)
 800bccc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bcce:	00db      	lsls	r3, r3, #3
 800bcd0:	4413      	add	r3, r2
 800bcd2:	685a      	ldr	r2, [r3, #4]
 800bcd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcd6:	4013      	ands	r3, r2
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d106      	bne.n	800bcea <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800bcdc:	4a5b      	ldr	r2, [pc, #364]	; (800be4c <UTIL_SEQ_Run+0x1ec>)
 800bcde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bce0:	00db      	lsls	r3, r3, #3
 800bce2:	4413      	add	r3, r2
 800bce4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bce8:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800bcea:	4a58      	ldr	r2, [pc, #352]	; (800be4c <UTIL_SEQ_Run+0x1ec>)
 800bcec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bcee:	00db      	lsls	r3, r3, #3
 800bcf0:	4413      	add	r3, r2
 800bcf2:	685a      	ldr	r2, [r3, #4]
 800bcf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcf6:	4013      	ands	r3, r2
 800bcf8:	4618      	mov	r0, r3
 800bcfa:	f000 f9b3 	bl	800c064 <SEQ_BitPosition>
 800bcfe:	4603      	mov	r3, r0
 800bd00:	461a      	mov	r2, r3
 800bd02:	4b53      	ldr	r3, [pc, #332]	; (800be50 <UTIL_SEQ_Run+0x1f0>)
 800bd04:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800bd06:	4a51      	ldr	r2, [pc, #324]	; (800be4c <UTIL_SEQ_Run+0x1ec>)
 800bd08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd0a:	00db      	lsls	r3, r3, #3
 800bd0c:	4413      	add	r3, r2
 800bd0e:	685a      	ldr	r2, [r3, #4]
 800bd10:	4b4f      	ldr	r3, [pc, #316]	; (800be50 <UTIL_SEQ_Run+0x1f0>)
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	2101      	movs	r1, #1
 800bd16:	fa01 f303 	lsl.w	r3, r1, r3
 800bd1a:	43db      	mvns	r3, r3
 800bd1c:	401a      	ands	r2, r3
 800bd1e:	494b      	ldr	r1, [pc, #300]	; (800be4c <UTIL_SEQ_Run+0x1ec>)
 800bd20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd22:	00db      	lsls	r3, r3, #3
 800bd24:	440b      	add	r3, r1
 800bd26:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bd28:	f3ef 8310 	mrs	r3, PRIMASK
 800bd2c:	61bb      	str	r3, [r7, #24]
  return(result);
 800bd2e:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800bd30:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800bd32:	b672      	cpsid	i
}
 800bd34:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 800bd36:	4b46      	ldr	r3, [pc, #280]	; (800be50 <UTIL_SEQ_Run+0x1f0>)
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	2201      	movs	r2, #1
 800bd3c:	fa02 f303 	lsl.w	r3, r2, r3
 800bd40:	43da      	mvns	r2, r3
 800bd42:	4b3e      	ldr	r3, [pc, #248]	; (800be3c <UTIL_SEQ_Run+0x1dc>)
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	4013      	ands	r3, r2
 800bd48:	4a3c      	ldr	r2, [pc, #240]	; (800be3c <UTIL_SEQ_Run+0x1dc>)
 800bd4a:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800bd4c:	2302      	movs	r3, #2
 800bd4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bd50:	e013      	b.n	800bd7a <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800bd52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd54:	3b01      	subs	r3, #1
 800bd56:	4a3d      	ldr	r2, [pc, #244]	; (800be4c <UTIL_SEQ_Run+0x1ec>)
 800bd58:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800bd5c:	4b3c      	ldr	r3, [pc, #240]	; (800be50 <UTIL_SEQ_Run+0x1f0>)
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	2201      	movs	r2, #1
 800bd62:	fa02 f303 	lsl.w	r3, r2, r3
 800bd66:	43da      	mvns	r2, r3
 800bd68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd6a:	3b01      	subs	r3, #1
 800bd6c:	400a      	ands	r2, r1
 800bd6e:	4937      	ldr	r1, [pc, #220]	; (800be4c <UTIL_SEQ_Run+0x1ec>)
 800bd70:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800bd74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd76:	3b01      	subs	r3, #1
 800bd78:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bd7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d1e8      	bne.n	800bd52 <UTIL_SEQ_Run+0xf2>
 800bd80:	6a3b      	ldr	r3, [r7, #32]
 800bd82:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bd84:	697b      	ldr	r3, [r7, #20]
 800bd86:	f383 8810 	msr	PRIMASK, r3
}
 800bd8a:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 800bd8c:	4b30      	ldr	r3, [pc, #192]	; (800be50 <UTIL_SEQ_Run+0x1f0>)
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	4a30      	ldr	r2, [pc, #192]	; (800be54 <UTIL_SEQ_Run+0x1f4>)
 800bd92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bd96:	4798      	blx	r3

    local_taskset = TaskSet;
 800bd98:	4b28      	ldr	r3, [pc, #160]	; (800be3c <UTIL_SEQ_Run+0x1dc>)
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	63bb      	str	r3, [r7, #56]	; 0x38
    local_evtset = EvtSet;
 800bd9e:	4b28      	ldr	r3, [pc, #160]	; (800be40 <UTIL_SEQ_Run+0x1e0>)
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	637b      	str	r3, [r7, #52]	; 0x34
    local_taskmask = TaskMask;
 800bda4:	4b27      	ldr	r3, [pc, #156]	; (800be44 <UTIL_SEQ_Run+0x1e4>)
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	633b      	str	r3, [r7, #48]	; 0x30
    local_evtwaited = EvtWaited;
 800bdaa:	4b27      	ldr	r3, [pc, #156]	; (800be48 <UTIL_SEQ_Run+0x1e8>)
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800bdb0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bdb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdb4:	401a      	ands	r2, r3
 800bdb6:	4b20      	ldr	r3, [pc, #128]	; (800be38 <UTIL_SEQ_Run+0x1d8>)
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	4013      	ands	r3, r2
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d005      	beq.n	800bdcc <UTIL_SEQ_Run+0x16c>
 800bdc0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bdc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdc4:	4013      	ands	r3, r2
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	f43f af64 	beq.w	800bc94 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800bdcc:	4b20      	ldr	r3, [pc, #128]	; (800be50 <UTIL_SEQ_Run+0x1f0>)
 800bdce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bdd2:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 800bdd4:	f000 f938 	bl	800c048 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bdd8:	f3ef 8310 	mrs	r3, PRIMASK
 800bddc:	613b      	str	r3, [r7, #16]
  return(result);
 800bdde:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 800bde0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800bde2:	b672      	cpsid	i
}
 800bde4:	bf00      	nop
  local_taskset = TaskSet;
 800bde6:	4b15      	ldr	r3, [pc, #84]	; (800be3c <UTIL_SEQ_Run+0x1dc>)
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 800bdec:	4b14      	ldr	r3, [pc, #80]	; (800be40 <UTIL_SEQ_Run+0x1e0>)
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 800bdf2:	4b14      	ldr	r3, [pc, #80]	; (800be44 <UTIL_SEQ_Run+0x1e4>)
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	633b      	str	r3, [r7, #48]	; 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 800bdf8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bdfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdfc:	401a      	ands	r2, r3
 800bdfe:	4b0e      	ldr	r3, [pc, #56]	; (800be38 <UTIL_SEQ_Run+0x1d8>)
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	4013      	ands	r3, r2
 800be04:	2b00      	cmp	r3, #0
 800be06:	d107      	bne.n	800be18 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 800be08:	4b0f      	ldr	r3, [pc, #60]	; (800be48 <UTIL_SEQ_Run+0x1e8>)
 800be0a:	681a      	ldr	r2, [r3, #0]
 800be0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be0e:	4013      	ands	r3, r2
 800be10:	2b00      	cmp	r3, #0
 800be12:	d101      	bne.n	800be18 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 800be14:	f7f5 fada 	bl	80013cc <UTIL_SEQ_Idle>
 800be18:	69fb      	ldr	r3, [r7, #28]
 800be1a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	f383 8810 	msr	PRIMASK, r3
}
 800be22:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 800be24:	f000 f917 	bl	800c056 <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 800be28:	4a03      	ldr	r2, [pc, #12]	; (800be38 <UTIL_SEQ_Run+0x1d8>)
 800be2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be2c:	6013      	str	r3, [r2, #0]

  return;
 800be2e:	bf00      	nop
}
 800be30:	3740      	adds	r7, #64	; 0x40
 800be32:	46bd      	mov	sp, r7
 800be34:	bd80      	pop	{r7, pc}
 800be36:	bf00      	nop
 800be38:	20000024 	.word	0x20000024
 800be3c:	20000df4 	.word	0x20000df4
 800be40:	20000df8 	.word	0x20000df8
 800be44:	20000020 	.word	0x20000020
 800be48:	20000dfc 	.word	0x20000dfc
 800be4c:	20000e84 	.word	0x20000e84
 800be50:	20000e00 	.word	0x20000e00
 800be54:	20000e04 	.word	0x20000e04

0800be58 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 800be58:	b580      	push	{r7, lr}
 800be5a:	b088      	sub	sp, #32
 800be5c:	af00      	add	r7, sp, #0
 800be5e:	60f8      	str	r0, [r7, #12]
 800be60:	60b9      	str	r1, [r7, #8]
 800be62:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800be64:	f3ef 8310 	mrs	r3, PRIMASK
 800be68:	617b      	str	r3, [r7, #20]
  return(result);
 800be6a:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 800be6c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800be6e:	b672      	cpsid	i
}
 800be70:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800be72:	68f8      	ldr	r0, [r7, #12]
 800be74:	f000 f8f6 	bl	800c064 <SEQ_BitPosition>
 800be78:	4603      	mov	r3, r0
 800be7a:	4619      	mov	r1, r3
 800be7c:	4a06      	ldr	r2, [pc, #24]	; (800be98 <UTIL_SEQ_RegTask+0x40>)
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800be84:	69fb      	ldr	r3, [r7, #28]
 800be86:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800be88:	69bb      	ldr	r3, [r7, #24]
 800be8a:	f383 8810 	msr	PRIMASK, r3
}
 800be8e:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 800be90:	bf00      	nop
}
 800be92:	3720      	adds	r7, #32
 800be94:	46bd      	mov	sp, r7
 800be96:	bd80      	pop	{r7, pc}
 800be98:	20000e04 	.word	0x20000e04

0800be9c <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 800be9c:	b480      	push	{r7}
 800be9e:	b087      	sub	sp, #28
 800bea0:	af00      	add	r7, sp, #0
 800bea2:	6078      	str	r0, [r7, #4]
 800bea4:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bea6:	f3ef 8310 	mrs	r3, PRIMASK
 800beaa:	60fb      	str	r3, [r7, #12]
  return(result);
 800beac:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800beae:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800beb0:	b672      	cpsid	i
}
 800beb2:	bf00      	nop

  TaskSet |= TaskId_bm;
 800beb4:	4b0d      	ldr	r3, [pc, #52]	; (800beec <UTIL_SEQ_SetTask+0x50>)
 800beb6:	681a      	ldr	r2, [r3, #0]
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	4313      	orrs	r3, r2
 800bebc:	4a0b      	ldr	r2, [pc, #44]	; (800beec <UTIL_SEQ_SetTask+0x50>)
 800bebe:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800bec0:	4a0b      	ldr	r2, [pc, #44]	; (800bef0 <UTIL_SEQ_SetTask+0x54>)
 800bec2:	683b      	ldr	r3, [r7, #0]
 800bec4:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	431a      	orrs	r2, r3
 800becc:	4908      	ldr	r1, [pc, #32]	; (800bef0 <UTIL_SEQ_SetTask+0x54>)
 800bece:	683b      	ldr	r3, [r7, #0]
 800bed0:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800bed4:	697b      	ldr	r3, [r7, #20]
 800bed6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bed8:	693b      	ldr	r3, [r7, #16]
 800beda:	f383 8810 	msr	PRIMASK, r3
}
 800bede:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800bee0:	bf00      	nop
}
 800bee2:	371c      	adds	r7, #28
 800bee4:	46bd      	mov	sp, r7
 800bee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beea:	4770      	bx	lr
 800beec:	20000df4 	.word	0x20000df4
 800bef0:	20000e84 	.word	0x20000e84

0800bef4 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800bef4:	b480      	push	{r7}
 800bef6:	b087      	sub	sp, #28
 800bef8:	af00      	add	r7, sp, #0
 800befa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800befc:	f3ef 8310 	mrs	r3, PRIMASK
 800bf00:	60fb      	str	r3, [r7, #12]
  return(result);
 800bf02:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800bf04:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800bf06:	b672      	cpsid	i
}
 800bf08:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	43da      	mvns	r2, r3
 800bf0e:	4b08      	ldr	r3, [pc, #32]	; (800bf30 <UTIL_SEQ_PauseTask+0x3c>)
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	4013      	ands	r3, r2
 800bf14:	4a06      	ldr	r2, [pc, #24]	; (800bf30 <UTIL_SEQ_PauseTask+0x3c>)
 800bf16:	6013      	str	r3, [r2, #0]
 800bf18:	697b      	ldr	r3, [r7, #20]
 800bf1a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bf1c:	693b      	ldr	r3, [r7, #16]
 800bf1e:	f383 8810 	msr	PRIMASK, r3
}
 800bf22:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800bf24:	bf00      	nop
}
 800bf26:	371c      	adds	r7, #28
 800bf28:	46bd      	mov	sp, r7
 800bf2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf2e:	4770      	bx	lr
 800bf30:	20000020 	.word	0x20000020

0800bf34 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800bf34:	b480      	push	{r7}
 800bf36:	b087      	sub	sp, #28
 800bf38:	af00      	add	r7, sp, #0
 800bf3a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bf3c:	f3ef 8310 	mrs	r3, PRIMASK
 800bf40:	60fb      	str	r3, [r7, #12]
  return(result);
 800bf42:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800bf44:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800bf46:	b672      	cpsid	i
}
 800bf48:	bf00      	nop

  TaskMask |= TaskId_bm;
 800bf4a:	4b09      	ldr	r3, [pc, #36]	; (800bf70 <UTIL_SEQ_ResumeTask+0x3c>)
 800bf4c:	681a      	ldr	r2, [r3, #0]
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	4313      	orrs	r3, r2
 800bf52:	4a07      	ldr	r2, [pc, #28]	; (800bf70 <UTIL_SEQ_ResumeTask+0x3c>)
 800bf54:	6013      	str	r3, [r2, #0]
 800bf56:	697b      	ldr	r3, [r7, #20]
 800bf58:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bf5a:	693b      	ldr	r3, [r7, #16]
 800bf5c:	f383 8810 	msr	PRIMASK, r3
}
 800bf60:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800bf62:	bf00      	nop
}
 800bf64:	371c      	adds	r7, #28
 800bf66:	46bd      	mov	sp, r7
 800bf68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf6c:	4770      	bx	lr
 800bf6e:	bf00      	nop
 800bf70:	20000020 	.word	0x20000020

0800bf74 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 800bf74:	b480      	push	{r7}
 800bf76:	b087      	sub	sp, #28
 800bf78:	af00      	add	r7, sp, #0
 800bf7a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bf7c:	f3ef 8310 	mrs	r3, PRIMASK
 800bf80:	60fb      	str	r3, [r7, #12]
  return(result);
 800bf82:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800bf84:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800bf86:	b672      	cpsid	i
}
 800bf88:	bf00      	nop

  EvtSet |= EvtId_bm;
 800bf8a:	4b09      	ldr	r3, [pc, #36]	; (800bfb0 <UTIL_SEQ_SetEvt+0x3c>)
 800bf8c:	681a      	ldr	r2, [r3, #0]
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	4313      	orrs	r3, r2
 800bf92:	4a07      	ldr	r2, [pc, #28]	; (800bfb0 <UTIL_SEQ_SetEvt+0x3c>)
 800bf94:	6013      	str	r3, [r2, #0]
 800bf96:	697b      	ldr	r3, [r7, #20]
 800bf98:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bf9a:	693b      	ldr	r3, [r7, #16]
 800bf9c:	f383 8810 	msr	PRIMASK, r3
}
 800bfa0:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800bfa2:	bf00      	nop
}
 800bfa4:	371c      	adds	r7, #28
 800bfa6:	46bd      	mov	sp, r7
 800bfa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfac:	4770      	bx	lr
 800bfae:	bf00      	nop
 800bfb0:	20000df8 	.word	0x20000df8

0800bfb4 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 800bfb4:	b580      	push	{r7, lr}
 800bfb6:	b088      	sub	sp, #32
 800bfb8:	af00      	add	r7, sp, #0
 800bfba:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 800bfbc:	4b1f      	ldr	r3, [pc, #124]	; (800c03c <UTIL_SEQ_WaitEvt+0x88>)
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 800bfc2:	4b1e      	ldr	r3, [pc, #120]	; (800c03c <UTIL_SEQ_WaitEvt+0x88>)
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bfca:	d102      	bne.n	800bfd2 <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 800bfcc:	2300      	movs	r3, #0
 800bfce:	61fb      	str	r3, [r7, #28]
 800bfd0:	e005      	b.n	800bfde <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 800bfd2:	4b1a      	ldr	r3, [pc, #104]	; (800c03c <UTIL_SEQ_WaitEvt+0x88>)
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	2201      	movs	r2, #1
 800bfd8:	fa02 f303 	lsl.w	r3, r2, r3
 800bfdc:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 800bfde:	4b18      	ldr	r3, [pc, #96]	; (800c040 <UTIL_SEQ_WaitEvt+0x8c>)
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 800bfe4:	4a16      	ldr	r2, [pc, #88]	; (800c040 <UTIL_SEQ_WaitEvt+0x8c>)
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 800bfea:	e003      	b.n	800bff4 <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 800bfec:	6879      	ldr	r1, [r7, #4]
 800bfee:	69f8      	ldr	r0, [r7, #28]
 800bff0:	f7f5 f9f3 	bl	80013da <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 800bff4:	4b13      	ldr	r3, [pc, #76]	; (800c044 <UTIL_SEQ_WaitEvt+0x90>)
 800bff6:	681a      	ldr	r2, [r3, #0]
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	4013      	ands	r3, r2
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d0f5      	beq.n	800bfec <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 800c000:	4a0e      	ldr	r2, [pc, #56]	; (800c03c <UTIL_SEQ_WaitEvt+0x88>)
 800c002:	69bb      	ldr	r3, [r7, #24]
 800c004:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c006:	f3ef 8310 	mrs	r3, PRIMASK
 800c00a:	60bb      	str	r3, [r7, #8]
  return(result);
 800c00c:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800c00e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800c010:	b672      	cpsid	i
}
 800c012:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	43da      	mvns	r2, r3
 800c018:	4b0a      	ldr	r3, [pc, #40]	; (800c044 <UTIL_SEQ_WaitEvt+0x90>)
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	4013      	ands	r3, r2
 800c01e:	4a09      	ldr	r2, [pc, #36]	; (800c044 <UTIL_SEQ_WaitEvt+0x90>)
 800c020:	6013      	str	r3, [r2, #0]
 800c022:	693b      	ldr	r3, [r7, #16]
 800c024:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	f383 8810 	msr	PRIMASK, r3
}
 800c02c:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 800c02e:	4a04      	ldr	r2, [pc, #16]	; (800c040 <UTIL_SEQ_WaitEvt+0x8c>)
 800c030:	697b      	ldr	r3, [r7, #20]
 800c032:	6013      	str	r3, [r2, #0]
  return;
 800c034:	bf00      	nop
}
 800c036:	3720      	adds	r7, #32
 800c038:	46bd      	mov	sp, r7
 800c03a:	bd80      	pop	{r7, pc}
 800c03c:	20000e00 	.word	0x20000e00
 800c040:	20000dfc 	.word	0x20000dfc
 800c044:	20000df8 	.word	0x20000df8

0800c048 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 800c048:	b480      	push	{r7}
 800c04a:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800c04c:	bf00      	nop
}
 800c04e:	46bd      	mov	sp, r7
 800c050:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c054:	4770      	bx	lr

0800c056 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 800c056:	b480      	push	{r7}
 800c058:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800c05a:	bf00      	nop
}
 800c05c:	46bd      	mov	sp, r7
 800c05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c062:	4770      	bx	lr

0800c064 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 800c064:	b480      	push	{r7}
 800c066:	b085      	sub	sp, #20
 800c068:	af00      	add	r7, sp, #0
 800c06a:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 800c06c:	2300      	movs	r3, #0
 800c06e:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 800c074:	68bb      	ldr	r3, [r7, #8]
 800c076:	0c1b      	lsrs	r3, r3, #16
 800c078:	041b      	lsls	r3, r3, #16
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d104      	bne.n	800c088 <SEQ_BitPosition+0x24>
 800c07e:	2310      	movs	r3, #16
 800c080:	73fb      	strb	r3, [r7, #15]
 800c082:	68bb      	ldr	r3, [r7, #8]
 800c084:	041b      	lsls	r3, r3, #16
 800c086:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 800c088:	68bb      	ldr	r3, [r7, #8]
 800c08a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d105      	bne.n	800c09e <SEQ_BitPosition+0x3a>
 800c092:	7bfb      	ldrb	r3, [r7, #15]
 800c094:	3308      	adds	r3, #8
 800c096:	73fb      	strb	r3, [r7, #15]
 800c098:	68bb      	ldr	r3, [r7, #8]
 800c09a:	021b      	lsls	r3, r3, #8
 800c09c:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 800c09e:	68bb      	ldr	r3, [r7, #8]
 800c0a0:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d105      	bne.n	800c0b4 <SEQ_BitPosition+0x50>
 800c0a8:	7bfb      	ldrb	r3, [r7, #15]
 800c0aa:	3304      	adds	r3, #4
 800c0ac:	73fb      	strb	r3, [r7, #15]
 800c0ae:	68bb      	ldr	r3, [r7, #8]
 800c0b0:	011b      	lsls	r3, r3, #4
 800c0b2:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 800c0b4:	68bb      	ldr	r3, [r7, #8]
 800c0b6:	0f1b      	lsrs	r3, r3, #28
 800c0b8:	4a07      	ldr	r2, [pc, #28]	; (800c0d8 <SEQ_BitPosition+0x74>)
 800c0ba:	5cd2      	ldrb	r2, [r2, r3]
 800c0bc:	7bfb      	ldrb	r3, [r7, #15]
 800c0be:	4413      	add	r3, r2
 800c0c0:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 800c0c2:	7bfb      	ldrb	r3, [r7, #15]
 800c0c4:	f1c3 031f 	rsb	r3, r3, #31
 800c0c8:	b2db      	uxtb	r3, r3
}
 800c0ca:	4618      	mov	r0, r3
 800c0cc:	3714      	adds	r7, #20
 800c0ce:	46bd      	mov	sp, r7
 800c0d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0d4:	4770      	bx	lr
 800c0d6:	bf00      	nop
 800c0d8:	0800d800 	.word	0x0800d800

0800c0dc <__errno>:
 800c0dc:	4b01      	ldr	r3, [pc, #4]	; (800c0e4 <__errno+0x8>)
 800c0de:	6818      	ldr	r0, [r3, #0]
 800c0e0:	4770      	bx	lr
 800c0e2:	bf00      	nop
 800c0e4:	20000028 	.word	0x20000028

0800c0e8 <__libc_init_array>:
 800c0e8:	b570      	push	{r4, r5, r6, lr}
 800c0ea:	4d0d      	ldr	r5, [pc, #52]	; (800c120 <__libc_init_array+0x38>)
 800c0ec:	4c0d      	ldr	r4, [pc, #52]	; (800c124 <__libc_init_array+0x3c>)
 800c0ee:	1b64      	subs	r4, r4, r5
 800c0f0:	10a4      	asrs	r4, r4, #2
 800c0f2:	2600      	movs	r6, #0
 800c0f4:	42a6      	cmp	r6, r4
 800c0f6:	d109      	bne.n	800c10c <__libc_init_array+0x24>
 800c0f8:	4d0b      	ldr	r5, [pc, #44]	; (800c128 <__libc_init_array+0x40>)
 800c0fa:	4c0c      	ldr	r4, [pc, #48]	; (800c12c <__libc_init_array+0x44>)
 800c0fc:	f001 f98a 	bl	800d414 <_init>
 800c100:	1b64      	subs	r4, r4, r5
 800c102:	10a4      	asrs	r4, r4, #2
 800c104:	2600      	movs	r6, #0
 800c106:	42a6      	cmp	r6, r4
 800c108:	d105      	bne.n	800c116 <__libc_init_array+0x2e>
 800c10a:	bd70      	pop	{r4, r5, r6, pc}
 800c10c:	f855 3b04 	ldr.w	r3, [r5], #4
 800c110:	4798      	blx	r3
 800c112:	3601      	adds	r6, #1
 800c114:	e7ee      	b.n	800c0f4 <__libc_init_array+0xc>
 800c116:	f855 3b04 	ldr.w	r3, [r5], #4
 800c11a:	4798      	blx	r3
 800c11c:	3601      	adds	r6, #1
 800c11e:	e7f2      	b.n	800c106 <__libc_init_array+0x1e>
 800c120:	0800d8b0 	.word	0x0800d8b0
 800c124:	0800d8b0 	.word	0x0800d8b0
 800c128:	0800d8b0 	.word	0x0800d8b0
 800c12c:	0800d8b4 	.word	0x0800d8b4

0800c130 <memcpy>:
 800c130:	440a      	add	r2, r1
 800c132:	4291      	cmp	r1, r2
 800c134:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800c138:	d100      	bne.n	800c13c <memcpy+0xc>
 800c13a:	4770      	bx	lr
 800c13c:	b510      	push	{r4, lr}
 800c13e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c142:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c146:	4291      	cmp	r1, r2
 800c148:	d1f9      	bne.n	800c13e <memcpy+0xe>
 800c14a:	bd10      	pop	{r4, pc}

0800c14c <memset>:
 800c14c:	4402      	add	r2, r0
 800c14e:	4603      	mov	r3, r0
 800c150:	4293      	cmp	r3, r2
 800c152:	d100      	bne.n	800c156 <memset+0xa>
 800c154:	4770      	bx	lr
 800c156:	f803 1b01 	strb.w	r1, [r3], #1
 800c15a:	e7f9      	b.n	800c150 <memset+0x4>

0800c15c <iprintf>:
 800c15c:	b40f      	push	{r0, r1, r2, r3}
 800c15e:	4b0a      	ldr	r3, [pc, #40]	; (800c188 <iprintf+0x2c>)
 800c160:	b513      	push	{r0, r1, r4, lr}
 800c162:	681c      	ldr	r4, [r3, #0]
 800c164:	b124      	cbz	r4, 800c170 <iprintf+0x14>
 800c166:	69a3      	ldr	r3, [r4, #24]
 800c168:	b913      	cbnz	r3, 800c170 <iprintf+0x14>
 800c16a:	4620      	mov	r0, r4
 800c16c:	f000 f886 	bl	800c27c <__sinit>
 800c170:	ab05      	add	r3, sp, #20
 800c172:	9a04      	ldr	r2, [sp, #16]
 800c174:	68a1      	ldr	r1, [r4, #8]
 800c176:	9301      	str	r3, [sp, #4]
 800c178:	4620      	mov	r0, r4
 800c17a:	f000 fb39 	bl	800c7f0 <_vfiprintf_r>
 800c17e:	b002      	add	sp, #8
 800c180:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c184:	b004      	add	sp, #16
 800c186:	4770      	bx	lr
 800c188:	20000028 	.word	0x20000028

0800c18c <siprintf>:
 800c18c:	b40e      	push	{r1, r2, r3}
 800c18e:	b500      	push	{lr}
 800c190:	b09c      	sub	sp, #112	; 0x70
 800c192:	ab1d      	add	r3, sp, #116	; 0x74
 800c194:	9002      	str	r0, [sp, #8]
 800c196:	9006      	str	r0, [sp, #24]
 800c198:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c19c:	4809      	ldr	r0, [pc, #36]	; (800c1c4 <siprintf+0x38>)
 800c19e:	9107      	str	r1, [sp, #28]
 800c1a0:	9104      	str	r1, [sp, #16]
 800c1a2:	4909      	ldr	r1, [pc, #36]	; (800c1c8 <siprintf+0x3c>)
 800c1a4:	f853 2b04 	ldr.w	r2, [r3], #4
 800c1a8:	9105      	str	r1, [sp, #20]
 800c1aa:	6800      	ldr	r0, [r0, #0]
 800c1ac:	9301      	str	r3, [sp, #4]
 800c1ae:	a902      	add	r1, sp, #8
 800c1b0:	f000 f9f4 	bl	800c59c <_svfiprintf_r>
 800c1b4:	9b02      	ldr	r3, [sp, #8]
 800c1b6:	2200      	movs	r2, #0
 800c1b8:	701a      	strb	r2, [r3, #0]
 800c1ba:	b01c      	add	sp, #112	; 0x70
 800c1bc:	f85d eb04 	ldr.w	lr, [sp], #4
 800c1c0:	b003      	add	sp, #12
 800c1c2:	4770      	bx	lr
 800c1c4:	20000028 	.word	0x20000028
 800c1c8:	ffff0208 	.word	0xffff0208

0800c1cc <std>:
 800c1cc:	2300      	movs	r3, #0
 800c1ce:	b510      	push	{r4, lr}
 800c1d0:	4604      	mov	r4, r0
 800c1d2:	e9c0 3300 	strd	r3, r3, [r0]
 800c1d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c1da:	6083      	str	r3, [r0, #8]
 800c1dc:	8181      	strh	r1, [r0, #12]
 800c1de:	6643      	str	r3, [r0, #100]	; 0x64
 800c1e0:	81c2      	strh	r2, [r0, #14]
 800c1e2:	6183      	str	r3, [r0, #24]
 800c1e4:	4619      	mov	r1, r3
 800c1e6:	2208      	movs	r2, #8
 800c1e8:	305c      	adds	r0, #92	; 0x5c
 800c1ea:	f7ff ffaf 	bl	800c14c <memset>
 800c1ee:	4b05      	ldr	r3, [pc, #20]	; (800c204 <std+0x38>)
 800c1f0:	6263      	str	r3, [r4, #36]	; 0x24
 800c1f2:	4b05      	ldr	r3, [pc, #20]	; (800c208 <std+0x3c>)
 800c1f4:	62a3      	str	r3, [r4, #40]	; 0x28
 800c1f6:	4b05      	ldr	r3, [pc, #20]	; (800c20c <std+0x40>)
 800c1f8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c1fa:	4b05      	ldr	r3, [pc, #20]	; (800c210 <std+0x44>)
 800c1fc:	6224      	str	r4, [r4, #32]
 800c1fe:	6323      	str	r3, [r4, #48]	; 0x30
 800c200:	bd10      	pop	{r4, pc}
 800c202:	bf00      	nop
 800c204:	0800cd99 	.word	0x0800cd99
 800c208:	0800cdbb 	.word	0x0800cdbb
 800c20c:	0800cdf3 	.word	0x0800cdf3
 800c210:	0800ce17 	.word	0x0800ce17

0800c214 <_cleanup_r>:
 800c214:	4901      	ldr	r1, [pc, #4]	; (800c21c <_cleanup_r+0x8>)
 800c216:	f000 b8af 	b.w	800c378 <_fwalk_reent>
 800c21a:	bf00      	nop
 800c21c:	0800d0f1 	.word	0x0800d0f1

0800c220 <__sfmoreglue>:
 800c220:	b570      	push	{r4, r5, r6, lr}
 800c222:	2268      	movs	r2, #104	; 0x68
 800c224:	1e4d      	subs	r5, r1, #1
 800c226:	4355      	muls	r5, r2
 800c228:	460e      	mov	r6, r1
 800c22a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c22e:	f000 f8e5 	bl	800c3fc <_malloc_r>
 800c232:	4604      	mov	r4, r0
 800c234:	b140      	cbz	r0, 800c248 <__sfmoreglue+0x28>
 800c236:	2100      	movs	r1, #0
 800c238:	e9c0 1600 	strd	r1, r6, [r0]
 800c23c:	300c      	adds	r0, #12
 800c23e:	60a0      	str	r0, [r4, #8]
 800c240:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c244:	f7ff ff82 	bl	800c14c <memset>
 800c248:	4620      	mov	r0, r4
 800c24a:	bd70      	pop	{r4, r5, r6, pc}

0800c24c <__sfp_lock_acquire>:
 800c24c:	4801      	ldr	r0, [pc, #4]	; (800c254 <__sfp_lock_acquire+0x8>)
 800c24e:	f000 b8b3 	b.w	800c3b8 <__retarget_lock_acquire_recursive>
 800c252:	bf00      	nop
 800c254:	20000e95 	.word	0x20000e95

0800c258 <__sfp_lock_release>:
 800c258:	4801      	ldr	r0, [pc, #4]	; (800c260 <__sfp_lock_release+0x8>)
 800c25a:	f000 b8ae 	b.w	800c3ba <__retarget_lock_release_recursive>
 800c25e:	bf00      	nop
 800c260:	20000e95 	.word	0x20000e95

0800c264 <__sinit_lock_acquire>:
 800c264:	4801      	ldr	r0, [pc, #4]	; (800c26c <__sinit_lock_acquire+0x8>)
 800c266:	f000 b8a7 	b.w	800c3b8 <__retarget_lock_acquire_recursive>
 800c26a:	bf00      	nop
 800c26c:	20000e96 	.word	0x20000e96

0800c270 <__sinit_lock_release>:
 800c270:	4801      	ldr	r0, [pc, #4]	; (800c278 <__sinit_lock_release+0x8>)
 800c272:	f000 b8a2 	b.w	800c3ba <__retarget_lock_release_recursive>
 800c276:	bf00      	nop
 800c278:	20000e96 	.word	0x20000e96

0800c27c <__sinit>:
 800c27c:	b510      	push	{r4, lr}
 800c27e:	4604      	mov	r4, r0
 800c280:	f7ff fff0 	bl	800c264 <__sinit_lock_acquire>
 800c284:	69a3      	ldr	r3, [r4, #24]
 800c286:	b11b      	cbz	r3, 800c290 <__sinit+0x14>
 800c288:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c28c:	f7ff bff0 	b.w	800c270 <__sinit_lock_release>
 800c290:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c294:	6523      	str	r3, [r4, #80]	; 0x50
 800c296:	4b13      	ldr	r3, [pc, #76]	; (800c2e4 <__sinit+0x68>)
 800c298:	4a13      	ldr	r2, [pc, #76]	; (800c2e8 <__sinit+0x6c>)
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	62a2      	str	r2, [r4, #40]	; 0x28
 800c29e:	42a3      	cmp	r3, r4
 800c2a0:	bf04      	itt	eq
 800c2a2:	2301      	moveq	r3, #1
 800c2a4:	61a3      	streq	r3, [r4, #24]
 800c2a6:	4620      	mov	r0, r4
 800c2a8:	f000 f820 	bl	800c2ec <__sfp>
 800c2ac:	6060      	str	r0, [r4, #4]
 800c2ae:	4620      	mov	r0, r4
 800c2b0:	f000 f81c 	bl	800c2ec <__sfp>
 800c2b4:	60a0      	str	r0, [r4, #8]
 800c2b6:	4620      	mov	r0, r4
 800c2b8:	f000 f818 	bl	800c2ec <__sfp>
 800c2bc:	2200      	movs	r2, #0
 800c2be:	60e0      	str	r0, [r4, #12]
 800c2c0:	2104      	movs	r1, #4
 800c2c2:	6860      	ldr	r0, [r4, #4]
 800c2c4:	f7ff ff82 	bl	800c1cc <std>
 800c2c8:	68a0      	ldr	r0, [r4, #8]
 800c2ca:	2201      	movs	r2, #1
 800c2cc:	2109      	movs	r1, #9
 800c2ce:	f7ff ff7d 	bl	800c1cc <std>
 800c2d2:	68e0      	ldr	r0, [r4, #12]
 800c2d4:	2202      	movs	r2, #2
 800c2d6:	2112      	movs	r1, #18
 800c2d8:	f7ff ff78 	bl	800c1cc <std>
 800c2dc:	2301      	movs	r3, #1
 800c2de:	61a3      	str	r3, [r4, #24]
 800c2e0:	e7d2      	b.n	800c288 <__sinit+0xc>
 800c2e2:	bf00      	nop
 800c2e4:	0800d810 	.word	0x0800d810
 800c2e8:	0800c215 	.word	0x0800c215

0800c2ec <__sfp>:
 800c2ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2ee:	4607      	mov	r7, r0
 800c2f0:	f7ff ffac 	bl	800c24c <__sfp_lock_acquire>
 800c2f4:	4b1e      	ldr	r3, [pc, #120]	; (800c370 <__sfp+0x84>)
 800c2f6:	681e      	ldr	r6, [r3, #0]
 800c2f8:	69b3      	ldr	r3, [r6, #24]
 800c2fa:	b913      	cbnz	r3, 800c302 <__sfp+0x16>
 800c2fc:	4630      	mov	r0, r6
 800c2fe:	f7ff ffbd 	bl	800c27c <__sinit>
 800c302:	3648      	adds	r6, #72	; 0x48
 800c304:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c308:	3b01      	subs	r3, #1
 800c30a:	d503      	bpl.n	800c314 <__sfp+0x28>
 800c30c:	6833      	ldr	r3, [r6, #0]
 800c30e:	b30b      	cbz	r3, 800c354 <__sfp+0x68>
 800c310:	6836      	ldr	r6, [r6, #0]
 800c312:	e7f7      	b.n	800c304 <__sfp+0x18>
 800c314:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c318:	b9d5      	cbnz	r5, 800c350 <__sfp+0x64>
 800c31a:	4b16      	ldr	r3, [pc, #88]	; (800c374 <__sfp+0x88>)
 800c31c:	60e3      	str	r3, [r4, #12]
 800c31e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c322:	6665      	str	r5, [r4, #100]	; 0x64
 800c324:	f000 f847 	bl	800c3b6 <__retarget_lock_init_recursive>
 800c328:	f7ff ff96 	bl	800c258 <__sfp_lock_release>
 800c32c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c330:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c334:	6025      	str	r5, [r4, #0]
 800c336:	61a5      	str	r5, [r4, #24]
 800c338:	2208      	movs	r2, #8
 800c33a:	4629      	mov	r1, r5
 800c33c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c340:	f7ff ff04 	bl	800c14c <memset>
 800c344:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c348:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c34c:	4620      	mov	r0, r4
 800c34e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c350:	3468      	adds	r4, #104	; 0x68
 800c352:	e7d9      	b.n	800c308 <__sfp+0x1c>
 800c354:	2104      	movs	r1, #4
 800c356:	4638      	mov	r0, r7
 800c358:	f7ff ff62 	bl	800c220 <__sfmoreglue>
 800c35c:	4604      	mov	r4, r0
 800c35e:	6030      	str	r0, [r6, #0]
 800c360:	2800      	cmp	r0, #0
 800c362:	d1d5      	bne.n	800c310 <__sfp+0x24>
 800c364:	f7ff ff78 	bl	800c258 <__sfp_lock_release>
 800c368:	230c      	movs	r3, #12
 800c36a:	603b      	str	r3, [r7, #0]
 800c36c:	e7ee      	b.n	800c34c <__sfp+0x60>
 800c36e:	bf00      	nop
 800c370:	0800d810 	.word	0x0800d810
 800c374:	ffff0001 	.word	0xffff0001

0800c378 <_fwalk_reent>:
 800c378:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c37c:	4606      	mov	r6, r0
 800c37e:	4688      	mov	r8, r1
 800c380:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c384:	2700      	movs	r7, #0
 800c386:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c38a:	f1b9 0901 	subs.w	r9, r9, #1
 800c38e:	d505      	bpl.n	800c39c <_fwalk_reent+0x24>
 800c390:	6824      	ldr	r4, [r4, #0]
 800c392:	2c00      	cmp	r4, #0
 800c394:	d1f7      	bne.n	800c386 <_fwalk_reent+0xe>
 800c396:	4638      	mov	r0, r7
 800c398:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c39c:	89ab      	ldrh	r3, [r5, #12]
 800c39e:	2b01      	cmp	r3, #1
 800c3a0:	d907      	bls.n	800c3b2 <_fwalk_reent+0x3a>
 800c3a2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c3a6:	3301      	adds	r3, #1
 800c3a8:	d003      	beq.n	800c3b2 <_fwalk_reent+0x3a>
 800c3aa:	4629      	mov	r1, r5
 800c3ac:	4630      	mov	r0, r6
 800c3ae:	47c0      	blx	r8
 800c3b0:	4307      	orrs	r7, r0
 800c3b2:	3568      	adds	r5, #104	; 0x68
 800c3b4:	e7e9      	b.n	800c38a <_fwalk_reent+0x12>

0800c3b6 <__retarget_lock_init_recursive>:
 800c3b6:	4770      	bx	lr

0800c3b8 <__retarget_lock_acquire_recursive>:
 800c3b8:	4770      	bx	lr

0800c3ba <__retarget_lock_release_recursive>:
 800c3ba:	4770      	bx	lr

0800c3bc <sbrk_aligned>:
 800c3bc:	b570      	push	{r4, r5, r6, lr}
 800c3be:	4e0e      	ldr	r6, [pc, #56]	; (800c3f8 <sbrk_aligned+0x3c>)
 800c3c0:	460c      	mov	r4, r1
 800c3c2:	6831      	ldr	r1, [r6, #0]
 800c3c4:	4605      	mov	r5, r0
 800c3c6:	b911      	cbnz	r1, 800c3ce <sbrk_aligned+0x12>
 800c3c8:	f000 fcd6 	bl	800cd78 <_sbrk_r>
 800c3cc:	6030      	str	r0, [r6, #0]
 800c3ce:	4621      	mov	r1, r4
 800c3d0:	4628      	mov	r0, r5
 800c3d2:	f000 fcd1 	bl	800cd78 <_sbrk_r>
 800c3d6:	1c43      	adds	r3, r0, #1
 800c3d8:	d00a      	beq.n	800c3f0 <sbrk_aligned+0x34>
 800c3da:	1cc4      	adds	r4, r0, #3
 800c3dc:	f024 0403 	bic.w	r4, r4, #3
 800c3e0:	42a0      	cmp	r0, r4
 800c3e2:	d007      	beq.n	800c3f4 <sbrk_aligned+0x38>
 800c3e4:	1a21      	subs	r1, r4, r0
 800c3e6:	4628      	mov	r0, r5
 800c3e8:	f000 fcc6 	bl	800cd78 <_sbrk_r>
 800c3ec:	3001      	adds	r0, #1
 800c3ee:	d101      	bne.n	800c3f4 <sbrk_aligned+0x38>
 800c3f0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800c3f4:	4620      	mov	r0, r4
 800c3f6:	bd70      	pop	{r4, r5, r6, pc}
 800c3f8:	20000e9c 	.word	0x20000e9c

0800c3fc <_malloc_r>:
 800c3fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c400:	1ccd      	adds	r5, r1, #3
 800c402:	f025 0503 	bic.w	r5, r5, #3
 800c406:	3508      	adds	r5, #8
 800c408:	2d0c      	cmp	r5, #12
 800c40a:	bf38      	it	cc
 800c40c:	250c      	movcc	r5, #12
 800c40e:	2d00      	cmp	r5, #0
 800c410:	4607      	mov	r7, r0
 800c412:	db01      	blt.n	800c418 <_malloc_r+0x1c>
 800c414:	42a9      	cmp	r1, r5
 800c416:	d905      	bls.n	800c424 <_malloc_r+0x28>
 800c418:	230c      	movs	r3, #12
 800c41a:	603b      	str	r3, [r7, #0]
 800c41c:	2600      	movs	r6, #0
 800c41e:	4630      	mov	r0, r6
 800c420:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c424:	4e2e      	ldr	r6, [pc, #184]	; (800c4e0 <_malloc_r+0xe4>)
 800c426:	f000 ff31 	bl	800d28c <__malloc_lock>
 800c42a:	6833      	ldr	r3, [r6, #0]
 800c42c:	461c      	mov	r4, r3
 800c42e:	bb34      	cbnz	r4, 800c47e <_malloc_r+0x82>
 800c430:	4629      	mov	r1, r5
 800c432:	4638      	mov	r0, r7
 800c434:	f7ff ffc2 	bl	800c3bc <sbrk_aligned>
 800c438:	1c43      	adds	r3, r0, #1
 800c43a:	4604      	mov	r4, r0
 800c43c:	d14d      	bne.n	800c4da <_malloc_r+0xde>
 800c43e:	6834      	ldr	r4, [r6, #0]
 800c440:	4626      	mov	r6, r4
 800c442:	2e00      	cmp	r6, #0
 800c444:	d140      	bne.n	800c4c8 <_malloc_r+0xcc>
 800c446:	6823      	ldr	r3, [r4, #0]
 800c448:	4631      	mov	r1, r6
 800c44a:	4638      	mov	r0, r7
 800c44c:	eb04 0803 	add.w	r8, r4, r3
 800c450:	f000 fc92 	bl	800cd78 <_sbrk_r>
 800c454:	4580      	cmp	r8, r0
 800c456:	d13a      	bne.n	800c4ce <_malloc_r+0xd2>
 800c458:	6821      	ldr	r1, [r4, #0]
 800c45a:	3503      	adds	r5, #3
 800c45c:	1a6d      	subs	r5, r5, r1
 800c45e:	f025 0503 	bic.w	r5, r5, #3
 800c462:	3508      	adds	r5, #8
 800c464:	2d0c      	cmp	r5, #12
 800c466:	bf38      	it	cc
 800c468:	250c      	movcc	r5, #12
 800c46a:	4629      	mov	r1, r5
 800c46c:	4638      	mov	r0, r7
 800c46e:	f7ff ffa5 	bl	800c3bc <sbrk_aligned>
 800c472:	3001      	adds	r0, #1
 800c474:	d02b      	beq.n	800c4ce <_malloc_r+0xd2>
 800c476:	6823      	ldr	r3, [r4, #0]
 800c478:	442b      	add	r3, r5
 800c47a:	6023      	str	r3, [r4, #0]
 800c47c:	e00e      	b.n	800c49c <_malloc_r+0xa0>
 800c47e:	6822      	ldr	r2, [r4, #0]
 800c480:	1b52      	subs	r2, r2, r5
 800c482:	d41e      	bmi.n	800c4c2 <_malloc_r+0xc6>
 800c484:	2a0b      	cmp	r2, #11
 800c486:	d916      	bls.n	800c4b6 <_malloc_r+0xba>
 800c488:	1961      	adds	r1, r4, r5
 800c48a:	42a3      	cmp	r3, r4
 800c48c:	6025      	str	r5, [r4, #0]
 800c48e:	bf18      	it	ne
 800c490:	6059      	strne	r1, [r3, #4]
 800c492:	6863      	ldr	r3, [r4, #4]
 800c494:	bf08      	it	eq
 800c496:	6031      	streq	r1, [r6, #0]
 800c498:	5162      	str	r2, [r4, r5]
 800c49a:	604b      	str	r3, [r1, #4]
 800c49c:	4638      	mov	r0, r7
 800c49e:	f104 060b 	add.w	r6, r4, #11
 800c4a2:	f000 fef9 	bl	800d298 <__malloc_unlock>
 800c4a6:	f026 0607 	bic.w	r6, r6, #7
 800c4aa:	1d23      	adds	r3, r4, #4
 800c4ac:	1af2      	subs	r2, r6, r3
 800c4ae:	d0b6      	beq.n	800c41e <_malloc_r+0x22>
 800c4b0:	1b9b      	subs	r3, r3, r6
 800c4b2:	50a3      	str	r3, [r4, r2]
 800c4b4:	e7b3      	b.n	800c41e <_malloc_r+0x22>
 800c4b6:	6862      	ldr	r2, [r4, #4]
 800c4b8:	42a3      	cmp	r3, r4
 800c4ba:	bf0c      	ite	eq
 800c4bc:	6032      	streq	r2, [r6, #0]
 800c4be:	605a      	strne	r2, [r3, #4]
 800c4c0:	e7ec      	b.n	800c49c <_malloc_r+0xa0>
 800c4c2:	4623      	mov	r3, r4
 800c4c4:	6864      	ldr	r4, [r4, #4]
 800c4c6:	e7b2      	b.n	800c42e <_malloc_r+0x32>
 800c4c8:	4634      	mov	r4, r6
 800c4ca:	6876      	ldr	r6, [r6, #4]
 800c4cc:	e7b9      	b.n	800c442 <_malloc_r+0x46>
 800c4ce:	230c      	movs	r3, #12
 800c4d0:	603b      	str	r3, [r7, #0]
 800c4d2:	4638      	mov	r0, r7
 800c4d4:	f000 fee0 	bl	800d298 <__malloc_unlock>
 800c4d8:	e7a1      	b.n	800c41e <_malloc_r+0x22>
 800c4da:	6025      	str	r5, [r4, #0]
 800c4dc:	e7de      	b.n	800c49c <_malloc_r+0xa0>
 800c4de:	bf00      	nop
 800c4e0:	20000e98 	.word	0x20000e98

0800c4e4 <__ssputs_r>:
 800c4e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c4e8:	688e      	ldr	r6, [r1, #8]
 800c4ea:	429e      	cmp	r6, r3
 800c4ec:	4682      	mov	sl, r0
 800c4ee:	460c      	mov	r4, r1
 800c4f0:	4690      	mov	r8, r2
 800c4f2:	461f      	mov	r7, r3
 800c4f4:	d838      	bhi.n	800c568 <__ssputs_r+0x84>
 800c4f6:	898a      	ldrh	r2, [r1, #12]
 800c4f8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c4fc:	d032      	beq.n	800c564 <__ssputs_r+0x80>
 800c4fe:	6825      	ldr	r5, [r4, #0]
 800c500:	6909      	ldr	r1, [r1, #16]
 800c502:	eba5 0901 	sub.w	r9, r5, r1
 800c506:	6965      	ldr	r5, [r4, #20]
 800c508:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c50c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c510:	3301      	adds	r3, #1
 800c512:	444b      	add	r3, r9
 800c514:	106d      	asrs	r5, r5, #1
 800c516:	429d      	cmp	r5, r3
 800c518:	bf38      	it	cc
 800c51a:	461d      	movcc	r5, r3
 800c51c:	0553      	lsls	r3, r2, #21
 800c51e:	d531      	bpl.n	800c584 <__ssputs_r+0xa0>
 800c520:	4629      	mov	r1, r5
 800c522:	f7ff ff6b 	bl	800c3fc <_malloc_r>
 800c526:	4606      	mov	r6, r0
 800c528:	b950      	cbnz	r0, 800c540 <__ssputs_r+0x5c>
 800c52a:	230c      	movs	r3, #12
 800c52c:	f8ca 3000 	str.w	r3, [sl]
 800c530:	89a3      	ldrh	r3, [r4, #12]
 800c532:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c536:	81a3      	strh	r3, [r4, #12]
 800c538:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c53c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c540:	6921      	ldr	r1, [r4, #16]
 800c542:	464a      	mov	r2, r9
 800c544:	f7ff fdf4 	bl	800c130 <memcpy>
 800c548:	89a3      	ldrh	r3, [r4, #12]
 800c54a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c54e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c552:	81a3      	strh	r3, [r4, #12]
 800c554:	6126      	str	r6, [r4, #16]
 800c556:	6165      	str	r5, [r4, #20]
 800c558:	444e      	add	r6, r9
 800c55a:	eba5 0509 	sub.w	r5, r5, r9
 800c55e:	6026      	str	r6, [r4, #0]
 800c560:	60a5      	str	r5, [r4, #8]
 800c562:	463e      	mov	r6, r7
 800c564:	42be      	cmp	r6, r7
 800c566:	d900      	bls.n	800c56a <__ssputs_r+0x86>
 800c568:	463e      	mov	r6, r7
 800c56a:	6820      	ldr	r0, [r4, #0]
 800c56c:	4632      	mov	r2, r6
 800c56e:	4641      	mov	r1, r8
 800c570:	f000 fe72 	bl	800d258 <memmove>
 800c574:	68a3      	ldr	r3, [r4, #8]
 800c576:	1b9b      	subs	r3, r3, r6
 800c578:	60a3      	str	r3, [r4, #8]
 800c57a:	6823      	ldr	r3, [r4, #0]
 800c57c:	4433      	add	r3, r6
 800c57e:	6023      	str	r3, [r4, #0]
 800c580:	2000      	movs	r0, #0
 800c582:	e7db      	b.n	800c53c <__ssputs_r+0x58>
 800c584:	462a      	mov	r2, r5
 800c586:	f000 fed9 	bl	800d33c <_realloc_r>
 800c58a:	4606      	mov	r6, r0
 800c58c:	2800      	cmp	r0, #0
 800c58e:	d1e1      	bne.n	800c554 <__ssputs_r+0x70>
 800c590:	6921      	ldr	r1, [r4, #16]
 800c592:	4650      	mov	r0, sl
 800c594:	f000 fe86 	bl	800d2a4 <_free_r>
 800c598:	e7c7      	b.n	800c52a <__ssputs_r+0x46>
	...

0800c59c <_svfiprintf_r>:
 800c59c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5a0:	4698      	mov	r8, r3
 800c5a2:	898b      	ldrh	r3, [r1, #12]
 800c5a4:	061b      	lsls	r3, r3, #24
 800c5a6:	b09d      	sub	sp, #116	; 0x74
 800c5a8:	4607      	mov	r7, r0
 800c5aa:	460d      	mov	r5, r1
 800c5ac:	4614      	mov	r4, r2
 800c5ae:	d50e      	bpl.n	800c5ce <_svfiprintf_r+0x32>
 800c5b0:	690b      	ldr	r3, [r1, #16]
 800c5b2:	b963      	cbnz	r3, 800c5ce <_svfiprintf_r+0x32>
 800c5b4:	2140      	movs	r1, #64	; 0x40
 800c5b6:	f7ff ff21 	bl	800c3fc <_malloc_r>
 800c5ba:	6028      	str	r0, [r5, #0]
 800c5bc:	6128      	str	r0, [r5, #16]
 800c5be:	b920      	cbnz	r0, 800c5ca <_svfiprintf_r+0x2e>
 800c5c0:	230c      	movs	r3, #12
 800c5c2:	603b      	str	r3, [r7, #0]
 800c5c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c5c8:	e0d1      	b.n	800c76e <_svfiprintf_r+0x1d2>
 800c5ca:	2340      	movs	r3, #64	; 0x40
 800c5cc:	616b      	str	r3, [r5, #20]
 800c5ce:	2300      	movs	r3, #0
 800c5d0:	9309      	str	r3, [sp, #36]	; 0x24
 800c5d2:	2320      	movs	r3, #32
 800c5d4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c5d8:	f8cd 800c 	str.w	r8, [sp, #12]
 800c5dc:	2330      	movs	r3, #48	; 0x30
 800c5de:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c788 <_svfiprintf_r+0x1ec>
 800c5e2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c5e6:	f04f 0901 	mov.w	r9, #1
 800c5ea:	4623      	mov	r3, r4
 800c5ec:	469a      	mov	sl, r3
 800c5ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c5f2:	b10a      	cbz	r2, 800c5f8 <_svfiprintf_r+0x5c>
 800c5f4:	2a25      	cmp	r2, #37	; 0x25
 800c5f6:	d1f9      	bne.n	800c5ec <_svfiprintf_r+0x50>
 800c5f8:	ebba 0b04 	subs.w	fp, sl, r4
 800c5fc:	d00b      	beq.n	800c616 <_svfiprintf_r+0x7a>
 800c5fe:	465b      	mov	r3, fp
 800c600:	4622      	mov	r2, r4
 800c602:	4629      	mov	r1, r5
 800c604:	4638      	mov	r0, r7
 800c606:	f7ff ff6d 	bl	800c4e4 <__ssputs_r>
 800c60a:	3001      	adds	r0, #1
 800c60c:	f000 80aa 	beq.w	800c764 <_svfiprintf_r+0x1c8>
 800c610:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c612:	445a      	add	r2, fp
 800c614:	9209      	str	r2, [sp, #36]	; 0x24
 800c616:	f89a 3000 	ldrb.w	r3, [sl]
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	f000 80a2 	beq.w	800c764 <_svfiprintf_r+0x1c8>
 800c620:	2300      	movs	r3, #0
 800c622:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c626:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c62a:	f10a 0a01 	add.w	sl, sl, #1
 800c62e:	9304      	str	r3, [sp, #16]
 800c630:	9307      	str	r3, [sp, #28]
 800c632:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c636:	931a      	str	r3, [sp, #104]	; 0x68
 800c638:	4654      	mov	r4, sl
 800c63a:	2205      	movs	r2, #5
 800c63c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c640:	4851      	ldr	r0, [pc, #324]	; (800c788 <_svfiprintf_r+0x1ec>)
 800c642:	f7f3 fda5 	bl	8000190 <memchr>
 800c646:	9a04      	ldr	r2, [sp, #16]
 800c648:	b9d8      	cbnz	r0, 800c682 <_svfiprintf_r+0xe6>
 800c64a:	06d0      	lsls	r0, r2, #27
 800c64c:	bf44      	itt	mi
 800c64e:	2320      	movmi	r3, #32
 800c650:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c654:	0711      	lsls	r1, r2, #28
 800c656:	bf44      	itt	mi
 800c658:	232b      	movmi	r3, #43	; 0x2b
 800c65a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c65e:	f89a 3000 	ldrb.w	r3, [sl]
 800c662:	2b2a      	cmp	r3, #42	; 0x2a
 800c664:	d015      	beq.n	800c692 <_svfiprintf_r+0xf6>
 800c666:	9a07      	ldr	r2, [sp, #28]
 800c668:	4654      	mov	r4, sl
 800c66a:	2000      	movs	r0, #0
 800c66c:	f04f 0c0a 	mov.w	ip, #10
 800c670:	4621      	mov	r1, r4
 800c672:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c676:	3b30      	subs	r3, #48	; 0x30
 800c678:	2b09      	cmp	r3, #9
 800c67a:	d94e      	bls.n	800c71a <_svfiprintf_r+0x17e>
 800c67c:	b1b0      	cbz	r0, 800c6ac <_svfiprintf_r+0x110>
 800c67e:	9207      	str	r2, [sp, #28]
 800c680:	e014      	b.n	800c6ac <_svfiprintf_r+0x110>
 800c682:	eba0 0308 	sub.w	r3, r0, r8
 800c686:	fa09 f303 	lsl.w	r3, r9, r3
 800c68a:	4313      	orrs	r3, r2
 800c68c:	9304      	str	r3, [sp, #16]
 800c68e:	46a2      	mov	sl, r4
 800c690:	e7d2      	b.n	800c638 <_svfiprintf_r+0x9c>
 800c692:	9b03      	ldr	r3, [sp, #12]
 800c694:	1d19      	adds	r1, r3, #4
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	9103      	str	r1, [sp, #12]
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	bfbb      	ittet	lt
 800c69e:	425b      	neglt	r3, r3
 800c6a0:	f042 0202 	orrlt.w	r2, r2, #2
 800c6a4:	9307      	strge	r3, [sp, #28]
 800c6a6:	9307      	strlt	r3, [sp, #28]
 800c6a8:	bfb8      	it	lt
 800c6aa:	9204      	strlt	r2, [sp, #16]
 800c6ac:	7823      	ldrb	r3, [r4, #0]
 800c6ae:	2b2e      	cmp	r3, #46	; 0x2e
 800c6b0:	d10c      	bne.n	800c6cc <_svfiprintf_r+0x130>
 800c6b2:	7863      	ldrb	r3, [r4, #1]
 800c6b4:	2b2a      	cmp	r3, #42	; 0x2a
 800c6b6:	d135      	bne.n	800c724 <_svfiprintf_r+0x188>
 800c6b8:	9b03      	ldr	r3, [sp, #12]
 800c6ba:	1d1a      	adds	r2, r3, #4
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	9203      	str	r2, [sp, #12]
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	bfb8      	it	lt
 800c6c4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c6c8:	3402      	adds	r4, #2
 800c6ca:	9305      	str	r3, [sp, #20]
 800c6cc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c798 <_svfiprintf_r+0x1fc>
 800c6d0:	7821      	ldrb	r1, [r4, #0]
 800c6d2:	2203      	movs	r2, #3
 800c6d4:	4650      	mov	r0, sl
 800c6d6:	f7f3 fd5b 	bl	8000190 <memchr>
 800c6da:	b140      	cbz	r0, 800c6ee <_svfiprintf_r+0x152>
 800c6dc:	2340      	movs	r3, #64	; 0x40
 800c6de:	eba0 000a 	sub.w	r0, r0, sl
 800c6e2:	fa03 f000 	lsl.w	r0, r3, r0
 800c6e6:	9b04      	ldr	r3, [sp, #16]
 800c6e8:	4303      	orrs	r3, r0
 800c6ea:	3401      	adds	r4, #1
 800c6ec:	9304      	str	r3, [sp, #16]
 800c6ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c6f2:	4826      	ldr	r0, [pc, #152]	; (800c78c <_svfiprintf_r+0x1f0>)
 800c6f4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c6f8:	2206      	movs	r2, #6
 800c6fa:	f7f3 fd49 	bl	8000190 <memchr>
 800c6fe:	2800      	cmp	r0, #0
 800c700:	d038      	beq.n	800c774 <_svfiprintf_r+0x1d8>
 800c702:	4b23      	ldr	r3, [pc, #140]	; (800c790 <_svfiprintf_r+0x1f4>)
 800c704:	bb1b      	cbnz	r3, 800c74e <_svfiprintf_r+0x1b2>
 800c706:	9b03      	ldr	r3, [sp, #12]
 800c708:	3307      	adds	r3, #7
 800c70a:	f023 0307 	bic.w	r3, r3, #7
 800c70e:	3308      	adds	r3, #8
 800c710:	9303      	str	r3, [sp, #12]
 800c712:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c714:	4433      	add	r3, r6
 800c716:	9309      	str	r3, [sp, #36]	; 0x24
 800c718:	e767      	b.n	800c5ea <_svfiprintf_r+0x4e>
 800c71a:	fb0c 3202 	mla	r2, ip, r2, r3
 800c71e:	460c      	mov	r4, r1
 800c720:	2001      	movs	r0, #1
 800c722:	e7a5      	b.n	800c670 <_svfiprintf_r+0xd4>
 800c724:	2300      	movs	r3, #0
 800c726:	3401      	adds	r4, #1
 800c728:	9305      	str	r3, [sp, #20]
 800c72a:	4619      	mov	r1, r3
 800c72c:	f04f 0c0a 	mov.w	ip, #10
 800c730:	4620      	mov	r0, r4
 800c732:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c736:	3a30      	subs	r2, #48	; 0x30
 800c738:	2a09      	cmp	r2, #9
 800c73a:	d903      	bls.n	800c744 <_svfiprintf_r+0x1a8>
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d0c5      	beq.n	800c6cc <_svfiprintf_r+0x130>
 800c740:	9105      	str	r1, [sp, #20]
 800c742:	e7c3      	b.n	800c6cc <_svfiprintf_r+0x130>
 800c744:	fb0c 2101 	mla	r1, ip, r1, r2
 800c748:	4604      	mov	r4, r0
 800c74a:	2301      	movs	r3, #1
 800c74c:	e7f0      	b.n	800c730 <_svfiprintf_r+0x194>
 800c74e:	ab03      	add	r3, sp, #12
 800c750:	9300      	str	r3, [sp, #0]
 800c752:	462a      	mov	r2, r5
 800c754:	4b0f      	ldr	r3, [pc, #60]	; (800c794 <_svfiprintf_r+0x1f8>)
 800c756:	a904      	add	r1, sp, #16
 800c758:	4638      	mov	r0, r7
 800c75a:	f3af 8000 	nop.w
 800c75e:	1c42      	adds	r2, r0, #1
 800c760:	4606      	mov	r6, r0
 800c762:	d1d6      	bne.n	800c712 <_svfiprintf_r+0x176>
 800c764:	89ab      	ldrh	r3, [r5, #12]
 800c766:	065b      	lsls	r3, r3, #25
 800c768:	f53f af2c 	bmi.w	800c5c4 <_svfiprintf_r+0x28>
 800c76c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c76e:	b01d      	add	sp, #116	; 0x74
 800c770:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c774:	ab03      	add	r3, sp, #12
 800c776:	9300      	str	r3, [sp, #0]
 800c778:	462a      	mov	r2, r5
 800c77a:	4b06      	ldr	r3, [pc, #24]	; (800c794 <_svfiprintf_r+0x1f8>)
 800c77c:	a904      	add	r1, sp, #16
 800c77e:	4638      	mov	r0, r7
 800c780:	f000 f9d4 	bl	800cb2c <_printf_i>
 800c784:	e7eb      	b.n	800c75e <_svfiprintf_r+0x1c2>
 800c786:	bf00      	nop
 800c788:	0800d874 	.word	0x0800d874
 800c78c:	0800d87e 	.word	0x0800d87e
 800c790:	00000000 	.word	0x00000000
 800c794:	0800c4e5 	.word	0x0800c4e5
 800c798:	0800d87a 	.word	0x0800d87a

0800c79c <__sfputc_r>:
 800c79c:	6893      	ldr	r3, [r2, #8]
 800c79e:	3b01      	subs	r3, #1
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	b410      	push	{r4}
 800c7a4:	6093      	str	r3, [r2, #8]
 800c7a6:	da08      	bge.n	800c7ba <__sfputc_r+0x1e>
 800c7a8:	6994      	ldr	r4, [r2, #24]
 800c7aa:	42a3      	cmp	r3, r4
 800c7ac:	db01      	blt.n	800c7b2 <__sfputc_r+0x16>
 800c7ae:	290a      	cmp	r1, #10
 800c7b0:	d103      	bne.n	800c7ba <__sfputc_r+0x1e>
 800c7b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c7b6:	f000 bb33 	b.w	800ce20 <__swbuf_r>
 800c7ba:	6813      	ldr	r3, [r2, #0]
 800c7bc:	1c58      	adds	r0, r3, #1
 800c7be:	6010      	str	r0, [r2, #0]
 800c7c0:	7019      	strb	r1, [r3, #0]
 800c7c2:	4608      	mov	r0, r1
 800c7c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c7c8:	4770      	bx	lr

0800c7ca <__sfputs_r>:
 800c7ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7cc:	4606      	mov	r6, r0
 800c7ce:	460f      	mov	r7, r1
 800c7d0:	4614      	mov	r4, r2
 800c7d2:	18d5      	adds	r5, r2, r3
 800c7d4:	42ac      	cmp	r4, r5
 800c7d6:	d101      	bne.n	800c7dc <__sfputs_r+0x12>
 800c7d8:	2000      	movs	r0, #0
 800c7da:	e007      	b.n	800c7ec <__sfputs_r+0x22>
 800c7dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c7e0:	463a      	mov	r2, r7
 800c7e2:	4630      	mov	r0, r6
 800c7e4:	f7ff ffda 	bl	800c79c <__sfputc_r>
 800c7e8:	1c43      	adds	r3, r0, #1
 800c7ea:	d1f3      	bne.n	800c7d4 <__sfputs_r+0xa>
 800c7ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c7f0 <_vfiprintf_r>:
 800c7f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7f4:	460d      	mov	r5, r1
 800c7f6:	b09d      	sub	sp, #116	; 0x74
 800c7f8:	4614      	mov	r4, r2
 800c7fa:	4698      	mov	r8, r3
 800c7fc:	4606      	mov	r6, r0
 800c7fe:	b118      	cbz	r0, 800c808 <_vfiprintf_r+0x18>
 800c800:	6983      	ldr	r3, [r0, #24]
 800c802:	b90b      	cbnz	r3, 800c808 <_vfiprintf_r+0x18>
 800c804:	f7ff fd3a 	bl	800c27c <__sinit>
 800c808:	4b89      	ldr	r3, [pc, #548]	; (800ca30 <_vfiprintf_r+0x240>)
 800c80a:	429d      	cmp	r5, r3
 800c80c:	d11b      	bne.n	800c846 <_vfiprintf_r+0x56>
 800c80e:	6875      	ldr	r5, [r6, #4]
 800c810:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c812:	07d9      	lsls	r1, r3, #31
 800c814:	d405      	bmi.n	800c822 <_vfiprintf_r+0x32>
 800c816:	89ab      	ldrh	r3, [r5, #12]
 800c818:	059a      	lsls	r2, r3, #22
 800c81a:	d402      	bmi.n	800c822 <_vfiprintf_r+0x32>
 800c81c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c81e:	f7ff fdcb 	bl	800c3b8 <__retarget_lock_acquire_recursive>
 800c822:	89ab      	ldrh	r3, [r5, #12]
 800c824:	071b      	lsls	r3, r3, #28
 800c826:	d501      	bpl.n	800c82c <_vfiprintf_r+0x3c>
 800c828:	692b      	ldr	r3, [r5, #16]
 800c82a:	b9eb      	cbnz	r3, 800c868 <_vfiprintf_r+0x78>
 800c82c:	4629      	mov	r1, r5
 800c82e:	4630      	mov	r0, r6
 800c830:	f000 fb5a 	bl	800cee8 <__swsetup_r>
 800c834:	b1c0      	cbz	r0, 800c868 <_vfiprintf_r+0x78>
 800c836:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c838:	07dc      	lsls	r4, r3, #31
 800c83a:	d50e      	bpl.n	800c85a <_vfiprintf_r+0x6a>
 800c83c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c840:	b01d      	add	sp, #116	; 0x74
 800c842:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c846:	4b7b      	ldr	r3, [pc, #492]	; (800ca34 <_vfiprintf_r+0x244>)
 800c848:	429d      	cmp	r5, r3
 800c84a:	d101      	bne.n	800c850 <_vfiprintf_r+0x60>
 800c84c:	68b5      	ldr	r5, [r6, #8]
 800c84e:	e7df      	b.n	800c810 <_vfiprintf_r+0x20>
 800c850:	4b79      	ldr	r3, [pc, #484]	; (800ca38 <_vfiprintf_r+0x248>)
 800c852:	429d      	cmp	r5, r3
 800c854:	bf08      	it	eq
 800c856:	68f5      	ldreq	r5, [r6, #12]
 800c858:	e7da      	b.n	800c810 <_vfiprintf_r+0x20>
 800c85a:	89ab      	ldrh	r3, [r5, #12]
 800c85c:	0598      	lsls	r0, r3, #22
 800c85e:	d4ed      	bmi.n	800c83c <_vfiprintf_r+0x4c>
 800c860:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c862:	f7ff fdaa 	bl	800c3ba <__retarget_lock_release_recursive>
 800c866:	e7e9      	b.n	800c83c <_vfiprintf_r+0x4c>
 800c868:	2300      	movs	r3, #0
 800c86a:	9309      	str	r3, [sp, #36]	; 0x24
 800c86c:	2320      	movs	r3, #32
 800c86e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c872:	f8cd 800c 	str.w	r8, [sp, #12]
 800c876:	2330      	movs	r3, #48	; 0x30
 800c878:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ca3c <_vfiprintf_r+0x24c>
 800c87c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c880:	f04f 0901 	mov.w	r9, #1
 800c884:	4623      	mov	r3, r4
 800c886:	469a      	mov	sl, r3
 800c888:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c88c:	b10a      	cbz	r2, 800c892 <_vfiprintf_r+0xa2>
 800c88e:	2a25      	cmp	r2, #37	; 0x25
 800c890:	d1f9      	bne.n	800c886 <_vfiprintf_r+0x96>
 800c892:	ebba 0b04 	subs.w	fp, sl, r4
 800c896:	d00b      	beq.n	800c8b0 <_vfiprintf_r+0xc0>
 800c898:	465b      	mov	r3, fp
 800c89a:	4622      	mov	r2, r4
 800c89c:	4629      	mov	r1, r5
 800c89e:	4630      	mov	r0, r6
 800c8a0:	f7ff ff93 	bl	800c7ca <__sfputs_r>
 800c8a4:	3001      	adds	r0, #1
 800c8a6:	f000 80aa 	beq.w	800c9fe <_vfiprintf_r+0x20e>
 800c8aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c8ac:	445a      	add	r2, fp
 800c8ae:	9209      	str	r2, [sp, #36]	; 0x24
 800c8b0:	f89a 3000 	ldrb.w	r3, [sl]
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	f000 80a2 	beq.w	800c9fe <_vfiprintf_r+0x20e>
 800c8ba:	2300      	movs	r3, #0
 800c8bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c8c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c8c4:	f10a 0a01 	add.w	sl, sl, #1
 800c8c8:	9304      	str	r3, [sp, #16]
 800c8ca:	9307      	str	r3, [sp, #28]
 800c8cc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c8d0:	931a      	str	r3, [sp, #104]	; 0x68
 800c8d2:	4654      	mov	r4, sl
 800c8d4:	2205      	movs	r2, #5
 800c8d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c8da:	4858      	ldr	r0, [pc, #352]	; (800ca3c <_vfiprintf_r+0x24c>)
 800c8dc:	f7f3 fc58 	bl	8000190 <memchr>
 800c8e0:	9a04      	ldr	r2, [sp, #16]
 800c8e2:	b9d8      	cbnz	r0, 800c91c <_vfiprintf_r+0x12c>
 800c8e4:	06d1      	lsls	r1, r2, #27
 800c8e6:	bf44      	itt	mi
 800c8e8:	2320      	movmi	r3, #32
 800c8ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c8ee:	0713      	lsls	r3, r2, #28
 800c8f0:	bf44      	itt	mi
 800c8f2:	232b      	movmi	r3, #43	; 0x2b
 800c8f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c8f8:	f89a 3000 	ldrb.w	r3, [sl]
 800c8fc:	2b2a      	cmp	r3, #42	; 0x2a
 800c8fe:	d015      	beq.n	800c92c <_vfiprintf_r+0x13c>
 800c900:	9a07      	ldr	r2, [sp, #28]
 800c902:	4654      	mov	r4, sl
 800c904:	2000      	movs	r0, #0
 800c906:	f04f 0c0a 	mov.w	ip, #10
 800c90a:	4621      	mov	r1, r4
 800c90c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c910:	3b30      	subs	r3, #48	; 0x30
 800c912:	2b09      	cmp	r3, #9
 800c914:	d94e      	bls.n	800c9b4 <_vfiprintf_r+0x1c4>
 800c916:	b1b0      	cbz	r0, 800c946 <_vfiprintf_r+0x156>
 800c918:	9207      	str	r2, [sp, #28]
 800c91a:	e014      	b.n	800c946 <_vfiprintf_r+0x156>
 800c91c:	eba0 0308 	sub.w	r3, r0, r8
 800c920:	fa09 f303 	lsl.w	r3, r9, r3
 800c924:	4313      	orrs	r3, r2
 800c926:	9304      	str	r3, [sp, #16]
 800c928:	46a2      	mov	sl, r4
 800c92a:	e7d2      	b.n	800c8d2 <_vfiprintf_r+0xe2>
 800c92c:	9b03      	ldr	r3, [sp, #12]
 800c92e:	1d19      	adds	r1, r3, #4
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	9103      	str	r1, [sp, #12]
 800c934:	2b00      	cmp	r3, #0
 800c936:	bfbb      	ittet	lt
 800c938:	425b      	neglt	r3, r3
 800c93a:	f042 0202 	orrlt.w	r2, r2, #2
 800c93e:	9307      	strge	r3, [sp, #28]
 800c940:	9307      	strlt	r3, [sp, #28]
 800c942:	bfb8      	it	lt
 800c944:	9204      	strlt	r2, [sp, #16]
 800c946:	7823      	ldrb	r3, [r4, #0]
 800c948:	2b2e      	cmp	r3, #46	; 0x2e
 800c94a:	d10c      	bne.n	800c966 <_vfiprintf_r+0x176>
 800c94c:	7863      	ldrb	r3, [r4, #1]
 800c94e:	2b2a      	cmp	r3, #42	; 0x2a
 800c950:	d135      	bne.n	800c9be <_vfiprintf_r+0x1ce>
 800c952:	9b03      	ldr	r3, [sp, #12]
 800c954:	1d1a      	adds	r2, r3, #4
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	9203      	str	r2, [sp, #12]
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	bfb8      	it	lt
 800c95e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c962:	3402      	adds	r4, #2
 800c964:	9305      	str	r3, [sp, #20]
 800c966:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ca4c <_vfiprintf_r+0x25c>
 800c96a:	7821      	ldrb	r1, [r4, #0]
 800c96c:	2203      	movs	r2, #3
 800c96e:	4650      	mov	r0, sl
 800c970:	f7f3 fc0e 	bl	8000190 <memchr>
 800c974:	b140      	cbz	r0, 800c988 <_vfiprintf_r+0x198>
 800c976:	2340      	movs	r3, #64	; 0x40
 800c978:	eba0 000a 	sub.w	r0, r0, sl
 800c97c:	fa03 f000 	lsl.w	r0, r3, r0
 800c980:	9b04      	ldr	r3, [sp, #16]
 800c982:	4303      	orrs	r3, r0
 800c984:	3401      	adds	r4, #1
 800c986:	9304      	str	r3, [sp, #16]
 800c988:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c98c:	482c      	ldr	r0, [pc, #176]	; (800ca40 <_vfiprintf_r+0x250>)
 800c98e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c992:	2206      	movs	r2, #6
 800c994:	f7f3 fbfc 	bl	8000190 <memchr>
 800c998:	2800      	cmp	r0, #0
 800c99a:	d03f      	beq.n	800ca1c <_vfiprintf_r+0x22c>
 800c99c:	4b29      	ldr	r3, [pc, #164]	; (800ca44 <_vfiprintf_r+0x254>)
 800c99e:	bb1b      	cbnz	r3, 800c9e8 <_vfiprintf_r+0x1f8>
 800c9a0:	9b03      	ldr	r3, [sp, #12]
 800c9a2:	3307      	adds	r3, #7
 800c9a4:	f023 0307 	bic.w	r3, r3, #7
 800c9a8:	3308      	adds	r3, #8
 800c9aa:	9303      	str	r3, [sp, #12]
 800c9ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c9ae:	443b      	add	r3, r7
 800c9b0:	9309      	str	r3, [sp, #36]	; 0x24
 800c9b2:	e767      	b.n	800c884 <_vfiprintf_r+0x94>
 800c9b4:	fb0c 3202 	mla	r2, ip, r2, r3
 800c9b8:	460c      	mov	r4, r1
 800c9ba:	2001      	movs	r0, #1
 800c9bc:	e7a5      	b.n	800c90a <_vfiprintf_r+0x11a>
 800c9be:	2300      	movs	r3, #0
 800c9c0:	3401      	adds	r4, #1
 800c9c2:	9305      	str	r3, [sp, #20]
 800c9c4:	4619      	mov	r1, r3
 800c9c6:	f04f 0c0a 	mov.w	ip, #10
 800c9ca:	4620      	mov	r0, r4
 800c9cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c9d0:	3a30      	subs	r2, #48	; 0x30
 800c9d2:	2a09      	cmp	r2, #9
 800c9d4:	d903      	bls.n	800c9de <_vfiprintf_r+0x1ee>
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d0c5      	beq.n	800c966 <_vfiprintf_r+0x176>
 800c9da:	9105      	str	r1, [sp, #20]
 800c9dc:	e7c3      	b.n	800c966 <_vfiprintf_r+0x176>
 800c9de:	fb0c 2101 	mla	r1, ip, r1, r2
 800c9e2:	4604      	mov	r4, r0
 800c9e4:	2301      	movs	r3, #1
 800c9e6:	e7f0      	b.n	800c9ca <_vfiprintf_r+0x1da>
 800c9e8:	ab03      	add	r3, sp, #12
 800c9ea:	9300      	str	r3, [sp, #0]
 800c9ec:	462a      	mov	r2, r5
 800c9ee:	4b16      	ldr	r3, [pc, #88]	; (800ca48 <_vfiprintf_r+0x258>)
 800c9f0:	a904      	add	r1, sp, #16
 800c9f2:	4630      	mov	r0, r6
 800c9f4:	f3af 8000 	nop.w
 800c9f8:	4607      	mov	r7, r0
 800c9fa:	1c78      	adds	r0, r7, #1
 800c9fc:	d1d6      	bne.n	800c9ac <_vfiprintf_r+0x1bc>
 800c9fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ca00:	07d9      	lsls	r1, r3, #31
 800ca02:	d405      	bmi.n	800ca10 <_vfiprintf_r+0x220>
 800ca04:	89ab      	ldrh	r3, [r5, #12]
 800ca06:	059a      	lsls	r2, r3, #22
 800ca08:	d402      	bmi.n	800ca10 <_vfiprintf_r+0x220>
 800ca0a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ca0c:	f7ff fcd5 	bl	800c3ba <__retarget_lock_release_recursive>
 800ca10:	89ab      	ldrh	r3, [r5, #12]
 800ca12:	065b      	lsls	r3, r3, #25
 800ca14:	f53f af12 	bmi.w	800c83c <_vfiprintf_r+0x4c>
 800ca18:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ca1a:	e711      	b.n	800c840 <_vfiprintf_r+0x50>
 800ca1c:	ab03      	add	r3, sp, #12
 800ca1e:	9300      	str	r3, [sp, #0]
 800ca20:	462a      	mov	r2, r5
 800ca22:	4b09      	ldr	r3, [pc, #36]	; (800ca48 <_vfiprintf_r+0x258>)
 800ca24:	a904      	add	r1, sp, #16
 800ca26:	4630      	mov	r0, r6
 800ca28:	f000 f880 	bl	800cb2c <_printf_i>
 800ca2c:	e7e4      	b.n	800c9f8 <_vfiprintf_r+0x208>
 800ca2e:	bf00      	nop
 800ca30:	0800d834 	.word	0x0800d834
 800ca34:	0800d854 	.word	0x0800d854
 800ca38:	0800d814 	.word	0x0800d814
 800ca3c:	0800d874 	.word	0x0800d874
 800ca40:	0800d87e 	.word	0x0800d87e
 800ca44:	00000000 	.word	0x00000000
 800ca48:	0800c7cb 	.word	0x0800c7cb
 800ca4c:	0800d87a 	.word	0x0800d87a

0800ca50 <_printf_common>:
 800ca50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ca54:	4616      	mov	r6, r2
 800ca56:	4699      	mov	r9, r3
 800ca58:	688a      	ldr	r2, [r1, #8]
 800ca5a:	690b      	ldr	r3, [r1, #16]
 800ca5c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ca60:	4293      	cmp	r3, r2
 800ca62:	bfb8      	it	lt
 800ca64:	4613      	movlt	r3, r2
 800ca66:	6033      	str	r3, [r6, #0]
 800ca68:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ca6c:	4607      	mov	r7, r0
 800ca6e:	460c      	mov	r4, r1
 800ca70:	b10a      	cbz	r2, 800ca76 <_printf_common+0x26>
 800ca72:	3301      	adds	r3, #1
 800ca74:	6033      	str	r3, [r6, #0]
 800ca76:	6823      	ldr	r3, [r4, #0]
 800ca78:	0699      	lsls	r1, r3, #26
 800ca7a:	bf42      	ittt	mi
 800ca7c:	6833      	ldrmi	r3, [r6, #0]
 800ca7e:	3302      	addmi	r3, #2
 800ca80:	6033      	strmi	r3, [r6, #0]
 800ca82:	6825      	ldr	r5, [r4, #0]
 800ca84:	f015 0506 	ands.w	r5, r5, #6
 800ca88:	d106      	bne.n	800ca98 <_printf_common+0x48>
 800ca8a:	f104 0a19 	add.w	sl, r4, #25
 800ca8e:	68e3      	ldr	r3, [r4, #12]
 800ca90:	6832      	ldr	r2, [r6, #0]
 800ca92:	1a9b      	subs	r3, r3, r2
 800ca94:	42ab      	cmp	r3, r5
 800ca96:	dc26      	bgt.n	800cae6 <_printf_common+0x96>
 800ca98:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ca9c:	1e13      	subs	r3, r2, #0
 800ca9e:	6822      	ldr	r2, [r4, #0]
 800caa0:	bf18      	it	ne
 800caa2:	2301      	movne	r3, #1
 800caa4:	0692      	lsls	r2, r2, #26
 800caa6:	d42b      	bmi.n	800cb00 <_printf_common+0xb0>
 800caa8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800caac:	4649      	mov	r1, r9
 800caae:	4638      	mov	r0, r7
 800cab0:	47c0      	blx	r8
 800cab2:	3001      	adds	r0, #1
 800cab4:	d01e      	beq.n	800caf4 <_printf_common+0xa4>
 800cab6:	6823      	ldr	r3, [r4, #0]
 800cab8:	68e5      	ldr	r5, [r4, #12]
 800caba:	6832      	ldr	r2, [r6, #0]
 800cabc:	f003 0306 	and.w	r3, r3, #6
 800cac0:	2b04      	cmp	r3, #4
 800cac2:	bf08      	it	eq
 800cac4:	1aad      	subeq	r5, r5, r2
 800cac6:	68a3      	ldr	r3, [r4, #8]
 800cac8:	6922      	ldr	r2, [r4, #16]
 800caca:	bf0c      	ite	eq
 800cacc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cad0:	2500      	movne	r5, #0
 800cad2:	4293      	cmp	r3, r2
 800cad4:	bfc4      	itt	gt
 800cad6:	1a9b      	subgt	r3, r3, r2
 800cad8:	18ed      	addgt	r5, r5, r3
 800cada:	2600      	movs	r6, #0
 800cadc:	341a      	adds	r4, #26
 800cade:	42b5      	cmp	r5, r6
 800cae0:	d11a      	bne.n	800cb18 <_printf_common+0xc8>
 800cae2:	2000      	movs	r0, #0
 800cae4:	e008      	b.n	800caf8 <_printf_common+0xa8>
 800cae6:	2301      	movs	r3, #1
 800cae8:	4652      	mov	r2, sl
 800caea:	4649      	mov	r1, r9
 800caec:	4638      	mov	r0, r7
 800caee:	47c0      	blx	r8
 800caf0:	3001      	adds	r0, #1
 800caf2:	d103      	bne.n	800cafc <_printf_common+0xac>
 800caf4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800caf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cafc:	3501      	adds	r5, #1
 800cafe:	e7c6      	b.n	800ca8e <_printf_common+0x3e>
 800cb00:	18e1      	adds	r1, r4, r3
 800cb02:	1c5a      	adds	r2, r3, #1
 800cb04:	2030      	movs	r0, #48	; 0x30
 800cb06:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cb0a:	4422      	add	r2, r4
 800cb0c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cb10:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cb14:	3302      	adds	r3, #2
 800cb16:	e7c7      	b.n	800caa8 <_printf_common+0x58>
 800cb18:	2301      	movs	r3, #1
 800cb1a:	4622      	mov	r2, r4
 800cb1c:	4649      	mov	r1, r9
 800cb1e:	4638      	mov	r0, r7
 800cb20:	47c0      	blx	r8
 800cb22:	3001      	adds	r0, #1
 800cb24:	d0e6      	beq.n	800caf4 <_printf_common+0xa4>
 800cb26:	3601      	adds	r6, #1
 800cb28:	e7d9      	b.n	800cade <_printf_common+0x8e>
	...

0800cb2c <_printf_i>:
 800cb2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cb30:	7e0f      	ldrb	r7, [r1, #24]
 800cb32:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800cb34:	2f78      	cmp	r7, #120	; 0x78
 800cb36:	4691      	mov	r9, r2
 800cb38:	4680      	mov	r8, r0
 800cb3a:	460c      	mov	r4, r1
 800cb3c:	469a      	mov	sl, r3
 800cb3e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800cb42:	d807      	bhi.n	800cb54 <_printf_i+0x28>
 800cb44:	2f62      	cmp	r7, #98	; 0x62
 800cb46:	d80a      	bhi.n	800cb5e <_printf_i+0x32>
 800cb48:	2f00      	cmp	r7, #0
 800cb4a:	f000 80d8 	beq.w	800ccfe <_printf_i+0x1d2>
 800cb4e:	2f58      	cmp	r7, #88	; 0x58
 800cb50:	f000 80a3 	beq.w	800cc9a <_printf_i+0x16e>
 800cb54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cb58:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800cb5c:	e03a      	b.n	800cbd4 <_printf_i+0xa8>
 800cb5e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800cb62:	2b15      	cmp	r3, #21
 800cb64:	d8f6      	bhi.n	800cb54 <_printf_i+0x28>
 800cb66:	a101      	add	r1, pc, #4	; (adr r1, 800cb6c <_printf_i+0x40>)
 800cb68:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cb6c:	0800cbc5 	.word	0x0800cbc5
 800cb70:	0800cbd9 	.word	0x0800cbd9
 800cb74:	0800cb55 	.word	0x0800cb55
 800cb78:	0800cb55 	.word	0x0800cb55
 800cb7c:	0800cb55 	.word	0x0800cb55
 800cb80:	0800cb55 	.word	0x0800cb55
 800cb84:	0800cbd9 	.word	0x0800cbd9
 800cb88:	0800cb55 	.word	0x0800cb55
 800cb8c:	0800cb55 	.word	0x0800cb55
 800cb90:	0800cb55 	.word	0x0800cb55
 800cb94:	0800cb55 	.word	0x0800cb55
 800cb98:	0800cce5 	.word	0x0800cce5
 800cb9c:	0800cc09 	.word	0x0800cc09
 800cba0:	0800ccc7 	.word	0x0800ccc7
 800cba4:	0800cb55 	.word	0x0800cb55
 800cba8:	0800cb55 	.word	0x0800cb55
 800cbac:	0800cd07 	.word	0x0800cd07
 800cbb0:	0800cb55 	.word	0x0800cb55
 800cbb4:	0800cc09 	.word	0x0800cc09
 800cbb8:	0800cb55 	.word	0x0800cb55
 800cbbc:	0800cb55 	.word	0x0800cb55
 800cbc0:	0800cccf 	.word	0x0800cccf
 800cbc4:	682b      	ldr	r3, [r5, #0]
 800cbc6:	1d1a      	adds	r2, r3, #4
 800cbc8:	681b      	ldr	r3, [r3, #0]
 800cbca:	602a      	str	r2, [r5, #0]
 800cbcc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cbd0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cbd4:	2301      	movs	r3, #1
 800cbd6:	e0a3      	b.n	800cd20 <_printf_i+0x1f4>
 800cbd8:	6820      	ldr	r0, [r4, #0]
 800cbda:	6829      	ldr	r1, [r5, #0]
 800cbdc:	0606      	lsls	r6, r0, #24
 800cbde:	f101 0304 	add.w	r3, r1, #4
 800cbe2:	d50a      	bpl.n	800cbfa <_printf_i+0xce>
 800cbe4:	680e      	ldr	r6, [r1, #0]
 800cbe6:	602b      	str	r3, [r5, #0]
 800cbe8:	2e00      	cmp	r6, #0
 800cbea:	da03      	bge.n	800cbf4 <_printf_i+0xc8>
 800cbec:	232d      	movs	r3, #45	; 0x2d
 800cbee:	4276      	negs	r6, r6
 800cbf0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cbf4:	485e      	ldr	r0, [pc, #376]	; (800cd70 <_printf_i+0x244>)
 800cbf6:	230a      	movs	r3, #10
 800cbf8:	e019      	b.n	800cc2e <_printf_i+0x102>
 800cbfa:	680e      	ldr	r6, [r1, #0]
 800cbfc:	602b      	str	r3, [r5, #0]
 800cbfe:	f010 0f40 	tst.w	r0, #64	; 0x40
 800cc02:	bf18      	it	ne
 800cc04:	b236      	sxthne	r6, r6
 800cc06:	e7ef      	b.n	800cbe8 <_printf_i+0xbc>
 800cc08:	682b      	ldr	r3, [r5, #0]
 800cc0a:	6820      	ldr	r0, [r4, #0]
 800cc0c:	1d19      	adds	r1, r3, #4
 800cc0e:	6029      	str	r1, [r5, #0]
 800cc10:	0601      	lsls	r1, r0, #24
 800cc12:	d501      	bpl.n	800cc18 <_printf_i+0xec>
 800cc14:	681e      	ldr	r6, [r3, #0]
 800cc16:	e002      	b.n	800cc1e <_printf_i+0xf2>
 800cc18:	0646      	lsls	r6, r0, #25
 800cc1a:	d5fb      	bpl.n	800cc14 <_printf_i+0xe8>
 800cc1c:	881e      	ldrh	r6, [r3, #0]
 800cc1e:	4854      	ldr	r0, [pc, #336]	; (800cd70 <_printf_i+0x244>)
 800cc20:	2f6f      	cmp	r7, #111	; 0x6f
 800cc22:	bf0c      	ite	eq
 800cc24:	2308      	moveq	r3, #8
 800cc26:	230a      	movne	r3, #10
 800cc28:	2100      	movs	r1, #0
 800cc2a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cc2e:	6865      	ldr	r5, [r4, #4]
 800cc30:	60a5      	str	r5, [r4, #8]
 800cc32:	2d00      	cmp	r5, #0
 800cc34:	bfa2      	ittt	ge
 800cc36:	6821      	ldrge	r1, [r4, #0]
 800cc38:	f021 0104 	bicge.w	r1, r1, #4
 800cc3c:	6021      	strge	r1, [r4, #0]
 800cc3e:	b90e      	cbnz	r6, 800cc44 <_printf_i+0x118>
 800cc40:	2d00      	cmp	r5, #0
 800cc42:	d04d      	beq.n	800cce0 <_printf_i+0x1b4>
 800cc44:	4615      	mov	r5, r2
 800cc46:	fbb6 f1f3 	udiv	r1, r6, r3
 800cc4a:	fb03 6711 	mls	r7, r3, r1, r6
 800cc4e:	5dc7      	ldrb	r7, [r0, r7]
 800cc50:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800cc54:	4637      	mov	r7, r6
 800cc56:	42bb      	cmp	r3, r7
 800cc58:	460e      	mov	r6, r1
 800cc5a:	d9f4      	bls.n	800cc46 <_printf_i+0x11a>
 800cc5c:	2b08      	cmp	r3, #8
 800cc5e:	d10b      	bne.n	800cc78 <_printf_i+0x14c>
 800cc60:	6823      	ldr	r3, [r4, #0]
 800cc62:	07de      	lsls	r6, r3, #31
 800cc64:	d508      	bpl.n	800cc78 <_printf_i+0x14c>
 800cc66:	6923      	ldr	r3, [r4, #16]
 800cc68:	6861      	ldr	r1, [r4, #4]
 800cc6a:	4299      	cmp	r1, r3
 800cc6c:	bfde      	ittt	le
 800cc6e:	2330      	movle	r3, #48	; 0x30
 800cc70:	f805 3c01 	strble.w	r3, [r5, #-1]
 800cc74:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800cc78:	1b52      	subs	r2, r2, r5
 800cc7a:	6122      	str	r2, [r4, #16]
 800cc7c:	f8cd a000 	str.w	sl, [sp]
 800cc80:	464b      	mov	r3, r9
 800cc82:	aa03      	add	r2, sp, #12
 800cc84:	4621      	mov	r1, r4
 800cc86:	4640      	mov	r0, r8
 800cc88:	f7ff fee2 	bl	800ca50 <_printf_common>
 800cc8c:	3001      	adds	r0, #1
 800cc8e:	d14c      	bne.n	800cd2a <_printf_i+0x1fe>
 800cc90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cc94:	b004      	add	sp, #16
 800cc96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc9a:	4835      	ldr	r0, [pc, #212]	; (800cd70 <_printf_i+0x244>)
 800cc9c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800cca0:	6829      	ldr	r1, [r5, #0]
 800cca2:	6823      	ldr	r3, [r4, #0]
 800cca4:	f851 6b04 	ldr.w	r6, [r1], #4
 800cca8:	6029      	str	r1, [r5, #0]
 800ccaa:	061d      	lsls	r5, r3, #24
 800ccac:	d514      	bpl.n	800ccd8 <_printf_i+0x1ac>
 800ccae:	07df      	lsls	r7, r3, #31
 800ccb0:	bf44      	itt	mi
 800ccb2:	f043 0320 	orrmi.w	r3, r3, #32
 800ccb6:	6023      	strmi	r3, [r4, #0]
 800ccb8:	b91e      	cbnz	r6, 800ccc2 <_printf_i+0x196>
 800ccba:	6823      	ldr	r3, [r4, #0]
 800ccbc:	f023 0320 	bic.w	r3, r3, #32
 800ccc0:	6023      	str	r3, [r4, #0]
 800ccc2:	2310      	movs	r3, #16
 800ccc4:	e7b0      	b.n	800cc28 <_printf_i+0xfc>
 800ccc6:	6823      	ldr	r3, [r4, #0]
 800ccc8:	f043 0320 	orr.w	r3, r3, #32
 800cccc:	6023      	str	r3, [r4, #0]
 800ccce:	2378      	movs	r3, #120	; 0x78
 800ccd0:	4828      	ldr	r0, [pc, #160]	; (800cd74 <_printf_i+0x248>)
 800ccd2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ccd6:	e7e3      	b.n	800cca0 <_printf_i+0x174>
 800ccd8:	0659      	lsls	r1, r3, #25
 800ccda:	bf48      	it	mi
 800ccdc:	b2b6      	uxthmi	r6, r6
 800ccde:	e7e6      	b.n	800ccae <_printf_i+0x182>
 800cce0:	4615      	mov	r5, r2
 800cce2:	e7bb      	b.n	800cc5c <_printf_i+0x130>
 800cce4:	682b      	ldr	r3, [r5, #0]
 800cce6:	6826      	ldr	r6, [r4, #0]
 800cce8:	6961      	ldr	r1, [r4, #20]
 800ccea:	1d18      	adds	r0, r3, #4
 800ccec:	6028      	str	r0, [r5, #0]
 800ccee:	0635      	lsls	r5, r6, #24
 800ccf0:	681b      	ldr	r3, [r3, #0]
 800ccf2:	d501      	bpl.n	800ccf8 <_printf_i+0x1cc>
 800ccf4:	6019      	str	r1, [r3, #0]
 800ccf6:	e002      	b.n	800ccfe <_printf_i+0x1d2>
 800ccf8:	0670      	lsls	r0, r6, #25
 800ccfa:	d5fb      	bpl.n	800ccf4 <_printf_i+0x1c8>
 800ccfc:	8019      	strh	r1, [r3, #0]
 800ccfe:	2300      	movs	r3, #0
 800cd00:	6123      	str	r3, [r4, #16]
 800cd02:	4615      	mov	r5, r2
 800cd04:	e7ba      	b.n	800cc7c <_printf_i+0x150>
 800cd06:	682b      	ldr	r3, [r5, #0]
 800cd08:	1d1a      	adds	r2, r3, #4
 800cd0a:	602a      	str	r2, [r5, #0]
 800cd0c:	681d      	ldr	r5, [r3, #0]
 800cd0e:	6862      	ldr	r2, [r4, #4]
 800cd10:	2100      	movs	r1, #0
 800cd12:	4628      	mov	r0, r5
 800cd14:	f7f3 fa3c 	bl	8000190 <memchr>
 800cd18:	b108      	cbz	r0, 800cd1e <_printf_i+0x1f2>
 800cd1a:	1b40      	subs	r0, r0, r5
 800cd1c:	6060      	str	r0, [r4, #4]
 800cd1e:	6863      	ldr	r3, [r4, #4]
 800cd20:	6123      	str	r3, [r4, #16]
 800cd22:	2300      	movs	r3, #0
 800cd24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cd28:	e7a8      	b.n	800cc7c <_printf_i+0x150>
 800cd2a:	6923      	ldr	r3, [r4, #16]
 800cd2c:	462a      	mov	r2, r5
 800cd2e:	4649      	mov	r1, r9
 800cd30:	4640      	mov	r0, r8
 800cd32:	47d0      	blx	sl
 800cd34:	3001      	adds	r0, #1
 800cd36:	d0ab      	beq.n	800cc90 <_printf_i+0x164>
 800cd38:	6823      	ldr	r3, [r4, #0]
 800cd3a:	079b      	lsls	r3, r3, #30
 800cd3c:	d413      	bmi.n	800cd66 <_printf_i+0x23a>
 800cd3e:	68e0      	ldr	r0, [r4, #12]
 800cd40:	9b03      	ldr	r3, [sp, #12]
 800cd42:	4298      	cmp	r0, r3
 800cd44:	bfb8      	it	lt
 800cd46:	4618      	movlt	r0, r3
 800cd48:	e7a4      	b.n	800cc94 <_printf_i+0x168>
 800cd4a:	2301      	movs	r3, #1
 800cd4c:	4632      	mov	r2, r6
 800cd4e:	4649      	mov	r1, r9
 800cd50:	4640      	mov	r0, r8
 800cd52:	47d0      	blx	sl
 800cd54:	3001      	adds	r0, #1
 800cd56:	d09b      	beq.n	800cc90 <_printf_i+0x164>
 800cd58:	3501      	adds	r5, #1
 800cd5a:	68e3      	ldr	r3, [r4, #12]
 800cd5c:	9903      	ldr	r1, [sp, #12]
 800cd5e:	1a5b      	subs	r3, r3, r1
 800cd60:	42ab      	cmp	r3, r5
 800cd62:	dcf2      	bgt.n	800cd4a <_printf_i+0x21e>
 800cd64:	e7eb      	b.n	800cd3e <_printf_i+0x212>
 800cd66:	2500      	movs	r5, #0
 800cd68:	f104 0619 	add.w	r6, r4, #25
 800cd6c:	e7f5      	b.n	800cd5a <_printf_i+0x22e>
 800cd6e:	bf00      	nop
 800cd70:	0800d885 	.word	0x0800d885
 800cd74:	0800d896 	.word	0x0800d896

0800cd78 <_sbrk_r>:
 800cd78:	b538      	push	{r3, r4, r5, lr}
 800cd7a:	4d06      	ldr	r5, [pc, #24]	; (800cd94 <_sbrk_r+0x1c>)
 800cd7c:	2300      	movs	r3, #0
 800cd7e:	4604      	mov	r4, r0
 800cd80:	4608      	mov	r0, r1
 800cd82:	602b      	str	r3, [r5, #0]
 800cd84:	f7f6 f800 	bl	8002d88 <_sbrk>
 800cd88:	1c43      	adds	r3, r0, #1
 800cd8a:	d102      	bne.n	800cd92 <_sbrk_r+0x1a>
 800cd8c:	682b      	ldr	r3, [r5, #0]
 800cd8e:	b103      	cbz	r3, 800cd92 <_sbrk_r+0x1a>
 800cd90:	6023      	str	r3, [r4, #0]
 800cd92:	bd38      	pop	{r3, r4, r5, pc}
 800cd94:	20000ea0 	.word	0x20000ea0

0800cd98 <__sread>:
 800cd98:	b510      	push	{r4, lr}
 800cd9a:	460c      	mov	r4, r1
 800cd9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cda0:	f000 fafc 	bl	800d39c <_read_r>
 800cda4:	2800      	cmp	r0, #0
 800cda6:	bfab      	itete	ge
 800cda8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800cdaa:	89a3      	ldrhlt	r3, [r4, #12]
 800cdac:	181b      	addge	r3, r3, r0
 800cdae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800cdb2:	bfac      	ite	ge
 800cdb4:	6563      	strge	r3, [r4, #84]	; 0x54
 800cdb6:	81a3      	strhlt	r3, [r4, #12]
 800cdb8:	bd10      	pop	{r4, pc}

0800cdba <__swrite>:
 800cdba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cdbe:	461f      	mov	r7, r3
 800cdc0:	898b      	ldrh	r3, [r1, #12]
 800cdc2:	05db      	lsls	r3, r3, #23
 800cdc4:	4605      	mov	r5, r0
 800cdc6:	460c      	mov	r4, r1
 800cdc8:	4616      	mov	r6, r2
 800cdca:	d505      	bpl.n	800cdd8 <__swrite+0x1e>
 800cdcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cdd0:	2302      	movs	r3, #2
 800cdd2:	2200      	movs	r2, #0
 800cdd4:	f000 f9c8 	bl	800d168 <_lseek_r>
 800cdd8:	89a3      	ldrh	r3, [r4, #12]
 800cdda:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cdde:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cde2:	81a3      	strh	r3, [r4, #12]
 800cde4:	4632      	mov	r2, r6
 800cde6:	463b      	mov	r3, r7
 800cde8:	4628      	mov	r0, r5
 800cdea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cdee:	f000 b869 	b.w	800cec4 <_write_r>

0800cdf2 <__sseek>:
 800cdf2:	b510      	push	{r4, lr}
 800cdf4:	460c      	mov	r4, r1
 800cdf6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cdfa:	f000 f9b5 	bl	800d168 <_lseek_r>
 800cdfe:	1c43      	adds	r3, r0, #1
 800ce00:	89a3      	ldrh	r3, [r4, #12]
 800ce02:	bf15      	itete	ne
 800ce04:	6560      	strne	r0, [r4, #84]	; 0x54
 800ce06:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ce0a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ce0e:	81a3      	strheq	r3, [r4, #12]
 800ce10:	bf18      	it	ne
 800ce12:	81a3      	strhne	r3, [r4, #12]
 800ce14:	bd10      	pop	{r4, pc}

0800ce16 <__sclose>:
 800ce16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce1a:	f000 b8d3 	b.w	800cfc4 <_close_r>
	...

0800ce20 <__swbuf_r>:
 800ce20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce22:	460e      	mov	r6, r1
 800ce24:	4614      	mov	r4, r2
 800ce26:	4605      	mov	r5, r0
 800ce28:	b118      	cbz	r0, 800ce32 <__swbuf_r+0x12>
 800ce2a:	6983      	ldr	r3, [r0, #24]
 800ce2c:	b90b      	cbnz	r3, 800ce32 <__swbuf_r+0x12>
 800ce2e:	f7ff fa25 	bl	800c27c <__sinit>
 800ce32:	4b21      	ldr	r3, [pc, #132]	; (800ceb8 <__swbuf_r+0x98>)
 800ce34:	429c      	cmp	r4, r3
 800ce36:	d12b      	bne.n	800ce90 <__swbuf_r+0x70>
 800ce38:	686c      	ldr	r4, [r5, #4]
 800ce3a:	69a3      	ldr	r3, [r4, #24]
 800ce3c:	60a3      	str	r3, [r4, #8]
 800ce3e:	89a3      	ldrh	r3, [r4, #12]
 800ce40:	071a      	lsls	r2, r3, #28
 800ce42:	d52f      	bpl.n	800cea4 <__swbuf_r+0x84>
 800ce44:	6923      	ldr	r3, [r4, #16]
 800ce46:	b36b      	cbz	r3, 800cea4 <__swbuf_r+0x84>
 800ce48:	6923      	ldr	r3, [r4, #16]
 800ce4a:	6820      	ldr	r0, [r4, #0]
 800ce4c:	1ac0      	subs	r0, r0, r3
 800ce4e:	6963      	ldr	r3, [r4, #20]
 800ce50:	b2f6      	uxtb	r6, r6
 800ce52:	4283      	cmp	r3, r0
 800ce54:	4637      	mov	r7, r6
 800ce56:	dc04      	bgt.n	800ce62 <__swbuf_r+0x42>
 800ce58:	4621      	mov	r1, r4
 800ce5a:	4628      	mov	r0, r5
 800ce5c:	f000 f948 	bl	800d0f0 <_fflush_r>
 800ce60:	bb30      	cbnz	r0, 800ceb0 <__swbuf_r+0x90>
 800ce62:	68a3      	ldr	r3, [r4, #8]
 800ce64:	3b01      	subs	r3, #1
 800ce66:	60a3      	str	r3, [r4, #8]
 800ce68:	6823      	ldr	r3, [r4, #0]
 800ce6a:	1c5a      	adds	r2, r3, #1
 800ce6c:	6022      	str	r2, [r4, #0]
 800ce6e:	701e      	strb	r6, [r3, #0]
 800ce70:	6963      	ldr	r3, [r4, #20]
 800ce72:	3001      	adds	r0, #1
 800ce74:	4283      	cmp	r3, r0
 800ce76:	d004      	beq.n	800ce82 <__swbuf_r+0x62>
 800ce78:	89a3      	ldrh	r3, [r4, #12]
 800ce7a:	07db      	lsls	r3, r3, #31
 800ce7c:	d506      	bpl.n	800ce8c <__swbuf_r+0x6c>
 800ce7e:	2e0a      	cmp	r6, #10
 800ce80:	d104      	bne.n	800ce8c <__swbuf_r+0x6c>
 800ce82:	4621      	mov	r1, r4
 800ce84:	4628      	mov	r0, r5
 800ce86:	f000 f933 	bl	800d0f0 <_fflush_r>
 800ce8a:	b988      	cbnz	r0, 800ceb0 <__swbuf_r+0x90>
 800ce8c:	4638      	mov	r0, r7
 800ce8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ce90:	4b0a      	ldr	r3, [pc, #40]	; (800cebc <__swbuf_r+0x9c>)
 800ce92:	429c      	cmp	r4, r3
 800ce94:	d101      	bne.n	800ce9a <__swbuf_r+0x7a>
 800ce96:	68ac      	ldr	r4, [r5, #8]
 800ce98:	e7cf      	b.n	800ce3a <__swbuf_r+0x1a>
 800ce9a:	4b09      	ldr	r3, [pc, #36]	; (800cec0 <__swbuf_r+0xa0>)
 800ce9c:	429c      	cmp	r4, r3
 800ce9e:	bf08      	it	eq
 800cea0:	68ec      	ldreq	r4, [r5, #12]
 800cea2:	e7ca      	b.n	800ce3a <__swbuf_r+0x1a>
 800cea4:	4621      	mov	r1, r4
 800cea6:	4628      	mov	r0, r5
 800cea8:	f000 f81e 	bl	800cee8 <__swsetup_r>
 800ceac:	2800      	cmp	r0, #0
 800ceae:	d0cb      	beq.n	800ce48 <__swbuf_r+0x28>
 800ceb0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800ceb4:	e7ea      	b.n	800ce8c <__swbuf_r+0x6c>
 800ceb6:	bf00      	nop
 800ceb8:	0800d834 	.word	0x0800d834
 800cebc:	0800d854 	.word	0x0800d854
 800cec0:	0800d814 	.word	0x0800d814

0800cec4 <_write_r>:
 800cec4:	b538      	push	{r3, r4, r5, lr}
 800cec6:	4d07      	ldr	r5, [pc, #28]	; (800cee4 <_write_r+0x20>)
 800cec8:	4604      	mov	r4, r0
 800ceca:	4608      	mov	r0, r1
 800cecc:	4611      	mov	r1, r2
 800cece:	2200      	movs	r2, #0
 800ced0:	602a      	str	r2, [r5, #0]
 800ced2:	461a      	mov	r2, r3
 800ced4:	f7f5 ff07 	bl	8002ce6 <_write>
 800ced8:	1c43      	adds	r3, r0, #1
 800ceda:	d102      	bne.n	800cee2 <_write_r+0x1e>
 800cedc:	682b      	ldr	r3, [r5, #0]
 800cede:	b103      	cbz	r3, 800cee2 <_write_r+0x1e>
 800cee0:	6023      	str	r3, [r4, #0]
 800cee2:	bd38      	pop	{r3, r4, r5, pc}
 800cee4:	20000ea0 	.word	0x20000ea0

0800cee8 <__swsetup_r>:
 800cee8:	4b32      	ldr	r3, [pc, #200]	; (800cfb4 <__swsetup_r+0xcc>)
 800ceea:	b570      	push	{r4, r5, r6, lr}
 800ceec:	681d      	ldr	r5, [r3, #0]
 800ceee:	4606      	mov	r6, r0
 800cef0:	460c      	mov	r4, r1
 800cef2:	b125      	cbz	r5, 800cefe <__swsetup_r+0x16>
 800cef4:	69ab      	ldr	r3, [r5, #24]
 800cef6:	b913      	cbnz	r3, 800cefe <__swsetup_r+0x16>
 800cef8:	4628      	mov	r0, r5
 800cefa:	f7ff f9bf 	bl	800c27c <__sinit>
 800cefe:	4b2e      	ldr	r3, [pc, #184]	; (800cfb8 <__swsetup_r+0xd0>)
 800cf00:	429c      	cmp	r4, r3
 800cf02:	d10f      	bne.n	800cf24 <__swsetup_r+0x3c>
 800cf04:	686c      	ldr	r4, [r5, #4]
 800cf06:	89a3      	ldrh	r3, [r4, #12]
 800cf08:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cf0c:	0719      	lsls	r1, r3, #28
 800cf0e:	d42c      	bmi.n	800cf6a <__swsetup_r+0x82>
 800cf10:	06dd      	lsls	r5, r3, #27
 800cf12:	d411      	bmi.n	800cf38 <__swsetup_r+0x50>
 800cf14:	2309      	movs	r3, #9
 800cf16:	6033      	str	r3, [r6, #0]
 800cf18:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800cf1c:	81a3      	strh	r3, [r4, #12]
 800cf1e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cf22:	e03e      	b.n	800cfa2 <__swsetup_r+0xba>
 800cf24:	4b25      	ldr	r3, [pc, #148]	; (800cfbc <__swsetup_r+0xd4>)
 800cf26:	429c      	cmp	r4, r3
 800cf28:	d101      	bne.n	800cf2e <__swsetup_r+0x46>
 800cf2a:	68ac      	ldr	r4, [r5, #8]
 800cf2c:	e7eb      	b.n	800cf06 <__swsetup_r+0x1e>
 800cf2e:	4b24      	ldr	r3, [pc, #144]	; (800cfc0 <__swsetup_r+0xd8>)
 800cf30:	429c      	cmp	r4, r3
 800cf32:	bf08      	it	eq
 800cf34:	68ec      	ldreq	r4, [r5, #12]
 800cf36:	e7e6      	b.n	800cf06 <__swsetup_r+0x1e>
 800cf38:	0758      	lsls	r0, r3, #29
 800cf3a:	d512      	bpl.n	800cf62 <__swsetup_r+0x7a>
 800cf3c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cf3e:	b141      	cbz	r1, 800cf52 <__swsetup_r+0x6a>
 800cf40:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cf44:	4299      	cmp	r1, r3
 800cf46:	d002      	beq.n	800cf4e <__swsetup_r+0x66>
 800cf48:	4630      	mov	r0, r6
 800cf4a:	f000 f9ab 	bl	800d2a4 <_free_r>
 800cf4e:	2300      	movs	r3, #0
 800cf50:	6363      	str	r3, [r4, #52]	; 0x34
 800cf52:	89a3      	ldrh	r3, [r4, #12]
 800cf54:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800cf58:	81a3      	strh	r3, [r4, #12]
 800cf5a:	2300      	movs	r3, #0
 800cf5c:	6063      	str	r3, [r4, #4]
 800cf5e:	6923      	ldr	r3, [r4, #16]
 800cf60:	6023      	str	r3, [r4, #0]
 800cf62:	89a3      	ldrh	r3, [r4, #12]
 800cf64:	f043 0308 	orr.w	r3, r3, #8
 800cf68:	81a3      	strh	r3, [r4, #12]
 800cf6a:	6923      	ldr	r3, [r4, #16]
 800cf6c:	b94b      	cbnz	r3, 800cf82 <__swsetup_r+0x9a>
 800cf6e:	89a3      	ldrh	r3, [r4, #12]
 800cf70:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800cf74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cf78:	d003      	beq.n	800cf82 <__swsetup_r+0x9a>
 800cf7a:	4621      	mov	r1, r4
 800cf7c:	4630      	mov	r0, r6
 800cf7e:	f000 f92b 	bl	800d1d8 <__smakebuf_r>
 800cf82:	89a0      	ldrh	r0, [r4, #12]
 800cf84:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cf88:	f010 0301 	ands.w	r3, r0, #1
 800cf8c:	d00a      	beq.n	800cfa4 <__swsetup_r+0xbc>
 800cf8e:	2300      	movs	r3, #0
 800cf90:	60a3      	str	r3, [r4, #8]
 800cf92:	6963      	ldr	r3, [r4, #20]
 800cf94:	425b      	negs	r3, r3
 800cf96:	61a3      	str	r3, [r4, #24]
 800cf98:	6923      	ldr	r3, [r4, #16]
 800cf9a:	b943      	cbnz	r3, 800cfae <__swsetup_r+0xc6>
 800cf9c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800cfa0:	d1ba      	bne.n	800cf18 <__swsetup_r+0x30>
 800cfa2:	bd70      	pop	{r4, r5, r6, pc}
 800cfa4:	0781      	lsls	r1, r0, #30
 800cfa6:	bf58      	it	pl
 800cfa8:	6963      	ldrpl	r3, [r4, #20]
 800cfaa:	60a3      	str	r3, [r4, #8]
 800cfac:	e7f4      	b.n	800cf98 <__swsetup_r+0xb0>
 800cfae:	2000      	movs	r0, #0
 800cfb0:	e7f7      	b.n	800cfa2 <__swsetup_r+0xba>
 800cfb2:	bf00      	nop
 800cfb4:	20000028 	.word	0x20000028
 800cfb8:	0800d834 	.word	0x0800d834
 800cfbc:	0800d854 	.word	0x0800d854
 800cfc0:	0800d814 	.word	0x0800d814

0800cfc4 <_close_r>:
 800cfc4:	b538      	push	{r3, r4, r5, lr}
 800cfc6:	4d06      	ldr	r5, [pc, #24]	; (800cfe0 <_close_r+0x1c>)
 800cfc8:	2300      	movs	r3, #0
 800cfca:	4604      	mov	r4, r0
 800cfcc:	4608      	mov	r0, r1
 800cfce:	602b      	str	r3, [r5, #0]
 800cfd0:	f7f5 fea5 	bl	8002d1e <_close>
 800cfd4:	1c43      	adds	r3, r0, #1
 800cfd6:	d102      	bne.n	800cfde <_close_r+0x1a>
 800cfd8:	682b      	ldr	r3, [r5, #0]
 800cfda:	b103      	cbz	r3, 800cfde <_close_r+0x1a>
 800cfdc:	6023      	str	r3, [r4, #0]
 800cfde:	bd38      	pop	{r3, r4, r5, pc}
 800cfe0:	20000ea0 	.word	0x20000ea0

0800cfe4 <__sflush_r>:
 800cfe4:	898a      	ldrh	r2, [r1, #12]
 800cfe6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cfea:	4605      	mov	r5, r0
 800cfec:	0710      	lsls	r0, r2, #28
 800cfee:	460c      	mov	r4, r1
 800cff0:	d458      	bmi.n	800d0a4 <__sflush_r+0xc0>
 800cff2:	684b      	ldr	r3, [r1, #4]
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	dc05      	bgt.n	800d004 <__sflush_r+0x20>
 800cff8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	dc02      	bgt.n	800d004 <__sflush_r+0x20>
 800cffe:	2000      	movs	r0, #0
 800d000:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d004:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d006:	2e00      	cmp	r6, #0
 800d008:	d0f9      	beq.n	800cffe <__sflush_r+0x1a>
 800d00a:	2300      	movs	r3, #0
 800d00c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d010:	682f      	ldr	r7, [r5, #0]
 800d012:	602b      	str	r3, [r5, #0]
 800d014:	d032      	beq.n	800d07c <__sflush_r+0x98>
 800d016:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d018:	89a3      	ldrh	r3, [r4, #12]
 800d01a:	075a      	lsls	r2, r3, #29
 800d01c:	d505      	bpl.n	800d02a <__sflush_r+0x46>
 800d01e:	6863      	ldr	r3, [r4, #4]
 800d020:	1ac0      	subs	r0, r0, r3
 800d022:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d024:	b10b      	cbz	r3, 800d02a <__sflush_r+0x46>
 800d026:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d028:	1ac0      	subs	r0, r0, r3
 800d02a:	2300      	movs	r3, #0
 800d02c:	4602      	mov	r2, r0
 800d02e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d030:	6a21      	ldr	r1, [r4, #32]
 800d032:	4628      	mov	r0, r5
 800d034:	47b0      	blx	r6
 800d036:	1c43      	adds	r3, r0, #1
 800d038:	89a3      	ldrh	r3, [r4, #12]
 800d03a:	d106      	bne.n	800d04a <__sflush_r+0x66>
 800d03c:	6829      	ldr	r1, [r5, #0]
 800d03e:	291d      	cmp	r1, #29
 800d040:	d82c      	bhi.n	800d09c <__sflush_r+0xb8>
 800d042:	4a2a      	ldr	r2, [pc, #168]	; (800d0ec <__sflush_r+0x108>)
 800d044:	40ca      	lsrs	r2, r1
 800d046:	07d6      	lsls	r6, r2, #31
 800d048:	d528      	bpl.n	800d09c <__sflush_r+0xb8>
 800d04a:	2200      	movs	r2, #0
 800d04c:	6062      	str	r2, [r4, #4]
 800d04e:	04d9      	lsls	r1, r3, #19
 800d050:	6922      	ldr	r2, [r4, #16]
 800d052:	6022      	str	r2, [r4, #0]
 800d054:	d504      	bpl.n	800d060 <__sflush_r+0x7c>
 800d056:	1c42      	adds	r2, r0, #1
 800d058:	d101      	bne.n	800d05e <__sflush_r+0x7a>
 800d05a:	682b      	ldr	r3, [r5, #0]
 800d05c:	b903      	cbnz	r3, 800d060 <__sflush_r+0x7c>
 800d05e:	6560      	str	r0, [r4, #84]	; 0x54
 800d060:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d062:	602f      	str	r7, [r5, #0]
 800d064:	2900      	cmp	r1, #0
 800d066:	d0ca      	beq.n	800cffe <__sflush_r+0x1a>
 800d068:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d06c:	4299      	cmp	r1, r3
 800d06e:	d002      	beq.n	800d076 <__sflush_r+0x92>
 800d070:	4628      	mov	r0, r5
 800d072:	f000 f917 	bl	800d2a4 <_free_r>
 800d076:	2000      	movs	r0, #0
 800d078:	6360      	str	r0, [r4, #52]	; 0x34
 800d07a:	e7c1      	b.n	800d000 <__sflush_r+0x1c>
 800d07c:	6a21      	ldr	r1, [r4, #32]
 800d07e:	2301      	movs	r3, #1
 800d080:	4628      	mov	r0, r5
 800d082:	47b0      	blx	r6
 800d084:	1c41      	adds	r1, r0, #1
 800d086:	d1c7      	bne.n	800d018 <__sflush_r+0x34>
 800d088:	682b      	ldr	r3, [r5, #0]
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d0c4      	beq.n	800d018 <__sflush_r+0x34>
 800d08e:	2b1d      	cmp	r3, #29
 800d090:	d001      	beq.n	800d096 <__sflush_r+0xb2>
 800d092:	2b16      	cmp	r3, #22
 800d094:	d101      	bne.n	800d09a <__sflush_r+0xb6>
 800d096:	602f      	str	r7, [r5, #0]
 800d098:	e7b1      	b.n	800cffe <__sflush_r+0x1a>
 800d09a:	89a3      	ldrh	r3, [r4, #12]
 800d09c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d0a0:	81a3      	strh	r3, [r4, #12]
 800d0a2:	e7ad      	b.n	800d000 <__sflush_r+0x1c>
 800d0a4:	690f      	ldr	r7, [r1, #16]
 800d0a6:	2f00      	cmp	r7, #0
 800d0a8:	d0a9      	beq.n	800cffe <__sflush_r+0x1a>
 800d0aa:	0793      	lsls	r3, r2, #30
 800d0ac:	680e      	ldr	r6, [r1, #0]
 800d0ae:	bf08      	it	eq
 800d0b0:	694b      	ldreq	r3, [r1, #20]
 800d0b2:	600f      	str	r7, [r1, #0]
 800d0b4:	bf18      	it	ne
 800d0b6:	2300      	movne	r3, #0
 800d0b8:	eba6 0807 	sub.w	r8, r6, r7
 800d0bc:	608b      	str	r3, [r1, #8]
 800d0be:	f1b8 0f00 	cmp.w	r8, #0
 800d0c2:	dd9c      	ble.n	800cffe <__sflush_r+0x1a>
 800d0c4:	6a21      	ldr	r1, [r4, #32]
 800d0c6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d0c8:	4643      	mov	r3, r8
 800d0ca:	463a      	mov	r2, r7
 800d0cc:	4628      	mov	r0, r5
 800d0ce:	47b0      	blx	r6
 800d0d0:	2800      	cmp	r0, #0
 800d0d2:	dc06      	bgt.n	800d0e2 <__sflush_r+0xfe>
 800d0d4:	89a3      	ldrh	r3, [r4, #12]
 800d0d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d0da:	81a3      	strh	r3, [r4, #12]
 800d0dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d0e0:	e78e      	b.n	800d000 <__sflush_r+0x1c>
 800d0e2:	4407      	add	r7, r0
 800d0e4:	eba8 0800 	sub.w	r8, r8, r0
 800d0e8:	e7e9      	b.n	800d0be <__sflush_r+0xda>
 800d0ea:	bf00      	nop
 800d0ec:	20400001 	.word	0x20400001

0800d0f0 <_fflush_r>:
 800d0f0:	b538      	push	{r3, r4, r5, lr}
 800d0f2:	690b      	ldr	r3, [r1, #16]
 800d0f4:	4605      	mov	r5, r0
 800d0f6:	460c      	mov	r4, r1
 800d0f8:	b913      	cbnz	r3, 800d100 <_fflush_r+0x10>
 800d0fa:	2500      	movs	r5, #0
 800d0fc:	4628      	mov	r0, r5
 800d0fe:	bd38      	pop	{r3, r4, r5, pc}
 800d100:	b118      	cbz	r0, 800d10a <_fflush_r+0x1a>
 800d102:	6983      	ldr	r3, [r0, #24]
 800d104:	b90b      	cbnz	r3, 800d10a <_fflush_r+0x1a>
 800d106:	f7ff f8b9 	bl	800c27c <__sinit>
 800d10a:	4b14      	ldr	r3, [pc, #80]	; (800d15c <_fflush_r+0x6c>)
 800d10c:	429c      	cmp	r4, r3
 800d10e:	d11b      	bne.n	800d148 <_fflush_r+0x58>
 800d110:	686c      	ldr	r4, [r5, #4]
 800d112:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d116:	2b00      	cmp	r3, #0
 800d118:	d0ef      	beq.n	800d0fa <_fflush_r+0xa>
 800d11a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d11c:	07d0      	lsls	r0, r2, #31
 800d11e:	d404      	bmi.n	800d12a <_fflush_r+0x3a>
 800d120:	0599      	lsls	r1, r3, #22
 800d122:	d402      	bmi.n	800d12a <_fflush_r+0x3a>
 800d124:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d126:	f7ff f947 	bl	800c3b8 <__retarget_lock_acquire_recursive>
 800d12a:	4628      	mov	r0, r5
 800d12c:	4621      	mov	r1, r4
 800d12e:	f7ff ff59 	bl	800cfe4 <__sflush_r>
 800d132:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d134:	07da      	lsls	r2, r3, #31
 800d136:	4605      	mov	r5, r0
 800d138:	d4e0      	bmi.n	800d0fc <_fflush_r+0xc>
 800d13a:	89a3      	ldrh	r3, [r4, #12]
 800d13c:	059b      	lsls	r3, r3, #22
 800d13e:	d4dd      	bmi.n	800d0fc <_fflush_r+0xc>
 800d140:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d142:	f7ff f93a 	bl	800c3ba <__retarget_lock_release_recursive>
 800d146:	e7d9      	b.n	800d0fc <_fflush_r+0xc>
 800d148:	4b05      	ldr	r3, [pc, #20]	; (800d160 <_fflush_r+0x70>)
 800d14a:	429c      	cmp	r4, r3
 800d14c:	d101      	bne.n	800d152 <_fflush_r+0x62>
 800d14e:	68ac      	ldr	r4, [r5, #8]
 800d150:	e7df      	b.n	800d112 <_fflush_r+0x22>
 800d152:	4b04      	ldr	r3, [pc, #16]	; (800d164 <_fflush_r+0x74>)
 800d154:	429c      	cmp	r4, r3
 800d156:	bf08      	it	eq
 800d158:	68ec      	ldreq	r4, [r5, #12]
 800d15a:	e7da      	b.n	800d112 <_fflush_r+0x22>
 800d15c:	0800d834 	.word	0x0800d834
 800d160:	0800d854 	.word	0x0800d854
 800d164:	0800d814 	.word	0x0800d814

0800d168 <_lseek_r>:
 800d168:	b538      	push	{r3, r4, r5, lr}
 800d16a:	4d07      	ldr	r5, [pc, #28]	; (800d188 <_lseek_r+0x20>)
 800d16c:	4604      	mov	r4, r0
 800d16e:	4608      	mov	r0, r1
 800d170:	4611      	mov	r1, r2
 800d172:	2200      	movs	r2, #0
 800d174:	602a      	str	r2, [r5, #0]
 800d176:	461a      	mov	r2, r3
 800d178:	f7f5 fdf8 	bl	8002d6c <_lseek>
 800d17c:	1c43      	adds	r3, r0, #1
 800d17e:	d102      	bne.n	800d186 <_lseek_r+0x1e>
 800d180:	682b      	ldr	r3, [r5, #0]
 800d182:	b103      	cbz	r3, 800d186 <_lseek_r+0x1e>
 800d184:	6023      	str	r3, [r4, #0]
 800d186:	bd38      	pop	{r3, r4, r5, pc}
 800d188:	20000ea0 	.word	0x20000ea0

0800d18c <__swhatbuf_r>:
 800d18c:	b570      	push	{r4, r5, r6, lr}
 800d18e:	460e      	mov	r6, r1
 800d190:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d194:	2900      	cmp	r1, #0
 800d196:	b096      	sub	sp, #88	; 0x58
 800d198:	4614      	mov	r4, r2
 800d19a:	461d      	mov	r5, r3
 800d19c:	da08      	bge.n	800d1b0 <__swhatbuf_r+0x24>
 800d19e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800d1a2:	2200      	movs	r2, #0
 800d1a4:	602a      	str	r2, [r5, #0]
 800d1a6:	061a      	lsls	r2, r3, #24
 800d1a8:	d410      	bmi.n	800d1cc <__swhatbuf_r+0x40>
 800d1aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d1ae:	e00e      	b.n	800d1ce <__swhatbuf_r+0x42>
 800d1b0:	466a      	mov	r2, sp
 800d1b2:	f000 f905 	bl	800d3c0 <_fstat_r>
 800d1b6:	2800      	cmp	r0, #0
 800d1b8:	dbf1      	blt.n	800d19e <__swhatbuf_r+0x12>
 800d1ba:	9a01      	ldr	r2, [sp, #4]
 800d1bc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d1c0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d1c4:	425a      	negs	r2, r3
 800d1c6:	415a      	adcs	r2, r3
 800d1c8:	602a      	str	r2, [r5, #0]
 800d1ca:	e7ee      	b.n	800d1aa <__swhatbuf_r+0x1e>
 800d1cc:	2340      	movs	r3, #64	; 0x40
 800d1ce:	2000      	movs	r0, #0
 800d1d0:	6023      	str	r3, [r4, #0]
 800d1d2:	b016      	add	sp, #88	; 0x58
 800d1d4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d1d8 <__smakebuf_r>:
 800d1d8:	898b      	ldrh	r3, [r1, #12]
 800d1da:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d1dc:	079d      	lsls	r5, r3, #30
 800d1de:	4606      	mov	r6, r0
 800d1e0:	460c      	mov	r4, r1
 800d1e2:	d507      	bpl.n	800d1f4 <__smakebuf_r+0x1c>
 800d1e4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d1e8:	6023      	str	r3, [r4, #0]
 800d1ea:	6123      	str	r3, [r4, #16]
 800d1ec:	2301      	movs	r3, #1
 800d1ee:	6163      	str	r3, [r4, #20]
 800d1f0:	b002      	add	sp, #8
 800d1f2:	bd70      	pop	{r4, r5, r6, pc}
 800d1f4:	ab01      	add	r3, sp, #4
 800d1f6:	466a      	mov	r2, sp
 800d1f8:	f7ff ffc8 	bl	800d18c <__swhatbuf_r>
 800d1fc:	9900      	ldr	r1, [sp, #0]
 800d1fe:	4605      	mov	r5, r0
 800d200:	4630      	mov	r0, r6
 800d202:	f7ff f8fb 	bl	800c3fc <_malloc_r>
 800d206:	b948      	cbnz	r0, 800d21c <__smakebuf_r+0x44>
 800d208:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d20c:	059a      	lsls	r2, r3, #22
 800d20e:	d4ef      	bmi.n	800d1f0 <__smakebuf_r+0x18>
 800d210:	f023 0303 	bic.w	r3, r3, #3
 800d214:	f043 0302 	orr.w	r3, r3, #2
 800d218:	81a3      	strh	r3, [r4, #12]
 800d21a:	e7e3      	b.n	800d1e4 <__smakebuf_r+0xc>
 800d21c:	4b0d      	ldr	r3, [pc, #52]	; (800d254 <__smakebuf_r+0x7c>)
 800d21e:	62b3      	str	r3, [r6, #40]	; 0x28
 800d220:	89a3      	ldrh	r3, [r4, #12]
 800d222:	6020      	str	r0, [r4, #0]
 800d224:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d228:	81a3      	strh	r3, [r4, #12]
 800d22a:	9b00      	ldr	r3, [sp, #0]
 800d22c:	6163      	str	r3, [r4, #20]
 800d22e:	9b01      	ldr	r3, [sp, #4]
 800d230:	6120      	str	r0, [r4, #16]
 800d232:	b15b      	cbz	r3, 800d24c <__smakebuf_r+0x74>
 800d234:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d238:	4630      	mov	r0, r6
 800d23a:	f000 f8d3 	bl	800d3e4 <_isatty_r>
 800d23e:	b128      	cbz	r0, 800d24c <__smakebuf_r+0x74>
 800d240:	89a3      	ldrh	r3, [r4, #12]
 800d242:	f023 0303 	bic.w	r3, r3, #3
 800d246:	f043 0301 	orr.w	r3, r3, #1
 800d24a:	81a3      	strh	r3, [r4, #12]
 800d24c:	89a0      	ldrh	r0, [r4, #12]
 800d24e:	4305      	orrs	r5, r0
 800d250:	81a5      	strh	r5, [r4, #12]
 800d252:	e7cd      	b.n	800d1f0 <__smakebuf_r+0x18>
 800d254:	0800c215 	.word	0x0800c215

0800d258 <memmove>:
 800d258:	4288      	cmp	r0, r1
 800d25a:	b510      	push	{r4, lr}
 800d25c:	eb01 0402 	add.w	r4, r1, r2
 800d260:	d902      	bls.n	800d268 <memmove+0x10>
 800d262:	4284      	cmp	r4, r0
 800d264:	4623      	mov	r3, r4
 800d266:	d807      	bhi.n	800d278 <memmove+0x20>
 800d268:	1e43      	subs	r3, r0, #1
 800d26a:	42a1      	cmp	r1, r4
 800d26c:	d008      	beq.n	800d280 <memmove+0x28>
 800d26e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d272:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d276:	e7f8      	b.n	800d26a <memmove+0x12>
 800d278:	4402      	add	r2, r0
 800d27a:	4601      	mov	r1, r0
 800d27c:	428a      	cmp	r2, r1
 800d27e:	d100      	bne.n	800d282 <memmove+0x2a>
 800d280:	bd10      	pop	{r4, pc}
 800d282:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d286:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d28a:	e7f7      	b.n	800d27c <memmove+0x24>

0800d28c <__malloc_lock>:
 800d28c:	4801      	ldr	r0, [pc, #4]	; (800d294 <__malloc_lock+0x8>)
 800d28e:	f7ff b893 	b.w	800c3b8 <__retarget_lock_acquire_recursive>
 800d292:	bf00      	nop
 800d294:	20000e94 	.word	0x20000e94

0800d298 <__malloc_unlock>:
 800d298:	4801      	ldr	r0, [pc, #4]	; (800d2a0 <__malloc_unlock+0x8>)
 800d29a:	f7ff b88e 	b.w	800c3ba <__retarget_lock_release_recursive>
 800d29e:	bf00      	nop
 800d2a0:	20000e94 	.word	0x20000e94

0800d2a4 <_free_r>:
 800d2a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d2a6:	2900      	cmp	r1, #0
 800d2a8:	d044      	beq.n	800d334 <_free_r+0x90>
 800d2aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d2ae:	9001      	str	r0, [sp, #4]
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	f1a1 0404 	sub.w	r4, r1, #4
 800d2b6:	bfb8      	it	lt
 800d2b8:	18e4      	addlt	r4, r4, r3
 800d2ba:	f7ff ffe7 	bl	800d28c <__malloc_lock>
 800d2be:	4a1e      	ldr	r2, [pc, #120]	; (800d338 <_free_r+0x94>)
 800d2c0:	9801      	ldr	r0, [sp, #4]
 800d2c2:	6813      	ldr	r3, [r2, #0]
 800d2c4:	b933      	cbnz	r3, 800d2d4 <_free_r+0x30>
 800d2c6:	6063      	str	r3, [r4, #4]
 800d2c8:	6014      	str	r4, [r2, #0]
 800d2ca:	b003      	add	sp, #12
 800d2cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d2d0:	f7ff bfe2 	b.w	800d298 <__malloc_unlock>
 800d2d4:	42a3      	cmp	r3, r4
 800d2d6:	d908      	bls.n	800d2ea <_free_r+0x46>
 800d2d8:	6825      	ldr	r5, [r4, #0]
 800d2da:	1961      	adds	r1, r4, r5
 800d2dc:	428b      	cmp	r3, r1
 800d2de:	bf01      	itttt	eq
 800d2e0:	6819      	ldreq	r1, [r3, #0]
 800d2e2:	685b      	ldreq	r3, [r3, #4]
 800d2e4:	1949      	addeq	r1, r1, r5
 800d2e6:	6021      	streq	r1, [r4, #0]
 800d2e8:	e7ed      	b.n	800d2c6 <_free_r+0x22>
 800d2ea:	461a      	mov	r2, r3
 800d2ec:	685b      	ldr	r3, [r3, #4]
 800d2ee:	b10b      	cbz	r3, 800d2f4 <_free_r+0x50>
 800d2f0:	42a3      	cmp	r3, r4
 800d2f2:	d9fa      	bls.n	800d2ea <_free_r+0x46>
 800d2f4:	6811      	ldr	r1, [r2, #0]
 800d2f6:	1855      	adds	r5, r2, r1
 800d2f8:	42a5      	cmp	r5, r4
 800d2fa:	d10b      	bne.n	800d314 <_free_r+0x70>
 800d2fc:	6824      	ldr	r4, [r4, #0]
 800d2fe:	4421      	add	r1, r4
 800d300:	1854      	adds	r4, r2, r1
 800d302:	42a3      	cmp	r3, r4
 800d304:	6011      	str	r1, [r2, #0]
 800d306:	d1e0      	bne.n	800d2ca <_free_r+0x26>
 800d308:	681c      	ldr	r4, [r3, #0]
 800d30a:	685b      	ldr	r3, [r3, #4]
 800d30c:	6053      	str	r3, [r2, #4]
 800d30e:	4421      	add	r1, r4
 800d310:	6011      	str	r1, [r2, #0]
 800d312:	e7da      	b.n	800d2ca <_free_r+0x26>
 800d314:	d902      	bls.n	800d31c <_free_r+0x78>
 800d316:	230c      	movs	r3, #12
 800d318:	6003      	str	r3, [r0, #0]
 800d31a:	e7d6      	b.n	800d2ca <_free_r+0x26>
 800d31c:	6825      	ldr	r5, [r4, #0]
 800d31e:	1961      	adds	r1, r4, r5
 800d320:	428b      	cmp	r3, r1
 800d322:	bf04      	itt	eq
 800d324:	6819      	ldreq	r1, [r3, #0]
 800d326:	685b      	ldreq	r3, [r3, #4]
 800d328:	6063      	str	r3, [r4, #4]
 800d32a:	bf04      	itt	eq
 800d32c:	1949      	addeq	r1, r1, r5
 800d32e:	6021      	streq	r1, [r4, #0]
 800d330:	6054      	str	r4, [r2, #4]
 800d332:	e7ca      	b.n	800d2ca <_free_r+0x26>
 800d334:	b003      	add	sp, #12
 800d336:	bd30      	pop	{r4, r5, pc}
 800d338:	20000e98 	.word	0x20000e98

0800d33c <_realloc_r>:
 800d33c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d340:	4680      	mov	r8, r0
 800d342:	4614      	mov	r4, r2
 800d344:	460e      	mov	r6, r1
 800d346:	b921      	cbnz	r1, 800d352 <_realloc_r+0x16>
 800d348:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d34c:	4611      	mov	r1, r2
 800d34e:	f7ff b855 	b.w	800c3fc <_malloc_r>
 800d352:	b92a      	cbnz	r2, 800d360 <_realloc_r+0x24>
 800d354:	f7ff ffa6 	bl	800d2a4 <_free_r>
 800d358:	4625      	mov	r5, r4
 800d35a:	4628      	mov	r0, r5
 800d35c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d360:	f000 f850 	bl	800d404 <_malloc_usable_size_r>
 800d364:	4284      	cmp	r4, r0
 800d366:	4607      	mov	r7, r0
 800d368:	d802      	bhi.n	800d370 <_realloc_r+0x34>
 800d36a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d36e:	d812      	bhi.n	800d396 <_realloc_r+0x5a>
 800d370:	4621      	mov	r1, r4
 800d372:	4640      	mov	r0, r8
 800d374:	f7ff f842 	bl	800c3fc <_malloc_r>
 800d378:	4605      	mov	r5, r0
 800d37a:	2800      	cmp	r0, #0
 800d37c:	d0ed      	beq.n	800d35a <_realloc_r+0x1e>
 800d37e:	42bc      	cmp	r4, r7
 800d380:	4622      	mov	r2, r4
 800d382:	4631      	mov	r1, r6
 800d384:	bf28      	it	cs
 800d386:	463a      	movcs	r2, r7
 800d388:	f7fe fed2 	bl	800c130 <memcpy>
 800d38c:	4631      	mov	r1, r6
 800d38e:	4640      	mov	r0, r8
 800d390:	f7ff ff88 	bl	800d2a4 <_free_r>
 800d394:	e7e1      	b.n	800d35a <_realloc_r+0x1e>
 800d396:	4635      	mov	r5, r6
 800d398:	e7df      	b.n	800d35a <_realloc_r+0x1e>
	...

0800d39c <_read_r>:
 800d39c:	b538      	push	{r3, r4, r5, lr}
 800d39e:	4d07      	ldr	r5, [pc, #28]	; (800d3bc <_read_r+0x20>)
 800d3a0:	4604      	mov	r4, r0
 800d3a2:	4608      	mov	r0, r1
 800d3a4:	4611      	mov	r1, r2
 800d3a6:	2200      	movs	r2, #0
 800d3a8:	602a      	str	r2, [r5, #0]
 800d3aa:	461a      	mov	r2, r3
 800d3ac:	f7f5 fc7e 	bl	8002cac <_read>
 800d3b0:	1c43      	adds	r3, r0, #1
 800d3b2:	d102      	bne.n	800d3ba <_read_r+0x1e>
 800d3b4:	682b      	ldr	r3, [r5, #0]
 800d3b6:	b103      	cbz	r3, 800d3ba <_read_r+0x1e>
 800d3b8:	6023      	str	r3, [r4, #0]
 800d3ba:	bd38      	pop	{r3, r4, r5, pc}
 800d3bc:	20000ea0 	.word	0x20000ea0

0800d3c0 <_fstat_r>:
 800d3c0:	b538      	push	{r3, r4, r5, lr}
 800d3c2:	4d07      	ldr	r5, [pc, #28]	; (800d3e0 <_fstat_r+0x20>)
 800d3c4:	2300      	movs	r3, #0
 800d3c6:	4604      	mov	r4, r0
 800d3c8:	4608      	mov	r0, r1
 800d3ca:	4611      	mov	r1, r2
 800d3cc:	602b      	str	r3, [r5, #0]
 800d3ce:	f7f5 fcb2 	bl	8002d36 <_fstat>
 800d3d2:	1c43      	adds	r3, r0, #1
 800d3d4:	d102      	bne.n	800d3dc <_fstat_r+0x1c>
 800d3d6:	682b      	ldr	r3, [r5, #0]
 800d3d8:	b103      	cbz	r3, 800d3dc <_fstat_r+0x1c>
 800d3da:	6023      	str	r3, [r4, #0]
 800d3dc:	bd38      	pop	{r3, r4, r5, pc}
 800d3de:	bf00      	nop
 800d3e0:	20000ea0 	.word	0x20000ea0

0800d3e4 <_isatty_r>:
 800d3e4:	b538      	push	{r3, r4, r5, lr}
 800d3e6:	4d06      	ldr	r5, [pc, #24]	; (800d400 <_isatty_r+0x1c>)
 800d3e8:	2300      	movs	r3, #0
 800d3ea:	4604      	mov	r4, r0
 800d3ec:	4608      	mov	r0, r1
 800d3ee:	602b      	str	r3, [r5, #0]
 800d3f0:	f7f5 fcb1 	bl	8002d56 <_isatty>
 800d3f4:	1c43      	adds	r3, r0, #1
 800d3f6:	d102      	bne.n	800d3fe <_isatty_r+0x1a>
 800d3f8:	682b      	ldr	r3, [r5, #0]
 800d3fa:	b103      	cbz	r3, 800d3fe <_isatty_r+0x1a>
 800d3fc:	6023      	str	r3, [r4, #0]
 800d3fe:	bd38      	pop	{r3, r4, r5, pc}
 800d400:	20000ea0 	.word	0x20000ea0

0800d404 <_malloc_usable_size_r>:
 800d404:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d408:	1f18      	subs	r0, r3, #4
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	bfbc      	itt	lt
 800d40e:	580b      	ldrlt	r3, [r1, r0]
 800d410:	18c0      	addlt	r0, r0, r3
 800d412:	4770      	bx	lr

0800d414 <_init>:
 800d414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d416:	bf00      	nop
 800d418:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d41a:	bc08      	pop	{r3}
 800d41c:	469e      	mov	lr, r3
 800d41e:	4770      	bx	lr

0800d420 <_fini>:
 800d420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d422:	bf00      	nop
 800d424:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d426:	bc08      	pop	{r3}
 800d428:	469e      	mov	lr, r3
 800d42a:	4770      	bx	lr
