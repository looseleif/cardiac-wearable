
WB_AWEAR_proj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a1e4  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000370  0800a324  0800a324  0001a324  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800a694  0800a694  0001a694  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800a69c  0800a69c  0001a69c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800a6a0  0800a6a0  0001a6a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000084  20000008  0800a6a4  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 MB_MEM2       00000883  2000008c  0800a728  0002008c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 BLE_DRIVER_CONTEXT 00000035  20000910  0800afab  00020910  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 SYSTEM_DRIVER_CONTEXT 00000011  20000948  0800afe0  00020948  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          000003c8  2000095c  0800aff1  0002095c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000d24  0800aff1  00020d24  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020959  2**0
                  CONTENTS, READONLY
 13 MAPPING_TABLE 00000028  20030000  20030000  00030000  2**2
                  ALLOC
 14 MB_MEM1       000001bb  20030028  20030028  00030000  2**2
                  ALLOC
 15 .debug_info   0002fc05  00000000  00000000  00020989  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00005cd4  00000000  00000000  0005058e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 000029b0  00000000  00000000  00056268  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 00002718  00000000  00000000  00058c18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0000d9fa  00000000  00000000  0005b330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0002e525  00000000  00000000  00068d2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000fa68d  00000000  00000000  0009724f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000050  00000000  00000000  001918dc  2**0
                  CONTENTS, READONLY
 23 .debug_frame  0000b684  00000000  00000000  0019192c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	2000095c 	.word	0x2000095c
 800015c:	00000000 	.word	0x00000000
 8000160:	0800a30c 	.word	0x0800a30c

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000960 	.word	0x20000960
 800017c:	0800a30c 	.word	0x0800a30c

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_uldivmod>:
 8000230:	b953      	cbnz	r3, 8000248 <__aeabi_uldivmod+0x18>
 8000232:	b94a      	cbnz	r2, 8000248 <__aeabi_uldivmod+0x18>
 8000234:	2900      	cmp	r1, #0
 8000236:	bf08      	it	eq
 8000238:	2800      	cmpeq	r0, #0
 800023a:	bf1c      	itt	ne
 800023c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000240:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000244:	f000 b974 	b.w	8000530 <__aeabi_idiv0>
 8000248:	f1ad 0c08 	sub.w	ip, sp, #8
 800024c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000258:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800025c:	b004      	add	sp, #16
 800025e:	4770      	bx	lr

08000260 <__udivmoddi4>:
 8000260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000264:	9d08      	ldr	r5, [sp, #32]
 8000266:	4604      	mov	r4, r0
 8000268:	468e      	mov	lr, r1
 800026a:	2b00      	cmp	r3, #0
 800026c:	d14d      	bne.n	800030a <__udivmoddi4+0xaa>
 800026e:	428a      	cmp	r2, r1
 8000270:	4694      	mov	ip, r2
 8000272:	d969      	bls.n	8000348 <__udivmoddi4+0xe8>
 8000274:	fab2 f282 	clz	r2, r2
 8000278:	b152      	cbz	r2, 8000290 <__udivmoddi4+0x30>
 800027a:	fa01 f302 	lsl.w	r3, r1, r2
 800027e:	f1c2 0120 	rsb	r1, r2, #32
 8000282:	fa20 f101 	lsr.w	r1, r0, r1
 8000286:	fa0c fc02 	lsl.w	ip, ip, r2
 800028a:	ea41 0e03 	orr.w	lr, r1, r3
 800028e:	4094      	lsls	r4, r2
 8000290:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000294:	0c21      	lsrs	r1, r4, #16
 8000296:	fbbe f6f8 	udiv	r6, lr, r8
 800029a:	fa1f f78c 	uxth.w	r7, ip
 800029e:	fb08 e316 	mls	r3, r8, r6, lr
 80002a2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002a6:	fb06 f107 	mul.w	r1, r6, r7
 80002aa:	4299      	cmp	r1, r3
 80002ac:	d90a      	bls.n	80002c4 <__udivmoddi4+0x64>
 80002ae:	eb1c 0303 	adds.w	r3, ip, r3
 80002b2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002b6:	f080 811f 	bcs.w	80004f8 <__udivmoddi4+0x298>
 80002ba:	4299      	cmp	r1, r3
 80002bc:	f240 811c 	bls.w	80004f8 <__udivmoddi4+0x298>
 80002c0:	3e02      	subs	r6, #2
 80002c2:	4463      	add	r3, ip
 80002c4:	1a5b      	subs	r3, r3, r1
 80002c6:	b2a4      	uxth	r4, r4
 80002c8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002cc:	fb08 3310 	mls	r3, r8, r0, r3
 80002d0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d4:	fb00 f707 	mul.w	r7, r0, r7
 80002d8:	42a7      	cmp	r7, r4
 80002da:	d90a      	bls.n	80002f2 <__udivmoddi4+0x92>
 80002dc:	eb1c 0404 	adds.w	r4, ip, r4
 80002e0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002e4:	f080 810a 	bcs.w	80004fc <__udivmoddi4+0x29c>
 80002e8:	42a7      	cmp	r7, r4
 80002ea:	f240 8107 	bls.w	80004fc <__udivmoddi4+0x29c>
 80002ee:	4464      	add	r4, ip
 80002f0:	3802      	subs	r0, #2
 80002f2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002f6:	1be4      	subs	r4, r4, r7
 80002f8:	2600      	movs	r6, #0
 80002fa:	b11d      	cbz	r5, 8000304 <__udivmoddi4+0xa4>
 80002fc:	40d4      	lsrs	r4, r2
 80002fe:	2300      	movs	r3, #0
 8000300:	e9c5 4300 	strd	r4, r3, [r5]
 8000304:	4631      	mov	r1, r6
 8000306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030a:	428b      	cmp	r3, r1
 800030c:	d909      	bls.n	8000322 <__udivmoddi4+0xc2>
 800030e:	2d00      	cmp	r5, #0
 8000310:	f000 80ef 	beq.w	80004f2 <__udivmoddi4+0x292>
 8000314:	2600      	movs	r6, #0
 8000316:	e9c5 0100 	strd	r0, r1, [r5]
 800031a:	4630      	mov	r0, r6
 800031c:	4631      	mov	r1, r6
 800031e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000322:	fab3 f683 	clz	r6, r3
 8000326:	2e00      	cmp	r6, #0
 8000328:	d14a      	bne.n	80003c0 <__udivmoddi4+0x160>
 800032a:	428b      	cmp	r3, r1
 800032c:	d302      	bcc.n	8000334 <__udivmoddi4+0xd4>
 800032e:	4282      	cmp	r2, r0
 8000330:	f200 80f9 	bhi.w	8000526 <__udivmoddi4+0x2c6>
 8000334:	1a84      	subs	r4, r0, r2
 8000336:	eb61 0303 	sbc.w	r3, r1, r3
 800033a:	2001      	movs	r0, #1
 800033c:	469e      	mov	lr, r3
 800033e:	2d00      	cmp	r5, #0
 8000340:	d0e0      	beq.n	8000304 <__udivmoddi4+0xa4>
 8000342:	e9c5 4e00 	strd	r4, lr, [r5]
 8000346:	e7dd      	b.n	8000304 <__udivmoddi4+0xa4>
 8000348:	b902      	cbnz	r2, 800034c <__udivmoddi4+0xec>
 800034a:	deff      	udf	#255	; 0xff
 800034c:	fab2 f282 	clz	r2, r2
 8000350:	2a00      	cmp	r2, #0
 8000352:	f040 8092 	bne.w	800047a <__udivmoddi4+0x21a>
 8000356:	eba1 010c 	sub.w	r1, r1, ip
 800035a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800035e:	fa1f fe8c 	uxth.w	lr, ip
 8000362:	2601      	movs	r6, #1
 8000364:	0c20      	lsrs	r0, r4, #16
 8000366:	fbb1 f3f7 	udiv	r3, r1, r7
 800036a:	fb07 1113 	mls	r1, r7, r3, r1
 800036e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000372:	fb0e f003 	mul.w	r0, lr, r3
 8000376:	4288      	cmp	r0, r1
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0x12c>
 800037a:	eb1c 0101 	adds.w	r1, ip, r1
 800037e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x12a>
 8000384:	4288      	cmp	r0, r1
 8000386:	f200 80cb 	bhi.w	8000520 <__udivmoddi4+0x2c0>
 800038a:	4643      	mov	r3, r8
 800038c:	1a09      	subs	r1, r1, r0
 800038e:	b2a4      	uxth	r4, r4
 8000390:	fbb1 f0f7 	udiv	r0, r1, r7
 8000394:	fb07 1110 	mls	r1, r7, r0, r1
 8000398:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800039c:	fb0e fe00 	mul.w	lr, lr, r0
 80003a0:	45a6      	cmp	lr, r4
 80003a2:	d908      	bls.n	80003b6 <__udivmoddi4+0x156>
 80003a4:	eb1c 0404 	adds.w	r4, ip, r4
 80003a8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003ac:	d202      	bcs.n	80003b4 <__udivmoddi4+0x154>
 80003ae:	45a6      	cmp	lr, r4
 80003b0:	f200 80bb 	bhi.w	800052a <__udivmoddi4+0x2ca>
 80003b4:	4608      	mov	r0, r1
 80003b6:	eba4 040e 	sub.w	r4, r4, lr
 80003ba:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003be:	e79c      	b.n	80002fa <__udivmoddi4+0x9a>
 80003c0:	f1c6 0720 	rsb	r7, r6, #32
 80003c4:	40b3      	lsls	r3, r6
 80003c6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ca:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ce:	fa20 f407 	lsr.w	r4, r0, r7
 80003d2:	fa01 f306 	lsl.w	r3, r1, r6
 80003d6:	431c      	orrs	r4, r3
 80003d8:	40f9      	lsrs	r1, r7
 80003da:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003de:	fa00 f306 	lsl.w	r3, r0, r6
 80003e2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003e6:	0c20      	lsrs	r0, r4, #16
 80003e8:	fa1f fe8c 	uxth.w	lr, ip
 80003ec:	fb09 1118 	mls	r1, r9, r8, r1
 80003f0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f4:	fb08 f00e 	mul.w	r0, r8, lr
 80003f8:	4288      	cmp	r0, r1
 80003fa:	fa02 f206 	lsl.w	r2, r2, r6
 80003fe:	d90b      	bls.n	8000418 <__udivmoddi4+0x1b8>
 8000400:	eb1c 0101 	adds.w	r1, ip, r1
 8000404:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000408:	f080 8088 	bcs.w	800051c <__udivmoddi4+0x2bc>
 800040c:	4288      	cmp	r0, r1
 800040e:	f240 8085 	bls.w	800051c <__udivmoddi4+0x2bc>
 8000412:	f1a8 0802 	sub.w	r8, r8, #2
 8000416:	4461      	add	r1, ip
 8000418:	1a09      	subs	r1, r1, r0
 800041a:	b2a4      	uxth	r4, r4
 800041c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000420:	fb09 1110 	mls	r1, r9, r0, r1
 8000424:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000428:	fb00 fe0e 	mul.w	lr, r0, lr
 800042c:	458e      	cmp	lr, r1
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x1e2>
 8000430:	eb1c 0101 	adds.w	r1, ip, r1
 8000434:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000438:	d26c      	bcs.n	8000514 <__udivmoddi4+0x2b4>
 800043a:	458e      	cmp	lr, r1
 800043c:	d96a      	bls.n	8000514 <__udivmoddi4+0x2b4>
 800043e:	3802      	subs	r0, #2
 8000440:	4461      	add	r1, ip
 8000442:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000446:	fba0 9402 	umull	r9, r4, r0, r2
 800044a:	eba1 010e 	sub.w	r1, r1, lr
 800044e:	42a1      	cmp	r1, r4
 8000450:	46c8      	mov	r8, r9
 8000452:	46a6      	mov	lr, r4
 8000454:	d356      	bcc.n	8000504 <__udivmoddi4+0x2a4>
 8000456:	d053      	beq.n	8000500 <__udivmoddi4+0x2a0>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x212>
 800045a:	ebb3 0208 	subs.w	r2, r3, r8
 800045e:	eb61 010e 	sbc.w	r1, r1, lr
 8000462:	fa01 f707 	lsl.w	r7, r1, r7
 8000466:	fa22 f306 	lsr.w	r3, r2, r6
 800046a:	40f1      	lsrs	r1, r6
 800046c:	431f      	orrs	r7, r3
 800046e:	e9c5 7100 	strd	r7, r1, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	f1c2 0320 	rsb	r3, r2, #32
 800047e:	40d8      	lsrs	r0, r3
 8000480:	fa0c fc02 	lsl.w	ip, ip, r2
 8000484:	fa21 f303 	lsr.w	r3, r1, r3
 8000488:	4091      	lsls	r1, r2
 800048a:	4301      	orrs	r1, r0
 800048c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fbb3 f0f7 	udiv	r0, r3, r7
 8000498:	fb07 3610 	mls	r6, r7, r0, r3
 800049c:	0c0b      	lsrs	r3, r1, #16
 800049e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004a2:	fb00 f60e 	mul.w	r6, r0, lr
 80004a6:	429e      	cmp	r6, r3
 80004a8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x260>
 80004ae:	eb1c 0303 	adds.w	r3, ip, r3
 80004b2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004b6:	d22f      	bcs.n	8000518 <__udivmoddi4+0x2b8>
 80004b8:	429e      	cmp	r6, r3
 80004ba:	d92d      	bls.n	8000518 <__udivmoddi4+0x2b8>
 80004bc:	3802      	subs	r0, #2
 80004be:	4463      	add	r3, ip
 80004c0:	1b9b      	subs	r3, r3, r6
 80004c2:	b289      	uxth	r1, r1
 80004c4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004c8:	fb07 3316 	mls	r3, r7, r6, r3
 80004cc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004d0:	fb06 f30e 	mul.w	r3, r6, lr
 80004d4:	428b      	cmp	r3, r1
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x28a>
 80004d8:	eb1c 0101 	adds.w	r1, ip, r1
 80004dc:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004e0:	d216      	bcs.n	8000510 <__udivmoddi4+0x2b0>
 80004e2:	428b      	cmp	r3, r1
 80004e4:	d914      	bls.n	8000510 <__udivmoddi4+0x2b0>
 80004e6:	3e02      	subs	r6, #2
 80004e8:	4461      	add	r1, ip
 80004ea:	1ac9      	subs	r1, r1, r3
 80004ec:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004f0:	e738      	b.n	8000364 <__udivmoddi4+0x104>
 80004f2:	462e      	mov	r6, r5
 80004f4:	4628      	mov	r0, r5
 80004f6:	e705      	b.n	8000304 <__udivmoddi4+0xa4>
 80004f8:	4606      	mov	r6, r0
 80004fa:	e6e3      	b.n	80002c4 <__udivmoddi4+0x64>
 80004fc:	4618      	mov	r0, r3
 80004fe:	e6f8      	b.n	80002f2 <__udivmoddi4+0x92>
 8000500:	454b      	cmp	r3, r9
 8000502:	d2a9      	bcs.n	8000458 <__udivmoddi4+0x1f8>
 8000504:	ebb9 0802 	subs.w	r8, r9, r2
 8000508:	eb64 0e0c 	sbc.w	lr, r4, ip
 800050c:	3801      	subs	r0, #1
 800050e:	e7a3      	b.n	8000458 <__udivmoddi4+0x1f8>
 8000510:	4646      	mov	r6, r8
 8000512:	e7ea      	b.n	80004ea <__udivmoddi4+0x28a>
 8000514:	4620      	mov	r0, r4
 8000516:	e794      	b.n	8000442 <__udivmoddi4+0x1e2>
 8000518:	4640      	mov	r0, r8
 800051a:	e7d1      	b.n	80004c0 <__udivmoddi4+0x260>
 800051c:	46d0      	mov	r8, sl
 800051e:	e77b      	b.n	8000418 <__udivmoddi4+0x1b8>
 8000520:	3b02      	subs	r3, #2
 8000522:	4461      	add	r1, ip
 8000524:	e732      	b.n	800038c <__udivmoddi4+0x12c>
 8000526:	4630      	mov	r0, r6
 8000528:	e709      	b.n	800033e <__udivmoddi4+0xde>
 800052a:	4464      	add	r4, ip
 800052c:	3802      	subs	r0, #2
 800052e:	e742      	b.n	80003b6 <__udivmoddi4+0x156>

08000530 <__aeabi_idiv0>:
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop

08000534 <APPD_EnableCPU2>:
/* USER CODE END APPD_Init */
  return;
}

void APPD_EnableCPU2( void )
{
 8000534:	b5b0      	push	{r4, r5, r7, lr}
 8000536:	b088      	sub	sp, #32
 8000538:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 800053a:	4b0b      	ldr	r3, [pc, #44]	; (8000568 <APPD_EnableCPU2+0x34>)
 800053c:	1d3c      	adds	r4, r7, #4
 800053e:	461d      	mov	r5, r3
 8000540:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000542:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000544:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000548:	c403      	stmia	r4!, {r0, r1}
 800054a:	8022      	strh	r2, [r4, #0]
 800054c:	3402      	adds	r4, #2
 800054e:	0c13      	lsrs	r3, r2, #16
 8000550:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 8000552:	f007 fd07 	bl	8007f64 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 8000556:	1d3b      	adds	r3, r7, #4
 8000558:	4618      	mov	r0, r3
 800055a:	f006 ffa2 	bl	80074a2 <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 800055e:	bf00      	nop
}
 8000560:	3720      	adds	r7, #32
 8000562:	46bd      	mov	sp, r7
 8000564:	bdb0      	pop	{r4, r5, r7, pc}
 8000566:	bf00      	nop
 8000568:	0800a324 	.word	0x0800a324

0800056c <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 800056c:	b480      	push	{r7}
 800056e:	b083      	sub	sp, #12
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 8000574:	4b07      	ldr	r3, [pc, #28]	; (8000594 <LL_C2_PWR_SetPowerMode+0x28>)
 8000576:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800057a:	f023 0207 	bic.w	r2, r3, #7
 800057e:	4905      	ldr	r1, [pc, #20]	; (8000594 <LL_C2_PWR_SetPowerMode+0x28>)
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	4313      	orrs	r3, r2
 8000584:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8000588:	bf00      	nop
 800058a:	370c      	adds	r7, #12
 800058c:	46bd      	mov	sp, r7
 800058e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000592:	4770      	bx	lr
 8000594:	58000400 	.word	0x58000400

08000598 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8000598:	b480      	push	{r7}
 800059a:	b083      	sub	sp, #12
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80005a0:	4b06      	ldr	r3, [pc, #24]	; (80005bc <LL_EXTI_EnableIT_32_63+0x24>)
 80005a2:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80005a6:	4905      	ldr	r1, [pc, #20]	; (80005bc <LL_EXTI_EnableIT_32_63+0x24>)
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	4313      	orrs	r3, r2
 80005ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80005b0:	bf00      	nop
 80005b2:	370c      	adds	r7, #12
 80005b4:	46bd      	mov	sp, r7
 80005b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ba:	4770      	bx	lr
 80005bc:	58000800 	.word	0x58000800

080005c0 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 80005c0:	b480      	push	{r7}
 80005c2:	b083      	sub	sp, #12
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 80005c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80005cc:	4a0a      	ldr	r2, [pc, #40]	; (80005f8 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 80005ce:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 80005d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80005d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80005da:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	021b      	lsls	r3, r3, #8
 80005e2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80005e6:	4313      	orrs	r3, r2
 80005e8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 80005ec:	bf00      	nop
 80005ee:	370c      	adds	r7, #12
 80005f0:	46bd      	mov	sp, r7
 80005f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f6:	4770      	bx	lr
 80005f8:	cafecafe 	.word	0xcafecafe

080005fc <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 80005fc:	b480      	push	{r7}
 80005fe:	b083      	sub	sp, #12
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000604:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000608:	689b      	ldr	r3, [r3, #8]
 800060a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800060e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	4313      	orrs	r3, r2
 8000616:	608b      	str	r3, [r1, #8]
}
 8000618:	bf00      	nop
 800061a:	370c      	adds	r7, #12
 800061c:	46bd      	mov	sp, r7
 800061e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000622:	4770      	bx	lr

08000624 <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000628:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800062c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000630:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000634:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000638:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800063c:	bf00      	nop
 800063e:	46bd      	mov	sp, r7
 8000640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000644:	4770      	bx	lr

08000646 <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 8000646:	b480      	push	{r7}
 8000648:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800064a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800064e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000652:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000656:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800065a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800065e:	bf00      	nop
 8000660:	46bd      	mov	sp, r7
 8000662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000666:	4770      	bx	lr

08000668 <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 8000668:	b480      	push	{r7}
 800066a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 800066c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000670:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000674:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000678:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800067c:	d101      	bne.n	8000682 <LL_RCC_IsActiveFlag_PINRST+0x1a>
 800067e:	2301      	movs	r3, #1
 8000680:	e000      	b.n	8000684 <LL_RCC_IsActiveFlag_PINRST+0x1c>
 8000682:	2300      	movs	r3, #0
}
 8000684:	4618      	mov	r0, r3
 8000686:	46bd      	mov	sp, r7
 8000688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068c:	4770      	bx	lr

0800068e <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 800068e:	b480      	push	{r7}
 8000690:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 8000692:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000696:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800069a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800069e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80006a2:	d101      	bne.n	80006a8 <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 80006a4:	2301      	movs	r3, #1
 80006a6:	e000      	b.n	80006aa <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 80006a8:	2300      	movs	r3, #0
}
 80006aa:	4618      	mov	r0, r3
 80006ac:	46bd      	mov	sp, r7
 80006ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b2:	4770      	bx	lr

080006b4 <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 80006b4:	b480      	push	{r7}
 80006b6:	b085      	sub	sp, #20
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 80006bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80006c0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80006c2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	4313      	orrs	r3, r2
 80006ca:	650b      	str	r3, [r1, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80006cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80006d0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	4013      	ands	r3, r2
 80006d6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80006d8:	68fb      	ldr	r3, [r7, #12]
}
 80006da:	bf00      	nop
 80006dc:	3714      	adds	r7, #20
 80006de:	46bd      	mov	sp, r7
 80006e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e4:	4770      	bx	lr
	...

080006e8 <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 80006e8:	b480      	push	{r7}
 80006ea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 80006ec:	4b04      	ldr	r3, [pc, #16]	; (8000700 <LL_DBGMCU_GetDeviceID+0x18>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 80006f4:	4618      	mov	r0, r3
 80006f6:	46bd      	mov	sp, r7
 80006f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fc:	4770      	bx	lr
 80006fe:	bf00      	nop
 8000700:	e0042000 	.word	0xe0042000

08000704 <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 8000704:	b480      	push	{r7}
 8000706:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 8000708:	4b04      	ldr	r3, [pc, #16]	; (800071c <LL_DBGMCU_GetRevisionID+0x18>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	0c1b      	lsrs	r3, r3, #16
 800070e:	b29b      	uxth	r3, r3
}
 8000710:	4618      	mov	r0, r3
 8000712:	46bd      	mov	sp, r7
 8000714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000718:	4770      	bx	lr
 800071a:	bf00      	nop
 800071c:	e0042000 	.word	0xe0042000

08000720 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000720:	b480      	push	{r7}
 8000722:	b083      	sub	sp, #12
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
 8000728:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	685a      	ldr	r2, [r3, #4]
 800072e:	683b      	ldr	r3, [r7, #0]
 8000730:	041b      	lsls	r3, r3, #16
 8000732:	431a      	orrs	r2, r3
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	605a      	str	r2, [r3, #4]
}
 8000738:	bf00      	nop
 800073a:	370c      	adds	r7, #12
 800073c:	46bd      	mov	sp, r7
 800073e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000742:	4770      	bx	lr

08000744 <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000744:	b480      	push	{r7}
 8000746:	b083      	sub	sp, #12
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
 800074c:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	685a      	ldr	r2, [r3, #4]
 8000752:	683b      	ldr	r3, [r7, #0]
 8000754:	431a      	orrs	r2, r3
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	605a      	str	r2, [r3, #4]
}
 800075a:	bf00      	nop
 800075c:	370c      	adds	r7, #12
 800075e:	46bd      	mov	sp, r7
 8000760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000764:	4770      	bx	lr

08000766 <LL_C2_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000766:	b480      	push	{r7}
 8000768:	b083      	sub	sp, #12
 800076a:	af00      	add	r7, sp, #0
 800076c:	6078      	str	r0, [r7, #4]
 800076e:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	695a      	ldr	r2, [r3, #20]
 8000774:	683b      	ldr	r3, [r7, #0]
 8000776:	041b      	lsls	r3, r3, #16
 8000778:	431a      	orrs	r2, r3
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	615a      	str	r2, [r3, #20]
}
 800077e:	bf00      	nop
 8000780:	370c      	adds	r7, #12
 8000782:	46bd      	mov	sp, r7
 8000784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000788:	4770      	bx	lr

0800078a <LL_C2_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800078a:	b480      	push	{r7}
 800078c:	b083      	sub	sp, #12
 800078e:	af00      	add	r7, sp, #0
 8000790:	6078      	str	r0, [r7, #4]
 8000792:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	695a      	ldr	r2, [r3, #20]
 8000798:	683b      	ldr	r3, [r7, #0]
 800079a:	431a      	orrs	r2, r3
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	615a      	str	r2, [r3, #20]
}
 80007a0:	bf00      	nop
 80007a2:	370c      	adds	r7, #12
 80007a4:	46bd      	mov	sp, r7
 80007a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007aa:	4770      	bx	lr

080007ac <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80007ac:	b480      	push	{r7}
 80007ae:	b083      	sub	sp, #12
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
 80007b4:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	683a      	ldr	r2, [r7, #0]
 80007ba:	609a      	str	r2, [r3, #8]
}
 80007bc:	bf00      	nop
 80007be:	370c      	adds	r7, #12
 80007c0:	46bd      	mov	sp, r7
 80007c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c6:	4770      	bx	lr

080007c8 <LL_C2_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80007c8:	b480      	push	{r7}
 80007ca:	b083      	sub	sp, #12
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
 80007d0:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	683a      	ldr	r2, [r7, #0]
 80007d6:	619a      	str	r2, [r3, #24]
}
 80007d8:	bf00      	nop
 80007da:	370c      	adds	r7, #12
 80007dc:	46bd      	mov	sp, r7
 80007de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e2:	4770      	bx	lr

080007e4 <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80007e8:	4b05      	ldr	r3, [pc, #20]	; (8000800 <LL_LPM_EnableSleep+0x1c>)
 80007ea:	691b      	ldr	r3, [r3, #16]
 80007ec:	4a04      	ldr	r2, [pc, #16]	; (8000800 <LL_LPM_EnableSleep+0x1c>)
 80007ee:	f023 0304 	bic.w	r3, r3, #4
 80007f2:	6113      	str	r3, [r2, #16]
}
 80007f4:	bf00      	nop
 80007f6:	46bd      	mov	sp, r7
 80007f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fc:	4770      	bx	lr
 80007fe:	bf00      	nop
 8000800:	e000ed00 	.word	0xe000ed00

08000804 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8000804:	b480      	push	{r7}
 8000806:	b083      	sub	sp, #12
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	22ff      	movs	r2, #255	; 0xff
 8000810:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000812:	bf00      	nop
 8000814:	370c      	adds	r7, #12
 8000816:	46bd      	mov	sp, r7
 8000818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081c:	4770      	bx	lr

0800081e <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 800081e:	b480      	push	{r7}
 8000820:	b083      	sub	sp, #12
 8000822:	af00      	add	r7, sp, #0
 8000824:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	22ca      	movs	r2, #202	; 0xca
 800082a:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	2253      	movs	r2, #83	; 0x53
 8000830:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000832:	bf00      	nop
 8000834:	370c      	adds	r7, #12
 8000836:	46bd      	mov	sp, r7
 8000838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083c:	4770      	bx	lr

0800083e <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 800083e:	b480      	push	{r7}
 8000840:	b083      	sub	sp, #12
 8000842:	af00      	add	r7, sp, #0
 8000844:	6078      	str	r0, [r7, #4]
 8000846:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	689b      	ldr	r3, [r3, #8]
 800084c:	f023 0207 	bic.w	r2, r3, #7
 8000850:	683b      	ldr	r3, [r7, #0]
 8000852:	431a      	orrs	r2, r3
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	609a      	str	r2, [r3, #8]
}
 8000858:	bf00      	nop
 800085a:	370c      	adds	r7, #12
 800085c:	46bd      	mov	sp, r7
 800085e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000862:	4770      	bx	lr

08000864 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8000868:	4b04      	ldr	r3, [pc, #16]	; (800087c <MX_APPE_Config+0x18>)
 800086a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800086e:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 8000870:	f000 f824 	bl	80008bc <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 8000874:	f000 f864 	bl	8000940 <Config_HSE>

  return;
 8000878:	bf00      	nop
}
 800087a:	bd80      	pop	{r7, pc}
 800087c:	58004000 	.word	0x58004000

08000880 <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 8000884:	f000 f870 	bl	8000968 <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 8000888:	f000 f888 	bl	800099c <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 800088c:	4903      	ldr	r1, [pc, #12]	; (800089c <MX_APPE_Init+0x1c>)
 800088e:	2000      	movs	r0, #0
 8000890:	f000 fdd4 	bl	800143c <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8000894:	f000 f890 	bl	80009b8 <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 8000898:	bf00      	nop
}
 800089a:	bd80      	pop	{r7, pc}
 800089c:	20000aa8 	.word	0x20000aa8

080008a0 <Init_Smps>:

void Init_Smps(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 80008a4:	bf00      	nop
}
 80008a6:	46bd      	mov	sp, r7
 80008a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ac:	4770      	bx	lr

080008ae <Init_Exti>:

void Init_Exti(void)
{
 80008ae:	b580      	push	{r7, lr}
 80008b0:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 80008b2:	2050      	movs	r0, #80	; 0x50
 80008b4:	f7ff fe70 	bl	8000598 <LL_EXTI_EnableIT_32_63>

  return;
 80008b8:	bf00      	nop
}
 80008ba:	bd80      	pop	{r7, pc}

080008bc <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
#if (CFG_HW_RESET_BY_FW == 1)
  Reset_BackupDomain();
 80008c0:	f000 f804 	bl	80008cc <Reset_BackupDomain>

  Reset_IPCC();
 80008c4:	f000 f81a 	bl	80008fc <Reset_IPCC>
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 80008c8:	bf00      	nop
}
 80008ca:	bd80      	pop	{r7, pc}

080008cc <Reset_BackupDomain>:

#if (CFG_HW_RESET_BY_FW == 1)
static void Reset_BackupDomain(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
  if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 80008d0:	f7ff feca 	bl	8000668 <LL_RCC_IsActiveFlag_PINRST>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d00d      	beq.n	80008f6 <Reset_BackupDomain+0x2a>
 80008da:	f7ff fed8 	bl	800068e <LL_RCC_IsActiveFlag_SFTRST>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d108      	bne.n	80008f6 <Reset_BackupDomain+0x2a>
  {
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 80008e4:	f002 fdea 	bl	80034bc <HAL_PWR_EnableBkUpAccess>

    /**
     *  Write twice the value to flush the APB-AHB bridge
     *  This bit shall be written in the register before writing the next one
     */
    HAL_PWR_EnableBkUpAccess();
 80008e8:	f002 fde8 	bl	80034bc <HAL_PWR_EnableBkUpAccess>

    __HAL_RCC_BACKUPRESET_FORCE();
 80008ec:	f7ff fe9a 	bl	8000624 <LL_RCC_ForceBackupDomainReset>
    __HAL_RCC_BACKUPRESET_RELEASE();
 80008f0:	f7ff fea9 	bl	8000646 <LL_RCC_ReleaseBackupDomainReset>
  }

  return;
 80008f4:	bf00      	nop
 80008f6:	bf00      	nop
}
 80008f8:	bd80      	pop	{r7, pc}
	...

080008fc <Reset_IPCC>:

static void Reset_IPCC(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 8000900:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000904:	f7ff fed6 	bl	80006b4 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_ClearFlag_CHx(
 8000908:	213f      	movs	r1, #63	; 0x3f
 800090a:	480c      	ldr	r0, [pc, #48]	; (800093c <Reset_IPCC+0x40>)
 800090c:	f7ff ff4e 	bl	80007ac <LL_C1_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_ClearFlag_CHx(
 8000910:	213f      	movs	r1, #63	; 0x3f
 8000912:	480a      	ldr	r0, [pc, #40]	; (800093c <Reset_IPCC+0x40>)
 8000914:	f7ff ff58 	bl	80007c8 <LL_C2_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableTransmitChannel(
 8000918:	213f      	movs	r1, #63	; 0x3f
 800091a:	4808      	ldr	r0, [pc, #32]	; (800093c <Reset_IPCC+0x40>)
 800091c:	f7ff ff00 	bl	8000720 <LL_C1_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableTransmitChannel(
 8000920:	213f      	movs	r1, #63	; 0x3f
 8000922:	4806      	ldr	r0, [pc, #24]	; (800093c <Reset_IPCC+0x40>)
 8000924:	f7ff ff1f 	bl	8000766 <LL_C2_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableReceiveChannel(
 8000928:	213f      	movs	r1, #63	; 0x3f
 800092a:	4804      	ldr	r0, [pc, #16]	; (800093c <Reset_IPCC+0x40>)
 800092c:	f7ff ff0a 	bl	8000744 <LL_C1_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableReceiveChannel(
 8000930:	213f      	movs	r1, #63	; 0x3f
 8000932:	4802      	ldr	r0, [pc, #8]	; (800093c <Reset_IPCC+0x40>)
 8000934:	f7ff ff29 	bl	800078a <LL_C2_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  return;
 8000938:	bf00      	nop
}
 800093a:	bd80      	pop	{r7, pc}
 800093c:	58000c00 	.word	0x58000c00

08000940 <Config_HSE>:
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b082      	sub	sp, #8
 8000944:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8000946:	2000      	movs	r0, #0
 8000948:	f007 fb98 	bl	800807c <OTP_Read>
 800094c:	6078      	str	r0, [r7, #4]
  if (p_otp)
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	2b00      	cmp	r3, #0
 8000952:	d005      	beq.n	8000960 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	799b      	ldrb	r3, [r3, #6]
 8000958:	4618      	mov	r0, r3
 800095a:	f7ff fe31 	bl	80005c0 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 800095e:	bf00      	nop
 8000960:	bf00      	nop
}
 8000962:	3708      	adds	r7, #8
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}

08000968 <System_Init>:

static void System_Init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
  Init_Smps();
 800096c:	f7ff ff98 	bl	80008a0 <Init_Smps>

  Init_Exti();
 8000970:	f7ff ff9d 	bl	80008ae <Init_Exti>

  Init_Rtc();
 8000974:	f000 f802 	bl	800097c <Init_Rtc>

  return;
 8000978:	bf00      	nop
}
 800097a:	bd80      	pop	{r7, pc}

0800097c <Init_Rtc>:

static void Init_Rtc(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 8000980:	4805      	ldr	r0, [pc, #20]	; (8000998 <Init_Rtc+0x1c>)
 8000982:	f7ff ff4c 	bl	800081e <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 8000986:	2100      	movs	r1, #0
 8000988:	4803      	ldr	r0, [pc, #12]	; (8000998 <Init_Rtc+0x1c>)
 800098a:	f7ff ff58 	bl	800083e <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 800098e:	4802      	ldr	r0, [pc, #8]	; (8000998 <Init_Rtc+0x1c>)
 8000990:	f7ff ff38 	bl	8000804 <LL_RTC_EnableWriteProtection>

  return;
 8000994:	bf00      	nop
}
 8000996:	bd80      	pop	{r7, pc}
 8000998:	40002800 	.word	0x40002800

0800099c <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 80009a0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80009a4:	f7ff fe2a 	bl	80005fc <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 80009a8:	f008 fa62 	bl	8008e70 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 80009ac:	2004      	movs	r0, #4
 80009ae:	f7ff fddd 	bl	800056c <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 80009b2:	bf00      	nop
}
 80009b4:	bd80      	pop	{r7, pc}
	...

080009b8 <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b088      	sub	sp, #32
 80009bc:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 80009be:	f007 f91b 	bl	8007bf8 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 80009c2:	4a11      	ldr	r2, [pc, #68]	; (8000a08 <appe_Tl_Init+0x50>)
 80009c4:	2100      	movs	r1, #0
 80009c6:	2004      	movs	r0, #4
 80009c8:	f008 fb90 	bl	80090ec <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 80009cc:	4b0f      	ldr	r3, [pc, #60]	; (8000a0c <appe_Tl_Init+0x54>)
 80009ce:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 80009d0:	4b0f      	ldr	r3, [pc, #60]	; (8000a10 <appe_Tl_Init+0x58>)
 80009d2:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 80009d4:	463b      	mov	r3, r7
 80009d6:	4619      	mov	r1, r3
 80009d8:	480e      	ldr	r0, [pc, #56]	; (8000a14 <appe_Tl_Init+0x5c>)
 80009da:	f006 ffd3 	bl	8007984 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 80009de:	4b0e      	ldr	r3, [pc, #56]	; (8000a18 <appe_Tl_Init+0x60>)
 80009e0:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 80009e2:	4b0e      	ldr	r3, [pc, #56]	; (8000a1c <appe_Tl_Init+0x64>)
 80009e4:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 80009e6:	4b0e      	ldr	r3, [pc, #56]	; (8000a20 <appe_Tl_Init+0x68>)
 80009e8:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 80009ea:	f240 533c 	movw	r3, #1340	; 0x53c
 80009ee:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 80009f0:	f107 0308 	add.w	r3, r7, #8
 80009f4:	4618      	mov	r0, r3
 80009f6:	f007 fa41 	bl	8007e7c <TL_MM_Init>

  TL_Enable();
 80009fa:	f007 f8f7 	bl	8007bec <TL_Enable>

  return;
 80009fe:	bf00      	nop
}
 8000a00:	3720      	adds	r7, #32
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	080079bd 	.word	0x080079bd
 8000a0c:	200005dc 	.word	0x200005dc
 8000a10:	08000a25 	.word	0x08000a25
 8000a14:	08000a3d 	.word	0x08000a3d
 8000a18:	200007f4 	.word	0x200007f4
 8000a1c:	200006e8 	.word	0x200006e8
 8000a20:	200000a0 	.word	0x200000a0

08000a24 <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 8000a24:	b480      	push	{r7}
 8000a26:	b083      	sub	sp, #12
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 8000a2e:	bf00      	nop
}
 8000a30:	370c      	adds	r7, #12
 8000a32:	46bd      	mov	sp, r7
 8000a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a38:	4770      	bx	lr
	...

08000a3c <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b088      	sub	sp, #32
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	685b      	ldr	r3, [r3, #4]
 8000a48:	330b      	adds	r3, #11
 8000a4a:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 8000a4c:	69fb      	ldr	r3, [r7, #28]
 8000a4e:	881b      	ldrh	r3, [r3, #0]
 8000a50:	b29b      	uxth	r3, r3
 8000a52:	f5a3 4312 	sub.w	r3, r3, #37376	; 0x9200
 8000a56:	2b07      	cmp	r3, #7
 8000a58:	d81f      	bhi.n	8000a9a <APPE_SysUserEvtRx+0x5e>
 8000a5a:	a201      	add	r2, pc, #4	; (adr r2, 8000a60 <APPE_SysUserEvtRx+0x24>)
 8000a5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a60:	08000a81 	.word	0x08000a81
 8000a64:	08000a93 	.word	0x08000a93
 8000a68:	08000a9b 	.word	0x08000a9b
 8000a6c:	08000a9b 	.word	0x08000a9b
 8000a70:	08000a9b 	.word	0x08000a9b
 8000a74:	08000a9b 	.word	0x08000a9b
 8000a78:	08000a9b 	.word	0x08000a9b
 8000a7c:	08000a9b 	.word	0x08000a9b
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 8000a80:	f107 030c 	add.w	r3, r7, #12
 8000a84:	4618      	mov	r0, r3
 8000a86:	f006 fd39 	bl	80074fc <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
    APPE_SysEvtReadyProcessing(pPayload);
 8000a8a:	6878      	ldr	r0, [r7, #4]
 8000a8c:	f000 f81b 	bl	8000ac6 <APPE_SysEvtReadyProcessing>
    break;
 8000a90:	e004      	b.n	8000a9c <APPE_SysUserEvtRx+0x60>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
    APPE_SysEvtError(pPayload);
 8000a92:	6878      	ldr	r0, [r7, #4]
 8000a94:	f000 f806 	bl	8000aa4 <APPE_SysEvtError>
    break;
 8000a98:	e000      	b.n	8000a9c <APPE_SysUserEvtRx+0x60>
  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
    break;

  default:
    break;
 8000a9a:	bf00      	nop
  }

  return;
 8000a9c:	bf00      	nop
}
 8000a9e:	3720      	adds	r7, #32
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}

08000aa4 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	b085      	sub	sp, #20
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	685b      	ldr	r3, [r3, #4]
 8000ab0:	330b      	adds	r3, #11
 8000ab2:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	3302      	adds	r3, #2
 8000ab8:	60bb      	str	r3, [r7, #8]
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 8000aba:	bf00      	nop
}
 8000abc:	3714      	adds	r7, #20
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr

08000ac6 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 8000ac6:	b580      	push	{r7, lr}
 8000ac8:	b08a      	sub	sp, #40	; 0x28
 8000aca:	af00      	add	r7, sp, #0
 8000acc:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 8000ace:	f107 0308 	add.w	r3, r7, #8
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	601a      	str	r2, [r3, #0]
 8000ad6:	605a      	str	r2, [r3, #4]
 8000ad8:	609a      	str	r2, [r3, #8]
 8000ada:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 8000adc:	2300      	movs	r3, #0
 8000ade:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t DeviceID=0;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	685b      	ldr	r3, [r3, #4]
 8000ae8:	330b      	adds	r3, #11
 8000aea:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 8000aec:	69fb      	ldr	r3, [r7, #28]
 8000aee:	3302      	adds	r3, #2
 8000af0:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 8000af2:	69bb      	ldr	r3, [r7, #24]
 8000af4:	781b      	ldrb	r3, [r3, #0]
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d11d      	bne.n	8000b36 <APPE_SysEvtReadyProcessing+0x70>
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");

    /* Traces channel initialization */
    APPD_EnableCPU2();
 8000afa:	f7ff fd1b 	bl	8000534 <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 8000afe:	230f      	movs	r3, #15
 8000b00:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 8000b02:	237f      	movs	r3, #127	; 0x7f
 8000b04:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 8000b06:	f7ff fdfd 	bl	8000704 <LL_DBGMCU_GetRevisionID>
 8000b0a:	6278      	str	r0, [r7, #36]	; 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);

    config_param.RevisionID = (uint16_t)RevisionID;
 8000b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b0e:	b29b      	uxth	r3, r3
 8000b10:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 8000b12:	f7ff fde9 	bl	80006e8 <LL_DBGMCU_GetDeviceID>
 8000b16:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
    config_param.DeviceID = (uint16_t)DeviceID;
 8000b18:	6a3b      	ldr	r3, [r7, #32]
 8000b1a:	b29b      	uxth	r3, r3
 8000b1c:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 8000b1e:	f107 0308 	add.w	r3, r7, #8
 8000b22:	4618      	mov	r0, r3
 8000b24:	f006 fcd4 	bl	80074d0 <SHCI_C2_Config>

    APP_BLE_Init();
 8000b28:	f007 fbb2 	bl	8008290 <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	2001      	movs	r0, #1
 8000b30:	f008 f9b0 	bl	8008e94 <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 8000b34:	e007      	b.n	8000b46 <APPE_SysEvtReadyProcessing+0x80>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 8000b36:	69bb      	ldr	r3, [r7, #24]
 8000b38:	781b      	ldrb	r3, [r3, #0]
 8000b3a:	2b01      	cmp	r3, #1
 8000b3c:	d103      	bne.n	8000b46 <APPE_SysEvtReadyProcessing+0x80>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	2200      	movs	r2, #0
 8000b42:	701a      	strb	r2, [r3, #0]
  return;
 8000b44:	bf00      	nop
 8000b46:	bf00      	nop
}
 8000b48:	3728      	adds	r7, #40	; 0x28
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}

08000b4e <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 8000b4e:	b580      	push	{r7, lr}
 8000b50:	b084      	sub	sp, #16
 8000b52:	af00      	add	r7, sp, #0
 8000b54:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b56:	f001 fc01 	bl	800235c <HAL_GetTick>
 8000b5a:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000b66:	d00a      	beq.n	8000b7e <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 8000b68:	f001 fc10 	bl	800238c <HAL_GetTickFreq>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	461a      	mov	r2, r3
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	4413      	add	r3, r2
 8000b74:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b76:	e002      	b.n	8000b7e <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 8000b78:	f7ff fe34 	bl	80007e4 <LL_LPM_EnableSleep>
     */
  #if defined (__CC_ARM)
    __force_stores();
  #endif /* __CC_ARM */

    __WFI();
 8000b7c:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 8000b7e:	f001 fbed 	bl	800235c <HAL_GetTick>
 8000b82:	4602      	mov	r2, r0
 8000b84:	68bb      	ldr	r3, [r7, #8]
 8000b86:	1ad3      	subs	r3, r2, r3
 8000b88:	68fa      	ldr	r2, [r7, #12]
 8000b8a:	429a      	cmp	r2, r3
 8000b8c:	d8f4      	bhi.n	8000b78 <HAL_Delay+0x2a>
  }
}
 8000b8e:	bf00      	nop
 8000b90:	bf00      	nop
 8000b92:	3710      	adds	r7, #16
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}

08000b98 <MX_APPE_Process>:

void MX_APPE_Process(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8000b9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ba0:	f008 f9a8 	bl	8008ef4 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 8000ba4:	bf00      	nop
 8000ba6:	bd80      	pop	{r7, pc}

08000ba8 <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 8000bac:	bf00      	nop
}
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr

08000bb6 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 8000bb6:	b580      	push	{r7, lr}
 8000bb8:	b082      	sub	sp, #8
 8000bba:	af00      	add	r7, sp, #0
 8000bbc:	6078      	str	r0, [r7, #4]
 8000bbe:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8000bc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bc4:	f008 f996 	bl	8008ef4 <UTIL_SEQ_Run>

  return;
 8000bc8:	bf00      	nop
}
 8000bca:	3708      	adds	r7, #8
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}

08000bd0 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8000bd8:	2100      	movs	r1, #0
 8000bda:	2004      	movs	r0, #4
 8000bdc:	f008 faa8 	bl	8009130 <UTIL_SEQ_SetTask>
  return;
 8000be0:	bf00      	nop
}
 8000be2:	3708      	adds	r7, #8
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}

08000be8 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b082      	sub	sp, #8
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8000bf0:	2002      	movs	r0, #2
 8000bf2:	f008 fb09 	bl	8009208 <UTIL_SEQ_SetEvt>
  return;
 8000bf6:	bf00      	nop
}
 8000bf8:	3708      	adds	r7, #8
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}

08000bfe <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 8000bfe:	b580      	push	{r7, lr}
 8000c00:	b082      	sub	sp, #8
 8000c02:	af00      	add	r7, sp, #0
 8000c04:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8000c06:	2002      	movs	r0, #2
 8000c08:	f008 fb1e 	bl	8009248 <UTIL_SEQ_WaitEvt>
  return;
 8000c0c:	bf00      	nop
}
 8000c0e:	3708      	adds	r7, #8
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}

08000c14 <LL_EXTI_EnableIT_0_31>:
{
 8000c14:	b480      	push	{r7}
 8000c16:	b083      	sub	sp, #12
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8000c1c:	4b06      	ldr	r3, [pc, #24]	; (8000c38 <LL_EXTI_EnableIT_0_31+0x24>)
 8000c1e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8000c22:	4905      	ldr	r1, [pc, #20]	; (8000c38 <LL_EXTI_EnableIT_0_31+0x24>)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	4313      	orrs	r3, r2
 8000c28:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8000c2c:	bf00      	nop
 8000c2e:	370c      	adds	r7, #12
 8000c30:	46bd      	mov	sp, r7
 8000c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c36:	4770      	bx	lr
 8000c38:	58000800 	.word	0x58000800

08000c3c <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	b083      	sub	sp, #12
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8000c44:	4b05      	ldr	r3, [pc, #20]	; (8000c5c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000c46:	681a      	ldr	r2, [r3, #0]
 8000c48:	4904      	ldr	r1, [pc, #16]	; (8000c5c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	4313      	orrs	r3, r2
 8000c4e:	600b      	str	r3, [r1, #0]

}
 8000c50:	bf00      	nop
 8000c52:	370c      	adds	r7, #12
 8000c54:	46bd      	mov	sp, r7
 8000c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5a:	4770      	bx	lr
 8000c5c:	58000800 	.word	0x58000800

08000c60 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	b083      	sub	sp, #12
 8000c64:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000c66:	4b0d      	ldr	r3, [pc, #52]	; (8000c9c <ReadRtcSsrValue+0x3c>)
 8000c68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c6a:	b29b      	uxth	r3, r3
 8000c6c:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000c6e:	4b0b      	ldr	r3, [pc, #44]	; (8000c9c <ReadRtcSsrValue+0x3c>)
 8000c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c72:	b29b      	uxth	r3, r3
 8000c74:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 8000c76:	e005      	b.n	8000c84 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000c7c:	4b07      	ldr	r3, [pc, #28]	; (8000c9c <ReadRtcSsrValue+0x3c>)
 8000c7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c80:	b29b      	uxth	r3, r3
 8000c82:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8000c84:	687a      	ldr	r2, [r7, #4]
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	429a      	cmp	r2, r3
 8000c8a:	d1f5      	bne.n	8000c78 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8000c8c:	683b      	ldr	r3, [r7, #0]
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	370c      	adds	r7, #12
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop
 8000c9c:	40002800 	.word	0x40002800

08000ca0 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b085      	sub	sp, #20
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	460a      	mov	r2, r1
 8000caa:	71fb      	strb	r3, [r7, #7]
 8000cac:	4613      	mov	r3, r2
 8000cae:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8000cb0:	79ba      	ldrb	r2, [r7, #6]
 8000cb2:	491d      	ldr	r1, [pc, #116]	; (8000d28 <LinkTimerAfter+0x88>)
 8000cb4:	4613      	mov	r3, r2
 8000cb6:	005b      	lsls	r3, r3, #1
 8000cb8:	4413      	add	r3, r2
 8000cba:	00db      	lsls	r3, r3, #3
 8000cbc:	440b      	add	r3, r1
 8000cbe:	3315      	adds	r3, #21
 8000cc0:	781b      	ldrb	r3, [r3, #0]
 8000cc2:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000cc4:	7bfb      	ldrb	r3, [r7, #15]
 8000cc6:	2b06      	cmp	r3, #6
 8000cc8:	d009      	beq.n	8000cde <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8000cca:	7bfa      	ldrb	r2, [r7, #15]
 8000ccc:	4916      	ldr	r1, [pc, #88]	; (8000d28 <LinkTimerAfter+0x88>)
 8000cce:	4613      	mov	r3, r2
 8000cd0:	005b      	lsls	r3, r3, #1
 8000cd2:	4413      	add	r3, r2
 8000cd4:	00db      	lsls	r3, r3, #3
 8000cd6:	440b      	add	r3, r1
 8000cd8:	3314      	adds	r3, #20
 8000cda:	79fa      	ldrb	r2, [r7, #7]
 8000cdc:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8000cde:	79fa      	ldrb	r2, [r7, #7]
 8000ce0:	4911      	ldr	r1, [pc, #68]	; (8000d28 <LinkTimerAfter+0x88>)
 8000ce2:	4613      	mov	r3, r2
 8000ce4:	005b      	lsls	r3, r3, #1
 8000ce6:	4413      	add	r3, r2
 8000ce8:	00db      	lsls	r3, r3, #3
 8000cea:	440b      	add	r3, r1
 8000cec:	3315      	adds	r3, #21
 8000cee:	7bfa      	ldrb	r2, [r7, #15]
 8000cf0:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8000cf2:	79fa      	ldrb	r2, [r7, #7]
 8000cf4:	490c      	ldr	r1, [pc, #48]	; (8000d28 <LinkTimerAfter+0x88>)
 8000cf6:	4613      	mov	r3, r2
 8000cf8:	005b      	lsls	r3, r3, #1
 8000cfa:	4413      	add	r3, r2
 8000cfc:	00db      	lsls	r3, r3, #3
 8000cfe:	440b      	add	r3, r1
 8000d00:	3314      	adds	r3, #20
 8000d02:	79ba      	ldrb	r2, [r7, #6]
 8000d04:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8000d06:	79ba      	ldrb	r2, [r7, #6]
 8000d08:	4907      	ldr	r1, [pc, #28]	; (8000d28 <LinkTimerAfter+0x88>)
 8000d0a:	4613      	mov	r3, r2
 8000d0c:	005b      	lsls	r3, r3, #1
 8000d0e:	4413      	add	r3, r2
 8000d10:	00db      	lsls	r3, r3, #3
 8000d12:	440b      	add	r3, r1
 8000d14:	3315      	adds	r3, #21
 8000d16:	79fa      	ldrb	r2, [r7, #7]
 8000d18:	701a      	strb	r2, [r3, #0]

  return;
 8000d1a:	bf00      	nop
}
 8000d1c:	3714      	adds	r7, #20
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop
 8000d28:	20000978 	.word	0x20000978

08000d2c <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b085      	sub	sp, #20
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	4603      	mov	r3, r0
 8000d34:	460a      	mov	r2, r1
 8000d36:	71fb      	strb	r3, [r7, #7]
 8000d38:	4613      	mov	r3, r2
 8000d3a:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8000d3c:	4b29      	ldr	r3, [pc, #164]	; (8000de4 <LinkTimerBefore+0xb8>)
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	b2db      	uxtb	r3, r3
 8000d42:	79ba      	ldrb	r2, [r7, #6]
 8000d44:	429a      	cmp	r2, r3
 8000d46:	d032      	beq.n	8000dae <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8000d48:	79ba      	ldrb	r2, [r7, #6]
 8000d4a:	4927      	ldr	r1, [pc, #156]	; (8000de8 <LinkTimerBefore+0xbc>)
 8000d4c:	4613      	mov	r3, r2
 8000d4e:	005b      	lsls	r3, r3, #1
 8000d50:	4413      	add	r3, r2
 8000d52:	00db      	lsls	r3, r3, #3
 8000d54:	440b      	add	r3, r1
 8000d56:	3314      	adds	r3, #20
 8000d58:	781b      	ldrb	r3, [r3, #0]
 8000d5a:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8000d5c:	7bfa      	ldrb	r2, [r7, #15]
 8000d5e:	4922      	ldr	r1, [pc, #136]	; (8000de8 <LinkTimerBefore+0xbc>)
 8000d60:	4613      	mov	r3, r2
 8000d62:	005b      	lsls	r3, r3, #1
 8000d64:	4413      	add	r3, r2
 8000d66:	00db      	lsls	r3, r3, #3
 8000d68:	440b      	add	r3, r1
 8000d6a:	3315      	adds	r3, #21
 8000d6c:	79fa      	ldrb	r2, [r7, #7]
 8000d6e:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8000d70:	79fa      	ldrb	r2, [r7, #7]
 8000d72:	491d      	ldr	r1, [pc, #116]	; (8000de8 <LinkTimerBefore+0xbc>)
 8000d74:	4613      	mov	r3, r2
 8000d76:	005b      	lsls	r3, r3, #1
 8000d78:	4413      	add	r3, r2
 8000d7a:	00db      	lsls	r3, r3, #3
 8000d7c:	440b      	add	r3, r1
 8000d7e:	3315      	adds	r3, #21
 8000d80:	79ba      	ldrb	r2, [r7, #6]
 8000d82:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8000d84:	79fa      	ldrb	r2, [r7, #7]
 8000d86:	4918      	ldr	r1, [pc, #96]	; (8000de8 <LinkTimerBefore+0xbc>)
 8000d88:	4613      	mov	r3, r2
 8000d8a:	005b      	lsls	r3, r3, #1
 8000d8c:	4413      	add	r3, r2
 8000d8e:	00db      	lsls	r3, r3, #3
 8000d90:	440b      	add	r3, r1
 8000d92:	3314      	adds	r3, #20
 8000d94:	7bfa      	ldrb	r2, [r7, #15]
 8000d96:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000d98:	79ba      	ldrb	r2, [r7, #6]
 8000d9a:	4913      	ldr	r1, [pc, #76]	; (8000de8 <LinkTimerBefore+0xbc>)
 8000d9c:	4613      	mov	r3, r2
 8000d9e:	005b      	lsls	r3, r3, #1
 8000da0:	4413      	add	r3, r2
 8000da2:	00db      	lsls	r3, r3, #3
 8000da4:	440b      	add	r3, r1
 8000da6:	3314      	adds	r3, #20
 8000da8:	79fa      	ldrb	r2, [r7, #7]
 8000daa:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8000dac:	e014      	b.n	8000dd8 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8000dae:	79fa      	ldrb	r2, [r7, #7]
 8000db0:	490d      	ldr	r1, [pc, #52]	; (8000de8 <LinkTimerBefore+0xbc>)
 8000db2:	4613      	mov	r3, r2
 8000db4:	005b      	lsls	r3, r3, #1
 8000db6:	4413      	add	r3, r2
 8000db8:	00db      	lsls	r3, r3, #3
 8000dba:	440b      	add	r3, r1
 8000dbc:	3315      	adds	r3, #21
 8000dbe:	79ba      	ldrb	r2, [r7, #6]
 8000dc0:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000dc2:	79ba      	ldrb	r2, [r7, #6]
 8000dc4:	4908      	ldr	r1, [pc, #32]	; (8000de8 <LinkTimerBefore+0xbc>)
 8000dc6:	4613      	mov	r3, r2
 8000dc8:	005b      	lsls	r3, r3, #1
 8000dca:	4413      	add	r3, r2
 8000dcc:	00db      	lsls	r3, r3, #3
 8000dce:	440b      	add	r3, r1
 8000dd0:	3314      	adds	r3, #20
 8000dd2:	79fa      	ldrb	r2, [r7, #7]
 8000dd4:	701a      	strb	r2, [r3, #0]
  return;
 8000dd6:	bf00      	nop
}
 8000dd8:	3714      	adds	r7, #20
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	20000a08 	.word	0x20000a08
 8000de8:	20000978 	.word	0x20000978

08000dec <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b084      	sub	sp, #16
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	4603      	mov	r3, r0
 8000df4:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000df6:	4b4e      	ldr	r3, [pc, #312]	; (8000f30 <linkTimer+0x144>)
 8000df8:	781b      	ldrb	r3, [r3, #0]
 8000dfa:	b2db      	uxtb	r3, r3
 8000dfc:	2b06      	cmp	r3, #6
 8000dfe:	d118      	bne.n	8000e32 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000e00:	4b4b      	ldr	r3, [pc, #300]	; (8000f30 <linkTimer+0x144>)
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	b2da      	uxtb	r2, r3
 8000e06:	4b4b      	ldr	r3, [pc, #300]	; (8000f34 <linkTimer+0x148>)
 8000e08:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8000e0a:	4a49      	ldr	r2, [pc, #292]	; (8000f30 <linkTimer+0x144>)
 8000e0c:	79fb      	ldrb	r3, [r7, #7]
 8000e0e:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8000e10:	79fa      	ldrb	r2, [r7, #7]
 8000e12:	4949      	ldr	r1, [pc, #292]	; (8000f38 <linkTimer+0x14c>)
 8000e14:	4613      	mov	r3, r2
 8000e16:	005b      	lsls	r3, r3, #1
 8000e18:	4413      	add	r3, r2
 8000e1a:	00db      	lsls	r3, r3, #3
 8000e1c:	440b      	add	r3, r1
 8000e1e:	3315      	adds	r3, #21
 8000e20:	2206      	movs	r2, #6
 8000e22:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000e24:	4b45      	ldr	r3, [pc, #276]	; (8000f3c <linkTimer+0x150>)
 8000e26:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e2a:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	81fb      	strh	r3, [r7, #14]
 8000e30:	e078      	b.n	8000f24 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8000e32:	f000 f909 	bl	8001048 <ReturnTimeElapsed>
 8000e36:	4603      	mov	r3, r0
 8000e38:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8000e3a:	79fa      	ldrb	r2, [r7, #7]
 8000e3c:	493e      	ldr	r1, [pc, #248]	; (8000f38 <linkTimer+0x14c>)
 8000e3e:	4613      	mov	r3, r2
 8000e40:	005b      	lsls	r3, r3, #1
 8000e42:	4413      	add	r3, r2
 8000e44:	00db      	lsls	r3, r3, #3
 8000e46:	440b      	add	r3, r1
 8000e48:	3308      	adds	r3, #8
 8000e4a:	6819      	ldr	r1, [r3, #0]
 8000e4c:	89fb      	ldrh	r3, [r7, #14]
 8000e4e:	79fa      	ldrb	r2, [r7, #7]
 8000e50:	4419      	add	r1, r3
 8000e52:	4839      	ldr	r0, [pc, #228]	; (8000f38 <linkTimer+0x14c>)
 8000e54:	4613      	mov	r3, r2
 8000e56:	005b      	lsls	r3, r3, #1
 8000e58:	4413      	add	r3, r2
 8000e5a:	00db      	lsls	r3, r3, #3
 8000e5c:	4403      	add	r3, r0
 8000e5e:	3308      	adds	r3, #8
 8000e60:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8000e62:	79fa      	ldrb	r2, [r7, #7]
 8000e64:	4934      	ldr	r1, [pc, #208]	; (8000f38 <linkTimer+0x14c>)
 8000e66:	4613      	mov	r3, r2
 8000e68:	005b      	lsls	r3, r3, #1
 8000e6a:	4413      	add	r3, r2
 8000e6c:	00db      	lsls	r3, r3, #3
 8000e6e:	440b      	add	r3, r1
 8000e70:	3308      	adds	r3, #8
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8000e76:	4b2e      	ldr	r3, [pc, #184]	; (8000f30 <linkTimer+0x144>)
 8000e78:	781b      	ldrb	r3, [r3, #0]
 8000e7a:	b2db      	uxtb	r3, r3
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	4a2e      	ldr	r2, [pc, #184]	; (8000f38 <linkTimer+0x14c>)
 8000e80:	460b      	mov	r3, r1
 8000e82:	005b      	lsls	r3, r3, #1
 8000e84:	440b      	add	r3, r1
 8000e86:	00db      	lsls	r3, r3, #3
 8000e88:	4413      	add	r3, r2
 8000e8a:	3308      	adds	r3, #8
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	68ba      	ldr	r2, [r7, #8]
 8000e90:	429a      	cmp	r2, r3
 8000e92:	d337      	bcc.n	8000f04 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8000e94:	4b26      	ldr	r3, [pc, #152]	; (8000f30 <linkTimer+0x144>)
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8000e9a:	7b7a      	ldrb	r2, [r7, #13]
 8000e9c:	4926      	ldr	r1, [pc, #152]	; (8000f38 <linkTimer+0x14c>)
 8000e9e:	4613      	mov	r3, r2
 8000ea0:	005b      	lsls	r3, r3, #1
 8000ea2:	4413      	add	r3, r2
 8000ea4:	00db      	lsls	r3, r3, #3
 8000ea6:	440b      	add	r3, r1
 8000ea8:	3315      	adds	r3, #21
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000eae:	e013      	b.n	8000ed8 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8000eb0:	7b7a      	ldrb	r2, [r7, #13]
 8000eb2:	4921      	ldr	r1, [pc, #132]	; (8000f38 <linkTimer+0x14c>)
 8000eb4:	4613      	mov	r3, r2
 8000eb6:	005b      	lsls	r3, r3, #1
 8000eb8:	4413      	add	r3, r2
 8000eba:	00db      	lsls	r3, r3, #3
 8000ebc:	440b      	add	r3, r1
 8000ebe:	3315      	adds	r3, #21
 8000ec0:	781b      	ldrb	r3, [r3, #0]
 8000ec2:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8000ec4:	7b7a      	ldrb	r2, [r7, #13]
 8000ec6:	491c      	ldr	r1, [pc, #112]	; (8000f38 <linkTimer+0x14c>)
 8000ec8:	4613      	mov	r3, r2
 8000eca:	005b      	lsls	r3, r3, #1
 8000ecc:	4413      	add	r3, r2
 8000ece:	00db      	lsls	r3, r3, #3
 8000ed0:	440b      	add	r3, r1
 8000ed2:	3315      	adds	r3, #21
 8000ed4:	781b      	ldrb	r3, [r3, #0]
 8000ed6:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000ed8:	7b3b      	ldrb	r3, [r7, #12]
 8000eda:	2b06      	cmp	r3, #6
 8000edc:	d00b      	beq.n	8000ef6 <linkTimer+0x10a>
 8000ede:	7b3a      	ldrb	r2, [r7, #12]
 8000ee0:	4915      	ldr	r1, [pc, #84]	; (8000f38 <linkTimer+0x14c>)
 8000ee2:	4613      	mov	r3, r2
 8000ee4:	005b      	lsls	r3, r3, #1
 8000ee6:	4413      	add	r3, r2
 8000ee8:	00db      	lsls	r3, r3, #3
 8000eea:	440b      	add	r3, r1
 8000eec:	3308      	adds	r3, #8
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	68ba      	ldr	r2, [r7, #8]
 8000ef2:	429a      	cmp	r2, r3
 8000ef4:	d2dc      	bcs.n	8000eb0 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8000ef6:	7b7a      	ldrb	r2, [r7, #13]
 8000ef8:	79fb      	ldrb	r3, [r7, #7]
 8000efa:	4611      	mov	r1, r2
 8000efc:	4618      	mov	r0, r3
 8000efe:	f7ff fecf 	bl	8000ca0 <LinkTimerAfter>
 8000f02:	e00f      	b.n	8000f24 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8000f04:	4b0a      	ldr	r3, [pc, #40]	; (8000f30 <linkTimer+0x144>)
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	b2da      	uxtb	r2, r3
 8000f0a:	79fb      	ldrb	r3, [r7, #7]
 8000f0c:	4611      	mov	r1, r2
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f7ff ff0c 	bl	8000d2c <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8000f14:	4b06      	ldr	r3, [pc, #24]	; (8000f30 <linkTimer+0x144>)
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	b2da      	uxtb	r2, r3
 8000f1a:	4b06      	ldr	r3, [pc, #24]	; (8000f34 <linkTimer+0x148>)
 8000f1c:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8000f1e:	4a04      	ldr	r2, [pc, #16]	; (8000f30 <linkTimer+0x144>)
 8000f20:	79fb      	ldrb	r3, [r7, #7]
 8000f22:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8000f24:	89fb      	ldrh	r3, [r7, #14]
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	3710      	adds	r7, #16
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	20000a08 	.word	0x20000a08
 8000f34:	20000a09 	.word	0x20000a09
 8000f38:	20000978 	.word	0x20000978
 8000f3c:	20000a0c 	.word	0x20000a0c

08000f40 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b085      	sub	sp, #20
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	4603      	mov	r3, r0
 8000f48:	460a      	mov	r2, r1
 8000f4a:	71fb      	strb	r3, [r7, #7]
 8000f4c:	4613      	mov	r3, r2
 8000f4e:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8000f50:	4b39      	ldr	r3, [pc, #228]	; (8001038 <UnlinkTimer+0xf8>)
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	b2db      	uxtb	r3, r3
 8000f56:	79fa      	ldrb	r2, [r7, #7]
 8000f58:	429a      	cmp	r2, r3
 8000f5a:	d111      	bne.n	8000f80 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000f5c:	4b36      	ldr	r3, [pc, #216]	; (8001038 <UnlinkTimer+0xf8>)
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	b2da      	uxtb	r2, r3
 8000f62:	4b36      	ldr	r3, [pc, #216]	; (800103c <UnlinkTimer+0xfc>)
 8000f64:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8000f66:	79fa      	ldrb	r2, [r7, #7]
 8000f68:	4935      	ldr	r1, [pc, #212]	; (8001040 <UnlinkTimer+0x100>)
 8000f6a:	4613      	mov	r3, r2
 8000f6c:	005b      	lsls	r3, r3, #1
 8000f6e:	4413      	add	r3, r2
 8000f70:	00db      	lsls	r3, r3, #3
 8000f72:	440b      	add	r3, r1
 8000f74:	3315      	adds	r3, #21
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	b2da      	uxtb	r2, r3
 8000f7a:	4b2f      	ldr	r3, [pc, #188]	; (8001038 <UnlinkTimer+0xf8>)
 8000f7c:	701a      	strb	r2, [r3, #0]
 8000f7e:	e03e      	b.n	8000ffe <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8000f80:	79fa      	ldrb	r2, [r7, #7]
 8000f82:	492f      	ldr	r1, [pc, #188]	; (8001040 <UnlinkTimer+0x100>)
 8000f84:	4613      	mov	r3, r2
 8000f86:	005b      	lsls	r3, r3, #1
 8000f88:	4413      	add	r3, r2
 8000f8a:	00db      	lsls	r3, r3, #3
 8000f8c:	440b      	add	r3, r1
 8000f8e:	3314      	adds	r3, #20
 8000f90:	781b      	ldrb	r3, [r3, #0]
 8000f92:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8000f94:	79fa      	ldrb	r2, [r7, #7]
 8000f96:	492a      	ldr	r1, [pc, #168]	; (8001040 <UnlinkTimer+0x100>)
 8000f98:	4613      	mov	r3, r2
 8000f9a:	005b      	lsls	r3, r3, #1
 8000f9c:	4413      	add	r3, r2
 8000f9e:	00db      	lsls	r3, r3, #3
 8000fa0:	440b      	add	r3, r1
 8000fa2:	3315      	adds	r3, #21
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8000fa8:	79f9      	ldrb	r1, [r7, #7]
 8000faa:	7bfa      	ldrb	r2, [r7, #15]
 8000fac:	4824      	ldr	r0, [pc, #144]	; (8001040 <UnlinkTimer+0x100>)
 8000fae:	460b      	mov	r3, r1
 8000fb0:	005b      	lsls	r3, r3, #1
 8000fb2:	440b      	add	r3, r1
 8000fb4:	00db      	lsls	r3, r3, #3
 8000fb6:	4403      	add	r3, r0
 8000fb8:	3315      	adds	r3, #21
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	b2d8      	uxtb	r0, r3
 8000fbe:	4920      	ldr	r1, [pc, #128]	; (8001040 <UnlinkTimer+0x100>)
 8000fc0:	4613      	mov	r3, r2
 8000fc2:	005b      	lsls	r3, r3, #1
 8000fc4:	4413      	add	r3, r2
 8000fc6:	00db      	lsls	r3, r3, #3
 8000fc8:	440b      	add	r3, r1
 8000fca:	3315      	adds	r3, #21
 8000fcc:	4602      	mov	r2, r0
 8000fce:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000fd0:	7bbb      	ldrb	r3, [r7, #14]
 8000fd2:	2b06      	cmp	r3, #6
 8000fd4:	d013      	beq.n	8000ffe <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8000fd6:	79f9      	ldrb	r1, [r7, #7]
 8000fd8:	7bba      	ldrb	r2, [r7, #14]
 8000fda:	4819      	ldr	r0, [pc, #100]	; (8001040 <UnlinkTimer+0x100>)
 8000fdc:	460b      	mov	r3, r1
 8000fde:	005b      	lsls	r3, r3, #1
 8000fe0:	440b      	add	r3, r1
 8000fe2:	00db      	lsls	r3, r3, #3
 8000fe4:	4403      	add	r3, r0
 8000fe6:	3314      	adds	r3, #20
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	b2d8      	uxtb	r0, r3
 8000fec:	4914      	ldr	r1, [pc, #80]	; (8001040 <UnlinkTimer+0x100>)
 8000fee:	4613      	mov	r3, r2
 8000ff0:	005b      	lsls	r3, r3, #1
 8000ff2:	4413      	add	r3, r2
 8000ff4:	00db      	lsls	r3, r3, #3
 8000ff6:	440b      	add	r3, r1
 8000ff8:	3314      	adds	r3, #20
 8000ffa:	4602      	mov	r2, r0
 8000ffc:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8000ffe:	79fa      	ldrb	r2, [r7, #7]
 8001000:	490f      	ldr	r1, [pc, #60]	; (8001040 <UnlinkTimer+0x100>)
 8001002:	4613      	mov	r3, r2
 8001004:	005b      	lsls	r3, r3, #1
 8001006:	4413      	add	r3, r2
 8001008:	00db      	lsls	r3, r3, #3
 800100a:	440b      	add	r3, r1
 800100c:	330c      	adds	r3, #12
 800100e:	2201      	movs	r2, #1
 8001010:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8001012:	4b09      	ldr	r3, [pc, #36]	; (8001038 <UnlinkTimer+0xf8>)
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	b2db      	uxtb	r3, r3
 8001018:	2b06      	cmp	r3, #6
 800101a:	d107      	bne.n	800102c <UnlinkTimer+0xec>
 800101c:	79bb      	ldrb	r3, [r7, #6]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d104      	bne.n	800102c <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001022:	4b08      	ldr	r3, [pc, #32]	; (8001044 <UnlinkTimer+0x104>)
 8001024:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001028:	601a      	str	r2, [r3, #0]
  }

  return;
 800102a:	bf00      	nop
 800102c:	bf00      	nop
}
 800102e:	3714      	adds	r7, #20
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr
 8001038:	20000a08 	.word	0x20000a08
 800103c:	20000a09 	.word	0x20000a09
 8001040:	20000978 	.word	0x20000978
 8001044:	20000a0c 	.word	0x20000a0c

08001048 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 800104e:	4b1a      	ldr	r3, [pc, #104]	; (80010b8 <ReturnTimeElapsed+0x70>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001056:	d026      	beq.n	80010a6 <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8001058:	f7ff fe02 	bl	8000c60 <ReadRtcSsrValue>
 800105c:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 800105e:	4b16      	ldr	r3, [pc, #88]	; (80010b8 <ReturnTimeElapsed+0x70>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	687a      	ldr	r2, [r7, #4]
 8001064:	429a      	cmp	r2, r3
 8001066:	d805      	bhi.n	8001074 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8001068:	4b13      	ldr	r3, [pc, #76]	; (80010b8 <ReturnTimeElapsed+0x70>)
 800106a:	681a      	ldr	r2, [r3, #0]
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	1ad3      	subs	r3, r2, r3
 8001070:	607b      	str	r3, [r7, #4]
 8001072:	e00a      	b.n	800108a <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8001074:	4b11      	ldr	r3, [pc, #68]	; (80010bc <ReturnTimeElapsed+0x74>)
 8001076:	881b      	ldrh	r3, [r3, #0]
 8001078:	461a      	mov	r2, r3
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	1ad3      	subs	r3, r2, r3
 800107e:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8001080:	4b0d      	ldr	r3, [pc, #52]	; (80010b8 <ReturnTimeElapsed+0x70>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	683a      	ldr	r2, [r7, #0]
 8001086:	4413      	add	r3, r2
 8001088:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 800108a:	4b0d      	ldr	r3, [pc, #52]	; (80010c0 <ReturnTimeElapsed+0x78>)
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	461a      	mov	r2, r3
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	fb02 f303 	mul.w	r3, r2, r3
 8001096:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8001098:	4b0a      	ldr	r3, [pc, #40]	; (80010c4 <ReturnTimeElapsed+0x7c>)
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	461a      	mov	r2, r3
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	40d3      	lsrs	r3, r2
 80010a2:	607b      	str	r3, [r7, #4]
 80010a4:	e001      	b.n	80010aa <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 80010a6:	2300      	movs	r3, #0
 80010a8:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	b29b      	uxth	r3, r3
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	3708      	adds	r7, #8
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	20000a0c 	.word	0x20000a0c
 80010bc:	20000a14 	.word	0x20000a14
 80010c0:	20000a12 	.word	0x20000a12
 80010c4:	20000a11 	.word	0x20000a11

080010c8 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	4603      	mov	r3, r0
 80010d0:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 80010d2:	88fb      	ldrh	r3, [r7, #6]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d108      	bne.n	80010ea <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 80010d8:	f7ff fdc2 	bl	8000c60 <ReadRtcSsrValue>
 80010dc:	4603      	mov	r3, r0
 80010de:	4a21      	ldr	r2, [pc, #132]	; (8001164 <RestartWakeupCounter+0x9c>)
 80010e0:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 80010e2:	2003      	movs	r0, #3
 80010e4:	f001 fadb 	bl	800269e <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 80010e8:	e039      	b.n	800115e <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 80010ea:	88fb      	ldrh	r3, [r7, #6]
 80010ec:	2b01      	cmp	r3, #1
 80010ee:	d803      	bhi.n	80010f8 <RestartWakeupCounter+0x30>
 80010f0:	4b1d      	ldr	r3, [pc, #116]	; (8001168 <RestartWakeupCounter+0xa0>)
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	2b01      	cmp	r3, #1
 80010f6:	d002      	beq.n	80010fe <RestartWakeupCounter+0x36>
      Value -= 1;
 80010f8:	88fb      	ldrh	r3, [r7, #6]
 80010fa:	3b01      	subs	r3, #1
 80010fc:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 80010fe:	bf00      	nop
 8001100:	4b1a      	ldr	r3, [pc, #104]	; (800116c <RestartWakeupCounter+0xa4>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	68db      	ldr	r3, [r3, #12]
 8001106:	f003 0304 	and.w	r3, r3, #4
 800110a:	2b00      	cmp	r3, #0
 800110c:	d0f8      	beq.n	8001100 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 800110e:	4b17      	ldr	r3, [pc, #92]	; (800116c <RestartWakeupCounter+0xa4>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	68db      	ldr	r3, [r3, #12]
 8001114:	b2da      	uxtb	r2, r3
 8001116:	4b15      	ldr	r3, [pc, #84]	; (800116c <RestartWakeupCounter+0xa4>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800111e:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001120:	4b13      	ldr	r3, [pc, #76]	; (8001170 <RestartWakeupCounter+0xa8>)
 8001122:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001126:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001128:	2003      	movs	r0, #3
 800112a:	f001 fac6 	bl	80026ba <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 800112e:	4b11      	ldr	r3, [pc, #68]	; (8001174 <RestartWakeupCounter+0xac>)
 8001130:	695b      	ldr	r3, [r3, #20]
 8001132:	0c1b      	lsrs	r3, r3, #16
 8001134:	041b      	lsls	r3, r3, #16
 8001136:	88fa      	ldrh	r2, [r7, #6]
 8001138:	490e      	ldr	r1, [pc, #56]	; (8001174 <RestartWakeupCounter+0xac>)
 800113a:	4313      	orrs	r3, r2
 800113c:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 800113e:	f7ff fd8f 	bl	8000c60 <ReadRtcSsrValue>
 8001142:	4603      	mov	r3, r0
 8001144:	4a07      	ldr	r2, [pc, #28]	; (8001164 <RestartWakeupCounter+0x9c>)
 8001146:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 8001148:	4b08      	ldr	r3, [pc, #32]	; (800116c <RestartWakeupCounter+0xa4>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	689a      	ldr	r2, [r3, #8]
 800114e:	4b07      	ldr	r3, [pc, #28]	; (800116c <RestartWakeupCounter+0xa4>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001156:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8001158:	f3af 8000 	nop.w
  return ;
 800115c:	bf00      	nop
}
 800115e:	3708      	adds	r7, #8
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	20000a0c 	.word	0x20000a0c
 8001168:	20000a11 	.word	0x20000a11
 800116c:	20000aa8 	.word	0x20000aa8
 8001170:	58000800 	.word	0x58000800
 8001174:	40002800 	.word	0x40002800

08001178 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b084      	sub	sp, #16
 800117c:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 800117e:	4b45      	ldr	r3, [pc, #276]	; (8001294 <RescheduleTimerList+0x11c>)
 8001180:	689b      	ldr	r3, [r3, #8]
 8001182:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001186:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800118a:	d107      	bne.n	800119c <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 800118c:	bf00      	nop
 800118e:	4b42      	ldr	r3, [pc, #264]	; (8001298 <RescheduleTimerList+0x120>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	68db      	ldr	r3, [r3, #12]
 8001194:	f003 0304 	and.w	r3, r3, #4
 8001198:	2b00      	cmp	r3, #0
 800119a:	d1f8      	bne.n	800118e <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 800119c:	4b3e      	ldr	r3, [pc, #248]	; (8001298 <RescheduleTimerList+0x120>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	689a      	ldr	r2, [r3, #8]
 80011a2:	4b3d      	ldr	r3, [pc, #244]	; (8001298 <RescheduleTimerList+0x120>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80011aa:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 80011ac:	4b3b      	ldr	r3, [pc, #236]	; (800129c <RescheduleTimerList+0x124>)
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 80011b2:	7bfa      	ldrb	r2, [r7, #15]
 80011b4:	493a      	ldr	r1, [pc, #232]	; (80012a0 <RescheduleTimerList+0x128>)
 80011b6:	4613      	mov	r3, r2
 80011b8:	005b      	lsls	r3, r3, #1
 80011ba:	4413      	add	r3, r2
 80011bc:	00db      	lsls	r3, r3, #3
 80011be:	440b      	add	r3, r1
 80011c0:	3308      	adds	r3, #8
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 80011c6:	f7ff ff3f 	bl	8001048 <ReturnTimeElapsed>
 80011ca:	4603      	mov	r3, r0
 80011cc:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 80011ce:	88fb      	ldrh	r3, [r7, #6]
 80011d0:	68ba      	ldr	r2, [r7, #8]
 80011d2:	429a      	cmp	r2, r3
 80011d4:	d205      	bcs.n	80011e2 <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 80011d6:	2300      	movs	r3, #0
 80011d8:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80011da:	4b32      	ldr	r3, [pc, #200]	; (80012a4 <RescheduleTimerList+0x12c>)
 80011dc:	2201      	movs	r2, #1
 80011de:	701a      	strb	r2, [r3, #0]
 80011e0:	e04d      	b.n	800127e <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 80011e2:	88fb      	ldrh	r3, [r7, #6]
 80011e4:	4a30      	ldr	r2, [pc, #192]	; (80012a8 <RescheduleTimerList+0x130>)
 80011e6:	8812      	ldrh	r2, [r2, #0]
 80011e8:	b292      	uxth	r2, r2
 80011ea:	4413      	add	r3, r2
 80011ec:	461a      	mov	r2, r3
 80011ee:	68bb      	ldr	r3, [r7, #8]
 80011f0:	4293      	cmp	r3, r2
 80011f2:	d906      	bls.n	8001202 <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 80011f4:	4b2c      	ldr	r3, [pc, #176]	; (80012a8 <RescheduleTimerList+0x130>)
 80011f6:	881b      	ldrh	r3, [r3, #0]
 80011f8:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 80011fa:	4b2a      	ldr	r3, [pc, #168]	; (80012a4 <RescheduleTimerList+0x12c>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	701a      	strb	r2, [r3, #0]
 8001200:	e03d      	b.n	800127e <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8001202:	68bb      	ldr	r3, [r7, #8]
 8001204:	b29a      	uxth	r2, r3
 8001206:	88fb      	ldrh	r3, [r7, #6]
 8001208:	1ad3      	subs	r3, r2, r3
 800120a:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 800120c:	4b25      	ldr	r3, [pc, #148]	; (80012a4 <RescheduleTimerList+0x12c>)
 800120e:	2201      	movs	r2, #1
 8001210:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001212:	e034      	b.n	800127e <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8001214:	7bfa      	ldrb	r2, [r7, #15]
 8001216:	4922      	ldr	r1, [pc, #136]	; (80012a0 <RescheduleTimerList+0x128>)
 8001218:	4613      	mov	r3, r2
 800121a:	005b      	lsls	r3, r3, #1
 800121c:	4413      	add	r3, r2
 800121e:	00db      	lsls	r3, r3, #3
 8001220:	440b      	add	r3, r1
 8001222:	3308      	adds	r3, #8
 8001224:	681a      	ldr	r2, [r3, #0]
 8001226:	88fb      	ldrh	r3, [r7, #6]
 8001228:	429a      	cmp	r2, r3
 800122a:	d20a      	bcs.n	8001242 <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 800122c:	7bfa      	ldrb	r2, [r7, #15]
 800122e:	491c      	ldr	r1, [pc, #112]	; (80012a0 <RescheduleTimerList+0x128>)
 8001230:	4613      	mov	r3, r2
 8001232:	005b      	lsls	r3, r3, #1
 8001234:	4413      	add	r3, r2
 8001236:	00db      	lsls	r3, r3, #3
 8001238:	440b      	add	r3, r1
 800123a:	3308      	adds	r3, #8
 800123c:	2200      	movs	r2, #0
 800123e:	601a      	str	r2, [r3, #0]
 8001240:	e013      	b.n	800126a <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8001242:	7bfa      	ldrb	r2, [r7, #15]
 8001244:	4916      	ldr	r1, [pc, #88]	; (80012a0 <RescheduleTimerList+0x128>)
 8001246:	4613      	mov	r3, r2
 8001248:	005b      	lsls	r3, r3, #1
 800124a:	4413      	add	r3, r2
 800124c:	00db      	lsls	r3, r3, #3
 800124e:	440b      	add	r3, r1
 8001250:	3308      	adds	r3, #8
 8001252:	6819      	ldr	r1, [r3, #0]
 8001254:	88fb      	ldrh	r3, [r7, #6]
 8001256:	7bfa      	ldrb	r2, [r7, #15]
 8001258:	1ac9      	subs	r1, r1, r3
 800125a:	4811      	ldr	r0, [pc, #68]	; (80012a0 <RescheduleTimerList+0x128>)
 800125c:	4613      	mov	r3, r2
 800125e:	005b      	lsls	r3, r3, #1
 8001260:	4413      	add	r3, r2
 8001262:	00db      	lsls	r3, r3, #3
 8001264:	4403      	add	r3, r0
 8001266:	3308      	adds	r3, #8
 8001268:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 800126a:	7bfa      	ldrb	r2, [r7, #15]
 800126c:	490c      	ldr	r1, [pc, #48]	; (80012a0 <RescheduleTimerList+0x128>)
 800126e:	4613      	mov	r3, r2
 8001270:	005b      	lsls	r3, r3, #1
 8001272:	4413      	add	r3, r2
 8001274:	00db      	lsls	r3, r3, #3
 8001276:	440b      	add	r3, r1
 8001278:	3315      	adds	r3, #21
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800127e:	7bfb      	ldrb	r3, [r7, #15]
 8001280:	2b06      	cmp	r3, #6
 8001282:	d1c7      	bne.n	8001214 <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8001284:	89bb      	ldrh	r3, [r7, #12]
 8001286:	4618      	mov	r0, r3
 8001288:	f7ff ff1e 	bl	80010c8 <RestartWakeupCounter>

  return ;
 800128c:	bf00      	nop
}
 800128e:	3710      	adds	r7, #16
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	40002800 	.word	0x40002800
 8001298:	20000aa8 	.word	0x20000aa8
 800129c:	20000a08 	.word	0x20000a08
 80012a0:	20000978 	.word	0x20000978
 80012a4:	20000a10 	.word	0x20000a10
 80012a8:	20000a16 	.word	0x20000a16

080012ac <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b08a      	sub	sp, #40	; 0x28
 80012b0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80012b2:	f3ef 8310 	mrs	r3, PRIMASK
 80012b6:	617b      	str	r3, [r7, #20]
  return(result);
 80012b8:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80012ba:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 80012bc:	b672      	cpsid	i
}
 80012be:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80012c0:	4b59      	ldr	r3, [pc, #356]	; (8001428 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	22ca      	movs	r2, #202	; 0xca
 80012c6:	625a      	str	r2, [r3, #36]	; 0x24
 80012c8:	4b57      	ldr	r3, [pc, #348]	; (8001428 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	2253      	movs	r2, #83	; 0x53
 80012ce:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 80012d0:	4b55      	ldr	r3, [pc, #340]	; (8001428 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	689a      	ldr	r2, [r3, #8]
 80012d6:	4b54      	ldr	r3, [pc, #336]	; (8001428 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80012de:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 80012e0:	4b52      	ldr	r3, [pc, #328]	; (800142c <HW_TS_RTC_Wakeup_Handler+0x180>)
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 80012e8:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80012ec:	4950      	ldr	r1, [pc, #320]	; (8001430 <HW_TS_RTC_Wakeup_Handler+0x184>)
 80012ee:	4613      	mov	r3, r2
 80012f0:	005b      	lsls	r3, r3, #1
 80012f2:	4413      	add	r3, r2
 80012f4:	00db      	lsls	r3, r3, #3
 80012f6:	440b      	add	r3, r1
 80012f8:	330c      	adds	r3, #12
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	b2db      	uxtb	r3, r3
 80012fe:	2b02      	cmp	r3, #2
 8001300:	d16e      	bne.n	80013e0 <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8001302:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001306:	494a      	ldr	r1, [pc, #296]	; (8001430 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001308:	4613      	mov	r3, r2
 800130a:	005b      	lsls	r3, r3, #1
 800130c:	4413      	add	r3, r2
 800130e:	00db      	lsls	r3, r3, #3
 8001310:	440b      	add	r3, r1
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8001316:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800131a:	4945      	ldr	r1, [pc, #276]	; (8001430 <HW_TS_RTC_Wakeup_Handler+0x184>)
 800131c:	4613      	mov	r3, r2
 800131e:	005b      	lsls	r3, r3, #1
 8001320:	4413      	add	r3, r2
 8001322:	00db      	lsls	r3, r3, #3
 8001324:	440b      	add	r3, r1
 8001326:	3310      	adds	r3, #16
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 800132c:	4b41      	ldr	r3, [pc, #260]	; (8001434 <HW_TS_RTC_Wakeup_Handler+0x188>)
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	b2db      	uxtb	r3, r3
 8001332:	2b00      	cmp	r3, #0
 8001334:	d04c      	beq.n	80013d0 <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8001336:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800133a:	493d      	ldr	r1, [pc, #244]	; (8001430 <HW_TS_RTC_Wakeup_Handler+0x184>)
 800133c:	4613      	mov	r3, r2
 800133e:	005b      	lsls	r3, r3, #1
 8001340:	4413      	add	r3, r2
 8001342:	00db      	lsls	r3, r3, #3
 8001344:	440b      	add	r3, r1
 8001346:	330d      	adds	r3, #13
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	b2db      	uxtb	r3, r3
 800134c:	2b01      	cmp	r3, #1
 800134e:	d124      	bne.n	800139a <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8001350:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001354:	2101      	movs	r1, #1
 8001356:	4618      	mov	r0, r3
 8001358:	f7ff fdf2 	bl	8000f40 <UnlinkTimer>
 800135c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800135e:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001360:	693b      	ldr	r3, [r7, #16]
 8001362:	f383 8810 	msr	PRIMASK, r3
}
 8001366:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8001368:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800136c:	4930      	ldr	r1, [pc, #192]	; (8001430 <HW_TS_RTC_Wakeup_Handler+0x184>)
 800136e:	4613      	mov	r3, r2
 8001370:	005b      	lsls	r3, r3, #1
 8001372:	4413      	add	r3, r2
 8001374:	00db      	lsls	r3, r3, #3
 8001376:	440b      	add	r3, r1
 8001378:	3304      	adds	r3, #4
 800137a:	681a      	ldr	r2, [r3, #0]
 800137c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001380:	4611      	mov	r1, r2
 8001382:	4618      	mov	r0, r3
 8001384:	f000 f9b8 	bl	80016f8 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001388:	4b27      	ldr	r3, [pc, #156]	; (8001428 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	22ca      	movs	r2, #202	; 0xca
 800138e:	625a      	str	r2, [r3, #36]	; 0x24
 8001390:	4b25      	ldr	r3, [pc, #148]	; (8001428 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	2253      	movs	r2, #83	; 0x53
 8001396:	625a      	str	r2, [r3, #36]	; 0x24
 8001398:	e012      	b.n	80013c0 <HW_TS_RTC_Wakeup_Handler+0x114>
 800139a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800139c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	f383 8810 	msr	PRIMASK, r3
}
 80013a4:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 80013a6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80013aa:	4618      	mov	r0, r3
 80013ac:	f000 f920 	bl	80015f0 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80013b0:	4b1d      	ldr	r3, [pc, #116]	; (8001428 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	22ca      	movs	r2, #202	; 0xca
 80013b6:	625a      	str	r2, [r3, #36]	; 0x24
 80013b8:	4b1b      	ldr	r3, [pc, #108]	; (8001428 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	2253      	movs	r2, #83	; 0x53
 80013be:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 80013c0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80013c4:	69fa      	ldr	r2, [r7, #28]
 80013c6:	4619      	mov	r1, r3
 80013c8:	69b8      	ldr	r0, [r7, #24]
 80013ca:	f000 fa1b 	bl	8001804 <HW_TS_RTC_Int_AppNot>
 80013ce:	e022      	b.n	8001416 <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 80013d0:	f7ff fed2 	bl	8001178 <RescheduleTimerList>
 80013d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013d6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80013d8:	68bb      	ldr	r3, [r7, #8]
 80013da:	f383 8810 	msr	PRIMASK, r3
}
 80013de:	e01a      	b.n	8001416 <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 80013e0:	bf00      	nop
 80013e2:	4b11      	ldr	r3, [pc, #68]	; (8001428 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	68db      	ldr	r3, [r3, #12]
 80013e8:	f003 0304 	and.w	r3, r3, #4
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d0f8      	beq.n	80013e2 <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80013f0:	4b0d      	ldr	r3, [pc, #52]	; (8001428 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	68db      	ldr	r3, [r3, #12]
 80013f6:	b2da      	uxtb	r2, r3
 80013f8:	4b0b      	ldr	r3, [pc, #44]	; (8001428 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001400:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001402:	4b0d      	ldr	r3, [pc, #52]	; (8001438 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001404:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001408:	60da      	str	r2, [r3, #12]
 800140a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800140c:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	f383 8810 	msr	PRIMASK, r3
}
 8001414:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001416:	4b04      	ldr	r3, [pc, #16]	; (8001428 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	22ff      	movs	r2, #255	; 0xff
 800141c:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 800141e:	bf00      	nop
}
 8001420:	3728      	adds	r7, #40	; 0x28
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	20000aa8 	.word	0x20000aa8
 800142c:	20000a08 	.word	0x20000a08
 8001430:	20000978 	.word	0x20000978
 8001434:	20000a10 	.word	0x20000a10
 8001438:	58000800 	.word	0x58000800

0800143c <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b088      	sub	sp, #32
 8001440:	af00      	add	r7, sp, #0
 8001442:	4603      	mov	r3, r0
 8001444:	6039      	str	r1, [r7, #0]
 8001446:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001448:	4b5e      	ldr	r3, [pc, #376]	; (80015c4 <HW_TS_Init+0x188>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	22ca      	movs	r2, #202	; 0xca
 800144e:	625a      	str	r2, [r3, #36]	; 0x24
 8001450:	4b5c      	ldr	r3, [pc, #368]	; (80015c4 <HW_TS_Init+0x188>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	2253      	movs	r2, #83	; 0x53
 8001456:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8001458:	4b5b      	ldr	r3, [pc, #364]	; (80015c8 <HW_TS_Init+0x18c>)
 800145a:	689b      	ldr	r3, [r3, #8]
 800145c:	4a5a      	ldr	r2, [pc, #360]	; (80015c8 <HW_TS_Init+0x18c>)
 800145e:	f043 0320 	orr.w	r3, r3, #32
 8001462:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8001464:	4b58      	ldr	r3, [pc, #352]	; (80015c8 <HW_TS_Init+0x18c>)
 8001466:	689b      	ldr	r3, [r3, #8]
 8001468:	b2db      	uxtb	r3, r3
 800146a:	f003 0307 	and.w	r3, r3, #7
 800146e:	b2db      	uxtb	r3, r3
 8001470:	f1c3 0304 	rsb	r3, r3, #4
 8001474:	b2da      	uxtb	r2, r3
 8001476:	4b55      	ldr	r3, [pc, #340]	; (80015cc <HW_TS_Init+0x190>)
 8001478:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 800147a:	4b53      	ldr	r3, [pc, #332]	; (80015c8 <HW_TS_Init+0x18c>)
 800147c:	691b      	ldr	r3, [r3, #16]
 800147e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001482:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 8001486:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001488:	693a      	ldr	r2, [r7, #16]
 800148a:	fa92 f2a2 	rbit	r2, r2
 800148e:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001490:	68fa      	ldr	r2, [r7, #12]
 8001492:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001494:	697a      	ldr	r2, [r7, #20]
 8001496:	2a00      	cmp	r2, #0
 8001498:	d101      	bne.n	800149e <HW_TS_Init+0x62>
  {
    return 32U;
 800149a:	2220      	movs	r2, #32
 800149c:	e003      	b.n	80014a6 <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 800149e:	697a      	ldr	r2, [r7, #20]
 80014a0:	fab2 f282 	clz	r2, r2
 80014a4:	b2d2      	uxtb	r2, r2
 80014a6:	40d3      	lsrs	r3, r2
 80014a8:	b2db      	uxtb	r3, r3
 80014aa:	3301      	adds	r3, #1
 80014ac:	b2da      	uxtb	r2, r3
 80014ae:	4b48      	ldr	r3, [pc, #288]	; (80015d0 <HW_TS_Init+0x194>)
 80014b0:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 80014b2:	4b45      	ldr	r3, [pc, #276]	; (80015c8 <HW_TS_Init+0x18c>)
 80014b4:	691b      	ldr	r3, [r3, #16]
 80014b6:	b29b      	uxth	r3, r3
 80014b8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80014bc:	b29b      	uxth	r3, r3
 80014be:	3301      	adds	r3, #1
 80014c0:	b29a      	uxth	r2, r3
 80014c2:	4b44      	ldr	r3, [pc, #272]	; (80015d4 <HW_TS_Init+0x198>)
 80014c4:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 80014c6:	4b43      	ldr	r3, [pc, #268]	; (80015d4 <HW_TS_Init+0x198>)
 80014c8:	881b      	ldrh	r3, [r3, #0]
 80014ca:	3b01      	subs	r3, #1
 80014cc:	4a40      	ldr	r2, [pc, #256]	; (80015d0 <HW_TS_Init+0x194>)
 80014ce:	7812      	ldrb	r2, [r2, #0]
 80014d0:	fb02 f303 	mul.w	r3, r2, r3
 80014d4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80014d8:	4a3c      	ldr	r2, [pc, #240]	; (80015cc <HW_TS_Init+0x190>)
 80014da:	7812      	ldrb	r2, [r2, #0]
 80014dc:	40d3      	lsrs	r3, r2
 80014de:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 80014e0:	69bb      	ldr	r3, [r7, #24]
 80014e2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d904      	bls.n	80014f4 <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 80014ea:	4b3b      	ldr	r3, [pc, #236]	; (80015d8 <HW_TS_Init+0x19c>)
 80014ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014f0:	801a      	strh	r2, [r3, #0]
 80014f2:	e003      	b.n	80014fc <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 80014f4:	69bb      	ldr	r3, [r7, #24]
 80014f6:	b29a      	uxth	r2, r3
 80014f8:	4b37      	ldr	r3, [pc, #220]	; (80015d8 <HW_TS_Init+0x19c>)
 80014fa:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80014fc:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001500:	f7ff fb9c 	bl	8000c3c <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8001504:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001508:	f7ff fb84 	bl	8000c14 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 800150c:	79fb      	ldrb	r3, [r7, #7]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d13d      	bne.n	800158e <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001512:	4b32      	ldr	r3, [pc, #200]	; (80015dc <HW_TS_Init+0x1a0>)
 8001514:	2201      	movs	r2, #1
 8001516:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001518:	4b31      	ldr	r3, [pc, #196]	; (80015e0 <HW_TS_Init+0x1a4>)
 800151a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800151e:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8001520:	2300      	movs	r3, #0
 8001522:	77fb      	strb	r3, [r7, #31]
 8001524:	e00c      	b.n	8001540 <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8001526:	7ffa      	ldrb	r2, [r7, #31]
 8001528:	492e      	ldr	r1, [pc, #184]	; (80015e4 <HW_TS_Init+0x1a8>)
 800152a:	4613      	mov	r3, r2
 800152c:	005b      	lsls	r3, r3, #1
 800152e:	4413      	add	r3, r2
 8001530:	00db      	lsls	r3, r3, #3
 8001532:	440b      	add	r3, r1
 8001534:	330c      	adds	r3, #12
 8001536:	2200      	movs	r2, #0
 8001538:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 800153a:	7ffb      	ldrb	r3, [r7, #31]
 800153c:	3301      	adds	r3, #1
 800153e:	77fb      	strb	r3, [r7, #31]
 8001540:	7ffb      	ldrb	r3, [r7, #31]
 8001542:	2b05      	cmp	r3, #5
 8001544:	d9ef      	bls.n	8001526 <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8001546:	4b28      	ldr	r3, [pc, #160]	; (80015e8 <HW_TS_Init+0x1ac>)
 8001548:	2206      	movs	r2, #6
 800154a:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 800154c:	4b1d      	ldr	r3, [pc, #116]	; (80015c4 <HW_TS_Init+0x188>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	689a      	ldr	r2, [r3, #8]
 8001552:	4b1c      	ldr	r3, [pc, #112]	; (80015c4 <HW_TS_Init+0x188>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800155a:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 800155c:	4b19      	ldr	r3, [pc, #100]	; (80015c4 <HW_TS_Init+0x188>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	68db      	ldr	r3, [r3, #12]
 8001562:	b2da      	uxtb	r2, r3
 8001564:	4b17      	ldr	r3, [pc, #92]	; (80015c4 <HW_TS_Init+0x188>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800156c:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 800156e:	4b1f      	ldr	r3, [pc, #124]	; (80015ec <HW_TS_Init+0x1b0>)
 8001570:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001574:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8001576:	2003      	movs	r0, #3
 8001578:	f001 f89f 	bl	80026ba <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 800157c:	4b11      	ldr	r3, [pc, #68]	; (80015c4 <HW_TS_Init+0x188>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	689a      	ldr	r2, [r3, #8]
 8001582:	4b10      	ldr	r3, [pc, #64]	; (80015c4 <HW_TS_Init+0x188>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800158a:	609a      	str	r2, [r3, #8]
 800158c:	e009      	b.n	80015a2 <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 800158e:	4b0d      	ldr	r3, [pc, #52]	; (80015c4 <HW_TS_Init+0x188>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	68db      	ldr	r3, [r3, #12]
 8001594:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001598:	2b00      	cmp	r3, #0
 800159a:	d002      	beq.n	80015a2 <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 800159c:	2003      	movs	r0, #3
 800159e:	f001 f87e 	bl	800269e <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80015a2:	4b08      	ldr	r3, [pc, #32]	; (80015c4 <HW_TS_Init+0x188>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	22ff      	movs	r2, #255	; 0xff
 80015a8:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 80015aa:	2200      	movs	r2, #0
 80015ac:	2103      	movs	r1, #3
 80015ae:	2003      	movs	r0, #3
 80015b0:	f001 f833 	bl	800261a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80015b4:	2003      	movs	r0, #3
 80015b6:	f001 f84a 	bl	800264e <HAL_NVIC_EnableIRQ>

  return;
 80015ba:	bf00      	nop
}
 80015bc:	3720      	adds	r7, #32
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	20000aa8 	.word	0x20000aa8
 80015c8:	40002800 	.word	0x40002800
 80015cc:	20000a11 	.word	0x20000a11
 80015d0:	20000a12 	.word	0x20000a12
 80015d4:	20000a14 	.word	0x20000a14
 80015d8:	20000a16 	.word	0x20000a16
 80015dc:	20000a10 	.word	0x20000a10
 80015e0:	20000a0c 	.word	0x20000a0c
 80015e4:	20000978 	.word	0x20000978
 80015e8:	20000a08 	.word	0x20000a08
 80015ec:	58000800 	.word	0x58000800

080015f0 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b086      	sub	sp, #24
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	4603      	mov	r3, r0
 80015f8:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80015fa:	f3ef 8310 	mrs	r3, PRIMASK
 80015fe:	60fb      	str	r3, [r7, #12]
  return(result);
 8001600:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001602:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001604:	b672      	cpsid	i
}
 8001606:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001608:	2003      	movs	r0, #3
 800160a:	f001 f82e 	bl	800266a <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 800160e:	4b34      	ldr	r3, [pc, #208]	; (80016e0 <HW_TS_Stop+0xf0>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	22ca      	movs	r2, #202	; 0xca
 8001614:	625a      	str	r2, [r3, #36]	; 0x24
 8001616:	4b32      	ldr	r3, [pc, #200]	; (80016e0 <HW_TS_Stop+0xf0>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	2253      	movs	r2, #83	; 0x53
 800161c:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 800161e:	79fa      	ldrb	r2, [r7, #7]
 8001620:	4930      	ldr	r1, [pc, #192]	; (80016e4 <HW_TS_Stop+0xf4>)
 8001622:	4613      	mov	r3, r2
 8001624:	005b      	lsls	r3, r3, #1
 8001626:	4413      	add	r3, r2
 8001628:	00db      	lsls	r3, r3, #3
 800162a:	440b      	add	r3, r1
 800162c:	330c      	adds	r3, #12
 800162e:	781b      	ldrb	r3, [r3, #0]
 8001630:	b2db      	uxtb	r3, r3
 8001632:	2b02      	cmp	r3, #2
 8001634:	d142      	bne.n	80016bc <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8001636:	79fb      	ldrb	r3, [r7, #7]
 8001638:	2100      	movs	r1, #0
 800163a:	4618      	mov	r0, r3
 800163c:	f7ff fc80 	bl	8000f40 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8001640:	4b29      	ldr	r3, [pc, #164]	; (80016e8 <HW_TS_Stop+0xf8>)
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001646:	7cfb      	ldrb	r3, [r7, #19]
 8001648:	2b06      	cmp	r3, #6
 800164a:	d12f      	bne.n	80016ac <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 800164c:	4b27      	ldr	r3, [pc, #156]	; (80016ec <HW_TS_Stop+0xfc>)
 800164e:	689b      	ldr	r3, [r3, #8]
 8001650:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001654:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001658:	d107      	bne.n	800166a <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 800165a:	bf00      	nop
 800165c:	4b20      	ldr	r3, [pc, #128]	; (80016e0 <HW_TS_Stop+0xf0>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	68db      	ldr	r3, [r3, #12]
 8001662:	f003 0304 	and.w	r3, r3, #4
 8001666:	2b00      	cmp	r3, #0
 8001668:	d1f8      	bne.n	800165c <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 800166a:	4b1d      	ldr	r3, [pc, #116]	; (80016e0 <HW_TS_Stop+0xf0>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	689a      	ldr	r2, [r3, #8]
 8001670:	4b1b      	ldr	r3, [pc, #108]	; (80016e0 <HW_TS_Stop+0xf0>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001678:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 800167a:	bf00      	nop
 800167c:	4b18      	ldr	r3, [pc, #96]	; (80016e0 <HW_TS_Stop+0xf0>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	68db      	ldr	r3, [r3, #12]
 8001682:	f003 0304 	and.w	r3, r3, #4
 8001686:	2b00      	cmp	r3, #0
 8001688:	d0f8      	beq.n	800167c <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 800168a:	4b15      	ldr	r3, [pc, #84]	; (80016e0 <HW_TS_Stop+0xf0>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	68db      	ldr	r3, [r3, #12]
 8001690:	b2da      	uxtb	r2, r3
 8001692:	4b13      	ldr	r3, [pc, #76]	; (80016e0 <HW_TS_Stop+0xf0>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800169a:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 800169c:	4b14      	ldr	r3, [pc, #80]	; (80016f0 <HW_TS_Stop+0x100>)
 800169e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80016a2:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 80016a4:	2003      	movs	r0, #3
 80016a6:	f001 f808 	bl	80026ba <HAL_NVIC_ClearPendingIRQ>
 80016aa:	e007      	b.n	80016bc <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80016ac:	4b11      	ldr	r3, [pc, #68]	; (80016f4 <HW_TS_Stop+0x104>)
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	b2db      	uxtb	r3, r3
 80016b2:	7cfa      	ldrb	r2, [r7, #19]
 80016b4:	429a      	cmp	r2, r3
 80016b6:	d001      	beq.n	80016bc <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 80016b8:	f7ff fd5e 	bl	8001178 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80016bc:	4b08      	ldr	r3, [pc, #32]	; (80016e0 <HW_TS_Stop+0xf0>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	22ff      	movs	r2, #255	; 0xff
 80016c2:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80016c4:	2003      	movs	r0, #3
 80016c6:	f000 ffc2 	bl	800264e <HAL_NVIC_EnableIRQ>
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80016ce:	68bb      	ldr	r3, [r7, #8]
 80016d0:	f383 8810 	msr	PRIMASK, r3
}
 80016d4:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80016d6:	bf00      	nop
}
 80016d8:	3718      	adds	r7, #24
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	20000aa8 	.word	0x20000aa8
 80016e4:	20000978 	.word	0x20000978
 80016e8:	20000a08 	.word	0x20000a08
 80016ec:	40002800 	.word	0x40002800
 80016f0:	58000800 	.word	0x58000800
 80016f4:	20000a09 	.word	0x20000a09

080016f8 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b086      	sub	sp, #24
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	4603      	mov	r3, r0
 8001700:	6039      	str	r1, [r7, #0]
 8001702:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001704:	79fa      	ldrb	r2, [r7, #7]
 8001706:	493b      	ldr	r1, [pc, #236]	; (80017f4 <HW_TS_Start+0xfc>)
 8001708:	4613      	mov	r3, r2
 800170a:	005b      	lsls	r3, r3, #1
 800170c:	4413      	add	r3, r2
 800170e:	00db      	lsls	r3, r3, #3
 8001710:	440b      	add	r3, r1
 8001712:	330c      	adds	r3, #12
 8001714:	781b      	ldrb	r3, [r3, #0]
 8001716:	b2db      	uxtb	r3, r3
 8001718:	2b02      	cmp	r3, #2
 800171a:	d103      	bne.n	8001724 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 800171c:	79fb      	ldrb	r3, [r7, #7]
 800171e:	4618      	mov	r0, r3
 8001720:	f7ff ff66 	bl	80015f0 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001724:	f3ef 8310 	mrs	r3, PRIMASK
 8001728:	60fb      	str	r3, [r7, #12]
  return(result);
 800172a:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800172c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800172e:	b672      	cpsid	i
}
 8001730:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001732:	2003      	movs	r0, #3
 8001734:	f000 ff99 	bl	800266a <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001738:	4b2f      	ldr	r3, [pc, #188]	; (80017f8 <HW_TS_Start+0x100>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	22ca      	movs	r2, #202	; 0xca
 800173e:	625a      	str	r2, [r3, #36]	; 0x24
 8001740:	4b2d      	ldr	r3, [pc, #180]	; (80017f8 <HW_TS_Start+0x100>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	2253      	movs	r2, #83	; 0x53
 8001746:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8001748:	79fa      	ldrb	r2, [r7, #7]
 800174a:	492a      	ldr	r1, [pc, #168]	; (80017f4 <HW_TS_Start+0xfc>)
 800174c:	4613      	mov	r3, r2
 800174e:	005b      	lsls	r3, r3, #1
 8001750:	4413      	add	r3, r2
 8001752:	00db      	lsls	r3, r3, #3
 8001754:	440b      	add	r3, r1
 8001756:	330c      	adds	r3, #12
 8001758:	2202      	movs	r2, #2
 800175a:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 800175c:	79fa      	ldrb	r2, [r7, #7]
 800175e:	4925      	ldr	r1, [pc, #148]	; (80017f4 <HW_TS_Start+0xfc>)
 8001760:	4613      	mov	r3, r2
 8001762:	005b      	lsls	r3, r3, #1
 8001764:	4413      	add	r3, r2
 8001766:	00db      	lsls	r3, r3, #3
 8001768:	440b      	add	r3, r1
 800176a:	3308      	adds	r3, #8
 800176c:	683a      	ldr	r2, [r7, #0]
 800176e:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8001770:	79fa      	ldrb	r2, [r7, #7]
 8001772:	4920      	ldr	r1, [pc, #128]	; (80017f4 <HW_TS_Start+0xfc>)
 8001774:	4613      	mov	r3, r2
 8001776:	005b      	lsls	r3, r3, #1
 8001778:	4413      	add	r3, r2
 800177a:	00db      	lsls	r3, r3, #3
 800177c:	440b      	add	r3, r1
 800177e:	3304      	adds	r3, #4
 8001780:	683a      	ldr	r2, [r7, #0]
 8001782:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8001784:	79fb      	ldrb	r3, [r7, #7]
 8001786:	4618      	mov	r0, r3
 8001788:	f7ff fb30 	bl	8000dec <linkTimer>
 800178c:	4603      	mov	r3, r0
 800178e:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8001790:	4b1a      	ldr	r3, [pc, #104]	; (80017fc <HW_TS_Start+0x104>)
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001796:	4b1a      	ldr	r3, [pc, #104]	; (8001800 <HW_TS_Start+0x108>)
 8001798:	781b      	ldrb	r3, [r3, #0]
 800179a:	b2db      	uxtb	r3, r3
 800179c:	7c7a      	ldrb	r2, [r7, #17]
 800179e:	429a      	cmp	r2, r3
 80017a0:	d002      	beq.n	80017a8 <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 80017a2:	f7ff fce9 	bl	8001178 <RescheduleTimerList>
 80017a6:	e013      	b.n	80017d0 <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 80017a8:	79fa      	ldrb	r2, [r7, #7]
 80017aa:	4912      	ldr	r1, [pc, #72]	; (80017f4 <HW_TS_Start+0xfc>)
 80017ac:	4613      	mov	r3, r2
 80017ae:	005b      	lsls	r3, r3, #1
 80017b0:	4413      	add	r3, r2
 80017b2:	00db      	lsls	r3, r3, #3
 80017b4:	440b      	add	r3, r1
 80017b6:	3308      	adds	r3, #8
 80017b8:	6819      	ldr	r1, [r3, #0]
 80017ba:	8a7b      	ldrh	r3, [r7, #18]
 80017bc:	79fa      	ldrb	r2, [r7, #7]
 80017be:	1ac9      	subs	r1, r1, r3
 80017c0:	480c      	ldr	r0, [pc, #48]	; (80017f4 <HW_TS_Start+0xfc>)
 80017c2:	4613      	mov	r3, r2
 80017c4:	005b      	lsls	r3, r3, #1
 80017c6:	4413      	add	r3, r2
 80017c8:	00db      	lsls	r3, r3, #3
 80017ca:	4403      	add	r3, r0
 80017cc:	3308      	adds	r3, #8
 80017ce:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80017d0:	4b09      	ldr	r3, [pc, #36]	; (80017f8 <HW_TS_Start+0x100>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	22ff      	movs	r2, #255	; 0xff
 80017d6:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80017d8:	2003      	movs	r0, #3
 80017da:	f000 ff38 	bl	800264e <HAL_NVIC_EnableIRQ>
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80017e2:	68bb      	ldr	r3, [r7, #8]
 80017e4:	f383 8810 	msr	PRIMASK, r3
}
 80017e8:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80017ea:	bf00      	nop
}
 80017ec:	3718      	adds	r7, #24
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	20000978 	.word	0x20000978
 80017f8:	20000aa8 	.word	0x20000aa8
 80017fc:	20000a08 	.word	0x20000a08
 8001800:	20000a09 	.word	0x20000a09

08001804 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b084      	sub	sp, #16
 8001808:	af00      	add	r7, sp, #0
 800180a:	60f8      	str	r0, [r7, #12]
 800180c:	460b      	mov	r3, r1
 800180e:	607a      	str	r2, [r7, #4]
 8001810:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	4798      	blx	r3

  return;
 8001816:	bf00      	nop
}
 8001818:	3710      	adds	r7, #16
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}

0800181e <LL_RCC_LSE_SetDriveCapability>:
{
 800181e:	b480      	push	{r7}
 8001820:	b083      	sub	sp, #12
 8001822:	af00      	add	r7, sp, #0
 8001824:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001826:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800182a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800182e:	f023 0218 	bic.w	r2, r3, #24
 8001832:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	4313      	orrs	r3, r2
 800183a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800183e:	bf00      	nop
 8001840:	370c      	adds	r7, #12
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr

0800184a <LL_AHB2_GRP1_EnableClock>:
{
 800184a:	b480      	push	{r7}
 800184c:	b085      	sub	sp, #20
 800184e:	af00      	add	r7, sp, #0
 8001850:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001852:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001856:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001858:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	4313      	orrs	r3, r2
 8001860:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001862:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001866:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	4013      	ands	r3, r2
 800186c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800186e:	68fb      	ldr	r3, [r7, #12]
}
 8001870:	bf00      	nop
 8001872:	3714      	adds	r7, #20
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr

0800187c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b086      	sub	sp, #24
 8001880:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001882:	f000 fcfd 	bl	8002280 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 8001886:	f7fe ffed 	bl	8000864 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800188a:	f000 f839 	bl	8001900 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800188e:	f000 f899 	bl	80019c4 <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 8001892:	f000 f8f7 	bl	8001a84 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001896:	f000 f993 	bl	8001bc0 <MX_GPIO_Init>
  MX_RTC_Init();
 800189a:	f000 f90f 	bl	8001abc <MX_RTC_Init>
  MX_I2C1_Init();
 800189e:	f000 f8b1 	bl	8001a04 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80018a2:	f000 f93f 	bl	8001b24 <MX_USART1_UART_Init>
  MX_RF_Init();
 80018a6:	f000 f901 	bl	8001aac <MX_RF_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 80018aa:	f7fe ffe9 	bl	8000880 <MX_APPE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_APPE_Process();
 80018ae:	f7ff f973 	bl	8000b98 <MX_APPE_Process>

    /* USER CODE BEGIN 3 */
    HAL_StatusTypeDef status;
    uint8_t buf[1];

    printf("Hello World\n\r");
 80018b2:	4810      	ldr	r0, [pc, #64]	; (80018f4 <main+0x78>)
 80018b4:	f007 fd9c 	bl	80093f0 <iprintf>

    HAL_Delay(1000);
 80018b8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80018bc:	f7ff f947 	bl	8000b4e <HAL_Delay>
//    if(status == HAL_OK){
//    	printf("Register read successfully");
//		printf("%d %d", buf[0], buf[1]);
//    }

	status = HAL_I2C_Mem_Read(&hi2c1, 0b1011011, BH1790GLC_MANUFACTURER_ID, 1, buf, 1, HAL_MAX_DELAY);
 80018c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80018c4:	9302      	str	r3, [sp, #8]
 80018c6:	2301      	movs	r3, #1
 80018c8:	9301      	str	r3, [sp, #4]
 80018ca:	1d3b      	adds	r3, r7, #4
 80018cc:	9300      	str	r3, [sp, #0]
 80018ce:	2301      	movs	r3, #1
 80018d0:	220f      	movs	r2, #15
 80018d2:	215b      	movs	r1, #91	; 0x5b
 80018d4:	4808      	ldr	r0, [pc, #32]	; (80018f8 <main+0x7c>)
 80018d6:	f001 f93b 	bl	8002b50 <HAL_I2C_Mem_Read>
 80018da:	4603      	mov	r3, r0
 80018dc:	71fb      	strb	r3, [r7, #7]

	printf("buf: %d", buf[0]);
 80018de:	793b      	ldrb	r3, [r7, #4]
 80018e0:	4619      	mov	r1, r3
 80018e2:	4806      	ldr	r0, [pc, #24]	; (80018fc <main+0x80>)
 80018e4:	f007 fd84 	bl	80093f0 <iprintf>
	HAL_Delay(1000);
 80018e8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80018ec:	f7ff f92f 	bl	8000b4e <HAL_Delay>
  {
 80018f0:	e7dd      	b.n	80018ae <main+0x32>
 80018f2:	bf00      	nop
 80018f4:	0800a340 	.word	0x0800a340
 80018f8:	20000a18 	.word	0x20000a18
 80018fc:	0800a350 	.word	0x0800a350

08001900 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b09a      	sub	sp, #104	; 0x68
 8001904:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001906:	f107 0320 	add.w	r3, r7, #32
 800190a:	2248      	movs	r2, #72	; 0x48
 800190c:	2100      	movs	r1, #0
 800190e:	4618      	mov	r0, r3
 8001910:	f007 fd66 	bl	80093e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001914:	1d3b      	adds	r3, r7, #4
 8001916:	2200      	movs	r2, #0
 8001918:	601a      	str	r2, [r3, #0]
 800191a:	605a      	str	r2, [r3, #4]
 800191c:	609a      	str	r2, [r3, #8]
 800191e:	60da      	str	r2, [r3, #12]
 8001920:	611a      	str	r2, [r3, #16]
 8001922:	615a      	str	r2, [r3, #20]
 8001924:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001926:	f001 fdc9 	bl	80034bc <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 800192a:	2010      	movs	r0, #16
 800192c:	f7ff ff77 	bl	800181e <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001930:	4b23      	ldr	r3, [pc, #140]	; (80019c0 <SystemClock_Config+0xc0>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001938:	4a21      	ldr	r2, [pc, #132]	; (80019c0 <SystemClock_Config+0xc0>)
 800193a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800193e:	6013      	str	r3, [r2, #0]
 8001940:	4b1f      	ldr	r3, [pc, #124]	; (80019c0 <SystemClock_Config+0xc0>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001948:	603b      	str	r3, [r7, #0]
 800194a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 800194c:	2327      	movs	r3, #39	; 0x27
 800194e:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001950:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001954:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001956:	2301      	movs	r3, #1
 8001958:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800195a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800195e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001960:	2301      	movs	r3, #1
 8001962:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001964:	2340      	movs	r3, #64	; 0x40
 8001966:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001968:	2300      	movs	r3, #0
 800196a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 800196c:	23a0      	movs	r3, #160	; 0xa0
 800196e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001970:	2300      	movs	r3, #0
 8001972:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001974:	f107 0320 	add.w	r3, r7, #32
 8001978:	4618      	mov	r0, r3
 800197a:	f002 f933 	bl	8003be4 <HAL_RCC_OscConfig>
 800197e:	4603      	mov	r3, r0
 8001980:	2b00      	cmp	r3, #0
 8001982:	d001      	beq.n	8001988 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8001984:	f000 f988 	bl	8001c98 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8001988:	236f      	movs	r3, #111	; 0x6f
 800198a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800198c:	2300      	movs	r3, #0
 800198e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001990:	2300      	movs	r3, #0
 8001992:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001994:	2300      	movs	r3, #0
 8001996:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001998:	2300      	movs	r3, #0
 800199a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 800199c:	2300      	movs	r3, #0
 800199e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80019a0:	2300      	movs	r3, #0
 80019a2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80019a4:	1d3b      	adds	r3, r7, #4
 80019a6:	2101      	movs	r1, #1
 80019a8:	4618      	mov	r0, r3
 80019aa:	f002 fc8f 	bl	80042cc <HAL_RCC_ClockConfig>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d001      	beq.n	80019b8 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80019b4:	f000 f970 	bl	8001c98 <Error_Handler>
  }
}
 80019b8:	bf00      	nop
 80019ba:	3768      	adds	r7, #104	; 0x68
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	58000400 	.word	0x58000400

080019c4 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b094      	sub	sp, #80	; 0x50
 80019c8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80019ca:	463b      	mov	r3, r7
 80019cc:	2250      	movs	r2, #80	; 0x50
 80019ce:	2100      	movs	r1, #0
 80019d0:	4618      	mov	r0, r3
 80019d2:	f007 fd05 	bl	80093e0 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 80019d6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80019da:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 80019dc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80019e0:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 80019e2:	2300      	movs	r3, #0
 80019e4:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 80019e6:	2300      	movs	r3, #0
 80019e8:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019ea:	463b      	mov	r3, r7
 80019ec:	4618      	mov	r0, r3
 80019ee:	f003 f8aa 	bl	8004b46 <HAL_RCCEx_PeriphCLKConfig>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d001      	beq.n	80019fc <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 80019f8:	f000 f94e 	bl	8001c98 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 80019fc:	bf00      	nop
 80019fe:	3750      	adds	r7, #80	; 0x50
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}

08001a04 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001a08:	4b1b      	ldr	r3, [pc, #108]	; (8001a78 <MX_I2C1_Init+0x74>)
 8001a0a:	4a1c      	ldr	r2, [pc, #112]	; (8001a7c <MX_I2C1_Init+0x78>)
 8001a0c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8001a0e:	4b1a      	ldr	r3, [pc, #104]	; (8001a78 <MX_I2C1_Init+0x74>)
 8001a10:	4a1b      	ldr	r2, [pc, #108]	; (8001a80 <MX_I2C1_Init+0x7c>)
 8001a12:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001a14:	4b18      	ldr	r3, [pc, #96]	; (8001a78 <MX_I2C1_Init+0x74>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a1a:	4b17      	ldr	r3, [pc, #92]	; (8001a78 <MX_I2C1_Init+0x74>)
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a20:	4b15      	ldr	r3, [pc, #84]	; (8001a78 <MX_I2C1_Init+0x74>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001a26:	4b14      	ldr	r3, [pc, #80]	; (8001a78 <MX_I2C1_Init+0x74>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001a2c:	4b12      	ldr	r3, [pc, #72]	; (8001a78 <MX_I2C1_Init+0x74>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a32:	4b11      	ldr	r3, [pc, #68]	; (8001a78 <MX_I2C1_Init+0x74>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a38:	4b0f      	ldr	r3, [pc, #60]	; (8001a78 <MX_I2C1_Init+0x74>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001a3e:	480e      	ldr	r0, [pc, #56]	; (8001a78 <MX_I2C1_Init+0x74>)
 8001a40:	f000 fff6 	bl	8002a30 <HAL_I2C_Init>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d001      	beq.n	8001a4e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001a4a:	f000 f925 	bl	8001c98 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001a4e:	2100      	movs	r1, #0
 8001a50:	4809      	ldr	r0, [pc, #36]	; (8001a78 <MX_I2C1_Init+0x74>)
 8001a52:	f001 fc15 	bl	8003280 <HAL_I2CEx_ConfigAnalogFilter>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d001      	beq.n	8001a60 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001a5c:	f000 f91c 	bl	8001c98 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001a60:	2100      	movs	r1, #0
 8001a62:	4805      	ldr	r0, [pc, #20]	; (8001a78 <MX_I2C1_Init+0x74>)
 8001a64:	f001 fc57 	bl	8003316 <HAL_I2CEx_ConfigDigitalFilter>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d001      	beq.n	8001a72 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001a6e:	f000 f913 	bl	8001c98 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001a72:	bf00      	nop
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	20000a18 	.word	0x20000a18
 8001a7c:	40005400 	.word	0x40005400
 8001a80:	00707cbb 	.word	0x00707cbb

08001a84 <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8001a88:	4b06      	ldr	r3, [pc, #24]	; (8001aa4 <MX_IPCC_Init+0x20>)
 8001a8a:	4a07      	ldr	r2, [pc, #28]	; (8001aa8 <MX_IPCC_Init+0x24>)
 8001a8c:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 8001a8e:	4805      	ldr	r0, [pc, #20]	; (8001aa4 <MX_IPCC_Init+0x20>)
 8001a90:	f001 fc8e 	bl	80033b0 <HAL_IPCC_Init>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d001      	beq.n	8001a9e <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 8001a9a:	f000 f8fd 	bl	8001c98 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 8001a9e:	bf00      	nop
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	20000a6c 	.word	0x20000a6c
 8001aa8:	58000c00 	.word	0x58000c00

08001aac <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8001ab0:	bf00      	nop
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr
	...

08001abc <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001ac0:	4b16      	ldr	r3, [pc, #88]	; (8001b1c <MX_RTC_Init+0x60>)
 8001ac2:	4a17      	ldr	r2, [pc, #92]	; (8001b20 <MX_RTC_Init+0x64>)
 8001ac4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001ac6:	4b15      	ldr	r3, [pc, #84]	; (8001b1c <MX_RTC_Init+0x60>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8001acc:	4b13      	ldr	r3, [pc, #76]	; (8001b1c <MX_RTC_Init+0x60>)
 8001ace:	220f      	movs	r2, #15
 8001ad0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8001ad2:	4b12      	ldr	r3, [pc, #72]	; (8001b1c <MX_RTC_Init+0x60>)
 8001ad4:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8001ad8:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001ada:	4b10      	ldr	r3, [pc, #64]	; (8001b1c <MX_RTC_Init+0x60>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001ae0:	4b0e      	ldr	r3, [pc, #56]	; (8001b1c <MX_RTC_Init+0x60>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001ae6:	4b0d      	ldr	r3, [pc, #52]	; (8001b1c <MX_RTC_Init+0x60>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001aec:	4b0b      	ldr	r3, [pc, #44]	; (8001b1c <MX_RTC_Init+0x60>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001af2:	480a      	ldr	r0, [pc, #40]	; (8001b1c <MX_RTC_Init+0x60>)
 8001af4:	f003 faae 	bl	8005054 <HAL_RTC_Init>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d001      	beq.n	8001b02 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8001afe:	f000 f8cb 	bl	8001c98 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8001b02:	2200      	movs	r2, #0
 8001b04:	2100      	movs	r1, #0
 8001b06:	4805      	ldr	r0, [pc, #20]	; (8001b1c <MX_RTC_Init+0x60>)
 8001b08:	f003 fba4 	bl	8005254 <HAL_RTCEx_SetWakeUpTimer_IT>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d001      	beq.n	8001b16 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8001b12:	f000 f8c1 	bl	8001c98 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001b16:	bf00      	nop
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	20000aa8 	.word	0x20000aa8
 8001b20:	40002800 	.word	0x40002800

08001b24 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001b28:	4b23      	ldr	r3, [pc, #140]	; (8001bb8 <MX_USART1_UART_Init+0x94>)
 8001b2a:	4a24      	ldr	r2, [pc, #144]	; (8001bbc <MX_USART1_UART_Init+0x98>)
 8001b2c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001b2e:	4b22      	ldr	r3, [pc, #136]	; (8001bb8 <MX_USART1_UART_Init+0x94>)
 8001b30:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b34:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b36:	4b20      	ldr	r3, [pc, #128]	; (8001bb8 <MX_USART1_UART_Init+0x94>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001b3c:	4b1e      	ldr	r3, [pc, #120]	; (8001bb8 <MX_USART1_UART_Init+0x94>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_ODD;
 8001b42:	4b1d      	ldr	r3, [pc, #116]	; (8001bb8 <MX_USART1_UART_Init+0x94>)
 8001b44:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8001b48:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001b4a:	4b1b      	ldr	r3, [pc, #108]	; (8001bb8 <MX_USART1_UART_Init+0x94>)
 8001b4c:	220c      	movs	r2, #12
 8001b4e:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b50:	4b19      	ldr	r3, [pc, #100]	; (8001bb8 <MX_USART1_UART_Init+0x94>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b56:	4b18      	ldr	r3, [pc, #96]	; (8001bb8 <MX_USART1_UART_Init+0x94>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b5c:	4b16      	ldr	r3, [pc, #88]	; (8001bb8 <MX_USART1_UART_Init+0x94>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001b62:	4b15      	ldr	r3, [pc, #84]	; (8001bb8 <MX_USART1_UART_Init+0x94>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b68:	4b13      	ldr	r3, [pc, #76]	; (8001bb8 <MX_USART1_UART_Init+0x94>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001b6e:	4812      	ldr	r0, [pc, #72]	; (8001bb8 <MX_USART1_UART_Init+0x94>)
 8001b70:	f003 fc4c 	bl	800540c <HAL_UART_Init>
 8001b74:	4603      	mov	r3, r0
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d001      	beq.n	8001b7e <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8001b7a:	f000 f88d 	bl	8001c98 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b7e:	2100      	movs	r1, #0
 8001b80:	480d      	ldr	r0, [pc, #52]	; (8001bb8 <MX_USART1_UART_Init+0x94>)
 8001b82:	f004 f99b 	bl	8005ebc <HAL_UARTEx_SetTxFifoThreshold>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d001      	beq.n	8001b90 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8001b8c:	f000 f884 	bl	8001c98 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b90:	2100      	movs	r1, #0
 8001b92:	4809      	ldr	r0, [pc, #36]	; (8001bb8 <MX_USART1_UART_Init+0x94>)
 8001b94:	f004 f9d0 	bl	8005f38 <HAL_UARTEx_SetRxFifoThreshold>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d001      	beq.n	8001ba2 <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 8001b9e:	f000 f87b 	bl	8001c98 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001ba2:	4805      	ldr	r0, [pc, #20]	; (8001bb8 <MX_USART1_UART_Init+0x94>)
 8001ba4:	f004 f951 	bl	8005e4a <HAL_UARTEx_DisableFifoMode>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d001      	beq.n	8001bb2 <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 8001bae:	f000 f873 	bl	8001c98 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001bb2:	bf00      	nop
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	20000acc 	.word	0x20000acc
 8001bbc:	40013800 	.word	0x40013800

08001bc0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b086      	sub	sp, #24
 8001bc4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bc6:	1d3b      	adds	r3, r7, #4
 8001bc8:	2200      	movs	r2, #0
 8001bca:	601a      	str	r2, [r3, #0]
 8001bcc:	605a      	str	r2, [r3, #4]
 8001bce:	609a      	str	r2, [r3, #8]
 8001bd0:	60da      	str	r2, [r3, #12]
 8001bd2:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bd4:	2004      	movs	r0, #4
 8001bd6:	f7ff fe38 	bl	800184a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bda:	2002      	movs	r0, #2
 8001bdc:	f7ff fe35 	bl	800184a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001be0:	2001      	movs	r0, #1
 8001be2:	f7ff fe32 	bl	800184a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001be6:	2008      	movs	r0, #8
 8001be8:	f7ff fe2f 	bl	800184a <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 8001bec:	2200      	movs	r2, #0
 8001bee:	2123      	movs	r1, #35	; 0x23
 8001bf0:	481d      	ldr	r0, [pc, #116]	; (8001c68 <MX_GPIO_Init+0xa8>)
 8001bf2:	f000 fee1 	bl	80029b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001bf6:	2310      	movs	r3, #16
 8001bf8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001c02:	1d3b      	adds	r3, r7, #4
 8001c04:	4619      	mov	r1, r3
 8001c06:	4819      	ldr	r0, [pc, #100]	; (8001c6c <MX_GPIO_Init+0xac>)
 8001c08:	f000 fd66 	bl	80026d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 8001c0c:	2323      	movs	r3, #35	; 0x23
 8001c0e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c10:	2301      	movs	r3, #1
 8001c12:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c14:	2300      	movs	r3, #0
 8001c16:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c1c:	1d3b      	adds	r3, r7, #4
 8001c1e:	4619      	mov	r1, r3
 8001c20:	4811      	ldr	r0, [pc, #68]	; (8001c68 <MX_GPIO_Init+0xa8>)
 8001c22:	f000 fd59 	bl	80026d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001c26:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001c2a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c2c:	2302      	movs	r3, #2
 8001c2e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c30:	2300      	movs	r3, #0
 8001c32:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c34:	2300      	movs	r3, #0
 8001c36:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8001c38:	230a      	movs	r3, #10
 8001c3a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c3c:	1d3b      	adds	r3, r7, #4
 8001c3e:	4619      	mov	r1, r3
 8001c40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c44:	f000 fd48 	bl	80026d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 8001c48:	2303      	movs	r3, #3
 8001c4a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c50:	2300      	movs	r3, #0
 8001c52:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c54:	1d3b      	adds	r3, r7, #4
 8001c56:	4619      	mov	r1, r3
 8001c58:	4805      	ldr	r0, [pc, #20]	; (8001c70 <MX_GPIO_Init+0xb0>)
 8001c5a:	f000 fd3d 	bl	80026d8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001c5e:	bf00      	nop
 8001c60:	3718      	adds	r7, #24
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	48000400 	.word	0x48000400
 8001c6c:	48000800 	.word	0x48000800
 8001c70:	48000c00 	.word	0x48000c00

08001c74 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b082      	sub	sp, #8
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8001c7c:	1d39      	adds	r1, r7, #4
 8001c7e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c82:	2201      	movs	r2, #1
 8001c84:	4803      	ldr	r0, [pc, #12]	; (8001c94 <__io_putchar+0x20>)
 8001c86:	f003 fc11 	bl	80054ac <HAL_UART_Transmit>

  return ch;
 8001c8a:	687b      	ldr	r3, [r7, #4]
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	3708      	adds	r7, #8
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}
 8001c94:	20000acc 	.word	0x20000acc

08001c98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001c9c:	b672      	cpsid	i
}
 8001c9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ca0:	e7fe      	b.n	8001ca0 <Error_Handler+0x8>

08001ca2 <LL_RCC_EnableRTC>:
{
 8001ca2:	b480      	push	{r7}
 8001ca4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001ca6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001caa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001cb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001cb6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001cba:	bf00      	nop
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr

08001cc4 <LL_AHB2_GRP1_EnableClock>:
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b085      	sub	sp, #20
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001ccc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cd0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001cd2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001cdc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ce0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001ce8:	68fb      	ldr	r3, [r7, #12]
}
 8001cea:	bf00      	nop
 8001cec:	3714      	adds	r7, #20
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr

08001cf6 <LL_AHB3_GRP1_EnableClock>:
{
 8001cf6:	b480      	push	{r7}
 8001cf8:	b085      	sub	sp, #20
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8001cfe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d02:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001d04:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8001d0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d12:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	4013      	ands	r3, r2
 8001d18:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
}
 8001d1c:	bf00      	nop
 8001d1e:	3714      	adds	r7, #20
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr

08001d28 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b085      	sub	sp, #20
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001d30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d34:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001d36:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001d40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d44:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	4013      	ands	r3, r2
 8001d4a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
}
 8001d4e:	bf00      	nop
 8001d50:	3714      	adds	r7, #20
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr

08001d5a <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001d5a:	b480      	push	{r7}
 8001d5c:	b085      	sub	sp, #20
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001d62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d66:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001d68:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001d72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d76:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	4013      	ands	r3, r2
 8001d7c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
}
 8001d80:	bf00      	nop
 8001d82:	3714      	adds	r7, #20
 8001d84:	46bd      	mov	sp, r7
 8001d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8a:	4770      	bx	lr

08001d8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8001d90:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001d94:	f7ff ffaf 	bl	8001cf6 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8001d98:	2200      	movs	r2, #0
 8001d9a:	2100      	movs	r1, #0
 8001d9c:	202e      	movs	r0, #46	; 0x2e
 8001d9e:	f000 fc3c 	bl	800261a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8001da2:	202e      	movs	r0, #46	; 0x2e
 8001da4:	f000 fc53 	bl	800264e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001da8:	bf00      	nop
 8001daa:	bd80      	pop	{r7, pc}

08001dac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b09c      	sub	sp, #112	; 0x70
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001db4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001db8:	2200      	movs	r2, #0
 8001dba:	601a      	str	r2, [r3, #0]
 8001dbc:	605a      	str	r2, [r3, #4]
 8001dbe:	609a      	str	r2, [r3, #8]
 8001dc0:	60da      	str	r2, [r3, #12]
 8001dc2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001dc4:	f107 030c 	add.w	r3, r7, #12
 8001dc8:	2250      	movs	r2, #80	; 0x50
 8001dca:	2100      	movs	r1, #0
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f007 fb07 	bl	80093e0 <memset>
  if(hi2c->Instance==I2C1)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a1b      	ldr	r2, [pc, #108]	; (8001e44 <HAL_I2C_MspInit+0x98>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d12e      	bne.n	8001e3a <HAL_I2C_MspInit+0x8e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001ddc:	2304      	movs	r3, #4
 8001dde:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001de0:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8001de4:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001de6:	f107 030c 	add.w	r3, r7, #12
 8001dea:	4618      	mov	r0, r3
 8001dec:	f002 feab 	bl	8004b46 <HAL_RCCEx_PeriphCLKConfig>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d001      	beq.n	8001dfa <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001df6:	f7ff ff4f 	bl	8001c98 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dfa:	2002      	movs	r0, #2
 8001dfc:	f7ff ff62 	bl	8001cc4 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001e00:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001e04:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e06:	2312      	movs	r3, #18
 8001e08:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e12:	2304      	movs	r3, #4
 8001e14:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e16:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	480a      	ldr	r0, [pc, #40]	; (8001e48 <HAL_I2C_MspInit+0x9c>)
 8001e1e:	f000 fc5b 	bl	80026d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e22:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001e26:	f7ff ff7f 	bl	8001d28 <LL_APB1_GRP1_EnableClock>
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	2100      	movs	r1, #0
 8001e2e:	201e      	movs	r0, #30
 8001e30:	f000 fbf3 	bl	800261a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001e34:	201e      	movs	r0, #30
 8001e36:	f000 fc0a 	bl	800264e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001e3a:	bf00      	nop
 8001e3c:	3770      	adds	r7, #112	; 0x70
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	40005400 	.word	0x40005400
 8001e48:	48000400 	.word	0x48000400

08001e4c <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b082      	sub	sp, #8
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a0d      	ldr	r2, [pc, #52]	; (8001e90 <HAL_IPCC_MspInit+0x44>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d113      	bne.n	8001e86 <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8001e5e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001e62:	f7ff ff48 	bl	8001cf6 <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 8001e66:	2200      	movs	r2, #0
 8001e68:	2100      	movs	r1, #0
 8001e6a:	202c      	movs	r0, #44	; 0x2c
 8001e6c:	f000 fbd5 	bl	800261a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8001e70:	202c      	movs	r0, #44	; 0x2c
 8001e72:	f000 fbec 	bl	800264e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 8001e76:	2200      	movs	r2, #0
 8001e78:	2100      	movs	r1, #0
 8001e7a:	202d      	movs	r0, #45	; 0x2d
 8001e7c:	f000 fbcd 	bl	800261a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8001e80:	202d      	movs	r0, #45	; 0x2d
 8001e82:	f000 fbe4 	bl	800264e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 8001e86:	bf00      	nop
 8001e88:	3708      	adds	r7, #8
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	58000c00 	.word	0x58000c00

08001e94 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b096      	sub	sp, #88	; 0x58
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e9c:	f107 0308 	add.w	r3, r7, #8
 8001ea0:	2250      	movs	r2, #80	; 0x50
 8001ea2:	2100      	movs	r1, #0
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f007 fa9b 	bl	80093e0 <memset>
  if(hrtc->Instance==RTC)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a12      	ldr	r2, [pc, #72]	; (8001ef8 <HAL_RTC_MspInit+0x64>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d11d      	bne.n	8001ef0 <HAL_RTC_MspInit+0x5c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001eb4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001eb8:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001eba:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ebe:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ec0:	f107 0308 	add.w	r3, r7, #8
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f002 fe3e 	bl	8004b46 <HAL_RCCEx_PeriphCLKConfig>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d001      	beq.n	8001ed4 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001ed0:	f7ff fee2 	bl	8001c98 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001ed4:	f7ff fee5 	bl	8001ca2 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001ed8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001edc:	f7ff ff24 	bl	8001d28 <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	2100      	movs	r1, #0
 8001ee4:	2003      	movs	r0, #3
 8001ee6:	f000 fb98 	bl	800261a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8001eea:	2003      	movs	r0, #3
 8001eec:	f000 fbaf 	bl	800264e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001ef0:	bf00      	nop
 8001ef2:	3758      	adds	r7, #88	; 0x58
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	40002800 	.word	0x40002800

08001efc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b09c      	sub	sp, #112	; 0x70
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f04:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001f08:	2200      	movs	r2, #0
 8001f0a:	601a      	str	r2, [r3, #0]
 8001f0c:	605a      	str	r2, [r3, #4]
 8001f0e:	609a      	str	r2, [r3, #8]
 8001f10:	60da      	str	r2, [r3, #12]
 8001f12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f14:	f107 030c 	add.w	r3, r7, #12
 8001f18:	2250      	movs	r2, #80	; 0x50
 8001f1a:	2100      	movs	r1, #0
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f007 fa5f 	bl	80093e0 <memset>
  if(huart->Instance==USART1)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a16      	ldr	r2, [pc, #88]	; (8001f80 <HAL_UART_MspInit+0x84>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d124      	bne.n	8001f76 <HAL_UART_MspInit+0x7a>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001f30:	2300      	movs	r3, #0
 8001f32:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f34:	f107 030c 	add.w	r3, r7, #12
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f002 fe04 	bl	8004b46 <HAL_RCCEx_PeriphCLKConfig>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d001      	beq.n	8001f48 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001f44:	f7ff fea8 	bl	8001c98 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001f48:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001f4c:	f7ff ff05 	bl	8001d5a <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f50:	2002      	movs	r0, #2
 8001f52:	f7ff feb7 	bl	8001cc4 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001f56:	23c0      	movs	r3, #192	; 0xc0
 8001f58:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f5a:	2302      	movs	r3, #2
 8001f5c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f62:	2300      	movs	r3, #0
 8001f64:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001f66:	2307      	movs	r3, #7
 8001f68:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f6a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001f6e:	4619      	mov	r1, r3
 8001f70:	4804      	ldr	r0, [pc, #16]	; (8001f84 <HAL_UART_MspInit+0x88>)
 8001f72:	f000 fbb1 	bl	80026d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001f76:	bf00      	nop
 8001f78:	3770      	adds	r7, #112	; 0x70
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	40013800 	.word	0x40013800
 8001f84:	48000400 	.word	0x48000400

08001f88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f8c:	e7fe      	b.n	8001f8c <NMI_Handler+0x4>

08001f8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f8e:	b480      	push	{r7}
 8001f90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f92:	e7fe      	b.n	8001f92 <HardFault_Handler+0x4>

08001f94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f94:	b480      	push	{r7}
 8001f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f98:	e7fe      	b.n	8001f98 <MemManage_Handler+0x4>

08001f9a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f9a:	b480      	push	{r7}
 8001f9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f9e:	e7fe      	b.n	8001f9e <BusFault_Handler+0x4>

08001fa0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fa4:	e7fe      	b.n	8001fa4 <UsageFault_Handler+0x4>

08001fa6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fa6:	b480      	push	{r7}
 8001fa8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001faa:	bf00      	nop
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr

08001fb4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fb8:	bf00      	nop
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr

08001fc2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fc2:	b480      	push	{r7}
 8001fc4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fc6:	bf00      	nop
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr

08001fd0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fd4:	f000 f9ae 	bl	8002334 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fd8:	bf00      	nop
 8001fda:	bd80      	pop	{r7, pc}

08001fdc <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8001fe0:	f7ff f964 	bl	80012ac <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8001fe4:	bf00      	nop
 8001fe6:	bd80      	pop	{r7, pc}

08001fe8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001fec:	4802      	ldr	r0, [pc, #8]	; (8001ff8 <I2C1_EV_IRQHandler+0x10>)
 8001fee:	f000 fec9 	bl	8002d84 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001ff2:	bf00      	nop
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	20000a18 	.word	0x20000a18

08001ffc <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8002000:	f006 fdf2 	bl	8008be8 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8002004:	bf00      	nop
 8002006:	bd80      	pop	{r7, pc}

08002008 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 800200c:	f006 fe24 	bl	8008c58 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8002010:	bf00      	nop
 8002012:	bd80      	pop	{r7, pc}

08002014 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8002018:	f000 fce6 	bl	80029e8 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 800201c:	bf00      	nop
 800201e:	bd80      	pop	{r7, pc}

08002020 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b086      	sub	sp, #24
 8002024:	af00      	add	r7, sp, #0
 8002026:	60f8      	str	r0, [r7, #12]
 8002028:	60b9      	str	r1, [r7, #8]
 800202a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800202c:	2300      	movs	r3, #0
 800202e:	617b      	str	r3, [r7, #20]
 8002030:	e00a      	b.n	8002048 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002032:	f3af 8000 	nop.w
 8002036:	4601      	mov	r1, r0
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	1c5a      	adds	r2, r3, #1
 800203c:	60ba      	str	r2, [r7, #8]
 800203e:	b2ca      	uxtb	r2, r1
 8002040:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002042:	697b      	ldr	r3, [r7, #20]
 8002044:	3301      	adds	r3, #1
 8002046:	617b      	str	r3, [r7, #20]
 8002048:	697a      	ldr	r2, [r7, #20]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	429a      	cmp	r2, r3
 800204e:	dbf0      	blt.n	8002032 <_read+0x12>
  }

  return len;
 8002050:	687b      	ldr	r3, [r7, #4]
}
 8002052:	4618      	mov	r0, r3
 8002054:	3718      	adds	r7, #24
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}

0800205a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800205a:	b580      	push	{r7, lr}
 800205c:	b086      	sub	sp, #24
 800205e:	af00      	add	r7, sp, #0
 8002060:	60f8      	str	r0, [r7, #12]
 8002062:	60b9      	str	r1, [r7, #8]
 8002064:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002066:	2300      	movs	r3, #0
 8002068:	617b      	str	r3, [r7, #20]
 800206a:	e009      	b.n	8002080 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	1c5a      	adds	r2, r3, #1
 8002070:	60ba      	str	r2, [r7, #8]
 8002072:	781b      	ldrb	r3, [r3, #0]
 8002074:	4618      	mov	r0, r3
 8002076:	f7ff fdfd 	bl	8001c74 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	3301      	adds	r3, #1
 800207e:	617b      	str	r3, [r7, #20]
 8002080:	697a      	ldr	r2, [r7, #20]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	429a      	cmp	r2, r3
 8002086:	dbf1      	blt.n	800206c <_write+0x12>
  }
  return len;
 8002088:	687b      	ldr	r3, [r7, #4]
}
 800208a:	4618      	mov	r0, r3
 800208c:	3718      	adds	r7, #24
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}

08002092 <_close>:

int _close(int file)
{
 8002092:	b480      	push	{r7}
 8002094:	b083      	sub	sp, #12
 8002096:	af00      	add	r7, sp, #0
 8002098:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800209a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800209e:	4618      	mov	r0, r3
 80020a0:	370c      	adds	r7, #12
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr

080020aa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80020aa:	b480      	push	{r7}
 80020ac:	b083      	sub	sp, #12
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	6078      	str	r0, [r7, #4]
 80020b2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80020ba:	605a      	str	r2, [r3, #4]
  return 0;
 80020bc:	2300      	movs	r3, #0
}
 80020be:	4618      	mov	r0, r3
 80020c0:	370c      	adds	r7, #12
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr

080020ca <_isatty>:

int _isatty(int file)
{
 80020ca:	b480      	push	{r7}
 80020cc:	b083      	sub	sp, #12
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80020d2:	2301      	movs	r3, #1
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	370c      	adds	r7, #12
 80020d8:	46bd      	mov	sp, r7
 80020da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020de:	4770      	bx	lr

080020e0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b085      	sub	sp, #20
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	60f8      	str	r0, [r7, #12]
 80020e8:	60b9      	str	r1, [r7, #8]
 80020ea:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80020ec:	2300      	movs	r3, #0
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	3714      	adds	r7, #20
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr
	...

080020fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b086      	sub	sp, #24
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002104:	4a14      	ldr	r2, [pc, #80]	; (8002158 <_sbrk+0x5c>)
 8002106:	4b15      	ldr	r3, [pc, #84]	; (800215c <_sbrk+0x60>)
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002110:	4b13      	ldr	r3, [pc, #76]	; (8002160 <_sbrk+0x64>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d102      	bne.n	800211e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002118:	4b11      	ldr	r3, [pc, #68]	; (8002160 <_sbrk+0x64>)
 800211a:	4a12      	ldr	r2, [pc, #72]	; (8002164 <_sbrk+0x68>)
 800211c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800211e:	4b10      	ldr	r3, [pc, #64]	; (8002160 <_sbrk+0x64>)
 8002120:	681a      	ldr	r2, [r3, #0]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	4413      	add	r3, r2
 8002126:	693a      	ldr	r2, [r7, #16]
 8002128:	429a      	cmp	r2, r3
 800212a:	d207      	bcs.n	800213c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800212c:	f007 f920 	bl	8009370 <__errno>
 8002130:	4603      	mov	r3, r0
 8002132:	220c      	movs	r2, #12
 8002134:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002136:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800213a:	e009      	b.n	8002150 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800213c:	4b08      	ldr	r3, [pc, #32]	; (8002160 <_sbrk+0x64>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002142:	4b07      	ldr	r3, [pc, #28]	; (8002160 <_sbrk+0x64>)
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	4413      	add	r3, r2
 800214a:	4a05      	ldr	r2, [pc, #20]	; (8002160 <_sbrk+0x64>)
 800214c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800214e:	68fb      	ldr	r3, [r7, #12]
}
 8002150:	4618      	mov	r0, r3
 8002152:	3718      	adds	r7, #24
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}
 8002158:	20030000 	.word	0x20030000
 800215c:	00000400 	.word	0x00000400
 8002160:	20000b60 	.word	0x20000b60
 8002164:	20000d28 	.word	0x20000d28

08002168 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002168:	b480      	push	{r7}
 800216a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 800216c:	4b24      	ldr	r3, [pc, #144]	; (8002200 <SystemInit+0x98>)
 800216e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002172:	4a23      	ldr	r2, [pc, #140]	; (8002200 <SystemInit+0x98>)
 8002174:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002178:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800217c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002186:	f043 0301 	orr.w	r3, r3, #1
 800218a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 800218c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002190:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8002194:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8002196:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80021a0:	4b18      	ldr	r3, [pc, #96]	; (8002204 <SystemInit+0x9c>)
 80021a2:	4013      	ands	r3, r2
 80021a4:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80021a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80021b2:	f023 0305 	bic.w	r3, r3, #5
 80021b6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80021ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021be:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80021c2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80021c6:	f023 0301 	bic.w	r3, r3, #1
 80021ca:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 80021ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021d2:	4a0d      	ldr	r2, [pc, #52]	; (8002208 <SystemInit+0xa0>)
 80021d4:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 80021d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021da:	4a0b      	ldr	r2, [pc, #44]	; (8002208 <SystemInit+0xa0>)
 80021dc:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80021de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80021e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021ec:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80021ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021f2:	2200      	movs	r2, #0
 80021f4:	619a      	str	r2, [r3, #24]
}
 80021f6:	bf00      	nop
 80021f8:	46bd      	mov	sp, r7
 80021fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fe:	4770      	bx	lr
 8002200:	e000ed00 	.word	0xe000ed00
 8002204:	faf6fefb 	.word	0xfaf6fefb
 8002208:	22041000 	.word	0x22041000

0800220c <CopyDataInit>:
 800220c:	58d4      	ldr	r4, [r2, r3]
 800220e:	50c4      	str	r4, [r0, r3]
 8002210:	3304      	adds	r3, #4

08002212 <LoopCopyDataInit>:
 8002212:	18c4      	adds	r4, r0, r3
 8002214:	428c      	cmp	r4, r1
 8002216:	d3f9      	bcc.n	800220c <CopyDataInit>
 8002218:	4770      	bx	lr

0800221a <FillZerobss>:
 800221a:	6003      	str	r3, [r0, #0]
 800221c:	3004      	adds	r0, #4

0800221e <LoopFillZerobss>:
 800221e:	4288      	cmp	r0, r1
 8002220:	d3fb      	bcc.n	800221a <FillZerobss>
 8002222:	4770      	bx	lr

08002224 <Reset_Handler>:
 8002224:	480c      	ldr	r0, [pc, #48]	; (8002258 <LoopForever+0x2>)
 8002226:	4685      	mov	sp, r0
 8002228:	f7ff ff9e 	bl	8002168 <SystemInit>
 800222c:	480b      	ldr	r0, [pc, #44]	; (800225c <LoopForever+0x6>)
 800222e:	490c      	ldr	r1, [pc, #48]	; (8002260 <LoopForever+0xa>)
 8002230:	4a0c      	ldr	r2, [pc, #48]	; (8002264 <LoopForever+0xe>)
 8002232:	2300      	movs	r3, #0
 8002234:	f7ff ffed 	bl	8002212 <LoopCopyDataInit>
 8002238:	480b      	ldr	r0, [pc, #44]	; (8002268 <LoopForever+0x12>)
 800223a:	490c      	ldr	r1, [pc, #48]	; (800226c <LoopForever+0x16>)
 800223c:	4a0c      	ldr	r2, [pc, #48]	; (8002270 <LoopForever+0x1a>)
 800223e:	2300      	movs	r3, #0
 8002240:	f7ff ffe7 	bl	8002212 <LoopCopyDataInit>
 8002244:	480b      	ldr	r0, [pc, #44]	; (8002274 <LoopForever+0x1e>)
 8002246:	490c      	ldr	r1, [pc, #48]	; (8002278 <LoopForever+0x22>)
 8002248:	2300      	movs	r3, #0
 800224a:	f7ff ffe8 	bl	800221e <LoopFillZerobss>
 800224e:	f007 f895 	bl	800937c <__libc_init_array>
 8002252:	f7ff fb13 	bl	800187c <main>

08002256 <LoopForever>:
 8002256:	e7fe      	b.n	8002256 <LoopForever>
 8002258:	20030000 	.word	0x20030000
 800225c:	20000008 	.word	0x20000008
 8002260:	2000008c 	.word	0x2000008c
 8002264:	0800a6a4 	.word	0x0800a6a4
 8002268:	200301e3 	.word	0x200301e3
 800226c:	200301e3 	.word	0x200301e3
 8002270:	0800aff1 	.word	0x0800aff1
 8002274:	2000095c 	.word	0x2000095c
 8002278:	20000d24 	.word	0x20000d24

0800227c <ADC1_IRQHandler>:
 800227c:	e7fe      	b.n	800227c <ADC1_IRQHandler>
	...

08002280 <HAL_Init>:
 8002280:	b580      	push	{r7, lr}
 8002282:	b082      	sub	sp, #8
 8002284:	af00      	add	r7, sp, #0
 8002286:	2300      	movs	r3, #0
 8002288:	71fb      	strb	r3, [r7, #7]
 800228a:	4b0c      	ldr	r3, [pc, #48]	; (80022bc <HAL_Init+0x3c>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a0b      	ldr	r2, [pc, #44]	; (80022bc <HAL_Init+0x3c>)
 8002290:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002294:	6013      	str	r3, [r2, #0]
 8002296:	2003      	movs	r0, #3
 8002298:	f000 f9b4 	bl	8002604 <HAL_NVIC_SetPriorityGrouping>
 800229c:	2000      	movs	r0, #0
 800229e:	f000 f80f 	bl	80022c0 <HAL_InitTick>
 80022a2:	4603      	mov	r3, r0
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d002      	beq.n	80022ae <HAL_Init+0x2e>
 80022a8:	2301      	movs	r3, #1
 80022aa:	71fb      	strb	r3, [r7, #7]
 80022ac:	e001      	b.n	80022b2 <HAL_Init+0x32>
 80022ae:	f7ff fd6d 	bl	8001d8c <HAL_MspInit>
 80022b2:	79fb      	ldrb	r3, [r7, #7]
 80022b4:	4618      	mov	r0, r3
 80022b6:	3708      	adds	r7, #8
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}
 80022bc:	58004000 	.word	0x58004000

080022c0 <HAL_InitTick>:
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b084      	sub	sp, #16
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
 80022c8:	2300      	movs	r3, #0
 80022ca:	73fb      	strb	r3, [r7, #15]
 80022cc:	4b17      	ldr	r3, [pc, #92]	; (800232c <HAL_InitTick+0x6c>)
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d024      	beq.n	800231e <HAL_InitTick+0x5e>
 80022d4:	f002 f9a6 	bl	8004624 <HAL_RCC_GetHCLKFreq>
 80022d8:	4602      	mov	r2, r0
 80022da:	4b14      	ldr	r3, [pc, #80]	; (800232c <HAL_InitTick+0x6c>)
 80022dc:	781b      	ldrb	r3, [r3, #0]
 80022de:	4619      	mov	r1, r3
 80022e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022e4:	fbb3 f3f1 	udiv	r3, r3, r1
 80022e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80022ec:	4618      	mov	r0, r3
 80022ee:	f000 f9ca 	bl	8002686 <HAL_SYSTICK_Config>
 80022f2:	4603      	mov	r3, r0
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d10f      	bne.n	8002318 <HAL_InitTick+0x58>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2b0f      	cmp	r3, #15
 80022fc:	d809      	bhi.n	8002312 <HAL_InitTick+0x52>
 80022fe:	2200      	movs	r2, #0
 8002300:	6879      	ldr	r1, [r7, #4]
 8002302:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002306:	f000 f988 	bl	800261a <HAL_NVIC_SetPriority>
 800230a:	4a09      	ldr	r2, [pc, #36]	; (8002330 <HAL_InitTick+0x70>)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6013      	str	r3, [r2, #0]
 8002310:	e007      	b.n	8002322 <HAL_InitTick+0x62>
 8002312:	2301      	movs	r3, #1
 8002314:	73fb      	strb	r3, [r7, #15]
 8002316:	e004      	b.n	8002322 <HAL_InitTick+0x62>
 8002318:	2301      	movs	r3, #1
 800231a:	73fb      	strb	r3, [r7, #15]
 800231c:	e001      	b.n	8002322 <HAL_InitTick+0x62>
 800231e:	2301      	movs	r3, #1
 8002320:	73fb      	strb	r3, [r7, #15]
 8002322:	7bfb      	ldrb	r3, [r7, #15]
 8002324:	4618      	mov	r0, r3
 8002326:	3710      	adds	r7, #16
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}
 800232c:	20000010 	.word	0x20000010
 8002330:	2000000c 	.word	0x2000000c

08002334 <HAL_IncTick>:
 8002334:	b480      	push	{r7}
 8002336:	af00      	add	r7, sp, #0
 8002338:	4b06      	ldr	r3, [pc, #24]	; (8002354 <HAL_IncTick+0x20>)
 800233a:	781b      	ldrb	r3, [r3, #0]
 800233c:	461a      	mov	r2, r3
 800233e:	4b06      	ldr	r3, [pc, #24]	; (8002358 <HAL_IncTick+0x24>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4413      	add	r3, r2
 8002344:	4a04      	ldr	r2, [pc, #16]	; (8002358 <HAL_IncTick+0x24>)
 8002346:	6013      	str	r3, [r2, #0]
 8002348:	bf00      	nop
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr
 8002352:	bf00      	nop
 8002354:	20000010 	.word	0x20000010
 8002358:	20000b64 	.word	0x20000b64

0800235c <HAL_GetTick>:
 800235c:	b480      	push	{r7}
 800235e:	af00      	add	r7, sp, #0
 8002360:	4b03      	ldr	r3, [pc, #12]	; (8002370 <HAL_GetTick+0x14>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4618      	mov	r0, r3
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr
 800236e:	bf00      	nop
 8002370:	20000b64 	.word	0x20000b64

08002374 <HAL_GetTickPrio>:
 8002374:	b480      	push	{r7}
 8002376:	af00      	add	r7, sp, #0
 8002378:	4b03      	ldr	r3, [pc, #12]	; (8002388 <HAL_GetTickPrio+0x14>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4618      	mov	r0, r3
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr
 8002386:	bf00      	nop
 8002388:	2000000c 	.word	0x2000000c

0800238c <HAL_GetTickFreq>:
 800238c:	b480      	push	{r7}
 800238e:	af00      	add	r7, sp, #0
 8002390:	4b03      	ldr	r3, [pc, #12]	; (80023a0 <HAL_GetTickFreq+0x14>)
 8002392:	781b      	ldrb	r3, [r3, #0]
 8002394:	4618      	mov	r0, r3
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr
 800239e:	bf00      	nop
 80023a0:	20000010 	.word	0x20000010

080023a4 <__NVIC_SetPriorityGrouping>:
 80023a4:	b480      	push	{r7}
 80023a6:	b085      	sub	sp, #20
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	f003 0307 	and.w	r3, r3, #7
 80023b2:	60fb      	str	r3, [r7, #12]
 80023b4:	4b0c      	ldr	r3, [pc, #48]	; (80023e8 <__NVIC_SetPriorityGrouping+0x44>)
 80023b6:	68db      	ldr	r3, [r3, #12]
 80023b8:	60bb      	str	r3, [r7, #8]
 80023ba:	68ba      	ldr	r2, [r7, #8]
 80023bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023c0:	4013      	ands	r3, r2
 80023c2:	60bb      	str	r3, [r7, #8]
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	021a      	lsls	r2, r3, #8
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	4313      	orrs	r3, r2
 80023cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80023d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023d4:	60bb      	str	r3, [r7, #8]
 80023d6:	4a04      	ldr	r2, [pc, #16]	; (80023e8 <__NVIC_SetPriorityGrouping+0x44>)
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	60d3      	str	r3, [r2, #12]
 80023dc:	bf00      	nop
 80023de:	3714      	adds	r7, #20
 80023e0:	46bd      	mov	sp, r7
 80023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e6:	4770      	bx	lr
 80023e8:	e000ed00 	.word	0xe000ed00

080023ec <__NVIC_GetPriorityGrouping>:
 80023ec:	b480      	push	{r7}
 80023ee:	af00      	add	r7, sp, #0
 80023f0:	4b04      	ldr	r3, [pc, #16]	; (8002404 <__NVIC_GetPriorityGrouping+0x18>)
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	0a1b      	lsrs	r3, r3, #8
 80023f6:	f003 0307 	and.w	r3, r3, #7
 80023fa:	4618      	mov	r0, r3
 80023fc:	46bd      	mov	sp, r7
 80023fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002402:	4770      	bx	lr
 8002404:	e000ed00 	.word	0xe000ed00

08002408 <__NVIC_EnableIRQ>:
 8002408:	b480      	push	{r7}
 800240a:	b083      	sub	sp, #12
 800240c:	af00      	add	r7, sp, #0
 800240e:	4603      	mov	r3, r0
 8002410:	71fb      	strb	r3, [r7, #7]
 8002412:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002416:	2b00      	cmp	r3, #0
 8002418:	db0b      	blt.n	8002432 <__NVIC_EnableIRQ+0x2a>
 800241a:	79fb      	ldrb	r3, [r7, #7]
 800241c:	f003 021f 	and.w	r2, r3, #31
 8002420:	4907      	ldr	r1, [pc, #28]	; (8002440 <__NVIC_EnableIRQ+0x38>)
 8002422:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002426:	095b      	lsrs	r3, r3, #5
 8002428:	2001      	movs	r0, #1
 800242a:	fa00 f202 	lsl.w	r2, r0, r2
 800242e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8002432:	bf00      	nop
 8002434:	370c      	adds	r7, #12
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr
 800243e:	bf00      	nop
 8002440:	e000e100 	.word	0xe000e100

08002444 <__NVIC_DisableIRQ>:
 8002444:	b480      	push	{r7}
 8002446:	b083      	sub	sp, #12
 8002448:	af00      	add	r7, sp, #0
 800244a:	4603      	mov	r3, r0
 800244c:	71fb      	strb	r3, [r7, #7]
 800244e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002452:	2b00      	cmp	r3, #0
 8002454:	db12      	blt.n	800247c <__NVIC_DisableIRQ+0x38>
 8002456:	79fb      	ldrb	r3, [r7, #7]
 8002458:	f003 021f 	and.w	r2, r3, #31
 800245c:	490a      	ldr	r1, [pc, #40]	; (8002488 <__NVIC_DisableIRQ+0x44>)
 800245e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002462:	095b      	lsrs	r3, r3, #5
 8002464:	2001      	movs	r0, #1
 8002466:	fa00 f202 	lsl.w	r2, r0, r2
 800246a:	3320      	adds	r3, #32
 800246c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8002470:	f3bf 8f4f 	dsb	sy
 8002474:	bf00      	nop
 8002476:	f3bf 8f6f 	isb	sy
 800247a:	bf00      	nop
 800247c:	bf00      	nop
 800247e:	370c      	adds	r7, #12
 8002480:	46bd      	mov	sp, r7
 8002482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002486:	4770      	bx	lr
 8002488:	e000e100 	.word	0xe000e100

0800248c <__NVIC_SetPendingIRQ>:
 800248c:	b480      	push	{r7}
 800248e:	b083      	sub	sp, #12
 8002490:	af00      	add	r7, sp, #0
 8002492:	4603      	mov	r3, r0
 8002494:	71fb      	strb	r3, [r7, #7]
 8002496:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800249a:	2b00      	cmp	r3, #0
 800249c:	db0c      	blt.n	80024b8 <__NVIC_SetPendingIRQ+0x2c>
 800249e:	79fb      	ldrb	r3, [r7, #7]
 80024a0:	f003 021f 	and.w	r2, r3, #31
 80024a4:	4907      	ldr	r1, [pc, #28]	; (80024c4 <__NVIC_SetPendingIRQ+0x38>)
 80024a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024aa:	095b      	lsrs	r3, r3, #5
 80024ac:	2001      	movs	r0, #1
 80024ae:	fa00 f202 	lsl.w	r2, r0, r2
 80024b2:	3340      	adds	r3, #64	; 0x40
 80024b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80024b8:	bf00      	nop
 80024ba:	370c      	adds	r7, #12
 80024bc:	46bd      	mov	sp, r7
 80024be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c2:	4770      	bx	lr
 80024c4:	e000e100 	.word	0xe000e100

080024c8 <__NVIC_ClearPendingIRQ>:
 80024c8:	b480      	push	{r7}
 80024ca:	b083      	sub	sp, #12
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	4603      	mov	r3, r0
 80024d0:	71fb      	strb	r3, [r7, #7]
 80024d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	db0c      	blt.n	80024f4 <__NVIC_ClearPendingIRQ+0x2c>
 80024da:	79fb      	ldrb	r3, [r7, #7]
 80024dc:	f003 021f 	and.w	r2, r3, #31
 80024e0:	4907      	ldr	r1, [pc, #28]	; (8002500 <__NVIC_ClearPendingIRQ+0x38>)
 80024e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024e6:	095b      	lsrs	r3, r3, #5
 80024e8:	2001      	movs	r0, #1
 80024ea:	fa00 f202 	lsl.w	r2, r0, r2
 80024ee:	3360      	adds	r3, #96	; 0x60
 80024f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80024f4:	bf00      	nop
 80024f6:	370c      	adds	r7, #12
 80024f8:	46bd      	mov	sp, r7
 80024fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fe:	4770      	bx	lr
 8002500:	e000e100 	.word	0xe000e100

08002504 <__NVIC_SetPriority>:
 8002504:	b480      	push	{r7}
 8002506:	b083      	sub	sp, #12
 8002508:	af00      	add	r7, sp, #0
 800250a:	4603      	mov	r3, r0
 800250c:	6039      	str	r1, [r7, #0]
 800250e:	71fb      	strb	r3, [r7, #7]
 8002510:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002514:	2b00      	cmp	r3, #0
 8002516:	db0a      	blt.n	800252e <__NVIC_SetPriority+0x2a>
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	b2da      	uxtb	r2, r3
 800251c:	490c      	ldr	r1, [pc, #48]	; (8002550 <__NVIC_SetPriority+0x4c>)
 800251e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002522:	0112      	lsls	r2, r2, #4
 8002524:	b2d2      	uxtb	r2, r2
 8002526:	440b      	add	r3, r1
 8002528:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 800252c:	e00a      	b.n	8002544 <__NVIC_SetPriority+0x40>
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	b2da      	uxtb	r2, r3
 8002532:	4908      	ldr	r1, [pc, #32]	; (8002554 <__NVIC_SetPriority+0x50>)
 8002534:	79fb      	ldrb	r3, [r7, #7]
 8002536:	f003 030f 	and.w	r3, r3, #15
 800253a:	3b04      	subs	r3, #4
 800253c:	0112      	lsls	r2, r2, #4
 800253e:	b2d2      	uxtb	r2, r2
 8002540:	440b      	add	r3, r1
 8002542:	761a      	strb	r2, [r3, #24]
 8002544:	bf00      	nop
 8002546:	370c      	adds	r7, #12
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr
 8002550:	e000e100 	.word	0xe000e100
 8002554:	e000ed00 	.word	0xe000ed00

08002558 <NVIC_EncodePriority>:
 8002558:	b480      	push	{r7}
 800255a:	b089      	sub	sp, #36	; 0x24
 800255c:	af00      	add	r7, sp, #0
 800255e:	60f8      	str	r0, [r7, #12]
 8002560:	60b9      	str	r1, [r7, #8]
 8002562:	607a      	str	r2, [r7, #4]
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	f003 0307 	and.w	r3, r3, #7
 800256a:	61fb      	str	r3, [r7, #28]
 800256c:	69fb      	ldr	r3, [r7, #28]
 800256e:	f1c3 0307 	rsb	r3, r3, #7
 8002572:	2b04      	cmp	r3, #4
 8002574:	bf28      	it	cs
 8002576:	2304      	movcs	r3, #4
 8002578:	61bb      	str	r3, [r7, #24]
 800257a:	69fb      	ldr	r3, [r7, #28]
 800257c:	3304      	adds	r3, #4
 800257e:	2b06      	cmp	r3, #6
 8002580:	d902      	bls.n	8002588 <NVIC_EncodePriority+0x30>
 8002582:	69fb      	ldr	r3, [r7, #28]
 8002584:	3b03      	subs	r3, #3
 8002586:	e000      	b.n	800258a <NVIC_EncodePriority+0x32>
 8002588:	2300      	movs	r3, #0
 800258a:	617b      	str	r3, [r7, #20]
 800258c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002590:	69bb      	ldr	r3, [r7, #24]
 8002592:	fa02 f303 	lsl.w	r3, r2, r3
 8002596:	43da      	mvns	r2, r3
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	401a      	ands	r2, r3
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	409a      	lsls	r2, r3
 80025a0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	fa01 f303 	lsl.w	r3, r1, r3
 80025aa:	43d9      	mvns	r1, r3
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	400b      	ands	r3, r1
 80025b0:	4313      	orrs	r3, r2
 80025b2:	4618      	mov	r0, r3
 80025b4:	3724      	adds	r7, #36	; 0x24
 80025b6:	46bd      	mov	sp, r7
 80025b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025bc:	4770      	bx	lr
	...

080025c0 <SysTick_Config>:
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b082      	sub	sp, #8
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	3b01      	subs	r3, #1
 80025cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025d0:	d301      	bcc.n	80025d6 <SysTick_Config+0x16>
 80025d2:	2301      	movs	r3, #1
 80025d4:	e00f      	b.n	80025f6 <SysTick_Config+0x36>
 80025d6:	4a0a      	ldr	r2, [pc, #40]	; (8002600 <SysTick_Config+0x40>)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	3b01      	subs	r3, #1
 80025dc:	6053      	str	r3, [r2, #4]
 80025de:	210f      	movs	r1, #15
 80025e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80025e4:	f7ff ff8e 	bl	8002504 <__NVIC_SetPriority>
 80025e8:	4b05      	ldr	r3, [pc, #20]	; (8002600 <SysTick_Config+0x40>)
 80025ea:	2200      	movs	r2, #0
 80025ec:	609a      	str	r2, [r3, #8]
 80025ee:	4b04      	ldr	r3, [pc, #16]	; (8002600 <SysTick_Config+0x40>)
 80025f0:	2207      	movs	r2, #7
 80025f2:	601a      	str	r2, [r3, #0]
 80025f4:	2300      	movs	r3, #0
 80025f6:	4618      	mov	r0, r3
 80025f8:	3708      	adds	r7, #8
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	e000e010 	.word	0xe000e010

08002604 <HAL_NVIC_SetPriorityGrouping>:
 8002604:	b580      	push	{r7, lr}
 8002606:	b082      	sub	sp, #8
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
 800260c:	6878      	ldr	r0, [r7, #4]
 800260e:	f7ff fec9 	bl	80023a4 <__NVIC_SetPriorityGrouping>
 8002612:	bf00      	nop
 8002614:	3708      	adds	r7, #8
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}

0800261a <HAL_NVIC_SetPriority>:
 800261a:	b580      	push	{r7, lr}
 800261c:	b086      	sub	sp, #24
 800261e:	af00      	add	r7, sp, #0
 8002620:	4603      	mov	r3, r0
 8002622:	60b9      	str	r1, [r7, #8]
 8002624:	607a      	str	r2, [r7, #4]
 8002626:	73fb      	strb	r3, [r7, #15]
 8002628:	f7ff fee0 	bl	80023ec <__NVIC_GetPriorityGrouping>
 800262c:	6178      	str	r0, [r7, #20]
 800262e:	687a      	ldr	r2, [r7, #4]
 8002630:	68b9      	ldr	r1, [r7, #8]
 8002632:	6978      	ldr	r0, [r7, #20]
 8002634:	f7ff ff90 	bl	8002558 <NVIC_EncodePriority>
 8002638:	4602      	mov	r2, r0
 800263a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800263e:	4611      	mov	r1, r2
 8002640:	4618      	mov	r0, r3
 8002642:	f7ff ff5f 	bl	8002504 <__NVIC_SetPriority>
 8002646:	bf00      	nop
 8002648:	3718      	adds	r7, #24
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}

0800264e <HAL_NVIC_EnableIRQ>:
 800264e:	b580      	push	{r7, lr}
 8002650:	b082      	sub	sp, #8
 8002652:	af00      	add	r7, sp, #0
 8002654:	4603      	mov	r3, r0
 8002656:	71fb      	strb	r3, [r7, #7]
 8002658:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800265c:	4618      	mov	r0, r3
 800265e:	f7ff fed3 	bl	8002408 <__NVIC_EnableIRQ>
 8002662:	bf00      	nop
 8002664:	3708      	adds	r7, #8
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}

0800266a <HAL_NVIC_DisableIRQ>:
 800266a:	b580      	push	{r7, lr}
 800266c:	b082      	sub	sp, #8
 800266e:	af00      	add	r7, sp, #0
 8002670:	4603      	mov	r3, r0
 8002672:	71fb      	strb	r3, [r7, #7]
 8002674:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002678:	4618      	mov	r0, r3
 800267a:	f7ff fee3 	bl	8002444 <__NVIC_DisableIRQ>
 800267e:	bf00      	nop
 8002680:	3708      	adds	r7, #8
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}

08002686 <HAL_SYSTICK_Config>:
 8002686:	b580      	push	{r7, lr}
 8002688:	b082      	sub	sp, #8
 800268a:	af00      	add	r7, sp, #0
 800268c:	6078      	str	r0, [r7, #4]
 800268e:	6878      	ldr	r0, [r7, #4]
 8002690:	f7ff ff96 	bl	80025c0 <SysTick_Config>
 8002694:	4603      	mov	r3, r0
 8002696:	4618      	mov	r0, r3
 8002698:	3708      	adds	r7, #8
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}

0800269e <HAL_NVIC_SetPendingIRQ>:
 800269e:	b580      	push	{r7, lr}
 80026a0:	b082      	sub	sp, #8
 80026a2:	af00      	add	r7, sp, #0
 80026a4:	4603      	mov	r3, r0
 80026a6:	71fb      	strb	r3, [r7, #7]
 80026a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ac:	4618      	mov	r0, r3
 80026ae:	f7ff feed 	bl	800248c <__NVIC_SetPendingIRQ>
 80026b2:	bf00      	nop
 80026b4:	3708      	adds	r7, #8
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}

080026ba <HAL_NVIC_ClearPendingIRQ>:
 80026ba:	b580      	push	{r7, lr}
 80026bc:	b082      	sub	sp, #8
 80026be:	af00      	add	r7, sp, #0
 80026c0:	4603      	mov	r3, r0
 80026c2:	71fb      	strb	r3, [r7, #7]
 80026c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026c8:	4618      	mov	r0, r3
 80026ca:	f7ff fefd 	bl	80024c8 <__NVIC_ClearPendingIRQ>
 80026ce:	bf00      	nop
 80026d0:	3708      	adds	r7, #8
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
	...

080026d8 <HAL_GPIO_Init>:
 80026d8:	b480      	push	{r7}
 80026da:	b087      	sub	sp, #28
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
 80026e0:	6039      	str	r1, [r7, #0]
 80026e2:	2300      	movs	r3, #0
 80026e4:	617b      	str	r3, [r7, #20]
 80026e6:	e14c      	b.n	8002982 <HAL_GPIO_Init+0x2aa>
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	681a      	ldr	r2, [r3, #0]
 80026ec:	2101      	movs	r1, #1
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	fa01 f303 	lsl.w	r3, r1, r3
 80026f4:	4013      	ands	r3, r2
 80026f6:	60fb      	str	r3, [r7, #12]
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	f000 813e 	beq.w	800297c <HAL_GPIO_Init+0x2a4>
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	f003 0303 	and.w	r3, r3, #3
 8002708:	2b01      	cmp	r3, #1
 800270a:	d005      	beq.n	8002718 <HAL_GPIO_Init+0x40>
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	f003 0303 	and.w	r3, r3, #3
 8002714:	2b02      	cmp	r3, #2
 8002716:	d130      	bne.n	800277a <HAL_GPIO_Init+0xa2>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	613b      	str	r3, [r7, #16]
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	005b      	lsls	r3, r3, #1
 8002722:	2203      	movs	r2, #3
 8002724:	fa02 f303 	lsl.w	r3, r2, r3
 8002728:	43db      	mvns	r3, r3
 800272a:	693a      	ldr	r2, [r7, #16]
 800272c:	4013      	ands	r3, r2
 800272e:	613b      	str	r3, [r7, #16]
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	68da      	ldr	r2, [r3, #12]
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	005b      	lsls	r3, r3, #1
 8002738:	fa02 f303 	lsl.w	r3, r2, r3
 800273c:	693a      	ldr	r2, [r7, #16]
 800273e:	4313      	orrs	r3, r2
 8002740:	613b      	str	r3, [r7, #16]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	693a      	ldr	r2, [r7, #16]
 8002746:	609a      	str	r2, [r3, #8]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	613b      	str	r3, [r7, #16]
 800274e:	2201      	movs	r2, #1
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	fa02 f303 	lsl.w	r3, r2, r3
 8002756:	43db      	mvns	r3, r3
 8002758:	693a      	ldr	r2, [r7, #16]
 800275a:	4013      	ands	r3, r2
 800275c:	613b      	str	r3, [r7, #16]
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	091b      	lsrs	r3, r3, #4
 8002764:	f003 0201 	and.w	r2, r3, #1
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	fa02 f303 	lsl.w	r3, r2, r3
 800276e:	693a      	ldr	r2, [r7, #16]
 8002770:	4313      	orrs	r3, r2
 8002772:	613b      	str	r3, [r7, #16]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	693a      	ldr	r2, [r7, #16]
 8002778:	605a      	str	r2, [r3, #4]
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	f003 0303 	and.w	r3, r3, #3
 8002782:	2b03      	cmp	r3, #3
 8002784:	d017      	beq.n	80027b6 <HAL_GPIO_Init+0xde>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	68db      	ldr	r3, [r3, #12]
 800278a:	613b      	str	r3, [r7, #16]
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	005b      	lsls	r3, r3, #1
 8002790:	2203      	movs	r2, #3
 8002792:	fa02 f303 	lsl.w	r3, r2, r3
 8002796:	43db      	mvns	r3, r3
 8002798:	693a      	ldr	r2, [r7, #16]
 800279a:	4013      	ands	r3, r2
 800279c:	613b      	str	r3, [r7, #16]
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	689a      	ldr	r2, [r3, #8]
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	005b      	lsls	r3, r3, #1
 80027a6:	fa02 f303 	lsl.w	r3, r2, r3
 80027aa:	693a      	ldr	r2, [r7, #16]
 80027ac:	4313      	orrs	r3, r2
 80027ae:	613b      	str	r3, [r7, #16]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	693a      	ldr	r2, [r7, #16]
 80027b4:	60da      	str	r2, [r3, #12]
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	f003 0303 	and.w	r3, r3, #3
 80027be:	2b02      	cmp	r3, #2
 80027c0:	d123      	bne.n	800280a <HAL_GPIO_Init+0x132>
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	08da      	lsrs	r2, r3, #3
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	3208      	adds	r2, #8
 80027ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027ce:	613b      	str	r3, [r7, #16]
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	f003 0307 	and.w	r3, r3, #7
 80027d6:	009b      	lsls	r3, r3, #2
 80027d8:	220f      	movs	r2, #15
 80027da:	fa02 f303 	lsl.w	r3, r2, r3
 80027de:	43db      	mvns	r3, r3
 80027e0:	693a      	ldr	r2, [r7, #16]
 80027e2:	4013      	ands	r3, r2
 80027e4:	613b      	str	r3, [r7, #16]
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	691a      	ldr	r2, [r3, #16]
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	f003 0307 	and.w	r3, r3, #7
 80027f0:	009b      	lsls	r3, r3, #2
 80027f2:	fa02 f303 	lsl.w	r3, r2, r3
 80027f6:	693a      	ldr	r2, [r7, #16]
 80027f8:	4313      	orrs	r3, r2
 80027fa:	613b      	str	r3, [r7, #16]
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	08da      	lsrs	r2, r3, #3
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	3208      	adds	r2, #8
 8002804:	6939      	ldr	r1, [r7, #16]
 8002806:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	613b      	str	r3, [r7, #16]
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	005b      	lsls	r3, r3, #1
 8002814:	2203      	movs	r2, #3
 8002816:	fa02 f303 	lsl.w	r3, r2, r3
 800281a:	43db      	mvns	r3, r3
 800281c:	693a      	ldr	r2, [r7, #16]
 800281e:	4013      	ands	r3, r2
 8002820:	613b      	str	r3, [r7, #16]
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	f003 0203 	and.w	r2, r3, #3
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	005b      	lsls	r3, r3, #1
 800282e:	fa02 f303 	lsl.w	r3, r2, r3
 8002832:	693a      	ldr	r2, [r7, #16]
 8002834:	4313      	orrs	r3, r2
 8002836:	613b      	str	r3, [r7, #16]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	693a      	ldr	r2, [r7, #16]
 800283c:	601a      	str	r2, [r3, #0]
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002846:	2b00      	cmp	r3, #0
 8002848:	f000 8098 	beq.w	800297c <HAL_GPIO_Init+0x2a4>
 800284c:	4a54      	ldr	r2, [pc, #336]	; (80029a0 <HAL_GPIO_Init+0x2c8>)
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	089b      	lsrs	r3, r3, #2
 8002852:	3302      	adds	r3, #2
 8002854:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002858:	613b      	str	r3, [r7, #16]
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	f003 0303 	and.w	r3, r3, #3
 8002860:	009b      	lsls	r3, r3, #2
 8002862:	220f      	movs	r2, #15
 8002864:	fa02 f303 	lsl.w	r3, r2, r3
 8002868:	43db      	mvns	r3, r3
 800286a:	693a      	ldr	r2, [r7, #16]
 800286c:	4013      	ands	r3, r2
 800286e:	613b      	str	r3, [r7, #16]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002876:	d019      	beq.n	80028ac <HAL_GPIO_Init+0x1d4>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	4a4a      	ldr	r2, [pc, #296]	; (80029a4 <HAL_GPIO_Init+0x2cc>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d013      	beq.n	80028a8 <HAL_GPIO_Init+0x1d0>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	4a49      	ldr	r2, [pc, #292]	; (80029a8 <HAL_GPIO_Init+0x2d0>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d00d      	beq.n	80028a4 <HAL_GPIO_Init+0x1cc>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	4a48      	ldr	r2, [pc, #288]	; (80029ac <HAL_GPIO_Init+0x2d4>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d007      	beq.n	80028a0 <HAL_GPIO_Init+0x1c8>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	4a47      	ldr	r2, [pc, #284]	; (80029b0 <HAL_GPIO_Init+0x2d8>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d101      	bne.n	800289c <HAL_GPIO_Init+0x1c4>
 8002898:	2304      	movs	r3, #4
 800289a:	e008      	b.n	80028ae <HAL_GPIO_Init+0x1d6>
 800289c:	2307      	movs	r3, #7
 800289e:	e006      	b.n	80028ae <HAL_GPIO_Init+0x1d6>
 80028a0:	2303      	movs	r3, #3
 80028a2:	e004      	b.n	80028ae <HAL_GPIO_Init+0x1d6>
 80028a4:	2302      	movs	r3, #2
 80028a6:	e002      	b.n	80028ae <HAL_GPIO_Init+0x1d6>
 80028a8:	2301      	movs	r3, #1
 80028aa:	e000      	b.n	80028ae <HAL_GPIO_Init+0x1d6>
 80028ac:	2300      	movs	r3, #0
 80028ae:	697a      	ldr	r2, [r7, #20]
 80028b0:	f002 0203 	and.w	r2, r2, #3
 80028b4:	0092      	lsls	r2, r2, #2
 80028b6:	4093      	lsls	r3, r2
 80028b8:	693a      	ldr	r2, [r7, #16]
 80028ba:	4313      	orrs	r3, r2
 80028bc:	613b      	str	r3, [r7, #16]
 80028be:	4938      	ldr	r1, [pc, #224]	; (80029a0 <HAL_GPIO_Init+0x2c8>)
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	089b      	lsrs	r3, r3, #2
 80028c4:	3302      	adds	r3, #2
 80028c6:	693a      	ldr	r2, [r7, #16]
 80028c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80028cc:	4b39      	ldr	r3, [pc, #228]	; (80029b4 <HAL_GPIO_Init+0x2dc>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	613b      	str	r3, [r7, #16]
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	43db      	mvns	r3, r3
 80028d6:	693a      	ldr	r2, [r7, #16]
 80028d8:	4013      	ands	r3, r2
 80028da:	613b      	str	r3, [r7, #16]
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d003      	beq.n	80028f0 <HAL_GPIO_Init+0x218>
 80028e8:	693a      	ldr	r2, [r7, #16]
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	4313      	orrs	r3, r2
 80028ee:	613b      	str	r3, [r7, #16]
 80028f0:	4a30      	ldr	r2, [pc, #192]	; (80029b4 <HAL_GPIO_Init+0x2dc>)
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	6013      	str	r3, [r2, #0]
 80028f6:	4b2f      	ldr	r3, [pc, #188]	; (80029b4 <HAL_GPIO_Init+0x2dc>)
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	613b      	str	r3, [r7, #16]
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	43db      	mvns	r3, r3
 8002900:	693a      	ldr	r2, [r7, #16]
 8002902:	4013      	ands	r3, r2
 8002904:	613b      	str	r3, [r7, #16]
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800290e:	2b00      	cmp	r3, #0
 8002910:	d003      	beq.n	800291a <HAL_GPIO_Init+0x242>
 8002912:	693a      	ldr	r2, [r7, #16]
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	4313      	orrs	r3, r2
 8002918:	613b      	str	r3, [r7, #16]
 800291a:	4a26      	ldr	r2, [pc, #152]	; (80029b4 <HAL_GPIO_Init+0x2dc>)
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	6053      	str	r3, [r2, #4]
 8002920:	4b24      	ldr	r3, [pc, #144]	; (80029b4 <HAL_GPIO_Init+0x2dc>)
 8002922:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002926:	613b      	str	r3, [r7, #16]
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	43db      	mvns	r3, r3
 800292c:	693a      	ldr	r2, [r7, #16]
 800292e:	4013      	ands	r3, r2
 8002930:	613b      	str	r3, [r7, #16]
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800293a:	2b00      	cmp	r3, #0
 800293c:	d003      	beq.n	8002946 <HAL_GPIO_Init+0x26e>
 800293e:	693a      	ldr	r2, [r7, #16]
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	4313      	orrs	r3, r2
 8002944:	613b      	str	r3, [r7, #16]
 8002946:	4a1b      	ldr	r2, [pc, #108]	; (80029b4 <HAL_GPIO_Init+0x2dc>)
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800294e:	4b19      	ldr	r3, [pc, #100]	; (80029b4 <HAL_GPIO_Init+0x2dc>)
 8002950:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002954:	613b      	str	r3, [r7, #16]
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	43db      	mvns	r3, r3
 800295a:	693a      	ldr	r2, [r7, #16]
 800295c:	4013      	ands	r3, r2
 800295e:	613b      	str	r3, [r7, #16]
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002968:	2b00      	cmp	r3, #0
 800296a:	d003      	beq.n	8002974 <HAL_GPIO_Init+0x29c>
 800296c:	693a      	ldr	r2, [r7, #16]
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	4313      	orrs	r3, r2
 8002972:	613b      	str	r3, [r7, #16]
 8002974:	4a0f      	ldr	r2, [pc, #60]	; (80029b4 <HAL_GPIO_Init+0x2dc>)
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	3301      	adds	r3, #1
 8002980:	617b      	str	r3, [r7, #20]
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	fa22 f303 	lsr.w	r3, r2, r3
 800298c:	2b00      	cmp	r3, #0
 800298e:	f47f aeab 	bne.w	80026e8 <HAL_GPIO_Init+0x10>
 8002992:	bf00      	nop
 8002994:	bf00      	nop
 8002996:	371c      	adds	r7, #28
 8002998:	46bd      	mov	sp, r7
 800299a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299e:	4770      	bx	lr
 80029a0:	40010000 	.word	0x40010000
 80029a4:	48000400 	.word	0x48000400
 80029a8:	48000800 	.word	0x48000800
 80029ac:	48000c00 	.word	0x48000c00
 80029b0:	48001000 	.word	0x48001000
 80029b4:	58000800 	.word	0x58000800

080029b8 <HAL_GPIO_WritePin>:
 80029b8:	b480      	push	{r7}
 80029ba:	b083      	sub	sp, #12
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
 80029c0:	460b      	mov	r3, r1
 80029c2:	807b      	strh	r3, [r7, #2]
 80029c4:	4613      	mov	r3, r2
 80029c6:	707b      	strb	r3, [r7, #1]
 80029c8:	787b      	ldrb	r3, [r7, #1]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d003      	beq.n	80029d6 <HAL_GPIO_WritePin+0x1e>
 80029ce:	887a      	ldrh	r2, [r7, #2]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	619a      	str	r2, [r3, #24]
 80029d4:	e002      	b.n	80029dc <HAL_GPIO_WritePin+0x24>
 80029d6:	887a      	ldrh	r2, [r7, #2]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	629a      	str	r2, [r3, #40]	; 0x28
 80029dc:	bf00      	nop
 80029de:	370c      	adds	r7, #12
 80029e0:	46bd      	mov	sp, r7
 80029e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e6:	4770      	bx	lr

080029e8 <HAL_HSEM_IRQHandler>:
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b082      	sub	sp, #8
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	4b0a      	ldr	r3, [pc, #40]	; (8002a18 <HAL_HSEM_IRQHandler+0x30>)
 80029f0:	68db      	ldr	r3, [r3, #12]
 80029f2:	607b      	str	r3, [r7, #4]
 80029f4:	4b08      	ldr	r3, [pc, #32]	; (8002a18 <HAL_HSEM_IRQHandler+0x30>)
 80029f6:	681a      	ldr	r2, [r3, #0]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	43db      	mvns	r3, r3
 80029fc:	4906      	ldr	r1, [pc, #24]	; (8002a18 <HAL_HSEM_IRQHandler+0x30>)
 80029fe:	4013      	ands	r3, r2
 8002a00:	600b      	str	r3, [r1, #0]
 8002a02:	4a05      	ldr	r2, [pc, #20]	; (8002a18 <HAL_HSEM_IRQHandler+0x30>)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6053      	str	r3, [r2, #4]
 8002a08:	6878      	ldr	r0, [r7, #4]
 8002a0a:	f000 f807 	bl	8002a1c <HAL_HSEM_FreeCallback>
 8002a0e:	bf00      	nop
 8002a10:	3708      	adds	r7, #8
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	bf00      	nop
 8002a18:	58001500 	.word	0x58001500

08002a1c <HAL_HSEM_FreeCallback>:
 8002a1c:	b480      	push	{r7}
 8002a1e:	b083      	sub	sp, #12
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
 8002a24:	bf00      	nop
 8002a26:	370c      	adds	r7, #12
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2e:	4770      	bx	lr

08002a30 <HAL_I2C_Init>:
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b082      	sub	sp, #8
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d101      	bne.n	8002a42 <HAL_I2C_Init+0x12>
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e081      	b.n	8002b46 <HAL_I2C_Init+0x116>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d106      	bne.n	8002a5c <HAL_I2C_Init+0x2c>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2200      	movs	r2, #0
 8002a52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a56:	6878      	ldr	r0, [r7, #4]
 8002a58:	f7ff f9a8 	bl	8001dac <HAL_I2C_MspInit>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2224      	movs	r2, #36	; 0x24
 8002a60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	681a      	ldr	r2, [r3, #0]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f022 0201 	bic.w	r2, r2, #1
 8002a72:	601a      	str	r2, [r3, #0]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	685a      	ldr	r2, [r3, #4]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002a80:	611a      	str	r2, [r3, #16]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	689a      	ldr	r2, [r3, #8]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002a90:	609a      	str	r2, [r3, #8]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	68db      	ldr	r3, [r3, #12]
 8002a96:	2b01      	cmp	r3, #1
 8002a98:	d107      	bne.n	8002aaa <HAL_I2C_Init+0x7a>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	689a      	ldr	r2, [r3, #8]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002aa6:	609a      	str	r2, [r3, #8]
 8002aa8:	e006      	b.n	8002ab8 <HAL_I2C_Init+0x88>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	689a      	ldr	r2, [r3, #8]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002ab6:	609a      	str	r2, [r3, #8]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	68db      	ldr	r3, [r3, #12]
 8002abc:	2b02      	cmp	r3, #2
 8002abe:	d104      	bne.n	8002aca <HAL_I2C_Init+0x9a>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002ac8:	605a      	str	r2, [r3, #4]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	687a      	ldr	r2, [r7, #4]
 8002ad2:	6812      	ldr	r2, [r2, #0]
 8002ad4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002ad8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002adc:	6053      	str	r3, [r2, #4]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	68da      	ldr	r2, [r3, #12]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002aec:	60da      	str	r2, [r3, #12]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	691a      	ldr	r2, [r3, #16]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	695b      	ldr	r3, [r3, #20]
 8002af6:	ea42 0103 	orr.w	r1, r2, r3
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	699b      	ldr	r3, [r3, #24]
 8002afe:	021a      	lsls	r2, r3, #8
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	430a      	orrs	r2, r1
 8002b06:	60da      	str	r2, [r3, #12]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	69d9      	ldr	r1, [r3, #28]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6a1a      	ldr	r2, [r3, #32]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	430a      	orrs	r2, r1
 8002b16:	601a      	str	r2, [r3, #0]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f042 0201 	orr.w	r2, r2, #1
 8002b26:	601a      	str	r2, [r3, #0]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	645a      	str	r2, [r3, #68]	; 0x44
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2220      	movs	r2, #32
 8002b32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	631a      	str	r2, [r3, #48]	; 0x30
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b44:	2300      	movs	r3, #0
 8002b46:	4618      	mov	r0, r3
 8002b48:	3708      	adds	r7, #8
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}
	...

08002b50 <HAL_I2C_Mem_Read>:
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b088      	sub	sp, #32
 8002b54:	af02      	add	r7, sp, #8
 8002b56:	60f8      	str	r0, [r7, #12]
 8002b58:	4608      	mov	r0, r1
 8002b5a:	4611      	mov	r1, r2
 8002b5c:	461a      	mov	r2, r3
 8002b5e:	4603      	mov	r3, r0
 8002b60:	817b      	strh	r3, [r7, #10]
 8002b62:	460b      	mov	r3, r1
 8002b64:	813b      	strh	r3, [r7, #8]
 8002b66:	4613      	mov	r3, r2
 8002b68:	80fb      	strh	r3, [r7, #6]
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b70:	b2db      	uxtb	r3, r3
 8002b72:	2b20      	cmp	r3, #32
 8002b74:	f040 80fd 	bne.w	8002d72 <HAL_I2C_Mem_Read+0x222>
 8002b78:	6a3b      	ldr	r3, [r7, #32]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d002      	beq.n	8002b84 <HAL_I2C_Mem_Read+0x34>
 8002b7e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d105      	bne.n	8002b90 <HAL_I2C_Mem_Read+0x40>
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b8a:	645a      	str	r2, [r3, #68]	; 0x44
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	e0f1      	b.n	8002d74 <HAL_I2C_Mem_Read+0x224>
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	d101      	bne.n	8002b9e <HAL_I2C_Mem_Read+0x4e>
 8002b9a:	2302      	movs	r3, #2
 8002b9c:	e0ea      	b.n	8002d74 <HAL_I2C_Mem_Read+0x224>
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ba6:	f7ff fbd9 	bl	800235c <HAL_GetTick>
 8002baa:	6178      	str	r0, [r7, #20]
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	9300      	str	r3, [sp, #0]
 8002bb0:	2319      	movs	r3, #25
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002bb8:	68f8      	ldr	r0, [r7, #12]
 8002bba:	f000 f975 	bl	8002ea8 <I2C_WaitOnFlagUntilTimeout>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d001      	beq.n	8002bc8 <HAL_I2C_Mem_Read+0x78>
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	e0d5      	b.n	8002d74 <HAL_I2C_Mem_Read+0x224>
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2222      	movs	r2, #34	; 0x22
 8002bcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	2240      	movs	r2, #64	; 0x40
 8002bd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	645a      	str	r2, [r3, #68]	; 0x44
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	6a3a      	ldr	r2, [r7, #32]
 8002be2:	625a      	str	r2, [r3, #36]	; 0x24
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002be8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2200      	movs	r2, #0
 8002bee:	635a      	str	r2, [r3, #52]	; 0x34
 8002bf0:	88f8      	ldrh	r0, [r7, #6]
 8002bf2:	893a      	ldrh	r2, [r7, #8]
 8002bf4:	8979      	ldrh	r1, [r7, #10]
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	9301      	str	r3, [sp, #4]
 8002bfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bfc:	9300      	str	r3, [sp, #0]
 8002bfe:	4603      	mov	r3, r0
 8002c00:	68f8      	ldr	r0, [r7, #12]
 8002c02:	f000 f8d9 	bl	8002db8 <I2C_RequestMemoryRead>
 8002c06:	4603      	mov	r3, r0
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d005      	beq.n	8002c18 <HAL_I2C_Mem_Read+0xc8>
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c14:	2301      	movs	r3, #1
 8002c16:	e0ad      	b.n	8002d74 <HAL_I2C_Mem_Read+0x224>
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c1c:	b29b      	uxth	r3, r3
 8002c1e:	2bff      	cmp	r3, #255	; 0xff
 8002c20:	d90e      	bls.n	8002c40 <HAL_I2C_Mem_Read+0xf0>
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	22ff      	movs	r2, #255	; 0xff
 8002c26:	851a      	strh	r2, [r3, #40]	; 0x28
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c2c:	b2da      	uxtb	r2, r3
 8002c2e:	8979      	ldrh	r1, [r7, #10]
 8002c30:	4b52      	ldr	r3, [pc, #328]	; (8002d7c <HAL_I2C_Mem_Read+0x22c>)
 8002c32:	9300      	str	r3, [sp, #0]
 8002c34:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002c38:	68f8      	ldr	r0, [r7, #12]
 8002c3a:	f000 faef 	bl	800321c <I2C_TransferConfig>
 8002c3e:	e00f      	b.n	8002c60 <HAL_I2C_Mem_Read+0x110>
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c44:	b29a      	uxth	r2, r3
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	851a      	strh	r2, [r3, #40]	; 0x28
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c4e:	b2da      	uxtb	r2, r3
 8002c50:	8979      	ldrh	r1, [r7, #10]
 8002c52:	4b4a      	ldr	r3, [pc, #296]	; (8002d7c <HAL_I2C_Mem_Read+0x22c>)
 8002c54:	9300      	str	r3, [sp, #0]
 8002c56:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c5a:	68f8      	ldr	r0, [r7, #12]
 8002c5c:	f000 fade 	bl	800321c <I2C_TransferConfig>
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	9300      	str	r3, [sp, #0]
 8002c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c66:	2200      	movs	r2, #0
 8002c68:	2104      	movs	r1, #4
 8002c6a:	68f8      	ldr	r0, [r7, #12]
 8002c6c:	f000 f91c 	bl	8002ea8 <I2C_WaitOnFlagUntilTimeout>
 8002c70:	4603      	mov	r3, r0
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d001      	beq.n	8002c7a <HAL_I2C_Mem_Read+0x12a>
 8002c76:	2301      	movs	r3, #1
 8002c78:	e07c      	b.n	8002d74 <HAL_I2C_Mem_Read+0x224>
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c84:	b2d2      	uxtb	r2, r2
 8002c86:	701a      	strb	r2, [r3, #0]
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c8c:	1c5a      	adds	r2, r3, #1
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	625a      	str	r2, [r3, #36]	; 0x24
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c96:	3b01      	subs	r3, #1
 8002c98:	b29a      	uxth	r2, r3
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	851a      	strh	r2, [r3, #40]	; 0x28
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ca2:	b29b      	uxth	r3, r3
 8002ca4:	3b01      	subs	r3, #1
 8002ca6:	b29a      	uxth	r2, r3
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cb0:	b29b      	uxth	r3, r3
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d034      	beq.n	8002d20 <HAL_I2C_Mem_Read+0x1d0>
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d130      	bne.n	8002d20 <HAL_I2C_Mem_Read+0x1d0>
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	9300      	str	r3, [sp, #0]
 8002cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	2180      	movs	r1, #128	; 0x80
 8002cc8:	68f8      	ldr	r0, [r7, #12]
 8002cca:	f000 f8ed 	bl	8002ea8 <I2C_WaitOnFlagUntilTimeout>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d001      	beq.n	8002cd8 <HAL_I2C_Mem_Read+0x188>
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	e04d      	b.n	8002d74 <HAL_I2C_Mem_Read+0x224>
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cdc:	b29b      	uxth	r3, r3
 8002cde:	2bff      	cmp	r3, #255	; 0xff
 8002ce0:	d90e      	bls.n	8002d00 <HAL_I2C_Mem_Read+0x1b0>
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	22ff      	movs	r2, #255	; 0xff
 8002ce6:	851a      	strh	r2, [r3, #40]	; 0x28
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cec:	b2da      	uxtb	r2, r3
 8002cee:	8979      	ldrh	r1, [r7, #10]
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	9300      	str	r3, [sp, #0]
 8002cf4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002cf8:	68f8      	ldr	r0, [r7, #12]
 8002cfa:	f000 fa8f 	bl	800321c <I2C_TransferConfig>
 8002cfe:	e00f      	b.n	8002d20 <HAL_I2C_Mem_Read+0x1d0>
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d04:	b29a      	uxth	r2, r3
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	851a      	strh	r2, [r3, #40]	; 0x28
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d0e:	b2da      	uxtb	r2, r3
 8002d10:	8979      	ldrh	r1, [r7, #10]
 8002d12:	2300      	movs	r3, #0
 8002d14:	9300      	str	r3, [sp, #0]
 8002d16:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d1a:	68f8      	ldr	r0, [r7, #12]
 8002d1c:	f000 fa7e 	bl	800321c <I2C_TransferConfig>
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d24:	b29b      	uxth	r3, r3
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d19a      	bne.n	8002c60 <HAL_I2C_Mem_Read+0x110>
 8002d2a:	697a      	ldr	r2, [r7, #20]
 8002d2c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002d2e:	68f8      	ldr	r0, [r7, #12]
 8002d30:	f000 f950 	bl	8002fd4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002d34:	4603      	mov	r3, r0
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d001      	beq.n	8002d3e <HAL_I2C_Mem_Read+0x1ee>
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e01a      	b.n	8002d74 <HAL_I2C_Mem_Read+0x224>
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	2220      	movs	r2, #32
 8002d44:	61da      	str	r2, [r3, #28]
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	6859      	ldr	r1, [r3, #4]
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	4b0b      	ldr	r3, [pc, #44]	; (8002d80 <HAL_I2C_Mem_Read+0x230>)
 8002d52:	400b      	ands	r3, r1
 8002d54:	6053      	str	r3, [r2, #4]
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	2220      	movs	r2, #32
 8002d5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	2200      	movs	r2, #0
 8002d62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d6e:	2300      	movs	r3, #0
 8002d70:	e000      	b.n	8002d74 <HAL_I2C_Mem_Read+0x224>
 8002d72:	2302      	movs	r3, #2
 8002d74:	4618      	mov	r0, r3
 8002d76:	3718      	adds	r7, #24
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}
 8002d7c:	80002400 	.word	0x80002400
 8002d80:	fe00e800 	.word	0xfe00e800

08002d84 <HAL_I2C_EV_IRQHandler>:
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b084      	sub	sp, #16
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	699b      	ldr	r3, [r3, #24]
 8002d92:	60fb      	str	r3, [r7, #12]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	60bb      	str	r3, [r7, #8]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d005      	beq.n	8002db0 <HAL_I2C_EV_IRQHandler+0x2c>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002da8:	68ba      	ldr	r2, [r7, #8]
 8002daa:	68f9      	ldr	r1, [r7, #12]
 8002dac:	6878      	ldr	r0, [r7, #4]
 8002dae:	4798      	blx	r3
 8002db0:	bf00      	nop
 8002db2:	3710      	adds	r7, #16
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}

08002db8 <I2C_RequestMemoryRead>:
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b086      	sub	sp, #24
 8002dbc:	af02      	add	r7, sp, #8
 8002dbe:	60f8      	str	r0, [r7, #12]
 8002dc0:	4608      	mov	r0, r1
 8002dc2:	4611      	mov	r1, r2
 8002dc4:	461a      	mov	r2, r3
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	817b      	strh	r3, [r7, #10]
 8002dca:	460b      	mov	r3, r1
 8002dcc:	813b      	strh	r3, [r7, #8]
 8002dce:	4613      	mov	r3, r2
 8002dd0:	80fb      	strh	r3, [r7, #6]
 8002dd2:	88fb      	ldrh	r3, [r7, #6]
 8002dd4:	b2da      	uxtb	r2, r3
 8002dd6:	8979      	ldrh	r1, [r7, #10]
 8002dd8:	4b20      	ldr	r3, [pc, #128]	; (8002e5c <I2C_RequestMemoryRead+0xa4>)
 8002dda:	9300      	str	r3, [sp, #0]
 8002ddc:	2300      	movs	r3, #0
 8002dde:	68f8      	ldr	r0, [r7, #12]
 8002de0:	f000 fa1c 	bl	800321c <I2C_TransferConfig>
 8002de4:	69fa      	ldr	r2, [r7, #28]
 8002de6:	69b9      	ldr	r1, [r7, #24]
 8002de8:	68f8      	ldr	r0, [r7, #12]
 8002dea:	f000 f8ac 	bl	8002f46 <I2C_WaitOnTXISFlagUntilTimeout>
 8002dee:	4603      	mov	r3, r0
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d001      	beq.n	8002df8 <I2C_RequestMemoryRead+0x40>
 8002df4:	2301      	movs	r3, #1
 8002df6:	e02c      	b.n	8002e52 <I2C_RequestMemoryRead+0x9a>
 8002df8:	88fb      	ldrh	r3, [r7, #6]
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	d105      	bne.n	8002e0a <I2C_RequestMemoryRead+0x52>
 8002dfe:	893b      	ldrh	r3, [r7, #8]
 8002e00:	b2da      	uxtb	r2, r3
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	629a      	str	r2, [r3, #40]	; 0x28
 8002e08:	e015      	b.n	8002e36 <I2C_RequestMemoryRead+0x7e>
 8002e0a:	893b      	ldrh	r3, [r7, #8]
 8002e0c:	0a1b      	lsrs	r3, r3, #8
 8002e0e:	b29b      	uxth	r3, r3
 8002e10:	b2da      	uxtb	r2, r3
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	629a      	str	r2, [r3, #40]	; 0x28
 8002e18:	69fa      	ldr	r2, [r7, #28]
 8002e1a:	69b9      	ldr	r1, [r7, #24]
 8002e1c:	68f8      	ldr	r0, [r7, #12]
 8002e1e:	f000 f892 	bl	8002f46 <I2C_WaitOnTXISFlagUntilTimeout>
 8002e22:	4603      	mov	r3, r0
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d001      	beq.n	8002e2c <I2C_RequestMemoryRead+0x74>
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e012      	b.n	8002e52 <I2C_RequestMemoryRead+0x9a>
 8002e2c:	893b      	ldrh	r3, [r7, #8]
 8002e2e:	b2da      	uxtb	r2, r3
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	629a      	str	r2, [r3, #40]	; 0x28
 8002e36:	69fb      	ldr	r3, [r7, #28]
 8002e38:	9300      	str	r3, [sp, #0]
 8002e3a:	69bb      	ldr	r3, [r7, #24]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	2140      	movs	r1, #64	; 0x40
 8002e40:	68f8      	ldr	r0, [r7, #12]
 8002e42:	f000 f831 	bl	8002ea8 <I2C_WaitOnFlagUntilTimeout>
 8002e46:	4603      	mov	r3, r0
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d001      	beq.n	8002e50 <I2C_RequestMemoryRead+0x98>
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	e000      	b.n	8002e52 <I2C_RequestMemoryRead+0x9a>
 8002e50:	2300      	movs	r3, #0
 8002e52:	4618      	mov	r0, r3
 8002e54:	3710      	adds	r7, #16
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}
 8002e5a:	bf00      	nop
 8002e5c:	80002000 	.word	0x80002000

08002e60 <I2C_Flush_TXDR>:
 8002e60:	b480      	push	{r7}
 8002e62:	b083      	sub	sp, #12
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	699b      	ldr	r3, [r3, #24]
 8002e6e:	f003 0302 	and.w	r3, r3, #2
 8002e72:	2b02      	cmp	r3, #2
 8002e74:	d103      	bne.n	8002e7e <I2C_Flush_TXDR+0x1e>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	629a      	str	r2, [r3, #40]	; 0x28
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	699b      	ldr	r3, [r3, #24]
 8002e84:	f003 0301 	and.w	r3, r3, #1
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	d007      	beq.n	8002e9c <I2C_Flush_TXDR+0x3c>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	699a      	ldr	r2, [r3, #24]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f042 0201 	orr.w	r2, r2, #1
 8002e9a:	619a      	str	r2, [r3, #24]
 8002e9c:	bf00      	nop
 8002e9e:	370c      	adds	r7, #12
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea6:	4770      	bx	lr

08002ea8 <I2C_WaitOnFlagUntilTimeout>:
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b084      	sub	sp, #16
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	60f8      	str	r0, [r7, #12]
 8002eb0:	60b9      	str	r1, [r7, #8]
 8002eb2:	603b      	str	r3, [r7, #0]
 8002eb4:	4613      	mov	r3, r2
 8002eb6:	71fb      	strb	r3, [r7, #7]
 8002eb8:	e031      	b.n	8002f1e <I2C_WaitOnFlagUntilTimeout+0x76>
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ec0:	d02d      	beq.n	8002f1e <I2C_WaitOnFlagUntilTimeout+0x76>
 8002ec2:	f7ff fa4b 	bl	800235c <HAL_GetTick>
 8002ec6:	4602      	mov	r2, r0
 8002ec8:	69bb      	ldr	r3, [r7, #24]
 8002eca:	1ad3      	subs	r3, r2, r3
 8002ecc:	683a      	ldr	r2, [r7, #0]
 8002ece:	429a      	cmp	r2, r3
 8002ed0:	d302      	bcc.n	8002ed8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d122      	bne.n	8002f1e <I2C_WaitOnFlagUntilTimeout+0x76>
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	699a      	ldr	r2, [r3, #24]
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	68ba      	ldr	r2, [r7, #8]
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	bf0c      	ite	eq
 8002ee8:	2301      	moveq	r3, #1
 8002eea:	2300      	movne	r3, #0
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	461a      	mov	r2, r3
 8002ef0:	79fb      	ldrb	r3, [r7, #7]
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	d113      	bne.n	8002f1e <I2C_WaitOnFlagUntilTimeout+0x76>
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002efa:	f043 0220 	orr.w	r2, r3, #32
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	645a      	str	r2, [r3, #68]	; 0x44
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	2220      	movs	r2, #32
 8002f06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2200      	movs	r2, #0
 8002f16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e00f      	b.n	8002f3e <I2C_WaitOnFlagUntilTimeout+0x96>
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	699a      	ldr	r2, [r3, #24]
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	4013      	ands	r3, r2
 8002f28:	68ba      	ldr	r2, [r7, #8]
 8002f2a:	429a      	cmp	r2, r3
 8002f2c:	bf0c      	ite	eq
 8002f2e:	2301      	moveq	r3, #1
 8002f30:	2300      	movne	r3, #0
 8002f32:	b2db      	uxtb	r3, r3
 8002f34:	461a      	mov	r2, r3
 8002f36:	79fb      	ldrb	r3, [r7, #7]
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	d0be      	beq.n	8002eba <I2C_WaitOnFlagUntilTimeout+0x12>
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	4618      	mov	r0, r3
 8002f40:	3710      	adds	r7, #16
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}

08002f46 <I2C_WaitOnTXISFlagUntilTimeout>:
 8002f46:	b580      	push	{r7, lr}
 8002f48:	b084      	sub	sp, #16
 8002f4a:	af00      	add	r7, sp, #0
 8002f4c:	60f8      	str	r0, [r7, #12]
 8002f4e:	60b9      	str	r1, [r7, #8]
 8002f50:	607a      	str	r2, [r7, #4]
 8002f52:	e033      	b.n	8002fbc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
 8002f54:	687a      	ldr	r2, [r7, #4]
 8002f56:	68b9      	ldr	r1, [r7, #8]
 8002f58:	68f8      	ldr	r0, [r7, #12]
 8002f5a:	f000 f87f 	bl	800305c <I2C_IsErrorOccurred>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d001      	beq.n	8002f68 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
 8002f64:	2301      	movs	r3, #1
 8002f66:	e031      	b.n	8002fcc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f6e:	d025      	beq.n	8002fbc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
 8002f70:	f7ff f9f4 	bl	800235c <HAL_GetTick>
 8002f74:	4602      	mov	r2, r0
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	1ad3      	subs	r3, r2, r3
 8002f7a:	68ba      	ldr	r2, [r7, #8]
 8002f7c:	429a      	cmp	r2, r3
 8002f7e:	d302      	bcc.n	8002f86 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d11a      	bne.n	8002fbc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	699b      	ldr	r3, [r3, #24]
 8002f8c:	f003 0302 	and.w	r3, r3, #2
 8002f90:	2b02      	cmp	r3, #2
 8002f92:	d013      	beq.n	8002fbc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f98:	f043 0220 	orr.w	r2, r3, #32
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	645a      	str	r2, [r3, #68]	; 0x44
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	2220      	movs	r2, #32
 8002fa4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2200      	movs	r2, #0
 8002fac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002fb8:	2301      	movs	r3, #1
 8002fba:	e007      	b.n	8002fcc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	699b      	ldr	r3, [r3, #24]
 8002fc2:	f003 0302 	and.w	r3, r3, #2
 8002fc6:	2b02      	cmp	r3, #2
 8002fc8:	d1c4      	bne.n	8002f54 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
 8002fca:	2300      	movs	r3, #0
 8002fcc:	4618      	mov	r0, r3
 8002fce:	3710      	adds	r7, #16
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}

08002fd4 <I2C_WaitOnSTOPFlagUntilTimeout>:
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b084      	sub	sp, #16
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	60f8      	str	r0, [r7, #12]
 8002fdc:	60b9      	str	r1, [r7, #8]
 8002fde:	607a      	str	r2, [r7, #4]
 8002fe0:	e02f      	b.n	8003042 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
 8002fe2:	687a      	ldr	r2, [r7, #4]
 8002fe4:	68b9      	ldr	r1, [r7, #8]
 8002fe6:	68f8      	ldr	r0, [r7, #12]
 8002fe8:	f000 f838 	bl	800305c <I2C_IsErrorOccurred>
 8002fec:	4603      	mov	r3, r0
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d001      	beq.n	8002ff6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e02d      	b.n	8003052 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
 8002ff6:	f7ff f9b1 	bl	800235c <HAL_GetTick>
 8002ffa:	4602      	mov	r2, r0
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	1ad3      	subs	r3, r2, r3
 8003000:	68ba      	ldr	r2, [r7, #8]
 8003002:	429a      	cmp	r2, r3
 8003004:	d302      	bcc.n	800300c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d11a      	bne.n	8003042 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	699b      	ldr	r3, [r3, #24]
 8003012:	f003 0320 	and.w	r3, r3, #32
 8003016:	2b20      	cmp	r3, #32
 8003018:	d013      	beq.n	8003042 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800301e:	f043 0220 	orr.w	r2, r3, #32
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	645a      	str	r2, [r3, #68]	; 0x44
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	2220      	movs	r2, #32
 800302a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	2200      	movs	r2, #0
 8003032:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	2200      	movs	r2, #0
 800303a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800303e:	2301      	movs	r3, #1
 8003040:	e007      	b.n	8003052 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	699b      	ldr	r3, [r3, #24]
 8003048:	f003 0320 	and.w	r3, r3, #32
 800304c:	2b20      	cmp	r3, #32
 800304e:	d1c8      	bne.n	8002fe2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
 8003050:	2300      	movs	r3, #0
 8003052:	4618      	mov	r0, r3
 8003054:	3710      	adds	r7, #16
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}
	...

0800305c <I2C_IsErrorOccurred>:
 800305c:	b580      	push	{r7, lr}
 800305e:	b08a      	sub	sp, #40	; 0x28
 8003060:	af00      	add	r7, sp, #0
 8003062:	60f8      	str	r0, [r7, #12]
 8003064:	60b9      	str	r1, [r7, #8]
 8003066:	607a      	str	r2, [r7, #4]
 8003068:	2300      	movs	r3, #0
 800306a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	699b      	ldr	r3, [r3, #24]
 8003074:	61bb      	str	r3, [r7, #24]
 8003076:	2300      	movs	r3, #0
 8003078:	623b      	str	r3, [r7, #32]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	61fb      	str	r3, [r7, #28]
 800307e:	69bb      	ldr	r3, [r7, #24]
 8003080:	f003 0310 	and.w	r3, r3, #16
 8003084:	2b00      	cmp	r3, #0
 8003086:	d068      	beq.n	800315a <I2C_IsErrorOccurred+0xfe>
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	2210      	movs	r2, #16
 800308e:	61da      	str	r2, [r3, #28]
 8003090:	e049      	b.n	8003126 <I2C_IsErrorOccurred+0xca>
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003098:	d045      	beq.n	8003126 <I2C_IsErrorOccurred+0xca>
 800309a:	f7ff f95f 	bl	800235c <HAL_GetTick>
 800309e:	4602      	mov	r2, r0
 80030a0:	69fb      	ldr	r3, [r7, #28]
 80030a2:	1ad3      	subs	r3, r2, r3
 80030a4:	68ba      	ldr	r2, [r7, #8]
 80030a6:	429a      	cmp	r2, r3
 80030a8:	d302      	bcc.n	80030b0 <I2C_IsErrorOccurred+0x54>
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d13a      	bne.n	8003126 <I2C_IsErrorOccurred+0xca>
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030ba:	617b      	str	r3, [r7, #20]
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80030c2:	74fb      	strb	r3, [r7, #19]
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	699b      	ldr	r3, [r3, #24]
 80030ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80030ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030d2:	d121      	bne.n	8003118 <I2C_IsErrorOccurred+0xbc>
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80030da:	d01d      	beq.n	8003118 <I2C_IsErrorOccurred+0xbc>
 80030dc:	7cfb      	ldrb	r3, [r7, #19]
 80030de:	2b20      	cmp	r3, #32
 80030e0:	d01a      	beq.n	8003118 <I2C_IsErrorOccurred+0xbc>
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	685a      	ldr	r2, [r3, #4]
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80030f0:	605a      	str	r2, [r3, #4]
 80030f2:	f7ff f933 	bl	800235c <HAL_GetTick>
 80030f6:	61f8      	str	r0, [r7, #28]
 80030f8:	e00e      	b.n	8003118 <I2C_IsErrorOccurred+0xbc>
 80030fa:	f7ff f92f 	bl	800235c <HAL_GetTick>
 80030fe:	4602      	mov	r2, r0
 8003100:	69fb      	ldr	r3, [r7, #28]
 8003102:	1ad3      	subs	r3, r2, r3
 8003104:	2b19      	cmp	r3, #25
 8003106:	d907      	bls.n	8003118 <I2C_IsErrorOccurred+0xbc>
 8003108:	6a3b      	ldr	r3, [r7, #32]
 800310a:	f043 0320 	orr.w	r3, r3, #32
 800310e:	623b      	str	r3, [r7, #32]
 8003110:	2301      	movs	r3, #1
 8003112:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003116:	e006      	b.n	8003126 <I2C_IsErrorOccurred+0xca>
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	699b      	ldr	r3, [r3, #24]
 800311e:	f003 0320 	and.w	r3, r3, #32
 8003122:	2b20      	cmp	r3, #32
 8003124:	d1e9      	bne.n	80030fa <I2C_IsErrorOccurred+0x9e>
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	699b      	ldr	r3, [r3, #24]
 800312c:	f003 0320 	and.w	r3, r3, #32
 8003130:	2b20      	cmp	r3, #32
 8003132:	d003      	beq.n	800313c <I2C_IsErrorOccurred+0xe0>
 8003134:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003138:	2b00      	cmp	r3, #0
 800313a:	d0aa      	beq.n	8003092 <I2C_IsErrorOccurred+0x36>
 800313c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003140:	2b00      	cmp	r3, #0
 8003142:	d103      	bne.n	800314c <I2C_IsErrorOccurred+0xf0>
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	2220      	movs	r2, #32
 800314a:	61da      	str	r2, [r3, #28]
 800314c:	6a3b      	ldr	r3, [r7, #32]
 800314e:	f043 0304 	orr.w	r3, r3, #4
 8003152:	623b      	str	r3, [r7, #32]
 8003154:	2301      	movs	r3, #1
 8003156:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	699b      	ldr	r3, [r3, #24]
 8003160:	61bb      	str	r3, [r7, #24]
 8003162:	69bb      	ldr	r3, [r7, #24]
 8003164:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003168:	2b00      	cmp	r3, #0
 800316a:	d00b      	beq.n	8003184 <I2C_IsErrorOccurred+0x128>
 800316c:	6a3b      	ldr	r3, [r7, #32]
 800316e:	f043 0301 	orr.w	r3, r3, #1
 8003172:	623b      	str	r3, [r7, #32]
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f44f 7280 	mov.w	r2, #256	; 0x100
 800317c:	61da      	str	r2, [r3, #28]
 800317e:	2301      	movs	r3, #1
 8003180:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003184:	69bb      	ldr	r3, [r7, #24]
 8003186:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800318a:	2b00      	cmp	r3, #0
 800318c:	d00b      	beq.n	80031a6 <I2C_IsErrorOccurred+0x14a>
 800318e:	6a3b      	ldr	r3, [r7, #32]
 8003190:	f043 0308 	orr.w	r3, r3, #8
 8003194:	623b      	str	r3, [r7, #32]
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800319e:	61da      	str	r2, [r3, #28]
 80031a0:	2301      	movs	r3, #1
 80031a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80031a6:	69bb      	ldr	r3, [r7, #24]
 80031a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d00b      	beq.n	80031c8 <I2C_IsErrorOccurred+0x16c>
 80031b0:	6a3b      	ldr	r3, [r7, #32]
 80031b2:	f043 0302 	orr.w	r3, r3, #2
 80031b6:	623b      	str	r3, [r7, #32]
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80031c0:	61da      	str	r2, [r3, #28]
 80031c2:	2301      	movs	r3, #1
 80031c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80031c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d01c      	beq.n	800320a <I2C_IsErrorOccurred+0x1ae>
 80031d0:	68f8      	ldr	r0, [r7, #12]
 80031d2:	f7ff fe45 	bl	8002e60 <I2C_Flush_TXDR>
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	6859      	ldr	r1, [r3, #4]
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681a      	ldr	r2, [r3, #0]
 80031e0:	4b0d      	ldr	r3, [pc, #52]	; (8003218 <I2C_IsErrorOccurred+0x1bc>)
 80031e2:	400b      	ands	r3, r1
 80031e4:	6053      	str	r3, [r2, #4]
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80031ea:	6a3b      	ldr	r3, [r7, #32]
 80031ec:	431a      	orrs	r2, r3
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	645a      	str	r2, [r3, #68]	; 0x44
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	2220      	movs	r2, #32
 80031f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	2200      	movs	r2, #0
 80031fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2200      	movs	r2, #0
 8003206:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800320a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800320e:	4618      	mov	r0, r3
 8003210:	3728      	adds	r7, #40	; 0x28
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}
 8003216:	bf00      	nop
 8003218:	fe00e800 	.word	0xfe00e800

0800321c <I2C_TransferConfig>:
 800321c:	b480      	push	{r7}
 800321e:	b087      	sub	sp, #28
 8003220:	af00      	add	r7, sp, #0
 8003222:	60f8      	str	r0, [r7, #12]
 8003224:	607b      	str	r3, [r7, #4]
 8003226:	460b      	mov	r3, r1
 8003228:	817b      	strh	r3, [r7, #10]
 800322a:	4613      	mov	r3, r2
 800322c:	727b      	strb	r3, [r7, #9]
 800322e:	897b      	ldrh	r3, [r7, #10]
 8003230:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003234:	7a7b      	ldrb	r3, [r7, #9]
 8003236:	041b      	lsls	r3, r3, #16
 8003238:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800323c:	431a      	orrs	r2, r3
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	431a      	orrs	r2, r3
 8003242:	6a3b      	ldr	r3, [r7, #32]
 8003244:	4313      	orrs	r3, r2
 8003246:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800324a:	617b      	str	r3, [r7, #20]
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	685a      	ldr	r2, [r3, #4]
 8003252:	6a3b      	ldr	r3, [r7, #32]
 8003254:	0d5b      	lsrs	r3, r3, #21
 8003256:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800325a:	4b08      	ldr	r3, [pc, #32]	; (800327c <I2C_TransferConfig+0x60>)
 800325c:	430b      	orrs	r3, r1
 800325e:	43db      	mvns	r3, r3
 8003260:	ea02 0103 	and.w	r1, r2, r3
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	697a      	ldr	r2, [r7, #20]
 800326a:	430a      	orrs	r2, r1
 800326c:	605a      	str	r2, [r3, #4]
 800326e:	bf00      	nop
 8003270:	371c      	adds	r7, #28
 8003272:	46bd      	mov	sp, r7
 8003274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003278:	4770      	bx	lr
 800327a:	bf00      	nop
 800327c:	03ff63ff 	.word	0x03ff63ff

08003280 <HAL_I2CEx_ConfigAnalogFilter>:
 8003280:	b480      	push	{r7}
 8003282:	b083      	sub	sp, #12
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
 8003288:	6039      	str	r1, [r7, #0]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003290:	b2db      	uxtb	r3, r3
 8003292:	2b20      	cmp	r3, #32
 8003294:	d138      	bne.n	8003308 <HAL_I2CEx_ConfigAnalogFilter+0x88>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800329c:	2b01      	cmp	r3, #1
 800329e:	d101      	bne.n	80032a4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80032a0:	2302      	movs	r3, #2
 80032a2:	e032      	b.n	800330a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2201      	movs	r2, #1
 80032a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2224      	movs	r2, #36	; 0x24
 80032b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	681a      	ldr	r2, [r3, #0]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f022 0201 	bic.w	r2, r2, #1
 80032c2:	601a      	str	r2, [r3, #0]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	681a      	ldr	r2, [r3, #0]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80032d2:	601a      	str	r2, [r3, #0]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	6819      	ldr	r1, [r3, #0]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	683a      	ldr	r2, [r7, #0]
 80032e0:	430a      	orrs	r2, r1
 80032e2:	601a      	str	r2, [r3, #0]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f042 0201 	orr.w	r2, r2, #1
 80032f2:	601a      	str	r2, [r3, #0]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2220      	movs	r2, #32
 80032f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2200      	movs	r2, #0
 8003300:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003304:	2300      	movs	r3, #0
 8003306:	e000      	b.n	800330a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003308:	2302      	movs	r3, #2
 800330a:	4618      	mov	r0, r3
 800330c:	370c      	adds	r7, #12
 800330e:	46bd      	mov	sp, r7
 8003310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003314:	4770      	bx	lr

08003316 <HAL_I2CEx_ConfigDigitalFilter>:
 8003316:	b480      	push	{r7}
 8003318:	b085      	sub	sp, #20
 800331a:	af00      	add	r7, sp, #0
 800331c:	6078      	str	r0, [r7, #4]
 800331e:	6039      	str	r1, [r7, #0]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003326:	b2db      	uxtb	r3, r3
 8003328:	2b20      	cmp	r3, #32
 800332a:	d139      	bne.n	80033a0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003332:	2b01      	cmp	r3, #1
 8003334:	d101      	bne.n	800333a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003336:	2302      	movs	r3, #2
 8003338:	e033      	b.n	80033a2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2201      	movs	r2, #1
 800333e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2224      	movs	r2, #36	; 0x24
 8003346:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	681a      	ldr	r2, [r3, #0]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f022 0201 	bic.w	r2, r2, #1
 8003358:	601a      	str	r2, [r3, #0]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	60fb      	str	r3, [r7, #12]
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003368:	60fb      	str	r3, [r7, #12]
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	021b      	lsls	r3, r3, #8
 800336e:	68fa      	ldr	r2, [r7, #12]
 8003370:	4313      	orrs	r3, r2
 8003372:	60fb      	str	r3, [r7, #12]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	68fa      	ldr	r2, [r7, #12]
 800337a:	601a      	str	r2, [r3, #0]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	681a      	ldr	r2, [r3, #0]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f042 0201 	orr.w	r2, r2, #1
 800338a:	601a      	str	r2, [r3, #0]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2220      	movs	r2, #32
 8003390:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2200      	movs	r2, #0
 8003398:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800339c:	2300      	movs	r3, #0
 800339e:	e000      	b.n	80033a2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80033a0:	2302      	movs	r3, #2
 80033a2:	4618      	mov	r0, r3
 80033a4:	3714      	adds	r7, #20
 80033a6:	46bd      	mov	sp, r7
 80033a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ac:	4770      	bx	lr
	...

080033b0 <HAL_IPCC_Init>:
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b084      	sub	sp, #16
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
 80033b8:	2300      	movs	r3, #0
 80033ba:	73fb      	strb	r3, [r7, #15]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d01e      	beq.n	8003400 <HAL_IPCC_Init+0x50>
 80033c2:	4b13      	ldr	r3, [pc, #76]	; (8003410 <HAL_IPCC_Init+0x60>)
 80033c4:	60bb      	str	r3, [r7, #8]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80033cc:	b2db      	uxtb	r3, r3
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d102      	bne.n	80033d8 <HAL_IPCC_Init+0x28>
 80033d2:	6878      	ldr	r0, [r7, #4]
 80033d4:	f7fe fd3a 	bl	8001e4c <HAL_IPCC_MspInit>
 80033d8:	68b8      	ldr	r0, [r7, #8]
 80033da:	f000 f85b 	bl	8003494 <IPCC_Reset_Register>
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	601a      	str	r2, [r3, #0]
 80033ea:	6878      	ldr	r0, [r7, #4]
 80033ec:	f000 f82c 	bl	8003448 <IPCC_SetDefaultCallbacks>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2200      	movs	r2, #0
 80033f4:	635a      	str	r2, [r3, #52]	; 0x34
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2201      	movs	r2, #1
 80033fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 80033fe:	e001      	b.n	8003404 <HAL_IPCC_Init+0x54>
 8003400:	2301      	movs	r3, #1
 8003402:	73fb      	strb	r3, [r7, #15]
 8003404:	7bfb      	ldrb	r3, [r7, #15]
 8003406:	4618      	mov	r0, r3
 8003408:	3710      	adds	r7, #16
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}
 800340e:	bf00      	nop
 8003410:	58000c00 	.word	0x58000c00

08003414 <HAL_IPCC_RxCallback>:
 8003414:	b480      	push	{r7}
 8003416:	b085      	sub	sp, #20
 8003418:	af00      	add	r7, sp, #0
 800341a:	60f8      	str	r0, [r7, #12]
 800341c:	60b9      	str	r1, [r7, #8]
 800341e:	4613      	mov	r3, r2
 8003420:	71fb      	strb	r3, [r7, #7]
 8003422:	bf00      	nop
 8003424:	3714      	adds	r7, #20
 8003426:	46bd      	mov	sp, r7
 8003428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342c:	4770      	bx	lr

0800342e <HAL_IPCC_TxCallback>:
 800342e:	b480      	push	{r7}
 8003430:	b085      	sub	sp, #20
 8003432:	af00      	add	r7, sp, #0
 8003434:	60f8      	str	r0, [r7, #12]
 8003436:	60b9      	str	r1, [r7, #8]
 8003438:	4613      	mov	r3, r2
 800343a:	71fb      	strb	r3, [r7, #7]
 800343c:	bf00      	nop
 800343e:	3714      	adds	r7, #20
 8003440:	46bd      	mov	sp, r7
 8003442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003446:	4770      	bx	lr

08003448 <IPCC_SetDefaultCallbacks>:
 8003448:	b480      	push	{r7}
 800344a:	b085      	sub	sp, #20
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
 8003450:	2300      	movs	r3, #0
 8003452:	60fb      	str	r3, [r7, #12]
 8003454:	e00f      	b.n	8003476 <IPCC_SetDefaultCallbacks+0x2e>
 8003456:	687a      	ldr	r2, [r7, #4]
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	009b      	lsls	r3, r3, #2
 800345c:	4413      	add	r3, r2
 800345e:	4a0b      	ldr	r2, [pc, #44]	; (800348c <IPCC_SetDefaultCallbacks+0x44>)
 8003460:	605a      	str	r2, [r3, #4]
 8003462:	687a      	ldr	r2, [r7, #4]
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	3306      	adds	r3, #6
 8003468:	009b      	lsls	r3, r3, #2
 800346a:	4413      	add	r3, r2
 800346c:	4a08      	ldr	r2, [pc, #32]	; (8003490 <IPCC_SetDefaultCallbacks+0x48>)
 800346e:	605a      	str	r2, [r3, #4]
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	3301      	adds	r3, #1
 8003474:	60fb      	str	r3, [r7, #12]
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	2b05      	cmp	r3, #5
 800347a:	d9ec      	bls.n	8003456 <IPCC_SetDefaultCallbacks+0xe>
 800347c:	bf00      	nop
 800347e:	bf00      	nop
 8003480:	3714      	adds	r7, #20
 8003482:	46bd      	mov	sp, r7
 8003484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003488:	4770      	bx	lr
 800348a:	bf00      	nop
 800348c:	08003415 	.word	0x08003415
 8003490:	0800342f 	.word	0x0800342f

08003494 <IPCC_Reset_Register>:
 8003494:	b480      	push	{r7}
 8003496:	b083      	sub	sp, #12
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2200      	movs	r2, #0
 80034a0:	601a      	str	r2, [r3, #0]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
 80034a8:	605a      	str	r2, [r3, #4]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	223f      	movs	r2, #63	; 0x3f
 80034ae:	609a      	str	r2, [r3, #8]
 80034b0:	bf00      	nop
 80034b2:	370c      	adds	r7, #12
 80034b4:	46bd      	mov	sp, r7
 80034b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ba:	4770      	bx	lr

080034bc <HAL_PWR_EnableBkUpAccess>:
 80034bc:	b480      	push	{r7}
 80034be:	af00      	add	r7, sp, #0
 80034c0:	4b05      	ldr	r3, [pc, #20]	; (80034d8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a04      	ldr	r2, [pc, #16]	; (80034d8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80034c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034ca:	6013      	str	r3, [r2, #0]
 80034cc:	bf00      	nop
 80034ce:	46bd      	mov	sp, r7
 80034d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d4:	4770      	bx	lr
 80034d6:	bf00      	nop
 80034d8:	58000400 	.word	0x58000400

080034dc <HAL_PWREx_GetVoltageRange>:
 80034dc:	b480      	push	{r7}
 80034de:	af00      	add	r7, sp, #0
 80034e0:	4b04      	ldr	r3, [pc, #16]	; (80034f4 <HAL_PWREx_GetVoltageRange+0x18>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80034e8:	4618      	mov	r0, r3
 80034ea:	46bd      	mov	sp, r7
 80034ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f0:	4770      	bx	lr
 80034f2:	bf00      	nop
 80034f4:	58000400 	.word	0x58000400

080034f8 <LL_RCC_HSE_IsEnabledDiv2>:
 80034f8:	b480      	push	{r7}
 80034fa:	af00      	add	r7, sp, #0
 80034fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003506:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800350a:	d101      	bne.n	8003510 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800350c:	2301      	movs	r3, #1
 800350e:	e000      	b.n	8003512 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8003510:	2300      	movs	r3, #0
 8003512:	4618      	mov	r0, r3
 8003514:	46bd      	mov	sp, r7
 8003516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351a:	4770      	bx	lr

0800351c <LL_RCC_HSE_Enable>:
 800351c:	b480      	push	{r7}
 800351e:	af00      	add	r7, sp, #0
 8003520:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800352a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800352e:	6013      	str	r3, [r2, #0]
 8003530:	bf00      	nop
 8003532:	46bd      	mov	sp, r7
 8003534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003538:	4770      	bx	lr

0800353a <LL_RCC_HSE_Disable>:
 800353a:	b480      	push	{r7}
 800353c:	af00      	add	r7, sp, #0
 800353e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003548:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800354c:	6013      	str	r3, [r2, #0]
 800354e:	bf00      	nop
 8003550:	46bd      	mov	sp, r7
 8003552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003556:	4770      	bx	lr

08003558 <LL_RCC_HSE_IsReady>:
 8003558:	b480      	push	{r7}
 800355a:	af00      	add	r7, sp, #0
 800355c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003566:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800356a:	d101      	bne.n	8003570 <LL_RCC_HSE_IsReady+0x18>
 800356c:	2301      	movs	r3, #1
 800356e:	e000      	b.n	8003572 <LL_RCC_HSE_IsReady+0x1a>
 8003570:	2300      	movs	r3, #0
 8003572:	4618      	mov	r0, r3
 8003574:	46bd      	mov	sp, r7
 8003576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357a:	4770      	bx	lr

0800357c <LL_RCC_HSI_Enable>:
 800357c:	b480      	push	{r7}
 800357e:	af00      	add	r7, sp, #0
 8003580:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800358a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800358e:	6013      	str	r3, [r2, #0]
 8003590:	bf00      	nop
 8003592:	46bd      	mov	sp, r7
 8003594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003598:	4770      	bx	lr

0800359a <LL_RCC_HSI_Disable>:
 800359a:	b480      	push	{r7}
 800359c:	af00      	add	r7, sp, #0
 800359e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80035a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80035ac:	6013      	str	r3, [r2, #0]
 80035ae:	bf00      	nop
 80035b0:	46bd      	mov	sp, r7
 80035b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b6:	4770      	bx	lr

080035b8 <LL_RCC_HSI_IsReady>:
 80035b8:	b480      	push	{r7}
 80035ba:	af00      	add	r7, sp, #0
 80035bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035ca:	d101      	bne.n	80035d0 <LL_RCC_HSI_IsReady+0x18>
 80035cc:	2301      	movs	r3, #1
 80035ce:	e000      	b.n	80035d2 <LL_RCC_HSI_IsReady+0x1a>
 80035d0:	2300      	movs	r3, #0
 80035d2:	4618      	mov	r0, r3
 80035d4:	46bd      	mov	sp, r7
 80035d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035da:	4770      	bx	lr

080035dc <LL_RCC_HSI_SetCalibTrimming>:
 80035dc:	b480      	push	{r7}
 80035de:	b083      	sub	sp, #12
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
 80035e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	061b      	lsls	r3, r3, #24
 80035f2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80035f6:	4313      	orrs	r3, r2
 80035f8:	604b      	str	r3, [r1, #4]
 80035fa:	bf00      	nop
 80035fc:	370c      	adds	r7, #12
 80035fe:	46bd      	mov	sp, r7
 8003600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003604:	4770      	bx	lr

08003606 <LL_RCC_HSI48_Enable>:
 8003606:	b480      	push	{r7}
 8003608:	af00      	add	r7, sp, #0
 800360a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800360e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003612:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003616:	f043 0301 	orr.w	r3, r3, #1
 800361a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
 800361e:	bf00      	nop
 8003620:	46bd      	mov	sp, r7
 8003622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003626:	4770      	bx	lr

08003628 <LL_RCC_HSI48_Disable>:
 8003628:	b480      	push	{r7}
 800362a:	af00      	add	r7, sp, #0
 800362c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003630:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003634:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003638:	f023 0301 	bic.w	r3, r3, #1
 800363c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
 8003640:	bf00      	nop
 8003642:	46bd      	mov	sp, r7
 8003644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003648:	4770      	bx	lr

0800364a <LL_RCC_HSI48_IsReady>:
 800364a:	b480      	push	{r7}
 800364c:	af00      	add	r7, sp, #0
 800364e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003652:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003656:	f003 0302 	and.w	r3, r3, #2
 800365a:	2b02      	cmp	r3, #2
 800365c:	d101      	bne.n	8003662 <LL_RCC_HSI48_IsReady+0x18>
 800365e:	2301      	movs	r3, #1
 8003660:	e000      	b.n	8003664 <LL_RCC_HSI48_IsReady+0x1a>
 8003662:	2300      	movs	r3, #0
 8003664:	4618      	mov	r0, r3
 8003666:	46bd      	mov	sp, r7
 8003668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366c:	4770      	bx	lr

0800366e <LL_RCC_LSE_Enable>:
 800366e:	b480      	push	{r7}
 8003670:	af00      	add	r7, sp, #0
 8003672:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003676:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800367a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800367e:	f043 0301 	orr.w	r3, r3, #1
 8003682:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003686:	bf00      	nop
 8003688:	46bd      	mov	sp, r7
 800368a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368e:	4770      	bx	lr

08003690 <LL_RCC_LSE_Disable>:
 8003690:	b480      	push	{r7}
 8003692:	af00      	add	r7, sp, #0
 8003694:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003698:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800369c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80036a0:	f023 0301 	bic.w	r3, r3, #1
 80036a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80036a8:	bf00      	nop
 80036aa:	46bd      	mov	sp, r7
 80036ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b0:	4770      	bx	lr

080036b2 <LL_RCC_LSE_EnableBypass>:
 80036b2:	b480      	push	{r7}
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036be:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80036c2:	f043 0304 	orr.w	r3, r3, #4
 80036c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80036ca:	bf00      	nop
 80036cc:	46bd      	mov	sp, r7
 80036ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d2:	4770      	bx	lr

080036d4 <LL_RCC_LSE_DisableBypass>:
 80036d4:	b480      	push	{r7}
 80036d6:	af00      	add	r7, sp, #0
 80036d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036e0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80036e4:	f023 0304 	bic.w	r3, r3, #4
 80036e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80036ec:	bf00      	nop
 80036ee:	46bd      	mov	sp, r7
 80036f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f4:	4770      	bx	lr

080036f6 <LL_RCC_LSE_IsReady>:
 80036f6:	b480      	push	{r7}
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003702:	f003 0302 	and.w	r3, r3, #2
 8003706:	2b02      	cmp	r3, #2
 8003708:	d101      	bne.n	800370e <LL_RCC_LSE_IsReady+0x18>
 800370a:	2301      	movs	r3, #1
 800370c:	e000      	b.n	8003710 <LL_RCC_LSE_IsReady+0x1a>
 800370e:	2300      	movs	r3, #0
 8003710:	4618      	mov	r0, r3
 8003712:	46bd      	mov	sp, r7
 8003714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003718:	4770      	bx	lr

0800371a <LL_RCC_LSI1_Enable>:
 800371a:	b480      	push	{r7}
 800371c:	af00      	add	r7, sp, #0
 800371e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003722:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003726:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800372a:	f043 0301 	orr.w	r3, r3, #1
 800372e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8003732:	bf00      	nop
 8003734:	46bd      	mov	sp, r7
 8003736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373a:	4770      	bx	lr

0800373c <LL_RCC_LSI1_Disable>:
 800373c:	b480      	push	{r7}
 800373e:	af00      	add	r7, sp, #0
 8003740:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003744:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003748:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800374c:	f023 0301 	bic.w	r3, r3, #1
 8003750:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8003754:	bf00      	nop
 8003756:	46bd      	mov	sp, r7
 8003758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375c:	4770      	bx	lr

0800375e <LL_RCC_LSI1_IsReady>:
 800375e:	b480      	push	{r7}
 8003760:	af00      	add	r7, sp, #0
 8003762:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003766:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800376a:	f003 0302 	and.w	r3, r3, #2
 800376e:	2b02      	cmp	r3, #2
 8003770:	d101      	bne.n	8003776 <LL_RCC_LSI1_IsReady+0x18>
 8003772:	2301      	movs	r3, #1
 8003774:	e000      	b.n	8003778 <LL_RCC_LSI1_IsReady+0x1a>
 8003776:	2300      	movs	r3, #0
 8003778:	4618      	mov	r0, r3
 800377a:	46bd      	mov	sp, r7
 800377c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003780:	4770      	bx	lr

08003782 <LL_RCC_LSI2_Enable>:
 8003782:	b480      	push	{r7}
 8003784:	af00      	add	r7, sp, #0
 8003786:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800378a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800378e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003792:	f043 0304 	orr.w	r3, r3, #4
 8003796:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800379a:	bf00      	nop
 800379c:	46bd      	mov	sp, r7
 800379e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a2:	4770      	bx	lr

080037a4 <LL_RCC_LSI2_Disable>:
 80037a4:	b480      	push	{r7}
 80037a6:	af00      	add	r7, sp, #0
 80037a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037b0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80037b4:	f023 0304 	bic.w	r3, r3, #4
 80037b8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80037bc:	bf00      	nop
 80037be:	46bd      	mov	sp, r7
 80037c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c4:	4770      	bx	lr

080037c6 <LL_RCC_LSI2_IsReady>:
 80037c6:	b480      	push	{r7}
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037d2:	f003 0308 	and.w	r3, r3, #8
 80037d6:	2b08      	cmp	r3, #8
 80037d8:	d101      	bne.n	80037de <LL_RCC_LSI2_IsReady+0x18>
 80037da:	2301      	movs	r3, #1
 80037dc:	e000      	b.n	80037e0 <LL_RCC_LSI2_IsReady+0x1a>
 80037de:	2300      	movs	r3, #0
 80037e0:	4618      	mov	r0, r3
 80037e2:	46bd      	mov	sp, r7
 80037e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e8:	4770      	bx	lr

080037ea <LL_RCC_LSI2_SetTrimming>:
 80037ea:	b480      	push	{r7}
 80037ec:	b083      	sub	sp, #12
 80037ee:	af00      	add	r7, sp, #0
 80037f0:	6078      	str	r0, [r7, #4]
 80037f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037fa:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	021b      	lsls	r3, r3, #8
 8003802:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003806:	4313      	orrs	r3, r2
 8003808:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
 800380c:	bf00      	nop
 800380e:	370c      	adds	r7, #12
 8003810:	46bd      	mov	sp, r7
 8003812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003816:	4770      	bx	lr

08003818 <LL_RCC_MSI_Enable>:
 8003818:	b480      	push	{r7}
 800381a:	af00      	add	r7, sp, #0
 800381c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003826:	f043 0301 	orr.w	r3, r3, #1
 800382a:	6013      	str	r3, [r2, #0]
 800382c:	bf00      	nop
 800382e:	46bd      	mov	sp, r7
 8003830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003834:	4770      	bx	lr

08003836 <LL_RCC_MSI_Disable>:
 8003836:	b480      	push	{r7}
 8003838:	af00      	add	r7, sp, #0
 800383a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003844:	f023 0301 	bic.w	r3, r3, #1
 8003848:	6013      	str	r3, [r2, #0]
 800384a:	bf00      	nop
 800384c:	46bd      	mov	sp, r7
 800384e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003852:	4770      	bx	lr

08003854 <LL_RCC_MSI_IsReady>:
 8003854:	b480      	push	{r7}
 8003856:	af00      	add	r7, sp, #0
 8003858:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f003 0302 	and.w	r3, r3, #2
 8003862:	2b02      	cmp	r3, #2
 8003864:	d101      	bne.n	800386a <LL_RCC_MSI_IsReady+0x16>
 8003866:	2301      	movs	r3, #1
 8003868:	e000      	b.n	800386c <LL_RCC_MSI_IsReady+0x18>
 800386a:	2300      	movs	r3, #0
 800386c:	4618      	mov	r0, r3
 800386e:	46bd      	mov	sp, r7
 8003870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003874:	4770      	bx	lr

08003876 <LL_RCC_MSI_SetRange>:
 8003876:	b480      	push	{r7}
 8003878:	b083      	sub	sp, #12
 800387a:	af00      	add	r7, sp, #0
 800387c:	6078      	str	r0, [r7, #4]
 800387e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003888:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	4313      	orrs	r3, r2
 8003890:	600b      	str	r3, [r1, #0]
 8003892:	bf00      	nop
 8003894:	370c      	adds	r7, #12
 8003896:	46bd      	mov	sp, r7
 8003898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389c:	4770      	bx	lr

0800389e <LL_RCC_MSI_GetRange>:
 800389e:	b480      	push	{r7}
 80038a0:	b083      	sub	sp, #12
 80038a2:	af00      	add	r7, sp, #0
 80038a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80038ae:	607b      	str	r3, [r7, #4]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2bb0      	cmp	r3, #176	; 0xb0
 80038b4:	d901      	bls.n	80038ba <LL_RCC_MSI_GetRange+0x1c>
 80038b6:	23b0      	movs	r3, #176	; 0xb0
 80038b8:	607b      	str	r3, [r7, #4]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	4618      	mov	r0, r3
 80038be:	370c      	adds	r7, #12
 80038c0:	46bd      	mov	sp, r7
 80038c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c6:	4770      	bx	lr

080038c8 <LL_RCC_MSI_SetCalibTrimming>:
 80038c8:	b480      	push	{r7}
 80038ca:	b083      	sub	sp, #12
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
 80038d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	021b      	lsls	r3, r3, #8
 80038de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80038e2:	4313      	orrs	r3, r2
 80038e4:	604b      	str	r3, [r1, #4]
 80038e6:	bf00      	nop
 80038e8:	370c      	adds	r7, #12
 80038ea:	46bd      	mov	sp, r7
 80038ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f0:	4770      	bx	lr

080038f2 <LL_RCC_SetSysClkSource>:
 80038f2:	b480      	push	{r7}
 80038f4:	b083      	sub	sp, #12
 80038f6:	af00      	add	r7, sp, #0
 80038f8:	6078      	str	r0, [r7, #4]
 80038fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	f023 0203 	bic.w	r2, r3, #3
 8003904:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	4313      	orrs	r3, r2
 800390c:	608b      	str	r3, [r1, #8]
 800390e:	bf00      	nop
 8003910:	370c      	adds	r7, #12
 8003912:	46bd      	mov	sp, r7
 8003914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003918:	4770      	bx	lr

0800391a <LL_RCC_GetSysClkSource>:
 800391a:	b480      	push	{r7}
 800391c:	af00      	add	r7, sp, #0
 800391e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003922:	689b      	ldr	r3, [r3, #8]
 8003924:	f003 030c 	and.w	r3, r3, #12
 8003928:	4618      	mov	r0, r3
 800392a:	46bd      	mov	sp, r7
 800392c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003930:	4770      	bx	lr

08003932 <LL_RCC_SetAHBPrescaler>:
 8003932:	b480      	push	{r7}
 8003934:	b083      	sub	sp, #12
 8003936:	af00      	add	r7, sp, #0
 8003938:	6078      	str	r0, [r7, #4]
 800393a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003944:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	4313      	orrs	r3, r2
 800394c:	608b      	str	r3, [r1, #8]
 800394e:	bf00      	nop
 8003950:	370c      	adds	r7, #12
 8003952:	46bd      	mov	sp, r7
 8003954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003958:	4770      	bx	lr

0800395a <LL_C2_RCC_SetAHBPrescaler>:
 800395a:	b480      	push	{r7}
 800395c:	b083      	sub	sp, #12
 800395e:	af00      	add	r7, sp, #0
 8003960:	6078      	str	r0, [r7, #4]
 8003962:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003966:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800396a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800396e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	4313      	orrs	r3, r2
 8003976:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
 800397a:	bf00      	nop
 800397c:	370c      	adds	r7, #12
 800397e:	46bd      	mov	sp, r7
 8003980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003984:	4770      	bx	lr

08003986 <LL_RCC_SetAHB4Prescaler>:
 8003986:	b480      	push	{r7}
 8003988:	b083      	sub	sp, #12
 800398a:	af00      	add	r7, sp, #0
 800398c:	6078      	str	r0, [r7, #4]
 800398e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003992:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003996:	f023 020f 	bic.w	r2, r3, #15
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	091b      	lsrs	r3, r3, #4
 800399e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80039a2:	4313      	orrs	r3, r2
 80039a4:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
 80039a8:	bf00      	nop
 80039aa:	370c      	adds	r7, #12
 80039ac:	46bd      	mov	sp, r7
 80039ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b2:	4770      	bx	lr

080039b4 <LL_RCC_SetAPB1Prescaler>:
 80039b4:	b480      	push	{r7}
 80039b6:	b083      	sub	sp, #12
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
 80039bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80039c6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	4313      	orrs	r3, r2
 80039ce:	608b      	str	r3, [r1, #8]
 80039d0:	bf00      	nop
 80039d2:	370c      	adds	r7, #12
 80039d4:	46bd      	mov	sp, r7
 80039d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039da:	4770      	bx	lr

080039dc <LL_RCC_SetAPB2Prescaler>:
 80039dc:	b480      	push	{r7}
 80039de:	b083      	sub	sp, #12
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
 80039e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80039ee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	4313      	orrs	r3, r2
 80039f6:	608b      	str	r3, [r1, #8]
 80039f8:	bf00      	nop
 80039fa:	370c      	adds	r7, #12
 80039fc:	46bd      	mov	sp, r7
 80039fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a02:	4770      	bx	lr

08003a04 <LL_RCC_GetAHBPrescaler>:
 8003a04:	b480      	push	{r7}
 8003a06:	af00      	add	r7, sp, #0
 8003a08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a0c:	689b      	ldr	r3, [r3, #8]
 8003a0e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a12:	4618      	mov	r0, r3
 8003a14:	46bd      	mov	sp, r7
 8003a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1a:	4770      	bx	lr

08003a1c <LL_RCC_GetAHB4Prescaler>:
 8003a1c:	b480      	push	{r7}
 8003a1e:	af00      	add	r7, sp, #0
 8003a20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a24:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003a28:	011b      	lsls	r3, r3, #4
 8003a2a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a2e:	4618      	mov	r0, r3
 8003a30:	46bd      	mov	sp, r7
 8003a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a36:	4770      	bx	lr

08003a38 <LL_RCC_GetAPB1Prescaler>:
 8003a38:	b480      	push	{r7}
 8003a3a:	af00      	add	r7, sp, #0
 8003a3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003a46:	4618      	mov	r0, r3
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4e:	4770      	bx	lr

08003a50 <LL_RCC_GetAPB2Prescaler>:
 8003a50:	b480      	push	{r7}
 8003a52:	af00      	add	r7, sp, #0
 8003a54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003a5e:	4618      	mov	r0, r3
 8003a60:	46bd      	mov	sp, r7
 8003a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a66:	4770      	bx	lr

08003a68 <LL_RCC_PLL_Enable>:
 8003a68:	b480      	push	{r7}
 8003a6a:	af00      	add	r7, sp, #0
 8003a6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003a76:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a7a:	6013      	str	r3, [r2, #0]
 8003a7c:	bf00      	nop
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a84:	4770      	bx	lr

08003a86 <LL_RCC_PLL_Disable>:
 8003a86:	b480      	push	{r7}
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003a94:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a98:	6013      	str	r3, [r2, #0]
 8003a9a:	bf00      	nop
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa2:	4770      	bx	lr

08003aa4 <LL_RCC_PLL_IsReady>:
 8003aa4:	b480      	push	{r7}
 8003aa6:	af00      	add	r7, sp, #0
 8003aa8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ab2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003ab6:	d101      	bne.n	8003abc <LL_RCC_PLL_IsReady+0x18>
 8003ab8:	2301      	movs	r3, #1
 8003aba:	e000      	b.n	8003abe <LL_RCC_PLL_IsReady+0x1a>
 8003abc:	2300      	movs	r3, #0
 8003abe:	4618      	mov	r0, r3
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac6:	4770      	bx	lr

08003ac8 <LL_RCC_PLL_GetN>:
 8003ac8:	b480      	push	{r7}
 8003aca:	af00      	add	r7, sp, #0
 8003acc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ad0:	68db      	ldr	r3, [r3, #12]
 8003ad2:	0a1b      	lsrs	r3, r3, #8
 8003ad4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ad8:	4618      	mov	r0, r3
 8003ada:	46bd      	mov	sp, r7
 8003adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae0:	4770      	bx	lr

08003ae2 <LL_RCC_PLL_GetR>:
 8003ae2:	b480      	push	{r7}
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003aea:	68db      	ldr	r3, [r3, #12]
 8003aec:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
 8003af0:	4618      	mov	r0, r3
 8003af2:	46bd      	mov	sp, r7
 8003af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af8:	4770      	bx	lr

08003afa <LL_RCC_PLL_GetDivider>:
 8003afa:	b480      	push	{r7}
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b02:	68db      	ldr	r3, [r3, #12]
 8003b04:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003b08:	4618      	mov	r0, r3
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b10:	4770      	bx	lr

08003b12 <LL_RCC_PLL_GetMainSource>:
 8003b12:	b480      	push	{r7}
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b1a:	68db      	ldr	r3, [r3, #12]
 8003b1c:	f003 0303 	and.w	r3, r3, #3
 8003b20:	4618      	mov	r0, r3
 8003b22:	46bd      	mov	sp, r7
 8003b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b28:	4770      	bx	lr

08003b2a <LL_RCC_IsActiveFlag_HPRE>:
 8003b2a:	b480      	push	{r7}
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b3c:	d101      	bne.n	8003b42 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e000      	b.n	8003b44 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8003b42:	2300      	movs	r3, #0
 8003b44:	4618      	mov	r0, r3
 8003b46:	46bd      	mov	sp, r7
 8003b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4c:	4770      	bx	lr

08003b4e <LL_RCC_IsActiveFlag_C2HPRE>:
 8003b4e:	b480      	push	{r7}
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b56:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003b5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b5e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003b62:	d101      	bne.n	8003b68 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8003b64:	2301      	movs	r3, #1
 8003b66:	e000      	b.n	8003b6a <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8003b68:	2300      	movs	r3, #0
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b72:	4770      	bx	lr

08003b74 <LL_RCC_IsActiveFlag_SHDHPRE>:
 8003b74:	b480      	push	{r7}
 8003b76:	af00      	add	r7, sp, #0
 8003b78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b7c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003b80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b88:	d101      	bne.n	8003b8e <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e000      	b.n	8003b90 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8003b8e:	2300      	movs	r3, #0
 8003b90:	4618      	mov	r0, r3
 8003b92:	46bd      	mov	sp, r7
 8003b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b98:	4770      	bx	lr

08003b9a <LL_RCC_IsActiveFlag_PPRE1>:
 8003b9a:	b480      	push	{r7}
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ba8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003bac:	d101      	bne.n	8003bb2 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8003bae:	2301      	movs	r3, #1
 8003bb0:	e000      	b.n	8003bb4 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbc:	4770      	bx	lr

08003bbe <LL_RCC_IsActiveFlag_PPRE2>:
 8003bbe:	b480      	push	{r7}
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003bcc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003bd0:	d101      	bne.n	8003bd6 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	e000      	b.n	8003bd8 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	4618      	mov	r0, r3
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be0:	4770      	bx	lr
	...

08003be4 <HAL_RCC_OscConfig>:
 8003be4:	b590      	push	{r4, r7, lr}
 8003be6:	b08d      	sub	sp, #52	; 0x34
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d101      	bne.n	8003bf6 <HAL_RCC_OscConfig+0x12>
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	e363      	b.n	80042be <HAL_RCC_OscConfig+0x6da>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f003 0320 	and.w	r3, r3, #32
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	f000 808d 	beq.w	8003d1e <HAL_RCC_OscConfig+0x13a>
 8003c04:	f7ff fe89 	bl	800391a <LL_RCC_GetSysClkSource>
 8003c08:	62f8      	str	r0, [r7, #44]	; 0x2c
 8003c0a:	f7ff ff82 	bl	8003b12 <LL_RCC_PLL_GetMainSource>
 8003c0e:	62b8      	str	r0, [r7, #40]	; 0x28
 8003c10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d005      	beq.n	8003c22 <HAL_RCC_OscConfig+0x3e>
 8003c16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c18:	2b0c      	cmp	r3, #12
 8003c1a:	d147      	bne.n	8003cac <HAL_RCC_OscConfig+0xc8>
 8003c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c1e:	2b01      	cmp	r3, #1
 8003c20:	d144      	bne.n	8003cac <HAL_RCC_OscConfig+0xc8>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	69db      	ldr	r3, [r3, #28]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d101      	bne.n	8003c2e <HAL_RCC_OscConfig+0x4a>
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e347      	b.n	80042be <HAL_RCC_OscConfig+0x6da>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8003c32:	f7ff fe34 	bl	800389e <LL_RCC_MSI_GetRange>
 8003c36:	4603      	mov	r3, r0
 8003c38:	429c      	cmp	r4, r3
 8003c3a:	d914      	bls.n	8003c66 <HAL_RCC_OscConfig+0x82>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c40:	4618      	mov	r0, r3
 8003c42:	f000 fd2f 	bl	80046a4 <RCC_SetFlashLatencyFromMSIRange>
 8003c46:	4603      	mov	r3, r0
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d001      	beq.n	8003c50 <HAL_RCC_OscConfig+0x6c>
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	e336      	b.n	80042be <HAL_RCC_OscConfig+0x6da>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c54:	4618      	mov	r0, r3
 8003c56:	f7ff fe0e 	bl	8003876 <LL_RCC_MSI_SetRange>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6a1b      	ldr	r3, [r3, #32]
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f7ff fe32 	bl	80038c8 <LL_RCC_MSI_SetCalibTrimming>
 8003c64:	e013      	b.n	8003c8e <HAL_RCC_OscConfig+0xaa>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	f7ff fe03 	bl	8003876 <LL_RCC_MSI_SetRange>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6a1b      	ldr	r3, [r3, #32]
 8003c74:	4618      	mov	r0, r3
 8003c76:	f7ff fe27 	bl	80038c8 <LL_RCC_MSI_SetCalibTrimming>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c7e:	4618      	mov	r0, r3
 8003c80:	f000 fd10 	bl	80046a4 <RCC_SetFlashLatencyFromMSIRange>
 8003c84:	4603      	mov	r3, r0
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d001      	beq.n	8003c8e <HAL_RCC_OscConfig+0xaa>
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	e317      	b.n	80042be <HAL_RCC_OscConfig+0x6da>
 8003c8e:	f000 fcc9 	bl	8004624 <HAL_RCC_GetHCLKFreq>
 8003c92:	4603      	mov	r3, r0
 8003c94:	4aa4      	ldr	r2, [pc, #656]	; (8003f28 <HAL_RCC_OscConfig+0x344>)
 8003c96:	6013      	str	r3, [r2, #0]
 8003c98:	4ba4      	ldr	r3, [pc, #656]	; (8003f2c <HAL_RCC_OscConfig+0x348>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	f7fe fb0f 	bl	80022c0 <HAL_InitTick>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d039      	beq.n	8003d1c <HAL_RCC_OscConfig+0x138>
 8003ca8:	2301      	movs	r3, #1
 8003caa:	e308      	b.n	80042be <HAL_RCC_OscConfig+0x6da>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	69db      	ldr	r3, [r3, #28]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d01e      	beq.n	8003cf2 <HAL_RCC_OscConfig+0x10e>
 8003cb4:	f7ff fdb0 	bl	8003818 <LL_RCC_MSI_Enable>
 8003cb8:	f7fe fb50 	bl	800235c <HAL_GetTick>
 8003cbc:	6278      	str	r0, [r7, #36]	; 0x24
 8003cbe:	e008      	b.n	8003cd2 <HAL_RCC_OscConfig+0xee>
 8003cc0:	f7fe fb4c 	bl	800235c <HAL_GetTick>
 8003cc4:	4602      	mov	r2, r0
 8003cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc8:	1ad3      	subs	r3, r2, r3
 8003cca:	2b02      	cmp	r3, #2
 8003ccc:	d901      	bls.n	8003cd2 <HAL_RCC_OscConfig+0xee>
 8003cce:	2303      	movs	r3, #3
 8003cd0:	e2f5      	b.n	80042be <HAL_RCC_OscConfig+0x6da>
 8003cd2:	f7ff fdbf 	bl	8003854 <LL_RCC_MSI_IsReady>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d0f1      	beq.n	8003cc0 <HAL_RCC_OscConfig+0xdc>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f7ff fdc8 	bl	8003876 <LL_RCC_MSI_SetRange>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6a1b      	ldr	r3, [r3, #32]
 8003cea:	4618      	mov	r0, r3
 8003cec:	f7ff fdec 	bl	80038c8 <LL_RCC_MSI_SetCalibTrimming>
 8003cf0:	e015      	b.n	8003d1e <HAL_RCC_OscConfig+0x13a>
 8003cf2:	f7ff fda0 	bl	8003836 <LL_RCC_MSI_Disable>
 8003cf6:	f7fe fb31 	bl	800235c <HAL_GetTick>
 8003cfa:	6278      	str	r0, [r7, #36]	; 0x24
 8003cfc:	e008      	b.n	8003d10 <HAL_RCC_OscConfig+0x12c>
 8003cfe:	f7fe fb2d 	bl	800235c <HAL_GetTick>
 8003d02:	4602      	mov	r2, r0
 8003d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d06:	1ad3      	subs	r3, r2, r3
 8003d08:	2b02      	cmp	r3, #2
 8003d0a:	d901      	bls.n	8003d10 <HAL_RCC_OscConfig+0x12c>
 8003d0c:	2303      	movs	r3, #3
 8003d0e:	e2d6      	b.n	80042be <HAL_RCC_OscConfig+0x6da>
 8003d10:	f7ff fda0 	bl	8003854 <LL_RCC_MSI_IsReady>
 8003d14:	4603      	mov	r3, r0
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d1f1      	bne.n	8003cfe <HAL_RCC_OscConfig+0x11a>
 8003d1a:	e000      	b.n	8003d1e <HAL_RCC_OscConfig+0x13a>
 8003d1c:	bf00      	nop
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f003 0301 	and.w	r3, r3, #1
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d047      	beq.n	8003dba <HAL_RCC_OscConfig+0x1d6>
 8003d2a:	f7ff fdf6 	bl	800391a <LL_RCC_GetSysClkSource>
 8003d2e:	6238      	str	r0, [r7, #32]
 8003d30:	f7ff feef 	bl	8003b12 <LL_RCC_PLL_GetMainSource>
 8003d34:	61f8      	str	r0, [r7, #28]
 8003d36:	6a3b      	ldr	r3, [r7, #32]
 8003d38:	2b08      	cmp	r3, #8
 8003d3a:	d005      	beq.n	8003d48 <HAL_RCC_OscConfig+0x164>
 8003d3c:	6a3b      	ldr	r3, [r7, #32]
 8003d3e:	2b0c      	cmp	r3, #12
 8003d40:	d108      	bne.n	8003d54 <HAL_RCC_OscConfig+0x170>
 8003d42:	69fb      	ldr	r3, [r7, #28]
 8003d44:	2b03      	cmp	r3, #3
 8003d46:	d105      	bne.n	8003d54 <HAL_RCC_OscConfig+0x170>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d134      	bne.n	8003dba <HAL_RCC_OscConfig+0x1d6>
 8003d50:	2301      	movs	r3, #1
 8003d52:	e2b4      	b.n	80042be <HAL_RCC_OscConfig+0x6da>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d5c:	d102      	bne.n	8003d64 <HAL_RCC_OscConfig+0x180>
 8003d5e:	f7ff fbdd 	bl	800351c <LL_RCC_HSE_Enable>
 8003d62:	e001      	b.n	8003d68 <HAL_RCC_OscConfig+0x184>
 8003d64:	f7ff fbe9 	bl	800353a <LL_RCC_HSE_Disable>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d012      	beq.n	8003d96 <HAL_RCC_OscConfig+0x1b2>
 8003d70:	f7fe faf4 	bl	800235c <HAL_GetTick>
 8003d74:	6278      	str	r0, [r7, #36]	; 0x24
 8003d76:	e008      	b.n	8003d8a <HAL_RCC_OscConfig+0x1a6>
 8003d78:	f7fe faf0 	bl	800235c <HAL_GetTick>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d80:	1ad3      	subs	r3, r2, r3
 8003d82:	2b64      	cmp	r3, #100	; 0x64
 8003d84:	d901      	bls.n	8003d8a <HAL_RCC_OscConfig+0x1a6>
 8003d86:	2303      	movs	r3, #3
 8003d88:	e299      	b.n	80042be <HAL_RCC_OscConfig+0x6da>
 8003d8a:	f7ff fbe5 	bl	8003558 <LL_RCC_HSE_IsReady>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d0f1      	beq.n	8003d78 <HAL_RCC_OscConfig+0x194>
 8003d94:	e011      	b.n	8003dba <HAL_RCC_OscConfig+0x1d6>
 8003d96:	f7fe fae1 	bl	800235c <HAL_GetTick>
 8003d9a:	6278      	str	r0, [r7, #36]	; 0x24
 8003d9c:	e008      	b.n	8003db0 <HAL_RCC_OscConfig+0x1cc>
 8003d9e:	f7fe fadd 	bl	800235c <HAL_GetTick>
 8003da2:	4602      	mov	r2, r0
 8003da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da6:	1ad3      	subs	r3, r2, r3
 8003da8:	2b64      	cmp	r3, #100	; 0x64
 8003daa:	d901      	bls.n	8003db0 <HAL_RCC_OscConfig+0x1cc>
 8003dac:	2303      	movs	r3, #3
 8003dae:	e286      	b.n	80042be <HAL_RCC_OscConfig+0x6da>
 8003db0:	f7ff fbd2 	bl	8003558 <LL_RCC_HSE_IsReady>
 8003db4:	4603      	mov	r3, r0
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d1f1      	bne.n	8003d9e <HAL_RCC_OscConfig+0x1ba>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f003 0302 	and.w	r3, r3, #2
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d04c      	beq.n	8003e60 <HAL_RCC_OscConfig+0x27c>
 8003dc6:	f7ff fda8 	bl	800391a <LL_RCC_GetSysClkSource>
 8003dca:	61b8      	str	r0, [r7, #24]
 8003dcc:	f7ff fea1 	bl	8003b12 <LL_RCC_PLL_GetMainSource>
 8003dd0:	6178      	str	r0, [r7, #20]
 8003dd2:	69bb      	ldr	r3, [r7, #24]
 8003dd4:	2b04      	cmp	r3, #4
 8003dd6:	d005      	beq.n	8003de4 <HAL_RCC_OscConfig+0x200>
 8003dd8:	69bb      	ldr	r3, [r7, #24]
 8003dda:	2b0c      	cmp	r3, #12
 8003ddc:	d10e      	bne.n	8003dfc <HAL_RCC_OscConfig+0x218>
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	2b02      	cmp	r3, #2
 8003de2:	d10b      	bne.n	8003dfc <HAL_RCC_OscConfig+0x218>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	68db      	ldr	r3, [r3, #12]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d101      	bne.n	8003df0 <HAL_RCC_OscConfig+0x20c>
 8003dec:	2301      	movs	r3, #1
 8003dee:	e266      	b.n	80042be <HAL_RCC_OscConfig+0x6da>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	691b      	ldr	r3, [r3, #16]
 8003df4:	4618      	mov	r0, r3
 8003df6:	f7ff fbf1 	bl	80035dc <LL_RCC_HSI_SetCalibTrimming>
 8003dfa:	e031      	b.n	8003e60 <HAL_RCC_OscConfig+0x27c>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	68db      	ldr	r3, [r3, #12]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d019      	beq.n	8003e38 <HAL_RCC_OscConfig+0x254>
 8003e04:	f7ff fbba 	bl	800357c <LL_RCC_HSI_Enable>
 8003e08:	f7fe faa8 	bl	800235c <HAL_GetTick>
 8003e0c:	6278      	str	r0, [r7, #36]	; 0x24
 8003e0e:	e008      	b.n	8003e22 <HAL_RCC_OscConfig+0x23e>
 8003e10:	f7fe faa4 	bl	800235c <HAL_GetTick>
 8003e14:	4602      	mov	r2, r0
 8003e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e18:	1ad3      	subs	r3, r2, r3
 8003e1a:	2b02      	cmp	r3, #2
 8003e1c:	d901      	bls.n	8003e22 <HAL_RCC_OscConfig+0x23e>
 8003e1e:	2303      	movs	r3, #3
 8003e20:	e24d      	b.n	80042be <HAL_RCC_OscConfig+0x6da>
 8003e22:	f7ff fbc9 	bl	80035b8 <LL_RCC_HSI_IsReady>
 8003e26:	4603      	mov	r3, r0
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d0f1      	beq.n	8003e10 <HAL_RCC_OscConfig+0x22c>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	691b      	ldr	r3, [r3, #16]
 8003e30:	4618      	mov	r0, r3
 8003e32:	f7ff fbd3 	bl	80035dc <LL_RCC_HSI_SetCalibTrimming>
 8003e36:	e013      	b.n	8003e60 <HAL_RCC_OscConfig+0x27c>
 8003e38:	f7ff fbaf 	bl	800359a <LL_RCC_HSI_Disable>
 8003e3c:	f7fe fa8e 	bl	800235c <HAL_GetTick>
 8003e40:	6278      	str	r0, [r7, #36]	; 0x24
 8003e42:	e008      	b.n	8003e56 <HAL_RCC_OscConfig+0x272>
 8003e44:	f7fe fa8a 	bl	800235c <HAL_GetTick>
 8003e48:	4602      	mov	r2, r0
 8003e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e4c:	1ad3      	subs	r3, r2, r3
 8003e4e:	2b02      	cmp	r3, #2
 8003e50:	d901      	bls.n	8003e56 <HAL_RCC_OscConfig+0x272>
 8003e52:	2303      	movs	r3, #3
 8003e54:	e233      	b.n	80042be <HAL_RCC_OscConfig+0x6da>
 8003e56:	f7ff fbaf 	bl	80035b8 <LL_RCC_HSI_IsReady>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d1f1      	bne.n	8003e44 <HAL_RCC_OscConfig+0x260>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f003 0308 	and.w	r3, r3, #8
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d106      	bne.n	8003e7a <HAL_RCC_OscConfig+0x296>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f003 0310 	and.w	r3, r3, #16
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	f000 80a3 	beq.w	8003fc0 <HAL_RCC_OscConfig+0x3dc>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	695b      	ldr	r3, [r3, #20]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d076      	beq.n	8003f70 <HAL_RCC_OscConfig+0x38c>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f003 0310 	and.w	r3, r3, #16
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d046      	beq.n	8003f1c <HAL_RCC_OscConfig+0x338>
 8003e8e:	f7ff fc66 	bl	800375e <LL_RCC_LSI1_IsReady>
 8003e92:	4603      	mov	r3, r0
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d113      	bne.n	8003ec0 <HAL_RCC_OscConfig+0x2dc>
 8003e98:	f7ff fc3f 	bl	800371a <LL_RCC_LSI1_Enable>
 8003e9c:	f7fe fa5e 	bl	800235c <HAL_GetTick>
 8003ea0:	6278      	str	r0, [r7, #36]	; 0x24
 8003ea2:	e008      	b.n	8003eb6 <HAL_RCC_OscConfig+0x2d2>
 8003ea4:	f7fe fa5a 	bl	800235c <HAL_GetTick>
 8003ea8:	4602      	mov	r2, r0
 8003eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eac:	1ad3      	subs	r3, r2, r3
 8003eae:	2b02      	cmp	r3, #2
 8003eb0:	d901      	bls.n	8003eb6 <HAL_RCC_OscConfig+0x2d2>
 8003eb2:	2303      	movs	r3, #3
 8003eb4:	e203      	b.n	80042be <HAL_RCC_OscConfig+0x6da>
 8003eb6:	f7ff fc52 	bl	800375e <LL_RCC_LSI1_IsReady>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d0f1      	beq.n	8003ea4 <HAL_RCC_OscConfig+0x2c0>
 8003ec0:	f7ff fc5f 	bl	8003782 <LL_RCC_LSI2_Enable>
 8003ec4:	f7fe fa4a 	bl	800235c <HAL_GetTick>
 8003ec8:	6278      	str	r0, [r7, #36]	; 0x24
 8003eca:	e008      	b.n	8003ede <HAL_RCC_OscConfig+0x2fa>
 8003ecc:	f7fe fa46 	bl	800235c <HAL_GetTick>
 8003ed0:	4602      	mov	r2, r0
 8003ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed4:	1ad3      	subs	r3, r2, r3
 8003ed6:	2b03      	cmp	r3, #3
 8003ed8:	d901      	bls.n	8003ede <HAL_RCC_OscConfig+0x2fa>
 8003eda:	2303      	movs	r3, #3
 8003edc:	e1ef      	b.n	80042be <HAL_RCC_OscConfig+0x6da>
 8003ede:	f7ff fc72 	bl	80037c6 <LL_RCC_LSI2_IsReady>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d0f1      	beq.n	8003ecc <HAL_RCC_OscConfig+0x2e8>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	699b      	ldr	r3, [r3, #24]
 8003eec:	4618      	mov	r0, r3
 8003eee:	f7ff fc7c 	bl	80037ea <LL_RCC_LSI2_SetTrimming>
 8003ef2:	f7ff fc23 	bl	800373c <LL_RCC_LSI1_Disable>
 8003ef6:	f7fe fa31 	bl	800235c <HAL_GetTick>
 8003efa:	6278      	str	r0, [r7, #36]	; 0x24
 8003efc:	e008      	b.n	8003f10 <HAL_RCC_OscConfig+0x32c>
 8003efe:	f7fe fa2d 	bl	800235c <HAL_GetTick>
 8003f02:	4602      	mov	r2, r0
 8003f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f06:	1ad3      	subs	r3, r2, r3
 8003f08:	2b02      	cmp	r3, #2
 8003f0a:	d901      	bls.n	8003f10 <HAL_RCC_OscConfig+0x32c>
 8003f0c:	2303      	movs	r3, #3
 8003f0e:	e1d6      	b.n	80042be <HAL_RCC_OscConfig+0x6da>
 8003f10:	f7ff fc25 	bl	800375e <LL_RCC_LSI1_IsReady>
 8003f14:	4603      	mov	r3, r0
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d1f1      	bne.n	8003efe <HAL_RCC_OscConfig+0x31a>
 8003f1a:	e051      	b.n	8003fc0 <HAL_RCC_OscConfig+0x3dc>
 8003f1c:	f7ff fbfd 	bl	800371a <LL_RCC_LSI1_Enable>
 8003f20:	f7fe fa1c 	bl	800235c <HAL_GetTick>
 8003f24:	6278      	str	r0, [r7, #36]	; 0x24
 8003f26:	e00c      	b.n	8003f42 <HAL_RCC_OscConfig+0x35e>
 8003f28:	20000008 	.word	0x20000008
 8003f2c:	2000000c 	.word	0x2000000c
 8003f30:	f7fe fa14 	bl	800235c <HAL_GetTick>
 8003f34:	4602      	mov	r2, r0
 8003f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f38:	1ad3      	subs	r3, r2, r3
 8003f3a:	2b02      	cmp	r3, #2
 8003f3c:	d901      	bls.n	8003f42 <HAL_RCC_OscConfig+0x35e>
 8003f3e:	2303      	movs	r3, #3
 8003f40:	e1bd      	b.n	80042be <HAL_RCC_OscConfig+0x6da>
 8003f42:	f7ff fc0c 	bl	800375e <LL_RCC_LSI1_IsReady>
 8003f46:	4603      	mov	r3, r0
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d0f1      	beq.n	8003f30 <HAL_RCC_OscConfig+0x34c>
 8003f4c:	f7ff fc2a 	bl	80037a4 <LL_RCC_LSI2_Disable>
 8003f50:	e008      	b.n	8003f64 <HAL_RCC_OscConfig+0x380>
 8003f52:	f7fe fa03 	bl	800235c <HAL_GetTick>
 8003f56:	4602      	mov	r2, r0
 8003f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f5a:	1ad3      	subs	r3, r2, r3
 8003f5c:	2b03      	cmp	r3, #3
 8003f5e:	d901      	bls.n	8003f64 <HAL_RCC_OscConfig+0x380>
 8003f60:	2303      	movs	r3, #3
 8003f62:	e1ac      	b.n	80042be <HAL_RCC_OscConfig+0x6da>
 8003f64:	f7ff fc2f 	bl	80037c6 <LL_RCC_LSI2_IsReady>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d1f1      	bne.n	8003f52 <HAL_RCC_OscConfig+0x36e>
 8003f6e:	e027      	b.n	8003fc0 <HAL_RCC_OscConfig+0x3dc>
 8003f70:	f7ff fc18 	bl	80037a4 <LL_RCC_LSI2_Disable>
 8003f74:	f7fe f9f2 	bl	800235c <HAL_GetTick>
 8003f78:	6278      	str	r0, [r7, #36]	; 0x24
 8003f7a:	e008      	b.n	8003f8e <HAL_RCC_OscConfig+0x3aa>
 8003f7c:	f7fe f9ee 	bl	800235c <HAL_GetTick>
 8003f80:	4602      	mov	r2, r0
 8003f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f84:	1ad3      	subs	r3, r2, r3
 8003f86:	2b03      	cmp	r3, #3
 8003f88:	d901      	bls.n	8003f8e <HAL_RCC_OscConfig+0x3aa>
 8003f8a:	2303      	movs	r3, #3
 8003f8c:	e197      	b.n	80042be <HAL_RCC_OscConfig+0x6da>
 8003f8e:	f7ff fc1a 	bl	80037c6 <LL_RCC_LSI2_IsReady>
 8003f92:	4603      	mov	r3, r0
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d1f1      	bne.n	8003f7c <HAL_RCC_OscConfig+0x398>
 8003f98:	f7ff fbd0 	bl	800373c <LL_RCC_LSI1_Disable>
 8003f9c:	f7fe f9de 	bl	800235c <HAL_GetTick>
 8003fa0:	6278      	str	r0, [r7, #36]	; 0x24
 8003fa2:	e008      	b.n	8003fb6 <HAL_RCC_OscConfig+0x3d2>
 8003fa4:	f7fe f9da 	bl	800235c <HAL_GetTick>
 8003fa8:	4602      	mov	r2, r0
 8003faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fac:	1ad3      	subs	r3, r2, r3
 8003fae:	2b02      	cmp	r3, #2
 8003fb0:	d901      	bls.n	8003fb6 <HAL_RCC_OscConfig+0x3d2>
 8003fb2:	2303      	movs	r3, #3
 8003fb4:	e183      	b.n	80042be <HAL_RCC_OscConfig+0x6da>
 8003fb6:	f7ff fbd2 	bl	800375e <LL_RCC_LSI1_IsReady>
 8003fba:	4603      	mov	r3, r0
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d1f1      	bne.n	8003fa4 <HAL_RCC_OscConfig+0x3c0>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f003 0304 	and.w	r3, r3, #4
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d05b      	beq.n	8004084 <HAL_RCC_OscConfig+0x4a0>
 8003fcc:	4ba7      	ldr	r3, [pc, #668]	; (800426c <HAL_RCC_OscConfig+0x688>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d114      	bne.n	8004002 <HAL_RCC_OscConfig+0x41e>
 8003fd8:	f7ff fa70 	bl	80034bc <HAL_PWR_EnableBkUpAccess>
 8003fdc:	f7fe f9be 	bl	800235c <HAL_GetTick>
 8003fe0:	6278      	str	r0, [r7, #36]	; 0x24
 8003fe2:	e008      	b.n	8003ff6 <HAL_RCC_OscConfig+0x412>
 8003fe4:	f7fe f9ba 	bl	800235c <HAL_GetTick>
 8003fe8:	4602      	mov	r2, r0
 8003fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fec:	1ad3      	subs	r3, r2, r3
 8003fee:	2b02      	cmp	r3, #2
 8003ff0:	d901      	bls.n	8003ff6 <HAL_RCC_OscConfig+0x412>
 8003ff2:	2303      	movs	r3, #3
 8003ff4:	e163      	b.n	80042be <HAL_RCC_OscConfig+0x6da>
 8003ff6:	4b9d      	ldr	r3, [pc, #628]	; (800426c <HAL_RCC_OscConfig+0x688>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d0f0      	beq.n	8003fe4 <HAL_RCC_OscConfig+0x400>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	689b      	ldr	r3, [r3, #8]
 8004006:	2b01      	cmp	r3, #1
 8004008:	d102      	bne.n	8004010 <HAL_RCC_OscConfig+0x42c>
 800400a:	f7ff fb30 	bl	800366e <LL_RCC_LSE_Enable>
 800400e:	e00c      	b.n	800402a <HAL_RCC_OscConfig+0x446>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	2b05      	cmp	r3, #5
 8004016:	d104      	bne.n	8004022 <HAL_RCC_OscConfig+0x43e>
 8004018:	f7ff fb4b 	bl	80036b2 <LL_RCC_LSE_EnableBypass>
 800401c:	f7ff fb27 	bl	800366e <LL_RCC_LSE_Enable>
 8004020:	e003      	b.n	800402a <HAL_RCC_OscConfig+0x446>
 8004022:	f7ff fb35 	bl	8003690 <LL_RCC_LSE_Disable>
 8004026:	f7ff fb55 	bl	80036d4 <LL_RCC_LSE_DisableBypass>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	689b      	ldr	r3, [r3, #8]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d014      	beq.n	800405c <HAL_RCC_OscConfig+0x478>
 8004032:	f7fe f993 	bl	800235c <HAL_GetTick>
 8004036:	6278      	str	r0, [r7, #36]	; 0x24
 8004038:	e00a      	b.n	8004050 <HAL_RCC_OscConfig+0x46c>
 800403a:	f7fe f98f 	bl	800235c <HAL_GetTick>
 800403e:	4602      	mov	r2, r0
 8004040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004042:	1ad3      	subs	r3, r2, r3
 8004044:	f241 3288 	movw	r2, #5000	; 0x1388
 8004048:	4293      	cmp	r3, r2
 800404a:	d901      	bls.n	8004050 <HAL_RCC_OscConfig+0x46c>
 800404c:	2303      	movs	r3, #3
 800404e:	e136      	b.n	80042be <HAL_RCC_OscConfig+0x6da>
 8004050:	f7ff fb51 	bl	80036f6 <LL_RCC_LSE_IsReady>
 8004054:	4603      	mov	r3, r0
 8004056:	2b00      	cmp	r3, #0
 8004058:	d0ef      	beq.n	800403a <HAL_RCC_OscConfig+0x456>
 800405a:	e013      	b.n	8004084 <HAL_RCC_OscConfig+0x4a0>
 800405c:	f7fe f97e 	bl	800235c <HAL_GetTick>
 8004060:	6278      	str	r0, [r7, #36]	; 0x24
 8004062:	e00a      	b.n	800407a <HAL_RCC_OscConfig+0x496>
 8004064:	f7fe f97a 	bl	800235c <HAL_GetTick>
 8004068:	4602      	mov	r2, r0
 800406a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800406c:	1ad3      	subs	r3, r2, r3
 800406e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004072:	4293      	cmp	r3, r2
 8004074:	d901      	bls.n	800407a <HAL_RCC_OscConfig+0x496>
 8004076:	2303      	movs	r3, #3
 8004078:	e121      	b.n	80042be <HAL_RCC_OscConfig+0x6da>
 800407a:	f7ff fb3c 	bl	80036f6 <LL_RCC_LSE_IsReady>
 800407e:	4603      	mov	r3, r0
 8004080:	2b00      	cmp	r3, #0
 8004082:	d1ef      	bne.n	8004064 <HAL_RCC_OscConfig+0x480>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800408c:	2b00      	cmp	r3, #0
 800408e:	d02c      	beq.n	80040ea <HAL_RCC_OscConfig+0x506>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004094:	2b00      	cmp	r3, #0
 8004096:	d014      	beq.n	80040c2 <HAL_RCC_OscConfig+0x4de>
 8004098:	f7ff fab5 	bl	8003606 <LL_RCC_HSI48_Enable>
 800409c:	f7fe f95e 	bl	800235c <HAL_GetTick>
 80040a0:	6278      	str	r0, [r7, #36]	; 0x24
 80040a2:	e008      	b.n	80040b6 <HAL_RCC_OscConfig+0x4d2>
 80040a4:	f7fe f95a 	bl	800235c <HAL_GetTick>
 80040a8:	4602      	mov	r2, r0
 80040aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ac:	1ad3      	subs	r3, r2, r3
 80040ae:	2b02      	cmp	r3, #2
 80040b0:	d901      	bls.n	80040b6 <HAL_RCC_OscConfig+0x4d2>
 80040b2:	2303      	movs	r3, #3
 80040b4:	e103      	b.n	80042be <HAL_RCC_OscConfig+0x6da>
 80040b6:	f7ff fac8 	bl	800364a <LL_RCC_HSI48_IsReady>
 80040ba:	4603      	mov	r3, r0
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d0f1      	beq.n	80040a4 <HAL_RCC_OscConfig+0x4c0>
 80040c0:	e013      	b.n	80040ea <HAL_RCC_OscConfig+0x506>
 80040c2:	f7ff fab1 	bl	8003628 <LL_RCC_HSI48_Disable>
 80040c6:	f7fe f949 	bl	800235c <HAL_GetTick>
 80040ca:	6278      	str	r0, [r7, #36]	; 0x24
 80040cc:	e008      	b.n	80040e0 <HAL_RCC_OscConfig+0x4fc>
 80040ce:	f7fe f945 	bl	800235c <HAL_GetTick>
 80040d2:	4602      	mov	r2, r0
 80040d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d6:	1ad3      	subs	r3, r2, r3
 80040d8:	2b02      	cmp	r3, #2
 80040da:	d901      	bls.n	80040e0 <HAL_RCC_OscConfig+0x4fc>
 80040dc:	2303      	movs	r3, #3
 80040de:	e0ee      	b.n	80042be <HAL_RCC_OscConfig+0x6da>
 80040e0:	f7ff fab3 	bl	800364a <LL_RCC_HSI48_IsReady>
 80040e4:	4603      	mov	r3, r0
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d1f1      	bne.n	80040ce <HAL_RCC_OscConfig+0x4ea>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	f000 80e4 	beq.w	80042bc <HAL_RCC_OscConfig+0x6d8>
 80040f4:	f7ff fc11 	bl	800391a <LL_RCC_GetSysClkSource>
 80040f8:	6138      	str	r0, [r7, #16]
 80040fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040fe:	68db      	ldr	r3, [r3, #12]
 8004100:	60fb      	str	r3, [r7, #12]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004106:	2b02      	cmp	r3, #2
 8004108:	f040 80b4 	bne.w	8004274 <HAL_RCC_OscConfig+0x690>
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	f003 0203 	and.w	r2, r3, #3
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004116:	429a      	cmp	r2, r3
 8004118:	d123      	bne.n	8004162 <HAL_RCC_OscConfig+0x57e>
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004124:	429a      	cmp	r2, r3
 8004126:	d11c      	bne.n	8004162 <HAL_RCC_OscConfig+0x57e>
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	0a1b      	lsrs	r3, r3, #8
 800412c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004134:	429a      	cmp	r2, r3
 8004136:	d114      	bne.n	8004162 <HAL_RCC_OscConfig+0x57e>
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004142:	429a      	cmp	r2, r3
 8004144:	d10d      	bne.n	8004162 <HAL_RCC_OscConfig+0x57e>
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004150:	429a      	cmp	r2, r3
 8004152:	d106      	bne.n	8004162 <HAL_RCC_OscConfig+0x57e>
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800415e:	429a      	cmp	r2, r3
 8004160:	d05d      	beq.n	800421e <HAL_RCC_OscConfig+0x63a>
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	2b0c      	cmp	r3, #12
 8004166:	d058      	beq.n	800421a <HAL_RCC_OscConfig+0x636>
 8004168:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004172:	2b00      	cmp	r3, #0
 8004174:	d001      	beq.n	800417a <HAL_RCC_OscConfig+0x596>
 8004176:	2301      	movs	r3, #1
 8004178:	e0a1      	b.n	80042be <HAL_RCC_OscConfig+0x6da>
 800417a:	f7ff fc84 	bl	8003a86 <LL_RCC_PLL_Disable>
 800417e:	f7fe f8ed 	bl	800235c <HAL_GetTick>
 8004182:	6278      	str	r0, [r7, #36]	; 0x24
 8004184:	e008      	b.n	8004198 <HAL_RCC_OscConfig+0x5b4>
 8004186:	f7fe f8e9 	bl	800235c <HAL_GetTick>
 800418a:	4602      	mov	r2, r0
 800418c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800418e:	1ad3      	subs	r3, r2, r3
 8004190:	2b02      	cmp	r3, #2
 8004192:	d901      	bls.n	8004198 <HAL_RCC_OscConfig+0x5b4>
 8004194:	2303      	movs	r3, #3
 8004196:	e092      	b.n	80042be <HAL_RCC_OscConfig+0x6da>
 8004198:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d1ef      	bne.n	8004186 <HAL_RCC_OscConfig+0x5a2>
 80041a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041aa:	68da      	ldr	r2, [r3, #12]
 80041ac:	4b30      	ldr	r3, [pc, #192]	; (8004270 <HAL_RCC_OscConfig+0x68c>)
 80041ae:	4013      	ands	r3, r2
 80041b0:	687a      	ldr	r2, [r7, #4]
 80041b2:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80041b4:	687a      	ldr	r2, [r7, #4]
 80041b6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80041b8:	4311      	orrs	r1, r2
 80041ba:	687a      	ldr	r2, [r7, #4]
 80041bc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80041be:	0212      	lsls	r2, r2, #8
 80041c0:	4311      	orrs	r1, r2
 80041c2:	687a      	ldr	r2, [r7, #4]
 80041c4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80041c6:	4311      	orrs	r1, r2
 80041c8:	687a      	ldr	r2, [r7, #4]
 80041ca:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80041cc:	4311      	orrs	r1, r2
 80041ce:	687a      	ldr	r2, [r7, #4]
 80041d0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80041d2:	430a      	orrs	r2, r1
 80041d4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80041d8:	4313      	orrs	r3, r2
 80041da:	60cb      	str	r3, [r1, #12]
 80041dc:	f7ff fc44 	bl	8003a68 <LL_RCC_PLL_Enable>
 80041e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041e4:	68db      	ldr	r3, [r3, #12]
 80041e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80041ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041ee:	60d3      	str	r3, [r2, #12]
 80041f0:	f7fe f8b4 	bl	800235c <HAL_GetTick>
 80041f4:	6278      	str	r0, [r7, #36]	; 0x24
 80041f6:	e008      	b.n	800420a <HAL_RCC_OscConfig+0x626>
 80041f8:	f7fe f8b0 	bl	800235c <HAL_GetTick>
 80041fc:	4602      	mov	r2, r0
 80041fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004200:	1ad3      	subs	r3, r2, r3
 8004202:	2b02      	cmp	r3, #2
 8004204:	d901      	bls.n	800420a <HAL_RCC_OscConfig+0x626>
 8004206:	2303      	movs	r3, #3
 8004208:	e059      	b.n	80042be <HAL_RCC_OscConfig+0x6da>
 800420a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004214:	2b00      	cmp	r3, #0
 8004216:	d0ef      	beq.n	80041f8 <HAL_RCC_OscConfig+0x614>
 8004218:	e050      	b.n	80042bc <HAL_RCC_OscConfig+0x6d8>
 800421a:	2301      	movs	r3, #1
 800421c:	e04f      	b.n	80042be <HAL_RCC_OscConfig+0x6da>
 800421e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004228:	2b00      	cmp	r3, #0
 800422a:	d147      	bne.n	80042bc <HAL_RCC_OscConfig+0x6d8>
 800422c:	f7ff fc1c 	bl	8003a68 <LL_RCC_PLL_Enable>
 8004230:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004234:	68db      	ldr	r3, [r3, #12]
 8004236:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800423a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800423e:	60d3      	str	r3, [r2, #12]
 8004240:	f7fe f88c 	bl	800235c <HAL_GetTick>
 8004244:	6278      	str	r0, [r7, #36]	; 0x24
 8004246:	e008      	b.n	800425a <HAL_RCC_OscConfig+0x676>
 8004248:	f7fe f888 	bl	800235c <HAL_GetTick>
 800424c:	4602      	mov	r2, r0
 800424e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004250:	1ad3      	subs	r3, r2, r3
 8004252:	2b02      	cmp	r3, #2
 8004254:	d901      	bls.n	800425a <HAL_RCC_OscConfig+0x676>
 8004256:	2303      	movs	r3, #3
 8004258:	e031      	b.n	80042be <HAL_RCC_OscConfig+0x6da>
 800425a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004264:	2b00      	cmp	r3, #0
 8004266:	d0ef      	beq.n	8004248 <HAL_RCC_OscConfig+0x664>
 8004268:	e028      	b.n	80042bc <HAL_RCC_OscConfig+0x6d8>
 800426a:	bf00      	nop
 800426c:	58000400 	.word	0x58000400
 8004270:	11c1808c 	.word	0x11c1808c
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	2b0c      	cmp	r3, #12
 8004278:	d01e      	beq.n	80042b8 <HAL_RCC_OscConfig+0x6d4>
 800427a:	f7ff fc04 	bl	8003a86 <LL_RCC_PLL_Disable>
 800427e:	f7fe f86d 	bl	800235c <HAL_GetTick>
 8004282:	6278      	str	r0, [r7, #36]	; 0x24
 8004284:	e008      	b.n	8004298 <HAL_RCC_OscConfig+0x6b4>
 8004286:	f7fe f869 	bl	800235c <HAL_GetTick>
 800428a:	4602      	mov	r2, r0
 800428c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800428e:	1ad3      	subs	r3, r2, r3
 8004290:	2b02      	cmp	r3, #2
 8004292:	d901      	bls.n	8004298 <HAL_RCC_OscConfig+0x6b4>
 8004294:	2303      	movs	r3, #3
 8004296:	e012      	b.n	80042be <HAL_RCC_OscConfig+0x6da>
 8004298:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d1ef      	bne.n	8004286 <HAL_RCC_OscConfig+0x6a2>
 80042a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042aa:	68da      	ldr	r2, [r3, #12]
 80042ac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80042b0:	4b05      	ldr	r3, [pc, #20]	; (80042c8 <HAL_RCC_OscConfig+0x6e4>)
 80042b2:	4013      	ands	r3, r2
 80042b4:	60cb      	str	r3, [r1, #12]
 80042b6:	e001      	b.n	80042bc <HAL_RCC_OscConfig+0x6d8>
 80042b8:	2301      	movs	r3, #1
 80042ba:	e000      	b.n	80042be <HAL_RCC_OscConfig+0x6da>
 80042bc:	2300      	movs	r3, #0
 80042be:	4618      	mov	r0, r3
 80042c0:	3734      	adds	r7, #52	; 0x34
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd90      	pop	{r4, r7, pc}
 80042c6:	bf00      	nop
 80042c8:	eefefffc 	.word	0xeefefffc

080042cc <HAL_RCC_ClockConfig>:
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b084      	sub	sp, #16
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
 80042d4:	6039      	str	r1, [r7, #0]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d101      	bne.n	80042e0 <HAL_RCC_ClockConfig+0x14>
 80042dc:	2301      	movs	r3, #1
 80042de:	e12d      	b.n	800453c <HAL_RCC_ClockConfig+0x270>
 80042e0:	4b98      	ldr	r3, [pc, #608]	; (8004544 <HAL_RCC_ClockConfig+0x278>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f003 0307 	and.w	r3, r3, #7
 80042e8:	683a      	ldr	r2, [r7, #0]
 80042ea:	429a      	cmp	r2, r3
 80042ec:	d91b      	bls.n	8004326 <HAL_RCC_ClockConfig+0x5a>
 80042ee:	4b95      	ldr	r3, [pc, #596]	; (8004544 <HAL_RCC_ClockConfig+0x278>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f023 0207 	bic.w	r2, r3, #7
 80042f6:	4993      	ldr	r1, [pc, #588]	; (8004544 <HAL_RCC_ClockConfig+0x278>)
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	4313      	orrs	r3, r2
 80042fc:	600b      	str	r3, [r1, #0]
 80042fe:	f7fe f82d 	bl	800235c <HAL_GetTick>
 8004302:	60f8      	str	r0, [r7, #12]
 8004304:	e008      	b.n	8004318 <HAL_RCC_ClockConfig+0x4c>
 8004306:	f7fe f829 	bl	800235c <HAL_GetTick>
 800430a:	4602      	mov	r2, r0
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	1ad3      	subs	r3, r2, r3
 8004310:	2b02      	cmp	r3, #2
 8004312:	d901      	bls.n	8004318 <HAL_RCC_ClockConfig+0x4c>
 8004314:	2303      	movs	r3, #3
 8004316:	e111      	b.n	800453c <HAL_RCC_ClockConfig+0x270>
 8004318:	4b8a      	ldr	r3, [pc, #552]	; (8004544 <HAL_RCC_ClockConfig+0x278>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f003 0307 	and.w	r3, r3, #7
 8004320:	683a      	ldr	r2, [r7, #0]
 8004322:	429a      	cmp	r2, r3
 8004324:	d1ef      	bne.n	8004306 <HAL_RCC_ClockConfig+0x3a>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f003 0302 	and.w	r3, r3, #2
 800432e:	2b00      	cmp	r3, #0
 8004330:	d016      	beq.n	8004360 <HAL_RCC_ClockConfig+0x94>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	689b      	ldr	r3, [r3, #8]
 8004336:	4618      	mov	r0, r3
 8004338:	f7ff fafb 	bl	8003932 <LL_RCC_SetAHBPrescaler>
 800433c:	f7fe f80e 	bl	800235c <HAL_GetTick>
 8004340:	60f8      	str	r0, [r7, #12]
 8004342:	e008      	b.n	8004356 <HAL_RCC_ClockConfig+0x8a>
 8004344:	f7fe f80a 	bl	800235c <HAL_GetTick>
 8004348:	4602      	mov	r2, r0
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	1ad3      	subs	r3, r2, r3
 800434e:	2b02      	cmp	r3, #2
 8004350:	d901      	bls.n	8004356 <HAL_RCC_ClockConfig+0x8a>
 8004352:	2303      	movs	r3, #3
 8004354:	e0f2      	b.n	800453c <HAL_RCC_ClockConfig+0x270>
 8004356:	f7ff fbe8 	bl	8003b2a <LL_RCC_IsActiveFlag_HPRE>
 800435a:	4603      	mov	r3, r0
 800435c:	2b00      	cmp	r3, #0
 800435e:	d0f1      	beq.n	8004344 <HAL_RCC_ClockConfig+0x78>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f003 0320 	and.w	r3, r3, #32
 8004368:	2b00      	cmp	r3, #0
 800436a:	d016      	beq.n	800439a <HAL_RCC_ClockConfig+0xce>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	695b      	ldr	r3, [r3, #20]
 8004370:	4618      	mov	r0, r3
 8004372:	f7ff faf2 	bl	800395a <LL_C2_RCC_SetAHBPrescaler>
 8004376:	f7fd fff1 	bl	800235c <HAL_GetTick>
 800437a:	60f8      	str	r0, [r7, #12]
 800437c:	e008      	b.n	8004390 <HAL_RCC_ClockConfig+0xc4>
 800437e:	f7fd ffed 	bl	800235c <HAL_GetTick>
 8004382:	4602      	mov	r2, r0
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	1ad3      	subs	r3, r2, r3
 8004388:	2b02      	cmp	r3, #2
 800438a:	d901      	bls.n	8004390 <HAL_RCC_ClockConfig+0xc4>
 800438c:	2303      	movs	r3, #3
 800438e:	e0d5      	b.n	800453c <HAL_RCC_ClockConfig+0x270>
 8004390:	f7ff fbdd 	bl	8003b4e <LL_RCC_IsActiveFlag_C2HPRE>
 8004394:	4603      	mov	r3, r0
 8004396:	2b00      	cmp	r3, #0
 8004398:	d0f1      	beq.n	800437e <HAL_RCC_ClockConfig+0xb2>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d016      	beq.n	80043d4 <HAL_RCC_ClockConfig+0x108>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	699b      	ldr	r3, [r3, #24]
 80043aa:	4618      	mov	r0, r3
 80043ac:	f7ff faeb 	bl	8003986 <LL_RCC_SetAHB4Prescaler>
 80043b0:	f7fd ffd4 	bl	800235c <HAL_GetTick>
 80043b4:	60f8      	str	r0, [r7, #12]
 80043b6:	e008      	b.n	80043ca <HAL_RCC_ClockConfig+0xfe>
 80043b8:	f7fd ffd0 	bl	800235c <HAL_GetTick>
 80043bc:	4602      	mov	r2, r0
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	1ad3      	subs	r3, r2, r3
 80043c2:	2b02      	cmp	r3, #2
 80043c4:	d901      	bls.n	80043ca <HAL_RCC_ClockConfig+0xfe>
 80043c6:	2303      	movs	r3, #3
 80043c8:	e0b8      	b.n	800453c <HAL_RCC_ClockConfig+0x270>
 80043ca:	f7ff fbd3 	bl	8003b74 <LL_RCC_IsActiveFlag_SHDHPRE>
 80043ce:	4603      	mov	r3, r0
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d0f1      	beq.n	80043b8 <HAL_RCC_ClockConfig+0xec>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f003 0304 	and.w	r3, r3, #4
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d016      	beq.n	800440e <HAL_RCC_ClockConfig+0x142>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	68db      	ldr	r3, [r3, #12]
 80043e4:	4618      	mov	r0, r3
 80043e6:	f7ff fae5 	bl	80039b4 <LL_RCC_SetAPB1Prescaler>
 80043ea:	f7fd ffb7 	bl	800235c <HAL_GetTick>
 80043ee:	60f8      	str	r0, [r7, #12]
 80043f0:	e008      	b.n	8004404 <HAL_RCC_ClockConfig+0x138>
 80043f2:	f7fd ffb3 	bl	800235c <HAL_GetTick>
 80043f6:	4602      	mov	r2, r0
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	1ad3      	subs	r3, r2, r3
 80043fc:	2b02      	cmp	r3, #2
 80043fe:	d901      	bls.n	8004404 <HAL_RCC_ClockConfig+0x138>
 8004400:	2303      	movs	r3, #3
 8004402:	e09b      	b.n	800453c <HAL_RCC_ClockConfig+0x270>
 8004404:	f7ff fbc9 	bl	8003b9a <LL_RCC_IsActiveFlag_PPRE1>
 8004408:	4603      	mov	r3, r0
 800440a:	2b00      	cmp	r3, #0
 800440c:	d0f1      	beq.n	80043f2 <HAL_RCC_ClockConfig+0x126>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f003 0308 	and.w	r3, r3, #8
 8004416:	2b00      	cmp	r3, #0
 8004418:	d017      	beq.n	800444a <HAL_RCC_ClockConfig+0x17e>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	691b      	ldr	r3, [r3, #16]
 800441e:	00db      	lsls	r3, r3, #3
 8004420:	4618      	mov	r0, r3
 8004422:	f7ff fadb 	bl	80039dc <LL_RCC_SetAPB2Prescaler>
 8004426:	f7fd ff99 	bl	800235c <HAL_GetTick>
 800442a:	60f8      	str	r0, [r7, #12]
 800442c:	e008      	b.n	8004440 <HAL_RCC_ClockConfig+0x174>
 800442e:	f7fd ff95 	bl	800235c <HAL_GetTick>
 8004432:	4602      	mov	r2, r0
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	1ad3      	subs	r3, r2, r3
 8004438:	2b02      	cmp	r3, #2
 800443a:	d901      	bls.n	8004440 <HAL_RCC_ClockConfig+0x174>
 800443c:	2303      	movs	r3, #3
 800443e:	e07d      	b.n	800453c <HAL_RCC_ClockConfig+0x270>
 8004440:	f7ff fbbd 	bl	8003bbe <LL_RCC_IsActiveFlag_PPRE2>
 8004444:	4603      	mov	r3, r0
 8004446:	2b00      	cmp	r3, #0
 8004448:	d0f1      	beq.n	800442e <HAL_RCC_ClockConfig+0x162>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f003 0301 	and.w	r3, r3, #1
 8004452:	2b00      	cmp	r3, #0
 8004454:	d043      	beq.n	80044de <HAL_RCC_ClockConfig+0x212>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	2b02      	cmp	r3, #2
 800445c:	d106      	bne.n	800446c <HAL_RCC_ClockConfig+0x1a0>
 800445e:	f7ff f87b 	bl	8003558 <LL_RCC_HSE_IsReady>
 8004462:	4603      	mov	r3, r0
 8004464:	2b00      	cmp	r3, #0
 8004466:	d11e      	bne.n	80044a6 <HAL_RCC_ClockConfig+0x1da>
 8004468:	2301      	movs	r3, #1
 800446a:	e067      	b.n	800453c <HAL_RCC_ClockConfig+0x270>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	2b03      	cmp	r3, #3
 8004472:	d106      	bne.n	8004482 <HAL_RCC_ClockConfig+0x1b6>
 8004474:	f7ff fb16 	bl	8003aa4 <LL_RCC_PLL_IsReady>
 8004478:	4603      	mov	r3, r0
 800447a:	2b00      	cmp	r3, #0
 800447c:	d113      	bne.n	80044a6 <HAL_RCC_ClockConfig+0x1da>
 800447e:	2301      	movs	r3, #1
 8004480:	e05c      	b.n	800453c <HAL_RCC_ClockConfig+0x270>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d106      	bne.n	8004498 <HAL_RCC_ClockConfig+0x1cc>
 800448a:	f7ff f9e3 	bl	8003854 <LL_RCC_MSI_IsReady>
 800448e:	4603      	mov	r3, r0
 8004490:	2b00      	cmp	r3, #0
 8004492:	d108      	bne.n	80044a6 <HAL_RCC_ClockConfig+0x1da>
 8004494:	2301      	movs	r3, #1
 8004496:	e051      	b.n	800453c <HAL_RCC_ClockConfig+0x270>
 8004498:	f7ff f88e 	bl	80035b8 <LL_RCC_HSI_IsReady>
 800449c:	4603      	mov	r3, r0
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d101      	bne.n	80044a6 <HAL_RCC_ClockConfig+0x1da>
 80044a2:	2301      	movs	r3, #1
 80044a4:	e04a      	b.n	800453c <HAL_RCC_ClockConfig+0x270>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	4618      	mov	r0, r3
 80044ac:	f7ff fa21 	bl	80038f2 <LL_RCC_SetSysClkSource>
 80044b0:	f7fd ff54 	bl	800235c <HAL_GetTick>
 80044b4:	60f8      	str	r0, [r7, #12]
 80044b6:	e00a      	b.n	80044ce <HAL_RCC_ClockConfig+0x202>
 80044b8:	f7fd ff50 	bl	800235c <HAL_GetTick>
 80044bc:	4602      	mov	r2, r0
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	1ad3      	subs	r3, r2, r3
 80044c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d901      	bls.n	80044ce <HAL_RCC_ClockConfig+0x202>
 80044ca:	2303      	movs	r3, #3
 80044cc:	e036      	b.n	800453c <HAL_RCC_ClockConfig+0x270>
 80044ce:	f7ff fa24 	bl	800391a <LL_RCC_GetSysClkSource>
 80044d2:	4602      	mov	r2, r0
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	009b      	lsls	r3, r3, #2
 80044da:	429a      	cmp	r2, r3
 80044dc:	d1ec      	bne.n	80044b8 <HAL_RCC_ClockConfig+0x1ec>
 80044de:	4b19      	ldr	r3, [pc, #100]	; (8004544 <HAL_RCC_ClockConfig+0x278>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f003 0307 	and.w	r3, r3, #7
 80044e6:	683a      	ldr	r2, [r7, #0]
 80044e8:	429a      	cmp	r2, r3
 80044ea:	d21b      	bcs.n	8004524 <HAL_RCC_ClockConfig+0x258>
 80044ec:	4b15      	ldr	r3, [pc, #84]	; (8004544 <HAL_RCC_ClockConfig+0x278>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f023 0207 	bic.w	r2, r3, #7
 80044f4:	4913      	ldr	r1, [pc, #76]	; (8004544 <HAL_RCC_ClockConfig+0x278>)
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	4313      	orrs	r3, r2
 80044fa:	600b      	str	r3, [r1, #0]
 80044fc:	f7fd ff2e 	bl	800235c <HAL_GetTick>
 8004500:	60f8      	str	r0, [r7, #12]
 8004502:	e008      	b.n	8004516 <HAL_RCC_ClockConfig+0x24a>
 8004504:	f7fd ff2a 	bl	800235c <HAL_GetTick>
 8004508:	4602      	mov	r2, r0
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	1ad3      	subs	r3, r2, r3
 800450e:	2b02      	cmp	r3, #2
 8004510:	d901      	bls.n	8004516 <HAL_RCC_ClockConfig+0x24a>
 8004512:	2303      	movs	r3, #3
 8004514:	e012      	b.n	800453c <HAL_RCC_ClockConfig+0x270>
 8004516:	4b0b      	ldr	r3, [pc, #44]	; (8004544 <HAL_RCC_ClockConfig+0x278>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f003 0307 	and.w	r3, r3, #7
 800451e:	683a      	ldr	r2, [r7, #0]
 8004520:	429a      	cmp	r2, r3
 8004522:	d1ef      	bne.n	8004504 <HAL_RCC_ClockConfig+0x238>
 8004524:	f000 f87e 	bl	8004624 <HAL_RCC_GetHCLKFreq>
 8004528:	4603      	mov	r3, r0
 800452a:	4a07      	ldr	r2, [pc, #28]	; (8004548 <HAL_RCC_ClockConfig+0x27c>)
 800452c:	6013      	str	r3, [r2, #0]
 800452e:	f7fd ff21 	bl	8002374 <HAL_GetTickPrio>
 8004532:	4603      	mov	r3, r0
 8004534:	4618      	mov	r0, r3
 8004536:	f7fd fec3 	bl	80022c0 <HAL_InitTick>
 800453a:	4603      	mov	r3, r0
 800453c:	4618      	mov	r0, r3
 800453e:	3710      	adds	r7, #16
 8004540:	46bd      	mov	sp, r7
 8004542:	bd80      	pop	{r7, pc}
 8004544:	58004000 	.word	0x58004000
 8004548:	20000008 	.word	0x20000008

0800454c <HAL_RCC_GetSysClockFreq>:
 800454c:	b590      	push	{r4, r7, lr}
 800454e:	b085      	sub	sp, #20
 8004550:	af00      	add	r7, sp, #0
 8004552:	f7ff f9e2 	bl	800391a <LL_RCC_GetSysClkSource>
 8004556:	6078      	str	r0, [r7, #4]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d10a      	bne.n	8004574 <HAL_RCC_GetSysClockFreq+0x28>
 800455e:	f7ff f99e 	bl	800389e <LL_RCC_MSI_GetRange>
 8004562:	4603      	mov	r3, r0
 8004564:	091b      	lsrs	r3, r3, #4
 8004566:	f003 030f 	and.w	r3, r3, #15
 800456a:	4a2b      	ldr	r2, [pc, #172]	; (8004618 <HAL_RCC_GetSysClockFreq+0xcc>)
 800456c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004570:	60fb      	str	r3, [r7, #12]
 8004572:	e04b      	b.n	800460c <HAL_RCC_GetSysClockFreq+0xc0>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2b04      	cmp	r3, #4
 8004578:	d102      	bne.n	8004580 <HAL_RCC_GetSysClockFreq+0x34>
 800457a:	4b28      	ldr	r3, [pc, #160]	; (800461c <HAL_RCC_GetSysClockFreq+0xd0>)
 800457c:	60fb      	str	r3, [r7, #12]
 800457e:	e045      	b.n	800460c <HAL_RCC_GetSysClockFreq+0xc0>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2b08      	cmp	r3, #8
 8004584:	d10a      	bne.n	800459c <HAL_RCC_GetSysClockFreq+0x50>
 8004586:	f7fe ffb7 	bl	80034f8 <LL_RCC_HSE_IsEnabledDiv2>
 800458a:	4603      	mov	r3, r0
 800458c:	2b01      	cmp	r3, #1
 800458e:	d102      	bne.n	8004596 <HAL_RCC_GetSysClockFreq+0x4a>
 8004590:	4b22      	ldr	r3, [pc, #136]	; (800461c <HAL_RCC_GetSysClockFreq+0xd0>)
 8004592:	60fb      	str	r3, [r7, #12]
 8004594:	e03a      	b.n	800460c <HAL_RCC_GetSysClockFreq+0xc0>
 8004596:	4b22      	ldr	r3, [pc, #136]	; (8004620 <HAL_RCC_GetSysClockFreq+0xd4>)
 8004598:	60fb      	str	r3, [r7, #12]
 800459a:	e037      	b.n	800460c <HAL_RCC_GetSysClockFreq+0xc0>
 800459c:	f7ff fab9 	bl	8003b12 <LL_RCC_PLL_GetMainSource>
 80045a0:	6038      	str	r0, [r7, #0]
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	2b02      	cmp	r3, #2
 80045a6:	d003      	beq.n	80045b0 <HAL_RCC_GetSysClockFreq+0x64>
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	2b03      	cmp	r3, #3
 80045ac:	d003      	beq.n	80045b6 <HAL_RCC_GetSysClockFreq+0x6a>
 80045ae:	e00d      	b.n	80045cc <HAL_RCC_GetSysClockFreq+0x80>
 80045b0:	4b1a      	ldr	r3, [pc, #104]	; (800461c <HAL_RCC_GetSysClockFreq+0xd0>)
 80045b2:	60bb      	str	r3, [r7, #8]
 80045b4:	e015      	b.n	80045e2 <HAL_RCC_GetSysClockFreq+0x96>
 80045b6:	f7fe ff9f 	bl	80034f8 <LL_RCC_HSE_IsEnabledDiv2>
 80045ba:	4603      	mov	r3, r0
 80045bc:	2b01      	cmp	r3, #1
 80045be:	d102      	bne.n	80045c6 <HAL_RCC_GetSysClockFreq+0x7a>
 80045c0:	4b16      	ldr	r3, [pc, #88]	; (800461c <HAL_RCC_GetSysClockFreq+0xd0>)
 80045c2:	60bb      	str	r3, [r7, #8]
 80045c4:	e00d      	b.n	80045e2 <HAL_RCC_GetSysClockFreq+0x96>
 80045c6:	4b16      	ldr	r3, [pc, #88]	; (8004620 <HAL_RCC_GetSysClockFreq+0xd4>)
 80045c8:	60bb      	str	r3, [r7, #8]
 80045ca:	e00a      	b.n	80045e2 <HAL_RCC_GetSysClockFreq+0x96>
 80045cc:	f7ff f967 	bl	800389e <LL_RCC_MSI_GetRange>
 80045d0:	4603      	mov	r3, r0
 80045d2:	091b      	lsrs	r3, r3, #4
 80045d4:	f003 030f 	and.w	r3, r3, #15
 80045d8:	4a0f      	ldr	r2, [pc, #60]	; (8004618 <HAL_RCC_GetSysClockFreq+0xcc>)
 80045da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045de:	60bb      	str	r3, [r7, #8]
 80045e0:	bf00      	nop
 80045e2:	f7ff fa71 	bl	8003ac8 <LL_RCC_PLL_GetN>
 80045e6:	4602      	mov	r2, r0
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	fb03 f402 	mul.w	r4, r3, r2
 80045ee:	f7ff fa84 	bl	8003afa <LL_RCC_PLL_GetDivider>
 80045f2:	4603      	mov	r3, r0
 80045f4:	091b      	lsrs	r3, r3, #4
 80045f6:	3301      	adds	r3, #1
 80045f8:	fbb4 f4f3 	udiv	r4, r4, r3
 80045fc:	f7ff fa71 	bl	8003ae2 <LL_RCC_PLL_GetR>
 8004600:	4603      	mov	r3, r0
 8004602:	0f5b      	lsrs	r3, r3, #29
 8004604:	3301      	adds	r3, #1
 8004606:	fbb4 f3f3 	udiv	r3, r4, r3
 800460a:	60fb      	str	r3, [r7, #12]
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	4618      	mov	r0, r3
 8004610:	3714      	adds	r7, #20
 8004612:	46bd      	mov	sp, r7
 8004614:	bd90      	pop	{r4, r7, pc}
 8004616:	bf00      	nop
 8004618:	0800a55c 	.word	0x0800a55c
 800461c:	00f42400 	.word	0x00f42400
 8004620:	01e84800 	.word	0x01e84800

08004624 <HAL_RCC_GetHCLKFreq>:
 8004624:	b598      	push	{r3, r4, r7, lr}
 8004626:	af00      	add	r7, sp, #0
 8004628:	f7ff ff90 	bl	800454c <HAL_RCC_GetSysClockFreq>
 800462c:	4604      	mov	r4, r0
 800462e:	f7ff f9e9 	bl	8003a04 <LL_RCC_GetAHBPrescaler>
 8004632:	4603      	mov	r3, r0
 8004634:	091b      	lsrs	r3, r3, #4
 8004636:	f003 030f 	and.w	r3, r3, #15
 800463a:	4a03      	ldr	r2, [pc, #12]	; (8004648 <HAL_RCC_GetHCLKFreq+0x24>)
 800463c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004640:	fbb4 f3f3 	udiv	r3, r4, r3
 8004644:	4618      	mov	r0, r3
 8004646:	bd98      	pop	{r3, r4, r7, pc}
 8004648:	0800a4fc 	.word	0x0800a4fc

0800464c <HAL_RCC_GetPCLK1Freq>:
 800464c:	b598      	push	{r3, r4, r7, lr}
 800464e:	af00      	add	r7, sp, #0
 8004650:	f7ff ffe8 	bl	8004624 <HAL_RCC_GetHCLKFreq>
 8004654:	4604      	mov	r4, r0
 8004656:	f7ff f9ef 	bl	8003a38 <LL_RCC_GetAPB1Prescaler>
 800465a:	4603      	mov	r3, r0
 800465c:	0a1b      	lsrs	r3, r3, #8
 800465e:	f003 0307 	and.w	r3, r3, #7
 8004662:	4a04      	ldr	r2, [pc, #16]	; (8004674 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004664:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004668:	f003 031f 	and.w	r3, r3, #31
 800466c:	fa24 f303 	lsr.w	r3, r4, r3
 8004670:	4618      	mov	r0, r3
 8004672:	bd98      	pop	{r3, r4, r7, pc}
 8004674:	0800a53c 	.word	0x0800a53c

08004678 <HAL_RCC_GetPCLK2Freq>:
 8004678:	b598      	push	{r3, r4, r7, lr}
 800467a:	af00      	add	r7, sp, #0
 800467c:	f7ff ffd2 	bl	8004624 <HAL_RCC_GetHCLKFreq>
 8004680:	4604      	mov	r4, r0
 8004682:	f7ff f9e5 	bl	8003a50 <LL_RCC_GetAPB2Prescaler>
 8004686:	4603      	mov	r3, r0
 8004688:	0adb      	lsrs	r3, r3, #11
 800468a:	f003 0307 	and.w	r3, r3, #7
 800468e:	4a04      	ldr	r2, [pc, #16]	; (80046a0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004690:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004694:	f003 031f 	and.w	r3, r3, #31
 8004698:	fa24 f303 	lsr.w	r3, r4, r3
 800469c:	4618      	mov	r0, r3
 800469e:	bd98      	pop	{r3, r4, r7, pc}
 80046a0:	0800a53c 	.word	0x0800a53c

080046a4 <RCC_SetFlashLatencyFromMSIRange>:
 80046a4:	b590      	push	{r4, r7, lr}
 80046a6:	b085      	sub	sp, #20
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2bb0      	cmp	r3, #176	; 0xb0
 80046b0:	d903      	bls.n	80046ba <RCC_SetFlashLatencyFromMSIRange+0x16>
 80046b2:	4b15      	ldr	r3, [pc, #84]	; (8004708 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80046b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046b6:	60fb      	str	r3, [r7, #12]
 80046b8:	e007      	b.n	80046ca <RCC_SetFlashLatencyFromMSIRange+0x26>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	091b      	lsrs	r3, r3, #4
 80046be:	f003 030f 	and.w	r3, r3, #15
 80046c2:	4a11      	ldr	r2, [pc, #68]	; (8004708 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80046c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046c8:	60fb      	str	r3, [r7, #12]
 80046ca:	f7ff f9a7 	bl	8003a1c <LL_RCC_GetAHB4Prescaler>
 80046ce:	4603      	mov	r3, r0
 80046d0:	091b      	lsrs	r3, r3, #4
 80046d2:	f003 030f 	and.w	r3, r3, #15
 80046d6:	4a0d      	ldr	r2, [pc, #52]	; (800470c <RCC_SetFlashLatencyFromMSIRange+0x68>)
 80046d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046dc:	68fa      	ldr	r2, [r7, #12]
 80046de:	fbb2 f3f3 	udiv	r3, r2, r3
 80046e2:	60bb      	str	r3, [r7, #8]
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	4a0a      	ldr	r2, [pc, #40]	; (8004710 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 80046e8:	fba2 2303 	umull	r2, r3, r2, r3
 80046ec:	0c9c      	lsrs	r4, r3, #18
 80046ee:	f7fe fef5 	bl	80034dc <HAL_PWREx_GetVoltageRange>
 80046f2:	4603      	mov	r3, r0
 80046f4:	4619      	mov	r1, r3
 80046f6:	4620      	mov	r0, r4
 80046f8:	f000 f80c 	bl	8004714 <RCC_SetFlashLatency>
 80046fc:	4603      	mov	r3, r0
 80046fe:	4618      	mov	r0, r3
 8004700:	3714      	adds	r7, #20
 8004702:	46bd      	mov	sp, r7
 8004704:	bd90      	pop	{r4, r7, pc}
 8004706:	bf00      	nop
 8004708:	0800a55c 	.word	0x0800a55c
 800470c:	0800a4fc 	.word	0x0800a4fc
 8004710:	431bde83 	.word	0x431bde83

08004714 <RCC_SetFlashLatency>:
 8004714:	b590      	push	{r4, r7, lr}
 8004716:	b093      	sub	sp, #76	; 0x4c
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
 800471c:	6039      	str	r1, [r7, #0]
 800471e:	4b37      	ldr	r3, [pc, #220]	; (80047fc <RCC_SetFlashLatency+0xe8>)
 8004720:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8004724:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004726:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800472a:	4a35      	ldr	r2, [pc, #212]	; (8004800 <RCC_SetFlashLatency+0xec>)
 800472c:	f107 031c 	add.w	r3, r7, #28
 8004730:	ca07      	ldmia	r2, {r0, r1, r2}
 8004732:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8004736:	4b33      	ldr	r3, [pc, #204]	; (8004804 <RCC_SetFlashLatency+0xf0>)
 8004738:	f107 040c 	add.w	r4, r7, #12
 800473c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800473e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8004742:	2300      	movs	r3, #0
 8004744:	647b      	str	r3, [r7, #68]	; 0x44
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800474c:	d11a      	bne.n	8004784 <RCC_SetFlashLatency+0x70>
 800474e:	2300      	movs	r3, #0
 8004750:	643b      	str	r3, [r7, #64]	; 0x40
 8004752:	e013      	b.n	800477c <RCC_SetFlashLatency+0x68>
 8004754:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004756:	009b      	lsls	r3, r3, #2
 8004758:	3348      	adds	r3, #72	; 0x48
 800475a:	443b      	add	r3, r7
 800475c:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8004760:	687a      	ldr	r2, [r7, #4]
 8004762:	429a      	cmp	r2, r3
 8004764:	d807      	bhi.n	8004776 <RCC_SetFlashLatency+0x62>
 8004766:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004768:	009b      	lsls	r3, r3, #2
 800476a:	3348      	adds	r3, #72	; 0x48
 800476c:	443b      	add	r3, r7
 800476e:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8004772:	647b      	str	r3, [r7, #68]	; 0x44
 8004774:	e020      	b.n	80047b8 <RCC_SetFlashLatency+0xa4>
 8004776:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004778:	3301      	adds	r3, #1
 800477a:	643b      	str	r3, [r7, #64]	; 0x40
 800477c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800477e:	2b03      	cmp	r3, #3
 8004780:	d9e8      	bls.n	8004754 <RCC_SetFlashLatency+0x40>
 8004782:	e019      	b.n	80047b8 <RCC_SetFlashLatency+0xa4>
 8004784:	2300      	movs	r3, #0
 8004786:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004788:	e013      	b.n	80047b2 <RCC_SetFlashLatency+0x9e>
 800478a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800478c:	009b      	lsls	r3, r3, #2
 800478e:	3348      	adds	r3, #72	; 0x48
 8004790:	443b      	add	r3, r7
 8004792:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8004796:	687a      	ldr	r2, [r7, #4]
 8004798:	429a      	cmp	r2, r3
 800479a:	d807      	bhi.n	80047ac <RCC_SetFlashLatency+0x98>
 800479c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800479e:	009b      	lsls	r3, r3, #2
 80047a0:	3348      	adds	r3, #72	; 0x48
 80047a2:	443b      	add	r3, r7
 80047a4:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80047a8:	647b      	str	r3, [r7, #68]	; 0x44
 80047aa:	e005      	b.n	80047b8 <RCC_SetFlashLatency+0xa4>
 80047ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047ae:	3301      	adds	r3, #1
 80047b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80047b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047b4:	2b02      	cmp	r3, #2
 80047b6:	d9e8      	bls.n	800478a <RCC_SetFlashLatency+0x76>
 80047b8:	4b13      	ldr	r3, [pc, #76]	; (8004808 <RCC_SetFlashLatency+0xf4>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f023 0207 	bic.w	r2, r3, #7
 80047c0:	4911      	ldr	r1, [pc, #68]	; (8004808 <RCC_SetFlashLatency+0xf4>)
 80047c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80047c4:	4313      	orrs	r3, r2
 80047c6:	600b      	str	r3, [r1, #0]
 80047c8:	f7fd fdc8 	bl	800235c <HAL_GetTick>
 80047cc:	63b8      	str	r0, [r7, #56]	; 0x38
 80047ce:	e008      	b.n	80047e2 <RCC_SetFlashLatency+0xce>
 80047d0:	f7fd fdc4 	bl	800235c <HAL_GetTick>
 80047d4:	4602      	mov	r2, r0
 80047d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047d8:	1ad3      	subs	r3, r2, r3
 80047da:	2b02      	cmp	r3, #2
 80047dc:	d901      	bls.n	80047e2 <RCC_SetFlashLatency+0xce>
 80047de:	2303      	movs	r3, #3
 80047e0:	e007      	b.n	80047f2 <RCC_SetFlashLatency+0xde>
 80047e2:	4b09      	ldr	r3, [pc, #36]	; (8004808 <RCC_SetFlashLatency+0xf4>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f003 0307 	and.w	r3, r3, #7
 80047ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80047ec:	429a      	cmp	r2, r3
 80047ee:	d1ef      	bne.n	80047d0 <RCC_SetFlashLatency+0xbc>
 80047f0:	2300      	movs	r3, #0
 80047f2:	4618      	mov	r0, r3
 80047f4:	374c      	adds	r7, #76	; 0x4c
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd90      	pop	{r4, r7, pc}
 80047fa:	bf00      	nop
 80047fc:	0800a358 	.word	0x0800a358
 8004800:	0800a368 	.word	0x0800a368
 8004804:	0800a374 	.word	0x0800a374
 8004808:	58004000 	.word	0x58004000

0800480c <LL_RCC_LSE_IsEnabled>:
 800480c:	b480      	push	{r7}
 800480e:	af00      	add	r7, sp, #0
 8004810:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004814:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004818:	f003 0301 	and.w	r3, r3, #1
 800481c:	2b01      	cmp	r3, #1
 800481e:	d101      	bne.n	8004824 <LL_RCC_LSE_IsEnabled+0x18>
 8004820:	2301      	movs	r3, #1
 8004822:	e000      	b.n	8004826 <LL_RCC_LSE_IsEnabled+0x1a>
 8004824:	2300      	movs	r3, #0
 8004826:	4618      	mov	r0, r3
 8004828:	46bd      	mov	sp, r7
 800482a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482e:	4770      	bx	lr

08004830 <LL_RCC_LSE_IsReady>:
 8004830:	b480      	push	{r7}
 8004832:	af00      	add	r7, sp, #0
 8004834:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004838:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800483c:	f003 0302 	and.w	r3, r3, #2
 8004840:	2b02      	cmp	r3, #2
 8004842:	d101      	bne.n	8004848 <LL_RCC_LSE_IsReady+0x18>
 8004844:	2301      	movs	r3, #1
 8004846:	e000      	b.n	800484a <LL_RCC_LSE_IsReady+0x1a>
 8004848:	2300      	movs	r3, #0
 800484a:	4618      	mov	r0, r3
 800484c:	46bd      	mov	sp, r7
 800484e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004852:	4770      	bx	lr

08004854 <LL_RCC_SetRFWKPClockSource>:
 8004854:	b480      	push	{r7}
 8004856:	b083      	sub	sp, #12
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
 800485c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004860:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004864:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004868:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	4313      	orrs	r3, r2
 8004870:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
 8004874:	bf00      	nop
 8004876:	370c      	adds	r7, #12
 8004878:	46bd      	mov	sp, r7
 800487a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487e:	4770      	bx	lr

08004880 <LL_RCC_SetSMPSClockSource>:
 8004880:	b480      	push	{r7}
 8004882:	b083      	sub	sp, #12
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
 8004888:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800488c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800488e:	f023 0203 	bic.w	r2, r3, #3
 8004892:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	4313      	orrs	r3, r2
 800489a:	624b      	str	r3, [r1, #36]	; 0x24
 800489c:	bf00      	nop
 800489e:	370c      	adds	r7, #12
 80048a0:	46bd      	mov	sp, r7
 80048a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a6:	4770      	bx	lr

080048a8 <LL_RCC_SetSMPSPrescaler>:
 80048a8:	b480      	push	{r7}
 80048aa:	b083      	sub	sp, #12
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
 80048b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80048ba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	4313      	orrs	r3, r2
 80048c2:	624b      	str	r3, [r1, #36]	; 0x24
 80048c4:	bf00      	nop
 80048c6:	370c      	adds	r7, #12
 80048c8:	46bd      	mov	sp, r7
 80048ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ce:	4770      	bx	lr

080048d0 <LL_RCC_SetUSARTClockSource>:
 80048d0:	b480      	push	{r7}
 80048d2:	b083      	sub	sp, #12
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
 80048d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048e0:	f023 0203 	bic.w	r2, r3, #3
 80048e4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	4313      	orrs	r3, r2
 80048ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80048f0:	bf00      	nop
 80048f2:	370c      	adds	r7, #12
 80048f4:	46bd      	mov	sp, r7
 80048f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fa:	4770      	bx	lr

080048fc <LL_RCC_SetLPUARTClockSource>:
 80048fc:	b480      	push	{r7}
 80048fe:	b083      	sub	sp, #12
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
 8004904:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004908:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800490c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004910:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	4313      	orrs	r3, r2
 8004918:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800491c:	bf00      	nop
 800491e:	370c      	adds	r7, #12
 8004920:	46bd      	mov	sp, r7
 8004922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004926:	4770      	bx	lr

08004928 <LL_RCC_SetI2CClockSource>:
 8004928:	b480      	push	{r7}
 800492a:	b083      	sub	sp, #12
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
 8004930:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004934:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	091b      	lsrs	r3, r3, #4
 800493c:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8004940:	43db      	mvns	r3, r3
 8004942:	401a      	ands	r2, r3
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	011b      	lsls	r3, r3, #4
 8004948:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800494c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004950:	4313      	orrs	r3, r2
 8004952:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004956:	bf00      	nop
 8004958:	370c      	adds	r7, #12
 800495a:	46bd      	mov	sp, r7
 800495c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004960:	4770      	bx	lr

08004962 <LL_RCC_SetLPTIMClockSource>:
 8004962:	b480      	push	{r7}
 8004964:	b083      	sub	sp, #12
 8004966:	af00      	add	r7, sp, #0
 8004968:	6078      	str	r0, [r7, #4]
 800496a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800496e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	0c1b      	lsrs	r3, r3, #16
 8004976:	041b      	lsls	r3, r3, #16
 8004978:	43db      	mvns	r3, r3
 800497a:	401a      	ands	r2, r3
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	041b      	lsls	r3, r3, #16
 8004980:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004984:	4313      	orrs	r3, r2
 8004986:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800498a:	bf00      	nop
 800498c:	370c      	adds	r7, #12
 800498e:	46bd      	mov	sp, r7
 8004990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004994:	4770      	bx	lr

08004996 <LL_RCC_SetSAIClockSource>:
 8004996:	b480      	push	{r7}
 8004998:	b083      	sub	sp, #12
 800499a:	af00      	add	r7, sp, #0
 800499c:	6078      	str	r0, [r7, #4]
 800499e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049a6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80049aa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	4313      	orrs	r3, r2
 80049b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80049b6:	bf00      	nop
 80049b8:	370c      	adds	r7, #12
 80049ba:	46bd      	mov	sp, r7
 80049bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c0:	4770      	bx	lr

080049c2 <LL_RCC_SetRNGClockSource>:
 80049c2:	b480      	push	{r7}
 80049c4:	b083      	sub	sp, #12
 80049c6:	af00      	add	r7, sp, #0
 80049c8:	6078      	str	r0, [r7, #4]
 80049ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049d2:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80049d6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	4313      	orrs	r3, r2
 80049de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80049e2:	bf00      	nop
 80049e4:	370c      	adds	r7, #12
 80049e6:	46bd      	mov	sp, r7
 80049e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ec:	4770      	bx	lr

080049ee <LL_RCC_SetCLK48ClockSource>:
 80049ee:	b480      	push	{r7}
 80049f0:	b083      	sub	sp, #12
 80049f2:	af00      	add	r7, sp, #0
 80049f4:	6078      	str	r0, [r7, #4]
 80049f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049fe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004a02:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004a0e:	bf00      	nop
 8004a10:	370c      	adds	r7, #12
 8004a12:	46bd      	mov	sp, r7
 8004a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a18:	4770      	bx	lr

08004a1a <LL_RCC_SetUSBClockSource>:
 8004a1a:	b580      	push	{r7, lr}
 8004a1c:	b082      	sub	sp, #8
 8004a1e:	af00      	add	r7, sp, #0
 8004a20:	6078      	str	r0, [r7, #4]
 8004a22:	6878      	ldr	r0, [r7, #4]
 8004a24:	f7ff ffe3 	bl	80049ee <LL_RCC_SetCLK48ClockSource>
 8004a28:	bf00      	nop
 8004a2a:	3708      	adds	r7, #8
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bd80      	pop	{r7, pc}

08004a30 <LL_RCC_SetADCClockSource>:
 8004a30:	b480      	push	{r7}
 8004a32:	b083      	sub	sp, #12
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
 8004a38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a40:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004a44:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004a50:	bf00      	nop
 8004a52:	370c      	adds	r7, #12
 8004a54:	46bd      	mov	sp, r7
 8004a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5a:	4770      	bx	lr

08004a5c <LL_RCC_SetRTCClockSource>:
 8004a5c:	b480      	push	{r7}
 8004a5e:	b083      	sub	sp, #12
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
 8004a64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a6c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004a70:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	4313      	orrs	r3, r2
 8004a78:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004a7c:	bf00      	nop
 8004a7e:	370c      	adds	r7, #12
 8004a80:	46bd      	mov	sp, r7
 8004a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a86:	4770      	bx	lr

08004a88 <LL_RCC_GetRTCClockSource>:
 8004a88:	b480      	push	{r7}
 8004a8a:	af00      	add	r7, sp, #0
 8004a8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a94:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a98:	4618      	mov	r0, r3
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa0:	4770      	bx	lr

08004aa2 <LL_RCC_ForceBackupDomainReset>:
 8004aa2:	b480      	push	{r7}
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004aaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004aae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004ab2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ab6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004aba:	bf00      	nop
 8004abc:	46bd      	mov	sp, r7
 8004abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac2:	4770      	bx	lr

08004ac4 <LL_RCC_ReleaseBackupDomainReset>:
 8004ac4:	b480      	push	{r7}
 8004ac6:	af00      	add	r7, sp, #0
 8004ac8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004acc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ad0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004ad4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ad8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004adc:	bf00      	nop
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae4:	4770      	bx	lr

08004ae6 <LL_RCC_PLLSAI1_Enable>:
 8004ae6:	b480      	push	{r7}
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004af4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004af8:	6013      	str	r3, [r2, #0]
 8004afa:	bf00      	nop
 8004afc:	46bd      	mov	sp, r7
 8004afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b02:	4770      	bx	lr

08004b04 <LL_RCC_PLLSAI1_Disable>:
 8004b04:	b480      	push	{r7}
 8004b06:	af00      	add	r7, sp, #0
 8004b08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b12:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004b16:	6013      	str	r3, [r2, #0]
 8004b18:	bf00      	nop
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b20:	4770      	bx	lr

08004b22 <LL_RCC_PLLSAI1_IsReady>:
 8004b22:	b480      	push	{r7}
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b30:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004b34:	d101      	bne.n	8004b3a <LL_RCC_PLLSAI1_IsReady+0x18>
 8004b36:	2301      	movs	r3, #1
 8004b38:	e000      	b.n	8004b3c <LL_RCC_PLLSAI1_IsReady+0x1a>
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b44:	4770      	bx	lr

08004b46 <HAL_RCCEx_PeriphCLKConfig>:
 8004b46:	b580      	push	{r7, lr}
 8004b48:	b088      	sub	sp, #32
 8004b4a:	af00      	add	r7, sp, #0
 8004b4c:	6078      	str	r0, [r7, #4]
 8004b4e:	2300      	movs	r3, #0
 8004b50:	77fb      	strb	r3, [r7, #31]
 8004b52:	2300      	movs	r3, #0
 8004b54:	77bb      	strb	r3, [r7, #30]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d034      	beq.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0x86>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b66:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004b6a:	d021      	beq.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8004b6c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004b70:	d81b      	bhi.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004b72:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004b76:	d01d      	beq.n	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8004b78:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004b7c:	d815      	bhi.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d00b      	beq.n	8004b9a <HAL_RCCEx_PeriphCLKConfig+0x54>
 8004b82:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b86:	d110      	bne.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004b88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b8c:	68db      	ldr	r3, [r3, #12]
 8004b8e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b96:	60d3      	str	r3, [r2, #12]
 8004b98:	e00d      	b.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0x70>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	3304      	adds	r3, #4
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	f000 f947 	bl	8004e32 <RCCEx_PLLSAI1_ConfigNP>
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	77fb      	strb	r3, [r7, #31]
 8004ba8:	e005      	b.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0x70>
 8004baa:	2301      	movs	r3, #1
 8004bac:	77fb      	strb	r3, [r7, #31]
 8004bae:	e002      	b.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0x70>
 8004bb0:	bf00      	nop
 8004bb2:	e000      	b.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0x70>
 8004bb4:	bf00      	nop
 8004bb6:	7ffb      	ldrb	r3, [r7, #31]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d105      	bne.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x82>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	f7ff fee8 	bl	8004996 <LL_RCC_SetSAIClockSource>
 8004bc6:	e001      	b.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0x86>
 8004bc8:	7ffb      	ldrb	r3, [r7, #31]
 8004bca:	77bb      	strb	r3, [r7, #30]
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d046      	beq.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0x120>
 8004bd8:	f7ff ff56 	bl	8004a88 <LL_RCC_GetRTCClockSource>
 8004bdc:	61b8      	str	r0, [r7, #24]
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004be2:	69ba      	ldr	r2, [r7, #24]
 8004be4:	429a      	cmp	r2, r3
 8004be6:	d03c      	beq.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 8004be8:	f7fe fc68 	bl	80034bc <HAL_PWR_EnableBkUpAccess>
 8004bec:	69bb      	ldr	r3, [r7, #24]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d105      	bne.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0xb8>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	f7ff ff30 	bl	8004a5c <LL_RCC_SetRTCClockSource>
 8004bfc:	e02e      	b.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004bfe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c06:	617b      	str	r3, [r7, #20]
 8004c08:	f7ff ff4b 	bl	8004aa2 <LL_RCC_ForceBackupDomainReset>
 8004c0c:	f7ff ff5a 	bl	8004ac4 <LL_RCC_ReleaseBackupDomainReset>
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	617b      	str	r3, [r7, #20]
 8004c1e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c22:	697b      	ldr	r3, [r7, #20]
 8004c24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004c28:	f7ff fdf0 	bl	800480c <LL_RCC_LSE_IsEnabled>
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	2b01      	cmp	r3, #1
 8004c30:	d114      	bne.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004c32:	f7fd fb93 	bl	800235c <HAL_GetTick>
 8004c36:	6138      	str	r0, [r7, #16]
 8004c38:	e00b      	b.n	8004c52 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004c3a:	f7fd fb8f 	bl	800235c <HAL_GetTick>
 8004c3e:	4602      	mov	r2, r0
 8004c40:	693b      	ldr	r3, [r7, #16]
 8004c42:	1ad3      	subs	r3, r2, r3
 8004c44:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d902      	bls.n	8004c52 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004c4c:	2303      	movs	r3, #3
 8004c4e:	77fb      	strb	r3, [r7, #31]
 8004c50:	e004      	b.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004c52:	f7ff fded 	bl	8004830 <LL_RCC_LSE_IsReady>
 8004c56:	4603      	mov	r3, r0
 8004c58:	2b01      	cmp	r3, #1
 8004c5a:	d1ee      	bne.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004c5c:	7ffb      	ldrb	r3, [r7, #31]
 8004c5e:	77bb      	strb	r3, [r7, #30]
 8004c60:	e001      	b.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0x120>
 8004c62:	7ffb      	ldrb	r3, [r7, #31]
 8004c64:	77bb      	strb	r3, [r7, #30]
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f003 0301 	and.w	r3, r3, #1
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d004      	beq.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	699b      	ldr	r3, [r3, #24]
 8004c76:	4618      	mov	r0, r3
 8004c78:	f7ff fe2a 	bl	80048d0 <LL_RCC_SetUSARTClockSource>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f003 0302 	and.w	r3, r3, #2
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d004      	beq.n	8004c92 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	69db      	ldr	r3, [r3, #28]
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	f7ff fe35 	bl	80048fc <LL_RCC_SetLPUARTClockSource>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f003 0310 	and.w	r3, r3, #16
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d004      	beq.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x162>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	f7ff fe5d 	bl	8004962 <LL_RCC_SetLPTIMClockSource>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f003 0320 	and.w	r3, r3, #32
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d004      	beq.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0x178>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cb8:	4618      	mov	r0, r3
 8004cba:	f7ff fe52 	bl	8004962 <LL_RCC_SetLPTIMClockSource>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f003 0304 	and.w	r3, r3, #4
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d004      	beq.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x18e>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6a1b      	ldr	r3, [r3, #32]
 8004cce:	4618      	mov	r0, r3
 8004cd0:	f7ff fe2a 	bl	8004928 <LL_RCC_SetI2CClockSource>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f003 0308 	and.w	r3, r3, #8
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d004      	beq.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	f7ff fe1f 	bl	8004928 <LL_RCC_SetI2CClockSource>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d022      	beq.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	f7ff fe8d 	bl	8004a1a <LL_RCC_SetUSBClockSource>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d04:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004d08:	d107      	bne.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8004d0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d0e:	68db      	ldr	r3, [r3, #12]
 8004d10:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004d14:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d18:	60d3      	str	r3, [r2, #12]
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d1e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004d22:	d10b      	bne.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	3304      	adds	r3, #4
 8004d28:	4618      	mov	r0, r3
 8004d2a:	f000 f8dd 	bl	8004ee8 <RCCEx_PLLSAI1_ConfigNQ>
 8004d2e:	4603      	mov	r3, r0
 8004d30:	77fb      	strb	r3, [r7, #31]
 8004d32:	7ffb      	ldrb	r3, [r7, #31]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d001      	beq.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8004d38:	7ffb      	ldrb	r3, [r7, #31]
 8004d3a:	77bb      	strb	r3, [r7, #30]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d02b      	beq.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d50:	d008      	beq.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d56:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004d5a:	d003      	beq.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d105      	bne.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d68:	4618      	mov	r0, r3
 8004d6a:	f7ff fe2a 	bl	80049c2 <LL_RCC_SetRNGClockSource>
 8004d6e:	e00a      	b.n	8004d86 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d78:	60fb      	str	r3, [r7, #12]
 8004d7a:	2000      	movs	r0, #0
 8004d7c:	f7ff fe21 	bl	80049c2 <LL_RCC_SetRNGClockSource>
 8004d80:	68f8      	ldr	r0, [r7, #12]
 8004d82:	f7ff fe34 	bl	80049ee <LL_RCC_SetCLK48ClockSource>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d8a:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8004d8e:	d107      	bne.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8004d90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d94:	68db      	ldr	r3, [r3, #12]
 8004d96:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004d9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d9e:	60d3      	str	r3, [r2, #12]
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d022      	beq.n	8004df2 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004db0:	4618      	mov	r0, r3
 8004db2:	f7ff fe3d 	bl	8004a30 <LL_RCC_SetADCClockSource>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004dbe:	d107      	bne.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x28a>
 8004dc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004dc4:	68db      	ldr	r3, [r3, #12]
 8004dc6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004dca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004dce:	60d3      	str	r3, [r2, #12]
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dd4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004dd8:	d10b      	bne.n	8004df2 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	3304      	adds	r3, #4
 8004dde:	4618      	mov	r0, r3
 8004de0:	f000 f8dd 	bl	8004f9e <RCCEx_PLLSAI1_ConfigNR>
 8004de4:	4603      	mov	r3, r0
 8004de6:	77fb      	strb	r3, [r7, #31]
 8004de8:	7ffb      	ldrb	r3, [r7, #31]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d001      	beq.n	8004df2 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8004dee:	7ffb      	ldrb	r3, [r7, #31]
 8004df0:	77bb      	strb	r3, [r7, #30]
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d004      	beq.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e02:	4618      	mov	r0, r3
 8004e04:	f7ff fd26 	bl	8004854 <LL_RCC_SetRFWKPClockSource>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d009      	beq.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e18:	4618      	mov	r0, r3
 8004e1a:	f7ff fd45 	bl	80048a8 <LL_RCC_SetSMPSPrescaler>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e22:	4618      	mov	r0, r3
 8004e24:	f7ff fd2c 	bl	8004880 <LL_RCC_SetSMPSClockSource>
 8004e28:	7fbb      	ldrb	r3, [r7, #30]
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	3720      	adds	r7, #32
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bd80      	pop	{r7, pc}

08004e32 <RCCEx_PLLSAI1_ConfigNP>:
 8004e32:	b580      	push	{r7, lr}
 8004e34:	b084      	sub	sp, #16
 8004e36:	af00      	add	r7, sp, #0
 8004e38:	6078      	str	r0, [r7, #4]
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	73fb      	strb	r3, [r7, #15]
 8004e3e:	f7ff fe61 	bl	8004b04 <LL_RCC_PLLSAI1_Disable>
 8004e42:	f7fd fa8b 	bl	800235c <HAL_GetTick>
 8004e46:	60b8      	str	r0, [r7, #8]
 8004e48:	e009      	b.n	8004e5e <RCCEx_PLLSAI1_ConfigNP+0x2c>
 8004e4a:	f7fd fa87 	bl	800235c <HAL_GetTick>
 8004e4e:	4602      	mov	r2, r0
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	1ad3      	subs	r3, r2, r3
 8004e54:	2b02      	cmp	r3, #2
 8004e56:	d902      	bls.n	8004e5e <RCCEx_PLLSAI1_ConfigNP+0x2c>
 8004e58:	2303      	movs	r3, #3
 8004e5a:	73fb      	strb	r3, [r7, #15]
 8004e5c:	e004      	b.n	8004e68 <RCCEx_PLLSAI1_ConfigNP+0x36>
 8004e5e:	f7ff fe60 	bl	8004b22 <LL_RCC_PLLSAI1_IsReady>
 8004e62:	4603      	mov	r3, r0
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d1f0      	bne.n	8004e4a <RCCEx_PLLSAI1_ConfigNP+0x18>
 8004e68:	7bfb      	ldrb	r3, [r7, #15]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d137      	bne.n	8004ede <RCCEx_PLLSAI1_ConfigNP+0xac>
 8004e6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e72:	691b      	ldr	r3, [r3, #16]
 8004e74:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	021b      	lsls	r3, r3, #8
 8004e7e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004e82:	4313      	orrs	r3, r2
 8004e84:	610b      	str	r3, [r1, #16]
 8004e86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e8a:	691b      	ldr	r3, [r3, #16]
 8004e8c:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	610b      	str	r3, [r1, #16]
 8004e9c:	f7ff fe23 	bl	8004ae6 <LL_RCC_PLLSAI1_Enable>
 8004ea0:	f7fd fa5c 	bl	800235c <HAL_GetTick>
 8004ea4:	60b8      	str	r0, [r7, #8]
 8004ea6:	e009      	b.n	8004ebc <RCCEx_PLLSAI1_ConfigNP+0x8a>
 8004ea8:	f7fd fa58 	bl	800235c <HAL_GetTick>
 8004eac:	4602      	mov	r2, r0
 8004eae:	68bb      	ldr	r3, [r7, #8]
 8004eb0:	1ad3      	subs	r3, r2, r3
 8004eb2:	2b02      	cmp	r3, #2
 8004eb4:	d902      	bls.n	8004ebc <RCCEx_PLLSAI1_ConfigNP+0x8a>
 8004eb6:	2303      	movs	r3, #3
 8004eb8:	73fb      	strb	r3, [r7, #15]
 8004eba:	e004      	b.n	8004ec6 <RCCEx_PLLSAI1_ConfigNP+0x94>
 8004ebc:	f7ff fe31 	bl	8004b22 <LL_RCC_PLLSAI1_IsReady>
 8004ec0:	4603      	mov	r3, r0
 8004ec2:	2b01      	cmp	r3, #1
 8004ec4:	d1f0      	bne.n	8004ea8 <RCCEx_PLLSAI1_ConfigNP+0x76>
 8004ec6:	7bfb      	ldrb	r3, [r7, #15]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d108      	bne.n	8004ede <RCCEx_PLLSAI1_ConfigNP+0xac>
 8004ecc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ed0:	691a      	ldr	r2, [r3, #16]
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	691b      	ldr	r3, [r3, #16]
 8004ed6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004eda:	4313      	orrs	r3, r2
 8004edc:	610b      	str	r3, [r1, #16]
 8004ede:	7bfb      	ldrb	r3, [r7, #15]
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	3710      	adds	r7, #16
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bd80      	pop	{r7, pc}

08004ee8 <RCCEx_PLLSAI1_ConfigNQ>:
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b084      	sub	sp, #16
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	73fb      	strb	r3, [r7, #15]
 8004ef4:	f7ff fe06 	bl	8004b04 <LL_RCC_PLLSAI1_Disable>
 8004ef8:	f7fd fa30 	bl	800235c <HAL_GetTick>
 8004efc:	60b8      	str	r0, [r7, #8]
 8004efe:	e009      	b.n	8004f14 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
 8004f00:	f7fd fa2c 	bl	800235c <HAL_GetTick>
 8004f04:	4602      	mov	r2, r0
 8004f06:	68bb      	ldr	r3, [r7, #8]
 8004f08:	1ad3      	subs	r3, r2, r3
 8004f0a:	2b02      	cmp	r3, #2
 8004f0c:	d902      	bls.n	8004f14 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
 8004f0e:	2303      	movs	r3, #3
 8004f10:	73fb      	strb	r3, [r7, #15]
 8004f12:	e004      	b.n	8004f1e <RCCEx_PLLSAI1_ConfigNQ+0x36>
 8004f14:	f7ff fe05 	bl	8004b22 <LL_RCC_PLLSAI1_IsReady>
 8004f18:	4603      	mov	r3, r0
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d1f0      	bne.n	8004f00 <RCCEx_PLLSAI1_ConfigNQ+0x18>
 8004f1e:	7bfb      	ldrb	r3, [r7, #15]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d137      	bne.n	8004f94 <RCCEx_PLLSAI1_ConfigNQ+0xac>
 8004f24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f28:	691b      	ldr	r3, [r3, #16]
 8004f2a:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	021b      	lsls	r3, r3, #8
 8004f34:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	610b      	str	r3, [r1, #16]
 8004f3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f40:	691b      	ldr	r3, [r3, #16]
 8004f42:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	689b      	ldr	r3, [r3, #8]
 8004f4a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	610b      	str	r3, [r1, #16]
 8004f52:	f7ff fdc8 	bl	8004ae6 <LL_RCC_PLLSAI1_Enable>
 8004f56:	f7fd fa01 	bl	800235c <HAL_GetTick>
 8004f5a:	60b8      	str	r0, [r7, #8]
 8004f5c:	e009      	b.n	8004f72 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
 8004f5e:	f7fd f9fd 	bl	800235c <HAL_GetTick>
 8004f62:	4602      	mov	r2, r0
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	1ad3      	subs	r3, r2, r3
 8004f68:	2b02      	cmp	r3, #2
 8004f6a:	d902      	bls.n	8004f72 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
 8004f6c:	2303      	movs	r3, #3
 8004f6e:	73fb      	strb	r3, [r7, #15]
 8004f70:	e004      	b.n	8004f7c <RCCEx_PLLSAI1_ConfigNQ+0x94>
 8004f72:	f7ff fdd6 	bl	8004b22 <LL_RCC_PLLSAI1_IsReady>
 8004f76:	4603      	mov	r3, r0
 8004f78:	2b01      	cmp	r3, #1
 8004f7a:	d1f0      	bne.n	8004f5e <RCCEx_PLLSAI1_ConfigNQ+0x76>
 8004f7c:	7bfb      	ldrb	r3, [r7, #15]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d108      	bne.n	8004f94 <RCCEx_PLLSAI1_ConfigNQ+0xac>
 8004f82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f86:	691a      	ldr	r2, [r3, #16]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	691b      	ldr	r3, [r3, #16]
 8004f8c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004f90:	4313      	orrs	r3, r2
 8004f92:	610b      	str	r3, [r1, #16]
 8004f94:	7bfb      	ldrb	r3, [r7, #15]
 8004f96:	4618      	mov	r0, r3
 8004f98:	3710      	adds	r7, #16
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bd80      	pop	{r7, pc}

08004f9e <RCCEx_PLLSAI1_ConfigNR>:
 8004f9e:	b580      	push	{r7, lr}
 8004fa0:	b084      	sub	sp, #16
 8004fa2:	af00      	add	r7, sp, #0
 8004fa4:	6078      	str	r0, [r7, #4]
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	73fb      	strb	r3, [r7, #15]
 8004faa:	f7ff fdab 	bl	8004b04 <LL_RCC_PLLSAI1_Disable>
 8004fae:	f7fd f9d5 	bl	800235c <HAL_GetTick>
 8004fb2:	60b8      	str	r0, [r7, #8]
 8004fb4:	e009      	b.n	8004fca <RCCEx_PLLSAI1_ConfigNR+0x2c>
 8004fb6:	f7fd f9d1 	bl	800235c <HAL_GetTick>
 8004fba:	4602      	mov	r2, r0
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	1ad3      	subs	r3, r2, r3
 8004fc0:	2b02      	cmp	r3, #2
 8004fc2:	d902      	bls.n	8004fca <RCCEx_PLLSAI1_ConfigNR+0x2c>
 8004fc4:	2303      	movs	r3, #3
 8004fc6:	73fb      	strb	r3, [r7, #15]
 8004fc8:	e004      	b.n	8004fd4 <RCCEx_PLLSAI1_ConfigNR+0x36>
 8004fca:	f7ff fdaa 	bl	8004b22 <LL_RCC_PLLSAI1_IsReady>
 8004fce:	4603      	mov	r3, r0
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d1f0      	bne.n	8004fb6 <RCCEx_PLLSAI1_ConfigNR+0x18>
 8004fd4:	7bfb      	ldrb	r3, [r7, #15]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d137      	bne.n	800504a <RCCEx_PLLSAI1_ConfigNR+0xac>
 8004fda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fde:	691b      	ldr	r3, [r3, #16]
 8004fe0:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	021b      	lsls	r3, r3, #8
 8004fea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	610b      	str	r3, [r1, #16]
 8004ff2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ff6:	691b      	ldr	r3, [r3, #16]
 8004ff8:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	68db      	ldr	r3, [r3, #12]
 8005000:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005004:	4313      	orrs	r3, r2
 8005006:	610b      	str	r3, [r1, #16]
 8005008:	f7ff fd6d 	bl	8004ae6 <LL_RCC_PLLSAI1_Enable>
 800500c:	f7fd f9a6 	bl	800235c <HAL_GetTick>
 8005010:	60b8      	str	r0, [r7, #8]
 8005012:	e009      	b.n	8005028 <RCCEx_PLLSAI1_ConfigNR+0x8a>
 8005014:	f7fd f9a2 	bl	800235c <HAL_GetTick>
 8005018:	4602      	mov	r2, r0
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	1ad3      	subs	r3, r2, r3
 800501e:	2b02      	cmp	r3, #2
 8005020:	d902      	bls.n	8005028 <RCCEx_PLLSAI1_ConfigNR+0x8a>
 8005022:	2303      	movs	r3, #3
 8005024:	73fb      	strb	r3, [r7, #15]
 8005026:	e004      	b.n	8005032 <RCCEx_PLLSAI1_ConfigNR+0x94>
 8005028:	f7ff fd7b 	bl	8004b22 <LL_RCC_PLLSAI1_IsReady>
 800502c:	4603      	mov	r3, r0
 800502e:	2b01      	cmp	r3, #1
 8005030:	d1f0      	bne.n	8005014 <RCCEx_PLLSAI1_ConfigNR+0x76>
 8005032:	7bfb      	ldrb	r3, [r7, #15]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d108      	bne.n	800504a <RCCEx_PLLSAI1_ConfigNR+0xac>
 8005038:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800503c:	691a      	ldr	r2, [r3, #16]
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	691b      	ldr	r3, [r3, #16]
 8005042:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005046:	4313      	orrs	r3, r2
 8005048:	610b      	str	r3, [r1, #16]
 800504a:	7bfb      	ldrb	r3, [r7, #15]
 800504c:	4618      	mov	r0, r3
 800504e:	3710      	adds	r7, #16
 8005050:	46bd      	mov	sp, r7
 8005052:	bd80      	pop	{r7, pc}

08005054 <HAL_RTC_Init>:
 8005054:	b580      	push	{r7, lr}
 8005056:	b084      	sub	sp, #16
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d101      	bne.n	8005066 <HAL_RTC_Init+0x12>
 8005062:	2301      	movs	r3, #1
 8005064:	e09f      	b.n	80051a6 <HAL_RTC_Init+0x152>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800506c:	b2db      	uxtb	r3, r3
 800506e:	2b00      	cmp	r3, #0
 8005070:	d106      	bne.n	8005080 <HAL_RTC_Init+0x2c>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2200      	movs	r2, #0
 8005076:	f883 2020 	strb.w	r2, [r3, #32]
 800507a:	6878      	ldr	r0, [r7, #4]
 800507c:	f7fc ff0a 	bl	8001e94 <HAL_RTC_MspInit>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2202      	movs	r2, #2
 8005084:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8005088:	4b49      	ldr	r3, [pc, #292]	; (80051b0 <HAL_RTC_Init+0x15c>)
 800508a:	68db      	ldr	r3, [r3, #12]
 800508c:	f003 0310 	and.w	r3, r3, #16
 8005090:	2b10      	cmp	r3, #16
 8005092:	d07e      	beq.n	8005192 <HAL_RTC_Init+0x13e>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	22ca      	movs	r2, #202	; 0xca
 800509a:	625a      	str	r2, [r3, #36]	; 0x24
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	2253      	movs	r2, #83	; 0x53
 80050a2:	625a      	str	r2, [r3, #36]	; 0x24
 80050a4:	6878      	ldr	r0, [r7, #4]
 80050a6:	f000 f8ab 	bl	8005200 <RTC_EnterInitMode>
 80050aa:	4603      	mov	r3, r0
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d00a      	beq.n	80050c6 <HAL_RTC_Init+0x72>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	22ff      	movs	r2, #255	; 0xff
 80050b6:	625a      	str	r2, [r3, #36]	; 0x24
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2204      	movs	r2, #4
 80050bc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 80050c0:	2301      	movs	r3, #1
 80050c2:	73fb      	strb	r3, [r7, #15]
 80050c4:	e067      	b.n	8005196 <HAL_RTC_Init+0x142>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	689b      	ldr	r3, [r3, #8]
 80050cc:	687a      	ldr	r2, [r7, #4]
 80050ce:	6812      	ldr	r2, [r2, #0]
 80050d0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80050d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050d8:	6093      	str	r3, [r2, #8]
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	6899      	ldr	r1, [r3, #8]
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	685a      	ldr	r2, [r3, #4]
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	691b      	ldr	r3, [r3, #16]
 80050e8:	431a      	orrs	r2, r3
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	699b      	ldr	r3, [r3, #24]
 80050ee:	431a      	orrs	r2, r3
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	430a      	orrs	r2, r1
 80050f6:	609a      	str	r2, [r3, #8]
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	687a      	ldr	r2, [r7, #4]
 80050fe:	68d2      	ldr	r2, [r2, #12]
 8005100:	611a      	str	r2, [r3, #16]
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	6919      	ldr	r1, [r3, #16]
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	689b      	ldr	r3, [r3, #8]
 800510c:	041a      	lsls	r2, r3, #16
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	430a      	orrs	r2, r1
 8005114:	611a      	str	r2, [r3, #16]
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	68da      	ldr	r2, [r3, #12]
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005124:	60da      	str	r2, [r3, #12]
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f022 0203 	bic.w	r2, r2, #3
 8005134:	64da      	str	r2, [r3, #76]	; 0x4c
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	69da      	ldr	r2, [r3, #28]
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	695b      	ldr	r3, [r3, #20]
 8005144:	431a      	orrs	r2, r3
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	430a      	orrs	r2, r1
 800514c:	64da      	str	r2, [r3, #76]	; 0x4c
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	689b      	ldr	r3, [r3, #8]
 8005154:	f003 0320 	and.w	r3, r3, #32
 8005158:	2b00      	cmp	r3, #0
 800515a:	d113      	bne.n	8005184 <HAL_RTC_Init+0x130>
 800515c:	6878      	ldr	r0, [r7, #4]
 800515e:	f000 f829 	bl	80051b4 <HAL_RTC_WaitForSynchro>
 8005162:	4603      	mov	r3, r0
 8005164:	2b00      	cmp	r3, #0
 8005166:	d00d      	beq.n	8005184 <HAL_RTC_Init+0x130>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	22ff      	movs	r2, #255	; 0xff
 800516e:	625a      	str	r2, [r3, #36]	; 0x24
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2204      	movs	r2, #4
 8005174:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2200      	movs	r2, #0
 800517c:	f883 2020 	strb.w	r2, [r3, #32]
 8005180:	2301      	movs	r3, #1
 8005182:	e010      	b.n	80051a6 <HAL_RTC_Init+0x152>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	22ff      	movs	r2, #255	; 0xff
 800518a:	625a      	str	r2, [r3, #36]	; 0x24
 800518c:	2300      	movs	r3, #0
 800518e:	73fb      	strb	r3, [r7, #15]
 8005190:	e001      	b.n	8005196 <HAL_RTC_Init+0x142>
 8005192:	2300      	movs	r3, #0
 8005194:	73fb      	strb	r3, [r7, #15]
 8005196:	7bfb      	ldrb	r3, [r7, #15]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d103      	bne.n	80051a4 <HAL_RTC_Init+0x150>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2201      	movs	r2, #1
 80051a0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 80051a4:	7bfb      	ldrb	r3, [r7, #15]
 80051a6:	4618      	mov	r0, r3
 80051a8:	3710      	adds	r7, #16
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bd80      	pop	{r7, pc}
 80051ae:	bf00      	nop
 80051b0:	40002800 	.word	0x40002800

080051b4 <HAL_RTC_WaitForSynchro>:
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b084      	sub	sp, #16
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	68da      	ldr	r2, [r3, #12]
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80051ca:	60da      	str	r2, [r3, #12]
 80051cc:	f7fd f8c6 	bl	800235c <HAL_GetTick>
 80051d0:	60f8      	str	r0, [r7, #12]
 80051d2:	e009      	b.n	80051e8 <HAL_RTC_WaitForSynchro+0x34>
 80051d4:	f7fd f8c2 	bl	800235c <HAL_GetTick>
 80051d8:	4602      	mov	r2, r0
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	1ad3      	subs	r3, r2, r3
 80051de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80051e2:	d901      	bls.n	80051e8 <HAL_RTC_WaitForSynchro+0x34>
 80051e4:	2303      	movs	r3, #3
 80051e6:	e007      	b.n	80051f8 <HAL_RTC_WaitForSynchro+0x44>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	68db      	ldr	r3, [r3, #12]
 80051ee:	f003 0320 	and.w	r3, r3, #32
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d0ee      	beq.n	80051d4 <HAL_RTC_WaitForSynchro+0x20>
 80051f6:	2300      	movs	r3, #0
 80051f8:	4618      	mov	r0, r3
 80051fa:	3710      	adds	r7, #16
 80051fc:	46bd      	mov	sp, r7
 80051fe:	bd80      	pop	{r7, pc}

08005200 <RTC_EnterInitMode>:
 8005200:	b580      	push	{r7, lr}
 8005202:	b084      	sub	sp, #16
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	68db      	ldr	r3, [r3, #12]
 800520e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005212:	2b00      	cmp	r3, #0
 8005214:	d119      	bne.n	800524a <RTC_EnterInitMode+0x4a>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800521e:	60da      	str	r2, [r3, #12]
 8005220:	f7fd f89c 	bl	800235c <HAL_GetTick>
 8005224:	60f8      	str	r0, [r7, #12]
 8005226:	e009      	b.n	800523c <RTC_EnterInitMode+0x3c>
 8005228:	f7fd f898 	bl	800235c <HAL_GetTick>
 800522c:	4602      	mov	r2, r0
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	1ad3      	subs	r3, r2, r3
 8005232:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005236:	d901      	bls.n	800523c <RTC_EnterInitMode+0x3c>
 8005238:	2303      	movs	r3, #3
 800523a:	e007      	b.n	800524c <RTC_EnterInitMode+0x4c>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	68db      	ldr	r3, [r3, #12]
 8005242:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005246:	2b00      	cmp	r3, #0
 8005248:	d0ee      	beq.n	8005228 <RTC_EnterInitMode+0x28>
 800524a:	2300      	movs	r3, #0
 800524c:	4618      	mov	r0, r3
 800524e:	3710      	adds	r7, #16
 8005250:	46bd      	mov	sp, r7
 8005252:	bd80      	pop	{r7, pc}

08005254 <HAL_RTCEx_SetWakeUpTimer_IT>:
 8005254:	b580      	push	{r7, lr}
 8005256:	b086      	sub	sp, #24
 8005258:	af00      	add	r7, sp, #0
 800525a:	60f8      	str	r0, [r7, #12]
 800525c:	60b9      	str	r1, [r7, #8]
 800525e:	607a      	str	r2, [r7, #4]
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005266:	2b01      	cmp	r3, #1
 8005268:	d101      	bne.n	800526e <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 800526a:	2302      	movs	r3, #2
 800526c:	e0a8      	b.n	80053c0 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	2201      	movs	r2, #1
 8005272:	f883 2020 	strb.w	r2, [r3, #32]
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	2202      	movs	r2, #2
 800527a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	22ca      	movs	r2, #202	; 0xca
 8005284:	625a      	str	r2, [r3, #36]	; 0x24
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	2253      	movs	r2, #83	; 0x53
 800528c:	625a      	str	r2, [r3, #36]	; 0x24
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	689b      	ldr	r3, [r3, #8]
 8005294:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005298:	2b00      	cmp	r3, #0
 800529a:	d020      	beq.n	80052de <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
 800529c:	f7fd f85e 	bl	800235c <HAL_GetTick>
 80052a0:	6178      	str	r0, [r7, #20]
 80052a2:	e015      	b.n	80052d0 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
 80052a4:	f7fd f85a 	bl	800235c <HAL_GetTick>
 80052a8:	4602      	mov	r2, r0
 80052aa:	697b      	ldr	r3, [r7, #20]
 80052ac:	1ad3      	subs	r3, r2, r3
 80052ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80052b2:	d90d      	bls.n	80052d0 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	22ff      	movs	r2, #255	; 0xff
 80052ba:	625a      	str	r2, [r3, #36]	; 0x24
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	2203      	movs	r2, #3
 80052c0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	2200      	movs	r2, #0
 80052c8:	f883 2020 	strb.w	r2, [r3, #32]
 80052cc:	2303      	movs	r3, #3
 80052ce:	e077      	b.n	80053c0 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	68db      	ldr	r3, [r3, #12]
 80052d6:	f003 0304 	and.w	r3, r3, #4
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d1e2      	bne.n	80052a4 <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	689a      	ldr	r2, [r3, #8]
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052ec:	609a      	str	r2, [r3, #8]
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	68db      	ldr	r3, [r3, #12]
 80052f4:	b2da      	uxtb	r2, r3
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80052fe:	60da      	str	r2, [r3, #12]
 8005300:	f7fd f82c 	bl	800235c <HAL_GetTick>
 8005304:	6178      	str	r0, [r7, #20]
 8005306:	e015      	b.n	8005334 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
 8005308:	f7fd f828 	bl	800235c <HAL_GetTick>
 800530c:	4602      	mov	r2, r0
 800530e:	697b      	ldr	r3, [r7, #20]
 8005310:	1ad3      	subs	r3, r2, r3
 8005312:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005316:	d90d      	bls.n	8005334 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	22ff      	movs	r2, #255	; 0xff
 800531e:	625a      	str	r2, [r3, #36]	; 0x24
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	2203      	movs	r2, #3
 8005324:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	2200      	movs	r2, #0
 800532c:	f883 2020 	strb.w	r2, [r3, #32]
 8005330:	2303      	movs	r3, #3
 8005332:	e045      	b.n	80053c0 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	68db      	ldr	r3, [r3, #12]
 800533a:	f003 0304 	and.w	r3, r3, #4
 800533e:	2b00      	cmp	r3, #0
 8005340:	d0e2      	beq.n	8005308 <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	68ba      	ldr	r2, [r7, #8]
 8005348:	615a      	str	r2, [r3, #20]
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	689a      	ldr	r2, [r3, #8]
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f022 0207 	bic.w	r2, r2, #7
 8005358:	609a      	str	r2, [r3, #8]
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	6899      	ldr	r1, [r3, #8]
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	687a      	ldr	r2, [r7, #4]
 8005366:	430a      	orrs	r2, r1
 8005368:	609a      	str	r2, [r3, #8]
 800536a:	4b17      	ldr	r3, [pc, #92]	; (80053c8 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800536c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005370:	4a15      	ldr	r2, [pc, #84]	; (80053c8 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8005372:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005376:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800537a:	4b13      	ldr	r3, [pc, #76]	; (80053c8 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4a12      	ldr	r2, [pc, #72]	; (80053c8 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8005380:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005384:	6013      	str	r3, [r2, #0]
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	689a      	ldr	r2, [r3, #8]
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005394:	609a      	str	r2, [r3, #8]
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	689a      	ldr	r2, [r3, #8]
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80053a4:	609a      	str	r2, [r3, #8]
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	22ff      	movs	r2, #255	; 0xff
 80053ac:	625a      	str	r2, [r3, #36]	; 0x24
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	2201      	movs	r2, #1
 80053b2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	2200      	movs	r2, #0
 80053ba:	f883 2020 	strb.w	r2, [r3, #32]
 80053be:	2300      	movs	r3, #0
 80053c0:	4618      	mov	r0, r3
 80053c2:	3718      	adds	r7, #24
 80053c4:	46bd      	mov	sp, r7
 80053c6:	bd80      	pop	{r7, pc}
 80053c8:	58000800 	.word	0x58000800

080053cc <LL_RCC_GetUSARTClockSource>:
 80053cc:	b480      	push	{r7}
 80053ce:	b083      	sub	sp, #12
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
 80053d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053d8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	4013      	ands	r3, r2
 80053e0:	4618      	mov	r0, r3
 80053e2:	370c      	adds	r7, #12
 80053e4:	46bd      	mov	sp, r7
 80053e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ea:	4770      	bx	lr

080053ec <LL_RCC_GetLPUARTClockSource>:
 80053ec:	b480      	push	{r7}
 80053ee:	b083      	sub	sp, #12
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
 80053f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053f8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	4013      	ands	r3, r2
 8005400:	4618      	mov	r0, r3
 8005402:	370c      	adds	r7, #12
 8005404:	46bd      	mov	sp, r7
 8005406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540a:	4770      	bx	lr

0800540c <HAL_UART_Init>:
 800540c:	b580      	push	{r7, lr}
 800540e:	b082      	sub	sp, #8
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d101      	bne.n	800541e <HAL_UART_Init+0x12>
 800541a:	2301      	movs	r3, #1
 800541c:	e042      	b.n	80054a4 <HAL_UART_Init+0x98>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005424:	2b00      	cmp	r3, #0
 8005426:	d106      	bne.n	8005436 <HAL_UART_Init+0x2a>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2200      	movs	r2, #0
 800542c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 8005430:	6878      	ldr	r0, [r7, #4]
 8005432:	f7fc fd63 	bl	8001efc <HAL_UART_MspInit>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2224      	movs	r2, #36	; 0x24
 800543a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	681a      	ldr	r2, [r3, #0]
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f022 0201 	bic.w	r2, r2, #1
 800544c:	601a      	str	r2, [r3, #0]
 800544e:	6878      	ldr	r0, [r7, #4]
 8005450:	f000 f8ba 	bl	80055c8 <UART_SetConfig>
 8005454:	4603      	mov	r3, r0
 8005456:	2b01      	cmp	r3, #1
 8005458:	d101      	bne.n	800545e <HAL_UART_Init+0x52>
 800545a:	2301      	movs	r3, #1
 800545c:	e022      	b.n	80054a4 <HAL_UART_Init+0x98>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005462:	2b00      	cmp	r3, #0
 8005464:	d002      	beq.n	800546c <HAL_UART_Init+0x60>
 8005466:	6878      	ldr	r0, [r7, #4]
 8005468:	f000 fad6 	bl	8005a18 <UART_AdvFeatureConfig>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	685a      	ldr	r2, [r3, #4]
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800547a:	605a      	str	r2, [r3, #4]
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	689a      	ldr	r2, [r3, #8]
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800548a:	609a      	str	r2, [r3, #8]
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	681a      	ldr	r2, [r3, #0]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f042 0201 	orr.w	r2, r2, #1
 800549a:	601a      	str	r2, [r3, #0]
 800549c:	6878      	ldr	r0, [r7, #4]
 800549e:	f000 fb5d 	bl	8005b5c <UART_CheckIdleState>
 80054a2:	4603      	mov	r3, r0
 80054a4:	4618      	mov	r0, r3
 80054a6:	3708      	adds	r7, #8
 80054a8:	46bd      	mov	sp, r7
 80054aa:	bd80      	pop	{r7, pc}

080054ac <HAL_UART_Transmit>:
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b08a      	sub	sp, #40	; 0x28
 80054b0:	af02      	add	r7, sp, #8
 80054b2:	60f8      	str	r0, [r7, #12]
 80054b4:	60b9      	str	r1, [r7, #8]
 80054b6:	603b      	str	r3, [r7, #0]
 80054b8:	4613      	mov	r3, r2
 80054ba:	80fb      	strh	r3, [r7, #6]
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054c2:	2b20      	cmp	r3, #32
 80054c4:	d17b      	bne.n	80055be <HAL_UART_Transmit+0x112>
 80054c6:	68bb      	ldr	r3, [r7, #8]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d002      	beq.n	80054d2 <HAL_UART_Transmit+0x26>
 80054cc:	88fb      	ldrh	r3, [r7, #6]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d101      	bne.n	80054d6 <HAL_UART_Transmit+0x2a>
 80054d2:	2301      	movs	r3, #1
 80054d4:	e074      	b.n	80055c0 <HAL_UART_Transmit+0x114>
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	2200      	movs	r2, #0
 80054da:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	2221      	movs	r2, #33	; 0x21
 80054e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 80054e6:	f7fc ff39 	bl	800235c <HAL_GetTick>
 80054ea:	6178      	str	r0, [r7, #20]
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	88fa      	ldrh	r2, [r7, #6]
 80054f0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	88fa      	ldrh	r2, [r7, #6]
 80054f8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	689b      	ldr	r3, [r3, #8]
 8005500:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005504:	d108      	bne.n	8005518 <HAL_UART_Transmit+0x6c>
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	691b      	ldr	r3, [r3, #16]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d104      	bne.n	8005518 <HAL_UART_Transmit+0x6c>
 800550e:	2300      	movs	r3, #0
 8005510:	61fb      	str	r3, [r7, #28]
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	61bb      	str	r3, [r7, #24]
 8005516:	e003      	b.n	8005520 <HAL_UART_Transmit+0x74>
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	61fb      	str	r3, [r7, #28]
 800551c:	2300      	movs	r3, #0
 800551e:	61bb      	str	r3, [r7, #24]
 8005520:	e030      	b.n	8005584 <HAL_UART_Transmit+0xd8>
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	9300      	str	r3, [sp, #0]
 8005526:	697b      	ldr	r3, [r7, #20]
 8005528:	2200      	movs	r2, #0
 800552a:	2180      	movs	r1, #128	; 0x80
 800552c:	68f8      	ldr	r0, [r7, #12]
 800552e:	f000 fbbf 	bl	8005cb0 <UART_WaitOnFlagUntilTimeout>
 8005532:	4603      	mov	r3, r0
 8005534:	2b00      	cmp	r3, #0
 8005536:	d005      	beq.n	8005544 <HAL_UART_Transmit+0x98>
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	2220      	movs	r2, #32
 800553c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8005540:	2303      	movs	r3, #3
 8005542:	e03d      	b.n	80055c0 <HAL_UART_Transmit+0x114>
 8005544:	69fb      	ldr	r3, [r7, #28]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d10b      	bne.n	8005562 <HAL_UART_Transmit+0xb6>
 800554a:	69bb      	ldr	r3, [r7, #24]
 800554c:	881b      	ldrh	r3, [r3, #0]
 800554e:	461a      	mov	r2, r3
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005558:	629a      	str	r2, [r3, #40]	; 0x28
 800555a:	69bb      	ldr	r3, [r7, #24]
 800555c:	3302      	adds	r3, #2
 800555e:	61bb      	str	r3, [r7, #24]
 8005560:	e007      	b.n	8005572 <HAL_UART_Transmit+0xc6>
 8005562:	69fb      	ldr	r3, [r7, #28]
 8005564:	781a      	ldrb	r2, [r3, #0]
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	629a      	str	r2, [r3, #40]	; 0x28
 800556c:	69fb      	ldr	r3, [r7, #28]
 800556e:	3301      	adds	r3, #1
 8005570:	61fb      	str	r3, [r7, #28]
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005578:	b29b      	uxth	r3, r3
 800557a:	3b01      	subs	r3, #1
 800557c:	b29a      	uxth	r2, r3
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800558a:	b29b      	uxth	r3, r3
 800558c:	2b00      	cmp	r3, #0
 800558e:	d1c8      	bne.n	8005522 <HAL_UART_Transmit+0x76>
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	9300      	str	r3, [sp, #0]
 8005594:	697b      	ldr	r3, [r7, #20]
 8005596:	2200      	movs	r2, #0
 8005598:	2140      	movs	r1, #64	; 0x40
 800559a:	68f8      	ldr	r0, [r7, #12]
 800559c:	f000 fb88 	bl	8005cb0 <UART_WaitOnFlagUntilTimeout>
 80055a0:	4603      	mov	r3, r0
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d005      	beq.n	80055b2 <HAL_UART_Transmit+0x106>
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	2220      	movs	r2, #32
 80055aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 80055ae:	2303      	movs	r3, #3
 80055b0:	e006      	b.n	80055c0 <HAL_UART_Transmit+0x114>
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	2220      	movs	r2, #32
 80055b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 80055ba:	2300      	movs	r3, #0
 80055bc:	e000      	b.n	80055c0 <HAL_UART_Transmit+0x114>
 80055be:	2302      	movs	r3, #2
 80055c0:	4618      	mov	r0, r3
 80055c2:	3720      	adds	r7, #32
 80055c4:	46bd      	mov	sp, r7
 80055c6:	bd80      	pop	{r7, pc}

080055c8 <UART_SetConfig>:
 80055c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80055cc:	b08c      	sub	sp, #48	; 0x30
 80055ce:	af00      	add	r7, sp, #0
 80055d0:	6178      	str	r0, [r7, #20]
 80055d2:	2300      	movs	r3, #0
 80055d4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80055d8:	697b      	ldr	r3, [r7, #20]
 80055da:	689a      	ldr	r2, [r3, #8]
 80055dc:	697b      	ldr	r3, [r7, #20]
 80055de:	691b      	ldr	r3, [r3, #16]
 80055e0:	431a      	orrs	r2, r3
 80055e2:	697b      	ldr	r3, [r7, #20]
 80055e4:	695b      	ldr	r3, [r3, #20]
 80055e6:	431a      	orrs	r2, r3
 80055e8:	697b      	ldr	r3, [r7, #20]
 80055ea:	69db      	ldr	r3, [r3, #28]
 80055ec:	4313      	orrs	r3, r2
 80055ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80055f0:	697b      	ldr	r3, [r7, #20]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	681a      	ldr	r2, [r3, #0]
 80055f6:	4baf      	ldr	r3, [pc, #700]	; (80058b4 <UART_SetConfig+0x2ec>)
 80055f8:	4013      	ands	r3, r2
 80055fa:	697a      	ldr	r2, [r7, #20]
 80055fc:	6812      	ldr	r2, [r2, #0]
 80055fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005600:	430b      	orrs	r3, r1
 8005602:	6013      	str	r3, [r2, #0]
 8005604:	697b      	ldr	r3, [r7, #20]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	685b      	ldr	r3, [r3, #4]
 800560a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800560e:	697b      	ldr	r3, [r7, #20]
 8005610:	68da      	ldr	r2, [r3, #12]
 8005612:	697b      	ldr	r3, [r7, #20]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	430a      	orrs	r2, r1
 8005618:	605a      	str	r2, [r3, #4]
 800561a:	697b      	ldr	r3, [r7, #20]
 800561c:	699b      	ldr	r3, [r3, #24]
 800561e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005620:	697b      	ldr	r3, [r7, #20]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4aa4      	ldr	r2, [pc, #656]	; (80058b8 <UART_SetConfig+0x2f0>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d004      	beq.n	8005634 <UART_SetConfig+0x6c>
 800562a:	697b      	ldr	r3, [r7, #20]
 800562c:	6a1b      	ldr	r3, [r3, #32]
 800562e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005630:	4313      	orrs	r3, r2
 8005632:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005634:	697b      	ldr	r3, [r7, #20]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	689b      	ldr	r3, [r3, #8]
 800563a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800563e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005642:	697a      	ldr	r2, [r7, #20]
 8005644:	6812      	ldr	r2, [r2, #0]
 8005646:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005648:	430b      	orrs	r3, r1
 800564a:	6093      	str	r3, [r2, #8]
 800564c:	697b      	ldr	r3, [r7, #20]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005652:	f023 010f 	bic.w	r1, r3, #15
 8005656:	697b      	ldr	r3, [r7, #20]
 8005658:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800565a:	697b      	ldr	r3, [r7, #20]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	430a      	orrs	r2, r1
 8005660:	62da      	str	r2, [r3, #44]	; 0x2c
 8005662:	697b      	ldr	r3, [r7, #20]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	4a95      	ldr	r2, [pc, #596]	; (80058bc <UART_SetConfig+0x2f4>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d125      	bne.n	80056b8 <UART_SetConfig+0xf0>
 800566c:	2003      	movs	r0, #3
 800566e:	f7ff fead 	bl	80053cc <LL_RCC_GetUSARTClockSource>
 8005672:	4603      	mov	r3, r0
 8005674:	2b03      	cmp	r3, #3
 8005676:	d81b      	bhi.n	80056b0 <UART_SetConfig+0xe8>
 8005678:	a201      	add	r2, pc, #4	; (adr r2, 8005680 <UART_SetConfig+0xb8>)
 800567a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800567e:	bf00      	nop
 8005680:	08005691 	.word	0x08005691
 8005684:	080056a1 	.word	0x080056a1
 8005688:	08005699 	.word	0x08005699
 800568c:	080056a9 	.word	0x080056a9
 8005690:	2301      	movs	r3, #1
 8005692:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005696:	e042      	b.n	800571e <UART_SetConfig+0x156>
 8005698:	2302      	movs	r3, #2
 800569a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800569e:	e03e      	b.n	800571e <UART_SetConfig+0x156>
 80056a0:	2304      	movs	r3, #4
 80056a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80056a6:	e03a      	b.n	800571e <UART_SetConfig+0x156>
 80056a8:	2308      	movs	r3, #8
 80056aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80056ae:	e036      	b.n	800571e <UART_SetConfig+0x156>
 80056b0:	2310      	movs	r3, #16
 80056b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80056b6:	e032      	b.n	800571e <UART_SetConfig+0x156>
 80056b8:	697b      	ldr	r3, [r7, #20]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4a7e      	ldr	r2, [pc, #504]	; (80058b8 <UART_SetConfig+0x2f0>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d12a      	bne.n	8005718 <UART_SetConfig+0x150>
 80056c2:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80056c6:	f7ff fe91 	bl	80053ec <LL_RCC_GetLPUARTClockSource>
 80056ca:	4603      	mov	r3, r0
 80056cc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80056d0:	d01a      	beq.n	8005708 <UART_SetConfig+0x140>
 80056d2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80056d6:	d81b      	bhi.n	8005710 <UART_SetConfig+0x148>
 80056d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056dc:	d00c      	beq.n	80056f8 <UART_SetConfig+0x130>
 80056de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056e2:	d815      	bhi.n	8005710 <UART_SetConfig+0x148>
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d003      	beq.n	80056f0 <UART_SetConfig+0x128>
 80056e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056ec:	d008      	beq.n	8005700 <UART_SetConfig+0x138>
 80056ee:	e00f      	b.n	8005710 <UART_SetConfig+0x148>
 80056f0:	2300      	movs	r3, #0
 80056f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80056f6:	e012      	b.n	800571e <UART_SetConfig+0x156>
 80056f8:	2302      	movs	r3, #2
 80056fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80056fe:	e00e      	b.n	800571e <UART_SetConfig+0x156>
 8005700:	2304      	movs	r3, #4
 8005702:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005706:	e00a      	b.n	800571e <UART_SetConfig+0x156>
 8005708:	2308      	movs	r3, #8
 800570a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800570e:	e006      	b.n	800571e <UART_SetConfig+0x156>
 8005710:	2310      	movs	r3, #16
 8005712:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005716:	e002      	b.n	800571e <UART_SetConfig+0x156>
 8005718:	2310      	movs	r3, #16
 800571a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800571e:	697b      	ldr	r3, [r7, #20]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4a65      	ldr	r2, [pc, #404]	; (80058b8 <UART_SetConfig+0x2f0>)
 8005724:	4293      	cmp	r3, r2
 8005726:	f040 8097 	bne.w	8005858 <UART_SetConfig+0x290>
 800572a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800572e:	2b08      	cmp	r3, #8
 8005730:	d823      	bhi.n	800577a <UART_SetConfig+0x1b2>
 8005732:	a201      	add	r2, pc, #4	; (adr r2, 8005738 <UART_SetConfig+0x170>)
 8005734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005738:	0800575d 	.word	0x0800575d
 800573c:	0800577b 	.word	0x0800577b
 8005740:	08005765 	.word	0x08005765
 8005744:	0800577b 	.word	0x0800577b
 8005748:	0800576b 	.word	0x0800576b
 800574c:	0800577b 	.word	0x0800577b
 8005750:	0800577b 	.word	0x0800577b
 8005754:	0800577b 	.word	0x0800577b
 8005758:	08005773 	.word	0x08005773
 800575c:	f7fe ff76 	bl	800464c <HAL_RCC_GetPCLK1Freq>
 8005760:	6278      	str	r0, [r7, #36]	; 0x24
 8005762:	e010      	b.n	8005786 <UART_SetConfig+0x1be>
 8005764:	4b56      	ldr	r3, [pc, #344]	; (80058c0 <UART_SetConfig+0x2f8>)
 8005766:	627b      	str	r3, [r7, #36]	; 0x24
 8005768:	e00d      	b.n	8005786 <UART_SetConfig+0x1be>
 800576a:	f7fe feef 	bl	800454c <HAL_RCC_GetSysClockFreq>
 800576e:	6278      	str	r0, [r7, #36]	; 0x24
 8005770:	e009      	b.n	8005786 <UART_SetConfig+0x1be>
 8005772:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005776:	627b      	str	r3, [r7, #36]	; 0x24
 8005778:	e005      	b.n	8005786 <UART_SetConfig+0x1be>
 800577a:	2300      	movs	r3, #0
 800577c:	627b      	str	r3, [r7, #36]	; 0x24
 800577e:	2301      	movs	r3, #1
 8005780:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005784:	bf00      	nop
 8005786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005788:	2b00      	cmp	r3, #0
 800578a:	f000 812b 	beq.w	80059e4 <UART_SetConfig+0x41c>
 800578e:	697b      	ldr	r3, [r7, #20]
 8005790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005792:	4a4c      	ldr	r2, [pc, #304]	; (80058c4 <UART_SetConfig+0x2fc>)
 8005794:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005798:	461a      	mov	r2, r3
 800579a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800579c:	fbb3 f3f2 	udiv	r3, r3, r2
 80057a0:	61bb      	str	r3, [r7, #24]
 80057a2:	697b      	ldr	r3, [r7, #20]
 80057a4:	685a      	ldr	r2, [r3, #4]
 80057a6:	4613      	mov	r3, r2
 80057a8:	005b      	lsls	r3, r3, #1
 80057aa:	4413      	add	r3, r2
 80057ac:	69ba      	ldr	r2, [r7, #24]
 80057ae:	429a      	cmp	r2, r3
 80057b0:	d305      	bcc.n	80057be <UART_SetConfig+0x1f6>
 80057b2:	697b      	ldr	r3, [r7, #20]
 80057b4:	685b      	ldr	r3, [r3, #4]
 80057b6:	031b      	lsls	r3, r3, #12
 80057b8:	69ba      	ldr	r2, [r7, #24]
 80057ba:	429a      	cmp	r2, r3
 80057bc:	d903      	bls.n	80057c6 <UART_SetConfig+0x1fe>
 80057be:	2301      	movs	r3, #1
 80057c0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80057c4:	e10e      	b.n	80059e4 <UART_SetConfig+0x41c>
 80057c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057c8:	2200      	movs	r2, #0
 80057ca:	60bb      	str	r3, [r7, #8]
 80057cc:	60fa      	str	r2, [r7, #12]
 80057ce:	697b      	ldr	r3, [r7, #20]
 80057d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057d2:	4a3c      	ldr	r2, [pc, #240]	; (80058c4 <UART_SetConfig+0x2fc>)
 80057d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80057d8:	b29b      	uxth	r3, r3
 80057da:	2200      	movs	r2, #0
 80057dc:	603b      	str	r3, [r7, #0]
 80057de:	607a      	str	r2, [r7, #4]
 80057e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80057e4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80057e8:	f7fa fd22 	bl	8000230 <__aeabi_uldivmod>
 80057ec:	4602      	mov	r2, r0
 80057ee:	460b      	mov	r3, r1
 80057f0:	4610      	mov	r0, r2
 80057f2:	4619      	mov	r1, r3
 80057f4:	f04f 0200 	mov.w	r2, #0
 80057f8:	f04f 0300 	mov.w	r3, #0
 80057fc:	020b      	lsls	r3, r1, #8
 80057fe:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005802:	0202      	lsls	r2, r0, #8
 8005804:	6979      	ldr	r1, [r7, #20]
 8005806:	6849      	ldr	r1, [r1, #4]
 8005808:	0849      	lsrs	r1, r1, #1
 800580a:	2000      	movs	r0, #0
 800580c:	460c      	mov	r4, r1
 800580e:	4605      	mov	r5, r0
 8005810:	eb12 0804 	adds.w	r8, r2, r4
 8005814:	eb43 0905 	adc.w	r9, r3, r5
 8005818:	697b      	ldr	r3, [r7, #20]
 800581a:	685b      	ldr	r3, [r3, #4]
 800581c:	2200      	movs	r2, #0
 800581e:	469a      	mov	sl, r3
 8005820:	4693      	mov	fp, r2
 8005822:	4652      	mov	r2, sl
 8005824:	465b      	mov	r3, fp
 8005826:	4640      	mov	r0, r8
 8005828:	4649      	mov	r1, r9
 800582a:	f7fa fd01 	bl	8000230 <__aeabi_uldivmod>
 800582e:	4602      	mov	r2, r0
 8005830:	460b      	mov	r3, r1
 8005832:	4613      	mov	r3, r2
 8005834:	623b      	str	r3, [r7, #32]
 8005836:	6a3b      	ldr	r3, [r7, #32]
 8005838:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800583c:	d308      	bcc.n	8005850 <UART_SetConfig+0x288>
 800583e:	6a3b      	ldr	r3, [r7, #32]
 8005840:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005844:	d204      	bcs.n	8005850 <UART_SetConfig+0x288>
 8005846:	697b      	ldr	r3, [r7, #20]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	6a3a      	ldr	r2, [r7, #32]
 800584c:	60da      	str	r2, [r3, #12]
 800584e:	e0c9      	b.n	80059e4 <UART_SetConfig+0x41c>
 8005850:	2301      	movs	r3, #1
 8005852:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005856:	e0c5      	b.n	80059e4 <UART_SetConfig+0x41c>
 8005858:	697b      	ldr	r3, [r7, #20]
 800585a:	69db      	ldr	r3, [r3, #28]
 800585c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005860:	d16d      	bne.n	800593e <UART_SetConfig+0x376>
 8005862:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005866:	3b01      	subs	r3, #1
 8005868:	2b07      	cmp	r3, #7
 800586a:	d82d      	bhi.n	80058c8 <UART_SetConfig+0x300>
 800586c:	a201      	add	r2, pc, #4	; (adr r2, 8005874 <UART_SetConfig+0x2ac>)
 800586e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005872:	bf00      	nop
 8005874:	08005895 	.word	0x08005895
 8005878:	0800589d 	.word	0x0800589d
 800587c:	080058c9 	.word	0x080058c9
 8005880:	080058a3 	.word	0x080058a3
 8005884:	080058c9 	.word	0x080058c9
 8005888:	080058c9 	.word	0x080058c9
 800588c:	080058c9 	.word	0x080058c9
 8005890:	080058ab 	.word	0x080058ab
 8005894:	f7fe fef0 	bl	8004678 <HAL_RCC_GetPCLK2Freq>
 8005898:	6278      	str	r0, [r7, #36]	; 0x24
 800589a:	e01b      	b.n	80058d4 <UART_SetConfig+0x30c>
 800589c:	4b08      	ldr	r3, [pc, #32]	; (80058c0 <UART_SetConfig+0x2f8>)
 800589e:	627b      	str	r3, [r7, #36]	; 0x24
 80058a0:	e018      	b.n	80058d4 <UART_SetConfig+0x30c>
 80058a2:	f7fe fe53 	bl	800454c <HAL_RCC_GetSysClockFreq>
 80058a6:	6278      	str	r0, [r7, #36]	; 0x24
 80058a8:	e014      	b.n	80058d4 <UART_SetConfig+0x30c>
 80058aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80058ae:	627b      	str	r3, [r7, #36]	; 0x24
 80058b0:	e010      	b.n	80058d4 <UART_SetConfig+0x30c>
 80058b2:	bf00      	nop
 80058b4:	cfff69f3 	.word	0xcfff69f3
 80058b8:	40008000 	.word	0x40008000
 80058bc:	40013800 	.word	0x40013800
 80058c0:	00f42400 	.word	0x00f42400
 80058c4:	0800a59c 	.word	0x0800a59c
 80058c8:	2300      	movs	r3, #0
 80058ca:	627b      	str	r3, [r7, #36]	; 0x24
 80058cc:	2301      	movs	r3, #1
 80058ce:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80058d2:	bf00      	nop
 80058d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	f000 8084 	beq.w	80059e4 <UART_SetConfig+0x41c>
 80058dc:	697b      	ldr	r3, [r7, #20]
 80058de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058e0:	4a4b      	ldr	r2, [pc, #300]	; (8005a10 <UART_SetConfig+0x448>)
 80058e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80058e6:	461a      	mov	r2, r3
 80058e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ea:	fbb3 f3f2 	udiv	r3, r3, r2
 80058ee:	005a      	lsls	r2, r3, #1
 80058f0:	697b      	ldr	r3, [r7, #20]
 80058f2:	685b      	ldr	r3, [r3, #4]
 80058f4:	085b      	lsrs	r3, r3, #1
 80058f6:	441a      	add	r2, r3
 80058f8:	697b      	ldr	r3, [r7, #20]
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005900:	623b      	str	r3, [r7, #32]
 8005902:	6a3b      	ldr	r3, [r7, #32]
 8005904:	2b0f      	cmp	r3, #15
 8005906:	d916      	bls.n	8005936 <UART_SetConfig+0x36e>
 8005908:	6a3b      	ldr	r3, [r7, #32]
 800590a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800590e:	d212      	bcs.n	8005936 <UART_SetConfig+0x36e>
 8005910:	6a3b      	ldr	r3, [r7, #32]
 8005912:	b29b      	uxth	r3, r3
 8005914:	f023 030f 	bic.w	r3, r3, #15
 8005918:	83fb      	strh	r3, [r7, #30]
 800591a:	6a3b      	ldr	r3, [r7, #32]
 800591c:	085b      	lsrs	r3, r3, #1
 800591e:	b29b      	uxth	r3, r3
 8005920:	f003 0307 	and.w	r3, r3, #7
 8005924:	b29a      	uxth	r2, r3
 8005926:	8bfb      	ldrh	r3, [r7, #30]
 8005928:	4313      	orrs	r3, r2
 800592a:	83fb      	strh	r3, [r7, #30]
 800592c:	697b      	ldr	r3, [r7, #20]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	8bfa      	ldrh	r2, [r7, #30]
 8005932:	60da      	str	r2, [r3, #12]
 8005934:	e056      	b.n	80059e4 <UART_SetConfig+0x41c>
 8005936:	2301      	movs	r3, #1
 8005938:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800593c:	e052      	b.n	80059e4 <UART_SetConfig+0x41c>
 800593e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005942:	3b01      	subs	r3, #1
 8005944:	2b07      	cmp	r3, #7
 8005946:	d822      	bhi.n	800598e <UART_SetConfig+0x3c6>
 8005948:	a201      	add	r2, pc, #4	; (adr r2, 8005950 <UART_SetConfig+0x388>)
 800594a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800594e:	bf00      	nop
 8005950:	08005971 	.word	0x08005971
 8005954:	08005979 	.word	0x08005979
 8005958:	0800598f 	.word	0x0800598f
 800595c:	0800597f 	.word	0x0800597f
 8005960:	0800598f 	.word	0x0800598f
 8005964:	0800598f 	.word	0x0800598f
 8005968:	0800598f 	.word	0x0800598f
 800596c:	08005987 	.word	0x08005987
 8005970:	f7fe fe82 	bl	8004678 <HAL_RCC_GetPCLK2Freq>
 8005974:	6278      	str	r0, [r7, #36]	; 0x24
 8005976:	e010      	b.n	800599a <UART_SetConfig+0x3d2>
 8005978:	4b26      	ldr	r3, [pc, #152]	; (8005a14 <UART_SetConfig+0x44c>)
 800597a:	627b      	str	r3, [r7, #36]	; 0x24
 800597c:	e00d      	b.n	800599a <UART_SetConfig+0x3d2>
 800597e:	f7fe fde5 	bl	800454c <HAL_RCC_GetSysClockFreq>
 8005982:	6278      	str	r0, [r7, #36]	; 0x24
 8005984:	e009      	b.n	800599a <UART_SetConfig+0x3d2>
 8005986:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800598a:	627b      	str	r3, [r7, #36]	; 0x24
 800598c:	e005      	b.n	800599a <UART_SetConfig+0x3d2>
 800598e:	2300      	movs	r3, #0
 8005990:	627b      	str	r3, [r7, #36]	; 0x24
 8005992:	2301      	movs	r3, #1
 8005994:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005998:	bf00      	nop
 800599a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800599c:	2b00      	cmp	r3, #0
 800599e:	d021      	beq.n	80059e4 <UART_SetConfig+0x41c>
 80059a0:	697b      	ldr	r3, [r7, #20]
 80059a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059a4:	4a1a      	ldr	r2, [pc, #104]	; (8005a10 <UART_SetConfig+0x448>)
 80059a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80059aa:	461a      	mov	r2, r3
 80059ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ae:	fbb3 f2f2 	udiv	r2, r3, r2
 80059b2:	697b      	ldr	r3, [r7, #20]
 80059b4:	685b      	ldr	r3, [r3, #4]
 80059b6:	085b      	lsrs	r3, r3, #1
 80059b8:	441a      	add	r2, r3
 80059ba:	697b      	ldr	r3, [r7, #20]
 80059bc:	685b      	ldr	r3, [r3, #4]
 80059be:	fbb2 f3f3 	udiv	r3, r2, r3
 80059c2:	623b      	str	r3, [r7, #32]
 80059c4:	6a3b      	ldr	r3, [r7, #32]
 80059c6:	2b0f      	cmp	r3, #15
 80059c8:	d909      	bls.n	80059de <UART_SetConfig+0x416>
 80059ca:	6a3b      	ldr	r3, [r7, #32]
 80059cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059d0:	d205      	bcs.n	80059de <UART_SetConfig+0x416>
 80059d2:	6a3b      	ldr	r3, [r7, #32]
 80059d4:	b29a      	uxth	r2, r3
 80059d6:	697b      	ldr	r3, [r7, #20]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	60da      	str	r2, [r3, #12]
 80059dc:	e002      	b.n	80059e4 <UART_SetConfig+0x41c>
 80059de:	2301      	movs	r3, #1
 80059e0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80059e4:	697b      	ldr	r3, [r7, #20]
 80059e6:	2201      	movs	r2, #1
 80059e8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80059ec:	697b      	ldr	r3, [r7, #20]
 80059ee:	2201      	movs	r2, #1
 80059f0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 80059f4:	697b      	ldr	r3, [r7, #20]
 80059f6:	2200      	movs	r2, #0
 80059f8:	675a      	str	r2, [r3, #116]	; 0x74
 80059fa:	697b      	ldr	r3, [r7, #20]
 80059fc:	2200      	movs	r2, #0
 80059fe:	679a      	str	r2, [r3, #120]	; 0x78
 8005a00:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8005a04:	4618      	mov	r0, r3
 8005a06:	3730      	adds	r7, #48	; 0x30
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005a0e:	bf00      	nop
 8005a10:	0800a59c 	.word	0x0800a59c
 8005a14:	00f42400 	.word	0x00f42400

08005a18 <UART_AdvFeatureConfig>:
 8005a18:	b480      	push	{r7}
 8005a1a:	b083      	sub	sp, #12
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a24:	f003 0301 	and.w	r3, r3, #1
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d00a      	beq.n	8005a42 <UART_AdvFeatureConfig+0x2a>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	685b      	ldr	r3, [r3, #4]
 8005a32:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	430a      	orrs	r2, r1
 8005a40:	605a      	str	r2, [r3, #4]
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a46:	f003 0302 	and.w	r3, r3, #2
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d00a      	beq.n	8005a64 <UART_AdvFeatureConfig+0x4c>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	685b      	ldr	r3, [r3, #4]
 8005a54:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	430a      	orrs	r2, r1
 8005a62:	605a      	str	r2, [r3, #4]
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a68:	f003 0304 	and.w	r3, r3, #4
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d00a      	beq.n	8005a86 <UART_AdvFeatureConfig+0x6e>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	685b      	ldr	r3, [r3, #4]
 8005a76:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	430a      	orrs	r2, r1
 8005a84:	605a      	str	r2, [r3, #4]
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a8a:	f003 0308 	and.w	r3, r3, #8
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d00a      	beq.n	8005aa8 <UART_AdvFeatureConfig+0x90>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	685b      	ldr	r3, [r3, #4]
 8005a98:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	430a      	orrs	r2, r1
 8005aa6:	605a      	str	r2, [r3, #4]
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aac:	f003 0310 	and.w	r3, r3, #16
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d00a      	beq.n	8005aca <UART_AdvFeatureConfig+0xb2>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	689b      	ldr	r3, [r3, #8]
 8005aba:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	430a      	orrs	r2, r1
 8005ac8:	609a      	str	r2, [r3, #8]
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ace:	f003 0320 	and.w	r3, r3, #32
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d00a      	beq.n	8005aec <UART_AdvFeatureConfig+0xd4>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	689b      	ldr	r3, [r3, #8]
 8005adc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	430a      	orrs	r2, r1
 8005aea:	609a      	str	r2, [r3, #8]
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005af0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d01a      	beq.n	8005b2e <UART_AdvFeatureConfig+0x116>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	685b      	ldr	r3, [r3, #4]
 8005afe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	430a      	orrs	r2, r1
 8005b0c:	605a      	str	r2, [r3, #4]
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b16:	d10a      	bne.n	8005b2e <UART_AdvFeatureConfig+0x116>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	685b      	ldr	r3, [r3, #4]
 8005b1e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	430a      	orrs	r2, r1
 8005b2c:	605a      	str	r2, [r3, #4]
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d00a      	beq.n	8005b50 <UART_AdvFeatureConfig+0x138>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	685b      	ldr	r3, [r3, #4]
 8005b40:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	430a      	orrs	r2, r1
 8005b4e:	605a      	str	r2, [r3, #4]
 8005b50:	bf00      	nop
 8005b52:	370c      	adds	r7, #12
 8005b54:	46bd      	mov	sp, r7
 8005b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5a:	4770      	bx	lr

08005b5c <UART_CheckIdleState>:
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b098      	sub	sp, #96	; 0x60
 8005b60:	af02      	add	r7, sp, #8
 8005b62:	6078      	str	r0, [r7, #4]
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2200      	movs	r2, #0
 8005b68:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8005b6c:	f7fc fbf6 	bl	800235c <HAL_GetTick>
 8005b70:	6578      	str	r0, [r7, #84]	; 0x54
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f003 0308 	and.w	r3, r3, #8
 8005b7c:	2b08      	cmp	r3, #8
 8005b7e:	d12f      	bne.n	8005be0 <UART_CheckIdleState+0x84>
 8005b80:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005b84:	9300      	str	r3, [sp, #0]
 8005b86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b88:	2200      	movs	r2, #0
 8005b8a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005b8e:	6878      	ldr	r0, [r7, #4]
 8005b90:	f000 f88e 	bl	8005cb0 <UART_WaitOnFlagUntilTimeout>
 8005b94:	4603      	mov	r3, r0
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d022      	beq.n	8005be0 <UART_CheckIdleState+0x84>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005ba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ba2:	e853 3f00 	ldrex	r3, [r3]
 8005ba6:	637b      	str	r3, [r7, #52]	; 0x34
 8005ba8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005baa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005bae:	653b      	str	r3, [r7, #80]	; 0x50
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	461a      	mov	r2, r3
 8005bb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005bb8:	647b      	str	r3, [r7, #68]	; 0x44
 8005bba:	643a      	str	r2, [r7, #64]	; 0x40
 8005bbc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005bbe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005bc0:	e841 2300 	strex	r3, r2, [r1]
 8005bc4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005bc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d1e6      	bne.n	8005b9a <UART_CheckIdleState+0x3e>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2220      	movs	r2, #32
 8005bd0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 8005bdc:	2303      	movs	r3, #3
 8005bde:	e063      	b.n	8005ca8 <UART_CheckIdleState+0x14c>
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f003 0304 	and.w	r3, r3, #4
 8005bea:	2b04      	cmp	r3, #4
 8005bec:	d149      	bne.n	8005c82 <UART_CheckIdleState+0x126>
 8005bee:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005bf2:	9300      	str	r3, [sp, #0]
 8005bf4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005bfc:	6878      	ldr	r0, [r7, #4]
 8005bfe:	f000 f857 	bl	8005cb0 <UART_WaitOnFlagUntilTimeout>
 8005c02:	4603      	mov	r3, r0
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d03c      	beq.n	8005c82 <UART_CheckIdleState+0x126>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	627b      	str	r3, [r7, #36]	; 0x24
 8005c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c10:	e853 3f00 	ldrex	r3, [r3]
 8005c14:	623b      	str	r3, [r7, #32]
 8005c16:	6a3b      	ldr	r3, [r7, #32]
 8005c18:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005c1c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	461a      	mov	r2, r3
 8005c24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c26:	633b      	str	r3, [r7, #48]	; 0x30
 8005c28:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005c2a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005c2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c2e:	e841 2300 	strex	r3, r2, [r1]
 8005c32:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d1e6      	bne.n	8005c08 <UART_CheckIdleState+0xac>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	3308      	adds	r3, #8
 8005c40:	613b      	str	r3, [r7, #16]
 8005c42:	693b      	ldr	r3, [r7, #16]
 8005c44:	e853 3f00 	ldrex	r3, [r3]
 8005c48:	60fb      	str	r3, [r7, #12]
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	f023 0301 	bic.w	r3, r3, #1
 8005c50:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	3308      	adds	r3, #8
 8005c58:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005c5a:	61fa      	str	r2, [r7, #28]
 8005c5c:	61bb      	str	r3, [r7, #24]
 8005c5e:	69b9      	ldr	r1, [r7, #24]
 8005c60:	69fa      	ldr	r2, [r7, #28]
 8005c62:	e841 2300 	strex	r3, r2, [r1]
 8005c66:	617b      	str	r3, [r7, #20]
 8005c68:	697b      	ldr	r3, [r7, #20]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d1e5      	bne.n	8005c3a <UART_CheckIdleState+0xde>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2220      	movs	r2, #32
 8005c72:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2200      	movs	r2, #0
 8005c7a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 8005c7e:	2303      	movs	r3, #3
 8005c80:	e012      	b.n	8005ca8 <UART_CheckIdleState+0x14c>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2220      	movs	r2, #32
 8005c86:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2220      	movs	r2, #32
 8005c8e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2200      	movs	r2, #0
 8005c96:	66da      	str	r2, [r3, #108]	; 0x6c
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	671a      	str	r2, [r3, #112]	; 0x70
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	4618      	mov	r0, r3
 8005caa:	3758      	adds	r7, #88	; 0x58
 8005cac:	46bd      	mov	sp, r7
 8005cae:	bd80      	pop	{r7, pc}

08005cb0 <UART_WaitOnFlagUntilTimeout>:
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b084      	sub	sp, #16
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	60f8      	str	r0, [r7, #12]
 8005cb8:	60b9      	str	r1, [r7, #8]
 8005cba:	603b      	str	r3, [r7, #0]
 8005cbc:	4613      	mov	r3, r2
 8005cbe:	71fb      	strb	r3, [r7, #7]
 8005cc0:	e049      	b.n	8005d56 <UART_WaitOnFlagUntilTimeout+0xa6>
 8005cc2:	69bb      	ldr	r3, [r7, #24]
 8005cc4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005cc8:	d045      	beq.n	8005d56 <UART_WaitOnFlagUntilTimeout+0xa6>
 8005cca:	f7fc fb47 	bl	800235c <HAL_GetTick>
 8005cce:	4602      	mov	r2, r0
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	1ad3      	subs	r3, r2, r3
 8005cd4:	69ba      	ldr	r2, [r7, #24]
 8005cd6:	429a      	cmp	r2, r3
 8005cd8:	d302      	bcc.n	8005ce0 <UART_WaitOnFlagUntilTimeout+0x30>
 8005cda:	69bb      	ldr	r3, [r7, #24]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d101      	bne.n	8005ce4 <UART_WaitOnFlagUntilTimeout+0x34>
 8005ce0:	2303      	movs	r3, #3
 8005ce2:	e048      	b.n	8005d76 <UART_WaitOnFlagUntilTimeout+0xc6>
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f003 0304 	and.w	r3, r3, #4
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d031      	beq.n	8005d56 <UART_WaitOnFlagUntilTimeout+0xa6>
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	69db      	ldr	r3, [r3, #28]
 8005cf8:	f003 0308 	and.w	r3, r3, #8
 8005cfc:	2b08      	cmp	r3, #8
 8005cfe:	d110      	bne.n	8005d22 <UART_WaitOnFlagUntilTimeout+0x72>
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	2208      	movs	r2, #8
 8005d06:	621a      	str	r2, [r3, #32]
 8005d08:	68f8      	ldr	r0, [r7, #12]
 8005d0a:	f000 f838 	bl	8005d7e <UART_EndRxTransfer>
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	2208      	movs	r2, #8
 8005d12:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	2200      	movs	r2, #0
 8005d1a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 8005d1e:	2301      	movs	r3, #1
 8005d20:	e029      	b.n	8005d76 <UART_WaitOnFlagUntilTimeout+0xc6>
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	69db      	ldr	r3, [r3, #28]
 8005d28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d2c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d30:	d111      	bne.n	8005d56 <UART_WaitOnFlagUntilTimeout+0xa6>
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005d3a:	621a      	str	r2, [r3, #32]
 8005d3c:	68f8      	ldr	r0, [r7, #12]
 8005d3e:	f000 f81e 	bl	8005d7e <UART_EndRxTransfer>
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	2220      	movs	r2, #32
 8005d46:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 8005d52:	2303      	movs	r3, #3
 8005d54:	e00f      	b.n	8005d76 <UART_WaitOnFlagUntilTimeout+0xc6>
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	69da      	ldr	r2, [r3, #28]
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	4013      	ands	r3, r2
 8005d60:	68ba      	ldr	r2, [r7, #8]
 8005d62:	429a      	cmp	r2, r3
 8005d64:	bf0c      	ite	eq
 8005d66:	2301      	moveq	r3, #1
 8005d68:	2300      	movne	r3, #0
 8005d6a:	b2db      	uxtb	r3, r3
 8005d6c:	461a      	mov	r2, r3
 8005d6e:	79fb      	ldrb	r3, [r7, #7]
 8005d70:	429a      	cmp	r2, r3
 8005d72:	d0a6      	beq.n	8005cc2 <UART_WaitOnFlagUntilTimeout+0x12>
 8005d74:	2300      	movs	r3, #0
 8005d76:	4618      	mov	r0, r3
 8005d78:	3710      	adds	r7, #16
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	bd80      	pop	{r7, pc}

08005d7e <UART_EndRxTransfer>:
 8005d7e:	b480      	push	{r7}
 8005d80:	b095      	sub	sp, #84	; 0x54
 8005d82:	af00      	add	r7, sp, #0
 8005d84:	6078      	str	r0, [r7, #4]
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	637b      	str	r3, [r7, #52]	; 0x34
 8005d8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d8e:	e853 3f00 	ldrex	r3, [r3]
 8005d92:	633b      	str	r3, [r7, #48]	; 0x30
 8005d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d96:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005d9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	461a      	mov	r2, r3
 8005da2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005da4:	643b      	str	r3, [r7, #64]	; 0x40
 8005da6:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005da8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005daa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005dac:	e841 2300 	strex	r3, r2, [r1]
 8005db0:	63bb      	str	r3, [r7, #56]	; 0x38
 8005db2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d1e6      	bne.n	8005d86 <UART_EndRxTransfer+0x8>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	3308      	adds	r3, #8
 8005dbe:	623b      	str	r3, [r7, #32]
 8005dc0:	6a3b      	ldr	r3, [r7, #32]
 8005dc2:	e853 3f00 	ldrex	r3, [r3]
 8005dc6:	61fb      	str	r3, [r7, #28]
 8005dc8:	69fb      	ldr	r3, [r7, #28]
 8005dca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005dce:	f023 0301 	bic.w	r3, r3, #1
 8005dd2:	64bb      	str	r3, [r7, #72]	; 0x48
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	3308      	adds	r3, #8
 8005dda:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005ddc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005dde:	62bb      	str	r3, [r7, #40]	; 0x28
 8005de0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005de2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005de4:	e841 2300 	strex	r3, r2, [r1]
 8005de8:	627b      	str	r3, [r7, #36]	; 0x24
 8005dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d1e3      	bne.n	8005db8 <UART_EndRxTransfer+0x3a>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005df4:	2b01      	cmp	r3, #1
 8005df6:	d118      	bne.n	8005e2a <UART_EndRxTransfer+0xac>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	60fb      	str	r3, [r7, #12]
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	e853 3f00 	ldrex	r3, [r3]
 8005e04:	60bb      	str	r3, [r7, #8]
 8005e06:	68bb      	ldr	r3, [r7, #8]
 8005e08:	f023 0310 	bic.w	r3, r3, #16
 8005e0c:	647b      	str	r3, [r7, #68]	; 0x44
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	461a      	mov	r2, r3
 8005e14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e16:	61bb      	str	r3, [r7, #24]
 8005e18:	617a      	str	r2, [r7, #20]
 8005e1a:	6979      	ldr	r1, [r7, #20]
 8005e1c:	69ba      	ldr	r2, [r7, #24]
 8005e1e:	e841 2300 	strex	r3, r2, [r1]
 8005e22:	613b      	str	r3, [r7, #16]
 8005e24:	693b      	ldr	r3, [r7, #16]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d1e6      	bne.n	8005df8 <UART_EndRxTransfer+0x7a>
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2220      	movs	r2, #32
 8005e2e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2200      	movs	r2, #0
 8005e36:	66da      	str	r2, [r3, #108]	; 0x6c
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	675a      	str	r2, [r3, #116]	; 0x74
 8005e3e:	bf00      	nop
 8005e40:	3754      	adds	r7, #84	; 0x54
 8005e42:	46bd      	mov	sp, r7
 8005e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e48:	4770      	bx	lr

08005e4a <HAL_UARTEx_DisableFifoMode>:
 8005e4a:	b480      	push	{r7}
 8005e4c:	b085      	sub	sp, #20
 8005e4e:	af00      	add	r7, sp, #0
 8005e50:	6078      	str	r0, [r7, #4]
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005e58:	2b01      	cmp	r3, #1
 8005e5a:	d101      	bne.n	8005e60 <HAL_UARTEx_DisableFifoMode+0x16>
 8005e5c:	2302      	movs	r3, #2
 8005e5e:	e027      	b.n	8005eb0 <HAL_UARTEx_DisableFifoMode+0x66>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2201      	movs	r2, #1
 8005e64:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2224      	movs	r2, #36	; 0x24
 8005e6c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	60fb      	str	r3, [r7, #12]
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	681a      	ldr	r2, [r3, #0]
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f022 0201 	bic.w	r2, r2, #1
 8005e86:	601a      	str	r2, [r3, #0]
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005e8e:	60fb      	str	r3, [r7, #12]
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2200      	movs	r2, #0
 8005e94:	665a      	str	r2, [r3, #100]	; 0x64
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	68fa      	ldr	r2, [r7, #12]
 8005e9c:	601a      	str	r2, [r3, #0]
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2220      	movs	r2, #32
 8005ea2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 8005eae:	2300      	movs	r3, #0
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	3714      	adds	r7, #20
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eba:	4770      	bx	lr

08005ebc <HAL_UARTEx_SetTxFifoThreshold>:
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b084      	sub	sp, #16
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
 8005ec4:	6039      	str	r1, [r7, #0]
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005ecc:	2b01      	cmp	r3, #1
 8005ece:	d101      	bne.n	8005ed4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005ed0:	2302      	movs	r3, #2
 8005ed2:	e02d      	b.n	8005f30 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2201      	movs	r2, #1
 8005ed8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2224      	movs	r2, #36	; 0x24
 8005ee0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	60fb      	str	r3, [r7, #12]
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	681a      	ldr	r2, [r3, #0]
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f022 0201 	bic.w	r2, r2, #1
 8005efa:	601a      	str	r2, [r3, #0]
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	689b      	ldr	r3, [r3, #8]
 8005f02:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	683a      	ldr	r2, [r7, #0]
 8005f0c:	430a      	orrs	r2, r1
 8005f0e:	609a      	str	r2, [r3, #8]
 8005f10:	6878      	ldr	r0, [r7, #4]
 8005f12:	f000 f84f 	bl	8005fb4 <UARTEx_SetNbDataToProcess>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	68fa      	ldr	r2, [r7, #12]
 8005f1c:	601a      	str	r2, [r3, #0]
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2220      	movs	r2, #32
 8005f22:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2200      	movs	r2, #0
 8005f2a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 8005f2e:	2300      	movs	r3, #0
 8005f30:	4618      	mov	r0, r3
 8005f32:	3710      	adds	r7, #16
 8005f34:	46bd      	mov	sp, r7
 8005f36:	bd80      	pop	{r7, pc}

08005f38 <HAL_UARTEx_SetRxFifoThreshold>:
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b084      	sub	sp, #16
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
 8005f40:	6039      	str	r1, [r7, #0]
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005f48:	2b01      	cmp	r3, #1
 8005f4a:	d101      	bne.n	8005f50 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005f4c:	2302      	movs	r3, #2
 8005f4e:	e02d      	b.n	8005fac <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2201      	movs	r2, #1
 8005f54:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2224      	movs	r2, #36	; 0x24
 8005f5c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	60fb      	str	r3, [r7, #12]
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	681a      	ldr	r2, [r3, #0]
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f022 0201 	bic.w	r2, r2, #1
 8005f76:	601a      	str	r2, [r3, #0]
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	689b      	ldr	r3, [r3, #8]
 8005f7e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	683a      	ldr	r2, [r7, #0]
 8005f88:	430a      	orrs	r2, r1
 8005f8a:	609a      	str	r2, [r3, #8]
 8005f8c:	6878      	ldr	r0, [r7, #4]
 8005f8e:	f000 f811 	bl	8005fb4 <UARTEx_SetNbDataToProcess>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	68fa      	ldr	r2, [r7, #12]
 8005f98:	601a      	str	r2, [r3, #0]
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2220      	movs	r2, #32
 8005f9e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 8005faa:	2300      	movs	r3, #0
 8005fac:	4618      	mov	r0, r3
 8005fae:	3710      	adds	r7, #16
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	bd80      	pop	{r7, pc}

08005fb4 <UARTEx_SetNbDataToProcess>:
 8005fb4:	b480      	push	{r7}
 8005fb6:	b085      	sub	sp, #20
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d108      	bne.n	8005fd6 <UARTEx_SetNbDataToProcess+0x22>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2201      	movs	r2, #1
 8005fc8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2201      	movs	r2, #1
 8005fd0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8005fd4:	e031      	b.n	800603a <UARTEx_SetNbDataToProcess+0x86>
 8005fd6:	2308      	movs	r3, #8
 8005fd8:	73fb      	strb	r3, [r7, #15]
 8005fda:	2308      	movs	r3, #8
 8005fdc:	73bb      	strb	r3, [r7, #14]
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	689b      	ldr	r3, [r3, #8]
 8005fe4:	0e5b      	lsrs	r3, r3, #25
 8005fe6:	b2db      	uxtb	r3, r3
 8005fe8:	f003 0307 	and.w	r3, r3, #7
 8005fec:	737b      	strb	r3, [r7, #13]
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	689b      	ldr	r3, [r3, #8]
 8005ff4:	0f5b      	lsrs	r3, r3, #29
 8005ff6:	b2db      	uxtb	r3, r3
 8005ff8:	f003 0307 	and.w	r3, r3, #7
 8005ffc:	733b      	strb	r3, [r7, #12]
 8005ffe:	7bbb      	ldrb	r3, [r7, #14]
 8006000:	7b3a      	ldrb	r2, [r7, #12]
 8006002:	4911      	ldr	r1, [pc, #68]	; (8006048 <UARTEx_SetNbDataToProcess+0x94>)
 8006004:	5c8a      	ldrb	r2, [r1, r2]
 8006006:	fb02 f303 	mul.w	r3, r2, r3
 800600a:	7b3a      	ldrb	r2, [r7, #12]
 800600c:	490f      	ldr	r1, [pc, #60]	; (800604c <UARTEx_SetNbDataToProcess+0x98>)
 800600e:	5c8a      	ldrb	r2, [r1, r2]
 8006010:	fb93 f3f2 	sdiv	r3, r3, r2
 8006014:	b29a      	uxth	r2, r3
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800601c:	7bfb      	ldrb	r3, [r7, #15]
 800601e:	7b7a      	ldrb	r2, [r7, #13]
 8006020:	4909      	ldr	r1, [pc, #36]	; (8006048 <UARTEx_SetNbDataToProcess+0x94>)
 8006022:	5c8a      	ldrb	r2, [r1, r2]
 8006024:	fb02 f303 	mul.w	r3, r2, r3
 8006028:	7b7a      	ldrb	r2, [r7, #13]
 800602a:	4908      	ldr	r1, [pc, #32]	; (800604c <UARTEx_SetNbDataToProcess+0x98>)
 800602c:	5c8a      	ldrb	r2, [r1, r2]
 800602e:	fb93 f3f2 	sdiv	r3, r3, r2
 8006032:	b29a      	uxth	r2, r3
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800603a:	bf00      	nop
 800603c:	3714      	adds	r7, #20
 800603e:	46bd      	mov	sp, r7
 8006040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006044:	4770      	bx	lr
 8006046:	bf00      	nop
 8006048:	0800a5b4 	.word	0x0800a5b4
 800604c:	0800a5bc 	.word	0x0800a5bc

08006050 <aci_gap_set_non_discoverable>:
 8006050:	b580      	push	{r7, lr}
 8006052:	b088      	sub	sp, #32
 8006054:	af00      	add	r7, sp, #0
 8006056:	2300      	movs	r3, #0
 8006058:	71fb      	strb	r3, [r7, #7]
 800605a:	f107 0308 	add.w	r3, r7, #8
 800605e:	2218      	movs	r2, #24
 8006060:	2100      	movs	r1, #0
 8006062:	4618      	mov	r0, r3
 8006064:	f001 f8d8 	bl	8007218 <Osal_MemSet>
 8006068:	233f      	movs	r3, #63	; 0x3f
 800606a:	813b      	strh	r3, [r7, #8]
 800606c:	2381      	movs	r3, #129	; 0x81
 800606e:	817b      	strh	r3, [r7, #10]
 8006070:	1dfb      	adds	r3, r7, #7
 8006072:	61bb      	str	r3, [r7, #24]
 8006074:	2301      	movs	r3, #1
 8006076:	61fb      	str	r3, [r7, #28]
 8006078:	f107 0308 	add.w	r3, r7, #8
 800607c:	2100      	movs	r1, #0
 800607e:	4618      	mov	r0, r3
 8006080:	f001 fb54 	bl	800772c <hci_send_req>
 8006084:	4603      	mov	r3, r0
 8006086:	2b00      	cmp	r3, #0
 8006088:	da01      	bge.n	800608e <aci_gap_set_non_discoverable+0x3e>
 800608a:	23ff      	movs	r3, #255	; 0xff
 800608c:	e000      	b.n	8006090 <aci_gap_set_non_discoverable+0x40>
 800608e:	79fb      	ldrb	r3, [r7, #7]
 8006090:	4618      	mov	r0, r3
 8006092:	3720      	adds	r7, #32
 8006094:	46bd      	mov	sp, r7
 8006096:	bd80      	pop	{r7, pc}

08006098 <aci_gap_set_discoverable>:
 8006098:	b5b0      	push	{r4, r5, r7, lr}
 800609a:	b0ce      	sub	sp, #312	; 0x138
 800609c:	af00      	add	r7, sp, #0
 800609e:	4605      	mov	r5, r0
 80060a0:	460c      	mov	r4, r1
 80060a2:	4610      	mov	r0, r2
 80060a4:	4619      	mov	r1, r3
 80060a6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80060aa:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 80060ae:	462a      	mov	r2, r5
 80060b0:	701a      	strb	r2, [r3, #0]
 80060b2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80060b6:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80060ba:	4622      	mov	r2, r4
 80060bc:	801a      	strh	r2, [r3, #0]
 80060be:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80060c2:	f5a3 739b 	sub.w	r3, r3, #310	; 0x136
 80060c6:	4602      	mov	r2, r0
 80060c8:	801a      	strh	r2, [r3, #0]
 80060ca:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80060ce:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 80060d2:	460a      	mov	r2, r1
 80060d4:	701a      	strb	r2, [r3, #0]
 80060d6:	f107 0310 	add.w	r3, r7, #16
 80060da:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 80060de:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 80060e2:	3308      	adds	r3, #8
 80060e4:	f107 0210 	add.w	r2, r7, #16
 80060e8:	4413      	add	r3, r2
 80060ea:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 80060ee:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 80060f2:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 80060f6:	4413      	add	r3, r2
 80060f8:	3309      	adds	r3, #9
 80060fa:	f107 0210 	add.w	r2, r7, #16
 80060fe:	4413      	add	r3, r2
 8006100:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8006104:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006108:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800610c:	2200      	movs	r2, #0
 800610e:	701a      	strb	r2, [r3, #0]
 8006110:	2300      	movs	r3, #0
 8006112:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006116:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800611a:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800611e:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 8006122:	7812      	ldrb	r2, [r2, #0]
 8006124:	701a      	strb	r2, [r3, #0]
 8006126:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800612a:	3301      	adds	r3, #1
 800612c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006130:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006134:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8006138:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 800613c:	8812      	ldrh	r2, [r2, #0]
 800613e:	f8a3 2001 	strh.w	r2, [r3, #1]
 8006142:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006146:	3302      	adds	r3, #2
 8006148:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800614c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006150:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8006154:	f5a2 729b 	sub.w	r2, r2, #310	; 0x136
 8006158:	8812      	ldrh	r2, [r2, #0]
 800615a:	f8a3 2003 	strh.w	r2, [r3, #3]
 800615e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006162:	3302      	adds	r3, #2
 8006164:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006168:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800616c:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8006170:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8006174:	7812      	ldrb	r2, [r2, #0]
 8006176:	715a      	strb	r2, [r3, #5]
 8006178:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800617c:	3301      	adds	r3, #1
 800617e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006182:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006186:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 800618a:	719a      	strb	r2, [r3, #6]
 800618c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006190:	3301      	adds	r3, #1
 8006192:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006196:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800619a:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800619e:	71da      	strb	r2, [r3, #7]
 80061a0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80061a4:	3301      	adds	r3, #1
 80061a6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80061aa:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80061ae:	3308      	adds	r3, #8
 80061b0:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 80061b4:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 80061b8:	4618      	mov	r0, r3
 80061ba:	f001 f81d 	bl	80071f8 <Osal_MemCpy>
 80061be:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 80061c2:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80061c6:	4413      	add	r3, r2
 80061c8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80061cc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80061d0:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 80061d4:	701a      	strb	r2, [r3, #0]
 80061d6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80061da:	3301      	adds	r3, #1
 80061dc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80061e0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80061e4:	3301      	adds	r3, #1
 80061e6:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 80061ea:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 80061ee:	4618      	mov	r0, r3
 80061f0:	f001 f802 	bl	80071f8 <Osal_MemCpy>
 80061f4:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 80061f8:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80061fc:	4413      	add	r3, r2
 80061fe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006202:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006206:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 800620a:	801a      	strh	r2, [r3, #0]
 800620c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006210:	3302      	adds	r3, #2
 8006212:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006216:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800621a:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 800621e:	805a      	strh	r2, [r3, #2]
 8006220:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006224:	3302      	adds	r3, #2
 8006226:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800622a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800622e:	2218      	movs	r2, #24
 8006230:	2100      	movs	r1, #0
 8006232:	4618      	mov	r0, r3
 8006234:	f000 fff0 	bl	8007218 <Osal_MemSet>
 8006238:	233f      	movs	r3, #63	; 0x3f
 800623a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
 800623e:	2383      	movs	r3, #131	; 0x83
 8006240:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
 8006244:	f107 0310 	add.w	r3, r7, #16
 8006248:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800624c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006250:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006254:	f107 030f 	add.w	r3, r7, #15
 8006258:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800625c:	2301      	movs	r3, #1
 800625e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006262:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006266:	2100      	movs	r1, #0
 8006268:	4618      	mov	r0, r3
 800626a:	f001 fa5f 	bl	800772c <hci_send_req>
 800626e:	4603      	mov	r3, r0
 8006270:	2b00      	cmp	r3, #0
 8006272:	da01      	bge.n	8006278 <aci_gap_set_discoverable+0x1e0>
 8006274:	23ff      	movs	r3, #255	; 0xff
 8006276:	e004      	b.n	8006282 <aci_gap_set_discoverable+0x1ea>
 8006278:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800627c:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8006280:	781b      	ldrb	r3, [r3, #0]
 8006282:	4618      	mov	r0, r3
 8006284:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8006288:	46bd      	mov	sp, r7
 800628a:	bdb0      	pop	{r4, r5, r7, pc}

0800628c <aci_gap_set_io_capability>:
 800628c:	b580      	push	{r7, lr}
 800628e:	b0cc      	sub	sp, #304	; 0x130
 8006290:	af00      	add	r7, sp, #0
 8006292:	4602      	mov	r2, r0
 8006294:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006298:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800629c:	701a      	strb	r2, [r3, #0]
 800629e:	f107 0310 	add.w	r3, r7, #16
 80062a2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80062a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062aa:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80062ae:	2200      	movs	r2, #0
 80062b0:	701a      	strb	r2, [r3, #0]
 80062b2:	2300      	movs	r3, #0
 80062b4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80062b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062bc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80062c0:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 80062c4:	7812      	ldrb	r2, [r2, #0]
 80062c6:	701a      	strb	r2, [r3, #0]
 80062c8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80062cc:	3301      	adds	r3, #1
 80062ce:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80062d2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80062d6:	2218      	movs	r2, #24
 80062d8:	2100      	movs	r1, #0
 80062da:	4618      	mov	r0, r3
 80062dc:	f000 ff9c 	bl	8007218 <Osal_MemSet>
 80062e0:	233f      	movs	r3, #63	; 0x3f
 80062e2:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
 80062e6:	2385      	movs	r3, #133	; 0x85
 80062e8:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
 80062ec:	f107 0310 	add.w	r3, r7, #16
 80062f0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80062f4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80062f8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80062fc:	f107 030f 	add.w	r3, r7, #15
 8006300:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006304:	2301      	movs	r3, #1
 8006306:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800630a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800630e:	2100      	movs	r1, #0
 8006310:	4618      	mov	r0, r3
 8006312:	f001 fa0b 	bl	800772c <hci_send_req>
 8006316:	4603      	mov	r3, r0
 8006318:	2b00      	cmp	r3, #0
 800631a:	da01      	bge.n	8006320 <aci_gap_set_io_capability+0x94>
 800631c:	23ff      	movs	r3, #255	; 0xff
 800631e:	e004      	b.n	800632a <aci_gap_set_io_capability+0x9e>
 8006320:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006324:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8006328:	781b      	ldrb	r3, [r3, #0]
 800632a:	4618      	mov	r0, r3
 800632c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006330:	46bd      	mov	sp, r7
 8006332:	bd80      	pop	{r7, pc}

08006334 <aci_gap_set_authentication_requirement>:
 8006334:	b5b0      	push	{r4, r5, r7, lr}
 8006336:	b0cc      	sub	sp, #304	; 0x130
 8006338:	af00      	add	r7, sp, #0
 800633a:	4605      	mov	r5, r0
 800633c:	460c      	mov	r4, r1
 800633e:	4610      	mov	r0, r2
 8006340:	4619      	mov	r1, r3
 8006342:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006346:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800634a:	462a      	mov	r2, r5
 800634c:	701a      	strb	r2, [r3, #0]
 800634e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006352:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8006356:	4622      	mov	r2, r4
 8006358:	701a      	strb	r2, [r3, #0]
 800635a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800635e:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8006362:	4602      	mov	r2, r0
 8006364:	701a      	strb	r2, [r3, #0]
 8006366:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800636a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800636e:	460a      	mov	r2, r1
 8006370:	701a      	strb	r2, [r3, #0]
 8006372:	f107 0310 	add.w	r3, r7, #16
 8006376:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800637a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800637e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8006382:	2200      	movs	r2, #0
 8006384:	701a      	strb	r2, [r3, #0]
 8006386:	2300      	movs	r3, #0
 8006388:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800638c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006390:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006394:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8006398:	7812      	ldrb	r2, [r2, #0]
 800639a:	701a      	strb	r2, [r3, #0]
 800639c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80063a0:	3301      	adds	r3, #1
 80063a2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80063a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063aa:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80063ae:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80063b2:	7812      	ldrb	r2, [r2, #0]
 80063b4:	705a      	strb	r2, [r3, #1]
 80063b6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80063ba:	3301      	adds	r3, #1
 80063bc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80063c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063c4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80063c8:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 80063cc:	7812      	ldrb	r2, [r2, #0]
 80063ce:	709a      	strb	r2, [r3, #2]
 80063d0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80063d4:	3301      	adds	r3, #1
 80063d6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80063da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063de:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80063e2:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80063e6:	7812      	ldrb	r2, [r2, #0]
 80063e8:	70da      	strb	r2, [r3, #3]
 80063ea:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80063ee:	3301      	adds	r3, #1
 80063f0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80063f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063f8:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 80063fc:	711a      	strb	r2, [r3, #4]
 80063fe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006402:	3301      	adds	r3, #1
 8006404:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006408:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800640c:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 8006410:	715a      	strb	r2, [r3, #5]
 8006412:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006416:	3301      	adds	r3, #1
 8006418:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800641c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006420:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8006424:	719a      	strb	r2, [r3, #6]
 8006426:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800642a:	3301      	adds	r3, #1
 800642c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006430:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006434:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8006438:	f8c3 2007 	str.w	r2, [r3, #7]
 800643c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006440:	3304      	adds	r3, #4
 8006442:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006446:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800644a:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 800644e:	72da      	strb	r2, [r3, #11]
 8006450:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006454:	3301      	adds	r3, #1
 8006456:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800645a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800645e:	2218      	movs	r2, #24
 8006460:	2100      	movs	r1, #0
 8006462:	4618      	mov	r0, r3
 8006464:	f000 fed8 	bl	8007218 <Osal_MemSet>
 8006468:	233f      	movs	r3, #63	; 0x3f
 800646a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
 800646e:	2386      	movs	r3, #134	; 0x86
 8006470:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
 8006474:	f107 0310 	add.w	r3, r7, #16
 8006478:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800647c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006480:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006484:	f107 030f 	add.w	r3, r7, #15
 8006488:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800648c:	2301      	movs	r3, #1
 800648e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006492:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006496:	2100      	movs	r1, #0
 8006498:	4618      	mov	r0, r3
 800649a:	f001 f947 	bl	800772c <hci_send_req>
 800649e:	4603      	mov	r3, r0
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	da01      	bge.n	80064a8 <aci_gap_set_authentication_requirement+0x174>
 80064a4:	23ff      	movs	r3, #255	; 0xff
 80064a6:	e004      	b.n	80064b2 <aci_gap_set_authentication_requirement+0x17e>
 80064a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064ac:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80064b0:	781b      	ldrb	r3, [r3, #0]
 80064b2:	4618      	mov	r0, r3
 80064b4:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80064b8:	46bd      	mov	sp, r7
 80064ba:	bdb0      	pop	{r4, r5, r7, pc}

080064bc <aci_gap_pass_key_resp>:
 80064bc:	b580      	push	{r7, lr}
 80064be:	b0cc      	sub	sp, #304	; 0x130
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	4602      	mov	r2, r0
 80064c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064c8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064cc:	6019      	str	r1, [r3, #0]
 80064ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064d2:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80064d6:	801a      	strh	r2, [r3, #0]
 80064d8:	f107 0310 	add.w	r3, r7, #16
 80064dc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80064e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064e4:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80064e8:	2200      	movs	r2, #0
 80064ea:	701a      	strb	r2, [r3, #0]
 80064ec:	2300      	movs	r3, #0
 80064ee:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80064f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064f6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80064fa:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80064fe:	8812      	ldrh	r2, [r2, #0]
 8006500:	801a      	strh	r2, [r3, #0]
 8006502:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006506:	3302      	adds	r3, #2
 8006508:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800650c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006510:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006514:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 8006518:	6812      	ldr	r2, [r2, #0]
 800651a:	f8c3 2002 	str.w	r2, [r3, #2]
 800651e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006522:	3304      	adds	r3, #4
 8006524:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006528:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800652c:	2218      	movs	r2, #24
 800652e:	2100      	movs	r1, #0
 8006530:	4618      	mov	r0, r3
 8006532:	f000 fe71 	bl	8007218 <Osal_MemSet>
 8006536:	233f      	movs	r3, #63	; 0x3f
 8006538:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
 800653c:	2388      	movs	r3, #136	; 0x88
 800653e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
 8006542:	f107 0310 	add.w	r3, r7, #16
 8006546:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800654a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800654e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006552:	f107 030f 	add.w	r3, r7, #15
 8006556:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800655a:	2301      	movs	r3, #1
 800655c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006560:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006564:	2100      	movs	r1, #0
 8006566:	4618      	mov	r0, r3
 8006568:	f001 f8e0 	bl	800772c <hci_send_req>
 800656c:	4603      	mov	r3, r0
 800656e:	2b00      	cmp	r3, #0
 8006570:	da01      	bge.n	8006576 <aci_gap_pass_key_resp+0xba>
 8006572:	23ff      	movs	r3, #255	; 0xff
 8006574:	e004      	b.n	8006580 <aci_gap_pass_key_resp+0xc4>
 8006576:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800657a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800657e:	781b      	ldrb	r3, [r3, #0]
 8006580:	4618      	mov	r0, r3
 8006582:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006586:	46bd      	mov	sp, r7
 8006588:	bd80      	pop	{r7, pc}

0800658a <aci_gap_init>:
 800658a:	b590      	push	{r4, r7, lr}
 800658c:	b0cd      	sub	sp, #308	; 0x134
 800658e:	af00      	add	r7, sp, #0
 8006590:	4604      	mov	r4, r0
 8006592:	4608      	mov	r0, r1
 8006594:	4611      	mov	r1, r2
 8006596:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800659a:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 800659e:	6013      	str	r3, [r2, #0]
 80065a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065a4:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80065a8:	4622      	mov	r2, r4
 80065aa:	701a      	strb	r2, [r3, #0]
 80065ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065b0:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80065b4:	4602      	mov	r2, r0
 80065b6:	701a      	strb	r2, [r3, #0]
 80065b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065bc:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 80065c0:	460a      	mov	r2, r1
 80065c2:	701a      	strb	r2, [r3, #0]
 80065c4:	f107 0310 	add.w	r3, r7, #16
 80065c8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80065cc:	f107 0308 	add.w	r3, r7, #8
 80065d0:	2207      	movs	r2, #7
 80065d2:	2100      	movs	r1, #0
 80065d4:	4618      	mov	r0, r3
 80065d6:	f000 fe1f 	bl	8007218 <Osal_MemSet>
 80065da:	2300      	movs	r3, #0
 80065dc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80065e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065e4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80065e8:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 80065ec:	7812      	ldrb	r2, [r2, #0]
 80065ee:	701a      	strb	r2, [r3, #0]
 80065f0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80065f4:	3301      	adds	r3, #1
 80065f6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80065fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065fe:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006602:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8006606:	7812      	ldrb	r2, [r2, #0]
 8006608:	705a      	strb	r2, [r3, #1]
 800660a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800660e:	3301      	adds	r3, #1
 8006610:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006614:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006618:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800661c:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8006620:	7812      	ldrb	r2, [r2, #0]
 8006622:	709a      	strb	r2, [r3, #2]
 8006624:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006628:	3301      	adds	r3, #1
 800662a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800662e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006632:	2218      	movs	r2, #24
 8006634:	2100      	movs	r1, #0
 8006636:	4618      	mov	r0, r3
 8006638:	f000 fdee 	bl	8007218 <Osal_MemSet>
 800663c:	233f      	movs	r3, #63	; 0x3f
 800663e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
 8006642:	238a      	movs	r3, #138	; 0x8a
 8006644:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
 8006648:	f107 0310 	add.w	r3, r7, #16
 800664c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006650:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006654:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006658:	f107 0308 	add.w	r3, r7, #8
 800665c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006660:	2307      	movs	r3, #7
 8006662:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006666:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800666a:	2100      	movs	r1, #0
 800666c:	4618      	mov	r0, r3
 800666e:	f001 f85d 	bl	800772c <hci_send_req>
 8006672:	4603      	mov	r3, r0
 8006674:	2b00      	cmp	r3, #0
 8006676:	da01      	bge.n	800667c <aci_gap_init+0xf2>
 8006678:	23ff      	movs	r3, #255	; 0xff
 800667a:	e02e      	b.n	80066da <aci_gap_init+0x150>
 800667c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006680:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8006684:	781b      	ldrb	r3, [r3, #0]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d005      	beq.n	8006696 <aci_gap_init+0x10c>
 800668a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800668e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8006692:	781b      	ldrb	r3, [r3, #0]
 8006694:	e021      	b.n	80066da <aci_gap_init+0x150>
 8006696:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800669a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800669e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80066a2:	b29a      	uxth	r2, r3
 80066a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	801a      	strh	r2, [r3, #0]
 80066b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066b4:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80066b8:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 80066bc:	b29a      	uxth	r2, r3
 80066be:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80066c2:	801a      	strh	r2, [r3, #0]
 80066c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066c8:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80066cc:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 80066d0:	b29a      	uxth	r2, r3
 80066d2:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80066d6:	801a      	strh	r2, [r3, #0]
 80066d8:	2300      	movs	r3, #0
 80066da:	4618      	mov	r0, r3
 80066dc:	f507 779a 	add.w	r7, r7, #308	; 0x134
 80066e0:	46bd      	mov	sp, r7
 80066e2:	bd90      	pop	{r4, r7, pc}

080066e4 <aci_gap_update_adv_data>:
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b0cc      	sub	sp, #304	; 0x130
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	4602      	mov	r2, r0
 80066ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066f4:	6019      	str	r1, [r3, #0]
 80066f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066fa:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80066fe:	701a      	strb	r2, [r3, #0]
 8006700:	f107 0310 	add.w	r3, r7, #16
 8006704:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8006708:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800670c:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8006710:	2200      	movs	r2, #0
 8006712:	701a      	strb	r2, [r3, #0]
 8006714:	2300      	movs	r3, #0
 8006716:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800671a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800671e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006722:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8006726:	7812      	ldrb	r2, [r2, #0]
 8006728:	701a      	strb	r2, [r3, #0]
 800672a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800672e:	3301      	adds	r3, #1
 8006730:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006734:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006738:	1c58      	adds	r0, r3, #1
 800673a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800673e:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8006742:	781a      	ldrb	r2, [r3, #0]
 8006744:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006748:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800674c:	6819      	ldr	r1, [r3, #0]
 800674e:	f000 fd53 	bl	80071f8 <Osal_MemCpy>
 8006752:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006756:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800675a:	781b      	ldrb	r3, [r3, #0]
 800675c:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8006760:	4413      	add	r3, r2
 8006762:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006766:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800676a:	2218      	movs	r2, #24
 800676c:	2100      	movs	r1, #0
 800676e:	4618      	mov	r0, r3
 8006770:	f000 fd52 	bl	8007218 <Osal_MemSet>
 8006774:	233f      	movs	r3, #63	; 0x3f
 8006776:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
 800677a:	238e      	movs	r3, #142	; 0x8e
 800677c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
 8006780:	f107 0310 	add.w	r3, r7, #16
 8006784:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006788:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800678c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006790:	f107 030f 	add.w	r3, r7, #15
 8006794:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006798:	2301      	movs	r3, #1
 800679a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800679e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80067a2:	2100      	movs	r1, #0
 80067a4:	4618      	mov	r0, r3
 80067a6:	f000 ffc1 	bl	800772c <hci_send_req>
 80067aa:	4603      	mov	r3, r0
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	da01      	bge.n	80067b4 <aci_gap_update_adv_data+0xd0>
 80067b0:	23ff      	movs	r3, #255	; 0xff
 80067b2:	e004      	b.n	80067be <aci_gap_update_adv_data+0xda>
 80067b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067b8:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80067bc:	781b      	ldrb	r3, [r3, #0]
 80067be:	4618      	mov	r0, r3
 80067c0:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80067c4:	46bd      	mov	sp, r7
 80067c6:	bd80      	pop	{r7, pc}

080067c8 <aci_gap_configure_whitelist>:
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b088      	sub	sp, #32
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	2300      	movs	r3, #0
 80067d0:	71fb      	strb	r3, [r7, #7]
 80067d2:	f107 0308 	add.w	r3, r7, #8
 80067d6:	2218      	movs	r2, #24
 80067d8:	2100      	movs	r1, #0
 80067da:	4618      	mov	r0, r3
 80067dc:	f000 fd1c 	bl	8007218 <Osal_MemSet>
 80067e0:	233f      	movs	r3, #63	; 0x3f
 80067e2:	813b      	strh	r3, [r7, #8]
 80067e4:	2392      	movs	r3, #146	; 0x92
 80067e6:	817b      	strh	r3, [r7, #10]
 80067e8:	1dfb      	adds	r3, r7, #7
 80067ea:	61bb      	str	r3, [r7, #24]
 80067ec:	2301      	movs	r3, #1
 80067ee:	61fb      	str	r3, [r7, #28]
 80067f0:	f107 0308 	add.w	r3, r7, #8
 80067f4:	2100      	movs	r1, #0
 80067f6:	4618      	mov	r0, r3
 80067f8:	f000 ff98 	bl	800772c <hci_send_req>
 80067fc:	4603      	mov	r3, r0
 80067fe:	2b00      	cmp	r3, #0
 8006800:	da01      	bge.n	8006806 <aci_gap_configure_whitelist+0x3e>
 8006802:	23ff      	movs	r3, #255	; 0xff
 8006804:	e000      	b.n	8006808 <aci_gap_configure_whitelist+0x40>
 8006806:	79fb      	ldrb	r3, [r7, #7]
 8006808:	4618      	mov	r0, r3
 800680a:	3720      	adds	r7, #32
 800680c:	46bd      	mov	sp, r7
 800680e:	bd80      	pop	{r7, pc}

08006810 <aci_gap_numeric_comparison_value_confirm_yesno>:
 8006810:	b580      	push	{r7, lr}
 8006812:	b0cc      	sub	sp, #304	; 0x130
 8006814:	af00      	add	r7, sp, #0
 8006816:	4602      	mov	r2, r0
 8006818:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800681c:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8006820:	801a      	strh	r2, [r3, #0]
 8006822:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006826:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 800682a:	460a      	mov	r2, r1
 800682c:	701a      	strb	r2, [r3, #0]
 800682e:	f107 0310 	add.w	r3, r7, #16
 8006832:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8006836:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800683a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800683e:	2200      	movs	r2, #0
 8006840:	701a      	strb	r2, [r3, #0]
 8006842:	2300      	movs	r3, #0
 8006844:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006848:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800684c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006850:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8006854:	8812      	ldrh	r2, [r2, #0]
 8006856:	801a      	strh	r2, [r3, #0]
 8006858:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800685c:	3302      	adds	r3, #2
 800685e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006862:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006866:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800686a:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 800686e:	7812      	ldrb	r2, [r2, #0]
 8006870:	709a      	strb	r2, [r3, #2]
 8006872:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006876:	3301      	adds	r3, #1
 8006878:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800687c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006880:	2218      	movs	r2, #24
 8006882:	2100      	movs	r1, #0
 8006884:	4618      	mov	r0, r3
 8006886:	f000 fcc7 	bl	8007218 <Osal_MemSet>
 800688a:	233f      	movs	r3, #63	; 0x3f
 800688c:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
 8006890:	23a5      	movs	r3, #165	; 0xa5
 8006892:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
 8006896:	f107 0310 	add.w	r3, r7, #16
 800689a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800689e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80068a2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80068a6:	f107 030f 	add.w	r3, r7, #15
 80068aa:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80068ae:	2301      	movs	r3, #1
 80068b0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80068b4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80068b8:	2100      	movs	r1, #0
 80068ba:	4618      	mov	r0, r3
 80068bc:	f000 ff36 	bl	800772c <hci_send_req>
 80068c0:	4603      	mov	r3, r0
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	da01      	bge.n	80068ca <aci_gap_numeric_comparison_value_confirm_yesno+0xba>
 80068c6:	23ff      	movs	r3, #255	; 0xff
 80068c8:	e004      	b.n	80068d4 <aci_gap_numeric_comparison_value_confirm_yesno+0xc4>
 80068ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068ce:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80068d2:	781b      	ldrb	r3, [r3, #0]
 80068d4:	4618      	mov	r0, r3
 80068d6:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80068da:	46bd      	mov	sp, r7
 80068dc:	bd80      	pop	{r7, pc}

080068de <aci_gatt_init>:
 80068de:	b580      	push	{r7, lr}
 80068e0:	b088      	sub	sp, #32
 80068e2:	af00      	add	r7, sp, #0
 80068e4:	2300      	movs	r3, #0
 80068e6:	71fb      	strb	r3, [r7, #7]
 80068e8:	f107 0308 	add.w	r3, r7, #8
 80068ec:	2218      	movs	r2, #24
 80068ee:	2100      	movs	r1, #0
 80068f0:	4618      	mov	r0, r3
 80068f2:	f000 fc91 	bl	8007218 <Osal_MemSet>
 80068f6:	233f      	movs	r3, #63	; 0x3f
 80068f8:	813b      	strh	r3, [r7, #8]
 80068fa:	f240 1301 	movw	r3, #257	; 0x101
 80068fe:	817b      	strh	r3, [r7, #10]
 8006900:	1dfb      	adds	r3, r7, #7
 8006902:	61bb      	str	r3, [r7, #24]
 8006904:	2301      	movs	r3, #1
 8006906:	61fb      	str	r3, [r7, #28]
 8006908:	f107 0308 	add.w	r3, r7, #8
 800690c:	2100      	movs	r1, #0
 800690e:	4618      	mov	r0, r3
 8006910:	f000 ff0c 	bl	800772c <hci_send_req>
 8006914:	4603      	mov	r3, r0
 8006916:	2b00      	cmp	r3, #0
 8006918:	da01      	bge.n	800691e <aci_gatt_init+0x40>
 800691a:	23ff      	movs	r3, #255	; 0xff
 800691c:	e000      	b.n	8006920 <aci_gatt_init+0x42>
 800691e:	79fb      	ldrb	r3, [r7, #7]
 8006920:	4618      	mov	r0, r3
 8006922:	3720      	adds	r7, #32
 8006924:	46bd      	mov	sp, r7
 8006926:	bd80      	pop	{r7, pc}

08006928 <aci_gatt_add_service>:
 8006928:	b590      	push	{r4, r7, lr}
 800692a:	b0cf      	sub	sp, #316	; 0x13c
 800692c:	af00      	add	r7, sp, #0
 800692e:	4604      	mov	r4, r0
 8006930:	f507 709c 	add.w	r0, r7, #312	; 0x138
 8006934:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
 8006938:	6001      	str	r1, [r0, #0]
 800693a:	4610      	mov	r0, r2
 800693c:	4619      	mov	r1, r3
 800693e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006942:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8006946:	4622      	mov	r2, r4
 8006948:	701a      	strb	r2, [r3, #0]
 800694a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800694e:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8006952:	4602      	mov	r2, r0
 8006954:	701a      	strb	r2, [r3, #0]
 8006956:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800695a:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 800695e:	460a      	mov	r2, r1
 8006960:	701a      	strb	r2, [r3, #0]
 8006962:	f107 0310 	add.w	r3, r7, #16
 8006966:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 800696a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800696e:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8006972:	781b      	ldrb	r3, [r3, #0]
 8006974:	2b01      	cmp	r3, #1
 8006976:	d00a      	beq.n	800698e <aci_gatt_add_service+0x66>
 8006978:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800697c:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8006980:	781b      	ldrb	r3, [r3, #0]
 8006982:	2b02      	cmp	r3, #2
 8006984:	d101      	bne.n	800698a <aci_gatt_add_service+0x62>
 8006986:	2311      	movs	r3, #17
 8006988:	e002      	b.n	8006990 <aci_gatt_add_service+0x68>
 800698a:	2301      	movs	r3, #1
 800698c:	e000      	b.n	8006990 <aci_gatt_add_service+0x68>
 800698e:	2303      	movs	r3, #3
 8006990:	f107 0210 	add.w	r2, r7, #16
 8006994:	4413      	add	r3, r2
 8006996:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800699a:	f107 030c 	add.w	r3, r7, #12
 800699e:	2203      	movs	r2, #3
 80069a0:	2100      	movs	r1, #0
 80069a2:	4618      	mov	r0, r3
 80069a4:	f000 fc38 	bl	8007218 <Osal_MemSet>
 80069a8:	2300      	movs	r3, #0
 80069aa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80069ae:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80069b2:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80069b6:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 80069ba:	7812      	ldrb	r2, [r2, #0]
 80069bc:	701a      	strb	r2, [r3, #0]
 80069be:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80069c2:	3301      	adds	r3, #1
 80069c4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80069c8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80069cc:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 80069d0:	781b      	ldrb	r3, [r3, #0]
 80069d2:	2b01      	cmp	r3, #1
 80069d4:	d002      	beq.n	80069dc <aci_gatt_add_service+0xb4>
 80069d6:	2b02      	cmp	r3, #2
 80069d8:	d004      	beq.n	80069e4 <aci_gatt_add_service+0xbc>
 80069da:	e007      	b.n	80069ec <aci_gatt_add_service+0xc4>
 80069dc:	2302      	movs	r3, #2
 80069de:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 80069e2:	e005      	b.n	80069f0 <aci_gatt_add_service+0xc8>
 80069e4:	2310      	movs	r3, #16
 80069e6:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 80069ea:	e001      	b.n	80069f0 <aci_gatt_add_service+0xc8>
 80069ec:	2397      	movs	r3, #151	; 0x97
 80069ee:	e06c      	b.n	8006aca <aci_gatt_add_service+0x1a2>
 80069f0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80069f4:	1c58      	adds	r0, r3, #1
 80069f6:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 80069fa:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80069fe:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8006a02:	6819      	ldr	r1, [r3, #0]
 8006a04:	f000 fbf8 	bl	80071f8 <Osal_MemCpy>
 8006a08:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8006a0c:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8006a10:	4413      	add	r3, r2
 8006a12:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006a16:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a1a:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8006a1e:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8006a22:	7812      	ldrb	r2, [r2, #0]
 8006a24:	701a      	strb	r2, [r3, #0]
 8006a26:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006a2a:	3301      	adds	r3, #1
 8006a2c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006a30:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a34:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8006a38:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 8006a3c:	7812      	ldrb	r2, [r2, #0]
 8006a3e:	705a      	strb	r2, [r3, #1]
 8006a40:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006a44:	3301      	adds	r3, #1
 8006a46:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006a4a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006a4e:	2218      	movs	r2, #24
 8006a50:	2100      	movs	r1, #0
 8006a52:	4618      	mov	r0, r3
 8006a54:	f000 fbe0 	bl	8007218 <Osal_MemSet>
 8006a58:	233f      	movs	r3, #63	; 0x3f
 8006a5a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
 8006a5e:	f44f 7381 	mov.w	r3, #258	; 0x102
 8006a62:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
 8006a66:	f107 0310 	add.w	r3, r7, #16
 8006a6a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006a6e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006a72:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006a76:	f107 030c 	add.w	r3, r7, #12
 8006a7a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006a7e:	2303      	movs	r3, #3
 8006a80:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006a84:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006a88:	2100      	movs	r1, #0
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	f000 fe4e 	bl	800772c <hci_send_req>
 8006a90:	4603      	mov	r3, r0
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	da01      	bge.n	8006a9a <aci_gatt_add_service+0x172>
 8006a96:	23ff      	movs	r3, #255	; 0xff
 8006a98:	e017      	b.n	8006aca <aci_gatt_add_service+0x1a2>
 8006a9a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006a9e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006aa2:	781b      	ldrb	r3, [r3, #0]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d005      	beq.n	8006ab4 <aci_gatt_add_service+0x18c>
 8006aa8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006aac:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006ab0:	781b      	ldrb	r3, [r3, #0]
 8006ab2:	e00a      	b.n	8006aca <aci_gatt_add_service+0x1a2>
 8006ab4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006ab8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006abc:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8006ac0:	b29a      	uxth	r2, r3
 8006ac2:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8006ac6:	801a      	strh	r2, [r3, #0]
 8006ac8:	2300      	movs	r3, #0
 8006aca:	4618      	mov	r0, r3
 8006acc:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	bd90      	pop	{r4, r7, pc}

08006ad4 <aci_gatt_add_char>:
 8006ad4:	b590      	push	{r4, r7, lr}
 8006ad6:	b0d1      	sub	sp, #324	; 0x144
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	4604      	mov	r4, r0
 8006adc:	4608      	mov	r0, r1
 8006ade:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 8006ae2:	f5a1 719c 	sub.w	r1, r1, #312	; 0x138
 8006ae6:	600a      	str	r2, [r1, #0]
 8006ae8:	4619      	mov	r1, r3
 8006aea:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8006aee:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8006af2:	4622      	mov	r2, r4
 8006af4:	801a      	strh	r2, [r3, #0]
 8006af6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8006afa:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8006afe:	4602      	mov	r2, r0
 8006b00:	701a      	strb	r2, [r3, #0]
 8006b02:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8006b06:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 8006b0a:	460a      	mov	r2, r1
 8006b0c:	801a      	strh	r2, [r3, #0]
 8006b0e:	f107 0318 	add.w	r3, r7, #24
 8006b12:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8006b16:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8006b1a:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8006b1e:	781b      	ldrb	r3, [r3, #0]
 8006b20:	2b01      	cmp	r3, #1
 8006b22:	d00a      	beq.n	8006b3a <aci_gatt_add_char+0x66>
 8006b24:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8006b28:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8006b2c:	781b      	ldrb	r3, [r3, #0]
 8006b2e:	2b02      	cmp	r3, #2
 8006b30:	d101      	bne.n	8006b36 <aci_gatt_add_char+0x62>
 8006b32:	2313      	movs	r3, #19
 8006b34:	e002      	b.n	8006b3c <aci_gatt_add_char+0x68>
 8006b36:	2303      	movs	r3, #3
 8006b38:	e000      	b.n	8006b3c <aci_gatt_add_char+0x68>
 8006b3a:	2305      	movs	r3, #5
 8006b3c:	f107 0218 	add.w	r2, r7, #24
 8006b40:	4413      	add	r3, r2
 8006b42:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8006b46:	f107 0314 	add.w	r3, r7, #20
 8006b4a:	2203      	movs	r2, #3
 8006b4c:	2100      	movs	r1, #0
 8006b4e:	4618      	mov	r0, r3
 8006b50:	f000 fb62 	bl	8007218 <Osal_MemSet>
 8006b54:	2300      	movs	r3, #0
 8006b56:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8006b5a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8006b5e:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8006b62:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8006b66:	8812      	ldrh	r2, [r2, #0]
 8006b68:	801a      	strh	r2, [r3, #0]
 8006b6a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006b6e:	3302      	adds	r3, #2
 8006b70:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8006b74:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8006b78:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8006b7c:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 8006b80:	7812      	ldrb	r2, [r2, #0]
 8006b82:	709a      	strb	r2, [r3, #2]
 8006b84:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006b88:	3301      	adds	r3, #1
 8006b8a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8006b8e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8006b92:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8006b96:	781b      	ldrb	r3, [r3, #0]
 8006b98:	2b01      	cmp	r3, #1
 8006b9a:	d002      	beq.n	8006ba2 <aci_gatt_add_char+0xce>
 8006b9c:	2b02      	cmp	r3, #2
 8006b9e:	d004      	beq.n	8006baa <aci_gatt_add_char+0xd6>
 8006ba0:	e007      	b.n	8006bb2 <aci_gatt_add_char+0xde>
 8006ba2:	2302      	movs	r3, #2
 8006ba4:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 8006ba8:	e005      	b.n	8006bb6 <aci_gatt_add_char+0xe2>
 8006baa:	2310      	movs	r3, #16
 8006bac:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 8006bb0:	e001      	b.n	8006bb6 <aci_gatt_add_char+0xe2>
 8006bb2:	2397      	movs	r3, #151	; 0x97
 8006bb4:	e091      	b.n	8006cda <aci_gatt_add_char+0x206>
 8006bb6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8006bba:	1cd8      	adds	r0, r3, #3
 8006bbc:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 8006bc0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8006bc4:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8006bc8:	6819      	ldr	r1, [r3, #0]
 8006bca:	f000 fb15 	bl	80071f8 <Osal_MemCpy>
 8006bce:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8006bd2:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8006bd6:	4413      	add	r3, r2
 8006bd8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8006bdc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006be0:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8006be4:	f5a2 729d 	sub.w	r2, r2, #314	; 0x13a
 8006be8:	8812      	ldrh	r2, [r2, #0]
 8006bea:	801a      	strh	r2, [r3, #0]
 8006bec:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006bf0:	3302      	adds	r3, #2
 8006bf2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8006bf6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006bfa:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8006bfe:	709a      	strb	r2, [r3, #2]
 8006c00:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006c04:	3301      	adds	r3, #1
 8006c06:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8006c0a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006c0e:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8006c12:	70da      	strb	r2, [r3, #3]
 8006c14:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006c18:	3301      	adds	r3, #1
 8006c1a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8006c1e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006c22:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 8006c26:	711a      	strb	r2, [r3, #4]
 8006c28:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006c2c:	3301      	adds	r3, #1
 8006c2e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8006c32:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006c36:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 8006c3a:	715a      	strb	r2, [r3, #5]
 8006c3c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006c40:	3301      	adds	r3, #1
 8006c42:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8006c46:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006c4a:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 8006c4e:	719a      	strb	r2, [r3, #6]
 8006c50:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006c54:	3301      	adds	r3, #1
 8006c56:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8006c5a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006c5e:	2218      	movs	r2, #24
 8006c60:	2100      	movs	r1, #0
 8006c62:	4618      	mov	r0, r3
 8006c64:	f000 fad8 	bl	8007218 <Osal_MemSet>
 8006c68:	233f      	movs	r3, #63	; 0x3f
 8006c6a:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
 8006c6e:	f44f 7382 	mov.w	r3, #260	; 0x104
 8006c72:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
 8006c76:	f107 0318 	add.w	r3, r7, #24
 8006c7a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006c7e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006c82:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006c86:	f107 0314 	add.w	r3, r7, #20
 8006c8a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006c8e:	2303      	movs	r3, #3
 8006c90:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8006c94:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006c98:	2100      	movs	r1, #0
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	f000 fd46 	bl	800772c <hci_send_req>
 8006ca0:	4603      	mov	r3, r0
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	da01      	bge.n	8006caa <aci_gatt_add_char+0x1d6>
 8006ca6:	23ff      	movs	r3, #255	; 0xff
 8006ca8:	e017      	b.n	8006cda <aci_gatt_add_char+0x206>
 8006caa:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8006cae:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006cb2:	781b      	ldrb	r3, [r3, #0]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d005      	beq.n	8006cc4 <aci_gatt_add_char+0x1f0>
 8006cb8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8006cbc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006cc0:	781b      	ldrb	r3, [r3, #0]
 8006cc2:	e00a      	b.n	8006cda <aci_gatt_add_char+0x206>
 8006cc4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8006cc8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006ccc:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8006cd0:	b29a      	uxth	r2, r3
 8006cd2:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8006cd6:	801a      	strh	r2, [r3, #0]
 8006cd8:	2300      	movs	r3, #0
 8006cda:	4618      	mov	r0, r3
 8006cdc:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	bd90      	pop	{r4, r7, pc}

08006ce4 <aci_gatt_update_char_value>:
 8006ce4:	b5b0      	push	{r4, r5, r7, lr}
 8006ce6:	b0cc      	sub	sp, #304	; 0x130
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	4605      	mov	r5, r0
 8006cec:	460c      	mov	r4, r1
 8006cee:	4610      	mov	r0, r2
 8006cf0:	4619      	mov	r1, r3
 8006cf2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cf6:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8006cfa:	462a      	mov	r2, r5
 8006cfc:	801a      	strh	r2, [r3, #0]
 8006cfe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d02:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006d06:	4622      	mov	r2, r4
 8006d08:	801a      	strh	r2, [r3, #0]
 8006d0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d0e:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8006d12:	4602      	mov	r2, r0
 8006d14:	701a      	strb	r2, [r3, #0]
 8006d16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d1a:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8006d1e:	460a      	mov	r2, r1
 8006d20:	701a      	strb	r2, [r3, #0]
 8006d22:	f107 0310 	add.w	r3, r7, #16
 8006d26:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8006d2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d2e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8006d32:	2200      	movs	r2, #0
 8006d34:	701a      	strb	r2, [r3, #0]
 8006d36:	2300      	movs	r3, #0
 8006d38:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006d3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d40:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006d44:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8006d48:	8812      	ldrh	r2, [r2, #0]
 8006d4a:	801a      	strh	r2, [r3, #0]
 8006d4c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006d50:	3302      	adds	r3, #2
 8006d52:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006d56:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d5a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006d5e:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8006d62:	8812      	ldrh	r2, [r2, #0]
 8006d64:	805a      	strh	r2, [r3, #2]
 8006d66:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006d6a:	3302      	adds	r3, #2
 8006d6c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006d70:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d74:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006d78:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 8006d7c:	7812      	ldrb	r2, [r2, #0]
 8006d7e:	711a      	strb	r2, [r3, #4]
 8006d80:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006d84:	3301      	adds	r3, #1
 8006d86:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006d8a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d8e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006d92:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 8006d96:	7812      	ldrb	r2, [r2, #0]
 8006d98:	715a      	strb	r2, [r3, #5]
 8006d9a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006d9e:	3301      	adds	r3, #1
 8006da0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006da4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006da8:	1d98      	adds	r0, r3, #6
 8006daa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006dae:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8006db2:	781b      	ldrb	r3, [r3, #0]
 8006db4:	461a      	mov	r2, r3
 8006db6:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8006dba:	f000 fa1d 	bl	80071f8 <Osal_MemCpy>
 8006dbe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006dc2:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8006dc6:	781b      	ldrb	r3, [r3, #0]
 8006dc8:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8006dcc:	4413      	add	r3, r2
 8006dce:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006dd2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006dd6:	2218      	movs	r2, #24
 8006dd8:	2100      	movs	r1, #0
 8006dda:	4618      	mov	r0, r3
 8006ddc:	f000 fa1c 	bl	8007218 <Osal_MemSet>
 8006de0:	233f      	movs	r3, #63	; 0x3f
 8006de2:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
 8006de6:	f44f 7383 	mov.w	r3, #262	; 0x106
 8006dea:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
 8006dee:	f107 0310 	add.w	r3, r7, #16
 8006df2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006df6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006dfa:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006dfe:	f107 030f 	add.w	r3, r7, #15
 8006e02:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006e06:	2301      	movs	r3, #1
 8006e08:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006e0c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006e10:	2100      	movs	r1, #0
 8006e12:	4618      	mov	r0, r3
 8006e14:	f000 fc8a 	bl	800772c <hci_send_req>
 8006e18:	4603      	mov	r3, r0
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	da01      	bge.n	8006e22 <aci_gatt_update_char_value+0x13e>
 8006e1e:	23ff      	movs	r3, #255	; 0xff
 8006e20:	e004      	b.n	8006e2c <aci_gatt_update_char_value+0x148>
 8006e22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e26:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8006e2a:	781b      	ldrb	r3, [r3, #0]
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006e32:	46bd      	mov	sp, r7
 8006e34:	bdb0      	pop	{r4, r5, r7, pc}

08006e36 <aci_hal_write_config_data>:
 8006e36:	b580      	push	{r7, lr}
 8006e38:	b0cc      	sub	sp, #304	; 0x130
 8006e3a:	af00      	add	r7, sp, #0
 8006e3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e40:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e44:	601a      	str	r2, [r3, #0]
 8006e46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e4a:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8006e4e:	4602      	mov	r2, r0
 8006e50:	701a      	strb	r2, [r3, #0]
 8006e52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e56:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8006e5a:	460a      	mov	r2, r1
 8006e5c:	701a      	strb	r2, [r3, #0]
 8006e5e:	f107 0310 	add.w	r3, r7, #16
 8006e62:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8006e66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e6a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8006e6e:	2200      	movs	r2, #0
 8006e70:	701a      	strb	r2, [r3, #0]
 8006e72:	2300      	movs	r3, #0
 8006e74:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006e78:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e7c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006e80:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8006e84:	7812      	ldrb	r2, [r2, #0]
 8006e86:	701a      	strb	r2, [r3, #0]
 8006e88:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006e8c:	3301      	adds	r3, #1
 8006e8e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006e92:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e96:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006e9a:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8006e9e:	7812      	ldrb	r2, [r2, #0]
 8006ea0:	705a      	strb	r2, [r3, #1]
 8006ea2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006ea6:	3301      	adds	r3, #1
 8006ea8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006eac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006eb0:	1c98      	adds	r0, r3, #2
 8006eb2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006eb6:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8006eba:	781a      	ldrb	r2, [r3, #0]
 8006ebc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ec0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ec4:	6819      	ldr	r1, [r3, #0]
 8006ec6:	f000 f997 	bl	80071f8 <Osal_MemCpy>
 8006eca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ece:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8006ed2:	781b      	ldrb	r3, [r3, #0]
 8006ed4:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8006ed8:	4413      	add	r3, r2
 8006eda:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006ede:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006ee2:	2218      	movs	r2, #24
 8006ee4:	2100      	movs	r1, #0
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	f000 f996 	bl	8007218 <Osal_MemSet>
 8006eec:	233f      	movs	r3, #63	; 0x3f
 8006eee:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
 8006ef2:	230c      	movs	r3, #12
 8006ef4:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
 8006ef8:	f107 0310 	add.w	r3, r7, #16
 8006efc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006f00:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006f04:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006f08:	f107 030f 	add.w	r3, r7, #15
 8006f0c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006f10:	2301      	movs	r3, #1
 8006f12:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006f16:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006f1a:	2100      	movs	r1, #0
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	f000 fc05 	bl	800772c <hci_send_req>
 8006f22:	4603      	mov	r3, r0
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	da01      	bge.n	8006f2c <aci_hal_write_config_data+0xf6>
 8006f28:	23ff      	movs	r3, #255	; 0xff
 8006f2a:	e004      	b.n	8006f36 <aci_hal_write_config_data+0x100>
 8006f2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f30:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8006f34:	781b      	ldrb	r3, [r3, #0]
 8006f36:	4618      	mov	r0, r3
 8006f38:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	bd80      	pop	{r7, pc}

08006f40 <aci_hal_set_tx_power_level>:
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b0cc      	sub	sp, #304	; 0x130
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	4602      	mov	r2, r0
 8006f48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f4c:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8006f50:	701a      	strb	r2, [r3, #0]
 8006f52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f56:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8006f5a:	460a      	mov	r2, r1
 8006f5c:	701a      	strb	r2, [r3, #0]
 8006f5e:	f107 0310 	add.w	r3, r7, #16
 8006f62:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8006f66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f6a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8006f6e:	2200      	movs	r2, #0
 8006f70:	701a      	strb	r2, [r3, #0]
 8006f72:	2300      	movs	r3, #0
 8006f74:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006f78:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f7c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006f80:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8006f84:	7812      	ldrb	r2, [r2, #0]
 8006f86:	701a      	strb	r2, [r3, #0]
 8006f88:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006f8c:	3301      	adds	r3, #1
 8006f8e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006f92:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f96:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006f9a:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8006f9e:	7812      	ldrb	r2, [r2, #0]
 8006fa0:	705a      	strb	r2, [r3, #1]
 8006fa2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006fa6:	3301      	adds	r3, #1
 8006fa8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006fac:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006fb0:	2218      	movs	r2, #24
 8006fb2:	2100      	movs	r1, #0
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	f000 f92f 	bl	8007218 <Osal_MemSet>
 8006fba:	233f      	movs	r3, #63	; 0x3f
 8006fbc:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
 8006fc0:	230f      	movs	r3, #15
 8006fc2:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
 8006fc6:	f107 0310 	add.w	r3, r7, #16
 8006fca:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006fce:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006fd2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006fd6:	f107 030f 	add.w	r3, r7, #15
 8006fda:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006fde:	2301      	movs	r3, #1
 8006fe0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006fe4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006fe8:	2100      	movs	r1, #0
 8006fea:	4618      	mov	r0, r3
 8006fec:	f000 fb9e 	bl	800772c <hci_send_req>
 8006ff0:	4603      	mov	r3, r0
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	da01      	bge.n	8006ffa <aci_hal_set_tx_power_level+0xba>
 8006ff6:	23ff      	movs	r3, #255	; 0xff
 8006ff8:	e004      	b.n	8007004 <aci_hal_set_tx_power_level+0xc4>
 8006ffa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ffe:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007002:	781b      	ldrb	r3, [r3, #0]
 8007004:	4618      	mov	r0, r3
 8007006:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800700a:	46bd      	mov	sp, r7
 800700c:	bd80      	pop	{r7, pc}

0800700e <aci_hal_set_radio_activity_mask>:
 800700e:	b580      	push	{r7, lr}
 8007010:	b0cc      	sub	sp, #304	; 0x130
 8007012:	af00      	add	r7, sp, #0
 8007014:	4602      	mov	r2, r0
 8007016:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800701a:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800701e:	801a      	strh	r2, [r3, #0]
 8007020:	f107 0310 	add.w	r3, r7, #16
 8007024:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8007028:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800702c:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007030:	2200      	movs	r2, #0
 8007032:	701a      	strb	r2, [r3, #0]
 8007034:	2300      	movs	r3, #0
 8007036:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800703a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800703e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007042:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8007046:	8812      	ldrh	r2, [r2, #0]
 8007048:	801a      	strh	r2, [r3, #0]
 800704a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800704e:	3302      	adds	r3, #2
 8007050:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8007054:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007058:	2218      	movs	r2, #24
 800705a:	2100      	movs	r1, #0
 800705c:	4618      	mov	r0, r3
 800705e:	f000 f8db 	bl	8007218 <Osal_MemSet>
 8007062:	233f      	movs	r3, #63	; 0x3f
 8007064:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
 8007068:	2318      	movs	r3, #24
 800706a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
 800706e:	f107 0310 	add.w	r3, r7, #16
 8007072:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007076:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800707a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800707e:	f107 030f 	add.w	r3, r7, #15
 8007082:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8007086:	2301      	movs	r3, #1
 8007088:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800708c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007090:	2100      	movs	r1, #0
 8007092:	4618      	mov	r0, r3
 8007094:	f000 fb4a 	bl	800772c <hci_send_req>
 8007098:	4603      	mov	r3, r0
 800709a:	2b00      	cmp	r3, #0
 800709c:	da01      	bge.n	80070a2 <aci_hal_set_radio_activity_mask+0x94>
 800709e:	23ff      	movs	r3, #255	; 0xff
 80070a0:	e004      	b.n	80070ac <aci_hal_set_radio_activity_mask+0x9e>
 80070a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070a6:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80070aa:	781b      	ldrb	r3, [r3, #0]
 80070ac:	4618      	mov	r0, r3
 80070ae:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80070b2:	46bd      	mov	sp, r7
 80070b4:	bd80      	pop	{r7, pc}

080070b6 <hci_reset>:
 80070b6:	b580      	push	{r7, lr}
 80070b8:	b088      	sub	sp, #32
 80070ba:	af00      	add	r7, sp, #0
 80070bc:	2300      	movs	r3, #0
 80070be:	71fb      	strb	r3, [r7, #7]
 80070c0:	f107 0308 	add.w	r3, r7, #8
 80070c4:	2218      	movs	r2, #24
 80070c6:	2100      	movs	r1, #0
 80070c8:	4618      	mov	r0, r3
 80070ca:	f000 f8a5 	bl	8007218 <Osal_MemSet>
 80070ce:	2303      	movs	r3, #3
 80070d0:	813b      	strh	r3, [r7, #8]
 80070d2:	2303      	movs	r3, #3
 80070d4:	817b      	strh	r3, [r7, #10]
 80070d6:	1dfb      	adds	r3, r7, #7
 80070d8:	61bb      	str	r3, [r7, #24]
 80070da:	2301      	movs	r3, #1
 80070dc:	61fb      	str	r3, [r7, #28]
 80070de:	f107 0308 	add.w	r3, r7, #8
 80070e2:	2100      	movs	r1, #0
 80070e4:	4618      	mov	r0, r3
 80070e6:	f000 fb21 	bl	800772c <hci_send_req>
 80070ea:	4603      	mov	r3, r0
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	da01      	bge.n	80070f4 <hci_reset+0x3e>
 80070f0:	23ff      	movs	r3, #255	; 0xff
 80070f2:	e000      	b.n	80070f6 <hci_reset+0x40>
 80070f4:	79fb      	ldrb	r3, [r7, #7]
 80070f6:	4618      	mov	r0, r3
 80070f8:	3720      	adds	r7, #32
 80070fa:	46bd      	mov	sp, r7
 80070fc:	bd80      	pop	{r7, pc}

080070fe <hci_le_set_default_phy>:
 80070fe:	b590      	push	{r4, r7, lr}
 8007100:	b0cd      	sub	sp, #308	; 0x134
 8007102:	af00      	add	r7, sp, #0
 8007104:	4604      	mov	r4, r0
 8007106:	4608      	mov	r0, r1
 8007108:	4611      	mov	r1, r2
 800710a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800710e:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8007112:	4622      	mov	r2, r4
 8007114:	701a      	strb	r2, [r3, #0]
 8007116:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800711a:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800711e:	4602      	mov	r2, r0
 8007120:	701a      	strb	r2, [r3, #0]
 8007122:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007126:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 800712a:	460a      	mov	r2, r1
 800712c:	701a      	strb	r2, [r3, #0]
 800712e:	f107 0310 	add.w	r3, r7, #16
 8007132:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8007136:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800713a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800713e:	2200      	movs	r2, #0
 8007140:	701a      	strb	r2, [r3, #0]
 8007142:	2300      	movs	r3, #0
 8007144:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8007148:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800714c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007150:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8007154:	7812      	ldrb	r2, [r2, #0]
 8007156:	701a      	strb	r2, [r3, #0]
 8007158:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800715c:	3301      	adds	r3, #1
 800715e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8007162:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007166:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800716a:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800716e:	7812      	ldrb	r2, [r2, #0]
 8007170:	705a      	strb	r2, [r3, #1]
 8007172:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007176:	3301      	adds	r3, #1
 8007178:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800717c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007180:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007184:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8007188:	7812      	ldrb	r2, [r2, #0]
 800718a:	709a      	strb	r2, [r3, #2]
 800718c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007190:	3301      	adds	r3, #1
 8007192:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8007196:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800719a:	2218      	movs	r2, #24
 800719c:	2100      	movs	r1, #0
 800719e:	4618      	mov	r0, r3
 80071a0:	f000 f83a 	bl	8007218 <Osal_MemSet>
 80071a4:	2308      	movs	r3, #8
 80071a6:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
 80071aa:	2331      	movs	r3, #49	; 0x31
 80071ac:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
 80071b0:	f107 0310 	add.w	r3, r7, #16
 80071b4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80071b8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80071bc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80071c0:	f107 030f 	add.w	r3, r7, #15
 80071c4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80071c8:	2301      	movs	r3, #1
 80071ca:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80071ce:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80071d2:	2100      	movs	r1, #0
 80071d4:	4618      	mov	r0, r3
 80071d6:	f000 faa9 	bl	800772c <hci_send_req>
 80071da:	4603      	mov	r3, r0
 80071dc:	2b00      	cmp	r3, #0
 80071de:	da01      	bge.n	80071e4 <hci_le_set_default_phy+0xe6>
 80071e0:	23ff      	movs	r3, #255	; 0xff
 80071e2:	e004      	b.n	80071ee <hci_le_set_default_phy+0xf0>
 80071e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071e8:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80071ec:	781b      	ldrb	r3, [r3, #0]
 80071ee:	4618      	mov	r0, r3
 80071f0:	f507 779a 	add.w	r7, r7, #308	; 0x134
 80071f4:	46bd      	mov	sp, r7
 80071f6:	bd90      	pop	{r4, r7, pc}

080071f8 <Osal_MemCpy>:
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b084      	sub	sp, #16
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	60f8      	str	r0, [r7, #12]
 8007200:	60b9      	str	r1, [r7, #8]
 8007202:	607a      	str	r2, [r7, #4]
 8007204:	687a      	ldr	r2, [r7, #4]
 8007206:	68b9      	ldr	r1, [r7, #8]
 8007208:	68f8      	ldr	r0, [r7, #12]
 800720a:	f002 f8db 	bl	80093c4 <memcpy>
 800720e:	4603      	mov	r3, r0
 8007210:	4618      	mov	r0, r3
 8007212:	3710      	adds	r7, #16
 8007214:	46bd      	mov	sp, r7
 8007216:	bd80      	pop	{r7, pc}

08007218 <Osal_MemSet>:
 8007218:	b580      	push	{r7, lr}
 800721a:	b084      	sub	sp, #16
 800721c:	af00      	add	r7, sp, #0
 800721e:	60f8      	str	r0, [r7, #12]
 8007220:	60b9      	str	r1, [r7, #8]
 8007222:	607a      	str	r2, [r7, #4]
 8007224:	687a      	ldr	r2, [r7, #4]
 8007226:	68b9      	ldr	r1, [r7, #8]
 8007228:	68f8      	ldr	r0, [r7, #12]
 800722a:	f002 f8d9 	bl	80093e0 <memset>
 800722e:	4603      	mov	r3, r0
 8007230:	4618      	mov	r0, r3
 8007232:	3710      	adds	r7, #16
 8007234:	46bd      	mov	sp, r7
 8007236:	bd80      	pop	{r7, pc}

08007238 <BAS_Init>:
 8007238:	b480      	push	{r7}
 800723a:	af00      	add	r7, sp, #0
 800723c:	bf00      	nop
 800723e:	46bd      	mov	sp, r7
 8007240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007244:	4770      	bx	lr

08007246 <BLS_Init>:
 8007246:	b480      	push	{r7}
 8007248:	af00      	add	r7, sp, #0
 800724a:	bf00      	nop
 800724c:	46bd      	mov	sp, r7
 800724e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007252:	4770      	bx	lr

08007254 <CRS_STM_Init>:
 8007254:	b480      	push	{r7}
 8007256:	af00      	add	r7, sp, #0
 8007258:	bf00      	nop
 800725a:	46bd      	mov	sp, r7
 800725c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007260:	4770      	bx	lr

08007262 <DIS_Init>:
 8007262:	b480      	push	{r7}
 8007264:	af00      	add	r7, sp, #0
 8007266:	bf00      	nop
 8007268:	46bd      	mov	sp, r7
 800726a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726e:	4770      	bx	lr

08007270 <EDS_STM_Init>:
 8007270:	b480      	push	{r7}
 8007272:	af00      	add	r7, sp, #0
 8007274:	bf00      	nop
 8007276:	46bd      	mov	sp, r7
 8007278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727c:	4770      	bx	lr

0800727e <HIDS_Init>:
 800727e:	b480      	push	{r7}
 8007280:	af00      	add	r7, sp, #0
 8007282:	bf00      	nop
 8007284:	46bd      	mov	sp, r7
 8007286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728a:	4770      	bx	lr

0800728c <HRS_Init>:
 800728c:	b480      	push	{r7}
 800728e:	af00      	add	r7, sp, #0
 8007290:	bf00      	nop
 8007292:	46bd      	mov	sp, r7
 8007294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007298:	4770      	bx	lr

0800729a <HTS_Init>:
 800729a:	b480      	push	{r7}
 800729c:	af00      	add	r7, sp, #0
 800729e:	bf00      	nop
 80072a0:	46bd      	mov	sp, r7
 80072a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a6:	4770      	bx	lr

080072a8 <IAS_Init>:
 80072a8:	b480      	push	{r7}
 80072aa:	af00      	add	r7, sp, #0
 80072ac:	bf00      	nop
 80072ae:	46bd      	mov	sp, r7
 80072b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b4:	4770      	bx	lr

080072b6 <LLS_Init>:
 80072b6:	b480      	push	{r7}
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	bf00      	nop
 80072bc:	46bd      	mov	sp, r7
 80072be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c2:	4770      	bx	lr

080072c4 <TPS_Init>:
 80072c4:	b480      	push	{r7}
 80072c6:	af00      	add	r7, sp, #0
 80072c8:	bf00      	nop
 80072ca:	46bd      	mov	sp, r7
 80072cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d0:	4770      	bx	lr

080072d2 <MOTENV_STM_Init>:
 80072d2:	b480      	push	{r7}
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	bf00      	nop
 80072d8:	46bd      	mov	sp, r7
 80072da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072de:	4770      	bx	lr

080072e0 <P2PS_STM_Init>:
 80072e0:	b480      	push	{r7}
 80072e2:	af00      	add	r7, sp, #0
 80072e4:	bf00      	nop
 80072e6:	46bd      	mov	sp, r7
 80072e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ec:	4770      	bx	lr

080072ee <ZDD_STM_Init>:
 80072ee:	b480      	push	{r7}
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	bf00      	nop
 80072f4:	46bd      	mov	sp, r7
 80072f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fa:	4770      	bx	lr

080072fc <OTAS_STM_Init>:
 80072fc:	b480      	push	{r7}
 80072fe:	af00      	add	r7, sp, #0
 8007300:	bf00      	nop
 8007302:	46bd      	mov	sp, r7
 8007304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007308:	4770      	bx	lr

0800730a <MESH_Init>:
 800730a:	b480      	push	{r7}
 800730c:	af00      	add	r7, sp, #0
 800730e:	bf00      	nop
 8007310:	46bd      	mov	sp, r7
 8007312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007316:	4770      	bx	lr

08007318 <BVOPUS_STM_Init>:
 8007318:	b480      	push	{r7}
 800731a:	af00      	add	r7, sp, #0
 800731c:	bf00      	nop
 800731e:	46bd      	mov	sp, r7
 8007320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007324:	4770      	bx	lr
	...

08007328 <SVCCTL_Init>:
 8007328:	b580      	push	{r7, lr}
 800732a:	af00      	add	r7, sp, #0
 800732c:	4b04      	ldr	r3, [pc, #16]	; (8007340 <SVCCTL_Init+0x18>)
 800732e:	2200      	movs	r2, #0
 8007330:	771a      	strb	r2, [r3, #28]
 8007332:	4b04      	ldr	r3, [pc, #16]	; (8007344 <SVCCTL_Init+0x1c>)
 8007334:	2200      	movs	r2, #0
 8007336:	701a      	strb	r2, [r3, #0]
 8007338:	f000 f806 	bl	8007348 <SVCCTL_SvcInit>
 800733c:	bf00      	nop
 800733e:	bd80      	pop	{r7, pc}
 8007340:	20000910 	.word	0x20000910
 8007344:	20000930 	.word	0x20000930

08007348 <SVCCTL_SvcInit>:
 8007348:	b580      	push	{r7, lr}
 800734a:	af00      	add	r7, sp, #0
 800734c:	f7ff ff74 	bl	8007238 <BAS_Init>
 8007350:	f7ff ff79 	bl	8007246 <BLS_Init>
 8007354:	f7ff ff7e 	bl	8007254 <CRS_STM_Init>
 8007358:	f7ff ff83 	bl	8007262 <DIS_Init>
 800735c:	f7ff ff88 	bl	8007270 <EDS_STM_Init>
 8007360:	f7ff ff8d 	bl	800727e <HIDS_Init>
 8007364:	f7ff ff92 	bl	800728c <HRS_Init>
 8007368:	f7ff ff97 	bl	800729a <HTS_Init>
 800736c:	f7ff ff9c 	bl	80072a8 <IAS_Init>
 8007370:	f7ff ffa1 	bl	80072b6 <LLS_Init>
 8007374:	f7ff ffa6 	bl	80072c4 <TPS_Init>
 8007378:	f7ff ffab 	bl	80072d2 <MOTENV_STM_Init>
 800737c:	f7ff ffb0 	bl	80072e0 <P2PS_STM_Init>
 8007380:	f7ff ffb5 	bl	80072ee <ZDD_STM_Init>
 8007384:	f7ff ffba 	bl	80072fc <OTAS_STM_Init>
 8007388:	f7ff ffc6 	bl	8007318 <BVOPUS_STM_Init>
 800738c:	f7ff ffbd 	bl	800730a <MESH_Init>
 8007390:	f001 faaa 	bl	80088e8 <SVCCTL_InitCustomSvc>
 8007394:	bf00      	nop
 8007396:	bd80      	pop	{r7, pc}

08007398 <SVCCTL_RegisterSvcHandler>:
 8007398:	b480      	push	{r7}
 800739a:	b083      	sub	sp, #12
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
 80073a0:	4b09      	ldr	r3, [pc, #36]	; (80073c8 <SVCCTL_RegisterSvcHandler+0x30>)
 80073a2:	7f1b      	ldrb	r3, [r3, #28]
 80073a4:	4619      	mov	r1, r3
 80073a6:	4a08      	ldr	r2, [pc, #32]	; (80073c8 <SVCCTL_RegisterSvcHandler+0x30>)
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80073ae:	4b06      	ldr	r3, [pc, #24]	; (80073c8 <SVCCTL_RegisterSvcHandler+0x30>)
 80073b0:	7f1b      	ldrb	r3, [r3, #28]
 80073b2:	3301      	adds	r3, #1
 80073b4:	b2da      	uxtb	r2, r3
 80073b6:	4b04      	ldr	r3, [pc, #16]	; (80073c8 <SVCCTL_RegisterSvcHandler+0x30>)
 80073b8:	771a      	strb	r2, [r3, #28]
 80073ba:	bf00      	nop
 80073bc:	370c      	adds	r7, #12
 80073be:	46bd      	mov	sp, r7
 80073c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c4:	4770      	bx	lr
 80073c6:	bf00      	nop
 80073c8:	20000910 	.word	0x20000910

080073cc <SVCCTL_UserEvtRx>:
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b086      	sub	sp, #24
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	3301      	adds	r3, #1
 80073d8:	613b      	str	r3, [r7, #16]
 80073da:	2300      	movs	r3, #0
 80073dc:	75fb      	strb	r3, [r7, #23]
 80073de:	693b      	ldr	r3, [r7, #16]
 80073e0:	781b      	ldrb	r3, [r3, #0]
 80073e2:	2bff      	cmp	r3, #255	; 0xff
 80073e4:	d125      	bne.n	8007432 <SVCCTL_UserEvtRx+0x66>
 80073e6:	693b      	ldr	r3, [r7, #16]
 80073e8:	3302      	adds	r3, #2
 80073ea:	60fb      	str	r3, [r7, #12]
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	881b      	ldrh	r3, [r3, #0]
 80073f0:	b29b      	uxth	r3, r3
 80073f2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80073f6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80073fa:	d118      	bne.n	800742e <SVCCTL_UserEvtRx+0x62>
 80073fc:	2300      	movs	r3, #0
 80073fe:	757b      	strb	r3, [r7, #21]
 8007400:	e00d      	b.n	800741e <SVCCTL_UserEvtRx+0x52>
 8007402:	7d7b      	ldrb	r3, [r7, #21]
 8007404:	4a1a      	ldr	r2, [pc, #104]	; (8007470 <SVCCTL_UserEvtRx+0xa4>)
 8007406:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800740a:	6878      	ldr	r0, [r7, #4]
 800740c:	4798      	blx	r3
 800740e:	4603      	mov	r3, r0
 8007410:	75fb      	strb	r3, [r7, #23]
 8007412:	7dfb      	ldrb	r3, [r7, #23]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d108      	bne.n	800742a <SVCCTL_UserEvtRx+0x5e>
 8007418:	7d7b      	ldrb	r3, [r7, #21]
 800741a:	3301      	adds	r3, #1
 800741c:	757b      	strb	r3, [r7, #21]
 800741e:	4b14      	ldr	r3, [pc, #80]	; (8007470 <SVCCTL_UserEvtRx+0xa4>)
 8007420:	7f1b      	ldrb	r3, [r3, #28]
 8007422:	7d7a      	ldrb	r2, [r7, #21]
 8007424:	429a      	cmp	r2, r3
 8007426:	d3ec      	bcc.n	8007402 <SVCCTL_UserEvtRx+0x36>
 8007428:	e002      	b.n	8007430 <SVCCTL_UserEvtRx+0x64>
 800742a:	bf00      	nop
 800742c:	e000      	b.n	8007430 <SVCCTL_UserEvtRx+0x64>
 800742e:	bf00      	nop
 8007430:	e000      	b.n	8007434 <SVCCTL_UserEvtRx+0x68>
 8007432:	bf00      	nop
 8007434:	7dfb      	ldrb	r3, [r7, #23]
 8007436:	2b02      	cmp	r3, #2
 8007438:	d00f      	beq.n	800745a <SVCCTL_UserEvtRx+0x8e>
 800743a:	2b02      	cmp	r3, #2
 800743c:	dc10      	bgt.n	8007460 <SVCCTL_UserEvtRx+0x94>
 800743e:	2b00      	cmp	r3, #0
 8007440:	d002      	beq.n	8007448 <SVCCTL_UserEvtRx+0x7c>
 8007442:	2b01      	cmp	r3, #1
 8007444:	d006      	beq.n	8007454 <SVCCTL_UserEvtRx+0x88>
 8007446:	e00b      	b.n	8007460 <SVCCTL_UserEvtRx+0x94>
 8007448:	6878      	ldr	r0, [r7, #4]
 800744a:	f000 ff7b 	bl	8008344 <SVCCTL_App_Notification>
 800744e:	4603      	mov	r3, r0
 8007450:	75bb      	strb	r3, [r7, #22]
 8007452:	e008      	b.n	8007466 <SVCCTL_UserEvtRx+0x9a>
 8007454:	2301      	movs	r3, #1
 8007456:	75bb      	strb	r3, [r7, #22]
 8007458:	e005      	b.n	8007466 <SVCCTL_UserEvtRx+0x9a>
 800745a:	2300      	movs	r3, #0
 800745c:	75bb      	strb	r3, [r7, #22]
 800745e:	e002      	b.n	8007466 <SVCCTL_UserEvtRx+0x9a>
 8007460:	2301      	movs	r3, #1
 8007462:	75bb      	strb	r3, [r7, #22]
 8007464:	bf00      	nop
 8007466:	7dbb      	ldrb	r3, [r7, #22]
 8007468:	4618      	mov	r0, r3
 800746a:	3718      	adds	r7, #24
 800746c:	46bd      	mov	sp, r7
 800746e:	bd80      	pop	{r7, pc}
 8007470:	20000910 	.word	0x20000910

08007474 <SHCI_C2_BLE_Init>:
 8007474:	b580      	push	{r7, lr}
 8007476:	b088      	sub	sp, #32
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
 800747c:	f107 030c 	add.w	r3, r7, #12
 8007480:	61fb      	str	r3, [r7, #28]
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	f103 020c 	add.w	r2, r3, #12
 8007488:	69fb      	ldr	r3, [r7, #28]
 800748a:	212e      	movs	r1, #46	; 0x2e
 800748c:	f64f 4066 	movw	r0, #64614	; 0xfc66
 8007490:	f000 fae2 	bl	8007a58 <shci_send>
 8007494:	69fb      	ldr	r3, [r7, #28]
 8007496:	330b      	adds	r3, #11
 8007498:	78db      	ldrb	r3, [r3, #3]
 800749a:	4618      	mov	r0, r3
 800749c:	3720      	adds	r7, #32
 800749e:	46bd      	mov	sp, r7
 80074a0:	bd80      	pop	{r7, pc}

080074a2 <SHCI_C2_DEBUG_Init>:
 80074a2:	b580      	push	{r7, lr}
 80074a4:	b088      	sub	sp, #32
 80074a6:	af00      	add	r7, sp, #0
 80074a8:	6078      	str	r0, [r7, #4]
 80074aa:	f107 030c 	add.w	r3, r7, #12
 80074ae:	61fb      	str	r3, [r7, #28]
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	f103 020c 	add.w	r2, r3, #12
 80074b6:	69fb      	ldr	r3, [r7, #28]
 80074b8:	210f      	movs	r1, #15
 80074ba:	f64f 4068 	movw	r0, #64616	; 0xfc68
 80074be:	f000 facb 	bl	8007a58 <shci_send>
 80074c2:	69fb      	ldr	r3, [r7, #28]
 80074c4:	330b      	adds	r3, #11
 80074c6:	78db      	ldrb	r3, [r3, #3]
 80074c8:	4618      	mov	r0, r3
 80074ca:	3720      	adds	r7, #32
 80074cc:	46bd      	mov	sp, r7
 80074ce:	bd80      	pop	{r7, pc}

080074d0 <SHCI_C2_Config>:
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b088      	sub	sp, #32
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
 80074d8:	f107 030c 	add.w	r3, r7, #12
 80074dc:	61fb      	str	r3, [r7, #28]
 80074de:	69fb      	ldr	r3, [r7, #28]
 80074e0:	687a      	ldr	r2, [r7, #4]
 80074e2:	2110      	movs	r1, #16
 80074e4:	f64f 4075 	movw	r0, #64629	; 0xfc75
 80074e8:	f000 fab6 	bl	8007a58 <shci_send>
 80074ec:	69fb      	ldr	r3, [r7, #28]
 80074ee:	330b      	adds	r3, #11
 80074f0:	78db      	ldrb	r3, [r3, #3]
 80074f2:	4618      	mov	r0, r3
 80074f4:	3720      	adds	r7, #32
 80074f6:	46bd      	mov	sp, r7
 80074f8:	bd80      	pop	{r7, pc}
	...

080074fc <SHCI_GetWirelessFwInfo>:
 80074fc:	b480      	push	{r7}
 80074fe:	b08b      	sub	sp, #44	; 0x2c
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
 8007504:	2300      	movs	r3, #0
 8007506:	613b      	str	r3, [r7, #16]
 8007508:	2300      	movs	r3, #0
 800750a:	60fb      	str	r3, [r7, #12]
 800750c:	2300      	movs	r3, #0
 800750e:	627b      	str	r3, [r7, #36]	; 0x24
 8007510:	2300      	movs	r3, #0
 8007512:	623b      	str	r3, [r7, #32]
 8007514:	2300      	movs	r3, #0
 8007516:	61fb      	str	r3, [r7, #28]
 8007518:	2300      	movs	r3, #0
 800751a:	60bb      	str	r3, [r7, #8]
 800751c:	2300      	movs	r3, #0
 800751e:	61bb      	str	r3, [r7, #24]
 8007520:	2300      	movs	r3, #0
 8007522:	617b      	str	r3, [r7, #20]
 8007524:	4b4a      	ldr	r3, [pc, #296]	; (8007650 <SHCI_GetWirelessFwInfo+0x154>)
 8007526:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007528:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800752c:	613b      	str	r3, [r7, #16]
 800752e:	693b      	ldr	r3, [r7, #16]
 8007530:	009b      	lsls	r3, r3, #2
 8007532:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8007536:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	60bb      	str	r3, [r7, #8]
 800753e:	68bb      	ldr	r3, [r7, #8]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	4a44      	ldr	r2, [pc, #272]	; (8007654 <SHCI_GetWirelessFwInfo+0x158>)
 8007544:	4293      	cmp	r3, r2
 8007546:	d10f      	bne.n	8007568 <SHCI_GetWirelessFwInfo+0x6c>
 8007548:	68bb      	ldr	r3, [r7, #8]
 800754a:	695b      	ldr	r3, [r3, #20]
 800754c:	627b      	str	r3, [r7, #36]	; 0x24
 800754e:	68bb      	ldr	r3, [r7, #8]
 8007550:	699b      	ldr	r3, [r3, #24]
 8007552:	623b      	str	r3, [r7, #32]
 8007554:	68bb      	ldr	r3, [r7, #8]
 8007556:	69db      	ldr	r3, [r3, #28]
 8007558:	61fb      	str	r3, [r7, #28]
 800755a:	68bb      	ldr	r3, [r7, #8]
 800755c:	68db      	ldr	r3, [r3, #12]
 800755e:	61bb      	str	r3, [r7, #24]
 8007560:	68bb      	ldr	r3, [r7, #8]
 8007562:	691b      	ldr	r3, [r3, #16]
 8007564:	617b      	str	r3, [r7, #20]
 8007566:	e01a      	b.n	800759e <SHCI_GetWirelessFwInfo+0xa2>
 8007568:	693b      	ldr	r3, [r7, #16]
 800756a:	009b      	lsls	r3, r3, #2
 800756c:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8007570:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8007574:	60fb      	str	r3, [r7, #12]
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	691b      	ldr	r3, [r3, #16]
 800757c:	627b      	str	r3, [r7, #36]	; 0x24
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	695b      	ldr	r3, [r3, #20]
 8007584:	623b      	str	r3, [r7, #32]
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	699b      	ldr	r3, [r3, #24]
 800758c:	61fb      	str	r3, [r7, #28]
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	685b      	ldr	r3, [r3, #4]
 8007594:	61bb      	str	r3, [r7, #24]
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	689b      	ldr	r3, [r3, #8]
 800759c:	617b      	str	r3, [r7, #20]
 800759e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075a0:	0e1b      	lsrs	r3, r3, #24
 80075a2:	b2da      	uxtb	r2, r3
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	701a      	strb	r2, [r3, #0]
 80075a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075aa:	0c1b      	lsrs	r3, r3, #16
 80075ac:	b2da      	uxtb	r2, r3
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	705a      	strb	r2, [r3, #1]
 80075b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075b4:	0a1b      	lsrs	r3, r3, #8
 80075b6:	b2da      	uxtb	r2, r3
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	709a      	strb	r2, [r3, #2]
 80075bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075be:	091b      	lsrs	r3, r3, #4
 80075c0:	b2db      	uxtb	r3, r3
 80075c2:	f003 030f 	and.w	r3, r3, #15
 80075c6:	b2da      	uxtb	r2, r3
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	70da      	strb	r2, [r3, #3]
 80075cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075ce:	b2db      	uxtb	r3, r3
 80075d0:	f003 030f 	and.w	r3, r3, #15
 80075d4:	b2da      	uxtb	r2, r3
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	711a      	strb	r2, [r3, #4]
 80075da:	6a3b      	ldr	r3, [r7, #32]
 80075dc:	0e1b      	lsrs	r3, r3, #24
 80075de:	b2da      	uxtb	r2, r3
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	715a      	strb	r2, [r3, #5]
 80075e4:	6a3b      	ldr	r3, [r7, #32]
 80075e6:	0c1b      	lsrs	r3, r3, #16
 80075e8:	b2da      	uxtb	r2, r3
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	719a      	strb	r2, [r3, #6]
 80075ee:	6a3b      	ldr	r3, [r7, #32]
 80075f0:	0a1b      	lsrs	r3, r3, #8
 80075f2:	b2da      	uxtb	r2, r3
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	71da      	strb	r2, [r3, #7]
 80075f8:	6a3b      	ldr	r3, [r7, #32]
 80075fa:	b2da      	uxtb	r2, r3
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	721a      	strb	r2, [r3, #8]
 8007600:	69fb      	ldr	r3, [r7, #28]
 8007602:	b2da      	uxtb	r2, r3
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	725a      	strb	r2, [r3, #9]
 8007608:	69bb      	ldr	r3, [r7, #24]
 800760a:	0e1b      	lsrs	r3, r3, #24
 800760c:	b2da      	uxtb	r2, r3
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	729a      	strb	r2, [r3, #10]
 8007612:	69bb      	ldr	r3, [r7, #24]
 8007614:	0c1b      	lsrs	r3, r3, #16
 8007616:	b2da      	uxtb	r2, r3
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	72da      	strb	r2, [r3, #11]
 800761c:	69bb      	ldr	r3, [r7, #24]
 800761e:	0a1b      	lsrs	r3, r3, #8
 8007620:	b2da      	uxtb	r2, r3
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	731a      	strb	r2, [r3, #12]
 8007626:	697b      	ldr	r3, [r7, #20]
 8007628:	0e1b      	lsrs	r3, r3, #24
 800762a:	b2da      	uxtb	r2, r3
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	735a      	strb	r2, [r3, #13]
 8007630:	697b      	ldr	r3, [r7, #20]
 8007632:	0c1b      	lsrs	r3, r3, #16
 8007634:	b2da      	uxtb	r2, r3
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	739a      	strb	r2, [r3, #14]
 800763a:	697b      	ldr	r3, [r7, #20]
 800763c:	b2da      	uxtb	r2, r3
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	73da      	strb	r2, [r3, #15]
 8007642:	2300      	movs	r3, #0
 8007644:	4618      	mov	r0, r3
 8007646:	372c      	adds	r7, #44	; 0x2c
 8007648:	46bd      	mov	sp, r7
 800764a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764e:	4770      	bx	lr
 8007650:	58004000 	.word	0x58004000
 8007654:	a94656b9 	.word	0xa94656b9

08007658 <hci_init>:
 8007658:	b580      	push	{r7, lr}
 800765a:	b082      	sub	sp, #8
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
 8007660:	6039      	str	r1, [r7, #0]
 8007662:	683b      	ldr	r3, [r7, #0]
 8007664:	685b      	ldr	r3, [r3, #4]
 8007666:	4a08      	ldr	r2, [pc, #32]	; (8007688 <hci_init+0x30>)
 8007668:	6013      	str	r3, [r2, #0]
 800766a:	4a08      	ldr	r2, [pc, #32]	; (800768c <hci_init+0x34>)
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	61d3      	str	r3, [r2, #28]
 8007670:	4806      	ldr	r0, [pc, #24]	; (800768c <hci_init+0x34>)
 8007672:	f000 f973 	bl	800795c <hci_register_io_bus>
 8007676:	683b      	ldr	r3, [r7, #0]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	4618      	mov	r0, r3
 800767c:	f000 f8d4 	bl	8007828 <TlInit>
 8007680:	bf00      	nop
 8007682:	3708      	adds	r7, #8
 8007684:	46bd      	mov	sp, r7
 8007686:	bd80      	pop	{r7, pc}
 8007688:	20000b90 	.word	0x20000b90
 800768c:	20000b68 	.word	0x20000b68

08007690 <hci_user_evt_proc>:
 8007690:	b580      	push	{r7, lr}
 8007692:	b084      	sub	sp, #16
 8007694:	af00      	add	r7, sp, #0
 8007696:	4822      	ldr	r0, [pc, #136]	; (8007720 <hci_user_evt_proc+0x90>)
 8007698:	f000 fd28 	bl	80080ec <LST_is_empty>
 800769c:	4603      	mov	r3, r0
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d12b      	bne.n	80076fa <hci_user_evt_proc+0x6a>
 80076a2:	4b20      	ldr	r3, [pc, #128]	; (8007724 <hci_user_evt_proc+0x94>)
 80076a4:	781b      	ldrb	r3, [r3, #0]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d027      	beq.n	80076fa <hci_user_evt_proc+0x6a>
 80076aa:	f107 030c 	add.w	r3, r7, #12
 80076ae:	4619      	mov	r1, r3
 80076b0:	481b      	ldr	r0, [pc, #108]	; (8007720 <hci_user_evt_proc+0x90>)
 80076b2:	f000 fdaa 	bl	800820a <LST_remove_head>
 80076b6:	4b1c      	ldr	r3, [pc, #112]	; (8007728 <hci_user_evt_proc+0x98>)
 80076b8:	69db      	ldr	r3, [r3, #28]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d00c      	beq.n	80076d8 <hci_user_evt_proc+0x48>
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	60bb      	str	r3, [r7, #8]
 80076c2:	2301      	movs	r3, #1
 80076c4:	713b      	strb	r3, [r7, #4]
 80076c6:	4b18      	ldr	r3, [pc, #96]	; (8007728 <hci_user_evt_proc+0x98>)
 80076c8:	69db      	ldr	r3, [r3, #28]
 80076ca:	1d3a      	adds	r2, r7, #4
 80076cc:	4610      	mov	r0, r2
 80076ce:	4798      	blx	r3
 80076d0:	793a      	ldrb	r2, [r7, #4]
 80076d2:	4b14      	ldr	r3, [pc, #80]	; (8007724 <hci_user_evt_proc+0x94>)
 80076d4:	701a      	strb	r2, [r3, #0]
 80076d6:	e002      	b.n	80076de <hci_user_evt_proc+0x4e>
 80076d8:	4b12      	ldr	r3, [pc, #72]	; (8007724 <hci_user_evt_proc+0x94>)
 80076da:	2201      	movs	r2, #1
 80076dc:	701a      	strb	r2, [r3, #0]
 80076de:	4b11      	ldr	r3, [pc, #68]	; (8007724 <hci_user_evt_proc+0x94>)
 80076e0:	781b      	ldrb	r3, [r3, #0]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d004      	beq.n	80076f0 <hci_user_evt_proc+0x60>
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	4618      	mov	r0, r3
 80076ea:	f000 fc03 	bl	8007ef4 <TL_MM_EvtDone>
 80076ee:	e004      	b.n	80076fa <hci_user_evt_proc+0x6a>
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	4619      	mov	r1, r3
 80076f4:	480a      	ldr	r0, [pc, #40]	; (8007720 <hci_user_evt_proc+0x90>)
 80076f6:	f000 fd1b 	bl	8008130 <LST_insert_head>
 80076fa:	4809      	ldr	r0, [pc, #36]	; (8007720 <hci_user_evt_proc+0x90>)
 80076fc:	f000 fcf6 	bl	80080ec <LST_is_empty>
 8007700:	4603      	mov	r3, r0
 8007702:	2b00      	cmp	r3, #0
 8007704:	d107      	bne.n	8007716 <hci_user_evt_proc+0x86>
 8007706:	4b07      	ldr	r3, [pc, #28]	; (8007724 <hci_user_evt_proc+0x94>)
 8007708:	781b      	ldrb	r3, [r3, #0]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d003      	beq.n	8007716 <hci_user_evt_proc+0x86>
 800770e:	4804      	ldr	r0, [pc, #16]	; (8007720 <hci_user_evt_proc+0x90>)
 8007710:	f001 f830 	bl	8008774 <hci_notify_asynch_evt>
 8007714:	bf00      	nop
 8007716:	bf00      	nop
 8007718:	3710      	adds	r7, #16
 800771a:	46bd      	mov	sp, r7
 800771c:	bd80      	pop	{r7, pc}
 800771e:	bf00      	nop
 8007720:	20000938 	.word	0x20000938
 8007724:	20000944 	.word	0x20000944
 8007728:	20000b68 	.word	0x20000b68

0800772c <hci_send_req>:
 800772c:	b580      	push	{r7, lr}
 800772e:	b088      	sub	sp, #32
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
 8007734:	460b      	mov	r3, r1
 8007736:	70fb      	strb	r3, [r7, #3]
 8007738:	2000      	movs	r0, #0
 800773a:	f000 f8cb 	bl	80078d4 <NotifyCmdStatus>
 800773e:	2300      	movs	r3, #0
 8007740:	77fb      	strb	r3, [r7, #31]
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	885b      	ldrh	r3, [r3, #2]
 8007746:	b21b      	sxth	r3, r3
 8007748:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800774c:	b21a      	sxth	r2, r3
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	881b      	ldrh	r3, [r3, #0]
 8007752:	029b      	lsls	r3, r3, #10
 8007754:	b21b      	sxth	r3, r3
 8007756:	4313      	orrs	r3, r2
 8007758:	b21b      	sxth	r3, r3
 800775a:	83bb      	strh	r3, [r7, #28]
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	68db      	ldr	r3, [r3, #12]
 8007760:	b2d9      	uxtb	r1, r3
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	689a      	ldr	r2, [r3, #8]
 8007766:	8bbb      	ldrh	r3, [r7, #28]
 8007768:	4618      	mov	r0, r3
 800776a:	f000 f88d 	bl	8007888 <SendCmd>
 800776e:	e04e      	b.n	800780e <hci_send_req+0xe2>
 8007770:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8007774:	f001 f815 	bl	80087a2 <hci_cmd_resp_wait>
 8007778:	e043      	b.n	8007802 <hci_send_req+0xd6>
 800777a:	f107 030c 	add.w	r3, r7, #12
 800777e:	4619      	mov	r1, r3
 8007780:	4828      	ldr	r0, [pc, #160]	; (8007824 <hci_send_req+0xf8>)
 8007782:	f000 fd42 	bl	800820a <LST_remove_head>
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	7a5b      	ldrb	r3, [r3, #9]
 800778a:	2b0f      	cmp	r3, #15
 800778c:	d114      	bne.n	80077b8 <hci_send_req+0x8c>
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	330b      	adds	r3, #11
 8007792:	613b      	str	r3, [r7, #16]
 8007794:	693b      	ldr	r3, [r7, #16]
 8007796:	885b      	ldrh	r3, [r3, #2]
 8007798:	b29b      	uxth	r3, r3
 800779a:	8bba      	ldrh	r2, [r7, #28]
 800779c:	429a      	cmp	r2, r3
 800779e:	d104      	bne.n	80077aa <hci_send_req+0x7e>
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	691b      	ldr	r3, [r3, #16]
 80077a4:	693a      	ldr	r2, [r7, #16]
 80077a6:	7812      	ldrb	r2, [r2, #0]
 80077a8:	701a      	strb	r2, [r3, #0]
 80077aa:	693b      	ldr	r3, [r7, #16]
 80077ac:	785b      	ldrb	r3, [r3, #1]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d027      	beq.n	8007802 <hci_send_req+0xd6>
 80077b2:	2301      	movs	r3, #1
 80077b4:	77fb      	strb	r3, [r7, #31]
 80077b6:	e024      	b.n	8007802 <hci_send_req+0xd6>
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	330b      	adds	r3, #11
 80077bc:	61bb      	str	r3, [r7, #24]
 80077be:	69bb      	ldr	r3, [r7, #24]
 80077c0:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80077c4:	b29b      	uxth	r3, r3
 80077c6:	8bba      	ldrh	r2, [r7, #28]
 80077c8:	429a      	cmp	r2, r3
 80077ca:	d114      	bne.n	80077f6 <hci_send_req+0xca>
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	7a9b      	ldrb	r3, [r3, #10]
 80077d0:	3b03      	subs	r3, #3
 80077d2:	75fb      	strb	r3, [r7, #23]
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	695a      	ldr	r2, [r3, #20]
 80077d8:	7dfb      	ldrb	r3, [r7, #23]
 80077da:	429a      	cmp	r2, r3
 80077dc:	bfa8      	it	ge
 80077de:	461a      	movge	r2, r3
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	615a      	str	r2, [r3, #20]
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	6918      	ldr	r0, [r3, #16]
 80077e8:	69bb      	ldr	r3, [r7, #24]
 80077ea:	1cd9      	adds	r1, r3, #3
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	695b      	ldr	r3, [r3, #20]
 80077f0:	461a      	mov	r2, r3
 80077f2:	f001 fde7 	bl	80093c4 <memcpy>
 80077f6:	69bb      	ldr	r3, [r7, #24]
 80077f8:	781b      	ldrb	r3, [r3, #0]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d001      	beq.n	8007802 <hci_send_req+0xd6>
 80077fe:	2301      	movs	r3, #1
 8007800:	77fb      	strb	r3, [r7, #31]
 8007802:	4808      	ldr	r0, [pc, #32]	; (8007824 <hci_send_req+0xf8>)
 8007804:	f000 fc72 	bl	80080ec <LST_is_empty>
 8007808:	4603      	mov	r3, r0
 800780a:	2b00      	cmp	r3, #0
 800780c:	d0b5      	beq.n	800777a <hci_send_req+0x4e>
 800780e:	7ffb      	ldrb	r3, [r7, #31]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d0ad      	beq.n	8007770 <hci_send_req+0x44>
 8007814:	2001      	movs	r0, #1
 8007816:	f000 f85d 	bl	80078d4 <NotifyCmdStatus>
 800781a:	2300      	movs	r3, #0
 800781c:	4618      	mov	r0, r3
 800781e:	3720      	adds	r7, #32
 8007820:	46bd      	mov	sp, r7
 8007822:	bd80      	pop	{r7, pc}
 8007824:	20000b88 	.word	0x20000b88

08007828 <TlInit>:
 8007828:	b580      	push	{r7, lr}
 800782a:	b086      	sub	sp, #24
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
 8007830:	480f      	ldr	r0, [pc, #60]	; (8007870 <TlInit+0x48>)
 8007832:	f000 fc4b 	bl	80080cc <LST_init_head>
 8007836:	4a0f      	ldr	r2, [pc, #60]	; (8007874 <TlInit+0x4c>)
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	6013      	str	r3, [r2, #0]
 800783c:	480e      	ldr	r0, [pc, #56]	; (8007878 <TlInit+0x50>)
 800783e:	f000 fc45 	bl	80080cc <LST_init_head>
 8007842:	4b0e      	ldr	r3, [pc, #56]	; (800787c <TlInit+0x54>)
 8007844:	2201      	movs	r2, #1
 8007846:	701a      	strb	r2, [r3, #0]
 8007848:	4b0d      	ldr	r3, [pc, #52]	; (8007880 <TlInit+0x58>)
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d00a      	beq.n	8007866 <TlInit+0x3e>
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	613b      	str	r3, [r7, #16]
 8007854:	4b0b      	ldr	r3, [pc, #44]	; (8007884 <TlInit+0x5c>)
 8007856:	60bb      	str	r3, [r7, #8]
 8007858:	4b09      	ldr	r3, [pc, #36]	; (8007880 <TlInit+0x58>)
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	f107 0208 	add.w	r2, r7, #8
 8007860:	4610      	mov	r0, r2
 8007862:	4798      	blx	r3
 8007864:	bf00      	nop
 8007866:	bf00      	nop
 8007868:	3718      	adds	r7, #24
 800786a:	46bd      	mov	sp, r7
 800786c:	bd80      	pop	{r7, pc}
 800786e:	bf00      	nop
 8007870:	20000b88 	.word	0x20000b88
 8007874:	20000940 	.word	0x20000940
 8007878:	20000938 	.word	0x20000938
 800787c:	20000944 	.word	0x20000944
 8007880:	20000b68 	.word	0x20000b68
 8007884:	08007915 	.word	0x08007915

08007888 <SendCmd>:
 8007888:	b580      	push	{r7, lr}
 800788a:	b082      	sub	sp, #8
 800788c:	af00      	add	r7, sp, #0
 800788e:	4603      	mov	r3, r0
 8007890:	603a      	str	r2, [r7, #0]
 8007892:	80fb      	strh	r3, [r7, #6]
 8007894:	460b      	mov	r3, r1
 8007896:	717b      	strb	r3, [r7, #5]
 8007898:	4b0c      	ldr	r3, [pc, #48]	; (80078cc <SendCmd+0x44>)
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	88fa      	ldrh	r2, [r7, #6]
 800789e:	f8a3 2009 	strh.w	r2, [r3, #9]
 80078a2:	4b0a      	ldr	r3, [pc, #40]	; (80078cc <SendCmd+0x44>)
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	797a      	ldrb	r2, [r7, #5]
 80078a8:	72da      	strb	r2, [r3, #11]
 80078aa:	4b08      	ldr	r3, [pc, #32]	; (80078cc <SendCmd+0x44>)
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	330c      	adds	r3, #12
 80078b0:	797a      	ldrb	r2, [r7, #5]
 80078b2:	6839      	ldr	r1, [r7, #0]
 80078b4:	4618      	mov	r0, r3
 80078b6:	f001 fd85 	bl	80093c4 <memcpy>
 80078ba:	4b05      	ldr	r3, [pc, #20]	; (80078d0 <SendCmd+0x48>)
 80078bc:	691b      	ldr	r3, [r3, #16]
 80078be:	2100      	movs	r1, #0
 80078c0:	2000      	movs	r0, #0
 80078c2:	4798      	blx	r3
 80078c4:	bf00      	nop
 80078c6:	3708      	adds	r7, #8
 80078c8:	46bd      	mov	sp, r7
 80078ca:	bd80      	pop	{r7, pc}
 80078cc:	20000940 	.word	0x20000940
 80078d0:	20000b68 	.word	0x20000b68

080078d4 <NotifyCmdStatus>:
 80078d4:	b580      	push	{r7, lr}
 80078d6:	b082      	sub	sp, #8
 80078d8:	af00      	add	r7, sp, #0
 80078da:	4603      	mov	r3, r0
 80078dc:	71fb      	strb	r3, [r7, #7]
 80078de:	79fb      	ldrb	r3, [r7, #7]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d108      	bne.n	80078f6 <NotifyCmdStatus+0x22>
 80078e4:	4b0a      	ldr	r3, [pc, #40]	; (8007910 <NotifyCmdStatus+0x3c>)
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d00d      	beq.n	8007908 <NotifyCmdStatus+0x34>
 80078ec:	4b08      	ldr	r3, [pc, #32]	; (8007910 <NotifyCmdStatus+0x3c>)
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	2000      	movs	r0, #0
 80078f2:	4798      	blx	r3
 80078f4:	e008      	b.n	8007908 <NotifyCmdStatus+0x34>
 80078f6:	4b06      	ldr	r3, [pc, #24]	; (8007910 <NotifyCmdStatus+0x3c>)
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d004      	beq.n	8007908 <NotifyCmdStatus+0x34>
 80078fe:	4b04      	ldr	r3, [pc, #16]	; (8007910 <NotifyCmdStatus+0x3c>)
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	2001      	movs	r0, #1
 8007904:	4798      	blx	r3
 8007906:	bf00      	nop
 8007908:	bf00      	nop
 800790a:	3708      	adds	r7, #8
 800790c:	46bd      	mov	sp, r7
 800790e:	bd80      	pop	{r7, pc}
 8007910:	20000b90 	.word	0x20000b90

08007914 <TlEvtReceived>:
 8007914:	b580      	push	{r7, lr}
 8007916:	b082      	sub	sp, #8
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	7a5b      	ldrb	r3, [r3, #9]
 8007920:	2b0f      	cmp	r3, #15
 8007922:	d003      	beq.n	800792c <TlEvtReceived+0x18>
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	7a5b      	ldrb	r3, [r3, #9]
 8007928:	2b0e      	cmp	r3, #14
 800792a:	d107      	bne.n	800793c <TlEvtReceived+0x28>
 800792c:	6879      	ldr	r1, [r7, #4]
 800792e:	4809      	ldr	r0, [pc, #36]	; (8007954 <TlEvtReceived+0x40>)
 8007930:	f000 fc24 	bl	800817c <LST_insert_tail>
 8007934:	2000      	movs	r0, #0
 8007936:	f000 ff29 	bl	800878c <hci_cmd_resp_release>
 800793a:	e006      	b.n	800794a <TlEvtReceived+0x36>
 800793c:	6879      	ldr	r1, [r7, #4]
 800793e:	4806      	ldr	r0, [pc, #24]	; (8007958 <TlEvtReceived+0x44>)
 8007940:	f000 fc1c 	bl	800817c <LST_insert_tail>
 8007944:	4804      	ldr	r0, [pc, #16]	; (8007958 <TlEvtReceived+0x44>)
 8007946:	f000 ff15 	bl	8008774 <hci_notify_asynch_evt>
 800794a:	bf00      	nop
 800794c:	3708      	adds	r7, #8
 800794e:	46bd      	mov	sp, r7
 8007950:	bd80      	pop	{r7, pc}
 8007952:	bf00      	nop
 8007954:	20000b88 	.word	0x20000b88
 8007958:	20000938 	.word	0x20000938

0800795c <hci_register_io_bus>:
 800795c:	b480      	push	{r7}
 800795e:	b083      	sub	sp, #12
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	4a05      	ldr	r2, [pc, #20]	; (800797c <hci_register_io_bus+0x20>)
 8007968:	601a      	str	r2, [r3, #0]
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	4a04      	ldr	r2, [pc, #16]	; (8007980 <hci_register_io_bus+0x24>)
 800796e:	611a      	str	r2, [r3, #16]
 8007970:	bf00      	nop
 8007972:	370c      	adds	r7, #12
 8007974:	46bd      	mov	sp, r7
 8007976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797a:	4770      	bx	lr
 800797c:	08007c6d 	.word	0x08007c6d
 8007980:	08007cd5 	.word	0x08007cd5

08007984 <shci_init>:
 8007984:	b580      	push	{r7, lr}
 8007986:	b082      	sub	sp, #8
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
 800798c:	6039      	str	r1, [r7, #0]
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	685b      	ldr	r3, [r3, #4]
 8007992:	4a08      	ldr	r2, [pc, #32]	; (80079b4 <shci_init+0x30>)
 8007994:	6013      	str	r3, [r2, #0]
 8007996:	4a08      	ldr	r2, [pc, #32]	; (80079b8 <shci_init+0x34>)
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	61d3      	str	r3, [r2, #28]
 800799c:	4806      	ldr	r0, [pc, #24]	; (80079b8 <shci_init+0x34>)
 800799e:	f000 f911 	bl	8007bc4 <shci_register_io_bus>
 80079a2:	683b      	ldr	r3, [r7, #0]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	4618      	mov	r0, r3
 80079a8:	f000 f894 	bl	8007ad4 <TlInit>
 80079ac:	bf00      	nop
 80079ae:	3708      	adds	r7, #8
 80079b0:	46bd      	mov	sp, r7
 80079b2:	bd80      	pop	{r7, pc}
 80079b4:	20000bb4 	.word	0x20000bb4
 80079b8:	20000b94 	.word	0x20000b94

080079bc <shci_user_evt_proc>:
 80079bc:	b580      	push	{r7, lr}
 80079be:	b084      	sub	sp, #16
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	4822      	ldr	r0, [pc, #136]	; (8007a4c <shci_user_evt_proc+0x90>)
 80079c4:	f000 fb92 	bl	80080ec <LST_is_empty>
 80079c8:	4603      	mov	r3, r0
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d12b      	bne.n	8007a26 <shci_user_evt_proc+0x6a>
 80079ce:	4b20      	ldr	r3, [pc, #128]	; (8007a50 <shci_user_evt_proc+0x94>)
 80079d0:	781b      	ldrb	r3, [r3, #0]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d027      	beq.n	8007a26 <shci_user_evt_proc+0x6a>
 80079d6:	f107 030c 	add.w	r3, r7, #12
 80079da:	4619      	mov	r1, r3
 80079dc:	481b      	ldr	r0, [pc, #108]	; (8007a4c <shci_user_evt_proc+0x90>)
 80079de:	f000 fc14 	bl	800820a <LST_remove_head>
 80079e2:	4b1c      	ldr	r3, [pc, #112]	; (8007a54 <shci_user_evt_proc+0x98>)
 80079e4:	69db      	ldr	r3, [r3, #28]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d00c      	beq.n	8007a04 <shci_user_evt_proc+0x48>
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	60bb      	str	r3, [r7, #8]
 80079ee:	2301      	movs	r3, #1
 80079f0:	713b      	strb	r3, [r7, #4]
 80079f2:	4b18      	ldr	r3, [pc, #96]	; (8007a54 <shci_user_evt_proc+0x98>)
 80079f4:	69db      	ldr	r3, [r3, #28]
 80079f6:	1d3a      	adds	r2, r7, #4
 80079f8:	4610      	mov	r0, r2
 80079fa:	4798      	blx	r3
 80079fc:	793a      	ldrb	r2, [r7, #4]
 80079fe:	4b14      	ldr	r3, [pc, #80]	; (8007a50 <shci_user_evt_proc+0x94>)
 8007a00:	701a      	strb	r2, [r3, #0]
 8007a02:	e002      	b.n	8007a0a <shci_user_evt_proc+0x4e>
 8007a04:	4b12      	ldr	r3, [pc, #72]	; (8007a50 <shci_user_evt_proc+0x94>)
 8007a06:	2201      	movs	r2, #1
 8007a08:	701a      	strb	r2, [r3, #0]
 8007a0a:	4b11      	ldr	r3, [pc, #68]	; (8007a50 <shci_user_evt_proc+0x94>)
 8007a0c:	781b      	ldrb	r3, [r3, #0]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d004      	beq.n	8007a1c <shci_user_evt_proc+0x60>
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	4618      	mov	r0, r3
 8007a16:	f000 fa6d 	bl	8007ef4 <TL_MM_EvtDone>
 8007a1a:	e004      	b.n	8007a26 <shci_user_evt_proc+0x6a>
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	4619      	mov	r1, r3
 8007a20:	480a      	ldr	r0, [pc, #40]	; (8007a4c <shci_user_evt_proc+0x90>)
 8007a22:	f000 fb85 	bl	8008130 <LST_insert_head>
 8007a26:	4809      	ldr	r0, [pc, #36]	; (8007a4c <shci_user_evt_proc+0x90>)
 8007a28:	f000 fb60 	bl	80080ec <LST_is_empty>
 8007a2c:	4603      	mov	r3, r0
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d107      	bne.n	8007a42 <shci_user_evt_proc+0x86>
 8007a32:	4b07      	ldr	r3, [pc, #28]	; (8007a50 <shci_user_evt_proc+0x94>)
 8007a34:	781b      	ldrb	r3, [r3, #0]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d003      	beq.n	8007a42 <shci_user_evt_proc+0x86>
 8007a3a:	4804      	ldr	r0, [pc, #16]	; (8007a4c <shci_user_evt_proc+0x90>)
 8007a3c:	f7f9 f8c8 	bl	8000bd0 <shci_notify_asynch_evt>
 8007a40:	bf00      	nop
 8007a42:	bf00      	nop
 8007a44:	3710      	adds	r7, #16
 8007a46:	46bd      	mov	sp, r7
 8007a48:	bd80      	pop	{r7, pc}
 8007a4a:	bf00      	nop
 8007a4c:	20000948 	.word	0x20000948
 8007a50:	20000958 	.word	0x20000958
 8007a54:	20000b94 	.word	0x20000b94

08007a58 <shci_send>:
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b084      	sub	sp, #16
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	60ba      	str	r2, [r7, #8]
 8007a60:	607b      	str	r3, [r7, #4]
 8007a62:	4603      	mov	r3, r0
 8007a64:	81fb      	strh	r3, [r7, #14]
 8007a66:	460b      	mov	r3, r1
 8007a68:	737b      	strb	r3, [r7, #13]
 8007a6a:	2000      	movs	r0, #0
 8007a6c:	f000 f864 	bl	8007b38 <Cmd_SetStatus>
 8007a70:	4b16      	ldr	r3, [pc, #88]	; (8007acc <shci_send+0x74>)
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	89fa      	ldrh	r2, [r7, #14]
 8007a76:	f8a3 2009 	strh.w	r2, [r3, #9]
 8007a7a:	4b14      	ldr	r3, [pc, #80]	; (8007acc <shci_send+0x74>)
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	7b7a      	ldrb	r2, [r7, #13]
 8007a80:	72da      	strb	r2, [r3, #11]
 8007a82:	4b12      	ldr	r3, [pc, #72]	; (8007acc <shci_send+0x74>)
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	330c      	adds	r3, #12
 8007a88:	7b7a      	ldrb	r2, [r7, #13]
 8007a8a:	68b9      	ldr	r1, [r7, #8]
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	f001 fc99 	bl	80093c4 <memcpy>
 8007a92:	4b0f      	ldr	r3, [pc, #60]	; (8007ad0 <shci_send+0x78>)
 8007a94:	691b      	ldr	r3, [r3, #16]
 8007a96:	2100      	movs	r1, #0
 8007a98:	2000      	movs	r0, #0
 8007a9a:	4798      	blx	r3
 8007a9c:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8007aa0:	f7f9 f8ad 	bl	8000bfe <shci_cmd_resp_wait>
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	f103 0008 	add.w	r0, r3, #8
 8007aaa:	4b08      	ldr	r3, [pc, #32]	; (8007acc <shci_send+0x74>)
 8007aac:	6819      	ldr	r1, [r3, #0]
 8007aae:	4b07      	ldr	r3, [pc, #28]	; (8007acc <shci_send+0x74>)
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	789b      	ldrb	r3, [r3, #2]
 8007ab4:	3303      	adds	r3, #3
 8007ab6:	461a      	mov	r2, r3
 8007ab8:	f001 fc84 	bl	80093c4 <memcpy>
 8007abc:	2001      	movs	r0, #1
 8007abe:	f000 f83b 	bl	8007b38 <Cmd_SetStatus>
 8007ac2:	bf00      	nop
 8007ac4:	3710      	adds	r7, #16
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	bd80      	pop	{r7, pc}
 8007aca:	bf00      	nop
 8007acc:	20000954 	.word	0x20000954
 8007ad0:	20000b94 	.word	0x20000b94

08007ad4 <TlInit>:
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	b086      	sub	sp, #24
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
 8007adc:	4a10      	ldr	r2, [pc, #64]	; (8007b20 <TlInit+0x4c>)
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	6013      	str	r3, [r2, #0]
 8007ae2:	4810      	ldr	r0, [pc, #64]	; (8007b24 <TlInit+0x50>)
 8007ae4:	f000 faf2 	bl	80080cc <LST_init_head>
 8007ae8:	2001      	movs	r0, #1
 8007aea:	f000 f825 	bl	8007b38 <Cmd_SetStatus>
 8007aee:	4b0e      	ldr	r3, [pc, #56]	; (8007b28 <TlInit+0x54>)
 8007af0:	2201      	movs	r2, #1
 8007af2:	701a      	strb	r2, [r3, #0]
 8007af4:	4b0d      	ldr	r3, [pc, #52]	; (8007b2c <TlInit+0x58>)
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d00c      	beq.n	8007b16 <TlInit+0x42>
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	617b      	str	r3, [r7, #20]
 8007b00:	4b0b      	ldr	r3, [pc, #44]	; (8007b30 <TlInit+0x5c>)
 8007b02:	60fb      	str	r3, [r7, #12]
 8007b04:	4b0b      	ldr	r3, [pc, #44]	; (8007b34 <TlInit+0x60>)
 8007b06:	613b      	str	r3, [r7, #16]
 8007b08:	4b08      	ldr	r3, [pc, #32]	; (8007b2c <TlInit+0x58>)
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	f107 020c 	add.w	r2, r7, #12
 8007b10:	4610      	mov	r0, r2
 8007b12:	4798      	blx	r3
 8007b14:	bf00      	nop
 8007b16:	bf00      	nop
 8007b18:	3718      	adds	r7, #24
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	bd80      	pop	{r7, pc}
 8007b1e:	bf00      	nop
 8007b20:	20000954 	.word	0x20000954
 8007b24:	20000948 	.word	0x20000948
 8007b28:	20000958 	.word	0x20000958
 8007b2c:	20000b94 	.word	0x20000b94
 8007b30:	08007b89 	.word	0x08007b89
 8007b34:	08007ba1 	.word	0x08007ba1

08007b38 <Cmd_SetStatus>:
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b082      	sub	sp, #8
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	4603      	mov	r3, r0
 8007b40:	71fb      	strb	r3, [r7, #7]
 8007b42:	79fb      	ldrb	r3, [r7, #7]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d10b      	bne.n	8007b60 <Cmd_SetStatus+0x28>
 8007b48:	4b0d      	ldr	r3, [pc, #52]	; (8007b80 <Cmd_SetStatus+0x48>)
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d003      	beq.n	8007b58 <Cmd_SetStatus+0x20>
 8007b50:	4b0b      	ldr	r3, [pc, #44]	; (8007b80 <Cmd_SetStatus+0x48>)
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	2000      	movs	r0, #0
 8007b56:	4798      	blx	r3
 8007b58:	4b0a      	ldr	r3, [pc, #40]	; (8007b84 <Cmd_SetStatus+0x4c>)
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	701a      	strb	r2, [r3, #0]
 8007b5e:	e00b      	b.n	8007b78 <Cmd_SetStatus+0x40>
 8007b60:	4b08      	ldr	r3, [pc, #32]	; (8007b84 <Cmd_SetStatus+0x4c>)
 8007b62:	2201      	movs	r2, #1
 8007b64:	701a      	strb	r2, [r3, #0]
 8007b66:	4b06      	ldr	r3, [pc, #24]	; (8007b80 <Cmd_SetStatus+0x48>)
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d004      	beq.n	8007b78 <Cmd_SetStatus+0x40>
 8007b6e:	4b04      	ldr	r3, [pc, #16]	; (8007b80 <Cmd_SetStatus+0x48>)
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	2001      	movs	r0, #1
 8007b74:	4798      	blx	r3
 8007b76:	bf00      	nop
 8007b78:	bf00      	nop
 8007b7a:	3708      	adds	r7, #8
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	bd80      	pop	{r7, pc}
 8007b80:	20000bb4 	.word	0x20000bb4
 8007b84:	20000950 	.word	0x20000950

08007b88 <TlCmdEvtReceived>:
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	b082      	sub	sp, #8
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	6078      	str	r0, [r7, #4]
 8007b90:	2000      	movs	r0, #0
 8007b92:	f7f9 f829 	bl	8000be8 <shci_cmd_resp_release>
 8007b96:	bf00      	nop
 8007b98:	3708      	adds	r7, #8
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	bd80      	pop	{r7, pc}
	...

08007ba0 <TlUserEvtReceived>:
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b082      	sub	sp, #8
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
 8007ba8:	6879      	ldr	r1, [r7, #4]
 8007baa:	4805      	ldr	r0, [pc, #20]	; (8007bc0 <TlUserEvtReceived+0x20>)
 8007bac:	f000 fae6 	bl	800817c <LST_insert_tail>
 8007bb0:	4803      	ldr	r0, [pc, #12]	; (8007bc0 <TlUserEvtReceived+0x20>)
 8007bb2:	f7f9 f80d 	bl	8000bd0 <shci_notify_asynch_evt>
 8007bb6:	bf00      	nop
 8007bb8:	3708      	adds	r7, #8
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	bd80      	pop	{r7, pc}
 8007bbe:	bf00      	nop
 8007bc0:	20000948 	.word	0x20000948

08007bc4 <shci_register_io_bus>:
 8007bc4:	b480      	push	{r7}
 8007bc6:	b083      	sub	sp, #12
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	4a05      	ldr	r2, [pc, #20]	; (8007be4 <shci_register_io_bus+0x20>)
 8007bd0:	601a      	str	r2, [r3, #0]
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	4a04      	ldr	r2, [pc, #16]	; (8007be8 <shci_register_io_bus+0x24>)
 8007bd6:	611a      	str	r2, [r3, #16]
 8007bd8:	bf00      	nop
 8007bda:	370c      	adds	r7, #12
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be2:	4770      	bx	lr
 8007be4:	08007d81 	.word	0x08007d81
 8007be8:	08007dd5 	.word	0x08007dd5

08007bec <TL_Enable>:
 8007bec:	b580      	push	{r7, lr}
 8007bee:	af00      	add	r7, sp, #0
 8007bf0:	f001 f86c 	bl	8008ccc <HW_IPCC_Enable>
 8007bf4:	bf00      	nop
 8007bf6:	bd80      	pop	{r7, pc}

08007bf8 <TL_Init>:
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	af00      	add	r7, sp, #0
 8007bfc:	4b10      	ldr	r3, [pc, #64]	; (8007c40 <TL_Init+0x48>)
 8007bfe:	4a11      	ldr	r2, [pc, #68]	; (8007c44 <TL_Init+0x4c>)
 8007c00:	601a      	str	r2, [r3, #0]
 8007c02:	4b0f      	ldr	r3, [pc, #60]	; (8007c40 <TL_Init+0x48>)
 8007c04:	4a10      	ldr	r2, [pc, #64]	; (8007c48 <TL_Init+0x50>)
 8007c06:	605a      	str	r2, [r3, #4]
 8007c08:	4b0d      	ldr	r3, [pc, #52]	; (8007c40 <TL_Init+0x48>)
 8007c0a:	4a10      	ldr	r2, [pc, #64]	; (8007c4c <TL_Init+0x54>)
 8007c0c:	609a      	str	r2, [r3, #8]
 8007c0e:	4b0c      	ldr	r3, [pc, #48]	; (8007c40 <TL_Init+0x48>)
 8007c10:	4a0f      	ldr	r2, [pc, #60]	; (8007c50 <TL_Init+0x58>)
 8007c12:	621a      	str	r2, [r3, #32]
 8007c14:	4b0a      	ldr	r3, [pc, #40]	; (8007c40 <TL_Init+0x48>)
 8007c16:	4a0f      	ldr	r2, [pc, #60]	; (8007c54 <TL_Init+0x5c>)
 8007c18:	625a      	str	r2, [r3, #36]	; 0x24
 8007c1a:	4b09      	ldr	r3, [pc, #36]	; (8007c40 <TL_Init+0x48>)
 8007c1c:	4a0e      	ldr	r2, [pc, #56]	; (8007c58 <TL_Init+0x60>)
 8007c1e:	60da      	str	r2, [r3, #12]
 8007c20:	4b07      	ldr	r3, [pc, #28]	; (8007c40 <TL_Init+0x48>)
 8007c22:	4a0e      	ldr	r2, [pc, #56]	; (8007c5c <TL_Init+0x64>)
 8007c24:	611a      	str	r2, [r3, #16]
 8007c26:	4b06      	ldr	r3, [pc, #24]	; (8007c40 <TL_Init+0x48>)
 8007c28:	4a0d      	ldr	r2, [pc, #52]	; (8007c60 <TL_Init+0x68>)
 8007c2a:	615a      	str	r2, [r3, #20]
 8007c2c:	4b04      	ldr	r3, [pc, #16]	; (8007c40 <TL_Init+0x48>)
 8007c2e:	4a0d      	ldr	r2, [pc, #52]	; (8007c64 <TL_Init+0x6c>)
 8007c30:	619a      	str	r2, [r3, #24]
 8007c32:	4b03      	ldr	r3, [pc, #12]	; (8007c40 <TL_Init+0x48>)
 8007c34:	4a0c      	ldr	r2, [pc, #48]	; (8007c68 <TL_Init+0x70>)
 8007c36:	61da      	str	r2, [r3, #28]
 8007c38:	f001 f85c 	bl	8008cf4 <HW_IPCC_Init>
 8007c3c:	bf00      	nop
 8007c3e:	bd80      	pop	{r7, pc}
 8007c40:	20030000 	.word	0x20030000
 8007c44:	20030028 	.word	0x20030028
 8007c48:	20030048 	.word	0x20030048
 8007c4c:	20030058 	.word	0x20030058
 8007c50:	20030068 	.word	0x20030068
 8007c54:	20030070 	.word	0x20030070
 8007c58:	20030078 	.word	0x20030078
 8007c5c:	20030080 	.word	0x20030080
 8007c60:	2003009c 	.word	0x2003009c
 8007c64:	200300a0 	.word	0x200300a0
 8007c68:	200300ac 	.word	0x200300ac

08007c6c <TL_BLE_Init>:
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b084      	sub	sp, #16
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	60fb      	str	r3, [r7, #12]
 8007c78:	4811      	ldr	r0, [pc, #68]	; (8007cc0 <TL_BLE_Init+0x54>)
 8007c7a:	f000 fa27 	bl	80080cc <LST_init_head>
 8007c7e:	4b11      	ldr	r3, [pc, #68]	; (8007cc4 <TL_BLE_Init+0x58>)
 8007c80:	685b      	ldr	r3, [r3, #4]
 8007c82:	60bb      	str	r3, [r7, #8]
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	689a      	ldr	r2, [r3, #8]
 8007c88:	68bb      	ldr	r3, [r7, #8]
 8007c8a:	601a      	str	r2, [r3, #0]
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	68da      	ldr	r2, [r3, #12]
 8007c90:	68bb      	ldr	r3, [r7, #8]
 8007c92:	60da      	str	r2, [r3, #12]
 8007c94:	68bb      	ldr	r3, [r7, #8]
 8007c96:	4a0c      	ldr	r2, [pc, #48]	; (8007cc8 <TL_BLE_Init+0x5c>)
 8007c98:	605a      	str	r2, [r3, #4]
 8007c9a:	68bb      	ldr	r3, [r7, #8]
 8007c9c:	4a08      	ldr	r2, [pc, #32]	; (8007cc0 <TL_BLE_Init+0x54>)
 8007c9e:	609a      	str	r2, [r3, #8]
 8007ca0:	f001 f83e 	bl	8008d20 <HW_IPCC_BLE_Init>
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	4a08      	ldr	r2, [pc, #32]	; (8007ccc <TL_BLE_Init+0x60>)
 8007caa:	6013      	str	r3, [r2, #0]
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	685b      	ldr	r3, [r3, #4]
 8007cb0:	4a07      	ldr	r2, [pc, #28]	; (8007cd0 <TL_BLE_Init+0x64>)
 8007cb2:	6013      	str	r3, [r2, #0]
 8007cb4:	2300      	movs	r3, #0
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	3710      	adds	r7, #16
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	bd80      	pop	{r7, pc}
 8007cbe:	bf00      	nop
 8007cc0:	200300c8 	.word	0x200300c8
 8007cc4:	20030000 	.word	0x20030000
 8007cc8:	20000900 	.word	0x20000900
 8007ccc:	20000bc0 	.word	0x20000bc0
 8007cd0:	20000bc4 	.word	0x20000bc4

08007cd4 <TL_BLE_SendCmd>:
 8007cd4:	b580      	push	{r7, lr}
 8007cd6:	b082      	sub	sp, #8
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
 8007cdc:	460b      	mov	r3, r1
 8007cde:	807b      	strh	r3, [r7, #2]
 8007ce0:	4b09      	ldr	r3, [pc, #36]	; (8007d08 <TL_BLE_SendCmd+0x34>)
 8007ce2:	685b      	ldr	r3, [r3, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	2201      	movs	r2, #1
 8007ce8:	721a      	strb	r2, [r3, #8]
 8007cea:	4b07      	ldr	r3, [pc, #28]	; (8007d08 <TL_BLE_SendCmd+0x34>)
 8007cec:	685b      	ldr	r3, [r3, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	4619      	mov	r1, r3
 8007cf2:	2001      	movs	r0, #1
 8007cf4:	f000 f96c 	bl	8007fd0 <OutputDbgTrace>
 8007cf8:	f001 f81c 	bl	8008d34 <HW_IPCC_BLE_SendCmd>
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	4618      	mov	r0, r3
 8007d00:	3708      	adds	r7, #8
 8007d02:	46bd      	mov	sp, r7
 8007d04:	bd80      	pop	{r7, pc}
 8007d06:	bf00      	nop
 8007d08:	20030000 	.word	0x20030000

08007d0c <HW_IPCC_BLE_RxEvtNot>:
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	b082      	sub	sp, #8
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	e01c      	b.n	8007d4e <HW_IPCC_BLE_RxEvtNot+0x42>
 8007d14:	1d3b      	adds	r3, r7, #4
 8007d16:	4619      	mov	r1, r3
 8007d18:	4812      	ldr	r0, [pc, #72]	; (8007d64 <HW_IPCC_BLE_RxEvtNot+0x58>)
 8007d1a:	f000 fa76 	bl	800820a <LST_remove_head>
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	7a5b      	ldrb	r3, [r3, #9]
 8007d22:	2b0f      	cmp	r3, #15
 8007d24:	d003      	beq.n	8007d2e <HW_IPCC_BLE_RxEvtNot+0x22>
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	7a5b      	ldrb	r3, [r3, #9]
 8007d2a:	2b0e      	cmp	r3, #14
 8007d2c:	d105      	bne.n	8007d3a <HW_IPCC_BLE_RxEvtNot+0x2e>
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	4619      	mov	r1, r3
 8007d32:	2002      	movs	r0, #2
 8007d34:	f000 f94c 	bl	8007fd0 <OutputDbgTrace>
 8007d38:	e004      	b.n	8007d44 <HW_IPCC_BLE_RxEvtNot+0x38>
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	4619      	mov	r1, r3
 8007d3e:	2003      	movs	r0, #3
 8007d40:	f000 f946 	bl	8007fd0 <OutputDbgTrace>
 8007d44:	4b08      	ldr	r3, [pc, #32]	; (8007d68 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	687a      	ldr	r2, [r7, #4]
 8007d4a:	4610      	mov	r0, r2
 8007d4c:	4798      	blx	r3
 8007d4e:	4805      	ldr	r0, [pc, #20]	; (8007d64 <HW_IPCC_BLE_RxEvtNot+0x58>)
 8007d50:	f000 f9cc 	bl	80080ec <LST_is_empty>
 8007d54:	4603      	mov	r3, r0
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d0dc      	beq.n	8007d14 <HW_IPCC_BLE_RxEvtNot+0x8>
 8007d5a:	bf00      	nop
 8007d5c:	3708      	adds	r7, #8
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	bd80      	pop	{r7, pc}
 8007d62:	bf00      	nop
 8007d64:	200300c8 	.word	0x200300c8
 8007d68:	20000bc0 	.word	0x20000bc0

08007d6c <HW_IPCC_BLE_AclDataAckNot>:
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	af00      	add	r7, sp, #0
 8007d70:	4b02      	ldr	r3, [pc, #8]	; (8007d7c <HW_IPCC_BLE_AclDataAckNot+0x10>)
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	4798      	blx	r3
 8007d76:	bf00      	nop
 8007d78:	bd80      	pop	{r7, pc}
 8007d7a:	bf00      	nop
 8007d7c:	20000bc4 	.word	0x20000bc4

08007d80 <TL_SYS_Init>:
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b084      	sub	sp, #16
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	60fb      	str	r3, [r7, #12]
 8007d8c:	480d      	ldr	r0, [pc, #52]	; (8007dc4 <TL_SYS_Init+0x44>)
 8007d8e:	f000 f99d 	bl	80080cc <LST_init_head>
 8007d92:	4b0d      	ldr	r3, [pc, #52]	; (8007dc8 <TL_SYS_Init+0x48>)
 8007d94:	68db      	ldr	r3, [r3, #12]
 8007d96:	60bb      	str	r3, [r7, #8]
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	689a      	ldr	r2, [r3, #8]
 8007d9c:	68bb      	ldr	r3, [r7, #8]
 8007d9e:	601a      	str	r2, [r3, #0]
 8007da0:	68bb      	ldr	r3, [r7, #8]
 8007da2:	4a08      	ldr	r2, [pc, #32]	; (8007dc4 <TL_SYS_Init+0x44>)
 8007da4:	605a      	str	r2, [r3, #4]
 8007da6:	f000 ffe7 	bl	8008d78 <HW_IPCC_SYS_Init>
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	4a07      	ldr	r2, [pc, #28]	; (8007dcc <TL_SYS_Init+0x4c>)
 8007db0:	6013      	str	r3, [r2, #0]
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	685b      	ldr	r3, [r3, #4]
 8007db6:	4a06      	ldr	r2, [pc, #24]	; (8007dd0 <TL_SYS_Init+0x50>)
 8007db8:	6013      	str	r3, [r2, #0]
 8007dba:	2300      	movs	r3, #0
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	3710      	adds	r7, #16
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	bd80      	pop	{r7, pc}
 8007dc4:	200300d0 	.word	0x200300d0
 8007dc8:	20030000 	.word	0x20030000
 8007dcc:	20000bc8 	.word	0x20000bc8
 8007dd0:	20000bcc 	.word	0x20000bcc

08007dd4 <TL_SYS_SendCmd>:
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	b082      	sub	sp, #8
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
 8007ddc:	460b      	mov	r3, r1
 8007dde:	807b      	strh	r3, [r7, #2]
 8007de0:	4b09      	ldr	r3, [pc, #36]	; (8007e08 <TL_SYS_SendCmd+0x34>)
 8007de2:	68db      	ldr	r3, [r3, #12]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	2210      	movs	r2, #16
 8007de8:	721a      	strb	r2, [r3, #8]
 8007dea:	4b07      	ldr	r3, [pc, #28]	; (8007e08 <TL_SYS_SendCmd+0x34>)
 8007dec:	68db      	ldr	r3, [r3, #12]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	4619      	mov	r1, r3
 8007df2:	2004      	movs	r0, #4
 8007df4:	f000 f8ec 	bl	8007fd0 <OutputDbgTrace>
 8007df8:	f000 ffc8 	bl	8008d8c <HW_IPCC_SYS_SendCmd>
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	4618      	mov	r0, r3
 8007e00:	3708      	adds	r7, #8
 8007e02:	46bd      	mov	sp, r7
 8007e04:	bd80      	pop	{r7, pc}
 8007e06:	bf00      	nop
 8007e08:	20030000 	.word	0x20030000

08007e0c <HW_IPCC_SYS_CmdEvtNot>:
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	af00      	add	r7, sp, #0
 8007e10:	4b07      	ldr	r3, [pc, #28]	; (8007e30 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8007e12:	68db      	ldr	r3, [r3, #12]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	4619      	mov	r1, r3
 8007e18:	2005      	movs	r0, #5
 8007e1a:	f000 f8d9 	bl	8007fd0 <OutputDbgTrace>
 8007e1e:	4b05      	ldr	r3, [pc, #20]	; (8007e34 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	4a03      	ldr	r2, [pc, #12]	; (8007e30 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8007e24:	68d2      	ldr	r2, [r2, #12]
 8007e26:	6812      	ldr	r2, [r2, #0]
 8007e28:	4610      	mov	r0, r2
 8007e2a:	4798      	blx	r3
 8007e2c:	bf00      	nop
 8007e2e:	bd80      	pop	{r7, pc}
 8007e30:	20030000 	.word	0x20030000
 8007e34:	20000bc8 	.word	0x20000bc8

08007e38 <HW_IPCC_SYS_EvtNot>:
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	b082      	sub	sp, #8
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	e00e      	b.n	8007e5e <HW_IPCC_SYS_EvtNot+0x26>
 8007e40:	1d3b      	adds	r3, r7, #4
 8007e42:	4619      	mov	r1, r3
 8007e44:	480b      	ldr	r0, [pc, #44]	; (8007e74 <HW_IPCC_SYS_EvtNot+0x3c>)
 8007e46:	f000 f9e0 	bl	800820a <LST_remove_head>
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	4619      	mov	r1, r3
 8007e4e:	2006      	movs	r0, #6
 8007e50:	f000 f8be 	bl	8007fd0 <OutputDbgTrace>
 8007e54:	4b08      	ldr	r3, [pc, #32]	; (8007e78 <HW_IPCC_SYS_EvtNot+0x40>)
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	687a      	ldr	r2, [r7, #4]
 8007e5a:	4610      	mov	r0, r2
 8007e5c:	4798      	blx	r3
 8007e5e:	4805      	ldr	r0, [pc, #20]	; (8007e74 <HW_IPCC_SYS_EvtNot+0x3c>)
 8007e60:	f000 f944 	bl	80080ec <LST_is_empty>
 8007e64:	4603      	mov	r3, r0
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d0ea      	beq.n	8007e40 <HW_IPCC_SYS_EvtNot+0x8>
 8007e6a:	bf00      	nop
 8007e6c:	3708      	adds	r7, #8
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	bd80      	pop	{r7, pc}
 8007e72:	bf00      	nop
 8007e74:	200300d0 	.word	0x200300d0
 8007e78:	20000bcc 	.word	0x20000bcc

08007e7c <TL_MM_Init>:
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b082      	sub	sp, #8
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
 8007e84:	4817      	ldr	r0, [pc, #92]	; (8007ee4 <TL_MM_Init+0x68>)
 8007e86:	f000 f921 	bl	80080cc <LST_init_head>
 8007e8a:	4817      	ldr	r0, [pc, #92]	; (8007ee8 <TL_MM_Init+0x6c>)
 8007e8c:	f000 f91e 	bl	80080cc <LST_init_head>
 8007e90:	4b16      	ldr	r3, [pc, #88]	; (8007eec <TL_MM_Init+0x70>)
 8007e92:	691b      	ldr	r3, [r3, #16]
 8007e94:	4a16      	ldr	r2, [pc, #88]	; (8007ef0 <TL_MM_Init+0x74>)
 8007e96:	6013      	str	r3, [r2, #0]
 8007e98:	4b15      	ldr	r3, [pc, #84]	; (8007ef0 <TL_MM_Init+0x74>)
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	687a      	ldr	r2, [r7, #4]
 8007e9e:	6892      	ldr	r2, [r2, #8]
 8007ea0:	609a      	str	r2, [r3, #8]
 8007ea2:	4b13      	ldr	r3, [pc, #76]	; (8007ef0 <TL_MM_Init+0x74>)
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	687a      	ldr	r2, [r7, #4]
 8007ea8:	68d2      	ldr	r2, [r2, #12]
 8007eaa:	60da      	str	r2, [r3, #12]
 8007eac:	4b10      	ldr	r3, [pc, #64]	; (8007ef0 <TL_MM_Init+0x74>)
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	4a0c      	ldr	r2, [pc, #48]	; (8007ee4 <TL_MM_Init+0x68>)
 8007eb2:	611a      	str	r2, [r3, #16]
 8007eb4:	4b0e      	ldr	r3, [pc, #56]	; (8007ef0 <TL_MM_Init+0x74>)
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	687a      	ldr	r2, [r7, #4]
 8007eba:	6812      	ldr	r2, [r2, #0]
 8007ebc:	601a      	str	r2, [r3, #0]
 8007ebe:	4b0c      	ldr	r3, [pc, #48]	; (8007ef0 <TL_MM_Init+0x74>)
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	687a      	ldr	r2, [r7, #4]
 8007ec4:	6852      	ldr	r2, [r2, #4]
 8007ec6:	605a      	str	r2, [r3, #4]
 8007ec8:	4b09      	ldr	r3, [pc, #36]	; (8007ef0 <TL_MM_Init+0x74>)
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	687a      	ldr	r2, [r7, #4]
 8007ece:	6912      	ldr	r2, [r2, #16]
 8007ed0:	615a      	str	r2, [r3, #20]
 8007ed2:	4b07      	ldr	r3, [pc, #28]	; (8007ef0 <TL_MM_Init+0x74>)
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	687a      	ldr	r2, [r7, #4]
 8007ed8:	6952      	ldr	r2, [r2, #20]
 8007eda:	619a      	str	r2, [r3, #24]
 8007edc:	bf00      	nop
 8007ede:	3708      	adds	r7, #8
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	bd80      	pop	{r7, pc}
 8007ee4:	200300b8 	.word	0x200300b8
 8007ee8:	20000bb8 	.word	0x20000bb8
 8007eec:	20030000 	.word	0x20030000
 8007ef0:	20000bd0 	.word	0x20000bd0

08007ef4 <TL_MM_EvtDone>:
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b082      	sub	sp, #8
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	6078      	str	r0, [r7, #4]
 8007efc:	6879      	ldr	r1, [r7, #4]
 8007efe:	4807      	ldr	r0, [pc, #28]	; (8007f1c <TL_MM_EvtDone+0x28>)
 8007f00:	f000 f93c 	bl	800817c <LST_insert_tail>
 8007f04:	6879      	ldr	r1, [r7, #4]
 8007f06:	2000      	movs	r0, #0
 8007f08:	f000 f862 	bl	8007fd0 <OutputDbgTrace>
 8007f0c:	4804      	ldr	r0, [pc, #16]	; (8007f20 <TL_MM_EvtDone+0x2c>)
 8007f0e:	f000 ff63 	bl	8008dd8 <HW_IPCC_MM_SendFreeBuf>
 8007f12:	bf00      	nop
 8007f14:	3708      	adds	r7, #8
 8007f16:	46bd      	mov	sp, r7
 8007f18:	bd80      	pop	{r7, pc}
 8007f1a:	bf00      	nop
 8007f1c:	20000bb8 	.word	0x20000bb8
 8007f20:	08007f25 	.word	0x08007f25

08007f24 <SendFreeBuf>:
 8007f24:	b580      	push	{r7, lr}
 8007f26:	b082      	sub	sp, #8
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	e00c      	b.n	8007f46 <SendFreeBuf+0x22>
 8007f2c:	1d3b      	adds	r3, r7, #4
 8007f2e:	4619      	mov	r1, r3
 8007f30:	480a      	ldr	r0, [pc, #40]	; (8007f5c <SendFreeBuf+0x38>)
 8007f32:	f000 f96a 	bl	800820a <LST_remove_head>
 8007f36:	4b0a      	ldr	r3, [pc, #40]	; (8007f60 <SendFreeBuf+0x3c>)
 8007f38:	691b      	ldr	r3, [r3, #16]
 8007f3a:	691b      	ldr	r3, [r3, #16]
 8007f3c:	687a      	ldr	r2, [r7, #4]
 8007f3e:	4611      	mov	r1, r2
 8007f40:	4618      	mov	r0, r3
 8007f42:	f000 f91b 	bl	800817c <LST_insert_tail>
 8007f46:	4805      	ldr	r0, [pc, #20]	; (8007f5c <SendFreeBuf+0x38>)
 8007f48:	f000 f8d0 	bl	80080ec <LST_is_empty>
 8007f4c:	4603      	mov	r3, r0
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d0ec      	beq.n	8007f2c <SendFreeBuf+0x8>
 8007f52:	bf00      	nop
 8007f54:	3708      	adds	r7, #8
 8007f56:	46bd      	mov	sp, r7
 8007f58:	bd80      	pop	{r7, pc}
 8007f5a:	bf00      	nop
 8007f5c:	20000bb8 	.word	0x20000bb8
 8007f60:	20030000 	.word	0x20030000

08007f64 <TL_TRACES_Init>:
 8007f64:	b580      	push	{r7, lr}
 8007f66:	af00      	add	r7, sp, #0
 8007f68:	4805      	ldr	r0, [pc, #20]	; (8007f80 <TL_TRACES_Init+0x1c>)
 8007f6a:	f000 f8af 	bl	80080cc <LST_init_head>
 8007f6e:	4b05      	ldr	r3, [pc, #20]	; (8007f84 <TL_TRACES_Init+0x20>)
 8007f70:	695b      	ldr	r3, [r3, #20]
 8007f72:	4a03      	ldr	r2, [pc, #12]	; (8007f80 <TL_TRACES_Init+0x1c>)
 8007f74:	601a      	str	r2, [r3, #0]
 8007f76:	f000 ff65 	bl	8008e44 <HW_IPCC_TRACES_Init>
 8007f7a:	bf00      	nop
 8007f7c:	bd80      	pop	{r7, pc}
 8007f7e:	bf00      	nop
 8007f80:	200300c0 	.word	0x200300c0
 8007f84:	20030000 	.word	0x20030000

08007f88 <HW_IPCC_TRACES_EvtNot>:
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b082      	sub	sp, #8
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	e008      	b.n	8007fa2 <HW_IPCC_TRACES_EvtNot+0x1a>
 8007f90:	1d3b      	adds	r3, r7, #4
 8007f92:	4619      	mov	r1, r3
 8007f94:	4808      	ldr	r0, [pc, #32]	; (8007fb8 <HW_IPCC_TRACES_EvtNot+0x30>)
 8007f96:	f000 f938 	bl	800820a <LST_remove_head>
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	f000 f80d 	bl	8007fbc <TL_TRACES_EvtReceived>
 8007fa2:	4805      	ldr	r0, [pc, #20]	; (8007fb8 <HW_IPCC_TRACES_EvtNot+0x30>)
 8007fa4:	f000 f8a2 	bl	80080ec <LST_is_empty>
 8007fa8:	4603      	mov	r3, r0
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d0f0      	beq.n	8007f90 <HW_IPCC_TRACES_EvtNot+0x8>
 8007fae:	bf00      	nop
 8007fb0:	3708      	adds	r7, #8
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	bd80      	pop	{r7, pc}
 8007fb6:	bf00      	nop
 8007fb8:	200300c0 	.word	0x200300c0

08007fbc <TL_TRACES_EvtReceived>:
 8007fbc:	b480      	push	{r7}
 8007fbe:	b083      	sub	sp, #12
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
 8007fc4:	bf00      	nop
 8007fc6:	370c      	adds	r7, #12
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fce:	4770      	bx	lr

08007fd0 <OutputDbgTrace>:
 8007fd0:	b480      	push	{r7}
 8007fd2:	b085      	sub	sp, #20
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	4603      	mov	r3, r0
 8007fd8:	6039      	str	r1, [r7, #0]
 8007fda:	71fb      	strb	r3, [r7, #7]
 8007fdc:	79fb      	ldrb	r3, [r7, #7]
 8007fde:	2b06      	cmp	r3, #6
 8007fe0:	d845      	bhi.n	800806e <OutputDbgTrace+0x9e>
 8007fe2:	a201      	add	r2, pc, #4	; (adr r2, 8007fe8 <OutputDbgTrace+0x18>)
 8007fe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fe8:	08008005 	.word	0x08008005
 8007fec:	08008029 	.word	0x08008029
 8007ff0:	0800802f 	.word	0x0800802f
 8007ff4:	08008043 	.word	0x08008043
 8007ff8:	0800804f 	.word	0x0800804f
 8007ffc:	08008055 	.word	0x08008055
 8008000:	08008063 	.word	0x08008063
 8008004:	683b      	ldr	r3, [r7, #0]
 8008006:	60fb      	str	r3, [r7, #12]
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	7a5b      	ldrb	r3, [r3, #9]
 800800c:	2bff      	cmp	r3, #255	; 0xff
 800800e:	d005      	beq.n	800801c <OutputDbgTrace+0x4c>
 8008010:	2bff      	cmp	r3, #255	; 0xff
 8008012:	dc05      	bgt.n	8008020 <OutputDbgTrace+0x50>
 8008014:	2b0e      	cmp	r3, #14
 8008016:	d005      	beq.n	8008024 <OutputDbgTrace+0x54>
 8008018:	2b0f      	cmp	r3, #15
 800801a:	e001      	b.n	8008020 <OutputDbgTrace+0x50>
 800801c:	bf00      	nop
 800801e:	e027      	b.n	8008070 <OutputDbgTrace+0xa0>
 8008020:	bf00      	nop
 8008022:	e025      	b.n	8008070 <OutputDbgTrace+0xa0>
 8008024:	bf00      	nop
 8008026:	e023      	b.n	8008070 <OutputDbgTrace+0xa0>
 8008028:	683b      	ldr	r3, [r7, #0]
 800802a:	60bb      	str	r3, [r7, #8]
 800802c:	e020      	b.n	8008070 <OutputDbgTrace+0xa0>
 800802e:	683b      	ldr	r3, [r7, #0]
 8008030:	60fb      	str	r3, [r7, #12]
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	7a5b      	ldrb	r3, [r3, #9]
 8008036:	2b0e      	cmp	r3, #14
 8008038:	d001      	beq.n	800803e <OutputDbgTrace+0x6e>
 800803a:	2b0f      	cmp	r3, #15
 800803c:	e000      	b.n	8008040 <OutputDbgTrace+0x70>
 800803e:	bf00      	nop
 8008040:	e016      	b.n	8008070 <OutputDbgTrace+0xa0>
 8008042:	683b      	ldr	r3, [r7, #0]
 8008044:	60fb      	str	r3, [r7, #12]
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	7a5b      	ldrb	r3, [r3, #9]
 800804a:	2bff      	cmp	r3, #255	; 0xff
 800804c:	e010      	b.n	8008070 <OutputDbgTrace+0xa0>
 800804e:	683b      	ldr	r3, [r7, #0]
 8008050:	60bb      	str	r3, [r7, #8]
 8008052:	e00d      	b.n	8008070 <OutputDbgTrace+0xa0>
 8008054:	683b      	ldr	r3, [r7, #0]
 8008056:	60fb      	str	r3, [r7, #12]
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	7a5b      	ldrb	r3, [r3, #9]
 800805c:	2b0e      	cmp	r3, #14
 800805e:	bf00      	nop
 8008060:	e006      	b.n	8008070 <OutputDbgTrace+0xa0>
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	60fb      	str	r3, [r7, #12]
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	7a5b      	ldrb	r3, [r3, #9]
 800806a:	2bff      	cmp	r3, #255	; 0xff
 800806c:	e000      	b.n	8008070 <OutputDbgTrace+0xa0>
 800806e:	bf00      	nop
 8008070:	bf00      	nop
 8008072:	3714      	adds	r7, #20
 8008074:	46bd      	mov	sp, r7
 8008076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807a:	4770      	bx	lr

0800807c <OTP_Read>:
 800807c:	b480      	push	{r7}
 800807e:	b085      	sub	sp, #20
 8008080:	af00      	add	r7, sp, #0
 8008082:	4603      	mov	r3, r0
 8008084:	71fb      	strb	r3, [r7, #7]
 8008086:	4b0f      	ldr	r3, [pc, #60]	; (80080c4 <OTP_Read+0x48>)
 8008088:	60fb      	str	r3, [r7, #12]
 800808a:	e002      	b.n	8008092 <OTP_Read+0x16>
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	3b08      	subs	r3, #8
 8008090:	60fb      	str	r3, [r7, #12]
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	3307      	adds	r3, #7
 8008096:	781b      	ldrb	r3, [r3, #0]
 8008098:	79fa      	ldrb	r2, [r7, #7]
 800809a:	429a      	cmp	r2, r3
 800809c:	d003      	beq.n	80080a6 <OTP_Read+0x2a>
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	4a09      	ldr	r2, [pc, #36]	; (80080c8 <OTP_Read+0x4c>)
 80080a2:	4293      	cmp	r3, r2
 80080a4:	d1f2      	bne.n	800808c <OTP_Read+0x10>
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	3307      	adds	r3, #7
 80080aa:	781b      	ldrb	r3, [r3, #0]
 80080ac:	79fa      	ldrb	r2, [r7, #7]
 80080ae:	429a      	cmp	r2, r3
 80080b0:	d001      	beq.n	80080b6 <OTP_Read+0x3a>
 80080b2:	2300      	movs	r3, #0
 80080b4:	60fb      	str	r3, [r7, #12]
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	4618      	mov	r0, r3
 80080ba:	3714      	adds	r7, #20
 80080bc:	46bd      	mov	sp, r7
 80080be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c2:	4770      	bx	lr
 80080c4:	1fff73f8 	.word	0x1fff73f8
 80080c8:	1fff7000 	.word	0x1fff7000

080080cc <LST_init_head>:
 80080cc:	b480      	push	{r7}
 80080ce:	b083      	sub	sp, #12
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	6078      	str	r0, [r7, #4]
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	687a      	ldr	r2, [r7, #4]
 80080d8:	601a      	str	r2, [r3, #0]
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	687a      	ldr	r2, [r7, #4]
 80080de:	605a      	str	r2, [r3, #4]
 80080e0:	bf00      	nop
 80080e2:	370c      	adds	r7, #12
 80080e4:	46bd      	mov	sp, r7
 80080e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ea:	4770      	bx	lr

080080ec <LST_is_empty>:
 80080ec:	b480      	push	{r7}
 80080ee:	b087      	sub	sp, #28
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
 80080f4:	f3ef 8310 	mrs	r3, PRIMASK
 80080f8:	60fb      	str	r3, [r7, #12]
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	613b      	str	r3, [r7, #16]
 80080fe:	b672      	cpsid	i
 8008100:	bf00      	nop
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	687a      	ldr	r2, [r7, #4]
 8008108:	429a      	cmp	r2, r3
 800810a:	d102      	bne.n	8008112 <LST_is_empty+0x26>
 800810c:	2301      	movs	r3, #1
 800810e:	75fb      	strb	r3, [r7, #23]
 8008110:	e001      	b.n	8008116 <LST_is_empty+0x2a>
 8008112:	2300      	movs	r3, #0
 8008114:	75fb      	strb	r3, [r7, #23]
 8008116:	693b      	ldr	r3, [r7, #16]
 8008118:	60bb      	str	r3, [r7, #8]
 800811a:	68bb      	ldr	r3, [r7, #8]
 800811c:	f383 8810 	msr	PRIMASK, r3
 8008120:	bf00      	nop
 8008122:	7dfb      	ldrb	r3, [r7, #23]
 8008124:	4618      	mov	r0, r3
 8008126:	371c      	adds	r7, #28
 8008128:	46bd      	mov	sp, r7
 800812a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812e:	4770      	bx	lr

08008130 <LST_insert_head>:
 8008130:	b480      	push	{r7}
 8008132:	b087      	sub	sp, #28
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
 8008138:	6039      	str	r1, [r7, #0]
 800813a:	f3ef 8310 	mrs	r3, PRIMASK
 800813e:	60fb      	str	r3, [r7, #12]
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	617b      	str	r3, [r7, #20]
 8008144:	b672      	cpsid	i
 8008146:	bf00      	nop
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681a      	ldr	r2, [r3, #0]
 800814c:	683b      	ldr	r3, [r7, #0]
 800814e:	601a      	str	r2, [r3, #0]
 8008150:	683b      	ldr	r3, [r7, #0]
 8008152:	687a      	ldr	r2, [r7, #4]
 8008154:	605a      	str	r2, [r3, #4]
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	683a      	ldr	r2, [r7, #0]
 800815a:	601a      	str	r2, [r3, #0]
 800815c:	683b      	ldr	r3, [r7, #0]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	683a      	ldr	r2, [r7, #0]
 8008162:	605a      	str	r2, [r3, #4]
 8008164:	697b      	ldr	r3, [r7, #20]
 8008166:	613b      	str	r3, [r7, #16]
 8008168:	693b      	ldr	r3, [r7, #16]
 800816a:	f383 8810 	msr	PRIMASK, r3
 800816e:	bf00      	nop
 8008170:	bf00      	nop
 8008172:	371c      	adds	r7, #28
 8008174:	46bd      	mov	sp, r7
 8008176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817a:	4770      	bx	lr

0800817c <LST_insert_tail>:
 800817c:	b480      	push	{r7}
 800817e:	b087      	sub	sp, #28
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]
 8008184:	6039      	str	r1, [r7, #0]
 8008186:	f3ef 8310 	mrs	r3, PRIMASK
 800818a:	60fb      	str	r3, [r7, #12]
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	617b      	str	r3, [r7, #20]
 8008190:	b672      	cpsid	i
 8008192:	bf00      	nop
 8008194:	683b      	ldr	r3, [r7, #0]
 8008196:	687a      	ldr	r2, [r7, #4]
 8008198:	601a      	str	r2, [r3, #0]
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	685a      	ldr	r2, [r3, #4]
 800819e:	683b      	ldr	r3, [r7, #0]
 80081a0:	605a      	str	r2, [r3, #4]
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	683a      	ldr	r2, [r7, #0]
 80081a6:	605a      	str	r2, [r3, #4]
 80081a8:	683b      	ldr	r3, [r7, #0]
 80081aa:	685b      	ldr	r3, [r3, #4]
 80081ac:	683a      	ldr	r2, [r7, #0]
 80081ae:	601a      	str	r2, [r3, #0]
 80081b0:	697b      	ldr	r3, [r7, #20]
 80081b2:	613b      	str	r3, [r7, #16]
 80081b4:	693b      	ldr	r3, [r7, #16]
 80081b6:	f383 8810 	msr	PRIMASK, r3
 80081ba:	bf00      	nop
 80081bc:	bf00      	nop
 80081be:	371c      	adds	r7, #28
 80081c0:	46bd      	mov	sp, r7
 80081c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c6:	4770      	bx	lr

080081c8 <LST_remove_node>:
 80081c8:	b480      	push	{r7}
 80081ca:	b087      	sub	sp, #28
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
 80081d0:	f3ef 8310 	mrs	r3, PRIMASK
 80081d4:	60fb      	str	r3, [r7, #12]
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	617b      	str	r3, [r7, #20]
 80081da:	b672      	cpsid	i
 80081dc:	bf00      	nop
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	685b      	ldr	r3, [r3, #4]
 80081e2:	687a      	ldr	r2, [r7, #4]
 80081e4:	6812      	ldr	r2, [r2, #0]
 80081e6:	601a      	str	r2, [r3, #0]
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	687a      	ldr	r2, [r7, #4]
 80081ee:	6852      	ldr	r2, [r2, #4]
 80081f0:	605a      	str	r2, [r3, #4]
 80081f2:	697b      	ldr	r3, [r7, #20]
 80081f4:	613b      	str	r3, [r7, #16]
 80081f6:	693b      	ldr	r3, [r7, #16]
 80081f8:	f383 8810 	msr	PRIMASK, r3
 80081fc:	bf00      	nop
 80081fe:	bf00      	nop
 8008200:	371c      	adds	r7, #28
 8008202:	46bd      	mov	sp, r7
 8008204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008208:	4770      	bx	lr

0800820a <LST_remove_head>:
 800820a:	b580      	push	{r7, lr}
 800820c:	b086      	sub	sp, #24
 800820e:	af00      	add	r7, sp, #0
 8008210:	6078      	str	r0, [r7, #4]
 8008212:	6039      	str	r1, [r7, #0]
 8008214:	f3ef 8310 	mrs	r3, PRIMASK
 8008218:	60fb      	str	r3, [r7, #12]
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	617b      	str	r3, [r7, #20]
 800821e:	b672      	cpsid	i
 8008220:	bf00      	nop
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681a      	ldr	r2, [r3, #0]
 8008226:	683b      	ldr	r3, [r7, #0]
 8008228:	601a      	str	r2, [r3, #0]
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	4618      	mov	r0, r3
 8008230:	f7ff ffca 	bl	80081c8 <LST_remove_node>
 8008234:	697b      	ldr	r3, [r7, #20]
 8008236:	613b      	str	r3, [r7, #16]
 8008238:	693b      	ldr	r3, [r7, #16]
 800823a:	f383 8810 	msr	PRIMASK, r3
 800823e:	bf00      	nop
 8008240:	bf00      	nop
 8008242:	3718      	adds	r7, #24
 8008244:	46bd      	mov	sp, r7
 8008246:	bd80      	pop	{r7, pc}

08008248 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8008248:	b480      	push	{r7}
 800824a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 800824c:	4b03      	ldr	r3, [pc, #12]	; (800825c <LL_FLASH_GetUDN+0x14>)
 800824e:	681b      	ldr	r3, [r3, #0]
}
 8008250:	4618      	mov	r0, r3
 8008252:	46bd      	mov	sp, r7
 8008254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008258:	4770      	bx	lr
 800825a:	bf00      	nop
 800825c:	1fff7580 	.word	0x1fff7580

08008260 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8008260:	b480      	push	{r7}
 8008262:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8008264:	4b03      	ldr	r3, [pc, #12]	; (8008274 <LL_FLASH_GetDeviceID+0x14>)
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	b2db      	uxtb	r3, r3
}
 800826a:	4618      	mov	r0, r3
 800826c:	46bd      	mov	sp, r7
 800826e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008272:	4770      	bx	lr
 8008274:	1fff7584 	.word	0x1fff7584

08008278 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8008278:	b480      	push	{r7}
 800827a:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 800827c:	4b03      	ldr	r3, [pc, #12]	; (800828c <LL_FLASH_GetSTCompanyID+0x14>)
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	0a1b      	lsrs	r3, r3, #8
}
 8008282:	4618      	mov	r0, r3
 8008284:	46bd      	mov	sp, r7
 8008286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828a:	4770      	bx	lr
 800828c:	1fff7584 	.word	0x1fff7584

08008290 <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 8008290:	b5b0      	push	{r4, r5, r7, lr}
 8008292:	b090      	sub	sp, #64	; 0x40
 8008294:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
#if (RADIO_ACTIVITY_EVENT != 0)
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8008296:	2392      	movs	r3, #146	; 0x92
 8008298:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#endif /* RADIO_ACTIVITY_EVENT != 0 */
  /* USER CODE BEGIN APP_BLE_Init_1 */

  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 800829c:	4b25      	ldr	r3, [pc, #148]	; (8008334 <APP_BLE_Init+0xa4>)
 800829e:	1d3c      	adds	r4, r7, #4
 80082a0:	461d      	mov	r5, r3
 80082a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80082a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80082a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80082a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80082aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80082ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80082ae:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80082b2:	c403      	stmia	r4!, {r0, r1}
 80082b4:	8022      	strh	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 80082b6:	f000 f905 	bl	80084c4 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 80082ba:	2101      	movs	r1, #1
 80082bc:	2002      	movs	r0, #2
 80082be:	f000 fde9 	bl	8008e94 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 80082c2:	4a1d      	ldr	r2, [pc, #116]	; (8008338 <APP_BLE_Init+0xa8>)
 80082c4:	2100      	movs	r1, #0
 80082c6:	2002      	movs	r0, #2
 80082c8:	f000 ff10 	bl	80090ec <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 80082cc:	1d3b      	adds	r3, r7, #4
 80082ce:	4618      	mov	r0, r3
 80082d0:	f7ff f8d0 	bl	8007474 <SHCI_C2_BLE_Init>
 80082d4:	4603      	mov	r3, r0
 80082d6:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  if (status != SHCI_Success)
 80082da:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d001      	beq.n	80082e6 <APP_BLE_Init+0x56>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 80082e2:	f7f9 fcd9 	bl	8001c98 <Error_Handler>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 80082e6:	f000 f903 	bl	80084f0 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 80082ea:	f7ff f81d 	bl	8007328 <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 80082ee:	4b13      	ldr	r3, [pc, #76]	; (800833c <APP_BLE_Init+0xac>)
 80082f0:	2200      	movs	r2, #0
 80082f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 80082f6:	4b11      	ldr	r3, [pc, #68]	; (800833c <APP_BLE_Init+0xac>)
 80082f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80082fc:	82da      	strh	r2, [r3, #22]

  /**
   * From here, all initialization are BLE application specific
   */

  UTIL_SEQ_RegTask(1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 80082fe:	4a10      	ldr	r2, [pc, #64]	; (8008340 <APP_BLE_Init+0xb0>)
 8008300:	2100      	movs	r1, #0
 8008302:	2001      	movs	r0, #1
 8008304:	f000 fef2 	bl	80090ec <UTIL_SEQ_RegTask>

  /**
   * Initialization of ADV - Ad Manufacturer Element - Support OTA Bit Mask
   */
#if (RADIO_ACTIVITY_EVENT != 0)
  ret = aci_hal_set_radio_activity_mask(0x0006);
 8008308:	2006      	movs	r0, #6
 800830a:	f7fe fe80 	bl	800700e <aci_hal_set_radio_activity_mask>
 800830e:	4603      	mov	r3, r0
 8008310:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

  /**
   * Initialize Custom Template Application
   */
  Custom_APP_Init();
 8008314:	f000 fa9b 	bl	800884e <Custom_APP_Init>
  /* USER CODE END APP_BLE_Init_3 */

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 8008318:	4b08      	ldr	r3, [pc, #32]	; (800833c <APP_BLE_Init+0xac>)
 800831a:	2200      	movs	r2, #0
 800831c:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 800831e:	4b07      	ldr	r3, [pc, #28]	; (800833c <APP_BLE_Init+0xac>)
 8008320:	2200      	movs	r2, #0
 8008322:	761a      	strb	r2, [r3, #24]

  /**
   * Start to Advertise to be connected by a Client
   */
  Adv_Request(APP_BLE_FAST_ADV);
 8008324:	2001      	movs	r0, #1
 8008326:	f000 f997 	bl	8008658 <Adv_Request>

  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */

  return;
 800832a:	bf00      	nop
}
 800832c:	3740      	adds	r7, #64	; 0x40
 800832e:	46bd      	mov	sp, r7
 8008330:	bdb0      	pop	{r4, r5, r7, pc}
 8008332:	bf00      	nop
 8008334:	0800a384 	.word	0x0800a384
 8008338:	08007691 	.word	0x08007691
 800833c:	20000bdc 	.word	0x20000bdc
 8008340:	08008741 	.word	0x08008741

08008344 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 8008344:	b580      	push	{r7, lr}
 8008346:	b08a      	sub	sp, #40	; 0x28
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
  hci_event_pckt    *p_event_pckt;
  evt_le_meta_event *p_meta_evt;
  evt_blecore_aci   *p_blecore_evt;
  tBleStatus        ret = BLE_STATUS_INVALID_PARAMS;
 800834c:	2392      	movs	r3, #146	; 0x92
 800834e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	3301      	adds	r3, #1
 8008356:	623b      	str	r3, [r7, #32]

  switch (p_event_pckt->evt)
 8008358:	6a3b      	ldr	r3, [r7, #32]
 800835a:	781b      	ldrb	r3, [r3, #0]
 800835c:	2bff      	cmp	r3, #255	; 0xff
 800835e:	d053      	beq.n	8008408 <SVCCTL_App_Notification+0xc4>
 8008360:	2bff      	cmp	r3, #255	; 0xff
 8008362:	f300 80a1 	bgt.w	80084a8 <SVCCTL_App_Notification+0x164>
 8008366:	2b05      	cmp	r3, #5
 8008368:	d002      	beq.n	8008370 <SVCCTL_App_Notification+0x2c>
 800836a:	2b3e      	cmp	r3, #62	; 0x3e
 800836c:	d020      	beq.n	80083b0 <SVCCTL_App_Notification+0x6c>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 800836e:	e09b      	b.n	80084a8 <SVCCTL_App_Notification+0x164>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
 8008370:	6a3b      	ldr	r3, [r7, #32]
 8008372:	3302      	adds	r3, #2
 8008374:	60fb      	str	r3, [r7, #12]
      if (p_disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800837c:	b29a      	uxth	r2, r3
 800837e:	4b4e      	ldr	r3, [pc, #312]	; (80084b8 <SVCCTL_App_Notification+0x174>)
 8008380:	8adb      	ldrh	r3, [r3, #22]
 8008382:	429a      	cmp	r2, r3
 8008384:	d106      	bne.n	8008394 <SVCCTL_App_Notification+0x50>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 8008386:	4b4c      	ldr	r3, [pc, #304]	; (80084b8 <SVCCTL_App_Notification+0x174>)
 8008388:	2200      	movs	r2, #0
 800838a:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800838c:	4b4a      	ldr	r3, [pc, #296]	; (80084b8 <SVCCTL_App_Notification+0x174>)
 800838e:	2200      	movs	r2, #0
 8008390:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
      Adv_Request(APP_BLE_FAST_ADV);
 8008394:	2001      	movs	r0, #1
 8008396:	f000 f95f 	bl	8008658 <Adv_Request>
      HandleNotification.Custom_Evt_Opcode = CUSTOM_DISCON_HANDLE_EVT;
 800839a:	4b48      	ldr	r3, [pc, #288]	; (80084bc <SVCCTL_App_Notification+0x178>)
 800839c:	2201      	movs	r2, #1
 800839e:	701a      	strb	r2, [r3, #0]
      HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 80083a0:	4b45      	ldr	r3, [pc, #276]	; (80084b8 <SVCCTL_App_Notification+0x174>)
 80083a2:	8ada      	ldrh	r2, [r3, #22]
 80083a4:	4b45      	ldr	r3, [pc, #276]	; (80084bc <SVCCTL_App_Notification+0x178>)
 80083a6:	805a      	strh	r2, [r3, #2]
      Custom_APP_Notification(&HandleNotification);
 80083a8:	4844      	ldr	r0, [pc, #272]	; (80084bc <SVCCTL_App_Notification+0x178>)
 80083aa:	f000 fa3c 	bl	8008826 <Custom_APP_Notification>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 80083ae:	e07e      	b.n	80084ae <SVCCTL_App_Notification+0x16a>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 80083b0:	6a3b      	ldr	r3, [r7, #32]
 80083b2:	3302      	adds	r3, #2
 80083b4:	617b      	str	r3, [r7, #20]
      switch (p_meta_evt->subevent)
 80083b6:	697b      	ldr	r3, [r7, #20]
 80083b8:	781b      	ldrb	r3, [r3, #0]
 80083ba:	2b01      	cmp	r3, #1
 80083bc:	d001      	beq.n	80083c2 <SVCCTL_App_Notification+0x7e>
 80083be:	2b03      	cmp	r3, #3
          break;
 80083c0:	e021      	b.n	8008406 <SVCCTL_App_Notification+0xc2>
          p_connection_complete_event = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
 80083c2:	697b      	ldr	r3, [r7, #20]
 80083c4:	3301      	adds	r3, #1
 80083c6:	613b      	str	r3, [r7, #16]
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 80083c8:	4b3b      	ldr	r3, [pc, #236]	; (80084b8 <SVCCTL_App_Notification+0x174>)
 80083ca:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80083ce:	2b04      	cmp	r3, #4
 80083d0:	d104      	bne.n	80083dc <SVCCTL_App_Notification+0x98>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 80083d2:	4b39      	ldr	r3, [pc, #228]	; (80084b8 <SVCCTL_App_Notification+0x174>)
 80083d4:	2206      	movs	r2, #6
 80083d6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 80083da:	e003      	b.n	80083e4 <SVCCTL_App_Notification+0xa0>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 80083dc:	4b36      	ldr	r3, [pc, #216]	; (80084b8 <SVCCTL_App_Notification+0x174>)
 80083de:	2205      	movs	r2, #5
 80083e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_connection_complete_event->Connection_Handle;
 80083e4:	693b      	ldr	r3, [r7, #16]
 80083e6:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80083ea:	b29a      	uxth	r2, r3
 80083ec:	4b32      	ldr	r3, [pc, #200]	; (80084b8 <SVCCTL_App_Notification+0x174>)
 80083ee:	82da      	strh	r2, [r3, #22]
          HandleNotification.Custom_Evt_Opcode = CUSTOM_CONN_HANDLE_EVT;
 80083f0:	4b32      	ldr	r3, [pc, #200]	; (80084bc <SVCCTL_App_Notification+0x178>)
 80083f2:	2200      	movs	r2, #0
 80083f4:	701a      	strb	r2, [r3, #0]
          HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 80083f6:	4b30      	ldr	r3, [pc, #192]	; (80084b8 <SVCCTL_App_Notification+0x174>)
 80083f8:	8ada      	ldrh	r2, [r3, #22]
 80083fa:	4b30      	ldr	r3, [pc, #192]	; (80084bc <SVCCTL_App_Notification+0x178>)
 80083fc:	805a      	strh	r2, [r3, #2]
          Custom_APP_Notification(&HandleNotification);
 80083fe:	482f      	ldr	r0, [pc, #188]	; (80084bc <SVCCTL_App_Notification+0x178>)
 8008400:	f000 fa11 	bl	8008826 <Custom_APP_Notification>
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 8008404:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 8008406:	e052      	b.n	80084ae <SVCCTL_App_Notification+0x16a>
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 8008408:	6a3b      	ldr	r3, [r7, #32]
 800840a:	3302      	adds	r3, #2
 800840c:	61fb      	str	r3, [r7, #28]
      switch (p_blecore_evt->ecode)
 800840e:	69fb      	ldr	r3, [r7, #28]
 8008410:	881b      	ldrh	r3, [r3, #0]
 8008412:	b29b      	uxth	r3, r3
 8008414:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008418:	d040      	beq.n	800849c <SVCCTL_App_Notification+0x158>
 800841a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800841e:	dc45      	bgt.n	80084ac <SVCCTL_App_Notification+0x168>
 8008420:	2b04      	cmp	r3, #4
 8008422:	d03d      	beq.n	80084a0 <SVCCTL_App_Notification+0x15c>
 8008424:	2b04      	cmp	r3, #4
 8008426:	db41      	blt.n	80084ac <SVCCTL_App_Notification+0x168>
 8008428:	f240 420a 	movw	r2, #1034	; 0x40a
 800842c:	4293      	cmp	r3, r2
 800842e:	dc3d      	bgt.n	80084ac <SVCCTL_App_Notification+0x168>
 8008430:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008434:	dd3a      	ble.n	80084ac <SVCCTL_App_Notification+0x168>
 8008436:	f2a3 4301 	subw	r3, r3, #1025	; 0x401
 800843a:	2b09      	cmp	r3, #9
 800843c:	d836      	bhi.n	80084ac <SVCCTL_App_Notification+0x168>
 800843e:	a201      	add	r2, pc, #4	; (adr r2, 8008444 <SVCCTL_App_Notification+0x100>)
 8008440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008444:	08008495 	.word	0x08008495
 8008448:	0800846d 	.word	0x0800846d
 800844c:	080084ad 	.word	0x080084ad
 8008450:	080084ad 	.word	0x080084ad
 8008454:	080084ad 	.word	0x080084ad
 8008458:	080084ad 	.word	0x080084ad
 800845c:	080084a5 	.word	0x080084a5
 8008460:	080084ad 	.word	0x080084ad
 8008464:	08008481 	.word	0x08008481
 8008468:	080084a5 	.word	0x080084a5
          ret = aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, CFG_FIXED_PIN);
 800846c:	4b12      	ldr	r3, [pc, #72]	; (80084b8 <SVCCTL_App_Notification+0x174>)
 800846e:	8adb      	ldrh	r3, [r3, #22]
 8008470:	4913      	ldr	r1, [pc, #76]	; (80084c0 <SVCCTL_App_Notification+0x17c>)
 8008472:	4618      	mov	r0, r3
 8008474:	f7fe f822 	bl	80064bc <aci_gap_pass_key_resp>
 8008478:	4603      	mov	r3, r0
 800847a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          break;
 800847e:	e012      	b.n	80084a6 <SVCCTL_App_Notification+0x162>
          ret = aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES);
 8008480:	4b0d      	ldr	r3, [pc, #52]	; (80084b8 <SVCCTL_App_Notification+0x174>)
 8008482:	8adb      	ldrh	r3, [r3, #22]
 8008484:	2101      	movs	r1, #1
 8008486:	4618      	mov	r0, r3
 8008488:	f7fe f9c2 	bl	8006810 <aci_gap_numeric_comparison_value_confirm_yesno>
 800848c:	4603      	mov	r3, r0
 800848e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          break;
 8008492:	e008      	b.n	80084a6 <SVCCTL_App_Notification+0x162>
          p_pairing_complete = (aci_gap_pairing_complete_event_rp0*)p_blecore_evt->data;
 8008494:	69fb      	ldr	r3, [r7, #28]
 8008496:	3302      	adds	r3, #2
 8008498:	61bb      	str	r3, [r7, #24]
          break;
 800849a:	e004      	b.n	80084a6 <SVCCTL_App_Notification+0x162>
          break;
 800849c:	bf00      	nop
 800849e:	e005      	b.n	80084ac <SVCCTL_App_Notification+0x168>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 80084a0:	bf00      	nop
 80084a2:	e003      	b.n	80084ac <SVCCTL_App_Notification+0x168>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 80084a4:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 80084a6:	e001      	b.n	80084ac <SVCCTL_App_Notification+0x168>
      break;
 80084a8:	bf00      	nop
 80084aa:	e000      	b.n	80084ae <SVCCTL_App_Notification+0x16a>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 80084ac:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 80084ae:	2301      	movs	r3, #1
}
 80084b0:	4618      	mov	r0, r3
 80084b2:	3728      	adds	r7, #40	; 0x28
 80084b4:	46bd      	mov	sp, r7
 80084b6:	bd80      	pop	{r7, pc}
 80084b8:	20000bdc 	.word	0x20000bdc
 80084bc:	20000c60 	.word	0x20000c60
 80084c0:	0001b207 	.word	0x0001b207

080084c4 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 80084c4:	b580      	push	{r7, lr}
 80084c6:	b082      	sub	sp, #8
 80084c8:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 80084ca:	4b06      	ldr	r3, [pc, #24]	; (80084e4 <Ble_Tl_Init+0x20>)
 80084cc:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 80084ce:	4b06      	ldr	r3, [pc, #24]	; (80084e8 <Ble_Tl_Init+0x24>)
 80084d0:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 80084d2:	463b      	mov	r3, r7
 80084d4:	4619      	mov	r1, r3
 80084d6:	4805      	ldr	r0, [pc, #20]	; (80084ec <Ble_Tl_Init+0x28>)
 80084d8:	f7ff f8be 	bl	8007658 <hci_init>

  return;
 80084dc:	bf00      	nop
}
 80084de:	3708      	adds	r7, #8
 80084e0:	46bd      	mov	sp, r7
 80084e2:	bd80      	pop	{r7, pc}
 80084e4:	200300d8 	.word	0x200300d8
 80084e8:	080087f1 	.word	0x080087f1
 80084ec:	080087b9 	.word	0x080087b9

080084f0 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 80084f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80084f2:	b08d      	sub	sp, #52	; 0x34
 80084f4:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 80084f6:	2300      	movs	r3, #0
 80084f8:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 80084fa:	2392      	movs	r3, #146	; 0x92
 80084fc:	75fb      	strb	r3, [r7, #23]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 80084fe:	f7fe fdda 	bl	80070b6 <hci_reset>
 8008502:	4603      	mov	r3, r0
 8008504:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 8008506:	f000 f8d7 	bl	80086b8 <BleGetBdAddress>
 800850a:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 800850c:	693a      	ldr	r2, [r7, #16]
 800850e:	2106      	movs	r1, #6
 8008510:	2000      	movs	r0, #0
 8008512:	f7fe fc90 	bl	8006e36 <aci_hal_write_config_data>
 8008516:	4603      	mov	r3, r0
 8008518:	75fb      	strb	r3, [r7, #23]
#endif /* CFG_BLE_ADDRESS_TYPE != GAP_PUBLIC_ADDR */

  /**
   * Write Identity root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 800851a:	4a4a      	ldr	r2, [pc, #296]	; (8008644 <Ble_Hci_Gap_Gatt_Init+0x154>)
 800851c:	2110      	movs	r1, #16
 800851e:	2018      	movs	r0, #24
 8008520:	f7fe fc89 	bl	8006e36 <aci_hal_write_config_data>
 8008524:	4603      	mov	r3, r0
 8008526:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 8008528:	4a47      	ldr	r2, [pc, #284]	; (8008648 <Ble_Hci_Gap_Gatt_Init+0x158>)
 800852a:	2110      	movs	r1, #16
 800852c:	2008      	movs	r0, #8
 800852e:	f7fe fc82 	bl	8006e36 <aci_hal_write_config_data>
 8008532:	4603      	mov	r3, r0
 8008534:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 8008536:	2118      	movs	r1, #24
 8008538:	2001      	movs	r0, #1
 800853a:	f7fe fd01 	bl	8006f40 <aci_hal_set_tx_power_level>
 800853e:	4603      	mov	r3, r0
 8008540:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 8008542:	f7fe f9cc 	bl	80068de <aci_gatt_init>
 8008546:	4603      	mov	r3, r0
 8008548:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 800854a:	2300      	movs	r3, #0
 800854c:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 800854e:	7bfb      	ldrb	r3, [r7, #15]
 8008550:	f043 0301 	orr.w	r3, r3, #1
 8008554:	73fb      	strb	r3, [r7, #15]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  if (role > 0)
 8008556:	7bfb      	ldrb	r3, [r7, #15]
 8008558:	2b00      	cmp	r3, #0
 800855a:	d01f      	beq.n	800859c <Ble_Hci_Gap_Gatt_Init+0xac>
  {
    const char *name = CFG_GAP_DEVICE_NAME;
 800855c:	4b3b      	ldr	r3, [pc, #236]	; (800864c <Ble_Hci_Gap_Gatt_Init+0x15c>)
 800855e:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 8008560:	1dba      	adds	r2, r7, #6
 8008562:	7bf8      	ldrb	r0, [r7, #15]
 8008564:	1cbb      	adds	r3, r7, #2
 8008566:	9301      	str	r3, [sp, #4]
 8008568:	1d3b      	adds	r3, r7, #4
 800856a:	9300      	str	r3, [sp, #0]
 800856c:	4613      	mov	r3, r2
 800856e:	2208      	movs	r2, #8
 8008570:	2100      	movs	r1, #0
 8008572:	f7fe f80a 	bl	800658a <aci_gap_init>
 8008576:	4603      	mov	r3, r0
 8008578:	75fb      	strb	r3, [r7, #23]
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 800857a:	88fc      	ldrh	r4, [r7, #6]
 800857c:	88bd      	ldrh	r5, [r7, #4]
 800857e:	68b8      	ldr	r0, [r7, #8]
 8008580:	f7f7 fdfe 	bl	8000180 <strlen>
 8008584:	4603      	mov	r3, r0
 8008586:	b2da      	uxtb	r2, r3
 8008588:	68bb      	ldr	r3, [r7, #8]
 800858a:	9300      	str	r3, [sp, #0]
 800858c:	4613      	mov	r3, r2
 800858e:	2200      	movs	r2, #0
 8008590:	4629      	mov	r1, r5
 8008592:	4620      	mov	r0, r4
 8008594:	f7fe fba6 	bl	8006ce4 <aci_gatt_update_char_value>
 8008598:	4603      	mov	r3, r0
 800859a:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 800859c:	88f8      	ldrh	r0, [r7, #6]
 800859e:	8879      	ldrh	r1, [r7, #2]
 80085a0:	463b      	mov	r3, r7
 80085a2:	9300      	str	r3, [sp, #0]
 80085a4:	2302      	movs	r3, #2
 80085a6:	2200      	movs	r2, #0
 80085a8:	f7fe fb9c 	bl	8006ce4 <aci_gatt_update_char_value>
 80085ac:	4603      	mov	r3, r0
 80085ae:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize Default PHY
   */
  ret = hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 80085b0:	2202      	movs	r2, #2
 80085b2:	2102      	movs	r1, #2
 80085b4:	2000      	movs	r0, #0
 80085b6:	f7fe fda2 	bl	80070fe <hci_le_set_default_phy>
 80085ba:	4603      	mov	r3, r0
 80085bc:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 80085be:	4b24      	ldr	r3, [pc, #144]	; (8008650 <Ble_Hci_Gap_Gatt_Init+0x160>)
 80085c0:	2201      	movs	r2, #1
 80085c2:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 80085c4:	4b22      	ldr	r3, [pc, #136]	; (8008650 <Ble_Hci_Gap_Gatt_Init+0x160>)
 80085c6:	781b      	ldrb	r3, [r3, #0]
 80085c8:	4618      	mov	r0, r3
 80085ca:	f7fd fe5f 	bl	800628c <aci_gap_set_io_capability>
 80085ce:	4603      	mov	r3, r0
 80085d0:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 80085d2:	4b1f      	ldr	r3, [pc, #124]	; (8008650 <Ble_Hci_Gap_Gatt_Init+0x160>)
 80085d4:	2201      	movs	r2, #1
 80085d6:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 80085d8:	4b1d      	ldr	r3, [pc, #116]	; (8008650 <Ble_Hci_Gap_Gatt_Init+0x160>)
 80085da:	2208      	movs	r2, #8
 80085dc:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 80085de:	4b1c      	ldr	r3, [pc, #112]	; (8008650 <Ble_Hci_Gap_Gatt_Init+0x160>)
 80085e0:	2210      	movs	r2, #16
 80085e2:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 80085e4:	4b1a      	ldr	r3, [pc, #104]	; (8008650 <Ble_Hci_Gap_Gatt_Init+0x160>)
 80085e6:	2200      	movs	r2, #0
 80085e8:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 80085ea:	4b19      	ldr	r3, [pc, #100]	; (8008650 <Ble_Hci_Gap_Gatt_Init+0x160>)
 80085ec:	4a19      	ldr	r2, [pc, #100]	; (8008654 <Ble_Hci_Gap_Gatt_Init+0x164>)
 80085ee:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 80085f0:	4b17      	ldr	r3, [pc, #92]	; (8008650 <Ble_Hci_Gap_Gatt_Init+0x160>)
 80085f2:	2200      	movs	r2, #0
 80085f4:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 80085f6:	4b16      	ldr	r3, [pc, #88]	; (8008650 <Ble_Hci_Gap_Gatt_Init+0x160>)
 80085f8:	789c      	ldrb	r4, [r3, #2]
 80085fa:	4b15      	ldr	r3, [pc, #84]	; (8008650 <Ble_Hci_Gap_Gatt_Init+0x160>)
 80085fc:	785d      	ldrb	r5, [r3, #1]
 80085fe:	4b14      	ldr	r3, [pc, #80]	; (8008650 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8008600:	791b      	ldrb	r3, [r3, #4]
 8008602:	4a13      	ldr	r2, [pc, #76]	; (8008650 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8008604:	7952      	ldrb	r2, [r2, #5]
 8008606:	4912      	ldr	r1, [pc, #72]	; (8008650 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8008608:	78c9      	ldrb	r1, [r1, #3]
 800860a:	4811      	ldr	r0, [pc, #68]	; (8008650 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800860c:	6880      	ldr	r0, [r0, #8]
 800860e:	2600      	movs	r6, #0
 8008610:	9604      	str	r6, [sp, #16]
 8008612:	9003      	str	r0, [sp, #12]
 8008614:	9102      	str	r1, [sp, #8]
 8008616:	9201      	str	r2, [sp, #4]
 8008618:	9300      	str	r3, [sp, #0]
 800861a:	2300      	movs	r3, #0
 800861c:	2201      	movs	r2, #1
 800861e:	4629      	mov	r1, r5
 8008620:	4620      	mov	r0, r4
 8008622:	f7fd fe87 	bl	8006334 <aci_gap_set_authentication_requirement>
 8008626:	4603      	mov	r3, r0
 8008628:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 800862a:	4b09      	ldr	r3, [pc, #36]	; (8008650 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800862c:	789b      	ldrb	r3, [r3, #2]
 800862e:	2b00      	cmp	r3, #0
 8008630:	d003      	beq.n	800863a <Ble_Hci_Gap_Gatt_Init+0x14a>
  {
    ret = aci_gap_configure_whitelist();
 8008632:	f7fe f8c9 	bl	80067c8 <aci_gap_configure_whitelist>
 8008636:	4603      	mov	r3, r0
 8008638:	75fb      	strb	r3, [r7, #23]
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
}
 800863a:	bf00      	nop
 800863c:	371c      	adds	r7, #28
 800863e:	46bd      	mov	sp, r7
 8008640:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008642:	bf00      	nop
 8008644:	0800a5cc 	.word	0x0800a5cc
 8008648:	0800a5dc 	.word	0x0800a5dc
 800864c:	0800a3c0 	.word	0x0800a3c0
 8008650:	20000bdc 	.word	0x20000bdc
 8008654:	0001b207 	.word	0x0001b207

08008658 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t NewStatus)
{
 8008658:	b580      	push	{r7, lr}
 800865a:	b08c      	sub	sp, #48	; 0x30
 800865c:	af08      	add	r7, sp, #32
 800865e:	4603      	mov	r3, r0
 8008660:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8008662:	2392      	movs	r3, #146	; 0x92
 8008664:	73fb      	strb	r3, [r7, #15]

  BleApplicationContext.Device_Connection_Status = NewStatus;
 8008666:	4a12      	ldr	r2, [pc, #72]	; (80086b0 <Adv_Request+0x58>)
 8008668:	79fb      	ldrb	r3, [r7, #7]
 800866a:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
  /* Start Fast or Low Power Advertising */
  ret = aci_gap_set_discoverable(ADV_TYPE,
 800866e:	2300      	movs	r3, #0
 8008670:	9306      	str	r3, [sp, #24]
 8008672:	2300      	movs	r3, #0
 8008674:	9305      	str	r3, [sp, #20]
 8008676:	2300      	movs	r3, #0
 8008678:	9304      	str	r3, [sp, #16]
 800867a:	2300      	movs	r3, #0
 800867c:	9303      	str	r3, [sp, #12]
 800867e:	2300      	movs	r3, #0
 8008680:	9302      	str	r3, [sp, #8]
 8008682:	2300      	movs	r3, #0
 8008684:	9301      	str	r3, [sp, #4]
 8008686:	2300      	movs	r3, #0
 8008688:	9300      	str	r3, [sp, #0]
 800868a:	2300      	movs	r3, #0
 800868c:	22a0      	movs	r2, #160	; 0xa0
 800868e:	2180      	movs	r1, #128	; 0x80
 8008690:	2000      	movs	r0, #0
 8008692:	f7fd fd01 	bl	8006098 <aci_gap_set_discoverable>
 8008696:	4603      	mov	r3, r0
 8008698:	73fb      	strb	r3, [r7, #15]
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - Success\n");
  }

  /* Update Advertising data */
  ret = aci_gap_update_adv_data(sizeof(a_AdvData), (uint8_t*) a_AdvData);
 800869a:	4906      	ldr	r1, [pc, #24]	; (80086b4 <Adv_Request+0x5c>)
 800869c:	2009      	movs	r0, #9
 800869e:	f7fe f821 	bl	80066e4 <aci_gap_update_adv_data>
 80086a2:	4603      	mov	r3, r0
 80086a4:	73fb      	strb	r3, [r7, #15]
  else
  {
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
  }

  return;
 80086a6:	bf00      	nop
}
 80086a8:	3710      	adds	r7, #16
 80086aa:	46bd      	mov	sp, r7
 80086ac:	bd80      	pop	{r7, pc}
 80086ae:	bf00      	nop
 80086b0:	20000bdc 	.word	0x20000bdc
 80086b4:	20000014 	.word	0x20000014

080086b8 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 80086b8:	b580      	push	{r7, lr}
 80086ba:	b086      	sub	sp, #24
 80086bc:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 80086be:	f7ff fdc3 	bl	8008248 <LL_FLASH_GetUDN>
 80086c2:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 80086c4:	693b      	ldr	r3, [r7, #16]
 80086c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80086ca:	d023      	beq.n	8008714 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 80086cc:	f7ff fdd4 	bl	8008278 <LL_FLASH_GetSTCompanyID>
 80086d0:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 80086d2:	f7ff fdc5 	bl	8008260 <LL_FLASH_GetDeviceID>
 80086d6:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 80086d8:	693b      	ldr	r3, [r7, #16]
 80086da:	b2da      	uxtb	r2, r3
 80086dc:	4b16      	ldr	r3, [pc, #88]	; (8008738 <BleGetBdAddress+0x80>)
 80086de:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 80086e0:	693b      	ldr	r3, [r7, #16]
 80086e2:	0a1b      	lsrs	r3, r3, #8
 80086e4:	b2da      	uxtb	r2, r3
 80086e6:	4b14      	ldr	r3, [pc, #80]	; (8008738 <BleGetBdAddress+0x80>)
 80086e8:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	b2da      	uxtb	r2, r3
 80086ee:	4b12      	ldr	r3, [pc, #72]	; (8008738 <BleGetBdAddress+0x80>)
 80086f0:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 80086f2:	68bb      	ldr	r3, [r7, #8]
 80086f4:	b2da      	uxtb	r2, r3
 80086f6:	4b10      	ldr	r3, [pc, #64]	; (8008738 <BleGetBdAddress+0x80>)
 80086f8:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 80086fa:	68bb      	ldr	r3, [r7, #8]
 80086fc:	0a1b      	lsrs	r3, r3, #8
 80086fe:	b2da      	uxtb	r2, r3
 8008700:	4b0d      	ldr	r3, [pc, #52]	; (8008738 <BleGetBdAddress+0x80>)
 8008702:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 8008704:	68bb      	ldr	r3, [r7, #8]
 8008706:	0c1b      	lsrs	r3, r3, #16
 8008708:	b2da      	uxtb	r2, r3
 800870a:	4b0b      	ldr	r3, [pc, #44]	; (8008738 <BleGetBdAddress+0x80>)
 800870c:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 800870e:	4b0a      	ldr	r3, [pc, #40]	; (8008738 <BleGetBdAddress+0x80>)
 8008710:	617b      	str	r3, [r7, #20]
 8008712:	e00b      	b.n	800872c <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 8008714:	2000      	movs	r0, #0
 8008716:	f7ff fcb1 	bl	800807c <OTP_Read>
 800871a:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d002      	beq.n	8008728 <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	617b      	str	r3, [r7, #20]
 8008726:	e001      	b.n	800872c <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 8008728:	4b04      	ldr	r3, [pc, #16]	; (800873c <BleGetBdAddress+0x84>)
 800872a:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 800872c:	697b      	ldr	r3, [r7, #20]
}
 800872e:	4618      	mov	r0, r3
 8008730:	3718      	adds	r7, #24
 8008732:	46bd      	mov	sp, r7
 8008734:	bd80      	pop	{r7, pc}
 8008736:	bf00      	nop
 8008738:	20000bd4 	.word	0x20000bd4
 800873c:	0800a5c4 	.word	0x0800a5c4

08008740 <Adv_Cancel>:
 *
 * SPECIFIC FUNCTIONS FOR CUSTOM
 *
 *************************************************************/
static void Adv_Cancel(void)
{
 8008740:	b580      	push	{r7, lr}
 8008742:	b082      	sub	sp, #8
 8008744:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_1 */

  /* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 8008746:	4b0a      	ldr	r3, [pc, #40]	; (8008770 <Adv_Cancel+0x30>)
 8008748:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800874c:	2b05      	cmp	r3, #5
 800874e:	d00a      	beq.n	8008766 <Adv_Cancel+0x26>
  {
    tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8008750:	2392      	movs	r3, #146	; 0x92
 8008752:	71fb      	strb	r3, [r7, #7]

    ret = aci_gap_set_non_discoverable();
 8008754:	f7fd fc7c 	bl	8006050 <aci_gap_set_non_discoverable>
 8008758:	4603      	mov	r3, r0
 800875a:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800875c:	4b04      	ldr	r3, [pc, #16]	; (8008770 <Adv_Cancel+0x30>)
 800875e:	2200      	movs	r2, #0
 8008760:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* USER CODE BEGIN Adv_Cancel_2 */

  /* USER CODE END Adv_Cancel_2 */

  return;
 8008764:	bf00      	nop
 8008766:	bf00      	nop
}
 8008768:	3708      	adds	r7, #8
 800876a:	46bd      	mov	sp, r7
 800876c:	bd80      	pop	{r7, pc}
 800876e:	bf00      	nop
 8008770:	20000bdc 	.word	0x20000bdc

08008774 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 8008774:	b580      	push	{r7, lr}
 8008776:	b082      	sub	sp, #8
 8008778:	af00      	add	r7, sp, #0
 800877a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 800877c:	2100      	movs	r1, #0
 800877e:	2002      	movs	r0, #2
 8008780:	f000 fcd6 	bl	8009130 <UTIL_SEQ_SetTask>

  return;
 8008784:	bf00      	nop
}
 8008786:	3708      	adds	r7, #8
 8008788:	46bd      	mov	sp, r7
 800878a:	bd80      	pop	{r7, pc}

0800878c <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 800878c:	b580      	push	{r7, lr}
 800878e:	b082      	sub	sp, #8
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8008794:	2001      	movs	r0, #1
 8008796:	f000 fd37 	bl	8009208 <UTIL_SEQ_SetEvt>

  return;
 800879a:	bf00      	nop
}
 800879c:	3708      	adds	r7, #8
 800879e:	46bd      	mov	sp, r7
 80087a0:	bd80      	pop	{r7, pc}

080087a2 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 80087a2:	b580      	push	{r7, lr}
 80087a4:	b082      	sub	sp, #8
 80087a6:	af00      	add	r7, sp, #0
 80087a8:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 80087aa:	2001      	movs	r0, #1
 80087ac:	f000 fd4c 	bl	8009248 <UTIL_SEQ_WaitEvt>

  return;
 80087b0:	bf00      	nop
}
 80087b2:	3708      	adds	r7, #8
 80087b4:	46bd      	mov	sp, r7
 80087b6:	bd80      	pop	{r7, pc}

080087b8 <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 80087b8:	b580      	push	{r7, lr}
 80087ba:	b084      	sub	sp, #16
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	685b      	ldr	r3, [r3, #4]
 80087c8:	3308      	adds	r3, #8
 80087ca:	4618      	mov	r0, r3
 80087cc:	f7fe fdfe 	bl	80073cc <SVCCTL_UserEvtRx>
 80087d0:	4603      	mov	r3, r0
 80087d2:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 80087d4:	7afb      	ldrb	r3, [r7, #11]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d003      	beq.n	80087e2 <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	2201      	movs	r2, #1
 80087de:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 80087e0:	e003      	b.n	80087ea <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	2200      	movs	r2, #0
 80087e6:	701a      	strb	r2, [r3, #0]
  return;
 80087e8:	bf00      	nop
}
 80087ea:	3710      	adds	r7, #16
 80087ec:	46bd      	mov	sp, r7
 80087ee:	bd80      	pop	{r7, pc}

080087f0 <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 80087f0:	b580      	push	{r7, lr}
 80087f2:	b084      	sub	sp, #16
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	4603      	mov	r3, r0
 80087f8:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 80087fa:	79fb      	ldrb	r3, [r7, #7]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d002      	beq.n	8008806 <BLE_StatusNot+0x16>
 8008800:	2b01      	cmp	r3, #1
 8008802:	d006      	beq.n	8008812 <BLE_StatusNot+0x22>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 8008804:	e00b      	b.n	800881e <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8008806:	2303      	movs	r3, #3
 8008808:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 800880a:	68f8      	ldr	r0, [r7, #12]
 800880c:	f000 fcbc 	bl	8009188 <UTIL_SEQ_PauseTask>
      break;
 8008810:	e005      	b.n	800881e <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8008812:	2303      	movs	r3, #3
 8008814:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 8008816:	68f8      	ldr	r0, [r7, #12]
 8008818:	f000 fcd6 	bl	80091c8 <UTIL_SEQ_ResumeTask>
      break;
 800881c:	bf00      	nop
  }

  return;
 800881e:	bf00      	nop
}
 8008820:	3710      	adds	r7, #16
 8008822:	46bd      	mov	sp, r7
 8008824:	bd80      	pop	{r7, pc}

08008826 <Custom_APP_Notification>:
  /* USER CODE END CUSTOM_STM_App_Notification_2 */
  return;
}

void Custom_APP_Notification(Custom_App_ConnHandle_Not_evt_t *pNotification)
{
 8008826:	b480      	push	{r7}
 8008828:	b083      	sub	sp, #12
 800882a:	af00      	add	r7, sp, #0
 800882c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_APP_Notification_1 */

  /* USER CODE END CUSTOM_APP_Notification_1 */

  switch (pNotification->Custom_Evt_Opcode)
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	781b      	ldrb	r3, [r3, #0]
 8008832:	2b00      	cmp	r3, #0
 8008834:	d002      	beq.n	800883c <Custom_APP_Notification+0x16>
 8008836:	2b01      	cmp	r3, #1
 8008838:	d002      	beq.n	8008840 <Custom_APP_Notification+0x1a>

    default:
      /* USER CODE BEGIN CUSTOM_APP_Notification_default */

      /* USER CODE END CUSTOM_APP_Notification_default */
      break;
 800883a:	e002      	b.n	8008842 <Custom_APP_Notification+0x1c>
      break;
 800883c:	bf00      	nop
 800883e:	e000      	b.n	8008842 <Custom_APP_Notification+0x1c>
      break;
 8008840:	bf00      	nop

  /* USER CODE BEGIN CUSTOM_APP_Notification_2 */

  /* USER CODE END CUSTOM_APP_Notification_2 */

  return;
 8008842:	bf00      	nop
}
 8008844:	370c      	adds	r7, #12
 8008846:	46bd      	mov	sp, r7
 8008848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884c:	4770      	bx	lr

0800884e <Custom_APP_Init>:

void Custom_APP_Init(void)
{
 800884e:	b480      	push	{r7}
 8008850:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CUSTOM_APP_Init */

  /* USER CODE END CUSTOM_APP_Init */
  return;
 8008852:	bf00      	nop
}
 8008854:	46bd      	mov	sp, r7
 8008856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885a:	4770      	bx	lr

0800885c <Custom_STM_Event_Handler>:
 800885c:	b480      	push	{r7}
 800885e:	b08b      	sub	sp, #44	; 0x2c
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]
 8008864:	2300      	movs	r3, #0
 8008866:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	3301      	adds	r3, #1
 800886e:	623b      	str	r3, [r7, #32]
 8008870:	6a3b      	ldr	r3, [r7, #32]
 8008872:	781b      	ldrb	r3, [r3, #0]
 8008874:	2bff      	cmp	r3, #255	; 0xff
 8008876:	d12b      	bne.n	80088d0 <Custom_STM_Event_Handler+0x74>
 8008878:	6a3b      	ldr	r3, [r7, #32]
 800887a:	3302      	adds	r3, #2
 800887c:	61fb      	str	r3, [r7, #28]
 800887e:	69fb      	ldr	r3, [r7, #28]
 8008880:	881b      	ldrh	r3, [r3, #0]
 8008882:	b29b      	uxth	r3, r3
 8008884:	f640 4214 	movw	r2, #3092	; 0xc14
 8008888:	4293      	cmp	r3, r2
 800888a:	d01b      	beq.n	80088c4 <Custom_STM_Event_Handler+0x68>
 800888c:	f640 4214 	movw	r2, #3092	; 0xc14
 8008890:	4293      	cmp	r3, r2
 8008892:	dc19      	bgt.n	80088c8 <Custom_STM_Event_Handler+0x6c>
 8008894:	f640 4201 	movw	r2, #3073	; 0xc01
 8008898:	4293      	cmp	r3, r2
 800889a:	d003      	beq.n	80088a4 <Custom_STM_Event_Handler+0x48>
 800889c:	f640 4213 	movw	r2, #3091	; 0xc13
 80088a0:	4293      	cmp	r3, r2
 80088a2:	e014      	b.n	80088ce <Custom_STM_Event_Handler+0x72>
 80088a4:	69fb      	ldr	r3, [r7, #28]
 80088a6:	3302      	adds	r3, #2
 80088a8:	61bb      	str	r3, [r7, #24]
 80088aa:	69bb      	ldr	r3, [r7, #24]
 80088ac:	885b      	ldrh	r3, [r3, #2]
 80088ae:	b29b      	uxth	r3, r3
 80088b0:	461a      	mov	r2, r3
 80088b2:	4b0c      	ldr	r3, [pc, #48]	; (80088e4 <Custom_STM_Event_Handler+0x88>)
 80088b4:	885b      	ldrh	r3, [r3, #2]
 80088b6:	3301      	adds	r3, #1
 80088b8:	429a      	cmp	r2, r3
 80088ba:	d107      	bne.n	80088cc <Custom_STM_Event_Handler+0x70>
 80088bc:	2301      	movs	r3, #1
 80088be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80088c2:	e003      	b.n	80088cc <Custom_STM_Event_Handler+0x70>
 80088c4:	bf00      	nop
 80088c6:	e004      	b.n	80088d2 <Custom_STM_Event_Handler+0x76>
 80088c8:	bf00      	nop
 80088ca:	e002      	b.n	80088d2 <Custom_STM_Event_Handler+0x76>
 80088cc:	bf00      	nop
 80088ce:	e000      	b.n	80088d2 <Custom_STM_Event_Handler+0x76>
 80088d0:	bf00      	nop
 80088d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80088d6:	4618      	mov	r0, r3
 80088d8:	372c      	adds	r7, #44	; 0x2c
 80088da:	46bd      	mov	sp, r7
 80088dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e0:	4770      	bx	lr
 80088e2:	bf00      	nop
 80088e4:	20000c64 	.word	0x20000c64

080088e8 <SVCCTL_InitCustomSvc>:
 80088e8:	b580      	push	{r7, lr}
 80088ea:	b08c      	sub	sp, #48	; 0x30
 80088ec:	af06      	add	r7, sp, #24
 80088ee:	2392      	movs	r3, #146	; 0x92
 80088f0:	75fb      	strb	r3, [r7, #23]
 80088f2:	4834      	ldr	r0, [pc, #208]	; (80089c4 <SVCCTL_InitCustomSvc+0xdc>)
 80088f4:	f7fe fd50 	bl	8007398 <SVCCTL_RegisterSvcHandler>
 80088f8:	238f      	movs	r3, #143	; 0x8f
 80088fa:	713b      	strb	r3, [r7, #4]
 80088fc:	23e5      	movs	r3, #229	; 0xe5
 80088fe:	717b      	strb	r3, [r7, #5]
 8008900:	23b3      	movs	r3, #179	; 0xb3
 8008902:	71bb      	strb	r3, [r7, #6]
 8008904:	23d5      	movs	r3, #213	; 0xd5
 8008906:	71fb      	strb	r3, [r7, #7]
 8008908:	232e      	movs	r3, #46	; 0x2e
 800890a:	723b      	strb	r3, [r7, #8]
 800890c:	237f      	movs	r3, #127	; 0x7f
 800890e:	727b      	strb	r3, [r7, #9]
 8008910:	234a      	movs	r3, #74	; 0x4a
 8008912:	72bb      	strb	r3, [r7, #10]
 8008914:	2398      	movs	r3, #152	; 0x98
 8008916:	72fb      	strb	r3, [r7, #11]
 8008918:	232a      	movs	r3, #42	; 0x2a
 800891a:	733b      	strb	r3, [r7, #12]
 800891c:	2348      	movs	r3, #72	; 0x48
 800891e:	737b      	strb	r3, [r7, #13]
 8008920:	237a      	movs	r3, #122	; 0x7a
 8008922:	73bb      	strb	r3, [r7, #14]
 8008924:	23cc      	movs	r3, #204	; 0xcc
 8008926:	73fb      	strb	r3, [r7, #15]
 8008928:	2300      	movs	r3, #0
 800892a:	743b      	strb	r3, [r7, #16]
 800892c:	2300      	movs	r3, #0
 800892e:	747b      	strb	r3, [r7, #17]
 8008930:	2300      	movs	r3, #0
 8008932:	74bb      	strb	r3, [r7, #18]
 8008934:	2300      	movs	r3, #0
 8008936:	74fb      	strb	r3, [r7, #19]
 8008938:	1d39      	adds	r1, r7, #4
 800893a:	4b23      	ldr	r3, [pc, #140]	; (80089c8 <SVCCTL_InitCustomSvc+0xe0>)
 800893c:	9300      	str	r3, [sp, #0]
 800893e:	2303      	movs	r3, #3
 8008940:	2201      	movs	r2, #1
 8008942:	2002      	movs	r0, #2
 8008944:	f7fd fff0 	bl	8006928 <aci_gatt_add_service>
 8008948:	4603      	mov	r3, r0
 800894a:	75fb      	strb	r3, [r7, #23]
 800894c:	2319      	movs	r3, #25
 800894e:	713b      	strb	r3, [r7, #4]
 8008950:	23ed      	movs	r3, #237	; 0xed
 8008952:	717b      	strb	r3, [r7, #5]
 8008954:	2382      	movs	r3, #130	; 0x82
 8008956:	71bb      	strb	r3, [r7, #6]
 8008958:	23ae      	movs	r3, #174	; 0xae
 800895a:	71fb      	strb	r3, [r7, #7]
 800895c:	23ed      	movs	r3, #237	; 0xed
 800895e:	723b      	strb	r3, [r7, #8]
 8008960:	2321      	movs	r3, #33	; 0x21
 8008962:	727b      	strb	r3, [r7, #9]
 8008964:	234c      	movs	r3, #76	; 0x4c
 8008966:	72bb      	strb	r3, [r7, #10]
 8008968:	239d      	movs	r3, #157	; 0x9d
 800896a:	72fb      	strb	r3, [r7, #11]
 800896c:	2341      	movs	r3, #65	; 0x41
 800896e:	733b      	strb	r3, [r7, #12]
 8008970:	2345      	movs	r3, #69	; 0x45
 8008972:	737b      	strb	r3, [r7, #13]
 8008974:	2322      	movs	r3, #34	; 0x22
 8008976:	73bb      	strb	r3, [r7, #14]
 8008978:	238e      	movs	r3, #142	; 0x8e
 800897a:	73fb      	strb	r3, [r7, #15]
 800897c:	2300      	movs	r3, #0
 800897e:	743b      	strb	r3, [r7, #16]
 8008980:	2300      	movs	r3, #0
 8008982:	747b      	strb	r3, [r7, #17]
 8008984:	2300      	movs	r3, #0
 8008986:	74bb      	strb	r3, [r7, #18]
 8008988:	2300      	movs	r3, #0
 800898a:	74fb      	strb	r3, [r7, #19]
 800898c:	4b0e      	ldr	r3, [pc, #56]	; (80089c8 <SVCCTL_InitCustomSvc+0xe0>)
 800898e:	8818      	ldrh	r0, [r3, #0]
 8008990:	4b0e      	ldr	r3, [pc, #56]	; (80089cc <SVCCTL_InitCustomSvc+0xe4>)
 8008992:	781b      	ldrb	r3, [r3, #0]
 8008994:	b29b      	uxth	r3, r3
 8008996:	1d3a      	adds	r2, r7, #4
 8008998:	490d      	ldr	r1, [pc, #52]	; (80089d0 <SVCCTL_InitCustomSvc+0xe8>)
 800899a:	9105      	str	r1, [sp, #20]
 800899c:	2100      	movs	r1, #0
 800899e:	9104      	str	r1, [sp, #16]
 80089a0:	2110      	movs	r1, #16
 80089a2:	9103      	str	r1, [sp, #12]
 80089a4:	2101      	movs	r1, #1
 80089a6:	9102      	str	r1, [sp, #8]
 80089a8:	2100      	movs	r1, #0
 80089aa:	9101      	str	r1, [sp, #4]
 80089ac:	2108      	movs	r1, #8
 80089ae:	9100      	str	r1, [sp, #0]
 80089b0:	2102      	movs	r1, #2
 80089b2:	f7fe f88f 	bl	8006ad4 <aci_gatt_add_char>
 80089b6:	4603      	mov	r3, r0
 80089b8:	75fb      	strb	r3, [r7, #23]
 80089ba:	bf00      	nop
 80089bc:	3718      	adds	r7, #24
 80089be:	46bd      	mov	sp, r7
 80089c0:	bd80      	pop	{r7, pc}
 80089c2:	bf00      	nop
 80089c4:	0800885d 	.word	0x0800885d
 80089c8:	20000c64 	.word	0x20000c64
 80089cc:	2000001d 	.word	0x2000001d
 80089d0:	20000c66 	.word	0x20000c66

080089d4 <LL_PWR_EnableBootC2>:
 80089d4:	b480      	push	{r7}
 80089d6:	af00      	add	r7, sp, #0
 80089d8:	4b05      	ldr	r3, [pc, #20]	; (80089f0 <LL_PWR_EnableBootC2+0x1c>)
 80089da:	68db      	ldr	r3, [r3, #12]
 80089dc:	4a04      	ldr	r2, [pc, #16]	; (80089f0 <LL_PWR_EnableBootC2+0x1c>)
 80089de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80089e2:	60d3      	str	r3, [r2, #12]
 80089e4:	bf00      	nop
 80089e6:	46bd      	mov	sp, r7
 80089e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ec:	4770      	bx	lr
 80089ee:	bf00      	nop
 80089f0:	58000400 	.word	0x58000400

080089f4 <LL_C2_EXTI_EnableEvent_32_63>:
 80089f4:	b480      	push	{r7}
 80089f6:	b083      	sub	sp, #12
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	6078      	str	r0, [r7, #4]
 80089fc:	4b06      	ldr	r3, [pc, #24]	; (8008a18 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 80089fe:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8008a02:	4905      	ldr	r1, [pc, #20]	; (8008a18 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	4313      	orrs	r3, r2
 8008a08:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
 8008a0c:	bf00      	nop
 8008a0e:	370c      	adds	r7, #12
 8008a10:	46bd      	mov	sp, r7
 8008a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a16:	4770      	bx	lr
 8008a18:	58000800 	.word	0x58000800

08008a1c <LL_EXTI_EnableRisingTrig_32_63>:
 8008a1c:	b480      	push	{r7}
 8008a1e:	b083      	sub	sp, #12
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	6078      	str	r0, [r7, #4]
 8008a24:	4b05      	ldr	r3, [pc, #20]	; (8008a3c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8008a26:	6a1a      	ldr	r2, [r3, #32]
 8008a28:	4904      	ldr	r1, [pc, #16]	; (8008a3c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	4313      	orrs	r3, r2
 8008a2e:	620b      	str	r3, [r1, #32]
 8008a30:	bf00      	nop
 8008a32:	370c      	adds	r7, #12
 8008a34:	46bd      	mov	sp, r7
 8008a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3a:	4770      	bx	lr
 8008a3c:	58000800 	.word	0x58000800

08008a40 <LL_AHB3_GRP1_EnableClock>:
 8008a40:	b480      	push	{r7}
 8008a42:	b085      	sub	sp, #20
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
 8008a48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008a4c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008a4e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	4313      	orrs	r3, r2
 8008a56:	650b      	str	r3, [r1, #80]	; 0x50
 8008a58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008a5c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	4013      	ands	r3, r2
 8008a62:	60fb      	str	r3, [r7, #12]
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	bf00      	nop
 8008a68:	3714      	adds	r7, #20
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a70:	4770      	bx	lr

08008a72 <LL_C2_AHB3_GRP1_EnableClock>:
 8008a72:	b480      	push	{r7}
 8008a74:	b085      	sub	sp, #20
 8008a76:	af00      	add	r7, sp, #0
 8008a78:	6078      	str	r0, [r7, #4]
 8008a7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008a7e:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8008a82:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	4313      	orrs	r3, r2
 8008a8a:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
 8008a8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008a92:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	4013      	ands	r3, r2
 8008a9a:	60fb      	str	r3, [r7, #12]
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	bf00      	nop
 8008aa0:	3714      	adds	r7, #20
 8008aa2:	46bd      	mov	sp, r7
 8008aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa8:	4770      	bx	lr

08008aaa <LL_C1_IPCC_EnableIT_TXF>:
 8008aaa:	b480      	push	{r7}
 8008aac:	b083      	sub	sp, #12
 8008aae:	af00      	add	r7, sp, #0
 8008ab0:	6078      	str	r0, [r7, #4]
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	601a      	str	r2, [r3, #0]
 8008abe:	bf00      	nop
 8008ac0:	370c      	adds	r7, #12
 8008ac2:	46bd      	mov	sp, r7
 8008ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac8:	4770      	bx	lr

08008aca <LL_C1_IPCC_EnableIT_RXO>:
 8008aca:	b480      	push	{r7}
 8008acc:	b083      	sub	sp, #12
 8008ace:	af00      	add	r7, sp, #0
 8008ad0:	6078      	str	r0, [r7, #4]
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	f043 0201 	orr.w	r2, r3, #1
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	601a      	str	r2, [r3, #0]
 8008ade:	bf00      	nop
 8008ae0:	370c      	adds	r7, #12
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae8:	4770      	bx	lr

08008aea <LL_C1_IPCC_EnableTransmitChannel>:
 8008aea:	b480      	push	{r7}
 8008aec:	b083      	sub	sp, #12
 8008aee:	af00      	add	r7, sp, #0
 8008af0:	6078      	str	r0, [r7, #4]
 8008af2:	6039      	str	r1, [r7, #0]
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	685a      	ldr	r2, [r3, #4]
 8008af8:	683b      	ldr	r3, [r7, #0]
 8008afa:	041b      	lsls	r3, r3, #16
 8008afc:	43db      	mvns	r3, r3
 8008afe:	401a      	ands	r2, r3
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	605a      	str	r2, [r3, #4]
 8008b04:	bf00      	nop
 8008b06:	370c      	adds	r7, #12
 8008b08:	46bd      	mov	sp, r7
 8008b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b0e:	4770      	bx	lr

08008b10 <LL_C1_IPCC_DisableTransmitChannel>:
 8008b10:	b480      	push	{r7}
 8008b12:	b083      	sub	sp, #12
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	6078      	str	r0, [r7, #4]
 8008b18:	6039      	str	r1, [r7, #0]
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	685a      	ldr	r2, [r3, #4]
 8008b1e:	683b      	ldr	r3, [r7, #0]
 8008b20:	041b      	lsls	r3, r3, #16
 8008b22:	431a      	orrs	r2, r3
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	605a      	str	r2, [r3, #4]
 8008b28:	bf00      	nop
 8008b2a:	370c      	adds	r7, #12
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b32:	4770      	bx	lr

08008b34 <LL_C1_IPCC_EnableReceiveChannel>:
 8008b34:	b480      	push	{r7}
 8008b36:	b083      	sub	sp, #12
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
 8008b3c:	6039      	str	r1, [r7, #0]
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	685a      	ldr	r2, [r3, #4]
 8008b42:	683b      	ldr	r3, [r7, #0]
 8008b44:	43db      	mvns	r3, r3
 8008b46:	401a      	ands	r2, r3
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	605a      	str	r2, [r3, #4]
 8008b4c:	bf00      	nop
 8008b4e:	370c      	adds	r7, #12
 8008b50:	46bd      	mov	sp, r7
 8008b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b56:	4770      	bx	lr

08008b58 <LL_C1_IPCC_ClearFlag_CHx>:
 8008b58:	b480      	push	{r7}
 8008b5a:	b083      	sub	sp, #12
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	6078      	str	r0, [r7, #4]
 8008b60:	6039      	str	r1, [r7, #0]
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	683a      	ldr	r2, [r7, #0]
 8008b66:	609a      	str	r2, [r3, #8]
 8008b68:	bf00      	nop
 8008b6a:	370c      	adds	r7, #12
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b72:	4770      	bx	lr

08008b74 <LL_C1_IPCC_SetFlag_CHx>:
 8008b74:	b480      	push	{r7}
 8008b76:	b083      	sub	sp, #12
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	6078      	str	r0, [r7, #4]
 8008b7c:	6039      	str	r1, [r7, #0]
 8008b7e:	683b      	ldr	r3, [r7, #0]
 8008b80:	041a      	lsls	r2, r3, #16
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	609a      	str	r2, [r3, #8]
 8008b86:	bf00      	nop
 8008b88:	370c      	adds	r7, #12
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b90:	4770      	bx	lr

08008b92 <LL_C1_IPCC_IsActiveFlag_CHx>:
 8008b92:	b480      	push	{r7}
 8008b94:	b083      	sub	sp, #12
 8008b96:	af00      	add	r7, sp, #0
 8008b98:	6078      	str	r0, [r7, #4]
 8008b9a:	6039      	str	r1, [r7, #0]
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	68da      	ldr	r2, [r3, #12]
 8008ba0:	683b      	ldr	r3, [r7, #0]
 8008ba2:	4013      	ands	r3, r2
 8008ba4:	683a      	ldr	r2, [r7, #0]
 8008ba6:	429a      	cmp	r2, r3
 8008ba8:	d101      	bne.n	8008bae <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 8008baa:	2301      	movs	r3, #1
 8008bac:	e000      	b.n	8008bb0 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 8008bae:	2300      	movs	r3, #0
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	370c      	adds	r7, #12
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bba:	4770      	bx	lr

08008bbc <LL_C2_IPCC_IsActiveFlag_CHx>:
 8008bbc:	b480      	push	{r7}
 8008bbe:	b083      	sub	sp, #12
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	6078      	str	r0, [r7, #4]
 8008bc4:	6039      	str	r1, [r7, #0]
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	69da      	ldr	r2, [r3, #28]
 8008bca:	683b      	ldr	r3, [r7, #0]
 8008bcc:	4013      	ands	r3, r2
 8008bce:	683a      	ldr	r2, [r7, #0]
 8008bd0:	429a      	cmp	r2, r3
 8008bd2:	d101      	bne.n	8008bd8 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 8008bd4:	2301      	movs	r3, #1
 8008bd6:	e000      	b.n	8008bda <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 8008bd8:	2300      	movs	r3, #0
 8008bda:	4618      	mov	r0, r3
 8008bdc:	370c      	adds	r7, #12
 8008bde:	46bd      	mov	sp, r7
 8008be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be4:	4770      	bx	lr
	...

08008be8 <HW_IPCC_Rx_Handler>:
 8008be8:	b580      	push	{r7, lr}
 8008bea:	af00      	add	r7, sp, #0
 8008bec:	2102      	movs	r1, #2
 8008bee:	4819      	ldr	r0, [pc, #100]	; (8008c54 <HW_IPCC_Rx_Handler+0x6c>)
 8008bf0:	f7ff ffe4 	bl	8008bbc <LL_C2_IPCC_IsActiveFlag_CHx>
 8008bf4:	4603      	mov	r3, r0
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d009      	beq.n	8008c0e <HW_IPCC_Rx_Handler+0x26>
 8008bfa:	4b16      	ldr	r3, [pc, #88]	; (8008c54 <HW_IPCC_Rx_Handler+0x6c>)
 8008bfc:	685b      	ldr	r3, [r3, #4]
 8008bfe:	43db      	mvns	r3, r3
 8008c00:	f003 0302 	and.w	r3, r3, #2
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d002      	beq.n	8008c0e <HW_IPCC_Rx_Handler+0x26>
 8008c08:	f000 f8da 	bl	8008dc0 <HW_IPCC_SYS_EvtHandler>
 8008c0c:	e01f      	b.n	8008c4e <HW_IPCC_Rx_Handler+0x66>
 8008c0e:	2101      	movs	r1, #1
 8008c10:	4810      	ldr	r0, [pc, #64]	; (8008c54 <HW_IPCC_Rx_Handler+0x6c>)
 8008c12:	f7ff ffd3 	bl	8008bbc <LL_C2_IPCC_IsActiveFlag_CHx>
 8008c16:	4603      	mov	r3, r0
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d008      	beq.n	8008c2e <HW_IPCC_Rx_Handler+0x46>
 8008c1c:	4b0d      	ldr	r3, [pc, #52]	; (8008c54 <HW_IPCC_Rx_Handler+0x6c>)
 8008c1e:	685b      	ldr	r3, [r3, #4]
 8008c20:	f003 0301 	and.w	r3, r3, #1
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d102      	bne.n	8008c2e <HW_IPCC_Rx_Handler+0x46>
 8008c28:	f000 f88e 	bl	8008d48 <HW_IPCC_BLE_EvtHandler>
 8008c2c:	e00f      	b.n	8008c4e <HW_IPCC_Rx_Handler+0x66>
 8008c2e:	2108      	movs	r1, #8
 8008c30:	4808      	ldr	r0, [pc, #32]	; (8008c54 <HW_IPCC_Rx_Handler+0x6c>)
 8008c32:	f7ff ffc3 	bl	8008bbc <LL_C2_IPCC_IsActiveFlag_CHx>
 8008c36:	4603      	mov	r3, r0
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d009      	beq.n	8008c50 <HW_IPCC_Rx_Handler+0x68>
 8008c3c:	4b05      	ldr	r3, [pc, #20]	; (8008c54 <HW_IPCC_Rx_Handler+0x6c>)
 8008c3e:	685b      	ldr	r3, [r3, #4]
 8008c40:	43db      	mvns	r3, r3
 8008c42:	f003 0308 	and.w	r3, r3, #8
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d002      	beq.n	8008c50 <HW_IPCC_Rx_Handler+0x68>
 8008c4a:	f000 f905 	bl	8008e58 <HW_IPCC_TRACES_EvtHandler>
 8008c4e:	bf00      	nop
 8008c50:	bf00      	nop
 8008c52:	bd80      	pop	{r7, pc}
 8008c54:	58000c00 	.word	0x58000c00

08008c58 <HW_IPCC_Tx_Handler>:
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	af00      	add	r7, sp, #0
 8008c5c:	2102      	movs	r1, #2
 8008c5e:	481a      	ldr	r0, [pc, #104]	; (8008cc8 <HW_IPCC_Tx_Handler+0x70>)
 8008c60:	f7ff ff97 	bl	8008b92 <LL_C1_IPCC_IsActiveFlag_CHx>
 8008c64:	4603      	mov	r3, r0
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d109      	bne.n	8008c7e <HW_IPCC_Tx_Handler+0x26>
 8008c6a:	4b17      	ldr	r3, [pc, #92]	; (8008cc8 <HW_IPCC_Tx_Handler+0x70>)
 8008c6c:	685b      	ldr	r3, [r3, #4]
 8008c6e:	43db      	mvns	r3, r3
 8008c70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d002      	beq.n	8008c7e <HW_IPCC_Tx_Handler+0x26>
 8008c78:	f000 f896 	bl	8008da8 <HW_IPCC_SYS_CmdEvtHandler>
 8008c7c:	e020      	b.n	8008cc0 <HW_IPCC_Tx_Handler+0x68>
 8008c7e:	2108      	movs	r1, #8
 8008c80:	4811      	ldr	r0, [pc, #68]	; (8008cc8 <HW_IPCC_Tx_Handler+0x70>)
 8008c82:	f7ff ff86 	bl	8008b92 <LL_C1_IPCC_IsActiveFlag_CHx>
 8008c86:	4603      	mov	r3, r0
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d109      	bne.n	8008ca0 <HW_IPCC_Tx_Handler+0x48>
 8008c8c:	4b0e      	ldr	r3, [pc, #56]	; (8008cc8 <HW_IPCC_Tx_Handler+0x70>)
 8008c8e:	685b      	ldr	r3, [r3, #4]
 8008c90:	43db      	mvns	r3, r3
 8008c92:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d002      	beq.n	8008ca0 <HW_IPCC_Tx_Handler+0x48>
 8008c9a:	f000 f8bf 	bl	8008e1c <HW_IPCC_MM_FreeBufHandler>
 8008c9e:	e00f      	b.n	8008cc0 <HW_IPCC_Tx_Handler+0x68>
 8008ca0:	2120      	movs	r1, #32
 8008ca2:	4809      	ldr	r0, [pc, #36]	; (8008cc8 <HW_IPCC_Tx_Handler+0x70>)
 8008ca4:	f7ff ff75 	bl	8008b92 <LL_C1_IPCC_IsActiveFlag_CHx>
 8008ca8:	4603      	mov	r3, r0
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d109      	bne.n	8008cc2 <HW_IPCC_Tx_Handler+0x6a>
 8008cae:	4b06      	ldr	r3, [pc, #24]	; (8008cc8 <HW_IPCC_Tx_Handler+0x70>)
 8008cb0:	685b      	ldr	r3, [r3, #4]
 8008cb2:	43db      	mvns	r3, r3
 8008cb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d002      	beq.n	8008cc2 <HW_IPCC_Tx_Handler+0x6a>
 8008cbc:	f000 f850 	bl	8008d60 <HW_IPCC_BLE_AclDataEvtHandler>
 8008cc0:	bf00      	nop
 8008cc2:	bf00      	nop
 8008cc4:	bd80      	pop	{r7, pc}
 8008cc6:	bf00      	nop
 8008cc8:	58000c00 	.word	0x58000c00

08008ccc <HW_IPCC_Enable>:
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	af00      	add	r7, sp, #0
 8008cd0:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8008cd4:	f7ff fecd 	bl	8008a72 <LL_C2_AHB3_GRP1_EnableClock>
 8008cd8:	f44f 7000 	mov.w	r0, #512	; 0x200
 8008cdc:	f7ff fe9e 	bl	8008a1c <LL_EXTI_EnableRisingTrig_32_63>
 8008ce0:	f44f 7000 	mov.w	r0, #512	; 0x200
 8008ce4:	f7ff fe86 	bl	80089f4 <LL_C2_EXTI_EnableEvent_32_63>
 8008ce8:	bf40      	sev
 8008cea:	bf20      	wfe
 8008cec:	f7ff fe72 	bl	80089d4 <LL_PWR_EnableBootC2>
 8008cf0:	bf00      	nop
 8008cf2:	bd80      	pop	{r7, pc}

08008cf4 <HW_IPCC_Init>:
 8008cf4:	b580      	push	{r7, lr}
 8008cf6:	af00      	add	r7, sp, #0
 8008cf8:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8008cfc:	f7ff fea0 	bl	8008a40 <LL_AHB3_GRP1_EnableClock>
 8008d00:	4806      	ldr	r0, [pc, #24]	; (8008d1c <HW_IPCC_Init+0x28>)
 8008d02:	f7ff fee2 	bl	8008aca <LL_C1_IPCC_EnableIT_RXO>
 8008d06:	4805      	ldr	r0, [pc, #20]	; (8008d1c <HW_IPCC_Init+0x28>)
 8008d08:	f7ff fecf 	bl	8008aaa <LL_C1_IPCC_EnableIT_TXF>
 8008d0c:	202c      	movs	r0, #44	; 0x2c
 8008d0e:	f7f9 fc9e 	bl	800264e <HAL_NVIC_EnableIRQ>
 8008d12:	202d      	movs	r0, #45	; 0x2d
 8008d14:	f7f9 fc9b 	bl	800264e <HAL_NVIC_EnableIRQ>
 8008d18:	bf00      	nop
 8008d1a:	bd80      	pop	{r7, pc}
 8008d1c:	58000c00 	.word	0x58000c00

08008d20 <HW_IPCC_BLE_Init>:
 8008d20:	b580      	push	{r7, lr}
 8008d22:	af00      	add	r7, sp, #0
 8008d24:	2101      	movs	r1, #1
 8008d26:	4802      	ldr	r0, [pc, #8]	; (8008d30 <HW_IPCC_BLE_Init+0x10>)
 8008d28:	f7ff ff04 	bl	8008b34 <LL_C1_IPCC_EnableReceiveChannel>
 8008d2c:	bf00      	nop
 8008d2e:	bd80      	pop	{r7, pc}
 8008d30:	58000c00 	.word	0x58000c00

08008d34 <HW_IPCC_BLE_SendCmd>:
 8008d34:	b580      	push	{r7, lr}
 8008d36:	af00      	add	r7, sp, #0
 8008d38:	2101      	movs	r1, #1
 8008d3a:	4802      	ldr	r0, [pc, #8]	; (8008d44 <HW_IPCC_BLE_SendCmd+0x10>)
 8008d3c:	f7ff ff1a 	bl	8008b74 <LL_C1_IPCC_SetFlag_CHx>
 8008d40:	bf00      	nop
 8008d42:	bd80      	pop	{r7, pc}
 8008d44:	58000c00 	.word	0x58000c00

08008d48 <HW_IPCC_BLE_EvtHandler>:
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	af00      	add	r7, sp, #0
 8008d4c:	f7fe ffde 	bl	8007d0c <HW_IPCC_BLE_RxEvtNot>
 8008d50:	2101      	movs	r1, #1
 8008d52:	4802      	ldr	r0, [pc, #8]	; (8008d5c <HW_IPCC_BLE_EvtHandler+0x14>)
 8008d54:	f7ff ff00 	bl	8008b58 <LL_C1_IPCC_ClearFlag_CHx>
 8008d58:	bf00      	nop
 8008d5a:	bd80      	pop	{r7, pc}
 8008d5c:	58000c00 	.word	0x58000c00

08008d60 <HW_IPCC_BLE_AclDataEvtHandler>:
 8008d60:	b580      	push	{r7, lr}
 8008d62:	af00      	add	r7, sp, #0
 8008d64:	2120      	movs	r1, #32
 8008d66:	4803      	ldr	r0, [pc, #12]	; (8008d74 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 8008d68:	f7ff fed2 	bl	8008b10 <LL_C1_IPCC_DisableTransmitChannel>
 8008d6c:	f7fe fffe 	bl	8007d6c <HW_IPCC_BLE_AclDataAckNot>
 8008d70:	bf00      	nop
 8008d72:	bd80      	pop	{r7, pc}
 8008d74:	58000c00 	.word	0x58000c00

08008d78 <HW_IPCC_SYS_Init>:
 8008d78:	b580      	push	{r7, lr}
 8008d7a:	af00      	add	r7, sp, #0
 8008d7c:	2102      	movs	r1, #2
 8008d7e:	4802      	ldr	r0, [pc, #8]	; (8008d88 <HW_IPCC_SYS_Init+0x10>)
 8008d80:	f7ff fed8 	bl	8008b34 <LL_C1_IPCC_EnableReceiveChannel>
 8008d84:	bf00      	nop
 8008d86:	bd80      	pop	{r7, pc}
 8008d88:	58000c00 	.word	0x58000c00

08008d8c <HW_IPCC_SYS_SendCmd>:
 8008d8c:	b580      	push	{r7, lr}
 8008d8e:	af00      	add	r7, sp, #0
 8008d90:	2102      	movs	r1, #2
 8008d92:	4804      	ldr	r0, [pc, #16]	; (8008da4 <HW_IPCC_SYS_SendCmd+0x18>)
 8008d94:	f7ff feee 	bl	8008b74 <LL_C1_IPCC_SetFlag_CHx>
 8008d98:	2102      	movs	r1, #2
 8008d9a:	4802      	ldr	r0, [pc, #8]	; (8008da4 <HW_IPCC_SYS_SendCmd+0x18>)
 8008d9c:	f7ff fea5 	bl	8008aea <LL_C1_IPCC_EnableTransmitChannel>
 8008da0:	bf00      	nop
 8008da2:	bd80      	pop	{r7, pc}
 8008da4:	58000c00 	.word	0x58000c00

08008da8 <HW_IPCC_SYS_CmdEvtHandler>:
 8008da8:	b580      	push	{r7, lr}
 8008daa:	af00      	add	r7, sp, #0
 8008dac:	2102      	movs	r1, #2
 8008dae:	4803      	ldr	r0, [pc, #12]	; (8008dbc <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 8008db0:	f7ff feae 	bl	8008b10 <LL_C1_IPCC_DisableTransmitChannel>
 8008db4:	f7ff f82a 	bl	8007e0c <HW_IPCC_SYS_CmdEvtNot>
 8008db8:	bf00      	nop
 8008dba:	bd80      	pop	{r7, pc}
 8008dbc:	58000c00 	.word	0x58000c00

08008dc0 <HW_IPCC_SYS_EvtHandler>:
 8008dc0:	b580      	push	{r7, lr}
 8008dc2:	af00      	add	r7, sp, #0
 8008dc4:	f7ff f838 	bl	8007e38 <HW_IPCC_SYS_EvtNot>
 8008dc8:	2102      	movs	r1, #2
 8008dca:	4802      	ldr	r0, [pc, #8]	; (8008dd4 <HW_IPCC_SYS_EvtHandler+0x14>)
 8008dcc:	f7ff fec4 	bl	8008b58 <LL_C1_IPCC_ClearFlag_CHx>
 8008dd0:	bf00      	nop
 8008dd2:	bd80      	pop	{r7, pc}
 8008dd4:	58000c00 	.word	0x58000c00

08008dd8 <HW_IPCC_MM_SendFreeBuf>:
 8008dd8:	b580      	push	{r7, lr}
 8008dda:	b082      	sub	sp, #8
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	6078      	str	r0, [r7, #4]
 8008de0:	2108      	movs	r1, #8
 8008de2:	480c      	ldr	r0, [pc, #48]	; (8008e14 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8008de4:	f7ff fed5 	bl	8008b92 <LL_C1_IPCC_IsActiveFlag_CHx>
 8008de8:	4603      	mov	r3, r0
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d007      	beq.n	8008dfe <HW_IPCC_MM_SendFreeBuf+0x26>
 8008dee:	4a0a      	ldr	r2, [pc, #40]	; (8008e18 <HW_IPCC_MM_SendFreeBuf+0x40>)
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	6013      	str	r3, [r2, #0]
 8008df4:	2108      	movs	r1, #8
 8008df6:	4807      	ldr	r0, [pc, #28]	; (8008e14 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8008df8:	f7ff fe77 	bl	8008aea <LL_C1_IPCC_EnableTransmitChannel>
 8008dfc:	e006      	b.n	8008e0c <HW_IPCC_MM_SendFreeBuf+0x34>
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	4798      	blx	r3
 8008e02:	2108      	movs	r1, #8
 8008e04:	4803      	ldr	r0, [pc, #12]	; (8008e14 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8008e06:	f7ff feb5 	bl	8008b74 <LL_C1_IPCC_SetFlag_CHx>
 8008e0a:	bf00      	nop
 8008e0c:	3708      	adds	r7, #8
 8008e0e:	46bd      	mov	sp, r7
 8008e10:	bd80      	pop	{r7, pc}
 8008e12:	bf00      	nop
 8008e14:	58000c00 	.word	0x58000c00
 8008e18:	20000c68 	.word	0x20000c68

08008e1c <HW_IPCC_MM_FreeBufHandler>:
 8008e1c:	b580      	push	{r7, lr}
 8008e1e:	af00      	add	r7, sp, #0
 8008e20:	2108      	movs	r1, #8
 8008e22:	4806      	ldr	r0, [pc, #24]	; (8008e3c <HW_IPCC_MM_FreeBufHandler+0x20>)
 8008e24:	f7ff fe74 	bl	8008b10 <LL_C1_IPCC_DisableTransmitChannel>
 8008e28:	4b05      	ldr	r3, [pc, #20]	; (8008e40 <HW_IPCC_MM_FreeBufHandler+0x24>)
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	4798      	blx	r3
 8008e2e:	2108      	movs	r1, #8
 8008e30:	4802      	ldr	r0, [pc, #8]	; (8008e3c <HW_IPCC_MM_FreeBufHandler+0x20>)
 8008e32:	f7ff fe9f 	bl	8008b74 <LL_C1_IPCC_SetFlag_CHx>
 8008e36:	bf00      	nop
 8008e38:	bd80      	pop	{r7, pc}
 8008e3a:	bf00      	nop
 8008e3c:	58000c00 	.word	0x58000c00
 8008e40:	20000c68 	.word	0x20000c68

08008e44 <HW_IPCC_TRACES_Init>:
 8008e44:	b580      	push	{r7, lr}
 8008e46:	af00      	add	r7, sp, #0
 8008e48:	2108      	movs	r1, #8
 8008e4a:	4802      	ldr	r0, [pc, #8]	; (8008e54 <HW_IPCC_TRACES_Init+0x10>)
 8008e4c:	f7ff fe72 	bl	8008b34 <LL_C1_IPCC_EnableReceiveChannel>
 8008e50:	bf00      	nop
 8008e52:	bd80      	pop	{r7, pc}
 8008e54:	58000c00 	.word	0x58000c00

08008e58 <HW_IPCC_TRACES_EvtHandler>:
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	af00      	add	r7, sp, #0
 8008e5c:	f7ff f894 	bl	8007f88 <HW_IPCC_TRACES_EvtNot>
 8008e60:	2108      	movs	r1, #8
 8008e62:	4802      	ldr	r0, [pc, #8]	; (8008e6c <HW_IPCC_TRACES_EvtHandler+0x14>)
 8008e64:	f7ff fe78 	bl	8008b58 <LL_C1_IPCC_ClearFlag_CHx>
 8008e68:	bf00      	nop
 8008e6a:	bd80      	pop	{r7, pc}
 8008e6c:	58000c00 	.word	0x58000c00

08008e70 <UTIL_LPM_Init>:
 8008e70:	b480      	push	{r7}
 8008e72:	af00      	add	r7, sp, #0
 8008e74:	4b05      	ldr	r3, [pc, #20]	; (8008e8c <UTIL_LPM_Init+0x1c>)
 8008e76:	2200      	movs	r2, #0
 8008e78:	601a      	str	r2, [r3, #0]
 8008e7a:	4b05      	ldr	r3, [pc, #20]	; (8008e90 <UTIL_LPM_Init+0x20>)
 8008e7c:	2200      	movs	r2, #0
 8008e7e:	601a      	str	r2, [r3, #0]
 8008e80:	bf00      	nop
 8008e82:	46bd      	mov	sp, r7
 8008e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e88:	4770      	bx	lr
 8008e8a:	bf00      	nop
 8008e8c:	20000c6c 	.word	0x20000c6c
 8008e90:	20000c70 	.word	0x20000c70

08008e94 <UTIL_LPM_SetOffMode>:
 8008e94:	b480      	push	{r7}
 8008e96:	b087      	sub	sp, #28
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	6078      	str	r0, [r7, #4]
 8008e9c:	460b      	mov	r3, r1
 8008e9e:	70fb      	strb	r3, [r7, #3]
 8008ea0:	f3ef 8310 	mrs	r3, PRIMASK
 8008ea4:	613b      	str	r3, [r7, #16]
 8008ea6:	693b      	ldr	r3, [r7, #16]
 8008ea8:	617b      	str	r3, [r7, #20]
 8008eaa:	b672      	cpsid	i
 8008eac:	bf00      	nop
 8008eae:	78fb      	ldrb	r3, [r7, #3]
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d008      	beq.n	8008ec6 <UTIL_LPM_SetOffMode+0x32>
 8008eb4:	2b01      	cmp	r3, #1
 8008eb6:	d10e      	bne.n	8008ed6 <UTIL_LPM_SetOffMode+0x42>
 8008eb8:	4b0d      	ldr	r3, [pc, #52]	; (8008ef0 <UTIL_LPM_SetOffMode+0x5c>)
 8008eba:	681a      	ldr	r2, [r3, #0]
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	4313      	orrs	r3, r2
 8008ec0:	4a0b      	ldr	r2, [pc, #44]	; (8008ef0 <UTIL_LPM_SetOffMode+0x5c>)
 8008ec2:	6013      	str	r3, [r2, #0]
 8008ec4:	e008      	b.n	8008ed8 <UTIL_LPM_SetOffMode+0x44>
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	43da      	mvns	r2, r3
 8008eca:	4b09      	ldr	r3, [pc, #36]	; (8008ef0 <UTIL_LPM_SetOffMode+0x5c>)
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	4013      	ands	r3, r2
 8008ed0:	4a07      	ldr	r2, [pc, #28]	; (8008ef0 <UTIL_LPM_SetOffMode+0x5c>)
 8008ed2:	6013      	str	r3, [r2, #0]
 8008ed4:	e000      	b.n	8008ed8 <UTIL_LPM_SetOffMode+0x44>
 8008ed6:	bf00      	nop
 8008ed8:	697b      	ldr	r3, [r7, #20]
 8008eda:	60fb      	str	r3, [r7, #12]
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	f383 8810 	msr	PRIMASK, r3
 8008ee2:	bf00      	nop
 8008ee4:	bf00      	nop
 8008ee6:	371c      	adds	r7, #28
 8008ee8:	46bd      	mov	sp, r7
 8008eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eee:	4770      	bx	lr
 8008ef0:	20000c70 	.word	0x20000c70

08008ef4 <UTIL_SEQ_Run>:
 8008ef4:	b580      	push	{r7, lr}
 8008ef6:	b090      	sub	sp, #64	; 0x40
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	6078      	str	r0, [r7, #4]
 8008efc:	4b73      	ldr	r3, [pc, #460]	; (80090cc <UTIL_SEQ_Run+0x1d8>)
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	62bb      	str	r3, [r7, #40]	; 0x28
 8008f02:	4b72      	ldr	r3, [pc, #456]	; (80090cc <UTIL_SEQ_Run+0x1d8>)
 8008f04:	681a      	ldr	r2, [r3, #0]
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	4013      	ands	r3, r2
 8008f0a:	4a70      	ldr	r2, [pc, #448]	; (80090cc <UTIL_SEQ_Run+0x1d8>)
 8008f0c:	6013      	str	r3, [r2, #0]
 8008f0e:	4b70      	ldr	r3, [pc, #448]	; (80090d0 <UTIL_SEQ_Run+0x1dc>)
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	63bb      	str	r3, [r7, #56]	; 0x38
 8008f14:	4b6f      	ldr	r3, [pc, #444]	; (80090d4 <UTIL_SEQ_Run+0x1e0>)
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	637b      	str	r3, [r7, #52]	; 0x34
 8008f1a:	4b6f      	ldr	r3, [pc, #444]	; (80090d8 <UTIL_SEQ_Run+0x1e4>)
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	633b      	str	r3, [r7, #48]	; 0x30
 8008f20:	4b6e      	ldr	r3, [pc, #440]	; (80090dc <UTIL_SEQ_Run+0x1e8>)
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008f26:	e08d      	b.n	8009044 <UTIL_SEQ_Run+0x150>
 8008f28:	2300      	movs	r3, #0
 8008f2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008f2c:	e002      	b.n	8008f34 <UTIL_SEQ_Run+0x40>
 8008f2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f30:	3301      	adds	r3, #1
 8008f32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008f34:	4a6a      	ldr	r2, [pc, #424]	; (80090e0 <UTIL_SEQ_Run+0x1ec>)
 8008f36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f38:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8008f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f3e:	401a      	ands	r2, r3
 8008f40:	4b62      	ldr	r3, [pc, #392]	; (80090cc <UTIL_SEQ_Run+0x1d8>)
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	4013      	ands	r3, r2
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d0f1      	beq.n	8008f2e <UTIL_SEQ_Run+0x3a>
 8008f4a:	4a65      	ldr	r2, [pc, #404]	; (80090e0 <UTIL_SEQ_Run+0x1ec>)
 8008f4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f4e:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8008f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f54:	401a      	ands	r2, r3
 8008f56:	4b5d      	ldr	r3, [pc, #372]	; (80090cc <UTIL_SEQ_Run+0x1d8>)
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	4013      	ands	r3, r2
 8008f5c:	627b      	str	r3, [r7, #36]	; 0x24
 8008f5e:	4a60      	ldr	r2, [pc, #384]	; (80090e0 <UTIL_SEQ_Run+0x1ec>)
 8008f60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f62:	00db      	lsls	r3, r3, #3
 8008f64:	4413      	add	r3, r2
 8008f66:	685a      	ldr	r2, [r3, #4]
 8008f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f6a:	4013      	ands	r3, r2
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d106      	bne.n	8008f7e <UTIL_SEQ_Run+0x8a>
 8008f70:	4a5b      	ldr	r2, [pc, #364]	; (80090e0 <UTIL_SEQ_Run+0x1ec>)
 8008f72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f74:	00db      	lsls	r3, r3, #3
 8008f76:	4413      	add	r3, r2
 8008f78:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008f7c:	605a      	str	r2, [r3, #4]
 8008f7e:	4a58      	ldr	r2, [pc, #352]	; (80090e0 <UTIL_SEQ_Run+0x1ec>)
 8008f80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f82:	00db      	lsls	r3, r3, #3
 8008f84:	4413      	add	r3, r2
 8008f86:	685a      	ldr	r2, [r3, #4]
 8008f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f8a:	4013      	ands	r3, r2
 8008f8c:	4618      	mov	r0, r3
 8008f8e:	f000 f9b3 	bl	80092f8 <SEQ_BitPosition>
 8008f92:	4603      	mov	r3, r0
 8008f94:	461a      	mov	r2, r3
 8008f96:	4b53      	ldr	r3, [pc, #332]	; (80090e4 <UTIL_SEQ_Run+0x1f0>)
 8008f98:	601a      	str	r2, [r3, #0]
 8008f9a:	4a51      	ldr	r2, [pc, #324]	; (80090e0 <UTIL_SEQ_Run+0x1ec>)
 8008f9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f9e:	00db      	lsls	r3, r3, #3
 8008fa0:	4413      	add	r3, r2
 8008fa2:	685a      	ldr	r2, [r3, #4]
 8008fa4:	4b4f      	ldr	r3, [pc, #316]	; (80090e4 <UTIL_SEQ_Run+0x1f0>)
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	2101      	movs	r1, #1
 8008faa:	fa01 f303 	lsl.w	r3, r1, r3
 8008fae:	43db      	mvns	r3, r3
 8008fb0:	401a      	ands	r2, r3
 8008fb2:	494b      	ldr	r1, [pc, #300]	; (80090e0 <UTIL_SEQ_Run+0x1ec>)
 8008fb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008fb6:	00db      	lsls	r3, r3, #3
 8008fb8:	440b      	add	r3, r1
 8008fba:	605a      	str	r2, [r3, #4]
 8008fbc:	f3ef 8310 	mrs	r3, PRIMASK
 8008fc0:	61bb      	str	r3, [r7, #24]
 8008fc2:	69bb      	ldr	r3, [r7, #24]
 8008fc4:	623b      	str	r3, [r7, #32]
 8008fc6:	b672      	cpsid	i
 8008fc8:	bf00      	nop
 8008fca:	4b46      	ldr	r3, [pc, #280]	; (80090e4 <UTIL_SEQ_Run+0x1f0>)
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	2201      	movs	r2, #1
 8008fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8008fd4:	43da      	mvns	r2, r3
 8008fd6:	4b3e      	ldr	r3, [pc, #248]	; (80090d0 <UTIL_SEQ_Run+0x1dc>)
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	4013      	ands	r3, r2
 8008fdc:	4a3c      	ldr	r2, [pc, #240]	; (80090d0 <UTIL_SEQ_Run+0x1dc>)
 8008fde:	6013      	str	r3, [r2, #0]
 8008fe0:	2302      	movs	r3, #2
 8008fe2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008fe4:	e013      	b.n	800900e <UTIL_SEQ_Run+0x11a>
 8008fe6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008fe8:	3b01      	subs	r3, #1
 8008fea:	4a3d      	ldr	r2, [pc, #244]	; (80090e0 <UTIL_SEQ_Run+0x1ec>)
 8008fec:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8008ff0:	4b3c      	ldr	r3, [pc, #240]	; (80090e4 <UTIL_SEQ_Run+0x1f0>)
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	2201      	movs	r2, #1
 8008ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8008ffa:	43da      	mvns	r2, r3
 8008ffc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ffe:	3b01      	subs	r3, #1
 8009000:	400a      	ands	r2, r1
 8009002:	4937      	ldr	r1, [pc, #220]	; (80090e0 <UTIL_SEQ_Run+0x1ec>)
 8009004:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 8009008:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800900a:	3b01      	subs	r3, #1
 800900c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800900e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009010:	2b00      	cmp	r3, #0
 8009012:	d1e8      	bne.n	8008fe6 <UTIL_SEQ_Run+0xf2>
 8009014:	6a3b      	ldr	r3, [r7, #32]
 8009016:	617b      	str	r3, [r7, #20]
 8009018:	697b      	ldr	r3, [r7, #20]
 800901a:	f383 8810 	msr	PRIMASK, r3
 800901e:	bf00      	nop
 8009020:	4b30      	ldr	r3, [pc, #192]	; (80090e4 <UTIL_SEQ_Run+0x1f0>)
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	4a30      	ldr	r2, [pc, #192]	; (80090e8 <UTIL_SEQ_Run+0x1f4>)
 8009026:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800902a:	4798      	blx	r3
 800902c:	4b28      	ldr	r3, [pc, #160]	; (80090d0 <UTIL_SEQ_Run+0x1dc>)
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	63bb      	str	r3, [r7, #56]	; 0x38
 8009032:	4b28      	ldr	r3, [pc, #160]	; (80090d4 <UTIL_SEQ_Run+0x1e0>)
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	637b      	str	r3, [r7, #52]	; 0x34
 8009038:	4b27      	ldr	r3, [pc, #156]	; (80090d8 <UTIL_SEQ_Run+0x1e4>)
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	633b      	str	r3, [r7, #48]	; 0x30
 800903e:	4b27      	ldr	r3, [pc, #156]	; (80090dc <UTIL_SEQ_Run+0x1e8>)
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009044:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009048:	401a      	ands	r2, r3
 800904a:	4b20      	ldr	r3, [pc, #128]	; (80090cc <UTIL_SEQ_Run+0x1d8>)
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	4013      	ands	r3, r2
 8009050:	2b00      	cmp	r3, #0
 8009052:	d005      	beq.n	8009060 <UTIL_SEQ_Run+0x16c>
 8009054:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009058:	4013      	ands	r3, r2
 800905a:	2b00      	cmp	r3, #0
 800905c:	f43f af64 	beq.w	8008f28 <UTIL_SEQ_Run+0x34>
 8009060:	4b20      	ldr	r3, [pc, #128]	; (80090e4 <UTIL_SEQ_Run+0x1f0>)
 8009062:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009066:	601a      	str	r2, [r3, #0]
 8009068:	f000 f938 	bl	80092dc <UTIL_SEQ_PreIdle>
 800906c:	f3ef 8310 	mrs	r3, PRIMASK
 8009070:	613b      	str	r3, [r7, #16]
 8009072:	693b      	ldr	r3, [r7, #16]
 8009074:	61fb      	str	r3, [r7, #28]
 8009076:	b672      	cpsid	i
 8009078:	bf00      	nop
 800907a:	4b15      	ldr	r3, [pc, #84]	; (80090d0 <UTIL_SEQ_Run+0x1dc>)
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	63bb      	str	r3, [r7, #56]	; 0x38
 8009080:	4b14      	ldr	r3, [pc, #80]	; (80090d4 <UTIL_SEQ_Run+0x1e0>)
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	637b      	str	r3, [r7, #52]	; 0x34
 8009086:	4b14      	ldr	r3, [pc, #80]	; (80090d8 <UTIL_SEQ_Run+0x1e4>)
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	633b      	str	r3, [r7, #48]	; 0x30
 800908c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800908e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009090:	401a      	ands	r2, r3
 8009092:	4b0e      	ldr	r3, [pc, #56]	; (80090cc <UTIL_SEQ_Run+0x1d8>)
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	4013      	ands	r3, r2
 8009098:	2b00      	cmp	r3, #0
 800909a:	d107      	bne.n	80090ac <UTIL_SEQ_Run+0x1b8>
 800909c:	4b0f      	ldr	r3, [pc, #60]	; (80090dc <UTIL_SEQ_Run+0x1e8>)
 800909e:	681a      	ldr	r2, [r3, #0]
 80090a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090a2:	4013      	ands	r3, r2
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d101      	bne.n	80090ac <UTIL_SEQ_Run+0x1b8>
 80090a8:	f7f7 fd7e 	bl	8000ba8 <UTIL_SEQ_Idle>
 80090ac:	69fb      	ldr	r3, [r7, #28]
 80090ae:	60fb      	str	r3, [r7, #12]
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	f383 8810 	msr	PRIMASK, r3
 80090b6:	bf00      	nop
 80090b8:	f000 f917 	bl	80092ea <UTIL_SEQ_PostIdle>
 80090bc:	4a03      	ldr	r2, [pc, #12]	; (80090cc <UTIL_SEQ_Run+0x1d8>)
 80090be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090c0:	6013      	str	r3, [r2, #0]
 80090c2:	bf00      	nop
 80090c4:	3740      	adds	r7, #64	; 0x40
 80090c6:	46bd      	mov	sp, r7
 80090c8:	bd80      	pop	{r7, pc}
 80090ca:	bf00      	nop
 80090cc:	20000024 	.word	0x20000024
 80090d0:	20000c74 	.word	0x20000c74
 80090d4:	20000c78 	.word	0x20000c78
 80090d8:	20000020 	.word	0x20000020
 80090dc:	20000c7c 	.word	0x20000c7c
 80090e0:	20000d04 	.word	0x20000d04
 80090e4:	20000c80 	.word	0x20000c80
 80090e8:	20000c84 	.word	0x20000c84

080090ec <UTIL_SEQ_RegTask>:
 80090ec:	b580      	push	{r7, lr}
 80090ee:	b088      	sub	sp, #32
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	60f8      	str	r0, [r7, #12]
 80090f4:	60b9      	str	r1, [r7, #8]
 80090f6:	607a      	str	r2, [r7, #4]
 80090f8:	f3ef 8310 	mrs	r3, PRIMASK
 80090fc:	617b      	str	r3, [r7, #20]
 80090fe:	697b      	ldr	r3, [r7, #20]
 8009100:	61fb      	str	r3, [r7, #28]
 8009102:	b672      	cpsid	i
 8009104:	bf00      	nop
 8009106:	68f8      	ldr	r0, [r7, #12]
 8009108:	f000 f8f6 	bl	80092f8 <SEQ_BitPosition>
 800910c:	4603      	mov	r3, r0
 800910e:	4619      	mov	r1, r3
 8009110:	4a06      	ldr	r2, [pc, #24]	; (800912c <UTIL_SEQ_RegTask+0x40>)
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8009118:	69fb      	ldr	r3, [r7, #28]
 800911a:	61bb      	str	r3, [r7, #24]
 800911c:	69bb      	ldr	r3, [r7, #24]
 800911e:	f383 8810 	msr	PRIMASK, r3
 8009122:	bf00      	nop
 8009124:	bf00      	nop
 8009126:	3720      	adds	r7, #32
 8009128:	46bd      	mov	sp, r7
 800912a:	bd80      	pop	{r7, pc}
 800912c:	20000c84 	.word	0x20000c84

08009130 <UTIL_SEQ_SetTask>:
 8009130:	b480      	push	{r7}
 8009132:	b087      	sub	sp, #28
 8009134:	af00      	add	r7, sp, #0
 8009136:	6078      	str	r0, [r7, #4]
 8009138:	6039      	str	r1, [r7, #0]
 800913a:	f3ef 8310 	mrs	r3, PRIMASK
 800913e:	60fb      	str	r3, [r7, #12]
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	617b      	str	r3, [r7, #20]
 8009144:	b672      	cpsid	i
 8009146:	bf00      	nop
 8009148:	4b0d      	ldr	r3, [pc, #52]	; (8009180 <UTIL_SEQ_SetTask+0x50>)
 800914a:	681a      	ldr	r2, [r3, #0]
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	4313      	orrs	r3, r2
 8009150:	4a0b      	ldr	r2, [pc, #44]	; (8009180 <UTIL_SEQ_SetTask+0x50>)
 8009152:	6013      	str	r3, [r2, #0]
 8009154:	4a0b      	ldr	r2, [pc, #44]	; (8009184 <UTIL_SEQ_SetTask+0x54>)
 8009156:	683b      	ldr	r3, [r7, #0]
 8009158:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	431a      	orrs	r2, r3
 8009160:	4908      	ldr	r1, [pc, #32]	; (8009184 <UTIL_SEQ_SetTask+0x54>)
 8009162:	683b      	ldr	r3, [r7, #0]
 8009164:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 8009168:	697b      	ldr	r3, [r7, #20]
 800916a:	613b      	str	r3, [r7, #16]
 800916c:	693b      	ldr	r3, [r7, #16]
 800916e:	f383 8810 	msr	PRIMASK, r3
 8009172:	bf00      	nop
 8009174:	bf00      	nop
 8009176:	371c      	adds	r7, #28
 8009178:	46bd      	mov	sp, r7
 800917a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917e:	4770      	bx	lr
 8009180:	20000c74 	.word	0x20000c74
 8009184:	20000d04 	.word	0x20000d04

08009188 <UTIL_SEQ_PauseTask>:
 8009188:	b480      	push	{r7}
 800918a:	b087      	sub	sp, #28
 800918c:	af00      	add	r7, sp, #0
 800918e:	6078      	str	r0, [r7, #4]
 8009190:	f3ef 8310 	mrs	r3, PRIMASK
 8009194:	60fb      	str	r3, [r7, #12]
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	617b      	str	r3, [r7, #20]
 800919a:	b672      	cpsid	i
 800919c:	bf00      	nop
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	43da      	mvns	r2, r3
 80091a2:	4b08      	ldr	r3, [pc, #32]	; (80091c4 <UTIL_SEQ_PauseTask+0x3c>)
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	4013      	ands	r3, r2
 80091a8:	4a06      	ldr	r2, [pc, #24]	; (80091c4 <UTIL_SEQ_PauseTask+0x3c>)
 80091aa:	6013      	str	r3, [r2, #0]
 80091ac:	697b      	ldr	r3, [r7, #20]
 80091ae:	613b      	str	r3, [r7, #16]
 80091b0:	693b      	ldr	r3, [r7, #16]
 80091b2:	f383 8810 	msr	PRIMASK, r3
 80091b6:	bf00      	nop
 80091b8:	bf00      	nop
 80091ba:	371c      	adds	r7, #28
 80091bc:	46bd      	mov	sp, r7
 80091be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c2:	4770      	bx	lr
 80091c4:	20000020 	.word	0x20000020

080091c8 <UTIL_SEQ_ResumeTask>:
 80091c8:	b480      	push	{r7}
 80091ca:	b087      	sub	sp, #28
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	6078      	str	r0, [r7, #4]
 80091d0:	f3ef 8310 	mrs	r3, PRIMASK
 80091d4:	60fb      	str	r3, [r7, #12]
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	617b      	str	r3, [r7, #20]
 80091da:	b672      	cpsid	i
 80091dc:	bf00      	nop
 80091de:	4b09      	ldr	r3, [pc, #36]	; (8009204 <UTIL_SEQ_ResumeTask+0x3c>)
 80091e0:	681a      	ldr	r2, [r3, #0]
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	4313      	orrs	r3, r2
 80091e6:	4a07      	ldr	r2, [pc, #28]	; (8009204 <UTIL_SEQ_ResumeTask+0x3c>)
 80091e8:	6013      	str	r3, [r2, #0]
 80091ea:	697b      	ldr	r3, [r7, #20]
 80091ec:	613b      	str	r3, [r7, #16]
 80091ee:	693b      	ldr	r3, [r7, #16]
 80091f0:	f383 8810 	msr	PRIMASK, r3
 80091f4:	bf00      	nop
 80091f6:	bf00      	nop
 80091f8:	371c      	adds	r7, #28
 80091fa:	46bd      	mov	sp, r7
 80091fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009200:	4770      	bx	lr
 8009202:	bf00      	nop
 8009204:	20000020 	.word	0x20000020

08009208 <UTIL_SEQ_SetEvt>:
 8009208:	b480      	push	{r7}
 800920a:	b087      	sub	sp, #28
 800920c:	af00      	add	r7, sp, #0
 800920e:	6078      	str	r0, [r7, #4]
 8009210:	f3ef 8310 	mrs	r3, PRIMASK
 8009214:	60fb      	str	r3, [r7, #12]
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	617b      	str	r3, [r7, #20]
 800921a:	b672      	cpsid	i
 800921c:	bf00      	nop
 800921e:	4b09      	ldr	r3, [pc, #36]	; (8009244 <UTIL_SEQ_SetEvt+0x3c>)
 8009220:	681a      	ldr	r2, [r3, #0]
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	4313      	orrs	r3, r2
 8009226:	4a07      	ldr	r2, [pc, #28]	; (8009244 <UTIL_SEQ_SetEvt+0x3c>)
 8009228:	6013      	str	r3, [r2, #0]
 800922a:	697b      	ldr	r3, [r7, #20]
 800922c:	613b      	str	r3, [r7, #16]
 800922e:	693b      	ldr	r3, [r7, #16]
 8009230:	f383 8810 	msr	PRIMASK, r3
 8009234:	bf00      	nop
 8009236:	bf00      	nop
 8009238:	371c      	adds	r7, #28
 800923a:	46bd      	mov	sp, r7
 800923c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009240:	4770      	bx	lr
 8009242:	bf00      	nop
 8009244:	20000c78 	.word	0x20000c78

08009248 <UTIL_SEQ_WaitEvt>:
 8009248:	b580      	push	{r7, lr}
 800924a:	b088      	sub	sp, #32
 800924c:	af00      	add	r7, sp, #0
 800924e:	6078      	str	r0, [r7, #4]
 8009250:	4b1f      	ldr	r3, [pc, #124]	; (80092d0 <UTIL_SEQ_WaitEvt+0x88>)
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	61bb      	str	r3, [r7, #24]
 8009256:	4b1e      	ldr	r3, [pc, #120]	; (80092d0 <UTIL_SEQ_WaitEvt+0x88>)
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800925e:	d102      	bne.n	8009266 <UTIL_SEQ_WaitEvt+0x1e>
 8009260:	2300      	movs	r3, #0
 8009262:	61fb      	str	r3, [r7, #28]
 8009264:	e005      	b.n	8009272 <UTIL_SEQ_WaitEvt+0x2a>
 8009266:	4b1a      	ldr	r3, [pc, #104]	; (80092d0 <UTIL_SEQ_WaitEvt+0x88>)
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	2201      	movs	r2, #1
 800926c:	fa02 f303 	lsl.w	r3, r2, r3
 8009270:	61fb      	str	r3, [r7, #28]
 8009272:	4b18      	ldr	r3, [pc, #96]	; (80092d4 <UTIL_SEQ_WaitEvt+0x8c>)
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	617b      	str	r3, [r7, #20]
 8009278:	4a16      	ldr	r2, [pc, #88]	; (80092d4 <UTIL_SEQ_WaitEvt+0x8c>)
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	6013      	str	r3, [r2, #0]
 800927e:	e003      	b.n	8009288 <UTIL_SEQ_WaitEvt+0x40>
 8009280:	6879      	ldr	r1, [r7, #4]
 8009282:	69f8      	ldr	r0, [r7, #28]
 8009284:	f7f7 fc97 	bl	8000bb6 <UTIL_SEQ_EvtIdle>
 8009288:	4b13      	ldr	r3, [pc, #76]	; (80092d8 <UTIL_SEQ_WaitEvt+0x90>)
 800928a:	681a      	ldr	r2, [r3, #0]
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	4013      	ands	r3, r2
 8009290:	2b00      	cmp	r3, #0
 8009292:	d0f5      	beq.n	8009280 <UTIL_SEQ_WaitEvt+0x38>
 8009294:	4a0e      	ldr	r2, [pc, #56]	; (80092d0 <UTIL_SEQ_WaitEvt+0x88>)
 8009296:	69bb      	ldr	r3, [r7, #24]
 8009298:	6013      	str	r3, [r2, #0]
 800929a:	f3ef 8310 	mrs	r3, PRIMASK
 800929e:	60bb      	str	r3, [r7, #8]
 80092a0:	68bb      	ldr	r3, [r7, #8]
 80092a2:	613b      	str	r3, [r7, #16]
 80092a4:	b672      	cpsid	i
 80092a6:	bf00      	nop
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	43da      	mvns	r2, r3
 80092ac:	4b0a      	ldr	r3, [pc, #40]	; (80092d8 <UTIL_SEQ_WaitEvt+0x90>)
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	4013      	ands	r3, r2
 80092b2:	4a09      	ldr	r2, [pc, #36]	; (80092d8 <UTIL_SEQ_WaitEvt+0x90>)
 80092b4:	6013      	str	r3, [r2, #0]
 80092b6:	693b      	ldr	r3, [r7, #16]
 80092b8:	60fb      	str	r3, [r7, #12]
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	f383 8810 	msr	PRIMASK, r3
 80092c0:	bf00      	nop
 80092c2:	4a04      	ldr	r2, [pc, #16]	; (80092d4 <UTIL_SEQ_WaitEvt+0x8c>)
 80092c4:	697b      	ldr	r3, [r7, #20]
 80092c6:	6013      	str	r3, [r2, #0]
 80092c8:	bf00      	nop
 80092ca:	3720      	adds	r7, #32
 80092cc:	46bd      	mov	sp, r7
 80092ce:	bd80      	pop	{r7, pc}
 80092d0:	20000c80 	.word	0x20000c80
 80092d4:	20000c7c 	.word	0x20000c7c
 80092d8:	20000c78 	.word	0x20000c78

080092dc <UTIL_SEQ_PreIdle>:
 80092dc:	b480      	push	{r7}
 80092de:	af00      	add	r7, sp, #0
 80092e0:	bf00      	nop
 80092e2:	46bd      	mov	sp, r7
 80092e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e8:	4770      	bx	lr

080092ea <UTIL_SEQ_PostIdle>:
 80092ea:	b480      	push	{r7}
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	bf00      	nop
 80092f0:	46bd      	mov	sp, r7
 80092f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f6:	4770      	bx	lr

080092f8 <SEQ_BitPosition>:
 80092f8:	b480      	push	{r7}
 80092fa:	b085      	sub	sp, #20
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	6078      	str	r0, [r7, #4]
 8009300:	2300      	movs	r3, #0
 8009302:	73fb      	strb	r3, [r7, #15]
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	60bb      	str	r3, [r7, #8]
 8009308:	68bb      	ldr	r3, [r7, #8]
 800930a:	0c1b      	lsrs	r3, r3, #16
 800930c:	041b      	lsls	r3, r3, #16
 800930e:	2b00      	cmp	r3, #0
 8009310:	d104      	bne.n	800931c <SEQ_BitPosition+0x24>
 8009312:	2310      	movs	r3, #16
 8009314:	73fb      	strb	r3, [r7, #15]
 8009316:	68bb      	ldr	r3, [r7, #8]
 8009318:	041b      	lsls	r3, r3, #16
 800931a:	60bb      	str	r3, [r7, #8]
 800931c:	68bb      	ldr	r3, [r7, #8]
 800931e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8009322:	2b00      	cmp	r3, #0
 8009324:	d105      	bne.n	8009332 <SEQ_BitPosition+0x3a>
 8009326:	7bfb      	ldrb	r3, [r7, #15]
 8009328:	3308      	adds	r3, #8
 800932a:	73fb      	strb	r3, [r7, #15]
 800932c:	68bb      	ldr	r3, [r7, #8]
 800932e:	021b      	lsls	r3, r3, #8
 8009330:	60bb      	str	r3, [r7, #8]
 8009332:	68bb      	ldr	r3, [r7, #8]
 8009334:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8009338:	2b00      	cmp	r3, #0
 800933a:	d105      	bne.n	8009348 <SEQ_BitPosition+0x50>
 800933c:	7bfb      	ldrb	r3, [r7, #15]
 800933e:	3304      	adds	r3, #4
 8009340:	73fb      	strb	r3, [r7, #15]
 8009342:	68bb      	ldr	r3, [r7, #8]
 8009344:	011b      	lsls	r3, r3, #4
 8009346:	60bb      	str	r3, [r7, #8]
 8009348:	68bb      	ldr	r3, [r7, #8]
 800934a:	0f1b      	lsrs	r3, r3, #28
 800934c:	4a07      	ldr	r2, [pc, #28]	; (800936c <SEQ_BitPosition+0x74>)
 800934e:	5cd2      	ldrb	r2, [r2, r3]
 8009350:	7bfb      	ldrb	r3, [r7, #15]
 8009352:	4413      	add	r3, r2
 8009354:	73fb      	strb	r3, [r7, #15]
 8009356:	7bfb      	ldrb	r3, [r7, #15]
 8009358:	f1c3 031f 	rsb	r3, r3, #31
 800935c:	b2db      	uxtb	r3, r3
 800935e:	4618      	mov	r0, r3
 8009360:	3714      	adds	r7, #20
 8009362:	46bd      	mov	sp, r7
 8009364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009368:	4770      	bx	lr
 800936a:	bf00      	nop
 800936c:	0800a5ec 	.word	0x0800a5ec

08009370 <__errno>:
 8009370:	4b01      	ldr	r3, [pc, #4]	; (8009378 <__errno+0x8>)
 8009372:	6818      	ldr	r0, [r3, #0]
 8009374:	4770      	bx	lr
 8009376:	bf00      	nop
 8009378:	20000028 	.word	0x20000028

0800937c <__libc_init_array>:
 800937c:	b570      	push	{r4, r5, r6, lr}
 800937e:	4d0d      	ldr	r5, [pc, #52]	; (80093b4 <__libc_init_array+0x38>)
 8009380:	4c0d      	ldr	r4, [pc, #52]	; (80093b8 <__libc_init_array+0x3c>)
 8009382:	1b64      	subs	r4, r4, r5
 8009384:	10a4      	asrs	r4, r4, #2
 8009386:	2600      	movs	r6, #0
 8009388:	42a6      	cmp	r6, r4
 800938a:	d109      	bne.n	80093a0 <__libc_init_array+0x24>
 800938c:	4d0b      	ldr	r5, [pc, #44]	; (80093bc <__libc_init_array+0x40>)
 800938e:	4c0c      	ldr	r4, [pc, #48]	; (80093c0 <__libc_init_array+0x44>)
 8009390:	f000 ffbc 	bl	800a30c <_init>
 8009394:	1b64      	subs	r4, r4, r5
 8009396:	10a4      	asrs	r4, r4, #2
 8009398:	2600      	movs	r6, #0
 800939a:	42a6      	cmp	r6, r4
 800939c:	d105      	bne.n	80093aa <__libc_init_array+0x2e>
 800939e:	bd70      	pop	{r4, r5, r6, pc}
 80093a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80093a4:	4798      	blx	r3
 80093a6:	3601      	adds	r6, #1
 80093a8:	e7ee      	b.n	8009388 <__libc_init_array+0xc>
 80093aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80093ae:	4798      	blx	r3
 80093b0:	3601      	adds	r6, #1
 80093b2:	e7f2      	b.n	800939a <__libc_init_array+0x1e>
 80093b4:	0800a69c 	.word	0x0800a69c
 80093b8:	0800a69c 	.word	0x0800a69c
 80093bc:	0800a69c 	.word	0x0800a69c
 80093c0:	0800a6a0 	.word	0x0800a6a0

080093c4 <memcpy>:
 80093c4:	440a      	add	r2, r1
 80093c6:	4291      	cmp	r1, r2
 80093c8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80093cc:	d100      	bne.n	80093d0 <memcpy+0xc>
 80093ce:	4770      	bx	lr
 80093d0:	b510      	push	{r4, lr}
 80093d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80093d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80093da:	4291      	cmp	r1, r2
 80093dc:	d1f9      	bne.n	80093d2 <memcpy+0xe>
 80093de:	bd10      	pop	{r4, pc}

080093e0 <memset>:
 80093e0:	4402      	add	r2, r0
 80093e2:	4603      	mov	r3, r0
 80093e4:	4293      	cmp	r3, r2
 80093e6:	d100      	bne.n	80093ea <memset+0xa>
 80093e8:	4770      	bx	lr
 80093ea:	f803 1b01 	strb.w	r1, [r3], #1
 80093ee:	e7f9      	b.n	80093e4 <memset+0x4>

080093f0 <iprintf>:
 80093f0:	b40f      	push	{r0, r1, r2, r3}
 80093f2:	4b0a      	ldr	r3, [pc, #40]	; (800941c <iprintf+0x2c>)
 80093f4:	b513      	push	{r0, r1, r4, lr}
 80093f6:	681c      	ldr	r4, [r3, #0]
 80093f8:	b124      	cbz	r4, 8009404 <iprintf+0x14>
 80093fa:	69a3      	ldr	r3, [r4, #24]
 80093fc:	b913      	cbnz	r3, 8009404 <iprintf+0x14>
 80093fe:	4620      	mov	r0, r4
 8009400:	f000 f866 	bl	80094d0 <__sinit>
 8009404:	ab05      	add	r3, sp, #20
 8009406:	9a04      	ldr	r2, [sp, #16]
 8009408:	68a1      	ldr	r1, [r4, #8]
 800940a:	9301      	str	r3, [sp, #4]
 800940c:	4620      	mov	r0, r4
 800940e:	f000 f9bd 	bl	800978c <_vfiprintf_r>
 8009412:	b002      	add	sp, #8
 8009414:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009418:	b004      	add	sp, #16
 800941a:	4770      	bx	lr
 800941c:	20000028 	.word	0x20000028

08009420 <std>:
 8009420:	2300      	movs	r3, #0
 8009422:	b510      	push	{r4, lr}
 8009424:	4604      	mov	r4, r0
 8009426:	e9c0 3300 	strd	r3, r3, [r0]
 800942a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800942e:	6083      	str	r3, [r0, #8]
 8009430:	8181      	strh	r1, [r0, #12]
 8009432:	6643      	str	r3, [r0, #100]	; 0x64
 8009434:	81c2      	strh	r2, [r0, #14]
 8009436:	6183      	str	r3, [r0, #24]
 8009438:	4619      	mov	r1, r3
 800943a:	2208      	movs	r2, #8
 800943c:	305c      	adds	r0, #92	; 0x5c
 800943e:	f7ff ffcf 	bl	80093e0 <memset>
 8009442:	4b05      	ldr	r3, [pc, #20]	; (8009458 <std+0x38>)
 8009444:	6263      	str	r3, [r4, #36]	; 0x24
 8009446:	4b05      	ldr	r3, [pc, #20]	; (800945c <std+0x3c>)
 8009448:	62a3      	str	r3, [r4, #40]	; 0x28
 800944a:	4b05      	ldr	r3, [pc, #20]	; (8009460 <std+0x40>)
 800944c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800944e:	4b05      	ldr	r3, [pc, #20]	; (8009464 <std+0x44>)
 8009450:	6224      	str	r4, [r4, #32]
 8009452:	6323      	str	r3, [r4, #48]	; 0x30
 8009454:	bd10      	pop	{r4, pc}
 8009456:	bf00      	nop
 8009458:	08009d35 	.word	0x08009d35
 800945c:	08009d57 	.word	0x08009d57
 8009460:	08009d8f 	.word	0x08009d8f
 8009464:	08009db3 	.word	0x08009db3

08009468 <_cleanup_r>:
 8009468:	4901      	ldr	r1, [pc, #4]	; (8009470 <_cleanup_r+0x8>)
 800946a:	f000 b8af 	b.w	80095cc <_fwalk_reent>
 800946e:	bf00      	nop
 8009470:	0800a08d 	.word	0x0800a08d

08009474 <__sfmoreglue>:
 8009474:	b570      	push	{r4, r5, r6, lr}
 8009476:	2268      	movs	r2, #104	; 0x68
 8009478:	1e4d      	subs	r5, r1, #1
 800947a:	4355      	muls	r5, r2
 800947c:	460e      	mov	r6, r1
 800947e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009482:	f000 f8e5 	bl	8009650 <_malloc_r>
 8009486:	4604      	mov	r4, r0
 8009488:	b140      	cbz	r0, 800949c <__sfmoreglue+0x28>
 800948a:	2100      	movs	r1, #0
 800948c:	e9c0 1600 	strd	r1, r6, [r0]
 8009490:	300c      	adds	r0, #12
 8009492:	60a0      	str	r0, [r4, #8]
 8009494:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009498:	f7ff ffa2 	bl	80093e0 <memset>
 800949c:	4620      	mov	r0, r4
 800949e:	bd70      	pop	{r4, r5, r6, pc}

080094a0 <__sfp_lock_acquire>:
 80094a0:	4801      	ldr	r0, [pc, #4]	; (80094a8 <__sfp_lock_acquire+0x8>)
 80094a2:	f000 b8b3 	b.w	800960c <__retarget_lock_acquire_recursive>
 80094a6:	bf00      	nop
 80094a8:	20000d15 	.word	0x20000d15

080094ac <__sfp_lock_release>:
 80094ac:	4801      	ldr	r0, [pc, #4]	; (80094b4 <__sfp_lock_release+0x8>)
 80094ae:	f000 b8ae 	b.w	800960e <__retarget_lock_release_recursive>
 80094b2:	bf00      	nop
 80094b4:	20000d15 	.word	0x20000d15

080094b8 <__sinit_lock_acquire>:
 80094b8:	4801      	ldr	r0, [pc, #4]	; (80094c0 <__sinit_lock_acquire+0x8>)
 80094ba:	f000 b8a7 	b.w	800960c <__retarget_lock_acquire_recursive>
 80094be:	bf00      	nop
 80094c0:	20000d16 	.word	0x20000d16

080094c4 <__sinit_lock_release>:
 80094c4:	4801      	ldr	r0, [pc, #4]	; (80094cc <__sinit_lock_release+0x8>)
 80094c6:	f000 b8a2 	b.w	800960e <__retarget_lock_release_recursive>
 80094ca:	bf00      	nop
 80094cc:	20000d16 	.word	0x20000d16

080094d0 <__sinit>:
 80094d0:	b510      	push	{r4, lr}
 80094d2:	4604      	mov	r4, r0
 80094d4:	f7ff fff0 	bl	80094b8 <__sinit_lock_acquire>
 80094d8:	69a3      	ldr	r3, [r4, #24]
 80094da:	b11b      	cbz	r3, 80094e4 <__sinit+0x14>
 80094dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80094e0:	f7ff bff0 	b.w	80094c4 <__sinit_lock_release>
 80094e4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80094e8:	6523      	str	r3, [r4, #80]	; 0x50
 80094ea:	4b13      	ldr	r3, [pc, #76]	; (8009538 <__sinit+0x68>)
 80094ec:	4a13      	ldr	r2, [pc, #76]	; (800953c <__sinit+0x6c>)
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	62a2      	str	r2, [r4, #40]	; 0x28
 80094f2:	42a3      	cmp	r3, r4
 80094f4:	bf04      	itt	eq
 80094f6:	2301      	moveq	r3, #1
 80094f8:	61a3      	streq	r3, [r4, #24]
 80094fa:	4620      	mov	r0, r4
 80094fc:	f000 f820 	bl	8009540 <__sfp>
 8009500:	6060      	str	r0, [r4, #4]
 8009502:	4620      	mov	r0, r4
 8009504:	f000 f81c 	bl	8009540 <__sfp>
 8009508:	60a0      	str	r0, [r4, #8]
 800950a:	4620      	mov	r0, r4
 800950c:	f000 f818 	bl	8009540 <__sfp>
 8009510:	2200      	movs	r2, #0
 8009512:	60e0      	str	r0, [r4, #12]
 8009514:	2104      	movs	r1, #4
 8009516:	6860      	ldr	r0, [r4, #4]
 8009518:	f7ff ff82 	bl	8009420 <std>
 800951c:	68a0      	ldr	r0, [r4, #8]
 800951e:	2201      	movs	r2, #1
 8009520:	2109      	movs	r1, #9
 8009522:	f7ff ff7d 	bl	8009420 <std>
 8009526:	68e0      	ldr	r0, [r4, #12]
 8009528:	2202      	movs	r2, #2
 800952a:	2112      	movs	r1, #18
 800952c:	f7ff ff78 	bl	8009420 <std>
 8009530:	2301      	movs	r3, #1
 8009532:	61a3      	str	r3, [r4, #24]
 8009534:	e7d2      	b.n	80094dc <__sinit+0xc>
 8009536:	bf00      	nop
 8009538:	0800a5fc 	.word	0x0800a5fc
 800953c:	08009469 	.word	0x08009469

08009540 <__sfp>:
 8009540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009542:	4607      	mov	r7, r0
 8009544:	f7ff ffac 	bl	80094a0 <__sfp_lock_acquire>
 8009548:	4b1e      	ldr	r3, [pc, #120]	; (80095c4 <__sfp+0x84>)
 800954a:	681e      	ldr	r6, [r3, #0]
 800954c:	69b3      	ldr	r3, [r6, #24]
 800954e:	b913      	cbnz	r3, 8009556 <__sfp+0x16>
 8009550:	4630      	mov	r0, r6
 8009552:	f7ff ffbd 	bl	80094d0 <__sinit>
 8009556:	3648      	adds	r6, #72	; 0x48
 8009558:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800955c:	3b01      	subs	r3, #1
 800955e:	d503      	bpl.n	8009568 <__sfp+0x28>
 8009560:	6833      	ldr	r3, [r6, #0]
 8009562:	b30b      	cbz	r3, 80095a8 <__sfp+0x68>
 8009564:	6836      	ldr	r6, [r6, #0]
 8009566:	e7f7      	b.n	8009558 <__sfp+0x18>
 8009568:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800956c:	b9d5      	cbnz	r5, 80095a4 <__sfp+0x64>
 800956e:	4b16      	ldr	r3, [pc, #88]	; (80095c8 <__sfp+0x88>)
 8009570:	60e3      	str	r3, [r4, #12]
 8009572:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009576:	6665      	str	r5, [r4, #100]	; 0x64
 8009578:	f000 f847 	bl	800960a <__retarget_lock_init_recursive>
 800957c:	f7ff ff96 	bl	80094ac <__sfp_lock_release>
 8009580:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009584:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009588:	6025      	str	r5, [r4, #0]
 800958a:	61a5      	str	r5, [r4, #24]
 800958c:	2208      	movs	r2, #8
 800958e:	4629      	mov	r1, r5
 8009590:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009594:	f7ff ff24 	bl	80093e0 <memset>
 8009598:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800959c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80095a0:	4620      	mov	r0, r4
 80095a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80095a4:	3468      	adds	r4, #104	; 0x68
 80095a6:	e7d9      	b.n	800955c <__sfp+0x1c>
 80095a8:	2104      	movs	r1, #4
 80095aa:	4638      	mov	r0, r7
 80095ac:	f7ff ff62 	bl	8009474 <__sfmoreglue>
 80095b0:	4604      	mov	r4, r0
 80095b2:	6030      	str	r0, [r6, #0]
 80095b4:	2800      	cmp	r0, #0
 80095b6:	d1d5      	bne.n	8009564 <__sfp+0x24>
 80095b8:	f7ff ff78 	bl	80094ac <__sfp_lock_release>
 80095bc:	230c      	movs	r3, #12
 80095be:	603b      	str	r3, [r7, #0]
 80095c0:	e7ee      	b.n	80095a0 <__sfp+0x60>
 80095c2:	bf00      	nop
 80095c4:	0800a5fc 	.word	0x0800a5fc
 80095c8:	ffff0001 	.word	0xffff0001

080095cc <_fwalk_reent>:
 80095cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80095d0:	4606      	mov	r6, r0
 80095d2:	4688      	mov	r8, r1
 80095d4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80095d8:	2700      	movs	r7, #0
 80095da:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80095de:	f1b9 0901 	subs.w	r9, r9, #1
 80095e2:	d505      	bpl.n	80095f0 <_fwalk_reent+0x24>
 80095e4:	6824      	ldr	r4, [r4, #0]
 80095e6:	2c00      	cmp	r4, #0
 80095e8:	d1f7      	bne.n	80095da <_fwalk_reent+0xe>
 80095ea:	4638      	mov	r0, r7
 80095ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80095f0:	89ab      	ldrh	r3, [r5, #12]
 80095f2:	2b01      	cmp	r3, #1
 80095f4:	d907      	bls.n	8009606 <_fwalk_reent+0x3a>
 80095f6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80095fa:	3301      	adds	r3, #1
 80095fc:	d003      	beq.n	8009606 <_fwalk_reent+0x3a>
 80095fe:	4629      	mov	r1, r5
 8009600:	4630      	mov	r0, r6
 8009602:	47c0      	blx	r8
 8009604:	4307      	orrs	r7, r0
 8009606:	3568      	adds	r5, #104	; 0x68
 8009608:	e7e9      	b.n	80095de <_fwalk_reent+0x12>

0800960a <__retarget_lock_init_recursive>:
 800960a:	4770      	bx	lr

0800960c <__retarget_lock_acquire_recursive>:
 800960c:	4770      	bx	lr

0800960e <__retarget_lock_release_recursive>:
 800960e:	4770      	bx	lr

08009610 <sbrk_aligned>:
 8009610:	b570      	push	{r4, r5, r6, lr}
 8009612:	4e0e      	ldr	r6, [pc, #56]	; (800964c <sbrk_aligned+0x3c>)
 8009614:	460c      	mov	r4, r1
 8009616:	6831      	ldr	r1, [r6, #0]
 8009618:	4605      	mov	r5, r0
 800961a:	b911      	cbnz	r1, 8009622 <sbrk_aligned+0x12>
 800961c:	f000 fb7a 	bl	8009d14 <_sbrk_r>
 8009620:	6030      	str	r0, [r6, #0]
 8009622:	4621      	mov	r1, r4
 8009624:	4628      	mov	r0, r5
 8009626:	f000 fb75 	bl	8009d14 <_sbrk_r>
 800962a:	1c43      	adds	r3, r0, #1
 800962c:	d00a      	beq.n	8009644 <sbrk_aligned+0x34>
 800962e:	1cc4      	adds	r4, r0, #3
 8009630:	f024 0403 	bic.w	r4, r4, #3
 8009634:	42a0      	cmp	r0, r4
 8009636:	d007      	beq.n	8009648 <sbrk_aligned+0x38>
 8009638:	1a21      	subs	r1, r4, r0
 800963a:	4628      	mov	r0, r5
 800963c:	f000 fb6a 	bl	8009d14 <_sbrk_r>
 8009640:	3001      	adds	r0, #1
 8009642:	d101      	bne.n	8009648 <sbrk_aligned+0x38>
 8009644:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8009648:	4620      	mov	r0, r4
 800964a:	bd70      	pop	{r4, r5, r6, pc}
 800964c:	20000d1c 	.word	0x20000d1c

08009650 <_malloc_r>:
 8009650:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009654:	1ccd      	adds	r5, r1, #3
 8009656:	f025 0503 	bic.w	r5, r5, #3
 800965a:	3508      	adds	r5, #8
 800965c:	2d0c      	cmp	r5, #12
 800965e:	bf38      	it	cc
 8009660:	250c      	movcc	r5, #12
 8009662:	2d00      	cmp	r5, #0
 8009664:	4607      	mov	r7, r0
 8009666:	db01      	blt.n	800966c <_malloc_r+0x1c>
 8009668:	42a9      	cmp	r1, r5
 800966a:	d905      	bls.n	8009678 <_malloc_r+0x28>
 800966c:	230c      	movs	r3, #12
 800966e:	603b      	str	r3, [r7, #0]
 8009670:	2600      	movs	r6, #0
 8009672:	4630      	mov	r0, r6
 8009674:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009678:	4e2e      	ldr	r6, [pc, #184]	; (8009734 <_malloc_r+0xe4>)
 800967a:	f000 fdbb 	bl	800a1f4 <__malloc_lock>
 800967e:	6833      	ldr	r3, [r6, #0]
 8009680:	461c      	mov	r4, r3
 8009682:	bb34      	cbnz	r4, 80096d2 <_malloc_r+0x82>
 8009684:	4629      	mov	r1, r5
 8009686:	4638      	mov	r0, r7
 8009688:	f7ff ffc2 	bl	8009610 <sbrk_aligned>
 800968c:	1c43      	adds	r3, r0, #1
 800968e:	4604      	mov	r4, r0
 8009690:	d14d      	bne.n	800972e <_malloc_r+0xde>
 8009692:	6834      	ldr	r4, [r6, #0]
 8009694:	4626      	mov	r6, r4
 8009696:	2e00      	cmp	r6, #0
 8009698:	d140      	bne.n	800971c <_malloc_r+0xcc>
 800969a:	6823      	ldr	r3, [r4, #0]
 800969c:	4631      	mov	r1, r6
 800969e:	4638      	mov	r0, r7
 80096a0:	eb04 0803 	add.w	r8, r4, r3
 80096a4:	f000 fb36 	bl	8009d14 <_sbrk_r>
 80096a8:	4580      	cmp	r8, r0
 80096aa:	d13a      	bne.n	8009722 <_malloc_r+0xd2>
 80096ac:	6821      	ldr	r1, [r4, #0]
 80096ae:	3503      	adds	r5, #3
 80096b0:	1a6d      	subs	r5, r5, r1
 80096b2:	f025 0503 	bic.w	r5, r5, #3
 80096b6:	3508      	adds	r5, #8
 80096b8:	2d0c      	cmp	r5, #12
 80096ba:	bf38      	it	cc
 80096bc:	250c      	movcc	r5, #12
 80096be:	4629      	mov	r1, r5
 80096c0:	4638      	mov	r0, r7
 80096c2:	f7ff ffa5 	bl	8009610 <sbrk_aligned>
 80096c6:	3001      	adds	r0, #1
 80096c8:	d02b      	beq.n	8009722 <_malloc_r+0xd2>
 80096ca:	6823      	ldr	r3, [r4, #0]
 80096cc:	442b      	add	r3, r5
 80096ce:	6023      	str	r3, [r4, #0]
 80096d0:	e00e      	b.n	80096f0 <_malloc_r+0xa0>
 80096d2:	6822      	ldr	r2, [r4, #0]
 80096d4:	1b52      	subs	r2, r2, r5
 80096d6:	d41e      	bmi.n	8009716 <_malloc_r+0xc6>
 80096d8:	2a0b      	cmp	r2, #11
 80096da:	d916      	bls.n	800970a <_malloc_r+0xba>
 80096dc:	1961      	adds	r1, r4, r5
 80096de:	42a3      	cmp	r3, r4
 80096e0:	6025      	str	r5, [r4, #0]
 80096e2:	bf18      	it	ne
 80096e4:	6059      	strne	r1, [r3, #4]
 80096e6:	6863      	ldr	r3, [r4, #4]
 80096e8:	bf08      	it	eq
 80096ea:	6031      	streq	r1, [r6, #0]
 80096ec:	5162      	str	r2, [r4, r5]
 80096ee:	604b      	str	r3, [r1, #4]
 80096f0:	4638      	mov	r0, r7
 80096f2:	f104 060b 	add.w	r6, r4, #11
 80096f6:	f000 fd83 	bl	800a200 <__malloc_unlock>
 80096fa:	f026 0607 	bic.w	r6, r6, #7
 80096fe:	1d23      	adds	r3, r4, #4
 8009700:	1af2      	subs	r2, r6, r3
 8009702:	d0b6      	beq.n	8009672 <_malloc_r+0x22>
 8009704:	1b9b      	subs	r3, r3, r6
 8009706:	50a3      	str	r3, [r4, r2]
 8009708:	e7b3      	b.n	8009672 <_malloc_r+0x22>
 800970a:	6862      	ldr	r2, [r4, #4]
 800970c:	42a3      	cmp	r3, r4
 800970e:	bf0c      	ite	eq
 8009710:	6032      	streq	r2, [r6, #0]
 8009712:	605a      	strne	r2, [r3, #4]
 8009714:	e7ec      	b.n	80096f0 <_malloc_r+0xa0>
 8009716:	4623      	mov	r3, r4
 8009718:	6864      	ldr	r4, [r4, #4]
 800971a:	e7b2      	b.n	8009682 <_malloc_r+0x32>
 800971c:	4634      	mov	r4, r6
 800971e:	6876      	ldr	r6, [r6, #4]
 8009720:	e7b9      	b.n	8009696 <_malloc_r+0x46>
 8009722:	230c      	movs	r3, #12
 8009724:	603b      	str	r3, [r7, #0]
 8009726:	4638      	mov	r0, r7
 8009728:	f000 fd6a 	bl	800a200 <__malloc_unlock>
 800972c:	e7a1      	b.n	8009672 <_malloc_r+0x22>
 800972e:	6025      	str	r5, [r4, #0]
 8009730:	e7de      	b.n	80096f0 <_malloc_r+0xa0>
 8009732:	bf00      	nop
 8009734:	20000d18 	.word	0x20000d18

08009738 <__sfputc_r>:
 8009738:	6893      	ldr	r3, [r2, #8]
 800973a:	3b01      	subs	r3, #1
 800973c:	2b00      	cmp	r3, #0
 800973e:	b410      	push	{r4}
 8009740:	6093      	str	r3, [r2, #8]
 8009742:	da08      	bge.n	8009756 <__sfputc_r+0x1e>
 8009744:	6994      	ldr	r4, [r2, #24]
 8009746:	42a3      	cmp	r3, r4
 8009748:	db01      	blt.n	800974e <__sfputc_r+0x16>
 800974a:	290a      	cmp	r1, #10
 800974c:	d103      	bne.n	8009756 <__sfputc_r+0x1e>
 800974e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009752:	f000 bb33 	b.w	8009dbc <__swbuf_r>
 8009756:	6813      	ldr	r3, [r2, #0]
 8009758:	1c58      	adds	r0, r3, #1
 800975a:	6010      	str	r0, [r2, #0]
 800975c:	7019      	strb	r1, [r3, #0]
 800975e:	4608      	mov	r0, r1
 8009760:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009764:	4770      	bx	lr

08009766 <__sfputs_r>:
 8009766:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009768:	4606      	mov	r6, r0
 800976a:	460f      	mov	r7, r1
 800976c:	4614      	mov	r4, r2
 800976e:	18d5      	adds	r5, r2, r3
 8009770:	42ac      	cmp	r4, r5
 8009772:	d101      	bne.n	8009778 <__sfputs_r+0x12>
 8009774:	2000      	movs	r0, #0
 8009776:	e007      	b.n	8009788 <__sfputs_r+0x22>
 8009778:	f814 1b01 	ldrb.w	r1, [r4], #1
 800977c:	463a      	mov	r2, r7
 800977e:	4630      	mov	r0, r6
 8009780:	f7ff ffda 	bl	8009738 <__sfputc_r>
 8009784:	1c43      	adds	r3, r0, #1
 8009786:	d1f3      	bne.n	8009770 <__sfputs_r+0xa>
 8009788:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800978c <_vfiprintf_r>:
 800978c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009790:	460d      	mov	r5, r1
 8009792:	b09d      	sub	sp, #116	; 0x74
 8009794:	4614      	mov	r4, r2
 8009796:	4698      	mov	r8, r3
 8009798:	4606      	mov	r6, r0
 800979a:	b118      	cbz	r0, 80097a4 <_vfiprintf_r+0x18>
 800979c:	6983      	ldr	r3, [r0, #24]
 800979e:	b90b      	cbnz	r3, 80097a4 <_vfiprintf_r+0x18>
 80097a0:	f7ff fe96 	bl	80094d0 <__sinit>
 80097a4:	4b89      	ldr	r3, [pc, #548]	; (80099cc <_vfiprintf_r+0x240>)
 80097a6:	429d      	cmp	r5, r3
 80097a8:	d11b      	bne.n	80097e2 <_vfiprintf_r+0x56>
 80097aa:	6875      	ldr	r5, [r6, #4]
 80097ac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80097ae:	07d9      	lsls	r1, r3, #31
 80097b0:	d405      	bmi.n	80097be <_vfiprintf_r+0x32>
 80097b2:	89ab      	ldrh	r3, [r5, #12]
 80097b4:	059a      	lsls	r2, r3, #22
 80097b6:	d402      	bmi.n	80097be <_vfiprintf_r+0x32>
 80097b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80097ba:	f7ff ff27 	bl	800960c <__retarget_lock_acquire_recursive>
 80097be:	89ab      	ldrh	r3, [r5, #12]
 80097c0:	071b      	lsls	r3, r3, #28
 80097c2:	d501      	bpl.n	80097c8 <_vfiprintf_r+0x3c>
 80097c4:	692b      	ldr	r3, [r5, #16]
 80097c6:	b9eb      	cbnz	r3, 8009804 <_vfiprintf_r+0x78>
 80097c8:	4629      	mov	r1, r5
 80097ca:	4630      	mov	r0, r6
 80097cc:	f000 fb5a 	bl	8009e84 <__swsetup_r>
 80097d0:	b1c0      	cbz	r0, 8009804 <_vfiprintf_r+0x78>
 80097d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80097d4:	07dc      	lsls	r4, r3, #31
 80097d6:	d50e      	bpl.n	80097f6 <_vfiprintf_r+0x6a>
 80097d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80097dc:	b01d      	add	sp, #116	; 0x74
 80097de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097e2:	4b7b      	ldr	r3, [pc, #492]	; (80099d0 <_vfiprintf_r+0x244>)
 80097e4:	429d      	cmp	r5, r3
 80097e6:	d101      	bne.n	80097ec <_vfiprintf_r+0x60>
 80097e8:	68b5      	ldr	r5, [r6, #8]
 80097ea:	e7df      	b.n	80097ac <_vfiprintf_r+0x20>
 80097ec:	4b79      	ldr	r3, [pc, #484]	; (80099d4 <_vfiprintf_r+0x248>)
 80097ee:	429d      	cmp	r5, r3
 80097f0:	bf08      	it	eq
 80097f2:	68f5      	ldreq	r5, [r6, #12]
 80097f4:	e7da      	b.n	80097ac <_vfiprintf_r+0x20>
 80097f6:	89ab      	ldrh	r3, [r5, #12]
 80097f8:	0598      	lsls	r0, r3, #22
 80097fa:	d4ed      	bmi.n	80097d8 <_vfiprintf_r+0x4c>
 80097fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80097fe:	f7ff ff06 	bl	800960e <__retarget_lock_release_recursive>
 8009802:	e7e9      	b.n	80097d8 <_vfiprintf_r+0x4c>
 8009804:	2300      	movs	r3, #0
 8009806:	9309      	str	r3, [sp, #36]	; 0x24
 8009808:	2320      	movs	r3, #32
 800980a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800980e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009812:	2330      	movs	r3, #48	; 0x30
 8009814:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80099d8 <_vfiprintf_r+0x24c>
 8009818:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800981c:	f04f 0901 	mov.w	r9, #1
 8009820:	4623      	mov	r3, r4
 8009822:	469a      	mov	sl, r3
 8009824:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009828:	b10a      	cbz	r2, 800982e <_vfiprintf_r+0xa2>
 800982a:	2a25      	cmp	r2, #37	; 0x25
 800982c:	d1f9      	bne.n	8009822 <_vfiprintf_r+0x96>
 800982e:	ebba 0b04 	subs.w	fp, sl, r4
 8009832:	d00b      	beq.n	800984c <_vfiprintf_r+0xc0>
 8009834:	465b      	mov	r3, fp
 8009836:	4622      	mov	r2, r4
 8009838:	4629      	mov	r1, r5
 800983a:	4630      	mov	r0, r6
 800983c:	f7ff ff93 	bl	8009766 <__sfputs_r>
 8009840:	3001      	adds	r0, #1
 8009842:	f000 80aa 	beq.w	800999a <_vfiprintf_r+0x20e>
 8009846:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009848:	445a      	add	r2, fp
 800984a:	9209      	str	r2, [sp, #36]	; 0x24
 800984c:	f89a 3000 	ldrb.w	r3, [sl]
 8009850:	2b00      	cmp	r3, #0
 8009852:	f000 80a2 	beq.w	800999a <_vfiprintf_r+0x20e>
 8009856:	2300      	movs	r3, #0
 8009858:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800985c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009860:	f10a 0a01 	add.w	sl, sl, #1
 8009864:	9304      	str	r3, [sp, #16]
 8009866:	9307      	str	r3, [sp, #28]
 8009868:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800986c:	931a      	str	r3, [sp, #104]	; 0x68
 800986e:	4654      	mov	r4, sl
 8009870:	2205      	movs	r2, #5
 8009872:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009876:	4858      	ldr	r0, [pc, #352]	; (80099d8 <_vfiprintf_r+0x24c>)
 8009878:	f7f6 fc8a 	bl	8000190 <memchr>
 800987c:	9a04      	ldr	r2, [sp, #16]
 800987e:	b9d8      	cbnz	r0, 80098b8 <_vfiprintf_r+0x12c>
 8009880:	06d1      	lsls	r1, r2, #27
 8009882:	bf44      	itt	mi
 8009884:	2320      	movmi	r3, #32
 8009886:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800988a:	0713      	lsls	r3, r2, #28
 800988c:	bf44      	itt	mi
 800988e:	232b      	movmi	r3, #43	; 0x2b
 8009890:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009894:	f89a 3000 	ldrb.w	r3, [sl]
 8009898:	2b2a      	cmp	r3, #42	; 0x2a
 800989a:	d015      	beq.n	80098c8 <_vfiprintf_r+0x13c>
 800989c:	9a07      	ldr	r2, [sp, #28]
 800989e:	4654      	mov	r4, sl
 80098a0:	2000      	movs	r0, #0
 80098a2:	f04f 0c0a 	mov.w	ip, #10
 80098a6:	4621      	mov	r1, r4
 80098a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80098ac:	3b30      	subs	r3, #48	; 0x30
 80098ae:	2b09      	cmp	r3, #9
 80098b0:	d94e      	bls.n	8009950 <_vfiprintf_r+0x1c4>
 80098b2:	b1b0      	cbz	r0, 80098e2 <_vfiprintf_r+0x156>
 80098b4:	9207      	str	r2, [sp, #28]
 80098b6:	e014      	b.n	80098e2 <_vfiprintf_r+0x156>
 80098b8:	eba0 0308 	sub.w	r3, r0, r8
 80098bc:	fa09 f303 	lsl.w	r3, r9, r3
 80098c0:	4313      	orrs	r3, r2
 80098c2:	9304      	str	r3, [sp, #16]
 80098c4:	46a2      	mov	sl, r4
 80098c6:	e7d2      	b.n	800986e <_vfiprintf_r+0xe2>
 80098c8:	9b03      	ldr	r3, [sp, #12]
 80098ca:	1d19      	adds	r1, r3, #4
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	9103      	str	r1, [sp, #12]
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	bfbb      	ittet	lt
 80098d4:	425b      	neglt	r3, r3
 80098d6:	f042 0202 	orrlt.w	r2, r2, #2
 80098da:	9307      	strge	r3, [sp, #28]
 80098dc:	9307      	strlt	r3, [sp, #28]
 80098de:	bfb8      	it	lt
 80098e0:	9204      	strlt	r2, [sp, #16]
 80098e2:	7823      	ldrb	r3, [r4, #0]
 80098e4:	2b2e      	cmp	r3, #46	; 0x2e
 80098e6:	d10c      	bne.n	8009902 <_vfiprintf_r+0x176>
 80098e8:	7863      	ldrb	r3, [r4, #1]
 80098ea:	2b2a      	cmp	r3, #42	; 0x2a
 80098ec:	d135      	bne.n	800995a <_vfiprintf_r+0x1ce>
 80098ee:	9b03      	ldr	r3, [sp, #12]
 80098f0:	1d1a      	adds	r2, r3, #4
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	9203      	str	r2, [sp, #12]
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	bfb8      	it	lt
 80098fa:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80098fe:	3402      	adds	r4, #2
 8009900:	9305      	str	r3, [sp, #20]
 8009902:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80099e8 <_vfiprintf_r+0x25c>
 8009906:	7821      	ldrb	r1, [r4, #0]
 8009908:	2203      	movs	r2, #3
 800990a:	4650      	mov	r0, sl
 800990c:	f7f6 fc40 	bl	8000190 <memchr>
 8009910:	b140      	cbz	r0, 8009924 <_vfiprintf_r+0x198>
 8009912:	2340      	movs	r3, #64	; 0x40
 8009914:	eba0 000a 	sub.w	r0, r0, sl
 8009918:	fa03 f000 	lsl.w	r0, r3, r0
 800991c:	9b04      	ldr	r3, [sp, #16]
 800991e:	4303      	orrs	r3, r0
 8009920:	3401      	adds	r4, #1
 8009922:	9304      	str	r3, [sp, #16]
 8009924:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009928:	482c      	ldr	r0, [pc, #176]	; (80099dc <_vfiprintf_r+0x250>)
 800992a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800992e:	2206      	movs	r2, #6
 8009930:	f7f6 fc2e 	bl	8000190 <memchr>
 8009934:	2800      	cmp	r0, #0
 8009936:	d03f      	beq.n	80099b8 <_vfiprintf_r+0x22c>
 8009938:	4b29      	ldr	r3, [pc, #164]	; (80099e0 <_vfiprintf_r+0x254>)
 800993a:	bb1b      	cbnz	r3, 8009984 <_vfiprintf_r+0x1f8>
 800993c:	9b03      	ldr	r3, [sp, #12]
 800993e:	3307      	adds	r3, #7
 8009940:	f023 0307 	bic.w	r3, r3, #7
 8009944:	3308      	adds	r3, #8
 8009946:	9303      	str	r3, [sp, #12]
 8009948:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800994a:	443b      	add	r3, r7
 800994c:	9309      	str	r3, [sp, #36]	; 0x24
 800994e:	e767      	b.n	8009820 <_vfiprintf_r+0x94>
 8009950:	fb0c 3202 	mla	r2, ip, r2, r3
 8009954:	460c      	mov	r4, r1
 8009956:	2001      	movs	r0, #1
 8009958:	e7a5      	b.n	80098a6 <_vfiprintf_r+0x11a>
 800995a:	2300      	movs	r3, #0
 800995c:	3401      	adds	r4, #1
 800995e:	9305      	str	r3, [sp, #20]
 8009960:	4619      	mov	r1, r3
 8009962:	f04f 0c0a 	mov.w	ip, #10
 8009966:	4620      	mov	r0, r4
 8009968:	f810 2b01 	ldrb.w	r2, [r0], #1
 800996c:	3a30      	subs	r2, #48	; 0x30
 800996e:	2a09      	cmp	r2, #9
 8009970:	d903      	bls.n	800997a <_vfiprintf_r+0x1ee>
 8009972:	2b00      	cmp	r3, #0
 8009974:	d0c5      	beq.n	8009902 <_vfiprintf_r+0x176>
 8009976:	9105      	str	r1, [sp, #20]
 8009978:	e7c3      	b.n	8009902 <_vfiprintf_r+0x176>
 800997a:	fb0c 2101 	mla	r1, ip, r1, r2
 800997e:	4604      	mov	r4, r0
 8009980:	2301      	movs	r3, #1
 8009982:	e7f0      	b.n	8009966 <_vfiprintf_r+0x1da>
 8009984:	ab03      	add	r3, sp, #12
 8009986:	9300      	str	r3, [sp, #0]
 8009988:	462a      	mov	r2, r5
 800998a:	4b16      	ldr	r3, [pc, #88]	; (80099e4 <_vfiprintf_r+0x258>)
 800998c:	a904      	add	r1, sp, #16
 800998e:	4630      	mov	r0, r6
 8009990:	f3af 8000 	nop.w
 8009994:	4607      	mov	r7, r0
 8009996:	1c78      	adds	r0, r7, #1
 8009998:	d1d6      	bne.n	8009948 <_vfiprintf_r+0x1bc>
 800999a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800999c:	07d9      	lsls	r1, r3, #31
 800999e:	d405      	bmi.n	80099ac <_vfiprintf_r+0x220>
 80099a0:	89ab      	ldrh	r3, [r5, #12]
 80099a2:	059a      	lsls	r2, r3, #22
 80099a4:	d402      	bmi.n	80099ac <_vfiprintf_r+0x220>
 80099a6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80099a8:	f7ff fe31 	bl	800960e <__retarget_lock_release_recursive>
 80099ac:	89ab      	ldrh	r3, [r5, #12]
 80099ae:	065b      	lsls	r3, r3, #25
 80099b0:	f53f af12 	bmi.w	80097d8 <_vfiprintf_r+0x4c>
 80099b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80099b6:	e711      	b.n	80097dc <_vfiprintf_r+0x50>
 80099b8:	ab03      	add	r3, sp, #12
 80099ba:	9300      	str	r3, [sp, #0]
 80099bc:	462a      	mov	r2, r5
 80099be:	4b09      	ldr	r3, [pc, #36]	; (80099e4 <_vfiprintf_r+0x258>)
 80099c0:	a904      	add	r1, sp, #16
 80099c2:	4630      	mov	r0, r6
 80099c4:	f000 f880 	bl	8009ac8 <_printf_i>
 80099c8:	e7e4      	b.n	8009994 <_vfiprintf_r+0x208>
 80099ca:	bf00      	nop
 80099cc:	0800a620 	.word	0x0800a620
 80099d0:	0800a640 	.word	0x0800a640
 80099d4:	0800a600 	.word	0x0800a600
 80099d8:	0800a660 	.word	0x0800a660
 80099dc:	0800a66a 	.word	0x0800a66a
 80099e0:	00000000 	.word	0x00000000
 80099e4:	08009767 	.word	0x08009767
 80099e8:	0800a666 	.word	0x0800a666

080099ec <_printf_common>:
 80099ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80099f0:	4616      	mov	r6, r2
 80099f2:	4699      	mov	r9, r3
 80099f4:	688a      	ldr	r2, [r1, #8]
 80099f6:	690b      	ldr	r3, [r1, #16]
 80099f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80099fc:	4293      	cmp	r3, r2
 80099fe:	bfb8      	it	lt
 8009a00:	4613      	movlt	r3, r2
 8009a02:	6033      	str	r3, [r6, #0]
 8009a04:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009a08:	4607      	mov	r7, r0
 8009a0a:	460c      	mov	r4, r1
 8009a0c:	b10a      	cbz	r2, 8009a12 <_printf_common+0x26>
 8009a0e:	3301      	adds	r3, #1
 8009a10:	6033      	str	r3, [r6, #0]
 8009a12:	6823      	ldr	r3, [r4, #0]
 8009a14:	0699      	lsls	r1, r3, #26
 8009a16:	bf42      	ittt	mi
 8009a18:	6833      	ldrmi	r3, [r6, #0]
 8009a1a:	3302      	addmi	r3, #2
 8009a1c:	6033      	strmi	r3, [r6, #0]
 8009a1e:	6825      	ldr	r5, [r4, #0]
 8009a20:	f015 0506 	ands.w	r5, r5, #6
 8009a24:	d106      	bne.n	8009a34 <_printf_common+0x48>
 8009a26:	f104 0a19 	add.w	sl, r4, #25
 8009a2a:	68e3      	ldr	r3, [r4, #12]
 8009a2c:	6832      	ldr	r2, [r6, #0]
 8009a2e:	1a9b      	subs	r3, r3, r2
 8009a30:	42ab      	cmp	r3, r5
 8009a32:	dc26      	bgt.n	8009a82 <_printf_common+0x96>
 8009a34:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009a38:	1e13      	subs	r3, r2, #0
 8009a3a:	6822      	ldr	r2, [r4, #0]
 8009a3c:	bf18      	it	ne
 8009a3e:	2301      	movne	r3, #1
 8009a40:	0692      	lsls	r2, r2, #26
 8009a42:	d42b      	bmi.n	8009a9c <_printf_common+0xb0>
 8009a44:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009a48:	4649      	mov	r1, r9
 8009a4a:	4638      	mov	r0, r7
 8009a4c:	47c0      	blx	r8
 8009a4e:	3001      	adds	r0, #1
 8009a50:	d01e      	beq.n	8009a90 <_printf_common+0xa4>
 8009a52:	6823      	ldr	r3, [r4, #0]
 8009a54:	68e5      	ldr	r5, [r4, #12]
 8009a56:	6832      	ldr	r2, [r6, #0]
 8009a58:	f003 0306 	and.w	r3, r3, #6
 8009a5c:	2b04      	cmp	r3, #4
 8009a5e:	bf08      	it	eq
 8009a60:	1aad      	subeq	r5, r5, r2
 8009a62:	68a3      	ldr	r3, [r4, #8]
 8009a64:	6922      	ldr	r2, [r4, #16]
 8009a66:	bf0c      	ite	eq
 8009a68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009a6c:	2500      	movne	r5, #0
 8009a6e:	4293      	cmp	r3, r2
 8009a70:	bfc4      	itt	gt
 8009a72:	1a9b      	subgt	r3, r3, r2
 8009a74:	18ed      	addgt	r5, r5, r3
 8009a76:	2600      	movs	r6, #0
 8009a78:	341a      	adds	r4, #26
 8009a7a:	42b5      	cmp	r5, r6
 8009a7c:	d11a      	bne.n	8009ab4 <_printf_common+0xc8>
 8009a7e:	2000      	movs	r0, #0
 8009a80:	e008      	b.n	8009a94 <_printf_common+0xa8>
 8009a82:	2301      	movs	r3, #1
 8009a84:	4652      	mov	r2, sl
 8009a86:	4649      	mov	r1, r9
 8009a88:	4638      	mov	r0, r7
 8009a8a:	47c0      	blx	r8
 8009a8c:	3001      	adds	r0, #1
 8009a8e:	d103      	bne.n	8009a98 <_printf_common+0xac>
 8009a90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009a94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a98:	3501      	adds	r5, #1
 8009a9a:	e7c6      	b.n	8009a2a <_printf_common+0x3e>
 8009a9c:	18e1      	adds	r1, r4, r3
 8009a9e:	1c5a      	adds	r2, r3, #1
 8009aa0:	2030      	movs	r0, #48	; 0x30
 8009aa2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009aa6:	4422      	add	r2, r4
 8009aa8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009aac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009ab0:	3302      	adds	r3, #2
 8009ab2:	e7c7      	b.n	8009a44 <_printf_common+0x58>
 8009ab4:	2301      	movs	r3, #1
 8009ab6:	4622      	mov	r2, r4
 8009ab8:	4649      	mov	r1, r9
 8009aba:	4638      	mov	r0, r7
 8009abc:	47c0      	blx	r8
 8009abe:	3001      	adds	r0, #1
 8009ac0:	d0e6      	beq.n	8009a90 <_printf_common+0xa4>
 8009ac2:	3601      	adds	r6, #1
 8009ac4:	e7d9      	b.n	8009a7a <_printf_common+0x8e>
	...

08009ac8 <_printf_i>:
 8009ac8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009acc:	7e0f      	ldrb	r7, [r1, #24]
 8009ace:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009ad0:	2f78      	cmp	r7, #120	; 0x78
 8009ad2:	4691      	mov	r9, r2
 8009ad4:	4680      	mov	r8, r0
 8009ad6:	460c      	mov	r4, r1
 8009ad8:	469a      	mov	sl, r3
 8009ada:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009ade:	d807      	bhi.n	8009af0 <_printf_i+0x28>
 8009ae0:	2f62      	cmp	r7, #98	; 0x62
 8009ae2:	d80a      	bhi.n	8009afa <_printf_i+0x32>
 8009ae4:	2f00      	cmp	r7, #0
 8009ae6:	f000 80d8 	beq.w	8009c9a <_printf_i+0x1d2>
 8009aea:	2f58      	cmp	r7, #88	; 0x58
 8009aec:	f000 80a3 	beq.w	8009c36 <_printf_i+0x16e>
 8009af0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009af4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009af8:	e03a      	b.n	8009b70 <_printf_i+0xa8>
 8009afa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009afe:	2b15      	cmp	r3, #21
 8009b00:	d8f6      	bhi.n	8009af0 <_printf_i+0x28>
 8009b02:	a101      	add	r1, pc, #4	; (adr r1, 8009b08 <_printf_i+0x40>)
 8009b04:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009b08:	08009b61 	.word	0x08009b61
 8009b0c:	08009b75 	.word	0x08009b75
 8009b10:	08009af1 	.word	0x08009af1
 8009b14:	08009af1 	.word	0x08009af1
 8009b18:	08009af1 	.word	0x08009af1
 8009b1c:	08009af1 	.word	0x08009af1
 8009b20:	08009b75 	.word	0x08009b75
 8009b24:	08009af1 	.word	0x08009af1
 8009b28:	08009af1 	.word	0x08009af1
 8009b2c:	08009af1 	.word	0x08009af1
 8009b30:	08009af1 	.word	0x08009af1
 8009b34:	08009c81 	.word	0x08009c81
 8009b38:	08009ba5 	.word	0x08009ba5
 8009b3c:	08009c63 	.word	0x08009c63
 8009b40:	08009af1 	.word	0x08009af1
 8009b44:	08009af1 	.word	0x08009af1
 8009b48:	08009ca3 	.word	0x08009ca3
 8009b4c:	08009af1 	.word	0x08009af1
 8009b50:	08009ba5 	.word	0x08009ba5
 8009b54:	08009af1 	.word	0x08009af1
 8009b58:	08009af1 	.word	0x08009af1
 8009b5c:	08009c6b 	.word	0x08009c6b
 8009b60:	682b      	ldr	r3, [r5, #0]
 8009b62:	1d1a      	adds	r2, r3, #4
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	602a      	str	r2, [r5, #0]
 8009b68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009b6c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009b70:	2301      	movs	r3, #1
 8009b72:	e0a3      	b.n	8009cbc <_printf_i+0x1f4>
 8009b74:	6820      	ldr	r0, [r4, #0]
 8009b76:	6829      	ldr	r1, [r5, #0]
 8009b78:	0606      	lsls	r6, r0, #24
 8009b7a:	f101 0304 	add.w	r3, r1, #4
 8009b7e:	d50a      	bpl.n	8009b96 <_printf_i+0xce>
 8009b80:	680e      	ldr	r6, [r1, #0]
 8009b82:	602b      	str	r3, [r5, #0]
 8009b84:	2e00      	cmp	r6, #0
 8009b86:	da03      	bge.n	8009b90 <_printf_i+0xc8>
 8009b88:	232d      	movs	r3, #45	; 0x2d
 8009b8a:	4276      	negs	r6, r6
 8009b8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009b90:	485e      	ldr	r0, [pc, #376]	; (8009d0c <_printf_i+0x244>)
 8009b92:	230a      	movs	r3, #10
 8009b94:	e019      	b.n	8009bca <_printf_i+0x102>
 8009b96:	680e      	ldr	r6, [r1, #0]
 8009b98:	602b      	str	r3, [r5, #0]
 8009b9a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009b9e:	bf18      	it	ne
 8009ba0:	b236      	sxthne	r6, r6
 8009ba2:	e7ef      	b.n	8009b84 <_printf_i+0xbc>
 8009ba4:	682b      	ldr	r3, [r5, #0]
 8009ba6:	6820      	ldr	r0, [r4, #0]
 8009ba8:	1d19      	adds	r1, r3, #4
 8009baa:	6029      	str	r1, [r5, #0]
 8009bac:	0601      	lsls	r1, r0, #24
 8009bae:	d501      	bpl.n	8009bb4 <_printf_i+0xec>
 8009bb0:	681e      	ldr	r6, [r3, #0]
 8009bb2:	e002      	b.n	8009bba <_printf_i+0xf2>
 8009bb4:	0646      	lsls	r6, r0, #25
 8009bb6:	d5fb      	bpl.n	8009bb0 <_printf_i+0xe8>
 8009bb8:	881e      	ldrh	r6, [r3, #0]
 8009bba:	4854      	ldr	r0, [pc, #336]	; (8009d0c <_printf_i+0x244>)
 8009bbc:	2f6f      	cmp	r7, #111	; 0x6f
 8009bbe:	bf0c      	ite	eq
 8009bc0:	2308      	moveq	r3, #8
 8009bc2:	230a      	movne	r3, #10
 8009bc4:	2100      	movs	r1, #0
 8009bc6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009bca:	6865      	ldr	r5, [r4, #4]
 8009bcc:	60a5      	str	r5, [r4, #8]
 8009bce:	2d00      	cmp	r5, #0
 8009bd0:	bfa2      	ittt	ge
 8009bd2:	6821      	ldrge	r1, [r4, #0]
 8009bd4:	f021 0104 	bicge.w	r1, r1, #4
 8009bd8:	6021      	strge	r1, [r4, #0]
 8009bda:	b90e      	cbnz	r6, 8009be0 <_printf_i+0x118>
 8009bdc:	2d00      	cmp	r5, #0
 8009bde:	d04d      	beq.n	8009c7c <_printf_i+0x1b4>
 8009be0:	4615      	mov	r5, r2
 8009be2:	fbb6 f1f3 	udiv	r1, r6, r3
 8009be6:	fb03 6711 	mls	r7, r3, r1, r6
 8009bea:	5dc7      	ldrb	r7, [r0, r7]
 8009bec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009bf0:	4637      	mov	r7, r6
 8009bf2:	42bb      	cmp	r3, r7
 8009bf4:	460e      	mov	r6, r1
 8009bf6:	d9f4      	bls.n	8009be2 <_printf_i+0x11a>
 8009bf8:	2b08      	cmp	r3, #8
 8009bfa:	d10b      	bne.n	8009c14 <_printf_i+0x14c>
 8009bfc:	6823      	ldr	r3, [r4, #0]
 8009bfe:	07de      	lsls	r6, r3, #31
 8009c00:	d508      	bpl.n	8009c14 <_printf_i+0x14c>
 8009c02:	6923      	ldr	r3, [r4, #16]
 8009c04:	6861      	ldr	r1, [r4, #4]
 8009c06:	4299      	cmp	r1, r3
 8009c08:	bfde      	ittt	le
 8009c0a:	2330      	movle	r3, #48	; 0x30
 8009c0c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009c10:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8009c14:	1b52      	subs	r2, r2, r5
 8009c16:	6122      	str	r2, [r4, #16]
 8009c18:	f8cd a000 	str.w	sl, [sp]
 8009c1c:	464b      	mov	r3, r9
 8009c1e:	aa03      	add	r2, sp, #12
 8009c20:	4621      	mov	r1, r4
 8009c22:	4640      	mov	r0, r8
 8009c24:	f7ff fee2 	bl	80099ec <_printf_common>
 8009c28:	3001      	adds	r0, #1
 8009c2a:	d14c      	bne.n	8009cc6 <_printf_i+0x1fe>
 8009c2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009c30:	b004      	add	sp, #16
 8009c32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c36:	4835      	ldr	r0, [pc, #212]	; (8009d0c <_printf_i+0x244>)
 8009c38:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009c3c:	6829      	ldr	r1, [r5, #0]
 8009c3e:	6823      	ldr	r3, [r4, #0]
 8009c40:	f851 6b04 	ldr.w	r6, [r1], #4
 8009c44:	6029      	str	r1, [r5, #0]
 8009c46:	061d      	lsls	r5, r3, #24
 8009c48:	d514      	bpl.n	8009c74 <_printf_i+0x1ac>
 8009c4a:	07df      	lsls	r7, r3, #31
 8009c4c:	bf44      	itt	mi
 8009c4e:	f043 0320 	orrmi.w	r3, r3, #32
 8009c52:	6023      	strmi	r3, [r4, #0]
 8009c54:	b91e      	cbnz	r6, 8009c5e <_printf_i+0x196>
 8009c56:	6823      	ldr	r3, [r4, #0]
 8009c58:	f023 0320 	bic.w	r3, r3, #32
 8009c5c:	6023      	str	r3, [r4, #0]
 8009c5e:	2310      	movs	r3, #16
 8009c60:	e7b0      	b.n	8009bc4 <_printf_i+0xfc>
 8009c62:	6823      	ldr	r3, [r4, #0]
 8009c64:	f043 0320 	orr.w	r3, r3, #32
 8009c68:	6023      	str	r3, [r4, #0]
 8009c6a:	2378      	movs	r3, #120	; 0x78
 8009c6c:	4828      	ldr	r0, [pc, #160]	; (8009d10 <_printf_i+0x248>)
 8009c6e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009c72:	e7e3      	b.n	8009c3c <_printf_i+0x174>
 8009c74:	0659      	lsls	r1, r3, #25
 8009c76:	bf48      	it	mi
 8009c78:	b2b6      	uxthmi	r6, r6
 8009c7a:	e7e6      	b.n	8009c4a <_printf_i+0x182>
 8009c7c:	4615      	mov	r5, r2
 8009c7e:	e7bb      	b.n	8009bf8 <_printf_i+0x130>
 8009c80:	682b      	ldr	r3, [r5, #0]
 8009c82:	6826      	ldr	r6, [r4, #0]
 8009c84:	6961      	ldr	r1, [r4, #20]
 8009c86:	1d18      	adds	r0, r3, #4
 8009c88:	6028      	str	r0, [r5, #0]
 8009c8a:	0635      	lsls	r5, r6, #24
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	d501      	bpl.n	8009c94 <_printf_i+0x1cc>
 8009c90:	6019      	str	r1, [r3, #0]
 8009c92:	e002      	b.n	8009c9a <_printf_i+0x1d2>
 8009c94:	0670      	lsls	r0, r6, #25
 8009c96:	d5fb      	bpl.n	8009c90 <_printf_i+0x1c8>
 8009c98:	8019      	strh	r1, [r3, #0]
 8009c9a:	2300      	movs	r3, #0
 8009c9c:	6123      	str	r3, [r4, #16]
 8009c9e:	4615      	mov	r5, r2
 8009ca0:	e7ba      	b.n	8009c18 <_printf_i+0x150>
 8009ca2:	682b      	ldr	r3, [r5, #0]
 8009ca4:	1d1a      	adds	r2, r3, #4
 8009ca6:	602a      	str	r2, [r5, #0]
 8009ca8:	681d      	ldr	r5, [r3, #0]
 8009caa:	6862      	ldr	r2, [r4, #4]
 8009cac:	2100      	movs	r1, #0
 8009cae:	4628      	mov	r0, r5
 8009cb0:	f7f6 fa6e 	bl	8000190 <memchr>
 8009cb4:	b108      	cbz	r0, 8009cba <_printf_i+0x1f2>
 8009cb6:	1b40      	subs	r0, r0, r5
 8009cb8:	6060      	str	r0, [r4, #4]
 8009cba:	6863      	ldr	r3, [r4, #4]
 8009cbc:	6123      	str	r3, [r4, #16]
 8009cbe:	2300      	movs	r3, #0
 8009cc0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009cc4:	e7a8      	b.n	8009c18 <_printf_i+0x150>
 8009cc6:	6923      	ldr	r3, [r4, #16]
 8009cc8:	462a      	mov	r2, r5
 8009cca:	4649      	mov	r1, r9
 8009ccc:	4640      	mov	r0, r8
 8009cce:	47d0      	blx	sl
 8009cd0:	3001      	adds	r0, #1
 8009cd2:	d0ab      	beq.n	8009c2c <_printf_i+0x164>
 8009cd4:	6823      	ldr	r3, [r4, #0]
 8009cd6:	079b      	lsls	r3, r3, #30
 8009cd8:	d413      	bmi.n	8009d02 <_printf_i+0x23a>
 8009cda:	68e0      	ldr	r0, [r4, #12]
 8009cdc:	9b03      	ldr	r3, [sp, #12]
 8009cde:	4298      	cmp	r0, r3
 8009ce0:	bfb8      	it	lt
 8009ce2:	4618      	movlt	r0, r3
 8009ce4:	e7a4      	b.n	8009c30 <_printf_i+0x168>
 8009ce6:	2301      	movs	r3, #1
 8009ce8:	4632      	mov	r2, r6
 8009cea:	4649      	mov	r1, r9
 8009cec:	4640      	mov	r0, r8
 8009cee:	47d0      	blx	sl
 8009cf0:	3001      	adds	r0, #1
 8009cf2:	d09b      	beq.n	8009c2c <_printf_i+0x164>
 8009cf4:	3501      	adds	r5, #1
 8009cf6:	68e3      	ldr	r3, [r4, #12]
 8009cf8:	9903      	ldr	r1, [sp, #12]
 8009cfa:	1a5b      	subs	r3, r3, r1
 8009cfc:	42ab      	cmp	r3, r5
 8009cfe:	dcf2      	bgt.n	8009ce6 <_printf_i+0x21e>
 8009d00:	e7eb      	b.n	8009cda <_printf_i+0x212>
 8009d02:	2500      	movs	r5, #0
 8009d04:	f104 0619 	add.w	r6, r4, #25
 8009d08:	e7f5      	b.n	8009cf6 <_printf_i+0x22e>
 8009d0a:	bf00      	nop
 8009d0c:	0800a671 	.word	0x0800a671
 8009d10:	0800a682 	.word	0x0800a682

08009d14 <_sbrk_r>:
 8009d14:	b538      	push	{r3, r4, r5, lr}
 8009d16:	4d06      	ldr	r5, [pc, #24]	; (8009d30 <_sbrk_r+0x1c>)
 8009d18:	2300      	movs	r3, #0
 8009d1a:	4604      	mov	r4, r0
 8009d1c:	4608      	mov	r0, r1
 8009d1e:	602b      	str	r3, [r5, #0]
 8009d20:	f7f8 f9ec 	bl	80020fc <_sbrk>
 8009d24:	1c43      	adds	r3, r0, #1
 8009d26:	d102      	bne.n	8009d2e <_sbrk_r+0x1a>
 8009d28:	682b      	ldr	r3, [r5, #0]
 8009d2a:	b103      	cbz	r3, 8009d2e <_sbrk_r+0x1a>
 8009d2c:	6023      	str	r3, [r4, #0]
 8009d2e:	bd38      	pop	{r3, r4, r5, pc}
 8009d30:	20000d20 	.word	0x20000d20

08009d34 <__sread>:
 8009d34:	b510      	push	{r4, lr}
 8009d36:	460c      	mov	r4, r1
 8009d38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d3c:	f000 fab2 	bl	800a2a4 <_read_r>
 8009d40:	2800      	cmp	r0, #0
 8009d42:	bfab      	itete	ge
 8009d44:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009d46:	89a3      	ldrhlt	r3, [r4, #12]
 8009d48:	181b      	addge	r3, r3, r0
 8009d4a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009d4e:	bfac      	ite	ge
 8009d50:	6563      	strge	r3, [r4, #84]	; 0x54
 8009d52:	81a3      	strhlt	r3, [r4, #12]
 8009d54:	bd10      	pop	{r4, pc}

08009d56 <__swrite>:
 8009d56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d5a:	461f      	mov	r7, r3
 8009d5c:	898b      	ldrh	r3, [r1, #12]
 8009d5e:	05db      	lsls	r3, r3, #23
 8009d60:	4605      	mov	r5, r0
 8009d62:	460c      	mov	r4, r1
 8009d64:	4616      	mov	r6, r2
 8009d66:	d505      	bpl.n	8009d74 <__swrite+0x1e>
 8009d68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d6c:	2302      	movs	r3, #2
 8009d6e:	2200      	movs	r2, #0
 8009d70:	f000 f9c8 	bl	800a104 <_lseek_r>
 8009d74:	89a3      	ldrh	r3, [r4, #12]
 8009d76:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009d7a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009d7e:	81a3      	strh	r3, [r4, #12]
 8009d80:	4632      	mov	r2, r6
 8009d82:	463b      	mov	r3, r7
 8009d84:	4628      	mov	r0, r5
 8009d86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009d8a:	f000 b869 	b.w	8009e60 <_write_r>

08009d8e <__sseek>:
 8009d8e:	b510      	push	{r4, lr}
 8009d90:	460c      	mov	r4, r1
 8009d92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d96:	f000 f9b5 	bl	800a104 <_lseek_r>
 8009d9a:	1c43      	adds	r3, r0, #1
 8009d9c:	89a3      	ldrh	r3, [r4, #12]
 8009d9e:	bf15      	itete	ne
 8009da0:	6560      	strne	r0, [r4, #84]	; 0x54
 8009da2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009da6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009daa:	81a3      	strheq	r3, [r4, #12]
 8009dac:	bf18      	it	ne
 8009dae:	81a3      	strhne	r3, [r4, #12]
 8009db0:	bd10      	pop	{r4, pc}

08009db2 <__sclose>:
 8009db2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009db6:	f000 b8d3 	b.w	8009f60 <_close_r>
	...

08009dbc <__swbuf_r>:
 8009dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dbe:	460e      	mov	r6, r1
 8009dc0:	4614      	mov	r4, r2
 8009dc2:	4605      	mov	r5, r0
 8009dc4:	b118      	cbz	r0, 8009dce <__swbuf_r+0x12>
 8009dc6:	6983      	ldr	r3, [r0, #24]
 8009dc8:	b90b      	cbnz	r3, 8009dce <__swbuf_r+0x12>
 8009dca:	f7ff fb81 	bl	80094d0 <__sinit>
 8009dce:	4b21      	ldr	r3, [pc, #132]	; (8009e54 <__swbuf_r+0x98>)
 8009dd0:	429c      	cmp	r4, r3
 8009dd2:	d12b      	bne.n	8009e2c <__swbuf_r+0x70>
 8009dd4:	686c      	ldr	r4, [r5, #4]
 8009dd6:	69a3      	ldr	r3, [r4, #24]
 8009dd8:	60a3      	str	r3, [r4, #8]
 8009dda:	89a3      	ldrh	r3, [r4, #12]
 8009ddc:	071a      	lsls	r2, r3, #28
 8009dde:	d52f      	bpl.n	8009e40 <__swbuf_r+0x84>
 8009de0:	6923      	ldr	r3, [r4, #16]
 8009de2:	b36b      	cbz	r3, 8009e40 <__swbuf_r+0x84>
 8009de4:	6923      	ldr	r3, [r4, #16]
 8009de6:	6820      	ldr	r0, [r4, #0]
 8009de8:	1ac0      	subs	r0, r0, r3
 8009dea:	6963      	ldr	r3, [r4, #20]
 8009dec:	b2f6      	uxtb	r6, r6
 8009dee:	4283      	cmp	r3, r0
 8009df0:	4637      	mov	r7, r6
 8009df2:	dc04      	bgt.n	8009dfe <__swbuf_r+0x42>
 8009df4:	4621      	mov	r1, r4
 8009df6:	4628      	mov	r0, r5
 8009df8:	f000 f948 	bl	800a08c <_fflush_r>
 8009dfc:	bb30      	cbnz	r0, 8009e4c <__swbuf_r+0x90>
 8009dfe:	68a3      	ldr	r3, [r4, #8]
 8009e00:	3b01      	subs	r3, #1
 8009e02:	60a3      	str	r3, [r4, #8]
 8009e04:	6823      	ldr	r3, [r4, #0]
 8009e06:	1c5a      	adds	r2, r3, #1
 8009e08:	6022      	str	r2, [r4, #0]
 8009e0a:	701e      	strb	r6, [r3, #0]
 8009e0c:	6963      	ldr	r3, [r4, #20]
 8009e0e:	3001      	adds	r0, #1
 8009e10:	4283      	cmp	r3, r0
 8009e12:	d004      	beq.n	8009e1e <__swbuf_r+0x62>
 8009e14:	89a3      	ldrh	r3, [r4, #12]
 8009e16:	07db      	lsls	r3, r3, #31
 8009e18:	d506      	bpl.n	8009e28 <__swbuf_r+0x6c>
 8009e1a:	2e0a      	cmp	r6, #10
 8009e1c:	d104      	bne.n	8009e28 <__swbuf_r+0x6c>
 8009e1e:	4621      	mov	r1, r4
 8009e20:	4628      	mov	r0, r5
 8009e22:	f000 f933 	bl	800a08c <_fflush_r>
 8009e26:	b988      	cbnz	r0, 8009e4c <__swbuf_r+0x90>
 8009e28:	4638      	mov	r0, r7
 8009e2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e2c:	4b0a      	ldr	r3, [pc, #40]	; (8009e58 <__swbuf_r+0x9c>)
 8009e2e:	429c      	cmp	r4, r3
 8009e30:	d101      	bne.n	8009e36 <__swbuf_r+0x7a>
 8009e32:	68ac      	ldr	r4, [r5, #8]
 8009e34:	e7cf      	b.n	8009dd6 <__swbuf_r+0x1a>
 8009e36:	4b09      	ldr	r3, [pc, #36]	; (8009e5c <__swbuf_r+0xa0>)
 8009e38:	429c      	cmp	r4, r3
 8009e3a:	bf08      	it	eq
 8009e3c:	68ec      	ldreq	r4, [r5, #12]
 8009e3e:	e7ca      	b.n	8009dd6 <__swbuf_r+0x1a>
 8009e40:	4621      	mov	r1, r4
 8009e42:	4628      	mov	r0, r5
 8009e44:	f000 f81e 	bl	8009e84 <__swsetup_r>
 8009e48:	2800      	cmp	r0, #0
 8009e4a:	d0cb      	beq.n	8009de4 <__swbuf_r+0x28>
 8009e4c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8009e50:	e7ea      	b.n	8009e28 <__swbuf_r+0x6c>
 8009e52:	bf00      	nop
 8009e54:	0800a620 	.word	0x0800a620
 8009e58:	0800a640 	.word	0x0800a640
 8009e5c:	0800a600 	.word	0x0800a600

08009e60 <_write_r>:
 8009e60:	b538      	push	{r3, r4, r5, lr}
 8009e62:	4d07      	ldr	r5, [pc, #28]	; (8009e80 <_write_r+0x20>)
 8009e64:	4604      	mov	r4, r0
 8009e66:	4608      	mov	r0, r1
 8009e68:	4611      	mov	r1, r2
 8009e6a:	2200      	movs	r2, #0
 8009e6c:	602a      	str	r2, [r5, #0]
 8009e6e:	461a      	mov	r2, r3
 8009e70:	f7f8 f8f3 	bl	800205a <_write>
 8009e74:	1c43      	adds	r3, r0, #1
 8009e76:	d102      	bne.n	8009e7e <_write_r+0x1e>
 8009e78:	682b      	ldr	r3, [r5, #0]
 8009e7a:	b103      	cbz	r3, 8009e7e <_write_r+0x1e>
 8009e7c:	6023      	str	r3, [r4, #0]
 8009e7e:	bd38      	pop	{r3, r4, r5, pc}
 8009e80:	20000d20 	.word	0x20000d20

08009e84 <__swsetup_r>:
 8009e84:	4b32      	ldr	r3, [pc, #200]	; (8009f50 <__swsetup_r+0xcc>)
 8009e86:	b570      	push	{r4, r5, r6, lr}
 8009e88:	681d      	ldr	r5, [r3, #0]
 8009e8a:	4606      	mov	r6, r0
 8009e8c:	460c      	mov	r4, r1
 8009e8e:	b125      	cbz	r5, 8009e9a <__swsetup_r+0x16>
 8009e90:	69ab      	ldr	r3, [r5, #24]
 8009e92:	b913      	cbnz	r3, 8009e9a <__swsetup_r+0x16>
 8009e94:	4628      	mov	r0, r5
 8009e96:	f7ff fb1b 	bl	80094d0 <__sinit>
 8009e9a:	4b2e      	ldr	r3, [pc, #184]	; (8009f54 <__swsetup_r+0xd0>)
 8009e9c:	429c      	cmp	r4, r3
 8009e9e:	d10f      	bne.n	8009ec0 <__swsetup_r+0x3c>
 8009ea0:	686c      	ldr	r4, [r5, #4]
 8009ea2:	89a3      	ldrh	r3, [r4, #12]
 8009ea4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009ea8:	0719      	lsls	r1, r3, #28
 8009eaa:	d42c      	bmi.n	8009f06 <__swsetup_r+0x82>
 8009eac:	06dd      	lsls	r5, r3, #27
 8009eae:	d411      	bmi.n	8009ed4 <__swsetup_r+0x50>
 8009eb0:	2309      	movs	r3, #9
 8009eb2:	6033      	str	r3, [r6, #0]
 8009eb4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009eb8:	81a3      	strh	r3, [r4, #12]
 8009eba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009ebe:	e03e      	b.n	8009f3e <__swsetup_r+0xba>
 8009ec0:	4b25      	ldr	r3, [pc, #148]	; (8009f58 <__swsetup_r+0xd4>)
 8009ec2:	429c      	cmp	r4, r3
 8009ec4:	d101      	bne.n	8009eca <__swsetup_r+0x46>
 8009ec6:	68ac      	ldr	r4, [r5, #8]
 8009ec8:	e7eb      	b.n	8009ea2 <__swsetup_r+0x1e>
 8009eca:	4b24      	ldr	r3, [pc, #144]	; (8009f5c <__swsetup_r+0xd8>)
 8009ecc:	429c      	cmp	r4, r3
 8009ece:	bf08      	it	eq
 8009ed0:	68ec      	ldreq	r4, [r5, #12]
 8009ed2:	e7e6      	b.n	8009ea2 <__swsetup_r+0x1e>
 8009ed4:	0758      	lsls	r0, r3, #29
 8009ed6:	d512      	bpl.n	8009efe <__swsetup_r+0x7a>
 8009ed8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009eda:	b141      	cbz	r1, 8009eee <__swsetup_r+0x6a>
 8009edc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009ee0:	4299      	cmp	r1, r3
 8009ee2:	d002      	beq.n	8009eea <__swsetup_r+0x66>
 8009ee4:	4630      	mov	r0, r6
 8009ee6:	f000 f991 	bl	800a20c <_free_r>
 8009eea:	2300      	movs	r3, #0
 8009eec:	6363      	str	r3, [r4, #52]	; 0x34
 8009eee:	89a3      	ldrh	r3, [r4, #12]
 8009ef0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009ef4:	81a3      	strh	r3, [r4, #12]
 8009ef6:	2300      	movs	r3, #0
 8009ef8:	6063      	str	r3, [r4, #4]
 8009efa:	6923      	ldr	r3, [r4, #16]
 8009efc:	6023      	str	r3, [r4, #0]
 8009efe:	89a3      	ldrh	r3, [r4, #12]
 8009f00:	f043 0308 	orr.w	r3, r3, #8
 8009f04:	81a3      	strh	r3, [r4, #12]
 8009f06:	6923      	ldr	r3, [r4, #16]
 8009f08:	b94b      	cbnz	r3, 8009f1e <__swsetup_r+0x9a>
 8009f0a:	89a3      	ldrh	r3, [r4, #12]
 8009f0c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009f10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009f14:	d003      	beq.n	8009f1e <__swsetup_r+0x9a>
 8009f16:	4621      	mov	r1, r4
 8009f18:	4630      	mov	r0, r6
 8009f1a:	f000 f92b 	bl	800a174 <__smakebuf_r>
 8009f1e:	89a0      	ldrh	r0, [r4, #12]
 8009f20:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009f24:	f010 0301 	ands.w	r3, r0, #1
 8009f28:	d00a      	beq.n	8009f40 <__swsetup_r+0xbc>
 8009f2a:	2300      	movs	r3, #0
 8009f2c:	60a3      	str	r3, [r4, #8]
 8009f2e:	6963      	ldr	r3, [r4, #20]
 8009f30:	425b      	negs	r3, r3
 8009f32:	61a3      	str	r3, [r4, #24]
 8009f34:	6923      	ldr	r3, [r4, #16]
 8009f36:	b943      	cbnz	r3, 8009f4a <__swsetup_r+0xc6>
 8009f38:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009f3c:	d1ba      	bne.n	8009eb4 <__swsetup_r+0x30>
 8009f3e:	bd70      	pop	{r4, r5, r6, pc}
 8009f40:	0781      	lsls	r1, r0, #30
 8009f42:	bf58      	it	pl
 8009f44:	6963      	ldrpl	r3, [r4, #20]
 8009f46:	60a3      	str	r3, [r4, #8]
 8009f48:	e7f4      	b.n	8009f34 <__swsetup_r+0xb0>
 8009f4a:	2000      	movs	r0, #0
 8009f4c:	e7f7      	b.n	8009f3e <__swsetup_r+0xba>
 8009f4e:	bf00      	nop
 8009f50:	20000028 	.word	0x20000028
 8009f54:	0800a620 	.word	0x0800a620
 8009f58:	0800a640 	.word	0x0800a640
 8009f5c:	0800a600 	.word	0x0800a600

08009f60 <_close_r>:
 8009f60:	b538      	push	{r3, r4, r5, lr}
 8009f62:	4d06      	ldr	r5, [pc, #24]	; (8009f7c <_close_r+0x1c>)
 8009f64:	2300      	movs	r3, #0
 8009f66:	4604      	mov	r4, r0
 8009f68:	4608      	mov	r0, r1
 8009f6a:	602b      	str	r3, [r5, #0]
 8009f6c:	f7f8 f891 	bl	8002092 <_close>
 8009f70:	1c43      	adds	r3, r0, #1
 8009f72:	d102      	bne.n	8009f7a <_close_r+0x1a>
 8009f74:	682b      	ldr	r3, [r5, #0]
 8009f76:	b103      	cbz	r3, 8009f7a <_close_r+0x1a>
 8009f78:	6023      	str	r3, [r4, #0]
 8009f7a:	bd38      	pop	{r3, r4, r5, pc}
 8009f7c:	20000d20 	.word	0x20000d20

08009f80 <__sflush_r>:
 8009f80:	898a      	ldrh	r2, [r1, #12]
 8009f82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f86:	4605      	mov	r5, r0
 8009f88:	0710      	lsls	r0, r2, #28
 8009f8a:	460c      	mov	r4, r1
 8009f8c:	d458      	bmi.n	800a040 <__sflush_r+0xc0>
 8009f8e:	684b      	ldr	r3, [r1, #4]
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	dc05      	bgt.n	8009fa0 <__sflush_r+0x20>
 8009f94:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	dc02      	bgt.n	8009fa0 <__sflush_r+0x20>
 8009f9a:	2000      	movs	r0, #0
 8009f9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009fa0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009fa2:	2e00      	cmp	r6, #0
 8009fa4:	d0f9      	beq.n	8009f9a <__sflush_r+0x1a>
 8009fa6:	2300      	movs	r3, #0
 8009fa8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009fac:	682f      	ldr	r7, [r5, #0]
 8009fae:	602b      	str	r3, [r5, #0]
 8009fb0:	d032      	beq.n	800a018 <__sflush_r+0x98>
 8009fb2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009fb4:	89a3      	ldrh	r3, [r4, #12]
 8009fb6:	075a      	lsls	r2, r3, #29
 8009fb8:	d505      	bpl.n	8009fc6 <__sflush_r+0x46>
 8009fba:	6863      	ldr	r3, [r4, #4]
 8009fbc:	1ac0      	subs	r0, r0, r3
 8009fbe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009fc0:	b10b      	cbz	r3, 8009fc6 <__sflush_r+0x46>
 8009fc2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009fc4:	1ac0      	subs	r0, r0, r3
 8009fc6:	2300      	movs	r3, #0
 8009fc8:	4602      	mov	r2, r0
 8009fca:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009fcc:	6a21      	ldr	r1, [r4, #32]
 8009fce:	4628      	mov	r0, r5
 8009fd0:	47b0      	blx	r6
 8009fd2:	1c43      	adds	r3, r0, #1
 8009fd4:	89a3      	ldrh	r3, [r4, #12]
 8009fd6:	d106      	bne.n	8009fe6 <__sflush_r+0x66>
 8009fd8:	6829      	ldr	r1, [r5, #0]
 8009fda:	291d      	cmp	r1, #29
 8009fdc:	d82c      	bhi.n	800a038 <__sflush_r+0xb8>
 8009fde:	4a2a      	ldr	r2, [pc, #168]	; (800a088 <__sflush_r+0x108>)
 8009fe0:	40ca      	lsrs	r2, r1
 8009fe2:	07d6      	lsls	r6, r2, #31
 8009fe4:	d528      	bpl.n	800a038 <__sflush_r+0xb8>
 8009fe6:	2200      	movs	r2, #0
 8009fe8:	6062      	str	r2, [r4, #4]
 8009fea:	04d9      	lsls	r1, r3, #19
 8009fec:	6922      	ldr	r2, [r4, #16]
 8009fee:	6022      	str	r2, [r4, #0]
 8009ff0:	d504      	bpl.n	8009ffc <__sflush_r+0x7c>
 8009ff2:	1c42      	adds	r2, r0, #1
 8009ff4:	d101      	bne.n	8009ffa <__sflush_r+0x7a>
 8009ff6:	682b      	ldr	r3, [r5, #0]
 8009ff8:	b903      	cbnz	r3, 8009ffc <__sflush_r+0x7c>
 8009ffa:	6560      	str	r0, [r4, #84]	; 0x54
 8009ffc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009ffe:	602f      	str	r7, [r5, #0]
 800a000:	2900      	cmp	r1, #0
 800a002:	d0ca      	beq.n	8009f9a <__sflush_r+0x1a>
 800a004:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a008:	4299      	cmp	r1, r3
 800a00a:	d002      	beq.n	800a012 <__sflush_r+0x92>
 800a00c:	4628      	mov	r0, r5
 800a00e:	f000 f8fd 	bl	800a20c <_free_r>
 800a012:	2000      	movs	r0, #0
 800a014:	6360      	str	r0, [r4, #52]	; 0x34
 800a016:	e7c1      	b.n	8009f9c <__sflush_r+0x1c>
 800a018:	6a21      	ldr	r1, [r4, #32]
 800a01a:	2301      	movs	r3, #1
 800a01c:	4628      	mov	r0, r5
 800a01e:	47b0      	blx	r6
 800a020:	1c41      	adds	r1, r0, #1
 800a022:	d1c7      	bne.n	8009fb4 <__sflush_r+0x34>
 800a024:	682b      	ldr	r3, [r5, #0]
 800a026:	2b00      	cmp	r3, #0
 800a028:	d0c4      	beq.n	8009fb4 <__sflush_r+0x34>
 800a02a:	2b1d      	cmp	r3, #29
 800a02c:	d001      	beq.n	800a032 <__sflush_r+0xb2>
 800a02e:	2b16      	cmp	r3, #22
 800a030:	d101      	bne.n	800a036 <__sflush_r+0xb6>
 800a032:	602f      	str	r7, [r5, #0]
 800a034:	e7b1      	b.n	8009f9a <__sflush_r+0x1a>
 800a036:	89a3      	ldrh	r3, [r4, #12]
 800a038:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a03c:	81a3      	strh	r3, [r4, #12]
 800a03e:	e7ad      	b.n	8009f9c <__sflush_r+0x1c>
 800a040:	690f      	ldr	r7, [r1, #16]
 800a042:	2f00      	cmp	r7, #0
 800a044:	d0a9      	beq.n	8009f9a <__sflush_r+0x1a>
 800a046:	0793      	lsls	r3, r2, #30
 800a048:	680e      	ldr	r6, [r1, #0]
 800a04a:	bf08      	it	eq
 800a04c:	694b      	ldreq	r3, [r1, #20]
 800a04e:	600f      	str	r7, [r1, #0]
 800a050:	bf18      	it	ne
 800a052:	2300      	movne	r3, #0
 800a054:	eba6 0807 	sub.w	r8, r6, r7
 800a058:	608b      	str	r3, [r1, #8]
 800a05a:	f1b8 0f00 	cmp.w	r8, #0
 800a05e:	dd9c      	ble.n	8009f9a <__sflush_r+0x1a>
 800a060:	6a21      	ldr	r1, [r4, #32]
 800a062:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a064:	4643      	mov	r3, r8
 800a066:	463a      	mov	r2, r7
 800a068:	4628      	mov	r0, r5
 800a06a:	47b0      	blx	r6
 800a06c:	2800      	cmp	r0, #0
 800a06e:	dc06      	bgt.n	800a07e <__sflush_r+0xfe>
 800a070:	89a3      	ldrh	r3, [r4, #12]
 800a072:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a076:	81a3      	strh	r3, [r4, #12]
 800a078:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a07c:	e78e      	b.n	8009f9c <__sflush_r+0x1c>
 800a07e:	4407      	add	r7, r0
 800a080:	eba8 0800 	sub.w	r8, r8, r0
 800a084:	e7e9      	b.n	800a05a <__sflush_r+0xda>
 800a086:	bf00      	nop
 800a088:	20400001 	.word	0x20400001

0800a08c <_fflush_r>:
 800a08c:	b538      	push	{r3, r4, r5, lr}
 800a08e:	690b      	ldr	r3, [r1, #16]
 800a090:	4605      	mov	r5, r0
 800a092:	460c      	mov	r4, r1
 800a094:	b913      	cbnz	r3, 800a09c <_fflush_r+0x10>
 800a096:	2500      	movs	r5, #0
 800a098:	4628      	mov	r0, r5
 800a09a:	bd38      	pop	{r3, r4, r5, pc}
 800a09c:	b118      	cbz	r0, 800a0a6 <_fflush_r+0x1a>
 800a09e:	6983      	ldr	r3, [r0, #24]
 800a0a0:	b90b      	cbnz	r3, 800a0a6 <_fflush_r+0x1a>
 800a0a2:	f7ff fa15 	bl	80094d0 <__sinit>
 800a0a6:	4b14      	ldr	r3, [pc, #80]	; (800a0f8 <_fflush_r+0x6c>)
 800a0a8:	429c      	cmp	r4, r3
 800a0aa:	d11b      	bne.n	800a0e4 <_fflush_r+0x58>
 800a0ac:	686c      	ldr	r4, [r5, #4]
 800a0ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d0ef      	beq.n	800a096 <_fflush_r+0xa>
 800a0b6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a0b8:	07d0      	lsls	r0, r2, #31
 800a0ba:	d404      	bmi.n	800a0c6 <_fflush_r+0x3a>
 800a0bc:	0599      	lsls	r1, r3, #22
 800a0be:	d402      	bmi.n	800a0c6 <_fflush_r+0x3a>
 800a0c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a0c2:	f7ff faa3 	bl	800960c <__retarget_lock_acquire_recursive>
 800a0c6:	4628      	mov	r0, r5
 800a0c8:	4621      	mov	r1, r4
 800a0ca:	f7ff ff59 	bl	8009f80 <__sflush_r>
 800a0ce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a0d0:	07da      	lsls	r2, r3, #31
 800a0d2:	4605      	mov	r5, r0
 800a0d4:	d4e0      	bmi.n	800a098 <_fflush_r+0xc>
 800a0d6:	89a3      	ldrh	r3, [r4, #12]
 800a0d8:	059b      	lsls	r3, r3, #22
 800a0da:	d4dd      	bmi.n	800a098 <_fflush_r+0xc>
 800a0dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a0de:	f7ff fa96 	bl	800960e <__retarget_lock_release_recursive>
 800a0e2:	e7d9      	b.n	800a098 <_fflush_r+0xc>
 800a0e4:	4b05      	ldr	r3, [pc, #20]	; (800a0fc <_fflush_r+0x70>)
 800a0e6:	429c      	cmp	r4, r3
 800a0e8:	d101      	bne.n	800a0ee <_fflush_r+0x62>
 800a0ea:	68ac      	ldr	r4, [r5, #8]
 800a0ec:	e7df      	b.n	800a0ae <_fflush_r+0x22>
 800a0ee:	4b04      	ldr	r3, [pc, #16]	; (800a100 <_fflush_r+0x74>)
 800a0f0:	429c      	cmp	r4, r3
 800a0f2:	bf08      	it	eq
 800a0f4:	68ec      	ldreq	r4, [r5, #12]
 800a0f6:	e7da      	b.n	800a0ae <_fflush_r+0x22>
 800a0f8:	0800a620 	.word	0x0800a620
 800a0fc:	0800a640 	.word	0x0800a640
 800a100:	0800a600 	.word	0x0800a600

0800a104 <_lseek_r>:
 800a104:	b538      	push	{r3, r4, r5, lr}
 800a106:	4d07      	ldr	r5, [pc, #28]	; (800a124 <_lseek_r+0x20>)
 800a108:	4604      	mov	r4, r0
 800a10a:	4608      	mov	r0, r1
 800a10c:	4611      	mov	r1, r2
 800a10e:	2200      	movs	r2, #0
 800a110:	602a      	str	r2, [r5, #0]
 800a112:	461a      	mov	r2, r3
 800a114:	f7f7 ffe4 	bl	80020e0 <_lseek>
 800a118:	1c43      	adds	r3, r0, #1
 800a11a:	d102      	bne.n	800a122 <_lseek_r+0x1e>
 800a11c:	682b      	ldr	r3, [r5, #0]
 800a11e:	b103      	cbz	r3, 800a122 <_lseek_r+0x1e>
 800a120:	6023      	str	r3, [r4, #0]
 800a122:	bd38      	pop	{r3, r4, r5, pc}
 800a124:	20000d20 	.word	0x20000d20

0800a128 <__swhatbuf_r>:
 800a128:	b570      	push	{r4, r5, r6, lr}
 800a12a:	460e      	mov	r6, r1
 800a12c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a130:	2900      	cmp	r1, #0
 800a132:	b096      	sub	sp, #88	; 0x58
 800a134:	4614      	mov	r4, r2
 800a136:	461d      	mov	r5, r3
 800a138:	da08      	bge.n	800a14c <__swhatbuf_r+0x24>
 800a13a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a13e:	2200      	movs	r2, #0
 800a140:	602a      	str	r2, [r5, #0]
 800a142:	061a      	lsls	r2, r3, #24
 800a144:	d410      	bmi.n	800a168 <__swhatbuf_r+0x40>
 800a146:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a14a:	e00e      	b.n	800a16a <__swhatbuf_r+0x42>
 800a14c:	466a      	mov	r2, sp
 800a14e:	f000 f8bb 	bl	800a2c8 <_fstat_r>
 800a152:	2800      	cmp	r0, #0
 800a154:	dbf1      	blt.n	800a13a <__swhatbuf_r+0x12>
 800a156:	9a01      	ldr	r2, [sp, #4]
 800a158:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a15c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a160:	425a      	negs	r2, r3
 800a162:	415a      	adcs	r2, r3
 800a164:	602a      	str	r2, [r5, #0]
 800a166:	e7ee      	b.n	800a146 <__swhatbuf_r+0x1e>
 800a168:	2340      	movs	r3, #64	; 0x40
 800a16a:	2000      	movs	r0, #0
 800a16c:	6023      	str	r3, [r4, #0]
 800a16e:	b016      	add	sp, #88	; 0x58
 800a170:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a174 <__smakebuf_r>:
 800a174:	898b      	ldrh	r3, [r1, #12]
 800a176:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a178:	079d      	lsls	r5, r3, #30
 800a17a:	4606      	mov	r6, r0
 800a17c:	460c      	mov	r4, r1
 800a17e:	d507      	bpl.n	800a190 <__smakebuf_r+0x1c>
 800a180:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a184:	6023      	str	r3, [r4, #0]
 800a186:	6123      	str	r3, [r4, #16]
 800a188:	2301      	movs	r3, #1
 800a18a:	6163      	str	r3, [r4, #20]
 800a18c:	b002      	add	sp, #8
 800a18e:	bd70      	pop	{r4, r5, r6, pc}
 800a190:	ab01      	add	r3, sp, #4
 800a192:	466a      	mov	r2, sp
 800a194:	f7ff ffc8 	bl	800a128 <__swhatbuf_r>
 800a198:	9900      	ldr	r1, [sp, #0]
 800a19a:	4605      	mov	r5, r0
 800a19c:	4630      	mov	r0, r6
 800a19e:	f7ff fa57 	bl	8009650 <_malloc_r>
 800a1a2:	b948      	cbnz	r0, 800a1b8 <__smakebuf_r+0x44>
 800a1a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a1a8:	059a      	lsls	r2, r3, #22
 800a1aa:	d4ef      	bmi.n	800a18c <__smakebuf_r+0x18>
 800a1ac:	f023 0303 	bic.w	r3, r3, #3
 800a1b0:	f043 0302 	orr.w	r3, r3, #2
 800a1b4:	81a3      	strh	r3, [r4, #12]
 800a1b6:	e7e3      	b.n	800a180 <__smakebuf_r+0xc>
 800a1b8:	4b0d      	ldr	r3, [pc, #52]	; (800a1f0 <__smakebuf_r+0x7c>)
 800a1ba:	62b3      	str	r3, [r6, #40]	; 0x28
 800a1bc:	89a3      	ldrh	r3, [r4, #12]
 800a1be:	6020      	str	r0, [r4, #0]
 800a1c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a1c4:	81a3      	strh	r3, [r4, #12]
 800a1c6:	9b00      	ldr	r3, [sp, #0]
 800a1c8:	6163      	str	r3, [r4, #20]
 800a1ca:	9b01      	ldr	r3, [sp, #4]
 800a1cc:	6120      	str	r0, [r4, #16]
 800a1ce:	b15b      	cbz	r3, 800a1e8 <__smakebuf_r+0x74>
 800a1d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a1d4:	4630      	mov	r0, r6
 800a1d6:	f000 f889 	bl	800a2ec <_isatty_r>
 800a1da:	b128      	cbz	r0, 800a1e8 <__smakebuf_r+0x74>
 800a1dc:	89a3      	ldrh	r3, [r4, #12]
 800a1de:	f023 0303 	bic.w	r3, r3, #3
 800a1e2:	f043 0301 	orr.w	r3, r3, #1
 800a1e6:	81a3      	strh	r3, [r4, #12]
 800a1e8:	89a0      	ldrh	r0, [r4, #12]
 800a1ea:	4305      	orrs	r5, r0
 800a1ec:	81a5      	strh	r5, [r4, #12]
 800a1ee:	e7cd      	b.n	800a18c <__smakebuf_r+0x18>
 800a1f0:	08009469 	.word	0x08009469

0800a1f4 <__malloc_lock>:
 800a1f4:	4801      	ldr	r0, [pc, #4]	; (800a1fc <__malloc_lock+0x8>)
 800a1f6:	f7ff ba09 	b.w	800960c <__retarget_lock_acquire_recursive>
 800a1fa:	bf00      	nop
 800a1fc:	20000d14 	.word	0x20000d14

0800a200 <__malloc_unlock>:
 800a200:	4801      	ldr	r0, [pc, #4]	; (800a208 <__malloc_unlock+0x8>)
 800a202:	f7ff ba04 	b.w	800960e <__retarget_lock_release_recursive>
 800a206:	bf00      	nop
 800a208:	20000d14 	.word	0x20000d14

0800a20c <_free_r>:
 800a20c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a20e:	2900      	cmp	r1, #0
 800a210:	d044      	beq.n	800a29c <_free_r+0x90>
 800a212:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a216:	9001      	str	r0, [sp, #4]
 800a218:	2b00      	cmp	r3, #0
 800a21a:	f1a1 0404 	sub.w	r4, r1, #4
 800a21e:	bfb8      	it	lt
 800a220:	18e4      	addlt	r4, r4, r3
 800a222:	f7ff ffe7 	bl	800a1f4 <__malloc_lock>
 800a226:	4a1e      	ldr	r2, [pc, #120]	; (800a2a0 <_free_r+0x94>)
 800a228:	9801      	ldr	r0, [sp, #4]
 800a22a:	6813      	ldr	r3, [r2, #0]
 800a22c:	b933      	cbnz	r3, 800a23c <_free_r+0x30>
 800a22e:	6063      	str	r3, [r4, #4]
 800a230:	6014      	str	r4, [r2, #0]
 800a232:	b003      	add	sp, #12
 800a234:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a238:	f7ff bfe2 	b.w	800a200 <__malloc_unlock>
 800a23c:	42a3      	cmp	r3, r4
 800a23e:	d908      	bls.n	800a252 <_free_r+0x46>
 800a240:	6825      	ldr	r5, [r4, #0]
 800a242:	1961      	adds	r1, r4, r5
 800a244:	428b      	cmp	r3, r1
 800a246:	bf01      	itttt	eq
 800a248:	6819      	ldreq	r1, [r3, #0]
 800a24a:	685b      	ldreq	r3, [r3, #4]
 800a24c:	1949      	addeq	r1, r1, r5
 800a24e:	6021      	streq	r1, [r4, #0]
 800a250:	e7ed      	b.n	800a22e <_free_r+0x22>
 800a252:	461a      	mov	r2, r3
 800a254:	685b      	ldr	r3, [r3, #4]
 800a256:	b10b      	cbz	r3, 800a25c <_free_r+0x50>
 800a258:	42a3      	cmp	r3, r4
 800a25a:	d9fa      	bls.n	800a252 <_free_r+0x46>
 800a25c:	6811      	ldr	r1, [r2, #0]
 800a25e:	1855      	adds	r5, r2, r1
 800a260:	42a5      	cmp	r5, r4
 800a262:	d10b      	bne.n	800a27c <_free_r+0x70>
 800a264:	6824      	ldr	r4, [r4, #0]
 800a266:	4421      	add	r1, r4
 800a268:	1854      	adds	r4, r2, r1
 800a26a:	42a3      	cmp	r3, r4
 800a26c:	6011      	str	r1, [r2, #0]
 800a26e:	d1e0      	bne.n	800a232 <_free_r+0x26>
 800a270:	681c      	ldr	r4, [r3, #0]
 800a272:	685b      	ldr	r3, [r3, #4]
 800a274:	6053      	str	r3, [r2, #4]
 800a276:	4421      	add	r1, r4
 800a278:	6011      	str	r1, [r2, #0]
 800a27a:	e7da      	b.n	800a232 <_free_r+0x26>
 800a27c:	d902      	bls.n	800a284 <_free_r+0x78>
 800a27e:	230c      	movs	r3, #12
 800a280:	6003      	str	r3, [r0, #0]
 800a282:	e7d6      	b.n	800a232 <_free_r+0x26>
 800a284:	6825      	ldr	r5, [r4, #0]
 800a286:	1961      	adds	r1, r4, r5
 800a288:	428b      	cmp	r3, r1
 800a28a:	bf04      	itt	eq
 800a28c:	6819      	ldreq	r1, [r3, #0]
 800a28e:	685b      	ldreq	r3, [r3, #4]
 800a290:	6063      	str	r3, [r4, #4]
 800a292:	bf04      	itt	eq
 800a294:	1949      	addeq	r1, r1, r5
 800a296:	6021      	streq	r1, [r4, #0]
 800a298:	6054      	str	r4, [r2, #4]
 800a29a:	e7ca      	b.n	800a232 <_free_r+0x26>
 800a29c:	b003      	add	sp, #12
 800a29e:	bd30      	pop	{r4, r5, pc}
 800a2a0:	20000d18 	.word	0x20000d18

0800a2a4 <_read_r>:
 800a2a4:	b538      	push	{r3, r4, r5, lr}
 800a2a6:	4d07      	ldr	r5, [pc, #28]	; (800a2c4 <_read_r+0x20>)
 800a2a8:	4604      	mov	r4, r0
 800a2aa:	4608      	mov	r0, r1
 800a2ac:	4611      	mov	r1, r2
 800a2ae:	2200      	movs	r2, #0
 800a2b0:	602a      	str	r2, [r5, #0]
 800a2b2:	461a      	mov	r2, r3
 800a2b4:	f7f7 feb4 	bl	8002020 <_read>
 800a2b8:	1c43      	adds	r3, r0, #1
 800a2ba:	d102      	bne.n	800a2c2 <_read_r+0x1e>
 800a2bc:	682b      	ldr	r3, [r5, #0]
 800a2be:	b103      	cbz	r3, 800a2c2 <_read_r+0x1e>
 800a2c0:	6023      	str	r3, [r4, #0]
 800a2c2:	bd38      	pop	{r3, r4, r5, pc}
 800a2c4:	20000d20 	.word	0x20000d20

0800a2c8 <_fstat_r>:
 800a2c8:	b538      	push	{r3, r4, r5, lr}
 800a2ca:	4d07      	ldr	r5, [pc, #28]	; (800a2e8 <_fstat_r+0x20>)
 800a2cc:	2300      	movs	r3, #0
 800a2ce:	4604      	mov	r4, r0
 800a2d0:	4608      	mov	r0, r1
 800a2d2:	4611      	mov	r1, r2
 800a2d4:	602b      	str	r3, [r5, #0]
 800a2d6:	f7f7 fee8 	bl	80020aa <_fstat>
 800a2da:	1c43      	adds	r3, r0, #1
 800a2dc:	d102      	bne.n	800a2e4 <_fstat_r+0x1c>
 800a2de:	682b      	ldr	r3, [r5, #0]
 800a2e0:	b103      	cbz	r3, 800a2e4 <_fstat_r+0x1c>
 800a2e2:	6023      	str	r3, [r4, #0]
 800a2e4:	bd38      	pop	{r3, r4, r5, pc}
 800a2e6:	bf00      	nop
 800a2e8:	20000d20 	.word	0x20000d20

0800a2ec <_isatty_r>:
 800a2ec:	b538      	push	{r3, r4, r5, lr}
 800a2ee:	4d06      	ldr	r5, [pc, #24]	; (800a308 <_isatty_r+0x1c>)
 800a2f0:	2300      	movs	r3, #0
 800a2f2:	4604      	mov	r4, r0
 800a2f4:	4608      	mov	r0, r1
 800a2f6:	602b      	str	r3, [r5, #0]
 800a2f8:	f7f7 fee7 	bl	80020ca <_isatty>
 800a2fc:	1c43      	adds	r3, r0, #1
 800a2fe:	d102      	bne.n	800a306 <_isatty_r+0x1a>
 800a300:	682b      	ldr	r3, [r5, #0]
 800a302:	b103      	cbz	r3, 800a306 <_isatty_r+0x1a>
 800a304:	6023      	str	r3, [r4, #0]
 800a306:	bd38      	pop	{r3, r4, r5, pc}
 800a308:	20000d20 	.word	0x20000d20

0800a30c <_init>:
 800a30c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a30e:	bf00      	nop
 800a310:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a312:	bc08      	pop	{r3}
 800a314:	469e      	mov	lr, r3
 800a316:	4770      	bx	lr

0800a318 <_fini>:
 800a318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a31a:	bf00      	nop
 800a31c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a31e:	bc08      	pop	{r3}
 800a320:	469e      	mov	lr, r3
 800a322:	4770      	bx	lr
