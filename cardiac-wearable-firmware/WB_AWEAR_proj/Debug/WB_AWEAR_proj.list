
WB_AWEAR_proj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a75c  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000041c  0800a89c  0800a89c  0001a89c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800acb8  0800acb8  0001acb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800acc0  0800acc0  0001acc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800acc4  0800acc4  0001acc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000084  20000008  0800acc8  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 MB_MEM2       00000883  2000008c  0800ad4c  0002008c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 BLE_DRIVER_CONTEXT 00000035  20000910  0800b5cf  00020910  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 SYSTEM_DRIVER_CONTEXT 00000011  20000948  0800b604  00020948  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          000003d0  2000095c  0800b615  0002095c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000d2c  0800b615  00020d2c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020959  2**0
                  CONTENTS, READONLY
 13 MAPPING_TABLE 00000028  20030000  20030000  00030000  2**2
                  ALLOC
 14 MB_MEM1       000001bb  20030028  20030028  00030000  2**2
                  ALLOC
 15 .debug_info   000305ee  00000000  00000000  00020989  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00005e61  00000000  00000000  00050f77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 000029f0  00000000  00000000  00056dd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 00002748  00000000  00000000  000597c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002d176  00000000  00000000  0005bf10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0002ee4c  00000000  00000000  00089086  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000fa786  00000000  00000000  000b7ed2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000050  00000000  00000000  001b2658  2**0
                  CONTENTS, READONLY
 23 .debug_frame  0000b748  00000000  00000000  001b26a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	2000095c 	.word	0x2000095c
 800015c:	00000000 	.word	0x00000000
 8000160:	0800a884 	.word	0x0800a884

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000960 	.word	0x20000960
 800017c:	0800a884 	.word	0x0800a884

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_uldivmod>:
 8000230:	b953      	cbnz	r3, 8000248 <__aeabi_uldivmod+0x18>
 8000232:	b94a      	cbnz	r2, 8000248 <__aeabi_uldivmod+0x18>
 8000234:	2900      	cmp	r1, #0
 8000236:	bf08      	it	eq
 8000238:	2800      	cmpeq	r0, #0
 800023a:	bf1c      	itt	ne
 800023c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000240:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000244:	f000 b974 	b.w	8000530 <__aeabi_idiv0>
 8000248:	f1ad 0c08 	sub.w	ip, sp, #8
 800024c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000258:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800025c:	b004      	add	sp, #16
 800025e:	4770      	bx	lr

08000260 <__udivmoddi4>:
 8000260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000264:	9d08      	ldr	r5, [sp, #32]
 8000266:	4604      	mov	r4, r0
 8000268:	468e      	mov	lr, r1
 800026a:	2b00      	cmp	r3, #0
 800026c:	d14d      	bne.n	800030a <__udivmoddi4+0xaa>
 800026e:	428a      	cmp	r2, r1
 8000270:	4694      	mov	ip, r2
 8000272:	d969      	bls.n	8000348 <__udivmoddi4+0xe8>
 8000274:	fab2 f282 	clz	r2, r2
 8000278:	b152      	cbz	r2, 8000290 <__udivmoddi4+0x30>
 800027a:	fa01 f302 	lsl.w	r3, r1, r2
 800027e:	f1c2 0120 	rsb	r1, r2, #32
 8000282:	fa20 f101 	lsr.w	r1, r0, r1
 8000286:	fa0c fc02 	lsl.w	ip, ip, r2
 800028a:	ea41 0e03 	orr.w	lr, r1, r3
 800028e:	4094      	lsls	r4, r2
 8000290:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000294:	0c21      	lsrs	r1, r4, #16
 8000296:	fbbe f6f8 	udiv	r6, lr, r8
 800029a:	fa1f f78c 	uxth.w	r7, ip
 800029e:	fb08 e316 	mls	r3, r8, r6, lr
 80002a2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002a6:	fb06 f107 	mul.w	r1, r6, r7
 80002aa:	4299      	cmp	r1, r3
 80002ac:	d90a      	bls.n	80002c4 <__udivmoddi4+0x64>
 80002ae:	eb1c 0303 	adds.w	r3, ip, r3
 80002b2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002b6:	f080 811f 	bcs.w	80004f8 <__udivmoddi4+0x298>
 80002ba:	4299      	cmp	r1, r3
 80002bc:	f240 811c 	bls.w	80004f8 <__udivmoddi4+0x298>
 80002c0:	3e02      	subs	r6, #2
 80002c2:	4463      	add	r3, ip
 80002c4:	1a5b      	subs	r3, r3, r1
 80002c6:	b2a4      	uxth	r4, r4
 80002c8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002cc:	fb08 3310 	mls	r3, r8, r0, r3
 80002d0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d4:	fb00 f707 	mul.w	r7, r0, r7
 80002d8:	42a7      	cmp	r7, r4
 80002da:	d90a      	bls.n	80002f2 <__udivmoddi4+0x92>
 80002dc:	eb1c 0404 	adds.w	r4, ip, r4
 80002e0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002e4:	f080 810a 	bcs.w	80004fc <__udivmoddi4+0x29c>
 80002e8:	42a7      	cmp	r7, r4
 80002ea:	f240 8107 	bls.w	80004fc <__udivmoddi4+0x29c>
 80002ee:	4464      	add	r4, ip
 80002f0:	3802      	subs	r0, #2
 80002f2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002f6:	1be4      	subs	r4, r4, r7
 80002f8:	2600      	movs	r6, #0
 80002fa:	b11d      	cbz	r5, 8000304 <__udivmoddi4+0xa4>
 80002fc:	40d4      	lsrs	r4, r2
 80002fe:	2300      	movs	r3, #0
 8000300:	e9c5 4300 	strd	r4, r3, [r5]
 8000304:	4631      	mov	r1, r6
 8000306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030a:	428b      	cmp	r3, r1
 800030c:	d909      	bls.n	8000322 <__udivmoddi4+0xc2>
 800030e:	2d00      	cmp	r5, #0
 8000310:	f000 80ef 	beq.w	80004f2 <__udivmoddi4+0x292>
 8000314:	2600      	movs	r6, #0
 8000316:	e9c5 0100 	strd	r0, r1, [r5]
 800031a:	4630      	mov	r0, r6
 800031c:	4631      	mov	r1, r6
 800031e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000322:	fab3 f683 	clz	r6, r3
 8000326:	2e00      	cmp	r6, #0
 8000328:	d14a      	bne.n	80003c0 <__udivmoddi4+0x160>
 800032a:	428b      	cmp	r3, r1
 800032c:	d302      	bcc.n	8000334 <__udivmoddi4+0xd4>
 800032e:	4282      	cmp	r2, r0
 8000330:	f200 80f9 	bhi.w	8000526 <__udivmoddi4+0x2c6>
 8000334:	1a84      	subs	r4, r0, r2
 8000336:	eb61 0303 	sbc.w	r3, r1, r3
 800033a:	2001      	movs	r0, #1
 800033c:	469e      	mov	lr, r3
 800033e:	2d00      	cmp	r5, #0
 8000340:	d0e0      	beq.n	8000304 <__udivmoddi4+0xa4>
 8000342:	e9c5 4e00 	strd	r4, lr, [r5]
 8000346:	e7dd      	b.n	8000304 <__udivmoddi4+0xa4>
 8000348:	b902      	cbnz	r2, 800034c <__udivmoddi4+0xec>
 800034a:	deff      	udf	#255	; 0xff
 800034c:	fab2 f282 	clz	r2, r2
 8000350:	2a00      	cmp	r2, #0
 8000352:	f040 8092 	bne.w	800047a <__udivmoddi4+0x21a>
 8000356:	eba1 010c 	sub.w	r1, r1, ip
 800035a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800035e:	fa1f fe8c 	uxth.w	lr, ip
 8000362:	2601      	movs	r6, #1
 8000364:	0c20      	lsrs	r0, r4, #16
 8000366:	fbb1 f3f7 	udiv	r3, r1, r7
 800036a:	fb07 1113 	mls	r1, r7, r3, r1
 800036e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000372:	fb0e f003 	mul.w	r0, lr, r3
 8000376:	4288      	cmp	r0, r1
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0x12c>
 800037a:	eb1c 0101 	adds.w	r1, ip, r1
 800037e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x12a>
 8000384:	4288      	cmp	r0, r1
 8000386:	f200 80cb 	bhi.w	8000520 <__udivmoddi4+0x2c0>
 800038a:	4643      	mov	r3, r8
 800038c:	1a09      	subs	r1, r1, r0
 800038e:	b2a4      	uxth	r4, r4
 8000390:	fbb1 f0f7 	udiv	r0, r1, r7
 8000394:	fb07 1110 	mls	r1, r7, r0, r1
 8000398:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800039c:	fb0e fe00 	mul.w	lr, lr, r0
 80003a0:	45a6      	cmp	lr, r4
 80003a2:	d908      	bls.n	80003b6 <__udivmoddi4+0x156>
 80003a4:	eb1c 0404 	adds.w	r4, ip, r4
 80003a8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003ac:	d202      	bcs.n	80003b4 <__udivmoddi4+0x154>
 80003ae:	45a6      	cmp	lr, r4
 80003b0:	f200 80bb 	bhi.w	800052a <__udivmoddi4+0x2ca>
 80003b4:	4608      	mov	r0, r1
 80003b6:	eba4 040e 	sub.w	r4, r4, lr
 80003ba:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003be:	e79c      	b.n	80002fa <__udivmoddi4+0x9a>
 80003c0:	f1c6 0720 	rsb	r7, r6, #32
 80003c4:	40b3      	lsls	r3, r6
 80003c6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ca:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ce:	fa20 f407 	lsr.w	r4, r0, r7
 80003d2:	fa01 f306 	lsl.w	r3, r1, r6
 80003d6:	431c      	orrs	r4, r3
 80003d8:	40f9      	lsrs	r1, r7
 80003da:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003de:	fa00 f306 	lsl.w	r3, r0, r6
 80003e2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003e6:	0c20      	lsrs	r0, r4, #16
 80003e8:	fa1f fe8c 	uxth.w	lr, ip
 80003ec:	fb09 1118 	mls	r1, r9, r8, r1
 80003f0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f4:	fb08 f00e 	mul.w	r0, r8, lr
 80003f8:	4288      	cmp	r0, r1
 80003fa:	fa02 f206 	lsl.w	r2, r2, r6
 80003fe:	d90b      	bls.n	8000418 <__udivmoddi4+0x1b8>
 8000400:	eb1c 0101 	adds.w	r1, ip, r1
 8000404:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000408:	f080 8088 	bcs.w	800051c <__udivmoddi4+0x2bc>
 800040c:	4288      	cmp	r0, r1
 800040e:	f240 8085 	bls.w	800051c <__udivmoddi4+0x2bc>
 8000412:	f1a8 0802 	sub.w	r8, r8, #2
 8000416:	4461      	add	r1, ip
 8000418:	1a09      	subs	r1, r1, r0
 800041a:	b2a4      	uxth	r4, r4
 800041c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000420:	fb09 1110 	mls	r1, r9, r0, r1
 8000424:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000428:	fb00 fe0e 	mul.w	lr, r0, lr
 800042c:	458e      	cmp	lr, r1
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x1e2>
 8000430:	eb1c 0101 	adds.w	r1, ip, r1
 8000434:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000438:	d26c      	bcs.n	8000514 <__udivmoddi4+0x2b4>
 800043a:	458e      	cmp	lr, r1
 800043c:	d96a      	bls.n	8000514 <__udivmoddi4+0x2b4>
 800043e:	3802      	subs	r0, #2
 8000440:	4461      	add	r1, ip
 8000442:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000446:	fba0 9402 	umull	r9, r4, r0, r2
 800044a:	eba1 010e 	sub.w	r1, r1, lr
 800044e:	42a1      	cmp	r1, r4
 8000450:	46c8      	mov	r8, r9
 8000452:	46a6      	mov	lr, r4
 8000454:	d356      	bcc.n	8000504 <__udivmoddi4+0x2a4>
 8000456:	d053      	beq.n	8000500 <__udivmoddi4+0x2a0>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x212>
 800045a:	ebb3 0208 	subs.w	r2, r3, r8
 800045e:	eb61 010e 	sbc.w	r1, r1, lr
 8000462:	fa01 f707 	lsl.w	r7, r1, r7
 8000466:	fa22 f306 	lsr.w	r3, r2, r6
 800046a:	40f1      	lsrs	r1, r6
 800046c:	431f      	orrs	r7, r3
 800046e:	e9c5 7100 	strd	r7, r1, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	f1c2 0320 	rsb	r3, r2, #32
 800047e:	40d8      	lsrs	r0, r3
 8000480:	fa0c fc02 	lsl.w	ip, ip, r2
 8000484:	fa21 f303 	lsr.w	r3, r1, r3
 8000488:	4091      	lsls	r1, r2
 800048a:	4301      	orrs	r1, r0
 800048c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fbb3 f0f7 	udiv	r0, r3, r7
 8000498:	fb07 3610 	mls	r6, r7, r0, r3
 800049c:	0c0b      	lsrs	r3, r1, #16
 800049e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004a2:	fb00 f60e 	mul.w	r6, r0, lr
 80004a6:	429e      	cmp	r6, r3
 80004a8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x260>
 80004ae:	eb1c 0303 	adds.w	r3, ip, r3
 80004b2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004b6:	d22f      	bcs.n	8000518 <__udivmoddi4+0x2b8>
 80004b8:	429e      	cmp	r6, r3
 80004ba:	d92d      	bls.n	8000518 <__udivmoddi4+0x2b8>
 80004bc:	3802      	subs	r0, #2
 80004be:	4463      	add	r3, ip
 80004c0:	1b9b      	subs	r3, r3, r6
 80004c2:	b289      	uxth	r1, r1
 80004c4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004c8:	fb07 3316 	mls	r3, r7, r6, r3
 80004cc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004d0:	fb06 f30e 	mul.w	r3, r6, lr
 80004d4:	428b      	cmp	r3, r1
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x28a>
 80004d8:	eb1c 0101 	adds.w	r1, ip, r1
 80004dc:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004e0:	d216      	bcs.n	8000510 <__udivmoddi4+0x2b0>
 80004e2:	428b      	cmp	r3, r1
 80004e4:	d914      	bls.n	8000510 <__udivmoddi4+0x2b0>
 80004e6:	3e02      	subs	r6, #2
 80004e8:	4461      	add	r1, ip
 80004ea:	1ac9      	subs	r1, r1, r3
 80004ec:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004f0:	e738      	b.n	8000364 <__udivmoddi4+0x104>
 80004f2:	462e      	mov	r6, r5
 80004f4:	4628      	mov	r0, r5
 80004f6:	e705      	b.n	8000304 <__udivmoddi4+0xa4>
 80004f8:	4606      	mov	r6, r0
 80004fa:	e6e3      	b.n	80002c4 <__udivmoddi4+0x64>
 80004fc:	4618      	mov	r0, r3
 80004fe:	e6f8      	b.n	80002f2 <__udivmoddi4+0x92>
 8000500:	454b      	cmp	r3, r9
 8000502:	d2a9      	bcs.n	8000458 <__udivmoddi4+0x1f8>
 8000504:	ebb9 0802 	subs.w	r8, r9, r2
 8000508:	eb64 0e0c 	sbc.w	lr, r4, ip
 800050c:	3801      	subs	r0, #1
 800050e:	e7a3      	b.n	8000458 <__udivmoddi4+0x1f8>
 8000510:	4646      	mov	r6, r8
 8000512:	e7ea      	b.n	80004ea <__udivmoddi4+0x28a>
 8000514:	4620      	mov	r0, r4
 8000516:	e794      	b.n	8000442 <__udivmoddi4+0x1e2>
 8000518:	4640      	mov	r0, r8
 800051a:	e7d1      	b.n	80004c0 <__udivmoddi4+0x260>
 800051c:	46d0      	mov	r8, sl
 800051e:	e77b      	b.n	8000418 <__udivmoddi4+0x1b8>
 8000520:	3b02      	subs	r3, #2
 8000522:	4461      	add	r1, ip
 8000524:	e732      	b.n	800038c <__udivmoddi4+0x12c>
 8000526:	4630      	mov	r0, r6
 8000528:	e709      	b.n	800033e <__udivmoddi4+0xde>
 800052a:	4464      	add	r4, ip
 800052c:	3802      	subs	r0, #2
 800052e:	e742      	b.n	80003b6 <__udivmoddi4+0x156>

08000530 <__aeabi_idiv0>:
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop

08000534 <BH1790GLC_init>:
******************************************************************************/

#include "BH1790GLC.h"

uint8_t BH1790GLC_init( BH1790GLC *dev, I2C_HandleTypeDef *i2cHandle )
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b086      	sub	sp, #24
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
 800053c:	6039      	str	r1, [r7, #0]
	/* Set struct parameters */
	dev->i2cHandle = i2cHandle;
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	683a      	ldr	r2, [r7, #0]
 8000542:	601a      	str	r2, [r3, #0]
	dev->ppg_data[0] = 0;
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	2200      	movs	r2, #0
 8000548:	711a      	strb	r2, [r3, #4]
	dev->ppg_data[1] = 0;
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	2200      	movs	r2, #0
 800054e:	715a      	strb	r2, [r3, #5]

	/* Keep count of errors */
	uint8_t errNum = 0;
 8000550:	2300      	movs	r3, #0
 8000552:	75fb      	strb	r3, [r7, #23]
	HAL_StatusTypeDef status;

	uint8_t regData;

	status = read(dev, BH1790GLC_MANUFACTURER_ID, &regData);	//get manufacturer id
 8000554:	f107 0315 	add.w	r3, r7, #21
 8000558:	461a      	mov	r2, r3
 800055a:	210f      	movs	r1, #15
 800055c:	6878      	ldr	r0, [r7, #4]
 800055e:	f000 f8d7 	bl	8000710 <read>
 8000562:	4603      	mov	r3, r0
 8000564:	75bb      	strb	r3, [r7, #22]
	errNum += (status != HAL_OK);
 8000566:	7dbb      	ldrb	r3, [r7, #22]
 8000568:	2b00      	cmp	r3, #0
 800056a:	bf14      	ite	ne
 800056c:	2301      	movne	r3, #1
 800056e:	2300      	moveq	r3, #0
 8000570:	b2db      	uxtb	r3, r3
 8000572:	461a      	mov	r2, r3
 8000574:	7dfb      	ldrb	r3, [r7, #23]
 8000576:	4413      	add	r3, r2
 8000578:	75fb      	strb	r3, [r7, #23]
	if(regData != BH1790GLC_MID_VAL){ return ERR_MID_VAL; }
 800057a:	7d7b      	ldrb	r3, [r7, #21]
 800057c:	2be0      	cmp	r3, #224	; 0xe0
 800057e:	d001      	beq.n	8000584 <BH1790GLC_init+0x50>
 8000580:	230a      	movs	r3, #10
 8000582:	e074      	b.n	800066e <BH1790GLC_init+0x13a>

	status = read(dev, BH1790GLC_PART_ID, &regData);	//get part id
 8000584:	f107 0315 	add.w	r3, r7, #21
 8000588:	461a      	mov	r2, r3
 800058a:	2110      	movs	r1, #16
 800058c:	6878      	ldr	r0, [r7, #4]
 800058e:	f000 f8bf 	bl	8000710 <read>
 8000592:	4603      	mov	r3, r0
 8000594:	75bb      	strb	r3, [r7, #22]
	errNum += (status != HAL_OK);
 8000596:	7dbb      	ldrb	r3, [r7, #22]
 8000598:	2b00      	cmp	r3, #0
 800059a:	bf14      	ite	ne
 800059c:	2301      	movne	r3, #1
 800059e:	2300      	moveq	r3, #0
 80005a0:	b2db      	uxtb	r3, r3
 80005a2:	461a      	mov	r2, r3
 80005a4:	7dfb      	ldrb	r3, [r7, #23]
 80005a6:	4413      	add	r3, r2
 80005a8:	75fb      	strb	r3, [r7, #23]
	if(regData != BH1790GLC_PID_VAL){ return ERR_PID_VAL; }
 80005aa:	7d7b      	ldrb	r3, [r7, #21]
 80005ac:	2b0d      	cmp	r3, #13
 80005ae:	d001      	beq.n	80005b4 <BH1790GLC_init+0x80>
 80005b0:	230b      	movs	r3, #11
 80005b2:	e05c      	b.n	800066e <BH1790GLC_init+0x13a>

	uint8_t configData[3];
	configData[0] = BH1790GLC_MEAS_CONTROL1_VAL;	//to BH1790GLC_MEAS_CONTROL1 (0x41)
 80005b4:	2382      	movs	r3, #130	; 0x82
 80005b6:	743b      	strb	r3, [r7, #16]
	configData[1] = BH1790GLC_MEAS_CONTROL2_VAL;	//to BH1790GLC_MEAS_CONTROL2 (0x42)
 80005b8:	230c      	movs	r3, #12
 80005ba:	747b      	strb	r3, [r7, #17]
	configData[2] = BH1790GLC_MEAS_START_VAL;		//to BH1790GLC_MEAS_START (0x43)
 80005bc:	2301      	movs	r3, #1
 80005be:	74bb      	strb	r3, [r7, #18]

	status = write(dev, BH1790GLC_MEAS_CONTROL1, &configData[0]);
 80005c0:	f107 0310 	add.w	r3, r7, #16
 80005c4:	461a      	mov	r2, r3
 80005c6:	2141      	movs	r1, #65	; 0x41
 80005c8:	6878      	ldr	r0, [r7, #4]
 80005ca:	f000 f87f 	bl	80006cc <write>
 80005ce:	4603      	mov	r3, r0
 80005d0:	75bb      	strb	r3, [r7, #22]
	errNum += (status != HAL_OK);
 80005d2:	7dbb      	ldrb	r3, [r7, #22]
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	bf14      	ite	ne
 80005d8:	2301      	movne	r3, #1
 80005da:	2300      	moveq	r3, #0
 80005dc:	b2db      	uxtb	r3, r3
 80005de:	461a      	mov	r2, r3
 80005e0:	7dfb      	ldrb	r3, [r7, #23]
 80005e2:	4413      	add	r3, r2
 80005e4:	75fb      	strb	r3, [r7, #23]

	status = write(dev, BH1790GLC_MEAS_CONTROL2, &configData[1]);
 80005e6:	f107 0310 	add.w	r3, r7, #16
 80005ea:	3301      	adds	r3, #1
 80005ec:	461a      	mov	r2, r3
 80005ee:	2142      	movs	r1, #66	; 0x42
 80005f0:	6878      	ldr	r0, [r7, #4]
 80005f2:	f000 f86b 	bl	80006cc <write>
 80005f6:	4603      	mov	r3, r0
 80005f8:	75bb      	strb	r3, [r7, #22]
	errNum += (status != HAL_OK);
 80005fa:	7dbb      	ldrb	r3, [r7, #22]
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	bf14      	ite	ne
 8000600:	2301      	movne	r3, #1
 8000602:	2300      	moveq	r3, #0
 8000604:	b2db      	uxtb	r3, r3
 8000606:	461a      	mov	r2, r3
 8000608:	7dfb      	ldrb	r3, [r7, #23]
 800060a:	4413      	add	r3, r2
 800060c:	75fb      	strb	r3, [r7, #23]

	status = write(dev, BH1790GLC_MEAS_START, &configData[2]);
 800060e:	f107 0310 	add.w	r3, r7, #16
 8000612:	3302      	adds	r3, #2
 8000614:	461a      	mov	r2, r3
 8000616:	2143      	movs	r1, #67	; 0x43
 8000618:	6878      	ldr	r0, [r7, #4]
 800061a:	f000 f857 	bl	80006cc <write>
 800061e:	4603      	mov	r3, r0
 8000620:	75bb      	strb	r3, [r7, #22]
	errNum += (status != HAL_OK);
 8000622:	7dbb      	ldrb	r3, [r7, #22]
 8000624:	2b00      	cmp	r3, #0
 8000626:	bf14      	ite	ne
 8000628:	2301      	movne	r3, #1
 800062a:	2300      	moveq	r3, #0
 800062c:	b2db      	uxtb	r3, r3
 800062e:	461a      	mov	r2, r3
 8000630:	7dfb      	ldrb	r3, [r7, #23]
 8000632:	4413      	add	r3, r2
 8000634:	75fb      	strb	r3, [r7, #23]

	uint8_t writeCheck[3];
	status = many_reads(dev, BH1790GLC_MEAS_CONTROL1, writeCheck, 3);	//check config registers
 8000636:	f107 020c 	add.w	r2, r7, #12
 800063a:	2303      	movs	r3, #3
 800063c:	2141      	movs	r1, #65	; 0x41
 800063e:	6878      	ldr	r0, [r7, #4]
 8000640:	f000 f888 	bl	8000754 <many_reads>
 8000644:	4603      	mov	r3, r0
 8000646:	75bb      	strb	r3, [r7, #22]
	if(writeCheck[0] != configData[0]){
 8000648:	7b3a      	ldrb	r2, [r7, #12]
 800064a:	7c3b      	ldrb	r3, [r7, #16]
 800064c:	429a      	cmp	r2, r3
 800064e:	d001      	beq.n	8000654 <BH1790GLC_init+0x120>
		return ERR_MEAS_CONTROL1;
 8000650:	2314      	movs	r3, #20
 8000652:	e00c      	b.n	800066e <BH1790GLC_init+0x13a>
	}
	if(writeCheck[1] != configData[1]){
 8000654:	7b7a      	ldrb	r2, [r7, #13]
 8000656:	7c7b      	ldrb	r3, [r7, #17]
 8000658:	429a      	cmp	r2, r3
 800065a:	d001      	beq.n	8000660 <BH1790GLC_init+0x12c>
		return ERR_MEAS_CONTROL2;
 800065c:	2315      	movs	r3, #21
 800065e:	e006      	b.n	800066e <BH1790GLC_init+0x13a>
	}
	if(writeCheck[2] != configData[2]){
 8000660:	7bba      	ldrb	r2, [r7, #14]
 8000662:	7cbb      	ldrb	r3, [r7, #18]
 8000664:	429a      	cmp	r2, r3
 8000666:	d001      	beq.n	800066c <BH1790GLC_init+0x138>
		return ERR_MEAS_START;
 8000668:	2316      	movs	r3, #22
 800066a:	e000      	b.n	800066e <BH1790GLC_init+0x13a>
	}

	return SUCCESS;
 800066c:	2300      	movs	r3, #0
}
 800066e:	4618      	mov	r0, r3
 8000670:	3718      	adds	r7, #24
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}

08000676 <get_val>:

uint8_t get_val( BH1790GLC *dev )
{
 8000676:	b580      	push	{r7, lr}
 8000678:	b084      	sub	sp, #16
 800067a:	af00      	add	r7, sp, #0
 800067c:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status;
	uint8_t sensorData[4];

	status = many_reads(dev, BH1790GLC_DATAOUT_LEDOFF, sensorData, 4);
 800067e:	f107 0208 	add.w	r2, r7, #8
 8000682:	2304      	movs	r3, #4
 8000684:	2154      	movs	r1, #84	; 0x54
 8000686:	6878      	ldr	r0, [r7, #4]
 8000688:	f000 f864 	bl	8000754 <many_reads>
 800068c:	4603      	mov	r3, r0
 800068e:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK){
 8000690:	7bfb      	ldrb	r3, [r7, #15]
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <get_val+0x24>
		return ERR_DATA_OUT;		//error check
 8000696:	231e      	movs	r3, #30
 8000698:	e014      	b.n	80006c4 <get_val+0x4e>
	}

	//convert the sensorData values to useful data
	dev->ppg_data[0] = ((uint8_t)sensorData[1]<<8)|(sensorData[0]);
 800069a:	7a7b      	ldrb	r3, [r7, #9]
 800069c:	021b      	lsls	r3, r3, #8
 800069e:	b25a      	sxtb	r2, r3
 80006a0:	7a3b      	ldrb	r3, [r7, #8]
 80006a2:	b25b      	sxtb	r3, r3
 80006a4:	4313      	orrs	r3, r2
 80006a6:	b25b      	sxtb	r3, r3
 80006a8:	b2da      	uxtb	r2, r3
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	711a      	strb	r2, [r3, #4]
	dev->ppg_data[1] = ((uint8_t)sensorData[3]<<8)|(sensorData[2]);
 80006ae:	7afb      	ldrb	r3, [r7, #11]
 80006b0:	021b      	lsls	r3, r3, #8
 80006b2:	b25a      	sxtb	r2, r3
 80006b4:	7abb      	ldrb	r3, [r7, #10]
 80006b6:	b25b      	sxtb	r3, r3
 80006b8:	4313      	orrs	r3, r2
 80006ba:	b25b      	sxtb	r3, r3
 80006bc:	b2da      	uxtb	r2, r3
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	715a      	strb	r2, [r3, #5]

	return SUCCESS;
 80006c2:	2300      	movs	r3, #0
}
 80006c4:	4618      	mov	r0, r3
 80006c6:	3710      	adds	r7, #16
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}

080006cc <write>:
/*
 * reg : which register in the sensor to write to
 * data : data to write (consider not having this be a pointer?
 */
HAL_StatusTypeDef write( BH1790GLC *dev, uint8_t reg, uint8_t *data)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b08a      	sub	sp, #40	; 0x28
 80006d0:	af04      	add	r7, sp, #16
 80006d2:	60f8      	str	r0, [r7, #12]
 80006d4:	460b      	mov	r3, r1
 80006d6:	607a      	str	r2, [r7, #4]
 80006d8:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef ret;

	//passing my handle, read from peripheral, get from this register, size of that register,
	// where to put the data, 1 byte of data, max delay
	ret = HAL_I2C_Mem_Write(dev->i2cHandle, (BH1790GLC_DEVICE_ADDRESS<<1), reg, 1, data, 1, HAL_MAX_DELAY);
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	6818      	ldr	r0, [r3, #0]
 80006de:	7afb      	ldrb	r3, [r7, #11]
 80006e0:	b29a      	uxth	r2, r3
 80006e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80006e6:	9302      	str	r3, [sp, #8]
 80006e8:	2301      	movs	r3, #1
 80006ea:	9301      	str	r3, [sp, #4]
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	9300      	str	r3, [sp, #0]
 80006f0:	2301      	movs	r3, #1
 80006f2:	21b6      	movs	r1, #182	; 0xb6
 80006f4:	f002 fb80 	bl	8002df8 <HAL_I2C_Mem_Write>
 80006f8:	4603      	mov	r3, r0
 80006fa:	75fb      	strb	r3, [r7, #23]
	if(ret != HAL_OK){
 80006fc:	7dfb      	ldrb	r3, [r7, #23]
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <write+0x3a>
		return ret;			//error check
 8000702:	7dfb      	ldrb	r3, [r7, #23]
 8000704:	e000      	b.n	8000708 <write+0x3c>
	}

	return HAL_OK;
 8000706:	2300      	movs	r3, #0
}
 8000708:	4618      	mov	r0, r3
 800070a:	3718      	adds	r7, #24
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}

08000710 <read>:
/*
 * reg : which register in the sensor to read from
 * data : data to write (consider not having this be a pointer?
 */
HAL_StatusTypeDef read( BH1790GLC *dev, uint8_t reg, uint8_t *data)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b08a      	sub	sp, #40	; 0x28
 8000714:	af04      	add	r7, sp, #16
 8000716:	60f8      	str	r0, [r7, #12]
 8000718:	460b      	mov	r3, r1
 800071a:	607a      	str	r2, [r7, #4]
 800071c:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef ret;

	ret = HAL_I2C_Mem_Read(dev->i2cHandle, (BH1790GLC_DEVICE_ADDRESS<<1), reg, 1, data, 1, HAL_MAX_DELAY);
 800071e:	68fb      	ldr	r3, [r7, #12]
 8000720:	6818      	ldr	r0, [r3, #0]
 8000722:	7afb      	ldrb	r3, [r7, #11]
 8000724:	b29a      	uxth	r2, r3
 8000726:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800072a:	9302      	str	r3, [sp, #8]
 800072c:	2301      	movs	r3, #1
 800072e:	9301      	str	r3, [sp, #4]
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	9300      	str	r3, [sp, #0]
 8000734:	2301      	movs	r3, #1
 8000736:	21b6      	movs	r1, #182	; 0xb6
 8000738:	f002 fc72 	bl	8003020 <HAL_I2C_Mem_Read>
 800073c:	4603      	mov	r3, r0
 800073e:	75fb      	strb	r3, [r7, #23]
	if(ret != HAL_OK){
 8000740:	7dfb      	ldrb	r3, [r7, #23]
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <read+0x3a>
		return ret;			//error check
 8000746:	7dfb      	ldrb	r3, [r7, #23]
 8000748:	e000      	b.n	800074c <read+0x3c>
	}


	return HAL_OK;
 800074a:	2300      	movs	r3, #0
}
 800074c:	4618      	mov	r0, r3
 800074e:	3718      	adds	r7, #24
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}

08000754 <many_reads>:
 * reg : which register in the sensor to read from
 * data : data to write (consider not having this be a pointer?
 * length : # of bytes to read
 */
HAL_StatusTypeDef many_reads( BH1790GLC *dev, uint8_t reg, uint8_t *data, uint8_t length )
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b08a      	sub	sp, #40	; 0x28
 8000758:	af04      	add	r7, sp, #16
 800075a:	60f8      	str	r0, [r7, #12]
 800075c:	607a      	str	r2, [r7, #4]
 800075e:	461a      	mov	r2, r3
 8000760:	460b      	mov	r3, r1
 8000762:	72fb      	strb	r3, [r7, #11]
 8000764:	4613      	mov	r3, r2
 8000766:	72bb      	strb	r3, [r7, #10]
	HAL_StatusTypeDef ret;

	ret = HAL_I2C_Mem_Read(dev->i2cHandle, (BH1790GLC_DEVICE_ADDRESS<<1), reg, 1, data, length, HAL_MAX_DELAY);
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	6818      	ldr	r0, [r3, #0]
 800076c:	7afb      	ldrb	r3, [r7, #11]
 800076e:	b29a      	uxth	r2, r3
 8000770:	7abb      	ldrb	r3, [r7, #10]
 8000772:	b29b      	uxth	r3, r3
 8000774:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000778:	9102      	str	r1, [sp, #8]
 800077a:	9301      	str	r3, [sp, #4]
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	9300      	str	r3, [sp, #0]
 8000780:	2301      	movs	r3, #1
 8000782:	21b6      	movs	r1, #182	; 0xb6
 8000784:	f002 fc4c 	bl	8003020 <HAL_I2C_Mem_Read>
 8000788:	4603      	mov	r3, r0
 800078a:	75fb      	strb	r3, [r7, #23]
	if(ret != HAL_OK){
 800078c:	7dfb      	ldrb	r3, [r7, #23]
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <many_reads+0x42>
		return ret;			//error check
 8000792:	7dfb      	ldrb	r3, [r7, #23]
 8000794:	e000      	b.n	8000798 <many_reads+0x44>
	}

	return HAL_OK;
 8000796:	2300      	movs	r3, #0
}
 8000798:	4618      	mov	r0, r3
 800079a:	3718      	adds	r7, #24
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}

080007a0 <APPD_EnableCPU2>:
/* USER CODE END APPD_Init */
  return;
}

void APPD_EnableCPU2( void )
{
 80007a0:	b5b0      	push	{r4, r5, r7, lr}
 80007a2:	b088      	sub	sp, #32
 80007a4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 80007a6:	4b0b      	ldr	r3, [pc, #44]	; (80007d4 <APPD_EnableCPU2+0x34>)
 80007a8:	1d3c      	adds	r4, r7, #4
 80007aa:	461d      	mov	r5, r3
 80007ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007b0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80007b4:	c403      	stmia	r4!, {r0, r1}
 80007b6:	8022      	strh	r2, [r4, #0]
 80007b8:	3402      	adds	r4, #2
 80007ba:	0c13      	lsrs	r3, r2, #16
 80007bc:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 80007be:	f007 fe8d 	bl	80084dc <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 80007c2:	1d3b      	adds	r3, r7, #4
 80007c4:	4618      	mov	r0, r3
 80007c6:	f007 f928 	bl	8007a1a <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 80007ca:	bf00      	nop
}
 80007cc:	3720      	adds	r7, #32
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bdb0      	pop	{r4, r5, r7, pc}
 80007d2:	bf00      	nop
 80007d4:	0800a89c 	.word	0x0800a89c

080007d8 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 80007d8:	b480      	push	{r7}
 80007da:	b083      	sub	sp, #12
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 80007e0:	4b07      	ldr	r3, [pc, #28]	; (8000800 <LL_C2_PWR_SetPowerMode+0x28>)
 80007e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80007e6:	f023 0207 	bic.w	r2, r3, #7
 80007ea:	4905      	ldr	r1, [pc, #20]	; (8000800 <LL_C2_PWR_SetPowerMode+0x28>)
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	4313      	orrs	r3, r2
 80007f0:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80007f4:	bf00      	nop
 80007f6:	370c      	adds	r7, #12
 80007f8:	46bd      	mov	sp, r7
 80007fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fe:	4770      	bx	lr
 8000800:	58000400 	.word	0x58000400

08000804 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8000804:	b480      	push	{r7}
 8000806:	b083      	sub	sp, #12
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 800080c:	4b06      	ldr	r3, [pc, #24]	; (8000828 <LL_EXTI_EnableIT_32_63+0x24>)
 800080e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8000812:	4905      	ldr	r1, [pc, #20]	; (8000828 <LL_EXTI_EnableIT_32_63+0x24>)
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	4313      	orrs	r3, r2
 8000818:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800081c:	bf00      	nop
 800081e:	370c      	adds	r7, #12
 8000820:	46bd      	mov	sp, r7
 8000822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000826:	4770      	bx	lr
 8000828:	58000800 	.word	0x58000800

0800082c <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 800082c:	b480      	push	{r7}
 800082e:	b083      	sub	sp, #12
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8000834:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000838:	4a0a      	ldr	r2, [pc, #40]	; (8000864 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 800083a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 800083e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000842:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000846:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	021b      	lsls	r3, r3, #8
 800084e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000852:	4313      	orrs	r3, r2
 8000854:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 8000858:	bf00      	nop
 800085a:	370c      	adds	r7, #12
 800085c:	46bd      	mov	sp, r7
 800085e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000862:	4770      	bx	lr
 8000864:	cafecafe 	.word	0xcafecafe

08000868 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8000868:	b480      	push	{r7}
 800086a:	b083      	sub	sp, #12
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000870:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000874:	689b      	ldr	r3, [r3, #8]
 8000876:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800087a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	4313      	orrs	r3, r2
 8000882:	608b      	str	r3, [r1, #8]
}
 8000884:	bf00      	nop
 8000886:	370c      	adds	r7, #12
 8000888:	46bd      	mov	sp, r7
 800088a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088e:	4770      	bx	lr

08000890 <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000894:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000898:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800089c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80008a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80008a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80008a8:	bf00      	nop
 80008aa:	46bd      	mov	sp, r7
 80008ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b0:	4770      	bx	lr

080008b2 <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 80008b2:	b480      	push	{r7}
 80008b4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80008b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80008be:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80008c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80008c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80008ca:	bf00      	nop
 80008cc:	46bd      	mov	sp, r7
 80008ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d2:	4770      	bx	lr

080008d4 <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 80008d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80008e0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80008e4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80008e8:	d101      	bne.n	80008ee <LL_RCC_IsActiveFlag_PINRST+0x1a>
 80008ea:	2301      	movs	r3, #1
 80008ec:	e000      	b.n	80008f0 <LL_RCC_IsActiveFlag_PINRST+0x1c>
 80008ee:	2300      	movs	r3, #0
}
 80008f0:	4618      	mov	r0, r3
 80008f2:	46bd      	mov	sp, r7
 80008f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f8:	4770      	bx	lr

080008fa <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 80008fa:	b480      	push	{r7}
 80008fc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 80008fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000902:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000906:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800090a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800090e:	d101      	bne.n	8000914 <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 8000910:	2301      	movs	r3, #1
 8000912:	e000      	b.n	8000916 <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 8000914:	2300      	movs	r3, #0
}
 8000916:	4618      	mov	r0, r3
 8000918:	46bd      	mov	sp, r7
 800091a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091e:	4770      	bx	lr

08000920 <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8000920:	b480      	push	{r7}
 8000922:	b085      	sub	sp, #20
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 8000928:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800092c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800092e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	4313      	orrs	r3, r2
 8000936:	650b      	str	r3, [r1, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8000938:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800093c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	4013      	ands	r3, r2
 8000942:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000944:	68fb      	ldr	r3, [r7, #12]
}
 8000946:	bf00      	nop
 8000948:	3714      	adds	r7, #20
 800094a:	46bd      	mov	sp, r7
 800094c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000950:	4770      	bx	lr
	...

08000954 <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 8000958:	4b04      	ldr	r3, [pc, #16]	; (800096c <LL_DBGMCU_GetDeviceID+0x18>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8000960:	4618      	mov	r0, r3
 8000962:	46bd      	mov	sp, r7
 8000964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000968:	4770      	bx	lr
 800096a:	bf00      	nop
 800096c:	e0042000 	.word	0xe0042000

08000970 <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 8000974:	4b04      	ldr	r3, [pc, #16]	; (8000988 <LL_DBGMCU_GetRevisionID+0x18>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	0c1b      	lsrs	r3, r3, #16
 800097a:	b29b      	uxth	r3, r3
}
 800097c:	4618      	mov	r0, r3
 800097e:	46bd      	mov	sp, r7
 8000980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop
 8000988:	e0042000 	.word	0xe0042000

0800098c <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800098c:	b480      	push	{r7}
 800098e:	b083      	sub	sp, #12
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
 8000994:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	685a      	ldr	r2, [r3, #4]
 800099a:	683b      	ldr	r3, [r7, #0]
 800099c:	041b      	lsls	r3, r3, #16
 800099e:	431a      	orrs	r2, r3
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	605a      	str	r2, [r3, #4]
}
 80009a4:	bf00      	nop
 80009a6:	370c      	adds	r7, #12
 80009a8:	46bd      	mov	sp, r7
 80009aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ae:	4770      	bx	lr

080009b0 <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80009b0:	b480      	push	{r7}
 80009b2:	b083      	sub	sp, #12
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
 80009b8:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	685a      	ldr	r2, [r3, #4]
 80009be:	683b      	ldr	r3, [r7, #0]
 80009c0:	431a      	orrs	r2, r3
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	605a      	str	r2, [r3, #4]
}
 80009c6:	bf00      	nop
 80009c8:	370c      	adds	r7, #12
 80009ca:	46bd      	mov	sp, r7
 80009cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d0:	4770      	bx	lr

080009d2 <LL_C2_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80009d2:	b480      	push	{r7}
 80009d4:	b083      	sub	sp, #12
 80009d6:	af00      	add	r7, sp, #0
 80009d8:	6078      	str	r0, [r7, #4]
 80009da:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	695a      	ldr	r2, [r3, #20]
 80009e0:	683b      	ldr	r3, [r7, #0]
 80009e2:	041b      	lsls	r3, r3, #16
 80009e4:	431a      	orrs	r2, r3
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	615a      	str	r2, [r3, #20]
}
 80009ea:	bf00      	nop
 80009ec:	370c      	adds	r7, #12
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr

080009f6 <LL_C2_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80009f6:	b480      	push	{r7}
 80009f8:	b083      	sub	sp, #12
 80009fa:	af00      	add	r7, sp, #0
 80009fc:	6078      	str	r0, [r7, #4]
 80009fe:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	695a      	ldr	r2, [r3, #20]
 8000a04:	683b      	ldr	r3, [r7, #0]
 8000a06:	431a      	orrs	r2, r3
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	615a      	str	r2, [r3, #20]
}
 8000a0c:	bf00      	nop
 8000a0e:	370c      	adds	r7, #12
 8000a10:	46bd      	mov	sp, r7
 8000a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a16:	4770      	bx	lr

08000a18 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	b083      	sub	sp, #12
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
 8000a20:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	683a      	ldr	r2, [r7, #0]
 8000a26:	609a      	str	r2, [r3, #8]
}
 8000a28:	bf00      	nop
 8000a2a:	370c      	adds	r7, #12
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a32:	4770      	bx	lr

08000a34 <LL_C2_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000a34:	b480      	push	{r7}
 8000a36:	b083      	sub	sp, #12
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
 8000a3c:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	683a      	ldr	r2, [r7, #0]
 8000a42:	619a      	str	r2, [r3, #24]
}
 8000a44:	bf00      	nop
 8000a46:	370c      	adds	r7, #12
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4e:	4770      	bx	lr

08000a50 <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8000a54:	4b05      	ldr	r3, [pc, #20]	; (8000a6c <LL_LPM_EnableSleep+0x1c>)
 8000a56:	691b      	ldr	r3, [r3, #16]
 8000a58:	4a04      	ldr	r2, [pc, #16]	; (8000a6c <LL_LPM_EnableSleep+0x1c>)
 8000a5a:	f023 0304 	bic.w	r3, r3, #4
 8000a5e:	6113      	str	r3, [r2, #16]
}
 8000a60:	bf00      	nop
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop
 8000a6c:	e000ed00 	.word	0xe000ed00

08000a70 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8000a70:	b480      	push	{r7}
 8000a72:	b083      	sub	sp, #12
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	22ff      	movs	r2, #255	; 0xff
 8000a7c:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000a7e:	bf00      	nop
 8000a80:	370c      	adds	r7, #12
 8000a82:	46bd      	mov	sp, r7
 8000a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a88:	4770      	bx	lr

08000a8a <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 8000a8a:	b480      	push	{r7}
 8000a8c:	b083      	sub	sp, #12
 8000a8e:	af00      	add	r7, sp, #0
 8000a90:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	22ca      	movs	r2, #202	; 0xca
 8000a96:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	2253      	movs	r2, #83	; 0x53
 8000a9c:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000a9e:	bf00      	nop
 8000aa0:	370c      	adds	r7, #12
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa8:	4770      	bx	lr

08000aaa <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 8000aaa:	b480      	push	{r7}
 8000aac:	b083      	sub	sp, #12
 8000aae:	af00      	add	r7, sp, #0
 8000ab0:	6078      	str	r0, [r7, #4]
 8000ab2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	689b      	ldr	r3, [r3, #8]
 8000ab8:	f023 0207 	bic.w	r2, r3, #7
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	431a      	orrs	r2, r3
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	609a      	str	r2, [r3, #8]
}
 8000ac4:	bf00      	nop
 8000ac6:	370c      	adds	r7, #12
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ace:	4770      	bx	lr

08000ad0 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8000ad4:	4b04      	ldr	r3, [pc, #16]	; (8000ae8 <MX_APPE_Config+0x18>)
 8000ad6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000ada:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 8000adc:	f000 f824 	bl	8000b28 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 8000ae0:	f000 f864 	bl	8000bac <Config_HSE>

  return;
 8000ae4:	bf00      	nop
}
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	58004000 	.word	0x58004000

08000aec <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 8000af0:	f000 f870 	bl	8000bd4 <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 8000af4:	f000 f888 	bl	8000c08 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8000af8:	4903      	ldr	r1, [pc, #12]	; (8000b08 <MX_APPE_Init+0x1c>)
 8000afa:	2000      	movs	r0, #0
 8000afc:	f000 fdd4 	bl	80016a8 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8000b00:	f000 f890 	bl	8000c24 <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 8000b04:	bf00      	nop
}
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	20000aa8 	.word	0x20000aa8

08000b0c <Init_Smps>:

void Init_Smps(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 8000b10:	bf00      	nop
}
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr

08000b1a <Init_Exti>:

void Init_Exti(void)
{
 8000b1a:	b580      	push	{r7, lr}
 8000b1c:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 8000b1e:	2050      	movs	r0, #80	; 0x50
 8000b20:	f7ff fe70 	bl	8000804 <LL_EXTI_EnableIT_32_63>

  return;
 8000b24:	bf00      	nop
}
 8000b26:	bd80      	pop	{r7, pc}

08000b28 <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
#if (CFG_HW_RESET_BY_FW == 1)
  Reset_BackupDomain();
 8000b2c:	f000 f804 	bl	8000b38 <Reset_BackupDomain>

  Reset_IPCC();
 8000b30:	f000 f81a 	bl	8000b68 <Reset_IPCC>
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 8000b34:	bf00      	nop
}
 8000b36:	bd80      	pop	{r7, pc}

08000b38 <Reset_BackupDomain>:

#if (CFG_HW_RESET_BY_FW == 1)
static void Reset_BackupDomain(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
  if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 8000b3c:	f7ff feca 	bl	80008d4 <LL_RCC_IsActiveFlag_PINRST>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d00d      	beq.n	8000b62 <Reset_BackupDomain+0x2a>
 8000b46:	f7ff fed8 	bl	80008fa <LL_RCC_IsActiveFlag_SFTRST>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d108      	bne.n	8000b62 <Reset_BackupDomain+0x2a>
  {
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 8000b50:	f002 ff70 	bl	8003a34 <HAL_PWR_EnableBkUpAccess>

    /**
     *  Write twice the value to flush the APB-AHB bridge
     *  This bit shall be written in the register before writing the next one
     */
    HAL_PWR_EnableBkUpAccess();
 8000b54:	f002 ff6e 	bl	8003a34 <HAL_PWR_EnableBkUpAccess>

    __HAL_RCC_BACKUPRESET_FORCE();
 8000b58:	f7ff fe9a 	bl	8000890 <LL_RCC_ForceBackupDomainReset>
    __HAL_RCC_BACKUPRESET_RELEASE();
 8000b5c:	f7ff fea9 	bl	80008b2 <LL_RCC_ReleaseBackupDomainReset>
  }

  return;
 8000b60:	bf00      	nop
 8000b62:	bf00      	nop
}
 8000b64:	bd80      	pop	{r7, pc}
	...

08000b68 <Reset_IPCC>:

static void Reset_IPCC(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 8000b6c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000b70:	f7ff fed6 	bl	8000920 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_ClearFlag_CHx(
 8000b74:	213f      	movs	r1, #63	; 0x3f
 8000b76:	480c      	ldr	r0, [pc, #48]	; (8000ba8 <Reset_IPCC+0x40>)
 8000b78:	f7ff ff4e 	bl	8000a18 <LL_C1_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_ClearFlag_CHx(
 8000b7c:	213f      	movs	r1, #63	; 0x3f
 8000b7e:	480a      	ldr	r0, [pc, #40]	; (8000ba8 <Reset_IPCC+0x40>)
 8000b80:	f7ff ff58 	bl	8000a34 <LL_C2_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableTransmitChannel(
 8000b84:	213f      	movs	r1, #63	; 0x3f
 8000b86:	4808      	ldr	r0, [pc, #32]	; (8000ba8 <Reset_IPCC+0x40>)
 8000b88:	f7ff ff00 	bl	800098c <LL_C1_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableTransmitChannel(
 8000b8c:	213f      	movs	r1, #63	; 0x3f
 8000b8e:	4806      	ldr	r0, [pc, #24]	; (8000ba8 <Reset_IPCC+0x40>)
 8000b90:	f7ff ff1f 	bl	80009d2 <LL_C2_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableReceiveChannel(
 8000b94:	213f      	movs	r1, #63	; 0x3f
 8000b96:	4804      	ldr	r0, [pc, #16]	; (8000ba8 <Reset_IPCC+0x40>)
 8000b98:	f7ff ff0a 	bl	80009b0 <LL_C1_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableReceiveChannel(
 8000b9c:	213f      	movs	r1, #63	; 0x3f
 8000b9e:	4802      	ldr	r0, [pc, #8]	; (8000ba8 <Reset_IPCC+0x40>)
 8000ba0:	f7ff ff29 	bl	80009f6 <LL_C2_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  return;
 8000ba4:	bf00      	nop
}
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	58000c00 	.word	0x58000c00

08000bac <Config_HSE>:
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8000bb2:	2000      	movs	r0, #0
 8000bb4:	f007 fd1e 	bl	80085f4 <OTP_Read>
 8000bb8:	6078      	str	r0, [r7, #4]
  if (p_otp)
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d005      	beq.n	8000bcc <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	799b      	ldrb	r3, [r3, #6]
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f7ff fe31 	bl	800082c <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 8000bca:	bf00      	nop
 8000bcc:	bf00      	nop
}
 8000bce:	3708      	adds	r7, #8
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}

08000bd4 <System_Init>:

static void System_Init(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
  Init_Smps();
 8000bd8:	f7ff ff98 	bl	8000b0c <Init_Smps>

  Init_Exti();
 8000bdc:	f7ff ff9d 	bl	8000b1a <Init_Exti>

  Init_Rtc();
 8000be0:	f000 f802 	bl	8000be8 <Init_Rtc>

  return;
 8000be4:	bf00      	nop
}
 8000be6:	bd80      	pop	{r7, pc}

08000be8 <Init_Rtc>:

static void Init_Rtc(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 8000bec:	4805      	ldr	r0, [pc, #20]	; (8000c04 <Init_Rtc+0x1c>)
 8000bee:	f7ff ff4c 	bl	8000a8a <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 8000bf2:	2100      	movs	r1, #0
 8000bf4:	4803      	ldr	r0, [pc, #12]	; (8000c04 <Init_Rtc+0x1c>)
 8000bf6:	f7ff ff58 	bl	8000aaa <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 8000bfa:	4802      	ldr	r0, [pc, #8]	; (8000c04 <Init_Rtc+0x1c>)
 8000bfc:	f7ff ff38 	bl	8000a70 <LL_RTC_EnableWriteProtection>

  return;
 8000c00:	bf00      	nop
}
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	40002800 	.word	0x40002800

08000c08 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8000c0c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000c10:	f7ff fe2a 	bl	8000868 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8000c14:	f008 fbe8 	bl	80093e8 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8000c18:	2004      	movs	r0, #4
 8000c1a:	f7ff fddd 	bl	80007d8 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 8000c1e:	bf00      	nop
}
 8000c20:	bd80      	pop	{r7, pc}
	...

08000c24 <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b088      	sub	sp, #32
 8000c28:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 8000c2a:	f007 faa1 	bl	8008170 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 8000c2e:	4a11      	ldr	r2, [pc, #68]	; (8000c74 <appe_Tl_Init+0x50>)
 8000c30:	2100      	movs	r1, #0
 8000c32:	2004      	movs	r0, #4
 8000c34:	f008 fd16 	bl	8009664 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8000c38:	4b0f      	ldr	r3, [pc, #60]	; (8000c78 <appe_Tl_Init+0x54>)
 8000c3a:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8000c3c:	4b0f      	ldr	r3, [pc, #60]	; (8000c7c <appe_Tl_Init+0x58>)
 8000c3e:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8000c40:	463b      	mov	r3, r7
 8000c42:	4619      	mov	r1, r3
 8000c44:	480e      	ldr	r0, [pc, #56]	; (8000c80 <appe_Tl_Init+0x5c>)
 8000c46:	f007 f959 	bl	8007efc <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 8000c4a:	4b0e      	ldr	r3, [pc, #56]	; (8000c84 <appe_Tl_Init+0x60>)
 8000c4c:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8000c4e:	4b0e      	ldr	r3, [pc, #56]	; (8000c88 <appe_Tl_Init+0x64>)
 8000c50:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8000c52:	4b0e      	ldr	r3, [pc, #56]	; (8000c8c <appe_Tl_Init+0x68>)
 8000c54:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8000c56:	f240 533c 	movw	r3, #1340	; 0x53c
 8000c5a:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 8000c5c:	f107 0308 	add.w	r3, r7, #8
 8000c60:	4618      	mov	r0, r3
 8000c62:	f007 fbc7 	bl	80083f4 <TL_MM_Init>

  TL_Enable();
 8000c66:	f007 fa7d 	bl	8008164 <TL_Enable>

  return;
 8000c6a:	bf00      	nop
}
 8000c6c:	3720      	adds	r7, #32
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	08007f35 	.word	0x08007f35
 8000c78:	200005dc 	.word	0x200005dc
 8000c7c:	08000c91 	.word	0x08000c91
 8000c80:	08000ca9 	.word	0x08000ca9
 8000c84:	200007f4 	.word	0x200007f4
 8000c88:	200006e8 	.word	0x200006e8
 8000c8c:	200000a0 	.word	0x200000a0

08000c90 <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 8000c90:	b480      	push	{r7}
 8000c92:	b083      	sub	sp, #12
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	4603      	mov	r3, r0
 8000c98:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 8000c9a:	bf00      	nop
}
 8000c9c:	370c      	adds	r7, #12
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr
	...

08000ca8 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b088      	sub	sp, #32
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	685b      	ldr	r3, [r3, #4]
 8000cb4:	330b      	adds	r3, #11
 8000cb6:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 8000cb8:	69fb      	ldr	r3, [r7, #28]
 8000cba:	881b      	ldrh	r3, [r3, #0]
 8000cbc:	b29b      	uxth	r3, r3
 8000cbe:	f5a3 4312 	sub.w	r3, r3, #37376	; 0x9200
 8000cc2:	2b07      	cmp	r3, #7
 8000cc4:	d81f      	bhi.n	8000d06 <APPE_SysUserEvtRx+0x5e>
 8000cc6:	a201      	add	r2, pc, #4	; (adr r2, 8000ccc <APPE_SysUserEvtRx+0x24>)
 8000cc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ccc:	08000ced 	.word	0x08000ced
 8000cd0:	08000cff 	.word	0x08000cff
 8000cd4:	08000d07 	.word	0x08000d07
 8000cd8:	08000d07 	.word	0x08000d07
 8000cdc:	08000d07 	.word	0x08000d07
 8000ce0:	08000d07 	.word	0x08000d07
 8000ce4:	08000d07 	.word	0x08000d07
 8000ce8:	08000d07 	.word	0x08000d07
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 8000cec:	f107 030c 	add.w	r3, r7, #12
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f006 febf 	bl	8007a74 <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
    APPE_SysEvtReadyProcessing(pPayload);
 8000cf6:	6878      	ldr	r0, [r7, #4]
 8000cf8:	f000 f81b 	bl	8000d32 <APPE_SysEvtReadyProcessing>
    break;
 8000cfc:	e004      	b.n	8000d08 <APPE_SysUserEvtRx+0x60>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
    APPE_SysEvtError(pPayload);
 8000cfe:	6878      	ldr	r0, [r7, #4]
 8000d00:	f000 f806 	bl	8000d10 <APPE_SysEvtError>
    break;
 8000d04:	e000      	b.n	8000d08 <APPE_SysUserEvtRx+0x60>
  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
    break;

  default:
    break;
 8000d06:	bf00      	nop
  }

  return;
 8000d08:	bf00      	nop
}
 8000d0a:	3720      	adds	r7, #32
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}

08000d10 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b085      	sub	sp, #20
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	685b      	ldr	r3, [r3, #4]
 8000d1c:	330b      	adds	r3, #11
 8000d1e:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	3302      	adds	r3, #2
 8000d24:	60bb      	str	r3, [r7, #8]
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 8000d26:	bf00      	nop
}
 8000d28:	3714      	adds	r7, #20
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr

08000d32 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 8000d32:	b580      	push	{r7, lr}
 8000d34:	b08a      	sub	sp, #40	; 0x28
 8000d36:	af00      	add	r7, sp, #0
 8000d38:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 8000d3a:	f107 0308 	add.w	r3, r7, #8
 8000d3e:	2200      	movs	r2, #0
 8000d40:	601a      	str	r2, [r3, #0]
 8000d42:	605a      	str	r2, [r3, #4]
 8000d44:	609a      	str	r2, [r3, #8]
 8000d46:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t DeviceID=0;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	685b      	ldr	r3, [r3, #4]
 8000d54:	330b      	adds	r3, #11
 8000d56:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 8000d58:	69fb      	ldr	r3, [r7, #28]
 8000d5a:	3302      	adds	r3, #2
 8000d5c:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 8000d5e:	69bb      	ldr	r3, [r7, #24]
 8000d60:	781b      	ldrb	r3, [r3, #0]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d11d      	bne.n	8000da2 <APPE_SysEvtReadyProcessing+0x70>
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");

    /* Traces channel initialization */
    APPD_EnableCPU2();
 8000d66:	f7ff fd1b 	bl	80007a0 <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 8000d6a:	230f      	movs	r3, #15
 8000d6c:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 8000d6e:	237f      	movs	r3, #127	; 0x7f
 8000d70:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 8000d72:	f7ff fdfd 	bl	8000970 <LL_DBGMCU_GetRevisionID>
 8000d76:	6278      	str	r0, [r7, #36]	; 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);

    config_param.RevisionID = (uint16_t)RevisionID;
 8000d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d7a:	b29b      	uxth	r3, r3
 8000d7c:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 8000d7e:	f7ff fde9 	bl	8000954 <LL_DBGMCU_GetDeviceID>
 8000d82:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
    config_param.DeviceID = (uint16_t)DeviceID;
 8000d84:	6a3b      	ldr	r3, [r7, #32]
 8000d86:	b29b      	uxth	r3, r3
 8000d88:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 8000d8a:	f107 0308 	add.w	r3, r7, #8
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f006 fe5a 	bl	8007a48 <SHCI_C2_Config>

    APP_BLE_Init();
 8000d94:	f007 fd38 	bl	8008808 <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8000d98:	2100      	movs	r1, #0
 8000d9a:	2001      	movs	r0, #1
 8000d9c:	f008 fb36 	bl	800940c <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 8000da0:	e007      	b.n	8000db2 <APPE_SysEvtReadyProcessing+0x80>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 8000da2:	69bb      	ldr	r3, [r7, #24]
 8000da4:	781b      	ldrb	r3, [r3, #0]
 8000da6:	2b01      	cmp	r3, #1
 8000da8:	d103      	bne.n	8000db2 <APPE_SysEvtReadyProcessing+0x80>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	2200      	movs	r2, #0
 8000dae:	701a      	strb	r2, [r3, #0]
  return;
 8000db0:	bf00      	nop
 8000db2:	bf00      	nop
}
 8000db4:	3728      	adds	r7, #40	; 0x28
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}

08000dba <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 8000dba:	b580      	push	{r7, lr}
 8000dbc:	b084      	sub	sp, #16
 8000dbe:	af00      	add	r7, sp, #0
 8000dc0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000dc2:	f001 fc1f 	bl	8002604 <HAL_GetTick>
 8000dc6:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000dd2:	d00a      	beq.n	8000dea <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 8000dd4:	f001 fc2e 	bl	8002634 <HAL_GetTickFreq>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	461a      	mov	r2, r3
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	4413      	add	r3, r2
 8000de0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000de2:	e002      	b.n	8000dea <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 8000de4:	f7ff fe34 	bl	8000a50 <LL_LPM_EnableSleep>
     */
  #if defined (__CC_ARM)
    __force_stores();
  #endif /* __CC_ARM */

    __WFI();
 8000de8:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 8000dea:	f001 fc0b 	bl	8002604 <HAL_GetTick>
 8000dee:	4602      	mov	r2, r0
 8000df0:	68bb      	ldr	r3, [r7, #8]
 8000df2:	1ad3      	subs	r3, r2, r3
 8000df4:	68fa      	ldr	r2, [r7, #12]
 8000df6:	429a      	cmp	r2, r3
 8000df8:	d8f4      	bhi.n	8000de4 <HAL_Delay+0x2a>
  }
}
 8000dfa:	bf00      	nop
 8000dfc:	bf00      	nop
 8000dfe:	3710      	adds	r7, #16
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}

08000e04 <MX_APPE_Process>:

void MX_APPE_Process(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8000e08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e0c:	f008 fb2e 	bl	800946c <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 8000e10:	bf00      	nop
 8000e12:	bd80      	pop	{r7, pc}

08000e14 <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 8000e18:	bf00      	nop
}
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr

08000e22 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 8000e22:	b580      	push	{r7, lr}
 8000e24:	b082      	sub	sp, #8
 8000e26:	af00      	add	r7, sp, #0
 8000e28:	6078      	str	r0, [r7, #4]
 8000e2a:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8000e2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e30:	f008 fb1c 	bl	800946c <UTIL_SEQ_Run>

  return;
 8000e34:	bf00      	nop
}
 8000e36:	3708      	adds	r7, #8
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}

08000e3c <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8000e44:	2100      	movs	r1, #0
 8000e46:	2004      	movs	r0, #4
 8000e48:	f008 fc2e 	bl	80096a8 <UTIL_SEQ_SetTask>
  return;
 8000e4c:	bf00      	nop
}
 8000e4e:	3708      	adds	r7, #8
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}

08000e54 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8000e5c:	2002      	movs	r0, #2
 8000e5e:	f008 fc8f 	bl	8009780 <UTIL_SEQ_SetEvt>
  return;
 8000e62:	bf00      	nop
}
 8000e64:	3708      	adds	r7, #8
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}

08000e6a <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 8000e6a:	b580      	push	{r7, lr}
 8000e6c:	b082      	sub	sp, #8
 8000e6e:	af00      	add	r7, sp, #0
 8000e70:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8000e72:	2002      	movs	r0, #2
 8000e74:	f008 fca4 	bl	80097c0 <UTIL_SEQ_WaitEvt>
  return;
 8000e78:	bf00      	nop
}
 8000e7a:	3708      	adds	r7, #8
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}

08000e80 <LL_EXTI_EnableIT_0_31>:
{
 8000e80:	b480      	push	{r7}
 8000e82:	b083      	sub	sp, #12
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8000e88:	4b06      	ldr	r3, [pc, #24]	; (8000ea4 <LL_EXTI_EnableIT_0_31+0x24>)
 8000e8a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8000e8e:	4905      	ldr	r1, [pc, #20]	; (8000ea4 <LL_EXTI_EnableIT_0_31+0x24>)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	4313      	orrs	r3, r2
 8000e94:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8000e98:	bf00      	nop
 8000e9a:	370c      	adds	r7, #12
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr
 8000ea4:	58000800 	.word	0x58000800

08000ea8 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b083      	sub	sp, #12
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8000eb0:	4b05      	ldr	r3, [pc, #20]	; (8000ec8 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000eb2:	681a      	ldr	r2, [r3, #0]
 8000eb4:	4904      	ldr	r1, [pc, #16]	; (8000ec8 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	4313      	orrs	r3, r2
 8000eba:	600b      	str	r3, [r1, #0]

}
 8000ebc:	bf00      	nop
 8000ebe:	370c      	adds	r7, #12
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec6:	4770      	bx	lr
 8000ec8:	58000800 	.word	0x58000800

08000ecc <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b083      	sub	sp, #12
 8000ed0:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000ed2:	4b0d      	ldr	r3, [pc, #52]	; (8000f08 <ReadRtcSsrValue+0x3c>)
 8000ed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ed6:	b29b      	uxth	r3, r3
 8000ed8:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000eda:	4b0b      	ldr	r3, [pc, #44]	; (8000f08 <ReadRtcSsrValue+0x3c>)
 8000edc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ede:	b29b      	uxth	r3, r3
 8000ee0:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 8000ee2:	e005      	b.n	8000ef0 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000ee8:	4b07      	ldr	r3, [pc, #28]	; (8000f08 <ReadRtcSsrValue+0x3c>)
 8000eea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000eec:	b29b      	uxth	r3, r3
 8000eee:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8000ef0:	687a      	ldr	r2, [r7, #4]
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	429a      	cmp	r2, r3
 8000ef6:	d1f5      	bne.n	8000ee4 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8000ef8:	683b      	ldr	r3, [r7, #0]
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	370c      	adds	r7, #12
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	40002800 	.word	0x40002800

08000f0c <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b085      	sub	sp, #20
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	4603      	mov	r3, r0
 8000f14:	460a      	mov	r2, r1
 8000f16:	71fb      	strb	r3, [r7, #7]
 8000f18:	4613      	mov	r3, r2
 8000f1a:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8000f1c:	79ba      	ldrb	r2, [r7, #6]
 8000f1e:	491d      	ldr	r1, [pc, #116]	; (8000f94 <LinkTimerAfter+0x88>)
 8000f20:	4613      	mov	r3, r2
 8000f22:	005b      	lsls	r3, r3, #1
 8000f24:	4413      	add	r3, r2
 8000f26:	00db      	lsls	r3, r3, #3
 8000f28:	440b      	add	r3, r1
 8000f2a:	3315      	adds	r3, #21
 8000f2c:	781b      	ldrb	r3, [r3, #0]
 8000f2e:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000f30:	7bfb      	ldrb	r3, [r7, #15]
 8000f32:	2b06      	cmp	r3, #6
 8000f34:	d009      	beq.n	8000f4a <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8000f36:	7bfa      	ldrb	r2, [r7, #15]
 8000f38:	4916      	ldr	r1, [pc, #88]	; (8000f94 <LinkTimerAfter+0x88>)
 8000f3a:	4613      	mov	r3, r2
 8000f3c:	005b      	lsls	r3, r3, #1
 8000f3e:	4413      	add	r3, r2
 8000f40:	00db      	lsls	r3, r3, #3
 8000f42:	440b      	add	r3, r1
 8000f44:	3314      	adds	r3, #20
 8000f46:	79fa      	ldrb	r2, [r7, #7]
 8000f48:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8000f4a:	79fa      	ldrb	r2, [r7, #7]
 8000f4c:	4911      	ldr	r1, [pc, #68]	; (8000f94 <LinkTimerAfter+0x88>)
 8000f4e:	4613      	mov	r3, r2
 8000f50:	005b      	lsls	r3, r3, #1
 8000f52:	4413      	add	r3, r2
 8000f54:	00db      	lsls	r3, r3, #3
 8000f56:	440b      	add	r3, r1
 8000f58:	3315      	adds	r3, #21
 8000f5a:	7bfa      	ldrb	r2, [r7, #15]
 8000f5c:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8000f5e:	79fa      	ldrb	r2, [r7, #7]
 8000f60:	490c      	ldr	r1, [pc, #48]	; (8000f94 <LinkTimerAfter+0x88>)
 8000f62:	4613      	mov	r3, r2
 8000f64:	005b      	lsls	r3, r3, #1
 8000f66:	4413      	add	r3, r2
 8000f68:	00db      	lsls	r3, r3, #3
 8000f6a:	440b      	add	r3, r1
 8000f6c:	3314      	adds	r3, #20
 8000f6e:	79ba      	ldrb	r2, [r7, #6]
 8000f70:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8000f72:	79ba      	ldrb	r2, [r7, #6]
 8000f74:	4907      	ldr	r1, [pc, #28]	; (8000f94 <LinkTimerAfter+0x88>)
 8000f76:	4613      	mov	r3, r2
 8000f78:	005b      	lsls	r3, r3, #1
 8000f7a:	4413      	add	r3, r2
 8000f7c:	00db      	lsls	r3, r3, #3
 8000f7e:	440b      	add	r3, r1
 8000f80:	3315      	adds	r3, #21
 8000f82:	79fa      	ldrb	r2, [r7, #7]
 8000f84:	701a      	strb	r2, [r3, #0]

  return;
 8000f86:	bf00      	nop
}
 8000f88:	3714      	adds	r7, #20
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop
 8000f94:	20000978 	.word	0x20000978

08000f98 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b085      	sub	sp, #20
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	460a      	mov	r2, r1
 8000fa2:	71fb      	strb	r3, [r7, #7]
 8000fa4:	4613      	mov	r3, r2
 8000fa6:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8000fa8:	4b29      	ldr	r3, [pc, #164]	; (8001050 <LinkTimerBefore+0xb8>)
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	b2db      	uxtb	r3, r3
 8000fae:	79ba      	ldrb	r2, [r7, #6]
 8000fb0:	429a      	cmp	r2, r3
 8000fb2:	d032      	beq.n	800101a <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8000fb4:	79ba      	ldrb	r2, [r7, #6]
 8000fb6:	4927      	ldr	r1, [pc, #156]	; (8001054 <LinkTimerBefore+0xbc>)
 8000fb8:	4613      	mov	r3, r2
 8000fba:	005b      	lsls	r3, r3, #1
 8000fbc:	4413      	add	r3, r2
 8000fbe:	00db      	lsls	r3, r3, #3
 8000fc0:	440b      	add	r3, r1
 8000fc2:	3314      	adds	r3, #20
 8000fc4:	781b      	ldrb	r3, [r3, #0]
 8000fc6:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8000fc8:	7bfa      	ldrb	r2, [r7, #15]
 8000fca:	4922      	ldr	r1, [pc, #136]	; (8001054 <LinkTimerBefore+0xbc>)
 8000fcc:	4613      	mov	r3, r2
 8000fce:	005b      	lsls	r3, r3, #1
 8000fd0:	4413      	add	r3, r2
 8000fd2:	00db      	lsls	r3, r3, #3
 8000fd4:	440b      	add	r3, r1
 8000fd6:	3315      	adds	r3, #21
 8000fd8:	79fa      	ldrb	r2, [r7, #7]
 8000fda:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8000fdc:	79fa      	ldrb	r2, [r7, #7]
 8000fde:	491d      	ldr	r1, [pc, #116]	; (8001054 <LinkTimerBefore+0xbc>)
 8000fe0:	4613      	mov	r3, r2
 8000fe2:	005b      	lsls	r3, r3, #1
 8000fe4:	4413      	add	r3, r2
 8000fe6:	00db      	lsls	r3, r3, #3
 8000fe8:	440b      	add	r3, r1
 8000fea:	3315      	adds	r3, #21
 8000fec:	79ba      	ldrb	r2, [r7, #6]
 8000fee:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8000ff0:	79fa      	ldrb	r2, [r7, #7]
 8000ff2:	4918      	ldr	r1, [pc, #96]	; (8001054 <LinkTimerBefore+0xbc>)
 8000ff4:	4613      	mov	r3, r2
 8000ff6:	005b      	lsls	r3, r3, #1
 8000ff8:	4413      	add	r3, r2
 8000ffa:	00db      	lsls	r3, r3, #3
 8000ffc:	440b      	add	r3, r1
 8000ffe:	3314      	adds	r3, #20
 8001000:	7bfa      	ldrb	r2, [r7, #15]
 8001002:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8001004:	79ba      	ldrb	r2, [r7, #6]
 8001006:	4913      	ldr	r1, [pc, #76]	; (8001054 <LinkTimerBefore+0xbc>)
 8001008:	4613      	mov	r3, r2
 800100a:	005b      	lsls	r3, r3, #1
 800100c:	4413      	add	r3, r2
 800100e:	00db      	lsls	r3, r3, #3
 8001010:	440b      	add	r3, r1
 8001012:	3314      	adds	r3, #20
 8001014:	79fa      	ldrb	r2, [r7, #7]
 8001016:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8001018:	e014      	b.n	8001044 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 800101a:	79fa      	ldrb	r2, [r7, #7]
 800101c:	490d      	ldr	r1, [pc, #52]	; (8001054 <LinkTimerBefore+0xbc>)
 800101e:	4613      	mov	r3, r2
 8001020:	005b      	lsls	r3, r3, #1
 8001022:	4413      	add	r3, r2
 8001024:	00db      	lsls	r3, r3, #3
 8001026:	440b      	add	r3, r1
 8001028:	3315      	adds	r3, #21
 800102a:	79ba      	ldrb	r2, [r7, #6]
 800102c:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 800102e:	79ba      	ldrb	r2, [r7, #6]
 8001030:	4908      	ldr	r1, [pc, #32]	; (8001054 <LinkTimerBefore+0xbc>)
 8001032:	4613      	mov	r3, r2
 8001034:	005b      	lsls	r3, r3, #1
 8001036:	4413      	add	r3, r2
 8001038:	00db      	lsls	r3, r3, #3
 800103a:	440b      	add	r3, r1
 800103c:	3314      	adds	r3, #20
 800103e:	79fa      	ldrb	r2, [r7, #7]
 8001040:	701a      	strb	r2, [r3, #0]
  return;
 8001042:	bf00      	nop
}
 8001044:	3714      	adds	r7, #20
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop
 8001050:	20000a08 	.word	0x20000a08
 8001054:	20000978 	.word	0x20000978

08001058 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b084      	sub	sp, #16
 800105c:	af00      	add	r7, sp, #0
 800105e:	4603      	mov	r3, r0
 8001060:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001062:	4b4e      	ldr	r3, [pc, #312]	; (800119c <linkTimer+0x144>)
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	b2db      	uxtb	r3, r3
 8001068:	2b06      	cmp	r3, #6
 800106a:	d118      	bne.n	800109e <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 800106c:	4b4b      	ldr	r3, [pc, #300]	; (800119c <linkTimer+0x144>)
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	b2da      	uxtb	r2, r3
 8001072:	4b4b      	ldr	r3, [pc, #300]	; (80011a0 <linkTimer+0x148>)
 8001074:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8001076:	4a49      	ldr	r2, [pc, #292]	; (800119c <linkTimer+0x144>)
 8001078:	79fb      	ldrb	r3, [r7, #7]
 800107a:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 800107c:	79fa      	ldrb	r2, [r7, #7]
 800107e:	4949      	ldr	r1, [pc, #292]	; (80011a4 <linkTimer+0x14c>)
 8001080:	4613      	mov	r3, r2
 8001082:	005b      	lsls	r3, r3, #1
 8001084:	4413      	add	r3, r2
 8001086:	00db      	lsls	r3, r3, #3
 8001088:	440b      	add	r3, r1
 800108a:	3315      	adds	r3, #21
 800108c:	2206      	movs	r2, #6
 800108e:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001090:	4b45      	ldr	r3, [pc, #276]	; (80011a8 <linkTimer+0x150>)
 8001092:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001096:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8001098:	2300      	movs	r3, #0
 800109a:	81fb      	strh	r3, [r7, #14]
 800109c:	e078      	b.n	8001190 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 800109e:	f000 f909 	bl	80012b4 <ReturnTimeElapsed>
 80010a2:	4603      	mov	r3, r0
 80010a4:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 80010a6:	79fa      	ldrb	r2, [r7, #7]
 80010a8:	493e      	ldr	r1, [pc, #248]	; (80011a4 <linkTimer+0x14c>)
 80010aa:	4613      	mov	r3, r2
 80010ac:	005b      	lsls	r3, r3, #1
 80010ae:	4413      	add	r3, r2
 80010b0:	00db      	lsls	r3, r3, #3
 80010b2:	440b      	add	r3, r1
 80010b4:	3308      	adds	r3, #8
 80010b6:	6819      	ldr	r1, [r3, #0]
 80010b8:	89fb      	ldrh	r3, [r7, #14]
 80010ba:	79fa      	ldrb	r2, [r7, #7]
 80010bc:	4419      	add	r1, r3
 80010be:	4839      	ldr	r0, [pc, #228]	; (80011a4 <linkTimer+0x14c>)
 80010c0:	4613      	mov	r3, r2
 80010c2:	005b      	lsls	r3, r3, #1
 80010c4:	4413      	add	r3, r2
 80010c6:	00db      	lsls	r3, r3, #3
 80010c8:	4403      	add	r3, r0
 80010ca:	3308      	adds	r3, #8
 80010cc:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 80010ce:	79fa      	ldrb	r2, [r7, #7]
 80010d0:	4934      	ldr	r1, [pc, #208]	; (80011a4 <linkTimer+0x14c>)
 80010d2:	4613      	mov	r3, r2
 80010d4:	005b      	lsls	r3, r3, #1
 80010d6:	4413      	add	r3, r2
 80010d8:	00db      	lsls	r3, r3, #3
 80010da:	440b      	add	r3, r1
 80010dc:	3308      	adds	r3, #8
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 80010e2:	4b2e      	ldr	r3, [pc, #184]	; (800119c <linkTimer+0x144>)
 80010e4:	781b      	ldrb	r3, [r3, #0]
 80010e6:	b2db      	uxtb	r3, r3
 80010e8:	4619      	mov	r1, r3
 80010ea:	4a2e      	ldr	r2, [pc, #184]	; (80011a4 <linkTimer+0x14c>)
 80010ec:	460b      	mov	r3, r1
 80010ee:	005b      	lsls	r3, r3, #1
 80010f0:	440b      	add	r3, r1
 80010f2:	00db      	lsls	r3, r3, #3
 80010f4:	4413      	add	r3, r2
 80010f6:	3308      	adds	r3, #8
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	68ba      	ldr	r2, [r7, #8]
 80010fc:	429a      	cmp	r2, r3
 80010fe:	d337      	bcc.n	8001170 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8001100:	4b26      	ldr	r3, [pc, #152]	; (800119c <linkTimer+0x144>)
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8001106:	7b7a      	ldrb	r2, [r7, #13]
 8001108:	4926      	ldr	r1, [pc, #152]	; (80011a4 <linkTimer+0x14c>)
 800110a:	4613      	mov	r3, r2
 800110c:	005b      	lsls	r3, r3, #1
 800110e:	4413      	add	r3, r2
 8001110:	00db      	lsls	r3, r3, #3
 8001112:	440b      	add	r3, r1
 8001114:	3315      	adds	r3, #21
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 800111a:	e013      	b.n	8001144 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 800111c:	7b7a      	ldrb	r2, [r7, #13]
 800111e:	4921      	ldr	r1, [pc, #132]	; (80011a4 <linkTimer+0x14c>)
 8001120:	4613      	mov	r3, r2
 8001122:	005b      	lsls	r3, r3, #1
 8001124:	4413      	add	r3, r2
 8001126:	00db      	lsls	r3, r3, #3
 8001128:	440b      	add	r3, r1
 800112a:	3315      	adds	r3, #21
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8001130:	7b7a      	ldrb	r2, [r7, #13]
 8001132:	491c      	ldr	r1, [pc, #112]	; (80011a4 <linkTimer+0x14c>)
 8001134:	4613      	mov	r3, r2
 8001136:	005b      	lsls	r3, r3, #1
 8001138:	4413      	add	r3, r2
 800113a:	00db      	lsls	r3, r3, #3
 800113c:	440b      	add	r3, r1
 800113e:	3315      	adds	r3, #21
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001144:	7b3b      	ldrb	r3, [r7, #12]
 8001146:	2b06      	cmp	r3, #6
 8001148:	d00b      	beq.n	8001162 <linkTimer+0x10a>
 800114a:	7b3a      	ldrb	r2, [r7, #12]
 800114c:	4915      	ldr	r1, [pc, #84]	; (80011a4 <linkTimer+0x14c>)
 800114e:	4613      	mov	r3, r2
 8001150:	005b      	lsls	r3, r3, #1
 8001152:	4413      	add	r3, r2
 8001154:	00db      	lsls	r3, r3, #3
 8001156:	440b      	add	r3, r1
 8001158:	3308      	adds	r3, #8
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	68ba      	ldr	r2, [r7, #8]
 800115e:	429a      	cmp	r2, r3
 8001160:	d2dc      	bcs.n	800111c <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8001162:	7b7a      	ldrb	r2, [r7, #13]
 8001164:	79fb      	ldrb	r3, [r7, #7]
 8001166:	4611      	mov	r1, r2
 8001168:	4618      	mov	r0, r3
 800116a:	f7ff fecf 	bl	8000f0c <LinkTimerAfter>
 800116e:	e00f      	b.n	8001190 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8001170:	4b0a      	ldr	r3, [pc, #40]	; (800119c <linkTimer+0x144>)
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	b2da      	uxtb	r2, r3
 8001176:	79fb      	ldrb	r3, [r7, #7]
 8001178:	4611      	mov	r1, r2
 800117a:	4618      	mov	r0, r3
 800117c:	f7ff ff0c 	bl	8000f98 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8001180:	4b06      	ldr	r3, [pc, #24]	; (800119c <linkTimer+0x144>)
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	b2da      	uxtb	r2, r3
 8001186:	4b06      	ldr	r3, [pc, #24]	; (80011a0 <linkTimer+0x148>)
 8001188:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 800118a:	4a04      	ldr	r2, [pc, #16]	; (800119c <linkTimer+0x144>)
 800118c:	79fb      	ldrb	r3, [r7, #7]
 800118e:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8001190:	89fb      	ldrh	r3, [r7, #14]
}
 8001192:	4618      	mov	r0, r3
 8001194:	3710      	adds	r7, #16
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	20000a08 	.word	0x20000a08
 80011a0:	20000a09 	.word	0x20000a09
 80011a4:	20000978 	.word	0x20000978
 80011a8:	20000a0c 	.word	0x20000a0c

080011ac <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b085      	sub	sp, #20
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	4603      	mov	r3, r0
 80011b4:	460a      	mov	r2, r1
 80011b6:	71fb      	strb	r3, [r7, #7]
 80011b8:	4613      	mov	r3, r2
 80011ba:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 80011bc:	4b39      	ldr	r3, [pc, #228]	; (80012a4 <UnlinkTimer+0xf8>)
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	b2db      	uxtb	r3, r3
 80011c2:	79fa      	ldrb	r2, [r7, #7]
 80011c4:	429a      	cmp	r2, r3
 80011c6:	d111      	bne.n	80011ec <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 80011c8:	4b36      	ldr	r3, [pc, #216]	; (80012a4 <UnlinkTimer+0xf8>)
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	b2da      	uxtb	r2, r3
 80011ce:	4b36      	ldr	r3, [pc, #216]	; (80012a8 <UnlinkTimer+0xfc>)
 80011d0:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 80011d2:	79fa      	ldrb	r2, [r7, #7]
 80011d4:	4935      	ldr	r1, [pc, #212]	; (80012ac <UnlinkTimer+0x100>)
 80011d6:	4613      	mov	r3, r2
 80011d8:	005b      	lsls	r3, r3, #1
 80011da:	4413      	add	r3, r2
 80011dc:	00db      	lsls	r3, r3, #3
 80011de:	440b      	add	r3, r1
 80011e0:	3315      	adds	r3, #21
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	b2da      	uxtb	r2, r3
 80011e6:	4b2f      	ldr	r3, [pc, #188]	; (80012a4 <UnlinkTimer+0xf8>)
 80011e8:	701a      	strb	r2, [r3, #0]
 80011ea:	e03e      	b.n	800126a <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 80011ec:	79fa      	ldrb	r2, [r7, #7]
 80011ee:	492f      	ldr	r1, [pc, #188]	; (80012ac <UnlinkTimer+0x100>)
 80011f0:	4613      	mov	r3, r2
 80011f2:	005b      	lsls	r3, r3, #1
 80011f4:	4413      	add	r3, r2
 80011f6:	00db      	lsls	r3, r3, #3
 80011f8:	440b      	add	r3, r1
 80011fa:	3314      	adds	r3, #20
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8001200:	79fa      	ldrb	r2, [r7, #7]
 8001202:	492a      	ldr	r1, [pc, #168]	; (80012ac <UnlinkTimer+0x100>)
 8001204:	4613      	mov	r3, r2
 8001206:	005b      	lsls	r3, r3, #1
 8001208:	4413      	add	r3, r2
 800120a:	00db      	lsls	r3, r3, #3
 800120c:	440b      	add	r3, r1
 800120e:	3315      	adds	r3, #21
 8001210:	781b      	ldrb	r3, [r3, #0]
 8001212:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8001214:	79f9      	ldrb	r1, [r7, #7]
 8001216:	7bfa      	ldrb	r2, [r7, #15]
 8001218:	4824      	ldr	r0, [pc, #144]	; (80012ac <UnlinkTimer+0x100>)
 800121a:	460b      	mov	r3, r1
 800121c:	005b      	lsls	r3, r3, #1
 800121e:	440b      	add	r3, r1
 8001220:	00db      	lsls	r3, r3, #3
 8001222:	4403      	add	r3, r0
 8001224:	3315      	adds	r3, #21
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	b2d8      	uxtb	r0, r3
 800122a:	4920      	ldr	r1, [pc, #128]	; (80012ac <UnlinkTimer+0x100>)
 800122c:	4613      	mov	r3, r2
 800122e:	005b      	lsls	r3, r3, #1
 8001230:	4413      	add	r3, r2
 8001232:	00db      	lsls	r3, r3, #3
 8001234:	440b      	add	r3, r1
 8001236:	3315      	adds	r3, #21
 8001238:	4602      	mov	r2, r0
 800123a:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800123c:	7bbb      	ldrb	r3, [r7, #14]
 800123e:	2b06      	cmp	r3, #6
 8001240:	d013      	beq.n	800126a <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8001242:	79f9      	ldrb	r1, [r7, #7]
 8001244:	7bba      	ldrb	r2, [r7, #14]
 8001246:	4819      	ldr	r0, [pc, #100]	; (80012ac <UnlinkTimer+0x100>)
 8001248:	460b      	mov	r3, r1
 800124a:	005b      	lsls	r3, r3, #1
 800124c:	440b      	add	r3, r1
 800124e:	00db      	lsls	r3, r3, #3
 8001250:	4403      	add	r3, r0
 8001252:	3314      	adds	r3, #20
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	b2d8      	uxtb	r0, r3
 8001258:	4914      	ldr	r1, [pc, #80]	; (80012ac <UnlinkTimer+0x100>)
 800125a:	4613      	mov	r3, r2
 800125c:	005b      	lsls	r3, r3, #1
 800125e:	4413      	add	r3, r2
 8001260:	00db      	lsls	r3, r3, #3
 8001262:	440b      	add	r3, r1
 8001264:	3314      	adds	r3, #20
 8001266:	4602      	mov	r2, r0
 8001268:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 800126a:	79fa      	ldrb	r2, [r7, #7]
 800126c:	490f      	ldr	r1, [pc, #60]	; (80012ac <UnlinkTimer+0x100>)
 800126e:	4613      	mov	r3, r2
 8001270:	005b      	lsls	r3, r3, #1
 8001272:	4413      	add	r3, r2
 8001274:	00db      	lsls	r3, r3, #3
 8001276:	440b      	add	r3, r1
 8001278:	330c      	adds	r3, #12
 800127a:	2201      	movs	r2, #1
 800127c:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 800127e:	4b09      	ldr	r3, [pc, #36]	; (80012a4 <UnlinkTimer+0xf8>)
 8001280:	781b      	ldrb	r3, [r3, #0]
 8001282:	b2db      	uxtb	r3, r3
 8001284:	2b06      	cmp	r3, #6
 8001286:	d107      	bne.n	8001298 <UnlinkTimer+0xec>
 8001288:	79bb      	ldrb	r3, [r7, #6]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d104      	bne.n	8001298 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 800128e:	4b08      	ldr	r3, [pc, #32]	; (80012b0 <UnlinkTimer+0x104>)
 8001290:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001294:	601a      	str	r2, [r3, #0]
  }

  return;
 8001296:	bf00      	nop
 8001298:	bf00      	nop
}
 800129a:	3714      	adds	r7, #20
 800129c:	46bd      	mov	sp, r7
 800129e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a2:	4770      	bx	lr
 80012a4:	20000a08 	.word	0x20000a08
 80012a8:	20000a09 	.word	0x20000a09
 80012ac:	20000978 	.word	0x20000978
 80012b0:	20000a0c 	.word	0x20000a0c

080012b4 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 80012ba:	4b1a      	ldr	r3, [pc, #104]	; (8001324 <ReturnTimeElapsed+0x70>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80012c2:	d026      	beq.n	8001312 <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 80012c4:	f7ff fe02 	bl	8000ecc <ReadRtcSsrValue>
 80012c8:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 80012ca:	4b16      	ldr	r3, [pc, #88]	; (8001324 <ReturnTimeElapsed+0x70>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	687a      	ldr	r2, [r7, #4]
 80012d0:	429a      	cmp	r2, r3
 80012d2:	d805      	bhi.n	80012e0 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 80012d4:	4b13      	ldr	r3, [pc, #76]	; (8001324 <ReturnTimeElapsed+0x70>)
 80012d6:	681a      	ldr	r2, [r3, #0]
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	1ad3      	subs	r3, r2, r3
 80012dc:	607b      	str	r3, [r7, #4]
 80012de:	e00a      	b.n	80012f6 <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 80012e0:	4b11      	ldr	r3, [pc, #68]	; (8001328 <ReturnTimeElapsed+0x74>)
 80012e2:	881b      	ldrh	r3, [r3, #0]
 80012e4:	461a      	mov	r2, r3
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	1ad3      	subs	r3, r2, r3
 80012ea:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 80012ec:	4b0d      	ldr	r3, [pc, #52]	; (8001324 <ReturnTimeElapsed+0x70>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	683a      	ldr	r2, [r7, #0]
 80012f2:	4413      	add	r3, r2
 80012f4:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 80012f6:	4b0d      	ldr	r3, [pc, #52]	; (800132c <ReturnTimeElapsed+0x78>)
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	461a      	mov	r2, r3
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	fb02 f303 	mul.w	r3, r2, r3
 8001302:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8001304:	4b0a      	ldr	r3, [pc, #40]	; (8001330 <ReturnTimeElapsed+0x7c>)
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	461a      	mov	r2, r3
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	40d3      	lsrs	r3, r2
 800130e:	607b      	str	r3, [r7, #4]
 8001310:	e001      	b.n	8001316 <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8001312:	2300      	movs	r3, #0
 8001314:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	b29b      	uxth	r3, r3
}
 800131a:	4618      	mov	r0, r3
 800131c:	3708      	adds	r7, #8
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	20000a0c 	.word	0x20000a0c
 8001328:	20000a14 	.word	0x20000a14
 800132c:	20000a12 	.word	0x20000a12
 8001330:	20000a11 	.word	0x20000a11

08001334 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
 800133a:	4603      	mov	r3, r0
 800133c:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 800133e:	88fb      	ldrh	r3, [r7, #6]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d108      	bne.n	8001356 <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8001344:	f7ff fdc2 	bl	8000ecc <ReadRtcSsrValue>
 8001348:	4603      	mov	r3, r0
 800134a:	4a21      	ldr	r2, [pc, #132]	; (80013d0 <RestartWakeupCounter+0x9c>)
 800134c:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 800134e:	2003      	movs	r0, #3
 8001350:	f001 faf9 	bl	8002946 <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8001354:	e039      	b.n	80013ca <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8001356:	88fb      	ldrh	r3, [r7, #6]
 8001358:	2b01      	cmp	r3, #1
 800135a:	d803      	bhi.n	8001364 <RestartWakeupCounter+0x30>
 800135c:	4b1d      	ldr	r3, [pc, #116]	; (80013d4 <RestartWakeupCounter+0xa0>)
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	2b01      	cmp	r3, #1
 8001362:	d002      	beq.n	800136a <RestartWakeupCounter+0x36>
      Value -= 1;
 8001364:	88fb      	ldrh	r3, [r7, #6]
 8001366:	3b01      	subs	r3, #1
 8001368:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 800136a:	bf00      	nop
 800136c:	4b1a      	ldr	r3, [pc, #104]	; (80013d8 <RestartWakeupCounter+0xa4>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	68db      	ldr	r3, [r3, #12]
 8001372:	f003 0304 	and.w	r3, r3, #4
 8001376:	2b00      	cmp	r3, #0
 8001378:	d0f8      	beq.n	800136c <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 800137a:	4b17      	ldr	r3, [pc, #92]	; (80013d8 <RestartWakeupCounter+0xa4>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	68db      	ldr	r3, [r3, #12]
 8001380:	b2da      	uxtb	r2, r3
 8001382:	4b15      	ldr	r3, [pc, #84]	; (80013d8 <RestartWakeupCounter+0xa4>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800138a:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 800138c:	4b13      	ldr	r3, [pc, #76]	; (80013dc <RestartWakeupCounter+0xa8>)
 800138e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001392:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001394:	2003      	movs	r0, #3
 8001396:	f001 fae4 	bl	8002962 <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 800139a:	4b11      	ldr	r3, [pc, #68]	; (80013e0 <RestartWakeupCounter+0xac>)
 800139c:	695b      	ldr	r3, [r3, #20]
 800139e:	0c1b      	lsrs	r3, r3, #16
 80013a0:	041b      	lsls	r3, r3, #16
 80013a2:	88fa      	ldrh	r2, [r7, #6]
 80013a4:	490e      	ldr	r1, [pc, #56]	; (80013e0 <RestartWakeupCounter+0xac>)
 80013a6:	4313      	orrs	r3, r2
 80013a8:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 80013aa:	f7ff fd8f 	bl	8000ecc <ReadRtcSsrValue>
 80013ae:	4603      	mov	r3, r0
 80013b0:	4a07      	ldr	r2, [pc, #28]	; (80013d0 <RestartWakeupCounter+0x9c>)
 80013b2:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 80013b4:	4b08      	ldr	r3, [pc, #32]	; (80013d8 <RestartWakeupCounter+0xa4>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	689a      	ldr	r2, [r3, #8]
 80013ba:	4b07      	ldr	r3, [pc, #28]	; (80013d8 <RestartWakeupCounter+0xa4>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80013c2:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 80013c4:	f3af 8000 	nop.w
  return ;
 80013c8:	bf00      	nop
}
 80013ca:	3708      	adds	r7, #8
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	20000a0c 	.word	0x20000a0c
 80013d4:	20000a11 	.word	0x20000a11
 80013d8:	20000aa8 	.word	0x20000aa8
 80013dc:	58000800 	.word	0x58000800
 80013e0:	40002800 	.word	0x40002800

080013e4 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b084      	sub	sp, #16
 80013e8:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 80013ea:	4b45      	ldr	r3, [pc, #276]	; (8001500 <RescheduleTimerList+0x11c>)
 80013ec:	689b      	ldr	r3, [r3, #8]
 80013ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013f6:	d107      	bne.n	8001408 <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 80013f8:	bf00      	nop
 80013fa:	4b42      	ldr	r3, [pc, #264]	; (8001504 <RescheduleTimerList+0x120>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	68db      	ldr	r3, [r3, #12]
 8001400:	f003 0304 	and.w	r3, r3, #4
 8001404:	2b00      	cmp	r3, #0
 8001406:	d1f8      	bne.n	80013fa <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8001408:	4b3e      	ldr	r3, [pc, #248]	; (8001504 <RescheduleTimerList+0x120>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	689a      	ldr	r2, [r3, #8]
 800140e:	4b3d      	ldr	r3, [pc, #244]	; (8001504 <RescheduleTimerList+0x120>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001416:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8001418:	4b3b      	ldr	r3, [pc, #236]	; (8001508 <RescheduleTimerList+0x124>)
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 800141e:	7bfa      	ldrb	r2, [r7, #15]
 8001420:	493a      	ldr	r1, [pc, #232]	; (800150c <RescheduleTimerList+0x128>)
 8001422:	4613      	mov	r3, r2
 8001424:	005b      	lsls	r3, r3, #1
 8001426:	4413      	add	r3, r2
 8001428:	00db      	lsls	r3, r3, #3
 800142a:	440b      	add	r3, r1
 800142c:	3308      	adds	r3, #8
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8001432:	f7ff ff3f 	bl	80012b4 <ReturnTimeElapsed>
 8001436:	4603      	mov	r3, r0
 8001438:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 800143a:	88fb      	ldrh	r3, [r7, #6]
 800143c:	68ba      	ldr	r2, [r7, #8]
 800143e:	429a      	cmp	r2, r3
 8001440:	d205      	bcs.n	800144e <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8001442:	2300      	movs	r3, #0
 8001444:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001446:	4b32      	ldr	r3, [pc, #200]	; (8001510 <RescheduleTimerList+0x12c>)
 8001448:	2201      	movs	r2, #1
 800144a:	701a      	strb	r2, [r3, #0]
 800144c:	e04d      	b.n	80014ea <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 800144e:	88fb      	ldrh	r3, [r7, #6]
 8001450:	4a30      	ldr	r2, [pc, #192]	; (8001514 <RescheduleTimerList+0x130>)
 8001452:	8812      	ldrh	r2, [r2, #0]
 8001454:	b292      	uxth	r2, r2
 8001456:	4413      	add	r3, r2
 8001458:	461a      	mov	r2, r3
 800145a:	68bb      	ldr	r3, [r7, #8]
 800145c:	4293      	cmp	r3, r2
 800145e:	d906      	bls.n	800146e <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8001460:	4b2c      	ldr	r3, [pc, #176]	; (8001514 <RescheduleTimerList+0x130>)
 8001462:	881b      	ldrh	r3, [r3, #0]
 8001464:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8001466:	4b2a      	ldr	r3, [pc, #168]	; (8001510 <RescheduleTimerList+0x12c>)
 8001468:	2200      	movs	r2, #0
 800146a:	701a      	strb	r2, [r3, #0]
 800146c:	e03d      	b.n	80014ea <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 800146e:	68bb      	ldr	r3, [r7, #8]
 8001470:	b29a      	uxth	r2, r3
 8001472:	88fb      	ldrh	r3, [r7, #6]
 8001474:	1ad3      	subs	r3, r2, r3
 8001476:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001478:	4b25      	ldr	r3, [pc, #148]	; (8001510 <RescheduleTimerList+0x12c>)
 800147a:	2201      	movs	r2, #1
 800147c:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800147e:	e034      	b.n	80014ea <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8001480:	7bfa      	ldrb	r2, [r7, #15]
 8001482:	4922      	ldr	r1, [pc, #136]	; (800150c <RescheduleTimerList+0x128>)
 8001484:	4613      	mov	r3, r2
 8001486:	005b      	lsls	r3, r3, #1
 8001488:	4413      	add	r3, r2
 800148a:	00db      	lsls	r3, r3, #3
 800148c:	440b      	add	r3, r1
 800148e:	3308      	adds	r3, #8
 8001490:	681a      	ldr	r2, [r3, #0]
 8001492:	88fb      	ldrh	r3, [r7, #6]
 8001494:	429a      	cmp	r2, r3
 8001496:	d20a      	bcs.n	80014ae <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8001498:	7bfa      	ldrb	r2, [r7, #15]
 800149a:	491c      	ldr	r1, [pc, #112]	; (800150c <RescheduleTimerList+0x128>)
 800149c:	4613      	mov	r3, r2
 800149e:	005b      	lsls	r3, r3, #1
 80014a0:	4413      	add	r3, r2
 80014a2:	00db      	lsls	r3, r3, #3
 80014a4:	440b      	add	r3, r1
 80014a6:	3308      	adds	r3, #8
 80014a8:	2200      	movs	r2, #0
 80014aa:	601a      	str	r2, [r3, #0]
 80014ac:	e013      	b.n	80014d6 <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 80014ae:	7bfa      	ldrb	r2, [r7, #15]
 80014b0:	4916      	ldr	r1, [pc, #88]	; (800150c <RescheduleTimerList+0x128>)
 80014b2:	4613      	mov	r3, r2
 80014b4:	005b      	lsls	r3, r3, #1
 80014b6:	4413      	add	r3, r2
 80014b8:	00db      	lsls	r3, r3, #3
 80014ba:	440b      	add	r3, r1
 80014bc:	3308      	adds	r3, #8
 80014be:	6819      	ldr	r1, [r3, #0]
 80014c0:	88fb      	ldrh	r3, [r7, #6]
 80014c2:	7bfa      	ldrb	r2, [r7, #15]
 80014c4:	1ac9      	subs	r1, r1, r3
 80014c6:	4811      	ldr	r0, [pc, #68]	; (800150c <RescheduleTimerList+0x128>)
 80014c8:	4613      	mov	r3, r2
 80014ca:	005b      	lsls	r3, r3, #1
 80014cc:	4413      	add	r3, r2
 80014ce:	00db      	lsls	r3, r3, #3
 80014d0:	4403      	add	r3, r0
 80014d2:	3308      	adds	r3, #8
 80014d4:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 80014d6:	7bfa      	ldrb	r2, [r7, #15]
 80014d8:	490c      	ldr	r1, [pc, #48]	; (800150c <RescheduleTimerList+0x128>)
 80014da:	4613      	mov	r3, r2
 80014dc:	005b      	lsls	r3, r3, #1
 80014de:	4413      	add	r3, r2
 80014e0:	00db      	lsls	r3, r3, #3
 80014e2:	440b      	add	r3, r1
 80014e4:	3315      	adds	r3, #21
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80014ea:	7bfb      	ldrb	r3, [r7, #15]
 80014ec:	2b06      	cmp	r3, #6
 80014ee:	d1c7      	bne.n	8001480 <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 80014f0:	89bb      	ldrh	r3, [r7, #12]
 80014f2:	4618      	mov	r0, r3
 80014f4:	f7ff ff1e 	bl	8001334 <RestartWakeupCounter>

  return ;
 80014f8:	bf00      	nop
}
 80014fa:	3710      	adds	r7, #16
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	40002800 	.word	0x40002800
 8001504:	20000aa8 	.word	0x20000aa8
 8001508:	20000a08 	.word	0x20000a08
 800150c:	20000978 	.word	0x20000978
 8001510:	20000a10 	.word	0x20000a10
 8001514:	20000a16 	.word	0x20000a16

08001518 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b08a      	sub	sp, #40	; 0x28
 800151c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800151e:	f3ef 8310 	mrs	r3, PRIMASK
 8001522:	617b      	str	r3, [r7, #20]
  return(result);
 8001524:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001526:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8001528:	b672      	cpsid	i
}
 800152a:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 800152c:	4b59      	ldr	r3, [pc, #356]	; (8001694 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	22ca      	movs	r2, #202	; 0xca
 8001532:	625a      	str	r2, [r3, #36]	; 0x24
 8001534:	4b57      	ldr	r3, [pc, #348]	; (8001694 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	2253      	movs	r2, #83	; 0x53
 800153a:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 800153c:	4b55      	ldr	r3, [pc, #340]	; (8001694 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	689a      	ldr	r2, [r3, #8]
 8001542:	4b54      	ldr	r3, [pc, #336]	; (8001694 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800154a:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 800154c:	4b52      	ldr	r3, [pc, #328]	; (8001698 <HW_TS_RTC_Wakeup_Handler+0x180>)
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8001554:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001558:	4950      	ldr	r1, [pc, #320]	; (800169c <HW_TS_RTC_Wakeup_Handler+0x184>)
 800155a:	4613      	mov	r3, r2
 800155c:	005b      	lsls	r3, r3, #1
 800155e:	4413      	add	r3, r2
 8001560:	00db      	lsls	r3, r3, #3
 8001562:	440b      	add	r3, r1
 8001564:	330c      	adds	r3, #12
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	b2db      	uxtb	r3, r3
 800156a:	2b02      	cmp	r3, #2
 800156c:	d16e      	bne.n	800164c <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 800156e:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001572:	494a      	ldr	r1, [pc, #296]	; (800169c <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001574:	4613      	mov	r3, r2
 8001576:	005b      	lsls	r3, r3, #1
 8001578:	4413      	add	r3, r2
 800157a:	00db      	lsls	r3, r3, #3
 800157c:	440b      	add	r3, r1
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8001582:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001586:	4945      	ldr	r1, [pc, #276]	; (800169c <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001588:	4613      	mov	r3, r2
 800158a:	005b      	lsls	r3, r3, #1
 800158c:	4413      	add	r3, r2
 800158e:	00db      	lsls	r3, r3, #3
 8001590:	440b      	add	r3, r1
 8001592:	3310      	adds	r3, #16
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8001598:	4b41      	ldr	r3, [pc, #260]	; (80016a0 <HW_TS_RTC_Wakeup_Handler+0x188>)
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	b2db      	uxtb	r3, r3
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d04c      	beq.n	800163c <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 80015a2:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80015a6:	493d      	ldr	r1, [pc, #244]	; (800169c <HW_TS_RTC_Wakeup_Handler+0x184>)
 80015a8:	4613      	mov	r3, r2
 80015aa:	005b      	lsls	r3, r3, #1
 80015ac:	4413      	add	r3, r2
 80015ae:	00db      	lsls	r3, r3, #3
 80015b0:	440b      	add	r3, r1
 80015b2:	330d      	adds	r3, #13
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	b2db      	uxtb	r3, r3
 80015b8:	2b01      	cmp	r3, #1
 80015ba:	d124      	bne.n	8001606 <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 80015bc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80015c0:	2101      	movs	r1, #1
 80015c2:	4618      	mov	r0, r3
 80015c4:	f7ff fdf2 	bl	80011ac <UnlinkTimer>
 80015c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ca:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	f383 8810 	msr	PRIMASK, r3
}
 80015d2:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 80015d4:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80015d8:	4930      	ldr	r1, [pc, #192]	; (800169c <HW_TS_RTC_Wakeup_Handler+0x184>)
 80015da:	4613      	mov	r3, r2
 80015dc:	005b      	lsls	r3, r3, #1
 80015de:	4413      	add	r3, r2
 80015e0:	00db      	lsls	r3, r3, #3
 80015e2:	440b      	add	r3, r1
 80015e4:	3304      	adds	r3, #4
 80015e6:	681a      	ldr	r2, [r3, #0]
 80015e8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80015ec:	4611      	mov	r1, r2
 80015ee:	4618      	mov	r0, r3
 80015f0:	f000 f9b8 	bl	8001964 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80015f4:	4b27      	ldr	r3, [pc, #156]	; (8001694 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	22ca      	movs	r2, #202	; 0xca
 80015fa:	625a      	str	r2, [r3, #36]	; 0x24
 80015fc:	4b25      	ldr	r3, [pc, #148]	; (8001694 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	2253      	movs	r2, #83	; 0x53
 8001602:	625a      	str	r2, [r3, #36]	; 0x24
 8001604:	e012      	b.n	800162c <HW_TS_RTC_Wakeup_Handler+0x114>
 8001606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001608:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	f383 8810 	msr	PRIMASK, r3
}
 8001610:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 8001612:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001616:	4618      	mov	r0, r3
 8001618:	f000 f920 	bl	800185c <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 800161c:	4b1d      	ldr	r3, [pc, #116]	; (8001694 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	22ca      	movs	r2, #202	; 0xca
 8001622:	625a      	str	r2, [r3, #36]	; 0x24
 8001624:	4b1b      	ldr	r3, [pc, #108]	; (8001694 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	2253      	movs	r2, #83	; 0x53
 800162a:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 800162c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001630:	69fa      	ldr	r2, [r7, #28]
 8001632:	4619      	mov	r1, r3
 8001634:	69b8      	ldr	r0, [r7, #24]
 8001636:	f000 fa1b 	bl	8001a70 <HW_TS_RTC_Int_AppNot>
 800163a:	e022      	b.n	8001682 <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 800163c:	f7ff fed2 	bl	80013e4 <RescheduleTimerList>
 8001640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001642:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001644:	68bb      	ldr	r3, [r7, #8]
 8001646:	f383 8810 	msr	PRIMASK, r3
}
 800164a:	e01a      	b.n	8001682 <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 800164c:	bf00      	nop
 800164e:	4b11      	ldr	r3, [pc, #68]	; (8001694 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	68db      	ldr	r3, [r3, #12]
 8001654:	f003 0304 	and.w	r3, r3, #4
 8001658:	2b00      	cmp	r3, #0
 800165a:	d0f8      	beq.n	800164e <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 800165c:	4b0d      	ldr	r3, [pc, #52]	; (8001694 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	68db      	ldr	r3, [r3, #12]
 8001662:	b2da      	uxtb	r2, r3
 8001664:	4b0b      	ldr	r3, [pc, #44]	; (8001694 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800166c:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 800166e:	4b0d      	ldr	r3, [pc, #52]	; (80016a4 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001670:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001674:	60da      	str	r2, [r3, #12]
 8001676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001678:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	f383 8810 	msr	PRIMASK, r3
}
 8001680:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001682:	4b04      	ldr	r3, [pc, #16]	; (8001694 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	22ff      	movs	r2, #255	; 0xff
 8001688:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 800168a:	bf00      	nop
}
 800168c:	3728      	adds	r7, #40	; 0x28
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	20000aa8 	.word	0x20000aa8
 8001698:	20000a08 	.word	0x20000a08
 800169c:	20000978 	.word	0x20000978
 80016a0:	20000a10 	.word	0x20000a10
 80016a4:	58000800 	.word	0x58000800

080016a8 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b088      	sub	sp, #32
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	4603      	mov	r3, r0
 80016b0:	6039      	str	r1, [r7, #0]
 80016b2:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80016b4:	4b5e      	ldr	r3, [pc, #376]	; (8001830 <HW_TS_Init+0x188>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	22ca      	movs	r2, #202	; 0xca
 80016ba:	625a      	str	r2, [r3, #36]	; 0x24
 80016bc:	4b5c      	ldr	r3, [pc, #368]	; (8001830 <HW_TS_Init+0x188>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	2253      	movs	r2, #83	; 0x53
 80016c2:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80016c4:	4b5b      	ldr	r3, [pc, #364]	; (8001834 <HW_TS_Init+0x18c>)
 80016c6:	689b      	ldr	r3, [r3, #8]
 80016c8:	4a5a      	ldr	r2, [pc, #360]	; (8001834 <HW_TS_Init+0x18c>)
 80016ca:	f043 0320 	orr.w	r3, r3, #32
 80016ce:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 80016d0:	4b58      	ldr	r3, [pc, #352]	; (8001834 <HW_TS_Init+0x18c>)
 80016d2:	689b      	ldr	r3, [r3, #8]
 80016d4:	b2db      	uxtb	r3, r3
 80016d6:	f003 0307 	and.w	r3, r3, #7
 80016da:	b2db      	uxtb	r3, r3
 80016dc:	f1c3 0304 	rsb	r3, r3, #4
 80016e0:	b2da      	uxtb	r2, r3
 80016e2:	4b55      	ldr	r3, [pc, #340]	; (8001838 <HW_TS_Init+0x190>)
 80016e4:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 80016e6:	4b53      	ldr	r3, [pc, #332]	; (8001834 <HW_TS_Init+0x18c>)
 80016e8:	691b      	ldr	r3, [r3, #16]
 80016ea:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80016ee:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 80016f2:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016f4:	693a      	ldr	r2, [r7, #16]
 80016f6:	fa92 f2a2 	rbit	r2, r2
 80016fa:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80016fc:	68fa      	ldr	r2, [r7, #12]
 80016fe:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001700:	697a      	ldr	r2, [r7, #20]
 8001702:	2a00      	cmp	r2, #0
 8001704:	d101      	bne.n	800170a <HW_TS_Init+0x62>
  {
    return 32U;
 8001706:	2220      	movs	r2, #32
 8001708:	e003      	b.n	8001712 <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 800170a:	697a      	ldr	r2, [r7, #20]
 800170c:	fab2 f282 	clz	r2, r2
 8001710:	b2d2      	uxtb	r2, r2
 8001712:	40d3      	lsrs	r3, r2
 8001714:	b2db      	uxtb	r3, r3
 8001716:	3301      	adds	r3, #1
 8001718:	b2da      	uxtb	r2, r3
 800171a:	4b48      	ldr	r3, [pc, #288]	; (800183c <HW_TS_Init+0x194>)
 800171c:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 800171e:	4b45      	ldr	r3, [pc, #276]	; (8001834 <HW_TS_Init+0x18c>)
 8001720:	691b      	ldr	r3, [r3, #16]
 8001722:	b29b      	uxth	r3, r3
 8001724:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001728:	b29b      	uxth	r3, r3
 800172a:	3301      	adds	r3, #1
 800172c:	b29a      	uxth	r2, r3
 800172e:	4b44      	ldr	r3, [pc, #272]	; (8001840 <HW_TS_Init+0x198>)
 8001730:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8001732:	4b43      	ldr	r3, [pc, #268]	; (8001840 <HW_TS_Init+0x198>)
 8001734:	881b      	ldrh	r3, [r3, #0]
 8001736:	3b01      	subs	r3, #1
 8001738:	4a40      	ldr	r2, [pc, #256]	; (800183c <HW_TS_Init+0x194>)
 800173a:	7812      	ldrb	r2, [r2, #0]
 800173c:	fb02 f303 	mul.w	r3, r2, r3
 8001740:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001744:	4a3c      	ldr	r2, [pc, #240]	; (8001838 <HW_TS_Init+0x190>)
 8001746:	7812      	ldrb	r2, [r2, #0]
 8001748:	40d3      	lsrs	r3, r2
 800174a:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 800174c:	69bb      	ldr	r3, [r7, #24]
 800174e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001752:	4293      	cmp	r3, r2
 8001754:	d904      	bls.n	8001760 <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8001756:	4b3b      	ldr	r3, [pc, #236]	; (8001844 <HW_TS_Init+0x19c>)
 8001758:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800175c:	801a      	strh	r2, [r3, #0]
 800175e:	e003      	b.n	8001768 <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8001760:	69bb      	ldr	r3, [r7, #24]
 8001762:	b29a      	uxth	r2, r3
 8001764:	4b37      	ldr	r3, [pc, #220]	; (8001844 <HW_TS_Init+0x19c>)
 8001766:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8001768:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800176c:	f7ff fb9c 	bl	8000ea8 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8001770:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001774:	f7ff fb84 	bl	8000e80 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8001778:	79fb      	ldrb	r3, [r7, #7]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d13d      	bne.n	80017fa <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 800177e:	4b32      	ldr	r3, [pc, #200]	; (8001848 <HW_TS_Init+0x1a0>)
 8001780:	2201      	movs	r2, #1
 8001782:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001784:	4b31      	ldr	r3, [pc, #196]	; (800184c <HW_TS_Init+0x1a4>)
 8001786:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800178a:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 800178c:	2300      	movs	r3, #0
 800178e:	77fb      	strb	r3, [r7, #31]
 8001790:	e00c      	b.n	80017ac <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8001792:	7ffa      	ldrb	r2, [r7, #31]
 8001794:	492e      	ldr	r1, [pc, #184]	; (8001850 <HW_TS_Init+0x1a8>)
 8001796:	4613      	mov	r3, r2
 8001798:	005b      	lsls	r3, r3, #1
 800179a:	4413      	add	r3, r2
 800179c:	00db      	lsls	r3, r3, #3
 800179e:	440b      	add	r3, r1
 80017a0:	330c      	adds	r3, #12
 80017a2:	2200      	movs	r2, #0
 80017a4:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 80017a6:	7ffb      	ldrb	r3, [r7, #31]
 80017a8:	3301      	adds	r3, #1
 80017aa:	77fb      	strb	r3, [r7, #31]
 80017ac:	7ffb      	ldrb	r3, [r7, #31]
 80017ae:	2b05      	cmp	r3, #5
 80017b0:	d9ef      	bls.n	8001792 <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 80017b2:	4b28      	ldr	r3, [pc, #160]	; (8001854 <HW_TS_Init+0x1ac>)
 80017b4:	2206      	movs	r2, #6
 80017b6:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 80017b8:	4b1d      	ldr	r3, [pc, #116]	; (8001830 <HW_TS_Init+0x188>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	689a      	ldr	r2, [r3, #8]
 80017be:	4b1c      	ldr	r3, [pc, #112]	; (8001830 <HW_TS_Init+0x188>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80017c6:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 80017c8:	4b19      	ldr	r3, [pc, #100]	; (8001830 <HW_TS_Init+0x188>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	68db      	ldr	r3, [r3, #12]
 80017ce:	b2da      	uxtb	r2, r3
 80017d0:	4b17      	ldr	r3, [pc, #92]	; (8001830 <HW_TS_Init+0x188>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80017d8:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 80017da:	4b1f      	ldr	r3, [pc, #124]	; (8001858 <HW_TS_Init+0x1b0>)
 80017dc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80017e0:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 80017e2:	2003      	movs	r0, #3
 80017e4:	f001 f8bd 	bl	8002962 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 80017e8:	4b11      	ldr	r3, [pc, #68]	; (8001830 <HW_TS_Init+0x188>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	689a      	ldr	r2, [r3, #8]
 80017ee:	4b10      	ldr	r3, [pc, #64]	; (8001830 <HW_TS_Init+0x188>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80017f6:	609a      	str	r2, [r3, #8]
 80017f8:	e009      	b.n	800180e <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 80017fa:	4b0d      	ldr	r3, [pc, #52]	; (8001830 <HW_TS_Init+0x188>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	68db      	ldr	r3, [r3, #12]
 8001800:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001804:	2b00      	cmp	r3, #0
 8001806:	d002      	beq.n	800180e <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001808:	2003      	movs	r0, #3
 800180a:	f001 f89c 	bl	8002946 <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 800180e:	4b08      	ldr	r3, [pc, #32]	; (8001830 <HW_TS_Init+0x188>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	22ff      	movs	r2, #255	; 0xff
 8001814:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8001816:	2200      	movs	r2, #0
 8001818:	2103      	movs	r1, #3
 800181a:	2003      	movs	r0, #3
 800181c:	f001 f851 	bl	80028c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001820:	2003      	movs	r0, #3
 8001822:	f001 f868 	bl	80028f6 <HAL_NVIC_EnableIRQ>

  return;
 8001826:	bf00      	nop
}
 8001828:	3720      	adds	r7, #32
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	20000aa8 	.word	0x20000aa8
 8001834:	40002800 	.word	0x40002800
 8001838:	20000a11 	.word	0x20000a11
 800183c:	20000a12 	.word	0x20000a12
 8001840:	20000a14 	.word	0x20000a14
 8001844:	20000a16 	.word	0x20000a16
 8001848:	20000a10 	.word	0x20000a10
 800184c:	20000a0c 	.word	0x20000a0c
 8001850:	20000978 	.word	0x20000978
 8001854:	20000a08 	.word	0x20000a08
 8001858:	58000800 	.word	0x58000800

0800185c <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b086      	sub	sp, #24
 8001860:	af00      	add	r7, sp, #0
 8001862:	4603      	mov	r3, r0
 8001864:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001866:	f3ef 8310 	mrs	r3, PRIMASK
 800186a:	60fb      	str	r3, [r7, #12]
  return(result);
 800186c:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800186e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001870:	b672      	cpsid	i
}
 8001872:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001874:	2003      	movs	r0, #3
 8001876:	f001 f84c 	bl	8002912 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 800187a:	4b34      	ldr	r3, [pc, #208]	; (800194c <HW_TS_Stop+0xf0>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	22ca      	movs	r2, #202	; 0xca
 8001880:	625a      	str	r2, [r3, #36]	; 0x24
 8001882:	4b32      	ldr	r3, [pc, #200]	; (800194c <HW_TS_Stop+0xf0>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	2253      	movs	r2, #83	; 0x53
 8001888:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 800188a:	79fa      	ldrb	r2, [r7, #7]
 800188c:	4930      	ldr	r1, [pc, #192]	; (8001950 <HW_TS_Stop+0xf4>)
 800188e:	4613      	mov	r3, r2
 8001890:	005b      	lsls	r3, r3, #1
 8001892:	4413      	add	r3, r2
 8001894:	00db      	lsls	r3, r3, #3
 8001896:	440b      	add	r3, r1
 8001898:	330c      	adds	r3, #12
 800189a:	781b      	ldrb	r3, [r3, #0]
 800189c:	b2db      	uxtb	r3, r3
 800189e:	2b02      	cmp	r3, #2
 80018a0:	d142      	bne.n	8001928 <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 80018a2:	79fb      	ldrb	r3, [r7, #7]
 80018a4:	2100      	movs	r1, #0
 80018a6:	4618      	mov	r0, r3
 80018a8:	f7ff fc80 	bl	80011ac <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 80018ac:	4b29      	ldr	r3, [pc, #164]	; (8001954 <HW_TS_Stop+0xf8>)
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80018b2:	7cfb      	ldrb	r3, [r7, #19]
 80018b4:	2b06      	cmp	r3, #6
 80018b6:	d12f      	bne.n	8001918 <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 80018b8:	4b27      	ldr	r3, [pc, #156]	; (8001958 <HW_TS_Stop+0xfc>)
 80018ba:	689b      	ldr	r3, [r3, #8]
 80018bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018c4:	d107      	bne.n	80018d6 <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 80018c6:	bf00      	nop
 80018c8:	4b20      	ldr	r3, [pc, #128]	; (800194c <HW_TS_Stop+0xf0>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	68db      	ldr	r3, [r3, #12]
 80018ce:	f003 0304 	and.w	r3, r3, #4
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d1f8      	bne.n	80018c8 <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 80018d6:	4b1d      	ldr	r3, [pc, #116]	; (800194c <HW_TS_Stop+0xf0>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	689a      	ldr	r2, [r3, #8]
 80018dc:	4b1b      	ldr	r3, [pc, #108]	; (800194c <HW_TS_Stop+0xf0>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80018e4:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 80018e6:	bf00      	nop
 80018e8:	4b18      	ldr	r3, [pc, #96]	; (800194c <HW_TS_Stop+0xf0>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	68db      	ldr	r3, [r3, #12]
 80018ee:	f003 0304 	and.w	r3, r3, #4
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d0f8      	beq.n	80018e8 <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80018f6:	4b15      	ldr	r3, [pc, #84]	; (800194c <HW_TS_Stop+0xf0>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	68db      	ldr	r3, [r3, #12]
 80018fc:	b2da      	uxtb	r2, r3
 80018fe:	4b13      	ldr	r3, [pc, #76]	; (800194c <HW_TS_Stop+0xf0>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001906:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001908:	4b14      	ldr	r3, [pc, #80]	; (800195c <HW_TS_Stop+0x100>)
 800190a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800190e:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001910:	2003      	movs	r0, #3
 8001912:	f001 f826 	bl	8002962 <HAL_NVIC_ClearPendingIRQ>
 8001916:	e007      	b.n	8001928 <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001918:	4b11      	ldr	r3, [pc, #68]	; (8001960 <HW_TS_Stop+0x104>)
 800191a:	781b      	ldrb	r3, [r3, #0]
 800191c:	b2db      	uxtb	r3, r3
 800191e:	7cfa      	ldrb	r2, [r7, #19]
 8001920:	429a      	cmp	r2, r3
 8001922:	d001      	beq.n	8001928 <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 8001924:	f7ff fd5e 	bl	80013e4 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001928:	4b08      	ldr	r3, [pc, #32]	; (800194c <HW_TS_Stop+0xf0>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	22ff      	movs	r2, #255	; 0xff
 800192e:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001930:	2003      	movs	r0, #3
 8001932:	f000 ffe0 	bl	80028f6 <HAL_NVIC_EnableIRQ>
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800193a:	68bb      	ldr	r3, [r7, #8]
 800193c:	f383 8810 	msr	PRIMASK, r3
}
 8001940:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8001942:	bf00      	nop
}
 8001944:	3718      	adds	r7, #24
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	20000aa8 	.word	0x20000aa8
 8001950:	20000978 	.word	0x20000978
 8001954:	20000a08 	.word	0x20000a08
 8001958:	40002800 	.word	0x40002800
 800195c:	58000800 	.word	0x58000800
 8001960:	20000a09 	.word	0x20000a09

08001964 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b086      	sub	sp, #24
 8001968:	af00      	add	r7, sp, #0
 800196a:	4603      	mov	r3, r0
 800196c:	6039      	str	r1, [r7, #0]
 800196e:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001970:	79fa      	ldrb	r2, [r7, #7]
 8001972:	493b      	ldr	r1, [pc, #236]	; (8001a60 <HW_TS_Start+0xfc>)
 8001974:	4613      	mov	r3, r2
 8001976:	005b      	lsls	r3, r3, #1
 8001978:	4413      	add	r3, r2
 800197a:	00db      	lsls	r3, r3, #3
 800197c:	440b      	add	r3, r1
 800197e:	330c      	adds	r3, #12
 8001980:	781b      	ldrb	r3, [r3, #0]
 8001982:	b2db      	uxtb	r3, r3
 8001984:	2b02      	cmp	r3, #2
 8001986:	d103      	bne.n	8001990 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8001988:	79fb      	ldrb	r3, [r7, #7]
 800198a:	4618      	mov	r0, r3
 800198c:	f7ff ff66 	bl	800185c <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001990:	f3ef 8310 	mrs	r3, PRIMASK
 8001994:	60fb      	str	r3, [r7, #12]
  return(result);
 8001996:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001998:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800199a:	b672      	cpsid	i
}
 800199c:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 800199e:	2003      	movs	r0, #3
 80019a0:	f000 ffb7 	bl	8002912 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80019a4:	4b2f      	ldr	r3, [pc, #188]	; (8001a64 <HW_TS_Start+0x100>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	22ca      	movs	r2, #202	; 0xca
 80019aa:	625a      	str	r2, [r3, #36]	; 0x24
 80019ac:	4b2d      	ldr	r3, [pc, #180]	; (8001a64 <HW_TS_Start+0x100>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	2253      	movs	r2, #83	; 0x53
 80019b2:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 80019b4:	79fa      	ldrb	r2, [r7, #7]
 80019b6:	492a      	ldr	r1, [pc, #168]	; (8001a60 <HW_TS_Start+0xfc>)
 80019b8:	4613      	mov	r3, r2
 80019ba:	005b      	lsls	r3, r3, #1
 80019bc:	4413      	add	r3, r2
 80019be:	00db      	lsls	r3, r3, #3
 80019c0:	440b      	add	r3, r1
 80019c2:	330c      	adds	r3, #12
 80019c4:	2202      	movs	r2, #2
 80019c6:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 80019c8:	79fa      	ldrb	r2, [r7, #7]
 80019ca:	4925      	ldr	r1, [pc, #148]	; (8001a60 <HW_TS_Start+0xfc>)
 80019cc:	4613      	mov	r3, r2
 80019ce:	005b      	lsls	r3, r3, #1
 80019d0:	4413      	add	r3, r2
 80019d2:	00db      	lsls	r3, r3, #3
 80019d4:	440b      	add	r3, r1
 80019d6:	3308      	adds	r3, #8
 80019d8:	683a      	ldr	r2, [r7, #0]
 80019da:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 80019dc:	79fa      	ldrb	r2, [r7, #7]
 80019de:	4920      	ldr	r1, [pc, #128]	; (8001a60 <HW_TS_Start+0xfc>)
 80019e0:	4613      	mov	r3, r2
 80019e2:	005b      	lsls	r3, r3, #1
 80019e4:	4413      	add	r3, r2
 80019e6:	00db      	lsls	r3, r3, #3
 80019e8:	440b      	add	r3, r1
 80019ea:	3304      	adds	r3, #4
 80019ec:	683a      	ldr	r2, [r7, #0]
 80019ee:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 80019f0:	79fb      	ldrb	r3, [r7, #7]
 80019f2:	4618      	mov	r0, r3
 80019f4:	f7ff fb30 	bl	8001058 <linkTimer>
 80019f8:	4603      	mov	r3, r0
 80019fa:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 80019fc:	4b1a      	ldr	r3, [pc, #104]	; (8001a68 <HW_TS_Start+0x104>)
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001a02:	4b1a      	ldr	r3, [pc, #104]	; (8001a6c <HW_TS_Start+0x108>)
 8001a04:	781b      	ldrb	r3, [r3, #0]
 8001a06:	b2db      	uxtb	r3, r3
 8001a08:	7c7a      	ldrb	r2, [r7, #17]
 8001a0a:	429a      	cmp	r2, r3
 8001a0c:	d002      	beq.n	8001a14 <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 8001a0e:	f7ff fce9 	bl	80013e4 <RescheduleTimerList>
 8001a12:	e013      	b.n	8001a3c <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8001a14:	79fa      	ldrb	r2, [r7, #7]
 8001a16:	4912      	ldr	r1, [pc, #72]	; (8001a60 <HW_TS_Start+0xfc>)
 8001a18:	4613      	mov	r3, r2
 8001a1a:	005b      	lsls	r3, r3, #1
 8001a1c:	4413      	add	r3, r2
 8001a1e:	00db      	lsls	r3, r3, #3
 8001a20:	440b      	add	r3, r1
 8001a22:	3308      	adds	r3, #8
 8001a24:	6819      	ldr	r1, [r3, #0]
 8001a26:	8a7b      	ldrh	r3, [r7, #18]
 8001a28:	79fa      	ldrb	r2, [r7, #7]
 8001a2a:	1ac9      	subs	r1, r1, r3
 8001a2c:	480c      	ldr	r0, [pc, #48]	; (8001a60 <HW_TS_Start+0xfc>)
 8001a2e:	4613      	mov	r3, r2
 8001a30:	005b      	lsls	r3, r3, #1
 8001a32:	4413      	add	r3, r2
 8001a34:	00db      	lsls	r3, r3, #3
 8001a36:	4403      	add	r3, r0
 8001a38:	3308      	adds	r3, #8
 8001a3a:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001a3c:	4b09      	ldr	r3, [pc, #36]	; (8001a64 <HW_TS_Start+0x100>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	22ff      	movs	r2, #255	; 0xff
 8001a42:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001a44:	2003      	movs	r0, #3
 8001a46:	f000 ff56 	bl	80028f6 <HAL_NVIC_EnableIRQ>
 8001a4a:	697b      	ldr	r3, [r7, #20]
 8001a4c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001a4e:	68bb      	ldr	r3, [r7, #8]
 8001a50:	f383 8810 	msr	PRIMASK, r3
}
 8001a54:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8001a56:	bf00      	nop
}
 8001a58:	3718      	adds	r7, #24
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	20000978 	.word	0x20000978
 8001a64:	20000aa8 	.word	0x20000aa8
 8001a68:	20000a08 	.word	0x20000a08
 8001a6c:	20000a09 	.word	0x20000a09

08001a70 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b084      	sub	sp, #16
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	60f8      	str	r0, [r7, #12]
 8001a78:	460b      	mov	r3, r1
 8001a7a:	607a      	str	r2, [r7, #4]
 8001a7c:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	4798      	blx	r3

  return;
 8001a82:	bf00      	nop
}
 8001a84:	3710      	adds	r7, #16
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}

08001a8a <LL_RCC_LSE_SetDriveCapability>:
{
 8001a8a:	b480      	push	{r7}
 8001a8c:	b083      	sub	sp, #12
 8001a8e:	af00      	add	r7, sp, #0
 8001a90:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001a92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a9a:	f023 0218 	bic.w	r2, r3, #24
 8001a9e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001aaa:	bf00      	nop
 8001aac:	370c      	adds	r7, #12
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr

08001ab6 <LL_AHB2_GRP1_EnableClock>:
{
 8001ab6:	b480      	push	{r7}
 8001ab8:	b085      	sub	sp, #20
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001abe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ac2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001ac4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	4313      	orrs	r3, r2
 8001acc:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001ace:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ad2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001ada:	68fb      	ldr	r3, [r7, #12]
}
 8001adc:	bf00      	nop
 8001ade:	3714      	adds	r7, #20
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae6:	4770      	bx	lr

08001ae8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001aee:	f000 fd1b 	bl	8002528 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 8001af2:	f7fe ffed 	bl	8000ad0 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001af6:	f000 f857 	bl	8001ba8 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001afa:	f000 f8b7 	bl	8001c6c <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 8001afe:	f000 f915 	bl	8001d2c <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b02:	f000 f9b1 	bl	8001e68 <MX_GPIO_Init>
  MX_RTC_Init();
 8001b06:	f000 f92d 	bl	8001d64 <MX_RTC_Init>
  MX_I2C1_Init();
 8001b0a:	f000 f8cf 	bl	8001cac <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8001b0e:	f000 f95d 	bl	8001dcc <MX_USART1_UART_Init>
  MX_RF_Init();
 8001b12:	f000 f91f 	bl	8001d54 <MX_RF_Init>
  /* USER CODE BEGIN 2 */

  uint8_t status;									//see BH1780GLC.h for err codes

  printf("Configuring sensor...");
 8001b16:	481d      	ldr	r0, [pc, #116]	; (8001b8c <main+0xa4>)
 8001b18:	f007 ff26 	bl	8009968 <iprintf>
  HAL_Delay(10);									//wait as a precaution
 8001b1c:	200a      	movs	r0, #10
 8001b1e:	f7ff f94c 	bl	8000dba <HAL_Delay>
  status = BH1790GLC_init(&hrm, &hi2c1);			//configure sensor
 8001b22:	491b      	ldr	r1, [pc, #108]	; (8001b90 <main+0xa8>)
 8001b24:	481b      	ldr	r0, [pc, #108]	; (8001b94 <main+0xac>)
 8001b26:	f7fe fd05 	bl	8000534 <BH1790GLC_init>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	71fb      	strb	r3, [r7, #7]
  if(status != 0){
 8001b2e:	79fb      	ldrb	r3, [r7, #7]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d005      	beq.n	8001b40 <main+0x58>
	  printf("Error configuring sensor. Status code: %d\n\r", status);
 8001b34:	79fb      	ldrb	r3, [r7, #7]
 8001b36:	4619      	mov	r1, r3
 8001b38:	4817      	ldr	r0, [pc, #92]	; (8001b98 <main+0xb0>)
 8001b3a:	f007 ff15 	bl	8009968 <iprintf>
 8001b3e:	e004      	b.n	8001b4a <main+0x62>
  }else{
	  printf("Sensor configured successfully. Status code: %d\n\r", status);
 8001b40:	79fb      	ldrb	r3, [r7, #7]
 8001b42:	4619      	mov	r1, r3
 8001b44:	4815      	ldr	r0, [pc, #84]	; (8001b9c <main+0xb4>)
 8001b46:	f007 ff0f 	bl	8009968 <iprintf>
  }

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 8001b4a:	f7fe ffcf 	bl	8000aec <MX_APPE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_APPE_Process();
 8001b4e:	f7ff f959 	bl	8000e04 <MX_APPE_Process>

    /* USER CODE BEGIN 3 */
    uint8_t err;

    err = get_val(&hrm);
 8001b52:	4810      	ldr	r0, [pc, #64]	; (8001b94 <main+0xac>)
 8001b54:	f7fe fd8f 	bl	8000676 <get_val>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	71bb      	strb	r3, [r7, #6]
    if(err != 0){
 8001b5c:	79bb      	ldrb	r3, [r7, #6]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d005      	beq.n	8001b6e <main+0x86>
    	printf("Could not read sensor. Error code: %d\n\r", err);
 8001b62:	79bb      	ldrb	r3, [r7, #6]
 8001b64:	4619      	mov	r1, r3
 8001b66:	480e      	ldr	r0, [pc, #56]	; (8001ba0 <main+0xb8>)
 8001b68:	f007 fefe 	bl	8009968 <iprintf>
 8001b6c:	e008      	b.n	8001b80 <main+0x98>
    }else{
		printf("ppg_data[0]: %d, ppg_data[1]: %d\n\r", hrm.ppg_data[0], hrm.ppg_data[1]);
 8001b6e:	4b09      	ldr	r3, [pc, #36]	; (8001b94 <main+0xac>)
 8001b70:	791b      	ldrb	r3, [r3, #4]
 8001b72:	4619      	mov	r1, r3
 8001b74:	4b07      	ldr	r3, [pc, #28]	; (8001b94 <main+0xac>)
 8001b76:	795b      	ldrb	r3, [r3, #5]
 8001b78:	461a      	mov	r2, r3
 8001b7a:	480a      	ldr	r0, [pc, #40]	; (8001ba4 <main+0xbc>)
 8001b7c:	f007 fef4 	bl	8009968 <iprintf>
    }

    HAL_Delay(2000);
 8001b80:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001b84:	f7ff f919 	bl	8000dba <HAL_Delay>
  {
 8001b88:	e7e1      	b.n	8001b4e <main+0x66>
 8001b8a:	bf00      	nop
 8001b8c:	0800a8b8 	.word	0x0800a8b8
 8001b90:	20000a18 	.word	0x20000a18
 8001b94:	20000b60 	.word	0x20000b60
 8001b98:	0800a8d0 	.word	0x0800a8d0
 8001b9c:	0800a8fc 	.word	0x0800a8fc
 8001ba0:	0800a930 	.word	0x0800a930
 8001ba4:	0800a958 	.word	0x0800a958

08001ba8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b09a      	sub	sp, #104	; 0x68
 8001bac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001bae:	f107 0320 	add.w	r3, r7, #32
 8001bb2:	2248      	movs	r2, #72	; 0x48
 8001bb4:	2100      	movs	r1, #0
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f007 fece 	bl	8009958 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bbc:	1d3b      	adds	r3, r7, #4
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	601a      	str	r2, [r3, #0]
 8001bc2:	605a      	str	r2, [r3, #4]
 8001bc4:	609a      	str	r2, [r3, #8]
 8001bc6:	60da      	str	r2, [r3, #12]
 8001bc8:	611a      	str	r2, [r3, #16]
 8001bca:	615a      	str	r2, [r3, #20]
 8001bcc:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001bce:	f001 ff31 	bl	8003a34 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 8001bd2:	2010      	movs	r0, #16
 8001bd4:	f7ff ff59 	bl	8001a8a <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001bd8:	4b23      	ldr	r3, [pc, #140]	; (8001c68 <SystemClock_Config+0xc0>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001be0:	4a21      	ldr	r2, [pc, #132]	; (8001c68 <SystemClock_Config+0xc0>)
 8001be2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001be6:	6013      	str	r3, [r2, #0]
 8001be8:	4b1f      	ldr	r3, [pc, #124]	; (8001c68 <SystemClock_Config+0xc0>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001bf0:	603b      	str	r3, [r7, #0]
 8001bf2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8001bf4:	2327      	movs	r3, #39	; 0x27
 8001bf6:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001bf8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001bfc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c02:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c06:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001c0c:	2340      	movs	r3, #64	; 0x40
 8001c0e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001c10:	2300      	movs	r3, #0
 8001c12:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 8001c14:	23a0      	movs	r3, #160	; 0xa0
 8001c16:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c1c:	f107 0320 	add.w	r3, r7, #32
 8001c20:	4618      	mov	r0, r3
 8001c22:	f002 fa9b 	bl	800415c <HAL_RCC_OscConfig>
 8001c26:	4603      	mov	r3, r0
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d001      	beq.n	8001c30 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8001c2c:	f000 f988 	bl	8001f40 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8001c30:	236f      	movs	r3, #111	; 0x6f
 8001c32:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001c34:	2300      	movs	r3, #0
 8001c36:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c40:	2300      	movs	r3, #0
 8001c42:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8001c44:	2300      	movs	r3, #0
 8001c46:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001c4c:	1d3b      	adds	r3, r7, #4
 8001c4e:	2101      	movs	r1, #1
 8001c50:	4618      	mov	r0, r3
 8001c52:	f002 fdf7 	bl	8004844 <HAL_RCC_ClockConfig>
 8001c56:	4603      	mov	r3, r0
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d001      	beq.n	8001c60 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8001c5c:	f000 f970 	bl	8001f40 <Error_Handler>
  }
}
 8001c60:	bf00      	nop
 8001c62:	3768      	adds	r7, #104	; 0x68
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	58000400 	.word	0x58000400

08001c6c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b094      	sub	sp, #80	; 0x50
 8001c70:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c72:	463b      	mov	r3, r7
 8001c74:	2250      	movs	r2, #80	; 0x50
 8001c76:	2100      	movs	r1, #0
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f007 fe6d 	bl	8009958 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 8001c7e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001c82:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 8001c84:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001c88:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c92:	463b      	mov	r3, r7
 8001c94:	4618      	mov	r0, r3
 8001c96:	f003 fa12 	bl	80050be <HAL_RCCEx_PeriphCLKConfig>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d001      	beq.n	8001ca4 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8001ca0:	f000 f94e 	bl	8001f40 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8001ca4:	bf00      	nop
 8001ca6:	3750      	adds	r7, #80	; 0x50
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}

08001cac <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001cb0:	4b1b      	ldr	r3, [pc, #108]	; (8001d20 <MX_I2C1_Init+0x74>)
 8001cb2:	4a1c      	ldr	r2, [pc, #112]	; (8001d24 <MX_I2C1_Init+0x78>)
 8001cb4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8001cb6:	4b1a      	ldr	r3, [pc, #104]	; (8001d20 <MX_I2C1_Init+0x74>)
 8001cb8:	4a1b      	ldr	r2, [pc, #108]	; (8001d28 <MX_I2C1_Init+0x7c>)
 8001cba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001cbc:	4b18      	ldr	r3, [pc, #96]	; (8001d20 <MX_I2C1_Init+0x74>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001cc2:	4b17      	ldr	r3, [pc, #92]	; (8001d20 <MX_I2C1_Init+0x74>)
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001cc8:	4b15      	ldr	r3, [pc, #84]	; (8001d20 <MX_I2C1_Init+0x74>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001cce:	4b14      	ldr	r3, [pc, #80]	; (8001d20 <MX_I2C1_Init+0x74>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001cd4:	4b12      	ldr	r3, [pc, #72]	; (8001d20 <MX_I2C1_Init+0x74>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001cda:	4b11      	ldr	r3, [pc, #68]	; (8001d20 <MX_I2C1_Init+0x74>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ce0:	4b0f      	ldr	r3, [pc, #60]	; (8001d20 <MX_I2C1_Init+0x74>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001ce6:	480e      	ldr	r0, [pc, #56]	; (8001d20 <MX_I2C1_Init+0x74>)
 8001ce8:	f000 fff6 	bl	8002cd8 <HAL_I2C_Init>
 8001cec:	4603      	mov	r3, r0
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d001      	beq.n	8001cf6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001cf2:	f000 f925 	bl	8001f40 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001cf6:	2100      	movs	r1, #0
 8001cf8:	4809      	ldr	r0, [pc, #36]	; (8001d20 <MX_I2C1_Init+0x74>)
 8001cfa:	f001 fd7d 	bl	80037f8 <HAL_I2CEx_ConfigAnalogFilter>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d001      	beq.n	8001d08 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001d04:	f000 f91c 	bl	8001f40 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001d08:	2100      	movs	r1, #0
 8001d0a:	4805      	ldr	r0, [pc, #20]	; (8001d20 <MX_I2C1_Init+0x74>)
 8001d0c:	f001 fdbf 	bl	800388e <HAL_I2CEx_ConfigDigitalFilter>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d001      	beq.n	8001d1a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001d16:	f000 f913 	bl	8001f40 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001d1a:	bf00      	nop
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	20000a18 	.word	0x20000a18
 8001d24:	40005400 	.word	0x40005400
 8001d28:	00707cbb 	.word	0x00707cbb

08001d2c <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8001d30:	4b06      	ldr	r3, [pc, #24]	; (8001d4c <MX_IPCC_Init+0x20>)
 8001d32:	4a07      	ldr	r2, [pc, #28]	; (8001d50 <MX_IPCC_Init+0x24>)
 8001d34:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 8001d36:	4805      	ldr	r0, [pc, #20]	; (8001d4c <MX_IPCC_Init+0x20>)
 8001d38:	f001 fdf6 	bl	8003928 <HAL_IPCC_Init>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d001      	beq.n	8001d46 <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 8001d42:	f000 f8fd 	bl	8001f40 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 8001d46:	bf00      	nop
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	20000a6c 	.word	0x20000a6c
 8001d50:	58000c00 	.word	0x58000c00

08001d54 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8001d54:	b480      	push	{r7}
 8001d56:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8001d58:	bf00      	nop
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr
	...

08001d64 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001d68:	4b16      	ldr	r3, [pc, #88]	; (8001dc4 <MX_RTC_Init+0x60>)
 8001d6a:	4a17      	ldr	r2, [pc, #92]	; (8001dc8 <MX_RTC_Init+0x64>)
 8001d6c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001d6e:	4b15      	ldr	r3, [pc, #84]	; (8001dc4 <MX_RTC_Init+0x60>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8001d74:	4b13      	ldr	r3, [pc, #76]	; (8001dc4 <MX_RTC_Init+0x60>)
 8001d76:	220f      	movs	r2, #15
 8001d78:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8001d7a:	4b12      	ldr	r3, [pc, #72]	; (8001dc4 <MX_RTC_Init+0x60>)
 8001d7c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8001d80:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001d82:	4b10      	ldr	r3, [pc, #64]	; (8001dc4 <MX_RTC_Init+0x60>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001d88:	4b0e      	ldr	r3, [pc, #56]	; (8001dc4 <MX_RTC_Init+0x60>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001d8e:	4b0d      	ldr	r3, [pc, #52]	; (8001dc4 <MX_RTC_Init+0x60>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001d94:	4b0b      	ldr	r3, [pc, #44]	; (8001dc4 <MX_RTC_Init+0x60>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001d9a:	480a      	ldr	r0, [pc, #40]	; (8001dc4 <MX_RTC_Init+0x60>)
 8001d9c:	f003 fc16 	bl	80055cc <HAL_RTC_Init>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d001      	beq.n	8001daa <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8001da6:	f000 f8cb 	bl	8001f40 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8001daa:	2200      	movs	r2, #0
 8001dac:	2100      	movs	r1, #0
 8001dae:	4805      	ldr	r0, [pc, #20]	; (8001dc4 <MX_RTC_Init+0x60>)
 8001db0:	f003 fd0c 	bl	80057cc <HAL_RTCEx_SetWakeUpTimer_IT>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d001      	beq.n	8001dbe <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8001dba:	f000 f8c1 	bl	8001f40 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001dbe:	bf00      	nop
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	20000aa8 	.word	0x20000aa8
 8001dc8:	40002800 	.word	0x40002800

08001dcc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001dd0:	4b23      	ldr	r3, [pc, #140]	; (8001e60 <MX_USART1_UART_Init+0x94>)
 8001dd2:	4a24      	ldr	r2, [pc, #144]	; (8001e64 <MX_USART1_UART_Init+0x98>)
 8001dd4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001dd6:	4b22      	ldr	r3, [pc, #136]	; (8001e60 <MX_USART1_UART_Init+0x94>)
 8001dd8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ddc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001dde:	4b20      	ldr	r3, [pc, #128]	; (8001e60 <MX_USART1_UART_Init+0x94>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001de4:	4b1e      	ldr	r3, [pc, #120]	; (8001e60 <MX_USART1_UART_Init+0x94>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_ODD;
 8001dea:	4b1d      	ldr	r3, [pc, #116]	; (8001e60 <MX_USART1_UART_Init+0x94>)
 8001dec:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8001df0:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001df2:	4b1b      	ldr	r3, [pc, #108]	; (8001e60 <MX_USART1_UART_Init+0x94>)
 8001df4:	220c      	movs	r2, #12
 8001df6:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001df8:	4b19      	ldr	r3, [pc, #100]	; (8001e60 <MX_USART1_UART_Init+0x94>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001dfe:	4b18      	ldr	r3, [pc, #96]	; (8001e60 <MX_USART1_UART_Init+0x94>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e04:	4b16      	ldr	r3, [pc, #88]	; (8001e60 <MX_USART1_UART_Init+0x94>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001e0a:	4b15      	ldr	r3, [pc, #84]	; (8001e60 <MX_USART1_UART_Init+0x94>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e10:	4b13      	ldr	r3, [pc, #76]	; (8001e60 <MX_USART1_UART_Init+0x94>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001e16:	4812      	ldr	r0, [pc, #72]	; (8001e60 <MX_USART1_UART_Init+0x94>)
 8001e18:	f003 fdb4 	bl	8005984 <HAL_UART_Init>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d001      	beq.n	8001e26 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8001e22:	f000 f88d 	bl	8001f40 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e26:	2100      	movs	r1, #0
 8001e28:	480d      	ldr	r0, [pc, #52]	; (8001e60 <MX_USART1_UART_Init+0x94>)
 8001e2a:	f004 fb03 	bl	8006434 <HAL_UARTEx_SetTxFifoThreshold>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d001      	beq.n	8001e38 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8001e34:	f000 f884 	bl	8001f40 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e38:	2100      	movs	r1, #0
 8001e3a:	4809      	ldr	r0, [pc, #36]	; (8001e60 <MX_USART1_UART_Init+0x94>)
 8001e3c:	f004 fb38 	bl	80064b0 <HAL_UARTEx_SetRxFifoThreshold>
 8001e40:	4603      	mov	r3, r0
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d001      	beq.n	8001e4a <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 8001e46:	f000 f87b 	bl	8001f40 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001e4a:	4805      	ldr	r0, [pc, #20]	; (8001e60 <MX_USART1_UART_Init+0x94>)
 8001e4c:	f004 fab9 	bl	80063c2 <HAL_UARTEx_DisableFifoMode>
 8001e50:	4603      	mov	r3, r0
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d001      	beq.n	8001e5a <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 8001e56:	f000 f873 	bl	8001f40 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001e5a:	bf00      	nop
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	20000acc 	.word	0x20000acc
 8001e64:	40013800 	.word	0x40013800

08001e68 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b086      	sub	sp, #24
 8001e6c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e6e:	1d3b      	adds	r3, r7, #4
 8001e70:	2200      	movs	r2, #0
 8001e72:	601a      	str	r2, [r3, #0]
 8001e74:	605a      	str	r2, [r3, #4]
 8001e76:	609a      	str	r2, [r3, #8]
 8001e78:	60da      	str	r2, [r3, #12]
 8001e7a:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e7c:	2004      	movs	r0, #4
 8001e7e:	f7ff fe1a 	bl	8001ab6 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e82:	2002      	movs	r0, #2
 8001e84:	f7ff fe17 	bl	8001ab6 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e88:	2001      	movs	r0, #1
 8001e8a:	f7ff fe14 	bl	8001ab6 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e8e:	2008      	movs	r0, #8
 8001e90:	f7ff fe11 	bl	8001ab6 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 8001e94:	2200      	movs	r2, #0
 8001e96:	2123      	movs	r1, #35	; 0x23
 8001e98:	481d      	ldr	r0, [pc, #116]	; (8001f10 <MX_GPIO_Init+0xa8>)
 8001e9a:	f000 fee1 	bl	8002c60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001e9e:	2310      	movs	r3, #16
 8001ea0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001eaa:	1d3b      	adds	r3, r7, #4
 8001eac:	4619      	mov	r1, r3
 8001eae:	4819      	ldr	r0, [pc, #100]	; (8001f14 <MX_GPIO_Init+0xac>)
 8001eb0:	f000 fd66 	bl	8002980 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 8001eb4:	2323      	movs	r3, #35	; 0x23
 8001eb6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ec4:	1d3b      	adds	r3, r7, #4
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	4811      	ldr	r0, [pc, #68]	; (8001f10 <MX_GPIO_Init+0xa8>)
 8001eca:	f000 fd59 	bl	8002980 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001ece:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001ed2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ed4:	2302      	movs	r3, #2
 8001ed6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001edc:	2300      	movs	r3, #0
 8001ede:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8001ee0:	230a      	movs	r3, #10
 8001ee2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ee4:	1d3b      	adds	r3, r7, #4
 8001ee6:	4619      	mov	r1, r3
 8001ee8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001eec:	f000 fd48 	bl	8002980 <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 8001ef0:	2303      	movs	r3, #3
 8001ef2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001efc:	1d3b      	adds	r3, r7, #4
 8001efe:	4619      	mov	r1, r3
 8001f00:	4805      	ldr	r0, [pc, #20]	; (8001f18 <MX_GPIO_Init+0xb0>)
 8001f02:	f000 fd3d 	bl	8002980 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001f06:	bf00      	nop
 8001f08:	3718      	adds	r7, #24
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	48000400 	.word	0x48000400
 8001f14:	48000800 	.word	0x48000800
 8001f18:	48000c00 	.word	0x48000c00

08001f1c <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b082      	sub	sp, #8
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8001f24:	1d39      	adds	r1, r7, #4
 8001f26:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	4803      	ldr	r0, [pc, #12]	; (8001f3c <__io_putchar+0x20>)
 8001f2e:	f003 fd79 	bl	8005a24 <HAL_UART_Transmit>

  return ch;
 8001f32:	687b      	ldr	r3, [r7, #4]
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	3708      	adds	r7, #8
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	20000acc 	.word	0x20000acc

08001f40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f40:	b480      	push	{r7}
 8001f42:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001f44:	b672      	cpsid	i
}
 8001f46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f48:	e7fe      	b.n	8001f48 <Error_Handler+0x8>

08001f4a <LL_RCC_EnableRTC>:
{
 8001f4a:	b480      	push	{r7}
 8001f4c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001f4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f56:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f5e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001f62:	bf00      	nop
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr

08001f6c <LL_AHB2_GRP1_EnableClock>:
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b085      	sub	sp, #20
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001f74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f78:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001f7a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	4313      	orrs	r3, r2
 8001f82:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001f84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f88:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001f90:	68fb      	ldr	r3, [r7, #12]
}
 8001f92:	bf00      	nop
 8001f94:	3714      	adds	r7, #20
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr

08001f9e <LL_AHB3_GRP1_EnableClock>:
{
 8001f9e:	b480      	push	{r7}
 8001fa0:	b085      	sub	sp, #20
 8001fa2:	af00      	add	r7, sp, #0
 8001fa4:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8001fa6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001faa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001fac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8001fb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
}
 8001fc4:	bf00      	nop
 8001fc6:	3714      	adds	r7, #20
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr

08001fd0 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b085      	sub	sp, #20
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001fd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fdc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001fde:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001fe8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fec:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
}
 8001ff6:	bf00      	nop
 8001ff8:	3714      	adds	r7, #20
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr

08002002 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8002002:	b480      	push	{r7}
 8002004:	b085      	sub	sp, #20
 8002006:	af00      	add	r7, sp, #0
 8002008:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800200a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800200e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002010:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	4313      	orrs	r3, r2
 8002018:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800201a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800201e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	4013      	ands	r3, r2
 8002024:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002026:	68fb      	ldr	r3, [r7, #12]
}
 8002028:	bf00      	nop
 800202a:	3714      	adds	r7, #20
 800202c:	46bd      	mov	sp, r7
 800202e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002032:	4770      	bx	lr

08002034 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8002038:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800203c:	f7ff ffaf 	bl	8001f9e <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8002040:	2200      	movs	r2, #0
 8002042:	2100      	movs	r1, #0
 8002044:	202e      	movs	r0, #46	; 0x2e
 8002046:	f000 fc3c 	bl	80028c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 800204a:	202e      	movs	r0, #46	; 0x2e
 800204c:	f000 fc53 	bl	80028f6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002050:	bf00      	nop
 8002052:	bd80      	pop	{r7, pc}

08002054 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b09c      	sub	sp, #112	; 0x70
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800205c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002060:	2200      	movs	r2, #0
 8002062:	601a      	str	r2, [r3, #0]
 8002064:	605a      	str	r2, [r3, #4]
 8002066:	609a      	str	r2, [r3, #8]
 8002068:	60da      	str	r2, [r3, #12]
 800206a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800206c:	f107 030c 	add.w	r3, r7, #12
 8002070:	2250      	movs	r2, #80	; 0x50
 8002072:	2100      	movs	r1, #0
 8002074:	4618      	mov	r0, r3
 8002076:	f007 fc6f 	bl	8009958 <memset>
  if(hi2c->Instance==I2C1)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a1b      	ldr	r2, [pc, #108]	; (80020ec <HAL_I2C_MspInit+0x98>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d12e      	bne.n	80020e2 <HAL_I2C_MspInit+0x8e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002084:	2304      	movs	r3, #4
 8002086:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002088:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 800208c:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800208e:	f107 030c 	add.w	r3, r7, #12
 8002092:	4618      	mov	r0, r3
 8002094:	f003 f813 	bl	80050be <HAL_RCCEx_PeriphCLKConfig>
 8002098:	4603      	mov	r3, r0
 800209a:	2b00      	cmp	r3, #0
 800209c:	d001      	beq.n	80020a2 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800209e:	f7ff ff4f 	bl	8001f40 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020a2:	2002      	movs	r0, #2
 80020a4:	f7ff ff62 	bl	8001f6c <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80020a8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80020ac:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020ae:	2312      	movs	r3, #18
 80020b0:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b2:	2300      	movs	r3, #0
 80020b4:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020b6:	2300      	movs	r3, #0
 80020b8:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80020ba:	2304      	movs	r3, #4
 80020bc:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020be:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80020c2:	4619      	mov	r1, r3
 80020c4:	480a      	ldr	r0, [pc, #40]	; (80020f0 <HAL_I2C_MspInit+0x9c>)
 80020c6:	f000 fc5b 	bl	8002980 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80020ca:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80020ce:	f7ff ff7f 	bl	8001fd0 <LL_APB1_GRP1_EnableClock>
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80020d2:	2200      	movs	r2, #0
 80020d4:	2100      	movs	r1, #0
 80020d6:	201e      	movs	r0, #30
 80020d8:	f000 fbf3 	bl	80028c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80020dc:	201e      	movs	r0, #30
 80020de:	f000 fc0a 	bl	80028f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80020e2:	bf00      	nop
 80020e4:	3770      	adds	r7, #112	; 0x70
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	bf00      	nop
 80020ec:	40005400 	.word	0x40005400
 80020f0:	48000400 	.word	0x48000400

080020f4 <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b082      	sub	sp, #8
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a0d      	ldr	r2, [pc, #52]	; (8002138 <HAL_IPCC_MspInit+0x44>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d113      	bne.n	800212e <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8002106:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800210a:	f7ff ff48 	bl	8001f9e <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 800210e:	2200      	movs	r2, #0
 8002110:	2100      	movs	r1, #0
 8002112:	202c      	movs	r0, #44	; 0x2c
 8002114:	f000 fbd5 	bl	80028c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8002118:	202c      	movs	r0, #44	; 0x2c
 800211a:	f000 fbec 	bl	80028f6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 800211e:	2200      	movs	r2, #0
 8002120:	2100      	movs	r1, #0
 8002122:	202d      	movs	r0, #45	; 0x2d
 8002124:	f000 fbcd 	bl	80028c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8002128:	202d      	movs	r0, #45	; 0x2d
 800212a:	f000 fbe4 	bl	80028f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 800212e:	bf00      	nop
 8002130:	3708      	adds	r7, #8
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	58000c00 	.word	0x58000c00

0800213c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b096      	sub	sp, #88	; 0x58
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002144:	f107 0308 	add.w	r3, r7, #8
 8002148:	2250      	movs	r2, #80	; 0x50
 800214a:	2100      	movs	r1, #0
 800214c:	4618      	mov	r0, r3
 800214e:	f007 fc03 	bl	8009958 <memset>
  if(hrtc->Instance==RTC)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a12      	ldr	r2, [pc, #72]	; (80021a0 <HAL_RTC_MspInit+0x64>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d11d      	bne.n	8002198 <HAL_RTC_MspInit+0x5c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800215c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002160:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002162:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002166:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002168:	f107 0308 	add.w	r3, r7, #8
 800216c:	4618      	mov	r0, r3
 800216e:	f002 ffa6 	bl	80050be <HAL_RCCEx_PeriphCLKConfig>
 8002172:	4603      	mov	r3, r0
 8002174:	2b00      	cmp	r3, #0
 8002176:	d001      	beq.n	800217c <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8002178:	f7ff fee2 	bl	8001f40 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800217c:	f7ff fee5 	bl	8001f4a <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8002180:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002184:	f7ff ff24 	bl	8001fd0 <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8002188:	2200      	movs	r2, #0
 800218a:	2100      	movs	r1, #0
 800218c:	2003      	movs	r0, #3
 800218e:	f000 fb98 	bl	80028c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8002192:	2003      	movs	r0, #3
 8002194:	f000 fbaf 	bl	80028f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002198:	bf00      	nop
 800219a:	3758      	adds	r7, #88	; 0x58
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}
 80021a0:	40002800 	.word	0x40002800

080021a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b09c      	sub	sp, #112	; 0x70
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021ac:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80021b0:	2200      	movs	r2, #0
 80021b2:	601a      	str	r2, [r3, #0]
 80021b4:	605a      	str	r2, [r3, #4]
 80021b6:	609a      	str	r2, [r3, #8]
 80021b8:	60da      	str	r2, [r3, #12]
 80021ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80021bc:	f107 030c 	add.w	r3, r7, #12
 80021c0:	2250      	movs	r2, #80	; 0x50
 80021c2:	2100      	movs	r1, #0
 80021c4:	4618      	mov	r0, r3
 80021c6:	f007 fbc7 	bl	8009958 <memset>
  if(huart->Instance==USART1)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a16      	ldr	r2, [pc, #88]	; (8002228 <HAL_UART_MspInit+0x84>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d124      	bne.n	800221e <HAL_UART_MspInit+0x7a>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80021d4:	2301      	movs	r3, #1
 80021d6:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80021d8:	2300      	movs	r3, #0
 80021da:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80021dc:	f107 030c 	add.w	r3, r7, #12
 80021e0:	4618      	mov	r0, r3
 80021e2:	f002 ff6c 	bl	80050be <HAL_RCCEx_PeriphCLKConfig>
 80021e6:	4603      	mov	r3, r0
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d001      	beq.n	80021f0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80021ec:	f7ff fea8 	bl	8001f40 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80021f0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80021f4:	f7ff ff05 	bl	8002002 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021f8:	2002      	movs	r0, #2
 80021fa:	f7ff feb7 	bl	8001f6c <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80021fe:	23c0      	movs	r3, #192	; 0xc0
 8002200:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002202:	2302      	movs	r3, #2
 8002204:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002206:	2300      	movs	r3, #0
 8002208:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800220a:	2300      	movs	r3, #0
 800220c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800220e:	2307      	movs	r3, #7
 8002210:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002212:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002216:	4619      	mov	r1, r3
 8002218:	4804      	ldr	r0, [pc, #16]	; (800222c <HAL_UART_MspInit+0x88>)
 800221a:	f000 fbb1 	bl	8002980 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800221e:	bf00      	nop
 8002220:	3770      	adds	r7, #112	; 0x70
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	40013800 	.word	0x40013800
 800222c:	48000400 	.word	0x48000400

08002230 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002230:	b480      	push	{r7}
 8002232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002234:	e7fe      	b.n	8002234 <NMI_Handler+0x4>

08002236 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002236:	b480      	push	{r7}
 8002238:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800223a:	e7fe      	b.n	800223a <HardFault_Handler+0x4>

0800223c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800223c:	b480      	push	{r7}
 800223e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002240:	e7fe      	b.n	8002240 <MemManage_Handler+0x4>

08002242 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002242:	b480      	push	{r7}
 8002244:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002246:	e7fe      	b.n	8002246 <BusFault_Handler+0x4>

08002248 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002248:	b480      	push	{r7}
 800224a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800224c:	e7fe      	b.n	800224c <UsageFault_Handler+0x4>

0800224e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800224e:	b480      	push	{r7}
 8002250:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002252:	bf00      	nop
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr

0800225c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800225c:	b480      	push	{r7}
 800225e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002260:	bf00      	nop
 8002262:	46bd      	mov	sp, r7
 8002264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002268:	4770      	bx	lr

0800226a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800226a:	b480      	push	{r7}
 800226c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800226e:	bf00      	nop
 8002270:	46bd      	mov	sp, r7
 8002272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002276:	4770      	bx	lr

08002278 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800227c:	f000 f9ae 	bl	80025dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002280:	bf00      	nop
 8002282:	bd80      	pop	{r7, pc}

08002284 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8002288:	f7ff f946 	bl	8001518 <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 800228c:	bf00      	nop
 800228e:	bd80      	pop	{r7, pc}

08002290 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002294:	4802      	ldr	r0, [pc, #8]	; (80022a0 <I2C1_EV_IRQHandler+0x10>)
 8002296:	f000 ffdd 	bl	8003254 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800229a:	bf00      	nop
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	20000a18 	.word	0x20000a18

080022a4 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 80022a8:	f006 ff5a 	bl	8009160 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 80022ac:	bf00      	nop
 80022ae:	bd80      	pop	{r7, pc}

080022b0 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 80022b4:	f006 ff8c 	bl	80091d0 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 80022b8:	bf00      	nop
 80022ba:	bd80      	pop	{r7, pc}

080022bc <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 80022c0:	f000 fce6 	bl	8002c90 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 80022c4:	bf00      	nop
 80022c6:	bd80      	pop	{r7, pc}

080022c8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b086      	sub	sp, #24
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	60f8      	str	r0, [r7, #12]
 80022d0:	60b9      	str	r1, [r7, #8]
 80022d2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022d4:	2300      	movs	r3, #0
 80022d6:	617b      	str	r3, [r7, #20]
 80022d8:	e00a      	b.n	80022f0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80022da:	f3af 8000 	nop.w
 80022de:	4601      	mov	r1, r0
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	1c5a      	adds	r2, r3, #1
 80022e4:	60ba      	str	r2, [r7, #8]
 80022e6:	b2ca      	uxtb	r2, r1
 80022e8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	3301      	adds	r3, #1
 80022ee:	617b      	str	r3, [r7, #20]
 80022f0:	697a      	ldr	r2, [r7, #20]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	429a      	cmp	r2, r3
 80022f6:	dbf0      	blt.n	80022da <_read+0x12>
  }

  return len;
 80022f8:	687b      	ldr	r3, [r7, #4]
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	3718      	adds	r7, #24
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}

08002302 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002302:	b580      	push	{r7, lr}
 8002304:	b086      	sub	sp, #24
 8002306:	af00      	add	r7, sp, #0
 8002308:	60f8      	str	r0, [r7, #12]
 800230a:	60b9      	str	r1, [r7, #8]
 800230c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800230e:	2300      	movs	r3, #0
 8002310:	617b      	str	r3, [r7, #20]
 8002312:	e009      	b.n	8002328 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	1c5a      	adds	r2, r3, #1
 8002318:	60ba      	str	r2, [r7, #8]
 800231a:	781b      	ldrb	r3, [r3, #0]
 800231c:	4618      	mov	r0, r3
 800231e:	f7ff fdfd 	bl	8001f1c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	3301      	adds	r3, #1
 8002326:	617b      	str	r3, [r7, #20]
 8002328:	697a      	ldr	r2, [r7, #20]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	429a      	cmp	r2, r3
 800232e:	dbf1      	blt.n	8002314 <_write+0x12>
  }
  return len;
 8002330:	687b      	ldr	r3, [r7, #4]
}
 8002332:	4618      	mov	r0, r3
 8002334:	3718      	adds	r7, #24
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}

0800233a <_close>:

int _close(int file)
{
 800233a:	b480      	push	{r7}
 800233c:	b083      	sub	sp, #12
 800233e:	af00      	add	r7, sp, #0
 8002340:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002342:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002346:	4618      	mov	r0, r3
 8002348:	370c      	adds	r7, #12
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr

08002352 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002352:	b480      	push	{r7}
 8002354:	b083      	sub	sp, #12
 8002356:	af00      	add	r7, sp, #0
 8002358:	6078      	str	r0, [r7, #4]
 800235a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002362:	605a      	str	r2, [r3, #4]
  return 0;
 8002364:	2300      	movs	r3, #0
}
 8002366:	4618      	mov	r0, r3
 8002368:	370c      	adds	r7, #12
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr

08002372 <_isatty>:

int _isatty(int file)
{
 8002372:	b480      	push	{r7}
 8002374:	b083      	sub	sp, #12
 8002376:	af00      	add	r7, sp, #0
 8002378:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800237a:	2301      	movs	r3, #1
}
 800237c:	4618      	mov	r0, r3
 800237e:	370c      	adds	r7, #12
 8002380:	46bd      	mov	sp, r7
 8002382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002386:	4770      	bx	lr

08002388 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002388:	b480      	push	{r7}
 800238a:	b085      	sub	sp, #20
 800238c:	af00      	add	r7, sp, #0
 800238e:	60f8      	str	r0, [r7, #12]
 8002390:	60b9      	str	r1, [r7, #8]
 8002392:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002394:	2300      	movs	r3, #0
}
 8002396:	4618      	mov	r0, r3
 8002398:	3714      	adds	r7, #20
 800239a:	46bd      	mov	sp, r7
 800239c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a0:	4770      	bx	lr
	...

080023a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b086      	sub	sp, #24
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80023ac:	4a14      	ldr	r2, [pc, #80]	; (8002400 <_sbrk+0x5c>)
 80023ae:	4b15      	ldr	r3, [pc, #84]	; (8002404 <_sbrk+0x60>)
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80023b8:	4b13      	ldr	r3, [pc, #76]	; (8002408 <_sbrk+0x64>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d102      	bne.n	80023c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80023c0:	4b11      	ldr	r3, [pc, #68]	; (8002408 <_sbrk+0x64>)
 80023c2:	4a12      	ldr	r2, [pc, #72]	; (800240c <_sbrk+0x68>)
 80023c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023c6:	4b10      	ldr	r3, [pc, #64]	; (8002408 <_sbrk+0x64>)
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	4413      	add	r3, r2
 80023ce:	693a      	ldr	r2, [r7, #16]
 80023d0:	429a      	cmp	r2, r3
 80023d2:	d207      	bcs.n	80023e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80023d4:	f007 fa88 	bl	80098e8 <__errno>
 80023d8:	4603      	mov	r3, r0
 80023da:	220c      	movs	r2, #12
 80023dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80023de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80023e2:	e009      	b.n	80023f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023e4:	4b08      	ldr	r3, [pc, #32]	; (8002408 <_sbrk+0x64>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023ea:	4b07      	ldr	r3, [pc, #28]	; (8002408 <_sbrk+0x64>)
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	4413      	add	r3, r2
 80023f2:	4a05      	ldr	r2, [pc, #20]	; (8002408 <_sbrk+0x64>)
 80023f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023f6:	68fb      	ldr	r3, [r7, #12]
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	3718      	adds	r7, #24
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}
 8002400:	20030000 	.word	0x20030000
 8002404:	00000400 	.word	0x00000400
 8002408:	20000b68 	.word	0x20000b68
 800240c:	20000d30 	.word	0x20000d30

08002410 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002410:	b480      	push	{r7}
 8002412:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8002414:	4b24      	ldr	r3, [pc, #144]	; (80024a8 <SystemInit+0x98>)
 8002416:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800241a:	4a23      	ldr	r2, [pc, #140]	; (80024a8 <SystemInit+0x98>)
 800241c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002420:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002424:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800242e:	f043 0301 	orr.w	r3, r3, #1
 8002432:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8002434:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002438:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 800243c:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 800243e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002448:	4b18      	ldr	r3, [pc, #96]	; (80024ac <SystemInit+0x9c>)
 800244a:	4013      	ands	r3, r2
 800244c:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 800244e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002452:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002456:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800245a:	f023 0305 	bic.w	r3, r3, #5
 800245e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8002462:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002466:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800246a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800246e:	f023 0301 	bic.w	r3, r3, #1
 8002472:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8002476:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800247a:	4a0d      	ldr	r2, [pc, #52]	; (80024b0 <SystemInit+0xa0>)
 800247c:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 800247e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002482:	4a0b      	ldr	r2, [pc, #44]	; (80024b0 <SystemInit+0xa0>)
 8002484:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002486:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002490:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002494:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002496:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800249a:	2200      	movs	r2, #0
 800249c:	619a      	str	r2, [r3, #24]
}
 800249e:	bf00      	nop
 80024a0:	46bd      	mov	sp, r7
 80024a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a6:	4770      	bx	lr
 80024a8:	e000ed00 	.word	0xe000ed00
 80024ac:	faf6fefb 	.word	0xfaf6fefb
 80024b0:	22041000 	.word	0x22041000

080024b4 <CopyDataInit>:
 80024b4:	58d4      	ldr	r4, [r2, r3]
 80024b6:	50c4      	str	r4, [r0, r3]
 80024b8:	3304      	adds	r3, #4

080024ba <LoopCopyDataInit>:
 80024ba:	18c4      	adds	r4, r0, r3
 80024bc:	428c      	cmp	r4, r1
 80024be:	d3f9      	bcc.n	80024b4 <CopyDataInit>
 80024c0:	4770      	bx	lr

080024c2 <FillZerobss>:
 80024c2:	6003      	str	r3, [r0, #0]
 80024c4:	3004      	adds	r0, #4

080024c6 <LoopFillZerobss>:
 80024c6:	4288      	cmp	r0, r1
 80024c8:	d3fb      	bcc.n	80024c2 <FillZerobss>
 80024ca:	4770      	bx	lr

080024cc <Reset_Handler>:
 80024cc:	480c      	ldr	r0, [pc, #48]	; (8002500 <LoopForever+0x2>)
 80024ce:	4685      	mov	sp, r0
 80024d0:	f7ff ff9e 	bl	8002410 <SystemInit>
 80024d4:	480b      	ldr	r0, [pc, #44]	; (8002504 <LoopForever+0x6>)
 80024d6:	490c      	ldr	r1, [pc, #48]	; (8002508 <LoopForever+0xa>)
 80024d8:	4a0c      	ldr	r2, [pc, #48]	; (800250c <LoopForever+0xe>)
 80024da:	2300      	movs	r3, #0
 80024dc:	f7ff ffed 	bl	80024ba <LoopCopyDataInit>
 80024e0:	480b      	ldr	r0, [pc, #44]	; (8002510 <LoopForever+0x12>)
 80024e2:	490c      	ldr	r1, [pc, #48]	; (8002514 <LoopForever+0x16>)
 80024e4:	4a0c      	ldr	r2, [pc, #48]	; (8002518 <LoopForever+0x1a>)
 80024e6:	2300      	movs	r3, #0
 80024e8:	f7ff ffe7 	bl	80024ba <LoopCopyDataInit>
 80024ec:	480b      	ldr	r0, [pc, #44]	; (800251c <LoopForever+0x1e>)
 80024ee:	490c      	ldr	r1, [pc, #48]	; (8002520 <LoopForever+0x22>)
 80024f0:	2300      	movs	r3, #0
 80024f2:	f7ff ffe8 	bl	80024c6 <LoopFillZerobss>
 80024f6:	f007 f9fd 	bl	80098f4 <__libc_init_array>
 80024fa:	f7ff faf5 	bl	8001ae8 <main>

080024fe <LoopForever>:
 80024fe:	e7fe      	b.n	80024fe <LoopForever>
 8002500:	20030000 	.word	0x20030000
 8002504:	20000008 	.word	0x20000008
 8002508:	2000008c 	.word	0x2000008c
 800250c:	0800acc8 	.word	0x0800acc8
 8002510:	200301e3 	.word	0x200301e3
 8002514:	200301e3 	.word	0x200301e3
 8002518:	0800b615 	.word	0x0800b615
 800251c:	2000095c 	.word	0x2000095c
 8002520:	20000d2c 	.word	0x20000d2c

08002524 <ADC1_IRQHandler>:
 8002524:	e7fe      	b.n	8002524 <ADC1_IRQHandler>
	...

08002528 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b082      	sub	sp, #8
 800252c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800252e:	2300      	movs	r3, #0
 8002530:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002532:	4b0c      	ldr	r3, [pc, #48]	; (8002564 <HAL_Init+0x3c>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a0b      	ldr	r2, [pc, #44]	; (8002564 <HAL_Init+0x3c>)
 8002538:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800253c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800253e:	2003      	movs	r0, #3
 8002540:	f000 f9b4 	bl	80028ac <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002544:	2000      	movs	r0, #0
 8002546:	f000 f80f 	bl	8002568 <HAL_InitTick>
 800254a:	4603      	mov	r3, r0
 800254c:	2b00      	cmp	r3, #0
 800254e:	d002      	beq.n	8002556 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002550:	2301      	movs	r3, #1
 8002552:	71fb      	strb	r3, [r7, #7]
 8002554:	e001      	b.n	800255a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002556:	f7ff fd6d 	bl	8002034 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800255a:	79fb      	ldrb	r3, [r7, #7]
}
 800255c:	4618      	mov	r0, r3
 800255e:	3708      	adds	r7, #8
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}
 8002564:	58004000 	.word	0x58004000

08002568 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b084      	sub	sp, #16
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002570:	2300      	movs	r3, #0
 8002572:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8002574:	4b17      	ldr	r3, [pc, #92]	; (80025d4 <HAL_InitTick+0x6c>)
 8002576:	781b      	ldrb	r3, [r3, #0]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d024      	beq.n	80025c6 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800257c:	f002 fb0e 	bl	8004b9c <HAL_RCC_GetHCLKFreq>
 8002580:	4602      	mov	r2, r0
 8002582:	4b14      	ldr	r3, [pc, #80]	; (80025d4 <HAL_InitTick+0x6c>)
 8002584:	781b      	ldrb	r3, [r3, #0]
 8002586:	4619      	mov	r1, r3
 8002588:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800258c:	fbb3 f3f1 	udiv	r3, r3, r1
 8002590:	fbb2 f3f3 	udiv	r3, r2, r3
 8002594:	4618      	mov	r0, r3
 8002596:	f000 f9ca 	bl	800292e <HAL_SYSTICK_Config>
 800259a:	4603      	mov	r3, r0
 800259c:	2b00      	cmp	r3, #0
 800259e:	d10f      	bne.n	80025c0 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2b0f      	cmp	r3, #15
 80025a4:	d809      	bhi.n	80025ba <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025a6:	2200      	movs	r2, #0
 80025a8:	6879      	ldr	r1, [r7, #4]
 80025aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80025ae:	f000 f988 	bl	80028c2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80025b2:	4a09      	ldr	r2, [pc, #36]	; (80025d8 <HAL_InitTick+0x70>)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6013      	str	r3, [r2, #0]
 80025b8:	e007      	b.n	80025ca <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	73fb      	strb	r3, [r7, #15]
 80025be:	e004      	b.n	80025ca <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 80025c0:	2301      	movs	r3, #1
 80025c2:	73fb      	strb	r3, [r7, #15]
 80025c4:	e001      	b.n	80025ca <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80025ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	3710      	adds	r7, #16
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}
 80025d4:	20000010 	.word	0x20000010
 80025d8:	2000000c 	.word	0x2000000c

080025dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025dc:	b480      	push	{r7}
 80025de:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80025e0:	4b06      	ldr	r3, [pc, #24]	; (80025fc <HAL_IncTick+0x20>)
 80025e2:	781b      	ldrb	r3, [r3, #0]
 80025e4:	461a      	mov	r2, r3
 80025e6:	4b06      	ldr	r3, [pc, #24]	; (8002600 <HAL_IncTick+0x24>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4413      	add	r3, r2
 80025ec:	4a04      	ldr	r2, [pc, #16]	; (8002600 <HAL_IncTick+0x24>)
 80025ee:	6013      	str	r3, [r2, #0]
}
 80025f0:	bf00      	nop
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr
 80025fa:	bf00      	nop
 80025fc:	20000010 	.word	0x20000010
 8002600:	20000b6c 	.word	0x20000b6c

08002604 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002604:	b480      	push	{r7}
 8002606:	af00      	add	r7, sp, #0
  return uwTick;
 8002608:	4b03      	ldr	r3, [pc, #12]	; (8002618 <HAL_GetTick+0x14>)
 800260a:	681b      	ldr	r3, [r3, #0]
}
 800260c:	4618      	mov	r0, r3
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr
 8002616:	bf00      	nop
 8002618:	20000b6c 	.word	0x20000b6c

0800261c <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 800261c:	b480      	push	{r7}
 800261e:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8002620:	4b03      	ldr	r3, [pc, #12]	; (8002630 <HAL_GetTickPrio+0x14>)
 8002622:	681b      	ldr	r3, [r3, #0]
}
 8002624:	4618      	mov	r0, r3
 8002626:	46bd      	mov	sp, r7
 8002628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262c:	4770      	bx	lr
 800262e:	bf00      	nop
 8002630:	2000000c 	.word	0x2000000c

08002634 <HAL_GetTickFreq>:
/**
  * @brief Return tick frequency.
  * @retval tick period in Hz
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 8002634:	b480      	push	{r7}
 8002636:	af00      	add	r7, sp, #0
  return uwTickFreq;
 8002638:	4b03      	ldr	r3, [pc, #12]	; (8002648 <HAL_GetTickFreq+0x14>)
 800263a:	781b      	ldrb	r3, [r3, #0]
}
 800263c:	4618      	mov	r0, r3
 800263e:	46bd      	mov	sp, r7
 8002640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002644:	4770      	bx	lr
 8002646:	bf00      	nop
 8002648:	20000010 	.word	0x20000010

0800264c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800264c:	b480      	push	{r7}
 800264e:	b085      	sub	sp, #20
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	f003 0307 	and.w	r3, r3, #7
 800265a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800265c:	4b0c      	ldr	r3, [pc, #48]	; (8002690 <__NVIC_SetPriorityGrouping+0x44>)
 800265e:	68db      	ldr	r3, [r3, #12]
 8002660:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002662:	68ba      	ldr	r2, [r7, #8]
 8002664:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002668:	4013      	ands	r3, r2
 800266a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002674:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002678:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800267c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800267e:	4a04      	ldr	r2, [pc, #16]	; (8002690 <__NVIC_SetPriorityGrouping+0x44>)
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	60d3      	str	r3, [r2, #12]
}
 8002684:	bf00      	nop
 8002686:	3714      	adds	r7, #20
 8002688:	46bd      	mov	sp, r7
 800268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268e:	4770      	bx	lr
 8002690:	e000ed00 	.word	0xe000ed00

08002694 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002694:	b480      	push	{r7}
 8002696:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002698:	4b04      	ldr	r3, [pc, #16]	; (80026ac <__NVIC_GetPriorityGrouping+0x18>)
 800269a:	68db      	ldr	r3, [r3, #12]
 800269c:	0a1b      	lsrs	r3, r3, #8
 800269e:	f003 0307 	and.w	r3, r3, #7
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr
 80026ac:	e000ed00 	.word	0xe000ed00

080026b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b083      	sub	sp, #12
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	4603      	mov	r3, r0
 80026b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	db0b      	blt.n	80026da <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026c2:	79fb      	ldrb	r3, [r7, #7]
 80026c4:	f003 021f 	and.w	r2, r3, #31
 80026c8:	4907      	ldr	r1, [pc, #28]	; (80026e8 <__NVIC_EnableIRQ+0x38>)
 80026ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ce:	095b      	lsrs	r3, r3, #5
 80026d0:	2001      	movs	r0, #1
 80026d2:	fa00 f202 	lsl.w	r2, r0, r2
 80026d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80026da:	bf00      	nop
 80026dc:	370c      	adds	r7, #12
 80026de:	46bd      	mov	sp, r7
 80026e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e4:	4770      	bx	lr
 80026e6:	bf00      	nop
 80026e8:	e000e100 	.word	0xe000e100

080026ec <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b083      	sub	sp, #12
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	4603      	mov	r3, r0
 80026f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	db12      	blt.n	8002724 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026fe:	79fb      	ldrb	r3, [r7, #7]
 8002700:	f003 021f 	and.w	r2, r3, #31
 8002704:	490a      	ldr	r1, [pc, #40]	; (8002730 <__NVIC_DisableIRQ+0x44>)
 8002706:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800270a:	095b      	lsrs	r3, r3, #5
 800270c:	2001      	movs	r0, #1
 800270e:	fa00 f202 	lsl.w	r2, r0, r2
 8002712:	3320      	adds	r3, #32
 8002714:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002718:	f3bf 8f4f 	dsb	sy
}
 800271c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800271e:	f3bf 8f6f 	isb	sy
}
 8002722:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002724:	bf00      	nop
 8002726:	370c      	adds	r7, #12
 8002728:	46bd      	mov	sp, r7
 800272a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272e:	4770      	bx	lr
 8002730:	e000e100 	.word	0xe000e100

08002734 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8002734:	b480      	push	{r7}
 8002736:	b083      	sub	sp, #12
 8002738:	af00      	add	r7, sp, #0
 800273a:	4603      	mov	r3, r0
 800273c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800273e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002742:	2b00      	cmp	r3, #0
 8002744:	db0c      	blt.n	8002760 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002746:	79fb      	ldrb	r3, [r7, #7]
 8002748:	f003 021f 	and.w	r2, r3, #31
 800274c:	4907      	ldr	r1, [pc, #28]	; (800276c <__NVIC_SetPendingIRQ+0x38>)
 800274e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002752:	095b      	lsrs	r3, r3, #5
 8002754:	2001      	movs	r0, #1
 8002756:	fa00 f202 	lsl.w	r2, r0, r2
 800275a:	3340      	adds	r3, #64	; 0x40
 800275c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002760:	bf00      	nop
 8002762:	370c      	adds	r7, #12
 8002764:	46bd      	mov	sp, r7
 8002766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276a:	4770      	bx	lr
 800276c:	e000e100 	.word	0xe000e100

08002770 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8002770:	b480      	push	{r7}
 8002772:	b083      	sub	sp, #12
 8002774:	af00      	add	r7, sp, #0
 8002776:	4603      	mov	r3, r0
 8002778:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800277a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800277e:	2b00      	cmp	r3, #0
 8002780:	db0c      	blt.n	800279c <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002782:	79fb      	ldrb	r3, [r7, #7]
 8002784:	f003 021f 	and.w	r2, r3, #31
 8002788:	4907      	ldr	r1, [pc, #28]	; (80027a8 <__NVIC_ClearPendingIRQ+0x38>)
 800278a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800278e:	095b      	lsrs	r3, r3, #5
 8002790:	2001      	movs	r0, #1
 8002792:	fa00 f202 	lsl.w	r2, r0, r2
 8002796:	3360      	adds	r3, #96	; 0x60
 8002798:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800279c:	bf00      	nop
 800279e:	370c      	adds	r7, #12
 80027a0:	46bd      	mov	sp, r7
 80027a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a6:	4770      	bx	lr
 80027a8:	e000e100 	.word	0xe000e100

080027ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b083      	sub	sp, #12
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	4603      	mov	r3, r0
 80027b4:	6039      	str	r1, [r7, #0]
 80027b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	db0a      	blt.n	80027d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	b2da      	uxtb	r2, r3
 80027c4:	490c      	ldr	r1, [pc, #48]	; (80027f8 <__NVIC_SetPriority+0x4c>)
 80027c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ca:	0112      	lsls	r2, r2, #4
 80027cc:	b2d2      	uxtb	r2, r2
 80027ce:	440b      	add	r3, r1
 80027d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027d4:	e00a      	b.n	80027ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	b2da      	uxtb	r2, r3
 80027da:	4908      	ldr	r1, [pc, #32]	; (80027fc <__NVIC_SetPriority+0x50>)
 80027dc:	79fb      	ldrb	r3, [r7, #7]
 80027de:	f003 030f 	and.w	r3, r3, #15
 80027e2:	3b04      	subs	r3, #4
 80027e4:	0112      	lsls	r2, r2, #4
 80027e6:	b2d2      	uxtb	r2, r2
 80027e8:	440b      	add	r3, r1
 80027ea:	761a      	strb	r2, [r3, #24]
}
 80027ec:	bf00      	nop
 80027ee:	370c      	adds	r7, #12
 80027f0:	46bd      	mov	sp, r7
 80027f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f6:	4770      	bx	lr
 80027f8:	e000e100 	.word	0xe000e100
 80027fc:	e000ed00 	.word	0xe000ed00

08002800 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002800:	b480      	push	{r7}
 8002802:	b089      	sub	sp, #36	; 0x24
 8002804:	af00      	add	r7, sp, #0
 8002806:	60f8      	str	r0, [r7, #12]
 8002808:	60b9      	str	r1, [r7, #8]
 800280a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	f003 0307 	and.w	r3, r3, #7
 8002812:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002814:	69fb      	ldr	r3, [r7, #28]
 8002816:	f1c3 0307 	rsb	r3, r3, #7
 800281a:	2b04      	cmp	r3, #4
 800281c:	bf28      	it	cs
 800281e:	2304      	movcs	r3, #4
 8002820:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002822:	69fb      	ldr	r3, [r7, #28]
 8002824:	3304      	adds	r3, #4
 8002826:	2b06      	cmp	r3, #6
 8002828:	d902      	bls.n	8002830 <NVIC_EncodePriority+0x30>
 800282a:	69fb      	ldr	r3, [r7, #28]
 800282c:	3b03      	subs	r3, #3
 800282e:	e000      	b.n	8002832 <NVIC_EncodePriority+0x32>
 8002830:	2300      	movs	r3, #0
 8002832:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002834:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002838:	69bb      	ldr	r3, [r7, #24]
 800283a:	fa02 f303 	lsl.w	r3, r2, r3
 800283e:	43da      	mvns	r2, r3
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	401a      	ands	r2, r3
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002848:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	fa01 f303 	lsl.w	r3, r1, r3
 8002852:	43d9      	mvns	r1, r3
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002858:	4313      	orrs	r3, r2
         );
}
 800285a:	4618      	mov	r0, r3
 800285c:	3724      	adds	r7, #36	; 0x24
 800285e:	46bd      	mov	sp, r7
 8002860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002864:	4770      	bx	lr
	...

08002868 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b082      	sub	sp, #8
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	3b01      	subs	r3, #1
 8002874:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002878:	d301      	bcc.n	800287e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800287a:	2301      	movs	r3, #1
 800287c:	e00f      	b.n	800289e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800287e:	4a0a      	ldr	r2, [pc, #40]	; (80028a8 <SysTick_Config+0x40>)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	3b01      	subs	r3, #1
 8002884:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002886:	210f      	movs	r1, #15
 8002888:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800288c:	f7ff ff8e 	bl	80027ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002890:	4b05      	ldr	r3, [pc, #20]	; (80028a8 <SysTick_Config+0x40>)
 8002892:	2200      	movs	r2, #0
 8002894:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002896:	4b04      	ldr	r3, [pc, #16]	; (80028a8 <SysTick_Config+0x40>)
 8002898:	2207      	movs	r2, #7
 800289a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800289c:	2300      	movs	r3, #0
}
 800289e:	4618      	mov	r0, r3
 80028a0:	3708      	adds	r7, #8
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}
 80028a6:	bf00      	nop
 80028a8:	e000e010 	.word	0xe000e010

080028ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b082      	sub	sp, #8
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028b4:	6878      	ldr	r0, [r7, #4]
 80028b6:	f7ff fec9 	bl	800264c <__NVIC_SetPriorityGrouping>
}
 80028ba:	bf00      	nop
 80028bc:	3708      	adds	r7, #8
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}

080028c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028c2:	b580      	push	{r7, lr}
 80028c4:	b086      	sub	sp, #24
 80028c6:	af00      	add	r7, sp, #0
 80028c8:	4603      	mov	r3, r0
 80028ca:	60b9      	str	r1, [r7, #8]
 80028cc:	607a      	str	r2, [r7, #4]
 80028ce:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80028d0:	f7ff fee0 	bl	8002694 <__NVIC_GetPriorityGrouping>
 80028d4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028d6:	687a      	ldr	r2, [r7, #4]
 80028d8:	68b9      	ldr	r1, [r7, #8]
 80028da:	6978      	ldr	r0, [r7, #20]
 80028dc:	f7ff ff90 	bl	8002800 <NVIC_EncodePriority>
 80028e0:	4602      	mov	r2, r0
 80028e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028e6:	4611      	mov	r1, r2
 80028e8:	4618      	mov	r0, r3
 80028ea:	f7ff ff5f 	bl	80027ac <__NVIC_SetPriority>
}
 80028ee:	bf00      	nop
 80028f0:	3718      	adds	r7, #24
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}

080028f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028f6:	b580      	push	{r7, lr}
 80028f8:	b082      	sub	sp, #8
 80028fa:	af00      	add	r7, sp, #0
 80028fc:	4603      	mov	r3, r0
 80028fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002900:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002904:	4618      	mov	r0, r3
 8002906:	f7ff fed3 	bl	80026b0 <__NVIC_EnableIRQ>
}
 800290a:	bf00      	nop
 800290c:	3708      	adds	r7, #8
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}

08002912 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002912:	b580      	push	{r7, lr}
 8002914:	b082      	sub	sp, #8
 8002916:	af00      	add	r7, sp, #0
 8002918:	4603      	mov	r3, r0
 800291a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800291c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002920:	4618      	mov	r0, r3
 8002922:	f7ff fee3 	bl	80026ec <__NVIC_DisableIRQ>
}
 8002926:	bf00      	nop
 8002928:	3708      	adds	r7, #8
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}

0800292e <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800292e:	b580      	push	{r7, lr}
 8002930:	b082      	sub	sp, #8
 8002932:	af00      	add	r7, sp, #0
 8002934:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002936:	6878      	ldr	r0, [r7, #4]
 8002938:	f7ff ff96 	bl	8002868 <SysTick_Config>
 800293c:	4603      	mov	r3, r0
}
 800293e:	4618      	mov	r0, r3
 8002940:	3708      	adds	r7, #8
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}

08002946 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8002946:	b580      	push	{r7, lr}
 8002948:	b082      	sub	sp, #8
 800294a:	af00      	add	r7, sp, #0
 800294c:	4603      	mov	r3, r0
 800294e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8002950:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002954:	4618      	mov	r0, r3
 8002956:	f7ff feed 	bl	8002734 <__NVIC_SetPendingIRQ>
}
 800295a:	bf00      	nop
 800295c:	3708      	adds	r7, #8
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}

08002962 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8002962:	b580      	push	{r7, lr}
 8002964:	b082      	sub	sp, #8
 8002966:	af00      	add	r7, sp, #0
 8002968:	4603      	mov	r3, r0
 800296a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 800296c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002970:	4618      	mov	r0, r3
 8002972:	f7ff fefd 	bl	8002770 <__NVIC_ClearPendingIRQ>
}
 8002976:	bf00      	nop
 8002978:	3708      	adds	r7, #8
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}
	...

08002980 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002980:	b480      	push	{r7}
 8002982:	b087      	sub	sp, #28
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
 8002988:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800298a:	2300      	movs	r3, #0
 800298c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800298e:	e14c      	b.n	8002c2a <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	2101      	movs	r1, #1
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	fa01 f303 	lsl.w	r3, r1, r3
 800299c:	4013      	ands	r3, r2
 800299e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	f000 813e 	beq.w	8002c24 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	f003 0303 	and.w	r3, r3, #3
 80029b0:	2b01      	cmp	r3, #1
 80029b2:	d005      	beq.n	80029c0 <HAL_GPIO_Init+0x40>
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	f003 0303 	and.w	r3, r3, #3
 80029bc:	2b02      	cmp	r3, #2
 80029be:	d130      	bne.n	8002a22 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	005b      	lsls	r3, r3, #1
 80029ca:	2203      	movs	r2, #3
 80029cc:	fa02 f303 	lsl.w	r3, r2, r3
 80029d0:	43db      	mvns	r3, r3
 80029d2:	693a      	ldr	r2, [r7, #16]
 80029d4:	4013      	ands	r3, r2
 80029d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	68da      	ldr	r2, [r3, #12]
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	005b      	lsls	r3, r3, #1
 80029e0:	fa02 f303 	lsl.w	r3, r2, r3
 80029e4:	693a      	ldr	r2, [r7, #16]
 80029e6:	4313      	orrs	r3, r2
 80029e8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	693a      	ldr	r2, [r7, #16]
 80029ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80029f6:	2201      	movs	r2, #1
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	fa02 f303 	lsl.w	r3, r2, r3
 80029fe:	43db      	mvns	r3, r3
 8002a00:	693a      	ldr	r2, [r7, #16]
 8002a02:	4013      	ands	r3, r2
 8002a04:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	091b      	lsrs	r3, r3, #4
 8002a0c:	f003 0201 	and.w	r2, r3, #1
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	fa02 f303 	lsl.w	r3, r2, r3
 8002a16:	693a      	ldr	r2, [r7, #16]
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	693a      	ldr	r2, [r7, #16]
 8002a20:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	f003 0303 	and.w	r3, r3, #3
 8002a2a:	2b03      	cmp	r3, #3
 8002a2c:	d017      	beq.n	8002a5e <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	68db      	ldr	r3, [r3, #12]
 8002a32:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	005b      	lsls	r3, r3, #1
 8002a38:	2203      	movs	r2, #3
 8002a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3e:	43db      	mvns	r3, r3
 8002a40:	693a      	ldr	r2, [r7, #16]
 8002a42:	4013      	ands	r3, r2
 8002a44:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	689a      	ldr	r2, [r3, #8]
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	005b      	lsls	r3, r3, #1
 8002a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a52:	693a      	ldr	r2, [r7, #16]
 8002a54:	4313      	orrs	r3, r2
 8002a56:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	693a      	ldr	r2, [r7, #16]
 8002a5c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	f003 0303 	and.w	r3, r3, #3
 8002a66:	2b02      	cmp	r3, #2
 8002a68:	d123      	bne.n	8002ab2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	08da      	lsrs	r2, r3, #3
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	3208      	adds	r2, #8
 8002a72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a76:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	f003 0307 	and.w	r3, r3, #7
 8002a7e:	009b      	lsls	r3, r3, #2
 8002a80:	220f      	movs	r2, #15
 8002a82:	fa02 f303 	lsl.w	r3, r2, r3
 8002a86:	43db      	mvns	r3, r3
 8002a88:	693a      	ldr	r2, [r7, #16]
 8002a8a:	4013      	ands	r3, r2
 8002a8c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	691a      	ldr	r2, [r3, #16]
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	f003 0307 	and.w	r3, r3, #7
 8002a98:	009b      	lsls	r3, r3, #2
 8002a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9e:	693a      	ldr	r2, [r7, #16]
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	08da      	lsrs	r2, r3, #3
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	3208      	adds	r2, #8
 8002aac:	6939      	ldr	r1, [r7, #16]
 8002aae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	005b      	lsls	r3, r3, #1
 8002abc:	2203      	movs	r2, #3
 8002abe:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac2:	43db      	mvns	r3, r3
 8002ac4:	693a      	ldr	r2, [r7, #16]
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	f003 0203 	and.w	r2, r3, #3
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	005b      	lsls	r3, r3, #1
 8002ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8002ada:	693a      	ldr	r2, [r7, #16]
 8002adc:	4313      	orrs	r3, r2
 8002ade:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	693a      	ldr	r2, [r7, #16]
 8002ae4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	f000 8098 	beq.w	8002c24 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8002af4:	4a54      	ldr	r2, [pc, #336]	; (8002c48 <HAL_GPIO_Init+0x2c8>)
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	089b      	lsrs	r3, r3, #2
 8002afa:	3302      	adds	r3, #2
 8002afc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b00:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	f003 0303 	and.w	r3, r3, #3
 8002b08:	009b      	lsls	r3, r3, #2
 8002b0a:	220f      	movs	r2, #15
 8002b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b10:	43db      	mvns	r3, r3
 8002b12:	693a      	ldr	r2, [r7, #16]
 8002b14:	4013      	ands	r3, r2
 8002b16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002b1e:	d019      	beq.n	8002b54 <HAL_GPIO_Init+0x1d4>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	4a4a      	ldr	r2, [pc, #296]	; (8002c4c <HAL_GPIO_Init+0x2cc>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d013      	beq.n	8002b50 <HAL_GPIO_Init+0x1d0>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	4a49      	ldr	r2, [pc, #292]	; (8002c50 <HAL_GPIO_Init+0x2d0>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d00d      	beq.n	8002b4c <HAL_GPIO_Init+0x1cc>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	4a48      	ldr	r2, [pc, #288]	; (8002c54 <HAL_GPIO_Init+0x2d4>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d007      	beq.n	8002b48 <HAL_GPIO_Init+0x1c8>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	4a47      	ldr	r2, [pc, #284]	; (8002c58 <HAL_GPIO_Init+0x2d8>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d101      	bne.n	8002b44 <HAL_GPIO_Init+0x1c4>
 8002b40:	2304      	movs	r3, #4
 8002b42:	e008      	b.n	8002b56 <HAL_GPIO_Init+0x1d6>
 8002b44:	2307      	movs	r3, #7
 8002b46:	e006      	b.n	8002b56 <HAL_GPIO_Init+0x1d6>
 8002b48:	2303      	movs	r3, #3
 8002b4a:	e004      	b.n	8002b56 <HAL_GPIO_Init+0x1d6>
 8002b4c:	2302      	movs	r3, #2
 8002b4e:	e002      	b.n	8002b56 <HAL_GPIO_Init+0x1d6>
 8002b50:	2301      	movs	r3, #1
 8002b52:	e000      	b.n	8002b56 <HAL_GPIO_Init+0x1d6>
 8002b54:	2300      	movs	r3, #0
 8002b56:	697a      	ldr	r2, [r7, #20]
 8002b58:	f002 0203 	and.w	r2, r2, #3
 8002b5c:	0092      	lsls	r2, r2, #2
 8002b5e:	4093      	lsls	r3, r2
 8002b60:	693a      	ldr	r2, [r7, #16]
 8002b62:	4313      	orrs	r3, r2
 8002b64:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002b66:	4938      	ldr	r1, [pc, #224]	; (8002c48 <HAL_GPIO_Init+0x2c8>)
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	089b      	lsrs	r3, r3, #2
 8002b6c:	3302      	adds	r3, #2
 8002b6e:	693a      	ldr	r2, [r7, #16]
 8002b70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002b74:	4b39      	ldr	r3, [pc, #228]	; (8002c5c <HAL_GPIO_Init+0x2dc>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	43db      	mvns	r3, r3
 8002b7e:	693a      	ldr	r2, [r7, #16]
 8002b80:	4013      	ands	r3, r2
 8002b82:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d003      	beq.n	8002b98 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002b90:	693a      	ldr	r2, [r7, #16]
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	4313      	orrs	r3, r2
 8002b96:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002b98:	4a30      	ldr	r2, [pc, #192]	; (8002c5c <HAL_GPIO_Init+0x2dc>)
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002b9e:	4b2f      	ldr	r3, [pc, #188]	; (8002c5c <HAL_GPIO_Init+0x2dc>)
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	43db      	mvns	r3, r3
 8002ba8:	693a      	ldr	r2, [r7, #16]
 8002baa:	4013      	ands	r3, r2
 8002bac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d003      	beq.n	8002bc2 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8002bba:	693a      	ldr	r2, [r7, #16]
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002bc2:	4a26      	ldr	r2, [pc, #152]	; (8002c5c <HAL_GPIO_Init+0x2dc>)
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002bc8:	4b24      	ldr	r3, [pc, #144]	; (8002c5c <HAL_GPIO_Init+0x2dc>)
 8002bca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002bce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	43db      	mvns	r3, r3
 8002bd4:	693a      	ldr	r2, [r7, #16]
 8002bd6:	4013      	ands	r3, r2
 8002bd8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d003      	beq.n	8002bee <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8002be6:	693a      	ldr	r2, [r7, #16]
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	4313      	orrs	r3, r2
 8002bec:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002bee:	4a1b      	ldr	r2, [pc, #108]	; (8002c5c <HAL_GPIO_Init+0x2dc>)
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8002bf6:	4b19      	ldr	r3, [pc, #100]	; (8002c5c <HAL_GPIO_Init+0x2dc>)
 8002bf8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002bfc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	43db      	mvns	r3, r3
 8002c02:	693a      	ldr	r2, [r7, #16]
 8002c04:	4013      	ands	r3, r2
 8002c06:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d003      	beq.n	8002c1c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8002c14:	693a      	ldr	r2, [r7, #16]
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002c1c:	4a0f      	ldr	r2, [pc, #60]	; (8002c5c <HAL_GPIO_Init+0x2dc>)
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	3301      	adds	r3, #1
 8002c28:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	fa22 f303 	lsr.w	r3, r2, r3
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	f47f aeab 	bne.w	8002990 <HAL_GPIO_Init+0x10>
  }
}
 8002c3a:	bf00      	nop
 8002c3c:	bf00      	nop
 8002c3e:	371c      	adds	r7, #28
 8002c40:	46bd      	mov	sp, r7
 8002c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c46:	4770      	bx	lr
 8002c48:	40010000 	.word	0x40010000
 8002c4c:	48000400 	.word	0x48000400
 8002c50:	48000800 	.word	0x48000800
 8002c54:	48000c00 	.word	0x48000c00
 8002c58:	48001000 	.word	0x48001000
 8002c5c:	58000800 	.word	0x58000800

08002c60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b083      	sub	sp, #12
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
 8002c68:	460b      	mov	r3, r1
 8002c6a:	807b      	strh	r3, [r7, #2]
 8002c6c:	4613      	mov	r3, r2
 8002c6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002c70:	787b      	ldrb	r3, [r7, #1]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d003      	beq.n	8002c7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002c76:	887a      	ldrh	r2, [r7, #2]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002c7c:	e002      	b.n	8002c84 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002c7e:	887a      	ldrh	r2, [r7, #2]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002c84:	bf00      	nop
 8002c86:	370c      	adds	r7, #12
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8e:	4770      	bx	lr

08002c90 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b082      	sub	sp, #8
 8002c94:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8002c96:	4b0a      	ldr	r3, [pc, #40]	; (8002cc0 <HAL_HSEM_IRQHandler+0x30>)
 8002c98:	68db      	ldr	r3, [r3, #12]
 8002c9a:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8002c9c:	4b08      	ldr	r3, [pc, #32]	; (8002cc0 <HAL_HSEM_IRQHandler+0x30>)
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	43db      	mvns	r3, r3
 8002ca4:	4906      	ldr	r1, [pc, #24]	; (8002cc0 <HAL_HSEM_IRQHandler+0x30>)
 8002ca6:	4013      	ands	r3, r2
 8002ca8:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8002caa:	4a05      	ldr	r2, [pc, #20]	; (8002cc0 <HAL_HSEM_IRQHandler+0x30>)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8002cb0:	6878      	ldr	r0, [r7, #4]
 8002cb2:	f000 f807 	bl	8002cc4 <HAL_HSEM_FreeCallback>
}
 8002cb6:	bf00      	nop
 8002cb8:	3708      	adds	r7, #8
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	58001500 	.word	0x58001500

08002cc4 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b083      	sub	sp, #12
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8002ccc:	bf00      	nop
 8002cce:	370c      	adds	r7, #12
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd6:	4770      	bx	lr

08002cd8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b082      	sub	sp, #8
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d101      	bne.n	8002cea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e081      	b.n	8002dee <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002cf0:	b2db      	uxtb	r3, r3
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d106      	bne.n	8002d04 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f7ff f9a8 	bl	8002054 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2224      	movs	r2, #36	; 0x24
 8002d08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	681a      	ldr	r2, [r3, #0]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f022 0201 	bic.w	r2, r2, #1
 8002d1a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	685a      	ldr	r2, [r3, #4]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002d28:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	689a      	ldr	r2, [r3, #8]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002d38:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	68db      	ldr	r3, [r3, #12]
 8002d3e:	2b01      	cmp	r3, #1
 8002d40:	d107      	bne.n	8002d52 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	689a      	ldr	r2, [r3, #8]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d4e:	609a      	str	r2, [r3, #8]
 8002d50:	e006      	b.n	8002d60 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	689a      	ldr	r2, [r3, #8]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002d5e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	68db      	ldr	r3, [r3, #12]
 8002d64:	2b02      	cmp	r3, #2
 8002d66:	d104      	bne.n	8002d72 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002d70:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	687a      	ldr	r2, [r7, #4]
 8002d7a:	6812      	ldr	r2, [r2, #0]
 8002d7c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002d80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d84:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	68da      	ldr	r2, [r3, #12]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002d94:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	691a      	ldr	r2, [r3, #16]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	695b      	ldr	r3, [r3, #20]
 8002d9e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	699b      	ldr	r3, [r3, #24]
 8002da6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	430a      	orrs	r2, r1
 8002dae:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	69d9      	ldr	r1, [r3, #28]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6a1a      	ldr	r2, [r3, #32]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	430a      	orrs	r2, r1
 8002dbe:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	681a      	ldr	r2, [r3, #0]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f042 0201 	orr.w	r2, r2, #1
 8002dce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2220      	movs	r2, #32
 8002dda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2200      	movs	r2, #0
 8002de2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2200      	movs	r2, #0
 8002de8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002dec:	2300      	movs	r3, #0
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	3708      	adds	r7, #8
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}
	...

08002df8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b088      	sub	sp, #32
 8002dfc:	af02      	add	r7, sp, #8
 8002dfe:	60f8      	str	r0, [r7, #12]
 8002e00:	4608      	mov	r0, r1
 8002e02:	4611      	mov	r1, r2
 8002e04:	461a      	mov	r2, r3
 8002e06:	4603      	mov	r3, r0
 8002e08:	817b      	strh	r3, [r7, #10]
 8002e0a:	460b      	mov	r3, r1
 8002e0c:	813b      	strh	r3, [r7, #8]
 8002e0e:	4613      	mov	r3, r2
 8002e10:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	2b20      	cmp	r3, #32
 8002e1c:	f040 80f9 	bne.w	8003012 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e20:	6a3b      	ldr	r3, [r7, #32]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d002      	beq.n	8002e2c <HAL_I2C_Mem_Write+0x34>
 8002e26:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d105      	bne.n	8002e38 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e32:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	e0ed      	b.n	8003014 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e3e:	2b01      	cmp	r3, #1
 8002e40:	d101      	bne.n	8002e46 <HAL_I2C_Mem_Write+0x4e>
 8002e42:	2302      	movs	r3, #2
 8002e44:	e0e6      	b.n	8003014 <HAL_I2C_Mem_Write+0x21c>
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	2201      	movs	r2, #1
 8002e4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002e4e:	f7ff fbd9 	bl	8002604 <HAL_GetTick>
 8002e52:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	9300      	str	r3, [sp, #0]
 8002e58:	2319      	movs	r3, #25
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002e60:	68f8      	ldr	r0, [r7, #12]
 8002e62:	f000 fadd 	bl	8003420 <I2C_WaitOnFlagUntilTimeout>
 8002e66:	4603      	mov	r3, r0
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d001      	beq.n	8002e70 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	e0d1      	b.n	8003014 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	2221      	movs	r2, #33	; 0x21
 8002e74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	2240      	movs	r2, #64	; 0x40
 8002e7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	2200      	movs	r2, #0
 8002e84:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	6a3a      	ldr	r2, [r7, #32]
 8002e8a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002e90:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	2200      	movs	r2, #0
 8002e96:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002e98:	88f8      	ldrh	r0, [r7, #6]
 8002e9a:	893a      	ldrh	r2, [r7, #8]
 8002e9c:	8979      	ldrh	r1, [r7, #10]
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	9301      	str	r3, [sp, #4]
 8002ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ea4:	9300      	str	r3, [sp, #0]
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	68f8      	ldr	r0, [r7, #12]
 8002eaa:	f000 f9ed 	bl	8003288 <I2C_RequestMemoryWrite>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d005      	beq.n	8002ec0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	e0a9      	b.n	8003014 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ec4:	b29b      	uxth	r3, r3
 8002ec6:	2bff      	cmp	r3, #255	; 0xff
 8002ec8:	d90e      	bls.n	8002ee8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	22ff      	movs	r2, #255	; 0xff
 8002ece:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ed4:	b2da      	uxtb	r2, r3
 8002ed6:	8979      	ldrh	r1, [r7, #10]
 8002ed8:	2300      	movs	r3, #0
 8002eda:	9300      	str	r3, [sp, #0]
 8002edc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ee0:	68f8      	ldr	r0, [r7, #12]
 8002ee2:	f000 fc57 	bl	8003794 <I2C_TransferConfig>
 8002ee6:	e00f      	b.n	8002f08 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eec:	b29a      	uxth	r2, r3
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ef6:	b2da      	uxtb	r2, r3
 8002ef8:	8979      	ldrh	r1, [r7, #10]
 8002efa:	2300      	movs	r3, #0
 8002efc:	9300      	str	r3, [sp, #0]
 8002efe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f02:	68f8      	ldr	r0, [r7, #12]
 8002f04:	f000 fc46 	bl	8003794 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f08:	697a      	ldr	r2, [r7, #20]
 8002f0a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002f0c:	68f8      	ldr	r0, [r7, #12]
 8002f0e:	f000 fad6 	bl	80034be <I2C_WaitOnTXISFlagUntilTimeout>
 8002f12:	4603      	mov	r3, r0
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d001      	beq.n	8002f1c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	e07b      	b.n	8003014 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f20:	781a      	ldrb	r2, [r3, #0]
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f2c:	1c5a      	adds	r2, r3, #1
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f36:	b29b      	uxth	r3, r3
 8002f38:	3b01      	subs	r3, #1
 8002f3a:	b29a      	uxth	r2, r3
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f44:	3b01      	subs	r3, #1
 8002f46:	b29a      	uxth	r2, r3
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f50:	b29b      	uxth	r3, r3
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d034      	beq.n	8002fc0 <HAL_I2C_Mem_Write+0x1c8>
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d130      	bne.n	8002fc0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	9300      	str	r3, [sp, #0]
 8002f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f64:	2200      	movs	r2, #0
 8002f66:	2180      	movs	r1, #128	; 0x80
 8002f68:	68f8      	ldr	r0, [r7, #12]
 8002f6a:	f000 fa59 	bl	8003420 <I2C_WaitOnFlagUntilTimeout>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d001      	beq.n	8002f78 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002f74:	2301      	movs	r3, #1
 8002f76:	e04d      	b.n	8003014 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f7c:	b29b      	uxth	r3, r3
 8002f7e:	2bff      	cmp	r3, #255	; 0xff
 8002f80:	d90e      	bls.n	8002fa0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	22ff      	movs	r2, #255	; 0xff
 8002f86:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f8c:	b2da      	uxtb	r2, r3
 8002f8e:	8979      	ldrh	r1, [r7, #10]
 8002f90:	2300      	movs	r3, #0
 8002f92:	9300      	str	r3, [sp, #0]
 8002f94:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002f98:	68f8      	ldr	r0, [r7, #12]
 8002f9a:	f000 fbfb 	bl	8003794 <I2C_TransferConfig>
 8002f9e:	e00f      	b.n	8002fc0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fa4:	b29a      	uxth	r2, r3
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fae:	b2da      	uxtb	r2, r3
 8002fb0:	8979      	ldrh	r1, [r7, #10]
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	9300      	str	r3, [sp, #0]
 8002fb6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002fba:	68f8      	ldr	r0, [r7, #12]
 8002fbc:	f000 fbea 	bl	8003794 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fc4:	b29b      	uxth	r3, r3
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d19e      	bne.n	8002f08 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fca:	697a      	ldr	r2, [r7, #20]
 8002fcc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002fce:	68f8      	ldr	r0, [r7, #12]
 8002fd0:	f000 fabc 	bl	800354c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d001      	beq.n	8002fde <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e01a      	b.n	8003014 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	2220      	movs	r2, #32
 8002fe4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	6859      	ldr	r1, [r3, #4]
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681a      	ldr	r2, [r3, #0]
 8002ff0:	4b0a      	ldr	r3, [pc, #40]	; (800301c <HAL_I2C_Mem_Write+0x224>)
 8002ff2:	400b      	ands	r3, r1
 8002ff4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2220      	movs	r2, #32
 8002ffa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2200      	movs	r2, #0
 8003002:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	2200      	movs	r2, #0
 800300a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800300e:	2300      	movs	r3, #0
 8003010:	e000      	b.n	8003014 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003012:	2302      	movs	r3, #2
  }
}
 8003014:	4618      	mov	r0, r3
 8003016:	3718      	adds	r7, #24
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}
 800301c:	fe00e800 	.word	0xfe00e800

08003020 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b088      	sub	sp, #32
 8003024:	af02      	add	r7, sp, #8
 8003026:	60f8      	str	r0, [r7, #12]
 8003028:	4608      	mov	r0, r1
 800302a:	4611      	mov	r1, r2
 800302c:	461a      	mov	r2, r3
 800302e:	4603      	mov	r3, r0
 8003030:	817b      	strh	r3, [r7, #10]
 8003032:	460b      	mov	r3, r1
 8003034:	813b      	strh	r3, [r7, #8]
 8003036:	4613      	mov	r3, r2
 8003038:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003040:	b2db      	uxtb	r3, r3
 8003042:	2b20      	cmp	r3, #32
 8003044:	f040 80fd 	bne.w	8003242 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003048:	6a3b      	ldr	r3, [r7, #32]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d002      	beq.n	8003054 <HAL_I2C_Mem_Read+0x34>
 800304e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003050:	2b00      	cmp	r3, #0
 8003052:	d105      	bne.n	8003060 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	f44f 7200 	mov.w	r2, #512	; 0x200
 800305a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800305c:	2301      	movs	r3, #1
 800305e:	e0f1      	b.n	8003244 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003066:	2b01      	cmp	r3, #1
 8003068:	d101      	bne.n	800306e <HAL_I2C_Mem_Read+0x4e>
 800306a:	2302      	movs	r3, #2
 800306c:	e0ea      	b.n	8003244 <HAL_I2C_Mem_Read+0x224>
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	2201      	movs	r2, #1
 8003072:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003076:	f7ff fac5 	bl	8002604 <HAL_GetTick>
 800307a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	9300      	str	r3, [sp, #0]
 8003080:	2319      	movs	r3, #25
 8003082:	2201      	movs	r2, #1
 8003084:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003088:	68f8      	ldr	r0, [r7, #12]
 800308a:	f000 f9c9 	bl	8003420 <I2C_WaitOnFlagUntilTimeout>
 800308e:	4603      	mov	r3, r0
 8003090:	2b00      	cmp	r3, #0
 8003092:	d001      	beq.n	8003098 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	e0d5      	b.n	8003244 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2222      	movs	r2, #34	; 0x22
 800309c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	2240      	movs	r2, #64	; 0x40
 80030a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2200      	movs	r2, #0
 80030ac:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	6a3a      	ldr	r2, [r7, #32]
 80030b2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80030b8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	2200      	movs	r2, #0
 80030be:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80030c0:	88f8      	ldrh	r0, [r7, #6]
 80030c2:	893a      	ldrh	r2, [r7, #8]
 80030c4:	8979      	ldrh	r1, [r7, #10]
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	9301      	str	r3, [sp, #4]
 80030ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030cc:	9300      	str	r3, [sp, #0]
 80030ce:	4603      	mov	r3, r0
 80030d0:	68f8      	ldr	r0, [r7, #12]
 80030d2:	f000 f92d 	bl	8003330 <I2C_RequestMemoryRead>
 80030d6:	4603      	mov	r3, r0
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d005      	beq.n	80030e8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	2200      	movs	r2, #0
 80030e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80030e4:	2301      	movs	r3, #1
 80030e6:	e0ad      	b.n	8003244 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030ec:	b29b      	uxth	r3, r3
 80030ee:	2bff      	cmp	r3, #255	; 0xff
 80030f0:	d90e      	bls.n	8003110 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	22ff      	movs	r2, #255	; 0xff
 80030f6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030fc:	b2da      	uxtb	r2, r3
 80030fe:	8979      	ldrh	r1, [r7, #10]
 8003100:	4b52      	ldr	r3, [pc, #328]	; (800324c <HAL_I2C_Mem_Read+0x22c>)
 8003102:	9300      	str	r3, [sp, #0]
 8003104:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003108:	68f8      	ldr	r0, [r7, #12]
 800310a:	f000 fb43 	bl	8003794 <I2C_TransferConfig>
 800310e:	e00f      	b.n	8003130 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003114:	b29a      	uxth	r2, r3
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800311e:	b2da      	uxtb	r2, r3
 8003120:	8979      	ldrh	r1, [r7, #10]
 8003122:	4b4a      	ldr	r3, [pc, #296]	; (800324c <HAL_I2C_Mem_Read+0x22c>)
 8003124:	9300      	str	r3, [sp, #0]
 8003126:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800312a:	68f8      	ldr	r0, [r7, #12]
 800312c:	f000 fb32 	bl	8003794 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	9300      	str	r3, [sp, #0]
 8003134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003136:	2200      	movs	r2, #0
 8003138:	2104      	movs	r1, #4
 800313a:	68f8      	ldr	r0, [r7, #12]
 800313c:	f000 f970 	bl	8003420 <I2C_WaitOnFlagUntilTimeout>
 8003140:	4603      	mov	r3, r0
 8003142:	2b00      	cmp	r3, #0
 8003144:	d001      	beq.n	800314a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	e07c      	b.n	8003244 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003154:	b2d2      	uxtb	r2, r2
 8003156:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800315c:	1c5a      	adds	r2, r3, #1
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003166:	3b01      	subs	r3, #1
 8003168:	b29a      	uxth	r2, r3
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003172:	b29b      	uxth	r3, r3
 8003174:	3b01      	subs	r3, #1
 8003176:	b29a      	uxth	r2, r3
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003180:	b29b      	uxth	r3, r3
 8003182:	2b00      	cmp	r3, #0
 8003184:	d034      	beq.n	80031f0 <HAL_I2C_Mem_Read+0x1d0>
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800318a:	2b00      	cmp	r3, #0
 800318c:	d130      	bne.n	80031f0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	9300      	str	r3, [sp, #0]
 8003192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003194:	2200      	movs	r2, #0
 8003196:	2180      	movs	r1, #128	; 0x80
 8003198:	68f8      	ldr	r0, [r7, #12]
 800319a:	f000 f941 	bl	8003420 <I2C_WaitOnFlagUntilTimeout>
 800319e:	4603      	mov	r3, r0
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d001      	beq.n	80031a8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	e04d      	b.n	8003244 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031ac:	b29b      	uxth	r3, r3
 80031ae:	2bff      	cmp	r3, #255	; 0xff
 80031b0:	d90e      	bls.n	80031d0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	22ff      	movs	r2, #255	; 0xff
 80031b6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031bc:	b2da      	uxtb	r2, r3
 80031be:	8979      	ldrh	r1, [r7, #10]
 80031c0:	2300      	movs	r3, #0
 80031c2:	9300      	str	r3, [sp, #0]
 80031c4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80031c8:	68f8      	ldr	r0, [r7, #12]
 80031ca:	f000 fae3 	bl	8003794 <I2C_TransferConfig>
 80031ce:	e00f      	b.n	80031f0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031d4:	b29a      	uxth	r2, r3
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031de:	b2da      	uxtb	r2, r3
 80031e0:	8979      	ldrh	r1, [r7, #10]
 80031e2:	2300      	movs	r3, #0
 80031e4:	9300      	str	r3, [sp, #0]
 80031e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80031ea:	68f8      	ldr	r0, [r7, #12]
 80031ec:	f000 fad2 	bl	8003794 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031f4:	b29b      	uxth	r3, r3
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d19a      	bne.n	8003130 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031fa:	697a      	ldr	r2, [r7, #20]
 80031fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80031fe:	68f8      	ldr	r0, [r7, #12]
 8003200:	f000 f9a4 	bl	800354c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003204:	4603      	mov	r3, r0
 8003206:	2b00      	cmp	r3, #0
 8003208:	d001      	beq.n	800320e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	e01a      	b.n	8003244 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	2220      	movs	r2, #32
 8003214:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	6859      	ldr	r1, [r3, #4]
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681a      	ldr	r2, [r3, #0]
 8003220:	4b0b      	ldr	r3, [pc, #44]	; (8003250 <HAL_I2C_Mem_Read+0x230>)
 8003222:	400b      	ands	r3, r1
 8003224:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2220      	movs	r2, #32
 800322a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	2200      	movs	r2, #0
 8003232:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	2200      	movs	r2, #0
 800323a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800323e:	2300      	movs	r3, #0
 8003240:	e000      	b.n	8003244 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003242:	2302      	movs	r3, #2
  }
}
 8003244:	4618      	mov	r0, r3
 8003246:	3718      	adds	r7, #24
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}
 800324c:	80002400 	.word	0x80002400
 8003250:	fe00e800 	.word	0xfe00e800

08003254 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b084      	sub	sp, #16
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	699b      	ldr	r3, [r3, #24]
 8003262:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003270:	2b00      	cmp	r3, #0
 8003272:	d005      	beq.n	8003280 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003278:	68ba      	ldr	r2, [r7, #8]
 800327a:	68f9      	ldr	r1, [r7, #12]
 800327c:	6878      	ldr	r0, [r7, #4]
 800327e:	4798      	blx	r3
  }
}
 8003280:	bf00      	nop
 8003282:	3710      	adds	r7, #16
 8003284:	46bd      	mov	sp, r7
 8003286:	bd80      	pop	{r7, pc}

08003288 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b086      	sub	sp, #24
 800328c:	af02      	add	r7, sp, #8
 800328e:	60f8      	str	r0, [r7, #12]
 8003290:	4608      	mov	r0, r1
 8003292:	4611      	mov	r1, r2
 8003294:	461a      	mov	r2, r3
 8003296:	4603      	mov	r3, r0
 8003298:	817b      	strh	r3, [r7, #10]
 800329a:	460b      	mov	r3, r1
 800329c:	813b      	strh	r3, [r7, #8]
 800329e:	4613      	mov	r3, r2
 80032a0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80032a2:	88fb      	ldrh	r3, [r7, #6]
 80032a4:	b2da      	uxtb	r2, r3
 80032a6:	8979      	ldrh	r1, [r7, #10]
 80032a8:	4b20      	ldr	r3, [pc, #128]	; (800332c <I2C_RequestMemoryWrite+0xa4>)
 80032aa:	9300      	str	r3, [sp, #0]
 80032ac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80032b0:	68f8      	ldr	r0, [r7, #12]
 80032b2:	f000 fa6f 	bl	8003794 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80032b6:	69fa      	ldr	r2, [r7, #28]
 80032b8:	69b9      	ldr	r1, [r7, #24]
 80032ba:	68f8      	ldr	r0, [r7, #12]
 80032bc:	f000 f8ff 	bl	80034be <I2C_WaitOnTXISFlagUntilTimeout>
 80032c0:	4603      	mov	r3, r0
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d001      	beq.n	80032ca <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	e02c      	b.n	8003324 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80032ca:	88fb      	ldrh	r3, [r7, #6]
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d105      	bne.n	80032dc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80032d0:	893b      	ldrh	r3, [r7, #8]
 80032d2:	b2da      	uxtb	r2, r3
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	629a      	str	r2, [r3, #40]	; 0x28
 80032da:	e015      	b.n	8003308 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80032dc:	893b      	ldrh	r3, [r7, #8]
 80032de:	0a1b      	lsrs	r3, r3, #8
 80032e0:	b29b      	uxth	r3, r3
 80032e2:	b2da      	uxtb	r2, r3
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80032ea:	69fa      	ldr	r2, [r7, #28]
 80032ec:	69b9      	ldr	r1, [r7, #24]
 80032ee:	68f8      	ldr	r0, [r7, #12]
 80032f0:	f000 f8e5 	bl	80034be <I2C_WaitOnTXISFlagUntilTimeout>
 80032f4:	4603      	mov	r3, r0
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d001      	beq.n	80032fe <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	e012      	b.n	8003324 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80032fe:	893b      	ldrh	r3, [r7, #8]
 8003300:	b2da      	uxtb	r2, r3
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003308:	69fb      	ldr	r3, [r7, #28]
 800330a:	9300      	str	r3, [sp, #0]
 800330c:	69bb      	ldr	r3, [r7, #24]
 800330e:	2200      	movs	r2, #0
 8003310:	2180      	movs	r1, #128	; 0x80
 8003312:	68f8      	ldr	r0, [r7, #12]
 8003314:	f000 f884 	bl	8003420 <I2C_WaitOnFlagUntilTimeout>
 8003318:	4603      	mov	r3, r0
 800331a:	2b00      	cmp	r3, #0
 800331c:	d001      	beq.n	8003322 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	e000      	b.n	8003324 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003322:	2300      	movs	r3, #0
}
 8003324:	4618      	mov	r0, r3
 8003326:	3710      	adds	r7, #16
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}
 800332c:	80002000 	.word	0x80002000

08003330 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b086      	sub	sp, #24
 8003334:	af02      	add	r7, sp, #8
 8003336:	60f8      	str	r0, [r7, #12]
 8003338:	4608      	mov	r0, r1
 800333a:	4611      	mov	r1, r2
 800333c:	461a      	mov	r2, r3
 800333e:	4603      	mov	r3, r0
 8003340:	817b      	strh	r3, [r7, #10]
 8003342:	460b      	mov	r3, r1
 8003344:	813b      	strh	r3, [r7, #8]
 8003346:	4613      	mov	r3, r2
 8003348:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800334a:	88fb      	ldrh	r3, [r7, #6]
 800334c:	b2da      	uxtb	r2, r3
 800334e:	8979      	ldrh	r1, [r7, #10]
 8003350:	4b20      	ldr	r3, [pc, #128]	; (80033d4 <I2C_RequestMemoryRead+0xa4>)
 8003352:	9300      	str	r3, [sp, #0]
 8003354:	2300      	movs	r3, #0
 8003356:	68f8      	ldr	r0, [r7, #12]
 8003358:	f000 fa1c 	bl	8003794 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800335c:	69fa      	ldr	r2, [r7, #28]
 800335e:	69b9      	ldr	r1, [r7, #24]
 8003360:	68f8      	ldr	r0, [r7, #12]
 8003362:	f000 f8ac 	bl	80034be <I2C_WaitOnTXISFlagUntilTimeout>
 8003366:	4603      	mov	r3, r0
 8003368:	2b00      	cmp	r3, #0
 800336a:	d001      	beq.n	8003370 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800336c:	2301      	movs	r3, #1
 800336e:	e02c      	b.n	80033ca <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003370:	88fb      	ldrh	r3, [r7, #6]
 8003372:	2b01      	cmp	r3, #1
 8003374:	d105      	bne.n	8003382 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003376:	893b      	ldrh	r3, [r7, #8]
 8003378:	b2da      	uxtb	r2, r3
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	629a      	str	r2, [r3, #40]	; 0x28
 8003380:	e015      	b.n	80033ae <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003382:	893b      	ldrh	r3, [r7, #8]
 8003384:	0a1b      	lsrs	r3, r3, #8
 8003386:	b29b      	uxth	r3, r3
 8003388:	b2da      	uxtb	r2, r3
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003390:	69fa      	ldr	r2, [r7, #28]
 8003392:	69b9      	ldr	r1, [r7, #24]
 8003394:	68f8      	ldr	r0, [r7, #12]
 8003396:	f000 f892 	bl	80034be <I2C_WaitOnTXISFlagUntilTimeout>
 800339a:	4603      	mov	r3, r0
 800339c:	2b00      	cmp	r3, #0
 800339e:	d001      	beq.n	80033a4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80033a0:	2301      	movs	r3, #1
 80033a2:	e012      	b.n	80033ca <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80033a4:	893b      	ldrh	r3, [r7, #8]
 80033a6:	b2da      	uxtb	r2, r3
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80033ae:	69fb      	ldr	r3, [r7, #28]
 80033b0:	9300      	str	r3, [sp, #0]
 80033b2:	69bb      	ldr	r3, [r7, #24]
 80033b4:	2200      	movs	r2, #0
 80033b6:	2140      	movs	r1, #64	; 0x40
 80033b8:	68f8      	ldr	r0, [r7, #12]
 80033ba:	f000 f831 	bl	8003420 <I2C_WaitOnFlagUntilTimeout>
 80033be:	4603      	mov	r3, r0
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d001      	beq.n	80033c8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80033c4:	2301      	movs	r3, #1
 80033c6:	e000      	b.n	80033ca <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80033c8:	2300      	movs	r3, #0
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	3710      	adds	r7, #16
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}
 80033d2:	bf00      	nop
 80033d4:	80002000 	.word	0x80002000

080033d8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80033d8:	b480      	push	{r7}
 80033da:	b083      	sub	sp, #12
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	699b      	ldr	r3, [r3, #24]
 80033e6:	f003 0302 	and.w	r3, r3, #2
 80033ea:	2b02      	cmp	r3, #2
 80033ec:	d103      	bne.n	80033f6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	2200      	movs	r2, #0
 80033f4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	699b      	ldr	r3, [r3, #24]
 80033fc:	f003 0301 	and.w	r3, r3, #1
 8003400:	2b01      	cmp	r3, #1
 8003402:	d007      	beq.n	8003414 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	699a      	ldr	r2, [r3, #24]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f042 0201 	orr.w	r2, r2, #1
 8003412:	619a      	str	r2, [r3, #24]
  }
}
 8003414:	bf00      	nop
 8003416:	370c      	adds	r7, #12
 8003418:	46bd      	mov	sp, r7
 800341a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341e:	4770      	bx	lr

08003420 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b084      	sub	sp, #16
 8003424:	af00      	add	r7, sp, #0
 8003426:	60f8      	str	r0, [r7, #12]
 8003428:	60b9      	str	r1, [r7, #8]
 800342a:	603b      	str	r3, [r7, #0]
 800342c:	4613      	mov	r3, r2
 800342e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003430:	e031      	b.n	8003496 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003438:	d02d      	beq.n	8003496 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800343a:	f7ff f8e3 	bl	8002604 <HAL_GetTick>
 800343e:	4602      	mov	r2, r0
 8003440:	69bb      	ldr	r3, [r7, #24]
 8003442:	1ad3      	subs	r3, r2, r3
 8003444:	683a      	ldr	r2, [r7, #0]
 8003446:	429a      	cmp	r2, r3
 8003448:	d302      	bcc.n	8003450 <I2C_WaitOnFlagUntilTimeout+0x30>
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d122      	bne.n	8003496 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	699a      	ldr	r2, [r3, #24]
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	4013      	ands	r3, r2
 800345a:	68ba      	ldr	r2, [r7, #8]
 800345c:	429a      	cmp	r2, r3
 800345e:	bf0c      	ite	eq
 8003460:	2301      	moveq	r3, #1
 8003462:	2300      	movne	r3, #0
 8003464:	b2db      	uxtb	r3, r3
 8003466:	461a      	mov	r2, r3
 8003468:	79fb      	ldrb	r3, [r7, #7]
 800346a:	429a      	cmp	r2, r3
 800346c:	d113      	bne.n	8003496 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003472:	f043 0220 	orr.w	r2, r3, #32
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	2220      	movs	r2, #32
 800347e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2200      	movs	r2, #0
 8003486:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	2200      	movs	r2, #0
 800348e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	e00f      	b.n	80034b6 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	699a      	ldr	r2, [r3, #24]
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	4013      	ands	r3, r2
 80034a0:	68ba      	ldr	r2, [r7, #8]
 80034a2:	429a      	cmp	r2, r3
 80034a4:	bf0c      	ite	eq
 80034a6:	2301      	moveq	r3, #1
 80034a8:	2300      	movne	r3, #0
 80034aa:	b2db      	uxtb	r3, r3
 80034ac:	461a      	mov	r2, r3
 80034ae:	79fb      	ldrb	r3, [r7, #7]
 80034b0:	429a      	cmp	r2, r3
 80034b2:	d0be      	beq.n	8003432 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80034b4:	2300      	movs	r3, #0
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3710      	adds	r7, #16
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}

080034be <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80034be:	b580      	push	{r7, lr}
 80034c0:	b084      	sub	sp, #16
 80034c2:	af00      	add	r7, sp, #0
 80034c4:	60f8      	str	r0, [r7, #12]
 80034c6:	60b9      	str	r1, [r7, #8]
 80034c8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80034ca:	e033      	b.n	8003534 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80034cc:	687a      	ldr	r2, [r7, #4]
 80034ce:	68b9      	ldr	r1, [r7, #8]
 80034d0:	68f8      	ldr	r0, [r7, #12]
 80034d2:	f000 f87f 	bl	80035d4 <I2C_IsErrorOccurred>
 80034d6:	4603      	mov	r3, r0
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d001      	beq.n	80034e0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80034dc:	2301      	movs	r3, #1
 80034de:	e031      	b.n	8003544 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80034e6:	d025      	beq.n	8003534 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034e8:	f7ff f88c 	bl	8002604 <HAL_GetTick>
 80034ec:	4602      	mov	r2, r0
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	1ad3      	subs	r3, r2, r3
 80034f2:	68ba      	ldr	r2, [r7, #8]
 80034f4:	429a      	cmp	r2, r3
 80034f6:	d302      	bcc.n	80034fe <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d11a      	bne.n	8003534 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	699b      	ldr	r3, [r3, #24]
 8003504:	f003 0302 	and.w	r3, r3, #2
 8003508:	2b02      	cmp	r3, #2
 800350a:	d013      	beq.n	8003534 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003510:	f043 0220 	orr.w	r2, r3, #32
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2220      	movs	r2, #32
 800351c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2200      	movs	r2, #0
 8003524:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	2200      	movs	r2, #0
 800352c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	e007      	b.n	8003544 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	699b      	ldr	r3, [r3, #24]
 800353a:	f003 0302 	and.w	r3, r3, #2
 800353e:	2b02      	cmp	r3, #2
 8003540:	d1c4      	bne.n	80034cc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003542:	2300      	movs	r3, #0
}
 8003544:	4618      	mov	r0, r3
 8003546:	3710      	adds	r7, #16
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}

0800354c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b084      	sub	sp, #16
 8003550:	af00      	add	r7, sp, #0
 8003552:	60f8      	str	r0, [r7, #12]
 8003554:	60b9      	str	r1, [r7, #8]
 8003556:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003558:	e02f      	b.n	80035ba <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800355a:	687a      	ldr	r2, [r7, #4]
 800355c:	68b9      	ldr	r1, [r7, #8]
 800355e:	68f8      	ldr	r0, [r7, #12]
 8003560:	f000 f838 	bl	80035d4 <I2C_IsErrorOccurred>
 8003564:	4603      	mov	r3, r0
 8003566:	2b00      	cmp	r3, #0
 8003568:	d001      	beq.n	800356e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	e02d      	b.n	80035ca <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800356e:	f7ff f849 	bl	8002604 <HAL_GetTick>
 8003572:	4602      	mov	r2, r0
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	1ad3      	subs	r3, r2, r3
 8003578:	68ba      	ldr	r2, [r7, #8]
 800357a:	429a      	cmp	r2, r3
 800357c:	d302      	bcc.n	8003584 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d11a      	bne.n	80035ba <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	699b      	ldr	r3, [r3, #24]
 800358a:	f003 0320 	and.w	r3, r3, #32
 800358e:	2b20      	cmp	r3, #32
 8003590:	d013      	beq.n	80035ba <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003596:	f043 0220 	orr.w	r2, r3, #32
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	2220      	movs	r2, #32
 80035a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	2200      	movs	r2, #0
 80035aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	2200      	movs	r2, #0
 80035b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	e007      	b.n	80035ca <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	699b      	ldr	r3, [r3, #24]
 80035c0:	f003 0320 	and.w	r3, r3, #32
 80035c4:	2b20      	cmp	r3, #32
 80035c6:	d1c8      	bne.n	800355a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80035c8:	2300      	movs	r3, #0
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	3710      	adds	r7, #16
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}
	...

080035d4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b08a      	sub	sp, #40	; 0x28
 80035d8:	af00      	add	r7, sp, #0
 80035da:	60f8      	str	r0, [r7, #12]
 80035dc:	60b9      	str	r1, [r7, #8]
 80035de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035e0:	2300      	movs	r3, #0
 80035e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	699b      	ldr	r3, [r3, #24]
 80035ec:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80035ee:	2300      	movs	r3, #0
 80035f0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80035f6:	69bb      	ldr	r3, [r7, #24]
 80035f8:	f003 0310 	and.w	r3, r3, #16
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d068      	beq.n	80036d2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	2210      	movs	r2, #16
 8003606:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003608:	e049      	b.n	800369e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800360a:	68bb      	ldr	r3, [r7, #8]
 800360c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003610:	d045      	beq.n	800369e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003612:	f7fe fff7 	bl	8002604 <HAL_GetTick>
 8003616:	4602      	mov	r2, r0
 8003618:	69fb      	ldr	r3, [r7, #28]
 800361a:	1ad3      	subs	r3, r2, r3
 800361c:	68ba      	ldr	r2, [r7, #8]
 800361e:	429a      	cmp	r2, r3
 8003620:	d302      	bcc.n	8003628 <I2C_IsErrorOccurred+0x54>
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d13a      	bne.n	800369e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003632:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800363a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	699b      	ldr	r3, [r3, #24]
 8003642:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003646:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800364a:	d121      	bne.n	8003690 <I2C_IsErrorOccurred+0xbc>
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003652:	d01d      	beq.n	8003690 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003654:	7cfb      	ldrb	r3, [r7, #19]
 8003656:	2b20      	cmp	r3, #32
 8003658:	d01a      	beq.n	8003690 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	685a      	ldr	r2, [r3, #4]
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003668:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800366a:	f7fe ffcb 	bl	8002604 <HAL_GetTick>
 800366e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003670:	e00e      	b.n	8003690 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003672:	f7fe ffc7 	bl	8002604 <HAL_GetTick>
 8003676:	4602      	mov	r2, r0
 8003678:	69fb      	ldr	r3, [r7, #28]
 800367a:	1ad3      	subs	r3, r2, r3
 800367c:	2b19      	cmp	r3, #25
 800367e:	d907      	bls.n	8003690 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003680:	6a3b      	ldr	r3, [r7, #32]
 8003682:	f043 0320 	orr.w	r3, r3, #32
 8003686:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003688:	2301      	movs	r3, #1
 800368a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800368e:	e006      	b.n	800369e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	699b      	ldr	r3, [r3, #24]
 8003696:	f003 0320 	and.w	r3, r3, #32
 800369a:	2b20      	cmp	r3, #32
 800369c:	d1e9      	bne.n	8003672 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	699b      	ldr	r3, [r3, #24]
 80036a4:	f003 0320 	and.w	r3, r3, #32
 80036a8:	2b20      	cmp	r3, #32
 80036aa:	d003      	beq.n	80036b4 <I2C_IsErrorOccurred+0xe0>
 80036ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d0aa      	beq.n	800360a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80036b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d103      	bne.n	80036c4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	2220      	movs	r2, #32
 80036c2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80036c4:	6a3b      	ldr	r3, [r7, #32]
 80036c6:	f043 0304 	orr.w	r3, r3, #4
 80036ca:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80036cc:	2301      	movs	r3, #1
 80036ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	699b      	ldr	r3, [r3, #24]
 80036d8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80036da:	69bb      	ldr	r3, [r7, #24]
 80036dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d00b      	beq.n	80036fc <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80036e4:	6a3b      	ldr	r3, [r7, #32]
 80036e6:	f043 0301 	orr.w	r3, r3, #1
 80036ea:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80036f4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80036fc:	69bb      	ldr	r3, [r7, #24]
 80036fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003702:	2b00      	cmp	r3, #0
 8003704:	d00b      	beq.n	800371e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003706:	6a3b      	ldr	r3, [r7, #32]
 8003708:	f043 0308 	orr.w	r3, r3, #8
 800370c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003716:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003718:	2301      	movs	r3, #1
 800371a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800371e:	69bb      	ldr	r3, [r7, #24]
 8003720:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003724:	2b00      	cmp	r3, #0
 8003726:	d00b      	beq.n	8003740 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003728:	6a3b      	ldr	r3, [r7, #32]
 800372a:	f043 0302 	orr.w	r3, r3, #2
 800372e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003738:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003740:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003744:	2b00      	cmp	r3, #0
 8003746:	d01c      	beq.n	8003782 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003748:	68f8      	ldr	r0, [r7, #12]
 800374a:	f7ff fe45 	bl	80033d8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	6859      	ldr	r1, [r3, #4]
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681a      	ldr	r2, [r3, #0]
 8003758:	4b0d      	ldr	r3, [pc, #52]	; (8003790 <I2C_IsErrorOccurred+0x1bc>)
 800375a:	400b      	ands	r3, r1
 800375c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003762:	6a3b      	ldr	r3, [r7, #32]
 8003764:	431a      	orrs	r2, r3
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2220      	movs	r2, #32
 800376e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	2200      	movs	r2, #0
 8003776:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2200      	movs	r2, #0
 800377e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003782:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003786:	4618      	mov	r0, r3
 8003788:	3728      	adds	r7, #40	; 0x28
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}
 800378e:	bf00      	nop
 8003790:	fe00e800 	.word	0xfe00e800

08003794 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003794:	b480      	push	{r7}
 8003796:	b087      	sub	sp, #28
 8003798:	af00      	add	r7, sp, #0
 800379a:	60f8      	str	r0, [r7, #12]
 800379c:	607b      	str	r3, [r7, #4]
 800379e:	460b      	mov	r3, r1
 80037a0:	817b      	strh	r3, [r7, #10]
 80037a2:	4613      	mov	r3, r2
 80037a4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80037a6:	897b      	ldrh	r3, [r7, #10]
 80037a8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80037ac:	7a7b      	ldrb	r3, [r7, #9]
 80037ae:	041b      	lsls	r3, r3, #16
 80037b0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80037b4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80037ba:	6a3b      	ldr	r3, [r7, #32]
 80037bc:	4313      	orrs	r3, r2
 80037be:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80037c2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	685a      	ldr	r2, [r3, #4]
 80037ca:	6a3b      	ldr	r3, [r7, #32]
 80037cc:	0d5b      	lsrs	r3, r3, #21
 80037ce:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80037d2:	4b08      	ldr	r3, [pc, #32]	; (80037f4 <I2C_TransferConfig+0x60>)
 80037d4:	430b      	orrs	r3, r1
 80037d6:	43db      	mvns	r3, r3
 80037d8:	ea02 0103 	and.w	r1, r2, r3
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	697a      	ldr	r2, [r7, #20]
 80037e2:	430a      	orrs	r2, r1
 80037e4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80037e6:	bf00      	nop
 80037e8:	371c      	adds	r7, #28
 80037ea:	46bd      	mov	sp, r7
 80037ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f0:	4770      	bx	lr
 80037f2:	bf00      	nop
 80037f4:	03ff63ff 	.word	0x03ff63ff

080037f8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b083      	sub	sp, #12
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
 8003800:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003808:	b2db      	uxtb	r3, r3
 800380a:	2b20      	cmp	r3, #32
 800380c:	d138      	bne.n	8003880 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003814:	2b01      	cmp	r3, #1
 8003816:	d101      	bne.n	800381c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003818:	2302      	movs	r3, #2
 800381a:	e032      	b.n	8003882 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2201      	movs	r2, #1
 8003820:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2224      	movs	r2, #36	; 0x24
 8003828:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f022 0201 	bic.w	r2, r2, #1
 800383a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800384a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	6819      	ldr	r1, [r3, #0]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	683a      	ldr	r2, [r7, #0]
 8003858:	430a      	orrs	r2, r1
 800385a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f042 0201 	orr.w	r2, r2, #1
 800386a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2220      	movs	r2, #32
 8003870:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2200      	movs	r2, #0
 8003878:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800387c:	2300      	movs	r3, #0
 800387e:	e000      	b.n	8003882 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003880:	2302      	movs	r3, #2
  }
}
 8003882:	4618      	mov	r0, r3
 8003884:	370c      	adds	r7, #12
 8003886:	46bd      	mov	sp, r7
 8003888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388c:	4770      	bx	lr

0800388e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800388e:	b480      	push	{r7}
 8003890:	b085      	sub	sp, #20
 8003892:	af00      	add	r7, sp, #0
 8003894:	6078      	str	r0, [r7, #4]
 8003896:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800389e:	b2db      	uxtb	r3, r3
 80038a0:	2b20      	cmp	r3, #32
 80038a2:	d139      	bne.n	8003918 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80038aa:	2b01      	cmp	r3, #1
 80038ac:	d101      	bne.n	80038b2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80038ae:	2302      	movs	r3, #2
 80038b0:	e033      	b.n	800391a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2201      	movs	r2, #1
 80038b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2224      	movs	r2, #36	; 0x24
 80038be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	681a      	ldr	r2, [r3, #0]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f022 0201 	bic.w	r2, r2, #1
 80038d0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80038e0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	021b      	lsls	r3, r3, #8
 80038e6:	68fa      	ldr	r2, [r7, #12]
 80038e8:	4313      	orrs	r3, r2
 80038ea:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	68fa      	ldr	r2, [r7, #12]
 80038f2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f042 0201 	orr.w	r2, r2, #1
 8003902:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2220      	movs	r2, #32
 8003908:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2200      	movs	r2, #0
 8003910:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003914:	2300      	movs	r3, #0
 8003916:	e000      	b.n	800391a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003918:	2302      	movs	r3, #2
  }
}
 800391a:	4618      	mov	r0, r3
 800391c:	3714      	adds	r7, #20
 800391e:	46bd      	mov	sp, r7
 8003920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003924:	4770      	bx	lr
	...

08003928 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b084      	sub	sp, #16
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8003930:	2300      	movs	r3, #0
 8003932:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d01e      	beq.n	8003978 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 800393a:	4b13      	ldr	r3, [pc, #76]	; (8003988 <HAL_IPCC_Init+0x60>)
 800393c:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003944:	b2db      	uxtb	r3, r3
 8003946:	2b00      	cmp	r3, #0
 8003948:	d102      	bne.n	8003950 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	f7fe fbd2 	bl	80020f4 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8003950:	68b8      	ldr	r0, [r7, #8]
 8003952:	f000 f85b 	bl	8003a0c <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 8003962:	6878      	ldr	r0, [r7, #4]
 8003964:	f000 f82c 	bl	80039c0 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2200      	movs	r2, #0
 800396c:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2201      	movs	r2, #1
 8003972:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8003976:	e001      	b.n	800397c <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8003978:	2301      	movs	r3, #1
 800397a:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 800397c:	7bfb      	ldrb	r3, [r7, #15]
}
 800397e:	4618      	mov	r0, r3
 8003980:	3710      	adds	r7, #16
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}
 8003986:	bf00      	nop
 8003988:	58000c00 	.word	0x58000c00

0800398c <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 800398c:	b480      	push	{r7}
 800398e:	b085      	sub	sp, #20
 8003990:	af00      	add	r7, sp, #0
 8003992:	60f8      	str	r0, [r7, #12]
 8003994:	60b9      	str	r1, [r7, #8]
 8003996:	4613      	mov	r3, r2
 8003998:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 800399a:	bf00      	nop
 800399c:	3714      	adds	r7, #20
 800399e:	46bd      	mov	sp, r7
 80039a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a4:	4770      	bx	lr

080039a6 <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 80039a6:	b480      	push	{r7}
 80039a8:	b085      	sub	sp, #20
 80039aa:	af00      	add	r7, sp, #0
 80039ac:	60f8      	str	r0, [r7, #12]
 80039ae:	60b9      	str	r1, [r7, #8]
 80039b0:	4613      	mov	r3, r2
 80039b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 80039b4:	bf00      	nop
 80039b6:	3714      	adds	r7, #20
 80039b8:	46bd      	mov	sp, r7
 80039ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039be:	4770      	bx	lr

080039c0 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b085      	sub	sp, #20
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 80039c8:	2300      	movs	r3, #0
 80039ca:	60fb      	str	r3, [r7, #12]
 80039cc:	e00f      	b.n	80039ee <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 80039ce:	687a      	ldr	r2, [r7, #4]
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	009b      	lsls	r3, r3, #2
 80039d4:	4413      	add	r3, r2
 80039d6:	4a0b      	ldr	r2, [pc, #44]	; (8003a04 <IPCC_SetDefaultCallbacks+0x44>)
 80039d8:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 80039da:	687a      	ldr	r2, [r7, #4]
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	3306      	adds	r3, #6
 80039e0:	009b      	lsls	r3, r3, #2
 80039e2:	4413      	add	r3, r2
 80039e4:	4a08      	ldr	r2, [pc, #32]	; (8003a08 <IPCC_SetDefaultCallbacks+0x48>)
 80039e6:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	3301      	adds	r3, #1
 80039ec:	60fb      	str	r3, [r7, #12]
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	2b05      	cmp	r3, #5
 80039f2:	d9ec      	bls.n	80039ce <IPCC_SetDefaultCallbacks+0xe>
  }
}
 80039f4:	bf00      	nop
 80039f6:	bf00      	nop
 80039f8:	3714      	adds	r7, #20
 80039fa:	46bd      	mov	sp, r7
 80039fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a00:	4770      	bx	lr
 8003a02:	bf00      	nop
 8003a04:	0800398d 	.word	0x0800398d
 8003a08:	080039a7 	.word	0x080039a7

08003a0c <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b083      	sub	sp, #12
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2200      	movs	r2, #0
 8003a18:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
 8003a20:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	223f      	movs	r2, #63	; 0x3f
 8003a26:	609a      	str	r2, [r3, #8]
}
 8003a28:	bf00      	nop
 8003a2a:	370c      	adds	r7, #12
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a32:	4770      	bx	lr

08003a34 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003a34:	b480      	push	{r7}
 8003a36:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a38:	4b05      	ldr	r3, [pc, #20]	; (8003a50 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a04      	ldr	r2, [pc, #16]	; (8003a50 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003a3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a42:	6013      	str	r3, [r2, #0]
}
 8003a44:	bf00      	nop
 8003a46:	46bd      	mov	sp, r7
 8003a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4c:	4770      	bx	lr
 8003a4e:	bf00      	nop
 8003a50:	58000400 	.word	0x58000400

08003a54 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003a54:	b480      	push	{r7}
 8003a56:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8003a58:	4b04      	ldr	r3, [pc, #16]	; (8003a6c <HAL_PWREx_GetVoltageRange+0x18>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8003a60:	4618      	mov	r0, r3
 8003a62:	46bd      	mov	sp, r7
 8003a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a68:	4770      	bx	lr
 8003a6a:	bf00      	nop
 8003a6c:	58000400 	.word	0x58000400

08003a70 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8003a70:	b480      	push	{r7}
 8003a72:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8003a74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a82:	d101      	bne.n	8003a88 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8003a84:	2301      	movs	r3, #1
 8003a86:	e000      	b.n	8003a8a <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8003a88:	2300      	movs	r3, #0
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a92:	4770      	bx	lr

08003a94 <LL_RCC_HSE_Enable>:
{
 8003a94:	b480      	push	{r7}
 8003a96:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8003a98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003aa2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003aa6:	6013      	str	r3, [r2, #0]
}
 8003aa8:	bf00      	nop
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab0:	4770      	bx	lr

08003ab2 <LL_RCC_HSE_Disable>:
{
 8003ab2:	b480      	push	{r7}
 8003ab4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8003ab6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003ac0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ac4:	6013      	str	r3, [r2, #0]
}
 8003ac6:	bf00      	nop
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ace:	4770      	bx	lr

08003ad0 <LL_RCC_HSE_IsReady>:
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8003ad4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ade:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003ae2:	d101      	bne.n	8003ae8 <LL_RCC_HSE_IsReady+0x18>
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	e000      	b.n	8003aea <LL_RCC_HSE_IsReady+0x1a>
 8003ae8:	2300      	movs	r3, #0
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	46bd      	mov	sp, r7
 8003aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af2:	4770      	bx	lr

08003af4 <LL_RCC_HSI_Enable>:
{
 8003af4:	b480      	push	{r7}
 8003af6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8003af8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b06:	6013      	str	r3, [r2, #0]
}
 8003b08:	bf00      	nop
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b10:	4770      	bx	lr

08003b12 <LL_RCC_HSI_Disable>:
{
 8003b12:	b480      	push	{r7}
 8003b14:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8003b16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b24:	6013      	str	r3, [r2, #0]
}
 8003b26:	bf00      	nop
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2e:	4770      	bx	lr

08003b30 <LL_RCC_HSI_IsReady>:
{
 8003b30:	b480      	push	{r7}
 8003b32:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8003b34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b42:	d101      	bne.n	8003b48 <LL_RCC_HSI_IsReady+0x18>
 8003b44:	2301      	movs	r3, #1
 8003b46:	e000      	b.n	8003b4a <LL_RCC_HSI_IsReady+0x1a>
 8003b48:	2300      	movs	r3, #0
}
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b52:	4770      	bx	lr

08003b54 <LL_RCC_HSI_SetCalibTrimming>:
{
 8003b54:	b480      	push	{r7}
 8003b56:	b083      	sub	sp, #12
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8003b5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	061b      	lsls	r3, r3, #24
 8003b6a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	604b      	str	r3, [r1, #4]
}
 8003b72:	bf00      	nop
 8003b74:	370c      	adds	r7, #12
 8003b76:	46bd      	mov	sp, r7
 8003b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7c:	4770      	bx	lr

08003b7e <LL_RCC_HSI48_Enable>:
{
 8003b7e:	b480      	push	{r7}
 8003b80:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8003b82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b86:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b8a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b8e:	f043 0301 	orr.w	r3, r3, #1
 8003b92:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8003b96:	bf00      	nop
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9e:	4770      	bx	lr

08003ba0 <LL_RCC_HSI48_Disable>:
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8003ba4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ba8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003bac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003bb0:	f023 0301 	bic.w	r3, r3, #1
 8003bb4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8003bb8:	bf00      	nop
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc0:	4770      	bx	lr

08003bc2 <LL_RCC_HSI48_IsReady>:
{
 8003bc2:	b480      	push	{r7}
 8003bc4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8003bc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003bce:	f003 0302 	and.w	r3, r3, #2
 8003bd2:	2b02      	cmp	r3, #2
 8003bd4:	d101      	bne.n	8003bda <LL_RCC_HSI48_IsReady+0x18>
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	e000      	b.n	8003bdc <LL_RCC_HSI48_IsReady+0x1a>
 8003bda:	2300      	movs	r3, #0
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	46bd      	mov	sp, r7
 8003be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be4:	4770      	bx	lr

08003be6 <LL_RCC_LSE_Enable>:
{
 8003be6:	b480      	push	{r7}
 8003be8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003bea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bf2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003bf6:	f043 0301 	orr.w	r3, r3, #1
 8003bfa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003bfe:	bf00      	nop
 8003c00:	46bd      	mov	sp, r7
 8003c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c06:	4770      	bx	lr

08003c08 <LL_RCC_LSE_Disable>:
{
 8003c08:	b480      	push	{r7}
 8003c0a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003c0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c14:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c18:	f023 0301 	bic.w	r3, r3, #1
 8003c1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003c20:	bf00      	nop
 8003c22:	46bd      	mov	sp, r7
 8003c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c28:	4770      	bx	lr

08003c2a <LL_RCC_LSE_EnableBypass>:
{
 8003c2a:	b480      	push	{r7}
 8003c2c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003c2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c36:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c3a:	f043 0304 	orr.w	r3, r3, #4
 8003c3e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003c42:	bf00      	nop
 8003c44:	46bd      	mov	sp, r7
 8003c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4a:	4770      	bx	lr

08003c4c <LL_RCC_LSE_DisableBypass>:
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003c50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c58:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c5c:	f023 0304 	bic.w	r3, r3, #4
 8003c60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003c64:	bf00      	nop
 8003c66:	46bd      	mov	sp, r7
 8003c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6c:	4770      	bx	lr

08003c6e <LL_RCC_LSE_IsReady>:
{
 8003c6e:	b480      	push	{r7}
 8003c70:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003c72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c7a:	f003 0302 	and.w	r3, r3, #2
 8003c7e:	2b02      	cmp	r3, #2
 8003c80:	d101      	bne.n	8003c86 <LL_RCC_LSE_IsReady+0x18>
 8003c82:	2301      	movs	r3, #1
 8003c84:	e000      	b.n	8003c88 <LL_RCC_LSE_IsReady+0x1a>
 8003c86:	2300      	movs	r3, #0
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c90:	4770      	bx	lr

08003c92 <LL_RCC_LSI1_Enable>:
{
 8003c92:	b480      	push	{r7}
 8003c94:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8003c96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c9e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003ca2:	f043 0301 	orr.w	r3, r3, #1
 8003ca6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003caa:	bf00      	nop
 8003cac:	46bd      	mov	sp, r7
 8003cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb2:	4770      	bx	lr

08003cb4 <LL_RCC_LSI1_Disable>:
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8003cb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cbc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cc0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003cc4:	f023 0301 	bic.w	r3, r3, #1
 8003cc8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003ccc:	bf00      	nop
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd4:	4770      	bx	lr

08003cd6 <LL_RCC_LSI1_IsReady>:
{
 8003cd6:	b480      	push	{r7}
 8003cd8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8003cda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cde:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ce2:	f003 0302 	and.w	r3, r3, #2
 8003ce6:	2b02      	cmp	r3, #2
 8003ce8:	d101      	bne.n	8003cee <LL_RCC_LSI1_IsReady+0x18>
 8003cea:	2301      	movs	r3, #1
 8003cec:	e000      	b.n	8003cf0 <LL_RCC_LSI1_IsReady+0x1a>
 8003cee:	2300      	movs	r3, #0
}
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf8:	4770      	bx	lr

08003cfa <LL_RCC_LSI2_Enable>:
{
 8003cfa:	b480      	push	{r7}
 8003cfc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8003cfe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d06:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d0a:	f043 0304 	orr.w	r3, r3, #4
 8003d0e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003d12:	bf00      	nop
 8003d14:	46bd      	mov	sp, r7
 8003d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1a:	4770      	bx	lr

08003d1c <LL_RCC_LSI2_Disable>:
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8003d20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d24:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d28:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d2c:	f023 0304 	bic.w	r3, r3, #4
 8003d30:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003d34:	bf00      	nop
 8003d36:	46bd      	mov	sp, r7
 8003d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3c:	4770      	bx	lr

08003d3e <LL_RCC_LSI2_IsReady>:
{
 8003d3e:	b480      	push	{r7}
 8003d40:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8003d42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d4a:	f003 0308 	and.w	r3, r3, #8
 8003d4e:	2b08      	cmp	r3, #8
 8003d50:	d101      	bne.n	8003d56 <LL_RCC_LSI2_IsReady+0x18>
 8003d52:	2301      	movs	r3, #1
 8003d54:	e000      	b.n	8003d58 <LL_RCC_LSI2_IsReady+0x1a>
 8003d56:	2300      	movs	r3, #0
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d60:	4770      	bx	lr

08003d62 <LL_RCC_LSI2_SetTrimming>:
{
 8003d62:	b480      	push	{r7}
 8003d64:	b083      	sub	sp, #12
 8003d66:	af00      	add	r7, sp, #0
 8003d68:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8003d6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d72:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	021b      	lsls	r3, r3, #8
 8003d7a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8003d84:	bf00      	nop
 8003d86:	370c      	adds	r7, #12
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8e:	4770      	bx	lr

08003d90 <LL_RCC_MSI_Enable>:
{
 8003d90:	b480      	push	{r7}
 8003d92:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8003d94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d9e:	f043 0301 	orr.w	r3, r3, #1
 8003da2:	6013      	str	r3, [r2, #0]
}
 8003da4:	bf00      	nop
 8003da6:	46bd      	mov	sp, r7
 8003da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dac:	4770      	bx	lr

08003dae <LL_RCC_MSI_Disable>:
{
 8003dae:	b480      	push	{r7}
 8003db0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8003db2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003dbc:	f023 0301 	bic.w	r3, r3, #1
 8003dc0:	6013      	str	r3, [r2, #0]
}
 8003dc2:	bf00      	nop
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dca:	4770      	bx	lr

08003dcc <LL_RCC_MSI_IsReady>:
{
 8003dcc:	b480      	push	{r7}
 8003dce:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8003dd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f003 0302 	and.w	r3, r3, #2
 8003dda:	2b02      	cmp	r3, #2
 8003ddc:	d101      	bne.n	8003de2 <LL_RCC_MSI_IsReady+0x16>
 8003dde:	2301      	movs	r3, #1
 8003de0:	e000      	b.n	8003de4 <LL_RCC_MSI_IsReady+0x18>
 8003de2:	2300      	movs	r3, #0
}
 8003de4:	4618      	mov	r0, r3
 8003de6:	46bd      	mov	sp, r7
 8003de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dec:	4770      	bx	lr

08003dee <LL_RCC_MSI_SetRange>:
{
 8003dee:	b480      	push	{r7}
 8003df0:	b083      	sub	sp, #12
 8003df2:	af00      	add	r7, sp, #0
 8003df4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8003df6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e00:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	4313      	orrs	r3, r2
 8003e08:	600b      	str	r3, [r1, #0]
}
 8003e0a:	bf00      	nop
 8003e0c:	370c      	adds	r7, #12
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e14:	4770      	bx	lr

08003e16 <LL_RCC_MSI_GetRange>:
{
 8003e16:	b480      	push	{r7}
 8003e18:	b083      	sub	sp, #12
 8003e1a:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8003e1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e26:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2bb0      	cmp	r3, #176	; 0xb0
 8003e2c:	d901      	bls.n	8003e32 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8003e2e:	23b0      	movs	r3, #176	; 0xb0
 8003e30:	607b      	str	r3, [r7, #4]
  return msiRange;
 8003e32:	687b      	ldr	r3, [r7, #4]
}
 8003e34:	4618      	mov	r0, r3
 8003e36:	370c      	adds	r7, #12
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3e:	4770      	bx	lr

08003e40 <LL_RCC_MSI_SetCalibTrimming>:
{
 8003e40:	b480      	push	{r7}
 8003e42:	b083      	sub	sp, #12
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8003e48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	021b      	lsls	r3, r3, #8
 8003e56:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	604b      	str	r3, [r1, #4]
}
 8003e5e:	bf00      	nop
 8003e60:	370c      	adds	r7, #12
 8003e62:	46bd      	mov	sp, r7
 8003e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e68:	4770      	bx	lr

08003e6a <LL_RCC_SetSysClkSource>:
{
 8003e6a:	b480      	push	{r7}
 8003e6c:	b083      	sub	sp, #12
 8003e6e:	af00      	add	r7, sp, #0
 8003e70:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8003e72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	f023 0203 	bic.w	r2, r3, #3
 8003e7c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	4313      	orrs	r3, r2
 8003e84:	608b      	str	r3, [r1, #8]
}
 8003e86:	bf00      	nop
 8003e88:	370c      	adds	r7, #12
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e90:	4770      	bx	lr

08003e92 <LL_RCC_GetSysClkSource>:
{
 8003e92:	b480      	push	{r7}
 8003e94:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003e96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e9a:	689b      	ldr	r3, [r3, #8]
 8003e9c:	f003 030c 	and.w	r3, r3, #12
}
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea8:	4770      	bx	lr

08003eaa <LL_RCC_SetAHBPrescaler>:
{
 8003eaa:	b480      	push	{r7}
 8003eac:	b083      	sub	sp, #12
 8003eae:	af00      	add	r7, sp, #0
 8003eb0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8003eb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ebc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	608b      	str	r3, [r1, #8]
}
 8003ec6:	bf00      	nop
 8003ec8:	370c      	adds	r7, #12
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed0:	4770      	bx	lr

08003ed2 <LL_C2_RCC_SetAHBPrescaler>:
{
 8003ed2:	b480      	push	{r7}
 8003ed4:	b083      	sub	sp, #12
 8003ed6:	af00      	add	r7, sp, #0
 8003ed8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8003eda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ede:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003ee2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ee6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	4313      	orrs	r3, r2
 8003eee:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8003ef2:	bf00      	nop
 8003ef4:	370c      	adds	r7, #12
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efc:	4770      	bx	lr

08003efe <LL_RCC_SetAHB4Prescaler>:
{
 8003efe:	b480      	push	{r7}
 8003f00:	b083      	sub	sp, #12
 8003f02:	af00      	add	r7, sp, #0
 8003f04:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8003f06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f0a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003f0e:	f023 020f 	bic.w	r2, r3, #15
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	091b      	lsrs	r3, r3, #4
 8003f16:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8003f20:	bf00      	nop
 8003f22:	370c      	adds	r7, #12
 8003f24:	46bd      	mov	sp, r7
 8003f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2a:	4770      	bx	lr

08003f2c <LL_RCC_SetAPB1Prescaler>:
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b083      	sub	sp, #12
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8003f34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f38:	689b      	ldr	r3, [r3, #8]
 8003f3a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003f3e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	4313      	orrs	r3, r2
 8003f46:	608b      	str	r3, [r1, #8]
}
 8003f48:	bf00      	nop
 8003f4a:	370c      	adds	r7, #12
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f52:	4770      	bx	lr

08003f54 <LL_RCC_SetAPB2Prescaler>:
{
 8003f54:	b480      	push	{r7}
 8003f56:	b083      	sub	sp, #12
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8003f5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f60:	689b      	ldr	r3, [r3, #8]
 8003f62:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003f66:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	608b      	str	r3, [r1, #8]
}
 8003f70:	bf00      	nop
 8003f72:	370c      	adds	r7, #12
 8003f74:	46bd      	mov	sp, r7
 8003f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7a:	4770      	bx	lr

08003f7c <LL_RCC_GetAHBPrescaler>:
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003f80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f84:	689b      	ldr	r3, [r3, #8]
 8003f86:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f92:	4770      	bx	lr

08003f94 <LL_RCC_GetAHB4Prescaler>:
{
 8003f94:	b480      	push	{r7}
 8003f96:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8003f98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f9c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003fa0:	011b      	lsls	r3, r3, #4
 8003fa2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fae:	4770      	bx	lr

08003fb0 <LL_RCC_GetAPB1Prescaler>:
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8003fb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc6:	4770      	bx	lr

08003fc8 <LL_RCC_GetAPB2Prescaler>:
{
 8003fc8:	b480      	push	{r7}
 8003fca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8003fcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fd0:	689b      	ldr	r3, [r3, #8]
 8003fd2:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fde:	4770      	bx	lr

08003fe0 <LL_RCC_PLL_Enable>:
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8003fe4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003fee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ff2:	6013      	str	r3, [r2, #0]
}
 8003ff4:	bf00      	nop
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffc:	4770      	bx	lr

08003ffe <LL_RCC_PLL_Disable>:
{
 8003ffe:	b480      	push	{r7}
 8004000:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8004002:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800400c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004010:	6013      	str	r3, [r2, #0]
}
 8004012:	bf00      	nop
 8004014:	46bd      	mov	sp, r7
 8004016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401a:	4770      	bx	lr

0800401c <LL_RCC_PLL_IsReady>:
{
 800401c:	b480      	push	{r7}
 800401e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8004020:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800402a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800402e:	d101      	bne.n	8004034 <LL_RCC_PLL_IsReady+0x18>
 8004030:	2301      	movs	r3, #1
 8004032:	e000      	b.n	8004036 <LL_RCC_PLL_IsReady+0x1a>
 8004034:	2300      	movs	r3, #0
}
 8004036:	4618      	mov	r0, r3
 8004038:	46bd      	mov	sp, r7
 800403a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403e:	4770      	bx	lr

08004040 <LL_RCC_PLL_GetN>:
{
 8004040:	b480      	push	{r7}
 8004042:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8004044:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004048:	68db      	ldr	r3, [r3, #12]
 800404a:	0a1b      	lsrs	r3, r3, #8
 800404c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8004050:	4618      	mov	r0, r3
 8004052:	46bd      	mov	sp, r7
 8004054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004058:	4770      	bx	lr

0800405a <LL_RCC_PLL_GetR>:
{
 800405a:	b480      	push	{r7}
 800405c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800405e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004062:	68db      	ldr	r3, [r3, #12]
 8004064:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8004068:	4618      	mov	r0, r3
 800406a:	46bd      	mov	sp, r7
 800406c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004070:	4770      	bx	lr

08004072 <LL_RCC_PLL_GetDivider>:
{
 8004072:	b480      	push	{r7}
 8004074:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8004076:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800407a:	68db      	ldr	r3, [r3, #12]
 800407c:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8004080:	4618      	mov	r0, r3
 8004082:	46bd      	mov	sp, r7
 8004084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004088:	4770      	bx	lr

0800408a <LL_RCC_PLL_GetMainSource>:
{
 800408a:	b480      	push	{r7}
 800408c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800408e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004092:	68db      	ldr	r3, [r3, #12]
 8004094:	f003 0303 	and.w	r3, r3, #3
}
 8004098:	4618      	mov	r0, r3
 800409a:	46bd      	mov	sp, r7
 800409c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a0:	4770      	bx	lr

080040a2 <LL_RCC_IsActiveFlag_HPRE>:
{
 80040a2:	b480      	push	{r7}
 80040a4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80040a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040b4:	d101      	bne.n	80040ba <LL_RCC_IsActiveFlag_HPRE+0x18>
 80040b6:	2301      	movs	r3, #1
 80040b8:	e000      	b.n	80040bc <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80040ba:	2300      	movs	r3, #0
}
 80040bc:	4618      	mov	r0, r3
 80040be:	46bd      	mov	sp, r7
 80040c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c4:	4770      	bx	lr

080040c6 <LL_RCC_IsActiveFlag_C2HPRE>:
{
 80040c6:	b480      	push	{r7}
 80040c8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80040ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040ce:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80040d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040d6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80040da:	d101      	bne.n	80040e0 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80040dc:	2301      	movs	r3, #1
 80040de:	e000      	b.n	80040e2 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80040e0:	2300      	movs	r3, #0
}
 80040e2:	4618      	mov	r0, r3
 80040e4:	46bd      	mov	sp, r7
 80040e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ea:	4770      	bx	lr

080040ec <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 80040ec:	b480      	push	{r7}
 80040ee:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80040f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040f4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80040f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004100:	d101      	bne.n	8004106 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8004102:	2301      	movs	r3, #1
 8004104:	e000      	b.n	8004108 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8004106:	2300      	movs	r3, #0
}
 8004108:	4618      	mov	r0, r3
 800410a:	46bd      	mov	sp, r7
 800410c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004110:	4770      	bx	lr

08004112 <LL_RCC_IsActiveFlag_PPRE1>:
{
 8004112:	b480      	push	{r7}
 8004114:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8004116:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800411a:	689b      	ldr	r3, [r3, #8]
 800411c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004120:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004124:	d101      	bne.n	800412a <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8004126:	2301      	movs	r3, #1
 8004128:	e000      	b.n	800412c <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800412a:	2300      	movs	r3, #0
}
 800412c:	4618      	mov	r0, r3
 800412e:	46bd      	mov	sp, r7
 8004130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004134:	4770      	bx	lr

08004136 <LL_RCC_IsActiveFlag_PPRE2>:
{
 8004136:	b480      	push	{r7}
 8004138:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800413a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004144:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004148:	d101      	bne.n	800414e <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800414a:	2301      	movs	r3, #1
 800414c:	e000      	b.n	8004150 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800414e:	2300      	movs	r3, #0
}
 8004150:	4618      	mov	r0, r3
 8004152:	46bd      	mov	sp, r7
 8004154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004158:	4770      	bx	lr
	...

0800415c <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800415c:	b590      	push	{r4, r7, lr}
 800415e:	b08d      	sub	sp, #52	; 0x34
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d101      	bne.n	800416e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	e363      	b.n	8004836 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f003 0320 	and.w	r3, r3, #32
 8004176:	2b00      	cmp	r3, #0
 8004178:	f000 808d 	beq.w	8004296 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800417c:	f7ff fe89 	bl	8003e92 <LL_RCC_GetSysClkSource>
 8004180:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004182:	f7ff ff82 	bl	800408a <LL_RCC_PLL_GetMainSource>
 8004186:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800418a:	2b00      	cmp	r3, #0
 800418c:	d005      	beq.n	800419a <HAL_RCC_OscConfig+0x3e>
 800418e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004190:	2b0c      	cmp	r3, #12
 8004192:	d147      	bne.n	8004224 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8004194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004196:	2b01      	cmp	r3, #1
 8004198:	d144      	bne.n	8004224 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	69db      	ldr	r3, [r3, #28]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d101      	bne.n	80041a6 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 80041a2:	2301      	movs	r3, #1
 80041a4:	e347      	b.n	8004836 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80041aa:	f7ff fe34 	bl	8003e16 <LL_RCC_MSI_GetRange>
 80041ae:	4603      	mov	r3, r0
 80041b0:	429c      	cmp	r4, r3
 80041b2:	d914      	bls.n	80041de <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b8:	4618      	mov	r0, r3
 80041ba:	f000 fd2f 	bl	8004c1c <RCC_SetFlashLatencyFromMSIRange>
 80041be:	4603      	mov	r3, r0
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d001      	beq.n	80041c8 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 80041c4:	2301      	movs	r3, #1
 80041c6:	e336      	b.n	8004836 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041cc:	4618      	mov	r0, r3
 80041ce:	f7ff fe0e 	bl	8003dee <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6a1b      	ldr	r3, [r3, #32]
 80041d6:	4618      	mov	r0, r3
 80041d8:	f7ff fe32 	bl	8003e40 <LL_RCC_MSI_SetCalibTrimming>
 80041dc:	e013      	b.n	8004206 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e2:	4618      	mov	r0, r3
 80041e4:	f7ff fe03 	bl	8003dee <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6a1b      	ldr	r3, [r3, #32]
 80041ec:	4618      	mov	r0, r3
 80041ee:	f7ff fe27 	bl	8003e40 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f6:	4618      	mov	r0, r3
 80041f8:	f000 fd10 	bl	8004c1c <RCC_SetFlashLatencyFromMSIRange>
 80041fc:	4603      	mov	r3, r0
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d001      	beq.n	8004206 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8004202:	2301      	movs	r3, #1
 8004204:	e317      	b.n	8004836 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004206:	f000 fcc9 	bl	8004b9c <HAL_RCC_GetHCLKFreq>
 800420a:	4603      	mov	r3, r0
 800420c:	4aa4      	ldr	r2, [pc, #656]	; (80044a0 <HAL_RCC_OscConfig+0x344>)
 800420e:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004210:	4ba4      	ldr	r3, [pc, #656]	; (80044a4 <HAL_RCC_OscConfig+0x348>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4618      	mov	r0, r3
 8004216:	f7fe f9a7 	bl	8002568 <HAL_InitTick>
 800421a:	4603      	mov	r3, r0
 800421c:	2b00      	cmp	r3, #0
 800421e:	d039      	beq.n	8004294 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8004220:	2301      	movs	r3, #1
 8004222:	e308      	b.n	8004836 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	69db      	ldr	r3, [r3, #28]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d01e      	beq.n	800426a <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800422c:	f7ff fdb0 	bl	8003d90 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004230:	f7fe f9e8 	bl	8002604 <HAL_GetTick>
 8004234:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8004236:	e008      	b.n	800424a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004238:	f7fe f9e4 	bl	8002604 <HAL_GetTick>
 800423c:	4602      	mov	r2, r0
 800423e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004240:	1ad3      	subs	r3, r2, r3
 8004242:	2b02      	cmp	r3, #2
 8004244:	d901      	bls.n	800424a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004246:	2303      	movs	r3, #3
 8004248:	e2f5      	b.n	8004836 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 800424a:	f7ff fdbf 	bl	8003dcc <LL_RCC_MSI_IsReady>
 800424e:	4603      	mov	r3, r0
 8004250:	2b00      	cmp	r3, #0
 8004252:	d0f1      	beq.n	8004238 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004258:	4618      	mov	r0, r3
 800425a:	f7ff fdc8 	bl	8003dee <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6a1b      	ldr	r3, [r3, #32]
 8004262:	4618      	mov	r0, r3
 8004264:	f7ff fdec 	bl	8003e40 <LL_RCC_MSI_SetCalibTrimming>
 8004268:	e015      	b.n	8004296 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800426a:	f7ff fda0 	bl	8003dae <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800426e:	f7fe f9c9 	bl	8002604 <HAL_GetTick>
 8004272:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8004274:	e008      	b.n	8004288 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004276:	f7fe f9c5 	bl	8002604 <HAL_GetTick>
 800427a:	4602      	mov	r2, r0
 800427c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800427e:	1ad3      	subs	r3, r2, r3
 8004280:	2b02      	cmp	r3, #2
 8004282:	d901      	bls.n	8004288 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004284:	2303      	movs	r3, #3
 8004286:	e2d6      	b.n	8004836 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8004288:	f7ff fda0 	bl	8003dcc <LL_RCC_MSI_IsReady>
 800428c:	4603      	mov	r3, r0
 800428e:	2b00      	cmp	r3, #0
 8004290:	d1f1      	bne.n	8004276 <HAL_RCC_OscConfig+0x11a>
 8004292:	e000      	b.n	8004296 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004294:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f003 0301 	and.w	r3, r3, #1
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d047      	beq.n	8004332 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80042a2:	f7ff fdf6 	bl	8003e92 <LL_RCC_GetSysClkSource>
 80042a6:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80042a8:	f7ff feef 	bl	800408a <LL_RCC_PLL_GetMainSource>
 80042ac:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80042ae:	6a3b      	ldr	r3, [r7, #32]
 80042b0:	2b08      	cmp	r3, #8
 80042b2:	d005      	beq.n	80042c0 <HAL_RCC_OscConfig+0x164>
 80042b4:	6a3b      	ldr	r3, [r7, #32]
 80042b6:	2b0c      	cmp	r3, #12
 80042b8:	d108      	bne.n	80042cc <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80042ba:	69fb      	ldr	r3, [r7, #28]
 80042bc:	2b03      	cmp	r3, #3
 80042be:	d105      	bne.n	80042cc <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d134      	bne.n	8004332 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 80042c8:	2301      	movs	r3, #1
 80042ca:	e2b4      	b.n	8004836 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042d4:	d102      	bne.n	80042dc <HAL_RCC_OscConfig+0x180>
 80042d6:	f7ff fbdd 	bl	8003a94 <LL_RCC_HSE_Enable>
 80042da:	e001      	b.n	80042e0 <HAL_RCC_OscConfig+0x184>
 80042dc:	f7ff fbe9 	bl	8003ab2 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d012      	beq.n	800430e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042e8:	f7fe f98c 	bl	8002604 <HAL_GetTick>
 80042ec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80042ee:	e008      	b.n	8004302 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042f0:	f7fe f988 	bl	8002604 <HAL_GetTick>
 80042f4:	4602      	mov	r2, r0
 80042f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f8:	1ad3      	subs	r3, r2, r3
 80042fa:	2b64      	cmp	r3, #100	; 0x64
 80042fc:	d901      	bls.n	8004302 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80042fe:	2303      	movs	r3, #3
 8004300:	e299      	b.n	8004836 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8004302:	f7ff fbe5 	bl	8003ad0 <LL_RCC_HSE_IsReady>
 8004306:	4603      	mov	r3, r0
 8004308:	2b00      	cmp	r3, #0
 800430a:	d0f1      	beq.n	80042f0 <HAL_RCC_OscConfig+0x194>
 800430c:	e011      	b.n	8004332 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800430e:	f7fe f979 	bl	8002604 <HAL_GetTick>
 8004312:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8004314:	e008      	b.n	8004328 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004316:	f7fe f975 	bl	8002604 <HAL_GetTick>
 800431a:	4602      	mov	r2, r0
 800431c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800431e:	1ad3      	subs	r3, r2, r3
 8004320:	2b64      	cmp	r3, #100	; 0x64
 8004322:	d901      	bls.n	8004328 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8004324:	2303      	movs	r3, #3
 8004326:	e286      	b.n	8004836 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8004328:	f7ff fbd2 	bl	8003ad0 <LL_RCC_HSE_IsReady>
 800432c:	4603      	mov	r3, r0
 800432e:	2b00      	cmp	r3, #0
 8004330:	d1f1      	bne.n	8004316 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f003 0302 	and.w	r3, r3, #2
 800433a:	2b00      	cmp	r3, #0
 800433c:	d04c      	beq.n	80043d8 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800433e:	f7ff fda8 	bl	8003e92 <LL_RCC_GetSysClkSource>
 8004342:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004344:	f7ff fea1 	bl	800408a <LL_RCC_PLL_GetMainSource>
 8004348:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800434a:	69bb      	ldr	r3, [r7, #24]
 800434c:	2b04      	cmp	r3, #4
 800434e:	d005      	beq.n	800435c <HAL_RCC_OscConfig+0x200>
 8004350:	69bb      	ldr	r3, [r7, #24]
 8004352:	2b0c      	cmp	r3, #12
 8004354:	d10e      	bne.n	8004374 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	2b02      	cmp	r3, #2
 800435a:	d10b      	bne.n	8004374 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	68db      	ldr	r3, [r3, #12]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d101      	bne.n	8004368 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8004364:	2301      	movs	r3, #1
 8004366:	e266      	b.n	8004836 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	691b      	ldr	r3, [r3, #16]
 800436c:	4618      	mov	r0, r3
 800436e:	f7ff fbf1 	bl	8003b54 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004372:	e031      	b.n	80043d8 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	68db      	ldr	r3, [r3, #12]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d019      	beq.n	80043b0 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800437c:	f7ff fbba 	bl	8003af4 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004380:	f7fe f940 	bl	8002604 <HAL_GetTick>
 8004384:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8004386:	e008      	b.n	800439a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004388:	f7fe f93c 	bl	8002604 <HAL_GetTick>
 800438c:	4602      	mov	r2, r0
 800438e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004390:	1ad3      	subs	r3, r2, r3
 8004392:	2b02      	cmp	r3, #2
 8004394:	d901      	bls.n	800439a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8004396:	2303      	movs	r3, #3
 8004398:	e24d      	b.n	8004836 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 800439a:	f7ff fbc9 	bl	8003b30 <LL_RCC_HSI_IsReady>
 800439e:	4603      	mov	r3, r0
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d0f1      	beq.n	8004388 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	691b      	ldr	r3, [r3, #16]
 80043a8:	4618      	mov	r0, r3
 80043aa:	f7ff fbd3 	bl	8003b54 <LL_RCC_HSI_SetCalibTrimming>
 80043ae:	e013      	b.n	80043d8 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80043b0:	f7ff fbaf 	bl	8003b12 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043b4:	f7fe f926 	bl	8002604 <HAL_GetTick>
 80043b8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80043ba:	e008      	b.n	80043ce <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043bc:	f7fe f922 	bl	8002604 <HAL_GetTick>
 80043c0:	4602      	mov	r2, r0
 80043c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c4:	1ad3      	subs	r3, r2, r3
 80043c6:	2b02      	cmp	r3, #2
 80043c8:	d901      	bls.n	80043ce <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 80043ca:	2303      	movs	r3, #3
 80043cc:	e233      	b.n	8004836 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 80043ce:	f7ff fbaf 	bl	8003b30 <LL_RCC_HSI_IsReady>
 80043d2:	4603      	mov	r3, r0
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d1f1      	bne.n	80043bc <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f003 0308 	and.w	r3, r3, #8
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d106      	bne.n	80043f2 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	f000 80a3 	beq.w	8004538 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	695b      	ldr	r3, [r3, #20]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d076      	beq.n	80044e8 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f003 0310 	and.w	r3, r3, #16
 8004402:	2b00      	cmp	r3, #0
 8004404:	d046      	beq.n	8004494 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8004406:	f7ff fc66 	bl	8003cd6 <LL_RCC_LSI1_IsReady>
 800440a:	4603      	mov	r3, r0
 800440c:	2b00      	cmp	r3, #0
 800440e:	d113      	bne.n	8004438 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8004410:	f7ff fc3f 	bl	8003c92 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004414:	f7fe f8f6 	bl	8002604 <HAL_GetTick>
 8004418:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800441a:	e008      	b.n	800442e <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800441c:	f7fe f8f2 	bl	8002604 <HAL_GetTick>
 8004420:	4602      	mov	r2, r0
 8004422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004424:	1ad3      	subs	r3, r2, r3
 8004426:	2b02      	cmp	r3, #2
 8004428:	d901      	bls.n	800442e <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 800442a:	2303      	movs	r3, #3
 800442c:	e203      	b.n	8004836 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800442e:	f7ff fc52 	bl	8003cd6 <LL_RCC_LSI1_IsReady>
 8004432:	4603      	mov	r3, r0
 8004434:	2b00      	cmp	r3, #0
 8004436:	d0f1      	beq.n	800441c <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8004438:	f7ff fc5f 	bl	8003cfa <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800443c:	f7fe f8e2 	bl	8002604 <HAL_GetTick>
 8004440:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8004442:	e008      	b.n	8004456 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004444:	f7fe f8de 	bl	8002604 <HAL_GetTick>
 8004448:	4602      	mov	r2, r0
 800444a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800444c:	1ad3      	subs	r3, r2, r3
 800444e:	2b03      	cmp	r3, #3
 8004450:	d901      	bls.n	8004456 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8004452:	2303      	movs	r3, #3
 8004454:	e1ef      	b.n	8004836 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8004456:	f7ff fc72 	bl	8003d3e <LL_RCC_LSI2_IsReady>
 800445a:	4603      	mov	r3, r0
 800445c:	2b00      	cmp	r3, #0
 800445e:	d0f1      	beq.n	8004444 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	699b      	ldr	r3, [r3, #24]
 8004464:	4618      	mov	r0, r3
 8004466:	f7ff fc7c 	bl	8003d62 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800446a:	f7ff fc23 	bl	8003cb4 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800446e:	f7fe f8c9 	bl	8002604 <HAL_GetTick>
 8004472:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8004474:	e008      	b.n	8004488 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004476:	f7fe f8c5 	bl	8002604 <HAL_GetTick>
 800447a:	4602      	mov	r2, r0
 800447c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800447e:	1ad3      	subs	r3, r2, r3
 8004480:	2b02      	cmp	r3, #2
 8004482:	d901      	bls.n	8004488 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8004484:	2303      	movs	r3, #3
 8004486:	e1d6      	b.n	8004836 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8004488:	f7ff fc25 	bl	8003cd6 <LL_RCC_LSI1_IsReady>
 800448c:	4603      	mov	r3, r0
 800448e:	2b00      	cmp	r3, #0
 8004490:	d1f1      	bne.n	8004476 <HAL_RCC_OscConfig+0x31a>
 8004492:	e051      	b.n	8004538 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8004494:	f7ff fbfd 	bl	8003c92 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004498:	f7fe f8b4 	bl	8002604 <HAL_GetTick>
 800449c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800449e:	e00c      	b.n	80044ba <HAL_RCC_OscConfig+0x35e>
 80044a0:	20000008 	.word	0x20000008
 80044a4:	2000000c 	.word	0x2000000c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80044a8:	f7fe f8ac 	bl	8002604 <HAL_GetTick>
 80044ac:	4602      	mov	r2, r0
 80044ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b0:	1ad3      	subs	r3, r2, r3
 80044b2:	2b02      	cmp	r3, #2
 80044b4:	d901      	bls.n	80044ba <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80044b6:	2303      	movs	r3, #3
 80044b8:	e1bd      	b.n	8004836 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80044ba:	f7ff fc0c 	bl	8003cd6 <LL_RCC_LSI1_IsReady>
 80044be:	4603      	mov	r3, r0
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d0f1      	beq.n	80044a8 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80044c4:	f7ff fc2a 	bl	8003d1c <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80044c8:	e008      	b.n	80044dc <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80044ca:	f7fe f89b 	bl	8002604 <HAL_GetTick>
 80044ce:	4602      	mov	r2, r0
 80044d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d2:	1ad3      	subs	r3, r2, r3
 80044d4:	2b03      	cmp	r3, #3
 80044d6:	d901      	bls.n	80044dc <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 80044d8:	2303      	movs	r3, #3
 80044da:	e1ac      	b.n	8004836 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80044dc:	f7ff fc2f 	bl	8003d3e <LL_RCC_LSI2_IsReady>
 80044e0:	4603      	mov	r3, r0
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d1f1      	bne.n	80044ca <HAL_RCC_OscConfig+0x36e>
 80044e6:	e027      	b.n	8004538 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80044e8:	f7ff fc18 	bl	8003d1c <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044ec:	f7fe f88a 	bl	8002604 <HAL_GetTick>
 80044f0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80044f2:	e008      	b.n	8004506 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80044f4:	f7fe f886 	bl	8002604 <HAL_GetTick>
 80044f8:	4602      	mov	r2, r0
 80044fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044fc:	1ad3      	subs	r3, r2, r3
 80044fe:	2b03      	cmp	r3, #3
 8004500:	d901      	bls.n	8004506 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004502:	2303      	movs	r3, #3
 8004504:	e197      	b.n	8004836 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8004506:	f7ff fc1a 	bl	8003d3e <LL_RCC_LSI2_IsReady>
 800450a:	4603      	mov	r3, r0
 800450c:	2b00      	cmp	r3, #0
 800450e:	d1f1      	bne.n	80044f4 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8004510:	f7ff fbd0 	bl	8003cb4 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004514:	f7fe f876 	bl	8002604 <HAL_GetTick>
 8004518:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800451a:	e008      	b.n	800452e <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800451c:	f7fe f872 	bl	8002604 <HAL_GetTick>
 8004520:	4602      	mov	r2, r0
 8004522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004524:	1ad3      	subs	r3, r2, r3
 8004526:	2b02      	cmp	r3, #2
 8004528:	d901      	bls.n	800452e <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 800452a:	2303      	movs	r3, #3
 800452c:	e183      	b.n	8004836 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800452e:	f7ff fbd2 	bl	8003cd6 <LL_RCC_LSI1_IsReady>
 8004532:	4603      	mov	r3, r0
 8004534:	2b00      	cmp	r3, #0
 8004536:	d1f1      	bne.n	800451c <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f003 0304 	and.w	r3, r3, #4
 8004540:	2b00      	cmp	r3, #0
 8004542:	d05b      	beq.n	80045fc <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004544:	4ba7      	ldr	r3, [pc, #668]	; (80047e4 <HAL_RCC_OscConfig+0x688>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800454c:	2b00      	cmp	r3, #0
 800454e:	d114      	bne.n	800457a <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8004550:	f7ff fa70 	bl	8003a34 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004554:	f7fe f856 	bl	8002604 <HAL_GetTick>
 8004558:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800455a:	e008      	b.n	800456e <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800455c:	f7fe f852 	bl	8002604 <HAL_GetTick>
 8004560:	4602      	mov	r2, r0
 8004562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004564:	1ad3      	subs	r3, r2, r3
 8004566:	2b02      	cmp	r3, #2
 8004568:	d901      	bls.n	800456e <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800456a:	2303      	movs	r3, #3
 800456c:	e163      	b.n	8004836 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800456e:	4b9d      	ldr	r3, [pc, #628]	; (80047e4 <HAL_RCC_OscConfig+0x688>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004576:	2b00      	cmp	r3, #0
 8004578:	d0f0      	beq.n	800455c <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	689b      	ldr	r3, [r3, #8]
 800457e:	2b01      	cmp	r3, #1
 8004580:	d102      	bne.n	8004588 <HAL_RCC_OscConfig+0x42c>
 8004582:	f7ff fb30 	bl	8003be6 <LL_RCC_LSE_Enable>
 8004586:	e00c      	b.n	80045a2 <HAL_RCC_OscConfig+0x446>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	689b      	ldr	r3, [r3, #8]
 800458c:	2b05      	cmp	r3, #5
 800458e:	d104      	bne.n	800459a <HAL_RCC_OscConfig+0x43e>
 8004590:	f7ff fb4b 	bl	8003c2a <LL_RCC_LSE_EnableBypass>
 8004594:	f7ff fb27 	bl	8003be6 <LL_RCC_LSE_Enable>
 8004598:	e003      	b.n	80045a2 <HAL_RCC_OscConfig+0x446>
 800459a:	f7ff fb35 	bl	8003c08 <LL_RCC_LSE_Disable>
 800459e:	f7ff fb55 	bl	8003c4c <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	689b      	ldr	r3, [r3, #8]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d014      	beq.n	80045d4 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045aa:	f7fe f82b 	bl	8002604 <HAL_GetTick>
 80045ae:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80045b0:	e00a      	b.n	80045c8 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045b2:	f7fe f827 	bl	8002604 <HAL_GetTick>
 80045b6:	4602      	mov	r2, r0
 80045b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ba:	1ad3      	subs	r3, r2, r3
 80045bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d901      	bls.n	80045c8 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 80045c4:	2303      	movs	r3, #3
 80045c6:	e136      	b.n	8004836 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 80045c8:	f7ff fb51 	bl	8003c6e <LL_RCC_LSE_IsReady>
 80045cc:	4603      	mov	r3, r0
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d0ef      	beq.n	80045b2 <HAL_RCC_OscConfig+0x456>
 80045d2:	e013      	b.n	80045fc <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045d4:	f7fe f816 	bl	8002604 <HAL_GetTick>
 80045d8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80045da:	e00a      	b.n	80045f2 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045dc:	f7fe f812 	bl	8002604 <HAL_GetTick>
 80045e0:	4602      	mov	r2, r0
 80045e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e4:	1ad3      	subs	r3, r2, r3
 80045e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d901      	bls.n	80045f2 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 80045ee:	2303      	movs	r3, #3
 80045f0:	e121      	b.n	8004836 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 80045f2:	f7ff fb3c 	bl	8003c6e <LL_RCC_LSE_IsReady>
 80045f6:	4603      	mov	r3, r0
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d1ef      	bne.n	80045dc <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004604:	2b00      	cmp	r3, #0
 8004606:	d02c      	beq.n	8004662 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800460c:	2b00      	cmp	r3, #0
 800460e:	d014      	beq.n	800463a <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004610:	f7ff fab5 	bl	8003b7e <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004614:	f7fd fff6 	bl	8002604 <HAL_GetTick>
 8004618:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800461a:	e008      	b.n	800462e <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800461c:	f7fd fff2 	bl	8002604 <HAL_GetTick>
 8004620:	4602      	mov	r2, r0
 8004622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004624:	1ad3      	subs	r3, r2, r3
 8004626:	2b02      	cmp	r3, #2
 8004628:	d901      	bls.n	800462e <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 800462a:	2303      	movs	r3, #3
 800462c:	e103      	b.n	8004836 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800462e:	f7ff fac8 	bl	8003bc2 <LL_RCC_HSI48_IsReady>
 8004632:	4603      	mov	r3, r0
 8004634:	2b00      	cmp	r3, #0
 8004636:	d0f1      	beq.n	800461c <HAL_RCC_OscConfig+0x4c0>
 8004638:	e013      	b.n	8004662 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800463a:	f7ff fab1 	bl	8003ba0 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800463e:	f7fd ffe1 	bl	8002604 <HAL_GetTick>
 8004642:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8004644:	e008      	b.n	8004658 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004646:	f7fd ffdd 	bl	8002604 <HAL_GetTick>
 800464a:	4602      	mov	r2, r0
 800464c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800464e:	1ad3      	subs	r3, r2, r3
 8004650:	2b02      	cmp	r3, #2
 8004652:	d901      	bls.n	8004658 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8004654:	2303      	movs	r3, #3
 8004656:	e0ee      	b.n	8004836 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8004658:	f7ff fab3 	bl	8003bc2 <LL_RCC_HSI48_IsReady>
 800465c:	4603      	mov	r3, r0
 800465e:	2b00      	cmp	r3, #0
 8004660:	d1f1      	bne.n	8004646 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004666:	2b00      	cmp	r3, #0
 8004668:	f000 80e4 	beq.w	8004834 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800466c:	f7ff fc11 	bl	8003e92 <LL_RCC_GetSysClkSource>
 8004670:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8004672:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004676:	68db      	ldr	r3, [r3, #12]
 8004678:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800467e:	2b02      	cmp	r3, #2
 8004680:	f040 80b4 	bne.w	80047ec <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	f003 0203 	and.w	r2, r3, #3
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800468e:	429a      	cmp	r2, r3
 8004690:	d123      	bne.n	80046da <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800469c:	429a      	cmp	r2, r3
 800469e:	d11c      	bne.n	80046da <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	0a1b      	lsrs	r3, r3, #8
 80046a4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80046ac:	429a      	cmp	r2, r3
 80046ae:	d114      	bne.n	80046da <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80046ba:	429a      	cmp	r2, r3
 80046bc:	d10d      	bne.n	80046da <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80046c8:	429a      	cmp	r2, r3
 80046ca:	d106      	bne.n	80046da <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80046d6:	429a      	cmp	r2, r3
 80046d8:	d05d      	beq.n	8004796 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	2b0c      	cmp	r3, #12
 80046de:	d058      	beq.n	8004792 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80046e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d001      	beq.n	80046f2 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 80046ee:	2301      	movs	r3, #1
 80046f0:	e0a1      	b.n	8004836 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80046f2:	f7ff fc84 	bl	8003ffe <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80046f6:	f7fd ff85 	bl	8002604 <HAL_GetTick>
 80046fa:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046fc:	e008      	b.n	8004710 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046fe:	f7fd ff81 	bl	8002604 <HAL_GetTick>
 8004702:	4602      	mov	r2, r0
 8004704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004706:	1ad3      	subs	r3, r2, r3
 8004708:	2b02      	cmp	r3, #2
 800470a:	d901      	bls.n	8004710 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 800470c:	2303      	movs	r3, #3
 800470e:	e092      	b.n	8004836 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004710:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800471a:	2b00      	cmp	r3, #0
 800471c:	d1ef      	bne.n	80046fe <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800471e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004722:	68da      	ldr	r2, [r3, #12]
 8004724:	4b30      	ldr	r3, [pc, #192]	; (80047e8 <HAL_RCC_OscConfig+0x68c>)
 8004726:	4013      	ands	r3, r2
 8004728:	687a      	ldr	r2, [r7, #4]
 800472a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800472c:	687a      	ldr	r2, [r7, #4]
 800472e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004730:	4311      	orrs	r1, r2
 8004732:	687a      	ldr	r2, [r7, #4]
 8004734:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004736:	0212      	lsls	r2, r2, #8
 8004738:	4311      	orrs	r1, r2
 800473a:	687a      	ldr	r2, [r7, #4]
 800473c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800473e:	4311      	orrs	r1, r2
 8004740:	687a      	ldr	r2, [r7, #4]
 8004742:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004744:	4311      	orrs	r1, r2
 8004746:	687a      	ldr	r2, [r7, #4]
 8004748:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800474a:	430a      	orrs	r2, r1
 800474c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004750:	4313      	orrs	r3, r2
 8004752:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004754:	f7ff fc44 	bl	8003fe0 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004758:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800475c:	68db      	ldr	r3, [r3, #12]
 800475e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004762:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004766:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004768:	f7fd ff4c 	bl	8002604 <HAL_GetTick>
 800476c:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800476e:	e008      	b.n	8004782 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004770:	f7fd ff48 	bl	8002604 <HAL_GetTick>
 8004774:	4602      	mov	r2, r0
 8004776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004778:	1ad3      	subs	r3, r2, r3
 800477a:	2b02      	cmp	r3, #2
 800477c:	d901      	bls.n	8004782 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 800477e:	2303      	movs	r3, #3
 8004780:	e059      	b.n	8004836 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004782:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800478c:	2b00      	cmp	r3, #0
 800478e:	d0ef      	beq.n	8004770 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004790:	e050      	b.n	8004834 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004792:	2301      	movs	r3, #1
 8004794:	e04f      	b.n	8004836 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004796:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d147      	bne.n	8004834 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80047a4:	f7ff fc1c 	bl	8003fe0 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80047a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047ac:	68db      	ldr	r3, [r3, #12]
 80047ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80047b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047b6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80047b8:	f7fd ff24 	bl	8002604 <HAL_GetTick>
 80047bc:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047be:	e008      	b.n	80047d2 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047c0:	f7fd ff20 	bl	8002604 <HAL_GetTick>
 80047c4:	4602      	mov	r2, r0
 80047c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c8:	1ad3      	subs	r3, r2, r3
 80047ca:	2b02      	cmp	r3, #2
 80047cc:	d901      	bls.n	80047d2 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 80047ce:	2303      	movs	r3, #3
 80047d0:	e031      	b.n	8004836 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d0ef      	beq.n	80047c0 <HAL_RCC_OscConfig+0x664>
 80047e0:	e028      	b.n	8004834 <HAL_RCC_OscConfig+0x6d8>
 80047e2:	bf00      	nop
 80047e4:	58000400 	.word	0x58000400
 80047e8:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80047ec:	693b      	ldr	r3, [r7, #16]
 80047ee:	2b0c      	cmp	r3, #12
 80047f0:	d01e      	beq.n	8004830 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047f2:	f7ff fc04 	bl	8003ffe <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047f6:	f7fd ff05 	bl	8002604 <HAL_GetTick>
 80047fa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80047fc:	e008      	b.n	8004810 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047fe:	f7fd ff01 	bl	8002604 <HAL_GetTick>
 8004802:	4602      	mov	r2, r0
 8004804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004806:	1ad3      	subs	r3, r2, r3
 8004808:	2b02      	cmp	r3, #2
 800480a:	d901      	bls.n	8004810 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 800480c:	2303      	movs	r3, #3
 800480e:	e012      	b.n	8004836 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004810:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800481a:	2b00      	cmp	r3, #0
 800481c:	d1ef      	bne.n	80047fe <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 800481e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004822:	68da      	ldr	r2, [r3, #12]
 8004824:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004828:	4b05      	ldr	r3, [pc, #20]	; (8004840 <HAL_RCC_OscConfig+0x6e4>)
 800482a:	4013      	ands	r3, r2
 800482c:	60cb      	str	r3, [r1, #12]
 800482e:	e001      	b.n	8004834 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004830:	2301      	movs	r3, #1
 8004832:	e000      	b.n	8004836 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8004834:	2300      	movs	r3, #0
}
 8004836:	4618      	mov	r0, r3
 8004838:	3734      	adds	r7, #52	; 0x34
 800483a:	46bd      	mov	sp, r7
 800483c:	bd90      	pop	{r4, r7, pc}
 800483e:	bf00      	nop
 8004840:	eefefffc 	.word	0xeefefffc

08004844 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b084      	sub	sp, #16
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
 800484c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d101      	bne.n	8004858 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004854:	2301      	movs	r3, #1
 8004856:	e12d      	b.n	8004ab4 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004858:	4b98      	ldr	r3, [pc, #608]	; (8004abc <HAL_RCC_ClockConfig+0x278>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f003 0307 	and.w	r3, r3, #7
 8004860:	683a      	ldr	r2, [r7, #0]
 8004862:	429a      	cmp	r2, r3
 8004864:	d91b      	bls.n	800489e <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004866:	4b95      	ldr	r3, [pc, #596]	; (8004abc <HAL_RCC_ClockConfig+0x278>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f023 0207 	bic.w	r2, r3, #7
 800486e:	4993      	ldr	r1, [pc, #588]	; (8004abc <HAL_RCC_ClockConfig+0x278>)
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	4313      	orrs	r3, r2
 8004874:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004876:	f7fd fec5 	bl	8002604 <HAL_GetTick>
 800487a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800487c:	e008      	b.n	8004890 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800487e:	f7fd fec1 	bl	8002604 <HAL_GetTick>
 8004882:	4602      	mov	r2, r0
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	1ad3      	subs	r3, r2, r3
 8004888:	2b02      	cmp	r3, #2
 800488a:	d901      	bls.n	8004890 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 800488c:	2303      	movs	r3, #3
 800488e:	e111      	b.n	8004ab4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004890:	4b8a      	ldr	r3, [pc, #552]	; (8004abc <HAL_RCC_ClockConfig+0x278>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f003 0307 	and.w	r3, r3, #7
 8004898:	683a      	ldr	r2, [r7, #0]
 800489a:	429a      	cmp	r2, r3
 800489c:	d1ef      	bne.n	800487e <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f003 0302 	and.w	r3, r3, #2
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d016      	beq.n	80048d8 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	689b      	ldr	r3, [r3, #8]
 80048ae:	4618      	mov	r0, r3
 80048b0:	f7ff fafb 	bl	8003eaa <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80048b4:	f7fd fea6 	bl	8002604 <HAL_GetTick>
 80048b8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80048ba:	e008      	b.n	80048ce <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80048bc:	f7fd fea2 	bl	8002604 <HAL_GetTick>
 80048c0:	4602      	mov	r2, r0
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	1ad3      	subs	r3, r2, r3
 80048c6:	2b02      	cmp	r3, #2
 80048c8:	d901      	bls.n	80048ce <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80048ca:	2303      	movs	r3, #3
 80048cc:	e0f2      	b.n	8004ab4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80048ce:	f7ff fbe8 	bl	80040a2 <LL_RCC_IsActiveFlag_HPRE>
 80048d2:	4603      	mov	r3, r0
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d0f1      	beq.n	80048bc <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f003 0320 	and.w	r3, r3, #32
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d016      	beq.n	8004912 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	695b      	ldr	r3, [r3, #20]
 80048e8:	4618      	mov	r0, r3
 80048ea:	f7ff faf2 	bl	8003ed2 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80048ee:	f7fd fe89 	bl	8002604 <HAL_GetTick>
 80048f2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80048f4:	e008      	b.n	8004908 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80048f6:	f7fd fe85 	bl	8002604 <HAL_GetTick>
 80048fa:	4602      	mov	r2, r0
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	1ad3      	subs	r3, r2, r3
 8004900:	2b02      	cmp	r3, #2
 8004902:	d901      	bls.n	8004908 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8004904:	2303      	movs	r3, #3
 8004906:	e0d5      	b.n	8004ab4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004908:	f7ff fbdd 	bl	80040c6 <LL_RCC_IsActiveFlag_C2HPRE>
 800490c:	4603      	mov	r3, r0
 800490e:	2b00      	cmp	r3, #0
 8004910:	d0f1      	beq.n	80048f6 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800491a:	2b00      	cmp	r3, #0
 800491c:	d016      	beq.n	800494c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	699b      	ldr	r3, [r3, #24]
 8004922:	4618      	mov	r0, r3
 8004924:	f7ff faeb 	bl	8003efe <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004928:	f7fd fe6c 	bl	8002604 <HAL_GetTick>
 800492c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800492e:	e008      	b.n	8004942 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004930:	f7fd fe68 	bl	8002604 <HAL_GetTick>
 8004934:	4602      	mov	r2, r0
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	1ad3      	subs	r3, r2, r3
 800493a:	2b02      	cmp	r3, #2
 800493c:	d901      	bls.n	8004942 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800493e:	2303      	movs	r3, #3
 8004940:	e0b8      	b.n	8004ab4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004942:	f7ff fbd3 	bl	80040ec <LL_RCC_IsActiveFlag_SHDHPRE>
 8004946:	4603      	mov	r3, r0
 8004948:	2b00      	cmp	r3, #0
 800494a:	d0f1      	beq.n	8004930 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f003 0304 	and.w	r3, r3, #4
 8004954:	2b00      	cmp	r3, #0
 8004956:	d016      	beq.n	8004986 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	68db      	ldr	r3, [r3, #12]
 800495c:	4618      	mov	r0, r3
 800495e:	f7ff fae5 	bl	8003f2c <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004962:	f7fd fe4f 	bl	8002604 <HAL_GetTick>
 8004966:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004968:	e008      	b.n	800497c <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800496a:	f7fd fe4b 	bl	8002604 <HAL_GetTick>
 800496e:	4602      	mov	r2, r0
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	1ad3      	subs	r3, r2, r3
 8004974:	2b02      	cmp	r3, #2
 8004976:	d901      	bls.n	800497c <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8004978:	2303      	movs	r3, #3
 800497a:	e09b      	b.n	8004ab4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800497c:	f7ff fbc9 	bl	8004112 <LL_RCC_IsActiveFlag_PPRE1>
 8004980:	4603      	mov	r3, r0
 8004982:	2b00      	cmp	r3, #0
 8004984:	d0f1      	beq.n	800496a <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f003 0308 	and.w	r3, r3, #8
 800498e:	2b00      	cmp	r3, #0
 8004990:	d017      	beq.n	80049c2 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	691b      	ldr	r3, [r3, #16]
 8004996:	00db      	lsls	r3, r3, #3
 8004998:	4618      	mov	r0, r3
 800499a:	f7ff fadb 	bl	8003f54 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800499e:	f7fd fe31 	bl	8002604 <HAL_GetTick>
 80049a2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80049a4:	e008      	b.n	80049b8 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80049a6:	f7fd fe2d 	bl	8002604 <HAL_GetTick>
 80049aa:	4602      	mov	r2, r0
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	1ad3      	subs	r3, r2, r3
 80049b0:	2b02      	cmp	r3, #2
 80049b2:	d901      	bls.n	80049b8 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80049b4:	2303      	movs	r3, #3
 80049b6:	e07d      	b.n	8004ab4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80049b8:	f7ff fbbd 	bl	8004136 <LL_RCC_IsActiveFlag_PPRE2>
 80049bc:	4603      	mov	r3, r0
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d0f1      	beq.n	80049a6 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f003 0301 	and.w	r3, r3, #1
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d043      	beq.n	8004a56 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	2b02      	cmp	r3, #2
 80049d4:	d106      	bne.n	80049e4 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80049d6:	f7ff f87b 	bl	8003ad0 <LL_RCC_HSE_IsReady>
 80049da:	4603      	mov	r3, r0
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d11e      	bne.n	8004a1e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80049e0:	2301      	movs	r3, #1
 80049e2:	e067      	b.n	8004ab4 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	2b03      	cmp	r3, #3
 80049ea:	d106      	bne.n	80049fa <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80049ec:	f7ff fb16 	bl	800401c <LL_RCC_PLL_IsReady>
 80049f0:	4603      	mov	r3, r0
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d113      	bne.n	8004a1e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80049f6:	2301      	movs	r3, #1
 80049f8:	e05c      	b.n	8004ab4 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d106      	bne.n	8004a10 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8004a02:	f7ff f9e3 	bl	8003dcc <LL_RCC_MSI_IsReady>
 8004a06:	4603      	mov	r3, r0
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d108      	bne.n	8004a1e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	e051      	b.n	8004ab4 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8004a10:	f7ff f88e 	bl	8003b30 <LL_RCC_HSI_IsReady>
 8004a14:	4603      	mov	r3, r0
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d101      	bne.n	8004a1e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	e04a      	b.n	8004ab4 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	4618      	mov	r0, r3
 8004a24:	f7ff fa21 	bl	8003e6a <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a28:	f7fd fdec 	bl	8002604 <HAL_GetTick>
 8004a2c:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a2e:	e00a      	b.n	8004a46 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a30:	f7fd fde8 	bl	8002604 <HAL_GetTick>
 8004a34:	4602      	mov	r2, r0
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	1ad3      	subs	r3, r2, r3
 8004a3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d901      	bls.n	8004a46 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8004a42:	2303      	movs	r3, #3
 8004a44:	e036      	b.n	8004ab4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a46:	f7ff fa24 	bl	8003e92 <LL_RCC_GetSysClkSource>
 8004a4a:	4602      	mov	r2, r0
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	009b      	lsls	r3, r3, #2
 8004a52:	429a      	cmp	r2, r3
 8004a54:	d1ec      	bne.n	8004a30 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004a56:	4b19      	ldr	r3, [pc, #100]	; (8004abc <HAL_RCC_ClockConfig+0x278>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f003 0307 	and.w	r3, r3, #7
 8004a5e:	683a      	ldr	r2, [r7, #0]
 8004a60:	429a      	cmp	r2, r3
 8004a62:	d21b      	bcs.n	8004a9c <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a64:	4b15      	ldr	r3, [pc, #84]	; (8004abc <HAL_RCC_ClockConfig+0x278>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f023 0207 	bic.w	r2, r3, #7
 8004a6c:	4913      	ldr	r1, [pc, #76]	; (8004abc <HAL_RCC_ClockConfig+0x278>)
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	4313      	orrs	r3, r2
 8004a72:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a74:	f7fd fdc6 	bl	8002604 <HAL_GetTick>
 8004a78:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a7a:	e008      	b.n	8004a8e <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004a7c:	f7fd fdc2 	bl	8002604 <HAL_GetTick>
 8004a80:	4602      	mov	r2, r0
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	1ad3      	subs	r3, r2, r3
 8004a86:	2b02      	cmp	r3, #2
 8004a88:	d901      	bls.n	8004a8e <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8004a8a:	2303      	movs	r3, #3
 8004a8c:	e012      	b.n	8004ab4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a8e:	4b0b      	ldr	r3, [pc, #44]	; (8004abc <HAL_RCC_ClockConfig+0x278>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f003 0307 	and.w	r3, r3, #7
 8004a96:	683a      	ldr	r2, [r7, #0]
 8004a98:	429a      	cmp	r2, r3
 8004a9a:	d1ef      	bne.n	8004a7c <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004a9c:	f000 f87e 	bl	8004b9c <HAL_RCC_GetHCLKFreq>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	4a07      	ldr	r2, [pc, #28]	; (8004ac0 <HAL_RCC_ClockConfig+0x27c>)
 8004aa4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8004aa6:	f7fd fdb9 	bl	800261c <HAL_GetTickPrio>
 8004aaa:	4603      	mov	r3, r0
 8004aac:	4618      	mov	r0, r3
 8004aae:	f7fd fd5b 	bl	8002568 <HAL_InitTick>
 8004ab2:	4603      	mov	r3, r0
}
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	3710      	adds	r7, #16
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	bd80      	pop	{r7, pc}
 8004abc:	58004000 	.word	0x58004000
 8004ac0:	20000008 	.word	0x20000008

08004ac4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ac4:	b590      	push	{r4, r7, lr}
 8004ac6:	b085      	sub	sp, #20
 8004ac8:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004aca:	f7ff f9e2 	bl	8003e92 <LL_RCC_GetSysClkSource>
 8004ace:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d10a      	bne.n	8004aec <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8004ad6:	f7ff f99e 	bl	8003e16 <LL_RCC_MSI_GetRange>
 8004ada:	4603      	mov	r3, r0
 8004adc:	091b      	lsrs	r3, r3, #4
 8004ade:	f003 030f 	and.w	r3, r3, #15
 8004ae2:	4a2b      	ldr	r2, [pc, #172]	; (8004b90 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004ae4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ae8:	60fb      	str	r3, [r7, #12]
 8004aea:	e04b      	b.n	8004b84 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2b04      	cmp	r3, #4
 8004af0:	d102      	bne.n	8004af8 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004af2:	4b28      	ldr	r3, [pc, #160]	; (8004b94 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004af4:	60fb      	str	r3, [r7, #12]
 8004af6:	e045      	b.n	8004b84 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2b08      	cmp	r3, #8
 8004afc:	d10a      	bne.n	8004b14 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004afe:	f7fe ffb7 	bl	8003a70 <LL_RCC_HSE_IsEnabledDiv2>
 8004b02:	4603      	mov	r3, r0
 8004b04:	2b01      	cmp	r3, #1
 8004b06:	d102      	bne.n	8004b0e <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8004b08:	4b22      	ldr	r3, [pc, #136]	; (8004b94 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004b0a:	60fb      	str	r3, [r7, #12]
 8004b0c:	e03a      	b.n	8004b84 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8004b0e:	4b22      	ldr	r3, [pc, #136]	; (8004b98 <HAL_RCC_GetSysClockFreq+0xd4>)
 8004b10:	60fb      	str	r3, [r7, #12]
 8004b12:	e037      	b.n	8004b84 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8004b14:	f7ff fab9 	bl	800408a <LL_RCC_PLL_GetMainSource>
 8004b18:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	2b02      	cmp	r3, #2
 8004b1e:	d003      	beq.n	8004b28 <HAL_RCC_GetSysClockFreq+0x64>
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	2b03      	cmp	r3, #3
 8004b24:	d003      	beq.n	8004b2e <HAL_RCC_GetSysClockFreq+0x6a>
 8004b26:	e00d      	b.n	8004b44 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8004b28:	4b1a      	ldr	r3, [pc, #104]	; (8004b94 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004b2a:	60bb      	str	r3, [r7, #8]
        break;
 8004b2c:	e015      	b.n	8004b5a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004b2e:	f7fe ff9f 	bl	8003a70 <LL_RCC_HSE_IsEnabledDiv2>
 8004b32:	4603      	mov	r3, r0
 8004b34:	2b01      	cmp	r3, #1
 8004b36:	d102      	bne.n	8004b3e <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8004b38:	4b16      	ldr	r3, [pc, #88]	; (8004b94 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004b3a:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8004b3c:	e00d      	b.n	8004b5a <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8004b3e:	4b16      	ldr	r3, [pc, #88]	; (8004b98 <HAL_RCC_GetSysClockFreq+0xd4>)
 8004b40:	60bb      	str	r3, [r7, #8]
        break;
 8004b42:	e00a      	b.n	8004b5a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8004b44:	f7ff f967 	bl	8003e16 <LL_RCC_MSI_GetRange>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	091b      	lsrs	r3, r3, #4
 8004b4c:	f003 030f 	and.w	r3, r3, #15
 8004b50:	4a0f      	ldr	r2, [pc, #60]	; (8004b90 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004b52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b56:	60bb      	str	r3, [r7, #8]
        break;
 8004b58:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8004b5a:	f7ff fa71 	bl	8004040 <LL_RCC_PLL_GetN>
 8004b5e:	4602      	mov	r2, r0
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	fb03 f402 	mul.w	r4, r3, r2
 8004b66:	f7ff fa84 	bl	8004072 <LL_RCC_PLL_GetDivider>
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	091b      	lsrs	r3, r3, #4
 8004b6e:	3301      	adds	r3, #1
 8004b70:	fbb4 f4f3 	udiv	r4, r4, r3
 8004b74:	f7ff fa71 	bl	800405a <LL_RCC_PLL_GetR>
 8004b78:	4603      	mov	r3, r0
 8004b7a:	0f5b      	lsrs	r3, r3, #29
 8004b7c:	3301      	adds	r3, #1
 8004b7e:	fbb4 f3f3 	udiv	r3, r4, r3
 8004b82:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8004b84:	68fb      	ldr	r3, [r7, #12]
}
 8004b86:	4618      	mov	r0, r3
 8004b88:	3714      	adds	r7, #20
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bd90      	pop	{r4, r7, pc}
 8004b8e:	bf00      	nop
 8004b90:	0800ab80 	.word	0x0800ab80
 8004b94:	00f42400 	.word	0x00f42400
 8004b98:	01e84800 	.word	0x01e84800

08004b9c <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b9c:	b598      	push	{r3, r4, r7, lr}
 8004b9e:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8004ba0:	f7ff ff90 	bl	8004ac4 <HAL_RCC_GetSysClockFreq>
 8004ba4:	4604      	mov	r4, r0
 8004ba6:	f7ff f9e9 	bl	8003f7c <LL_RCC_GetAHBPrescaler>
 8004baa:	4603      	mov	r3, r0
 8004bac:	091b      	lsrs	r3, r3, #4
 8004bae:	f003 030f 	and.w	r3, r3, #15
 8004bb2:	4a03      	ldr	r2, [pc, #12]	; (8004bc0 <HAL_RCC_GetHCLKFreq+0x24>)
 8004bb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004bb8:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	bd98      	pop	{r3, r4, r7, pc}
 8004bc0:	0800ab20 	.word	0x0800ab20

08004bc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004bc4:	b598      	push	{r3, r4, r7, lr}
 8004bc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004bc8:	f7ff ffe8 	bl	8004b9c <HAL_RCC_GetHCLKFreq>
 8004bcc:	4604      	mov	r4, r0
 8004bce:	f7ff f9ef 	bl	8003fb0 <LL_RCC_GetAPB1Prescaler>
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	0a1b      	lsrs	r3, r3, #8
 8004bd6:	f003 0307 	and.w	r3, r3, #7
 8004bda:	4a04      	ldr	r2, [pc, #16]	; (8004bec <HAL_RCC_GetPCLK1Freq+0x28>)
 8004bdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004be0:	f003 031f 	and.w	r3, r3, #31
 8004be4:	fa24 f303 	lsr.w	r3, r4, r3
}
 8004be8:	4618      	mov	r0, r3
 8004bea:	bd98      	pop	{r3, r4, r7, pc}
 8004bec:	0800ab60 	.word	0x0800ab60

08004bf0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004bf0:	b598      	push	{r3, r4, r7, lr}
 8004bf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8004bf4:	f7ff ffd2 	bl	8004b9c <HAL_RCC_GetHCLKFreq>
 8004bf8:	4604      	mov	r4, r0
 8004bfa:	f7ff f9e5 	bl	8003fc8 <LL_RCC_GetAPB2Prescaler>
 8004bfe:	4603      	mov	r3, r0
 8004c00:	0adb      	lsrs	r3, r3, #11
 8004c02:	f003 0307 	and.w	r3, r3, #7
 8004c06:	4a04      	ldr	r2, [pc, #16]	; (8004c18 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004c08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c0c:	f003 031f 	and.w	r3, r3, #31
 8004c10:	fa24 f303 	lsr.w	r3, r4, r3
}
 8004c14:	4618      	mov	r0, r3
 8004c16:	bd98      	pop	{r3, r4, r7, pc}
 8004c18:	0800ab60 	.word	0x0800ab60

08004c1c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8004c1c:	b590      	push	{r4, r7, lr}
 8004c1e:	b085      	sub	sp, #20
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2bb0      	cmp	r3, #176	; 0xb0
 8004c28:	d903      	bls.n	8004c32 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8004c2a:	4b15      	ldr	r3, [pc, #84]	; (8004c80 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8004c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c2e:	60fb      	str	r3, [r7, #12]
 8004c30:	e007      	b.n	8004c42 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	091b      	lsrs	r3, r3, #4
 8004c36:	f003 030f 	and.w	r3, r3, #15
 8004c3a:	4a11      	ldr	r2, [pc, #68]	; (8004c80 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8004c3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c40:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8004c42:	f7ff f9a7 	bl	8003f94 <LL_RCC_GetAHB4Prescaler>
 8004c46:	4603      	mov	r3, r0
 8004c48:	091b      	lsrs	r3, r3, #4
 8004c4a:	f003 030f 	and.w	r3, r3, #15
 8004c4e:	4a0d      	ldr	r2, [pc, #52]	; (8004c84 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8004c50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c54:	68fa      	ldr	r2, [r7, #12]
 8004c56:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c5a:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	4a0a      	ldr	r2, [pc, #40]	; (8004c88 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8004c60:	fba2 2303 	umull	r2, r3, r2, r3
 8004c64:	0c9c      	lsrs	r4, r3, #18
 8004c66:	f7fe fef5 	bl	8003a54 <HAL_PWREx_GetVoltageRange>
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	4619      	mov	r1, r3
 8004c6e:	4620      	mov	r0, r4
 8004c70:	f000 f80c 	bl	8004c8c <RCC_SetFlashLatency>
 8004c74:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8004c76:	4618      	mov	r0, r3
 8004c78:	3714      	adds	r7, #20
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bd90      	pop	{r4, r7, pc}
 8004c7e:	bf00      	nop
 8004c80:	0800ab80 	.word	0x0800ab80
 8004c84:	0800ab20 	.word	0x0800ab20
 8004c88:	431bde83 	.word	0x431bde83

08004c8c <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8004c8c:	b590      	push	{r4, r7, lr}
 8004c8e:	b093      	sub	sp, #76	; 0x4c
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
 8004c94:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8004c96:	4b37      	ldr	r3, [pc, #220]	; (8004d74 <RCC_SetFlashLatency+0xe8>)
 8004c98:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8004c9c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004c9e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8004ca2:	4a35      	ldr	r2, [pc, #212]	; (8004d78 <RCC_SetFlashLatency+0xec>)
 8004ca4:	f107 031c 	add.w	r3, r7, #28
 8004ca8:	ca07      	ldmia	r2, {r0, r1, r2}
 8004caa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8004cae:	4b33      	ldr	r3, [pc, #204]	; (8004d7c <RCC_SetFlashLatency+0xf0>)
 8004cb0:	f107 040c 	add.w	r4, r7, #12
 8004cb4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004cb6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8004cba:	2300      	movs	r3, #0
 8004cbc:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004cc4:	d11a      	bne.n	8004cfc <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	643b      	str	r3, [r7, #64]	; 0x40
 8004cca:	e013      	b.n	8004cf4 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8004ccc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004cce:	009b      	lsls	r3, r3, #2
 8004cd0:	3348      	adds	r3, #72	; 0x48
 8004cd2:	443b      	add	r3, r7
 8004cd4:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8004cd8:	687a      	ldr	r2, [r7, #4]
 8004cda:	429a      	cmp	r2, r3
 8004cdc:	d807      	bhi.n	8004cee <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8004cde:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ce0:	009b      	lsls	r3, r3, #2
 8004ce2:	3348      	adds	r3, #72	; 0x48
 8004ce4:	443b      	add	r3, r7
 8004ce6:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8004cea:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8004cec:	e020      	b.n	8004d30 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004cee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004cf0:	3301      	adds	r3, #1
 8004cf2:	643b      	str	r3, [r7, #64]	; 0x40
 8004cf4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004cf6:	2b03      	cmp	r3, #3
 8004cf8:	d9e8      	bls.n	8004ccc <RCC_SetFlashLatency+0x40>
 8004cfa:	e019      	b.n	8004d30 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d00:	e013      	b.n	8004d2a <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8004d02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d04:	009b      	lsls	r3, r3, #2
 8004d06:	3348      	adds	r3, #72	; 0x48
 8004d08:	443b      	add	r3, r7
 8004d0a:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8004d0e:	687a      	ldr	r2, [r7, #4]
 8004d10:	429a      	cmp	r2, r3
 8004d12:	d807      	bhi.n	8004d24 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8004d14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d16:	009b      	lsls	r3, r3, #2
 8004d18:	3348      	adds	r3, #72	; 0x48
 8004d1a:	443b      	add	r3, r7
 8004d1c:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8004d20:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8004d22:	e005      	b.n	8004d30 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004d24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d26:	3301      	adds	r3, #1
 8004d28:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d2c:	2b02      	cmp	r3, #2
 8004d2e:	d9e8      	bls.n	8004d02 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8004d30:	4b13      	ldr	r3, [pc, #76]	; (8004d80 <RCC_SetFlashLatency+0xf4>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f023 0207 	bic.w	r2, r3, #7
 8004d38:	4911      	ldr	r1, [pc, #68]	; (8004d80 <RCC_SetFlashLatency+0xf4>)
 8004d3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004d40:	f7fd fc60 	bl	8002604 <HAL_GetTick>
 8004d44:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8004d46:	e008      	b.n	8004d5a <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004d48:	f7fd fc5c 	bl	8002604 <HAL_GetTick>
 8004d4c:	4602      	mov	r2, r0
 8004d4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d50:	1ad3      	subs	r3, r2, r3
 8004d52:	2b02      	cmp	r3, #2
 8004d54:	d901      	bls.n	8004d5a <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8004d56:	2303      	movs	r3, #3
 8004d58:	e007      	b.n	8004d6a <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8004d5a:	4b09      	ldr	r3, [pc, #36]	; (8004d80 <RCC_SetFlashLatency+0xf4>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f003 0307 	and.w	r3, r3, #7
 8004d62:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004d64:	429a      	cmp	r2, r3
 8004d66:	d1ef      	bne.n	8004d48 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8004d68:	2300      	movs	r3, #0
}
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	374c      	adds	r7, #76	; 0x4c
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	bd90      	pop	{r4, r7, pc}
 8004d72:	bf00      	nop
 8004d74:	0800a97c 	.word	0x0800a97c
 8004d78:	0800a98c 	.word	0x0800a98c
 8004d7c:	0800a998 	.word	0x0800a998
 8004d80:	58004000 	.word	0x58004000

08004d84 <LL_RCC_LSE_IsEnabled>:
{
 8004d84:	b480      	push	{r7}
 8004d86:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8004d88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d90:	f003 0301 	and.w	r3, r3, #1
 8004d94:	2b01      	cmp	r3, #1
 8004d96:	d101      	bne.n	8004d9c <LL_RCC_LSE_IsEnabled+0x18>
 8004d98:	2301      	movs	r3, #1
 8004d9a:	e000      	b.n	8004d9e <LL_RCC_LSE_IsEnabled+0x1a>
 8004d9c:	2300      	movs	r3, #0
}
 8004d9e:	4618      	mov	r0, r3
 8004da0:	46bd      	mov	sp, r7
 8004da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da6:	4770      	bx	lr

08004da8 <LL_RCC_LSE_IsReady>:
{
 8004da8:	b480      	push	{r7}
 8004daa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004dac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004db0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004db4:	f003 0302 	and.w	r3, r3, #2
 8004db8:	2b02      	cmp	r3, #2
 8004dba:	d101      	bne.n	8004dc0 <LL_RCC_LSE_IsReady+0x18>
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	e000      	b.n	8004dc2 <LL_RCC_LSE_IsReady+0x1a>
 8004dc0:	2300      	movs	r3, #0
}
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dca:	4770      	bx	lr

08004dcc <LL_RCC_SetRFWKPClockSource>:
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b083      	sub	sp, #12
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8004dd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004dd8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ddc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004de0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	4313      	orrs	r3, r2
 8004de8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8004dec:	bf00      	nop
 8004dee:	370c      	adds	r7, #12
 8004df0:	46bd      	mov	sp, r7
 8004df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df6:	4770      	bx	lr

08004df8 <LL_RCC_SetSMPSClockSource>:
{
 8004df8:	b480      	push	{r7}
 8004dfa:	b083      	sub	sp, #12
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8004e00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e06:	f023 0203 	bic.w	r2, r3, #3
 8004e0a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	4313      	orrs	r3, r2
 8004e12:	624b      	str	r3, [r1, #36]	; 0x24
}
 8004e14:	bf00      	nop
 8004e16:	370c      	adds	r7, #12
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1e:	4770      	bx	lr

08004e20 <LL_RCC_SetSMPSPrescaler>:
{
 8004e20:	b480      	push	{r7}
 8004e22:	b083      	sub	sp, #12
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8004e28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e2e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004e32:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	624b      	str	r3, [r1, #36]	; 0x24
}
 8004e3c:	bf00      	nop
 8004e3e:	370c      	adds	r7, #12
 8004e40:	46bd      	mov	sp, r7
 8004e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e46:	4770      	bx	lr

08004e48 <LL_RCC_SetUSARTClockSource>:
{
 8004e48:	b480      	push	{r7}
 8004e4a:	b083      	sub	sp, #12
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8004e50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e58:	f023 0203 	bic.w	r2, r3, #3
 8004e5c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	4313      	orrs	r3, r2
 8004e64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004e68:	bf00      	nop
 8004e6a:	370c      	adds	r7, #12
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e72:	4770      	bx	lr

08004e74 <LL_RCC_SetLPUARTClockSource>:
{
 8004e74:	b480      	push	{r7}
 8004e76:	b083      	sub	sp, #12
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8004e7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e84:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004e88:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004e94:	bf00      	nop
 8004e96:	370c      	adds	r7, #12
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9e:	4770      	bx	lr

08004ea0 <LL_RCC_SetI2CClockSource>:
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	b083      	sub	sp, #12
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8004ea8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004eac:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	091b      	lsrs	r3, r3, #4
 8004eb4:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8004eb8:	43db      	mvns	r3, r3
 8004eba:	401a      	ands	r2, r3
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	011b      	lsls	r3, r3, #4
 8004ec0:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8004ec4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004ece:	bf00      	nop
 8004ed0:	370c      	adds	r7, #12
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed8:	4770      	bx	lr

08004eda <LL_RCC_SetLPTIMClockSource>:
{
 8004eda:	b480      	push	{r7}
 8004edc:	b083      	sub	sp, #12
 8004ede:	af00      	add	r7, sp, #0
 8004ee0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8004ee2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ee6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	0c1b      	lsrs	r3, r3, #16
 8004eee:	041b      	lsls	r3, r3, #16
 8004ef0:	43db      	mvns	r3, r3
 8004ef2:	401a      	ands	r2, r3
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	041b      	lsls	r3, r3, #16
 8004ef8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004efc:	4313      	orrs	r3, r2
 8004efe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004f02:	bf00      	nop
 8004f04:	370c      	adds	r7, #12
 8004f06:	46bd      	mov	sp, r7
 8004f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0c:	4770      	bx	lr

08004f0e <LL_RCC_SetSAIClockSource>:
{
 8004f0e:	b480      	push	{r7}
 8004f10:	b083      	sub	sp, #12
 8004f12:	af00      	add	r7, sp, #0
 8004f14:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8004f16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f1e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004f22:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004f2e:	bf00      	nop
 8004f30:	370c      	adds	r7, #12
 8004f32:	46bd      	mov	sp, r7
 8004f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f38:	4770      	bx	lr

08004f3a <LL_RCC_SetRNGClockSource>:
{
 8004f3a:	b480      	push	{r7}
 8004f3c:	b083      	sub	sp, #12
 8004f3e:	af00      	add	r7, sp, #0
 8004f40:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8004f42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f4a:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8004f4e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	4313      	orrs	r3, r2
 8004f56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004f5a:	bf00      	nop
 8004f5c:	370c      	adds	r7, #12
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f64:	4770      	bx	lr

08004f66 <LL_RCC_SetCLK48ClockSource>:
{
 8004f66:	b480      	push	{r7}
 8004f68:	b083      	sub	sp, #12
 8004f6a:	af00      	add	r7, sp, #0
 8004f6c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8004f6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f76:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004f7a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	4313      	orrs	r3, r2
 8004f82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004f86:	bf00      	nop
 8004f88:	370c      	adds	r7, #12
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f90:	4770      	bx	lr

08004f92 <LL_RCC_SetUSBClockSource>:
{
 8004f92:	b580      	push	{r7, lr}
 8004f94:	b082      	sub	sp, #8
 8004f96:	af00      	add	r7, sp, #0
 8004f98:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8004f9a:	6878      	ldr	r0, [r7, #4]
 8004f9c:	f7ff ffe3 	bl	8004f66 <LL_RCC_SetCLK48ClockSource>
}
 8004fa0:	bf00      	nop
 8004fa2:	3708      	adds	r7, #8
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bd80      	pop	{r7, pc}

08004fa8 <LL_RCC_SetADCClockSource>:
{
 8004fa8:	b480      	push	{r7}
 8004faa:	b083      	sub	sp, #12
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8004fb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fb8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004fbc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004fc8:	bf00      	nop
 8004fca:	370c      	adds	r7, #12
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd2:	4770      	bx	lr

08004fd4 <LL_RCC_SetRTCClockSource>:
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	b083      	sub	sp, #12
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8004fdc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fe0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fe4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004fe8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8004ff4:	bf00      	nop
 8004ff6:	370c      	adds	r7, #12
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffe:	4770      	bx	lr

08005000 <LL_RCC_GetRTCClockSource>:
{
 8005000:	b480      	push	{r7}
 8005002:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8005004:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005008:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800500c:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8005010:	4618      	mov	r0, r3
 8005012:	46bd      	mov	sp, r7
 8005014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005018:	4770      	bx	lr

0800501a <LL_RCC_ForceBackupDomainReset>:
{
 800501a:	b480      	push	{r7}
 800501c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800501e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005022:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005026:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800502a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800502e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005032:	bf00      	nop
 8005034:	46bd      	mov	sp, r7
 8005036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503a:	4770      	bx	lr

0800503c <LL_RCC_ReleaseBackupDomainReset>:
{
 800503c:	b480      	push	{r7}
 800503e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005040:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005044:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005048:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800504c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005050:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005054:	bf00      	nop
 8005056:	46bd      	mov	sp, r7
 8005058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505c:	4770      	bx	lr

0800505e <LL_RCC_PLLSAI1_Enable>:
{
 800505e:	b480      	push	{r7}
 8005060:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8005062:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800506c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005070:	6013      	str	r3, [r2, #0]
}
 8005072:	bf00      	nop
 8005074:	46bd      	mov	sp, r7
 8005076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507a:	4770      	bx	lr

0800507c <LL_RCC_PLLSAI1_Disable>:
{
 800507c:	b480      	push	{r7}
 800507e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8005080:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800508a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800508e:	6013      	str	r3, [r2, #0]
}
 8005090:	bf00      	nop
 8005092:	46bd      	mov	sp, r7
 8005094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005098:	4770      	bx	lr

0800509a <LL_RCC_PLLSAI1_IsReady>:
{
 800509a:	b480      	push	{r7}
 800509c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800509e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80050a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80050ac:	d101      	bne.n	80050b2 <LL_RCC_PLLSAI1_IsReady+0x18>
 80050ae:	2301      	movs	r3, #1
 80050b0:	e000      	b.n	80050b4 <LL_RCC_PLLSAI1_IsReady+0x1a>
 80050b2:	2300      	movs	r3, #0
}
 80050b4:	4618      	mov	r0, r3
 80050b6:	46bd      	mov	sp, r7
 80050b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050bc:	4770      	bx	lr

080050be <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80050be:	b580      	push	{r7, lr}
 80050c0:	b088      	sub	sp, #32
 80050c2:	af00      	add	r7, sp, #0
 80050c4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 80050c6:	2300      	movs	r3, #0
 80050c8:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80050ca:	2300      	movs	r3, #0
 80050cc:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d034      	beq.n	8005144 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050de:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80050e2:	d021      	beq.n	8005128 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 80050e4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80050e8:	d81b      	bhi.n	8005122 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80050ea:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80050ee:	d01d      	beq.n	800512c <HAL_RCCEx_PeriphCLKConfig+0x6e>
 80050f0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80050f4:	d815      	bhi.n	8005122 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d00b      	beq.n	8005112 <HAL_RCCEx_PeriphCLKConfig+0x54>
 80050fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80050fe:	d110      	bne.n	8005122 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8005100:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005104:	68db      	ldr	r3, [r3, #12]
 8005106:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800510a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800510e:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8005110:	e00d      	b.n	800512e <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	3304      	adds	r3, #4
 8005116:	4618      	mov	r0, r3
 8005118:	f000 f947 	bl	80053aa <RCCEx_PLLSAI1_ConfigNP>
 800511c:	4603      	mov	r3, r0
 800511e:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005120:	e005      	b.n	800512e <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8005122:	2301      	movs	r3, #1
 8005124:	77fb      	strb	r3, [r7, #31]
        break;
 8005126:	e002      	b.n	800512e <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8005128:	bf00      	nop
 800512a:	e000      	b.n	800512e <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800512c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800512e:	7ffb      	ldrb	r3, [r7, #31]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d105      	bne.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005138:	4618      	mov	r0, r3
 800513a:	f7ff fee8 	bl	8004f0e <LL_RCC_SetSAIClockSource>
 800513e:	e001      	b.n	8005144 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005140:	7ffb      	ldrb	r3, [r7, #31]
 8005142:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800514c:	2b00      	cmp	r3, #0
 800514e:	d046      	beq.n	80051de <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8005150:	f7ff ff56 	bl	8005000 <LL_RCC_GetRTCClockSource>
 8005154:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800515a:	69ba      	ldr	r2, [r7, #24]
 800515c:	429a      	cmp	r2, r3
 800515e:	d03c      	beq.n	80051da <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8005160:	f7fe fc68 	bl	8003a34 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8005164:	69bb      	ldr	r3, [r7, #24]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d105      	bne.n	8005176 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800516e:	4618      	mov	r0, r3
 8005170:	f7ff ff30 	bl	8004fd4 <LL_RCC_SetRTCClockSource>
 8005174:	e02e      	b.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8005176:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800517a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800517e:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8005180:	f7ff ff4b 	bl	800501a <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8005184:	f7ff ff5a 	bl	800503c <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8005188:	697b      	ldr	r3, [r7, #20]
 800518a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005192:	4313      	orrs	r3, r2
 8005194:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8005196:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 80051a0:	f7ff fdf0 	bl	8004d84 <LL_RCC_LSE_IsEnabled>
 80051a4:	4603      	mov	r3, r0
 80051a6:	2b01      	cmp	r3, #1
 80051a8:	d114      	bne.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80051aa:	f7fd fa2b 	bl	8002604 <HAL_GetTick>
 80051ae:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 80051b0:	e00b      	b.n	80051ca <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051b2:	f7fd fa27 	bl	8002604 <HAL_GetTick>
 80051b6:	4602      	mov	r2, r0
 80051b8:	693b      	ldr	r3, [r7, #16]
 80051ba:	1ad3      	subs	r3, r2, r3
 80051bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d902      	bls.n	80051ca <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 80051c4:	2303      	movs	r3, #3
 80051c6:	77fb      	strb	r3, [r7, #31]
              break;
 80051c8:	e004      	b.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 80051ca:	f7ff fded 	bl	8004da8 <LL_RCC_LSE_IsReady>
 80051ce:	4603      	mov	r3, r0
 80051d0:	2b01      	cmp	r3, #1
 80051d2:	d1ee      	bne.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 80051d4:	7ffb      	ldrb	r3, [r7, #31]
 80051d6:	77bb      	strb	r3, [r7, #30]
 80051d8:	e001      	b.n	80051de <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051da:	7ffb      	ldrb	r3, [r7, #31]
 80051dc:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f003 0301 	and.w	r3, r3, #1
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d004      	beq.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	699b      	ldr	r3, [r3, #24]
 80051ee:	4618      	mov	r0, r3
 80051f0:	f7ff fe2a 	bl	8004e48 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f003 0302 	and.w	r3, r3, #2
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d004      	beq.n	800520a <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	69db      	ldr	r3, [r3, #28]
 8005204:	4618      	mov	r0, r3
 8005206:	f7ff fe35 	bl	8004e74 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f003 0310 	and.w	r3, r3, #16
 8005212:	2b00      	cmp	r3, #0
 8005214:	d004      	beq.n	8005220 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800521a:	4618      	mov	r0, r3
 800521c:	f7ff fe5d 	bl	8004eda <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f003 0320 	and.w	r3, r3, #32
 8005228:	2b00      	cmp	r3, #0
 800522a:	d004      	beq.n	8005236 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005230:	4618      	mov	r0, r3
 8005232:	f7ff fe52 	bl	8004eda <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f003 0304 	and.w	r3, r3, #4
 800523e:	2b00      	cmp	r3, #0
 8005240:	d004      	beq.n	800524c <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6a1b      	ldr	r3, [r3, #32]
 8005246:	4618      	mov	r0, r3
 8005248:	f7ff fe2a 	bl	8004ea0 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f003 0308 	and.w	r3, r3, #8
 8005254:	2b00      	cmp	r3, #0
 8005256:	d004      	beq.n	8005262 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800525c:	4618      	mov	r0, r3
 800525e:	f7ff fe1f 	bl	8004ea0 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800526a:	2b00      	cmp	r3, #0
 800526c:	d022      	beq.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005272:	4618      	mov	r0, r3
 8005274:	f7ff fe8d 	bl	8004f92 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800527c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005280:	d107      	bne.n	8005292 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8005282:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005286:	68db      	ldr	r3, [r3, #12]
 8005288:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800528c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005290:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005296:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800529a:	d10b      	bne.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	3304      	adds	r3, #4
 80052a0:	4618      	mov	r0, r3
 80052a2:	f000 f8dd 	bl	8005460 <RCCEx_PLLSAI1_ConfigNQ>
 80052a6:	4603      	mov	r3, r0
 80052a8:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80052aa:	7ffb      	ldrb	r3, [r7, #31]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d001      	beq.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 80052b0:	7ffb      	ldrb	r3, [r7, #31]
 80052b2:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d02b      	beq.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052c8:	d008      	beq.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80052d2:	d003      	beq.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d105      	bne.n	80052e8 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052e0:	4618      	mov	r0, r3
 80052e2:	f7ff fe2a 	bl	8004f3a <LL_RCC_SetRNGClockSource>
 80052e6:	e00a      	b.n	80052fe <HAL_RCCEx_PeriphCLKConfig+0x240>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80052f0:	60fb      	str	r3, [r7, #12]
 80052f2:	2000      	movs	r0, #0
 80052f4:	f7ff fe21 	bl	8004f3a <LL_RCC_SetRNGClockSource>
 80052f8:	68f8      	ldr	r0, [r7, #12]
 80052fa:	f7ff fe34 	bl	8004f66 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005302:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8005306:	d107      	bne.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8005308:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800530c:	68db      	ldr	r3, [r3, #12]
 800530e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005312:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005316:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005320:	2b00      	cmp	r3, #0
 8005322:	d022      	beq.n	800536a <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005328:	4618      	mov	r0, r3
 800532a:	f7ff fe3d 	bl	8004fa8 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005332:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005336:	d107      	bne.n	8005348 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005338:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800533c:	68db      	ldr	r3, [r3, #12]
 800533e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005342:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005346:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800534c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005350:	d10b      	bne.n	800536a <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	3304      	adds	r3, #4
 8005356:	4618      	mov	r0, r3
 8005358:	f000 f8dd 	bl	8005516 <RCCEx_PLLSAI1_ConfigNR>
 800535c:	4603      	mov	r3, r0
 800535e:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8005360:	7ffb      	ldrb	r3, [r7, #31]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d001      	beq.n	800536a <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8005366:	7ffb      	ldrb	r3, [r7, #31]
 8005368:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005372:	2b00      	cmp	r3, #0
 8005374:	d004      	beq.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800537a:	4618      	mov	r0, r3
 800537c:	f7ff fd26 	bl	8004dcc <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005388:	2b00      	cmp	r3, #0
 800538a:	d009      	beq.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005390:	4618      	mov	r0, r3
 8005392:	f7ff fd45 	bl	8004e20 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800539a:	4618      	mov	r0, r3
 800539c:	f7ff fd2c 	bl	8004df8 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 80053a0:	7fbb      	ldrb	r3, [r7, #30]
}
 80053a2:	4618      	mov	r0, r3
 80053a4:	3720      	adds	r7, #32
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bd80      	pop	{r7, pc}

080053aa <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80053aa:	b580      	push	{r7, lr}
 80053ac:	b084      	sub	sp, #16
 80053ae:	af00      	add	r7, sp, #0
 80053b0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80053b2:	2300      	movs	r3, #0
 80053b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80053b6:	f7ff fe61 	bl	800507c <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80053ba:	f7fd f923 	bl	8002604 <HAL_GetTick>
 80053be:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80053c0:	e009      	b.n	80053d6 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80053c2:	f7fd f91f 	bl	8002604 <HAL_GetTick>
 80053c6:	4602      	mov	r2, r0
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	1ad3      	subs	r3, r2, r3
 80053cc:	2b02      	cmp	r3, #2
 80053ce:	d902      	bls.n	80053d6 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 80053d0:	2303      	movs	r3, #3
 80053d2:	73fb      	strb	r3, [r7, #15]
      break;
 80053d4:	e004      	b.n	80053e0 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80053d6:	f7ff fe60 	bl	800509a <LL_RCC_PLLSAI1_IsReady>
 80053da:	4603      	mov	r3, r0
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d1f0      	bne.n	80053c2 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 80053e0:	7bfb      	ldrb	r3, [r7, #15]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d137      	bne.n	8005456 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80053e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053ea:	691b      	ldr	r3, [r3, #16]
 80053ec:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	021b      	lsls	r3, r3, #8
 80053f6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80053fa:	4313      	orrs	r3, r2
 80053fc:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 80053fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005402:	691b      	ldr	r3, [r3, #16]
 8005404:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005410:	4313      	orrs	r3, r2
 8005412:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005414:	f7ff fe23 	bl	800505e <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005418:	f7fd f8f4 	bl	8002604 <HAL_GetTick>
 800541c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800541e:	e009      	b.n	8005434 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005420:	f7fd f8f0 	bl	8002604 <HAL_GetTick>
 8005424:	4602      	mov	r2, r0
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	1ad3      	subs	r3, r2, r3
 800542a:	2b02      	cmp	r3, #2
 800542c:	d902      	bls.n	8005434 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800542e:	2303      	movs	r3, #3
 8005430:	73fb      	strb	r3, [r7, #15]
        break;
 8005432:	e004      	b.n	800543e <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005434:	f7ff fe31 	bl	800509a <LL_RCC_PLLSAI1_IsReady>
 8005438:	4603      	mov	r3, r0
 800543a:	2b01      	cmp	r3, #1
 800543c:	d1f0      	bne.n	8005420 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800543e:	7bfb      	ldrb	r3, [r7, #15]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d108      	bne.n	8005456 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005444:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005448:	691a      	ldr	r2, [r3, #16]
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	691b      	ldr	r3, [r3, #16]
 800544e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005452:	4313      	orrs	r3, r2
 8005454:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005456:	7bfb      	ldrb	r3, [r7, #15]
}
 8005458:	4618      	mov	r0, r3
 800545a:	3710      	adds	r7, #16
 800545c:	46bd      	mov	sp, r7
 800545e:	bd80      	pop	{r7, pc}

08005460 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b084      	sub	sp, #16
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005468:	2300      	movs	r3, #0
 800546a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800546c:	f7ff fe06 	bl	800507c <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005470:	f7fd f8c8 	bl	8002604 <HAL_GetTick>
 8005474:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005476:	e009      	b.n	800548c <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005478:	f7fd f8c4 	bl	8002604 <HAL_GetTick>
 800547c:	4602      	mov	r2, r0
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	1ad3      	subs	r3, r2, r3
 8005482:	2b02      	cmp	r3, #2
 8005484:	d902      	bls.n	800548c <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8005486:	2303      	movs	r3, #3
 8005488:	73fb      	strb	r3, [r7, #15]
      break;
 800548a:	e004      	b.n	8005496 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800548c:	f7ff fe05 	bl	800509a <LL_RCC_PLLSAI1_IsReady>
 8005490:	4603      	mov	r3, r0
 8005492:	2b00      	cmp	r3, #0
 8005494:	d1f0      	bne.n	8005478 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8005496:	7bfb      	ldrb	r3, [r7, #15]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d137      	bne.n	800550c <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800549c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054a0:	691b      	ldr	r3, [r3, #16]
 80054a2:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	021b      	lsls	r3, r3, #8
 80054ac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80054b0:	4313      	orrs	r3, r2
 80054b2:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 80054b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054b8:	691b      	ldr	r3, [r3, #16]
 80054ba:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	689b      	ldr	r3, [r3, #8]
 80054c2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80054c6:	4313      	orrs	r3, r2
 80054c8:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80054ca:	f7ff fdc8 	bl	800505e <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054ce:	f7fd f899 	bl	8002604 <HAL_GetTick>
 80054d2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80054d4:	e009      	b.n	80054ea <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80054d6:	f7fd f895 	bl	8002604 <HAL_GetTick>
 80054da:	4602      	mov	r2, r0
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	1ad3      	subs	r3, r2, r3
 80054e0:	2b02      	cmp	r3, #2
 80054e2:	d902      	bls.n	80054ea <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 80054e4:	2303      	movs	r3, #3
 80054e6:	73fb      	strb	r3, [r7, #15]
        break;
 80054e8:	e004      	b.n	80054f4 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80054ea:	f7ff fdd6 	bl	800509a <LL_RCC_PLLSAI1_IsReady>
 80054ee:	4603      	mov	r3, r0
 80054f0:	2b01      	cmp	r3, #1
 80054f2:	d1f0      	bne.n	80054d6 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 80054f4:	7bfb      	ldrb	r3, [r7, #15]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d108      	bne.n	800550c <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80054fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054fe:	691a      	ldr	r2, [r3, #16]
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	691b      	ldr	r3, [r3, #16]
 8005504:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005508:	4313      	orrs	r3, r2
 800550a:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800550c:	7bfb      	ldrb	r3, [r7, #15]
}
 800550e:	4618      	mov	r0, r3
 8005510:	3710      	adds	r7, #16
 8005512:	46bd      	mov	sp, r7
 8005514:	bd80      	pop	{r7, pc}

08005516 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005516:	b580      	push	{r7, lr}
 8005518:	b084      	sub	sp, #16
 800551a:	af00      	add	r7, sp, #0
 800551c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800551e:	2300      	movs	r3, #0
 8005520:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005522:	f7ff fdab 	bl	800507c <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005526:	f7fd f86d 	bl	8002604 <HAL_GetTick>
 800552a:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800552c:	e009      	b.n	8005542 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800552e:	f7fd f869 	bl	8002604 <HAL_GetTick>
 8005532:	4602      	mov	r2, r0
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	1ad3      	subs	r3, r2, r3
 8005538:	2b02      	cmp	r3, #2
 800553a:	d902      	bls.n	8005542 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 800553c:	2303      	movs	r3, #3
 800553e:	73fb      	strb	r3, [r7, #15]
      break;
 8005540:	e004      	b.n	800554c <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005542:	f7ff fdaa 	bl	800509a <LL_RCC_PLLSAI1_IsReady>
 8005546:	4603      	mov	r3, r0
 8005548:	2b00      	cmp	r3, #0
 800554a:	d1f0      	bne.n	800552e <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 800554c:	7bfb      	ldrb	r3, [r7, #15]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d137      	bne.n	80055c2 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005552:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005556:	691b      	ldr	r3, [r3, #16]
 8005558:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	021b      	lsls	r3, r3, #8
 8005562:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005566:	4313      	orrs	r3, r2
 8005568:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800556a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800556e:	691b      	ldr	r3, [r3, #16]
 8005570:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	68db      	ldr	r3, [r3, #12]
 8005578:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800557c:	4313      	orrs	r3, r2
 800557e:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005580:	f7ff fd6d 	bl	800505e <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005584:	f7fd f83e 	bl	8002604 <HAL_GetTick>
 8005588:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800558a:	e009      	b.n	80055a0 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800558c:	f7fd f83a 	bl	8002604 <HAL_GetTick>
 8005590:	4602      	mov	r2, r0
 8005592:	68bb      	ldr	r3, [r7, #8]
 8005594:	1ad3      	subs	r3, r2, r3
 8005596:	2b02      	cmp	r3, #2
 8005598:	d902      	bls.n	80055a0 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800559a:	2303      	movs	r3, #3
 800559c:	73fb      	strb	r3, [r7, #15]
        break;
 800559e:	e004      	b.n	80055aa <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80055a0:	f7ff fd7b 	bl	800509a <LL_RCC_PLLSAI1_IsReady>
 80055a4:	4603      	mov	r3, r0
 80055a6:	2b01      	cmp	r3, #1
 80055a8:	d1f0      	bne.n	800558c <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 80055aa:	7bfb      	ldrb	r3, [r7, #15]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d108      	bne.n	80055c2 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80055b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055b4:	691a      	ldr	r2, [r3, #16]
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	691b      	ldr	r3, [r3, #16]
 80055ba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80055be:	4313      	orrs	r3, r2
 80055c0:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80055c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80055c4:	4618      	mov	r0, r3
 80055c6:	3710      	adds	r7, #16
 80055c8:	46bd      	mov	sp, r7
 80055ca:	bd80      	pop	{r7, pc}

080055cc <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b084      	sub	sp, #16
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d101      	bne.n	80055de <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 80055da:	2301      	movs	r3, #1
 80055dc:	e09f      	b.n	800571e <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80055e4:	b2db      	uxtb	r3, r3
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d106      	bne.n	80055f8 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2200      	movs	r2, #0
 80055ee:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80055f2:	6878      	ldr	r0, [r7, #4]
 80055f4:	f7fc fda2 	bl	800213c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2202      	movs	r2, #2
 80055fc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8005600:	4b49      	ldr	r3, [pc, #292]	; (8005728 <HAL_RTC_Init+0x15c>)
 8005602:	68db      	ldr	r3, [r3, #12]
 8005604:	f003 0310 	and.w	r3, r3, #16
 8005608:	2b10      	cmp	r3, #16
 800560a:	d07e      	beq.n	800570a <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	22ca      	movs	r2, #202	; 0xca
 8005612:	625a      	str	r2, [r3, #36]	; 0x24
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	2253      	movs	r2, #83	; 0x53
 800561a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800561c:	6878      	ldr	r0, [r7, #4]
 800561e:	f000 f8ab 	bl	8005778 <RTC_EnterInitMode>
 8005622:	4603      	mov	r3, r0
 8005624:	2b00      	cmp	r3, #0
 8005626:	d00a      	beq.n	800563e <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	22ff      	movs	r2, #255	; 0xff
 800562e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2204      	movs	r2, #4
 8005634:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      status = HAL_ERROR;
 8005638:	2301      	movs	r3, #1
 800563a:	73fb      	strb	r3, [r7, #15]
 800563c:	e067      	b.n	800570e <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	689b      	ldr	r3, [r3, #8]
 8005644:	687a      	ldr	r2, [r7, #4]
 8005646:	6812      	ldr	r2, [r2, #0]
 8005648:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800564c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005650:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	6899      	ldr	r1, [r3, #8]
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	685a      	ldr	r2, [r3, #4]
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	691b      	ldr	r3, [r3, #16]
 8005660:	431a      	orrs	r2, r3
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	699b      	ldr	r3, [r3, #24]
 8005666:	431a      	orrs	r2, r3
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	430a      	orrs	r2, r1
 800566e:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	687a      	ldr	r2, [r7, #4]
 8005676:	68d2      	ldr	r2, [r2, #12]
 8005678:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	6919      	ldr	r1, [r3, #16]
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	689b      	ldr	r3, [r3, #8]
 8005684:	041a      	lsls	r2, r3, #16
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	430a      	orrs	r2, r1
 800568c:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	68da      	ldr	r2, [r3, #12]
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800569c:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f022 0203 	bic.w	r2, r2, #3
 80056ac:	64da      	str	r2, [r3, #76]	; 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	69da      	ldr	r2, [r3, #28]
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	695b      	ldr	r3, [r3, #20]
 80056bc:	431a      	orrs	r2, r3
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	430a      	orrs	r2, r1
 80056c4:	64da      	str	r2, [r3, #76]	; 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	689b      	ldr	r3, [r3, #8]
 80056cc:	f003 0320 	and.w	r3, r3, #32
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d113      	bne.n	80056fc <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80056d4:	6878      	ldr	r0, [r7, #4]
 80056d6:	f000 f829 	bl	800572c <HAL_RTC_WaitForSynchro>
 80056da:	4603      	mov	r3, r0
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d00d      	beq.n	80056fc <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	22ff      	movs	r2, #255	; 0xff
 80056e6:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2204      	movs	r2, #4
 80056ec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2200      	movs	r2, #0
 80056f4:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 80056f8:	2301      	movs	r3, #1
 80056fa:	e010      	b.n	800571e <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	22ff      	movs	r2, #255	; 0xff
 8005702:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      status = HAL_OK;
 8005704:	2300      	movs	r3, #0
 8005706:	73fb      	strb	r3, [r7, #15]
 8005708:	e001      	b.n	800570e <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 800570a:	2300      	movs	r3, #0
 800570c:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800570e:	7bfb      	ldrb	r3, [r7, #15]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d103      	bne.n	800571c <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2201      	movs	r2, #1
 8005718:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  return status;
 800571c:	7bfb      	ldrb	r3, [r7, #15]
}
 800571e:	4618      	mov	r0, r3
 8005720:	3710      	adds	r7, #16
 8005722:	46bd      	mov	sp, r7
 8005724:	bd80      	pop	{r7, pc}
 8005726:	bf00      	nop
 8005728:	40002800 	.word	0x40002800

0800572c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b084      	sub	sp, #16
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	68da      	ldr	r2, [r3, #12]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005742:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8005744:	f7fc ff5e 	bl	8002604 <HAL_GetTick>
 8005748:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800574a:	e009      	b.n	8005760 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800574c:	f7fc ff5a 	bl	8002604 <HAL_GetTick>
 8005750:	4602      	mov	r2, r0
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	1ad3      	subs	r3, r2, r3
 8005756:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800575a:	d901      	bls.n	8005760 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800575c:	2303      	movs	r3, #3
 800575e:	e007      	b.n	8005770 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	68db      	ldr	r3, [r3, #12]
 8005766:	f003 0320 	and.w	r3, r3, #32
 800576a:	2b00      	cmp	r3, #0
 800576c:	d0ee      	beq.n	800574c <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800576e:	2300      	movs	r3, #0
}
 8005770:	4618      	mov	r0, r3
 8005772:	3710      	adds	r7, #16
 8005774:	46bd      	mov	sp, r7
 8005776:	bd80      	pop	{r7, pc}

08005778 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b084      	sub	sp, #16
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	68db      	ldr	r3, [r3, #12]
 8005786:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800578a:	2b00      	cmp	r3, #0
 800578c:	d119      	bne.n	80057c2 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005796:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005798:	f7fc ff34 	bl	8002604 <HAL_GetTick>
 800579c:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800579e:	e009      	b.n	80057b4 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80057a0:	f7fc ff30 	bl	8002604 <HAL_GetTick>
 80057a4:	4602      	mov	r2, r0
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	1ad3      	subs	r3, r2, r3
 80057aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80057ae:	d901      	bls.n	80057b4 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 80057b0:	2303      	movs	r3, #3
 80057b2:	e007      	b.n	80057c4 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	68db      	ldr	r3, [r3, #12]
 80057ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d0ee      	beq.n	80057a0 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 80057c2:	2300      	movs	r3, #0
}
 80057c4:	4618      	mov	r0, r3
 80057c6:	3710      	adds	r7, #16
 80057c8:	46bd      	mov	sp, r7
 80057ca:	bd80      	pop	{r7, pc}

080057cc <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b086      	sub	sp, #24
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	60f8      	str	r0, [r7, #12]
 80057d4:	60b9      	str	r1, [r7, #8]
 80057d6:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80057de:	2b01      	cmp	r3, #1
 80057e0:	d101      	bne.n	80057e6 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 80057e2:	2302      	movs	r3, #2
 80057e4:	e0a8      	b.n	8005938 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	2201      	movs	r2, #1
 80057ea:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	2202      	movs	r2, #2
 80057f2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	22ca      	movs	r2, #202	; 0xca
 80057fc:	625a      	str	r2, [r3, #36]	; 0x24
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	2253      	movs	r2, #83	; 0x53
 8005804:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	689b      	ldr	r3, [r3, #8]
 800580c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005810:	2b00      	cmp	r3, #0
 8005812:	d020      	beq.n	8005856 <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 8005814:	f7fc fef6 	bl	8002604 <HAL_GetTick>
 8005818:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 800581a:	e015      	b.n	8005848 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800581c:	f7fc fef2 	bl	8002604 <HAL_GetTick>
 8005820:	4602      	mov	r2, r0
 8005822:	697b      	ldr	r3, [r7, #20]
 8005824:	1ad3      	subs	r3, r2, r3
 8005826:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800582a:	d90d      	bls.n	8005848 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	22ff      	movs	r2, #255	; 0xff
 8005832:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	2203      	movs	r2, #3
 8005838:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	2200      	movs	r2, #0
 8005840:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8005844:	2303      	movs	r3, #3
 8005846:	e077      	b.n	8005938 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	68db      	ldr	r3, [r3, #12]
 800584e:	f003 0304 	and.w	r3, r3, #4
 8005852:	2b00      	cmp	r3, #0
 8005854:	d1e2      	bne.n	800581c <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	689a      	ldr	r2, [r3, #8]
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005864:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	68db      	ldr	r3, [r3, #12]
 800586c:	b2da      	uxtb	r2, r3
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8005876:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8005878:	f7fc fec4 	bl	8002604 <HAL_GetTick>
 800587c:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800587e:	e015      	b.n	80058ac <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005880:	f7fc fec0 	bl	8002604 <HAL_GetTick>
 8005884:	4602      	mov	r2, r0
 8005886:	697b      	ldr	r3, [r7, #20]
 8005888:	1ad3      	subs	r3, r2, r3
 800588a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800588e:	d90d      	bls.n	80058ac <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	22ff      	movs	r2, #255	; 0xff
 8005896:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	2203      	movs	r2, #3
 800589c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	2200      	movs	r2, #0
 80058a4:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 80058a8:	2303      	movs	r3, #3
 80058aa:	e045      	b.n	8005938 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	68db      	ldr	r3, [r3, #12]
 80058b2:	f003 0304 	and.w	r3, r3, #4
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d0e2      	beq.n	8005880 <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	68ba      	ldr	r2, [r7, #8]
 80058c0:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	689a      	ldr	r2, [r3, #8]
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f022 0207 	bic.w	r2, r2, #7
 80058d0:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	6899      	ldr	r1, [r3, #8]
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	687a      	ldr	r2, [r7, #4]
 80058de:	430a      	orrs	r2, r1
 80058e0:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 80058e2:	4b17      	ldr	r3, [pc, #92]	; (8005940 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80058e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80058e8:	4a15      	ldr	r2, [pc, #84]	; (8005940 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80058ea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80058ee:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 80058f2:	4b13      	ldr	r3, [pc, #76]	; (8005940 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	4a12      	ldr	r2, [pc, #72]	; (8005940 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80058f8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80058fc:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	689a      	ldr	r2, [r3, #8]
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800590c:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	689a      	ldr	r2, [r3, #8]
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800591c:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	22ff      	movs	r2, #255	; 0xff
 8005924:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	2201      	movs	r2, #1
 800592a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	2200      	movs	r2, #0
 8005932:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8005936:	2300      	movs	r3, #0
}
 8005938:	4618      	mov	r0, r3
 800593a:	3718      	adds	r7, #24
 800593c:	46bd      	mov	sp, r7
 800593e:	bd80      	pop	{r7, pc}
 8005940:	58000800 	.word	0x58000800

08005944 <LL_RCC_GetUSARTClockSource>:
{
 8005944:	b480      	push	{r7}
 8005946:	b083      	sub	sp, #12
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 800594c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005950:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	4013      	ands	r3, r2
}
 8005958:	4618      	mov	r0, r3
 800595a:	370c      	adds	r7, #12
 800595c:	46bd      	mov	sp, r7
 800595e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005962:	4770      	bx	lr

08005964 <LL_RCC_GetLPUARTClockSource>:
{
 8005964:	b480      	push	{r7}
 8005966:	b083      	sub	sp, #12
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800596c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005970:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	4013      	ands	r3, r2
}
 8005978:	4618      	mov	r0, r3
 800597a:	370c      	adds	r7, #12
 800597c:	46bd      	mov	sp, r7
 800597e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005982:	4770      	bx	lr

08005984 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b082      	sub	sp, #8
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d101      	bne.n	8005996 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005992:	2301      	movs	r3, #1
 8005994:	e042      	b.n	8005a1c <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800599c:	2b00      	cmp	r3, #0
 800599e:	d106      	bne.n	80059ae <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2200      	movs	r2, #0
 80059a4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80059a8:	6878      	ldr	r0, [r7, #4]
 80059aa:	f7fc fbfb 	bl	80021a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2224      	movs	r2, #36	; 0x24
 80059b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	681a      	ldr	r2, [r3, #0]
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f022 0201 	bic.w	r2, r2, #1
 80059c4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80059c6:	6878      	ldr	r0, [r7, #4]
 80059c8:	f000 f8ba 	bl	8005b40 <UART_SetConfig>
 80059cc:	4603      	mov	r3, r0
 80059ce:	2b01      	cmp	r3, #1
 80059d0:	d101      	bne.n	80059d6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80059d2:	2301      	movs	r3, #1
 80059d4:	e022      	b.n	8005a1c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d002      	beq.n	80059e4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80059de:	6878      	ldr	r0, [r7, #4]
 80059e0:	f000 fad6 	bl	8005f90 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	685a      	ldr	r2, [r3, #4]
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80059f2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	689a      	ldr	r2, [r3, #8]
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005a02:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	681a      	ldr	r2, [r3, #0]
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f042 0201 	orr.w	r2, r2, #1
 8005a12:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005a14:	6878      	ldr	r0, [r7, #4]
 8005a16:	f000 fb5d 	bl	80060d4 <UART_CheckIdleState>
 8005a1a:	4603      	mov	r3, r0
}
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	3708      	adds	r7, #8
 8005a20:	46bd      	mov	sp, r7
 8005a22:	bd80      	pop	{r7, pc}

08005a24 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b08a      	sub	sp, #40	; 0x28
 8005a28:	af02      	add	r7, sp, #8
 8005a2a:	60f8      	str	r0, [r7, #12]
 8005a2c:	60b9      	str	r1, [r7, #8]
 8005a2e:	603b      	str	r3, [r7, #0]
 8005a30:	4613      	mov	r3, r2
 8005a32:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a3a:	2b20      	cmp	r3, #32
 8005a3c:	d17b      	bne.n	8005b36 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d002      	beq.n	8005a4a <HAL_UART_Transmit+0x26>
 8005a44:	88fb      	ldrh	r3, [r7, #6]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d101      	bne.n	8005a4e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	e074      	b.n	8005b38 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	2200      	movs	r2, #0
 8005a52:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	2221      	movs	r2, #33	; 0x21
 8005a5a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005a5e:	f7fc fdd1 	bl	8002604 <HAL_GetTick>
 8005a62:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	88fa      	ldrh	r2, [r7, #6]
 8005a68:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	88fa      	ldrh	r2, [r7, #6]
 8005a70:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	689b      	ldr	r3, [r3, #8]
 8005a78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a7c:	d108      	bne.n	8005a90 <HAL_UART_Transmit+0x6c>
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	691b      	ldr	r3, [r3, #16]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d104      	bne.n	8005a90 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005a86:	2300      	movs	r3, #0
 8005a88:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005a8a:	68bb      	ldr	r3, [r7, #8]
 8005a8c:	61bb      	str	r3, [r7, #24]
 8005a8e:	e003      	b.n	8005a98 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005a94:	2300      	movs	r3, #0
 8005a96:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005a98:	e030      	b.n	8005afc <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	9300      	str	r3, [sp, #0]
 8005a9e:	697b      	ldr	r3, [r7, #20]
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	2180      	movs	r1, #128	; 0x80
 8005aa4:	68f8      	ldr	r0, [r7, #12]
 8005aa6:	f000 fbbf 	bl	8006228 <UART_WaitOnFlagUntilTimeout>
 8005aaa:	4603      	mov	r3, r0
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d005      	beq.n	8005abc <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	2220      	movs	r2, #32
 8005ab4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8005ab8:	2303      	movs	r3, #3
 8005aba:	e03d      	b.n	8005b38 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005abc:	69fb      	ldr	r3, [r7, #28]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d10b      	bne.n	8005ada <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005ac2:	69bb      	ldr	r3, [r7, #24]
 8005ac4:	881b      	ldrh	r3, [r3, #0]
 8005ac6:	461a      	mov	r2, r3
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005ad0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005ad2:	69bb      	ldr	r3, [r7, #24]
 8005ad4:	3302      	adds	r3, #2
 8005ad6:	61bb      	str	r3, [r7, #24]
 8005ad8:	e007      	b.n	8005aea <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005ada:	69fb      	ldr	r3, [r7, #28]
 8005adc:	781a      	ldrb	r2, [r3, #0]
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005ae4:	69fb      	ldr	r3, [r7, #28]
 8005ae6:	3301      	adds	r3, #1
 8005ae8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005af0:	b29b      	uxth	r3, r3
 8005af2:	3b01      	subs	r3, #1
 8005af4:	b29a      	uxth	r2, r3
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005b02:	b29b      	uxth	r3, r3
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d1c8      	bne.n	8005a9a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	9300      	str	r3, [sp, #0]
 8005b0c:	697b      	ldr	r3, [r7, #20]
 8005b0e:	2200      	movs	r2, #0
 8005b10:	2140      	movs	r1, #64	; 0x40
 8005b12:	68f8      	ldr	r0, [r7, #12]
 8005b14:	f000 fb88 	bl	8006228 <UART_WaitOnFlagUntilTimeout>
 8005b18:	4603      	mov	r3, r0
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d005      	beq.n	8005b2a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	2220      	movs	r2, #32
 8005b22:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8005b26:	2303      	movs	r3, #3
 8005b28:	e006      	b.n	8005b38 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	2220      	movs	r2, #32
 8005b2e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8005b32:	2300      	movs	r3, #0
 8005b34:	e000      	b.n	8005b38 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8005b36:	2302      	movs	r3, #2
  }
}
 8005b38:	4618      	mov	r0, r3
 8005b3a:	3720      	adds	r7, #32
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	bd80      	pop	{r7, pc}

08005b40 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005b44:	b08c      	sub	sp, #48	; 0x30
 8005b46:	af00      	add	r7, sp, #0
 8005b48:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005b50:	697b      	ldr	r3, [r7, #20]
 8005b52:	689a      	ldr	r2, [r3, #8]
 8005b54:	697b      	ldr	r3, [r7, #20]
 8005b56:	691b      	ldr	r3, [r3, #16]
 8005b58:	431a      	orrs	r2, r3
 8005b5a:	697b      	ldr	r3, [r7, #20]
 8005b5c:	695b      	ldr	r3, [r3, #20]
 8005b5e:	431a      	orrs	r2, r3
 8005b60:	697b      	ldr	r3, [r7, #20]
 8005b62:	69db      	ldr	r3, [r3, #28]
 8005b64:	4313      	orrs	r3, r2
 8005b66:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005b68:	697b      	ldr	r3, [r7, #20]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	681a      	ldr	r2, [r3, #0]
 8005b6e:	4baf      	ldr	r3, [pc, #700]	; (8005e2c <UART_SetConfig+0x2ec>)
 8005b70:	4013      	ands	r3, r2
 8005b72:	697a      	ldr	r2, [r7, #20]
 8005b74:	6812      	ldr	r2, [r2, #0]
 8005b76:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005b78:	430b      	orrs	r3, r1
 8005b7a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b7c:	697b      	ldr	r3, [r7, #20]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	685b      	ldr	r3, [r3, #4]
 8005b82:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005b86:	697b      	ldr	r3, [r7, #20]
 8005b88:	68da      	ldr	r2, [r3, #12]
 8005b8a:	697b      	ldr	r3, [r7, #20]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	430a      	orrs	r2, r1
 8005b90:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005b92:	697b      	ldr	r3, [r7, #20]
 8005b94:	699b      	ldr	r3, [r3, #24]
 8005b96:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005b98:	697b      	ldr	r3, [r7, #20]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	4aa4      	ldr	r2, [pc, #656]	; (8005e30 <UART_SetConfig+0x2f0>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d004      	beq.n	8005bac <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005ba2:	697b      	ldr	r3, [r7, #20]
 8005ba4:	6a1b      	ldr	r3, [r3, #32]
 8005ba6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ba8:	4313      	orrs	r3, r2
 8005baa:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005bac:	697b      	ldr	r3, [r7, #20]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	689b      	ldr	r3, [r3, #8]
 8005bb2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005bb6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005bba:	697a      	ldr	r2, [r7, #20]
 8005bbc:	6812      	ldr	r2, [r2, #0]
 8005bbe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005bc0:	430b      	orrs	r3, r1
 8005bc2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005bc4:	697b      	ldr	r3, [r7, #20]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bca:	f023 010f 	bic.w	r1, r3, #15
 8005bce:	697b      	ldr	r3, [r7, #20]
 8005bd0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005bd2:	697b      	ldr	r3, [r7, #20]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	430a      	orrs	r2, r1
 8005bd8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005bda:	697b      	ldr	r3, [r7, #20]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	4a95      	ldr	r2, [pc, #596]	; (8005e34 <UART_SetConfig+0x2f4>)
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d125      	bne.n	8005c30 <UART_SetConfig+0xf0>
 8005be4:	2003      	movs	r0, #3
 8005be6:	f7ff fead 	bl	8005944 <LL_RCC_GetUSARTClockSource>
 8005bea:	4603      	mov	r3, r0
 8005bec:	2b03      	cmp	r3, #3
 8005bee:	d81b      	bhi.n	8005c28 <UART_SetConfig+0xe8>
 8005bf0:	a201      	add	r2, pc, #4	; (adr r2, 8005bf8 <UART_SetConfig+0xb8>)
 8005bf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bf6:	bf00      	nop
 8005bf8:	08005c09 	.word	0x08005c09
 8005bfc:	08005c19 	.word	0x08005c19
 8005c00:	08005c11 	.word	0x08005c11
 8005c04:	08005c21 	.word	0x08005c21
 8005c08:	2301      	movs	r3, #1
 8005c0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c0e:	e042      	b.n	8005c96 <UART_SetConfig+0x156>
 8005c10:	2302      	movs	r3, #2
 8005c12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c16:	e03e      	b.n	8005c96 <UART_SetConfig+0x156>
 8005c18:	2304      	movs	r3, #4
 8005c1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c1e:	e03a      	b.n	8005c96 <UART_SetConfig+0x156>
 8005c20:	2308      	movs	r3, #8
 8005c22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c26:	e036      	b.n	8005c96 <UART_SetConfig+0x156>
 8005c28:	2310      	movs	r3, #16
 8005c2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c2e:	e032      	b.n	8005c96 <UART_SetConfig+0x156>
 8005c30:	697b      	ldr	r3, [r7, #20]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	4a7e      	ldr	r2, [pc, #504]	; (8005e30 <UART_SetConfig+0x2f0>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d12a      	bne.n	8005c90 <UART_SetConfig+0x150>
 8005c3a:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8005c3e:	f7ff fe91 	bl	8005964 <LL_RCC_GetLPUARTClockSource>
 8005c42:	4603      	mov	r3, r0
 8005c44:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005c48:	d01a      	beq.n	8005c80 <UART_SetConfig+0x140>
 8005c4a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005c4e:	d81b      	bhi.n	8005c88 <UART_SetConfig+0x148>
 8005c50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c54:	d00c      	beq.n	8005c70 <UART_SetConfig+0x130>
 8005c56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c5a:	d815      	bhi.n	8005c88 <UART_SetConfig+0x148>
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d003      	beq.n	8005c68 <UART_SetConfig+0x128>
 8005c60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c64:	d008      	beq.n	8005c78 <UART_SetConfig+0x138>
 8005c66:	e00f      	b.n	8005c88 <UART_SetConfig+0x148>
 8005c68:	2300      	movs	r3, #0
 8005c6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c6e:	e012      	b.n	8005c96 <UART_SetConfig+0x156>
 8005c70:	2302      	movs	r3, #2
 8005c72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c76:	e00e      	b.n	8005c96 <UART_SetConfig+0x156>
 8005c78:	2304      	movs	r3, #4
 8005c7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c7e:	e00a      	b.n	8005c96 <UART_SetConfig+0x156>
 8005c80:	2308      	movs	r3, #8
 8005c82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c86:	e006      	b.n	8005c96 <UART_SetConfig+0x156>
 8005c88:	2310      	movs	r3, #16
 8005c8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c8e:	e002      	b.n	8005c96 <UART_SetConfig+0x156>
 8005c90:	2310      	movs	r3, #16
 8005c92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005c96:	697b      	ldr	r3, [r7, #20]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	4a65      	ldr	r2, [pc, #404]	; (8005e30 <UART_SetConfig+0x2f0>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	f040 8097 	bne.w	8005dd0 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005ca2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005ca6:	2b08      	cmp	r3, #8
 8005ca8:	d823      	bhi.n	8005cf2 <UART_SetConfig+0x1b2>
 8005caa:	a201      	add	r2, pc, #4	; (adr r2, 8005cb0 <UART_SetConfig+0x170>)
 8005cac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cb0:	08005cd5 	.word	0x08005cd5
 8005cb4:	08005cf3 	.word	0x08005cf3
 8005cb8:	08005cdd 	.word	0x08005cdd
 8005cbc:	08005cf3 	.word	0x08005cf3
 8005cc0:	08005ce3 	.word	0x08005ce3
 8005cc4:	08005cf3 	.word	0x08005cf3
 8005cc8:	08005cf3 	.word	0x08005cf3
 8005ccc:	08005cf3 	.word	0x08005cf3
 8005cd0:	08005ceb 	.word	0x08005ceb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005cd4:	f7fe ff76 	bl	8004bc4 <HAL_RCC_GetPCLK1Freq>
 8005cd8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005cda:	e010      	b.n	8005cfe <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005cdc:	4b56      	ldr	r3, [pc, #344]	; (8005e38 <UART_SetConfig+0x2f8>)
 8005cde:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005ce0:	e00d      	b.n	8005cfe <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005ce2:	f7fe feef 	bl	8004ac4 <HAL_RCC_GetSysClockFreq>
 8005ce6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005ce8:	e009      	b.n	8005cfe <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005cea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005cee:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005cf0:	e005      	b.n	8005cfe <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005cf6:	2301      	movs	r3, #1
 8005cf8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005cfc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	f000 812b 	beq.w	8005f5c <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005d06:	697b      	ldr	r3, [r7, #20]
 8005d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d0a:	4a4c      	ldr	r2, [pc, #304]	; (8005e3c <UART_SetConfig+0x2fc>)
 8005d0c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005d10:	461a      	mov	r2, r3
 8005d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d14:	fbb3 f3f2 	udiv	r3, r3, r2
 8005d18:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005d1a:	697b      	ldr	r3, [r7, #20]
 8005d1c:	685a      	ldr	r2, [r3, #4]
 8005d1e:	4613      	mov	r3, r2
 8005d20:	005b      	lsls	r3, r3, #1
 8005d22:	4413      	add	r3, r2
 8005d24:	69ba      	ldr	r2, [r7, #24]
 8005d26:	429a      	cmp	r2, r3
 8005d28:	d305      	bcc.n	8005d36 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005d2a:	697b      	ldr	r3, [r7, #20]
 8005d2c:	685b      	ldr	r3, [r3, #4]
 8005d2e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005d30:	69ba      	ldr	r2, [r7, #24]
 8005d32:	429a      	cmp	r2, r3
 8005d34:	d903      	bls.n	8005d3e <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8005d36:	2301      	movs	r3, #1
 8005d38:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005d3c:	e10e      	b.n	8005f5c <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d40:	2200      	movs	r2, #0
 8005d42:	60bb      	str	r3, [r7, #8]
 8005d44:	60fa      	str	r2, [r7, #12]
 8005d46:	697b      	ldr	r3, [r7, #20]
 8005d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d4a:	4a3c      	ldr	r2, [pc, #240]	; (8005e3c <UART_SetConfig+0x2fc>)
 8005d4c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005d50:	b29b      	uxth	r3, r3
 8005d52:	2200      	movs	r2, #0
 8005d54:	603b      	str	r3, [r7, #0]
 8005d56:	607a      	str	r2, [r7, #4]
 8005d58:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005d5c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005d60:	f7fa fa66 	bl	8000230 <__aeabi_uldivmod>
 8005d64:	4602      	mov	r2, r0
 8005d66:	460b      	mov	r3, r1
 8005d68:	4610      	mov	r0, r2
 8005d6a:	4619      	mov	r1, r3
 8005d6c:	f04f 0200 	mov.w	r2, #0
 8005d70:	f04f 0300 	mov.w	r3, #0
 8005d74:	020b      	lsls	r3, r1, #8
 8005d76:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005d7a:	0202      	lsls	r2, r0, #8
 8005d7c:	6979      	ldr	r1, [r7, #20]
 8005d7e:	6849      	ldr	r1, [r1, #4]
 8005d80:	0849      	lsrs	r1, r1, #1
 8005d82:	2000      	movs	r0, #0
 8005d84:	460c      	mov	r4, r1
 8005d86:	4605      	mov	r5, r0
 8005d88:	eb12 0804 	adds.w	r8, r2, r4
 8005d8c:	eb43 0905 	adc.w	r9, r3, r5
 8005d90:	697b      	ldr	r3, [r7, #20]
 8005d92:	685b      	ldr	r3, [r3, #4]
 8005d94:	2200      	movs	r2, #0
 8005d96:	469a      	mov	sl, r3
 8005d98:	4693      	mov	fp, r2
 8005d9a:	4652      	mov	r2, sl
 8005d9c:	465b      	mov	r3, fp
 8005d9e:	4640      	mov	r0, r8
 8005da0:	4649      	mov	r1, r9
 8005da2:	f7fa fa45 	bl	8000230 <__aeabi_uldivmod>
 8005da6:	4602      	mov	r2, r0
 8005da8:	460b      	mov	r3, r1
 8005daa:	4613      	mov	r3, r2
 8005dac:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005dae:	6a3b      	ldr	r3, [r7, #32]
 8005db0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005db4:	d308      	bcc.n	8005dc8 <UART_SetConfig+0x288>
 8005db6:	6a3b      	ldr	r3, [r7, #32]
 8005db8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005dbc:	d204      	bcs.n	8005dc8 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8005dbe:	697b      	ldr	r3, [r7, #20]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	6a3a      	ldr	r2, [r7, #32]
 8005dc4:	60da      	str	r2, [r3, #12]
 8005dc6:	e0c9      	b.n	8005f5c <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8005dc8:	2301      	movs	r3, #1
 8005dca:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005dce:	e0c5      	b.n	8005f5c <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005dd0:	697b      	ldr	r3, [r7, #20]
 8005dd2:	69db      	ldr	r3, [r3, #28]
 8005dd4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005dd8:	d16d      	bne.n	8005eb6 <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8005dda:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005dde:	3b01      	subs	r3, #1
 8005de0:	2b07      	cmp	r3, #7
 8005de2:	d82d      	bhi.n	8005e40 <UART_SetConfig+0x300>
 8005de4:	a201      	add	r2, pc, #4	; (adr r2, 8005dec <UART_SetConfig+0x2ac>)
 8005de6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dea:	bf00      	nop
 8005dec:	08005e0d 	.word	0x08005e0d
 8005df0:	08005e15 	.word	0x08005e15
 8005df4:	08005e41 	.word	0x08005e41
 8005df8:	08005e1b 	.word	0x08005e1b
 8005dfc:	08005e41 	.word	0x08005e41
 8005e00:	08005e41 	.word	0x08005e41
 8005e04:	08005e41 	.word	0x08005e41
 8005e08:	08005e23 	.word	0x08005e23
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005e0c:	f7fe fef0 	bl	8004bf0 <HAL_RCC_GetPCLK2Freq>
 8005e10:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005e12:	e01b      	b.n	8005e4c <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e14:	4b08      	ldr	r3, [pc, #32]	; (8005e38 <UART_SetConfig+0x2f8>)
 8005e16:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005e18:	e018      	b.n	8005e4c <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e1a:	f7fe fe53 	bl	8004ac4 <HAL_RCC_GetSysClockFreq>
 8005e1e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005e20:	e014      	b.n	8005e4c <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e26:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005e28:	e010      	b.n	8005e4c <UART_SetConfig+0x30c>
 8005e2a:	bf00      	nop
 8005e2c:	cfff69f3 	.word	0xcfff69f3
 8005e30:	40008000 	.word	0x40008000
 8005e34:	40013800 	.word	0x40013800
 8005e38:	00f42400 	.word	0x00f42400
 8005e3c:	0800abc0 	.word	0x0800abc0
      default:
        pclk = 0U;
 8005e40:	2300      	movs	r3, #0
 8005e42:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005e44:	2301      	movs	r3, #1
 8005e46:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005e4a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	f000 8084 	beq.w	8005f5c <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005e54:	697b      	ldr	r3, [r7, #20]
 8005e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e58:	4a4b      	ldr	r2, [pc, #300]	; (8005f88 <UART_SetConfig+0x448>)
 8005e5a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005e5e:	461a      	mov	r2, r3
 8005e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e62:	fbb3 f3f2 	udiv	r3, r3, r2
 8005e66:	005a      	lsls	r2, r3, #1
 8005e68:	697b      	ldr	r3, [r7, #20]
 8005e6a:	685b      	ldr	r3, [r3, #4]
 8005e6c:	085b      	lsrs	r3, r3, #1
 8005e6e:	441a      	add	r2, r3
 8005e70:	697b      	ldr	r3, [r7, #20]
 8005e72:	685b      	ldr	r3, [r3, #4]
 8005e74:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e78:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e7a:	6a3b      	ldr	r3, [r7, #32]
 8005e7c:	2b0f      	cmp	r3, #15
 8005e7e:	d916      	bls.n	8005eae <UART_SetConfig+0x36e>
 8005e80:	6a3b      	ldr	r3, [r7, #32]
 8005e82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e86:	d212      	bcs.n	8005eae <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005e88:	6a3b      	ldr	r3, [r7, #32]
 8005e8a:	b29b      	uxth	r3, r3
 8005e8c:	f023 030f 	bic.w	r3, r3, #15
 8005e90:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005e92:	6a3b      	ldr	r3, [r7, #32]
 8005e94:	085b      	lsrs	r3, r3, #1
 8005e96:	b29b      	uxth	r3, r3
 8005e98:	f003 0307 	and.w	r3, r3, #7
 8005e9c:	b29a      	uxth	r2, r3
 8005e9e:	8bfb      	ldrh	r3, [r7, #30]
 8005ea0:	4313      	orrs	r3, r2
 8005ea2:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005ea4:	697b      	ldr	r3, [r7, #20]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	8bfa      	ldrh	r2, [r7, #30]
 8005eaa:	60da      	str	r2, [r3, #12]
 8005eac:	e056      	b.n	8005f5c <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8005eae:	2301      	movs	r3, #1
 8005eb0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005eb4:	e052      	b.n	8005f5c <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005eb6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005eba:	3b01      	subs	r3, #1
 8005ebc:	2b07      	cmp	r3, #7
 8005ebe:	d822      	bhi.n	8005f06 <UART_SetConfig+0x3c6>
 8005ec0:	a201      	add	r2, pc, #4	; (adr r2, 8005ec8 <UART_SetConfig+0x388>)
 8005ec2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ec6:	bf00      	nop
 8005ec8:	08005ee9 	.word	0x08005ee9
 8005ecc:	08005ef1 	.word	0x08005ef1
 8005ed0:	08005f07 	.word	0x08005f07
 8005ed4:	08005ef7 	.word	0x08005ef7
 8005ed8:	08005f07 	.word	0x08005f07
 8005edc:	08005f07 	.word	0x08005f07
 8005ee0:	08005f07 	.word	0x08005f07
 8005ee4:	08005eff 	.word	0x08005eff
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ee8:	f7fe fe82 	bl	8004bf0 <HAL_RCC_GetPCLK2Freq>
 8005eec:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005eee:	e010      	b.n	8005f12 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ef0:	4b26      	ldr	r3, [pc, #152]	; (8005f8c <UART_SetConfig+0x44c>)
 8005ef2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005ef4:	e00d      	b.n	8005f12 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005ef6:	f7fe fde5 	bl	8004ac4 <HAL_RCC_GetSysClockFreq>
 8005efa:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005efc:	e009      	b.n	8005f12 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005efe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f02:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005f04:	e005      	b.n	8005f12 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8005f06:	2300      	movs	r3, #0
 8005f08:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005f10:	bf00      	nop
    }

    if (pclk != 0U)
 8005f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d021      	beq.n	8005f5c <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005f18:	697b      	ldr	r3, [r7, #20]
 8005f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f1c:	4a1a      	ldr	r2, [pc, #104]	; (8005f88 <UART_SetConfig+0x448>)
 8005f1e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005f22:	461a      	mov	r2, r3
 8005f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f26:	fbb3 f2f2 	udiv	r2, r3, r2
 8005f2a:	697b      	ldr	r3, [r7, #20]
 8005f2c:	685b      	ldr	r3, [r3, #4]
 8005f2e:	085b      	lsrs	r3, r3, #1
 8005f30:	441a      	add	r2, r3
 8005f32:	697b      	ldr	r3, [r7, #20]
 8005f34:	685b      	ldr	r3, [r3, #4]
 8005f36:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f3a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f3c:	6a3b      	ldr	r3, [r7, #32]
 8005f3e:	2b0f      	cmp	r3, #15
 8005f40:	d909      	bls.n	8005f56 <UART_SetConfig+0x416>
 8005f42:	6a3b      	ldr	r3, [r7, #32]
 8005f44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f48:	d205      	bcs.n	8005f56 <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005f4a:	6a3b      	ldr	r3, [r7, #32]
 8005f4c:	b29a      	uxth	r2, r3
 8005f4e:	697b      	ldr	r3, [r7, #20]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	60da      	str	r2, [r3, #12]
 8005f54:	e002      	b.n	8005f5c <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8005f56:	2301      	movs	r3, #1
 8005f58:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005f5c:	697b      	ldr	r3, [r7, #20]
 8005f5e:	2201      	movs	r2, #1
 8005f60:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005f64:	697b      	ldr	r3, [r7, #20]
 8005f66:	2201      	movs	r2, #1
 8005f68:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005f6c:	697b      	ldr	r3, [r7, #20]
 8005f6e:	2200      	movs	r2, #0
 8005f70:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8005f72:	697b      	ldr	r3, [r7, #20]
 8005f74:	2200      	movs	r2, #0
 8005f76:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8005f78:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	3730      	adds	r7, #48	; 0x30
 8005f80:	46bd      	mov	sp, r7
 8005f82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005f86:	bf00      	nop
 8005f88:	0800abc0 	.word	0x0800abc0
 8005f8c:	00f42400 	.word	0x00f42400

08005f90 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005f90:	b480      	push	{r7}
 8005f92:	b083      	sub	sp, #12
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f9c:	f003 0301 	and.w	r3, r3, #1
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d00a      	beq.n	8005fba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	685b      	ldr	r3, [r3, #4]
 8005faa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	430a      	orrs	r2, r1
 8005fb8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fbe:	f003 0302 	and.w	r3, r3, #2
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d00a      	beq.n	8005fdc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	685b      	ldr	r3, [r3, #4]
 8005fcc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	430a      	orrs	r2, r1
 8005fda:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fe0:	f003 0304 	and.w	r3, r3, #4
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d00a      	beq.n	8005ffe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	685b      	ldr	r3, [r3, #4]
 8005fee:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	430a      	orrs	r2, r1
 8005ffc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006002:	f003 0308 	and.w	r3, r3, #8
 8006006:	2b00      	cmp	r3, #0
 8006008:	d00a      	beq.n	8006020 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	685b      	ldr	r3, [r3, #4]
 8006010:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	430a      	orrs	r2, r1
 800601e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006024:	f003 0310 	and.w	r3, r3, #16
 8006028:	2b00      	cmp	r3, #0
 800602a:	d00a      	beq.n	8006042 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	689b      	ldr	r3, [r3, #8]
 8006032:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	430a      	orrs	r2, r1
 8006040:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006046:	f003 0320 	and.w	r3, r3, #32
 800604a:	2b00      	cmp	r3, #0
 800604c:	d00a      	beq.n	8006064 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	689b      	ldr	r3, [r3, #8]
 8006054:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	430a      	orrs	r2, r1
 8006062:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006068:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800606c:	2b00      	cmp	r3, #0
 800606e:	d01a      	beq.n	80060a6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	685b      	ldr	r3, [r3, #4]
 8006076:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	430a      	orrs	r2, r1
 8006084:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800608a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800608e:	d10a      	bne.n	80060a6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	685b      	ldr	r3, [r3, #4]
 8006096:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	430a      	orrs	r2, r1
 80060a4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d00a      	beq.n	80060c8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	685b      	ldr	r3, [r3, #4]
 80060b8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	430a      	orrs	r2, r1
 80060c6:	605a      	str	r2, [r3, #4]
  }
}
 80060c8:	bf00      	nop
 80060ca:	370c      	adds	r7, #12
 80060cc:	46bd      	mov	sp, r7
 80060ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d2:	4770      	bx	lr

080060d4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b098      	sub	sp, #96	; 0x60
 80060d8:	af02      	add	r7, sp, #8
 80060da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2200      	movs	r2, #0
 80060e0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80060e4:	f7fc fa8e 	bl	8002604 <HAL_GetTick>
 80060e8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f003 0308 	and.w	r3, r3, #8
 80060f4:	2b08      	cmp	r3, #8
 80060f6:	d12f      	bne.n	8006158 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80060f8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80060fc:	9300      	str	r3, [sp, #0]
 80060fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006100:	2200      	movs	r2, #0
 8006102:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006106:	6878      	ldr	r0, [r7, #4]
 8006108:	f000 f88e 	bl	8006228 <UART_WaitOnFlagUntilTimeout>
 800610c:	4603      	mov	r3, r0
 800610e:	2b00      	cmp	r3, #0
 8006110:	d022      	beq.n	8006158 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800611a:	e853 3f00 	ldrex	r3, [r3]
 800611e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006120:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006122:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006126:	653b      	str	r3, [r7, #80]	; 0x50
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	461a      	mov	r2, r3
 800612e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006130:	647b      	str	r3, [r7, #68]	; 0x44
 8006132:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006134:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006136:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006138:	e841 2300 	strex	r3, r2, [r1]
 800613c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800613e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006140:	2b00      	cmp	r3, #0
 8006142:	d1e6      	bne.n	8006112 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2220      	movs	r2, #32
 8006148:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2200      	movs	r2, #0
 8006150:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006154:	2303      	movs	r3, #3
 8006156:	e063      	b.n	8006220 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f003 0304 	and.w	r3, r3, #4
 8006162:	2b04      	cmp	r3, #4
 8006164:	d149      	bne.n	80061fa <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006166:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800616a:	9300      	str	r3, [sp, #0]
 800616c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800616e:	2200      	movs	r2, #0
 8006170:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006174:	6878      	ldr	r0, [r7, #4]
 8006176:	f000 f857 	bl	8006228 <UART_WaitOnFlagUntilTimeout>
 800617a:	4603      	mov	r3, r0
 800617c:	2b00      	cmp	r3, #0
 800617e:	d03c      	beq.n	80061fa <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006188:	e853 3f00 	ldrex	r3, [r3]
 800618c:	623b      	str	r3, [r7, #32]
   return(result);
 800618e:	6a3b      	ldr	r3, [r7, #32]
 8006190:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006194:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	461a      	mov	r2, r3
 800619c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800619e:	633b      	str	r3, [r7, #48]	; 0x30
 80061a0:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80061a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061a6:	e841 2300 	strex	r3, r2, [r1]
 80061aa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80061ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d1e6      	bne.n	8006180 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	3308      	adds	r3, #8
 80061b8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061ba:	693b      	ldr	r3, [r7, #16]
 80061bc:	e853 3f00 	ldrex	r3, [r3]
 80061c0:	60fb      	str	r3, [r7, #12]
   return(result);
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	f023 0301 	bic.w	r3, r3, #1
 80061c8:	64bb      	str	r3, [r7, #72]	; 0x48
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	3308      	adds	r3, #8
 80061d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80061d2:	61fa      	str	r2, [r7, #28]
 80061d4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061d6:	69b9      	ldr	r1, [r7, #24]
 80061d8:	69fa      	ldr	r2, [r7, #28]
 80061da:	e841 2300 	strex	r3, r2, [r1]
 80061de:	617b      	str	r3, [r7, #20]
   return(result);
 80061e0:	697b      	ldr	r3, [r7, #20]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d1e5      	bne.n	80061b2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2220      	movs	r2, #32
 80061ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2200      	movs	r2, #0
 80061f2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80061f6:	2303      	movs	r3, #3
 80061f8:	e012      	b.n	8006220 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2220      	movs	r2, #32
 80061fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2220      	movs	r2, #32
 8006206:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2200      	movs	r2, #0
 800620e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2200      	movs	r2, #0
 8006214:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2200      	movs	r2, #0
 800621a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800621e:	2300      	movs	r3, #0
}
 8006220:	4618      	mov	r0, r3
 8006222:	3758      	adds	r7, #88	; 0x58
 8006224:	46bd      	mov	sp, r7
 8006226:	bd80      	pop	{r7, pc}

08006228 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b084      	sub	sp, #16
 800622c:	af00      	add	r7, sp, #0
 800622e:	60f8      	str	r0, [r7, #12]
 8006230:	60b9      	str	r1, [r7, #8]
 8006232:	603b      	str	r3, [r7, #0]
 8006234:	4613      	mov	r3, r2
 8006236:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006238:	e049      	b.n	80062ce <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800623a:	69bb      	ldr	r3, [r7, #24]
 800623c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006240:	d045      	beq.n	80062ce <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006242:	f7fc f9df 	bl	8002604 <HAL_GetTick>
 8006246:	4602      	mov	r2, r0
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	1ad3      	subs	r3, r2, r3
 800624c:	69ba      	ldr	r2, [r7, #24]
 800624e:	429a      	cmp	r2, r3
 8006250:	d302      	bcc.n	8006258 <UART_WaitOnFlagUntilTimeout+0x30>
 8006252:	69bb      	ldr	r3, [r7, #24]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d101      	bne.n	800625c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006258:	2303      	movs	r3, #3
 800625a:	e048      	b.n	80062ee <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f003 0304 	and.w	r3, r3, #4
 8006266:	2b00      	cmp	r3, #0
 8006268:	d031      	beq.n	80062ce <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	69db      	ldr	r3, [r3, #28]
 8006270:	f003 0308 	and.w	r3, r3, #8
 8006274:	2b08      	cmp	r3, #8
 8006276:	d110      	bne.n	800629a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	2208      	movs	r2, #8
 800627e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8006280:	68f8      	ldr	r0, [r7, #12]
 8006282:	f000 f838 	bl	80062f6 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	2208      	movs	r2, #8
 800628a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	2200      	movs	r2, #0
 8006292:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8006296:	2301      	movs	r3, #1
 8006298:	e029      	b.n	80062ee <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	69db      	ldr	r3, [r3, #28]
 80062a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80062a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80062a8:	d111      	bne.n	80062ce <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80062b2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80062b4:	68f8      	ldr	r0, [r7, #12]
 80062b6:	f000 f81e 	bl	80062f6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	2220      	movs	r2, #32
 80062be:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	2200      	movs	r2, #0
 80062c6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80062ca:	2303      	movs	r3, #3
 80062cc:	e00f      	b.n	80062ee <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	69da      	ldr	r2, [r3, #28]
 80062d4:	68bb      	ldr	r3, [r7, #8]
 80062d6:	4013      	ands	r3, r2
 80062d8:	68ba      	ldr	r2, [r7, #8]
 80062da:	429a      	cmp	r2, r3
 80062dc:	bf0c      	ite	eq
 80062de:	2301      	moveq	r3, #1
 80062e0:	2300      	movne	r3, #0
 80062e2:	b2db      	uxtb	r3, r3
 80062e4:	461a      	mov	r2, r3
 80062e6:	79fb      	ldrb	r3, [r7, #7]
 80062e8:	429a      	cmp	r2, r3
 80062ea:	d0a6      	beq.n	800623a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80062ec:	2300      	movs	r3, #0
}
 80062ee:	4618      	mov	r0, r3
 80062f0:	3710      	adds	r7, #16
 80062f2:	46bd      	mov	sp, r7
 80062f4:	bd80      	pop	{r7, pc}

080062f6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80062f6:	b480      	push	{r7}
 80062f8:	b095      	sub	sp, #84	; 0x54
 80062fa:	af00      	add	r7, sp, #0
 80062fc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006304:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006306:	e853 3f00 	ldrex	r3, [r3]
 800630a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800630c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800630e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006312:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	461a      	mov	r2, r3
 800631a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800631c:	643b      	str	r3, [r7, #64]	; 0x40
 800631e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006320:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006322:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006324:	e841 2300 	strex	r3, r2, [r1]
 8006328:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800632a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800632c:	2b00      	cmp	r3, #0
 800632e:	d1e6      	bne.n	80062fe <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	3308      	adds	r3, #8
 8006336:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006338:	6a3b      	ldr	r3, [r7, #32]
 800633a:	e853 3f00 	ldrex	r3, [r3]
 800633e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006340:	69fb      	ldr	r3, [r7, #28]
 8006342:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006346:	f023 0301 	bic.w	r3, r3, #1
 800634a:	64bb      	str	r3, [r7, #72]	; 0x48
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	3308      	adds	r3, #8
 8006352:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006354:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006356:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006358:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800635a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800635c:	e841 2300 	strex	r3, r2, [r1]
 8006360:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006364:	2b00      	cmp	r3, #0
 8006366:	d1e3      	bne.n	8006330 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800636c:	2b01      	cmp	r3, #1
 800636e:	d118      	bne.n	80063a2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	e853 3f00 	ldrex	r3, [r3]
 800637c:	60bb      	str	r3, [r7, #8]
   return(result);
 800637e:	68bb      	ldr	r3, [r7, #8]
 8006380:	f023 0310 	bic.w	r3, r3, #16
 8006384:	647b      	str	r3, [r7, #68]	; 0x44
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	461a      	mov	r2, r3
 800638c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800638e:	61bb      	str	r3, [r7, #24]
 8006390:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006392:	6979      	ldr	r1, [r7, #20]
 8006394:	69ba      	ldr	r2, [r7, #24]
 8006396:	e841 2300 	strex	r3, r2, [r1]
 800639a:	613b      	str	r3, [r7, #16]
   return(result);
 800639c:	693b      	ldr	r3, [r7, #16]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d1e6      	bne.n	8006370 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2220      	movs	r2, #32
 80063a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2200      	movs	r2, #0
 80063ae:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2200      	movs	r2, #0
 80063b4:	675a      	str	r2, [r3, #116]	; 0x74
}
 80063b6:	bf00      	nop
 80063b8:	3754      	adds	r7, #84	; 0x54
 80063ba:	46bd      	mov	sp, r7
 80063bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c0:	4770      	bx	lr

080063c2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80063c2:	b480      	push	{r7}
 80063c4:	b085      	sub	sp, #20
 80063c6:	af00      	add	r7, sp, #0
 80063c8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80063d0:	2b01      	cmp	r3, #1
 80063d2:	d101      	bne.n	80063d8 <HAL_UARTEx_DisableFifoMode+0x16>
 80063d4:	2302      	movs	r3, #2
 80063d6:	e027      	b.n	8006428 <HAL_UARTEx_DisableFifoMode+0x66>
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2201      	movs	r2, #1
 80063dc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2224      	movs	r2, #36	; 0x24
 80063e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	681a      	ldr	r2, [r3, #0]
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f022 0201 	bic.w	r2, r2, #1
 80063fe:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006406:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2200      	movs	r2, #0
 800640c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	68fa      	ldr	r2, [r7, #12]
 8006414:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2220      	movs	r2, #32
 800641a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2200      	movs	r2, #0
 8006422:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006426:	2300      	movs	r3, #0
}
 8006428:	4618      	mov	r0, r3
 800642a:	3714      	adds	r7, #20
 800642c:	46bd      	mov	sp, r7
 800642e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006432:	4770      	bx	lr

08006434 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b084      	sub	sp, #16
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
 800643c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006444:	2b01      	cmp	r3, #1
 8006446:	d101      	bne.n	800644c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006448:	2302      	movs	r3, #2
 800644a:	e02d      	b.n	80064a8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2201      	movs	r2, #1
 8006450:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2224      	movs	r2, #36	; 0x24
 8006458:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	681a      	ldr	r2, [r3, #0]
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f022 0201 	bic.w	r2, r2, #1
 8006472:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	689b      	ldr	r3, [r3, #8]
 800647a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	683a      	ldr	r2, [r7, #0]
 8006484:	430a      	orrs	r2, r1
 8006486:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006488:	6878      	ldr	r0, [r7, #4]
 800648a:	f000 f84f 	bl	800652c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	68fa      	ldr	r2, [r7, #12]
 8006494:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2220      	movs	r2, #32
 800649a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2200      	movs	r2, #0
 80064a2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80064a6:	2300      	movs	r3, #0
}
 80064a8:	4618      	mov	r0, r3
 80064aa:	3710      	adds	r7, #16
 80064ac:	46bd      	mov	sp, r7
 80064ae:	bd80      	pop	{r7, pc}

080064b0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b084      	sub	sp, #16
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
 80064b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80064c0:	2b01      	cmp	r3, #1
 80064c2:	d101      	bne.n	80064c8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80064c4:	2302      	movs	r3, #2
 80064c6:	e02d      	b.n	8006524 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2201      	movs	r2, #1
 80064cc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2224      	movs	r2, #36	; 0x24
 80064d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	681a      	ldr	r2, [r3, #0]
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f022 0201 	bic.w	r2, r2, #1
 80064ee:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	689b      	ldr	r3, [r3, #8]
 80064f6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	683a      	ldr	r2, [r7, #0]
 8006500:	430a      	orrs	r2, r1
 8006502:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006504:	6878      	ldr	r0, [r7, #4]
 8006506:	f000 f811 	bl	800652c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	68fa      	ldr	r2, [r7, #12]
 8006510:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2220      	movs	r2, #32
 8006516:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2200      	movs	r2, #0
 800651e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006522:	2300      	movs	r3, #0
}
 8006524:	4618      	mov	r0, r3
 8006526:	3710      	adds	r7, #16
 8006528:	46bd      	mov	sp, r7
 800652a:	bd80      	pop	{r7, pc}

0800652c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800652c:	b480      	push	{r7}
 800652e:	b085      	sub	sp, #20
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006538:	2b00      	cmp	r3, #0
 800653a:	d108      	bne.n	800654e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2201      	movs	r2, #1
 8006540:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2201      	movs	r2, #1
 8006548:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800654c:	e031      	b.n	80065b2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800654e:	2308      	movs	r3, #8
 8006550:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006552:	2308      	movs	r3, #8
 8006554:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	689b      	ldr	r3, [r3, #8]
 800655c:	0e5b      	lsrs	r3, r3, #25
 800655e:	b2db      	uxtb	r3, r3
 8006560:	f003 0307 	and.w	r3, r3, #7
 8006564:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	689b      	ldr	r3, [r3, #8]
 800656c:	0f5b      	lsrs	r3, r3, #29
 800656e:	b2db      	uxtb	r3, r3
 8006570:	f003 0307 	and.w	r3, r3, #7
 8006574:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006576:	7bbb      	ldrb	r3, [r7, #14]
 8006578:	7b3a      	ldrb	r2, [r7, #12]
 800657a:	4911      	ldr	r1, [pc, #68]	; (80065c0 <UARTEx_SetNbDataToProcess+0x94>)
 800657c:	5c8a      	ldrb	r2, [r1, r2]
 800657e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006582:	7b3a      	ldrb	r2, [r7, #12]
 8006584:	490f      	ldr	r1, [pc, #60]	; (80065c4 <UARTEx_SetNbDataToProcess+0x98>)
 8006586:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006588:	fb93 f3f2 	sdiv	r3, r3, r2
 800658c:	b29a      	uxth	r2, r3
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006594:	7bfb      	ldrb	r3, [r7, #15]
 8006596:	7b7a      	ldrb	r2, [r7, #13]
 8006598:	4909      	ldr	r1, [pc, #36]	; (80065c0 <UARTEx_SetNbDataToProcess+0x94>)
 800659a:	5c8a      	ldrb	r2, [r1, r2]
 800659c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80065a0:	7b7a      	ldrb	r2, [r7, #13]
 80065a2:	4908      	ldr	r1, [pc, #32]	; (80065c4 <UARTEx_SetNbDataToProcess+0x98>)
 80065a4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80065a6:	fb93 f3f2 	sdiv	r3, r3, r2
 80065aa:	b29a      	uxth	r2, r3
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80065b2:	bf00      	nop
 80065b4:	3714      	adds	r7, #20
 80065b6:	46bd      	mov	sp, r7
 80065b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065bc:	4770      	bx	lr
 80065be:	bf00      	nop
 80065c0:	0800abd8 	.word	0x0800abd8
 80065c4:	0800abe0 	.word	0x0800abe0

080065c8 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b088      	sub	sp, #32
 80065cc:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80065ce:	2300      	movs	r3, #0
 80065d0:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80065d2:	f107 0308 	add.w	r3, r7, #8
 80065d6:	2218      	movs	r2, #24
 80065d8:	2100      	movs	r1, #0
 80065da:	4618      	mov	r0, r3
 80065dc:	f001 f8d8 	bl	8007790 <Osal_MemSet>
  rq.ogf = 0x3f;
 80065e0:	233f      	movs	r3, #63	; 0x3f
 80065e2:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 80065e4:	2381      	movs	r3, #129	; 0x81
 80065e6:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80065e8:	1dfb      	adds	r3, r7, #7
 80065ea:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80065ec:	2301      	movs	r3, #1
 80065ee:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80065f0:	f107 0308 	add.w	r3, r7, #8
 80065f4:	2100      	movs	r1, #0
 80065f6:	4618      	mov	r0, r3
 80065f8:	f001 fb54 	bl	8007ca4 <hci_send_req>
 80065fc:	4603      	mov	r3, r0
 80065fe:	2b00      	cmp	r3, #0
 8006600:	da01      	bge.n	8006606 <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 8006602:	23ff      	movs	r3, #255	; 0xff
 8006604:	e000      	b.n	8006608 <aci_gap_set_non_discoverable+0x40>
  return status;
 8006606:	79fb      	ldrb	r3, [r7, #7]
}
 8006608:	4618      	mov	r0, r3
 800660a:	3720      	adds	r7, #32
 800660c:	46bd      	mov	sp, r7
 800660e:	bd80      	pop	{r7, pc}

08006610 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Slave_Conn_Interval_Min,
                                     uint16_t Slave_Conn_Interval_Max )
{
 8006610:	b5b0      	push	{r4, r5, r7, lr}
 8006612:	b0ce      	sub	sp, #312	; 0x138
 8006614:	af00      	add	r7, sp, #0
 8006616:	4605      	mov	r5, r0
 8006618:	460c      	mov	r4, r1
 800661a:	4610      	mov	r0, r2
 800661c:	4619      	mov	r1, r3
 800661e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006622:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8006626:	462a      	mov	r2, r5
 8006628:	701a      	strb	r2, [r3, #0]
 800662a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800662e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8006632:	4622      	mov	r2, r4
 8006634:	801a      	strh	r2, [r3, #0]
 8006636:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800663a:	f5a3 739b 	sub.w	r3, r3, #310	; 0x136
 800663e:	4602      	mov	r2, r0
 8006640:	801a      	strh	r2, [r3, #0]
 8006642:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006646:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 800664a:	460a      	mov	r2, r1
 800664c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 800664e:	f107 0310 	add.w	r3, r7, #16
 8006652:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 8006656:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 800665a:	3308      	adds	r3, #8
 800665c:	f107 0210 	add.w	r2, r7, #16
 8006660:	4413      	add	r3, r2
 8006662:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 8006666:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800666a:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 800666e:	4413      	add	r3, r2
 8006670:	3309      	adds	r3, #9
 8006672:	f107 0210 	add.w	r2, r7, #16
 8006676:	4413      	add	r3, r2
 8006678:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800667c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006680:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8006684:	2200      	movs	r2, #0
 8006686:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006688:	2300      	movs	r3, #0
 800668a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Type = Advertising_Type;
 800668e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006692:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8006696:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 800669a:	7812      	ldrb	r2, [r2, #0]
 800669c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800669e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80066a2:	3301      	adds	r3, #1
 80066a4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 80066a8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80066ac:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80066b0:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 80066b4:	8812      	ldrh	r2, [r2, #0]
 80066b6:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 80066ba:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80066be:	3302      	adds	r3, #2
 80066c0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 80066c4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80066c8:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80066cc:	f5a2 729b 	sub.w	r2, r2, #310	; 0x136
 80066d0:	8812      	ldrh	r2, [r2, #0]
 80066d2:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 80066d6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80066da:	3302      	adds	r3, #2
 80066dc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 80066e0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80066e4:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80066e8:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 80066ec:	7812      	ldrb	r2, [r2, #0]
 80066ee:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 80066f0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80066f4:	3301      	adds	r3, #1
 80066f6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 80066fa:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80066fe:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8006702:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8006704:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006708:	3301      	adds	r3, #1
 800670a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 800670e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006712:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8006716:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 8006718:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800671c:	3301      	adds	r3, #1
 800671e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 8006722:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006726:	3308      	adds	r3, #8
 8006728:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800672c:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 8006730:	4618      	mov	r0, r3
 8006732:	f001 f81d 	bl	8007770 <Osal_MemCpy>
    index_input += Local_Name_Length;
 8006736:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 800673a:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800673e:	4413      	add	r3, r2
 8006740:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 8006744:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006748:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800674c:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800674e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006752:	3301      	adds	r3, #1
 8006754:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 8006758:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800675c:	3301      	adds	r3, #1
 800675e:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8006762:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 8006766:	4618      	mov	r0, r3
 8006768:	f001 f802 	bl	8007770 <Osal_MemCpy>
    index_input += Service_Uuid_length;
 800676c:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8006770:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8006774:	4413      	add	r3, r2
 8006776:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Min = Slave_Conn_Interval_Min;
 800677a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800677e:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 8006782:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8006784:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006788:	3302      	adds	r3, #2
 800678a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Max = Slave_Conn_Interval_Max;
 800678e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006792:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 8006796:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 8006798:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800679c:	3302      	adds	r3, #2
 800679e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80067a2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80067a6:	2218      	movs	r2, #24
 80067a8:	2100      	movs	r1, #0
 80067aa:	4618      	mov	r0, r3
 80067ac:	f000 fff0 	bl	8007790 <Osal_MemSet>
  rq.ogf = 0x3f;
 80067b0:	233f      	movs	r3, #63	; 0x3f
 80067b2:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 80067b6:	2383      	movs	r3, #131	; 0x83
 80067b8:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80067bc:	f107 0310 	add.w	r3, r7, #16
 80067c0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80067c4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80067c8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80067cc:	f107 030f 	add.w	r3, r7, #15
 80067d0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80067d4:	2301      	movs	r3, #1
 80067d6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80067da:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80067de:	2100      	movs	r1, #0
 80067e0:	4618      	mov	r0, r3
 80067e2:	f001 fa5f 	bl	8007ca4 <hci_send_req>
 80067e6:	4603      	mov	r3, r0
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	da01      	bge.n	80067f0 <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 80067ec:	23ff      	movs	r3, #255	; 0xff
 80067ee:	e004      	b.n	80067fa <aci_gap_set_discoverable+0x1ea>
  return status;
 80067f0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80067f4:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80067f8:	781b      	ldrb	r3, [r3, #0]
}
 80067fa:	4618      	mov	r0, r3
 80067fc:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8006800:	46bd      	mov	sp, r7
 8006802:	bdb0      	pop	{r4, r5, r7, pc}

08006804 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b0cc      	sub	sp, #304	; 0x130
 8006808:	af00      	add	r7, sp, #0
 800680a:	4602      	mov	r2, r0
 800680c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006810:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8006814:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 8006816:	f107 0310 	add.w	r3, r7, #16
 800681a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800681e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006822:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8006826:	2200      	movs	r2, #0
 8006828:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800682a:	2300      	movs	r3, #0
 800682c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->IO_Capability = IO_Capability;
 8006830:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006834:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006838:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800683c:	7812      	ldrb	r2, [r2, #0]
 800683e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8006840:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006844:	3301      	adds	r3, #1
 8006846:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800684a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800684e:	2218      	movs	r2, #24
 8006850:	2100      	movs	r1, #0
 8006852:	4618      	mov	r0, r3
 8006854:	f000 ff9c 	bl	8007790 <Osal_MemSet>
  rq.ogf = 0x3f;
 8006858:	233f      	movs	r3, #63	; 0x3f
 800685a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x085;
 800685e:	2385      	movs	r3, #133	; 0x85
 8006860:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8006864:	f107 0310 	add.w	r3, r7, #16
 8006868:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800686c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006870:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8006874:	f107 030f 	add.w	r3, r7, #15
 8006878:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800687c:	2301      	movs	r3, #1
 800687e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006882:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006886:	2100      	movs	r1, #0
 8006888:	4618      	mov	r0, r3
 800688a:	f001 fa0b 	bl	8007ca4 <hci_send_req>
 800688e:	4603      	mov	r3, r0
 8006890:	2b00      	cmp	r3, #0
 8006892:	da01      	bge.n	8006898 <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 8006894:	23ff      	movs	r3, #255	; 0xff
 8006896:	e004      	b.n	80068a2 <aci_gap_set_io_capability+0x9e>
  return status;
 8006898:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800689c:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80068a0:	781b      	ldrb	r3, [r3, #0]
}
 80068a2:	4618      	mov	r0, r3
 80068a4:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80068a8:	46bd      	mov	sp, r7
 80068aa:	bd80      	pop	{r7, pc}

080068ac <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 80068ac:	b5b0      	push	{r4, r5, r7, lr}
 80068ae:	b0cc      	sub	sp, #304	; 0x130
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	4605      	mov	r5, r0
 80068b4:	460c      	mov	r4, r1
 80068b6:	4610      	mov	r0, r2
 80068b8:	4619      	mov	r1, r3
 80068ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068be:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80068c2:	462a      	mov	r2, r5
 80068c4:	701a      	strb	r2, [r3, #0]
 80068c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068ca:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80068ce:	4622      	mov	r2, r4
 80068d0:	701a      	strb	r2, [r3, #0]
 80068d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068d6:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 80068da:	4602      	mov	r2, r0
 80068dc:	701a      	strb	r2, [r3, #0]
 80068de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068e2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80068e6:	460a      	mov	r2, r1
 80068e8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 80068ea:	f107 0310 	add.w	r3, r7, #16
 80068ee:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80068f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068f6:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80068fa:	2200      	movs	r2, #0
 80068fc:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80068fe:	2300      	movs	r3, #0
 8006900:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 8006904:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006908:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800690c:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8006910:	7812      	ldrb	r2, [r2, #0]
 8006912:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8006914:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006918:	3301      	adds	r3, #1
 800691a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->MITM_Mode = MITM_Mode;
 800691e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006922:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006926:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800692a:	7812      	ldrb	r2, [r2, #0]
 800692c:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800692e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006932:	3301      	adds	r3, #1
 8006934:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->SC_Support = SC_Support;
 8006938:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800693c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006940:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8006944:	7812      	ldrb	r2, [r2, #0]
 8006946:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8006948:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800694c:	3301      	adds	r3, #1
 800694e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 8006952:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006956:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800695a:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800695e:	7812      	ldrb	r2, [r2, #0]
 8006960:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 8006962:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006966:	3301      	adds	r3, #1
 8006968:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 800696c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006970:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 8006974:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8006976:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800697a:	3301      	adds	r3, #1
 800697c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 8006980:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006984:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 8006988:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800698a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800698e:	3301      	adds	r3, #1
 8006990:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 8006994:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006998:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 800699c:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800699e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80069a2:	3301      	adds	r3, #1
 80069a4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 80069a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069ac:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80069b0:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 80069b4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80069b8:	3304      	adds	r3, #4
 80069ba:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 80069be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069c2:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 80069c6:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 80069c8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80069cc:	3301      	adds	r3, #1
 80069ce:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80069d2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80069d6:	2218      	movs	r2, #24
 80069d8:	2100      	movs	r1, #0
 80069da:	4618      	mov	r0, r3
 80069dc:	f000 fed8 	bl	8007790 <Osal_MemSet>
  rq.ogf = 0x3f;
 80069e0:	233f      	movs	r3, #63	; 0x3f
 80069e2:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 80069e6:	2386      	movs	r3, #134	; 0x86
 80069e8:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80069ec:	f107 0310 	add.w	r3, r7, #16
 80069f0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80069f4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80069f8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80069fc:	f107 030f 	add.w	r3, r7, #15
 8006a00:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8006a04:	2301      	movs	r3, #1
 8006a06:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006a0a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006a0e:	2100      	movs	r1, #0
 8006a10:	4618      	mov	r0, r3
 8006a12:	f001 f947 	bl	8007ca4 <hci_send_req>
 8006a16:	4603      	mov	r3, r0
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	da01      	bge.n	8006a20 <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 8006a1c:	23ff      	movs	r3, #255	; 0xff
 8006a1e:	e004      	b.n	8006a2a <aci_gap_set_authentication_requirement+0x17e>
  return status;
 8006a20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a24:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8006a28:	781b      	ldrb	r3, [r3, #0]
}
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006a30:	46bd      	mov	sp, r7
 8006a32:	bdb0      	pop	{r4, r5, r7, pc}

08006a34 <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b0cc      	sub	sp, #304	; 0x130
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	4602      	mov	r2, r0
 8006a3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a40:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a44:	6019      	str	r1, [r3, #0]
 8006a46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a4a:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8006a4e:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 8006a50:	f107 0310 	add.w	r3, r7, #16
 8006a54:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8006a58:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a5c:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8006a60:	2200      	movs	r2, #0
 8006a62:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006a64:	2300      	movs	r3, #0
 8006a66:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 8006a6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a6e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006a72:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8006a76:	8812      	ldrh	r2, [r2, #0]
 8006a78:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8006a7a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006a7e:	3302      	adds	r3, #2
 8006a80:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Pass_Key = Pass_Key;
 8006a84:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a88:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006a8c:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 8006a90:	6812      	ldr	r2, [r2, #0]
 8006a92:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 8006a96:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006a9a:	3304      	adds	r3, #4
 8006a9c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006aa0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006aa4:	2218      	movs	r2, #24
 8006aa6:	2100      	movs	r1, #0
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	f000 fe71 	bl	8007790 <Osal_MemSet>
  rq.ogf = 0x3f;
 8006aae:	233f      	movs	r3, #63	; 0x3f
 8006ab0:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x088;
 8006ab4:	2388      	movs	r3, #136	; 0x88
 8006ab6:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8006aba:	f107 0310 	add.w	r3, r7, #16
 8006abe:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8006ac2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006ac6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8006aca:	f107 030f 	add.w	r3, r7, #15
 8006ace:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8006ad2:	2301      	movs	r3, #1
 8006ad4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006ad8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006adc:	2100      	movs	r1, #0
 8006ade:	4618      	mov	r0, r3
 8006ae0:	f001 f8e0 	bl	8007ca4 <hci_send_req>
 8006ae4:	4603      	mov	r3, r0
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	da01      	bge.n	8006aee <aci_gap_pass_key_resp+0xba>
    return BLE_STATUS_TIMEOUT;
 8006aea:	23ff      	movs	r3, #255	; 0xff
 8006aec:	e004      	b.n	8006af8 <aci_gap_pass_key_resp+0xc4>
  return status;
 8006aee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006af2:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8006af6:	781b      	ldrb	r3, [r3, #0]
}
 8006af8:	4618      	mov	r0, r3
 8006afa:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bd80      	pop	{r7, pc}

08006b02 <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 8006b02:	b590      	push	{r4, r7, lr}
 8006b04:	b0cd      	sub	sp, #308	; 0x134
 8006b06:	af00      	add	r7, sp, #0
 8006b08:	4604      	mov	r4, r0
 8006b0a:	4608      	mov	r0, r1
 8006b0c:	4611      	mov	r1, r2
 8006b0e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006b12:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 8006b16:	6013      	str	r3, [r2, #0]
 8006b18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b1c:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8006b20:	4622      	mov	r2, r4
 8006b22:	701a      	strb	r2, [r3, #0]
 8006b24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b28:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8006b2c:	4602      	mov	r2, r0
 8006b2e:	701a      	strb	r2, [r3, #0]
 8006b30:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b34:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8006b38:	460a      	mov	r2, r1
 8006b3a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 8006b3c:	f107 0310 	add.w	r3, r7, #16
 8006b40:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8006b44:	f107 0308 	add.w	r3, r7, #8
 8006b48:	2207      	movs	r2, #7
 8006b4a:	2100      	movs	r1, #0
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	f000 fe1f 	bl	8007790 <Osal_MemSet>
  int index_input = 0;
 8006b52:	2300      	movs	r3, #0
 8006b54:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = Role;
 8006b58:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b5c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006b60:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8006b64:	7812      	ldrb	r2, [r2, #0]
 8006b66:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8006b68:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006b6c:	3301      	adds	r3, #1
 8006b6e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = privacy_enabled;
 8006b72:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b76:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006b7a:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8006b7e:	7812      	ldrb	r2, [r2, #0]
 8006b80:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8006b82:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006b86:	3301      	adds	r3, #1
 8006b88:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = device_name_char_len;
 8006b8c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b90:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006b94:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8006b98:	7812      	ldrb	r2, [r2, #0]
 8006b9a:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8006b9c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006ba0:	3301      	adds	r3, #1
 8006ba2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006ba6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006baa:	2218      	movs	r2, #24
 8006bac:	2100      	movs	r1, #0
 8006bae:	4618      	mov	r0, r3
 8006bb0:	f000 fdee 	bl	8007790 <Osal_MemSet>
  rq.ogf = 0x3f;
 8006bb4:	233f      	movs	r3, #63	; 0x3f
 8006bb6:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 8006bba:	238a      	movs	r3, #138	; 0x8a
 8006bbc:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8006bc0:	f107 0310 	add.w	r3, r7, #16
 8006bc4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8006bc8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006bcc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8006bd0:	f107 0308 	add.w	r3, r7, #8
 8006bd4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8006bd8:	2307      	movs	r3, #7
 8006bda:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006bde:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006be2:	2100      	movs	r1, #0
 8006be4:	4618      	mov	r0, r3
 8006be6:	f001 f85d 	bl	8007ca4 <hci_send_req>
 8006bea:	4603      	mov	r3, r0
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	da01      	bge.n	8006bf4 <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 8006bf0:	23ff      	movs	r3, #255	; 0xff
 8006bf2:	e02e      	b.n	8006c52 <aci_gap_init+0x150>
  if ( resp.Status )
 8006bf4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bf8:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8006bfc:	781b      	ldrb	r3, [r3, #0]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d005      	beq.n	8006c0e <aci_gap_init+0x10c>
    return resp.Status;
 8006c02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c06:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8006c0a:	781b      	ldrb	r3, [r3, #0]
 8006c0c:	e021      	b.n	8006c52 <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 8006c0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c12:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8006c16:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8006c1a:	b29a      	uxth	r2, r3
 8006c1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c20:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 8006c28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c2c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8006c30:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8006c34:	b29a      	uxth	r2, r3
 8006c36:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8006c3a:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 8006c3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c40:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8006c44:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8006c48:	b29a      	uxth	r2, r3
 8006c4a:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8006c4e:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8006c50:	2300      	movs	r3, #0
}
 8006c52:	4618      	mov	r0, r3
 8006c54:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	bd90      	pop	{r4, r7, pc}

08006c5c <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b0cc      	sub	sp, #304	; 0x130
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	4602      	mov	r2, r0
 8006c64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c68:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c6c:	6019      	str	r1, [r3, #0]
 8006c6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c72:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8006c76:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 8006c78:	f107 0310 	add.w	r3, r7, #16
 8006c7c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8006c80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c84:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8006c88:	2200      	movs	r2, #0
 8006c8a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->AdvDataLen = AdvDataLen;
 8006c92:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c96:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006c9a:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8006c9e:	7812      	ldrb	r2, [r2, #0]
 8006ca0:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8006ca2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006ca6:	3301      	adds	r3, #1
 8006ca8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 8006cac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006cb0:	1c58      	adds	r0, r3, #1
 8006cb2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cb6:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8006cba:	781a      	ldrb	r2, [r3, #0]
 8006cbc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cc0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006cc4:	6819      	ldr	r1, [r3, #0]
 8006cc6:	f000 fd53 	bl	8007770 <Osal_MemCpy>
  index_input += AdvDataLen;
 8006cca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cce:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8006cd2:	781b      	ldrb	r3, [r3, #0]
 8006cd4:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8006cd8:	4413      	add	r3, r2
 8006cda:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006cde:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006ce2:	2218      	movs	r2, #24
 8006ce4:	2100      	movs	r1, #0
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	f000 fd52 	bl	8007790 <Osal_MemSet>
  rq.ogf = 0x3f;
 8006cec:	233f      	movs	r3, #63	; 0x3f
 8006cee:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08e;
 8006cf2:	238e      	movs	r3, #142	; 0x8e
 8006cf4:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8006cf8:	f107 0310 	add.w	r3, r7, #16
 8006cfc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8006d00:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006d04:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8006d08:	f107 030f 	add.w	r3, r7, #15
 8006d0c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8006d10:	2301      	movs	r3, #1
 8006d12:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006d16:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006d1a:	2100      	movs	r1, #0
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	f000 ffc1 	bl	8007ca4 <hci_send_req>
 8006d22:	4603      	mov	r3, r0
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	da01      	bge.n	8006d2c <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 8006d28:	23ff      	movs	r3, #255	; 0xff
 8006d2a:	e004      	b.n	8006d36 <aci_gap_update_adv_data+0xda>
  return status;
 8006d2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d30:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8006d34:	781b      	ldrb	r3, [r3, #0]
}
 8006d36:	4618      	mov	r0, r3
 8006d38:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	bd80      	pop	{r7, pc}

08006d40 <aci_gap_configure_whitelist>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_whitelist( void )
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b088      	sub	sp, #32
 8006d44:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8006d46:	2300      	movs	r3, #0
 8006d48:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006d4a:	f107 0308 	add.w	r3, r7, #8
 8006d4e:	2218      	movs	r2, #24
 8006d50:	2100      	movs	r1, #0
 8006d52:	4618      	mov	r0, r3
 8006d54:	f000 fd1c 	bl	8007790 <Osal_MemSet>
  rq.ogf = 0x3f;
 8006d58:	233f      	movs	r3, #63	; 0x3f
 8006d5a:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 8006d5c:	2392      	movs	r3, #146	; 0x92
 8006d5e:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8006d60:	1dfb      	adds	r3, r7, #7
 8006d62:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8006d64:	2301      	movs	r3, #1
 8006d66:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006d68:	f107 0308 	add.w	r3, r7, #8
 8006d6c:	2100      	movs	r1, #0
 8006d6e:	4618      	mov	r0, r3
 8006d70:	f000 ff98 	bl	8007ca4 <hci_send_req>
 8006d74:	4603      	mov	r3, r0
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	da01      	bge.n	8006d7e <aci_gap_configure_whitelist+0x3e>
    return BLE_STATUS_TIMEOUT;
 8006d7a:	23ff      	movs	r3, #255	; 0xff
 8006d7c:	e000      	b.n	8006d80 <aci_gap_configure_whitelist+0x40>
  return status;
 8006d7e:	79fb      	ldrb	r3, [r7, #7]
}
 8006d80:	4618      	mov	r0, r3
 8006d82:	3720      	adds	r7, #32
 8006d84:	46bd      	mov	sp, r7
 8006d86:	bd80      	pop	{r7, pc}

08006d88 <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b0cc      	sub	sp, #304	; 0x130
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	4602      	mov	r2, r0
 8006d90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d94:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8006d98:	801a      	strh	r2, [r3, #0]
 8006d9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d9e:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8006da2:	460a      	mov	r2, r1
 8006da4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 8006da6:	f107 0310 	add.w	r3, r7, #16
 8006daa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8006dae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006db2:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8006db6:	2200      	movs	r2, #0
 8006db8:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006dba:	2300      	movs	r3, #0
 8006dbc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 8006dc0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006dc4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006dc8:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8006dcc:	8812      	ldrh	r2, [r2, #0]
 8006dce:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8006dd0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006dd4:	3302      	adds	r3, #2
 8006dd6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 8006dda:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006dde:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006de2:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8006de6:	7812      	ldrb	r2, [r2, #0]
 8006de8:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8006dea:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006dee:	3301      	adds	r3, #1
 8006df0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006df4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006df8:	2218      	movs	r2, #24
 8006dfa:	2100      	movs	r1, #0
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	f000 fcc7 	bl	8007790 <Osal_MemSet>
  rq.ogf = 0x3f;
 8006e02:	233f      	movs	r3, #63	; 0x3f
 8006e04:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x0a5;
 8006e08:	23a5      	movs	r3, #165	; 0xa5
 8006e0a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8006e0e:	f107 0310 	add.w	r3, r7, #16
 8006e12:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8006e16:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006e1a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8006e1e:	f107 030f 	add.w	r3, r7, #15
 8006e22:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8006e26:	2301      	movs	r3, #1
 8006e28:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006e2c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006e30:	2100      	movs	r1, #0
 8006e32:	4618      	mov	r0, r3
 8006e34:	f000 ff36 	bl	8007ca4 <hci_send_req>
 8006e38:	4603      	mov	r3, r0
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	da01      	bge.n	8006e42 <aci_gap_numeric_comparison_value_confirm_yesno+0xba>
    return BLE_STATUS_TIMEOUT;
 8006e3e:	23ff      	movs	r3, #255	; 0xff
 8006e40:	e004      	b.n	8006e4c <aci_gap_numeric_comparison_value_confirm_yesno+0xc4>
  return status;
 8006e42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e46:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8006e4a:	781b      	ldrb	r3, [r3, #0]
}
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006e52:	46bd      	mov	sp, r7
 8006e54:	bd80      	pop	{r7, pc}

08006e56 <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 8006e56:	b580      	push	{r7, lr}
 8006e58:	b088      	sub	sp, #32
 8006e5a:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006e60:	f107 0308 	add.w	r3, r7, #8
 8006e64:	2218      	movs	r2, #24
 8006e66:	2100      	movs	r1, #0
 8006e68:	4618      	mov	r0, r3
 8006e6a:	f000 fc91 	bl	8007790 <Osal_MemSet>
  rq.ogf = 0x3f;
 8006e6e:	233f      	movs	r3, #63	; 0x3f
 8006e70:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 8006e72:	f240 1301 	movw	r3, #257	; 0x101
 8006e76:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8006e78:	1dfb      	adds	r3, r7, #7
 8006e7a:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8006e7c:	2301      	movs	r3, #1
 8006e7e:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006e80:	f107 0308 	add.w	r3, r7, #8
 8006e84:	2100      	movs	r1, #0
 8006e86:	4618      	mov	r0, r3
 8006e88:	f000 ff0c 	bl	8007ca4 <hci_send_req>
 8006e8c:	4603      	mov	r3, r0
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	da01      	bge.n	8006e96 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 8006e92:	23ff      	movs	r3, #255	; 0xff
 8006e94:	e000      	b.n	8006e98 <aci_gatt_init+0x42>
  return status;
 8006e96:	79fb      	ldrb	r3, [r7, #7]
}
 8006e98:	4618      	mov	r0, r3
 8006e9a:	3720      	adds	r7, #32
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	bd80      	pop	{r7, pc}

08006ea0 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 8006ea0:	b590      	push	{r4, r7, lr}
 8006ea2:	b0cf      	sub	sp, #316	; 0x13c
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	4604      	mov	r4, r0
 8006ea8:	f507 709c 	add.w	r0, r7, #312	; 0x138
 8006eac:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
 8006eb0:	6001      	str	r1, [r0, #0]
 8006eb2:	4610      	mov	r0, r2
 8006eb4:	4619      	mov	r1, r3
 8006eb6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006eba:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8006ebe:	4622      	mov	r2, r4
 8006ec0:	701a      	strb	r2, [r3, #0]
 8006ec2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006ec6:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8006eca:	4602      	mov	r2, r0
 8006ecc:	701a      	strb	r2, [r3, #0]
 8006ece:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006ed2:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8006ed6:	460a      	mov	r2, r1
 8006ed8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 8006eda:	f107 0310 	add.w	r3, r7, #16
 8006ede:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 8006ee2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006ee6:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8006eea:	781b      	ldrb	r3, [r3, #0]
 8006eec:	2b01      	cmp	r3, #1
 8006eee:	d00a      	beq.n	8006f06 <aci_gatt_add_service+0x66>
 8006ef0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006ef4:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8006ef8:	781b      	ldrb	r3, [r3, #0]
 8006efa:	2b02      	cmp	r3, #2
 8006efc:	d101      	bne.n	8006f02 <aci_gatt_add_service+0x62>
 8006efe:	2311      	movs	r3, #17
 8006f00:	e002      	b.n	8006f08 <aci_gatt_add_service+0x68>
 8006f02:	2301      	movs	r3, #1
 8006f04:	e000      	b.n	8006f08 <aci_gatt_add_service+0x68>
 8006f06:	2303      	movs	r3, #3
 8006f08:	f107 0210 	add.w	r2, r7, #16
 8006f0c:	4413      	add	r3, r2
 8006f0e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8006f12:	f107 030c 	add.w	r3, r7, #12
 8006f16:	2203      	movs	r2, #3
 8006f18:	2100      	movs	r1, #0
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	f000 fc38 	bl	8007790 <Osal_MemSet>
  int index_input = 0;
 8006f20:	2300      	movs	r3, #0
 8006f22:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 8006f26:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006f2a:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8006f2e:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 8006f32:	7812      	ldrb	r2, [r2, #0]
 8006f34:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8006f36:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006f3a:	3301      	adds	r3, #1
 8006f3c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 8006f40:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006f44:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8006f48:	781b      	ldrb	r3, [r3, #0]
 8006f4a:	2b01      	cmp	r3, #1
 8006f4c:	d002      	beq.n	8006f54 <aci_gatt_add_service+0xb4>
 8006f4e:	2b02      	cmp	r3, #2
 8006f50:	d004      	beq.n	8006f5c <aci_gatt_add_service+0xbc>
 8006f52:	e007      	b.n	8006f64 <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 8006f54:	2302      	movs	r3, #2
 8006f56:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8006f5a:	e005      	b.n	8006f68 <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 8006f5c:	2310      	movs	r3, #16
 8006f5e:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8006f62:	e001      	b.n	8006f68 <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 8006f64:	2397      	movs	r3, #151	; 0x97
 8006f66:	e06c      	b.n	8007042 <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 8006f68:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006f6c:	1c58      	adds	r0, r3, #1
 8006f6e:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 8006f72:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006f76:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8006f7a:	6819      	ldr	r1, [r3, #0]
 8006f7c:	f000 fbf8 	bl	8007770 <Osal_MemCpy>
    index_input += size;
 8006f80:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8006f84:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8006f88:	4413      	add	r3, r2
 8006f8a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Type = Service_Type;
 8006f8e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f92:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8006f96:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8006f9a:	7812      	ldrb	r2, [r2, #0]
 8006f9c:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8006f9e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006fa2:	3301      	adds	r3, #1
 8006fa4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 8006fa8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006fac:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8006fb0:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 8006fb4:	7812      	ldrb	r2, [r2, #0]
 8006fb6:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 8006fb8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006fbc:	3301      	adds	r3, #1
 8006fbe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006fc2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006fc6:	2218      	movs	r2, #24
 8006fc8:	2100      	movs	r1, #0
 8006fca:	4618      	mov	r0, r3
 8006fcc:	f000 fbe0 	bl	8007790 <Osal_MemSet>
  rq.ogf = 0x3f;
 8006fd0:	233f      	movs	r3, #63	; 0x3f
 8006fd2:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 8006fd6:	f44f 7381 	mov.w	r3, #258	; 0x102
 8006fda:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8006fde:	f107 0310 	add.w	r3, r7, #16
 8006fe2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8006fe6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006fea:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8006fee:	f107 030c 	add.w	r3, r7, #12
 8006ff2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8006ff6:	2303      	movs	r3, #3
 8006ff8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006ffc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007000:	2100      	movs	r1, #0
 8007002:	4618      	mov	r0, r3
 8007004:	f000 fe4e 	bl	8007ca4 <hci_send_req>
 8007008:	4603      	mov	r3, r0
 800700a:	2b00      	cmp	r3, #0
 800700c:	da01      	bge.n	8007012 <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 800700e:	23ff      	movs	r3, #255	; 0xff
 8007010:	e017      	b.n	8007042 <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 8007012:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007016:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800701a:	781b      	ldrb	r3, [r3, #0]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d005      	beq.n	800702c <aci_gatt_add_service+0x18c>
    return resp.Status;
 8007020:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007024:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007028:	781b      	ldrb	r3, [r3, #0]
 800702a:	e00a      	b.n	8007042 <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 800702c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007030:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007034:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8007038:	b29a      	uxth	r2, r3
 800703a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800703e:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8007040:	2300      	movs	r3, #0
}
 8007042:	4618      	mov	r0, r3
 8007044:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8007048:	46bd      	mov	sp, r7
 800704a:	bd90      	pop	{r4, r7, pc}

0800704c <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 800704c:	b590      	push	{r4, r7, lr}
 800704e:	b0d1      	sub	sp, #324	; 0x144
 8007050:	af00      	add	r7, sp, #0
 8007052:	4604      	mov	r4, r0
 8007054:	4608      	mov	r0, r1
 8007056:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 800705a:	f5a1 719c 	sub.w	r1, r1, #312	; 0x138
 800705e:	600a      	str	r2, [r1, #0]
 8007060:	4619      	mov	r1, r3
 8007062:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8007066:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 800706a:	4622      	mov	r2, r4
 800706c:	801a      	strh	r2, [r3, #0]
 800706e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8007072:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8007076:	4602      	mov	r2, r0
 8007078:	701a      	strb	r2, [r3, #0]
 800707a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800707e:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 8007082:	460a      	mov	r2, r1
 8007084:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 8007086:	f107 0318 	add.w	r3, r7, #24
 800708a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 800708e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8007092:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8007096:	781b      	ldrb	r3, [r3, #0]
 8007098:	2b01      	cmp	r3, #1
 800709a:	d00a      	beq.n	80070b2 <aci_gatt_add_char+0x66>
 800709c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80070a0:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 80070a4:	781b      	ldrb	r3, [r3, #0]
 80070a6:	2b02      	cmp	r3, #2
 80070a8:	d101      	bne.n	80070ae <aci_gatt_add_char+0x62>
 80070aa:	2313      	movs	r3, #19
 80070ac:	e002      	b.n	80070b4 <aci_gatt_add_char+0x68>
 80070ae:	2303      	movs	r3, #3
 80070b0:	e000      	b.n	80070b4 <aci_gatt_add_char+0x68>
 80070b2:	2305      	movs	r3, #5
 80070b4:	f107 0218 	add.w	r2, r7, #24
 80070b8:	4413      	add	r3, r2
 80070ba:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 80070be:	f107 0314 	add.w	r3, r7, #20
 80070c2:	2203      	movs	r2, #3
 80070c4:	2100      	movs	r1, #0
 80070c6:	4618      	mov	r0, r3
 80070c8:	f000 fb62 	bl	8007790 <Osal_MemSet>
  int index_input = 0;
 80070cc:	2300      	movs	r3, #0
 80070ce:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Service_Handle = Service_Handle;
 80070d2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80070d6:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 80070da:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 80070de:	8812      	ldrh	r2, [r2, #0]
 80070e0:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80070e2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80070e6:	3302      	adds	r3, #2
 80070e8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 80070ec:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80070f0:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 80070f4:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 80070f8:	7812      	ldrb	r2, [r2, #0]
 80070fa:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80070fc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007100:	3301      	adds	r3, #1
 8007102:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 8007106:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800710a:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 800710e:	781b      	ldrb	r3, [r3, #0]
 8007110:	2b01      	cmp	r3, #1
 8007112:	d002      	beq.n	800711a <aci_gatt_add_char+0xce>
 8007114:	2b02      	cmp	r3, #2
 8007116:	d004      	beq.n	8007122 <aci_gatt_add_char+0xd6>
 8007118:	e007      	b.n	800712a <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 800711a:	2302      	movs	r3, #2
 800711c:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 8007120:	e005      	b.n	800712e <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 8007122:	2310      	movs	r3, #16
 8007124:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 8007128:	e001      	b.n	800712e <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 800712a:	2397      	movs	r3, #151	; 0x97
 800712c:	e091      	b.n	8007252 <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 800712e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8007132:	1cd8      	adds	r0, r3, #3
 8007134:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 8007138:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800713c:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8007140:	6819      	ldr	r1, [r3, #0]
 8007142:	f000 fb15 	bl	8007770 <Osal_MemCpy>
    index_input += size;
 8007146:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800714a:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 800714e:	4413      	add	r3, r2
 8007150:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 8007154:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007158:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 800715c:	f5a2 729d 	sub.w	r2, r2, #314	; 0x13a
 8007160:	8812      	ldrh	r2, [r2, #0]
 8007162:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8007164:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007168:	3302      	adds	r3, #2
 800716a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Properties = Char_Properties;
 800716e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007172:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8007176:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 8007178:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800717c:	3301      	adds	r3, #1
 800717e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 8007182:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007186:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800718a:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 800718c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007190:	3301      	adds	r3, #1
 8007192:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 8007196:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800719a:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 800719e:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 80071a0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80071a4:	3301      	adds	r3, #1
 80071a6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 80071aa:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80071ae:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 80071b2:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 80071b4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80071b8:	3301      	adds	r3, #1
 80071ba:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Is_Variable = Is_Variable;
 80071be:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80071c2:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 80071c6:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 80071c8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80071cc:	3301      	adds	r3, #1
 80071ce:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80071d2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80071d6:	2218      	movs	r2, #24
 80071d8:	2100      	movs	r1, #0
 80071da:	4618      	mov	r0, r3
 80071dc:	f000 fad8 	bl	8007790 <Osal_MemSet>
  rq.ogf = 0x3f;
 80071e0:	233f      	movs	r3, #63	; 0x3f
 80071e2:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x104;
 80071e6:	f44f 7382 	mov.w	r3, #260	; 0x104
 80071ea:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 80071ee:	f107 0318 	add.w	r3, r7, #24
 80071f2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 80071f6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80071fa:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 80071fe:	f107 0314 	add.w	r3, r7, #20
 8007202:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 8007206:	2303      	movs	r3, #3
 8007208:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 800720c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8007210:	2100      	movs	r1, #0
 8007212:	4618      	mov	r0, r3
 8007214:	f000 fd46 	bl	8007ca4 <hci_send_req>
 8007218:	4603      	mov	r3, r0
 800721a:	2b00      	cmp	r3, #0
 800721c:	da01      	bge.n	8007222 <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 800721e:	23ff      	movs	r3, #255	; 0xff
 8007220:	e017      	b.n	8007252 <aci_gatt_add_char+0x206>
  if ( resp.Status )
 8007222:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8007226:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800722a:	781b      	ldrb	r3, [r3, #0]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d005      	beq.n	800723c <aci_gatt_add_char+0x1f0>
    return resp.Status;
 8007230:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8007234:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007238:	781b      	ldrb	r3, [r3, #0]
 800723a:	e00a      	b.n	8007252 <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 800723c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8007240:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007244:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8007248:	b29a      	uxth	r2, r3
 800724a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800724e:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8007250:	2300      	movs	r3, #0
}
 8007252:	4618      	mov	r0, r3
 8007254:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 8007258:	46bd      	mov	sp, r7
 800725a:	bd90      	pop	{r4, r7, pc}

0800725c <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 800725c:	b5b0      	push	{r4, r5, r7, lr}
 800725e:	b0cc      	sub	sp, #304	; 0x130
 8007260:	af00      	add	r7, sp, #0
 8007262:	4605      	mov	r5, r0
 8007264:	460c      	mov	r4, r1
 8007266:	4610      	mov	r0, r2
 8007268:	4619      	mov	r1, r3
 800726a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800726e:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8007272:	462a      	mov	r2, r5
 8007274:	801a      	strh	r2, [r3, #0]
 8007276:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800727a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800727e:	4622      	mov	r2, r4
 8007280:	801a      	strh	r2, [r3, #0]
 8007282:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007286:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 800728a:	4602      	mov	r2, r0
 800728c:	701a      	strb	r2, [r3, #0]
 800728e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007292:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8007296:	460a      	mov	r2, r1
 8007298:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 800729a:	f107 0310 	add.w	r3, r7, #16
 800729e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80072a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072a6:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80072aa:	2200      	movs	r2, #0
 80072ac:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80072ae:	2300      	movs	r3, #0
 80072b0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = Service_Handle;
 80072b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072b8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80072bc:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80072c0:	8812      	ldrh	r2, [r2, #0]
 80072c2:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80072c4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80072c8:	3302      	adds	r3, #2
 80072ca:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 80072ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072d2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80072d6:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80072da:	8812      	ldrh	r2, [r2, #0]
 80072dc:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 80072de:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80072e2:	3302      	adds	r3, #2
 80072e4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = Val_Offset;
 80072e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072ec:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80072f0:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 80072f4:	7812      	ldrb	r2, [r2, #0]
 80072f6:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 80072f8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80072fc:	3301      	adds	r3, #1
 80072fe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 8007302:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007306:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800730a:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 800730e:	7812      	ldrb	r2, [r2, #0]
 8007310:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8007312:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007316:	3301      	adds	r3, #1
 8007318:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 800731c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007320:	1d98      	adds	r0, r3, #6
 8007322:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007326:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 800732a:	781b      	ldrb	r3, [r3, #0]
 800732c:	461a      	mov	r2, r3
 800732e:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8007332:	f000 fa1d 	bl	8007770 <Osal_MemCpy>
  index_input += Char_Value_Length;
 8007336:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800733a:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 800733e:	781b      	ldrb	r3, [r3, #0]
 8007340:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8007344:	4413      	add	r3, r2
 8007346:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800734a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800734e:	2218      	movs	r2, #24
 8007350:	2100      	movs	r1, #0
 8007352:	4618      	mov	r0, r3
 8007354:	f000 fa1c 	bl	8007790 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007358:	233f      	movs	r3, #63	; 0x3f
 800735a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 800735e:	f44f 7383 	mov.w	r3, #262	; 0x106
 8007362:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007366:	f107 0310 	add.w	r3, r7, #16
 800736a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800736e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007372:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007376:	f107 030f 	add.w	r3, r7, #15
 800737a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800737e:	2301      	movs	r3, #1
 8007380:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007384:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007388:	2100      	movs	r1, #0
 800738a:	4618      	mov	r0, r3
 800738c:	f000 fc8a 	bl	8007ca4 <hci_send_req>
 8007390:	4603      	mov	r3, r0
 8007392:	2b00      	cmp	r3, #0
 8007394:	da01      	bge.n	800739a <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 8007396:	23ff      	movs	r3, #255	; 0xff
 8007398:	e004      	b.n	80073a4 <aci_gatt_update_char_value+0x148>
  return status;
 800739a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800739e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80073a2:	781b      	ldrb	r3, [r3, #0]
}
 80073a4:	4618      	mov	r0, r3
 80073a6:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80073aa:	46bd      	mov	sp, r7
 80073ac:	bdb0      	pop	{r4, r5, r7, pc}

080073ae <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 80073ae:	b580      	push	{r7, lr}
 80073b0:	b0cc      	sub	sp, #304	; 0x130
 80073b2:	af00      	add	r7, sp, #0
 80073b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073b8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80073bc:	601a      	str	r2, [r3, #0]
 80073be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073c2:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80073c6:	4602      	mov	r2, r0
 80073c8:	701a      	strb	r2, [r3, #0]
 80073ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073ce:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80073d2:	460a      	mov	r2, r1
 80073d4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 80073d6:	f107 0310 	add.w	r3, r7, #16
 80073da:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80073de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073e2:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80073e6:	2200      	movs	r2, #0
 80073e8:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80073ea:	2300      	movs	r3, #0
 80073ec:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = Offset;
 80073f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073f4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80073f8:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 80073fc:	7812      	ldrb	r2, [r2, #0]
 80073fe:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007400:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007404:	3301      	adds	r3, #1
 8007406:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = Length;
 800740a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800740e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007412:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8007416:	7812      	ldrb	r2, [r2, #0]
 8007418:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800741a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800741e:	3301      	adds	r3, #1
 8007420:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 8007424:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007428:	1c98      	adds	r0, r3, #2
 800742a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800742e:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8007432:	781a      	ldrb	r2, [r3, #0]
 8007434:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007438:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800743c:	6819      	ldr	r1, [r3, #0]
 800743e:	f000 f997 	bl	8007770 <Osal_MemCpy>
  index_input += Length;
 8007442:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007446:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800744a:	781b      	ldrb	r3, [r3, #0]
 800744c:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8007450:	4413      	add	r3, r2
 8007452:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007456:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800745a:	2218      	movs	r2, #24
 800745c:	2100      	movs	r1, #0
 800745e:	4618      	mov	r0, r3
 8007460:	f000 f996 	bl	8007790 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007464:	233f      	movs	r3, #63	; 0x3f
 8007466:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 800746a:	230c      	movs	r3, #12
 800746c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007470:	f107 0310 	add.w	r3, r7, #16
 8007474:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007478:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800747c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007480:	f107 030f 	add.w	r3, r7, #15
 8007484:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007488:	2301      	movs	r3, #1
 800748a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800748e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007492:	2100      	movs	r1, #0
 8007494:	4618      	mov	r0, r3
 8007496:	f000 fc05 	bl	8007ca4 <hci_send_req>
 800749a:	4603      	mov	r3, r0
 800749c:	2b00      	cmp	r3, #0
 800749e:	da01      	bge.n	80074a4 <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 80074a0:	23ff      	movs	r3, #255	; 0xff
 80074a2:	e004      	b.n	80074ae <aci_hal_write_config_data+0x100>
  return status;
 80074a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074a8:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80074ac:	781b      	ldrb	r3, [r3, #0]
}
 80074ae:	4618      	mov	r0, r3
 80074b0:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80074b4:	46bd      	mov	sp, r7
 80074b6:	bd80      	pop	{r7, pc}

080074b8 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b0cc      	sub	sp, #304	; 0x130
 80074bc:	af00      	add	r7, sp, #0
 80074be:	4602      	mov	r2, r0
 80074c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074c4:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80074c8:	701a      	strb	r2, [r3, #0]
 80074ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074ce:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80074d2:	460a      	mov	r2, r1
 80074d4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 80074d6:	f107 0310 	add.w	r3, r7, #16
 80074da:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80074de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074e2:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80074e6:	2200      	movs	r2, #0
 80074e8:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80074ea:	2300      	movs	r3, #0
 80074ec:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = En_High_Power;
 80074f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074f4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80074f8:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 80074fc:	7812      	ldrb	r2, [r2, #0]
 80074fe:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007500:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007504:	3301      	adds	r3, #1
 8007506:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = PA_Level;
 800750a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800750e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007512:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8007516:	7812      	ldrb	r2, [r2, #0]
 8007518:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800751a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800751e:	3301      	adds	r3, #1
 8007520:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007524:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007528:	2218      	movs	r2, #24
 800752a:	2100      	movs	r1, #0
 800752c:	4618      	mov	r0, r3
 800752e:	f000 f92f 	bl	8007790 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007532:	233f      	movs	r3, #63	; 0x3f
 8007534:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 8007538:	230f      	movs	r3, #15
 800753a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800753e:	f107 0310 	add.w	r3, r7, #16
 8007542:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007546:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800754a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800754e:	f107 030f 	add.w	r3, r7, #15
 8007552:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007556:	2301      	movs	r3, #1
 8007558:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800755c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007560:	2100      	movs	r1, #0
 8007562:	4618      	mov	r0, r3
 8007564:	f000 fb9e 	bl	8007ca4 <hci_send_req>
 8007568:	4603      	mov	r3, r0
 800756a:	2b00      	cmp	r3, #0
 800756c:	da01      	bge.n	8007572 <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 800756e:	23ff      	movs	r3, #255	; 0xff
 8007570:	e004      	b.n	800757c <aci_hal_set_tx_power_level+0xc4>
  return status;
 8007572:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007576:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800757a:	781b      	ldrb	r3, [r3, #0]
}
 800757c:	4618      	mov	r0, r3
 800757e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007582:	46bd      	mov	sp, r7
 8007584:	bd80      	pop	{r7, pc}

08007586 <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 8007586:	b580      	push	{r7, lr}
 8007588:	b0cc      	sub	sp, #304	; 0x130
 800758a:	af00      	add	r7, sp, #0
 800758c:	4602      	mov	r2, r0
 800758e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007592:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8007596:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 8007598:	f107 0310 	add.w	r3, r7, #16
 800759c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80075a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075a4:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80075a8:	2200      	movs	r2, #0
 80075aa:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80075ac:	2300      	movs	r3, #0
 80075ae:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 80075b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075b6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80075ba:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80075be:	8812      	ldrh	r2, [r2, #0]
 80075c0:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80075c2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80075c6:	3302      	adds	r3, #2
 80075c8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80075cc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80075d0:	2218      	movs	r2, #24
 80075d2:	2100      	movs	r1, #0
 80075d4:	4618      	mov	r0, r3
 80075d6:	f000 f8db 	bl	8007790 <Osal_MemSet>
  rq.ogf = 0x3f;
 80075da:	233f      	movs	r3, #63	; 0x3f
 80075dc:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x018;
 80075e0:	2318      	movs	r3, #24
 80075e2:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80075e6:	f107 0310 	add.w	r3, r7, #16
 80075ea:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80075ee:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80075f2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80075f6:	f107 030f 	add.w	r3, r7, #15
 80075fa:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80075fe:	2301      	movs	r3, #1
 8007600:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007604:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007608:	2100      	movs	r1, #0
 800760a:	4618      	mov	r0, r3
 800760c:	f000 fb4a 	bl	8007ca4 <hci_send_req>
 8007610:	4603      	mov	r3, r0
 8007612:	2b00      	cmp	r3, #0
 8007614:	da01      	bge.n	800761a <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 8007616:	23ff      	movs	r3, #255	; 0xff
 8007618:	e004      	b.n	8007624 <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 800761a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800761e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007622:	781b      	ldrb	r3, [r3, #0]
}
 8007624:	4618      	mov	r0, r3
 8007626:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800762a:	46bd      	mov	sp, r7
 800762c:	bd80      	pop	{r7, pc}

0800762e <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 800762e:	b580      	push	{r7, lr}
 8007630:	b088      	sub	sp, #32
 8007632:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8007634:	2300      	movs	r3, #0
 8007636:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007638:	f107 0308 	add.w	r3, r7, #8
 800763c:	2218      	movs	r2, #24
 800763e:	2100      	movs	r1, #0
 8007640:	4618      	mov	r0, r3
 8007642:	f000 f8a5 	bl	8007790 <Osal_MemSet>
  rq.ogf = 0x03;
 8007646:	2303      	movs	r3, #3
 8007648:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 800764a:	2303      	movs	r3, #3
 800764c:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800764e:	1dfb      	adds	r3, r7, #7
 8007650:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8007652:	2301      	movs	r3, #1
 8007654:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007656:	f107 0308 	add.w	r3, r7, #8
 800765a:	2100      	movs	r1, #0
 800765c:	4618      	mov	r0, r3
 800765e:	f000 fb21 	bl	8007ca4 <hci_send_req>
 8007662:	4603      	mov	r3, r0
 8007664:	2b00      	cmp	r3, #0
 8007666:	da01      	bge.n	800766c <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 8007668:	23ff      	movs	r3, #255	; 0xff
 800766a:	e000      	b.n	800766e <hci_reset+0x40>
  return status;
 800766c:	79fb      	ldrb	r3, [r7, #7]
}
 800766e:	4618      	mov	r0, r3
 8007670:	3720      	adds	r7, #32
 8007672:	46bd      	mov	sp, r7
 8007674:	bd80      	pop	{r7, pc}

08007676 <hci_le_set_default_phy>:
}

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 8007676:	b590      	push	{r4, r7, lr}
 8007678:	b0cd      	sub	sp, #308	; 0x134
 800767a:	af00      	add	r7, sp, #0
 800767c:	4604      	mov	r4, r0
 800767e:	4608      	mov	r0, r1
 8007680:	4611      	mov	r1, r2
 8007682:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007686:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800768a:	4622      	mov	r2, r4
 800768c:	701a      	strb	r2, [r3, #0]
 800768e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007692:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8007696:	4602      	mov	r2, r0
 8007698:	701a      	strb	r2, [r3, #0]
 800769a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800769e:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 80076a2:	460a      	mov	r2, r1
 80076a4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 80076a6:	f107 0310 	add.w	r3, r7, #16
 80076aa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80076ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076b2:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80076b6:	2200      	movs	r2, #0
 80076b8:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80076ba:	2300      	movs	r3, #0
 80076bc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 80076c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076c4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80076c8:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 80076cc:	7812      	ldrb	r2, [r2, #0]
 80076ce:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80076d0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80076d4:	3301      	adds	r3, #1
 80076d6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->TX_PHYS = TX_PHYS;
 80076da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076de:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80076e2:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80076e6:	7812      	ldrb	r2, [r2, #0]
 80076e8:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80076ea:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80076ee:	3301      	adds	r3, #1
 80076f0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->RX_PHYS = RX_PHYS;
 80076f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076f8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80076fc:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8007700:	7812      	ldrb	r2, [r2, #0]
 8007702:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8007704:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007708:	3301      	adds	r3, #1
 800770a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800770e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007712:	2218      	movs	r2, #24
 8007714:	2100      	movs	r1, #0
 8007716:	4618      	mov	r0, r3
 8007718:	f000 f83a 	bl	8007790 <Osal_MemSet>
  rq.ogf = 0x08;
 800771c:	2308      	movs	r3, #8
 800771e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x031;
 8007722:	2331      	movs	r3, #49	; 0x31
 8007724:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007728:	f107 0310 	add.w	r3, r7, #16
 800772c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007730:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007734:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007738:	f107 030f 	add.w	r3, r7, #15
 800773c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007740:	2301      	movs	r3, #1
 8007742:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007746:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800774a:	2100      	movs	r1, #0
 800774c:	4618      	mov	r0, r3
 800774e:	f000 faa9 	bl	8007ca4 <hci_send_req>
 8007752:	4603      	mov	r3, r0
 8007754:	2b00      	cmp	r3, #0
 8007756:	da01      	bge.n	800775c <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 8007758:	23ff      	movs	r3, #255	; 0xff
 800775a:	e004      	b.n	8007766 <hci_le_set_default_phy+0xf0>
  return status;
 800775c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007760:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007764:	781b      	ldrb	r3, [r3, #0]
}
 8007766:	4618      	mov	r0, r3
 8007768:	f507 779a 	add.w	r7, r7, #308	; 0x134
 800776c:	46bd      	mov	sp, r7
 800776e:	bd90      	pop	{r4, r7, pc}

08007770 <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 8007770:	b580      	push	{r7, lr}
 8007772:	b084      	sub	sp, #16
 8007774:	af00      	add	r7, sp, #0
 8007776:	60f8      	str	r0, [r7, #12]
 8007778:	60b9      	str	r1, [r7, #8]
 800777a:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 800777c:	687a      	ldr	r2, [r7, #4]
 800777e:	68b9      	ldr	r1, [r7, #8]
 8007780:	68f8      	ldr	r0, [r7, #12]
 8007782:	f002 f8db 	bl	800993c <memcpy>
 8007786:	4603      	mov	r3, r0
}
 8007788:	4618      	mov	r0, r3
 800778a:	3710      	adds	r7, #16
 800778c:	46bd      	mov	sp, r7
 800778e:	bd80      	pop	{r7, pc}

08007790 <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b084      	sub	sp, #16
 8007794:	af00      	add	r7, sp, #0
 8007796:	60f8      	str	r0, [r7, #12]
 8007798:	60b9      	str	r1, [r7, #8]
 800779a:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 800779c:	687a      	ldr	r2, [r7, #4]
 800779e:	68b9      	ldr	r1, [r7, #8]
 80077a0:	68f8      	ldr	r0, [r7, #12]
 80077a2:	f002 f8d9 	bl	8009958 <memset>
 80077a6:	4603      	mov	r3, r0
}
 80077a8:	4618      	mov	r0, r3
 80077aa:	3710      	adds	r7, #16
 80077ac:	46bd      	mov	sp, r7
 80077ae:	bd80      	pop	{r7, pc}

080077b0 <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 80077b0:	b480      	push	{r7}
 80077b2:	af00      	add	r7, sp, #0
  return;
 80077b4:	bf00      	nop
}
 80077b6:	46bd      	mov	sp, r7
 80077b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077bc:	4770      	bx	lr

080077be <BLS_Init>:

__WEAK void BLS_Init( void )
{
 80077be:	b480      	push	{r7}
 80077c0:	af00      	add	r7, sp, #0
  return;
 80077c2:	bf00      	nop
}
 80077c4:	46bd      	mov	sp, r7
 80077c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ca:	4770      	bx	lr

080077cc <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 80077cc:	b480      	push	{r7}
 80077ce:	af00      	add	r7, sp, #0
  return;
 80077d0:	bf00      	nop
}
 80077d2:	46bd      	mov	sp, r7
 80077d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d8:	4770      	bx	lr

080077da <DIS_Init>:
__WEAK void DIS_Init( void )
{
 80077da:	b480      	push	{r7}
 80077dc:	af00      	add	r7, sp, #0
  return;
 80077de:	bf00      	nop
}
 80077e0:	46bd      	mov	sp, r7
 80077e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e6:	4770      	bx	lr

080077e8 <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 80077e8:	b480      	push	{r7}
 80077ea:	af00      	add	r7, sp, #0
  return;
 80077ec:	bf00      	nop
}
 80077ee:	46bd      	mov	sp, r7
 80077f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f4:	4770      	bx	lr

080077f6 <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 80077f6:	b480      	push	{r7}
 80077f8:	af00      	add	r7, sp, #0
  return;
 80077fa:	bf00      	nop
}
 80077fc:	46bd      	mov	sp, r7
 80077fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007802:	4770      	bx	lr

08007804 <HRS_Init>:
__WEAK void HRS_Init( void )
{
 8007804:	b480      	push	{r7}
 8007806:	af00      	add	r7, sp, #0
  return;
 8007808:	bf00      	nop
}
 800780a:	46bd      	mov	sp, r7
 800780c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007810:	4770      	bx	lr

08007812 <HTS_Init>:
__WEAK void HTS_Init( void )
{
 8007812:	b480      	push	{r7}
 8007814:	af00      	add	r7, sp, #0
  return;
 8007816:	bf00      	nop
}
 8007818:	46bd      	mov	sp, r7
 800781a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781e:	4770      	bx	lr

08007820 <IAS_Init>:
__WEAK void IAS_Init( void )
{
 8007820:	b480      	push	{r7}
 8007822:	af00      	add	r7, sp, #0
  return;
 8007824:	bf00      	nop
}
 8007826:	46bd      	mov	sp, r7
 8007828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782c:	4770      	bx	lr

0800782e <LLS_Init>:
__WEAK void LLS_Init( void )
{
 800782e:	b480      	push	{r7}
 8007830:	af00      	add	r7, sp, #0
  return;
 8007832:	bf00      	nop
}
 8007834:	46bd      	mov	sp, r7
 8007836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783a:	4770      	bx	lr

0800783c <TPS_Init>:
__WEAK void TPS_Init( void )
{
 800783c:	b480      	push	{r7}
 800783e:	af00      	add	r7, sp, #0
  return;
 8007840:	bf00      	nop
}
 8007842:	46bd      	mov	sp, r7
 8007844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007848:	4770      	bx	lr

0800784a <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 800784a:	b480      	push	{r7}
 800784c:	af00      	add	r7, sp, #0
  return;
 800784e:	bf00      	nop
}
 8007850:	46bd      	mov	sp, r7
 8007852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007856:	4770      	bx	lr

08007858 <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 8007858:	b480      	push	{r7}
 800785a:	af00      	add	r7, sp, #0
  return;
 800785c:	bf00      	nop
}
 800785e:	46bd      	mov	sp, r7
 8007860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007864:	4770      	bx	lr

08007866 <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 8007866:	b480      	push	{r7}
 8007868:	af00      	add	r7, sp, #0
  return;
 800786a:	bf00      	nop
}
 800786c:	46bd      	mov	sp, r7
 800786e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007872:	4770      	bx	lr

08007874 <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 8007874:	b480      	push	{r7}
 8007876:	af00      	add	r7, sp, #0
  return;
 8007878:	bf00      	nop
}
 800787a:	46bd      	mov	sp, r7
 800787c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007880:	4770      	bx	lr

08007882 <MESH_Init>:
__WEAK void MESH_Init( void )
{
 8007882:	b480      	push	{r7}
 8007884:	af00      	add	r7, sp, #0
  return;
 8007886:	bf00      	nop
}
 8007888:	46bd      	mov	sp, r7
 800788a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788e:	4770      	bx	lr

08007890 <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 8007890:	b480      	push	{r7}
 8007892:	af00      	add	r7, sp, #0
  return;
 8007894:	bf00      	nop
}
 8007896:	46bd      	mov	sp, r7
 8007898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789c:	4770      	bx	lr
	...

080078a0 <SVCCTL_Init>:
}

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 80078a0:	b580      	push	{r7, lr}
 80078a2:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 80078a4:	4b04      	ldr	r3, [pc, #16]	; (80078b8 <SVCCTL_Init+0x18>)
 80078a6:	2200      	movs	r2, #0
 80078a8:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 80078aa:	4b04      	ldr	r3, [pc, #16]	; (80078bc <SVCCTL_Init+0x1c>)
 80078ac:	2200      	movs	r2, #0
 80078ae:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 80078b0:	f000 f806 	bl	80078c0 <SVCCTL_SvcInit>

  return;
 80078b4:	bf00      	nop
}
 80078b6:	bd80      	pop	{r7, pc}
 80078b8:	20000910 	.word	0x20000910
 80078bc:	20000930 	.word	0x20000930

080078c0 <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	af00      	add	r7, sp, #0
  BAS_Init();
 80078c4:	f7ff ff74 	bl	80077b0 <BAS_Init>

  BLS_Init();
 80078c8:	f7ff ff79 	bl	80077be <BLS_Init>

  CRS_STM_Init();
 80078cc:	f7ff ff7e 	bl	80077cc <CRS_STM_Init>

  DIS_Init();
 80078d0:	f7ff ff83 	bl	80077da <DIS_Init>

  EDS_STM_Init();
 80078d4:	f7ff ff88 	bl	80077e8 <EDS_STM_Init>

  HIDS_Init();
 80078d8:	f7ff ff8d 	bl	80077f6 <HIDS_Init>

  HRS_Init();
 80078dc:	f7ff ff92 	bl	8007804 <HRS_Init>

  HTS_Init();
 80078e0:	f7ff ff97 	bl	8007812 <HTS_Init>

  IAS_Init();
 80078e4:	f7ff ff9c 	bl	8007820 <IAS_Init>

  LLS_Init();
 80078e8:	f7ff ffa1 	bl	800782e <LLS_Init>

  TPS_Init();
 80078ec:	f7ff ffa6 	bl	800783c <TPS_Init>

  MOTENV_STM_Init();
 80078f0:	f7ff ffab 	bl	800784a <MOTENV_STM_Init>

  P2PS_STM_Init();
 80078f4:	f7ff ffb0 	bl	8007858 <P2PS_STM_Init>

  ZDD_STM_Init();
 80078f8:	f7ff ffb5 	bl	8007866 <ZDD_STM_Init>

  OTAS_STM_Init();
 80078fc:	f7ff ffba 	bl	8007874 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 8007900:	f7ff ffc6 	bl	8007890 <BVOPUS_STM_Init>

  MESH_Init();
 8007904:	f7ff ffbd 	bl	8007882 <MESH_Init>

  SVCCTL_InitCustomSvc();
 8007908:	f001 faaa 	bl	8008e60 <SVCCTL_InitCustomSvc>
  
  return;
 800790c:	bf00      	nop
}
 800790e:	bd80      	pop	{r7, pc}

08007910 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 8007910:	b480      	push	{r7}
 8007912:	b083      	sub	sp, #12
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 8007918:	4b09      	ldr	r3, [pc, #36]	; (8007940 <SVCCTL_RegisterSvcHandler+0x30>)
 800791a:	7f1b      	ldrb	r3, [r3, #28]
 800791c:	4619      	mov	r1, r3
 800791e:	4a08      	ldr	r2, [pc, #32]	; (8007940 <SVCCTL_RegisterSvcHandler+0x30>)
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 8007926:	4b06      	ldr	r3, [pc, #24]	; (8007940 <SVCCTL_RegisterSvcHandler+0x30>)
 8007928:	7f1b      	ldrb	r3, [r3, #28]
 800792a:	3301      	adds	r3, #1
 800792c:	b2da      	uxtb	r2, r3
 800792e:	4b04      	ldr	r3, [pc, #16]	; (8007940 <SVCCTL_RegisterSvcHandler+0x30>)
 8007930:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 8007932:	bf00      	nop
}
 8007934:	370c      	adds	r7, #12
 8007936:	46bd      	mov	sp, r7
 8007938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793c:	4770      	bx	lr
 800793e:	bf00      	nop
 8007940:	20000910 	.word	0x20000910

08007944 <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 8007944:	b580      	push	{r7, lr}
 8007946:	b086      	sub	sp, #24
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	3301      	adds	r3, #1
 8007950:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 8007952:	2300      	movs	r3, #0
 8007954:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 8007956:	693b      	ldr	r3, [r7, #16]
 8007958:	781b      	ldrb	r3, [r3, #0]
 800795a:	2bff      	cmp	r3, #255	; 0xff
 800795c:	d125      	bne.n	80079aa <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 800795e:	693b      	ldr	r3, [r7, #16]
 8007960:	3302      	adds	r3, #2
 8007962:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	881b      	ldrh	r3, [r3, #0]
 8007968:	b29b      	uxth	r3, r3
 800796a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800796e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007972:	d118      	bne.n	80079a6 <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8007974:	2300      	movs	r3, #0
 8007976:	757b      	strb	r3, [r7, #21]
 8007978:	e00d      	b.n	8007996 <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 800797a:	7d7b      	ldrb	r3, [r7, #21]
 800797c:	4a1a      	ldr	r2, [pc, #104]	; (80079e8 <SVCCTL_UserEvtRx+0xa4>)
 800797e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007982:	6878      	ldr	r0, [r7, #4]
 8007984:	4798      	blx	r3
 8007986:	4603      	mov	r3, r0
 8007988:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 800798a:	7dfb      	ldrb	r3, [r7, #23]
 800798c:	2b00      	cmp	r3, #0
 800798e:	d108      	bne.n	80079a2 <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8007990:	7d7b      	ldrb	r3, [r7, #21]
 8007992:	3301      	adds	r3, #1
 8007994:	757b      	strb	r3, [r7, #21]
 8007996:	4b14      	ldr	r3, [pc, #80]	; (80079e8 <SVCCTL_UserEvtRx+0xa4>)
 8007998:	7f1b      	ldrb	r3, [r3, #28]
 800799a:	7d7a      	ldrb	r2, [r7, #21]
 800799c:	429a      	cmp	r2, r3
 800799e:	d3ec      	bcc.n	800797a <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 80079a0:	e002      	b.n	80079a8 <SVCCTL_UserEvtRx+0x64>
              break;
 80079a2:	bf00      	nop
          break;
 80079a4:	e000      	b.n	80079a8 <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 80079a6:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 80079a8:	e000      	b.n	80079ac <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 80079aa:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the applicaiton.
   */
  switch (event_notification_status)
 80079ac:	7dfb      	ldrb	r3, [r7, #23]
 80079ae:	2b02      	cmp	r3, #2
 80079b0:	d00f      	beq.n	80079d2 <SVCCTL_UserEvtRx+0x8e>
 80079b2:	2b02      	cmp	r3, #2
 80079b4:	dc10      	bgt.n	80079d8 <SVCCTL_UserEvtRx+0x94>
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d002      	beq.n	80079c0 <SVCCTL_UserEvtRx+0x7c>
 80079ba:	2b01      	cmp	r3, #1
 80079bc:	d006      	beq.n	80079cc <SVCCTL_UserEvtRx+0x88>
 80079be:	e00b      	b.n	80079d8 <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 80079c0:	6878      	ldr	r0, [r7, #4]
 80079c2:	f000 ff7b 	bl	80088bc <SVCCTL_App_Notification>
 80079c6:	4603      	mov	r3, r0
 80079c8:	75bb      	strb	r3, [r7, #22]
      break;
 80079ca:	e008      	b.n	80079de <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 80079cc:	2301      	movs	r3, #1
 80079ce:	75bb      	strb	r3, [r7, #22]
      break;
 80079d0:	e005      	b.n	80079de <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 80079d2:	2300      	movs	r3, #0
 80079d4:	75bb      	strb	r3, [r7, #22]
      break;
 80079d6:	e002      	b.n	80079de <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 80079d8:	2301      	movs	r3, #1
 80079da:	75bb      	strb	r3, [r7, #22]
      break;
 80079dc:	bf00      	nop
  }

  return (return_status);
 80079de:	7dbb      	ldrb	r3, [r7, #22]
}
 80079e0:	4618      	mov	r0, r3
 80079e2:	3718      	adds	r7, #24
 80079e4:	46bd      	mov	sp, r7
 80079e6:	bd80      	pop	{r7, pc}
 80079e8:	20000910 	.word	0x20000910

080079ec <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b088      	sub	sp, #32
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 80079f4:	f107 030c 	add.w	r3, r7, #12
 80079f8:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 8007a00:	69fb      	ldr	r3, [r7, #28]
 8007a02:	212e      	movs	r1, #46	; 0x2e
 8007a04:	f64f 4066 	movw	r0, #64614	; 0xfc66
 8007a08:	f000 fae2 	bl	8007fd0 <shci_send>
            p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8007a0c:	69fb      	ldr	r3, [r7, #28]
 8007a0e:	330b      	adds	r3, #11
 8007a10:	78db      	ldrb	r3, [r3, #3]
}
 8007a12:	4618      	mov	r0, r3
 8007a14:	3720      	adds	r7, #32
 8007a16:	46bd      	mov	sp, r7
 8007a18:	bd80      	pop	{r7, pc}

08007a1a <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 8007a1a:	b580      	push	{r7, lr}
 8007a1c:	b088      	sub	sp, #32
 8007a1e:	af00      	add	r7, sp, #0
 8007a20:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8007a22:	f107 030c 	add.w	r3, r7, #12
 8007a26:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 8007a2e:	69fb      	ldr	r3, [r7, #28]
 8007a30:	210f      	movs	r1, #15
 8007a32:	f64f 4068 	movw	r0, #64616	; 0xfc68
 8007a36:	f000 facb 	bl	8007fd0 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8007a3a:	69fb      	ldr	r3, [r7, #28]
 8007a3c:	330b      	adds	r3, #11
 8007a3e:	78db      	ldrb	r3, [r3, #3]
}
 8007a40:	4618      	mov	r0, r3
 8007a42:	3720      	adds	r7, #32
 8007a44:	46bd      	mov	sp, r7
 8007a46:	bd80      	pop	{r7, pc}

08007a48 <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b088      	sub	sp, #32
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8007a50:	f107 030c 	add.w	r3, r7, #12
 8007a54:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 8007a56:	69fb      	ldr	r3, [r7, #28]
 8007a58:	687a      	ldr	r2, [r7, #4]
 8007a5a:	2110      	movs	r1, #16
 8007a5c:	f64f 4075 	movw	r0, #64629	; 0xfc75
 8007a60:	f000 fab6 	bl	8007fd0 <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8007a64:	69fb      	ldr	r3, [r7, #28]
 8007a66:	330b      	adds	r3, #11
 8007a68:	78db      	ldrb	r3, [r3, #3]
}
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	3720      	adds	r7, #32
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	bd80      	pop	{r7, pc}
	...

08007a74 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 8007a74:	b480      	push	{r7}
 8007a76:	b08b      	sub	sp, #44	; 0x2c
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 8007a80:	2300      	movs	r3, #0
 8007a82:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 8007a84:	2300      	movs	r3, #0
 8007a86:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t wireless_firmware_memorySize = 0;
 8007a88:	2300      	movs	r3, #0
 8007a8a:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 8007a8c:	2300      	movs	r3, #0
 8007a8e:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 8007a90:	2300      	movs	r3, #0
 8007a92:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 8007a94:	2300      	movs	r3, #0
 8007a96:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 8007a98:	2300      	movs	r3, #0
 8007a9a:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 8007a9c:	4b4a      	ldr	r3, [pc, #296]	; (8007bc8 <SHCI_GetWirelessFwInfo+0x154>)
 8007a9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007aa0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8007aa4:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 8007aa6:	693b      	ldr	r3, [r7, #16]
 8007aa8:	009b      	lsls	r3, r3, #2
 8007aaa:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8007aae:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 8007ab6:	68bb      	ldr	r3, [r7, #8]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	4a44      	ldr	r2, [pc, #272]	; (8007bcc <SHCI_GetWirelessFwInfo+0x158>)
 8007abc:	4293      	cmp	r3, r2
 8007abe:	d10f      	bne.n	8007ae0 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 8007ac0:	68bb      	ldr	r3, [r7, #8]
 8007ac2:	695b      	ldr	r3, [r3, #20]
 8007ac4:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 8007ac6:	68bb      	ldr	r3, [r7, #8]
 8007ac8:	699b      	ldr	r3, [r3, #24]
 8007aca:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 8007acc:	68bb      	ldr	r3, [r7, #8]
 8007ace:	69db      	ldr	r3, [r3, #28]
 8007ad0:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 8007ad2:	68bb      	ldr	r3, [r7, #8]
 8007ad4:	68db      	ldr	r3, [r3, #12]
 8007ad6:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 8007ad8:	68bb      	ldr	r3, [r7, #8]
 8007ada:	691b      	ldr	r3, [r3, #16]
 8007adc:	617b      	str	r3, [r7, #20]
 8007ade:	e01a      	b.n	8007b16 <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 8007ae0:	693b      	ldr	r3, [r7, #16]
 8007ae2:	009b      	lsls	r3, r3, #2
 8007ae4:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8007ae8:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8007aec:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	691b      	ldr	r3, [r3, #16]
 8007af4:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	695b      	ldr	r3, [r3, #20]
 8007afc:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	699b      	ldr	r3, [r3, #24]
 8007b04:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	685b      	ldr	r3, [r3, #4]
 8007b0c:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	689b      	ldr	r3, [r3, #8]
 8007b14:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8007b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b18:	0e1b      	lsrs	r3, r3, #24
 8007b1a:	b2da      	uxtb	r2, r3
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8007b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b22:	0c1b      	lsrs	r3, r3, #16
 8007b24:	b2da      	uxtb	r2, r3
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8007b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b2c:	0a1b      	lsrs	r3, r3, #8
 8007b2e:	b2da      	uxtb	r2, r3
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 8007b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b36:	091b      	lsrs	r3, r3, #4
 8007b38:	b2db      	uxtb	r3, r3
 8007b3a:	f003 030f 	and.w	r3, r3, #15
 8007b3e:	b2da      	uxtb	r2, r3
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 8007b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b46:	b2db      	uxtb	r3, r3
 8007b48:	f003 030f 	and.w	r3, r3, #15
 8007b4c:	b2da      	uxtb	r2, r3
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8007b52:	6a3b      	ldr	r3, [r7, #32]
 8007b54:	0e1b      	lsrs	r3, r3, #24
 8007b56:	b2da      	uxtb	r2, r3
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8007b5c:	6a3b      	ldr	r3, [r7, #32]
 8007b5e:	0c1b      	lsrs	r3, r3, #16
 8007b60:	b2da      	uxtb	r2, r3
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 8007b66:	6a3b      	ldr	r3, [r7, #32]
 8007b68:	0a1b      	lsrs	r3, r3, #8
 8007b6a:	b2da      	uxtb	r2, r3
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8007b70:	6a3b      	ldr	r3, [r7, #32]
 8007b72:	b2da      	uxtb	r2, r3
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 8007b78:	69fb      	ldr	r3, [r7, #28]
 8007b7a:	b2da      	uxtb	r2, r3
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8007b80:	69bb      	ldr	r3, [r7, #24]
 8007b82:	0e1b      	lsrs	r3, r3, #24
 8007b84:	b2da      	uxtb	r2, r3
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8007b8a:	69bb      	ldr	r3, [r7, #24]
 8007b8c:	0c1b      	lsrs	r3, r3, #16
 8007b8e:	b2da      	uxtb	r2, r3
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8007b94:	69bb      	ldr	r3, [r7, #24]
 8007b96:	0a1b      	lsrs	r3, r3, #8
 8007b98:	b2da      	uxtb	r2, r3
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8007b9e:	697b      	ldr	r3, [r7, #20]
 8007ba0:	0e1b      	lsrs	r3, r3, #24
 8007ba2:	b2da      	uxtb	r2, r3
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8007ba8:	697b      	ldr	r3, [r7, #20]
 8007baa:	0c1b      	lsrs	r3, r3, #16
 8007bac:	b2da      	uxtb	r2, r3
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8007bb2:	697b      	ldr	r3, [r7, #20]
 8007bb4:	b2da      	uxtb	r2, r3
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 8007bba:	2300      	movs	r3, #0
}
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	372c      	adds	r7, #44	; 0x2c
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc6:	4770      	bx	lr
 8007bc8:	58004000 	.word	0x58004000
 8007bcc:	a94656b9 	.word	0xa94656b9

08007bd0 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b082      	sub	sp, #8
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
 8007bd8:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8007bda:	683b      	ldr	r3, [r7, #0]
 8007bdc:	685b      	ldr	r3, [r3, #4]
 8007bde:	4a08      	ldr	r2, [pc, #32]	; (8007c00 <hci_init+0x30>)
 8007be0:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 8007be2:	4a08      	ldr	r2, [pc, #32]	; (8007c04 <hci_init+0x34>)
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 8007be8:	4806      	ldr	r0, [pc, #24]	; (8007c04 <hci_init+0x34>)
 8007bea:	f000 f973 	bl	8007ed4 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8007bee:	683b      	ldr	r3, [r7, #0]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	f000 f8d4 	bl	8007da0 <TlInit>

  return;
 8007bf8:	bf00      	nop
}
 8007bfa:	3708      	adds	r7, #8
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	bd80      	pop	{r7, pc}
 8007c00:	20000b98 	.word	0x20000b98
 8007c04:	20000b70 	.word	0x20000b70

08007c08 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b084      	sub	sp, #16
 8007c0c:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8007c0e:	4822      	ldr	r0, [pc, #136]	; (8007c98 <hci_user_evt_proc+0x90>)
 8007c10:	f000 fd28 	bl	8008664 <LST_is_empty>
 8007c14:	4603      	mov	r3, r0
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d12b      	bne.n	8007c72 <hci_user_evt_proc+0x6a>
 8007c1a:	4b20      	ldr	r3, [pc, #128]	; (8007c9c <hci_user_evt_proc+0x94>)
 8007c1c:	781b      	ldrb	r3, [r3, #0]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d027      	beq.n	8007c72 <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8007c22:	f107 030c 	add.w	r3, r7, #12
 8007c26:	4619      	mov	r1, r3
 8007c28:	481b      	ldr	r0, [pc, #108]	; (8007c98 <hci_user_evt_proc+0x90>)
 8007c2a:	f000 fdaa 	bl	8008782 <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 8007c2e:	4b1c      	ldr	r3, [pc, #112]	; (8007ca0 <hci_user_evt_proc+0x98>)
 8007c30:	69db      	ldr	r3, [r3, #28]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d00c      	beq.n	8007c50 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 8007c3a:	2301      	movs	r3, #1
 8007c3c:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 8007c3e:	4b18      	ldr	r3, [pc, #96]	; (8007ca0 <hci_user_evt_proc+0x98>)
 8007c40:	69db      	ldr	r3, [r3, #28]
 8007c42:	1d3a      	adds	r2, r7, #4
 8007c44:	4610      	mov	r0, r2
 8007c46:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 8007c48:	793a      	ldrb	r2, [r7, #4]
 8007c4a:	4b14      	ldr	r3, [pc, #80]	; (8007c9c <hci_user_evt_proc+0x94>)
 8007c4c:	701a      	strb	r2, [r3, #0]
 8007c4e:	e002      	b.n	8007c56 <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8007c50:	4b12      	ldr	r3, [pc, #72]	; (8007c9c <hci_user_evt_proc+0x94>)
 8007c52:	2201      	movs	r2, #1
 8007c54:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 8007c56:	4b11      	ldr	r3, [pc, #68]	; (8007c9c <hci_user_evt_proc+0x94>)
 8007c58:	781b      	ldrb	r3, [r3, #0]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d004      	beq.n	8007c68 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	4618      	mov	r0, r3
 8007c62:	f000 fc03 	bl	800846c <TL_MM_EvtDone>
 8007c66:	e004      	b.n	8007c72 <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	4619      	mov	r1, r3
 8007c6c:	480a      	ldr	r0, [pc, #40]	; (8007c98 <hci_user_evt_proc+0x90>)
 8007c6e:	f000 fd1b 	bl	80086a8 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8007c72:	4809      	ldr	r0, [pc, #36]	; (8007c98 <hci_user_evt_proc+0x90>)
 8007c74:	f000 fcf6 	bl	8008664 <LST_is_empty>
 8007c78:	4603      	mov	r3, r0
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d107      	bne.n	8007c8e <hci_user_evt_proc+0x86>
 8007c7e:	4b07      	ldr	r3, [pc, #28]	; (8007c9c <hci_user_evt_proc+0x94>)
 8007c80:	781b      	ldrb	r3, [r3, #0]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d003      	beq.n	8007c8e <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 8007c86:	4804      	ldr	r0, [pc, #16]	; (8007c98 <hci_user_evt_proc+0x90>)
 8007c88:	f001 f830 	bl	8008cec <hci_notify_asynch_evt>
  }


  return;
 8007c8c:	bf00      	nop
 8007c8e:	bf00      	nop
}
 8007c90:	3710      	adds	r7, #16
 8007c92:	46bd      	mov	sp, r7
 8007c94:	bd80      	pop	{r7, pc}
 8007c96:	bf00      	nop
 8007c98:	20000938 	.word	0x20000938
 8007c9c:	20000944 	.word	0x20000944
 8007ca0:	20000b70 	.word	0x20000b70

08007ca4 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b088      	sub	sp, #32
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
 8007cac:	460b      	mov	r3, r1
 8007cae:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 8007cb0:	2000      	movs	r0, #0
 8007cb2:	f000 f8cb 	bl	8007e4c <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	885b      	ldrh	r3, [r3, #2]
 8007cbe:	b21b      	sxth	r3, r3
 8007cc0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007cc4:	b21a      	sxth	r2, r3
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	881b      	ldrh	r3, [r3, #0]
 8007cca:	029b      	lsls	r3, r3, #10
 8007ccc:	b21b      	sxth	r3, r3
 8007cce:	4313      	orrs	r3, r2
 8007cd0:	b21b      	sxth	r3, r3
 8007cd2:	83bb      	strh	r3, [r7, #28]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	68db      	ldr	r3, [r3, #12]
 8007cd8:	b2d9      	uxtb	r1, r3
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	689a      	ldr	r2, [r3, #8]
 8007cde:	8bbb      	ldrh	r3, [r7, #28]
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	f000 f88d 	bl	8007e00 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 8007ce6:	e04e      	b.n	8007d86 <hci_send_req+0xe2>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 8007ce8:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8007cec:	f001 f815 	bl	8008d1a <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8007cf0:	e043      	b.n	8007d7a <hci_send_req+0xd6>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 8007cf2:	f107 030c 	add.w	r3, r7, #12
 8007cf6:	4619      	mov	r1, r3
 8007cf8:	4828      	ldr	r0, [pc, #160]	; (8007d9c <hci_send_req+0xf8>)
 8007cfa:	f000 fd42 	bl	8008782 <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	7a5b      	ldrb	r3, [r3, #9]
 8007d02:	2b0f      	cmp	r3, #15
 8007d04:	d114      	bne.n	8007d30 <hci_send_req+0x8c>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	330b      	adds	r3, #11
 8007d0a:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 8007d0c:	693b      	ldr	r3, [r7, #16]
 8007d0e:	885b      	ldrh	r3, [r3, #2]
 8007d10:	b29b      	uxth	r3, r3
 8007d12:	8bba      	ldrh	r2, [r7, #28]
 8007d14:	429a      	cmp	r2, r3
 8007d16:	d104      	bne.n	8007d22 <hci_send_req+0x7e>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	691b      	ldr	r3, [r3, #16]
 8007d1c:	693a      	ldr	r2, [r7, #16]
 8007d1e:	7812      	ldrb	r2, [r2, #0]
 8007d20:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 8007d22:	693b      	ldr	r3, [r7, #16]
 8007d24:	785b      	ldrb	r3, [r3, #1]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d027      	beq.n	8007d7a <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8007d2a:	2301      	movs	r3, #1
 8007d2c:	77fb      	strb	r3, [r7, #31]
 8007d2e:	e024      	b.n	8007d7a <hci_send_req+0xd6>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	330b      	adds	r3, #11
 8007d34:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 8007d36:	69bb      	ldr	r3, [r7, #24]
 8007d38:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8007d3c:	b29b      	uxth	r3, r3
 8007d3e:	8bba      	ldrh	r2, [r7, #28]
 8007d40:	429a      	cmp	r2, r3
 8007d42:	d114      	bne.n	8007d6e <hci_send_req+0xca>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	7a9b      	ldrb	r3, [r3, #10]
 8007d48:	3b03      	subs	r3, #3
 8007d4a:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	695a      	ldr	r2, [r3, #20]
 8007d50:	7dfb      	ldrb	r3, [r7, #23]
 8007d52:	429a      	cmp	r2, r3
 8007d54:	bfa8      	it	ge
 8007d56:	461a      	movge	r2, r3
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	6918      	ldr	r0, [r3, #16]
 8007d60:	69bb      	ldr	r3, [r7, #24]
 8007d62:	1cd9      	adds	r1, r3, #3
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	695b      	ldr	r3, [r3, #20]
 8007d68:	461a      	mov	r2, r3
 8007d6a:	f001 fde7 	bl	800993c <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 8007d6e:	69bb      	ldr	r3, [r7, #24]
 8007d70:	781b      	ldrb	r3, [r3, #0]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d001      	beq.n	8007d7a <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8007d76:	2301      	movs	r3, #1
 8007d78:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8007d7a:	4808      	ldr	r0, [pc, #32]	; (8007d9c <hci_send_req+0xf8>)
 8007d7c:	f000 fc72 	bl	8008664 <LST_is_empty>
 8007d80:	4603      	mov	r3, r0
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d0b5      	beq.n	8007cf2 <hci_send_req+0x4e>
  while(local_cmd_status == HCI_TL_CmdBusy)
 8007d86:	7ffb      	ldrb	r3, [r7, #31]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d0ad      	beq.n	8007ce8 <hci_send_req+0x44>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 8007d8c:	2001      	movs	r0, #1
 8007d8e:	f000 f85d 	bl	8007e4c <NotifyCmdStatus>

  return 0;
 8007d92:	2300      	movs	r3, #0
}
 8007d94:	4618      	mov	r0, r3
 8007d96:	3720      	adds	r7, #32
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	bd80      	pop	{r7, pc}
 8007d9c:	20000b90 	.word	0x20000b90

08007da0 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8007da0:	b580      	push	{r7, lr}
 8007da2:	b086      	sub	sp, #24
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 8007da8:	480f      	ldr	r0, [pc, #60]	; (8007de8 <TlInit+0x48>)
 8007daa:	f000 fc4b 	bl	8008644 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 8007dae:	4a0f      	ldr	r2, [pc, #60]	; (8007dec <TlInit+0x4c>)
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 8007db4:	480e      	ldr	r0, [pc, #56]	; (8007df0 <TlInit+0x50>)
 8007db6:	f000 fc45 	bl	8008644 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8007dba:	4b0e      	ldr	r3, [pc, #56]	; (8007df4 <TlInit+0x54>)
 8007dbc:	2201      	movs	r2, #1
 8007dbe:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 8007dc0:	4b0d      	ldr	r3, [pc, #52]	; (8007df8 <TlInit+0x58>)
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d00a      	beq.n	8007dde <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 8007dcc:	4b0b      	ldr	r3, [pc, #44]	; (8007dfc <TlInit+0x5c>)
 8007dce:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 8007dd0:	4b09      	ldr	r3, [pc, #36]	; (8007df8 <TlInit+0x58>)
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	f107 0208 	add.w	r2, r7, #8
 8007dd8:	4610      	mov	r0, r2
 8007dda:	4798      	blx	r3
  }

  return;
 8007ddc:	bf00      	nop
 8007dde:	bf00      	nop
}
 8007de0:	3718      	adds	r7, #24
 8007de2:	46bd      	mov	sp, r7
 8007de4:	bd80      	pop	{r7, pc}
 8007de6:	bf00      	nop
 8007de8:	20000b90 	.word	0x20000b90
 8007dec:	20000940 	.word	0x20000940
 8007df0:	20000938 	.word	0x20000938
 8007df4:	20000944 	.word	0x20000944
 8007df8:	20000b70 	.word	0x20000b70
 8007dfc:	08007e8d 	.word	0x08007e8d

08007e00 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 8007e00:	b580      	push	{r7, lr}
 8007e02:	b082      	sub	sp, #8
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	4603      	mov	r3, r0
 8007e08:	603a      	str	r2, [r7, #0]
 8007e0a:	80fb      	strh	r3, [r7, #6]
 8007e0c:	460b      	mov	r3, r1
 8007e0e:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 8007e10:	4b0c      	ldr	r3, [pc, #48]	; (8007e44 <SendCmd+0x44>)
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	88fa      	ldrh	r2, [r7, #6]
 8007e16:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 8007e1a:	4b0a      	ldr	r3, [pc, #40]	; (8007e44 <SendCmd+0x44>)
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	797a      	ldrb	r2, [r7, #5]
 8007e20:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 8007e22:	4b08      	ldr	r3, [pc, #32]	; (8007e44 <SendCmd+0x44>)
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	330c      	adds	r3, #12
 8007e28:	797a      	ldrb	r2, [r7, #5]
 8007e2a:	6839      	ldr	r1, [r7, #0]
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	f001 fd85 	bl	800993c <memcpy>

  hciContext.io.Send(0,0);
 8007e32:	4b05      	ldr	r3, [pc, #20]	; (8007e48 <SendCmd+0x48>)
 8007e34:	691b      	ldr	r3, [r3, #16]
 8007e36:	2100      	movs	r1, #0
 8007e38:	2000      	movs	r0, #0
 8007e3a:	4798      	blx	r3

  return;
 8007e3c:	bf00      	nop
}
 8007e3e:	3708      	adds	r7, #8
 8007e40:	46bd      	mov	sp, r7
 8007e42:	bd80      	pop	{r7, pc}
 8007e44:	20000940 	.word	0x20000940
 8007e48:	20000b70 	.word	0x20000b70

08007e4c <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	b082      	sub	sp, #8
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	4603      	mov	r3, r0
 8007e54:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 8007e56:	79fb      	ldrb	r3, [r7, #7]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d108      	bne.n	8007e6e <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 8007e5c:	4b0a      	ldr	r3, [pc, #40]	; (8007e88 <NotifyCmdStatus+0x3c>)
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d00d      	beq.n	8007e80 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 8007e64:	4b08      	ldr	r3, [pc, #32]	; (8007e88 <NotifyCmdStatus+0x3c>)
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	2000      	movs	r0, #0
 8007e6a:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 8007e6c:	e008      	b.n	8007e80 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 8007e6e:	4b06      	ldr	r3, [pc, #24]	; (8007e88 <NotifyCmdStatus+0x3c>)
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d004      	beq.n	8007e80 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 8007e76:	4b04      	ldr	r3, [pc, #16]	; (8007e88 <NotifyCmdStatus+0x3c>)
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	2001      	movs	r0, #1
 8007e7c:	4798      	blx	r3
  return;
 8007e7e:	bf00      	nop
 8007e80:	bf00      	nop
}
 8007e82:	3708      	adds	r7, #8
 8007e84:	46bd      	mov	sp, r7
 8007e86:	bd80      	pop	{r7, pc}
 8007e88:	20000b98 	.word	0x20000b98

08007e8c <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b082      	sub	sp, #8
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	7a5b      	ldrb	r3, [r3, #9]
 8007e98:	2b0f      	cmp	r3, #15
 8007e9a:	d003      	beq.n	8007ea4 <TlEvtReceived+0x18>
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	7a5b      	ldrb	r3, [r3, #9]
 8007ea0:	2b0e      	cmp	r3, #14
 8007ea2:	d107      	bne.n	8007eb4 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 8007ea4:	6879      	ldr	r1, [r7, #4]
 8007ea6:	4809      	ldr	r0, [pc, #36]	; (8007ecc <TlEvtReceived+0x40>)
 8007ea8:	f000 fc24 	bl	80086f4 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 8007eac:	2000      	movs	r0, #0
 8007eae:	f000 ff29 	bl	8008d04 <hci_cmd_resp_release>
 8007eb2:	e006      	b.n	8007ec2 <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 8007eb4:	6879      	ldr	r1, [r7, #4]
 8007eb6:	4806      	ldr	r0, [pc, #24]	; (8007ed0 <TlEvtReceived+0x44>)
 8007eb8:	f000 fc1c 	bl	80086f4 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8007ebc:	4804      	ldr	r0, [pc, #16]	; (8007ed0 <TlEvtReceived+0x44>)
 8007ebe:	f000 ff15 	bl	8008cec <hci_notify_asynch_evt>
  }

  return;
 8007ec2:	bf00      	nop
}
 8007ec4:	3708      	adds	r7, #8
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	bd80      	pop	{r7, pc}
 8007eca:	bf00      	nop
 8007ecc:	20000b90 	.word	0x20000b90
 8007ed0:	20000938 	.word	0x20000938

08007ed4 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 8007ed4:	b480      	push	{r7}
 8007ed6:	b083      	sub	sp, #12
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	4a05      	ldr	r2, [pc, #20]	; (8007ef4 <hci_register_io_bus+0x20>)
 8007ee0:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	4a04      	ldr	r2, [pc, #16]	; (8007ef8 <hci_register_io_bus+0x24>)
 8007ee6:	611a      	str	r2, [r3, #16]

  return;
 8007ee8:	bf00      	nop
}
 8007eea:	370c      	adds	r7, #12
 8007eec:	46bd      	mov	sp, r7
 8007eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef2:	4770      	bx	lr
 8007ef4:	080081e5 	.word	0x080081e5
 8007ef8:	0800824d 	.word	0x0800824d

08007efc <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8007efc:	b580      	push	{r7, lr}
 8007efe:	b082      	sub	sp, #8
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
 8007f04:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8007f06:	683b      	ldr	r3, [r7, #0]
 8007f08:	685b      	ldr	r3, [r3, #4]
 8007f0a:	4a08      	ldr	r2, [pc, #32]	; (8007f2c <shci_init+0x30>)
 8007f0c:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 8007f0e:	4a08      	ldr	r2, [pc, #32]	; (8007f30 <shci_init+0x34>)
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 8007f14:	4806      	ldr	r0, [pc, #24]	; (8007f30 <shci_init+0x34>)
 8007f16:	f000 f911 	bl	800813c <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8007f1a:	683b      	ldr	r3, [r7, #0]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	4618      	mov	r0, r3
 8007f20:	f000 f894 	bl	800804c <TlInit>

  return;
 8007f24:	bf00      	nop
}
 8007f26:	3708      	adds	r7, #8
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	bd80      	pop	{r7, pc}
 8007f2c:	20000bbc 	.word	0x20000bbc
 8007f30:	20000b9c 	.word	0x20000b9c

08007f34 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 8007f34:	b580      	push	{r7, lr}
 8007f36:	b084      	sub	sp, #16
 8007f38:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8007f3a:	4822      	ldr	r0, [pc, #136]	; (8007fc4 <shci_user_evt_proc+0x90>)
 8007f3c:	f000 fb92 	bl	8008664 <LST_is_empty>
 8007f40:	4603      	mov	r3, r0
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d12b      	bne.n	8007f9e <shci_user_evt_proc+0x6a>
 8007f46:	4b20      	ldr	r3, [pc, #128]	; (8007fc8 <shci_user_evt_proc+0x94>)
 8007f48:	781b      	ldrb	r3, [r3, #0]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d027      	beq.n	8007f9e <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8007f4e:	f107 030c 	add.w	r3, r7, #12
 8007f52:	4619      	mov	r1, r3
 8007f54:	481b      	ldr	r0, [pc, #108]	; (8007fc4 <shci_user_evt_proc+0x90>)
 8007f56:	f000 fc14 	bl	8008782 <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 8007f5a:	4b1c      	ldr	r3, [pc, #112]	; (8007fcc <shci_user_evt_proc+0x98>)
 8007f5c:	69db      	ldr	r3, [r3, #28]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d00c      	beq.n	8007f7c <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 8007f66:	2301      	movs	r3, #1
 8007f68:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 8007f6a:	4b18      	ldr	r3, [pc, #96]	; (8007fcc <shci_user_evt_proc+0x98>)
 8007f6c:	69db      	ldr	r3, [r3, #28]
 8007f6e:	1d3a      	adds	r2, r7, #4
 8007f70:	4610      	mov	r0, r2
 8007f72:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 8007f74:	793a      	ldrb	r2, [r7, #4]
 8007f76:	4b14      	ldr	r3, [pc, #80]	; (8007fc8 <shci_user_evt_proc+0x94>)
 8007f78:	701a      	strb	r2, [r3, #0]
 8007f7a:	e002      	b.n	8007f82 <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8007f7c:	4b12      	ldr	r3, [pc, #72]	; (8007fc8 <shci_user_evt_proc+0x94>)
 8007f7e:	2201      	movs	r2, #1
 8007f80:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 8007f82:	4b11      	ldr	r3, [pc, #68]	; (8007fc8 <shci_user_evt_proc+0x94>)
 8007f84:	781b      	ldrb	r3, [r3, #0]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d004      	beq.n	8007f94 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	f000 fa6d 	bl	800846c <TL_MM_EvtDone>
 8007f92:	e004      	b.n	8007f9e <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	4619      	mov	r1, r3
 8007f98:	480a      	ldr	r0, [pc, #40]	; (8007fc4 <shci_user_evt_proc+0x90>)
 8007f9a:	f000 fb85 	bl	80086a8 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8007f9e:	4809      	ldr	r0, [pc, #36]	; (8007fc4 <shci_user_evt_proc+0x90>)
 8007fa0:	f000 fb60 	bl	8008664 <LST_is_empty>
 8007fa4:	4603      	mov	r3, r0
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d107      	bne.n	8007fba <shci_user_evt_proc+0x86>
 8007faa:	4b07      	ldr	r3, [pc, #28]	; (8007fc8 <shci_user_evt_proc+0x94>)
 8007fac:	781b      	ldrb	r3, [r3, #0]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d003      	beq.n	8007fba <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 8007fb2:	4804      	ldr	r0, [pc, #16]	; (8007fc4 <shci_user_evt_proc+0x90>)
 8007fb4:	f7f8 ff42 	bl	8000e3c <shci_notify_asynch_evt>
  }


  return;
 8007fb8:	bf00      	nop
 8007fba:	bf00      	nop
}
 8007fbc:	3710      	adds	r7, #16
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	bd80      	pop	{r7, pc}
 8007fc2:	bf00      	nop
 8007fc4:	20000948 	.word	0x20000948
 8007fc8:	20000958 	.word	0x20000958
 8007fcc:	20000b9c 	.word	0x20000b9c

08007fd0 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b084      	sub	sp, #16
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	60ba      	str	r2, [r7, #8]
 8007fd8:	607b      	str	r3, [r7, #4]
 8007fda:	4603      	mov	r3, r0
 8007fdc:	81fb      	strh	r3, [r7, #14]
 8007fde:	460b      	mov	r3, r1
 8007fe0:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 8007fe2:	2000      	movs	r0, #0
 8007fe4:	f000 f864 	bl	80080b0 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 8007fe8:	4b16      	ldr	r3, [pc, #88]	; (8008044 <shci_send+0x74>)
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	89fa      	ldrh	r2, [r7, #14]
 8007fee:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 8007ff2:	4b14      	ldr	r3, [pc, #80]	; (8008044 <shci_send+0x74>)
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	7b7a      	ldrb	r2, [r7, #13]
 8007ff8:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 8007ffa:	4b12      	ldr	r3, [pc, #72]	; (8008044 <shci_send+0x74>)
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	330c      	adds	r3, #12
 8008000:	7b7a      	ldrb	r2, [r7, #13]
 8008002:	68b9      	ldr	r1, [r7, #8]
 8008004:	4618      	mov	r0, r3
 8008006:	f001 fc99 	bl	800993c <memcpy>

  shciContext.io.Send(0,0);
 800800a:	4b0f      	ldr	r3, [pc, #60]	; (8008048 <shci_send+0x78>)
 800800c:	691b      	ldr	r3, [r3, #16]
 800800e:	2100      	movs	r1, #0
 8008010:	2000      	movs	r0, #0
 8008012:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 8008014:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8008018:	f7f8 ff27 	bl	8000e6a <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	f103 0008 	add.w	r0, r3, #8
 8008022:	4b08      	ldr	r3, [pc, #32]	; (8008044 <shci_send+0x74>)
 8008024:	6819      	ldr	r1, [r3, #0]
 8008026:	4b07      	ldr	r3, [pc, #28]	; (8008044 <shci_send+0x74>)
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	789b      	ldrb	r3, [r3, #2]
 800802c:	3303      	adds	r3, #3
 800802e:	461a      	mov	r2, r3
 8008030:	f001 fc84 	bl	800993c <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8008034:	2001      	movs	r0, #1
 8008036:	f000 f83b 	bl	80080b0 <Cmd_SetStatus>

  return;
 800803a:	bf00      	nop
}
 800803c:	3710      	adds	r7, #16
 800803e:	46bd      	mov	sp, r7
 8008040:	bd80      	pop	{r7, pc}
 8008042:	bf00      	nop
 8008044:	20000954 	.word	0x20000954
 8008048:	20000b9c 	.word	0x20000b9c

0800804c <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800804c:	b580      	push	{r7, lr}
 800804e:	b086      	sub	sp, #24
 8008050:	af00      	add	r7, sp, #0
 8008052:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 8008054:	4a10      	ldr	r2, [pc, #64]	; (8008098 <TlInit+0x4c>)
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 800805a:	4810      	ldr	r0, [pc, #64]	; (800809c <TlInit+0x50>)
 800805c:	f000 faf2 	bl	8008644 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8008060:	2001      	movs	r0, #1
 8008062:	f000 f825 	bl	80080b0 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8008066:	4b0e      	ldr	r3, [pc, #56]	; (80080a0 <TlInit+0x54>)
 8008068:	2201      	movs	r2, #1
 800806a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 800806c:	4b0d      	ldr	r3, [pc, #52]	; (80080a4 <TlInit+0x58>)
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	2b00      	cmp	r3, #0
 8008072:	d00c      	beq.n	800808e <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 8008078:	4b0b      	ldr	r3, [pc, #44]	; (80080a8 <TlInit+0x5c>)
 800807a:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 800807c:	4b0b      	ldr	r3, [pc, #44]	; (80080ac <TlInit+0x60>)
 800807e:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 8008080:	4b08      	ldr	r3, [pc, #32]	; (80080a4 <TlInit+0x58>)
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	f107 020c 	add.w	r2, r7, #12
 8008088:	4610      	mov	r0, r2
 800808a:	4798      	blx	r3
  }

  return;
 800808c:	bf00      	nop
 800808e:	bf00      	nop
}
 8008090:	3718      	adds	r7, #24
 8008092:	46bd      	mov	sp, r7
 8008094:	bd80      	pop	{r7, pc}
 8008096:	bf00      	nop
 8008098:	20000954 	.word	0x20000954
 800809c:	20000948 	.word	0x20000948
 80080a0:	20000958 	.word	0x20000958
 80080a4:	20000b9c 	.word	0x20000b9c
 80080a8:	08008101 	.word	0x08008101
 80080ac:	08008119 	.word	0x08008119

080080b0 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 80080b0:	b580      	push	{r7, lr}
 80080b2:	b082      	sub	sp, #8
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	4603      	mov	r3, r0
 80080b8:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 80080ba:	79fb      	ldrb	r3, [r7, #7]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d10b      	bne.n	80080d8 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 80080c0:	4b0d      	ldr	r3, [pc, #52]	; (80080f8 <Cmd_SetStatus+0x48>)
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d003      	beq.n	80080d0 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 80080c8:	4b0b      	ldr	r3, [pc, #44]	; (80080f8 <Cmd_SetStatus+0x48>)
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	2000      	movs	r0, #0
 80080ce:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 80080d0:	4b0a      	ldr	r3, [pc, #40]	; (80080fc <Cmd_SetStatus+0x4c>)
 80080d2:	2200      	movs	r2, #0
 80080d4:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 80080d6:	e00b      	b.n	80080f0 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 80080d8:	4b08      	ldr	r3, [pc, #32]	; (80080fc <Cmd_SetStatus+0x4c>)
 80080da:	2201      	movs	r2, #1
 80080dc:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 80080de:	4b06      	ldr	r3, [pc, #24]	; (80080f8 <Cmd_SetStatus+0x48>)
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d004      	beq.n	80080f0 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 80080e6:	4b04      	ldr	r3, [pc, #16]	; (80080f8 <Cmd_SetStatus+0x48>)
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	2001      	movs	r0, #1
 80080ec:	4798      	blx	r3
  return;
 80080ee:	bf00      	nop
 80080f0:	bf00      	nop
}
 80080f2:	3708      	adds	r7, #8
 80080f4:	46bd      	mov	sp, r7
 80080f6:	bd80      	pop	{r7, pc}
 80080f8:	20000bbc 	.word	0x20000bbc
 80080fc:	20000950 	.word	0x20000950

08008100 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 8008100:	b580      	push	{r7, lr}
 8008102:	b082      	sub	sp, #8
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 8008108:	2000      	movs	r0, #0
 800810a:	f7f8 fea3 	bl	8000e54 <shci_cmd_resp_release>

  return;
 800810e:	bf00      	nop
}
 8008110:	3708      	adds	r7, #8
 8008112:	46bd      	mov	sp, r7
 8008114:	bd80      	pop	{r7, pc}
	...

08008118 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 8008118:	b580      	push	{r7, lr}
 800811a:	b082      	sub	sp, #8
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 8008120:	6879      	ldr	r1, [r7, #4]
 8008122:	4805      	ldr	r0, [pc, #20]	; (8008138 <TlUserEvtReceived+0x20>)
 8008124:	f000 fae6 	bl	80086f4 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8008128:	4803      	ldr	r0, [pc, #12]	; (8008138 <TlUserEvtReceived+0x20>)
 800812a:	f7f8 fe87 	bl	8000e3c <shci_notify_asynch_evt>

  return;
 800812e:	bf00      	nop
}
 8008130:	3708      	adds	r7, #8
 8008132:	46bd      	mov	sp, r7
 8008134:	bd80      	pop	{r7, pc}
 8008136:	bf00      	nop
 8008138:	20000948 	.word	0x20000948

0800813c <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 800813c:	b480      	push	{r7}
 800813e:	b083      	sub	sp, #12
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	4a05      	ldr	r2, [pc, #20]	; (800815c <shci_register_io_bus+0x20>)
 8008148:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	4a04      	ldr	r2, [pc, #16]	; (8008160 <shci_register_io_bus+0x24>)
 800814e:	611a      	str	r2, [r3, #16]

  return;
 8008150:	bf00      	nop
}
 8008152:	370c      	adds	r7, #12
 8008154:	46bd      	mov	sp, r7
 8008156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815a:	4770      	bx	lr
 800815c:	080082f9 	.word	0x080082f9
 8008160:	0800834d 	.word	0x0800834d

08008164 <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 8008164:	b580      	push	{r7, lr}
 8008166:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 8008168:	f001 f86c 	bl	8009244 <HW_IPCC_Enable>

  return;
 800816c:	bf00      	nop
}
 800816e:	bd80      	pop	{r7, pc}

08008170 <TL_Init>:


void TL_Init( void )
{
 8008170:	b580      	push	{r7, lr}
 8008172:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 8008174:	4b10      	ldr	r3, [pc, #64]	; (80081b8 <TL_Init+0x48>)
 8008176:	4a11      	ldr	r2, [pc, #68]	; (80081bc <TL_Init+0x4c>)
 8008178:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 800817a:	4b0f      	ldr	r3, [pc, #60]	; (80081b8 <TL_Init+0x48>)
 800817c:	4a10      	ldr	r2, [pc, #64]	; (80081c0 <TL_Init+0x50>)
 800817e:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 8008180:	4b0d      	ldr	r3, [pc, #52]	; (80081b8 <TL_Init+0x48>)
 8008182:	4a10      	ldr	r2, [pc, #64]	; (80081c4 <TL_Init+0x54>)
 8008184:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 8008186:	4b0c      	ldr	r3, [pc, #48]	; (80081b8 <TL_Init+0x48>)
 8008188:	4a0f      	ldr	r2, [pc, #60]	; (80081c8 <TL_Init+0x58>)
 800818a:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 800818c:	4b0a      	ldr	r3, [pc, #40]	; (80081b8 <TL_Init+0x48>)
 800818e:	4a0f      	ldr	r2, [pc, #60]	; (80081cc <TL_Init+0x5c>)
 8008190:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 8008192:	4b09      	ldr	r3, [pc, #36]	; (80081b8 <TL_Init+0x48>)
 8008194:	4a0e      	ldr	r2, [pc, #56]	; (80081d0 <TL_Init+0x60>)
 8008196:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 8008198:	4b07      	ldr	r3, [pc, #28]	; (80081b8 <TL_Init+0x48>)
 800819a:	4a0e      	ldr	r2, [pc, #56]	; (80081d4 <TL_Init+0x64>)
 800819c:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 800819e:	4b06      	ldr	r3, [pc, #24]	; (80081b8 <TL_Init+0x48>)
 80081a0:	4a0d      	ldr	r2, [pc, #52]	; (80081d8 <TL_Init+0x68>)
 80081a2:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 80081a4:	4b04      	ldr	r3, [pc, #16]	; (80081b8 <TL_Init+0x48>)
 80081a6:	4a0d      	ldr	r2, [pc, #52]	; (80081dc <TL_Init+0x6c>)
 80081a8:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 80081aa:	4b03      	ldr	r3, [pc, #12]	; (80081b8 <TL_Init+0x48>)
 80081ac:	4a0c      	ldr	r2, [pc, #48]	; (80081e0 <TL_Init+0x70>)
 80081ae:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 80081b0:	f001 f85c 	bl	800926c <HW_IPCC_Init>

  return;
 80081b4:	bf00      	nop
}
 80081b6:	bd80      	pop	{r7, pc}
 80081b8:	20030000 	.word	0x20030000
 80081bc:	20030028 	.word	0x20030028
 80081c0:	20030048 	.word	0x20030048
 80081c4:	20030058 	.word	0x20030058
 80081c8:	20030068 	.word	0x20030068
 80081cc:	20030070 	.word	0x20030070
 80081d0:	20030078 	.word	0x20030078
 80081d4:	20030080 	.word	0x20030080
 80081d8:	2003009c 	.word	0x2003009c
 80081dc:	200300a0 	.word	0x200300a0
 80081e0:	200300ac 	.word	0x200300ac

080081e4 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b084      	sub	sp, #16
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 80081f0:	4811      	ldr	r0, [pc, #68]	; (8008238 <TL_BLE_Init+0x54>)
 80081f2:	f000 fa27 	bl	8008644 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 80081f6:	4b11      	ldr	r3, [pc, #68]	; (800823c <TL_BLE_Init+0x58>)
 80081f8:	685b      	ldr	r3, [r3, #4]
 80081fa:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	689a      	ldr	r2, [r3, #8]
 8008200:	68bb      	ldr	r3, [r7, #8]
 8008202:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	68da      	ldr	r2, [r3, #12]
 8008208:	68bb      	ldr	r3, [r7, #8]
 800820a:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 800820c:	68bb      	ldr	r3, [r7, #8]
 800820e:	4a0c      	ldr	r2, [pc, #48]	; (8008240 <TL_BLE_Init+0x5c>)
 8008210:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 8008212:	68bb      	ldr	r3, [r7, #8]
 8008214:	4a08      	ldr	r2, [pc, #32]	; (8008238 <TL_BLE_Init+0x54>)
 8008216:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 8008218:	f001 f83e 	bl	8009298 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	4a08      	ldr	r2, [pc, #32]	; (8008244 <TL_BLE_Init+0x60>)
 8008222:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	685b      	ldr	r3, [r3, #4]
 8008228:	4a07      	ldr	r2, [pc, #28]	; (8008248 <TL_BLE_Init+0x64>)
 800822a:	6013      	str	r3, [r2, #0]

  return 0;
 800822c:	2300      	movs	r3, #0
}
 800822e:	4618      	mov	r0, r3
 8008230:	3710      	adds	r7, #16
 8008232:	46bd      	mov	sp, r7
 8008234:	bd80      	pop	{r7, pc}
 8008236:	bf00      	nop
 8008238:	200300c8 	.word	0x200300c8
 800823c:	20030000 	.word	0x20030000
 8008240:	20000900 	.word	0x20000900
 8008244:	20000bc8 	.word	0x20000bc8
 8008248:	20000bcc 	.word	0x20000bcc

0800824c <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 800824c:	b580      	push	{r7, lr}
 800824e:	b082      	sub	sp, #8
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
 8008254:	460b      	mov	r3, r1
 8008256:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 8008258:	4b09      	ldr	r3, [pc, #36]	; (8008280 <TL_BLE_SendCmd+0x34>)
 800825a:	685b      	ldr	r3, [r3, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	2201      	movs	r2, #1
 8008260:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 8008262:	4b07      	ldr	r3, [pc, #28]	; (8008280 <TL_BLE_SendCmd+0x34>)
 8008264:	685b      	ldr	r3, [r3, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	4619      	mov	r1, r3
 800826a:	2001      	movs	r0, #1
 800826c:	f000 f96c 	bl	8008548 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 8008270:	f001 f81c 	bl	80092ac <HW_IPCC_BLE_SendCmd>

  return 0;
 8008274:	2300      	movs	r3, #0
}
 8008276:	4618      	mov	r0, r3
 8008278:	3708      	adds	r7, #8
 800827a:	46bd      	mov	sp, r7
 800827c:	bd80      	pop	{r7, pc}
 800827e:	bf00      	nop
 8008280:	20030000 	.word	0x20030000

08008284 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 8008284:	b580      	push	{r7, lr}
 8008286:	b082      	sub	sp, #8
 8008288:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 800828a:	e01c      	b.n	80082c6 <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 800828c:	1d3b      	adds	r3, r7, #4
 800828e:	4619      	mov	r1, r3
 8008290:	4812      	ldr	r0, [pc, #72]	; (80082dc <HW_IPCC_BLE_RxEvtNot+0x58>)
 8008292:	f000 fa76 	bl	8008782 <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	7a5b      	ldrb	r3, [r3, #9]
 800829a:	2b0f      	cmp	r3, #15
 800829c:	d003      	beq.n	80082a6 <HW_IPCC_BLE_RxEvtNot+0x22>
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	7a5b      	ldrb	r3, [r3, #9]
 80082a2:	2b0e      	cmp	r3, #14
 80082a4:	d105      	bne.n	80082b2 <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	4619      	mov	r1, r3
 80082aa:	2002      	movs	r0, #2
 80082ac:	f000 f94c 	bl	8008548 <OutputDbgTrace>
 80082b0:	e004      	b.n	80082bc <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	4619      	mov	r1, r3
 80082b6:	2003      	movs	r0, #3
 80082b8:	f000 f946 	bl	8008548 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 80082bc:	4b08      	ldr	r3, [pc, #32]	; (80082e0 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	687a      	ldr	r2, [r7, #4]
 80082c2:	4610      	mov	r0, r2
 80082c4:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 80082c6:	4805      	ldr	r0, [pc, #20]	; (80082dc <HW_IPCC_BLE_RxEvtNot+0x58>)
 80082c8:	f000 f9cc 	bl	8008664 <LST_is_empty>
 80082cc:	4603      	mov	r3, r0
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d0dc      	beq.n	800828c <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 80082d2:	bf00      	nop
}
 80082d4:	3708      	adds	r7, #8
 80082d6:	46bd      	mov	sp, r7
 80082d8:	bd80      	pop	{r7, pc}
 80082da:	bf00      	nop
 80082dc:	200300c8 	.word	0x200300c8
 80082e0:	20000bc8 	.word	0x20000bc8

080082e4 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 80082e4:	b580      	push	{r7, lr}
 80082e6:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 80082e8:	4b02      	ldr	r3, [pc, #8]	; (80082f4 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	4798      	blx	r3

  return;
 80082ee:	bf00      	nop
}
 80082f0:	bd80      	pop	{r7, pc}
 80082f2:	bf00      	nop
 80082f4:	20000bcc 	.word	0x20000bcc

080082f8 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b084      	sub	sp, #16
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 8008304:	480d      	ldr	r0, [pc, #52]	; (800833c <TL_SYS_Init+0x44>)
 8008306:	f000 f99d 	bl	8008644 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 800830a:	4b0d      	ldr	r3, [pc, #52]	; (8008340 <TL_SYS_Init+0x48>)
 800830c:	68db      	ldr	r3, [r3, #12]
 800830e:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	689a      	ldr	r2, [r3, #8]
 8008314:	68bb      	ldr	r3, [r7, #8]
 8008316:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 8008318:	68bb      	ldr	r3, [r7, #8]
 800831a:	4a08      	ldr	r2, [pc, #32]	; (800833c <TL_SYS_Init+0x44>)
 800831c:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 800831e:	f000 ffe7 	bl	80092f0 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	4a07      	ldr	r2, [pc, #28]	; (8008344 <TL_SYS_Init+0x4c>)
 8008328:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	685b      	ldr	r3, [r3, #4]
 800832e:	4a06      	ldr	r2, [pc, #24]	; (8008348 <TL_SYS_Init+0x50>)
 8008330:	6013      	str	r3, [r2, #0]

  return 0;
 8008332:	2300      	movs	r3, #0
}
 8008334:	4618      	mov	r0, r3
 8008336:	3710      	adds	r7, #16
 8008338:	46bd      	mov	sp, r7
 800833a:	bd80      	pop	{r7, pc}
 800833c:	200300d0 	.word	0x200300d0
 8008340:	20030000 	.word	0x20030000
 8008344:	20000bd0 	.word	0x20000bd0
 8008348:	20000bd4 	.word	0x20000bd4

0800834c <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 800834c:	b580      	push	{r7, lr}
 800834e:	b082      	sub	sp, #8
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
 8008354:	460b      	mov	r3, r1
 8008356:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 8008358:	4b09      	ldr	r3, [pc, #36]	; (8008380 <TL_SYS_SendCmd+0x34>)
 800835a:	68db      	ldr	r3, [r3, #12]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	2210      	movs	r2, #16
 8008360:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 8008362:	4b07      	ldr	r3, [pc, #28]	; (8008380 <TL_SYS_SendCmd+0x34>)
 8008364:	68db      	ldr	r3, [r3, #12]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	4619      	mov	r1, r3
 800836a:	2004      	movs	r0, #4
 800836c:	f000 f8ec 	bl	8008548 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 8008370:	f000 ffc8 	bl	8009304 <HW_IPCC_SYS_SendCmd>

  return 0;
 8008374:	2300      	movs	r3, #0
}
 8008376:	4618      	mov	r0, r3
 8008378:	3708      	adds	r7, #8
 800837a:	46bd      	mov	sp, r7
 800837c:	bd80      	pop	{r7, pc}
 800837e:	bf00      	nop
 8008380:	20030000 	.word	0x20030000

08008384 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 8008384:	b580      	push	{r7, lr}
 8008386:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8008388:	4b07      	ldr	r3, [pc, #28]	; (80083a8 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800838a:	68db      	ldr	r3, [r3, #12]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	4619      	mov	r1, r3
 8008390:	2005      	movs	r0, #5
 8008392:	f000 f8d9 	bl	8008548 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8008396:	4b05      	ldr	r3, [pc, #20]	; (80083ac <HW_IPCC_SYS_CmdEvtNot+0x28>)
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	4a03      	ldr	r2, [pc, #12]	; (80083a8 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800839c:	68d2      	ldr	r2, [r2, #12]
 800839e:	6812      	ldr	r2, [r2, #0]
 80083a0:	4610      	mov	r0, r2
 80083a2:	4798      	blx	r3

  return;
 80083a4:	bf00      	nop
}
 80083a6:	bd80      	pop	{r7, pc}
 80083a8:	20030000 	.word	0x20030000
 80083ac:	20000bd0 	.word	0x20000bd0

080083b0 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b082      	sub	sp, #8
 80083b4:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 80083b6:	e00e      	b.n	80083d6 <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 80083b8:	1d3b      	adds	r3, r7, #4
 80083ba:	4619      	mov	r1, r3
 80083bc:	480b      	ldr	r0, [pc, #44]	; (80083ec <HW_IPCC_SYS_EvtNot+0x3c>)
 80083be:	f000 f9e0 	bl	8008782 <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	4619      	mov	r1, r3
 80083c6:	2006      	movs	r0, #6
 80083c8:	f000 f8be 	bl	8008548 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 80083cc:	4b08      	ldr	r3, [pc, #32]	; (80083f0 <HW_IPCC_SYS_EvtNot+0x40>)
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	687a      	ldr	r2, [r7, #4]
 80083d2:	4610      	mov	r0, r2
 80083d4:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 80083d6:	4805      	ldr	r0, [pc, #20]	; (80083ec <HW_IPCC_SYS_EvtNot+0x3c>)
 80083d8:	f000 f944 	bl	8008664 <LST_is_empty>
 80083dc:	4603      	mov	r3, r0
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d0ea      	beq.n	80083b8 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 80083e2:	bf00      	nop
}
 80083e4:	3708      	adds	r7, #8
 80083e6:	46bd      	mov	sp, r7
 80083e8:	bd80      	pop	{r7, pc}
 80083ea:	bf00      	nop
 80083ec:	200300d0 	.word	0x200300d0
 80083f0:	20000bd4 	.word	0x20000bd4

080083f4 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 80083f4:	b580      	push	{r7, lr}
 80083f6:	b082      	sub	sp, #8
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 80083fc:	4817      	ldr	r0, [pc, #92]	; (800845c <TL_MM_Init+0x68>)
 80083fe:	f000 f921 	bl	8008644 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 8008402:	4817      	ldr	r0, [pc, #92]	; (8008460 <TL_MM_Init+0x6c>)
 8008404:	f000 f91e 	bl	8008644 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 8008408:	4b16      	ldr	r3, [pc, #88]	; (8008464 <TL_MM_Init+0x70>)
 800840a:	691b      	ldr	r3, [r3, #16]
 800840c:	4a16      	ldr	r2, [pc, #88]	; (8008468 <TL_MM_Init+0x74>)
 800840e:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 8008410:	4b15      	ldr	r3, [pc, #84]	; (8008468 <TL_MM_Init+0x74>)
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	687a      	ldr	r2, [r7, #4]
 8008416:	6892      	ldr	r2, [r2, #8]
 8008418:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 800841a:	4b13      	ldr	r3, [pc, #76]	; (8008468 <TL_MM_Init+0x74>)
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	687a      	ldr	r2, [r7, #4]
 8008420:	68d2      	ldr	r2, [r2, #12]
 8008422:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 8008424:	4b10      	ldr	r3, [pc, #64]	; (8008468 <TL_MM_Init+0x74>)
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	4a0c      	ldr	r2, [pc, #48]	; (800845c <TL_MM_Init+0x68>)
 800842a:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 800842c:	4b0e      	ldr	r3, [pc, #56]	; (8008468 <TL_MM_Init+0x74>)
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	687a      	ldr	r2, [r7, #4]
 8008432:	6812      	ldr	r2, [r2, #0]
 8008434:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 8008436:	4b0c      	ldr	r3, [pc, #48]	; (8008468 <TL_MM_Init+0x74>)
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	687a      	ldr	r2, [r7, #4]
 800843c:	6852      	ldr	r2, [r2, #4]
 800843e:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 8008440:	4b09      	ldr	r3, [pc, #36]	; (8008468 <TL_MM_Init+0x74>)
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	687a      	ldr	r2, [r7, #4]
 8008446:	6912      	ldr	r2, [r2, #16]
 8008448:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 800844a:	4b07      	ldr	r3, [pc, #28]	; (8008468 <TL_MM_Init+0x74>)
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	687a      	ldr	r2, [r7, #4]
 8008450:	6952      	ldr	r2, [r2, #20]
 8008452:	619a      	str	r2, [r3, #24]

  return;
 8008454:	bf00      	nop
}
 8008456:	3708      	adds	r7, #8
 8008458:	46bd      	mov	sp, r7
 800845a:	bd80      	pop	{r7, pc}
 800845c:	200300b8 	.word	0x200300b8
 8008460:	20000bc0 	.word	0x20000bc0
 8008464:	20030000 	.word	0x20030000
 8008468:	20000bd8 	.word	0x20000bd8

0800846c <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 800846c:	b580      	push	{r7, lr}
 800846e:	b082      	sub	sp, #8
 8008470:	af00      	add	r7, sp, #0
 8008472:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 8008474:	6879      	ldr	r1, [r7, #4]
 8008476:	4807      	ldr	r0, [pc, #28]	; (8008494 <TL_MM_EvtDone+0x28>)
 8008478:	f000 f93c 	bl	80086f4 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 800847c:	6879      	ldr	r1, [r7, #4]
 800847e:	2000      	movs	r0, #0
 8008480:	f000 f862 	bl	8008548 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 8008484:	4804      	ldr	r0, [pc, #16]	; (8008498 <TL_MM_EvtDone+0x2c>)
 8008486:	f000 ff63 	bl	8009350 <HW_IPCC_MM_SendFreeBuf>

  return;
 800848a:	bf00      	nop
}
 800848c:	3708      	adds	r7, #8
 800848e:	46bd      	mov	sp, r7
 8008490:	bd80      	pop	{r7, pc}
 8008492:	bf00      	nop
 8008494:	20000bc0 	.word	0x20000bc0
 8008498:	0800849d 	.word	0x0800849d

0800849c <SendFreeBuf>:

static void SendFreeBuf( void )
{
 800849c:	b580      	push	{r7, lr}
 800849e:	b082      	sub	sp, #8
 80084a0:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 80084a2:	e00c      	b.n	80084be <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 80084a4:	1d3b      	adds	r3, r7, #4
 80084a6:	4619      	mov	r1, r3
 80084a8:	480a      	ldr	r0, [pc, #40]	; (80084d4 <SendFreeBuf+0x38>)
 80084aa:	f000 f96a 	bl	8008782 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 80084ae:	4b0a      	ldr	r3, [pc, #40]	; (80084d8 <SendFreeBuf+0x3c>)
 80084b0:	691b      	ldr	r3, [r3, #16]
 80084b2:	691b      	ldr	r3, [r3, #16]
 80084b4:	687a      	ldr	r2, [r7, #4]
 80084b6:	4611      	mov	r1, r2
 80084b8:	4618      	mov	r0, r3
 80084ba:	f000 f91b 	bl	80086f4 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 80084be:	4805      	ldr	r0, [pc, #20]	; (80084d4 <SendFreeBuf+0x38>)
 80084c0:	f000 f8d0 	bl	8008664 <LST_is_empty>
 80084c4:	4603      	mov	r3, r0
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d0ec      	beq.n	80084a4 <SendFreeBuf+0x8>
  }

  return;
 80084ca:	bf00      	nop
}
 80084cc:	3708      	adds	r7, #8
 80084ce:	46bd      	mov	sp, r7
 80084d0:	bd80      	pop	{r7, pc}
 80084d2:	bf00      	nop
 80084d4:	20000bc0 	.word	0x20000bc0
 80084d8:	20030000 	.word	0x20030000

080084dc <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 80084dc:	b580      	push	{r7, lr}
 80084de:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 80084e0:	4805      	ldr	r0, [pc, #20]	; (80084f8 <TL_TRACES_Init+0x1c>)
 80084e2:	f000 f8af 	bl	8008644 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 80084e6:	4b05      	ldr	r3, [pc, #20]	; (80084fc <TL_TRACES_Init+0x20>)
 80084e8:	695b      	ldr	r3, [r3, #20]
 80084ea:	4a03      	ldr	r2, [pc, #12]	; (80084f8 <TL_TRACES_Init+0x1c>)
 80084ec:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 80084ee:	f000 ff65 	bl	80093bc <HW_IPCC_TRACES_Init>

  return;
 80084f2:	bf00      	nop
}
 80084f4:	bd80      	pop	{r7, pc}
 80084f6:	bf00      	nop
 80084f8:	200300c0 	.word	0x200300c0
 80084fc:	20030000 	.word	0x20030000

08008500 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 8008500:	b580      	push	{r7, lr}
 8008502:	b082      	sub	sp, #8
 8008504:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8008506:	e008      	b.n	800851a <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 8008508:	1d3b      	adds	r3, r7, #4
 800850a:	4619      	mov	r1, r3
 800850c:	4808      	ldr	r0, [pc, #32]	; (8008530 <HW_IPCC_TRACES_EvtNot+0x30>)
 800850e:	f000 f938 	bl	8008782 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	4618      	mov	r0, r3
 8008516:	f000 f80d 	bl	8008534 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800851a:	4805      	ldr	r0, [pc, #20]	; (8008530 <HW_IPCC_TRACES_EvtNot+0x30>)
 800851c:	f000 f8a2 	bl	8008664 <LST_is_empty>
 8008520:	4603      	mov	r3, r0
 8008522:	2b00      	cmp	r3, #0
 8008524:	d0f0      	beq.n	8008508 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 8008526:	bf00      	nop
}
 8008528:	3708      	adds	r7, #8
 800852a:	46bd      	mov	sp, r7
 800852c:	bd80      	pop	{r7, pc}
 800852e:	bf00      	nop
 8008530:	200300c0 	.word	0x200300c0

08008534 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 8008534:	b480      	push	{r7}
 8008536:	b083      	sub	sp, #12
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 800853c:	bf00      	nop
 800853e:	370c      	adds	r7, #12
 8008540:	46bd      	mov	sp, r7
 8008542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008546:	4770      	bx	lr

08008548 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 8008548:	b480      	push	{r7}
 800854a:	b085      	sub	sp, #20
 800854c:	af00      	add	r7, sp, #0
 800854e:	4603      	mov	r3, r0
 8008550:	6039      	str	r1, [r7, #0]
 8008552:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 8008554:	79fb      	ldrb	r3, [r7, #7]
 8008556:	2b06      	cmp	r3, #6
 8008558:	d845      	bhi.n	80085e6 <OutputDbgTrace+0x9e>
 800855a:	a201      	add	r2, pc, #4	; (adr r2, 8008560 <OutputDbgTrace+0x18>)
 800855c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008560:	0800857d 	.word	0x0800857d
 8008564:	080085a1 	.word	0x080085a1
 8008568:	080085a7 	.word	0x080085a7
 800856c:	080085bb 	.word	0x080085bb
 8008570:	080085c7 	.word	0x080085c7
 8008574:	080085cd 	.word	0x080085cd
 8008578:	080085db 	.word	0x080085db
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800857c:	683b      	ldr	r3, [r7, #0]
 800857e:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	7a5b      	ldrb	r3, [r3, #9]
 8008584:	2bff      	cmp	r3, #255	; 0xff
 8008586:	d005      	beq.n	8008594 <OutputDbgTrace+0x4c>
 8008588:	2bff      	cmp	r3, #255	; 0xff
 800858a:	dc05      	bgt.n	8008598 <OutputDbgTrace+0x50>
 800858c:	2b0e      	cmp	r3, #14
 800858e:	d005      	beq.n	800859c <OutputDbgTrace+0x54>
 8008590:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 8008592:	e001      	b.n	8008598 <OutputDbgTrace+0x50>
          break;
 8008594:	bf00      	nop
 8008596:	e027      	b.n	80085e8 <OutputDbgTrace+0xa0>
          break;
 8008598:	bf00      	nop
 800859a:	e025      	b.n	80085e8 <OutputDbgTrace+0xa0>
          break;
 800859c:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 800859e:	e023      	b.n	80085e8 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 80085a0:	683b      	ldr	r3, [r7, #0]
 80085a2:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 80085a4:	e020      	b.n	80085e8 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80085a6:	683b      	ldr	r3, [r7, #0]
 80085a8:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	7a5b      	ldrb	r3, [r3, #9]
 80085ae:	2b0e      	cmp	r3, #14
 80085b0:	d001      	beq.n	80085b6 <OutputDbgTrace+0x6e>
 80085b2:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 80085b4:	e000      	b.n	80085b8 <OutputDbgTrace+0x70>
          break;
 80085b6:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 80085b8:	e016      	b.n	80085e8 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80085ba:	683b      	ldr	r3, [r7, #0]
 80085bc:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	7a5b      	ldrb	r3, [r3, #9]
 80085c2:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 80085c4:	e010      	b.n	80085e8 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 80085c6:	683b      	ldr	r3, [r7, #0]
 80085c8:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 80085ca:	e00d      	b.n	80085e8 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80085cc:	683b      	ldr	r3, [r7, #0]
 80085ce:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	7a5b      	ldrb	r3, [r3, #9]
 80085d4:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 80085d6:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 80085d8:	e006      	b.n	80085e8 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80085da:	683b      	ldr	r3, [r7, #0]
 80085dc:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	7a5b      	ldrb	r3, [r3, #9]
 80085e2:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 80085e4:	e000      	b.n	80085e8 <OutputDbgTrace+0xa0>

    default:
      break;
 80085e6:	bf00      	nop
  }

  return;
 80085e8:	bf00      	nop
}
 80085ea:	3714      	adds	r7, #20
 80085ec:	46bd      	mov	sp, r7
 80085ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f2:	4770      	bx	lr

080085f4 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 80085f4:	b480      	push	{r7}
 80085f6:	b085      	sub	sp, #20
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	4603      	mov	r3, r0
 80085fc:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 80085fe:	4b0f      	ldr	r3, [pc, #60]	; (800863c <OTP_Read+0x48>)
 8008600:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8008602:	e002      	b.n	800860a <OTP_Read+0x16>
  {
    p_id -= 8 ;
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	3b08      	subs	r3, #8
 8008608:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	3307      	adds	r3, #7
 800860e:	781b      	ldrb	r3, [r3, #0]
 8008610:	79fa      	ldrb	r2, [r7, #7]
 8008612:	429a      	cmp	r2, r3
 8008614:	d003      	beq.n	800861e <OTP_Read+0x2a>
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	4a09      	ldr	r2, [pc, #36]	; (8008640 <OTP_Read+0x4c>)
 800861a:	4293      	cmp	r3, r2
 800861c:	d1f2      	bne.n	8008604 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	3307      	adds	r3, #7
 8008622:	781b      	ldrb	r3, [r3, #0]
 8008624:	79fa      	ldrb	r2, [r7, #7]
 8008626:	429a      	cmp	r2, r3
 8008628:	d001      	beq.n	800862e <OTP_Read+0x3a>
  {
    p_id = 0 ;
 800862a:	2300      	movs	r3, #0
 800862c:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 800862e:	68fb      	ldr	r3, [r7, #12]
}
 8008630:	4618      	mov	r0, r3
 8008632:	3714      	adds	r7, #20
 8008634:	46bd      	mov	sp, r7
 8008636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863a:	4770      	bx	lr
 800863c:	1fff73f8 	.word	0x1fff73f8
 8008640:	1fff7000 	.word	0x1fff7000

08008644 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 8008644:	b480      	push	{r7}
 8008646:	b083      	sub	sp, #12
 8008648:	af00      	add	r7, sp, #0
 800864a:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	687a      	ldr	r2, [r7, #4]
 8008650:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	687a      	ldr	r2, [r7, #4]
 8008656:	605a      	str	r2, [r3, #4]
}
 8008658:	bf00      	nop
 800865a:	370c      	adds	r7, #12
 800865c:	46bd      	mov	sp, r7
 800865e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008662:	4770      	bx	lr

08008664 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 8008664:	b480      	push	{r7}
 8008666:	b087      	sub	sp, #28
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800866c:	f3ef 8310 	mrs	r3, PRIMASK
 8008670:	60fb      	str	r3, [r7, #12]
  return(result);
 8008672:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8008674:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8008676:	b672      	cpsid	i
}
 8008678:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	687a      	ldr	r2, [r7, #4]
 8008680:	429a      	cmp	r2, r3
 8008682:	d102      	bne.n	800868a <LST_is_empty+0x26>
  {
    return_value = TRUE;
 8008684:	2301      	movs	r3, #1
 8008686:	75fb      	strb	r3, [r7, #23]
 8008688:	e001      	b.n	800868e <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 800868a:	2300      	movs	r3, #0
 800868c:	75fb      	strb	r3, [r7, #23]
 800868e:	693b      	ldr	r3, [r7, #16]
 8008690:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008692:	68bb      	ldr	r3, [r7, #8]
 8008694:	f383 8810 	msr	PRIMASK, r3
}
 8008698:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 800869a:	7dfb      	ldrb	r3, [r7, #23]
}
 800869c:	4618      	mov	r0, r3
 800869e:	371c      	adds	r7, #28
 80086a0:	46bd      	mov	sp, r7
 80086a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a6:	4770      	bx	lr

080086a8 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 80086a8:	b480      	push	{r7}
 80086aa:	b087      	sub	sp, #28
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]
 80086b0:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80086b2:	f3ef 8310 	mrs	r3, PRIMASK
 80086b6:	60fb      	str	r3, [r7, #12]
  return(result);
 80086b8:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80086ba:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80086bc:	b672      	cpsid	i
}
 80086be:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681a      	ldr	r2, [r3, #0]
 80086c4:	683b      	ldr	r3, [r7, #0]
 80086c6:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 80086c8:	683b      	ldr	r3, [r7, #0]
 80086ca:	687a      	ldr	r2, [r7, #4]
 80086cc:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	683a      	ldr	r2, [r7, #0]
 80086d2:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 80086d4:	683b      	ldr	r3, [r7, #0]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	683a      	ldr	r2, [r7, #0]
 80086da:	605a      	str	r2, [r3, #4]
 80086dc:	697b      	ldr	r3, [r7, #20]
 80086de:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80086e0:	693b      	ldr	r3, [r7, #16]
 80086e2:	f383 8810 	msr	PRIMASK, r3
}
 80086e6:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80086e8:	bf00      	nop
 80086ea:	371c      	adds	r7, #28
 80086ec:	46bd      	mov	sp, r7
 80086ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f2:	4770      	bx	lr

080086f4 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 80086f4:	b480      	push	{r7}
 80086f6:	b087      	sub	sp, #28
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	6078      	str	r0, [r7, #4]
 80086fc:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80086fe:	f3ef 8310 	mrs	r3, PRIMASK
 8008702:	60fb      	str	r3, [r7, #12]
  return(result);
 8008704:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8008706:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008708:	b672      	cpsid	i
}
 800870a:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 800870c:	683b      	ldr	r3, [r7, #0]
 800870e:	687a      	ldr	r2, [r7, #4]
 8008710:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	685a      	ldr	r2, [r3, #4]
 8008716:	683b      	ldr	r3, [r7, #0]
 8008718:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	683a      	ldr	r2, [r7, #0]
 800871e:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8008720:	683b      	ldr	r3, [r7, #0]
 8008722:	685b      	ldr	r3, [r3, #4]
 8008724:	683a      	ldr	r2, [r7, #0]
 8008726:	601a      	str	r2, [r3, #0]
 8008728:	697b      	ldr	r3, [r7, #20]
 800872a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800872c:	693b      	ldr	r3, [r7, #16]
 800872e:	f383 8810 	msr	PRIMASK, r3
}
 8008732:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8008734:	bf00      	nop
 8008736:	371c      	adds	r7, #28
 8008738:	46bd      	mov	sp, r7
 800873a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873e:	4770      	bx	lr

08008740 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 8008740:	b480      	push	{r7}
 8008742:	b087      	sub	sp, #28
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008748:	f3ef 8310 	mrs	r3, PRIMASK
 800874c:	60fb      	str	r3, [r7, #12]
  return(result);
 800874e:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8008750:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008752:	b672      	cpsid	i
}
 8008754:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	685b      	ldr	r3, [r3, #4]
 800875a:	687a      	ldr	r2, [r7, #4]
 800875c:	6812      	ldr	r2, [r2, #0]
 800875e:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	687a      	ldr	r2, [r7, #4]
 8008766:	6852      	ldr	r2, [r2, #4]
 8008768:	605a      	str	r2, [r3, #4]
 800876a:	697b      	ldr	r3, [r7, #20]
 800876c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800876e:	693b      	ldr	r3, [r7, #16]
 8008770:	f383 8810 	msr	PRIMASK, r3
}
 8008774:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8008776:	bf00      	nop
 8008778:	371c      	adds	r7, #28
 800877a:	46bd      	mov	sp, r7
 800877c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008780:	4770      	bx	lr

08008782 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 8008782:	b580      	push	{r7, lr}
 8008784:	b086      	sub	sp, #24
 8008786:	af00      	add	r7, sp, #0
 8008788:	6078      	str	r0, [r7, #4]
 800878a:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800878c:	f3ef 8310 	mrs	r3, PRIMASK
 8008790:	60fb      	str	r3, [r7, #12]
  return(result);
 8008792:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8008794:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008796:	b672      	cpsid	i
}
 8008798:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681a      	ldr	r2, [r3, #0]
 800879e:	683b      	ldr	r3, [r7, #0]
 80087a0:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	4618      	mov	r0, r3
 80087a8:	f7ff ffca 	bl	8008740 <LST_remove_node>
 80087ac:	697b      	ldr	r3, [r7, #20]
 80087ae:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80087b0:	693b      	ldr	r3, [r7, #16]
 80087b2:	f383 8810 	msr	PRIMASK, r3
}
 80087b6:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80087b8:	bf00      	nop
 80087ba:	3718      	adds	r7, #24
 80087bc:	46bd      	mov	sp, r7
 80087be:	bd80      	pop	{r7, pc}

080087c0 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 80087c0:	b480      	push	{r7}
 80087c2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 80087c4:	4b03      	ldr	r3, [pc, #12]	; (80087d4 <LL_FLASH_GetUDN+0x14>)
 80087c6:	681b      	ldr	r3, [r3, #0]
}
 80087c8:	4618      	mov	r0, r3
 80087ca:	46bd      	mov	sp, r7
 80087cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d0:	4770      	bx	lr
 80087d2:	bf00      	nop
 80087d4:	1fff7580 	.word	0x1fff7580

080087d8 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 80087d8:	b480      	push	{r7}
 80087da:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 80087dc:	4b03      	ldr	r3, [pc, #12]	; (80087ec <LL_FLASH_GetDeviceID+0x14>)
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	b2db      	uxtb	r3, r3
}
 80087e2:	4618      	mov	r0, r3
 80087e4:	46bd      	mov	sp, r7
 80087e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ea:	4770      	bx	lr
 80087ec:	1fff7584 	.word	0x1fff7584

080087f0 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 80087f0:	b480      	push	{r7}
 80087f2:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 80087f4:	4b03      	ldr	r3, [pc, #12]	; (8008804 <LL_FLASH_GetSTCompanyID+0x14>)
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	0a1b      	lsrs	r3, r3, #8
}
 80087fa:	4618      	mov	r0, r3
 80087fc:	46bd      	mov	sp, r7
 80087fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008802:	4770      	bx	lr
 8008804:	1fff7584 	.word	0x1fff7584

08008808 <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 8008808:	b5b0      	push	{r4, r5, r7, lr}
 800880a:	b090      	sub	sp, #64	; 0x40
 800880c:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
#if (RADIO_ACTIVITY_EVENT != 0)
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800880e:	2392      	movs	r3, #146	; 0x92
 8008810:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#endif /* RADIO_ACTIVITY_EVENT != 0 */
  /* USER CODE BEGIN APP_BLE_Init_1 */

  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 8008814:	4b25      	ldr	r3, [pc, #148]	; (80088ac <APP_BLE_Init+0xa4>)
 8008816:	1d3c      	adds	r4, r7, #4
 8008818:	461d      	mov	r5, r3
 800881a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800881c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800881e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008820:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008822:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008824:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008826:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800882a:	c403      	stmia	r4!, {r0, r1}
 800882c:	8022      	strh	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 800882e:	f000 f905 	bl	8008a3c <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 8008832:	2101      	movs	r1, #1
 8008834:	2002      	movs	r0, #2
 8008836:	f000 fde9 	bl	800940c <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 800883a:	4a1d      	ldr	r2, [pc, #116]	; (80088b0 <APP_BLE_Init+0xa8>)
 800883c:	2100      	movs	r1, #0
 800883e:	2002      	movs	r0, #2
 8008840:	f000 ff10 	bl	8009664 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 8008844:	1d3b      	adds	r3, r7, #4
 8008846:	4618      	mov	r0, r3
 8008848:	f7ff f8d0 	bl	80079ec <SHCI_C2_BLE_Init>
 800884c:	4603      	mov	r3, r0
 800884e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  if (status != SHCI_Success)
 8008852:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8008856:	2b00      	cmp	r3, #0
 8008858:	d001      	beq.n	800885e <APP_BLE_Init+0x56>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 800885a:	f7f9 fb71 	bl	8001f40 <Error_Handler>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 800885e:	f000 f903 	bl	8008a68 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 8008862:	f7ff f81d 	bl	80078a0 <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8008866:	4b13      	ldr	r3, [pc, #76]	; (80088b4 <APP_BLE_Init+0xac>)
 8008868:	2200      	movs	r2, #0
 800886a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 800886e:	4b11      	ldr	r3, [pc, #68]	; (80088b4 <APP_BLE_Init+0xac>)
 8008870:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008874:	82da      	strh	r2, [r3, #22]

  /**
   * From here, all initialization are BLE application specific
   */

  UTIL_SEQ_RegTask(1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 8008876:	4a10      	ldr	r2, [pc, #64]	; (80088b8 <APP_BLE_Init+0xb0>)
 8008878:	2100      	movs	r1, #0
 800887a:	2001      	movs	r0, #1
 800887c:	f000 fef2 	bl	8009664 <UTIL_SEQ_RegTask>

  /**
   * Initialization of ADV - Ad Manufacturer Element - Support OTA Bit Mask
   */
#if (RADIO_ACTIVITY_EVENT != 0)
  ret = aci_hal_set_radio_activity_mask(0x0006);
 8008880:	2006      	movs	r0, #6
 8008882:	f7fe fe80 	bl	8007586 <aci_hal_set_radio_activity_mask>
 8008886:	4603      	mov	r3, r0
 8008888:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

  /**
   * Initialize Custom Template Application
   */
  Custom_APP_Init();
 800888c:	f000 fa9b 	bl	8008dc6 <Custom_APP_Init>
  /* USER CODE END APP_BLE_Init_3 */

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 8008890:	4b08      	ldr	r3, [pc, #32]	; (80088b4 <APP_BLE_Init+0xac>)
 8008892:	2200      	movs	r2, #0
 8008894:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 8008896:	4b07      	ldr	r3, [pc, #28]	; (80088b4 <APP_BLE_Init+0xac>)
 8008898:	2200      	movs	r2, #0
 800889a:	761a      	strb	r2, [r3, #24]

  /**
   * Start to Advertise to be connected by a Client
   */
  Adv_Request(APP_BLE_FAST_ADV);
 800889c:	2001      	movs	r0, #1
 800889e:	f000 f997 	bl	8008bd0 <Adv_Request>

  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */

  return;
 80088a2:	bf00      	nop
}
 80088a4:	3740      	adds	r7, #64	; 0x40
 80088a6:	46bd      	mov	sp, r7
 80088a8:	bdb0      	pop	{r4, r5, r7, pc}
 80088aa:	bf00      	nop
 80088ac:	0800a9a8 	.word	0x0800a9a8
 80088b0:	08007c09 	.word	0x08007c09
 80088b4:	20000be4 	.word	0x20000be4
 80088b8:	08008cb9 	.word	0x08008cb9

080088bc <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 80088bc:	b580      	push	{r7, lr}
 80088be:	b08a      	sub	sp, #40	; 0x28
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	6078      	str	r0, [r7, #4]
  hci_event_pckt    *p_event_pckt;
  evt_le_meta_event *p_meta_evt;
  evt_blecore_aci   *p_blecore_evt;
  tBleStatus        ret = BLE_STATUS_INVALID_PARAMS;
 80088c4:	2392      	movs	r3, #146	; 0x92
 80088c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	3301      	adds	r3, #1
 80088ce:	623b      	str	r3, [r7, #32]

  switch (p_event_pckt->evt)
 80088d0:	6a3b      	ldr	r3, [r7, #32]
 80088d2:	781b      	ldrb	r3, [r3, #0]
 80088d4:	2bff      	cmp	r3, #255	; 0xff
 80088d6:	d053      	beq.n	8008980 <SVCCTL_App_Notification+0xc4>
 80088d8:	2bff      	cmp	r3, #255	; 0xff
 80088da:	f300 80a1 	bgt.w	8008a20 <SVCCTL_App_Notification+0x164>
 80088de:	2b05      	cmp	r3, #5
 80088e0:	d002      	beq.n	80088e8 <SVCCTL_App_Notification+0x2c>
 80088e2:	2b3e      	cmp	r3, #62	; 0x3e
 80088e4:	d020      	beq.n	8008928 <SVCCTL_App_Notification+0x6c>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 80088e6:	e09b      	b.n	8008a20 <SVCCTL_App_Notification+0x164>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
 80088e8:	6a3b      	ldr	r3, [r7, #32]
 80088ea:	3302      	adds	r3, #2
 80088ec:	60fb      	str	r3, [r7, #12]
      if (p_disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80088f4:	b29a      	uxth	r2, r3
 80088f6:	4b4e      	ldr	r3, [pc, #312]	; (8008a30 <SVCCTL_App_Notification+0x174>)
 80088f8:	8adb      	ldrh	r3, [r3, #22]
 80088fa:	429a      	cmp	r2, r3
 80088fc:	d106      	bne.n	800890c <SVCCTL_App_Notification+0x50>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 80088fe:	4b4c      	ldr	r3, [pc, #304]	; (8008a30 <SVCCTL_App_Notification+0x174>)
 8008900:	2200      	movs	r2, #0
 8008902:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8008904:	4b4a      	ldr	r3, [pc, #296]	; (8008a30 <SVCCTL_App_Notification+0x174>)
 8008906:	2200      	movs	r2, #0
 8008908:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
      Adv_Request(APP_BLE_FAST_ADV);
 800890c:	2001      	movs	r0, #1
 800890e:	f000 f95f 	bl	8008bd0 <Adv_Request>
      HandleNotification.Custom_Evt_Opcode = CUSTOM_DISCON_HANDLE_EVT;
 8008912:	4b48      	ldr	r3, [pc, #288]	; (8008a34 <SVCCTL_App_Notification+0x178>)
 8008914:	2201      	movs	r2, #1
 8008916:	701a      	strb	r2, [r3, #0]
      HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8008918:	4b45      	ldr	r3, [pc, #276]	; (8008a30 <SVCCTL_App_Notification+0x174>)
 800891a:	8ada      	ldrh	r2, [r3, #22]
 800891c:	4b45      	ldr	r3, [pc, #276]	; (8008a34 <SVCCTL_App_Notification+0x178>)
 800891e:	805a      	strh	r2, [r3, #2]
      Custom_APP_Notification(&HandleNotification);
 8008920:	4844      	ldr	r0, [pc, #272]	; (8008a34 <SVCCTL_App_Notification+0x178>)
 8008922:	f000 fa3c 	bl	8008d9e <Custom_APP_Notification>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 8008926:	e07e      	b.n	8008a26 <SVCCTL_App_Notification+0x16a>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 8008928:	6a3b      	ldr	r3, [r7, #32]
 800892a:	3302      	adds	r3, #2
 800892c:	617b      	str	r3, [r7, #20]
      switch (p_meta_evt->subevent)
 800892e:	697b      	ldr	r3, [r7, #20]
 8008930:	781b      	ldrb	r3, [r3, #0]
 8008932:	2b01      	cmp	r3, #1
 8008934:	d001      	beq.n	800893a <SVCCTL_App_Notification+0x7e>
 8008936:	2b03      	cmp	r3, #3
          break;
 8008938:	e021      	b.n	800897e <SVCCTL_App_Notification+0xc2>
          p_connection_complete_event = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
 800893a:	697b      	ldr	r3, [r7, #20]
 800893c:	3301      	adds	r3, #1
 800893e:	613b      	str	r3, [r7, #16]
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 8008940:	4b3b      	ldr	r3, [pc, #236]	; (8008a30 <SVCCTL_App_Notification+0x174>)
 8008942:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008946:	2b04      	cmp	r3, #4
 8008948:	d104      	bne.n	8008954 <SVCCTL_App_Notification+0x98>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 800894a:	4b39      	ldr	r3, [pc, #228]	; (8008a30 <SVCCTL_App_Notification+0x174>)
 800894c:	2206      	movs	r2, #6
 800894e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 8008952:	e003      	b.n	800895c <SVCCTL_App_Notification+0xa0>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 8008954:	4b36      	ldr	r3, [pc, #216]	; (8008a30 <SVCCTL_App_Notification+0x174>)
 8008956:	2205      	movs	r2, #5
 8008958:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_connection_complete_event->Connection_Handle;
 800895c:	693b      	ldr	r3, [r7, #16]
 800895e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8008962:	b29a      	uxth	r2, r3
 8008964:	4b32      	ldr	r3, [pc, #200]	; (8008a30 <SVCCTL_App_Notification+0x174>)
 8008966:	82da      	strh	r2, [r3, #22]
          HandleNotification.Custom_Evt_Opcode = CUSTOM_CONN_HANDLE_EVT;
 8008968:	4b32      	ldr	r3, [pc, #200]	; (8008a34 <SVCCTL_App_Notification+0x178>)
 800896a:	2200      	movs	r2, #0
 800896c:	701a      	strb	r2, [r3, #0]
          HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800896e:	4b30      	ldr	r3, [pc, #192]	; (8008a30 <SVCCTL_App_Notification+0x174>)
 8008970:	8ada      	ldrh	r2, [r3, #22]
 8008972:	4b30      	ldr	r3, [pc, #192]	; (8008a34 <SVCCTL_App_Notification+0x178>)
 8008974:	805a      	strh	r2, [r3, #2]
          Custom_APP_Notification(&HandleNotification);
 8008976:	482f      	ldr	r0, [pc, #188]	; (8008a34 <SVCCTL_App_Notification+0x178>)
 8008978:	f000 fa11 	bl	8008d9e <Custom_APP_Notification>
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 800897c:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 800897e:	e052      	b.n	8008a26 <SVCCTL_App_Notification+0x16a>
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 8008980:	6a3b      	ldr	r3, [r7, #32]
 8008982:	3302      	adds	r3, #2
 8008984:	61fb      	str	r3, [r7, #28]
      switch (p_blecore_evt->ecode)
 8008986:	69fb      	ldr	r3, [r7, #28]
 8008988:	881b      	ldrh	r3, [r3, #0]
 800898a:	b29b      	uxth	r3, r3
 800898c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008990:	d040      	beq.n	8008a14 <SVCCTL_App_Notification+0x158>
 8008992:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008996:	dc45      	bgt.n	8008a24 <SVCCTL_App_Notification+0x168>
 8008998:	2b04      	cmp	r3, #4
 800899a:	d03d      	beq.n	8008a18 <SVCCTL_App_Notification+0x15c>
 800899c:	2b04      	cmp	r3, #4
 800899e:	db41      	blt.n	8008a24 <SVCCTL_App_Notification+0x168>
 80089a0:	f240 420a 	movw	r2, #1034	; 0x40a
 80089a4:	4293      	cmp	r3, r2
 80089a6:	dc3d      	bgt.n	8008a24 <SVCCTL_App_Notification+0x168>
 80089a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80089ac:	dd3a      	ble.n	8008a24 <SVCCTL_App_Notification+0x168>
 80089ae:	f2a3 4301 	subw	r3, r3, #1025	; 0x401
 80089b2:	2b09      	cmp	r3, #9
 80089b4:	d836      	bhi.n	8008a24 <SVCCTL_App_Notification+0x168>
 80089b6:	a201      	add	r2, pc, #4	; (adr r2, 80089bc <SVCCTL_App_Notification+0x100>)
 80089b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089bc:	08008a0d 	.word	0x08008a0d
 80089c0:	080089e5 	.word	0x080089e5
 80089c4:	08008a25 	.word	0x08008a25
 80089c8:	08008a25 	.word	0x08008a25
 80089cc:	08008a25 	.word	0x08008a25
 80089d0:	08008a25 	.word	0x08008a25
 80089d4:	08008a1d 	.word	0x08008a1d
 80089d8:	08008a25 	.word	0x08008a25
 80089dc:	080089f9 	.word	0x080089f9
 80089e0:	08008a1d 	.word	0x08008a1d
          ret = aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, CFG_FIXED_PIN);
 80089e4:	4b12      	ldr	r3, [pc, #72]	; (8008a30 <SVCCTL_App_Notification+0x174>)
 80089e6:	8adb      	ldrh	r3, [r3, #22]
 80089e8:	4913      	ldr	r1, [pc, #76]	; (8008a38 <SVCCTL_App_Notification+0x17c>)
 80089ea:	4618      	mov	r0, r3
 80089ec:	f7fe f822 	bl	8006a34 <aci_gap_pass_key_resp>
 80089f0:	4603      	mov	r3, r0
 80089f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          break;
 80089f6:	e012      	b.n	8008a1e <SVCCTL_App_Notification+0x162>
          ret = aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES);
 80089f8:	4b0d      	ldr	r3, [pc, #52]	; (8008a30 <SVCCTL_App_Notification+0x174>)
 80089fa:	8adb      	ldrh	r3, [r3, #22]
 80089fc:	2101      	movs	r1, #1
 80089fe:	4618      	mov	r0, r3
 8008a00:	f7fe f9c2 	bl	8006d88 <aci_gap_numeric_comparison_value_confirm_yesno>
 8008a04:	4603      	mov	r3, r0
 8008a06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          break;
 8008a0a:	e008      	b.n	8008a1e <SVCCTL_App_Notification+0x162>
          p_pairing_complete = (aci_gap_pairing_complete_event_rp0*)p_blecore_evt->data;
 8008a0c:	69fb      	ldr	r3, [r7, #28]
 8008a0e:	3302      	adds	r3, #2
 8008a10:	61bb      	str	r3, [r7, #24]
          break;
 8008a12:	e004      	b.n	8008a1e <SVCCTL_App_Notification+0x162>
          break;
 8008a14:	bf00      	nop
 8008a16:	e005      	b.n	8008a24 <SVCCTL_App_Notification+0x168>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 8008a18:	bf00      	nop
 8008a1a:	e003      	b.n	8008a24 <SVCCTL_App_Notification+0x168>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 8008a1c:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8008a1e:	e001      	b.n	8008a24 <SVCCTL_App_Notification+0x168>
      break;
 8008a20:	bf00      	nop
 8008a22:	e000      	b.n	8008a26 <SVCCTL_App_Notification+0x16a>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8008a24:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 8008a26:	2301      	movs	r3, #1
}
 8008a28:	4618      	mov	r0, r3
 8008a2a:	3728      	adds	r7, #40	; 0x28
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	bd80      	pop	{r7, pc}
 8008a30:	20000be4 	.word	0x20000be4
 8008a34:	20000c68 	.word	0x20000c68
 8008a38:	0001b207 	.word	0x0001b207

08008a3c <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 8008a3c:	b580      	push	{r7, lr}
 8008a3e:	b082      	sub	sp, #8
 8008a40:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 8008a42:	4b06      	ldr	r3, [pc, #24]	; (8008a5c <Ble_Tl_Init+0x20>)
 8008a44:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 8008a46:	4b06      	ldr	r3, [pc, #24]	; (8008a60 <Ble_Tl_Init+0x24>)
 8008a48:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 8008a4a:	463b      	mov	r3, r7
 8008a4c:	4619      	mov	r1, r3
 8008a4e:	4805      	ldr	r0, [pc, #20]	; (8008a64 <Ble_Tl_Init+0x28>)
 8008a50:	f7ff f8be 	bl	8007bd0 <hci_init>

  return;
 8008a54:	bf00      	nop
}
 8008a56:	3708      	adds	r7, #8
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	bd80      	pop	{r7, pc}
 8008a5c:	200300d8 	.word	0x200300d8
 8008a60:	08008d69 	.word	0x08008d69
 8008a64:	08008d31 	.word	0x08008d31

08008a68 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 8008a68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008a6a:	b08d      	sub	sp, #52	; 0x34
 8008a6c:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 8008a6e:	2300      	movs	r3, #0
 8008a70:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8008a72:	2392      	movs	r3, #146	; 0x92
 8008a74:	75fb      	strb	r3, [r7, #23]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 8008a76:	f7fe fdda 	bl	800762e <hci_reset>
 8008a7a:	4603      	mov	r3, r0
 8008a7c:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 8008a7e:	f000 f8d7 	bl	8008c30 <BleGetBdAddress>
 8008a82:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 8008a84:	693a      	ldr	r2, [r7, #16]
 8008a86:	2106      	movs	r1, #6
 8008a88:	2000      	movs	r0, #0
 8008a8a:	f7fe fc90 	bl	80073ae <aci_hal_write_config_data>
 8008a8e:	4603      	mov	r3, r0
 8008a90:	75fb      	strb	r3, [r7, #23]
#endif /* CFG_BLE_ADDRESS_TYPE != GAP_PUBLIC_ADDR */

  /**
   * Write Identity root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 8008a92:	4a4a      	ldr	r2, [pc, #296]	; (8008bbc <Ble_Hci_Gap_Gatt_Init+0x154>)
 8008a94:	2110      	movs	r1, #16
 8008a96:	2018      	movs	r0, #24
 8008a98:	f7fe fc89 	bl	80073ae <aci_hal_write_config_data>
 8008a9c:	4603      	mov	r3, r0
 8008a9e:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 8008aa0:	4a47      	ldr	r2, [pc, #284]	; (8008bc0 <Ble_Hci_Gap_Gatt_Init+0x158>)
 8008aa2:	2110      	movs	r1, #16
 8008aa4:	2008      	movs	r0, #8
 8008aa6:	f7fe fc82 	bl	80073ae <aci_hal_write_config_data>
 8008aaa:	4603      	mov	r3, r0
 8008aac:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 8008aae:	2118      	movs	r1, #24
 8008ab0:	2001      	movs	r0, #1
 8008ab2:	f7fe fd01 	bl	80074b8 <aci_hal_set_tx_power_level>
 8008ab6:	4603      	mov	r3, r0
 8008ab8:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 8008aba:	f7fe f9cc 	bl	8006e56 <aci_gatt_init>
 8008abe:	4603      	mov	r3, r0
 8008ac0:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 8008ac2:	2300      	movs	r3, #0
 8008ac4:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 8008ac6:	7bfb      	ldrb	r3, [r7, #15]
 8008ac8:	f043 0301 	orr.w	r3, r3, #1
 8008acc:	73fb      	strb	r3, [r7, #15]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  if (role > 0)
 8008ace:	7bfb      	ldrb	r3, [r7, #15]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d01f      	beq.n	8008b14 <Ble_Hci_Gap_Gatt_Init+0xac>
  {
    const char *name = CFG_GAP_DEVICE_NAME;
 8008ad4:	4b3b      	ldr	r3, [pc, #236]	; (8008bc4 <Ble_Hci_Gap_Gatt_Init+0x15c>)
 8008ad6:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 8008ad8:	1dba      	adds	r2, r7, #6
 8008ada:	7bf8      	ldrb	r0, [r7, #15]
 8008adc:	1cbb      	adds	r3, r7, #2
 8008ade:	9301      	str	r3, [sp, #4]
 8008ae0:	1d3b      	adds	r3, r7, #4
 8008ae2:	9300      	str	r3, [sp, #0]
 8008ae4:	4613      	mov	r3, r2
 8008ae6:	2208      	movs	r2, #8
 8008ae8:	2100      	movs	r1, #0
 8008aea:	f7fe f80a 	bl	8006b02 <aci_gap_init>
 8008aee:	4603      	mov	r3, r0
 8008af0:	75fb      	strb	r3, [r7, #23]
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 8008af2:	88fc      	ldrh	r4, [r7, #6]
 8008af4:	88bd      	ldrh	r5, [r7, #4]
 8008af6:	68b8      	ldr	r0, [r7, #8]
 8008af8:	f7f7 fb42 	bl	8000180 <strlen>
 8008afc:	4603      	mov	r3, r0
 8008afe:	b2da      	uxtb	r2, r3
 8008b00:	68bb      	ldr	r3, [r7, #8]
 8008b02:	9300      	str	r3, [sp, #0]
 8008b04:	4613      	mov	r3, r2
 8008b06:	2200      	movs	r2, #0
 8008b08:	4629      	mov	r1, r5
 8008b0a:	4620      	mov	r0, r4
 8008b0c:	f7fe fba6 	bl	800725c <aci_gatt_update_char_value>
 8008b10:	4603      	mov	r3, r0
 8008b12:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 8008b14:	88f8      	ldrh	r0, [r7, #6]
 8008b16:	8879      	ldrh	r1, [r7, #2]
 8008b18:	463b      	mov	r3, r7
 8008b1a:	9300      	str	r3, [sp, #0]
 8008b1c:	2302      	movs	r3, #2
 8008b1e:	2200      	movs	r2, #0
 8008b20:	f7fe fb9c 	bl	800725c <aci_gatt_update_char_value>
 8008b24:	4603      	mov	r3, r0
 8008b26:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize Default PHY
   */
  ret = hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 8008b28:	2202      	movs	r2, #2
 8008b2a:	2102      	movs	r1, #2
 8008b2c:	2000      	movs	r0, #0
 8008b2e:	f7fe fda2 	bl	8007676 <hci_le_set_default_phy>
 8008b32:	4603      	mov	r3, r0
 8008b34:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 8008b36:	4b24      	ldr	r3, [pc, #144]	; (8008bc8 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8008b38:	2201      	movs	r2, #1
 8008b3a:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 8008b3c:	4b22      	ldr	r3, [pc, #136]	; (8008bc8 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8008b3e:	781b      	ldrb	r3, [r3, #0]
 8008b40:	4618      	mov	r0, r3
 8008b42:	f7fd fe5f 	bl	8006804 <aci_gap_set_io_capability>
 8008b46:	4603      	mov	r3, r0
 8008b48:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 8008b4a:	4b1f      	ldr	r3, [pc, #124]	; (8008bc8 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8008b4c:	2201      	movs	r2, #1
 8008b4e:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 8008b50:	4b1d      	ldr	r3, [pc, #116]	; (8008bc8 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8008b52:	2208      	movs	r2, #8
 8008b54:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 8008b56:	4b1c      	ldr	r3, [pc, #112]	; (8008bc8 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8008b58:	2210      	movs	r2, #16
 8008b5a:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 8008b5c:	4b1a      	ldr	r3, [pc, #104]	; (8008bc8 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8008b5e:	2200      	movs	r2, #0
 8008b60:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 8008b62:	4b19      	ldr	r3, [pc, #100]	; (8008bc8 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8008b64:	4a19      	ldr	r2, [pc, #100]	; (8008bcc <Ble_Hci_Gap_Gatt_Init+0x164>)
 8008b66:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 8008b68:	4b17      	ldr	r3, [pc, #92]	; (8008bc8 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8008b6a:	2200      	movs	r2, #0
 8008b6c:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 8008b6e:	4b16      	ldr	r3, [pc, #88]	; (8008bc8 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8008b70:	789c      	ldrb	r4, [r3, #2]
 8008b72:	4b15      	ldr	r3, [pc, #84]	; (8008bc8 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8008b74:	785d      	ldrb	r5, [r3, #1]
 8008b76:	4b14      	ldr	r3, [pc, #80]	; (8008bc8 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8008b78:	791b      	ldrb	r3, [r3, #4]
 8008b7a:	4a13      	ldr	r2, [pc, #76]	; (8008bc8 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8008b7c:	7952      	ldrb	r2, [r2, #5]
 8008b7e:	4912      	ldr	r1, [pc, #72]	; (8008bc8 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8008b80:	78c9      	ldrb	r1, [r1, #3]
 8008b82:	4811      	ldr	r0, [pc, #68]	; (8008bc8 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8008b84:	6880      	ldr	r0, [r0, #8]
 8008b86:	2600      	movs	r6, #0
 8008b88:	9604      	str	r6, [sp, #16]
 8008b8a:	9003      	str	r0, [sp, #12]
 8008b8c:	9102      	str	r1, [sp, #8]
 8008b8e:	9201      	str	r2, [sp, #4]
 8008b90:	9300      	str	r3, [sp, #0]
 8008b92:	2300      	movs	r3, #0
 8008b94:	2201      	movs	r2, #1
 8008b96:	4629      	mov	r1, r5
 8008b98:	4620      	mov	r0, r4
 8008b9a:	f7fd fe87 	bl	80068ac <aci_gap_set_authentication_requirement>
 8008b9e:	4603      	mov	r3, r0
 8008ba0:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 8008ba2:	4b09      	ldr	r3, [pc, #36]	; (8008bc8 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8008ba4:	789b      	ldrb	r3, [r3, #2]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d003      	beq.n	8008bb2 <Ble_Hci_Gap_Gatt_Init+0x14a>
  {
    ret = aci_gap_configure_whitelist();
 8008baa:	f7fe f8c9 	bl	8006d40 <aci_gap_configure_whitelist>
 8008bae:	4603      	mov	r3, r0
 8008bb0:	75fb      	strb	r3, [r7, #23]
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
}
 8008bb2:	bf00      	nop
 8008bb4:	371c      	adds	r7, #28
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008bba:	bf00      	nop
 8008bbc:	0800abf0 	.word	0x0800abf0
 8008bc0:	0800ac00 	.word	0x0800ac00
 8008bc4:	0800a9e4 	.word	0x0800a9e4
 8008bc8:	20000be4 	.word	0x20000be4
 8008bcc:	0001b207 	.word	0x0001b207

08008bd0 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t NewStatus)
{
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	b08c      	sub	sp, #48	; 0x30
 8008bd4:	af08      	add	r7, sp, #32
 8008bd6:	4603      	mov	r3, r0
 8008bd8:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8008bda:	2392      	movs	r3, #146	; 0x92
 8008bdc:	73fb      	strb	r3, [r7, #15]

  BleApplicationContext.Device_Connection_Status = NewStatus;
 8008bde:	4a12      	ldr	r2, [pc, #72]	; (8008c28 <Adv_Request+0x58>)
 8008be0:	79fb      	ldrb	r3, [r7, #7]
 8008be2:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
  /* Start Fast or Low Power Advertising */
  ret = aci_gap_set_discoverable(ADV_TYPE,
 8008be6:	2300      	movs	r3, #0
 8008be8:	9306      	str	r3, [sp, #24]
 8008bea:	2300      	movs	r3, #0
 8008bec:	9305      	str	r3, [sp, #20]
 8008bee:	2300      	movs	r3, #0
 8008bf0:	9304      	str	r3, [sp, #16]
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	9303      	str	r3, [sp, #12]
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	9302      	str	r3, [sp, #8]
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	9301      	str	r3, [sp, #4]
 8008bfe:	2300      	movs	r3, #0
 8008c00:	9300      	str	r3, [sp, #0]
 8008c02:	2300      	movs	r3, #0
 8008c04:	22a0      	movs	r2, #160	; 0xa0
 8008c06:	2180      	movs	r1, #128	; 0x80
 8008c08:	2000      	movs	r0, #0
 8008c0a:	f7fd fd01 	bl	8006610 <aci_gap_set_discoverable>
 8008c0e:	4603      	mov	r3, r0
 8008c10:	73fb      	strb	r3, [r7, #15]
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - Success\n");
  }

  /* Update Advertising data */
  ret = aci_gap_update_adv_data(sizeof(a_AdvData), (uint8_t*) a_AdvData);
 8008c12:	4906      	ldr	r1, [pc, #24]	; (8008c2c <Adv_Request+0x5c>)
 8008c14:	2009      	movs	r0, #9
 8008c16:	f7fe f821 	bl	8006c5c <aci_gap_update_adv_data>
 8008c1a:	4603      	mov	r3, r0
 8008c1c:	73fb      	strb	r3, [r7, #15]
  else
  {
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
  }

  return;
 8008c1e:	bf00      	nop
}
 8008c20:	3710      	adds	r7, #16
 8008c22:	46bd      	mov	sp, r7
 8008c24:	bd80      	pop	{r7, pc}
 8008c26:	bf00      	nop
 8008c28:	20000be4 	.word	0x20000be4
 8008c2c:	20000014 	.word	0x20000014

08008c30 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 8008c30:	b580      	push	{r7, lr}
 8008c32:	b086      	sub	sp, #24
 8008c34:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 8008c36:	f7ff fdc3 	bl	80087c0 <LL_FLASH_GetUDN>
 8008c3a:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 8008c3c:	693b      	ldr	r3, [r7, #16]
 8008c3e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008c42:	d023      	beq.n	8008c8c <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 8008c44:	f7ff fdd4 	bl	80087f0 <LL_FLASH_GetSTCompanyID>
 8008c48:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 8008c4a:	f7ff fdc5 	bl	80087d8 <LL_FLASH_GetDeviceID>
 8008c4e:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 8008c50:	693b      	ldr	r3, [r7, #16]
 8008c52:	b2da      	uxtb	r2, r3
 8008c54:	4b16      	ldr	r3, [pc, #88]	; (8008cb0 <BleGetBdAddress+0x80>)
 8008c56:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 8008c58:	693b      	ldr	r3, [r7, #16]
 8008c5a:	0a1b      	lsrs	r3, r3, #8
 8008c5c:	b2da      	uxtb	r2, r3
 8008c5e:	4b14      	ldr	r3, [pc, #80]	; (8008cb0 <BleGetBdAddress+0x80>)
 8008c60:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	b2da      	uxtb	r2, r3
 8008c66:	4b12      	ldr	r3, [pc, #72]	; (8008cb0 <BleGetBdAddress+0x80>)
 8008c68:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 8008c6a:	68bb      	ldr	r3, [r7, #8]
 8008c6c:	b2da      	uxtb	r2, r3
 8008c6e:	4b10      	ldr	r3, [pc, #64]	; (8008cb0 <BleGetBdAddress+0x80>)
 8008c70:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 8008c72:	68bb      	ldr	r3, [r7, #8]
 8008c74:	0a1b      	lsrs	r3, r3, #8
 8008c76:	b2da      	uxtb	r2, r3
 8008c78:	4b0d      	ldr	r3, [pc, #52]	; (8008cb0 <BleGetBdAddress+0x80>)
 8008c7a:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 8008c7c:	68bb      	ldr	r3, [r7, #8]
 8008c7e:	0c1b      	lsrs	r3, r3, #16
 8008c80:	b2da      	uxtb	r2, r3
 8008c82:	4b0b      	ldr	r3, [pc, #44]	; (8008cb0 <BleGetBdAddress+0x80>)
 8008c84:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 8008c86:	4b0a      	ldr	r3, [pc, #40]	; (8008cb0 <BleGetBdAddress+0x80>)
 8008c88:	617b      	str	r3, [r7, #20]
 8008c8a:	e00b      	b.n	8008ca4 <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 8008c8c:	2000      	movs	r0, #0
 8008c8e:	f7ff fcb1 	bl	80085f4 <OTP_Read>
 8008c92:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d002      	beq.n	8008ca0 <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	617b      	str	r3, [r7, #20]
 8008c9e:	e001      	b.n	8008ca4 <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 8008ca0:	4b04      	ldr	r3, [pc, #16]	; (8008cb4 <BleGetBdAddress+0x84>)
 8008ca2:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 8008ca4:	697b      	ldr	r3, [r7, #20]
}
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	3718      	adds	r7, #24
 8008caa:	46bd      	mov	sp, r7
 8008cac:	bd80      	pop	{r7, pc}
 8008cae:	bf00      	nop
 8008cb0:	20000bdc 	.word	0x20000bdc
 8008cb4:	0800abe8 	.word	0x0800abe8

08008cb8 <Adv_Cancel>:
 *
 * SPECIFIC FUNCTIONS FOR CUSTOM
 *
 *************************************************************/
static void Adv_Cancel(void)
{
 8008cb8:	b580      	push	{r7, lr}
 8008cba:	b082      	sub	sp, #8
 8008cbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_1 */

  /* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 8008cbe:	4b0a      	ldr	r3, [pc, #40]	; (8008ce8 <Adv_Cancel+0x30>)
 8008cc0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008cc4:	2b05      	cmp	r3, #5
 8008cc6:	d00a      	beq.n	8008cde <Adv_Cancel+0x26>
  {
    tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8008cc8:	2392      	movs	r3, #146	; 0x92
 8008cca:	71fb      	strb	r3, [r7, #7]

    ret = aci_gap_set_non_discoverable();
 8008ccc:	f7fd fc7c 	bl	80065c8 <aci_gap_set_non_discoverable>
 8008cd0:	4603      	mov	r3, r0
 8008cd2:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8008cd4:	4b04      	ldr	r3, [pc, #16]	; (8008ce8 <Adv_Cancel+0x30>)
 8008cd6:	2200      	movs	r2, #0
 8008cd8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* USER CODE BEGIN Adv_Cancel_2 */

  /* USER CODE END Adv_Cancel_2 */

  return;
 8008cdc:	bf00      	nop
 8008cde:	bf00      	nop
}
 8008ce0:	3708      	adds	r7, #8
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	bd80      	pop	{r7, pc}
 8008ce6:	bf00      	nop
 8008ce8:	20000be4 	.word	0x20000be4

08008cec <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 8008cec:	b580      	push	{r7, lr}
 8008cee:	b082      	sub	sp, #8
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8008cf4:	2100      	movs	r1, #0
 8008cf6:	2002      	movs	r0, #2
 8008cf8:	f000 fcd6 	bl	80096a8 <UTIL_SEQ_SetTask>

  return;
 8008cfc:	bf00      	nop
}
 8008cfe:	3708      	adds	r7, #8
 8008d00:	46bd      	mov	sp, r7
 8008d02:	bd80      	pop	{r7, pc}

08008d04 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 8008d04:	b580      	push	{r7, lr}
 8008d06:	b082      	sub	sp, #8
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8008d0c:	2001      	movs	r0, #1
 8008d0e:	f000 fd37 	bl	8009780 <UTIL_SEQ_SetEvt>

  return;
 8008d12:	bf00      	nop
}
 8008d14:	3708      	adds	r7, #8
 8008d16:	46bd      	mov	sp, r7
 8008d18:	bd80      	pop	{r7, pc}

08008d1a <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 8008d1a:	b580      	push	{r7, lr}
 8008d1c:	b082      	sub	sp, #8
 8008d1e:	af00      	add	r7, sp, #0
 8008d20:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8008d22:	2001      	movs	r0, #1
 8008d24:	f000 fd4c 	bl	80097c0 <UTIL_SEQ_WaitEvt>

  return;
 8008d28:	bf00      	nop
}
 8008d2a:	3708      	adds	r7, #8
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	bd80      	pop	{r7, pc}

08008d30 <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 8008d30:	b580      	push	{r7, lr}
 8008d32:	b084      	sub	sp, #16
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	685b      	ldr	r3, [r3, #4]
 8008d40:	3308      	adds	r3, #8
 8008d42:	4618      	mov	r0, r3
 8008d44:	f7fe fdfe 	bl	8007944 <SVCCTL_UserEvtRx>
 8008d48:	4603      	mov	r3, r0
 8008d4a:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 8008d4c:	7afb      	ldrb	r3, [r7, #11]
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d003      	beq.n	8008d5a <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	2201      	movs	r2, #1
 8008d56:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 8008d58:	e003      	b.n	8008d62 <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	2200      	movs	r2, #0
 8008d5e:	701a      	strb	r2, [r3, #0]
  return;
 8008d60:	bf00      	nop
}
 8008d62:	3710      	adds	r7, #16
 8008d64:	46bd      	mov	sp, r7
 8008d66:	bd80      	pop	{r7, pc}

08008d68 <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 8008d68:	b580      	push	{r7, lr}
 8008d6a:	b084      	sub	sp, #16
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	4603      	mov	r3, r0
 8008d70:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 8008d72:	79fb      	ldrb	r3, [r7, #7]
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d002      	beq.n	8008d7e <BLE_StatusNot+0x16>
 8008d78:	2b01      	cmp	r3, #1
 8008d7a:	d006      	beq.n	8008d8a <BLE_StatusNot+0x22>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 8008d7c:	e00b      	b.n	8008d96 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8008d7e:	2303      	movs	r3, #3
 8008d80:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 8008d82:	68f8      	ldr	r0, [r7, #12]
 8008d84:	f000 fcbc 	bl	8009700 <UTIL_SEQ_PauseTask>
      break;
 8008d88:	e005      	b.n	8008d96 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8008d8a:	2303      	movs	r3, #3
 8008d8c:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 8008d8e:	68f8      	ldr	r0, [r7, #12]
 8008d90:	f000 fcd6 	bl	8009740 <UTIL_SEQ_ResumeTask>
      break;
 8008d94:	bf00      	nop
  }

  return;
 8008d96:	bf00      	nop
}
 8008d98:	3710      	adds	r7, #16
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	bd80      	pop	{r7, pc}

08008d9e <Custom_APP_Notification>:
  /* USER CODE END CUSTOM_STM_App_Notification_2 */
  return;
}

void Custom_APP_Notification(Custom_App_ConnHandle_Not_evt_t *pNotification)
{
 8008d9e:	b480      	push	{r7}
 8008da0:	b083      	sub	sp, #12
 8008da2:	af00      	add	r7, sp, #0
 8008da4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_APP_Notification_1 */

  /* USER CODE END CUSTOM_APP_Notification_1 */

  switch (pNotification->Custom_Evt_Opcode)
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	781b      	ldrb	r3, [r3, #0]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d002      	beq.n	8008db4 <Custom_APP_Notification+0x16>
 8008dae:	2b01      	cmp	r3, #1
 8008db0:	d002      	beq.n	8008db8 <Custom_APP_Notification+0x1a>

    default:
      /* USER CODE BEGIN CUSTOM_APP_Notification_default */

      /* USER CODE END CUSTOM_APP_Notification_default */
      break;
 8008db2:	e002      	b.n	8008dba <Custom_APP_Notification+0x1c>
      break;
 8008db4:	bf00      	nop
 8008db6:	e000      	b.n	8008dba <Custom_APP_Notification+0x1c>
      break;
 8008db8:	bf00      	nop

  /* USER CODE BEGIN CUSTOM_APP_Notification_2 */

  /* USER CODE END CUSTOM_APP_Notification_2 */

  return;
 8008dba:	bf00      	nop
}
 8008dbc:	370c      	adds	r7, #12
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc4:	4770      	bx	lr

08008dc6 <Custom_APP_Init>:

void Custom_APP_Init(void)
{
 8008dc6:	b480      	push	{r7}
 8008dc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CUSTOM_APP_Init */

  /* USER CODE END CUSTOM_APP_Init */
  return;
 8008dca:	bf00      	nop
}
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd2:	4770      	bx	lr

08008dd4 <Custom_STM_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Custom_STM_Event_Handler(void *Event)
{
 8008dd4:	b480      	push	{r7}
 8008dd6:	b08b      	sub	sp, #44	; 0x2c
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
  Custom_STM_App_Notification_evt_t     Notification;
  /* USER CODE BEGIN Custom_STM_Event_Handler_1 */

  /* USER CODE END Custom_STM_Event_Handler_1 */

  return_value = SVCCTL_EvtNotAck;
 8008ddc:	2300      	movs	r3, #0
 8008dde:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	3301      	adds	r3, #1
 8008de6:	623b      	str	r3, [r7, #32]

  switch (event_pckt->evt)
 8008de8:	6a3b      	ldr	r3, [r7, #32]
 8008dea:	781b      	ldrb	r3, [r3, #0]
 8008dec:	2bff      	cmp	r3, #255	; 0xff
 8008dee:	d12b      	bne.n	8008e48 <Custom_STM_Event_Handler+0x74>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 8008df0:	6a3b      	ldr	r3, [r7, #32]
 8008df2:	3302      	adds	r3, #2
 8008df4:	61fb      	str	r3, [r7, #28]
      switch (blecore_evt->ecode)
 8008df6:	69fb      	ldr	r3, [r7, #28]
 8008df8:	881b      	ldrh	r3, [r3, #0]
 8008dfa:	b29b      	uxth	r3, r3
 8008dfc:	f640 4214 	movw	r2, #3092	; 0xc14
 8008e00:	4293      	cmp	r3, r2
 8008e02:	d01b      	beq.n	8008e3c <Custom_STM_Event_Handler+0x68>
 8008e04:	f640 4214 	movw	r2, #3092	; 0xc14
 8008e08:	4293      	cmp	r3, r2
 8008e0a:	dc19      	bgt.n	8008e40 <Custom_STM_Event_Handler+0x6c>
 8008e0c:	f640 4201 	movw	r2, #3073	; 0xc01
 8008e10:	4293      	cmp	r3, r2
 8008e12:	d003      	beq.n	8008e1c <Custom_STM_Event_Handler+0x48>
 8008e14:	f640 4213 	movw	r2, #3091	; 0xc13
 8008e18:	4293      	cmp	r3, r2

          /* USER CODE END EVT_BLUE_GATT_WRITE_PERMIT_REQ_BEGIN */
          /* USER CODE BEGIN EVT_BLUE_GATT_WRITE_PERMIT_REQ_END */

          /* USER CODE END EVT_BLUE_GATT_WRITE_PERMIT_REQ_END */
          break;
 8008e1a:	e014      	b.n	8008e46 <Custom_STM_Event_Handler+0x72>
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 8008e1c:	69fb      	ldr	r3, [r7, #28]
 8008e1e:	3302      	adds	r3, #2
 8008e20:	61bb      	str	r3, [r7, #24]
          if (attribute_modified->Attr_Handle == (CustomContext.CustomMycharwriteHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 8008e22:	69bb      	ldr	r3, [r7, #24]
 8008e24:	885b      	ldrh	r3, [r3, #2]
 8008e26:	b29b      	uxth	r3, r3
 8008e28:	461a      	mov	r2, r3
 8008e2a:	4b0c      	ldr	r3, [pc, #48]	; (8008e5c <Custom_STM_Event_Handler+0x88>)
 8008e2c:	885b      	ldrh	r3, [r3, #2]
 8008e2e:	3301      	adds	r3, #1
 8008e30:	429a      	cmp	r2, r3
 8008e32:	d107      	bne.n	8008e44 <Custom_STM_Event_Handler+0x70>
            return_value = SVCCTL_EvtAckFlowEnable;
 8008e34:	2301      	movs	r3, #1
 8008e36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          break;
 8008e3a:	e003      	b.n	8008e44 <Custom_STM_Event_Handler+0x70>
          break;
 8008e3c:	bf00      	nop
 8008e3e:	e004      	b.n	8008e4a <Custom_STM_Event_Handler+0x76>
        /* USER CODE END BLECORE_EVT */
        default:
          /* USER CODE BEGIN EVT_DEFAULT */

          /* USER CODE END EVT_DEFAULT */
          break;
 8008e40:	bf00      	nop
 8008e42:	e002      	b.n	8008e4a <Custom_STM_Event_Handler+0x76>
          break;
 8008e44:	bf00      	nop
      }
      /* USER CODE BEGIN EVT_VENDOR*/

      /* USER CODE END EVT_VENDOR*/
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8008e46:	e000      	b.n	8008e4a <Custom_STM_Event_Handler+0x76>

    default:
      /* USER CODE BEGIN EVENT_PCKT*/

      /* USER CODE END EVENT_PCKT*/
      break;
 8008e48:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_Event_Handler_2 */

  /* USER CODE END Custom_STM_Event_Handler_2 */

  return(return_value);
 8008e4a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}/* end Custom_STM_Event_Handler */
 8008e4e:	4618      	mov	r0, r3
 8008e50:	372c      	adds	r7, #44	; 0x2c
 8008e52:	46bd      	mov	sp, r7
 8008e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e58:	4770      	bx	lr
 8008e5a:	bf00      	nop
 8008e5c:	20000c6c 	.word	0x20000c6c

08008e60 <SVCCTL_InitCustomSvc>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void SVCCTL_InitCustomSvc(void)
{
 8008e60:	b580      	push	{r7, lr}
 8008e62:	b08c      	sub	sp, #48	; 0x30
 8008e64:	af06      	add	r7, sp, #24

  Char_UUID_t  uuid;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8008e66:	2392      	movs	r3, #146	; 0x92
 8008e68:	75fb      	strb	r3, [r7, #23]
  /* USER CODE END SVCCTL_InitCustomSvc_1 */

  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(Custom_STM_Event_Handler);
 8008e6a:	4834      	ldr	r0, [pc, #208]	; (8008f3c <SVCCTL_InitCustomSvc+0xdc>)
 8008e6c:	f7fe fd50 	bl	8007910 <SVCCTL_RegisterSvcHandler>
   * service_max_attribute_record = 1 for mySvc +
   *                                2 for myCharWrite +
   *                              = 3
   */

  COPY_MYSVC_UUID(uuid.Char_UUID_128);
 8008e70:	238f      	movs	r3, #143	; 0x8f
 8008e72:	713b      	strb	r3, [r7, #4]
 8008e74:	23e5      	movs	r3, #229	; 0xe5
 8008e76:	717b      	strb	r3, [r7, #5]
 8008e78:	23b3      	movs	r3, #179	; 0xb3
 8008e7a:	71bb      	strb	r3, [r7, #6]
 8008e7c:	23d5      	movs	r3, #213	; 0xd5
 8008e7e:	71fb      	strb	r3, [r7, #7]
 8008e80:	232e      	movs	r3, #46	; 0x2e
 8008e82:	723b      	strb	r3, [r7, #8]
 8008e84:	237f      	movs	r3, #127	; 0x7f
 8008e86:	727b      	strb	r3, [r7, #9]
 8008e88:	234a      	movs	r3, #74	; 0x4a
 8008e8a:	72bb      	strb	r3, [r7, #10]
 8008e8c:	2398      	movs	r3, #152	; 0x98
 8008e8e:	72fb      	strb	r3, [r7, #11]
 8008e90:	232a      	movs	r3, #42	; 0x2a
 8008e92:	733b      	strb	r3, [r7, #12]
 8008e94:	2348      	movs	r3, #72	; 0x48
 8008e96:	737b      	strb	r3, [r7, #13]
 8008e98:	237a      	movs	r3, #122	; 0x7a
 8008e9a:	73bb      	strb	r3, [r7, #14]
 8008e9c:	23cc      	movs	r3, #204	; 0xcc
 8008e9e:	73fb      	strb	r3, [r7, #15]
 8008ea0:	2300      	movs	r3, #0
 8008ea2:	743b      	strb	r3, [r7, #16]
 8008ea4:	2300      	movs	r3, #0
 8008ea6:	747b      	strb	r3, [r7, #17]
 8008ea8:	2300      	movs	r3, #0
 8008eaa:	74bb      	strb	r3, [r7, #18]
 8008eac:	2300      	movs	r3, #0
 8008eae:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_service(UUID_TYPE_128,
 8008eb0:	1d39      	adds	r1, r7, #4
 8008eb2:	4b23      	ldr	r3, [pc, #140]	; (8008f40 <SVCCTL_InitCustomSvc+0xe0>)
 8008eb4:	9300      	str	r3, [sp, #0]
 8008eb6:	2303      	movs	r3, #3
 8008eb8:	2201      	movs	r2, #1
 8008eba:	2002      	movs	r0, #2
 8008ebc:	f7fd fff0 	bl	8006ea0 <aci_gatt_add_service>
 8008ec0:	4603      	mov	r3, r0
 8008ec2:	75fb      	strb	r3, [r7, #23]
  }

  /**
   *  myCharWrite
   */
  COPY_MYCHARWRITE_UUID(uuid.Char_UUID_128);
 8008ec4:	2319      	movs	r3, #25
 8008ec6:	713b      	strb	r3, [r7, #4]
 8008ec8:	23ed      	movs	r3, #237	; 0xed
 8008eca:	717b      	strb	r3, [r7, #5]
 8008ecc:	2382      	movs	r3, #130	; 0x82
 8008ece:	71bb      	strb	r3, [r7, #6]
 8008ed0:	23ae      	movs	r3, #174	; 0xae
 8008ed2:	71fb      	strb	r3, [r7, #7]
 8008ed4:	23ed      	movs	r3, #237	; 0xed
 8008ed6:	723b      	strb	r3, [r7, #8]
 8008ed8:	2321      	movs	r3, #33	; 0x21
 8008eda:	727b      	strb	r3, [r7, #9]
 8008edc:	234c      	movs	r3, #76	; 0x4c
 8008ede:	72bb      	strb	r3, [r7, #10]
 8008ee0:	239d      	movs	r3, #157	; 0x9d
 8008ee2:	72fb      	strb	r3, [r7, #11]
 8008ee4:	2341      	movs	r3, #65	; 0x41
 8008ee6:	733b      	strb	r3, [r7, #12]
 8008ee8:	2345      	movs	r3, #69	; 0x45
 8008eea:	737b      	strb	r3, [r7, #13]
 8008eec:	2322      	movs	r3, #34	; 0x22
 8008eee:	73bb      	strb	r3, [r7, #14]
 8008ef0:	238e      	movs	r3, #142	; 0x8e
 8008ef2:	73fb      	strb	r3, [r7, #15]
 8008ef4:	2300      	movs	r3, #0
 8008ef6:	743b      	strb	r3, [r7, #16]
 8008ef8:	2300      	movs	r3, #0
 8008efa:	747b      	strb	r3, [r7, #17]
 8008efc:	2300      	movs	r3, #0
 8008efe:	74bb      	strb	r3, [r7, #18]
 8008f00:	2300      	movs	r3, #0
 8008f02:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomMysvcHdle,
 8008f04:	4b0e      	ldr	r3, [pc, #56]	; (8008f40 <SVCCTL_InitCustomSvc+0xe0>)
 8008f06:	8818      	ldrh	r0, [r3, #0]
 8008f08:	4b0e      	ldr	r3, [pc, #56]	; (8008f44 <SVCCTL_InitCustomSvc+0xe4>)
 8008f0a:	781b      	ldrb	r3, [r3, #0]
 8008f0c:	b29b      	uxth	r3, r3
 8008f0e:	1d3a      	adds	r2, r7, #4
 8008f10:	490d      	ldr	r1, [pc, #52]	; (8008f48 <SVCCTL_InitCustomSvc+0xe8>)
 8008f12:	9105      	str	r1, [sp, #20]
 8008f14:	2100      	movs	r1, #0
 8008f16:	9104      	str	r1, [sp, #16]
 8008f18:	2110      	movs	r1, #16
 8008f1a:	9103      	str	r1, [sp, #12]
 8008f1c:	2101      	movs	r1, #1
 8008f1e:	9102      	str	r1, [sp, #8]
 8008f20:	2100      	movs	r1, #0
 8008f22:	9101      	str	r1, [sp, #4]
 8008f24:	2108      	movs	r1, #8
 8008f26:	9100      	str	r1, [sp, #0]
 8008f28:	2102      	movs	r1, #2
 8008f2a:	f7fe f88f 	bl	800704c <aci_gatt_add_char>
 8008f2e:	4603      	mov	r3, r0
 8008f30:	75fb      	strb	r3, [r7, #23]

  /* USER CODE BEGIN SVCCTL_InitCustomSvc_2 */

  /* USER CODE END SVCCTL_InitCustomSvc_2 */

  return;
 8008f32:	bf00      	nop
}
 8008f34:	3718      	adds	r7, #24
 8008f36:	46bd      	mov	sp, r7
 8008f38:	bd80      	pop	{r7, pc}
 8008f3a:	bf00      	nop
 8008f3c:	08008dd5 	.word	0x08008dd5
 8008f40:	20000c6c 	.word	0x20000c6c
 8008f44:	2000001d 	.word	0x2000001d
 8008f48:	20000c6e 	.word	0x20000c6e

08008f4c <LL_PWR_EnableBootC2>:
{
 8008f4c:	b480      	push	{r7}
 8008f4e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8008f50:	4b05      	ldr	r3, [pc, #20]	; (8008f68 <LL_PWR_EnableBootC2+0x1c>)
 8008f52:	68db      	ldr	r3, [r3, #12]
 8008f54:	4a04      	ldr	r2, [pc, #16]	; (8008f68 <LL_PWR_EnableBootC2+0x1c>)
 8008f56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008f5a:	60d3      	str	r3, [r2, #12]
}
 8008f5c:	bf00      	nop
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f64:	4770      	bx	lr
 8008f66:	bf00      	nop
 8008f68:	58000400 	.word	0x58000400

08008f6c <LL_C2_EXTI_EnableEvent_32_63>:
{
 8008f6c:	b480      	push	{r7}
 8008f6e:	b083      	sub	sp, #12
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 8008f74:	4b06      	ldr	r3, [pc, #24]	; (8008f90 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8008f76:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8008f7a:	4905      	ldr	r1, [pc, #20]	; (8008f90 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	4313      	orrs	r3, r2
 8008f80:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 8008f84:	bf00      	nop
 8008f86:	370c      	adds	r7, #12
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f8e:	4770      	bx	lr
 8008f90:	58000800 	.word	0x58000800

08008f94 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8008f94:	b480      	push	{r7}
 8008f96:	b083      	sub	sp, #12
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8008f9c:	4b05      	ldr	r3, [pc, #20]	; (8008fb4 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8008f9e:	6a1a      	ldr	r2, [r3, #32]
 8008fa0:	4904      	ldr	r1, [pc, #16]	; (8008fb4 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	4313      	orrs	r3, r2
 8008fa6:	620b      	str	r3, [r1, #32]
}
 8008fa8:	bf00      	nop
 8008faa:	370c      	adds	r7, #12
 8008fac:	46bd      	mov	sp, r7
 8008fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb2:	4770      	bx	lr
 8008fb4:	58000800 	.word	0x58000800

08008fb8 <LL_AHB3_GRP1_EnableClock>:
{
 8008fb8:	b480      	push	{r7}
 8008fba:	b085      	sub	sp, #20
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8008fc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008fc4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008fc6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	4313      	orrs	r3, r2
 8008fce:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8008fd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008fd4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	4013      	ands	r3, r2
 8008fda:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8008fdc:	68fb      	ldr	r3, [r7, #12]
}
 8008fde:	bf00      	nop
 8008fe0:	3714      	adds	r7, #20
 8008fe2:	46bd      	mov	sp, r7
 8008fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe8:	4770      	bx	lr

08008fea <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8008fea:	b480      	push	{r7}
 8008fec:	b085      	sub	sp, #20
 8008fee:	af00      	add	r7, sp, #0
 8008ff0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 8008ff2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008ff6:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8008ffa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	4313      	orrs	r3, r2
 8009002:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 8009006:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800900a:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	4013      	ands	r3, r2
 8009012:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8009014:	68fb      	ldr	r3, [r7, #12]
}
 8009016:	bf00      	nop
 8009018:	3714      	adds	r7, #20
 800901a:	46bd      	mov	sp, r7
 800901c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009020:	4770      	bx	lr

08009022 <LL_C1_IPCC_EnableIT_TXF>:
{
 8009022:	b480      	push	{r7}
 8009024:	b083      	sub	sp, #12
 8009026:	af00      	add	r7, sp, #0
 8009028:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	601a      	str	r2, [r3, #0]
}
 8009036:	bf00      	nop
 8009038:	370c      	adds	r7, #12
 800903a:	46bd      	mov	sp, r7
 800903c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009040:	4770      	bx	lr

08009042 <LL_C1_IPCC_EnableIT_RXO>:
{
 8009042:	b480      	push	{r7}
 8009044:	b083      	sub	sp, #12
 8009046:	af00      	add	r7, sp, #0
 8009048:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	f043 0201 	orr.w	r2, r3, #1
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	601a      	str	r2, [r3, #0]
}
 8009056:	bf00      	nop
 8009058:	370c      	adds	r7, #12
 800905a:	46bd      	mov	sp, r7
 800905c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009060:	4770      	bx	lr

08009062 <LL_C1_IPCC_EnableTransmitChannel>:
{
 8009062:	b480      	push	{r7}
 8009064:	b083      	sub	sp, #12
 8009066:	af00      	add	r7, sp, #0
 8009068:	6078      	str	r0, [r7, #4]
 800906a:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	685a      	ldr	r2, [r3, #4]
 8009070:	683b      	ldr	r3, [r7, #0]
 8009072:	041b      	lsls	r3, r3, #16
 8009074:	43db      	mvns	r3, r3
 8009076:	401a      	ands	r2, r3
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	605a      	str	r2, [r3, #4]
}
 800907c:	bf00      	nop
 800907e:	370c      	adds	r7, #12
 8009080:	46bd      	mov	sp, r7
 8009082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009086:	4770      	bx	lr

08009088 <LL_C1_IPCC_DisableTransmitChannel>:
{
 8009088:	b480      	push	{r7}
 800908a:	b083      	sub	sp, #12
 800908c:	af00      	add	r7, sp, #0
 800908e:	6078      	str	r0, [r7, #4]
 8009090:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	685a      	ldr	r2, [r3, #4]
 8009096:	683b      	ldr	r3, [r7, #0]
 8009098:	041b      	lsls	r3, r3, #16
 800909a:	431a      	orrs	r2, r3
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	605a      	str	r2, [r3, #4]
}
 80090a0:	bf00      	nop
 80090a2:	370c      	adds	r7, #12
 80090a4:	46bd      	mov	sp, r7
 80090a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090aa:	4770      	bx	lr

080090ac <LL_C1_IPCC_EnableReceiveChannel>:
{
 80090ac:	b480      	push	{r7}
 80090ae:	b083      	sub	sp, #12
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	6078      	str	r0, [r7, #4]
 80090b4:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	685a      	ldr	r2, [r3, #4]
 80090ba:	683b      	ldr	r3, [r7, #0]
 80090bc:	43db      	mvns	r3, r3
 80090be:	401a      	ands	r2, r3
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	605a      	str	r2, [r3, #4]
}
 80090c4:	bf00      	nop
 80090c6:	370c      	adds	r7, #12
 80090c8:	46bd      	mov	sp, r7
 80090ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ce:	4770      	bx	lr

080090d0 <LL_C1_IPCC_ClearFlag_CHx>:
{
 80090d0:	b480      	push	{r7}
 80090d2:	b083      	sub	sp, #12
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]
 80090d8:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	683a      	ldr	r2, [r7, #0]
 80090de:	609a      	str	r2, [r3, #8]
}
 80090e0:	bf00      	nop
 80090e2:	370c      	adds	r7, #12
 80090e4:	46bd      	mov	sp, r7
 80090e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ea:	4770      	bx	lr

080090ec <LL_C1_IPCC_SetFlag_CHx>:
{
 80090ec:	b480      	push	{r7}
 80090ee:	b083      	sub	sp, #12
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	6078      	str	r0, [r7, #4]
 80090f4:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 80090f6:	683b      	ldr	r3, [r7, #0]
 80090f8:	041a      	lsls	r2, r3, #16
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	609a      	str	r2, [r3, #8]
}
 80090fe:	bf00      	nop
 8009100:	370c      	adds	r7, #12
 8009102:	46bd      	mov	sp, r7
 8009104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009108:	4770      	bx	lr

0800910a <LL_C1_IPCC_IsActiveFlag_CHx>:
{
 800910a:	b480      	push	{r7}
 800910c:	b083      	sub	sp, #12
 800910e:	af00      	add	r7, sp, #0
 8009110:	6078      	str	r0, [r7, #4]
 8009112:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	68da      	ldr	r2, [r3, #12]
 8009118:	683b      	ldr	r3, [r7, #0]
 800911a:	4013      	ands	r3, r2
 800911c:	683a      	ldr	r2, [r7, #0]
 800911e:	429a      	cmp	r2, r3
 8009120:	d101      	bne.n	8009126 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 8009122:	2301      	movs	r3, #1
 8009124:	e000      	b.n	8009128 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 8009126:	2300      	movs	r3, #0
}
 8009128:	4618      	mov	r0, r3
 800912a:	370c      	adds	r7, #12
 800912c:	46bd      	mov	sp, r7
 800912e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009132:	4770      	bx	lr

08009134 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8009134:	b480      	push	{r7}
 8009136:	b083      	sub	sp, #12
 8009138:	af00      	add	r7, sp, #0
 800913a:	6078      	str	r0, [r7, #4]
 800913c:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	69da      	ldr	r2, [r3, #28]
 8009142:	683b      	ldr	r3, [r7, #0]
 8009144:	4013      	ands	r3, r2
 8009146:	683a      	ldr	r2, [r7, #0]
 8009148:	429a      	cmp	r2, r3
 800914a:	d101      	bne.n	8009150 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 800914c:	2301      	movs	r3, #1
 800914e:	e000      	b.n	8009152 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 8009150:	2300      	movs	r3, #0
}
 8009152:	4618      	mov	r0, r3
 8009154:	370c      	adds	r7, #12
 8009156:	46bd      	mov	sp, r7
 8009158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915c:	4770      	bx	lr
	...

08009160 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 8009160:	b580      	push	{r7, lr}
 8009162:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 8009164:	2102      	movs	r1, #2
 8009166:	4819      	ldr	r0, [pc, #100]	; (80091cc <HW_IPCC_Rx_Handler+0x6c>)
 8009168:	f7ff ffe4 	bl	8009134 <LL_C2_IPCC_IsActiveFlag_CHx>
 800916c:	4603      	mov	r3, r0
 800916e:	2b00      	cmp	r3, #0
 8009170:	d009      	beq.n	8009186 <HW_IPCC_Rx_Handler+0x26>
 8009172:	4b16      	ldr	r3, [pc, #88]	; (80091cc <HW_IPCC_Rx_Handler+0x6c>)
 8009174:	685b      	ldr	r3, [r3, #4]
 8009176:	43db      	mvns	r3, r3
 8009178:	f003 0302 	and.w	r3, r3, #2
 800917c:	2b00      	cmp	r3, #0
 800917e:	d002      	beq.n	8009186 <HW_IPCC_Rx_Handler+0x26>
  {
      HW_IPCC_SYS_EvtHandler();
 8009180:	f000 f8da 	bl	8009338 <HW_IPCC_SYS_EvtHandler>
 8009184:	e01f      	b.n	80091c6 <HW_IPCC_Rx_Handler+0x66>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 8009186:	2101      	movs	r1, #1
 8009188:	4810      	ldr	r0, [pc, #64]	; (80091cc <HW_IPCC_Rx_Handler+0x6c>)
 800918a:	f7ff ffd3 	bl	8009134 <LL_C2_IPCC_IsActiveFlag_CHx>
 800918e:	4603      	mov	r3, r0
 8009190:	2b00      	cmp	r3, #0
 8009192:	d008      	beq.n	80091a6 <HW_IPCC_Rx_Handler+0x46>
 8009194:	4b0d      	ldr	r3, [pc, #52]	; (80091cc <HW_IPCC_Rx_Handler+0x6c>)
 8009196:	685b      	ldr	r3, [r3, #4]
 8009198:	f003 0301 	and.w	r3, r3, #1
 800919c:	2b00      	cmp	r3, #0
 800919e:	d102      	bne.n	80091a6 <HW_IPCC_Rx_Handler+0x46>
  {
    HW_IPCC_BLE_EvtHandler();
 80091a0:	f000 f88e 	bl	80092c0 <HW_IPCC_BLE_EvtHandler>
 80091a4:	e00f      	b.n	80091c6 <HW_IPCC_Rx_Handler+0x66>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 80091a6:	2108      	movs	r1, #8
 80091a8:	4808      	ldr	r0, [pc, #32]	; (80091cc <HW_IPCC_Rx_Handler+0x6c>)
 80091aa:	f7ff ffc3 	bl	8009134 <LL_C2_IPCC_IsActiveFlag_CHx>
 80091ae:	4603      	mov	r3, r0
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d009      	beq.n	80091c8 <HW_IPCC_Rx_Handler+0x68>
 80091b4:	4b05      	ldr	r3, [pc, #20]	; (80091cc <HW_IPCC_Rx_Handler+0x6c>)
 80091b6:	685b      	ldr	r3, [r3, #4]
 80091b8:	43db      	mvns	r3, r3
 80091ba:	f003 0308 	and.w	r3, r3, #8
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d002      	beq.n	80091c8 <HW_IPCC_Rx_Handler+0x68>
  {
    HW_IPCC_TRACES_EvtHandler();
 80091c2:	f000 f905 	bl	80093d0 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 80091c6:	bf00      	nop
 80091c8:	bf00      	nop
}
 80091ca:	bd80      	pop	{r7, pc}
 80091cc:	58000c00 	.word	0x58000c00

080091d0 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 80091d0:	b580      	push	{r7, lr}
 80091d2:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 80091d4:	2102      	movs	r1, #2
 80091d6:	481a      	ldr	r0, [pc, #104]	; (8009240 <HW_IPCC_Tx_Handler+0x70>)
 80091d8:	f7ff ff97 	bl	800910a <LL_C1_IPCC_IsActiveFlag_CHx>
 80091dc:	4603      	mov	r3, r0
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d109      	bne.n	80091f6 <HW_IPCC_Tx_Handler+0x26>
 80091e2:	4b17      	ldr	r3, [pc, #92]	; (8009240 <HW_IPCC_Tx_Handler+0x70>)
 80091e4:	685b      	ldr	r3, [r3, #4]
 80091e6:	43db      	mvns	r3, r3
 80091e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d002      	beq.n	80091f6 <HW_IPCC_Tx_Handler+0x26>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 80091f0:	f000 f896 	bl	8009320 <HW_IPCC_SYS_CmdEvtHandler>
 80091f4:	e020      	b.n	8009238 <HW_IPCC_Tx_Handler+0x68>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 80091f6:	2108      	movs	r1, #8
 80091f8:	4811      	ldr	r0, [pc, #68]	; (8009240 <HW_IPCC_Tx_Handler+0x70>)
 80091fa:	f7ff ff86 	bl	800910a <LL_C1_IPCC_IsActiveFlag_CHx>
 80091fe:	4603      	mov	r3, r0
 8009200:	2b00      	cmp	r3, #0
 8009202:	d109      	bne.n	8009218 <HW_IPCC_Tx_Handler+0x48>
 8009204:	4b0e      	ldr	r3, [pc, #56]	; (8009240 <HW_IPCC_Tx_Handler+0x70>)
 8009206:	685b      	ldr	r3, [r3, #4]
 8009208:	43db      	mvns	r3, r3
 800920a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800920e:	2b00      	cmp	r3, #0
 8009210:	d002      	beq.n	8009218 <HW_IPCC_Tx_Handler+0x48>
  {
    HW_IPCC_MM_FreeBufHandler();
 8009212:	f000 f8bf 	bl	8009394 <HW_IPCC_MM_FreeBufHandler>
 8009216:	e00f      	b.n	8009238 <HW_IPCC_Tx_Handler+0x68>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 8009218:	2120      	movs	r1, #32
 800921a:	4809      	ldr	r0, [pc, #36]	; (8009240 <HW_IPCC_Tx_Handler+0x70>)
 800921c:	f7ff ff75 	bl	800910a <LL_C1_IPCC_IsActiveFlag_CHx>
 8009220:	4603      	mov	r3, r0
 8009222:	2b00      	cmp	r3, #0
 8009224:	d109      	bne.n	800923a <HW_IPCC_Tx_Handler+0x6a>
 8009226:	4b06      	ldr	r3, [pc, #24]	; (8009240 <HW_IPCC_Tx_Handler+0x70>)
 8009228:	685b      	ldr	r3, [r3, #4]
 800922a:	43db      	mvns	r3, r3
 800922c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009230:	2b00      	cmp	r3, #0
 8009232:	d002      	beq.n	800923a <HW_IPCC_Tx_Handler+0x6a>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 8009234:	f000 f850 	bl	80092d8 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 8009238:	bf00      	nop
 800923a:	bf00      	nop
}
 800923c:	bd80      	pop	{r7, pc}
 800923e:	bf00      	nop
 8009240:	58000c00 	.word	0x58000c00

08009244 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 8009244:	b580      	push	{r7, lr}
 8009246:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 8009248:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800924c:	f7ff fecd 	bl	8008fea <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 8009250:	f44f 7000 	mov.w	r0, #512	; 0x200
 8009254:	f7ff fe9e 	bl	8008f94 <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 8009258:	f44f 7000 	mov.w	r0, #512	; 0x200
 800925c:	f7ff fe86 	bl	8008f6c <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 8009260:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 8009262:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 8009264:	f7ff fe72 	bl	8008f4c <LL_PWR_EnableBootC2>

  return;
 8009268:	bf00      	nop
}
 800926a:	bd80      	pop	{r7, pc}

0800926c <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 800926c:	b580      	push	{r7, lr}
 800926e:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 8009270:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8009274:	f7ff fea0 	bl	8008fb8 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 8009278:	4806      	ldr	r0, [pc, #24]	; (8009294 <HW_IPCC_Init+0x28>)
 800927a:	f7ff fee2 	bl	8009042 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 800927e:	4805      	ldr	r0, [pc, #20]	; (8009294 <HW_IPCC_Init+0x28>)
 8009280:	f7ff fecf 	bl	8009022 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8009284:	202c      	movs	r0, #44	; 0x2c
 8009286:	f7f9 fb36 	bl	80028f6 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 800928a:	202d      	movs	r0, #45	; 0x2d
 800928c:	f7f9 fb33 	bl	80028f6 <HAL_NVIC_EnableIRQ>

  return;
 8009290:	bf00      	nop
}
 8009292:	bd80      	pop	{r7, pc}
 8009294:	58000c00 	.word	0x58000c00

08009298 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 8009298:	b580      	push	{r7, lr}
 800929a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800929c:	2101      	movs	r1, #1
 800929e:	4802      	ldr	r0, [pc, #8]	; (80092a8 <HW_IPCC_BLE_Init+0x10>)
 80092a0:	f7ff ff04 	bl	80090ac <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80092a4:	bf00      	nop
}
 80092a6:	bd80      	pop	{r7, pc}
 80092a8:	58000c00 	.word	0x58000c00

080092ac <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 80092ac:	b580      	push	{r7, lr}
 80092ae:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 80092b0:	2101      	movs	r1, #1
 80092b2:	4802      	ldr	r0, [pc, #8]	; (80092bc <HW_IPCC_BLE_SendCmd+0x10>)
 80092b4:	f7ff ff1a 	bl	80090ec <LL_C1_IPCC_SetFlag_CHx>

  return;
 80092b8:	bf00      	nop
}
 80092ba:	bd80      	pop	{r7, pc}
 80092bc:	58000c00 	.word	0x58000c00

080092c0 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 80092c0:	b580      	push	{r7, lr}
 80092c2:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 80092c4:	f7fe ffde 	bl	8008284 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 80092c8:	2101      	movs	r1, #1
 80092ca:	4802      	ldr	r0, [pc, #8]	; (80092d4 <HW_IPCC_BLE_EvtHandler+0x14>)
 80092cc:	f7ff ff00 	bl	80090d0 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 80092d0:	bf00      	nop
}
 80092d2:	bd80      	pop	{r7, pc}
 80092d4:	58000c00 	.word	0x58000c00

080092d8 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 80092d8:	b580      	push	{r7, lr}
 80092da:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 80092dc:	2120      	movs	r1, #32
 80092de:	4803      	ldr	r0, [pc, #12]	; (80092ec <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 80092e0:	f7ff fed2 	bl	8009088 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 80092e4:	f7fe fffe 	bl	80082e4 <HW_IPCC_BLE_AclDataAckNot>

  return;
 80092e8:	bf00      	nop
}
 80092ea:	bd80      	pop	{r7, pc}
 80092ec:	58000c00 	.word	0x58000c00

080092f0 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 80092f0:	b580      	push	{r7, lr}
 80092f2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 80092f4:	2102      	movs	r1, #2
 80092f6:	4802      	ldr	r0, [pc, #8]	; (8009300 <HW_IPCC_SYS_Init+0x10>)
 80092f8:	f7ff fed8 	bl	80090ac <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80092fc:	bf00      	nop
}
 80092fe:	bd80      	pop	{r7, pc}
 8009300:	58000c00 	.word	0x58000c00

08009304 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 8009304:	b580      	push	{r7, lr}
 8009306:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8009308:	2102      	movs	r1, #2
 800930a:	4804      	ldr	r0, [pc, #16]	; (800931c <HW_IPCC_SYS_SendCmd+0x18>)
 800930c:	f7ff feee 	bl	80090ec <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8009310:	2102      	movs	r1, #2
 8009312:	4802      	ldr	r0, [pc, #8]	; (800931c <HW_IPCC_SYS_SendCmd+0x18>)
 8009314:	f7ff fea5 	bl	8009062 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8009318:	bf00      	nop
}
 800931a:	bd80      	pop	{r7, pc}
 800931c:	58000c00 	.word	0x58000c00

08009320 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 8009320:	b580      	push	{r7, lr}
 8009322:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8009324:	2102      	movs	r1, #2
 8009326:	4803      	ldr	r0, [pc, #12]	; (8009334 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 8009328:	f7ff feae 	bl	8009088 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 800932c:	f7ff f82a 	bl	8008384 <HW_IPCC_SYS_CmdEvtNot>

  return;
 8009330:	bf00      	nop
}
 8009332:	bd80      	pop	{r7, pc}
 8009334:	58000c00 	.word	0x58000c00

08009338 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 8009338:	b580      	push	{r7, lr}
 800933a:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 800933c:	f7ff f838 	bl	80083b0 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8009340:	2102      	movs	r1, #2
 8009342:	4802      	ldr	r0, [pc, #8]	; (800934c <HW_IPCC_SYS_EvtHandler+0x14>)
 8009344:	f7ff fec4 	bl	80090d0 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8009348:	bf00      	nop
}
 800934a:	bd80      	pop	{r7, pc}
 800934c:	58000c00 	.word	0x58000c00

08009350 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 8009350:	b580      	push	{r7, lr}
 8009352:	b082      	sub	sp, #8
 8009354:	af00      	add	r7, sp, #0
 8009356:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 8009358:	2108      	movs	r1, #8
 800935a:	480c      	ldr	r0, [pc, #48]	; (800938c <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800935c:	f7ff fed5 	bl	800910a <LL_C1_IPCC_IsActiveFlag_CHx>
 8009360:	4603      	mov	r3, r0
 8009362:	2b00      	cmp	r3, #0
 8009364:	d007      	beq.n	8009376 <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 8009366:	4a0a      	ldr	r2, [pc, #40]	; (8009390 <HW_IPCC_MM_SendFreeBuf+0x40>)
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800936c:	2108      	movs	r1, #8
 800936e:	4807      	ldr	r0, [pc, #28]	; (800938c <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8009370:	f7ff fe77 	bl	8009062 <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 8009374:	e006      	b.n	8009384 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800937a:	2108      	movs	r1, #8
 800937c:	4803      	ldr	r0, [pc, #12]	; (800938c <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800937e:	f7ff feb5 	bl	80090ec <LL_C1_IPCC_SetFlag_CHx>
  return;
 8009382:	bf00      	nop
}
 8009384:	3708      	adds	r7, #8
 8009386:	46bd      	mov	sp, r7
 8009388:	bd80      	pop	{r7, pc}
 800938a:	bf00      	nop
 800938c:	58000c00 	.word	0x58000c00
 8009390:	20000c70 	.word	0x20000c70

08009394 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 8009394:	b580      	push	{r7, lr}
 8009396:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8009398:	2108      	movs	r1, #8
 800939a:	4806      	ldr	r0, [pc, #24]	; (80093b4 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800939c:	f7ff fe74 	bl	8009088 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 80093a0:	4b05      	ldr	r3, [pc, #20]	; (80093b8 <HW_IPCC_MM_FreeBufHandler+0x24>)
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80093a6:	2108      	movs	r1, #8
 80093a8:	4802      	ldr	r0, [pc, #8]	; (80093b4 <HW_IPCC_MM_FreeBufHandler+0x20>)
 80093aa:	f7ff fe9f 	bl	80090ec <LL_C1_IPCC_SetFlag_CHx>

  return;
 80093ae:	bf00      	nop
}
 80093b0:	bd80      	pop	{r7, pc}
 80093b2:	bf00      	nop
 80093b4:	58000c00 	.word	0x58000c00
 80093b8:	20000c70 	.word	0x20000c70

080093bc <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 80093bc:	b580      	push	{r7, lr}
 80093be:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 80093c0:	2108      	movs	r1, #8
 80093c2:	4802      	ldr	r0, [pc, #8]	; (80093cc <HW_IPCC_TRACES_Init+0x10>)
 80093c4:	f7ff fe72 	bl	80090ac <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80093c8:	bf00      	nop
}
 80093ca:	bd80      	pop	{r7, pc}
 80093cc:	58000c00 	.word	0x58000c00

080093d0 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 80093d0:	b580      	push	{r7, lr}
 80093d2:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 80093d4:	f7ff f894 	bl	8008500 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 80093d8:	2108      	movs	r1, #8
 80093da:	4802      	ldr	r0, [pc, #8]	; (80093e4 <HW_IPCC_TRACES_EvtHandler+0x14>)
 80093dc:	f7ff fe78 	bl	80090d0 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 80093e0:	bf00      	nop
}
 80093e2:	bd80      	pop	{r7, pc}
 80093e4:	58000c00 	.word	0x58000c00

080093e8 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 80093e8:	b480      	push	{r7}
 80093ea:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 80093ec:	4b05      	ldr	r3, [pc, #20]	; (8009404 <UTIL_LPM_Init+0x1c>)
 80093ee:	2200      	movs	r2, #0
 80093f0:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 80093f2:	4b05      	ldr	r3, [pc, #20]	; (8009408 <UTIL_LPM_Init+0x20>)
 80093f4:	2200      	movs	r2, #0
 80093f6:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 80093f8:	bf00      	nop
 80093fa:	46bd      	mov	sp, r7
 80093fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009400:	4770      	bx	lr
 8009402:	bf00      	nop
 8009404:	20000c74 	.word	0x20000c74
 8009408:	20000c78 	.word	0x20000c78

0800940c <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800940c:	b480      	push	{r7}
 800940e:	b087      	sub	sp, #28
 8009410:	af00      	add	r7, sp, #0
 8009412:	6078      	str	r0, [r7, #4]
 8009414:	460b      	mov	r3, r1
 8009416:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009418:	f3ef 8310 	mrs	r3, PRIMASK
 800941c:	613b      	str	r3, [r7, #16]
  return(result);
 800941e:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8009420:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009422:	b672      	cpsid	i
}
 8009424:	bf00      	nop
  
  switch(state)
 8009426:	78fb      	ldrb	r3, [r7, #3]
 8009428:	2b00      	cmp	r3, #0
 800942a:	d008      	beq.n	800943e <UTIL_LPM_SetOffMode+0x32>
 800942c:	2b01      	cmp	r3, #1
 800942e:	d10e      	bne.n	800944e <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 8009430:	4b0d      	ldr	r3, [pc, #52]	; (8009468 <UTIL_LPM_SetOffMode+0x5c>)
 8009432:	681a      	ldr	r2, [r3, #0]
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	4313      	orrs	r3, r2
 8009438:	4a0b      	ldr	r2, [pc, #44]	; (8009468 <UTIL_LPM_SetOffMode+0x5c>)
 800943a:	6013      	str	r3, [r2, #0]
      break;
 800943c:	e008      	b.n	8009450 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	43da      	mvns	r2, r3
 8009442:	4b09      	ldr	r3, [pc, #36]	; (8009468 <UTIL_LPM_SetOffMode+0x5c>)
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	4013      	ands	r3, r2
 8009448:	4a07      	ldr	r2, [pc, #28]	; (8009468 <UTIL_LPM_SetOffMode+0x5c>)
 800944a:	6013      	str	r3, [r2, #0]
      break;
 800944c:	e000      	b.n	8009450 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 800944e:	bf00      	nop
 8009450:	697b      	ldr	r3, [r7, #20]
 8009452:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	f383 8810 	msr	PRIMASK, r3
}
 800945a:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800945c:	bf00      	nop
 800945e:	371c      	adds	r7, #28
 8009460:	46bd      	mov	sp, r7
 8009462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009466:	4770      	bx	lr
 8009468:	20000c78 	.word	0x20000c78

0800946c <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 800946c:	b580      	push	{r7, lr}
 800946e:	b090      	sub	sp, #64	; 0x40
 8009470:	af00      	add	r7, sp, #0
 8009472:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 8009474:	4b73      	ldr	r3, [pc, #460]	; (8009644 <UTIL_SEQ_Run+0x1d8>)
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 800947a:	4b72      	ldr	r3, [pc, #456]	; (8009644 <UTIL_SEQ_Run+0x1d8>)
 800947c:	681a      	ldr	r2, [r3, #0]
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	4013      	ands	r3, r2
 8009482:	4a70      	ldr	r2, [pc, #448]	; (8009644 <UTIL_SEQ_Run+0x1d8>)
 8009484:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 8009486:	4b70      	ldr	r3, [pc, #448]	; (8009648 <UTIL_SEQ_Run+0x1dc>)
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 800948c:	4b6f      	ldr	r3, [pc, #444]	; (800964c <UTIL_SEQ_Run+0x1e0>)
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 8009492:	4b6f      	ldr	r3, [pc, #444]	; (8009650 <UTIL_SEQ_Run+0x1e4>)
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	633b      	str	r3, [r7, #48]	; 0x30
  local_evtwaited =  EvtWaited;
 8009498:	4b6e      	ldr	r3, [pc, #440]	; (8009654 <UTIL_SEQ_Run+0x1e8>)
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800949e:	e08d      	b.n	80095bc <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 80094a0:	2300      	movs	r3, #0
 80094a2:	63fb      	str	r3, [r7, #60]	; 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 80094a4:	e002      	b.n	80094ac <UTIL_SEQ_Run+0x40>
    {
      counter++;
 80094a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094a8:	3301      	adds	r3, #1
 80094aa:	63fb      	str	r3, [r7, #60]	; 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 80094ac:	4a6a      	ldr	r2, [pc, #424]	; (8009658 <UTIL_SEQ_Run+0x1ec>)
 80094ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094b0:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80094b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094b6:	401a      	ands	r2, r3
 80094b8:	4b62      	ldr	r3, [pc, #392]	; (8009644 <UTIL_SEQ_Run+0x1d8>)
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	4013      	ands	r3, r2
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d0f1      	beq.n	80094a6 <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 80094c2:	4a65      	ldr	r2, [pc, #404]	; (8009658 <UTIL_SEQ_Run+0x1ec>)
 80094c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094c6:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80094ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094cc:	401a      	ands	r2, r3
 80094ce:	4b5d      	ldr	r3, [pc, #372]	; (8009644 <UTIL_SEQ_Run+0x1d8>)
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	4013      	ands	r3, r2
 80094d4:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 80094d6:	4a60      	ldr	r2, [pc, #384]	; (8009658 <UTIL_SEQ_Run+0x1ec>)
 80094d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094da:	00db      	lsls	r3, r3, #3
 80094dc:	4413      	add	r3, r2
 80094de:	685a      	ldr	r2, [r3, #4]
 80094e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094e2:	4013      	ands	r3, r2
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d106      	bne.n	80094f6 <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 80094e8:	4a5b      	ldr	r2, [pc, #364]	; (8009658 <UTIL_SEQ_Run+0x1ec>)
 80094ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094ec:	00db      	lsls	r3, r3, #3
 80094ee:	4413      	add	r3, r2
 80094f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80094f4:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 80094f6:	4a58      	ldr	r2, [pc, #352]	; (8009658 <UTIL_SEQ_Run+0x1ec>)
 80094f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094fa:	00db      	lsls	r3, r3, #3
 80094fc:	4413      	add	r3, r2
 80094fe:	685a      	ldr	r2, [r3, #4]
 8009500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009502:	4013      	ands	r3, r2
 8009504:	4618      	mov	r0, r3
 8009506:	f000 f9b3 	bl	8009870 <SEQ_BitPosition>
 800950a:	4603      	mov	r3, r0
 800950c:	461a      	mov	r2, r3
 800950e:	4b53      	ldr	r3, [pc, #332]	; (800965c <UTIL_SEQ_Run+0x1f0>)
 8009510:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 8009512:	4a51      	ldr	r2, [pc, #324]	; (8009658 <UTIL_SEQ_Run+0x1ec>)
 8009514:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009516:	00db      	lsls	r3, r3, #3
 8009518:	4413      	add	r3, r2
 800951a:	685a      	ldr	r2, [r3, #4]
 800951c:	4b4f      	ldr	r3, [pc, #316]	; (800965c <UTIL_SEQ_Run+0x1f0>)
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	2101      	movs	r1, #1
 8009522:	fa01 f303 	lsl.w	r3, r1, r3
 8009526:	43db      	mvns	r3, r3
 8009528:	401a      	ands	r2, r3
 800952a:	494b      	ldr	r1, [pc, #300]	; (8009658 <UTIL_SEQ_Run+0x1ec>)
 800952c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800952e:	00db      	lsls	r3, r3, #3
 8009530:	440b      	add	r3, r1
 8009532:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009534:	f3ef 8310 	mrs	r3, PRIMASK
 8009538:	61bb      	str	r3, [r7, #24]
  return(result);
 800953a:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800953c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800953e:	b672      	cpsid	i
}
 8009540:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 8009542:	4b46      	ldr	r3, [pc, #280]	; (800965c <UTIL_SEQ_Run+0x1f0>)
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	2201      	movs	r2, #1
 8009548:	fa02 f303 	lsl.w	r3, r2, r3
 800954c:	43da      	mvns	r2, r3
 800954e:	4b3e      	ldr	r3, [pc, #248]	; (8009648 <UTIL_SEQ_Run+0x1dc>)
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	4013      	ands	r3, r2
 8009554:	4a3c      	ldr	r2, [pc, #240]	; (8009648 <UTIL_SEQ_Run+0x1dc>)
 8009556:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8009558:	2302      	movs	r3, #2
 800955a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800955c:	e013      	b.n	8009586 <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800955e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009560:	3b01      	subs	r3, #1
 8009562:	4a3d      	ldr	r2, [pc, #244]	; (8009658 <UTIL_SEQ_Run+0x1ec>)
 8009564:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8009568:	4b3c      	ldr	r3, [pc, #240]	; (800965c <UTIL_SEQ_Run+0x1f0>)
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	2201      	movs	r2, #1
 800956e:	fa02 f303 	lsl.w	r3, r2, r3
 8009572:	43da      	mvns	r2, r3
 8009574:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009576:	3b01      	subs	r3, #1
 8009578:	400a      	ands	r2, r1
 800957a:	4937      	ldr	r1, [pc, #220]	; (8009658 <UTIL_SEQ_Run+0x1ec>)
 800957c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8009580:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009582:	3b01      	subs	r3, #1
 8009584:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009586:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009588:	2b00      	cmp	r3, #0
 800958a:	d1e8      	bne.n	800955e <UTIL_SEQ_Run+0xf2>
 800958c:	6a3b      	ldr	r3, [r7, #32]
 800958e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009590:	697b      	ldr	r3, [r7, #20]
 8009592:	f383 8810 	msr	PRIMASK, r3
}
 8009596:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 8009598:	4b30      	ldr	r3, [pc, #192]	; (800965c <UTIL_SEQ_Run+0x1f0>)
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	4a30      	ldr	r2, [pc, #192]	; (8009660 <UTIL_SEQ_Run+0x1f4>)
 800959e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80095a2:	4798      	blx	r3

    local_taskset = TaskSet;
 80095a4:	4b28      	ldr	r3, [pc, #160]	; (8009648 <UTIL_SEQ_Run+0x1dc>)
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	63bb      	str	r3, [r7, #56]	; 0x38
    local_evtset = EvtSet;
 80095aa:	4b28      	ldr	r3, [pc, #160]	; (800964c <UTIL_SEQ_Run+0x1e0>)
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	637b      	str	r3, [r7, #52]	; 0x34
    local_taskmask = TaskMask;
 80095b0:	4b27      	ldr	r3, [pc, #156]	; (8009650 <UTIL_SEQ_Run+0x1e4>)
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	633b      	str	r3, [r7, #48]	; 0x30
    local_evtwaited = EvtWaited;
 80095b6:	4b27      	ldr	r3, [pc, #156]	; (8009654 <UTIL_SEQ_Run+0x1e8>)
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 80095bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80095be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095c0:	401a      	ands	r2, r3
 80095c2:	4b20      	ldr	r3, [pc, #128]	; (8009644 <UTIL_SEQ_Run+0x1d8>)
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	4013      	ands	r3, r2
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d005      	beq.n	80095d8 <UTIL_SEQ_Run+0x16c>
 80095cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80095ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095d0:	4013      	ands	r3, r2
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	f43f af64 	beq.w	80094a0 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 80095d8:	4b20      	ldr	r3, [pc, #128]	; (800965c <UTIL_SEQ_Run+0x1f0>)
 80095da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80095de:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 80095e0:	f000 f938 	bl	8009854 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80095e4:	f3ef 8310 	mrs	r3, PRIMASK
 80095e8:	613b      	str	r3, [r7, #16]
  return(result);
 80095ea:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 80095ec:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 80095ee:	b672      	cpsid	i
}
 80095f0:	bf00      	nop
  local_taskset = TaskSet;
 80095f2:	4b15      	ldr	r3, [pc, #84]	; (8009648 <UTIL_SEQ_Run+0x1dc>)
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 80095f8:	4b14      	ldr	r3, [pc, #80]	; (800964c <UTIL_SEQ_Run+0x1e0>)
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 80095fe:	4b14      	ldr	r3, [pc, #80]	; (8009650 <UTIL_SEQ_Run+0x1e4>)
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	633b      	str	r3, [r7, #48]	; 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 8009604:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009608:	401a      	ands	r2, r3
 800960a:	4b0e      	ldr	r3, [pc, #56]	; (8009644 <UTIL_SEQ_Run+0x1d8>)
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	4013      	ands	r3, r2
 8009610:	2b00      	cmp	r3, #0
 8009612:	d107      	bne.n	8009624 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 8009614:	4b0f      	ldr	r3, [pc, #60]	; (8009654 <UTIL_SEQ_Run+0x1e8>)
 8009616:	681a      	ldr	r2, [r3, #0]
 8009618:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800961a:	4013      	ands	r3, r2
 800961c:	2b00      	cmp	r3, #0
 800961e:	d101      	bne.n	8009624 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 8009620:	f7f7 fbf8 	bl	8000e14 <UTIL_SEQ_Idle>
 8009624:	69fb      	ldr	r3, [r7, #28]
 8009626:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	f383 8810 	msr	PRIMASK, r3
}
 800962e:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 8009630:	f000 f917 	bl	8009862 <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 8009634:	4a03      	ldr	r2, [pc, #12]	; (8009644 <UTIL_SEQ_Run+0x1d8>)
 8009636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009638:	6013      	str	r3, [r2, #0]

  return;
 800963a:	bf00      	nop
}
 800963c:	3740      	adds	r7, #64	; 0x40
 800963e:	46bd      	mov	sp, r7
 8009640:	bd80      	pop	{r7, pc}
 8009642:	bf00      	nop
 8009644:	20000024 	.word	0x20000024
 8009648:	20000c7c 	.word	0x20000c7c
 800964c:	20000c80 	.word	0x20000c80
 8009650:	20000020 	.word	0x20000020
 8009654:	20000c84 	.word	0x20000c84
 8009658:	20000d0c 	.word	0x20000d0c
 800965c:	20000c88 	.word	0x20000c88
 8009660:	20000c8c 	.word	0x20000c8c

08009664 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 8009664:	b580      	push	{r7, lr}
 8009666:	b088      	sub	sp, #32
 8009668:	af00      	add	r7, sp, #0
 800966a:	60f8      	str	r0, [r7, #12]
 800966c:	60b9      	str	r1, [r7, #8]
 800966e:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009670:	f3ef 8310 	mrs	r3, PRIMASK
 8009674:	617b      	str	r3, [r7, #20]
  return(result);
 8009676:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 8009678:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800967a:	b672      	cpsid	i
}
 800967c:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800967e:	68f8      	ldr	r0, [r7, #12]
 8009680:	f000 f8f6 	bl	8009870 <SEQ_BitPosition>
 8009684:	4603      	mov	r3, r0
 8009686:	4619      	mov	r1, r3
 8009688:	4a06      	ldr	r2, [pc, #24]	; (80096a4 <UTIL_SEQ_RegTask+0x40>)
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8009690:	69fb      	ldr	r3, [r7, #28]
 8009692:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009694:	69bb      	ldr	r3, [r7, #24]
 8009696:	f383 8810 	msr	PRIMASK, r3
}
 800969a:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 800969c:	bf00      	nop
}
 800969e:	3720      	adds	r7, #32
 80096a0:	46bd      	mov	sp, r7
 80096a2:	bd80      	pop	{r7, pc}
 80096a4:	20000c8c 	.word	0x20000c8c

080096a8 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 80096a8:	b480      	push	{r7}
 80096aa:	b087      	sub	sp, #28
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	6078      	str	r0, [r7, #4]
 80096b0:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80096b2:	f3ef 8310 	mrs	r3, PRIMASK
 80096b6:	60fb      	str	r3, [r7, #12]
  return(result);
 80096b8:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80096ba:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80096bc:	b672      	cpsid	i
}
 80096be:	bf00      	nop

  TaskSet |= TaskId_bm;
 80096c0:	4b0d      	ldr	r3, [pc, #52]	; (80096f8 <UTIL_SEQ_SetTask+0x50>)
 80096c2:	681a      	ldr	r2, [r3, #0]
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	4313      	orrs	r3, r2
 80096c8:	4a0b      	ldr	r2, [pc, #44]	; (80096f8 <UTIL_SEQ_SetTask+0x50>)
 80096ca:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 80096cc:	4a0b      	ldr	r2, [pc, #44]	; (80096fc <UTIL_SEQ_SetTask+0x54>)
 80096ce:	683b      	ldr	r3, [r7, #0]
 80096d0:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	431a      	orrs	r2, r3
 80096d8:	4908      	ldr	r1, [pc, #32]	; (80096fc <UTIL_SEQ_SetTask+0x54>)
 80096da:	683b      	ldr	r3, [r7, #0]
 80096dc:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 80096e0:	697b      	ldr	r3, [r7, #20]
 80096e2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80096e4:	693b      	ldr	r3, [r7, #16]
 80096e6:	f383 8810 	msr	PRIMASK, r3
}
 80096ea:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 80096ec:	bf00      	nop
}
 80096ee:	371c      	adds	r7, #28
 80096f0:	46bd      	mov	sp, r7
 80096f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f6:	4770      	bx	lr
 80096f8:	20000c7c 	.word	0x20000c7c
 80096fc:	20000d0c 	.word	0x20000d0c

08009700 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 8009700:	b480      	push	{r7}
 8009702:	b087      	sub	sp, #28
 8009704:	af00      	add	r7, sp, #0
 8009706:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009708:	f3ef 8310 	mrs	r3, PRIMASK
 800970c:	60fb      	str	r3, [r7, #12]
  return(result);
 800970e:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8009710:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009712:	b672      	cpsid	i
}
 8009714:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	43da      	mvns	r2, r3
 800971a:	4b08      	ldr	r3, [pc, #32]	; (800973c <UTIL_SEQ_PauseTask+0x3c>)
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	4013      	ands	r3, r2
 8009720:	4a06      	ldr	r2, [pc, #24]	; (800973c <UTIL_SEQ_PauseTask+0x3c>)
 8009722:	6013      	str	r3, [r2, #0]
 8009724:	697b      	ldr	r3, [r7, #20]
 8009726:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009728:	693b      	ldr	r3, [r7, #16]
 800972a:	f383 8810 	msr	PRIMASK, r3
}
 800972e:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8009730:	bf00      	nop
}
 8009732:	371c      	adds	r7, #28
 8009734:	46bd      	mov	sp, r7
 8009736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800973a:	4770      	bx	lr
 800973c:	20000020 	.word	0x20000020

08009740 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 8009740:	b480      	push	{r7}
 8009742:	b087      	sub	sp, #28
 8009744:	af00      	add	r7, sp, #0
 8009746:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009748:	f3ef 8310 	mrs	r3, PRIMASK
 800974c:	60fb      	str	r3, [r7, #12]
  return(result);
 800974e:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8009750:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009752:	b672      	cpsid	i
}
 8009754:	bf00      	nop

  TaskMask |= TaskId_bm;
 8009756:	4b09      	ldr	r3, [pc, #36]	; (800977c <UTIL_SEQ_ResumeTask+0x3c>)
 8009758:	681a      	ldr	r2, [r3, #0]
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	4313      	orrs	r3, r2
 800975e:	4a07      	ldr	r2, [pc, #28]	; (800977c <UTIL_SEQ_ResumeTask+0x3c>)
 8009760:	6013      	str	r3, [r2, #0]
 8009762:	697b      	ldr	r3, [r7, #20]
 8009764:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009766:	693b      	ldr	r3, [r7, #16]
 8009768:	f383 8810 	msr	PRIMASK, r3
}
 800976c:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800976e:	bf00      	nop
}
 8009770:	371c      	adds	r7, #28
 8009772:	46bd      	mov	sp, r7
 8009774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009778:	4770      	bx	lr
 800977a:	bf00      	nop
 800977c:	20000020 	.word	0x20000020

08009780 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 8009780:	b480      	push	{r7}
 8009782:	b087      	sub	sp, #28
 8009784:	af00      	add	r7, sp, #0
 8009786:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009788:	f3ef 8310 	mrs	r3, PRIMASK
 800978c:	60fb      	str	r3, [r7, #12]
  return(result);
 800978e:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8009790:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009792:	b672      	cpsid	i
}
 8009794:	bf00      	nop

  EvtSet |= EvtId_bm;
 8009796:	4b09      	ldr	r3, [pc, #36]	; (80097bc <UTIL_SEQ_SetEvt+0x3c>)
 8009798:	681a      	ldr	r2, [r3, #0]
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	4313      	orrs	r3, r2
 800979e:	4a07      	ldr	r2, [pc, #28]	; (80097bc <UTIL_SEQ_SetEvt+0x3c>)
 80097a0:	6013      	str	r3, [r2, #0]
 80097a2:	697b      	ldr	r3, [r7, #20]
 80097a4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80097a6:	693b      	ldr	r3, [r7, #16]
 80097a8:	f383 8810 	msr	PRIMASK, r3
}
 80097ac:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 80097ae:	bf00      	nop
}
 80097b0:	371c      	adds	r7, #28
 80097b2:	46bd      	mov	sp, r7
 80097b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b8:	4770      	bx	lr
 80097ba:	bf00      	nop
 80097bc:	20000c80 	.word	0x20000c80

080097c0 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 80097c0:	b580      	push	{r7, lr}
 80097c2:	b088      	sub	sp, #32
 80097c4:	af00      	add	r7, sp, #0
 80097c6:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 80097c8:	4b1f      	ldr	r3, [pc, #124]	; (8009848 <UTIL_SEQ_WaitEvt+0x88>)
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 80097ce:	4b1e      	ldr	r3, [pc, #120]	; (8009848 <UTIL_SEQ_WaitEvt+0x88>)
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80097d6:	d102      	bne.n	80097de <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 80097d8:	2300      	movs	r3, #0
 80097da:	61fb      	str	r3, [r7, #28]
 80097dc:	e005      	b.n	80097ea <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 80097de:	4b1a      	ldr	r3, [pc, #104]	; (8009848 <UTIL_SEQ_WaitEvt+0x88>)
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	2201      	movs	r2, #1
 80097e4:	fa02 f303 	lsl.w	r3, r2, r3
 80097e8:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 80097ea:	4b18      	ldr	r3, [pc, #96]	; (800984c <UTIL_SEQ_WaitEvt+0x8c>)
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 80097f0:	4a16      	ldr	r2, [pc, #88]	; (800984c <UTIL_SEQ_WaitEvt+0x8c>)
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 80097f6:	e003      	b.n	8009800 <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 80097f8:	6879      	ldr	r1, [r7, #4]
 80097fa:	69f8      	ldr	r0, [r7, #28]
 80097fc:	f7f7 fb11 	bl	8000e22 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 8009800:	4b13      	ldr	r3, [pc, #76]	; (8009850 <UTIL_SEQ_WaitEvt+0x90>)
 8009802:	681a      	ldr	r2, [r3, #0]
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	4013      	ands	r3, r2
 8009808:	2b00      	cmp	r3, #0
 800980a:	d0f5      	beq.n	80097f8 <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 800980c:	4a0e      	ldr	r2, [pc, #56]	; (8009848 <UTIL_SEQ_WaitEvt+0x88>)
 800980e:	69bb      	ldr	r3, [r7, #24]
 8009810:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009812:	f3ef 8310 	mrs	r3, PRIMASK
 8009816:	60bb      	str	r3, [r7, #8]
  return(result);
 8009818:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800981a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800981c:	b672      	cpsid	i
}
 800981e:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	43da      	mvns	r2, r3
 8009824:	4b0a      	ldr	r3, [pc, #40]	; (8009850 <UTIL_SEQ_WaitEvt+0x90>)
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	4013      	ands	r3, r2
 800982a:	4a09      	ldr	r2, [pc, #36]	; (8009850 <UTIL_SEQ_WaitEvt+0x90>)
 800982c:	6013      	str	r3, [r2, #0]
 800982e:	693b      	ldr	r3, [r7, #16]
 8009830:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	f383 8810 	msr	PRIMASK, r3
}
 8009838:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 800983a:	4a04      	ldr	r2, [pc, #16]	; (800984c <UTIL_SEQ_WaitEvt+0x8c>)
 800983c:	697b      	ldr	r3, [r7, #20]
 800983e:	6013      	str	r3, [r2, #0]
  return;
 8009840:	bf00      	nop
}
 8009842:	3720      	adds	r7, #32
 8009844:	46bd      	mov	sp, r7
 8009846:	bd80      	pop	{r7, pc}
 8009848:	20000c88 	.word	0x20000c88
 800984c:	20000c84 	.word	0x20000c84
 8009850:	20000c80 	.word	0x20000c80

08009854 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 8009854:	b480      	push	{r7}
 8009856:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8009858:	bf00      	nop
}
 800985a:	46bd      	mov	sp, r7
 800985c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009860:	4770      	bx	lr

08009862 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 8009862:	b480      	push	{r7}
 8009864:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8009866:	bf00      	nop
}
 8009868:	46bd      	mov	sp, r7
 800986a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800986e:	4770      	bx	lr

08009870 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 8009870:	b480      	push	{r7}
 8009872:	b085      	sub	sp, #20
 8009874:	af00      	add	r7, sp, #0
 8009876:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 8009878:	2300      	movs	r3, #0
 800987a:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 8009880:	68bb      	ldr	r3, [r7, #8]
 8009882:	0c1b      	lsrs	r3, r3, #16
 8009884:	041b      	lsls	r3, r3, #16
 8009886:	2b00      	cmp	r3, #0
 8009888:	d104      	bne.n	8009894 <SEQ_BitPosition+0x24>
 800988a:	2310      	movs	r3, #16
 800988c:	73fb      	strb	r3, [r7, #15]
 800988e:	68bb      	ldr	r3, [r7, #8]
 8009890:	041b      	lsls	r3, r3, #16
 8009892:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 8009894:	68bb      	ldr	r3, [r7, #8]
 8009896:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800989a:	2b00      	cmp	r3, #0
 800989c:	d105      	bne.n	80098aa <SEQ_BitPosition+0x3a>
 800989e:	7bfb      	ldrb	r3, [r7, #15]
 80098a0:	3308      	adds	r3, #8
 80098a2:	73fb      	strb	r3, [r7, #15]
 80098a4:	68bb      	ldr	r3, [r7, #8]
 80098a6:	021b      	lsls	r3, r3, #8
 80098a8:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 80098aa:	68bb      	ldr	r3, [r7, #8]
 80098ac:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d105      	bne.n	80098c0 <SEQ_BitPosition+0x50>
 80098b4:	7bfb      	ldrb	r3, [r7, #15]
 80098b6:	3304      	adds	r3, #4
 80098b8:	73fb      	strb	r3, [r7, #15]
 80098ba:	68bb      	ldr	r3, [r7, #8]
 80098bc:	011b      	lsls	r3, r3, #4
 80098be:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 80098c0:	68bb      	ldr	r3, [r7, #8]
 80098c2:	0f1b      	lsrs	r3, r3, #28
 80098c4:	4a07      	ldr	r2, [pc, #28]	; (80098e4 <SEQ_BitPosition+0x74>)
 80098c6:	5cd2      	ldrb	r2, [r2, r3]
 80098c8:	7bfb      	ldrb	r3, [r7, #15]
 80098ca:	4413      	add	r3, r2
 80098cc:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 80098ce:	7bfb      	ldrb	r3, [r7, #15]
 80098d0:	f1c3 031f 	rsb	r3, r3, #31
 80098d4:	b2db      	uxtb	r3, r3
}
 80098d6:	4618      	mov	r0, r3
 80098d8:	3714      	adds	r7, #20
 80098da:	46bd      	mov	sp, r7
 80098dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e0:	4770      	bx	lr
 80098e2:	bf00      	nop
 80098e4:	0800ac10 	.word	0x0800ac10

080098e8 <__errno>:
 80098e8:	4b01      	ldr	r3, [pc, #4]	; (80098f0 <__errno+0x8>)
 80098ea:	6818      	ldr	r0, [r3, #0]
 80098ec:	4770      	bx	lr
 80098ee:	bf00      	nop
 80098f0:	20000028 	.word	0x20000028

080098f4 <__libc_init_array>:
 80098f4:	b570      	push	{r4, r5, r6, lr}
 80098f6:	4d0d      	ldr	r5, [pc, #52]	; (800992c <__libc_init_array+0x38>)
 80098f8:	4c0d      	ldr	r4, [pc, #52]	; (8009930 <__libc_init_array+0x3c>)
 80098fa:	1b64      	subs	r4, r4, r5
 80098fc:	10a4      	asrs	r4, r4, #2
 80098fe:	2600      	movs	r6, #0
 8009900:	42a6      	cmp	r6, r4
 8009902:	d109      	bne.n	8009918 <__libc_init_array+0x24>
 8009904:	4d0b      	ldr	r5, [pc, #44]	; (8009934 <__libc_init_array+0x40>)
 8009906:	4c0c      	ldr	r4, [pc, #48]	; (8009938 <__libc_init_array+0x44>)
 8009908:	f000 ffbc 	bl	800a884 <_init>
 800990c:	1b64      	subs	r4, r4, r5
 800990e:	10a4      	asrs	r4, r4, #2
 8009910:	2600      	movs	r6, #0
 8009912:	42a6      	cmp	r6, r4
 8009914:	d105      	bne.n	8009922 <__libc_init_array+0x2e>
 8009916:	bd70      	pop	{r4, r5, r6, pc}
 8009918:	f855 3b04 	ldr.w	r3, [r5], #4
 800991c:	4798      	blx	r3
 800991e:	3601      	adds	r6, #1
 8009920:	e7ee      	b.n	8009900 <__libc_init_array+0xc>
 8009922:	f855 3b04 	ldr.w	r3, [r5], #4
 8009926:	4798      	blx	r3
 8009928:	3601      	adds	r6, #1
 800992a:	e7f2      	b.n	8009912 <__libc_init_array+0x1e>
 800992c:	0800acc0 	.word	0x0800acc0
 8009930:	0800acc0 	.word	0x0800acc0
 8009934:	0800acc0 	.word	0x0800acc0
 8009938:	0800acc4 	.word	0x0800acc4

0800993c <memcpy>:
 800993c:	440a      	add	r2, r1
 800993e:	4291      	cmp	r1, r2
 8009940:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8009944:	d100      	bne.n	8009948 <memcpy+0xc>
 8009946:	4770      	bx	lr
 8009948:	b510      	push	{r4, lr}
 800994a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800994e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009952:	4291      	cmp	r1, r2
 8009954:	d1f9      	bne.n	800994a <memcpy+0xe>
 8009956:	bd10      	pop	{r4, pc}

08009958 <memset>:
 8009958:	4402      	add	r2, r0
 800995a:	4603      	mov	r3, r0
 800995c:	4293      	cmp	r3, r2
 800995e:	d100      	bne.n	8009962 <memset+0xa>
 8009960:	4770      	bx	lr
 8009962:	f803 1b01 	strb.w	r1, [r3], #1
 8009966:	e7f9      	b.n	800995c <memset+0x4>

08009968 <iprintf>:
 8009968:	b40f      	push	{r0, r1, r2, r3}
 800996a:	4b0a      	ldr	r3, [pc, #40]	; (8009994 <iprintf+0x2c>)
 800996c:	b513      	push	{r0, r1, r4, lr}
 800996e:	681c      	ldr	r4, [r3, #0]
 8009970:	b124      	cbz	r4, 800997c <iprintf+0x14>
 8009972:	69a3      	ldr	r3, [r4, #24]
 8009974:	b913      	cbnz	r3, 800997c <iprintf+0x14>
 8009976:	4620      	mov	r0, r4
 8009978:	f000 f866 	bl	8009a48 <__sinit>
 800997c:	ab05      	add	r3, sp, #20
 800997e:	9a04      	ldr	r2, [sp, #16]
 8009980:	68a1      	ldr	r1, [r4, #8]
 8009982:	9301      	str	r3, [sp, #4]
 8009984:	4620      	mov	r0, r4
 8009986:	f000 f9bd 	bl	8009d04 <_vfiprintf_r>
 800998a:	b002      	add	sp, #8
 800998c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009990:	b004      	add	sp, #16
 8009992:	4770      	bx	lr
 8009994:	20000028 	.word	0x20000028

08009998 <std>:
 8009998:	2300      	movs	r3, #0
 800999a:	b510      	push	{r4, lr}
 800999c:	4604      	mov	r4, r0
 800999e:	e9c0 3300 	strd	r3, r3, [r0]
 80099a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80099a6:	6083      	str	r3, [r0, #8]
 80099a8:	8181      	strh	r1, [r0, #12]
 80099aa:	6643      	str	r3, [r0, #100]	; 0x64
 80099ac:	81c2      	strh	r2, [r0, #14]
 80099ae:	6183      	str	r3, [r0, #24]
 80099b0:	4619      	mov	r1, r3
 80099b2:	2208      	movs	r2, #8
 80099b4:	305c      	adds	r0, #92	; 0x5c
 80099b6:	f7ff ffcf 	bl	8009958 <memset>
 80099ba:	4b05      	ldr	r3, [pc, #20]	; (80099d0 <std+0x38>)
 80099bc:	6263      	str	r3, [r4, #36]	; 0x24
 80099be:	4b05      	ldr	r3, [pc, #20]	; (80099d4 <std+0x3c>)
 80099c0:	62a3      	str	r3, [r4, #40]	; 0x28
 80099c2:	4b05      	ldr	r3, [pc, #20]	; (80099d8 <std+0x40>)
 80099c4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80099c6:	4b05      	ldr	r3, [pc, #20]	; (80099dc <std+0x44>)
 80099c8:	6224      	str	r4, [r4, #32]
 80099ca:	6323      	str	r3, [r4, #48]	; 0x30
 80099cc:	bd10      	pop	{r4, pc}
 80099ce:	bf00      	nop
 80099d0:	0800a2ad 	.word	0x0800a2ad
 80099d4:	0800a2cf 	.word	0x0800a2cf
 80099d8:	0800a307 	.word	0x0800a307
 80099dc:	0800a32b 	.word	0x0800a32b

080099e0 <_cleanup_r>:
 80099e0:	4901      	ldr	r1, [pc, #4]	; (80099e8 <_cleanup_r+0x8>)
 80099e2:	f000 b8af 	b.w	8009b44 <_fwalk_reent>
 80099e6:	bf00      	nop
 80099e8:	0800a605 	.word	0x0800a605

080099ec <__sfmoreglue>:
 80099ec:	b570      	push	{r4, r5, r6, lr}
 80099ee:	2268      	movs	r2, #104	; 0x68
 80099f0:	1e4d      	subs	r5, r1, #1
 80099f2:	4355      	muls	r5, r2
 80099f4:	460e      	mov	r6, r1
 80099f6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80099fa:	f000 f8e5 	bl	8009bc8 <_malloc_r>
 80099fe:	4604      	mov	r4, r0
 8009a00:	b140      	cbz	r0, 8009a14 <__sfmoreglue+0x28>
 8009a02:	2100      	movs	r1, #0
 8009a04:	e9c0 1600 	strd	r1, r6, [r0]
 8009a08:	300c      	adds	r0, #12
 8009a0a:	60a0      	str	r0, [r4, #8]
 8009a0c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009a10:	f7ff ffa2 	bl	8009958 <memset>
 8009a14:	4620      	mov	r0, r4
 8009a16:	bd70      	pop	{r4, r5, r6, pc}

08009a18 <__sfp_lock_acquire>:
 8009a18:	4801      	ldr	r0, [pc, #4]	; (8009a20 <__sfp_lock_acquire+0x8>)
 8009a1a:	f000 b8b3 	b.w	8009b84 <__retarget_lock_acquire_recursive>
 8009a1e:	bf00      	nop
 8009a20:	20000d1d 	.word	0x20000d1d

08009a24 <__sfp_lock_release>:
 8009a24:	4801      	ldr	r0, [pc, #4]	; (8009a2c <__sfp_lock_release+0x8>)
 8009a26:	f000 b8ae 	b.w	8009b86 <__retarget_lock_release_recursive>
 8009a2a:	bf00      	nop
 8009a2c:	20000d1d 	.word	0x20000d1d

08009a30 <__sinit_lock_acquire>:
 8009a30:	4801      	ldr	r0, [pc, #4]	; (8009a38 <__sinit_lock_acquire+0x8>)
 8009a32:	f000 b8a7 	b.w	8009b84 <__retarget_lock_acquire_recursive>
 8009a36:	bf00      	nop
 8009a38:	20000d1e 	.word	0x20000d1e

08009a3c <__sinit_lock_release>:
 8009a3c:	4801      	ldr	r0, [pc, #4]	; (8009a44 <__sinit_lock_release+0x8>)
 8009a3e:	f000 b8a2 	b.w	8009b86 <__retarget_lock_release_recursive>
 8009a42:	bf00      	nop
 8009a44:	20000d1e 	.word	0x20000d1e

08009a48 <__sinit>:
 8009a48:	b510      	push	{r4, lr}
 8009a4a:	4604      	mov	r4, r0
 8009a4c:	f7ff fff0 	bl	8009a30 <__sinit_lock_acquire>
 8009a50:	69a3      	ldr	r3, [r4, #24]
 8009a52:	b11b      	cbz	r3, 8009a5c <__sinit+0x14>
 8009a54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009a58:	f7ff bff0 	b.w	8009a3c <__sinit_lock_release>
 8009a5c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009a60:	6523      	str	r3, [r4, #80]	; 0x50
 8009a62:	4b13      	ldr	r3, [pc, #76]	; (8009ab0 <__sinit+0x68>)
 8009a64:	4a13      	ldr	r2, [pc, #76]	; (8009ab4 <__sinit+0x6c>)
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	62a2      	str	r2, [r4, #40]	; 0x28
 8009a6a:	42a3      	cmp	r3, r4
 8009a6c:	bf04      	itt	eq
 8009a6e:	2301      	moveq	r3, #1
 8009a70:	61a3      	streq	r3, [r4, #24]
 8009a72:	4620      	mov	r0, r4
 8009a74:	f000 f820 	bl	8009ab8 <__sfp>
 8009a78:	6060      	str	r0, [r4, #4]
 8009a7a:	4620      	mov	r0, r4
 8009a7c:	f000 f81c 	bl	8009ab8 <__sfp>
 8009a80:	60a0      	str	r0, [r4, #8]
 8009a82:	4620      	mov	r0, r4
 8009a84:	f000 f818 	bl	8009ab8 <__sfp>
 8009a88:	2200      	movs	r2, #0
 8009a8a:	60e0      	str	r0, [r4, #12]
 8009a8c:	2104      	movs	r1, #4
 8009a8e:	6860      	ldr	r0, [r4, #4]
 8009a90:	f7ff ff82 	bl	8009998 <std>
 8009a94:	68a0      	ldr	r0, [r4, #8]
 8009a96:	2201      	movs	r2, #1
 8009a98:	2109      	movs	r1, #9
 8009a9a:	f7ff ff7d 	bl	8009998 <std>
 8009a9e:	68e0      	ldr	r0, [r4, #12]
 8009aa0:	2202      	movs	r2, #2
 8009aa2:	2112      	movs	r1, #18
 8009aa4:	f7ff ff78 	bl	8009998 <std>
 8009aa8:	2301      	movs	r3, #1
 8009aaa:	61a3      	str	r3, [r4, #24]
 8009aac:	e7d2      	b.n	8009a54 <__sinit+0xc>
 8009aae:	bf00      	nop
 8009ab0:	0800ac20 	.word	0x0800ac20
 8009ab4:	080099e1 	.word	0x080099e1

08009ab8 <__sfp>:
 8009ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009aba:	4607      	mov	r7, r0
 8009abc:	f7ff ffac 	bl	8009a18 <__sfp_lock_acquire>
 8009ac0:	4b1e      	ldr	r3, [pc, #120]	; (8009b3c <__sfp+0x84>)
 8009ac2:	681e      	ldr	r6, [r3, #0]
 8009ac4:	69b3      	ldr	r3, [r6, #24]
 8009ac6:	b913      	cbnz	r3, 8009ace <__sfp+0x16>
 8009ac8:	4630      	mov	r0, r6
 8009aca:	f7ff ffbd 	bl	8009a48 <__sinit>
 8009ace:	3648      	adds	r6, #72	; 0x48
 8009ad0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009ad4:	3b01      	subs	r3, #1
 8009ad6:	d503      	bpl.n	8009ae0 <__sfp+0x28>
 8009ad8:	6833      	ldr	r3, [r6, #0]
 8009ada:	b30b      	cbz	r3, 8009b20 <__sfp+0x68>
 8009adc:	6836      	ldr	r6, [r6, #0]
 8009ade:	e7f7      	b.n	8009ad0 <__sfp+0x18>
 8009ae0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009ae4:	b9d5      	cbnz	r5, 8009b1c <__sfp+0x64>
 8009ae6:	4b16      	ldr	r3, [pc, #88]	; (8009b40 <__sfp+0x88>)
 8009ae8:	60e3      	str	r3, [r4, #12]
 8009aea:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009aee:	6665      	str	r5, [r4, #100]	; 0x64
 8009af0:	f000 f847 	bl	8009b82 <__retarget_lock_init_recursive>
 8009af4:	f7ff ff96 	bl	8009a24 <__sfp_lock_release>
 8009af8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009afc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009b00:	6025      	str	r5, [r4, #0]
 8009b02:	61a5      	str	r5, [r4, #24]
 8009b04:	2208      	movs	r2, #8
 8009b06:	4629      	mov	r1, r5
 8009b08:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009b0c:	f7ff ff24 	bl	8009958 <memset>
 8009b10:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009b14:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009b18:	4620      	mov	r0, r4
 8009b1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b1c:	3468      	adds	r4, #104	; 0x68
 8009b1e:	e7d9      	b.n	8009ad4 <__sfp+0x1c>
 8009b20:	2104      	movs	r1, #4
 8009b22:	4638      	mov	r0, r7
 8009b24:	f7ff ff62 	bl	80099ec <__sfmoreglue>
 8009b28:	4604      	mov	r4, r0
 8009b2a:	6030      	str	r0, [r6, #0]
 8009b2c:	2800      	cmp	r0, #0
 8009b2e:	d1d5      	bne.n	8009adc <__sfp+0x24>
 8009b30:	f7ff ff78 	bl	8009a24 <__sfp_lock_release>
 8009b34:	230c      	movs	r3, #12
 8009b36:	603b      	str	r3, [r7, #0]
 8009b38:	e7ee      	b.n	8009b18 <__sfp+0x60>
 8009b3a:	bf00      	nop
 8009b3c:	0800ac20 	.word	0x0800ac20
 8009b40:	ffff0001 	.word	0xffff0001

08009b44 <_fwalk_reent>:
 8009b44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b48:	4606      	mov	r6, r0
 8009b4a:	4688      	mov	r8, r1
 8009b4c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009b50:	2700      	movs	r7, #0
 8009b52:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009b56:	f1b9 0901 	subs.w	r9, r9, #1
 8009b5a:	d505      	bpl.n	8009b68 <_fwalk_reent+0x24>
 8009b5c:	6824      	ldr	r4, [r4, #0]
 8009b5e:	2c00      	cmp	r4, #0
 8009b60:	d1f7      	bne.n	8009b52 <_fwalk_reent+0xe>
 8009b62:	4638      	mov	r0, r7
 8009b64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b68:	89ab      	ldrh	r3, [r5, #12]
 8009b6a:	2b01      	cmp	r3, #1
 8009b6c:	d907      	bls.n	8009b7e <_fwalk_reent+0x3a>
 8009b6e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009b72:	3301      	adds	r3, #1
 8009b74:	d003      	beq.n	8009b7e <_fwalk_reent+0x3a>
 8009b76:	4629      	mov	r1, r5
 8009b78:	4630      	mov	r0, r6
 8009b7a:	47c0      	blx	r8
 8009b7c:	4307      	orrs	r7, r0
 8009b7e:	3568      	adds	r5, #104	; 0x68
 8009b80:	e7e9      	b.n	8009b56 <_fwalk_reent+0x12>

08009b82 <__retarget_lock_init_recursive>:
 8009b82:	4770      	bx	lr

08009b84 <__retarget_lock_acquire_recursive>:
 8009b84:	4770      	bx	lr

08009b86 <__retarget_lock_release_recursive>:
 8009b86:	4770      	bx	lr

08009b88 <sbrk_aligned>:
 8009b88:	b570      	push	{r4, r5, r6, lr}
 8009b8a:	4e0e      	ldr	r6, [pc, #56]	; (8009bc4 <sbrk_aligned+0x3c>)
 8009b8c:	460c      	mov	r4, r1
 8009b8e:	6831      	ldr	r1, [r6, #0]
 8009b90:	4605      	mov	r5, r0
 8009b92:	b911      	cbnz	r1, 8009b9a <sbrk_aligned+0x12>
 8009b94:	f000 fb7a 	bl	800a28c <_sbrk_r>
 8009b98:	6030      	str	r0, [r6, #0]
 8009b9a:	4621      	mov	r1, r4
 8009b9c:	4628      	mov	r0, r5
 8009b9e:	f000 fb75 	bl	800a28c <_sbrk_r>
 8009ba2:	1c43      	adds	r3, r0, #1
 8009ba4:	d00a      	beq.n	8009bbc <sbrk_aligned+0x34>
 8009ba6:	1cc4      	adds	r4, r0, #3
 8009ba8:	f024 0403 	bic.w	r4, r4, #3
 8009bac:	42a0      	cmp	r0, r4
 8009bae:	d007      	beq.n	8009bc0 <sbrk_aligned+0x38>
 8009bb0:	1a21      	subs	r1, r4, r0
 8009bb2:	4628      	mov	r0, r5
 8009bb4:	f000 fb6a 	bl	800a28c <_sbrk_r>
 8009bb8:	3001      	adds	r0, #1
 8009bba:	d101      	bne.n	8009bc0 <sbrk_aligned+0x38>
 8009bbc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8009bc0:	4620      	mov	r0, r4
 8009bc2:	bd70      	pop	{r4, r5, r6, pc}
 8009bc4:	20000d24 	.word	0x20000d24

08009bc8 <_malloc_r>:
 8009bc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009bcc:	1ccd      	adds	r5, r1, #3
 8009bce:	f025 0503 	bic.w	r5, r5, #3
 8009bd2:	3508      	adds	r5, #8
 8009bd4:	2d0c      	cmp	r5, #12
 8009bd6:	bf38      	it	cc
 8009bd8:	250c      	movcc	r5, #12
 8009bda:	2d00      	cmp	r5, #0
 8009bdc:	4607      	mov	r7, r0
 8009bde:	db01      	blt.n	8009be4 <_malloc_r+0x1c>
 8009be0:	42a9      	cmp	r1, r5
 8009be2:	d905      	bls.n	8009bf0 <_malloc_r+0x28>
 8009be4:	230c      	movs	r3, #12
 8009be6:	603b      	str	r3, [r7, #0]
 8009be8:	2600      	movs	r6, #0
 8009bea:	4630      	mov	r0, r6
 8009bec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009bf0:	4e2e      	ldr	r6, [pc, #184]	; (8009cac <_malloc_r+0xe4>)
 8009bf2:	f000 fdbb 	bl	800a76c <__malloc_lock>
 8009bf6:	6833      	ldr	r3, [r6, #0]
 8009bf8:	461c      	mov	r4, r3
 8009bfa:	bb34      	cbnz	r4, 8009c4a <_malloc_r+0x82>
 8009bfc:	4629      	mov	r1, r5
 8009bfe:	4638      	mov	r0, r7
 8009c00:	f7ff ffc2 	bl	8009b88 <sbrk_aligned>
 8009c04:	1c43      	adds	r3, r0, #1
 8009c06:	4604      	mov	r4, r0
 8009c08:	d14d      	bne.n	8009ca6 <_malloc_r+0xde>
 8009c0a:	6834      	ldr	r4, [r6, #0]
 8009c0c:	4626      	mov	r6, r4
 8009c0e:	2e00      	cmp	r6, #0
 8009c10:	d140      	bne.n	8009c94 <_malloc_r+0xcc>
 8009c12:	6823      	ldr	r3, [r4, #0]
 8009c14:	4631      	mov	r1, r6
 8009c16:	4638      	mov	r0, r7
 8009c18:	eb04 0803 	add.w	r8, r4, r3
 8009c1c:	f000 fb36 	bl	800a28c <_sbrk_r>
 8009c20:	4580      	cmp	r8, r0
 8009c22:	d13a      	bne.n	8009c9a <_malloc_r+0xd2>
 8009c24:	6821      	ldr	r1, [r4, #0]
 8009c26:	3503      	adds	r5, #3
 8009c28:	1a6d      	subs	r5, r5, r1
 8009c2a:	f025 0503 	bic.w	r5, r5, #3
 8009c2e:	3508      	adds	r5, #8
 8009c30:	2d0c      	cmp	r5, #12
 8009c32:	bf38      	it	cc
 8009c34:	250c      	movcc	r5, #12
 8009c36:	4629      	mov	r1, r5
 8009c38:	4638      	mov	r0, r7
 8009c3a:	f7ff ffa5 	bl	8009b88 <sbrk_aligned>
 8009c3e:	3001      	adds	r0, #1
 8009c40:	d02b      	beq.n	8009c9a <_malloc_r+0xd2>
 8009c42:	6823      	ldr	r3, [r4, #0]
 8009c44:	442b      	add	r3, r5
 8009c46:	6023      	str	r3, [r4, #0]
 8009c48:	e00e      	b.n	8009c68 <_malloc_r+0xa0>
 8009c4a:	6822      	ldr	r2, [r4, #0]
 8009c4c:	1b52      	subs	r2, r2, r5
 8009c4e:	d41e      	bmi.n	8009c8e <_malloc_r+0xc6>
 8009c50:	2a0b      	cmp	r2, #11
 8009c52:	d916      	bls.n	8009c82 <_malloc_r+0xba>
 8009c54:	1961      	adds	r1, r4, r5
 8009c56:	42a3      	cmp	r3, r4
 8009c58:	6025      	str	r5, [r4, #0]
 8009c5a:	bf18      	it	ne
 8009c5c:	6059      	strne	r1, [r3, #4]
 8009c5e:	6863      	ldr	r3, [r4, #4]
 8009c60:	bf08      	it	eq
 8009c62:	6031      	streq	r1, [r6, #0]
 8009c64:	5162      	str	r2, [r4, r5]
 8009c66:	604b      	str	r3, [r1, #4]
 8009c68:	4638      	mov	r0, r7
 8009c6a:	f104 060b 	add.w	r6, r4, #11
 8009c6e:	f000 fd83 	bl	800a778 <__malloc_unlock>
 8009c72:	f026 0607 	bic.w	r6, r6, #7
 8009c76:	1d23      	adds	r3, r4, #4
 8009c78:	1af2      	subs	r2, r6, r3
 8009c7a:	d0b6      	beq.n	8009bea <_malloc_r+0x22>
 8009c7c:	1b9b      	subs	r3, r3, r6
 8009c7e:	50a3      	str	r3, [r4, r2]
 8009c80:	e7b3      	b.n	8009bea <_malloc_r+0x22>
 8009c82:	6862      	ldr	r2, [r4, #4]
 8009c84:	42a3      	cmp	r3, r4
 8009c86:	bf0c      	ite	eq
 8009c88:	6032      	streq	r2, [r6, #0]
 8009c8a:	605a      	strne	r2, [r3, #4]
 8009c8c:	e7ec      	b.n	8009c68 <_malloc_r+0xa0>
 8009c8e:	4623      	mov	r3, r4
 8009c90:	6864      	ldr	r4, [r4, #4]
 8009c92:	e7b2      	b.n	8009bfa <_malloc_r+0x32>
 8009c94:	4634      	mov	r4, r6
 8009c96:	6876      	ldr	r6, [r6, #4]
 8009c98:	e7b9      	b.n	8009c0e <_malloc_r+0x46>
 8009c9a:	230c      	movs	r3, #12
 8009c9c:	603b      	str	r3, [r7, #0]
 8009c9e:	4638      	mov	r0, r7
 8009ca0:	f000 fd6a 	bl	800a778 <__malloc_unlock>
 8009ca4:	e7a1      	b.n	8009bea <_malloc_r+0x22>
 8009ca6:	6025      	str	r5, [r4, #0]
 8009ca8:	e7de      	b.n	8009c68 <_malloc_r+0xa0>
 8009caa:	bf00      	nop
 8009cac:	20000d20 	.word	0x20000d20

08009cb0 <__sfputc_r>:
 8009cb0:	6893      	ldr	r3, [r2, #8]
 8009cb2:	3b01      	subs	r3, #1
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	b410      	push	{r4}
 8009cb8:	6093      	str	r3, [r2, #8]
 8009cba:	da08      	bge.n	8009cce <__sfputc_r+0x1e>
 8009cbc:	6994      	ldr	r4, [r2, #24]
 8009cbe:	42a3      	cmp	r3, r4
 8009cc0:	db01      	blt.n	8009cc6 <__sfputc_r+0x16>
 8009cc2:	290a      	cmp	r1, #10
 8009cc4:	d103      	bne.n	8009cce <__sfputc_r+0x1e>
 8009cc6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009cca:	f000 bb33 	b.w	800a334 <__swbuf_r>
 8009cce:	6813      	ldr	r3, [r2, #0]
 8009cd0:	1c58      	adds	r0, r3, #1
 8009cd2:	6010      	str	r0, [r2, #0]
 8009cd4:	7019      	strb	r1, [r3, #0]
 8009cd6:	4608      	mov	r0, r1
 8009cd8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009cdc:	4770      	bx	lr

08009cde <__sfputs_r>:
 8009cde:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ce0:	4606      	mov	r6, r0
 8009ce2:	460f      	mov	r7, r1
 8009ce4:	4614      	mov	r4, r2
 8009ce6:	18d5      	adds	r5, r2, r3
 8009ce8:	42ac      	cmp	r4, r5
 8009cea:	d101      	bne.n	8009cf0 <__sfputs_r+0x12>
 8009cec:	2000      	movs	r0, #0
 8009cee:	e007      	b.n	8009d00 <__sfputs_r+0x22>
 8009cf0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009cf4:	463a      	mov	r2, r7
 8009cf6:	4630      	mov	r0, r6
 8009cf8:	f7ff ffda 	bl	8009cb0 <__sfputc_r>
 8009cfc:	1c43      	adds	r3, r0, #1
 8009cfe:	d1f3      	bne.n	8009ce8 <__sfputs_r+0xa>
 8009d00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009d04 <_vfiprintf_r>:
 8009d04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d08:	460d      	mov	r5, r1
 8009d0a:	b09d      	sub	sp, #116	; 0x74
 8009d0c:	4614      	mov	r4, r2
 8009d0e:	4698      	mov	r8, r3
 8009d10:	4606      	mov	r6, r0
 8009d12:	b118      	cbz	r0, 8009d1c <_vfiprintf_r+0x18>
 8009d14:	6983      	ldr	r3, [r0, #24]
 8009d16:	b90b      	cbnz	r3, 8009d1c <_vfiprintf_r+0x18>
 8009d18:	f7ff fe96 	bl	8009a48 <__sinit>
 8009d1c:	4b89      	ldr	r3, [pc, #548]	; (8009f44 <_vfiprintf_r+0x240>)
 8009d1e:	429d      	cmp	r5, r3
 8009d20:	d11b      	bne.n	8009d5a <_vfiprintf_r+0x56>
 8009d22:	6875      	ldr	r5, [r6, #4]
 8009d24:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009d26:	07d9      	lsls	r1, r3, #31
 8009d28:	d405      	bmi.n	8009d36 <_vfiprintf_r+0x32>
 8009d2a:	89ab      	ldrh	r3, [r5, #12]
 8009d2c:	059a      	lsls	r2, r3, #22
 8009d2e:	d402      	bmi.n	8009d36 <_vfiprintf_r+0x32>
 8009d30:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009d32:	f7ff ff27 	bl	8009b84 <__retarget_lock_acquire_recursive>
 8009d36:	89ab      	ldrh	r3, [r5, #12]
 8009d38:	071b      	lsls	r3, r3, #28
 8009d3a:	d501      	bpl.n	8009d40 <_vfiprintf_r+0x3c>
 8009d3c:	692b      	ldr	r3, [r5, #16]
 8009d3e:	b9eb      	cbnz	r3, 8009d7c <_vfiprintf_r+0x78>
 8009d40:	4629      	mov	r1, r5
 8009d42:	4630      	mov	r0, r6
 8009d44:	f000 fb5a 	bl	800a3fc <__swsetup_r>
 8009d48:	b1c0      	cbz	r0, 8009d7c <_vfiprintf_r+0x78>
 8009d4a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009d4c:	07dc      	lsls	r4, r3, #31
 8009d4e:	d50e      	bpl.n	8009d6e <_vfiprintf_r+0x6a>
 8009d50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009d54:	b01d      	add	sp, #116	; 0x74
 8009d56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d5a:	4b7b      	ldr	r3, [pc, #492]	; (8009f48 <_vfiprintf_r+0x244>)
 8009d5c:	429d      	cmp	r5, r3
 8009d5e:	d101      	bne.n	8009d64 <_vfiprintf_r+0x60>
 8009d60:	68b5      	ldr	r5, [r6, #8]
 8009d62:	e7df      	b.n	8009d24 <_vfiprintf_r+0x20>
 8009d64:	4b79      	ldr	r3, [pc, #484]	; (8009f4c <_vfiprintf_r+0x248>)
 8009d66:	429d      	cmp	r5, r3
 8009d68:	bf08      	it	eq
 8009d6a:	68f5      	ldreq	r5, [r6, #12]
 8009d6c:	e7da      	b.n	8009d24 <_vfiprintf_r+0x20>
 8009d6e:	89ab      	ldrh	r3, [r5, #12]
 8009d70:	0598      	lsls	r0, r3, #22
 8009d72:	d4ed      	bmi.n	8009d50 <_vfiprintf_r+0x4c>
 8009d74:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009d76:	f7ff ff06 	bl	8009b86 <__retarget_lock_release_recursive>
 8009d7a:	e7e9      	b.n	8009d50 <_vfiprintf_r+0x4c>
 8009d7c:	2300      	movs	r3, #0
 8009d7e:	9309      	str	r3, [sp, #36]	; 0x24
 8009d80:	2320      	movs	r3, #32
 8009d82:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009d86:	f8cd 800c 	str.w	r8, [sp, #12]
 8009d8a:	2330      	movs	r3, #48	; 0x30
 8009d8c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009f50 <_vfiprintf_r+0x24c>
 8009d90:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009d94:	f04f 0901 	mov.w	r9, #1
 8009d98:	4623      	mov	r3, r4
 8009d9a:	469a      	mov	sl, r3
 8009d9c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009da0:	b10a      	cbz	r2, 8009da6 <_vfiprintf_r+0xa2>
 8009da2:	2a25      	cmp	r2, #37	; 0x25
 8009da4:	d1f9      	bne.n	8009d9a <_vfiprintf_r+0x96>
 8009da6:	ebba 0b04 	subs.w	fp, sl, r4
 8009daa:	d00b      	beq.n	8009dc4 <_vfiprintf_r+0xc0>
 8009dac:	465b      	mov	r3, fp
 8009dae:	4622      	mov	r2, r4
 8009db0:	4629      	mov	r1, r5
 8009db2:	4630      	mov	r0, r6
 8009db4:	f7ff ff93 	bl	8009cde <__sfputs_r>
 8009db8:	3001      	adds	r0, #1
 8009dba:	f000 80aa 	beq.w	8009f12 <_vfiprintf_r+0x20e>
 8009dbe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009dc0:	445a      	add	r2, fp
 8009dc2:	9209      	str	r2, [sp, #36]	; 0x24
 8009dc4:	f89a 3000 	ldrb.w	r3, [sl]
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	f000 80a2 	beq.w	8009f12 <_vfiprintf_r+0x20e>
 8009dce:	2300      	movs	r3, #0
 8009dd0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009dd4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009dd8:	f10a 0a01 	add.w	sl, sl, #1
 8009ddc:	9304      	str	r3, [sp, #16]
 8009dde:	9307      	str	r3, [sp, #28]
 8009de0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009de4:	931a      	str	r3, [sp, #104]	; 0x68
 8009de6:	4654      	mov	r4, sl
 8009de8:	2205      	movs	r2, #5
 8009dea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009dee:	4858      	ldr	r0, [pc, #352]	; (8009f50 <_vfiprintf_r+0x24c>)
 8009df0:	f7f6 f9ce 	bl	8000190 <memchr>
 8009df4:	9a04      	ldr	r2, [sp, #16]
 8009df6:	b9d8      	cbnz	r0, 8009e30 <_vfiprintf_r+0x12c>
 8009df8:	06d1      	lsls	r1, r2, #27
 8009dfa:	bf44      	itt	mi
 8009dfc:	2320      	movmi	r3, #32
 8009dfe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009e02:	0713      	lsls	r3, r2, #28
 8009e04:	bf44      	itt	mi
 8009e06:	232b      	movmi	r3, #43	; 0x2b
 8009e08:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009e0c:	f89a 3000 	ldrb.w	r3, [sl]
 8009e10:	2b2a      	cmp	r3, #42	; 0x2a
 8009e12:	d015      	beq.n	8009e40 <_vfiprintf_r+0x13c>
 8009e14:	9a07      	ldr	r2, [sp, #28]
 8009e16:	4654      	mov	r4, sl
 8009e18:	2000      	movs	r0, #0
 8009e1a:	f04f 0c0a 	mov.w	ip, #10
 8009e1e:	4621      	mov	r1, r4
 8009e20:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009e24:	3b30      	subs	r3, #48	; 0x30
 8009e26:	2b09      	cmp	r3, #9
 8009e28:	d94e      	bls.n	8009ec8 <_vfiprintf_r+0x1c4>
 8009e2a:	b1b0      	cbz	r0, 8009e5a <_vfiprintf_r+0x156>
 8009e2c:	9207      	str	r2, [sp, #28]
 8009e2e:	e014      	b.n	8009e5a <_vfiprintf_r+0x156>
 8009e30:	eba0 0308 	sub.w	r3, r0, r8
 8009e34:	fa09 f303 	lsl.w	r3, r9, r3
 8009e38:	4313      	orrs	r3, r2
 8009e3a:	9304      	str	r3, [sp, #16]
 8009e3c:	46a2      	mov	sl, r4
 8009e3e:	e7d2      	b.n	8009de6 <_vfiprintf_r+0xe2>
 8009e40:	9b03      	ldr	r3, [sp, #12]
 8009e42:	1d19      	adds	r1, r3, #4
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	9103      	str	r1, [sp, #12]
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	bfbb      	ittet	lt
 8009e4c:	425b      	neglt	r3, r3
 8009e4e:	f042 0202 	orrlt.w	r2, r2, #2
 8009e52:	9307      	strge	r3, [sp, #28]
 8009e54:	9307      	strlt	r3, [sp, #28]
 8009e56:	bfb8      	it	lt
 8009e58:	9204      	strlt	r2, [sp, #16]
 8009e5a:	7823      	ldrb	r3, [r4, #0]
 8009e5c:	2b2e      	cmp	r3, #46	; 0x2e
 8009e5e:	d10c      	bne.n	8009e7a <_vfiprintf_r+0x176>
 8009e60:	7863      	ldrb	r3, [r4, #1]
 8009e62:	2b2a      	cmp	r3, #42	; 0x2a
 8009e64:	d135      	bne.n	8009ed2 <_vfiprintf_r+0x1ce>
 8009e66:	9b03      	ldr	r3, [sp, #12]
 8009e68:	1d1a      	adds	r2, r3, #4
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	9203      	str	r2, [sp, #12]
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	bfb8      	it	lt
 8009e72:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009e76:	3402      	adds	r4, #2
 8009e78:	9305      	str	r3, [sp, #20]
 8009e7a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009f60 <_vfiprintf_r+0x25c>
 8009e7e:	7821      	ldrb	r1, [r4, #0]
 8009e80:	2203      	movs	r2, #3
 8009e82:	4650      	mov	r0, sl
 8009e84:	f7f6 f984 	bl	8000190 <memchr>
 8009e88:	b140      	cbz	r0, 8009e9c <_vfiprintf_r+0x198>
 8009e8a:	2340      	movs	r3, #64	; 0x40
 8009e8c:	eba0 000a 	sub.w	r0, r0, sl
 8009e90:	fa03 f000 	lsl.w	r0, r3, r0
 8009e94:	9b04      	ldr	r3, [sp, #16]
 8009e96:	4303      	orrs	r3, r0
 8009e98:	3401      	adds	r4, #1
 8009e9a:	9304      	str	r3, [sp, #16]
 8009e9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ea0:	482c      	ldr	r0, [pc, #176]	; (8009f54 <_vfiprintf_r+0x250>)
 8009ea2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009ea6:	2206      	movs	r2, #6
 8009ea8:	f7f6 f972 	bl	8000190 <memchr>
 8009eac:	2800      	cmp	r0, #0
 8009eae:	d03f      	beq.n	8009f30 <_vfiprintf_r+0x22c>
 8009eb0:	4b29      	ldr	r3, [pc, #164]	; (8009f58 <_vfiprintf_r+0x254>)
 8009eb2:	bb1b      	cbnz	r3, 8009efc <_vfiprintf_r+0x1f8>
 8009eb4:	9b03      	ldr	r3, [sp, #12]
 8009eb6:	3307      	adds	r3, #7
 8009eb8:	f023 0307 	bic.w	r3, r3, #7
 8009ebc:	3308      	adds	r3, #8
 8009ebe:	9303      	str	r3, [sp, #12]
 8009ec0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ec2:	443b      	add	r3, r7
 8009ec4:	9309      	str	r3, [sp, #36]	; 0x24
 8009ec6:	e767      	b.n	8009d98 <_vfiprintf_r+0x94>
 8009ec8:	fb0c 3202 	mla	r2, ip, r2, r3
 8009ecc:	460c      	mov	r4, r1
 8009ece:	2001      	movs	r0, #1
 8009ed0:	e7a5      	b.n	8009e1e <_vfiprintf_r+0x11a>
 8009ed2:	2300      	movs	r3, #0
 8009ed4:	3401      	adds	r4, #1
 8009ed6:	9305      	str	r3, [sp, #20]
 8009ed8:	4619      	mov	r1, r3
 8009eda:	f04f 0c0a 	mov.w	ip, #10
 8009ede:	4620      	mov	r0, r4
 8009ee0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009ee4:	3a30      	subs	r2, #48	; 0x30
 8009ee6:	2a09      	cmp	r2, #9
 8009ee8:	d903      	bls.n	8009ef2 <_vfiprintf_r+0x1ee>
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d0c5      	beq.n	8009e7a <_vfiprintf_r+0x176>
 8009eee:	9105      	str	r1, [sp, #20]
 8009ef0:	e7c3      	b.n	8009e7a <_vfiprintf_r+0x176>
 8009ef2:	fb0c 2101 	mla	r1, ip, r1, r2
 8009ef6:	4604      	mov	r4, r0
 8009ef8:	2301      	movs	r3, #1
 8009efa:	e7f0      	b.n	8009ede <_vfiprintf_r+0x1da>
 8009efc:	ab03      	add	r3, sp, #12
 8009efe:	9300      	str	r3, [sp, #0]
 8009f00:	462a      	mov	r2, r5
 8009f02:	4b16      	ldr	r3, [pc, #88]	; (8009f5c <_vfiprintf_r+0x258>)
 8009f04:	a904      	add	r1, sp, #16
 8009f06:	4630      	mov	r0, r6
 8009f08:	f3af 8000 	nop.w
 8009f0c:	4607      	mov	r7, r0
 8009f0e:	1c78      	adds	r0, r7, #1
 8009f10:	d1d6      	bne.n	8009ec0 <_vfiprintf_r+0x1bc>
 8009f12:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009f14:	07d9      	lsls	r1, r3, #31
 8009f16:	d405      	bmi.n	8009f24 <_vfiprintf_r+0x220>
 8009f18:	89ab      	ldrh	r3, [r5, #12]
 8009f1a:	059a      	lsls	r2, r3, #22
 8009f1c:	d402      	bmi.n	8009f24 <_vfiprintf_r+0x220>
 8009f1e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009f20:	f7ff fe31 	bl	8009b86 <__retarget_lock_release_recursive>
 8009f24:	89ab      	ldrh	r3, [r5, #12]
 8009f26:	065b      	lsls	r3, r3, #25
 8009f28:	f53f af12 	bmi.w	8009d50 <_vfiprintf_r+0x4c>
 8009f2c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009f2e:	e711      	b.n	8009d54 <_vfiprintf_r+0x50>
 8009f30:	ab03      	add	r3, sp, #12
 8009f32:	9300      	str	r3, [sp, #0]
 8009f34:	462a      	mov	r2, r5
 8009f36:	4b09      	ldr	r3, [pc, #36]	; (8009f5c <_vfiprintf_r+0x258>)
 8009f38:	a904      	add	r1, sp, #16
 8009f3a:	4630      	mov	r0, r6
 8009f3c:	f000 f880 	bl	800a040 <_printf_i>
 8009f40:	e7e4      	b.n	8009f0c <_vfiprintf_r+0x208>
 8009f42:	bf00      	nop
 8009f44:	0800ac44 	.word	0x0800ac44
 8009f48:	0800ac64 	.word	0x0800ac64
 8009f4c:	0800ac24 	.word	0x0800ac24
 8009f50:	0800ac84 	.word	0x0800ac84
 8009f54:	0800ac8e 	.word	0x0800ac8e
 8009f58:	00000000 	.word	0x00000000
 8009f5c:	08009cdf 	.word	0x08009cdf
 8009f60:	0800ac8a 	.word	0x0800ac8a

08009f64 <_printf_common>:
 8009f64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f68:	4616      	mov	r6, r2
 8009f6a:	4699      	mov	r9, r3
 8009f6c:	688a      	ldr	r2, [r1, #8]
 8009f6e:	690b      	ldr	r3, [r1, #16]
 8009f70:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009f74:	4293      	cmp	r3, r2
 8009f76:	bfb8      	it	lt
 8009f78:	4613      	movlt	r3, r2
 8009f7a:	6033      	str	r3, [r6, #0]
 8009f7c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009f80:	4607      	mov	r7, r0
 8009f82:	460c      	mov	r4, r1
 8009f84:	b10a      	cbz	r2, 8009f8a <_printf_common+0x26>
 8009f86:	3301      	adds	r3, #1
 8009f88:	6033      	str	r3, [r6, #0]
 8009f8a:	6823      	ldr	r3, [r4, #0]
 8009f8c:	0699      	lsls	r1, r3, #26
 8009f8e:	bf42      	ittt	mi
 8009f90:	6833      	ldrmi	r3, [r6, #0]
 8009f92:	3302      	addmi	r3, #2
 8009f94:	6033      	strmi	r3, [r6, #0]
 8009f96:	6825      	ldr	r5, [r4, #0]
 8009f98:	f015 0506 	ands.w	r5, r5, #6
 8009f9c:	d106      	bne.n	8009fac <_printf_common+0x48>
 8009f9e:	f104 0a19 	add.w	sl, r4, #25
 8009fa2:	68e3      	ldr	r3, [r4, #12]
 8009fa4:	6832      	ldr	r2, [r6, #0]
 8009fa6:	1a9b      	subs	r3, r3, r2
 8009fa8:	42ab      	cmp	r3, r5
 8009faa:	dc26      	bgt.n	8009ffa <_printf_common+0x96>
 8009fac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009fb0:	1e13      	subs	r3, r2, #0
 8009fb2:	6822      	ldr	r2, [r4, #0]
 8009fb4:	bf18      	it	ne
 8009fb6:	2301      	movne	r3, #1
 8009fb8:	0692      	lsls	r2, r2, #26
 8009fba:	d42b      	bmi.n	800a014 <_printf_common+0xb0>
 8009fbc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009fc0:	4649      	mov	r1, r9
 8009fc2:	4638      	mov	r0, r7
 8009fc4:	47c0      	blx	r8
 8009fc6:	3001      	adds	r0, #1
 8009fc8:	d01e      	beq.n	800a008 <_printf_common+0xa4>
 8009fca:	6823      	ldr	r3, [r4, #0]
 8009fcc:	68e5      	ldr	r5, [r4, #12]
 8009fce:	6832      	ldr	r2, [r6, #0]
 8009fd0:	f003 0306 	and.w	r3, r3, #6
 8009fd4:	2b04      	cmp	r3, #4
 8009fd6:	bf08      	it	eq
 8009fd8:	1aad      	subeq	r5, r5, r2
 8009fda:	68a3      	ldr	r3, [r4, #8]
 8009fdc:	6922      	ldr	r2, [r4, #16]
 8009fde:	bf0c      	ite	eq
 8009fe0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009fe4:	2500      	movne	r5, #0
 8009fe6:	4293      	cmp	r3, r2
 8009fe8:	bfc4      	itt	gt
 8009fea:	1a9b      	subgt	r3, r3, r2
 8009fec:	18ed      	addgt	r5, r5, r3
 8009fee:	2600      	movs	r6, #0
 8009ff0:	341a      	adds	r4, #26
 8009ff2:	42b5      	cmp	r5, r6
 8009ff4:	d11a      	bne.n	800a02c <_printf_common+0xc8>
 8009ff6:	2000      	movs	r0, #0
 8009ff8:	e008      	b.n	800a00c <_printf_common+0xa8>
 8009ffa:	2301      	movs	r3, #1
 8009ffc:	4652      	mov	r2, sl
 8009ffe:	4649      	mov	r1, r9
 800a000:	4638      	mov	r0, r7
 800a002:	47c0      	blx	r8
 800a004:	3001      	adds	r0, #1
 800a006:	d103      	bne.n	800a010 <_printf_common+0xac>
 800a008:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a00c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a010:	3501      	adds	r5, #1
 800a012:	e7c6      	b.n	8009fa2 <_printf_common+0x3e>
 800a014:	18e1      	adds	r1, r4, r3
 800a016:	1c5a      	adds	r2, r3, #1
 800a018:	2030      	movs	r0, #48	; 0x30
 800a01a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a01e:	4422      	add	r2, r4
 800a020:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a024:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a028:	3302      	adds	r3, #2
 800a02a:	e7c7      	b.n	8009fbc <_printf_common+0x58>
 800a02c:	2301      	movs	r3, #1
 800a02e:	4622      	mov	r2, r4
 800a030:	4649      	mov	r1, r9
 800a032:	4638      	mov	r0, r7
 800a034:	47c0      	blx	r8
 800a036:	3001      	adds	r0, #1
 800a038:	d0e6      	beq.n	800a008 <_printf_common+0xa4>
 800a03a:	3601      	adds	r6, #1
 800a03c:	e7d9      	b.n	8009ff2 <_printf_common+0x8e>
	...

0800a040 <_printf_i>:
 800a040:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a044:	7e0f      	ldrb	r7, [r1, #24]
 800a046:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a048:	2f78      	cmp	r7, #120	; 0x78
 800a04a:	4691      	mov	r9, r2
 800a04c:	4680      	mov	r8, r0
 800a04e:	460c      	mov	r4, r1
 800a050:	469a      	mov	sl, r3
 800a052:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a056:	d807      	bhi.n	800a068 <_printf_i+0x28>
 800a058:	2f62      	cmp	r7, #98	; 0x62
 800a05a:	d80a      	bhi.n	800a072 <_printf_i+0x32>
 800a05c:	2f00      	cmp	r7, #0
 800a05e:	f000 80d8 	beq.w	800a212 <_printf_i+0x1d2>
 800a062:	2f58      	cmp	r7, #88	; 0x58
 800a064:	f000 80a3 	beq.w	800a1ae <_printf_i+0x16e>
 800a068:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a06c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a070:	e03a      	b.n	800a0e8 <_printf_i+0xa8>
 800a072:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a076:	2b15      	cmp	r3, #21
 800a078:	d8f6      	bhi.n	800a068 <_printf_i+0x28>
 800a07a:	a101      	add	r1, pc, #4	; (adr r1, 800a080 <_printf_i+0x40>)
 800a07c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a080:	0800a0d9 	.word	0x0800a0d9
 800a084:	0800a0ed 	.word	0x0800a0ed
 800a088:	0800a069 	.word	0x0800a069
 800a08c:	0800a069 	.word	0x0800a069
 800a090:	0800a069 	.word	0x0800a069
 800a094:	0800a069 	.word	0x0800a069
 800a098:	0800a0ed 	.word	0x0800a0ed
 800a09c:	0800a069 	.word	0x0800a069
 800a0a0:	0800a069 	.word	0x0800a069
 800a0a4:	0800a069 	.word	0x0800a069
 800a0a8:	0800a069 	.word	0x0800a069
 800a0ac:	0800a1f9 	.word	0x0800a1f9
 800a0b0:	0800a11d 	.word	0x0800a11d
 800a0b4:	0800a1db 	.word	0x0800a1db
 800a0b8:	0800a069 	.word	0x0800a069
 800a0bc:	0800a069 	.word	0x0800a069
 800a0c0:	0800a21b 	.word	0x0800a21b
 800a0c4:	0800a069 	.word	0x0800a069
 800a0c8:	0800a11d 	.word	0x0800a11d
 800a0cc:	0800a069 	.word	0x0800a069
 800a0d0:	0800a069 	.word	0x0800a069
 800a0d4:	0800a1e3 	.word	0x0800a1e3
 800a0d8:	682b      	ldr	r3, [r5, #0]
 800a0da:	1d1a      	adds	r2, r3, #4
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	602a      	str	r2, [r5, #0]
 800a0e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a0e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a0e8:	2301      	movs	r3, #1
 800a0ea:	e0a3      	b.n	800a234 <_printf_i+0x1f4>
 800a0ec:	6820      	ldr	r0, [r4, #0]
 800a0ee:	6829      	ldr	r1, [r5, #0]
 800a0f0:	0606      	lsls	r6, r0, #24
 800a0f2:	f101 0304 	add.w	r3, r1, #4
 800a0f6:	d50a      	bpl.n	800a10e <_printf_i+0xce>
 800a0f8:	680e      	ldr	r6, [r1, #0]
 800a0fa:	602b      	str	r3, [r5, #0]
 800a0fc:	2e00      	cmp	r6, #0
 800a0fe:	da03      	bge.n	800a108 <_printf_i+0xc8>
 800a100:	232d      	movs	r3, #45	; 0x2d
 800a102:	4276      	negs	r6, r6
 800a104:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a108:	485e      	ldr	r0, [pc, #376]	; (800a284 <_printf_i+0x244>)
 800a10a:	230a      	movs	r3, #10
 800a10c:	e019      	b.n	800a142 <_printf_i+0x102>
 800a10e:	680e      	ldr	r6, [r1, #0]
 800a110:	602b      	str	r3, [r5, #0]
 800a112:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a116:	bf18      	it	ne
 800a118:	b236      	sxthne	r6, r6
 800a11a:	e7ef      	b.n	800a0fc <_printf_i+0xbc>
 800a11c:	682b      	ldr	r3, [r5, #0]
 800a11e:	6820      	ldr	r0, [r4, #0]
 800a120:	1d19      	adds	r1, r3, #4
 800a122:	6029      	str	r1, [r5, #0]
 800a124:	0601      	lsls	r1, r0, #24
 800a126:	d501      	bpl.n	800a12c <_printf_i+0xec>
 800a128:	681e      	ldr	r6, [r3, #0]
 800a12a:	e002      	b.n	800a132 <_printf_i+0xf2>
 800a12c:	0646      	lsls	r6, r0, #25
 800a12e:	d5fb      	bpl.n	800a128 <_printf_i+0xe8>
 800a130:	881e      	ldrh	r6, [r3, #0]
 800a132:	4854      	ldr	r0, [pc, #336]	; (800a284 <_printf_i+0x244>)
 800a134:	2f6f      	cmp	r7, #111	; 0x6f
 800a136:	bf0c      	ite	eq
 800a138:	2308      	moveq	r3, #8
 800a13a:	230a      	movne	r3, #10
 800a13c:	2100      	movs	r1, #0
 800a13e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a142:	6865      	ldr	r5, [r4, #4]
 800a144:	60a5      	str	r5, [r4, #8]
 800a146:	2d00      	cmp	r5, #0
 800a148:	bfa2      	ittt	ge
 800a14a:	6821      	ldrge	r1, [r4, #0]
 800a14c:	f021 0104 	bicge.w	r1, r1, #4
 800a150:	6021      	strge	r1, [r4, #0]
 800a152:	b90e      	cbnz	r6, 800a158 <_printf_i+0x118>
 800a154:	2d00      	cmp	r5, #0
 800a156:	d04d      	beq.n	800a1f4 <_printf_i+0x1b4>
 800a158:	4615      	mov	r5, r2
 800a15a:	fbb6 f1f3 	udiv	r1, r6, r3
 800a15e:	fb03 6711 	mls	r7, r3, r1, r6
 800a162:	5dc7      	ldrb	r7, [r0, r7]
 800a164:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a168:	4637      	mov	r7, r6
 800a16a:	42bb      	cmp	r3, r7
 800a16c:	460e      	mov	r6, r1
 800a16e:	d9f4      	bls.n	800a15a <_printf_i+0x11a>
 800a170:	2b08      	cmp	r3, #8
 800a172:	d10b      	bne.n	800a18c <_printf_i+0x14c>
 800a174:	6823      	ldr	r3, [r4, #0]
 800a176:	07de      	lsls	r6, r3, #31
 800a178:	d508      	bpl.n	800a18c <_printf_i+0x14c>
 800a17a:	6923      	ldr	r3, [r4, #16]
 800a17c:	6861      	ldr	r1, [r4, #4]
 800a17e:	4299      	cmp	r1, r3
 800a180:	bfde      	ittt	le
 800a182:	2330      	movle	r3, #48	; 0x30
 800a184:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a188:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800a18c:	1b52      	subs	r2, r2, r5
 800a18e:	6122      	str	r2, [r4, #16]
 800a190:	f8cd a000 	str.w	sl, [sp]
 800a194:	464b      	mov	r3, r9
 800a196:	aa03      	add	r2, sp, #12
 800a198:	4621      	mov	r1, r4
 800a19a:	4640      	mov	r0, r8
 800a19c:	f7ff fee2 	bl	8009f64 <_printf_common>
 800a1a0:	3001      	adds	r0, #1
 800a1a2:	d14c      	bne.n	800a23e <_printf_i+0x1fe>
 800a1a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a1a8:	b004      	add	sp, #16
 800a1aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1ae:	4835      	ldr	r0, [pc, #212]	; (800a284 <_printf_i+0x244>)
 800a1b0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a1b4:	6829      	ldr	r1, [r5, #0]
 800a1b6:	6823      	ldr	r3, [r4, #0]
 800a1b8:	f851 6b04 	ldr.w	r6, [r1], #4
 800a1bc:	6029      	str	r1, [r5, #0]
 800a1be:	061d      	lsls	r5, r3, #24
 800a1c0:	d514      	bpl.n	800a1ec <_printf_i+0x1ac>
 800a1c2:	07df      	lsls	r7, r3, #31
 800a1c4:	bf44      	itt	mi
 800a1c6:	f043 0320 	orrmi.w	r3, r3, #32
 800a1ca:	6023      	strmi	r3, [r4, #0]
 800a1cc:	b91e      	cbnz	r6, 800a1d6 <_printf_i+0x196>
 800a1ce:	6823      	ldr	r3, [r4, #0]
 800a1d0:	f023 0320 	bic.w	r3, r3, #32
 800a1d4:	6023      	str	r3, [r4, #0]
 800a1d6:	2310      	movs	r3, #16
 800a1d8:	e7b0      	b.n	800a13c <_printf_i+0xfc>
 800a1da:	6823      	ldr	r3, [r4, #0]
 800a1dc:	f043 0320 	orr.w	r3, r3, #32
 800a1e0:	6023      	str	r3, [r4, #0]
 800a1e2:	2378      	movs	r3, #120	; 0x78
 800a1e4:	4828      	ldr	r0, [pc, #160]	; (800a288 <_printf_i+0x248>)
 800a1e6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a1ea:	e7e3      	b.n	800a1b4 <_printf_i+0x174>
 800a1ec:	0659      	lsls	r1, r3, #25
 800a1ee:	bf48      	it	mi
 800a1f0:	b2b6      	uxthmi	r6, r6
 800a1f2:	e7e6      	b.n	800a1c2 <_printf_i+0x182>
 800a1f4:	4615      	mov	r5, r2
 800a1f6:	e7bb      	b.n	800a170 <_printf_i+0x130>
 800a1f8:	682b      	ldr	r3, [r5, #0]
 800a1fa:	6826      	ldr	r6, [r4, #0]
 800a1fc:	6961      	ldr	r1, [r4, #20]
 800a1fe:	1d18      	adds	r0, r3, #4
 800a200:	6028      	str	r0, [r5, #0]
 800a202:	0635      	lsls	r5, r6, #24
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	d501      	bpl.n	800a20c <_printf_i+0x1cc>
 800a208:	6019      	str	r1, [r3, #0]
 800a20a:	e002      	b.n	800a212 <_printf_i+0x1d2>
 800a20c:	0670      	lsls	r0, r6, #25
 800a20e:	d5fb      	bpl.n	800a208 <_printf_i+0x1c8>
 800a210:	8019      	strh	r1, [r3, #0]
 800a212:	2300      	movs	r3, #0
 800a214:	6123      	str	r3, [r4, #16]
 800a216:	4615      	mov	r5, r2
 800a218:	e7ba      	b.n	800a190 <_printf_i+0x150>
 800a21a:	682b      	ldr	r3, [r5, #0]
 800a21c:	1d1a      	adds	r2, r3, #4
 800a21e:	602a      	str	r2, [r5, #0]
 800a220:	681d      	ldr	r5, [r3, #0]
 800a222:	6862      	ldr	r2, [r4, #4]
 800a224:	2100      	movs	r1, #0
 800a226:	4628      	mov	r0, r5
 800a228:	f7f5 ffb2 	bl	8000190 <memchr>
 800a22c:	b108      	cbz	r0, 800a232 <_printf_i+0x1f2>
 800a22e:	1b40      	subs	r0, r0, r5
 800a230:	6060      	str	r0, [r4, #4]
 800a232:	6863      	ldr	r3, [r4, #4]
 800a234:	6123      	str	r3, [r4, #16]
 800a236:	2300      	movs	r3, #0
 800a238:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a23c:	e7a8      	b.n	800a190 <_printf_i+0x150>
 800a23e:	6923      	ldr	r3, [r4, #16]
 800a240:	462a      	mov	r2, r5
 800a242:	4649      	mov	r1, r9
 800a244:	4640      	mov	r0, r8
 800a246:	47d0      	blx	sl
 800a248:	3001      	adds	r0, #1
 800a24a:	d0ab      	beq.n	800a1a4 <_printf_i+0x164>
 800a24c:	6823      	ldr	r3, [r4, #0]
 800a24e:	079b      	lsls	r3, r3, #30
 800a250:	d413      	bmi.n	800a27a <_printf_i+0x23a>
 800a252:	68e0      	ldr	r0, [r4, #12]
 800a254:	9b03      	ldr	r3, [sp, #12]
 800a256:	4298      	cmp	r0, r3
 800a258:	bfb8      	it	lt
 800a25a:	4618      	movlt	r0, r3
 800a25c:	e7a4      	b.n	800a1a8 <_printf_i+0x168>
 800a25e:	2301      	movs	r3, #1
 800a260:	4632      	mov	r2, r6
 800a262:	4649      	mov	r1, r9
 800a264:	4640      	mov	r0, r8
 800a266:	47d0      	blx	sl
 800a268:	3001      	adds	r0, #1
 800a26a:	d09b      	beq.n	800a1a4 <_printf_i+0x164>
 800a26c:	3501      	adds	r5, #1
 800a26e:	68e3      	ldr	r3, [r4, #12]
 800a270:	9903      	ldr	r1, [sp, #12]
 800a272:	1a5b      	subs	r3, r3, r1
 800a274:	42ab      	cmp	r3, r5
 800a276:	dcf2      	bgt.n	800a25e <_printf_i+0x21e>
 800a278:	e7eb      	b.n	800a252 <_printf_i+0x212>
 800a27a:	2500      	movs	r5, #0
 800a27c:	f104 0619 	add.w	r6, r4, #25
 800a280:	e7f5      	b.n	800a26e <_printf_i+0x22e>
 800a282:	bf00      	nop
 800a284:	0800ac95 	.word	0x0800ac95
 800a288:	0800aca6 	.word	0x0800aca6

0800a28c <_sbrk_r>:
 800a28c:	b538      	push	{r3, r4, r5, lr}
 800a28e:	4d06      	ldr	r5, [pc, #24]	; (800a2a8 <_sbrk_r+0x1c>)
 800a290:	2300      	movs	r3, #0
 800a292:	4604      	mov	r4, r0
 800a294:	4608      	mov	r0, r1
 800a296:	602b      	str	r3, [r5, #0]
 800a298:	f7f8 f884 	bl	80023a4 <_sbrk>
 800a29c:	1c43      	adds	r3, r0, #1
 800a29e:	d102      	bne.n	800a2a6 <_sbrk_r+0x1a>
 800a2a0:	682b      	ldr	r3, [r5, #0]
 800a2a2:	b103      	cbz	r3, 800a2a6 <_sbrk_r+0x1a>
 800a2a4:	6023      	str	r3, [r4, #0]
 800a2a6:	bd38      	pop	{r3, r4, r5, pc}
 800a2a8:	20000d28 	.word	0x20000d28

0800a2ac <__sread>:
 800a2ac:	b510      	push	{r4, lr}
 800a2ae:	460c      	mov	r4, r1
 800a2b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a2b4:	f000 fab2 	bl	800a81c <_read_r>
 800a2b8:	2800      	cmp	r0, #0
 800a2ba:	bfab      	itete	ge
 800a2bc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a2be:	89a3      	ldrhlt	r3, [r4, #12]
 800a2c0:	181b      	addge	r3, r3, r0
 800a2c2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a2c6:	bfac      	ite	ge
 800a2c8:	6563      	strge	r3, [r4, #84]	; 0x54
 800a2ca:	81a3      	strhlt	r3, [r4, #12]
 800a2cc:	bd10      	pop	{r4, pc}

0800a2ce <__swrite>:
 800a2ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2d2:	461f      	mov	r7, r3
 800a2d4:	898b      	ldrh	r3, [r1, #12]
 800a2d6:	05db      	lsls	r3, r3, #23
 800a2d8:	4605      	mov	r5, r0
 800a2da:	460c      	mov	r4, r1
 800a2dc:	4616      	mov	r6, r2
 800a2de:	d505      	bpl.n	800a2ec <__swrite+0x1e>
 800a2e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a2e4:	2302      	movs	r3, #2
 800a2e6:	2200      	movs	r2, #0
 800a2e8:	f000 f9c8 	bl	800a67c <_lseek_r>
 800a2ec:	89a3      	ldrh	r3, [r4, #12]
 800a2ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a2f2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a2f6:	81a3      	strh	r3, [r4, #12]
 800a2f8:	4632      	mov	r2, r6
 800a2fa:	463b      	mov	r3, r7
 800a2fc:	4628      	mov	r0, r5
 800a2fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a302:	f000 b869 	b.w	800a3d8 <_write_r>

0800a306 <__sseek>:
 800a306:	b510      	push	{r4, lr}
 800a308:	460c      	mov	r4, r1
 800a30a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a30e:	f000 f9b5 	bl	800a67c <_lseek_r>
 800a312:	1c43      	adds	r3, r0, #1
 800a314:	89a3      	ldrh	r3, [r4, #12]
 800a316:	bf15      	itete	ne
 800a318:	6560      	strne	r0, [r4, #84]	; 0x54
 800a31a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a31e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a322:	81a3      	strheq	r3, [r4, #12]
 800a324:	bf18      	it	ne
 800a326:	81a3      	strhne	r3, [r4, #12]
 800a328:	bd10      	pop	{r4, pc}

0800a32a <__sclose>:
 800a32a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a32e:	f000 b8d3 	b.w	800a4d8 <_close_r>
	...

0800a334 <__swbuf_r>:
 800a334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a336:	460e      	mov	r6, r1
 800a338:	4614      	mov	r4, r2
 800a33a:	4605      	mov	r5, r0
 800a33c:	b118      	cbz	r0, 800a346 <__swbuf_r+0x12>
 800a33e:	6983      	ldr	r3, [r0, #24]
 800a340:	b90b      	cbnz	r3, 800a346 <__swbuf_r+0x12>
 800a342:	f7ff fb81 	bl	8009a48 <__sinit>
 800a346:	4b21      	ldr	r3, [pc, #132]	; (800a3cc <__swbuf_r+0x98>)
 800a348:	429c      	cmp	r4, r3
 800a34a:	d12b      	bne.n	800a3a4 <__swbuf_r+0x70>
 800a34c:	686c      	ldr	r4, [r5, #4]
 800a34e:	69a3      	ldr	r3, [r4, #24]
 800a350:	60a3      	str	r3, [r4, #8]
 800a352:	89a3      	ldrh	r3, [r4, #12]
 800a354:	071a      	lsls	r2, r3, #28
 800a356:	d52f      	bpl.n	800a3b8 <__swbuf_r+0x84>
 800a358:	6923      	ldr	r3, [r4, #16]
 800a35a:	b36b      	cbz	r3, 800a3b8 <__swbuf_r+0x84>
 800a35c:	6923      	ldr	r3, [r4, #16]
 800a35e:	6820      	ldr	r0, [r4, #0]
 800a360:	1ac0      	subs	r0, r0, r3
 800a362:	6963      	ldr	r3, [r4, #20]
 800a364:	b2f6      	uxtb	r6, r6
 800a366:	4283      	cmp	r3, r0
 800a368:	4637      	mov	r7, r6
 800a36a:	dc04      	bgt.n	800a376 <__swbuf_r+0x42>
 800a36c:	4621      	mov	r1, r4
 800a36e:	4628      	mov	r0, r5
 800a370:	f000 f948 	bl	800a604 <_fflush_r>
 800a374:	bb30      	cbnz	r0, 800a3c4 <__swbuf_r+0x90>
 800a376:	68a3      	ldr	r3, [r4, #8]
 800a378:	3b01      	subs	r3, #1
 800a37a:	60a3      	str	r3, [r4, #8]
 800a37c:	6823      	ldr	r3, [r4, #0]
 800a37e:	1c5a      	adds	r2, r3, #1
 800a380:	6022      	str	r2, [r4, #0]
 800a382:	701e      	strb	r6, [r3, #0]
 800a384:	6963      	ldr	r3, [r4, #20]
 800a386:	3001      	adds	r0, #1
 800a388:	4283      	cmp	r3, r0
 800a38a:	d004      	beq.n	800a396 <__swbuf_r+0x62>
 800a38c:	89a3      	ldrh	r3, [r4, #12]
 800a38e:	07db      	lsls	r3, r3, #31
 800a390:	d506      	bpl.n	800a3a0 <__swbuf_r+0x6c>
 800a392:	2e0a      	cmp	r6, #10
 800a394:	d104      	bne.n	800a3a0 <__swbuf_r+0x6c>
 800a396:	4621      	mov	r1, r4
 800a398:	4628      	mov	r0, r5
 800a39a:	f000 f933 	bl	800a604 <_fflush_r>
 800a39e:	b988      	cbnz	r0, 800a3c4 <__swbuf_r+0x90>
 800a3a0:	4638      	mov	r0, r7
 800a3a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a3a4:	4b0a      	ldr	r3, [pc, #40]	; (800a3d0 <__swbuf_r+0x9c>)
 800a3a6:	429c      	cmp	r4, r3
 800a3a8:	d101      	bne.n	800a3ae <__swbuf_r+0x7a>
 800a3aa:	68ac      	ldr	r4, [r5, #8]
 800a3ac:	e7cf      	b.n	800a34e <__swbuf_r+0x1a>
 800a3ae:	4b09      	ldr	r3, [pc, #36]	; (800a3d4 <__swbuf_r+0xa0>)
 800a3b0:	429c      	cmp	r4, r3
 800a3b2:	bf08      	it	eq
 800a3b4:	68ec      	ldreq	r4, [r5, #12]
 800a3b6:	e7ca      	b.n	800a34e <__swbuf_r+0x1a>
 800a3b8:	4621      	mov	r1, r4
 800a3ba:	4628      	mov	r0, r5
 800a3bc:	f000 f81e 	bl	800a3fc <__swsetup_r>
 800a3c0:	2800      	cmp	r0, #0
 800a3c2:	d0cb      	beq.n	800a35c <__swbuf_r+0x28>
 800a3c4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800a3c8:	e7ea      	b.n	800a3a0 <__swbuf_r+0x6c>
 800a3ca:	bf00      	nop
 800a3cc:	0800ac44 	.word	0x0800ac44
 800a3d0:	0800ac64 	.word	0x0800ac64
 800a3d4:	0800ac24 	.word	0x0800ac24

0800a3d8 <_write_r>:
 800a3d8:	b538      	push	{r3, r4, r5, lr}
 800a3da:	4d07      	ldr	r5, [pc, #28]	; (800a3f8 <_write_r+0x20>)
 800a3dc:	4604      	mov	r4, r0
 800a3de:	4608      	mov	r0, r1
 800a3e0:	4611      	mov	r1, r2
 800a3e2:	2200      	movs	r2, #0
 800a3e4:	602a      	str	r2, [r5, #0]
 800a3e6:	461a      	mov	r2, r3
 800a3e8:	f7f7 ff8b 	bl	8002302 <_write>
 800a3ec:	1c43      	adds	r3, r0, #1
 800a3ee:	d102      	bne.n	800a3f6 <_write_r+0x1e>
 800a3f0:	682b      	ldr	r3, [r5, #0]
 800a3f2:	b103      	cbz	r3, 800a3f6 <_write_r+0x1e>
 800a3f4:	6023      	str	r3, [r4, #0]
 800a3f6:	bd38      	pop	{r3, r4, r5, pc}
 800a3f8:	20000d28 	.word	0x20000d28

0800a3fc <__swsetup_r>:
 800a3fc:	4b32      	ldr	r3, [pc, #200]	; (800a4c8 <__swsetup_r+0xcc>)
 800a3fe:	b570      	push	{r4, r5, r6, lr}
 800a400:	681d      	ldr	r5, [r3, #0]
 800a402:	4606      	mov	r6, r0
 800a404:	460c      	mov	r4, r1
 800a406:	b125      	cbz	r5, 800a412 <__swsetup_r+0x16>
 800a408:	69ab      	ldr	r3, [r5, #24]
 800a40a:	b913      	cbnz	r3, 800a412 <__swsetup_r+0x16>
 800a40c:	4628      	mov	r0, r5
 800a40e:	f7ff fb1b 	bl	8009a48 <__sinit>
 800a412:	4b2e      	ldr	r3, [pc, #184]	; (800a4cc <__swsetup_r+0xd0>)
 800a414:	429c      	cmp	r4, r3
 800a416:	d10f      	bne.n	800a438 <__swsetup_r+0x3c>
 800a418:	686c      	ldr	r4, [r5, #4]
 800a41a:	89a3      	ldrh	r3, [r4, #12]
 800a41c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a420:	0719      	lsls	r1, r3, #28
 800a422:	d42c      	bmi.n	800a47e <__swsetup_r+0x82>
 800a424:	06dd      	lsls	r5, r3, #27
 800a426:	d411      	bmi.n	800a44c <__swsetup_r+0x50>
 800a428:	2309      	movs	r3, #9
 800a42a:	6033      	str	r3, [r6, #0]
 800a42c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a430:	81a3      	strh	r3, [r4, #12]
 800a432:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a436:	e03e      	b.n	800a4b6 <__swsetup_r+0xba>
 800a438:	4b25      	ldr	r3, [pc, #148]	; (800a4d0 <__swsetup_r+0xd4>)
 800a43a:	429c      	cmp	r4, r3
 800a43c:	d101      	bne.n	800a442 <__swsetup_r+0x46>
 800a43e:	68ac      	ldr	r4, [r5, #8]
 800a440:	e7eb      	b.n	800a41a <__swsetup_r+0x1e>
 800a442:	4b24      	ldr	r3, [pc, #144]	; (800a4d4 <__swsetup_r+0xd8>)
 800a444:	429c      	cmp	r4, r3
 800a446:	bf08      	it	eq
 800a448:	68ec      	ldreq	r4, [r5, #12]
 800a44a:	e7e6      	b.n	800a41a <__swsetup_r+0x1e>
 800a44c:	0758      	lsls	r0, r3, #29
 800a44e:	d512      	bpl.n	800a476 <__swsetup_r+0x7a>
 800a450:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a452:	b141      	cbz	r1, 800a466 <__swsetup_r+0x6a>
 800a454:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a458:	4299      	cmp	r1, r3
 800a45a:	d002      	beq.n	800a462 <__swsetup_r+0x66>
 800a45c:	4630      	mov	r0, r6
 800a45e:	f000 f991 	bl	800a784 <_free_r>
 800a462:	2300      	movs	r3, #0
 800a464:	6363      	str	r3, [r4, #52]	; 0x34
 800a466:	89a3      	ldrh	r3, [r4, #12]
 800a468:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a46c:	81a3      	strh	r3, [r4, #12]
 800a46e:	2300      	movs	r3, #0
 800a470:	6063      	str	r3, [r4, #4]
 800a472:	6923      	ldr	r3, [r4, #16]
 800a474:	6023      	str	r3, [r4, #0]
 800a476:	89a3      	ldrh	r3, [r4, #12]
 800a478:	f043 0308 	orr.w	r3, r3, #8
 800a47c:	81a3      	strh	r3, [r4, #12]
 800a47e:	6923      	ldr	r3, [r4, #16]
 800a480:	b94b      	cbnz	r3, 800a496 <__swsetup_r+0x9a>
 800a482:	89a3      	ldrh	r3, [r4, #12]
 800a484:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a488:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a48c:	d003      	beq.n	800a496 <__swsetup_r+0x9a>
 800a48e:	4621      	mov	r1, r4
 800a490:	4630      	mov	r0, r6
 800a492:	f000 f92b 	bl	800a6ec <__smakebuf_r>
 800a496:	89a0      	ldrh	r0, [r4, #12]
 800a498:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a49c:	f010 0301 	ands.w	r3, r0, #1
 800a4a0:	d00a      	beq.n	800a4b8 <__swsetup_r+0xbc>
 800a4a2:	2300      	movs	r3, #0
 800a4a4:	60a3      	str	r3, [r4, #8]
 800a4a6:	6963      	ldr	r3, [r4, #20]
 800a4a8:	425b      	negs	r3, r3
 800a4aa:	61a3      	str	r3, [r4, #24]
 800a4ac:	6923      	ldr	r3, [r4, #16]
 800a4ae:	b943      	cbnz	r3, 800a4c2 <__swsetup_r+0xc6>
 800a4b0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a4b4:	d1ba      	bne.n	800a42c <__swsetup_r+0x30>
 800a4b6:	bd70      	pop	{r4, r5, r6, pc}
 800a4b8:	0781      	lsls	r1, r0, #30
 800a4ba:	bf58      	it	pl
 800a4bc:	6963      	ldrpl	r3, [r4, #20]
 800a4be:	60a3      	str	r3, [r4, #8]
 800a4c0:	e7f4      	b.n	800a4ac <__swsetup_r+0xb0>
 800a4c2:	2000      	movs	r0, #0
 800a4c4:	e7f7      	b.n	800a4b6 <__swsetup_r+0xba>
 800a4c6:	bf00      	nop
 800a4c8:	20000028 	.word	0x20000028
 800a4cc:	0800ac44 	.word	0x0800ac44
 800a4d0:	0800ac64 	.word	0x0800ac64
 800a4d4:	0800ac24 	.word	0x0800ac24

0800a4d8 <_close_r>:
 800a4d8:	b538      	push	{r3, r4, r5, lr}
 800a4da:	4d06      	ldr	r5, [pc, #24]	; (800a4f4 <_close_r+0x1c>)
 800a4dc:	2300      	movs	r3, #0
 800a4de:	4604      	mov	r4, r0
 800a4e0:	4608      	mov	r0, r1
 800a4e2:	602b      	str	r3, [r5, #0]
 800a4e4:	f7f7 ff29 	bl	800233a <_close>
 800a4e8:	1c43      	adds	r3, r0, #1
 800a4ea:	d102      	bne.n	800a4f2 <_close_r+0x1a>
 800a4ec:	682b      	ldr	r3, [r5, #0]
 800a4ee:	b103      	cbz	r3, 800a4f2 <_close_r+0x1a>
 800a4f0:	6023      	str	r3, [r4, #0]
 800a4f2:	bd38      	pop	{r3, r4, r5, pc}
 800a4f4:	20000d28 	.word	0x20000d28

0800a4f8 <__sflush_r>:
 800a4f8:	898a      	ldrh	r2, [r1, #12]
 800a4fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4fe:	4605      	mov	r5, r0
 800a500:	0710      	lsls	r0, r2, #28
 800a502:	460c      	mov	r4, r1
 800a504:	d458      	bmi.n	800a5b8 <__sflush_r+0xc0>
 800a506:	684b      	ldr	r3, [r1, #4]
 800a508:	2b00      	cmp	r3, #0
 800a50a:	dc05      	bgt.n	800a518 <__sflush_r+0x20>
 800a50c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a50e:	2b00      	cmp	r3, #0
 800a510:	dc02      	bgt.n	800a518 <__sflush_r+0x20>
 800a512:	2000      	movs	r0, #0
 800a514:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a518:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a51a:	2e00      	cmp	r6, #0
 800a51c:	d0f9      	beq.n	800a512 <__sflush_r+0x1a>
 800a51e:	2300      	movs	r3, #0
 800a520:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a524:	682f      	ldr	r7, [r5, #0]
 800a526:	602b      	str	r3, [r5, #0]
 800a528:	d032      	beq.n	800a590 <__sflush_r+0x98>
 800a52a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a52c:	89a3      	ldrh	r3, [r4, #12]
 800a52e:	075a      	lsls	r2, r3, #29
 800a530:	d505      	bpl.n	800a53e <__sflush_r+0x46>
 800a532:	6863      	ldr	r3, [r4, #4]
 800a534:	1ac0      	subs	r0, r0, r3
 800a536:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a538:	b10b      	cbz	r3, 800a53e <__sflush_r+0x46>
 800a53a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a53c:	1ac0      	subs	r0, r0, r3
 800a53e:	2300      	movs	r3, #0
 800a540:	4602      	mov	r2, r0
 800a542:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a544:	6a21      	ldr	r1, [r4, #32]
 800a546:	4628      	mov	r0, r5
 800a548:	47b0      	blx	r6
 800a54a:	1c43      	adds	r3, r0, #1
 800a54c:	89a3      	ldrh	r3, [r4, #12]
 800a54e:	d106      	bne.n	800a55e <__sflush_r+0x66>
 800a550:	6829      	ldr	r1, [r5, #0]
 800a552:	291d      	cmp	r1, #29
 800a554:	d82c      	bhi.n	800a5b0 <__sflush_r+0xb8>
 800a556:	4a2a      	ldr	r2, [pc, #168]	; (800a600 <__sflush_r+0x108>)
 800a558:	40ca      	lsrs	r2, r1
 800a55a:	07d6      	lsls	r6, r2, #31
 800a55c:	d528      	bpl.n	800a5b0 <__sflush_r+0xb8>
 800a55e:	2200      	movs	r2, #0
 800a560:	6062      	str	r2, [r4, #4]
 800a562:	04d9      	lsls	r1, r3, #19
 800a564:	6922      	ldr	r2, [r4, #16]
 800a566:	6022      	str	r2, [r4, #0]
 800a568:	d504      	bpl.n	800a574 <__sflush_r+0x7c>
 800a56a:	1c42      	adds	r2, r0, #1
 800a56c:	d101      	bne.n	800a572 <__sflush_r+0x7a>
 800a56e:	682b      	ldr	r3, [r5, #0]
 800a570:	b903      	cbnz	r3, 800a574 <__sflush_r+0x7c>
 800a572:	6560      	str	r0, [r4, #84]	; 0x54
 800a574:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a576:	602f      	str	r7, [r5, #0]
 800a578:	2900      	cmp	r1, #0
 800a57a:	d0ca      	beq.n	800a512 <__sflush_r+0x1a>
 800a57c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a580:	4299      	cmp	r1, r3
 800a582:	d002      	beq.n	800a58a <__sflush_r+0x92>
 800a584:	4628      	mov	r0, r5
 800a586:	f000 f8fd 	bl	800a784 <_free_r>
 800a58a:	2000      	movs	r0, #0
 800a58c:	6360      	str	r0, [r4, #52]	; 0x34
 800a58e:	e7c1      	b.n	800a514 <__sflush_r+0x1c>
 800a590:	6a21      	ldr	r1, [r4, #32]
 800a592:	2301      	movs	r3, #1
 800a594:	4628      	mov	r0, r5
 800a596:	47b0      	blx	r6
 800a598:	1c41      	adds	r1, r0, #1
 800a59a:	d1c7      	bne.n	800a52c <__sflush_r+0x34>
 800a59c:	682b      	ldr	r3, [r5, #0]
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d0c4      	beq.n	800a52c <__sflush_r+0x34>
 800a5a2:	2b1d      	cmp	r3, #29
 800a5a4:	d001      	beq.n	800a5aa <__sflush_r+0xb2>
 800a5a6:	2b16      	cmp	r3, #22
 800a5a8:	d101      	bne.n	800a5ae <__sflush_r+0xb6>
 800a5aa:	602f      	str	r7, [r5, #0]
 800a5ac:	e7b1      	b.n	800a512 <__sflush_r+0x1a>
 800a5ae:	89a3      	ldrh	r3, [r4, #12]
 800a5b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a5b4:	81a3      	strh	r3, [r4, #12]
 800a5b6:	e7ad      	b.n	800a514 <__sflush_r+0x1c>
 800a5b8:	690f      	ldr	r7, [r1, #16]
 800a5ba:	2f00      	cmp	r7, #0
 800a5bc:	d0a9      	beq.n	800a512 <__sflush_r+0x1a>
 800a5be:	0793      	lsls	r3, r2, #30
 800a5c0:	680e      	ldr	r6, [r1, #0]
 800a5c2:	bf08      	it	eq
 800a5c4:	694b      	ldreq	r3, [r1, #20]
 800a5c6:	600f      	str	r7, [r1, #0]
 800a5c8:	bf18      	it	ne
 800a5ca:	2300      	movne	r3, #0
 800a5cc:	eba6 0807 	sub.w	r8, r6, r7
 800a5d0:	608b      	str	r3, [r1, #8]
 800a5d2:	f1b8 0f00 	cmp.w	r8, #0
 800a5d6:	dd9c      	ble.n	800a512 <__sflush_r+0x1a>
 800a5d8:	6a21      	ldr	r1, [r4, #32]
 800a5da:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a5dc:	4643      	mov	r3, r8
 800a5de:	463a      	mov	r2, r7
 800a5e0:	4628      	mov	r0, r5
 800a5e2:	47b0      	blx	r6
 800a5e4:	2800      	cmp	r0, #0
 800a5e6:	dc06      	bgt.n	800a5f6 <__sflush_r+0xfe>
 800a5e8:	89a3      	ldrh	r3, [r4, #12]
 800a5ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a5ee:	81a3      	strh	r3, [r4, #12]
 800a5f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a5f4:	e78e      	b.n	800a514 <__sflush_r+0x1c>
 800a5f6:	4407      	add	r7, r0
 800a5f8:	eba8 0800 	sub.w	r8, r8, r0
 800a5fc:	e7e9      	b.n	800a5d2 <__sflush_r+0xda>
 800a5fe:	bf00      	nop
 800a600:	20400001 	.word	0x20400001

0800a604 <_fflush_r>:
 800a604:	b538      	push	{r3, r4, r5, lr}
 800a606:	690b      	ldr	r3, [r1, #16]
 800a608:	4605      	mov	r5, r0
 800a60a:	460c      	mov	r4, r1
 800a60c:	b913      	cbnz	r3, 800a614 <_fflush_r+0x10>
 800a60e:	2500      	movs	r5, #0
 800a610:	4628      	mov	r0, r5
 800a612:	bd38      	pop	{r3, r4, r5, pc}
 800a614:	b118      	cbz	r0, 800a61e <_fflush_r+0x1a>
 800a616:	6983      	ldr	r3, [r0, #24]
 800a618:	b90b      	cbnz	r3, 800a61e <_fflush_r+0x1a>
 800a61a:	f7ff fa15 	bl	8009a48 <__sinit>
 800a61e:	4b14      	ldr	r3, [pc, #80]	; (800a670 <_fflush_r+0x6c>)
 800a620:	429c      	cmp	r4, r3
 800a622:	d11b      	bne.n	800a65c <_fflush_r+0x58>
 800a624:	686c      	ldr	r4, [r5, #4]
 800a626:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d0ef      	beq.n	800a60e <_fflush_r+0xa>
 800a62e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a630:	07d0      	lsls	r0, r2, #31
 800a632:	d404      	bmi.n	800a63e <_fflush_r+0x3a>
 800a634:	0599      	lsls	r1, r3, #22
 800a636:	d402      	bmi.n	800a63e <_fflush_r+0x3a>
 800a638:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a63a:	f7ff faa3 	bl	8009b84 <__retarget_lock_acquire_recursive>
 800a63e:	4628      	mov	r0, r5
 800a640:	4621      	mov	r1, r4
 800a642:	f7ff ff59 	bl	800a4f8 <__sflush_r>
 800a646:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a648:	07da      	lsls	r2, r3, #31
 800a64a:	4605      	mov	r5, r0
 800a64c:	d4e0      	bmi.n	800a610 <_fflush_r+0xc>
 800a64e:	89a3      	ldrh	r3, [r4, #12]
 800a650:	059b      	lsls	r3, r3, #22
 800a652:	d4dd      	bmi.n	800a610 <_fflush_r+0xc>
 800a654:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a656:	f7ff fa96 	bl	8009b86 <__retarget_lock_release_recursive>
 800a65a:	e7d9      	b.n	800a610 <_fflush_r+0xc>
 800a65c:	4b05      	ldr	r3, [pc, #20]	; (800a674 <_fflush_r+0x70>)
 800a65e:	429c      	cmp	r4, r3
 800a660:	d101      	bne.n	800a666 <_fflush_r+0x62>
 800a662:	68ac      	ldr	r4, [r5, #8]
 800a664:	e7df      	b.n	800a626 <_fflush_r+0x22>
 800a666:	4b04      	ldr	r3, [pc, #16]	; (800a678 <_fflush_r+0x74>)
 800a668:	429c      	cmp	r4, r3
 800a66a:	bf08      	it	eq
 800a66c:	68ec      	ldreq	r4, [r5, #12]
 800a66e:	e7da      	b.n	800a626 <_fflush_r+0x22>
 800a670:	0800ac44 	.word	0x0800ac44
 800a674:	0800ac64 	.word	0x0800ac64
 800a678:	0800ac24 	.word	0x0800ac24

0800a67c <_lseek_r>:
 800a67c:	b538      	push	{r3, r4, r5, lr}
 800a67e:	4d07      	ldr	r5, [pc, #28]	; (800a69c <_lseek_r+0x20>)
 800a680:	4604      	mov	r4, r0
 800a682:	4608      	mov	r0, r1
 800a684:	4611      	mov	r1, r2
 800a686:	2200      	movs	r2, #0
 800a688:	602a      	str	r2, [r5, #0]
 800a68a:	461a      	mov	r2, r3
 800a68c:	f7f7 fe7c 	bl	8002388 <_lseek>
 800a690:	1c43      	adds	r3, r0, #1
 800a692:	d102      	bne.n	800a69a <_lseek_r+0x1e>
 800a694:	682b      	ldr	r3, [r5, #0]
 800a696:	b103      	cbz	r3, 800a69a <_lseek_r+0x1e>
 800a698:	6023      	str	r3, [r4, #0]
 800a69a:	bd38      	pop	{r3, r4, r5, pc}
 800a69c:	20000d28 	.word	0x20000d28

0800a6a0 <__swhatbuf_r>:
 800a6a0:	b570      	push	{r4, r5, r6, lr}
 800a6a2:	460e      	mov	r6, r1
 800a6a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a6a8:	2900      	cmp	r1, #0
 800a6aa:	b096      	sub	sp, #88	; 0x58
 800a6ac:	4614      	mov	r4, r2
 800a6ae:	461d      	mov	r5, r3
 800a6b0:	da08      	bge.n	800a6c4 <__swhatbuf_r+0x24>
 800a6b2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a6b6:	2200      	movs	r2, #0
 800a6b8:	602a      	str	r2, [r5, #0]
 800a6ba:	061a      	lsls	r2, r3, #24
 800a6bc:	d410      	bmi.n	800a6e0 <__swhatbuf_r+0x40>
 800a6be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a6c2:	e00e      	b.n	800a6e2 <__swhatbuf_r+0x42>
 800a6c4:	466a      	mov	r2, sp
 800a6c6:	f000 f8bb 	bl	800a840 <_fstat_r>
 800a6ca:	2800      	cmp	r0, #0
 800a6cc:	dbf1      	blt.n	800a6b2 <__swhatbuf_r+0x12>
 800a6ce:	9a01      	ldr	r2, [sp, #4]
 800a6d0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a6d4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a6d8:	425a      	negs	r2, r3
 800a6da:	415a      	adcs	r2, r3
 800a6dc:	602a      	str	r2, [r5, #0]
 800a6de:	e7ee      	b.n	800a6be <__swhatbuf_r+0x1e>
 800a6e0:	2340      	movs	r3, #64	; 0x40
 800a6e2:	2000      	movs	r0, #0
 800a6e4:	6023      	str	r3, [r4, #0]
 800a6e6:	b016      	add	sp, #88	; 0x58
 800a6e8:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a6ec <__smakebuf_r>:
 800a6ec:	898b      	ldrh	r3, [r1, #12]
 800a6ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a6f0:	079d      	lsls	r5, r3, #30
 800a6f2:	4606      	mov	r6, r0
 800a6f4:	460c      	mov	r4, r1
 800a6f6:	d507      	bpl.n	800a708 <__smakebuf_r+0x1c>
 800a6f8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a6fc:	6023      	str	r3, [r4, #0]
 800a6fe:	6123      	str	r3, [r4, #16]
 800a700:	2301      	movs	r3, #1
 800a702:	6163      	str	r3, [r4, #20]
 800a704:	b002      	add	sp, #8
 800a706:	bd70      	pop	{r4, r5, r6, pc}
 800a708:	ab01      	add	r3, sp, #4
 800a70a:	466a      	mov	r2, sp
 800a70c:	f7ff ffc8 	bl	800a6a0 <__swhatbuf_r>
 800a710:	9900      	ldr	r1, [sp, #0]
 800a712:	4605      	mov	r5, r0
 800a714:	4630      	mov	r0, r6
 800a716:	f7ff fa57 	bl	8009bc8 <_malloc_r>
 800a71a:	b948      	cbnz	r0, 800a730 <__smakebuf_r+0x44>
 800a71c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a720:	059a      	lsls	r2, r3, #22
 800a722:	d4ef      	bmi.n	800a704 <__smakebuf_r+0x18>
 800a724:	f023 0303 	bic.w	r3, r3, #3
 800a728:	f043 0302 	orr.w	r3, r3, #2
 800a72c:	81a3      	strh	r3, [r4, #12]
 800a72e:	e7e3      	b.n	800a6f8 <__smakebuf_r+0xc>
 800a730:	4b0d      	ldr	r3, [pc, #52]	; (800a768 <__smakebuf_r+0x7c>)
 800a732:	62b3      	str	r3, [r6, #40]	; 0x28
 800a734:	89a3      	ldrh	r3, [r4, #12]
 800a736:	6020      	str	r0, [r4, #0]
 800a738:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a73c:	81a3      	strh	r3, [r4, #12]
 800a73e:	9b00      	ldr	r3, [sp, #0]
 800a740:	6163      	str	r3, [r4, #20]
 800a742:	9b01      	ldr	r3, [sp, #4]
 800a744:	6120      	str	r0, [r4, #16]
 800a746:	b15b      	cbz	r3, 800a760 <__smakebuf_r+0x74>
 800a748:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a74c:	4630      	mov	r0, r6
 800a74e:	f000 f889 	bl	800a864 <_isatty_r>
 800a752:	b128      	cbz	r0, 800a760 <__smakebuf_r+0x74>
 800a754:	89a3      	ldrh	r3, [r4, #12]
 800a756:	f023 0303 	bic.w	r3, r3, #3
 800a75a:	f043 0301 	orr.w	r3, r3, #1
 800a75e:	81a3      	strh	r3, [r4, #12]
 800a760:	89a0      	ldrh	r0, [r4, #12]
 800a762:	4305      	orrs	r5, r0
 800a764:	81a5      	strh	r5, [r4, #12]
 800a766:	e7cd      	b.n	800a704 <__smakebuf_r+0x18>
 800a768:	080099e1 	.word	0x080099e1

0800a76c <__malloc_lock>:
 800a76c:	4801      	ldr	r0, [pc, #4]	; (800a774 <__malloc_lock+0x8>)
 800a76e:	f7ff ba09 	b.w	8009b84 <__retarget_lock_acquire_recursive>
 800a772:	bf00      	nop
 800a774:	20000d1c 	.word	0x20000d1c

0800a778 <__malloc_unlock>:
 800a778:	4801      	ldr	r0, [pc, #4]	; (800a780 <__malloc_unlock+0x8>)
 800a77a:	f7ff ba04 	b.w	8009b86 <__retarget_lock_release_recursive>
 800a77e:	bf00      	nop
 800a780:	20000d1c 	.word	0x20000d1c

0800a784 <_free_r>:
 800a784:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a786:	2900      	cmp	r1, #0
 800a788:	d044      	beq.n	800a814 <_free_r+0x90>
 800a78a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a78e:	9001      	str	r0, [sp, #4]
 800a790:	2b00      	cmp	r3, #0
 800a792:	f1a1 0404 	sub.w	r4, r1, #4
 800a796:	bfb8      	it	lt
 800a798:	18e4      	addlt	r4, r4, r3
 800a79a:	f7ff ffe7 	bl	800a76c <__malloc_lock>
 800a79e:	4a1e      	ldr	r2, [pc, #120]	; (800a818 <_free_r+0x94>)
 800a7a0:	9801      	ldr	r0, [sp, #4]
 800a7a2:	6813      	ldr	r3, [r2, #0]
 800a7a4:	b933      	cbnz	r3, 800a7b4 <_free_r+0x30>
 800a7a6:	6063      	str	r3, [r4, #4]
 800a7a8:	6014      	str	r4, [r2, #0]
 800a7aa:	b003      	add	sp, #12
 800a7ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a7b0:	f7ff bfe2 	b.w	800a778 <__malloc_unlock>
 800a7b4:	42a3      	cmp	r3, r4
 800a7b6:	d908      	bls.n	800a7ca <_free_r+0x46>
 800a7b8:	6825      	ldr	r5, [r4, #0]
 800a7ba:	1961      	adds	r1, r4, r5
 800a7bc:	428b      	cmp	r3, r1
 800a7be:	bf01      	itttt	eq
 800a7c0:	6819      	ldreq	r1, [r3, #0]
 800a7c2:	685b      	ldreq	r3, [r3, #4]
 800a7c4:	1949      	addeq	r1, r1, r5
 800a7c6:	6021      	streq	r1, [r4, #0]
 800a7c8:	e7ed      	b.n	800a7a6 <_free_r+0x22>
 800a7ca:	461a      	mov	r2, r3
 800a7cc:	685b      	ldr	r3, [r3, #4]
 800a7ce:	b10b      	cbz	r3, 800a7d4 <_free_r+0x50>
 800a7d0:	42a3      	cmp	r3, r4
 800a7d2:	d9fa      	bls.n	800a7ca <_free_r+0x46>
 800a7d4:	6811      	ldr	r1, [r2, #0]
 800a7d6:	1855      	adds	r5, r2, r1
 800a7d8:	42a5      	cmp	r5, r4
 800a7da:	d10b      	bne.n	800a7f4 <_free_r+0x70>
 800a7dc:	6824      	ldr	r4, [r4, #0]
 800a7de:	4421      	add	r1, r4
 800a7e0:	1854      	adds	r4, r2, r1
 800a7e2:	42a3      	cmp	r3, r4
 800a7e4:	6011      	str	r1, [r2, #0]
 800a7e6:	d1e0      	bne.n	800a7aa <_free_r+0x26>
 800a7e8:	681c      	ldr	r4, [r3, #0]
 800a7ea:	685b      	ldr	r3, [r3, #4]
 800a7ec:	6053      	str	r3, [r2, #4]
 800a7ee:	4421      	add	r1, r4
 800a7f0:	6011      	str	r1, [r2, #0]
 800a7f2:	e7da      	b.n	800a7aa <_free_r+0x26>
 800a7f4:	d902      	bls.n	800a7fc <_free_r+0x78>
 800a7f6:	230c      	movs	r3, #12
 800a7f8:	6003      	str	r3, [r0, #0]
 800a7fa:	e7d6      	b.n	800a7aa <_free_r+0x26>
 800a7fc:	6825      	ldr	r5, [r4, #0]
 800a7fe:	1961      	adds	r1, r4, r5
 800a800:	428b      	cmp	r3, r1
 800a802:	bf04      	itt	eq
 800a804:	6819      	ldreq	r1, [r3, #0]
 800a806:	685b      	ldreq	r3, [r3, #4]
 800a808:	6063      	str	r3, [r4, #4]
 800a80a:	bf04      	itt	eq
 800a80c:	1949      	addeq	r1, r1, r5
 800a80e:	6021      	streq	r1, [r4, #0]
 800a810:	6054      	str	r4, [r2, #4]
 800a812:	e7ca      	b.n	800a7aa <_free_r+0x26>
 800a814:	b003      	add	sp, #12
 800a816:	bd30      	pop	{r4, r5, pc}
 800a818:	20000d20 	.word	0x20000d20

0800a81c <_read_r>:
 800a81c:	b538      	push	{r3, r4, r5, lr}
 800a81e:	4d07      	ldr	r5, [pc, #28]	; (800a83c <_read_r+0x20>)
 800a820:	4604      	mov	r4, r0
 800a822:	4608      	mov	r0, r1
 800a824:	4611      	mov	r1, r2
 800a826:	2200      	movs	r2, #0
 800a828:	602a      	str	r2, [r5, #0]
 800a82a:	461a      	mov	r2, r3
 800a82c:	f7f7 fd4c 	bl	80022c8 <_read>
 800a830:	1c43      	adds	r3, r0, #1
 800a832:	d102      	bne.n	800a83a <_read_r+0x1e>
 800a834:	682b      	ldr	r3, [r5, #0]
 800a836:	b103      	cbz	r3, 800a83a <_read_r+0x1e>
 800a838:	6023      	str	r3, [r4, #0]
 800a83a:	bd38      	pop	{r3, r4, r5, pc}
 800a83c:	20000d28 	.word	0x20000d28

0800a840 <_fstat_r>:
 800a840:	b538      	push	{r3, r4, r5, lr}
 800a842:	4d07      	ldr	r5, [pc, #28]	; (800a860 <_fstat_r+0x20>)
 800a844:	2300      	movs	r3, #0
 800a846:	4604      	mov	r4, r0
 800a848:	4608      	mov	r0, r1
 800a84a:	4611      	mov	r1, r2
 800a84c:	602b      	str	r3, [r5, #0]
 800a84e:	f7f7 fd80 	bl	8002352 <_fstat>
 800a852:	1c43      	adds	r3, r0, #1
 800a854:	d102      	bne.n	800a85c <_fstat_r+0x1c>
 800a856:	682b      	ldr	r3, [r5, #0]
 800a858:	b103      	cbz	r3, 800a85c <_fstat_r+0x1c>
 800a85a:	6023      	str	r3, [r4, #0]
 800a85c:	bd38      	pop	{r3, r4, r5, pc}
 800a85e:	bf00      	nop
 800a860:	20000d28 	.word	0x20000d28

0800a864 <_isatty_r>:
 800a864:	b538      	push	{r3, r4, r5, lr}
 800a866:	4d06      	ldr	r5, [pc, #24]	; (800a880 <_isatty_r+0x1c>)
 800a868:	2300      	movs	r3, #0
 800a86a:	4604      	mov	r4, r0
 800a86c:	4608      	mov	r0, r1
 800a86e:	602b      	str	r3, [r5, #0]
 800a870:	f7f7 fd7f 	bl	8002372 <_isatty>
 800a874:	1c43      	adds	r3, r0, #1
 800a876:	d102      	bne.n	800a87e <_isatty_r+0x1a>
 800a878:	682b      	ldr	r3, [r5, #0]
 800a87a:	b103      	cbz	r3, 800a87e <_isatty_r+0x1a>
 800a87c:	6023      	str	r3, [r4, #0]
 800a87e:	bd38      	pop	{r3, r4, r5, pc}
 800a880:	20000d28 	.word	0x20000d28

0800a884 <_init>:
 800a884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a886:	bf00      	nop
 800a888:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a88a:	bc08      	pop	{r3}
 800a88c:	469e      	mov	lr, r3
 800a88e:	4770      	bx	lr

0800a890 <_fini>:
 800a890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a892:	bf00      	nop
 800a894:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a896:	bc08      	pop	{r3}
 800a898:	469e      	mov	lr, r3
 800a89a:	4770      	bx	lr
