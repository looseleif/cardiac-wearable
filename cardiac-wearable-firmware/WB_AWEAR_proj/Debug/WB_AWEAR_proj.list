
WB_AWEAR_proj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a2a0  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000368  0800a3e0  0800a3e0  0001a3e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800a748  0800a748  0001a748  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800a750  0800a750  0001a750  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800a754  0800a754  0001a754  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000084  20000008  0800a758  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 MB_MEM2       00000883  2000008c  0800a7dc  0002008c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 BLE_DRIVER_CONTEXT 00000035  20000910  0800b05f  00020910  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 SYSTEM_DRIVER_CONTEXT 00000011  20000948  0800b094  00020948  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          000003dc  2000095c  0800b0a5  0002095c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000d38  0800b0a5  00020d38  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020959  2**0
                  CONTENTS, READONLY
 13 MAPPING_TABLE 00000028  20030000  20030000  00030000  2**2
                  ALLOC
 14 MB_MEM1       000001bb  20030028  20030028  00030000  2**2
                  ALLOC
 15 .debug_info   000305a1  00000000  00000000  00020989  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00005e81  00000000  00000000  00050f2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 000029f8  00000000  00000000  00056db0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 00002750  00000000  00000000  000597a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002d140  00000000  00000000  0005bef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0002edea  00000000  00000000  00089038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000fa6e1  00000000  00000000  000b7e22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000050  00000000  00000000  001b2503  2**0
                  CONTENTS, READONLY
 23 .debug_frame  0000b770  00000000  00000000  001b2554  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	2000095c 	.word	0x2000095c
 800015c:	00000000 	.word	0x00000000
 8000160:	0800a3c8 	.word	0x0800a3c8

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000960 	.word	0x20000960
 800017c:	0800a3c8 	.word	0x0800a3c8

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_uldivmod>:
 8000230:	b953      	cbnz	r3, 8000248 <__aeabi_uldivmod+0x18>
 8000232:	b94a      	cbnz	r2, 8000248 <__aeabi_uldivmod+0x18>
 8000234:	2900      	cmp	r1, #0
 8000236:	bf08      	it	eq
 8000238:	2800      	cmpeq	r0, #0
 800023a:	bf1c      	itt	ne
 800023c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000240:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000244:	f000 b974 	b.w	8000530 <__aeabi_idiv0>
 8000248:	f1ad 0c08 	sub.w	ip, sp, #8
 800024c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000258:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800025c:	b004      	add	sp, #16
 800025e:	4770      	bx	lr

08000260 <__udivmoddi4>:
 8000260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000264:	9d08      	ldr	r5, [sp, #32]
 8000266:	4604      	mov	r4, r0
 8000268:	468e      	mov	lr, r1
 800026a:	2b00      	cmp	r3, #0
 800026c:	d14d      	bne.n	800030a <__udivmoddi4+0xaa>
 800026e:	428a      	cmp	r2, r1
 8000270:	4694      	mov	ip, r2
 8000272:	d969      	bls.n	8000348 <__udivmoddi4+0xe8>
 8000274:	fab2 f282 	clz	r2, r2
 8000278:	b152      	cbz	r2, 8000290 <__udivmoddi4+0x30>
 800027a:	fa01 f302 	lsl.w	r3, r1, r2
 800027e:	f1c2 0120 	rsb	r1, r2, #32
 8000282:	fa20 f101 	lsr.w	r1, r0, r1
 8000286:	fa0c fc02 	lsl.w	ip, ip, r2
 800028a:	ea41 0e03 	orr.w	lr, r1, r3
 800028e:	4094      	lsls	r4, r2
 8000290:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000294:	0c21      	lsrs	r1, r4, #16
 8000296:	fbbe f6f8 	udiv	r6, lr, r8
 800029a:	fa1f f78c 	uxth.w	r7, ip
 800029e:	fb08 e316 	mls	r3, r8, r6, lr
 80002a2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002a6:	fb06 f107 	mul.w	r1, r6, r7
 80002aa:	4299      	cmp	r1, r3
 80002ac:	d90a      	bls.n	80002c4 <__udivmoddi4+0x64>
 80002ae:	eb1c 0303 	adds.w	r3, ip, r3
 80002b2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002b6:	f080 811f 	bcs.w	80004f8 <__udivmoddi4+0x298>
 80002ba:	4299      	cmp	r1, r3
 80002bc:	f240 811c 	bls.w	80004f8 <__udivmoddi4+0x298>
 80002c0:	3e02      	subs	r6, #2
 80002c2:	4463      	add	r3, ip
 80002c4:	1a5b      	subs	r3, r3, r1
 80002c6:	b2a4      	uxth	r4, r4
 80002c8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002cc:	fb08 3310 	mls	r3, r8, r0, r3
 80002d0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d4:	fb00 f707 	mul.w	r7, r0, r7
 80002d8:	42a7      	cmp	r7, r4
 80002da:	d90a      	bls.n	80002f2 <__udivmoddi4+0x92>
 80002dc:	eb1c 0404 	adds.w	r4, ip, r4
 80002e0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002e4:	f080 810a 	bcs.w	80004fc <__udivmoddi4+0x29c>
 80002e8:	42a7      	cmp	r7, r4
 80002ea:	f240 8107 	bls.w	80004fc <__udivmoddi4+0x29c>
 80002ee:	4464      	add	r4, ip
 80002f0:	3802      	subs	r0, #2
 80002f2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002f6:	1be4      	subs	r4, r4, r7
 80002f8:	2600      	movs	r6, #0
 80002fa:	b11d      	cbz	r5, 8000304 <__udivmoddi4+0xa4>
 80002fc:	40d4      	lsrs	r4, r2
 80002fe:	2300      	movs	r3, #0
 8000300:	e9c5 4300 	strd	r4, r3, [r5]
 8000304:	4631      	mov	r1, r6
 8000306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030a:	428b      	cmp	r3, r1
 800030c:	d909      	bls.n	8000322 <__udivmoddi4+0xc2>
 800030e:	2d00      	cmp	r5, #0
 8000310:	f000 80ef 	beq.w	80004f2 <__udivmoddi4+0x292>
 8000314:	2600      	movs	r6, #0
 8000316:	e9c5 0100 	strd	r0, r1, [r5]
 800031a:	4630      	mov	r0, r6
 800031c:	4631      	mov	r1, r6
 800031e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000322:	fab3 f683 	clz	r6, r3
 8000326:	2e00      	cmp	r6, #0
 8000328:	d14a      	bne.n	80003c0 <__udivmoddi4+0x160>
 800032a:	428b      	cmp	r3, r1
 800032c:	d302      	bcc.n	8000334 <__udivmoddi4+0xd4>
 800032e:	4282      	cmp	r2, r0
 8000330:	f200 80f9 	bhi.w	8000526 <__udivmoddi4+0x2c6>
 8000334:	1a84      	subs	r4, r0, r2
 8000336:	eb61 0303 	sbc.w	r3, r1, r3
 800033a:	2001      	movs	r0, #1
 800033c:	469e      	mov	lr, r3
 800033e:	2d00      	cmp	r5, #0
 8000340:	d0e0      	beq.n	8000304 <__udivmoddi4+0xa4>
 8000342:	e9c5 4e00 	strd	r4, lr, [r5]
 8000346:	e7dd      	b.n	8000304 <__udivmoddi4+0xa4>
 8000348:	b902      	cbnz	r2, 800034c <__udivmoddi4+0xec>
 800034a:	deff      	udf	#255	; 0xff
 800034c:	fab2 f282 	clz	r2, r2
 8000350:	2a00      	cmp	r2, #0
 8000352:	f040 8092 	bne.w	800047a <__udivmoddi4+0x21a>
 8000356:	eba1 010c 	sub.w	r1, r1, ip
 800035a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800035e:	fa1f fe8c 	uxth.w	lr, ip
 8000362:	2601      	movs	r6, #1
 8000364:	0c20      	lsrs	r0, r4, #16
 8000366:	fbb1 f3f7 	udiv	r3, r1, r7
 800036a:	fb07 1113 	mls	r1, r7, r3, r1
 800036e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000372:	fb0e f003 	mul.w	r0, lr, r3
 8000376:	4288      	cmp	r0, r1
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0x12c>
 800037a:	eb1c 0101 	adds.w	r1, ip, r1
 800037e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x12a>
 8000384:	4288      	cmp	r0, r1
 8000386:	f200 80cb 	bhi.w	8000520 <__udivmoddi4+0x2c0>
 800038a:	4643      	mov	r3, r8
 800038c:	1a09      	subs	r1, r1, r0
 800038e:	b2a4      	uxth	r4, r4
 8000390:	fbb1 f0f7 	udiv	r0, r1, r7
 8000394:	fb07 1110 	mls	r1, r7, r0, r1
 8000398:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800039c:	fb0e fe00 	mul.w	lr, lr, r0
 80003a0:	45a6      	cmp	lr, r4
 80003a2:	d908      	bls.n	80003b6 <__udivmoddi4+0x156>
 80003a4:	eb1c 0404 	adds.w	r4, ip, r4
 80003a8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003ac:	d202      	bcs.n	80003b4 <__udivmoddi4+0x154>
 80003ae:	45a6      	cmp	lr, r4
 80003b0:	f200 80bb 	bhi.w	800052a <__udivmoddi4+0x2ca>
 80003b4:	4608      	mov	r0, r1
 80003b6:	eba4 040e 	sub.w	r4, r4, lr
 80003ba:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003be:	e79c      	b.n	80002fa <__udivmoddi4+0x9a>
 80003c0:	f1c6 0720 	rsb	r7, r6, #32
 80003c4:	40b3      	lsls	r3, r6
 80003c6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ca:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ce:	fa20 f407 	lsr.w	r4, r0, r7
 80003d2:	fa01 f306 	lsl.w	r3, r1, r6
 80003d6:	431c      	orrs	r4, r3
 80003d8:	40f9      	lsrs	r1, r7
 80003da:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003de:	fa00 f306 	lsl.w	r3, r0, r6
 80003e2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003e6:	0c20      	lsrs	r0, r4, #16
 80003e8:	fa1f fe8c 	uxth.w	lr, ip
 80003ec:	fb09 1118 	mls	r1, r9, r8, r1
 80003f0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f4:	fb08 f00e 	mul.w	r0, r8, lr
 80003f8:	4288      	cmp	r0, r1
 80003fa:	fa02 f206 	lsl.w	r2, r2, r6
 80003fe:	d90b      	bls.n	8000418 <__udivmoddi4+0x1b8>
 8000400:	eb1c 0101 	adds.w	r1, ip, r1
 8000404:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000408:	f080 8088 	bcs.w	800051c <__udivmoddi4+0x2bc>
 800040c:	4288      	cmp	r0, r1
 800040e:	f240 8085 	bls.w	800051c <__udivmoddi4+0x2bc>
 8000412:	f1a8 0802 	sub.w	r8, r8, #2
 8000416:	4461      	add	r1, ip
 8000418:	1a09      	subs	r1, r1, r0
 800041a:	b2a4      	uxth	r4, r4
 800041c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000420:	fb09 1110 	mls	r1, r9, r0, r1
 8000424:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000428:	fb00 fe0e 	mul.w	lr, r0, lr
 800042c:	458e      	cmp	lr, r1
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x1e2>
 8000430:	eb1c 0101 	adds.w	r1, ip, r1
 8000434:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000438:	d26c      	bcs.n	8000514 <__udivmoddi4+0x2b4>
 800043a:	458e      	cmp	lr, r1
 800043c:	d96a      	bls.n	8000514 <__udivmoddi4+0x2b4>
 800043e:	3802      	subs	r0, #2
 8000440:	4461      	add	r1, ip
 8000442:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000446:	fba0 9402 	umull	r9, r4, r0, r2
 800044a:	eba1 010e 	sub.w	r1, r1, lr
 800044e:	42a1      	cmp	r1, r4
 8000450:	46c8      	mov	r8, r9
 8000452:	46a6      	mov	lr, r4
 8000454:	d356      	bcc.n	8000504 <__udivmoddi4+0x2a4>
 8000456:	d053      	beq.n	8000500 <__udivmoddi4+0x2a0>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x212>
 800045a:	ebb3 0208 	subs.w	r2, r3, r8
 800045e:	eb61 010e 	sbc.w	r1, r1, lr
 8000462:	fa01 f707 	lsl.w	r7, r1, r7
 8000466:	fa22 f306 	lsr.w	r3, r2, r6
 800046a:	40f1      	lsrs	r1, r6
 800046c:	431f      	orrs	r7, r3
 800046e:	e9c5 7100 	strd	r7, r1, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	f1c2 0320 	rsb	r3, r2, #32
 800047e:	40d8      	lsrs	r0, r3
 8000480:	fa0c fc02 	lsl.w	ip, ip, r2
 8000484:	fa21 f303 	lsr.w	r3, r1, r3
 8000488:	4091      	lsls	r1, r2
 800048a:	4301      	orrs	r1, r0
 800048c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fbb3 f0f7 	udiv	r0, r3, r7
 8000498:	fb07 3610 	mls	r6, r7, r0, r3
 800049c:	0c0b      	lsrs	r3, r1, #16
 800049e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004a2:	fb00 f60e 	mul.w	r6, r0, lr
 80004a6:	429e      	cmp	r6, r3
 80004a8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x260>
 80004ae:	eb1c 0303 	adds.w	r3, ip, r3
 80004b2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004b6:	d22f      	bcs.n	8000518 <__udivmoddi4+0x2b8>
 80004b8:	429e      	cmp	r6, r3
 80004ba:	d92d      	bls.n	8000518 <__udivmoddi4+0x2b8>
 80004bc:	3802      	subs	r0, #2
 80004be:	4463      	add	r3, ip
 80004c0:	1b9b      	subs	r3, r3, r6
 80004c2:	b289      	uxth	r1, r1
 80004c4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004c8:	fb07 3316 	mls	r3, r7, r6, r3
 80004cc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004d0:	fb06 f30e 	mul.w	r3, r6, lr
 80004d4:	428b      	cmp	r3, r1
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x28a>
 80004d8:	eb1c 0101 	adds.w	r1, ip, r1
 80004dc:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004e0:	d216      	bcs.n	8000510 <__udivmoddi4+0x2b0>
 80004e2:	428b      	cmp	r3, r1
 80004e4:	d914      	bls.n	8000510 <__udivmoddi4+0x2b0>
 80004e6:	3e02      	subs	r6, #2
 80004e8:	4461      	add	r1, ip
 80004ea:	1ac9      	subs	r1, r1, r3
 80004ec:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004f0:	e738      	b.n	8000364 <__udivmoddi4+0x104>
 80004f2:	462e      	mov	r6, r5
 80004f4:	4628      	mov	r0, r5
 80004f6:	e705      	b.n	8000304 <__udivmoddi4+0xa4>
 80004f8:	4606      	mov	r6, r0
 80004fa:	e6e3      	b.n	80002c4 <__udivmoddi4+0x64>
 80004fc:	4618      	mov	r0, r3
 80004fe:	e6f8      	b.n	80002f2 <__udivmoddi4+0x92>
 8000500:	454b      	cmp	r3, r9
 8000502:	d2a9      	bcs.n	8000458 <__udivmoddi4+0x1f8>
 8000504:	ebb9 0802 	subs.w	r8, r9, r2
 8000508:	eb64 0e0c 	sbc.w	lr, r4, ip
 800050c:	3801      	subs	r0, #1
 800050e:	e7a3      	b.n	8000458 <__udivmoddi4+0x1f8>
 8000510:	4646      	mov	r6, r8
 8000512:	e7ea      	b.n	80004ea <__udivmoddi4+0x28a>
 8000514:	4620      	mov	r0, r4
 8000516:	e794      	b.n	8000442 <__udivmoddi4+0x1e2>
 8000518:	4640      	mov	r0, r8
 800051a:	e7d1      	b.n	80004c0 <__udivmoddi4+0x260>
 800051c:	46d0      	mov	r8, sl
 800051e:	e77b      	b.n	8000418 <__udivmoddi4+0x1b8>
 8000520:	3b02      	subs	r3, #2
 8000522:	4461      	add	r1, ip
 8000524:	e732      	b.n	800038c <__udivmoddi4+0x12c>
 8000526:	4630      	mov	r0, r6
 8000528:	e709      	b.n	800033e <__udivmoddi4+0xde>
 800052a:	4464      	add	r4, ip
 800052c:	3802      	subs	r0, #2
 800052e:	e742      	b.n	80003b6 <__udivmoddi4+0x156>

08000530 <__aeabi_idiv0>:
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop

08000534 <BH1790GLC_init>:
******************************************************************************/

#include "BH1790GLC.h"

uint8_t BH1790GLC_init( BH1790GLC *dev, I2C_HandleTypeDef *i2cHandle )
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b084      	sub	sp, #16
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
 800053c:	6039      	str	r1, [r7, #0]
	/* Set struct parameters */
	dev->i2cHandle = i2cHandle;
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	683a      	ldr	r2, [r7, #0]
 8000542:	601a      	str	r2, [r3, #0]
	dev->measurements[0] = 0.0f;
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	f04f 0200 	mov.w	r2, #0
 800054a:	605a      	str	r2, [r3, #4]
	dev->measurements[1] = 0.0f;
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	f04f 0200 	mov.w	r2, #0
 8000552:	609a      	str	r2, [r3, #8]
	dev->measurements[2] = 0.0f;
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	f04f 0200 	mov.w	r2, #0
 800055a:	60da      	str	r2, [r3, #12]
	dev->measurement = 0.0f;
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	f04f 0200 	mov.w	r2, #0
 8000562:	611a      	str	r2, [r3, #16]

	/* Keep count of errors */
	uint8_t errNum = 0;
 8000564:	2300      	movs	r3, #0
 8000566:	73fb      	strb	r3, [r7, #15]

	/* First steps for communsticating with sensor
	 * get manufacturer id 		0x0F
	 * get part id 				0x10
	 */
	uint8_t regData = 0;
 8000568:	2300      	movs	r3, #0
 800056a:	737b      	strb	r3, [r7, #13]

	status = read(dev, BH1790GLC_MANUFACTURER_ID, &regData);	//get manufacturer id
 800056c:	f107 030d 	add.w	r3, r7, #13
 8000570:	461a      	mov	r2, r3
 8000572:	210f      	movs	r1, #15
 8000574:	6878      	ldr	r0, [r7, #4]
 8000576:	f000 f82e 	bl	80005d6 <read>
 800057a:	4603      	mov	r3, r0
 800057c:	73bb      	strb	r3, [r7, #14]
	errNum += (status != HAL_OK);
 800057e:	7bbb      	ldrb	r3, [r7, #14]
 8000580:	2b00      	cmp	r3, #0
 8000582:	bf14      	ite	ne
 8000584:	2301      	movne	r3, #1
 8000586:	2300      	moveq	r3, #0
 8000588:	b2db      	uxtb	r3, r3
 800058a:	461a      	mov	r2, r3
 800058c:	7bfb      	ldrb	r3, [r7, #15]
 800058e:	4413      	add	r3, r2
 8000590:	73fb      	strb	r3, [r7, #15]
	if(regData != BH1790GLC_MANUFACTURER_ID){
 8000592:	7b7b      	ldrb	r3, [r7, #13]
 8000594:	2b0f      	cmp	r3, #15
 8000596:	d001      	beq.n	800059c <BH1790GLC_init+0x68>
		//error
		return 1;
 8000598:	2301      	movs	r3, #1
 800059a:	e018      	b.n	80005ce <BH1790GLC_init+0x9a>
	}

	status = read(dev, BH1790GLC_PART_ID, &regData);	//get part id
 800059c:	f107 030d 	add.w	r3, r7, #13
 80005a0:	461a      	mov	r2, r3
 80005a2:	2110      	movs	r1, #16
 80005a4:	6878      	ldr	r0, [r7, #4]
 80005a6:	f000 f816 	bl	80005d6 <read>
 80005aa:	4603      	mov	r3, r0
 80005ac:	73bb      	strb	r3, [r7, #14]
	errNum += (status != HAL_OK);
 80005ae:	7bbb      	ldrb	r3, [r7, #14]
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	bf14      	ite	ne
 80005b4:	2301      	movne	r3, #1
 80005b6:	2300      	moveq	r3, #0
 80005b8:	b2db      	uxtb	r3, r3
 80005ba:	461a      	mov	r2, r3
 80005bc:	7bfb      	ldrb	r3, [r7, #15]
 80005be:	4413      	add	r3, r2
 80005c0:	73fb      	strb	r3, [r7, #15]
	if(regData != BH1790GLC_MANUFACTURER_ID){
 80005c2:	7b7b      	ldrb	r3, [r7, #13]
 80005c4:	2b0f      	cmp	r3, #15
 80005c6:	d001      	beq.n	80005cc <BH1790GLC_init+0x98>
		//error
		return 1;
 80005c8:	2301      	movs	r3, #1
 80005ca:	e000      	b.n	80005ce <BH1790GLC_init+0x9a>
//    printf("Can't write BH1790GLC MEAS_CONTROL1-MEAS_START register\n");
//  }
//
//  return (rc);

	return 0;
 80005cc:	2300      	movs	r3, #0
}
 80005ce:	4618      	mov	r0, r3
 80005d0:	3710      	adds	r7, #16
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}

080005d6 <read>:
/*
 * reg : which register in the sensor to read from
 * data : data to write (consider not having this be a pointer?
 */
HAL_StatusTypeDef read( BH1790GLC *dev, uint8_t reg, uint8_t *data)
{
 80005d6:	b580      	push	{r7, lr}
 80005d8:	b08a      	sub	sp, #40	; 0x28
 80005da:	af04      	add	r7, sp, #16
 80005dc:	60f8      	str	r0, [r7, #12]
 80005de:	460b      	mov	r3, r1
 80005e0:	607a      	str	r2, [r7, #4]
 80005e2:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef ret;

	ret = HAL_I2C_Mem_Read(dev->i2cHandle, (BH1790GLC_DEVICE_ADDRESS<<1)||0x01, reg, 1, data, 1, HAL_MAX_DELAY);
 80005e4:	68fb      	ldr	r3, [r7, #12]
 80005e6:	6818      	ldr	r0, [r3, #0]
 80005e8:	7afb      	ldrb	r3, [r7, #11]
 80005ea:	b29a      	uxth	r2, r3
 80005ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005f0:	9302      	str	r3, [sp, #8]
 80005f2:	2301      	movs	r3, #1
 80005f4:	9301      	str	r3, [sp, #4]
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	9300      	str	r3, [sp, #0]
 80005fa:	2301      	movs	r3, #1
 80005fc:	2101      	movs	r1, #1
 80005fe:	f002 fb05 	bl	8002c0c <HAL_I2C_Mem_Read>
 8000602:	4603      	mov	r3, r0
 8000604:	75fb      	strb	r3, [r7, #23]
	if(ret != HAL_OK){ return ret; }	//error check
 8000606:	7dfb      	ldrb	r3, [r7, #23]
 8000608:	2b00      	cmp	r3, #0
 800060a:	d001      	beq.n	8000610 <read+0x3a>
 800060c:	7dfb      	ldrb	r3, [r7, #23]
 800060e:	e000      	b.n	8000612 <read+0x3c>


	return HAL_OK;
 8000610:	2300      	movs	r3, #0
}
 8000612:	4618      	mov	r0, r3
 8000614:	3718      	adds	r7, #24
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
	...

0800061c <APPD_EnableCPU2>:
/* USER CODE END APPD_Init */
  return;
}

void APPD_EnableCPU2( void )
{
 800061c:	b5b0      	push	{r4, r5, r7, lr}
 800061e:	b088      	sub	sp, #32
 8000620:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 8000622:	4b0b      	ldr	r3, [pc, #44]	; (8000650 <APPD_EnableCPU2+0x34>)
 8000624:	1d3c      	adds	r4, r7, #4
 8000626:	461d      	mov	r5, r3
 8000628:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800062a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800062c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000630:	c403      	stmia	r4!, {r0, r1}
 8000632:	8022      	strh	r2, [r4, #0]
 8000634:	3402      	adds	r4, #2
 8000636:	0c13      	lsrs	r3, r2, #16
 8000638:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 800063a:	f007 fcf1 	bl	8008020 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 800063e:	1d3b      	adds	r3, r7, #4
 8000640:	4618      	mov	r0, r3
 8000642:	f006 ff8c 	bl	800755e <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 8000646:	bf00      	nop
}
 8000648:	3720      	adds	r7, #32
 800064a:	46bd      	mov	sp, r7
 800064c:	bdb0      	pop	{r4, r5, r7, pc}
 800064e:	bf00      	nop
 8000650:	0800a3e0 	.word	0x0800a3e0

08000654 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8000654:	b480      	push	{r7}
 8000656:	b083      	sub	sp, #12
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 800065c:	4b07      	ldr	r3, [pc, #28]	; (800067c <LL_C2_PWR_SetPowerMode+0x28>)
 800065e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000662:	f023 0207 	bic.w	r2, r3, #7
 8000666:	4905      	ldr	r1, [pc, #20]	; (800067c <LL_C2_PWR_SetPowerMode+0x28>)
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	4313      	orrs	r3, r2
 800066c:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8000670:	bf00      	nop
 8000672:	370c      	adds	r7, #12
 8000674:	46bd      	mov	sp, r7
 8000676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067a:	4770      	bx	lr
 800067c:	58000400 	.word	0x58000400

08000680 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8000680:	b480      	push	{r7}
 8000682:	b083      	sub	sp, #12
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000688:	4b06      	ldr	r3, [pc, #24]	; (80006a4 <LL_EXTI_EnableIT_32_63+0x24>)
 800068a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800068e:	4905      	ldr	r1, [pc, #20]	; (80006a4 <LL_EXTI_EnableIT_32_63+0x24>)
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	4313      	orrs	r3, r2
 8000694:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000698:	bf00      	nop
 800069a:	370c      	adds	r7, #12
 800069c:	46bd      	mov	sp, r7
 800069e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a2:	4770      	bx	lr
 80006a4:	58000800 	.word	0x58000800

080006a8 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 80006a8:	b480      	push	{r7}
 80006aa:	b083      	sub	sp, #12
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 80006b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80006b4:	4a0a      	ldr	r2, [pc, #40]	; (80006e0 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 80006b6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 80006ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80006be:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80006c2:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	021b      	lsls	r3, r3, #8
 80006ca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80006ce:	4313      	orrs	r3, r2
 80006d0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 80006d4:	bf00      	nop
 80006d6:	370c      	adds	r7, #12
 80006d8:	46bd      	mov	sp, r7
 80006da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006de:	4770      	bx	lr
 80006e0:	cafecafe 	.word	0xcafecafe

080006e4 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 80006e4:	b480      	push	{r7}
 80006e6:	b083      	sub	sp, #12
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 80006ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80006f0:	689b      	ldr	r3, [r3, #8]
 80006f2:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80006f6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	4313      	orrs	r3, r2
 80006fe:	608b      	str	r3, [r1, #8]
}
 8000700:	bf00      	nop
 8000702:	370c      	adds	r7, #12
 8000704:	46bd      	mov	sp, r7
 8000706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070a:	4770      	bx	lr

0800070c <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 800070c:	b480      	push	{r7}
 800070e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000710:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000714:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000718:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800071c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000720:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000724:	bf00      	nop
 8000726:	46bd      	mov	sp, r7
 8000728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072c:	4770      	bx	lr

0800072e <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 800072e:	b480      	push	{r7}
 8000730:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000732:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000736:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800073a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800073e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000742:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000746:	bf00      	nop
 8000748:	46bd      	mov	sp, r7
 800074a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074e:	4770      	bx	lr

08000750 <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 8000754:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000758:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800075c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000760:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8000764:	d101      	bne.n	800076a <LL_RCC_IsActiveFlag_PINRST+0x1a>
 8000766:	2301      	movs	r3, #1
 8000768:	e000      	b.n	800076c <LL_RCC_IsActiveFlag_PINRST+0x1c>
 800076a:	2300      	movs	r3, #0
}
 800076c:	4618      	mov	r0, r3
 800076e:	46bd      	mov	sp, r7
 8000770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000774:	4770      	bx	lr

08000776 <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 8000776:	b480      	push	{r7}
 8000778:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 800077a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800077e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000782:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000786:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800078a:	d101      	bne.n	8000790 <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 800078c:	2301      	movs	r3, #1
 800078e:	e000      	b.n	8000792 <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 8000790:	2300      	movs	r3, #0
}
 8000792:	4618      	mov	r0, r3
 8000794:	46bd      	mov	sp, r7
 8000796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079a:	4770      	bx	lr

0800079c <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 800079c:	b480      	push	{r7}
 800079e:	b085      	sub	sp, #20
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 80007a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007a8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80007aa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	4313      	orrs	r3, r2
 80007b2:	650b      	str	r3, [r1, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80007b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007b8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	4013      	ands	r3, r2
 80007be:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80007c0:	68fb      	ldr	r3, [r7, #12]
}
 80007c2:	bf00      	nop
 80007c4:	3714      	adds	r7, #20
 80007c6:	46bd      	mov	sp, r7
 80007c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007cc:	4770      	bx	lr
	...

080007d0 <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 80007d4:	4b04      	ldr	r3, [pc, #16]	; (80007e8 <LL_DBGMCU_GetDeviceID+0x18>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 80007dc:	4618      	mov	r0, r3
 80007de:	46bd      	mov	sp, r7
 80007e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e4:	4770      	bx	lr
 80007e6:	bf00      	nop
 80007e8:	e0042000 	.word	0xe0042000

080007ec <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 80007f0:	4b04      	ldr	r3, [pc, #16]	; (8000804 <LL_DBGMCU_GetRevisionID+0x18>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	0c1b      	lsrs	r3, r3, #16
 80007f6:	b29b      	uxth	r3, r3
}
 80007f8:	4618      	mov	r0, r3
 80007fa:	46bd      	mov	sp, r7
 80007fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000800:	4770      	bx	lr
 8000802:	bf00      	nop
 8000804:	e0042000 	.word	0xe0042000

08000808 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000808:	b480      	push	{r7}
 800080a:	b083      	sub	sp, #12
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
 8000810:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	685a      	ldr	r2, [r3, #4]
 8000816:	683b      	ldr	r3, [r7, #0]
 8000818:	041b      	lsls	r3, r3, #16
 800081a:	431a      	orrs	r2, r3
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	605a      	str	r2, [r3, #4]
}
 8000820:	bf00      	nop
 8000822:	370c      	adds	r7, #12
 8000824:	46bd      	mov	sp, r7
 8000826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082a:	4770      	bx	lr

0800082c <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800082c:	b480      	push	{r7}
 800082e:	b083      	sub	sp, #12
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
 8000834:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	685a      	ldr	r2, [r3, #4]
 800083a:	683b      	ldr	r3, [r7, #0]
 800083c:	431a      	orrs	r2, r3
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	605a      	str	r2, [r3, #4]
}
 8000842:	bf00      	nop
 8000844:	370c      	adds	r7, #12
 8000846:	46bd      	mov	sp, r7
 8000848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084c:	4770      	bx	lr

0800084e <LL_C2_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800084e:	b480      	push	{r7}
 8000850:	b083      	sub	sp, #12
 8000852:	af00      	add	r7, sp, #0
 8000854:	6078      	str	r0, [r7, #4]
 8000856:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	695a      	ldr	r2, [r3, #20]
 800085c:	683b      	ldr	r3, [r7, #0]
 800085e:	041b      	lsls	r3, r3, #16
 8000860:	431a      	orrs	r2, r3
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	615a      	str	r2, [r3, #20]
}
 8000866:	bf00      	nop
 8000868:	370c      	adds	r7, #12
 800086a:	46bd      	mov	sp, r7
 800086c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000870:	4770      	bx	lr

08000872 <LL_C2_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000872:	b480      	push	{r7}
 8000874:	b083      	sub	sp, #12
 8000876:	af00      	add	r7, sp, #0
 8000878:	6078      	str	r0, [r7, #4]
 800087a:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	695a      	ldr	r2, [r3, #20]
 8000880:	683b      	ldr	r3, [r7, #0]
 8000882:	431a      	orrs	r2, r3
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	615a      	str	r2, [r3, #20]
}
 8000888:	bf00      	nop
 800088a:	370c      	adds	r7, #12
 800088c:	46bd      	mov	sp, r7
 800088e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000892:	4770      	bx	lr

08000894 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000894:	b480      	push	{r7}
 8000896:	b083      	sub	sp, #12
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
 800089c:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	683a      	ldr	r2, [r7, #0]
 80008a2:	609a      	str	r2, [r3, #8]
}
 80008a4:	bf00      	nop
 80008a6:	370c      	adds	r7, #12
 80008a8:	46bd      	mov	sp, r7
 80008aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ae:	4770      	bx	lr

080008b0 <LL_C2_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80008b0:	b480      	push	{r7}
 80008b2:	b083      	sub	sp, #12
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
 80008b8:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	683a      	ldr	r2, [r7, #0]
 80008be:	619a      	str	r2, [r3, #24]
}
 80008c0:	bf00      	nop
 80008c2:	370c      	adds	r7, #12
 80008c4:	46bd      	mov	sp, r7
 80008c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ca:	4770      	bx	lr

080008cc <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80008d0:	4b05      	ldr	r3, [pc, #20]	; (80008e8 <LL_LPM_EnableSleep+0x1c>)
 80008d2:	691b      	ldr	r3, [r3, #16]
 80008d4:	4a04      	ldr	r2, [pc, #16]	; (80008e8 <LL_LPM_EnableSleep+0x1c>)
 80008d6:	f023 0304 	bic.w	r3, r3, #4
 80008da:	6113      	str	r3, [r2, #16]
}
 80008dc:	bf00      	nop
 80008de:	46bd      	mov	sp, r7
 80008e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e4:	4770      	bx	lr
 80008e6:	bf00      	nop
 80008e8:	e000ed00 	.word	0xe000ed00

080008ec <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 80008ec:	b480      	push	{r7}
 80008ee:	b083      	sub	sp, #12
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	22ff      	movs	r2, #255	; 0xff
 80008f8:	625a      	str	r2, [r3, #36]	; 0x24
}
 80008fa:	bf00      	nop
 80008fc:	370c      	adds	r7, #12
 80008fe:	46bd      	mov	sp, r7
 8000900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000904:	4770      	bx	lr

08000906 <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 8000906:	b480      	push	{r7}
 8000908:	b083      	sub	sp, #12
 800090a:	af00      	add	r7, sp, #0
 800090c:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	22ca      	movs	r2, #202	; 0xca
 8000912:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	2253      	movs	r2, #83	; 0x53
 8000918:	625a      	str	r2, [r3, #36]	; 0x24
}
 800091a:	bf00      	nop
 800091c:	370c      	adds	r7, #12
 800091e:	46bd      	mov	sp, r7
 8000920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000924:	4770      	bx	lr

08000926 <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 8000926:	b480      	push	{r7}
 8000928:	b083      	sub	sp, #12
 800092a:	af00      	add	r7, sp, #0
 800092c:	6078      	str	r0, [r7, #4]
 800092e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	689b      	ldr	r3, [r3, #8]
 8000934:	f023 0207 	bic.w	r2, r3, #7
 8000938:	683b      	ldr	r3, [r7, #0]
 800093a:	431a      	orrs	r2, r3
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	609a      	str	r2, [r3, #8]
}
 8000940:	bf00      	nop
 8000942:	370c      	adds	r7, #12
 8000944:	46bd      	mov	sp, r7
 8000946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094a:	4770      	bx	lr

0800094c <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8000950:	4b04      	ldr	r3, [pc, #16]	; (8000964 <MX_APPE_Config+0x18>)
 8000952:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000956:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 8000958:	f000 f824 	bl	80009a4 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 800095c:	f000 f864 	bl	8000a28 <Config_HSE>

  return;
 8000960:	bf00      	nop
}
 8000962:	bd80      	pop	{r7, pc}
 8000964:	58004000 	.word	0x58004000

08000968 <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 800096c:	f000 f870 	bl	8000a50 <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 8000970:	f000 f888 	bl	8000a84 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8000974:	4903      	ldr	r1, [pc, #12]	; (8000984 <MX_APPE_Init+0x1c>)
 8000976:	2000      	movs	r0, #0
 8000978:	f000 fdd4 	bl	8001524 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 800097c:	f000 f890 	bl	8000aa0 <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 8000980:	bf00      	nop
}
 8000982:	bd80      	pop	{r7, pc}
 8000984:	20000aa8 	.word	0x20000aa8

08000988 <Init_Smps>:

void Init_Smps(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 800098c:	bf00      	nop
}
 800098e:	46bd      	mov	sp, r7
 8000990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000994:	4770      	bx	lr

08000996 <Init_Exti>:

void Init_Exti(void)
{
 8000996:	b580      	push	{r7, lr}
 8000998:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 800099a:	2050      	movs	r0, #80	; 0x50
 800099c:	f7ff fe70 	bl	8000680 <LL_EXTI_EnableIT_32_63>

  return;
 80009a0:	bf00      	nop
}
 80009a2:	bd80      	pop	{r7, pc}

080009a4 <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
#if (CFG_HW_RESET_BY_FW == 1)
  Reset_BackupDomain();
 80009a8:	f000 f804 	bl	80009b4 <Reset_BackupDomain>

  Reset_IPCC();
 80009ac:	f000 f81a 	bl	80009e4 <Reset_IPCC>
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 80009b0:	bf00      	nop
}
 80009b2:	bd80      	pop	{r7, pc}

080009b4 <Reset_BackupDomain>:

#if (CFG_HW_RESET_BY_FW == 1)
static void Reset_BackupDomain(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
  if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 80009b8:	f7ff feca 	bl	8000750 <LL_RCC_IsActiveFlag_PINRST>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d00d      	beq.n	80009de <Reset_BackupDomain+0x2a>
 80009c2:	f7ff fed8 	bl	8000776 <LL_RCC_IsActiveFlag_SFTRST>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d108      	bne.n	80009de <Reset_BackupDomain+0x2a>
  {
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 80009cc:	f002 fdd4 	bl	8003578 <HAL_PWR_EnableBkUpAccess>

    /**
     *  Write twice the value to flush the APB-AHB bridge
     *  This bit shall be written in the register before writing the next one
     */
    HAL_PWR_EnableBkUpAccess();
 80009d0:	f002 fdd2 	bl	8003578 <HAL_PWR_EnableBkUpAccess>

    __HAL_RCC_BACKUPRESET_FORCE();
 80009d4:	f7ff fe9a 	bl	800070c <LL_RCC_ForceBackupDomainReset>
    __HAL_RCC_BACKUPRESET_RELEASE();
 80009d8:	f7ff fea9 	bl	800072e <LL_RCC_ReleaseBackupDomainReset>
  }

  return;
 80009dc:	bf00      	nop
 80009de:	bf00      	nop
}
 80009e0:	bd80      	pop	{r7, pc}
	...

080009e4 <Reset_IPCC>:

static void Reset_IPCC(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 80009e8:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80009ec:	f7ff fed6 	bl	800079c <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_ClearFlag_CHx(
 80009f0:	213f      	movs	r1, #63	; 0x3f
 80009f2:	480c      	ldr	r0, [pc, #48]	; (8000a24 <Reset_IPCC+0x40>)
 80009f4:	f7ff ff4e 	bl	8000894 <LL_C1_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_ClearFlag_CHx(
 80009f8:	213f      	movs	r1, #63	; 0x3f
 80009fa:	480a      	ldr	r0, [pc, #40]	; (8000a24 <Reset_IPCC+0x40>)
 80009fc:	f7ff ff58 	bl	80008b0 <LL_C2_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableTransmitChannel(
 8000a00:	213f      	movs	r1, #63	; 0x3f
 8000a02:	4808      	ldr	r0, [pc, #32]	; (8000a24 <Reset_IPCC+0x40>)
 8000a04:	f7ff ff00 	bl	8000808 <LL_C1_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableTransmitChannel(
 8000a08:	213f      	movs	r1, #63	; 0x3f
 8000a0a:	4806      	ldr	r0, [pc, #24]	; (8000a24 <Reset_IPCC+0x40>)
 8000a0c:	f7ff ff1f 	bl	800084e <LL_C2_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableReceiveChannel(
 8000a10:	213f      	movs	r1, #63	; 0x3f
 8000a12:	4804      	ldr	r0, [pc, #16]	; (8000a24 <Reset_IPCC+0x40>)
 8000a14:	f7ff ff0a 	bl	800082c <LL_C1_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableReceiveChannel(
 8000a18:	213f      	movs	r1, #63	; 0x3f
 8000a1a:	4802      	ldr	r0, [pc, #8]	; (8000a24 <Reset_IPCC+0x40>)
 8000a1c:	f7ff ff29 	bl	8000872 <LL_C2_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  return;
 8000a20:	bf00      	nop
}
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	58000c00 	.word	0x58000c00

08000a28 <Config_HSE>:
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8000a2e:	2000      	movs	r0, #0
 8000a30:	f007 fb82 	bl	8008138 <OTP_Read>
 8000a34:	6078      	str	r0, [r7, #4]
  if (p_otp)
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d005      	beq.n	8000a48 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	799b      	ldrb	r3, [r3, #6]
 8000a40:	4618      	mov	r0, r3
 8000a42:	f7ff fe31 	bl	80006a8 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 8000a46:	bf00      	nop
 8000a48:	bf00      	nop
}
 8000a4a:	3708      	adds	r7, #8
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}

08000a50 <System_Init>:

static void System_Init(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
  Init_Smps();
 8000a54:	f7ff ff98 	bl	8000988 <Init_Smps>

  Init_Exti();
 8000a58:	f7ff ff9d 	bl	8000996 <Init_Exti>

  Init_Rtc();
 8000a5c:	f000 f802 	bl	8000a64 <Init_Rtc>

  return;
 8000a60:	bf00      	nop
}
 8000a62:	bd80      	pop	{r7, pc}

08000a64 <Init_Rtc>:

static void Init_Rtc(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 8000a68:	4805      	ldr	r0, [pc, #20]	; (8000a80 <Init_Rtc+0x1c>)
 8000a6a:	f7ff ff4c 	bl	8000906 <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 8000a6e:	2100      	movs	r1, #0
 8000a70:	4803      	ldr	r0, [pc, #12]	; (8000a80 <Init_Rtc+0x1c>)
 8000a72:	f7ff ff58 	bl	8000926 <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 8000a76:	4802      	ldr	r0, [pc, #8]	; (8000a80 <Init_Rtc+0x1c>)
 8000a78:	f7ff ff38 	bl	80008ec <LL_RTC_EnableWriteProtection>

  return;
 8000a7c:	bf00      	nop
}
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	40002800 	.word	0x40002800

08000a84 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8000a88:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000a8c:	f7ff fe2a 	bl	80006e4 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8000a90:	f008 fa4c 	bl	8008f2c <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8000a94:	2004      	movs	r0, #4
 8000a96:	f7ff fddd 	bl	8000654 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 8000a9a:	bf00      	nop
}
 8000a9c:	bd80      	pop	{r7, pc}
	...

08000aa0 <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b088      	sub	sp, #32
 8000aa4:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 8000aa6:	f007 f905 	bl	8007cb4 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 8000aaa:	4a11      	ldr	r2, [pc, #68]	; (8000af0 <appe_Tl_Init+0x50>)
 8000aac:	2100      	movs	r1, #0
 8000aae:	2004      	movs	r0, #4
 8000ab0:	f008 fb7a 	bl	80091a8 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8000ab4:	4b0f      	ldr	r3, [pc, #60]	; (8000af4 <appe_Tl_Init+0x54>)
 8000ab6:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8000ab8:	4b0f      	ldr	r3, [pc, #60]	; (8000af8 <appe_Tl_Init+0x58>)
 8000aba:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8000abc:	463b      	mov	r3, r7
 8000abe:	4619      	mov	r1, r3
 8000ac0:	480e      	ldr	r0, [pc, #56]	; (8000afc <appe_Tl_Init+0x5c>)
 8000ac2:	f006 ffbd 	bl	8007a40 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 8000ac6:	4b0e      	ldr	r3, [pc, #56]	; (8000b00 <appe_Tl_Init+0x60>)
 8000ac8:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8000aca:	4b0e      	ldr	r3, [pc, #56]	; (8000b04 <appe_Tl_Init+0x64>)
 8000acc:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8000ace:	4b0e      	ldr	r3, [pc, #56]	; (8000b08 <appe_Tl_Init+0x68>)
 8000ad0:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8000ad2:	f240 533c 	movw	r3, #1340	; 0x53c
 8000ad6:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 8000ad8:	f107 0308 	add.w	r3, r7, #8
 8000adc:	4618      	mov	r0, r3
 8000ade:	f007 fa2b 	bl	8007f38 <TL_MM_Init>

  TL_Enable();
 8000ae2:	f007 f8e1 	bl	8007ca8 <TL_Enable>

  return;
 8000ae6:	bf00      	nop
}
 8000ae8:	3720      	adds	r7, #32
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	08007a79 	.word	0x08007a79
 8000af4:	200005dc 	.word	0x200005dc
 8000af8:	08000b0d 	.word	0x08000b0d
 8000afc:	08000b25 	.word	0x08000b25
 8000b00:	200007f4 	.word	0x200007f4
 8000b04:	200006e8 	.word	0x200006e8
 8000b08:	200000a0 	.word	0x200000a0

08000b0c <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b083      	sub	sp, #12
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	4603      	mov	r3, r0
 8000b14:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 8000b16:	bf00      	nop
}
 8000b18:	370c      	adds	r7, #12
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
	...

08000b24 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b088      	sub	sp, #32
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	685b      	ldr	r3, [r3, #4]
 8000b30:	330b      	adds	r3, #11
 8000b32:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 8000b34:	69fb      	ldr	r3, [r7, #28]
 8000b36:	881b      	ldrh	r3, [r3, #0]
 8000b38:	b29b      	uxth	r3, r3
 8000b3a:	f5a3 4312 	sub.w	r3, r3, #37376	; 0x9200
 8000b3e:	2b07      	cmp	r3, #7
 8000b40:	d81f      	bhi.n	8000b82 <APPE_SysUserEvtRx+0x5e>
 8000b42:	a201      	add	r2, pc, #4	; (adr r2, 8000b48 <APPE_SysUserEvtRx+0x24>)
 8000b44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b48:	08000b69 	.word	0x08000b69
 8000b4c:	08000b7b 	.word	0x08000b7b
 8000b50:	08000b83 	.word	0x08000b83
 8000b54:	08000b83 	.word	0x08000b83
 8000b58:	08000b83 	.word	0x08000b83
 8000b5c:	08000b83 	.word	0x08000b83
 8000b60:	08000b83 	.word	0x08000b83
 8000b64:	08000b83 	.word	0x08000b83
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 8000b68:	f107 030c 	add.w	r3, r7, #12
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f006 fd23 	bl	80075b8 <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
    APPE_SysEvtReadyProcessing(pPayload);
 8000b72:	6878      	ldr	r0, [r7, #4]
 8000b74:	f000 f81b 	bl	8000bae <APPE_SysEvtReadyProcessing>
    break;
 8000b78:	e004      	b.n	8000b84 <APPE_SysUserEvtRx+0x60>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
    APPE_SysEvtError(pPayload);
 8000b7a:	6878      	ldr	r0, [r7, #4]
 8000b7c:	f000 f806 	bl	8000b8c <APPE_SysEvtError>
    break;
 8000b80:	e000      	b.n	8000b84 <APPE_SysUserEvtRx+0x60>
  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
    break;

  default:
    break;
 8000b82:	bf00      	nop
  }

  return;
 8000b84:	bf00      	nop
}
 8000b86:	3720      	adds	r7, #32
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}

08000b8c <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	b085      	sub	sp, #20
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	685b      	ldr	r3, [r3, #4]
 8000b98:	330b      	adds	r3, #11
 8000b9a:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	3302      	adds	r3, #2
 8000ba0:	60bb      	str	r3, [r7, #8]
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 8000ba2:	bf00      	nop
}
 8000ba4:	3714      	adds	r7, #20
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr

08000bae <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 8000bae:	b580      	push	{r7, lr}
 8000bb0:	b08a      	sub	sp, #40	; 0x28
 8000bb2:	af00      	add	r7, sp, #0
 8000bb4:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 8000bb6:	f107 0308 	add.w	r3, r7, #8
 8000bba:	2200      	movs	r2, #0
 8000bbc:	601a      	str	r2, [r3, #0]
 8000bbe:	605a      	str	r2, [r3, #4]
 8000bc0:	609a      	str	r2, [r3, #8]
 8000bc2:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t DeviceID=0;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	685b      	ldr	r3, [r3, #4]
 8000bd0:	330b      	adds	r3, #11
 8000bd2:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 8000bd4:	69fb      	ldr	r3, [r7, #28]
 8000bd6:	3302      	adds	r3, #2
 8000bd8:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 8000bda:	69bb      	ldr	r3, [r7, #24]
 8000bdc:	781b      	ldrb	r3, [r3, #0]
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d11d      	bne.n	8000c1e <APPE_SysEvtReadyProcessing+0x70>
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");

    /* Traces channel initialization */
    APPD_EnableCPU2();
 8000be2:	f7ff fd1b 	bl	800061c <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 8000be6:	230f      	movs	r3, #15
 8000be8:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 8000bea:	237f      	movs	r3, #127	; 0x7f
 8000bec:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 8000bee:	f7ff fdfd 	bl	80007ec <LL_DBGMCU_GetRevisionID>
 8000bf2:	6278      	str	r0, [r7, #36]	; 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);

    config_param.RevisionID = (uint16_t)RevisionID;
 8000bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bf6:	b29b      	uxth	r3, r3
 8000bf8:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 8000bfa:	f7ff fde9 	bl	80007d0 <LL_DBGMCU_GetDeviceID>
 8000bfe:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
    config_param.DeviceID = (uint16_t)DeviceID;
 8000c00:	6a3b      	ldr	r3, [r7, #32]
 8000c02:	b29b      	uxth	r3, r3
 8000c04:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 8000c06:	f107 0308 	add.w	r3, r7, #8
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f006 fcbe 	bl	800758c <SHCI_C2_Config>

    APP_BLE_Init();
 8000c10:	f007 fb9c 	bl	800834c <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8000c14:	2100      	movs	r1, #0
 8000c16:	2001      	movs	r0, #1
 8000c18:	f008 f99a 	bl	8008f50 <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 8000c1c:	e007      	b.n	8000c2e <APPE_SysEvtReadyProcessing+0x80>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 8000c1e:	69bb      	ldr	r3, [r7, #24]
 8000c20:	781b      	ldrb	r3, [r3, #0]
 8000c22:	2b01      	cmp	r3, #1
 8000c24:	d103      	bne.n	8000c2e <APPE_SysEvtReadyProcessing+0x80>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	2200      	movs	r2, #0
 8000c2a:	701a      	strb	r2, [r3, #0]
  return;
 8000c2c:	bf00      	nop
 8000c2e:	bf00      	nop
}
 8000c30:	3728      	adds	r7, #40	; 0x28
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}

08000c36 <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 8000c36:	b580      	push	{r7, lr}
 8000c38:	b084      	sub	sp, #16
 8000c3a:	af00      	add	r7, sp, #0
 8000c3c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c3e:	f001 fbeb 	bl	8002418 <HAL_GetTick>
 8000c42:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000c4e:	d00a      	beq.n	8000c66 <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 8000c50:	f001 fbfa 	bl	8002448 <HAL_GetTickFreq>
 8000c54:	4603      	mov	r3, r0
 8000c56:	461a      	mov	r2, r3
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	4413      	add	r3, r2
 8000c5c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c5e:	e002      	b.n	8000c66 <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 8000c60:	f7ff fe34 	bl	80008cc <LL_LPM_EnableSleep>
     */
  #if defined (__CC_ARM)
    __force_stores();
  #endif /* __CC_ARM */

    __WFI();
 8000c64:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 8000c66:	f001 fbd7 	bl	8002418 <HAL_GetTick>
 8000c6a:	4602      	mov	r2, r0
 8000c6c:	68bb      	ldr	r3, [r7, #8]
 8000c6e:	1ad3      	subs	r3, r2, r3
 8000c70:	68fa      	ldr	r2, [r7, #12]
 8000c72:	429a      	cmp	r2, r3
 8000c74:	d8f4      	bhi.n	8000c60 <HAL_Delay+0x2a>
  }
}
 8000c76:	bf00      	nop
 8000c78:	bf00      	nop
 8000c7a:	3710      	adds	r7, #16
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}

08000c80 <MX_APPE_Process>:

void MX_APPE_Process(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8000c84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c88:	f008 f992 	bl	8008fb0 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 8000c8c:	bf00      	nop
 8000c8e:	bd80      	pop	{r7, pc}

08000c90 <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 8000c94:	bf00      	nop
}
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr

08000c9e <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 8000c9e:	b580      	push	{r7, lr}
 8000ca0:	b082      	sub	sp, #8
 8000ca2:	af00      	add	r7, sp, #0
 8000ca4:	6078      	str	r0, [r7, #4]
 8000ca6:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8000ca8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000cac:	f008 f980 	bl	8008fb0 <UTIL_SEQ_Run>

  return;
 8000cb0:	bf00      	nop
}
 8000cb2:	3708      	adds	r7, #8
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}

08000cb8 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8000cc0:	2100      	movs	r1, #0
 8000cc2:	2004      	movs	r0, #4
 8000cc4:	f008 fa92 	bl	80091ec <UTIL_SEQ_SetTask>
  return;
 8000cc8:	bf00      	nop
}
 8000cca:	3708      	adds	r7, #8
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}

08000cd0 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8000cd8:	2002      	movs	r0, #2
 8000cda:	f008 faf3 	bl	80092c4 <UTIL_SEQ_SetEvt>
  return;
 8000cde:	bf00      	nop
}
 8000ce0:	3708      	adds	r7, #8
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}

08000ce6 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 8000ce6:	b580      	push	{r7, lr}
 8000ce8:	b082      	sub	sp, #8
 8000cea:	af00      	add	r7, sp, #0
 8000cec:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8000cee:	2002      	movs	r0, #2
 8000cf0:	f008 fb08 	bl	8009304 <UTIL_SEQ_WaitEvt>
  return;
 8000cf4:	bf00      	nop
}
 8000cf6:	3708      	adds	r7, #8
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}

08000cfc <LL_EXTI_EnableIT_0_31>:
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b083      	sub	sp, #12
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8000d04:	4b06      	ldr	r3, [pc, #24]	; (8000d20 <LL_EXTI_EnableIT_0_31+0x24>)
 8000d06:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8000d0a:	4905      	ldr	r1, [pc, #20]	; (8000d20 <LL_EXTI_EnableIT_0_31+0x24>)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	4313      	orrs	r3, r2
 8000d10:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8000d14:	bf00      	nop
 8000d16:	370c      	adds	r7, #12
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr
 8000d20:	58000800 	.word	0x58000800

08000d24 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b083      	sub	sp, #12
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8000d2c:	4b05      	ldr	r3, [pc, #20]	; (8000d44 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000d2e:	681a      	ldr	r2, [r3, #0]
 8000d30:	4904      	ldr	r1, [pc, #16]	; (8000d44 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	4313      	orrs	r3, r2
 8000d36:	600b      	str	r3, [r1, #0]

}
 8000d38:	bf00      	nop
 8000d3a:	370c      	adds	r7, #12
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d42:	4770      	bx	lr
 8000d44:	58000800 	.word	0x58000800

08000d48 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b083      	sub	sp, #12
 8000d4c:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000d4e:	4b0d      	ldr	r3, [pc, #52]	; (8000d84 <ReadRtcSsrValue+0x3c>)
 8000d50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d52:	b29b      	uxth	r3, r3
 8000d54:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000d56:	4b0b      	ldr	r3, [pc, #44]	; (8000d84 <ReadRtcSsrValue+0x3c>)
 8000d58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d5a:	b29b      	uxth	r3, r3
 8000d5c:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 8000d5e:	e005      	b.n	8000d6c <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000d64:	4b07      	ldr	r3, [pc, #28]	; (8000d84 <ReadRtcSsrValue+0x3c>)
 8000d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d68:	b29b      	uxth	r3, r3
 8000d6a:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8000d6c:	687a      	ldr	r2, [r7, #4]
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	429a      	cmp	r2, r3
 8000d72:	d1f5      	bne.n	8000d60 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8000d74:	683b      	ldr	r3, [r7, #0]
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	370c      	adds	r7, #12
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop
 8000d84:	40002800 	.word	0x40002800

08000d88 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b085      	sub	sp, #20
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	4603      	mov	r3, r0
 8000d90:	460a      	mov	r2, r1
 8000d92:	71fb      	strb	r3, [r7, #7]
 8000d94:	4613      	mov	r3, r2
 8000d96:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8000d98:	79ba      	ldrb	r2, [r7, #6]
 8000d9a:	491d      	ldr	r1, [pc, #116]	; (8000e10 <LinkTimerAfter+0x88>)
 8000d9c:	4613      	mov	r3, r2
 8000d9e:	005b      	lsls	r3, r3, #1
 8000da0:	4413      	add	r3, r2
 8000da2:	00db      	lsls	r3, r3, #3
 8000da4:	440b      	add	r3, r1
 8000da6:	3315      	adds	r3, #21
 8000da8:	781b      	ldrb	r3, [r3, #0]
 8000daa:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000dac:	7bfb      	ldrb	r3, [r7, #15]
 8000dae:	2b06      	cmp	r3, #6
 8000db0:	d009      	beq.n	8000dc6 <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8000db2:	7bfa      	ldrb	r2, [r7, #15]
 8000db4:	4916      	ldr	r1, [pc, #88]	; (8000e10 <LinkTimerAfter+0x88>)
 8000db6:	4613      	mov	r3, r2
 8000db8:	005b      	lsls	r3, r3, #1
 8000dba:	4413      	add	r3, r2
 8000dbc:	00db      	lsls	r3, r3, #3
 8000dbe:	440b      	add	r3, r1
 8000dc0:	3314      	adds	r3, #20
 8000dc2:	79fa      	ldrb	r2, [r7, #7]
 8000dc4:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8000dc6:	79fa      	ldrb	r2, [r7, #7]
 8000dc8:	4911      	ldr	r1, [pc, #68]	; (8000e10 <LinkTimerAfter+0x88>)
 8000dca:	4613      	mov	r3, r2
 8000dcc:	005b      	lsls	r3, r3, #1
 8000dce:	4413      	add	r3, r2
 8000dd0:	00db      	lsls	r3, r3, #3
 8000dd2:	440b      	add	r3, r1
 8000dd4:	3315      	adds	r3, #21
 8000dd6:	7bfa      	ldrb	r2, [r7, #15]
 8000dd8:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8000dda:	79fa      	ldrb	r2, [r7, #7]
 8000ddc:	490c      	ldr	r1, [pc, #48]	; (8000e10 <LinkTimerAfter+0x88>)
 8000dde:	4613      	mov	r3, r2
 8000de0:	005b      	lsls	r3, r3, #1
 8000de2:	4413      	add	r3, r2
 8000de4:	00db      	lsls	r3, r3, #3
 8000de6:	440b      	add	r3, r1
 8000de8:	3314      	adds	r3, #20
 8000dea:	79ba      	ldrb	r2, [r7, #6]
 8000dec:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8000dee:	79ba      	ldrb	r2, [r7, #6]
 8000df0:	4907      	ldr	r1, [pc, #28]	; (8000e10 <LinkTimerAfter+0x88>)
 8000df2:	4613      	mov	r3, r2
 8000df4:	005b      	lsls	r3, r3, #1
 8000df6:	4413      	add	r3, r2
 8000df8:	00db      	lsls	r3, r3, #3
 8000dfa:	440b      	add	r3, r1
 8000dfc:	3315      	adds	r3, #21
 8000dfe:	79fa      	ldrb	r2, [r7, #7]
 8000e00:	701a      	strb	r2, [r3, #0]

  return;
 8000e02:	bf00      	nop
}
 8000e04:	3714      	adds	r7, #20
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop
 8000e10:	20000978 	.word	0x20000978

08000e14 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b085      	sub	sp, #20
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	460a      	mov	r2, r1
 8000e1e:	71fb      	strb	r3, [r7, #7]
 8000e20:	4613      	mov	r3, r2
 8000e22:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8000e24:	4b29      	ldr	r3, [pc, #164]	; (8000ecc <LinkTimerBefore+0xb8>)
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	b2db      	uxtb	r3, r3
 8000e2a:	79ba      	ldrb	r2, [r7, #6]
 8000e2c:	429a      	cmp	r2, r3
 8000e2e:	d032      	beq.n	8000e96 <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8000e30:	79ba      	ldrb	r2, [r7, #6]
 8000e32:	4927      	ldr	r1, [pc, #156]	; (8000ed0 <LinkTimerBefore+0xbc>)
 8000e34:	4613      	mov	r3, r2
 8000e36:	005b      	lsls	r3, r3, #1
 8000e38:	4413      	add	r3, r2
 8000e3a:	00db      	lsls	r3, r3, #3
 8000e3c:	440b      	add	r3, r1
 8000e3e:	3314      	adds	r3, #20
 8000e40:	781b      	ldrb	r3, [r3, #0]
 8000e42:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8000e44:	7bfa      	ldrb	r2, [r7, #15]
 8000e46:	4922      	ldr	r1, [pc, #136]	; (8000ed0 <LinkTimerBefore+0xbc>)
 8000e48:	4613      	mov	r3, r2
 8000e4a:	005b      	lsls	r3, r3, #1
 8000e4c:	4413      	add	r3, r2
 8000e4e:	00db      	lsls	r3, r3, #3
 8000e50:	440b      	add	r3, r1
 8000e52:	3315      	adds	r3, #21
 8000e54:	79fa      	ldrb	r2, [r7, #7]
 8000e56:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8000e58:	79fa      	ldrb	r2, [r7, #7]
 8000e5a:	491d      	ldr	r1, [pc, #116]	; (8000ed0 <LinkTimerBefore+0xbc>)
 8000e5c:	4613      	mov	r3, r2
 8000e5e:	005b      	lsls	r3, r3, #1
 8000e60:	4413      	add	r3, r2
 8000e62:	00db      	lsls	r3, r3, #3
 8000e64:	440b      	add	r3, r1
 8000e66:	3315      	adds	r3, #21
 8000e68:	79ba      	ldrb	r2, [r7, #6]
 8000e6a:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8000e6c:	79fa      	ldrb	r2, [r7, #7]
 8000e6e:	4918      	ldr	r1, [pc, #96]	; (8000ed0 <LinkTimerBefore+0xbc>)
 8000e70:	4613      	mov	r3, r2
 8000e72:	005b      	lsls	r3, r3, #1
 8000e74:	4413      	add	r3, r2
 8000e76:	00db      	lsls	r3, r3, #3
 8000e78:	440b      	add	r3, r1
 8000e7a:	3314      	adds	r3, #20
 8000e7c:	7bfa      	ldrb	r2, [r7, #15]
 8000e7e:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000e80:	79ba      	ldrb	r2, [r7, #6]
 8000e82:	4913      	ldr	r1, [pc, #76]	; (8000ed0 <LinkTimerBefore+0xbc>)
 8000e84:	4613      	mov	r3, r2
 8000e86:	005b      	lsls	r3, r3, #1
 8000e88:	4413      	add	r3, r2
 8000e8a:	00db      	lsls	r3, r3, #3
 8000e8c:	440b      	add	r3, r1
 8000e8e:	3314      	adds	r3, #20
 8000e90:	79fa      	ldrb	r2, [r7, #7]
 8000e92:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8000e94:	e014      	b.n	8000ec0 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8000e96:	79fa      	ldrb	r2, [r7, #7]
 8000e98:	490d      	ldr	r1, [pc, #52]	; (8000ed0 <LinkTimerBefore+0xbc>)
 8000e9a:	4613      	mov	r3, r2
 8000e9c:	005b      	lsls	r3, r3, #1
 8000e9e:	4413      	add	r3, r2
 8000ea0:	00db      	lsls	r3, r3, #3
 8000ea2:	440b      	add	r3, r1
 8000ea4:	3315      	adds	r3, #21
 8000ea6:	79ba      	ldrb	r2, [r7, #6]
 8000ea8:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000eaa:	79ba      	ldrb	r2, [r7, #6]
 8000eac:	4908      	ldr	r1, [pc, #32]	; (8000ed0 <LinkTimerBefore+0xbc>)
 8000eae:	4613      	mov	r3, r2
 8000eb0:	005b      	lsls	r3, r3, #1
 8000eb2:	4413      	add	r3, r2
 8000eb4:	00db      	lsls	r3, r3, #3
 8000eb6:	440b      	add	r3, r1
 8000eb8:	3314      	adds	r3, #20
 8000eba:	79fa      	ldrb	r2, [r7, #7]
 8000ebc:	701a      	strb	r2, [r3, #0]
  return;
 8000ebe:	bf00      	nop
}
 8000ec0:	3714      	adds	r7, #20
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	20000a08 	.word	0x20000a08
 8000ed0:	20000978 	.word	0x20000978

08000ed4 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b084      	sub	sp, #16
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	4603      	mov	r3, r0
 8000edc:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000ede:	4b4e      	ldr	r3, [pc, #312]	; (8001018 <linkTimer+0x144>)
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	b2db      	uxtb	r3, r3
 8000ee4:	2b06      	cmp	r3, #6
 8000ee6:	d118      	bne.n	8000f1a <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000ee8:	4b4b      	ldr	r3, [pc, #300]	; (8001018 <linkTimer+0x144>)
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	b2da      	uxtb	r2, r3
 8000eee:	4b4b      	ldr	r3, [pc, #300]	; (800101c <linkTimer+0x148>)
 8000ef0:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8000ef2:	4a49      	ldr	r2, [pc, #292]	; (8001018 <linkTimer+0x144>)
 8000ef4:	79fb      	ldrb	r3, [r7, #7]
 8000ef6:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8000ef8:	79fa      	ldrb	r2, [r7, #7]
 8000efa:	4949      	ldr	r1, [pc, #292]	; (8001020 <linkTimer+0x14c>)
 8000efc:	4613      	mov	r3, r2
 8000efe:	005b      	lsls	r3, r3, #1
 8000f00:	4413      	add	r3, r2
 8000f02:	00db      	lsls	r3, r3, #3
 8000f04:	440b      	add	r3, r1
 8000f06:	3315      	adds	r3, #21
 8000f08:	2206      	movs	r2, #6
 8000f0a:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000f0c:	4b45      	ldr	r3, [pc, #276]	; (8001024 <linkTimer+0x150>)
 8000f0e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000f12:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8000f14:	2300      	movs	r3, #0
 8000f16:	81fb      	strh	r3, [r7, #14]
 8000f18:	e078      	b.n	800100c <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8000f1a:	f000 f909 	bl	8001130 <ReturnTimeElapsed>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8000f22:	79fa      	ldrb	r2, [r7, #7]
 8000f24:	493e      	ldr	r1, [pc, #248]	; (8001020 <linkTimer+0x14c>)
 8000f26:	4613      	mov	r3, r2
 8000f28:	005b      	lsls	r3, r3, #1
 8000f2a:	4413      	add	r3, r2
 8000f2c:	00db      	lsls	r3, r3, #3
 8000f2e:	440b      	add	r3, r1
 8000f30:	3308      	adds	r3, #8
 8000f32:	6819      	ldr	r1, [r3, #0]
 8000f34:	89fb      	ldrh	r3, [r7, #14]
 8000f36:	79fa      	ldrb	r2, [r7, #7]
 8000f38:	4419      	add	r1, r3
 8000f3a:	4839      	ldr	r0, [pc, #228]	; (8001020 <linkTimer+0x14c>)
 8000f3c:	4613      	mov	r3, r2
 8000f3e:	005b      	lsls	r3, r3, #1
 8000f40:	4413      	add	r3, r2
 8000f42:	00db      	lsls	r3, r3, #3
 8000f44:	4403      	add	r3, r0
 8000f46:	3308      	adds	r3, #8
 8000f48:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8000f4a:	79fa      	ldrb	r2, [r7, #7]
 8000f4c:	4934      	ldr	r1, [pc, #208]	; (8001020 <linkTimer+0x14c>)
 8000f4e:	4613      	mov	r3, r2
 8000f50:	005b      	lsls	r3, r3, #1
 8000f52:	4413      	add	r3, r2
 8000f54:	00db      	lsls	r3, r3, #3
 8000f56:	440b      	add	r3, r1
 8000f58:	3308      	adds	r3, #8
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8000f5e:	4b2e      	ldr	r3, [pc, #184]	; (8001018 <linkTimer+0x144>)
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	b2db      	uxtb	r3, r3
 8000f64:	4619      	mov	r1, r3
 8000f66:	4a2e      	ldr	r2, [pc, #184]	; (8001020 <linkTimer+0x14c>)
 8000f68:	460b      	mov	r3, r1
 8000f6a:	005b      	lsls	r3, r3, #1
 8000f6c:	440b      	add	r3, r1
 8000f6e:	00db      	lsls	r3, r3, #3
 8000f70:	4413      	add	r3, r2
 8000f72:	3308      	adds	r3, #8
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	68ba      	ldr	r2, [r7, #8]
 8000f78:	429a      	cmp	r2, r3
 8000f7a:	d337      	bcc.n	8000fec <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8000f7c:	4b26      	ldr	r3, [pc, #152]	; (8001018 <linkTimer+0x144>)
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8000f82:	7b7a      	ldrb	r2, [r7, #13]
 8000f84:	4926      	ldr	r1, [pc, #152]	; (8001020 <linkTimer+0x14c>)
 8000f86:	4613      	mov	r3, r2
 8000f88:	005b      	lsls	r3, r3, #1
 8000f8a:	4413      	add	r3, r2
 8000f8c:	00db      	lsls	r3, r3, #3
 8000f8e:	440b      	add	r3, r1
 8000f90:	3315      	adds	r3, #21
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000f96:	e013      	b.n	8000fc0 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8000f98:	7b7a      	ldrb	r2, [r7, #13]
 8000f9a:	4921      	ldr	r1, [pc, #132]	; (8001020 <linkTimer+0x14c>)
 8000f9c:	4613      	mov	r3, r2
 8000f9e:	005b      	lsls	r3, r3, #1
 8000fa0:	4413      	add	r3, r2
 8000fa2:	00db      	lsls	r3, r3, #3
 8000fa4:	440b      	add	r3, r1
 8000fa6:	3315      	adds	r3, #21
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8000fac:	7b7a      	ldrb	r2, [r7, #13]
 8000fae:	491c      	ldr	r1, [pc, #112]	; (8001020 <linkTimer+0x14c>)
 8000fb0:	4613      	mov	r3, r2
 8000fb2:	005b      	lsls	r3, r3, #1
 8000fb4:	4413      	add	r3, r2
 8000fb6:	00db      	lsls	r3, r3, #3
 8000fb8:	440b      	add	r3, r1
 8000fba:	3315      	adds	r3, #21
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000fc0:	7b3b      	ldrb	r3, [r7, #12]
 8000fc2:	2b06      	cmp	r3, #6
 8000fc4:	d00b      	beq.n	8000fde <linkTimer+0x10a>
 8000fc6:	7b3a      	ldrb	r2, [r7, #12]
 8000fc8:	4915      	ldr	r1, [pc, #84]	; (8001020 <linkTimer+0x14c>)
 8000fca:	4613      	mov	r3, r2
 8000fcc:	005b      	lsls	r3, r3, #1
 8000fce:	4413      	add	r3, r2
 8000fd0:	00db      	lsls	r3, r3, #3
 8000fd2:	440b      	add	r3, r1
 8000fd4:	3308      	adds	r3, #8
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	68ba      	ldr	r2, [r7, #8]
 8000fda:	429a      	cmp	r2, r3
 8000fdc:	d2dc      	bcs.n	8000f98 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8000fde:	7b7a      	ldrb	r2, [r7, #13]
 8000fe0:	79fb      	ldrb	r3, [r7, #7]
 8000fe2:	4611      	mov	r1, r2
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f7ff fecf 	bl	8000d88 <LinkTimerAfter>
 8000fea:	e00f      	b.n	800100c <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8000fec:	4b0a      	ldr	r3, [pc, #40]	; (8001018 <linkTimer+0x144>)
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	b2da      	uxtb	r2, r3
 8000ff2:	79fb      	ldrb	r3, [r7, #7]
 8000ff4:	4611      	mov	r1, r2
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f7ff ff0c 	bl	8000e14 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8000ffc:	4b06      	ldr	r3, [pc, #24]	; (8001018 <linkTimer+0x144>)
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	b2da      	uxtb	r2, r3
 8001002:	4b06      	ldr	r3, [pc, #24]	; (800101c <linkTimer+0x148>)
 8001004:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8001006:	4a04      	ldr	r2, [pc, #16]	; (8001018 <linkTimer+0x144>)
 8001008:	79fb      	ldrb	r3, [r7, #7]
 800100a:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 800100c:	89fb      	ldrh	r3, [r7, #14]
}
 800100e:	4618      	mov	r0, r3
 8001010:	3710      	adds	r7, #16
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	20000a08 	.word	0x20000a08
 800101c:	20000a09 	.word	0x20000a09
 8001020:	20000978 	.word	0x20000978
 8001024:	20000a0c 	.word	0x20000a0c

08001028 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8001028:	b480      	push	{r7}
 800102a:	b085      	sub	sp, #20
 800102c:	af00      	add	r7, sp, #0
 800102e:	4603      	mov	r3, r0
 8001030:	460a      	mov	r2, r1
 8001032:	71fb      	strb	r3, [r7, #7]
 8001034:	4613      	mov	r3, r2
 8001036:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8001038:	4b39      	ldr	r3, [pc, #228]	; (8001120 <UnlinkTimer+0xf8>)
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	b2db      	uxtb	r3, r3
 800103e:	79fa      	ldrb	r2, [r7, #7]
 8001040:	429a      	cmp	r2, r3
 8001042:	d111      	bne.n	8001068 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001044:	4b36      	ldr	r3, [pc, #216]	; (8001120 <UnlinkTimer+0xf8>)
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	b2da      	uxtb	r2, r3
 800104a:	4b36      	ldr	r3, [pc, #216]	; (8001124 <UnlinkTimer+0xfc>)
 800104c:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 800104e:	79fa      	ldrb	r2, [r7, #7]
 8001050:	4935      	ldr	r1, [pc, #212]	; (8001128 <UnlinkTimer+0x100>)
 8001052:	4613      	mov	r3, r2
 8001054:	005b      	lsls	r3, r3, #1
 8001056:	4413      	add	r3, r2
 8001058:	00db      	lsls	r3, r3, #3
 800105a:	440b      	add	r3, r1
 800105c:	3315      	adds	r3, #21
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	b2da      	uxtb	r2, r3
 8001062:	4b2f      	ldr	r3, [pc, #188]	; (8001120 <UnlinkTimer+0xf8>)
 8001064:	701a      	strb	r2, [r3, #0]
 8001066:	e03e      	b.n	80010e6 <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8001068:	79fa      	ldrb	r2, [r7, #7]
 800106a:	492f      	ldr	r1, [pc, #188]	; (8001128 <UnlinkTimer+0x100>)
 800106c:	4613      	mov	r3, r2
 800106e:	005b      	lsls	r3, r3, #1
 8001070:	4413      	add	r3, r2
 8001072:	00db      	lsls	r3, r3, #3
 8001074:	440b      	add	r3, r1
 8001076:	3314      	adds	r3, #20
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 800107c:	79fa      	ldrb	r2, [r7, #7]
 800107e:	492a      	ldr	r1, [pc, #168]	; (8001128 <UnlinkTimer+0x100>)
 8001080:	4613      	mov	r3, r2
 8001082:	005b      	lsls	r3, r3, #1
 8001084:	4413      	add	r3, r2
 8001086:	00db      	lsls	r3, r3, #3
 8001088:	440b      	add	r3, r1
 800108a:	3315      	adds	r3, #21
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8001090:	79f9      	ldrb	r1, [r7, #7]
 8001092:	7bfa      	ldrb	r2, [r7, #15]
 8001094:	4824      	ldr	r0, [pc, #144]	; (8001128 <UnlinkTimer+0x100>)
 8001096:	460b      	mov	r3, r1
 8001098:	005b      	lsls	r3, r3, #1
 800109a:	440b      	add	r3, r1
 800109c:	00db      	lsls	r3, r3, #3
 800109e:	4403      	add	r3, r0
 80010a0:	3315      	adds	r3, #21
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	b2d8      	uxtb	r0, r3
 80010a6:	4920      	ldr	r1, [pc, #128]	; (8001128 <UnlinkTimer+0x100>)
 80010a8:	4613      	mov	r3, r2
 80010aa:	005b      	lsls	r3, r3, #1
 80010ac:	4413      	add	r3, r2
 80010ae:	00db      	lsls	r3, r3, #3
 80010b0:	440b      	add	r3, r1
 80010b2:	3315      	adds	r3, #21
 80010b4:	4602      	mov	r2, r0
 80010b6:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80010b8:	7bbb      	ldrb	r3, [r7, #14]
 80010ba:	2b06      	cmp	r3, #6
 80010bc:	d013      	beq.n	80010e6 <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 80010be:	79f9      	ldrb	r1, [r7, #7]
 80010c0:	7bba      	ldrb	r2, [r7, #14]
 80010c2:	4819      	ldr	r0, [pc, #100]	; (8001128 <UnlinkTimer+0x100>)
 80010c4:	460b      	mov	r3, r1
 80010c6:	005b      	lsls	r3, r3, #1
 80010c8:	440b      	add	r3, r1
 80010ca:	00db      	lsls	r3, r3, #3
 80010cc:	4403      	add	r3, r0
 80010ce:	3314      	adds	r3, #20
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	b2d8      	uxtb	r0, r3
 80010d4:	4914      	ldr	r1, [pc, #80]	; (8001128 <UnlinkTimer+0x100>)
 80010d6:	4613      	mov	r3, r2
 80010d8:	005b      	lsls	r3, r3, #1
 80010da:	4413      	add	r3, r2
 80010dc:	00db      	lsls	r3, r3, #3
 80010de:	440b      	add	r3, r1
 80010e0:	3314      	adds	r3, #20
 80010e2:	4602      	mov	r2, r0
 80010e4:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 80010e6:	79fa      	ldrb	r2, [r7, #7]
 80010e8:	490f      	ldr	r1, [pc, #60]	; (8001128 <UnlinkTimer+0x100>)
 80010ea:	4613      	mov	r3, r2
 80010ec:	005b      	lsls	r3, r3, #1
 80010ee:	4413      	add	r3, r2
 80010f0:	00db      	lsls	r3, r3, #3
 80010f2:	440b      	add	r3, r1
 80010f4:	330c      	adds	r3, #12
 80010f6:	2201      	movs	r2, #1
 80010f8:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 80010fa:	4b09      	ldr	r3, [pc, #36]	; (8001120 <UnlinkTimer+0xf8>)
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	b2db      	uxtb	r3, r3
 8001100:	2b06      	cmp	r3, #6
 8001102:	d107      	bne.n	8001114 <UnlinkTimer+0xec>
 8001104:	79bb      	ldrb	r3, [r7, #6]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d104      	bne.n	8001114 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 800110a:	4b08      	ldr	r3, [pc, #32]	; (800112c <UnlinkTimer+0x104>)
 800110c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001110:	601a      	str	r2, [r3, #0]
  }

  return;
 8001112:	bf00      	nop
 8001114:	bf00      	nop
}
 8001116:	3714      	adds	r7, #20
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr
 8001120:	20000a08 	.word	0x20000a08
 8001124:	20000a09 	.word	0x20000a09
 8001128:	20000978 	.word	0x20000978
 800112c:	20000a0c 	.word	0x20000a0c

08001130 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8001136:	4b1a      	ldr	r3, [pc, #104]	; (80011a0 <ReturnTimeElapsed+0x70>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800113e:	d026      	beq.n	800118e <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8001140:	f7ff fe02 	bl	8000d48 <ReadRtcSsrValue>
 8001144:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8001146:	4b16      	ldr	r3, [pc, #88]	; (80011a0 <ReturnTimeElapsed+0x70>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	687a      	ldr	r2, [r7, #4]
 800114c:	429a      	cmp	r2, r3
 800114e:	d805      	bhi.n	800115c <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8001150:	4b13      	ldr	r3, [pc, #76]	; (80011a0 <ReturnTimeElapsed+0x70>)
 8001152:	681a      	ldr	r2, [r3, #0]
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	1ad3      	subs	r3, r2, r3
 8001158:	607b      	str	r3, [r7, #4]
 800115a:	e00a      	b.n	8001172 <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 800115c:	4b11      	ldr	r3, [pc, #68]	; (80011a4 <ReturnTimeElapsed+0x74>)
 800115e:	881b      	ldrh	r3, [r3, #0]
 8001160:	461a      	mov	r2, r3
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	1ad3      	subs	r3, r2, r3
 8001166:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8001168:	4b0d      	ldr	r3, [pc, #52]	; (80011a0 <ReturnTimeElapsed+0x70>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	683a      	ldr	r2, [r7, #0]
 800116e:	4413      	add	r3, r2
 8001170:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8001172:	4b0d      	ldr	r3, [pc, #52]	; (80011a8 <ReturnTimeElapsed+0x78>)
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	461a      	mov	r2, r3
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	fb02 f303 	mul.w	r3, r2, r3
 800117e:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8001180:	4b0a      	ldr	r3, [pc, #40]	; (80011ac <ReturnTimeElapsed+0x7c>)
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	461a      	mov	r2, r3
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	40d3      	lsrs	r3, r2
 800118a:	607b      	str	r3, [r7, #4]
 800118c:	e001      	b.n	8001192 <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 800118e:	2300      	movs	r3, #0
 8001190:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	b29b      	uxth	r3, r3
}
 8001196:	4618      	mov	r0, r3
 8001198:	3708      	adds	r7, #8
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	20000a0c 	.word	0x20000a0c
 80011a4:	20000a14 	.word	0x20000a14
 80011a8:	20000a12 	.word	0x20000a12
 80011ac:	20000a11 	.word	0x20000a11

080011b0 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	4603      	mov	r3, r0
 80011b8:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 80011ba:	88fb      	ldrh	r3, [r7, #6]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d108      	bne.n	80011d2 <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 80011c0:	f7ff fdc2 	bl	8000d48 <ReadRtcSsrValue>
 80011c4:	4603      	mov	r3, r0
 80011c6:	4a21      	ldr	r2, [pc, #132]	; (800124c <RestartWakeupCounter+0x9c>)
 80011c8:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 80011ca:	2003      	movs	r0, #3
 80011cc:	f001 fac5 	bl	800275a <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 80011d0:	e039      	b.n	8001246 <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 80011d2:	88fb      	ldrh	r3, [r7, #6]
 80011d4:	2b01      	cmp	r3, #1
 80011d6:	d803      	bhi.n	80011e0 <RestartWakeupCounter+0x30>
 80011d8:	4b1d      	ldr	r3, [pc, #116]	; (8001250 <RestartWakeupCounter+0xa0>)
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	2b01      	cmp	r3, #1
 80011de:	d002      	beq.n	80011e6 <RestartWakeupCounter+0x36>
      Value -= 1;
 80011e0:	88fb      	ldrh	r3, [r7, #6]
 80011e2:	3b01      	subs	r3, #1
 80011e4:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 80011e6:	bf00      	nop
 80011e8:	4b1a      	ldr	r3, [pc, #104]	; (8001254 <RestartWakeupCounter+0xa4>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	68db      	ldr	r3, [r3, #12]
 80011ee:	f003 0304 	and.w	r3, r3, #4
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d0f8      	beq.n	80011e8 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80011f6:	4b17      	ldr	r3, [pc, #92]	; (8001254 <RestartWakeupCounter+0xa4>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	68db      	ldr	r3, [r3, #12]
 80011fc:	b2da      	uxtb	r2, r3
 80011fe:	4b15      	ldr	r3, [pc, #84]	; (8001254 <RestartWakeupCounter+0xa4>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001206:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001208:	4b13      	ldr	r3, [pc, #76]	; (8001258 <RestartWakeupCounter+0xa8>)
 800120a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800120e:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001210:	2003      	movs	r0, #3
 8001212:	f001 fab0 	bl	8002776 <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8001216:	4b11      	ldr	r3, [pc, #68]	; (800125c <RestartWakeupCounter+0xac>)
 8001218:	695b      	ldr	r3, [r3, #20]
 800121a:	0c1b      	lsrs	r3, r3, #16
 800121c:	041b      	lsls	r3, r3, #16
 800121e:	88fa      	ldrh	r2, [r7, #6]
 8001220:	490e      	ldr	r1, [pc, #56]	; (800125c <RestartWakeupCounter+0xac>)
 8001222:	4313      	orrs	r3, r2
 8001224:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8001226:	f7ff fd8f 	bl	8000d48 <ReadRtcSsrValue>
 800122a:	4603      	mov	r3, r0
 800122c:	4a07      	ldr	r2, [pc, #28]	; (800124c <RestartWakeupCounter+0x9c>)
 800122e:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 8001230:	4b08      	ldr	r3, [pc, #32]	; (8001254 <RestartWakeupCounter+0xa4>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	689a      	ldr	r2, [r3, #8]
 8001236:	4b07      	ldr	r3, [pc, #28]	; (8001254 <RestartWakeupCounter+0xa4>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800123e:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8001240:	f3af 8000 	nop.w
  return ;
 8001244:	bf00      	nop
}
 8001246:	3708      	adds	r7, #8
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	20000a0c 	.word	0x20000a0c
 8001250:	20000a11 	.word	0x20000a11
 8001254:	20000aa8 	.word	0x20000aa8
 8001258:	58000800 	.word	0x58000800
 800125c:	40002800 	.word	0x40002800

08001260 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b084      	sub	sp, #16
 8001264:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8001266:	4b45      	ldr	r3, [pc, #276]	; (800137c <RescheduleTimerList+0x11c>)
 8001268:	689b      	ldr	r3, [r3, #8]
 800126a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800126e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001272:	d107      	bne.n	8001284 <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8001274:	bf00      	nop
 8001276:	4b42      	ldr	r3, [pc, #264]	; (8001380 <RescheduleTimerList+0x120>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	68db      	ldr	r3, [r3, #12]
 800127c:	f003 0304 	and.w	r3, r3, #4
 8001280:	2b00      	cmp	r3, #0
 8001282:	d1f8      	bne.n	8001276 <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8001284:	4b3e      	ldr	r3, [pc, #248]	; (8001380 <RescheduleTimerList+0x120>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	689a      	ldr	r2, [r3, #8]
 800128a:	4b3d      	ldr	r3, [pc, #244]	; (8001380 <RescheduleTimerList+0x120>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001292:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8001294:	4b3b      	ldr	r3, [pc, #236]	; (8001384 <RescheduleTimerList+0x124>)
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 800129a:	7bfa      	ldrb	r2, [r7, #15]
 800129c:	493a      	ldr	r1, [pc, #232]	; (8001388 <RescheduleTimerList+0x128>)
 800129e:	4613      	mov	r3, r2
 80012a0:	005b      	lsls	r3, r3, #1
 80012a2:	4413      	add	r3, r2
 80012a4:	00db      	lsls	r3, r3, #3
 80012a6:	440b      	add	r3, r1
 80012a8:	3308      	adds	r3, #8
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 80012ae:	f7ff ff3f 	bl	8001130 <ReturnTimeElapsed>
 80012b2:	4603      	mov	r3, r0
 80012b4:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 80012b6:	88fb      	ldrh	r3, [r7, #6]
 80012b8:	68ba      	ldr	r2, [r7, #8]
 80012ba:	429a      	cmp	r2, r3
 80012bc:	d205      	bcs.n	80012ca <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 80012be:	2300      	movs	r3, #0
 80012c0:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80012c2:	4b32      	ldr	r3, [pc, #200]	; (800138c <RescheduleTimerList+0x12c>)
 80012c4:	2201      	movs	r2, #1
 80012c6:	701a      	strb	r2, [r3, #0]
 80012c8:	e04d      	b.n	8001366 <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 80012ca:	88fb      	ldrh	r3, [r7, #6]
 80012cc:	4a30      	ldr	r2, [pc, #192]	; (8001390 <RescheduleTimerList+0x130>)
 80012ce:	8812      	ldrh	r2, [r2, #0]
 80012d0:	b292      	uxth	r2, r2
 80012d2:	4413      	add	r3, r2
 80012d4:	461a      	mov	r2, r3
 80012d6:	68bb      	ldr	r3, [r7, #8]
 80012d8:	4293      	cmp	r3, r2
 80012da:	d906      	bls.n	80012ea <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 80012dc:	4b2c      	ldr	r3, [pc, #176]	; (8001390 <RescheduleTimerList+0x130>)
 80012de:	881b      	ldrh	r3, [r3, #0]
 80012e0:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 80012e2:	4b2a      	ldr	r3, [pc, #168]	; (800138c <RescheduleTimerList+0x12c>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	701a      	strb	r2, [r3, #0]
 80012e8:	e03d      	b.n	8001366 <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 80012ea:	68bb      	ldr	r3, [r7, #8]
 80012ec:	b29a      	uxth	r2, r3
 80012ee:	88fb      	ldrh	r3, [r7, #6]
 80012f0:	1ad3      	subs	r3, r2, r3
 80012f2:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80012f4:	4b25      	ldr	r3, [pc, #148]	; (800138c <RescheduleTimerList+0x12c>)
 80012f6:	2201      	movs	r2, #1
 80012f8:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80012fa:	e034      	b.n	8001366 <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 80012fc:	7bfa      	ldrb	r2, [r7, #15]
 80012fe:	4922      	ldr	r1, [pc, #136]	; (8001388 <RescheduleTimerList+0x128>)
 8001300:	4613      	mov	r3, r2
 8001302:	005b      	lsls	r3, r3, #1
 8001304:	4413      	add	r3, r2
 8001306:	00db      	lsls	r3, r3, #3
 8001308:	440b      	add	r3, r1
 800130a:	3308      	adds	r3, #8
 800130c:	681a      	ldr	r2, [r3, #0]
 800130e:	88fb      	ldrh	r3, [r7, #6]
 8001310:	429a      	cmp	r2, r3
 8001312:	d20a      	bcs.n	800132a <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8001314:	7bfa      	ldrb	r2, [r7, #15]
 8001316:	491c      	ldr	r1, [pc, #112]	; (8001388 <RescheduleTimerList+0x128>)
 8001318:	4613      	mov	r3, r2
 800131a:	005b      	lsls	r3, r3, #1
 800131c:	4413      	add	r3, r2
 800131e:	00db      	lsls	r3, r3, #3
 8001320:	440b      	add	r3, r1
 8001322:	3308      	adds	r3, #8
 8001324:	2200      	movs	r2, #0
 8001326:	601a      	str	r2, [r3, #0]
 8001328:	e013      	b.n	8001352 <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 800132a:	7bfa      	ldrb	r2, [r7, #15]
 800132c:	4916      	ldr	r1, [pc, #88]	; (8001388 <RescheduleTimerList+0x128>)
 800132e:	4613      	mov	r3, r2
 8001330:	005b      	lsls	r3, r3, #1
 8001332:	4413      	add	r3, r2
 8001334:	00db      	lsls	r3, r3, #3
 8001336:	440b      	add	r3, r1
 8001338:	3308      	adds	r3, #8
 800133a:	6819      	ldr	r1, [r3, #0]
 800133c:	88fb      	ldrh	r3, [r7, #6]
 800133e:	7bfa      	ldrb	r2, [r7, #15]
 8001340:	1ac9      	subs	r1, r1, r3
 8001342:	4811      	ldr	r0, [pc, #68]	; (8001388 <RescheduleTimerList+0x128>)
 8001344:	4613      	mov	r3, r2
 8001346:	005b      	lsls	r3, r3, #1
 8001348:	4413      	add	r3, r2
 800134a:	00db      	lsls	r3, r3, #3
 800134c:	4403      	add	r3, r0
 800134e:	3308      	adds	r3, #8
 8001350:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8001352:	7bfa      	ldrb	r2, [r7, #15]
 8001354:	490c      	ldr	r1, [pc, #48]	; (8001388 <RescheduleTimerList+0x128>)
 8001356:	4613      	mov	r3, r2
 8001358:	005b      	lsls	r3, r3, #1
 800135a:	4413      	add	r3, r2
 800135c:	00db      	lsls	r3, r3, #3
 800135e:	440b      	add	r3, r1
 8001360:	3315      	adds	r3, #21
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001366:	7bfb      	ldrb	r3, [r7, #15]
 8001368:	2b06      	cmp	r3, #6
 800136a:	d1c7      	bne.n	80012fc <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 800136c:	89bb      	ldrh	r3, [r7, #12]
 800136e:	4618      	mov	r0, r3
 8001370:	f7ff ff1e 	bl	80011b0 <RestartWakeupCounter>

  return ;
 8001374:	bf00      	nop
}
 8001376:	3710      	adds	r7, #16
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}
 800137c:	40002800 	.word	0x40002800
 8001380:	20000aa8 	.word	0x20000aa8
 8001384:	20000a08 	.word	0x20000a08
 8001388:	20000978 	.word	0x20000978
 800138c:	20000a10 	.word	0x20000a10
 8001390:	20000a16 	.word	0x20000a16

08001394 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b08a      	sub	sp, #40	; 0x28
 8001398:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800139a:	f3ef 8310 	mrs	r3, PRIMASK
 800139e:	617b      	str	r3, [r7, #20]
  return(result);
 80013a0:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80013a2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 80013a4:	b672      	cpsid	i
}
 80013a6:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80013a8:	4b59      	ldr	r3, [pc, #356]	; (8001510 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	22ca      	movs	r2, #202	; 0xca
 80013ae:	625a      	str	r2, [r3, #36]	; 0x24
 80013b0:	4b57      	ldr	r3, [pc, #348]	; (8001510 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	2253      	movs	r2, #83	; 0x53
 80013b6:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 80013b8:	4b55      	ldr	r3, [pc, #340]	; (8001510 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	689a      	ldr	r2, [r3, #8]
 80013be:	4b54      	ldr	r3, [pc, #336]	; (8001510 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80013c6:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 80013c8:	4b52      	ldr	r3, [pc, #328]	; (8001514 <HW_TS_RTC_Wakeup_Handler+0x180>)
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 80013d0:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80013d4:	4950      	ldr	r1, [pc, #320]	; (8001518 <HW_TS_RTC_Wakeup_Handler+0x184>)
 80013d6:	4613      	mov	r3, r2
 80013d8:	005b      	lsls	r3, r3, #1
 80013da:	4413      	add	r3, r2
 80013dc:	00db      	lsls	r3, r3, #3
 80013de:	440b      	add	r3, r1
 80013e0:	330c      	adds	r3, #12
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	b2db      	uxtb	r3, r3
 80013e6:	2b02      	cmp	r3, #2
 80013e8:	d16e      	bne.n	80014c8 <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 80013ea:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80013ee:	494a      	ldr	r1, [pc, #296]	; (8001518 <HW_TS_RTC_Wakeup_Handler+0x184>)
 80013f0:	4613      	mov	r3, r2
 80013f2:	005b      	lsls	r3, r3, #1
 80013f4:	4413      	add	r3, r2
 80013f6:	00db      	lsls	r3, r3, #3
 80013f8:	440b      	add	r3, r1
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 80013fe:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001402:	4945      	ldr	r1, [pc, #276]	; (8001518 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001404:	4613      	mov	r3, r2
 8001406:	005b      	lsls	r3, r3, #1
 8001408:	4413      	add	r3, r2
 800140a:	00db      	lsls	r3, r3, #3
 800140c:	440b      	add	r3, r1
 800140e:	3310      	adds	r3, #16
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8001414:	4b41      	ldr	r3, [pc, #260]	; (800151c <HW_TS_RTC_Wakeup_Handler+0x188>)
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	b2db      	uxtb	r3, r3
 800141a:	2b00      	cmp	r3, #0
 800141c:	d04c      	beq.n	80014b8 <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 800141e:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001422:	493d      	ldr	r1, [pc, #244]	; (8001518 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001424:	4613      	mov	r3, r2
 8001426:	005b      	lsls	r3, r3, #1
 8001428:	4413      	add	r3, r2
 800142a:	00db      	lsls	r3, r3, #3
 800142c:	440b      	add	r3, r1
 800142e:	330d      	adds	r3, #13
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	b2db      	uxtb	r3, r3
 8001434:	2b01      	cmp	r3, #1
 8001436:	d124      	bne.n	8001482 <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8001438:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800143c:	2101      	movs	r1, #1
 800143e:	4618      	mov	r0, r3
 8001440:	f7ff fdf2 	bl	8001028 <UnlinkTimer>
 8001444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001446:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001448:	693b      	ldr	r3, [r7, #16]
 800144a:	f383 8810 	msr	PRIMASK, r3
}
 800144e:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8001450:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001454:	4930      	ldr	r1, [pc, #192]	; (8001518 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001456:	4613      	mov	r3, r2
 8001458:	005b      	lsls	r3, r3, #1
 800145a:	4413      	add	r3, r2
 800145c:	00db      	lsls	r3, r3, #3
 800145e:	440b      	add	r3, r1
 8001460:	3304      	adds	r3, #4
 8001462:	681a      	ldr	r2, [r3, #0]
 8001464:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001468:	4611      	mov	r1, r2
 800146a:	4618      	mov	r0, r3
 800146c:	f000 f9b8 	bl	80017e0 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001470:	4b27      	ldr	r3, [pc, #156]	; (8001510 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	22ca      	movs	r2, #202	; 0xca
 8001476:	625a      	str	r2, [r3, #36]	; 0x24
 8001478:	4b25      	ldr	r3, [pc, #148]	; (8001510 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	2253      	movs	r2, #83	; 0x53
 800147e:	625a      	str	r2, [r3, #36]	; 0x24
 8001480:	e012      	b.n	80014a8 <HW_TS_RTC_Wakeup_Handler+0x114>
 8001482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001484:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	f383 8810 	msr	PRIMASK, r3
}
 800148c:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 800148e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001492:	4618      	mov	r0, r3
 8001494:	f000 f920 	bl	80016d8 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001498:	4b1d      	ldr	r3, [pc, #116]	; (8001510 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	22ca      	movs	r2, #202	; 0xca
 800149e:	625a      	str	r2, [r3, #36]	; 0x24
 80014a0:	4b1b      	ldr	r3, [pc, #108]	; (8001510 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	2253      	movs	r2, #83	; 0x53
 80014a6:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 80014a8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80014ac:	69fa      	ldr	r2, [r7, #28]
 80014ae:	4619      	mov	r1, r3
 80014b0:	69b8      	ldr	r0, [r7, #24]
 80014b2:	f000 fa1b 	bl	80018ec <HW_TS_RTC_Int_AppNot>
 80014b6:	e022      	b.n	80014fe <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 80014b8:	f7ff fed2 	bl	8001260 <RescheduleTimerList>
 80014bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014be:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80014c0:	68bb      	ldr	r3, [r7, #8]
 80014c2:	f383 8810 	msr	PRIMASK, r3
}
 80014c6:	e01a      	b.n	80014fe <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 80014c8:	bf00      	nop
 80014ca:	4b11      	ldr	r3, [pc, #68]	; (8001510 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	68db      	ldr	r3, [r3, #12]
 80014d0:	f003 0304 	and.w	r3, r3, #4
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d0f8      	beq.n	80014ca <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80014d8:	4b0d      	ldr	r3, [pc, #52]	; (8001510 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	68db      	ldr	r3, [r3, #12]
 80014de:	b2da      	uxtb	r2, r3
 80014e0:	4b0b      	ldr	r3, [pc, #44]	; (8001510 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80014e8:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80014ea:	4b0d      	ldr	r3, [pc, #52]	; (8001520 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 80014ec:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80014f0:	60da      	str	r2, [r3, #12]
 80014f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f4:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	f383 8810 	msr	PRIMASK, r3
}
 80014fc:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80014fe:	4b04      	ldr	r3, [pc, #16]	; (8001510 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	22ff      	movs	r2, #255	; 0xff
 8001504:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 8001506:	bf00      	nop
}
 8001508:	3728      	adds	r7, #40	; 0x28
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	20000aa8 	.word	0x20000aa8
 8001514:	20000a08 	.word	0x20000a08
 8001518:	20000978 	.word	0x20000978
 800151c:	20000a10 	.word	0x20000a10
 8001520:	58000800 	.word	0x58000800

08001524 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b088      	sub	sp, #32
 8001528:	af00      	add	r7, sp, #0
 800152a:	4603      	mov	r3, r0
 800152c:	6039      	str	r1, [r7, #0]
 800152e:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001530:	4b5e      	ldr	r3, [pc, #376]	; (80016ac <HW_TS_Init+0x188>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	22ca      	movs	r2, #202	; 0xca
 8001536:	625a      	str	r2, [r3, #36]	; 0x24
 8001538:	4b5c      	ldr	r3, [pc, #368]	; (80016ac <HW_TS_Init+0x188>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	2253      	movs	r2, #83	; 0x53
 800153e:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8001540:	4b5b      	ldr	r3, [pc, #364]	; (80016b0 <HW_TS_Init+0x18c>)
 8001542:	689b      	ldr	r3, [r3, #8]
 8001544:	4a5a      	ldr	r2, [pc, #360]	; (80016b0 <HW_TS_Init+0x18c>)
 8001546:	f043 0320 	orr.w	r3, r3, #32
 800154a:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 800154c:	4b58      	ldr	r3, [pc, #352]	; (80016b0 <HW_TS_Init+0x18c>)
 800154e:	689b      	ldr	r3, [r3, #8]
 8001550:	b2db      	uxtb	r3, r3
 8001552:	f003 0307 	and.w	r3, r3, #7
 8001556:	b2db      	uxtb	r3, r3
 8001558:	f1c3 0304 	rsb	r3, r3, #4
 800155c:	b2da      	uxtb	r2, r3
 800155e:	4b55      	ldr	r3, [pc, #340]	; (80016b4 <HW_TS_Init+0x190>)
 8001560:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8001562:	4b53      	ldr	r3, [pc, #332]	; (80016b0 <HW_TS_Init+0x18c>)
 8001564:	691b      	ldr	r3, [r3, #16]
 8001566:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800156a:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 800156e:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001570:	693a      	ldr	r2, [r7, #16]
 8001572:	fa92 f2a2 	rbit	r2, r2
 8001576:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001578:	68fa      	ldr	r2, [r7, #12]
 800157a:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800157c:	697a      	ldr	r2, [r7, #20]
 800157e:	2a00      	cmp	r2, #0
 8001580:	d101      	bne.n	8001586 <HW_TS_Init+0x62>
  {
    return 32U;
 8001582:	2220      	movs	r2, #32
 8001584:	e003      	b.n	800158e <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 8001586:	697a      	ldr	r2, [r7, #20]
 8001588:	fab2 f282 	clz	r2, r2
 800158c:	b2d2      	uxtb	r2, r2
 800158e:	40d3      	lsrs	r3, r2
 8001590:	b2db      	uxtb	r3, r3
 8001592:	3301      	adds	r3, #1
 8001594:	b2da      	uxtb	r2, r3
 8001596:	4b48      	ldr	r3, [pc, #288]	; (80016b8 <HW_TS_Init+0x194>)
 8001598:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 800159a:	4b45      	ldr	r3, [pc, #276]	; (80016b0 <HW_TS_Init+0x18c>)
 800159c:	691b      	ldr	r3, [r3, #16]
 800159e:	b29b      	uxth	r3, r3
 80015a0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80015a4:	b29b      	uxth	r3, r3
 80015a6:	3301      	adds	r3, #1
 80015a8:	b29a      	uxth	r2, r3
 80015aa:	4b44      	ldr	r3, [pc, #272]	; (80016bc <HW_TS_Init+0x198>)
 80015ac:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 80015ae:	4b43      	ldr	r3, [pc, #268]	; (80016bc <HW_TS_Init+0x198>)
 80015b0:	881b      	ldrh	r3, [r3, #0]
 80015b2:	3b01      	subs	r3, #1
 80015b4:	4a40      	ldr	r2, [pc, #256]	; (80016b8 <HW_TS_Init+0x194>)
 80015b6:	7812      	ldrb	r2, [r2, #0]
 80015b8:	fb02 f303 	mul.w	r3, r2, r3
 80015bc:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80015c0:	4a3c      	ldr	r2, [pc, #240]	; (80016b4 <HW_TS_Init+0x190>)
 80015c2:	7812      	ldrb	r2, [r2, #0]
 80015c4:	40d3      	lsrs	r3, r2
 80015c6:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 80015c8:	69bb      	ldr	r3, [r7, #24]
 80015ca:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d904      	bls.n	80015dc <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 80015d2:	4b3b      	ldr	r3, [pc, #236]	; (80016c0 <HW_TS_Init+0x19c>)
 80015d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015d8:	801a      	strh	r2, [r3, #0]
 80015da:	e003      	b.n	80015e4 <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 80015dc:	69bb      	ldr	r3, [r7, #24]
 80015de:	b29a      	uxth	r2, r3
 80015e0:	4b37      	ldr	r3, [pc, #220]	; (80016c0 <HW_TS_Init+0x19c>)
 80015e2:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80015e4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80015e8:	f7ff fb9c 	bl	8000d24 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80015ec:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80015f0:	f7ff fb84 	bl	8000cfc <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 80015f4:	79fb      	ldrb	r3, [r7, #7]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d13d      	bne.n	8001676 <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80015fa:	4b32      	ldr	r3, [pc, #200]	; (80016c4 <HW_TS_Init+0x1a0>)
 80015fc:	2201      	movs	r2, #1
 80015fe:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001600:	4b31      	ldr	r3, [pc, #196]	; (80016c8 <HW_TS_Init+0x1a4>)
 8001602:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001606:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8001608:	2300      	movs	r3, #0
 800160a:	77fb      	strb	r3, [r7, #31]
 800160c:	e00c      	b.n	8001628 <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 800160e:	7ffa      	ldrb	r2, [r7, #31]
 8001610:	492e      	ldr	r1, [pc, #184]	; (80016cc <HW_TS_Init+0x1a8>)
 8001612:	4613      	mov	r3, r2
 8001614:	005b      	lsls	r3, r3, #1
 8001616:	4413      	add	r3, r2
 8001618:	00db      	lsls	r3, r3, #3
 800161a:	440b      	add	r3, r1
 800161c:	330c      	adds	r3, #12
 800161e:	2200      	movs	r2, #0
 8001620:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8001622:	7ffb      	ldrb	r3, [r7, #31]
 8001624:	3301      	adds	r3, #1
 8001626:	77fb      	strb	r3, [r7, #31]
 8001628:	7ffb      	ldrb	r3, [r7, #31]
 800162a:	2b05      	cmp	r3, #5
 800162c:	d9ef      	bls.n	800160e <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 800162e:	4b28      	ldr	r3, [pc, #160]	; (80016d0 <HW_TS_Init+0x1ac>)
 8001630:	2206      	movs	r2, #6
 8001632:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 8001634:	4b1d      	ldr	r3, [pc, #116]	; (80016ac <HW_TS_Init+0x188>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	689a      	ldr	r2, [r3, #8]
 800163a:	4b1c      	ldr	r3, [pc, #112]	; (80016ac <HW_TS_Init+0x188>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001642:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8001644:	4b19      	ldr	r3, [pc, #100]	; (80016ac <HW_TS_Init+0x188>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	68db      	ldr	r3, [r3, #12]
 800164a:	b2da      	uxtb	r2, r3
 800164c:	4b17      	ldr	r3, [pc, #92]	; (80016ac <HW_TS_Init+0x188>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001654:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8001656:	4b1f      	ldr	r3, [pc, #124]	; (80016d4 <HW_TS_Init+0x1b0>)
 8001658:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800165c:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 800165e:	2003      	movs	r0, #3
 8001660:	f001 f889 	bl	8002776 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8001664:	4b11      	ldr	r3, [pc, #68]	; (80016ac <HW_TS_Init+0x188>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	689a      	ldr	r2, [r3, #8]
 800166a:	4b10      	ldr	r3, [pc, #64]	; (80016ac <HW_TS_Init+0x188>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001672:	609a      	str	r2, [r3, #8]
 8001674:	e009      	b.n	800168a <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 8001676:	4b0d      	ldr	r3, [pc, #52]	; (80016ac <HW_TS_Init+0x188>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	68db      	ldr	r3, [r3, #12]
 800167c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001680:	2b00      	cmp	r3, #0
 8001682:	d002      	beq.n	800168a <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001684:	2003      	movs	r0, #3
 8001686:	f001 f868 	bl	800275a <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 800168a:	4b08      	ldr	r3, [pc, #32]	; (80016ac <HW_TS_Init+0x188>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	22ff      	movs	r2, #255	; 0xff
 8001690:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8001692:	2200      	movs	r2, #0
 8001694:	2103      	movs	r1, #3
 8001696:	2003      	movs	r0, #3
 8001698:	f001 f81d 	bl	80026d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 800169c:	2003      	movs	r0, #3
 800169e:	f001 f834 	bl	800270a <HAL_NVIC_EnableIRQ>

  return;
 80016a2:	bf00      	nop
}
 80016a4:	3720      	adds	r7, #32
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	20000aa8 	.word	0x20000aa8
 80016b0:	40002800 	.word	0x40002800
 80016b4:	20000a11 	.word	0x20000a11
 80016b8:	20000a12 	.word	0x20000a12
 80016bc:	20000a14 	.word	0x20000a14
 80016c0:	20000a16 	.word	0x20000a16
 80016c4:	20000a10 	.word	0x20000a10
 80016c8:	20000a0c 	.word	0x20000a0c
 80016cc:	20000978 	.word	0x20000978
 80016d0:	20000a08 	.word	0x20000a08
 80016d4:	58000800 	.word	0x58000800

080016d8 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b086      	sub	sp, #24
 80016dc:	af00      	add	r7, sp, #0
 80016de:	4603      	mov	r3, r0
 80016e0:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80016e2:	f3ef 8310 	mrs	r3, PRIMASK
 80016e6:	60fb      	str	r3, [r7, #12]
  return(result);
 80016e8:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80016ea:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80016ec:	b672      	cpsid	i
}
 80016ee:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 80016f0:	2003      	movs	r0, #3
 80016f2:	f001 f818 	bl	8002726 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80016f6:	4b34      	ldr	r3, [pc, #208]	; (80017c8 <HW_TS_Stop+0xf0>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	22ca      	movs	r2, #202	; 0xca
 80016fc:	625a      	str	r2, [r3, #36]	; 0x24
 80016fe:	4b32      	ldr	r3, [pc, #200]	; (80017c8 <HW_TS_Stop+0xf0>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	2253      	movs	r2, #83	; 0x53
 8001704:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001706:	79fa      	ldrb	r2, [r7, #7]
 8001708:	4930      	ldr	r1, [pc, #192]	; (80017cc <HW_TS_Stop+0xf4>)
 800170a:	4613      	mov	r3, r2
 800170c:	005b      	lsls	r3, r3, #1
 800170e:	4413      	add	r3, r2
 8001710:	00db      	lsls	r3, r3, #3
 8001712:	440b      	add	r3, r1
 8001714:	330c      	adds	r3, #12
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	b2db      	uxtb	r3, r3
 800171a:	2b02      	cmp	r3, #2
 800171c:	d142      	bne.n	80017a4 <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 800171e:	79fb      	ldrb	r3, [r7, #7]
 8001720:	2100      	movs	r1, #0
 8001722:	4618      	mov	r0, r3
 8001724:	f7ff fc80 	bl	8001028 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8001728:	4b29      	ldr	r3, [pc, #164]	; (80017d0 <HW_TS_Stop+0xf8>)
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800172e:	7cfb      	ldrb	r3, [r7, #19]
 8001730:	2b06      	cmp	r3, #6
 8001732:	d12f      	bne.n	8001794 <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8001734:	4b27      	ldr	r3, [pc, #156]	; (80017d4 <HW_TS_Stop+0xfc>)
 8001736:	689b      	ldr	r3, [r3, #8]
 8001738:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800173c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001740:	d107      	bne.n	8001752 <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8001742:	bf00      	nop
 8001744:	4b20      	ldr	r3, [pc, #128]	; (80017c8 <HW_TS_Stop+0xf0>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	68db      	ldr	r3, [r3, #12]
 800174a:	f003 0304 	and.w	r3, r3, #4
 800174e:	2b00      	cmp	r3, #0
 8001750:	d1f8      	bne.n	8001744 <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8001752:	4b1d      	ldr	r3, [pc, #116]	; (80017c8 <HW_TS_Stop+0xf0>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	689a      	ldr	r2, [r3, #8]
 8001758:	4b1b      	ldr	r3, [pc, #108]	; (80017c8 <HW_TS_Stop+0xf0>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001760:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8001762:	bf00      	nop
 8001764:	4b18      	ldr	r3, [pc, #96]	; (80017c8 <HW_TS_Stop+0xf0>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	68db      	ldr	r3, [r3, #12]
 800176a:	f003 0304 	and.w	r3, r3, #4
 800176e:	2b00      	cmp	r3, #0
 8001770:	d0f8      	beq.n	8001764 <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001772:	4b15      	ldr	r3, [pc, #84]	; (80017c8 <HW_TS_Stop+0xf0>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	68db      	ldr	r3, [r3, #12]
 8001778:	b2da      	uxtb	r2, r3
 800177a:	4b13      	ldr	r3, [pc, #76]	; (80017c8 <HW_TS_Stop+0xf0>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001782:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001784:	4b14      	ldr	r3, [pc, #80]	; (80017d8 <HW_TS_Stop+0x100>)
 8001786:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800178a:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 800178c:	2003      	movs	r0, #3
 800178e:	f000 fff2 	bl	8002776 <HAL_NVIC_ClearPendingIRQ>
 8001792:	e007      	b.n	80017a4 <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001794:	4b11      	ldr	r3, [pc, #68]	; (80017dc <HW_TS_Stop+0x104>)
 8001796:	781b      	ldrb	r3, [r3, #0]
 8001798:	b2db      	uxtb	r3, r3
 800179a:	7cfa      	ldrb	r2, [r7, #19]
 800179c:	429a      	cmp	r2, r3
 800179e:	d001      	beq.n	80017a4 <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 80017a0:	f7ff fd5e 	bl	8001260 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80017a4:	4b08      	ldr	r3, [pc, #32]	; (80017c8 <HW_TS_Stop+0xf0>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	22ff      	movs	r2, #255	; 0xff
 80017aa:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80017ac:	2003      	movs	r0, #3
 80017ae:	f000 ffac 	bl	800270a <HAL_NVIC_EnableIRQ>
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80017b6:	68bb      	ldr	r3, [r7, #8]
 80017b8:	f383 8810 	msr	PRIMASK, r3
}
 80017bc:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80017be:	bf00      	nop
}
 80017c0:	3718      	adds	r7, #24
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	20000aa8 	.word	0x20000aa8
 80017cc:	20000978 	.word	0x20000978
 80017d0:	20000a08 	.word	0x20000a08
 80017d4:	40002800 	.word	0x40002800
 80017d8:	58000800 	.word	0x58000800
 80017dc:	20000a09 	.word	0x20000a09

080017e0 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b086      	sub	sp, #24
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	4603      	mov	r3, r0
 80017e8:	6039      	str	r1, [r7, #0]
 80017ea:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 80017ec:	79fa      	ldrb	r2, [r7, #7]
 80017ee:	493b      	ldr	r1, [pc, #236]	; (80018dc <HW_TS_Start+0xfc>)
 80017f0:	4613      	mov	r3, r2
 80017f2:	005b      	lsls	r3, r3, #1
 80017f4:	4413      	add	r3, r2
 80017f6:	00db      	lsls	r3, r3, #3
 80017f8:	440b      	add	r3, r1
 80017fa:	330c      	adds	r3, #12
 80017fc:	781b      	ldrb	r3, [r3, #0]
 80017fe:	b2db      	uxtb	r3, r3
 8001800:	2b02      	cmp	r3, #2
 8001802:	d103      	bne.n	800180c <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8001804:	79fb      	ldrb	r3, [r7, #7]
 8001806:	4618      	mov	r0, r3
 8001808:	f7ff ff66 	bl	80016d8 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800180c:	f3ef 8310 	mrs	r3, PRIMASK
 8001810:	60fb      	str	r3, [r7, #12]
  return(result);
 8001812:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001814:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001816:	b672      	cpsid	i
}
 8001818:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 800181a:	2003      	movs	r0, #3
 800181c:	f000 ff83 	bl	8002726 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001820:	4b2f      	ldr	r3, [pc, #188]	; (80018e0 <HW_TS_Start+0x100>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	22ca      	movs	r2, #202	; 0xca
 8001826:	625a      	str	r2, [r3, #36]	; 0x24
 8001828:	4b2d      	ldr	r3, [pc, #180]	; (80018e0 <HW_TS_Start+0x100>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	2253      	movs	r2, #83	; 0x53
 800182e:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8001830:	79fa      	ldrb	r2, [r7, #7]
 8001832:	492a      	ldr	r1, [pc, #168]	; (80018dc <HW_TS_Start+0xfc>)
 8001834:	4613      	mov	r3, r2
 8001836:	005b      	lsls	r3, r3, #1
 8001838:	4413      	add	r3, r2
 800183a:	00db      	lsls	r3, r3, #3
 800183c:	440b      	add	r3, r1
 800183e:	330c      	adds	r3, #12
 8001840:	2202      	movs	r2, #2
 8001842:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8001844:	79fa      	ldrb	r2, [r7, #7]
 8001846:	4925      	ldr	r1, [pc, #148]	; (80018dc <HW_TS_Start+0xfc>)
 8001848:	4613      	mov	r3, r2
 800184a:	005b      	lsls	r3, r3, #1
 800184c:	4413      	add	r3, r2
 800184e:	00db      	lsls	r3, r3, #3
 8001850:	440b      	add	r3, r1
 8001852:	3308      	adds	r3, #8
 8001854:	683a      	ldr	r2, [r7, #0]
 8001856:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8001858:	79fa      	ldrb	r2, [r7, #7]
 800185a:	4920      	ldr	r1, [pc, #128]	; (80018dc <HW_TS_Start+0xfc>)
 800185c:	4613      	mov	r3, r2
 800185e:	005b      	lsls	r3, r3, #1
 8001860:	4413      	add	r3, r2
 8001862:	00db      	lsls	r3, r3, #3
 8001864:	440b      	add	r3, r1
 8001866:	3304      	adds	r3, #4
 8001868:	683a      	ldr	r2, [r7, #0]
 800186a:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 800186c:	79fb      	ldrb	r3, [r7, #7]
 800186e:	4618      	mov	r0, r3
 8001870:	f7ff fb30 	bl	8000ed4 <linkTimer>
 8001874:	4603      	mov	r3, r0
 8001876:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8001878:	4b1a      	ldr	r3, [pc, #104]	; (80018e4 <HW_TS_Start+0x104>)
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 800187e:	4b1a      	ldr	r3, [pc, #104]	; (80018e8 <HW_TS_Start+0x108>)
 8001880:	781b      	ldrb	r3, [r3, #0]
 8001882:	b2db      	uxtb	r3, r3
 8001884:	7c7a      	ldrb	r2, [r7, #17]
 8001886:	429a      	cmp	r2, r3
 8001888:	d002      	beq.n	8001890 <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 800188a:	f7ff fce9 	bl	8001260 <RescheduleTimerList>
 800188e:	e013      	b.n	80018b8 <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8001890:	79fa      	ldrb	r2, [r7, #7]
 8001892:	4912      	ldr	r1, [pc, #72]	; (80018dc <HW_TS_Start+0xfc>)
 8001894:	4613      	mov	r3, r2
 8001896:	005b      	lsls	r3, r3, #1
 8001898:	4413      	add	r3, r2
 800189a:	00db      	lsls	r3, r3, #3
 800189c:	440b      	add	r3, r1
 800189e:	3308      	adds	r3, #8
 80018a0:	6819      	ldr	r1, [r3, #0]
 80018a2:	8a7b      	ldrh	r3, [r7, #18]
 80018a4:	79fa      	ldrb	r2, [r7, #7]
 80018a6:	1ac9      	subs	r1, r1, r3
 80018a8:	480c      	ldr	r0, [pc, #48]	; (80018dc <HW_TS_Start+0xfc>)
 80018aa:	4613      	mov	r3, r2
 80018ac:	005b      	lsls	r3, r3, #1
 80018ae:	4413      	add	r3, r2
 80018b0:	00db      	lsls	r3, r3, #3
 80018b2:	4403      	add	r3, r0
 80018b4:	3308      	adds	r3, #8
 80018b6:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80018b8:	4b09      	ldr	r3, [pc, #36]	; (80018e0 <HW_TS_Start+0x100>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	22ff      	movs	r2, #255	; 0xff
 80018be:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80018c0:	2003      	movs	r0, #3
 80018c2:	f000 ff22 	bl	800270a <HAL_NVIC_EnableIRQ>
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80018ca:	68bb      	ldr	r3, [r7, #8]
 80018cc:	f383 8810 	msr	PRIMASK, r3
}
 80018d0:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80018d2:	bf00      	nop
}
 80018d4:	3718      	adds	r7, #24
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	20000978 	.word	0x20000978
 80018e0:	20000aa8 	.word	0x20000aa8
 80018e4:	20000a08 	.word	0x20000a08
 80018e8:	20000a09 	.word	0x20000a09

080018ec <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b084      	sub	sp, #16
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	60f8      	str	r0, [r7, #12]
 80018f4:	460b      	mov	r3, r1
 80018f6:	607a      	str	r2, [r7, #4]
 80018f8:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	4798      	blx	r3

  return;
 80018fe:	bf00      	nop
}
 8001900:	3710      	adds	r7, #16
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}

08001906 <LL_RCC_LSE_SetDriveCapability>:
{
 8001906:	b480      	push	{r7}
 8001908:	b083      	sub	sp, #12
 800190a:	af00      	add	r7, sp, #0
 800190c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 800190e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001912:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001916:	f023 0218 	bic.w	r2, r3, #24
 800191a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	4313      	orrs	r3, r2
 8001922:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001926:	bf00      	nop
 8001928:	370c      	adds	r7, #12
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr

08001932 <LL_AHB2_GRP1_EnableClock>:
{
 8001932:	b480      	push	{r7}
 8001934:	b085      	sub	sp, #20
 8001936:	af00      	add	r7, sp, #0
 8001938:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800193a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800193e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001940:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	4313      	orrs	r3, r2
 8001948:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800194a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800194e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	4013      	ands	r3, r2
 8001954:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001956:	68fb      	ldr	r3, [r7, #12]
}
 8001958:	bf00      	nop
 800195a:	3714      	adds	r7, #20
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr

08001964 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001968:	f000 fce8 	bl	800233c <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 800196c:	f7fe ffee 	bl	800094c <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001970:	f000 f824 	bl	80019bc <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001974:	f000 f884 	bl	8001a80 <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 8001978:	f000 f8e2 	bl	8001b40 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800197c:	f000 f97e 	bl	8001c7c <MX_GPIO_Init>
  MX_RTC_Init();
 8001980:	f000 f8fa 	bl	8001b78 <MX_RTC_Init>
  MX_I2C1_Init();
 8001984:	f000 f89c 	bl	8001ac0 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8001988:	f000 f92a 	bl	8001be0 <MX_USART1_UART_Init>
  MX_RF_Init();
 800198c:	f000 f8ec 	bl	8001b68 <MX_RF_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 8001990:	f7fe ffea 	bl	8000968 <MX_APPE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_APPE_Process();
 8001994:	f7ff f974 	bl	8000c80 <MX_APPE_Process>

    /* USER CODE BEGIN 3 */

    printf("Hello World\n\r");		//test UART
 8001998:	4805      	ldr	r0, [pc, #20]	; (80019b0 <main+0x4c>)
 800199a:	f007 fd87 	bl	80094ac <iprintf>
    HAL_Delay(1000);				//wait
 800199e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80019a2:	f7ff f948 	bl	8000c36 <HAL_Delay>
    BH1790GLC_init(&hrm, &hi2c1);	//test I2C
 80019a6:	4903      	ldr	r1, [pc, #12]	; (80019b4 <main+0x50>)
 80019a8:	4803      	ldr	r0, [pc, #12]	; (80019b8 <main+0x54>)
 80019aa:	f7fe fdc3 	bl	8000534 <BH1790GLC_init>
    MX_APPE_Process();
 80019ae:	e7f1      	b.n	8001994 <main+0x30>
 80019b0:	0800a3fc 	.word	0x0800a3fc
 80019b4:	20000a18 	.word	0x20000a18
 80019b8:	20000b60 	.word	0x20000b60

080019bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b09a      	sub	sp, #104	; 0x68
 80019c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019c2:	f107 0320 	add.w	r3, r7, #32
 80019c6:	2248      	movs	r2, #72	; 0x48
 80019c8:	2100      	movs	r1, #0
 80019ca:	4618      	mov	r0, r3
 80019cc:	f007 fd66 	bl	800949c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019d0:	1d3b      	adds	r3, r7, #4
 80019d2:	2200      	movs	r2, #0
 80019d4:	601a      	str	r2, [r3, #0]
 80019d6:	605a      	str	r2, [r3, #4]
 80019d8:	609a      	str	r2, [r3, #8]
 80019da:	60da      	str	r2, [r3, #12]
 80019dc:	611a      	str	r2, [r3, #16]
 80019de:	615a      	str	r2, [r3, #20]
 80019e0:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80019e2:	f001 fdc9 	bl	8003578 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 80019e6:	2010      	movs	r0, #16
 80019e8:	f7ff ff8d 	bl	8001906 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80019ec:	4b23      	ldr	r3, [pc, #140]	; (8001a7c <SystemClock_Config+0xc0>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80019f4:	4a21      	ldr	r2, [pc, #132]	; (8001a7c <SystemClock_Config+0xc0>)
 80019f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019fa:	6013      	str	r3, [r2, #0]
 80019fc:	4b1f      	ldr	r3, [pc, #124]	; (8001a7c <SystemClock_Config+0xc0>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001a04:	603b      	str	r3, [r7, #0]
 8001a06:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8001a08:	2327      	movs	r3, #39	; 0x27
 8001a0a:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a0c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a10:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001a12:	2301      	movs	r3, #1
 8001a14:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a16:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a20:	2340      	movs	r3, #64	; 0x40
 8001a22:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001a24:	2300      	movs	r3, #0
 8001a26:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 8001a28:	23a0      	movs	r3, #160	; 0xa0
 8001a2a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a30:	f107 0320 	add.w	r3, r7, #32
 8001a34:	4618      	mov	r0, r3
 8001a36:	f002 f933 	bl	8003ca0 <HAL_RCC_OscConfig>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d001      	beq.n	8001a44 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8001a40:	f000 f988 	bl	8001d54 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8001a44:	236f      	movs	r3, #111	; 0x6f
 8001a46:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a50:	2300      	movs	r3, #0
 8001a52:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a54:	2300      	movs	r3, #0
 8001a56:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001a60:	1d3b      	adds	r3, r7, #4
 8001a62:	2101      	movs	r1, #1
 8001a64:	4618      	mov	r0, r3
 8001a66:	f002 fc8f 	bl	8004388 <HAL_RCC_ClockConfig>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d001      	beq.n	8001a74 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8001a70:	f000 f970 	bl	8001d54 <Error_Handler>
  }
}
 8001a74:	bf00      	nop
 8001a76:	3768      	adds	r7, #104	; 0x68
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	58000400 	.word	0x58000400

08001a80 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b094      	sub	sp, #80	; 0x50
 8001a84:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a86:	463b      	mov	r3, r7
 8001a88:	2250      	movs	r2, #80	; 0x50
 8001a8a:	2100      	movs	r1, #0
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f007 fd05 	bl	800949c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 8001a92:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001a96:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 8001a98:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001a9c:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001aa6:	463b      	mov	r3, r7
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f003 f8aa 	bl	8004c02 <HAL_RCCEx_PeriphCLKConfig>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d001      	beq.n	8001ab8 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8001ab4:	f000 f94e 	bl	8001d54 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8001ab8:	bf00      	nop
 8001aba:	3750      	adds	r7, #80	; 0x50
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}

08001ac0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001ac4:	4b1b      	ldr	r3, [pc, #108]	; (8001b34 <MX_I2C1_Init+0x74>)
 8001ac6:	4a1c      	ldr	r2, [pc, #112]	; (8001b38 <MX_I2C1_Init+0x78>)
 8001ac8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8001aca:	4b1a      	ldr	r3, [pc, #104]	; (8001b34 <MX_I2C1_Init+0x74>)
 8001acc:	4a1b      	ldr	r2, [pc, #108]	; (8001b3c <MX_I2C1_Init+0x7c>)
 8001ace:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001ad0:	4b18      	ldr	r3, [pc, #96]	; (8001b34 <MX_I2C1_Init+0x74>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ad6:	4b17      	ldr	r3, [pc, #92]	; (8001b34 <MX_I2C1_Init+0x74>)
 8001ad8:	2201      	movs	r2, #1
 8001ada:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001adc:	4b15      	ldr	r3, [pc, #84]	; (8001b34 <MX_I2C1_Init+0x74>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001ae2:	4b14      	ldr	r3, [pc, #80]	; (8001b34 <MX_I2C1_Init+0x74>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001ae8:	4b12      	ldr	r3, [pc, #72]	; (8001b34 <MX_I2C1_Init+0x74>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001aee:	4b11      	ldr	r3, [pc, #68]	; (8001b34 <MX_I2C1_Init+0x74>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001af4:	4b0f      	ldr	r3, [pc, #60]	; (8001b34 <MX_I2C1_Init+0x74>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001afa:	480e      	ldr	r0, [pc, #56]	; (8001b34 <MX_I2C1_Init+0x74>)
 8001afc:	f000 fff6 	bl	8002aec <HAL_I2C_Init>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d001      	beq.n	8001b0a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001b06:	f000 f925 	bl	8001d54 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001b0a:	2100      	movs	r1, #0
 8001b0c:	4809      	ldr	r0, [pc, #36]	; (8001b34 <MX_I2C1_Init+0x74>)
 8001b0e:	f001 fc15 	bl	800333c <HAL_I2CEx_ConfigAnalogFilter>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d001      	beq.n	8001b1c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001b18:	f000 f91c 	bl	8001d54 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001b1c:	2100      	movs	r1, #0
 8001b1e:	4805      	ldr	r0, [pc, #20]	; (8001b34 <MX_I2C1_Init+0x74>)
 8001b20:	f001 fc57 	bl	80033d2 <HAL_I2CEx_ConfigDigitalFilter>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d001      	beq.n	8001b2e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001b2a:	f000 f913 	bl	8001d54 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001b2e:	bf00      	nop
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	20000a18 	.word	0x20000a18
 8001b38:	40005400 	.word	0x40005400
 8001b3c:	00707cbb 	.word	0x00707cbb

08001b40 <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8001b44:	4b06      	ldr	r3, [pc, #24]	; (8001b60 <MX_IPCC_Init+0x20>)
 8001b46:	4a07      	ldr	r2, [pc, #28]	; (8001b64 <MX_IPCC_Init+0x24>)
 8001b48:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 8001b4a:	4805      	ldr	r0, [pc, #20]	; (8001b60 <MX_IPCC_Init+0x20>)
 8001b4c:	f001 fc8e 	bl	800346c <HAL_IPCC_Init>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d001      	beq.n	8001b5a <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 8001b56:	f000 f8fd 	bl	8001d54 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 8001b5a:	bf00      	nop
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	20000a6c 	.word	0x20000a6c
 8001b64:	58000c00 	.word	0x58000c00

08001b68 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8001b6c:	bf00      	nop
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr
	...

08001b78 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001b7c:	4b16      	ldr	r3, [pc, #88]	; (8001bd8 <MX_RTC_Init+0x60>)
 8001b7e:	4a17      	ldr	r2, [pc, #92]	; (8001bdc <MX_RTC_Init+0x64>)
 8001b80:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001b82:	4b15      	ldr	r3, [pc, #84]	; (8001bd8 <MX_RTC_Init+0x60>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8001b88:	4b13      	ldr	r3, [pc, #76]	; (8001bd8 <MX_RTC_Init+0x60>)
 8001b8a:	220f      	movs	r2, #15
 8001b8c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8001b8e:	4b12      	ldr	r3, [pc, #72]	; (8001bd8 <MX_RTC_Init+0x60>)
 8001b90:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8001b94:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001b96:	4b10      	ldr	r3, [pc, #64]	; (8001bd8 <MX_RTC_Init+0x60>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001b9c:	4b0e      	ldr	r3, [pc, #56]	; (8001bd8 <MX_RTC_Init+0x60>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001ba2:	4b0d      	ldr	r3, [pc, #52]	; (8001bd8 <MX_RTC_Init+0x60>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001ba8:	4b0b      	ldr	r3, [pc, #44]	; (8001bd8 <MX_RTC_Init+0x60>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001bae:	480a      	ldr	r0, [pc, #40]	; (8001bd8 <MX_RTC_Init+0x60>)
 8001bb0:	f003 faae 	bl	8005110 <HAL_RTC_Init>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d001      	beq.n	8001bbe <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8001bba:	f000 f8cb 	bl	8001d54 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	2100      	movs	r1, #0
 8001bc2:	4805      	ldr	r0, [pc, #20]	; (8001bd8 <MX_RTC_Init+0x60>)
 8001bc4:	f003 fba4 	bl	8005310 <HAL_RTCEx_SetWakeUpTimer_IT>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d001      	beq.n	8001bd2 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8001bce:	f000 f8c1 	bl	8001d54 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001bd2:	bf00      	nop
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	20000aa8 	.word	0x20000aa8
 8001bdc:	40002800 	.word	0x40002800

08001be0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001be4:	4b23      	ldr	r3, [pc, #140]	; (8001c74 <MX_USART1_UART_Init+0x94>)
 8001be6:	4a24      	ldr	r2, [pc, #144]	; (8001c78 <MX_USART1_UART_Init+0x98>)
 8001be8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001bea:	4b22      	ldr	r3, [pc, #136]	; (8001c74 <MX_USART1_UART_Init+0x94>)
 8001bec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001bf0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001bf2:	4b20      	ldr	r3, [pc, #128]	; (8001c74 <MX_USART1_UART_Init+0x94>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001bf8:	4b1e      	ldr	r3, [pc, #120]	; (8001c74 <MX_USART1_UART_Init+0x94>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_ODD;
 8001bfe:	4b1d      	ldr	r3, [pc, #116]	; (8001c74 <MX_USART1_UART_Init+0x94>)
 8001c00:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8001c04:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001c06:	4b1b      	ldr	r3, [pc, #108]	; (8001c74 <MX_USART1_UART_Init+0x94>)
 8001c08:	220c      	movs	r2, #12
 8001c0a:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c0c:	4b19      	ldr	r3, [pc, #100]	; (8001c74 <MX_USART1_UART_Init+0x94>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c12:	4b18      	ldr	r3, [pc, #96]	; (8001c74 <MX_USART1_UART_Init+0x94>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c18:	4b16      	ldr	r3, [pc, #88]	; (8001c74 <MX_USART1_UART_Init+0x94>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001c1e:	4b15      	ldr	r3, [pc, #84]	; (8001c74 <MX_USART1_UART_Init+0x94>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c24:	4b13      	ldr	r3, [pc, #76]	; (8001c74 <MX_USART1_UART_Init+0x94>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001c2a:	4812      	ldr	r0, [pc, #72]	; (8001c74 <MX_USART1_UART_Init+0x94>)
 8001c2c:	f003 fc4c 	bl	80054c8 <HAL_UART_Init>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d001      	beq.n	8001c3a <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8001c36:	f000 f88d 	bl	8001d54 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c3a:	2100      	movs	r1, #0
 8001c3c:	480d      	ldr	r0, [pc, #52]	; (8001c74 <MX_USART1_UART_Init+0x94>)
 8001c3e:	f004 f99b 	bl	8005f78 <HAL_UARTEx_SetTxFifoThreshold>
 8001c42:	4603      	mov	r3, r0
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d001      	beq.n	8001c4c <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8001c48:	f000 f884 	bl	8001d54 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c4c:	2100      	movs	r1, #0
 8001c4e:	4809      	ldr	r0, [pc, #36]	; (8001c74 <MX_USART1_UART_Init+0x94>)
 8001c50:	f004 f9d0 	bl	8005ff4 <HAL_UARTEx_SetRxFifoThreshold>
 8001c54:	4603      	mov	r3, r0
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d001      	beq.n	8001c5e <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 8001c5a:	f000 f87b 	bl	8001d54 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001c5e:	4805      	ldr	r0, [pc, #20]	; (8001c74 <MX_USART1_UART_Init+0x94>)
 8001c60:	f004 f951 	bl	8005f06 <HAL_UARTEx_DisableFifoMode>
 8001c64:	4603      	mov	r3, r0
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d001      	beq.n	8001c6e <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 8001c6a:	f000 f873 	bl	8001d54 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001c6e:	bf00      	nop
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	20000acc 	.word	0x20000acc
 8001c78:	40013800 	.word	0x40013800

08001c7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b086      	sub	sp, #24
 8001c80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c82:	1d3b      	adds	r3, r7, #4
 8001c84:	2200      	movs	r2, #0
 8001c86:	601a      	str	r2, [r3, #0]
 8001c88:	605a      	str	r2, [r3, #4]
 8001c8a:	609a      	str	r2, [r3, #8]
 8001c8c:	60da      	str	r2, [r3, #12]
 8001c8e:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c90:	2004      	movs	r0, #4
 8001c92:	f7ff fe4e 	bl	8001932 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c96:	2002      	movs	r0, #2
 8001c98:	f7ff fe4b 	bl	8001932 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c9c:	2001      	movs	r0, #1
 8001c9e:	f7ff fe48 	bl	8001932 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ca2:	2008      	movs	r0, #8
 8001ca4:	f7ff fe45 	bl	8001932 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 8001ca8:	2200      	movs	r2, #0
 8001caa:	2123      	movs	r1, #35	; 0x23
 8001cac:	481d      	ldr	r0, [pc, #116]	; (8001d24 <MX_GPIO_Init+0xa8>)
 8001cae:	f000 fee1 	bl	8002a74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001cb2:	2310      	movs	r3, #16
 8001cb4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001cbe:	1d3b      	adds	r3, r7, #4
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	4819      	ldr	r0, [pc, #100]	; (8001d28 <MX_GPIO_Init+0xac>)
 8001cc4:	f000 fd66 	bl	8002794 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 8001cc8:	2323      	movs	r3, #35	; 0x23
 8001cca:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cd8:	1d3b      	adds	r3, r7, #4
 8001cda:	4619      	mov	r1, r3
 8001cdc:	4811      	ldr	r0, [pc, #68]	; (8001d24 <MX_GPIO_Init+0xa8>)
 8001cde:	f000 fd59 	bl	8002794 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001ce2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001ce6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ce8:	2302      	movs	r3, #2
 8001cea:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cec:	2300      	movs	r3, #0
 8001cee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8001cf4:	230a      	movs	r3, #10
 8001cf6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cf8:	1d3b      	adds	r3, r7, #4
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d00:	f000 fd48 	bl	8002794 <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 8001d04:	2303      	movs	r3, #3
 8001d06:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d10:	1d3b      	adds	r3, r7, #4
 8001d12:	4619      	mov	r1, r3
 8001d14:	4805      	ldr	r0, [pc, #20]	; (8001d2c <MX_GPIO_Init+0xb0>)
 8001d16:	f000 fd3d 	bl	8002794 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001d1a:	bf00      	nop
 8001d1c:	3718      	adds	r7, #24
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	48000400 	.word	0x48000400
 8001d28:	48000800 	.word	0x48000800
 8001d2c:	48000c00 	.word	0x48000c00

08001d30 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8001d38:	1d39      	adds	r1, r7, #4
 8001d3a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d3e:	2201      	movs	r2, #1
 8001d40:	4803      	ldr	r0, [pc, #12]	; (8001d50 <__io_putchar+0x20>)
 8001d42:	f003 fc11 	bl	8005568 <HAL_UART_Transmit>

  return ch;
 8001d46:	687b      	ldr	r3, [r7, #4]
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	3708      	adds	r7, #8
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	20000acc 	.word	0x20000acc

08001d54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d54:	b480      	push	{r7}
 8001d56:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001d58:	b672      	cpsid	i
}
 8001d5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d5c:	e7fe      	b.n	8001d5c <Error_Handler+0x8>

08001d5e <LL_RCC_EnableRTC>:
{
 8001d5e:	b480      	push	{r7}
 8001d60:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001d62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d6a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d72:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001d76:	bf00      	nop
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr

08001d80 <LL_AHB2_GRP1_EnableClock>:
{
 8001d80:	b480      	push	{r7}
 8001d82:	b085      	sub	sp, #20
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001d88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d8c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001d8e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	4313      	orrs	r3, r2
 8001d96:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001d98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d9c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	4013      	ands	r3, r2
 8001da2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001da4:	68fb      	ldr	r3, [r7, #12]
}
 8001da6:	bf00      	nop
 8001da8:	3714      	adds	r7, #20
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr

08001db2 <LL_AHB3_GRP1_EnableClock>:
{
 8001db2:	b480      	push	{r7}
 8001db4:	b085      	sub	sp, #20
 8001db6:	af00      	add	r7, sp, #0
 8001db8:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8001dba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dbe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001dc0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8001dca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dce:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	4013      	ands	r3, r2
 8001dd4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
}
 8001dd8:	bf00      	nop
 8001dda:	3714      	adds	r7, #20
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de2:	4770      	bx	lr

08001de4 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b085      	sub	sp, #20
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001dec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001df0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001df2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001dfc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e00:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	4013      	ands	r3, r2
 8001e06:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001e08:	68fb      	ldr	r3, [r7, #12]
}
 8001e0a:	bf00      	nop
 8001e0c:	3714      	adds	r7, #20
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr

08001e16 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001e16:	b480      	push	{r7}
 8001e18:	b085      	sub	sp, #20
 8001e1a:	af00      	add	r7, sp, #0
 8001e1c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001e1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e22:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001e24:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001e2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e32:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	4013      	ands	r3, r2
 8001e38:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
}
 8001e3c:	bf00      	nop
 8001e3e:	3714      	adds	r7, #20
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr

08001e48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8001e4c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001e50:	f7ff ffaf 	bl	8001db2 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8001e54:	2200      	movs	r2, #0
 8001e56:	2100      	movs	r1, #0
 8001e58:	202e      	movs	r0, #46	; 0x2e
 8001e5a:	f000 fc3c 	bl	80026d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8001e5e:	202e      	movs	r0, #46	; 0x2e
 8001e60:	f000 fc53 	bl	800270a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e64:	bf00      	nop
 8001e66:	bd80      	pop	{r7, pc}

08001e68 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b09c      	sub	sp, #112	; 0x70
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e70:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001e74:	2200      	movs	r2, #0
 8001e76:	601a      	str	r2, [r3, #0]
 8001e78:	605a      	str	r2, [r3, #4]
 8001e7a:	609a      	str	r2, [r3, #8]
 8001e7c:	60da      	str	r2, [r3, #12]
 8001e7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e80:	f107 030c 	add.w	r3, r7, #12
 8001e84:	2250      	movs	r2, #80	; 0x50
 8001e86:	2100      	movs	r1, #0
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f007 fb07 	bl	800949c <memset>
  if(hi2c->Instance==I2C1)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4a1b      	ldr	r2, [pc, #108]	; (8001f00 <HAL_I2C_MspInit+0x98>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d12e      	bne.n	8001ef6 <HAL_I2C_MspInit+0x8e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001e98:	2304      	movs	r3, #4
 8001e9a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001e9c:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8001ea0:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ea2:	f107 030c 	add.w	r3, r7, #12
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f002 feab 	bl	8004c02 <HAL_RCCEx_PeriphCLKConfig>
 8001eac:	4603      	mov	r3, r0
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d001      	beq.n	8001eb6 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001eb2:	f7ff ff4f 	bl	8001d54 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eb6:	2002      	movs	r0, #2
 8001eb8:	f7ff ff62 	bl	8001d80 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001ebc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001ec0:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ec2:	2312      	movs	r3, #18
 8001ec4:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001ece:	2304      	movs	r3, #4
 8001ed0:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ed2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	480a      	ldr	r0, [pc, #40]	; (8001f04 <HAL_I2C_MspInit+0x9c>)
 8001eda:	f000 fc5b 	bl	8002794 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ede:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001ee2:	f7ff ff7f 	bl	8001de4 <LL_APB1_GRP1_EnableClock>
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	2100      	movs	r1, #0
 8001eea:	201e      	movs	r0, #30
 8001eec:	f000 fbf3 	bl	80026d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001ef0:	201e      	movs	r0, #30
 8001ef2:	f000 fc0a 	bl	800270a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001ef6:	bf00      	nop
 8001ef8:	3770      	adds	r7, #112	; 0x70
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	40005400 	.word	0x40005400
 8001f04:	48000400 	.word	0x48000400

08001f08 <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b082      	sub	sp, #8
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a0d      	ldr	r2, [pc, #52]	; (8001f4c <HAL_IPCC_MspInit+0x44>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d113      	bne.n	8001f42 <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8001f1a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001f1e:	f7ff ff48 	bl	8001db2 <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 8001f22:	2200      	movs	r2, #0
 8001f24:	2100      	movs	r1, #0
 8001f26:	202c      	movs	r0, #44	; 0x2c
 8001f28:	f000 fbd5 	bl	80026d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8001f2c:	202c      	movs	r0, #44	; 0x2c
 8001f2e:	f000 fbec 	bl	800270a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 8001f32:	2200      	movs	r2, #0
 8001f34:	2100      	movs	r1, #0
 8001f36:	202d      	movs	r0, #45	; 0x2d
 8001f38:	f000 fbcd 	bl	80026d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8001f3c:	202d      	movs	r0, #45	; 0x2d
 8001f3e:	f000 fbe4 	bl	800270a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 8001f42:	bf00      	nop
 8001f44:	3708      	adds	r7, #8
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	58000c00 	.word	0x58000c00

08001f50 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b096      	sub	sp, #88	; 0x58
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f58:	f107 0308 	add.w	r3, r7, #8
 8001f5c:	2250      	movs	r2, #80	; 0x50
 8001f5e:	2100      	movs	r1, #0
 8001f60:	4618      	mov	r0, r3
 8001f62:	f007 fa9b 	bl	800949c <memset>
  if(hrtc->Instance==RTC)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a12      	ldr	r2, [pc, #72]	; (8001fb4 <HAL_RTC_MspInit+0x64>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d11d      	bne.n	8001fac <HAL_RTC_MspInit+0x5c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001f70:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001f74:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001f76:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f7a:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f7c:	f107 0308 	add.w	r3, r7, #8
 8001f80:	4618      	mov	r0, r3
 8001f82:	f002 fe3e 	bl	8004c02 <HAL_RCCEx_PeriphCLKConfig>
 8001f86:	4603      	mov	r3, r0
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d001      	beq.n	8001f90 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001f8c:	f7ff fee2 	bl	8001d54 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001f90:	f7ff fee5 	bl	8001d5e <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001f94:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001f98:	f7ff ff24 	bl	8001de4 <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	2100      	movs	r1, #0
 8001fa0:	2003      	movs	r0, #3
 8001fa2:	f000 fb98 	bl	80026d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8001fa6:	2003      	movs	r0, #3
 8001fa8:	f000 fbaf 	bl	800270a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001fac:	bf00      	nop
 8001fae:	3758      	adds	r7, #88	; 0x58
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	40002800 	.word	0x40002800

08001fb8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b09c      	sub	sp, #112	; 0x70
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fc0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	601a      	str	r2, [r3, #0]
 8001fc8:	605a      	str	r2, [r3, #4]
 8001fca:	609a      	str	r2, [r3, #8]
 8001fcc:	60da      	str	r2, [r3, #12]
 8001fce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001fd0:	f107 030c 	add.w	r3, r7, #12
 8001fd4:	2250      	movs	r2, #80	; 0x50
 8001fd6:	2100      	movs	r1, #0
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f007 fa5f 	bl	800949c <memset>
  if(huart->Instance==USART1)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a16      	ldr	r2, [pc, #88]	; (800203c <HAL_UART_MspInit+0x84>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d124      	bne.n	8002032 <HAL_UART_MspInit+0x7a>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001fec:	2300      	movs	r3, #0
 8001fee:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ff0:	f107 030c 	add.w	r3, r7, #12
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f002 fe04 	bl	8004c02 <HAL_RCCEx_PeriphCLKConfig>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d001      	beq.n	8002004 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002000:	f7ff fea8 	bl	8001d54 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002004:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002008:	f7ff ff05 	bl	8001e16 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800200c:	2002      	movs	r0, #2
 800200e:	f7ff feb7 	bl	8001d80 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8002012:	23c0      	movs	r3, #192	; 0xc0
 8002014:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002016:	2302      	movs	r3, #2
 8002018:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800201a:	2300      	movs	r3, #0
 800201c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800201e:	2300      	movs	r3, #0
 8002020:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002022:	2307      	movs	r3, #7
 8002024:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002026:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800202a:	4619      	mov	r1, r3
 800202c:	4804      	ldr	r0, [pc, #16]	; (8002040 <HAL_UART_MspInit+0x88>)
 800202e:	f000 fbb1 	bl	8002794 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002032:	bf00      	nop
 8002034:	3770      	adds	r7, #112	; 0x70
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	40013800 	.word	0x40013800
 8002040:	48000400 	.word	0x48000400

08002044 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002044:	b480      	push	{r7}
 8002046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002048:	e7fe      	b.n	8002048 <NMI_Handler+0x4>

0800204a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800204a:	b480      	push	{r7}
 800204c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800204e:	e7fe      	b.n	800204e <HardFault_Handler+0x4>

08002050 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002050:	b480      	push	{r7}
 8002052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002054:	e7fe      	b.n	8002054 <MemManage_Handler+0x4>

08002056 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002056:	b480      	push	{r7}
 8002058:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800205a:	e7fe      	b.n	800205a <BusFault_Handler+0x4>

0800205c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800205c:	b480      	push	{r7}
 800205e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002060:	e7fe      	b.n	8002060 <UsageFault_Handler+0x4>

08002062 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002062:	b480      	push	{r7}
 8002064:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002066:	bf00      	nop
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr

08002070 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002070:	b480      	push	{r7}
 8002072:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002074:	bf00      	nop
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr

0800207e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800207e:	b480      	push	{r7}
 8002080:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002082:	bf00      	nop
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr

0800208c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002090:	f000 f9ae 	bl	80023f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002094:	bf00      	nop
 8002096:	bd80      	pop	{r7, pc}

08002098 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 800209c:	f7ff f97a 	bl	8001394 <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 80020a0:	bf00      	nop
 80020a2:	bd80      	pop	{r7, pc}

080020a4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80020a8:	4802      	ldr	r0, [pc, #8]	; (80020b4 <I2C1_EV_IRQHandler+0x10>)
 80020aa:	f000 fec9 	bl	8002e40 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80020ae:	bf00      	nop
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	20000a18 	.word	0x20000a18

080020b8 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 80020bc:	f006 fdf2 	bl	8008ca4 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 80020c0:	bf00      	nop
 80020c2:	bd80      	pop	{r7, pc}

080020c4 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 80020c8:	f006 fe24 	bl	8008d14 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 80020cc:	bf00      	nop
 80020ce:	bd80      	pop	{r7, pc}

080020d0 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 80020d4:	f000 fce6 	bl	8002aa4 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 80020d8:	bf00      	nop
 80020da:	bd80      	pop	{r7, pc}

080020dc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b086      	sub	sp, #24
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	60f8      	str	r0, [r7, #12]
 80020e4:	60b9      	str	r1, [r7, #8]
 80020e6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020e8:	2300      	movs	r3, #0
 80020ea:	617b      	str	r3, [r7, #20]
 80020ec:	e00a      	b.n	8002104 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80020ee:	f3af 8000 	nop.w
 80020f2:	4601      	mov	r1, r0
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	1c5a      	adds	r2, r3, #1
 80020f8:	60ba      	str	r2, [r7, #8]
 80020fa:	b2ca      	uxtb	r2, r1
 80020fc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	3301      	adds	r3, #1
 8002102:	617b      	str	r3, [r7, #20]
 8002104:	697a      	ldr	r2, [r7, #20]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	429a      	cmp	r2, r3
 800210a:	dbf0      	blt.n	80020ee <_read+0x12>
  }

  return len;
 800210c:	687b      	ldr	r3, [r7, #4]
}
 800210e:	4618      	mov	r0, r3
 8002110:	3718      	adds	r7, #24
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}

08002116 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002116:	b580      	push	{r7, lr}
 8002118:	b086      	sub	sp, #24
 800211a:	af00      	add	r7, sp, #0
 800211c:	60f8      	str	r0, [r7, #12]
 800211e:	60b9      	str	r1, [r7, #8]
 8002120:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002122:	2300      	movs	r3, #0
 8002124:	617b      	str	r3, [r7, #20]
 8002126:	e009      	b.n	800213c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	1c5a      	adds	r2, r3, #1
 800212c:	60ba      	str	r2, [r7, #8]
 800212e:	781b      	ldrb	r3, [r3, #0]
 8002130:	4618      	mov	r0, r3
 8002132:	f7ff fdfd 	bl	8001d30 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	3301      	adds	r3, #1
 800213a:	617b      	str	r3, [r7, #20]
 800213c:	697a      	ldr	r2, [r7, #20]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	429a      	cmp	r2, r3
 8002142:	dbf1      	blt.n	8002128 <_write+0x12>
  }
  return len;
 8002144:	687b      	ldr	r3, [r7, #4]
}
 8002146:	4618      	mov	r0, r3
 8002148:	3718      	adds	r7, #24
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}

0800214e <_close>:

int _close(int file)
{
 800214e:	b480      	push	{r7}
 8002150:	b083      	sub	sp, #12
 8002152:	af00      	add	r7, sp, #0
 8002154:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002156:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800215a:	4618      	mov	r0, r3
 800215c:	370c      	adds	r7, #12
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr

08002166 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002166:	b480      	push	{r7}
 8002168:	b083      	sub	sp, #12
 800216a:	af00      	add	r7, sp, #0
 800216c:	6078      	str	r0, [r7, #4]
 800216e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002176:	605a      	str	r2, [r3, #4]
  return 0;
 8002178:	2300      	movs	r3, #0
}
 800217a:	4618      	mov	r0, r3
 800217c:	370c      	adds	r7, #12
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr

08002186 <_isatty>:

int _isatty(int file)
{
 8002186:	b480      	push	{r7}
 8002188:	b083      	sub	sp, #12
 800218a:	af00      	add	r7, sp, #0
 800218c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800218e:	2301      	movs	r3, #1
}
 8002190:	4618      	mov	r0, r3
 8002192:	370c      	adds	r7, #12
 8002194:	46bd      	mov	sp, r7
 8002196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219a:	4770      	bx	lr

0800219c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800219c:	b480      	push	{r7}
 800219e:	b085      	sub	sp, #20
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	60f8      	str	r0, [r7, #12]
 80021a4:	60b9      	str	r1, [r7, #8]
 80021a6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80021a8:	2300      	movs	r3, #0
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	3714      	adds	r7, #20
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr
	...

080021b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b086      	sub	sp, #24
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021c0:	4a14      	ldr	r2, [pc, #80]	; (8002214 <_sbrk+0x5c>)
 80021c2:	4b15      	ldr	r3, [pc, #84]	; (8002218 <_sbrk+0x60>)
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021cc:	4b13      	ldr	r3, [pc, #76]	; (800221c <_sbrk+0x64>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d102      	bne.n	80021da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021d4:	4b11      	ldr	r3, [pc, #68]	; (800221c <_sbrk+0x64>)
 80021d6:	4a12      	ldr	r2, [pc, #72]	; (8002220 <_sbrk+0x68>)
 80021d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021da:	4b10      	ldr	r3, [pc, #64]	; (800221c <_sbrk+0x64>)
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	4413      	add	r3, r2
 80021e2:	693a      	ldr	r2, [r7, #16]
 80021e4:	429a      	cmp	r2, r3
 80021e6:	d207      	bcs.n	80021f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021e8:	f007 f920 	bl	800942c <__errno>
 80021ec:	4603      	mov	r3, r0
 80021ee:	220c      	movs	r2, #12
 80021f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80021f6:	e009      	b.n	800220c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021f8:	4b08      	ldr	r3, [pc, #32]	; (800221c <_sbrk+0x64>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021fe:	4b07      	ldr	r3, [pc, #28]	; (800221c <_sbrk+0x64>)
 8002200:	681a      	ldr	r2, [r3, #0]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	4413      	add	r3, r2
 8002206:	4a05      	ldr	r2, [pc, #20]	; (800221c <_sbrk+0x64>)
 8002208:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800220a:	68fb      	ldr	r3, [r7, #12]
}
 800220c:	4618      	mov	r0, r3
 800220e:	3718      	adds	r7, #24
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}
 8002214:	20030000 	.word	0x20030000
 8002218:	00000400 	.word	0x00000400
 800221c:	20000b74 	.word	0x20000b74
 8002220:	20000d38 	.word	0x20000d38

08002224 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002224:	b480      	push	{r7}
 8002226:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8002228:	4b24      	ldr	r3, [pc, #144]	; (80022bc <SystemInit+0x98>)
 800222a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800222e:	4a23      	ldr	r2, [pc, #140]	; (80022bc <SystemInit+0x98>)
 8002230:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002234:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002238:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002242:	f043 0301 	orr.w	r3, r3, #1
 8002246:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8002248:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800224c:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8002250:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8002252:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800225c:	4b18      	ldr	r3, [pc, #96]	; (80022c0 <SystemInit+0x9c>)
 800225e:	4013      	ands	r3, r2
 8002260:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8002262:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002266:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800226a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800226e:	f023 0305 	bic.w	r3, r3, #5
 8002272:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8002276:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800227a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800227e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002282:	f023 0301 	bic.w	r3, r3, #1
 8002286:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 800228a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800228e:	4a0d      	ldr	r2, [pc, #52]	; (80022c4 <SystemInit+0xa0>)
 8002290:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8002292:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002296:	4a0b      	ldr	r2, [pc, #44]	; (80022c4 <SystemInit+0xa0>)
 8002298:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800229a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80022a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022a8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80022aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022ae:	2200      	movs	r2, #0
 80022b0:	619a      	str	r2, [r3, #24]
}
 80022b2:	bf00      	nop
 80022b4:	46bd      	mov	sp, r7
 80022b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ba:	4770      	bx	lr
 80022bc:	e000ed00 	.word	0xe000ed00
 80022c0:	faf6fefb 	.word	0xfaf6fefb
 80022c4:	22041000 	.word	0x22041000

080022c8 <CopyDataInit>:
 80022c8:	58d4      	ldr	r4, [r2, r3]
 80022ca:	50c4      	str	r4, [r0, r3]
 80022cc:	3304      	adds	r3, #4

080022ce <LoopCopyDataInit>:
 80022ce:	18c4      	adds	r4, r0, r3
 80022d0:	428c      	cmp	r4, r1
 80022d2:	d3f9      	bcc.n	80022c8 <CopyDataInit>
 80022d4:	4770      	bx	lr

080022d6 <FillZerobss>:
 80022d6:	6003      	str	r3, [r0, #0]
 80022d8:	3004      	adds	r0, #4

080022da <LoopFillZerobss>:
 80022da:	4288      	cmp	r0, r1
 80022dc:	d3fb      	bcc.n	80022d6 <FillZerobss>
 80022de:	4770      	bx	lr

080022e0 <Reset_Handler>:
 80022e0:	480c      	ldr	r0, [pc, #48]	; (8002314 <LoopForever+0x2>)
 80022e2:	4685      	mov	sp, r0
 80022e4:	f7ff ff9e 	bl	8002224 <SystemInit>
 80022e8:	480b      	ldr	r0, [pc, #44]	; (8002318 <LoopForever+0x6>)
 80022ea:	490c      	ldr	r1, [pc, #48]	; (800231c <LoopForever+0xa>)
 80022ec:	4a0c      	ldr	r2, [pc, #48]	; (8002320 <LoopForever+0xe>)
 80022ee:	2300      	movs	r3, #0
 80022f0:	f7ff ffed 	bl	80022ce <LoopCopyDataInit>
 80022f4:	480b      	ldr	r0, [pc, #44]	; (8002324 <LoopForever+0x12>)
 80022f6:	490c      	ldr	r1, [pc, #48]	; (8002328 <LoopForever+0x16>)
 80022f8:	4a0c      	ldr	r2, [pc, #48]	; (800232c <LoopForever+0x1a>)
 80022fa:	2300      	movs	r3, #0
 80022fc:	f7ff ffe7 	bl	80022ce <LoopCopyDataInit>
 8002300:	480b      	ldr	r0, [pc, #44]	; (8002330 <LoopForever+0x1e>)
 8002302:	490c      	ldr	r1, [pc, #48]	; (8002334 <LoopForever+0x22>)
 8002304:	2300      	movs	r3, #0
 8002306:	f7ff ffe8 	bl	80022da <LoopFillZerobss>
 800230a:	f007 f895 	bl	8009438 <__libc_init_array>
 800230e:	f7ff fb29 	bl	8001964 <main>

08002312 <LoopForever>:
 8002312:	e7fe      	b.n	8002312 <LoopForever>
 8002314:	20030000 	.word	0x20030000
 8002318:	20000008 	.word	0x20000008
 800231c:	2000008c 	.word	0x2000008c
 8002320:	0800a758 	.word	0x0800a758
 8002324:	200301e3 	.word	0x200301e3
 8002328:	200301e3 	.word	0x200301e3
 800232c:	0800b0a5 	.word	0x0800b0a5
 8002330:	2000095c 	.word	0x2000095c
 8002334:	20000d38 	.word	0x20000d38

08002338 <ADC1_IRQHandler>:
 8002338:	e7fe      	b.n	8002338 <ADC1_IRQHandler>
	...

0800233c <HAL_Init>:
 800233c:	b580      	push	{r7, lr}
 800233e:	b082      	sub	sp, #8
 8002340:	af00      	add	r7, sp, #0
 8002342:	2300      	movs	r3, #0
 8002344:	71fb      	strb	r3, [r7, #7]
 8002346:	4b0c      	ldr	r3, [pc, #48]	; (8002378 <HAL_Init+0x3c>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a0b      	ldr	r2, [pc, #44]	; (8002378 <HAL_Init+0x3c>)
 800234c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002350:	6013      	str	r3, [r2, #0]
 8002352:	2003      	movs	r0, #3
 8002354:	f000 f9b4 	bl	80026c0 <HAL_NVIC_SetPriorityGrouping>
 8002358:	2000      	movs	r0, #0
 800235a:	f000 f80f 	bl	800237c <HAL_InitTick>
 800235e:	4603      	mov	r3, r0
 8002360:	2b00      	cmp	r3, #0
 8002362:	d002      	beq.n	800236a <HAL_Init+0x2e>
 8002364:	2301      	movs	r3, #1
 8002366:	71fb      	strb	r3, [r7, #7]
 8002368:	e001      	b.n	800236e <HAL_Init+0x32>
 800236a:	f7ff fd6d 	bl	8001e48 <HAL_MspInit>
 800236e:	79fb      	ldrb	r3, [r7, #7]
 8002370:	4618      	mov	r0, r3
 8002372:	3708      	adds	r7, #8
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}
 8002378:	58004000 	.word	0x58004000

0800237c <HAL_InitTick>:
 800237c:	b580      	push	{r7, lr}
 800237e:	b084      	sub	sp, #16
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
 8002384:	2300      	movs	r3, #0
 8002386:	73fb      	strb	r3, [r7, #15]
 8002388:	4b17      	ldr	r3, [pc, #92]	; (80023e8 <HAL_InitTick+0x6c>)
 800238a:	781b      	ldrb	r3, [r3, #0]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d024      	beq.n	80023da <HAL_InitTick+0x5e>
 8002390:	f002 f9a6 	bl	80046e0 <HAL_RCC_GetHCLKFreq>
 8002394:	4602      	mov	r2, r0
 8002396:	4b14      	ldr	r3, [pc, #80]	; (80023e8 <HAL_InitTick+0x6c>)
 8002398:	781b      	ldrb	r3, [r3, #0]
 800239a:	4619      	mov	r1, r3
 800239c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023a0:	fbb3 f3f1 	udiv	r3, r3, r1
 80023a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80023a8:	4618      	mov	r0, r3
 80023aa:	f000 f9ca 	bl	8002742 <HAL_SYSTICK_Config>
 80023ae:	4603      	mov	r3, r0
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d10f      	bne.n	80023d4 <HAL_InitTick+0x58>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2b0f      	cmp	r3, #15
 80023b8:	d809      	bhi.n	80023ce <HAL_InitTick+0x52>
 80023ba:	2200      	movs	r2, #0
 80023bc:	6879      	ldr	r1, [r7, #4]
 80023be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80023c2:	f000 f988 	bl	80026d6 <HAL_NVIC_SetPriority>
 80023c6:	4a09      	ldr	r2, [pc, #36]	; (80023ec <HAL_InitTick+0x70>)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6013      	str	r3, [r2, #0]
 80023cc:	e007      	b.n	80023de <HAL_InitTick+0x62>
 80023ce:	2301      	movs	r3, #1
 80023d0:	73fb      	strb	r3, [r7, #15]
 80023d2:	e004      	b.n	80023de <HAL_InitTick+0x62>
 80023d4:	2301      	movs	r3, #1
 80023d6:	73fb      	strb	r3, [r7, #15]
 80023d8:	e001      	b.n	80023de <HAL_InitTick+0x62>
 80023da:	2301      	movs	r3, #1
 80023dc:	73fb      	strb	r3, [r7, #15]
 80023de:	7bfb      	ldrb	r3, [r7, #15]
 80023e0:	4618      	mov	r0, r3
 80023e2:	3710      	adds	r7, #16
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}
 80023e8:	20000010 	.word	0x20000010
 80023ec:	2000000c 	.word	0x2000000c

080023f0 <HAL_IncTick>:
 80023f0:	b480      	push	{r7}
 80023f2:	af00      	add	r7, sp, #0
 80023f4:	4b06      	ldr	r3, [pc, #24]	; (8002410 <HAL_IncTick+0x20>)
 80023f6:	781b      	ldrb	r3, [r3, #0]
 80023f8:	461a      	mov	r2, r3
 80023fa:	4b06      	ldr	r3, [pc, #24]	; (8002414 <HAL_IncTick+0x24>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4413      	add	r3, r2
 8002400:	4a04      	ldr	r2, [pc, #16]	; (8002414 <HAL_IncTick+0x24>)
 8002402:	6013      	str	r3, [r2, #0]
 8002404:	bf00      	nop
 8002406:	46bd      	mov	sp, r7
 8002408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240c:	4770      	bx	lr
 800240e:	bf00      	nop
 8002410:	20000010 	.word	0x20000010
 8002414:	20000b78 	.word	0x20000b78

08002418 <HAL_GetTick>:
 8002418:	b480      	push	{r7}
 800241a:	af00      	add	r7, sp, #0
 800241c:	4b03      	ldr	r3, [pc, #12]	; (800242c <HAL_GetTick+0x14>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4618      	mov	r0, r3
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr
 800242a:	bf00      	nop
 800242c:	20000b78 	.word	0x20000b78

08002430 <HAL_GetTickPrio>:
 8002430:	b480      	push	{r7}
 8002432:	af00      	add	r7, sp, #0
 8002434:	4b03      	ldr	r3, [pc, #12]	; (8002444 <HAL_GetTickPrio+0x14>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4618      	mov	r0, r3
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr
 8002442:	bf00      	nop
 8002444:	2000000c 	.word	0x2000000c

08002448 <HAL_GetTickFreq>:
 8002448:	b480      	push	{r7}
 800244a:	af00      	add	r7, sp, #0
 800244c:	4b03      	ldr	r3, [pc, #12]	; (800245c <HAL_GetTickFreq+0x14>)
 800244e:	781b      	ldrb	r3, [r3, #0]
 8002450:	4618      	mov	r0, r3
 8002452:	46bd      	mov	sp, r7
 8002454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002458:	4770      	bx	lr
 800245a:	bf00      	nop
 800245c:	20000010 	.word	0x20000010

08002460 <__NVIC_SetPriorityGrouping>:
 8002460:	b480      	push	{r7}
 8002462:	b085      	sub	sp, #20
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	f003 0307 	and.w	r3, r3, #7
 800246e:	60fb      	str	r3, [r7, #12]
 8002470:	4b0c      	ldr	r3, [pc, #48]	; (80024a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002472:	68db      	ldr	r3, [r3, #12]
 8002474:	60bb      	str	r3, [r7, #8]
 8002476:	68ba      	ldr	r2, [r7, #8]
 8002478:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800247c:	4013      	ands	r3, r2
 800247e:	60bb      	str	r3, [r7, #8]
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	021a      	lsls	r2, r3, #8
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	4313      	orrs	r3, r2
 8002488:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800248c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002490:	60bb      	str	r3, [r7, #8]
 8002492:	4a04      	ldr	r2, [pc, #16]	; (80024a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	60d3      	str	r3, [r2, #12]
 8002498:	bf00      	nop
 800249a:	3714      	adds	r7, #20
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr
 80024a4:	e000ed00 	.word	0xe000ed00

080024a8 <__NVIC_GetPriorityGrouping>:
 80024a8:	b480      	push	{r7}
 80024aa:	af00      	add	r7, sp, #0
 80024ac:	4b04      	ldr	r3, [pc, #16]	; (80024c0 <__NVIC_GetPriorityGrouping+0x18>)
 80024ae:	68db      	ldr	r3, [r3, #12]
 80024b0:	0a1b      	lsrs	r3, r3, #8
 80024b2:	f003 0307 	and.w	r3, r3, #7
 80024b6:	4618      	mov	r0, r3
 80024b8:	46bd      	mov	sp, r7
 80024ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024be:	4770      	bx	lr
 80024c0:	e000ed00 	.word	0xe000ed00

080024c4 <__NVIC_EnableIRQ>:
 80024c4:	b480      	push	{r7}
 80024c6:	b083      	sub	sp, #12
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	4603      	mov	r3, r0
 80024cc:	71fb      	strb	r3, [r7, #7]
 80024ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	db0b      	blt.n	80024ee <__NVIC_EnableIRQ+0x2a>
 80024d6:	79fb      	ldrb	r3, [r7, #7]
 80024d8:	f003 021f 	and.w	r2, r3, #31
 80024dc:	4907      	ldr	r1, [pc, #28]	; (80024fc <__NVIC_EnableIRQ+0x38>)
 80024de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024e2:	095b      	lsrs	r3, r3, #5
 80024e4:	2001      	movs	r0, #1
 80024e6:	fa00 f202 	lsl.w	r2, r0, r2
 80024ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80024ee:	bf00      	nop
 80024f0:	370c      	adds	r7, #12
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr
 80024fa:	bf00      	nop
 80024fc:	e000e100 	.word	0xe000e100

08002500 <__NVIC_DisableIRQ>:
 8002500:	b480      	push	{r7}
 8002502:	b083      	sub	sp, #12
 8002504:	af00      	add	r7, sp, #0
 8002506:	4603      	mov	r3, r0
 8002508:	71fb      	strb	r3, [r7, #7]
 800250a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800250e:	2b00      	cmp	r3, #0
 8002510:	db12      	blt.n	8002538 <__NVIC_DisableIRQ+0x38>
 8002512:	79fb      	ldrb	r3, [r7, #7]
 8002514:	f003 021f 	and.w	r2, r3, #31
 8002518:	490a      	ldr	r1, [pc, #40]	; (8002544 <__NVIC_DisableIRQ+0x44>)
 800251a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800251e:	095b      	lsrs	r3, r3, #5
 8002520:	2001      	movs	r0, #1
 8002522:	fa00 f202 	lsl.w	r2, r0, r2
 8002526:	3320      	adds	r3, #32
 8002528:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800252c:	f3bf 8f4f 	dsb	sy
 8002530:	bf00      	nop
 8002532:	f3bf 8f6f 	isb	sy
 8002536:	bf00      	nop
 8002538:	bf00      	nop
 800253a:	370c      	adds	r7, #12
 800253c:	46bd      	mov	sp, r7
 800253e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002542:	4770      	bx	lr
 8002544:	e000e100 	.word	0xe000e100

08002548 <__NVIC_SetPendingIRQ>:
 8002548:	b480      	push	{r7}
 800254a:	b083      	sub	sp, #12
 800254c:	af00      	add	r7, sp, #0
 800254e:	4603      	mov	r3, r0
 8002550:	71fb      	strb	r3, [r7, #7]
 8002552:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002556:	2b00      	cmp	r3, #0
 8002558:	db0c      	blt.n	8002574 <__NVIC_SetPendingIRQ+0x2c>
 800255a:	79fb      	ldrb	r3, [r7, #7]
 800255c:	f003 021f 	and.w	r2, r3, #31
 8002560:	4907      	ldr	r1, [pc, #28]	; (8002580 <__NVIC_SetPendingIRQ+0x38>)
 8002562:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002566:	095b      	lsrs	r3, r3, #5
 8002568:	2001      	movs	r0, #1
 800256a:	fa00 f202 	lsl.w	r2, r0, r2
 800256e:	3340      	adds	r3, #64	; 0x40
 8002570:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8002574:	bf00      	nop
 8002576:	370c      	adds	r7, #12
 8002578:	46bd      	mov	sp, r7
 800257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257e:	4770      	bx	lr
 8002580:	e000e100 	.word	0xe000e100

08002584 <__NVIC_ClearPendingIRQ>:
 8002584:	b480      	push	{r7}
 8002586:	b083      	sub	sp, #12
 8002588:	af00      	add	r7, sp, #0
 800258a:	4603      	mov	r3, r0
 800258c:	71fb      	strb	r3, [r7, #7]
 800258e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002592:	2b00      	cmp	r3, #0
 8002594:	db0c      	blt.n	80025b0 <__NVIC_ClearPendingIRQ+0x2c>
 8002596:	79fb      	ldrb	r3, [r7, #7]
 8002598:	f003 021f 	and.w	r2, r3, #31
 800259c:	4907      	ldr	r1, [pc, #28]	; (80025bc <__NVIC_ClearPendingIRQ+0x38>)
 800259e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025a2:	095b      	lsrs	r3, r3, #5
 80025a4:	2001      	movs	r0, #1
 80025a6:	fa00 f202 	lsl.w	r2, r0, r2
 80025aa:	3360      	adds	r3, #96	; 0x60
 80025ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80025b0:	bf00      	nop
 80025b2:	370c      	adds	r7, #12
 80025b4:	46bd      	mov	sp, r7
 80025b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ba:	4770      	bx	lr
 80025bc:	e000e100 	.word	0xe000e100

080025c0 <__NVIC_SetPriority>:
 80025c0:	b480      	push	{r7}
 80025c2:	b083      	sub	sp, #12
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	4603      	mov	r3, r0
 80025c8:	6039      	str	r1, [r7, #0]
 80025ca:	71fb      	strb	r3, [r7, #7]
 80025cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	db0a      	blt.n	80025ea <__NVIC_SetPriority+0x2a>
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	b2da      	uxtb	r2, r3
 80025d8:	490c      	ldr	r1, [pc, #48]	; (800260c <__NVIC_SetPriority+0x4c>)
 80025da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025de:	0112      	lsls	r2, r2, #4
 80025e0:	b2d2      	uxtb	r2, r2
 80025e2:	440b      	add	r3, r1
 80025e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 80025e8:	e00a      	b.n	8002600 <__NVIC_SetPriority+0x40>
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	b2da      	uxtb	r2, r3
 80025ee:	4908      	ldr	r1, [pc, #32]	; (8002610 <__NVIC_SetPriority+0x50>)
 80025f0:	79fb      	ldrb	r3, [r7, #7]
 80025f2:	f003 030f 	and.w	r3, r3, #15
 80025f6:	3b04      	subs	r3, #4
 80025f8:	0112      	lsls	r2, r2, #4
 80025fa:	b2d2      	uxtb	r2, r2
 80025fc:	440b      	add	r3, r1
 80025fe:	761a      	strb	r2, [r3, #24]
 8002600:	bf00      	nop
 8002602:	370c      	adds	r7, #12
 8002604:	46bd      	mov	sp, r7
 8002606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260a:	4770      	bx	lr
 800260c:	e000e100 	.word	0xe000e100
 8002610:	e000ed00 	.word	0xe000ed00

08002614 <NVIC_EncodePriority>:
 8002614:	b480      	push	{r7}
 8002616:	b089      	sub	sp, #36	; 0x24
 8002618:	af00      	add	r7, sp, #0
 800261a:	60f8      	str	r0, [r7, #12]
 800261c:	60b9      	str	r1, [r7, #8]
 800261e:	607a      	str	r2, [r7, #4]
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	f003 0307 	and.w	r3, r3, #7
 8002626:	61fb      	str	r3, [r7, #28]
 8002628:	69fb      	ldr	r3, [r7, #28]
 800262a:	f1c3 0307 	rsb	r3, r3, #7
 800262e:	2b04      	cmp	r3, #4
 8002630:	bf28      	it	cs
 8002632:	2304      	movcs	r3, #4
 8002634:	61bb      	str	r3, [r7, #24]
 8002636:	69fb      	ldr	r3, [r7, #28]
 8002638:	3304      	adds	r3, #4
 800263a:	2b06      	cmp	r3, #6
 800263c:	d902      	bls.n	8002644 <NVIC_EncodePriority+0x30>
 800263e:	69fb      	ldr	r3, [r7, #28]
 8002640:	3b03      	subs	r3, #3
 8002642:	e000      	b.n	8002646 <NVIC_EncodePriority+0x32>
 8002644:	2300      	movs	r3, #0
 8002646:	617b      	str	r3, [r7, #20]
 8002648:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800264c:	69bb      	ldr	r3, [r7, #24]
 800264e:	fa02 f303 	lsl.w	r3, r2, r3
 8002652:	43da      	mvns	r2, r3
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	401a      	ands	r2, r3
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	409a      	lsls	r2, r3
 800265c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	fa01 f303 	lsl.w	r3, r1, r3
 8002666:	43d9      	mvns	r1, r3
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	400b      	ands	r3, r1
 800266c:	4313      	orrs	r3, r2
 800266e:	4618      	mov	r0, r3
 8002670:	3724      	adds	r7, #36	; 0x24
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr
	...

0800267c <SysTick_Config>:
 800267c:	b580      	push	{r7, lr}
 800267e:	b082      	sub	sp, #8
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	3b01      	subs	r3, #1
 8002688:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800268c:	d301      	bcc.n	8002692 <SysTick_Config+0x16>
 800268e:	2301      	movs	r3, #1
 8002690:	e00f      	b.n	80026b2 <SysTick_Config+0x36>
 8002692:	4a0a      	ldr	r2, [pc, #40]	; (80026bc <SysTick_Config+0x40>)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	3b01      	subs	r3, #1
 8002698:	6053      	str	r3, [r2, #4]
 800269a:	210f      	movs	r1, #15
 800269c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80026a0:	f7ff ff8e 	bl	80025c0 <__NVIC_SetPriority>
 80026a4:	4b05      	ldr	r3, [pc, #20]	; (80026bc <SysTick_Config+0x40>)
 80026a6:	2200      	movs	r2, #0
 80026a8:	609a      	str	r2, [r3, #8]
 80026aa:	4b04      	ldr	r3, [pc, #16]	; (80026bc <SysTick_Config+0x40>)
 80026ac:	2207      	movs	r2, #7
 80026ae:	601a      	str	r2, [r3, #0]
 80026b0:	2300      	movs	r3, #0
 80026b2:	4618      	mov	r0, r3
 80026b4:	3708      	adds	r7, #8
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	e000e010 	.word	0xe000e010

080026c0 <HAL_NVIC_SetPriorityGrouping>:
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b082      	sub	sp, #8
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
 80026c8:	6878      	ldr	r0, [r7, #4]
 80026ca:	f7ff fec9 	bl	8002460 <__NVIC_SetPriorityGrouping>
 80026ce:	bf00      	nop
 80026d0:	3708      	adds	r7, #8
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}

080026d6 <HAL_NVIC_SetPriority>:
 80026d6:	b580      	push	{r7, lr}
 80026d8:	b086      	sub	sp, #24
 80026da:	af00      	add	r7, sp, #0
 80026dc:	4603      	mov	r3, r0
 80026de:	60b9      	str	r1, [r7, #8]
 80026e0:	607a      	str	r2, [r7, #4]
 80026e2:	73fb      	strb	r3, [r7, #15]
 80026e4:	f7ff fee0 	bl	80024a8 <__NVIC_GetPriorityGrouping>
 80026e8:	6178      	str	r0, [r7, #20]
 80026ea:	687a      	ldr	r2, [r7, #4]
 80026ec:	68b9      	ldr	r1, [r7, #8]
 80026ee:	6978      	ldr	r0, [r7, #20]
 80026f0:	f7ff ff90 	bl	8002614 <NVIC_EncodePriority>
 80026f4:	4602      	mov	r2, r0
 80026f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026fa:	4611      	mov	r1, r2
 80026fc:	4618      	mov	r0, r3
 80026fe:	f7ff ff5f 	bl	80025c0 <__NVIC_SetPriority>
 8002702:	bf00      	nop
 8002704:	3718      	adds	r7, #24
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}

0800270a <HAL_NVIC_EnableIRQ>:
 800270a:	b580      	push	{r7, lr}
 800270c:	b082      	sub	sp, #8
 800270e:	af00      	add	r7, sp, #0
 8002710:	4603      	mov	r3, r0
 8002712:	71fb      	strb	r3, [r7, #7]
 8002714:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002718:	4618      	mov	r0, r3
 800271a:	f7ff fed3 	bl	80024c4 <__NVIC_EnableIRQ>
 800271e:	bf00      	nop
 8002720:	3708      	adds	r7, #8
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}

08002726 <HAL_NVIC_DisableIRQ>:
 8002726:	b580      	push	{r7, lr}
 8002728:	b082      	sub	sp, #8
 800272a:	af00      	add	r7, sp, #0
 800272c:	4603      	mov	r3, r0
 800272e:	71fb      	strb	r3, [r7, #7]
 8002730:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002734:	4618      	mov	r0, r3
 8002736:	f7ff fee3 	bl	8002500 <__NVIC_DisableIRQ>
 800273a:	bf00      	nop
 800273c:	3708      	adds	r7, #8
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}

08002742 <HAL_SYSTICK_Config>:
 8002742:	b580      	push	{r7, lr}
 8002744:	b082      	sub	sp, #8
 8002746:	af00      	add	r7, sp, #0
 8002748:	6078      	str	r0, [r7, #4]
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	f7ff ff96 	bl	800267c <SysTick_Config>
 8002750:	4603      	mov	r3, r0
 8002752:	4618      	mov	r0, r3
 8002754:	3708      	adds	r7, #8
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}

0800275a <HAL_NVIC_SetPendingIRQ>:
 800275a:	b580      	push	{r7, lr}
 800275c:	b082      	sub	sp, #8
 800275e:	af00      	add	r7, sp, #0
 8002760:	4603      	mov	r3, r0
 8002762:	71fb      	strb	r3, [r7, #7]
 8002764:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002768:	4618      	mov	r0, r3
 800276a:	f7ff feed 	bl	8002548 <__NVIC_SetPendingIRQ>
 800276e:	bf00      	nop
 8002770:	3708      	adds	r7, #8
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}

08002776 <HAL_NVIC_ClearPendingIRQ>:
 8002776:	b580      	push	{r7, lr}
 8002778:	b082      	sub	sp, #8
 800277a:	af00      	add	r7, sp, #0
 800277c:	4603      	mov	r3, r0
 800277e:	71fb      	strb	r3, [r7, #7]
 8002780:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002784:	4618      	mov	r0, r3
 8002786:	f7ff fefd 	bl	8002584 <__NVIC_ClearPendingIRQ>
 800278a:	bf00      	nop
 800278c:	3708      	adds	r7, #8
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}
	...

08002794 <HAL_GPIO_Init>:
 8002794:	b480      	push	{r7}
 8002796:	b087      	sub	sp, #28
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
 800279c:	6039      	str	r1, [r7, #0]
 800279e:	2300      	movs	r3, #0
 80027a0:	617b      	str	r3, [r7, #20]
 80027a2:	e14c      	b.n	8002a3e <HAL_GPIO_Init+0x2aa>
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	2101      	movs	r1, #1
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	fa01 f303 	lsl.w	r3, r1, r3
 80027b0:	4013      	ands	r3, r2
 80027b2:	60fb      	str	r3, [r7, #12]
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	f000 813e 	beq.w	8002a38 <HAL_GPIO_Init+0x2a4>
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	f003 0303 	and.w	r3, r3, #3
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d005      	beq.n	80027d4 <HAL_GPIO_Init+0x40>
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	f003 0303 	and.w	r3, r3, #3
 80027d0:	2b02      	cmp	r3, #2
 80027d2:	d130      	bne.n	8002836 <HAL_GPIO_Init+0xa2>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	613b      	str	r3, [r7, #16]
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	005b      	lsls	r3, r3, #1
 80027de:	2203      	movs	r2, #3
 80027e0:	fa02 f303 	lsl.w	r3, r2, r3
 80027e4:	43db      	mvns	r3, r3
 80027e6:	693a      	ldr	r2, [r7, #16]
 80027e8:	4013      	ands	r3, r2
 80027ea:	613b      	str	r3, [r7, #16]
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	68da      	ldr	r2, [r3, #12]
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	005b      	lsls	r3, r3, #1
 80027f4:	fa02 f303 	lsl.w	r3, r2, r3
 80027f8:	693a      	ldr	r2, [r7, #16]
 80027fa:	4313      	orrs	r3, r2
 80027fc:	613b      	str	r3, [r7, #16]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	693a      	ldr	r2, [r7, #16]
 8002802:	609a      	str	r2, [r3, #8]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	613b      	str	r3, [r7, #16]
 800280a:	2201      	movs	r2, #1
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	fa02 f303 	lsl.w	r3, r2, r3
 8002812:	43db      	mvns	r3, r3
 8002814:	693a      	ldr	r2, [r7, #16]
 8002816:	4013      	ands	r3, r2
 8002818:	613b      	str	r3, [r7, #16]
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	091b      	lsrs	r3, r3, #4
 8002820:	f003 0201 	and.w	r2, r3, #1
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	fa02 f303 	lsl.w	r3, r2, r3
 800282a:	693a      	ldr	r2, [r7, #16]
 800282c:	4313      	orrs	r3, r2
 800282e:	613b      	str	r3, [r7, #16]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	693a      	ldr	r2, [r7, #16]
 8002834:	605a      	str	r2, [r3, #4]
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	f003 0303 	and.w	r3, r3, #3
 800283e:	2b03      	cmp	r3, #3
 8002840:	d017      	beq.n	8002872 <HAL_GPIO_Init+0xde>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	68db      	ldr	r3, [r3, #12]
 8002846:	613b      	str	r3, [r7, #16]
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	005b      	lsls	r3, r3, #1
 800284c:	2203      	movs	r2, #3
 800284e:	fa02 f303 	lsl.w	r3, r2, r3
 8002852:	43db      	mvns	r3, r3
 8002854:	693a      	ldr	r2, [r7, #16]
 8002856:	4013      	ands	r3, r2
 8002858:	613b      	str	r3, [r7, #16]
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	689a      	ldr	r2, [r3, #8]
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	005b      	lsls	r3, r3, #1
 8002862:	fa02 f303 	lsl.w	r3, r2, r3
 8002866:	693a      	ldr	r2, [r7, #16]
 8002868:	4313      	orrs	r3, r2
 800286a:	613b      	str	r3, [r7, #16]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	693a      	ldr	r2, [r7, #16]
 8002870:	60da      	str	r2, [r3, #12]
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	f003 0303 	and.w	r3, r3, #3
 800287a:	2b02      	cmp	r3, #2
 800287c:	d123      	bne.n	80028c6 <HAL_GPIO_Init+0x132>
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	08da      	lsrs	r2, r3, #3
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	3208      	adds	r2, #8
 8002886:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800288a:	613b      	str	r3, [r7, #16]
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	f003 0307 	and.w	r3, r3, #7
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	220f      	movs	r2, #15
 8002896:	fa02 f303 	lsl.w	r3, r2, r3
 800289a:	43db      	mvns	r3, r3
 800289c:	693a      	ldr	r2, [r7, #16]
 800289e:	4013      	ands	r3, r2
 80028a0:	613b      	str	r3, [r7, #16]
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	691a      	ldr	r2, [r3, #16]
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	f003 0307 	and.w	r3, r3, #7
 80028ac:	009b      	lsls	r3, r3, #2
 80028ae:	fa02 f303 	lsl.w	r3, r2, r3
 80028b2:	693a      	ldr	r2, [r7, #16]
 80028b4:	4313      	orrs	r3, r2
 80028b6:	613b      	str	r3, [r7, #16]
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	08da      	lsrs	r2, r3, #3
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	3208      	adds	r2, #8
 80028c0:	6939      	ldr	r1, [r7, #16]
 80028c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	613b      	str	r3, [r7, #16]
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	005b      	lsls	r3, r3, #1
 80028d0:	2203      	movs	r2, #3
 80028d2:	fa02 f303 	lsl.w	r3, r2, r3
 80028d6:	43db      	mvns	r3, r3
 80028d8:	693a      	ldr	r2, [r7, #16]
 80028da:	4013      	ands	r3, r2
 80028dc:	613b      	str	r3, [r7, #16]
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	f003 0203 	and.w	r2, r3, #3
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	005b      	lsls	r3, r3, #1
 80028ea:	fa02 f303 	lsl.w	r3, r2, r3
 80028ee:	693a      	ldr	r2, [r7, #16]
 80028f0:	4313      	orrs	r3, r2
 80028f2:	613b      	str	r3, [r7, #16]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	693a      	ldr	r2, [r7, #16]
 80028f8:	601a      	str	r2, [r3, #0]
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002902:	2b00      	cmp	r3, #0
 8002904:	f000 8098 	beq.w	8002a38 <HAL_GPIO_Init+0x2a4>
 8002908:	4a54      	ldr	r2, [pc, #336]	; (8002a5c <HAL_GPIO_Init+0x2c8>)
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	089b      	lsrs	r3, r3, #2
 800290e:	3302      	adds	r3, #2
 8002910:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002914:	613b      	str	r3, [r7, #16]
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	f003 0303 	and.w	r3, r3, #3
 800291c:	009b      	lsls	r3, r3, #2
 800291e:	220f      	movs	r2, #15
 8002920:	fa02 f303 	lsl.w	r3, r2, r3
 8002924:	43db      	mvns	r3, r3
 8002926:	693a      	ldr	r2, [r7, #16]
 8002928:	4013      	ands	r3, r2
 800292a:	613b      	str	r3, [r7, #16]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002932:	d019      	beq.n	8002968 <HAL_GPIO_Init+0x1d4>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	4a4a      	ldr	r2, [pc, #296]	; (8002a60 <HAL_GPIO_Init+0x2cc>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d013      	beq.n	8002964 <HAL_GPIO_Init+0x1d0>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	4a49      	ldr	r2, [pc, #292]	; (8002a64 <HAL_GPIO_Init+0x2d0>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d00d      	beq.n	8002960 <HAL_GPIO_Init+0x1cc>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	4a48      	ldr	r2, [pc, #288]	; (8002a68 <HAL_GPIO_Init+0x2d4>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d007      	beq.n	800295c <HAL_GPIO_Init+0x1c8>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	4a47      	ldr	r2, [pc, #284]	; (8002a6c <HAL_GPIO_Init+0x2d8>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d101      	bne.n	8002958 <HAL_GPIO_Init+0x1c4>
 8002954:	2304      	movs	r3, #4
 8002956:	e008      	b.n	800296a <HAL_GPIO_Init+0x1d6>
 8002958:	2307      	movs	r3, #7
 800295a:	e006      	b.n	800296a <HAL_GPIO_Init+0x1d6>
 800295c:	2303      	movs	r3, #3
 800295e:	e004      	b.n	800296a <HAL_GPIO_Init+0x1d6>
 8002960:	2302      	movs	r3, #2
 8002962:	e002      	b.n	800296a <HAL_GPIO_Init+0x1d6>
 8002964:	2301      	movs	r3, #1
 8002966:	e000      	b.n	800296a <HAL_GPIO_Init+0x1d6>
 8002968:	2300      	movs	r3, #0
 800296a:	697a      	ldr	r2, [r7, #20]
 800296c:	f002 0203 	and.w	r2, r2, #3
 8002970:	0092      	lsls	r2, r2, #2
 8002972:	4093      	lsls	r3, r2
 8002974:	693a      	ldr	r2, [r7, #16]
 8002976:	4313      	orrs	r3, r2
 8002978:	613b      	str	r3, [r7, #16]
 800297a:	4938      	ldr	r1, [pc, #224]	; (8002a5c <HAL_GPIO_Init+0x2c8>)
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	089b      	lsrs	r3, r3, #2
 8002980:	3302      	adds	r3, #2
 8002982:	693a      	ldr	r2, [r7, #16]
 8002984:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8002988:	4b39      	ldr	r3, [pc, #228]	; (8002a70 <HAL_GPIO_Init+0x2dc>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	613b      	str	r3, [r7, #16]
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	43db      	mvns	r3, r3
 8002992:	693a      	ldr	r2, [r7, #16]
 8002994:	4013      	ands	r3, r2
 8002996:	613b      	str	r3, [r7, #16]
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d003      	beq.n	80029ac <HAL_GPIO_Init+0x218>
 80029a4:	693a      	ldr	r2, [r7, #16]
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	4313      	orrs	r3, r2
 80029aa:	613b      	str	r3, [r7, #16]
 80029ac:	4a30      	ldr	r2, [pc, #192]	; (8002a70 <HAL_GPIO_Init+0x2dc>)
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	6013      	str	r3, [r2, #0]
 80029b2:	4b2f      	ldr	r3, [pc, #188]	; (8002a70 <HAL_GPIO_Init+0x2dc>)
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	613b      	str	r3, [r7, #16]
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	43db      	mvns	r3, r3
 80029bc:	693a      	ldr	r2, [r7, #16]
 80029be:	4013      	ands	r3, r2
 80029c0:	613b      	str	r3, [r7, #16]
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d003      	beq.n	80029d6 <HAL_GPIO_Init+0x242>
 80029ce:	693a      	ldr	r2, [r7, #16]
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	4313      	orrs	r3, r2
 80029d4:	613b      	str	r3, [r7, #16]
 80029d6:	4a26      	ldr	r2, [pc, #152]	; (8002a70 <HAL_GPIO_Init+0x2dc>)
 80029d8:	693b      	ldr	r3, [r7, #16]
 80029da:	6053      	str	r3, [r2, #4]
 80029dc:	4b24      	ldr	r3, [pc, #144]	; (8002a70 <HAL_GPIO_Init+0x2dc>)
 80029de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80029e2:	613b      	str	r3, [r7, #16]
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	43db      	mvns	r3, r3
 80029e8:	693a      	ldr	r2, [r7, #16]
 80029ea:	4013      	ands	r3, r2
 80029ec:	613b      	str	r3, [r7, #16]
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d003      	beq.n	8002a02 <HAL_GPIO_Init+0x26e>
 80029fa:	693a      	ldr	r2, [r7, #16]
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	4313      	orrs	r3, r2
 8002a00:	613b      	str	r3, [r7, #16]
 8002a02:	4a1b      	ldr	r2, [pc, #108]	; (8002a70 <HAL_GPIO_Init+0x2dc>)
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002a0a:	4b19      	ldr	r3, [pc, #100]	; (8002a70 <HAL_GPIO_Init+0x2dc>)
 8002a0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a10:	613b      	str	r3, [r7, #16]
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	43db      	mvns	r3, r3
 8002a16:	693a      	ldr	r2, [r7, #16]
 8002a18:	4013      	ands	r3, r2
 8002a1a:	613b      	str	r3, [r7, #16]
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d003      	beq.n	8002a30 <HAL_GPIO_Init+0x29c>
 8002a28:	693a      	ldr	r2, [r7, #16]
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	613b      	str	r3, [r7, #16]
 8002a30:	4a0f      	ldr	r2, [pc, #60]	; (8002a70 <HAL_GPIO_Init+0x2dc>)
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	3301      	adds	r3, #1
 8002a3c:	617b      	str	r3, [r7, #20]
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	681a      	ldr	r2, [r3, #0]
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	fa22 f303 	lsr.w	r3, r2, r3
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	f47f aeab 	bne.w	80027a4 <HAL_GPIO_Init+0x10>
 8002a4e:	bf00      	nop
 8002a50:	bf00      	nop
 8002a52:	371c      	adds	r7, #28
 8002a54:	46bd      	mov	sp, r7
 8002a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5a:	4770      	bx	lr
 8002a5c:	40010000 	.word	0x40010000
 8002a60:	48000400 	.word	0x48000400
 8002a64:	48000800 	.word	0x48000800
 8002a68:	48000c00 	.word	0x48000c00
 8002a6c:	48001000 	.word	0x48001000
 8002a70:	58000800 	.word	0x58000800

08002a74 <HAL_GPIO_WritePin>:
 8002a74:	b480      	push	{r7}
 8002a76:	b083      	sub	sp, #12
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
 8002a7c:	460b      	mov	r3, r1
 8002a7e:	807b      	strh	r3, [r7, #2]
 8002a80:	4613      	mov	r3, r2
 8002a82:	707b      	strb	r3, [r7, #1]
 8002a84:	787b      	ldrb	r3, [r7, #1]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d003      	beq.n	8002a92 <HAL_GPIO_WritePin+0x1e>
 8002a8a:	887a      	ldrh	r2, [r7, #2]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	619a      	str	r2, [r3, #24]
 8002a90:	e002      	b.n	8002a98 <HAL_GPIO_WritePin+0x24>
 8002a92:	887a      	ldrh	r2, [r7, #2]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	629a      	str	r2, [r3, #40]	; 0x28
 8002a98:	bf00      	nop
 8002a9a:	370c      	adds	r7, #12
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa2:	4770      	bx	lr

08002aa4 <HAL_HSEM_IRQHandler>:
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b082      	sub	sp, #8
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	4b0a      	ldr	r3, [pc, #40]	; (8002ad4 <HAL_HSEM_IRQHandler+0x30>)
 8002aac:	68db      	ldr	r3, [r3, #12]
 8002aae:	607b      	str	r3, [r7, #4]
 8002ab0:	4b08      	ldr	r3, [pc, #32]	; (8002ad4 <HAL_HSEM_IRQHandler+0x30>)
 8002ab2:	681a      	ldr	r2, [r3, #0]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	43db      	mvns	r3, r3
 8002ab8:	4906      	ldr	r1, [pc, #24]	; (8002ad4 <HAL_HSEM_IRQHandler+0x30>)
 8002aba:	4013      	ands	r3, r2
 8002abc:	600b      	str	r3, [r1, #0]
 8002abe:	4a05      	ldr	r2, [pc, #20]	; (8002ad4 <HAL_HSEM_IRQHandler+0x30>)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6053      	str	r3, [r2, #4]
 8002ac4:	6878      	ldr	r0, [r7, #4]
 8002ac6:	f000 f807 	bl	8002ad8 <HAL_HSEM_FreeCallback>
 8002aca:	bf00      	nop
 8002acc:	3708      	adds	r7, #8
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	bf00      	nop
 8002ad4:	58001500 	.word	0x58001500

08002ad8 <HAL_HSEM_FreeCallback>:
 8002ad8:	b480      	push	{r7}
 8002ada:	b083      	sub	sp, #12
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
 8002ae0:	bf00      	nop
 8002ae2:	370c      	adds	r7, #12
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aea:	4770      	bx	lr

08002aec <HAL_I2C_Init>:
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b082      	sub	sp, #8
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d101      	bne.n	8002afe <HAL_I2C_Init+0x12>
 8002afa:	2301      	movs	r3, #1
 8002afc:	e081      	b.n	8002c02 <HAL_I2C_Init+0x116>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b04:	b2db      	uxtb	r3, r3
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d106      	bne.n	8002b18 <HAL_I2C_Init+0x2c>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	f7ff f9a8 	bl	8001e68 <HAL_I2C_MspInit>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2224      	movs	r2, #36	; 0x24
 8002b1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	681a      	ldr	r2, [r3, #0]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f022 0201 	bic.w	r2, r2, #1
 8002b2e:	601a      	str	r2, [r3, #0]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	685a      	ldr	r2, [r3, #4]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002b3c:	611a      	str	r2, [r3, #16]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	689a      	ldr	r2, [r3, #8]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002b4c:	609a      	str	r2, [r3, #8]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	68db      	ldr	r3, [r3, #12]
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	d107      	bne.n	8002b66 <HAL_I2C_Init+0x7a>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	689a      	ldr	r2, [r3, #8]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002b62:	609a      	str	r2, [r3, #8]
 8002b64:	e006      	b.n	8002b74 <HAL_I2C_Init+0x88>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	689a      	ldr	r2, [r3, #8]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002b72:	609a      	str	r2, [r3, #8]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	68db      	ldr	r3, [r3, #12]
 8002b78:	2b02      	cmp	r3, #2
 8002b7a:	d104      	bne.n	8002b86 <HAL_I2C_Init+0x9a>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002b84:	605a      	str	r2, [r3, #4]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	687a      	ldr	r2, [r7, #4]
 8002b8e:	6812      	ldr	r2, [r2, #0]
 8002b90:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002b94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b98:	6053      	str	r3, [r2, #4]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	68da      	ldr	r2, [r3, #12]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ba8:	60da      	str	r2, [r3, #12]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	691a      	ldr	r2, [r3, #16]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	695b      	ldr	r3, [r3, #20]
 8002bb2:	ea42 0103 	orr.w	r1, r2, r3
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	699b      	ldr	r3, [r3, #24]
 8002bba:	021a      	lsls	r2, r3, #8
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	430a      	orrs	r2, r1
 8002bc2:	60da      	str	r2, [r3, #12]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	69d9      	ldr	r1, [r3, #28]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6a1a      	ldr	r2, [r3, #32]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	430a      	orrs	r2, r1
 8002bd2:	601a      	str	r2, [r3, #0]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f042 0201 	orr.w	r2, r2, #1
 8002be2:	601a      	str	r2, [r3, #0]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2200      	movs	r2, #0
 8002be8:	645a      	str	r2, [r3, #68]	; 0x44
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2220      	movs	r2, #32
 8002bee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	631a      	str	r2, [r3, #48]	; 0x30
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c00:	2300      	movs	r3, #0
 8002c02:	4618      	mov	r0, r3
 8002c04:	3708      	adds	r7, #8
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}
	...

08002c0c <HAL_I2C_Mem_Read>:
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b088      	sub	sp, #32
 8002c10:	af02      	add	r7, sp, #8
 8002c12:	60f8      	str	r0, [r7, #12]
 8002c14:	4608      	mov	r0, r1
 8002c16:	4611      	mov	r1, r2
 8002c18:	461a      	mov	r2, r3
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	817b      	strh	r3, [r7, #10]
 8002c1e:	460b      	mov	r3, r1
 8002c20:	813b      	strh	r3, [r7, #8]
 8002c22:	4613      	mov	r3, r2
 8002c24:	80fb      	strh	r3, [r7, #6]
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c2c:	b2db      	uxtb	r3, r3
 8002c2e:	2b20      	cmp	r3, #32
 8002c30:	f040 80fd 	bne.w	8002e2e <HAL_I2C_Mem_Read+0x222>
 8002c34:	6a3b      	ldr	r3, [r7, #32]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d002      	beq.n	8002c40 <HAL_I2C_Mem_Read+0x34>
 8002c3a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d105      	bne.n	8002c4c <HAL_I2C_Mem_Read+0x40>
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c46:	645a      	str	r2, [r3, #68]	; 0x44
 8002c48:	2301      	movs	r3, #1
 8002c4a:	e0f1      	b.n	8002e30 <HAL_I2C_Mem_Read+0x224>
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c52:	2b01      	cmp	r3, #1
 8002c54:	d101      	bne.n	8002c5a <HAL_I2C_Mem_Read+0x4e>
 8002c56:	2302      	movs	r3, #2
 8002c58:	e0ea      	b.n	8002e30 <HAL_I2C_Mem_Read+0x224>
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	2201      	movs	r2, #1
 8002c5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c62:	f7ff fbd9 	bl	8002418 <HAL_GetTick>
 8002c66:	6178      	str	r0, [r7, #20]
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	9300      	str	r3, [sp, #0]
 8002c6c:	2319      	movs	r3, #25
 8002c6e:	2201      	movs	r2, #1
 8002c70:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002c74:	68f8      	ldr	r0, [r7, #12]
 8002c76:	f000 f975 	bl	8002f64 <I2C_WaitOnFlagUntilTimeout>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d001      	beq.n	8002c84 <HAL_I2C_Mem_Read+0x78>
 8002c80:	2301      	movs	r3, #1
 8002c82:	e0d5      	b.n	8002e30 <HAL_I2C_Mem_Read+0x224>
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	2222      	movs	r2, #34	; 0x22
 8002c88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2240      	movs	r2, #64	; 0x40
 8002c90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	2200      	movs	r2, #0
 8002c98:	645a      	str	r2, [r3, #68]	; 0x44
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	6a3a      	ldr	r2, [r7, #32]
 8002c9e:	625a      	str	r2, [r3, #36]	; 0x24
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002ca4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	635a      	str	r2, [r3, #52]	; 0x34
 8002cac:	88f8      	ldrh	r0, [r7, #6]
 8002cae:	893a      	ldrh	r2, [r7, #8]
 8002cb0:	8979      	ldrh	r1, [r7, #10]
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	9301      	str	r3, [sp, #4]
 8002cb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cb8:	9300      	str	r3, [sp, #0]
 8002cba:	4603      	mov	r3, r0
 8002cbc:	68f8      	ldr	r0, [r7, #12]
 8002cbe:	f000 f8d9 	bl	8002e74 <I2C_RequestMemoryRead>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d005      	beq.n	8002cd4 <HAL_I2C_Mem_Read+0xc8>
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	e0ad      	b.n	8002e30 <HAL_I2C_Mem_Read+0x224>
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cd8:	b29b      	uxth	r3, r3
 8002cda:	2bff      	cmp	r3, #255	; 0xff
 8002cdc:	d90e      	bls.n	8002cfc <HAL_I2C_Mem_Read+0xf0>
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	22ff      	movs	r2, #255	; 0xff
 8002ce2:	851a      	strh	r2, [r3, #40]	; 0x28
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ce8:	b2da      	uxtb	r2, r3
 8002cea:	8979      	ldrh	r1, [r7, #10]
 8002cec:	4b52      	ldr	r3, [pc, #328]	; (8002e38 <HAL_I2C_Mem_Read+0x22c>)
 8002cee:	9300      	str	r3, [sp, #0]
 8002cf0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002cf4:	68f8      	ldr	r0, [r7, #12]
 8002cf6:	f000 faef 	bl	80032d8 <I2C_TransferConfig>
 8002cfa:	e00f      	b.n	8002d1c <HAL_I2C_Mem_Read+0x110>
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d00:	b29a      	uxth	r2, r3
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	851a      	strh	r2, [r3, #40]	; 0x28
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d0a:	b2da      	uxtb	r2, r3
 8002d0c:	8979      	ldrh	r1, [r7, #10]
 8002d0e:	4b4a      	ldr	r3, [pc, #296]	; (8002e38 <HAL_I2C_Mem_Read+0x22c>)
 8002d10:	9300      	str	r3, [sp, #0]
 8002d12:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d16:	68f8      	ldr	r0, [r7, #12]
 8002d18:	f000 fade 	bl	80032d8 <I2C_TransferConfig>
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	9300      	str	r3, [sp, #0]
 8002d20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d22:	2200      	movs	r2, #0
 8002d24:	2104      	movs	r1, #4
 8002d26:	68f8      	ldr	r0, [r7, #12]
 8002d28:	f000 f91c 	bl	8002f64 <I2C_WaitOnFlagUntilTimeout>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d001      	beq.n	8002d36 <HAL_I2C_Mem_Read+0x12a>
 8002d32:	2301      	movs	r3, #1
 8002d34:	e07c      	b.n	8002e30 <HAL_I2C_Mem_Read+0x224>
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d40:	b2d2      	uxtb	r2, r2
 8002d42:	701a      	strb	r2, [r3, #0]
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d48:	1c5a      	adds	r2, r3, #1
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	625a      	str	r2, [r3, #36]	; 0x24
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d52:	3b01      	subs	r3, #1
 8002d54:	b29a      	uxth	r2, r3
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	851a      	strh	r2, [r3, #40]	; 0x28
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d5e:	b29b      	uxth	r3, r3
 8002d60:	3b01      	subs	r3, #1
 8002d62:	b29a      	uxth	r2, r3
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d6c:	b29b      	uxth	r3, r3
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d034      	beq.n	8002ddc <HAL_I2C_Mem_Read+0x1d0>
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d130      	bne.n	8002ddc <HAL_I2C_Mem_Read+0x1d0>
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	9300      	str	r3, [sp, #0]
 8002d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d80:	2200      	movs	r2, #0
 8002d82:	2180      	movs	r1, #128	; 0x80
 8002d84:	68f8      	ldr	r0, [r7, #12]
 8002d86:	f000 f8ed 	bl	8002f64 <I2C_WaitOnFlagUntilTimeout>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d001      	beq.n	8002d94 <HAL_I2C_Mem_Read+0x188>
 8002d90:	2301      	movs	r3, #1
 8002d92:	e04d      	b.n	8002e30 <HAL_I2C_Mem_Read+0x224>
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d98:	b29b      	uxth	r3, r3
 8002d9a:	2bff      	cmp	r3, #255	; 0xff
 8002d9c:	d90e      	bls.n	8002dbc <HAL_I2C_Mem_Read+0x1b0>
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	22ff      	movs	r2, #255	; 0xff
 8002da2:	851a      	strh	r2, [r3, #40]	; 0x28
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002da8:	b2da      	uxtb	r2, r3
 8002daa:	8979      	ldrh	r1, [r7, #10]
 8002dac:	2300      	movs	r3, #0
 8002dae:	9300      	str	r3, [sp, #0]
 8002db0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002db4:	68f8      	ldr	r0, [r7, #12]
 8002db6:	f000 fa8f 	bl	80032d8 <I2C_TransferConfig>
 8002dba:	e00f      	b.n	8002ddc <HAL_I2C_Mem_Read+0x1d0>
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dc0:	b29a      	uxth	r2, r3
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	851a      	strh	r2, [r3, #40]	; 0x28
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dca:	b2da      	uxtb	r2, r3
 8002dcc:	8979      	ldrh	r1, [r7, #10]
 8002dce:	2300      	movs	r3, #0
 8002dd0:	9300      	str	r3, [sp, #0]
 8002dd2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002dd6:	68f8      	ldr	r0, [r7, #12]
 8002dd8:	f000 fa7e 	bl	80032d8 <I2C_TransferConfig>
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002de0:	b29b      	uxth	r3, r3
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d19a      	bne.n	8002d1c <HAL_I2C_Mem_Read+0x110>
 8002de6:	697a      	ldr	r2, [r7, #20]
 8002de8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002dea:	68f8      	ldr	r0, [r7, #12]
 8002dec:	f000 f950 	bl	8003090 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002df0:	4603      	mov	r3, r0
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d001      	beq.n	8002dfa <HAL_I2C_Mem_Read+0x1ee>
 8002df6:	2301      	movs	r3, #1
 8002df8:	e01a      	b.n	8002e30 <HAL_I2C_Mem_Read+0x224>
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	2220      	movs	r2, #32
 8002e00:	61da      	str	r2, [r3, #28]
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	6859      	ldr	r1, [r3, #4]
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681a      	ldr	r2, [r3, #0]
 8002e0c:	4b0b      	ldr	r3, [pc, #44]	; (8002e3c <HAL_I2C_Mem_Read+0x230>)
 8002e0e:	400b      	ands	r3, r1
 8002e10:	6053      	str	r3, [r2, #4]
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	2220      	movs	r2, #32
 8002e16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	2200      	movs	r2, #0
 8002e26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	e000      	b.n	8002e30 <HAL_I2C_Mem_Read+0x224>
 8002e2e:	2302      	movs	r3, #2
 8002e30:	4618      	mov	r0, r3
 8002e32:	3718      	adds	r7, #24
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bd80      	pop	{r7, pc}
 8002e38:	80002400 	.word	0x80002400
 8002e3c:	fe00e800 	.word	0xfe00e800

08002e40 <HAL_I2C_EV_IRQHandler>:
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b084      	sub	sp, #16
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	699b      	ldr	r3, [r3, #24]
 8002e4e:	60fb      	str	r3, [r7, #12]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	60bb      	str	r3, [r7, #8]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d005      	beq.n	8002e6c <HAL_I2C_EV_IRQHandler+0x2c>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e64:	68ba      	ldr	r2, [r7, #8]
 8002e66:	68f9      	ldr	r1, [r7, #12]
 8002e68:	6878      	ldr	r0, [r7, #4]
 8002e6a:	4798      	blx	r3
 8002e6c:	bf00      	nop
 8002e6e:	3710      	adds	r7, #16
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}

08002e74 <I2C_RequestMemoryRead>:
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b086      	sub	sp, #24
 8002e78:	af02      	add	r7, sp, #8
 8002e7a:	60f8      	str	r0, [r7, #12]
 8002e7c:	4608      	mov	r0, r1
 8002e7e:	4611      	mov	r1, r2
 8002e80:	461a      	mov	r2, r3
 8002e82:	4603      	mov	r3, r0
 8002e84:	817b      	strh	r3, [r7, #10]
 8002e86:	460b      	mov	r3, r1
 8002e88:	813b      	strh	r3, [r7, #8]
 8002e8a:	4613      	mov	r3, r2
 8002e8c:	80fb      	strh	r3, [r7, #6]
 8002e8e:	88fb      	ldrh	r3, [r7, #6]
 8002e90:	b2da      	uxtb	r2, r3
 8002e92:	8979      	ldrh	r1, [r7, #10]
 8002e94:	4b20      	ldr	r3, [pc, #128]	; (8002f18 <I2C_RequestMemoryRead+0xa4>)
 8002e96:	9300      	str	r3, [sp, #0]
 8002e98:	2300      	movs	r3, #0
 8002e9a:	68f8      	ldr	r0, [r7, #12]
 8002e9c:	f000 fa1c 	bl	80032d8 <I2C_TransferConfig>
 8002ea0:	69fa      	ldr	r2, [r7, #28]
 8002ea2:	69b9      	ldr	r1, [r7, #24]
 8002ea4:	68f8      	ldr	r0, [r7, #12]
 8002ea6:	f000 f8ac 	bl	8003002 <I2C_WaitOnTXISFlagUntilTimeout>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d001      	beq.n	8002eb4 <I2C_RequestMemoryRead+0x40>
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	e02c      	b.n	8002f0e <I2C_RequestMemoryRead+0x9a>
 8002eb4:	88fb      	ldrh	r3, [r7, #6]
 8002eb6:	2b01      	cmp	r3, #1
 8002eb8:	d105      	bne.n	8002ec6 <I2C_RequestMemoryRead+0x52>
 8002eba:	893b      	ldrh	r3, [r7, #8]
 8002ebc:	b2da      	uxtb	r2, r3
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	629a      	str	r2, [r3, #40]	; 0x28
 8002ec4:	e015      	b.n	8002ef2 <I2C_RequestMemoryRead+0x7e>
 8002ec6:	893b      	ldrh	r3, [r7, #8]
 8002ec8:	0a1b      	lsrs	r3, r3, #8
 8002eca:	b29b      	uxth	r3, r3
 8002ecc:	b2da      	uxtb	r2, r3
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	629a      	str	r2, [r3, #40]	; 0x28
 8002ed4:	69fa      	ldr	r2, [r7, #28]
 8002ed6:	69b9      	ldr	r1, [r7, #24]
 8002ed8:	68f8      	ldr	r0, [r7, #12]
 8002eda:	f000 f892 	bl	8003002 <I2C_WaitOnTXISFlagUntilTimeout>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d001      	beq.n	8002ee8 <I2C_RequestMemoryRead+0x74>
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	e012      	b.n	8002f0e <I2C_RequestMemoryRead+0x9a>
 8002ee8:	893b      	ldrh	r3, [r7, #8]
 8002eea:	b2da      	uxtb	r2, r3
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	629a      	str	r2, [r3, #40]	; 0x28
 8002ef2:	69fb      	ldr	r3, [r7, #28]
 8002ef4:	9300      	str	r3, [sp, #0]
 8002ef6:	69bb      	ldr	r3, [r7, #24]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	2140      	movs	r1, #64	; 0x40
 8002efc:	68f8      	ldr	r0, [r7, #12]
 8002efe:	f000 f831 	bl	8002f64 <I2C_WaitOnFlagUntilTimeout>
 8002f02:	4603      	mov	r3, r0
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d001      	beq.n	8002f0c <I2C_RequestMemoryRead+0x98>
 8002f08:	2301      	movs	r3, #1
 8002f0a:	e000      	b.n	8002f0e <I2C_RequestMemoryRead+0x9a>
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	4618      	mov	r0, r3
 8002f10:	3710      	adds	r7, #16
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}
 8002f16:	bf00      	nop
 8002f18:	80002000 	.word	0x80002000

08002f1c <I2C_Flush_TXDR>:
 8002f1c:	b480      	push	{r7}
 8002f1e:	b083      	sub	sp, #12
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	699b      	ldr	r3, [r3, #24]
 8002f2a:	f003 0302 	and.w	r3, r3, #2
 8002f2e:	2b02      	cmp	r3, #2
 8002f30:	d103      	bne.n	8002f3a <I2C_Flush_TXDR+0x1e>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	2200      	movs	r2, #0
 8002f38:	629a      	str	r2, [r3, #40]	; 0x28
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	699b      	ldr	r3, [r3, #24]
 8002f40:	f003 0301 	and.w	r3, r3, #1
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	d007      	beq.n	8002f58 <I2C_Flush_TXDR+0x3c>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	699a      	ldr	r2, [r3, #24]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f042 0201 	orr.w	r2, r2, #1
 8002f56:	619a      	str	r2, [r3, #24]
 8002f58:	bf00      	nop
 8002f5a:	370c      	adds	r7, #12
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f62:	4770      	bx	lr

08002f64 <I2C_WaitOnFlagUntilTimeout>:
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b084      	sub	sp, #16
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	60f8      	str	r0, [r7, #12]
 8002f6c:	60b9      	str	r1, [r7, #8]
 8002f6e:	603b      	str	r3, [r7, #0]
 8002f70:	4613      	mov	r3, r2
 8002f72:	71fb      	strb	r3, [r7, #7]
 8002f74:	e031      	b.n	8002fda <I2C_WaitOnFlagUntilTimeout+0x76>
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f7c:	d02d      	beq.n	8002fda <I2C_WaitOnFlagUntilTimeout+0x76>
 8002f7e:	f7ff fa4b 	bl	8002418 <HAL_GetTick>
 8002f82:	4602      	mov	r2, r0
 8002f84:	69bb      	ldr	r3, [r7, #24]
 8002f86:	1ad3      	subs	r3, r2, r3
 8002f88:	683a      	ldr	r2, [r7, #0]
 8002f8a:	429a      	cmp	r2, r3
 8002f8c:	d302      	bcc.n	8002f94 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d122      	bne.n	8002fda <I2C_WaitOnFlagUntilTimeout+0x76>
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	699a      	ldr	r2, [r3, #24]
 8002f9a:	68bb      	ldr	r3, [r7, #8]
 8002f9c:	4013      	ands	r3, r2
 8002f9e:	68ba      	ldr	r2, [r7, #8]
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	bf0c      	ite	eq
 8002fa4:	2301      	moveq	r3, #1
 8002fa6:	2300      	movne	r3, #0
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	461a      	mov	r2, r3
 8002fac:	79fb      	ldrb	r3, [r7, #7]
 8002fae:	429a      	cmp	r2, r3
 8002fb0:	d113      	bne.n	8002fda <I2C_WaitOnFlagUntilTimeout+0x76>
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fb6:	f043 0220 	orr.w	r2, r3, #32
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	645a      	str	r2, [r3, #68]	; 0x44
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	2220      	movs	r2, #32
 8002fc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e00f      	b.n	8002ffa <I2C_WaitOnFlagUntilTimeout+0x96>
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	699a      	ldr	r2, [r3, #24]
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	4013      	ands	r3, r2
 8002fe4:	68ba      	ldr	r2, [r7, #8]
 8002fe6:	429a      	cmp	r2, r3
 8002fe8:	bf0c      	ite	eq
 8002fea:	2301      	moveq	r3, #1
 8002fec:	2300      	movne	r3, #0
 8002fee:	b2db      	uxtb	r3, r3
 8002ff0:	461a      	mov	r2, r3
 8002ff2:	79fb      	ldrb	r3, [r7, #7]
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	d0be      	beq.n	8002f76 <I2C_WaitOnFlagUntilTimeout+0x12>
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	3710      	adds	r7, #16
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}

08003002 <I2C_WaitOnTXISFlagUntilTimeout>:
 8003002:	b580      	push	{r7, lr}
 8003004:	b084      	sub	sp, #16
 8003006:	af00      	add	r7, sp, #0
 8003008:	60f8      	str	r0, [r7, #12]
 800300a:	60b9      	str	r1, [r7, #8]
 800300c:	607a      	str	r2, [r7, #4]
 800300e:	e033      	b.n	8003078 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
 8003010:	687a      	ldr	r2, [r7, #4]
 8003012:	68b9      	ldr	r1, [r7, #8]
 8003014:	68f8      	ldr	r0, [r7, #12]
 8003016:	f000 f87f 	bl	8003118 <I2C_IsErrorOccurred>
 800301a:	4603      	mov	r3, r0
 800301c:	2b00      	cmp	r3, #0
 800301e:	d001      	beq.n	8003024 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
 8003020:	2301      	movs	r3, #1
 8003022:	e031      	b.n	8003088 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800302a:	d025      	beq.n	8003078 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
 800302c:	f7ff f9f4 	bl	8002418 <HAL_GetTick>
 8003030:	4602      	mov	r2, r0
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	1ad3      	subs	r3, r2, r3
 8003036:	68ba      	ldr	r2, [r7, #8]
 8003038:	429a      	cmp	r2, r3
 800303a:	d302      	bcc.n	8003042 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d11a      	bne.n	8003078 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	699b      	ldr	r3, [r3, #24]
 8003048:	f003 0302 	and.w	r3, r3, #2
 800304c:	2b02      	cmp	r3, #2
 800304e:	d013      	beq.n	8003078 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003054:	f043 0220 	orr.w	r2, r3, #32
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	645a      	str	r2, [r3, #68]	; 0x44
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2220      	movs	r2, #32
 8003060:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2200      	movs	r2, #0
 8003068:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	2200      	movs	r2, #0
 8003070:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003074:	2301      	movs	r3, #1
 8003076:	e007      	b.n	8003088 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	699b      	ldr	r3, [r3, #24]
 800307e:	f003 0302 	and.w	r3, r3, #2
 8003082:	2b02      	cmp	r3, #2
 8003084:	d1c4      	bne.n	8003010 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
 8003086:	2300      	movs	r3, #0
 8003088:	4618      	mov	r0, r3
 800308a:	3710      	adds	r7, #16
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}

08003090 <I2C_WaitOnSTOPFlagUntilTimeout>:
 8003090:	b580      	push	{r7, lr}
 8003092:	b084      	sub	sp, #16
 8003094:	af00      	add	r7, sp, #0
 8003096:	60f8      	str	r0, [r7, #12]
 8003098:	60b9      	str	r1, [r7, #8]
 800309a:	607a      	str	r2, [r7, #4]
 800309c:	e02f      	b.n	80030fe <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
 800309e:	687a      	ldr	r2, [r7, #4]
 80030a0:	68b9      	ldr	r1, [r7, #8]
 80030a2:	68f8      	ldr	r0, [r7, #12]
 80030a4:	f000 f838 	bl	8003118 <I2C_IsErrorOccurred>
 80030a8:	4603      	mov	r3, r0
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d001      	beq.n	80030b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
 80030ae:	2301      	movs	r3, #1
 80030b0:	e02d      	b.n	800310e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
 80030b2:	f7ff f9b1 	bl	8002418 <HAL_GetTick>
 80030b6:	4602      	mov	r2, r0
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	1ad3      	subs	r3, r2, r3
 80030bc:	68ba      	ldr	r2, [r7, #8]
 80030be:	429a      	cmp	r2, r3
 80030c0:	d302      	bcc.n	80030c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d11a      	bne.n	80030fe <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	699b      	ldr	r3, [r3, #24]
 80030ce:	f003 0320 	and.w	r3, r3, #32
 80030d2:	2b20      	cmp	r3, #32
 80030d4:	d013      	beq.n	80030fe <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030da:	f043 0220 	orr.w	r2, r3, #32
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	645a      	str	r2, [r3, #68]	; 0x44
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	2220      	movs	r2, #32
 80030e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2200      	movs	r2, #0
 80030ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2200      	movs	r2, #0
 80030f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80030fa:	2301      	movs	r3, #1
 80030fc:	e007      	b.n	800310e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	699b      	ldr	r3, [r3, #24]
 8003104:	f003 0320 	and.w	r3, r3, #32
 8003108:	2b20      	cmp	r3, #32
 800310a:	d1c8      	bne.n	800309e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
 800310c:	2300      	movs	r3, #0
 800310e:	4618      	mov	r0, r3
 8003110:	3710      	adds	r7, #16
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}
	...

08003118 <I2C_IsErrorOccurred>:
 8003118:	b580      	push	{r7, lr}
 800311a:	b08a      	sub	sp, #40	; 0x28
 800311c:	af00      	add	r7, sp, #0
 800311e:	60f8      	str	r0, [r7, #12]
 8003120:	60b9      	str	r1, [r7, #8]
 8003122:	607a      	str	r2, [r7, #4]
 8003124:	2300      	movs	r3, #0
 8003126:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	699b      	ldr	r3, [r3, #24]
 8003130:	61bb      	str	r3, [r7, #24]
 8003132:	2300      	movs	r3, #0
 8003134:	623b      	str	r3, [r7, #32]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	61fb      	str	r3, [r7, #28]
 800313a:	69bb      	ldr	r3, [r7, #24]
 800313c:	f003 0310 	and.w	r3, r3, #16
 8003140:	2b00      	cmp	r3, #0
 8003142:	d068      	beq.n	8003216 <I2C_IsErrorOccurred+0xfe>
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	2210      	movs	r2, #16
 800314a:	61da      	str	r2, [r3, #28]
 800314c:	e049      	b.n	80031e2 <I2C_IsErrorOccurred+0xca>
 800314e:	68bb      	ldr	r3, [r7, #8]
 8003150:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003154:	d045      	beq.n	80031e2 <I2C_IsErrorOccurred+0xca>
 8003156:	f7ff f95f 	bl	8002418 <HAL_GetTick>
 800315a:	4602      	mov	r2, r0
 800315c:	69fb      	ldr	r3, [r7, #28]
 800315e:	1ad3      	subs	r3, r2, r3
 8003160:	68ba      	ldr	r2, [r7, #8]
 8003162:	429a      	cmp	r2, r3
 8003164:	d302      	bcc.n	800316c <I2C_IsErrorOccurred+0x54>
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d13a      	bne.n	80031e2 <I2C_IsErrorOccurred+0xca>
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003176:	617b      	str	r3, [r7, #20]
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800317e:	74fb      	strb	r3, [r7, #19]
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	699b      	ldr	r3, [r3, #24]
 8003186:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800318a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800318e:	d121      	bne.n	80031d4 <I2C_IsErrorOccurred+0xbc>
 8003190:	697b      	ldr	r3, [r7, #20]
 8003192:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003196:	d01d      	beq.n	80031d4 <I2C_IsErrorOccurred+0xbc>
 8003198:	7cfb      	ldrb	r3, [r7, #19]
 800319a:	2b20      	cmp	r3, #32
 800319c:	d01a      	beq.n	80031d4 <I2C_IsErrorOccurred+0xbc>
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	685a      	ldr	r2, [r3, #4]
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80031ac:	605a      	str	r2, [r3, #4]
 80031ae:	f7ff f933 	bl	8002418 <HAL_GetTick>
 80031b2:	61f8      	str	r0, [r7, #28]
 80031b4:	e00e      	b.n	80031d4 <I2C_IsErrorOccurred+0xbc>
 80031b6:	f7ff f92f 	bl	8002418 <HAL_GetTick>
 80031ba:	4602      	mov	r2, r0
 80031bc:	69fb      	ldr	r3, [r7, #28]
 80031be:	1ad3      	subs	r3, r2, r3
 80031c0:	2b19      	cmp	r3, #25
 80031c2:	d907      	bls.n	80031d4 <I2C_IsErrorOccurred+0xbc>
 80031c4:	6a3b      	ldr	r3, [r7, #32]
 80031c6:	f043 0320 	orr.w	r3, r3, #32
 80031ca:	623b      	str	r3, [r7, #32]
 80031cc:	2301      	movs	r3, #1
 80031ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80031d2:	e006      	b.n	80031e2 <I2C_IsErrorOccurred+0xca>
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	699b      	ldr	r3, [r3, #24]
 80031da:	f003 0320 	and.w	r3, r3, #32
 80031de:	2b20      	cmp	r3, #32
 80031e0:	d1e9      	bne.n	80031b6 <I2C_IsErrorOccurred+0x9e>
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	699b      	ldr	r3, [r3, #24]
 80031e8:	f003 0320 	and.w	r3, r3, #32
 80031ec:	2b20      	cmp	r3, #32
 80031ee:	d003      	beq.n	80031f8 <I2C_IsErrorOccurred+0xe0>
 80031f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d0aa      	beq.n	800314e <I2C_IsErrorOccurred+0x36>
 80031f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d103      	bne.n	8003208 <I2C_IsErrorOccurred+0xf0>
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	2220      	movs	r2, #32
 8003206:	61da      	str	r2, [r3, #28]
 8003208:	6a3b      	ldr	r3, [r7, #32]
 800320a:	f043 0304 	orr.w	r3, r3, #4
 800320e:	623b      	str	r3, [r7, #32]
 8003210:	2301      	movs	r3, #1
 8003212:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	699b      	ldr	r3, [r3, #24]
 800321c:	61bb      	str	r3, [r7, #24]
 800321e:	69bb      	ldr	r3, [r7, #24]
 8003220:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003224:	2b00      	cmp	r3, #0
 8003226:	d00b      	beq.n	8003240 <I2C_IsErrorOccurred+0x128>
 8003228:	6a3b      	ldr	r3, [r7, #32]
 800322a:	f043 0301 	orr.w	r3, r3, #1
 800322e:	623b      	str	r3, [r7, #32]
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003238:	61da      	str	r2, [r3, #28]
 800323a:	2301      	movs	r3, #1
 800323c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003240:	69bb      	ldr	r3, [r7, #24]
 8003242:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003246:	2b00      	cmp	r3, #0
 8003248:	d00b      	beq.n	8003262 <I2C_IsErrorOccurred+0x14a>
 800324a:	6a3b      	ldr	r3, [r7, #32]
 800324c:	f043 0308 	orr.w	r3, r3, #8
 8003250:	623b      	str	r3, [r7, #32]
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800325a:	61da      	str	r2, [r3, #28]
 800325c:	2301      	movs	r3, #1
 800325e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003262:	69bb      	ldr	r3, [r7, #24]
 8003264:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003268:	2b00      	cmp	r3, #0
 800326a:	d00b      	beq.n	8003284 <I2C_IsErrorOccurred+0x16c>
 800326c:	6a3b      	ldr	r3, [r7, #32]
 800326e:	f043 0302 	orr.w	r3, r3, #2
 8003272:	623b      	str	r3, [r7, #32]
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f44f 7200 	mov.w	r2, #512	; 0x200
 800327c:	61da      	str	r2, [r3, #28]
 800327e:	2301      	movs	r3, #1
 8003280:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003284:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003288:	2b00      	cmp	r3, #0
 800328a:	d01c      	beq.n	80032c6 <I2C_IsErrorOccurred+0x1ae>
 800328c:	68f8      	ldr	r0, [r7, #12]
 800328e:	f7ff fe45 	bl	8002f1c <I2C_Flush_TXDR>
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	6859      	ldr	r1, [r3, #4]
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	4b0d      	ldr	r3, [pc, #52]	; (80032d4 <I2C_IsErrorOccurred+0x1bc>)
 800329e:	400b      	ands	r3, r1
 80032a0:	6053      	str	r3, [r2, #4]
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80032a6:	6a3b      	ldr	r3, [r7, #32]
 80032a8:	431a      	orrs	r2, r3
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	645a      	str	r2, [r3, #68]	; 0x44
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	2220      	movs	r2, #32
 80032b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	2200      	movs	r2, #0
 80032ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	2200      	movs	r2, #0
 80032c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80032c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80032ca:	4618      	mov	r0, r3
 80032cc:	3728      	adds	r7, #40	; 0x28
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}
 80032d2:	bf00      	nop
 80032d4:	fe00e800 	.word	0xfe00e800

080032d8 <I2C_TransferConfig>:
 80032d8:	b480      	push	{r7}
 80032da:	b087      	sub	sp, #28
 80032dc:	af00      	add	r7, sp, #0
 80032de:	60f8      	str	r0, [r7, #12]
 80032e0:	607b      	str	r3, [r7, #4]
 80032e2:	460b      	mov	r3, r1
 80032e4:	817b      	strh	r3, [r7, #10]
 80032e6:	4613      	mov	r3, r2
 80032e8:	727b      	strb	r3, [r7, #9]
 80032ea:	897b      	ldrh	r3, [r7, #10]
 80032ec:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80032f0:	7a7b      	ldrb	r3, [r7, #9]
 80032f2:	041b      	lsls	r3, r3, #16
 80032f4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80032f8:	431a      	orrs	r2, r3
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	431a      	orrs	r2, r3
 80032fe:	6a3b      	ldr	r3, [r7, #32]
 8003300:	4313      	orrs	r3, r2
 8003302:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003306:	617b      	str	r3, [r7, #20]
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	685a      	ldr	r2, [r3, #4]
 800330e:	6a3b      	ldr	r3, [r7, #32]
 8003310:	0d5b      	lsrs	r3, r3, #21
 8003312:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003316:	4b08      	ldr	r3, [pc, #32]	; (8003338 <I2C_TransferConfig+0x60>)
 8003318:	430b      	orrs	r3, r1
 800331a:	43db      	mvns	r3, r3
 800331c:	ea02 0103 	and.w	r1, r2, r3
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	697a      	ldr	r2, [r7, #20]
 8003326:	430a      	orrs	r2, r1
 8003328:	605a      	str	r2, [r3, #4]
 800332a:	bf00      	nop
 800332c:	371c      	adds	r7, #28
 800332e:	46bd      	mov	sp, r7
 8003330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003334:	4770      	bx	lr
 8003336:	bf00      	nop
 8003338:	03ff63ff 	.word	0x03ff63ff

0800333c <HAL_I2CEx_ConfigAnalogFilter>:
 800333c:	b480      	push	{r7}
 800333e:	b083      	sub	sp, #12
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
 8003344:	6039      	str	r1, [r7, #0]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800334c:	b2db      	uxtb	r3, r3
 800334e:	2b20      	cmp	r3, #32
 8003350:	d138      	bne.n	80033c4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003358:	2b01      	cmp	r3, #1
 800335a:	d101      	bne.n	8003360 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800335c:	2302      	movs	r3, #2
 800335e:	e032      	b.n	80033c6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2201      	movs	r2, #1
 8003364:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2224      	movs	r2, #36	; 0x24
 800336c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	681a      	ldr	r2, [r3, #0]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f022 0201 	bic.w	r2, r2, #1
 800337e:	601a      	str	r2, [r3, #0]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	681a      	ldr	r2, [r3, #0]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800338e:	601a      	str	r2, [r3, #0]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	6819      	ldr	r1, [r3, #0]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	683a      	ldr	r2, [r7, #0]
 800339c:	430a      	orrs	r2, r1
 800339e:	601a      	str	r2, [r3, #0]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	681a      	ldr	r2, [r3, #0]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f042 0201 	orr.w	r2, r2, #1
 80033ae:	601a      	str	r2, [r3, #0]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2220      	movs	r2, #32
 80033b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2200      	movs	r2, #0
 80033bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80033c0:	2300      	movs	r3, #0
 80033c2:	e000      	b.n	80033c6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80033c4:	2302      	movs	r3, #2
 80033c6:	4618      	mov	r0, r3
 80033c8:	370c      	adds	r7, #12
 80033ca:	46bd      	mov	sp, r7
 80033cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d0:	4770      	bx	lr

080033d2 <HAL_I2CEx_ConfigDigitalFilter>:
 80033d2:	b480      	push	{r7}
 80033d4:	b085      	sub	sp, #20
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	6078      	str	r0, [r7, #4]
 80033da:	6039      	str	r1, [r7, #0]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033e2:	b2db      	uxtb	r3, r3
 80033e4:	2b20      	cmp	r3, #32
 80033e6:	d139      	bne.n	800345c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80033ee:	2b01      	cmp	r3, #1
 80033f0:	d101      	bne.n	80033f6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80033f2:	2302      	movs	r3, #2
 80033f4:	e033      	b.n	800345e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2201      	movs	r2, #1
 80033fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2224      	movs	r2, #36	; 0x24
 8003402:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	681a      	ldr	r2, [r3, #0]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f022 0201 	bic.w	r2, r2, #1
 8003414:	601a      	str	r2, [r3, #0]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	60fb      	str	r3, [r7, #12]
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003424:	60fb      	str	r3, [r7, #12]
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	021b      	lsls	r3, r3, #8
 800342a:	68fa      	ldr	r2, [r7, #12]
 800342c:	4313      	orrs	r3, r2
 800342e:	60fb      	str	r3, [r7, #12]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	68fa      	ldr	r2, [r7, #12]
 8003436:	601a      	str	r2, [r3, #0]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	681a      	ldr	r2, [r3, #0]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f042 0201 	orr.w	r2, r2, #1
 8003446:	601a      	str	r2, [r3, #0]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2220      	movs	r2, #32
 800344c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2200      	movs	r2, #0
 8003454:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003458:	2300      	movs	r3, #0
 800345a:	e000      	b.n	800345e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800345c:	2302      	movs	r3, #2
 800345e:	4618      	mov	r0, r3
 8003460:	3714      	adds	r7, #20
 8003462:	46bd      	mov	sp, r7
 8003464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003468:	4770      	bx	lr
	...

0800346c <HAL_IPCC_Init>:
 800346c:	b580      	push	{r7, lr}
 800346e:	b084      	sub	sp, #16
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
 8003474:	2300      	movs	r3, #0
 8003476:	73fb      	strb	r3, [r7, #15]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d01e      	beq.n	80034bc <HAL_IPCC_Init+0x50>
 800347e:	4b13      	ldr	r3, [pc, #76]	; (80034cc <HAL_IPCC_Init+0x60>)
 8003480:	60bb      	str	r3, [r7, #8]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003488:	b2db      	uxtb	r3, r3
 800348a:	2b00      	cmp	r3, #0
 800348c:	d102      	bne.n	8003494 <HAL_IPCC_Init+0x28>
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f7fe fd3a 	bl	8001f08 <HAL_IPCC_MspInit>
 8003494:	68b8      	ldr	r0, [r7, #8]
 8003496:	f000 f85b 	bl	8003550 <IPCC_Reset_Register>
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
 80034a2:	68bb      	ldr	r3, [r7, #8]
 80034a4:	601a      	str	r2, [r3, #0]
 80034a6:	6878      	ldr	r0, [r7, #4]
 80034a8:	f000 f82c 	bl	8003504 <IPCC_SetDefaultCallbacks>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2200      	movs	r2, #0
 80034b0:	635a      	str	r2, [r3, #52]	; 0x34
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2201      	movs	r2, #1
 80034b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 80034ba:	e001      	b.n	80034c0 <HAL_IPCC_Init+0x54>
 80034bc:	2301      	movs	r3, #1
 80034be:	73fb      	strb	r3, [r7, #15]
 80034c0:	7bfb      	ldrb	r3, [r7, #15]
 80034c2:	4618      	mov	r0, r3
 80034c4:	3710      	adds	r7, #16
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}
 80034ca:	bf00      	nop
 80034cc:	58000c00 	.word	0x58000c00

080034d0 <HAL_IPCC_RxCallback>:
 80034d0:	b480      	push	{r7}
 80034d2:	b085      	sub	sp, #20
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	60f8      	str	r0, [r7, #12]
 80034d8:	60b9      	str	r1, [r7, #8]
 80034da:	4613      	mov	r3, r2
 80034dc:	71fb      	strb	r3, [r7, #7]
 80034de:	bf00      	nop
 80034e0:	3714      	adds	r7, #20
 80034e2:	46bd      	mov	sp, r7
 80034e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e8:	4770      	bx	lr

080034ea <HAL_IPCC_TxCallback>:
 80034ea:	b480      	push	{r7}
 80034ec:	b085      	sub	sp, #20
 80034ee:	af00      	add	r7, sp, #0
 80034f0:	60f8      	str	r0, [r7, #12]
 80034f2:	60b9      	str	r1, [r7, #8]
 80034f4:	4613      	mov	r3, r2
 80034f6:	71fb      	strb	r3, [r7, #7]
 80034f8:	bf00      	nop
 80034fa:	3714      	adds	r7, #20
 80034fc:	46bd      	mov	sp, r7
 80034fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003502:	4770      	bx	lr

08003504 <IPCC_SetDefaultCallbacks>:
 8003504:	b480      	push	{r7}
 8003506:	b085      	sub	sp, #20
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
 800350c:	2300      	movs	r3, #0
 800350e:	60fb      	str	r3, [r7, #12]
 8003510:	e00f      	b.n	8003532 <IPCC_SetDefaultCallbacks+0x2e>
 8003512:	687a      	ldr	r2, [r7, #4]
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	009b      	lsls	r3, r3, #2
 8003518:	4413      	add	r3, r2
 800351a:	4a0b      	ldr	r2, [pc, #44]	; (8003548 <IPCC_SetDefaultCallbacks+0x44>)
 800351c:	605a      	str	r2, [r3, #4]
 800351e:	687a      	ldr	r2, [r7, #4]
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	3306      	adds	r3, #6
 8003524:	009b      	lsls	r3, r3, #2
 8003526:	4413      	add	r3, r2
 8003528:	4a08      	ldr	r2, [pc, #32]	; (800354c <IPCC_SetDefaultCallbacks+0x48>)
 800352a:	605a      	str	r2, [r3, #4]
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	3301      	adds	r3, #1
 8003530:	60fb      	str	r3, [r7, #12]
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	2b05      	cmp	r3, #5
 8003536:	d9ec      	bls.n	8003512 <IPCC_SetDefaultCallbacks+0xe>
 8003538:	bf00      	nop
 800353a:	bf00      	nop
 800353c:	3714      	adds	r7, #20
 800353e:	46bd      	mov	sp, r7
 8003540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003544:	4770      	bx	lr
 8003546:	bf00      	nop
 8003548:	080034d1 	.word	0x080034d1
 800354c:	080034eb 	.word	0x080034eb

08003550 <IPCC_Reset_Register>:
 8003550:	b480      	push	{r7}
 8003552:	b083      	sub	sp, #12
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2200      	movs	r2, #0
 800355c:	601a      	str	r2, [r3, #0]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
 8003564:	605a      	str	r2, [r3, #4]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	223f      	movs	r2, #63	; 0x3f
 800356a:	609a      	str	r2, [r3, #8]
 800356c:	bf00      	nop
 800356e:	370c      	adds	r7, #12
 8003570:	46bd      	mov	sp, r7
 8003572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003576:	4770      	bx	lr

08003578 <HAL_PWR_EnableBkUpAccess>:
 8003578:	b480      	push	{r7}
 800357a:	af00      	add	r7, sp, #0
 800357c:	4b05      	ldr	r3, [pc, #20]	; (8003594 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a04      	ldr	r2, [pc, #16]	; (8003594 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003582:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003586:	6013      	str	r3, [r2, #0]
 8003588:	bf00      	nop
 800358a:	46bd      	mov	sp, r7
 800358c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003590:	4770      	bx	lr
 8003592:	bf00      	nop
 8003594:	58000400 	.word	0x58000400

08003598 <HAL_PWREx_GetVoltageRange>:
 8003598:	b480      	push	{r7}
 800359a:	af00      	add	r7, sp, #0
 800359c:	4b04      	ldr	r3, [pc, #16]	; (80035b0 <HAL_PWREx_GetVoltageRange+0x18>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80035a4:	4618      	mov	r0, r3
 80035a6:	46bd      	mov	sp, r7
 80035a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ac:	4770      	bx	lr
 80035ae:	bf00      	nop
 80035b0:	58000400 	.word	0x58000400

080035b4 <LL_RCC_HSE_IsEnabledDiv2>:
 80035b4:	b480      	push	{r7}
 80035b6:	af00      	add	r7, sp, #0
 80035b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80035c6:	d101      	bne.n	80035cc <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80035c8:	2301      	movs	r3, #1
 80035ca:	e000      	b.n	80035ce <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80035cc:	2300      	movs	r3, #0
 80035ce:	4618      	mov	r0, r3
 80035d0:	46bd      	mov	sp, r7
 80035d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d6:	4770      	bx	lr

080035d8 <LL_RCC_HSE_Enable>:
 80035d8:	b480      	push	{r7}
 80035da:	af00      	add	r7, sp, #0
 80035dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80035e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035ea:	6013      	str	r3, [r2, #0]
 80035ec:	bf00      	nop
 80035ee:	46bd      	mov	sp, r7
 80035f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f4:	4770      	bx	lr

080035f6 <LL_RCC_HSE_Disable>:
 80035f6:	b480      	push	{r7}
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003604:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003608:	6013      	str	r3, [r2, #0]
 800360a:	bf00      	nop
 800360c:	46bd      	mov	sp, r7
 800360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003612:	4770      	bx	lr

08003614 <LL_RCC_HSE_IsReady>:
 8003614:	b480      	push	{r7}
 8003616:	af00      	add	r7, sp, #0
 8003618:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003622:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003626:	d101      	bne.n	800362c <LL_RCC_HSE_IsReady+0x18>
 8003628:	2301      	movs	r3, #1
 800362a:	e000      	b.n	800362e <LL_RCC_HSE_IsReady+0x1a>
 800362c:	2300      	movs	r3, #0
 800362e:	4618      	mov	r0, r3
 8003630:	46bd      	mov	sp, r7
 8003632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003636:	4770      	bx	lr

08003638 <LL_RCC_HSI_Enable>:
 8003638:	b480      	push	{r7}
 800363a:	af00      	add	r7, sp, #0
 800363c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003646:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800364a:	6013      	str	r3, [r2, #0]
 800364c:	bf00      	nop
 800364e:	46bd      	mov	sp, r7
 8003650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003654:	4770      	bx	lr

08003656 <LL_RCC_HSI_Disable>:
 8003656:	b480      	push	{r7}
 8003658:	af00      	add	r7, sp, #0
 800365a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003664:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003668:	6013      	str	r3, [r2, #0]
 800366a:	bf00      	nop
 800366c:	46bd      	mov	sp, r7
 800366e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003672:	4770      	bx	lr

08003674 <LL_RCC_HSI_IsReady>:
 8003674:	b480      	push	{r7}
 8003676:	af00      	add	r7, sp, #0
 8003678:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003682:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003686:	d101      	bne.n	800368c <LL_RCC_HSI_IsReady+0x18>
 8003688:	2301      	movs	r3, #1
 800368a:	e000      	b.n	800368e <LL_RCC_HSI_IsReady+0x1a>
 800368c:	2300      	movs	r3, #0
 800368e:	4618      	mov	r0, r3
 8003690:	46bd      	mov	sp, r7
 8003692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003696:	4770      	bx	lr

08003698 <LL_RCC_HSI_SetCalibTrimming>:
 8003698:	b480      	push	{r7}
 800369a:	b083      	sub	sp, #12
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
 80036a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	061b      	lsls	r3, r3, #24
 80036ae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80036b2:	4313      	orrs	r3, r2
 80036b4:	604b      	str	r3, [r1, #4]
 80036b6:	bf00      	nop
 80036b8:	370c      	adds	r7, #12
 80036ba:	46bd      	mov	sp, r7
 80036bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c0:	4770      	bx	lr

080036c2 <LL_RCC_HSI48_Enable>:
 80036c2:	b480      	push	{r7}
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80036ce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80036d2:	f043 0301 	orr.w	r3, r3, #1
 80036d6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
 80036da:	bf00      	nop
 80036dc:	46bd      	mov	sp, r7
 80036de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e2:	4770      	bx	lr

080036e4 <LL_RCC_HSI48_Disable>:
 80036e4:	b480      	push	{r7}
 80036e6:	af00      	add	r7, sp, #0
 80036e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80036f0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80036f4:	f023 0301 	bic.w	r3, r3, #1
 80036f8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
 80036fc:	bf00      	nop
 80036fe:	46bd      	mov	sp, r7
 8003700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003704:	4770      	bx	lr

08003706 <LL_RCC_HSI48_IsReady>:
 8003706:	b480      	push	{r7}
 8003708:	af00      	add	r7, sp, #0
 800370a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800370e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003712:	f003 0302 	and.w	r3, r3, #2
 8003716:	2b02      	cmp	r3, #2
 8003718:	d101      	bne.n	800371e <LL_RCC_HSI48_IsReady+0x18>
 800371a:	2301      	movs	r3, #1
 800371c:	e000      	b.n	8003720 <LL_RCC_HSI48_IsReady+0x1a>
 800371e:	2300      	movs	r3, #0
 8003720:	4618      	mov	r0, r3
 8003722:	46bd      	mov	sp, r7
 8003724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003728:	4770      	bx	lr

0800372a <LL_RCC_LSE_Enable>:
 800372a:	b480      	push	{r7}
 800372c:	af00      	add	r7, sp, #0
 800372e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003732:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003736:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800373a:	f043 0301 	orr.w	r3, r3, #1
 800373e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003742:	bf00      	nop
 8003744:	46bd      	mov	sp, r7
 8003746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374a:	4770      	bx	lr

0800374c <LL_RCC_LSE_Disable>:
 800374c:	b480      	push	{r7}
 800374e:	af00      	add	r7, sp, #0
 8003750:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003754:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003758:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800375c:	f023 0301 	bic.w	r3, r3, #1
 8003760:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003764:	bf00      	nop
 8003766:	46bd      	mov	sp, r7
 8003768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376c:	4770      	bx	lr

0800376e <LL_RCC_LSE_EnableBypass>:
 800376e:	b480      	push	{r7}
 8003770:	af00      	add	r7, sp, #0
 8003772:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003776:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800377a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800377e:	f043 0304 	orr.w	r3, r3, #4
 8003782:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003786:	bf00      	nop
 8003788:	46bd      	mov	sp, r7
 800378a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378e:	4770      	bx	lr

08003790 <LL_RCC_LSE_DisableBypass>:
 8003790:	b480      	push	{r7}
 8003792:	af00      	add	r7, sp, #0
 8003794:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003798:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800379c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80037a0:	f023 0304 	bic.w	r3, r3, #4
 80037a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80037a8:	bf00      	nop
 80037aa:	46bd      	mov	sp, r7
 80037ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b0:	4770      	bx	lr

080037b2 <LL_RCC_LSE_IsReady>:
 80037b2:	b480      	push	{r7}
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037be:	f003 0302 	and.w	r3, r3, #2
 80037c2:	2b02      	cmp	r3, #2
 80037c4:	d101      	bne.n	80037ca <LL_RCC_LSE_IsReady+0x18>
 80037c6:	2301      	movs	r3, #1
 80037c8:	e000      	b.n	80037cc <LL_RCC_LSE_IsReady+0x1a>
 80037ca:	2300      	movs	r3, #0
 80037cc:	4618      	mov	r0, r3
 80037ce:	46bd      	mov	sp, r7
 80037d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d4:	4770      	bx	lr

080037d6 <LL_RCC_LSI1_Enable>:
 80037d6:	b480      	push	{r7}
 80037d8:	af00      	add	r7, sp, #0
 80037da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037e2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80037e6:	f043 0301 	orr.w	r3, r3, #1
 80037ea:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80037ee:	bf00      	nop
 80037f0:	46bd      	mov	sp, r7
 80037f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f6:	4770      	bx	lr

080037f8 <LL_RCC_LSI1_Disable>:
 80037f8:	b480      	push	{r7}
 80037fa:	af00      	add	r7, sp, #0
 80037fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003800:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003804:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003808:	f023 0301 	bic.w	r3, r3, #1
 800380c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8003810:	bf00      	nop
 8003812:	46bd      	mov	sp, r7
 8003814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003818:	4770      	bx	lr

0800381a <LL_RCC_LSI1_IsReady>:
 800381a:	b480      	push	{r7}
 800381c:	af00      	add	r7, sp, #0
 800381e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003822:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003826:	f003 0302 	and.w	r3, r3, #2
 800382a:	2b02      	cmp	r3, #2
 800382c:	d101      	bne.n	8003832 <LL_RCC_LSI1_IsReady+0x18>
 800382e:	2301      	movs	r3, #1
 8003830:	e000      	b.n	8003834 <LL_RCC_LSI1_IsReady+0x1a>
 8003832:	2300      	movs	r3, #0
 8003834:	4618      	mov	r0, r3
 8003836:	46bd      	mov	sp, r7
 8003838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383c:	4770      	bx	lr

0800383e <LL_RCC_LSI2_Enable>:
 800383e:	b480      	push	{r7}
 8003840:	af00      	add	r7, sp, #0
 8003842:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003846:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800384a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800384e:	f043 0304 	orr.w	r3, r3, #4
 8003852:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8003856:	bf00      	nop
 8003858:	46bd      	mov	sp, r7
 800385a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385e:	4770      	bx	lr

08003860 <LL_RCC_LSI2_Disable>:
 8003860:	b480      	push	{r7}
 8003862:	af00      	add	r7, sp, #0
 8003864:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003868:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800386c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003870:	f023 0304 	bic.w	r3, r3, #4
 8003874:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8003878:	bf00      	nop
 800387a:	46bd      	mov	sp, r7
 800387c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003880:	4770      	bx	lr

08003882 <LL_RCC_LSI2_IsReady>:
 8003882:	b480      	push	{r7}
 8003884:	af00      	add	r7, sp, #0
 8003886:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800388a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800388e:	f003 0308 	and.w	r3, r3, #8
 8003892:	2b08      	cmp	r3, #8
 8003894:	d101      	bne.n	800389a <LL_RCC_LSI2_IsReady+0x18>
 8003896:	2301      	movs	r3, #1
 8003898:	e000      	b.n	800389c <LL_RCC_LSI2_IsReady+0x1a>
 800389a:	2300      	movs	r3, #0
 800389c:	4618      	mov	r0, r3
 800389e:	46bd      	mov	sp, r7
 80038a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a4:	4770      	bx	lr

080038a6 <LL_RCC_LSI2_SetTrimming>:
 80038a6:	b480      	push	{r7}
 80038a8:	b083      	sub	sp, #12
 80038aa:	af00      	add	r7, sp, #0
 80038ac:	6078      	str	r0, [r7, #4]
 80038ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038b6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	021b      	lsls	r3, r3, #8
 80038be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80038c2:	4313      	orrs	r3, r2
 80038c4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
 80038c8:	bf00      	nop
 80038ca:	370c      	adds	r7, #12
 80038cc:	46bd      	mov	sp, r7
 80038ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d2:	4770      	bx	lr

080038d4 <LL_RCC_MSI_Enable>:
 80038d4:	b480      	push	{r7}
 80038d6:	af00      	add	r7, sp, #0
 80038d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80038e2:	f043 0301 	orr.w	r3, r3, #1
 80038e6:	6013      	str	r3, [r2, #0]
 80038e8:	bf00      	nop
 80038ea:	46bd      	mov	sp, r7
 80038ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f0:	4770      	bx	lr

080038f2 <LL_RCC_MSI_Disable>:
 80038f2:	b480      	push	{r7}
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003900:	f023 0301 	bic.w	r3, r3, #1
 8003904:	6013      	str	r3, [r2, #0]
 8003906:	bf00      	nop
 8003908:	46bd      	mov	sp, r7
 800390a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390e:	4770      	bx	lr

08003910 <LL_RCC_MSI_IsReady>:
 8003910:	b480      	push	{r7}
 8003912:	af00      	add	r7, sp, #0
 8003914:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f003 0302 	and.w	r3, r3, #2
 800391e:	2b02      	cmp	r3, #2
 8003920:	d101      	bne.n	8003926 <LL_RCC_MSI_IsReady+0x16>
 8003922:	2301      	movs	r3, #1
 8003924:	e000      	b.n	8003928 <LL_RCC_MSI_IsReady+0x18>
 8003926:	2300      	movs	r3, #0
 8003928:	4618      	mov	r0, r3
 800392a:	46bd      	mov	sp, r7
 800392c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003930:	4770      	bx	lr

08003932 <LL_RCC_MSI_SetRange>:
 8003932:	b480      	push	{r7}
 8003934:	b083      	sub	sp, #12
 8003936:	af00      	add	r7, sp, #0
 8003938:	6078      	str	r0, [r7, #4]
 800393a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003944:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	4313      	orrs	r3, r2
 800394c:	600b      	str	r3, [r1, #0]
 800394e:	bf00      	nop
 8003950:	370c      	adds	r7, #12
 8003952:	46bd      	mov	sp, r7
 8003954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003958:	4770      	bx	lr

0800395a <LL_RCC_MSI_GetRange>:
 800395a:	b480      	push	{r7}
 800395c:	b083      	sub	sp, #12
 800395e:	af00      	add	r7, sp, #0
 8003960:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800396a:	607b      	str	r3, [r7, #4]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2bb0      	cmp	r3, #176	; 0xb0
 8003970:	d901      	bls.n	8003976 <LL_RCC_MSI_GetRange+0x1c>
 8003972:	23b0      	movs	r3, #176	; 0xb0
 8003974:	607b      	str	r3, [r7, #4]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	4618      	mov	r0, r3
 800397a:	370c      	adds	r7, #12
 800397c:	46bd      	mov	sp, r7
 800397e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003982:	4770      	bx	lr

08003984 <LL_RCC_MSI_SetCalibTrimming>:
 8003984:	b480      	push	{r7}
 8003986:	b083      	sub	sp, #12
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
 800398c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	021b      	lsls	r3, r3, #8
 800399a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800399e:	4313      	orrs	r3, r2
 80039a0:	604b      	str	r3, [r1, #4]
 80039a2:	bf00      	nop
 80039a4:	370c      	adds	r7, #12
 80039a6:	46bd      	mov	sp, r7
 80039a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ac:	4770      	bx	lr

080039ae <LL_RCC_SetSysClkSource>:
 80039ae:	b480      	push	{r7}
 80039b0:	b083      	sub	sp, #12
 80039b2:	af00      	add	r7, sp, #0
 80039b4:	6078      	str	r0, [r7, #4]
 80039b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	f023 0203 	bic.w	r2, r3, #3
 80039c0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	4313      	orrs	r3, r2
 80039c8:	608b      	str	r3, [r1, #8]
 80039ca:	bf00      	nop
 80039cc:	370c      	adds	r7, #12
 80039ce:	46bd      	mov	sp, r7
 80039d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d4:	4770      	bx	lr

080039d6 <LL_RCC_GetSysClkSource>:
 80039d6:	b480      	push	{r7}
 80039d8:	af00      	add	r7, sp, #0
 80039da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	f003 030c 	and.w	r3, r3, #12
 80039e4:	4618      	mov	r0, r3
 80039e6:	46bd      	mov	sp, r7
 80039e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ec:	4770      	bx	lr

080039ee <LL_RCC_SetAHBPrescaler>:
 80039ee:	b480      	push	{r7}
 80039f0:	b083      	sub	sp, #12
 80039f2:	af00      	add	r7, sp, #0
 80039f4:	6078      	str	r0, [r7, #4]
 80039f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a00:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	4313      	orrs	r3, r2
 8003a08:	608b      	str	r3, [r1, #8]
 8003a0a:	bf00      	nop
 8003a0c:	370c      	adds	r7, #12
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a14:	4770      	bx	lr

08003a16 <LL_C2_RCC_SetAHBPrescaler>:
 8003a16:	b480      	push	{r7}
 8003a18:	b083      	sub	sp, #12
 8003a1a:	af00      	add	r7, sp, #0
 8003a1c:	6078      	str	r0, [r7, #4]
 8003a1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a22:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003a26:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a2a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	4313      	orrs	r3, r2
 8003a32:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
 8003a36:	bf00      	nop
 8003a38:	370c      	adds	r7, #12
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a40:	4770      	bx	lr

08003a42 <LL_RCC_SetAHB4Prescaler>:
 8003a42:	b480      	push	{r7}
 8003a44:	b083      	sub	sp, #12
 8003a46:	af00      	add	r7, sp, #0
 8003a48:	6078      	str	r0, [r7, #4]
 8003a4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a4e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003a52:	f023 020f 	bic.w	r2, r3, #15
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	091b      	lsrs	r3, r3, #4
 8003a5a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
 8003a64:	bf00      	nop
 8003a66:	370c      	adds	r7, #12
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6e:	4770      	bx	lr

08003a70 <LL_RCC_SetAPB1Prescaler>:
 8003a70:	b480      	push	{r7}
 8003a72:	b083      	sub	sp, #12
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
 8003a78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a7c:	689b      	ldr	r3, [r3, #8]
 8003a7e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003a82:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	608b      	str	r3, [r1, #8]
 8003a8c:	bf00      	nop
 8003a8e:	370c      	adds	r7, #12
 8003a90:	46bd      	mov	sp, r7
 8003a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a96:	4770      	bx	lr

08003a98 <LL_RCC_SetAPB2Prescaler>:
 8003a98:	b480      	push	{r7}
 8003a9a:	b083      	sub	sp, #12
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
 8003aa0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003aa4:	689b      	ldr	r3, [r3, #8]
 8003aa6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003aaa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	608b      	str	r3, [r1, #8]
 8003ab4:	bf00      	nop
 8003ab6:	370c      	adds	r7, #12
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abe:	4770      	bx	lr

08003ac0 <LL_RCC_GetAHBPrescaler>:
 8003ac0:	b480      	push	{r7}
 8003ac2:	af00      	add	r7, sp, #0
 8003ac4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ace:	4618      	mov	r0, r3
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad6:	4770      	bx	lr

08003ad8 <LL_RCC_GetAHB4Prescaler>:
 8003ad8:	b480      	push	{r7}
 8003ada:	af00      	add	r7, sp, #0
 8003adc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ae0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003ae4:	011b      	lsls	r3, r3, #4
 8003ae6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003aea:	4618      	mov	r0, r3
 8003aec:	46bd      	mov	sp, r7
 8003aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af2:	4770      	bx	lr

08003af4 <LL_RCC_GetAPB1Prescaler>:
 8003af4:	b480      	push	{r7}
 8003af6:	af00      	add	r7, sp, #0
 8003af8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003b02:	4618      	mov	r0, r3
 8003b04:	46bd      	mov	sp, r7
 8003b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0a:	4770      	bx	lr

08003b0c <LL_RCC_GetAPB2Prescaler>:
 8003b0c:	b480      	push	{r7}
 8003b0e:	af00      	add	r7, sp, #0
 8003b10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b14:	689b      	ldr	r3, [r3, #8]
 8003b16:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b22:	4770      	bx	lr

08003b24 <LL_RCC_PLL_Enable>:
 8003b24:	b480      	push	{r7}
 8003b26:	af00      	add	r7, sp, #0
 8003b28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b36:	6013      	str	r3, [r2, #0]
 8003b38:	bf00      	nop
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b40:	4770      	bx	lr

08003b42 <LL_RCC_PLL_Disable>:
 8003b42:	b480      	push	{r7}
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b50:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b54:	6013      	str	r3, [r2, #0]
 8003b56:	bf00      	nop
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5e:	4770      	bx	lr

08003b60 <LL_RCC_PLL_IsReady>:
 8003b60:	b480      	push	{r7}
 8003b62:	af00      	add	r7, sp, #0
 8003b64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b6e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003b72:	d101      	bne.n	8003b78 <LL_RCC_PLL_IsReady+0x18>
 8003b74:	2301      	movs	r3, #1
 8003b76:	e000      	b.n	8003b7a <LL_RCC_PLL_IsReady+0x1a>
 8003b78:	2300      	movs	r3, #0
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b82:	4770      	bx	lr

08003b84 <LL_RCC_PLL_GetN>:
 8003b84:	b480      	push	{r7}
 8003b86:	af00      	add	r7, sp, #0
 8003b88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b8c:	68db      	ldr	r3, [r3, #12]
 8003b8e:	0a1b      	lsrs	r3, r3, #8
 8003b90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b94:	4618      	mov	r0, r3
 8003b96:	46bd      	mov	sp, r7
 8003b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9c:	4770      	bx	lr

08003b9e <LL_RCC_PLL_GetR>:
 8003b9e:	b480      	push	{r7}
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ba6:	68db      	ldr	r3, [r3, #12]
 8003ba8:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
 8003bac:	4618      	mov	r0, r3
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb4:	4770      	bx	lr

08003bb6 <LL_RCC_PLL_GetDivider>:
 8003bb6:	b480      	push	{r7}
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bbe:	68db      	ldr	r3, [r3, #12]
 8003bc0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bcc:	4770      	bx	lr

08003bce <LL_RCC_PLL_GetMainSource>:
 8003bce:	b480      	push	{r7}
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bd6:	68db      	ldr	r3, [r3, #12]
 8003bd8:	f003 0303 	and.w	r3, r3, #3
 8003bdc:	4618      	mov	r0, r3
 8003bde:	46bd      	mov	sp, r7
 8003be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be4:	4770      	bx	lr

08003be6 <LL_RCC_IsActiveFlag_HPRE>:
 8003be6:	b480      	push	{r7}
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bf4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bf8:	d101      	bne.n	8003bfe <LL_RCC_IsActiveFlag_HPRE+0x18>
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e000      	b.n	8003c00 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8003bfe:	2300      	movs	r3, #0
 8003c00:	4618      	mov	r0, r3
 8003c02:	46bd      	mov	sp, r7
 8003c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c08:	4770      	bx	lr

08003c0a <LL_RCC_IsActiveFlag_C2HPRE>:
 8003c0a:	b480      	push	{r7}
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c12:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003c16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c1a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003c1e:	d101      	bne.n	8003c24 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8003c20:	2301      	movs	r3, #1
 8003c22:	e000      	b.n	8003c26 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8003c24:	2300      	movs	r3, #0
 8003c26:	4618      	mov	r0, r3
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2e:	4770      	bx	lr

08003c30 <LL_RCC_IsActiveFlag_SHDHPRE>:
 8003c30:	b480      	push	{r7}
 8003c32:	af00      	add	r7, sp, #0
 8003c34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c38:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003c3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c44:	d101      	bne.n	8003c4a <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8003c46:	2301      	movs	r3, #1
 8003c48:	e000      	b.n	8003c4c <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c54:	4770      	bx	lr

08003c56 <LL_RCC_IsActiveFlag_PPRE1>:
 8003c56:	b480      	push	{r7}
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c5e:	689b      	ldr	r3, [r3, #8]
 8003c60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c64:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003c68:	d101      	bne.n	8003c6e <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	e000      	b.n	8003c70 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8003c6e:	2300      	movs	r3, #0
 8003c70:	4618      	mov	r0, r3
 8003c72:	46bd      	mov	sp, r7
 8003c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c78:	4770      	bx	lr

08003c7a <LL_RCC_IsActiveFlag_PPRE2>:
 8003c7a:	b480      	push	{r7}
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c82:	689b      	ldr	r3, [r3, #8]
 8003c84:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c88:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003c8c:	d101      	bne.n	8003c92 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e000      	b.n	8003c94 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8003c92:	2300      	movs	r3, #0
 8003c94:	4618      	mov	r0, r3
 8003c96:	46bd      	mov	sp, r7
 8003c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9c:	4770      	bx	lr
	...

08003ca0 <HAL_RCC_OscConfig>:
 8003ca0:	b590      	push	{r4, r7, lr}
 8003ca2:	b08d      	sub	sp, #52	; 0x34
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d101      	bne.n	8003cb2 <HAL_RCC_OscConfig+0x12>
 8003cae:	2301      	movs	r3, #1
 8003cb0:	e363      	b.n	800437a <HAL_RCC_OscConfig+0x6da>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f003 0320 	and.w	r3, r3, #32
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	f000 808d 	beq.w	8003dda <HAL_RCC_OscConfig+0x13a>
 8003cc0:	f7ff fe89 	bl	80039d6 <LL_RCC_GetSysClkSource>
 8003cc4:	62f8      	str	r0, [r7, #44]	; 0x2c
 8003cc6:	f7ff ff82 	bl	8003bce <LL_RCC_PLL_GetMainSource>
 8003cca:	62b8      	str	r0, [r7, #40]	; 0x28
 8003ccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d005      	beq.n	8003cde <HAL_RCC_OscConfig+0x3e>
 8003cd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cd4:	2b0c      	cmp	r3, #12
 8003cd6:	d147      	bne.n	8003d68 <HAL_RCC_OscConfig+0xc8>
 8003cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cda:	2b01      	cmp	r3, #1
 8003cdc:	d144      	bne.n	8003d68 <HAL_RCC_OscConfig+0xc8>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	69db      	ldr	r3, [r3, #28]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d101      	bne.n	8003cea <HAL_RCC_OscConfig+0x4a>
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e347      	b.n	800437a <HAL_RCC_OscConfig+0x6da>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8003cee:	f7ff fe34 	bl	800395a <LL_RCC_MSI_GetRange>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	429c      	cmp	r4, r3
 8003cf6:	d914      	bls.n	8003d22 <HAL_RCC_OscConfig+0x82>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	f000 fd2f 	bl	8004760 <RCC_SetFlashLatencyFromMSIRange>
 8003d02:	4603      	mov	r3, r0
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d001      	beq.n	8003d0c <HAL_RCC_OscConfig+0x6c>
 8003d08:	2301      	movs	r3, #1
 8003d0a:	e336      	b.n	800437a <HAL_RCC_OscConfig+0x6da>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d10:	4618      	mov	r0, r3
 8003d12:	f7ff fe0e 	bl	8003932 <LL_RCC_MSI_SetRange>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6a1b      	ldr	r3, [r3, #32]
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f7ff fe32 	bl	8003984 <LL_RCC_MSI_SetCalibTrimming>
 8003d20:	e013      	b.n	8003d4a <HAL_RCC_OscConfig+0xaa>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d26:	4618      	mov	r0, r3
 8003d28:	f7ff fe03 	bl	8003932 <LL_RCC_MSI_SetRange>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6a1b      	ldr	r3, [r3, #32]
 8003d30:	4618      	mov	r0, r3
 8003d32:	f7ff fe27 	bl	8003984 <LL_RCC_MSI_SetCalibTrimming>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f000 fd10 	bl	8004760 <RCC_SetFlashLatencyFromMSIRange>
 8003d40:	4603      	mov	r3, r0
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d001      	beq.n	8003d4a <HAL_RCC_OscConfig+0xaa>
 8003d46:	2301      	movs	r3, #1
 8003d48:	e317      	b.n	800437a <HAL_RCC_OscConfig+0x6da>
 8003d4a:	f000 fcc9 	bl	80046e0 <HAL_RCC_GetHCLKFreq>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	4aa4      	ldr	r2, [pc, #656]	; (8003fe4 <HAL_RCC_OscConfig+0x344>)
 8003d52:	6013      	str	r3, [r2, #0]
 8003d54:	4ba4      	ldr	r3, [pc, #656]	; (8003fe8 <HAL_RCC_OscConfig+0x348>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4618      	mov	r0, r3
 8003d5a:	f7fe fb0f 	bl	800237c <HAL_InitTick>
 8003d5e:	4603      	mov	r3, r0
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d039      	beq.n	8003dd8 <HAL_RCC_OscConfig+0x138>
 8003d64:	2301      	movs	r3, #1
 8003d66:	e308      	b.n	800437a <HAL_RCC_OscConfig+0x6da>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	69db      	ldr	r3, [r3, #28]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d01e      	beq.n	8003dae <HAL_RCC_OscConfig+0x10e>
 8003d70:	f7ff fdb0 	bl	80038d4 <LL_RCC_MSI_Enable>
 8003d74:	f7fe fb50 	bl	8002418 <HAL_GetTick>
 8003d78:	6278      	str	r0, [r7, #36]	; 0x24
 8003d7a:	e008      	b.n	8003d8e <HAL_RCC_OscConfig+0xee>
 8003d7c:	f7fe fb4c 	bl	8002418 <HAL_GetTick>
 8003d80:	4602      	mov	r2, r0
 8003d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d84:	1ad3      	subs	r3, r2, r3
 8003d86:	2b02      	cmp	r3, #2
 8003d88:	d901      	bls.n	8003d8e <HAL_RCC_OscConfig+0xee>
 8003d8a:	2303      	movs	r3, #3
 8003d8c:	e2f5      	b.n	800437a <HAL_RCC_OscConfig+0x6da>
 8003d8e:	f7ff fdbf 	bl	8003910 <LL_RCC_MSI_IsReady>
 8003d92:	4603      	mov	r3, r0
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d0f1      	beq.n	8003d7c <HAL_RCC_OscConfig+0xdc>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	f7ff fdc8 	bl	8003932 <LL_RCC_MSI_SetRange>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6a1b      	ldr	r3, [r3, #32]
 8003da6:	4618      	mov	r0, r3
 8003da8:	f7ff fdec 	bl	8003984 <LL_RCC_MSI_SetCalibTrimming>
 8003dac:	e015      	b.n	8003dda <HAL_RCC_OscConfig+0x13a>
 8003dae:	f7ff fda0 	bl	80038f2 <LL_RCC_MSI_Disable>
 8003db2:	f7fe fb31 	bl	8002418 <HAL_GetTick>
 8003db6:	6278      	str	r0, [r7, #36]	; 0x24
 8003db8:	e008      	b.n	8003dcc <HAL_RCC_OscConfig+0x12c>
 8003dba:	f7fe fb2d 	bl	8002418 <HAL_GetTick>
 8003dbe:	4602      	mov	r2, r0
 8003dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc2:	1ad3      	subs	r3, r2, r3
 8003dc4:	2b02      	cmp	r3, #2
 8003dc6:	d901      	bls.n	8003dcc <HAL_RCC_OscConfig+0x12c>
 8003dc8:	2303      	movs	r3, #3
 8003dca:	e2d6      	b.n	800437a <HAL_RCC_OscConfig+0x6da>
 8003dcc:	f7ff fda0 	bl	8003910 <LL_RCC_MSI_IsReady>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d1f1      	bne.n	8003dba <HAL_RCC_OscConfig+0x11a>
 8003dd6:	e000      	b.n	8003dda <HAL_RCC_OscConfig+0x13a>
 8003dd8:	bf00      	nop
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f003 0301 	and.w	r3, r3, #1
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d047      	beq.n	8003e76 <HAL_RCC_OscConfig+0x1d6>
 8003de6:	f7ff fdf6 	bl	80039d6 <LL_RCC_GetSysClkSource>
 8003dea:	6238      	str	r0, [r7, #32]
 8003dec:	f7ff feef 	bl	8003bce <LL_RCC_PLL_GetMainSource>
 8003df0:	61f8      	str	r0, [r7, #28]
 8003df2:	6a3b      	ldr	r3, [r7, #32]
 8003df4:	2b08      	cmp	r3, #8
 8003df6:	d005      	beq.n	8003e04 <HAL_RCC_OscConfig+0x164>
 8003df8:	6a3b      	ldr	r3, [r7, #32]
 8003dfa:	2b0c      	cmp	r3, #12
 8003dfc:	d108      	bne.n	8003e10 <HAL_RCC_OscConfig+0x170>
 8003dfe:	69fb      	ldr	r3, [r7, #28]
 8003e00:	2b03      	cmp	r3, #3
 8003e02:	d105      	bne.n	8003e10 <HAL_RCC_OscConfig+0x170>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d134      	bne.n	8003e76 <HAL_RCC_OscConfig+0x1d6>
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	e2b4      	b.n	800437a <HAL_RCC_OscConfig+0x6da>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e18:	d102      	bne.n	8003e20 <HAL_RCC_OscConfig+0x180>
 8003e1a:	f7ff fbdd 	bl	80035d8 <LL_RCC_HSE_Enable>
 8003e1e:	e001      	b.n	8003e24 <HAL_RCC_OscConfig+0x184>
 8003e20:	f7ff fbe9 	bl	80035f6 <LL_RCC_HSE_Disable>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d012      	beq.n	8003e52 <HAL_RCC_OscConfig+0x1b2>
 8003e2c:	f7fe faf4 	bl	8002418 <HAL_GetTick>
 8003e30:	6278      	str	r0, [r7, #36]	; 0x24
 8003e32:	e008      	b.n	8003e46 <HAL_RCC_OscConfig+0x1a6>
 8003e34:	f7fe faf0 	bl	8002418 <HAL_GetTick>
 8003e38:	4602      	mov	r2, r0
 8003e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e3c:	1ad3      	subs	r3, r2, r3
 8003e3e:	2b64      	cmp	r3, #100	; 0x64
 8003e40:	d901      	bls.n	8003e46 <HAL_RCC_OscConfig+0x1a6>
 8003e42:	2303      	movs	r3, #3
 8003e44:	e299      	b.n	800437a <HAL_RCC_OscConfig+0x6da>
 8003e46:	f7ff fbe5 	bl	8003614 <LL_RCC_HSE_IsReady>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d0f1      	beq.n	8003e34 <HAL_RCC_OscConfig+0x194>
 8003e50:	e011      	b.n	8003e76 <HAL_RCC_OscConfig+0x1d6>
 8003e52:	f7fe fae1 	bl	8002418 <HAL_GetTick>
 8003e56:	6278      	str	r0, [r7, #36]	; 0x24
 8003e58:	e008      	b.n	8003e6c <HAL_RCC_OscConfig+0x1cc>
 8003e5a:	f7fe fadd 	bl	8002418 <HAL_GetTick>
 8003e5e:	4602      	mov	r2, r0
 8003e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e62:	1ad3      	subs	r3, r2, r3
 8003e64:	2b64      	cmp	r3, #100	; 0x64
 8003e66:	d901      	bls.n	8003e6c <HAL_RCC_OscConfig+0x1cc>
 8003e68:	2303      	movs	r3, #3
 8003e6a:	e286      	b.n	800437a <HAL_RCC_OscConfig+0x6da>
 8003e6c:	f7ff fbd2 	bl	8003614 <LL_RCC_HSE_IsReady>
 8003e70:	4603      	mov	r3, r0
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d1f1      	bne.n	8003e5a <HAL_RCC_OscConfig+0x1ba>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f003 0302 	and.w	r3, r3, #2
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d04c      	beq.n	8003f1c <HAL_RCC_OscConfig+0x27c>
 8003e82:	f7ff fda8 	bl	80039d6 <LL_RCC_GetSysClkSource>
 8003e86:	61b8      	str	r0, [r7, #24]
 8003e88:	f7ff fea1 	bl	8003bce <LL_RCC_PLL_GetMainSource>
 8003e8c:	6178      	str	r0, [r7, #20]
 8003e8e:	69bb      	ldr	r3, [r7, #24]
 8003e90:	2b04      	cmp	r3, #4
 8003e92:	d005      	beq.n	8003ea0 <HAL_RCC_OscConfig+0x200>
 8003e94:	69bb      	ldr	r3, [r7, #24]
 8003e96:	2b0c      	cmp	r3, #12
 8003e98:	d10e      	bne.n	8003eb8 <HAL_RCC_OscConfig+0x218>
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	2b02      	cmp	r3, #2
 8003e9e:	d10b      	bne.n	8003eb8 <HAL_RCC_OscConfig+0x218>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	68db      	ldr	r3, [r3, #12]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d101      	bne.n	8003eac <HAL_RCC_OscConfig+0x20c>
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	e266      	b.n	800437a <HAL_RCC_OscConfig+0x6da>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	691b      	ldr	r3, [r3, #16]
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	f7ff fbf1 	bl	8003698 <LL_RCC_HSI_SetCalibTrimming>
 8003eb6:	e031      	b.n	8003f1c <HAL_RCC_OscConfig+0x27c>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	68db      	ldr	r3, [r3, #12]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d019      	beq.n	8003ef4 <HAL_RCC_OscConfig+0x254>
 8003ec0:	f7ff fbba 	bl	8003638 <LL_RCC_HSI_Enable>
 8003ec4:	f7fe faa8 	bl	8002418 <HAL_GetTick>
 8003ec8:	6278      	str	r0, [r7, #36]	; 0x24
 8003eca:	e008      	b.n	8003ede <HAL_RCC_OscConfig+0x23e>
 8003ecc:	f7fe faa4 	bl	8002418 <HAL_GetTick>
 8003ed0:	4602      	mov	r2, r0
 8003ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed4:	1ad3      	subs	r3, r2, r3
 8003ed6:	2b02      	cmp	r3, #2
 8003ed8:	d901      	bls.n	8003ede <HAL_RCC_OscConfig+0x23e>
 8003eda:	2303      	movs	r3, #3
 8003edc:	e24d      	b.n	800437a <HAL_RCC_OscConfig+0x6da>
 8003ede:	f7ff fbc9 	bl	8003674 <LL_RCC_HSI_IsReady>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d0f1      	beq.n	8003ecc <HAL_RCC_OscConfig+0x22c>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	691b      	ldr	r3, [r3, #16]
 8003eec:	4618      	mov	r0, r3
 8003eee:	f7ff fbd3 	bl	8003698 <LL_RCC_HSI_SetCalibTrimming>
 8003ef2:	e013      	b.n	8003f1c <HAL_RCC_OscConfig+0x27c>
 8003ef4:	f7ff fbaf 	bl	8003656 <LL_RCC_HSI_Disable>
 8003ef8:	f7fe fa8e 	bl	8002418 <HAL_GetTick>
 8003efc:	6278      	str	r0, [r7, #36]	; 0x24
 8003efe:	e008      	b.n	8003f12 <HAL_RCC_OscConfig+0x272>
 8003f00:	f7fe fa8a 	bl	8002418 <HAL_GetTick>
 8003f04:	4602      	mov	r2, r0
 8003f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f08:	1ad3      	subs	r3, r2, r3
 8003f0a:	2b02      	cmp	r3, #2
 8003f0c:	d901      	bls.n	8003f12 <HAL_RCC_OscConfig+0x272>
 8003f0e:	2303      	movs	r3, #3
 8003f10:	e233      	b.n	800437a <HAL_RCC_OscConfig+0x6da>
 8003f12:	f7ff fbaf 	bl	8003674 <LL_RCC_HSI_IsReady>
 8003f16:	4603      	mov	r3, r0
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d1f1      	bne.n	8003f00 <HAL_RCC_OscConfig+0x260>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f003 0308 	and.w	r3, r3, #8
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d106      	bne.n	8003f36 <HAL_RCC_OscConfig+0x296>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f003 0310 	and.w	r3, r3, #16
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	f000 80a3 	beq.w	800407c <HAL_RCC_OscConfig+0x3dc>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	695b      	ldr	r3, [r3, #20]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d076      	beq.n	800402c <HAL_RCC_OscConfig+0x38c>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f003 0310 	and.w	r3, r3, #16
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d046      	beq.n	8003fd8 <HAL_RCC_OscConfig+0x338>
 8003f4a:	f7ff fc66 	bl	800381a <LL_RCC_LSI1_IsReady>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d113      	bne.n	8003f7c <HAL_RCC_OscConfig+0x2dc>
 8003f54:	f7ff fc3f 	bl	80037d6 <LL_RCC_LSI1_Enable>
 8003f58:	f7fe fa5e 	bl	8002418 <HAL_GetTick>
 8003f5c:	6278      	str	r0, [r7, #36]	; 0x24
 8003f5e:	e008      	b.n	8003f72 <HAL_RCC_OscConfig+0x2d2>
 8003f60:	f7fe fa5a 	bl	8002418 <HAL_GetTick>
 8003f64:	4602      	mov	r2, r0
 8003f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f68:	1ad3      	subs	r3, r2, r3
 8003f6a:	2b02      	cmp	r3, #2
 8003f6c:	d901      	bls.n	8003f72 <HAL_RCC_OscConfig+0x2d2>
 8003f6e:	2303      	movs	r3, #3
 8003f70:	e203      	b.n	800437a <HAL_RCC_OscConfig+0x6da>
 8003f72:	f7ff fc52 	bl	800381a <LL_RCC_LSI1_IsReady>
 8003f76:	4603      	mov	r3, r0
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d0f1      	beq.n	8003f60 <HAL_RCC_OscConfig+0x2c0>
 8003f7c:	f7ff fc5f 	bl	800383e <LL_RCC_LSI2_Enable>
 8003f80:	f7fe fa4a 	bl	8002418 <HAL_GetTick>
 8003f84:	6278      	str	r0, [r7, #36]	; 0x24
 8003f86:	e008      	b.n	8003f9a <HAL_RCC_OscConfig+0x2fa>
 8003f88:	f7fe fa46 	bl	8002418 <HAL_GetTick>
 8003f8c:	4602      	mov	r2, r0
 8003f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f90:	1ad3      	subs	r3, r2, r3
 8003f92:	2b03      	cmp	r3, #3
 8003f94:	d901      	bls.n	8003f9a <HAL_RCC_OscConfig+0x2fa>
 8003f96:	2303      	movs	r3, #3
 8003f98:	e1ef      	b.n	800437a <HAL_RCC_OscConfig+0x6da>
 8003f9a:	f7ff fc72 	bl	8003882 <LL_RCC_LSI2_IsReady>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d0f1      	beq.n	8003f88 <HAL_RCC_OscConfig+0x2e8>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	699b      	ldr	r3, [r3, #24]
 8003fa8:	4618      	mov	r0, r3
 8003faa:	f7ff fc7c 	bl	80038a6 <LL_RCC_LSI2_SetTrimming>
 8003fae:	f7ff fc23 	bl	80037f8 <LL_RCC_LSI1_Disable>
 8003fb2:	f7fe fa31 	bl	8002418 <HAL_GetTick>
 8003fb6:	6278      	str	r0, [r7, #36]	; 0x24
 8003fb8:	e008      	b.n	8003fcc <HAL_RCC_OscConfig+0x32c>
 8003fba:	f7fe fa2d 	bl	8002418 <HAL_GetTick>
 8003fbe:	4602      	mov	r2, r0
 8003fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc2:	1ad3      	subs	r3, r2, r3
 8003fc4:	2b02      	cmp	r3, #2
 8003fc6:	d901      	bls.n	8003fcc <HAL_RCC_OscConfig+0x32c>
 8003fc8:	2303      	movs	r3, #3
 8003fca:	e1d6      	b.n	800437a <HAL_RCC_OscConfig+0x6da>
 8003fcc:	f7ff fc25 	bl	800381a <LL_RCC_LSI1_IsReady>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d1f1      	bne.n	8003fba <HAL_RCC_OscConfig+0x31a>
 8003fd6:	e051      	b.n	800407c <HAL_RCC_OscConfig+0x3dc>
 8003fd8:	f7ff fbfd 	bl	80037d6 <LL_RCC_LSI1_Enable>
 8003fdc:	f7fe fa1c 	bl	8002418 <HAL_GetTick>
 8003fe0:	6278      	str	r0, [r7, #36]	; 0x24
 8003fe2:	e00c      	b.n	8003ffe <HAL_RCC_OscConfig+0x35e>
 8003fe4:	20000008 	.word	0x20000008
 8003fe8:	2000000c 	.word	0x2000000c
 8003fec:	f7fe fa14 	bl	8002418 <HAL_GetTick>
 8003ff0:	4602      	mov	r2, r0
 8003ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff4:	1ad3      	subs	r3, r2, r3
 8003ff6:	2b02      	cmp	r3, #2
 8003ff8:	d901      	bls.n	8003ffe <HAL_RCC_OscConfig+0x35e>
 8003ffa:	2303      	movs	r3, #3
 8003ffc:	e1bd      	b.n	800437a <HAL_RCC_OscConfig+0x6da>
 8003ffe:	f7ff fc0c 	bl	800381a <LL_RCC_LSI1_IsReady>
 8004002:	4603      	mov	r3, r0
 8004004:	2b00      	cmp	r3, #0
 8004006:	d0f1      	beq.n	8003fec <HAL_RCC_OscConfig+0x34c>
 8004008:	f7ff fc2a 	bl	8003860 <LL_RCC_LSI2_Disable>
 800400c:	e008      	b.n	8004020 <HAL_RCC_OscConfig+0x380>
 800400e:	f7fe fa03 	bl	8002418 <HAL_GetTick>
 8004012:	4602      	mov	r2, r0
 8004014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004016:	1ad3      	subs	r3, r2, r3
 8004018:	2b03      	cmp	r3, #3
 800401a:	d901      	bls.n	8004020 <HAL_RCC_OscConfig+0x380>
 800401c:	2303      	movs	r3, #3
 800401e:	e1ac      	b.n	800437a <HAL_RCC_OscConfig+0x6da>
 8004020:	f7ff fc2f 	bl	8003882 <LL_RCC_LSI2_IsReady>
 8004024:	4603      	mov	r3, r0
 8004026:	2b00      	cmp	r3, #0
 8004028:	d1f1      	bne.n	800400e <HAL_RCC_OscConfig+0x36e>
 800402a:	e027      	b.n	800407c <HAL_RCC_OscConfig+0x3dc>
 800402c:	f7ff fc18 	bl	8003860 <LL_RCC_LSI2_Disable>
 8004030:	f7fe f9f2 	bl	8002418 <HAL_GetTick>
 8004034:	6278      	str	r0, [r7, #36]	; 0x24
 8004036:	e008      	b.n	800404a <HAL_RCC_OscConfig+0x3aa>
 8004038:	f7fe f9ee 	bl	8002418 <HAL_GetTick>
 800403c:	4602      	mov	r2, r0
 800403e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004040:	1ad3      	subs	r3, r2, r3
 8004042:	2b03      	cmp	r3, #3
 8004044:	d901      	bls.n	800404a <HAL_RCC_OscConfig+0x3aa>
 8004046:	2303      	movs	r3, #3
 8004048:	e197      	b.n	800437a <HAL_RCC_OscConfig+0x6da>
 800404a:	f7ff fc1a 	bl	8003882 <LL_RCC_LSI2_IsReady>
 800404e:	4603      	mov	r3, r0
 8004050:	2b00      	cmp	r3, #0
 8004052:	d1f1      	bne.n	8004038 <HAL_RCC_OscConfig+0x398>
 8004054:	f7ff fbd0 	bl	80037f8 <LL_RCC_LSI1_Disable>
 8004058:	f7fe f9de 	bl	8002418 <HAL_GetTick>
 800405c:	6278      	str	r0, [r7, #36]	; 0x24
 800405e:	e008      	b.n	8004072 <HAL_RCC_OscConfig+0x3d2>
 8004060:	f7fe f9da 	bl	8002418 <HAL_GetTick>
 8004064:	4602      	mov	r2, r0
 8004066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004068:	1ad3      	subs	r3, r2, r3
 800406a:	2b02      	cmp	r3, #2
 800406c:	d901      	bls.n	8004072 <HAL_RCC_OscConfig+0x3d2>
 800406e:	2303      	movs	r3, #3
 8004070:	e183      	b.n	800437a <HAL_RCC_OscConfig+0x6da>
 8004072:	f7ff fbd2 	bl	800381a <LL_RCC_LSI1_IsReady>
 8004076:	4603      	mov	r3, r0
 8004078:	2b00      	cmp	r3, #0
 800407a:	d1f1      	bne.n	8004060 <HAL_RCC_OscConfig+0x3c0>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f003 0304 	and.w	r3, r3, #4
 8004084:	2b00      	cmp	r3, #0
 8004086:	d05b      	beq.n	8004140 <HAL_RCC_OscConfig+0x4a0>
 8004088:	4ba7      	ldr	r3, [pc, #668]	; (8004328 <HAL_RCC_OscConfig+0x688>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004090:	2b00      	cmp	r3, #0
 8004092:	d114      	bne.n	80040be <HAL_RCC_OscConfig+0x41e>
 8004094:	f7ff fa70 	bl	8003578 <HAL_PWR_EnableBkUpAccess>
 8004098:	f7fe f9be 	bl	8002418 <HAL_GetTick>
 800409c:	6278      	str	r0, [r7, #36]	; 0x24
 800409e:	e008      	b.n	80040b2 <HAL_RCC_OscConfig+0x412>
 80040a0:	f7fe f9ba 	bl	8002418 <HAL_GetTick>
 80040a4:	4602      	mov	r2, r0
 80040a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a8:	1ad3      	subs	r3, r2, r3
 80040aa:	2b02      	cmp	r3, #2
 80040ac:	d901      	bls.n	80040b2 <HAL_RCC_OscConfig+0x412>
 80040ae:	2303      	movs	r3, #3
 80040b0:	e163      	b.n	800437a <HAL_RCC_OscConfig+0x6da>
 80040b2:	4b9d      	ldr	r3, [pc, #628]	; (8004328 <HAL_RCC_OscConfig+0x688>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d0f0      	beq.n	80040a0 <HAL_RCC_OscConfig+0x400>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	689b      	ldr	r3, [r3, #8]
 80040c2:	2b01      	cmp	r3, #1
 80040c4:	d102      	bne.n	80040cc <HAL_RCC_OscConfig+0x42c>
 80040c6:	f7ff fb30 	bl	800372a <LL_RCC_LSE_Enable>
 80040ca:	e00c      	b.n	80040e6 <HAL_RCC_OscConfig+0x446>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	689b      	ldr	r3, [r3, #8]
 80040d0:	2b05      	cmp	r3, #5
 80040d2:	d104      	bne.n	80040de <HAL_RCC_OscConfig+0x43e>
 80040d4:	f7ff fb4b 	bl	800376e <LL_RCC_LSE_EnableBypass>
 80040d8:	f7ff fb27 	bl	800372a <LL_RCC_LSE_Enable>
 80040dc:	e003      	b.n	80040e6 <HAL_RCC_OscConfig+0x446>
 80040de:	f7ff fb35 	bl	800374c <LL_RCC_LSE_Disable>
 80040e2:	f7ff fb55 	bl	8003790 <LL_RCC_LSE_DisableBypass>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	689b      	ldr	r3, [r3, #8]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d014      	beq.n	8004118 <HAL_RCC_OscConfig+0x478>
 80040ee:	f7fe f993 	bl	8002418 <HAL_GetTick>
 80040f2:	6278      	str	r0, [r7, #36]	; 0x24
 80040f4:	e00a      	b.n	800410c <HAL_RCC_OscConfig+0x46c>
 80040f6:	f7fe f98f 	bl	8002418 <HAL_GetTick>
 80040fa:	4602      	mov	r2, r0
 80040fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040fe:	1ad3      	subs	r3, r2, r3
 8004100:	f241 3288 	movw	r2, #5000	; 0x1388
 8004104:	4293      	cmp	r3, r2
 8004106:	d901      	bls.n	800410c <HAL_RCC_OscConfig+0x46c>
 8004108:	2303      	movs	r3, #3
 800410a:	e136      	b.n	800437a <HAL_RCC_OscConfig+0x6da>
 800410c:	f7ff fb51 	bl	80037b2 <LL_RCC_LSE_IsReady>
 8004110:	4603      	mov	r3, r0
 8004112:	2b00      	cmp	r3, #0
 8004114:	d0ef      	beq.n	80040f6 <HAL_RCC_OscConfig+0x456>
 8004116:	e013      	b.n	8004140 <HAL_RCC_OscConfig+0x4a0>
 8004118:	f7fe f97e 	bl	8002418 <HAL_GetTick>
 800411c:	6278      	str	r0, [r7, #36]	; 0x24
 800411e:	e00a      	b.n	8004136 <HAL_RCC_OscConfig+0x496>
 8004120:	f7fe f97a 	bl	8002418 <HAL_GetTick>
 8004124:	4602      	mov	r2, r0
 8004126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004128:	1ad3      	subs	r3, r2, r3
 800412a:	f241 3288 	movw	r2, #5000	; 0x1388
 800412e:	4293      	cmp	r3, r2
 8004130:	d901      	bls.n	8004136 <HAL_RCC_OscConfig+0x496>
 8004132:	2303      	movs	r3, #3
 8004134:	e121      	b.n	800437a <HAL_RCC_OscConfig+0x6da>
 8004136:	f7ff fb3c 	bl	80037b2 <LL_RCC_LSE_IsReady>
 800413a:	4603      	mov	r3, r0
 800413c:	2b00      	cmp	r3, #0
 800413e:	d1ef      	bne.n	8004120 <HAL_RCC_OscConfig+0x480>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004148:	2b00      	cmp	r3, #0
 800414a:	d02c      	beq.n	80041a6 <HAL_RCC_OscConfig+0x506>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004150:	2b00      	cmp	r3, #0
 8004152:	d014      	beq.n	800417e <HAL_RCC_OscConfig+0x4de>
 8004154:	f7ff fab5 	bl	80036c2 <LL_RCC_HSI48_Enable>
 8004158:	f7fe f95e 	bl	8002418 <HAL_GetTick>
 800415c:	6278      	str	r0, [r7, #36]	; 0x24
 800415e:	e008      	b.n	8004172 <HAL_RCC_OscConfig+0x4d2>
 8004160:	f7fe f95a 	bl	8002418 <HAL_GetTick>
 8004164:	4602      	mov	r2, r0
 8004166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004168:	1ad3      	subs	r3, r2, r3
 800416a:	2b02      	cmp	r3, #2
 800416c:	d901      	bls.n	8004172 <HAL_RCC_OscConfig+0x4d2>
 800416e:	2303      	movs	r3, #3
 8004170:	e103      	b.n	800437a <HAL_RCC_OscConfig+0x6da>
 8004172:	f7ff fac8 	bl	8003706 <LL_RCC_HSI48_IsReady>
 8004176:	4603      	mov	r3, r0
 8004178:	2b00      	cmp	r3, #0
 800417a:	d0f1      	beq.n	8004160 <HAL_RCC_OscConfig+0x4c0>
 800417c:	e013      	b.n	80041a6 <HAL_RCC_OscConfig+0x506>
 800417e:	f7ff fab1 	bl	80036e4 <LL_RCC_HSI48_Disable>
 8004182:	f7fe f949 	bl	8002418 <HAL_GetTick>
 8004186:	6278      	str	r0, [r7, #36]	; 0x24
 8004188:	e008      	b.n	800419c <HAL_RCC_OscConfig+0x4fc>
 800418a:	f7fe f945 	bl	8002418 <HAL_GetTick>
 800418e:	4602      	mov	r2, r0
 8004190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004192:	1ad3      	subs	r3, r2, r3
 8004194:	2b02      	cmp	r3, #2
 8004196:	d901      	bls.n	800419c <HAL_RCC_OscConfig+0x4fc>
 8004198:	2303      	movs	r3, #3
 800419a:	e0ee      	b.n	800437a <HAL_RCC_OscConfig+0x6da>
 800419c:	f7ff fab3 	bl	8003706 <LL_RCC_HSI48_IsReady>
 80041a0:	4603      	mov	r3, r0
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d1f1      	bne.n	800418a <HAL_RCC_OscConfig+0x4ea>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	f000 80e4 	beq.w	8004378 <HAL_RCC_OscConfig+0x6d8>
 80041b0:	f7ff fc11 	bl	80039d6 <LL_RCC_GetSysClkSource>
 80041b4:	6138      	str	r0, [r7, #16]
 80041b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041ba:	68db      	ldr	r3, [r3, #12]
 80041bc:	60fb      	str	r3, [r7, #12]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041c2:	2b02      	cmp	r3, #2
 80041c4:	f040 80b4 	bne.w	8004330 <HAL_RCC_OscConfig+0x690>
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	f003 0203 	and.w	r2, r3, #3
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041d2:	429a      	cmp	r2, r3
 80041d4:	d123      	bne.n	800421e <HAL_RCC_OscConfig+0x57e>
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041e0:	429a      	cmp	r2, r3
 80041e2:	d11c      	bne.n	800421e <HAL_RCC_OscConfig+0x57e>
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	0a1b      	lsrs	r3, r3, #8
 80041e8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041f0:	429a      	cmp	r2, r3
 80041f2:	d114      	bne.n	800421e <HAL_RCC_OscConfig+0x57e>
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041fe:	429a      	cmp	r2, r3
 8004200:	d10d      	bne.n	800421e <HAL_RCC_OscConfig+0x57e>
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800420c:	429a      	cmp	r2, r3
 800420e:	d106      	bne.n	800421e <HAL_RCC_OscConfig+0x57e>
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800421a:	429a      	cmp	r2, r3
 800421c:	d05d      	beq.n	80042da <HAL_RCC_OscConfig+0x63a>
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	2b0c      	cmp	r3, #12
 8004222:	d058      	beq.n	80042d6 <HAL_RCC_OscConfig+0x636>
 8004224:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800422e:	2b00      	cmp	r3, #0
 8004230:	d001      	beq.n	8004236 <HAL_RCC_OscConfig+0x596>
 8004232:	2301      	movs	r3, #1
 8004234:	e0a1      	b.n	800437a <HAL_RCC_OscConfig+0x6da>
 8004236:	f7ff fc84 	bl	8003b42 <LL_RCC_PLL_Disable>
 800423a:	f7fe f8ed 	bl	8002418 <HAL_GetTick>
 800423e:	6278      	str	r0, [r7, #36]	; 0x24
 8004240:	e008      	b.n	8004254 <HAL_RCC_OscConfig+0x5b4>
 8004242:	f7fe f8e9 	bl	8002418 <HAL_GetTick>
 8004246:	4602      	mov	r2, r0
 8004248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800424a:	1ad3      	subs	r3, r2, r3
 800424c:	2b02      	cmp	r3, #2
 800424e:	d901      	bls.n	8004254 <HAL_RCC_OscConfig+0x5b4>
 8004250:	2303      	movs	r3, #3
 8004252:	e092      	b.n	800437a <HAL_RCC_OscConfig+0x6da>
 8004254:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800425e:	2b00      	cmp	r3, #0
 8004260:	d1ef      	bne.n	8004242 <HAL_RCC_OscConfig+0x5a2>
 8004262:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004266:	68da      	ldr	r2, [r3, #12]
 8004268:	4b30      	ldr	r3, [pc, #192]	; (800432c <HAL_RCC_OscConfig+0x68c>)
 800426a:	4013      	ands	r3, r2
 800426c:	687a      	ldr	r2, [r7, #4]
 800426e:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8004270:	687a      	ldr	r2, [r7, #4]
 8004272:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004274:	4311      	orrs	r1, r2
 8004276:	687a      	ldr	r2, [r7, #4]
 8004278:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800427a:	0212      	lsls	r2, r2, #8
 800427c:	4311      	orrs	r1, r2
 800427e:	687a      	ldr	r2, [r7, #4]
 8004280:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004282:	4311      	orrs	r1, r2
 8004284:	687a      	ldr	r2, [r7, #4]
 8004286:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004288:	4311      	orrs	r1, r2
 800428a:	687a      	ldr	r2, [r7, #4]
 800428c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800428e:	430a      	orrs	r2, r1
 8004290:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004294:	4313      	orrs	r3, r2
 8004296:	60cb      	str	r3, [r1, #12]
 8004298:	f7ff fc44 	bl	8003b24 <LL_RCC_PLL_Enable>
 800429c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042a0:	68db      	ldr	r3, [r3, #12]
 80042a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80042a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042aa:	60d3      	str	r3, [r2, #12]
 80042ac:	f7fe f8b4 	bl	8002418 <HAL_GetTick>
 80042b0:	6278      	str	r0, [r7, #36]	; 0x24
 80042b2:	e008      	b.n	80042c6 <HAL_RCC_OscConfig+0x626>
 80042b4:	f7fe f8b0 	bl	8002418 <HAL_GetTick>
 80042b8:	4602      	mov	r2, r0
 80042ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042bc:	1ad3      	subs	r3, r2, r3
 80042be:	2b02      	cmp	r3, #2
 80042c0:	d901      	bls.n	80042c6 <HAL_RCC_OscConfig+0x626>
 80042c2:	2303      	movs	r3, #3
 80042c4:	e059      	b.n	800437a <HAL_RCC_OscConfig+0x6da>
 80042c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d0ef      	beq.n	80042b4 <HAL_RCC_OscConfig+0x614>
 80042d4:	e050      	b.n	8004378 <HAL_RCC_OscConfig+0x6d8>
 80042d6:	2301      	movs	r3, #1
 80042d8:	e04f      	b.n	800437a <HAL_RCC_OscConfig+0x6da>
 80042da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d147      	bne.n	8004378 <HAL_RCC_OscConfig+0x6d8>
 80042e8:	f7ff fc1c 	bl	8003b24 <LL_RCC_PLL_Enable>
 80042ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042f0:	68db      	ldr	r3, [r3, #12]
 80042f2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80042f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042fa:	60d3      	str	r3, [r2, #12]
 80042fc:	f7fe f88c 	bl	8002418 <HAL_GetTick>
 8004300:	6278      	str	r0, [r7, #36]	; 0x24
 8004302:	e008      	b.n	8004316 <HAL_RCC_OscConfig+0x676>
 8004304:	f7fe f888 	bl	8002418 <HAL_GetTick>
 8004308:	4602      	mov	r2, r0
 800430a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800430c:	1ad3      	subs	r3, r2, r3
 800430e:	2b02      	cmp	r3, #2
 8004310:	d901      	bls.n	8004316 <HAL_RCC_OscConfig+0x676>
 8004312:	2303      	movs	r3, #3
 8004314:	e031      	b.n	800437a <HAL_RCC_OscConfig+0x6da>
 8004316:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004320:	2b00      	cmp	r3, #0
 8004322:	d0ef      	beq.n	8004304 <HAL_RCC_OscConfig+0x664>
 8004324:	e028      	b.n	8004378 <HAL_RCC_OscConfig+0x6d8>
 8004326:	bf00      	nop
 8004328:	58000400 	.word	0x58000400
 800432c:	11c1808c 	.word	0x11c1808c
 8004330:	693b      	ldr	r3, [r7, #16]
 8004332:	2b0c      	cmp	r3, #12
 8004334:	d01e      	beq.n	8004374 <HAL_RCC_OscConfig+0x6d4>
 8004336:	f7ff fc04 	bl	8003b42 <LL_RCC_PLL_Disable>
 800433a:	f7fe f86d 	bl	8002418 <HAL_GetTick>
 800433e:	6278      	str	r0, [r7, #36]	; 0x24
 8004340:	e008      	b.n	8004354 <HAL_RCC_OscConfig+0x6b4>
 8004342:	f7fe f869 	bl	8002418 <HAL_GetTick>
 8004346:	4602      	mov	r2, r0
 8004348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800434a:	1ad3      	subs	r3, r2, r3
 800434c:	2b02      	cmp	r3, #2
 800434e:	d901      	bls.n	8004354 <HAL_RCC_OscConfig+0x6b4>
 8004350:	2303      	movs	r3, #3
 8004352:	e012      	b.n	800437a <HAL_RCC_OscConfig+0x6da>
 8004354:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800435e:	2b00      	cmp	r3, #0
 8004360:	d1ef      	bne.n	8004342 <HAL_RCC_OscConfig+0x6a2>
 8004362:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004366:	68da      	ldr	r2, [r3, #12]
 8004368:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800436c:	4b05      	ldr	r3, [pc, #20]	; (8004384 <HAL_RCC_OscConfig+0x6e4>)
 800436e:	4013      	ands	r3, r2
 8004370:	60cb      	str	r3, [r1, #12]
 8004372:	e001      	b.n	8004378 <HAL_RCC_OscConfig+0x6d8>
 8004374:	2301      	movs	r3, #1
 8004376:	e000      	b.n	800437a <HAL_RCC_OscConfig+0x6da>
 8004378:	2300      	movs	r3, #0
 800437a:	4618      	mov	r0, r3
 800437c:	3734      	adds	r7, #52	; 0x34
 800437e:	46bd      	mov	sp, r7
 8004380:	bd90      	pop	{r4, r7, pc}
 8004382:	bf00      	nop
 8004384:	eefefffc 	.word	0xeefefffc

08004388 <HAL_RCC_ClockConfig>:
 8004388:	b580      	push	{r7, lr}
 800438a:	b084      	sub	sp, #16
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
 8004390:	6039      	str	r1, [r7, #0]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d101      	bne.n	800439c <HAL_RCC_ClockConfig+0x14>
 8004398:	2301      	movs	r3, #1
 800439a:	e12d      	b.n	80045f8 <HAL_RCC_ClockConfig+0x270>
 800439c:	4b98      	ldr	r3, [pc, #608]	; (8004600 <HAL_RCC_ClockConfig+0x278>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f003 0307 	and.w	r3, r3, #7
 80043a4:	683a      	ldr	r2, [r7, #0]
 80043a6:	429a      	cmp	r2, r3
 80043a8:	d91b      	bls.n	80043e2 <HAL_RCC_ClockConfig+0x5a>
 80043aa:	4b95      	ldr	r3, [pc, #596]	; (8004600 <HAL_RCC_ClockConfig+0x278>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f023 0207 	bic.w	r2, r3, #7
 80043b2:	4993      	ldr	r1, [pc, #588]	; (8004600 <HAL_RCC_ClockConfig+0x278>)
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	4313      	orrs	r3, r2
 80043b8:	600b      	str	r3, [r1, #0]
 80043ba:	f7fe f82d 	bl	8002418 <HAL_GetTick>
 80043be:	60f8      	str	r0, [r7, #12]
 80043c0:	e008      	b.n	80043d4 <HAL_RCC_ClockConfig+0x4c>
 80043c2:	f7fe f829 	bl	8002418 <HAL_GetTick>
 80043c6:	4602      	mov	r2, r0
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	1ad3      	subs	r3, r2, r3
 80043cc:	2b02      	cmp	r3, #2
 80043ce:	d901      	bls.n	80043d4 <HAL_RCC_ClockConfig+0x4c>
 80043d0:	2303      	movs	r3, #3
 80043d2:	e111      	b.n	80045f8 <HAL_RCC_ClockConfig+0x270>
 80043d4:	4b8a      	ldr	r3, [pc, #552]	; (8004600 <HAL_RCC_ClockConfig+0x278>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f003 0307 	and.w	r3, r3, #7
 80043dc:	683a      	ldr	r2, [r7, #0]
 80043de:	429a      	cmp	r2, r3
 80043e0:	d1ef      	bne.n	80043c2 <HAL_RCC_ClockConfig+0x3a>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f003 0302 	and.w	r3, r3, #2
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d016      	beq.n	800441c <HAL_RCC_ClockConfig+0x94>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	689b      	ldr	r3, [r3, #8]
 80043f2:	4618      	mov	r0, r3
 80043f4:	f7ff fafb 	bl	80039ee <LL_RCC_SetAHBPrescaler>
 80043f8:	f7fe f80e 	bl	8002418 <HAL_GetTick>
 80043fc:	60f8      	str	r0, [r7, #12]
 80043fe:	e008      	b.n	8004412 <HAL_RCC_ClockConfig+0x8a>
 8004400:	f7fe f80a 	bl	8002418 <HAL_GetTick>
 8004404:	4602      	mov	r2, r0
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	1ad3      	subs	r3, r2, r3
 800440a:	2b02      	cmp	r3, #2
 800440c:	d901      	bls.n	8004412 <HAL_RCC_ClockConfig+0x8a>
 800440e:	2303      	movs	r3, #3
 8004410:	e0f2      	b.n	80045f8 <HAL_RCC_ClockConfig+0x270>
 8004412:	f7ff fbe8 	bl	8003be6 <LL_RCC_IsActiveFlag_HPRE>
 8004416:	4603      	mov	r3, r0
 8004418:	2b00      	cmp	r3, #0
 800441a:	d0f1      	beq.n	8004400 <HAL_RCC_ClockConfig+0x78>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f003 0320 	and.w	r3, r3, #32
 8004424:	2b00      	cmp	r3, #0
 8004426:	d016      	beq.n	8004456 <HAL_RCC_ClockConfig+0xce>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	695b      	ldr	r3, [r3, #20]
 800442c:	4618      	mov	r0, r3
 800442e:	f7ff faf2 	bl	8003a16 <LL_C2_RCC_SetAHBPrescaler>
 8004432:	f7fd fff1 	bl	8002418 <HAL_GetTick>
 8004436:	60f8      	str	r0, [r7, #12]
 8004438:	e008      	b.n	800444c <HAL_RCC_ClockConfig+0xc4>
 800443a:	f7fd ffed 	bl	8002418 <HAL_GetTick>
 800443e:	4602      	mov	r2, r0
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	1ad3      	subs	r3, r2, r3
 8004444:	2b02      	cmp	r3, #2
 8004446:	d901      	bls.n	800444c <HAL_RCC_ClockConfig+0xc4>
 8004448:	2303      	movs	r3, #3
 800444a:	e0d5      	b.n	80045f8 <HAL_RCC_ClockConfig+0x270>
 800444c:	f7ff fbdd 	bl	8003c0a <LL_RCC_IsActiveFlag_C2HPRE>
 8004450:	4603      	mov	r3, r0
 8004452:	2b00      	cmp	r3, #0
 8004454:	d0f1      	beq.n	800443a <HAL_RCC_ClockConfig+0xb2>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800445e:	2b00      	cmp	r3, #0
 8004460:	d016      	beq.n	8004490 <HAL_RCC_ClockConfig+0x108>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	699b      	ldr	r3, [r3, #24]
 8004466:	4618      	mov	r0, r3
 8004468:	f7ff faeb 	bl	8003a42 <LL_RCC_SetAHB4Prescaler>
 800446c:	f7fd ffd4 	bl	8002418 <HAL_GetTick>
 8004470:	60f8      	str	r0, [r7, #12]
 8004472:	e008      	b.n	8004486 <HAL_RCC_ClockConfig+0xfe>
 8004474:	f7fd ffd0 	bl	8002418 <HAL_GetTick>
 8004478:	4602      	mov	r2, r0
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	1ad3      	subs	r3, r2, r3
 800447e:	2b02      	cmp	r3, #2
 8004480:	d901      	bls.n	8004486 <HAL_RCC_ClockConfig+0xfe>
 8004482:	2303      	movs	r3, #3
 8004484:	e0b8      	b.n	80045f8 <HAL_RCC_ClockConfig+0x270>
 8004486:	f7ff fbd3 	bl	8003c30 <LL_RCC_IsActiveFlag_SHDHPRE>
 800448a:	4603      	mov	r3, r0
 800448c:	2b00      	cmp	r3, #0
 800448e:	d0f1      	beq.n	8004474 <HAL_RCC_ClockConfig+0xec>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f003 0304 	and.w	r3, r3, #4
 8004498:	2b00      	cmp	r3, #0
 800449a:	d016      	beq.n	80044ca <HAL_RCC_ClockConfig+0x142>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	68db      	ldr	r3, [r3, #12]
 80044a0:	4618      	mov	r0, r3
 80044a2:	f7ff fae5 	bl	8003a70 <LL_RCC_SetAPB1Prescaler>
 80044a6:	f7fd ffb7 	bl	8002418 <HAL_GetTick>
 80044aa:	60f8      	str	r0, [r7, #12]
 80044ac:	e008      	b.n	80044c0 <HAL_RCC_ClockConfig+0x138>
 80044ae:	f7fd ffb3 	bl	8002418 <HAL_GetTick>
 80044b2:	4602      	mov	r2, r0
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	1ad3      	subs	r3, r2, r3
 80044b8:	2b02      	cmp	r3, #2
 80044ba:	d901      	bls.n	80044c0 <HAL_RCC_ClockConfig+0x138>
 80044bc:	2303      	movs	r3, #3
 80044be:	e09b      	b.n	80045f8 <HAL_RCC_ClockConfig+0x270>
 80044c0:	f7ff fbc9 	bl	8003c56 <LL_RCC_IsActiveFlag_PPRE1>
 80044c4:	4603      	mov	r3, r0
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d0f1      	beq.n	80044ae <HAL_RCC_ClockConfig+0x126>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f003 0308 	and.w	r3, r3, #8
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d017      	beq.n	8004506 <HAL_RCC_ClockConfig+0x17e>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	691b      	ldr	r3, [r3, #16]
 80044da:	00db      	lsls	r3, r3, #3
 80044dc:	4618      	mov	r0, r3
 80044de:	f7ff fadb 	bl	8003a98 <LL_RCC_SetAPB2Prescaler>
 80044e2:	f7fd ff99 	bl	8002418 <HAL_GetTick>
 80044e6:	60f8      	str	r0, [r7, #12]
 80044e8:	e008      	b.n	80044fc <HAL_RCC_ClockConfig+0x174>
 80044ea:	f7fd ff95 	bl	8002418 <HAL_GetTick>
 80044ee:	4602      	mov	r2, r0
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	1ad3      	subs	r3, r2, r3
 80044f4:	2b02      	cmp	r3, #2
 80044f6:	d901      	bls.n	80044fc <HAL_RCC_ClockConfig+0x174>
 80044f8:	2303      	movs	r3, #3
 80044fa:	e07d      	b.n	80045f8 <HAL_RCC_ClockConfig+0x270>
 80044fc:	f7ff fbbd 	bl	8003c7a <LL_RCC_IsActiveFlag_PPRE2>
 8004500:	4603      	mov	r3, r0
 8004502:	2b00      	cmp	r3, #0
 8004504:	d0f1      	beq.n	80044ea <HAL_RCC_ClockConfig+0x162>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f003 0301 	and.w	r3, r3, #1
 800450e:	2b00      	cmp	r3, #0
 8004510:	d043      	beq.n	800459a <HAL_RCC_ClockConfig+0x212>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	2b02      	cmp	r3, #2
 8004518:	d106      	bne.n	8004528 <HAL_RCC_ClockConfig+0x1a0>
 800451a:	f7ff f87b 	bl	8003614 <LL_RCC_HSE_IsReady>
 800451e:	4603      	mov	r3, r0
 8004520:	2b00      	cmp	r3, #0
 8004522:	d11e      	bne.n	8004562 <HAL_RCC_ClockConfig+0x1da>
 8004524:	2301      	movs	r3, #1
 8004526:	e067      	b.n	80045f8 <HAL_RCC_ClockConfig+0x270>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	2b03      	cmp	r3, #3
 800452e:	d106      	bne.n	800453e <HAL_RCC_ClockConfig+0x1b6>
 8004530:	f7ff fb16 	bl	8003b60 <LL_RCC_PLL_IsReady>
 8004534:	4603      	mov	r3, r0
 8004536:	2b00      	cmp	r3, #0
 8004538:	d113      	bne.n	8004562 <HAL_RCC_ClockConfig+0x1da>
 800453a:	2301      	movs	r3, #1
 800453c:	e05c      	b.n	80045f8 <HAL_RCC_ClockConfig+0x270>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d106      	bne.n	8004554 <HAL_RCC_ClockConfig+0x1cc>
 8004546:	f7ff f9e3 	bl	8003910 <LL_RCC_MSI_IsReady>
 800454a:	4603      	mov	r3, r0
 800454c:	2b00      	cmp	r3, #0
 800454e:	d108      	bne.n	8004562 <HAL_RCC_ClockConfig+0x1da>
 8004550:	2301      	movs	r3, #1
 8004552:	e051      	b.n	80045f8 <HAL_RCC_ClockConfig+0x270>
 8004554:	f7ff f88e 	bl	8003674 <LL_RCC_HSI_IsReady>
 8004558:	4603      	mov	r3, r0
 800455a:	2b00      	cmp	r3, #0
 800455c:	d101      	bne.n	8004562 <HAL_RCC_ClockConfig+0x1da>
 800455e:	2301      	movs	r3, #1
 8004560:	e04a      	b.n	80045f8 <HAL_RCC_ClockConfig+0x270>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	4618      	mov	r0, r3
 8004568:	f7ff fa21 	bl	80039ae <LL_RCC_SetSysClkSource>
 800456c:	f7fd ff54 	bl	8002418 <HAL_GetTick>
 8004570:	60f8      	str	r0, [r7, #12]
 8004572:	e00a      	b.n	800458a <HAL_RCC_ClockConfig+0x202>
 8004574:	f7fd ff50 	bl	8002418 <HAL_GetTick>
 8004578:	4602      	mov	r2, r0
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	1ad3      	subs	r3, r2, r3
 800457e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004582:	4293      	cmp	r3, r2
 8004584:	d901      	bls.n	800458a <HAL_RCC_ClockConfig+0x202>
 8004586:	2303      	movs	r3, #3
 8004588:	e036      	b.n	80045f8 <HAL_RCC_ClockConfig+0x270>
 800458a:	f7ff fa24 	bl	80039d6 <LL_RCC_GetSysClkSource>
 800458e:	4602      	mov	r2, r0
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	009b      	lsls	r3, r3, #2
 8004596:	429a      	cmp	r2, r3
 8004598:	d1ec      	bne.n	8004574 <HAL_RCC_ClockConfig+0x1ec>
 800459a:	4b19      	ldr	r3, [pc, #100]	; (8004600 <HAL_RCC_ClockConfig+0x278>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f003 0307 	and.w	r3, r3, #7
 80045a2:	683a      	ldr	r2, [r7, #0]
 80045a4:	429a      	cmp	r2, r3
 80045a6:	d21b      	bcs.n	80045e0 <HAL_RCC_ClockConfig+0x258>
 80045a8:	4b15      	ldr	r3, [pc, #84]	; (8004600 <HAL_RCC_ClockConfig+0x278>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f023 0207 	bic.w	r2, r3, #7
 80045b0:	4913      	ldr	r1, [pc, #76]	; (8004600 <HAL_RCC_ClockConfig+0x278>)
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	4313      	orrs	r3, r2
 80045b6:	600b      	str	r3, [r1, #0]
 80045b8:	f7fd ff2e 	bl	8002418 <HAL_GetTick>
 80045bc:	60f8      	str	r0, [r7, #12]
 80045be:	e008      	b.n	80045d2 <HAL_RCC_ClockConfig+0x24a>
 80045c0:	f7fd ff2a 	bl	8002418 <HAL_GetTick>
 80045c4:	4602      	mov	r2, r0
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	1ad3      	subs	r3, r2, r3
 80045ca:	2b02      	cmp	r3, #2
 80045cc:	d901      	bls.n	80045d2 <HAL_RCC_ClockConfig+0x24a>
 80045ce:	2303      	movs	r3, #3
 80045d0:	e012      	b.n	80045f8 <HAL_RCC_ClockConfig+0x270>
 80045d2:	4b0b      	ldr	r3, [pc, #44]	; (8004600 <HAL_RCC_ClockConfig+0x278>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f003 0307 	and.w	r3, r3, #7
 80045da:	683a      	ldr	r2, [r7, #0]
 80045dc:	429a      	cmp	r2, r3
 80045de:	d1ef      	bne.n	80045c0 <HAL_RCC_ClockConfig+0x238>
 80045e0:	f000 f87e 	bl	80046e0 <HAL_RCC_GetHCLKFreq>
 80045e4:	4603      	mov	r3, r0
 80045e6:	4a07      	ldr	r2, [pc, #28]	; (8004604 <HAL_RCC_ClockConfig+0x27c>)
 80045e8:	6013      	str	r3, [r2, #0]
 80045ea:	f7fd ff21 	bl	8002430 <HAL_GetTickPrio>
 80045ee:	4603      	mov	r3, r0
 80045f0:	4618      	mov	r0, r3
 80045f2:	f7fd fec3 	bl	800237c <HAL_InitTick>
 80045f6:	4603      	mov	r3, r0
 80045f8:	4618      	mov	r0, r3
 80045fa:	3710      	adds	r7, #16
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bd80      	pop	{r7, pc}
 8004600:	58004000 	.word	0x58004000
 8004604:	20000008 	.word	0x20000008

08004608 <HAL_RCC_GetSysClockFreq>:
 8004608:	b590      	push	{r4, r7, lr}
 800460a:	b085      	sub	sp, #20
 800460c:	af00      	add	r7, sp, #0
 800460e:	f7ff f9e2 	bl	80039d6 <LL_RCC_GetSysClkSource>
 8004612:	6078      	str	r0, [r7, #4]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d10a      	bne.n	8004630 <HAL_RCC_GetSysClockFreq+0x28>
 800461a:	f7ff f99e 	bl	800395a <LL_RCC_MSI_GetRange>
 800461e:	4603      	mov	r3, r0
 8004620:	091b      	lsrs	r3, r3, #4
 8004622:	f003 030f 	and.w	r3, r3, #15
 8004626:	4a2b      	ldr	r2, [pc, #172]	; (80046d4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004628:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800462c:	60fb      	str	r3, [r7, #12]
 800462e:	e04b      	b.n	80046c8 <HAL_RCC_GetSysClockFreq+0xc0>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2b04      	cmp	r3, #4
 8004634:	d102      	bne.n	800463c <HAL_RCC_GetSysClockFreq+0x34>
 8004636:	4b28      	ldr	r3, [pc, #160]	; (80046d8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004638:	60fb      	str	r3, [r7, #12]
 800463a:	e045      	b.n	80046c8 <HAL_RCC_GetSysClockFreq+0xc0>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2b08      	cmp	r3, #8
 8004640:	d10a      	bne.n	8004658 <HAL_RCC_GetSysClockFreq+0x50>
 8004642:	f7fe ffb7 	bl	80035b4 <LL_RCC_HSE_IsEnabledDiv2>
 8004646:	4603      	mov	r3, r0
 8004648:	2b01      	cmp	r3, #1
 800464a:	d102      	bne.n	8004652 <HAL_RCC_GetSysClockFreq+0x4a>
 800464c:	4b22      	ldr	r3, [pc, #136]	; (80046d8 <HAL_RCC_GetSysClockFreq+0xd0>)
 800464e:	60fb      	str	r3, [r7, #12]
 8004650:	e03a      	b.n	80046c8 <HAL_RCC_GetSysClockFreq+0xc0>
 8004652:	4b22      	ldr	r3, [pc, #136]	; (80046dc <HAL_RCC_GetSysClockFreq+0xd4>)
 8004654:	60fb      	str	r3, [r7, #12]
 8004656:	e037      	b.n	80046c8 <HAL_RCC_GetSysClockFreq+0xc0>
 8004658:	f7ff fab9 	bl	8003bce <LL_RCC_PLL_GetMainSource>
 800465c:	6038      	str	r0, [r7, #0]
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	2b02      	cmp	r3, #2
 8004662:	d003      	beq.n	800466c <HAL_RCC_GetSysClockFreq+0x64>
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	2b03      	cmp	r3, #3
 8004668:	d003      	beq.n	8004672 <HAL_RCC_GetSysClockFreq+0x6a>
 800466a:	e00d      	b.n	8004688 <HAL_RCC_GetSysClockFreq+0x80>
 800466c:	4b1a      	ldr	r3, [pc, #104]	; (80046d8 <HAL_RCC_GetSysClockFreq+0xd0>)
 800466e:	60bb      	str	r3, [r7, #8]
 8004670:	e015      	b.n	800469e <HAL_RCC_GetSysClockFreq+0x96>
 8004672:	f7fe ff9f 	bl	80035b4 <LL_RCC_HSE_IsEnabledDiv2>
 8004676:	4603      	mov	r3, r0
 8004678:	2b01      	cmp	r3, #1
 800467a:	d102      	bne.n	8004682 <HAL_RCC_GetSysClockFreq+0x7a>
 800467c:	4b16      	ldr	r3, [pc, #88]	; (80046d8 <HAL_RCC_GetSysClockFreq+0xd0>)
 800467e:	60bb      	str	r3, [r7, #8]
 8004680:	e00d      	b.n	800469e <HAL_RCC_GetSysClockFreq+0x96>
 8004682:	4b16      	ldr	r3, [pc, #88]	; (80046dc <HAL_RCC_GetSysClockFreq+0xd4>)
 8004684:	60bb      	str	r3, [r7, #8]
 8004686:	e00a      	b.n	800469e <HAL_RCC_GetSysClockFreq+0x96>
 8004688:	f7ff f967 	bl	800395a <LL_RCC_MSI_GetRange>
 800468c:	4603      	mov	r3, r0
 800468e:	091b      	lsrs	r3, r3, #4
 8004690:	f003 030f 	and.w	r3, r3, #15
 8004694:	4a0f      	ldr	r2, [pc, #60]	; (80046d4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004696:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800469a:	60bb      	str	r3, [r7, #8]
 800469c:	bf00      	nop
 800469e:	f7ff fa71 	bl	8003b84 <LL_RCC_PLL_GetN>
 80046a2:	4602      	mov	r2, r0
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	fb03 f402 	mul.w	r4, r3, r2
 80046aa:	f7ff fa84 	bl	8003bb6 <LL_RCC_PLL_GetDivider>
 80046ae:	4603      	mov	r3, r0
 80046b0:	091b      	lsrs	r3, r3, #4
 80046b2:	3301      	adds	r3, #1
 80046b4:	fbb4 f4f3 	udiv	r4, r4, r3
 80046b8:	f7ff fa71 	bl	8003b9e <LL_RCC_PLL_GetR>
 80046bc:	4603      	mov	r3, r0
 80046be:	0f5b      	lsrs	r3, r3, #29
 80046c0:	3301      	adds	r3, #1
 80046c2:	fbb4 f3f3 	udiv	r3, r4, r3
 80046c6:	60fb      	str	r3, [r7, #12]
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	4618      	mov	r0, r3
 80046cc:	3714      	adds	r7, #20
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd90      	pop	{r4, r7, pc}
 80046d2:	bf00      	nop
 80046d4:	0800a610 	.word	0x0800a610
 80046d8:	00f42400 	.word	0x00f42400
 80046dc:	01e84800 	.word	0x01e84800

080046e0 <HAL_RCC_GetHCLKFreq>:
 80046e0:	b598      	push	{r3, r4, r7, lr}
 80046e2:	af00      	add	r7, sp, #0
 80046e4:	f7ff ff90 	bl	8004608 <HAL_RCC_GetSysClockFreq>
 80046e8:	4604      	mov	r4, r0
 80046ea:	f7ff f9e9 	bl	8003ac0 <LL_RCC_GetAHBPrescaler>
 80046ee:	4603      	mov	r3, r0
 80046f0:	091b      	lsrs	r3, r3, #4
 80046f2:	f003 030f 	and.w	r3, r3, #15
 80046f6:	4a03      	ldr	r2, [pc, #12]	; (8004704 <HAL_RCC_GetHCLKFreq+0x24>)
 80046f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046fc:	fbb4 f3f3 	udiv	r3, r4, r3
 8004700:	4618      	mov	r0, r3
 8004702:	bd98      	pop	{r3, r4, r7, pc}
 8004704:	0800a5b0 	.word	0x0800a5b0

08004708 <HAL_RCC_GetPCLK1Freq>:
 8004708:	b598      	push	{r3, r4, r7, lr}
 800470a:	af00      	add	r7, sp, #0
 800470c:	f7ff ffe8 	bl	80046e0 <HAL_RCC_GetHCLKFreq>
 8004710:	4604      	mov	r4, r0
 8004712:	f7ff f9ef 	bl	8003af4 <LL_RCC_GetAPB1Prescaler>
 8004716:	4603      	mov	r3, r0
 8004718:	0a1b      	lsrs	r3, r3, #8
 800471a:	f003 0307 	and.w	r3, r3, #7
 800471e:	4a04      	ldr	r2, [pc, #16]	; (8004730 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004720:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004724:	f003 031f 	and.w	r3, r3, #31
 8004728:	fa24 f303 	lsr.w	r3, r4, r3
 800472c:	4618      	mov	r0, r3
 800472e:	bd98      	pop	{r3, r4, r7, pc}
 8004730:	0800a5f0 	.word	0x0800a5f0

08004734 <HAL_RCC_GetPCLK2Freq>:
 8004734:	b598      	push	{r3, r4, r7, lr}
 8004736:	af00      	add	r7, sp, #0
 8004738:	f7ff ffd2 	bl	80046e0 <HAL_RCC_GetHCLKFreq>
 800473c:	4604      	mov	r4, r0
 800473e:	f7ff f9e5 	bl	8003b0c <LL_RCC_GetAPB2Prescaler>
 8004742:	4603      	mov	r3, r0
 8004744:	0adb      	lsrs	r3, r3, #11
 8004746:	f003 0307 	and.w	r3, r3, #7
 800474a:	4a04      	ldr	r2, [pc, #16]	; (800475c <HAL_RCC_GetPCLK2Freq+0x28>)
 800474c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004750:	f003 031f 	and.w	r3, r3, #31
 8004754:	fa24 f303 	lsr.w	r3, r4, r3
 8004758:	4618      	mov	r0, r3
 800475a:	bd98      	pop	{r3, r4, r7, pc}
 800475c:	0800a5f0 	.word	0x0800a5f0

08004760 <RCC_SetFlashLatencyFromMSIRange>:
 8004760:	b590      	push	{r4, r7, lr}
 8004762:	b085      	sub	sp, #20
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2bb0      	cmp	r3, #176	; 0xb0
 800476c:	d903      	bls.n	8004776 <RCC_SetFlashLatencyFromMSIRange+0x16>
 800476e:	4b15      	ldr	r3, [pc, #84]	; (80047c4 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8004770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004772:	60fb      	str	r3, [r7, #12]
 8004774:	e007      	b.n	8004786 <RCC_SetFlashLatencyFromMSIRange+0x26>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	091b      	lsrs	r3, r3, #4
 800477a:	f003 030f 	and.w	r3, r3, #15
 800477e:	4a11      	ldr	r2, [pc, #68]	; (80047c4 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8004780:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004784:	60fb      	str	r3, [r7, #12]
 8004786:	f7ff f9a7 	bl	8003ad8 <LL_RCC_GetAHB4Prescaler>
 800478a:	4603      	mov	r3, r0
 800478c:	091b      	lsrs	r3, r3, #4
 800478e:	f003 030f 	and.w	r3, r3, #15
 8004792:	4a0d      	ldr	r2, [pc, #52]	; (80047c8 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8004794:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004798:	68fa      	ldr	r2, [r7, #12]
 800479a:	fbb2 f3f3 	udiv	r3, r2, r3
 800479e:	60bb      	str	r3, [r7, #8]
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	4a0a      	ldr	r2, [pc, #40]	; (80047cc <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 80047a4:	fba2 2303 	umull	r2, r3, r2, r3
 80047a8:	0c9c      	lsrs	r4, r3, #18
 80047aa:	f7fe fef5 	bl	8003598 <HAL_PWREx_GetVoltageRange>
 80047ae:	4603      	mov	r3, r0
 80047b0:	4619      	mov	r1, r3
 80047b2:	4620      	mov	r0, r4
 80047b4:	f000 f80c 	bl	80047d0 <RCC_SetFlashLatency>
 80047b8:	4603      	mov	r3, r0
 80047ba:	4618      	mov	r0, r3
 80047bc:	3714      	adds	r7, #20
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd90      	pop	{r4, r7, pc}
 80047c2:	bf00      	nop
 80047c4:	0800a610 	.word	0x0800a610
 80047c8:	0800a5b0 	.word	0x0800a5b0
 80047cc:	431bde83 	.word	0x431bde83

080047d0 <RCC_SetFlashLatency>:
 80047d0:	b590      	push	{r4, r7, lr}
 80047d2:	b093      	sub	sp, #76	; 0x4c
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
 80047d8:	6039      	str	r1, [r7, #0]
 80047da:	4b37      	ldr	r3, [pc, #220]	; (80048b8 <RCC_SetFlashLatency+0xe8>)
 80047dc:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80047e0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80047e2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80047e6:	4a35      	ldr	r2, [pc, #212]	; (80048bc <RCC_SetFlashLatency+0xec>)
 80047e8:	f107 031c 	add.w	r3, r7, #28
 80047ec:	ca07      	ldmia	r2, {r0, r1, r2}
 80047ee:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80047f2:	4b33      	ldr	r3, [pc, #204]	; (80048c0 <RCC_SetFlashLatency+0xf0>)
 80047f4:	f107 040c 	add.w	r4, r7, #12
 80047f8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80047fa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80047fe:	2300      	movs	r3, #0
 8004800:	647b      	str	r3, [r7, #68]	; 0x44
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004808:	d11a      	bne.n	8004840 <RCC_SetFlashLatency+0x70>
 800480a:	2300      	movs	r3, #0
 800480c:	643b      	str	r3, [r7, #64]	; 0x40
 800480e:	e013      	b.n	8004838 <RCC_SetFlashLatency+0x68>
 8004810:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004812:	009b      	lsls	r3, r3, #2
 8004814:	3348      	adds	r3, #72	; 0x48
 8004816:	443b      	add	r3, r7
 8004818:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800481c:	687a      	ldr	r2, [r7, #4]
 800481e:	429a      	cmp	r2, r3
 8004820:	d807      	bhi.n	8004832 <RCC_SetFlashLatency+0x62>
 8004822:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004824:	009b      	lsls	r3, r3, #2
 8004826:	3348      	adds	r3, #72	; 0x48
 8004828:	443b      	add	r3, r7
 800482a:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800482e:	647b      	str	r3, [r7, #68]	; 0x44
 8004830:	e020      	b.n	8004874 <RCC_SetFlashLatency+0xa4>
 8004832:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004834:	3301      	adds	r3, #1
 8004836:	643b      	str	r3, [r7, #64]	; 0x40
 8004838:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800483a:	2b03      	cmp	r3, #3
 800483c:	d9e8      	bls.n	8004810 <RCC_SetFlashLatency+0x40>
 800483e:	e019      	b.n	8004874 <RCC_SetFlashLatency+0xa4>
 8004840:	2300      	movs	r3, #0
 8004842:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004844:	e013      	b.n	800486e <RCC_SetFlashLatency+0x9e>
 8004846:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004848:	009b      	lsls	r3, r3, #2
 800484a:	3348      	adds	r3, #72	; 0x48
 800484c:	443b      	add	r3, r7
 800484e:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8004852:	687a      	ldr	r2, [r7, #4]
 8004854:	429a      	cmp	r2, r3
 8004856:	d807      	bhi.n	8004868 <RCC_SetFlashLatency+0x98>
 8004858:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800485a:	009b      	lsls	r3, r3, #2
 800485c:	3348      	adds	r3, #72	; 0x48
 800485e:	443b      	add	r3, r7
 8004860:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8004864:	647b      	str	r3, [r7, #68]	; 0x44
 8004866:	e005      	b.n	8004874 <RCC_SetFlashLatency+0xa4>
 8004868:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800486a:	3301      	adds	r3, #1
 800486c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800486e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004870:	2b02      	cmp	r3, #2
 8004872:	d9e8      	bls.n	8004846 <RCC_SetFlashLatency+0x76>
 8004874:	4b13      	ldr	r3, [pc, #76]	; (80048c4 <RCC_SetFlashLatency+0xf4>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f023 0207 	bic.w	r2, r3, #7
 800487c:	4911      	ldr	r1, [pc, #68]	; (80048c4 <RCC_SetFlashLatency+0xf4>)
 800487e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004880:	4313      	orrs	r3, r2
 8004882:	600b      	str	r3, [r1, #0]
 8004884:	f7fd fdc8 	bl	8002418 <HAL_GetTick>
 8004888:	63b8      	str	r0, [r7, #56]	; 0x38
 800488a:	e008      	b.n	800489e <RCC_SetFlashLatency+0xce>
 800488c:	f7fd fdc4 	bl	8002418 <HAL_GetTick>
 8004890:	4602      	mov	r2, r0
 8004892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004894:	1ad3      	subs	r3, r2, r3
 8004896:	2b02      	cmp	r3, #2
 8004898:	d901      	bls.n	800489e <RCC_SetFlashLatency+0xce>
 800489a:	2303      	movs	r3, #3
 800489c:	e007      	b.n	80048ae <RCC_SetFlashLatency+0xde>
 800489e:	4b09      	ldr	r3, [pc, #36]	; (80048c4 <RCC_SetFlashLatency+0xf4>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f003 0307 	and.w	r3, r3, #7
 80048a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80048a8:	429a      	cmp	r2, r3
 80048aa:	d1ef      	bne.n	800488c <RCC_SetFlashLatency+0xbc>
 80048ac:	2300      	movs	r3, #0
 80048ae:	4618      	mov	r0, r3
 80048b0:	374c      	adds	r7, #76	; 0x4c
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bd90      	pop	{r4, r7, pc}
 80048b6:	bf00      	nop
 80048b8:	0800a40c 	.word	0x0800a40c
 80048bc:	0800a41c 	.word	0x0800a41c
 80048c0:	0800a428 	.word	0x0800a428
 80048c4:	58004000 	.word	0x58004000

080048c8 <LL_RCC_LSE_IsEnabled>:
 80048c8:	b480      	push	{r7}
 80048ca:	af00      	add	r7, sp, #0
 80048cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048d4:	f003 0301 	and.w	r3, r3, #1
 80048d8:	2b01      	cmp	r3, #1
 80048da:	d101      	bne.n	80048e0 <LL_RCC_LSE_IsEnabled+0x18>
 80048dc:	2301      	movs	r3, #1
 80048de:	e000      	b.n	80048e2 <LL_RCC_LSE_IsEnabled+0x1a>
 80048e0:	2300      	movs	r3, #0
 80048e2:	4618      	mov	r0, r3
 80048e4:	46bd      	mov	sp, r7
 80048e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ea:	4770      	bx	lr

080048ec <LL_RCC_LSE_IsReady>:
 80048ec:	b480      	push	{r7}
 80048ee:	af00      	add	r7, sp, #0
 80048f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048f8:	f003 0302 	and.w	r3, r3, #2
 80048fc:	2b02      	cmp	r3, #2
 80048fe:	d101      	bne.n	8004904 <LL_RCC_LSE_IsReady+0x18>
 8004900:	2301      	movs	r3, #1
 8004902:	e000      	b.n	8004906 <LL_RCC_LSE_IsReady+0x1a>
 8004904:	2300      	movs	r3, #0
 8004906:	4618      	mov	r0, r3
 8004908:	46bd      	mov	sp, r7
 800490a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490e:	4770      	bx	lr

08004910 <LL_RCC_SetRFWKPClockSource>:
 8004910:	b480      	push	{r7}
 8004912:	b083      	sub	sp, #12
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
 8004918:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800491c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004920:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004924:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	4313      	orrs	r3, r2
 800492c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
 8004930:	bf00      	nop
 8004932:	370c      	adds	r7, #12
 8004934:	46bd      	mov	sp, r7
 8004936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493a:	4770      	bx	lr

0800493c <LL_RCC_SetSMPSClockSource>:
 800493c:	b480      	push	{r7}
 800493e:	b083      	sub	sp, #12
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
 8004944:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800494a:	f023 0203 	bic.w	r2, r3, #3
 800494e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	4313      	orrs	r3, r2
 8004956:	624b      	str	r3, [r1, #36]	; 0x24
 8004958:	bf00      	nop
 800495a:	370c      	adds	r7, #12
 800495c:	46bd      	mov	sp, r7
 800495e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004962:	4770      	bx	lr

08004964 <LL_RCC_SetSMPSPrescaler>:
 8004964:	b480      	push	{r7}
 8004966:	b083      	sub	sp, #12
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
 800496c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004972:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004976:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	4313      	orrs	r3, r2
 800497e:	624b      	str	r3, [r1, #36]	; 0x24
 8004980:	bf00      	nop
 8004982:	370c      	adds	r7, #12
 8004984:	46bd      	mov	sp, r7
 8004986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498a:	4770      	bx	lr

0800498c <LL_RCC_SetUSARTClockSource>:
 800498c:	b480      	push	{r7}
 800498e:	b083      	sub	sp, #12
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
 8004994:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004998:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800499c:	f023 0203 	bic.w	r2, r3, #3
 80049a0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	4313      	orrs	r3, r2
 80049a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80049ac:	bf00      	nop
 80049ae:	370c      	adds	r7, #12
 80049b0:	46bd      	mov	sp, r7
 80049b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b6:	4770      	bx	lr

080049b8 <LL_RCC_SetLPUARTClockSource>:
 80049b8:	b480      	push	{r7}
 80049ba:	b083      	sub	sp, #12
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
 80049c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049c8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80049cc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	4313      	orrs	r3, r2
 80049d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80049d8:	bf00      	nop
 80049da:	370c      	adds	r7, #12
 80049dc:	46bd      	mov	sp, r7
 80049de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e2:	4770      	bx	lr

080049e4 <LL_RCC_SetI2CClockSource>:
 80049e4:	b480      	push	{r7}
 80049e6:	b083      	sub	sp, #12
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
 80049ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049f0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	091b      	lsrs	r3, r3, #4
 80049f8:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80049fc:	43db      	mvns	r3, r3
 80049fe:	401a      	ands	r2, r3
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	011b      	lsls	r3, r3, #4
 8004a04:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8004a08:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004a12:	bf00      	nop
 8004a14:	370c      	adds	r7, #12
 8004a16:	46bd      	mov	sp, r7
 8004a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1c:	4770      	bx	lr

08004a1e <LL_RCC_SetLPTIMClockSource>:
 8004a1e:	b480      	push	{r7}
 8004a20:	b083      	sub	sp, #12
 8004a22:	af00      	add	r7, sp, #0
 8004a24:	6078      	str	r0, [r7, #4]
 8004a26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a2a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	0c1b      	lsrs	r3, r3, #16
 8004a32:	041b      	lsls	r3, r3, #16
 8004a34:	43db      	mvns	r3, r3
 8004a36:	401a      	ands	r2, r3
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	041b      	lsls	r3, r3, #16
 8004a3c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a40:	4313      	orrs	r3, r2
 8004a42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004a46:	bf00      	nop
 8004a48:	370c      	adds	r7, #12
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a50:	4770      	bx	lr

08004a52 <LL_RCC_SetSAIClockSource>:
 8004a52:	b480      	push	{r7}
 8004a54:	b083      	sub	sp, #12
 8004a56:	af00      	add	r7, sp, #0
 8004a58:	6078      	str	r0, [r7, #4]
 8004a5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a62:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004a66:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004a72:	bf00      	nop
 8004a74:	370c      	adds	r7, #12
 8004a76:	46bd      	mov	sp, r7
 8004a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7c:	4770      	bx	lr

08004a7e <LL_RCC_SetRNGClockSource>:
 8004a7e:	b480      	push	{r7}
 8004a80:	b083      	sub	sp, #12
 8004a82:	af00      	add	r7, sp, #0
 8004a84:	6078      	str	r0, [r7, #4]
 8004a86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a8e:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8004a92:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004a9e:	bf00      	nop
 8004aa0:	370c      	adds	r7, #12
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa8:	4770      	bx	lr

08004aaa <LL_RCC_SetCLK48ClockSource>:
 8004aaa:	b480      	push	{r7}
 8004aac:	b083      	sub	sp, #12
 8004aae:	af00      	add	r7, sp, #0
 8004ab0:	6078      	str	r0, [r7, #4]
 8004ab2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ab6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004abe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004aca:	bf00      	nop
 8004acc:	370c      	adds	r7, #12
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad4:	4770      	bx	lr

08004ad6 <LL_RCC_SetUSBClockSource>:
 8004ad6:	b580      	push	{r7, lr}
 8004ad8:	b082      	sub	sp, #8
 8004ada:	af00      	add	r7, sp, #0
 8004adc:	6078      	str	r0, [r7, #4]
 8004ade:	6878      	ldr	r0, [r7, #4]
 8004ae0:	f7ff ffe3 	bl	8004aaa <LL_RCC_SetCLK48ClockSource>
 8004ae4:	bf00      	nop
 8004ae6:	3708      	adds	r7, #8
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bd80      	pop	{r7, pc}

08004aec <LL_RCC_SetADCClockSource>:
 8004aec:	b480      	push	{r7}
 8004aee:	b083      	sub	sp, #12
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
 8004af4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004af8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004afc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004b00:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	4313      	orrs	r3, r2
 8004b08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004b0c:	bf00      	nop
 8004b0e:	370c      	adds	r7, #12
 8004b10:	46bd      	mov	sp, r7
 8004b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b16:	4770      	bx	lr

08004b18 <LL_RCC_SetRTCClockSource>:
 8004b18:	b480      	push	{r7}
 8004b1a:	b083      	sub	sp, #12
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
 8004b20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b28:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004b2c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	4313      	orrs	r3, r2
 8004b34:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004b38:	bf00      	nop
 8004b3a:	370c      	adds	r7, #12
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b42:	4770      	bx	lr

08004b44 <LL_RCC_GetRTCClockSource>:
 8004b44:	b480      	push	{r7}
 8004b46:	af00      	add	r7, sp, #0
 8004b48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b50:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b54:	4618      	mov	r0, r3
 8004b56:	46bd      	mov	sp, r7
 8004b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5c:	4770      	bx	lr

08004b5e <LL_RCC_ForceBackupDomainReset>:
 8004b5e:	b480      	push	{r7}
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b6a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b72:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004b76:	bf00      	nop
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7e:	4770      	bx	lr

08004b80 <LL_RCC_ReleaseBackupDomainReset>:
 8004b80:	b480      	push	{r7}
 8004b82:	af00      	add	r7, sp, #0
 8004b84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b8c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004b98:	bf00      	nop
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba0:	4770      	bx	lr

08004ba2 <LL_RCC_PLLSAI1_Enable>:
 8004ba2:	b480      	push	{r7}
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004bb0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004bb4:	6013      	str	r3, [r2, #0]
 8004bb6:	bf00      	nop
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbe:	4770      	bx	lr

08004bc0 <LL_RCC_PLLSAI1_Disable>:
 8004bc0:	b480      	push	{r7}
 8004bc2:	af00      	add	r7, sp, #0
 8004bc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004bce:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004bd2:	6013      	str	r3, [r2, #0]
 8004bd4:	bf00      	nop
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bdc:	4770      	bx	lr

08004bde <LL_RCC_PLLSAI1_IsReady>:
 8004bde:	b480      	push	{r7}
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004bec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004bf0:	d101      	bne.n	8004bf6 <LL_RCC_PLLSAI1_IsReady+0x18>
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	e000      	b.n	8004bf8 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c00:	4770      	bx	lr

08004c02 <HAL_RCCEx_PeriphCLKConfig>:
 8004c02:	b580      	push	{r7, lr}
 8004c04:	b088      	sub	sp, #32
 8004c06:	af00      	add	r7, sp, #0
 8004c08:	6078      	str	r0, [r7, #4]
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	77fb      	strb	r3, [r7, #31]
 8004c0e:	2300      	movs	r3, #0
 8004c10:	77bb      	strb	r3, [r7, #30]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d034      	beq.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0x86>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c22:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004c26:	d021      	beq.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8004c28:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004c2c:	d81b      	bhi.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004c2e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004c32:	d01d      	beq.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8004c34:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004c38:	d815      	bhi.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d00b      	beq.n	8004c56 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8004c3e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c42:	d110      	bne.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004c44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c48:	68db      	ldr	r3, [r3, #12]
 8004c4a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c52:	60d3      	str	r3, [r2, #12]
 8004c54:	e00d      	b.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0x70>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	3304      	adds	r3, #4
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	f000 f947 	bl	8004eee <RCCEx_PLLSAI1_ConfigNP>
 8004c60:	4603      	mov	r3, r0
 8004c62:	77fb      	strb	r3, [r7, #31]
 8004c64:	e005      	b.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0x70>
 8004c66:	2301      	movs	r3, #1
 8004c68:	77fb      	strb	r3, [r7, #31]
 8004c6a:	e002      	b.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0x70>
 8004c6c:	bf00      	nop
 8004c6e:	e000      	b.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0x70>
 8004c70:	bf00      	nop
 8004c72:	7ffb      	ldrb	r3, [r7, #31]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d105      	bne.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0x82>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	f7ff fee8 	bl	8004a52 <LL_RCC_SetSAIClockSource>
 8004c82:	e001      	b.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0x86>
 8004c84:	7ffb      	ldrb	r3, [r7, #31]
 8004c86:	77bb      	strb	r3, [r7, #30]
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d046      	beq.n	8004d22 <HAL_RCCEx_PeriphCLKConfig+0x120>
 8004c94:	f7ff ff56 	bl	8004b44 <LL_RCC_GetRTCClockSource>
 8004c98:	61b8      	str	r0, [r7, #24]
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c9e:	69ba      	ldr	r2, [r7, #24]
 8004ca0:	429a      	cmp	r2, r3
 8004ca2:	d03c      	beq.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0x11c>
 8004ca4:	f7fe fc68 	bl	8003578 <HAL_PWR_EnableBkUpAccess>
 8004ca8:	69bb      	ldr	r3, [r7, #24]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d105      	bne.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0xb8>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	f7ff ff30 	bl	8004b18 <LL_RCC_SetRTCClockSource>
 8004cb8:	e02e      	b.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004cba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cc2:	617b      	str	r3, [r7, #20]
 8004cc4:	f7ff ff4b 	bl	8004b5e <LL_RCC_ForceBackupDomainReset>
 8004cc8:	f7ff ff5a 	bl	8004b80 <LL_RCC_ReleaseBackupDomainReset>
 8004ccc:	697b      	ldr	r3, [r7, #20]
 8004cce:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	617b      	str	r3, [r7, #20]
 8004cda:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004ce4:	f7ff fdf0 	bl	80048c8 <LL_RCC_LSE_IsEnabled>
 8004ce8:	4603      	mov	r3, r0
 8004cea:	2b01      	cmp	r3, #1
 8004cec:	d114      	bne.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004cee:	f7fd fb93 	bl	8002418 <HAL_GetTick>
 8004cf2:	6138      	str	r0, [r7, #16]
 8004cf4:	e00b      	b.n	8004d0e <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004cf6:	f7fd fb8f 	bl	8002418 <HAL_GetTick>
 8004cfa:	4602      	mov	r2, r0
 8004cfc:	693b      	ldr	r3, [r7, #16]
 8004cfe:	1ad3      	subs	r3, r2, r3
 8004d00:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d902      	bls.n	8004d0e <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004d08:	2303      	movs	r3, #3
 8004d0a:	77fb      	strb	r3, [r7, #31]
 8004d0c:	e004      	b.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004d0e:	f7ff fded 	bl	80048ec <LL_RCC_LSE_IsReady>
 8004d12:	4603      	mov	r3, r0
 8004d14:	2b01      	cmp	r3, #1
 8004d16:	d1ee      	bne.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004d18:	7ffb      	ldrb	r3, [r7, #31]
 8004d1a:	77bb      	strb	r3, [r7, #30]
 8004d1c:	e001      	b.n	8004d22 <HAL_RCCEx_PeriphCLKConfig+0x120>
 8004d1e:	7ffb      	ldrb	r3, [r7, #31]
 8004d20:	77bb      	strb	r3, [r7, #30]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f003 0301 	and.w	r3, r3, #1
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d004      	beq.n	8004d38 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	699b      	ldr	r3, [r3, #24]
 8004d32:	4618      	mov	r0, r3
 8004d34:	f7ff fe2a 	bl	800498c <LL_RCC_SetUSARTClockSource>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f003 0302 	and.w	r3, r3, #2
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d004      	beq.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	69db      	ldr	r3, [r3, #28]
 8004d48:	4618      	mov	r0, r3
 8004d4a:	f7ff fe35 	bl	80049b8 <LL_RCC_SetLPUARTClockSource>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f003 0310 	and.w	r3, r3, #16
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d004      	beq.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0x162>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d5e:	4618      	mov	r0, r3
 8004d60:	f7ff fe5d 	bl	8004a1e <LL_RCC_SetLPTIMClockSource>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f003 0320 	and.w	r3, r3, #32
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d004      	beq.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0x178>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d74:	4618      	mov	r0, r3
 8004d76:	f7ff fe52 	bl	8004a1e <LL_RCC_SetLPTIMClockSource>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f003 0304 	and.w	r3, r3, #4
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d004      	beq.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0x18e>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6a1b      	ldr	r3, [r3, #32]
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	f7ff fe2a 	bl	80049e4 <LL_RCC_SetI2CClockSource>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f003 0308 	and.w	r3, r3, #8
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d004      	beq.n	8004da6 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da0:	4618      	mov	r0, r3
 8004da2:	f7ff fe1f 	bl	80049e4 <LL_RCC_SetI2CClockSource>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d022      	beq.n	8004df8 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004db6:	4618      	mov	r0, r3
 8004db8:	f7ff fe8d 	bl	8004ad6 <LL_RCC_SetUSBClockSource>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dc0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004dc4:	d107      	bne.n	8004dd6 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8004dc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004dca:	68db      	ldr	r3, [r3, #12]
 8004dcc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004dd0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004dd4:	60d3      	str	r3, [r2, #12]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dda:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004dde:	d10b      	bne.n	8004df8 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	3304      	adds	r3, #4
 8004de4:	4618      	mov	r0, r3
 8004de6:	f000 f8dd 	bl	8004fa4 <RCCEx_PLLSAI1_ConfigNQ>
 8004dea:	4603      	mov	r3, r0
 8004dec:	77fb      	strb	r3, [r7, #31]
 8004dee:	7ffb      	ldrb	r3, [r7, #31]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d001      	beq.n	8004df8 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8004df4:	7ffb      	ldrb	r3, [r7, #31]
 8004df6:	77bb      	strb	r3, [r7, #30]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d02b      	beq.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e0c:	d008      	beq.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e12:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e16:	d003      	beq.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d105      	bne.n	8004e2c <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e24:	4618      	mov	r0, r3
 8004e26:	f7ff fe2a 	bl	8004a7e <LL_RCC_SetRNGClockSource>
 8004e2a:	e00a      	b.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e34:	60fb      	str	r3, [r7, #12]
 8004e36:	2000      	movs	r0, #0
 8004e38:	f7ff fe21 	bl	8004a7e <LL_RCC_SetRNGClockSource>
 8004e3c:	68f8      	ldr	r0, [r7, #12]
 8004e3e:	f7ff fe34 	bl	8004aaa <LL_RCC_SetCLK48ClockSource>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e46:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8004e4a:	d107      	bne.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8004e4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e50:	68db      	ldr	r3, [r3, #12]
 8004e52:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004e56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004e5a:	60d3      	str	r3, [r2, #12]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d022      	beq.n	8004eae <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	f7ff fe3d 	bl	8004aec <LL_RCC_SetADCClockSource>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e76:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e7a:	d107      	bne.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x28a>
 8004e7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e80:	68db      	ldr	r3, [r3, #12]
 8004e82:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004e86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e8a:	60d3      	str	r3, [r2, #12]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e90:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004e94:	d10b      	bne.n	8004eae <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	3304      	adds	r3, #4
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	f000 f8dd 	bl	800505a <RCCEx_PLLSAI1_ConfigNR>
 8004ea0:	4603      	mov	r3, r0
 8004ea2:	77fb      	strb	r3, [r7, #31]
 8004ea4:	7ffb      	ldrb	r3, [r7, #31]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d001      	beq.n	8004eae <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8004eaa:	7ffb      	ldrb	r3, [r7, #31]
 8004eac:	77bb      	strb	r3, [r7, #30]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d004      	beq.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	f7ff fd26 	bl	8004910 <LL_RCC_SetRFWKPClockSource>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d009      	beq.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	f7ff fd45 	bl	8004964 <LL_RCC_SetSMPSPrescaler>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ede:	4618      	mov	r0, r3
 8004ee0:	f7ff fd2c 	bl	800493c <LL_RCC_SetSMPSClockSource>
 8004ee4:	7fbb      	ldrb	r3, [r7, #30]
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	3720      	adds	r7, #32
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}

08004eee <RCCEx_PLLSAI1_ConfigNP>:
 8004eee:	b580      	push	{r7, lr}
 8004ef0:	b084      	sub	sp, #16
 8004ef2:	af00      	add	r7, sp, #0
 8004ef4:	6078      	str	r0, [r7, #4]
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	73fb      	strb	r3, [r7, #15]
 8004efa:	f7ff fe61 	bl	8004bc0 <LL_RCC_PLLSAI1_Disable>
 8004efe:	f7fd fa8b 	bl	8002418 <HAL_GetTick>
 8004f02:	60b8      	str	r0, [r7, #8]
 8004f04:	e009      	b.n	8004f1a <RCCEx_PLLSAI1_ConfigNP+0x2c>
 8004f06:	f7fd fa87 	bl	8002418 <HAL_GetTick>
 8004f0a:	4602      	mov	r2, r0
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	1ad3      	subs	r3, r2, r3
 8004f10:	2b02      	cmp	r3, #2
 8004f12:	d902      	bls.n	8004f1a <RCCEx_PLLSAI1_ConfigNP+0x2c>
 8004f14:	2303      	movs	r3, #3
 8004f16:	73fb      	strb	r3, [r7, #15]
 8004f18:	e004      	b.n	8004f24 <RCCEx_PLLSAI1_ConfigNP+0x36>
 8004f1a:	f7ff fe60 	bl	8004bde <LL_RCC_PLLSAI1_IsReady>
 8004f1e:	4603      	mov	r3, r0
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d1f0      	bne.n	8004f06 <RCCEx_PLLSAI1_ConfigNP+0x18>
 8004f24:	7bfb      	ldrb	r3, [r7, #15]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d137      	bne.n	8004f9a <RCCEx_PLLSAI1_ConfigNP+0xac>
 8004f2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f2e:	691b      	ldr	r3, [r3, #16]
 8004f30:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	021b      	lsls	r3, r3, #8
 8004f3a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	610b      	str	r3, [r1, #16]
 8004f42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f46:	691b      	ldr	r3, [r3, #16]
 8004f48:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004f54:	4313      	orrs	r3, r2
 8004f56:	610b      	str	r3, [r1, #16]
 8004f58:	f7ff fe23 	bl	8004ba2 <LL_RCC_PLLSAI1_Enable>
 8004f5c:	f7fd fa5c 	bl	8002418 <HAL_GetTick>
 8004f60:	60b8      	str	r0, [r7, #8]
 8004f62:	e009      	b.n	8004f78 <RCCEx_PLLSAI1_ConfigNP+0x8a>
 8004f64:	f7fd fa58 	bl	8002418 <HAL_GetTick>
 8004f68:	4602      	mov	r2, r0
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	1ad3      	subs	r3, r2, r3
 8004f6e:	2b02      	cmp	r3, #2
 8004f70:	d902      	bls.n	8004f78 <RCCEx_PLLSAI1_ConfigNP+0x8a>
 8004f72:	2303      	movs	r3, #3
 8004f74:	73fb      	strb	r3, [r7, #15]
 8004f76:	e004      	b.n	8004f82 <RCCEx_PLLSAI1_ConfigNP+0x94>
 8004f78:	f7ff fe31 	bl	8004bde <LL_RCC_PLLSAI1_IsReady>
 8004f7c:	4603      	mov	r3, r0
 8004f7e:	2b01      	cmp	r3, #1
 8004f80:	d1f0      	bne.n	8004f64 <RCCEx_PLLSAI1_ConfigNP+0x76>
 8004f82:	7bfb      	ldrb	r3, [r7, #15]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d108      	bne.n	8004f9a <RCCEx_PLLSAI1_ConfigNP+0xac>
 8004f88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f8c:	691a      	ldr	r2, [r3, #16]
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	691b      	ldr	r3, [r3, #16]
 8004f92:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004f96:	4313      	orrs	r3, r2
 8004f98:	610b      	str	r3, [r1, #16]
 8004f9a:	7bfb      	ldrb	r3, [r7, #15]
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	3710      	adds	r7, #16
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	bd80      	pop	{r7, pc}

08004fa4 <RCCEx_PLLSAI1_ConfigNQ>:
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b084      	sub	sp, #16
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
 8004fac:	2300      	movs	r3, #0
 8004fae:	73fb      	strb	r3, [r7, #15]
 8004fb0:	f7ff fe06 	bl	8004bc0 <LL_RCC_PLLSAI1_Disable>
 8004fb4:	f7fd fa30 	bl	8002418 <HAL_GetTick>
 8004fb8:	60b8      	str	r0, [r7, #8]
 8004fba:	e009      	b.n	8004fd0 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
 8004fbc:	f7fd fa2c 	bl	8002418 <HAL_GetTick>
 8004fc0:	4602      	mov	r2, r0
 8004fc2:	68bb      	ldr	r3, [r7, #8]
 8004fc4:	1ad3      	subs	r3, r2, r3
 8004fc6:	2b02      	cmp	r3, #2
 8004fc8:	d902      	bls.n	8004fd0 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
 8004fca:	2303      	movs	r3, #3
 8004fcc:	73fb      	strb	r3, [r7, #15]
 8004fce:	e004      	b.n	8004fda <RCCEx_PLLSAI1_ConfigNQ+0x36>
 8004fd0:	f7ff fe05 	bl	8004bde <LL_RCC_PLLSAI1_IsReady>
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d1f0      	bne.n	8004fbc <RCCEx_PLLSAI1_ConfigNQ+0x18>
 8004fda:	7bfb      	ldrb	r3, [r7, #15]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d137      	bne.n	8005050 <RCCEx_PLLSAI1_ConfigNQ+0xac>
 8004fe0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fe4:	691b      	ldr	r3, [r3, #16]
 8004fe6:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	021b      	lsls	r3, r3, #8
 8004ff0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004ff4:	4313      	orrs	r3, r2
 8004ff6:	610b      	str	r3, [r1, #16]
 8004ff8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ffc:	691b      	ldr	r3, [r3, #16]
 8004ffe:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	689b      	ldr	r3, [r3, #8]
 8005006:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800500a:	4313      	orrs	r3, r2
 800500c:	610b      	str	r3, [r1, #16]
 800500e:	f7ff fdc8 	bl	8004ba2 <LL_RCC_PLLSAI1_Enable>
 8005012:	f7fd fa01 	bl	8002418 <HAL_GetTick>
 8005016:	60b8      	str	r0, [r7, #8]
 8005018:	e009      	b.n	800502e <RCCEx_PLLSAI1_ConfigNQ+0x8a>
 800501a:	f7fd f9fd 	bl	8002418 <HAL_GetTick>
 800501e:	4602      	mov	r2, r0
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	1ad3      	subs	r3, r2, r3
 8005024:	2b02      	cmp	r3, #2
 8005026:	d902      	bls.n	800502e <RCCEx_PLLSAI1_ConfigNQ+0x8a>
 8005028:	2303      	movs	r3, #3
 800502a:	73fb      	strb	r3, [r7, #15]
 800502c:	e004      	b.n	8005038 <RCCEx_PLLSAI1_ConfigNQ+0x94>
 800502e:	f7ff fdd6 	bl	8004bde <LL_RCC_PLLSAI1_IsReady>
 8005032:	4603      	mov	r3, r0
 8005034:	2b01      	cmp	r3, #1
 8005036:	d1f0      	bne.n	800501a <RCCEx_PLLSAI1_ConfigNQ+0x76>
 8005038:	7bfb      	ldrb	r3, [r7, #15]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d108      	bne.n	8005050 <RCCEx_PLLSAI1_ConfigNQ+0xac>
 800503e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005042:	691a      	ldr	r2, [r3, #16]
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	691b      	ldr	r3, [r3, #16]
 8005048:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800504c:	4313      	orrs	r3, r2
 800504e:	610b      	str	r3, [r1, #16]
 8005050:	7bfb      	ldrb	r3, [r7, #15]
 8005052:	4618      	mov	r0, r3
 8005054:	3710      	adds	r7, #16
 8005056:	46bd      	mov	sp, r7
 8005058:	bd80      	pop	{r7, pc}

0800505a <RCCEx_PLLSAI1_ConfigNR>:
 800505a:	b580      	push	{r7, lr}
 800505c:	b084      	sub	sp, #16
 800505e:	af00      	add	r7, sp, #0
 8005060:	6078      	str	r0, [r7, #4]
 8005062:	2300      	movs	r3, #0
 8005064:	73fb      	strb	r3, [r7, #15]
 8005066:	f7ff fdab 	bl	8004bc0 <LL_RCC_PLLSAI1_Disable>
 800506a:	f7fd f9d5 	bl	8002418 <HAL_GetTick>
 800506e:	60b8      	str	r0, [r7, #8]
 8005070:	e009      	b.n	8005086 <RCCEx_PLLSAI1_ConfigNR+0x2c>
 8005072:	f7fd f9d1 	bl	8002418 <HAL_GetTick>
 8005076:	4602      	mov	r2, r0
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	1ad3      	subs	r3, r2, r3
 800507c:	2b02      	cmp	r3, #2
 800507e:	d902      	bls.n	8005086 <RCCEx_PLLSAI1_ConfigNR+0x2c>
 8005080:	2303      	movs	r3, #3
 8005082:	73fb      	strb	r3, [r7, #15]
 8005084:	e004      	b.n	8005090 <RCCEx_PLLSAI1_ConfigNR+0x36>
 8005086:	f7ff fdaa 	bl	8004bde <LL_RCC_PLLSAI1_IsReady>
 800508a:	4603      	mov	r3, r0
 800508c:	2b00      	cmp	r3, #0
 800508e:	d1f0      	bne.n	8005072 <RCCEx_PLLSAI1_ConfigNR+0x18>
 8005090:	7bfb      	ldrb	r3, [r7, #15]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d137      	bne.n	8005106 <RCCEx_PLLSAI1_ConfigNR+0xac>
 8005096:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800509a:	691b      	ldr	r3, [r3, #16]
 800509c:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	021b      	lsls	r3, r3, #8
 80050a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80050aa:	4313      	orrs	r3, r2
 80050ac:	610b      	str	r3, [r1, #16]
 80050ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050b2:	691b      	ldr	r3, [r3, #16]
 80050b4:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	68db      	ldr	r3, [r3, #12]
 80050bc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80050c0:	4313      	orrs	r3, r2
 80050c2:	610b      	str	r3, [r1, #16]
 80050c4:	f7ff fd6d 	bl	8004ba2 <LL_RCC_PLLSAI1_Enable>
 80050c8:	f7fd f9a6 	bl	8002418 <HAL_GetTick>
 80050cc:	60b8      	str	r0, [r7, #8]
 80050ce:	e009      	b.n	80050e4 <RCCEx_PLLSAI1_ConfigNR+0x8a>
 80050d0:	f7fd f9a2 	bl	8002418 <HAL_GetTick>
 80050d4:	4602      	mov	r2, r0
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	1ad3      	subs	r3, r2, r3
 80050da:	2b02      	cmp	r3, #2
 80050dc:	d902      	bls.n	80050e4 <RCCEx_PLLSAI1_ConfigNR+0x8a>
 80050de:	2303      	movs	r3, #3
 80050e0:	73fb      	strb	r3, [r7, #15]
 80050e2:	e004      	b.n	80050ee <RCCEx_PLLSAI1_ConfigNR+0x94>
 80050e4:	f7ff fd7b 	bl	8004bde <LL_RCC_PLLSAI1_IsReady>
 80050e8:	4603      	mov	r3, r0
 80050ea:	2b01      	cmp	r3, #1
 80050ec:	d1f0      	bne.n	80050d0 <RCCEx_PLLSAI1_ConfigNR+0x76>
 80050ee:	7bfb      	ldrb	r3, [r7, #15]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d108      	bne.n	8005106 <RCCEx_PLLSAI1_ConfigNR+0xac>
 80050f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050f8:	691a      	ldr	r2, [r3, #16]
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	691b      	ldr	r3, [r3, #16]
 80050fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005102:	4313      	orrs	r3, r2
 8005104:	610b      	str	r3, [r1, #16]
 8005106:	7bfb      	ldrb	r3, [r7, #15]
 8005108:	4618      	mov	r0, r3
 800510a:	3710      	adds	r7, #16
 800510c:	46bd      	mov	sp, r7
 800510e:	bd80      	pop	{r7, pc}

08005110 <HAL_RTC_Init>:
 8005110:	b580      	push	{r7, lr}
 8005112:	b084      	sub	sp, #16
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d101      	bne.n	8005122 <HAL_RTC_Init+0x12>
 800511e:	2301      	movs	r3, #1
 8005120:	e09f      	b.n	8005262 <HAL_RTC_Init+0x152>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005128:	b2db      	uxtb	r3, r3
 800512a:	2b00      	cmp	r3, #0
 800512c:	d106      	bne.n	800513c <HAL_RTC_Init+0x2c>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2200      	movs	r2, #0
 8005132:	f883 2020 	strb.w	r2, [r3, #32]
 8005136:	6878      	ldr	r0, [r7, #4]
 8005138:	f7fc ff0a 	bl	8001f50 <HAL_RTC_MspInit>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2202      	movs	r2, #2
 8005140:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8005144:	4b49      	ldr	r3, [pc, #292]	; (800526c <HAL_RTC_Init+0x15c>)
 8005146:	68db      	ldr	r3, [r3, #12]
 8005148:	f003 0310 	and.w	r3, r3, #16
 800514c:	2b10      	cmp	r3, #16
 800514e:	d07e      	beq.n	800524e <HAL_RTC_Init+0x13e>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	22ca      	movs	r2, #202	; 0xca
 8005156:	625a      	str	r2, [r3, #36]	; 0x24
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	2253      	movs	r2, #83	; 0x53
 800515e:	625a      	str	r2, [r3, #36]	; 0x24
 8005160:	6878      	ldr	r0, [r7, #4]
 8005162:	f000 f8ab 	bl	80052bc <RTC_EnterInitMode>
 8005166:	4603      	mov	r3, r0
 8005168:	2b00      	cmp	r3, #0
 800516a:	d00a      	beq.n	8005182 <HAL_RTC_Init+0x72>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	22ff      	movs	r2, #255	; 0xff
 8005172:	625a      	str	r2, [r3, #36]	; 0x24
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2204      	movs	r2, #4
 8005178:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 800517c:	2301      	movs	r3, #1
 800517e:	73fb      	strb	r3, [r7, #15]
 8005180:	e067      	b.n	8005252 <HAL_RTC_Init+0x142>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	689b      	ldr	r3, [r3, #8]
 8005188:	687a      	ldr	r2, [r7, #4]
 800518a:	6812      	ldr	r2, [r2, #0]
 800518c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005190:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005194:	6093      	str	r3, [r2, #8]
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	6899      	ldr	r1, [r3, #8]
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	685a      	ldr	r2, [r3, #4]
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	691b      	ldr	r3, [r3, #16]
 80051a4:	431a      	orrs	r2, r3
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	699b      	ldr	r3, [r3, #24]
 80051aa:	431a      	orrs	r2, r3
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	430a      	orrs	r2, r1
 80051b2:	609a      	str	r2, [r3, #8]
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	687a      	ldr	r2, [r7, #4]
 80051ba:	68d2      	ldr	r2, [r2, #12]
 80051bc:	611a      	str	r2, [r3, #16]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	6919      	ldr	r1, [r3, #16]
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	689b      	ldr	r3, [r3, #8]
 80051c8:	041a      	lsls	r2, r3, #16
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	430a      	orrs	r2, r1
 80051d0:	611a      	str	r2, [r3, #16]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	68da      	ldr	r2, [r3, #12]
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80051e0:	60da      	str	r2, [r3, #12]
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f022 0203 	bic.w	r2, r2, #3
 80051f0:	64da      	str	r2, [r3, #76]	; 0x4c
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	69da      	ldr	r2, [r3, #28]
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	695b      	ldr	r3, [r3, #20]
 8005200:	431a      	orrs	r2, r3
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	430a      	orrs	r2, r1
 8005208:	64da      	str	r2, [r3, #76]	; 0x4c
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	689b      	ldr	r3, [r3, #8]
 8005210:	f003 0320 	and.w	r3, r3, #32
 8005214:	2b00      	cmp	r3, #0
 8005216:	d113      	bne.n	8005240 <HAL_RTC_Init+0x130>
 8005218:	6878      	ldr	r0, [r7, #4]
 800521a:	f000 f829 	bl	8005270 <HAL_RTC_WaitForSynchro>
 800521e:	4603      	mov	r3, r0
 8005220:	2b00      	cmp	r3, #0
 8005222:	d00d      	beq.n	8005240 <HAL_RTC_Init+0x130>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	22ff      	movs	r2, #255	; 0xff
 800522a:	625a      	str	r2, [r3, #36]	; 0x24
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2204      	movs	r2, #4
 8005230:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2200      	movs	r2, #0
 8005238:	f883 2020 	strb.w	r2, [r3, #32]
 800523c:	2301      	movs	r3, #1
 800523e:	e010      	b.n	8005262 <HAL_RTC_Init+0x152>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	22ff      	movs	r2, #255	; 0xff
 8005246:	625a      	str	r2, [r3, #36]	; 0x24
 8005248:	2300      	movs	r3, #0
 800524a:	73fb      	strb	r3, [r7, #15]
 800524c:	e001      	b.n	8005252 <HAL_RTC_Init+0x142>
 800524e:	2300      	movs	r3, #0
 8005250:	73fb      	strb	r3, [r7, #15]
 8005252:	7bfb      	ldrb	r3, [r7, #15]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d103      	bne.n	8005260 <HAL_RTC_Init+0x150>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2201      	movs	r2, #1
 800525c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8005260:	7bfb      	ldrb	r3, [r7, #15]
 8005262:	4618      	mov	r0, r3
 8005264:	3710      	adds	r7, #16
 8005266:	46bd      	mov	sp, r7
 8005268:	bd80      	pop	{r7, pc}
 800526a:	bf00      	nop
 800526c:	40002800 	.word	0x40002800

08005270 <HAL_RTC_WaitForSynchro>:
 8005270:	b580      	push	{r7, lr}
 8005272:	b084      	sub	sp, #16
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	68da      	ldr	r2, [r3, #12]
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005286:	60da      	str	r2, [r3, #12]
 8005288:	f7fd f8c6 	bl	8002418 <HAL_GetTick>
 800528c:	60f8      	str	r0, [r7, #12]
 800528e:	e009      	b.n	80052a4 <HAL_RTC_WaitForSynchro+0x34>
 8005290:	f7fd f8c2 	bl	8002418 <HAL_GetTick>
 8005294:	4602      	mov	r2, r0
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	1ad3      	subs	r3, r2, r3
 800529a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800529e:	d901      	bls.n	80052a4 <HAL_RTC_WaitForSynchro+0x34>
 80052a0:	2303      	movs	r3, #3
 80052a2:	e007      	b.n	80052b4 <HAL_RTC_WaitForSynchro+0x44>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	68db      	ldr	r3, [r3, #12]
 80052aa:	f003 0320 	and.w	r3, r3, #32
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d0ee      	beq.n	8005290 <HAL_RTC_WaitForSynchro+0x20>
 80052b2:	2300      	movs	r3, #0
 80052b4:	4618      	mov	r0, r3
 80052b6:	3710      	adds	r7, #16
 80052b8:	46bd      	mov	sp, r7
 80052ba:	bd80      	pop	{r7, pc}

080052bc <RTC_EnterInitMode>:
 80052bc:	b580      	push	{r7, lr}
 80052be:	b084      	sub	sp, #16
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	68db      	ldr	r3, [r3, #12]
 80052ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d119      	bne.n	8005306 <RTC_EnterInitMode+0x4a>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80052da:	60da      	str	r2, [r3, #12]
 80052dc:	f7fd f89c 	bl	8002418 <HAL_GetTick>
 80052e0:	60f8      	str	r0, [r7, #12]
 80052e2:	e009      	b.n	80052f8 <RTC_EnterInitMode+0x3c>
 80052e4:	f7fd f898 	bl	8002418 <HAL_GetTick>
 80052e8:	4602      	mov	r2, r0
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	1ad3      	subs	r3, r2, r3
 80052ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80052f2:	d901      	bls.n	80052f8 <RTC_EnterInitMode+0x3c>
 80052f4:	2303      	movs	r3, #3
 80052f6:	e007      	b.n	8005308 <RTC_EnterInitMode+0x4c>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	68db      	ldr	r3, [r3, #12]
 80052fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005302:	2b00      	cmp	r3, #0
 8005304:	d0ee      	beq.n	80052e4 <RTC_EnterInitMode+0x28>
 8005306:	2300      	movs	r3, #0
 8005308:	4618      	mov	r0, r3
 800530a:	3710      	adds	r7, #16
 800530c:	46bd      	mov	sp, r7
 800530e:	bd80      	pop	{r7, pc}

08005310 <HAL_RTCEx_SetWakeUpTimer_IT>:
 8005310:	b580      	push	{r7, lr}
 8005312:	b086      	sub	sp, #24
 8005314:	af00      	add	r7, sp, #0
 8005316:	60f8      	str	r0, [r7, #12]
 8005318:	60b9      	str	r1, [r7, #8]
 800531a:	607a      	str	r2, [r7, #4]
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005322:	2b01      	cmp	r3, #1
 8005324:	d101      	bne.n	800532a <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 8005326:	2302      	movs	r3, #2
 8005328:	e0a8      	b.n	800547c <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	2201      	movs	r2, #1
 800532e:	f883 2020 	strb.w	r2, [r3, #32]
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	2202      	movs	r2, #2
 8005336:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	22ca      	movs	r2, #202	; 0xca
 8005340:	625a      	str	r2, [r3, #36]	; 0x24
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	2253      	movs	r2, #83	; 0x53
 8005348:	625a      	str	r2, [r3, #36]	; 0x24
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	689b      	ldr	r3, [r3, #8]
 8005350:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005354:	2b00      	cmp	r3, #0
 8005356:	d020      	beq.n	800539a <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
 8005358:	f7fd f85e 	bl	8002418 <HAL_GetTick>
 800535c:	6178      	str	r0, [r7, #20]
 800535e:	e015      	b.n	800538c <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
 8005360:	f7fd f85a 	bl	8002418 <HAL_GetTick>
 8005364:	4602      	mov	r2, r0
 8005366:	697b      	ldr	r3, [r7, #20]
 8005368:	1ad3      	subs	r3, r2, r3
 800536a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800536e:	d90d      	bls.n	800538c <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	22ff      	movs	r2, #255	; 0xff
 8005376:	625a      	str	r2, [r3, #36]	; 0x24
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	2203      	movs	r2, #3
 800537c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	2200      	movs	r2, #0
 8005384:	f883 2020 	strb.w	r2, [r3, #32]
 8005388:	2303      	movs	r3, #3
 800538a:	e077      	b.n	800547c <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	68db      	ldr	r3, [r3, #12]
 8005392:	f003 0304 	and.w	r3, r3, #4
 8005396:	2b00      	cmp	r3, #0
 8005398:	d1e2      	bne.n	8005360 <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	689a      	ldr	r2, [r3, #8]
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053a8:	609a      	str	r2, [r3, #8]
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	68db      	ldr	r3, [r3, #12]
 80053b0:	b2da      	uxtb	r2, r3
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80053ba:	60da      	str	r2, [r3, #12]
 80053bc:	f7fd f82c 	bl	8002418 <HAL_GetTick>
 80053c0:	6178      	str	r0, [r7, #20]
 80053c2:	e015      	b.n	80053f0 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
 80053c4:	f7fd f828 	bl	8002418 <HAL_GetTick>
 80053c8:	4602      	mov	r2, r0
 80053ca:	697b      	ldr	r3, [r7, #20]
 80053cc:	1ad3      	subs	r3, r2, r3
 80053ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80053d2:	d90d      	bls.n	80053f0 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	22ff      	movs	r2, #255	; 0xff
 80053da:	625a      	str	r2, [r3, #36]	; 0x24
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	2203      	movs	r2, #3
 80053e0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	2200      	movs	r2, #0
 80053e8:	f883 2020 	strb.w	r2, [r3, #32]
 80053ec:	2303      	movs	r3, #3
 80053ee:	e045      	b.n	800547c <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	68db      	ldr	r3, [r3, #12]
 80053f6:	f003 0304 	and.w	r3, r3, #4
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d0e2      	beq.n	80053c4 <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	68ba      	ldr	r2, [r7, #8]
 8005404:	615a      	str	r2, [r3, #20]
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	689a      	ldr	r2, [r3, #8]
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f022 0207 	bic.w	r2, r2, #7
 8005414:	609a      	str	r2, [r3, #8]
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	6899      	ldr	r1, [r3, #8]
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	687a      	ldr	r2, [r7, #4]
 8005422:	430a      	orrs	r2, r1
 8005424:	609a      	str	r2, [r3, #8]
 8005426:	4b17      	ldr	r3, [pc, #92]	; (8005484 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8005428:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800542c:	4a15      	ldr	r2, [pc, #84]	; (8005484 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800542e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005432:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005436:	4b13      	ldr	r3, [pc, #76]	; (8005484 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4a12      	ldr	r2, [pc, #72]	; (8005484 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800543c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005440:	6013      	str	r3, [r2, #0]
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	689a      	ldr	r2, [r3, #8]
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005450:	609a      	str	r2, [r3, #8]
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	689a      	ldr	r2, [r3, #8]
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005460:	609a      	str	r2, [r3, #8]
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	22ff      	movs	r2, #255	; 0xff
 8005468:	625a      	str	r2, [r3, #36]	; 0x24
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	2201      	movs	r2, #1
 800546e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	2200      	movs	r2, #0
 8005476:	f883 2020 	strb.w	r2, [r3, #32]
 800547a:	2300      	movs	r3, #0
 800547c:	4618      	mov	r0, r3
 800547e:	3718      	adds	r7, #24
 8005480:	46bd      	mov	sp, r7
 8005482:	bd80      	pop	{r7, pc}
 8005484:	58000800 	.word	0x58000800

08005488 <LL_RCC_GetUSARTClockSource>:
 8005488:	b480      	push	{r7}
 800548a:	b083      	sub	sp, #12
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
 8005490:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005494:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	4013      	ands	r3, r2
 800549c:	4618      	mov	r0, r3
 800549e:	370c      	adds	r7, #12
 80054a0:	46bd      	mov	sp, r7
 80054a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a6:	4770      	bx	lr

080054a8 <LL_RCC_GetLPUARTClockSource>:
 80054a8:	b480      	push	{r7}
 80054aa:	b083      	sub	sp, #12
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
 80054b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054b4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	4013      	ands	r3, r2
 80054bc:	4618      	mov	r0, r3
 80054be:	370c      	adds	r7, #12
 80054c0:	46bd      	mov	sp, r7
 80054c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c6:	4770      	bx	lr

080054c8 <HAL_UART_Init>:
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b082      	sub	sp, #8
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d101      	bne.n	80054da <HAL_UART_Init+0x12>
 80054d6:	2301      	movs	r3, #1
 80054d8:	e042      	b.n	8005560 <HAL_UART_Init+0x98>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d106      	bne.n	80054f2 <HAL_UART_Init+0x2a>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2200      	movs	r2, #0
 80054e8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 80054ec:	6878      	ldr	r0, [r7, #4]
 80054ee:	f7fc fd63 	bl	8001fb8 <HAL_UART_MspInit>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2224      	movs	r2, #36	; 0x24
 80054f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	681a      	ldr	r2, [r3, #0]
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f022 0201 	bic.w	r2, r2, #1
 8005508:	601a      	str	r2, [r3, #0]
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	f000 f8ba 	bl	8005684 <UART_SetConfig>
 8005510:	4603      	mov	r3, r0
 8005512:	2b01      	cmp	r3, #1
 8005514:	d101      	bne.n	800551a <HAL_UART_Init+0x52>
 8005516:	2301      	movs	r3, #1
 8005518:	e022      	b.n	8005560 <HAL_UART_Init+0x98>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800551e:	2b00      	cmp	r3, #0
 8005520:	d002      	beq.n	8005528 <HAL_UART_Init+0x60>
 8005522:	6878      	ldr	r0, [r7, #4]
 8005524:	f000 fad6 	bl	8005ad4 <UART_AdvFeatureConfig>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	685a      	ldr	r2, [r3, #4]
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005536:	605a      	str	r2, [r3, #4]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	689a      	ldr	r2, [r3, #8]
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005546:	609a      	str	r2, [r3, #8]
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	681a      	ldr	r2, [r3, #0]
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f042 0201 	orr.w	r2, r2, #1
 8005556:	601a      	str	r2, [r3, #0]
 8005558:	6878      	ldr	r0, [r7, #4]
 800555a:	f000 fb5d 	bl	8005c18 <UART_CheckIdleState>
 800555e:	4603      	mov	r3, r0
 8005560:	4618      	mov	r0, r3
 8005562:	3708      	adds	r7, #8
 8005564:	46bd      	mov	sp, r7
 8005566:	bd80      	pop	{r7, pc}

08005568 <HAL_UART_Transmit>:
 8005568:	b580      	push	{r7, lr}
 800556a:	b08a      	sub	sp, #40	; 0x28
 800556c:	af02      	add	r7, sp, #8
 800556e:	60f8      	str	r0, [r7, #12]
 8005570:	60b9      	str	r1, [r7, #8]
 8005572:	603b      	str	r3, [r7, #0]
 8005574:	4613      	mov	r3, r2
 8005576:	80fb      	strh	r3, [r7, #6]
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800557e:	2b20      	cmp	r3, #32
 8005580:	d17b      	bne.n	800567a <HAL_UART_Transmit+0x112>
 8005582:	68bb      	ldr	r3, [r7, #8]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d002      	beq.n	800558e <HAL_UART_Transmit+0x26>
 8005588:	88fb      	ldrh	r3, [r7, #6]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d101      	bne.n	8005592 <HAL_UART_Transmit+0x2a>
 800558e:	2301      	movs	r3, #1
 8005590:	e074      	b.n	800567c <HAL_UART_Transmit+0x114>
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	2200      	movs	r2, #0
 8005596:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	2221      	movs	r2, #33	; 0x21
 800559e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 80055a2:	f7fc ff39 	bl	8002418 <HAL_GetTick>
 80055a6:	6178      	str	r0, [r7, #20]
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	88fa      	ldrh	r2, [r7, #6]
 80055ac:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	88fa      	ldrh	r2, [r7, #6]
 80055b4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	689b      	ldr	r3, [r3, #8]
 80055bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055c0:	d108      	bne.n	80055d4 <HAL_UART_Transmit+0x6c>
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	691b      	ldr	r3, [r3, #16]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d104      	bne.n	80055d4 <HAL_UART_Transmit+0x6c>
 80055ca:	2300      	movs	r3, #0
 80055cc:	61fb      	str	r3, [r7, #28]
 80055ce:	68bb      	ldr	r3, [r7, #8]
 80055d0:	61bb      	str	r3, [r7, #24]
 80055d2:	e003      	b.n	80055dc <HAL_UART_Transmit+0x74>
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	61fb      	str	r3, [r7, #28]
 80055d8:	2300      	movs	r3, #0
 80055da:	61bb      	str	r3, [r7, #24]
 80055dc:	e030      	b.n	8005640 <HAL_UART_Transmit+0xd8>
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	9300      	str	r3, [sp, #0]
 80055e2:	697b      	ldr	r3, [r7, #20]
 80055e4:	2200      	movs	r2, #0
 80055e6:	2180      	movs	r1, #128	; 0x80
 80055e8:	68f8      	ldr	r0, [r7, #12]
 80055ea:	f000 fbbf 	bl	8005d6c <UART_WaitOnFlagUntilTimeout>
 80055ee:	4603      	mov	r3, r0
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d005      	beq.n	8005600 <HAL_UART_Transmit+0x98>
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	2220      	movs	r2, #32
 80055f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 80055fc:	2303      	movs	r3, #3
 80055fe:	e03d      	b.n	800567c <HAL_UART_Transmit+0x114>
 8005600:	69fb      	ldr	r3, [r7, #28]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d10b      	bne.n	800561e <HAL_UART_Transmit+0xb6>
 8005606:	69bb      	ldr	r3, [r7, #24]
 8005608:	881b      	ldrh	r3, [r3, #0]
 800560a:	461a      	mov	r2, r3
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005614:	629a      	str	r2, [r3, #40]	; 0x28
 8005616:	69bb      	ldr	r3, [r7, #24]
 8005618:	3302      	adds	r3, #2
 800561a:	61bb      	str	r3, [r7, #24]
 800561c:	e007      	b.n	800562e <HAL_UART_Transmit+0xc6>
 800561e:	69fb      	ldr	r3, [r7, #28]
 8005620:	781a      	ldrb	r2, [r3, #0]
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	629a      	str	r2, [r3, #40]	; 0x28
 8005628:	69fb      	ldr	r3, [r7, #28]
 800562a:	3301      	adds	r3, #1
 800562c:	61fb      	str	r3, [r7, #28]
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005634:	b29b      	uxth	r3, r3
 8005636:	3b01      	subs	r3, #1
 8005638:	b29a      	uxth	r2, r3
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005646:	b29b      	uxth	r3, r3
 8005648:	2b00      	cmp	r3, #0
 800564a:	d1c8      	bne.n	80055de <HAL_UART_Transmit+0x76>
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	9300      	str	r3, [sp, #0]
 8005650:	697b      	ldr	r3, [r7, #20]
 8005652:	2200      	movs	r2, #0
 8005654:	2140      	movs	r1, #64	; 0x40
 8005656:	68f8      	ldr	r0, [r7, #12]
 8005658:	f000 fb88 	bl	8005d6c <UART_WaitOnFlagUntilTimeout>
 800565c:	4603      	mov	r3, r0
 800565e:	2b00      	cmp	r3, #0
 8005660:	d005      	beq.n	800566e <HAL_UART_Transmit+0x106>
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	2220      	movs	r2, #32
 8005666:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 800566a:	2303      	movs	r3, #3
 800566c:	e006      	b.n	800567c <HAL_UART_Transmit+0x114>
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	2220      	movs	r2, #32
 8005672:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8005676:	2300      	movs	r3, #0
 8005678:	e000      	b.n	800567c <HAL_UART_Transmit+0x114>
 800567a:	2302      	movs	r3, #2
 800567c:	4618      	mov	r0, r3
 800567e:	3720      	adds	r7, #32
 8005680:	46bd      	mov	sp, r7
 8005682:	bd80      	pop	{r7, pc}

08005684 <UART_SetConfig>:
 8005684:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005688:	b08c      	sub	sp, #48	; 0x30
 800568a:	af00      	add	r7, sp, #0
 800568c:	6178      	str	r0, [r7, #20]
 800568e:	2300      	movs	r3, #0
 8005690:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005694:	697b      	ldr	r3, [r7, #20]
 8005696:	689a      	ldr	r2, [r3, #8]
 8005698:	697b      	ldr	r3, [r7, #20]
 800569a:	691b      	ldr	r3, [r3, #16]
 800569c:	431a      	orrs	r2, r3
 800569e:	697b      	ldr	r3, [r7, #20]
 80056a0:	695b      	ldr	r3, [r3, #20]
 80056a2:	431a      	orrs	r2, r3
 80056a4:	697b      	ldr	r3, [r7, #20]
 80056a6:	69db      	ldr	r3, [r3, #28]
 80056a8:	4313      	orrs	r3, r2
 80056aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	681a      	ldr	r2, [r3, #0]
 80056b2:	4baf      	ldr	r3, [pc, #700]	; (8005970 <UART_SetConfig+0x2ec>)
 80056b4:	4013      	ands	r3, r2
 80056b6:	697a      	ldr	r2, [r7, #20]
 80056b8:	6812      	ldr	r2, [r2, #0]
 80056ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80056bc:	430b      	orrs	r3, r1
 80056be:	6013      	str	r3, [r2, #0]
 80056c0:	697b      	ldr	r3, [r7, #20]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	685b      	ldr	r3, [r3, #4]
 80056c6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80056ca:	697b      	ldr	r3, [r7, #20]
 80056cc:	68da      	ldr	r2, [r3, #12]
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	430a      	orrs	r2, r1
 80056d4:	605a      	str	r2, [r3, #4]
 80056d6:	697b      	ldr	r3, [r7, #20]
 80056d8:	699b      	ldr	r3, [r3, #24]
 80056da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80056dc:	697b      	ldr	r3, [r7, #20]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4aa4      	ldr	r2, [pc, #656]	; (8005974 <UART_SetConfig+0x2f0>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d004      	beq.n	80056f0 <UART_SetConfig+0x6c>
 80056e6:	697b      	ldr	r3, [r7, #20]
 80056e8:	6a1b      	ldr	r3, [r3, #32]
 80056ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80056ec:	4313      	orrs	r3, r2
 80056ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80056f0:	697b      	ldr	r3, [r7, #20]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	689b      	ldr	r3, [r3, #8]
 80056f6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80056fa:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80056fe:	697a      	ldr	r2, [r7, #20]
 8005700:	6812      	ldr	r2, [r2, #0]
 8005702:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005704:	430b      	orrs	r3, r1
 8005706:	6093      	str	r3, [r2, #8]
 8005708:	697b      	ldr	r3, [r7, #20]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800570e:	f023 010f 	bic.w	r1, r3, #15
 8005712:	697b      	ldr	r3, [r7, #20]
 8005714:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005716:	697b      	ldr	r3, [r7, #20]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	430a      	orrs	r2, r1
 800571c:	62da      	str	r2, [r3, #44]	; 0x2c
 800571e:	697b      	ldr	r3, [r7, #20]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4a95      	ldr	r2, [pc, #596]	; (8005978 <UART_SetConfig+0x2f4>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d125      	bne.n	8005774 <UART_SetConfig+0xf0>
 8005728:	2003      	movs	r0, #3
 800572a:	f7ff fead 	bl	8005488 <LL_RCC_GetUSARTClockSource>
 800572e:	4603      	mov	r3, r0
 8005730:	2b03      	cmp	r3, #3
 8005732:	d81b      	bhi.n	800576c <UART_SetConfig+0xe8>
 8005734:	a201      	add	r2, pc, #4	; (adr r2, 800573c <UART_SetConfig+0xb8>)
 8005736:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800573a:	bf00      	nop
 800573c:	0800574d 	.word	0x0800574d
 8005740:	0800575d 	.word	0x0800575d
 8005744:	08005755 	.word	0x08005755
 8005748:	08005765 	.word	0x08005765
 800574c:	2301      	movs	r3, #1
 800574e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005752:	e042      	b.n	80057da <UART_SetConfig+0x156>
 8005754:	2302      	movs	r3, #2
 8005756:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800575a:	e03e      	b.n	80057da <UART_SetConfig+0x156>
 800575c:	2304      	movs	r3, #4
 800575e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005762:	e03a      	b.n	80057da <UART_SetConfig+0x156>
 8005764:	2308      	movs	r3, #8
 8005766:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800576a:	e036      	b.n	80057da <UART_SetConfig+0x156>
 800576c:	2310      	movs	r3, #16
 800576e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005772:	e032      	b.n	80057da <UART_SetConfig+0x156>
 8005774:	697b      	ldr	r3, [r7, #20]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4a7e      	ldr	r2, [pc, #504]	; (8005974 <UART_SetConfig+0x2f0>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d12a      	bne.n	80057d4 <UART_SetConfig+0x150>
 800577e:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8005782:	f7ff fe91 	bl	80054a8 <LL_RCC_GetLPUARTClockSource>
 8005786:	4603      	mov	r3, r0
 8005788:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800578c:	d01a      	beq.n	80057c4 <UART_SetConfig+0x140>
 800578e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005792:	d81b      	bhi.n	80057cc <UART_SetConfig+0x148>
 8005794:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005798:	d00c      	beq.n	80057b4 <UART_SetConfig+0x130>
 800579a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800579e:	d815      	bhi.n	80057cc <UART_SetConfig+0x148>
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d003      	beq.n	80057ac <UART_SetConfig+0x128>
 80057a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057a8:	d008      	beq.n	80057bc <UART_SetConfig+0x138>
 80057aa:	e00f      	b.n	80057cc <UART_SetConfig+0x148>
 80057ac:	2300      	movs	r3, #0
 80057ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80057b2:	e012      	b.n	80057da <UART_SetConfig+0x156>
 80057b4:	2302      	movs	r3, #2
 80057b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80057ba:	e00e      	b.n	80057da <UART_SetConfig+0x156>
 80057bc:	2304      	movs	r3, #4
 80057be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80057c2:	e00a      	b.n	80057da <UART_SetConfig+0x156>
 80057c4:	2308      	movs	r3, #8
 80057c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80057ca:	e006      	b.n	80057da <UART_SetConfig+0x156>
 80057cc:	2310      	movs	r3, #16
 80057ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80057d2:	e002      	b.n	80057da <UART_SetConfig+0x156>
 80057d4:	2310      	movs	r3, #16
 80057d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	4a65      	ldr	r2, [pc, #404]	; (8005974 <UART_SetConfig+0x2f0>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	f040 8097 	bne.w	8005914 <UART_SetConfig+0x290>
 80057e6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80057ea:	2b08      	cmp	r3, #8
 80057ec:	d823      	bhi.n	8005836 <UART_SetConfig+0x1b2>
 80057ee:	a201      	add	r2, pc, #4	; (adr r2, 80057f4 <UART_SetConfig+0x170>)
 80057f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057f4:	08005819 	.word	0x08005819
 80057f8:	08005837 	.word	0x08005837
 80057fc:	08005821 	.word	0x08005821
 8005800:	08005837 	.word	0x08005837
 8005804:	08005827 	.word	0x08005827
 8005808:	08005837 	.word	0x08005837
 800580c:	08005837 	.word	0x08005837
 8005810:	08005837 	.word	0x08005837
 8005814:	0800582f 	.word	0x0800582f
 8005818:	f7fe ff76 	bl	8004708 <HAL_RCC_GetPCLK1Freq>
 800581c:	6278      	str	r0, [r7, #36]	; 0x24
 800581e:	e010      	b.n	8005842 <UART_SetConfig+0x1be>
 8005820:	4b56      	ldr	r3, [pc, #344]	; (800597c <UART_SetConfig+0x2f8>)
 8005822:	627b      	str	r3, [r7, #36]	; 0x24
 8005824:	e00d      	b.n	8005842 <UART_SetConfig+0x1be>
 8005826:	f7fe feef 	bl	8004608 <HAL_RCC_GetSysClockFreq>
 800582a:	6278      	str	r0, [r7, #36]	; 0x24
 800582c:	e009      	b.n	8005842 <UART_SetConfig+0x1be>
 800582e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005832:	627b      	str	r3, [r7, #36]	; 0x24
 8005834:	e005      	b.n	8005842 <UART_SetConfig+0x1be>
 8005836:	2300      	movs	r3, #0
 8005838:	627b      	str	r3, [r7, #36]	; 0x24
 800583a:	2301      	movs	r3, #1
 800583c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005840:	bf00      	nop
 8005842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005844:	2b00      	cmp	r3, #0
 8005846:	f000 812b 	beq.w	8005aa0 <UART_SetConfig+0x41c>
 800584a:	697b      	ldr	r3, [r7, #20]
 800584c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800584e:	4a4c      	ldr	r2, [pc, #304]	; (8005980 <UART_SetConfig+0x2fc>)
 8005850:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005854:	461a      	mov	r2, r3
 8005856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005858:	fbb3 f3f2 	udiv	r3, r3, r2
 800585c:	61bb      	str	r3, [r7, #24]
 800585e:	697b      	ldr	r3, [r7, #20]
 8005860:	685a      	ldr	r2, [r3, #4]
 8005862:	4613      	mov	r3, r2
 8005864:	005b      	lsls	r3, r3, #1
 8005866:	4413      	add	r3, r2
 8005868:	69ba      	ldr	r2, [r7, #24]
 800586a:	429a      	cmp	r2, r3
 800586c:	d305      	bcc.n	800587a <UART_SetConfig+0x1f6>
 800586e:	697b      	ldr	r3, [r7, #20]
 8005870:	685b      	ldr	r3, [r3, #4]
 8005872:	031b      	lsls	r3, r3, #12
 8005874:	69ba      	ldr	r2, [r7, #24]
 8005876:	429a      	cmp	r2, r3
 8005878:	d903      	bls.n	8005882 <UART_SetConfig+0x1fe>
 800587a:	2301      	movs	r3, #1
 800587c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005880:	e10e      	b.n	8005aa0 <UART_SetConfig+0x41c>
 8005882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005884:	2200      	movs	r2, #0
 8005886:	60bb      	str	r3, [r7, #8]
 8005888:	60fa      	str	r2, [r7, #12]
 800588a:	697b      	ldr	r3, [r7, #20]
 800588c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800588e:	4a3c      	ldr	r2, [pc, #240]	; (8005980 <UART_SetConfig+0x2fc>)
 8005890:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005894:	b29b      	uxth	r3, r3
 8005896:	2200      	movs	r2, #0
 8005898:	603b      	str	r3, [r7, #0]
 800589a:	607a      	str	r2, [r7, #4]
 800589c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80058a0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80058a4:	f7fa fcc4 	bl	8000230 <__aeabi_uldivmod>
 80058a8:	4602      	mov	r2, r0
 80058aa:	460b      	mov	r3, r1
 80058ac:	4610      	mov	r0, r2
 80058ae:	4619      	mov	r1, r3
 80058b0:	f04f 0200 	mov.w	r2, #0
 80058b4:	f04f 0300 	mov.w	r3, #0
 80058b8:	020b      	lsls	r3, r1, #8
 80058ba:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80058be:	0202      	lsls	r2, r0, #8
 80058c0:	6979      	ldr	r1, [r7, #20]
 80058c2:	6849      	ldr	r1, [r1, #4]
 80058c4:	0849      	lsrs	r1, r1, #1
 80058c6:	2000      	movs	r0, #0
 80058c8:	460c      	mov	r4, r1
 80058ca:	4605      	mov	r5, r0
 80058cc:	eb12 0804 	adds.w	r8, r2, r4
 80058d0:	eb43 0905 	adc.w	r9, r3, r5
 80058d4:	697b      	ldr	r3, [r7, #20]
 80058d6:	685b      	ldr	r3, [r3, #4]
 80058d8:	2200      	movs	r2, #0
 80058da:	469a      	mov	sl, r3
 80058dc:	4693      	mov	fp, r2
 80058de:	4652      	mov	r2, sl
 80058e0:	465b      	mov	r3, fp
 80058e2:	4640      	mov	r0, r8
 80058e4:	4649      	mov	r1, r9
 80058e6:	f7fa fca3 	bl	8000230 <__aeabi_uldivmod>
 80058ea:	4602      	mov	r2, r0
 80058ec:	460b      	mov	r3, r1
 80058ee:	4613      	mov	r3, r2
 80058f0:	623b      	str	r3, [r7, #32]
 80058f2:	6a3b      	ldr	r3, [r7, #32]
 80058f4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80058f8:	d308      	bcc.n	800590c <UART_SetConfig+0x288>
 80058fa:	6a3b      	ldr	r3, [r7, #32]
 80058fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005900:	d204      	bcs.n	800590c <UART_SetConfig+0x288>
 8005902:	697b      	ldr	r3, [r7, #20]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	6a3a      	ldr	r2, [r7, #32]
 8005908:	60da      	str	r2, [r3, #12]
 800590a:	e0c9      	b.n	8005aa0 <UART_SetConfig+0x41c>
 800590c:	2301      	movs	r3, #1
 800590e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005912:	e0c5      	b.n	8005aa0 <UART_SetConfig+0x41c>
 8005914:	697b      	ldr	r3, [r7, #20]
 8005916:	69db      	ldr	r3, [r3, #28]
 8005918:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800591c:	d16d      	bne.n	80059fa <UART_SetConfig+0x376>
 800591e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005922:	3b01      	subs	r3, #1
 8005924:	2b07      	cmp	r3, #7
 8005926:	d82d      	bhi.n	8005984 <UART_SetConfig+0x300>
 8005928:	a201      	add	r2, pc, #4	; (adr r2, 8005930 <UART_SetConfig+0x2ac>)
 800592a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800592e:	bf00      	nop
 8005930:	08005951 	.word	0x08005951
 8005934:	08005959 	.word	0x08005959
 8005938:	08005985 	.word	0x08005985
 800593c:	0800595f 	.word	0x0800595f
 8005940:	08005985 	.word	0x08005985
 8005944:	08005985 	.word	0x08005985
 8005948:	08005985 	.word	0x08005985
 800594c:	08005967 	.word	0x08005967
 8005950:	f7fe fef0 	bl	8004734 <HAL_RCC_GetPCLK2Freq>
 8005954:	6278      	str	r0, [r7, #36]	; 0x24
 8005956:	e01b      	b.n	8005990 <UART_SetConfig+0x30c>
 8005958:	4b08      	ldr	r3, [pc, #32]	; (800597c <UART_SetConfig+0x2f8>)
 800595a:	627b      	str	r3, [r7, #36]	; 0x24
 800595c:	e018      	b.n	8005990 <UART_SetConfig+0x30c>
 800595e:	f7fe fe53 	bl	8004608 <HAL_RCC_GetSysClockFreq>
 8005962:	6278      	str	r0, [r7, #36]	; 0x24
 8005964:	e014      	b.n	8005990 <UART_SetConfig+0x30c>
 8005966:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800596a:	627b      	str	r3, [r7, #36]	; 0x24
 800596c:	e010      	b.n	8005990 <UART_SetConfig+0x30c>
 800596e:	bf00      	nop
 8005970:	cfff69f3 	.word	0xcfff69f3
 8005974:	40008000 	.word	0x40008000
 8005978:	40013800 	.word	0x40013800
 800597c:	00f42400 	.word	0x00f42400
 8005980:	0800a650 	.word	0x0800a650
 8005984:	2300      	movs	r3, #0
 8005986:	627b      	str	r3, [r7, #36]	; 0x24
 8005988:	2301      	movs	r3, #1
 800598a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800598e:	bf00      	nop
 8005990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005992:	2b00      	cmp	r3, #0
 8005994:	f000 8084 	beq.w	8005aa0 <UART_SetConfig+0x41c>
 8005998:	697b      	ldr	r3, [r7, #20]
 800599a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800599c:	4a4b      	ldr	r2, [pc, #300]	; (8005acc <UART_SetConfig+0x448>)
 800599e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80059a2:	461a      	mov	r2, r3
 80059a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059a6:	fbb3 f3f2 	udiv	r3, r3, r2
 80059aa:	005a      	lsls	r2, r3, #1
 80059ac:	697b      	ldr	r3, [r7, #20]
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	085b      	lsrs	r3, r3, #1
 80059b2:	441a      	add	r2, r3
 80059b4:	697b      	ldr	r3, [r7, #20]
 80059b6:	685b      	ldr	r3, [r3, #4]
 80059b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80059bc:	623b      	str	r3, [r7, #32]
 80059be:	6a3b      	ldr	r3, [r7, #32]
 80059c0:	2b0f      	cmp	r3, #15
 80059c2:	d916      	bls.n	80059f2 <UART_SetConfig+0x36e>
 80059c4:	6a3b      	ldr	r3, [r7, #32]
 80059c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059ca:	d212      	bcs.n	80059f2 <UART_SetConfig+0x36e>
 80059cc:	6a3b      	ldr	r3, [r7, #32]
 80059ce:	b29b      	uxth	r3, r3
 80059d0:	f023 030f 	bic.w	r3, r3, #15
 80059d4:	83fb      	strh	r3, [r7, #30]
 80059d6:	6a3b      	ldr	r3, [r7, #32]
 80059d8:	085b      	lsrs	r3, r3, #1
 80059da:	b29b      	uxth	r3, r3
 80059dc:	f003 0307 	and.w	r3, r3, #7
 80059e0:	b29a      	uxth	r2, r3
 80059e2:	8bfb      	ldrh	r3, [r7, #30]
 80059e4:	4313      	orrs	r3, r2
 80059e6:	83fb      	strh	r3, [r7, #30]
 80059e8:	697b      	ldr	r3, [r7, #20]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	8bfa      	ldrh	r2, [r7, #30]
 80059ee:	60da      	str	r2, [r3, #12]
 80059f0:	e056      	b.n	8005aa0 <UART_SetConfig+0x41c>
 80059f2:	2301      	movs	r3, #1
 80059f4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80059f8:	e052      	b.n	8005aa0 <UART_SetConfig+0x41c>
 80059fa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80059fe:	3b01      	subs	r3, #1
 8005a00:	2b07      	cmp	r3, #7
 8005a02:	d822      	bhi.n	8005a4a <UART_SetConfig+0x3c6>
 8005a04:	a201      	add	r2, pc, #4	; (adr r2, 8005a0c <UART_SetConfig+0x388>)
 8005a06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a0a:	bf00      	nop
 8005a0c:	08005a2d 	.word	0x08005a2d
 8005a10:	08005a35 	.word	0x08005a35
 8005a14:	08005a4b 	.word	0x08005a4b
 8005a18:	08005a3b 	.word	0x08005a3b
 8005a1c:	08005a4b 	.word	0x08005a4b
 8005a20:	08005a4b 	.word	0x08005a4b
 8005a24:	08005a4b 	.word	0x08005a4b
 8005a28:	08005a43 	.word	0x08005a43
 8005a2c:	f7fe fe82 	bl	8004734 <HAL_RCC_GetPCLK2Freq>
 8005a30:	6278      	str	r0, [r7, #36]	; 0x24
 8005a32:	e010      	b.n	8005a56 <UART_SetConfig+0x3d2>
 8005a34:	4b26      	ldr	r3, [pc, #152]	; (8005ad0 <UART_SetConfig+0x44c>)
 8005a36:	627b      	str	r3, [r7, #36]	; 0x24
 8005a38:	e00d      	b.n	8005a56 <UART_SetConfig+0x3d2>
 8005a3a:	f7fe fde5 	bl	8004608 <HAL_RCC_GetSysClockFreq>
 8005a3e:	6278      	str	r0, [r7, #36]	; 0x24
 8005a40:	e009      	b.n	8005a56 <UART_SetConfig+0x3d2>
 8005a42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a46:	627b      	str	r3, [r7, #36]	; 0x24
 8005a48:	e005      	b.n	8005a56 <UART_SetConfig+0x3d2>
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	627b      	str	r3, [r7, #36]	; 0x24
 8005a4e:	2301      	movs	r3, #1
 8005a50:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005a54:	bf00      	nop
 8005a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d021      	beq.n	8005aa0 <UART_SetConfig+0x41c>
 8005a5c:	697b      	ldr	r3, [r7, #20]
 8005a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a60:	4a1a      	ldr	r2, [pc, #104]	; (8005acc <UART_SetConfig+0x448>)
 8005a62:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005a66:	461a      	mov	r2, r3
 8005a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a6a:	fbb3 f2f2 	udiv	r2, r3, r2
 8005a6e:	697b      	ldr	r3, [r7, #20]
 8005a70:	685b      	ldr	r3, [r3, #4]
 8005a72:	085b      	lsrs	r3, r3, #1
 8005a74:	441a      	add	r2, r3
 8005a76:	697b      	ldr	r3, [r7, #20]
 8005a78:	685b      	ldr	r3, [r3, #4]
 8005a7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a7e:	623b      	str	r3, [r7, #32]
 8005a80:	6a3b      	ldr	r3, [r7, #32]
 8005a82:	2b0f      	cmp	r3, #15
 8005a84:	d909      	bls.n	8005a9a <UART_SetConfig+0x416>
 8005a86:	6a3b      	ldr	r3, [r7, #32]
 8005a88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a8c:	d205      	bcs.n	8005a9a <UART_SetConfig+0x416>
 8005a8e:	6a3b      	ldr	r3, [r7, #32]
 8005a90:	b29a      	uxth	r2, r3
 8005a92:	697b      	ldr	r3, [r7, #20]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	60da      	str	r2, [r3, #12]
 8005a98:	e002      	b.n	8005aa0 <UART_SetConfig+0x41c>
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005aa0:	697b      	ldr	r3, [r7, #20]
 8005aa2:	2201      	movs	r2, #1
 8005aa4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8005aa8:	697b      	ldr	r3, [r7, #20]
 8005aaa:	2201      	movs	r2, #1
 8005aac:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8005ab0:	697b      	ldr	r3, [r7, #20]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	675a      	str	r2, [r3, #116]	; 0x74
 8005ab6:	697b      	ldr	r3, [r7, #20]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	679a      	str	r2, [r3, #120]	; 0x78
 8005abc:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	3730      	adds	r7, #48	; 0x30
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005aca:	bf00      	nop
 8005acc:	0800a650 	.word	0x0800a650
 8005ad0:	00f42400 	.word	0x00f42400

08005ad4 <UART_AdvFeatureConfig>:
 8005ad4:	b480      	push	{r7}
 8005ad6:	b083      	sub	sp, #12
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ae0:	f003 0301 	and.w	r3, r3, #1
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d00a      	beq.n	8005afe <UART_AdvFeatureConfig+0x2a>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	685b      	ldr	r3, [r3, #4]
 8005aee:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	430a      	orrs	r2, r1
 8005afc:	605a      	str	r2, [r3, #4]
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b02:	f003 0302 	and.w	r3, r3, #2
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d00a      	beq.n	8005b20 <UART_AdvFeatureConfig+0x4c>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	685b      	ldr	r3, [r3, #4]
 8005b10:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	430a      	orrs	r2, r1
 8005b1e:	605a      	str	r2, [r3, #4]
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b24:	f003 0304 	and.w	r3, r3, #4
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d00a      	beq.n	8005b42 <UART_AdvFeatureConfig+0x6e>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	685b      	ldr	r3, [r3, #4]
 8005b32:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	430a      	orrs	r2, r1
 8005b40:	605a      	str	r2, [r3, #4]
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b46:	f003 0308 	and.w	r3, r3, #8
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d00a      	beq.n	8005b64 <UART_AdvFeatureConfig+0x90>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	685b      	ldr	r3, [r3, #4]
 8005b54:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	430a      	orrs	r2, r1
 8005b62:	605a      	str	r2, [r3, #4]
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b68:	f003 0310 	and.w	r3, r3, #16
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d00a      	beq.n	8005b86 <UART_AdvFeatureConfig+0xb2>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	689b      	ldr	r3, [r3, #8]
 8005b76:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	430a      	orrs	r2, r1
 8005b84:	609a      	str	r2, [r3, #8]
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b8a:	f003 0320 	and.w	r3, r3, #32
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d00a      	beq.n	8005ba8 <UART_AdvFeatureConfig+0xd4>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	689b      	ldr	r3, [r3, #8]
 8005b98:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	430a      	orrs	r2, r1
 8005ba6:	609a      	str	r2, [r3, #8]
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d01a      	beq.n	8005bea <UART_AdvFeatureConfig+0x116>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	685b      	ldr	r3, [r3, #4]
 8005bba:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	430a      	orrs	r2, r1
 8005bc8:	605a      	str	r2, [r3, #4]
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005bd2:	d10a      	bne.n	8005bea <UART_AdvFeatureConfig+0x116>
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	685b      	ldr	r3, [r3, #4]
 8005bda:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	430a      	orrs	r2, r1
 8005be8:	605a      	str	r2, [r3, #4]
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d00a      	beq.n	8005c0c <UART_AdvFeatureConfig+0x138>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	685b      	ldr	r3, [r3, #4]
 8005bfc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	430a      	orrs	r2, r1
 8005c0a:	605a      	str	r2, [r3, #4]
 8005c0c:	bf00      	nop
 8005c0e:	370c      	adds	r7, #12
 8005c10:	46bd      	mov	sp, r7
 8005c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c16:	4770      	bx	lr

08005c18 <UART_CheckIdleState>:
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b098      	sub	sp, #96	; 0x60
 8005c1c:	af02      	add	r7, sp, #8
 8005c1e:	6078      	str	r0, [r7, #4]
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2200      	movs	r2, #0
 8005c24:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8005c28:	f7fc fbf6 	bl	8002418 <HAL_GetTick>
 8005c2c:	6578      	str	r0, [r7, #84]	; 0x54
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f003 0308 	and.w	r3, r3, #8
 8005c38:	2b08      	cmp	r3, #8
 8005c3a:	d12f      	bne.n	8005c9c <UART_CheckIdleState+0x84>
 8005c3c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005c40:	9300      	str	r3, [sp, #0]
 8005c42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c44:	2200      	movs	r2, #0
 8005c46:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005c4a:	6878      	ldr	r0, [r7, #4]
 8005c4c:	f000 f88e 	bl	8005d6c <UART_WaitOnFlagUntilTimeout>
 8005c50:	4603      	mov	r3, r0
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d022      	beq.n	8005c9c <UART_CheckIdleState+0x84>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	63bb      	str	r3, [r7, #56]	; 0x38
 8005c5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c5e:	e853 3f00 	ldrex	r3, [r3]
 8005c62:	637b      	str	r3, [r7, #52]	; 0x34
 8005c64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c66:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c6a:	653b      	str	r3, [r7, #80]	; 0x50
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	461a      	mov	r2, r3
 8005c72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c74:	647b      	str	r3, [r7, #68]	; 0x44
 8005c76:	643a      	str	r2, [r7, #64]	; 0x40
 8005c78:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005c7a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005c7c:	e841 2300 	strex	r3, r2, [r1]
 8005c80:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d1e6      	bne.n	8005c56 <UART_CheckIdleState+0x3e>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2220      	movs	r2, #32
 8005c8c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2200      	movs	r2, #0
 8005c94:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 8005c98:	2303      	movs	r3, #3
 8005c9a:	e063      	b.n	8005d64 <UART_CheckIdleState+0x14c>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f003 0304 	and.w	r3, r3, #4
 8005ca6:	2b04      	cmp	r3, #4
 8005ca8:	d149      	bne.n	8005d3e <UART_CheckIdleState+0x126>
 8005caa:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005cae:	9300      	str	r3, [sp, #0]
 8005cb0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005cb8:	6878      	ldr	r0, [r7, #4]
 8005cba:	f000 f857 	bl	8005d6c <UART_WaitOnFlagUntilTimeout>
 8005cbe:	4603      	mov	r3, r0
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d03c      	beq.n	8005d3e <UART_CheckIdleState+0x126>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	627b      	str	r3, [r7, #36]	; 0x24
 8005cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ccc:	e853 3f00 	ldrex	r3, [r3]
 8005cd0:	623b      	str	r3, [r7, #32]
 8005cd2:	6a3b      	ldr	r3, [r7, #32]
 8005cd4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005cd8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	461a      	mov	r2, r3
 8005ce0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ce2:	633b      	str	r3, [r7, #48]	; 0x30
 8005ce4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005ce6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005ce8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005cea:	e841 2300 	strex	r3, r2, [r1]
 8005cee:	62bb      	str	r3, [r7, #40]	; 0x28
 8005cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d1e6      	bne.n	8005cc4 <UART_CheckIdleState+0xac>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	3308      	adds	r3, #8
 8005cfc:	613b      	str	r3, [r7, #16]
 8005cfe:	693b      	ldr	r3, [r7, #16]
 8005d00:	e853 3f00 	ldrex	r3, [r3]
 8005d04:	60fb      	str	r3, [r7, #12]
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	f023 0301 	bic.w	r3, r3, #1
 8005d0c:	64bb      	str	r3, [r7, #72]	; 0x48
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	3308      	adds	r3, #8
 8005d14:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005d16:	61fa      	str	r2, [r7, #28]
 8005d18:	61bb      	str	r3, [r7, #24]
 8005d1a:	69b9      	ldr	r1, [r7, #24]
 8005d1c:	69fa      	ldr	r2, [r7, #28]
 8005d1e:	e841 2300 	strex	r3, r2, [r1]
 8005d22:	617b      	str	r3, [r7, #20]
 8005d24:	697b      	ldr	r3, [r7, #20]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d1e5      	bne.n	8005cf6 <UART_CheckIdleState+0xde>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2220      	movs	r2, #32
 8005d2e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2200      	movs	r2, #0
 8005d36:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 8005d3a:	2303      	movs	r3, #3
 8005d3c:	e012      	b.n	8005d64 <UART_CheckIdleState+0x14c>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2220      	movs	r2, #32
 8005d42:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2220      	movs	r2, #32
 8005d4a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2200      	movs	r2, #0
 8005d52:	66da      	str	r2, [r3, #108]	; 0x6c
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2200      	movs	r2, #0
 8005d58:	671a      	str	r2, [r3, #112]	; 0x70
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 8005d62:	2300      	movs	r3, #0
 8005d64:	4618      	mov	r0, r3
 8005d66:	3758      	adds	r7, #88	; 0x58
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	bd80      	pop	{r7, pc}

08005d6c <UART_WaitOnFlagUntilTimeout>:
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b084      	sub	sp, #16
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	60f8      	str	r0, [r7, #12]
 8005d74:	60b9      	str	r1, [r7, #8]
 8005d76:	603b      	str	r3, [r7, #0]
 8005d78:	4613      	mov	r3, r2
 8005d7a:	71fb      	strb	r3, [r7, #7]
 8005d7c:	e049      	b.n	8005e12 <UART_WaitOnFlagUntilTimeout+0xa6>
 8005d7e:	69bb      	ldr	r3, [r7, #24]
 8005d80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005d84:	d045      	beq.n	8005e12 <UART_WaitOnFlagUntilTimeout+0xa6>
 8005d86:	f7fc fb47 	bl	8002418 <HAL_GetTick>
 8005d8a:	4602      	mov	r2, r0
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	1ad3      	subs	r3, r2, r3
 8005d90:	69ba      	ldr	r2, [r7, #24]
 8005d92:	429a      	cmp	r2, r3
 8005d94:	d302      	bcc.n	8005d9c <UART_WaitOnFlagUntilTimeout+0x30>
 8005d96:	69bb      	ldr	r3, [r7, #24]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d101      	bne.n	8005da0 <UART_WaitOnFlagUntilTimeout+0x34>
 8005d9c:	2303      	movs	r3, #3
 8005d9e:	e048      	b.n	8005e32 <UART_WaitOnFlagUntilTimeout+0xc6>
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f003 0304 	and.w	r3, r3, #4
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d031      	beq.n	8005e12 <UART_WaitOnFlagUntilTimeout+0xa6>
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	69db      	ldr	r3, [r3, #28]
 8005db4:	f003 0308 	and.w	r3, r3, #8
 8005db8:	2b08      	cmp	r3, #8
 8005dba:	d110      	bne.n	8005dde <UART_WaitOnFlagUntilTimeout+0x72>
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	2208      	movs	r2, #8
 8005dc2:	621a      	str	r2, [r3, #32]
 8005dc4:	68f8      	ldr	r0, [r7, #12]
 8005dc6:	f000 f838 	bl	8005e3a <UART_EndRxTransfer>
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	2208      	movs	r2, #8
 8005dce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 8005dda:	2301      	movs	r3, #1
 8005ddc:	e029      	b.n	8005e32 <UART_WaitOnFlagUntilTimeout+0xc6>
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	69db      	ldr	r3, [r3, #28]
 8005de4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005de8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005dec:	d111      	bne.n	8005e12 <UART_WaitOnFlagUntilTimeout+0xa6>
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005df6:	621a      	str	r2, [r3, #32]
 8005df8:	68f8      	ldr	r0, [r7, #12]
 8005dfa:	f000 f81e 	bl	8005e3a <UART_EndRxTransfer>
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	2220      	movs	r2, #32
 8005e02:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	2200      	movs	r2, #0
 8005e0a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 8005e0e:	2303      	movs	r3, #3
 8005e10:	e00f      	b.n	8005e32 <UART_WaitOnFlagUntilTimeout+0xc6>
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	69da      	ldr	r2, [r3, #28]
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	4013      	ands	r3, r2
 8005e1c:	68ba      	ldr	r2, [r7, #8]
 8005e1e:	429a      	cmp	r2, r3
 8005e20:	bf0c      	ite	eq
 8005e22:	2301      	moveq	r3, #1
 8005e24:	2300      	movne	r3, #0
 8005e26:	b2db      	uxtb	r3, r3
 8005e28:	461a      	mov	r2, r3
 8005e2a:	79fb      	ldrb	r3, [r7, #7]
 8005e2c:	429a      	cmp	r2, r3
 8005e2e:	d0a6      	beq.n	8005d7e <UART_WaitOnFlagUntilTimeout+0x12>
 8005e30:	2300      	movs	r3, #0
 8005e32:	4618      	mov	r0, r3
 8005e34:	3710      	adds	r7, #16
 8005e36:	46bd      	mov	sp, r7
 8005e38:	bd80      	pop	{r7, pc}

08005e3a <UART_EndRxTransfer>:
 8005e3a:	b480      	push	{r7}
 8005e3c:	b095      	sub	sp, #84	; 0x54
 8005e3e:	af00      	add	r7, sp, #0
 8005e40:	6078      	str	r0, [r7, #4]
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	637b      	str	r3, [r7, #52]	; 0x34
 8005e48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e4a:	e853 3f00 	ldrex	r3, [r3]
 8005e4e:	633b      	str	r3, [r7, #48]	; 0x30
 8005e50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e52:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005e56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	461a      	mov	r2, r3
 8005e5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e60:	643b      	str	r3, [r7, #64]	; 0x40
 8005e62:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005e64:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005e66:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005e68:	e841 2300 	strex	r3, r2, [r1]
 8005e6c:	63bb      	str	r3, [r7, #56]	; 0x38
 8005e6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d1e6      	bne.n	8005e42 <UART_EndRxTransfer+0x8>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	3308      	adds	r3, #8
 8005e7a:	623b      	str	r3, [r7, #32]
 8005e7c:	6a3b      	ldr	r3, [r7, #32]
 8005e7e:	e853 3f00 	ldrex	r3, [r3]
 8005e82:	61fb      	str	r3, [r7, #28]
 8005e84:	69fb      	ldr	r3, [r7, #28]
 8005e86:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e8a:	f023 0301 	bic.w	r3, r3, #1
 8005e8e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	3308      	adds	r3, #8
 8005e96:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005e98:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005e9a:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e9c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005e9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ea0:	e841 2300 	strex	r3, r2, [r1]
 8005ea4:	627b      	str	r3, [r7, #36]	; 0x24
 8005ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d1e3      	bne.n	8005e74 <UART_EndRxTransfer+0x3a>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005eb0:	2b01      	cmp	r3, #1
 8005eb2:	d118      	bne.n	8005ee6 <UART_EndRxTransfer+0xac>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	60fb      	str	r3, [r7, #12]
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	e853 3f00 	ldrex	r3, [r3]
 8005ec0:	60bb      	str	r3, [r7, #8]
 8005ec2:	68bb      	ldr	r3, [r7, #8]
 8005ec4:	f023 0310 	bic.w	r3, r3, #16
 8005ec8:	647b      	str	r3, [r7, #68]	; 0x44
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	461a      	mov	r2, r3
 8005ed0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ed2:	61bb      	str	r3, [r7, #24]
 8005ed4:	617a      	str	r2, [r7, #20]
 8005ed6:	6979      	ldr	r1, [r7, #20]
 8005ed8:	69ba      	ldr	r2, [r7, #24]
 8005eda:	e841 2300 	strex	r3, r2, [r1]
 8005ede:	613b      	str	r3, [r7, #16]
 8005ee0:	693b      	ldr	r3, [r7, #16]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d1e6      	bne.n	8005eb4 <UART_EndRxTransfer+0x7a>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2220      	movs	r2, #32
 8005eea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	66da      	str	r2, [r3, #108]	; 0x6c
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	675a      	str	r2, [r3, #116]	; 0x74
 8005efa:	bf00      	nop
 8005efc:	3754      	adds	r7, #84	; 0x54
 8005efe:	46bd      	mov	sp, r7
 8005f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f04:	4770      	bx	lr

08005f06 <HAL_UARTEx_DisableFifoMode>:
 8005f06:	b480      	push	{r7}
 8005f08:	b085      	sub	sp, #20
 8005f0a:	af00      	add	r7, sp, #0
 8005f0c:	6078      	str	r0, [r7, #4]
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005f14:	2b01      	cmp	r3, #1
 8005f16:	d101      	bne.n	8005f1c <HAL_UARTEx_DisableFifoMode+0x16>
 8005f18:	2302      	movs	r3, #2
 8005f1a:	e027      	b.n	8005f6c <HAL_UARTEx_DisableFifoMode+0x66>
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2201      	movs	r2, #1
 8005f20:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2224      	movs	r2, #36	; 0x24
 8005f28:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	60fb      	str	r3, [r7, #12]
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	681a      	ldr	r2, [r3, #0]
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f022 0201 	bic.w	r2, r2, #1
 8005f42:	601a      	str	r2, [r3, #0]
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005f4a:	60fb      	str	r3, [r7, #12]
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2200      	movs	r2, #0
 8005f50:	665a      	str	r2, [r3, #100]	; 0x64
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	68fa      	ldr	r2, [r7, #12]
 8005f58:	601a      	str	r2, [r3, #0]
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2220      	movs	r2, #32
 8005f5e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2200      	movs	r2, #0
 8005f66:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	3714      	adds	r7, #20
 8005f70:	46bd      	mov	sp, r7
 8005f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f76:	4770      	bx	lr

08005f78 <HAL_UARTEx_SetTxFifoThreshold>:
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b084      	sub	sp, #16
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
 8005f80:	6039      	str	r1, [r7, #0]
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005f88:	2b01      	cmp	r3, #1
 8005f8a:	d101      	bne.n	8005f90 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005f8c:	2302      	movs	r3, #2
 8005f8e:	e02d      	b.n	8005fec <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2201      	movs	r2, #1
 8005f94:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2224      	movs	r2, #36	; 0x24
 8005f9c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	60fb      	str	r3, [r7, #12]
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	681a      	ldr	r2, [r3, #0]
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f022 0201 	bic.w	r2, r2, #1
 8005fb6:	601a      	str	r2, [r3, #0]
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	689b      	ldr	r3, [r3, #8]
 8005fbe:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	683a      	ldr	r2, [r7, #0]
 8005fc8:	430a      	orrs	r2, r1
 8005fca:	609a      	str	r2, [r3, #8]
 8005fcc:	6878      	ldr	r0, [r7, #4]
 8005fce:	f000 f84f 	bl	8006070 <UARTEx_SetNbDataToProcess>
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	68fa      	ldr	r2, [r7, #12]
 8005fd8:	601a      	str	r2, [r3, #0]
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2220      	movs	r2, #32
 8005fde:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 8005fea:	2300      	movs	r3, #0
 8005fec:	4618      	mov	r0, r3
 8005fee:	3710      	adds	r7, #16
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	bd80      	pop	{r7, pc}

08005ff4 <HAL_UARTEx_SetRxFifoThreshold>:
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b084      	sub	sp, #16
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
 8005ffc:	6039      	str	r1, [r7, #0]
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006004:	2b01      	cmp	r3, #1
 8006006:	d101      	bne.n	800600c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006008:	2302      	movs	r3, #2
 800600a:	e02d      	b.n	8006068 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2201      	movs	r2, #1
 8006010:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2224      	movs	r2, #36	; 0x24
 8006018:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	60fb      	str	r3, [r7, #12]
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	681a      	ldr	r2, [r3, #0]
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f022 0201 	bic.w	r2, r2, #1
 8006032:	601a      	str	r2, [r3, #0]
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	689b      	ldr	r3, [r3, #8]
 800603a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	683a      	ldr	r2, [r7, #0]
 8006044:	430a      	orrs	r2, r1
 8006046:	609a      	str	r2, [r3, #8]
 8006048:	6878      	ldr	r0, [r7, #4]
 800604a:	f000 f811 	bl	8006070 <UARTEx_SetNbDataToProcess>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	68fa      	ldr	r2, [r7, #12]
 8006054:	601a      	str	r2, [r3, #0]
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2220      	movs	r2, #32
 800605a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2200      	movs	r2, #0
 8006062:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 8006066:	2300      	movs	r3, #0
 8006068:	4618      	mov	r0, r3
 800606a:	3710      	adds	r7, #16
 800606c:	46bd      	mov	sp, r7
 800606e:	bd80      	pop	{r7, pc}

08006070 <UARTEx_SetNbDataToProcess>:
 8006070:	b480      	push	{r7}
 8006072:	b085      	sub	sp, #20
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800607c:	2b00      	cmp	r3, #0
 800607e:	d108      	bne.n	8006092 <UARTEx_SetNbDataToProcess+0x22>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2201      	movs	r2, #1
 8006084:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2201      	movs	r2, #1
 800608c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8006090:	e031      	b.n	80060f6 <UARTEx_SetNbDataToProcess+0x86>
 8006092:	2308      	movs	r3, #8
 8006094:	73fb      	strb	r3, [r7, #15]
 8006096:	2308      	movs	r3, #8
 8006098:	73bb      	strb	r3, [r7, #14]
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	689b      	ldr	r3, [r3, #8]
 80060a0:	0e5b      	lsrs	r3, r3, #25
 80060a2:	b2db      	uxtb	r3, r3
 80060a4:	f003 0307 	and.w	r3, r3, #7
 80060a8:	737b      	strb	r3, [r7, #13]
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	689b      	ldr	r3, [r3, #8]
 80060b0:	0f5b      	lsrs	r3, r3, #29
 80060b2:	b2db      	uxtb	r3, r3
 80060b4:	f003 0307 	and.w	r3, r3, #7
 80060b8:	733b      	strb	r3, [r7, #12]
 80060ba:	7bbb      	ldrb	r3, [r7, #14]
 80060bc:	7b3a      	ldrb	r2, [r7, #12]
 80060be:	4911      	ldr	r1, [pc, #68]	; (8006104 <UARTEx_SetNbDataToProcess+0x94>)
 80060c0:	5c8a      	ldrb	r2, [r1, r2]
 80060c2:	fb02 f303 	mul.w	r3, r2, r3
 80060c6:	7b3a      	ldrb	r2, [r7, #12]
 80060c8:	490f      	ldr	r1, [pc, #60]	; (8006108 <UARTEx_SetNbDataToProcess+0x98>)
 80060ca:	5c8a      	ldrb	r2, [r1, r2]
 80060cc:	fb93 f3f2 	sdiv	r3, r3, r2
 80060d0:	b29a      	uxth	r2, r3
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80060d8:	7bfb      	ldrb	r3, [r7, #15]
 80060da:	7b7a      	ldrb	r2, [r7, #13]
 80060dc:	4909      	ldr	r1, [pc, #36]	; (8006104 <UARTEx_SetNbDataToProcess+0x94>)
 80060de:	5c8a      	ldrb	r2, [r1, r2]
 80060e0:	fb02 f303 	mul.w	r3, r2, r3
 80060e4:	7b7a      	ldrb	r2, [r7, #13]
 80060e6:	4908      	ldr	r1, [pc, #32]	; (8006108 <UARTEx_SetNbDataToProcess+0x98>)
 80060e8:	5c8a      	ldrb	r2, [r1, r2]
 80060ea:	fb93 f3f2 	sdiv	r3, r3, r2
 80060ee:	b29a      	uxth	r2, r3
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 80060f6:	bf00      	nop
 80060f8:	3714      	adds	r7, #20
 80060fa:	46bd      	mov	sp, r7
 80060fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006100:	4770      	bx	lr
 8006102:	bf00      	nop
 8006104:	0800a668 	.word	0x0800a668
 8006108:	0800a670 	.word	0x0800a670

0800610c <aci_gap_set_non_discoverable>:
 800610c:	b580      	push	{r7, lr}
 800610e:	b088      	sub	sp, #32
 8006110:	af00      	add	r7, sp, #0
 8006112:	2300      	movs	r3, #0
 8006114:	71fb      	strb	r3, [r7, #7]
 8006116:	f107 0308 	add.w	r3, r7, #8
 800611a:	2218      	movs	r2, #24
 800611c:	2100      	movs	r1, #0
 800611e:	4618      	mov	r0, r3
 8006120:	f001 f8d8 	bl	80072d4 <Osal_MemSet>
 8006124:	233f      	movs	r3, #63	; 0x3f
 8006126:	813b      	strh	r3, [r7, #8]
 8006128:	2381      	movs	r3, #129	; 0x81
 800612a:	817b      	strh	r3, [r7, #10]
 800612c:	1dfb      	adds	r3, r7, #7
 800612e:	61bb      	str	r3, [r7, #24]
 8006130:	2301      	movs	r3, #1
 8006132:	61fb      	str	r3, [r7, #28]
 8006134:	f107 0308 	add.w	r3, r7, #8
 8006138:	2100      	movs	r1, #0
 800613a:	4618      	mov	r0, r3
 800613c:	f001 fb54 	bl	80077e8 <hci_send_req>
 8006140:	4603      	mov	r3, r0
 8006142:	2b00      	cmp	r3, #0
 8006144:	da01      	bge.n	800614a <aci_gap_set_non_discoverable+0x3e>
 8006146:	23ff      	movs	r3, #255	; 0xff
 8006148:	e000      	b.n	800614c <aci_gap_set_non_discoverable+0x40>
 800614a:	79fb      	ldrb	r3, [r7, #7]
 800614c:	4618      	mov	r0, r3
 800614e:	3720      	adds	r7, #32
 8006150:	46bd      	mov	sp, r7
 8006152:	bd80      	pop	{r7, pc}

08006154 <aci_gap_set_discoverable>:
 8006154:	b5b0      	push	{r4, r5, r7, lr}
 8006156:	b0ce      	sub	sp, #312	; 0x138
 8006158:	af00      	add	r7, sp, #0
 800615a:	4605      	mov	r5, r0
 800615c:	460c      	mov	r4, r1
 800615e:	4610      	mov	r0, r2
 8006160:	4619      	mov	r1, r3
 8006162:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006166:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 800616a:	462a      	mov	r2, r5
 800616c:	701a      	strb	r2, [r3, #0]
 800616e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006172:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8006176:	4622      	mov	r2, r4
 8006178:	801a      	strh	r2, [r3, #0]
 800617a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800617e:	f5a3 739b 	sub.w	r3, r3, #310	; 0x136
 8006182:	4602      	mov	r2, r0
 8006184:	801a      	strh	r2, [r3, #0]
 8006186:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800618a:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 800618e:	460a      	mov	r2, r1
 8006190:	701a      	strb	r2, [r3, #0]
 8006192:	f107 0310 	add.w	r3, r7, #16
 8006196:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 800619a:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 800619e:	3308      	adds	r3, #8
 80061a0:	f107 0210 	add.w	r2, r7, #16
 80061a4:	4413      	add	r3, r2
 80061a6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 80061aa:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 80061ae:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 80061b2:	4413      	add	r3, r2
 80061b4:	3309      	adds	r3, #9
 80061b6:	f107 0210 	add.w	r2, r7, #16
 80061ba:	4413      	add	r3, r2
 80061bc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80061c0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80061c4:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80061c8:	2200      	movs	r2, #0
 80061ca:	701a      	strb	r2, [r3, #0]
 80061cc:	2300      	movs	r3, #0
 80061ce:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80061d2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80061d6:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80061da:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 80061de:	7812      	ldrb	r2, [r2, #0]
 80061e0:	701a      	strb	r2, [r3, #0]
 80061e2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80061e6:	3301      	adds	r3, #1
 80061e8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80061ec:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80061f0:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80061f4:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 80061f8:	8812      	ldrh	r2, [r2, #0]
 80061fa:	f8a3 2001 	strh.w	r2, [r3, #1]
 80061fe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006202:	3302      	adds	r3, #2
 8006204:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006208:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800620c:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8006210:	f5a2 729b 	sub.w	r2, r2, #310	; 0x136
 8006214:	8812      	ldrh	r2, [r2, #0]
 8006216:	f8a3 2003 	strh.w	r2, [r3, #3]
 800621a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800621e:	3302      	adds	r3, #2
 8006220:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006224:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006228:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800622c:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8006230:	7812      	ldrb	r2, [r2, #0]
 8006232:	715a      	strb	r2, [r3, #5]
 8006234:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006238:	3301      	adds	r3, #1
 800623a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800623e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006242:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8006246:	719a      	strb	r2, [r3, #6]
 8006248:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800624c:	3301      	adds	r3, #1
 800624e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006252:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006256:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800625a:	71da      	strb	r2, [r3, #7]
 800625c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006260:	3301      	adds	r3, #1
 8006262:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006266:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800626a:	3308      	adds	r3, #8
 800626c:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8006270:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 8006274:	4618      	mov	r0, r3
 8006276:	f001 f81d 	bl	80072b4 <Osal_MemCpy>
 800627a:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 800627e:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8006282:	4413      	add	r3, r2
 8006284:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006288:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800628c:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8006290:	701a      	strb	r2, [r3, #0]
 8006292:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006296:	3301      	adds	r3, #1
 8006298:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800629c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80062a0:	3301      	adds	r3, #1
 80062a2:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 80062a6:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 80062aa:	4618      	mov	r0, r3
 80062ac:	f001 f802 	bl	80072b4 <Osal_MemCpy>
 80062b0:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 80062b4:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80062b8:	4413      	add	r3, r2
 80062ba:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80062be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062c2:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 80062c6:	801a      	strh	r2, [r3, #0]
 80062c8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80062cc:	3302      	adds	r3, #2
 80062ce:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80062d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062d6:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 80062da:	805a      	strh	r2, [r3, #2]
 80062dc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80062e0:	3302      	adds	r3, #2
 80062e2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80062e6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80062ea:	2218      	movs	r2, #24
 80062ec:	2100      	movs	r1, #0
 80062ee:	4618      	mov	r0, r3
 80062f0:	f000 fff0 	bl	80072d4 <Osal_MemSet>
 80062f4:	233f      	movs	r3, #63	; 0x3f
 80062f6:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
 80062fa:	2383      	movs	r3, #131	; 0x83
 80062fc:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
 8006300:	f107 0310 	add.w	r3, r7, #16
 8006304:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006308:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800630c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006310:	f107 030f 	add.w	r3, r7, #15
 8006314:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006318:	2301      	movs	r3, #1
 800631a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800631e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006322:	2100      	movs	r1, #0
 8006324:	4618      	mov	r0, r3
 8006326:	f001 fa5f 	bl	80077e8 <hci_send_req>
 800632a:	4603      	mov	r3, r0
 800632c:	2b00      	cmp	r3, #0
 800632e:	da01      	bge.n	8006334 <aci_gap_set_discoverable+0x1e0>
 8006330:	23ff      	movs	r3, #255	; 0xff
 8006332:	e004      	b.n	800633e <aci_gap_set_discoverable+0x1ea>
 8006334:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006338:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800633c:	781b      	ldrb	r3, [r3, #0]
 800633e:	4618      	mov	r0, r3
 8006340:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8006344:	46bd      	mov	sp, r7
 8006346:	bdb0      	pop	{r4, r5, r7, pc}

08006348 <aci_gap_set_io_capability>:
 8006348:	b580      	push	{r7, lr}
 800634a:	b0cc      	sub	sp, #304	; 0x130
 800634c:	af00      	add	r7, sp, #0
 800634e:	4602      	mov	r2, r0
 8006350:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006354:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8006358:	701a      	strb	r2, [r3, #0]
 800635a:	f107 0310 	add.w	r3, r7, #16
 800635e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8006362:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006366:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800636a:	2200      	movs	r2, #0
 800636c:	701a      	strb	r2, [r3, #0]
 800636e:	2300      	movs	r3, #0
 8006370:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006374:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006378:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800637c:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8006380:	7812      	ldrb	r2, [r2, #0]
 8006382:	701a      	strb	r2, [r3, #0]
 8006384:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006388:	3301      	adds	r3, #1
 800638a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800638e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006392:	2218      	movs	r2, #24
 8006394:	2100      	movs	r1, #0
 8006396:	4618      	mov	r0, r3
 8006398:	f000 ff9c 	bl	80072d4 <Osal_MemSet>
 800639c:	233f      	movs	r3, #63	; 0x3f
 800639e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
 80063a2:	2385      	movs	r3, #133	; 0x85
 80063a4:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
 80063a8:	f107 0310 	add.w	r3, r7, #16
 80063ac:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80063b0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80063b4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80063b8:	f107 030f 	add.w	r3, r7, #15
 80063bc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80063c0:	2301      	movs	r3, #1
 80063c2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80063c6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80063ca:	2100      	movs	r1, #0
 80063cc:	4618      	mov	r0, r3
 80063ce:	f001 fa0b 	bl	80077e8 <hci_send_req>
 80063d2:	4603      	mov	r3, r0
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	da01      	bge.n	80063dc <aci_gap_set_io_capability+0x94>
 80063d8:	23ff      	movs	r3, #255	; 0xff
 80063da:	e004      	b.n	80063e6 <aci_gap_set_io_capability+0x9e>
 80063dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063e0:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80063e4:	781b      	ldrb	r3, [r3, #0]
 80063e6:	4618      	mov	r0, r3
 80063e8:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80063ec:	46bd      	mov	sp, r7
 80063ee:	bd80      	pop	{r7, pc}

080063f0 <aci_gap_set_authentication_requirement>:
 80063f0:	b5b0      	push	{r4, r5, r7, lr}
 80063f2:	b0cc      	sub	sp, #304	; 0x130
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	4605      	mov	r5, r0
 80063f8:	460c      	mov	r4, r1
 80063fa:	4610      	mov	r0, r2
 80063fc:	4619      	mov	r1, r3
 80063fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006402:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8006406:	462a      	mov	r2, r5
 8006408:	701a      	strb	r2, [r3, #0]
 800640a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800640e:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8006412:	4622      	mov	r2, r4
 8006414:	701a      	strb	r2, [r3, #0]
 8006416:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800641a:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 800641e:	4602      	mov	r2, r0
 8006420:	701a      	strb	r2, [r3, #0]
 8006422:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006426:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800642a:	460a      	mov	r2, r1
 800642c:	701a      	strb	r2, [r3, #0]
 800642e:	f107 0310 	add.w	r3, r7, #16
 8006432:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8006436:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800643a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800643e:	2200      	movs	r2, #0
 8006440:	701a      	strb	r2, [r3, #0]
 8006442:	2300      	movs	r3, #0
 8006444:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006448:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800644c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006450:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8006454:	7812      	ldrb	r2, [r2, #0]
 8006456:	701a      	strb	r2, [r3, #0]
 8006458:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800645c:	3301      	adds	r3, #1
 800645e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006462:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006466:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800646a:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800646e:	7812      	ldrb	r2, [r2, #0]
 8006470:	705a      	strb	r2, [r3, #1]
 8006472:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006476:	3301      	adds	r3, #1
 8006478:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800647c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006480:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006484:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8006488:	7812      	ldrb	r2, [r2, #0]
 800648a:	709a      	strb	r2, [r3, #2]
 800648c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006490:	3301      	adds	r3, #1
 8006492:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006496:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800649a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800649e:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80064a2:	7812      	ldrb	r2, [r2, #0]
 80064a4:	70da      	strb	r2, [r3, #3]
 80064a6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80064aa:	3301      	adds	r3, #1
 80064ac:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80064b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064b4:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 80064b8:	711a      	strb	r2, [r3, #4]
 80064ba:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80064be:	3301      	adds	r3, #1
 80064c0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80064c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064c8:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 80064cc:	715a      	strb	r2, [r3, #5]
 80064ce:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80064d2:	3301      	adds	r3, #1
 80064d4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80064d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064dc:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 80064e0:	719a      	strb	r2, [r3, #6]
 80064e2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80064e6:	3301      	adds	r3, #1
 80064e8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80064ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064f0:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80064f4:	f8c3 2007 	str.w	r2, [r3, #7]
 80064f8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80064fc:	3304      	adds	r3, #4
 80064fe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006502:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006506:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 800650a:	72da      	strb	r2, [r3, #11]
 800650c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006510:	3301      	adds	r3, #1
 8006512:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006516:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800651a:	2218      	movs	r2, #24
 800651c:	2100      	movs	r1, #0
 800651e:	4618      	mov	r0, r3
 8006520:	f000 fed8 	bl	80072d4 <Osal_MemSet>
 8006524:	233f      	movs	r3, #63	; 0x3f
 8006526:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
 800652a:	2386      	movs	r3, #134	; 0x86
 800652c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
 8006530:	f107 0310 	add.w	r3, r7, #16
 8006534:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006538:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800653c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006540:	f107 030f 	add.w	r3, r7, #15
 8006544:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006548:	2301      	movs	r3, #1
 800654a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800654e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006552:	2100      	movs	r1, #0
 8006554:	4618      	mov	r0, r3
 8006556:	f001 f947 	bl	80077e8 <hci_send_req>
 800655a:	4603      	mov	r3, r0
 800655c:	2b00      	cmp	r3, #0
 800655e:	da01      	bge.n	8006564 <aci_gap_set_authentication_requirement+0x174>
 8006560:	23ff      	movs	r3, #255	; 0xff
 8006562:	e004      	b.n	800656e <aci_gap_set_authentication_requirement+0x17e>
 8006564:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006568:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800656c:	781b      	ldrb	r3, [r3, #0]
 800656e:	4618      	mov	r0, r3
 8006570:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006574:	46bd      	mov	sp, r7
 8006576:	bdb0      	pop	{r4, r5, r7, pc}

08006578 <aci_gap_pass_key_resp>:
 8006578:	b580      	push	{r7, lr}
 800657a:	b0cc      	sub	sp, #304	; 0x130
 800657c:	af00      	add	r7, sp, #0
 800657e:	4602      	mov	r2, r0
 8006580:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006584:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006588:	6019      	str	r1, [r3, #0]
 800658a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800658e:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8006592:	801a      	strh	r2, [r3, #0]
 8006594:	f107 0310 	add.w	r3, r7, #16
 8006598:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800659c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065a0:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80065a4:	2200      	movs	r2, #0
 80065a6:	701a      	strb	r2, [r3, #0]
 80065a8:	2300      	movs	r3, #0
 80065aa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80065ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065b2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80065b6:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80065ba:	8812      	ldrh	r2, [r2, #0]
 80065bc:	801a      	strh	r2, [r3, #0]
 80065be:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80065c2:	3302      	adds	r3, #2
 80065c4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80065c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065cc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80065d0:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 80065d4:	6812      	ldr	r2, [r2, #0]
 80065d6:	f8c3 2002 	str.w	r2, [r3, #2]
 80065da:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80065de:	3304      	adds	r3, #4
 80065e0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80065e4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80065e8:	2218      	movs	r2, #24
 80065ea:	2100      	movs	r1, #0
 80065ec:	4618      	mov	r0, r3
 80065ee:	f000 fe71 	bl	80072d4 <Osal_MemSet>
 80065f2:	233f      	movs	r3, #63	; 0x3f
 80065f4:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
 80065f8:	2388      	movs	r3, #136	; 0x88
 80065fa:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
 80065fe:	f107 0310 	add.w	r3, r7, #16
 8006602:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006606:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800660a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800660e:	f107 030f 	add.w	r3, r7, #15
 8006612:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006616:	2301      	movs	r3, #1
 8006618:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800661c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006620:	2100      	movs	r1, #0
 8006622:	4618      	mov	r0, r3
 8006624:	f001 f8e0 	bl	80077e8 <hci_send_req>
 8006628:	4603      	mov	r3, r0
 800662a:	2b00      	cmp	r3, #0
 800662c:	da01      	bge.n	8006632 <aci_gap_pass_key_resp+0xba>
 800662e:	23ff      	movs	r3, #255	; 0xff
 8006630:	e004      	b.n	800663c <aci_gap_pass_key_resp+0xc4>
 8006632:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006636:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800663a:	781b      	ldrb	r3, [r3, #0]
 800663c:	4618      	mov	r0, r3
 800663e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006642:	46bd      	mov	sp, r7
 8006644:	bd80      	pop	{r7, pc}

08006646 <aci_gap_init>:
 8006646:	b590      	push	{r4, r7, lr}
 8006648:	b0cd      	sub	sp, #308	; 0x134
 800664a:	af00      	add	r7, sp, #0
 800664c:	4604      	mov	r4, r0
 800664e:	4608      	mov	r0, r1
 8006650:	4611      	mov	r1, r2
 8006652:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006656:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 800665a:	6013      	str	r3, [r2, #0]
 800665c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006660:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8006664:	4622      	mov	r2, r4
 8006666:	701a      	strb	r2, [r3, #0]
 8006668:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800666c:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8006670:	4602      	mov	r2, r0
 8006672:	701a      	strb	r2, [r3, #0]
 8006674:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006678:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 800667c:	460a      	mov	r2, r1
 800667e:	701a      	strb	r2, [r3, #0]
 8006680:	f107 0310 	add.w	r3, r7, #16
 8006684:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8006688:	f107 0308 	add.w	r3, r7, #8
 800668c:	2207      	movs	r2, #7
 800668e:	2100      	movs	r1, #0
 8006690:	4618      	mov	r0, r3
 8006692:	f000 fe1f 	bl	80072d4 <Osal_MemSet>
 8006696:	2300      	movs	r3, #0
 8006698:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800669c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80066a0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80066a4:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 80066a8:	7812      	ldrb	r2, [r2, #0]
 80066aa:	701a      	strb	r2, [r3, #0]
 80066ac:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80066b0:	3301      	adds	r3, #1
 80066b2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80066b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80066ba:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80066be:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80066c2:	7812      	ldrb	r2, [r2, #0]
 80066c4:	705a      	strb	r2, [r3, #1]
 80066c6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80066ca:	3301      	adds	r3, #1
 80066cc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80066d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80066d4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80066d8:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 80066dc:	7812      	ldrb	r2, [r2, #0]
 80066de:	709a      	strb	r2, [r3, #2]
 80066e0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80066e4:	3301      	adds	r3, #1
 80066e6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80066ea:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80066ee:	2218      	movs	r2, #24
 80066f0:	2100      	movs	r1, #0
 80066f2:	4618      	mov	r0, r3
 80066f4:	f000 fdee 	bl	80072d4 <Osal_MemSet>
 80066f8:	233f      	movs	r3, #63	; 0x3f
 80066fa:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
 80066fe:	238a      	movs	r3, #138	; 0x8a
 8006700:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
 8006704:	f107 0310 	add.w	r3, r7, #16
 8006708:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800670c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006710:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006714:	f107 0308 	add.w	r3, r7, #8
 8006718:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800671c:	2307      	movs	r3, #7
 800671e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006722:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006726:	2100      	movs	r1, #0
 8006728:	4618      	mov	r0, r3
 800672a:	f001 f85d 	bl	80077e8 <hci_send_req>
 800672e:	4603      	mov	r3, r0
 8006730:	2b00      	cmp	r3, #0
 8006732:	da01      	bge.n	8006738 <aci_gap_init+0xf2>
 8006734:	23ff      	movs	r3, #255	; 0xff
 8006736:	e02e      	b.n	8006796 <aci_gap_init+0x150>
 8006738:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800673c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8006740:	781b      	ldrb	r3, [r3, #0]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d005      	beq.n	8006752 <aci_gap_init+0x10c>
 8006746:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800674a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800674e:	781b      	ldrb	r3, [r3, #0]
 8006750:	e021      	b.n	8006796 <aci_gap_init+0x150>
 8006752:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006756:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800675a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800675e:	b29a      	uxth	r2, r3
 8006760:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006764:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	801a      	strh	r2, [r3, #0]
 800676c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006770:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8006774:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8006778:	b29a      	uxth	r2, r3
 800677a:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800677e:	801a      	strh	r2, [r3, #0]
 8006780:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006784:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8006788:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800678c:	b29a      	uxth	r2, r3
 800678e:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8006792:	801a      	strh	r2, [r3, #0]
 8006794:	2300      	movs	r3, #0
 8006796:	4618      	mov	r0, r3
 8006798:	f507 779a 	add.w	r7, r7, #308	; 0x134
 800679c:	46bd      	mov	sp, r7
 800679e:	bd90      	pop	{r4, r7, pc}

080067a0 <aci_gap_update_adv_data>:
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b0cc      	sub	sp, #304	; 0x130
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	4602      	mov	r2, r0
 80067a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067b0:	6019      	str	r1, [r3, #0]
 80067b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067b6:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80067ba:	701a      	strb	r2, [r3, #0]
 80067bc:	f107 0310 	add.w	r3, r7, #16
 80067c0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80067c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067c8:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80067cc:	2200      	movs	r2, #0
 80067ce:	701a      	strb	r2, [r3, #0]
 80067d0:	2300      	movs	r3, #0
 80067d2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80067d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067da:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80067de:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 80067e2:	7812      	ldrb	r2, [r2, #0]
 80067e4:	701a      	strb	r2, [r3, #0]
 80067e6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80067ea:	3301      	adds	r3, #1
 80067ec:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80067f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067f4:	1c58      	adds	r0, r3, #1
 80067f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067fa:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80067fe:	781a      	ldrb	r2, [r3, #0]
 8006800:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006804:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006808:	6819      	ldr	r1, [r3, #0]
 800680a:	f000 fd53 	bl	80072b4 <Osal_MemCpy>
 800680e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006812:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8006816:	781b      	ldrb	r3, [r3, #0]
 8006818:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800681c:	4413      	add	r3, r2
 800681e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006822:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006826:	2218      	movs	r2, #24
 8006828:	2100      	movs	r1, #0
 800682a:	4618      	mov	r0, r3
 800682c:	f000 fd52 	bl	80072d4 <Osal_MemSet>
 8006830:	233f      	movs	r3, #63	; 0x3f
 8006832:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
 8006836:	238e      	movs	r3, #142	; 0x8e
 8006838:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
 800683c:	f107 0310 	add.w	r3, r7, #16
 8006840:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006844:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006848:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800684c:	f107 030f 	add.w	r3, r7, #15
 8006850:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006854:	2301      	movs	r3, #1
 8006856:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800685a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800685e:	2100      	movs	r1, #0
 8006860:	4618      	mov	r0, r3
 8006862:	f000 ffc1 	bl	80077e8 <hci_send_req>
 8006866:	4603      	mov	r3, r0
 8006868:	2b00      	cmp	r3, #0
 800686a:	da01      	bge.n	8006870 <aci_gap_update_adv_data+0xd0>
 800686c:	23ff      	movs	r3, #255	; 0xff
 800686e:	e004      	b.n	800687a <aci_gap_update_adv_data+0xda>
 8006870:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006874:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8006878:	781b      	ldrb	r3, [r3, #0]
 800687a:	4618      	mov	r0, r3
 800687c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006880:	46bd      	mov	sp, r7
 8006882:	bd80      	pop	{r7, pc}

08006884 <aci_gap_configure_whitelist>:
 8006884:	b580      	push	{r7, lr}
 8006886:	b088      	sub	sp, #32
 8006888:	af00      	add	r7, sp, #0
 800688a:	2300      	movs	r3, #0
 800688c:	71fb      	strb	r3, [r7, #7]
 800688e:	f107 0308 	add.w	r3, r7, #8
 8006892:	2218      	movs	r2, #24
 8006894:	2100      	movs	r1, #0
 8006896:	4618      	mov	r0, r3
 8006898:	f000 fd1c 	bl	80072d4 <Osal_MemSet>
 800689c:	233f      	movs	r3, #63	; 0x3f
 800689e:	813b      	strh	r3, [r7, #8]
 80068a0:	2392      	movs	r3, #146	; 0x92
 80068a2:	817b      	strh	r3, [r7, #10]
 80068a4:	1dfb      	adds	r3, r7, #7
 80068a6:	61bb      	str	r3, [r7, #24]
 80068a8:	2301      	movs	r3, #1
 80068aa:	61fb      	str	r3, [r7, #28]
 80068ac:	f107 0308 	add.w	r3, r7, #8
 80068b0:	2100      	movs	r1, #0
 80068b2:	4618      	mov	r0, r3
 80068b4:	f000 ff98 	bl	80077e8 <hci_send_req>
 80068b8:	4603      	mov	r3, r0
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	da01      	bge.n	80068c2 <aci_gap_configure_whitelist+0x3e>
 80068be:	23ff      	movs	r3, #255	; 0xff
 80068c0:	e000      	b.n	80068c4 <aci_gap_configure_whitelist+0x40>
 80068c2:	79fb      	ldrb	r3, [r7, #7]
 80068c4:	4618      	mov	r0, r3
 80068c6:	3720      	adds	r7, #32
 80068c8:	46bd      	mov	sp, r7
 80068ca:	bd80      	pop	{r7, pc}

080068cc <aci_gap_numeric_comparison_value_confirm_yesno>:
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b0cc      	sub	sp, #304	; 0x130
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	4602      	mov	r2, r0
 80068d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068d8:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80068dc:	801a      	strh	r2, [r3, #0]
 80068de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068e2:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 80068e6:	460a      	mov	r2, r1
 80068e8:	701a      	strb	r2, [r3, #0]
 80068ea:	f107 0310 	add.w	r3, r7, #16
 80068ee:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80068f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068f6:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80068fa:	2200      	movs	r2, #0
 80068fc:	701a      	strb	r2, [r3, #0]
 80068fe:	2300      	movs	r3, #0
 8006900:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006904:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006908:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800690c:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8006910:	8812      	ldrh	r2, [r2, #0]
 8006912:	801a      	strh	r2, [r3, #0]
 8006914:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006918:	3302      	adds	r3, #2
 800691a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800691e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006922:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006926:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 800692a:	7812      	ldrb	r2, [r2, #0]
 800692c:	709a      	strb	r2, [r3, #2]
 800692e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006932:	3301      	adds	r3, #1
 8006934:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006938:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800693c:	2218      	movs	r2, #24
 800693e:	2100      	movs	r1, #0
 8006940:	4618      	mov	r0, r3
 8006942:	f000 fcc7 	bl	80072d4 <Osal_MemSet>
 8006946:	233f      	movs	r3, #63	; 0x3f
 8006948:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
 800694c:	23a5      	movs	r3, #165	; 0xa5
 800694e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
 8006952:	f107 0310 	add.w	r3, r7, #16
 8006956:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800695a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800695e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006962:	f107 030f 	add.w	r3, r7, #15
 8006966:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800696a:	2301      	movs	r3, #1
 800696c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006970:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006974:	2100      	movs	r1, #0
 8006976:	4618      	mov	r0, r3
 8006978:	f000 ff36 	bl	80077e8 <hci_send_req>
 800697c:	4603      	mov	r3, r0
 800697e:	2b00      	cmp	r3, #0
 8006980:	da01      	bge.n	8006986 <aci_gap_numeric_comparison_value_confirm_yesno+0xba>
 8006982:	23ff      	movs	r3, #255	; 0xff
 8006984:	e004      	b.n	8006990 <aci_gap_numeric_comparison_value_confirm_yesno+0xc4>
 8006986:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800698a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800698e:	781b      	ldrb	r3, [r3, #0]
 8006990:	4618      	mov	r0, r3
 8006992:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006996:	46bd      	mov	sp, r7
 8006998:	bd80      	pop	{r7, pc}

0800699a <aci_gatt_init>:
 800699a:	b580      	push	{r7, lr}
 800699c:	b088      	sub	sp, #32
 800699e:	af00      	add	r7, sp, #0
 80069a0:	2300      	movs	r3, #0
 80069a2:	71fb      	strb	r3, [r7, #7]
 80069a4:	f107 0308 	add.w	r3, r7, #8
 80069a8:	2218      	movs	r2, #24
 80069aa:	2100      	movs	r1, #0
 80069ac:	4618      	mov	r0, r3
 80069ae:	f000 fc91 	bl	80072d4 <Osal_MemSet>
 80069b2:	233f      	movs	r3, #63	; 0x3f
 80069b4:	813b      	strh	r3, [r7, #8]
 80069b6:	f240 1301 	movw	r3, #257	; 0x101
 80069ba:	817b      	strh	r3, [r7, #10]
 80069bc:	1dfb      	adds	r3, r7, #7
 80069be:	61bb      	str	r3, [r7, #24]
 80069c0:	2301      	movs	r3, #1
 80069c2:	61fb      	str	r3, [r7, #28]
 80069c4:	f107 0308 	add.w	r3, r7, #8
 80069c8:	2100      	movs	r1, #0
 80069ca:	4618      	mov	r0, r3
 80069cc:	f000 ff0c 	bl	80077e8 <hci_send_req>
 80069d0:	4603      	mov	r3, r0
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	da01      	bge.n	80069da <aci_gatt_init+0x40>
 80069d6:	23ff      	movs	r3, #255	; 0xff
 80069d8:	e000      	b.n	80069dc <aci_gatt_init+0x42>
 80069da:	79fb      	ldrb	r3, [r7, #7]
 80069dc:	4618      	mov	r0, r3
 80069de:	3720      	adds	r7, #32
 80069e0:	46bd      	mov	sp, r7
 80069e2:	bd80      	pop	{r7, pc}

080069e4 <aci_gatt_add_service>:
 80069e4:	b590      	push	{r4, r7, lr}
 80069e6:	b0cf      	sub	sp, #316	; 0x13c
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	4604      	mov	r4, r0
 80069ec:	f507 709c 	add.w	r0, r7, #312	; 0x138
 80069f0:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
 80069f4:	6001      	str	r1, [r0, #0]
 80069f6:	4610      	mov	r0, r2
 80069f8:	4619      	mov	r1, r3
 80069fa:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80069fe:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8006a02:	4622      	mov	r2, r4
 8006a04:	701a      	strb	r2, [r3, #0]
 8006a06:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006a0a:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8006a0e:	4602      	mov	r2, r0
 8006a10:	701a      	strb	r2, [r3, #0]
 8006a12:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006a16:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8006a1a:	460a      	mov	r2, r1
 8006a1c:	701a      	strb	r2, [r3, #0]
 8006a1e:	f107 0310 	add.w	r3, r7, #16
 8006a22:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8006a26:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006a2a:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8006a2e:	781b      	ldrb	r3, [r3, #0]
 8006a30:	2b01      	cmp	r3, #1
 8006a32:	d00a      	beq.n	8006a4a <aci_gatt_add_service+0x66>
 8006a34:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006a38:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8006a3c:	781b      	ldrb	r3, [r3, #0]
 8006a3e:	2b02      	cmp	r3, #2
 8006a40:	d101      	bne.n	8006a46 <aci_gatt_add_service+0x62>
 8006a42:	2311      	movs	r3, #17
 8006a44:	e002      	b.n	8006a4c <aci_gatt_add_service+0x68>
 8006a46:	2301      	movs	r3, #1
 8006a48:	e000      	b.n	8006a4c <aci_gatt_add_service+0x68>
 8006a4a:	2303      	movs	r3, #3
 8006a4c:	f107 0210 	add.w	r2, r7, #16
 8006a50:	4413      	add	r3, r2
 8006a52:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8006a56:	f107 030c 	add.w	r3, r7, #12
 8006a5a:	2203      	movs	r2, #3
 8006a5c:	2100      	movs	r1, #0
 8006a5e:	4618      	mov	r0, r3
 8006a60:	f000 fc38 	bl	80072d4 <Osal_MemSet>
 8006a64:	2300      	movs	r3, #0
 8006a66:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006a6a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006a6e:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8006a72:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 8006a76:	7812      	ldrb	r2, [r2, #0]
 8006a78:	701a      	strb	r2, [r3, #0]
 8006a7a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006a7e:	3301      	adds	r3, #1
 8006a80:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006a84:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006a88:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8006a8c:	781b      	ldrb	r3, [r3, #0]
 8006a8e:	2b01      	cmp	r3, #1
 8006a90:	d002      	beq.n	8006a98 <aci_gatt_add_service+0xb4>
 8006a92:	2b02      	cmp	r3, #2
 8006a94:	d004      	beq.n	8006aa0 <aci_gatt_add_service+0xbc>
 8006a96:	e007      	b.n	8006aa8 <aci_gatt_add_service+0xc4>
 8006a98:	2302      	movs	r3, #2
 8006a9a:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8006a9e:	e005      	b.n	8006aac <aci_gatt_add_service+0xc8>
 8006aa0:	2310      	movs	r3, #16
 8006aa2:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8006aa6:	e001      	b.n	8006aac <aci_gatt_add_service+0xc8>
 8006aa8:	2397      	movs	r3, #151	; 0x97
 8006aaa:	e06c      	b.n	8006b86 <aci_gatt_add_service+0x1a2>
 8006aac:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006ab0:	1c58      	adds	r0, r3, #1
 8006ab2:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 8006ab6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006aba:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8006abe:	6819      	ldr	r1, [r3, #0]
 8006ac0:	f000 fbf8 	bl	80072b4 <Osal_MemCpy>
 8006ac4:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8006ac8:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8006acc:	4413      	add	r3, r2
 8006ace:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006ad2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ad6:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8006ada:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8006ade:	7812      	ldrb	r2, [r2, #0]
 8006ae0:	701a      	strb	r2, [r3, #0]
 8006ae2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006ae6:	3301      	adds	r3, #1
 8006ae8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006aec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006af0:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8006af4:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 8006af8:	7812      	ldrb	r2, [r2, #0]
 8006afa:	705a      	strb	r2, [r3, #1]
 8006afc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006b00:	3301      	adds	r3, #1
 8006b02:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006b06:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006b0a:	2218      	movs	r2, #24
 8006b0c:	2100      	movs	r1, #0
 8006b0e:	4618      	mov	r0, r3
 8006b10:	f000 fbe0 	bl	80072d4 <Osal_MemSet>
 8006b14:	233f      	movs	r3, #63	; 0x3f
 8006b16:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
 8006b1a:	f44f 7381 	mov.w	r3, #258	; 0x102
 8006b1e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
 8006b22:	f107 0310 	add.w	r3, r7, #16
 8006b26:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006b2a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006b2e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006b32:	f107 030c 	add.w	r3, r7, #12
 8006b36:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006b3a:	2303      	movs	r3, #3
 8006b3c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006b40:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006b44:	2100      	movs	r1, #0
 8006b46:	4618      	mov	r0, r3
 8006b48:	f000 fe4e 	bl	80077e8 <hci_send_req>
 8006b4c:	4603      	mov	r3, r0
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	da01      	bge.n	8006b56 <aci_gatt_add_service+0x172>
 8006b52:	23ff      	movs	r3, #255	; 0xff
 8006b54:	e017      	b.n	8006b86 <aci_gatt_add_service+0x1a2>
 8006b56:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006b5a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006b5e:	781b      	ldrb	r3, [r3, #0]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d005      	beq.n	8006b70 <aci_gatt_add_service+0x18c>
 8006b64:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006b68:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006b6c:	781b      	ldrb	r3, [r3, #0]
 8006b6e:	e00a      	b.n	8006b86 <aci_gatt_add_service+0x1a2>
 8006b70:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006b74:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006b78:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8006b7c:	b29a      	uxth	r2, r3
 8006b7e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8006b82:	801a      	strh	r2, [r3, #0]
 8006b84:	2300      	movs	r3, #0
 8006b86:	4618      	mov	r0, r3
 8006b88:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	bd90      	pop	{r4, r7, pc}

08006b90 <aci_gatt_add_char>:
 8006b90:	b590      	push	{r4, r7, lr}
 8006b92:	b0d1      	sub	sp, #324	; 0x144
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	4604      	mov	r4, r0
 8006b98:	4608      	mov	r0, r1
 8006b9a:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 8006b9e:	f5a1 719c 	sub.w	r1, r1, #312	; 0x138
 8006ba2:	600a      	str	r2, [r1, #0]
 8006ba4:	4619      	mov	r1, r3
 8006ba6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8006baa:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8006bae:	4622      	mov	r2, r4
 8006bb0:	801a      	strh	r2, [r3, #0]
 8006bb2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8006bb6:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8006bba:	4602      	mov	r2, r0
 8006bbc:	701a      	strb	r2, [r3, #0]
 8006bbe:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8006bc2:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 8006bc6:	460a      	mov	r2, r1
 8006bc8:	801a      	strh	r2, [r3, #0]
 8006bca:	f107 0318 	add.w	r3, r7, #24
 8006bce:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8006bd2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8006bd6:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8006bda:	781b      	ldrb	r3, [r3, #0]
 8006bdc:	2b01      	cmp	r3, #1
 8006bde:	d00a      	beq.n	8006bf6 <aci_gatt_add_char+0x66>
 8006be0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8006be4:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8006be8:	781b      	ldrb	r3, [r3, #0]
 8006bea:	2b02      	cmp	r3, #2
 8006bec:	d101      	bne.n	8006bf2 <aci_gatt_add_char+0x62>
 8006bee:	2313      	movs	r3, #19
 8006bf0:	e002      	b.n	8006bf8 <aci_gatt_add_char+0x68>
 8006bf2:	2303      	movs	r3, #3
 8006bf4:	e000      	b.n	8006bf8 <aci_gatt_add_char+0x68>
 8006bf6:	2305      	movs	r3, #5
 8006bf8:	f107 0218 	add.w	r2, r7, #24
 8006bfc:	4413      	add	r3, r2
 8006bfe:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8006c02:	f107 0314 	add.w	r3, r7, #20
 8006c06:	2203      	movs	r2, #3
 8006c08:	2100      	movs	r1, #0
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	f000 fb62 	bl	80072d4 <Osal_MemSet>
 8006c10:	2300      	movs	r3, #0
 8006c12:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8006c16:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8006c1a:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8006c1e:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8006c22:	8812      	ldrh	r2, [r2, #0]
 8006c24:	801a      	strh	r2, [r3, #0]
 8006c26:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006c2a:	3302      	adds	r3, #2
 8006c2c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8006c30:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8006c34:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8006c38:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 8006c3c:	7812      	ldrb	r2, [r2, #0]
 8006c3e:	709a      	strb	r2, [r3, #2]
 8006c40:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006c44:	3301      	adds	r3, #1
 8006c46:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8006c4a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8006c4e:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8006c52:	781b      	ldrb	r3, [r3, #0]
 8006c54:	2b01      	cmp	r3, #1
 8006c56:	d002      	beq.n	8006c5e <aci_gatt_add_char+0xce>
 8006c58:	2b02      	cmp	r3, #2
 8006c5a:	d004      	beq.n	8006c66 <aci_gatt_add_char+0xd6>
 8006c5c:	e007      	b.n	8006c6e <aci_gatt_add_char+0xde>
 8006c5e:	2302      	movs	r3, #2
 8006c60:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 8006c64:	e005      	b.n	8006c72 <aci_gatt_add_char+0xe2>
 8006c66:	2310      	movs	r3, #16
 8006c68:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 8006c6c:	e001      	b.n	8006c72 <aci_gatt_add_char+0xe2>
 8006c6e:	2397      	movs	r3, #151	; 0x97
 8006c70:	e091      	b.n	8006d96 <aci_gatt_add_char+0x206>
 8006c72:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8006c76:	1cd8      	adds	r0, r3, #3
 8006c78:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 8006c7c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8006c80:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8006c84:	6819      	ldr	r1, [r3, #0]
 8006c86:	f000 fb15 	bl	80072b4 <Osal_MemCpy>
 8006c8a:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8006c8e:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8006c92:	4413      	add	r3, r2
 8006c94:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8006c98:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006c9c:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8006ca0:	f5a2 729d 	sub.w	r2, r2, #314	; 0x13a
 8006ca4:	8812      	ldrh	r2, [r2, #0]
 8006ca6:	801a      	strh	r2, [r3, #0]
 8006ca8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006cac:	3302      	adds	r3, #2
 8006cae:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8006cb2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006cb6:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8006cba:	709a      	strb	r2, [r3, #2]
 8006cbc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006cc0:	3301      	adds	r3, #1
 8006cc2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8006cc6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006cca:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8006cce:	70da      	strb	r2, [r3, #3]
 8006cd0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006cd4:	3301      	adds	r3, #1
 8006cd6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8006cda:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006cde:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 8006ce2:	711a      	strb	r2, [r3, #4]
 8006ce4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006ce8:	3301      	adds	r3, #1
 8006cea:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8006cee:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006cf2:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 8006cf6:	715a      	strb	r2, [r3, #5]
 8006cf8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006cfc:	3301      	adds	r3, #1
 8006cfe:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8006d02:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006d06:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 8006d0a:	719a      	strb	r2, [r3, #6]
 8006d0c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006d10:	3301      	adds	r3, #1
 8006d12:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8006d16:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006d1a:	2218      	movs	r2, #24
 8006d1c:	2100      	movs	r1, #0
 8006d1e:	4618      	mov	r0, r3
 8006d20:	f000 fad8 	bl	80072d4 <Osal_MemSet>
 8006d24:	233f      	movs	r3, #63	; 0x3f
 8006d26:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
 8006d2a:	f44f 7382 	mov.w	r3, #260	; 0x104
 8006d2e:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
 8006d32:	f107 0318 	add.w	r3, r7, #24
 8006d36:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006d3a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006d3e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006d42:	f107 0314 	add.w	r3, r7, #20
 8006d46:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006d4a:	2303      	movs	r3, #3
 8006d4c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8006d50:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006d54:	2100      	movs	r1, #0
 8006d56:	4618      	mov	r0, r3
 8006d58:	f000 fd46 	bl	80077e8 <hci_send_req>
 8006d5c:	4603      	mov	r3, r0
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	da01      	bge.n	8006d66 <aci_gatt_add_char+0x1d6>
 8006d62:	23ff      	movs	r3, #255	; 0xff
 8006d64:	e017      	b.n	8006d96 <aci_gatt_add_char+0x206>
 8006d66:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8006d6a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006d6e:	781b      	ldrb	r3, [r3, #0]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d005      	beq.n	8006d80 <aci_gatt_add_char+0x1f0>
 8006d74:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8006d78:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006d7c:	781b      	ldrb	r3, [r3, #0]
 8006d7e:	e00a      	b.n	8006d96 <aci_gatt_add_char+0x206>
 8006d80:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8006d84:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006d88:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8006d8c:	b29a      	uxth	r2, r3
 8006d8e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8006d92:	801a      	strh	r2, [r3, #0]
 8006d94:	2300      	movs	r3, #0
 8006d96:	4618      	mov	r0, r3
 8006d98:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	bd90      	pop	{r4, r7, pc}

08006da0 <aci_gatt_update_char_value>:
 8006da0:	b5b0      	push	{r4, r5, r7, lr}
 8006da2:	b0cc      	sub	sp, #304	; 0x130
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	4605      	mov	r5, r0
 8006da8:	460c      	mov	r4, r1
 8006daa:	4610      	mov	r0, r2
 8006dac:	4619      	mov	r1, r3
 8006dae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006db2:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8006db6:	462a      	mov	r2, r5
 8006db8:	801a      	strh	r2, [r3, #0]
 8006dba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006dbe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006dc2:	4622      	mov	r2, r4
 8006dc4:	801a      	strh	r2, [r3, #0]
 8006dc6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006dca:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8006dce:	4602      	mov	r2, r0
 8006dd0:	701a      	strb	r2, [r3, #0]
 8006dd2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006dd6:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8006dda:	460a      	mov	r2, r1
 8006ddc:	701a      	strb	r2, [r3, #0]
 8006dde:	f107 0310 	add.w	r3, r7, #16
 8006de2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8006de6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006dea:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8006dee:	2200      	movs	r2, #0
 8006df0:	701a      	strb	r2, [r3, #0]
 8006df2:	2300      	movs	r3, #0
 8006df4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006df8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006dfc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006e00:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8006e04:	8812      	ldrh	r2, [r2, #0]
 8006e06:	801a      	strh	r2, [r3, #0]
 8006e08:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006e0c:	3302      	adds	r3, #2
 8006e0e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006e12:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e16:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006e1a:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8006e1e:	8812      	ldrh	r2, [r2, #0]
 8006e20:	805a      	strh	r2, [r3, #2]
 8006e22:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006e26:	3302      	adds	r3, #2
 8006e28:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006e2c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e30:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006e34:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 8006e38:	7812      	ldrb	r2, [r2, #0]
 8006e3a:	711a      	strb	r2, [r3, #4]
 8006e3c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006e40:	3301      	adds	r3, #1
 8006e42:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006e46:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e4a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006e4e:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 8006e52:	7812      	ldrb	r2, [r2, #0]
 8006e54:	715a      	strb	r2, [r3, #5]
 8006e56:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006e5a:	3301      	adds	r3, #1
 8006e5c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006e60:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e64:	1d98      	adds	r0, r3, #6
 8006e66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e6a:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8006e6e:	781b      	ldrb	r3, [r3, #0]
 8006e70:	461a      	mov	r2, r3
 8006e72:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8006e76:	f000 fa1d 	bl	80072b4 <Osal_MemCpy>
 8006e7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e7e:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8006e82:	781b      	ldrb	r3, [r3, #0]
 8006e84:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8006e88:	4413      	add	r3, r2
 8006e8a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006e8e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006e92:	2218      	movs	r2, #24
 8006e94:	2100      	movs	r1, #0
 8006e96:	4618      	mov	r0, r3
 8006e98:	f000 fa1c 	bl	80072d4 <Osal_MemSet>
 8006e9c:	233f      	movs	r3, #63	; 0x3f
 8006e9e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
 8006ea2:	f44f 7383 	mov.w	r3, #262	; 0x106
 8006ea6:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
 8006eaa:	f107 0310 	add.w	r3, r7, #16
 8006eae:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006eb2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006eb6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006eba:	f107 030f 	add.w	r3, r7, #15
 8006ebe:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006ec2:	2301      	movs	r3, #1
 8006ec4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006ec8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006ecc:	2100      	movs	r1, #0
 8006ece:	4618      	mov	r0, r3
 8006ed0:	f000 fc8a 	bl	80077e8 <hci_send_req>
 8006ed4:	4603      	mov	r3, r0
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	da01      	bge.n	8006ede <aci_gatt_update_char_value+0x13e>
 8006eda:	23ff      	movs	r3, #255	; 0xff
 8006edc:	e004      	b.n	8006ee8 <aci_gatt_update_char_value+0x148>
 8006ede:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ee2:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8006ee6:	781b      	ldrb	r3, [r3, #0]
 8006ee8:	4618      	mov	r0, r3
 8006eea:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	bdb0      	pop	{r4, r5, r7, pc}

08006ef2 <aci_hal_write_config_data>:
 8006ef2:	b580      	push	{r7, lr}
 8006ef4:	b0cc      	sub	sp, #304	; 0x130
 8006ef6:	af00      	add	r7, sp, #0
 8006ef8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006efc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f00:	601a      	str	r2, [r3, #0]
 8006f02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f06:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8006f0a:	4602      	mov	r2, r0
 8006f0c:	701a      	strb	r2, [r3, #0]
 8006f0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f12:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8006f16:	460a      	mov	r2, r1
 8006f18:	701a      	strb	r2, [r3, #0]
 8006f1a:	f107 0310 	add.w	r3, r7, #16
 8006f1e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8006f22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f26:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	701a      	strb	r2, [r3, #0]
 8006f2e:	2300      	movs	r3, #0
 8006f30:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006f34:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f38:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006f3c:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8006f40:	7812      	ldrb	r2, [r2, #0]
 8006f42:	701a      	strb	r2, [r3, #0]
 8006f44:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006f48:	3301      	adds	r3, #1
 8006f4a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006f4e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f52:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006f56:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8006f5a:	7812      	ldrb	r2, [r2, #0]
 8006f5c:	705a      	strb	r2, [r3, #1]
 8006f5e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006f62:	3301      	adds	r3, #1
 8006f64:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006f68:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f6c:	1c98      	adds	r0, r3, #2
 8006f6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f72:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8006f76:	781a      	ldrb	r2, [r3, #0]
 8006f78:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f7c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f80:	6819      	ldr	r1, [r3, #0]
 8006f82:	f000 f997 	bl	80072b4 <Osal_MemCpy>
 8006f86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f8a:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8006f8e:	781b      	ldrb	r3, [r3, #0]
 8006f90:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8006f94:	4413      	add	r3, r2
 8006f96:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006f9a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006f9e:	2218      	movs	r2, #24
 8006fa0:	2100      	movs	r1, #0
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	f000 f996 	bl	80072d4 <Osal_MemSet>
 8006fa8:	233f      	movs	r3, #63	; 0x3f
 8006faa:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
 8006fae:	230c      	movs	r3, #12
 8006fb0:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
 8006fb4:	f107 0310 	add.w	r3, r7, #16
 8006fb8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006fbc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006fc0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006fc4:	f107 030f 	add.w	r3, r7, #15
 8006fc8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006fcc:	2301      	movs	r3, #1
 8006fce:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006fd2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006fd6:	2100      	movs	r1, #0
 8006fd8:	4618      	mov	r0, r3
 8006fda:	f000 fc05 	bl	80077e8 <hci_send_req>
 8006fde:	4603      	mov	r3, r0
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	da01      	bge.n	8006fe8 <aci_hal_write_config_data+0xf6>
 8006fe4:	23ff      	movs	r3, #255	; 0xff
 8006fe6:	e004      	b.n	8006ff2 <aci_hal_write_config_data+0x100>
 8006fe8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fec:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8006ff0:	781b      	ldrb	r3, [r3, #0]
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	bd80      	pop	{r7, pc}

08006ffc <aci_hal_set_tx_power_level>:
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b0cc      	sub	sp, #304	; 0x130
 8007000:	af00      	add	r7, sp, #0
 8007002:	4602      	mov	r2, r0
 8007004:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007008:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800700c:	701a      	strb	r2, [r3, #0]
 800700e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007012:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8007016:	460a      	mov	r2, r1
 8007018:	701a      	strb	r2, [r3, #0]
 800701a:	f107 0310 	add.w	r3, r7, #16
 800701e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8007022:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007026:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800702a:	2200      	movs	r2, #0
 800702c:	701a      	strb	r2, [r3, #0]
 800702e:	2300      	movs	r3, #0
 8007030:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8007034:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007038:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800703c:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8007040:	7812      	ldrb	r2, [r2, #0]
 8007042:	701a      	strb	r2, [r3, #0]
 8007044:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007048:	3301      	adds	r3, #1
 800704a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800704e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007052:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007056:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800705a:	7812      	ldrb	r2, [r2, #0]
 800705c:	705a      	strb	r2, [r3, #1]
 800705e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007062:	3301      	adds	r3, #1
 8007064:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8007068:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800706c:	2218      	movs	r2, #24
 800706e:	2100      	movs	r1, #0
 8007070:	4618      	mov	r0, r3
 8007072:	f000 f92f 	bl	80072d4 <Osal_MemSet>
 8007076:	233f      	movs	r3, #63	; 0x3f
 8007078:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
 800707c:	230f      	movs	r3, #15
 800707e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
 8007082:	f107 0310 	add.w	r3, r7, #16
 8007086:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800708a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800708e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8007092:	f107 030f 	add.w	r3, r7, #15
 8007096:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800709a:	2301      	movs	r3, #1
 800709c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80070a0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80070a4:	2100      	movs	r1, #0
 80070a6:	4618      	mov	r0, r3
 80070a8:	f000 fb9e 	bl	80077e8 <hci_send_req>
 80070ac:	4603      	mov	r3, r0
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	da01      	bge.n	80070b6 <aci_hal_set_tx_power_level+0xba>
 80070b2:	23ff      	movs	r3, #255	; 0xff
 80070b4:	e004      	b.n	80070c0 <aci_hal_set_tx_power_level+0xc4>
 80070b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070ba:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80070be:	781b      	ldrb	r3, [r3, #0]
 80070c0:	4618      	mov	r0, r3
 80070c2:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80070c6:	46bd      	mov	sp, r7
 80070c8:	bd80      	pop	{r7, pc}

080070ca <aci_hal_set_radio_activity_mask>:
 80070ca:	b580      	push	{r7, lr}
 80070cc:	b0cc      	sub	sp, #304	; 0x130
 80070ce:	af00      	add	r7, sp, #0
 80070d0:	4602      	mov	r2, r0
 80070d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070d6:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80070da:	801a      	strh	r2, [r3, #0]
 80070dc:	f107 0310 	add.w	r3, r7, #16
 80070e0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80070e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070e8:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80070ec:	2200      	movs	r2, #0
 80070ee:	701a      	strb	r2, [r3, #0]
 80070f0:	2300      	movs	r3, #0
 80070f2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80070f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070fa:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80070fe:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8007102:	8812      	ldrh	r2, [r2, #0]
 8007104:	801a      	strh	r2, [r3, #0]
 8007106:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800710a:	3302      	adds	r3, #2
 800710c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8007110:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007114:	2218      	movs	r2, #24
 8007116:	2100      	movs	r1, #0
 8007118:	4618      	mov	r0, r3
 800711a:	f000 f8db 	bl	80072d4 <Osal_MemSet>
 800711e:	233f      	movs	r3, #63	; 0x3f
 8007120:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
 8007124:	2318      	movs	r3, #24
 8007126:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
 800712a:	f107 0310 	add.w	r3, r7, #16
 800712e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007132:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007136:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800713a:	f107 030f 	add.w	r3, r7, #15
 800713e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8007142:	2301      	movs	r3, #1
 8007144:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8007148:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800714c:	2100      	movs	r1, #0
 800714e:	4618      	mov	r0, r3
 8007150:	f000 fb4a 	bl	80077e8 <hci_send_req>
 8007154:	4603      	mov	r3, r0
 8007156:	2b00      	cmp	r3, #0
 8007158:	da01      	bge.n	800715e <aci_hal_set_radio_activity_mask+0x94>
 800715a:	23ff      	movs	r3, #255	; 0xff
 800715c:	e004      	b.n	8007168 <aci_hal_set_radio_activity_mask+0x9e>
 800715e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007162:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007166:	781b      	ldrb	r3, [r3, #0]
 8007168:	4618      	mov	r0, r3
 800716a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800716e:	46bd      	mov	sp, r7
 8007170:	bd80      	pop	{r7, pc}

08007172 <hci_reset>:
 8007172:	b580      	push	{r7, lr}
 8007174:	b088      	sub	sp, #32
 8007176:	af00      	add	r7, sp, #0
 8007178:	2300      	movs	r3, #0
 800717a:	71fb      	strb	r3, [r7, #7]
 800717c:	f107 0308 	add.w	r3, r7, #8
 8007180:	2218      	movs	r2, #24
 8007182:	2100      	movs	r1, #0
 8007184:	4618      	mov	r0, r3
 8007186:	f000 f8a5 	bl	80072d4 <Osal_MemSet>
 800718a:	2303      	movs	r3, #3
 800718c:	813b      	strh	r3, [r7, #8]
 800718e:	2303      	movs	r3, #3
 8007190:	817b      	strh	r3, [r7, #10]
 8007192:	1dfb      	adds	r3, r7, #7
 8007194:	61bb      	str	r3, [r7, #24]
 8007196:	2301      	movs	r3, #1
 8007198:	61fb      	str	r3, [r7, #28]
 800719a:	f107 0308 	add.w	r3, r7, #8
 800719e:	2100      	movs	r1, #0
 80071a0:	4618      	mov	r0, r3
 80071a2:	f000 fb21 	bl	80077e8 <hci_send_req>
 80071a6:	4603      	mov	r3, r0
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	da01      	bge.n	80071b0 <hci_reset+0x3e>
 80071ac:	23ff      	movs	r3, #255	; 0xff
 80071ae:	e000      	b.n	80071b2 <hci_reset+0x40>
 80071b0:	79fb      	ldrb	r3, [r7, #7]
 80071b2:	4618      	mov	r0, r3
 80071b4:	3720      	adds	r7, #32
 80071b6:	46bd      	mov	sp, r7
 80071b8:	bd80      	pop	{r7, pc}

080071ba <hci_le_set_default_phy>:
 80071ba:	b590      	push	{r4, r7, lr}
 80071bc:	b0cd      	sub	sp, #308	; 0x134
 80071be:	af00      	add	r7, sp, #0
 80071c0:	4604      	mov	r4, r0
 80071c2:	4608      	mov	r0, r1
 80071c4:	4611      	mov	r1, r2
 80071c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071ca:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80071ce:	4622      	mov	r2, r4
 80071d0:	701a      	strb	r2, [r3, #0]
 80071d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071d6:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80071da:	4602      	mov	r2, r0
 80071dc:	701a      	strb	r2, [r3, #0]
 80071de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071e2:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 80071e6:	460a      	mov	r2, r1
 80071e8:	701a      	strb	r2, [r3, #0]
 80071ea:	f107 0310 	add.w	r3, r7, #16
 80071ee:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80071f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071f6:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80071fa:	2200      	movs	r2, #0
 80071fc:	701a      	strb	r2, [r3, #0]
 80071fe:	2300      	movs	r3, #0
 8007200:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8007204:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007208:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800720c:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8007210:	7812      	ldrb	r2, [r2, #0]
 8007212:	701a      	strb	r2, [r3, #0]
 8007214:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007218:	3301      	adds	r3, #1
 800721a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800721e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007222:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007226:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800722a:	7812      	ldrb	r2, [r2, #0]
 800722c:	705a      	strb	r2, [r3, #1]
 800722e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007232:	3301      	adds	r3, #1
 8007234:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8007238:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800723c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007240:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8007244:	7812      	ldrb	r2, [r2, #0]
 8007246:	709a      	strb	r2, [r3, #2]
 8007248:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800724c:	3301      	adds	r3, #1
 800724e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8007252:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007256:	2218      	movs	r2, #24
 8007258:	2100      	movs	r1, #0
 800725a:	4618      	mov	r0, r3
 800725c:	f000 f83a 	bl	80072d4 <Osal_MemSet>
 8007260:	2308      	movs	r3, #8
 8007262:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
 8007266:	2331      	movs	r3, #49	; 0x31
 8007268:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
 800726c:	f107 0310 	add.w	r3, r7, #16
 8007270:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007274:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007278:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800727c:	f107 030f 	add.w	r3, r7, #15
 8007280:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8007284:	2301      	movs	r3, #1
 8007286:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800728a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800728e:	2100      	movs	r1, #0
 8007290:	4618      	mov	r0, r3
 8007292:	f000 faa9 	bl	80077e8 <hci_send_req>
 8007296:	4603      	mov	r3, r0
 8007298:	2b00      	cmp	r3, #0
 800729a:	da01      	bge.n	80072a0 <hci_le_set_default_phy+0xe6>
 800729c:	23ff      	movs	r3, #255	; 0xff
 800729e:	e004      	b.n	80072aa <hci_le_set_default_phy+0xf0>
 80072a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072a4:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80072a8:	781b      	ldrb	r3, [r3, #0]
 80072aa:	4618      	mov	r0, r3
 80072ac:	f507 779a 	add.w	r7, r7, #308	; 0x134
 80072b0:	46bd      	mov	sp, r7
 80072b2:	bd90      	pop	{r4, r7, pc}

080072b4 <Osal_MemCpy>:
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b084      	sub	sp, #16
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	60f8      	str	r0, [r7, #12]
 80072bc:	60b9      	str	r1, [r7, #8]
 80072be:	607a      	str	r2, [r7, #4]
 80072c0:	687a      	ldr	r2, [r7, #4]
 80072c2:	68b9      	ldr	r1, [r7, #8]
 80072c4:	68f8      	ldr	r0, [r7, #12]
 80072c6:	f002 f8db 	bl	8009480 <memcpy>
 80072ca:	4603      	mov	r3, r0
 80072cc:	4618      	mov	r0, r3
 80072ce:	3710      	adds	r7, #16
 80072d0:	46bd      	mov	sp, r7
 80072d2:	bd80      	pop	{r7, pc}

080072d4 <Osal_MemSet>:
 80072d4:	b580      	push	{r7, lr}
 80072d6:	b084      	sub	sp, #16
 80072d8:	af00      	add	r7, sp, #0
 80072da:	60f8      	str	r0, [r7, #12]
 80072dc:	60b9      	str	r1, [r7, #8]
 80072de:	607a      	str	r2, [r7, #4]
 80072e0:	687a      	ldr	r2, [r7, #4]
 80072e2:	68b9      	ldr	r1, [r7, #8]
 80072e4:	68f8      	ldr	r0, [r7, #12]
 80072e6:	f002 f8d9 	bl	800949c <memset>
 80072ea:	4603      	mov	r3, r0
 80072ec:	4618      	mov	r0, r3
 80072ee:	3710      	adds	r7, #16
 80072f0:	46bd      	mov	sp, r7
 80072f2:	bd80      	pop	{r7, pc}

080072f4 <BAS_Init>:
 80072f4:	b480      	push	{r7}
 80072f6:	af00      	add	r7, sp, #0
 80072f8:	bf00      	nop
 80072fa:	46bd      	mov	sp, r7
 80072fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007300:	4770      	bx	lr

08007302 <BLS_Init>:
 8007302:	b480      	push	{r7}
 8007304:	af00      	add	r7, sp, #0
 8007306:	bf00      	nop
 8007308:	46bd      	mov	sp, r7
 800730a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730e:	4770      	bx	lr

08007310 <CRS_STM_Init>:
 8007310:	b480      	push	{r7}
 8007312:	af00      	add	r7, sp, #0
 8007314:	bf00      	nop
 8007316:	46bd      	mov	sp, r7
 8007318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731c:	4770      	bx	lr

0800731e <DIS_Init>:
 800731e:	b480      	push	{r7}
 8007320:	af00      	add	r7, sp, #0
 8007322:	bf00      	nop
 8007324:	46bd      	mov	sp, r7
 8007326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732a:	4770      	bx	lr

0800732c <EDS_STM_Init>:
 800732c:	b480      	push	{r7}
 800732e:	af00      	add	r7, sp, #0
 8007330:	bf00      	nop
 8007332:	46bd      	mov	sp, r7
 8007334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007338:	4770      	bx	lr

0800733a <HIDS_Init>:
 800733a:	b480      	push	{r7}
 800733c:	af00      	add	r7, sp, #0
 800733e:	bf00      	nop
 8007340:	46bd      	mov	sp, r7
 8007342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007346:	4770      	bx	lr

08007348 <HRS_Init>:
 8007348:	b480      	push	{r7}
 800734a:	af00      	add	r7, sp, #0
 800734c:	bf00      	nop
 800734e:	46bd      	mov	sp, r7
 8007350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007354:	4770      	bx	lr

08007356 <HTS_Init>:
 8007356:	b480      	push	{r7}
 8007358:	af00      	add	r7, sp, #0
 800735a:	bf00      	nop
 800735c:	46bd      	mov	sp, r7
 800735e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007362:	4770      	bx	lr

08007364 <IAS_Init>:
 8007364:	b480      	push	{r7}
 8007366:	af00      	add	r7, sp, #0
 8007368:	bf00      	nop
 800736a:	46bd      	mov	sp, r7
 800736c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007370:	4770      	bx	lr

08007372 <LLS_Init>:
 8007372:	b480      	push	{r7}
 8007374:	af00      	add	r7, sp, #0
 8007376:	bf00      	nop
 8007378:	46bd      	mov	sp, r7
 800737a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737e:	4770      	bx	lr

08007380 <TPS_Init>:
 8007380:	b480      	push	{r7}
 8007382:	af00      	add	r7, sp, #0
 8007384:	bf00      	nop
 8007386:	46bd      	mov	sp, r7
 8007388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738c:	4770      	bx	lr

0800738e <MOTENV_STM_Init>:
 800738e:	b480      	push	{r7}
 8007390:	af00      	add	r7, sp, #0
 8007392:	bf00      	nop
 8007394:	46bd      	mov	sp, r7
 8007396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739a:	4770      	bx	lr

0800739c <P2PS_STM_Init>:
 800739c:	b480      	push	{r7}
 800739e:	af00      	add	r7, sp, #0
 80073a0:	bf00      	nop
 80073a2:	46bd      	mov	sp, r7
 80073a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a8:	4770      	bx	lr

080073aa <ZDD_STM_Init>:
 80073aa:	b480      	push	{r7}
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	bf00      	nop
 80073b0:	46bd      	mov	sp, r7
 80073b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b6:	4770      	bx	lr

080073b8 <OTAS_STM_Init>:
 80073b8:	b480      	push	{r7}
 80073ba:	af00      	add	r7, sp, #0
 80073bc:	bf00      	nop
 80073be:	46bd      	mov	sp, r7
 80073c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c4:	4770      	bx	lr

080073c6 <MESH_Init>:
 80073c6:	b480      	push	{r7}
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	bf00      	nop
 80073cc:	46bd      	mov	sp, r7
 80073ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d2:	4770      	bx	lr

080073d4 <BVOPUS_STM_Init>:
 80073d4:	b480      	push	{r7}
 80073d6:	af00      	add	r7, sp, #0
 80073d8:	bf00      	nop
 80073da:	46bd      	mov	sp, r7
 80073dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e0:	4770      	bx	lr
	...

080073e4 <SVCCTL_Init>:
 80073e4:	b580      	push	{r7, lr}
 80073e6:	af00      	add	r7, sp, #0
 80073e8:	4b04      	ldr	r3, [pc, #16]	; (80073fc <SVCCTL_Init+0x18>)
 80073ea:	2200      	movs	r2, #0
 80073ec:	771a      	strb	r2, [r3, #28]
 80073ee:	4b04      	ldr	r3, [pc, #16]	; (8007400 <SVCCTL_Init+0x1c>)
 80073f0:	2200      	movs	r2, #0
 80073f2:	701a      	strb	r2, [r3, #0]
 80073f4:	f000 f806 	bl	8007404 <SVCCTL_SvcInit>
 80073f8:	bf00      	nop
 80073fa:	bd80      	pop	{r7, pc}
 80073fc:	20000910 	.word	0x20000910
 8007400:	20000930 	.word	0x20000930

08007404 <SVCCTL_SvcInit>:
 8007404:	b580      	push	{r7, lr}
 8007406:	af00      	add	r7, sp, #0
 8007408:	f7ff ff74 	bl	80072f4 <BAS_Init>
 800740c:	f7ff ff79 	bl	8007302 <BLS_Init>
 8007410:	f7ff ff7e 	bl	8007310 <CRS_STM_Init>
 8007414:	f7ff ff83 	bl	800731e <DIS_Init>
 8007418:	f7ff ff88 	bl	800732c <EDS_STM_Init>
 800741c:	f7ff ff8d 	bl	800733a <HIDS_Init>
 8007420:	f7ff ff92 	bl	8007348 <HRS_Init>
 8007424:	f7ff ff97 	bl	8007356 <HTS_Init>
 8007428:	f7ff ff9c 	bl	8007364 <IAS_Init>
 800742c:	f7ff ffa1 	bl	8007372 <LLS_Init>
 8007430:	f7ff ffa6 	bl	8007380 <TPS_Init>
 8007434:	f7ff ffab 	bl	800738e <MOTENV_STM_Init>
 8007438:	f7ff ffb0 	bl	800739c <P2PS_STM_Init>
 800743c:	f7ff ffb5 	bl	80073aa <ZDD_STM_Init>
 8007440:	f7ff ffba 	bl	80073b8 <OTAS_STM_Init>
 8007444:	f7ff ffc6 	bl	80073d4 <BVOPUS_STM_Init>
 8007448:	f7ff ffbd 	bl	80073c6 <MESH_Init>
 800744c:	f001 faaa 	bl	80089a4 <SVCCTL_InitCustomSvc>
 8007450:	bf00      	nop
 8007452:	bd80      	pop	{r7, pc}

08007454 <SVCCTL_RegisterSvcHandler>:
 8007454:	b480      	push	{r7}
 8007456:	b083      	sub	sp, #12
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
 800745c:	4b09      	ldr	r3, [pc, #36]	; (8007484 <SVCCTL_RegisterSvcHandler+0x30>)
 800745e:	7f1b      	ldrb	r3, [r3, #28]
 8007460:	4619      	mov	r1, r3
 8007462:	4a08      	ldr	r2, [pc, #32]	; (8007484 <SVCCTL_RegisterSvcHandler+0x30>)
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800746a:	4b06      	ldr	r3, [pc, #24]	; (8007484 <SVCCTL_RegisterSvcHandler+0x30>)
 800746c:	7f1b      	ldrb	r3, [r3, #28]
 800746e:	3301      	adds	r3, #1
 8007470:	b2da      	uxtb	r2, r3
 8007472:	4b04      	ldr	r3, [pc, #16]	; (8007484 <SVCCTL_RegisterSvcHandler+0x30>)
 8007474:	771a      	strb	r2, [r3, #28]
 8007476:	bf00      	nop
 8007478:	370c      	adds	r7, #12
 800747a:	46bd      	mov	sp, r7
 800747c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007480:	4770      	bx	lr
 8007482:	bf00      	nop
 8007484:	20000910 	.word	0x20000910

08007488 <SVCCTL_UserEvtRx>:
 8007488:	b580      	push	{r7, lr}
 800748a:	b086      	sub	sp, #24
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	3301      	adds	r3, #1
 8007494:	613b      	str	r3, [r7, #16]
 8007496:	2300      	movs	r3, #0
 8007498:	75fb      	strb	r3, [r7, #23]
 800749a:	693b      	ldr	r3, [r7, #16]
 800749c:	781b      	ldrb	r3, [r3, #0]
 800749e:	2bff      	cmp	r3, #255	; 0xff
 80074a0:	d125      	bne.n	80074ee <SVCCTL_UserEvtRx+0x66>
 80074a2:	693b      	ldr	r3, [r7, #16]
 80074a4:	3302      	adds	r3, #2
 80074a6:	60fb      	str	r3, [r7, #12]
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	881b      	ldrh	r3, [r3, #0]
 80074ac:	b29b      	uxth	r3, r3
 80074ae:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80074b2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80074b6:	d118      	bne.n	80074ea <SVCCTL_UserEvtRx+0x62>
 80074b8:	2300      	movs	r3, #0
 80074ba:	757b      	strb	r3, [r7, #21]
 80074bc:	e00d      	b.n	80074da <SVCCTL_UserEvtRx+0x52>
 80074be:	7d7b      	ldrb	r3, [r7, #21]
 80074c0:	4a1a      	ldr	r2, [pc, #104]	; (800752c <SVCCTL_UserEvtRx+0xa4>)
 80074c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80074c6:	6878      	ldr	r0, [r7, #4]
 80074c8:	4798      	blx	r3
 80074ca:	4603      	mov	r3, r0
 80074cc:	75fb      	strb	r3, [r7, #23]
 80074ce:	7dfb      	ldrb	r3, [r7, #23]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d108      	bne.n	80074e6 <SVCCTL_UserEvtRx+0x5e>
 80074d4:	7d7b      	ldrb	r3, [r7, #21]
 80074d6:	3301      	adds	r3, #1
 80074d8:	757b      	strb	r3, [r7, #21]
 80074da:	4b14      	ldr	r3, [pc, #80]	; (800752c <SVCCTL_UserEvtRx+0xa4>)
 80074dc:	7f1b      	ldrb	r3, [r3, #28]
 80074de:	7d7a      	ldrb	r2, [r7, #21]
 80074e0:	429a      	cmp	r2, r3
 80074e2:	d3ec      	bcc.n	80074be <SVCCTL_UserEvtRx+0x36>
 80074e4:	e002      	b.n	80074ec <SVCCTL_UserEvtRx+0x64>
 80074e6:	bf00      	nop
 80074e8:	e000      	b.n	80074ec <SVCCTL_UserEvtRx+0x64>
 80074ea:	bf00      	nop
 80074ec:	e000      	b.n	80074f0 <SVCCTL_UserEvtRx+0x68>
 80074ee:	bf00      	nop
 80074f0:	7dfb      	ldrb	r3, [r7, #23]
 80074f2:	2b02      	cmp	r3, #2
 80074f4:	d00f      	beq.n	8007516 <SVCCTL_UserEvtRx+0x8e>
 80074f6:	2b02      	cmp	r3, #2
 80074f8:	dc10      	bgt.n	800751c <SVCCTL_UserEvtRx+0x94>
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d002      	beq.n	8007504 <SVCCTL_UserEvtRx+0x7c>
 80074fe:	2b01      	cmp	r3, #1
 8007500:	d006      	beq.n	8007510 <SVCCTL_UserEvtRx+0x88>
 8007502:	e00b      	b.n	800751c <SVCCTL_UserEvtRx+0x94>
 8007504:	6878      	ldr	r0, [r7, #4]
 8007506:	f000 ff7b 	bl	8008400 <SVCCTL_App_Notification>
 800750a:	4603      	mov	r3, r0
 800750c:	75bb      	strb	r3, [r7, #22]
 800750e:	e008      	b.n	8007522 <SVCCTL_UserEvtRx+0x9a>
 8007510:	2301      	movs	r3, #1
 8007512:	75bb      	strb	r3, [r7, #22]
 8007514:	e005      	b.n	8007522 <SVCCTL_UserEvtRx+0x9a>
 8007516:	2300      	movs	r3, #0
 8007518:	75bb      	strb	r3, [r7, #22]
 800751a:	e002      	b.n	8007522 <SVCCTL_UserEvtRx+0x9a>
 800751c:	2301      	movs	r3, #1
 800751e:	75bb      	strb	r3, [r7, #22]
 8007520:	bf00      	nop
 8007522:	7dbb      	ldrb	r3, [r7, #22]
 8007524:	4618      	mov	r0, r3
 8007526:	3718      	adds	r7, #24
 8007528:	46bd      	mov	sp, r7
 800752a:	bd80      	pop	{r7, pc}
 800752c:	20000910 	.word	0x20000910

08007530 <SHCI_C2_BLE_Init>:
 8007530:	b580      	push	{r7, lr}
 8007532:	b088      	sub	sp, #32
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
 8007538:	f107 030c 	add.w	r3, r7, #12
 800753c:	61fb      	str	r3, [r7, #28]
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	f103 020c 	add.w	r2, r3, #12
 8007544:	69fb      	ldr	r3, [r7, #28]
 8007546:	212e      	movs	r1, #46	; 0x2e
 8007548:	f64f 4066 	movw	r0, #64614	; 0xfc66
 800754c:	f000 fae2 	bl	8007b14 <shci_send>
 8007550:	69fb      	ldr	r3, [r7, #28]
 8007552:	330b      	adds	r3, #11
 8007554:	78db      	ldrb	r3, [r3, #3]
 8007556:	4618      	mov	r0, r3
 8007558:	3720      	adds	r7, #32
 800755a:	46bd      	mov	sp, r7
 800755c:	bd80      	pop	{r7, pc}

0800755e <SHCI_C2_DEBUG_Init>:
 800755e:	b580      	push	{r7, lr}
 8007560:	b088      	sub	sp, #32
 8007562:	af00      	add	r7, sp, #0
 8007564:	6078      	str	r0, [r7, #4]
 8007566:	f107 030c 	add.w	r3, r7, #12
 800756a:	61fb      	str	r3, [r7, #28]
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	f103 020c 	add.w	r2, r3, #12
 8007572:	69fb      	ldr	r3, [r7, #28]
 8007574:	210f      	movs	r1, #15
 8007576:	f64f 4068 	movw	r0, #64616	; 0xfc68
 800757a:	f000 facb 	bl	8007b14 <shci_send>
 800757e:	69fb      	ldr	r3, [r7, #28]
 8007580:	330b      	adds	r3, #11
 8007582:	78db      	ldrb	r3, [r3, #3]
 8007584:	4618      	mov	r0, r3
 8007586:	3720      	adds	r7, #32
 8007588:	46bd      	mov	sp, r7
 800758a:	bd80      	pop	{r7, pc}

0800758c <SHCI_C2_Config>:
 800758c:	b580      	push	{r7, lr}
 800758e:	b088      	sub	sp, #32
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
 8007594:	f107 030c 	add.w	r3, r7, #12
 8007598:	61fb      	str	r3, [r7, #28]
 800759a:	69fb      	ldr	r3, [r7, #28]
 800759c:	687a      	ldr	r2, [r7, #4]
 800759e:	2110      	movs	r1, #16
 80075a0:	f64f 4075 	movw	r0, #64629	; 0xfc75
 80075a4:	f000 fab6 	bl	8007b14 <shci_send>
 80075a8:	69fb      	ldr	r3, [r7, #28]
 80075aa:	330b      	adds	r3, #11
 80075ac:	78db      	ldrb	r3, [r3, #3]
 80075ae:	4618      	mov	r0, r3
 80075b0:	3720      	adds	r7, #32
 80075b2:	46bd      	mov	sp, r7
 80075b4:	bd80      	pop	{r7, pc}
	...

080075b8 <SHCI_GetWirelessFwInfo>:
 80075b8:	b480      	push	{r7}
 80075ba:	b08b      	sub	sp, #44	; 0x2c
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
 80075c0:	2300      	movs	r3, #0
 80075c2:	613b      	str	r3, [r7, #16]
 80075c4:	2300      	movs	r3, #0
 80075c6:	60fb      	str	r3, [r7, #12]
 80075c8:	2300      	movs	r3, #0
 80075ca:	627b      	str	r3, [r7, #36]	; 0x24
 80075cc:	2300      	movs	r3, #0
 80075ce:	623b      	str	r3, [r7, #32]
 80075d0:	2300      	movs	r3, #0
 80075d2:	61fb      	str	r3, [r7, #28]
 80075d4:	2300      	movs	r3, #0
 80075d6:	60bb      	str	r3, [r7, #8]
 80075d8:	2300      	movs	r3, #0
 80075da:	61bb      	str	r3, [r7, #24]
 80075dc:	2300      	movs	r3, #0
 80075de:	617b      	str	r3, [r7, #20]
 80075e0:	4b4a      	ldr	r3, [pc, #296]	; (800770c <SHCI_GetWirelessFwInfo+0x154>)
 80075e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075e4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80075e8:	613b      	str	r3, [r7, #16]
 80075ea:	693b      	ldr	r3, [r7, #16]
 80075ec:	009b      	lsls	r3, r3, #2
 80075ee:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80075f2:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	60bb      	str	r3, [r7, #8]
 80075fa:	68bb      	ldr	r3, [r7, #8]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	4a44      	ldr	r2, [pc, #272]	; (8007710 <SHCI_GetWirelessFwInfo+0x158>)
 8007600:	4293      	cmp	r3, r2
 8007602:	d10f      	bne.n	8007624 <SHCI_GetWirelessFwInfo+0x6c>
 8007604:	68bb      	ldr	r3, [r7, #8]
 8007606:	695b      	ldr	r3, [r3, #20]
 8007608:	627b      	str	r3, [r7, #36]	; 0x24
 800760a:	68bb      	ldr	r3, [r7, #8]
 800760c:	699b      	ldr	r3, [r3, #24]
 800760e:	623b      	str	r3, [r7, #32]
 8007610:	68bb      	ldr	r3, [r7, #8]
 8007612:	69db      	ldr	r3, [r3, #28]
 8007614:	61fb      	str	r3, [r7, #28]
 8007616:	68bb      	ldr	r3, [r7, #8]
 8007618:	68db      	ldr	r3, [r3, #12]
 800761a:	61bb      	str	r3, [r7, #24]
 800761c:	68bb      	ldr	r3, [r7, #8]
 800761e:	691b      	ldr	r3, [r3, #16]
 8007620:	617b      	str	r3, [r7, #20]
 8007622:	e01a      	b.n	800765a <SHCI_GetWirelessFwInfo+0xa2>
 8007624:	693b      	ldr	r3, [r7, #16]
 8007626:	009b      	lsls	r3, r3, #2
 8007628:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800762c:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8007630:	60fb      	str	r3, [r7, #12]
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	691b      	ldr	r3, [r3, #16]
 8007638:	627b      	str	r3, [r7, #36]	; 0x24
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	695b      	ldr	r3, [r3, #20]
 8007640:	623b      	str	r3, [r7, #32]
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	699b      	ldr	r3, [r3, #24]
 8007648:	61fb      	str	r3, [r7, #28]
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	685b      	ldr	r3, [r3, #4]
 8007650:	61bb      	str	r3, [r7, #24]
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	689b      	ldr	r3, [r3, #8]
 8007658:	617b      	str	r3, [r7, #20]
 800765a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800765c:	0e1b      	lsrs	r3, r3, #24
 800765e:	b2da      	uxtb	r2, r3
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	701a      	strb	r2, [r3, #0]
 8007664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007666:	0c1b      	lsrs	r3, r3, #16
 8007668:	b2da      	uxtb	r2, r3
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	705a      	strb	r2, [r3, #1]
 800766e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007670:	0a1b      	lsrs	r3, r3, #8
 8007672:	b2da      	uxtb	r2, r3
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	709a      	strb	r2, [r3, #2]
 8007678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800767a:	091b      	lsrs	r3, r3, #4
 800767c:	b2db      	uxtb	r3, r3
 800767e:	f003 030f 	and.w	r3, r3, #15
 8007682:	b2da      	uxtb	r2, r3
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	70da      	strb	r2, [r3, #3]
 8007688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800768a:	b2db      	uxtb	r3, r3
 800768c:	f003 030f 	and.w	r3, r3, #15
 8007690:	b2da      	uxtb	r2, r3
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	711a      	strb	r2, [r3, #4]
 8007696:	6a3b      	ldr	r3, [r7, #32]
 8007698:	0e1b      	lsrs	r3, r3, #24
 800769a:	b2da      	uxtb	r2, r3
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	715a      	strb	r2, [r3, #5]
 80076a0:	6a3b      	ldr	r3, [r7, #32]
 80076a2:	0c1b      	lsrs	r3, r3, #16
 80076a4:	b2da      	uxtb	r2, r3
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	719a      	strb	r2, [r3, #6]
 80076aa:	6a3b      	ldr	r3, [r7, #32]
 80076ac:	0a1b      	lsrs	r3, r3, #8
 80076ae:	b2da      	uxtb	r2, r3
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	71da      	strb	r2, [r3, #7]
 80076b4:	6a3b      	ldr	r3, [r7, #32]
 80076b6:	b2da      	uxtb	r2, r3
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	721a      	strb	r2, [r3, #8]
 80076bc:	69fb      	ldr	r3, [r7, #28]
 80076be:	b2da      	uxtb	r2, r3
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	725a      	strb	r2, [r3, #9]
 80076c4:	69bb      	ldr	r3, [r7, #24]
 80076c6:	0e1b      	lsrs	r3, r3, #24
 80076c8:	b2da      	uxtb	r2, r3
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	729a      	strb	r2, [r3, #10]
 80076ce:	69bb      	ldr	r3, [r7, #24]
 80076d0:	0c1b      	lsrs	r3, r3, #16
 80076d2:	b2da      	uxtb	r2, r3
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	72da      	strb	r2, [r3, #11]
 80076d8:	69bb      	ldr	r3, [r7, #24]
 80076da:	0a1b      	lsrs	r3, r3, #8
 80076dc:	b2da      	uxtb	r2, r3
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	731a      	strb	r2, [r3, #12]
 80076e2:	697b      	ldr	r3, [r7, #20]
 80076e4:	0e1b      	lsrs	r3, r3, #24
 80076e6:	b2da      	uxtb	r2, r3
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	735a      	strb	r2, [r3, #13]
 80076ec:	697b      	ldr	r3, [r7, #20]
 80076ee:	0c1b      	lsrs	r3, r3, #16
 80076f0:	b2da      	uxtb	r2, r3
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	739a      	strb	r2, [r3, #14]
 80076f6:	697b      	ldr	r3, [r7, #20]
 80076f8:	b2da      	uxtb	r2, r3
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	73da      	strb	r2, [r3, #15]
 80076fe:	2300      	movs	r3, #0
 8007700:	4618      	mov	r0, r3
 8007702:	372c      	adds	r7, #44	; 0x2c
 8007704:	46bd      	mov	sp, r7
 8007706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770a:	4770      	bx	lr
 800770c:	58004000 	.word	0x58004000
 8007710:	a94656b9 	.word	0xa94656b9

08007714 <hci_init>:
 8007714:	b580      	push	{r7, lr}
 8007716:	b082      	sub	sp, #8
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
 800771c:	6039      	str	r1, [r7, #0]
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	685b      	ldr	r3, [r3, #4]
 8007722:	4a08      	ldr	r2, [pc, #32]	; (8007744 <hci_init+0x30>)
 8007724:	6013      	str	r3, [r2, #0]
 8007726:	4a08      	ldr	r2, [pc, #32]	; (8007748 <hci_init+0x34>)
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	61d3      	str	r3, [r2, #28]
 800772c:	4806      	ldr	r0, [pc, #24]	; (8007748 <hci_init+0x34>)
 800772e:	f000 f973 	bl	8007a18 <hci_register_io_bus>
 8007732:	683b      	ldr	r3, [r7, #0]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	4618      	mov	r0, r3
 8007738:	f000 f8d4 	bl	80078e4 <TlInit>
 800773c:	bf00      	nop
 800773e:	3708      	adds	r7, #8
 8007740:	46bd      	mov	sp, r7
 8007742:	bd80      	pop	{r7, pc}
 8007744:	20000ba4 	.word	0x20000ba4
 8007748:	20000b7c 	.word	0x20000b7c

0800774c <hci_user_evt_proc>:
 800774c:	b580      	push	{r7, lr}
 800774e:	b084      	sub	sp, #16
 8007750:	af00      	add	r7, sp, #0
 8007752:	4822      	ldr	r0, [pc, #136]	; (80077dc <hci_user_evt_proc+0x90>)
 8007754:	f000 fd28 	bl	80081a8 <LST_is_empty>
 8007758:	4603      	mov	r3, r0
 800775a:	2b00      	cmp	r3, #0
 800775c:	d12b      	bne.n	80077b6 <hci_user_evt_proc+0x6a>
 800775e:	4b20      	ldr	r3, [pc, #128]	; (80077e0 <hci_user_evt_proc+0x94>)
 8007760:	781b      	ldrb	r3, [r3, #0]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d027      	beq.n	80077b6 <hci_user_evt_proc+0x6a>
 8007766:	f107 030c 	add.w	r3, r7, #12
 800776a:	4619      	mov	r1, r3
 800776c:	481b      	ldr	r0, [pc, #108]	; (80077dc <hci_user_evt_proc+0x90>)
 800776e:	f000 fdaa 	bl	80082c6 <LST_remove_head>
 8007772:	4b1c      	ldr	r3, [pc, #112]	; (80077e4 <hci_user_evt_proc+0x98>)
 8007774:	69db      	ldr	r3, [r3, #28]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d00c      	beq.n	8007794 <hci_user_evt_proc+0x48>
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	60bb      	str	r3, [r7, #8]
 800777e:	2301      	movs	r3, #1
 8007780:	713b      	strb	r3, [r7, #4]
 8007782:	4b18      	ldr	r3, [pc, #96]	; (80077e4 <hci_user_evt_proc+0x98>)
 8007784:	69db      	ldr	r3, [r3, #28]
 8007786:	1d3a      	adds	r2, r7, #4
 8007788:	4610      	mov	r0, r2
 800778a:	4798      	blx	r3
 800778c:	793a      	ldrb	r2, [r7, #4]
 800778e:	4b14      	ldr	r3, [pc, #80]	; (80077e0 <hci_user_evt_proc+0x94>)
 8007790:	701a      	strb	r2, [r3, #0]
 8007792:	e002      	b.n	800779a <hci_user_evt_proc+0x4e>
 8007794:	4b12      	ldr	r3, [pc, #72]	; (80077e0 <hci_user_evt_proc+0x94>)
 8007796:	2201      	movs	r2, #1
 8007798:	701a      	strb	r2, [r3, #0]
 800779a:	4b11      	ldr	r3, [pc, #68]	; (80077e0 <hci_user_evt_proc+0x94>)
 800779c:	781b      	ldrb	r3, [r3, #0]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d004      	beq.n	80077ac <hci_user_evt_proc+0x60>
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	4618      	mov	r0, r3
 80077a6:	f000 fc03 	bl	8007fb0 <TL_MM_EvtDone>
 80077aa:	e004      	b.n	80077b6 <hci_user_evt_proc+0x6a>
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	4619      	mov	r1, r3
 80077b0:	480a      	ldr	r0, [pc, #40]	; (80077dc <hci_user_evt_proc+0x90>)
 80077b2:	f000 fd1b 	bl	80081ec <LST_insert_head>
 80077b6:	4809      	ldr	r0, [pc, #36]	; (80077dc <hci_user_evt_proc+0x90>)
 80077b8:	f000 fcf6 	bl	80081a8 <LST_is_empty>
 80077bc:	4603      	mov	r3, r0
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d107      	bne.n	80077d2 <hci_user_evt_proc+0x86>
 80077c2:	4b07      	ldr	r3, [pc, #28]	; (80077e0 <hci_user_evt_proc+0x94>)
 80077c4:	781b      	ldrb	r3, [r3, #0]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d003      	beq.n	80077d2 <hci_user_evt_proc+0x86>
 80077ca:	4804      	ldr	r0, [pc, #16]	; (80077dc <hci_user_evt_proc+0x90>)
 80077cc:	f001 f830 	bl	8008830 <hci_notify_asynch_evt>
 80077d0:	bf00      	nop
 80077d2:	bf00      	nop
 80077d4:	3710      	adds	r7, #16
 80077d6:	46bd      	mov	sp, r7
 80077d8:	bd80      	pop	{r7, pc}
 80077da:	bf00      	nop
 80077dc:	20000938 	.word	0x20000938
 80077e0:	20000944 	.word	0x20000944
 80077e4:	20000b7c 	.word	0x20000b7c

080077e8 <hci_send_req>:
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b088      	sub	sp, #32
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
 80077f0:	460b      	mov	r3, r1
 80077f2:	70fb      	strb	r3, [r7, #3]
 80077f4:	2000      	movs	r0, #0
 80077f6:	f000 f8cb 	bl	8007990 <NotifyCmdStatus>
 80077fa:	2300      	movs	r3, #0
 80077fc:	77fb      	strb	r3, [r7, #31]
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	885b      	ldrh	r3, [r3, #2]
 8007802:	b21b      	sxth	r3, r3
 8007804:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007808:	b21a      	sxth	r2, r3
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	881b      	ldrh	r3, [r3, #0]
 800780e:	029b      	lsls	r3, r3, #10
 8007810:	b21b      	sxth	r3, r3
 8007812:	4313      	orrs	r3, r2
 8007814:	b21b      	sxth	r3, r3
 8007816:	83bb      	strh	r3, [r7, #28]
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	68db      	ldr	r3, [r3, #12]
 800781c:	b2d9      	uxtb	r1, r3
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	689a      	ldr	r2, [r3, #8]
 8007822:	8bbb      	ldrh	r3, [r7, #28]
 8007824:	4618      	mov	r0, r3
 8007826:	f000 f88d 	bl	8007944 <SendCmd>
 800782a:	e04e      	b.n	80078ca <hci_send_req+0xe2>
 800782c:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8007830:	f001 f815 	bl	800885e <hci_cmd_resp_wait>
 8007834:	e043      	b.n	80078be <hci_send_req+0xd6>
 8007836:	f107 030c 	add.w	r3, r7, #12
 800783a:	4619      	mov	r1, r3
 800783c:	4828      	ldr	r0, [pc, #160]	; (80078e0 <hci_send_req+0xf8>)
 800783e:	f000 fd42 	bl	80082c6 <LST_remove_head>
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	7a5b      	ldrb	r3, [r3, #9]
 8007846:	2b0f      	cmp	r3, #15
 8007848:	d114      	bne.n	8007874 <hci_send_req+0x8c>
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	330b      	adds	r3, #11
 800784e:	613b      	str	r3, [r7, #16]
 8007850:	693b      	ldr	r3, [r7, #16]
 8007852:	885b      	ldrh	r3, [r3, #2]
 8007854:	b29b      	uxth	r3, r3
 8007856:	8bba      	ldrh	r2, [r7, #28]
 8007858:	429a      	cmp	r2, r3
 800785a:	d104      	bne.n	8007866 <hci_send_req+0x7e>
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	691b      	ldr	r3, [r3, #16]
 8007860:	693a      	ldr	r2, [r7, #16]
 8007862:	7812      	ldrb	r2, [r2, #0]
 8007864:	701a      	strb	r2, [r3, #0]
 8007866:	693b      	ldr	r3, [r7, #16]
 8007868:	785b      	ldrb	r3, [r3, #1]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d027      	beq.n	80078be <hci_send_req+0xd6>
 800786e:	2301      	movs	r3, #1
 8007870:	77fb      	strb	r3, [r7, #31]
 8007872:	e024      	b.n	80078be <hci_send_req+0xd6>
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	330b      	adds	r3, #11
 8007878:	61bb      	str	r3, [r7, #24]
 800787a:	69bb      	ldr	r3, [r7, #24]
 800787c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8007880:	b29b      	uxth	r3, r3
 8007882:	8bba      	ldrh	r2, [r7, #28]
 8007884:	429a      	cmp	r2, r3
 8007886:	d114      	bne.n	80078b2 <hci_send_req+0xca>
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	7a9b      	ldrb	r3, [r3, #10]
 800788c:	3b03      	subs	r3, #3
 800788e:	75fb      	strb	r3, [r7, #23]
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	695a      	ldr	r2, [r3, #20]
 8007894:	7dfb      	ldrb	r3, [r7, #23]
 8007896:	429a      	cmp	r2, r3
 8007898:	bfa8      	it	ge
 800789a:	461a      	movge	r2, r3
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	615a      	str	r2, [r3, #20]
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	6918      	ldr	r0, [r3, #16]
 80078a4:	69bb      	ldr	r3, [r7, #24]
 80078a6:	1cd9      	adds	r1, r3, #3
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	695b      	ldr	r3, [r3, #20]
 80078ac:	461a      	mov	r2, r3
 80078ae:	f001 fde7 	bl	8009480 <memcpy>
 80078b2:	69bb      	ldr	r3, [r7, #24]
 80078b4:	781b      	ldrb	r3, [r3, #0]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d001      	beq.n	80078be <hci_send_req+0xd6>
 80078ba:	2301      	movs	r3, #1
 80078bc:	77fb      	strb	r3, [r7, #31]
 80078be:	4808      	ldr	r0, [pc, #32]	; (80078e0 <hci_send_req+0xf8>)
 80078c0:	f000 fc72 	bl	80081a8 <LST_is_empty>
 80078c4:	4603      	mov	r3, r0
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d0b5      	beq.n	8007836 <hci_send_req+0x4e>
 80078ca:	7ffb      	ldrb	r3, [r7, #31]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d0ad      	beq.n	800782c <hci_send_req+0x44>
 80078d0:	2001      	movs	r0, #1
 80078d2:	f000 f85d 	bl	8007990 <NotifyCmdStatus>
 80078d6:	2300      	movs	r3, #0
 80078d8:	4618      	mov	r0, r3
 80078da:	3720      	adds	r7, #32
 80078dc:	46bd      	mov	sp, r7
 80078de:	bd80      	pop	{r7, pc}
 80078e0:	20000b9c 	.word	0x20000b9c

080078e4 <TlInit>:
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b086      	sub	sp, #24
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
 80078ec:	480f      	ldr	r0, [pc, #60]	; (800792c <TlInit+0x48>)
 80078ee:	f000 fc4b 	bl	8008188 <LST_init_head>
 80078f2:	4a0f      	ldr	r2, [pc, #60]	; (8007930 <TlInit+0x4c>)
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	6013      	str	r3, [r2, #0]
 80078f8:	480e      	ldr	r0, [pc, #56]	; (8007934 <TlInit+0x50>)
 80078fa:	f000 fc45 	bl	8008188 <LST_init_head>
 80078fe:	4b0e      	ldr	r3, [pc, #56]	; (8007938 <TlInit+0x54>)
 8007900:	2201      	movs	r2, #1
 8007902:	701a      	strb	r2, [r3, #0]
 8007904:	4b0d      	ldr	r3, [pc, #52]	; (800793c <TlInit+0x58>)
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d00a      	beq.n	8007922 <TlInit+0x3e>
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	613b      	str	r3, [r7, #16]
 8007910:	4b0b      	ldr	r3, [pc, #44]	; (8007940 <TlInit+0x5c>)
 8007912:	60bb      	str	r3, [r7, #8]
 8007914:	4b09      	ldr	r3, [pc, #36]	; (800793c <TlInit+0x58>)
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	f107 0208 	add.w	r2, r7, #8
 800791c:	4610      	mov	r0, r2
 800791e:	4798      	blx	r3
 8007920:	bf00      	nop
 8007922:	bf00      	nop
 8007924:	3718      	adds	r7, #24
 8007926:	46bd      	mov	sp, r7
 8007928:	bd80      	pop	{r7, pc}
 800792a:	bf00      	nop
 800792c:	20000b9c 	.word	0x20000b9c
 8007930:	20000940 	.word	0x20000940
 8007934:	20000938 	.word	0x20000938
 8007938:	20000944 	.word	0x20000944
 800793c:	20000b7c 	.word	0x20000b7c
 8007940:	080079d1 	.word	0x080079d1

08007944 <SendCmd>:
 8007944:	b580      	push	{r7, lr}
 8007946:	b082      	sub	sp, #8
 8007948:	af00      	add	r7, sp, #0
 800794a:	4603      	mov	r3, r0
 800794c:	603a      	str	r2, [r7, #0]
 800794e:	80fb      	strh	r3, [r7, #6]
 8007950:	460b      	mov	r3, r1
 8007952:	717b      	strb	r3, [r7, #5]
 8007954:	4b0c      	ldr	r3, [pc, #48]	; (8007988 <SendCmd+0x44>)
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	88fa      	ldrh	r2, [r7, #6]
 800795a:	f8a3 2009 	strh.w	r2, [r3, #9]
 800795e:	4b0a      	ldr	r3, [pc, #40]	; (8007988 <SendCmd+0x44>)
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	797a      	ldrb	r2, [r7, #5]
 8007964:	72da      	strb	r2, [r3, #11]
 8007966:	4b08      	ldr	r3, [pc, #32]	; (8007988 <SendCmd+0x44>)
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	330c      	adds	r3, #12
 800796c:	797a      	ldrb	r2, [r7, #5]
 800796e:	6839      	ldr	r1, [r7, #0]
 8007970:	4618      	mov	r0, r3
 8007972:	f001 fd85 	bl	8009480 <memcpy>
 8007976:	4b05      	ldr	r3, [pc, #20]	; (800798c <SendCmd+0x48>)
 8007978:	691b      	ldr	r3, [r3, #16]
 800797a:	2100      	movs	r1, #0
 800797c:	2000      	movs	r0, #0
 800797e:	4798      	blx	r3
 8007980:	bf00      	nop
 8007982:	3708      	adds	r7, #8
 8007984:	46bd      	mov	sp, r7
 8007986:	bd80      	pop	{r7, pc}
 8007988:	20000940 	.word	0x20000940
 800798c:	20000b7c 	.word	0x20000b7c

08007990 <NotifyCmdStatus>:
 8007990:	b580      	push	{r7, lr}
 8007992:	b082      	sub	sp, #8
 8007994:	af00      	add	r7, sp, #0
 8007996:	4603      	mov	r3, r0
 8007998:	71fb      	strb	r3, [r7, #7]
 800799a:	79fb      	ldrb	r3, [r7, #7]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d108      	bne.n	80079b2 <NotifyCmdStatus+0x22>
 80079a0:	4b0a      	ldr	r3, [pc, #40]	; (80079cc <NotifyCmdStatus+0x3c>)
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d00d      	beq.n	80079c4 <NotifyCmdStatus+0x34>
 80079a8:	4b08      	ldr	r3, [pc, #32]	; (80079cc <NotifyCmdStatus+0x3c>)
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	2000      	movs	r0, #0
 80079ae:	4798      	blx	r3
 80079b0:	e008      	b.n	80079c4 <NotifyCmdStatus+0x34>
 80079b2:	4b06      	ldr	r3, [pc, #24]	; (80079cc <NotifyCmdStatus+0x3c>)
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d004      	beq.n	80079c4 <NotifyCmdStatus+0x34>
 80079ba:	4b04      	ldr	r3, [pc, #16]	; (80079cc <NotifyCmdStatus+0x3c>)
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	2001      	movs	r0, #1
 80079c0:	4798      	blx	r3
 80079c2:	bf00      	nop
 80079c4:	bf00      	nop
 80079c6:	3708      	adds	r7, #8
 80079c8:	46bd      	mov	sp, r7
 80079ca:	bd80      	pop	{r7, pc}
 80079cc:	20000ba4 	.word	0x20000ba4

080079d0 <TlEvtReceived>:
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b082      	sub	sp, #8
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	7a5b      	ldrb	r3, [r3, #9]
 80079dc:	2b0f      	cmp	r3, #15
 80079de:	d003      	beq.n	80079e8 <TlEvtReceived+0x18>
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	7a5b      	ldrb	r3, [r3, #9]
 80079e4:	2b0e      	cmp	r3, #14
 80079e6:	d107      	bne.n	80079f8 <TlEvtReceived+0x28>
 80079e8:	6879      	ldr	r1, [r7, #4]
 80079ea:	4809      	ldr	r0, [pc, #36]	; (8007a10 <TlEvtReceived+0x40>)
 80079ec:	f000 fc24 	bl	8008238 <LST_insert_tail>
 80079f0:	2000      	movs	r0, #0
 80079f2:	f000 ff29 	bl	8008848 <hci_cmd_resp_release>
 80079f6:	e006      	b.n	8007a06 <TlEvtReceived+0x36>
 80079f8:	6879      	ldr	r1, [r7, #4]
 80079fa:	4806      	ldr	r0, [pc, #24]	; (8007a14 <TlEvtReceived+0x44>)
 80079fc:	f000 fc1c 	bl	8008238 <LST_insert_tail>
 8007a00:	4804      	ldr	r0, [pc, #16]	; (8007a14 <TlEvtReceived+0x44>)
 8007a02:	f000 ff15 	bl	8008830 <hci_notify_asynch_evt>
 8007a06:	bf00      	nop
 8007a08:	3708      	adds	r7, #8
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	bd80      	pop	{r7, pc}
 8007a0e:	bf00      	nop
 8007a10:	20000b9c 	.word	0x20000b9c
 8007a14:	20000938 	.word	0x20000938

08007a18 <hci_register_io_bus>:
 8007a18:	b480      	push	{r7}
 8007a1a:	b083      	sub	sp, #12
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	4a05      	ldr	r2, [pc, #20]	; (8007a38 <hci_register_io_bus+0x20>)
 8007a24:	601a      	str	r2, [r3, #0]
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	4a04      	ldr	r2, [pc, #16]	; (8007a3c <hci_register_io_bus+0x24>)
 8007a2a:	611a      	str	r2, [r3, #16]
 8007a2c:	bf00      	nop
 8007a2e:	370c      	adds	r7, #12
 8007a30:	46bd      	mov	sp, r7
 8007a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a36:	4770      	bx	lr
 8007a38:	08007d29 	.word	0x08007d29
 8007a3c:	08007d91 	.word	0x08007d91

08007a40 <shci_init>:
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b082      	sub	sp, #8
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
 8007a48:	6039      	str	r1, [r7, #0]
 8007a4a:	683b      	ldr	r3, [r7, #0]
 8007a4c:	685b      	ldr	r3, [r3, #4]
 8007a4e:	4a08      	ldr	r2, [pc, #32]	; (8007a70 <shci_init+0x30>)
 8007a50:	6013      	str	r3, [r2, #0]
 8007a52:	4a08      	ldr	r2, [pc, #32]	; (8007a74 <shci_init+0x34>)
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	61d3      	str	r3, [r2, #28]
 8007a58:	4806      	ldr	r0, [pc, #24]	; (8007a74 <shci_init+0x34>)
 8007a5a:	f000 f911 	bl	8007c80 <shci_register_io_bus>
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	4618      	mov	r0, r3
 8007a64:	f000 f894 	bl	8007b90 <TlInit>
 8007a68:	bf00      	nop
 8007a6a:	3708      	adds	r7, #8
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	bd80      	pop	{r7, pc}
 8007a70:	20000bc8 	.word	0x20000bc8
 8007a74:	20000ba8 	.word	0x20000ba8

08007a78 <shci_user_evt_proc>:
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b084      	sub	sp, #16
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	4822      	ldr	r0, [pc, #136]	; (8007b08 <shci_user_evt_proc+0x90>)
 8007a80:	f000 fb92 	bl	80081a8 <LST_is_empty>
 8007a84:	4603      	mov	r3, r0
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d12b      	bne.n	8007ae2 <shci_user_evt_proc+0x6a>
 8007a8a:	4b20      	ldr	r3, [pc, #128]	; (8007b0c <shci_user_evt_proc+0x94>)
 8007a8c:	781b      	ldrb	r3, [r3, #0]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d027      	beq.n	8007ae2 <shci_user_evt_proc+0x6a>
 8007a92:	f107 030c 	add.w	r3, r7, #12
 8007a96:	4619      	mov	r1, r3
 8007a98:	481b      	ldr	r0, [pc, #108]	; (8007b08 <shci_user_evt_proc+0x90>)
 8007a9a:	f000 fc14 	bl	80082c6 <LST_remove_head>
 8007a9e:	4b1c      	ldr	r3, [pc, #112]	; (8007b10 <shci_user_evt_proc+0x98>)
 8007aa0:	69db      	ldr	r3, [r3, #28]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d00c      	beq.n	8007ac0 <shci_user_evt_proc+0x48>
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	60bb      	str	r3, [r7, #8]
 8007aaa:	2301      	movs	r3, #1
 8007aac:	713b      	strb	r3, [r7, #4]
 8007aae:	4b18      	ldr	r3, [pc, #96]	; (8007b10 <shci_user_evt_proc+0x98>)
 8007ab0:	69db      	ldr	r3, [r3, #28]
 8007ab2:	1d3a      	adds	r2, r7, #4
 8007ab4:	4610      	mov	r0, r2
 8007ab6:	4798      	blx	r3
 8007ab8:	793a      	ldrb	r2, [r7, #4]
 8007aba:	4b14      	ldr	r3, [pc, #80]	; (8007b0c <shci_user_evt_proc+0x94>)
 8007abc:	701a      	strb	r2, [r3, #0]
 8007abe:	e002      	b.n	8007ac6 <shci_user_evt_proc+0x4e>
 8007ac0:	4b12      	ldr	r3, [pc, #72]	; (8007b0c <shci_user_evt_proc+0x94>)
 8007ac2:	2201      	movs	r2, #1
 8007ac4:	701a      	strb	r2, [r3, #0]
 8007ac6:	4b11      	ldr	r3, [pc, #68]	; (8007b0c <shci_user_evt_proc+0x94>)
 8007ac8:	781b      	ldrb	r3, [r3, #0]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d004      	beq.n	8007ad8 <shci_user_evt_proc+0x60>
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	f000 fa6d 	bl	8007fb0 <TL_MM_EvtDone>
 8007ad6:	e004      	b.n	8007ae2 <shci_user_evt_proc+0x6a>
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	4619      	mov	r1, r3
 8007adc:	480a      	ldr	r0, [pc, #40]	; (8007b08 <shci_user_evt_proc+0x90>)
 8007ade:	f000 fb85 	bl	80081ec <LST_insert_head>
 8007ae2:	4809      	ldr	r0, [pc, #36]	; (8007b08 <shci_user_evt_proc+0x90>)
 8007ae4:	f000 fb60 	bl	80081a8 <LST_is_empty>
 8007ae8:	4603      	mov	r3, r0
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d107      	bne.n	8007afe <shci_user_evt_proc+0x86>
 8007aee:	4b07      	ldr	r3, [pc, #28]	; (8007b0c <shci_user_evt_proc+0x94>)
 8007af0:	781b      	ldrb	r3, [r3, #0]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d003      	beq.n	8007afe <shci_user_evt_proc+0x86>
 8007af6:	4804      	ldr	r0, [pc, #16]	; (8007b08 <shci_user_evt_proc+0x90>)
 8007af8:	f7f9 f8de 	bl	8000cb8 <shci_notify_asynch_evt>
 8007afc:	bf00      	nop
 8007afe:	bf00      	nop
 8007b00:	3710      	adds	r7, #16
 8007b02:	46bd      	mov	sp, r7
 8007b04:	bd80      	pop	{r7, pc}
 8007b06:	bf00      	nop
 8007b08:	20000948 	.word	0x20000948
 8007b0c:	20000958 	.word	0x20000958
 8007b10:	20000ba8 	.word	0x20000ba8

08007b14 <shci_send>:
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b084      	sub	sp, #16
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	60ba      	str	r2, [r7, #8]
 8007b1c:	607b      	str	r3, [r7, #4]
 8007b1e:	4603      	mov	r3, r0
 8007b20:	81fb      	strh	r3, [r7, #14]
 8007b22:	460b      	mov	r3, r1
 8007b24:	737b      	strb	r3, [r7, #13]
 8007b26:	2000      	movs	r0, #0
 8007b28:	f000 f864 	bl	8007bf4 <Cmd_SetStatus>
 8007b2c:	4b16      	ldr	r3, [pc, #88]	; (8007b88 <shci_send+0x74>)
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	89fa      	ldrh	r2, [r7, #14]
 8007b32:	f8a3 2009 	strh.w	r2, [r3, #9]
 8007b36:	4b14      	ldr	r3, [pc, #80]	; (8007b88 <shci_send+0x74>)
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	7b7a      	ldrb	r2, [r7, #13]
 8007b3c:	72da      	strb	r2, [r3, #11]
 8007b3e:	4b12      	ldr	r3, [pc, #72]	; (8007b88 <shci_send+0x74>)
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	330c      	adds	r3, #12
 8007b44:	7b7a      	ldrb	r2, [r7, #13]
 8007b46:	68b9      	ldr	r1, [r7, #8]
 8007b48:	4618      	mov	r0, r3
 8007b4a:	f001 fc99 	bl	8009480 <memcpy>
 8007b4e:	4b0f      	ldr	r3, [pc, #60]	; (8007b8c <shci_send+0x78>)
 8007b50:	691b      	ldr	r3, [r3, #16]
 8007b52:	2100      	movs	r1, #0
 8007b54:	2000      	movs	r0, #0
 8007b56:	4798      	blx	r3
 8007b58:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8007b5c:	f7f9 f8c3 	bl	8000ce6 <shci_cmd_resp_wait>
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	f103 0008 	add.w	r0, r3, #8
 8007b66:	4b08      	ldr	r3, [pc, #32]	; (8007b88 <shci_send+0x74>)
 8007b68:	6819      	ldr	r1, [r3, #0]
 8007b6a:	4b07      	ldr	r3, [pc, #28]	; (8007b88 <shci_send+0x74>)
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	789b      	ldrb	r3, [r3, #2]
 8007b70:	3303      	adds	r3, #3
 8007b72:	461a      	mov	r2, r3
 8007b74:	f001 fc84 	bl	8009480 <memcpy>
 8007b78:	2001      	movs	r0, #1
 8007b7a:	f000 f83b 	bl	8007bf4 <Cmd_SetStatus>
 8007b7e:	bf00      	nop
 8007b80:	3710      	adds	r7, #16
 8007b82:	46bd      	mov	sp, r7
 8007b84:	bd80      	pop	{r7, pc}
 8007b86:	bf00      	nop
 8007b88:	20000954 	.word	0x20000954
 8007b8c:	20000ba8 	.word	0x20000ba8

08007b90 <TlInit>:
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b086      	sub	sp, #24
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
 8007b98:	4a10      	ldr	r2, [pc, #64]	; (8007bdc <TlInit+0x4c>)
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	6013      	str	r3, [r2, #0]
 8007b9e:	4810      	ldr	r0, [pc, #64]	; (8007be0 <TlInit+0x50>)
 8007ba0:	f000 faf2 	bl	8008188 <LST_init_head>
 8007ba4:	2001      	movs	r0, #1
 8007ba6:	f000 f825 	bl	8007bf4 <Cmd_SetStatus>
 8007baa:	4b0e      	ldr	r3, [pc, #56]	; (8007be4 <TlInit+0x54>)
 8007bac:	2201      	movs	r2, #1
 8007bae:	701a      	strb	r2, [r3, #0]
 8007bb0:	4b0d      	ldr	r3, [pc, #52]	; (8007be8 <TlInit+0x58>)
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d00c      	beq.n	8007bd2 <TlInit+0x42>
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	617b      	str	r3, [r7, #20]
 8007bbc:	4b0b      	ldr	r3, [pc, #44]	; (8007bec <TlInit+0x5c>)
 8007bbe:	60fb      	str	r3, [r7, #12]
 8007bc0:	4b0b      	ldr	r3, [pc, #44]	; (8007bf0 <TlInit+0x60>)
 8007bc2:	613b      	str	r3, [r7, #16]
 8007bc4:	4b08      	ldr	r3, [pc, #32]	; (8007be8 <TlInit+0x58>)
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	f107 020c 	add.w	r2, r7, #12
 8007bcc:	4610      	mov	r0, r2
 8007bce:	4798      	blx	r3
 8007bd0:	bf00      	nop
 8007bd2:	bf00      	nop
 8007bd4:	3718      	adds	r7, #24
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	bd80      	pop	{r7, pc}
 8007bda:	bf00      	nop
 8007bdc:	20000954 	.word	0x20000954
 8007be0:	20000948 	.word	0x20000948
 8007be4:	20000958 	.word	0x20000958
 8007be8:	20000ba8 	.word	0x20000ba8
 8007bec:	08007c45 	.word	0x08007c45
 8007bf0:	08007c5d 	.word	0x08007c5d

08007bf4 <Cmd_SetStatus>:
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	b082      	sub	sp, #8
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	4603      	mov	r3, r0
 8007bfc:	71fb      	strb	r3, [r7, #7]
 8007bfe:	79fb      	ldrb	r3, [r7, #7]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d10b      	bne.n	8007c1c <Cmd_SetStatus+0x28>
 8007c04:	4b0d      	ldr	r3, [pc, #52]	; (8007c3c <Cmd_SetStatus+0x48>)
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d003      	beq.n	8007c14 <Cmd_SetStatus+0x20>
 8007c0c:	4b0b      	ldr	r3, [pc, #44]	; (8007c3c <Cmd_SetStatus+0x48>)
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	2000      	movs	r0, #0
 8007c12:	4798      	blx	r3
 8007c14:	4b0a      	ldr	r3, [pc, #40]	; (8007c40 <Cmd_SetStatus+0x4c>)
 8007c16:	2200      	movs	r2, #0
 8007c18:	701a      	strb	r2, [r3, #0]
 8007c1a:	e00b      	b.n	8007c34 <Cmd_SetStatus+0x40>
 8007c1c:	4b08      	ldr	r3, [pc, #32]	; (8007c40 <Cmd_SetStatus+0x4c>)
 8007c1e:	2201      	movs	r2, #1
 8007c20:	701a      	strb	r2, [r3, #0]
 8007c22:	4b06      	ldr	r3, [pc, #24]	; (8007c3c <Cmd_SetStatus+0x48>)
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d004      	beq.n	8007c34 <Cmd_SetStatus+0x40>
 8007c2a:	4b04      	ldr	r3, [pc, #16]	; (8007c3c <Cmd_SetStatus+0x48>)
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	2001      	movs	r0, #1
 8007c30:	4798      	blx	r3
 8007c32:	bf00      	nop
 8007c34:	bf00      	nop
 8007c36:	3708      	adds	r7, #8
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	bd80      	pop	{r7, pc}
 8007c3c:	20000bc8 	.word	0x20000bc8
 8007c40:	20000950 	.word	0x20000950

08007c44 <TlCmdEvtReceived>:
 8007c44:	b580      	push	{r7, lr}
 8007c46:	b082      	sub	sp, #8
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
 8007c4c:	2000      	movs	r0, #0
 8007c4e:	f7f9 f83f 	bl	8000cd0 <shci_cmd_resp_release>
 8007c52:	bf00      	nop
 8007c54:	3708      	adds	r7, #8
 8007c56:	46bd      	mov	sp, r7
 8007c58:	bd80      	pop	{r7, pc}
	...

08007c5c <TlUserEvtReceived>:
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	b082      	sub	sp, #8
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
 8007c64:	6879      	ldr	r1, [r7, #4]
 8007c66:	4805      	ldr	r0, [pc, #20]	; (8007c7c <TlUserEvtReceived+0x20>)
 8007c68:	f000 fae6 	bl	8008238 <LST_insert_tail>
 8007c6c:	4803      	ldr	r0, [pc, #12]	; (8007c7c <TlUserEvtReceived+0x20>)
 8007c6e:	f7f9 f823 	bl	8000cb8 <shci_notify_asynch_evt>
 8007c72:	bf00      	nop
 8007c74:	3708      	adds	r7, #8
 8007c76:	46bd      	mov	sp, r7
 8007c78:	bd80      	pop	{r7, pc}
 8007c7a:	bf00      	nop
 8007c7c:	20000948 	.word	0x20000948

08007c80 <shci_register_io_bus>:
 8007c80:	b480      	push	{r7}
 8007c82:	b083      	sub	sp, #12
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	4a05      	ldr	r2, [pc, #20]	; (8007ca0 <shci_register_io_bus+0x20>)
 8007c8c:	601a      	str	r2, [r3, #0]
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	4a04      	ldr	r2, [pc, #16]	; (8007ca4 <shci_register_io_bus+0x24>)
 8007c92:	611a      	str	r2, [r3, #16]
 8007c94:	bf00      	nop
 8007c96:	370c      	adds	r7, #12
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9e:	4770      	bx	lr
 8007ca0:	08007e3d 	.word	0x08007e3d
 8007ca4:	08007e91 	.word	0x08007e91

08007ca8 <TL_Enable>:
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	af00      	add	r7, sp, #0
 8007cac:	f001 f86c 	bl	8008d88 <HW_IPCC_Enable>
 8007cb0:	bf00      	nop
 8007cb2:	bd80      	pop	{r7, pc}

08007cb4 <TL_Init>:
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	af00      	add	r7, sp, #0
 8007cb8:	4b10      	ldr	r3, [pc, #64]	; (8007cfc <TL_Init+0x48>)
 8007cba:	4a11      	ldr	r2, [pc, #68]	; (8007d00 <TL_Init+0x4c>)
 8007cbc:	601a      	str	r2, [r3, #0]
 8007cbe:	4b0f      	ldr	r3, [pc, #60]	; (8007cfc <TL_Init+0x48>)
 8007cc0:	4a10      	ldr	r2, [pc, #64]	; (8007d04 <TL_Init+0x50>)
 8007cc2:	605a      	str	r2, [r3, #4]
 8007cc4:	4b0d      	ldr	r3, [pc, #52]	; (8007cfc <TL_Init+0x48>)
 8007cc6:	4a10      	ldr	r2, [pc, #64]	; (8007d08 <TL_Init+0x54>)
 8007cc8:	609a      	str	r2, [r3, #8]
 8007cca:	4b0c      	ldr	r3, [pc, #48]	; (8007cfc <TL_Init+0x48>)
 8007ccc:	4a0f      	ldr	r2, [pc, #60]	; (8007d0c <TL_Init+0x58>)
 8007cce:	621a      	str	r2, [r3, #32]
 8007cd0:	4b0a      	ldr	r3, [pc, #40]	; (8007cfc <TL_Init+0x48>)
 8007cd2:	4a0f      	ldr	r2, [pc, #60]	; (8007d10 <TL_Init+0x5c>)
 8007cd4:	625a      	str	r2, [r3, #36]	; 0x24
 8007cd6:	4b09      	ldr	r3, [pc, #36]	; (8007cfc <TL_Init+0x48>)
 8007cd8:	4a0e      	ldr	r2, [pc, #56]	; (8007d14 <TL_Init+0x60>)
 8007cda:	60da      	str	r2, [r3, #12]
 8007cdc:	4b07      	ldr	r3, [pc, #28]	; (8007cfc <TL_Init+0x48>)
 8007cde:	4a0e      	ldr	r2, [pc, #56]	; (8007d18 <TL_Init+0x64>)
 8007ce0:	611a      	str	r2, [r3, #16]
 8007ce2:	4b06      	ldr	r3, [pc, #24]	; (8007cfc <TL_Init+0x48>)
 8007ce4:	4a0d      	ldr	r2, [pc, #52]	; (8007d1c <TL_Init+0x68>)
 8007ce6:	615a      	str	r2, [r3, #20]
 8007ce8:	4b04      	ldr	r3, [pc, #16]	; (8007cfc <TL_Init+0x48>)
 8007cea:	4a0d      	ldr	r2, [pc, #52]	; (8007d20 <TL_Init+0x6c>)
 8007cec:	619a      	str	r2, [r3, #24]
 8007cee:	4b03      	ldr	r3, [pc, #12]	; (8007cfc <TL_Init+0x48>)
 8007cf0:	4a0c      	ldr	r2, [pc, #48]	; (8007d24 <TL_Init+0x70>)
 8007cf2:	61da      	str	r2, [r3, #28]
 8007cf4:	f001 f85c 	bl	8008db0 <HW_IPCC_Init>
 8007cf8:	bf00      	nop
 8007cfa:	bd80      	pop	{r7, pc}
 8007cfc:	20030000 	.word	0x20030000
 8007d00:	20030028 	.word	0x20030028
 8007d04:	20030048 	.word	0x20030048
 8007d08:	20030058 	.word	0x20030058
 8007d0c:	20030068 	.word	0x20030068
 8007d10:	20030070 	.word	0x20030070
 8007d14:	20030078 	.word	0x20030078
 8007d18:	20030080 	.word	0x20030080
 8007d1c:	2003009c 	.word	0x2003009c
 8007d20:	200300a0 	.word	0x200300a0
 8007d24:	200300ac 	.word	0x200300ac

08007d28 <TL_BLE_Init>:
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	b084      	sub	sp, #16
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	60fb      	str	r3, [r7, #12]
 8007d34:	4811      	ldr	r0, [pc, #68]	; (8007d7c <TL_BLE_Init+0x54>)
 8007d36:	f000 fa27 	bl	8008188 <LST_init_head>
 8007d3a:	4b11      	ldr	r3, [pc, #68]	; (8007d80 <TL_BLE_Init+0x58>)
 8007d3c:	685b      	ldr	r3, [r3, #4]
 8007d3e:	60bb      	str	r3, [r7, #8]
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	689a      	ldr	r2, [r3, #8]
 8007d44:	68bb      	ldr	r3, [r7, #8]
 8007d46:	601a      	str	r2, [r3, #0]
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	68da      	ldr	r2, [r3, #12]
 8007d4c:	68bb      	ldr	r3, [r7, #8]
 8007d4e:	60da      	str	r2, [r3, #12]
 8007d50:	68bb      	ldr	r3, [r7, #8]
 8007d52:	4a0c      	ldr	r2, [pc, #48]	; (8007d84 <TL_BLE_Init+0x5c>)
 8007d54:	605a      	str	r2, [r3, #4]
 8007d56:	68bb      	ldr	r3, [r7, #8]
 8007d58:	4a08      	ldr	r2, [pc, #32]	; (8007d7c <TL_BLE_Init+0x54>)
 8007d5a:	609a      	str	r2, [r3, #8]
 8007d5c:	f001 f83e 	bl	8008ddc <HW_IPCC_BLE_Init>
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	4a08      	ldr	r2, [pc, #32]	; (8007d88 <TL_BLE_Init+0x60>)
 8007d66:	6013      	str	r3, [r2, #0]
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	685b      	ldr	r3, [r3, #4]
 8007d6c:	4a07      	ldr	r2, [pc, #28]	; (8007d8c <TL_BLE_Init+0x64>)
 8007d6e:	6013      	str	r3, [r2, #0]
 8007d70:	2300      	movs	r3, #0
 8007d72:	4618      	mov	r0, r3
 8007d74:	3710      	adds	r7, #16
 8007d76:	46bd      	mov	sp, r7
 8007d78:	bd80      	pop	{r7, pc}
 8007d7a:	bf00      	nop
 8007d7c:	200300c8 	.word	0x200300c8
 8007d80:	20030000 	.word	0x20030000
 8007d84:	20000900 	.word	0x20000900
 8007d88:	20000bd4 	.word	0x20000bd4
 8007d8c:	20000bd8 	.word	0x20000bd8

08007d90 <TL_BLE_SendCmd>:
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b082      	sub	sp, #8
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]
 8007d98:	460b      	mov	r3, r1
 8007d9a:	807b      	strh	r3, [r7, #2]
 8007d9c:	4b09      	ldr	r3, [pc, #36]	; (8007dc4 <TL_BLE_SendCmd+0x34>)
 8007d9e:	685b      	ldr	r3, [r3, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	2201      	movs	r2, #1
 8007da4:	721a      	strb	r2, [r3, #8]
 8007da6:	4b07      	ldr	r3, [pc, #28]	; (8007dc4 <TL_BLE_SendCmd+0x34>)
 8007da8:	685b      	ldr	r3, [r3, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	4619      	mov	r1, r3
 8007dae:	2001      	movs	r0, #1
 8007db0:	f000 f96c 	bl	800808c <OutputDbgTrace>
 8007db4:	f001 f81c 	bl	8008df0 <HW_IPCC_BLE_SendCmd>
 8007db8:	2300      	movs	r3, #0
 8007dba:	4618      	mov	r0, r3
 8007dbc:	3708      	adds	r7, #8
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	bd80      	pop	{r7, pc}
 8007dc2:	bf00      	nop
 8007dc4:	20030000 	.word	0x20030000

08007dc8 <HW_IPCC_BLE_RxEvtNot>:
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	b082      	sub	sp, #8
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	e01c      	b.n	8007e0a <HW_IPCC_BLE_RxEvtNot+0x42>
 8007dd0:	1d3b      	adds	r3, r7, #4
 8007dd2:	4619      	mov	r1, r3
 8007dd4:	4812      	ldr	r0, [pc, #72]	; (8007e20 <HW_IPCC_BLE_RxEvtNot+0x58>)
 8007dd6:	f000 fa76 	bl	80082c6 <LST_remove_head>
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	7a5b      	ldrb	r3, [r3, #9]
 8007dde:	2b0f      	cmp	r3, #15
 8007de0:	d003      	beq.n	8007dea <HW_IPCC_BLE_RxEvtNot+0x22>
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	7a5b      	ldrb	r3, [r3, #9]
 8007de6:	2b0e      	cmp	r3, #14
 8007de8:	d105      	bne.n	8007df6 <HW_IPCC_BLE_RxEvtNot+0x2e>
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	4619      	mov	r1, r3
 8007dee:	2002      	movs	r0, #2
 8007df0:	f000 f94c 	bl	800808c <OutputDbgTrace>
 8007df4:	e004      	b.n	8007e00 <HW_IPCC_BLE_RxEvtNot+0x38>
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	4619      	mov	r1, r3
 8007dfa:	2003      	movs	r0, #3
 8007dfc:	f000 f946 	bl	800808c <OutputDbgTrace>
 8007e00:	4b08      	ldr	r3, [pc, #32]	; (8007e24 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	687a      	ldr	r2, [r7, #4]
 8007e06:	4610      	mov	r0, r2
 8007e08:	4798      	blx	r3
 8007e0a:	4805      	ldr	r0, [pc, #20]	; (8007e20 <HW_IPCC_BLE_RxEvtNot+0x58>)
 8007e0c:	f000 f9cc 	bl	80081a8 <LST_is_empty>
 8007e10:	4603      	mov	r3, r0
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d0dc      	beq.n	8007dd0 <HW_IPCC_BLE_RxEvtNot+0x8>
 8007e16:	bf00      	nop
 8007e18:	3708      	adds	r7, #8
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	bd80      	pop	{r7, pc}
 8007e1e:	bf00      	nop
 8007e20:	200300c8 	.word	0x200300c8
 8007e24:	20000bd4 	.word	0x20000bd4

08007e28 <HW_IPCC_BLE_AclDataAckNot>:
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	af00      	add	r7, sp, #0
 8007e2c:	4b02      	ldr	r3, [pc, #8]	; (8007e38 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	4798      	blx	r3
 8007e32:	bf00      	nop
 8007e34:	bd80      	pop	{r7, pc}
 8007e36:	bf00      	nop
 8007e38:	20000bd8 	.word	0x20000bd8

08007e3c <TL_SYS_Init>:
 8007e3c:	b580      	push	{r7, lr}
 8007e3e:	b084      	sub	sp, #16
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	60fb      	str	r3, [r7, #12]
 8007e48:	480d      	ldr	r0, [pc, #52]	; (8007e80 <TL_SYS_Init+0x44>)
 8007e4a:	f000 f99d 	bl	8008188 <LST_init_head>
 8007e4e:	4b0d      	ldr	r3, [pc, #52]	; (8007e84 <TL_SYS_Init+0x48>)
 8007e50:	68db      	ldr	r3, [r3, #12]
 8007e52:	60bb      	str	r3, [r7, #8]
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	689a      	ldr	r2, [r3, #8]
 8007e58:	68bb      	ldr	r3, [r7, #8]
 8007e5a:	601a      	str	r2, [r3, #0]
 8007e5c:	68bb      	ldr	r3, [r7, #8]
 8007e5e:	4a08      	ldr	r2, [pc, #32]	; (8007e80 <TL_SYS_Init+0x44>)
 8007e60:	605a      	str	r2, [r3, #4]
 8007e62:	f000 ffe7 	bl	8008e34 <HW_IPCC_SYS_Init>
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	4a07      	ldr	r2, [pc, #28]	; (8007e88 <TL_SYS_Init+0x4c>)
 8007e6c:	6013      	str	r3, [r2, #0]
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	685b      	ldr	r3, [r3, #4]
 8007e72:	4a06      	ldr	r2, [pc, #24]	; (8007e8c <TL_SYS_Init+0x50>)
 8007e74:	6013      	str	r3, [r2, #0]
 8007e76:	2300      	movs	r3, #0
 8007e78:	4618      	mov	r0, r3
 8007e7a:	3710      	adds	r7, #16
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	bd80      	pop	{r7, pc}
 8007e80:	200300d0 	.word	0x200300d0
 8007e84:	20030000 	.word	0x20030000
 8007e88:	20000bdc 	.word	0x20000bdc
 8007e8c:	20000be0 	.word	0x20000be0

08007e90 <TL_SYS_SendCmd>:
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b082      	sub	sp, #8
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
 8007e98:	460b      	mov	r3, r1
 8007e9a:	807b      	strh	r3, [r7, #2]
 8007e9c:	4b09      	ldr	r3, [pc, #36]	; (8007ec4 <TL_SYS_SendCmd+0x34>)
 8007e9e:	68db      	ldr	r3, [r3, #12]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	2210      	movs	r2, #16
 8007ea4:	721a      	strb	r2, [r3, #8]
 8007ea6:	4b07      	ldr	r3, [pc, #28]	; (8007ec4 <TL_SYS_SendCmd+0x34>)
 8007ea8:	68db      	ldr	r3, [r3, #12]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	4619      	mov	r1, r3
 8007eae:	2004      	movs	r0, #4
 8007eb0:	f000 f8ec 	bl	800808c <OutputDbgTrace>
 8007eb4:	f000 ffc8 	bl	8008e48 <HW_IPCC_SYS_SendCmd>
 8007eb8:	2300      	movs	r3, #0
 8007eba:	4618      	mov	r0, r3
 8007ebc:	3708      	adds	r7, #8
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	bd80      	pop	{r7, pc}
 8007ec2:	bf00      	nop
 8007ec4:	20030000 	.word	0x20030000

08007ec8 <HW_IPCC_SYS_CmdEvtNot>:
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	af00      	add	r7, sp, #0
 8007ecc:	4b07      	ldr	r3, [pc, #28]	; (8007eec <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8007ece:	68db      	ldr	r3, [r3, #12]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	4619      	mov	r1, r3
 8007ed4:	2005      	movs	r0, #5
 8007ed6:	f000 f8d9 	bl	800808c <OutputDbgTrace>
 8007eda:	4b05      	ldr	r3, [pc, #20]	; (8007ef0 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	4a03      	ldr	r2, [pc, #12]	; (8007eec <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8007ee0:	68d2      	ldr	r2, [r2, #12]
 8007ee2:	6812      	ldr	r2, [r2, #0]
 8007ee4:	4610      	mov	r0, r2
 8007ee6:	4798      	blx	r3
 8007ee8:	bf00      	nop
 8007eea:	bd80      	pop	{r7, pc}
 8007eec:	20030000 	.word	0x20030000
 8007ef0:	20000bdc 	.word	0x20000bdc

08007ef4 <HW_IPCC_SYS_EvtNot>:
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b082      	sub	sp, #8
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	e00e      	b.n	8007f1a <HW_IPCC_SYS_EvtNot+0x26>
 8007efc:	1d3b      	adds	r3, r7, #4
 8007efe:	4619      	mov	r1, r3
 8007f00:	480b      	ldr	r0, [pc, #44]	; (8007f30 <HW_IPCC_SYS_EvtNot+0x3c>)
 8007f02:	f000 f9e0 	bl	80082c6 <LST_remove_head>
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	4619      	mov	r1, r3
 8007f0a:	2006      	movs	r0, #6
 8007f0c:	f000 f8be 	bl	800808c <OutputDbgTrace>
 8007f10:	4b08      	ldr	r3, [pc, #32]	; (8007f34 <HW_IPCC_SYS_EvtNot+0x40>)
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	687a      	ldr	r2, [r7, #4]
 8007f16:	4610      	mov	r0, r2
 8007f18:	4798      	blx	r3
 8007f1a:	4805      	ldr	r0, [pc, #20]	; (8007f30 <HW_IPCC_SYS_EvtNot+0x3c>)
 8007f1c:	f000 f944 	bl	80081a8 <LST_is_empty>
 8007f20:	4603      	mov	r3, r0
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d0ea      	beq.n	8007efc <HW_IPCC_SYS_EvtNot+0x8>
 8007f26:	bf00      	nop
 8007f28:	3708      	adds	r7, #8
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	bd80      	pop	{r7, pc}
 8007f2e:	bf00      	nop
 8007f30:	200300d0 	.word	0x200300d0
 8007f34:	20000be0 	.word	0x20000be0

08007f38 <TL_MM_Init>:
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b082      	sub	sp, #8
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
 8007f40:	4817      	ldr	r0, [pc, #92]	; (8007fa0 <TL_MM_Init+0x68>)
 8007f42:	f000 f921 	bl	8008188 <LST_init_head>
 8007f46:	4817      	ldr	r0, [pc, #92]	; (8007fa4 <TL_MM_Init+0x6c>)
 8007f48:	f000 f91e 	bl	8008188 <LST_init_head>
 8007f4c:	4b16      	ldr	r3, [pc, #88]	; (8007fa8 <TL_MM_Init+0x70>)
 8007f4e:	691b      	ldr	r3, [r3, #16]
 8007f50:	4a16      	ldr	r2, [pc, #88]	; (8007fac <TL_MM_Init+0x74>)
 8007f52:	6013      	str	r3, [r2, #0]
 8007f54:	4b15      	ldr	r3, [pc, #84]	; (8007fac <TL_MM_Init+0x74>)
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	687a      	ldr	r2, [r7, #4]
 8007f5a:	6892      	ldr	r2, [r2, #8]
 8007f5c:	609a      	str	r2, [r3, #8]
 8007f5e:	4b13      	ldr	r3, [pc, #76]	; (8007fac <TL_MM_Init+0x74>)
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	687a      	ldr	r2, [r7, #4]
 8007f64:	68d2      	ldr	r2, [r2, #12]
 8007f66:	60da      	str	r2, [r3, #12]
 8007f68:	4b10      	ldr	r3, [pc, #64]	; (8007fac <TL_MM_Init+0x74>)
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	4a0c      	ldr	r2, [pc, #48]	; (8007fa0 <TL_MM_Init+0x68>)
 8007f6e:	611a      	str	r2, [r3, #16]
 8007f70:	4b0e      	ldr	r3, [pc, #56]	; (8007fac <TL_MM_Init+0x74>)
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	687a      	ldr	r2, [r7, #4]
 8007f76:	6812      	ldr	r2, [r2, #0]
 8007f78:	601a      	str	r2, [r3, #0]
 8007f7a:	4b0c      	ldr	r3, [pc, #48]	; (8007fac <TL_MM_Init+0x74>)
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	687a      	ldr	r2, [r7, #4]
 8007f80:	6852      	ldr	r2, [r2, #4]
 8007f82:	605a      	str	r2, [r3, #4]
 8007f84:	4b09      	ldr	r3, [pc, #36]	; (8007fac <TL_MM_Init+0x74>)
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	687a      	ldr	r2, [r7, #4]
 8007f8a:	6912      	ldr	r2, [r2, #16]
 8007f8c:	615a      	str	r2, [r3, #20]
 8007f8e:	4b07      	ldr	r3, [pc, #28]	; (8007fac <TL_MM_Init+0x74>)
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	687a      	ldr	r2, [r7, #4]
 8007f94:	6952      	ldr	r2, [r2, #20]
 8007f96:	619a      	str	r2, [r3, #24]
 8007f98:	bf00      	nop
 8007f9a:	3708      	adds	r7, #8
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	bd80      	pop	{r7, pc}
 8007fa0:	200300b8 	.word	0x200300b8
 8007fa4:	20000bcc 	.word	0x20000bcc
 8007fa8:	20030000 	.word	0x20030000
 8007fac:	20000be4 	.word	0x20000be4

08007fb0 <TL_MM_EvtDone>:
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b082      	sub	sp, #8
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
 8007fb8:	6879      	ldr	r1, [r7, #4]
 8007fba:	4807      	ldr	r0, [pc, #28]	; (8007fd8 <TL_MM_EvtDone+0x28>)
 8007fbc:	f000 f93c 	bl	8008238 <LST_insert_tail>
 8007fc0:	6879      	ldr	r1, [r7, #4]
 8007fc2:	2000      	movs	r0, #0
 8007fc4:	f000 f862 	bl	800808c <OutputDbgTrace>
 8007fc8:	4804      	ldr	r0, [pc, #16]	; (8007fdc <TL_MM_EvtDone+0x2c>)
 8007fca:	f000 ff63 	bl	8008e94 <HW_IPCC_MM_SendFreeBuf>
 8007fce:	bf00      	nop
 8007fd0:	3708      	adds	r7, #8
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	bd80      	pop	{r7, pc}
 8007fd6:	bf00      	nop
 8007fd8:	20000bcc 	.word	0x20000bcc
 8007fdc:	08007fe1 	.word	0x08007fe1

08007fe0 <SendFreeBuf>:
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	b082      	sub	sp, #8
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	e00c      	b.n	8008002 <SendFreeBuf+0x22>
 8007fe8:	1d3b      	adds	r3, r7, #4
 8007fea:	4619      	mov	r1, r3
 8007fec:	480a      	ldr	r0, [pc, #40]	; (8008018 <SendFreeBuf+0x38>)
 8007fee:	f000 f96a 	bl	80082c6 <LST_remove_head>
 8007ff2:	4b0a      	ldr	r3, [pc, #40]	; (800801c <SendFreeBuf+0x3c>)
 8007ff4:	691b      	ldr	r3, [r3, #16]
 8007ff6:	691b      	ldr	r3, [r3, #16]
 8007ff8:	687a      	ldr	r2, [r7, #4]
 8007ffa:	4611      	mov	r1, r2
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	f000 f91b 	bl	8008238 <LST_insert_tail>
 8008002:	4805      	ldr	r0, [pc, #20]	; (8008018 <SendFreeBuf+0x38>)
 8008004:	f000 f8d0 	bl	80081a8 <LST_is_empty>
 8008008:	4603      	mov	r3, r0
 800800a:	2b00      	cmp	r3, #0
 800800c:	d0ec      	beq.n	8007fe8 <SendFreeBuf+0x8>
 800800e:	bf00      	nop
 8008010:	3708      	adds	r7, #8
 8008012:	46bd      	mov	sp, r7
 8008014:	bd80      	pop	{r7, pc}
 8008016:	bf00      	nop
 8008018:	20000bcc 	.word	0x20000bcc
 800801c:	20030000 	.word	0x20030000

08008020 <TL_TRACES_Init>:
 8008020:	b580      	push	{r7, lr}
 8008022:	af00      	add	r7, sp, #0
 8008024:	4805      	ldr	r0, [pc, #20]	; (800803c <TL_TRACES_Init+0x1c>)
 8008026:	f000 f8af 	bl	8008188 <LST_init_head>
 800802a:	4b05      	ldr	r3, [pc, #20]	; (8008040 <TL_TRACES_Init+0x20>)
 800802c:	695b      	ldr	r3, [r3, #20]
 800802e:	4a03      	ldr	r2, [pc, #12]	; (800803c <TL_TRACES_Init+0x1c>)
 8008030:	601a      	str	r2, [r3, #0]
 8008032:	f000 ff65 	bl	8008f00 <HW_IPCC_TRACES_Init>
 8008036:	bf00      	nop
 8008038:	bd80      	pop	{r7, pc}
 800803a:	bf00      	nop
 800803c:	200300c0 	.word	0x200300c0
 8008040:	20030000 	.word	0x20030000

08008044 <HW_IPCC_TRACES_EvtNot>:
 8008044:	b580      	push	{r7, lr}
 8008046:	b082      	sub	sp, #8
 8008048:	af00      	add	r7, sp, #0
 800804a:	e008      	b.n	800805e <HW_IPCC_TRACES_EvtNot+0x1a>
 800804c:	1d3b      	adds	r3, r7, #4
 800804e:	4619      	mov	r1, r3
 8008050:	4808      	ldr	r0, [pc, #32]	; (8008074 <HW_IPCC_TRACES_EvtNot+0x30>)
 8008052:	f000 f938 	bl	80082c6 <LST_remove_head>
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	4618      	mov	r0, r3
 800805a:	f000 f80d 	bl	8008078 <TL_TRACES_EvtReceived>
 800805e:	4805      	ldr	r0, [pc, #20]	; (8008074 <HW_IPCC_TRACES_EvtNot+0x30>)
 8008060:	f000 f8a2 	bl	80081a8 <LST_is_empty>
 8008064:	4603      	mov	r3, r0
 8008066:	2b00      	cmp	r3, #0
 8008068:	d0f0      	beq.n	800804c <HW_IPCC_TRACES_EvtNot+0x8>
 800806a:	bf00      	nop
 800806c:	3708      	adds	r7, #8
 800806e:	46bd      	mov	sp, r7
 8008070:	bd80      	pop	{r7, pc}
 8008072:	bf00      	nop
 8008074:	200300c0 	.word	0x200300c0

08008078 <TL_TRACES_EvtReceived>:
 8008078:	b480      	push	{r7}
 800807a:	b083      	sub	sp, #12
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
 8008080:	bf00      	nop
 8008082:	370c      	adds	r7, #12
 8008084:	46bd      	mov	sp, r7
 8008086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808a:	4770      	bx	lr

0800808c <OutputDbgTrace>:
 800808c:	b480      	push	{r7}
 800808e:	b085      	sub	sp, #20
 8008090:	af00      	add	r7, sp, #0
 8008092:	4603      	mov	r3, r0
 8008094:	6039      	str	r1, [r7, #0]
 8008096:	71fb      	strb	r3, [r7, #7]
 8008098:	79fb      	ldrb	r3, [r7, #7]
 800809a:	2b06      	cmp	r3, #6
 800809c:	d845      	bhi.n	800812a <OutputDbgTrace+0x9e>
 800809e:	a201      	add	r2, pc, #4	; (adr r2, 80080a4 <OutputDbgTrace+0x18>)
 80080a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080a4:	080080c1 	.word	0x080080c1
 80080a8:	080080e5 	.word	0x080080e5
 80080ac:	080080eb 	.word	0x080080eb
 80080b0:	080080ff 	.word	0x080080ff
 80080b4:	0800810b 	.word	0x0800810b
 80080b8:	08008111 	.word	0x08008111
 80080bc:	0800811f 	.word	0x0800811f
 80080c0:	683b      	ldr	r3, [r7, #0]
 80080c2:	60fb      	str	r3, [r7, #12]
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	7a5b      	ldrb	r3, [r3, #9]
 80080c8:	2bff      	cmp	r3, #255	; 0xff
 80080ca:	d005      	beq.n	80080d8 <OutputDbgTrace+0x4c>
 80080cc:	2bff      	cmp	r3, #255	; 0xff
 80080ce:	dc05      	bgt.n	80080dc <OutputDbgTrace+0x50>
 80080d0:	2b0e      	cmp	r3, #14
 80080d2:	d005      	beq.n	80080e0 <OutputDbgTrace+0x54>
 80080d4:	2b0f      	cmp	r3, #15
 80080d6:	e001      	b.n	80080dc <OutputDbgTrace+0x50>
 80080d8:	bf00      	nop
 80080da:	e027      	b.n	800812c <OutputDbgTrace+0xa0>
 80080dc:	bf00      	nop
 80080de:	e025      	b.n	800812c <OutputDbgTrace+0xa0>
 80080e0:	bf00      	nop
 80080e2:	e023      	b.n	800812c <OutputDbgTrace+0xa0>
 80080e4:	683b      	ldr	r3, [r7, #0]
 80080e6:	60bb      	str	r3, [r7, #8]
 80080e8:	e020      	b.n	800812c <OutputDbgTrace+0xa0>
 80080ea:	683b      	ldr	r3, [r7, #0]
 80080ec:	60fb      	str	r3, [r7, #12]
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	7a5b      	ldrb	r3, [r3, #9]
 80080f2:	2b0e      	cmp	r3, #14
 80080f4:	d001      	beq.n	80080fa <OutputDbgTrace+0x6e>
 80080f6:	2b0f      	cmp	r3, #15
 80080f8:	e000      	b.n	80080fc <OutputDbgTrace+0x70>
 80080fa:	bf00      	nop
 80080fc:	e016      	b.n	800812c <OutputDbgTrace+0xa0>
 80080fe:	683b      	ldr	r3, [r7, #0]
 8008100:	60fb      	str	r3, [r7, #12]
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	7a5b      	ldrb	r3, [r3, #9]
 8008106:	2bff      	cmp	r3, #255	; 0xff
 8008108:	e010      	b.n	800812c <OutputDbgTrace+0xa0>
 800810a:	683b      	ldr	r3, [r7, #0]
 800810c:	60bb      	str	r3, [r7, #8]
 800810e:	e00d      	b.n	800812c <OutputDbgTrace+0xa0>
 8008110:	683b      	ldr	r3, [r7, #0]
 8008112:	60fb      	str	r3, [r7, #12]
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	7a5b      	ldrb	r3, [r3, #9]
 8008118:	2b0e      	cmp	r3, #14
 800811a:	bf00      	nop
 800811c:	e006      	b.n	800812c <OutputDbgTrace+0xa0>
 800811e:	683b      	ldr	r3, [r7, #0]
 8008120:	60fb      	str	r3, [r7, #12]
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	7a5b      	ldrb	r3, [r3, #9]
 8008126:	2bff      	cmp	r3, #255	; 0xff
 8008128:	e000      	b.n	800812c <OutputDbgTrace+0xa0>
 800812a:	bf00      	nop
 800812c:	bf00      	nop
 800812e:	3714      	adds	r7, #20
 8008130:	46bd      	mov	sp, r7
 8008132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008136:	4770      	bx	lr

08008138 <OTP_Read>:
 8008138:	b480      	push	{r7}
 800813a:	b085      	sub	sp, #20
 800813c:	af00      	add	r7, sp, #0
 800813e:	4603      	mov	r3, r0
 8008140:	71fb      	strb	r3, [r7, #7]
 8008142:	4b0f      	ldr	r3, [pc, #60]	; (8008180 <OTP_Read+0x48>)
 8008144:	60fb      	str	r3, [r7, #12]
 8008146:	e002      	b.n	800814e <OTP_Read+0x16>
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	3b08      	subs	r3, #8
 800814c:	60fb      	str	r3, [r7, #12]
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	3307      	adds	r3, #7
 8008152:	781b      	ldrb	r3, [r3, #0]
 8008154:	79fa      	ldrb	r2, [r7, #7]
 8008156:	429a      	cmp	r2, r3
 8008158:	d003      	beq.n	8008162 <OTP_Read+0x2a>
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	4a09      	ldr	r2, [pc, #36]	; (8008184 <OTP_Read+0x4c>)
 800815e:	4293      	cmp	r3, r2
 8008160:	d1f2      	bne.n	8008148 <OTP_Read+0x10>
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	3307      	adds	r3, #7
 8008166:	781b      	ldrb	r3, [r3, #0]
 8008168:	79fa      	ldrb	r2, [r7, #7]
 800816a:	429a      	cmp	r2, r3
 800816c:	d001      	beq.n	8008172 <OTP_Read+0x3a>
 800816e:	2300      	movs	r3, #0
 8008170:	60fb      	str	r3, [r7, #12]
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	4618      	mov	r0, r3
 8008176:	3714      	adds	r7, #20
 8008178:	46bd      	mov	sp, r7
 800817a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817e:	4770      	bx	lr
 8008180:	1fff73f8 	.word	0x1fff73f8
 8008184:	1fff7000 	.word	0x1fff7000

08008188 <LST_init_head>:
 8008188:	b480      	push	{r7}
 800818a:	b083      	sub	sp, #12
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	687a      	ldr	r2, [r7, #4]
 8008194:	601a      	str	r2, [r3, #0]
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	687a      	ldr	r2, [r7, #4]
 800819a:	605a      	str	r2, [r3, #4]
 800819c:	bf00      	nop
 800819e:	370c      	adds	r7, #12
 80081a0:	46bd      	mov	sp, r7
 80081a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a6:	4770      	bx	lr

080081a8 <LST_is_empty>:
 80081a8:	b480      	push	{r7}
 80081aa:	b087      	sub	sp, #28
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
 80081b0:	f3ef 8310 	mrs	r3, PRIMASK
 80081b4:	60fb      	str	r3, [r7, #12]
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	613b      	str	r3, [r7, #16]
 80081ba:	b672      	cpsid	i
 80081bc:	bf00      	nop
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	687a      	ldr	r2, [r7, #4]
 80081c4:	429a      	cmp	r2, r3
 80081c6:	d102      	bne.n	80081ce <LST_is_empty+0x26>
 80081c8:	2301      	movs	r3, #1
 80081ca:	75fb      	strb	r3, [r7, #23]
 80081cc:	e001      	b.n	80081d2 <LST_is_empty+0x2a>
 80081ce:	2300      	movs	r3, #0
 80081d0:	75fb      	strb	r3, [r7, #23]
 80081d2:	693b      	ldr	r3, [r7, #16]
 80081d4:	60bb      	str	r3, [r7, #8]
 80081d6:	68bb      	ldr	r3, [r7, #8]
 80081d8:	f383 8810 	msr	PRIMASK, r3
 80081dc:	bf00      	nop
 80081de:	7dfb      	ldrb	r3, [r7, #23]
 80081e0:	4618      	mov	r0, r3
 80081e2:	371c      	adds	r7, #28
 80081e4:	46bd      	mov	sp, r7
 80081e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ea:	4770      	bx	lr

080081ec <LST_insert_head>:
 80081ec:	b480      	push	{r7}
 80081ee:	b087      	sub	sp, #28
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	6078      	str	r0, [r7, #4]
 80081f4:	6039      	str	r1, [r7, #0]
 80081f6:	f3ef 8310 	mrs	r3, PRIMASK
 80081fa:	60fb      	str	r3, [r7, #12]
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	617b      	str	r3, [r7, #20]
 8008200:	b672      	cpsid	i
 8008202:	bf00      	nop
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681a      	ldr	r2, [r3, #0]
 8008208:	683b      	ldr	r3, [r7, #0]
 800820a:	601a      	str	r2, [r3, #0]
 800820c:	683b      	ldr	r3, [r7, #0]
 800820e:	687a      	ldr	r2, [r7, #4]
 8008210:	605a      	str	r2, [r3, #4]
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	683a      	ldr	r2, [r7, #0]
 8008216:	601a      	str	r2, [r3, #0]
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	683a      	ldr	r2, [r7, #0]
 800821e:	605a      	str	r2, [r3, #4]
 8008220:	697b      	ldr	r3, [r7, #20]
 8008222:	613b      	str	r3, [r7, #16]
 8008224:	693b      	ldr	r3, [r7, #16]
 8008226:	f383 8810 	msr	PRIMASK, r3
 800822a:	bf00      	nop
 800822c:	bf00      	nop
 800822e:	371c      	adds	r7, #28
 8008230:	46bd      	mov	sp, r7
 8008232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008236:	4770      	bx	lr

08008238 <LST_insert_tail>:
 8008238:	b480      	push	{r7}
 800823a:	b087      	sub	sp, #28
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
 8008240:	6039      	str	r1, [r7, #0]
 8008242:	f3ef 8310 	mrs	r3, PRIMASK
 8008246:	60fb      	str	r3, [r7, #12]
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	617b      	str	r3, [r7, #20]
 800824c:	b672      	cpsid	i
 800824e:	bf00      	nop
 8008250:	683b      	ldr	r3, [r7, #0]
 8008252:	687a      	ldr	r2, [r7, #4]
 8008254:	601a      	str	r2, [r3, #0]
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	685a      	ldr	r2, [r3, #4]
 800825a:	683b      	ldr	r3, [r7, #0]
 800825c:	605a      	str	r2, [r3, #4]
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	683a      	ldr	r2, [r7, #0]
 8008262:	605a      	str	r2, [r3, #4]
 8008264:	683b      	ldr	r3, [r7, #0]
 8008266:	685b      	ldr	r3, [r3, #4]
 8008268:	683a      	ldr	r2, [r7, #0]
 800826a:	601a      	str	r2, [r3, #0]
 800826c:	697b      	ldr	r3, [r7, #20]
 800826e:	613b      	str	r3, [r7, #16]
 8008270:	693b      	ldr	r3, [r7, #16]
 8008272:	f383 8810 	msr	PRIMASK, r3
 8008276:	bf00      	nop
 8008278:	bf00      	nop
 800827a:	371c      	adds	r7, #28
 800827c:	46bd      	mov	sp, r7
 800827e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008282:	4770      	bx	lr

08008284 <LST_remove_node>:
 8008284:	b480      	push	{r7}
 8008286:	b087      	sub	sp, #28
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
 800828c:	f3ef 8310 	mrs	r3, PRIMASK
 8008290:	60fb      	str	r3, [r7, #12]
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	617b      	str	r3, [r7, #20]
 8008296:	b672      	cpsid	i
 8008298:	bf00      	nop
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	685b      	ldr	r3, [r3, #4]
 800829e:	687a      	ldr	r2, [r7, #4]
 80082a0:	6812      	ldr	r2, [r2, #0]
 80082a2:	601a      	str	r2, [r3, #0]
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	687a      	ldr	r2, [r7, #4]
 80082aa:	6852      	ldr	r2, [r2, #4]
 80082ac:	605a      	str	r2, [r3, #4]
 80082ae:	697b      	ldr	r3, [r7, #20]
 80082b0:	613b      	str	r3, [r7, #16]
 80082b2:	693b      	ldr	r3, [r7, #16]
 80082b4:	f383 8810 	msr	PRIMASK, r3
 80082b8:	bf00      	nop
 80082ba:	bf00      	nop
 80082bc:	371c      	adds	r7, #28
 80082be:	46bd      	mov	sp, r7
 80082c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c4:	4770      	bx	lr

080082c6 <LST_remove_head>:
 80082c6:	b580      	push	{r7, lr}
 80082c8:	b086      	sub	sp, #24
 80082ca:	af00      	add	r7, sp, #0
 80082cc:	6078      	str	r0, [r7, #4]
 80082ce:	6039      	str	r1, [r7, #0]
 80082d0:	f3ef 8310 	mrs	r3, PRIMASK
 80082d4:	60fb      	str	r3, [r7, #12]
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	617b      	str	r3, [r7, #20]
 80082da:	b672      	cpsid	i
 80082dc:	bf00      	nop
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681a      	ldr	r2, [r3, #0]
 80082e2:	683b      	ldr	r3, [r7, #0]
 80082e4:	601a      	str	r2, [r3, #0]
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	4618      	mov	r0, r3
 80082ec:	f7ff ffca 	bl	8008284 <LST_remove_node>
 80082f0:	697b      	ldr	r3, [r7, #20]
 80082f2:	613b      	str	r3, [r7, #16]
 80082f4:	693b      	ldr	r3, [r7, #16]
 80082f6:	f383 8810 	msr	PRIMASK, r3
 80082fa:	bf00      	nop
 80082fc:	bf00      	nop
 80082fe:	3718      	adds	r7, #24
 8008300:	46bd      	mov	sp, r7
 8008302:	bd80      	pop	{r7, pc}

08008304 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8008304:	b480      	push	{r7}
 8008306:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 8008308:	4b03      	ldr	r3, [pc, #12]	; (8008318 <LL_FLASH_GetUDN+0x14>)
 800830a:	681b      	ldr	r3, [r3, #0]
}
 800830c:	4618      	mov	r0, r3
 800830e:	46bd      	mov	sp, r7
 8008310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008314:	4770      	bx	lr
 8008316:	bf00      	nop
 8008318:	1fff7580 	.word	0x1fff7580

0800831c <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 800831c:	b480      	push	{r7}
 800831e:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8008320:	4b03      	ldr	r3, [pc, #12]	; (8008330 <LL_FLASH_GetDeviceID+0x14>)
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	b2db      	uxtb	r3, r3
}
 8008326:	4618      	mov	r0, r3
 8008328:	46bd      	mov	sp, r7
 800832a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832e:	4770      	bx	lr
 8008330:	1fff7584 	.word	0x1fff7584

08008334 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8008334:	b480      	push	{r7}
 8008336:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8008338:	4b03      	ldr	r3, [pc, #12]	; (8008348 <LL_FLASH_GetSTCompanyID+0x14>)
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	0a1b      	lsrs	r3, r3, #8
}
 800833e:	4618      	mov	r0, r3
 8008340:	46bd      	mov	sp, r7
 8008342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008346:	4770      	bx	lr
 8008348:	1fff7584 	.word	0x1fff7584

0800834c <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 800834c:	b5b0      	push	{r4, r5, r7, lr}
 800834e:	b090      	sub	sp, #64	; 0x40
 8008350:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
#if (RADIO_ACTIVITY_EVENT != 0)
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8008352:	2392      	movs	r3, #146	; 0x92
 8008354:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#endif /* RADIO_ACTIVITY_EVENT != 0 */
  /* USER CODE BEGIN APP_BLE_Init_1 */

  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 8008358:	4b25      	ldr	r3, [pc, #148]	; (80083f0 <APP_BLE_Init+0xa4>)
 800835a:	1d3c      	adds	r4, r7, #4
 800835c:	461d      	mov	r5, r3
 800835e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008360:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008362:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008364:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008366:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008368:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800836a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800836e:	c403      	stmia	r4!, {r0, r1}
 8008370:	8022      	strh	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 8008372:	f000 f905 	bl	8008580 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 8008376:	2101      	movs	r1, #1
 8008378:	2002      	movs	r0, #2
 800837a:	f000 fde9 	bl	8008f50 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 800837e:	4a1d      	ldr	r2, [pc, #116]	; (80083f4 <APP_BLE_Init+0xa8>)
 8008380:	2100      	movs	r1, #0
 8008382:	2002      	movs	r0, #2
 8008384:	f000 ff10 	bl	80091a8 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 8008388:	1d3b      	adds	r3, r7, #4
 800838a:	4618      	mov	r0, r3
 800838c:	f7ff f8d0 	bl	8007530 <SHCI_C2_BLE_Init>
 8008390:	4603      	mov	r3, r0
 8008392:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  if (status != SHCI_Success)
 8008396:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800839a:	2b00      	cmp	r3, #0
 800839c:	d001      	beq.n	80083a2 <APP_BLE_Init+0x56>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 800839e:	f7f9 fcd9 	bl	8001d54 <Error_Handler>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 80083a2:	f000 f903 	bl	80085ac <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 80083a6:	f7ff f81d 	bl	80073e4 <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 80083aa:	4b13      	ldr	r3, [pc, #76]	; (80083f8 <APP_BLE_Init+0xac>)
 80083ac:	2200      	movs	r2, #0
 80083ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 80083b2:	4b11      	ldr	r3, [pc, #68]	; (80083f8 <APP_BLE_Init+0xac>)
 80083b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80083b8:	82da      	strh	r2, [r3, #22]

  /**
   * From here, all initialization are BLE application specific
   */

  UTIL_SEQ_RegTask(1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 80083ba:	4a10      	ldr	r2, [pc, #64]	; (80083fc <APP_BLE_Init+0xb0>)
 80083bc:	2100      	movs	r1, #0
 80083be:	2001      	movs	r0, #1
 80083c0:	f000 fef2 	bl	80091a8 <UTIL_SEQ_RegTask>

  /**
   * Initialization of ADV - Ad Manufacturer Element - Support OTA Bit Mask
   */
#if (RADIO_ACTIVITY_EVENT != 0)
  ret = aci_hal_set_radio_activity_mask(0x0006);
 80083c4:	2006      	movs	r0, #6
 80083c6:	f7fe fe80 	bl	80070ca <aci_hal_set_radio_activity_mask>
 80083ca:	4603      	mov	r3, r0
 80083cc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

  /**
   * Initialize Custom Template Application
   */
  Custom_APP_Init();
 80083d0:	f000 fa9b 	bl	800890a <Custom_APP_Init>
  /* USER CODE END APP_BLE_Init_3 */

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 80083d4:	4b08      	ldr	r3, [pc, #32]	; (80083f8 <APP_BLE_Init+0xac>)
 80083d6:	2200      	movs	r2, #0
 80083d8:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 80083da:	4b07      	ldr	r3, [pc, #28]	; (80083f8 <APP_BLE_Init+0xac>)
 80083dc:	2200      	movs	r2, #0
 80083de:	761a      	strb	r2, [r3, #24]

  /**
   * Start to Advertise to be connected by a Client
   */
  Adv_Request(APP_BLE_FAST_ADV);
 80083e0:	2001      	movs	r0, #1
 80083e2:	f000 f997 	bl	8008714 <Adv_Request>

  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */

  return;
 80083e6:	bf00      	nop
}
 80083e8:	3740      	adds	r7, #64	; 0x40
 80083ea:	46bd      	mov	sp, r7
 80083ec:	bdb0      	pop	{r4, r5, r7, pc}
 80083ee:	bf00      	nop
 80083f0:	0800a438 	.word	0x0800a438
 80083f4:	0800774d 	.word	0x0800774d
 80083f8:	20000bf0 	.word	0x20000bf0
 80083fc:	080087fd 	.word	0x080087fd

08008400 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 8008400:	b580      	push	{r7, lr}
 8008402:	b08a      	sub	sp, #40	; 0x28
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
  hci_event_pckt    *p_event_pckt;
  evt_le_meta_event *p_meta_evt;
  evt_blecore_aci   *p_blecore_evt;
  tBleStatus        ret = BLE_STATUS_INVALID_PARAMS;
 8008408:	2392      	movs	r3, #146	; 0x92
 800840a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	3301      	adds	r3, #1
 8008412:	623b      	str	r3, [r7, #32]

  switch (p_event_pckt->evt)
 8008414:	6a3b      	ldr	r3, [r7, #32]
 8008416:	781b      	ldrb	r3, [r3, #0]
 8008418:	2bff      	cmp	r3, #255	; 0xff
 800841a:	d053      	beq.n	80084c4 <SVCCTL_App_Notification+0xc4>
 800841c:	2bff      	cmp	r3, #255	; 0xff
 800841e:	f300 80a1 	bgt.w	8008564 <SVCCTL_App_Notification+0x164>
 8008422:	2b05      	cmp	r3, #5
 8008424:	d002      	beq.n	800842c <SVCCTL_App_Notification+0x2c>
 8008426:	2b3e      	cmp	r3, #62	; 0x3e
 8008428:	d020      	beq.n	800846c <SVCCTL_App_Notification+0x6c>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 800842a:	e09b      	b.n	8008564 <SVCCTL_App_Notification+0x164>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
 800842c:	6a3b      	ldr	r3, [r7, #32]
 800842e:	3302      	adds	r3, #2
 8008430:	60fb      	str	r3, [r7, #12]
      if (p_disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8008438:	b29a      	uxth	r2, r3
 800843a:	4b4e      	ldr	r3, [pc, #312]	; (8008574 <SVCCTL_App_Notification+0x174>)
 800843c:	8adb      	ldrh	r3, [r3, #22]
 800843e:	429a      	cmp	r2, r3
 8008440:	d106      	bne.n	8008450 <SVCCTL_App_Notification+0x50>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 8008442:	4b4c      	ldr	r3, [pc, #304]	; (8008574 <SVCCTL_App_Notification+0x174>)
 8008444:	2200      	movs	r2, #0
 8008446:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8008448:	4b4a      	ldr	r3, [pc, #296]	; (8008574 <SVCCTL_App_Notification+0x174>)
 800844a:	2200      	movs	r2, #0
 800844c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
      Adv_Request(APP_BLE_FAST_ADV);
 8008450:	2001      	movs	r0, #1
 8008452:	f000 f95f 	bl	8008714 <Adv_Request>
      HandleNotification.Custom_Evt_Opcode = CUSTOM_DISCON_HANDLE_EVT;
 8008456:	4b48      	ldr	r3, [pc, #288]	; (8008578 <SVCCTL_App_Notification+0x178>)
 8008458:	2201      	movs	r2, #1
 800845a:	701a      	strb	r2, [r3, #0]
      HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800845c:	4b45      	ldr	r3, [pc, #276]	; (8008574 <SVCCTL_App_Notification+0x174>)
 800845e:	8ada      	ldrh	r2, [r3, #22]
 8008460:	4b45      	ldr	r3, [pc, #276]	; (8008578 <SVCCTL_App_Notification+0x178>)
 8008462:	805a      	strh	r2, [r3, #2]
      Custom_APP_Notification(&HandleNotification);
 8008464:	4844      	ldr	r0, [pc, #272]	; (8008578 <SVCCTL_App_Notification+0x178>)
 8008466:	f000 fa3c 	bl	80088e2 <Custom_APP_Notification>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 800846a:	e07e      	b.n	800856a <SVCCTL_App_Notification+0x16a>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 800846c:	6a3b      	ldr	r3, [r7, #32]
 800846e:	3302      	adds	r3, #2
 8008470:	617b      	str	r3, [r7, #20]
      switch (p_meta_evt->subevent)
 8008472:	697b      	ldr	r3, [r7, #20]
 8008474:	781b      	ldrb	r3, [r3, #0]
 8008476:	2b01      	cmp	r3, #1
 8008478:	d001      	beq.n	800847e <SVCCTL_App_Notification+0x7e>
 800847a:	2b03      	cmp	r3, #3
          break;
 800847c:	e021      	b.n	80084c2 <SVCCTL_App_Notification+0xc2>
          p_connection_complete_event = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
 800847e:	697b      	ldr	r3, [r7, #20]
 8008480:	3301      	adds	r3, #1
 8008482:	613b      	str	r3, [r7, #16]
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 8008484:	4b3b      	ldr	r3, [pc, #236]	; (8008574 <SVCCTL_App_Notification+0x174>)
 8008486:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800848a:	2b04      	cmp	r3, #4
 800848c:	d104      	bne.n	8008498 <SVCCTL_App_Notification+0x98>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 800848e:	4b39      	ldr	r3, [pc, #228]	; (8008574 <SVCCTL_App_Notification+0x174>)
 8008490:	2206      	movs	r2, #6
 8008492:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 8008496:	e003      	b.n	80084a0 <SVCCTL_App_Notification+0xa0>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 8008498:	4b36      	ldr	r3, [pc, #216]	; (8008574 <SVCCTL_App_Notification+0x174>)
 800849a:	2205      	movs	r2, #5
 800849c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_connection_complete_event->Connection_Handle;
 80084a0:	693b      	ldr	r3, [r7, #16]
 80084a2:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80084a6:	b29a      	uxth	r2, r3
 80084a8:	4b32      	ldr	r3, [pc, #200]	; (8008574 <SVCCTL_App_Notification+0x174>)
 80084aa:	82da      	strh	r2, [r3, #22]
          HandleNotification.Custom_Evt_Opcode = CUSTOM_CONN_HANDLE_EVT;
 80084ac:	4b32      	ldr	r3, [pc, #200]	; (8008578 <SVCCTL_App_Notification+0x178>)
 80084ae:	2200      	movs	r2, #0
 80084b0:	701a      	strb	r2, [r3, #0]
          HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 80084b2:	4b30      	ldr	r3, [pc, #192]	; (8008574 <SVCCTL_App_Notification+0x174>)
 80084b4:	8ada      	ldrh	r2, [r3, #22]
 80084b6:	4b30      	ldr	r3, [pc, #192]	; (8008578 <SVCCTL_App_Notification+0x178>)
 80084b8:	805a      	strh	r2, [r3, #2]
          Custom_APP_Notification(&HandleNotification);
 80084ba:	482f      	ldr	r0, [pc, #188]	; (8008578 <SVCCTL_App_Notification+0x178>)
 80084bc:	f000 fa11 	bl	80088e2 <Custom_APP_Notification>
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 80084c0:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 80084c2:	e052      	b.n	800856a <SVCCTL_App_Notification+0x16a>
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 80084c4:	6a3b      	ldr	r3, [r7, #32]
 80084c6:	3302      	adds	r3, #2
 80084c8:	61fb      	str	r3, [r7, #28]
      switch (p_blecore_evt->ecode)
 80084ca:	69fb      	ldr	r3, [r7, #28]
 80084cc:	881b      	ldrh	r3, [r3, #0]
 80084ce:	b29b      	uxth	r3, r3
 80084d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80084d4:	d040      	beq.n	8008558 <SVCCTL_App_Notification+0x158>
 80084d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80084da:	dc45      	bgt.n	8008568 <SVCCTL_App_Notification+0x168>
 80084dc:	2b04      	cmp	r3, #4
 80084de:	d03d      	beq.n	800855c <SVCCTL_App_Notification+0x15c>
 80084e0:	2b04      	cmp	r3, #4
 80084e2:	db41      	blt.n	8008568 <SVCCTL_App_Notification+0x168>
 80084e4:	f240 420a 	movw	r2, #1034	; 0x40a
 80084e8:	4293      	cmp	r3, r2
 80084ea:	dc3d      	bgt.n	8008568 <SVCCTL_App_Notification+0x168>
 80084ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80084f0:	dd3a      	ble.n	8008568 <SVCCTL_App_Notification+0x168>
 80084f2:	f2a3 4301 	subw	r3, r3, #1025	; 0x401
 80084f6:	2b09      	cmp	r3, #9
 80084f8:	d836      	bhi.n	8008568 <SVCCTL_App_Notification+0x168>
 80084fa:	a201      	add	r2, pc, #4	; (adr r2, 8008500 <SVCCTL_App_Notification+0x100>)
 80084fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008500:	08008551 	.word	0x08008551
 8008504:	08008529 	.word	0x08008529
 8008508:	08008569 	.word	0x08008569
 800850c:	08008569 	.word	0x08008569
 8008510:	08008569 	.word	0x08008569
 8008514:	08008569 	.word	0x08008569
 8008518:	08008561 	.word	0x08008561
 800851c:	08008569 	.word	0x08008569
 8008520:	0800853d 	.word	0x0800853d
 8008524:	08008561 	.word	0x08008561
          ret = aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, CFG_FIXED_PIN);
 8008528:	4b12      	ldr	r3, [pc, #72]	; (8008574 <SVCCTL_App_Notification+0x174>)
 800852a:	8adb      	ldrh	r3, [r3, #22]
 800852c:	4913      	ldr	r1, [pc, #76]	; (800857c <SVCCTL_App_Notification+0x17c>)
 800852e:	4618      	mov	r0, r3
 8008530:	f7fe f822 	bl	8006578 <aci_gap_pass_key_resp>
 8008534:	4603      	mov	r3, r0
 8008536:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          break;
 800853a:	e012      	b.n	8008562 <SVCCTL_App_Notification+0x162>
          ret = aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES);
 800853c:	4b0d      	ldr	r3, [pc, #52]	; (8008574 <SVCCTL_App_Notification+0x174>)
 800853e:	8adb      	ldrh	r3, [r3, #22]
 8008540:	2101      	movs	r1, #1
 8008542:	4618      	mov	r0, r3
 8008544:	f7fe f9c2 	bl	80068cc <aci_gap_numeric_comparison_value_confirm_yesno>
 8008548:	4603      	mov	r3, r0
 800854a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          break;
 800854e:	e008      	b.n	8008562 <SVCCTL_App_Notification+0x162>
          p_pairing_complete = (aci_gap_pairing_complete_event_rp0*)p_blecore_evt->data;
 8008550:	69fb      	ldr	r3, [r7, #28]
 8008552:	3302      	adds	r3, #2
 8008554:	61bb      	str	r3, [r7, #24]
          break;
 8008556:	e004      	b.n	8008562 <SVCCTL_App_Notification+0x162>
          break;
 8008558:	bf00      	nop
 800855a:	e005      	b.n	8008568 <SVCCTL_App_Notification+0x168>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 800855c:	bf00      	nop
 800855e:	e003      	b.n	8008568 <SVCCTL_App_Notification+0x168>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 8008560:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8008562:	e001      	b.n	8008568 <SVCCTL_App_Notification+0x168>
      break;
 8008564:	bf00      	nop
 8008566:	e000      	b.n	800856a <SVCCTL_App_Notification+0x16a>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8008568:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 800856a:	2301      	movs	r3, #1
}
 800856c:	4618      	mov	r0, r3
 800856e:	3728      	adds	r7, #40	; 0x28
 8008570:	46bd      	mov	sp, r7
 8008572:	bd80      	pop	{r7, pc}
 8008574:	20000bf0 	.word	0x20000bf0
 8008578:	20000c74 	.word	0x20000c74
 800857c:	0001b207 	.word	0x0001b207

08008580 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 8008580:	b580      	push	{r7, lr}
 8008582:	b082      	sub	sp, #8
 8008584:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 8008586:	4b06      	ldr	r3, [pc, #24]	; (80085a0 <Ble_Tl_Init+0x20>)
 8008588:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 800858a:	4b06      	ldr	r3, [pc, #24]	; (80085a4 <Ble_Tl_Init+0x24>)
 800858c:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 800858e:	463b      	mov	r3, r7
 8008590:	4619      	mov	r1, r3
 8008592:	4805      	ldr	r0, [pc, #20]	; (80085a8 <Ble_Tl_Init+0x28>)
 8008594:	f7ff f8be 	bl	8007714 <hci_init>

  return;
 8008598:	bf00      	nop
}
 800859a:	3708      	adds	r7, #8
 800859c:	46bd      	mov	sp, r7
 800859e:	bd80      	pop	{r7, pc}
 80085a0:	200300d8 	.word	0x200300d8
 80085a4:	080088ad 	.word	0x080088ad
 80085a8:	08008875 	.word	0x08008875

080085ac <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 80085ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80085ae:	b08d      	sub	sp, #52	; 0x34
 80085b0:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 80085b2:	2300      	movs	r3, #0
 80085b4:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 80085b6:	2392      	movs	r3, #146	; 0x92
 80085b8:	75fb      	strb	r3, [r7, #23]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 80085ba:	f7fe fdda 	bl	8007172 <hci_reset>
 80085be:	4603      	mov	r3, r0
 80085c0:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 80085c2:	f000 f8d7 	bl	8008774 <BleGetBdAddress>
 80085c6:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 80085c8:	693a      	ldr	r2, [r7, #16]
 80085ca:	2106      	movs	r1, #6
 80085cc:	2000      	movs	r0, #0
 80085ce:	f7fe fc90 	bl	8006ef2 <aci_hal_write_config_data>
 80085d2:	4603      	mov	r3, r0
 80085d4:	75fb      	strb	r3, [r7, #23]
#endif /* CFG_BLE_ADDRESS_TYPE != GAP_PUBLIC_ADDR */

  /**
   * Write Identity root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 80085d6:	4a4a      	ldr	r2, [pc, #296]	; (8008700 <Ble_Hci_Gap_Gatt_Init+0x154>)
 80085d8:	2110      	movs	r1, #16
 80085da:	2018      	movs	r0, #24
 80085dc:	f7fe fc89 	bl	8006ef2 <aci_hal_write_config_data>
 80085e0:	4603      	mov	r3, r0
 80085e2:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 80085e4:	4a47      	ldr	r2, [pc, #284]	; (8008704 <Ble_Hci_Gap_Gatt_Init+0x158>)
 80085e6:	2110      	movs	r1, #16
 80085e8:	2008      	movs	r0, #8
 80085ea:	f7fe fc82 	bl	8006ef2 <aci_hal_write_config_data>
 80085ee:	4603      	mov	r3, r0
 80085f0:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 80085f2:	2118      	movs	r1, #24
 80085f4:	2001      	movs	r0, #1
 80085f6:	f7fe fd01 	bl	8006ffc <aci_hal_set_tx_power_level>
 80085fa:	4603      	mov	r3, r0
 80085fc:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 80085fe:	f7fe f9cc 	bl	800699a <aci_gatt_init>
 8008602:	4603      	mov	r3, r0
 8008604:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 8008606:	2300      	movs	r3, #0
 8008608:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 800860a:	7bfb      	ldrb	r3, [r7, #15]
 800860c:	f043 0301 	orr.w	r3, r3, #1
 8008610:	73fb      	strb	r3, [r7, #15]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  if (role > 0)
 8008612:	7bfb      	ldrb	r3, [r7, #15]
 8008614:	2b00      	cmp	r3, #0
 8008616:	d01f      	beq.n	8008658 <Ble_Hci_Gap_Gatt_Init+0xac>
  {
    const char *name = CFG_GAP_DEVICE_NAME;
 8008618:	4b3b      	ldr	r3, [pc, #236]	; (8008708 <Ble_Hci_Gap_Gatt_Init+0x15c>)
 800861a:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 800861c:	1dba      	adds	r2, r7, #6
 800861e:	7bf8      	ldrb	r0, [r7, #15]
 8008620:	1cbb      	adds	r3, r7, #2
 8008622:	9301      	str	r3, [sp, #4]
 8008624:	1d3b      	adds	r3, r7, #4
 8008626:	9300      	str	r3, [sp, #0]
 8008628:	4613      	mov	r3, r2
 800862a:	2208      	movs	r2, #8
 800862c:	2100      	movs	r1, #0
 800862e:	f7fe f80a 	bl	8006646 <aci_gap_init>
 8008632:	4603      	mov	r3, r0
 8008634:	75fb      	strb	r3, [r7, #23]
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 8008636:	88fc      	ldrh	r4, [r7, #6]
 8008638:	88bd      	ldrh	r5, [r7, #4]
 800863a:	68b8      	ldr	r0, [r7, #8]
 800863c:	f7f7 fda0 	bl	8000180 <strlen>
 8008640:	4603      	mov	r3, r0
 8008642:	b2da      	uxtb	r2, r3
 8008644:	68bb      	ldr	r3, [r7, #8]
 8008646:	9300      	str	r3, [sp, #0]
 8008648:	4613      	mov	r3, r2
 800864a:	2200      	movs	r2, #0
 800864c:	4629      	mov	r1, r5
 800864e:	4620      	mov	r0, r4
 8008650:	f7fe fba6 	bl	8006da0 <aci_gatt_update_char_value>
 8008654:	4603      	mov	r3, r0
 8008656:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 8008658:	88f8      	ldrh	r0, [r7, #6]
 800865a:	8879      	ldrh	r1, [r7, #2]
 800865c:	463b      	mov	r3, r7
 800865e:	9300      	str	r3, [sp, #0]
 8008660:	2302      	movs	r3, #2
 8008662:	2200      	movs	r2, #0
 8008664:	f7fe fb9c 	bl	8006da0 <aci_gatt_update_char_value>
 8008668:	4603      	mov	r3, r0
 800866a:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize Default PHY
   */
  ret = hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 800866c:	2202      	movs	r2, #2
 800866e:	2102      	movs	r1, #2
 8008670:	2000      	movs	r0, #0
 8008672:	f7fe fda2 	bl	80071ba <hci_le_set_default_phy>
 8008676:	4603      	mov	r3, r0
 8008678:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 800867a:	4b24      	ldr	r3, [pc, #144]	; (800870c <Ble_Hci_Gap_Gatt_Init+0x160>)
 800867c:	2201      	movs	r2, #1
 800867e:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 8008680:	4b22      	ldr	r3, [pc, #136]	; (800870c <Ble_Hci_Gap_Gatt_Init+0x160>)
 8008682:	781b      	ldrb	r3, [r3, #0]
 8008684:	4618      	mov	r0, r3
 8008686:	f7fd fe5f 	bl	8006348 <aci_gap_set_io_capability>
 800868a:	4603      	mov	r3, r0
 800868c:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 800868e:	4b1f      	ldr	r3, [pc, #124]	; (800870c <Ble_Hci_Gap_Gatt_Init+0x160>)
 8008690:	2201      	movs	r2, #1
 8008692:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 8008694:	4b1d      	ldr	r3, [pc, #116]	; (800870c <Ble_Hci_Gap_Gatt_Init+0x160>)
 8008696:	2208      	movs	r2, #8
 8008698:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 800869a:	4b1c      	ldr	r3, [pc, #112]	; (800870c <Ble_Hci_Gap_Gatt_Init+0x160>)
 800869c:	2210      	movs	r2, #16
 800869e:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 80086a0:	4b1a      	ldr	r3, [pc, #104]	; (800870c <Ble_Hci_Gap_Gatt_Init+0x160>)
 80086a2:	2200      	movs	r2, #0
 80086a4:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 80086a6:	4b19      	ldr	r3, [pc, #100]	; (800870c <Ble_Hci_Gap_Gatt_Init+0x160>)
 80086a8:	4a19      	ldr	r2, [pc, #100]	; (8008710 <Ble_Hci_Gap_Gatt_Init+0x164>)
 80086aa:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 80086ac:	4b17      	ldr	r3, [pc, #92]	; (800870c <Ble_Hci_Gap_Gatt_Init+0x160>)
 80086ae:	2200      	movs	r2, #0
 80086b0:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 80086b2:	4b16      	ldr	r3, [pc, #88]	; (800870c <Ble_Hci_Gap_Gatt_Init+0x160>)
 80086b4:	789c      	ldrb	r4, [r3, #2]
 80086b6:	4b15      	ldr	r3, [pc, #84]	; (800870c <Ble_Hci_Gap_Gatt_Init+0x160>)
 80086b8:	785d      	ldrb	r5, [r3, #1]
 80086ba:	4b14      	ldr	r3, [pc, #80]	; (800870c <Ble_Hci_Gap_Gatt_Init+0x160>)
 80086bc:	791b      	ldrb	r3, [r3, #4]
 80086be:	4a13      	ldr	r2, [pc, #76]	; (800870c <Ble_Hci_Gap_Gatt_Init+0x160>)
 80086c0:	7952      	ldrb	r2, [r2, #5]
 80086c2:	4912      	ldr	r1, [pc, #72]	; (800870c <Ble_Hci_Gap_Gatt_Init+0x160>)
 80086c4:	78c9      	ldrb	r1, [r1, #3]
 80086c6:	4811      	ldr	r0, [pc, #68]	; (800870c <Ble_Hci_Gap_Gatt_Init+0x160>)
 80086c8:	6880      	ldr	r0, [r0, #8]
 80086ca:	2600      	movs	r6, #0
 80086cc:	9604      	str	r6, [sp, #16]
 80086ce:	9003      	str	r0, [sp, #12]
 80086d0:	9102      	str	r1, [sp, #8]
 80086d2:	9201      	str	r2, [sp, #4]
 80086d4:	9300      	str	r3, [sp, #0]
 80086d6:	2300      	movs	r3, #0
 80086d8:	2201      	movs	r2, #1
 80086da:	4629      	mov	r1, r5
 80086dc:	4620      	mov	r0, r4
 80086de:	f7fd fe87 	bl	80063f0 <aci_gap_set_authentication_requirement>
 80086e2:	4603      	mov	r3, r0
 80086e4:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 80086e6:	4b09      	ldr	r3, [pc, #36]	; (800870c <Ble_Hci_Gap_Gatt_Init+0x160>)
 80086e8:	789b      	ldrb	r3, [r3, #2]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d003      	beq.n	80086f6 <Ble_Hci_Gap_Gatt_Init+0x14a>
  {
    ret = aci_gap_configure_whitelist();
 80086ee:	f7fe f8c9 	bl	8006884 <aci_gap_configure_whitelist>
 80086f2:	4603      	mov	r3, r0
 80086f4:	75fb      	strb	r3, [r7, #23]
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
}
 80086f6:	bf00      	nop
 80086f8:	371c      	adds	r7, #28
 80086fa:	46bd      	mov	sp, r7
 80086fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80086fe:	bf00      	nop
 8008700:	0800a680 	.word	0x0800a680
 8008704:	0800a690 	.word	0x0800a690
 8008708:	0800a474 	.word	0x0800a474
 800870c:	20000bf0 	.word	0x20000bf0
 8008710:	0001b207 	.word	0x0001b207

08008714 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t NewStatus)
{
 8008714:	b580      	push	{r7, lr}
 8008716:	b08c      	sub	sp, #48	; 0x30
 8008718:	af08      	add	r7, sp, #32
 800871a:	4603      	mov	r3, r0
 800871c:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800871e:	2392      	movs	r3, #146	; 0x92
 8008720:	73fb      	strb	r3, [r7, #15]

  BleApplicationContext.Device_Connection_Status = NewStatus;
 8008722:	4a12      	ldr	r2, [pc, #72]	; (800876c <Adv_Request+0x58>)
 8008724:	79fb      	ldrb	r3, [r7, #7]
 8008726:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
  /* Start Fast or Low Power Advertising */
  ret = aci_gap_set_discoverable(ADV_TYPE,
 800872a:	2300      	movs	r3, #0
 800872c:	9306      	str	r3, [sp, #24]
 800872e:	2300      	movs	r3, #0
 8008730:	9305      	str	r3, [sp, #20]
 8008732:	2300      	movs	r3, #0
 8008734:	9304      	str	r3, [sp, #16]
 8008736:	2300      	movs	r3, #0
 8008738:	9303      	str	r3, [sp, #12]
 800873a:	2300      	movs	r3, #0
 800873c:	9302      	str	r3, [sp, #8]
 800873e:	2300      	movs	r3, #0
 8008740:	9301      	str	r3, [sp, #4]
 8008742:	2300      	movs	r3, #0
 8008744:	9300      	str	r3, [sp, #0]
 8008746:	2300      	movs	r3, #0
 8008748:	22a0      	movs	r2, #160	; 0xa0
 800874a:	2180      	movs	r1, #128	; 0x80
 800874c:	2000      	movs	r0, #0
 800874e:	f7fd fd01 	bl	8006154 <aci_gap_set_discoverable>
 8008752:	4603      	mov	r3, r0
 8008754:	73fb      	strb	r3, [r7, #15]
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - Success\n");
  }

  /* Update Advertising data */
  ret = aci_gap_update_adv_data(sizeof(a_AdvData), (uint8_t*) a_AdvData);
 8008756:	4906      	ldr	r1, [pc, #24]	; (8008770 <Adv_Request+0x5c>)
 8008758:	2009      	movs	r0, #9
 800875a:	f7fe f821 	bl	80067a0 <aci_gap_update_adv_data>
 800875e:	4603      	mov	r3, r0
 8008760:	73fb      	strb	r3, [r7, #15]
  else
  {
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
  }

  return;
 8008762:	bf00      	nop
}
 8008764:	3710      	adds	r7, #16
 8008766:	46bd      	mov	sp, r7
 8008768:	bd80      	pop	{r7, pc}
 800876a:	bf00      	nop
 800876c:	20000bf0 	.word	0x20000bf0
 8008770:	20000014 	.word	0x20000014

08008774 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 8008774:	b580      	push	{r7, lr}
 8008776:	b086      	sub	sp, #24
 8008778:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 800877a:	f7ff fdc3 	bl	8008304 <LL_FLASH_GetUDN>
 800877e:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 8008780:	693b      	ldr	r3, [r7, #16]
 8008782:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008786:	d023      	beq.n	80087d0 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 8008788:	f7ff fdd4 	bl	8008334 <LL_FLASH_GetSTCompanyID>
 800878c:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 800878e:	f7ff fdc5 	bl	800831c <LL_FLASH_GetDeviceID>
 8008792:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 8008794:	693b      	ldr	r3, [r7, #16]
 8008796:	b2da      	uxtb	r2, r3
 8008798:	4b16      	ldr	r3, [pc, #88]	; (80087f4 <BleGetBdAddress+0x80>)
 800879a:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 800879c:	693b      	ldr	r3, [r7, #16]
 800879e:	0a1b      	lsrs	r3, r3, #8
 80087a0:	b2da      	uxtb	r2, r3
 80087a2:	4b14      	ldr	r3, [pc, #80]	; (80087f4 <BleGetBdAddress+0x80>)
 80087a4:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	b2da      	uxtb	r2, r3
 80087aa:	4b12      	ldr	r3, [pc, #72]	; (80087f4 <BleGetBdAddress+0x80>)
 80087ac:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 80087ae:	68bb      	ldr	r3, [r7, #8]
 80087b0:	b2da      	uxtb	r2, r3
 80087b2:	4b10      	ldr	r3, [pc, #64]	; (80087f4 <BleGetBdAddress+0x80>)
 80087b4:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 80087b6:	68bb      	ldr	r3, [r7, #8]
 80087b8:	0a1b      	lsrs	r3, r3, #8
 80087ba:	b2da      	uxtb	r2, r3
 80087bc:	4b0d      	ldr	r3, [pc, #52]	; (80087f4 <BleGetBdAddress+0x80>)
 80087be:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 80087c0:	68bb      	ldr	r3, [r7, #8]
 80087c2:	0c1b      	lsrs	r3, r3, #16
 80087c4:	b2da      	uxtb	r2, r3
 80087c6:	4b0b      	ldr	r3, [pc, #44]	; (80087f4 <BleGetBdAddress+0x80>)
 80087c8:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 80087ca:	4b0a      	ldr	r3, [pc, #40]	; (80087f4 <BleGetBdAddress+0x80>)
 80087cc:	617b      	str	r3, [r7, #20]
 80087ce:	e00b      	b.n	80087e8 <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 80087d0:	2000      	movs	r0, #0
 80087d2:	f7ff fcb1 	bl	8008138 <OTP_Read>
 80087d6:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d002      	beq.n	80087e4 <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	617b      	str	r3, [r7, #20]
 80087e2:	e001      	b.n	80087e8 <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 80087e4:	4b04      	ldr	r3, [pc, #16]	; (80087f8 <BleGetBdAddress+0x84>)
 80087e6:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 80087e8:	697b      	ldr	r3, [r7, #20]
}
 80087ea:	4618      	mov	r0, r3
 80087ec:	3718      	adds	r7, #24
 80087ee:	46bd      	mov	sp, r7
 80087f0:	bd80      	pop	{r7, pc}
 80087f2:	bf00      	nop
 80087f4:	20000be8 	.word	0x20000be8
 80087f8:	0800a678 	.word	0x0800a678

080087fc <Adv_Cancel>:
 *
 * SPECIFIC FUNCTIONS FOR CUSTOM
 *
 *************************************************************/
static void Adv_Cancel(void)
{
 80087fc:	b580      	push	{r7, lr}
 80087fe:	b082      	sub	sp, #8
 8008800:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_1 */

  /* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 8008802:	4b0a      	ldr	r3, [pc, #40]	; (800882c <Adv_Cancel+0x30>)
 8008804:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008808:	2b05      	cmp	r3, #5
 800880a:	d00a      	beq.n	8008822 <Adv_Cancel+0x26>
  {
    tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800880c:	2392      	movs	r3, #146	; 0x92
 800880e:	71fb      	strb	r3, [r7, #7]

    ret = aci_gap_set_non_discoverable();
 8008810:	f7fd fc7c 	bl	800610c <aci_gap_set_non_discoverable>
 8008814:	4603      	mov	r3, r0
 8008816:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8008818:	4b04      	ldr	r3, [pc, #16]	; (800882c <Adv_Cancel+0x30>)
 800881a:	2200      	movs	r2, #0
 800881c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* USER CODE BEGIN Adv_Cancel_2 */

  /* USER CODE END Adv_Cancel_2 */

  return;
 8008820:	bf00      	nop
 8008822:	bf00      	nop
}
 8008824:	3708      	adds	r7, #8
 8008826:	46bd      	mov	sp, r7
 8008828:	bd80      	pop	{r7, pc}
 800882a:	bf00      	nop
 800882c:	20000bf0 	.word	0x20000bf0

08008830 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 8008830:	b580      	push	{r7, lr}
 8008832:	b082      	sub	sp, #8
 8008834:	af00      	add	r7, sp, #0
 8008836:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8008838:	2100      	movs	r1, #0
 800883a:	2002      	movs	r0, #2
 800883c:	f000 fcd6 	bl	80091ec <UTIL_SEQ_SetTask>

  return;
 8008840:	bf00      	nop
}
 8008842:	3708      	adds	r7, #8
 8008844:	46bd      	mov	sp, r7
 8008846:	bd80      	pop	{r7, pc}

08008848 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 8008848:	b580      	push	{r7, lr}
 800884a:	b082      	sub	sp, #8
 800884c:	af00      	add	r7, sp, #0
 800884e:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8008850:	2001      	movs	r0, #1
 8008852:	f000 fd37 	bl	80092c4 <UTIL_SEQ_SetEvt>

  return;
 8008856:	bf00      	nop
}
 8008858:	3708      	adds	r7, #8
 800885a:	46bd      	mov	sp, r7
 800885c:	bd80      	pop	{r7, pc}

0800885e <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 800885e:	b580      	push	{r7, lr}
 8008860:	b082      	sub	sp, #8
 8008862:	af00      	add	r7, sp, #0
 8008864:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8008866:	2001      	movs	r0, #1
 8008868:	f000 fd4c 	bl	8009304 <UTIL_SEQ_WaitEvt>

  return;
 800886c:	bf00      	nop
}
 800886e:	3708      	adds	r7, #8
 8008870:	46bd      	mov	sp, r7
 8008872:	bd80      	pop	{r7, pc}

08008874 <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 8008874:	b580      	push	{r7, lr}
 8008876:	b084      	sub	sp, #16
 8008878:	af00      	add	r7, sp, #0
 800887a:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	685b      	ldr	r3, [r3, #4]
 8008884:	3308      	adds	r3, #8
 8008886:	4618      	mov	r0, r3
 8008888:	f7fe fdfe 	bl	8007488 <SVCCTL_UserEvtRx>
 800888c:	4603      	mov	r3, r0
 800888e:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 8008890:	7afb      	ldrb	r3, [r7, #11]
 8008892:	2b00      	cmp	r3, #0
 8008894:	d003      	beq.n	800889e <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	2201      	movs	r2, #1
 800889a:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 800889c:	e003      	b.n	80088a6 <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	2200      	movs	r2, #0
 80088a2:	701a      	strb	r2, [r3, #0]
  return;
 80088a4:	bf00      	nop
}
 80088a6:	3710      	adds	r7, #16
 80088a8:	46bd      	mov	sp, r7
 80088aa:	bd80      	pop	{r7, pc}

080088ac <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 80088ac:	b580      	push	{r7, lr}
 80088ae:	b084      	sub	sp, #16
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	4603      	mov	r3, r0
 80088b4:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 80088b6:	79fb      	ldrb	r3, [r7, #7]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d002      	beq.n	80088c2 <BLE_StatusNot+0x16>
 80088bc:	2b01      	cmp	r3, #1
 80088be:	d006      	beq.n	80088ce <BLE_StatusNot+0x22>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 80088c0:	e00b      	b.n	80088da <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 80088c2:	2303      	movs	r3, #3
 80088c4:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 80088c6:	68f8      	ldr	r0, [r7, #12]
 80088c8:	f000 fcbc 	bl	8009244 <UTIL_SEQ_PauseTask>
      break;
 80088cc:	e005      	b.n	80088da <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 80088ce:	2303      	movs	r3, #3
 80088d0:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 80088d2:	68f8      	ldr	r0, [r7, #12]
 80088d4:	f000 fcd6 	bl	8009284 <UTIL_SEQ_ResumeTask>
      break;
 80088d8:	bf00      	nop
  }

  return;
 80088da:	bf00      	nop
}
 80088dc:	3710      	adds	r7, #16
 80088de:	46bd      	mov	sp, r7
 80088e0:	bd80      	pop	{r7, pc}

080088e2 <Custom_APP_Notification>:
  /* USER CODE END CUSTOM_STM_App_Notification_2 */
  return;
}

void Custom_APP_Notification(Custom_App_ConnHandle_Not_evt_t *pNotification)
{
 80088e2:	b480      	push	{r7}
 80088e4:	b083      	sub	sp, #12
 80088e6:	af00      	add	r7, sp, #0
 80088e8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_APP_Notification_1 */

  /* USER CODE END CUSTOM_APP_Notification_1 */

  switch (pNotification->Custom_Evt_Opcode)
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	781b      	ldrb	r3, [r3, #0]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d002      	beq.n	80088f8 <Custom_APP_Notification+0x16>
 80088f2:	2b01      	cmp	r3, #1
 80088f4:	d002      	beq.n	80088fc <Custom_APP_Notification+0x1a>

    default:
      /* USER CODE BEGIN CUSTOM_APP_Notification_default */

      /* USER CODE END CUSTOM_APP_Notification_default */
      break;
 80088f6:	e002      	b.n	80088fe <Custom_APP_Notification+0x1c>
      break;
 80088f8:	bf00      	nop
 80088fa:	e000      	b.n	80088fe <Custom_APP_Notification+0x1c>
      break;
 80088fc:	bf00      	nop

  /* USER CODE BEGIN CUSTOM_APP_Notification_2 */

  /* USER CODE END CUSTOM_APP_Notification_2 */

  return;
 80088fe:	bf00      	nop
}
 8008900:	370c      	adds	r7, #12
 8008902:	46bd      	mov	sp, r7
 8008904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008908:	4770      	bx	lr

0800890a <Custom_APP_Init>:

void Custom_APP_Init(void)
{
 800890a:	b480      	push	{r7}
 800890c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CUSTOM_APP_Init */

  /* USER CODE END CUSTOM_APP_Init */
  return;
 800890e:	bf00      	nop
}
 8008910:	46bd      	mov	sp, r7
 8008912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008916:	4770      	bx	lr

08008918 <Custom_STM_Event_Handler>:
 8008918:	b480      	push	{r7}
 800891a:	b08b      	sub	sp, #44	; 0x2c
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
 8008920:	2300      	movs	r3, #0
 8008922:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	3301      	adds	r3, #1
 800892a:	623b      	str	r3, [r7, #32]
 800892c:	6a3b      	ldr	r3, [r7, #32]
 800892e:	781b      	ldrb	r3, [r3, #0]
 8008930:	2bff      	cmp	r3, #255	; 0xff
 8008932:	d12b      	bne.n	800898c <Custom_STM_Event_Handler+0x74>
 8008934:	6a3b      	ldr	r3, [r7, #32]
 8008936:	3302      	adds	r3, #2
 8008938:	61fb      	str	r3, [r7, #28]
 800893a:	69fb      	ldr	r3, [r7, #28]
 800893c:	881b      	ldrh	r3, [r3, #0]
 800893e:	b29b      	uxth	r3, r3
 8008940:	f640 4214 	movw	r2, #3092	; 0xc14
 8008944:	4293      	cmp	r3, r2
 8008946:	d01b      	beq.n	8008980 <Custom_STM_Event_Handler+0x68>
 8008948:	f640 4214 	movw	r2, #3092	; 0xc14
 800894c:	4293      	cmp	r3, r2
 800894e:	dc19      	bgt.n	8008984 <Custom_STM_Event_Handler+0x6c>
 8008950:	f640 4201 	movw	r2, #3073	; 0xc01
 8008954:	4293      	cmp	r3, r2
 8008956:	d003      	beq.n	8008960 <Custom_STM_Event_Handler+0x48>
 8008958:	f640 4213 	movw	r2, #3091	; 0xc13
 800895c:	4293      	cmp	r3, r2
 800895e:	e014      	b.n	800898a <Custom_STM_Event_Handler+0x72>
 8008960:	69fb      	ldr	r3, [r7, #28]
 8008962:	3302      	adds	r3, #2
 8008964:	61bb      	str	r3, [r7, #24]
 8008966:	69bb      	ldr	r3, [r7, #24]
 8008968:	885b      	ldrh	r3, [r3, #2]
 800896a:	b29b      	uxth	r3, r3
 800896c:	461a      	mov	r2, r3
 800896e:	4b0c      	ldr	r3, [pc, #48]	; (80089a0 <Custom_STM_Event_Handler+0x88>)
 8008970:	885b      	ldrh	r3, [r3, #2]
 8008972:	3301      	adds	r3, #1
 8008974:	429a      	cmp	r2, r3
 8008976:	d107      	bne.n	8008988 <Custom_STM_Event_Handler+0x70>
 8008978:	2301      	movs	r3, #1
 800897a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800897e:	e003      	b.n	8008988 <Custom_STM_Event_Handler+0x70>
 8008980:	bf00      	nop
 8008982:	e004      	b.n	800898e <Custom_STM_Event_Handler+0x76>
 8008984:	bf00      	nop
 8008986:	e002      	b.n	800898e <Custom_STM_Event_Handler+0x76>
 8008988:	bf00      	nop
 800898a:	e000      	b.n	800898e <Custom_STM_Event_Handler+0x76>
 800898c:	bf00      	nop
 800898e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008992:	4618      	mov	r0, r3
 8008994:	372c      	adds	r7, #44	; 0x2c
 8008996:	46bd      	mov	sp, r7
 8008998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899c:	4770      	bx	lr
 800899e:	bf00      	nop
 80089a0:	20000c78 	.word	0x20000c78

080089a4 <SVCCTL_InitCustomSvc>:
 80089a4:	b580      	push	{r7, lr}
 80089a6:	b08c      	sub	sp, #48	; 0x30
 80089a8:	af06      	add	r7, sp, #24
 80089aa:	2392      	movs	r3, #146	; 0x92
 80089ac:	75fb      	strb	r3, [r7, #23]
 80089ae:	4834      	ldr	r0, [pc, #208]	; (8008a80 <SVCCTL_InitCustomSvc+0xdc>)
 80089b0:	f7fe fd50 	bl	8007454 <SVCCTL_RegisterSvcHandler>
 80089b4:	238f      	movs	r3, #143	; 0x8f
 80089b6:	713b      	strb	r3, [r7, #4]
 80089b8:	23e5      	movs	r3, #229	; 0xe5
 80089ba:	717b      	strb	r3, [r7, #5]
 80089bc:	23b3      	movs	r3, #179	; 0xb3
 80089be:	71bb      	strb	r3, [r7, #6]
 80089c0:	23d5      	movs	r3, #213	; 0xd5
 80089c2:	71fb      	strb	r3, [r7, #7]
 80089c4:	232e      	movs	r3, #46	; 0x2e
 80089c6:	723b      	strb	r3, [r7, #8]
 80089c8:	237f      	movs	r3, #127	; 0x7f
 80089ca:	727b      	strb	r3, [r7, #9]
 80089cc:	234a      	movs	r3, #74	; 0x4a
 80089ce:	72bb      	strb	r3, [r7, #10]
 80089d0:	2398      	movs	r3, #152	; 0x98
 80089d2:	72fb      	strb	r3, [r7, #11]
 80089d4:	232a      	movs	r3, #42	; 0x2a
 80089d6:	733b      	strb	r3, [r7, #12]
 80089d8:	2348      	movs	r3, #72	; 0x48
 80089da:	737b      	strb	r3, [r7, #13]
 80089dc:	237a      	movs	r3, #122	; 0x7a
 80089de:	73bb      	strb	r3, [r7, #14]
 80089e0:	23cc      	movs	r3, #204	; 0xcc
 80089e2:	73fb      	strb	r3, [r7, #15]
 80089e4:	2300      	movs	r3, #0
 80089e6:	743b      	strb	r3, [r7, #16]
 80089e8:	2300      	movs	r3, #0
 80089ea:	747b      	strb	r3, [r7, #17]
 80089ec:	2300      	movs	r3, #0
 80089ee:	74bb      	strb	r3, [r7, #18]
 80089f0:	2300      	movs	r3, #0
 80089f2:	74fb      	strb	r3, [r7, #19]
 80089f4:	1d39      	adds	r1, r7, #4
 80089f6:	4b23      	ldr	r3, [pc, #140]	; (8008a84 <SVCCTL_InitCustomSvc+0xe0>)
 80089f8:	9300      	str	r3, [sp, #0]
 80089fa:	2303      	movs	r3, #3
 80089fc:	2201      	movs	r2, #1
 80089fe:	2002      	movs	r0, #2
 8008a00:	f7fd fff0 	bl	80069e4 <aci_gatt_add_service>
 8008a04:	4603      	mov	r3, r0
 8008a06:	75fb      	strb	r3, [r7, #23]
 8008a08:	2319      	movs	r3, #25
 8008a0a:	713b      	strb	r3, [r7, #4]
 8008a0c:	23ed      	movs	r3, #237	; 0xed
 8008a0e:	717b      	strb	r3, [r7, #5]
 8008a10:	2382      	movs	r3, #130	; 0x82
 8008a12:	71bb      	strb	r3, [r7, #6]
 8008a14:	23ae      	movs	r3, #174	; 0xae
 8008a16:	71fb      	strb	r3, [r7, #7]
 8008a18:	23ed      	movs	r3, #237	; 0xed
 8008a1a:	723b      	strb	r3, [r7, #8]
 8008a1c:	2321      	movs	r3, #33	; 0x21
 8008a1e:	727b      	strb	r3, [r7, #9]
 8008a20:	234c      	movs	r3, #76	; 0x4c
 8008a22:	72bb      	strb	r3, [r7, #10]
 8008a24:	239d      	movs	r3, #157	; 0x9d
 8008a26:	72fb      	strb	r3, [r7, #11]
 8008a28:	2341      	movs	r3, #65	; 0x41
 8008a2a:	733b      	strb	r3, [r7, #12]
 8008a2c:	2345      	movs	r3, #69	; 0x45
 8008a2e:	737b      	strb	r3, [r7, #13]
 8008a30:	2322      	movs	r3, #34	; 0x22
 8008a32:	73bb      	strb	r3, [r7, #14]
 8008a34:	238e      	movs	r3, #142	; 0x8e
 8008a36:	73fb      	strb	r3, [r7, #15]
 8008a38:	2300      	movs	r3, #0
 8008a3a:	743b      	strb	r3, [r7, #16]
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	747b      	strb	r3, [r7, #17]
 8008a40:	2300      	movs	r3, #0
 8008a42:	74bb      	strb	r3, [r7, #18]
 8008a44:	2300      	movs	r3, #0
 8008a46:	74fb      	strb	r3, [r7, #19]
 8008a48:	4b0e      	ldr	r3, [pc, #56]	; (8008a84 <SVCCTL_InitCustomSvc+0xe0>)
 8008a4a:	8818      	ldrh	r0, [r3, #0]
 8008a4c:	4b0e      	ldr	r3, [pc, #56]	; (8008a88 <SVCCTL_InitCustomSvc+0xe4>)
 8008a4e:	781b      	ldrb	r3, [r3, #0]
 8008a50:	b29b      	uxth	r3, r3
 8008a52:	1d3a      	adds	r2, r7, #4
 8008a54:	490d      	ldr	r1, [pc, #52]	; (8008a8c <SVCCTL_InitCustomSvc+0xe8>)
 8008a56:	9105      	str	r1, [sp, #20]
 8008a58:	2100      	movs	r1, #0
 8008a5a:	9104      	str	r1, [sp, #16]
 8008a5c:	2110      	movs	r1, #16
 8008a5e:	9103      	str	r1, [sp, #12]
 8008a60:	2101      	movs	r1, #1
 8008a62:	9102      	str	r1, [sp, #8]
 8008a64:	2100      	movs	r1, #0
 8008a66:	9101      	str	r1, [sp, #4]
 8008a68:	2108      	movs	r1, #8
 8008a6a:	9100      	str	r1, [sp, #0]
 8008a6c:	2102      	movs	r1, #2
 8008a6e:	f7fe f88f 	bl	8006b90 <aci_gatt_add_char>
 8008a72:	4603      	mov	r3, r0
 8008a74:	75fb      	strb	r3, [r7, #23]
 8008a76:	bf00      	nop
 8008a78:	3718      	adds	r7, #24
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	bd80      	pop	{r7, pc}
 8008a7e:	bf00      	nop
 8008a80:	08008919 	.word	0x08008919
 8008a84:	20000c78 	.word	0x20000c78
 8008a88:	2000001d 	.word	0x2000001d
 8008a8c:	20000c7a 	.word	0x20000c7a

08008a90 <LL_PWR_EnableBootC2>:
 8008a90:	b480      	push	{r7}
 8008a92:	af00      	add	r7, sp, #0
 8008a94:	4b05      	ldr	r3, [pc, #20]	; (8008aac <LL_PWR_EnableBootC2+0x1c>)
 8008a96:	68db      	ldr	r3, [r3, #12]
 8008a98:	4a04      	ldr	r2, [pc, #16]	; (8008aac <LL_PWR_EnableBootC2+0x1c>)
 8008a9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a9e:	60d3      	str	r3, [r2, #12]
 8008aa0:	bf00      	nop
 8008aa2:	46bd      	mov	sp, r7
 8008aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa8:	4770      	bx	lr
 8008aaa:	bf00      	nop
 8008aac:	58000400 	.word	0x58000400

08008ab0 <LL_C2_EXTI_EnableEvent_32_63>:
 8008ab0:	b480      	push	{r7}
 8008ab2:	b083      	sub	sp, #12
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	6078      	str	r0, [r7, #4]
 8008ab8:	4b06      	ldr	r3, [pc, #24]	; (8008ad4 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8008aba:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8008abe:	4905      	ldr	r1, [pc, #20]	; (8008ad4 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	4313      	orrs	r3, r2
 8008ac4:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
 8008ac8:	bf00      	nop
 8008aca:	370c      	adds	r7, #12
 8008acc:	46bd      	mov	sp, r7
 8008ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad2:	4770      	bx	lr
 8008ad4:	58000800 	.word	0x58000800

08008ad8 <LL_EXTI_EnableRisingTrig_32_63>:
 8008ad8:	b480      	push	{r7}
 8008ada:	b083      	sub	sp, #12
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]
 8008ae0:	4b05      	ldr	r3, [pc, #20]	; (8008af8 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8008ae2:	6a1a      	ldr	r2, [r3, #32]
 8008ae4:	4904      	ldr	r1, [pc, #16]	; (8008af8 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	4313      	orrs	r3, r2
 8008aea:	620b      	str	r3, [r1, #32]
 8008aec:	bf00      	nop
 8008aee:	370c      	adds	r7, #12
 8008af0:	46bd      	mov	sp, r7
 8008af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af6:	4770      	bx	lr
 8008af8:	58000800 	.word	0x58000800

08008afc <LL_AHB3_GRP1_EnableClock>:
 8008afc:	b480      	push	{r7}
 8008afe:	b085      	sub	sp, #20
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	6078      	str	r0, [r7, #4]
 8008b04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008b08:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008b0a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	4313      	orrs	r3, r2
 8008b12:	650b      	str	r3, [r1, #80]	; 0x50
 8008b14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008b18:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	4013      	ands	r3, r2
 8008b1e:	60fb      	str	r3, [r7, #12]
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	bf00      	nop
 8008b24:	3714      	adds	r7, #20
 8008b26:	46bd      	mov	sp, r7
 8008b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2c:	4770      	bx	lr

08008b2e <LL_C2_AHB3_GRP1_EnableClock>:
 8008b2e:	b480      	push	{r7}
 8008b30:	b085      	sub	sp, #20
 8008b32:	af00      	add	r7, sp, #0
 8008b34:	6078      	str	r0, [r7, #4]
 8008b36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008b3a:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8008b3e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	4313      	orrs	r3, r2
 8008b46:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
 8008b4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008b4e:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	4013      	ands	r3, r2
 8008b56:	60fb      	str	r3, [r7, #12]
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	bf00      	nop
 8008b5c:	3714      	adds	r7, #20
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b64:	4770      	bx	lr

08008b66 <LL_C1_IPCC_EnableIT_TXF>:
 8008b66:	b480      	push	{r7}
 8008b68:	b083      	sub	sp, #12
 8008b6a:	af00      	add	r7, sp, #0
 8008b6c:	6078      	str	r0, [r7, #4]
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	601a      	str	r2, [r3, #0]
 8008b7a:	bf00      	nop
 8008b7c:	370c      	adds	r7, #12
 8008b7e:	46bd      	mov	sp, r7
 8008b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b84:	4770      	bx	lr

08008b86 <LL_C1_IPCC_EnableIT_RXO>:
 8008b86:	b480      	push	{r7}
 8008b88:	b083      	sub	sp, #12
 8008b8a:	af00      	add	r7, sp, #0
 8008b8c:	6078      	str	r0, [r7, #4]
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	f043 0201 	orr.w	r2, r3, #1
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	601a      	str	r2, [r3, #0]
 8008b9a:	bf00      	nop
 8008b9c:	370c      	adds	r7, #12
 8008b9e:	46bd      	mov	sp, r7
 8008ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba4:	4770      	bx	lr

08008ba6 <LL_C1_IPCC_EnableTransmitChannel>:
 8008ba6:	b480      	push	{r7}
 8008ba8:	b083      	sub	sp, #12
 8008baa:	af00      	add	r7, sp, #0
 8008bac:	6078      	str	r0, [r7, #4]
 8008bae:	6039      	str	r1, [r7, #0]
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	685a      	ldr	r2, [r3, #4]
 8008bb4:	683b      	ldr	r3, [r7, #0]
 8008bb6:	041b      	lsls	r3, r3, #16
 8008bb8:	43db      	mvns	r3, r3
 8008bba:	401a      	ands	r2, r3
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	605a      	str	r2, [r3, #4]
 8008bc0:	bf00      	nop
 8008bc2:	370c      	adds	r7, #12
 8008bc4:	46bd      	mov	sp, r7
 8008bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bca:	4770      	bx	lr

08008bcc <LL_C1_IPCC_DisableTransmitChannel>:
 8008bcc:	b480      	push	{r7}
 8008bce:	b083      	sub	sp, #12
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	6078      	str	r0, [r7, #4]
 8008bd4:	6039      	str	r1, [r7, #0]
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	685a      	ldr	r2, [r3, #4]
 8008bda:	683b      	ldr	r3, [r7, #0]
 8008bdc:	041b      	lsls	r3, r3, #16
 8008bde:	431a      	orrs	r2, r3
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	605a      	str	r2, [r3, #4]
 8008be4:	bf00      	nop
 8008be6:	370c      	adds	r7, #12
 8008be8:	46bd      	mov	sp, r7
 8008bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bee:	4770      	bx	lr

08008bf0 <LL_C1_IPCC_EnableReceiveChannel>:
 8008bf0:	b480      	push	{r7}
 8008bf2:	b083      	sub	sp, #12
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	6078      	str	r0, [r7, #4]
 8008bf8:	6039      	str	r1, [r7, #0]
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	685a      	ldr	r2, [r3, #4]
 8008bfe:	683b      	ldr	r3, [r7, #0]
 8008c00:	43db      	mvns	r3, r3
 8008c02:	401a      	ands	r2, r3
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	605a      	str	r2, [r3, #4]
 8008c08:	bf00      	nop
 8008c0a:	370c      	adds	r7, #12
 8008c0c:	46bd      	mov	sp, r7
 8008c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c12:	4770      	bx	lr

08008c14 <LL_C1_IPCC_ClearFlag_CHx>:
 8008c14:	b480      	push	{r7}
 8008c16:	b083      	sub	sp, #12
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	6078      	str	r0, [r7, #4]
 8008c1c:	6039      	str	r1, [r7, #0]
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	683a      	ldr	r2, [r7, #0]
 8008c22:	609a      	str	r2, [r3, #8]
 8008c24:	bf00      	nop
 8008c26:	370c      	adds	r7, #12
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2e:	4770      	bx	lr

08008c30 <LL_C1_IPCC_SetFlag_CHx>:
 8008c30:	b480      	push	{r7}
 8008c32:	b083      	sub	sp, #12
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	6078      	str	r0, [r7, #4]
 8008c38:	6039      	str	r1, [r7, #0]
 8008c3a:	683b      	ldr	r3, [r7, #0]
 8008c3c:	041a      	lsls	r2, r3, #16
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	609a      	str	r2, [r3, #8]
 8008c42:	bf00      	nop
 8008c44:	370c      	adds	r7, #12
 8008c46:	46bd      	mov	sp, r7
 8008c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4c:	4770      	bx	lr

08008c4e <LL_C1_IPCC_IsActiveFlag_CHx>:
 8008c4e:	b480      	push	{r7}
 8008c50:	b083      	sub	sp, #12
 8008c52:	af00      	add	r7, sp, #0
 8008c54:	6078      	str	r0, [r7, #4]
 8008c56:	6039      	str	r1, [r7, #0]
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	68da      	ldr	r2, [r3, #12]
 8008c5c:	683b      	ldr	r3, [r7, #0]
 8008c5e:	4013      	ands	r3, r2
 8008c60:	683a      	ldr	r2, [r7, #0]
 8008c62:	429a      	cmp	r2, r3
 8008c64:	d101      	bne.n	8008c6a <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 8008c66:	2301      	movs	r3, #1
 8008c68:	e000      	b.n	8008c6c <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 8008c6a:	2300      	movs	r3, #0
 8008c6c:	4618      	mov	r0, r3
 8008c6e:	370c      	adds	r7, #12
 8008c70:	46bd      	mov	sp, r7
 8008c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c76:	4770      	bx	lr

08008c78 <LL_C2_IPCC_IsActiveFlag_CHx>:
 8008c78:	b480      	push	{r7}
 8008c7a:	b083      	sub	sp, #12
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	6078      	str	r0, [r7, #4]
 8008c80:	6039      	str	r1, [r7, #0]
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	69da      	ldr	r2, [r3, #28]
 8008c86:	683b      	ldr	r3, [r7, #0]
 8008c88:	4013      	ands	r3, r2
 8008c8a:	683a      	ldr	r2, [r7, #0]
 8008c8c:	429a      	cmp	r2, r3
 8008c8e:	d101      	bne.n	8008c94 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 8008c90:	2301      	movs	r3, #1
 8008c92:	e000      	b.n	8008c96 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 8008c94:	2300      	movs	r3, #0
 8008c96:	4618      	mov	r0, r3
 8008c98:	370c      	adds	r7, #12
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca0:	4770      	bx	lr
	...

08008ca4 <HW_IPCC_Rx_Handler>:
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	af00      	add	r7, sp, #0
 8008ca8:	2102      	movs	r1, #2
 8008caa:	4819      	ldr	r0, [pc, #100]	; (8008d10 <HW_IPCC_Rx_Handler+0x6c>)
 8008cac:	f7ff ffe4 	bl	8008c78 <LL_C2_IPCC_IsActiveFlag_CHx>
 8008cb0:	4603      	mov	r3, r0
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d009      	beq.n	8008cca <HW_IPCC_Rx_Handler+0x26>
 8008cb6:	4b16      	ldr	r3, [pc, #88]	; (8008d10 <HW_IPCC_Rx_Handler+0x6c>)
 8008cb8:	685b      	ldr	r3, [r3, #4]
 8008cba:	43db      	mvns	r3, r3
 8008cbc:	f003 0302 	and.w	r3, r3, #2
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d002      	beq.n	8008cca <HW_IPCC_Rx_Handler+0x26>
 8008cc4:	f000 f8da 	bl	8008e7c <HW_IPCC_SYS_EvtHandler>
 8008cc8:	e01f      	b.n	8008d0a <HW_IPCC_Rx_Handler+0x66>
 8008cca:	2101      	movs	r1, #1
 8008ccc:	4810      	ldr	r0, [pc, #64]	; (8008d10 <HW_IPCC_Rx_Handler+0x6c>)
 8008cce:	f7ff ffd3 	bl	8008c78 <LL_C2_IPCC_IsActiveFlag_CHx>
 8008cd2:	4603      	mov	r3, r0
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d008      	beq.n	8008cea <HW_IPCC_Rx_Handler+0x46>
 8008cd8:	4b0d      	ldr	r3, [pc, #52]	; (8008d10 <HW_IPCC_Rx_Handler+0x6c>)
 8008cda:	685b      	ldr	r3, [r3, #4]
 8008cdc:	f003 0301 	and.w	r3, r3, #1
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d102      	bne.n	8008cea <HW_IPCC_Rx_Handler+0x46>
 8008ce4:	f000 f88e 	bl	8008e04 <HW_IPCC_BLE_EvtHandler>
 8008ce8:	e00f      	b.n	8008d0a <HW_IPCC_Rx_Handler+0x66>
 8008cea:	2108      	movs	r1, #8
 8008cec:	4808      	ldr	r0, [pc, #32]	; (8008d10 <HW_IPCC_Rx_Handler+0x6c>)
 8008cee:	f7ff ffc3 	bl	8008c78 <LL_C2_IPCC_IsActiveFlag_CHx>
 8008cf2:	4603      	mov	r3, r0
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d009      	beq.n	8008d0c <HW_IPCC_Rx_Handler+0x68>
 8008cf8:	4b05      	ldr	r3, [pc, #20]	; (8008d10 <HW_IPCC_Rx_Handler+0x6c>)
 8008cfa:	685b      	ldr	r3, [r3, #4]
 8008cfc:	43db      	mvns	r3, r3
 8008cfe:	f003 0308 	and.w	r3, r3, #8
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d002      	beq.n	8008d0c <HW_IPCC_Rx_Handler+0x68>
 8008d06:	f000 f905 	bl	8008f14 <HW_IPCC_TRACES_EvtHandler>
 8008d0a:	bf00      	nop
 8008d0c:	bf00      	nop
 8008d0e:	bd80      	pop	{r7, pc}
 8008d10:	58000c00 	.word	0x58000c00

08008d14 <HW_IPCC_Tx_Handler>:
 8008d14:	b580      	push	{r7, lr}
 8008d16:	af00      	add	r7, sp, #0
 8008d18:	2102      	movs	r1, #2
 8008d1a:	481a      	ldr	r0, [pc, #104]	; (8008d84 <HW_IPCC_Tx_Handler+0x70>)
 8008d1c:	f7ff ff97 	bl	8008c4e <LL_C1_IPCC_IsActiveFlag_CHx>
 8008d20:	4603      	mov	r3, r0
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d109      	bne.n	8008d3a <HW_IPCC_Tx_Handler+0x26>
 8008d26:	4b17      	ldr	r3, [pc, #92]	; (8008d84 <HW_IPCC_Tx_Handler+0x70>)
 8008d28:	685b      	ldr	r3, [r3, #4]
 8008d2a:	43db      	mvns	r3, r3
 8008d2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d002      	beq.n	8008d3a <HW_IPCC_Tx_Handler+0x26>
 8008d34:	f000 f896 	bl	8008e64 <HW_IPCC_SYS_CmdEvtHandler>
 8008d38:	e020      	b.n	8008d7c <HW_IPCC_Tx_Handler+0x68>
 8008d3a:	2108      	movs	r1, #8
 8008d3c:	4811      	ldr	r0, [pc, #68]	; (8008d84 <HW_IPCC_Tx_Handler+0x70>)
 8008d3e:	f7ff ff86 	bl	8008c4e <LL_C1_IPCC_IsActiveFlag_CHx>
 8008d42:	4603      	mov	r3, r0
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d109      	bne.n	8008d5c <HW_IPCC_Tx_Handler+0x48>
 8008d48:	4b0e      	ldr	r3, [pc, #56]	; (8008d84 <HW_IPCC_Tx_Handler+0x70>)
 8008d4a:	685b      	ldr	r3, [r3, #4]
 8008d4c:	43db      	mvns	r3, r3
 8008d4e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d002      	beq.n	8008d5c <HW_IPCC_Tx_Handler+0x48>
 8008d56:	f000 f8bf 	bl	8008ed8 <HW_IPCC_MM_FreeBufHandler>
 8008d5a:	e00f      	b.n	8008d7c <HW_IPCC_Tx_Handler+0x68>
 8008d5c:	2120      	movs	r1, #32
 8008d5e:	4809      	ldr	r0, [pc, #36]	; (8008d84 <HW_IPCC_Tx_Handler+0x70>)
 8008d60:	f7ff ff75 	bl	8008c4e <LL_C1_IPCC_IsActiveFlag_CHx>
 8008d64:	4603      	mov	r3, r0
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d109      	bne.n	8008d7e <HW_IPCC_Tx_Handler+0x6a>
 8008d6a:	4b06      	ldr	r3, [pc, #24]	; (8008d84 <HW_IPCC_Tx_Handler+0x70>)
 8008d6c:	685b      	ldr	r3, [r3, #4]
 8008d6e:	43db      	mvns	r3, r3
 8008d70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d002      	beq.n	8008d7e <HW_IPCC_Tx_Handler+0x6a>
 8008d78:	f000 f850 	bl	8008e1c <HW_IPCC_BLE_AclDataEvtHandler>
 8008d7c:	bf00      	nop
 8008d7e:	bf00      	nop
 8008d80:	bd80      	pop	{r7, pc}
 8008d82:	bf00      	nop
 8008d84:	58000c00 	.word	0x58000c00

08008d88 <HW_IPCC_Enable>:
 8008d88:	b580      	push	{r7, lr}
 8008d8a:	af00      	add	r7, sp, #0
 8008d8c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8008d90:	f7ff fecd 	bl	8008b2e <LL_C2_AHB3_GRP1_EnableClock>
 8008d94:	f44f 7000 	mov.w	r0, #512	; 0x200
 8008d98:	f7ff fe9e 	bl	8008ad8 <LL_EXTI_EnableRisingTrig_32_63>
 8008d9c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8008da0:	f7ff fe86 	bl	8008ab0 <LL_C2_EXTI_EnableEvent_32_63>
 8008da4:	bf40      	sev
 8008da6:	bf20      	wfe
 8008da8:	f7ff fe72 	bl	8008a90 <LL_PWR_EnableBootC2>
 8008dac:	bf00      	nop
 8008dae:	bd80      	pop	{r7, pc}

08008db0 <HW_IPCC_Init>:
 8008db0:	b580      	push	{r7, lr}
 8008db2:	af00      	add	r7, sp, #0
 8008db4:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8008db8:	f7ff fea0 	bl	8008afc <LL_AHB3_GRP1_EnableClock>
 8008dbc:	4806      	ldr	r0, [pc, #24]	; (8008dd8 <HW_IPCC_Init+0x28>)
 8008dbe:	f7ff fee2 	bl	8008b86 <LL_C1_IPCC_EnableIT_RXO>
 8008dc2:	4805      	ldr	r0, [pc, #20]	; (8008dd8 <HW_IPCC_Init+0x28>)
 8008dc4:	f7ff fecf 	bl	8008b66 <LL_C1_IPCC_EnableIT_TXF>
 8008dc8:	202c      	movs	r0, #44	; 0x2c
 8008dca:	f7f9 fc9e 	bl	800270a <HAL_NVIC_EnableIRQ>
 8008dce:	202d      	movs	r0, #45	; 0x2d
 8008dd0:	f7f9 fc9b 	bl	800270a <HAL_NVIC_EnableIRQ>
 8008dd4:	bf00      	nop
 8008dd6:	bd80      	pop	{r7, pc}
 8008dd8:	58000c00 	.word	0x58000c00

08008ddc <HW_IPCC_BLE_Init>:
 8008ddc:	b580      	push	{r7, lr}
 8008dde:	af00      	add	r7, sp, #0
 8008de0:	2101      	movs	r1, #1
 8008de2:	4802      	ldr	r0, [pc, #8]	; (8008dec <HW_IPCC_BLE_Init+0x10>)
 8008de4:	f7ff ff04 	bl	8008bf0 <LL_C1_IPCC_EnableReceiveChannel>
 8008de8:	bf00      	nop
 8008dea:	bd80      	pop	{r7, pc}
 8008dec:	58000c00 	.word	0x58000c00

08008df0 <HW_IPCC_BLE_SendCmd>:
 8008df0:	b580      	push	{r7, lr}
 8008df2:	af00      	add	r7, sp, #0
 8008df4:	2101      	movs	r1, #1
 8008df6:	4802      	ldr	r0, [pc, #8]	; (8008e00 <HW_IPCC_BLE_SendCmd+0x10>)
 8008df8:	f7ff ff1a 	bl	8008c30 <LL_C1_IPCC_SetFlag_CHx>
 8008dfc:	bf00      	nop
 8008dfe:	bd80      	pop	{r7, pc}
 8008e00:	58000c00 	.word	0x58000c00

08008e04 <HW_IPCC_BLE_EvtHandler>:
 8008e04:	b580      	push	{r7, lr}
 8008e06:	af00      	add	r7, sp, #0
 8008e08:	f7fe ffde 	bl	8007dc8 <HW_IPCC_BLE_RxEvtNot>
 8008e0c:	2101      	movs	r1, #1
 8008e0e:	4802      	ldr	r0, [pc, #8]	; (8008e18 <HW_IPCC_BLE_EvtHandler+0x14>)
 8008e10:	f7ff ff00 	bl	8008c14 <LL_C1_IPCC_ClearFlag_CHx>
 8008e14:	bf00      	nop
 8008e16:	bd80      	pop	{r7, pc}
 8008e18:	58000c00 	.word	0x58000c00

08008e1c <HW_IPCC_BLE_AclDataEvtHandler>:
 8008e1c:	b580      	push	{r7, lr}
 8008e1e:	af00      	add	r7, sp, #0
 8008e20:	2120      	movs	r1, #32
 8008e22:	4803      	ldr	r0, [pc, #12]	; (8008e30 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 8008e24:	f7ff fed2 	bl	8008bcc <LL_C1_IPCC_DisableTransmitChannel>
 8008e28:	f7fe fffe 	bl	8007e28 <HW_IPCC_BLE_AclDataAckNot>
 8008e2c:	bf00      	nop
 8008e2e:	bd80      	pop	{r7, pc}
 8008e30:	58000c00 	.word	0x58000c00

08008e34 <HW_IPCC_SYS_Init>:
 8008e34:	b580      	push	{r7, lr}
 8008e36:	af00      	add	r7, sp, #0
 8008e38:	2102      	movs	r1, #2
 8008e3a:	4802      	ldr	r0, [pc, #8]	; (8008e44 <HW_IPCC_SYS_Init+0x10>)
 8008e3c:	f7ff fed8 	bl	8008bf0 <LL_C1_IPCC_EnableReceiveChannel>
 8008e40:	bf00      	nop
 8008e42:	bd80      	pop	{r7, pc}
 8008e44:	58000c00 	.word	0x58000c00

08008e48 <HW_IPCC_SYS_SendCmd>:
 8008e48:	b580      	push	{r7, lr}
 8008e4a:	af00      	add	r7, sp, #0
 8008e4c:	2102      	movs	r1, #2
 8008e4e:	4804      	ldr	r0, [pc, #16]	; (8008e60 <HW_IPCC_SYS_SendCmd+0x18>)
 8008e50:	f7ff feee 	bl	8008c30 <LL_C1_IPCC_SetFlag_CHx>
 8008e54:	2102      	movs	r1, #2
 8008e56:	4802      	ldr	r0, [pc, #8]	; (8008e60 <HW_IPCC_SYS_SendCmd+0x18>)
 8008e58:	f7ff fea5 	bl	8008ba6 <LL_C1_IPCC_EnableTransmitChannel>
 8008e5c:	bf00      	nop
 8008e5e:	bd80      	pop	{r7, pc}
 8008e60:	58000c00 	.word	0x58000c00

08008e64 <HW_IPCC_SYS_CmdEvtHandler>:
 8008e64:	b580      	push	{r7, lr}
 8008e66:	af00      	add	r7, sp, #0
 8008e68:	2102      	movs	r1, #2
 8008e6a:	4803      	ldr	r0, [pc, #12]	; (8008e78 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 8008e6c:	f7ff feae 	bl	8008bcc <LL_C1_IPCC_DisableTransmitChannel>
 8008e70:	f7ff f82a 	bl	8007ec8 <HW_IPCC_SYS_CmdEvtNot>
 8008e74:	bf00      	nop
 8008e76:	bd80      	pop	{r7, pc}
 8008e78:	58000c00 	.word	0x58000c00

08008e7c <HW_IPCC_SYS_EvtHandler>:
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	af00      	add	r7, sp, #0
 8008e80:	f7ff f838 	bl	8007ef4 <HW_IPCC_SYS_EvtNot>
 8008e84:	2102      	movs	r1, #2
 8008e86:	4802      	ldr	r0, [pc, #8]	; (8008e90 <HW_IPCC_SYS_EvtHandler+0x14>)
 8008e88:	f7ff fec4 	bl	8008c14 <LL_C1_IPCC_ClearFlag_CHx>
 8008e8c:	bf00      	nop
 8008e8e:	bd80      	pop	{r7, pc}
 8008e90:	58000c00 	.word	0x58000c00

08008e94 <HW_IPCC_MM_SendFreeBuf>:
 8008e94:	b580      	push	{r7, lr}
 8008e96:	b082      	sub	sp, #8
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	6078      	str	r0, [r7, #4]
 8008e9c:	2108      	movs	r1, #8
 8008e9e:	480c      	ldr	r0, [pc, #48]	; (8008ed0 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8008ea0:	f7ff fed5 	bl	8008c4e <LL_C1_IPCC_IsActiveFlag_CHx>
 8008ea4:	4603      	mov	r3, r0
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d007      	beq.n	8008eba <HW_IPCC_MM_SendFreeBuf+0x26>
 8008eaa:	4a0a      	ldr	r2, [pc, #40]	; (8008ed4 <HW_IPCC_MM_SendFreeBuf+0x40>)
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	6013      	str	r3, [r2, #0]
 8008eb0:	2108      	movs	r1, #8
 8008eb2:	4807      	ldr	r0, [pc, #28]	; (8008ed0 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8008eb4:	f7ff fe77 	bl	8008ba6 <LL_C1_IPCC_EnableTransmitChannel>
 8008eb8:	e006      	b.n	8008ec8 <HW_IPCC_MM_SendFreeBuf+0x34>
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	4798      	blx	r3
 8008ebe:	2108      	movs	r1, #8
 8008ec0:	4803      	ldr	r0, [pc, #12]	; (8008ed0 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8008ec2:	f7ff feb5 	bl	8008c30 <LL_C1_IPCC_SetFlag_CHx>
 8008ec6:	bf00      	nop
 8008ec8:	3708      	adds	r7, #8
 8008eca:	46bd      	mov	sp, r7
 8008ecc:	bd80      	pop	{r7, pc}
 8008ece:	bf00      	nop
 8008ed0:	58000c00 	.word	0x58000c00
 8008ed4:	20000c7c 	.word	0x20000c7c

08008ed8 <HW_IPCC_MM_FreeBufHandler>:
 8008ed8:	b580      	push	{r7, lr}
 8008eda:	af00      	add	r7, sp, #0
 8008edc:	2108      	movs	r1, #8
 8008ede:	4806      	ldr	r0, [pc, #24]	; (8008ef8 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8008ee0:	f7ff fe74 	bl	8008bcc <LL_C1_IPCC_DisableTransmitChannel>
 8008ee4:	4b05      	ldr	r3, [pc, #20]	; (8008efc <HW_IPCC_MM_FreeBufHandler+0x24>)
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	4798      	blx	r3
 8008eea:	2108      	movs	r1, #8
 8008eec:	4802      	ldr	r0, [pc, #8]	; (8008ef8 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8008eee:	f7ff fe9f 	bl	8008c30 <LL_C1_IPCC_SetFlag_CHx>
 8008ef2:	bf00      	nop
 8008ef4:	bd80      	pop	{r7, pc}
 8008ef6:	bf00      	nop
 8008ef8:	58000c00 	.word	0x58000c00
 8008efc:	20000c7c 	.word	0x20000c7c

08008f00 <HW_IPCC_TRACES_Init>:
 8008f00:	b580      	push	{r7, lr}
 8008f02:	af00      	add	r7, sp, #0
 8008f04:	2108      	movs	r1, #8
 8008f06:	4802      	ldr	r0, [pc, #8]	; (8008f10 <HW_IPCC_TRACES_Init+0x10>)
 8008f08:	f7ff fe72 	bl	8008bf0 <LL_C1_IPCC_EnableReceiveChannel>
 8008f0c:	bf00      	nop
 8008f0e:	bd80      	pop	{r7, pc}
 8008f10:	58000c00 	.word	0x58000c00

08008f14 <HW_IPCC_TRACES_EvtHandler>:
 8008f14:	b580      	push	{r7, lr}
 8008f16:	af00      	add	r7, sp, #0
 8008f18:	f7ff f894 	bl	8008044 <HW_IPCC_TRACES_EvtNot>
 8008f1c:	2108      	movs	r1, #8
 8008f1e:	4802      	ldr	r0, [pc, #8]	; (8008f28 <HW_IPCC_TRACES_EvtHandler+0x14>)
 8008f20:	f7ff fe78 	bl	8008c14 <LL_C1_IPCC_ClearFlag_CHx>
 8008f24:	bf00      	nop
 8008f26:	bd80      	pop	{r7, pc}
 8008f28:	58000c00 	.word	0x58000c00

08008f2c <UTIL_LPM_Init>:
 8008f2c:	b480      	push	{r7}
 8008f2e:	af00      	add	r7, sp, #0
 8008f30:	4b05      	ldr	r3, [pc, #20]	; (8008f48 <UTIL_LPM_Init+0x1c>)
 8008f32:	2200      	movs	r2, #0
 8008f34:	601a      	str	r2, [r3, #0]
 8008f36:	4b05      	ldr	r3, [pc, #20]	; (8008f4c <UTIL_LPM_Init+0x20>)
 8008f38:	2200      	movs	r2, #0
 8008f3a:	601a      	str	r2, [r3, #0]
 8008f3c:	bf00      	nop
 8008f3e:	46bd      	mov	sp, r7
 8008f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f44:	4770      	bx	lr
 8008f46:	bf00      	nop
 8008f48:	20000c80 	.word	0x20000c80
 8008f4c:	20000c84 	.word	0x20000c84

08008f50 <UTIL_LPM_SetOffMode>:
 8008f50:	b480      	push	{r7}
 8008f52:	b087      	sub	sp, #28
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	6078      	str	r0, [r7, #4]
 8008f58:	460b      	mov	r3, r1
 8008f5a:	70fb      	strb	r3, [r7, #3]
 8008f5c:	f3ef 8310 	mrs	r3, PRIMASK
 8008f60:	613b      	str	r3, [r7, #16]
 8008f62:	693b      	ldr	r3, [r7, #16]
 8008f64:	617b      	str	r3, [r7, #20]
 8008f66:	b672      	cpsid	i
 8008f68:	bf00      	nop
 8008f6a:	78fb      	ldrb	r3, [r7, #3]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d008      	beq.n	8008f82 <UTIL_LPM_SetOffMode+0x32>
 8008f70:	2b01      	cmp	r3, #1
 8008f72:	d10e      	bne.n	8008f92 <UTIL_LPM_SetOffMode+0x42>
 8008f74:	4b0d      	ldr	r3, [pc, #52]	; (8008fac <UTIL_LPM_SetOffMode+0x5c>)
 8008f76:	681a      	ldr	r2, [r3, #0]
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	4313      	orrs	r3, r2
 8008f7c:	4a0b      	ldr	r2, [pc, #44]	; (8008fac <UTIL_LPM_SetOffMode+0x5c>)
 8008f7e:	6013      	str	r3, [r2, #0]
 8008f80:	e008      	b.n	8008f94 <UTIL_LPM_SetOffMode+0x44>
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	43da      	mvns	r2, r3
 8008f86:	4b09      	ldr	r3, [pc, #36]	; (8008fac <UTIL_LPM_SetOffMode+0x5c>)
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	4013      	ands	r3, r2
 8008f8c:	4a07      	ldr	r2, [pc, #28]	; (8008fac <UTIL_LPM_SetOffMode+0x5c>)
 8008f8e:	6013      	str	r3, [r2, #0]
 8008f90:	e000      	b.n	8008f94 <UTIL_LPM_SetOffMode+0x44>
 8008f92:	bf00      	nop
 8008f94:	697b      	ldr	r3, [r7, #20]
 8008f96:	60fb      	str	r3, [r7, #12]
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	f383 8810 	msr	PRIMASK, r3
 8008f9e:	bf00      	nop
 8008fa0:	bf00      	nop
 8008fa2:	371c      	adds	r7, #28
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008faa:	4770      	bx	lr
 8008fac:	20000c84 	.word	0x20000c84

08008fb0 <UTIL_SEQ_Run>:
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	b090      	sub	sp, #64	; 0x40
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	6078      	str	r0, [r7, #4]
 8008fb8:	4b73      	ldr	r3, [pc, #460]	; (8009188 <UTIL_SEQ_Run+0x1d8>)
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	62bb      	str	r3, [r7, #40]	; 0x28
 8008fbe:	4b72      	ldr	r3, [pc, #456]	; (8009188 <UTIL_SEQ_Run+0x1d8>)
 8008fc0:	681a      	ldr	r2, [r3, #0]
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	4013      	ands	r3, r2
 8008fc6:	4a70      	ldr	r2, [pc, #448]	; (8009188 <UTIL_SEQ_Run+0x1d8>)
 8008fc8:	6013      	str	r3, [r2, #0]
 8008fca:	4b70      	ldr	r3, [pc, #448]	; (800918c <UTIL_SEQ_Run+0x1dc>)
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	63bb      	str	r3, [r7, #56]	; 0x38
 8008fd0:	4b6f      	ldr	r3, [pc, #444]	; (8009190 <UTIL_SEQ_Run+0x1e0>)
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	637b      	str	r3, [r7, #52]	; 0x34
 8008fd6:	4b6f      	ldr	r3, [pc, #444]	; (8009194 <UTIL_SEQ_Run+0x1e4>)
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	633b      	str	r3, [r7, #48]	; 0x30
 8008fdc:	4b6e      	ldr	r3, [pc, #440]	; (8009198 <UTIL_SEQ_Run+0x1e8>)
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008fe2:	e08d      	b.n	8009100 <UTIL_SEQ_Run+0x150>
 8008fe4:	2300      	movs	r3, #0
 8008fe6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008fe8:	e002      	b.n	8008ff0 <UTIL_SEQ_Run+0x40>
 8008fea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008fec:	3301      	adds	r3, #1
 8008fee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008ff0:	4a6a      	ldr	r2, [pc, #424]	; (800919c <UTIL_SEQ_Run+0x1ec>)
 8008ff2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ff4:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8008ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ffa:	401a      	ands	r2, r3
 8008ffc:	4b62      	ldr	r3, [pc, #392]	; (8009188 <UTIL_SEQ_Run+0x1d8>)
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	4013      	ands	r3, r2
 8009002:	2b00      	cmp	r3, #0
 8009004:	d0f1      	beq.n	8008fea <UTIL_SEQ_Run+0x3a>
 8009006:	4a65      	ldr	r2, [pc, #404]	; (800919c <UTIL_SEQ_Run+0x1ec>)
 8009008:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800900a:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800900e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009010:	401a      	ands	r2, r3
 8009012:	4b5d      	ldr	r3, [pc, #372]	; (8009188 <UTIL_SEQ_Run+0x1d8>)
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	4013      	ands	r3, r2
 8009018:	627b      	str	r3, [r7, #36]	; 0x24
 800901a:	4a60      	ldr	r2, [pc, #384]	; (800919c <UTIL_SEQ_Run+0x1ec>)
 800901c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800901e:	00db      	lsls	r3, r3, #3
 8009020:	4413      	add	r3, r2
 8009022:	685a      	ldr	r2, [r3, #4]
 8009024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009026:	4013      	ands	r3, r2
 8009028:	2b00      	cmp	r3, #0
 800902a:	d106      	bne.n	800903a <UTIL_SEQ_Run+0x8a>
 800902c:	4a5b      	ldr	r2, [pc, #364]	; (800919c <UTIL_SEQ_Run+0x1ec>)
 800902e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009030:	00db      	lsls	r3, r3, #3
 8009032:	4413      	add	r3, r2
 8009034:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009038:	605a      	str	r2, [r3, #4]
 800903a:	4a58      	ldr	r2, [pc, #352]	; (800919c <UTIL_SEQ_Run+0x1ec>)
 800903c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800903e:	00db      	lsls	r3, r3, #3
 8009040:	4413      	add	r3, r2
 8009042:	685a      	ldr	r2, [r3, #4]
 8009044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009046:	4013      	ands	r3, r2
 8009048:	4618      	mov	r0, r3
 800904a:	f000 f9b3 	bl	80093b4 <SEQ_BitPosition>
 800904e:	4603      	mov	r3, r0
 8009050:	461a      	mov	r2, r3
 8009052:	4b53      	ldr	r3, [pc, #332]	; (80091a0 <UTIL_SEQ_Run+0x1f0>)
 8009054:	601a      	str	r2, [r3, #0]
 8009056:	4a51      	ldr	r2, [pc, #324]	; (800919c <UTIL_SEQ_Run+0x1ec>)
 8009058:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800905a:	00db      	lsls	r3, r3, #3
 800905c:	4413      	add	r3, r2
 800905e:	685a      	ldr	r2, [r3, #4]
 8009060:	4b4f      	ldr	r3, [pc, #316]	; (80091a0 <UTIL_SEQ_Run+0x1f0>)
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	2101      	movs	r1, #1
 8009066:	fa01 f303 	lsl.w	r3, r1, r3
 800906a:	43db      	mvns	r3, r3
 800906c:	401a      	ands	r2, r3
 800906e:	494b      	ldr	r1, [pc, #300]	; (800919c <UTIL_SEQ_Run+0x1ec>)
 8009070:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009072:	00db      	lsls	r3, r3, #3
 8009074:	440b      	add	r3, r1
 8009076:	605a      	str	r2, [r3, #4]
 8009078:	f3ef 8310 	mrs	r3, PRIMASK
 800907c:	61bb      	str	r3, [r7, #24]
 800907e:	69bb      	ldr	r3, [r7, #24]
 8009080:	623b      	str	r3, [r7, #32]
 8009082:	b672      	cpsid	i
 8009084:	bf00      	nop
 8009086:	4b46      	ldr	r3, [pc, #280]	; (80091a0 <UTIL_SEQ_Run+0x1f0>)
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	2201      	movs	r2, #1
 800908c:	fa02 f303 	lsl.w	r3, r2, r3
 8009090:	43da      	mvns	r2, r3
 8009092:	4b3e      	ldr	r3, [pc, #248]	; (800918c <UTIL_SEQ_Run+0x1dc>)
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	4013      	ands	r3, r2
 8009098:	4a3c      	ldr	r2, [pc, #240]	; (800918c <UTIL_SEQ_Run+0x1dc>)
 800909a:	6013      	str	r3, [r2, #0]
 800909c:	2302      	movs	r3, #2
 800909e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80090a0:	e013      	b.n	80090ca <UTIL_SEQ_Run+0x11a>
 80090a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090a4:	3b01      	subs	r3, #1
 80090a6:	4a3d      	ldr	r2, [pc, #244]	; (800919c <UTIL_SEQ_Run+0x1ec>)
 80090a8:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 80090ac:	4b3c      	ldr	r3, [pc, #240]	; (80091a0 <UTIL_SEQ_Run+0x1f0>)
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	2201      	movs	r2, #1
 80090b2:	fa02 f303 	lsl.w	r3, r2, r3
 80090b6:	43da      	mvns	r2, r3
 80090b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090ba:	3b01      	subs	r3, #1
 80090bc:	400a      	ands	r2, r1
 80090be:	4937      	ldr	r1, [pc, #220]	; (800919c <UTIL_SEQ_Run+0x1ec>)
 80090c0:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 80090c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090c6:	3b01      	subs	r3, #1
 80090c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80090ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d1e8      	bne.n	80090a2 <UTIL_SEQ_Run+0xf2>
 80090d0:	6a3b      	ldr	r3, [r7, #32]
 80090d2:	617b      	str	r3, [r7, #20]
 80090d4:	697b      	ldr	r3, [r7, #20]
 80090d6:	f383 8810 	msr	PRIMASK, r3
 80090da:	bf00      	nop
 80090dc:	4b30      	ldr	r3, [pc, #192]	; (80091a0 <UTIL_SEQ_Run+0x1f0>)
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	4a30      	ldr	r2, [pc, #192]	; (80091a4 <UTIL_SEQ_Run+0x1f4>)
 80090e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80090e6:	4798      	blx	r3
 80090e8:	4b28      	ldr	r3, [pc, #160]	; (800918c <UTIL_SEQ_Run+0x1dc>)
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	63bb      	str	r3, [r7, #56]	; 0x38
 80090ee:	4b28      	ldr	r3, [pc, #160]	; (8009190 <UTIL_SEQ_Run+0x1e0>)
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	637b      	str	r3, [r7, #52]	; 0x34
 80090f4:	4b27      	ldr	r3, [pc, #156]	; (8009194 <UTIL_SEQ_Run+0x1e4>)
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	633b      	str	r3, [r7, #48]	; 0x30
 80090fa:	4b27      	ldr	r3, [pc, #156]	; (8009198 <UTIL_SEQ_Run+0x1e8>)
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009100:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009104:	401a      	ands	r2, r3
 8009106:	4b20      	ldr	r3, [pc, #128]	; (8009188 <UTIL_SEQ_Run+0x1d8>)
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	4013      	ands	r3, r2
 800910c:	2b00      	cmp	r3, #0
 800910e:	d005      	beq.n	800911c <UTIL_SEQ_Run+0x16c>
 8009110:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009114:	4013      	ands	r3, r2
 8009116:	2b00      	cmp	r3, #0
 8009118:	f43f af64 	beq.w	8008fe4 <UTIL_SEQ_Run+0x34>
 800911c:	4b20      	ldr	r3, [pc, #128]	; (80091a0 <UTIL_SEQ_Run+0x1f0>)
 800911e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009122:	601a      	str	r2, [r3, #0]
 8009124:	f000 f938 	bl	8009398 <UTIL_SEQ_PreIdle>
 8009128:	f3ef 8310 	mrs	r3, PRIMASK
 800912c:	613b      	str	r3, [r7, #16]
 800912e:	693b      	ldr	r3, [r7, #16]
 8009130:	61fb      	str	r3, [r7, #28]
 8009132:	b672      	cpsid	i
 8009134:	bf00      	nop
 8009136:	4b15      	ldr	r3, [pc, #84]	; (800918c <UTIL_SEQ_Run+0x1dc>)
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	63bb      	str	r3, [r7, #56]	; 0x38
 800913c:	4b14      	ldr	r3, [pc, #80]	; (8009190 <UTIL_SEQ_Run+0x1e0>)
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	637b      	str	r3, [r7, #52]	; 0x34
 8009142:	4b14      	ldr	r3, [pc, #80]	; (8009194 <UTIL_SEQ_Run+0x1e4>)
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	633b      	str	r3, [r7, #48]	; 0x30
 8009148:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800914a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800914c:	401a      	ands	r2, r3
 800914e:	4b0e      	ldr	r3, [pc, #56]	; (8009188 <UTIL_SEQ_Run+0x1d8>)
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	4013      	ands	r3, r2
 8009154:	2b00      	cmp	r3, #0
 8009156:	d107      	bne.n	8009168 <UTIL_SEQ_Run+0x1b8>
 8009158:	4b0f      	ldr	r3, [pc, #60]	; (8009198 <UTIL_SEQ_Run+0x1e8>)
 800915a:	681a      	ldr	r2, [r3, #0]
 800915c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800915e:	4013      	ands	r3, r2
 8009160:	2b00      	cmp	r3, #0
 8009162:	d101      	bne.n	8009168 <UTIL_SEQ_Run+0x1b8>
 8009164:	f7f7 fd94 	bl	8000c90 <UTIL_SEQ_Idle>
 8009168:	69fb      	ldr	r3, [r7, #28]
 800916a:	60fb      	str	r3, [r7, #12]
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	f383 8810 	msr	PRIMASK, r3
 8009172:	bf00      	nop
 8009174:	f000 f917 	bl	80093a6 <UTIL_SEQ_PostIdle>
 8009178:	4a03      	ldr	r2, [pc, #12]	; (8009188 <UTIL_SEQ_Run+0x1d8>)
 800917a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800917c:	6013      	str	r3, [r2, #0]
 800917e:	bf00      	nop
 8009180:	3740      	adds	r7, #64	; 0x40
 8009182:	46bd      	mov	sp, r7
 8009184:	bd80      	pop	{r7, pc}
 8009186:	bf00      	nop
 8009188:	20000024 	.word	0x20000024
 800918c:	20000c88 	.word	0x20000c88
 8009190:	20000c8c 	.word	0x20000c8c
 8009194:	20000020 	.word	0x20000020
 8009198:	20000c90 	.word	0x20000c90
 800919c:	20000d18 	.word	0x20000d18
 80091a0:	20000c94 	.word	0x20000c94
 80091a4:	20000c98 	.word	0x20000c98

080091a8 <UTIL_SEQ_RegTask>:
 80091a8:	b580      	push	{r7, lr}
 80091aa:	b088      	sub	sp, #32
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	60f8      	str	r0, [r7, #12]
 80091b0:	60b9      	str	r1, [r7, #8]
 80091b2:	607a      	str	r2, [r7, #4]
 80091b4:	f3ef 8310 	mrs	r3, PRIMASK
 80091b8:	617b      	str	r3, [r7, #20]
 80091ba:	697b      	ldr	r3, [r7, #20]
 80091bc:	61fb      	str	r3, [r7, #28]
 80091be:	b672      	cpsid	i
 80091c0:	bf00      	nop
 80091c2:	68f8      	ldr	r0, [r7, #12]
 80091c4:	f000 f8f6 	bl	80093b4 <SEQ_BitPosition>
 80091c8:	4603      	mov	r3, r0
 80091ca:	4619      	mov	r1, r3
 80091cc:	4a06      	ldr	r2, [pc, #24]	; (80091e8 <UTIL_SEQ_RegTask+0x40>)
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80091d4:	69fb      	ldr	r3, [r7, #28]
 80091d6:	61bb      	str	r3, [r7, #24]
 80091d8:	69bb      	ldr	r3, [r7, #24]
 80091da:	f383 8810 	msr	PRIMASK, r3
 80091de:	bf00      	nop
 80091e0:	bf00      	nop
 80091e2:	3720      	adds	r7, #32
 80091e4:	46bd      	mov	sp, r7
 80091e6:	bd80      	pop	{r7, pc}
 80091e8:	20000c98 	.word	0x20000c98

080091ec <UTIL_SEQ_SetTask>:
 80091ec:	b480      	push	{r7}
 80091ee:	b087      	sub	sp, #28
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	6078      	str	r0, [r7, #4]
 80091f4:	6039      	str	r1, [r7, #0]
 80091f6:	f3ef 8310 	mrs	r3, PRIMASK
 80091fa:	60fb      	str	r3, [r7, #12]
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	617b      	str	r3, [r7, #20]
 8009200:	b672      	cpsid	i
 8009202:	bf00      	nop
 8009204:	4b0d      	ldr	r3, [pc, #52]	; (800923c <UTIL_SEQ_SetTask+0x50>)
 8009206:	681a      	ldr	r2, [r3, #0]
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	4313      	orrs	r3, r2
 800920c:	4a0b      	ldr	r2, [pc, #44]	; (800923c <UTIL_SEQ_SetTask+0x50>)
 800920e:	6013      	str	r3, [r2, #0]
 8009210:	4a0b      	ldr	r2, [pc, #44]	; (8009240 <UTIL_SEQ_SetTask+0x54>)
 8009212:	683b      	ldr	r3, [r7, #0]
 8009214:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	431a      	orrs	r2, r3
 800921c:	4908      	ldr	r1, [pc, #32]	; (8009240 <UTIL_SEQ_SetTask+0x54>)
 800921e:	683b      	ldr	r3, [r7, #0]
 8009220:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 8009224:	697b      	ldr	r3, [r7, #20]
 8009226:	613b      	str	r3, [r7, #16]
 8009228:	693b      	ldr	r3, [r7, #16]
 800922a:	f383 8810 	msr	PRIMASK, r3
 800922e:	bf00      	nop
 8009230:	bf00      	nop
 8009232:	371c      	adds	r7, #28
 8009234:	46bd      	mov	sp, r7
 8009236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923a:	4770      	bx	lr
 800923c:	20000c88 	.word	0x20000c88
 8009240:	20000d18 	.word	0x20000d18

08009244 <UTIL_SEQ_PauseTask>:
 8009244:	b480      	push	{r7}
 8009246:	b087      	sub	sp, #28
 8009248:	af00      	add	r7, sp, #0
 800924a:	6078      	str	r0, [r7, #4]
 800924c:	f3ef 8310 	mrs	r3, PRIMASK
 8009250:	60fb      	str	r3, [r7, #12]
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	617b      	str	r3, [r7, #20]
 8009256:	b672      	cpsid	i
 8009258:	bf00      	nop
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	43da      	mvns	r2, r3
 800925e:	4b08      	ldr	r3, [pc, #32]	; (8009280 <UTIL_SEQ_PauseTask+0x3c>)
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	4013      	ands	r3, r2
 8009264:	4a06      	ldr	r2, [pc, #24]	; (8009280 <UTIL_SEQ_PauseTask+0x3c>)
 8009266:	6013      	str	r3, [r2, #0]
 8009268:	697b      	ldr	r3, [r7, #20]
 800926a:	613b      	str	r3, [r7, #16]
 800926c:	693b      	ldr	r3, [r7, #16]
 800926e:	f383 8810 	msr	PRIMASK, r3
 8009272:	bf00      	nop
 8009274:	bf00      	nop
 8009276:	371c      	adds	r7, #28
 8009278:	46bd      	mov	sp, r7
 800927a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927e:	4770      	bx	lr
 8009280:	20000020 	.word	0x20000020

08009284 <UTIL_SEQ_ResumeTask>:
 8009284:	b480      	push	{r7}
 8009286:	b087      	sub	sp, #28
 8009288:	af00      	add	r7, sp, #0
 800928a:	6078      	str	r0, [r7, #4]
 800928c:	f3ef 8310 	mrs	r3, PRIMASK
 8009290:	60fb      	str	r3, [r7, #12]
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	617b      	str	r3, [r7, #20]
 8009296:	b672      	cpsid	i
 8009298:	bf00      	nop
 800929a:	4b09      	ldr	r3, [pc, #36]	; (80092c0 <UTIL_SEQ_ResumeTask+0x3c>)
 800929c:	681a      	ldr	r2, [r3, #0]
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	4313      	orrs	r3, r2
 80092a2:	4a07      	ldr	r2, [pc, #28]	; (80092c0 <UTIL_SEQ_ResumeTask+0x3c>)
 80092a4:	6013      	str	r3, [r2, #0]
 80092a6:	697b      	ldr	r3, [r7, #20]
 80092a8:	613b      	str	r3, [r7, #16]
 80092aa:	693b      	ldr	r3, [r7, #16]
 80092ac:	f383 8810 	msr	PRIMASK, r3
 80092b0:	bf00      	nop
 80092b2:	bf00      	nop
 80092b4:	371c      	adds	r7, #28
 80092b6:	46bd      	mov	sp, r7
 80092b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092bc:	4770      	bx	lr
 80092be:	bf00      	nop
 80092c0:	20000020 	.word	0x20000020

080092c4 <UTIL_SEQ_SetEvt>:
 80092c4:	b480      	push	{r7}
 80092c6:	b087      	sub	sp, #28
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	6078      	str	r0, [r7, #4]
 80092cc:	f3ef 8310 	mrs	r3, PRIMASK
 80092d0:	60fb      	str	r3, [r7, #12]
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	617b      	str	r3, [r7, #20]
 80092d6:	b672      	cpsid	i
 80092d8:	bf00      	nop
 80092da:	4b09      	ldr	r3, [pc, #36]	; (8009300 <UTIL_SEQ_SetEvt+0x3c>)
 80092dc:	681a      	ldr	r2, [r3, #0]
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	4313      	orrs	r3, r2
 80092e2:	4a07      	ldr	r2, [pc, #28]	; (8009300 <UTIL_SEQ_SetEvt+0x3c>)
 80092e4:	6013      	str	r3, [r2, #0]
 80092e6:	697b      	ldr	r3, [r7, #20]
 80092e8:	613b      	str	r3, [r7, #16]
 80092ea:	693b      	ldr	r3, [r7, #16]
 80092ec:	f383 8810 	msr	PRIMASK, r3
 80092f0:	bf00      	nop
 80092f2:	bf00      	nop
 80092f4:	371c      	adds	r7, #28
 80092f6:	46bd      	mov	sp, r7
 80092f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092fc:	4770      	bx	lr
 80092fe:	bf00      	nop
 8009300:	20000c8c 	.word	0x20000c8c

08009304 <UTIL_SEQ_WaitEvt>:
 8009304:	b580      	push	{r7, lr}
 8009306:	b088      	sub	sp, #32
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
 800930c:	4b1f      	ldr	r3, [pc, #124]	; (800938c <UTIL_SEQ_WaitEvt+0x88>)
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	61bb      	str	r3, [r7, #24]
 8009312:	4b1e      	ldr	r3, [pc, #120]	; (800938c <UTIL_SEQ_WaitEvt+0x88>)
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800931a:	d102      	bne.n	8009322 <UTIL_SEQ_WaitEvt+0x1e>
 800931c:	2300      	movs	r3, #0
 800931e:	61fb      	str	r3, [r7, #28]
 8009320:	e005      	b.n	800932e <UTIL_SEQ_WaitEvt+0x2a>
 8009322:	4b1a      	ldr	r3, [pc, #104]	; (800938c <UTIL_SEQ_WaitEvt+0x88>)
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	2201      	movs	r2, #1
 8009328:	fa02 f303 	lsl.w	r3, r2, r3
 800932c:	61fb      	str	r3, [r7, #28]
 800932e:	4b18      	ldr	r3, [pc, #96]	; (8009390 <UTIL_SEQ_WaitEvt+0x8c>)
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	617b      	str	r3, [r7, #20]
 8009334:	4a16      	ldr	r2, [pc, #88]	; (8009390 <UTIL_SEQ_WaitEvt+0x8c>)
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	6013      	str	r3, [r2, #0]
 800933a:	e003      	b.n	8009344 <UTIL_SEQ_WaitEvt+0x40>
 800933c:	6879      	ldr	r1, [r7, #4]
 800933e:	69f8      	ldr	r0, [r7, #28]
 8009340:	f7f7 fcad 	bl	8000c9e <UTIL_SEQ_EvtIdle>
 8009344:	4b13      	ldr	r3, [pc, #76]	; (8009394 <UTIL_SEQ_WaitEvt+0x90>)
 8009346:	681a      	ldr	r2, [r3, #0]
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	4013      	ands	r3, r2
 800934c:	2b00      	cmp	r3, #0
 800934e:	d0f5      	beq.n	800933c <UTIL_SEQ_WaitEvt+0x38>
 8009350:	4a0e      	ldr	r2, [pc, #56]	; (800938c <UTIL_SEQ_WaitEvt+0x88>)
 8009352:	69bb      	ldr	r3, [r7, #24]
 8009354:	6013      	str	r3, [r2, #0]
 8009356:	f3ef 8310 	mrs	r3, PRIMASK
 800935a:	60bb      	str	r3, [r7, #8]
 800935c:	68bb      	ldr	r3, [r7, #8]
 800935e:	613b      	str	r3, [r7, #16]
 8009360:	b672      	cpsid	i
 8009362:	bf00      	nop
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	43da      	mvns	r2, r3
 8009368:	4b0a      	ldr	r3, [pc, #40]	; (8009394 <UTIL_SEQ_WaitEvt+0x90>)
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	4013      	ands	r3, r2
 800936e:	4a09      	ldr	r2, [pc, #36]	; (8009394 <UTIL_SEQ_WaitEvt+0x90>)
 8009370:	6013      	str	r3, [r2, #0]
 8009372:	693b      	ldr	r3, [r7, #16]
 8009374:	60fb      	str	r3, [r7, #12]
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	f383 8810 	msr	PRIMASK, r3
 800937c:	bf00      	nop
 800937e:	4a04      	ldr	r2, [pc, #16]	; (8009390 <UTIL_SEQ_WaitEvt+0x8c>)
 8009380:	697b      	ldr	r3, [r7, #20]
 8009382:	6013      	str	r3, [r2, #0]
 8009384:	bf00      	nop
 8009386:	3720      	adds	r7, #32
 8009388:	46bd      	mov	sp, r7
 800938a:	bd80      	pop	{r7, pc}
 800938c:	20000c94 	.word	0x20000c94
 8009390:	20000c90 	.word	0x20000c90
 8009394:	20000c8c 	.word	0x20000c8c

08009398 <UTIL_SEQ_PreIdle>:
 8009398:	b480      	push	{r7}
 800939a:	af00      	add	r7, sp, #0
 800939c:	bf00      	nop
 800939e:	46bd      	mov	sp, r7
 80093a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a4:	4770      	bx	lr

080093a6 <UTIL_SEQ_PostIdle>:
 80093a6:	b480      	push	{r7}
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	bf00      	nop
 80093ac:	46bd      	mov	sp, r7
 80093ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b2:	4770      	bx	lr

080093b4 <SEQ_BitPosition>:
 80093b4:	b480      	push	{r7}
 80093b6:	b085      	sub	sp, #20
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	6078      	str	r0, [r7, #4]
 80093bc:	2300      	movs	r3, #0
 80093be:	73fb      	strb	r3, [r7, #15]
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	60bb      	str	r3, [r7, #8]
 80093c4:	68bb      	ldr	r3, [r7, #8]
 80093c6:	0c1b      	lsrs	r3, r3, #16
 80093c8:	041b      	lsls	r3, r3, #16
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d104      	bne.n	80093d8 <SEQ_BitPosition+0x24>
 80093ce:	2310      	movs	r3, #16
 80093d0:	73fb      	strb	r3, [r7, #15]
 80093d2:	68bb      	ldr	r3, [r7, #8]
 80093d4:	041b      	lsls	r3, r3, #16
 80093d6:	60bb      	str	r3, [r7, #8]
 80093d8:	68bb      	ldr	r3, [r7, #8]
 80093da:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d105      	bne.n	80093ee <SEQ_BitPosition+0x3a>
 80093e2:	7bfb      	ldrb	r3, [r7, #15]
 80093e4:	3308      	adds	r3, #8
 80093e6:	73fb      	strb	r3, [r7, #15]
 80093e8:	68bb      	ldr	r3, [r7, #8]
 80093ea:	021b      	lsls	r3, r3, #8
 80093ec:	60bb      	str	r3, [r7, #8]
 80093ee:	68bb      	ldr	r3, [r7, #8]
 80093f0:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d105      	bne.n	8009404 <SEQ_BitPosition+0x50>
 80093f8:	7bfb      	ldrb	r3, [r7, #15]
 80093fa:	3304      	adds	r3, #4
 80093fc:	73fb      	strb	r3, [r7, #15]
 80093fe:	68bb      	ldr	r3, [r7, #8]
 8009400:	011b      	lsls	r3, r3, #4
 8009402:	60bb      	str	r3, [r7, #8]
 8009404:	68bb      	ldr	r3, [r7, #8]
 8009406:	0f1b      	lsrs	r3, r3, #28
 8009408:	4a07      	ldr	r2, [pc, #28]	; (8009428 <SEQ_BitPosition+0x74>)
 800940a:	5cd2      	ldrb	r2, [r2, r3]
 800940c:	7bfb      	ldrb	r3, [r7, #15]
 800940e:	4413      	add	r3, r2
 8009410:	73fb      	strb	r3, [r7, #15]
 8009412:	7bfb      	ldrb	r3, [r7, #15]
 8009414:	f1c3 031f 	rsb	r3, r3, #31
 8009418:	b2db      	uxtb	r3, r3
 800941a:	4618      	mov	r0, r3
 800941c:	3714      	adds	r7, #20
 800941e:	46bd      	mov	sp, r7
 8009420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009424:	4770      	bx	lr
 8009426:	bf00      	nop
 8009428:	0800a6a0 	.word	0x0800a6a0

0800942c <__errno>:
 800942c:	4b01      	ldr	r3, [pc, #4]	; (8009434 <__errno+0x8>)
 800942e:	6818      	ldr	r0, [r3, #0]
 8009430:	4770      	bx	lr
 8009432:	bf00      	nop
 8009434:	20000028 	.word	0x20000028

08009438 <__libc_init_array>:
 8009438:	b570      	push	{r4, r5, r6, lr}
 800943a:	4d0d      	ldr	r5, [pc, #52]	; (8009470 <__libc_init_array+0x38>)
 800943c:	4c0d      	ldr	r4, [pc, #52]	; (8009474 <__libc_init_array+0x3c>)
 800943e:	1b64      	subs	r4, r4, r5
 8009440:	10a4      	asrs	r4, r4, #2
 8009442:	2600      	movs	r6, #0
 8009444:	42a6      	cmp	r6, r4
 8009446:	d109      	bne.n	800945c <__libc_init_array+0x24>
 8009448:	4d0b      	ldr	r5, [pc, #44]	; (8009478 <__libc_init_array+0x40>)
 800944a:	4c0c      	ldr	r4, [pc, #48]	; (800947c <__libc_init_array+0x44>)
 800944c:	f000 ffbc 	bl	800a3c8 <_init>
 8009450:	1b64      	subs	r4, r4, r5
 8009452:	10a4      	asrs	r4, r4, #2
 8009454:	2600      	movs	r6, #0
 8009456:	42a6      	cmp	r6, r4
 8009458:	d105      	bne.n	8009466 <__libc_init_array+0x2e>
 800945a:	bd70      	pop	{r4, r5, r6, pc}
 800945c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009460:	4798      	blx	r3
 8009462:	3601      	adds	r6, #1
 8009464:	e7ee      	b.n	8009444 <__libc_init_array+0xc>
 8009466:	f855 3b04 	ldr.w	r3, [r5], #4
 800946a:	4798      	blx	r3
 800946c:	3601      	adds	r6, #1
 800946e:	e7f2      	b.n	8009456 <__libc_init_array+0x1e>
 8009470:	0800a750 	.word	0x0800a750
 8009474:	0800a750 	.word	0x0800a750
 8009478:	0800a750 	.word	0x0800a750
 800947c:	0800a754 	.word	0x0800a754

08009480 <memcpy>:
 8009480:	440a      	add	r2, r1
 8009482:	4291      	cmp	r1, r2
 8009484:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8009488:	d100      	bne.n	800948c <memcpy+0xc>
 800948a:	4770      	bx	lr
 800948c:	b510      	push	{r4, lr}
 800948e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009492:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009496:	4291      	cmp	r1, r2
 8009498:	d1f9      	bne.n	800948e <memcpy+0xe>
 800949a:	bd10      	pop	{r4, pc}

0800949c <memset>:
 800949c:	4402      	add	r2, r0
 800949e:	4603      	mov	r3, r0
 80094a0:	4293      	cmp	r3, r2
 80094a2:	d100      	bne.n	80094a6 <memset+0xa>
 80094a4:	4770      	bx	lr
 80094a6:	f803 1b01 	strb.w	r1, [r3], #1
 80094aa:	e7f9      	b.n	80094a0 <memset+0x4>

080094ac <iprintf>:
 80094ac:	b40f      	push	{r0, r1, r2, r3}
 80094ae:	4b0a      	ldr	r3, [pc, #40]	; (80094d8 <iprintf+0x2c>)
 80094b0:	b513      	push	{r0, r1, r4, lr}
 80094b2:	681c      	ldr	r4, [r3, #0]
 80094b4:	b124      	cbz	r4, 80094c0 <iprintf+0x14>
 80094b6:	69a3      	ldr	r3, [r4, #24]
 80094b8:	b913      	cbnz	r3, 80094c0 <iprintf+0x14>
 80094ba:	4620      	mov	r0, r4
 80094bc:	f000 f866 	bl	800958c <__sinit>
 80094c0:	ab05      	add	r3, sp, #20
 80094c2:	9a04      	ldr	r2, [sp, #16]
 80094c4:	68a1      	ldr	r1, [r4, #8]
 80094c6:	9301      	str	r3, [sp, #4]
 80094c8:	4620      	mov	r0, r4
 80094ca:	f000 f9bd 	bl	8009848 <_vfiprintf_r>
 80094ce:	b002      	add	sp, #8
 80094d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80094d4:	b004      	add	sp, #16
 80094d6:	4770      	bx	lr
 80094d8:	20000028 	.word	0x20000028

080094dc <std>:
 80094dc:	2300      	movs	r3, #0
 80094de:	b510      	push	{r4, lr}
 80094e0:	4604      	mov	r4, r0
 80094e2:	e9c0 3300 	strd	r3, r3, [r0]
 80094e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80094ea:	6083      	str	r3, [r0, #8]
 80094ec:	8181      	strh	r1, [r0, #12]
 80094ee:	6643      	str	r3, [r0, #100]	; 0x64
 80094f0:	81c2      	strh	r2, [r0, #14]
 80094f2:	6183      	str	r3, [r0, #24]
 80094f4:	4619      	mov	r1, r3
 80094f6:	2208      	movs	r2, #8
 80094f8:	305c      	adds	r0, #92	; 0x5c
 80094fa:	f7ff ffcf 	bl	800949c <memset>
 80094fe:	4b05      	ldr	r3, [pc, #20]	; (8009514 <std+0x38>)
 8009500:	6263      	str	r3, [r4, #36]	; 0x24
 8009502:	4b05      	ldr	r3, [pc, #20]	; (8009518 <std+0x3c>)
 8009504:	62a3      	str	r3, [r4, #40]	; 0x28
 8009506:	4b05      	ldr	r3, [pc, #20]	; (800951c <std+0x40>)
 8009508:	62e3      	str	r3, [r4, #44]	; 0x2c
 800950a:	4b05      	ldr	r3, [pc, #20]	; (8009520 <std+0x44>)
 800950c:	6224      	str	r4, [r4, #32]
 800950e:	6323      	str	r3, [r4, #48]	; 0x30
 8009510:	bd10      	pop	{r4, pc}
 8009512:	bf00      	nop
 8009514:	08009df1 	.word	0x08009df1
 8009518:	08009e13 	.word	0x08009e13
 800951c:	08009e4b 	.word	0x08009e4b
 8009520:	08009e6f 	.word	0x08009e6f

08009524 <_cleanup_r>:
 8009524:	4901      	ldr	r1, [pc, #4]	; (800952c <_cleanup_r+0x8>)
 8009526:	f000 b8af 	b.w	8009688 <_fwalk_reent>
 800952a:	bf00      	nop
 800952c:	0800a149 	.word	0x0800a149

08009530 <__sfmoreglue>:
 8009530:	b570      	push	{r4, r5, r6, lr}
 8009532:	2268      	movs	r2, #104	; 0x68
 8009534:	1e4d      	subs	r5, r1, #1
 8009536:	4355      	muls	r5, r2
 8009538:	460e      	mov	r6, r1
 800953a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800953e:	f000 f8e5 	bl	800970c <_malloc_r>
 8009542:	4604      	mov	r4, r0
 8009544:	b140      	cbz	r0, 8009558 <__sfmoreglue+0x28>
 8009546:	2100      	movs	r1, #0
 8009548:	e9c0 1600 	strd	r1, r6, [r0]
 800954c:	300c      	adds	r0, #12
 800954e:	60a0      	str	r0, [r4, #8]
 8009550:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009554:	f7ff ffa2 	bl	800949c <memset>
 8009558:	4620      	mov	r0, r4
 800955a:	bd70      	pop	{r4, r5, r6, pc}

0800955c <__sfp_lock_acquire>:
 800955c:	4801      	ldr	r0, [pc, #4]	; (8009564 <__sfp_lock_acquire+0x8>)
 800955e:	f000 b8b3 	b.w	80096c8 <__retarget_lock_acquire_recursive>
 8009562:	bf00      	nop
 8009564:	20000d29 	.word	0x20000d29

08009568 <__sfp_lock_release>:
 8009568:	4801      	ldr	r0, [pc, #4]	; (8009570 <__sfp_lock_release+0x8>)
 800956a:	f000 b8ae 	b.w	80096ca <__retarget_lock_release_recursive>
 800956e:	bf00      	nop
 8009570:	20000d29 	.word	0x20000d29

08009574 <__sinit_lock_acquire>:
 8009574:	4801      	ldr	r0, [pc, #4]	; (800957c <__sinit_lock_acquire+0x8>)
 8009576:	f000 b8a7 	b.w	80096c8 <__retarget_lock_acquire_recursive>
 800957a:	bf00      	nop
 800957c:	20000d2a 	.word	0x20000d2a

08009580 <__sinit_lock_release>:
 8009580:	4801      	ldr	r0, [pc, #4]	; (8009588 <__sinit_lock_release+0x8>)
 8009582:	f000 b8a2 	b.w	80096ca <__retarget_lock_release_recursive>
 8009586:	bf00      	nop
 8009588:	20000d2a 	.word	0x20000d2a

0800958c <__sinit>:
 800958c:	b510      	push	{r4, lr}
 800958e:	4604      	mov	r4, r0
 8009590:	f7ff fff0 	bl	8009574 <__sinit_lock_acquire>
 8009594:	69a3      	ldr	r3, [r4, #24]
 8009596:	b11b      	cbz	r3, 80095a0 <__sinit+0x14>
 8009598:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800959c:	f7ff bff0 	b.w	8009580 <__sinit_lock_release>
 80095a0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80095a4:	6523      	str	r3, [r4, #80]	; 0x50
 80095a6:	4b13      	ldr	r3, [pc, #76]	; (80095f4 <__sinit+0x68>)
 80095a8:	4a13      	ldr	r2, [pc, #76]	; (80095f8 <__sinit+0x6c>)
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	62a2      	str	r2, [r4, #40]	; 0x28
 80095ae:	42a3      	cmp	r3, r4
 80095b0:	bf04      	itt	eq
 80095b2:	2301      	moveq	r3, #1
 80095b4:	61a3      	streq	r3, [r4, #24]
 80095b6:	4620      	mov	r0, r4
 80095b8:	f000 f820 	bl	80095fc <__sfp>
 80095bc:	6060      	str	r0, [r4, #4]
 80095be:	4620      	mov	r0, r4
 80095c0:	f000 f81c 	bl	80095fc <__sfp>
 80095c4:	60a0      	str	r0, [r4, #8]
 80095c6:	4620      	mov	r0, r4
 80095c8:	f000 f818 	bl	80095fc <__sfp>
 80095cc:	2200      	movs	r2, #0
 80095ce:	60e0      	str	r0, [r4, #12]
 80095d0:	2104      	movs	r1, #4
 80095d2:	6860      	ldr	r0, [r4, #4]
 80095d4:	f7ff ff82 	bl	80094dc <std>
 80095d8:	68a0      	ldr	r0, [r4, #8]
 80095da:	2201      	movs	r2, #1
 80095dc:	2109      	movs	r1, #9
 80095de:	f7ff ff7d 	bl	80094dc <std>
 80095e2:	68e0      	ldr	r0, [r4, #12]
 80095e4:	2202      	movs	r2, #2
 80095e6:	2112      	movs	r1, #18
 80095e8:	f7ff ff78 	bl	80094dc <std>
 80095ec:	2301      	movs	r3, #1
 80095ee:	61a3      	str	r3, [r4, #24]
 80095f0:	e7d2      	b.n	8009598 <__sinit+0xc>
 80095f2:	bf00      	nop
 80095f4:	0800a6b0 	.word	0x0800a6b0
 80095f8:	08009525 	.word	0x08009525

080095fc <__sfp>:
 80095fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095fe:	4607      	mov	r7, r0
 8009600:	f7ff ffac 	bl	800955c <__sfp_lock_acquire>
 8009604:	4b1e      	ldr	r3, [pc, #120]	; (8009680 <__sfp+0x84>)
 8009606:	681e      	ldr	r6, [r3, #0]
 8009608:	69b3      	ldr	r3, [r6, #24]
 800960a:	b913      	cbnz	r3, 8009612 <__sfp+0x16>
 800960c:	4630      	mov	r0, r6
 800960e:	f7ff ffbd 	bl	800958c <__sinit>
 8009612:	3648      	adds	r6, #72	; 0x48
 8009614:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009618:	3b01      	subs	r3, #1
 800961a:	d503      	bpl.n	8009624 <__sfp+0x28>
 800961c:	6833      	ldr	r3, [r6, #0]
 800961e:	b30b      	cbz	r3, 8009664 <__sfp+0x68>
 8009620:	6836      	ldr	r6, [r6, #0]
 8009622:	e7f7      	b.n	8009614 <__sfp+0x18>
 8009624:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009628:	b9d5      	cbnz	r5, 8009660 <__sfp+0x64>
 800962a:	4b16      	ldr	r3, [pc, #88]	; (8009684 <__sfp+0x88>)
 800962c:	60e3      	str	r3, [r4, #12]
 800962e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009632:	6665      	str	r5, [r4, #100]	; 0x64
 8009634:	f000 f847 	bl	80096c6 <__retarget_lock_init_recursive>
 8009638:	f7ff ff96 	bl	8009568 <__sfp_lock_release>
 800963c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009640:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009644:	6025      	str	r5, [r4, #0]
 8009646:	61a5      	str	r5, [r4, #24]
 8009648:	2208      	movs	r2, #8
 800964a:	4629      	mov	r1, r5
 800964c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009650:	f7ff ff24 	bl	800949c <memset>
 8009654:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009658:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800965c:	4620      	mov	r0, r4
 800965e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009660:	3468      	adds	r4, #104	; 0x68
 8009662:	e7d9      	b.n	8009618 <__sfp+0x1c>
 8009664:	2104      	movs	r1, #4
 8009666:	4638      	mov	r0, r7
 8009668:	f7ff ff62 	bl	8009530 <__sfmoreglue>
 800966c:	4604      	mov	r4, r0
 800966e:	6030      	str	r0, [r6, #0]
 8009670:	2800      	cmp	r0, #0
 8009672:	d1d5      	bne.n	8009620 <__sfp+0x24>
 8009674:	f7ff ff78 	bl	8009568 <__sfp_lock_release>
 8009678:	230c      	movs	r3, #12
 800967a:	603b      	str	r3, [r7, #0]
 800967c:	e7ee      	b.n	800965c <__sfp+0x60>
 800967e:	bf00      	nop
 8009680:	0800a6b0 	.word	0x0800a6b0
 8009684:	ffff0001 	.word	0xffff0001

08009688 <_fwalk_reent>:
 8009688:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800968c:	4606      	mov	r6, r0
 800968e:	4688      	mov	r8, r1
 8009690:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009694:	2700      	movs	r7, #0
 8009696:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800969a:	f1b9 0901 	subs.w	r9, r9, #1
 800969e:	d505      	bpl.n	80096ac <_fwalk_reent+0x24>
 80096a0:	6824      	ldr	r4, [r4, #0]
 80096a2:	2c00      	cmp	r4, #0
 80096a4:	d1f7      	bne.n	8009696 <_fwalk_reent+0xe>
 80096a6:	4638      	mov	r0, r7
 80096a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80096ac:	89ab      	ldrh	r3, [r5, #12]
 80096ae:	2b01      	cmp	r3, #1
 80096b0:	d907      	bls.n	80096c2 <_fwalk_reent+0x3a>
 80096b2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80096b6:	3301      	adds	r3, #1
 80096b8:	d003      	beq.n	80096c2 <_fwalk_reent+0x3a>
 80096ba:	4629      	mov	r1, r5
 80096bc:	4630      	mov	r0, r6
 80096be:	47c0      	blx	r8
 80096c0:	4307      	orrs	r7, r0
 80096c2:	3568      	adds	r5, #104	; 0x68
 80096c4:	e7e9      	b.n	800969a <_fwalk_reent+0x12>

080096c6 <__retarget_lock_init_recursive>:
 80096c6:	4770      	bx	lr

080096c8 <__retarget_lock_acquire_recursive>:
 80096c8:	4770      	bx	lr

080096ca <__retarget_lock_release_recursive>:
 80096ca:	4770      	bx	lr

080096cc <sbrk_aligned>:
 80096cc:	b570      	push	{r4, r5, r6, lr}
 80096ce:	4e0e      	ldr	r6, [pc, #56]	; (8009708 <sbrk_aligned+0x3c>)
 80096d0:	460c      	mov	r4, r1
 80096d2:	6831      	ldr	r1, [r6, #0]
 80096d4:	4605      	mov	r5, r0
 80096d6:	b911      	cbnz	r1, 80096de <sbrk_aligned+0x12>
 80096d8:	f000 fb7a 	bl	8009dd0 <_sbrk_r>
 80096dc:	6030      	str	r0, [r6, #0]
 80096de:	4621      	mov	r1, r4
 80096e0:	4628      	mov	r0, r5
 80096e2:	f000 fb75 	bl	8009dd0 <_sbrk_r>
 80096e6:	1c43      	adds	r3, r0, #1
 80096e8:	d00a      	beq.n	8009700 <sbrk_aligned+0x34>
 80096ea:	1cc4      	adds	r4, r0, #3
 80096ec:	f024 0403 	bic.w	r4, r4, #3
 80096f0:	42a0      	cmp	r0, r4
 80096f2:	d007      	beq.n	8009704 <sbrk_aligned+0x38>
 80096f4:	1a21      	subs	r1, r4, r0
 80096f6:	4628      	mov	r0, r5
 80096f8:	f000 fb6a 	bl	8009dd0 <_sbrk_r>
 80096fc:	3001      	adds	r0, #1
 80096fe:	d101      	bne.n	8009704 <sbrk_aligned+0x38>
 8009700:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8009704:	4620      	mov	r0, r4
 8009706:	bd70      	pop	{r4, r5, r6, pc}
 8009708:	20000d30 	.word	0x20000d30

0800970c <_malloc_r>:
 800970c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009710:	1ccd      	adds	r5, r1, #3
 8009712:	f025 0503 	bic.w	r5, r5, #3
 8009716:	3508      	adds	r5, #8
 8009718:	2d0c      	cmp	r5, #12
 800971a:	bf38      	it	cc
 800971c:	250c      	movcc	r5, #12
 800971e:	2d00      	cmp	r5, #0
 8009720:	4607      	mov	r7, r0
 8009722:	db01      	blt.n	8009728 <_malloc_r+0x1c>
 8009724:	42a9      	cmp	r1, r5
 8009726:	d905      	bls.n	8009734 <_malloc_r+0x28>
 8009728:	230c      	movs	r3, #12
 800972a:	603b      	str	r3, [r7, #0]
 800972c:	2600      	movs	r6, #0
 800972e:	4630      	mov	r0, r6
 8009730:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009734:	4e2e      	ldr	r6, [pc, #184]	; (80097f0 <_malloc_r+0xe4>)
 8009736:	f000 fdbb 	bl	800a2b0 <__malloc_lock>
 800973a:	6833      	ldr	r3, [r6, #0]
 800973c:	461c      	mov	r4, r3
 800973e:	bb34      	cbnz	r4, 800978e <_malloc_r+0x82>
 8009740:	4629      	mov	r1, r5
 8009742:	4638      	mov	r0, r7
 8009744:	f7ff ffc2 	bl	80096cc <sbrk_aligned>
 8009748:	1c43      	adds	r3, r0, #1
 800974a:	4604      	mov	r4, r0
 800974c:	d14d      	bne.n	80097ea <_malloc_r+0xde>
 800974e:	6834      	ldr	r4, [r6, #0]
 8009750:	4626      	mov	r6, r4
 8009752:	2e00      	cmp	r6, #0
 8009754:	d140      	bne.n	80097d8 <_malloc_r+0xcc>
 8009756:	6823      	ldr	r3, [r4, #0]
 8009758:	4631      	mov	r1, r6
 800975a:	4638      	mov	r0, r7
 800975c:	eb04 0803 	add.w	r8, r4, r3
 8009760:	f000 fb36 	bl	8009dd0 <_sbrk_r>
 8009764:	4580      	cmp	r8, r0
 8009766:	d13a      	bne.n	80097de <_malloc_r+0xd2>
 8009768:	6821      	ldr	r1, [r4, #0]
 800976a:	3503      	adds	r5, #3
 800976c:	1a6d      	subs	r5, r5, r1
 800976e:	f025 0503 	bic.w	r5, r5, #3
 8009772:	3508      	adds	r5, #8
 8009774:	2d0c      	cmp	r5, #12
 8009776:	bf38      	it	cc
 8009778:	250c      	movcc	r5, #12
 800977a:	4629      	mov	r1, r5
 800977c:	4638      	mov	r0, r7
 800977e:	f7ff ffa5 	bl	80096cc <sbrk_aligned>
 8009782:	3001      	adds	r0, #1
 8009784:	d02b      	beq.n	80097de <_malloc_r+0xd2>
 8009786:	6823      	ldr	r3, [r4, #0]
 8009788:	442b      	add	r3, r5
 800978a:	6023      	str	r3, [r4, #0]
 800978c:	e00e      	b.n	80097ac <_malloc_r+0xa0>
 800978e:	6822      	ldr	r2, [r4, #0]
 8009790:	1b52      	subs	r2, r2, r5
 8009792:	d41e      	bmi.n	80097d2 <_malloc_r+0xc6>
 8009794:	2a0b      	cmp	r2, #11
 8009796:	d916      	bls.n	80097c6 <_malloc_r+0xba>
 8009798:	1961      	adds	r1, r4, r5
 800979a:	42a3      	cmp	r3, r4
 800979c:	6025      	str	r5, [r4, #0]
 800979e:	bf18      	it	ne
 80097a0:	6059      	strne	r1, [r3, #4]
 80097a2:	6863      	ldr	r3, [r4, #4]
 80097a4:	bf08      	it	eq
 80097a6:	6031      	streq	r1, [r6, #0]
 80097a8:	5162      	str	r2, [r4, r5]
 80097aa:	604b      	str	r3, [r1, #4]
 80097ac:	4638      	mov	r0, r7
 80097ae:	f104 060b 	add.w	r6, r4, #11
 80097b2:	f000 fd83 	bl	800a2bc <__malloc_unlock>
 80097b6:	f026 0607 	bic.w	r6, r6, #7
 80097ba:	1d23      	adds	r3, r4, #4
 80097bc:	1af2      	subs	r2, r6, r3
 80097be:	d0b6      	beq.n	800972e <_malloc_r+0x22>
 80097c0:	1b9b      	subs	r3, r3, r6
 80097c2:	50a3      	str	r3, [r4, r2]
 80097c4:	e7b3      	b.n	800972e <_malloc_r+0x22>
 80097c6:	6862      	ldr	r2, [r4, #4]
 80097c8:	42a3      	cmp	r3, r4
 80097ca:	bf0c      	ite	eq
 80097cc:	6032      	streq	r2, [r6, #0]
 80097ce:	605a      	strne	r2, [r3, #4]
 80097d0:	e7ec      	b.n	80097ac <_malloc_r+0xa0>
 80097d2:	4623      	mov	r3, r4
 80097d4:	6864      	ldr	r4, [r4, #4]
 80097d6:	e7b2      	b.n	800973e <_malloc_r+0x32>
 80097d8:	4634      	mov	r4, r6
 80097da:	6876      	ldr	r6, [r6, #4]
 80097dc:	e7b9      	b.n	8009752 <_malloc_r+0x46>
 80097de:	230c      	movs	r3, #12
 80097e0:	603b      	str	r3, [r7, #0]
 80097e2:	4638      	mov	r0, r7
 80097e4:	f000 fd6a 	bl	800a2bc <__malloc_unlock>
 80097e8:	e7a1      	b.n	800972e <_malloc_r+0x22>
 80097ea:	6025      	str	r5, [r4, #0]
 80097ec:	e7de      	b.n	80097ac <_malloc_r+0xa0>
 80097ee:	bf00      	nop
 80097f0:	20000d2c 	.word	0x20000d2c

080097f4 <__sfputc_r>:
 80097f4:	6893      	ldr	r3, [r2, #8]
 80097f6:	3b01      	subs	r3, #1
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	b410      	push	{r4}
 80097fc:	6093      	str	r3, [r2, #8]
 80097fe:	da08      	bge.n	8009812 <__sfputc_r+0x1e>
 8009800:	6994      	ldr	r4, [r2, #24]
 8009802:	42a3      	cmp	r3, r4
 8009804:	db01      	blt.n	800980a <__sfputc_r+0x16>
 8009806:	290a      	cmp	r1, #10
 8009808:	d103      	bne.n	8009812 <__sfputc_r+0x1e>
 800980a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800980e:	f000 bb33 	b.w	8009e78 <__swbuf_r>
 8009812:	6813      	ldr	r3, [r2, #0]
 8009814:	1c58      	adds	r0, r3, #1
 8009816:	6010      	str	r0, [r2, #0]
 8009818:	7019      	strb	r1, [r3, #0]
 800981a:	4608      	mov	r0, r1
 800981c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009820:	4770      	bx	lr

08009822 <__sfputs_r>:
 8009822:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009824:	4606      	mov	r6, r0
 8009826:	460f      	mov	r7, r1
 8009828:	4614      	mov	r4, r2
 800982a:	18d5      	adds	r5, r2, r3
 800982c:	42ac      	cmp	r4, r5
 800982e:	d101      	bne.n	8009834 <__sfputs_r+0x12>
 8009830:	2000      	movs	r0, #0
 8009832:	e007      	b.n	8009844 <__sfputs_r+0x22>
 8009834:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009838:	463a      	mov	r2, r7
 800983a:	4630      	mov	r0, r6
 800983c:	f7ff ffda 	bl	80097f4 <__sfputc_r>
 8009840:	1c43      	adds	r3, r0, #1
 8009842:	d1f3      	bne.n	800982c <__sfputs_r+0xa>
 8009844:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009848 <_vfiprintf_r>:
 8009848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800984c:	460d      	mov	r5, r1
 800984e:	b09d      	sub	sp, #116	; 0x74
 8009850:	4614      	mov	r4, r2
 8009852:	4698      	mov	r8, r3
 8009854:	4606      	mov	r6, r0
 8009856:	b118      	cbz	r0, 8009860 <_vfiprintf_r+0x18>
 8009858:	6983      	ldr	r3, [r0, #24]
 800985a:	b90b      	cbnz	r3, 8009860 <_vfiprintf_r+0x18>
 800985c:	f7ff fe96 	bl	800958c <__sinit>
 8009860:	4b89      	ldr	r3, [pc, #548]	; (8009a88 <_vfiprintf_r+0x240>)
 8009862:	429d      	cmp	r5, r3
 8009864:	d11b      	bne.n	800989e <_vfiprintf_r+0x56>
 8009866:	6875      	ldr	r5, [r6, #4]
 8009868:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800986a:	07d9      	lsls	r1, r3, #31
 800986c:	d405      	bmi.n	800987a <_vfiprintf_r+0x32>
 800986e:	89ab      	ldrh	r3, [r5, #12]
 8009870:	059a      	lsls	r2, r3, #22
 8009872:	d402      	bmi.n	800987a <_vfiprintf_r+0x32>
 8009874:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009876:	f7ff ff27 	bl	80096c8 <__retarget_lock_acquire_recursive>
 800987a:	89ab      	ldrh	r3, [r5, #12]
 800987c:	071b      	lsls	r3, r3, #28
 800987e:	d501      	bpl.n	8009884 <_vfiprintf_r+0x3c>
 8009880:	692b      	ldr	r3, [r5, #16]
 8009882:	b9eb      	cbnz	r3, 80098c0 <_vfiprintf_r+0x78>
 8009884:	4629      	mov	r1, r5
 8009886:	4630      	mov	r0, r6
 8009888:	f000 fb5a 	bl	8009f40 <__swsetup_r>
 800988c:	b1c0      	cbz	r0, 80098c0 <_vfiprintf_r+0x78>
 800988e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009890:	07dc      	lsls	r4, r3, #31
 8009892:	d50e      	bpl.n	80098b2 <_vfiprintf_r+0x6a>
 8009894:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009898:	b01d      	add	sp, #116	; 0x74
 800989a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800989e:	4b7b      	ldr	r3, [pc, #492]	; (8009a8c <_vfiprintf_r+0x244>)
 80098a0:	429d      	cmp	r5, r3
 80098a2:	d101      	bne.n	80098a8 <_vfiprintf_r+0x60>
 80098a4:	68b5      	ldr	r5, [r6, #8]
 80098a6:	e7df      	b.n	8009868 <_vfiprintf_r+0x20>
 80098a8:	4b79      	ldr	r3, [pc, #484]	; (8009a90 <_vfiprintf_r+0x248>)
 80098aa:	429d      	cmp	r5, r3
 80098ac:	bf08      	it	eq
 80098ae:	68f5      	ldreq	r5, [r6, #12]
 80098b0:	e7da      	b.n	8009868 <_vfiprintf_r+0x20>
 80098b2:	89ab      	ldrh	r3, [r5, #12]
 80098b4:	0598      	lsls	r0, r3, #22
 80098b6:	d4ed      	bmi.n	8009894 <_vfiprintf_r+0x4c>
 80098b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80098ba:	f7ff ff06 	bl	80096ca <__retarget_lock_release_recursive>
 80098be:	e7e9      	b.n	8009894 <_vfiprintf_r+0x4c>
 80098c0:	2300      	movs	r3, #0
 80098c2:	9309      	str	r3, [sp, #36]	; 0x24
 80098c4:	2320      	movs	r3, #32
 80098c6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80098ca:	f8cd 800c 	str.w	r8, [sp, #12]
 80098ce:	2330      	movs	r3, #48	; 0x30
 80098d0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009a94 <_vfiprintf_r+0x24c>
 80098d4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80098d8:	f04f 0901 	mov.w	r9, #1
 80098dc:	4623      	mov	r3, r4
 80098de:	469a      	mov	sl, r3
 80098e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80098e4:	b10a      	cbz	r2, 80098ea <_vfiprintf_r+0xa2>
 80098e6:	2a25      	cmp	r2, #37	; 0x25
 80098e8:	d1f9      	bne.n	80098de <_vfiprintf_r+0x96>
 80098ea:	ebba 0b04 	subs.w	fp, sl, r4
 80098ee:	d00b      	beq.n	8009908 <_vfiprintf_r+0xc0>
 80098f0:	465b      	mov	r3, fp
 80098f2:	4622      	mov	r2, r4
 80098f4:	4629      	mov	r1, r5
 80098f6:	4630      	mov	r0, r6
 80098f8:	f7ff ff93 	bl	8009822 <__sfputs_r>
 80098fc:	3001      	adds	r0, #1
 80098fe:	f000 80aa 	beq.w	8009a56 <_vfiprintf_r+0x20e>
 8009902:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009904:	445a      	add	r2, fp
 8009906:	9209      	str	r2, [sp, #36]	; 0x24
 8009908:	f89a 3000 	ldrb.w	r3, [sl]
 800990c:	2b00      	cmp	r3, #0
 800990e:	f000 80a2 	beq.w	8009a56 <_vfiprintf_r+0x20e>
 8009912:	2300      	movs	r3, #0
 8009914:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009918:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800991c:	f10a 0a01 	add.w	sl, sl, #1
 8009920:	9304      	str	r3, [sp, #16]
 8009922:	9307      	str	r3, [sp, #28]
 8009924:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009928:	931a      	str	r3, [sp, #104]	; 0x68
 800992a:	4654      	mov	r4, sl
 800992c:	2205      	movs	r2, #5
 800992e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009932:	4858      	ldr	r0, [pc, #352]	; (8009a94 <_vfiprintf_r+0x24c>)
 8009934:	f7f6 fc2c 	bl	8000190 <memchr>
 8009938:	9a04      	ldr	r2, [sp, #16]
 800993a:	b9d8      	cbnz	r0, 8009974 <_vfiprintf_r+0x12c>
 800993c:	06d1      	lsls	r1, r2, #27
 800993e:	bf44      	itt	mi
 8009940:	2320      	movmi	r3, #32
 8009942:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009946:	0713      	lsls	r3, r2, #28
 8009948:	bf44      	itt	mi
 800994a:	232b      	movmi	r3, #43	; 0x2b
 800994c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009950:	f89a 3000 	ldrb.w	r3, [sl]
 8009954:	2b2a      	cmp	r3, #42	; 0x2a
 8009956:	d015      	beq.n	8009984 <_vfiprintf_r+0x13c>
 8009958:	9a07      	ldr	r2, [sp, #28]
 800995a:	4654      	mov	r4, sl
 800995c:	2000      	movs	r0, #0
 800995e:	f04f 0c0a 	mov.w	ip, #10
 8009962:	4621      	mov	r1, r4
 8009964:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009968:	3b30      	subs	r3, #48	; 0x30
 800996a:	2b09      	cmp	r3, #9
 800996c:	d94e      	bls.n	8009a0c <_vfiprintf_r+0x1c4>
 800996e:	b1b0      	cbz	r0, 800999e <_vfiprintf_r+0x156>
 8009970:	9207      	str	r2, [sp, #28]
 8009972:	e014      	b.n	800999e <_vfiprintf_r+0x156>
 8009974:	eba0 0308 	sub.w	r3, r0, r8
 8009978:	fa09 f303 	lsl.w	r3, r9, r3
 800997c:	4313      	orrs	r3, r2
 800997e:	9304      	str	r3, [sp, #16]
 8009980:	46a2      	mov	sl, r4
 8009982:	e7d2      	b.n	800992a <_vfiprintf_r+0xe2>
 8009984:	9b03      	ldr	r3, [sp, #12]
 8009986:	1d19      	adds	r1, r3, #4
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	9103      	str	r1, [sp, #12]
 800998c:	2b00      	cmp	r3, #0
 800998e:	bfbb      	ittet	lt
 8009990:	425b      	neglt	r3, r3
 8009992:	f042 0202 	orrlt.w	r2, r2, #2
 8009996:	9307      	strge	r3, [sp, #28]
 8009998:	9307      	strlt	r3, [sp, #28]
 800999a:	bfb8      	it	lt
 800999c:	9204      	strlt	r2, [sp, #16]
 800999e:	7823      	ldrb	r3, [r4, #0]
 80099a0:	2b2e      	cmp	r3, #46	; 0x2e
 80099a2:	d10c      	bne.n	80099be <_vfiprintf_r+0x176>
 80099a4:	7863      	ldrb	r3, [r4, #1]
 80099a6:	2b2a      	cmp	r3, #42	; 0x2a
 80099a8:	d135      	bne.n	8009a16 <_vfiprintf_r+0x1ce>
 80099aa:	9b03      	ldr	r3, [sp, #12]
 80099ac:	1d1a      	adds	r2, r3, #4
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	9203      	str	r2, [sp, #12]
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	bfb8      	it	lt
 80099b6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80099ba:	3402      	adds	r4, #2
 80099bc:	9305      	str	r3, [sp, #20]
 80099be:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009aa4 <_vfiprintf_r+0x25c>
 80099c2:	7821      	ldrb	r1, [r4, #0]
 80099c4:	2203      	movs	r2, #3
 80099c6:	4650      	mov	r0, sl
 80099c8:	f7f6 fbe2 	bl	8000190 <memchr>
 80099cc:	b140      	cbz	r0, 80099e0 <_vfiprintf_r+0x198>
 80099ce:	2340      	movs	r3, #64	; 0x40
 80099d0:	eba0 000a 	sub.w	r0, r0, sl
 80099d4:	fa03 f000 	lsl.w	r0, r3, r0
 80099d8:	9b04      	ldr	r3, [sp, #16]
 80099da:	4303      	orrs	r3, r0
 80099dc:	3401      	adds	r4, #1
 80099de:	9304      	str	r3, [sp, #16]
 80099e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80099e4:	482c      	ldr	r0, [pc, #176]	; (8009a98 <_vfiprintf_r+0x250>)
 80099e6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80099ea:	2206      	movs	r2, #6
 80099ec:	f7f6 fbd0 	bl	8000190 <memchr>
 80099f0:	2800      	cmp	r0, #0
 80099f2:	d03f      	beq.n	8009a74 <_vfiprintf_r+0x22c>
 80099f4:	4b29      	ldr	r3, [pc, #164]	; (8009a9c <_vfiprintf_r+0x254>)
 80099f6:	bb1b      	cbnz	r3, 8009a40 <_vfiprintf_r+0x1f8>
 80099f8:	9b03      	ldr	r3, [sp, #12]
 80099fa:	3307      	adds	r3, #7
 80099fc:	f023 0307 	bic.w	r3, r3, #7
 8009a00:	3308      	adds	r3, #8
 8009a02:	9303      	str	r3, [sp, #12]
 8009a04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a06:	443b      	add	r3, r7
 8009a08:	9309      	str	r3, [sp, #36]	; 0x24
 8009a0a:	e767      	b.n	80098dc <_vfiprintf_r+0x94>
 8009a0c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009a10:	460c      	mov	r4, r1
 8009a12:	2001      	movs	r0, #1
 8009a14:	e7a5      	b.n	8009962 <_vfiprintf_r+0x11a>
 8009a16:	2300      	movs	r3, #0
 8009a18:	3401      	adds	r4, #1
 8009a1a:	9305      	str	r3, [sp, #20]
 8009a1c:	4619      	mov	r1, r3
 8009a1e:	f04f 0c0a 	mov.w	ip, #10
 8009a22:	4620      	mov	r0, r4
 8009a24:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009a28:	3a30      	subs	r2, #48	; 0x30
 8009a2a:	2a09      	cmp	r2, #9
 8009a2c:	d903      	bls.n	8009a36 <_vfiprintf_r+0x1ee>
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d0c5      	beq.n	80099be <_vfiprintf_r+0x176>
 8009a32:	9105      	str	r1, [sp, #20]
 8009a34:	e7c3      	b.n	80099be <_vfiprintf_r+0x176>
 8009a36:	fb0c 2101 	mla	r1, ip, r1, r2
 8009a3a:	4604      	mov	r4, r0
 8009a3c:	2301      	movs	r3, #1
 8009a3e:	e7f0      	b.n	8009a22 <_vfiprintf_r+0x1da>
 8009a40:	ab03      	add	r3, sp, #12
 8009a42:	9300      	str	r3, [sp, #0]
 8009a44:	462a      	mov	r2, r5
 8009a46:	4b16      	ldr	r3, [pc, #88]	; (8009aa0 <_vfiprintf_r+0x258>)
 8009a48:	a904      	add	r1, sp, #16
 8009a4a:	4630      	mov	r0, r6
 8009a4c:	f3af 8000 	nop.w
 8009a50:	4607      	mov	r7, r0
 8009a52:	1c78      	adds	r0, r7, #1
 8009a54:	d1d6      	bne.n	8009a04 <_vfiprintf_r+0x1bc>
 8009a56:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009a58:	07d9      	lsls	r1, r3, #31
 8009a5a:	d405      	bmi.n	8009a68 <_vfiprintf_r+0x220>
 8009a5c:	89ab      	ldrh	r3, [r5, #12]
 8009a5e:	059a      	lsls	r2, r3, #22
 8009a60:	d402      	bmi.n	8009a68 <_vfiprintf_r+0x220>
 8009a62:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009a64:	f7ff fe31 	bl	80096ca <__retarget_lock_release_recursive>
 8009a68:	89ab      	ldrh	r3, [r5, #12]
 8009a6a:	065b      	lsls	r3, r3, #25
 8009a6c:	f53f af12 	bmi.w	8009894 <_vfiprintf_r+0x4c>
 8009a70:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009a72:	e711      	b.n	8009898 <_vfiprintf_r+0x50>
 8009a74:	ab03      	add	r3, sp, #12
 8009a76:	9300      	str	r3, [sp, #0]
 8009a78:	462a      	mov	r2, r5
 8009a7a:	4b09      	ldr	r3, [pc, #36]	; (8009aa0 <_vfiprintf_r+0x258>)
 8009a7c:	a904      	add	r1, sp, #16
 8009a7e:	4630      	mov	r0, r6
 8009a80:	f000 f880 	bl	8009b84 <_printf_i>
 8009a84:	e7e4      	b.n	8009a50 <_vfiprintf_r+0x208>
 8009a86:	bf00      	nop
 8009a88:	0800a6d4 	.word	0x0800a6d4
 8009a8c:	0800a6f4 	.word	0x0800a6f4
 8009a90:	0800a6b4 	.word	0x0800a6b4
 8009a94:	0800a714 	.word	0x0800a714
 8009a98:	0800a71e 	.word	0x0800a71e
 8009a9c:	00000000 	.word	0x00000000
 8009aa0:	08009823 	.word	0x08009823
 8009aa4:	0800a71a 	.word	0x0800a71a

08009aa8 <_printf_common>:
 8009aa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009aac:	4616      	mov	r6, r2
 8009aae:	4699      	mov	r9, r3
 8009ab0:	688a      	ldr	r2, [r1, #8]
 8009ab2:	690b      	ldr	r3, [r1, #16]
 8009ab4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009ab8:	4293      	cmp	r3, r2
 8009aba:	bfb8      	it	lt
 8009abc:	4613      	movlt	r3, r2
 8009abe:	6033      	str	r3, [r6, #0]
 8009ac0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009ac4:	4607      	mov	r7, r0
 8009ac6:	460c      	mov	r4, r1
 8009ac8:	b10a      	cbz	r2, 8009ace <_printf_common+0x26>
 8009aca:	3301      	adds	r3, #1
 8009acc:	6033      	str	r3, [r6, #0]
 8009ace:	6823      	ldr	r3, [r4, #0]
 8009ad0:	0699      	lsls	r1, r3, #26
 8009ad2:	bf42      	ittt	mi
 8009ad4:	6833      	ldrmi	r3, [r6, #0]
 8009ad6:	3302      	addmi	r3, #2
 8009ad8:	6033      	strmi	r3, [r6, #0]
 8009ada:	6825      	ldr	r5, [r4, #0]
 8009adc:	f015 0506 	ands.w	r5, r5, #6
 8009ae0:	d106      	bne.n	8009af0 <_printf_common+0x48>
 8009ae2:	f104 0a19 	add.w	sl, r4, #25
 8009ae6:	68e3      	ldr	r3, [r4, #12]
 8009ae8:	6832      	ldr	r2, [r6, #0]
 8009aea:	1a9b      	subs	r3, r3, r2
 8009aec:	42ab      	cmp	r3, r5
 8009aee:	dc26      	bgt.n	8009b3e <_printf_common+0x96>
 8009af0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009af4:	1e13      	subs	r3, r2, #0
 8009af6:	6822      	ldr	r2, [r4, #0]
 8009af8:	bf18      	it	ne
 8009afa:	2301      	movne	r3, #1
 8009afc:	0692      	lsls	r2, r2, #26
 8009afe:	d42b      	bmi.n	8009b58 <_printf_common+0xb0>
 8009b00:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009b04:	4649      	mov	r1, r9
 8009b06:	4638      	mov	r0, r7
 8009b08:	47c0      	blx	r8
 8009b0a:	3001      	adds	r0, #1
 8009b0c:	d01e      	beq.n	8009b4c <_printf_common+0xa4>
 8009b0e:	6823      	ldr	r3, [r4, #0]
 8009b10:	68e5      	ldr	r5, [r4, #12]
 8009b12:	6832      	ldr	r2, [r6, #0]
 8009b14:	f003 0306 	and.w	r3, r3, #6
 8009b18:	2b04      	cmp	r3, #4
 8009b1a:	bf08      	it	eq
 8009b1c:	1aad      	subeq	r5, r5, r2
 8009b1e:	68a3      	ldr	r3, [r4, #8]
 8009b20:	6922      	ldr	r2, [r4, #16]
 8009b22:	bf0c      	ite	eq
 8009b24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009b28:	2500      	movne	r5, #0
 8009b2a:	4293      	cmp	r3, r2
 8009b2c:	bfc4      	itt	gt
 8009b2e:	1a9b      	subgt	r3, r3, r2
 8009b30:	18ed      	addgt	r5, r5, r3
 8009b32:	2600      	movs	r6, #0
 8009b34:	341a      	adds	r4, #26
 8009b36:	42b5      	cmp	r5, r6
 8009b38:	d11a      	bne.n	8009b70 <_printf_common+0xc8>
 8009b3a:	2000      	movs	r0, #0
 8009b3c:	e008      	b.n	8009b50 <_printf_common+0xa8>
 8009b3e:	2301      	movs	r3, #1
 8009b40:	4652      	mov	r2, sl
 8009b42:	4649      	mov	r1, r9
 8009b44:	4638      	mov	r0, r7
 8009b46:	47c0      	blx	r8
 8009b48:	3001      	adds	r0, #1
 8009b4a:	d103      	bne.n	8009b54 <_printf_common+0xac>
 8009b4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009b50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b54:	3501      	adds	r5, #1
 8009b56:	e7c6      	b.n	8009ae6 <_printf_common+0x3e>
 8009b58:	18e1      	adds	r1, r4, r3
 8009b5a:	1c5a      	adds	r2, r3, #1
 8009b5c:	2030      	movs	r0, #48	; 0x30
 8009b5e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009b62:	4422      	add	r2, r4
 8009b64:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009b68:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009b6c:	3302      	adds	r3, #2
 8009b6e:	e7c7      	b.n	8009b00 <_printf_common+0x58>
 8009b70:	2301      	movs	r3, #1
 8009b72:	4622      	mov	r2, r4
 8009b74:	4649      	mov	r1, r9
 8009b76:	4638      	mov	r0, r7
 8009b78:	47c0      	blx	r8
 8009b7a:	3001      	adds	r0, #1
 8009b7c:	d0e6      	beq.n	8009b4c <_printf_common+0xa4>
 8009b7e:	3601      	adds	r6, #1
 8009b80:	e7d9      	b.n	8009b36 <_printf_common+0x8e>
	...

08009b84 <_printf_i>:
 8009b84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009b88:	7e0f      	ldrb	r7, [r1, #24]
 8009b8a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009b8c:	2f78      	cmp	r7, #120	; 0x78
 8009b8e:	4691      	mov	r9, r2
 8009b90:	4680      	mov	r8, r0
 8009b92:	460c      	mov	r4, r1
 8009b94:	469a      	mov	sl, r3
 8009b96:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009b9a:	d807      	bhi.n	8009bac <_printf_i+0x28>
 8009b9c:	2f62      	cmp	r7, #98	; 0x62
 8009b9e:	d80a      	bhi.n	8009bb6 <_printf_i+0x32>
 8009ba0:	2f00      	cmp	r7, #0
 8009ba2:	f000 80d8 	beq.w	8009d56 <_printf_i+0x1d2>
 8009ba6:	2f58      	cmp	r7, #88	; 0x58
 8009ba8:	f000 80a3 	beq.w	8009cf2 <_printf_i+0x16e>
 8009bac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009bb0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009bb4:	e03a      	b.n	8009c2c <_printf_i+0xa8>
 8009bb6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009bba:	2b15      	cmp	r3, #21
 8009bbc:	d8f6      	bhi.n	8009bac <_printf_i+0x28>
 8009bbe:	a101      	add	r1, pc, #4	; (adr r1, 8009bc4 <_printf_i+0x40>)
 8009bc0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009bc4:	08009c1d 	.word	0x08009c1d
 8009bc8:	08009c31 	.word	0x08009c31
 8009bcc:	08009bad 	.word	0x08009bad
 8009bd0:	08009bad 	.word	0x08009bad
 8009bd4:	08009bad 	.word	0x08009bad
 8009bd8:	08009bad 	.word	0x08009bad
 8009bdc:	08009c31 	.word	0x08009c31
 8009be0:	08009bad 	.word	0x08009bad
 8009be4:	08009bad 	.word	0x08009bad
 8009be8:	08009bad 	.word	0x08009bad
 8009bec:	08009bad 	.word	0x08009bad
 8009bf0:	08009d3d 	.word	0x08009d3d
 8009bf4:	08009c61 	.word	0x08009c61
 8009bf8:	08009d1f 	.word	0x08009d1f
 8009bfc:	08009bad 	.word	0x08009bad
 8009c00:	08009bad 	.word	0x08009bad
 8009c04:	08009d5f 	.word	0x08009d5f
 8009c08:	08009bad 	.word	0x08009bad
 8009c0c:	08009c61 	.word	0x08009c61
 8009c10:	08009bad 	.word	0x08009bad
 8009c14:	08009bad 	.word	0x08009bad
 8009c18:	08009d27 	.word	0x08009d27
 8009c1c:	682b      	ldr	r3, [r5, #0]
 8009c1e:	1d1a      	adds	r2, r3, #4
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	602a      	str	r2, [r5, #0]
 8009c24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009c28:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009c2c:	2301      	movs	r3, #1
 8009c2e:	e0a3      	b.n	8009d78 <_printf_i+0x1f4>
 8009c30:	6820      	ldr	r0, [r4, #0]
 8009c32:	6829      	ldr	r1, [r5, #0]
 8009c34:	0606      	lsls	r6, r0, #24
 8009c36:	f101 0304 	add.w	r3, r1, #4
 8009c3a:	d50a      	bpl.n	8009c52 <_printf_i+0xce>
 8009c3c:	680e      	ldr	r6, [r1, #0]
 8009c3e:	602b      	str	r3, [r5, #0]
 8009c40:	2e00      	cmp	r6, #0
 8009c42:	da03      	bge.n	8009c4c <_printf_i+0xc8>
 8009c44:	232d      	movs	r3, #45	; 0x2d
 8009c46:	4276      	negs	r6, r6
 8009c48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009c4c:	485e      	ldr	r0, [pc, #376]	; (8009dc8 <_printf_i+0x244>)
 8009c4e:	230a      	movs	r3, #10
 8009c50:	e019      	b.n	8009c86 <_printf_i+0x102>
 8009c52:	680e      	ldr	r6, [r1, #0]
 8009c54:	602b      	str	r3, [r5, #0]
 8009c56:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009c5a:	bf18      	it	ne
 8009c5c:	b236      	sxthne	r6, r6
 8009c5e:	e7ef      	b.n	8009c40 <_printf_i+0xbc>
 8009c60:	682b      	ldr	r3, [r5, #0]
 8009c62:	6820      	ldr	r0, [r4, #0]
 8009c64:	1d19      	adds	r1, r3, #4
 8009c66:	6029      	str	r1, [r5, #0]
 8009c68:	0601      	lsls	r1, r0, #24
 8009c6a:	d501      	bpl.n	8009c70 <_printf_i+0xec>
 8009c6c:	681e      	ldr	r6, [r3, #0]
 8009c6e:	e002      	b.n	8009c76 <_printf_i+0xf2>
 8009c70:	0646      	lsls	r6, r0, #25
 8009c72:	d5fb      	bpl.n	8009c6c <_printf_i+0xe8>
 8009c74:	881e      	ldrh	r6, [r3, #0]
 8009c76:	4854      	ldr	r0, [pc, #336]	; (8009dc8 <_printf_i+0x244>)
 8009c78:	2f6f      	cmp	r7, #111	; 0x6f
 8009c7a:	bf0c      	ite	eq
 8009c7c:	2308      	moveq	r3, #8
 8009c7e:	230a      	movne	r3, #10
 8009c80:	2100      	movs	r1, #0
 8009c82:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009c86:	6865      	ldr	r5, [r4, #4]
 8009c88:	60a5      	str	r5, [r4, #8]
 8009c8a:	2d00      	cmp	r5, #0
 8009c8c:	bfa2      	ittt	ge
 8009c8e:	6821      	ldrge	r1, [r4, #0]
 8009c90:	f021 0104 	bicge.w	r1, r1, #4
 8009c94:	6021      	strge	r1, [r4, #0]
 8009c96:	b90e      	cbnz	r6, 8009c9c <_printf_i+0x118>
 8009c98:	2d00      	cmp	r5, #0
 8009c9a:	d04d      	beq.n	8009d38 <_printf_i+0x1b4>
 8009c9c:	4615      	mov	r5, r2
 8009c9e:	fbb6 f1f3 	udiv	r1, r6, r3
 8009ca2:	fb03 6711 	mls	r7, r3, r1, r6
 8009ca6:	5dc7      	ldrb	r7, [r0, r7]
 8009ca8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009cac:	4637      	mov	r7, r6
 8009cae:	42bb      	cmp	r3, r7
 8009cb0:	460e      	mov	r6, r1
 8009cb2:	d9f4      	bls.n	8009c9e <_printf_i+0x11a>
 8009cb4:	2b08      	cmp	r3, #8
 8009cb6:	d10b      	bne.n	8009cd0 <_printf_i+0x14c>
 8009cb8:	6823      	ldr	r3, [r4, #0]
 8009cba:	07de      	lsls	r6, r3, #31
 8009cbc:	d508      	bpl.n	8009cd0 <_printf_i+0x14c>
 8009cbe:	6923      	ldr	r3, [r4, #16]
 8009cc0:	6861      	ldr	r1, [r4, #4]
 8009cc2:	4299      	cmp	r1, r3
 8009cc4:	bfde      	ittt	le
 8009cc6:	2330      	movle	r3, #48	; 0x30
 8009cc8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009ccc:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8009cd0:	1b52      	subs	r2, r2, r5
 8009cd2:	6122      	str	r2, [r4, #16]
 8009cd4:	f8cd a000 	str.w	sl, [sp]
 8009cd8:	464b      	mov	r3, r9
 8009cda:	aa03      	add	r2, sp, #12
 8009cdc:	4621      	mov	r1, r4
 8009cde:	4640      	mov	r0, r8
 8009ce0:	f7ff fee2 	bl	8009aa8 <_printf_common>
 8009ce4:	3001      	adds	r0, #1
 8009ce6:	d14c      	bne.n	8009d82 <_printf_i+0x1fe>
 8009ce8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009cec:	b004      	add	sp, #16
 8009cee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009cf2:	4835      	ldr	r0, [pc, #212]	; (8009dc8 <_printf_i+0x244>)
 8009cf4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009cf8:	6829      	ldr	r1, [r5, #0]
 8009cfa:	6823      	ldr	r3, [r4, #0]
 8009cfc:	f851 6b04 	ldr.w	r6, [r1], #4
 8009d00:	6029      	str	r1, [r5, #0]
 8009d02:	061d      	lsls	r5, r3, #24
 8009d04:	d514      	bpl.n	8009d30 <_printf_i+0x1ac>
 8009d06:	07df      	lsls	r7, r3, #31
 8009d08:	bf44      	itt	mi
 8009d0a:	f043 0320 	orrmi.w	r3, r3, #32
 8009d0e:	6023      	strmi	r3, [r4, #0]
 8009d10:	b91e      	cbnz	r6, 8009d1a <_printf_i+0x196>
 8009d12:	6823      	ldr	r3, [r4, #0]
 8009d14:	f023 0320 	bic.w	r3, r3, #32
 8009d18:	6023      	str	r3, [r4, #0]
 8009d1a:	2310      	movs	r3, #16
 8009d1c:	e7b0      	b.n	8009c80 <_printf_i+0xfc>
 8009d1e:	6823      	ldr	r3, [r4, #0]
 8009d20:	f043 0320 	orr.w	r3, r3, #32
 8009d24:	6023      	str	r3, [r4, #0]
 8009d26:	2378      	movs	r3, #120	; 0x78
 8009d28:	4828      	ldr	r0, [pc, #160]	; (8009dcc <_printf_i+0x248>)
 8009d2a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009d2e:	e7e3      	b.n	8009cf8 <_printf_i+0x174>
 8009d30:	0659      	lsls	r1, r3, #25
 8009d32:	bf48      	it	mi
 8009d34:	b2b6      	uxthmi	r6, r6
 8009d36:	e7e6      	b.n	8009d06 <_printf_i+0x182>
 8009d38:	4615      	mov	r5, r2
 8009d3a:	e7bb      	b.n	8009cb4 <_printf_i+0x130>
 8009d3c:	682b      	ldr	r3, [r5, #0]
 8009d3e:	6826      	ldr	r6, [r4, #0]
 8009d40:	6961      	ldr	r1, [r4, #20]
 8009d42:	1d18      	adds	r0, r3, #4
 8009d44:	6028      	str	r0, [r5, #0]
 8009d46:	0635      	lsls	r5, r6, #24
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	d501      	bpl.n	8009d50 <_printf_i+0x1cc>
 8009d4c:	6019      	str	r1, [r3, #0]
 8009d4e:	e002      	b.n	8009d56 <_printf_i+0x1d2>
 8009d50:	0670      	lsls	r0, r6, #25
 8009d52:	d5fb      	bpl.n	8009d4c <_printf_i+0x1c8>
 8009d54:	8019      	strh	r1, [r3, #0]
 8009d56:	2300      	movs	r3, #0
 8009d58:	6123      	str	r3, [r4, #16]
 8009d5a:	4615      	mov	r5, r2
 8009d5c:	e7ba      	b.n	8009cd4 <_printf_i+0x150>
 8009d5e:	682b      	ldr	r3, [r5, #0]
 8009d60:	1d1a      	adds	r2, r3, #4
 8009d62:	602a      	str	r2, [r5, #0]
 8009d64:	681d      	ldr	r5, [r3, #0]
 8009d66:	6862      	ldr	r2, [r4, #4]
 8009d68:	2100      	movs	r1, #0
 8009d6a:	4628      	mov	r0, r5
 8009d6c:	f7f6 fa10 	bl	8000190 <memchr>
 8009d70:	b108      	cbz	r0, 8009d76 <_printf_i+0x1f2>
 8009d72:	1b40      	subs	r0, r0, r5
 8009d74:	6060      	str	r0, [r4, #4]
 8009d76:	6863      	ldr	r3, [r4, #4]
 8009d78:	6123      	str	r3, [r4, #16]
 8009d7a:	2300      	movs	r3, #0
 8009d7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009d80:	e7a8      	b.n	8009cd4 <_printf_i+0x150>
 8009d82:	6923      	ldr	r3, [r4, #16]
 8009d84:	462a      	mov	r2, r5
 8009d86:	4649      	mov	r1, r9
 8009d88:	4640      	mov	r0, r8
 8009d8a:	47d0      	blx	sl
 8009d8c:	3001      	adds	r0, #1
 8009d8e:	d0ab      	beq.n	8009ce8 <_printf_i+0x164>
 8009d90:	6823      	ldr	r3, [r4, #0]
 8009d92:	079b      	lsls	r3, r3, #30
 8009d94:	d413      	bmi.n	8009dbe <_printf_i+0x23a>
 8009d96:	68e0      	ldr	r0, [r4, #12]
 8009d98:	9b03      	ldr	r3, [sp, #12]
 8009d9a:	4298      	cmp	r0, r3
 8009d9c:	bfb8      	it	lt
 8009d9e:	4618      	movlt	r0, r3
 8009da0:	e7a4      	b.n	8009cec <_printf_i+0x168>
 8009da2:	2301      	movs	r3, #1
 8009da4:	4632      	mov	r2, r6
 8009da6:	4649      	mov	r1, r9
 8009da8:	4640      	mov	r0, r8
 8009daa:	47d0      	blx	sl
 8009dac:	3001      	adds	r0, #1
 8009dae:	d09b      	beq.n	8009ce8 <_printf_i+0x164>
 8009db0:	3501      	adds	r5, #1
 8009db2:	68e3      	ldr	r3, [r4, #12]
 8009db4:	9903      	ldr	r1, [sp, #12]
 8009db6:	1a5b      	subs	r3, r3, r1
 8009db8:	42ab      	cmp	r3, r5
 8009dba:	dcf2      	bgt.n	8009da2 <_printf_i+0x21e>
 8009dbc:	e7eb      	b.n	8009d96 <_printf_i+0x212>
 8009dbe:	2500      	movs	r5, #0
 8009dc0:	f104 0619 	add.w	r6, r4, #25
 8009dc4:	e7f5      	b.n	8009db2 <_printf_i+0x22e>
 8009dc6:	bf00      	nop
 8009dc8:	0800a725 	.word	0x0800a725
 8009dcc:	0800a736 	.word	0x0800a736

08009dd0 <_sbrk_r>:
 8009dd0:	b538      	push	{r3, r4, r5, lr}
 8009dd2:	4d06      	ldr	r5, [pc, #24]	; (8009dec <_sbrk_r+0x1c>)
 8009dd4:	2300      	movs	r3, #0
 8009dd6:	4604      	mov	r4, r0
 8009dd8:	4608      	mov	r0, r1
 8009dda:	602b      	str	r3, [r5, #0]
 8009ddc:	f7f8 f9ec 	bl	80021b8 <_sbrk>
 8009de0:	1c43      	adds	r3, r0, #1
 8009de2:	d102      	bne.n	8009dea <_sbrk_r+0x1a>
 8009de4:	682b      	ldr	r3, [r5, #0]
 8009de6:	b103      	cbz	r3, 8009dea <_sbrk_r+0x1a>
 8009de8:	6023      	str	r3, [r4, #0]
 8009dea:	bd38      	pop	{r3, r4, r5, pc}
 8009dec:	20000d34 	.word	0x20000d34

08009df0 <__sread>:
 8009df0:	b510      	push	{r4, lr}
 8009df2:	460c      	mov	r4, r1
 8009df4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009df8:	f000 fab2 	bl	800a360 <_read_r>
 8009dfc:	2800      	cmp	r0, #0
 8009dfe:	bfab      	itete	ge
 8009e00:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009e02:	89a3      	ldrhlt	r3, [r4, #12]
 8009e04:	181b      	addge	r3, r3, r0
 8009e06:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009e0a:	bfac      	ite	ge
 8009e0c:	6563      	strge	r3, [r4, #84]	; 0x54
 8009e0e:	81a3      	strhlt	r3, [r4, #12]
 8009e10:	bd10      	pop	{r4, pc}

08009e12 <__swrite>:
 8009e12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e16:	461f      	mov	r7, r3
 8009e18:	898b      	ldrh	r3, [r1, #12]
 8009e1a:	05db      	lsls	r3, r3, #23
 8009e1c:	4605      	mov	r5, r0
 8009e1e:	460c      	mov	r4, r1
 8009e20:	4616      	mov	r6, r2
 8009e22:	d505      	bpl.n	8009e30 <__swrite+0x1e>
 8009e24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e28:	2302      	movs	r3, #2
 8009e2a:	2200      	movs	r2, #0
 8009e2c:	f000 f9c8 	bl	800a1c0 <_lseek_r>
 8009e30:	89a3      	ldrh	r3, [r4, #12]
 8009e32:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009e36:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009e3a:	81a3      	strh	r3, [r4, #12]
 8009e3c:	4632      	mov	r2, r6
 8009e3e:	463b      	mov	r3, r7
 8009e40:	4628      	mov	r0, r5
 8009e42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009e46:	f000 b869 	b.w	8009f1c <_write_r>

08009e4a <__sseek>:
 8009e4a:	b510      	push	{r4, lr}
 8009e4c:	460c      	mov	r4, r1
 8009e4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e52:	f000 f9b5 	bl	800a1c0 <_lseek_r>
 8009e56:	1c43      	adds	r3, r0, #1
 8009e58:	89a3      	ldrh	r3, [r4, #12]
 8009e5a:	bf15      	itete	ne
 8009e5c:	6560      	strne	r0, [r4, #84]	; 0x54
 8009e5e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009e62:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009e66:	81a3      	strheq	r3, [r4, #12]
 8009e68:	bf18      	it	ne
 8009e6a:	81a3      	strhne	r3, [r4, #12]
 8009e6c:	bd10      	pop	{r4, pc}

08009e6e <__sclose>:
 8009e6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e72:	f000 b8d3 	b.w	800a01c <_close_r>
	...

08009e78 <__swbuf_r>:
 8009e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e7a:	460e      	mov	r6, r1
 8009e7c:	4614      	mov	r4, r2
 8009e7e:	4605      	mov	r5, r0
 8009e80:	b118      	cbz	r0, 8009e8a <__swbuf_r+0x12>
 8009e82:	6983      	ldr	r3, [r0, #24]
 8009e84:	b90b      	cbnz	r3, 8009e8a <__swbuf_r+0x12>
 8009e86:	f7ff fb81 	bl	800958c <__sinit>
 8009e8a:	4b21      	ldr	r3, [pc, #132]	; (8009f10 <__swbuf_r+0x98>)
 8009e8c:	429c      	cmp	r4, r3
 8009e8e:	d12b      	bne.n	8009ee8 <__swbuf_r+0x70>
 8009e90:	686c      	ldr	r4, [r5, #4]
 8009e92:	69a3      	ldr	r3, [r4, #24]
 8009e94:	60a3      	str	r3, [r4, #8]
 8009e96:	89a3      	ldrh	r3, [r4, #12]
 8009e98:	071a      	lsls	r2, r3, #28
 8009e9a:	d52f      	bpl.n	8009efc <__swbuf_r+0x84>
 8009e9c:	6923      	ldr	r3, [r4, #16]
 8009e9e:	b36b      	cbz	r3, 8009efc <__swbuf_r+0x84>
 8009ea0:	6923      	ldr	r3, [r4, #16]
 8009ea2:	6820      	ldr	r0, [r4, #0]
 8009ea4:	1ac0      	subs	r0, r0, r3
 8009ea6:	6963      	ldr	r3, [r4, #20]
 8009ea8:	b2f6      	uxtb	r6, r6
 8009eaa:	4283      	cmp	r3, r0
 8009eac:	4637      	mov	r7, r6
 8009eae:	dc04      	bgt.n	8009eba <__swbuf_r+0x42>
 8009eb0:	4621      	mov	r1, r4
 8009eb2:	4628      	mov	r0, r5
 8009eb4:	f000 f948 	bl	800a148 <_fflush_r>
 8009eb8:	bb30      	cbnz	r0, 8009f08 <__swbuf_r+0x90>
 8009eba:	68a3      	ldr	r3, [r4, #8]
 8009ebc:	3b01      	subs	r3, #1
 8009ebe:	60a3      	str	r3, [r4, #8]
 8009ec0:	6823      	ldr	r3, [r4, #0]
 8009ec2:	1c5a      	adds	r2, r3, #1
 8009ec4:	6022      	str	r2, [r4, #0]
 8009ec6:	701e      	strb	r6, [r3, #0]
 8009ec8:	6963      	ldr	r3, [r4, #20]
 8009eca:	3001      	adds	r0, #1
 8009ecc:	4283      	cmp	r3, r0
 8009ece:	d004      	beq.n	8009eda <__swbuf_r+0x62>
 8009ed0:	89a3      	ldrh	r3, [r4, #12]
 8009ed2:	07db      	lsls	r3, r3, #31
 8009ed4:	d506      	bpl.n	8009ee4 <__swbuf_r+0x6c>
 8009ed6:	2e0a      	cmp	r6, #10
 8009ed8:	d104      	bne.n	8009ee4 <__swbuf_r+0x6c>
 8009eda:	4621      	mov	r1, r4
 8009edc:	4628      	mov	r0, r5
 8009ede:	f000 f933 	bl	800a148 <_fflush_r>
 8009ee2:	b988      	cbnz	r0, 8009f08 <__swbuf_r+0x90>
 8009ee4:	4638      	mov	r0, r7
 8009ee6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ee8:	4b0a      	ldr	r3, [pc, #40]	; (8009f14 <__swbuf_r+0x9c>)
 8009eea:	429c      	cmp	r4, r3
 8009eec:	d101      	bne.n	8009ef2 <__swbuf_r+0x7a>
 8009eee:	68ac      	ldr	r4, [r5, #8]
 8009ef0:	e7cf      	b.n	8009e92 <__swbuf_r+0x1a>
 8009ef2:	4b09      	ldr	r3, [pc, #36]	; (8009f18 <__swbuf_r+0xa0>)
 8009ef4:	429c      	cmp	r4, r3
 8009ef6:	bf08      	it	eq
 8009ef8:	68ec      	ldreq	r4, [r5, #12]
 8009efa:	e7ca      	b.n	8009e92 <__swbuf_r+0x1a>
 8009efc:	4621      	mov	r1, r4
 8009efe:	4628      	mov	r0, r5
 8009f00:	f000 f81e 	bl	8009f40 <__swsetup_r>
 8009f04:	2800      	cmp	r0, #0
 8009f06:	d0cb      	beq.n	8009ea0 <__swbuf_r+0x28>
 8009f08:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8009f0c:	e7ea      	b.n	8009ee4 <__swbuf_r+0x6c>
 8009f0e:	bf00      	nop
 8009f10:	0800a6d4 	.word	0x0800a6d4
 8009f14:	0800a6f4 	.word	0x0800a6f4
 8009f18:	0800a6b4 	.word	0x0800a6b4

08009f1c <_write_r>:
 8009f1c:	b538      	push	{r3, r4, r5, lr}
 8009f1e:	4d07      	ldr	r5, [pc, #28]	; (8009f3c <_write_r+0x20>)
 8009f20:	4604      	mov	r4, r0
 8009f22:	4608      	mov	r0, r1
 8009f24:	4611      	mov	r1, r2
 8009f26:	2200      	movs	r2, #0
 8009f28:	602a      	str	r2, [r5, #0]
 8009f2a:	461a      	mov	r2, r3
 8009f2c:	f7f8 f8f3 	bl	8002116 <_write>
 8009f30:	1c43      	adds	r3, r0, #1
 8009f32:	d102      	bne.n	8009f3a <_write_r+0x1e>
 8009f34:	682b      	ldr	r3, [r5, #0]
 8009f36:	b103      	cbz	r3, 8009f3a <_write_r+0x1e>
 8009f38:	6023      	str	r3, [r4, #0]
 8009f3a:	bd38      	pop	{r3, r4, r5, pc}
 8009f3c:	20000d34 	.word	0x20000d34

08009f40 <__swsetup_r>:
 8009f40:	4b32      	ldr	r3, [pc, #200]	; (800a00c <__swsetup_r+0xcc>)
 8009f42:	b570      	push	{r4, r5, r6, lr}
 8009f44:	681d      	ldr	r5, [r3, #0]
 8009f46:	4606      	mov	r6, r0
 8009f48:	460c      	mov	r4, r1
 8009f4a:	b125      	cbz	r5, 8009f56 <__swsetup_r+0x16>
 8009f4c:	69ab      	ldr	r3, [r5, #24]
 8009f4e:	b913      	cbnz	r3, 8009f56 <__swsetup_r+0x16>
 8009f50:	4628      	mov	r0, r5
 8009f52:	f7ff fb1b 	bl	800958c <__sinit>
 8009f56:	4b2e      	ldr	r3, [pc, #184]	; (800a010 <__swsetup_r+0xd0>)
 8009f58:	429c      	cmp	r4, r3
 8009f5a:	d10f      	bne.n	8009f7c <__swsetup_r+0x3c>
 8009f5c:	686c      	ldr	r4, [r5, #4]
 8009f5e:	89a3      	ldrh	r3, [r4, #12]
 8009f60:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009f64:	0719      	lsls	r1, r3, #28
 8009f66:	d42c      	bmi.n	8009fc2 <__swsetup_r+0x82>
 8009f68:	06dd      	lsls	r5, r3, #27
 8009f6a:	d411      	bmi.n	8009f90 <__swsetup_r+0x50>
 8009f6c:	2309      	movs	r3, #9
 8009f6e:	6033      	str	r3, [r6, #0]
 8009f70:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009f74:	81a3      	strh	r3, [r4, #12]
 8009f76:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009f7a:	e03e      	b.n	8009ffa <__swsetup_r+0xba>
 8009f7c:	4b25      	ldr	r3, [pc, #148]	; (800a014 <__swsetup_r+0xd4>)
 8009f7e:	429c      	cmp	r4, r3
 8009f80:	d101      	bne.n	8009f86 <__swsetup_r+0x46>
 8009f82:	68ac      	ldr	r4, [r5, #8]
 8009f84:	e7eb      	b.n	8009f5e <__swsetup_r+0x1e>
 8009f86:	4b24      	ldr	r3, [pc, #144]	; (800a018 <__swsetup_r+0xd8>)
 8009f88:	429c      	cmp	r4, r3
 8009f8a:	bf08      	it	eq
 8009f8c:	68ec      	ldreq	r4, [r5, #12]
 8009f8e:	e7e6      	b.n	8009f5e <__swsetup_r+0x1e>
 8009f90:	0758      	lsls	r0, r3, #29
 8009f92:	d512      	bpl.n	8009fba <__swsetup_r+0x7a>
 8009f94:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009f96:	b141      	cbz	r1, 8009faa <__swsetup_r+0x6a>
 8009f98:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009f9c:	4299      	cmp	r1, r3
 8009f9e:	d002      	beq.n	8009fa6 <__swsetup_r+0x66>
 8009fa0:	4630      	mov	r0, r6
 8009fa2:	f000 f991 	bl	800a2c8 <_free_r>
 8009fa6:	2300      	movs	r3, #0
 8009fa8:	6363      	str	r3, [r4, #52]	; 0x34
 8009faa:	89a3      	ldrh	r3, [r4, #12]
 8009fac:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009fb0:	81a3      	strh	r3, [r4, #12]
 8009fb2:	2300      	movs	r3, #0
 8009fb4:	6063      	str	r3, [r4, #4]
 8009fb6:	6923      	ldr	r3, [r4, #16]
 8009fb8:	6023      	str	r3, [r4, #0]
 8009fba:	89a3      	ldrh	r3, [r4, #12]
 8009fbc:	f043 0308 	orr.w	r3, r3, #8
 8009fc0:	81a3      	strh	r3, [r4, #12]
 8009fc2:	6923      	ldr	r3, [r4, #16]
 8009fc4:	b94b      	cbnz	r3, 8009fda <__swsetup_r+0x9a>
 8009fc6:	89a3      	ldrh	r3, [r4, #12]
 8009fc8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009fcc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009fd0:	d003      	beq.n	8009fda <__swsetup_r+0x9a>
 8009fd2:	4621      	mov	r1, r4
 8009fd4:	4630      	mov	r0, r6
 8009fd6:	f000 f92b 	bl	800a230 <__smakebuf_r>
 8009fda:	89a0      	ldrh	r0, [r4, #12]
 8009fdc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009fe0:	f010 0301 	ands.w	r3, r0, #1
 8009fe4:	d00a      	beq.n	8009ffc <__swsetup_r+0xbc>
 8009fe6:	2300      	movs	r3, #0
 8009fe8:	60a3      	str	r3, [r4, #8]
 8009fea:	6963      	ldr	r3, [r4, #20]
 8009fec:	425b      	negs	r3, r3
 8009fee:	61a3      	str	r3, [r4, #24]
 8009ff0:	6923      	ldr	r3, [r4, #16]
 8009ff2:	b943      	cbnz	r3, 800a006 <__swsetup_r+0xc6>
 8009ff4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009ff8:	d1ba      	bne.n	8009f70 <__swsetup_r+0x30>
 8009ffa:	bd70      	pop	{r4, r5, r6, pc}
 8009ffc:	0781      	lsls	r1, r0, #30
 8009ffe:	bf58      	it	pl
 800a000:	6963      	ldrpl	r3, [r4, #20]
 800a002:	60a3      	str	r3, [r4, #8]
 800a004:	e7f4      	b.n	8009ff0 <__swsetup_r+0xb0>
 800a006:	2000      	movs	r0, #0
 800a008:	e7f7      	b.n	8009ffa <__swsetup_r+0xba>
 800a00a:	bf00      	nop
 800a00c:	20000028 	.word	0x20000028
 800a010:	0800a6d4 	.word	0x0800a6d4
 800a014:	0800a6f4 	.word	0x0800a6f4
 800a018:	0800a6b4 	.word	0x0800a6b4

0800a01c <_close_r>:
 800a01c:	b538      	push	{r3, r4, r5, lr}
 800a01e:	4d06      	ldr	r5, [pc, #24]	; (800a038 <_close_r+0x1c>)
 800a020:	2300      	movs	r3, #0
 800a022:	4604      	mov	r4, r0
 800a024:	4608      	mov	r0, r1
 800a026:	602b      	str	r3, [r5, #0]
 800a028:	f7f8 f891 	bl	800214e <_close>
 800a02c:	1c43      	adds	r3, r0, #1
 800a02e:	d102      	bne.n	800a036 <_close_r+0x1a>
 800a030:	682b      	ldr	r3, [r5, #0]
 800a032:	b103      	cbz	r3, 800a036 <_close_r+0x1a>
 800a034:	6023      	str	r3, [r4, #0]
 800a036:	bd38      	pop	{r3, r4, r5, pc}
 800a038:	20000d34 	.word	0x20000d34

0800a03c <__sflush_r>:
 800a03c:	898a      	ldrh	r2, [r1, #12]
 800a03e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a042:	4605      	mov	r5, r0
 800a044:	0710      	lsls	r0, r2, #28
 800a046:	460c      	mov	r4, r1
 800a048:	d458      	bmi.n	800a0fc <__sflush_r+0xc0>
 800a04a:	684b      	ldr	r3, [r1, #4]
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	dc05      	bgt.n	800a05c <__sflush_r+0x20>
 800a050:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a052:	2b00      	cmp	r3, #0
 800a054:	dc02      	bgt.n	800a05c <__sflush_r+0x20>
 800a056:	2000      	movs	r0, #0
 800a058:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a05c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a05e:	2e00      	cmp	r6, #0
 800a060:	d0f9      	beq.n	800a056 <__sflush_r+0x1a>
 800a062:	2300      	movs	r3, #0
 800a064:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a068:	682f      	ldr	r7, [r5, #0]
 800a06a:	602b      	str	r3, [r5, #0]
 800a06c:	d032      	beq.n	800a0d4 <__sflush_r+0x98>
 800a06e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a070:	89a3      	ldrh	r3, [r4, #12]
 800a072:	075a      	lsls	r2, r3, #29
 800a074:	d505      	bpl.n	800a082 <__sflush_r+0x46>
 800a076:	6863      	ldr	r3, [r4, #4]
 800a078:	1ac0      	subs	r0, r0, r3
 800a07a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a07c:	b10b      	cbz	r3, 800a082 <__sflush_r+0x46>
 800a07e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a080:	1ac0      	subs	r0, r0, r3
 800a082:	2300      	movs	r3, #0
 800a084:	4602      	mov	r2, r0
 800a086:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a088:	6a21      	ldr	r1, [r4, #32]
 800a08a:	4628      	mov	r0, r5
 800a08c:	47b0      	blx	r6
 800a08e:	1c43      	adds	r3, r0, #1
 800a090:	89a3      	ldrh	r3, [r4, #12]
 800a092:	d106      	bne.n	800a0a2 <__sflush_r+0x66>
 800a094:	6829      	ldr	r1, [r5, #0]
 800a096:	291d      	cmp	r1, #29
 800a098:	d82c      	bhi.n	800a0f4 <__sflush_r+0xb8>
 800a09a:	4a2a      	ldr	r2, [pc, #168]	; (800a144 <__sflush_r+0x108>)
 800a09c:	40ca      	lsrs	r2, r1
 800a09e:	07d6      	lsls	r6, r2, #31
 800a0a0:	d528      	bpl.n	800a0f4 <__sflush_r+0xb8>
 800a0a2:	2200      	movs	r2, #0
 800a0a4:	6062      	str	r2, [r4, #4]
 800a0a6:	04d9      	lsls	r1, r3, #19
 800a0a8:	6922      	ldr	r2, [r4, #16]
 800a0aa:	6022      	str	r2, [r4, #0]
 800a0ac:	d504      	bpl.n	800a0b8 <__sflush_r+0x7c>
 800a0ae:	1c42      	adds	r2, r0, #1
 800a0b0:	d101      	bne.n	800a0b6 <__sflush_r+0x7a>
 800a0b2:	682b      	ldr	r3, [r5, #0]
 800a0b4:	b903      	cbnz	r3, 800a0b8 <__sflush_r+0x7c>
 800a0b6:	6560      	str	r0, [r4, #84]	; 0x54
 800a0b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a0ba:	602f      	str	r7, [r5, #0]
 800a0bc:	2900      	cmp	r1, #0
 800a0be:	d0ca      	beq.n	800a056 <__sflush_r+0x1a>
 800a0c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a0c4:	4299      	cmp	r1, r3
 800a0c6:	d002      	beq.n	800a0ce <__sflush_r+0x92>
 800a0c8:	4628      	mov	r0, r5
 800a0ca:	f000 f8fd 	bl	800a2c8 <_free_r>
 800a0ce:	2000      	movs	r0, #0
 800a0d0:	6360      	str	r0, [r4, #52]	; 0x34
 800a0d2:	e7c1      	b.n	800a058 <__sflush_r+0x1c>
 800a0d4:	6a21      	ldr	r1, [r4, #32]
 800a0d6:	2301      	movs	r3, #1
 800a0d8:	4628      	mov	r0, r5
 800a0da:	47b0      	blx	r6
 800a0dc:	1c41      	adds	r1, r0, #1
 800a0de:	d1c7      	bne.n	800a070 <__sflush_r+0x34>
 800a0e0:	682b      	ldr	r3, [r5, #0]
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d0c4      	beq.n	800a070 <__sflush_r+0x34>
 800a0e6:	2b1d      	cmp	r3, #29
 800a0e8:	d001      	beq.n	800a0ee <__sflush_r+0xb2>
 800a0ea:	2b16      	cmp	r3, #22
 800a0ec:	d101      	bne.n	800a0f2 <__sflush_r+0xb6>
 800a0ee:	602f      	str	r7, [r5, #0]
 800a0f0:	e7b1      	b.n	800a056 <__sflush_r+0x1a>
 800a0f2:	89a3      	ldrh	r3, [r4, #12]
 800a0f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a0f8:	81a3      	strh	r3, [r4, #12]
 800a0fa:	e7ad      	b.n	800a058 <__sflush_r+0x1c>
 800a0fc:	690f      	ldr	r7, [r1, #16]
 800a0fe:	2f00      	cmp	r7, #0
 800a100:	d0a9      	beq.n	800a056 <__sflush_r+0x1a>
 800a102:	0793      	lsls	r3, r2, #30
 800a104:	680e      	ldr	r6, [r1, #0]
 800a106:	bf08      	it	eq
 800a108:	694b      	ldreq	r3, [r1, #20]
 800a10a:	600f      	str	r7, [r1, #0]
 800a10c:	bf18      	it	ne
 800a10e:	2300      	movne	r3, #0
 800a110:	eba6 0807 	sub.w	r8, r6, r7
 800a114:	608b      	str	r3, [r1, #8]
 800a116:	f1b8 0f00 	cmp.w	r8, #0
 800a11a:	dd9c      	ble.n	800a056 <__sflush_r+0x1a>
 800a11c:	6a21      	ldr	r1, [r4, #32]
 800a11e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a120:	4643      	mov	r3, r8
 800a122:	463a      	mov	r2, r7
 800a124:	4628      	mov	r0, r5
 800a126:	47b0      	blx	r6
 800a128:	2800      	cmp	r0, #0
 800a12a:	dc06      	bgt.n	800a13a <__sflush_r+0xfe>
 800a12c:	89a3      	ldrh	r3, [r4, #12]
 800a12e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a132:	81a3      	strh	r3, [r4, #12]
 800a134:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a138:	e78e      	b.n	800a058 <__sflush_r+0x1c>
 800a13a:	4407      	add	r7, r0
 800a13c:	eba8 0800 	sub.w	r8, r8, r0
 800a140:	e7e9      	b.n	800a116 <__sflush_r+0xda>
 800a142:	bf00      	nop
 800a144:	20400001 	.word	0x20400001

0800a148 <_fflush_r>:
 800a148:	b538      	push	{r3, r4, r5, lr}
 800a14a:	690b      	ldr	r3, [r1, #16]
 800a14c:	4605      	mov	r5, r0
 800a14e:	460c      	mov	r4, r1
 800a150:	b913      	cbnz	r3, 800a158 <_fflush_r+0x10>
 800a152:	2500      	movs	r5, #0
 800a154:	4628      	mov	r0, r5
 800a156:	bd38      	pop	{r3, r4, r5, pc}
 800a158:	b118      	cbz	r0, 800a162 <_fflush_r+0x1a>
 800a15a:	6983      	ldr	r3, [r0, #24]
 800a15c:	b90b      	cbnz	r3, 800a162 <_fflush_r+0x1a>
 800a15e:	f7ff fa15 	bl	800958c <__sinit>
 800a162:	4b14      	ldr	r3, [pc, #80]	; (800a1b4 <_fflush_r+0x6c>)
 800a164:	429c      	cmp	r4, r3
 800a166:	d11b      	bne.n	800a1a0 <_fflush_r+0x58>
 800a168:	686c      	ldr	r4, [r5, #4]
 800a16a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d0ef      	beq.n	800a152 <_fflush_r+0xa>
 800a172:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a174:	07d0      	lsls	r0, r2, #31
 800a176:	d404      	bmi.n	800a182 <_fflush_r+0x3a>
 800a178:	0599      	lsls	r1, r3, #22
 800a17a:	d402      	bmi.n	800a182 <_fflush_r+0x3a>
 800a17c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a17e:	f7ff faa3 	bl	80096c8 <__retarget_lock_acquire_recursive>
 800a182:	4628      	mov	r0, r5
 800a184:	4621      	mov	r1, r4
 800a186:	f7ff ff59 	bl	800a03c <__sflush_r>
 800a18a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a18c:	07da      	lsls	r2, r3, #31
 800a18e:	4605      	mov	r5, r0
 800a190:	d4e0      	bmi.n	800a154 <_fflush_r+0xc>
 800a192:	89a3      	ldrh	r3, [r4, #12]
 800a194:	059b      	lsls	r3, r3, #22
 800a196:	d4dd      	bmi.n	800a154 <_fflush_r+0xc>
 800a198:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a19a:	f7ff fa96 	bl	80096ca <__retarget_lock_release_recursive>
 800a19e:	e7d9      	b.n	800a154 <_fflush_r+0xc>
 800a1a0:	4b05      	ldr	r3, [pc, #20]	; (800a1b8 <_fflush_r+0x70>)
 800a1a2:	429c      	cmp	r4, r3
 800a1a4:	d101      	bne.n	800a1aa <_fflush_r+0x62>
 800a1a6:	68ac      	ldr	r4, [r5, #8]
 800a1a8:	e7df      	b.n	800a16a <_fflush_r+0x22>
 800a1aa:	4b04      	ldr	r3, [pc, #16]	; (800a1bc <_fflush_r+0x74>)
 800a1ac:	429c      	cmp	r4, r3
 800a1ae:	bf08      	it	eq
 800a1b0:	68ec      	ldreq	r4, [r5, #12]
 800a1b2:	e7da      	b.n	800a16a <_fflush_r+0x22>
 800a1b4:	0800a6d4 	.word	0x0800a6d4
 800a1b8:	0800a6f4 	.word	0x0800a6f4
 800a1bc:	0800a6b4 	.word	0x0800a6b4

0800a1c0 <_lseek_r>:
 800a1c0:	b538      	push	{r3, r4, r5, lr}
 800a1c2:	4d07      	ldr	r5, [pc, #28]	; (800a1e0 <_lseek_r+0x20>)
 800a1c4:	4604      	mov	r4, r0
 800a1c6:	4608      	mov	r0, r1
 800a1c8:	4611      	mov	r1, r2
 800a1ca:	2200      	movs	r2, #0
 800a1cc:	602a      	str	r2, [r5, #0]
 800a1ce:	461a      	mov	r2, r3
 800a1d0:	f7f7 ffe4 	bl	800219c <_lseek>
 800a1d4:	1c43      	adds	r3, r0, #1
 800a1d6:	d102      	bne.n	800a1de <_lseek_r+0x1e>
 800a1d8:	682b      	ldr	r3, [r5, #0]
 800a1da:	b103      	cbz	r3, 800a1de <_lseek_r+0x1e>
 800a1dc:	6023      	str	r3, [r4, #0]
 800a1de:	bd38      	pop	{r3, r4, r5, pc}
 800a1e0:	20000d34 	.word	0x20000d34

0800a1e4 <__swhatbuf_r>:
 800a1e4:	b570      	push	{r4, r5, r6, lr}
 800a1e6:	460e      	mov	r6, r1
 800a1e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1ec:	2900      	cmp	r1, #0
 800a1ee:	b096      	sub	sp, #88	; 0x58
 800a1f0:	4614      	mov	r4, r2
 800a1f2:	461d      	mov	r5, r3
 800a1f4:	da08      	bge.n	800a208 <__swhatbuf_r+0x24>
 800a1f6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a1fa:	2200      	movs	r2, #0
 800a1fc:	602a      	str	r2, [r5, #0]
 800a1fe:	061a      	lsls	r2, r3, #24
 800a200:	d410      	bmi.n	800a224 <__swhatbuf_r+0x40>
 800a202:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a206:	e00e      	b.n	800a226 <__swhatbuf_r+0x42>
 800a208:	466a      	mov	r2, sp
 800a20a:	f000 f8bb 	bl	800a384 <_fstat_r>
 800a20e:	2800      	cmp	r0, #0
 800a210:	dbf1      	blt.n	800a1f6 <__swhatbuf_r+0x12>
 800a212:	9a01      	ldr	r2, [sp, #4]
 800a214:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a218:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a21c:	425a      	negs	r2, r3
 800a21e:	415a      	adcs	r2, r3
 800a220:	602a      	str	r2, [r5, #0]
 800a222:	e7ee      	b.n	800a202 <__swhatbuf_r+0x1e>
 800a224:	2340      	movs	r3, #64	; 0x40
 800a226:	2000      	movs	r0, #0
 800a228:	6023      	str	r3, [r4, #0]
 800a22a:	b016      	add	sp, #88	; 0x58
 800a22c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a230 <__smakebuf_r>:
 800a230:	898b      	ldrh	r3, [r1, #12]
 800a232:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a234:	079d      	lsls	r5, r3, #30
 800a236:	4606      	mov	r6, r0
 800a238:	460c      	mov	r4, r1
 800a23a:	d507      	bpl.n	800a24c <__smakebuf_r+0x1c>
 800a23c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a240:	6023      	str	r3, [r4, #0]
 800a242:	6123      	str	r3, [r4, #16]
 800a244:	2301      	movs	r3, #1
 800a246:	6163      	str	r3, [r4, #20]
 800a248:	b002      	add	sp, #8
 800a24a:	bd70      	pop	{r4, r5, r6, pc}
 800a24c:	ab01      	add	r3, sp, #4
 800a24e:	466a      	mov	r2, sp
 800a250:	f7ff ffc8 	bl	800a1e4 <__swhatbuf_r>
 800a254:	9900      	ldr	r1, [sp, #0]
 800a256:	4605      	mov	r5, r0
 800a258:	4630      	mov	r0, r6
 800a25a:	f7ff fa57 	bl	800970c <_malloc_r>
 800a25e:	b948      	cbnz	r0, 800a274 <__smakebuf_r+0x44>
 800a260:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a264:	059a      	lsls	r2, r3, #22
 800a266:	d4ef      	bmi.n	800a248 <__smakebuf_r+0x18>
 800a268:	f023 0303 	bic.w	r3, r3, #3
 800a26c:	f043 0302 	orr.w	r3, r3, #2
 800a270:	81a3      	strh	r3, [r4, #12]
 800a272:	e7e3      	b.n	800a23c <__smakebuf_r+0xc>
 800a274:	4b0d      	ldr	r3, [pc, #52]	; (800a2ac <__smakebuf_r+0x7c>)
 800a276:	62b3      	str	r3, [r6, #40]	; 0x28
 800a278:	89a3      	ldrh	r3, [r4, #12]
 800a27a:	6020      	str	r0, [r4, #0]
 800a27c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a280:	81a3      	strh	r3, [r4, #12]
 800a282:	9b00      	ldr	r3, [sp, #0]
 800a284:	6163      	str	r3, [r4, #20]
 800a286:	9b01      	ldr	r3, [sp, #4]
 800a288:	6120      	str	r0, [r4, #16]
 800a28a:	b15b      	cbz	r3, 800a2a4 <__smakebuf_r+0x74>
 800a28c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a290:	4630      	mov	r0, r6
 800a292:	f000 f889 	bl	800a3a8 <_isatty_r>
 800a296:	b128      	cbz	r0, 800a2a4 <__smakebuf_r+0x74>
 800a298:	89a3      	ldrh	r3, [r4, #12]
 800a29a:	f023 0303 	bic.w	r3, r3, #3
 800a29e:	f043 0301 	orr.w	r3, r3, #1
 800a2a2:	81a3      	strh	r3, [r4, #12]
 800a2a4:	89a0      	ldrh	r0, [r4, #12]
 800a2a6:	4305      	orrs	r5, r0
 800a2a8:	81a5      	strh	r5, [r4, #12]
 800a2aa:	e7cd      	b.n	800a248 <__smakebuf_r+0x18>
 800a2ac:	08009525 	.word	0x08009525

0800a2b0 <__malloc_lock>:
 800a2b0:	4801      	ldr	r0, [pc, #4]	; (800a2b8 <__malloc_lock+0x8>)
 800a2b2:	f7ff ba09 	b.w	80096c8 <__retarget_lock_acquire_recursive>
 800a2b6:	bf00      	nop
 800a2b8:	20000d28 	.word	0x20000d28

0800a2bc <__malloc_unlock>:
 800a2bc:	4801      	ldr	r0, [pc, #4]	; (800a2c4 <__malloc_unlock+0x8>)
 800a2be:	f7ff ba04 	b.w	80096ca <__retarget_lock_release_recursive>
 800a2c2:	bf00      	nop
 800a2c4:	20000d28 	.word	0x20000d28

0800a2c8 <_free_r>:
 800a2c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a2ca:	2900      	cmp	r1, #0
 800a2cc:	d044      	beq.n	800a358 <_free_r+0x90>
 800a2ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a2d2:	9001      	str	r0, [sp, #4]
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	f1a1 0404 	sub.w	r4, r1, #4
 800a2da:	bfb8      	it	lt
 800a2dc:	18e4      	addlt	r4, r4, r3
 800a2de:	f7ff ffe7 	bl	800a2b0 <__malloc_lock>
 800a2e2:	4a1e      	ldr	r2, [pc, #120]	; (800a35c <_free_r+0x94>)
 800a2e4:	9801      	ldr	r0, [sp, #4]
 800a2e6:	6813      	ldr	r3, [r2, #0]
 800a2e8:	b933      	cbnz	r3, 800a2f8 <_free_r+0x30>
 800a2ea:	6063      	str	r3, [r4, #4]
 800a2ec:	6014      	str	r4, [r2, #0]
 800a2ee:	b003      	add	sp, #12
 800a2f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a2f4:	f7ff bfe2 	b.w	800a2bc <__malloc_unlock>
 800a2f8:	42a3      	cmp	r3, r4
 800a2fa:	d908      	bls.n	800a30e <_free_r+0x46>
 800a2fc:	6825      	ldr	r5, [r4, #0]
 800a2fe:	1961      	adds	r1, r4, r5
 800a300:	428b      	cmp	r3, r1
 800a302:	bf01      	itttt	eq
 800a304:	6819      	ldreq	r1, [r3, #0]
 800a306:	685b      	ldreq	r3, [r3, #4]
 800a308:	1949      	addeq	r1, r1, r5
 800a30a:	6021      	streq	r1, [r4, #0]
 800a30c:	e7ed      	b.n	800a2ea <_free_r+0x22>
 800a30e:	461a      	mov	r2, r3
 800a310:	685b      	ldr	r3, [r3, #4]
 800a312:	b10b      	cbz	r3, 800a318 <_free_r+0x50>
 800a314:	42a3      	cmp	r3, r4
 800a316:	d9fa      	bls.n	800a30e <_free_r+0x46>
 800a318:	6811      	ldr	r1, [r2, #0]
 800a31a:	1855      	adds	r5, r2, r1
 800a31c:	42a5      	cmp	r5, r4
 800a31e:	d10b      	bne.n	800a338 <_free_r+0x70>
 800a320:	6824      	ldr	r4, [r4, #0]
 800a322:	4421      	add	r1, r4
 800a324:	1854      	adds	r4, r2, r1
 800a326:	42a3      	cmp	r3, r4
 800a328:	6011      	str	r1, [r2, #0]
 800a32a:	d1e0      	bne.n	800a2ee <_free_r+0x26>
 800a32c:	681c      	ldr	r4, [r3, #0]
 800a32e:	685b      	ldr	r3, [r3, #4]
 800a330:	6053      	str	r3, [r2, #4]
 800a332:	4421      	add	r1, r4
 800a334:	6011      	str	r1, [r2, #0]
 800a336:	e7da      	b.n	800a2ee <_free_r+0x26>
 800a338:	d902      	bls.n	800a340 <_free_r+0x78>
 800a33a:	230c      	movs	r3, #12
 800a33c:	6003      	str	r3, [r0, #0]
 800a33e:	e7d6      	b.n	800a2ee <_free_r+0x26>
 800a340:	6825      	ldr	r5, [r4, #0]
 800a342:	1961      	adds	r1, r4, r5
 800a344:	428b      	cmp	r3, r1
 800a346:	bf04      	itt	eq
 800a348:	6819      	ldreq	r1, [r3, #0]
 800a34a:	685b      	ldreq	r3, [r3, #4]
 800a34c:	6063      	str	r3, [r4, #4]
 800a34e:	bf04      	itt	eq
 800a350:	1949      	addeq	r1, r1, r5
 800a352:	6021      	streq	r1, [r4, #0]
 800a354:	6054      	str	r4, [r2, #4]
 800a356:	e7ca      	b.n	800a2ee <_free_r+0x26>
 800a358:	b003      	add	sp, #12
 800a35a:	bd30      	pop	{r4, r5, pc}
 800a35c:	20000d2c 	.word	0x20000d2c

0800a360 <_read_r>:
 800a360:	b538      	push	{r3, r4, r5, lr}
 800a362:	4d07      	ldr	r5, [pc, #28]	; (800a380 <_read_r+0x20>)
 800a364:	4604      	mov	r4, r0
 800a366:	4608      	mov	r0, r1
 800a368:	4611      	mov	r1, r2
 800a36a:	2200      	movs	r2, #0
 800a36c:	602a      	str	r2, [r5, #0]
 800a36e:	461a      	mov	r2, r3
 800a370:	f7f7 feb4 	bl	80020dc <_read>
 800a374:	1c43      	adds	r3, r0, #1
 800a376:	d102      	bne.n	800a37e <_read_r+0x1e>
 800a378:	682b      	ldr	r3, [r5, #0]
 800a37a:	b103      	cbz	r3, 800a37e <_read_r+0x1e>
 800a37c:	6023      	str	r3, [r4, #0]
 800a37e:	bd38      	pop	{r3, r4, r5, pc}
 800a380:	20000d34 	.word	0x20000d34

0800a384 <_fstat_r>:
 800a384:	b538      	push	{r3, r4, r5, lr}
 800a386:	4d07      	ldr	r5, [pc, #28]	; (800a3a4 <_fstat_r+0x20>)
 800a388:	2300      	movs	r3, #0
 800a38a:	4604      	mov	r4, r0
 800a38c:	4608      	mov	r0, r1
 800a38e:	4611      	mov	r1, r2
 800a390:	602b      	str	r3, [r5, #0]
 800a392:	f7f7 fee8 	bl	8002166 <_fstat>
 800a396:	1c43      	adds	r3, r0, #1
 800a398:	d102      	bne.n	800a3a0 <_fstat_r+0x1c>
 800a39a:	682b      	ldr	r3, [r5, #0]
 800a39c:	b103      	cbz	r3, 800a3a0 <_fstat_r+0x1c>
 800a39e:	6023      	str	r3, [r4, #0]
 800a3a0:	bd38      	pop	{r3, r4, r5, pc}
 800a3a2:	bf00      	nop
 800a3a4:	20000d34 	.word	0x20000d34

0800a3a8 <_isatty_r>:
 800a3a8:	b538      	push	{r3, r4, r5, lr}
 800a3aa:	4d06      	ldr	r5, [pc, #24]	; (800a3c4 <_isatty_r+0x1c>)
 800a3ac:	2300      	movs	r3, #0
 800a3ae:	4604      	mov	r4, r0
 800a3b0:	4608      	mov	r0, r1
 800a3b2:	602b      	str	r3, [r5, #0]
 800a3b4:	f7f7 fee7 	bl	8002186 <_isatty>
 800a3b8:	1c43      	adds	r3, r0, #1
 800a3ba:	d102      	bne.n	800a3c2 <_isatty_r+0x1a>
 800a3bc:	682b      	ldr	r3, [r5, #0]
 800a3be:	b103      	cbz	r3, 800a3c2 <_isatty_r+0x1a>
 800a3c0:	6023      	str	r3, [r4, #0]
 800a3c2:	bd38      	pop	{r3, r4, r5, pc}
 800a3c4:	20000d34 	.word	0x20000d34

0800a3c8 <_init>:
 800a3c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3ca:	bf00      	nop
 800a3cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a3ce:	bc08      	pop	{r3}
 800a3d0:	469e      	mov	lr, r3
 800a3d2:	4770      	bx	lr

0800a3d4 <_fini>:
 800a3d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3d6:	bf00      	nop
 800a3d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a3da:	bc08      	pop	{r3}
 800a3dc:	469e      	mov	lr, r3
 800a3de:	4770      	bx	lr
