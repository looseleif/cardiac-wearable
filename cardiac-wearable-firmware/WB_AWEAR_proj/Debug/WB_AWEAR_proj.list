
WB_AWEAR_proj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d550  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000428  0800d690  0800d690  0001d690  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800dab8  0800dab8  0001dab8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800dac0  0800dac0  0001dac0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800dac4  0800dac4  0001dac4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000084  20000008  0800dac8  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 MB_MEM2       00000883  2000008c  0800db4c  0002008c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 BLE_DRIVER_CONTEXT 00000035  20000910  0800e3cf  00020910  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 SYSTEM_DRIVER_CONTEXT 00000011  20000948  0800e404  00020948  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00000934  2000095c  0800e415  0002095c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001290  0800e415  00021290  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020959  2**0
                  CONTENTS, READONLY
 13 MAPPING_TABLE 00000028  20030000  20030000  00030000  2**2
                  ALLOC
 14 MB_MEM1       000001bb  20030028  20030028  00030000  2**2
                  ALLOC
 15 .debug_info   0003600a  00000000  00000000  00020989  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 000068f2  00000000  00000000  00056993  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00002f30  00000000  00000000  0005d288  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 00002c48  00000000  00000000  000601b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002e9ed  00000000  00000000  00062e00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00034f6a  00000000  00000000  000917ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000ffdf3  00000000  00000000  000c6757  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000050  00000000  00000000  001c654a  2**0
                  CONTENTS, READONLY
 23 .debug_frame  0000cfbc  00000000  00000000  001c659c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	2000095c 	.word	0x2000095c
 800015c:	00000000 	.word	0x00000000
 8000160:	0800d678 	.word	0x0800d678

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000960 	.word	0x20000960
 800017c:	0800d678 	.word	0x0800d678

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	; 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_d2uiz>:
 80005a8:	004a      	lsls	r2, r1, #1
 80005aa:	d211      	bcs.n	80005d0 <__aeabi_d2uiz+0x28>
 80005ac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80005b0:	d211      	bcs.n	80005d6 <__aeabi_d2uiz+0x2e>
 80005b2:	d50d      	bpl.n	80005d0 <__aeabi_d2uiz+0x28>
 80005b4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80005b8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80005bc:	d40e      	bmi.n	80005dc <__aeabi_d2uiz+0x34>
 80005be:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80005c2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80005c6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80005ca:	fa23 f002 	lsr.w	r0, r3, r2
 80005ce:	4770      	bx	lr
 80005d0:	f04f 0000 	mov.w	r0, #0
 80005d4:	4770      	bx	lr
 80005d6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80005da:	d102      	bne.n	80005e2 <__aeabi_d2uiz+0x3a>
 80005dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80005e0:	4770      	bx	lr
 80005e2:	f04f 0000 	mov.w	r0, #0
 80005e6:	4770      	bx	lr

080005e8 <__aeabi_uldivmod>:
 80005e8:	b953      	cbnz	r3, 8000600 <__aeabi_uldivmod+0x18>
 80005ea:	b94a      	cbnz	r2, 8000600 <__aeabi_uldivmod+0x18>
 80005ec:	2900      	cmp	r1, #0
 80005ee:	bf08      	it	eq
 80005f0:	2800      	cmpeq	r0, #0
 80005f2:	bf1c      	itt	ne
 80005f4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80005f8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80005fc:	f000 b974 	b.w	80008e8 <__aeabi_idiv0>
 8000600:	f1ad 0c08 	sub.w	ip, sp, #8
 8000604:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000608:	f000 f806 	bl	8000618 <__udivmoddi4>
 800060c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000610:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000614:	b004      	add	sp, #16
 8000616:	4770      	bx	lr

08000618 <__udivmoddi4>:
 8000618:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800061c:	9d08      	ldr	r5, [sp, #32]
 800061e:	4604      	mov	r4, r0
 8000620:	468e      	mov	lr, r1
 8000622:	2b00      	cmp	r3, #0
 8000624:	d14d      	bne.n	80006c2 <__udivmoddi4+0xaa>
 8000626:	428a      	cmp	r2, r1
 8000628:	4694      	mov	ip, r2
 800062a:	d969      	bls.n	8000700 <__udivmoddi4+0xe8>
 800062c:	fab2 f282 	clz	r2, r2
 8000630:	b152      	cbz	r2, 8000648 <__udivmoddi4+0x30>
 8000632:	fa01 f302 	lsl.w	r3, r1, r2
 8000636:	f1c2 0120 	rsb	r1, r2, #32
 800063a:	fa20 f101 	lsr.w	r1, r0, r1
 800063e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000642:	ea41 0e03 	orr.w	lr, r1, r3
 8000646:	4094      	lsls	r4, r2
 8000648:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800064c:	0c21      	lsrs	r1, r4, #16
 800064e:	fbbe f6f8 	udiv	r6, lr, r8
 8000652:	fa1f f78c 	uxth.w	r7, ip
 8000656:	fb08 e316 	mls	r3, r8, r6, lr
 800065a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800065e:	fb06 f107 	mul.w	r1, r6, r7
 8000662:	4299      	cmp	r1, r3
 8000664:	d90a      	bls.n	800067c <__udivmoddi4+0x64>
 8000666:	eb1c 0303 	adds.w	r3, ip, r3
 800066a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800066e:	f080 811f 	bcs.w	80008b0 <__udivmoddi4+0x298>
 8000672:	4299      	cmp	r1, r3
 8000674:	f240 811c 	bls.w	80008b0 <__udivmoddi4+0x298>
 8000678:	3e02      	subs	r6, #2
 800067a:	4463      	add	r3, ip
 800067c:	1a5b      	subs	r3, r3, r1
 800067e:	b2a4      	uxth	r4, r4
 8000680:	fbb3 f0f8 	udiv	r0, r3, r8
 8000684:	fb08 3310 	mls	r3, r8, r0, r3
 8000688:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800068c:	fb00 f707 	mul.w	r7, r0, r7
 8000690:	42a7      	cmp	r7, r4
 8000692:	d90a      	bls.n	80006aa <__udivmoddi4+0x92>
 8000694:	eb1c 0404 	adds.w	r4, ip, r4
 8000698:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800069c:	f080 810a 	bcs.w	80008b4 <__udivmoddi4+0x29c>
 80006a0:	42a7      	cmp	r7, r4
 80006a2:	f240 8107 	bls.w	80008b4 <__udivmoddi4+0x29c>
 80006a6:	4464      	add	r4, ip
 80006a8:	3802      	subs	r0, #2
 80006aa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80006ae:	1be4      	subs	r4, r4, r7
 80006b0:	2600      	movs	r6, #0
 80006b2:	b11d      	cbz	r5, 80006bc <__udivmoddi4+0xa4>
 80006b4:	40d4      	lsrs	r4, r2
 80006b6:	2300      	movs	r3, #0
 80006b8:	e9c5 4300 	strd	r4, r3, [r5]
 80006bc:	4631      	mov	r1, r6
 80006be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006c2:	428b      	cmp	r3, r1
 80006c4:	d909      	bls.n	80006da <__udivmoddi4+0xc2>
 80006c6:	2d00      	cmp	r5, #0
 80006c8:	f000 80ef 	beq.w	80008aa <__udivmoddi4+0x292>
 80006cc:	2600      	movs	r6, #0
 80006ce:	e9c5 0100 	strd	r0, r1, [r5]
 80006d2:	4630      	mov	r0, r6
 80006d4:	4631      	mov	r1, r6
 80006d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006da:	fab3 f683 	clz	r6, r3
 80006de:	2e00      	cmp	r6, #0
 80006e0:	d14a      	bne.n	8000778 <__udivmoddi4+0x160>
 80006e2:	428b      	cmp	r3, r1
 80006e4:	d302      	bcc.n	80006ec <__udivmoddi4+0xd4>
 80006e6:	4282      	cmp	r2, r0
 80006e8:	f200 80f9 	bhi.w	80008de <__udivmoddi4+0x2c6>
 80006ec:	1a84      	subs	r4, r0, r2
 80006ee:	eb61 0303 	sbc.w	r3, r1, r3
 80006f2:	2001      	movs	r0, #1
 80006f4:	469e      	mov	lr, r3
 80006f6:	2d00      	cmp	r5, #0
 80006f8:	d0e0      	beq.n	80006bc <__udivmoddi4+0xa4>
 80006fa:	e9c5 4e00 	strd	r4, lr, [r5]
 80006fe:	e7dd      	b.n	80006bc <__udivmoddi4+0xa4>
 8000700:	b902      	cbnz	r2, 8000704 <__udivmoddi4+0xec>
 8000702:	deff      	udf	#255	; 0xff
 8000704:	fab2 f282 	clz	r2, r2
 8000708:	2a00      	cmp	r2, #0
 800070a:	f040 8092 	bne.w	8000832 <__udivmoddi4+0x21a>
 800070e:	eba1 010c 	sub.w	r1, r1, ip
 8000712:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000716:	fa1f fe8c 	uxth.w	lr, ip
 800071a:	2601      	movs	r6, #1
 800071c:	0c20      	lsrs	r0, r4, #16
 800071e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000722:	fb07 1113 	mls	r1, r7, r3, r1
 8000726:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800072a:	fb0e f003 	mul.w	r0, lr, r3
 800072e:	4288      	cmp	r0, r1
 8000730:	d908      	bls.n	8000744 <__udivmoddi4+0x12c>
 8000732:	eb1c 0101 	adds.w	r1, ip, r1
 8000736:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800073a:	d202      	bcs.n	8000742 <__udivmoddi4+0x12a>
 800073c:	4288      	cmp	r0, r1
 800073e:	f200 80cb 	bhi.w	80008d8 <__udivmoddi4+0x2c0>
 8000742:	4643      	mov	r3, r8
 8000744:	1a09      	subs	r1, r1, r0
 8000746:	b2a4      	uxth	r4, r4
 8000748:	fbb1 f0f7 	udiv	r0, r1, r7
 800074c:	fb07 1110 	mls	r1, r7, r0, r1
 8000750:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000754:	fb0e fe00 	mul.w	lr, lr, r0
 8000758:	45a6      	cmp	lr, r4
 800075a:	d908      	bls.n	800076e <__udivmoddi4+0x156>
 800075c:	eb1c 0404 	adds.w	r4, ip, r4
 8000760:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000764:	d202      	bcs.n	800076c <__udivmoddi4+0x154>
 8000766:	45a6      	cmp	lr, r4
 8000768:	f200 80bb 	bhi.w	80008e2 <__udivmoddi4+0x2ca>
 800076c:	4608      	mov	r0, r1
 800076e:	eba4 040e 	sub.w	r4, r4, lr
 8000772:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000776:	e79c      	b.n	80006b2 <__udivmoddi4+0x9a>
 8000778:	f1c6 0720 	rsb	r7, r6, #32
 800077c:	40b3      	lsls	r3, r6
 800077e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000782:	ea4c 0c03 	orr.w	ip, ip, r3
 8000786:	fa20 f407 	lsr.w	r4, r0, r7
 800078a:	fa01 f306 	lsl.w	r3, r1, r6
 800078e:	431c      	orrs	r4, r3
 8000790:	40f9      	lsrs	r1, r7
 8000792:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000796:	fa00 f306 	lsl.w	r3, r0, r6
 800079a:	fbb1 f8f9 	udiv	r8, r1, r9
 800079e:	0c20      	lsrs	r0, r4, #16
 80007a0:	fa1f fe8c 	uxth.w	lr, ip
 80007a4:	fb09 1118 	mls	r1, r9, r8, r1
 80007a8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80007ac:	fb08 f00e 	mul.w	r0, r8, lr
 80007b0:	4288      	cmp	r0, r1
 80007b2:	fa02 f206 	lsl.w	r2, r2, r6
 80007b6:	d90b      	bls.n	80007d0 <__udivmoddi4+0x1b8>
 80007b8:	eb1c 0101 	adds.w	r1, ip, r1
 80007bc:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80007c0:	f080 8088 	bcs.w	80008d4 <__udivmoddi4+0x2bc>
 80007c4:	4288      	cmp	r0, r1
 80007c6:	f240 8085 	bls.w	80008d4 <__udivmoddi4+0x2bc>
 80007ca:	f1a8 0802 	sub.w	r8, r8, #2
 80007ce:	4461      	add	r1, ip
 80007d0:	1a09      	subs	r1, r1, r0
 80007d2:	b2a4      	uxth	r4, r4
 80007d4:	fbb1 f0f9 	udiv	r0, r1, r9
 80007d8:	fb09 1110 	mls	r1, r9, r0, r1
 80007dc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80007e0:	fb00 fe0e 	mul.w	lr, r0, lr
 80007e4:	458e      	cmp	lr, r1
 80007e6:	d908      	bls.n	80007fa <__udivmoddi4+0x1e2>
 80007e8:	eb1c 0101 	adds.w	r1, ip, r1
 80007ec:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80007f0:	d26c      	bcs.n	80008cc <__udivmoddi4+0x2b4>
 80007f2:	458e      	cmp	lr, r1
 80007f4:	d96a      	bls.n	80008cc <__udivmoddi4+0x2b4>
 80007f6:	3802      	subs	r0, #2
 80007f8:	4461      	add	r1, ip
 80007fa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80007fe:	fba0 9402 	umull	r9, r4, r0, r2
 8000802:	eba1 010e 	sub.w	r1, r1, lr
 8000806:	42a1      	cmp	r1, r4
 8000808:	46c8      	mov	r8, r9
 800080a:	46a6      	mov	lr, r4
 800080c:	d356      	bcc.n	80008bc <__udivmoddi4+0x2a4>
 800080e:	d053      	beq.n	80008b8 <__udivmoddi4+0x2a0>
 8000810:	b15d      	cbz	r5, 800082a <__udivmoddi4+0x212>
 8000812:	ebb3 0208 	subs.w	r2, r3, r8
 8000816:	eb61 010e 	sbc.w	r1, r1, lr
 800081a:	fa01 f707 	lsl.w	r7, r1, r7
 800081e:	fa22 f306 	lsr.w	r3, r2, r6
 8000822:	40f1      	lsrs	r1, r6
 8000824:	431f      	orrs	r7, r3
 8000826:	e9c5 7100 	strd	r7, r1, [r5]
 800082a:	2600      	movs	r6, #0
 800082c:	4631      	mov	r1, r6
 800082e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000832:	f1c2 0320 	rsb	r3, r2, #32
 8000836:	40d8      	lsrs	r0, r3
 8000838:	fa0c fc02 	lsl.w	ip, ip, r2
 800083c:	fa21 f303 	lsr.w	r3, r1, r3
 8000840:	4091      	lsls	r1, r2
 8000842:	4301      	orrs	r1, r0
 8000844:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000848:	fa1f fe8c 	uxth.w	lr, ip
 800084c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000850:	fb07 3610 	mls	r6, r7, r0, r3
 8000854:	0c0b      	lsrs	r3, r1, #16
 8000856:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800085a:	fb00 f60e 	mul.w	r6, r0, lr
 800085e:	429e      	cmp	r6, r3
 8000860:	fa04 f402 	lsl.w	r4, r4, r2
 8000864:	d908      	bls.n	8000878 <__udivmoddi4+0x260>
 8000866:	eb1c 0303 	adds.w	r3, ip, r3
 800086a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800086e:	d22f      	bcs.n	80008d0 <__udivmoddi4+0x2b8>
 8000870:	429e      	cmp	r6, r3
 8000872:	d92d      	bls.n	80008d0 <__udivmoddi4+0x2b8>
 8000874:	3802      	subs	r0, #2
 8000876:	4463      	add	r3, ip
 8000878:	1b9b      	subs	r3, r3, r6
 800087a:	b289      	uxth	r1, r1
 800087c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000880:	fb07 3316 	mls	r3, r7, r6, r3
 8000884:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000888:	fb06 f30e 	mul.w	r3, r6, lr
 800088c:	428b      	cmp	r3, r1
 800088e:	d908      	bls.n	80008a2 <__udivmoddi4+0x28a>
 8000890:	eb1c 0101 	adds.w	r1, ip, r1
 8000894:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000898:	d216      	bcs.n	80008c8 <__udivmoddi4+0x2b0>
 800089a:	428b      	cmp	r3, r1
 800089c:	d914      	bls.n	80008c8 <__udivmoddi4+0x2b0>
 800089e:	3e02      	subs	r6, #2
 80008a0:	4461      	add	r1, ip
 80008a2:	1ac9      	subs	r1, r1, r3
 80008a4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80008a8:	e738      	b.n	800071c <__udivmoddi4+0x104>
 80008aa:	462e      	mov	r6, r5
 80008ac:	4628      	mov	r0, r5
 80008ae:	e705      	b.n	80006bc <__udivmoddi4+0xa4>
 80008b0:	4606      	mov	r6, r0
 80008b2:	e6e3      	b.n	800067c <__udivmoddi4+0x64>
 80008b4:	4618      	mov	r0, r3
 80008b6:	e6f8      	b.n	80006aa <__udivmoddi4+0x92>
 80008b8:	454b      	cmp	r3, r9
 80008ba:	d2a9      	bcs.n	8000810 <__udivmoddi4+0x1f8>
 80008bc:	ebb9 0802 	subs.w	r8, r9, r2
 80008c0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80008c4:	3801      	subs	r0, #1
 80008c6:	e7a3      	b.n	8000810 <__udivmoddi4+0x1f8>
 80008c8:	4646      	mov	r6, r8
 80008ca:	e7ea      	b.n	80008a2 <__udivmoddi4+0x28a>
 80008cc:	4620      	mov	r0, r4
 80008ce:	e794      	b.n	80007fa <__udivmoddi4+0x1e2>
 80008d0:	4640      	mov	r0, r8
 80008d2:	e7d1      	b.n	8000878 <__udivmoddi4+0x260>
 80008d4:	46d0      	mov	r8, sl
 80008d6:	e77b      	b.n	80007d0 <__udivmoddi4+0x1b8>
 80008d8:	3b02      	subs	r3, #2
 80008da:	4461      	add	r1, ip
 80008dc:	e732      	b.n	8000744 <__udivmoddi4+0x12c>
 80008de:	4630      	mov	r0, r6
 80008e0:	e709      	b.n	80006f6 <__udivmoddi4+0xde>
 80008e2:	4464      	add	r4, ip
 80008e4:	3802      	subs	r0, #2
 80008e6:	e742      	b.n	800076e <__udivmoddi4+0x156>

080008e8 <__aeabi_idiv0>:
 80008e8:	4770      	bx	lr
 80008ea:	bf00      	nop

080008ec <BH1790GLC_init>:

#include "BH1790GLC.h"


uint8_t BH1790GLC_init( BH1790GLC *dev, I2C_HandleTypeDef *i2cHandle )
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b084      	sub	sp, #16
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
 80008f4:	6039      	str	r1, [r7, #0]
	/* Set struct parameters */
	dev->i2cHandle = i2cHandle;
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	683a      	ldr	r2, [r7, #0]
 80008fa:	601a      	str	r2, [r3, #0]
	dev->ppg_data[0] = 0;
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	2200      	movs	r2, #0
 8000900:	809a      	strh	r2, [r3, #4]
	dev->ppg_data[1] = 0;
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	2200      	movs	r2, #0
 8000906:	80da      	strh	r2, [r3, #6]

	dev->samples_index = 0;
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	2200      	movs	r2, #0
 800090c:	f8a3 23f0 	strh.w	r2, [r3, #1008]	; 0x3f0
	/* Keep count of errors */
	HAL_StatusTypeDef status;

	/* Take initial reads to make sure I2C is working */
	uint8_t regData;
	status = read(dev, BH1790GLC_MANUFACTURER_ID, &regData);	//get manufacturer id
 8000910:	f107 030e 	add.w	r3, r7, #14
 8000914:	461a      	mov	r2, r3
 8000916:	210f      	movs	r1, #15
 8000918:	6878      	ldr	r0, [r7, #4]
 800091a:	f000 fa67 	bl	8000dec <read>
 800091e:	4603      	mov	r3, r0
 8000920:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK){
 8000922:	7bfb      	ldrb	r3, [r7, #15]
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <BH1790GLC_init+0x40>
		return ERR_MID_VAL;
 8000928:	230a      	movs	r3, #10
 800092a:	e04a      	b.n	80009c2 <BH1790GLC_init+0xd6>
	}
	if(regData != BH1790GLC_MID_VAL){
 800092c:	7bbb      	ldrb	r3, [r7, #14]
 800092e:	2be0      	cmp	r3, #224	; 0xe0
 8000930:	d001      	beq.n	8000936 <BH1790GLC_init+0x4a>
		return ERR_MID_VAL;
 8000932:	230a      	movs	r3, #10
 8000934:	e045      	b.n	80009c2 <BH1790GLC_init+0xd6>
	}

	status = read(dev, BH1790GLC_PART_ID, &regData);	//get part id
 8000936:	f107 030e 	add.w	r3, r7, #14
 800093a:	461a      	mov	r2, r3
 800093c:	2110      	movs	r1, #16
 800093e:	6878      	ldr	r0, [r7, #4]
 8000940:	f000 fa54 	bl	8000dec <read>
 8000944:	4603      	mov	r3, r0
 8000946:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK){
 8000948:	7bfb      	ldrb	r3, [r7, #15]
 800094a:	2b00      	cmp	r3, #0
 800094c:	d001      	beq.n	8000952 <BH1790GLC_init+0x66>
		return ERR_PID_VAL;
 800094e:	230b      	movs	r3, #11
 8000950:	e037      	b.n	80009c2 <BH1790GLC_init+0xd6>
	}
	if(regData != BH1790GLC_PID_VAL){
 8000952:	7bbb      	ldrb	r3, [r7, #14]
 8000954:	2b0d      	cmp	r3, #13
 8000956:	d001      	beq.n	800095c <BH1790GLC_init+0x70>
		return ERR_PID_VAL;
 8000958:	230b      	movs	r3, #11
 800095a:	e032      	b.n	80009c2 <BH1790GLC_init+0xd6>
	}

	/* Configure the 3 registers needed to start taking measurements */
	uint8_t configData[3];
	configData[0] = BH1790GLC_MEAS_CONTROL1_VAL;	//to BH1790GLC_MEAS_CONTROL1 (0x41)
 800095c:	2382      	movs	r3, #130	; 0x82
 800095e:	723b      	strb	r3, [r7, #8]
	configData[1] = BH1790GLC_MEAS_CONTROL2_VAL;	//to BH1790GLC_MEAS_CONTROL2 (0x42)
 8000960:	230c      	movs	r3, #12
 8000962:	727b      	strb	r3, [r7, #9]
	configData[2] = BH1790GLC_MEAS_START_VAL;		//to BH1790GLC_MEAS_START (0x43)
 8000964:	2301      	movs	r3, #1
 8000966:	72bb      	strb	r3, [r7, #10]

	status = write(dev, BH1790GLC_MEAS_CONTROL1, &configData[0]);
 8000968:	f107 0308 	add.w	r3, r7, #8
 800096c:	461a      	mov	r2, r3
 800096e:	2141      	movs	r1, #65	; 0x41
 8000970:	6878      	ldr	r0, [r7, #4]
 8000972:	f000 fa19 	bl	8000da8 <write>
 8000976:	4603      	mov	r3, r0
 8000978:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK){
 800097a:	7bfb      	ldrb	r3, [r7, #15]
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <BH1790GLC_init+0x98>
		return ERR_MEAS_CONTROL1;
 8000980:	2314      	movs	r3, #20
 8000982:	e01e      	b.n	80009c2 <BH1790GLC_init+0xd6>
	}
	status = write(dev, BH1790GLC_MEAS_CONTROL2, &configData[1]);
 8000984:	f107 0308 	add.w	r3, r7, #8
 8000988:	3301      	adds	r3, #1
 800098a:	461a      	mov	r2, r3
 800098c:	2142      	movs	r1, #66	; 0x42
 800098e:	6878      	ldr	r0, [r7, #4]
 8000990:	f000 fa0a 	bl	8000da8 <write>
 8000994:	4603      	mov	r3, r0
 8000996:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK){
 8000998:	7bfb      	ldrb	r3, [r7, #15]
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <BH1790GLC_init+0xb6>
		return ERR_MEAS_CONTROL2;
 800099e:	2315      	movs	r3, #21
 80009a0:	e00f      	b.n	80009c2 <BH1790GLC_init+0xd6>
	}
	status = write(dev, BH1790GLC_MEAS_START, &configData[2]);
 80009a2:	f107 0308 	add.w	r3, r7, #8
 80009a6:	3302      	adds	r3, #2
 80009a8:	461a      	mov	r2, r3
 80009aa:	2143      	movs	r1, #67	; 0x43
 80009ac:	6878      	ldr	r0, [r7, #4]
 80009ae:	f000 f9fb 	bl	8000da8 <write>
 80009b2:	4603      	mov	r3, r0
 80009b4:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK){
 80009b6:	7bfb      	ldrb	r3, [r7, #15]
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <BH1790GLC_init+0xd4>
		return ERR_MEAS_START;
 80009bc:	2316      	movs	r3, #22
 80009be:	e000      	b.n	80009c2 <BH1790GLC_init+0xd6>
	}

	return SUCCESS;
 80009c0:	2300      	movs	r3, #0
}
 80009c2:	4618      	mov	r0, r3
 80009c4:	3710      	adds	r7, #16
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}

080009ca <get_val>:

/*
 * Puts the ppg readings into the ppg_data struct variable
 */
uint8_t get_val( BH1790GLC *dev )
{
 80009ca:	b580      	push	{r7, lr}
 80009cc:	b084      	sub	sp, #16
 80009ce:	af00      	add	r7, sp, #0
 80009d0:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status;
	uint8_t sensorData[4];

	status = many_reads(dev, BH1790GLC_DATAOUT_LEDOFF, sensorData, 4);
 80009d2:	f107 0208 	add.w	r2, r7, #8
 80009d6:	2304      	movs	r3, #4
 80009d8:	2154      	movs	r1, #84	; 0x54
 80009da:	6878      	ldr	r0, [r7, #4]
 80009dc:	f000 fa28 	bl	8000e30 <many_reads>
 80009e0:	4603      	mov	r3, r0
 80009e2:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK){
 80009e4:	7bfb      	ldrb	r3, [r7, #15]
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <get_val+0x24>
		return ERR_DATA_OUT;		//error check
 80009ea:	231e      	movs	r3, #30
 80009ec:	e014      	b.n	8000a18 <get_val+0x4e>
	}

	//convert the sensorData values to useful data
	dev->ppg_data[0] = ((uint16_t)sensorData[1]<<8)|(sensorData[0]);	//LED OFF
 80009ee:	7a7b      	ldrb	r3, [r7, #9]
 80009f0:	021b      	lsls	r3, r3, #8
 80009f2:	b21a      	sxth	r2, r3
 80009f4:	7a3b      	ldrb	r3, [r7, #8]
 80009f6:	b21b      	sxth	r3, r3
 80009f8:	4313      	orrs	r3, r2
 80009fa:	b21b      	sxth	r3, r3
 80009fc:	b29a      	uxth	r2, r3
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	809a      	strh	r2, [r3, #4]
	dev->ppg_data[1] = ((uint16_t)sensorData[3]<<8)|(sensorData[2]);	//LED ON
 8000a02:	7afb      	ldrb	r3, [r7, #11]
 8000a04:	021b      	lsls	r3, r3, #8
 8000a06:	b21a      	sxth	r2, r3
 8000a08:	7abb      	ldrb	r3, [r7, #10]
 8000a0a:	b21b      	sxth	r3, r3
 8000a0c:	4313      	orrs	r3, r2
 8000a0e:	b21b      	sxth	r3, r3
 8000a10:	b29a      	uxth	r2, r3
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	80da      	strh	r2, [r3, #6]

	return SUCCESS;
 8000a16:	2300      	movs	r3, #0
}
 8000a18:	4618      	mov	r0, r3
 8000a1a:	3710      	adds	r7, #16
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}

08000a20 <add_sample>:

	return SUCCESS;

}

uint8_t add_sample( BH1790GLC *dev ){
 8000a20:	b480      	push	{r7}
 8000a22:	b083      	sub	sp, #12
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]


	dev->ppg_samples[dev->samples_index] = dev->ppg_data[1];
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	f8b3 33f0 	ldrh.w	r3, [r3, #1008]	; 0x3f0
 8000a2e:	461a      	mov	r2, r3
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	88d9      	ldrh	r1, [r3, #6]
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	3204      	adds	r2, #4
 8000a38:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	dev->samples_index++;
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	f8b3 33f0 	ldrh.w	r3, [r3, #1008]	; 0x3f0
 8000a42:	3301      	adds	r3, #1
 8000a44:	b29a      	uxth	r2, r3
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	f8a3 23f0 	strh.w	r2, [r3, #1008]	; 0x3f0

	if(dev->samples_index==500){
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	f8b3 33f0 	ldrh.w	r3, [r3, #1008]	; 0x3f0
 8000a52:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000a56:	d105      	bne.n	8000a64 <add_sample+0x44>

		dev->samples_index = 0;
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	f8a3 23f0 	strh.w	r2, [r3, #1008]	; 0x3f0
		return 1;
 8000a60:	2301      	movs	r3, #1
 8000a62:	e000      	b.n	8000a66 <add_sample+0x46>

	}

	return 0;
 8000a64:	2300      	movs	r3, #0
}
 8000a66:	4618      	mov	r0, r3
 8000a68:	370c      	adds	r7, #12
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a70:	4770      	bx	lr
	...

08000a74 <ppg_calculate>:

uint8_t ppg_calculate( BH1790GLC *dev ){
 8000a74:	b580      	push	{r7, lr}
 8000a76:	f6ad 4d48 	subw	sp, sp, #3144	; 0xc48
 8000a7a:	af00      	add	r7, sp, #0
 8000a7c:	f607 4348 	addw	r3, r7, #3144	; 0xc48
 8000a80:	f6a3 4344 	subw	r3, r3, #3140	; 0xc44
 8000a84:	6018      	str	r0, [r3, #0]

	  uint16_t smooth_array[500];
	  int deriv_array[499];

	  uint16_t raw_data_1;
	  float smooth_data_1 = 0;
 8000a86:	f04f 0300 	mov.w	r3, #0
 8000a8a:	f607 4244 	addw	r2, r7, #3140	; 0xc44
 8000a8e:	6013      	str	r3, [r2, #0]
	  float lpf_beta = 0.08;
 8000a90:	4bc1      	ldr	r3, [pc, #772]	; (8000d98 <ppg_calculate+0x324>)
 8000a92:	f607 4218 	addw	r2, r7, #3096	; 0xc18
 8000a96:	6013      	str	r3, [r2, #0]

	  for(int i = 0; i < 500; i++){
 8000a98:	2300      	movs	r3, #0
 8000a9a:	f8c7 3c40 	str.w	r3, [r7, #3136]	; 0xc40
 8000a9e:	e07b      	b.n	8000b98 <ppg_calculate+0x124>

		  raw_data_1 = dev->ppg_samples[i];
 8000aa0:	f607 4348 	addw	r3, r7, #3144	; 0xc48
 8000aa4:	f6a3 4344 	subw	r3, r3, #3140	; 0xc44
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	f8d7 2c40 	ldr.w	r2, [r7, #3136]	; 0xc40
 8000aae:	3204      	adds	r2, #4
 8000ab0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000ab4:	f8a7 3c12 	strh.w	r3, [r7, #3090]	; 0xc12
		  smooth_data_1 = smooth_data_1 - (lpf_beta*(smooth_data_1 - raw_data_1));
 8000ab8:	f8b7 3c12 	ldrh.w	r3, [r7, #3090]	; 0xc12
 8000abc:	ee07 3a90 	vmov	s15, r3
 8000ac0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ac4:	f607 4344 	addw	r3, r7, #3140	; 0xc44
 8000ac8:	ed93 7a00 	vldr	s14, [r3]
 8000acc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000ad0:	f607 4318 	addw	r3, r7, #3096	; 0xc18
 8000ad4:	edd3 7a00 	vldr	s15, [r3]
 8000ad8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000adc:	f607 4344 	addw	r3, r7, #3140	; 0xc44
 8000ae0:	ed93 7a00 	vldr	s14, [r3]
 8000ae4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ae8:	f607 4344 	addw	r3, r7, #3140	; 0xc44
 8000aec:	edc3 7a00 	vstr	s15, [r3]
		  smooth_array[i] = smooth_data_1;
 8000af0:	f607 4344 	addw	r3, r7, #3140	; 0xc44
 8000af4:	edd3 7a00 	vldr	s15, [r3]
 8000af8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000afc:	ee17 3a90 	vmov	r3, s15
 8000b00:	b299      	uxth	r1, r3
 8000b02:	f607 4348 	addw	r3, r7, #3144	; 0xc48
 8000b06:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 8000b0a:	f8d7 2c40 	ldr.w	r2, [r7, #3136]	; 0xc40
 8000b0e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		  if(i!=0){
 8000b12:	f8d7 3c40 	ldr.w	r3, [r7, #3136]	; 0xc40
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d039      	beq.n	8000b8e <ppg_calculate+0x11a>


			  int deriv = (int)smooth_array[i] - (int)smooth_array[i-1];
 8000b1a:	f607 4348 	addw	r3, r7, #3144	; 0xc48
 8000b1e:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 8000b22:	f8d7 2c40 	ldr.w	r2, [r7, #3136]	; 0xc40
 8000b26:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	f8d7 3c40 	ldr.w	r3, [r7, #3136]	; 0xc40
 8000b30:	1e5a      	subs	r2, r3, #1
 8000b32:	f607 4348 	addw	r3, r7, #3144	; 0xc48
 8000b36:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 8000b3a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000b3e:	1acb      	subs	r3, r1, r3
 8000b40:	f8c7 3c0c 	str.w	r3, [r7, #3084]	; 0xc0c
			  if(deriv<255 || deriv>-255){
 8000b44:	f8d7 3c0c 	ldr.w	r3, [r7, #3084]	; 0xc0c
 8000b48:	2bfe      	cmp	r3, #254	; 0xfe
 8000b4a:	dd04      	ble.n	8000b56 <ppg_calculate+0xe2>
 8000b4c:	f8d7 3c0c 	ldr.w	r3, [r7, #3084]	; 0xc0c
 8000b50:	f113 0ffe 	cmn.w	r3, #254	; 0xfe
 8000b54:	db0a      	blt.n	8000b6c <ppg_calculate+0xf8>

				 deriv_array[i] = deriv;
 8000b56:	f607 4348 	addw	r3, r7, #3144	; 0xc48
 8000b5a:	f5a3 633f 	sub.w	r3, r3, #3056	; 0xbf0
 8000b5e:	f8d7 2c40 	ldr.w	r2, [r7, #3136]	; 0xc40
 8000b62:	f8d7 1c0c 	ldr.w	r1, [r7, #3084]	; 0xc0c
 8000b66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8000b6a:	e010      	b.n	8000b8e <ppg_calculate+0x11a>

			  } else {

				 deriv_array[i] = deriv_array[i-1];
 8000b6c:	f8d7 3c40 	ldr.w	r3, [r7, #3136]	; 0xc40
 8000b70:	1e5a      	subs	r2, r3, #1
 8000b72:	f607 4348 	addw	r3, r7, #3144	; 0xc48
 8000b76:	f5a3 633f 	sub.w	r3, r3, #3056	; 0xbf0
 8000b7a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000b7e:	f607 4348 	addw	r3, r7, #3144	; 0xc48
 8000b82:	f5a3 633f 	sub.w	r3, r3, #3056	; 0xbf0
 8000b86:	f8d7 2c40 	ldr.w	r2, [r7, #3136]	; 0xc40
 8000b8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	  for(int i = 0; i < 500; i++){
 8000b8e:	f8d7 3c40 	ldr.w	r3, [r7, #3136]	; 0xc40
 8000b92:	3301      	adds	r3, #1
 8000b94:	f8c7 3c40 	str.w	r3, [r7, #3136]	; 0xc40
 8000b98:	f8d7 3c40 	ldr.w	r3, [r7, #3136]	; 0xc40
 8000b9c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000ba0:	f6ff af7e 	blt.w	8000aa0 <ppg_calculate+0x2c>

		  }

	  }

	  int pos = 0;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	f8c7 3c3c 	str.w	r3, [r7, #3132]	; 0xc3c
	  int neg = 0;
 8000baa:	2300      	movs	r3, #0
 8000bac:	f8c7 3c38 	str.w	r3, [r7, #3128]	; 0xc38

	  int pos_check = 0;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	f8c7 3c34 	str.w	r3, [r7, #3124]	; 0xc34
	  int neg_check = 0;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	f8c7 3c14 	str.w	r3, [r7, #3092]	; 0xc14

	  int peak_vals[20] = {};
 8000bbc:	f607 4348 	addw	r3, r7, #3144	; 0xc48
 8000bc0:	f5a3 6344 	sub.w	r3, r3, #3136	; 0xc40
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	2350      	movs	r3, #80	; 0x50
 8000bc8:	461a      	mov	r2, r3
 8000bca:	2100      	movs	r1, #0
 8000bcc:	f00b fcea 	bl	800c5a4 <memset>
	  int peak_count = 0;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	f8c7 3c30 	str.w	r3, [r7, #3120]	; 0xc30


	  for(int j = 0; j < 499; j++){
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	f8c7 3c2c 	str.w	r3, [r7, #3116]	; 0xc2c
 8000bdc:	e066      	b.n	8000cac <ppg_calculate+0x238>



		  if(deriv_array[j]>0 && pos_check==0){
 8000bde:	f607 4348 	addw	r3, r7, #3144	; 0xc48
 8000be2:	f5a3 633f 	sub.w	r3, r3, #3056	; 0xbf0
 8000be6:	f8d7 2c2c 	ldr.w	r2, [r7, #3116]	; 0xc2c
 8000bea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	dd13      	ble.n	8000c1a <ppg_calculate+0x1a6>
 8000bf2:	f8d7 3c34 	ldr.w	r3, [r7, #3124]	; 0xc34
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d10f      	bne.n	8000c1a <ppg_calculate+0x1a6>

			  neg = 0;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	f8c7 3c38 	str.w	r3, [r7, #3128]	; 0xc38
			  pos++;
 8000c00:	f8d7 3c3c 	ldr.w	r3, [r7, #3132]	; 0xc3c
 8000c04:	3301      	adds	r3, #1
 8000c06:	f8c7 3c3c 	str.w	r3, [r7, #3132]	; 0xc3c

			  if(pos==3){
 8000c0a:	f8d7 3c3c 	ldr.w	r3, [r7, #3132]	; 0xc3c
 8000c0e:	2b03      	cmp	r3, #3
 8000c10:	d147      	bne.n	8000ca2 <ppg_calculate+0x22e>

				  pos_check = 1;
 8000c12:	2301      	movs	r3, #1
 8000c14:	f8c7 3c34 	str.w	r3, [r7, #3124]	; 0xc34
			  if(pos==3){
 8000c18:	e043      	b.n	8000ca2 <ppg_calculate+0x22e>

			  }

		  } else if (deriv_array[j]<0 && pos_check==1) {
 8000c1a:	f607 4348 	addw	r3, r7, #3144	; 0xc48
 8000c1e:	f5a3 633f 	sub.w	r3, r3, #3056	; 0xbf0
 8000c22:	f8d7 2c2c 	ldr.w	r2, [r7, #3116]	; 0xc2c
 8000c26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	da28      	bge.n	8000c80 <ppg_calculate+0x20c>
 8000c2e:	f8d7 3c34 	ldr.w	r3, [r7, #3124]	; 0xc34
 8000c32:	2b01      	cmp	r3, #1
 8000c34:	d124      	bne.n	8000c80 <ppg_calculate+0x20c>

			  pos = 0;
 8000c36:	2300      	movs	r3, #0
 8000c38:	f8c7 3c3c 	str.w	r3, [r7, #3132]	; 0xc3c
			  neg++;
 8000c3c:	f8d7 3c38 	ldr.w	r3, [r7, #3128]	; 0xc38
 8000c40:	3301      	adds	r3, #1
 8000c42:	f8c7 3c38 	str.w	r3, [r7, #3128]	; 0xc38

			  if(neg==3){
 8000c46:	f8d7 3c38 	ldr.w	r3, [r7, #3128]	; 0xc38
 8000c4a:	2b03      	cmp	r3, #3
 8000c4c:	d129      	bne.n	8000ca2 <ppg_calculate+0x22e>

				  neg_check = 1;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	f8c7 3c14 	str.w	r3, [r7, #3092]	; 0xc14
				  peak_vals[peak_count] = j;
 8000c54:	f607 4348 	addw	r3, r7, #3144	; 0xc48
 8000c58:	f5a3 6344 	sub.w	r3, r3, #3136	; 0xc40
 8000c5c:	f8d7 2c30 	ldr.w	r2, [r7, #3120]	; 0xc30
 8000c60:	f8d7 1c2c 	ldr.w	r1, [r7, #3116]	; 0xc2c
 8000c64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				  peak_count++;
 8000c68:	f8d7 3c30 	ldr.w	r3, [r7, #3120]	; 0xc30
 8000c6c:	3301      	adds	r3, #1
 8000c6e:	f8c7 3c30 	str.w	r3, [r7, #3120]	; 0xc30

				  pos_check = 0;
 8000c72:	2300      	movs	r3, #0
 8000c74:	f8c7 3c34 	str.w	r3, [r7, #3124]	; 0xc34
				  neg_check = 0;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	f8c7 3c14 	str.w	r3, [r7, #3092]	; 0xc14
			  if(neg==3){
 8000c7e:	e010      	b.n	8000ca2 <ppg_calculate+0x22e>

			  }


		  } else if (deriv_array[j]<0 && pos_check==0){
 8000c80:	f607 4348 	addw	r3, r7, #3144	; 0xc48
 8000c84:	f5a3 633f 	sub.w	r3, r3, #3056	; 0xbf0
 8000c88:	f8d7 2c2c 	ldr.w	r2, [r7, #3116]	; 0xc2c
 8000c8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	da06      	bge.n	8000ca2 <ppg_calculate+0x22e>
 8000c94:	f8d7 3c34 	ldr.w	r3, [r7, #3124]	; 0xc34
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d102      	bne.n	8000ca2 <ppg_calculate+0x22e>
			  pos = 0;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	f8c7 3c3c 	str.w	r3, [r7, #3132]	; 0xc3c
	  for(int j = 0; j < 499; j++){
 8000ca2:	f8d7 3c2c 	ldr.w	r3, [r7, #3116]	; 0xc2c
 8000ca6:	3301      	adds	r3, #1
 8000ca8:	f8c7 3c2c 	str.w	r3, [r7, #3116]	; 0xc2c
 8000cac:	f8d7 3c2c 	ldr.w	r3, [r7, #3116]	; 0xc2c
 8000cb0:	f5b3 7ff9 	cmp.w	r3, #498	; 0x1f2
 8000cb4:	dd93      	ble.n	8000bde <ppg_calculate+0x16a>
		  }

	  }

	  printf("{");
 8000cb6:	207b      	movs	r0, #123	; 0x7b
 8000cb8:	f00b fc94 	bl	800c5e4 <putchar>

	  for(int k = 0; k<20; k++){
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	f8c7 3c28 	str.w	r3, [r7, #3112]	; 0xc28
 8000cc2:	e010      	b.n	8000ce6 <ppg_calculate+0x272>

		  printf("[%d],", peak_vals[k]);
 8000cc4:	f607 4348 	addw	r3, r7, #3144	; 0xc48
 8000cc8:	f5a3 6344 	sub.w	r3, r3, #3136	; 0xc40
 8000ccc:	f8d7 2c28 	ldr.w	r2, [r7, #3112]	; 0xc28
 8000cd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	4831      	ldr	r0, [pc, #196]	; (8000d9c <ppg_calculate+0x328>)
 8000cd8:	f00b fc6c 	bl	800c5b4 <iprintf>
	  for(int k = 0; k<20; k++){
 8000cdc:	f8d7 3c28 	ldr.w	r3, [r7, #3112]	; 0xc28
 8000ce0:	3301      	adds	r3, #1
 8000ce2:	f8c7 3c28 	str.w	r3, [r7, #3112]	; 0xc28
 8000ce6:	f8d7 3c28 	ldr.w	r3, [r7, #3112]	; 0xc28
 8000cea:	2b13      	cmp	r3, #19
 8000cec:	ddea      	ble.n	8000cc4 <ppg_calculate+0x250>

	  }
	  printf("}\n");
 8000cee:	482c      	ldr	r0, [pc, #176]	; (8000da0 <ppg_calculate+0x32c>)
 8000cf0:	f00b fcfc 	bl	800c6ec <puts>

	  double sum = 0;
 8000cf4:	f04f 0200 	mov.w	r2, #0
 8000cf8:	f04f 0300 	mov.w	r3, #0
 8000cfc:	f507 6142 	add.w	r1, r7, #3104	; 0xc20
 8000d00:	e9c1 2300 	strd	r2, r3, [r1]

	  for(int k =1; k<peak_count; k++){
 8000d04:	2301      	movs	r3, #1
 8000d06:	f8c7 3c1c 	str.w	r3, [r7, #3100]	; 0xc1c
 8000d0a:	e027      	b.n	8000d5c <ppg_calculate+0x2e8>

		  sum += peak_vals[k] - peak_vals[k-1];
 8000d0c:	f607 4348 	addw	r3, r7, #3144	; 0xc48
 8000d10:	f5a3 6344 	sub.w	r3, r3, #3136	; 0xc40
 8000d14:	f8d7 2c1c 	ldr.w	r2, [r7, #3100]	; 0xc1c
 8000d18:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000d1c:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 8000d20:	1e59      	subs	r1, r3, #1
 8000d22:	f607 4348 	addw	r3, r7, #3144	; 0xc48
 8000d26:	f5a3 6344 	sub.w	r3, r3, #3136	; 0xc40
 8000d2a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000d2e:	1ad3      	subs	r3, r2, r3
 8000d30:	4618      	mov	r0, r3
 8000d32:	f7ff fbcf 	bl	80004d4 <__aeabi_i2d>
 8000d36:	4602      	mov	r2, r0
 8000d38:	460b      	mov	r3, r1
 8000d3a:	f507 6142 	add.w	r1, r7, #3104	; 0xc20
 8000d3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000d42:	f7ff fa7b 	bl	800023c <__adddf3>
 8000d46:	4602      	mov	r2, r0
 8000d48:	460b      	mov	r3, r1
 8000d4a:	f507 6142 	add.w	r1, r7, #3104	; 0xc20
 8000d4e:	e9c1 2300 	strd	r2, r3, [r1]
	  for(int k =1; k<peak_count; k++){
 8000d52:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 8000d56:	3301      	adds	r3, #1
 8000d58:	f8c7 3c1c 	str.w	r3, [r7, #3100]	; 0xc1c
 8000d5c:	f8d7 2c1c 	ldr.w	r2, [r7, #3100]	; 0xc1c
 8000d60:	f8d7 3c30 	ldr.w	r3, [r7, #3120]	; 0xc30
 8000d64:	429a      	cmp	r2, r3
 8000d66:	dbd1      	blt.n	8000d0c <ppg_calculate+0x298>

	  }

	  printf("{{{%d}}}\n",(uint8_t)sum/(peak_count-1));
 8000d68:	f507 6342 	add.w	r3, r7, #3104	; 0xc20
 8000d6c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000d70:	f7ff fc1a 	bl	80005a8 <__aeabi_d2uiz>
 8000d74:	4603      	mov	r3, r0
 8000d76:	b2db      	uxtb	r3, r3
 8000d78:	461a      	mov	r2, r3
 8000d7a:	f8d7 3c30 	ldr.w	r3, [r7, #3120]	; 0xc30
 8000d7e:	3b01      	subs	r3, #1
 8000d80:	fb92 f3f3 	sdiv	r3, r2, r3
 8000d84:	4619      	mov	r1, r3
 8000d86:	4807      	ldr	r0, [pc, #28]	; (8000da4 <ppg_calculate+0x330>)
 8000d88:	f00b fc14 	bl	800c5b4 <iprintf>

}
 8000d8c:	bf00      	nop
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f607 4748 	addw	r7, r7, #3144	; 0xc48
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	3da3d70a 	.word	0x3da3d70a
 8000d9c:	0800d690 	.word	0x0800d690
 8000da0:	0800d698 	.word	0x0800d698
 8000da4:	0800d69c 	.word	0x0800d69c

08000da8 <write>:
 * dev : device
 * reg : register to write to
 * data : what to write
 */
HAL_StatusTypeDef write( BH1790GLC *dev, uint8_t reg, uint8_t *data)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b08a      	sub	sp, #40	; 0x28
 8000dac:	af04      	add	r7, sp, #16
 8000dae:	60f8      	str	r0, [r7, #12]
 8000db0:	460b      	mov	r3, r1
 8000db2:	607a      	str	r2, [r7, #4]
 8000db4:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef ret;

	//passing my handle, read from peripheral, get from this register, size of that register,
	// where to put the data, 1 byte of data, max delay
	ret = HAL_I2C_Mem_Write(dev->i2cHandle, (BH1790GLC_DEVICE_ADDRESS<<1), reg, 1, data, 1, HAL_MAX_DELAY);
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	6818      	ldr	r0, [r3, #0]
 8000dba:	7afb      	ldrb	r3, [r7, #11]
 8000dbc:	b29a      	uxth	r2, r3
 8000dbe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000dc2:	9302      	str	r3, [sp, #8]
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	9301      	str	r3, [sp, #4]
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	9300      	str	r3, [sp, #0]
 8000dcc:	2301      	movs	r3, #1
 8000dce:	21b6      	movs	r1, #182	; 0xb6
 8000dd0:	f003 fa04 	bl	80041dc <HAL_I2C_Mem_Write>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	75fb      	strb	r3, [r7, #23]
	if(ret != HAL_OK){
 8000dd8:	7dfb      	ldrb	r3, [r7, #23]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d001      	beq.n	8000de2 <write+0x3a>
		return ret;			//error check
 8000dde:	7dfb      	ldrb	r3, [r7, #23]
 8000de0:	e000      	b.n	8000de4 <write+0x3c>
	}

	return HAL_OK;
 8000de2:	2300      	movs	r3, #0
}
 8000de4:	4618      	mov	r0, r3
 8000de6:	3718      	adds	r7, #24
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}

08000dec <read>:
 * dev : device
 * reg : register to read from
 * data : stores what was read
 */
HAL_StatusTypeDef read( BH1790GLC *dev, uint8_t reg, uint8_t *data)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b08a      	sub	sp, #40	; 0x28
 8000df0:	af04      	add	r7, sp, #16
 8000df2:	60f8      	str	r0, [r7, #12]
 8000df4:	460b      	mov	r3, r1
 8000df6:	607a      	str	r2, [r7, #4]
 8000df8:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef ret;

	ret = HAL_I2C_Mem_Read(dev->i2cHandle, (BH1790GLC_DEVICE_ADDRESS<<1), reg, 1, data, 1, HAL_MAX_DELAY);
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	6818      	ldr	r0, [r3, #0]
 8000dfe:	7afb      	ldrb	r3, [r7, #11]
 8000e00:	b29a      	uxth	r2, r3
 8000e02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e06:	9302      	str	r3, [sp, #8]
 8000e08:	2301      	movs	r3, #1
 8000e0a:	9301      	str	r3, [sp, #4]
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	9300      	str	r3, [sp, #0]
 8000e10:	2301      	movs	r3, #1
 8000e12:	21b6      	movs	r1, #182	; 0xb6
 8000e14:	f003 faf6 	bl	8004404 <HAL_I2C_Mem_Read>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	75fb      	strb	r3, [r7, #23]
	if(ret != HAL_OK){
 8000e1c:	7dfb      	ldrb	r3, [r7, #23]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d001      	beq.n	8000e26 <read+0x3a>
		return ret;			//error check
 8000e22:	7dfb      	ldrb	r3, [r7, #23]
 8000e24:	e000      	b.n	8000e28 <read+0x3c>
	}


	return HAL_OK;
 8000e26:	2300      	movs	r3, #0
}
 8000e28:	4618      	mov	r0, r3
 8000e2a:	3718      	adds	r7, #24
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}

08000e30 <many_reads>:
 * reg : register to read from
 * data : stores what was read
 * length : number of registers to read (in bytes)
 */
HAL_StatusTypeDef many_reads( BH1790GLC *dev, uint8_t reg, uint8_t *data, uint8_t length )
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b08a      	sub	sp, #40	; 0x28
 8000e34:	af04      	add	r7, sp, #16
 8000e36:	60f8      	str	r0, [r7, #12]
 8000e38:	607a      	str	r2, [r7, #4]
 8000e3a:	461a      	mov	r2, r3
 8000e3c:	460b      	mov	r3, r1
 8000e3e:	72fb      	strb	r3, [r7, #11]
 8000e40:	4613      	mov	r3, r2
 8000e42:	72bb      	strb	r3, [r7, #10]
	HAL_StatusTypeDef ret;

	ret = HAL_I2C_Mem_Read(dev->i2cHandle, (BH1790GLC_DEVICE_ADDRESS<<1), reg, 1, data, length, HAL_MAX_DELAY);
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	6818      	ldr	r0, [r3, #0]
 8000e48:	7afb      	ldrb	r3, [r7, #11]
 8000e4a:	b29a      	uxth	r2, r3
 8000e4c:	7abb      	ldrb	r3, [r7, #10]
 8000e4e:	b29b      	uxth	r3, r3
 8000e50:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e54:	9102      	str	r1, [sp, #8]
 8000e56:	9301      	str	r3, [sp, #4]
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	9300      	str	r3, [sp, #0]
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	21b6      	movs	r1, #182	; 0xb6
 8000e60:	f003 fad0 	bl	8004404 <HAL_I2C_Mem_Read>
 8000e64:	4603      	mov	r3, r0
 8000e66:	75fb      	strb	r3, [r7, #23]
	if(ret != HAL_OK){
 8000e68:	7dfb      	ldrb	r3, [r7, #23]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <many_reads+0x42>
		return ret;			//error check
 8000e6e:	7dfb      	ldrb	r3, [r7, #23]
 8000e70:	e000      	b.n	8000e74 <many_reads+0x44>
	}

	return HAL_OK;
 8000e72:	2300      	movs	r3, #0
}
 8000e74:	4618      	mov	r0, r3
 8000e76:	3718      	adds	r7, #24
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}

08000e7c <ICM_ReadOneByte>:
	HAL_GPIO_WritePin(ICM_CS_GPIO_Port, ICM_CS_Pin, GPIO_PIN_SET);

}

void ICM_ReadOneByte(ICM20948 *dev, uint8_t reg, uint8_t* pData) // ***
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b084      	sub	sp, #16
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	60f8      	str	r0, [r7, #12]
 8000e84:	460b      	mov	r3, r1
 8000e86:	607a      	str	r2, [r7, #4]
 8000e88:	72fb      	strb	r3, [r7, #11]
	reg = reg | 0x80;
 8000e8a:	7afb      	ldrb	r3, [r7, #11]
 8000e8c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000e90:	b2db      	uxtb	r3, r3
 8000e92:	72fb      	strb	r3, [r7, #11]
	HAL_GPIO_WritePin(ICM_CS_GPIO_Port, ICM_CS_Pin, GPIO_PIN_RESET);
 8000e94:	2200      	movs	r2, #0
 8000e96:	2108      	movs	r1, #8
 8000e98:	4816      	ldr	r0, [pc, #88]	; (8000ef4 <ICM_ReadOneByte+0x78>)
 8000e9a:	f003 f8d3 	bl	8004044 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_DMA(dev->spiHandle, &reg, 1);
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	f107 010b 	add.w	r1, r7, #11
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f006 fb6f 	bl	800758c <HAL_SPI_Transmit_DMA>
	while (HAL_SPI_GetState(dev->spiHandle) != HAL_SPI_STATE_READY)
 8000eae:	bf00      	nop
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f007 f853 	bl	8007f60 <HAL_SPI_GetState>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b01      	cmp	r3, #1
 8000ebe:	d1f7      	bne.n	8000eb0 <ICM_ReadOneByte+0x34>
		;
	HAL_SPI_Receive_DMA(dev->spiHandle, pData, 1);
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	6879      	ldr	r1, [r7, #4]
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f006 fc53 	bl	8007774 <HAL_SPI_Receive_DMA>
	while (HAL_SPI_GetState(dev->spiHandle) != HAL_SPI_STATE_READY)
 8000ece:	bf00      	nop
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f007 f843 	bl	8007f60 <HAL_SPI_GetState>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b01      	cmp	r3, #1
 8000ede:	d1f7      	bne.n	8000ed0 <ICM_ReadOneByte+0x54>
		;
	HAL_GPIO_WritePin(ICM_CS_GPIO_Port, ICM_CS_Pin, GPIO_PIN_SET);
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	2108      	movs	r1, #8
 8000ee4:	4803      	ldr	r0, [pc, #12]	; (8000ef4 <ICM_ReadOneByte+0x78>)
 8000ee6:	f003 f8ad 	bl	8004044 <HAL_GPIO_WritePin>
}
 8000eea:	bf00      	nop
 8000eec:	3710      	adds	r7, #16
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	48000400 	.word	0x48000400

08000ef8 <ICM_WriteOneByte>:

void ICM_WriteOneByte(ICM20948 *dev, uint8_t reg, uint8_t Data) // ***
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
 8000f00:	460b      	mov	r3, r1
 8000f02:	70fb      	strb	r3, [r7, #3]
 8000f04:	4613      	mov	r3, r2
 8000f06:	70bb      	strb	r3, [r7, #2]
	reg = reg & 0x7F;
 8000f08:	78fb      	ldrb	r3, [r7, #3]
 8000f0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000f0e:	b2db      	uxtb	r3, r3
 8000f10:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(ICM_CS_GPIO_Port, ICM_CS_Pin, GPIO_PIN_RESET);	//set CS pin low
 8000f12:	2200      	movs	r2, #0
 8000f14:	2108      	movs	r1, #8
 8000f16:	480d      	ldr	r0, [pc, #52]	; (8000f4c <ICM_WriteOneByte+0x54>)
 8000f18:	f003 f894 	bl	8004044 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_DMA(dev->spiHandle, &reg, 1);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	1cf9      	adds	r1, r7, #3
 8000f22:	2201      	movs	r2, #1
 8000f24:	4618      	mov	r0, r3
 8000f26:	f006 fb31 	bl	800758c <HAL_SPI_Transmit_DMA>
	HAL_SPI_Transmit_DMA(dev->spiHandle, &Data, 1);
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	1cb9      	adds	r1, r7, #2
 8000f30:	2201      	movs	r2, #1
 8000f32:	4618      	mov	r0, r3
 8000f34:	f006 fb2a 	bl	800758c <HAL_SPI_Transmit_DMA>
	HAL_GPIO_WritePin(ICM_CS_GPIO_Port, ICM_CS_Pin, GPIO_PIN_SET);		//set CS pin high
 8000f38:	2201      	movs	r2, #1
 8000f3a:	2108      	movs	r1, #8
 8000f3c:	4803      	ldr	r0, [pc, #12]	; (8000f4c <ICM_WriteOneByte+0x54>)
 8000f3e:	f003 f881 	bl	8004044 <HAL_GPIO_WritePin>
}
 8000f42:	bf00      	nop
 8000f44:	3708      	adds	r7, #8
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	48000400 	.word	0x48000400

08000f50 <i2c_Mag_write>:
 *
 * AUX I2C abstraction for magnetometer
 *
 */
void i2c_Mag_write(ICM20948 *dev, uint8_t reg,uint8_t value)
  {
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
 8000f58:	460b      	mov	r3, r1
 8000f5a:	70fb      	strb	r3, [r7, #3]
 8000f5c:	4613      	mov	r3, r2
 8000f5e:	70bb      	strb	r3, [r7, #2]
  	ICM_WriteOneByte(dev, 0x7F, 0x30);
 8000f60:	2230      	movs	r2, #48	; 0x30
 8000f62:	217f      	movs	r1, #127	; 0x7f
 8000f64:	6878      	ldr	r0, [r7, #4]
 8000f66:	f7ff ffc7 	bl	8000ef8 <ICM_WriteOneByte>

  	HAL_Delay(1);
 8000f6a:	2001      	movs	r0, #1
 8000f6c:	f000 fc6d 	bl	800184a <HAL_Delay>
  	ICM_WriteOneByte(dev, 0x03 ,0x0C);//mode: write
 8000f70:	220c      	movs	r2, #12
 8000f72:	2103      	movs	r1, #3
 8000f74:	6878      	ldr	r0, [r7, #4]
 8000f76:	f7ff ffbf 	bl	8000ef8 <ICM_WriteOneByte>

  	HAL_Delay(1);
 8000f7a:	2001      	movs	r0, #1
 8000f7c:	f000 fc65 	bl	800184a <HAL_Delay>
  	ICM_WriteOneByte(dev, 0x04 ,reg);//set reg addr
 8000f80:	78fb      	ldrb	r3, [r7, #3]
 8000f82:	461a      	mov	r2, r3
 8000f84:	2104      	movs	r1, #4
 8000f86:	6878      	ldr	r0, [r7, #4]
 8000f88:	f7ff ffb6 	bl	8000ef8 <ICM_WriteOneByte>

  	HAL_Delay(1);
 8000f8c:	2001      	movs	r0, #1
 8000f8e:	f000 fc5c 	bl	800184a <HAL_Delay>
  	ICM_WriteOneByte(dev, 0x06 ,value);//send value
 8000f92:	78bb      	ldrb	r3, [r7, #2]
 8000f94:	461a      	mov	r2, r3
 8000f96:	2106      	movs	r1, #6
 8000f98:	6878      	ldr	r0, [r7, #4]
 8000f9a:	f7ff ffad 	bl	8000ef8 <ICM_WriteOneByte>

  	HAL_Delay(1);
 8000f9e:	2001      	movs	r0, #1
 8000fa0:	f000 fc53 	bl	800184a <HAL_Delay>
  }
 8000fa4:	bf00      	nop
 8000fa6:	3708      	adds	r7, #8
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}

08000fac <ICM_PowerOn>:
/*
 *
 * Sequence to setup ICM290948 as early as possible after power on
 *
 */
void ICM_PowerOn(ICM20948 *dev, SPI_HandleTypeDef *spiHandle) {
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b0b6      	sub	sp, #216	; 0xd8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
 8000fb4:	6039      	str	r1, [r7, #0]

	dev->spiHandle = spiHandle;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	683a      	ldr	r2, [r7, #0]
 8000fba:	601a      	str	r2, [r3, #0]

	dev->accel_data[0] = 0;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	809a      	strh	r2, [r3, #4]
	dev->accel_data[1] = 0;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	80da      	strh	r2, [r3, #6]
	dev->accel_data[2] = 0;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	2200      	movs	r2, #0
 8000fcc:	811a      	strh	r2, [r3, #8]

	dev->gyro_data[0] = 0;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	815a      	strh	r2, [r3, #10]
	dev->gyro_data[1] = 0;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	819a      	strh	r2, [r3, #12]
	dev->gyro_data[2] = 0;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	2200      	movs	r2, #0
 8000fde:	81da      	strh	r2, [r3, #14]

	dev->mag_data[0] = 0;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	821a      	strh	r2, [r3, #16]
	dev->mag_data[1] = 0;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	2200      	movs	r2, #0
 8000fea:	825a      	strh	r2, [r3, #18]
	dev->mag_data[2] = 0;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	2200      	movs	r2, #0
 8000ff0:	829a      	strh	r2, [r3, #20]

	char uart_buffer[200];
	uint8_t whoami = 0xEA;
 8000ff2:	23ea      	movs	r3, #234	; 0xea
 8000ff4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
	uint8_t test = ICM_WHOAMI(dev);
 8000ff8:	6878      	ldr	r0, [r7, #4]
 8000ffa:	f000 f8f1 	bl	80011e0 <ICM_WHOAMI>
 8000ffe:	4603      	mov	r3, r0
 8001000:	f887 30d6 	strb.w	r3, [r7, #214]	; 0xd6
	//if (test == whoami) {
		ICM_CSHigh();
 8001004:	f000 f8b6 	bl	8001174 <ICM_CSHigh>
		HAL_Delay(10);
 8001008:	200a      	movs	r0, #10
 800100a:	f000 fc1e 	bl	800184a <HAL_Delay>
		ICM_SelectBank(dev, USER_BANK_0);
 800100e:	2100      	movs	r1, #0
 8001010:	6878      	ldr	r0, [r7, #4]
 8001012:	f000 f891 	bl	8001138 <ICM_SelectBank>
		HAL_Delay(10);
 8001016:	200a      	movs	r0, #10
 8001018:	f000 fc17 	bl	800184a <HAL_Delay>
		ICM_Disable_I2C(dev);
 800101c:	6878      	ldr	r0, [r7, #4]
 800101e:	f000 f89b 	bl	8001158 <ICM_Disable_I2C>
		HAL_Delay(10);
 8001022:	200a      	movs	r0, #10
 8001024:	f000 fc11 	bl	800184a <HAL_Delay>
		ICM_SetClock(dev, (uint8_t)CLK_BEST_AVAIL);
 8001028:	2101      	movs	r1, #1
 800102a:	6878      	ldr	r0, [r7, #4]
 800102c:	f000 f8ae 	bl	800118c <ICM_SetClock>
		HAL_Delay(10);
 8001030:	200a      	movs	r0, #10
 8001032:	f000 fc0a 	bl	800184a <HAL_Delay>
		ICM_AccelGyroOff(dev);
 8001036:	6878      	ldr	r0, [r7, #4]
 8001038:	f000 f8b8 	bl	80011ac <ICM_AccelGyroOff>
		HAL_Delay(20);
 800103c:	2014      	movs	r0, #20
 800103e:	f000 fc04 	bl	800184a <HAL_Delay>
		ICM_AccelGyroOn(dev);
 8001042:	6878      	ldr	r0, [r7, #4]
 8001044:	f000 f8bf 	bl	80011c6 <ICM_AccelGyroOn>
		HAL_Delay(10);
 8001048:	200a      	movs	r0, #10
 800104a:	f000 fbfe 	bl	800184a <HAL_Delay>
		ICM_Initialize(dev);
 800104e:	6878      	ldr	r0, [r7, #4]
 8001050:	f000 f804 	bl	800105c <ICM_Initialize>
	//} else {
		//sprintf(uart_buffer, "Failed WHO_AM_I.  %i is not 0xEA\r\n", test);
		//HAL_UART_Transmit_DMA(UART_BUS, (uint8_t*) uart_buffer, strlen(uart_buffer));
		//HAL_Delay(100);
	//}
}
 8001054:	bf00      	nop
 8001056:	37d8      	adds	r7, #216	; 0xd8
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}

0800105c <ICM_Initialize>:
uint16_t ICM_Initialize(ICM20948 *dev) {
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
		ICM_SelectBank(dev, USER_BANK_2);
 8001064:	2120      	movs	r1, #32
 8001066:	6878      	ldr	r0, [r7, #4]
 8001068:	f000 f866 	bl	8001138 <ICM_SelectBank>
		HAL_Delay(20);
 800106c:	2014      	movs	r0, #20
 800106e:	f000 fbec 	bl	800184a <HAL_Delay>
		ICM_SetGyroRateLPF(dev, GYRO_RATE_250, GYRO_LPF_17HZ);
 8001072:	2229      	movs	r2, #41	; 0x29
 8001074:	2100      	movs	r1, #0
 8001076:	6878      	ldr	r0, [r7, #4]
 8001078:	f000 f8c4 	bl	8001204 <ICM_SetGyroRateLPF>
		HAL_Delay(10);
 800107c:	200a      	movs	r0, #10
 800107e:	f000 fbe4 	bl	800184a <HAL_Delay>

		// Set gyroscope sample rate to 100hz (0x0A) in GYRO_SMPLRT_DIV register (0x00)
		ICM_WriteOneByte(dev, 0x00, 0x0A);
 8001082:	220a      	movs	r2, #10
 8001084:	2100      	movs	r1, #0
 8001086:	6878      	ldr	r0, [r7, #4]
 8001088:	f7ff ff36 	bl	8000ef8 <ICM_WriteOneByte>
		HAL_Delay(10);
 800108c:	200a      	movs	r0, #10
 800108e:	f000 fbdc 	bl	800184a <HAL_Delay>

		// Set accelerometer low pass filter to 136hz (0x11) and the rate to 8G (0x04) in register ACCEL_CONFIG (0x14)
		ICM_WriteOneByte(dev, 0x14, (0x04 | 0x11));
 8001092:	2215      	movs	r2, #21
 8001094:	2114      	movs	r1, #20
 8001096:	6878      	ldr	r0, [r7, #4]
 8001098:	f7ff ff2e 	bl	8000ef8 <ICM_WriteOneByte>

		// Set accelerometer sample rate to 225hz (0x00) in ACCEL_SMPLRT_DIV_1 register (0x10)
		ICM_WriteOneByte(dev, 0x10, 0x00);
 800109c:	2200      	movs	r2, #0
 800109e:	2110      	movs	r1, #16
 80010a0:	6878      	ldr	r0, [r7, #4]
 80010a2:	f7ff ff29 	bl	8000ef8 <ICM_WriteOneByte>
		HAL_Delay(10);
 80010a6:	200a      	movs	r0, #10
 80010a8:	f000 fbcf 	bl	800184a <HAL_Delay>

		// Set accelerometer sample rate to 100 hz (0x0A) in ACCEL_SMPLRT_DIV_2 register (0x11)
		ICM_WriteOneByte(dev, 0x11, 0x0A);
 80010ac:	220a      	movs	r2, #10
 80010ae:	2111      	movs	r1, #17
 80010b0:	6878      	ldr	r0, [r7, #4]
 80010b2:	f7ff ff21 	bl	8000ef8 <ICM_WriteOneByte>
		HAL_Delay(10);
 80010b6:	200a      	movs	r0, #10
 80010b8:	f000 fbc7 	bl	800184a <HAL_Delay>

		ICM_SelectBank(dev, USER_BANK_2);
 80010bc:	2120      	movs	r1, #32
 80010be:	6878      	ldr	r0, [r7, #4]
 80010c0:	f000 f83a 	bl	8001138 <ICM_SelectBank>
		HAL_Delay(20);
 80010c4:	2014      	movs	r0, #20
 80010c6:	f000 fbc0 	bl	800184a <HAL_Delay>

		// Configure AUX_I2C Magnetometer (onboard ICM-20948)
		ICM_WriteOneByte(dev, 0x7F, 0x00); // Select user bank 0
 80010ca:	2200      	movs	r2, #0
 80010cc:	217f      	movs	r1, #127	; 0x7f
 80010ce:	6878      	ldr	r0, [r7, #4]
 80010d0:	f7ff ff12 	bl	8000ef8 <ICM_WriteOneByte>
		ICM_WriteOneByte(dev, 0x0F, 0x30); // INT Pin / Bypass Enable Configuration
 80010d4:	2230      	movs	r2, #48	; 0x30
 80010d6:	210f      	movs	r1, #15
 80010d8:	6878      	ldr	r0, [r7, #4]
 80010da:	f7ff ff0d 	bl	8000ef8 <ICM_WriteOneByte>
		ICM_WriteOneByte(dev, 0x03, 0x20); // I2C_MST_EN
 80010de:	2220      	movs	r2, #32
 80010e0:	2103      	movs	r1, #3
 80010e2:	6878      	ldr	r0, [r7, #4]
 80010e4:	f7ff ff08 	bl	8000ef8 <ICM_WriteOneByte>
		ICM_WriteOneByte(dev, 0x7F, 0x30); // Select user bank 3
 80010e8:	2230      	movs	r2, #48	; 0x30
 80010ea:	217f      	movs	r1, #127	; 0x7f
 80010ec:	6878      	ldr	r0, [r7, #4]
 80010ee:	f7ff ff03 	bl	8000ef8 <ICM_WriteOneByte>
		ICM_WriteOneByte(dev, 0x01, 0x4D); // I2C Master mode and Speed 400 kHz
 80010f2:	224d      	movs	r2, #77	; 0x4d
 80010f4:	2101      	movs	r1, #1
 80010f6:	6878      	ldr	r0, [r7, #4]
 80010f8:	f7ff fefe 	bl	8000ef8 <ICM_WriteOneByte>
		ICM_WriteOneByte(dev, 0x02, 0x01); // I2C_SLV0 _DLY_ enable
 80010fc:	2201      	movs	r2, #1
 80010fe:	2102      	movs	r1, #2
 8001100:	6878      	ldr	r0, [r7, #4]
 8001102:	f7ff fef9 	bl	8000ef8 <ICM_WriteOneByte>
		ICM_WriteOneByte(dev, 0x05, 0x81); // enable IIC	and EXT_SENS_DATA==1 Byte
 8001106:	2281      	movs	r2, #129	; 0x81
 8001108:	2105      	movs	r1, #5
 800110a:	6878      	ldr	r0, [r7, #4]
 800110c:	f7ff fef4 	bl	8000ef8 <ICM_WriteOneByte>

		// Initialize magnetometer
		i2c_Mag_write(dev, 0x32, 0x01); // Reset AK8963
 8001110:	2201      	movs	r2, #1
 8001112:	2132      	movs	r1, #50	; 0x32
 8001114:	6878      	ldr	r0, [r7, #4]
 8001116:	f7ff ff1b 	bl	8000f50 <i2c_Mag_write>
		HAL_Delay(1000);
 800111a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800111e:	f000 fb94 	bl	800184a <HAL_Delay>
		i2c_Mag_write(dev, 0x31, 0x02); // use i2c to set AK8963 working on Continuous measurement mode1 & 16-bit output
 8001122:	2202      	movs	r2, #2
 8001124:	2131      	movs	r1, #49	; 0x31
 8001126:	6878      	ldr	r0, [r7, #4]
 8001128:	f7ff ff12 	bl	8000f50 <i2c_Mag_write>

		return 1337;
 800112c:	f240 5339 	movw	r3, #1337	; 0x539
	}
 8001130:	4618      	mov	r0, r3
 8001132:	3708      	adds	r7, #8
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}

08001138 <ICM_SelectBank>:

	dev->gyro_data[0] = dev->gyro_data[0] / 250;
	dev->gyro_data[1] = dev->gyro_data[1] / 250;
	dev->gyro_data[2] = dev->gyro_data[2] / 250;
}
void ICM_SelectBank(ICM20948 *dev, uint8_t bank) {
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
 8001140:	460b      	mov	r3, r1
 8001142:	70fb      	strb	r3, [r7, #3]
	ICM_WriteOneByte(dev, USER_BANK_SEL, bank);
 8001144:	78fb      	ldrb	r3, [r7, #3]
 8001146:	461a      	mov	r2, r3
 8001148:	217f      	movs	r1, #127	; 0x7f
 800114a:	6878      	ldr	r0, [r7, #4]
 800114c:	f7ff fed4 	bl	8000ef8 <ICM_WriteOneByte>
}
 8001150:	bf00      	nop
 8001152:	3708      	adds	r7, #8
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}

08001158 <ICM_Disable_I2C>:
void ICM_Disable_I2C(ICM20948 *dev) {
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
	ICM_WriteOneByte(dev, 0x03, 0x78);
 8001160:	2278      	movs	r2, #120	; 0x78
 8001162:	2103      	movs	r1, #3
 8001164:	6878      	ldr	r0, [r7, #4]
 8001166:	f7ff fec7 	bl	8000ef8 <ICM_WriteOneByte>
}
 800116a:	bf00      	nop
 800116c:	3708      	adds	r7, #8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
	...

08001174 <ICM_CSHigh>:
void ICM_CSHigh(void) {
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ICM_CS_GPIO_Port, ICM_CS_Pin, SET);
 8001178:	2201      	movs	r2, #1
 800117a:	2108      	movs	r1, #8
 800117c:	4802      	ldr	r0, [pc, #8]	; (8001188 <ICM_CSHigh+0x14>)
 800117e:	f002 ff61 	bl	8004044 <HAL_GPIO_WritePin>
}
 8001182:	bf00      	nop
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	48000400 	.word	0x48000400

0800118c <ICM_SetClock>:
void ICM_CSLow(void) {
	HAL_GPIO_WritePin(ICM_CS_GPIO_Port, ICM_CS_Pin, RESET);
}
void ICM_SetClock(ICM20948 *dev, uint8_t clk) {
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
 8001194:	460b      	mov	r3, r1
 8001196:	70fb      	strb	r3, [r7, #3]
	ICM_WriteOneByte(dev, PWR_MGMT_1, clk);
 8001198:	78fb      	ldrb	r3, [r7, #3]
 800119a:	461a      	mov	r2, r3
 800119c:	2106      	movs	r1, #6
 800119e:	6878      	ldr	r0, [r7, #4]
 80011a0:	f7ff feaa 	bl	8000ef8 <ICM_WriteOneByte>
}
 80011a4:	bf00      	nop
 80011a6:	3708      	adds	r7, #8
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}

080011ac <ICM_AccelGyroOff>:
void ICM_AccelGyroOff(ICM20948 *dev) {
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
	ICM_WriteOneByte(dev, PWR_MGMT_2, (0x38 | 0x07));
 80011b4:	223f      	movs	r2, #63	; 0x3f
 80011b6:	2107      	movs	r1, #7
 80011b8:	6878      	ldr	r0, [r7, #4]
 80011ba:	f7ff fe9d 	bl	8000ef8 <ICM_WriteOneByte>
}
 80011be:	bf00      	nop
 80011c0:	3708      	adds	r7, #8
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}

080011c6 <ICM_AccelGyroOn>:
void ICM_AccelGyroOn(ICM20948 *dev) {
 80011c6:	b580      	push	{r7, lr}
 80011c8:	b082      	sub	sp, #8
 80011ca:	af00      	add	r7, sp, #0
 80011cc:	6078      	str	r0, [r7, #4]
	ICM_WriteOneByte(dev, 0x07, (0x00 | 0x00));
 80011ce:	2200      	movs	r2, #0
 80011d0:	2107      	movs	r1, #7
 80011d2:	6878      	ldr	r0, [r7, #4]
 80011d4:	f7ff fe90 	bl	8000ef8 <ICM_WriteOneByte>
}
 80011d8:	bf00      	nop
 80011da:	3708      	adds	r7, #8
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}

080011e0 <ICM_WHOAMI>:
uint8_t ICM_WHOAMI(ICM20948 *dev) {
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b084      	sub	sp, #16
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
	uint8_t spiData = 0x01;
 80011e8:	2301      	movs	r3, #1
 80011ea:	73fb      	strb	r3, [r7, #15]
	ICM_ReadOneByte(dev, 0x00, &spiData);
 80011ec:	f107 030f 	add.w	r3, r7, #15
 80011f0:	461a      	mov	r2, r3
 80011f2:	2100      	movs	r1, #0
 80011f4:	6878      	ldr	r0, [r7, #4]
 80011f6:	f7ff fe41 	bl	8000e7c <ICM_ReadOneByte>
	return spiData;
 80011fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	3710      	adds	r7, #16
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}

08001204 <ICM_SetGyroRateLPF>:
void ICM_SetGyroRateLPF(ICM20948 *dev, uint8_t rate, uint8_t lpf) {
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
 800120c:	460b      	mov	r3, r1
 800120e:	70fb      	strb	r3, [r7, #3]
 8001210:	4613      	mov	r3, r2
 8001212:	70bb      	strb	r3, [r7, #2]
	ICM_WriteOneByte(dev, GYRO_CONFIG_1, (rate|lpf));
 8001214:	78fa      	ldrb	r2, [r7, #3]
 8001216:	78bb      	ldrb	r3, [r7, #2]
 8001218:	4313      	orrs	r3, r2
 800121a:	b2db      	uxtb	r3, r3
 800121c:	461a      	mov	r2, r3
 800121e:	2101      	movs	r1, #1
 8001220:	6878      	ldr	r0, [r7, #4]
 8001222:	f7ff fe69 	bl	8000ef8 <ICM_WriteOneByte>
}
 8001226:	bf00      	nop
 8001228:	3708      	adds	r7, #8
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
	...

08001230 <APPD_EnableCPU2>:
/* USER CODE END APPD_Init */
  return;
}

void APPD_EnableCPU2( void )
{
 8001230:	b5b0      	push	{r4, r5, r7, lr}
 8001232:	b088      	sub	sp, #32
 8001234:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 8001236:	4b0b      	ldr	r3, [pc, #44]	; (8001264 <APPD_EnableCPU2+0x34>)
 8001238:	1d3c      	adds	r4, r7, #4
 800123a:	461d      	mov	r5, r3
 800123c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800123e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001240:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001244:	c403      	stmia	r4!, {r0, r1}
 8001246:	8022      	strh	r2, [r4, #0]
 8001248:	3402      	adds	r4, #2
 800124a:	0c13      	lsrs	r3, r2, #16
 800124c:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 800124e:	f009 ff6b 	bl	800b128 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 8001252:	1d3b      	adds	r3, r7, #4
 8001254:	4618      	mov	r0, r3
 8001256:	f009 fa06 	bl	800a666 <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 800125a:	bf00      	nop
}
 800125c:	3720      	adds	r7, #32
 800125e:	46bd      	mov	sp, r7
 8001260:	bdb0      	pop	{r4, r5, r7, pc}
 8001262:	bf00      	nop
 8001264:	0800d6a8 	.word	0x0800d6a8

08001268 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8001268:	b480      	push	{r7}
 800126a:	b083      	sub	sp, #12
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 8001270:	4b07      	ldr	r3, [pc, #28]	; (8001290 <LL_C2_PWR_SetPowerMode+0x28>)
 8001272:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001276:	f023 0207 	bic.w	r2, r3, #7
 800127a:	4905      	ldr	r1, [pc, #20]	; (8001290 <LL_C2_PWR_SetPowerMode+0x28>)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	4313      	orrs	r3, r2
 8001280:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8001284:	bf00      	nop
 8001286:	370c      	adds	r7, #12
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr
 8001290:	58000400 	.word	0x58000400

08001294 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8001294:	b480      	push	{r7}
 8001296:	b083      	sub	sp, #12
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 800129c:	4b06      	ldr	r3, [pc, #24]	; (80012b8 <LL_EXTI_EnableIT_32_63+0x24>)
 800129e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80012a2:	4905      	ldr	r1, [pc, #20]	; (80012b8 <LL_EXTI_EnableIT_32_63+0x24>)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	4313      	orrs	r3, r2
 80012a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80012ac:	bf00      	nop
 80012ae:	370c      	adds	r7, #12
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr
 80012b8:	58000800 	.word	0x58000800

080012bc <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 80012bc:	b480      	push	{r7}
 80012be:	b083      	sub	sp, #12
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 80012c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012c8:	4a0a      	ldr	r2, [pc, #40]	; (80012f4 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 80012ca:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 80012ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80012d6:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	021b      	lsls	r3, r3, #8
 80012de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80012e2:	4313      	orrs	r3, r2
 80012e4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 80012e8:	bf00      	nop
 80012ea:	370c      	adds	r7, #12
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr
 80012f4:	cafecafe 	.word	0xcafecafe

080012f8 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b083      	sub	sp, #12
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8001300:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001304:	689b      	ldr	r3, [r3, #8]
 8001306:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800130a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	4313      	orrs	r3, r2
 8001312:	608b      	str	r3, [r1, #8]
}
 8001314:	bf00      	nop
 8001316:	370c      	adds	r7, #12
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr

08001320 <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8001324:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001328:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800132c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001330:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001334:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001338:	bf00      	nop
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr

08001342 <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 8001342:	b480      	push	{r7}
 8001344:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8001346:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800134a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800134e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001352:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001356:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800135a:	bf00      	nop
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr

08001364 <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 8001368:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800136c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001370:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001374:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001378:	d101      	bne.n	800137e <LL_RCC_IsActiveFlag_PINRST+0x1a>
 800137a:	2301      	movs	r3, #1
 800137c:	e000      	b.n	8001380 <LL_RCC_IsActiveFlag_PINRST+0x1c>
 800137e:	2300      	movs	r3, #0
}
 8001380:	4618      	mov	r0, r3
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr

0800138a <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 800138a:	b480      	push	{r7}
 800138c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 800138e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001392:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001396:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800139a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800139e:	d101      	bne.n	80013a4 <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 80013a0:	2301      	movs	r3, #1
 80013a2:	e000      	b.n	80013a6 <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 80013a4:	2300      	movs	r3, #0
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr

080013b0 <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b085      	sub	sp, #20
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 80013b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013bc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80013be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	4313      	orrs	r3, r2
 80013c6:	650b      	str	r3, [r1, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80013c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013cc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	4013      	ands	r3, r2
 80013d2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80013d4:	68fb      	ldr	r3, [r7, #12]
}
 80013d6:	bf00      	nop
 80013d8:	3714      	adds	r7, #20
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr
	...

080013e4 <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 80013e8:	4b04      	ldr	r3, [pc, #16]	; (80013fc <LL_DBGMCU_GetDeviceID+0x18>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 80013f0:	4618      	mov	r0, r3
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr
 80013fa:	bf00      	nop
 80013fc:	e0042000 	.word	0xe0042000

08001400 <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 8001404:	4b04      	ldr	r3, [pc, #16]	; (8001418 <LL_DBGMCU_GetRevisionID+0x18>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	0c1b      	lsrs	r3, r3, #16
 800140a:	b29b      	uxth	r3, r3
}
 800140c:	4618      	mov	r0, r3
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop
 8001418:	e0042000 	.word	0xe0042000

0800141c <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800141c:	b480      	push	{r7}
 800141e:	b083      	sub	sp, #12
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
 8001424:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	685a      	ldr	r2, [r3, #4]
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	041b      	lsls	r3, r3, #16
 800142e:	431a      	orrs	r2, r3
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	605a      	str	r2, [r3, #4]
}
 8001434:	bf00      	nop
 8001436:	370c      	adds	r7, #12
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr

08001440 <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
 8001448:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	685a      	ldr	r2, [r3, #4]
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	431a      	orrs	r2, r3
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	605a      	str	r2, [r3, #4]
}
 8001456:	bf00      	nop
 8001458:	370c      	adds	r7, #12
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr

08001462 <LL_C2_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001462:	b480      	push	{r7}
 8001464:	b083      	sub	sp, #12
 8001466:	af00      	add	r7, sp, #0
 8001468:	6078      	str	r0, [r7, #4]
 800146a:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	695a      	ldr	r2, [r3, #20]
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	041b      	lsls	r3, r3, #16
 8001474:	431a      	orrs	r2, r3
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	615a      	str	r2, [r3, #20]
}
 800147a:	bf00      	nop
 800147c:	370c      	adds	r7, #12
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr

08001486 <LL_C2_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001486:	b480      	push	{r7}
 8001488:	b083      	sub	sp, #12
 800148a:	af00      	add	r7, sp, #0
 800148c:	6078      	str	r0, [r7, #4]
 800148e:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	695a      	ldr	r2, [r3, #20]
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	431a      	orrs	r2, r3
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	615a      	str	r2, [r3, #20]
}
 800149c:	bf00      	nop
 800149e:	370c      	adds	r7, #12
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr

080014a8 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b083      	sub	sp, #12
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
 80014b0:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	683a      	ldr	r2, [r7, #0]
 80014b6:	609a      	str	r2, [r3, #8]
}
 80014b8:	bf00      	nop
 80014ba:	370c      	adds	r7, #12
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr

080014c4 <LL_C2_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
 80014cc:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	683a      	ldr	r2, [r7, #0]
 80014d2:	619a      	str	r2, [r3, #24]
}
 80014d4:	bf00      	nop
 80014d6:	370c      	adds	r7, #12
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr

080014e0 <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80014e4:	4b05      	ldr	r3, [pc, #20]	; (80014fc <LL_LPM_EnableSleep+0x1c>)
 80014e6:	691b      	ldr	r3, [r3, #16]
 80014e8:	4a04      	ldr	r2, [pc, #16]	; (80014fc <LL_LPM_EnableSleep+0x1c>)
 80014ea:	f023 0304 	bic.w	r3, r3, #4
 80014ee:	6113      	str	r3, [r2, #16]
}
 80014f0:	bf00      	nop
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop
 80014fc:	e000ed00 	.word	0xe000ed00

08001500 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8001500:	b480      	push	{r7}
 8001502:	b083      	sub	sp, #12
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	22ff      	movs	r2, #255	; 0xff
 800150c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800150e:	bf00      	nop
 8001510:	370c      	adds	r7, #12
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr

0800151a <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 800151a:	b480      	push	{r7}
 800151c:	b083      	sub	sp, #12
 800151e:	af00      	add	r7, sp, #0
 8001520:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	22ca      	movs	r2, #202	; 0xca
 8001526:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2253      	movs	r2, #83	; 0x53
 800152c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800152e:	bf00      	nop
 8001530:	370c      	adds	r7, #12
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr

0800153a <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 800153a:	b480      	push	{r7}
 800153c:	b083      	sub	sp, #12
 800153e:	af00      	add	r7, sp, #0
 8001540:	6078      	str	r0, [r7, #4]
 8001542:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	689b      	ldr	r3, [r3, #8]
 8001548:	f023 0207 	bic.w	r2, r3, #7
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	431a      	orrs	r2, r3
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	609a      	str	r2, [r3, #8]
}
 8001554:	bf00      	nop
 8001556:	370c      	adds	r7, #12
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr

08001560 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001564:	4b04      	ldr	r3, [pc, #16]	; (8001578 <MX_APPE_Config+0x18>)
 8001566:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800156a:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 800156c:	f000 f824 	bl	80015b8 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 8001570:	f000 f864 	bl	800163c <Config_HSE>

  return;
 8001574:	bf00      	nop
}
 8001576:	bd80      	pop	{r7, pc}
 8001578:	58004000 	.word	0x58004000

0800157c <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 8001580:	f000 f870 	bl	8001664 <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 8001584:	f000 f888 	bl	8001698 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8001588:	4903      	ldr	r1, [pc, #12]	; (8001598 <MX_APPE_Init+0x1c>)
 800158a:	2000      	movs	r0, #0
 800158c:	f000 fdd4 	bl	8002138 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8001590:	f000 f890 	bl	80016b4 <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 8001594:	bf00      	nop
}
 8001596:	bd80      	pop	{r7, pc}
 8001598:	20000ae0 	.word	0x20000ae0

0800159c <Init_Smps>:

void Init_Smps(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 80015a0:	bf00      	nop
}
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr

080015aa <Init_Exti>:

void Init_Exti(void)
{
 80015aa:	b580      	push	{r7, lr}
 80015ac:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 80015ae:	2050      	movs	r0, #80	; 0x50
 80015b0:	f7ff fe70 	bl	8001294 <LL_EXTI_EnableIT_32_63>

  return;
 80015b4:	bf00      	nop
}
 80015b6:	bd80      	pop	{r7, pc}

080015b8 <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
#if (CFG_HW_RESET_BY_FW == 1)
  Reset_BackupDomain();
 80015bc:	f000 f804 	bl	80015c8 <Reset_BackupDomain>

  Reset_IPCC();
 80015c0:	f000 f81a 	bl	80015f8 <Reset_IPCC>
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 80015c4:	bf00      	nop
}
 80015c6:	bd80      	pop	{r7, pc}

080015c8 <Reset_BackupDomain>:

#if (CFG_HW_RESET_BY_FW == 1)
static void Reset_BackupDomain(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	af00      	add	r7, sp, #0
  if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 80015cc:	f7ff feca 	bl	8001364 <LL_RCC_IsActiveFlag_PINRST>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d00d      	beq.n	80015f2 <Reset_BackupDomain+0x2a>
 80015d6:	f7ff fed8 	bl	800138a <LL_RCC_IsActiveFlag_SFTRST>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d108      	bne.n	80015f2 <Reset_BackupDomain+0x2a>
  {
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 80015e0:	f003 ffa8 	bl	8005534 <HAL_PWR_EnableBkUpAccess>

    /**
     *  Write twice the value to flush the APB-AHB bridge
     *  This bit shall be written in the register before writing the next one
     */
    HAL_PWR_EnableBkUpAccess();
 80015e4:	f003 ffa6 	bl	8005534 <HAL_PWR_EnableBkUpAccess>

    __HAL_RCC_BACKUPRESET_FORCE();
 80015e8:	f7ff fe9a 	bl	8001320 <LL_RCC_ForceBackupDomainReset>
    __HAL_RCC_BACKUPRESET_RELEASE();
 80015ec:	f7ff fea9 	bl	8001342 <LL_RCC_ReleaseBackupDomainReset>
  }

  return;
 80015f0:	bf00      	nop
 80015f2:	bf00      	nop
}
 80015f4:	bd80      	pop	{r7, pc}
	...

080015f8 <Reset_IPCC>:

static void Reset_IPCC(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 80015fc:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001600:	f7ff fed6 	bl	80013b0 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_ClearFlag_CHx(
 8001604:	213f      	movs	r1, #63	; 0x3f
 8001606:	480c      	ldr	r0, [pc, #48]	; (8001638 <Reset_IPCC+0x40>)
 8001608:	f7ff ff4e 	bl	80014a8 <LL_C1_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_ClearFlag_CHx(
 800160c:	213f      	movs	r1, #63	; 0x3f
 800160e:	480a      	ldr	r0, [pc, #40]	; (8001638 <Reset_IPCC+0x40>)
 8001610:	f7ff ff58 	bl	80014c4 <LL_C2_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableTransmitChannel(
 8001614:	213f      	movs	r1, #63	; 0x3f
 8001616:	4808      	ldr	r0, [pc, #32]	; (8001638 <Reset_IPCC+0x40>)
 8001618:	f7ff ff00 	bl	800141c <LL_C1_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableTransmitChannel(
 800161c:	213f      	movs	r1, #63	; 0x3f
 800161e:	4806      	ldr	r0, [pc, #24]	; (8001638 <Reset_IPCC+0x40>)
 8001620:	f7ff ff1f 	bl	8001462 <LL_C2_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableReceiveChannel(
 8001624:	213f      	movs	r1, #63	; 0x3f
 8001626:	4804      	ldr	r0, [pc, #16]	; (8001638 <Reset_IPCC+0x40>)
 8001628:	f7ff ff0a 	bl	8001440 <LL_C1_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableReceiveChannel(
 800162c:	213f      	movs	r1, #63	; 0x3f
 800162e:	4802      	ldr	r0, [pc, #8]	; (8001638 <Reset_IPCC+0x40>)
 8001630:	f7ff ff29 	bl	8001486 <LL_C2_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  return;
 8001634:	bf00      	nop
}
 8001636:	bd80      	pop	{r7, pc}
 8001638:	58000c00 	.word	0x58000c00

0800163c <Config_HSE>:
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8001642:	2000      	movs	r0, #0
 8001644:	f009 fdfc 	bl	800b240 <OTP_Read>
 8001648:	6078      	str	r0, [r7, #4]
  if (p_otp)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d005      	beq.n	800165c <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	799b      	ldrb	r3, [r3, #6]
 8001654:	4618      	mov	r0, r3
 8001656:	f7ff fe31 	bl	80012bc <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 800165a:	bf00      	nop
 800165c:	bf00      	nop
}
 800165e:	3708      	adds	r7, #8
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}

08001664 <System_Init>:

static void System_Init(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	af00      	add	r7, sp, #0
  Init_Smps();
 8001668:	f7ff ff98 	bl	800159c <Init_Smps>

  Init_Exti();
 800166c:	f7ff ff9d 	bl	80015aa <Init_Exti>

  Init_Rtc();
 8001670:	f000 f802 	bl	8001678 <Init_Rtc>

  return;
 8001674:	bf00      	nop
}
 8001676:	bd80      	pop	{r7, pc}

08001678 <Init_Rtc>:

static void Init_Rtc(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 800167c:	4805      	ldr	r0, [pc, #20]	; (8001694 <Init_Rtc+0x1c>)
 800167e:	f7ff ff4c 	bl	800151a <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 8001682:	2100      	movs	r1, #0
 8001684:	4803      	ldr	r0, [pc, #12]	; (8001694 <Init_Rtc+0x1c>)
 8001686:	f7ff ff58 	bl	800153a <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 800168a:	4802      	ldr	r0, [pc, #8]	; (8001694 <Init_Rtc+0x1c>)
 800168c:	f7ff ff38 	bl	8001500 <LL_RTC_EnableWriteProtection>

  return;
 8001690:	bf00      	nop
}
 8001692:	bd80      	pop	{r7, pc}
 8001694:	40002800 	.word	0x40002800

08001698 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 800169c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80016a0:	f7ff fe2a 	bl	80012f8 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 80016a4:	f00a fcc6 	bl	800c034 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 80016a8:	2004      	movs	r0, #4
 80016aa:	f7ff fddd 	bl	8001268 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 80016ae:	bf00      	nop
}
 80016b0:	bd80      	pop	{r7, pc}
	...

080016b4 <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b088      	sub	sp, #32
 80016b8:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 80016ba:	f009 fb7f 	bl	800adbc <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 80016be:	4a11      	ldr	r2, [pc, #68]	; (8001704 <appe_Tl_Init+0x50>)
 80016c0:	2100      	movs	r1, #0
 80016c2:	2004      	movs	r0, #4
 80016c4:	f00a fdf4 	bl	800c2b0 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 80016c8:	4b0f      	ldr	r3, [pc, #60]	; (8001708 <appe_Tl_Init+0x54>)
 80016ca:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 80016cc:	4b0f      	ldr	r3, [pc, #60]	; (800170c <appe_Tl_Init+0x58>)
 80016ce:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 80016d0:	463b      	mov	r3, r7
 80016d2:	4619      	mov	r1, r3
 80016d4:	480e      	ldr	r0, [pc, #56]	; (8001710 <appe_Tl_Init+0x5c>)
 80016d6:	f009 fa37 	bl	800ab48 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 80016da:	4b0e      	ldr	r3, [pc, #56]	; (8001714 <appe_Tl_Init+0x60>)
 80016dc:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 80016de:	4b0e      	ldr	r3, [pc, #56]	; (8001718 <appe_Tl_Init+0x64>)
 80016e0:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 80016e2:	4b0e      	ldr	r3, [pc, #56]	; (800171c <appe_Tl_Init+0x68>)
 80016e4:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 80016e6:	f240 533c 	movw	r3, #1340	; 0x53c
 80016ea:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 80016ec:	f107 0308 	add.w	r3, r7, #8
 80016f0:	4618      	mov	r0, r3
 80016f2:	f009 fca5 	bl	800b040 <TL_MM_Init>

  TL_Enable();
 80016f6:	f009 fb5b 	bl	800adb0 <TL_Enable>

  return;
 80016fa:	bf00      	nop
}
 80016fc:	3720      	adds	r7, #32
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	0800ab81 	.word	0x0800ab81
 8001708:	200005dc 	.word	0x200005dc
 800170c:	08001721 	.word	0x08001721
 8001710:	08001739 	.word	0x08001739
 8001714:	200007f4 	.word	0x200007f4
 8001718:	200006e8 	.word	0x200006e8
 800171c:	200000a0 	.word	0x200000a0

08001720 <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 8001720:	b480      	push	{r7}
 8001722:	b083      	sub	sp, #12
 8001724:	af00      	add	r7, sp, #0
 8001726:	4603      	mov	r3, r0
 8001728:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 800172a:	bf00      	nop
}
 800172c:	370c      	adds	r7, #12
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr
	...

08001738 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b088      	sub	sp, #32
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	330b      	adds	r3, #11
 8001746:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 8001748:	69fb      	ldr	r3, [r7, #28]
 800174a:	881b      	ldrh	r3, [r3, #0]
 800174c:	b29b      	uxth	r3, r3
 800174e:	f5a3 4312 	sub.w	r3, r3, #37376	; 0x9200
 8001752:	2b07      	cmp	r3, #7
 8001754:	d81f      	bhi.n	8001796 <APPE_SysUserEvtRx+0x5e>
 8001756:	a201      	add	r2, pc, #4	; (adr r2, 800175c <APPE_SysUserEvtRx+0x24>)
 8001758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800175c:	0800177d 	.word	0x0800177d
 8001760:	0800178f 	.word	0x0800178f
 8001764:	08001797 	.word	0x08001797
 8001768:	08001797 	.word	0x08001797
 800176c:	08001797 	.word	0x08001797
 8001770:	08001797 	.word	0x08001797
 8001774:	08001797 	.word	0x08001797
 8001778:	08001797 	.word	0x08001797
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 800177c:	f107 030c 	add.w	r3, r7, #12
 8001780:	4618      	mov	r0, r3
 8001782:	f008 ff9d 	bl	800a6c0 <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
    APPE_SysEvtReadyProcessing(pPayload);
 8001786:	6878      	ldr	r0, [r7, #4]
 8001788:	f000 f81b 	bl	80017c2 <APPE_SysEvtReadyProcessing>
    break;
 800178c:	e004      	b.n	8001798 <APPE_SysUserEvtRx+0x60>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
    APPE_SysEvtError(pPayload);
 800178e:	6878      	ldr	r0, [r7, #4]
 8001790:	f000 f806 	bl	80017a0 <APPE_SysEvtError>
    break;
 8001794:	e000      	b.n	8001798 <APPE_SysUserEvtRx+0x60>
  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
    break;

  default:
    break;
 8001796:	bf00      	nop
  }

  return;
 8001798:	bf00      	nop
}
 800179a:	3720      	adds	r7, #32
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}

080017a0 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b085      	sub	sp, #20
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	330b      	adds	r3, #11
 80017ae:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	3302      	adds	r3, #2
 80017b4:	60bb      	str	r3, [r7, #8]
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 80017b6:	bf00      	nop
}
 80017b8:	3714      	adds	r7, #20
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr

080017c2 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 80017c2:	b580      	push	{r7, lr}
 80017c4:	b08a      	sub	sp, #40	; 0x28
 80017c6:	af00      	add	r7, sp, #0
 80017c8:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 80017ca:	f107 0308 	add.w	r3, r7, #8
 80017ce:	2200      	movs	r2, #0
 80017d0:	601a      	str	r2, [r3, #0]
 80017d2:	605a      	str	r2, [r3, #4]
 80017d4:	609a      	str	r2, [r3, #8]
 80017d6:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 80017d8:	2300      	movs	r3, #0
 80017da:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t DeviceID=0;
 80017dc:	2300      	movs	r3, #0
 80017de:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	330b      	adds	r3, #11
 80017e6:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 80017e8:	69fb      	ldr	r3, [r7, #28]
 80017ea:	3302      	adds	r3, #2
 80017ec:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 80017ee:	69bb      	ldr	r3, [r7, #24]
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d11d      	bne.n	8001832 <APPE_SysEvtReadyProcessing+0x70>
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");

    /* Traces channel initialization */
    APPD_EnableCPU2();
 80017f6:	f7ff fd1b 	bl	8001230 <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 80017fa:	230f      	movs	r3, #15
 80017fc:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 80017fe:	237f      	movs	r3, #127	; 0x7f
 8001800:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 8001802:	f7ff fdfd 	bl	8001400 <LL_DBGMCU_GetRevisionID>
 8001806:	6278      	str	r0, [r7, #36]	; 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);

    config_param.RevisionID = (uint16_t)RevisionID;
 8001808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800180a:	b29b      	uxth	r3, r3
 800180c:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 800180e:	f7ff fde9 	bl	80013e4 <LL_DBGMCU_GetDeviceID>
 8001812:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
    config_param.DeviceID = (uint16_t)DeviceID;
 8001814:	6a3b      	ldr	r3, [r7, #32]
 8001816:	b29b      	uxth	r3, r3
 8001818:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 800181a:	f107 0308 	add.w	r3, r7, #8
 800181e:	4618      	mov	r0, r3
 8001820:	f008 ff38 	bl	800a694 <SHCI_C2_Config>

    APP_BLE_Init();
 8001824:	f009 fe16 	bl	800b454 <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8001828:	2100      	movs	r1, #0
 800182a:	2001      	movs	r0, #1
 800182c:	f00a fc14 	bl	800c058 <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 8001830:	e007      	b.n	8001842 <APPE_SysEvtReadyProcessing+0x80>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 8001832:	69bb      	ldr	r3, [r7, #24]
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	2b01      	cmp	r3, #1
 8001838:	d103      	bne.n	8001842 <APPE_SysEvtReadyProcessing+0x80>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2200      	movs	r2, #0
 800183e:	701a      	strb	r2, [r3, #0]
  return;
 8001840:	bf00      	nop
 8001842:	bf00      	nop
}
 8001844:	3728      	adds	r7, #40	; 0x28
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}

0800184a <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 800184a:	b580      	push	{r7, lr}
 800184c:	b084      	sub	sp, #16
 800184e:	af00      	add	r7, sp, #0
 8001850:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001852:	f001 fdf5 	bl	8003440 <HAL_GetTick>
 8001856:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001862:	d00a      	beq.n	800187a <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 8001864:	f001 fe04 	bl	8003470 <HAL_GetTickFreq>
 8001868:	4603      	mov	r3, r0
 800186a:	461a      	mov	r2, r3
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	4413      	add	r3, r2
 8001870:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001872:	e002      	b.n	800187a <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 8001874:	f7ff fe34 	bl	80014e0 <LL_LPM_EnableSleep>
     */
  #if defined (__CC_ARM)
    __force_stores();
  #endif /* __CC_ARM */

    __WFI();
 8001878:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 800187a:	f001 fde1 	bl	8003440 <HAL_GetTick>
 800187e:	4602      	mov	r2, r0
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	1ad3      	subs	r3, r2, r3
 8001884:	68fa      	ldr	r2, [r7, #12]
 8001886:	429a      	cmp	r2, r3
 8001888:	d8f4      	bhi.n	8001874 <HAL_Delay+0x2a>
  }
}
 800188a:	bf00      	nop
 800188c:	bf00      	nop
 800188e:	3710      	adds	r7, #16
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}

08001894 <MX_APPE_Process>:

void MX_APPE_Process(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8001898:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800189c:	f00a fc0c 	bl	800c0b8 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 80018a0:	bf00      	nop
 80018a2:	bd80      	pop	{r7, pc}

080018a4 <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 80018a8:	bf00      	nop
}
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr

080018b2 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 80018b2:	b580      	push	{r7, lr}
 80018b4:	b082      	sub	sp, #8
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	6078      	str	r0, [r7, #4]
 80018ba:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 80018bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80018c0:	f00a fbfa 	bl	800c0b8 <UTIL_SEQ_Run>

  return;
 80018c4:	bf00      	nop
}
 80018c6:	3708      	adds	r7, #8
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}

080018cc <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b082      	sub	sp, #8
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 80018d4:	2100      	movs	r1, #0
 80018d6:	2004      	movs	r0, #4
 80018d8:	f00a fd0c 	bl	800c2f4 <UTIL_SEQ_SetTask>
  return;
 80018dc:	bf00      	nop
}
 80018de:	3708      	adds	r7, #8
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}

080018e4 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 80018ec:	2002      	movs	r0, #2
 80018ee:	f00a fd6d 	bl	800c3cc <UTIL_SEQ_SetEvt>
  return;
 80018f2:	bf00      	nop
}
 80018f4:	3708      	adds	r7, #8
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}

080018fa <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 80018fa:	b580      	push	{r7, lr}
 80018fc:	b082      	sub	sp, #8
 80018fe:	af00      	add	r7, sp, #0
 8001900:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8001902:	2002      	movs	r0, #2
 8001904:	f00a fd82 	bl	800c40c <UTIL_SEQ_WaitEvt>
  return;
 8001908:	bf00      	nop
}
 800190a:	3708      	adds	r7, #8
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}

08001910 <LL_EXTI_EnableIT_0_31>:
{
 8001910:	b480      	push	{r7}
 8001912:	b083      	sub	sp, #12
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8001918:	4b06      	ldr	r3, [pc, #24]	; (8001934 <LL_EXTI_EnableIT_0_31+0x24>)
 800191a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800191e:	4905      	ldr	r1, [pc, #20]	; (8001934 <LL_EXTI_EnableIT_0_31+0x24>)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	4313      	orrs	r3, r2
 8001924:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8001928:	bf00      	nop
 800192a:	370c      	adds	r7, #12
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr
 8001934:	58000800 	.word	0x58000800

08001938 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8001938:	b480      	push	{r7}
 800193a:	b083      	sub	sp, #12
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8001940:	4b05      	ldr	r3, [pc, #20]	; (8001958 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001942:	681a      	ldr	r2, [r3, #0]
 8001944:	4904      	ldr	r1, [pc, #16]	; (8001958 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	4313      	orrs	r3, r2
 800194a:	600b      	str	r3, [r1, #0]

}
 800194c:	bf00      	nop
 800194e:	370c      	adds	r7, #12
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr
 8001958:	58000800 	.word	0x58000800

0800195c <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 800195c:	b480      	push	{r7}
 800195e:	b083      	sub	sp, #12
 8001960:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001962:	4b0d      	ldr	r3, [pc, #52]	; (8001998 <ReadRtcSsrValue+0x3c>)
 8001964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001966:	b29b      	uxth	r3, r3
 8001968:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 800196a:	4b0b      	ldr	r3, [pc, #44]	; (8001998 <ReadRtcSsrValue+0x3c>)
 800196c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800196e:	b29b      	uxth	r3, r3
 8001970:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 8001972:	e005      	b.n	8001980 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001978:	4b07      	ldr	r3, [pc, #28]	; (8001998 <ReadRtcSsrValue+0x3c>)
 800197a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800197c:	b29b      	uxth	r3, r3
 800197e:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8001980:	687a      	ldr	r2, [r7, #4]
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	429a      	cmp	r2, r3
 8001986:	d1f5      	bne.n	8001974 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8001988:	683b      	ldr	r3, [r7, #0]
}
 800198a:	4618      	mov	r0, r3
 800198c:	370c      	adds	r7, #12
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr
 8001996:	bf00      	nop
 8001998:	40002800 	.word	0x40002800

0800199c <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 800199c:	b480      	push	{r7}
 800199e:	b085      	sub	sp, #20
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	4603      	mov	r3, r0
 80019a4:	460a      	mov	r2, r1
 80019a6:	71fb      	strb	r3, [r7, #7]
 80019a8:	4613      	mov	r3, r2
 80019aa:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 80019ac:	79ba      	ldrb	r2, [r7, #6]
 80019ae:	491d      	ldr	r1, [pc, #116]	; (8001a24 <LinkTimerAfter+0x88>)
 80019b0:	4613      	mov	r3, r2
 80019b2:	005b      	lsls	r3, r3, #1
 80019b4:	4413      	add	r3, r2
 80019b6:	00db      	lsls	r3, r3, #3
 80019b8:	440b      	add	r3, r1
 80019ba:	3315      	adds	r3, #21
 80019bc:	781b      	ldrb	r3, [r3, #0]
 80019be:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80019c0:	7bfb      	ldrb	r3, [r7, #15]
 80019c2:	2b06      	cmp	r3, #6
 80019c4:	d009      	beq.n	80019da <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 80019c6:	7bfa      	ldrb	r2, [r7, #15]
 80019c8:	4916      	ldr	r1, [pc, #88]	; (8001a24 <LinkTimerAfter+0x88>)
 80019ca:	4613      	mov	r3, r2
 80019cc:	005b      	lsls	r3, r3, #1
 80019ce:	4413      	add	r3, r2
 80019d0:	00db      	lsls	r3, r3, #3
 80019d2:	440b      	add	r3, r1
 80019d4:	3314      	adds	r3, #20
 80019d6:	79fa      	ldrb	r2, [r7, #7]
 80019d8:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 80019da:	79fa      	ldrb	r2, [r7, #7]
 80019dc:	4911      	ldr	r1, [pc, #68]	; (8001a24 <LinkTimerAfter+0x88>)
 80019de:	4613      	mov	r3, r2
 80019e0:	005b      	lsls	r3, r3, #1
 80019e2:	4413      	add	r3, r2
 80019e4:	00db      	lsls	r3, r3, #3
 80019e6:	440b      	add	r3, r1
 80019e8:	3315      	adds	r3, #21
 80019ea:	7bfa      	ldrb	r2, [r7, #15]
 80019ec:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 80019ee:	79fa      	ldrb	r2, [r7, #7]
 80019f0:	490c      	ldr	r1, [pc, #48]	; (8001a24 <LinkTimerAfter+0x88>)
 80019f2:	4613      	mov	r3, r2
 80019f4:	005b      	lsls	r3, r3, #1
 80019f6:	4413      	add	r3, r2
 80019f8:	00db      	lsls	r3, r3, #3
 80019fa:	440b      	add	r3, r1
 80019fc:	3314      	adds	r3, #20
 80019fe:	79ba      	ldrb	r2, [r7, #6]
 8001a00:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8001a02:	79ba      	ldrb	r2, [r7, #6]
 8001a04:	4907      	ldr	r1, [pc, #28]	; (8001a24 <LinkTimerAfter+0x88>)
 8001a06:	4613      	mov	r3, r2
 8001a08:	005b      	lsls	r3, r3, #1
 8001a0a:	4413      	add	r3, r2
 8001a0c:	00db      	lsls	r3, r3, #3
 8001a0e:	440b      	add	r3, r1
 8001a10:	3315      	adds	r3, #21
 8001a12:	79fa      	ldrb	r2, [r7, #7]
 8001a14:	701a      	strb	r2, [r3, #0]

  return;
 8001a16:	bf00      	nop
}
 8001a18:	3714      	adds	r7, #20
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr
 8001a22:	bf00      	nop
 8001a24:	20000978 	.word	0x20000978

08001a28 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b085      	sub	sp, #20
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	4603      	mov	r3, r0
 8001a30:	460a      	mov	r2, r1
 8001a32:	71fb      	strb	r3, [r7, #7]
 8001a34:	4613      	mov	r3, r2
 8001a36:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8001a38:	4b29      	ldr	r3, [pc, #164]	; (8001ae0 <LinkTimerBefore+0xb8>)
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	b2db      	uxtb	r3, r3
 8001a3e:	79ba      	ldrb	r2, [r7, #6]
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d032      	beq.n	8001aaa <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8001a44:	79ba      	ldrb	r2, [r7, #6]
 8001a46:	4927      	ldr	r1, [pc, #156]	; (8001ae4 <LinkTimerBefore+0xbc>)
 8001a48:	4613      	mov	r3, r2
 8001a4a:	005b      	lsls	r3, r3, #1
 8001a4c:	4413      	add	r3, r2
 8001a4e:	00db      	lsls	r3, r3, #3
 8001a50:	440b      	add	r3, r1
 8001a52:	3314      	adds	r3, #20
 8001a54:	781b      	ldrb	r3, [r3, #0]
 8001a56:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8001a58:	7bfa      	ldrb	r2, [r7, #15]
 8001a5a:	4922      	ldr	r1, [pc, #136]	; (8001ae4 <LinkTimerBefore+0xbc>)
 8001a5c:	4613      	mov	r3, r2
 8001a5e:	005b      	lsls	r3, r3, #1
 8001a60:	4413      	add	r3, r2
 8001a62:	00db      	lsls	r3, r3, #3
 8001a64:	440b      	add	r3, r1
 8001a66:	3315      	adds	r3, #21
 8001a68:	79fa      	ldrb	r2, [r7, #7]
 8001a6a:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8001a6c:	79fa      	ldrb	r2, [r7, #7]
 8001a6e:	491d      	ldr	r1, [pc, #116]	; (8001ae4 <LinkTimerBefore+0xbc>)
 8001a70:	4613      	mov	r3, r2
 8001a72:	005b      	lsls	r3, r3, #1
 8001a74:	4413      	add	r3, r2
 8001a76:	00db      	lsls	r3, r3, #3
 8001a78:	440b      	add	r3, r1
 8001a7a:	3315      	adds	r3, #21
 8001a7c:	79ba      	ldrb	r2, [r7, #6]
 8001a7e:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8001a80:	79fa      	ldrb	r2, [r7, #7]
 8001a82:	4918      	ldr	r1, [pc, #96]	; (8001ae4 <LinkTimerBefore+0xbc>)
 8001a84:	4613      	mov	r3, r2
 8001a86:	005b      	lsls	r3, r3, #1
 8001a88:	4413      	add	r3, r2
 8001a8a:	00db      	lsls	r3, r3, #3
 8001a8c:	440b      	add	r3, r1
 8001a8e:	3314      	adds	r3, #20
 8001a90:	7bfa      	ldrb	r2, [r7, #15]
 8001a92:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8001a94:	79ba      	ldrb	r2, [r7, #6]
 8001a96:	4913      	ldr	r1, [pc, #76]	; (8001ae4 <LinkTimerBefore+0xbc>)
 8001a98:	4613      	mov	r3, r2
 8001a9a:	005b      	lsls	r3, r3, #1
 8001a9c:	4413      	add	r3, r2
 8001a9e:	00db      	lsls	r3, r3, #3
 8001aa0:	440b      	add	r3, r1
 8001aa2:	3314      	adds	r3, #20
 8001aa4:	79fa      	ldrb	r2, [r7, #7]
 8001aa6:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8001aa8:	e014      	b.n	8001ad4 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8001aaa:	79fa      	ldrb	r2, [r7, #7]
 8001aac:	490d      	ldr	r1, [pc, #52]	; (8001ae4 <LinkTimerBefore+0xbc>)
 8001aae:	4613      	mov	r3, r2
 8001ab0:	005b      	lsls	r3, r3, #1
 8001ab2:	4413      	add	r3, r2
 8001ab4:	00db      	lsls	r3, r3, #3
 8001ab6:	440b      	add	r3, r1
 8001ab8:	3315      	adds	r3, #21
 8001aba:	79ba      	ldrb	r2, [r7, #6]
 8001abc:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8001abe:	79ba      	ldrb	r2, [r7, #6]
 8001ac0:	4908      	ldr	r1, [pc, #32]	; (8001ae4 <LinkTimerBefore+0xbc>)
 8001ac2:	4613      	mov	r3, r2
 8001ac4:	005b      	lsls	r3, r3, #1
 8001ac6:	4413      	add	r3, r2
 8001ac8:	00db      	lsls	r3, r3, #3
 8001aca:	440b      	add	r3, r1
 8001acc:	3314      	adds	r3, #20
 8001ace:	79fa      	ldrb	r2, [r7, #7]
 8001ad0:	701a      	strb	r2, [r3, #0]
  return;
 8001ad2:	bf00      	nop
}
 8001ad4:	3714      	adds	r7, #20
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr
 8001ade:	bf00      	nop
 8001ae0:	20000a08 	.word	0x20000a08
 8001ae4:	20000978 	.word	0x20000978

08001ae8 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b084      	sub	sp, #16
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	4603      	mov	r3, r0
 8001af0:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001af2:	4b4e      	ldr	r3, [pc, #312]	; (8001c2c <linkTimer+0x144>)
 8001af4:	781b      	ldrb	r3, [r3, #0]
 8001af6:	b2db      	uxtb	r3, r3
 8001af8:	2b06      	cmp	r3, #6
 8001afa:	d118      	bne.n	8001b2e <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001afc:	4b4b      	ldr	r3, [pc, #300]	; (8001c2c <linkTimer+0x144>)
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	b2da      	uxtb	r2, r3
 8001b02:	4b4b      	ldr	r3, [pc, #300]	; (8001c30 <linkTimer+0x148>)
 8001b04:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8001b06:	4a49      	ldr	r2, [pc, #292]	; (8001c2c <linkTimer+0x144>)
 8001b08:	79fb      	ldrb	r3, [r7, #7]
 8001b0a:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8001b0c:	79fa      	ldrb	r2, [r7, #7]
 8001b0e:	4949      	ldr	r1, [pc, #292]	; (8001c34 <linkTimer+0x14c>)
 8001b10:	4613      	mov	r3, r2
 8001b12:	005b      	lsls	r3, r3, #1
 8001b14:	4413      	add	r3, r2
 8001b16:	00db      	lsls	r3, r3, #3
 8001b18:	440b      	add	r3, r1
 8001b1a:	3315      	adds	r3, #21
 8001b1c:	2206      	movs	r2, #6
 8001b1e:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001b20:	4b45      	ldr	r3, [pc, #276]	; (8001c38 <linkTimer+0x150>)
 8001b22:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001b26:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	81fb      	strh	r3, [r7, #14]
 8001b2c:	e078      	b.n	8001c20 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8001b2e:	f000 f909 	bl	8001d44 <ReturnTimeElapsed>
 8001b32:	4603      	mov	r3, r0
 8001b34:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8001b36:	79fa      	ldrb	r2, [r7, #7]
 8001b38:	493e      	ldr	r1, [pc, #248]	; (8001c34 <linkTimer+0x14c>)
 8001b3a:	4613      	mov	r3, r2
 8001b3c:	005b      	lsls	r3, r3, #1
 8001b3e:	4413      	add	r3, r2
 8001b40:	00db      	lsls	r3, r3, #3
 8001b42:	440b      	add	r3, r1
 8001b44:	3308      	adds	r3, #8
 8001b46:	6819      	ldr	r1, [r3, #0]
 8001b48:	89fb      	ldrh	r3, [r7, #14]
 8001b4a:	79fa      	ldrb	r2, [r7, #7]
 8001b4c:	4419      	add	r1, r3
 8001b4e:	4839      	ldr	r0, [pc, #228]	; (8001c34 <linkTimer+0x14c>)
 8001b50:	4613      	mov	r3, r2
 8001b52:	005b      	lsls	r3, r3, #1
 8001b54:	4413      	add	r3, r2
 8001b56:	00db      	lsls	r3, r3, #3
 8001b58:	4403      	add	r3, r0
 8001b5a:	3308      	adds	r3, #8
 8001b5c:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8001b5e:	79fa      	ldrb	r2, [r7, #7]
 8001b60:	4934      	ldr	r1, [pc, #208]	; (8001c34 <linkTimer+0x14c>)
 8001b62:	4613      	mov	r3, r2
 8001b64:	005b      	lsls	r3, r3, #1
 8001b66:	4413      	add	r3, r2
 8001b68:	00db      	lsls	r3, r3, #3
 8001b6a:	440b      	add	r3, r1
 8001b6c:	3308      	adds	r3, #8
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8001b72:	4b2e      	ldr	r3, [pc, #184]	; (8001c2c <linkTimer+0x144>)
 8001b74:	781b      	ldrb	r3, [r3, #0]
 8001b76:	b2db      	uxtb	r3, r3
 8001b78:	4619      	mov	r1, r3
 8001b7a:	4a2e      	ldr	r2, [pc, #184]	; (8001c34 <linkTimer+0x14c>)
 8001b7c:	460b      	mov	r3, r1
 8001b7e:	005b      	lsls	r3, r3, #1
 8001b80:	440b      	add	r3, r1
 8001b82:	00db      	lsls	r3, r3, #3
 8001b84:	4413      	add	r3, r2
 8001b86:	3308      	adds	r3, #8
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	68ba      	ldr	r2, [r7, #8]
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	d337      	bcc.n	8001c00 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8001b90:	4b26      	ldr	r3, [pc, #152]	; (8001c2c <linkTimer+0x144>)
 8001b92:	781b      	ldrb	r3, [r3, #0]
 8001b94:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8001b96:	7b7a      	ldrb	r2, [r7, #13]
 8001b98:	4926      	ldr	r1, [pc, #152]	; (8001c34 <linkTimer+0x14c>)
 8001b9a:	4613      	mov	r3, r2
 8001b9c:	005b      	lsls	r3, r3, #1
 8001b9e:	4413      	add	r3, r2
 8001ba0:	00db      	lsls	r3, r3, #3
 8001ba2:	440b      	add	r3, r1
 8001ba4:	3315      	adds	r3, #21
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001baa:	e013      	b.n	8001bd4 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8001bac:	7b7a      	ldrb	r2, [r7, #13]
 8001bae:	4921      	ldr	r1, [pc, #132]	; (8001c34 <linkTimer+0x14c>)
 8001bb0:	4613      	mov	r3, r2
 8001bb2:	005b      	lsls	r3, r3, #1
 8001bb4:	4413      	add	r3, r2
 8001bb6:	00db      	lsls	r3, r3, #3
 8001bb8:	440b      	add	r3, r1
 8001bba:	3315      	adds	r3, #21
 8001bbc:	781b      	ldrb	r3, [r3, #0]
 8001bbe:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8001bc0:	7b7a      	ldrb	r2, [r7, #13]
 8001bc2:	491c      	ldr	r1, [pc, #112]	; (8001c34 <linkTimer+0x14c>)
 8001bc4:	4613      	mov	r3, r2
 8001bc6:	005b      	lsls	r3, r3, #1
 8001bc8:	4413      	add	r3, r2
 8001bca:	00db      	lsls	r3, r3, #3
 8001bcc:	440b      	add	r3, r1
 8001bce:	3315      	adds	r3, #21
 8001bd0:	781b      	ldrb	r3, [r3, #0]
 8001bd2:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001bd4:	7b3b      	ldrb	r3, [r7, #12]
 8001bd6:	2b06      	cmp	r3, #6
 8001bd8:	d00b      	beq.n	8001bf2 <linkTimer+0x10a>
 8001bda:	7b3a      	ldrb	r2, [r7, #12]
 8001bdc:	4915      	ldr	r1, [pc, #84]	; (8001c34 <linkTimer+0x14c>)
 8001bde:	4613      	mov	r3, r2
 8001be0:	005b      	lsls	r3, r3, #1
 8001be2:	4413      	add	r3, r2
 8001be4:	00db      	lsls	r3, r3, #3
 8001be6:	440b      	add	r3, r1
 8001be8:	3308      	adds	r3, #8
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	68ba      	ldr	r2, [r7, #8]
 8001bee:	429a      	cmp	r2, r3
 8001bf0:	d2dc      	bcs.n	8001bac <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8001bf2:	7b7a      	ldrb	r2, [r7, #13]
 8001bf4:	79fb      	ldrb	r3, [r7, #7]
 8001bf6:	4611      	mov	r1, r2
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f7ff fecf 	bl	800199c <LinkTimerAfter>
 8001bfe:	e00f      	b.n	8001c20 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8001c00:	4b0a      	ldr	r3, [pc, #40]	; (8001c2c <linkTimer+0x144>)
 8001c02:	781b      	ldrb	r3, [r3, #0]
 8001c04:	b2da      	uxtb	r2, r3
 8001c06:	79fb      	ldrb	r3, [r7, #7]
 8001c08:	4611      	mov	r1, r2
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f7ff ff0c 	bl	8001a28 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8001c10:	4b06      	ldr	r3, [pc, #24]	; (8001c2c <linkTimer+0x144>)
 8001c12:	781b      	ldrb	r3, [r3, #0]
 8001c14:	b2da      	uxtb	r2, r3
 8001c16:	4b06      	ldr	r3, [pc, #24]	; (8001c30 <linkTimer+0x148>)
 8001c18:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8001c1a:	4a04      	ldr	r2, [pc, #16]	; (8001c2c <linkTimer+0x144>)
 8001c1c:	79fb      	ldrb	r3, [r7, #7]
 8001c1e:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8001c20:	89fb      	ldrh	r3, [r7, #14]
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	3710      	adds	r7, #16
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	20000a08 	.word	0x20000a08
 8001c30:	20000a09 	.word	0x20000a09
 8001c34:	20000978 	.word	0x20000978
 8001c38:	20000a0c 	.word	0x20000a0c

08001c3c <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b085      	sub	sp, #20
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	4603      	mov	r3, r0
 8001c44:	460a      	mov	r2, r1
 8001c46:	71fb      	strb	r3, [r7, #7]
 8001c48:	4613      	mov	r3, r2
 8001c4a:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8001c4c:	4b39      	ldr	r3, [pc, #228]	; (8001d34 <UnlinkTimer+0xf8>)
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	b2db      	uxtb	r3, r3
 8001c52:	79fa      	ldrb	r2, [r7, #7]
 8001c54:	429a      	cmp	r2, r3
 8001c56:	d111      	bne.n	8001c7c <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001c58:	4b36      	ldr	r3, [pc, #216]	; (8001d34 <UnlinkTimer+0xf8>)
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	b2da      	uxtb	r2, r3
 8001c5e:	4b36      	ldr	r3, [pc, #216]	; (8001d38 <UnlinkTimer+0xfc>)
 8001c60:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8001c62:	79fa      	ldrb	r2, [r7, #7]
 8001c64:	4935      	ldr	r1, [pc, #212]	; (8001d3c <UnlinkTimer+0x100>)
 8001c66:	4613      	mov	r3, r2
 8001c68:	005b      	lsls	r3, r3, #1
 8001c6a:	4413      	add	r3, r2
 8001c6c:	00db      	lsls	r3, r3, #3
 8001c6e:	440b      	add	r3, r1
 8001c70:	3315      	adds	r3, #21
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	b2da      	uxtb	r2, r3
 8001c76:	4b2f      	ldr	r3, [pc, #188]	; (8001d34 <UnlinkTimer+0xf8>)
 8001c78:	701a      	strb	r2, [r3, #0]
 8001c7a:	e03e      	b.n	8001cfa <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8001c7c:	79fa      	ldrb	r2, [r7, #7]
 8001c7e:	492f      	ldr	r1, [pc, #188]	; (8001d3c <UnlinkTimer+0x100>)
 8001c80:	4613      	mov	r3, r2
 8001c82:	005b      	lsls	r3, r3, #1
 8001c84:	4413      	add	r3, r2
 8001c86:	00db      	lsls	r3, r3, #3
 8001c88:	440b      	add	r3, r1
 8001c8a:	3314      	adds	r3, #20
 8001c8c:	781b      	ldrb	r3, [r3, #0]
 8001c8e:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8001c90:	79fa      	ldrb	r2, [r7, #7]
 8001c92:	492a      	ldr	r1, [pc, #168]	; (8001d3c <UnlinkTimer+0x100>)
 8001c94:	4613      	mov	r3, r2
 8001c96:	005b      	lsls	r3, r3, #1
 8001c98:	4413      	add	r3, r2
 8001c9a:	00db      	lsls	r3, r3, #3
 8001c9c:	440b      	add	r3, r1
 8001c9e:	3315      	adds	r3, #21
 8001ca0:	781b      	ldrb	r3, [r3, #0]
 8001ca2:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8001ca4:	79f9      	ldrb	r1, [r7, #7]
 8001ca6:	7bfa      	ldrb	r2, [r7, #15]
 8001ca8:	4824      	ldr	r0, [pc, #144]	; (8001d3c <UnlinkTimer+0x100>)
 8001caa:	460b      	mov	r3, r1
 8001cac:	005b      	lsls	r3, r3, #1
 8001cae:	440b      	add	r3, r1
 8001cb0:	00db      	lsls	r3, r3, #3
 8001cb2:	4403      	add	r3, r0
 8001cb4:	3315      	adds	r3, #21
 8001cb6:	781b      	ldrb	r3, [r3, #0]
 8001cb8:	b2d8      	uxtb	r0, r3
 8001cba:	4920      	ldr	r1, [pc, #128]	; (8001d3c <UnlinkTimer+0x100>)
 8001cbc:	4613      	mov	r3, r2
 8001cbe:	005b      	lsls	r3, r3, #1
 8001cc0:	4413      	add	r3, r2
 8001cc2:	00db      	lsls	r3, r3, #3
 8001cc4:	440b      	add	r3, r1
 8001cc6:	3315      	adds	r3, #21
 8001cc8:	4602      	mov	r2, r0
 8001cca:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001ccc:	7bbb      	ldrb	r3, [r7, #14]
 8001cce:	2b06      	cmp	r3, #6
 8001cd0:	d013      	beq.n	8001cfa <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8001cd2:	79f9      	ldrb	r1, [r7, #7]
 8001cd4:	7bba      	ldrb	r2, [r7, #14]
 8001cd6:	4819      	ldr	r0, [pc, #100]	; (8001d3c <UnlinkTimer+0x100>)
 8001cd8:	460b      	mov	r3, r1
 8001cda:	005b      	lsls	r3, r3, #1
 8001cdc:	440b      	add	r3, r1
 8001cde:	00db      	lsls	r3, r3, #3
 8001ce0:	4403      	add	r3, r0
 8001ce2:	3314      	adds	r3, #20
 8001ce4:	781b      	ldrb	r3, [r3, #0]
 8001ce6:	b2d8      	uxtb	r0, r3
 8001ce8:	4914      	ldr	r1, [pc, #80]	; (8001d3c <UnlinkTimer+0x100>)
 8001cea:	4613      	mov	r3, r2
 8001cec:	005b      	lsls	r3, r3, #1
 8001cee:	4413      	add	r3, r2
 8001cf0:	00db      	lsls	r3, r3, #3
 8001cf2:	440b      	add	r3, r1
 8001cf4:	3314      	adds	r3, #20
 8001cf6:	4602      	mov	r2, r0
 8001cf8:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8001cfa:	79fa      	ldrb	r2, [r7, #7]
 8001cfc:	490f      	ldr	r1, [pc, #60]	; (8001d3c <UnlinkTimer+0x100>)
 8001cfe:	4613      	mov	r3, r2
 8001d00:	005b      	lsls	r3, r3, #1
 8001d02:	4413      	add	r3, r2
 8001d04:	00db      	lsls	r3, r3, #3
 8001d06:	440b      	add	r3, r1
 8001d08:	330c      	adds	r3, #12
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8001d0e:	4b09      	ldr	r3, [pc, #36]	; (8001d34 <UnlinkTimer+0xf8>)
 8001d10:	781b      	ldrb	r3, [r3, #0]
 8001d12:	b2db      	uxtb	r3, r3
 8001d14:	2b06      	cmp	r3, #6
 8001d16:	d107      	bne.n	8001d28 <UnlinkTimer+0xec>
 8001d18:	79bb      	ldrb	r3, [r7, #6]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d104      	bne.n	8001d28 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001d1e:	4b08      	ldr	r3, [pc, #32]	; (8001d40 <UnlinkTimer+0x104>)
 8001d20:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001d24:	601a      	str	r2, [r3, #0]
  }

  return;
 8001d26:	bf00      	nop
 8001d28:	bf00      	nop
}
 8001d2a:	3714      	adds	r7, #20
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr
 8001d34:	20000a08 	.word	0x20000a08
 8001d38:	20000a09 	.word	0x20000a09
 8001d3c:	20000978 	.word	0x20000978
 8001d40:	20000a0c 	.word	0x20000a0c

08001d44 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b082      	sub	sp, #8
 8001d48:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8001d4a:	4b1a      	ldr	r3, [pc, #104]	; (8001db4 <ReturnTimeElapsed+0x70>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001d52:	d026      	beq.n	8001da2 <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8001d54:	f7ff fe02 	bl	800195c <ReadRtcSsrValue>
 8001d58:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8001d5a:	4b16      	ldr	r3, [pc, #88]	; (8001db4 <ReturnTimeElapsed+0x70>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	687a      	ldr	r2, [r7, #4]
 8001d60:	429a      	cmp	r2, r3
 8001d62:	d805      	bhi.n	8001d70 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8001d64:	4b13      	ldr	r3, [pc, #76]	; (8001db4 <ReturnTimeElapsed+0x70>)
 8001d66:	681a      	ldr	r2, [r3, #0]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	1ad3      	subs	r3, r2, r3
 8001d6c:	607b      	str	r3, [r7, #4]
 8001d6e:	e00a      	b.n	8001d86 <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8001d70:	4b11      	ldr	r3, [pc, #68]	; (8001db8 <ReturnTimeElapsed+0x74>)
 8001d72:	881b      	ldrh	r3, [r3, #0]
 8001d74:	461a      	mov	r2, r3
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	1ad3      	subs	r3, r2, r3
 8001d7a:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8001d7c:	4b0d      	ldr	r3, [pc, #52]	; (8001db4 <ReturnTimeElapsed+0x70>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	683a      	ldr	r2, [r7, #0]
 8001d82:	4413      	add	r3, r2
 8001d84:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8001d86:	4b0d      	ldr	r3, [pc, #52]	; (8001dbc <ReturnTimeElapsed+0x78>)
 8001d88:	781b      	ldrb	r3, [r3, #0]
 8001d8a:	461a      	mov	r2, r3
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	fb02 f303 	mul.w	r3, r2, r3
 8001d92:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8001d94:	4b0a      	ldr	r3, [pc, #40]	; (8001dc0 <ReturnTimeElapsed+0x7c>)
 8001d96:	781b      	ldrb	r3, [r3, #0]
 8001d98:	461a      	mov	r2, r3
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	40d3      	lsrs	r3, r2
 8001d9e:	607b      	str	r3, [r7, #4]
 8001da0:	e001      	b.n	8001da6 <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8001da2:	2300      	movs	r3, #0
 8001da4:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	b29b      	uxth	r3, r3
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	3708      	adds	r7, #8
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	20000a0c 	.word	0x20000a0c
 8001db8:	20000a14 	.word	0x20000a14
 8001dbc:	20000a12 	.word	0x20000a12
 8001dc0:	20000a11 	.word	0x20000a11

08001dc4 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b082      	sub	sp, #8
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	4603      	mov	r3, r0
 8001dcc:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 8001dce:	88fb      	ldrh	r3, [r7, #6]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d108      	bne.n	8001de6 <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8001dd4:	f7ff fdc2 	bl	800195c <ReadRtcSsrValue>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	4a21      	ldr	r2, [pc, #132]	; (8001e60 <RestartWakeupCounter+0x9c>)
 8001ddc:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001dde:	2003      	movs	r0, #3
 8001de0:	f001 fccf 	bl	8003782 <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8001de4:	e039      	b.n	8001e5a <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8001de6:	88fb      	ldrh	r3, [r7, #6]
 8001de8:	2b01      	cmp	r3, #1
 8001dea:	d803      	bhi.n	8001df4 <RestartWakeupCounter+0x30>
 8001dec:	4b1d      	ldr	r3, [pc, #116]	; (8001e64 <RestartWakeupCounter+0xa0>)
 8001dee:	781b      	ldrb	r3, [r3, #0]
 8001df0:	2b01      	cmp	r3, #1
 8001df2:	d002      	beq.n	8001dfa <RestartWakeupCounter+0x36>
      Value -= 1;
 8001df4:	88fb      	ldrh	r3, [r7, #6]
 8001df6:	3b01      	subs	r3, #1
 8001df8:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8001dfa:	bf00      	nop
 8001dfc:	4b1a      	ldr	r3, [pc, #104]	; (8001e68 <RestartWakeupCounter+0xa4>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	68db      	ldr	r3, [r3, #12]
 8001e02:	f003 0304 	and.w	r3, r3, #4
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d0f8      	beq.n	8001dfc <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001e0a:	4b17      	ldr	r3, [pc, #92]	; (8001e68 <RestartWakeupCounter+0xa4>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	b2da      	uxtb	r2, r3
 8001e12:	4b15      	ldr	r3, [pc, #84]	; (8001e68 <RestartWakeupCounter+0xa4>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001e1a:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001e1c:	4b13      	ldr	r3, [pc, #76]	; (8001e6c <RestartWakeupCounter+0xa8>)
 8001e1e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001e22:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001e24:	2003      	movs	r0, #3
 8001e26:	f001 fcba 	bl	800379e <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8001e2a:	4b11      	ldr	r3, [pc, #68]	; (8001e70 <RestartWakeupCounter+0xac>)
 8001e2c:	695b      	ldr	r3, [r3, #20]
 8001e2e:	0c1b      	lsrs	r3, r3, #16
 8001e30:	041b      	lsls	r3, r3, #16
 8001e32:	88fa      	ldrh	r2, [r7, #6]
 8001e34:	490e      	ldr	r1, [pc, #56]	; (8001e70 <RestartWakeupCounter+0xac>)
 8001e36:	4313      	orrs	r3, r2
 8001e38:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8001e3a:	f7ff fd8f 	bl	800195c <ReadRtcSsrValue>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	4a07      	ldr	r2, [pc, #28]	; (8001e60 <RestartWakeupCounter+0x9c>)
 8001e42:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 8001e44:	4b08      	ldr	r3, [pc, #32]	; (8001e68 <RestartWakeupCounter+0xa4>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	689a      	ldr	r2, [r3, #8]
 8001e4a:	4b07      	ldr	r3, [pc, #28]	; (8001e68 <RestartWakeupCounter+0xa4>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001e52:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8001e54:	f3af 8000 	nop.w
  return ;
 8001e58:	bf00      	nop
}
 8001e5a:	3708      	adds	r7, #8
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	20000a0c 	.word	0x20000a0c
 8001e64:	20000a11 	.word	0x20000a11
 8001e68:	20000ae0 	.word	0x20000ae0
 8001e6c:	58000800 	.word	0x58000800
 8001e70:	40002800 	.word	0x40002800

08001e74 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b084      	sub	sp, #16
 8001e78:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8001e7a:	4b45      	ldr	r3, [pc, #276]	; (8001f90 <RescheduleTimerList+0x11c>)
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e86:	d107      	bne.n	8001e98 <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8001e88:	bf00      	nop
 8001e8a:	4b42      	ldr	r3, [pc, #264]	; (8001f94 <RescheduleTimerList+0x120>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	68db      	ldr	r3, [r3, #12]
 8001e90:	f003 0304 	and.w	r3, r3, #4
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d1f8      	bne.n	8001e8a <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8001e98:	4b3e      	ldr	r3, [pc, #248]	; (8001f94 <RescheduleTimerList+0x120>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	689a      	ldr	r2, [r3, #8]
 8001e9e:	4b3d      	ldr	r3, [pc, #244]	; (8001f94 <RescheduleTimerList+0x120>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ea6:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8001ea8:	4b3b      	ldr	r3, [pc, #236]	; (8001f98 <RescheduleTimerList+0x124>)
 8001eaa:	781b      	ldrb	r3, [r3, #0]
 8001eac:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8001eae:	7bfa      	ldrb	r2, [r7, #15]
 8001eb0:	493a      	ldr	r1, [pc, #232]	; (8001f9c <RescheduleTimerList+0x128>)
 8001eb2:	4613      	mov	r3, r2
 8001eb4:	005b      	lsls	r3, r3, #1
 8001eb6:	4413      	add	r3, r2
 8001eb8:	00db      	lsls	r3, r3, #3
 8001eba:	440b      	add	r3, r1
 8001ebc:	3308      	adds	r3, #8
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8001ec2:	f7ff ff3f 	bl	8001d44 <ReturnTimeElapsed>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8001eca:	88fb      	ldrh	r3, [r7, #6]
 8001ecc:	68ba      	ldr	r2, [r7, #8]
 8001ece:	429a      	cmp	r2, r3
 8001ed0:	d205      	bcs.n	8001ede <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001ed6:	4b32      	ldr	r3, [pc, #200]	; (8001fa0 <RescheduleTimerList+0x12c>)
 8001ed8:	2201      	movs	r2, #1
 8001eda:	701a      	strb	r2, [r3, #0]
 8001edc:	e04d      	b.n	8001f7a <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8001ede:	88fb      	ldrh	r3, [r7, #6]
 8001ee0:	4a30      	ldr	r2, [pc, #192]	; (8001fa4 <RescheduleTimerList+0x130>)
 8001ee2:	8812      	ldrh	r2, [r2, #0]
 8001ee4:	b292      	uxth	r2, r2
 8001ee6:	4413      	add	r3, r2
 8001ee8:	461a      	mov	r2, r3
 8001eea:	68bb      	ldr	r3, [r7, #8]
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d906      	bls.n	8001efe <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8001ef0:	4b2c      	ldr	r3, [pc, #176]	; (8001fa4 <RescheduleTimerList+0x130>)
 8001ef2:	881b      	ldrh	r3, [r3, #0]
 8001ef4:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8001ef6:	4b2a      	ldr	r3, [pc, #168]	; (8001fa0 <RescheduleTimerList+0x12c>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	701a      	strb	r2, [r3, #0]
 8001efc:	e03d      	b.n	8001f7a <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8001efe:	68bb      	ldr	r3, [r7, #8]
 8001f00:	b29a      	uxth	r2, r3
 8001f02:	88fb      	ldrh	r3, [r7, #6]
 8001f04:	1ad3      	subs	r3, r2, r3
 8001f06:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001f08:	4b25      	ldr	r3, [pc, #148]	; (8001fa0 <RescheduleTimerList+0x12c>)
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001f0e:	e034      	b.n	8001f7a <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8001f10:	7bfa      	ldrb	r2, [r7, #15]
 8001f12:	4922      	ldr	r1, [pc, #136]	; (8001f9c <RescheduleTimerList+0x128>)
 8001f14:	4613      	mov	r3, r2
 8001f16:	005b      	lsls	r3, r3, #1
 8001f18:	4413      	add	r3, r2
 8001f1a:	00db      	lsls	r3, r3, #3
 8001f1c:	440b      	add	r3, r1
 8001f1e:	3308      	adds	r3, #8
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	88fb      	ldrh	r3, [r7, #6]
 8001f24:	429a      	cmp	r2, r3
 8001f26:	d20a      	bcs.n	8001f3e <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8001f28:	7bfa      	ldrb	r2, [r7, #15]
 8001f2a:	491c      	ldr	r1, [pc, #112]	; (8001f9c <RescheduleTimerList+0x128>)
 8001f2c:	4613      	mov	r3, r2
 8001f2e:	005b      	lsls	r3, r3, #1
 8001f30:	4413      	add	r3, r2
 8001f32:	00db      	lsls	r3, r3, #3
 8001f34:	440b      	add	r3, r1
 8001f36:	3308      	adds	r3, #8
 8001f38:	2200      	movs	r2, #0
 8001f3a:	601a      	str	r2, [r3, #0]
 8001f3c:	e013      	b.n	8001f66 <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8001f3e:	7bfa      	ldrb	r2, [r7, #15]
 8001f40:	4916      	ldr	r1, [pc, #88]	; (8001f9c <RescheduleTimerList+0x128>)
 8001f42:	4613      	mov	r3, r2
 8001f44:	005b      	lsls	r3, r3, #1
 8001f46:	4413      	add	r3, r2
 8001f48:	00db      	lsls	r3, r3, #3
 8001f4a:	440b      	add	r3, r1
 8001f4c:	3308      	adds	r3, #8
 8001f4e:	6819      	ldr	r1, [r3, #0]
 8001f50:	88fb      	ldrh	r3, [r7, #6]
 8001f52:	7bfa      	ldrb	r2, [r7, #15]
 8001f54:	1ac9      	subs	r1, r1, r3
 8001f56:	4811      	ldr	r0, [pc, #68]	; (8001f9c <RescheduleTimerList+0x128>)
 8001f58:	4613      	mov	r3, r2
 8001f5a:	005b      	lsls	r3, r3, #1
 8001f5c:	4413      	add	r3, r2
 8001f5e:	00db      	lsls	r3, r3, #3
 8001f60:	4403      	add	r3, r0
 8001f62:	3308      	adds	r3, #8
 8001f64:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8001f66:	7bfa      	ldrb	r2, [r7, #15]
 8001f68:	490c      	ldr	r1, [pc, #48]	; (8001f9c <RescheduleTimerList+0x128>)
 8001f6a:	4613      	mov	r3, r2
 8001f6c:	005b      	lsls	r3, r3, #1
 8001f6e:	4413      	add	r3, r2
 8001f70:	00db      	lsls	r3, r3, #3
 8001f72:	440b      	add	r3, r1
 8001f74:	3315      	adds	r3, #21
 8001f76:	781b      	ldrb	r3, [r3, #0]
 8001f78:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001f7a:	7bfb      	ldrb	r3, [r7, #15]
 8001f7c:	2b06      	cmp	r3, #6
 8001f7e:	d1c7      	bne.n	8001f10 <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8001f80:	89bb      	ldrh	r3, [r7, #12]
 8001f82:	4618      	mov	r0, r3
 8001f84:	f7ff ff1e 	bl	8001dc4 <RestartWakeupCounter>

  return ;
 8001f88:	bf00      	nop
}
 8001f8a:	3710      	adds	r7, #16
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}
 8001f90:	40002800 	.word	0x40002800
 8001f94:	20000ae0 	.word	0x20000ae0
 8001f98:	20000a08 	.word	0x20000a08
 8001f9c:	20000978 	.word	0x20000978
 8001fa0:	20000a10 	.word	0x20000a10
 8001fa4:	20000a16 	.word	0x20000a16

08001fa8 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b08a      	sub	sp, #40	; 0x28
 8001fac:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001fae:	f3ef 8310 	mrs	r3, PRIMASK
 8001fb2:	617b      	str	r3, [r7, #20]
  return(result);
 8001fb4:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001fb6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8001fb8:	b672      	cpsid	i
}
 8001fba:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001fbc:	4b59      	ldr	r3, [pc, #356]	; (8002124 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	22ca      	movs	r2, #202	; 0xca
 8001fc2:	625a      	str	r2, [r3, #36]	; 0x24
 8001fc4:	4b57      	ldr	r3, [pc, #348]	; (8002124 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	2253      	movs	r2, #83	; 0x53
 8001fca:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 8001fcc:	4b55      	ldr	r3, [pc, #340]	; (8002124 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	689a      	ldr	r2, [r3, #8]
 8001fd2:	4b54      	ldr	r3, [pc, #336]	; (8002124 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001fda:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8001fdc:	4b52      	ldr	r3, [pc, #328]	; (8002128 <HW_TS_RTC_Wakeup_Handler+0x180>)
 8001fde:	781b      	ldrb	r3, [r3, #0]
 8001fe0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8001fe4:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001fe8:	4950      	ldr	r1, [pc, #320]	; (800212c <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001fea:	4613      	mov	r3, r2
 8001fec:	005b      	lsls	r3, r3, #1
 8001fee:	4413      	add	r3, r2
 8001ff0:	00db      	lsls	r3, r3, #3
 8001ff2:	440b      	add	r3, r1
 8001ff4:	330c      	adds	r3, #12
 8001ff6:	781b      	ldrb	r3, [r3, #0]
 8001ff8:	b2db      	uxtb	r3, r3
 8001ffa:	2b02      	cmp	r3, #2
 8001ffc:	d16e      	bne.n	80020dc <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8001ffe:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002002:	494a      	ldr	r1, [pc, #296]	; (800212c <HW_TS_RTC_Wakeup_Handler+0x184>)
 8002004:	4613      	mov	r3, r2
 8002006:	005b      	lsls	r3, r3, #1
 8002008:	4413      	add	r3, r2
 800200a:	00db      	lsls	r3, r3, #3
 800200c:	440b      	add	r3, r1
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8002012:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002016:	4945      	ldr	r1, [pc, #276]	; (800212c <HW_TS_RTC_Wakeup_Handler+0x184>)
 8002018:	4613      	mov	r3, r2
 800201a:	005b      	lsls	r3, r3, #1
 800201c:	4413      	add	r3, r2
 800201e:	00db      	lsls	r3, r3, #3
 8002020:	440b      	add	r3, r1
 8002022:	3310      	adds	r3, #16
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8002028:	4b41      	ldr	r3, [pc, #260]	; (8002130 <HW_TS_RTC_Wakeup_Handler+0x188>)
 800202a:	781b      	ldrb	r3, [r3, #0]
 800202c:	b2db      	uxtb	r3, r3
 800202e:	2b00      	cmp	r3, #0
 8002030:	d04c      	beq.n	80020cc <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8002032:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002036:	493d      	ldr	r1, [pc, #244]	; (800212c <HW_TS_RTC_Wakeup_Handler+0x184>)
 8002038:	4613      	mov	r3, r2
 800203a:	005b      	lsls	r3, r3, #1
 800203c:	4413      	add	r3, r2
 800203e:	00db      	lsls	r3, r3, #3
 8002040:	440b      	add	r3, r1
 8002042:	330d      	adds	r3, #13
 8002044:	781b      	ldrb	r3, [r3, #0]
 8002046:	b2db      	uxtb	r3, r3
 8002048:	2b01      	cmp	r3, #1
 800204a:	d124      	bne.n	8002096 <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 800204c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002050:	2101      	movs	r1, #1
 8002052:	4618      	mov	r0, r3
 8002054:	f7ff fdf2 	bl	8001c3c <UnlinkTimer>
 8002058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800205a:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800205c:	693b      	ldr	r3, [r7, #16]
 800205e:	f383 8810 	msr	PRIMASK, r3
}
 8002062:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8002064:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002068:	4930      	ldr	r1, [pc, #192]	; (800212c <HW_TS_RTC_Wakeup_Handler+0x184>)
 800206a:	4613      	mov	r3, r2
 800206c:	005b      	lsls	r3, r3, #1
 800206e:	4413      	add	r3, r2
 8002070:	00db      	lsls	r3, r3, #3
 8002072:	440b      	add	r3, r1
 8002074:	3304      	adds	r3, #4
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800207c:	4611      	mov	r1, r2
 800207e:	4618      	mov	r0, r3
 8002080:	f000 f9b8 	bl	80023f4 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002084:	4b27      	ldr	r3, [pc, #156]	; (8002124 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	22ca      	movs	r2, #202	; 0xca
 800208a:	625a      	str	r2, [r3, #36]	; 0x24
 800208c:	4b25      	ldr	r3, [pc, #148]	; (8002124 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	2253      	movs	r2, #83	; 0x53
 8002092:	625a      	str	r2, [r3, #36]	; 0x24
 8002094:	e012      	b.n	80020bc <HW_TS_RTC_Wakeup_Handler+0x114>
 8002096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002098:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	f383 8810 	msr	PRIMASK, r3
}
 80020a0:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 80020a2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80020a6:	4618      	mov	r0, r3
 80020a8:	f000 f920 	bl	80022ec <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80020ac:	4b1d      	ldr	r3, [pc, #116]	; (8002124 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	22ca      	movs	r2, #202	; 0xca
 80020b2:	625a      	str	r2, [r3, #36]	; 0x24
 80020b4:	4b1b      	ldr	r3, [pc, #108]	; (8002124 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	2253      	movs	r2, #83	; 0x53
 80020ba:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 80020bc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80020c0:	69fa      	ldr	r2, [r7, #28]
 80020c2:	4619      	mov	r1, r3
 80020c4:	69b8      	ldr	r0, [r7, #24]
 80020c6:	f000 fa1b 	bl	8002500 <HW_TS_RTC_Int_AppNot>
 80020ca:	e022      	b.n	8002112 <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 80020cc:	f7ff fed2 	bl	8001e74 <RescheduleTimerList>
 80020d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	f383 8810 	msr	PRIMASK, r3
}
 80020da:	e01a      	b.n	8002112 <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 80020dc:	bf00      	nop
 80020de:	4b11      	ldr	r3, [pc, #68]	; (8002124 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	68db      	ldr	r3, [r3, #12]
 80020e4:	f003 0304 	and.w	r3, r3, #4
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d0f8      	beq.n	80020de <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80020ec:	4b0d      	ldr	r3, [pc, #52]	; (8002124 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	68db      	ldr	r3, [r3, #12]
 80020f2:	b2da      	uxtb	r2, r3
 80020f4:	4b0b      	ldr	r3, [pc, #44]	; (8002124 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80020fc:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80020fe:	4b0d      	ldr	r3, [pc, #52]	; (8002134 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8002100:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002104:	60da      	str	r2, [r3, #12]
 8002106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002108:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	f383 8810 	msr	PRIMASK, r3
}
 8002110:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8002112:	4b04      	ldr	r3, [pc, #16]	; (8002124 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	22ff      	movs	r2, #255	; 0xff
 8002118:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 800211a:	bf00      	nop
}
 800211c:	3728      	adds	r7, #40	; 0x28
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	20000ae0 	.word	0x20000ae0
 8002128:	20000a08 	.word	0x20000a08
 800212c:	20000978 	.word	0x20000978
 8002130:	20000a10 	.word	0x20000a10
 8002134:	58000800 	.word	0x58000800

08002138 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b088      	sub	sp, #32
 800213c:	af00      	add	r7, sp, #0
 800213e:	4603      	mov	r3, r0
 8002140:	6039      	str	r1, [r7, #0]
 8002142:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002144:	4b5e      	ldr	r3, [pc, #376]	; (80022c0 <HW_TS_Init+0x188>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	22ca      	movs	r2, #202	; 0xca
 800214a:	625a      	str	r2, [r3, #36]	; 0x24
 800214c:	4b5c      	ldr	r3, [pc, #368]	; (80022c0 <HW_TS_Init+0x188>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	2253      	movs	r2, #83	; 0x53
 8002152:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002154:	4b5b      	ldr	r3, [pc, #364]	; (80022c4 <HW_TS_Init+0x18c>)
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	4a5a      	ldr	r2, [pc, #360]	; (80022c4 <HW_TS_Init+0x18c>)
 800215a:	f043 0320 	orr.w	r3, r3, #32
 800215e:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8002160:	4b58      	ldr	r3, [pc, #352]	; (80022c4 <HW_TS_Init+0x18c>)
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	b2db      	uxtb	r3, r3
 8002166:	f003 0307 	and.w	r3, r3, #7
 800216a:	b2db      	uxtb	r3, r3
 800216c:	f1c3 0304 	rsb	r3, r3, #4
 8002170:	b2da      	uxtb	r2, r3
 8002172:	4b55      	ldr	r3, [pc, #340]	; (80022c8 <HW_TS_Init+0x190>)
 8002174:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8002176:	4b53      	ldr	r3, [pc, #332]	; (80022c4 <HW_TS_Init+0x18c>)
 8002178:	691b      	ldr	r3, [r3, #16]
 800217a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800217e:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 8002182:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002184:	693a      	ldr	r2, [r7, #16]
 8002186:	fa92 f2a2 	rbit	r2, r2
 800218a:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800218c:	68fa      	ldr	r2, [r7, #12]
 800218e:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002190:	697a      	ldr	r2, [r7, #20]
 8002192:	2a00      	cmp	r2, #0
 8002194:	d101      	bne.n	800219a <HW_TS_Init+0x62>
  {
    return 32U;
 8002196:	2220      	movs	r2, #32
 8002198:	e003      	b.n	80021a2 <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 800219a:	697a      	ldr	r2, [r7, #20]
 800219c:	fab2 f282 	clz	r2, r2
 80021a0:	b2d2      	uxtb	r2, r2
 80021a2:	40d3      	lsrs	r3, r2
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	3301      	adds	r3, #1
 80021a8:	b2da      	uxtb	r2, r3
 80021aa:	4b48      	ldr	r3, [pc, #288]	; (80022cc <HW_TS_Init+0x194>)
 80021ac:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 80021ae:	4b45      	ldr	r3, [pc, #276]	; (80022c4 <HW_TS_Init+0x18c>)
 80021b0:	691b      	ldr	r3, [r3, #16]
 80021b2:	b29b      	uxth	r3, r3
 80021b4:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80021b8:	b29b      	uxth	r3, r3
 80021ba:	3301      	adds	r3, #1
 80021bc:	b29a      	uxth	r2, r3
 80021be:	4b44      	ldr	r3, [pc, #272]	; (80022d0 <HW_TS_Init+0x198>)
 80021c0:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 80021c2:	4b43      	ldr	r3, [pc, #268]	; (80022d0 <HW_TS_Init+0x198>)
 80021c4:	881b      	ldrh	r3, [r3, #0]
 80021c6:	3b01      	subs	r3, #1
 80021c8:	4a40      	ldr	r2, [pc, #256]	; (80022cc <HW_TS_Init+0x194>)
 80021ca:	7812      	ldrb	r2, [r2, #0]
 80021cc:	fb02 f303 	mul.w	r3, r2, r3
 80021d0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80021d4:	4a3c      	ldr	r2, [pc, #240]	; (80022c8 <HW_TS_Init+0x190>)
 80021d6:	7812      	ldrb	r2, [r2, #0]
 80021d8:	40d3      	lsrs	r3, r2
 80021da:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 80021dc:	69bb      	ldr	r3, [r7, #24]
 80021de:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d904      	bls.n	80021f0 <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 80021e6:	4b3b      	ldr	r3, [pc, #236]	; (80022d4 <HW_TS_Init+0x19c>)
 80021e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80021ec:	801a      	strh	r2, [r3, #0]
 80021ee:	e003      	b.n	80021f8 <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 80021f0:	69bb      	ldr	r3, [r7, #24]
 80021f2:	b29a      	uxth	r2, r3
 80021f4:	4b37      	ldr	r3, [pc, #220]	; (80022d4 <HW_TS_Init+0x19c>)
 80021f6:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80021f8:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80021fc:	f7ff fb9c 	bl	8001938 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8002200:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002204:	f7ff fb84 	bl	8001910 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8002208:	79fb      	ldrb	r3, [r7, #7]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d13d      	bne.n	800228a <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 800220e:	4b32      	ldr	r3, [pc, #200]	; (80022d8 <HW_TS_Init+0x1a0>)
 8002210:	2201      	movs	r2, #1
 8002212:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8002214:	4b31      	ldr	r3, [pc, #196]	; (80022dc <HW_TS_Init+0x1a4>)
 8002216:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800221a:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 800221c:	2300      	movs	r3, #0
 800221e:	77fb      	strb	r3, [r7, #31]
 8002220:	e00c      	b.n	800223c <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8002222:	7ffa      	ldrb	r2, [r7, #31]
 8002224:	492e      	ldr	r1, [pc, #184]	; (80022e0 <HW_TS_Init+0x1a8>)
 8002226:	4613      	mov	r3, r2
 8002228:	005b      	lsls	r3, r3, #1
 800222a:	4413      	add	r3, r2
 800222c:	00db      	lsls	r3, r3, #3
 800222e:	440b      	add	r3, r1
 8002230:	330c      	adds	r3, #12
 8002232:	2200      	movs	r2, #0
 8002234:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8002236:	7ffb      	ldrb	r3, [r7, #31]
 8002238:	3301      	adds	r3, #1
 800223a:	77fb      	strb	r3, [r7, #31]
 800223c:	7ffb      	ldrb	r3, [r7, #31]
 800223e:	2b05      	cmp	r3, #5
 8002240:	d9ef      	bls.n	8002222 <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8002242:	4b28      	ldr	r3, [pc, #160]	; (80022e4 <HW_TS_Init+0x1ac>)
 8002244:	2206      	movs	r2, #6
 8002246:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 8002248:	4b1d      	ldr	r3, [pc, #116]	; (80022c0 <HW_TS_Init+0x188>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	689a      	ldr	r2, [r3, #8]
 800224e:	4b1c      	ldr	r3, [pc, #112]	; (80022c0 <HW_TS_Init+0x188>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002256:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8002258:	4b19      	ldr	r3, [pc, #100]	; (80022c0 <HW_TS_Init+0x188>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	68db      	ldr	r3, [r3, #12]
 800225e:	b2da      	uxtb	r2, r3
 8002260:	4b17      	ldr	r3, [pc, #92]	; (80022c0 <HW_TS_Init+0x188>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8002268:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 800226a:	4b1f      	ldr	r3, [pc, #124]	; (80022e8 <HW_TS_Init+0x1b0>)
 800226c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002270:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8002272:	2003      	movs	r0, #3
 8002274:	f001 fa93 	bl	800379e <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8002278:	4b11      	ldr	r3, [pc, #68]	; (80022c0 <HW_TS_Init+0x188>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	689a      	ldr	r2, [r3, #8]
 800227e:	4b10      	ldr	r3, [pc, #64]	; (80022c0 <HW_TS_Init+0x188>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002286:	609a      	str	r2, [r3, #8]
 8002288:	e009      	b.n	800229e <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 800228a:	4b0d      	ldr	r3, [pc, #52]	; (80022c0 <HW_TS_Init+0x188>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	68db      	ldr	r3, [r3, #12]
 8002290:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002294:	2b00      	cmp	r3, #0
 8002296:	d002      	beq.n	800229e <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8002298:	2003      	movs	r0, #3
 800229a:	f001 fa72 	bl	8003782 <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 800229e:	4b08      	ldr	r3, [pc, #32]	; (80022c0 <HW_TS_Init+0x188>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	22ff      	movs	r2, #255	; 0xff
 80022a4:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 80022a6:	2200      	movs	r2, #0
 80022a8:	2103      	movs	r1, #3
 80022aa:	2003      	movs	r0, #3
 80022ac:	f001 fa27 	bl	80036fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80022b0:	2003      	movs	r0, #3
 80022b2:	f001 fa3e 	bl	8003732 <HAL_NVIC_EnableIRQ>

  return;
 80022b6:	bf00      	nop
}
 80022b8:	3720      	adds	r7, #32
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	20000ae0 	.word	0x20000ae0
 80022c4:	40002800 	.word	0x40002800
 80022c8:	20000a11 	.word	0x20000a11
 80022cc:	20000a12 	.word	0x20000a12
 80022d0:	20000a14 	.word	0x20000a14
 80022d4:	20000a16 	.word	0x20000a16
 80022d8:	20000a10 	.word	0x20000a10
 80022dc:	20000a0c 	.word	0x20000a0c
 80022e0:	20000978 	.word	0x20000978
 80022e4:	20000a08 	.word	0x20000a08
 80022e8:	58000800 	.word	0x58000800

080022ec <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b086      	sub	sp, #24
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	4603      	mov	r3, r0
 80022f4:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80022f6:	f3ef 8310 	mrs	r3, PRIMASK
 80022fa:	60fb      	str	r3, [r7, #12]
  return(result);
 80022fc:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80022fe:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8002300:	b672      	cpsid	i
}
 8002302:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8002304:	2003      	movs	r0, #3
 8002306:	f001 fa22 	bl	800374e <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 800230a:	4b34      	ldr	r3, [pc, #208]	; (80023dc <HW_TS_Stop+0xf0>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	22ca      	movs	r2, #202	; 0xca
 8002310:	625a      	str	r2, [r3, #36]	; 0x24
 8002312:	4b32      	ldr	r3, [pc, #200]	; (80023dc <HW_TS_Stop+0xf0>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	2253      	movs	r2, #83	; 0x53
 8002318:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 800231a:	79fa      	ldrb	r2, [r7, #7]
 800231c:	4930      	ldr	r1, [pc, #192]	; (80023e0 <HW_TS_Stop+0xf4>)
 800231e:	4613      	mov	r3, r2
 8002320:	005b      	lsls	r3, r3, #1
 8002322:	4413      	add	r3, r2
 8002324:	00db      	lsls	r3, r3, #3
 8002326:	440b      	add	r3, r1
 8002328:	330c      	adds	r3, #12
 800232a:	781b      	ldrb	r3, [r3, #0]
 800232c:	b2db      	uxtb	r3, r3
 800232e:	2b02      	cmp	r3, #2
 8002330:	d142      	bne.n	80023b8 <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8002332:	79fb      	ldrb	r3, [r7, #7]
 8002334:	2100      	movs	r1, #0
 8002336:	4618      	mov	r0, r3
 8002338:	f7ff fc80 	bl	8001c3c <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 800233c:	4b29      	ldr	r3, [pc, #164]	; (80023e4 <HW_TS_Stop+0xf8>)
 800233e:	781b      	ldrb	r3, [r3, #0]
 8002340:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002342:	7cfb      	ldrb	r3, [r7, #19]
 8002344:	2b06      	cmp	r3, #6
 8002346:	d12f      	bne.n	80023a8 <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8002348:	4b27      	ldr	r3, [pc, #156]	; (80023e8 <HW_TS_Stop+0xfc>)
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002350:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002354:	d107      	bne.n	8002366 <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8002356:	bf00      	nop
 8002358:	4b20      	ldr	r3, [pc, #128]	; (80023dc <HW_TS_Stop+0xf0>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	68db      	ldr	r3, [r3, #12]
 800235e:	f003 0304 	and.w	r3, r3, #4
 8002362:	2b00      	cmp	r3, #0
 8002364:	d1f8      	bne.n	8002358 <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8002366:	4b1d      	ldr	r3, [pc, #116]	; (80023dc <HW_TS_Stop+0xf0>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	689a      	ldr	r2, [r3, #8]
 800236c:	4b1b      	ldr	r3, [pc, #108]	; (80023dc <HW_TS_Stop+0xf0>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002374:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8002376:	bf00      	nop
 8002378:	4b18      	ldr	r3, [pc, #96]	; (80023dc <HW_TS_Stop+0xf0>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	68db      	ldr	r3, [r3, #12]
 800237e:	f003 0304 	and.w	r3, r3, #4
 8002382:	2b00      	cmp	r3, #0
 8002384:	d0f8      	beq.n	8002378 <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8002386:	4b15      	ldr	r3, [pc, #84]	; (80023dc <HW_TS_Stop+0xf0>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	68db      	ldr	r3, [r3, #12]
 800238c:	b2da      	uxtb	r2, r3
 800238e:	4b13      	ldr	r3, [pc, #76]	; (80023dc <HW_TS_Stop+0xf0>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8002396:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8002398:	4b14      	ldr	r3, [pc, #80]	; (80023ec <HW_TS_Stop+0x100>)
 800239a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800239e:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 80023a0:	2003      	movs	r0, #3
 80023a2:	f001 f9fc 	bl	800379e <HAL_NVIC_ClearPendingIRQ>
 80023a6:	e007      	b.n	80023b8 <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80023a8:	4b11      	ldr	r3, [pc, #68]	; (80023f0 <HW_TS_Stop+0x104>)
 80023aa:	781b      	ldrb	r3, [r3, #0]
 80023ac:	b2db      	uxtb	r3, r3
 80023ae:	7cfa      	ldrb	r2, [r7, #19]
 80023b0:	429a      	cmp	r2, r3
 80023b2:	d001      	beq.n	80023b8 <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 80023b4:	f7ff fd5e 	bl	8001e74 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80023b8:	4b08      	ldr	r3, [pc, #32]	; (80023dc <HW_TS_Stop+0xf0>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	22ff      	movs	r2, #255	; 0xff
 80023be:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80023c0:	2003      	movs	r0, #3
 80023c2:	f001 f9b6 	bl	8003732 <HAL_NVIC_EnableIRQ>
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	f383 8810 	msr	PRIMASK, r3
}
 80023d0:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80023d2:	bf00      	nop
}
 80023d4:	3718      	adds	r7, #24
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	20000ae0 	.word	0x20000ae0
 80023e0:	20000978 	.word	0x20000978
 80023e4:	20000a08 	.word	0x20000a08
 80023e8:	40002800 	.word	0x40002800
 80023ec:	58000800 	.word	0x58000800
 80023f0:	20000a09 	.word	0x20000a09

080023f4 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b086      	sub	sp, #24
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	4603      	mov	r3, r0
 80023fc:	6039      	str	r1, [r7, #0]
 80023fe:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8002400:	79fa      	ldrb	r2, [r7, #7]
 8002402:	493b      	ldr	r1, [pc, #236]	; (80024f0 <HW_TS_Start+0xfc>)
 8002404:	4613      	mov	r3, r2
 8002406:	005b      	lsls	r3, r3, #1
 8002408:	4413      	add	r3, r2
 800240a:	00db      	lsls	r3, r3, #3
 800240c:	440b      	add	r3, r1
 800240e:	330c      	adds	r3, #12
 8002410:	781b      	ldrb	r3, [r3, #0]
 8002412:	b2db      	uxtb	r3, r3
 8002414:	2b02      	cmp	r3, #2
 8002416:	d103      	bne.n	8002420 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8002418:	79fb      	ldrb	r3, [r7, #7]
 800241a:	4618      	mov	r0, r3
 800241c:	f7ff ff66 	bl	80022ec <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002420:	f3ef 8310 	mrs	r3, PRIMASK
 8002424:	60fb      	str	r3, [r7, #12]
  return(result);
 8002426:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8002428:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800242a:	b672      	cpsid	i
}
 800242c:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 800242e:	2003      	movs	r0, #3
 8002430:	f001 f98d 	bl	800374e <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002434:	4b2f      	ldr	r3, [pc, #188]	; (80024f4 <HW_TS_Start+0x100>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	22ca      	movs	r2, #202	; 0xca
 800243a:	625a      	str	r2, [r3, #36]	; 0x24
 800243c:	4b2d      	ldr	r3, [pc, #180]	; (80024f4 <HW_TS_Start+0x100>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	2253      	movs	r2, #83	; 0x53
 8002442:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8002444:	79fa      	ldrb	r2, [r7, #7]
 8002446:	492a      	ldr	r1, [pc, #168]	; (80024f0 <HW_TS_Start+0xfc>)
 8002448:	4613      	mov	r3, r2
 800244a:	005b      	lsls	r3, r3, #1
 800244c:	4413      	add	r3, r2
 800244e:	00db      	lsls	r3, r3, #3
 8002450:	440b      	add	r3, r1
 8002452:	330c      	adds	r3, #12
 8002454:	2202      	movs	r2, #2
 8002456:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8002458:	79fa      	ldrb	r2, [r7, #7]
 800245a:	4925      	ldr	r1, [pc, #148]	; (80024f0 <HW_TS_Start+0xfc>)
 800245c:	4613      	mov	r3, r2
 800245e:	005b      	lsls	r3, r3, #1
 8002460:	4413      	add	r3, r2
 8002462:	00db      	lsls	r3, r3, #3
 8002464:	440b      	add	r3, r1
 8002466:	3308      	adds	r3, #8
 8002468:	683a      	ldr	r2, [r7, #0]
 800246a:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 800246c:	79fa      	ldrb	r2, [r7, #7]
 800246e:	4920      	ldr	r1, [pc, #128]	; (80024f0 <HW_TS_Start+0xfc>)
 8002470:	4613      	mov	r3, r2
 8002472:	005b      	lsls	r3, r3, #1
 8002474:	4413      	add	r3, r2
 8002476:	00db      	lsls	r3, r3, #3
 8002478:	440b      	add	r3, r1
 800247a:	3304      	adds	r3, #4
 800247c:	683a      	ldr	r2, [r7, #0]
 800247e:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8002480:	79fb      	ldrb	r3, [r7, #7]
 8002482:	4618      	mov	r0, r3
 8002484:	f7ff fb30 	bl	8001ae8 <linkTimer>
 8002488:	4603      	mov	r3, r0
 800248a:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 800248c:	4b1a      	ldr	r3, [pc, #104]	; (80024f8 <HW_TS_Start+0x104>)
 800248e:	781b      	ldrb	r3, [r3, #0]
 8002490:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8002492:	4b1a      	ldr	r3, [pc, #104]	; (80024fc <HW_TS_Start+0x108>)
 8002494:	781b      	ldrb	r3, [r3, #0]
 8002496:	b2db      	uxtb	r3, r3
 8002498:	7c7a      	ldrb	r2, [r7, #17]
 800249a:	429a      	cmp	r2, r3
 800249c:	d002      	beq.n	80024a4 <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 800249e:	f7ff fce9 	bl	8001e74 <RescheduleTimerList>
 80024a2:	e013      	b.n	80024cc <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 80024a4:	79fa      	ldrb	r2, [r7, #7]
 80024a6:	4912      	ldr	r1, [pc, #72]	; (80024f0 <HW_TS_Start+0xfc>)
 80024a8:	4613      	mov	r3, r2
 80024aa:	005b      	lsls	r3, r3, #1
 80024ac:	4413      	add	r3, r2
 80024ae:	00db      	lsls	r3, r3, #3
 80024b0:	440b      	add	r3, r1
 80024b2:	3308      	adds	r3, #8
 80024b4:	6819      	ldr	r1, [r3, #0]
 80024b6:	8a7b      	ldrh	r3, [r7, #18]
 80024b8:	79fa      	ldrb	r2, [r7, #7]
 80024ba:	1ac9      	subs	r1, r1, r3
 80024bc:	480c      	ldr	r0, [pc, #48]	; (80024f0 <HW_TS_Start+0xfc>)
 80024be:	4613      	mov	r3, r2
 80024c0:	005b      	lsls	r3, r3, #1
 80024c2:	4413      	add	r3, r2
 80024c4:	00db      	lsls	r3, r3, #3
 80024c6:	4403      	add	r3, r0
 80024c8:	3308      	adds	r3, #8
 80024ca:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80024cc:	4b09      	ldr	r3, [pc, #36]	; (80024f4 <HW_TS_Start+0x100>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	22ff      	movs	r2, #255	; 0xff
 80024d2:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80024d4:	2003      	movs	r0, #3
 80024d6:	f001 f92c 	bl	8003732 <HAL_NVIC_EnableIRQ>
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	f383 8810 	msr	PRIMASK, r3
}
 80024e4:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80024e6:	bf00      	nop
}
 80024e8:	3718      	adds	r7, #24
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	20000978 	.word	0x20000978
 80024f4:	20000ae0 	.word	0x20000ae0
 80024f8:	20000a08 	.word	0x20000a08
 80024fc:	20000a09 	.word	0x20000a09

08002500 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b084      	sub	sp, #16
 8002504:	af00      	add	r7, sp, #0
 8002506:	60f8      	str	r0, [r7, #12]
 8002508:	460b      	mov	r3, r1
 800250a:	607a      	str	r2, [r7, #4]
 800250c:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	4798      	blx	r3

  return;
 8002512:	bf00      	nop
}
 8002514:	3710      	adds	r7, #16
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}

0800251a <LL_RCC_LSE_SetDriveCapability>:
{
 800251a:	b480      	push	{r7}
 800251c:	b083      	sub	sp, #12
 800251e:	af00      	add	r7, sp, #0
 8002520:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8002522:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002526:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800252a:	f023 0218 	bic.w	r2, r3, #24
 800252e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	4313      	orrs	r3, r2
 8002536:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800253a:	bf00      	nop
 800253c:	370c      	adds	r7, #12
 800253e:	46bd      	mov	sp, r7
 8002540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002544:	4770      	bx	lr

08002546 <LL_AHB1_GRP1_EnableClock>:
{
 8002546:	b480      	push	{r7}
 8002548:	b085      	sub	sp, #20
 800254a:	af00      	add	r7, sp, #0
 800254c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 800254e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002552:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002554:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	4313      	orrs	r3, r2
 800255c:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800255e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002562:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	4013      	ands	r3, r2
 8002568:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800256a:	68fb      	ldr	r3, [r7, #12]
}
 800256c:	bf00      	nop
 800256e:	3714      	adds	r7, #20
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr

08002578 <LL_AHB2_GRP1_EnableClock>:
{
 8002578:	b480      	push	{r7}
 800257a:	b085      	sub	sp, #20
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002580:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002584:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002586:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	4313      	orrs	r3, r2
 800258e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002590:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002594:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	4013      	ands	r3, r2
 800259a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800259c:	68fb      	ldr	r3, [r7, #12]
}
 800259e:	bf00      	nop
 80025a0:	3714      	adds	r7, #20
 80025a2:	46bd      	mov	sp, r7
 80025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a8:	4770      	bx	lr
	...

080025ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b0b4      	sub	sp, #208	; 0xd0
 80025b0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80025b2:	f000 fed7 	bl	8003364 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 80025b6:	f7fe ffd3 	bl	8001560 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80025ba:	f000 f893 	bl	80026e4 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80025be:	f000 f8f3 	bl	80027a8 <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 80025c2:	f000 f951 	bl	8002868 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80025c6:	f000 fa71 	bl	8002aac <MX_GPIO_Init>
  MX_DMA_Init();
 80025ca:	f000 fa55 	bl	8002a78 <MX_DMA_Init>
  MX_RTC_Init();
 80025ce:	f000 f993 	bl	80028f8 <MX_RTC_Init>
  MX_I2C1_Init();
 80025d2:	f000 f909 	bl	80027e8 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80025d6:	f000 fa01 	bl	80029dc <MX_USART1_UART_Init>
  MX_LPTIM1_Init();
 80025da:	f000 f959 	bl	8002890 <MX_LPTIM1_Init>
  MX_SPI1_Init();
 80025de:	f000 f9bf 	bl	8002960 <MX_SPI1_Init>
  MX_RF_Init();
 80025e2:	f000 f981 	bl	80028e8 <MX_RF_Init>
  /* USER CODE BEGIN 2 */

  /* Set up heart rate sensor */
  uint8_t status;									//see BH1780GLC.h for err codes

  printf("Configuring PPG sensor...");
 80025e6:	4834      	ldr	r0, [pc, #208]	; (80026b8 <main+0x10c>)
 80025e8:	f009 ffe4 	bl	800c5b4 <iprintf>
  HAL_Delay(10);									//wait as a precaution
 80025ec:	200a      	movs	r0, #10
 80025ee:	f7ff f92c 	bl	800184a <HAL_Delay>
  status = BH1790GLC_init(&hrm, &hi2c1);			//configure sensor
 80025f2:	4932      	ldr	r1, [pc, #200]	; (80026bc <main+0x110>)
 80025f4:	4832      	ldr	r0, [pc, #200]	; (80026c0 <main+0x114>)
 80025f6:	f7fe f979 	bl	80008ec <BH1790GLC_init>
 80025fa:	4603      	mov	r3, r0
 80025fc:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
  if(status != 0){
 8002600:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 8002604:	2b00      	cmp	r3, #0
 8002606:	d009      	beq.n	800261c <main+0x70>
	  printf("Error configuring sensor. Status code: %d\n\r", status);
 8002608:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 800260c:	4619      	mov	r1, r3
 800260e:	482d      	ldr	r0, [pc, #180]	; (80026c4 <main+0x118>)
 8002610:	f009 ffd0 	bl	800c5b4 <iprintf>
	  sensorReady = 0;
 8002614:	4b2c      	ldr	r3, [pc, #176]	; (80026c8 <main+0x11c>)
 8002616:	2200      	movs	r2, #0
 8002618:	701a      	strb	r2, [r3, #0]
 800261a:	e008      	b.n	800262e <main+0x82>
  }else{
	  printf("Sensor configured successfully. Status code: %d\n\r", status);
 800261c:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 8002620:	4619      	mov	r1, r3
 8002622:	482a      	ldr	r0, [pc, #168]	; (80026cc <main+0x120>)
 8002624:	f009 ffc6 	bl	800c5b4 <iprintf>
	  sensorReady = 1;
 8002628:	4b27      	ldr	r3, [pc, #156]	; (80026c8 <main+0x11c>)
 800262a:	2201      	movs	r2, #1
 800262c:	701a      	strb	r2, [r3, #0]
  }

  /* Set up timer */
  if(HAL_LPTIM_TimeOut_Start_IT(&hlptim1, PERIOD, TIMEOUT) != HAL_OK){  //pointer to the handler, period, timeout val to start the timer
 800262e:	2200      	movs	r2, #0
 8002630:	f44f 6183 	mov.w	r1, #1048	; 0x418
 8002634:	4826      	ldr	r0, [pc, #152]	; (80026d0 <main+0x124>)
 8002636:	f002 fd09 	bl	800504c <HAL_LPTIM_TimeOut_Start_IT>
 800263a:	4603      	mov	r3, r0
 800263c:	2b00      	cmp	r3, #0
 800263e:	d001      	beq.n	8002644 <main+0x98>
	  Error_Handler();
 8002640:	f000 fab0 	bl	8002ba4 <Error_Handler>
  }

  /* Set up IMU */
  printf("Configuring IMU...");
 8002644:	4823      	ldr	r0, [pc, #140]	; (80026d4 <main+0x128>)
 8002646:	f009 ffb5 	bl	800c5b4 <iprintf>
  HAL_Delay(10);
 800264a:	200a      	movs	r0, #10
 800264c:	f7ff f8fd 	bl	800184a <HAL_Delay>
  ICM_SelectBank(&imu, USER_BANK_0);
 8002650:	2100      	movs	r1, #0
 8002652:	4821      	ldr	r0, [pc, #132]	; (80026d8 <main+0x12c>)
 8002654:	f7fe fd70 	bl	8001138 <ICM_SelectBank>
  HAL_Delay(10);
 8002658:	200a      	movs	r0, #10
 800265a:	f7ff f8f6 	bl	800184a <HAL_Delay>
  ICM_PowerOn(&imu, &hspi1);
 800265e:	491f      	ldr	r1, [pc, #124]	; (80026dc <main+0x130>)
 8002660:	481d      	ldr	r0, [pc, #116]	; (80026d8 <main+0x12c>)
 8002662:	f7fe fca3 	bl	8000fac <ICM_PowerOn>
  HAL_Delay(10);
 8002666:	200a      	movs	r0, #10
 8002668:	f7ff f8ef 	bl	800184a <HAL_Delay>


  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 800266c:	f7fe ff86 	bl	800157c <MX_APPE_Init>


  while (1)
  {
    /* USER CODE END WHILE */
    MX_APPE_Process();
 8002670:	f7ff f910 	bl	8001894 <MX_APPE_Process>

    /* USER CODE BEGIN 3 */

    if(sensorReady){
 8002674:	4b14      	ldr	r3, [pc, #80]	; (80026c8 <main+0x11c>)
 8002676:	781b      	ldrb	r3, [r3, #0]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d0f9      	beq.n	8002670 <main+0xc4>
    	sensorReady = BUSY;		//flag set back to READY in interrupt every 32 ms
 800267c:	4b12      	ldr	r3, [pc, #72]	; (80026c8 <main+0x11c>)
 800267e:	2200      	movs	r2, #0
 8002680:	701a      	strb	r2, [r3, #0]

        uint8_t err;

        err = get_val(&hrm);
 8002682:	480f      	ldr	r0, [pc, #60]	; (80026c0 <main+0x114>)
 8002684:	f7fe f9a1 	bl	80009ca <get_val>
 8002688:	4603      	mov	r3, r0
 800268a:	f887 30ce 	strb.w	r3, [r7, #206]	; 0xce
        if(err != 0){
 800268e:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 8002692:	2b00      	cmp	r3, #0
 8002694:	d006      	beq.n	80026a4 <main+0xf8>
        	printf("Could not read sensor. Error code: %d\n\r", err);
 8002696:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 800269a:	4619      	mov	r1, r3
 800269c:	4810      	ldr	r0, [pc, #64]	; (80026e0 <main+0x134>)
 800269e:	f009 ff89 	bl	800c5b4 <iprintf>
 80026a2:	e7e5      	b.n	8002670 <main+0xc4>
        }else{
        	if(add_sample(&hrm)==1){
 80026a4:	4806      	ldr	r0, [pc, #24]	; (80026c0 <main+0x114>)
 80026a6:	f7fe f9bb 	bl	8000a20 <add_sample>
 80026aa:	4603      	mov	r3, r0
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d1df      	bne.n	8002670 <main+0xc4>

        		//printf("HELLO\n");
        		ppg_calculate(&hrm);
 80026b0:	4803      	ldr	r0, [pc, #12]	; (80026c0 <main+0x114>)
 80026b2:	f7fe f9df 	bl	8000a74 <ppg_calculate>
    MX_APPE_Process();
 80026b6:	e7db      	b.n	8002670 <main+0xc4>
 80026b8:	0800d6c4 	.word	0x0800d6c4
 80026bc:	20000a18 	.word	0x20000a18
 80026c0:	20000cbc 	.word	0x20000cbc
 80026c4:	0800d6e0 	.word	0x0800d6e0
 80026c8:	200010c8 	.word	0x200010c8
 80026cc:	0800d70c 	.word	0x0800d70c
 80026d0:	20000aa8 	.word	0x20000aa8
 80026d4:	0800d740 	.word	0x0800d740
 80026d8:	200010b0 	.word	0x200010b0
 80026dc:	20000b04 	.word	0x20000b04
 80026e0:	0800d754 	.word	0x0800d754

080026e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b09a      	sub	sp, #104	; 0x68
 80026e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80026ea:	f107 0320 	add.w	r3, r7, #32
 80026ee:	2248      	movs	r2, #72	; 0x48
 80026f0:	2100      	movs	r1, #0
 80026f2:	4618      	mov	r0, r3
 80026f4:	f009 ff56 	bl	800c5a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80026f8:	1d3b      	adds	r3, r7, #4
 80026fa:	2200      	movs	r2, #0
 80026fc:	601a      	str	r2, [r3, #0]
 80026fe:	605a      	str	r2, [r3, #4]
 8002700:	609a      	str	r2, [r3, #8]
 8002702:	60da      	str	r2, [r3, #12]
 8002704:	611a      	str	r2, [r3, #16]
 8002706:	615a      	str	r2, [r3, #20]
 8002708:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800270a:	f002 ff13 	bl	8005534 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 800270e:	2010      	movs	r0, #16
 8002710:	f7ff ff03 	bl	800251a <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002714:	4b23      	ldr	r3, [pc, #140]	; (80027a4 <SystemClock_Config+0xc0>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800271c:	4a21      	ldr	r2, [pc, #132]	; (80027a4 <SystemClock_Config+0xc0>)
 800271e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002722:	6013      	str	r3, [r2, #0]
 8002724:	4b1f      	ldr	r3, [pc, #124]	; (80027a4 <SystemClock_Config+0xc0>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800272c:	603b      	str	r3, [r7, #0]
 800272e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8002730:	2327      	movs	r3, #39	; 0x27
 8002732:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002734:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002738:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800273a:	2301      	movs	r3, #1
 800273c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800273e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002742:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002744:	2301      	movs	r3, #1
 8002746:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002748:	2340      	movs	r3, #64	; 0x40
 800274a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800274c:	2300      	movs	r3, #0
 800274e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 8002750:	23a0      	movs	r3, #160	; 0xa0
 8002752:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002754:	2300      	movs	r3, #0
 8002756:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002758:	f107 0320 	add.w	r3, r7, #32
 800275c:	4618      	mov	r0, r3
 800275e:	f003 fa7d 	bl	8005c5c <HAL_RCC_OscConfig>
 8002762:	4603      	mov	r3, r0
 8002764:	2b00      	cmp	r3, #0
 8002766:	d001      	beq.n	800276c <SystemClock_Config+0x88>
  {
    Error_Handler();
 8002768:	f000 fa1c 	bl	8002ba4 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 800276c:	236f      	movs	r3, #111	; 0x6f
 800276e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8002770:	2300      	movs	r3, #0
 8002772:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002774:	2300      	movs	r3, #0
 8002776:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002778:	2300      	movs	r3, #0
 800277a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800277c:	2300      	movs	r3, #0
 800277e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8002780:	2300      	movs	r3, #0
 8002782:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8002784:	2300      	movs	r3, #0
 8002786:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002788:	1d3b      	adds	r3, r7, #4
 800278a:	2101      	movs	r1, #1
 800278c:	4618      	mov	r0, r3
 800278e:	f003 fdd9 	bl	8006344 <HAL_RCC_ClockConfig>
 8002792:	4603      	mov	r3, r0
 8002794:	2b00      	cmp	r3, #0
 8002796:	d001      	beq.n	800279c <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8002798:	f000 fa04 	bl	8002ba4 <Error_Handler>
  }
}
 800279c:	bf00      	nop
 800279e:	3768      	adds	r7, #104	; 0x68
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}
 80027a4:	58000400 	.word	0x58000400

080027a8 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b094      	sub	sp, #80	; 0x50
 80027ac:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80027ae:	463b      	mov	r3, r7
 80027b0:	2250      	movs	r2, #80	; 0x50
 80027b2:	2100      	movs	r1, #0
 80027b4:	4618      	mov	r0, r3
 80027b6:	f009 fef5 	bl	800c5a4 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 80027ba:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80027be:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 80027c0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80027c4:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 80027c6:	2300      	movs	r3, #0
 80027c8:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 80027ca:	2300      	movs	r3, #0
 80027cc:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80027ce:	463b      	mov	r3, r7
 80027d0:	4618      	mov	r0, r3
 80027d2:	f004 f9f4 	bl	8006bbe <HAL_RCCEx_PeriphCLKConfig>
 80027d6:	4603      	mov	r3, r0
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d001      	beq.n	80027e0 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 80027dc:	f000 f9e2 	bl	8002ba4 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 80027e0:	bf00      	nop
 80027e2:	3750      	adds	r7, #80	; 0x50
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}

080027e8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80027ec:	4b1b      	ldr	r3, [pc, #108]	; (800285c <MX_I2C1_Init+0x74>)
 80027ee:	4a1c      	ldr	r2, [pc, #112]	; (8002860 <MX_I2C1_Init+0x78>)
 80027f0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 80027f2:	4b1a      	ldr	r3, [pc, #104]	; (800285c <MX_I2C1_Init+0x74>)
 80027f4:	4a1b      	ldr	r2, [pc, #108]	; (8002864 <MX_I2C1_Init+0x7c>)
 80027f6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80027f8:	4b18      	ldr	r3, [pc, #96]	; (800285c <MX_I2C1_Init+0x74>)
 80027fa:	2200      	movs	r2, #0
 80027fc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80027fe:	4b17      	ldr	r3, [pc, #92]	; (800285c <MX_I2C1_Init+0x74>)
 8002800:	2201      	movs	r2, #1
 8002802:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002804:	4b15      	ldr	r3, [pc, #84]	; (800285c <MX_I2C1_Init+0x74>)
 8002806:	2200      	movs	r2, #0
 8002808:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800280a:	4b14      	ldr	r3, [pc, #80]	; (800285c <MX_I2C1_Init+0x74>)
 800280c:	2200      	movs	r2, #0
 800280e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002810:	4b12      	ldr	r3, [pc, #72]	; (800285c <MX_I2C1_Init+0x74>)
 8002812:	2200      	movs	r2, #0
 8002814:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002816:	4b11      	ldr	r3, [pc, #68]	; (800285c <MX_I2C1_Init+0x74>)
 8002818:	2200      	movs	r2, #0
 800281a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800281c:	4b0f      	ldr	r3, [pc, #60]	; (800285c <MX_I2C1_Init+0x74>)
 800281e:	2200      	movs	r2, #0
 8002820:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002822:	480e      	ldr	r0, [pc, #56]	; (800285c <MX_I2C1_Init+0x74>)
 8002824:	f001 fc4a 	bl	80040bc <HAL_I2C_Init>
 8002828:	4603      	mov	r3, r0
 800282a:	2b00      	cmp	r3, #0
 800282c:	d001      	beq.n	8002832 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800282e:	f000 f9b9 	bl	8002ba4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002832:	2100      	movs	r1, #0
 8002834:	4809      	ldr	r0, [pc, #36]	; (800285c <MX_I2C1_Init+0x74>)
 8002836:	f002 f9d1 	bl	8004bdc <HAL_I2CEx_ConfigAnalogFilter>
 800283a:	4603      	mov	r3, r0
 800283c:	2b00      	cmp	r3, #0
 800283e:	d001      	beq.n	8002844 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002840:	f000 f9b0 	bl	8002ba4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002844:	2100      	movs	r1, #0
 8002846:	4805      	ldr	r0, [pc, #20]	; (800285c <MX_I2C1_Init+0x74>)
 8002848:	f002 fa13 	bl	8004c72 <HAL_I2CEx_ConfigDigitalFilter>
 800284c:	4603      	mov	r3, r0
 800284e:	2b00      	cmp	r3, #0
 8002850:	d001      	beq.n	8002856 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002852:	f000 f9a7 	bl	8002ba4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002856:	bf00      	nop
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop
 800285c:	20000a18 	.word	0x20000a18
 8002860:	40005400 	.word	0x40005400
 8002864:	00707cbb 	.word	0x00707cbb

08002868 <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 800286c:	4b06      	ldr	r3, [pc, #24]	; (8002888 <MX_IPCC_Init+0x20>)
 800286e:	4a07      	ldr	r2, [pc, #28]	; (800288c <MX_IPCC_Init+0x24>)
 8002870:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 8002872:	4805      	ldr	r0, [pc, #20]	; (8002888 <MX_IPCC_Init+0x20>)
 8002874:	f002 fa4a 	bl	8004d0c <HAL_IPCC_Init>
 8002878:	4603      	mov	r3, r0
 800287a:	2b00      	cmp	r3, #0
 800287c:	d001      	beq.n	8002882 <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 800287e:	f000 f991 	bl	8002ba4 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 8002882:	bf00      	nop
 8002884:	bd80      	pop	{r7, pc}
 8002886:	bf00      	nop
 8002888:	20000a6c 	.word	0x20000a6c
 800288c:	58000c00 	.word	0x58000c00

08002890 <MX_LPTIM1_Init>:
  * @brief LPTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM1_Init(void)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 8002894:	4b12      	ldr	r3, [pc, #72]	; (80028e0 <MX_LPTIM1_Init+0x50>)
 8002896:	4a13      	ldr	r2, [pc, #76]	; (80028e4 <MX_LPTIM1_Init+0x54>)
 8002898:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 800289a:	4b11      	ldr	r3, [pc, #68]	; (80028e0 <MX_LPTIM1_Init+0x50>)
 800289c:	2200      	movs	r2, #0
 800289e:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 80028a0:	4b0f      	ldr	r3, [pc, #60]	; (80028e0 <MX_LPTIM1_Init+0x50>)
 80028a2:	2200      	movs	r2, #0
 80028a4:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 80028a6:	4b0e      	ldr	r3, [pc, #56]	; (80028e0 <MX_LPTIM1_Init+0x50>)
 80028a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80028ac:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 80028ae:	4b0c      	ldr	r3, [pc, #48]	; (80028e0 <MX_LPTIM1_Init+0x50>)
 80028b0:	2200      	movs	r2, #0
 80028b2:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 80028b4:	4b0a      	ldr	r3, [pc, #40]	; (80028e0 <MX_LPTIM1_Init+0x50>)
 80028b6:	2200      	movs	r2, #0
 80028b8:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 80028ba:	4b09      	ldr	r3, [pc, #36]	; (80028e0 <MX_LPTIM1_Init+0x50>)
 80028bc:	2200      	movs	r2, #0
 80028be:	629a      	str	r2, [r3, #40]	; 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 80028c0:	4b07      	ldr	r3, [pc, #28]	; (80028e0 <MX_LPTIM1_Init+0x50>)
 80028c2:	2200      	movs	r2, #0
 80028c4:	62da      	str	r2, [r3, #44]	; 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 80028c6:	4b06      	ldr	r3, [pc, #24]	; (80028e0 <MX_LPTIM1_Init+0x50>)
 80028c8:	2200      	movs	r2, #0
 80028ca:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 80028cc:	4804      	ldr	r0, [pc, #16]	; (80028e0 <MX_LPTIM1_Init+0x50>)
 80028ce:	f002 fb1b 	bl	8004f08 <HAL_LPTIM_Init>
 80028d2:	4603      	mov	r3, r0
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d001      	beq.n	80028dc <MX_LPTIM1_Init+0x4c>
  {
    Error_Handler();
 80028d8:	f000 f964 	bl	8002ba4 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 80028dc:	bf00      	nop
 80028de:	bd80      	pop	{r7, pc}
 80028e0:	20000aa8 	.word	0x20000aa8
 80028e4:	40007c00 	.word	0x40007c00

080028e8 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 80028e8:	b480      	push	{r7}
 80028ea:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 80028ec:	bf00      	nop
 80028ee:	46bd      	mov	sp, r7
 80028f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f4:	4770      	bx	lr
	...

080028f8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80028fc:	4b16      	ldr	r3, [pc, #88]	; (8002958 <MX_RTC_Init+0x60>)
 80028fe:	4a17      	ldr	r2, [pc, #92]	; (800295c <MX_RTC_Init+0x64>)
 8002900:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002902:	4b15      	ldr	r3, [pc, #84]	; (8002958 <MX_RTC_Init+0x60>)
 8002904:	2200      	movs	r2, #0
 8002906:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8002908:	4b13      	ldr	r3, [pc, #76]	; (8002958 <MX_RTC_Init+0x60>)
 800290a:	220f      	movs	r2, #15
 800290c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 800290e:	4b12      	ldr	r3, [pc, #72]	; (8002958 <MX_RTC_Init+0x60>)
 8002910:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8002914:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002916:	4b10      	ldr	r3, [pc, #64]	; (8002958 <MX_RTC_Init+0x60>)
 8002918:	2200      	movs	r2, #0
 800291a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800291c:	4b0e      	ldr	r3, [pc, #56]	; (8002958 <MX_RTC_Init+0x60>)
 800291e:	2200      	movs	r2, #0
 8002920:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002922:	4b0d      	ldr	r3, [pc, #52]	; (8002958 <MX_RTC_Init+0x60>)
 8002924:	2200      	movs	r2, #0
 8002926:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002928:	4b0b      	ldr	r3, [pc, #44]	; (8002958 <MX_RTC_Init+0x60>)
 800292a:	2200      	movs	r2, #0
 800292c:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800292e:	480a      	ldr	r0, [pc, #40]	; (8002958 <MX_RTC_Init+0x60>)
 8002930:	f004 fbcc 	bl	80070cc <HAL_RTC_Init>
 8002934:	4603      	mov	r3, r0
 8002936:	2b00      	cmp	r3, #0
 8002938:	d001      	beq.n	800293e <MX_RTC_Init+0x46>
  {
    Error_Handler();
 800293a:	f000 f933 	bl	8002ba4 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 800293e:	2200      	movs	r2, #0
 8002940:	2100      	movs	r1, #0
 8002942:	4805      	ldr	r0, [pc, #20]	; (8002958 <MX_RTC_Init+0x60>)
 8002944:	f004 fcc2 	bl	80072cc <HAL_RTCEx_SetWakeUpTimer_IT>
 8002948:	4603      	mov	r3, r0
 800294a:	2b00      	cmp	r3, #0
 800294c:	d001      	beq.n	8002952 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 800294e:	f000 f929 	bl	8002ba4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002952:	bf00      	nop
 8002954:	bd80      	pop	{r7, pc}
 8002956:	bf00      	nop
 8002958:	20000ae0 	.word	0x20000ae0
 800295c:	40002800 	.word	0x40002800

08002960 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002964:	4b1b      	ldr	r3, [pc, #108]	; (80029d4 <MX_SPI1_Init+0x74>)
 8002966:	4a1c      	ldr	r2, [pc, #112]	; (80029d8 <MX_SPI1_Init+0x78>)
 8002968:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800296a:	4b1a      	ldr	r3, [pc, #104]	; (80029d4 <MX_SPI1_Init+0x74>)
 800296c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002970:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002972:	4b18      	ldr	r3, [pc, #96]	; (80029d4 <MX_SPI1_Init+0x74>)
 8002974:	2200      	movs	r2, #0
 8002976:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002978:	4b16      	ldr	r3, [pc, #88]	; (80029d4 <MX_SPI1_Init+0x74>)
 800297a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800297e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002980:	4b14      	ldr	r3, [pc, #80]	; (80029d4 <MX_SPI1_Init+0x74>)
 8002982:	2200      	movs	r2, #0
 8002984:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002986:	4b13      	ldr	r3, [pc, #76]	; (80029d4 <MX_SPI1_Init+0x74>)
 8002988:	2201      	movs	r2, #1
 800298a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800298c:	4b11      	ldr	r3, [pc, #68]	; (80029d4 <MX_SPI1_Init+0x74>)
 800298e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002992:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002994:	4b0f      	ldr	r3, [pc, #60]	; (80029d4 <MX_SPI1_Init+0x74>)
 8002996:	2210      	movs	r2, #16
 8002998:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800299a:	4b0e      	ldr	r3, [pc, #56]	; (80029d4 <MX_SPI1_Init+0x74>)
 800299c:	2200      	movs	r2, #0
 800299e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80029a0:	4b0c      	ldr	r3, [pc, #48]	; (80029d4 <MX_SPI1_Init+0x74>)
 80029a2:	2200      	movs	r2, #0
 80029a4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80029a6:	4b0b      	ldr	r3, [pc, #44]	; (80029d4 <MX_SPI1_Init+0x74>)
 80029a8:	2200      	movs	r2, #0
 80029aa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80029ac:	4b09      	ldr	r3, [pc, #36]	; (80029d4 <MX_SPI1_Init+0x74>)
 80029ae:	2207      	movs	r2, #7
 80029b0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80029b2:	4b08      	ldr	r3, [pc, #32]	; (80029d4 <MX_SPI1_Init+0x74>)
 80029b4:	2200      	movs	r2, #0
 80029b6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80029b8:	4b06      	ldr	r3, [pc, #24]	; (80029d4 <MX_SPI1_Init+0x74>)
 80029ba:	2200      	movs	r2, #0
 80029bc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80029be:	4805      	ldr	r0, [pc, #20]	; (80029d4 <MX_SPI1_Init+0x74>)
 80029c0:	f004 fd40 	bl	8007444 <HAL_SPI_Init>
 80029c4:	4603      	mov	r3, r0
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d001      	beq.n	80029ce <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80029ca:	f000 f8eb 	bl	8002ba4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80029ce:	bf00      	nop
 80029d0:	bd80      	pop	{r7, pc}
 80029d2:	bf00      	nop
 80029d4:	20000b04 	.word	0x20000b04
 80029d8:	40013000 	.word	0x40013000

080029dc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80029e0:	4b23      	ldr	r3, [pc, #140]	; (8002a70 <MX_USART1_UART_Init+0x94>)
 80029e2:	4a24      	ldr	r2, [pc, #144]	; (8002a74 <MX_USART1_UART_Init+0x98>)
 80029e4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80029e6:	4b22      	ldr	r3, [pc, #136]	; (8002a70 <MX_USART1_UART_Init+0x94>)
 80029e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80029ec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80029ee:	4b20      	ldr	r3, [pc, #128]	; (8002a70 <MX_USART1_UART_Init+0x94>)
 80029f0:	2200      	movs	r2, #0
 80029f2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80029f4:	4b1e      	ldr	r3, [pc, #120]	; (8002a70 <MX_USART1_UART_Init+0x94>)
 80029f6:	2200      	movs	r2, #0
 80029f8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_ODD;
 80029fa:	4b1d      	ldr	r3, [pc, #116]	; (8002a70 <MX_USART1_UART_Init+0x94>)
 80029fc:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8002a00:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002a02:	4b1b      	ldr	r3, [pc, #108]	; (8002a70 <MX_USART1_UART_Init+0x94>)
 8002a04:	220c      	movs	r2, #12
 8002a06:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a08:	4b19      	ldr	r3, [pc, #100]	; (8002a70 <MX_USART1_UART_Init+0x94>)
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a0e:	4b18      	ldr	r3, [pc, #96]	; (8002a70 <MX_USART1_UART_Init+0x94>)
 8002a10:	2200      	movs	r2, #0
 8002a12:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002a14:	4b16      	ldr	r3, [pc, #88]	; (8002a70 <MX_USART1_UART_Init+0x94>)
 8002a16:	2200      	movs	r2, #0
 8002a18:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002a1a:	4b15      	ldr	r3, [pc, #84]	; (8002a70 <MX_USART1_UART_Init+0x94>)
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002a20:	4b13      	ldr	r3, [pc, #76]	; (8002a70 <MX_USART1_UART_Init+0x94>)
 8002a22:	2200      	movs	r2, #0
 8002a24:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002a26:	4812      	ldr	r0, [pc, #72]	; (8002a70 <MX_USART1_UART_Init+0x94>)
 8002a28:	f005 fdd2 	bl	80085d0 <HAL_UART_Init>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d001      	beq.n	8002a36 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8002a32:	f000 f8b7 	bl	8002ba4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002a36:	2100      	movs	r1, #0
 8002a38:	480d      	ldr	r0, [pc, #52]	; (8002a70 <MX_USART1_UART_Init+0x94>)
 8002a3a:	f006 fb21 	bl	8009080 <HAL_UARTEx_SetTxFifoThreshold>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d001      	beq.n	8002a48 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8002a44:	f000 f8ae 	bl	8002ba4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002a48:	2100      	movs	r1, #0
 8002a4a:	4809      	ldr	r0, [pc, #36]	; (8002a70 <MX_USART1_UART_Init+0x94>)
 8002a4c:	f006 fb56 	bl	80090fc <HAL_UARTEx_SetRxFifoThreshold>
 8002a50:	4603      	mov	r3, r0
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d001      	beq.n	8002a5a <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 8002a56:	f000 f8a5 	bl	8002ba4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002a5a:	4805      	ldr	r0, [pc, #20]	; (8002a70 <MX_USART1_UART_Init+0x94>)
 8002a5c:	f006 fad7 	bl	800900e <HAL_UARTEx_DisableFifoMode>
 8002a60:	4603      	mov	r3, r0
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d001      	beq.n	8002a6a <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 8002a66:	f000 f89d 	bl	8002ba4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002a6a:	bf00      	nop
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	20000c28 	.word	0x20000c28
 8002a74:	40013800 	.word	0x40013800

08002a78 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8002a7c:	2004      	movs	r0, #4
 8002a7e:	f7ff fd62 	bl	8002546 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002a82:	2001      	movs	r0, #1
 8002a84:	f7ff fd5f 	bl	8002546 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002a88:	2200      	movs	r2, #0
 8002a8a:	2100      	movs	r1, #0
 8002a8c:	200b      	movs	r0, #11
 8002a8e:	f000 fe36 	bl	80036fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002a92:	200b      	movs	r0, #11
 8002a94:	f000 fe4d 	bl	8003732 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8002a98:	2200      	movs	r2, #0
 8002a9a:	2100      	movs	r1, #0
 8002a9c:	200c      	movs	r0, #12
 8002a9e:	f000 fe2e 	bl	80036fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8002aa2:	200c      	movs	r0, #12
 8002aa4:	f000 fe45 	bl	8003732 <HAL_NVIC_EnableIRQ>

}
 8002aa8:	bf00      	nop
 8002aaa:	bd80      	pop	{r7, pc}

08002aac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b086      	sub	sp, #24
 8002ab0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ab2:	1d3b      	adds	r3, r7, #4
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	601a      	str	r2, [r3, #0]
 8002ab8:	605a      	str	r2, [r3, #4]
 8002aba:	609a      	str	r2, [r3, #8]
 8002abc:	60da      	str	r2, [r3, #12]
 8002abe:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ac0:	2004      	movs	r0, #4
 8002ac2:	f7ff fd59 	bl	8002578 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ac6:	2002      	movs	r0, #2
 8002ac8:	f7ff fd56 	bl	8002578 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002acc:	2001      	movs	r0, #1
 8002ace:	f7ff fd53 	bl	8002578 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ad2:	2008      	movs	r0, #8
 8002ad4:	f7ff fd50 	bl	8002578 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|GPIO_PIN_3|LD1_Pin, GPIO_PIN_RESET);
 8002ad8:	2200      	movs	r2, #0
 8002ada:	212b      	movs	r1, #43	; 0x2b
 8002adc:	481d      	ldr	r0, [pc, #116]	; (8002b54 <MX_GPIO_Init+0xa8>)
 8002ade:	f001 fab1 	bl	8004044 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002ae2:	2310      	movs	r3, #16
 8002ae4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002aea:	2301      	movs	r3, #1
 8002aec:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002aee:	1d3b      	adds	r3, r7, #4
 8002af0:	4619      	mov	r1, r3
 8002af2:	4819      	ldr	r0, [pc, #100]	; (8002b58 <MX_GPIO_Init+0xac>)
 8002af4:	f001 f936 	bl	8003d64 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin PB3 LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|GPIO_PIN_3|LD1_Pin;
 8002af8:	232b      	movs	r3, #43	; 0x2b
 8002afa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002afc:	2301      	movs	r3, #1
 8002afe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b00:	2300      	movs	r3, #0
 8002b02:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b04:	2300      	movs	r3, #0
 8002b06:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b08:	1d3b      	adds	r3, r7, #4
 8002b0a:	4619      	mov	r1, r3
 8002b0c:	4811      	ldr	r0, [pc, #68]	; (8002b54 <MX_GPIO_Init+0xa8>)
 8002b0e:	f001 f929 	bl	8003d64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002b12:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002b16:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b18:	2302      	movs	r3, #2
 8002b1a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b20:	2300      	movs	r3, #0
 8002b22:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8002b24:	230a      	movs	r3, #10
 8002b26:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b28:	1d3b      	adds	r3, r7, #4
 8002b2a:	4619      	mov	r1, r3
 8002b2c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b30:	f001 f918 	bl	8003d64 <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 8002b34:	2303      	movs	r3, #3
 8002b36:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002b40:	1d3b      	adds	r3, r7, #4
 8002b42:	4619      	mov	r1, r3
 8002b44:	4805      	ldr	r0, [pc, #20]	; (8002b5c <MX_GPIO_Init+0xb0>)
 8002b46:	f001 f90d 	bl	8003d64 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002b4a:	bf00      	nop
 8002b4c:	3718      	adds	r7, #24
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	bf00      	nop
 8002b54:	48000400 	.word	0x48000400
 8002b58:	48000800 	.word	0x48000800
 8002b5c:	48000c00 	.word	0x48000c00

08002b60 <HAL_LPTIM_CompareMatchCallback>:
/* USER CODE BEGIN 4 */

/*
 * Redefinition of the low power timer interrupt
 */
void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim){
 8002b60:	b480      	push	{r7}
 8002b62:	b083      	sub	sp, #12
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
	sensorReady = READY;
 8002b68:	4b04      	ldr	r3, [pc, #16]	; (8002b7c <HAL_LPTIM_CompareMatchCallback+0x1c>)
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	701a      	strb	r2, [r3, #0]
}
 8002b6e:	bf00      	nop
 8002b70:	370c      	adds	r7, #12
 8002b72:	46bd      	mov	sp, r7
 8002b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b78:	4770      	bx	lr
 8002b7a:	bf00      	nop
 8002b7c:	200010c8 	.word	0x200010c8

08002b80 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b082      	sub	sp, #8
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8002b88:	1d39      	adds	r1, r7, #4
 8002b8a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002b8e:	2201      	movs	r2, #1
 8002b90:	4803      	ldr	r0, [pc, #12]	; (8002ba0 <__io_putchar+0x20>)
 8002b92:	f005 fd6d 	bl	8008670 <HAL_UART_Transmit>

  return ch;
 8002b96:	687b      	ldr	r3, [r7, #4]
}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	3708      	adds	r7, #8
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}
 8002ba0:	20000c28 	.word	0x20000c28

08002ba4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002ba8:	b672      	cpsid	i
}
 8002baa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002bac:	e7fe      	b.n	8002bac <Error_Handler+0x8>

08002bae <LL_RCC_EnableRTC>:
{
 8002bae:	b480      	push	{r7}
 8002bb0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8002bb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002bbe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002bc2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002bc6:	bf00      	nop
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bce:	4770      	bx	lr

08002bd0 <LL_AHB2_GRP1_EnableClock>:
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b085      	sub	sp, #20
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002bd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bdc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002bde:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	4313      	orrs	r3, r2
 8002be6:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002be8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
}
 8002bf6:	bf00      	nop
 8002bf8:	3714      	adds	r7, #20
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c00:	4770      	bx	lr

08002c02 <LL_AHB3_GRP1_EnableClock>:
{
 8002c02:	b480      	push	{r7}
 8002c04:	b085      	sub	sp, #20
 8002c06:	af00      	add	r7, sp, #0
 8002c08:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8002c0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c0e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002c10:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	4313      	orrs	r3, r2
 8002c18:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8002c1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c1e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	4013      	ands	r3, r2
 8002c24:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002c26:	68fb      	ldr	r3, [r7, #12]
}
 8002c28:	bf00      	nop
 8002c2a:	3714      	adds	r7, #20
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c32:	4770      	bx	lr

08002c34 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b085      	sub	sp, #20
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002c3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c40:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002c42:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002c4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c50:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	4013      	ands	r3, r2
 8002c56:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002c58:	68fb      	ldr	r3, [r7, #12]
}
 8002c5a:	bf00      	nop
 8002c5c:	3714      	adds	r7, #20
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr

08002c66 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8002c66:	b480      	push	{r7}
 8002c68:	b085      	sub	sp, #20
 8002c6a:	af00      	add	r7, sp, #0
 8002c6c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8002c6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c72:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002c74:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002c7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c82:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	4013      	ands	r3, r2
 8002c88:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
}
 8002c8c:	bf00      	nop
 8002c8e:	3714      	adds	r7, #20
 8002c90:	46bd      	mov	sp, r7
 8002c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c96:	4770      	bx	lr

08002c98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8002c9c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002ca0:	f7ff ffaf 	bl	8002c02 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	2100      	movs	r1, #0
 8002ca8:	202e      	movs	r0, #46	; 0x2e
 8002caa:	f000 fd28 	bl	80036fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8002cae:	202e      	movs	r0, #46	; 0x2e
 8002cb0:	f000 fd3f 	bl	8003732 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002cb4:	bf00      	nop
 8002cb6:	bd80      	pop	{r7, pc}

08002cb8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b09c      	sub	sp, #112	; 0x70
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cc0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	601a      	str	r2, [r3, #0]
 8002cc8:	605a      	str	r2, [r3, #4]
 8002cca:	609a      	str	r2, [r3, #8]
 8002ccc:	60da      	str	r2, [r3, #12]
 8002cce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002cd0:	f107 030c 	add.w	r3, r7, #12
 8002cd4:	2250      	movs	r2, #80	; 0x50
 8002cd6:	2100      	movs	r1, #0
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f009 fc63 	bl	800c5a4 <memset>
  if(hi2c->Instance==I2C1)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a1b      	ldr	r2, [pc, #108]	; (8002d50 <HAL_I2C_MspInit+0x98>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d12e      	bne.n	8002d46 <HAL_I2C_MspInit+0x8e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002ce8:	2304      	movs	r3, #4
 8002cea:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002cec:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8002cf0:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002cf2:	f107 030c 	add.w	r3, r7, #12
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f003 ff61 	bl	8006bbe <HAL_RCCEx_PeriphCLKConfig>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d001      	beq.n	8002d06 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8002d02:	f7ff ff4f 	bl	8002ba4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d06:	2002      	movs	r0, #2
 8002d08:	f7ff ff62 	bl	8002bd0 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002d0c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002d10:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d12:	2312      	movs	r3, #18
 8002d14:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d16:	2300      	movs	r3, #0
 8002d18:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002d1e:	2304      	movs	r3, #4
 8002d20:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d22:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002d26:	4619      	mov	r1, r3
 8002d28:	480a      	ldr	r0, [pc, #40]	; (8002d54 <HAL_I2C_MspInit+0x9c>)
 8002d2a:	f001 f81b 	bl	8003d64 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002d2e:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8002d32:	f7ff ff7f 	bl	8002c34 <LL_APB1_GRP1_EnableClock>
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8002d36:	2200      	movs	r2, #0
 8002d38:	2100      	movs	r1, #0
 8002d3a:	201e      	movs	r0, #30
 8002d3c:	f000 fcdf 	bl	80036fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002d40:	201e      	movs	r0, #30
 8002d42:	f000 fcf6 	bl	8003732 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002d46:	bf00      	nop
 8002d48:	3770      	adds	r7, #112	; 0x70
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}
 8002d4e:	bf00      	nop
 8002d50:	40005400 	.word	0x40005400
 8002d54:	48000400 	.word	0x48000400

08002d58 <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b082      	sub	sp, #8
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a0d      	ldr	r2, [pc, #52]	; (8002d9c <HAL_IPCC_MspInit+0x44>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d113      	bne.n	8002d92 <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8002d6a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002d6e:	f7ff ff48 	bl	8002c02 <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 8002d72:	2200      	movs	r2, #0
 8002d74:	2100      	movs	r1, #0
 8002d76:	202c      	movs	r0, #44	; 0x2c
 8002d78:	f000 fcc1 	bl	80036fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8002d7c:	202c      	movs	r0, #44	; 0x2c
 8002d7e:	f000 fcd8 	bl	8003732 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 8002d82:	2200      	movs	r2, #0
 8002d84:	2100      	movs	r1, #0
 8002d86:	202d      	movs	r0, #45	; 0x2d
 8002d88:	f000 fcb9 	bl	80036fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8002d8c:	202d      	movs	r0, #45	; 0x2d
 8002d8e:	f000 fcd0 	bl	8003732 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 8002d92:	bf00      	nop
 8002d94:	3708      	adds	r7, #8
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}
 8002d9a:	bf00      	nop
 8002d9c:	58000c00 	.word	0x58000c00

08002da0 <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b096      	sub	sp, #88	; 0x58
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002da8:	f107 0308 	add.w	r3, r7, #8
 8002dac:	2250      	movs	r2, #80	; 0x50
 8002dae:	2100      	movs	r1, #0
 8002db0:	4618      	mov	r0, r3
 8002db2:	f009 fbf7 	bl	800c5a4 <memset>
  if(hlptim->Instance==LPTIM1)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a11      	ldr	r2, [pc, #68]	; (8002e00 <HAL_LPTIM_MspInit+0x60>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d11a      	bne.n	8002df6 <HAL_LPTIM_MspInit+0x56>

  /* USER CODE END LPTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 8002dc0:	2310      	movs	r3, #16
 8002dc2:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_LSE;
 8002dc4:	f04f 130c 	mov.w	r3, #786444	; 0xc000c
 8002dc8:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002dca:	f107 0308 	add.w	r3, r7, #8
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f003 fef5 	bl	8006bbe <HAL_RCCEx_PeriphCLKConfig>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d001      	beq.n	8002dde <HAL_LPTIM_MspInit+0x3e>
    {
      Error_Handler();
 8002dda:	f7ff fee3 	bl	8002ba4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 8002dde:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8002de2:	f7ff ff27 	bl	8002c34 <LL_APB1_GRP1_EnableClock>
    /* LPTIM1 interrupt Init */
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 0, 0);
 8002de6:	2200      	movs	r2, #0
 8002de8:	2100      	movs	r1, #0
 8002dea:	202f      	movs	r0, #47	; 0x2f
 8002dec:	f000 fc87 	bl	80036fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 8002df0:	202f      	movs	r0, #47	; 0x2f
 8002df2:	f000 fc9e 	bl	8003732 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }

}
 8002df6:	bf00      	nop
 8002df8:	3758      	adds	r7, #88	; 0x58
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}
 8002dfe:	bf00      	nop
 8002e00:	40007c00 	.word	0x40007c00

08002e04 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b096      	sub	sp, #88	; 0x58
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002e0c:	f107 0308 	add.w	r3, r7, #8
 8002e10:	2250      	movs	r2, #80	; 0x50
 8002e12:	2100      	movs	r1, #0
 8002e14:	4618      	mov	r0, r3
 8002e16:	f009 fbc5 	bl	800c5a4 <memset>
  if(hrtc->Instance==RTC)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a12      	ldr	r2, [pc, #72]	; (8002e68 <HAL_RTC_MspInit+0x64>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d11d      	bne.n	8002e60 <HAL_RTC_MspInit+0x5c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002e24:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002e28:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002e2a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e2e:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002e30:	f107 0308 	add.w	r3, r7, #8
 8002e34:	4618      	mov	r0, r3
 8002e36:	f003 fec2 	bl	8006bbe <HAL_RCCEx_PeriphCLKConfig>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d001      	beq.n	8002e44 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8002e40:	f7ff feb0 	bl	8002ba4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002e44:	f7ff feb3 	bl	8002bae <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8002e48:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002e4c:	f7ff fef2 	bl	8002c34 <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8002e50:	2200      	movs	r2, #0
 8002e52:	2100      	movs	r1, #0
 8002e54:	2003      	movs	r0, #3
 8002e56:	f000 fc52 	bl	80036fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8002e5a:	2003      	movs	r0, #3
 8002e5c:	f000 fc69 	bl	8003732 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002e60:	bf00      	nop
 8002e62:	3758      	adds	r7, #88	; 0x58
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}
 8002e68:	40002800 	.word	0x40002800

08002e6c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b088      	sub	sp, #32
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e74:	f107 030c 	add.w	r3, r7, #12
 8002e78:	2200      	movs	r2, #0
 8002e7a:	601a      	str	r2, [r3, #0]
 8002e7c:	605a      	str	r2, [r3, #4]
 8002e7e:	609a      	str	r2, [r3, #8]
 8002e80:	60da      	str	r2, [r3, #12]
 8002e82:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a3c      	ldr	r2, [pc, #240]	; (8002f7c <HAL_SPI_MspInit+0x110>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d171      	bne.n	8002f72 <HAL_SPI_MspInit+0x106>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002e8e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002e92:	f7ff fee8 	bl	8002c66 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e96:	2001      	movs	r0, #1
 8002e98:	f7ff fe9a 	bl	8002bd0 <LL_AHB2_GRP1_EnableClock>
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 8002e9c:	23c2      	movs	r3, #194	; 0xc2
 8002e9e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ea0:	2302      	movs	r3, #2
 8002ea2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002eac:	2305      	movs	r3, #5
 8002eae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002eb0:	f107 030c 	add.w	r3, r7, #12
 8002eb4:	4619      	mov	r1, r3
 8002eb6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002eba:	f000 ff53 	bl	8003d64 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel1;
 8002ebe:	4b30      	ldr	r3, [pc, #192]	; (8002f80 <HAL_SPI_MspInit+0x114>)
 8002ec0:	4a30      	ldr	r2, [pc, #192]	; (8002f84 <HAL_SPI_MspInit+0x118>)
 8002ec2:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8002ec4:	4b2e      	ldr	r3, [pc, #184]	; (8002f80 <HAL_SPI_MspInit+0x114>)
 8002ec6:	2206      	movs	r2, #6
 8002ec8:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002eca:	4b2d      	ldr	r3, [pc, #180]	; (8002f80 <HAL_SPI_MspInit+0x114>)
 8002ecc:	2200      	movs	r2, #0
 8002ece:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ed0:	4b2b      	ldr	r3, [pc, #172]	; (8002f80 <HAL_SPI_MspInit+0x114>)
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002ed6:	4b2a      	ldr	r3, [pc, #168]	; (8002f80 <HAL_SPI_MspInit+0x114>)
 8002ed8:	2280      	movs	r2, #128	; 0x80
 8002eda:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002edc:	4b28      	ldr	r3, [pc, #160]	; (8002f80 <HAL_SPI_MspInit+0x114>)
 8002ede:	2200      	movs	r2, #0
 8002ee0:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002ee2:	4b27      	ldr	r3, [pc, #156]	; (8002f80 <HAL_SPI_MspInit+0x114>)
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8002ee8:	4b25      	ldr	r3, [pc, #148]	; (8002f80 <HAL_SPI_MspInit+0x114>)
 8002eea:	2200      	movs	r2, #0
 8002eec:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002eee:	4b24      	ldr	r3, [pc, #144]	; (8002f80 <HAL_SPI_MspInit+0x114>)
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8002ef4:	4822      	ldr	r0, [pc, #136]	; (8002f80 <HAL_SPI_MspInit+0x114>)
 8002ef6:	f000 fc61 	bl	80037bc <HAL_DMA_Init>
 8002efa:	4603      	mov	r3, r0
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d001      	beq.n	8002f04 <HAL_SPI_MspInit+0x98>
    {
      Error_Handler();
 8002f00:	f7ff fe50 	bl	8002ba4 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	4a1e      	ldr	r2, [pc, #120]	; (8002f80 <HAL_SPI_MspInit+0x114>)
 8002f08:	659a      	str	r2, [r3, #88]	; 0x58
 8002f0a:	4a1d      	ldr	r2, [pc, #116]	; (8002f80 <HAL_SPI_MspInit+0x114>)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6293      	str	r3, [r2, #40]	; 0x28

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel2;
 8002f10:	4b1d      	ldr	r3, [pc, #116]	; (8002f88 <HAL_SPI_MspInit+0x11c>)
 8002f12:	4a1e      	ldr	r2, [pc, #120]	; (8002f8c <HAL_SPI_MspInit+0x120>)
 8002f14:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8002f16:	4b1c      	ldr	r3, [pc, #112]	; (8002f88 <HAL_SPI_MspInit+0x11c>)
 8002f18:	2207      	movs	r2, #7
 8002f1a:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002f1c:	4b1a      	ldr	r3, [pc, #104]	; (8002f88 <HAL_SPI_MspInit+0x11c>)
 8002f1e:	2210      	movs	r2, #16
 8002f20:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f22:	4b19      	ldr	r3, [pc, #100]	; (8002f88 <HAL_SPI_MspInit+0x11c>)
 8002f24:	2200      	movs	r2, #0
 8002f26:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002f28:	4b17      	ldr	r3, [pc, #92]	; (8002f88 <HAL_SPI_MspInit+0x11c>)
 8002f2a:	2280      	movs	r2, #128	; 0x80
 8002f2c:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002f2e:	4b16      	ldr	r3, [pc, #88]	; (8002f88 <HAL_SPI_MspInit+0x11c>)
 8002f30:	2200      	movs	r2, #0
 8002f32:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002f34:	4b14      	ldr	r3, [pc, #80]	; (8002f88 <HAL_SPI_MspInit+0x11c>)
 8002f36:	2200      	movs	r2, #0
 8002f38:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8002f3a:	4b13      	ldr	r3, [pc, #76]	; (8002f88 <HAL_SPI_MspInit+0x11c>)
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002f40:	4b11      	ldr	r3, [pc, #68]	; (8002f88 <HAL_SPI_MspInit+0x11c>)
 8002f42:	2200      	movs	r2, #0
 8002f44:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8002f46:	4810      	ldr	r0, [pc, #64]	; (8002f88 <HAL_SPI_MspInit+0x11c>)
 8002f48:	f000 fc38 	bl	80037bc <HAL_DMA_Init>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d001      	beq.n	8002f56 <HAL_SPI_MspInit+0xea>
    {
      Error_Handler();
 8002f52:	f7ff fe27 	bl	8002ba4 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	4a0b      	ldr	r2, [pc, #44]	; (8002f88 <HAL_SPI_MspInit+0x11c>)
 8002f5a:	655a      	str	r2, [r3, #84]	; 0x54
 8002f5c:	4a0a      	ldr	r2, [pc, #40]	; (8002f88 <HAL_SPI_MspInit+0x11c>)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6293      	str	r3, [r2, #40]	; 0x28

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8002f62:	2200      	movs	r2, #0
 8002f64:	2100      	movs	r1, #0
 8002f66:	2022      	movs	r0, #34	; 0x22
 8002f68:	f000 fbc9 	bl	80036fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8002f6c:	2022      	movs	r0, #34	; 0x22
 8002f6e:	f000 fbe0 	bl	8003732 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002f72:	bf00      	nop
 8002f74:	3720      	adds	r7, #32
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}
 8002f7a:	bf00      	nop
 8002f7c:	40013000 	.word	0x40013000
 8002f80:	20000b68 	.word	0x20000b68
 8002f84:	40020008 	.word	0x40020008
 8002f88:	20000bc8 	.word	0x20000bc8
 8002f8c:	4002001c 	.word	0x4002001c

08002f90 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b09c      	sub	sp, #112	; 0x70
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f98:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	601a      	str	r2, [r3, #0]
 8002fa0:	605a      	str	r2, [r3, #4]
 8002fa2:	609a      	str	r2, [r3, #8]
 8002fa4:	60da      	str	r2, [r3, #12]
 8002fa6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002fa8:	f107 030c 	add.w	r3, r7, #12
 8002fac:	2250      	movs	r2, #80	; 0x50
 8002fae:	2100      	movs	r1, #0
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	f009 faf7 	bl	800c5a4 <memset>
  if(huart->Instance==USART1)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a16      	ldr	r2, [pc, #88]	; (8003014 <HAL_UART_MspInit+0x84>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d124      	bne.n	800300a <HAL_UART_MspInit+0x7a>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002fc8:	f107 030c 	add.w	r3, r7, #12
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f003 fdf6 	bl	8006bbe <HAL_RCCEx_PeriphCLKConfig>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d001      	beq.n	8002fdc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002fd8:	f7ff fde4 	bl	8002ba4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002fdc:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002fe0:	f7ff fe41 	bl	8002c66 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fe4:	2002      	movs	r0, #2
 8002fe6:	f7ff fdf3 	bl	8002bd0 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8002fea:	23c0      	movs	r3, #192	; 0xc0
 8002fec:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fee:	2302      	movs	r3, #2
 8002ff0:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002ffa:	2307      	movs	r3, #7
 8002ffc:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ffe:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003002:	4619      	mov	r1, r3
 8003004:	4804      	ldr	r0, [pc, #16]	; (8003018 <HAL_UART_MspInit+0x88>)
 8003006:	f000 fead 	bl	8003d64 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800300a:	bf00      	nop
 800300c:	3770      	adds	r7, #112	; 0x70
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}
 8003012:	bf00      	nop
 8003014:	40013800 	.word	0x40013800
 8003018:	48000400 	.word	0x48000400

0800301c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800301c:	b480      	push	{r7}
 800301e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003020:	e7fe      	b.n	8003020 <NMI_Handler+0x4>

08003022 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003022:	b480      	push	{r7}
 8003024:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003026:	e7fe      	b.n	8003026 <HardFault_Handler+0x4>

08003028 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003028:	b480      	push	{r7}
 800302a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800302c:	e7fe      	b.n	800302c <MemManage_Handler+0x4>

0800302e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800302e:	b480      	push	{r7}
 8003030:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003032:	e7fe      	b.n	8003032 <BusFault_Handler+0x4>

08003034 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003034:	b480      	push	{r7}
 8003036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003038:	e7fe      	b.n	8003038 <UsageFault_Handler+0x4>

0800303a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800303a:	b480      	push	{r7}
 800303c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800303e:	bf00      	nop
 8003040:	46bd      	mov	sp, r7
 8003042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003046:	4770      	bx	lr

08003048 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003048:	b480      	push	{r7}
 800304a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800304c:	bf00      	nop
 800304e:	46bd      	mov	sp, r7
 8003050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003054:	4770      	bx	lr

08003056 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003056:	b480      	push	{r7}
 8003058:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800305a:	bf00      	nop
 800305c:	46bd      	mov	sp, r7
 800305e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003062:	4770      	bx	lr

08003064 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003068:	f000 f9d6 	bl	8003418 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800306c:	bf00      	nop
 800306e:	bd80      	pop	{r7, pc}

08003070 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8003074:	f7fe ff98 	bl	8001fa8 <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8003078:	bf00      	nop
 800307a:	bd80      	pop	{r7, pc}

0800307c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8003080:	4802      	ldr	r0, [pc, #8]	; (800308c <DMA1_Channel1_IRQHandler+0x10>)
 8003082:	f000 fd1d 	bl	8003ac0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003086:	bf00      	nop
 8003088:	bd80      	pop	{r7, pc}
 800308a:	bf00      	nop
 800308c:	20000b68 	.word	0x20000b68

08003090 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8003094:	4802      	ldr	r0, [pc, #8]	; (80030a0 <DMA1_Channel2_IRQHandler+0x10>)
 8003096:	f000 fd13 	bl	8003ac0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800309a:	bf00      	nop
 800309c:	bd80      	pop	{r7, pc}
 800309e:	bf00      	nop
 80030a0:	20000bc8 	.word	0x20000bc8

080030a4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80030a8:	4802      	ldr	r0, [pc, #8]	; (80030b4 <I2C1_EV_IRQHandler+0x10>)
 80030aa:	f001 fac5 	bl	8004638 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80030ae:	bf00      	nop
 80030b0:	bd80      	pop	{r7, pc}
 80030b2:	bf00      	nop
 80030b4:	20000a18 	.word	0x20000a18

080030b8 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80030bc:	4802      	ldr	r0, [pc, #8]	; (80030c8 <SPI1_IRQHandler+0x10>)
 80030be:	f004 fe09 	bl	8007cd4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80030c2:	bf00      	nop
 80030c4:	bd80      	pop	{r7, pc}
 80030c6:	bf00      	nop
 80030c8:	20000b04 	.word	0x20000b04

080030cc <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 80030d0:	f008 fe6c 	bl	800bdac <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 80030d4:	bf00      	nop
 80030d6:	bd80      	pop	{r7, pc}

080030d8 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 80030dc:	f008 fe9e 	bl	800be1c <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 80030e0:	bf00      	nop
 80030e2:	bd80      	pop	{r7, pc}

080030e4 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 80030e8:	f000 ffc4 	bl	8004074 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 80030ec:	bf00      	nop
 80030ee:	bd80      	pop	{r7, pc}

080030f0 <LPTIM1_IRQHandler>:

/**
  * @brief This function handles LPTIM1 global interrupt.
  */
void LPTIM1_IRQHandler(void)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM1_IRQn 0 */

  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 80030f4:	4802      	ldr	r0, [pc, #8]	; (8003100 <LPTIM1_IRQHandler+0x10>)
 80030f6:	f002 f82b 	bl	8005150 <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */

  /* USER CODE END LPTIM1_IRQn 1 */
}
 80030fa:	bf00      	nop
 80030fc:	bd80      	pop	{r7, pc}
 80030fe:	bf00      	nop
 8003100:	20000aa8 	.word	0x20000aa8

08003104 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b086      	sub	sp, #24
 8003108:	af00      	add	r7, sp, #0
 800310a:	60f8      	str	r0, [r7, #12]
 800310c:	60b9      	str	r1, [r7, #8]
 800310e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003110:	2300      	movs	r3, #0
 8003112:	617b      	str	r3, [r7, #20]
 8003114:	e00a      	b.n	800312c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003116:	f3af 8000 	nop.w
 800311a:	4601      	mov	r1, r0
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	1c5a      	adds	r2, r3, #1
 8003120:	60ba      	str	r2, [r7, #8]
 8003122:	b2ca      	uxtb	r2, r1
 8003124:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	3301      	adds	r3, #1
 800312a:	617b      	str	r3, [r7, #20]
 800312c:	697a      	ldr	r2, [r7, #20]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	429a      	cmp	r2, r3
 8003132:	dbf0      	blt.n	8003116 <_read+0x12>
  }

  return len;
 8003134:	687b      	ldr	r3, [r7, #4]
}
 8003136:	4618      	mov	r0, r3
 8003138:	3718      	adds	r7, #24
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}

0800313e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800313e:	b580      	push	{r7, lr}
 8003140:	b086      	sub	sp, #24
 8003142:	af00      	add	r7, sp, #0
 8003144:	60f8      	str	r0, [r7, #12]
 8003146:	60b9      	str	r1, [r7, #8]
 8003148:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800314a:	2300      	movs	r3, #0
 800314c:	617b      	str	r3, [r7, #20]
 800314e:	e009      	b.n	8003164 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	1c5a      	adds	r2, r3, #1
 8003154:	60ba      	str	r2, [r7, #8]
 8003156:	781b      	ldrb	r3, [r3, #0]
 8003158:	4618      	mov	r0, r3
 800315a:	f7ff fd11 	bl	8002b80 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800315e:	697b      	ldr	r3, [r7, #20]
 8003160:	3301      	adds	r3, #1
 8003162:	617b      	str	r3, [r7, #20]
 8003164:	697a      	ldr	r2, [r7, #20]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	429a      	cmp	r2, r3
 800316a:	dbf1      	blt.n	8003150 <_write+0x12>
  }
  return len;
 800316c:	687b      	ldr	r3, [r7, #4]
}
 800316e:	4618      	mov	r0, r3
 8003170:	3718      	adds	r7, #24
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}

08003176 <_close>:

int _close(int file)
{
 8003176:	b480      	push	{r7}
 8003178:	b083      	sub	sp, #12
 800317a:	af00      	add	r7, sp, #0
 800317c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800317e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003182:	4618      	mov	r0, r3
 8003184:	370c      	adds	r7, #12
 8003186:	46bd      	mov	sp, r7
 8003188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318c:	4770      	bx	lr

0800318e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800318e:	b480      	push	{r7}
 8003190:	b083      	sub	sp, #12
 8003192:	af00      	add	r7, sp, #0
 8003194:	6078      	str	r0, [r7, #4]
 8003196:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800319e:	605a      	str	r2, [r3, #4]
  return 0;
 80031a0:	2300      	movs	r3, #0
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	370c      	adds	r7, #12
 80031a6:	46bd      	mov	sp, r7
 80031a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ac:	4770      	bx	lr

080031ae <_isatty>:

int _isatty(int file)
{
 80031ae:	b480      	push	{r7}
 80031b0:	b083      	sub	sp, #12
 80031b2:	af00      	add	r7, sp, #0
 80031b4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80031b6:	2301      	movs	r3, #1
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	370c      	adds	r7, #12
 80031bc:	46bd      	mov	sp, r7
 80031be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c2:	4770      	bx	lr

080031c4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b085      	sub	sp, #20
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	60f8      	str	r0, [r7, #12]
 80031cc:	60b9      	str	r1, [r7, #8]
 80031ce:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80031d0:	2300      	movs	r3, #0
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	3714      	adds	r7, #20
 80031d6:	46bd      	mov	sp, r7
 80031d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031dc:	4770      	bx	lr
	...

080031e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b086      	sub	sp, #24
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80031e8:	4a14      	ldr	r2, [pc, #80]	; (800323c <_sbrk+0x5c>)
 80031ea:	4b15      	ldr	r3, [pc, #84]	; (8003240 <_sbrk+0x60>)
 80031ec:	1ad3      	subs	r3, r2, r3
 80031ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80031f4:	4b13      	ldr	r3, [pc, #76]	; (8003244 <_sbrk+0x64>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d102      	bne.n	8003202 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80031fc:	4b11      	ldr	r3, [pc, #68]	; (8003244 <_sbrk+0x64>)
 80031fe:	4a12      	ldr	r2, [pc, #72]	; (8003248 <_sbrk+0x68>)
 8003200:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003202:	4b10      	ldr	r3, [pc, #64]	; (8003244 <_sbrk+0x64>)
 8003204:	681a      	ldr	r2, [r3, #0]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	4413      	add	r3, r2
 800320a:	693a      	ldr	r2, [r7, #16]
 800320c:	429a      	cmp	r2, r3
 800320e:	d207      	bcs.n	8003220 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003210:	f009 f990 	bl	800c534 <__errno>
 8003214:	4603      	mov	r3, r0
 8003216:	220c      	movs	r2, #12
 8003218:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800321a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800321e:	e009      	b.n	8003234 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003220:	4b08      	ldr	r3, [pc, #32]	; (8003244 <_sbrk+0x64>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003226:	4b07      	ldr	r3, [pc, #28]	; (8003244 <_sbrk+0x64>)
 8003228:	681a      	ldr	r2, [r3, #0]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	4413      	add	r3, r2
 800322e:	4a05      	ldr	r2, [pc, #20]	; (8003244 <_sbrk+0x64>)
 8003230:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003232:	68fb      	ldr	r3, [r7, #12]
}
 8003234:	4618      	mov	r0, r3
 8003236:	3718      	adds	r7, #24
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}
 800323c:	20030000 	.word	0x20030000
 8003240:	00000400 	.word	0x00000400
 8003244:	200010cc 	.word	0x200010cc
 8003248:	20001290 	.word	0x20001290

0800324c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800324c:	b480      	push	{r7}
 800324e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8003250:	4b24      	ldr	r3, [pc, #144]	; (80032e4 <SystemInit+0x98>)
 8003252:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003256:	4a23      	ldr	r2, [pc, #140]	; (80032e4 <SystemInit+0x98>)
 8003258:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800325c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8003260:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800326a:	f043 0301 	orr.w	r3, r3, #1
 800326e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8003270:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003274:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8003278:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 800327a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003284:	4b18      	ldr	r3, [pc, #96]	; (80032e8 <SystemInit+0x9c>)
 8003286:	4013      	ands	r3, r2
 8003288:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 800328a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800328e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003292:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003296:	f023 0305 	bic.w	r3, r3, #5
 800329a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800329e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80032a6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80032aa:	f023 0301 	bic.w	r3, r3, #1
 80032ae:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 80032b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032b6:	4a0d      	ldr	r2, [pc, #52]	; (80032ec <SystemInit+0xa0>)
 80032b8:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 80032ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032be:	4a0b      	ldr	r2, [pc, #44]	; (80032ec <SystemInit+0xa0>)
 80032c0:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80032c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80032cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032d0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80032d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032d6:	2200      	movs	r2, #0
 80032d8:	619a      	str	r2, [r3, #24]
}
 80032da:	bf00      	nop
 80032dc:	46bd      	mov	sp, r7
 80032de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e2:	4770      	bx	lr
 80032e4:	e000ed00 	.word	0xe000ed00
 80032e8:	faf6fefb 	.word	0xfaf6fefb
 80032ec:	22041000 	.word	0x22041000

080032f0 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 80032f0:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80032f2:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80032f4:	3304      	adds	r3, #4

080032f6 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80032f6:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80032f8:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 80032fa:	d3f9      	bcc.n	80032f0 <CopyDataInit>
  bx lr
 80032fc:	4770      	bx	lr

080032fe <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 80032fe:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8003300:	3004      	adds	r0, #4

08003302 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8003302:	4288      	cmp	r0, r1
  bcc FillZerobss
 8003304:	d3fb      	bcc.n	80032fe <FillZerobss>
  bx lr
 8003306:	4770      	bx	lr

08003308 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003308:	480c      	ldr	r0, [pc, #48]	; (800333c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800330a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800330c:	f7ff ff9e 	bl	800324c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8003310:	480b      	ldr	r0, [pc, #44]	; (8003340 <LoopForever+0x6>)
 8003312:	490c      	ldr	r1, [pc, #48]	; (8003344 <LoopForever+0xa>)
 8003314:	4a0c      	ldr	r2, [pc, #48]	; (8003348 <LoopForever+0xe>)
 8003316:	2300      	movs	r3, #0
 8003318:	f7ff ffed 	bl	80032f6 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 800331c:	480b      	ldr	r0, [pc, #44]	; (800334c <LoopForever+0x12>)
 800331e:	490c      	ldr	r1, [pc, #48]	; (8003350 <LoopForever+0x16>)
 8003320:	4a0c      	ldr	r2, [pc, #48]	; (8003354 <LoopForever+0x1a>)
 8003322:	2300      	movs	r3, #0
 8003324:	f7ff ffe7 	bl	80032f6 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8003328:	480b      	ldr	r0, [pc, #44]	; (8003358 <LoopForever+0x1e>)
 800332a:	490c      	ldr	r1, [pc, #48]	; (800335c <LoopForever+0x22>)
 800332c:	2300      	movs	r3, #0
 800332e:	f7ff ffe8 	bl	8003302 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003332:	f009 f905 	bl	800c540 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8003336:	f7ff f939 	bl	80025ac <main>

0800333a <LoopForever>:

LoopForever:
  b LoopForever
 800333a:	e7fe      	b.n	800333a <LoopForever>
  ldr   r0, =_estack
 800333c:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8003340:	20000008 	.word	0x20000008
 8003344:	2000008c 	.word	0x2000008c
 8003348:	0800dac8 	.word	0x0800dac8
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 800334c:	200301e3 	.word	0x200301e3
 8003350:	200301e3 	.word	0x200301e3
 8003354:	0800e415 	.word	0x0800e415
  INIT_BSS _sbss, _ebss
 8003358:	2000095c 	.word	0x2000095c
 800335c:	20001290 	.word	0x20001290

08003360 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003360:	e7fe      	b.n	8003360 <ADC1_IRQHandler>
	...

08003364 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b082      	sub	sp, #8
 8003368:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800336a:	2300      	movs	r3, #0
 800336c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800336e:	4b0c      	ldr	r3, [pc, #48]	; (80033a0 <HAL_Init+0x3c>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a0b      	ldr	r2, [pc, #44]	; (80033a0 <HAL_Init+0x3c>)
 8003374:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003378:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800337a:	2003      	movs	r0, #3
 800337c:	f000 f9b4 	bl	80036e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003380:	2000      	movs	r0, #0
 8003382:	f000 f80f 	bl	80033a4 <HAL_InitTick>
 8003386:	4603      	mov	r3, r0
 8003388:	2b00      	cmp	r3, #0
 800338a:	d002      	beq.n	8003392 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800338c:	2301      	movs	r3, #1
 800338e:	71fb      	strb	r3, [r7, #7]
 8003390:	e001      	b.n	8003396 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003392:	f7ff fc81 	bl	8002c98 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003396:	79fb      	ldrb	r3, [r7, #7]
}
 8003398:	4618      	mov	r0, r3
 800339a:	3708      	adds	r7, #8
 800339c:	46bd      	mov	sp, r7
 800339e:	bd80      	pop	{r7, pc}
 80033a0:	58004000 	.word	0x58004000

080033a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b084      	sub	sp, #16
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80033ac:	2300      	movs	r3, #0
 80033ae:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 80033b0:	4b17      	ldr	r3, [pc, #92]	; (8003410 <HAL_InitTick+0x6c>)
 80033b2:	781b      	ldrb	r3, [r3, #0]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d024      	beq.n	8003402 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80033b8:	f003 f970 	bl	800669c <HAL_RCC_GetHCLKFreq>
 80033bc:	4602      	mov	r2, r0
 80033be:	4b14      	ldr	r3, [pc, #80]	; (8003410 <HAL_InitTick+0x6c>)
 80033c0:	781b      	ldrb	r3, [r3, #0]
 80033c2:	4619      	mov	r1, r3
 80033c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80033c8:	fbb3 f3f1 	udiv	r3, r3, r1
 80033cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80033d0:	4618      	mov	r0, r3
 80033d2:	f000 f9ca 	bl	800376a <HAL_SYSTICK_Config>
 80033d6:	4603      	mov	r3, r0
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d10f      	bne.n	80033fc <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2b0f      	cmp	r3, #15
 80033e0:	d809      	bhi.n	80033f6 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80033e2:	2200      	movs	r2, #0
 80033e4:	6879      	ldr	r1, [r7, #4]
 80033e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80033ea:	f000 f988 	bl	80036fe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80033ee:	4a09      	ldr	r2, [pc, #36]	; (8003414 <HAL_InitTick+0x70>)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6013      	str	r3, [r2, #0]
 80033f4:	e007      	b.n	8003406 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	73fb      	strb	r3, [r7, #15]
 80033fa:	e004      	b.n	8003406 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 80033fc:	2301      	movs	r3, #1
 80033fe:	73fb      	strb	r3, [r7, #15]
 8003400:	e001      	b.n	8003406 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003402:	2301      	movs	r3, #1
 8003404:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003406:	7bfb      	ldrb	r3, [r7, #15]
}
 8003408:	4618      	mov	r0, r3
 800340a:	3710      	adds	r7, #16
 800340c:	46bd      	mov	sp, r7
 800340e:	bd80      	pop	{r7, pc}
 8003410:	20000010 	.word	0x20000010
 8003414:	2000000c 	.word	0x2000000c

08003418 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003418:	b480      	push	{r7}
 800341a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800341c:	4b06      	ldr	r3, [pc, #24]	; (8003438 <HAL_IncTick+0x20>)
 800341e:	781b      	ldrb	r3, [r3, #0]
 8003420:	461a      	mov	r2, r3
 8003422:	4b06      	ldr	r3, [pc, #24]	; (800343c <HAL_IncTick+0x24>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4413      	add	r3, r2
 8003428:	4a04      	ldr	r2, [pc, #16]	; (800343c <HAL_IncTick+0x24>)
 800342a:	6013      	str	r3, [r2, #0]
}
 800342c:	bf00      	nop
 800342e:	46bd      	mov	sp, r7
 8003430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003434:	4770      	bx	lr
 8003436:	bf00      	nop
 8003438:	20000010 	.word	0x20000010
 800343c:	200010d0 	.word	0x200010d0

08003440 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003440:	b480      	push	{r7}
 8003442:	af00      	add	r7, sp, #0
  return uwTick;
 8003444:	4b03      	ldr	r3, [pc, #12]	; (8003454 <HAL_GetTick+0x14>)
 8003446:	681b      	ldr	r3, [r3, #0]
}
 8003448:	4618      	mov	r0, r3
 800344a:	46bd      	mov	sp, r7
 800344c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003450:	4770      	bx	lr
 8003452:	bf00      	nop
 8003454:	200010d0 	.word	0x200010d0

08003458 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8003458:	b480      	push	{r7}
 800345a:	af00      	add	r7, sp, #0
  return uwTickPrio;
 800345c:	4b03      	ldr	r3, [pc, #12]	; (800346c <HAL_GetTickPrio+0x14>)
 800345e:	681b      	ldr	r3, [r3, #0]
}
 8003460:	4618      	mov	r0, r3
 8003462:	46bd      	mov	sp, r7
 8003464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003468:	4770      	bx	lr
 800346a:	bf00      	nop
 800346c:	2000000c 	.word	0x2000000c

08003470 <HAL_GetTickFreq>:
/**
  * @brief Return tick frequency.
  * @retval tick period in Hz
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 8003470:	b480      	push	{r7}
 8003472:	af00      	add	r7, sp, #0
  return uwTickFreq;
 8003474:	4b03      	ldr	r3, [pc, #12]	; (8003484 <HAL_GetTickFreq+0x14>)
 8003476:	781b      	ldrb	r3, [r3, #0]
}
 8003478:	4618      	mov	r0, r3
 800347a:	46bd      	mov	sp, r7
 800347c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003480:	4770      	bx	lr
 8003482:	bf00      	nop
 8003484:	20000010 	.word	0x20000010

08003488 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003488:	b480      	push	{r7}
 800348a:	b085      	sub	sp, #20
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	f003 0307 	and.w	r3, r3, #7
 8003496:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003498:	4b0c      	ldr	r3, [pc, #48]	; (80034cc <__NVIC_SetPriorityGrouping+0x44>)
 800349a:	68db      	ldr	r3, [r3, #12]
 800349c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800349e:	68ba      	ldr	r2, [r7, #8]
 80034a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80034a4:	4013      	ands	r3, r2
 80034a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80034b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80034b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80034ba:	4a04      	ldr	r2, [pc, #16]	; (80034cc <__NVIC_SetPriorityGrouping+0x44>)
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	60d3      	str	r3, [r2, #12]
}
 80034c0:	bf00      	nop
 80034c2:	3714      	adds	r7, #20
 80034c4:	46bd      	mov	sp, r7
 80034c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ca:	4770      	bx	lr
 80034cc:	e000ed00 	.word	0xe000ed00

080034d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80034d0:	b480      	push	{r7}
 80034d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80034d4:	4b04      	ldr	r3, [pc, #16]	; (80034e8 <__NVIC_GetPriorityGrouping+0x18>)
 80034d6:	68db      	ldr	r3, [r3, #12]
 80034d8:	0a1b      	lsrs	r3, r3, #8
 80034da:	f003 0307 	and.w	r3, r3, #7
}
 80034de:	4618      	mov	r0, r3
 80034e0:	46bd      	mov	sp, r7
 80034e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e6:	4770      	bx	lr
 80034e8:	e000ed00 	.word	0xe000ed00

080034ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034ec:	b480      	push	{r7}
 80034ee:	b083      	sub	sp, #12
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	4603      	mov	r3, r0
 80034f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	db0b      	blt.n	8003516 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80034fe:	79fb      	ldrb	r3, [r7, #7]
 8003500:	f003 021f 	and.w	r2, r3, #31
 8003504:	4907      	ldr	r1, [pc, #28]	; (8003524 <__NVIC_EnableIRQ+0x38>)
 8003506:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800350a:	095b      	lsrs	r3, r3, #5
 800350c:	2001      	movs	r0, #1
 800350e:	fa00 f202 	lsl.w	r2, r0, r2
 8003512:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003516:	bf00      	nop
 8003518:	370c      	adds	r7, #12
 800351a:	46bd      	mov	sp, r7
 800351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003520:	4770      	bx	lr
 8003522:	bf00      	nop
 8003524:	e000e100 	.word	0xe000e100

08003528 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003528:	b480      	push	{r7}
 800352a:	b083      	sub	sp, #12
 800352c:	af00      	add	r7, sp, #0
 800352e:	4603      	mov	r3, r0
 8003530:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003532:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003536:	2b00      	cmp	r3, #0
 8003538:	db12      	blt.n	8003560 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800353a:	79fb      	ldrb	r3, [r7, #7]
 800353c:	f003 021f 	and.w	r2, r3, #31
 8003540:	490a      	ldr	r1, [pc, #40]	; (800356c <__NVIC_DisableIRQ+0x44>)
 8003542:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003546:	095b      	lsrs	r3, r3, #5
 8003548:	2001      	movs	r0, #1
 800354a:	fa00 f202 	lsl.w	r2, r0, r2
 800354e:	3320      	adds	r3, #32
 8003550:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003554:	f3bf 8f4f 	dsb	sy
}
 8003558:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800355a:	f3bf 8f6f 	isb	sy
}
 800355e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003560:	bf00      	nop
 8003562:	370c      	adds	r7, #12
 8003564:	46bd      	mov	sp, r7
 8003566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356a:	4770      	bx	lr
 800356c:	e000e100 	.word	0xe000e100

08003570 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8003570:	b480      	push	{r7}
 8003572:	b083      	sub	sp, #12
 8003574:	af00      	add	r7, sp, #0
 8003576:	4603      	mov	r3, r0
 8003578:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800357a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800357e:	2b00      	cmp	r3, #0
 8003580:	db0c      	blt.n	800359c <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003582:	79fb      	ldrb	r3, [r7, #7]
 8003584:	f003 021f 	and.w	r2, r3, #31
 8003588:	4907      	ldr	r1, [pc, #28]	; (80035a8 <__NVIC_SetPendingIRQ+0x38>)
 800358a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800358e:	095b      	lsrs	r3, r3, #5
 8003590:	2001      	movs	r0, #1
 8003592:	fa00 f202 	lsl.w	r2, r0, r2
 8003596:	3340      	adds	r3, #64	; 0x40
 8003598:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800359c:	bf00      	nop
 800359e:	370c      	adds	r7, #12
 80035a0:	46bd      	mov	sp, r7
 80035a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a6:	4770      	bx	lr
 80035a8:	e000e100 	.word	0xe000e100

080035ac <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b083      	sub	sp, #12
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	4603      	mov	r3, r0
 80035b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	db0c      	blt.n	80035d8 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035be:	79fb      	ldrb	r3, [r7, #7]
 80035c0:	f003 021f 	and.w	r2, r3, #31
 80035c4:	4907      	ldr	r1, [pc, #28]	; (80035e4 <__NVIC_ClearPendingIRQ+0x38>)
 80035c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035ca:	095b      	lsrs	r3, r3, #5
 80035cc:	2001      	movs	r0, #1
 80035ce:	fa00 f202 	lsl.w	r2, r0, r2
 80035d2:	3360      	adds	r3, #96	; 0x60
 80035d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80035d8:	bf00      	nop
 80035da:	370c      	adds	r7, #12
 80035dc:	46bd      	mov	sp, r7
 80035de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e2:	4770      	bx	lr
 80035e4:	e000e100 	.word	0xe000e100

080035e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b083      	sub	sp, #12
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	4603      	mov	r3, r0
 80035f0:	6039      	str	r1, [r7, #0]
 80035f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	db0a      	blt.n	8003612 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	b2da      	uxtb	r2, r3
 8003600:	490c      	ldr	r1, [pc, #48]	; (8003634 <__NVIC_SetPriority+0x4c>)
 8003602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003606:	0112      	lsls	r2, r2, #4
 8003608:	b2d2      	uxtb	r2, r2
 800360a:	440b      	add	r3, r1
 800360c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003610:	e00a      	b.n	8003628 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	b2da      	uxtb	r2, r3
 8003616:	4908      	ldr	r1, [pc, #32]	; (8003638 <__NVIC_SetPriority+0x50>)
 8003618:	79fb      	ldrb	r3, [r7, #7]
 800361a:	f003 030f 	and.w	r3, r3, #15
 800361e:	3b04      	subs	r3, #4
 8003620:	0112      	lsls	r2, r2, #4
 8003622:	b2d2      	uxtb	r2, r2
 8003624:	440b      	add	r3, r1
 8003626:	761a      	strb	r2, [r3, #24]
}
 8003628:	bf00      	nop
 800362a:	370c      	adds	r7, #12
 800362c:	46bd      	mov	sp, r7
 800362e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003632:	4770      	bx	lr
 8003634:	e000e100 	.word	0xe000e100
 8003638:	e000ed00 	.word	0xe000ed00

0800363c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800363c:	b480      	push	{r7}
 800363e:	b089      	sub	sp, #36	; 0x24
 8003640:	af00      	add	r7, sp, #0
 8003642:	60f8      	str	r0, [r7, #12]
 8003644:	60b9      	str	r1, [r7, #8]
 8003646:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	f003 0307 	and.w	r3, r3, #7
 800364e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003650:	69fb      	ldr	r3, [r7, #28]
 8003652:	f1c3 0307 	rsb	r3, r3, #7
 8003656:	2b04      	cmp	r3, #4
 8003658:	bf28      	it	cs
 800365a:	2304      	movcs	r3, #4
 800365c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800365e:	69fb      	ldr	r3, [r7, #28]
 8003660:	3304      	adds	r3, #4
 8003662:	2b06      	cmp	r3, #6
 8003664:	d902      	bls.n	800366c <NVIC_EncodePriority+0x30>
 8003666:	69fb      	ldr	r3, [r7, #28]
 8003668:	3b03      	subs	r3, #3
 800366a:	e000      	b.n	800366e <NVIC_EncodePriority+0x32>
 800366c:	2300      	movs	r3, #0
 800366e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003670:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003674:	69bb      	ldr	r3, [r7, #24]
 8003676:	fa02 f303 	lsl.w	r3, r2, r3
 800367a:	43da      	mvns	r2, r3
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	401a      	ands	r2, r3
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003684:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	fa01 f303 	lsl.w	r3, r1, r3
 800368e:	43d9      	mvns	r1, r3
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003694:	4313      	orrs	r3, r2
         );
}
 8003696:	4618      	mov	r0, r3
 8003698:	3724      	adds	r7, #36	; 0x24
 800369a:	46bd      	mov	sp, r7
 800369c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a0:	4770      	bx	lr
	...

080036a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b082      	sub	sp, #8
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	3b01      	subs	r3, #1
 80036b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80036b4:	d301      	bcc.n	80036ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80036b6:	2301      	movs	r3, #1
 80036b8:	e00f      	b.n	80036da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80036ba:	4a0a      	ldr	r2, [pc, #40]	; (80036e4 <SysTick_Config+0x40>)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	3b01      	subs	r3, #1
 80036c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80036c2:	210f      	movs	r1, #15
 80036c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80036c8:	f7ff ff8e 	bl	80035e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80036cc:	4b05      	ldr	r3, [pc, #20]	; (80036e4 <SysTick_Config+0x40>)
 80036ce:	2200      	movs	r2, #0
 80036d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80036d2:	4b04      	ldr	r3, [pc, #16]	; (80036e4 <SysTick_Config+0x40>)
 80036d4:	2207      	movs	r2, #7
 80036d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80036d8:	2300      	movs	r3, #0
}
 80036da:	4618      	mov	r0, r3
 80036dc:	3708      	adds	r7, #8
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}
 80036e2:	bf00      	nop
 80036e4:	e000e010 	.word	0xe000e010

080036e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b082      	sub	sp, #8
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80036f0:	6878      	ldr	r0, [r7, #4]
 80036f2:	f7ff fec9 	bl	8003488 <__NVIC_SetPriorityGrouping>
}
 80036f6:	bf00      	nop
 80036f8:	3708      	adds	r7, #8
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}

080036fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036fe:	b580      	push	{r7, lr}
 8003700:	b086      	sub	sp, #24
 8003702:	af00      	add	r7, sp, #0
 8003704:	4603      	mov	r3, r0
 8003706:	60b9      	str	r1, [r7, #8]
 8003708:	607a      	str	r2, [r7, #4]
 800370a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800370c:	f7ff fee0 	bl	80034d0 <__NVIC_GetPriorityGrouping>
 8003710:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003712:	687a      	ldr	r2, [r7, #4]
 8003714:	68b9      	ldr	r1, [r7, #8]
 8003716:	6978      	ldr	r0, [r7, #20]
 8003718:	f7ff ff90 	bl	800363c <NVIC_EncodePriority>
 800371c:	4602      	mov	r2, r0
 800371e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003722:	4611      	mov	r1, r2
 8003724:	4618      	mov	r0, r3
 8003726:	f7ff ff5f 	bl	80035e8 <__NVIC_SetPriority>
}
 800372a:	bf00      	nop
 800372c:	3718      	adds	r7, #24
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}

08003732 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003732:	b580      	push	{r7, lr}
 8003734:	b082      	sub	sp, #8
 8003736:	af00      	add	r7, sp, #0
 8003738:	4603      	mov	r3, r0
 800373a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800373c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003740:	4618      	mov	r0, r3
 8003742:	f7ff fed3 	bl	80034ec <__NVIC_EnableIRQ>
}
 8003746:	bf00      	nop
 8003748:	3708      	adds	r7, #8
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}

0800374e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800374e:	b580      	push	{r7, lr}
 8003750:	b082      	sub	sp, #8
 8003752:	af00      	add	r7, sp, #0
 8003754:	4603      	mov	r3, r0
 8003756:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003758:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800375c:	4618      	mov	r0, r3
 800375e:	f7ff fee3 	bl	8003528 <__NVIC_DisableIRQ>
}
 8003762:	bf00      	nop
 8003764:	3708      	adds	r7, #8
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}

0800376a <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800376a:	b580      	push	{r7, lr}
 800376c:	b082      	sub	sp, #8
 800376e:	af00      	add	r7, sp, #0
 8003770:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	f7ff ff96 	bl	80036a4 <SysTick_Config>
 8003778:	4603      	mov	r3, r0
}
 800377a:	4618      	mov	r0, r3
 800377c:	3708      	adds	r7, #8
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}

08003782 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8003782:	b580      	push	{r7, lr}
 8003784:	b082      	sub	sp, #8
 8003786:	af00      	add	r7, sp, #0
 8003788:	4603      	mov	r3, r0
 800378a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 800378c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003790:	4618      	mov	r0, r3
 8003792:	f7ff feed 	bl	8003570 <__NVIC_SetPendingIRQ>
}
 8003796:	bf00      	nop
 8003798:	3708      	adds	r7, #8
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}

0800379e <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800379e:	b580      	push	{r7, lr}
 80037a0:	b082      	sub	sp, #8
 80037a2:	af00      	add	r7, sp, #0
 80037a4:	4603      	mov	r3, r0
 80037a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 80037a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037ac:	4618      	mov	r0, r3
 80037ae:	f7ff fefd 	bl	80035ac <__NVIC_ClearPendingIRQ>
}
 80037b2:	bf00      	nop
 80037b4:	3708      	adds	r7, #8
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}
	...

080037bc <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b084      	sub	sp, #16
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d101      	bne.n	80037ce <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	e08e      	b.n	80038ec <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	461a      	mov	r2, r3
 80037d4:	4b47      	ldr	r3, [pc, #284]	; (80038f4 <HAL_DMA_Init+0x138>)
 80037d6:	429a      	cmp	r2, r3
 80037d8:	d80f      	bhi.n	80037fa <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	461a      	mov	r2, r3
 80037e0:	4b45      	ldr	r3, [pc, #276]	; (80038f8 <HAL_DMA_Init+0x13c>)
 80037e2:	4413      	add	r3, r2
 80037e4:	4a45      	ldr	r2, [pc, #276]	; (80038fc <HAL_DMA_Init+0x140>)
 80037e6:	fba2 2303 	umull	r2, r3, r2, r3
 80037ea:	091b      	lsrs	r3, r3, #4
 80037ec:	009a      	lsls	r2, r3, #2
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	4a42      	ldr	r2, [pc, #264]	; (8003900 <HAL_DMA_Init+0x144>)
 80037f6:	641a      	str	r2, [r3, #64]	; 0x40
 80037f8:	e00e      	b.n	8003818 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	461a      	mov	r2, r3
 8003800:	4b40      	ldr	r3, [pc, #256]	; (8003904 <HAL_DMA_Init+0x148>)
 8003802:	4413      	add	r3, r2
 8003804:	4a3d      	ldr	r2, [pc, #244]	; (80038fc <HAL_DMA_Init+0x140>)
 8003806:	fba2 2303 	umull	r2, r3, r2, r3
 800380a:	091b      	lsrs	r3, r3, #4
 800380c:	009a      	lsls	r2, r3, #2
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	4a3c      	ldr	r2, [pc, #240]	; (8003908 <HAL_DMA_Init+0x14c>)
 8003816:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2202      	movs	r2, #2
 800381c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800382e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003832:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800383c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	691b      	ldr	r3, [r3, #16]
 8003842:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003848:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	699b      	ldr	r3, [r3, #24]
 800384e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003854:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6a1b      	ldr	r3, [r3, #32]
 800385a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800385c:	68fa      	ldr	r2, [r7, #12]
 800385e:	4313      	orrs	r3, r2
 8003860:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	68fa      	ldr	r2, [r7, #12]
 8003868:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f000 fa16 	bl	8003c9c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003878:	d102      	bne.n	8003880 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2200      	movs	r2, #0
 800387e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	685a      	ldr	r2, [r3, #4]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003888:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800388c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003892:	687a      	ldr	r2, [r7, #4]
 8003894:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003896:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d010      	beq.n	80038c2 <HAL_DMA_Init+0x106>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	2b04      	cmp	r3, #4
 80038a6:	d80c      	bhi.n	80038c2 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80038a8:	6878      	ldr	r0, [r7, #4]
 80038aa:	f000 fa35 	bl	8003d18 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038b2:	2200      	movs	r2, #0
 80038b4:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038ba:	687a      	ldr	r2, [r7, #4]
 80038bc:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80038be:	605a      	str	r2, [r3, #4]
 80038c0:	e008      	b.n	80038d4 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2200      	movs	r2, #0
 80038c6:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2200      	movs	r2, #0
 80038cc:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2200      	movs	r2, #0
 80038d2:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2200      	movs	r2, #0
 80038d8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2201      	movs	r2, #1
 80038de:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2200      	movs	r2, #0
 80038e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80038ea:	2300      	movs	r3, #0
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	3710      	adds	r7, #16
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd80      	pop	{r7, pc}
 80038f4:	40020407 	.word	0x40020407
 80038f8:	bffdfff8 	.word	0xbffdfff8
 80038fc:	cccccccd 	.word	0xcccccccd
 8003900:	40020000 	.word	0x40020000
 8003904:	bffdfbf8 	.word	0xbffdfbf8
 8003908:	40020400 	.word	0x40020400

0800390c <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b086      	sub	sp, #24
 8003910:	af00      	add	r7, sp, #0
 8003912:	60f8      	str	r0, [r7, #12]
 8003914:	60b9      	str	r1, [r7, #8]
 8003916:	607a      	str	r2, [r7, #4]
 8003918:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800391a:	2300      	movs	r3, #0
 800391c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003924:	2b01      	cmp	r3, #1
 8003926:	d101      	bne.n	800392c <HAL_DMA_Start_IT+0x20>
 8003928:	2302      	movs	r3, #2
 800392a:	e066      	b.n	80039fa <HAL_DMA_Start_IT+0xee>
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	2201      	movs	r2, #1
 8003930:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800393a:	b2db      	uxtb	r3, r3
 800393c:	2b01      	cmp	r3, #1
 800393e:	d155      	bne.n	80039ec <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	2202      	movs	r2, #2
 8003944:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2200      	movs	r2, #0
 800394c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	681a      	ldr	r2, [r3, #0]
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f022 0201 	bic.w	r2, r2, #1
 800395c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	687a      	ldr	r2, [r7, #4]
 8003962:	68b9      	ldr	r1, [r7, #8]
 8003964:	68f8      	ldr	r0, [r7, #12]
 8003966:	f000 f95a 	bl	8003c1e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800396e:	2b00      	cmp	r3, #0
 8003970:	d008      	beq.n	8003984 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	681a      	ldr	r2, [r3, #0]
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f042 020e 	orr.w	r2, r2, #14
 8003980:	601a      	str	r2, [r3, #0]
 8003982:	e00f      	b.n	80039a4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	681a      	ldr	r2, [r3, #0]
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f022 0204 	bic.w	r2, r2, #4
 8003992:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	681a      	ldr	r2, [r3, #0]
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f042 020a 	orr.w	r2, r2, #10
 80039a2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d007      	beq.n	80039c2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039b6:	681a      	ldr	r2, [r3, #0]
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80039c0:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d007      	beq.n	80039da <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039ce:	681a      	ldr	r2, [r3, #0]
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80039d8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	681a      	ldr	r2, [r3, #0]
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f042 0201 	orr.w	r2, r2, #1
 80039e8:	601a      	str	r2, [r3, #0]
 80039ea:	e005      	b.n	80039f8 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	2200      	movs	r2, #0
 80039f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80039f4:	2302      	movs	r3, #2
 80039f6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80039f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80039fa:	4618      	mov	r0, r3
 80039fc:	3718      	adds	r7, #24
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}

08003a02 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003a02:	b580      	push	{r7, lr}
 8003a04:	b084      	sub	sp, #16
 8003a06:	af00      	add	r7, sp, #0
 8003a08:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003a14:	b2db      	uxtb	r3, r3
 8003a16:	2b02      	cmp	r3, #2
 8003a18:	d005      	beq.n	8003a26 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2204      	movs	r2, #4
 8003a1e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003a20:	2301      	movs	r3, #1
 8003a22:	73fb      	strb	r3, [r7, #15]
 8003a24:	e047      	b.n	8003ab6 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	681a      	ldr	r2, [r3, #0]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f022 020e 	bic.w	r2, r2, #14
 8003a34:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f022 0201 	bic.w	r2, r2, #1
 8003a44:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a4a:	681a      	ldr	r2, [r3, #0]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a50:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a54:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a5a:	f003 021c 	and.w	r2, r3, #28
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a62:	2101      	movs	r1, #1
 8003a64:	fa01 f202 	lsl.w	r2, r1, r2
 8003a68:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a6e:	687a      	ldr	r2, [r7, #4]
 8003a70:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003a72:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d00c      	beq.n	8003a96 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a80:	681a      	ldr	r2, [r3, #0]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a86:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a8a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a90:	687a      	ldr	r2, [r7, #4]
 8003a92:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003a94:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2201      	movs	r2, #1
 8003a9a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d003      	beq.n	8003ab6 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	4798      	blx	r3
    }
  }
  return status;
 8003ab6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	3710      	adds	r7, #16
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd80      	pop	{r7, pc}

08003ac0 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b084      	sub	sp, #16
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003adc:	f003 031c 	and.w	r3, r3, #28
 8003ae0:	2204      	movs	r2, #4
 8003ae2:	409a      	lsls	r2, r3
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	4013      	ands	r3, r2
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d026      	beq.n	8003b3a <HAL_DMA_IRQHandler+0x7a>
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	f003 0304 	and.w	r3, r3, #4
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d021      	beq.n	8003b3a <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f003 0320 	and.w	r3, r3, #32
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d107      	bne.n	8003b14 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	681a      	ldr	r2, [r3, #0]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f022 0204 	bic.w	r2, r2, #4
 8003b12:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b18:	f003 021c 	and.w	r2, r3, #28
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b20:	2104      	movs	r1, #4
 8003b22:	fa01 f202 	lsl.w	r2, r1, r2
 8003b26:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d071      	beq.n	8003c14 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b34:	6878      	ldr	r0, [r7, #4]
 8003b36:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003b38:	e06c      	b.n	8003c14 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b3e:	f003 031c 	and.w	r3, r3, #28
 8003b42:	2202      	movs	r2, #2
 8003b44:	409a      	lsls	r2, r3
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	4013      	ands	r3, r2
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d02e      	beq.n	8003bac <HAL_DMA_IRQHandler+0xec>
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	f003 0302 	and.w	r3, r3, #2
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d029      	beq.n	8003bac <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f003 0320 	and.w	r3, r3, #32
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d10b      	bne.n	8003b7e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	681a      	ldr	r2, [r3, #0]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f022 020a 	bic.w	r2, r2, #10
 8003b74:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2201      	movs	r2, #1
 8003b7a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b82:	f003 021c 	and.w	r2, r3, #28
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b8a:	2102      	movs	r1, #2
 8003b8c:	fa01 f202 	lsl.w	r2, r1, r2
 8003b90:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2200      	movs	r2, #0
 8003b96:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d038      	beq.n	8003c14 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ba6:	6878      	ldr	r0, [r7, #4]
 8003ba8:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003baa:	e033      	b.n	8003c14 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bb0:	f003 031c 	and.w	r3, r3, #28
 8003bb4:	2208      	movs	r2, #8
 8003bb6:	409a      	lsls	r2, r3
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	4013      	ands	r3, r2
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d02a      	beq.n	8003c16 <HAL_DMA_IRQHandler+0x156>
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	f003 0308 	and.w	r3, r3, #8
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d025      	beq.n	8003c16 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	681a      	ldr	r2, [r3, #0]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f022 020e 	bic.w	r2, r2, #14
 8003bd8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bde:	f003 021c 	and.w	r2, r3, #28
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be6:	2101      	movs	r1, #1
 8003be8:	fa01 f202 	lsl.w	r2, r1, r2
 8003bec:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2201      	movs	r2, #1
 8003bf2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d004      	beq.n	8003c16 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c10:	6878      	ldr	r0, [r7, #4]
 8003c12:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003c14:	bf00      	nop
 8003c16:	bf00      	nop
}
 8003c18:	3710      	adds	r7, #16
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}

08003c1e <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c1e:	b480      	push	{r7}
 8003c20:	b085      	sub	sp, #20
 8003c22:	af00      	add	r7, sp, #0
 8003c24:	60f8      	str	r0, [r7, #12]
 8003c26:	60b9      	str	r1, [r7, #8]
 8003c28:	607a      	str	r2, [r7, #4]
 8003c2a:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c30:	68fa      	ldr	r2, [r7, #12]
 8003c32:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003c34:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d004      	beq.n	8003c48 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c42:	68fa      	ldr	r2, [r7, #12]
 8003c44:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003c46:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c4c:	f003 021c 	and.w	r2, r3, #28
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c54:	2101      	movs	r1, #1
 8003c56:	fa01 f202 	lsl.w	r2, r1, r2
 8003c5a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	683a      	ldr	r2, [r7, #0]
 8003c62:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	689b      	ldr	r3, [r3, #8]
 8003c68:	2b10      	cmp	r3, #16
 8003c6a:	d108      	bne.n	8003c7e <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	687a      	ldr	r2, [r7, #4]
 8003c72:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	68ba      	ldr	r2, [r7, #8]
 8003c7a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003c7c:	e007      	b.n	8003c8e <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	68ba      	ldr	r2, [r7, #8]
 8003c84:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	687a      	ldr	r2, [r7, #4]
 8003c8c:	60da      	str	r2, [r3, #12]
}
 8003c8e:	bf00      	nop
 8003c90:	3714      	adds	r7, #20
 8003c92:	46bd      	mov	sp, r7
 8003c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c98:	4770      	bx	lr
	...

08003c9c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b085      	sub	sp, #20
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	461a      	mov	r2, r3
 8003caa:	4b17      	ldr	r3, [pc, #92]	; (8003d08 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003cac:	429a      	cmp	r2, r3
 8003cae:	d80a      	bhi.n	8003cc6 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cb4:	089b      	lsrs	r3, r3, #2
 8003cb6:	009b      	lsls	r3, r3, #2
 8003cb8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003cbc:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8003cc0:	687a      	ldr	r2, [r7, #4]
 8003cc2:	6493      	str	r3, [r2, #72]	; 0x48
 8003cc4:	e007      	b.n	8003cd6 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cca:	089b      	lsrs	r3, r3, #2
 8003ccc:	009a      	lsls	r2, r3, #2
 8003cce:	4b0f      	ldr	r3, [pc, #60]	; (8003d0c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003cd0:	4413      	add	r3, r2
 8003cd2:	687a      	ldr	r2, [r7, #4]
 8003cd4:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	b2db      	uxtb	r3, r3
 8003cdc:	3b08      	subs	r3, #8
 8003cde:	4a0c      	ldr	r2, [pc, #48]	; (8003d10 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003ce0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ce4:	091b      	lsrs	r3, r3, #4
 8003ce6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	4a0a      	ldr	r2, [pc, #40]	; (8003d14 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003cec:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	f003 031f 	and.w	r3, r3, #31
 8003cf4:	2201      	movs	r2, #1
 8003cf6:	409a      	lsls	r2, r3
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003cfc:	bf00      	nop
 8003cfe:	3714      	adds	r7, #20
 8003d00:	46bd      	mov	sp, r7
 8003d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d06:	4770      	bx	lr
 8003d08:	40020407 	.word	0x40020407
 8003d0c:	4002081c 	.word	0x4002081c
 8003d10:	cccccccd 	.word	0xcccccccd
 8003d14:	40020880 	.word	0x40020880

08003d18 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b085      	sub	sp, #20
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d28:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003d2a:	68fa      	ldr	r2, [r7, #12]
 8003d2c:	4b0b      	ldr	r3, [pc, #44]	; (8003d5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003d2e:	4413      	add	r3, r2
 8003d30:	009b      	lsls	r3, r3, #2
 8003d32:	461a      	mov	r2, r3
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	4a09      	ldr	r2, [pc, #36]	; (8003d60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8003d3c:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	3b01      	subs	r3, #1
 8003d42:	f003 0303 	and.w	r3, r3, #3
 8003d46:	2201      	movs	r2, #1
 8003d48:	409a      	lsls	r2, r3
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003d4e:	bf00      	nop
 8003d50:	3714      	adds	r7, #20
 8003d52:	46bd      	mov	sp, r7
 8003d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d58:	4770      	bx	lr
 8003d5a:	bf00      	nop
 8003d5c:	1000823f 	.word	0x1000823f
 8003d60:	40020940 	.word	0x40020940

08003d64 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d64:	b480      	push	{r7}
 8003d66:	b087      	sub	sp, #28
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
 8003d6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003d72:	e14c      	b.n	800400e <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	681a      	ldr	r2, [r3, #0]
 8003d78:	2101      	movs	r1, #1
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	fa01 f303 	lsl.w	r3, r1, r3
 8003d80:	4013      	ands	r3, r2
 8003d82:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	f000 813e 	beq.w	8004008 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	f003 0303 	and.w	r3, r3, #3
 8003d94:	2b01      	cmp	r3, #1
 8003d96:	d005      	beq.n	8003da4 <HAL_GPIO_Init+0x40>
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	f003 0303 	and.w	r3, r3, #3
 8003da0:	2b02      	cmp	r3, #2
 8003da2:	d130      	bne.n	8003e06 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	005b      	lsls	r3, r3, #1
 8003dae:	2203      	movs	r2, #3
 8003db0:	fa02 f303 	lsl.w	r3, r2, r3
 8003db4:	43db      	mvns	r3, r3
 8003db6:	693a      	ldr	r2, [r7, #16]
 8003db8:	4013      	ands	r3, r2
 8003dba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	68da      	ldr	r2, [r3, #12]
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	005b      	lsls	r3, r3, #1
 8003dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc8:	693a      	ldr	r2, [r7, #16]
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	693a      	ldr	r2, [r7, #16]
 8003dd2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003dda:	2201      	movs	r2, #1
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	fa02 f303 	lsl.w	r3, r2, r3
 8003de2:	43db      	mvns	r3, r3
 8003de4:	693a      	ldr	r2, [r7, #16]
 8003de6:	4013      	ands	r3, r2
 8003de8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	091b      	lsrs	r3, r3, #4
 8003df0:	f003 0201 	and.w	r2, r3, #1
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dfa:	693a      	ldr	r2, [r7, #16]
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	693a      	ldr	r2, [r7, #16]
 8003e04:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	f003 0303 	and.w	r3, r3, #3
 8003e0e:	2b03      	cmp	r3, #3
 8003e10:	d017      	beq.n	8003e42 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	68db      	ldr	r3, [r3, #12]
 8003e16:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	005b      	lsls	r3, r3, #1
 8003e1c:	2203      	movs	r2, #3
 8003e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e22:	43db      	mvns	r3, r3
 8003e24:	693a      	ldr	r2, [r7, #16]
 8003e26:	4013      	ands	r3, r2
 8003e28:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	689a      	ldr	r2, [r3, #8]
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	005b      	lsls	r3, r3, #1
 8003e32:	fa02 f303 	lsl.w	r3, r2, r3
 8003e36:	693a      	ldr	r2, [r7, #16]
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	693a      	ldr	r2, [r7, #16]
 8003e40:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	f003 0303 	and.w	r3, r3, #3
 8003e4a:	2b02      	cmp	r3, #2
 8003e4c:	d123      	bne.n	8003e96 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003e4e:	697b      	ldr	r3, [r7, #20]
 8003e50:	08da      	lsrs	r2, r3, #3
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	3208      	adds	r2, #8
 8003e56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e5a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	f003 0307 	and.w	r3, r3, #7
 8003e62:	009b      	lsls	r3, r3, #2
 8003e64:	220f      	movs	r2, #15
 8003e66:	fa02 f303 	lsl.w	r3, r2, r3
 8003e6a:	43db      	mvns	r3, r3
 8003e6c:	693a      	ldr	r2, [r7, #16]
 8003e6e:	4013      	ands	r3, r2
 8003e70:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	691a      	ldr	r2, [r3, #16]
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	f003 0307 	and.w	r3, r3, #7
 8003e7c:	009b      	lsls	r3, r3, #2
 8003e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e82:	693a      	ldr	r2, [r7, #16]
 8003e84:	4313      	orrs	r3, r2
 8003e86:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003e88:	697b      	ldr	r3, [r7, #20]
 8003e8a:	08da      	lsrs	r2, r3, #3
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	3208      	adds	r2, #8
 8003e90:	6939      	ldr	r1, [r7, #16]
 8003e92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	005b      	lsls	r3, r3, #1
 8003ea0:	2203      	movs	r2, #3
 8003ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea6:	43db      	mvns	r3, r3
 8003ea8:	693a      	ldr	r2, [r7, #16]
 8003eaa:	4013      	ands	r3, r2
 8003eac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	f003 0203 	and.w	r2, r3, #3
 8003eb6:	697b      	ldr	r3, [r7, #20]
 8003eb8:	005b      	lsls	r3, r3, #1
 8003eba:	fa02 f303 	lsl.w	r3, r2, r3
 8003ebe:	693a      	ldr	r2, [r7, #16]
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	693a      	ldr	r2, [r7, #16]
 8003ec8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	f000 8098 	beq.w	8004008 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8003ed8:	4a54      	ldr	r2, [pc, #336]	; (800402c <HAL_GPIO_Init+0x2c8>)
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	089b      	lsrs	r3, r3, #2
 8003ede:	3302      	adds	r3, #2
 8003ee0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ee4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003ee6:	697b      	ldr	r3, [r7, #20]
 8003ee8:	f003 0303 	and.w	r3, r3, #3
 8003eec:	009b      	lsls	r3, r3, #2
 8003eee:	220f      	movs	r2, #15
 8003ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef4:	43db      	mvns	r3, r3
 8003ef6:	693a      	ldr	r2, [r7, #16]
 8003ef8:	4013      	ands	r3, r2
 8003efa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003f02:	d019      	beq.n	8003f38 <HAL_GPIO_Init+0x1d4>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	4a4a      	ldr	r2, [pc, #296]	; (8004030 <HAL_GPIO_Init+0x2cc>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d013      	beq.n	8003f34 <HAL_GPIO_Init+0x1d0>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	4a49      	ldr	r2, [pc, #292]	; (8004034 <HAL_GPIO_Init+0x2d0>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d00d      	beq.n	8003f30 <HAL_GPIO_Init+0x1cc>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	4a48      	ldr	r2, [pc, #288]	; (8004038 <HAL_GPIO_Init+0x2d4>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d007      	beq.n	8003f2c <HAL_GPIO_Init+0x1c8>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	4a47      	ldr	r2, [pc, #284]	; (800403c <HAL_GPIO_Init+0x2d8>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d101      	bne.n	8003f28 <HAL_GPIO_Init+0x1c4>
 8003f24:	2304      	movs	r3, #4
 8003f26:	e008      	b.n	8003f3a <HAL_GPIO_Init+0x1d6>
 8003f28:	2307      	movs	r3, #7
 8003f2a:	e006      	b.n	8003f3a <HAL_GPIO_Init+0x1d6>
 8003f2c:	2303      	movs	r3, #3
 8003f2e:	e004      	b.n	8003f3a <HAL_GPIO_Init+0x1d6>
 8003f30:	2302      	movs	r3, #2
 8003f32:	e002      	b.n	8003f3a <HAL_GPIO_Init+0x1d6>
 8003f34:	2301      	movs	r3, #1
 8003f36:	e000      	b.n	8003f3a <HAL_GPIO_Init+0x1d6>
 8003f38:	2300      	movs	r3, #0
 8003f3a:	697a      	ldr	r2, [r7, #20]
 8003f3c:	f002 0203 	and.w	r2, r2, #3
 8003f40:	0092      	lsls	r2, r2, #2
 8003f42:	4093      	lsls	r3, r2
 8003f44:	693a      	ldr	r2, [r7, #16]
 8003f46:	4313      	orrs	r3, r2
 8003f48:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003f4a:	4938      	ldr	r1, [pc, #224]	; (800402c <HAL_GPIO_Init+0x2c8>)
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	089b      	lsrs	r3, r3, #2
 8003f50:	3302      	adds	r3, #2
 8003f52:	693a      	ldr	r2, [r7, #16]
 8003f54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003f58:	4b39      	ldr	r3, [pc, #228]	; (8004040 <HAL_GPIO_Init+0x2dc>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	43db      	mvns	r3, r3
 8003f62:	693a      	ldr	r2, [r7, #16]
 8003f64:	4013      	ands	r3, r2
 8003f66:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d003      	beq.n	8003f7c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8003f74:	693a      	ldr	r2, [r7, #16]
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003f7c:	4a30      	ldr	r2, [pc, #192]	; (8004040 <HAL_GPIO_Init+0x2dc>)
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003f82:	4b2f      	ldr	r3, [pc, #188]	; (8004040 <HAL_GPIO_Init+0x2dc>)
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	43db      	mvns	r3, r3
 8003f8c:	693a      	ldr	r2, [r7, #16]
 8003f8e:	4013      	ands	r3, r2
 8003f90:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d003      	beq.n	8003fa6 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8003f9e:	693a      	ldr	r2, [r7, #16]
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003fa6:	4a26      	ldr	r2, [pc, #152]	; (8004040 <HAL_GPIO_Init+0x2dc>)
 8003fa8:	693b      	ldr	r3, [r7, #16]
 8003faa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003fac:	4b24      	ldr	r3, [pc, #144]	; (8004040 <HAL_GPIO_Init+0x2dc>)
 8003fae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003fb2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	43db      	mvns	r3, r3
 8003fb8:	693a      	ldr	r2, [r7, #16]
 8003fba:	4013      	ands	r3, r2
 8003fbc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d003      	beq.n	8003fd2 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8003fca:	693a      	ldr	r2, [r7, #16]
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003fd2:	4a1b      	ldr	r2, [pc, #108]	; (8004040 <HAL_GPIO_Init+0x2dc>)
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8003fda:	4b19      	ldr	r3, [pc, #100]	; (8004040 <HAL_GPIO_Init+0x2dc>)
 8003fdc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fe0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	43db      	mvns	r3, r3
 8003fe6:	693a      	ldr	r2, [r7, #16]
 8003fe8:	4013      	ands	r3, r2
 8003fea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d003      	beq.n	8004000 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8003ff8:	693a      	ldr	r2, [r7, #16]
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004000:	4a0f      	ldr	r2, [pc, #60]	; (8004040 <HAL_GPIO_Init+0x2dc>)
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	3301      	adds	r3, #1
 800400c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	681a      	ldr	r2, [r3, #0]
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	fa22 f303 	lsr.w	r3, r2, r3
 8004018:	2b00      	cmp	r3, #0
 800401a:	f47f aeab 	bne.w	8003d74 <HAL_GPIO_Init+0x10>
  }
}
 800401e:	bf00      	nop
 8004020:	bf00      	nop
 8004022:	371c      	adds	r7, #28
 8004024:	46bd      	mov	sp, r7
 8004026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402a:	4770      	bx	lr
 800402c:	40010000 	.word	0x40010000
 8004030:	48000400 	.word	0x48000400
 8004034:	48000800 	.word	0x48000800
 8004038:	48000c00 	.word	0x48000c00
 800403c:	48001000 	.word	0x48001000
 8004040:	58000800 	.word	0x58000800

08004044 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004044:	b480      	push	{r7}
 8004046:	b083      	sub	sp, #12
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
 800404c:	460b      	mov	r3, r1
 800404e:	807b      	strh	r3, [r7, #2]
 8004050:	4613      	mov	r3, r2
 8004052:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004054:	787b      	ldrb	r3, [r7, #1]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d003      	beq.n	8004062 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800405a:	887a      	ldrh	r2, [r7, #2]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004060:	e002      	b.n	8004068 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004062:	887a      	ldrh	r2, [r7, #2]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004068:	bf00      	nop
 800406a:	370c      	adds	r7, #12
 800406c:	46bd      	mov	sp, r7
 800406e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004072:	4770      	bx	lr

08004074 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b082      	sub	sp, #8
 8004078:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 800407a:	4b0a      	ldr	r3, [pc, #40]	; (80040a4 <HAL_HSEM_IRQHandler+0x30>)
 800407c:	68db      	ldr	r3, [r3, #12]
 800407e:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8004080:	4b08      	ldr	r3, [pc, #32]	; (80040a4 <HAL_HSEM_IRQHandler+0x30>)
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	43db      	mvns	r3, r3
 8004088:	4906      	ldr	r1, [pc, #24]	; (80040a4 <HAL_HSEM_IRQHandler+0x30>)
 800408a:	4013      	ands	r3, r2
 800408c:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 800408e:	4a05      	ldr	r2, [pc, #20]	; (80040a4 <HAL_HSEM_IRQHandler+0x30>)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8004094:	6878      	ldr	r0, [r7, #4]
 8004096:	f000 f807 	bl	80040a8 <HAL_HSEM_FreeCallback>
}
 800409a:	bf00      	nop
 800409c:	3708      	adds	r7, #8
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}
 80040a2:	bf00      	nop
 80040a4:	58001500 	.word	0x58001500

080040a8 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 80040a8:	b480      	push	{r7}
 80040aa:	b083      	sub	sp, #12
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 80040b0:	bf00      	nop
 80040b2:	370c      	adds	r7, #12
 80040b4:	46bd      	mov	sp, r7
 80040b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ba:	4770      	bx	lr

080040bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b082      	sub	sp, #8
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d101      	bne.n	80040ce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80040ca:	2301      	movs	r3, #1
 80040cc:	e081      	b.n	80041d2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040d4:	b2db      	uxtb	r3, r3
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d106      	bne.n	80040e8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2200      	movs	r2, #0
 80040de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80040e2:	6878      	ldr	r0, [r7, #4]
 80040e4:	f7fe fde8 	bl	8002cb8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2224      	movs	r2, #36	; 0x24
 80040ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	681a      	ldr	r2, [r3, #0]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f022 0201 	bic.w	r2, r2, #1
 80040fe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	685a      	ldr	r2, [r3, #4]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800410c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	689a      	ldr	r2, [r3, #8]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800411c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	68db      	ldr	r3, [r3, #12]
 8004122:	2b01      	cmp	r3, #1
 8004124:	d107      	bne.n	8004136 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	689a      	ldr	r2, [r3, #8]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004132:	609a      	str	r2, [r3, #8]
 8004134:	e006      	b.n	8004144 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	689a      	ldr	r2, [r3, #8]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004142:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	68db      	ldr	r3, [r3, #12]
 8004148:	2b02      	cmp	r3, #2
 800414a:	d104      	bne.n	8004156 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004154:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	687a      	ldr	r2, [r7, #4]
 800415e:	6812      	ldr	r2, [r2, #0]
 8004160:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004164:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004168:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	68da      	ldr	r2, [r3, #12]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004178:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	691a      	ldr	r2, [r3, #16]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	695b      	ldr	r3, [r3, #20]
 8004182:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	699b      	ldr	r3, [r3, #24]
 800418a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	430a      	orrs	r2, r1
 8004192:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	69d9      	ldr	r1, [r3, #28]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6a1a      	ldr	r2, [r3, #32]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	430a      	orrs	r2, r1
 80041a2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	681a      	ldr	r2, [r3, #0]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f042 0201 	orr.w	r2, r2, #1
 80041b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2200      	movs	r2, #0
 80041b8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2220      	movs	r2, #32
 80041be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2200      	movs	r2, #0
 80041c6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2200      	movs	r2, #0
 80041cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80041d0:	2300      	movs	r3, #0
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	3708      	adds	r7, #8
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}
	...

080041dc <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b088      	sub	sp, #32
 80041e0:	af02      	add	r7, sp, #8
 80041e2:	60f8      	str	r0, [r7, #12]
 80041e4:	4608      	mov	r0, r1
 80041e6:	4611      	mov	r1, r2
 80041e8:	461a      	mov	r2, r3
 80041ea:	4603      	mov	r3, r0
 80041ec:	817b      	strh	r3, [r7, #10]
 80041ee:	460b      	mov	r3, r1
 80041f0:	813b      	strh	r3, [r7, #8]
 80041f2:	4613      	mov	r3, r2
 80041f4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041fc:	b2db      	uxtb	r3, r3
 80041fe:	2b20      	cmp	r3, #32
 8004200:	f040 80f9 	bne.w	80043f6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004204:	6a3b      	ldr	r3, [r7, #32]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d002      	beq.n	8004210 <HAL_I2C_Mem_Write+0x34>
 800420a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800420c:	2b00      	cmp	r3, #0
 800420e:	d105      	bne.n	800421c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004216:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004218:	2301      	movs	r3, #1
 800421a:	e0ed      	b.n	80043f8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004222:	2b01      	cmp	r3, #1
 8004224:	d101      	bne.n	800422a <HAL_I2C_Mem_Write+0x4e>
 8004226:	2302      	movs	r3, #2
 8004228:	e0e6      	b.n	80043f8 <HAL_I2C_Mem_Write+0x21c>
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	2201      	movs	r2, #1
 800422e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004232:	f7ff f905 	bl	8003440 <HAL_GetTick>
 8004236:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004238:	697b      	ldr	r3, [r7, #20]
 800423a:	9300      	str	r3, [sp, #0]
 800423c:	2319      	movs	r3, #25
 800423e:	2201      	movs	r2, #1
 8004240:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004244:	68f8      	ldr	r0, [r7, #12]
 8004246:	f000 fadd 	bl	8004804 <I2C_WaitOnFlagUntilTimeout>
 800424a:	4603      	mov	r3, r0
 800424c:	2b00      	cmp	r3, #0
 800424e:	d001      	beq.n	8004254 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004250:	2301      	movs	r3, #1
 8004252:	e0d1      	b.n	80043f8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	2221      	movs	r2, #33	; 0x21
 8004258:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	2240      	movs	r2, #64	; 0x40
 8004260:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	2200      	movs	r2, #0
 8004268:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	6a3a      	ldr	r2, [r7, #32]
 800426e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004274:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	2200      	movs	r2, #0
 800427a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800427c:	88f8      	ldrh	r0, [r7, #6]
 800427e:	893a      	ldrh	r2, [r7, #8]
 8004280:	8979      	ldrh	r1, [r7, #10]
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	9301      	str	r3, [sp, #4]
 8004286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004288:	9300      	str	r3, [sp, #0]
 800428a:	4603      	mov	r3, r0
 800428c:	68f8      	ldr	r0, [r7, #12]
 800428e:	f000 f9ed 	bl	800466c <I2C_RequestMemoryWrite>
 8004292:	4603      	mov	r3, r0
 8004294:	2b00      	cmp	r3, #0
 8004296:	d005      	beq.n	80042a4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	2200      	movs	r2, #0
 800429c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80042a0:	2301      	movs	r3, #1
 80042a2:	e0a9      	b.n	80043f8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042a8:	b29b      	uxth	r3, r3
 80042aa:	2bff      	cmp	r3, #255	; 0xff
 80042ac:	d90e      	bls.n	80042cc <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	22ff      	movs	r2, #255	; 0xff
 80042b2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042b8:	b2da      	uxtb	r2, r3
 80042ba:	8979      	ldrh	r1, [r7, #10]
 80042bc:	2300      	movs	r3, #0
 80042be:	9300      	str	r3, [sp, #0]
 80042c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80042c4:	68f8      	ldr	r0, [r7, #12]
 80042c6:	f000 fc57 	bl	8004b78 <I2C_TransferConfig>
 80042ca:	e00f      	b.n	80042ec <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042d0:	b29a      	uxth	r2, r3
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042da:	b2da      	uxtb	r2, r3
 80042dc:	8979      	ldrh	r1, [r7, #10]
 80042de:	2300      	movs	r3, #0
 80042e0:	9300      	str	r3, [sp, #0]
 80042e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80042e6:	68f8      	ldr	r0, [r7, #12]
 80042e8:	f000 fc46 	bl	8004b78 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042ec:	697a      	ldr	r2, [r7, #20]
 80042ee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80042f0:	68f8      	ldr	r0, [r7, #12]
 80042f2:	f000 fad6 	bl	80048a2 <I2C_WaitOnTXISFlagUntilTimeout>
 80042f6:	4603      	mov	r3, r0
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d001      	beq.n	8004300 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80042fc:	2301      	movs	r3, #1
 80042fe:	e07b      	b.n	80043f8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004304:	781a      	ldrb	r2, [r3, #0]
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004310:	1c5a      	adds	r2, r3, #1
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800431a:	b29b      	uxth	r3, r3
 800431c:	3b01      	subs	r3, #1
 800431e:	b29a      	uxth	r2, r3
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004328:	3b01      	subs	r3, #1
 800432a:	b29a      	uxth	r2, r3
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004334:	b29b      	uxth	r3, r3
 8004336:	2b00      	cmp	r3, #0
 8004338:	d034      	beq.n	80043a4 <HAL_I2C_Mem_Write+0x1c8>
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800433e:	2b00      	cmp	r3, #0
 8004340:	d130      	bne.n	80043a4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	9300      	str	r3, [sp, #0]
 8004346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004348:	2200      	movs	r2, #0
 800434a:	2180      	movs	r1, #128	; 0x80
 800434c:	68f8      	ldr	r0, [r7, #12]
 800434e:	f000 fa59 	bl	8004804 <I2C_WaitOnFlagUntilTimeout>
 8004352:	4603      	mov	r3, r0
 8004354:	2b00      	cmp	r3, #0
 8004356:	d001      	beq.n	800435c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004358:	2301      	movs	r3, #1
 800435a:	e04d      	b.n	80043f8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004360:	b29b      	uxth	r3, r3
 8004362:	2bff      	cmp	r3, #255	; 0xff
 8004364:	d90e      	bls.n	8004384 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	22ff      	movs	r2, #255	; 0xff
 800436a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004370:	b2da      	uxtb	r2, r3
 8004372:	8979      	ldrh	r1, [r7, #10]
 8004374:	2300      	movs	r3, #0
 8004376:	9300      	str	r3, [sp, #0]
 8004378:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800437c:	68f8      	ldr	r0, [r7, #12]
 800437e:	f000 fbfb 	bl	8004b78 <I2C_TransferConfig>
 8004382:	e00f      	b.n	80043a4 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004388:	b29a      	uxth	r2, r3
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004392:	b2da      	uxtb	r2, r3
 8004394:	8979      	ldrh	r1, [r7, #10]
 8004396:	2300      	movs	r3, #0
 8004398:	9300      	str	r3, [sp, #0]
 800439a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800439e:	68f8      	ldr	r0, [r7, #12]
 80043a0:	f000 fbea 	bl	8004b78 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043a8:	b29b      	uxth	r3, r3
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d19e      	bne.n	80042ec <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043ae:	697a      	ldr	r2, [r7, #20]
 80043b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80043b2:	68f8      	ldr	r0, [r7, #12]
 80043b4:	f000 fabc 	bl	8004930 <I2C_WaitOnSTOPFlagUntilTimeout>
 80043b8:	4603      	mov	r3, r0
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d001      	beq.n	80043c2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80043be:	2301      	movs	r3, #1
 80043c0:	e01a      	b.n	80043f8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	2220      	movs	r2, #32
 80043c8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	6859      	ldr	r1, [r3, #4]
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681a      	ldr	r2, [r3, #0]
 80043d4:	4b0a      	ldr	r3, [pc, #40]	; (8004400 <HAL_I2C_Mem_Write+0x224>)
 80043d6:	400b      	ands	r3, r1
 80043d8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	2220      	movs	r2, #32
 80043de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	2200      	movs	r2, #0
 80043e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2200      	movs	r2, #0
 80043ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80043f2:	2300      	movs	r3, #0
 80043f4:	e000      	b.n	80043f8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80043f6:	2302      	movs	r3, #2
  }
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	3718      	adds	r7, #24
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bd80      	pop	{r7, pc}
 8004400:	fe00e800 	.word	0xfe00e800

08004404 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b088      	sub	sp, #32
 8004408:	af02      	add	r7, sp, #8
 800440a:	60f8      	str	r0, [r7, #12]
 800440c:	4608      	mov	r0, r1
 800440e:	4611      	mov	r1, r2
 8004410:	461a      	mov	r2, r3
 8004412:	4603      	mov	r3, r0
 8004414:	817b      	strh	r3, [r7, #10]
 8004416:	460b      	mov	r3, r1
 8004418:	813b      	strh	r3, [r7, #8]
 800441a:	4613      	mov	r3, r2
 800441c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004424:	b2db      	uxtb	r3, r3
 8004426:	2b20      	cmp	r3, #32
 8004428:	f040 80fd 	bne.w	8004626 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800442c:	6a3b      	ldr	r3, [r7, #32]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d002      	beq.n	8004438 <HAL_I2C_Mem_Read+0x34>
 8004432:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004434:	2b00      	cmp	r3, #0
 8004436:	d105      	bne.n	8004444 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800443e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004440:	2301      	movs	r3, #1
 8004442:	e0f1      	b.n	8004628 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800444a:	2b01      	cmp	r3, #1
 800444c:	d101      	bne.n	8004452 <HAL_I2C_Mem_Read+0x4e>
 800444e:	2302      	movs	r3, #2
 8004450:	e0ea      	b.n	8004628 <HAL_I2C_Mem_Read+0x224>
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	2201      	movs	r2, #1
 8004456:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800445a:	f7fe fff1 	bl	8003440 <HAL_GetTick>
 800445e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	9300      	str	r3, [sp, #0]
 8004464:	2319      	movs	r3, #25
 8004466:	2201      	movs	r2, #1
 8004468:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800446c:	68f8      	ldr	r0, [r7, #12]
 800446e:	f000 f9c9 	bl	8004804 <I2C_WaitOnFlagUntilTimeout>
 8004472:	4603      	mov	r3, r0
 8004474:	2b00      	cmp	r3, #0
 8004476:	d001      	beq.n	800447c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004478:	2301      	movs	r3, #1
 800447a:	e0d5      	b.n	8004628 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	2222      	movs	r2, #34	; 0x22
 8004480:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	2240      	movs	r2, #64	; 0x40
 8004488:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	2200      	movs	r2, #0
 8004490:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	6a3a      	ldr	r2, [r7, #32]
 8004496:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800449c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	2200      	movs	r2, #0
 80044a2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80044a4:	88f8      	ldrh	r0, [r7, #6]
 80044a6:	893a      	ldrh	r2, [r7, #8]
 80044a8:	8979      	ldrh	r1, [r7, #10]
 80044aa:	697b      	ldr	r3, [r7, #20]
 80044ac:	9301      	str	r3, [sp, #4]
 80044ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044b0:	9300      	str	r3, [sp, #0]
 80044b2:	4603      	mov	r3, r0
 80044b4:	68f8      	ldr	r0, [r7, #12]
 80044b6:	f000 f92d 	bl	8004714 <I2C_RequestMemoryRead>
 80044ba:	4603      	mov	r3, r0
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d005      	beq.n	80044cc <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	2200      	movs	r2, #0
 80044c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80044c8:	2301      	movs	r3, #1
 80044ca:	e0ad      	b.n	8004628 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044d0:	b29b      	uxth	r3, r3
 80044d2:	2bff      	cmp	r3, #255	; 0xff
 80044d4:	d90e      	bls.n	80044f4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	22ff      	movs	r2, #255	; 0xff
 80044da:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044e0:	b2da      	uxtb	r2, r3
 80044e2:	8979      	ldrh	r1, [r7, #10]
 80044e4:	4b52      	ldr	r3, [pc, #328]	; (8004630 <HAL_I2C_Mem_Read+0x22c>)
 80044e6:	9300      	str	r3, [sp, #0]
 80044e8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80044ec:	68f8      	ldr	r0, [r7, #12]
 80044ee:	f000 fb43 	bl	8004b78 <I2C_TransferConfig>
 80044f2:	e00f      	b.n	8004514 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044f8:	b29a      	uxth	r2, r3
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004502:	b2da      	uxtb	r2, r3
 8004504:	8979      	ldrh	r1, [r7, #10]
 8004506:	4b4a      	ldr	r3, [pc, #296]	; (8004630 <HAL_I2C_Mem_Read+0x22c>)
 8004508:	9300      	str	r3, [sp, #0]
 800450a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800450e:	68f8      	ldr	r0, [r7, #12]
 8004510:	f000 fb32 	bl	8004b78 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	9300      	str	r3, [sp, #0]
 8004518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800451a:	2200      	movs	r2, #0
 800451c:	2104      	movs	r1, #4
 800451e:	68f8      	ldr	r0, [r7, #12]
 8004520:	f000 f970 	bl	8004804 <I2C_WaitOnFlagUntilTimeout>
 8004524:	4603      	mov	r3, r0
 8004526:	2b00      	cmp	r3, #0
 8004528:	d001      	beq.n	800452e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800452a:	2301      	movs	r3, #1
 800452c:	e07c      	b.n	8004628 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004538:	b2d2      	uxtb	r2, r2
 800453a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004540:	1c5a      	adds	r2, r3, #1
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800454a:	3b01      	subs	r3, #1
 800454c:	b29a      	uxth	r2, r3
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004556:	b29b      	uxth	r3, r3
 8004558:	3b01      	subs	r3, #1
 800455a:	b29a      	uxth	r2, r3
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004564:	b29b      	uxth	r3, r3
 8004566:	2b00      	cmp	r3, #0
 8004568:	d034      	beq.n	80045d4 <HAL_I2C_Mem_Read+0x1d0>
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800456e:	2b00      	cmp	r3, #0
 8004570:	d130      	bne.n	80045d4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	9300      	str	r3, [sp, #0]
 8004576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004578:	2200      	movs	r2, #0
 800457a:	2180      	movs	r1, #128	; 0x80
 800457c:	68f8      	ldr	r0, [r7, #12]
 800457e:	f000 f941 	bl	8004804 <I2C_WaitOnFlagUntilTimeout>
 8004582:	4603      	mov	r3, r0
 8004584:	2b00      	cmp	r3, #0
 8004586:	d001      	beq.n	800458c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004588:	2301      	movs	r3, #1
 800458a:	e04d      	b.n	8004628 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004590:	b29b      	uxth	r3, r3
 8004592:	2bff      	cmp	r3, #255	; 0xff
 8004594:	d90e      	bls.n	80045b4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	22ff      	movs	r2, #255	; 0xff
 800459a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045a0:	b2da      	uxtb	r2, r3
 80045a2:	8979      	ldrh	r1, [r7, #10]
 80045a4:	2300      	movs	r3, #0
 80045a6:	9300      	str	r3, [sp, #0]
 80045a8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80045ac:	68f8      	ldr	r0, [r7, #12]
 80045ae:	f000 fae3 	bl	8004b78 <I2C_TransferConfig>
 80045b2:	e00f      	b.n	80045d4 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045b8:	b29a      	uxth	r2, r3
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045c2:	b2da      	uxtb	r2, r3
 80045c4:	8979      	ldrh	r1, [r7, #10]
 80045c6:	2300      	movs	r3, #0
 80045c8:	9300      	str	r3, [sp, #0]
 80045ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80045ce:	68f8      	ldr	r0, [r7, #12]
 80045d0:	f000 fad2 	bl	8004b78 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045d8:	b29b      	uxth	r3, r3
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d19a      	bne.n	8004514 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045de:	697a      	ldr	r2, [r7, #20]
 80045e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80045e2:	68f8      	ldr	r0, [r7, #12]
 80045e4:	f000 f9a4 	bl	8004930 <I2C_WaitOnSTOPFlagUntilTimeout>
 80045e8:	4603      	mov	r3, r0
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d001      	beq.n	80045f2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80045ee:	2301      	movs	r3, #1
 80045f0:	e01a      	b.n	8004628 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	2220      	movs	r2, #32
 80045f8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	6859      	ldr	r1, [r3, #4]
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681a      	ldr	r2, [r3, #0]
 8004604:	4b0b      	ldr	r3, [pc, #44]	; (8004634 <HAL_I2C_Mem_Read+0x230>)
 8004606:	400b      	ands	r3, r1
 8004608:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	2220      	movs	r2, #32
 800460e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	2200      	movs	r2, #0
 8004616:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	2200      	movs	r2, #0
 800461e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004622:	2300      	movs	r3, #0
 8004624:	e000      	b.n	8004628 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8004626:	2302      	movs	r3, #2
  }
}
 8004628:	4618      	mov	r0, r3
 800462a:	3718      	adds	r7, #24
 800462c:	46bd      	mov	sp, r7
 800462e:	bd80      	pop	{r7, pc}
 8004630:	80002400 	.word	0x80002400
 8004634:	fe00e800 	.word	0xfe00e800

08004638 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b084      	sub	sp, #16
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	699b      	ldr	r3, [r3, #24]
 8004646:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004654:	2b00      	cmp	r3, #0
 8004656:	d005      	beq.n	8004664 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800465c:	68ba      	ldr	r2, [r7, #8]
 800465e:	68f9      	ldr	r1, [r7, #12]
 8004660:	6878      	ldr	r0, [r7, #4]
 8004662:	4798      	blx	r3
  }
}
 8004664:	bf00      	nop
 8004666:	3710      	adds	r7, #16
 8004668:	46bd      	mov	sp, r7
 800466a:	bd80      	pop	{r7, pc}

0800466c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b086      	sub	sp, #24
 8004670:	af02      	add	r7, sp, #8
 8004672:	60f8      	str	r0, [r7, #12]
 8004674:	4608      	mov	r0, r1
 8004676:	4611      	mov	r1, r2
 8004678:	461a      	mov	r2, r3
 800467a:	4603      	mov	r3, r0
 800467c:	817b      	strh	r3, [r7, #10]
 800467e:	460b      	mov	r3, r1
 8004680:	813b      	strh	r3, [r7, #8]
 8004682:	4613      	mov	r3, r2
 8004684:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004686:	88fb      	ldrh	r3, [r7, #6]
 8004688:	b2da      	uxtb	r2, r3
 800468a:	8979      	ldrh	r1, [r7, #10]
 800468c:	4b20      	ldr	r3, [pc, #128]	; (8004710 <I2C_RequestMemoryWrite+0xa4>)
 800468e:	9300      	str	r3, [sp, #0]
 8004690:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004694:	68f8      	ldr	r0, [r7, #12]
 8004696:	f000 fa6f 	bl	8004b78 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800469a:	69fa      	ldr	r2, [r7, #28]
 800469c:	69b9      	ldr	r1, [r7, #24]
 800469e:	68f8      	ldr	r0, [r7, #12]
 80046a0:	f000 f8ff 	bl	80048a2 <I2C_WaitOnTXISFlagUntilTimeout>
 80046a4:	4603      	mov	r3, r0
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d001      	beq.n	80046ae <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80046aa:	2301      	movs	r3, #1
 80046ac:	e02c      	b.n	8004708 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80046ae:	88fb      	ldrh	r3, [r7, #6]
 80046b0:	2b01      	cmp	r3, #1
 80046b2:	d105      	bne.n	80046c0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80046b4:	893b      	ldrh	r3, [r7, #8]
 80046b6:	b2da      	uxtb	r2, r3
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	629a      	str	r2, [r3, #40]	; 0x28
 80046be:	e015      	b.n	80046ec <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80046c0:	893b      	ldrh	r3, [r7, #8]
 80046c2:	0a1b      	lsrs	r3, r3, #8
 80046c4:	b29b      	uxth	r3, r3
 80046c6:	b2da      	uxtb	r2, r3
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80046ce:	69fa      	ldr	r2, [r7, #28]
 80046d0:	69b9      	ldr	r1, [r7, #24]
 80046d2:	68f8      	ldr	r0, [r7, #12]
 80046d4:	f000 f8e5 	bl	80048a2 <I2C_WaitOnTXISFlagUntilTimeout>
 80046d8:	4603      	mov	r3, r0
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d001      	beq.n	80046e2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80046de:	2301      	movs	r3, #1
 80046e0:	e012      	b.n	8004708 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80046e2:	893b      	ldrh	r3, [r7, #8]
 80046e4:	b2da      	uxtb	r2, r3
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80046ec:	69fb      	ldr	r3, [r7, #28]
 80046ee:	9300      	str	r3, [sp, #0]
 80046f0:	69bb      	ldr	r3, [r7, #24]
 80046f2:	2200      	movs	r2, #0
 80046f4:	2180      	movs	r1, #128	; 0x80
 80046f6:	68f8      	ldr	r0, [r7, #12]
 80046f8:	f000 f884 	bl	8004804 <I2C_WaitOnFlagUntilTimeout>
 80046fc:	4603      	mov	r3, r0
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d001      	beq.n	8004706 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004702:	2301      	movs	r3, #1
 8004704:	e000      	b.n	8004708 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004706:	2300      	movs	r3, #0
}
 8004708:	4618      	mov	r0, r3
 800470a:	3710      	adds	r7, #16
 800470c:	46bd      	mov	sp, r7
 800470e:	bd80      	pop	{r7, pc}
 8004710:	80002000 	.word	0x80002000

08004714 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b086      	sub	sp, #24
 8004718:	af02      	add	r7, sp, #8
 800471a:	60f8      	str	r0, [r7, #12]
 800471c:	4608      	mov	r0, r1
 800471e:	4611      	mov	r1, r2
 8004720:	461a      	mov	r2, r3
 8004722:	4603      	mov	r3, r0
 8004724:	817b      	strh	r3, [r7, #10]
 8004726:	460b      	mov	r3, r1
 8004728:	813b      	strh	r3, [r7, #8]
 800472a:	4613      	mov	r3, r2
 800472c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800472e:	88fb      	ldrh	r3, [r7, #6]
 8004730:	b2da      	uxtb	r2, r3
 8004732:	8979      	ldrh	r1, [r7, #10]
 8004734:	4b20      	ldr	r3, [pc, #128]	; (80047b8 <I2C_RequestMemoryRead+0xa4>)
 8004736:	9300      	str	r3, [sp, #0]
 8004738:	2300      	movs	r3, #0
 800473a:	68f8      	ldr	r0, [r7, #12]
 800473c:	f000 fa1c 	bl	8004b78 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004740:	69fa      	ldr	r2, [r7, #28]
 8004742:	69b9      	ldr	r1, [r7, #24]
 8004744:	68f8      	ldr	r0, [r7, #12]
 8004746:	f000 f8ac 	bl	80048a2 <I2C_WaitOnTXISFlagUntilTimeout>
 800474a:	4603      	mov	r3, r0
 800474c:	2b00      	cmp	r3, #0
 800474e:	d001      	beq.n	8004754 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004750:	2301      	movs	r3, #1
 8004752:	e02c      	b.n	80047ae <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004754:	88fb      	ldrh	r3, [r7, #6]
 8004756:	2b01      	cmp	r3, #1
 8004758:	d105      	bne.n	8004766 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800475a:	893b      	ldrh	r3, [r7, #8]
 800475c:	b2da      	uxtb	r2, r3
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	629a      	str	r2, [r3, #40]	; 0x28
 8004764:	e015      	b.n	8004792 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004766:	893b      	ldrh	r3, [r7, #8]
 8004768:	0a1b      	lsrs	r3, r3, #8
 800476a:	b29b      	uxth	r3, r3
 800476c:	b2da      	uxtb	r2, r3
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004774:	69fa      	ldr	r2, [r7, #28]
 8004776:	69b9      	ldr	r1, [r7, #24]
 8004778:	68f8      	ldr	r0, [r7, #12]
 800477a:	f000 f892 	bl	80048a2 <I2C_WaitOnTXISFlagUntilTimeout>
 800477e:	4603      	mov	r3, r0
 8004780:	2b00      	cmp	r3, #0
 8004782:	d001      	beq.n	8004788 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004784:	2301      	movs	r3, #1
 8004786:	e012      	b.n	80047ae <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004788:	893b      	ldrh	r3, [r7, #8]
 800478a:	b2da      	uxtb	r2, r3
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004792:	69fb      	ldr	r3, [r7, #28]
 8004794:	9300      	str	r3, [sp, #0]
 8004796:	69bb      	ldr	r3, [r7, #24]
 8004798:	2200      	movs	r2, #0
 800479a:	2140      	movs	r1, #64	; 0x40
 800479c:	68f8      	ldr	r0, [r7, #12]
 800479e:	f000 f831 	bl	8004804 <I2C_WaitOnFlagUntilTimeout>
 80047a2:	4603      	mov	r3, r0
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d001      	beq.n	80047ac <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80047a8:	2301      	movs	r3, #1
 80047aa:	e000      	b.n	80047ae <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80047ac:	2300      	movs	r3, #0
}
 80047ae:	4618      	mov	r0, r3
 80047b0:	3710      	adds	r7, #16
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bd80      	pop	{r7, pc}
 80047b6:	bf00      	nop
 80047b8:	80002000 	.word	0x80002000

080047bc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80047bc:	b480      	push	{r7}
 80047be:	b083      	sub	sp, #12
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	699b      	ldr	r3, [r3, #24]
 80047ca:	f003 0302 	and.w	r3, r3, #2
 80047ce:	2b02      	cmp	r3, #2
 80047d0:	d103      	bne.n	80047da <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	2200      	movs	r2, #0
 80047d8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	699b      	ldr	r3, [r3, #24]
 80047e0:	f003 0301 	and.w	r3, r3, #1
 80047e4:	2b01      	cmp	r3, #1
 80047e6:	d007      	beq.n	80047f8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	699a      	ldr	r2, [r3, #24]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f042 0201 	orr.w	r2, r2, #1
 80047f6:	619a      	str	r2, [r3, #24]
  }
}
 80047f8:	bf00      	nop
 80047fa:	370c      	adds	r7, #12
 80047fc:	46bd      	mov	sp, r7
 80047fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004802:	4770      	bx	lr

08004804 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b084      	sub	sp, #16
 8004808:	af00      	add	r7, sp, #0
 800480a:	60f8      	str	r0, [r7, #12]
 800480c:	60b9      	str	r1, [r7, #8]
 800480e:	603b      	str	r3, [r7, #0]
 8004810:	4613      	mov	r3, r2
 8004812:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004814:	e031      	b.n	800487a <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800481c:	d02d      	beq.n	800487a <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800481e:	f7fe fe0f 	bl	8003440 <HAL_GetTick>
 8004822:	4602      	mov	r2, r0
 8004824:	69bb      	ldr	r3, [r7, #24]
 8004826:	1ad3      	subs	r3, r2, r3
 8004828:	683a      	ldr	r2, [r7, #0]
 800482a:	429a      	cmp	r2, r3
 800482c:	d302      	bcc.n	8004834 <I2C_WaitOnFlagUntilTimeout+0x30>
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d122      	bne.n	800487a <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	699a      	ldr	r2, [r3, #24]
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	4013      	ands	r3, r2
 800483e:	68ba      	ldr	r2, [r7, #8]
 8004840:	429a      	cmp	r2, r3
 8004842:	bf0c      	ite	eq
 8004844:	2301      	moveq	r3, #1
 8004846:	2300      	movne	r3, #0
 8004848:	b2db      	uxtb	r3, r3
 800484a:	461a      	mov	r2, r3
 800484c:	79fb      	ldrb	r3, [r7, #7]
 800484e:	429a      	cmp	r2, r3
 8004850:	d113      	bne.n	800487a <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004856:	f043 0220 	orr.w	r2, r3, #32
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	2220      	movs	r2, #32
 8004862:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	2200      	movs	r2, #0
 800486a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	2200      	movs	r2, #0
 8004872:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8004876:	2301      	movs	r3, #1
 8004878:	e00f      	b.n	800489a <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	699a      	ldr	r2, [r3, #24]
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	4013      	ands	r3, r2
 8004884:	68ba      	ldr	r2, [r7, #8]
 8004886:	429a      	cmp	r2, r3
 8004888:	bf0c      	ite	eq
 800488a:	2301      	moveq	r3, #1
 800488c:	2300      	movne	r3, #0
 800488e:	b2db      	uxtb	r3, r3
 8004890:	461a      	mov	r2, r3
 8004892:	79fb      	ldrb	r3, [r7, #7]
 8004894:	429a      	cmp	r2, r3
 8004896:	d0be      	beq.n	8004816 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004898:	2300      	movs	r3, #0
}
 800489a:	4618      	mov	r0, r3
 800489c:	3710      	adds	r7, #16
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd80      	pop	{r7, pc}

080048a2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80048a2:	b580      	push	{r7, lr}
 80048a4:	b084      	sub	sp, #16
 80048a6:	af00      	add	r7, sp, #0
 80048a8:	60f8      	str	r0, [r7, #12]
 80048aa:	60b9      	str	r1, [r7, #8]
 80048ac:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80048ae:	e033      	b.n	8004918 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80048b0:	687a      	ldr	r2, [r7, #4]
 80048b2:	68b9      	ldr	r1, [r7, #8]
 80048b4:	68f8      	ldr	r0, [r7, #12]
 80048b6:	f000 f87f 	bl	80049b8 <I2C_IsErrorOccurred>
 80048ba:	4603      	mov	r3, r0
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d001      	beq.n	80048c4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80048c0:	2301      	movs	r3, #1
 80048c2:	e031      	b.n	8004928 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80048ca:	d025      	beq.n	8004918 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048cc:	f7fe fdb8 	bl	8003440 <HAL_GetTick>
 80048d0:	4602      	mov	r2, r0
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	1ad3      	subs	r3, r2, r3
 80048d6:	68ba      	ldr	r2, [r7, #8]
 80048d8:	429a      	cmp	r2, r3
 80048da:	d302      	bcc.n	80048e2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d11a      	bne.n	8004918 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	699b      	ldr	r3, [r3, #24]
 80048e8:	f003 0302 	and.w	r3, r3, #2
 80048ec:	2b02      	cmp	r3, #2
 80048ee:	d013      	beq.n	8004918 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048f4:	f043 0220 	orr.w	r2, r3, #32
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	2220      	movs	r2, #32
 8004900:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	2200      	movs	r2, #0
 8004908:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	2200      	movs	r2, #0
 8004910:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004914:	2301      	movs	r3, #1
 8004916:	e007      	b.n	8004928 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	699b      	ldr	r3, [r3, #24]
 800491e:	f003 0302 	and.w	r3, r3, #2
 8004922:	2b02      	cmp	r3, #2
 8004924:	d1c4      	bne.n	80048b0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004926:	2300      	movs	r3, #0
}
 8004928:	4618      	mov	r0, r3
 800492a:	3710      	adds	r7, #16
 800492c:	46bd      	mov	sp, r7
 800492e:	bd80      	pop	{r7, pc}

08004930 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b084      	sub	sp, #16
 8004934:	af00      	add	r7, sp, #0
 8004936:	60f8      	str	r0, [r7, #12]
 8004938:	60b9      	str	r1, [r7, #8]
 800493a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800493c:	e02f      	b.n	800499e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800493e:	687a      	ldr	r2, [r7, #4]
 8004940:	68b9      	ldr	r1, [r7, #8]
 8004942:	68f8      	ldr	r0, [r7, #12]
 8004944:	f000 f838 	bl	80049b8 <I2C_IsErrorOccurred>
 8004948:	4603      	mov	r3, r0
 800494a:	2b00      	cmp	r3, #0
 800494c:	d001      	beq.n	8004952 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800494e:	2301      	movs	r3, #1
 8004950:	e02d      	b.n	80049ae <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004952:	f7fe fd75 	bl	8003440 <HAL_GetTick>
 8004956:	4602      	mov	r2, r0
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	1ad3      	subs	r3, r2, r3
 800495c:	68ba      	ldr	r2, [r7, #8]
 800495e:	429a      	cmp	r2, r3
 8004960:	d302      	bcc.n	8004968 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d11a      	bne.n	800499e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	699b      	ldr	r3, [r3, #24]
 800496e:	f003 0320 	and.w	r3, r3, #32
 8004972:	2b20      	cmp	r3, #32
 8004974:	d013      	beq.n	800499e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800497a:	f043 0220 	orr.w	r2, r3, #32
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	2220      	movs	r2, #32
 8004986:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	2200      	movs	r2, #0
 800498e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	2200      	movs	r2, #0
 8004996:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800499a:	2301      	movs	r3, #1
 800499c:	e007      	b.n	80049ae <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	699b      	ldr	r3, [r3, #24]
 80049a4:	f003 0320 	and.w	r3, r3, #32
 80049a8:	2b20      	cmp	r3, #32
 80049aa:	d1c8      	bne.n	800493e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80049ac:	2300      	movs	r3, #0
}
 80049ae:	4618      	mov	r0, r3
 80049b0:	3710      	adds	r7, #16
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bd80      	pop	{r7, pc}
	...

080049b8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b08a      	sub	sp, #40	; 0x28
 80049bc:	af00      	add	r7, sp, #0
 80049be:	60f8      	str	r0, [r7, #12]
 80049c0:	60b9      	str	r1, [r7, #8]
 80049c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80049c4:	2300      	movs	r3, #0
 80049c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	699b      	ldr	r3, [r3, #24]
 80049d0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80049d2:	2300      	movs	r3, #0
 80049d4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80049da:	69bb      	ldr	r3, [r7, #24]
 80049dc:	f003 0310 	and.w	r3, r3, #16
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d068      	beq.n	8004ab6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	2210      	movs	r2, #16
 80049ea:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80049ec:	e049      	b.n	8004a82 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80049f4:	d045      	beq.n	8004a82 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80049f6:	f7fe fd23 	bl	8003440 <HAL_GetTick>
 80049fa:	4602      	mov	r2, r0
 80049fc:	69fb      	ldr	r3, [r7, #28]
 80049fe:	1ad3      	subs	r3, r2, r3
 8004a00:	68ba      	ldr	r2, [r7, #8]
 8004a02:	429a      	cmp	r2, r3
 8004a04:	d302      	bcc.n	8004a0c <I2C_IsErrorOccurred+0x54>
 8004a06:	68bb      	ldr	r3, [r7, #8]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d13a      	bne.n	8004a82 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a16:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004a1e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	699b      	ldr	r3, [r3, #24]
 8004a26:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a2e:	d121      	bne.n	8004a74 <I2C_IsErrorOccurred+0xbc>
 8004a30:	697b      	ldr	r3, [r7, #20]
 8004a32:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a36:	d01d      	beq.n	8004a74 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004a38:	7cfb      	ldrb	r3, [r7, #19]
 8004a3a:	2b20      	cmp	r3, #32
 8004a3c:	d01a      	beq.n	8004a74 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	685a      	ldr	r2, [r3, #4]
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004a4c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004a4e:	f7fe fcf7 	bl	8003440 <HAL_GetTick>
 8004a52:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004a54:	e00e      	b.n	8004a74 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004a56:	f7fe fcf3 	bl	8003440 <HAL_GetTick>
 8004a5a:	4602      	mov	r2, r0
 8004a5c:	69fb      	ldr	r3, [r7, #28]
 8004a5e:	1ad3      	subs	r3, r2, r3
 8004a60:	2b19      	cmp	r3, #25
 8004a62:	d907      	bls.n	8004a74 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004a64:	6a3b      	ldr	r3, [r7, #32]
 8004a66:	f043 0320 	orr.w	r3, r3, #32
 8004a6a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8004a72:	e006      	b.n	8004a82 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	699b      	ldr	r3, [r3, #24]
 8004a7a:	f003 0320 	and.w	r3, r3, #32
 8004a7e:	2b20      	cmp	r3, #32
 8004a80:	d1e9      	bne.n	8004a56 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	699b      	ldr	r3, [r3, #24]
 8004a88:	f003 0320 	and.w	r3, r3, #32
 8004a8c:	2b20      	cmp	r3, #32
 8004a8e:	d003      	beq.n	8004a98 <I2C_IsErrorOccurred+0xe0>
 8004a90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d0aa      	beq.n	80049ee <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004a98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d103      	bne.n	8004aa8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	2220      	movs	r2, #32
 8004aa6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004aa8:	6a3b      	ldr	r3, [r7, #32]
 8004aaa:	f043 0304 	orr.w	r3, r3, #4
 8004aae:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	699b      	ldr	r3, [r3, #24]
 8004abc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004abe:	69bb      	ldr	r3, [r7, #24]
 8004ac0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d00b      	beq.n	8004ae0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004ac8:	6a3b      	ldr	r3, [r7, #32]
 8004aca:	f043 0301 	orr.w	r3, r3, #1
 8004ace:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004ad8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004ada:	2301      	movs	r3, #1
 8004adc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004ae0:	69bb      	ldr	r3, [r7, #24]
 8004ae2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d00b      	beq.n	8004b02 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004aea:	6a3b      	ldr	r3, [r7, #32]
 8004aec:	f043 0308 	orr.w	r3, r3, #8
 8004af0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004afa:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004afc:	2301      	movs	r3, #1
 8004afe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004b02:	69bb      	ldr	r3, [r7, #24]
 8004b04:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d00b      	beq.n	8004b24 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004b0c:	6a3b      	ldr	r3, [r7, #32]
 8004b0e:	f043 0302 	orr.w	r3, r3, #2
 8004b12:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b1c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8004b24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d01c      	beq.n	8004b66 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004b2c:	68f8      	ldr	r0, [r7, #12]
 8004b2e:	f7ff fe45 	bl	80047bc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	6859      	ldr	r1, [r3, #4]
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681a      	ldr	r2, [r3, #0]
 8004b3c:	4b0d      	ldr	r3, [pc, #52]	; (8004b74 <I2C_IsErrorOccurred+0x1bc>)
 8004b3e:	400b      	ands	r3, r1
 8004b40:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b46:	6a3b      	ldr	r3, [r7, #32]
 8004b48:	431a      	orrs	r2, r3
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	2220      	movs	r2, #32
 8004b52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	2200      	movs	r2, #0
 8004b62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8004b66:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	3728      	adds	r7, #40	; 0x28
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bd80      	pop	{r7, pc}
 8004b72:	bf00      	nop
 8004b74:	fe00e800 	.word	0xfe00e800

08004b78 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b087      	sub	sp, #28
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	60f8      	str	r0, [r7, #12]
 8004b80:	607b      	str	r3, [r7, #4]
 8004b82:	460b      	mov	r3, r1
 8004b84:	817b      	strh	r3, [r7, #10]
 8004b86:	4613      	mov	r3, r2
 8004b88:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004b8a:	897b      	ldrh	r3, [r7, #10]
 8004b8c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004b90:	7a7b      	ldrb	r3, [r7, #9]
 8004b92:	041b      	lsls	r3, r3, #16
 8004b94:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004b98:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004b9e:	6a3b      	ldr	r3, [r7, #32]
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004ba6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	685a      	ldr	r2, [r3, #4]
 8004bae:	6a3b      	ldr	r3, [r7, #32]
 8004bb0:	0d5b      	lsrs	r3, r3, #21
 8004bb2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004bb6:	4b08      	ldr	r3, [pc, #32]	; (8004bd8 <I2C_TransferConfig+0x60>)
 8004bb8:	430b      	orrs	r3, r1
 8004bba:	43db      	mvns	r3, r3
 8004bbc:	ea02 0103 	and.w	r1, r2, r3
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	697a      	ldr	r2, [r7, #20]
 8004bc6:	430a      	orrs	r2, r1
 8004bc8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004bca:	bf00      	nop
 8004bcc:	371c      	adds	r7, #28
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd4:	4770      	bx	lr
 8004bd6:	bf00      	nop
 8004bd8:	03ff63ff 	.word	0x03ff63ff

08004bdc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	b083      	sub	sp, #12
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
 8004be4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004bec:	b2db      	uxtb	r3, r3
 8004bee:	2b20      	cmp	r3, #32
 8004bf0:	d138      	bne.n	8004c64 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004bf8:	2b01      	cmp	r3, #1
 8004bfa:	d101      	bne.n	8004c00 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004bfc:	2302      	movs	r3, #2
 8004bfe:	e032      	b.n	8004c66 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2201      	movs	r2, #1
 8004c04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2224      	movs	r2, #36	; 0x24
 8004c0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	681a      	ldr	r2, [r3, #0]
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f022 0201 	bic.w	r2, r2, #1
 8004c1e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	681a      	ldr	r2, [r3, #0]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004c2e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	6819      	ldr	r1, [r3, #0]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	683a      	ldr	r2, [r7, #0]
 8004c3c:	430a      	orrs	r2, r1
 8004c3e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	681a      	ldr	r2, [r3, #0]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f042 0201 	orr.w	r2, r2, #1
 8004c4e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2220      	movs	r2, #32
 8004c54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004c60:	2300      	movs	r3, #0
 8004c62:	e000      	b.n	8004c66 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004c64:	2302      	movs	r3, #2
  }
}
 8004c66:	4618      	mov	r0, r3
 8004c68:	370c      	adds	r7, #12
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c70:	4770      	bx	lr

08004c72 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004c72:	b480      	push	{r7}
 8004c74:	b085      	sub	sp, #20
 8004c76:	af00      	add	r7, sp, #0
 8004c78:	6078      	str	r0, [r7, #4]
 8004c7a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c82:	b2db      	uxtb	r3, r3
 8004c84:	2b20      	cmp	r3, #32
 8004c86:	d139      	bne.n	8004cfc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004c8e:	2b01      	cmp	r3, #1
 8004c90:	d101      	bne.n	8004c96 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004c92:	2302      	movs	r3, #2
 8004c94:	e033      	b.n	8004cfe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2201      	movs	r2, #1
 8004c9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2224      	movs	r2, #36	; 0x24
 8004ca2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	681a      	ldr	r2, [r3, #0]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f022 0201 	bic.w	r2, r2, #1
 8004cb4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004cc4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	021b      	lsls	r3, r3, #8
 8004cca:	68fa      	ldr	r2, [r7, #12]
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	68fa      	ldr	r2, [r7, #12]
 8004cd6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	681a      	ldr	r2, [r3, #0]
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f042 0201 	orr.w	r2, r2, #1
 8004ce6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2220      	movs	r2, #32
 8004cec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	e000      	b.n	8004cfe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004cfc:	2302      	movs	r3, #2
  }
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	3714      	adds	r7, #20
 8004d02:	46bd      	mov	sp, r7
 8004d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d08:	4770      	bx	lr
	...

08004d0c <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b084      	sub	sp, #16
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8004d14:	2300      	movs	r3, #0
 8004d16:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d01e      	beq.n	8004d5c <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8004d1e:	4b13      	ldr	r3, [pc, #76]	; (8004d6c <HAL_IPCC_Init+0x60>)
 8004d20:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004d28:	b2db      	uxtb	r3, r3
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d102      	bne.n	8004d34 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 8004d2e:	6878      	ldr	r0, [r7, #4]
 8004d30:	f7fe f812 	bl	8002d58 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8004d34:	68b8      	ldr	r0, [r7, #8]
 8004d36:	f000 f85b 	bl	8004df0 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 8004d46:	6878      	ldr	r0, [r7, #4]
 8004d48:	f000 f82c 	bl	8004da4 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2201      	movs	r2, #1
 8004d56:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8004d5a:	e001      	b.n	8004d60 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8004d60:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	3710      	adds	r7, #16
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bd80      	pop	{r7, pc}
 8004d6a:	bf00      	nop
 8004d6c:	58000c00 	.word	0x58000c00

08004d70 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8004d70:	b480      	push	{r7}
 8004d72:	b085      	sub	sp, #20
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	60f8      	str	r0, [r7, #12]
 8004d78:	60b9      	str	r1, [r7, #8]
 8004d7a:	4613      	mov	r3, r2
 8004d7c:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 8004d7e:	bf00      	nop
 8004d80:	3714      	adds	r7, #20
 8004d82:	46bd      	mov	sp, r7
 8004d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d88:	4770      	bx	lr

08004d8a <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8004d8a:	b480      	push	{r7}
 8004d8c:	b085      	sub	sp, #20
 8004d8e:	af00      	add	r7, sp, #0
 8004d90:	60f8      	str	r0, [r7, #12]
 8004d92:	60b9      	str	r1, [r7, #8]
 8004d94:	4613      	mov	r3, r2
 8004d96:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8004d98:	bf00      	nop
 8004d9a:	3714      	adds	r7, #20
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da2:	4770      	bx	lr

08004da4 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 8004da4:	b480      	push	{r7}
 8004da6:	b085      	sub	sp, #20
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8004dac:	2300      	movs	r3, #0
 8004dae:	60fb      	str	r3, [r7, #12]
 8004db0:	e00f      	b.n	8004dd2 <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 8004db2:	687a      	ldr	r2, [r7, #4]
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	009b      	lsls	r3, r3, #2
 8004db8:	4413      	add	r3, r2
 8004dba:	4a0b      	ldr	r2, [pc, #44]	; (8004de8 <IPCC_SetDefaultCallbacks+0x44>)
 8004dbc:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 8004dbe:	687a      	ldr	r2, [r7, #4]
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	3306      	adds	r3, #6
 8004dc4:	009b      	lsls	r3, r3, #2
 8004dc6:	4413      	add	r3, r2
 8004dc8:	4a08      	ldr	r2, [pc, #32]	; (8004dec <IPCC_SetDefaultCallbacks+0x48>)
 8004dca:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	3301      	adds	r3, #1
 8004dd0:	60fb      	str	r3, [r7, #12]
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	2b05      	cmp	r3, #5
 8004dd6:	d9ec      	bls.n	8004db2 <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8004dd8:	bf00      	nop
 8004dda:	bf00      	nop
 8004ddc:	3714      	adds	r7, #20
 8004dde:	46bd      	mov	sp, r7
 8004de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de4:	4770      	bx	lr
 8004de6:	bf00      	nop
 8004de8:	08004d71 	.word	0x08004d71
 8004dec:	08004d8b 	.word	0x08004d8b

08004df0 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8004df0:	b480      	push	{r7}
 8004df2:	b083      	sub	sp, #12
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
 8004e04:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	223f      	movs	r2, #63	; 0x3f
 8004e0a:	609a      	str	r2, [r3, #8]
}
 8004e0c:	bf00      	nop
 8004e0e:	370c      	adds	r7, #12
 8004e10:	46bd      	mov	sp, r7
 8004e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e16:	4770      	bx	lr

08004e18 <LL_RCC_SetLPTIMClockSource>:
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b083      	sub	sp, #12
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8004e20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e24:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	0c1b      	lsrs	r3, r3, #16
 8004e2c:	041b      	lsls	r3, r3, #16
 8004e2e:	43db      	mvns	r3, r3
 8004e30:	401a      	ands	r2, r3
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	041b      	lsls	r3, r3, #16
 8004e36:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004e40:	bf00      	nop
 8004e42:	370c      	adds	r7, #12
 8004e44:	46bd      	mov	sp, r7
 8004e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4a:	4770      	bx	lr

08004e4c <LL_RCC_GetLPTIMClockSource>:
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	b083      	sub	sp, #12
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
  return (uint32_t)((READ_BIT(RCC->CCIPR, LPTIMx) >> 16) | LPTIMx);
 8004e54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e58:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	4013      	ands	r3, r2
 8004e60:	0c1a      	lsrs	r2, r3, #16
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	4313      	orrs	r3, r2
}
 8004e66:	4618      	mov	r0, r3
 8004e68:	370c      	adds	r7, #12
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e70:	4770      	bx	lr

08004e72 <LL_APB1_GRP1_ForceReset>:
{
 8004e72:	b480      	push	{r7}
 8004e74:	b083      	sub	sp, #12
 8004e76:	af00      	add	r7, sp, #0
 8004e78:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1RSTR1, Periphs);
 8004e7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e80:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	4313      	orrs	r3, r2
 8004e88:	638b      	str	r3, [r1, #56]	; 0x38
}
 8004e8a:	bf00      	nop
 8004e8c:	370c      	adds	r7, #12
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e94:	4770      	bx	lr

08004e96 <LL_APB1_GRP2_ForceReset>:
{
 8004e96:	b480      	push	{r7}
 8004e98:	b083      	sub	sp, #12
 8004e9a:	af00      	add	r7, sp, #0
 8004e9c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1RSTR2, Periphs);
 8004e9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ea2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004ea4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	63cb      	str	r3, [r1, #60]	; 0x3c
}
 8004eae:	bf00      	nop
 8004eb0:	370c      	adds	r7, #12
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb8:	4770      	bx	lr

08004eba <LL_APB1_GRP1_ReleaseReset>:
{
 8004eba:	b480      	push	{r7}
 8004ebc:	b083      	sub	sp, #12
 8004ebe:	af00      	add	r7, sp, #0
 8004ec0:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1RSTR1, Periphs);
 8004ec2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ec6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	43db      	mvns	r3, r3
 8004ecc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004ed0:	4013      	ands	r3, r2
 8004ed2:	638b      	str	r3, [r1, #56]	; 0x38
}
 8004ed4:	bf00      	nop
 8004ed6:	370c      	adds	r7, #12
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ede:	4770      	bx	lr

08004ee0 <LL_APB1_GRP2_ReleaseReset>:
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	b083      	sub	sp, #12
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1RSTR2, Periphs);
 8004ee8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004eec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	43db      	mvns	r3, r3
 8004ef2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004ef6:	4013      	ands	r3, r2
 8004ef8:	63cb      	str	r3, [r1, #60]	; 0x3c
}
 8004efa:	bf00      	nop
 8004efc:	370c      	adds	r7, #12
 8004efe:	46bd      	mov	sp, r7
 8004f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f04:	4770      	bx	lr
	...

08004f08 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b084      	sub	sp, #16
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d101      	bne.n	8004f1a <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 8004f16:	2301      	movs	r3, #1
 8004f18:	e08f      	b.n	800503a <HAL_LPTIM_Init+0x132>
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	2b01      	cmp	r3, #1
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8004f26:	b2db      	uxtb	r3, r3
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d106      	bne.n	8004f3a <HAL_LPTIM_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2200      	movs	r2, #0
 8004f30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 8004f34:	6878      	ldr	r0, [r7, #4]
 8004f36:	f7fd ff33 	bl	8002da0 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2202      	movs	r2, #2
 8004f3e:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	68db      	ldr	r3, [r3, #12]
 8004f48:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	685b      	ldr	r3, [r3, #4]
 8004f4e:	2b01      	cmp	r3, #1
 8004f50:	d004      	beq.n	8004f5c <HAL_LPTIM_Init+0x54>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f56:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004f5a:	d103      	bne.n	8004f64 <HAL_LPTIM_Init+0x5c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	f023 031e 	bic.w	r3, r3, #30
 8004f62:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	695b      	ldr	r3, [r3, #20]
 8004f68:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d005      	beq.n	8004f7c <HAL_LPTIM_Init+0x74>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8004f76:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004f7a:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8004f7c:	68fa      	ldr	r2, [r7, #12]
 8004f7e:	4b31      	ldr	r3, [pc, #196]	; (8005044 <HAL_LPTIM_Init+0x13c>)
 8004f80:	4013      	ands	r3, r2
 8004f82:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8004f8c:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 8004f92:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 8004f98:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 8004f9e:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8004fa0:	68fa      	ldr	r2, [r7, #12]
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	685b      	ldr	r3, [r3, #4]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d107      	bne.n	8004fbe <HAL_LPTIM_Init+0xb6>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	68fa      	ldr	r2, [r7, #12]
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	2b01      	cmp	r3, #1
 8004fc4:	d004      	beq.n	8004fd0 <HAL_LPTIM_Init+0xc8>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fca:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004fce:	d107      	bne.n	8004fe0 <HAL_LPTIM_Init+0xd8>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	68fa      	ldr	r2, [r7, #12]
 8004fdc:	4313      	orrs	r3, r2
 8004fde:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	695b      	ldr	r3, [r3, #20]
 8004fe4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d00a      	beq.n	8005002 <HAL_LPTIM_Init+0xfa>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8004ff4:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 8004ffa:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8004ffc:	68fa      	ldr	r2, [r7, #12]
 8004ffe:	4313      	orrs	r3, r2
 8005000:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	68fa      	ldr	r2, [r7, #12]
 8005008:	60da      	str	r2, [r3, #12]
#if defined(LPTIM_OR_OR)

  /* Configure LPTIM input sources */
  if (hlptim->Instance == LPTIM1)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4a0e      	ldr	r2, [pc, #56]	; (8005048 <HAL_LPTIM_Init+0x140>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d108      	bne.n	8005026 <HAL_LPTIM_Init+0x11e>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->OR = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	430a      	orrs	r2, r1
 8005022:	621a      	str	r2, [r3, #32]
 8005024:	e004      	b.n	8005030 <HAL_LPTIM_Init+0x128>
  {
    /* Check LPTIM2 Input1 source */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

    /* Configure LPTIM2 Input1 source */
    hlptim->Instance->OR = hlptim->Init.Input1Source;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	687a      	ldr	r2, [r7, #4]
 800502c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800502e:	621a      	str	r2, [r3, #32]
  }
#endif /* LPTIM_OR_OR */

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2201      	movs	r2, #1
 8005034:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 8005038:	2300      	movs	r3, #0
}
 800503a:	4618      	mov	r0, r3
 800503c:	3710      	adds	r7, #16
 800503e:	46bd      	mov	sp, r7
 8005040:	bd80      	pop	{r7, pc}
 8005042:	bf00      	nop
 8005044:	ff19f1fe 	.word	0xff19f1fe
 8005048:	40007c00 	.word	0x40007c00

0800504c <HAL_LPTIM_TimeOut_Start_IT>:
  * @param  Timeout Specifies the TimeOut value to reset the counter.
  *         This parameter must be a value between 0x0000 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_TimeOut_Start_IT(LPTIM_HandleTypeDef *hlptim, uint32_t Period, uint32_t Timeout)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b084      	sub	sp, #16
 8005050:	af00      	add	r7, sp, #0
 8005052:	60f8      	str	r0, [r7, #12]
 8005054:	60b9      	str	r1, [r7, #8]
 8005056:	607a      	str	r2, [r7, #4]
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(Period));
  assert_param(IS_LPTIM_PULSE(Timeout));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	2202      	movs	r2, #2
 800505c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Enable EXTI Line interrupt on the LPTIM Wake-up Timer */
  __HAL_LPTIM_WAKEUPTIMER_EXTI_ENABLE_IT(hlptim->Instance);
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4a38      	ldr	r2, [pc, #224]	; (8005148 <HAL_LPTIM_TimeOut_Start_IT+0xfc>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d108      	bne.n	800507c <HAL_LPTIM_TimeOut_Start_IT+0x30>
 800506a:	4b38      	ldr	r3, [pc, #224]	; (800514c <HAL_LPTIM_TimeOut_Start_IT+0x100>)
 800506c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005070:	4a36      	ldr	r2, [pc, #216]	; (800514c <HAL_LPTIM_TimeOut_Start_IT+0x100>)
 8005072:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005076:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800507a:	e007      	b.n	800508c <HAL_LPTIM_TimeOut_Start_IT+0x40>
 800507c:	4b33      	ldr	r3, [pc, #204]	; (800514c <HAL_LPTIM_TimeOut_Start_IT+0x100>)
 800507e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005082:	4a32      	ldr	r2, [pc, #200]	; (800514c <HAL_LPTIM_TimeOut_Start_IT+0x100>)
 8005084:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005088:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Set TIMOUT bit to enable the timeout function */
  hlptim->Instance->CFGR |= LPTIM_CFGR_TIMOUT;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	68da      	ldr	r2, [r3, #12]
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800509a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	691a      	ldr	r2, [r3, #16]
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f042 0201 	orr.w	r2, r2, #1
 80050aa:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	2210      	movs	r2, #16
 80050b2:	605a      	str	r2, [r3, #4]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	68ba      	ldr	r2, [r7, #8]
 80050ba:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 80050bc:	2110      	movs	r1, #16
 80050be:	68f8      	ldr	r0, [r7, #12]
 80050c0:	f000 f92c 	bl	800531c <LPTIM_WaitForFlag>
 80050c4:	4603      	mov	r3, r0
 80050c6:	2b03      	cmp	r3, #3
 80050c8:	d101      	bne.n	80050ce <HAL_LPTIM_TimeOut_Start_IT+0x82>
  {
    return HAL_TIMEOUT;
 80050ca:	2303      	movs	r3, #3
 80050cc:	e038      	b.n	8005140 <HAL_LPTIM_TimeOut_Start_IT+0xf4>
  }

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	2208      	movs	r2, #8
 80050d4:	605a      	str	r2, [r3, #4]

  /* Load the Timeout value in the compare register */
  __HAL_LPTIM_COMPARE_SET(hlptim, Timeout);
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	687a      	ldr	r2, [r7, #4]
 80050dc:	615a      	str	r2, [r3, #20]

  /* Wait for the completion of the write operation to the LPTIM_CMP register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 80050de:	2108      	movs	r1, #8
 80050e0:	68f8      	ldr	r0, [r7, #12]
 80050e2:	f000 f91b 	bl	800531c <LPTIM_WaitForFlag>
 80050e6:	4603      	mov	r3, r0
 80050e8:	2b03      	cmp	r3, #3
 80050ea:	d101      	bne.n	80050f0 <HAL_LPTIM_TimeOut_Start_IT+0xa4>
  {
    return HAL_TIMEOUT;
 80050ec:	2303      	movs	r3, #3
 80050ee:	e027      	b.n	8005140 <HAL_LPTIM_TimeOut_Start_IT+0xf4>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 80050f0:	68f8      	ldr	r0, [r7, #12]
 80050f2:	f000 f943 	bl	800537c <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 80050f6:	68f8      	ldr	r0, [r7, #12]
 80050f8:	f000 f901 	bl	80052fe <HAL_LPTIM_GetState>
 80050fc:	4603      	mov	r3, r0
 80050fe:	2b03      	cmp	r3, #3
 8005100:	d101      	bne.n	8005106 <HAL_LPTIM_TimeOut_Start_IT+0xba>
  {
    return HAL_TIMEOUT;
 8005102:	2303      	movs	r3, #3
 8005104:	e01c      	b.n	8005140 <HAL_LPTIM_TimeOut_Start_IT+0xf4>
  }

  /* Enable Compare match interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_CMPM);
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	689a      	ldr	r2, [r3, #8]
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f042 0201 	orr.w	r2, r2, #1
 8005114:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	691a      	ldr	r2, [r3, #16]
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f042 0201 	orr.w	r2, r2, #1
 8005124:	611a      	str	r2, [r3, #16]

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	691a      	ldr	r2, [r3, #16]
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f042 0204 	orr.w	r2, r2, #4
 8005134:	611a      	str	r2, [r3, #16]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	2201      	movs	r2, #1
 800513a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 800513e:	2300      	movs	r3, #0
}
 8005140:	4618      	mov	r0, r3
 8005142:	3710      	adds	r7, #16
 8005144:	46bd      	mov	sp, r7
 8005146:	bd80      	pop	{r7, pc}
 8005148:	40007c00 	.word	0x40007c00
 800514c:	58000800 	.word	0x58000800

08005150 <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b082      	sub	sp, #8
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f003 0301 	and.w	r3, r3, #1
 8005162:	2b01      	cmp	r3, #1
 8005164:	d10d      	bne.n	8005182 <HAL_LPTIM_IRQHandler+0x32>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	689b      	ldr	r3, [r3, #8]
 800516c:	f003 0301 	and.w	r3, r3, #1
 8005170:	2b01      	cmp	r3, #1
 8005172:	d106      	bne.n	8005182 <HAL_LPTIM_IRQHandler+0x32>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	2201      	movs	r2, #1
 800517a:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
#else
      HAL_LPTIM_CompareMatchCallback(hlptim);
 800517c:	6878      	ldr	r0, [r7, #4]
 800517e:	f7fd fcef 	bl	8002b60 <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f003 0302 	and.w	r3, r3, #2
 800518c:	2b02      	cmp	r3, #2
 800518e:	d10d      	bne.n	80051ac <HAL_LPTIM_IRQHandler+0x5c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	689b      	ldr	r3, [r3, #8]
 8005196:	f003 0302 	and.w	r3, r3, #2
 800519a:	2b02      	cmp	r3, #2
 800519c:	d106      	bne.n	80051ac <HAL_LPTIM_IRQHandler+0x5c>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	2202      	movs	r2, #2
 80051a4:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 80051a6:	6878      	ldr	r0, [r7, #4]
 80051a8:	f000 f86d 	bl	8005286 <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f003 0304 	and.w	r3, r3, #4
 80051b6:	2b04      	cmp	r3, #4
 80051b8:	d10d      	bne.n	80051d6 <HAL_LPTIM_IRQHandler+0x86>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	689b      	ldr	r3, [r3, #8]
 80051c0:	f003 0304 	and.w	r3, r3, #4
 80051c4:	2b04      	cmp	r3, #4
 80051c6:	d106      	bne.n	80051d6 <HAL_LPTIM_IRQHandler+0x86>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	2204      	movs	r2, #4
 80051ce:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 80051d0:	6878      	ldr	r0, [r7, #4]
 80051d2:	f000 f862 	bl	800529a <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f003 0308 	and.w	r3, r3, #8
 80051e0:	2b08      	cmp	r3, #8
 80051e2:	d10d      	bne.n	8005200 <HAL_LPTIM_IRQHandler+0xb0>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	689b      	ldr	r3, [r3, #8]
 80051ea:	f003 0308 	and.w	r3, r3, #8
 80051ee:	2b08      	cmp	r3, #8
 80051f0:	d106      	bne.n	8005200 <HAL_LPTIM_IRQHandler+0xb0>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	2208      	movs	r2, #8
 80051f8:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 80051fa:	6878      	ldr	r0, [r7, #4]
 80051fc:	f000 f857 	bl	80052ae <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f003 0310 	and.w	r3, r3, #16
 800520a:	2b10      	cmp	r3, #16
 800520c:	d10d      	bne.n	800522a <HAL_LPTIM_IRQHandler+0xda>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	689b      	ldr	r3, [r3, #8]
 8005214:	f003 0310 	and.w	r3, r3, #16
 8005218:	2b10      	cmp	r3, #16
 800521a:	d106      	bne.n	800522a <HAL_LPTIM_IRQHandler+0xda>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	2210      	movs	r2, #16
 8005222:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 8005224:	6878      	ldr	r0, [r7, #4]
 8005226:	f000 f84c 	bl	80052c2 <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f003 0320 	and.w	r3, r3, #32
 8005234:	2b20      	cmp	r3, #32
 8005236:	d10d      	bne.n	8005254 <HAL_LPTIM_IRQHandler+0x104>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	689b      	ldr	r3, [r3, #8]
 800523e:	f003 0320 	and.w	r3, r3, #32
 8005242:	2b20      	cmp	r3, #32
 8005244:	d106      	bne.n	8005254 <HAL_LPTIM_IRQHandler+0x104>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	2220      	movs	r2, #32
 800524c:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 800524e:	6878      	ldr	r0, [r7, #4]
 8005250:	f000 f841 	bl	80052d6 <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800525e:	2b40      	cmp	r3, #64	; 0x40
 8005260:	d10d      	bne.n	800527e <HAL_LPTIM_IRQHandler+0x12e>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	689b      	ldr	r3, [r3, #8]
 8005268:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800526c:	2b40      	cmp	r3, #64	; 0x40
 800526e:	d106      	bne.n	800527e <HAL_LPTIM_IRQHandler+0x12e>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	2240      	movs	r2, #64	; 0x40
 8005276:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 8005278:	6878      	ldr	r0, [r7, #4]
 800527a:	f000 f836 	bl	80052ea <HAL_LPTIM_DirectionDownCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
}
 800527e:	bf00      	nop
 8005280:	3708      	adds	r7, #8
 8005282:	46bd      	mov	sp, r7
 8005284:	bd80      	pop	{r7, pc}

08005286 <HAL_LPTIM_AutoReloadMatchCallback>:
  * @brief  Autoreload match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8005286:	b480      	push	{r7}
 8005288:	b083      	sub	sp, #12
 800528a:	af00      	add	r7, sp, #0
 800528c:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadMatchCallback could be implemented in the user file
   */
}
 800528e:	bf00      	nop
 8005290:	370c      	adds	r7, #12
 8005292:	46bd      	mov	sp, r7
 8005294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005298:	4770      	bx	lr

0800529a <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 800529a:	b480      	push	{r7}
 800529c:	b083      	sub	sp, #12
 800529e:	af00      	add	r7, sp, #0
 80052a0:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 80052a2:	bf00      	nop
 80052a4:	370c      	adds	r7, #12
 80052a6:	46bd      	mov	sp, r7
 80052a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ac:	4770      	bx	lr

080052ae <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 80052ae:	b480      	push	{r7}
 80052b0:	b083      	sub	sp, #12
 80052b2:	af00      	add	r7, sp, #0
 80052b4:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 80052b6:	bf00      	nop
 80052b8:	370c      	adds	r7, #12
 80052ba:	46bd      	mov	sp, r7
 80052bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c0:	4770      	bx	lr

080052c2 <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 80052c2:	b480      	push	{r7}
 80052c4:	b083      	sub	sp, #12
 80052c6:	af00      	add	r7, sp, #0
 80052c8:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 80052ca:	bf00      	nop
 80052cc:	370c      	adds	r7, #12
 80052ce:	46bd      	mov	sp, r7
 80052d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d4:	4770      	bx	lr

080052d6 <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 80052d6:	b480      	push	{r7}
 80052d8:	b083      	sub	sp, #12
 80052da:	af00      	add	r7, sp, #0
 80052dc:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 80052de:	bf00      	nop
 80052e0:	370c      	adds	r7, #12
 80052e2:	46bd      	mov	sp, r7
 80052e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e8:	4770      	bx	lr

080052ea <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 80052ea:	b480      	push	{r7}
 80052ec:	b083      	sub	sp, #12
 80052ee:	af00      	add	r7, sp, #0
 80052f0:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 80052f2:	bf00      	nop
 80052f4:	370c      	adds	r7, #12
 80052f6:	46bd      	mov	sp, r7
 80052f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fc:	4770      	bx	lr

080052fe <HAL_LPTIM_GetState>:
  * @brief  Return the LPTIM handle state.
  * @param  hlptim LPTIM handle
  * @retval HAL state
  */
HAL_LPTIM_StateTypeDef HAL_LPTIM_GetState(LPTIM_HandleTypeDef *hlptim)
{
 80052fe:	b480      	push	{r7}
 8005300:	b083      	sub	sp, #12
 8005302:	af00      	add	r7, sp, #0
 8005304:	6078      	str	r0, [r7, #4]
  /* Return LPTIM handle state */
  return hlptim->State;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800530c:	b2db      	uxtb	r3, r3
}
 800530e:	4618      	mov	r0, r3
 8005310:	370c      	adds	r7, #12
 8005312:	46bd      	mov	sp, r7
 8005314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005318:	4770      	bx	lr
	...

0800531c <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 800531c:	b480      	push	{r7}
 800531e:	b085      	sub	sp, #20
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
 8005324:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 8005326:	2300      	movs	r3, #0
 8005328:	73fb      	strb	r3, [r7, #15]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 800532a:	4b12      	ldr	r3, [pc, #72]	; (8005374 <LPTIM_WaitForFlag+0x58>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	4a12      	ldr	r2, [pc, #72]	; (8005378 <LPTIM_WaitForFlag+0x5c>)
 8005330:	fba2 2303 	umull	r2, r3, r2, r3
 8005334:	0b9b      	lsrs	r3, r3, #14
 8005336:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800533a:	fb02 f303 	mul.w	r3, r2, r3
 800533e:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	3b01      	subs	r3, #1
 8005344:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d101      	bne.n	8005350 <LPTIM_WaitForFlag+0x34>
    {
      result = HAL_TIMEOUT;
 800534c:	2303      	movs	r3, #3
 800534e:	73fb      	strb	r3, [r7, #15]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	681a      	ldr	r2, [r3, #0]
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	4013      	ands	r3, r2
 800535a:	683a      	ldr	r2, [r7, #0]
 800535c:	429a      	cmp	r2, r3
 800535e:	d002      	beq.n	8005366 <LPTIM_WaitForFlag+0x4a>
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d1ec      	bne.n	8005340 <LPTIM_WaitForFlag+0x24>

  return result;
 8005366:	7bfb      	ldrb	r3, [r7, #15]
}
 8005368:	4618      	mov	r0, r3
 800536a:	3714      	adds	r7, #20
 800536c:	46bd      	mov	sp, r7
 800536e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005372:	4770      	bx	lr
 8005374:	20000008 	.word	0x20000008
 8005378:	d1b71759 	.word	0xd1b71759

0800537c <LPTIM_Disable>:
  *         Please check Errata Sheet ES0335 for more details under "MCU may remain
  *         stuck in LPTIM interrupt when entering Stop mode" section.
  * @retval None
  */
void LPTIM_Disable(LPTIM_HandleTypeDef *hlptim)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b08c      	sub	sp, #48	; 0x30
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
  uint32_t tmpclksource = 0;
 8005384:	2300      	movs	r3, #0
 8005386:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005388:	f3ef 8310 	mrs	r3, PRIMASK
 800538c:	60fb      	str	r3, [r7, #12]
  return(result);
 800538e:	68fb      	ldr	r3, [r7, #12]
#if defined(LPTIM_OR_OR)
  uint32_t tmpOR;
#endif /* LPTIM_OR_OR */

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8005390:	62bb      	str	r3, [r7, #40]	; 0x28
 8005392:	2301      	movs	r3, #1
 8005394:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005396:	693b      	ldr	r3, [r7, #16]
 8005398:	f383 8810 	msr	PRIMASK, r3
}
 800539c:	bf00      	nop
  __set_PRIMASK(1) ;

  /*********** Save LPTIM Config ***********/
  /* Save LPTIM source clock */
  switch ((uint32_t)hlptim->Instance)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4a62      	ldr	r2, [pc, #392]	; (800552c <LPTIM_Disable+0x1b0>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d003      	beq.n	80053b0 <LPTIM_Disable+0x34>
 80053a8:	4a61      	ldr	r2, [pc, #388]	; (8005530 <LPTIM_Disable+0x1b4>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d006      	beq.n	80053bc <LPTIM_Disable+0x40>
    case LPTIM2_BASE:
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
      break;
#endif /* LPTIM2 */
    default:
      break;
 80053ae:	e00b      	b.n	80053c8 <LPTIM_Disable+0x4c>
      tmpclksource = __HAL_RCC_GET_LPTIM1_SOURCE();
 80053b0:	f44f 2040 	mov.w	r0, #786432	; 0xc0000
 80053b4:	f7ff fd4a 	bl	8004e4c <LL_RCC_GetLPTIMClockSource>
 80053b8:	62f8      	str	r0, [r7, #44]	; 0x2c
      break;
 80053ba:	e005      	b.n	80053c8 <LPTIM_Disable+0x4c>
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
 80053bc:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 80053c0:	f7ff fd44 	bl	8004e4c <LL_RCC_GetLPTIMClockSource>
 80053c4:	62f8      	str	r0, [r7, #44]	; 0x2c
      break;
 80053c6:	bf00      	nop
  }

  /* Save LPTIM configuration registers */
  tmpIER = hlptim->Instance->IER;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	689b      	ldr	r3, [r3, #8]
 80053ce:	627b      	str	r3, [r7, #36]	; 0x24
  tmpCFGR = hlptim->Instance->CFGR;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	68db      	ldr	r3, [r3, #12]
 80053d6:	623b      	str	r3, [r7, #32]
  tmpCMP = hlptim->Instance->CMP;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	695b      	ldr	r3, [r3, #20]
 80053de:	61fb      	str	r3, [r7, #28]
  tmpARR = hlptim->Instance->ARR;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	699b      	ldr	r3, [r3, #24]
 80053e6:	61bb      	str	r3, [r7, #24]
#if defined(LPTIM_OR_OR)
  tmpOR = hlptim->Instance->OR;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	6a1b      	ldr	r3, [r3, #32]
 80053ee:	617b      	str	r3, [r7, #20]
#endif /* LPTIM_OR_OR */

  /*********** Reset LPTIM ***********/
  switch ((uint32_t)hlptim->Instance)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a4d      	ldr	r2, [pc, #308]	; (800552c <LPTIM_Disable+0x1b0>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d003      	beq.n	8005402 <LPTIM_Disable+0x86>
 80053fa:	4a4d      	ldr	r2, [pc, #308]	; (8005530 <LPTIM_Disable+0x1b4>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d009      	beq.n	8005414 <LPTIM_Disable+0x98>
      __HAL_RCC_LPTIM2_FORCE_RESET();
      __HAL_RCC_LPTIM2_RELEASE_RESET();
      break;
#endif /* LPTIM2 */
    default:
      break;
 8005400:	e00f      	b.n	8005422 <LPTIM_Disable+0xa6>
      __HAL_RCC_LPTIM1_FORCE_RESET();
 8005402:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8005406:	f7ff fd34 	bl	8004e72 <LL_APB1_GRP1_ForceReset>
      __HAL_RCC_LPTIM1_RELEASE_RESET();
 800540a:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800540e:	f7ff fd54 	bl	8004eba <LL_APB1_GRP1_ReleaseReset>
      break;
 8005412:	e006      	b.n	8005422 <LPTIM_Disable+0xa6>
      __HAL_RCC_LPTIM2_FORCE_RESET();
 8005414:	2020      	movs	r0, #32
 8005416:	f7ff fd3e 	bl	8004e96 <LL_APB1_GRP2_ForceReset>
      __HAL_RCC_LPTIM2_RELEASE_RESET();
 800541a:	2020      	movs	r0, #32
 800541c:	f7ff fd60 	bl	8004ee0 <LL_APB1_GRP2_ReleaseReset>
      break;
 8005420:	bf00      	nop
  }

  /*********** Restore LPTIM Config ***********/
  if ((tmpCMP != 0UL) || (tmpARR != 0UL))
 8005422:	69fb      	ldr	r3, [r7, #28]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d102      	bne.n	800542e <LPTIM_Disable+0xb2>
 8005428:	69bb      	ldr	r3, [r7, #24]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d05f      	beq.n	80054ee <LPTIM_Disable+0x172>
  {
    /* Force LPTIM source kernel clock from APB */
    switch ((uint32_t)hlptim->Instance)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4a3e      	ldr	r2, [pc, #248]	; (800552c <LPTIM_Disable+0x1b0>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d003      	beq.n	8005440 <LPTIM_Disable+0xc4>
 8005438:	4a3d      	ldr	r2, [pc, #244]	; (8005530 <LPTIM_Disable+0x1b4>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d005      	beq.n	800544a <LPTIM_Disable+0xce>
      case LPTIM2_BASE:
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_PCLK1);
        break;
#endif /* LPTIM2 */
      default:
        break;
 800543e:	e009      	b.n	8005454 <LPTIM_Disable+0xd8>
        __HAL_RCC_LPTIM1_CONFIG(RCC_LPTIM1CLKSOURCE_PCLK1);
 8005440:	f44f 2040 	mov.w	r0, #786432	; 0xc0000
 8005444:	f7ff fce8 	bl	8004e18 <LL_RCC_SetLPTIMClockSource>
        break;
 8005448:	e004      	b.n	8005454 <LPTIM_Disable+0xd8>
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_PCLK1);
 800544a:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 800544e:	f7ff fce3 	bl	8004e18 <LL_RCC_SetLPTIMClockSource>
        break;
 8005452:	bf00      	nop
    }

    if (tmpCMP != 0UL)
 8005454:	69fb      	ldr	r3, [r7, #28]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d01a      	beq.n	8005490 <LPTIM_Disable+0x114>
    {
      /* Restore CMP register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	691a      	ldr	r2, [r3, #16]
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f042 0201 	orr.w	r2, r2, #1
 8005468:	611a      	str	r2, [r3, #16]
      hlptim->Instance->CMP = tmpCMP;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	69fa      	ldr	r2, [r7, #28]
 8005470:	615a      	str	r2, [r3, #20]

      /* Wait for the completion of the write operation to the LPTIM_CMP register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 8005472:	2108      	movs	r1, #8
 8005474:	6878      	ldr	r0, [r7, #4]
 8005476:	f7ff ff51 	bl	800531c <LPTIM_WaitForFlag>
 800547a:	4603      	mov	r3, r0
 800547c:	2b03      	cmp	r3, #3
 800547e:	d103      	bne.n	8005488 <LPTIM_Disable+0x10c>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2203      	movs	r2, #3
 8005484:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	2208      	movs	r2, #8
 800548e:	605a      	str	r2, [r3, #4]
    }

    if (tmpARR != 0UL)
 8005490:	69bb      	ldr	r3, [r7, #24]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d01a      	beq.n	80054cc <LPTIM_Disable+0x150>
    {
      /* Restore ARR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	691a      	ldr	r2, [r3, #16]
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f042 0201 	orr.w	r2, r2, #1
 80054a4:	611a      	str	r2, [r3, #16]
      hlptim->Instance->ARR = tmpARR;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	69ba      	ldr	r2, [r7, #24]
 80054ac:	619a      	str	r2, [r3, #24]

      /* Wait for the completion of the write operation to the LPTIM_ARR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 80054ae:	2110      	movs	r1, #16
 80054b0:	6878      	ldr	r0, [r7, #4]
 80054b2:	f7ff ff33 	bl	800531c <LPTIM_WaitForFlag>
 80054b6:	4603      	mov	r3, r0
 80054b8:	2b03      	cmp	r3, #3
 80054ba:	d103      	bne.n	80054c4 <LPTIM_Disable+0x148>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2203      	movs	r2, #3
 80054c0:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
      }

      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	2210      	movs	r2, #16
 80054ca:	605a      	str	r2, [r3, #4]
    }

    /* Restore LPTIM source kernel clock */
    switch ((uint32_t)hlptim->Instance)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4a16      	ldr	r2, [pc, #88]	; (800552c <LPTIM_Disable+0x1b0>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d003      	beq.n	80054de <LPTIM_Disable+0x162>
 80054d6:	4a16      	ldr	r2, [pc, #88]	; (8005530 <LPTIM_Disable+0x1b4>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d004      	beq.n	80054e6 <LPTIM_Disable+0x16a>
      case LPTIM2_BASE:
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
        break;
#endif /* LPTIM2 */
      default:
        break;
 80054dc:	e008      	b.n	80054f0 <LPTIM_Disable+0x174>
        __HAL_RCC_LPTIM1_CONFIG(tmpclksource);
 80054de:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80054e0:	f7ff fc9a 	bl	8004e18 <LL_RCC_SetLPTIMClockSource>
        break;
 80054e4:	e004      	b.n	80054f0 <LPTIM_Disable+0x174>
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
 80054e6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80054e8:	f7ff fc96 	bl	8004e18 <LL_RCC_SetLPTIMClockSource>
        break;
 80054ec:	e000      	b.n	80054f0 <LPTIM_Disable+0x174>
    }
  }
 80054ee:	bf00      	nop

  /* Restore configuration registers (LPTIM should be disabled first) */
  hlptim->Instance->CR &= ~(LPTIM_CR_ENABLE);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	691a      	ldr	r2, [r3, #16]
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f022 0201 	bic.w	r2, r2, #1
 80054fe:	611a      	str	r2, [r3, #16]
  hlptim->Instance->IER = tmpIER;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005506:	609a      	str	r2, [r3, #8]
  hlptim->Instance->CFGR = tmpCFGR;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	6a3a      	ldr	r2, [r7, #32]
 800550e:	60da      	str	r2, [r3, #12]
#if defined(LPTIM_OR_OR)
  hlptim->Instance->OR = tmpOR;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	697a      	ldr	r2, [r7, #20]
 8005516:	621a      	str	r2, [r3, #32]
 8005518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800551a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800551c:	68bb      	ldr	r3, [r7, #8]
 800551e:	f383 8810 	msr	PRIMASK, r3
}
 8005522:	bf00      	nop
#endif /* LPTIM_OR_OR */

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8005524:	bf00      	nop
 8005526:	3730      	adds	r7, #48	; 0x30
 8005528:	46bd      	mov	sp, r7
 800552a:	bd80      	pop	{r7, pc}
 800552c:	40007c00 	.word	0x40007c00
 8005530:	40009400 	.word	0x40009400

08005534 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005534:	b480      	push	{r7}
 8005536:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005538:	4b05      	ldr	r3, [pc, #20]	; (8005550 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4a04      	ldr	r2, [pc, #16]	; (8005550 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800553e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005542:	6013      	str	r3, [r2, #0]
}
 8005544:	bf00      	nop
 8005546:	46bd      	mov	sp, r7
 8005548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554c:	4770      	bx	lr
 800554e:	bf00      	nop
 8005550:	58000400 	.word	0x58000400

08005554 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005554:	b480      	push	{r7}
 8005556:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8005558:	4b04      	ldr	r3, [pc, #16]	; (800556c <HAL_PWREx_GetVoltageRange+0x18>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8005560:	4618      	mov	r0, r3
 8005562:	46bd      	mov	sp, r7
 8005564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005568:	4770      	bx	lr
 800556a:	bf00      	nop
 800556c:	58000400 	.word	0x58000400

08005570 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8005570:	b480      	push	{r7}
 8005572:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8005574:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800557e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005582:	d101      	bne.n	8005588 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8005584:	2301      	movs	r3, #1
 8005586:	e000      	b.n	800558a <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8005588:	2300      	movs	r3, #0
}
 800558a:	4618      	mov	r0, r3
 800558c:	46bd      	mov	sp, r7
 800558e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005592:	4770      	bx	lr

08005594 <LL_RCC_HSE_Enable>:
{
 8005594:	b480      	push	{r7}
 8005596:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8005598:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80055a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055a6:	6013      	str	r3, [r2, #0]
}
 80055a8:	bf00      	nop
 80055aa:	46bd      	mov	sp, r7
 80055ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b0:	4770      	bx	lr

080055b2 <LL_RCC_HSE_Disable>:
{
 80055b2:	b480      	push	{r7}
 80055b4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80055b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80055c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055c4:	6013      	str	r3, [r2, #0]
}
 80055c6:	bf00      	nop
 80055c8:	46bd      	mov	sp, r7
 80055ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ce:	4770      	bx	lr

080055d0 <LL_RCC_HSE_IsReady>:
{
 80055d0:	b480      	push	{r7}
 80055d2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80055d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055de:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80055e2:	d101      	bne.n	80055e8 <LL_RCC_HSE_IsReady+0x18>
 80055e4:	2301      	movs	r3, #1
 80055e6:	e000      	b.n	80055ea <LL_RCC_HSE_IsReady+0x1a>
 80055e8:	2300      	movs	r3, #0
}
 80055ea:	4618      	mov	r0, r3
 80055ec:	46bd      	mov	sp, r7
 80055ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f2:	4770      	bx	lr

080055f4 <LL_RCC_HSI_Enable>:
{
 80055f4:	b480      	push	{r7}
 80055f6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80055f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005602:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005606:	6013      	str	r3, [r2, #0]
}
 8005608:	bf00      	nop
 800560a:	46bd      	mov	sp, r7
 800560c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005610:	4770      	bx	lr

08005612 <LL_RCC_HSI_Disable>:
{
 8005612:	b480      	push	{r7}
 8005614:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8005616:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005620:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005624:	6013      	str	r3, [r2, #0]
}
 8005626:	bf00      	nop
 8005628:	46bd      	mov	sp, r7
 800562a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562e:	4770      	bx	lr

08005630 <LL_RCC_HSI_IsReady>:
{
 8005630:	b480      	push	{r7}
 8005632:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8005634:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800563e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005642:	d101      	bne.n	8005648 <LL_RCC_HSI_IsReady+0x18>
 8005644:	2301      	movs	r3, #1
 8005646:	e000      	b.n	800564a <LL_RCC_HSI_IsReady+0x1a>
 8005648:	2300      	movs	r3, #0
}
 800564a:	4618      	mov	r0, r3
 800564c:	46bd      	mov	sp, r7
 800564e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005652:	4770      	bx	lr

08005654 <LL_RCC_HSI_SetCalibTrimming>:
{
 8005654:	b480      	push	{r7}
 8005656:	b083      	sub	sp, #12
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800565c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005660:	685b      	ldr	r3, [r3, #4]
 8005662:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	061b      	lsls	r3, r3, #24
 800566a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800566e:	4313      	orrs	r3, r2
 8005670:	604b      	str	r3, [r1, #4]
}
 8005672:	bf00      	nop
 8005674:	370c      	adds	r7, #12
 8005676:	46bd      	mov	sp, r7
 8005678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567c:	4770      	bx	lr

0800567e <LL_RCC_HSI48_Enable>:
{
 800567e:	b480      	push	{r7}
 8005680:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8005682:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005686:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800568a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800568e:	f043 0301 	orr.w	r3, r3, #1
 8005692:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8005696:	bf00      	nop
 8005698:	46bd      	mov	sp, r7
 800569a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569e:	4770      	bx	lr

080056a0 <LL_RCC_HSI48_Disable>:
{
 80056a0:	b480      	push	{r7}
 80056a2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80056a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80056ac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80056b0:	f023 0301 	bic.w	r3, r3, #1
 80056b4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80056b8:	bf00      	nop
 80056ba:	46bd      	mov	sp, r7
 80056bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c0:	4770      	bx	lr

080056c2 <LL_RCC_HSI48_IsReady>:
{
 80056c2:	b480      	push	{r7}
 80056c4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 80056c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80056ce:	f003 0302 	and.w	r3, r3, #2
 80056d2:	2b02      	cmp	r3, #2
 80056d4:	d101      	bne.n	80056da <LL_RCC_HSI48_IsReady+0x18>
 80056d6:	2301      	movs	r3, #1
 80056d8:	e000      	b.n	80056dc <LL_RCC_HSI48_IsReady+0x1a>
 80056da:	2300      	movs	r3, #0
}
 80056dc:	4618      	mov	r0, r3
 80056de:	46bd      	mov	sp, r7
 80056e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e4:	4770      	bx	lr

080056e6 <LL_RCC_LSE_Enable>:
{
 80056e6:	b480      	push	{r7}
 80056e8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80056ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056f2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80056f6:	f043 0301 	orr.w	r3, r3, #1
 80056fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80056fe:	bf00      	nop
 8005700:	46bd      	mov	sp, r7
 8005702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005706:	4770      	bx	lr

08005708 <LL_RCC_LSE_Disable>:
{
 8005708:	b480      	push	{r7}
 800570a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800570c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005710:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005714:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005718:	f023 0301 	bic.w	r3, r3, #1
 800571c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005720:	bf00      	nop
 8005722:	46bd      	mov	sp, r7
 8005724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005728:	4770      	bx	lr

0800572a <LL_RCC_LSE_EnableBypass>:
{
 800572a:	b480      	push	{r7}
 800572c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800572e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005732:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005736:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800573a:	f043 0304 	orr.w	r3, r3, #4
 800573e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005742:	bf00      	nop
 8005744:	46bd      	mov	sp, r7
 8005746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574a:	4770      	bx	lr

0800574c <LL_RCC_LSE_DisableBypass>:
{
 800574c:	b480      	push	{r7}
 800574e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005750:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005754:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005758:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800575c:	f023 0304 	bic.w	r3, r3, #4
 8005760:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005764:	bf00      	nop
 8005766:	46bd      	mov	sp, r7
 8005768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576c:	4770      	bx	lr

0800576e <LL_RCC_LSE_IsReady>:
{
 800576e:	b480      	push	{r7}
 8005770:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005772:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005776:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800577a:	f003 0302 	and.w	r3, r3, #2
 800577e:	2b02      	cmp	r3, #2
 8005780:	d101      	bne.n	8005786 <LL_RCC_LSE_IsReady+0x18>
 8005782:	2301      	movs	r3, #1
 8005784:	e000      	b.n	8005788 <LL_RCC_LSE_IsReady+0x1a>
 8005786:	2300      	movs	r3, #0
}
 8005788:	4618      	mov	r0, r3
 800578a:	46bd      	mov	sp, r7
 800578c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005790:	4770      	bx	lr

08005792 <LL_RCC_LSI1_Enable>:
{
 8005792:	b480      	push	{r7}
 8005794:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8005796:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800579a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800579e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80057a2:	f043 0301 	orr.w	r3, r3, #1
 80057a6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80057aa:	bf00      	nop
 80057ac:	46bd      	mov	sp, r7
 80057ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b2:	4770      	bx	lr

080057b4 <LL_RCC_LSI1_Disable>:
{
 80057b4:	b480      	push	{r7}
 80057b6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80057b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80057c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80057c4:	f023 0301 	bic.w	r3, r3, #1
 80057c8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80057cc:	bf00      	nop
 80057ce:	46bd      	mov	sp, r7
 80057d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d4:	4770      	bx	lr

080057d6 <LL_RCC_LSI1_IsReady>:
{
 80057d6:	b480      	push	{r7}
 80057d8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80057da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80057e2:	f003 0302 	and.w	r3, r3, #2
 80057e6:	2b02      	cmp	r3, #2
 80057e8:	d101      	bne.n	80057ee <LL_RCC_LSI1_IsReady+0x18>
 80057ea:	2301      	movs	r3, #1
 80057ec:	e000      	b.n	80057f0 <LL_RCC_LSI1_IsReady+0x1a>
 80057ee:	2300      	movs	r3, #0
}
 80057f0:	4618      	mov	r0, r3
 80057f2:	46bd      	mov	sp, r7
 80057f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f8:	4770      	bx	lr

080057fa <LL_RCC_LSI2_Enable>:
{
 80057fa:	b480      	push	{r7}
 80057fc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80057fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005802:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005806:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800580a:	f043 0304 	orr.w	r3, r3, #4
 800580e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8005812:	bf00      	nop
 8005814:	46bd      	mov	sp, r7
 8005816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581a:	4770      	bx	lr

0800581c <LL_RCC_LSI2_Disable>:
{
 800581c:	b480      	push	{r7}
 800581e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8005820:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005824:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005828:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800582c:	f023 0304 	bic.w	r3, r3, #4
 8005830:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8005834:	bf00      	nop
 8005836:	46bd      	mov	sp, r7
 8005838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583c:	4770      	bx	lr

0800583e <LL_RCC_LSI2_IsReady>:
{
 800583e:	b480      	push	{r7}
 8005840:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8005842:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005846:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800584a:	f003 0308 	and.w	r3, r3, #8
 800584e:	2b08      	cmp	r3, #8
 8005850:	d101      	bne.n	8005856 <LL_RCC_LSI2_IsReady+0x18>
 8005852:	2301      	movs	r3, #1
 8005854:	e000      	b.n	8005858 <LL_RCC_LSI2_IsReady+0x1a>
 8005856:	2300      	movs	r3, #0
}
 8005858:	4618      	mov	r0, r3
 800585a:	46bd      	mov	sp, r7
 800585c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005860:	4770      	bx	lr

08005862 <LL_RCC_LSI2_SetTrimming>:
{
 8005862:	b480      	push	{r7}
 8005864:	b083      	sub	sp, #12
 8005866:	af00      	add	r7, sp, #0
 8005868:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800586a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800586e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005872:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	021b      	lsls	r3, r3, #8
 800587a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800587e:	4313      	orrs	r3, r2
 8005880:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8005884:	bf00      	nop
 8005886:	370c      	adds	r7, #12
 8005888:	46bd      	mov	sp, r7
 800588a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588e:	4770      	bx	lr

08005890 <LL_RCC_MSI_Enable>:
{
 8005890:	b480      	push	{r7}
 8005892:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8005894:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800589e:	f043 0301 	orr.w	r3, r3, #1
 80058a2:	6013      	str	r3, [r2, #0]
}
 80058a4:	bf00      	nop
 80058a6:	46bd      	mov	sp, r7
 80058a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ac:	4770      	bx	lr

080058ae <LL_RCC_MSI_Disable>:
{
 80058ae:	b480      	push	{r7}
 80058b0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80058b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80058bc:	f023 0301 	bic.w	r3, r3, #1
 80058c0:	6013      	str	r3, [r2, #0]
}
 80058c2:	bf00      	nop
 80058c4:	46bd      	mov	sp, r7
 80058c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ca:	4770      	bx	lr

080058cc <LL_RCC_MSI_IsReady>:
{
 80058cc:	b480      	push	{r7}
 80058ce:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80058d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f003 0302 	and.w	r3, r3, #2
 80058da:	2b02      	cmp	r3, #2
 80058dc:	d101      	bne.n	80058e2 <LL_RCC_MSI_IsReady+0x16>
 80058de:	2301      	movs	r3, #1
 80058e0:	e000      	b.n	80058e4 <LL_RCC_MSI_IsReady+0x18>
 80058e2:	2300      	movs	r3, #0
}
 80058e4:	4618      	mov	r0, r3
 80058e6:	46bd      	mov	sp, r7
 80058e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ec:	4770      	bx	lr

080058ee <LL_RCC_MSI_SetRange>:
{
 80058ee:	b480      	push	{r7}
 80058f0:	b083      	sub	sp, #12
 80058f2:	af00      	add	r7, sp, #0
 80058f4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80058f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005900:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	4313      	orrs	r3, r2
 8005908:	600b      	str	r3, [r1, #0]
}
 800590a:	bf00      	nop
 800590c:	370c      	adds	r7, #12
 800590e:	46bd      	mov	sp, r7
 8005910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005914:	4770      	bx	lr

08005916 <LL_RCC_MSI_GetRange>:
{
 8005916:	b480      	push	{r7}
 8005918:	b083      	sub	sp, #12
 800591a:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 800591c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005926:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2bb0      	cmp	r3, #176	; 0xb0
 800592c:	d901      	bls.n	8005932 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 800592e:	23b0      	movs	r3, #176	; 0xb0
 8005930:	607b      	str	r3, [r7, #4]
  return msiRange;
 8005932:	687b      	ldr	r3, [r7, #4]
}
 8005934:	4618      	mov	r0, r3
 8005936:	370c      	adds	r7, #12
 8005938:	46bd      	mov	sp, r7
 800593a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593e:	4770      	bx	lr

08005940 <LL_RCC_MSI_SetCalibTrimming>:
{
 8005940:	b480      	push	{r7}
 8005942:	b083      	sub	sp, #12
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8005948:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800594c:	685b      	ldr	r3, [r3, #4]
 800594e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	021b      	lsls	r3, r3, #8
 8005956:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800595a:	4313      	orrs	r3, r2
 800595c:	604b      	str	r3, [r1, #4]
}
 800595e:	bf00      	nop
 8005960:	370c      	adds	r7, #12
 8005962:	46bd      	mov	sp, r7
 8005964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005968:	4770      	bx	lr

0800596a <LL_RCC_SetSysClkSource>:
{
 800596a:	b480      	push	{r7}
 800596c:	b083      	sub	sp, #12
 800596e:	af00      	add	r7, sp, #0
 8005970:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8005972:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005976:	689b      	ldr	r3, [r3, #8]
 8005978:	f023 0203 	bic.w	r2, r3, #3
 800597c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	4313      	orrs	r3, r2
 8005984:	608b      	str	r3, [r1, #8]
}
 8005986:	bf00      	nop
 8005988:	370c      	adds	r7, #12
 800598a:	46bd      	mov	sp, r7
 800598c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005990:	4770      	bx	lr

08005992 <LL_RCC_GetSysClkSource>:
{
 8005992:	b480      	push	{r7}
 8005994:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005996:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800599a:	689b      	ldr	r3, [r3, #8]
 800599c:	f003 030c 	and.w	r3, r3, #12
}
 80059a0:	4618      	mov	r0, r3
 80059a2:	46bd      	mov	sp, r7
 80059a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a8:	4770      	bx	lr

080059aa <LL_RCC_SetAHBPrescaler>:
{
 80059aa:	b480      	push	{r7}
 80059ac:	b083      	sub	sp, #12
 80059ae:	af00      	add	r7, sp, #0
 80059b0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80059b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059b6:	689b      	ldr	r3, [r3, #8]
 80059b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80059bc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	4313      	orrs	r3, r2
 80059c4:	608b      	str	r3, [r1, #8]
}
 80059c6:	bf00      	nop
 80059c8:	370c      	adds	r7, #12
 80059ca:	46bd      	mov	sp, r7
 80059cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d0:	4770      	bx	lr

080059d2 <LL_C2_RCC_SetAHBPrescaler>:
{
 80059d2:	b480      	push	{r7}
 80059d4:	b083      	sub	sp, #12
 80059d6:	af00      	add	r7, sp, #0
 80059d8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80059da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059de:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80059e2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80059e6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	4313      	orrs	r3, r2
 80059ee:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80059f2:	bf00      	nop
 80059f4:	370c      	adds	r7, #12
 80059f6:	46bd      	mov	sp, r7
 80059f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fc:	4770      	bx	lr

080059fe <LL_RCC_SetAHB4Prescaler>:
{
 80059fe:	b480      	push	{r7}
 8005a00:	b083      	sub	sp, #12
 8005a02:	af00      	add	r7, sp, #0
 8005a04:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8005a06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a0a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005a0e:	f023 020f 	bic.w	r2, r3, #15
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	091b      	lsrs	r3, r3, #4
 8005a16:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8005a20:	bf00      	nop
 8005a22:	370c      	adds	r7, #12
 8005a24:	46bd      	mov	sp, r7
 8005a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2a:	4770      	bx	lr

08005a2c <LL_RCC_SetAPB1Prescaler>:
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b083      	sub	sp, #12
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8005a34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a38:	689b      	ldr	r3, [r3, #8]
 8005a3a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005a3e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	4313      	orrs	r3, r2
 8005a46:	608b      	str	r3, [r1, #8]
}
 8005a48:	bf00      	nop
 8005a4a:	370c      	adds	r7, #12
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a52:	4770      	bx	lr

08005a54 <LL_RCC_SetAPB2Prescaler>:
{
 8005a54:	b480      	push	{r7}
 8005a56:	b083      	sub	sp, #12
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8005a5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a60:	689b      	ldr	r3, [r3, #8]
 8005a62:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005a66:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	4313      	orrs	r3, r2
 8005a6e:	608b      	str	r3, [r1, #8]
}
 8005a70:	bf00      	nop
 8005a72:	370c      	adds	r7, #12
 8005a74:	46bd      	mov	sp, r7
 8005a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7a:	4770      	bx	lr

08005a7c <LL_RCC_GetAHBPrescaler>:
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8005a80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a84:	689b      	ldr	r3, [r3, #8]
 8005a86:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a92:	4770      	bx	lr

08005a94 <LL_RCC_GetAHB4Prescaler>:
{
 8005a94:	b480      	push	{r7}
 8005a96:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8005a98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a9c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005aa0:	011b      	lsls	r3, r3, #4
 8005aa2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aae:	4770      	bx	lr

08005ab0 <LL_RCC_GetAPB1Prescaler>:
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8005ab4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ab8:	689b      	ldr	r3, [r3, #8]
 8005aba:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8005abe:	4618      	mov	r0, r3
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac6:	4770      	bx	lr

08005ac8 <LL_RCC_GetAPB2Prescaler>:
{
 8005ac8:	b480      	push	{r7}
 8005aca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8005acc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ad0:	689b      	ldr	r3, [r3, #8]
 8005ad2:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ade:	4770      	bx	lr

08005ae0 <LL_RCC_PLL_Enable>:
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8005ae4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005aee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005af2:	6013      	str	r3, [r2, #0]
}
 8005af4:	bf00      	nop
 8005af6:	46bd      	mov	sp, r7
 8005af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afc:	4770      	bx	lr

08005afe <LL_RCC_PLL_Disable>:
{
 8005afe:	b480      	push	{r7}
 8005b00:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8005b02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005b0c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005b10:	6013      	str	r3, [r2, #0]
}
 8005b12:	bf00      	nop
 8005b14:	46bd      	mov	sp, r7
 8005b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1a:	4770      	bx	lr

08005b1c <LL_RCC_PLL_IsReady>:
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8005b20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b2a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005b2e:	d101      	bne.n	8005b34 <LL_RCC_PLL_IsReady+0x18>
 8005b30:	2301      	movs	r3, #1
 8005b32:	e000      	b.n	8005b36 <LL_RCC_PLL_IsReady+0x1a>
 8005b34:	2300      	movs	r3, #0
}
 8005b36:	4618      	mov	r0, r3
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3e:	4770      	bx	lr

08005b40 <LL_RCC_PLL_GetN>:
{
 8005b40:	b480      	push	{r7}
 8005b42:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8005b44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b48:	68db      	ldr	r3, [r3, #12]
 8005b4a:	0a1b      	lsrs	r3, r3, #8
 8005b4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8005b50:	4618      	mov	r0, r3
 8005b52:	46bd      	mov	sp, r7
 8005b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b58:	4770      	bx	lr

08005b5a <LL_RCC_PLL_GetR>:
{
 8005b5a:	b480      	push	{r7}
 8005b5c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8005b5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b62:	68db      	ldr	r3, [r3, #12]
 8005b64:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8005b68:	4618      	mov	r0, r3
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b70:	4770      	bx	lr

08005b72 <LL_RCC_PLL_GetDivider>:
{
 8005b72:	b480      	push	{r7}
 8005b74:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8005b76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b7a:	68db      	ldr	r3, [r3, #12]
 8005b7c:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8005b80:	4618      	mov	r0, r3
 8005b82:	46bd      	mov	sp, r7
 8005b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b88:	4770      	bx	lr

08005b8a <LL_RCC_PLL_GetMainSource>:
{
 8005b8a:	b480      	push	{r7}
 8005b8c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8005b8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b92:	68db      	ldr	r3, [r3, #12]
 8005b94:	f003 0303 	and.w	r3, r3, #3
}
 8005b98:	4618      	mov	r0, r3
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba0:	4770      	bx	lr

08005ba2 <LL_RCC_IsActiveFlag_HPRE>:
{
 8005ba2:	b480      	push	{r7}
 8005ba4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8005ba6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005baa:	689b      	ldr	r3, [r3, #8]
 8005bac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005bb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005bb4:	d101      	bne.n	8005bba <LL_RCC_IsActiveFlag_HPRE+0x18>
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	e000      	b.n	8005bbc <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8005bba:	2300      	movs	r3, #0
}
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc4:	4770      	bx	lr

08005bc6 <LL_RCC_IsActiveFlag_C2HPRE>:
{
 8005bc6:	b480      	push	{r7}
 8005bc8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8005bca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bce:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005bd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bd6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005bda:	d101      	bne.n	8005be0 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8005bdc:	2301      	movs	r3, #1
 8005bde:	e000      	b.n	8005be2 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8005be0:	2300      	movs	r3, #0
}
 8005be2:	4618      	mov	r0, r3
 8005be4:	46bd      	mov	sp, r7
 8005be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bea:	4770      	bx	lr

08005bec <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 8005bec:	b480      	push	{r7}
 8005bee:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8005bf0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bf4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005bf8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005bfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c00:	d101      	bne.n	8005c06 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8005c02:	2301      	movs	r3, #1
 8005c04:	e000      	b.n	8005c08 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8005c06:	2300      	movs	r3, #0
}
 8005c08:	4618      	mov	r0, r3
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c10:	4770      	bx	lr

08005c12 <LL_RCC_IsActiveFlag_PPRE1>:
{
 8005c12:	b480      	push	{r7}
 8005c14:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8005c16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c1a:	689b      	ldr	r3, [r3, #8]
 8005c1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c20:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005c24:	d101      	bne.n	8005c2a <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8005c26:	2301      	movs	r3, #1
 8005c28:	e000      	b.n	8005c2c <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8005c2a:	2300      	movs	r3, #0
}
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c34:	4770      	bx	lr

08005c36 <LL_RCC_IsActiveFlag_PPRE2>:
{
 8005c36:	b480      	push	{r7}
 8005c38:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8005c3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c3e:	689b      	ldr	r3, [r3, #8]
 8005c40:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005c44:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005c48:	d101      	bne.n	8005c4e <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	e000      	b.n	8005c50 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8005c4e:	2300      	movs	r3, #0
}
 8005c50:	4618      	mov	r0, r3
 8005c52:	46bd      	mov	sp, r7
 8005c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c58:	4770      	bx	lr
	...

08005c5c <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005c5c:	b590      	push	{r4, r7, lr}
 8005c5e:	b08d      	sub	sp, #52	; 0x34
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d101      	bne.n	8005c6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	e363      	b.n	8006336 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f003 0320 	and.w	r3, r3, #32
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	f000 808d 	beq.w	8005d96 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005c7c:	f7ff fe89 	bl	8005992 <LL_RCC_GetSysClkSource>
 8005c80:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005c82:	f7ff ff82 	bl	8005b8a <LL_RCC_PLL_GetMainSource>
 8005c86:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005c88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d005      	beq.n	8005c9a <HAL_RCC_OscConfig+0x3e>
 8005c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c90:	2b0c      	cmp	r3, #12
 8005c92:	d147      	bne.n	8005d24 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8005c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c96:	2b01      	cmp	r3, #1
 8005c98:	d144      	bne.n	8005d24 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	69db      	ldr	r3, [r3, #28]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d101      	bne.n	8005ca6 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	e347      	b.n	8006336 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8005caa:	f7ff fe34 	bl	8005916 <LL_RCC_MSI_GetRange>
 8005cae:	4603      	mov	r3, r0
 8005cb0:	429c      	cmp	r4, r3
 8005cb2:	d914      	bls.n	8005cde <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cb8:	4618      	mov	r0, r3
 8005cba:	f000 fd2f 	bl	800671c <RCC_SetFlashLatencyFromMSIRange>
 8005cbe:	4603      	mov	r3, r0
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d001      	beq.n	8005cc8 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	e336      	b.n	8006336 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ccc:	4618      	mov	r0, r3
 8005cce:	f7ff fe0e 	bl	80058ee <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6a1b      	ldr	r3, [r3, #32]
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	f7ff fe32 	bl	8005940 <LL_RCC_MSI_SetCalibTrimming>
 8005cdc:	e013      	b.n	8005d06 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	f7ff fe03 	bl	80058ee <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6a1b      	ldr	r3, [r3, #32]
 8005cec:	4618      	mov	r0, r3
 8005cee:	f7ff fe27 	bl	8005940 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	f000 fd10 	bl	800671c <RCC_SetFlashLatencyFromMSIRange>
 8005cfc:	4603      	mov	r3, r0
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d001      	beq.n	8005d06 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8005d02:	2301      	movs	r3, #1
 8005d04:	e317      	b.n	8006336 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005d06:	f000 fcc9 	bl	800669c <HAL_RCC_GetHCLKFreq>
 8005d0a:	4603      	mov	r3, r0
 8005d0c:	4aa4      	ldr	r2, [pc, #656]	; (8005fa0 <HAL_RCC_OscConfig+0x344>)
 8005d0e:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005d10:	4ba4      	ldr	r3, [pc, #656]	; (8005fa4 <HAL_RCC_OscConfig+0x348>)
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4618      	mov	r0, r3
 8005d16:	f7fd fb45 	bl	80033a4 <HAL_InitTick>
 8005d1a:	4603      	mov	r3, r0
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d039      	beq.n	8005d94 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8005d20:	2301      	movs	r3, #1
 8005d22:	e308      	b.n	8006336 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	69db      	ldr	r3, [r3, #28]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d01e      	beq.n	8005d6a <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005d2c:	f7ff fdb0 	bl	8005890 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005d30:	f7fd fb86 	bl	8003440 <HAL_GetTick>
 8005d34:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8005d36:	e008      	b.n	8005d4a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005d38:	f7fd fb82 	bl	8003440 <HAL_GetTick>
 8005d3c:	4602      	mov	r2, r0
 8005d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d40:	1ad3      	subs	r3, r2, r3
 8005d42:	2b02      	cmp	r3, #2
 8005d44:	d901      	bls.n	8005d4a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8005d46:	2303      	movs	r3, #3
 8005d48:	e2f5      	b.n	8006336 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8005d4a:	f7ff fdbf 	bl	80058cc <LL_RCC_MSI_IsReady>
 8005d4e:	4603      	mov	r3, r0
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d0f1      	beq.n	8005d38 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d58:	4618      	mov	r0, r3
 8005d5a:	f7ff fdc8 	bl	80058ee <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6a1b      	ldr	r3, [r3, #32]
 8005d62:	4618      	mov	r0, r3
 8005d64:	f7ff fdec 	bl	8005940 <LL_RCC_MSI_SetCalibTrimming>
 8005d68:	e015      	b.n	8005d96 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005d6a:	f7ff fda0 	bl	80058ae <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005d6e:	f7fd fb67 	bl	8003440 <HAL_GetTick>
 8005d72:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8005d74:	e008      	b.n	8005d88 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005d76:	f7fd fb63 	bl	8003440 <HAL_GetTick>
 8005d7a:	4602      	mov	r2, r0
 8005d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d7e:	1ad3      	subs	r3, r2, r3
 8005d80:	2b02      	cmp	r3, #2
 8005d82:	d901      	bls.n	8005d88 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8005d84:	2303      	movs	r3, #3
 8005d86:	e2d6      	b.n	8006336 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8005d88:	f7ff fda0 	bl	80058cc <LL_RCC_MSI_IsReady>
 8005d8c:	4603      	mov	r3, r0
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d1f1      	bne.n	8005d76 <HAL_RCC_OscConfig+0x11a>
 8005d92:	e000      	b.n	8005d96 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8005d94:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f003 0301 	and.w	r3, r3, #1
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d047      	beq.n	8005e32 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005da2:	f7ff fdf6 	bl	8005992 <LL_RCC_GetSysClkSource>
 8005da6:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005da8:	f7ff feef 	bl	8005b8a <LL_RCC_PLL_GetMainSource>
 8005dac:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8005dae:	6a3b      	ldr	r3, [r7, #32]
 8005db0:	2b08      	cmp	r3, #8
 8005db2:	d005      	beq.n	8005dc0 <HAL_RCC_OscConfig+0x164>
 8005db4:	6a3b      	ldr	r3, [r7, #32]
 8005db6:	2b0c      	cmp	r3, #12
 8005db8:	d108      	bne.n	8005dcc <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8005dba:	69fb      	ldr	r3, [r7, #28]
 8005dbc:	2b03      	cmp	r3, #3
 8005dbe:	d105      	bne.n	8005dcc <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	685b      	ldr	r3, [r3, #4]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d134      	bne.n	8005e32 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8005dc8:	2301      	movs	r3, #1
 8005dca:	e2b4      	b.n	8006336 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	685b      	ldr	r3, [r3, #4]
 8005dd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005dd4:	d102      	bne.n	8005ddc <HAL_RCC_OscConfig+0x180>
 8005dd6:	f7ff fbdd 	bl	8005594 <LL_RCC_HSE_Enable>
 8005dda:	e001      	b.n	8005de0 <HAL_RCC_OscConfig+0x184>
 8005ddc:	f7ff fbe9 	bl	80055b2 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	685b      	ldr	r3, [r3, #4]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d012      	beq.n	8005e0e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005de8:	f7fd fb2a 	bl	8003440 <HAL_GetTick>
 8005dec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8005dee:	e008      	b.n	8005e02 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005df0:	f7fd fb26 	bl	8003440 <HAL_GetTick>
 8005df4:	4602      	mov	r2, r0
 8005df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005df8:	1ad3      	subs	r3, r2, r3
 8005dfa:	2b64      	cmp	r3, #100	; 0x64
 8005dfc:	d901      	bls.n	8005e02 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8005dfe:	2303      	movs	r3, #3
 8005e00:	e299      	b.n	8006336 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8005e02:	f7ff fbe5 	bl	80055d0 <LL_RCC_HSE_IsReady>
 8005e06:	4603      	mov	r3, r0
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d0f1      	beq.n	8005df0 <HAL_RCC_OscConfig+0x194>
 8005e0c:	e011      	b.n	8005e32 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e0e:	f7fd fb17 	bl	8003440 <HAL_GetTick>
 8005e12:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8005e14:	e008      	b.n	8005e28 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005e16:	f7fd fb13 	bl	8003440 <HAL_GetTick>
 8005e1a:	4602      	mov	r2, r0
 8005e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e1e:	1ad3      	subs	r3, r2, r3
 8005e20:	2b64      	cmp	r3, #100	; 0x64
 8005e22:	d901      	bls.n	8005e28 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8005e24:	2303      	movs	r3, #3
 8005e26:	e286      	b.n	8006336 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8005e28:	f7ff fbd2 	bl	80055d0 <LL_RCC_HSE_IsReady>
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d1f1      	bne.n	8005e16 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f003 0302 	and.w	r3, r3, #2
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d04c      	beq.n	8005ed8 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005e3e:	f7ff fda8 	bl	8005992 <LL_RCC_GetSysClkSource>
 8005e42:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005e44:	f7ff fea1 	bl	8005b8a <LL_RCC_PLL_GetMainSource>
 8005e48:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8005e4a:	69bb      	ldr	r3, [r7, #24]
 8005e4c:	2b04      	cmp	r3, #4
 8005e4e:	d005      	beq.n	8005e5c <HAL_RCC_OscConfig+0x200>
 8005e50:	69bb      	ldr	r3, [r7, #24]
 8005e52:	2b0c      	cmp	r3, #12
 8005e54:	d10e      	bne.n	8005e74 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8005e56:	697b      	ldr	r3, [r7, #20]
 8005e58:	2b02      	cmp	r3, #2
 8005e5a:	d10b      	bne.n	8005e74 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	68db      	ldr	r3, [r3, #12]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d101      	bne.n	8005e68 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8005e64:	2301      	movs	r3, #1
 8005e66:	e266      	b.n	8006336 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	691b      	ldr	r3, [r3, #16]
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	f7ff fbf1 	bl	8005654 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8005e72:	e031      	b.n	8005ed8 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	68db      	ldr	r3, [r3, #12]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d019      	beq.n	8005eb0 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005e7c:	f7ff fbba 	bl	80055f4 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e80:	f7fd fade 	bl	8003440 <HAL_GetTick>
 8005e84:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8005e86:	e008      	b.n	8005e9a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005e88:	f7fd fada 	bl	8003440 <HAL_GetTick>
 8005e8c:	4602      	mov	r2, r0
 8005e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e90:	1ad3      	subs	r3, r2, r3
 8005e92:	2b02      	cmp	r3, #2
 8005e94:	d901      	bls.n	8005e9a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8005e96:	2303      	movs	r3, #3
 8005e98:	e24d      	b.n	8006336 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8005e9a:	f7ff fbc9 	bl	8005630 <LL_RCC_HSI_IsReady>
 8005e9e:	4603      	mov	r3, r0
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d0f1      	beq.n	8005e88 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	691b      	ldr	r3, [r3, #16]
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	f7ff fbd3 	bl	8005654 <LL_RCC_HSI_SetCalibTrimming>
 8005eae:	e013      	b.n	8005ed8 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005eb0:	f7ff fbaf 	bl	8005612 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005eb4:	f7fd fac4 	bl	8003440 <HAL_GetTick>
 8005eb8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8005eba:	e008      	b.n	8005ece <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ebc:	f7fd fac0 	bl	8003440 <HAL_GetTick>
 8005ec0:	4602      	mov	r2, r0
 8005ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ec4:	1ad3      	subs	r3, r2, r3
 8005ec6:	2b02      	cmp	r3, #2
 8005ec8:	d901      	bls.n	8005ece <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8005eca:	2303      	movs	r3, #3
 8005ecc:	e233      	b.n	8006336 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8005ece:	f7ff fbaf 	bl	8005630 <LL_RCC_HSI_IsReady>
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d1f1      	bne.n	8005ebc <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f003 0308 	and.w	r3, r3, #8
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d106      	bne.n	8005ef2 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	f000 80a3 	beq.w	8006038 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	695b      	ldr	r3, [r3, #20]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d076      	beq.n	8005fe8 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f003 0310 	and.w	r3, r3, #16
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d046      	beq.n	8005f94 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8005f06:	f7ff fc66 	bl	80057d6 <LL_RCC_LSI1_IsReady>
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d113      	bne.n	8005f38 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8005f10:	f7ff fc3f 	bl	8005792 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005f14:	f7fd fa94 	bl	8003440 <HAL_GetTick>
 8005f18:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8005f1a:	e008      	b.n	8005f2e <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005f1c:	f7fd fa90 	bl	8003440 <HAL_GetTick>
 8005f20:	4602      	mov	r2, r0
 8005f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f24:	1ad3      	subs	r3, r2, r3
 8005f26:	2b02      	cmp	r3, #2
 8005f28:	d901      	bls.n	8005f2e <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8005f2a:	2303      	movs	r3, #3
 8005f2c:	e203      	b.n	8006336 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8005f2e:	f7ff fc52 	bl	80057d6 <LL_RCC_LSI1_IsReady>
 8005f32:	4603      	mov	r3, r0
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d0f1      	beq.n	8005f1c <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8005f38:	f7ff fc5f 	bl	80057fa <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f3c:	f7fd fa80 	bl	8003440 <HAL_GetTick>
 8005f40:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8005f42:	e008      	b.n	8005f56 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8005f44:	f7fd fa7c 	bl	8003440 <HAL_GetTick>
 8005f48:	4602      	mov	r2, r0
 8005f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f4c:	1ad3      	subs	r3, r2, r3
 8005f4e:	2b03      	cmp	r3, #3
 8005f50:	d901      	bls.n	8005f56 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8005f52:	2303      	movs	r3, #3
 8005f54:	e1ef      	b.n	8006336 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8005f56:	f7ff fc72 	bl	800583e <LL_RCC_LSI2_IsReady>
 8005f5a:	4603      	mov	r3, r0
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d0f1      	beq.n	8005f44 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	699b      	ldr	r3, [r3, #24]
 8005f64:	4618      	mov	r0, r3
 8005f66:	f7ff fc7c 	bl	8005862 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8005f6a:	f7ff fc23 	bl	80057b4 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f6e:	f7fd fa67 	bl	8003440 <HAL_GetTick>
 8005f72:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8005f74:	e008      	b.n	8005f88 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005f76:	f7fd fa63 	bl	8003440 <HAL_GetTick>
 8005f7a:	4602      	mov	r2, r0
 8005f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f7e:	1ad3      	subs	r3, r2, r3
 8005f80:	2b02      	cmp	r3, #2
 8005f82:	d901      	bls.n	8005f88 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8005f84:	2303      	movs	r3, #3
 8005f86:	e1d6      	b.n	8006336 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8005f88:	f7ff fc25 	bl	80057d6 <LL_RCC_LSI1_IsReady>
 8005f8c:	4603      	mov	r3, r0
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d1f1      	bne.n	8005f76 <HAL_RCC_OscConfig+0x31a>
 8005f92:	e051      	b.n	8006038 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8005f94:	f7ff fbfd 	bl	8005792 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f98:	f7fd fa52 	bl	8003440 <HAL_GetTick>
 8005f9c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8005f9e:	e00c      	b.n	8005fba <HAL_RCC_OscConfig+0x35e>
 8005fa0:	20000008 	.word	0x20000008
 8005fa4:	2000000c 	.word	0x2000000c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005fa8:	f7fd fa4a 	bl	8003440 <HAL_GetTick>
 8005fac:	4602      	mov	r2, r0
 8005fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fb0:	1ad3      	subs	r3, r2, r3
 8005fb2:	2b02      	cmp	r3, #2
 8005fb4:	d901      	bls.n	8005fba <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8005fb6:	2303      	movs	r3, #3
 8005fb8:	e1bd      	b.n	8006336 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8005fba:	f7ff fc0c 	bl	80057d6 <LL_RCC_LSI1_IsReady>
 8005fbe:	4603      	mov	r3, r0
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d0f1      	beq.n	8005fa8 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8005fc4:	f7ff fc2a 	bl	800581c <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8005fc8:	e008      	b.n	8005fdc <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8005fca:	f7fd fa39 	bl	8003440 <HAL_GetTick>
 8005fce:	4602      	mov	r2, r0
 8005fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fd2:	1ad3      	subs	r3, r2, r3
 8005fd4:	2b03      	cmp	r3, #3
 8005fd6:	d901      	bls.n	8005fdc <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8005fd8:	2303      	movs	r3, #3
 8005fda:	e1ac      	b.n	8006336 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8005fdc:	f7ff fc2f 	bl	800583e <LL_RCC_LSI2_IsReady>
 8005fe0:	4603      	mov	r3, r0
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d1f1      	bne.n	8005fca <HAL_RCC_OscConfig+0x36e>
 8005fe6:	e027      	b.n	8006038 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8005fe8:	f7ff fc18 	bl	800581c <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fec:	f7fd fa28 	bl	8003440 <HAL_GetTick>
 8005ff0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8005ff2:	e008      	b.n	8006006 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8005ff4:	f7fd fa24 	bl	8003440 <HAL_GetTick>
 8005ff8:	4602      	mov	r2, r0
 8005ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ffc:	1ad3      	subs	r3, r2, r3
 8005ffe:	2b03      	cmp	r3, #3
 8006000:	d901      	bls.n	8006006 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8006002:	2303      	movs	r3, #3
 8006004:	e197      	b.n	8006336 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8006006:	f7ff fc1a 	bl	800583e <LL_RCC_LSI2_IsReady>
 800600a:	4603      	mov	r3, r0
 800600c:	2b00      	cmp	r3, #0
 800600e:	d1f1      	bne.n	8005ff4 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8006010:	f7ff fbd0 	bl	80057b4 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006014:	f7fd fa14 	bl	8003440 <HAL_GetTick>
 8006018:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800601a:	e008      	b.n	800602e <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800601c:	f7fd fa10 	bl	8003440 <HAL_GetTick>
 8006020:	4602      	mov	r2, r0
 8006022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006024:	1ad3      	subs	r3, r2, r3
 8006026:	2b02      	cmp	r3, #2
 8006028:	d901      	bls.n	800602e <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 800602a:	2303      	movs	r3, #3
 800602c:	e183      	b.n	8006336 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800602e:	f7ff fbd2 	bl	80057d6 <LL_RCC_LSI1_IsReady>
 8006032:	4603      	mov	r3, r0
 8006034:	2b00      	cmp	r3, #0
 8006036:	d1f1      	bne.n	800601c <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f003 0304 	and.w	r3, r3, #4
 8006040:	2b00      	cmp	r3, #0
 8006042:	d05b      	beq.n	80060fc <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006044:	4ba7      	ldr	r3, [pc, #668]	; (80062e4 <HAL_RCC_OscConfig+0x688>)
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800604c:	2b00      	cmp	r3, #0
 800604e:	d114      	bne.n	800607a <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8006050:	f7ff fa70 	bl	8005534 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006054:	f7fd f9f4 	bl	8003440 <HAL_GetTick>
 8006058:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800605a:	e008      	b.n	800606e <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800605c:	f7fd f9f0 	bl	8003440 <HAL_GetTick>
 8006060:	4602      	mov	r2, r0
 8006062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006064:	1ad3      	subs	r3, r2, r3
 8006066:	2b02      	cmp	r3, #2
 8006068:	d901      	bls.n	800606e <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800606a:	2303      	movs	r3, #3
 800606c:	e163      	b.n	8006336 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800606e:	4b9d      	ldr	r3, [pc, #628]	; (80062e4 <HAL_RCC_OscConfig+0x688>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006076:	2b00      	cmp	r3, #0
 8006078:	d0f0      	beq.n	800605c <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	689b      	ldr	r3, [r3, #8]
 800607e:	2b01      	cmp	r3, #1
 8006080:	d102      	bne.n	8006088 <HAL_RCC_OscConfig+0x42c>
 8006082:	f7ff fb30 	bl	80056e6 <LL_RCC_LSE_Enable>
 8006086:	e00c      	b.n	80060a2 <HAL_RCC_OscConfig+0x446>
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	689b      	ldr	r3, [r3, #8]
 800608c:	2b05      	cmp	r3, #5
 800608e:	d104      	bne.n	800609a <HAL_RCC_OscConfig+0x43e>
 8006090:	f7ff fb4b 	bl	800572a <LL_RCC_LSE_EnableBypass>
 8006094:	f7ff fb27 	bl	80056e6 <LL_RCC_LSE_Enable>
 8006098:	e003      	b.n	80060a2 <HAL_RCC_OscConfig+0x446>
 800609a:	f7ff fb35 	bl	8005708 <LL_RCC_LSE_Disable>
 800609e:	f7ff fb55 	bl	800574c <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	689b      	ldr	r3, [r3, #8]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d014      	beq.n	80060d4 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060aa:	f7fd f9c9 	bl	8003440 <HAL_GetTick>
 80060ae:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80060b0:	e00a      	b.n	80060c8 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80060b2:	f7fd f9c5 	bl	8003440 <HAL_GetTick>
 80060b6:	4602      	mov	r2, r0
 80060b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ba:	1ad3      	subs	r3, r2, r3
 80060bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d901      	bls.n	80060c8 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 80060c4:	2303      	movs	r3, #3
 80060c6:	e136      	b.n	8006336 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 80060c8:	f7ff fb51 	bl	800576e <LL_RCC_LSE_IsReady>
 80060cc:	4603      	mov	r3, r0
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d0ef      	beq.n	80060b2 <HAL_RCC_OscConfig+0x456>
 80060d2:	e013      	b.n	80060fc <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060d4:	f7fd f9b4 	bl	8003440 <HAL_GetTick>
 80060d8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80060da:	e00a      	b.n	80060f2 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80060dc:	f7fd f9b0 	bl	8003440 <HAL_GetTick>
 80060e0:	4602      	mov	r2, r0
 80060e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060e4:	1ad3      	subs	r3, r2, r3
 80060e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d901      	bls.n	80060f2 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 80060ee:	2303      	movs	r3, #3
 80060f0:	e121      	b.n	8006336 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 80060f2:	f7ff fb3c 	bl	800576e <LL_RCC_LSE_IsReady>
 80060f6:	4603      	mov	r3, r0
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d1ef      	bne.n	80060dc <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006104:	2b00      	cmp	r3, #0
 8006106:	d02c      	beq.n	8006162 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800610c:	2b00      	cmp	r3, #0
 800610e:	d014      	beq.n	800613a <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006110:	f7ff fab5 	bl	800567e <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006114:	f7fd f994 	bl	8003440 <HAL_GetTick>
 8006118:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800611a:	e008      	b.n	800612e <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800611c:	f7fd f990 	bl	8003440 <HAL_GetTick>
 8006120:	4602      	mov	r2, r0
 8006122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006124:	1ad3      	subs	r3, r2, r3
 8006126:	2b02      	cmp	r3, #2
 8006128:	d901      	bls.n	800612e <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 800612a:	2303      	movs	r3, #3
 800612c:	e103      	b.n	8006336 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800612e:	f7ff fac8 	bl	80056c2 <LL_RCC_HSI48_IsReady>
 8006132:	4603      	mov	r3, r0
 8006134:	2b00      	cmp	r3, #0
 8006136:	d0f1      	beq.n	800611c <HAL_RCC_OscConfig+0x4c0>
 8006138:	e013      	b.n	8006162 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800613a:	f7ff fab1 	bl	80056a0 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800613e:	f7fd f97f 	bl	8003440 <HAL_GetTick>
 8006142:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8006144:	e008      	b.n	8006158 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006146:	f7fd f97b 	bl	8003440 <HAL_GetTick>
 800614a:	4602      	mov	r2, r0
 800614c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800614e:	1ad3      	subs	r3, r2, r3
 8006150:	2b02      	cmp	r3, #2
 8006152:	d901      	bls.n	8006158 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8006154:	2303      	movs	r3, #3
 8006156:	e0ee      	b.n	8006336 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8006158:	f7ff fab3 	bl	80056c2 <LL_RCC_HSI48_IsReady>
 800615c:	4603      	mov	r3, r0
 800615e:	2b00      	cmp	r3, #0
 8006160:	d1f1      	bne.n	8006146 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006166:	2b00      	cmp	r3, #0
 8006168:	f000 80e4 	beq.w	8006334 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800616c:	f7ff fc11 	bl	8005992 <LL_RCC_GetSysClkSource>
 8006170:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8006172:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006176:	68db      	ldr	r3, [r3, #12]
 8006178:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800617e:	2b02      	cmp	r3, #2
 8006180:	f040 80b4 	bne.w	80062ec <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	f003 0203 	and.w	r2, r3, #3
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800618e:	429a      	cmp	r2, r3
 8006190:	d123      	bne.n	80061da <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800619c:	429a      	cmp	r2, r3
 800619e:	d11c      	bne.n	80061da <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	0a1b      	lsrs	r3, r3, #8
 80061a4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80061ac:	429a      	cmp	r2, r3
 80061ae:	d114      	bne.n	80061da <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80061ba:	429a      	cmp	r2, r3
 80061bc:	d10d      	bne.n	80061da <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80061c8:	429a      	cmp	r2, r3
 80061ca:	d106      	bne.n	80061da <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80061d6:	429a      	cmp	r2, r3
 80061d8:	d05d      	beq.n	8006296 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80061da:	693b      	ldr	r3, [r7, #16]
 80061dc:	2b0c      	cmp	r3, #12
 80061de:	d058      	beq.n	8006292 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80061e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d001      	beq.n	80061f2 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 80061ee:	2301      	movs	r3, #1
 80061f0:	e0a1      	b.n	8006336 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80061f2:	f7ff fc84 	bl	8005afe <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80061f6:	f7fd f923 	bl	8003440 <HAL_GetTick>
 80061fa:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80061fc:	e008      	b.n	8006210 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80061fe:	f7fd f91f 	bl	8003440 <HAL_GetTick>
 8006202:	4602      	mov	r2, r0
 8006204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006206:	1ad3      	subs	r3, r2, r3
 8006208:	2b02      	cmp	r3, #2
 800620a:	d901      	bls.n	8006210 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 800620c:	2303      	movs	r3, #3
 800620e:	e092      	b.n	8006336 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006210:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800621a:	2b00      	cmp	r3, #0
 800621c:	d1ef      	bne.n	80061fe <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800621e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006222:	68da      	ldr	r2, [r3, #12]
 8006224:	4b30      	ldr	r3, [pc, #192]	; (80062e8 <HAL_RCC_OscConfig+0x68c>)
 8006226:	4013      	ands	r3, r2
 8006228:	687a      	ldr	r2, [r7, #4]
 800622a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800622c:	687a      	ldr	r2, [r7, #4]
 800622e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006230:	4311      	orrs	r1, r2
 8006232:	687a      	ldr	r2, [r7, #4]
 8006234:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006236:	0212      	lsls	r2, r2, #8
 8006238:	4311      	orrs	r1, r2
 800623a:	687a      	ldr	r2, [r7, #4]
 800623c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800623e:	4311      	orrs	r1, r2
 8006240:	687a      	ldr	r2, [r7, #4]
 8006242:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006244:	4311      	orrs	r1, r2
 8006246:	687a      	ldr	r2, [r7, #4]
 8006248:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800624a:	430a      	orrs	r2, r1
 800624c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006250:	4313      	orrs	r3, r2
 8006252:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006254:	f7ff fc44 	bl	8005ae0 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006258:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800625c:	68db      	ldr	r3, [r3, #12]
 800625e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006262:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006266:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006268:	f7fd f8ea 	bl	8003440 <HAL_GetTick>
 800626c:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800626e:	e008      	b.n	8006282 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006270:	f7fd f8e6 	bl	8003440 <HAL_GetTick>
 8006274:	4602      	mov	r2, r0
 8006276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006278:	1ad3      	subs	r3, r2, r3
 800627a:	2b02      	cmp	r3, #2
 800627c:	d901      	bls.n	8006282 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 800627e:	2303      	movs	r3, #3
 8006280:	e059      	b.n	8006336 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006282:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800628c:	2b00      	cmp	r3, #0
 800628e:	d0ef      	beq.n	8006270 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006290:	e050      	b.n	8006334 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006292:	2301      	movs	r3, #1
 8006294:	e04f      	b.n	8006336 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006296:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d147      	bne.n	8006334 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80062a4:	f7ff fc1c 	bl	8005ae0 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80062a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062ac:	68db      	ldr	r3, [r3, #12]
 80062ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80062b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80062b6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80062b8:	f7fd f8c2 	bl	8003440 <HAL_GetTick>
 80062bc:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80062be:	e008      	b.n	80062d2 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80062c0:	f7fd f8be 	bl	8003440 <HAL_GetTick>
 80062c4:	4602      	mov	r2, r0
 80062c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062c8:	1ad3      	subs	r3, r2, r3
 80062ca:	2b02      	cmp	r3, #2
 80062cc:	d901      	bls.n	80062d2 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 80062ce:	2303      	movs	r3, #3
 80062d0:	e031      	b.n	8006336 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80062d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d0ef      	beq.n	80062c0 <HAL_RCC_OscConfig+0x664>
 80062e0:	e028      	b.n	8006334 <HAL_RCC_OscConfig+0x6d8>
 80062e2:	bf00      	nop
 80062e4:	58000400 	.word	0x58000400
 80062e8:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80062ec:	693b      	ldr	r3, [r7, #16]
 80062ee:	2b0c      	cmp	r3, #12
 80062f0:	d01e      	beq.n	8006330 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80062f2:	f7ff fc04 	bl	8005afe <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062f6:	f7fd f8a3 	bl	8003440 <HAL_GetTick>
 80062fa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80062fc:	e008      	b.n	8006310 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80062fe:	f7fd f89f 	bl	8003440 <HAL_GetTick>
 8006302:	4602      	mov	r2, r0
 8006304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006306:	1ad3      	subs	r3, r2, r3
 8006308:	2b02      	cmp	r3, #2
 800630a:	d901      	bls.n	8006310 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 800630c:	2303      	movs	r3, #3
 800630e:	e012      	b.n	8006336 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006310:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800631a:	2b00      	cmp	r3, #0
 800631c:	d1ef      	bne.n	80062fe <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 800631e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006322:	68da      	ldr	r2, [r3, #12]
 8006324:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006328:	4b05      	ldr	r3, [pc, #20]	; (8006340 <HAL_RCC_OscConfig+0x6e4>)
 800632a:	4013      	ands	r3, r2
 800632c:	60cb      	str	r3, [r1, #12]
 800632e:	e001      	b.n	8006334 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006330:	2301      	movs	r3, #1
 8006332:	e000      	b.n	8006336 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8006334:	2300      	movs	r3, #0
}
 8006336:	4618      	mov	r0, r3
 8006338:	3734      	adds	r7, #52	; 0x34
 800633a:	46bd      	mov	sp, r7
 800633c:	bd90      	pop	{r4, r7, pc}
 800633e:	bf00      	nop
 8006340:	eefefffc 	.word	0xeefefffc

08006344 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b084      	sub	sp, #16
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
 800634c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d101      	bne.n	8006358 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006354:	2301      	movs	r3, #1
 8006356:	e12d      	b.n	80065b4 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006358:	4b98      	ldr	r3, [pc, #608]	; (80065bc <HAL_RCC_ClockConfig+0x278>)
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f003 0307 	and.w	r3, r3, #7
 8006360:	683a      	ldr	r2, [r7, #0]
 8006362:	429a      	cmp	r2, r3
 8006364:	d91b      	bls.n	800639e <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006366:	4b95      	ldr	r3, [pc, #596]	; (80065bc <HAL_RCC_ClockConfig+0x278>)
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f023 0207 	bic.w	r2, r3, #7
 800636e:	4993      	ldr	r1, [pc, #588]	; (80065bc <HAL_RCC_ClockConfig+0x278>)
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	4313      	orrs	r3, r2
 8006374:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006376:	f7fd f863 	bl	8003440 <HAL_GetTick>
 800637a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800637c:	e008      	b.n	8006390 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800637e:	f7fd f85f 	bl	8003440 <HAL_GetTick>
 8006382:	4602      	mov	r2, r0
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	1ad3      	subs	r3, r2, r3
 8006388:	2b02      	cmp	r3, #2
 800638a:	d901      	bls.n	8006390 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 800638c:	2303      	movs	r3, #3
 800638e:	e111      	b.n	80065b4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006390:	4b8a      	ldr	r3, [pc, #552]	; (80065bc <HAL_RCC_ClockConfig+0x278>)
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f003 0307 	and.w	r3, r3, #7
 8006398:	683a      	ldr	r2, [r7, #0]
 800639a:	429a      	cmp	r2, r3
 800639c:	d1ef      	bne.n	800637e <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f003 0302 	and.w	r3, r3, #2
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d016      	beq.n	80063d8 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	689b      	ldr	r3, [r3, #8]
 80063ae:	4618      	mov	r0, r3
 80063b0:	f7ff fafb 	bl	80059aa <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80063b4:	f7fd f844 	bl	8003440 <HAL_GetTick>
 80063b8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80063ba:	e008      	b.n	80063ce <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80063bc:	f7fd f840 	bl	8003440 <HAL_GetTick>
 80063c0:	4602      	mov	r2, r0
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	1ad3      	subs	r3, r2, r3
 80063c6:	2b02      	cmp	r3, #2
 80063c8:	d901      	bls.n	80063ce <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80063ca:	2303      	movs	r3, #3
 80063cc:	e0f2      	b.n	80065b4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80063ce:	f7ff fbe8 	bl	8005ba2 <LL_RCC_IsActiveFlag_HPRE>
 80063d2:	4603      	mov	r3, r0
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d0f1      	beq.n	80063bc <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f003 0320 	and.w	r3, r3, #32
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d016      	beq.n	8006412 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	695b      	ldr	r3, [r3, #20]
 80063e8:	4618      	mov	r0, r3
 80063ea:	f7ff faf2 	bl	80059d2 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80063ee:	f7fd f827 	bl	8003440 <HAL_GetTick>
 80063f2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80063f4:	e008      	b.n	8006408 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80063f6:	f7fd f823 	bl	8003440 <HAL_GetTick>
 80063fa:	4602      	mov	r2, r0
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	1ad3      	subs	r3, r2, r3
 8006400:	2b02      	cmp	r3, #2
 8006402:	d901      	bls.n	8006408 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8006404:	2303      	movs	r3, #3
 8006406:	e0d5      	b.n	80065b4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8006408:	f7ff fbdd 	bl	8005bc6 <LL_RCC_IsActiveFlag_C2HPRE>
 800640c:	4603      	mov	r3, r0
 800640e:	2b00      	cmp	r3, #0
 8006410:	d0f1      	beq.n	80063f6 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800641a:	2b00      	cmp	r3, #0
 800641c:	d016      	beq.n	800644c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	699b      	ldr	r3, [r3, #24]
 8006422:	4618      	mov	r0, r3
 8006424:	f7ff faeb 	bl	80059fe <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006428:	f7fd f80a 	bl	8003440 <HAL_GetTick>
 800642c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800642e:	e008      	b.n	8006442 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006430:	f7fd f806 	bl	8003440 <HAL_GetTick>
 8006434:	4602      	mov	r2, r0
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	1ad3      	subs	r3, r2, r3
 800643a:	2b02      	cmp	r3, #2
 800643c:	d901      	bls.n	8006442 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800643e:	2303      	movs	r3, #3
 8006440:	e0b8      	b.n	80065b4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8006442:	f7ff fbd3 	bl	8005bec <LL_RCC_IsActiveFlag_SHDHPRE>
 8006446:	4603      	mov	r3, r0
 8006448:	2b00      	cmp	r3, #0
 800644a:	d0f1      	beq.n	8006430 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f003 0304 	and.w	r3, r3, #4
 8006454:	2b00      	cmp	r3, #0
 8006456:	d016      	beq.n	8006486 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	68db      	ldr	r3, [r3, #12]
 800645c:	4618      	mov	r0, r3
 800645e:	f7ff fae5 	bl	8005a2c <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006462:	f7fc ffed 	bl	8003440 <HAL_GetTick>
 8006466:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8006468:	e008      	b.n	800647c <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800646a:	f7fc ffe9 	bl	8003440 <HAL_GetTick>
 800646e:	4602      	mov	r2, r0
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	1ad3      	subs	r3, r2, r3
 8006474:	2b02      	cmp	r3, #2
 8006476:	d901      	bls.n	800647c <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8006478:	2303      	movs	r3, #3
 800647a:	e09b      	b.n	80065b4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800647c:	f7ff fbc9 	bl	8005c12 <LL_RCC_IsActiveFlag_PPRE1>
 8006480:	4603      	mov	r3, r0
 8006482:	2b00      	cmp	r3, #0
 8006484:	d0f1      	beq.n	800646a <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f003 0308 	and.w	r3, r3, #8
 800648e:	2b00      	cmp	r3, #0
 8006490:	d017      	beq.n	80064c2 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	691b      	ldr	r3, [r3, #16]
 8006496:	00db      	lsls	r3, r3, #3
 8006498:	4618      	mov	r0, r3
 800649a:	f7ff fadb 	bl	8005a54 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800649e:	f7fc ffcf 	bl	8003440 <HAL_GetTick>
 80064a2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80064a4:	e008      	b.n	80064b8 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80064a6:	f7fc ffcb 	bl	8003440 <HAL_GetTick>
 80064aa:	4602      	mov	r2, r0
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	1ad3      	subs	r3, r2, r3
 80064b0:	2b02      	cmp	r3, #2
 80064b2:	d901      	bls.n	80064b8 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80064b4:	2303      	movs	r3, #3
 80064b6:	e07d      	b.n	80065b4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80064b8:	f7ff fbbd 	bl	8005c36 <LL_RCC_IsActiveFlag_PPRE2>
 80064bc:	4603      	mov	r3, r0
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d0f1      	beq.n	80064a6 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f003 0301 	and.w	r3, r3, #1
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d043      	beq.n	8006556 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	685b      	ldr	r3, [r3, #4]
 80064d2:	2b02      	cmp	r3, #2
 80064d4:	d106      	bne.n	80064e4 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80064d6:	f7ff f87b 	bl	80055d0 <LL_RCC_HSE_IsReady>
 80064da:	4603      	mov	r3, r0
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d11e      	bne.n	800651e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80064e0:	2301      	movs	r3, #1
 80064e2:	e067      	b.n	80065b4 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	685b      	ldr	r3, [r3, #4]
 80064e8:	2b03      	cmp	r3, #3
 80064ea:	d106      	bne.n	80064fa <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80064ec:	f7ff fb16 	bl	8005b1c <LL_RCC_PLL_IsReady>
 80064f0:	4603      	mov	r3, r0
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d113      	bne.n	800651e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80064f6:	2301      	movs	r3, #1
 80064f8:	e05c      	b.n	80065b4 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	685b      	ldr	r3, [r3, #4]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d106      	bne.n	8006510 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8006502:	f7ff f9e3 	bl	80058cc <LL_RCC_MSI_IsReady>
 8006506:	4603      	mov	r3, r0
 8006508:	2b00      	cmp	r3, #0
 800650a:	d108      	bne.n	800651e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800650c:	2301      	movs	r3, #1
 800650e:	e051      	b.n	80065b4 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8006510:	f7ff f88e 	bl	8005630 <LL_RCC_HSI_IsReady>
 8006514:	4603      	mov	r3, r0
 8006516:	2b00      	cmp	r3, #0
 8006518:	d101      	bne.n	800651e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800651a:	2301      	movs	r3, #1
 800651c:	e04a      	b.n	80065b4 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	685b      	ldr	r3, [r3, #4]
 8006522:	4618      	mov	r0, r3
 8006524:	f7ff fa21 	bl	800596a <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006528:	f7fc ff8a 	bl	8003440 <HAL_GetTick>
 800652c:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800652e:	e00a      	b.n	8006546 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006530:	f7fc ff86 	bl	8003440 <HAL_GetTick>
 8006534:	4602      	mov	r2, r0
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	1ad3      	subs	r3, r2, r3
 800653a:	f241 3288 	movw	r2, #5000	; 0x1388
 800653e:	4293      	cmp	r3, r2
 8006540:	d901      	bls.n	8006546 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8006542:	2303      	movs	r3, #3
 8006544:	e036      	b.n	80065b4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006546:	f7ff fa24 	bl	8005992 <LL_RCC_GetSysClkSource>
 800654a:	4602      	mov	r2, r0
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	685b      	ldr	r3, [r3, #4]
 8006550:	009b      	lsls	r3, r3, #2
 8006552:	429a      	cmp	r2, r3
 8006554:	d1ec      	bne.n	8006530 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006556:	4b19      	ldr	r3, [pc, #100]	; (80065bc <HAL_RCC_ClockConfig+0x278>)
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f003 0307 	and.w	r3, r3, #7
 800655e:	683a      	ldr	r2, [r7, #0]
 8006560:	429a      	cmp	r2, r3
 8006562:	d21b      	bcs.n	800659c <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006564:	4b15      	ldr	r3, [pc, #84]	; (80065bc <HAL_RCC_ClockConfig+0x278>)
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f023 0207 	bic.w	r2, r3, #7
 800656c:	4913      	ldr	r1, [pc, #76]	; (80065bc <HAL_RCC_ClockConfig+0x278>)
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	4313      	orrs	r3, r2
 8006572:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006574:	f7fc ff64 	bl	8003440 <HAL_GetTick>
 8006578:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800657a:	e008      	b.n	800658e <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800657c:	f7fc ff60 	bl	8003440 <HAL_GetTick>
 8006580:	4602      	mov	r2, r0
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	1ad3      	subs	r3, r2, r3
 8006586:	2b02      	cmp	r3, #2
 8006588:	d901      	bls.n	800658e <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800658a:	2303      	movs	r3, #3
 800658c:	e012      	b.n	80065b4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800658e:	4b0b      	ldr	r3, [pc, #44]	; (80065bc <HAL_RCC_ClockConfig+0x278>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f003 0307 	and.w	r3, r3, #7
 8006596:	683a      	ldr	r2, [r7, #0]
 8006598:	429a      	cmp	r2, r3
 800659a:	d1ef      	bne.n	800657c <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800659c:	f000 f87e 	bl	800669c <HAL_RCC_GetHCLKFreq>
 80065a0:	4603      	mov	r3, r0
 80065a2:	4a07      	ldr	r2, [pc, #28]	; (80065c0 <HAL_RCC_ClockConfig+0x27c>)
 80065a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 80065a6:	f7fc ff57 	bl	8003458 <HAL_GetTickPrio>
 80065aa:	4603      	mov	r3, r0
 80065ac:	4618      	mov	r0, r3
 80065ae:	f7fc fef9 	bl	80033a4 <HAL_InitTick>
 80065b2:	4603      	mov	r3, r0
}
 80065b4:	4618      	mov	r0, r3
 80065b6:	3710      	adds	r7, #16
 80065b8:	46bd      	mov	sp, r7
 80065ba:	bd80      	pop	{r7, pc}
 80065bc:	58004000 	.word	0x58004000
 80065c0:	20000008 	.word	0x20000008

080065c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80065c4:	b590      	push	{r4, r7, lr}
 80065c6:	b085      	sub	sp, #20
 80065c8:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80065ca:	f7ff f9e2 	bl	8005992 <LL_RCC_GetSysClkSource>
 80065ce:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d10a      	bne.n	80065ec <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80065d6:	f7ff f99e 	bl	8005916 <LL_RCC_MSI_GetRange>
 80065da:	4603      	mov	r3, r0
 80065dc:	091b      	lsrs	r3, r3, #4
 80065de:	f003 030f 	and.w	r3, r3, #15
 80065e2:	4a2b      	ldr	r2, [pc, #172]	; (8006690 <HAL_RCC_GetSysClockFreq+0xcc>)
 80065e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80065e8:	60fb      	str	r3, [r7, #12]
 80065ea:	e04b      	b.n	8006684 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2b04      	cmp	r3, #4
 80065f0:	d102      	bne.n	80065f8 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80065f2:	4b28      	ldr	r3, [pc, #160]	; (8006694 <HAL_RCC_GetSysClockFreq+0xd0>)
 80065f4:	60fb      	str	r3, [r7, #12]
 80065f6:	e045      	b.n	8006684 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2b08      	cmp	r3, #8
 80065fc:	d10a      	bne.n	8006614 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80065fe:	f7fe ffb7 	bl	8005570 <LL_RCC_HSE_IsEnabledDiv2>
 8006602:	4603      	mov	r3, r0
 8006604:	2b01      	cmp	r3, #1
 8006606:	d102      	bne.n	800660e <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8006608:	4b22      	ldr	r3, [pc, #136]	; (8006694 <HAL_RCC_GetSysClockFreq+0xd0>)
 800660a:	60fb      	str	r3, [r7, #12]
 800660c:	e03a      	b.n	8006684 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800660e:	4b22      	ldr	r3, [pc, #136]	; (8006698 <HAL_RCC_GetSysClockFreq+0xd4>)
 8006610:	60fb      	str	r3, [r7, #12]
 8006612:	e037      	b.n	8006684 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8006614:	f7ff fab9 	bl	8005b8a <LL_RCC_PLL_GetMainSource>
 8006618:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	2b02      	cmp	r3, #2
 800661e:	d003      	beq.n	8006628 <HAL_RCC_GetSysClockFreq+0x64>
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	2b03      	cmp	r3, #3
 8006624:	d003      	beq.n	800662e <HAL_RCC_GetSysClockFreq+0x6a>
 8006626:	e00d      	b.n	8006644 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8006628:	4b1a      	ldr	r3, [pc, #104]	; (8006694 <HAL_RCC_GetSysClockFreq+0xd0>)
 800662a:	60bb      	str	r3, [r7, #8]
        break;
 800662c:	e015      	b.n	800665a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800662e:	f7fe ff9f 	bl	8005570 <LL_RCC_HSE_IsEnabledDiv2>
 8006632:	4603      	mov	r3, r0
 8006634:	2b01      	cmp	r3, #1
 8006636:	d102      	bne.n	800663e <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8006638:	4b16      	ldr	r3, [pc, #88]	; (8006694 <HAL_RCC_GetSysClockFreq+0xd0>)
 800663a:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800663c:	e00d      	b.n	800665a <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 800663e:	4b16      	ldr	r3, [pc, #88]	; (8006698 <HAL_RCC_GetSysClockFreq+0xd4>)
 8006640:	60bb      	str	r3, [r7, #8]
        break;
 8006642:	e00a      	b.n	800665a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8006644:	f7ff f967 	bl	8005916 <LL_RCC_MSI_GetRange>
 8006648:	4603      	mov	r3, r0
 800664a:	091b      	lsrs	r3, r3, #4
 800664c:	f003 030f 	and.w	r3, r3, #15
 8006650:	4a0f      	ldr	r2, [pc, #60]	; (8006690 <HAL_RCC_GetSysClockFreq+0xcc>)
 8006652:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006656:	60bb      	str	r3, [r7, #8]
        break;
 8006658:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 800665a:	f7ff fa71 	bl	8005b40 <LL_RCC_PLL_GetN>
 800665e:	4602      	mov	r2, r0
 8006660:	68bb      	ldr	r3, [r7, #8]
 8006662:	fb03 f402 	mul.w	r4, r3, r2
 8006666:	f7ff fa84 	bl	8005b72 <LL_RCC_PLL_GetDivider>
 800666a:	4603      	mov	r3, r0
 800666c:	091b      	lsrs	r3, r3, #4
 800666e:	3301      	adds	r3, #1
 8006670:	fbb4 f4f3 	udiv	r4, r4, r3
 8006674:	f7ff fa71 	bl	8005b5a <LL_RCC_PLL_GetR>
 8006678:	4603      	mov	r3, r0
 800667a:	0f5b      	lsrs	r3, r3, #29
 800667c:	3301      	adds	r3, #1
 800667e:	fbb4 f3f3 	udiv	r3, r4, r3
 8006682:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8006684:	68fb      	ldr	r3, [r7, #12]
}
 8006686:	4618      	mov	r0, r3
 8006688:	3714      	adds	r7, #20
 800668a:	46bd      	mov	sp, r7
 800668c:	bd90      	pop	{r4, r7, pc}
 800668e:	bf00      	nop
 8006690:	0800d980 	.word	0x0800d980
 8006694:	00f42400 	.word	0x00f42400
 8006698:	01e84800 	.word	0x01e84800

0800669c <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800669c:	b598      	push	{r3, r4, r7, lr}
 800669e:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80066a0:	f7ff ff90 	bl	80065c4 <HAL_RCC_GetSysClockFreq>
 80066a4:	4604      	mov	r4, r0
 80066a6:	f7ff f9e9 	bl	8005a7c <LL_RCC_GetAHBPrescaler>
 80066aa:	4603      	mov	r3, r0
 80066ac:	091b      	lsrs	r3, r3, #4
 80066ae:	f003 030f 	and.w	r3, r3, #15
 80066b2:	4a03      	ldr	r2, [pc, #12]	; (80066c0 <HAL_RCC_GetHCLKFreq+0x24>)
 80066b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80066b8:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80066bc:	4618      	mov	r0, r3
 80066be:	bd98      	pop	{r3, r4, r7, pc}
 80066c0:	0800d920 	.word	0x0800d920

080066c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80066c4:	b598      	push	{r3, r4, r7, lr}
 80066c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80066c8:	f7ff ffe8 	bl	800669c <HAL_RCC_GetHCLKFreq>
 80066cc:	4604      	mov	r4, r0
 80066ce:	f7ff f9ef 	bl	8005ab0 <LL_RCC_GetAPB1Prescaler>
 80066d2:	4603      	mov	r3, r0
 80066d4:	0a1b      	lsrs	r3, r3, #8
 80066d6:	f003 0307 	and.w	r3, r3, #7
 80066da:	4a04      	ldr	r2, [pc, #16]	; (80066ec <HAL_RCC_GetPCLK1Freq+0x28>)
 80066dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80066e0:	f003 031f 	and.w	r3, r3, #31
 80066e4:	fa24 f303 	lsr.w	r3, r4, r3
}
 80066e8:	4618      	mov	r0, r3
 80066ea:	bd98      	pop	{r3, r4, r7, pc}
 80066ec:	0800d960 	.word	0x0800d960

080066f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80066f0:	b598      	push	{r3, r4, r7, lr}
 80066f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80066f4:	f7ff ffd2 	bl	800669c <HAL_RCC_GetHCLKFreq>
 80066f8:	4604      	mov	r4, r0
 80066fa:	f7ff f9e5 	bl	8005ac8 <LL_RCC_GetAPB2Prescaler>
 80066fe:	4603      	mov	r3, r0
 8006700:	0adb      	lsrs	r3, r3, #11
 8006702:	f003 0307 	and.w	r3, r3, #7
 8006706:	4a04      	ldr	r2, [pc, #16]	; (8006718 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006708:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800670c:	f003 031f 	and.w	r3, r3, #31
 8006710:	fa24 f303 	lsr.w	r3, r4, r3
}
 8006714:	4618      	mov	r0, r3
 8006716:	bd98      	pop	{r3, r4, r7, pc}
 8006718:	0800d960 	.word	0x0800d960

0800671c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 800671c:	b590      	push	{r4, r7, lr}
 800671e:	b085      	sub	sp, #20
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2bb0      	cmp	r3, #176	; 0xb0
 8006728:	d903      	bls.n	8006732 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800672a:	4b15      	ldr	r3, [pc, #84]	; (8006780 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800672c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800672e:	60fb      	str	r3, [r7, #12]
 8006730:	e007      	b.n	8006742 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	091b      	lsrs	r3, r3, #4
 8006736:	f003 030f 	and.w	r3, r3, #15
 800673a:	4a11      	ldr	r2, [pc, #68]	; (8006780 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800673c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006740:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8006742:	f7ff f9a7 	bl	8005a94 <LL_RCC_GetAHB4Prescaler>
 8006746:	4603      	mov	r3, r0
 8006748:	091b      	lsrs	r3, r3, #4
 800674a:	f003 030f 	and.w	r3, r3, #15
 800674e:	4a0d      	ldr	r2, [pc, #52]	; (8006784 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8006750:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006754:	68fa      	ldr	r2, [r7, #12]
 8006756:	fbb2 f3f3 	udiv	r3, r2, r3
 800675a:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800675c:	68bb      	ldr	r3, [r7, #8]
 800675e:	4a0a      	ldr	r2, [pc, #40]	; (8006788 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8006760:	fba2 2303 	umull	r2, r3, r2, r3
 8006764:	0c9c      	lsrs	r4, r3, #18
 8006766:	f7fe fef5 	bl	8005554 <HAL_PWREx_GetVoltageRange>
 800676a:	4603      	mov	r3, r0
 800676c:	4619      	mov	r1, r3
 800676e:	4620      	mov	r0, r4
 8006770:	f000 f80c 	bl	800678c <RCC_SetFlashLatency>
 8006774:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8006776:	4618      	mov	r0, r3
 8006778:	3714      	adds	r7, #20
 800677a:	46bd      	mov	sp, r7
 800677c:	bd90      	pop	{r4, r7, pc}
 800677e:	bf00      	nop
 8006780:	0800d980 	.word	0x0800d980
 8006784:	0800d920 	.word	0x0800d920
 8006788:	431bde83 	.word	0x431bde83

0800678c <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800678c:	b590      	push	{r4, r7, lr}
 800678e:	b093      	sub	sp, #76	; 0x4c
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
 8006794:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8006796:	4b37      	ldr	r3, [pc, #220]	; (8006874 <RCC_SetFlashLatency+0xe8>)
 8006798:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800679c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800679e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 80067a2:	4a35      	ldr	r2, [pc, #212]	; (8006878 <RCC_SetFlashLatency+0xec>)
 80067a4:	f107 031c 	add.w	r3, r7, #28
 80067a8:	ca07      	ldmia	r2, {r0, r1, r2}
 80067aa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 80067ae:	4b33      	ldr	r3, [pc, #204]	; (800687c <RCC_SetFlashLatency+0xf0>)
 80067b0:	f107 040c 	add.w	r4, r7, #12
 80067b4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80067b6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80067ba:	2300      	movs	r3, #0
 80067bc:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80067c4:	d11a      	bne.n	80067fc <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80067c6:	2300      	movs	r3, #0
 80067c8:	643b      	str	r3, [r7, #64]	; 0x40
 80067ca:	e013      	b.n	80067f4 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80067cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80067ce:	009b      	lsls	r3, r3, #2
 80067d0:	3348      	adds	r3, #72	; 0x48
 80067d2:	443b      	add	r3, r7
 80067d4:	f853 3c20 	ldr.w	r3, [r3, #-32]
 80067d8:	687a      	ldr	r2, [r7, #4]
 80067da:	429a      	cmp	r2, r3
 80067dc:	d807      	bhi.n	80067ee <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80067de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80067e0:	009b      	lsls	r3, r3, #2
 80067e2:	3348      	adds	r3, #72	; 0x48
 80067e4:	443b      	add	r3, r7
 80067e6:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80067ea:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80067ec:	e020      	b.n	8006830 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80067ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80067f0:	3301      	adds	r3, #1
 80067f2:	643b      	str	r3, [r7, #64]	; 0x40
 80067f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80067f6:	2b03      	cmp	r3, #3
 80067f8:	d9e8      	bls.n	80067cc <RCC_SetFlashLatency+0x40>
 80067fa:	e019      	b.n	8006830 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80067fc:	2300      	movs	r3, #0
 80067fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006800:	e013      	b.n	800682a <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8006802:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006804:	009b      	lsls	r3, r3, #2
 8006806:	3348      	adds	r3, #72	; 0x48
 8006808:	443b      	add	r3, r7
 800680a:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800680e:	687a      	ldr	r2, [r7, #4]
 8006810:	429a      	cmp	r2, r3
 8006812:	d807      	bhi.n	8006824 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8006814:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006816:	009b      	lsls	r3, r3, #2
 8006818:	3348      	adds	r3, #72	; 0x48
 800681a:	443b      	add	r3, r7
 800681c:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8006820:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8006822:	e005      	b.n	8006830 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8006824:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006826:	3301      	adds	r3, #1
 8006828:	63fb      	str	r3, [r7, #60]	; 0x3c
 800682a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800682c:	2b02      	cmp	r3, #2
 800682e:	d9e8      	bls.n	8006802 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8006830:	4b13      	ldr	r3, [pc, #76]	; (8006880 <RCC_SetFlashLatency+0xf4>)
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f023 0207 	bic.w	r2, r3, #7
 8006838:	4911      	ldr	r1, [pc, #68]	; (8006880 <RCC_SetFlashLatency+0xf4>)
 800683a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800683c:	4313      	orrs	r3, r2
 800683e:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006840:	f7fc fdfe 	bl	8003440 <HAL_GetTick>
 8006844:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8006846:	e008      	b.n	800685a <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006848:	f7fc fdfa 	bl	8003440 <HAL_GetTick>
 800684c:	4602      	mov	r2, r0
 800684e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006850:	1ad3      	subs	r3, r2, r3
 8006852:	2b02      	cmp	r3, #2
 8006854:	d901      	bls.n	800685a <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8006856:	2303      	movs	r3, #3
 8006858:	e007      	b.n	800686a <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800685a:	4b09      	ldr	r3, [pc, #36]	; (8006880 <RCC_SetFlashLatency+0xf4>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f003 0307 	and.w	r3, r3, #7
 8006862:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006864:	429a      	cmp	r2, r3
 8006866:	d1ef      	bne.n	8006848 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8006868:	2300      	movs	r3, #0
}
 800686a:	4618      	mov	r0, r3
 800686c:	374c      	adds	r7, #76	; 0x4c
 800686e:	46bd      	mov	sp, r7
 8006870:	bd90      	pop	{r4, r7, pc}
 8006872:	bf00      	nop
 8006874:	0800d77c 	.word	0x0800d77c
 8006878:	0800d78c 	.word	0x0800d78c
 800687c:	0800d798 	.word	0x0800d798
 8006880:	58004000 	.word	0x58004000

08006884 <LL_RCC_LSE_IsEnabled>:
{
 8006884:	b480      	push	{r7}
 8006886:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8006888:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800688c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006890:	f003 0301 	and.w	r3, r3, #1
 8006894:	2b01      	cmp	r3, #1
 8006896:	d101      	bne.n	800689c <LL_RCC_LSE_IsEnabled+0x18>
 8006898:	2301      	movs	r3, #1
 800689a:	e000      	b.n	800689e <LL_RCC_LSE_IsEnabled+0x1a>
 800689c:	2300      	movs	r3, #0
}
 800689e:	4618      	mov	r0, r3
 80068a0:	46bd      	mov	sp, r7
 80068a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a6:	4770      	bx	lr

080068a8 <LL_RCC_LSE_IsReady>:
{
 80068a8:	b480      	push	{r7}
 80068aa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80068ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80068b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068b4:	f003 0302 	and.w	r3, r3, #2
 80068b8:	2b02      	cmp	r3, #2
 80068ba:	d101      	bne.n	80068c0 <LL_RCC_LSE_IsReady+0x18>
 80068bc:	2301      	movs	r3, #1
 80068be:	e000      	b.n	80068c2 <LL_RCC_LSE_IsReady+0x1a>
 80068c0:	2300      	movs	r3, #0
}
 80068c2:	4618      	mov	r0, r3
 80068c4:	46bd      	mov	sp, r7
 80068c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ca:	4770      	bx	lr

080068cc <LL_RCC_SetRFWKPClockSource>:
{
 80068cc:	b480      	push	{r7}
 80068ce:	b083      	sub	sp, #12
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 80068d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80068d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80068dc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80068e0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	4313      	orrs	r3, r2
 80068e8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80068ec:	bf00      	nop
 80068ee:	370c      	adds	r7, #12
 80068f0:	46bd      	mov	sp, r7
 80068f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f6:	4770      	bx	lr

080068f8 <LL_RCC_SetSMPSClockSource>:
{
 80068f8:	b480      	push	{r7}
 80068fa:	b083      	sub	sp, #12
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8006900:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006906:	f023 0203 	bic.w	r2, r3, #3
 800690a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	4313      	orrs	r3, r2
 8006912:	624b      	str	r3, [r1, #36]	; 0x24
}
 8006914:	bf00      	nop
 8006916:	370c      	adds	r7, #12
 8006918:	46bd      	mov	sp, r7
 800691a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691e:	4770      	bx	lr

08006920 <LL_RCC_SetSMPSPrescaler>:
{
 8006920:	b480      	push	{r7}
 8006922:	b083      	sub	sp, #12
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8006928:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800692c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800692e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006932:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	4313      	orrs	r3, r2
 800693a:	624b      	str	r3, [r1, #36]	; 0x24
}
 800693c:	bf00      	nop
 800693e:	370c      	adds	r7, #12
 8006940:	46bd      	mov	sp, r7
 8006942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006946:	4770      	bx	lr

08006948 <LL_RCC_SetUSARTClockSource>:
{
 8006948:	b480      	push	{r7}
 800694a:	b083      	sub	sp, #12
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8006950:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006954:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006958:	f023 0203 	bic.w	r2, r3, #3
 800695c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	4313      	orrs	r3, r2
 8006964:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006968:	bf00      	nop
 800696a:	370c      	adds	r7, #12
 800696c:	46bd      	mov	sp, r7
 800696e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006972:	4770      	bx	lr

08006974 <LL_RCC_SetLPUARTClockSource>:
{
 8006974:	b480      	push	{r7}
 8006976:	b083      	sub	sp, #12
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800697c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006980:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006984:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006988:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	4313      	orrs	r3, r2
 8006990:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006994:	bf00      	nop
 8006996:	370c      	adds	r7, #12
 8006998:	46bd      	mov	sp, r7
 800699a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699e:	4770      	bx	lr

080069a0 <LL_RCC_SetI2CClockSource>:
{
 80069a0:	b480      	push	{r7}
 80069a2:	b083      	sub	sp, #12
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80069a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80069ac:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	091b      	lsrs	r3, r3, #4
 80069b4:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80069b8:	43db      	mvns	r3, r3
 80069ba:	401a      	ands	r2, r3
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	011b      	lsls	r3, r3, #4
 80069c0:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80069c4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80069c8:	4313      	orrs	r3, r2
 80069ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80069ce:	bf00      	nop
 80069d0:	370c      	adds	r7, #12
 80069d2:	46bd      	mov	sp, r7
 80069d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d8:	4770      	bx	lr

080069da <LL_RCC_SetLPTIMClockSource>:
{
 80069da:	b480      	push	{r7}
 80069dc:	b083      	sub	sp, #12
 80069de:	af00      	add	r7, sp, #0
 80069e0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80069e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80069e6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	0c1b      	lsrs	r3, r3, #16
 80069ee:	041b      	lsls	r3, r3, #16
 80069f0:	43db      	mvns	r3, r3
 80069f2:	401a      	ands	r2, r3
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	041b      	lsls	r3, r3, #16
 80069f8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80069fc:	4313      	orrs	r3, r2
 80069fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006a02:	bf00      	nop
 8006a04:	370c      	adds	r7, #12
 8006a06:	46bd      	mov	sp, r7
 8006a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0c:	4770      	bx	lr

08006a0e <LL_RCC_SetSAIClockSource>:
{
 8006a0e:	b480      	push	{r7}
 8006a10:	b083      	sub	sp, #12
 8006a12:	af00      	add	r7, sp, #0
 8006a14:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8006a16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a1e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006a22:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	4313      	orrs	r3, r2
 8006a2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006a2e:	bf00      	nop
 8006a30:	370c      	adds	r7, #12
 8006a32:	46bd      	mov	sp, r7
 8006a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a38:	4770      	bx	lr

08006a3a <LL_RCC_SetRNGClockSource>:
{
 8006a3a:	b480      	push	{r7}
 8006a3c:	b083      	sub	sp, #12
 8006a3e:	af00      	add	r7, sp, #0
 8006a40:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8006a42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a4a:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8006a4e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	4313      	orrs	r3, r2
 8006a56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006a5a:	bf00      	nop
 8006a5c:	370c      	adds	r7, #12
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a64:	4770      	bx	lr

08006a66 <LL_RCC_SetCLK48ClockSource>:
{
 8006a66:	b480      	push	{r7}
 8006a68:	b083      	sub	sp, #12
 8006a6a:	af00      	add	r7, sp, #0
 8006a6c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8006a6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a76:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006a7a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	4313      	orrs	r3, r2
 8006a82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006a86:	bf00      	nop
 8006a88:	370c      	adds	r7, #12
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a90:	4770      	bx	lr

08006a92 <LL_RCC_SetUSBClockSource>:
{
 8006a92:	b580      	push	{r7, lr}
 8006a94:	b082      	sub	sp, #8
 8006a96:	af00      	add	r7, sp, #0
 8006a98:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8006a9a:	6878      	ldr	r0, [r7, #4]
 8006a9c:	f7ff ffe3 	bl	8006a66 <LL_RCC_SetCLK48ClockSource>
}
 8006aa0:	bf00      	nop
 8006aa2:	3708      	adds	r7, #8
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	bd80      	pop	{r7, pc}

08006aa8 <LL_RCC_SetADCClockSource>:
{
 8006aa8:	b480      	push	{r7}
 8006aaa:	b083      	sub	sp, #12
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8006ab0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ab4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ab8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006abc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	4313      	orrs	r3, r2
 8006ac4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006ac8:	bf00      	nop
 8006aca:	370c      	adds	r7, #12
 8006acc:	46bd      	mov	sp, r7
 8006ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad2:	4770      	bx	lr

08006ad4 <LL_RCC_SetRTCClockSource>:
{
 8006ad4:	b480      	push	{r7}
 8006ad6:	b083      	sub	sp, #12
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8006adc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ae0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ae4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006ae8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	4313      	orrs	r3, r2
 8006af0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8006af4:	bf00      	nop
 8006af6:	370c      	adds	r7, #12
 8006af8:	46bd      	mov	sp, r7
 8006afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afe:	4770      	bx	lr

08006b00 <LL_RCC_GetRTCClockSource>:
{
 8006b00:	b480      	push	{r7}
 8006b02:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8006b04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b0c:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8006b10:	4618      	mov	r0, r3
 8006b12:	46bd      	mov	sp, r7
 8006b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b18:	4770      	bx	lr

08006b1a <LL_RCC_ForceBackupDomainReset>:
{
 8006b1a:	b480      	push	{r7}
 8006b1c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006b1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b26:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006b2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b2e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006b32:	bf00      	nop
 8006b34:	46bd      	mov	sp, r7
 8006b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3a:	4770      	bx	lr

08006b3c <LL_RCC_ReleaseBackupDomainReset>:
{
 8006b3c:	b480      	push	{r7}
 8006b3e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006b40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b48:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006b4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006b54:	bf00      	nop
 8006b56:	46bd      	mov	sp, r7
 8006b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5c:	4770      	bx	lr

08006b5e <LL_RCC_PLLSAI1_Enable>:
{
 8006b5e:	b480      	push	{r7}
 8006b60:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8006b62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006b6c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006b70:	6013      	str	r3, [r2, #0]
}
 8006b72:	bf00      	nop
 8006b74:	46bd      	mov	sp, r7
 8006b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7a:	4770      	bx	lr

08006b7c <LL_RCC_PLLSAI1_Disable>:
{
 8006b7c:	b480      	push	{r7}
 8006b7e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8006b80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006b8a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006b8e:	6013      	str	r3, [r2, #0]
}
 8006b90:	bf00      	nop
 8006b92:	46bd      	mov	sp, r7
 8006b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b98:	4770      	bx	lr

08006b9a <LL_RCC_PLLSAI1_IsReady>:
{
 8006b9a:	b480      	push	{r7}
 8006b9c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8006b9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006ba8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006bac:	d101      	bne.n	8006bb2 <LL_RCC_PLLSAI1_IsReady+0x18>
 8006bae:	2301      	movs	r3, #1
 8006bb0:	e000      	b.n	8006bb4 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8006bb2:	2300      	movs	r3, #0
}
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bbc:	4770      	bx	lr

08006bbe <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006bbe:	b580      	push	{r7, lr}
 8006bc0:	b088      	sub	sp, #32
 8006bc2:	af00      	add	r7, sp, #0
 8006bc4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8006bca:	2300      	movs	r3, #0
 8006bcc:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d034      	beq.n	8006c44 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bde:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006be2:	d021      	beq.n	8006c28 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8006be4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006be8:	d81b      	bhi.n	8006c22 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006bea:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006bee:	d01d      	beq.n	8006c2c <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8006bf0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006bf4:	d815      	bhi.n	8006c22 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d00b      	beq.n	8006c12 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8006bfa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006bfe:	d110      	bne.n	8006c22 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8006c00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c04:	68db      	ldr	r3, [r3, #12]
 8006c06:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006c0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c0e:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8006c10:	e00d      	b.n	8006c2e <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	3304      	adds	r3, #4
 8006c16:	4618      	mov	r0, r3
 8006c18:	f000 f947 	bl	8006eaa <RCCEx_PLLSAI1_ConfigNP>
 8006c1c:	4603      	mov	r3, r0
 8006c1e:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006c20:	e005      	b.n	8006c2e <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8006c22:	2301      	movs	r3, #1
 8006c24:	77fb      	strb	r3, [r7, #31]
        break;
 8006c26:	e002      	b.n	8006c2e <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8006c28:	bf00      	nop
 8006c2a:	e000      	b.n	8006c2e <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8006c2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c2e:	7ffb      	ldrb	r3, [r7, #31]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d105      	bne.n	8006c40 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c38:	4618      	mov	r0, r3
 8006c3a:	f7ff fee8 	bl	8006a0e <LL_RCC_SetSAIClockSource>
 8006c3e:	e001      	b.n	8006c44 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c40:	7ffb      	ldrb	r3, [r7, #31]
 8006c42:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d046      	beq.n	8006cde <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8006c50:	f7ff ff56 	bl	8006b00 <LL_RCC_GetRTCClockSource>
 8006c54:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c5a:	69ba      	ldr	r2, [r7, #24]
 8006c5c:	429a      	cmp	r2, r3
 8006c5e:	d03c      	beq.n	8006cda <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8006c60:	f7fe fc68 	bl	8005534 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8006c64:	69bb      	ldr	r3, [r7, #24]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d105      	bne.n	8006c76 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c6e:	4618      	mov	r0, r3
 8006c70:	f7ff ff30 	bl	8006ad4 <LL_RCC_SetRTCClockSource>
 8006c74:	e02e      	b.n	8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8006c76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c7e:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8006c80:	f7ff ff4b 	bl	8006b1a <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8006c84:	f7ff ff5a 	bl	8006b3c <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8006c88:	697b      	ldr	r3, [r7, #20]
 8006c8a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c92:	4313      	orrs	r3, r2
 8006c94:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8006c96:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006c9a:	697b      	ldr	r3, [r7, #20]
 8006c9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8006ca0:	f7ff fdf0 	bl	8006884 <LL_RCC_LSE_IsEnabled>
 8006ca4:	4603      	mov	r3, r0
 8006ca6:	2b01      	cmp	r3, #1
 8006ca8:	d114      	bne.n	8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006caa:	f7fc fbc9 	bl	8003440 <HAL_GetTick>
 8006cae:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8006cb0:	e00b      	b.n	8006cca <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006cb2:	f7fc fbc5 	bl	8003440 <HAL_GetTick>
 8006cb6:	4602      	mov	r2, r0
 8006cb8:	693b      	ldr	r3, [r7, #16]
 8006cba:	1ad3      	subs	r3, r2, r3
 8006cbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8006cc0:	4293      	cmp	r3, r2
 8006cc2:	d902      	bls.n	8006cca <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8006cc4:	2303      	movs	r3, #3
 8006cc6:	77fb      	strb	r3, [r7, #31]
              break;
 8006cc8:	e004      	b.n	8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8006cca:	f7ff fded 	bl	80068a8 <LL_RCC_LSE_IsReady>
 8006cce:	4603      	mov	r3, r0
 8006cd0:	2b01      	cmp	r3, #1
 8006cd2:	d1ee      	bne.n	8006cb2 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8006cd4:	7ffb      	ldrb	r3, [r7, #31]
 8006cd6:	77bb      	strb	r3, [r7, #30]
 8006cd8:	e001      	b.n	8006cde <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cda:	7ffb      	ldrb	r3, [r7, #31]
 8006cdc:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f003 0301 	and.w	r3, r3, #1
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d004      	beq.n	8006cf4 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	699b      	ldr	r3, [r3, #24]
 8006cee:	4618      	mov	r0, r3
 8006cf0:	f7ff fe2a 	bl	8006948 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f003 0302 	and.w	r3, r3, #2
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d004      	beq.n	8006d0a <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	69db      	ldr	r3, [r3, #28]
 8006d04:	4618      	mov	r0, r3
 8006d06:	f7ff fe35 	bl	8006974 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f003 0310 	and.w	r3, r3, #16
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d004      	beq.n	8006d20 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	f7ff fe5d 	bl	80069da <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f003 0320 	and.w	r3, r3, #32
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d004      	beq.n	8006d36 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d30:	4618      	mov	r0, r3
 8006d32:	f7ff fe52 	bl	80069da <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f003 0304 	and.w	r3, r3, #4
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d004      	beq.n	8006d4c <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	6a1b      	ldr	r3, [r3, #32]
 8006d46:	4618      	mov	r0, r3
 8006d48:	f7ff fe2a 	bl	80069a0 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f003 0308 	and.w	r3, r3, #8
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d004      	beq.n	8006d62 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	f7ff fe1f 	bl	80069a0 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d022      	beq.n	8006db4 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d72:	4618      	mov	r0, r3
 8006d74:	f7ff fe8d 	bl	8006a92 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d7c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006d80:	d107      	bne.n	8006d92 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8006d82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d86:	68db      	ldr	r3, [r3, #12]
 8006d88:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006d8c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006d90:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d96:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006d9a:	d10b      	bne.n	8006db4 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	3304      	adds	r3, #4
 8006da0:	4618      	mov	r0, r3
 8006da2:	f000 f8dd 	bl	8006f60 <RCCEx_PLLSAI1_ConfigNQ>
 8006da6:	4603      	mov	r3, r0
 8006da8:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8006daa:	7ffb      	ldrb	r3, [r7, #31]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d001      	beq.n	8006db4 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8006db0:	7ffb      	ldrb	r3, [r7, #31]
 8006db2:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d02b      	beq.n	8006e18 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006dc8:	d008      	beq.n	8006ddc <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006dd2:	d003      	beq.n	8006ddc <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d105      	bne.n	8006de8 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006de0:	4618      	mov	r0, r3
 8006de2:	f7ff fe2a 	bl	8006a3a <LL_RCC_SetRNGClockSource>
 8006de6:	e00a      	b.n	8006dfe <HAL_RCCEx_PeriphCLKConfig+0x240>
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006df0:	60fb      	str	r3, [r7, #12]
 8006df2:	2000      	movs	r0, #0
 8006df4:	f7ff fe21 	bl	8006a3a <LL_RCC_SetRNGClockSource>
 8006df8:	68f8      	ldr	r0, [r7, #12]
 8006dfa:	f7ff fe34 	bl	8006a66 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e02:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8006e06:	d107      	bne.n	8006e18 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8006e08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e0c:	68db      	ldr	r3, [r3, #12]
 8006e0e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006e12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006e16:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d022      	beq.n	8006e6a <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e28:	4618      	mov	r0, r3
 8006e2a:	f7ff fe3d 	bl	8006aa8 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e32:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e36:	d107      	bne.n	8006e48 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006e38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e3c:	68db      	ldr	r3, [r3, #12]
 8006e3e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006e42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006e46:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e4c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006e50:	d10b      	bne.n	8006e6a <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	3304      	adds	r3, #4
 8006e56:	4618      	mov	r0, r3
 8006e58:	f000 f8dd 	bl	8007016 <RCCEx_PLLSAI1_ConfigNR>
 8006e5c:	4603      	mov	r3, r0
 8006e5e:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8006e60:	7ffb      	ldrb	r3, [r7, #31]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d001      	beq.n	8006e6a <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8006e66:	7ffb      	ldrb	r3, [r7, #31]
 8006e68:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d004      	beq.n	8006e80 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	f7ff fd26 	bl	80068cc <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d009      	beq.n	8006ea0 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e90:	4618      	mov	r0, r3
 8006e92:	f7ff fd45 	bl	8006920 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	f7ff fd2c 	bl	80068f8 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8006ea0:	7fbb      	ldrb	r3, [r7, #30]
}
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	3720      	adds	r7, #32
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	bd80      	pop	{r7, pc}

08006eaa <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8006eaa:	b580      	push	{r7, lr}
 8006eac:	b084      	sub	sp, #16
 8006eae:	af00      	add	r7, sp, #0
 8006eb0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8006eb6:	f7ff fe61 	bl	8006b7c <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006eba:	f7fc fac1 	bl	8003440 <HAL_GetTick>
 8006ebe:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006ec0:	e009      	b.n	8006ed6 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006ec2:	f7fc fabd 	bl	8003440 <HAL_GetTick>
 8006ec6:	4602      	mov	r2, r0
 8006ec8:	68bb      	ldr	r3, [r7, #8]
 8006eca:	1ad3      	subs	r3, r2, r3
 8006ecc:	2b02      	cmp	r3, #2
 8006ece:	d902      	bls.n	8006ed6 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8006ed0:	2303      	movs	r3, #3
 8006ed2:	73fb      	strb	r3, [r7, #15]
      break;
 8006ed4:	e004      	b.n	8006ee0 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006ed6:	f7ff fe60 	bl	8006b9a <LL_RCC_PLLSAI1_IsReady>
 8006eda:	4603      	mov	r3, r0
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d1f0      	bne.n	8006ec2 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8006ee0:	7bfb      	ldrb	r3, [r7, #15]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d137      	bne.n	8006f56 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8006ee6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006eea:	691b      	ldr	r3, [r3, #16]
 8006eec:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	021b      	lsls	r3, r3, #8
 8006ef6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006efa:	4313      	orrs	r3, r2
 8006efc:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8006efe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f02:	691b      	ldr	r3, [r3, #16]
 8006f04:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	685b      	ldr	r3, [r3, #4]
 8006f0c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006f10:	4313      	orrs	r3, r2
 8006f12:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8006f14:	f7ff fe23 	bl	8006b5e <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006f18:	f7fc fa92 	bl	8003440 <HAL_GetTick>
 8006f1c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006f1e:	e009      	b.n	8006f34 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006f20:	f7fc fa8e 	bl	8003440 <HAL_GetTick>
 8006f24:	4602      	mov	r2, r0
 8006f26:	68bb      	ldr	r3, [r7, #8]
 8006f28:	1ad3      	subs	r3, r2, r3
 8006f2a:	2b02      	cmp	r3, #2
 8006f2c:	d902      	bls.n	8006f34 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8006f2e:	2303      	movs	r3, #3
 8006f30:	73fb      	strb	r3, [r7, #15]
        break;
 8006f32:	e004      	b.n	8006f3e <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006f34:	f7ff fe31 	bl	8006b9a <LL_RCC_PLLSAI1_IsReady>
 8006f38:	4603      	mov	r3, r0
 8006f3a:	2b01      	cmp	r3, #1
 8006f3c:	d1f0      	bne.n	8006f20 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8006f3e:	7bfb      	ldrb	r3, [r7, #15]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d108      	bne.n	8006f56 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8006f44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f48:	691a      	ldr	r2, [r3, #16]
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	691b      	ldr	r3, [r3, #16]
 8006f4e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006f52:	4313      	orrs	r3, r2
 8006f54:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8006f56:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f58:	4618      	mov	r0, r3
 8006f5a:	3710      	adds	r7, #16
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	bd80      	pop	{r7, pc}

08006f60 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b084      	sub	sp, #16
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006f68:	2300      	movs	r3, #0
 8006f6a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8006f6c:	f7ff fe06 	bl	8006b7c <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006f70:	f7fc fa66 	bl	8003440 <HAL_GetTick>
 8006f74:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006f76:	e009      	b.n	8006f8c <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006f78:	f7fc fa62 	bl	8003440 <HAL_GetTick>
 8006f7c:	4602      	mov	r2, r0
 8006f7e:	68bb      	ldr	r3, [r7, #8]
 8006f80:	1ad3      	subs	r3, r2, r3
 8006f82:	2b02      	cmp	r3, #2
 8006f84:	d902      	bls.n	8006f8c <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8006f86:	2303      	movs	r3, #3
 8006f88:	73fb      	strb	r3, [r7, #15]
      break;
 8006f8a:	e004      	b.n	8006f96 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006f8c:	f7ff fe05 	bl	8006b9a <LL_RCC_PLLSAI1_IsReady>
 8006f90:	4603      	mov	r3, r0
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d1f0      	bne.n	8006f78 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8006f96:	7bfb      	ldrb	r3, [r7, #15]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d137      	bne.n	800700c <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8006f9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006fa0:	691b      	ldr	r3, [r3, #16]
 8006fa2:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	021b      	lsls	r3, r3, #8
 8006fac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006fb0:	4313      	orrs	r3, r2
 8006fb2:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8006fb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006fb8:	691b      	ldr	r3, [r3, #16]
 8006fba:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	689b      	ldr	r3, [r3, #8]
 8006fc2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006fc6:	4313      	orrs	r3, r2
 8006fc8:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8006fca:	f7ff fdc8 	bl	8006b5e <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006fce:	f7fc fa37 	bl	8003440 <HAL_GetTick>
 8006fd2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006fd4:	e009      	b.n	8006fea <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006fd6:	f7fc fa33 	bl	8003440 <HAL_GetTick>
 8006fda:	4602      	mov	r2, r0
 8006fdc:	68bb      	ldr	r3, [r7, #8]
 8006fde:	1ad3      	subs	r3, r2, r3
 8006fe0:	2b02      	cmp	r3, #2
 8006fe2:	d902      	bls.n	8006fea <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8006fe4:	2303      	movs	r3, #3
 8006fe6:	73fb      	strb	r3, [r7, #15]
        break;
 8006fe8:	e004      	b.n	8006ff4 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006fea:	f7ff fdd6 	bl	8006b9a <LL_RCC_PLLSAI1_IsReady>
 8006fee:	4603      	mov	r3, r0
 8006ff0:	2b01      	cmp	r3, #1
 8006ff2:	d1f0      	bne.n	8006fd6 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8006ff4:	7bfb      	ldrb	r3, [r7, #15]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d108      	bne.n	800700c <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8006ffa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ffe:	691a      	ldr	r2, [r3, #16]
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	691b      	ldr	r3, [r3, #16]
 8007004:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007008:	4313      	orrs	r3, r2
 800700a:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800700c:	7bfb      	ldrb	r3, [r7, #15]
}
 800700e:	4618      	mov	r0, r3
 8007010:	3710      	adds	r7, #16
 8007012:	46bd      	mov	sp, r7
 8007014:	bd80      	pop	{r7, pc}

08007016 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8007016:	b580      	push	{r7, lr}
 8007018:	b084      	sub	sp, #16
 800701a:	af00      	add	r7, sp, #0
 800701c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800701e:	2300      	movs	r3, #0
 8007020:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8007022:	f7ff fdab 	bl	8006b7c <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007026:	f7fc fa0b 	bl	8003440 <HAL_GetTick>
 800702a:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800702c:	e009      	b.n	8007042 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800702e:	f7fc fa07 	bl	8003440 <HAL_GetTick>
 8007032:	4602      	mov	r2, r0
 8007034:	68bb      	ldr	r3, [r7, #8]
 8007036:	1ad3      	subs	r3, r2, r3
 8007038:	2b02      	cmp	r3, #2
 800703a:	d902      	bls.n	8007042 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 800703c:	2303      	movs	r3, #3
 800703e:	73fb      	strb	r3, [r7, #15]
      break;
 8007040:	e004      	b.n	800704c <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007042:	f7ff fdaa 	bl	8006b9a <LL_RCC_PLLSAI1_IsReady>
 8007046:	4603      	mov	r3, r0
 8007048:	2b00      	cmp	r3, #0
 800704a:	d1f0      	bne.n	800702e <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 800704c:	7bfb      	ldrb	r3, [r7, #15]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d137      	bne.n	80070c2 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8007052:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007056:	691b      	ldr	r3, [r3, #16]
 8007058:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	021b      	lsls	r3, r3, #8
 8007062:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007066:	4313      	orrs	r3, r2
 8007068:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800706a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800706e:	691b      	ldr	r3, [r3, #16]
 8007070:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	68db      	ldr	r3, [r3, #12]
 8007078:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800707c:	4313      	orrs	r3, r2
 800707e:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8007080:	f7ff fd6d 	bl	8006b5e <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007084:	f7fc f9dc 	bl	8003440 <HAL_GetTick>
 8007088:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800708a:	e009      	b.n	80070a0 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800708c:	f7fc f9d8 	bl	8003440 <HAL_GetTick>
 8007090:	4602      	mov	r2, r0
 8007092:	68bb      	ldr	r3, [r7, #8]
 8007094:	1ad3      	subs	r3, r2, r3
 8007096:	2b02      	cmp	r3, #2
 8007098:	d902      	bls.n	80070a0 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800709a:	2303      	movs	r3, #3
 800709c:	73fb      	strb	r3, [r7, #15]
        break;
 800709e:	e004      	b.n	80070aa <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80070a0:	f7ff fd7b 	bl	8006b9a <LL_RCC_PLLSAI1_IsReady>
 80070a4:	4603      	mov	r3, r0
 80070a6:	2b01      	cmp	r3, #1
 80070a8:	d1f0      	bne.n	800708c <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 80070aa:	7bfb      	ldrb	r3, [r7, #15]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d108      	bne.n	80070c2 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80070b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80070b4:	691a      	ldr	r2, [r3, #16]
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	691b      	ldr	r3, [r3, #16]
 80070ba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80070be:	4313      	orrs	r3, r2
 80070c0:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80070c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80070c4:	4618      	mov	r0, r3
 80070c6:	3710      	adds	r7, #16
 80070c8:	46bd      	mov	sp, r7
 80070ca:	bd80      	pop	{r7, pc}

080070cc <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b084      	sub	sp, #16
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d101      	bne.n	80070de <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 80070da:	2301      	movs	r3, #1
 80070dc:	e09f      	b.n	800721e <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80070e4:	b2db      	uxtb	r3, r3
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d106      	bne.n	80070f8 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	2200      	movs	r2, #0
 80070ee:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80070f2:	6878      	ldr	r0, [r7, #4]
 80070f4:	f7fb fe86 	bl	8002e04 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2202      	movs	r2, #2
 80070fc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8007100:	4b49      	ldr	r3, [pc, #292]	; (8007228 <HAL_RTC_Init+0x15c>)
 8007102:	68db      	ldr	r3, [r3, #12]
 8007104:	f003 0310 	and.w	r3, r3, #16
 8007108:	2b10      	cmp	r3, #16
 800710a:	d07e      	beq.n	800720a <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	22ca      	movs	r2, #202	; 0xca
 8007112:	625a      	str	r2, [r3, #36]	; 0x24
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	2253      	movs	r2, #83	; 0x53
 800711a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800711c:	6878      	ldr	r0, [r7, #4]
 800711e:	f000 f8ab 	bl	8007278 <RTC_EnterInitMode>
 8007122:	4603      	mov	r3, r0
 8007124:	2b00      	cmp	r3, #0
 8007126:	d00a      	beq.n	800713e <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	22ff      	movs	r2, #255	; 0xff
 800712e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2204      	movs	r2, #4
 8007134:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      status = HAL_ERROR;
 8007138:	2301      	movs	r3, #1
 800713a:	73fb      	strb	r3, [r7, #15]
 800713c:	e067      	b.n	800720e <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	689b      	ldr	r3, [r3, #8]
 8007144:	687a      	ldr	r2, [r7, #4]
 8007146:	6812      	ldr	r2, [r2, #0]
 8007148:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800714c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007150:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	6899      	ldr	r1, [r3, #8]
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	685a      	ldr	r2, [r3, #4]
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	691b      	ldr	r3, [r3, #16]
 8007160:	431a      	orrs	r2, r3
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	699b      	ldr	r3, [r3, #24]
 8007166:	431a      	orrs	r2, r3
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	430a      	orrs	r2, r1
 800716e:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	687a      	ldr	r2, [r7, #4]
 8007176:	68d2      	ldr	r2, [r2, #12]
 8007178:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	6919      	ldr	r1, [r3, #16]
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	689b      	ldr	r3, [r3, #8]
 8007184:	041a      	lsls	r2, r3, #16
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	430a      	orrs	r2, r1
 800718c:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	68da      	ldr	r2, [r3, #12]
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800719c:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	f022 0203 	bic.w	r2, r2, #3
 80071ac:	64da      	str	r2, [r3, #76]	; 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	69da      	ldr	r2, [r3, #28]
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	695b      	ldr	r3, [r3, #20]
 80071bc:	431a      	orrs	r2, r3
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	430a      	orrs	r2, r1
 80071c4:	64da      	str	r2, [r3, #76]	; 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	689b      	ldr	r3, [r3, #8]
 80071cc:	f003 0320 	and.w	r3, r3, #32
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d113      	bne.n	80071fc <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80071d4:	6878      	ldr	r0, [r7, #4]
 80071d6:	f000 f829 	bl	800722c <HAL_RTC_WaitForSynchro>
 80071da:	4603      	mov	r3, r0
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d00d      	beq.n	80071fc <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	22ff      	movs	r2, #255	; 0xff
 80071e6:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2204      	movs	r2, #4
 80071ec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2200      	movs	r2, #0
 80071f4:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 80071f8:	2301      	movs	r3, #1
 80071fa:	e010      	b.n	800721e <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	22ff      	movs	r2, #255	; 0xff
 8007202:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      status = HAL_OK;
 8007204:	2300      	movs	r3, #0
 8007206:	73fb      	strb	r3, [r7, #15]
 8007208:	e001      	b.n	800720e <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 800720a:	2300      	movs	r3, #0
 800720c:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800720e:	7bfb      	ldrb	r3, [r7, #15]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d103      	bne.n	800721c <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2201      	movs	r2, #1
 8007218:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  return status;
 800721c:	7bfb      	ldrb	r3, [r7, #15]
}
 800721e:	4618      	mov	r0, r3
 8007220:	3710      	adds	r7, #16
 8007222:	46bd      	mov	sp, r7
 8007224:	bd80      	pop	{r7, pc}
 8007226:	bf00      	nop
 8007228:	40002800 	.word	0x40002800

0800722c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800722c:	b580      	push	{r7, lr}
 800722e:	b084      	sub	sp, #16
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	68da      	ldr	r2, [r3, #12]
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007242:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8007244:	f7fc f8fc 	bl	8003440 <HAL_GetTick>
 8007248:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800724a:	e009      	b.n	8007260 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800724c:	f7fc f8f8 	bl	8003440 <HAL_GetTick>
 8007250:	4602      	mov	r2, r0
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	1ad3      	subs	r3, r2, r3
 8007256:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800725a:	d901      	bls.n	8007260 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800725c:	2303      	movs	r3, #3
 800725e:	e007      	b.n	8007270 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	68db      	ldr	r3, [r3, #12]
 8007266:	f003 0320 	and.w	r3, r3, #32
 800726a:	2b00      	cmp	r3, #0
 800726c:	d0ee      	beq.n	800724c <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800726e:	2300      	movs	r3, #0
}
 8007270:	4618      	mov	r0, r3
 8007272:	3710      	adds	r7, #16
 8007274:	46bd      	mov	sp, r7
 8007276:	bd80      	pop	{r7, pc}

08007278 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007278:	b580      	push	{r7, lr}
 800727a:	b084      	sub	sp, #16
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	68db      	ldr	r3, [r3, #12]
 8007286:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800728a:	2b00      	cmp	r3, #0
 800728c:	d119      	bne.n	80072c2 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007296:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8007298:	f7fc f8d2 	bl	8003440 <HAL_GetTick>
 800729c:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800729e:	e009      	b.n	80072b4 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80072a0:	f7fc f8ce 	bl	8003440 <HAL_GetTick>
 80072a4:	4602      	mov	r2, r0
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	1ad3      	subs	r3, r2, r3
 80072aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80072ae:	d901      	bls.n	80072b4 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 80072b0:	2303      	movs	r3, #3
 80072b2:	e007      	b.n	80072c4 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	68db      	ldr	r3, [r3, #12]
 80072ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d0ee      	beq.n	80072a0 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 80072c2:	2300      	movs	r3, #0
}
 80072c4:	4618      	mov	r0, r3
 80072c6:	3710      	adds	r7, #16
 80072c8:	46bd      	mov	sp, r7
 80072ca:	bd80      	pop	{r7, pc}

080072cc <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b086      	sub	sp, #24
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	60f8      	str	r0, [r7, #12]
 80072d4:	60b9      	str	r1, [r7, #8]
 80072d6:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80072de:	2b01      	cmp	r3, #1
 80072e0:	d101      	bne.n	80072e6 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 80072e2:	2302      	movs	r3, #2
 80072e4:	e0a8      	b.n	8007438 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	2201      	movs	r2, #1
 80072ea:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	2202      	movs	r2, #2
 80072f2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	22ca      	movs	r2, #202	; 0xca
 80072fc:	625a      	str	r2, [r3, #36]	; 0x24
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	2253      	movs	r2, #83	; 0x53
 8007304:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	689b      	ldr	r3, [r3, #8]
 800730c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007310:	2b00      	cmp	r3, #0
 8007312:	d020      	beq.n	8007356 <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 8007314:	f7fc f894 	bl	8003440 <HAL_GetTick>
 8007318:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 800731a:	e015      	b.n	8007348 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800731c:	f7fc f890 	bl	8003440 <HAL_GetTick>
 8007320:	4602      	mov	r2, r0
 8007322:	697b      	ldr	r3, [r7, #20]
 8007324:	1ad3      	subs	r3, r2, r3
 8007326:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800732a:	d90d      	bls.n	8007348 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	22ff      	movs	r2, #255	; 0xff
 8007332:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	2203      	movs	r2, #3
 8007338:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	2200      	movs	r2, #0
 8007340:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8007344:	2303      	movs	r3, #3
 8007346:	e077      	b.n	8007438 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	68db      	ldr	r3, [r3, #12]
 800734e:	f003 0304 	and.w	r3, r3, #4
 8007352:	2b00      	cmp	r3, #0
 8007354:	d1e2      	bne.n	800731c <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	689a      	ldr	r2, [r3, #8]
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007364:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	68db      	ldr	r3, [r3, #12]
 800736c:	b2da      	uxtb	r2, r3
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8007376:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8007378:	f7fc f862 	bl	8003440 <HAL_GetTick>
 800737c:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800737e:	e015      	b.n	80073ac <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007380:	f7fc f85e 	bl	8003440 <HAL_GetTick>
 8007384:	4602      	mov	r2, r0
 8007386:	697b      	ldr	r3, [r7, #20]
 8007388:	1ad3      	subs	r3, r2, r3
 800738a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800738e:	d90d      	bls.n	80073ac <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	22ff      	movs	r2, #255	; 0xff
 8007396:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	2203      	movs	r2, #3
 800739c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	2200      	movs	r2, #0
 80073a4:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 80073a8:	2303      	movs	r3, #3
 80073aa:	e045      	b.n	8007438 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	68db      	ldr	r3, [r3, #12]
 80073b2:	f003 0304 	and.w	r3, r3, #4
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d0e2      	beq.n	8007380 <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	68ba      	ldr	r2, [r7, #8]
 80073c0:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	689a      	ldr	r2, [r3, #8]
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	f022 0207 	bic.w	r2, r2, #7
 80073d0:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	6899      	ldr	r1, [r3, #8]
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	687a      	ldr	r2, [r7, #4]
 80073de:	430a      	orrs	r2, r1
 80073e0:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 80073e2:	4b17      	ldr	r3, [pc, #92]	; (8007440 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80073e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80073e8:	4a15      	ldr	r2, [pc, #84]	; (8007440 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80073ea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80073ee:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 80073f2:	4b13      	ldr	r3, [pc, #76]	; (8007440 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	4a12      	ldr	r2, [pc, #72]	; (8007440 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80073f8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80073fc:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	689a      	ldr	r2, [r3, #8]
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800740c:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	689a      	ldr	r2, [r3, #8]
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800741c:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	22ff      	movs	r2, #255	; 0xff
 8007424:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	2201      	movs	r2, #1
 800742a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	2200      	movs	r2, #0
 8007432:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8007436:	2300      	movs	r3, #0
}
 8007438:	4618      	mov	r0, r3
 800743a:	3718      	adds	r7, #24
 800743c:	46bd      	mov	sp, r7
 800743e:	bd80      	pop	{r7, pc}
 8007440:	58000800 	.word	0x58000800

08007444 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b084      	sub	sp, #16
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d101      	bne.n	8007456 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007452:	2301      	movs	r3, #1
 8007454:	e095      	b.n	8007582 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800745a:	2b00      	cmp	r3, #0
 800745c:	d108      	bne.n	8007470 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	685b      	ldr	r3, [r3, #4]
 8007462:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007466:	d009      	beq.n	800747c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2200      	movs	r2, #0
 800746c:	61da      	str	r2, [r3, #28]
 800746e:	e005      	b.n	800747c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2200      	movs	r2, #0
 8007474:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2200      	movs	r2, #0
 800747a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2200      	movs	r2, #0
 8007480:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007488:	b2db      	uxtb	r3, r3
 800748a:	2b00      	cmp	r3, #0
 800748c:	d106      	bne.n	800749c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	2200      	movs	r2, #0
 8007492:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007496:	6878      	ldr	r0, [r7, #4]
 8007498:	f7fb fce8 	bl	8002e6c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2202      	movs	r2, #2
 80074a0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	681a      	ldr	r2, [r3, #0]
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80074b2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	68db      	ldr	r3, [r3, #12]
 80074b8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80074bc:	d902      	bls.n	80074c4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80074be:	2300      	movs	r3, #0
 80074c0:	60fb      	str	r3, [r7, #12]
 80074c2:	e002      	b.n	80074ca <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80074c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80074c8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	68db      	ldr	r3, [r3, #12]
 80074ce:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80074d2:	d007      	beq.n	80074e4 <HAL_SPI_Init+0xa0>
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	68db      	ldr	r3, [r3, #12]
 80074d8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80074dc:	d002      	beq.n	80074e4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	2200      	movs	r2, #0
 80074e2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	685b      	ldr	r3, [r3, #4]
 80074e8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	689b      	ldr	r3, [r3, #8]
 80074f0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80074f4:	431a      	orrs	r2, r3
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	691b      	ldr	r3, [r3, #16]
 80074fa:	f003 0302 	and.w	r3, r3, #2
 80074fe:	431a      	orrs	r2, r3
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	695b      	ldr	r3, [r3, #20]
 8007504:	f003 0301 	and.w	r3, r3, #1
 8007508:	431a      	orrs	r2, r3
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	699b      	ldr	r3, [r3, #24]
 800750e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007512:	431a      	orrs	r2, r3
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	69db      	ldr	r3, [r3, #28]
 8007518:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800751c:	431a      	orrs	r2, r3
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	6a1b      	ldr	r3, [r3, #32]
 8007522:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007526:	ea42 0103 	orr.w	r1, r2, r3
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800752e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	430a      	orrs	r2, r1
 8007538:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	699b      	ldr	r3, [r3, #24]
 800753e:	0c1b      	lsrs	r3, r3, #16
 8007540:	f003 0204 	and.w	r2, r3, #4
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007548:	f003 0310 	and.w	r3, r3, #16
 800754c:	431a      	orrs	r2, r3
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007552:	f003 0308 	and.w	r3, r3, #8
 8007556:	431a      	orrs	r2, r3
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	68db      	ldr	r3, [r3, #12]
 800755c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8007560:	ea42 0103 	orr.w	r1, r2, r3
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	430a      	orrs	r2, r1
 8007570:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	2200      	movs	r2, #0
 8007576:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2201      	movs	r2, #1
 800757c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8007580:	2300      	movs	r3, #0
}
 8007582:	4618      	mov	r0, r3
 8007584:	3710      	adds	r7, #16
 8007586:	46bd      	mov	sp, r7
 8007588:	bd80      	pop	{r7, pc}
	...

0800758c <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800758c:	b580      	push	{r7, lr}
 800758e:	b086      	sub	sp, #24
 8007590:	af00      	add	r7, sp, #0
 8007592:	60f8      	str	r0, [r7, #12]
 8007594:	60b9      	str	r1, [r7, #8]
 8007596:	4613      	mov	r3, r2
 8007598:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800759a:	2300      	movs	r3, #0
 800759c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80075a4:	2b01      	cmp	r3, #1
 80075a6:	d101      	bne.n	80075ac <HAL_SPI_Transmit_DMA+0x20>
 80075a8:	2302      	movs	r3, #2
 80075aa:	e0d8      	b.n	800775e <HAL_SPI_Transmit_DMA+0x1d2>
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	2201      	movs	r2, #1
 80075b0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80075ba:	b2db      	uxtb	r3, r3
 80075bc:	2b01      	cmp	r3, #1
 80075be:	d002      	beq.n	80075c6 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 80075c0:	2302      	movs	r3, #2
 80075c2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80075c4:	e0c6      	b.n	8007754 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  if ((pData == NULL) || (Size == 0U))
 80075c6:	68bb      	ldr	r3, [r7, #8]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d002      	beq.n	80075d2 <HAL_SPI_Transmit_DMA+0x46>
 80075cc:	88fb      	ldrh	r3, [r7, #6]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d102      	bne.n	80075d8 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 80075d2:	2301      	movs	r3, #1
 80075d4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80075d6:	e0bd      	b.n	8007754 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	2203      	movs	r2, #3
 80075dc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	2200      	movs	r2, #0
 80075e4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	68ba      	ldr	r2, [r7, #8]
 80075ea:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	88fa      	ldrh	r2, [r7, #6]
 80075f0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	88fa      	ldrh	r2, [r7, #6]
 80075f6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	2200      	movs	r2, #0
 80075fc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	2200      	movs	r2, #0
 8007602:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	2200      	movs	r2, #0
 8007608:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	2200      	movs	r2, #0
 800760e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	2200      	movs	r2, #0
 8007616:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	689b      	ldr	r3, [r3, #8]
 800761e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007622:	d10f      	bne.n	8007644 <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	681a      	ldr	r2, [r3, #0]
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007632:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	681a      	ldr	r2, [r3, #0]
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007642:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007648:	4a47      	ldr	r2, [pc, #284]	; (8007768 <HAL_SPI_Transmit_DMA+0x1dc>)
 800764a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007650:	4a46      	ldr	r2, [pc, #280]	; (800776c <HAL_SPI_Transmit_DMA+0x1e0>)
 8007652:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007658:	4a45      	ldr	r2, [pc, #276]	; (8007770 <HAL_SPI_Transmit_DMA+0x1e4>)
 800765a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007660:	2200      	movs	r2, #0
 8007662:	639a      	str	r2, [r3, #56]	; 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	685a      	ldr	r2, [r3, #4]
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007672:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	68db      	ldr	r3, [r3, #12]
 8007678:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800767c:	d82d      	bhi.n	80076da <HAL_SPI_Transmit_DMA+0x14e>
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007682:	699b      	ldr	r3, [r3, #24]
 8007684:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007688:	d127      	bne.n	80076da <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800768e:	b29b      	uxth	r3, r3
 8007690:	f003 0301 	and.w	r3, r3, #1
 8007694:	2b00      	cmp	r3, #0
 8007696:	d10f      	bne.n	80076b8 <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	685a      	ldr	r2, [r3, #4]
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80076a6:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80076ac:	b29b      	uxth	r3, r3
 80076ae:	085b      	lsrs	r3, r3, #1
 80076b0:	b29a      	uxth	r2, r3
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80076b6:	e010      	b.n	80076da <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	685a      	ldr	r2, [r3, #4]
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80076c6:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80076cc:	b29b      	uxth	r3, r3
 80076ce:	085b      	lsrs	r3, r3, #1
 80076d0:	b29b      	uxth	r3, r3
 80076d2:	3301      	adds	r3, #1
 80076d4:	b29a      	uxth	r2, r3
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076e2:	4619      	mov	r1, r3
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	330c      	adds	r3, #12
 80076ea:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80076f0:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80076f2:	f7fc f90b 	bl	800390c <HAL_DMA_Start_IT>
 80076f6:	4603      	mov	r3, r0
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d00c      	beq.n	8007716 <HAL_SPI_Transmit_DMA+0x18a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007700:	f043 0210 	orr.w	r2, r3, #16
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8007708:	2301      	movs	r3, #1
 800770a:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	2201      	movs	r2, #1
 8007710:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8007714:	e01e      	b.n	8007754 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007720:	2b40      	cmp	r3, #64	; 0x40
 8007722:	d007      	beq.n	8007734 <HAL_SPI_Transmit_DMA+0x1a8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	681a      	ldr	r2, [r3, #0]
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007732:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	685a      	ldr	r2, [r3, #4]
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	f042 0220 	orr.w	r2, r2, #32
 8007742:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	685a      	ldr	r2, [r3, #4]
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	f042 0202 	orr.w	r2, r2, #2
 8007752:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	2200      	movs	r2, #0
 8007758:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800775c:	7dfb      	ldrb	r3, [r7, #23]
}
 800775e:	4618      	mov	r0, r3
 8007760:	3718      	adds	r7, #24
 8007762:	46bd      	mov	sp, r7
 8007764:	bd80      	pop	{r7, pc}
 8007766:	bf00      	nop
 8007768:	0800815b 	.word	0x0800815b
 800776c:	08007f7d 	.word	0x08007f7d
 8007770:	080081af 	.word	0x080081af

08007774 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8007774:	b580      	push	{r7, lr}
 8007776:	b086      	sub	sp, #24
 8007778:	af00      	add	r7, sp, #0
 800777a:	60f8      	str	r0, [r7, #12]
 800777c:	60b9      	str	r1, [r7, #8]
 800777e:	4613      	mov	r3, r2
 8007780:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007782:	2300      	movs	r3, #0
 8007784:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	689b      	ldr	r3, [r3, #8]
 800778a:	2b00      	cmp	r3, #0
 800778c:	d110      	bne.n	80077b0 <HAL_SPI_Receive_DMA+0x3c>
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	685b      	ldr	r3, [r3, #4]
 8007792:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007796:	d10b      	bne.n	80077b0 <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	2204      	movs	r2, #4
 800779c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 80077a0:	88fb      	ldrh	r3, [r7, #6]
 80077a2:	68ba      	ldr	r2, [r7, #8]
 80077a4:	68b9      	ldr	r1, [r7, #8]
 80077a6:	68f8      	ldr	r0, [r7, #12]
 80077a8:	f000 f908 	bl	80079bc <HAL_SPI_TransmitReceive_DMA>
 80077ac:	4603      	mov	r3, r0
 80077ae:	e0fb      	b.n	80079a8 <HAL_SPI_Receive_DMA+0x234>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80077b6:	2b01      	cmp	r3, #1
 80077b8:	d101      	bne.n	80077be <HAL_SPI_Receive_DMA+0x4a>
 80077ba:	2302      	movs	r3, #2
 80077bc:	e0f4      	b.n	80079a8 <HAL_SPI_Receive_DMA+0x234>
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	2201      	movs	r2, #1
 80077c2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80077cc:	b2db      	uxtb	r3, r3
 80077ce:	2b01      	cmp	r3, #1
 80077d0:	d002      	beq.n	80077d8 <HAL_SPI_Receive_DMA+0x64>
  {
    errorcode = HAL_BUSY;
 80077d2:	2302      	movs	r3, #2
 80077d4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80077d6:	e0e2      	b.n	800799e <HAL_SPI_Receive_DMA+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 80077d8:	68bb      	ldr	r3, [r7, #8]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d002      	beq.n	80077e4 <HAL_SPI_Receive_DMA+0x70>
 80077de:	88fb      	ldrh	r3, [r7, #6]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d102      	bne.n	80077ea <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 80077e4:	2301      	movs	r3, #1
 80077e6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80077e8:	e0d9      	b.n	800799e <HAL_SPI_Receive_DMA+0x22a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	2204      	movs	r2, #4
 80077ee:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	2200      	movs	r2, #0
 80077f6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	68ba      	ldr	r2, [r7, #8]
 80077fc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	88fa      	ldrh	r2, [r7, #6]
 8007802:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	88fa      	ldrh	r2, [r7, #6]
 800780a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	2200      	movs	r2, #0
 8007812:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	2200      	movs	r2, #0
 8007818:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->TxXferSize  = 0U;
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	2200      	movs	r2, #0
 800781e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	2200      	movs	r2, #0
 8007824:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	689b      	ldr	r3, [r3, #8]
 800782a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800782e:	d10f      	bne.n	8007850 <HAL_SPI_Receive_DMA+0xdc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	681a      	ldr	r2, [r3, #0]
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800783e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	681a      	ldr	r2, [r3, #0]
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800784e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */


  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	685a      	ldr	r2, [r3, #4]
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800785e:	605a      	str	r2, [r3, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	68db      	ldr	r3, [r3, #12]
 8007864:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007868:	d908      	bls.n	800787c <HAL_SPI_Receive_DMA+0x108>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	685a      	ldr	r2, [r3, #4]
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007878:	605a      	str	r2, [r3, #4]
 800787a:	e042      	b.n	8007902 <HAL_SPI_Receive_DMA+0x18e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	685a      	ldr	r2, [r3, #4]
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800788a:	605a      	str	r2, [r3, #4]

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007890:	699b      	ldr	r3, [r3, #24]
 8007892:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007896:	d134      	bne.n	8007902 <HAL_SPI_Receive_DMA+0x18e>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	685a      	ldr	r2, [r3, #4]
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80078a6:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80078ae:	b29b      	uxth	r3, r3
 80078b0:	f003 0301 	and.w	r3, r3, #1
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d111      	bne.n	80078dc <HAL_SPI_Receive_DMA+0x168>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	685a      	ldr	r2, [r3, #4]
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80078c6:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80078ce:	b29b      	uxth	r3, r3
 80078d0:	085b      	lsrs	r3, r3, #1
 80078d2:	b29a      	uxth	r2, r3
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80078da:	e012      	b.n	8007902 <HAL_SPI_Receive_DMA+0x18e>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	685a      	ldr	r2, [r3, #4]
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80078ea:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80078f2:	b29b      	uxth	r3, r3
 80078f4:	085b      	lsrs	r3, r3, #1
 80078f6:	b29b      	uxth	r3, r3
 80078f8:	3301      	adds	r3, #1
 80078fa:	b29a      	uxth	r2, r3
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007906:	4a2a      	ldr	r2, [pc, #168]	; (80079b0 <HAL_SPI_Receive_DMA+0x23c>)
 8007908:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800790e:	4a29      	ldr	r2, [pc, #164]	; (80079b4 <HAL_SPI_Receive_DMA+0x240>)
 8007910:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007916:	4a28      	ldr	r2, [pc, #160]	; (80079b8 <HAL_SPI_Receive_DMA+0x244>)
 8007918:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800791e:	2200      	movs	r2, #0
 8007920:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	330c      	adds	r3, #12
 800792c:	4619      	mov	r1, r3
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007932:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800793a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800793c:	f7fb ffe6 	bl	800390c <HAL_DMA_Start_IT>
 8007940:	4603      	mov	r3, r0
 8007942:	2b00      	cmp	r3, #0
 8007944:	d00c      	beq.n	8007960 <HAL_SPI_Receive_DMA+0x1ec>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800794a:	f043 0210 	orr.w	r2, r3, #16
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8007952:	2301      	movs	r3, #1
 8007954:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	2201      	movs	r2, #1
 800795a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 800795e:	e01e      	b.n	800799e <HAL_SPI_Receive_DMA+0x22a>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800796a:	2b40      	cmp	r3, #64	; 0x40
 800796c:	d007      	beq.n	800797e <HAL_SPI_Receive_DMA+0x20a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	681a      	ldr	r2, [r3, #0]
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800797c:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	685a      	ldr	r2, [r3, #4]
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	f042 0220 	orr.w	r2, r2, #32
 800798c:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	685a      	ldr	r2, [r3, #4]
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	f042 0201 	orr.w	r2, r2, #1
 800799c:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	2200      	movs	r2, #0
 80079a2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80079a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80079a8:	4618      	mov	r0, r3
 80079aa:	3718      	adds	r7, #24
 80079ac:	46bd      	mov	sp, r7
 80079ae:	bd80      	pop	{r7, pc}
 80079b0:	08008177 	.word	0x08008177
 80079b4:	08008023 	.word	0x08008023
 80079b8:	080081af 	.word	0x080081af

080079bc <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	b086      	sub	sp, #24
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	60f8      	str	r0, [r7, #12]
 80079c4:	60b9      	str	r1, [r7, #8]
 80079c6:	607a      	str	r2, [r7, #4]
 80079c8:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80079ca:	2300      	movs	r3, #0
 80079cc:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80079d4:	2b01      	cmp	r3, #1
 80079d6:	d101      	bne.n	80079dc <HAL_SPI_TransmitReceive_DMA+0x20>
 80079d8:	2302      	movs	r3, #2
 80079da:	e16c      	b.n	8007cb6 <HAL_SPI_TransmitReceive_DMA+0x2fa>
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	2201      	movs	r2, #1
 80079e0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80079ea:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	685b      	ldr	r3, [r3, #4]
 80079f0:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 80079f2:	7dbb      	ldrb	r3, [r7, #22]
 80079f4:	2b01      	cmp	r3, #1
 80079f6:	d00d      	beq.n	8007a14 <HAL_SPI_TransmitReceive_DMA+0x58>
 80079f8:	693b      	ldr	r3, [r7, #16]
 80079fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80079fe:	d106      	bne.n	8007a0e <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	689b      	ldr	r3, [r3, #8]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d102      	bne.n	8007a0e <HAL_SPI_TransmitReceive_DMA+0x52>
 8007a08:	7dbb      	ldrb	r3, [r7, #22]
 8007a0a:	2b04      	cmp	r3, #4
 8007a0c:	d002      	beq.n	8007a14 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 8007a0e:	2302      	movs	r3, #2
 8007a10:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007a12:	e14b      	b.n	8007cac <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007a14:	68bb      	ldr	r3, [r7, #8]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d005      	beq.n	8007a26 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d002      	beq.n	8007a26 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8007a20:	887b      	ldrh	r3, [r7, #2]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d102      	bne.n	8007a2c <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 8007a26:	2301      	movs	r3, #1
 8007a28:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007a2a:	e13f      	b.n	8007cac <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007a32:	b2db      	uxtb	r3, r3
 8007a34:	2b04      	cmp	r3, #4
 8007a36:	d003      	beq.n	8007a40 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	2205      	movs	r2, #5
 8007a3c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	2200      	movs	r2, #0
 8007a44:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	68ba      	ldr	r2, [r7, #8]
 8007a4a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	887a      	ldrh	r2, [r7, #2]
 8007a50:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	887a      	ldrh	r2, [r7, #2]
 8007a56:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	687a      	ldr	r2, [r7, #4]
 8007a5c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	887a      	ldrh	r2, [r7, #2]
 8007a62:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	887a      	ldrh	r2, [r7, #2]
 8007a6a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	2200      	movs	r2, #0
 8007a72:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	2200      	movs	r2, #0
 8007a78:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	685a      	ldr	r2, [r3, #4]
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 8007a88:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	68db      	ldr	r3, [r3, #12]
 8007a8e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007a92:	d908      	bls.n	8007aa6 <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	685a      	ldr	r2, [r3, #4]
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007aa2:	605a      	str	r2, [r3, #4]
 8007aa4:	e06f      	b.n	8007b86 <HAL_SPI_TransmitReceive_DMA+0x1ca>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	685a      	ldr	r2, [r3, #4]
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007ab4:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007aba:	699b      	ldr	r3, [r3, #24]
 8007abc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ac0:	d126      	bne.n	8007b10 <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8007ac6:	f003 0301 	and.w	r3, r3, #1
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d10f      	bne.n	8007aee <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	685a      	ldr	r2, [r3, #4]
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007adc:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ae2:	b29b      	uxth	r3, r3
 8007ae4:	085b      	lsrs	r3, r3, #1
 8007ae6:	b29a      	uxth	r2, r3
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007aec:	e010      	b.n	8007b10 <HAL_SPI_TransmitReceive_DMA+0x154>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	685a      	ldr	r2, [r3, #4]
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007afc:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b02:	b29b      	uxth	r3, r3
 8007b04:	085b      	lsrs	r3, r3, #1
 8007b06:	b29b      	uxth	r3, r3
 8007b08:	3301      	adds	r3, #1
 8007b0a:	b29a      	uxth	r2, r3
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b14:	699b      	ldr	r3, [r3, #24]
 8007b16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b1a:	d134      	bne.n	8007b86 <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	685a      	ldr	r2, [r3, #4]
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007b2a:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007b32:	b29b      	uxth	r3, r3
 8007b34:	f003 0301 	and.w	r3, r3, #1
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d111      	bne.n	8007b60 <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	685a      	ldr	r2, [r3, #4]
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007b4a:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007b52:	b29b      	uxth	r3, r3
 8007b54:	085b      	lsrs	r3, r3, #1
 8007b56:	b29a      	uxth	r2, r3
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8007b5e:	e012      	b.n	8007b86 <HAL_SPI_TransmitReceive_DMA+0x1ca>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	685a      	ldr	r2, [r3, #4]
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007b6e:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007b76:	b29b      	uxth	r3, r3
 8007b78:	085b      	lsrs	r3, r3, #1
 8007b7a:	b29b      	uxth	r3, r3
 8007b7c:	3301      	adds	r3, #1
 8007b7e:	b29a      	uxth	r2, r3
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007b8c:	b2db      	uxtb	r3, r3
 8007b8e:	2b04      	cmp	r3, #4
 8007b90:	d108      	bne.n	8007ba4 <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b96:	4a4a      	ldr	r2, [pc, #296]	; (8007cc0 <HAL_SPI_TransmitReceive_DMA+0x304>)
 8007b98:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b9e:	4a49      	ldr	r2, [pc, #292]	; (8007cc4 <HAL_SPI_TransmitReceive_DMA+0x308>)
 8007ba0:	62da      	str	r2, [r3, #44]	; 0x2c
 8007ba2:	e007      	b.n	8007bb4 <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ba8:	4a47      	ldr	r2, [pc, #284]	; (8007cc8 <HAL_SPI_TransmitReceive_DMA+0x30c>)
 8007baa:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bb0:	4a46      	ldr	r2, [pc, #280]	; (8007ccc <HAL_SPI_TransmitReceive_DMA+0x310>)
 8007bb2:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bb8:	4a45      	ldr	r2, [pc, #276]	; (8007cd0 <HAL_SPI_TransmitReceive_DMA+0x314>)
 8007bba:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	330c      	adds	r3, #12
 8007bce:	4619      	mov	r1, r3
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bd4:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007bdc:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8007bde:	f7fb fe95 	bl	800390c <HAL_DMA_Start_IT>
 8007be2:	4603      	mov	r3, r0
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d00c      	beq.n	8007c02 <HAL_SPI_TransmitReceive_DMA+0x246>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007bec:	f043 0210 	orr.w	r2, r3, #16
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8007bf4:	2301      	movs	r3, #1
 8007bf6:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	2201      	movs	r2, #1
 8007bfc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8007c00:	e054      	b.n	8007cac <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	685a      	ldr	r2, [r3, #4]
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	f042 0201 	orr.w	r2, r2, #1
 8007c10:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c16:	2200      	movs	r2, #0
 8007c18:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c1e:	2200      	movs	r2, #0
 8007c20:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c26:	2200      	movs	r2, #0
 8007c28:	635a      	str	r2, [r3, #52]	; 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c2e:	2200      	movs	r2, #0
 8007c30:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c3a:	4619      	mov	r1, r3
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	330c      	adds	r3, #12
 8007c42:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c48:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8007c4a:	f7fb fe5f 	bl	800390c <HAL_DMA_Start_IT>
 8007c4e:	4603      	mov	r3, r0
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d00c      	beq.n	8007c6e <HAL_SPI_TransmitReceive_DMA+0x2b2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c58:	f043 0210 	orr.w	r2, r3, #16
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8007c60:	2301      	movs	r3, #1
 8007c62:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	2201      	movs	r2, #1
 8007c68:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8007c6c:	e01e      	b.n	8007cac <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c78:	2b40      	cmp	r3, #64	; 0x40
 8007c7a:	d007      	beq.n	8007c8c <HAL_SPI_TransmitReceive_DMA+0x2d0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	681a      	ldr	r2, [r3, #0]
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007c8a:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	685a      	ldr	r2, [r3, #4]
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	f042 0220 	orr.w	r2, r2, #32
 8007c9a:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	685a      	ldr	r2, [r3, #4]
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	f042 0202 	orr.w	r2, r2, #2
 8007caa:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	2200      	movs	r2, #0
 8007cb0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007cb4:	7dfb      	ldrb	r3, [r7, #23]
}
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	3718      	adds	r7, #24
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	bd80      	pop	{r7, pc}
 8007cbe:	bf00      	nop
 8007cc0:	08008177 	.word	0x08008177
 8007cc4:	08008023 	.word	0x08008023
 8007cc8:	08008193 	.word	0x08008193
 8007ccc:	080080cb 	.word	0x080080cb
 8007cd0:	080081af 	.word	0x080081af

08007cd4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8007cd4:	b580      	push	{r7, lr}
 8007cd6:	b088      	sub	sp, #32
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	685b      	ldr	r3, [r3, #4]
 8007ce2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	689b      	ldr	r3, [r3, #8]
 8007cea:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007cec:	69bb      	ldr	r3, [r7, #24]
 8007cee:	099b      	lsrs	r3, r3, #6
 8007cf0:	f003 0301 	and.w	r3, r3, #1
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d10f      	bne.n	8007d18 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007cf8:	69bb      	ldr	r3, [r7, #24]
 8007cfa:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d00a      	beq.n	8007d18 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007d02:	69fb      	ldr	r3, [r7, #28]
 8007d04:	099b      	lsrs	r3, r3, #6
 8007d06:	f003 0301 	and.w	r3, r3, #1
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d004      	beq.n	8007d18 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d12:	6878      	ldr	r0, [r7, #4]
 8007d14:	4798      	blx	r3
    return;
 8007d16:	e0d7      	b.n	8007ec8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8007d18:	69bb      	ldr	r3, [r7, #24]
 8007d1a:	085b      	lsrs	r3, r3, #1
 8007d1c:	f003 0301 	and.w	r3, r3, #1
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d00a      	beq.n	8007d3a <HAL_SPI_IRQHandler+0x66>
 8007d24:	69fb      	ldr	r3, [r7, #28]
 8007d26:	09db      	lsrs	r3, r3, #7
 8007d28:	f003 0301 	and.w	r3, r3, #1
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d004      	beq.n	8007d3a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d34:	6878      	ldr	r0, [r7, #4]
 8007d36:	4798      	blx	r3
    return;
 8007d38:	e0c6      	b.n	8007ec8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007d3a:	69bb      	ldr	r3, [r7, #24]
 8007d3c:	095b      	lsrs	r3, r3, #5
 8007d3e:	f003 0301 	and.w	r3, r3, #1
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d10c      	bne.n	8007d60 <HAL_SPI_IRQHandler+0x8c>
 8007d46:	69bb      	ldr	r3, [r7, #24]
 8007d48:	099b      	lsrs	r3, r3, #6
 8007d4a:	f003 0301 	and.w	r3, r3, #1
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d106      	bne.n	8007d60 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8007d52:	69bb      	ldr	r3, [r7, #24]
 8007d54:	0a1b      	lsrs	r3, r3, #8
 8007d56:	f003 0301 	and.w	r3, r3, #1
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	f000 80b4 	beq.w	8007ec8 <HAL_SPI_IRQHandler+0x1f4>
 8007d60:	69fb      	ldr	r3, [r7, #28]
 8007d62:	095b      	lsrs	r3, r3, #5
 8007d64:	f003 0301 	and.w	r3, r3, #1
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	f000 80ad 	beq.w	8007ec8 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007d6e:	69bb      	ldr	r3, [r7, #24]
 8007d70:	099b      	lsrs	r3, r3, #6
 8007d72:	f003 0301 	and.w	r3, r3, #1
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d023      	beq.n	8007dc2 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007d80:	b2db      	uxtb	r3, r3
 8007d82:	2b03      	cmp	r3, #3
 8007d84:	d011      	beq.n	8007daa <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d8a:	f043 0204 	orr.w	r2, r3, #4
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007d92:	2300      	movs	r3, #0
 8007d94:	617b      	str	r3, [r7, #20]
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	68db      	ldr	r3, [r3, #12]
 8007d9c:	617b      	str	r3, [r7, #20]
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	689b      	ldr	r3, [r3, #8]
 8007da4:	617b      	str	r3, [r7, #20]
 8007da6:	697b      	ldr	r3, [r7, #20]
 8007da8:	e00b      	b.n	8007dc2 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007daa:	2300      	movs	r3, #0
 8007dac:	613b      	str	r3, [r7, #16]
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	68db      	ldr	r3, [r3, #12]
 8007db4:	613b      	str	r3, [r7, #16]
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	689b      	ldr	r3, [r3, #8]
 8007dbc:	613b      	str	r3, [r7, #16]
 8007dbe:	693b      	ldr	r3, [r7, #16]
        return;
 8007dc0:	e082      	b.n	8007ec8 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8007dc2:	69bb      	ldr	r3, [r7, #24]
 8007dc4:	095b      	lsrs	r3, r3, #5
 8007dc6:	f003 0301 	and.w	r3, r3, #1
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d014      	beq.n	8007df8 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007dd2:	f043 0201 	orr.w	r2, r3, #1
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007dda:	2300      	movs	r3, #0
 8007ddc:	60fb      	str	r3, [r7, #12]
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	689b      	ldr	r3, [r3, #8]
 8007de4:	60fb      	str	r3, [r7, #12]
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	681a      	ldr	r2, [r3, #0]
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007df4:	601a      	str	r2, [r3, #0]
 8007df6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8007df8:	69bb      	ldr	r3, [r7, #24]
 8007dfa:	0a1b      	lsrs	r3, r3, #8
 8007dfc:	f003 0301 	and.w	r3, r3, #1
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d00c      	beq.n	8007e1e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e08:	f043 0208 	orr.w	r2, r3, #8
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007e10:	2300      	movs	r3, #0
 8007e12:	60bb      	str	r3, [r7, #8]
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	689b      	ldr	r3, [r3, #8]
 8007e1a:	60bb      	str	r3, [r7, #8]
 8007e1c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d04f      	beq.n	8007ec6 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	685a      	ldr	r2, [r3, #4]
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007e34:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	2201      	movs	r2, #1
 8007e3a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8007e3e:	69fb      	ldr	r3, [r7, #28]
 8007e40:	f003 0302 	and.w	r3, r3, #2
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d104      	bne.n	8007e52 <HAL_SPI_IRQHandler+0x17e>
 8007e48:	69fb      	ldr	r3, [r7, #28]
 8007e4a:	f003 0301 	and.w	r3, r3, #1
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d034      	beq.n	8007ebc <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	685a      	ldr	r2, [r3, #4]
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	f022 0203 	bic.w	r2, r2, #3
 8007e60:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d011      	beq.n	8007e8e <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e6e:	4a18      	ldr	r2, [pc, #96]	; (8007ed0 <HAL_SPI_IRQHandler+0x1fc>)
 8007e70:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e76:	4618      	mov	r0, r3
 8007e78:	f7fb fdc3 	bl	8003a02 <HAL_DMA_Abort_IT>
 8007e7c:	4603      	mov	r3, r0
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d005      	beq.n	8007e8e <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e86:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d016      	beq.n	8007ec4 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e9a:	4a0d      	ldr	r2, [pc, #52]	; (8007ed0 <HAL_SPI_IRQHandler+0x1fc>)
 8007e9c:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	f7fb fdad 	bl	8003a02 <HAL_DMA_Abort_IT>
 8007ea8:	4603      	mov	r3, r0
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d00a      	beq.n	8007ec4 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007eb2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8007eba:	e003      	b.n	8007ec4 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8007ebc:	6878      	ldr	r0, [r7, #4]
 8007ebe:	f000 f845 	bl	8007f4c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8007ec2:	e000      	b.n	8007ec6 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8007ec4:	bf00      	nop
    return;
 8007ec6:	bf00      	nop
  }
}
 8007ec8:	3720      	adds	r7, #32
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	bd80      	pop	{r7, pc}
 8007ece:	bf00      	nop
 8007ed0:	080081ef 	.word	0x080081ef

08007ed4 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007ed4:	b480      	push	{r7}
 8007ed6:	b083      	sub	sp, #12
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8007edc:	bf00      	nop
 8007ede:	370c      	adds	r7, #12
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee6:	4770      	bx	lr

08007ee8 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007ee8:	b480      	push	{r7}
 8007eea:	b083      	sub	sp, #12
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8007ef0:	bf00      	nop
 8007ef2:	370c      	adds	r7, #12
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efa:	4770      	bx	lr

08007efc <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007efc:	b480      	push	{r7}
 8007efe:	b083      	sub	sp, #12
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8007f04:	bf00      	nop
 8007f06:	370c      	adds	r7, #12
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0e:	4770      	bx	lr

08007f10 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007f10:	b480      	push	{r7}
 8007f12:	b083      	sub	sp, #12
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8007f18:	bf00      	nop
 8007f1a:	370c      	adds	r7, #12
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f22:	4770      	bx	lr

08007f24 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007f24:	b480      	push	{r7}
 8007f26:	b083      	sub	sp, #12
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8007f2c:	bf00      	nop
 8007f2e:	370c      	adds	r7, #12
 8007f30:	46bd      	mov	sp, r7
 8007f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f36:	4770      	bx	lr

08007f38 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007f38:	b480      	push	{r7}
 8007f3a:	b083      	sub	sp, #12
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8007f40:	bf00      	nop
 8007f42:	370c      	adds	r7, #12
 8007f44:	46bd      	mov	sp, r7
 8007f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4a:	4770      	bx	lr

08007f4c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007f4c:	b480      	push	{r7}
 8007f4e:	b083      	sub	sp, #12
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007f54:	bf00      	nop
 8007f56:	370c      	adds	r7, #12
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5e:	4770      	bx	lr

08007f60 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8007f60:	b480      	push	{r7}
 8007f62:	b083      	sub	sp, #12
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007f6e:	b2db      	uxtb	r3, r3
}
 8007f70:	4618      	mov	r0, r3
 8007f72:	370c      	adds	r7, #12
 8007f74:	46bd      	mov	sp, r7
 8007f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7a:	4770      	bx	lr

08007f7c <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b086      	sub	sp, #24
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f88:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007f8a:	f7fb fa59 	bl	8003440 <HAL_GetTick>
 8007f8e:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	f003 0320 	and.w	r3, r3, #32
 8007f9a:	2b20      	cmp	r3, #32
 8007f9c:	d03b      	beq.n	8008016 <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8007f9e:	697b      	ldr	r3, [r7, #20]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	685a      	ldr	r2, [r3, #4]
 8007fa4:	697b      	ldr	r3, [r7, #20]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	f022 0220 	bic.w	r2, r2, #32
 8007fac:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8007fae:	697b      	ldr	r3, [r7, #20]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	685a      	ldr	r2, [r3, #4]
 8007fb4:	697b      	ldr	r3, [r7, #20]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	f022 0202 	bic.w	r2, r2, #2
 8007fbc:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8007fbe:	693a      	ldr	r2, [r7, #16]
 8007fc0:	2164      	movs	r1, #100	; 0x64
 8007fc2:	6978      	ldr	r0, [r7, #20]
 8007fc4:	f000 fa9e 	bl	8008504 <SPI_EndRxTxTransaction>
 8007fc8:	4603      	mov	r3, r0
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d005      	beq.n	8007fda <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007fce:	697b      	ldr	r3, [r7, #20]
 8007fd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007fd2:	f043 0220 	orr.w	r2, r3, #32
 8007fd6:	697b      	ldr	r3, [r7, #20]
 8007fd8:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007fda:	697b      	ldr	r3, [r7, #20]
 8007fdc:	689b      	ldr	r3, [r3, #8]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d10a      	bne.n	8007ff8 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	60fb      	str	r3, [r7, #12]
 8007fe6:	697b      	ldr	r3, [r7, #20]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	68db      	ldr	r3, [r3, #12]
 8007fec:	60fb      	str	r3, [r7, #12]
 8007fee:	697b      	ldr	r3, [r7, #20]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	689b      	ldr	r3, [r3, #8]
 8007ff4:	60fb      	str	r3, [r7, #12]
 8007ff6:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8007ff8:	697b      	ldr	r3, [r7, #20]
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8007ffe:	697b      	ldr	r3, [r7, #20]
 8008000:	2201      	movs	r2, #1
 8008002:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008006:	697b      	ldr	r3, [r7, #20]
 8008008:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800800a:	2b00      	cmp	r3, #0
 800800c:	d003      	beq.n	8008016 <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800800e:	6978      	ldr	r0, [r7, #20]
 8008010:	f7ff ff9c 	bl	8007f4c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8008014:	e002      	b.n	800801c <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8008016:	6978      	ldr	r0, [r7, #20]
 8008018:	f7ff ff5c 	bl	8007ed4 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800801c:	3718      	adds	r7, #24
 800801e:	46bd      	mov	sp, r7
 8008020:	bd80      	pop	{r7, pc}

08008022 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008022:	b580      	push	{r7, lr}
 8008024:	b084      	sub	sp, #16
 8008026:	af00      	add	r7, sp, #0
 8008028:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800802e:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008030:	f7fb fa06 	bl	8003440 <HAL_GetTick>
 8008034:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	f003 0320 	and.w	r3, r3, #32
 8008040:	2b20      	cmp	r3, #32
 8008042:	d03c      	beq.n	80080be <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	685a      	ldr	r2, [r3, #4]
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	f022 0220 	bic.w	r2, r2, #32
 8008052:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	689b      	ldr	r3, [r3, #8]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d10d      	bne.n	8008078 <SPI_DMAReceiveCplt+0x56>
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	685b      	ldr	r3, [r3, #4]
 8008060:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008064:	d108      	bne.n	8008078 <SPI_DMAReceiveCplt+0x56>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	685a      	ldr	r2, [r3, #4]
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	f022 0203 	bic.w	r2, r2, #3
 8008074:	605a      	str	r2, [r3, #4]
 8008076:	e007      	b.n	8008088 <SPI_DMAReceiveCplt+0x66>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	685a      	ldr	r2, [r3, #4]
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	f022 0201 	bic.w	r2, r2, #1
 8008086:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8008088:	68ba      	ldr	r2, [r7, #8]
 800808a:	2164      	movs	r1, #100	; 0x64
 800808c:	68f8      	ldr	r0, [r7, #12]
 800808e:	f000 f9e1 	bl	8008454 <SPI_EndRxTransaction>
 8008092:	4603      	mov	r3, r0
 8008094:	2b00      	cmp	r3, #0
 8008096:	d002      	beq.n	800809e <SPI_DMAReceiveCplt+0x7c>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	2220      	movs	r2, #32
 800809c:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	2200      	movs	r2, #0
 80080a2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	2201      	movs	r2, #1
 80080aa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d003      	beq.n	80080be <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80080b6:	68f8      	ldr	r0, [r7, #12]
 80080b8:	f7ff ff48 	bl	8007f4c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80080bc:	e002      	b.n	80080c4 <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 80080be:	68f8      	ldr	r0, [r7, #12]
 80080c0:	f7ff ff12 	bl	8007ee8 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80080c4:	3710      	adds	r7, #16
 80080c6:	46bd      	mov	sp, r7
 80080c8:	bd80      	pop	{r7, pc}

080080ca <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80080ca:	b580      	push	{r7, lr}
 80080cc:	b084      	sub	sp, #16
 80080ce:	af00      	add	r7, sp, #0
 80080d0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080d6:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80080d8:	f7fb f9b2 	bl	8003440 <HAL_GetTick>
 80080dc:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	f003 0320 	and.w	r3, r3, #32
 80080e8:	2b20      	cmp	r3, #32
 80080ea:	d030      	beq.n	800814e <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	685a      	ldr	r2, [r3, #4]
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	f022 0220 	bic.w	r2, r2, #32
 80080fa:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80080fc:	68ba      	ldr	r2, [r7, #8]
 80080fe:	2164      	movs	r1, #100	; 0x64
 8008100:	68f8      	ldr	r0, [r7, #12]
 8008102:	f000 f9ff 	bl	8008504 <SPI_EndRxTxTransaction>
 8008106:	4603      	mov	r3, r0
 8008108:	2b00      	cmp	r3, #0
 800810a:	d005      	beq.n	8008118 <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008110:	f043 0220 	orr.w	r2, r3, #32
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	685a      	ldr	r2, [r3, #4]
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	f022 0203 	bic.w	r2, r2, #3
 8008126:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	2200      	movs	r2, #0
 800812c:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	2200      	movs	r2, #0
 8008132:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	2201      	movs	r2, #1
 800813a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008142:	2b00      	cmp	r3, #0
 8008144:	d003      	beq.n	800814e <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8008146:	68f8      	ldr	r0, [r7, #12]
 8008148:	f7ff ff00 	bl	8007f4c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800814c:	e002      	b.n	8008154 <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 800814e:	68f8      	ldr	r0, [r7, #12]
 8008150:	f7ff fed4 	bl	8007efc <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008154:	3710      	adds	r7, #16
 8008156:	46bd      	mov	sp, r7
 8008158:	bd80      	pop	{r7, pc}

0800815a <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800815a:	b580      	push	{r7, lr}
 800815c:	b084      	sub	sp, #16
 800815e:	af00      	add	r7, sp, #0
 8008160:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008166:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8008168:	68f8      	ldr	r0, [r7, #12]
 800816a:	f7ff fed1 	bl	8007f10 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800816e:	bf00      	nop
 8008170:	3710      	adds	r7, #16
 8008172:	46bd      	mov	sp, r7
 8008174:	bd80      	pop	{r7, pc}

08008176 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008176:	b580      	push	{r7, lr}
 8008178:	b084      	sub	sp, #16
 800817a:	af00      	add	r7, sp, #0
 800817c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008182:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8008184:	68f8      	ldr	r0, [r7, #12]
 8008186:	f7ff fecd 	bl	8007f24 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800818a:	bf00      	nop
 800818c:	3710      	adds	r7, #16
 800818e:	46bd      	mov	sp, r7
 8008190:	bd80      	pop	{r7, pc}

08008192 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008192:	b580      	push	{r7, lr}
 8008194:	b084      	sub	sp, #16
 8008196:	af00      	add	r7, sp, #0
 8008198:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800819e:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 80081a0:	68f8      	ldr	r0, [r7, #12]
 80081a2:	f7ff fec9 	bl	8007f38 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80081a6:	bf00      	nop
 80081a8:	3710      	adds	r7, #16
 80081aa:	46bd      	mov	sp, r7
 80081ac:	bd80      	pop	{r7, pc}

080081ae <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80081ae:	b580      	push	{r7, lr}
 80081b0:	b084      	sub	sp, #16
 80081b2:	af00      	add	r7, sp, #0
 80081b4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081ba:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	685a      	ldr	r2, [r3, #4]
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	f022 0203 	bic.w	r2, r2, #3
 80081ca:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80081d0:	f043 0210 	orr.w	r2, r3, #16
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	2201      	movs	r2, #1
 80081dc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80081e0:	68f8      	ldr	r0, [r7, #12]
 80081e2:	f7ff feb3 	bl	8007f4c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80081e6:	bf00      	nop
 80081e8:	3710      	adds	r7, #16
 80081ea:	46bd      	mov	sp, r7
 80081ec:	bd80      	pop	{r7, pc}

080081ee <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80081ee:	b580      	push	{r7, lr}
 80081f0:	b084      	sub	sp, #16
 80081f2:	af00      	add	r7, sp, #0
 80081f4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081fa:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	2200      	movs	r2, #0
 8008200:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	2200      	movs	r2, #0
 8008208:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800820a:	68f8      	ldr	r0, [r7, #12]
 800820c:	f7ff fe9e 	bl	8007f4c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008210:	bf00      	nop
 8008212:	3710      	adds	r7, #16
 8008214:	46bd      	mov	sp, r7
 8008216:	bd80      	pop	{r7, pc}

08008218 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008218:	b580      	push	{r7, lr}
 800821a:	b088      	sub	sp, #32
 800821c:	af00      	add	r7, sp, #0
 800821e:	60f8      	str	r0, [r7, #12]
 8008220:	60b9      	str	r1, [r7, #8]
 8008222:	603b      	str	r3, [r7, #0]
 8008224:	4613      	mov	r3, r2
 8008226:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008228:	f7fb f90a 	bl	8003440 <HAL_GetTick>
 800822c:	4602      	mov	r2, r0
 800822e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008230:	1a9b      	subs	r3, r3, r2
 8008232:	683a      	ldr	r2, [r7, #0]
 8008234:	4413      	add	r3, r2
 8008236:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008238:	f7fb f902 	bl	8003440 <HAL_GetTick>
 800823c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800823e:	4b39      	ldr	r3, [pc, #228]	; (8008324 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	015b      	lsls	r3, r3, #5
 8008244:	0d1b      	lsrs	r3, r3, #20
 8008246:	69fa      	ldr	r2, [r7, #28]
 8008248:	fb02 f303 	mul.w	r3, r2, r3
 800824c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800824e:	e054      	b.n	80082fa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008250:	683b      	ldr	r3, [r7, #0]
 8008252:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008256:	d050      	beq.n	80082fa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008258:	f7fb f8f2 	bl	8003440 <HAL_GetTick>
 800825c:	4602      	mov	r2, r0
 800825e:	69bb      	ldr	r3, [r7, #24]
 8008260:	1ad3      	subs	r3, r2, r3
 8008262:	69fa      	ldr	r2, [r7, #28]
 8008264:	429a      	cmp	r2, r3
 8008266:	d902      	bls.n	800826e <SPI_WaitFlagStateUntilTimeout+0x56>
 8008268:	69fb      	ldr	r3, [r7, #28]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d13d      	bne.n	80082ea <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	685a      	ldr	r2, [r3, #4]
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800827c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	685b      	ldr	r3, [r3, #4]
 8008282:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008286:	d111      	bne.n	80082ac <SPI_WaitFlagStateUntilTimeout+0x94>
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	689b      	ldr	r3, [r3, #8]
 800828c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008290:	d004      	beq.n	800829c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	689b      	ldr	r3, [r3, #8]
 8008296:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800829a:	d107      	bne.n	80082ac <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	681a      	ldr	r2, [r3, #0]
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80082aa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80082b4:	d10f      	bne.n	80082d6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	681a      	ldr	r2, [r3, #0]
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80082c4:	601a      	str	r2, [r3, #0]
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	681a      	ldr	r2, [r3, #0]
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80082d4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	2201      	movs	r2, #1
 80082da:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	2200      	movs	r2, #0
 80082e2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80082e6:	2303      	movs	r3, #3
 80082e8:	e017      	b.n	800831a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80082ea:	697b      	ldr	r3, [r7, #20]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d101      	bne.n	80082f4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80082f0:	2300      	movs	r3, #0
 80082f2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80082f4:	697b      	ldr	r3, [r7, #20]
 80082f6:	3b01      	subs	r3, #1
 80082f8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	689a      	ldr	r2, [r3, #8]
 8008300:	68bb      	ldr	r3, [r7, #8]
 8008302:	4013      	ands	r3, r2
 8008304:	68ba      	ldr	r2, [r7, #8]
 8008306:	429a      	cmp	r2, r3
 8008308:	bf0c      	ite	eq
 800830a:	2301      	moveq	r3, #1
 800830c:	2300      	movne	r3, #0
 800830e:	b2db      	uxtb	r3, r3
 8008310:	461a      	mov	r2, r3
 8008312:	79fb      	ldrb	r3, [r7, #7]
 8008314:	429a      	cmp	r2, r3
 8008316:	d19b      	bne.n	8008250 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008318:	2300      	movs	r3, #0
}
 800831a:	4618      	mov	r0, r3
 800831c:	3720      	adds	r7, #32
 800831e:	46bd      	mov	sp, r7
 8008320:	bd80      	pop	{r7, pc}
 8008322:	bf00      	nop
 8008324:	20000008 	.word	0x20000008

08008328 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008328:	b580      	push	{r7, lr}
 800832a:	b08a      	sub	sp, #40	; 0x28
 800832c:	af00      	add	r7, sp, #0
 800832e:	60f8      	str	r0, [r7, #12]
 8008330:	60b9      	str	r1, [r7, #8]
 8008332:	607a      	str	r2, [r7, #4]
 8008334:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8008336:	2300      	movs	r3, #0
 8008338:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800833a:	f7fb f881 	bl	8003440 <HAL_GetTick>
 800833e:	4602      	mov	r2, r0
 8008340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008342:	1a9b      	subs	r3, r3, r2
 8008344:	683a      	ldr	r2, [r7, #0]
 8008346:	4413      	add	r3, r2
 8008348:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800834a:	f7fb f879 	bl	8003440 <HAL_GetTick>
 800834e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	330c      	adds	r3, #12
 8008356:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8008358:	4b3d      	ldr	r3, [pc, #244]	; (8008450 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800835a:	681a      	ldr	r2, [r3, #0]
 800835c:	4613      	mov	r3, r2
 800835e:	009b      	lsls	r3, r3, #2
 8008360:	4413      	add	r3, r2
 8008362:	00da      	lsls	r2, r3, #3
 8008364:	1ad3      	subs	r3, r2, r3
 8008366:	0d1b      	lsrs	r3, r3, #20
 8008368:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800836a:	fb02 f303 	mul.w	r3, r2, r3
 800836e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8008370:	e060      	b.n	8008434 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8008372:	68bb      	ldr	r3, [r7, #8]
 8008374:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8008378:	d107      	bne.n	800838a <SPI_WaitFifoStateUntilTimeout+0x62>
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	2b00      	cmp	r3, #0
 800837e:	d104      	bne.n	800838a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8008380:	69fb      	ldr	r3, [r7, #28]
 8008382:	781b      	ldrb	r3, [r3, #0]
 8008384:	b2db      	uxtb	r3, r3
 8008386:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8008388:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800838a:	683b      	ldr	r3, [r7, #0]
 800838c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008390:	d050      	beq.n	8008434 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008392:	f7fb f855 	bl	8003440 <HAL_GetTick>
 8008396:	4602      	mov	r2, r0
 8008398:	6a3b      	ldr	r3, [r7, #32]
 800839a:	1ad3      	subs	r3, r2, r3
 800839c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800839e:	429a      	cmp	r2, r3
 80083a0:	d902      	bls.n	80083a8 <SPI_WaitFifoStateUntilTimeout+0x80>
 80083a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d13d      	bne.n	8008424 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	685a      	ldr	r2, [r3, #4]
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80083b6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	685b      	ldr	r3, [r3, #4]
 80083bc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80083c0:	d111      	bne.n	80083e6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	689b      	ldr	r3, [r3, #8]
 80083c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80083ca:	d004      	beq.n	80083d6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	689b      	ldr	r3, [r3, #8]
 80083d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80083d4:	d107      	bne.n	80083e6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	681a      	ldr	r2, [r3, #0]
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80083e4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80083ee:	d10f      	bne.n	8008410 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	681a      	ldr	r2, [r3, #0]
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80083fe:	601a      	str	r2, [r3, #0]
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	681a      	ldr	r2, [r3, #0]
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800840e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	2201      	movs	r2, #1
 8008414:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	2200      	movs	r2, #0
 800841c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8008420:	2303      	movs	r3, #3
 8008422:	e010      	b.n	8008446 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008424:	69bb      	ldr	r3, [r7, #24]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d101      	bne.n	800842e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800842a:	2300      	movs	r3, #0
 800842c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800842e:	69bb      	ldr	r3, [r7, #24]
 8008430:	3b01      	subs	r3, #1
 8008432:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	689a      	ldr	r2, [r3, #8]
 800843a:	68bb      	ldr	r3, [r7, #8]
 800843c:	4013      	ands	r3, r2
 800843e:	687a      	ldr	r2, [r7, #4]
 8008440:	429a      	cmp	r2, r3
 8008442:	d196      	bne.n	8008372 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8008444:	2300      	movs	r3, #0
}
 8008446:	4618      	mov	r0, r3
 8008448:	3728      	adds	r7, #40	; 0x28
 800844a:	46bd      	mov	sp, r7
 800844c:	bd80      	pop	{r7, pc}
 800844e:	bf00      	nop
 8008450:	20000008 	.word	0x20000008

08008454 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008454:	b580      	push	{r7, lr}
 8008456:	b086      	sub	sp, #24
 8008458:	af02      	add	r7, sp, #8
 800845a:	60f8      	str	r0, [r7, #12]
 800845c:	60b9      	str	r1, [r7, #8]
 800845e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	685b      	ldr	r3, [r3, #4]
 8008464:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008468:	d111      	bne.n	800848e <SPI_EndRxTransaction+0x3a>
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	689b      	ldr	r3, [r3, #8]
 800846e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008472:	d004      	beq.n	800847e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	689b      	ldr	r3, [r3, #8]
 8008478:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800847c:	d107      	bne.n	800848e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	681a      	ldr	r2, [r3, #0]
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800848c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	9300      	str	r3, [sp, #0]
 8008492:	68bb      	ldr	r3, [r7, #8]
 8008494:	2200      	movs	r2, #0
 8008496:	2180      	movs	r1, #128	; 0x80
 8008498:	68f8      	ldr	r0, [r7, #12]
 800849a:	f7ff febd 	bl	8008218 <SPI_WaitFlagStateUntilTimeout>
 800849e:	4603      	mov	r3, r0
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d007      	beq.n	80084b4 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80084a8:	f043 0220 	orr.w	r2, r3, #32
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80084b0:	2303      	movs	r3, #3
 80084b2:	e023      	b.n	80084fc <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	685b      	ldr	r3, [r3, #4]
 80084b8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80084bc:	d11d      	bne.n	80084fa <SPI_EndRxTransaction+0xa6>
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	689b      	ldr	r3, [r3, #8]
 80084c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80084c6:	d004      	beq.n	80084d2 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	689b      	ldr	r3, [r3, #8]
 80084cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80084d0:	d113      	bne.n	80084fa <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	9300      	str	r3, [sp, #0]
 80084d6:	68bb      	ldr	r3, [r7, #8]
 80084d8:	2200      	movs	r2, #0
 80084da:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80084de:	68f8      	ldr	r0, [r7, #12]
 80084e0:	f7ff ff22 	bl	8008328 <SPI_WaitFifoStateUntilTimeout>
 80084e4:	4603      	mov	r3, r0
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d007      	beq.n	80084fa <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80084ee:	f043 0220 	orr.w	r2, r3, #32
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80084f6:	2303      	movs	r3, #3
 80084f8:	e000      	b.n	80084fc <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80084fa:	2300      	movs	r3, #0
}
 80084fc:	4618      	mov	r0, r3
 80084fe:	3710      	adds	r7, #16
 8008500:	46bd      	mov	sp, r7
 8008502:	bd80      	pop	{r7, pc}

08008504 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008504:	b580      	push	{r7, lr}
 8008506:	b086      	sub	sp, #24
 8008508:	af02      	add	r7, sp, #8
 800850a:	60f8      	str	r0, [r7, #12]
 800850c:	60b9      	str	r1, [r7, #8]
 800850e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	9300      	str	r3, [sp, #0]
 8008514:	68bb      	ldr	r3, [r7, #8]
 8008516:	2200      	movs	r2, #0
 8008518:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800851c:	68f8      	ldr	r0, [r7, #12]
 800851e:	f7ff ff03 	bl	8008328 <SPI_WaitFifoStateUntilTimeout>
 8008522:	4603      	mov	r3, r0
 8008524:	2b00      	cmp	r3, #0
 8008526:	d007      	beq.n	8008538 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800852c:	f043 0220 	orr.w	r2, r3, #32
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008534:	2303      	movs	r3, #3
 8008536:	e027      	b.n	8008588 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	9300      	str	r3, [sp, #0]
 800853c:	68bb      	ldr	r3, [r7, #8]
 800853e:	2200      	movs	r2, #0
 8008540:	2180      	movs	r1, #128	; 0x80
 8008542:	68f8      	ldr	r0, [r7, #12]
 8008544:	f7ff fe68 	bl	8008218 <SPI_WaitFlagStateUntilTimeout>
 8008548:	4603      	mov	r3, r0
 800854a:	2b00      	cmp	r3, #0
 800854c:	d007      	beq.n	800855e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008552:	f043 0220 	orr.w	r2, r3, #32
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800855a:	2303      	movs	r3, #3
 800855c:	e014      	b.n	8008588 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	9300      	str	r3, [sp, #0]
 8008562:	68bb      	ldr	r3, [r7, #8]
 8008564:	2200      	movs	r2, #0
 8008566:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800856a:	68f8      	ldr	r0, [r7, #12]
 800856c:	f7ff fedc 	bl	8008328 <SPI_WaitFifoStateUntilTimeout>
 8008570:	4603      	mov	r3, r0
 8008572:	2b00      	cmp	r3, #0
 8008574:	d007      	beq.n	8008586 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800857a:	f043 0220 	orr.w	r2, r3, #32
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008582:	2303      	movs	r3, #3
 8008584:	e000      	b.n	8008588 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8008586:	2300      	movs	r3, #0
}
 8008588:	4618      	mov	r0, r3
 800858a:	3710      	adds	r7, #16
 800858c:	46bd      	mov	sp, r7
 800858e:	bd80      	pop	{r7, pc}

08008590 <LL_RCC_GetUSARTClockSource>:
{
 8008590:	b480      	push	{r7}
 8008592:	b083      	sub	sp, #12
 8008594:	af00      	add	r7, sp, #0
 8008596:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8008598:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800859c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	4013      	ands	r3, r2
}
 80085a4:	4618      	mov	r0, r3
 80085a6:	370c      	adds	r7, #12
 80085a8:	46bd      	mov	sp, r7
 80085aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ae:	4770      	bx	lr

080085b0 <LL_RCC_GetLPUARTClockSource>:
{
 80085b0:	b480      	push	{r7}
 80085b2:	b083      	sub	sp, #12
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80085b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80085bc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	4013      	ands	r3, r2
}
 80085c4:	4618      	mov	r0, r3
 80085c6:	370c      	adds	r7, #12
 80085c8:	46bd      	mov	sp, r7
 80085ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ce:	4770      	bx	lr

080085d0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80085d0:	b580      	push	{r7, lr}
 80085d2:	b082      	sub	sp, #8
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d101      	bne.n	80085e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80085de:	2301      	movs	r3, #1
 80085e0:	e042      	b.n	8008668 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d106      	bne.n	80085fa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	2200      	movs	r2, #0
 80085f0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80085f4:	6878      	ldr	r0, [r7, #4]
 80085f6:	f7fa fccb 	bl	8002f90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	2224      	movs	r2, #36	; 0x24
 80085fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	681a      	ldr	r2, [r3, #0]
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	f022 0201 	bic.w	r2, r2, #1
 8008610:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008612:	6878      	ldr	r0, [r7, #4]
 8008614:	f000 f8ba 	bl	800878c <UART_SetConfig>
 8008618:	4603      	mov	r3, r0
 800861a:	2b01      	cmp	r3, #1
 800861c:	d101      	bne.n	8008622 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800861e:	2301      	movs	r3, #1
 8008620:	e022      	b.n	8008668 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008626:	2b00      	cmp	r3, #0
 8008628:	d002      	beq.n	8008630 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800862a:	6878      	ldr	r0, [r7, #4]
 800862c:	f000 fad6 	bl	8008bdc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	685a      	ldr	r2, [r3, #4]
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800863e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	689a      	ldr	r2, [r3, #8]
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800864e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	681a      	ldr	r2, [r3, #0]
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	f042 0201 	orr.w	r2, r2, #1
 800865e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008660:	6878      	ldr	r0, [r7, #4]
 8008662:	f000 fb5d 	bl	8008d20 <UART_CheckIdleState>
 8008666:	4603      	mov	r3, r0
}
 8008668:	4618      	mov	r0, r3
 800866a:	3708      	adds	r7, #8
 800866c:	46bd      	mov	sp, r7
 800866e:	bd80      	pop	{r7, pc}

08008670 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008670:	b580      	push	{r7, lr}
 8008672:	b08a      	sub	sp, #40	; 0x28
 8008674:	af02      	add	r7, sp, #8
 8008676:	60f8      	str	r0, [r7, #12]
 8008678:	60b9      	str	r1, [r7, #8]
 800867a:	603b      	str	r3, [r7, #0]
 800867c:	4613      	mov	r3, r2
 800867e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008686:	2b20      	cmp	r3, #32
 8008688:	d17b      	bne.n	8008782 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800868a:	68bb      	ldr	r3, [r7, #8]
 800868c:	2b00      	cmp	r3, #0
 800868e:	d002      	beq.n	8008696 <HAL_UART_Transmit+0x26>
 8008690:	88fb      	ldrh	r3, [r7, #6]
 8008692:	2b00      	cmp	r3, #0
 8008694:	d101      	bne.n	800869a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8008696:	2301      	movs	r3, #1
 8008698:	e074      	b.n	8008784 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	2200      	movs	r2, #0
 800869e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	2221      	movs	r2, #33	; 0x21
 80086a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80086aa:	f7fa fec9 	bl	8003440 <HAL_GetTick>
 80086ae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	88fa      	ldrh	r2, [r7, #6]
 80086b4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	88fa      	ldrh	r2, [r7, #6]
 80086bc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	689b      	ldr	r3, [r3, #8]
 80086c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80086c8:	d108      	bne.n	80086dc <HAL_UART_Transmit+0x6c>
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	691b      	ldr	r3, [r3, #16]
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d104      	bne.n	80086dc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80086d2:	2300      	movs	r3, #0
 80086d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80086d6:	68bb      	ldr	r3, [r7, #8]
 80086d8:	61bb      	str	r3, [r7, #24]
 80086da:	e003      	b.n	80086e4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80086dc:	68bb      	ldr	r3, [r7, #8]
 80086de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80086e0:	2300      	movs	r3, #0
 80086e2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80086e4:	e030      	b.n	8008748 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80086e6:	683b      	ldr	r3, [r7, #0]
 80086e8:	9300      	str	r3, [sp, #0]
 80086ea:	697b      	ldr	r3, [r7, #20]
 80086ec:	2200      	movs	r2, #0
 80086ee:	2180      	movs	r1, #128	; 0x80
 80086f0:	68f8      	ldr	r0, [r7, #12]
 80086f2:	f000 fbbf 	bl	8008e74 <UART_WaitOnFlagUntilTimeout>
 80086f6:	4603      	mov	r3, r0
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d005      	beq.n	8008708 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	2220      	movs	r2, #32
 8008700:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8008704:	2303      	movs	r3, #3
 8008706:	e03d      	b.n	8008784 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8008708:	69fb      	ldr	r3, [r7, #28]
 800870a:	2b00      	cmp	r3, #0
 800870c:	d10b      	bne.n	8008726 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800870e:	69bb      	ldr	r3, [r7, #24]
 8008710:	881b      	ldrh	r3, [r3, #0]
 8008712:	461a      	mov	r2, r3
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800871c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800871e:	69bb      	ldr	r3, [r7, #24]
 8008720:	3302      	adds	r3, #2
 8008722:	61bb      	str	r3, [r7, #24]
 8008724:	e007      	b.n	8008736 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008726:	69fb      	ldr	r3, [r7, #28]
 8008728:	781a      	ldrb	r2, [r3, #0]
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008730:	69fb      	ldr	r3, [r7, #28]
 8008732:	3301      	adds	r3, #1
 8008734:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800873c:	b29b      	uxth	r3, r3
 800873e:	3b01      	subs	r3, #1
 8008740:	b29a      	uxth	r2, r3
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800874e:	b29b      	uxth	r3, r3
 8008750:	2b00      	cmp	r3, #0
 8008752:	d1c8      	bne.n	80086e6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008754:	683b      	ldr	r3, [r7, #0]
 8008756:	9300      	str	r3, [sp, #0]
 8008758:	697b      	ldr	r3, [r7, #20]
 800875a:	2200      	movs	r2, #0
 800875c:	2140      	movs	r1, #64	; 0x40
 800875e:	68f8      	ldr	r0, [r7, #12]
 8008760:	f000 fb88 	bl	8008e74 <UART_WaitOnFlagUntilTimeout>
 8008764:	4603      	mov	r3, r0
 8008766:	2b00      	cmp	r3, #0
 8008768:	d005      	beq.n	8008776 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	2220      	movs	r2, #32
 800876e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8008772:	2303      	movs	r3, #3
 8008774:	e006      	b.n	8008784 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	2220      	movs	r2, #32
 800877a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800877e:	2300      	movs	r3, #0
 8008780:	e000      	b.n	8008784 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8008782:	2302      	movs	r3, #2
  }
}
 8008784:	4618      	mov	r0, r3
 8008786:	3720      	adds	r7, #32
 8008788:	46bd      	mov	sp, r7
 800878a:	bd80      	pop	{r7, pc}

0800878c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800878c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008790:	b08c      	sub	sp, #48	; 0x30
 8008792:	af00      	add	r7, sp, #0
 8008794:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008796:	2300      	movs	r3, #0
 8008798:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800879c:	697b      	ldr	r3, [r7, #20]
 800879e:	689a      	ldr	r2, [r3, #8]
 80087a0:	697b      	ldr	r3, [r7, #20]
 80087a2:	691b      	ldr	r3, [r3, #16]
 80087a4:	431a      	orrs	r2, r3
 80087a6:	697b      	ldr	r3, [r7, #20]
 80087a8:	695b      	ldr	r3, [r3, #20]
 80087aa:	431a      	orrs	r2, r3
 80087ac:	697b      	ldr	r3, [r7, #20]
 80087ae:	69db      	ldr	r3, [r3, #28]
 80087b0:	4313      	orrs	r3, r2
 80087b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80087b4:	697b      	ldr	r3, [r7, #20]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	681a      	ldr	r2, [r3, #0]
 80087ba:	4baf      	ldr	r3, [pc, #700]	; (8008a78 <UART_SetConfig+0x2ec>)
 80087bc:	4013      	ands	r3, r2
 80087be:	697a      	ldr	r2, [r7, #20]
 80087c0:	6812      	ldr	r2, [r2, #0]
 80087c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80087c4:	430b      	orrs	r3, r1
 80087c6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80087c8:	697b      	ldr	r3, [r7, #20]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	685b      	ldr	r3, [r3, #4]
 80087ce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80087d2:	697b      	ldr	r3, [r7, #20]
 80087d4:	68da      	ldr	r2, [r3, #12]
 80087d6:	697b      	ldr	r3, [r7, #20]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	430a      	orrs	r2, r1
 80087dc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80087de:	697b      	ldr	r3, [r7, #20]
 80087e0:	699b      	ldr	r3, [r3, #24]
 80087e2:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80087e4:	697b      	ldr	r3, [r7, #20]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	4aa4      	ldr	r2, [pc, #656]	; (8008a7c <UART_SetConfig+0x2f0>)
 80087ea:	4293      	cmp	r3, r2
 80087ec:	d004      	beq.n	80087f8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80087ee:	697b      	ldr	r3, [r7, #20]
 80087f0:	6a1b      	ldr	r3, [r3, #32]
 80087f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80087f4:	4313      	orrs	r3, r2
 80087f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80087f8:	697b      	ldr	r3, [r7, #20]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	689b      	ldr	r3, [r3, #8]
 80087fe:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8008802:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8008806:	697a      	ldr	r2, [r7, #20]
 8008808:	6812      	ldr	r2, [r2, #0]
 800880a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800880c:	430b      	orrs	r3, r1
 800880e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008810:	697b      	ldr	r3, [r7, #20]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008816:	f023 010f 	bic.w	r1, r3, #15
 800881a:	697b      	ldr	r3, [r7, #20]
 800881c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800881e:	697b      	ldr	r3, [r7, #20]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	430a      	orrs	r2, r1
 8008824:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008826:	697b      	ldr	r3, [r7, #20]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	4a95      	ldr	r2, [pc, #596]	; (8008a80 <UART_SetConfig+0x2f4>)
 800882c:	4293      	cmp	r3, r2
 800882e:	d125      	bne.n	800887c <UART_SetConfig+0xf0>
 8008830:	2003      	movs	r0, #3
 8008832:	f7ff fead 	bl	8008590 <LL_RCC_GetUSARTClockSource>
 8008836:	4603      	mov	r3, r0
 8008838:	2b03      	cmp	r3, #3
 800883a:	d81b      	bhi.n	8008874 <UART_SetConfig+0xe8>
 800883c:	a201      	add	r2, pc, #4	; (adr r2, 8008844 <UART_SetConfig+0xb8>)
 800883e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008842:	bf00      	nop
 8008844:	08008855 	.word	0x08008855
 8008848:	08008865 	.word	0x08008865
 800884c:	0800885d 	.word	0x0800885d
 8008850:	0800886d 	.word	0x0800886d
 8008854:	2301      	movs	r3, #1
 8008856:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800885a:	e042      	b.n	80088e2 <UART_SetConfig+0x156>
 800885c:	2302      	movs	r3, #2
 800885e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008862:	e03e      	b.n	80088e2 <UART_SetConfig+0x156>
 8008864:	2304      	movs	r3, #4
 8008866:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800886a:	e03a      	b.n	80088e2 <UART_SetConfig+0x156>
 800886c:	2308      	movs	r3, #8
 800886e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008872:	e036      	b.n	80088e2 <UART_SetConfig+0x156>
 8008874:	2310      	movs	r3, #16
 8008876:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800887a:	e032      	b.n	80088e2 <UART_SetConfig+0x156>
 800887c:	697b      	ldr	r3, [r7, #20]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	4a7e      	ldr	r2, [pc, #504]	; (8008a7c <UART_SetConfig+0x2f0>)
 8008882:	4293      	cmp	r3, r2
 8008884:	d12a      	bne.n	80088dc <UART_SetConfig+0x150>
 8008886:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800888a:	f7ff fe91 	bl	80085b0 <LL_RCC_GetLPUARTClockSource>
 800888e:	4603      	mov	r3, r0
 8008890:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008894:	d01a      	beq.n	80088cc <UART_SetConfig+0x140>
 8008896:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800889a:	d81b      	bhi.n	80088d4 <UART_SetConfig+0x148>
 800889c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80088a0:	d00c      	beq.n	80088bc <UART_SetConfig+0x130>
 80088a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80088a6:	d815      	bhi.n	80088d4 <UART_SetConfig+0x148>
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d003      	beq.n	80088b4 <UART_SetConfig+0x128>
 80088ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80088b0:	d008      	beq.n	80088c4 <UART_SetConfig+0x138>
 80088b2:	e00f      	b.n	80088d4 <UART_SetConfig+0x148>
 80088b4:	2300      	movs	r3, #0
 80088b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80088ba:	e012      	b.n	80088e2 <UART_SetConfig+0x156>
 80088bc:	2302      	movs	r3, #2
 80088be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80088c2:	e00e      	b.n	80088e2 <UART_SetConfig+0x156>
 80088c4:	2304      	movs	r3, #4
 80088c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80088ca:	e00a      	b.n	80088e2 <UART_SetConfig+0x156>
 80088cc:	2308      	movs	r3, #8
 80088ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80088d2:	e006      	b.n	80088e2 <UART_SetConfig+0x156>
 80088d4:	2310      	movs	r3, #16
 80088d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80088da:	e002      	b.n	80088e2 <UART_SetConfig+0x156>
 80088dc:	2310      	movs	r3, #16
 80088de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80088e2:	697b      	ldr	r3, [r7, #20]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	4a65      	ldr	r2, [pc, #404]	; (8008a7c <UART_SetConfig+0x2f0>)
 80088e8:	4293      	cmp	r3, r2
 80088ea:	f040 8097 	bne.w	8008a1c <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80088ee:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80088f2:	2b08      	cmp	r3, #8
 80088f4:	d823      	bhi.n	800893e <UART_SetConfig+0x1b2>
 80088f6:	a201      	add	r2, pc, #4	; (adr r2, 80088fc <UART_SetConfig+0x170>)
 80088f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088fc:	08008921 	.word	0x08008921
 8008900:	0800893f 	.word	0x0800893f
 8008904:	08008929 	.word	0x08008929
 8008908:	0800893f 	.word	0x0800893f
 800890c:	0800892f 	.word	0x0800892f
 8008910:	0800893f 	.word	0x0800893f
 8008914:	0800893f 	.word	0x0800893f
 8008918:	0800893f 	.word	0x0800893f
 800891c:	08008937 	.word	0x08008937
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008920:	f7fd fed0 	bl	80066c4 <HAL_RCC_GetPCLK1Freq>
 8008924:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008926:	e010      	b.n	800894a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008928:	4b56      	ldr	r3, [pc, #344]	; (8008a84 <UART_SetConfig+0x2f8>)
 800892a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800892c:	e00d      	b.n	800894a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800892e:	f7fd fe49 	bl	80065c4 <HAL_RCC_GetSysClockFreq>
 8008932:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008934:	e009      	b.n	800894a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008936:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800893a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800893c:	e005      	b.n	800894a <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 800893e:	2300      	movs	r3, #0
 8008940:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008942:	2301      	movs	r3, #1
 8008944:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008948:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800894a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800894c:	2b00      	cmp	r3, #0
 800894e:	f000 812b 	beq.w	8008ba8 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008952:	697b      	ldr	r3, [r7, #20]
 8008954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008956:	4a4c      	ldr	r2, [pc, #304]	; (8008a88 <UART_SetConfig+0x2fc>)
 8008958:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800895c:	461a      	mov	r2, r3
 800895e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008960:	fbb3 f3f2 	udiv	r3, r3, r2
 8008964:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008966:	697b      	ldr	r3, [r7, #20]
 8008968:	685a      	ldr	r2, [r3, #4]
 800896a:	4613      	mov	r3, r2
 800896c:	005b      	lsls	r3, r3, #1
 800896e:	4413      	add	r3, r2
 8008970:	69ba      	ldr	r2, [r7, #24]
 8008972:	429a      	cmp	r2, r3
 8008974:	d305      	bcc.n	8008982 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008976:	697b      	ldr	r3, [r7, #20]
 8008978:	685b      	ldr	r3, [r3, #4]
 800897a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800897c:	69ba      	ldr	r2, [r7, #24]
 800897e:	429a      	cmp	r2, r3
 8008980:	d903      	bls.n	800898a <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8008982:	2301      	movs	r3, #1
 8008984:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008988:	e10e      	b.n	8008ba8 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800898a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800898c:	2200      	movs	r2, #0
 800898e:	60bb      	str	r3, [r7, #8]
 8008990:	60fa      	str	r2, [r7, #12]
 8008992:	697b      	ldr	r3, [r7, #20]
 8008994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008996:	4a3c      	ldr	r2, [pc, #240]	; (8008a88 <UART_SetConfig+0x2fc>)
 8008998:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800899c:	b29b      	uxth	r3, r3
 800899e:	2200      	movs	r2, #0
 80089a0:	603b      	str	r3, [r7, #0]
 80089a2:	607a      	str	r2, [r7, #4]
 80089a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80089a8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80089ac:	f7f7 fe1c 	bl	80005e8 <__aeabi_uldivmod>
 80089b0:	4602      	mov	r2, r0
 80089b2:	460b      	mov	r3, r1
 80089b4:	4610      	mov	r0, r2
 80089b6:	4619      	mov	r1, r3
 80089b8:	f04f 0200 	mov.w	r2, #0
 80089bc:	f04f 0300 	mov.w	r3, #0
 80089c0:	020b      	lsls	r3, r1, #8
 80089c2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80089c6:	0202      	lsls	r2, r0, #8
 80089c8:	6979      	ldr	r1, [r7, #20]
 80089ca:	6849      	ldr	r1, [r1, #4]
 80089cc:	0849      	lsrs	r1, r1, #1
 80089ce:	2000      	movs	r0, #0
 80089d0:	460c      	mov	r4, r1
 80089d2:	4605      	mov	r5, r0
 80089d4:	eb12 0804 	adds.w	r8, r2, r4
 80089d8:	eb43 0905 	adc.w	r9, r3, r5
 80089dc:	697b      	ldr	r3, [r7, #20]
 80089de:	685b      	ldr	r3, [r3, #4]
 80089e0:	2200      	movs	r2, #0
 80089e2:	469a      	mov	sl, r3
 80089e4:	4693      	mov	fp, r2
 80089e6:	4652      	mov	r2, sl
 80089e8:	465b      	mov	r3, fp
 80089ea:	4640      	mov	r0, r8
 80089ec:	4649      	mov	r1, r9
 80089ee:	f7f7 fdfb 	bl	80005e8 <__aeabi_uldivmod>
 80089f2:	4602      	mov	r2, r0
 80089f4:	460b      	mov	r3, r1
 80089f6:	4613      	mov	r3, r2
 80089f8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80089fa:	6a3b      	ldr	r3, [r7, #32]
 80089fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008a00:	d308      	bcc.n	8008a14 <UART_SetConfig+0x288>
 8008a02:	6a3b      	ldr	r3, [r7, #32]
 8008a04:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008a08:	d204      	bcs.n	8008a14 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8008a0a:	697b      	ldr	r3, [r7, #20]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	6a3a      	ldr	r2, [r7, #32]
 8008a10:	60da      	str	r2, [r3, #12]
 8008a12:	e0c9      	b.n	8008ba8 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8008a14:	2301      	movs	r3, #1
 8008a16:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008a1a:	e0c5      	b.n	8008ba8 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008a1c:	697b      	ldr	r3, [r7, #20]
 8008a1e:	69db      	ldr	r3, [r3, #28]
 8008a20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008a24:	d16d      	bne.n	8008b02 <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8008a26:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008a2a:	3b01      	subs	r3, #1
 8008a2c:	2b07      	cmp	r3, #7
 8008a2e:	d82d      	bhi.n	8008a8c <UART_SetConfig+0x300>
 8008a30:	a201      	add	r2, pc, #4	; (adr r2, 8008a38 <UART_SetConfig+0x2ac>)
 8008a32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a36:	bf00      	nop
 8008a38:	08008a59 	.word	0x08008a59
 8008a3c:	08008a61 	.word	0x08008a61
 8008a40:	08008a8d 	.word	0x08008a8d
 8008a44:	08008a67 	.word	0x08008a67
 8008a48:	08008a8d 	.word	0x08008a8d
 8008a4c:	08008a8d 	.word	0x08008a8d
 8008a50:	08008a8d 	.word	0x08008a8d
 8008a54:	08008a6f 	.word	0x08008a6f
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008a58:	f7fd fe4a 	bl	80066f0 <HAL_RCC_GetPCLK2Freq>
 8008a5c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008a5e:	e01b      	b.n	8008a98 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008a60:	4b08      	ldr	r3, [pc, #32]	; (8008a84 <UART_SetConfig+0x2f8>)
 8008a62:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008a64:	e018      	b.n	8008a98 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008a66:	f7fd fdad 	bl	80065c4 <HAL_RCC_GetSysClockFreq>
 8008a6a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008a6c:	e014      	b.n	8008a98 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008a6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008a72:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008a74:	e010      	b.n	8008a98 <UART_SetConfig+0x30c>
 8008a76:	bf00      	nop
 8008a78:	cfff69f3 	.word	0xcfff69f3
 8008a7c:	40008000 	.word	0x40008000
 8008a80:	40013800 	.word	0x40013800
 8008a84:	00f42400 	.word	0x00f42400
 8008a88:	0800d9c0 	.word	0x0800d9c0
      default:
        pclk = 0U;
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008a90:	2301      	movs	r3, #1
 8008a92:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008a96:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	f000 8084 	beq.w	8008ba8 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008aa0:	697b      	ldr	r3, [r7, #20]
 8008aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aa4:	4a4b      	ldr	r2, [pc, #300]	; (8008bd4 <UART_SetConfig+0x448>)
 8008aa6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008aaa:	461a      	mov	r2, r3
 8008aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aae:	fbb3 f3f2 	udiv	r3, r3, r2
 8008ab2:	005a      	lsls	r2, r3, #1
 8008ab4:	697b      	ldr	r3, [r7, #20]
 8008ab6:	685b      	ldr	r3, [r3, #4]
 8008ab8:	085b      	lsrs	r3, r3, #1
 8008aba:	441a      	add	r2, r3
 8008abc:	697b      	ldr	r3, [r7, #20]
 8008abe:	685b      	ldr	r3, [r3, #4]
 8008ac0:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ac4:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008ac6:	6a3b      	ldr	r3, [r7, #32]
 8008ac8:	2b0f      	cmp	r3, #15
 8008aca:	d916      	bls.n	8008afa <UART_SetConfig+0x36e>
 8008acc:	6a3b      	ldr	r3, [r7, #32]
 8008ace:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ad2:	d212      	bcs.n	8008afa <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008ad4:	6a3b      	ldr	r3, [r7, #32]
 8008ad6:	b29b      	uxth	r3, r3
 8008ad8:	f023 030f 	bic.w	r3, r3, #15
 8008adc:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008ade:	6a3b      	ldr	r3, [r7, #32]
 8008ae0:	085b      	lsrs	r3, r3, #1
 8008ae2:	b29b      	uxth	r3, r3
 8008ae4:	f003 0307 	and.w	r3, r3, #7
 8008ae8:	b29a      	uxth	r2, r3
 8008aea:	8bfb      	ldrh	r3, [r7, #30]
 8008aec:	4313      	orrs	r3, r2
 8008aee:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008af0:	697b      	ldr	r3, [r7, #20]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	8bfa      	ldrh	r2, [r7, #30]
 8008af6:	60da      	str	r2, [r3, #12]
 8008af8:	e056      	b.n	8008ba8 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8008afa:	2301      	movs	r3, #1
 8008afc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008b00:	e052      	b.n	8008ba8 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008b02:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008b06:	3b01      	subs	r3, #1
 8008b08:	2b07      	cmp	r3, #7
 8008b0a:	d822      	bhi.n	8008b52 <UART_SetConfig+0x3c6>
 8008b0c:	a201      	add	r2, pc, #4	; (adr r2, 8008b14 <UART_SetConfig+0x388>)
 8008b0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b12:	bf00      	nop
 8008b14:	08008b35 	.word	0x08008b35
 8008b18:	08008b3d 	.word	0x08008b3d
 8008b1c:	08008b53 	.word	0x08008b53
 8008b20:	08008b43 	.word	0x08008b43
 8008b24:	08008b53 	.word	0x08008b53
 8008b28:	08008b53 	.word	0x08008b53
 8008b2c:	08008b53 	.word	0x08008b53
 8008b30:	08008b4b 	.word	0x08008b4b
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008b34:	f7fd fddc 	bl	80066f0 <HAL_RCC_GetPCLK2Freq>
 8008b38:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008b3a:	e010      	b.n	8008b5e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008b3c:	4b26      	ldr	r3, [pc, #152]	; (8008bd8 <UART_SetConfig+0x44c>)
 8008b3e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008b40:	e00d      	b.n	8008b5e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008b42:	f7fd fd3f 	bl	80065c4 <HAL_RCC_GetSysClockFreq>
 8008b46:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008b48:	e009      	b.n	8008b5e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008b4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008b4e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008b50:	e005      	b.n	8008b5e <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8008b52:	2300      	movs	r3, #0
 8008b54:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008b56:	2301      	movs	r3, #1
 8008b58:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008b5c:	bf00      	nop
    }

    if (pclk != 0U)
 8008b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d021      	beq.n	8008ba8 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008b64:	697b      	ldr	r3, [r7, #20]
 8008b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b68:	4a1a      	ldr	r2, [pc, #104]	; (8008bd4 <UART_SetConfig+0x448>)
 8008b6a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008b6e:	461a      	mov	r2, r3
 8008b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b72:	fbb3 f2f2 	udiv	r2, r3, r2
 8008b76:	697b      	ldr	r3, [r7, #20]
 8008b78:	685b      	ldr	r3, [r3, #4]
 8008b7a:	085b      	lsrs	r3, r3, #1
 8008b7c:	441a      	add	r2, r3
 8008b7e:	697b      	ldr	r3, [r7, #20]
 8008b80:	685b      	ldr	r3, [r3, #4]
 8008b82:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b86:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008b88:	6a3b      	ldr	r3, [r7, #32]
 8008b8a:	2b0f      	cmp	r3, #15
 8008b8c:	d909      	bls.n	8008ba2 <UART_SetConfig+0x416>
 8008b8e:	6a3b      	ldr	r3, [r7, #32]
 8008b90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b94:	d205      	bcs.n	8008ba2 <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008b96:	6a3b      	ldr	r3, [r7, #32]
 8008b98:	b29a      	uxth	r2, r3
 8008b9a:	697b      	ldr	r3, [r7, #20]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	60da      	str	r2, [r3, #12]
 8008ba0:	e002      	b.n	8008ba8 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8008ba2:	2301      	movs	r3, #1
 8008ba4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008ba8:	697b      	ldr	r3, [r7, #20]
 8008baa:	2201      	movs	r2, #1
 8008bac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008bb0:	697b      	ldr	r3, [r7, #20]
 8008bb2:	2201      	movs	r2, #1
 8008bb4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008bb8:	697b      	ldr	r3, [r7, #20]
 8008bba:	2200      	movs	r2, #0
 8008bbc:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8008bbe:	697b      	ldr	r3, [r7, #20]
 8008bc0:	2200      	movs	r2, #0
 8008bc2:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8008bc4:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8008bc8:	4618      	mov	r0, r3
 8008bca:	3730      	adds	r7, #48	; 0x30
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008bd2:	bf00      	nop
 8008bd4:	0800d9c0 	.word	0x0800d9c0
 8008bd8:	00f42400 	.word	0x00f42400

08008bdc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008bdc:	b480      	push	{r7}
 8008bde:	b083      	sub	sp, #12
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008be8:	f003 0301 	and.w	r3, r3, #1
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d00a      	beq.n	8008c06 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	685b      	ldr	r3, [r3, #4]
 8008bf6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	430a      	orrs	r2, r1
 8008c04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c0a:	f003 0302 	and.w	r3, r3, #2
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d00a      	beq.n	8008c28 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	685b      	ldr	r3, [r3, #4]
 8008c18:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	430a      	orrs	r2, r1
 8008c26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c2c:	f003 0304 	and.w	r3, r3, #4
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d00a      	beq.n	8008c4a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	685b      	ldr	r3, [r3, #4]
 8008c3a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	430a      	orrs	r2, r1
 8008c48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c4e:	f003 0308 	and.w	r3, r3, #8
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d00a      	beq.n	8008c6c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	685b      	ldr	r3, [r3, #4]
 8008c5c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	430a      	orrs	r2, r1
 8008c6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c70:	f003 0310 	and.w	r3, r3, #16
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d00a      	beq.n	8008c8e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	689b      	ldr	r3, [r3, #8]
 8008c7e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	430a      	orrs	r2, r1
 8008c8c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c92:	f003 0320 	and.w	r3, r3, #32
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d00a      	beq.n	8008cb0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	689b      	ldr	r3, [r3, #8]
 8008ca0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	430a      	orrs	r2, r1
 8008cae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d01a      	beq.n	8008cf2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	685b      	ldr	r3, [r3, #4]
 8008cc2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	430a      	orrs	r2, r1
 8008cd0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008cd6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008cda:	d10a      	bne.n	8008cf2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	685b      	ldr	r3, [r3, #4]
 8008ce2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	430a      	orrs	r2, r1
 8008cf0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d00a      	beq.n	8008d14 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	685b      	ldr	r3, [r3, #4]
 8008d04:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	430a      	orrs	r2, r1
 8008d12:	605a      	str	r2, [r3, #4]
  }
}
 8008d14:	bf00      	nop
 8008d16:	370c      	adds	r7, #12
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1e:	4770      	bx	lr

08008d20 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008d20:	b580      	push	{r7, lr}
 8008d22:	b098      	sub	sp, #96	; 0x60
 8008d24:	af02      	add	r7, sp, #8
 8008d26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	2200      	movs	r2, #0
 8008d2c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008d30:	f7fa fb86 	bl	8003440 <HAL_GetTick>
 8008d34:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	f003 0308 	and.w	r3, r3, #8
 8008d40:	2b08      	cmp	r3, #8
 8008d42:	d12f      	bne.n	8008da4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008d44:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008d48:	9300      	str	r3, [sp, #0]
 8008d4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008d4c:	2200      	movs	r2, #0
 8008d4e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008d52:	6878      	ldr	r0, [r7, #4]
 8008d54:	f000 f88e 	bl	8008e74 <UART_WaitOnFlagUntilTimeout>
 8008d58:	4603      	mov	r3, r0
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d022      	beq.n	8008da4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d66:	e853 3f00 	ldrex	r3, [r3]
 8008d6a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008d6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d6e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008d72:	653b      	str	r3, [r7, #80]	; 0x50
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	461a      	mov	r2, r3
 8008d7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008d7c:	647b      	str	r3, [r7, #68]	; 0x44
 8008d7e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d80:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008d82:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008d84:	e841 2300 	strex	r3, r2, [r1]
 8008d88:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008d8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d1e6      	bne.n	8008d5e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	2220      	movs	r2, #32
 8008d94:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	2200      	movs	r2, #0
 8008d9c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008da0:	2303      	movs	r3, #3
 8008da2:	e063      	b.n	8008e6c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	f003 0304 	and.w	r3, r3, #4
 8008dae:	2b04      	cmp	r3, #4
 8008db0:	d149      	bne.n	8008e46 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008db2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008db6:	9300      	str	r3, [sp, #0]
 8008db8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008dba:	2200      	movs	r2, #0
 8008dbc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008dc0:	6878      	ldr	r0, [r7, #4]
 8008dc2:	f000 f857 	bl	8008e74 <UART_WaitOnFlagUntilTimeout>
 8008dc6:	4603      	mov	r3, r0
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d03c      	beq.n	8008e46 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dd4:	e853 3f00 	ldrex	r3, [r3]
 8008dd8:	623b      	str	r3, [r7, #32]
   return(result);
 8008dda:	6a3b      	ldr	r3, [r7, #32]
 8008ddc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008de0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	461a      	mov	r2, r3
 8008de8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008dea:	633b      	str	r3, [r7, #48]	; 0x30
 8008dec:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008df0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008df2:	e841 2300 	strex	r3, r2, [r1]
 8008df6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d1e6      	bne.n	8008dcc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	3308      	adds	r3, #8
 8008e04:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e06:	693b      	ldr	r3, [r7, #16]
 8008e08:	e853 3f00 	ldrex	r3, [r3]
 8008e0c:	60fb      	str	r3, [r7, #12]
   return(result);
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	f023 0301 	bic.w	r3, r3, #1
 8008e14:	64bb      	str	r3, [r7, #72]	; 0x48
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	3308      	adds	r3, #8
 8008e1c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008e1e:	61fa      	str	r2, [r7, #28]
 8008e20:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e22:	69b9      	ldr	r1, [r7, #24]
 8008e24:	69fa      	ldr	r2, [r7, #28]
 8008e26:	e841 2300 	strex	r3, r2, [r1]
 8008e2a:	617b      	str	r3, [r7, #20]
   return(result);
 8008e2c:	697b      	ldr	r3, [r7, #20]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d1e5      	bne.n	8008dfe <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	2220      	movs	r2, #32
 8008e36:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	2200      	movs	r2, #0
 8008e3e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008e42:	2303      	movs	r3, #3
 8008e44:	e012      	b.n	8008e6c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	2220      	movs	r2, #32
 8008e4a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	2220      	movs	r2, #32
 8008e52:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	2200      	movs	r2, #0
 8008e5a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	2200      	movs	r2, #0
 8008e60:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	2200      	movs	r2, #0
 8008e66:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008e6a:	2300      	movs	r3, #0
}
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	3758      	adds	r7, #88	; 0x58
 8008e70:	46bd      	mov	sp, r7
 8008e72:	bd80      	pop	{r7, pc}

08008e74 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008e74:	b580      	push	{r7, lr}
 8008e76:	b084      	sub	sp, #16
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	60f8      	str	r0, [r7, #12]
 8008e7c:	60b9      	str	r1, [r7, #8]
 8008e7e:	603b      	str	r3, [r7, #0]
 8008e80:	4613      	mov	r3, r2
 8008e82:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008e84:	e049      	b.n	8008f1a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008e86:	69bb      	ldr	r3, [r7, #24]
 8008e88:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008e8c:	d045      	beq.n	8008f1a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008e8e:	f7fa fad7 	bl	8003440 <HAL_GetTick>
 8008e92:	4602      	mov	r2, r0
 8008e94:	683b      	ldr	r3, [r7, #0]
 8008e96:	1ad3      	subs	r3, r2, r3
 8008e98:	69ba      	ldr	r2, [r7, #24]
 8008e9a:	429a      	cmp	r2, r3
 8008e9c:	d302      	bcc.n	8008ea4 <UART_WaitOnFlagUntilTimeout+0x30>
 8008e9e:	69bb      	ldr	r3, [r7, #24]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d101      	bne.n	8008ea8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008ea4:	2303      	movs	r3, #3
 8008ea6:	e048      	b.n	8008f3a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	f003 0304 	and.w	r3, r3, #4
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d031      	beq.n	8008f1a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	69db      	ldr	r3, [r3, #28]
 8008ebc:	f003 0308 	and.w	r3, r3, #8
 8008ec0:	2b08      	cmp	r3, #8
 8008ec2:	d110      	bne.n	8008ee6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	2208      	movs	r2, #8
 8008eca:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8008ecc:	68f8      	ldr	r0, [r7, #12]
 8008ece:	f000 f838 	bl	8008f42 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	2208      	movs	r2, #8
 8008ed6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	2200      	movs	r2, #0
 8008ede:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8008ee2:	2301      	movs	r3, #1
 8008ee4:	e029      	b.n	8008f3a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	69db      	ldr	r3, [r3, #28]
 8008eec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008ef0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008ef4:	d111      	bne.n	8008f1a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008efe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008f00:	68f8      	ldr	r0, [r7, #12]
 8008f02:	f000 f81e 	bl	8008f42 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	2220      	movs	r2, #32
 8008f0a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	2200      	movs	r2, #0
 8008f12:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8008f16:	2303      	movs	r3, #3
 8008f18:	e00f      	b.n	8008f3a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	69da      	ldr	r2, [r3, #28]
 8008f20:	68bb      	ldr	r3, [r7, #8]
 8008f22:	4013      	ands	r3, r2
 8008f24:	68ba      	ldr	r2, [r7, #8]
 8008f26:	429a      	cmp	r2, r3
 8008f28:	bf0c      	ite	eq
 8008f2a:	2301      	moveq	r3, #1
 8008f2c:	2300      	movne	r3, #0
 8008f2e:	b2db      	uxtb	r3, r3
 8008f30:	461a      	mov	r2, r3
 8008f32:	79fb      	ldrb	r3, [r7, #7]
 8008f34:	429a      	cmp	r2, r3
 8008f36:	d0a6      	beq.n	8008e86 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008f38:	2300      	movs	r3, #0
}
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	3710      	adds	r7, #16
 8008f3e:	46bd      	mov	sp, r7
 8008f40:	bd80      	pop	{r7, pc}

08008f42 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008f42:	b480      	push	{r7}
 8008f44:	b095      	sub	sp, #84	; 0x54
 8008f46:	af00      	add	r7, sp, #0
 8008f48:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f52:	e853 3f00 	ldrex	r3, [r3]
 8008f56:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f5a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008f5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	461a      	mov	r2, r3
 8008f66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f68:	643b      	str	r3, [r7, #64]	; 0x40
 8008f6a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f6c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008f6e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008f70:	e841 2300 	strex	r3, r2, [r1]
 8008f74:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008f76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d1e6      	bne.n	8008f4a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	3308      	adds	r3, #8
 8008f82:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f84:	6a3b      	ldr	r3, [r7, #32]
 8008f86:	e853 3f00 	ldrex	r3, [r3]
 8008f8a:	61fb      	str	r3, [r7, #28]
   return(result);
 8008f8c:	69fb      	ldr	r3, [r7, #28]
 8008f8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008f92:	f023 0301 	bic.w	r3, r3, #1
 8008f96:	64bb      	str	r3, [r7, #72]	; 0x48
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	3308      	adds	r3, #8
 8008f9e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008fa0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008fa2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fa4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008fa6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008fa8:	e841 2300 	strex	r3, r2, [r1]
 8008fac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d1e3      	bne.n	8008f7c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008fb8:	2b01      	cmp	r3, #1
 8008fba:	d118      	bne.n	8008fee <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	e853 3f00 	ldrex	r3, [r3]
 8008fc8:	60bb      	str	r3, [r7, #8]
   return(result);
 8008fca:	68bb      	ldr	r3, [r7, #8]
 8008fcc:	f023 0310 	bic.w	r3, r3, #16
 8008fd0:	647b      	str	r3, [r7, #68]	; 0x44
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	461a      	mov	r2, r3
 8008fd8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008fda:	61bb      	str	r3, [r7, #24]
 8008fdc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fde:	6979      	ldr	r1, [r7, #20]
 8008fe0:	69ba      	ldr	r2, [r7, #24]
 8008fe2:	e841 2300 	strex	r3, r2, [r1]
 8008fe6:	613b      	str	r3, [r7, #16]
   return(result);
 8008fe8:	693b      	ldr	r3, [r7, #16]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d1e6      	bne.n	8008fbc <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	2220      	movs	r2, #32
 8008ff2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	2200      	movs	r2, #0
 8008ffa:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	2200      	movs	r2, #0
 8009000:	675a      	str	r2, [r3, #116]	; 0x74
}
 8009002:	bf00      	nop
 8009004:	3754      	adds	r7, #84	; 0x54
 8009006:	46bd      	mov	sp, r7
 8009008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800900c:	4770      	bx	lr

0800900e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800900e:	b480      	push	{r7}
 8009010:	b085      	sub	sp, #20
 8009012:	af00      	add	r7, sp, #0
 8009014:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800901c:	2b01      	cmp	r3, #1
 800901e:	d101      	bne.n	8009024 <HAL_UARTEx_DisableFifoMode+0x16>
 8009020:	2302      	movs	r3, #2
 8009022:	e027      	b.n	8009074 <HAL_UARTEx_DisableFifoMode+0x66>
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	2201      	movs	r2, #1
 8009028:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	2224      	movs	r2, #36	; 0x24
 8009030:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	681a      	ldr	r2, [r3, #0]
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	f022 0201 	bic.w	r2, r2, #1
 800904a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009052:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	2200      	movs	r2, #0
 8009058:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	68fa      	ldr	r2, [r7, #12]
 8009060:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	2220      	movs	r2, #32
 8009066:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	2200      	movs	r2, #0
 800906e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009072:	2300      	movs	r3, #0
}
 8009074:	4618      	mov	r0, r3
 8009076:	3714      	adds	r7, #20
 8009078:	46bd      	mov	sp, r7
 800907a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800907e:	4770      	bx	lr

08009080 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009080:	b580      	push	{r7, lr}
 8009082:	b084      	sub	sp, #16
 8009084:	af00      	add	r7, sp, #0
 8009086:	6078      	str	r0, [r7, #4]
 8009088:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009090:	2b01      	cmp	r3, #1
 8009092:	d101      	bne.n	8009098 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009094:	2302      	movs	r3, #2
 8009096:	e02d      	b.n	80090f4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	2201      	movs	r2, #1
 800909c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	2224      	movs	r2, #36	; 0x24
 80090a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	681a      	ldr	r2, [r3, #0]
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	f022 0201 	bic.w	r2, r2, #1
 80090be:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	689b      	ldr	r3, [r3, #8]
 80090c6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	683a      	ldr	r2, [r7, #0]
 80090d0:	430a      	orrs	r2, r1
 80090d2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80090d4:	6878      	ldr	r0, [r7, #4]
 80090d6:	f000 f84f 	bl	8009178 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	68fa      	ldr	r2, [r7, #12]
 80090e0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	2220      	movs	r2, #32
 80090e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	2200      	movs	r2, #0
 80090ee:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80090f2:	2300      	movs	r3, #0
}
 80090f4:	4618      	mov	r0, r3
 80090f6:	3710      	adds	r7, #16
 80090f8:	46bd      	mov	sp, r7
 80090fa:	bd80      	pop	{r7, pc}

080090fc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80090fc:	b580      	push	{r7, lr}
 80090fe:	b084      	sub	sp, #16
 8009100:	af00      	add	r7, sp, #0
 8009102:	6078      	str	r0, [r7, #4]
 8009104:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800910c:	2b01      	cmp	r3, #1
 800910e:	d101      	bne.n	8009114 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009110:	2302      	movs	r3, #2
 8009112:	e02d      	b.n	8009170 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	2201      	movs	r2, #1
 8009118:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	2224      	movs	r2, #36	; 0x24
 8009120:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	681a      	ldr	r2, [r3, #0]
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	f022 0201 	bic.w	r2, r2, #1
 800913a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	689b      	ldr	r3, [r3, #8]
 8009142:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	683a      	ldr	r2, [r7, #0]
 800914c:	430a      	orrs	r2, r1
 800914e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009150:	6878      	ldr	r0, [r7, #4]
 8009152:	f000 f811 	bl	8009178 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	68fa      	ldr	r2, [r7, #12]
 800915c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	2220      	movs	r2, #32
 8009162:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	2200      	movs	r2, #0
 800916a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800916e:	2300      	movs	r3, #0
}
 8009170:	4618      	mov	r0, r3
 8009172:	3710      	adds	r7, #16
 8009174:	46bd      	mov	sp, r7
 8009176:	bd80      	pop	{r7, pc}

08009178 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009178:	b480      	push	{r7}
 800917a:	b085      	sub	sp, #20
 800917c:	af00      	add	r7, sp, #0
 800917e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009184:	2b00      	cmp	r3, #0
 8009186:	d108      	bne.n	800919a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	2201      	movs	r2, #1
 800918c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	2201      	movs	r2, #1
 8009194:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009198:	e031      	b.n	80091fe <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800919a:	2308      	movs	r3, #8
 800919c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800919e:	2308      	movs	r3, #8
 80091a0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	689b      	ldr	r3, [r3, #8]
 80091a8:	0e5b      	lsrs	r3, r3, #25
 80091aa:	b2db      	uxtb	r3, r3
 80091ac:	f003 0307 	and.w	r3, r3, #7
 80091b0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	689b      	ldr	r3, [r3, #8]
 80091b8:	0f5b      	lsrs	r3, r3, #29
 80091ba:	b2db      	uxtb	r3, r3
 80091bc:	f003 0307 	and.w	r3, r3, #7
 80091c0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80091c2:	7bbb      	ldrb	r3, [r7, #14]
 80091c4:	7b3a      	ldrb	r2, [r7, #12]
 80091c6:	4911      	ldr	r1, [pc, #68]	; (800920c <UARTEx_SetNbDataToProcess+0x94>)
 80091c8:	5c8a      	ldrb	r2, [r1, r2]
 80091ca:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80091ce:	7b3a      	ldrb	r2, [r7, #12]
 80091d0:	490f      	ldr	r1, [pc, #60]	; (8009210 <UARTEx_SetNbDataToProcess+0x98>)
 80091d2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80091d4:	fb93 f3f2 	sdiv	r3, r3, r2
 80091d8:	b29a      	uxth	r2, r3
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80091e0:	7bfb      	ldrb	r3, [r7, #15]
 80091e2:	7b7a      	ldrb	r2, [r7, #13]
 80091e4:	4909      	ldr	r1, [pc, #36]	; (800920c <UARTEx_SetNbDataToProcess+0x94>)
 80091e6:	5c8a      	ldrb	r2, [r1, r2]
 80091e8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80091ec:	7b7a      	ldrb	r2, [r7, #13]
 80091ee:	4908      	ldr	r1, [pc, #32]	; (8009210 <UARTEx_SetNbDataToProcess+0x98>)
 80091f0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80091f2:	fb93 f3f2 	sdiv	r3, r3, r2
 80091f6:	b29a      	uxth	r2, r3
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80091fe:	bf00      	nop
 8009200:	3714      	adds	r7, #20
 8009202:	46bd      	mov	sp, r7
 8009204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009208:	4770      	bx	lr
 800920a:	bf00      	nop
 800920c:	0800d9d8 	.word	0x0800d9d8
 8009210:	0800d9e0 	.word	0x0800d9e0

08009214 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 8009214:	b580      	push	{r7, lr}
 8009216:	b088      	sub	sp, #32
 8009218:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800921a:	2300      	movs	r3, #0
 800921c:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800921e:	f107 0308 	add.w	r3, r7, #8
 8009222:	2218      	movs	r2, #24
 8009224:	2100      	movs	r1, #0
 8009226:	4618      	mov	r0, r3
 8009228:	f001 f8d8 	bl	800a3dc <Osal_MemSet>
  rq.ogf = 0x3f;
 800922c:	233f      	movs	r3, #63	; 0x3f
 800922e:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 8009230:	2381      	movs	r3, #129	; 0x81
 8009232:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8009234:	1dfb      	adds	r3, r7, #7
 8009236:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8009238:	2301      	movs	r3, #1
 800923a:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800923c:	f107 0308 	add.w	r3, r7, #8
 8009240:	2100      	movs	r1, #0
 8009242:	4618      	mov	r0, r3
 8009244:	f001 fb54 	bl	800a8f0 <hci_send_req>
 8009248:	4603      	mov	r3, r0
 800924a:	2b00      	cmp	r3, #0
 800924c:	da01      	bge.n	8009252 <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 800924e:	23ff      	movs	r3, #255	; 0xff
 8009250:	e000      	b.n	8009254 <aci_gap_set_non_discoverable+0x40>
  return status;
 8009252:	79fb      	ldrb	r3, [r7, #7]
}
 8009254:	4618      	mov	r0, r3
 8009256:	3720      	adds	r7, #32
 8009258:	46bd      	mov	sp, r7
 800925a:	bd80      	pop	{r7, pc}

0800925c <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Slave_Conn_Interval_Min,
                                     uint16_t Slave_Conn_Interval_Max )
{
 800925c:	b5b0      	push	{r4, r5, r7, lr}
 800925e:	b0ce      	sub	sp, #312	; 0x138
 8009260:	af00      	add	r7, sp, #0
 8009262:	4605      	mov	r5, r0
 8009264:	460c      	mov	r4, r1
 8009266:	4610      	mov	r0, r2
 8009268:	4619      	mov	r1, r3
 800926a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800926e:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8009272:	462a      	mov	r2, r5
 8009274:	701a      	strb	r2, [r3, #0]
 8009276:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800927a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800927e:	4622      	mov	r2, r4
 8009280:	801a      	strh	r2, [r3, #0]
 8009282:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009286:	f5a3 739b 	sub.w	r3, r3, #310	; 0x136
 800928a:	4602      	mov	r2, r0
 800928c:	801a      	strh	r2, [r3, #0]
 800928e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009292:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8009296:	460a      	mov	r2, r1
 8009298:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 800929a:	f107 0310 	add.w	r3, r7, #16
 800929e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 80092a2:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 80092a6:	3308      	adds	r3, #8
 80092a8:	f107 0210 	add.w	r2, r7, #16
 80092ac:	4413      	add	r3, r2
 80092ae:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 80092b2:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 80092b6:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 80092ba:	4413      	add	r3, r2
 80092bc:	3309      	adds	r3, #9
 80092be:	f107 0210 	add.w	r2, r7, #16
 80092c2:	4413      	add	r3, r2
 80092c4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80092c8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80092cc:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80092d0:	2200      	movs	r2, #0
 80092d2:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80092d4:	2300      	movs	r3, #0
 80092d6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Type = Advertising_Type;
 80092da:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80092de:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80092e2:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 80092e6:	7812      	ldrb	r2, [r2, #0]
 80092e8:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80092ea:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80092ee:	3301      	adds	r3, #1
 80092f0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 80092f4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80092f8:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80092fc:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 8009300:	8812      	ldrh	r2, [r2, #0]
 8009302:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 8009306:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800930a:	3302      	adds	r3, #2
 800930c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 8009310:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009314:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8009318:	f5a2 729b 	sub.w	r2, r2, #310	; 0x136
 800931c:	8812      	ldrh	r2, [r2, #0]
 800931e:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 8009322:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009326:	3302      	adds	r3, #2
 8009328:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 800932c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009330:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8009334:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8009338:	7812      	ldrb	r2, [r2, #0]
 800933a:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800933c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009340:	3301      	adds	r3, #1
 8009342:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 8009346:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800934a:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 800934e:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8009350:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009354:	3301      	adds	r3, #1
 8009356:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 800935a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800935e:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8009362:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 8009364:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009368:	3301      	adds	r3, #1
 800936a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 800936e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009372:	3308      	adds	r3, #8
 8009374:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8009378:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 800937c:	4618      	mov	r0, r3
 800937e:	f001 f81d 	bl	800a3bc <Osal_MemCpy>
    index_input += Local_Name_Length;
 8009382:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8009386:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800938a:	4413      	add	r3, r2
 800938c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 8009390:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009394:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8009398:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800939a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800939e:	3301      	adds	r3, #1
 80093a0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 80093a4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80093a8:	3301      	adds	r3, #1
 80093aa:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 80093ae:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 80093b2:	4618      	mov	r0, r3
 80093b4:	f001 f802 	bl	800a3bc <Osal_MemCpy>
    index_input += Service_Uuid_length;
 80093b8:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 80093bc:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80093c0:	4413      	add	r3, r2
 80093c2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Min = Slave_Conn_Interval_Min;
 80093c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80093ca:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 80093ce:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 80093d0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80093d4:	3302      	adds	r3, #2
 80093d6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Max = Slave_Conn_Interval_Max;
 80093da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80093de:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 80093e2:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 80093e4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80093e8:	3302      	adds	r3, #2
 80093ea:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80093ee:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80093f2:	2218      	movs	r2, #24
 80093f4:	2100      	movs	r1, #0
 80093f6:	4618      	mov	r0, r3
 80093f8:	f000 fff0 	bl	800a3dc <Osal_MemSet>
  rq.ogf = 0x3f;
 80093fc:	233f      	movs	r3, #63	; 0x3f
 80093fe:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 8009402:	2383      	movs	r3, #131	; 0x83
 8009404:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8009408:	f107 0310 	add.w	r3, r7, #16
 800940c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8009410:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009414:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8009418:	f107 030f 	add.w	r3, r7, #15
 800941c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8009420:	2301      	movs	r3, #1
 8009422:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009426:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800942a:	2100      	movs	r1, #0
 800942c:	4618      	mov	r0, r3
 800942e:	f001 fa5f 	bl	800a8f0 <hci_send_req>
 8009432:	4603      	mov	r3, r0
 8009434:	2b00      	cmp	r3, #0
 8009436:	da01      	bge.n	800943c <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 8009438:	23ff      	movs	r3, #255	; 0xff
 800943a:	e004      	b.n	8009446 <aci_gap_set_discoverable+0x1ea>
  return status;
 800943c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009440:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8009444:	781b      	ldrb	r3, [r3, #0]
}
 8009446:	4618      	mov	r0, r3
 8009448:	f507 779c 	add.w	r7, r7, #312	; 0x138
 800944c:	46bd      	mov	sp, r7
 800944e:	bdb0      	pop	{r4, r5, r7, pc}

08009450 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 8009450:	b580      	push	{r7, lr}
 8009452:	b0cc      	sub	sp, #304	; 0x130
 8009454:	af00      	add	r7, sp, #0
 8009456:	4602      	mov	r2, r0
 8009458:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800945c:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8009460:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 8009462:	f107 0310 	add.w	r3, r7, #16
 8009466:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800946a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800946e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009472:	2200      	movs	r2, #0
 8009474:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009476:	2300      	movs	r3, #0
 8009478:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->IO_Capability = IO_Capability;
 800947c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009480:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009484:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8009488:	7812      	ldrb	r2, [r2, #0]
 800948a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800948c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009490:	3301      	adds	r3, #1
 8009492:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009496:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800949a:	2218      	movs	r2, #24
 800949c:	2100      	movs	r1, #0
 800949e:	4618      	mov	r0, r3
 80094a0:	f000 ff9c 	bl	800a3dc <Osal_MemSet>
  rq.ogf = 0x3f;
 80094a4:	233f      	movs	r3, #63	; 0x3f
 80094a6:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x085;
 80094aa:	2385      	movs	r3, #133	; 0x85
 80094ac:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80094b0:	f107 0310 	add.w	r3, r7, #16
 80094b4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80094b8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80094bc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80094c0:	f107 030f 	add.w	r3, r7, #15
 80094c4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80094c8:	2301      	movs	r3, #1
 80094ca:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80094ce:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80094d2:	2100      	movs	r1, #0
 80094d4:	4618      	mov	r0, r3
 80094d6:	f001 fa0b 	bl	800a8f0 <hci_send_req>
 80094da:	4603      	mov	r3, r0
 80094dc:	2b00      	cmp	r3, #0
 80094de:	da01      	bge.n	80094e4 <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 80094e0:	23ff      	movs	r3, #255	; 0xff
 80094e2:	e004      	b.n	80094ee <aci_gap_set_io_capability+0x9e>
  return status;
 80094e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80094e8:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80094ec:	781b      	ldrb	r3, [r3, #0]
}
 80094ee:	4618      	mov	r0, r3
 80094f0:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80094f4:	46bd      	mov	sp, r7
 80094f6:	bd80      	pop	{r7, pc}

080094f8 <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 80094f8:	b5b0      	push	{r4, r5, r7, lr}
 80094fa:	b0cc      	sub	sp, #304	; 0x130
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	4605      	mov	r5, r0
 8009500:	460c      	mov	r4, r1
 8009502:	4610      	mov	r0, r2
 8009504:	4619      	mov	r1, r3
 8009506:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800950a:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800950e:	462a      	mov	r2, r5
 8009510:	701a      	strb	r2, [r3, #0]
 8009512:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009516:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800951a:	4622      	mov	r2, r4
 800951c:	701a      	strb	r2, [r3, #0]
 800951e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009522:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8009526:	4602      	mov	r2, r0
 8009528:	701a      	strb	r2, [r3, #0]
 800952a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800952e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009532:	460a      	mov	r2, r1
 8009534:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 8009536:	f107 0310 	add.w	r3, r7, #16
 800953a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800953e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009542:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009546:	2200      	movs	r2, #0
 8009548:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800954a:	2300      	movs	r3, #0
 800954c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 8009550:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009554:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009558:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800955c:	7812      	ldrb	r2, [r2, #0]
 800955e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8009560:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009564:	3301      	adds	r3, #1
 8009566:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->MITM_Mode = MITM_Mode;
 800956a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800956e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009572:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8009576:	7812      	ldrb	r2, [r2, #0]
 8009578:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800957a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800957e:	3301      	adds	r3, #1
 8009580:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->SC_Support = SC_Support;
 8009584:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009588:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800958c:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8009590:	7812      	ldrb	r2, [r2, #0]
 8009592:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8009594:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009598:	3301      	adds	r3, #1
 800959a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 800959e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80095a2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80095a6:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80095aa:	7812      	ldrb	r2, [r2, #0]
 80095ac:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 80095ae:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80095b2:	3301      	adds	r3, #1
 80095b4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 80095b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80095bc:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 80095c0:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 80095c2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80095c6:	3301      	adds	r3, #1
 80095c8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 80095cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80095d0:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 80095d4:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 80095d6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80095da:	3301      	adds	r3, #1
 80095dc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 80095e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80095e4:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 80095e8:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 80095ea:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80095ee:	3301      	adds	r3, #1
 80095f0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 80095f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80095f8:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80095fc:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 8009600:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009604:	3304      	adds	r3, #4
 8009606:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 800960a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800960e:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8009612:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 8009614:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009618:	3301      	adds	r3, #1
 800961a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800961e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009622:	2218      	movs	r2, #24
 8009624:	2100      	movs	r1, #0
 8009626:	4618      	mov	r0, r3
 8009628:	f000 fed8 	bl	800a3dc <Osal_MemSet>
  rq.ogf = 0x3f;
 800962c:	233f      	movs	r3, #63	; 0x3f
 800962e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 8009632:	2386      	movs	r3, #134	; 0x86
 8009634:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8009638:	f107 0310 	add.w	r3, r7, #16
 800963c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8009640:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009644:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8009648:	f107 030f 	add.w	r3, r7, #15
 800964c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8009650:	2301      	movs	r3, #1
 8009652:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009656:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800965a:	2100      	movs	r1, #0
 800965c:	4618      	mov	r0, r3
 800965e:	f001 f947 	bl	800a8f0 <hci_send_req>
 8009662:	4603      	mov	r3, r0
 8009664:	2b00      	cmp	r3, #0
 8009666:	da01      	bge.n	800966c <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 8009668:	23ff      	movs	r3, #255	; 0xff
 800966a:	e004      	b.n	8009676 <aci_gap_set_authentication_requirement+0x17e>
  return status;
 800966c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009670:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009674:	781b      	ldrb	r3, [r3, #0]
}
 8009676:	4618      	mov	r0, r3
 8009678:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800967c:	46bd      	mov	sp, r7
 800967e:	bdb0      	pop	{r4, r5, r7, pc}

08009680 <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 8009680:	b580      	push	{r7, lr}
 8009682:	b0cc      	sub	sp, #304	; 0x130
 8009684:	af00      	add	r7, sp, #0
 8009686:	4602      	mov	r2, r0
 8009688:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800968c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009690:	6019      	str	r1, [r3, #0]
 8009692:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009696:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800969a:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 800969c:	f107 0310 	add.w	r3, r7, #16
 80096a0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80096a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80096a8:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80096ac:	2200      	movs	r2, #0
 80096ae:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80096b0:	2300      	movs	r3, #0
 80096b2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 80096b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80096ba:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80096be:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80096c2:	8812      	ldrh	r2, [r2, #0]
 80096c4:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80096c6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80096ca:	3302      	adds	r3, #2
 80096cc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Pass_Key = Pass_Key;
 80096d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80096d4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80096d8:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 80096dc:	6812      	ldr	r2, [r2, #0]
 80096de:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 80096e2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80096e6:	3304      	adds	r3, #4
 80096e8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80096ec:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80096f0:	2218      	movs	r2, #24
 80096f2:	2100      	movs	r1, #0
 80096f4:	4618      	mov	r0, r3
 80096f6:	f000 fe71 	bl	800a3dc <Osal_MemSet>
  rq.ogf = 0x3f;
 80096fa:	233f      	movs	r3, #63	; 0x3f
 80096fc:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x088;
 8009700:	2388      	movs	r3, #136	; 0x88
 8009702:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8009706:	f107 0310 	add.w	r3, r7, #16
 800970a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800970e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009712:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8009716:	f107 030f 	add.w	r3, r7, #15
 800971a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800971e:	2301      	movs	r3, #1
 8009720:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009724:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009728:	2100      	movs	r1, #0
 800972a:	4618      	mov	r0, r3
 800972c:	f001 f8e0 	bl	800a8f0 <hci_send_req>
 8009730:	4603      	mov	r3, r0
 8009732:	2b00      	cmp	r3, #0
 8009734:	da01      	bge.n	800973a <aci_gap_pass_key_resp+0xba>
    return BLE_STATUS_TIMEOUT;
 8009736:	23ff      	movs	r3, #255	; 0xff
 8009738:	e004      	b.n	8009744 <aci_gap_pass_key_resp+0xc4>
  return status;
 800973a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800973e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009742:	781b      	ldrb	r3, [r3, #0]
}
 8009744:	4618      	mov	r0, r3
 8009746:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800974a:	46bd      	mov	sp, r7
 800974c:	bd80      	pop	{r7, pc}

0800974e <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 800974e:	b590      	push	{r4, r7, lr}
 8009750:	b0cd      	sub	sp, #308	; 0x134
 8009752:	af00      	add	r7, sp, #0
 8009754:	4604      	mov	r4, r0
 8009756:	4608      	mov	r0, r1
 8009758:	4611      	mov	r1, r2
 800975a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800975e:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 8009762:	6013      	str	r3, [r2, #0]
 8009764:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009768:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800976c:	4622      	mov	r2, r4
 800976e:	701a      	strb	r2, [r3, #0]
 8009770:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009774:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8009778:	4602      	mov	r2, r0
 800977a:	701a      	strb	r2, [r3, #0]
 800977c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009780:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8009784:	460a      	mov	r2, r1
 8009786:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 8009788:	f107 0310 	add.w	r3, r7, #16
 800978c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8009790:	f107 0308 	add.w	r3, r7, #8
 8009794:	2207      	movs	r2, #7
 8009796:	2100      	movs	r1, #0
 8009798:	4618      	mov	r0, r3
 800979a:	f000 fe1f 	bl	800a3dc <Osal_MemSet>
  int index_input = 0;
 800979e:	2300      	movs	r3, #0
 80097a0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = Role;
 80097a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80097a8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80097ac:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 80097b0:	7812      	ldrb	r2, [r2, #0]
 80097b2:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80097b4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80097b8:	3301      	adds	r3, #1
 80097ba:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = privacy_enabled;
 80097be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80097c2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80097c6:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80097ca:	7812      	ldrb	r2, [r2, #0]
 80097cc:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80097ce:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80097d2:	3301      	adds	r3, #1
 80097d4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = device_name_char_len;
 80097d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80097dc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80097e0:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 80097e4:	7812      	ldrb	r2, [r2, #0]
 80097e6:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80097e8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80097ec:	3301      	adds	r3, #1
 80097ee:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80097f2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80097f6:	2218      	movs	r2, #24
 80097f8:	2100      	movs	r1, #0
 80097fa:	4618      	mov	r0, r3
 80097fc:	f000 fdee 	bl	800a3dc <Osal_MemSet>
  rq.ogf = 0x3f;
 8009800:	233f      	movs	r3, #63	; 0x3f
 8009802:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 8009806:	238a      	movs	r3, #138	; 0x8a
 8009808:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800980c:	f107 0310 	add.w	r3, r7, #16
 8009810:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8009814:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009818:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 800981c:	f107 0308 	add.w	r3, r7, #8
 8009820:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8009824:	2307      	movs	r3, #7
 8009826:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800982a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800982e:	2100      	movs	r1, #0
 8009830:	4618      	mov	r0, r3
 8009832:	f001 f85d 	bl	800a8f0 <hci_send_req>
 8009836:	4603      	mov	r3, r0
 8009838:	2b00      	cmp	r3, #0
 800983a:	da01      	bge.n	8009840 <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 800983c:	23ff      	movs	r3, #255	; 0xff
 800983e:	e02e      	b.n	800989e <aci_gap_init+0x150>
  if ( resp.Status )
 8009840:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009844:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8009848:	781b      	ldrb	r3, [r3, #0]
 800984a:	2b00      	cmp	r3, #0
 800984c:	d005      	beq.n	800985a <aci_gap_init+0x10c>
    return resp.Status;
 800984e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009852:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8009856:	781b      	ldrb	r3, [r3, #0]
 8009858:	e021      	b.n	800989e <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 800985a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800985e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8009862:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8009866:	b29a      	uxth	r2, r3
 8009868:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800986c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 8009874:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009878:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800987c:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8009880:	b29a      	uxth	r2, r3
 8009882:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8009886:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 8009888:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800988c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8009890:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8009894:	b29a      	uxth	r2, r3
 8009896:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800989a:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800989c:	2300      	movs	r3, #0
}
 800989e:	4618      	mov	r0, r3
 80098a0:	f507 779a 	add.w	r7, r7, #308	; 0x134
 80098a4:	46bd      	mov	sp, r7
 80098a6:	bd90      	pop	{r4, r7, pc}

080098a8 <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 80098a8:	b580      	push	{r7, lr}
 80098aa:	b0cc      	sub	sp, #304	; 0x130
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	4602      	mov	r2, r0
 80098b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80098b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80098b8:	6019      	str	r1, [r3, #0]
 80098ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80098be:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80098c2:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 80098c4:	f107 0310 	add.w	r3, r7, #16
 80098c8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80098cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80098d0:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80098d4:	2200      	movs	r2, #0
 80098d6:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80098d8:	2300      	movs	r3, #0
 80098da:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->AdvDataLen = AdvDataLen;
 80098de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80098e2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80098e6:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 80098ea:	7812      	ldrb	r2, [r2, #0]
 80098ec:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80098ee:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80098f2:	3301      	adds	r3, #1
 80098f4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 80098f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80098fc:	1c58      	adds	r0, r3, #1
 80098fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009902:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8009906:	781a      	ldrb	r2, [r3, #0]
 8009908:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800990c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009910:	6819      	ldr	r1, [r3, #0]
 8009912:	f000 fd53 	bl	800a3bc <Osal_MemCpy>
  index_input += AdvDataLen;
 8009916:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800991a:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800991e:	781b      	ldrb	r3, [r3, #0]
 8009920:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8009924:	4413      	add	r3, r2
 8009926:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800992a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800992e:	2218      	movs	r2, #24
 8009930:	2100      	movs	r1, #0
 8009932:	4618      	mov	r0, r3
 8009934:	f000 fd52 	bl	800a3dc <Osal_MemSet>
  rq.ogf = 0x3f;
 8009938:	233f      	movs	r3, #63	; 0x3f
 800993a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08e;
 800993e:	238e      	movs	r3, #142	; 0x8e
 8009940:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8009944:	f107 0310 	add.w	r3, r7, #16
 8009948:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800994c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009950:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8009954:	f107 030f 	add.w	r3, r7, #15
 8009958:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800995c:	2301      	movs	r3, #1
 800995e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009962:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009966:	2100      	movs	r1, #0
 8009968:	4618      	mov	r0, r3
 800996a:	f000 ffc1 	bl	800a8f0 <hci_send_req>
 800996e:	4603      	mov	r3, r0
 8009970:	2b00      	cmp	r3, #0
 8009972:	da01      	bge.n	8009978 <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 8009974:	23ff      	movs	r3, #255	; 0xff
 8009976:	e004      	b.n	8009982 <aci_gap_update_adv_data+0xda>
  return status;
 8009978:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800997c:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009980:	781b      	ldrb	r3, [r3, #0]
}
 8009982:	4618      	mov	r0, r3
 8009984:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8009988:	46bd      	mov	sp, r7
 800998a:	bd80      	pop	{r7, pc}

0800998c <aci_gap_configure_whitelist>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_whitelist( void )
{
 800998c:	b580      	push	{r7, lr}
 800998e:	b088      	sub	sp, #32
 8009990:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8009992:	2300      	movs	r3, #0
 8009994:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009996:	f107 0308 	add.w	r3, r7, #8
 800999a:	2218      	movs	r2, #24
 800999c:	2100      	movs	r1, #0
 800999e:	4618      	mov	r0, r3
 80099a0:	f000 fd1c 	bl	800a3dc <Osal_MemSet>
  rq.ogf = 0x3f;
 80099a4:	233f      	movs	r3, #63	; 0x3f
 80099a6:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 80099a8:	2392      	movs	r3, #146	; 0x92
 80099aa:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80099ac:	1dfb      	adds	r3, r7, #7
 80099ae:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80099b0:	2301      	movs	r3, #1
 80099b2:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80099b4:	f107 0308 	add.w	r3, r7, #8
 80099b8:	2100      	movs	r1, #0
 80099ba:	4618      	mov	r0, r3
 80099bc:	f000 ff98 	bl	800a8f0 <hci_send_req>
 80099c0:	4603      	mov	r3, r0
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	da01      	bge.n	80099ca <aci_gap_configure_whitelist+0x3e>
    return BLE_STATUS_TIMEOUT;
 80099c6:	23ff      	movs	r3, #255	; 0xff
 80099c8:	e000      	b.n	80099cc <aci_gap_configure_whitelist+0x40>
  return status;
 80099ca:	79fb      	ldrb	r3, [r7, #7]
}
 80099cc:	4618      	mov	r0, r3
 80099ce:	3720      	adds	r7, #32
 80099d0:	46bd      	mov	sp, r7
 80099d2:	bd80      	pop	{r7, pc}

080099d4 <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 80099d4:	b580      	push	{r7, lr}
 80099d6:	b0cc      	sub	sp, #304	; 0x130
 80099d8:	af00      	add	r7, sp, #0
 80099da:	4602      	mov	r2, r0
 80099dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80099e0:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80099e4:	801a      	strh	r2, [r3, #0]
 80099e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80099ea:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 80099ee:	460a      	mov	r2, r1
 80099f0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 80099f2:	f107 0310 	add.w	r3, r7, #16
 80099f6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80099fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80099fe:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009a02:	2200      	movs	r2, #0
 8009a04:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009a06:	2300      	movs	r3, #0
 8009a08:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 8009a0c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009a10:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009a14:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8009a18:	8812      	ldrh	r2, [r2, #0]
 8009a1a:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8009a1c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009a20:	3302      	adds	r3, #2
 8009a22:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 8009a26:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009a2a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009a2e:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8009a32:	7812      	ldrb	r2, [r2, #0]
 8009a34:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8009a36:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009a3a:	3301      	adds	r3, #1
 8009a3c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009a40:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009a44:	2218      	movs	r2, #24
 8009a46:	2100      	movs	r1, #0
 8009a48:	4618      	mov	r0, r3
 8009a4a:	f000 fcc7 	bl	800a3dc <Osal_MemSet>
  rq.ogf = 0x3f;
 8009a4e:	233f      	movs	r3, #63	; 0x3f
 8009a50:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x0a5;
 8009a54:	23a5      	movs	r3, #165	; 0xa5
 8009a56:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8009a5a:	f107 0310 	add.w	r3, r7, #16
 8009a5e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8009a62:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009a66:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8009a6a:	f107 030f 	add.w	r3, r7, #15
 8009a6e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8009a72:	2301      	movs	r3, #1
 8009a74:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009a78:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009a7c:	2100      	movs	r1, #0
 8009a7e:	4618      	mov	r0, r3
 8009a80:	f000 ff36 	bl	800a8f0 <hci_send_req>
 8009a84:	4603      	mov	r3, r0
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	da01      	bge.n	8009a8e <aci_gap_numeric_comparison_value_confirm_yesno+0xba>
    return BLE_STATUS_TIMEOUT;
 8009a8a:	23ff      	movs	r3, #255	; 0xff
 8009a8c:	e004      	b.n	8009a98 <aci_gap_numeric_comparison_value_confirm_yesno+0xc4>
  return status;
 8009a8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009a92:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009a96:	781b      	ldrb	r3, [r3, #0]
}
 8009a98:	4618      	mov	r0, r3
 8009a9a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8009a9e:	46bd      	mov	sp, r7
 8009aa0:	bd80      	pop	{r7, pc}

08009aa2 <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 8009aa2:	b580      	push	{r7, lr}
 8009aa4:	b088      	sub	sp, #32
 8009aa6:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8009aa8:	2300      	movs	r3, #0
 8009aaa:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009aac:	f107 0308 	add.w	r3, r7, #8
 8009ab0:	2218      	movs	r2, #24
 8009ab2:	2100      	movs	r1, #0
 8009ab4:	4618      	mov	r0, r3
 8009ab6:	f000 fc91 	bl	800a3dc <Osal_MemSet>
  rq.ogf = 0x3f;
 8009aba:	233f      	movs	r3, #63	; 0x3f
 8009abc:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 8009abe:	f240 1301 	movw	r3, #257	; 0x101
 8009ac2:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8009ac4:	1dfb      	adds	r3, r7, #7
 8009ac6:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8009ac8:	2301      	movs	r3, #1
 8009aca:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009acc:	f107 0308 	add.w	r3, r7, #8
 8009ad0:	2100      	movs	r1, #0
 8009ad2:	4618      	mov	r0, r3
 8009ad4:	f000 ff0c 	bl	800a8f0 <hci_send_req>
 8009ad8:	4603      	mov	r3, r0
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	da01      	bge.n	8009ae2 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 8009ade:	23ff      	movs	r3, #255	; 0xff
 8009ae0:	e000      	b.n	8009ae4 <aci_gatt_init+0x42>
  return status;
 8009ae2:	79fb      	ldrb	r3, [r7, #7]
}
 8009ae4:	4618      	mov	r0, r3
 8009ae6:	3720      	adds	r7, #32
 8009ae8:	46bd      	mov	sp, r7
 8009aea:	bd80      	pop	{r7, pc}

08009aec <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 8009aec:	b590      	push	{r4, r7, lr}
 8009aee:	b0cf      	sub	sp, #316	; 0x13c
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	4604      	mov	r4, r0
 8009af4:	f507 709c 	add.w	r0, r7, #312	; 0x138
 8009af8:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
 8009afc:	6001      	str	r1, [r0, #0]
 8009afe:	4610      	mov	r0, r2
 8009b00:	4619      	mov	r1, r3
 8009b02:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009b06:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8009b0a:	4622      	mov	r2, r4
 8009b0c:	701a      	strb	r2, [r3, #0]
 8009b0e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009b12:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8009b16:	4602      	mov	r2, r0
 8009b18:	701a      	strb	r2, [r3, #0]
 8009b1a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009b1e:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8009b22:	460a      	mov	r2, r1
 8009b24:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 8009b26:	f107 0310 	add.w	r3, r7, #16
 8009b2a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 8009b2e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009b32:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8009b36:	781b      	ldrb	r3, [r3, #0]
 8009b38:	2b01      	cmp	r3, #1
 8009b3a:	d00a      	beq.n	8009b52 <aci_gatt_add_service+0x66>
 8009b3c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009b40:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8009b44:	781b      	ldrb	r3, [r3, #0]
 8009b46:	2b02      	cmp	r3, #2
 8009b48:	d101      	bne.n	8009b4e <aci_gatt_add_service+0x62>
 8009b4a:	2311      	movs	r3, #17
 8009b4c:	e002      	b.n	8009b54 <aci_gatt_add_service+0x68>
 8009b4e:	2301      	movs	r3, #1
 8009b50:	e000      	b.n	8009b54 <aci_gatt_add_service+0x68>
 8009b52:	2303      	movs	r3, #3
 8009b54:	f107 0210 	add.w	r2, r7, #16
 8009b58:	4413      	add	r3, r2
 8009b5a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8009b5e:	f107 030c 	add.w	r3, r7, #12
 8009b62:	2203      	movs	r2, #3
 8009b64:	2100      	movs	r1, #0
 8009b66:	4618      	mov	r0, r3
 8009b68:	f000 fc38 	bl	800a3dc <Osal_MemSet>
  int index_input = 0;
 8009b6c:	2300      	movs	r3, #0
 8009b6e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 8009b72:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009b76:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8009b7a:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 8009b7e:	7812      	ldrb	r2, [r2, #0]
 8009b80:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8009b82:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009b86:	3301      	adds	r3, #1
 8009b88:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 8009b8c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009b90:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8009b94:	781b      	ldrb	r3, [r3, #0]
 8009b96:	2b01      	cmp	r3, #1
 8009b98:	d002      	beq.n	8009ba0 <aci_gatt_add_service+0xb4>
 8009b9a:	2b02      	cmp	r3, #2
 8009b9c:	d004      	beq.n	8009ba8 <aci_gatt_add_service+0xbc>
 8009b9e:	e007      	b.n	8009bb0 <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 8009ba0:	2302      	movs	r3, #2
 8009ba2:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8009ba6:	e005      	b.n	8009bb4 <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 8009ba8:	2310      	movs	r3, #16
 8009baa:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8009bae:	e001      	b.n	8009bb4 <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 8009bb0:	2397      	movs	r3, #151	; 0x97
 8009bb2:	e06c      	b.n	8009c8e <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 8009bb4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009bb8:	1c58      	adds	r0, r3, #1
 8009bba:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 8009bbe:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009bc2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8009bc6:	6819      	ldr	r1, [r3, #0]
 8009bc8:	f000 fbf8 	bl	800a3bc <Osal_MemCpy>
    index_input += size;
 8009bcc:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8009bd0:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8009bd4:	4413      	add	r3, r2
 8009bd6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Type = Service_Type;
 8009bda:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009bde:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8009be2:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8009be6:	7812      	ldrb	r2, [r2, #0]
 8009be8:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8009bea:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009bee:	3301      	adds	r3, #1
 8009bf0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 8009bf4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009bf8:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8009bfc:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 8009c00:	7812      	ldrb	r2, [r2, #0]
 8009c02:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 8009c04:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009c08:	3301      	adds	r3, #1
 8009c0a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009c0e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009c12:	2218      	movs	r2, #24
 8009c14:	2100      	movs	r1, #0
 8009c16:	4618      	mov	r0, r3
 8009c18:	f000 fbe0 	bl	800a3dc <Osal_MemSet>
  rq.ogf = 0x3f;
 8009c1c:	233f      	movs	r3, #63	; 0x3f
 8009c1e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 8009c22:	f44f 7381 	mov.w	r3, #258	; 0x102
 8009c26:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8009c2a:	f107 0310 	add.w	r3, r7, #16
 8009c2e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8009c32:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009c36:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8009c3a:	f107 030c 	add.w	r3, r7, #12
 8009c3e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8009c42:	2303      	movs	r3, #3
 8009c44:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009c48:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009c4c:	2100      	movs	r1, #0
 8009c4e:	4618      	mov	r0, r3
 8009c50:	f000 fe4e 	bl	800a8f0 <hci_send_req>
 8009c54:	4603      	mov	r3, r0
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	da01      	bge.n	8009c5e <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 8009c5a:	23ff      	movs	r3, #255	; 0xff
 8009c5c:	e017      	b.n	8009c8e <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 8009c5e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009c62:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009c66:	781b      	ldrb	r3, [r3, #0]
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d005      	beq.n	8009c78 <aci_gatt_add_service+0x18c>
    return resp.Status;
 8009c6c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009c70:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009c74:	781b      	ldrb	r3, [r3, #0]
 8009c76:	e00a      	b.n	8009c8e <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 8009c78:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009c7c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009c80:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8009c84:	b29a      	uxth	r2, r3
 8009c86:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8009c8a:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8009c8c:	2300      	movs	r3, #0
}
 8009c8e:	4618      	mov	r0, r3
 8009c90:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8009c94:	46bd      	mov	sp, r7
 8009c96:	bd90      	pop	{r4, r7, pc}

08009c98 <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 8009c98:	b590      	push	{r4, r7, lr}
 8009c9a:	b0d1      	sub	sp, #324	; 0x144
 8009c9c:	af00      	add	r7, sp, #0
 8009c9e:	4604      	mov	r4, r0
 8009ca0:	4608      	mov	r0, r1
 8009ca2:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 8009ca6:	f5a1 719c 	sub.w	r1, r1, #312	; 0x138
 8009caa:	600a      	str	r2, [r1, #0]
 8009cac:	4619      	mov	r1, r3
 8009cae:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8009cb2:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8009cb6:	4622      	mov	r2, r4
 8009cb8:	801a      	strh	r2, [r3, #0]
 8009cba:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8009cbe:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8009cc2:	4602      	mov	r2, r0
 8009cc4:	701a      	strb	r2, [r3, #0]
 8009cc6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8009cca:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 8009cce:	460a      	mov	r2, r1
 8009cd0:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 8009cd2:	f107 0318 	add.w	r3, r7, #24
 8009cd6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 8009cda:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8009cde:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8009ce2:	781b      	ldrb	r3, [r3, #0]
 8009ce4:	2b01      	cmp	r3, #1
 8009ce6:	d00a      	beq.n	8009cfe <aci_gatt_add_char+0x66>
 8009ce8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8009cec:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8009cf0:	781b      	ldrb	r3, [r3, #0]
 8009cf2:	2b02      	cmp	r3, #2
 8009cf4:	d101      	bne.n	8009cfa <aci_gatt_add_char+0x62>
 8009cf6:	2313      	movs	r3, #19
 8009cf8:	e002      	b.n	8009d00 <aci_gatt_add_char+0x68>
 8009cfa:	2303      	movs	r3, #3
 8009cfc:	e000      	b.n	8009d00 <aci_gatt_add_char+0x68>
 8009cfe:	2305      	movs	r3, #5
 8009d00:	f107 0218 	add.w	r2, r7, #24
 8009d04:	4413      	add	r3, r2
 8009d06:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8009d0a:	f107 0314 	add.w	r3, r7, #20
 8009d0e:	2203      	movs	r2, #3
 8009d10:	2100      	movs	r1, #0
 8009d12:	4618      	mov	r0, r3
 8009d14:	f000 fb62 	bl	800a3dc <Osal_MemSet>
  int index_input = 0;
 8009d18:	2300      	movs	r3, #0
 8009d1a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Service_Handle = Service_Handle;
 8009d1e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8009d22:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8009d26:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8009d2a:	8812      	ldrh	r2, [r2, #0]
 8009d2c:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8009d2e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009d32:	3302      	adds	r3, #2
 8009d34:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 8009d38:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8009d3c:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8009d40:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 8009d44:	7812      	ldrb	r2, [r2, #0]
 8009d46:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8009d48:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009d4c:	3301      	adds	r3, #1
 8009d4e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 8009d52:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8009d56:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8009d5a:	781b      	ldrb	r3, [r3, #0]
 8009d5c:	2b01      	cmp	r3, #1
 8009d5e:	d002      	beq.n	8009d66 <aci_gatt_add_char+0xce>
 8009d60:	2b02      	cmp	r3, #2
 8009d62:	d004      	beq.n	8009d6e <aci_gatt_add_char+0xd6>
 8009d64:	e007      	b.n	8009d76 <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 8009d66:	2302      	movs	r3, #2
 8009d68:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 8009d6c:	e005      	b.n	8009d7a <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 8009d6e:	2310      	movs	r3, #16
 8009d70:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 8009d74:	e001      	b.n	8009d7a <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 8009d76:	2397      	movs	r3, #151	; 0x97
 8009d78:	e091      	b.n	8009e9e <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 8009d7a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8009d7e:	1cd8      	adds	r0, r3, #3
 8009d80:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 8009d84:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8009d88:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8009d8c:	6819      	ldr	r1, [r3, #0]
 8009d8e:	f000 fb15 	bl	800a3bc <Osal_MemCpy>
    index_input += size;
 8009d92:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8009d96:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8009d9a:	4413      	add	r3, r2
 8009d9c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 8009da0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009da4:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8009da8:	f5a2 729d 	sub.w	r2, r2, #314	; 0x13a
 8009dac:	8812      	ldrh	r2, [r2, #0]
 8009dae:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8009db0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009db4:	3302      	adds	r3, #2
 8009db6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Properties = Char_Properties;
 8009dba:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009dbe:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8009dc2:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 8009dc4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009dc8:	3301      	adds	r3, #1
 8009dca:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 8009dce:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009dd2:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8009dd6:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 8009dd8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009ddc:	3301      	adds	r3, #1
 8009dde:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 8009de2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009de6:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 8009dea:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 8009dec:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009df0:	3301      	adds	r3, #1
 8009df2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 8009df6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009dfa:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 8009dfe:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 8009e00:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009e04:	3301      	adds	r3, #1
 8009e06:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Is_Variable = Is_Variable;
 8009e0a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009e0e:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 8009e12:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 8009e14:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009e18:	3301      	adds	r3, #1
 8009e1a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009e1e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8009e22:	2218      	movs	r2, #24
 8009e24:	2100      	movs	r1, #0
 8009e26:	4618      	mov	r0, r3
 8009e28:	f000 fad8 	bl	800a3dc <Osal_MemSet>
  rq.ogf = 0x3f;
 8009e2c:	233f      	movs	r3, #63	; 0x3f
 8009e2e:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x104;
 8009e32:	f44f 7382 	mov.w	r3, #260	; 0x104
 8009e36:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 8009e3a:	f107 0318 	add.w	r3, r7, #24
 8009e3e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 8009e42:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009e46:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 8009e4a:	f107 0314 	add.w	r3, r7, #20
 8009e4e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 8009e52:	2303      	movs	r3, #3
 8009e54:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009e58:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8009e5c:	2100      	movs	r1, #0
 8009e5e:	4618      	mov	r0, r3
 8009e60:	f000 fd46 	bl	800a8f0 <hci_send_req>
 8009e64:	4603      	mov	r3, r0
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	da01      	bge.n	8009e6e <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 8009e6a:	23ff      	movs	r3, #255	; 0xff
 8009e6c:	e017      	b.n	8009e9e <aci_gatt_add_char+0x206>
  if ( resp.Status )
 8009e6e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8009e72:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009e76:	781b      	ldrb	r3, [r3, #0]
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d005      	beq.n	8009e88 <aci_gatt_add_char+0x1f0>
    return resp.Status;
 8009e7c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8009e80:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009e84:	781b      	ldrb	r3, [r3, #0]
 8009e86:	e00a      	b.n	8009e9e <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 8009e88:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8009e8c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009e90:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8009e94:	b29a      	uxth	r2, r3
 8009e96:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8009e9a:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8009e9c:	2300      	movs	r3, #0
}
 8009e9e:	4618      	mov	r0, r3
 8009ea0:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 8009ea4:	46bd      	mov	sp, r7
 8009ea6:	bd90      	pop	{r4, r7, pc}

08009ea8 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 8009ea8:	b5b0      	push	{r4, r5, r7, lr}
 8009eaa:	b0cc      	sub	sp, #304	; 0x130
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	4605      	mov	r5, r0
 8009eb0:	460c      	mov	r4, r1
 8009eb2:	4610      	mov	r0, r2
 8009eb4:	4619      	mov	r1, r3
 8009eb6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009eba:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8009ebe:	462a      	mov	r2, r5
 8009ec0:	801a      	strh	r2, [r3, #0]
 8009ec2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009ec6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009eca:	4622      	mov	r2, r4
 8009ecc:	801a      	strh	r2, [r3, #0]
 8009ece:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009ed2:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8009ed6:	4602      	mov	r2, r0
 8009ed8:	701a      	strb	r2, [r3, #0]
 8009eda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009ede:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8009ee2:	460a      	mov	r2, r1
 8009ee4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 8009ee6:	f107 0310 	add.w	r3, r7, #16
 8009eea:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8009eee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009ef2:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009ef6:	2200      	movs	r2, #0
 8009ef8:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009efa:	2300      	movs	r3, #0
 8009efc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = Service_Handle;
 8009f00:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009f04:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009f08:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8009f0c:	8812      	ldrh	r2, [r2, #0]
 8009f0e:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8009f10:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009f14:	3302      	adds	r3, #2
 8009f16:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 8009f1a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009f1e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009f22:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8009f26:	8812      	ldrh	r2, [r2, #0]
 8009f28:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8009f2a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009f2e:	3302      	adds	r3, #2
 8009f30:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = Val_Offset;
 8009f34:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009f38:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009f3c:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 8009f40:	7812      	ldrb	r2, [r2, #0]
 8009f42:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8009f44:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009f48:	3301      	adds	r3, #1
 8009f4a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 8009f4e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009f52:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009f56:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 8009f5a:	7812      	ldrb	r2, [r2, #0]
 8009f5c:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8009f5e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009f62:	3301      	adds	r3, #1
 8009f64:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 8009f68:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009f6c:	1d98      	adds	r0, r3, #6
 8009f6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009f72:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8009f76:	781b      	ldrb	r3, [r3, #0]
 8009f78:	461a      	mov	r2, r3
 8009f7a:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8009f7e:	f000 fa1d 	bl	800a3bc <Osal_MemCpy>
  index_input += Char_Value_Length;
 8009f82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009f86:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8009f8a:	781b      	ldrb	r3, [r3, #0]
 8009f8c:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8009f90:	4413      	add	r3, r2
 8009f92:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009f96:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009f9a:	2218      	movs	r2, #24
 8009f9c:	2100      	movs	r1, #0
 8009f9e:	4618      	mov	r0, r3
 8009fa0:	f000 fa1c 	bl	800a3dc <Osal_MemSet>
  rq.ogf = 0x3f;
 8009fa4:	233f      	movs	r3, #63	; 0x3f
 8009fa6:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 8009faa:	f44f 7383 	mov.w	r3, #262	; 0x106
 8009fae:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8009fb2:	f107 0310 	add.w	r3, r7, #16
 8009fb6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8009fba:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009fbe:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8009fc2:	f107 030f 	add.w	r3, r7, #15
 8009fc6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8009fca:	2301      	movs	r3, #1
 8009fcc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009fd0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009fd4:	2100      	movs	r1, #0
 8009fd6:	4618      	mov	r0, r3
 8009fd8:	f000 fc8a 	bl	800a8f0 <hci_send_req>
 8009fdc:	4603      	mov	r3, r0
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	da01      	bge.n	8009fe6 <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 8009fe2:	23ff      	movs	r3, #255	; 0xff
 8009fe4:	e004      	b.n	8009ff0 <aci_gatt_update_char_value+0x148>
  return status;
 8009fe6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009fea:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009fee:	781b      	ldrb	r3, [r3, #0]
}
 8009ff0:	4618      	mov	r0, r3
 8009ff2:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8009ff6:	46bd      	mov	sp, r7
 8009ff8:	bdb0      	pop	{r4, r5, r7, pc}

08009ffa <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 8009ffa:	b580      	push	{r7, lr}
 8009ffc:	b0cc      	sub	sp, #304	; 0x130
 8009ffe:	af00      	add	r7, sp, #0
 800a000:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a004:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a008:	601a      	str	r2, [r3, #0]
 800a00a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a00e:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800a012:	4602      	mov	r2, r0
 800a014:	701a      	strb	r2, [r3, #0]
 800a016:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a01a:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800a01e:	460a      	mov	r2, r1
 800a020:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 800a022:	f107 0310 	add.w	r3, r7, #16
 800a026:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800a02a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a02e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800a032:	2200      	movs	r2, #0
 800a034:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800a036:	2300      	movs	r3, #0
 800a038:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = Offset;
 800a03c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a040:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a044:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800a048:	7812      	ldrb	r2, [r2, #0]
 800a04a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800a04c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a050:	3301      	adds	r3, #1
 800a052:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = Length;
 800a056:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a05a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a05e:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800a062:	7812      	ldrb	r2, [r2, #0]
 800a064:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800a066:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a06a:	3301      	adds	r3, #1
 800a06c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 800a070:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a074:	1c98      	adds	r0, r3, #2
 800a076:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a07a:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800a07e:	781a      	ldrb	r2, [r3, #0]
 800a080:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a084:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a088:	6819      	ldr	r1, [r3, #0]
 800a08a:	f000 f997 	bl	800a3bc <Osal_MemCpy>
  index_input += Length;
 800a08e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a092:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800a096:	781b      	ldrb	r3, [r3, #0]
 800a098:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800a09c:	4413      	add	r3, r2
 800a09e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a0a2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a0a6:	2218      	movs	r2, #24
 800a0a8:	2100      	movs	r1, #0
 800a0aa:	4618      	mov	r0, r3
 800a0ac:	f000 f996 	bl	800a3dc <Osal_MemSet>
  rq.ogf = 0x3f;
 800a0b0:	233f      	movs	r3, #63	; 0x3f
 800a0b2:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 800a0b6:	230c      	movs	r3, #12
 800a0b8:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800a0bc:	f107 0310 	add.w	r3, r7, #16
 800a0c0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800a0c4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a0c8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800a0cc:	f107 030f 	add.w	r3, r7, #15
 800a0d0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800a0d4:	2301      	movs	r3, #1
 800a0d6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a0da:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a0de:	2100      	movs	r1, #0
 800a0e0:	4618      	mov	r0, r3
 800a0e2:	f000 fc05 	bl	800a8f0 <hci_send_req>
 800a0e6:	4603      	mov	r3, r0
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	da01      	bge.n	800a0f0 <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 800a0ec:	23ff      	movs	r3, #255	; 0xff
 800a0ee:	e004      	b.n	800a0fa <aci_hal_write_config_data+0x100>
  return status;
 800a0f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a0f4:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800a0f8:	781b      	ldrb	r3, [r3, #0]
}
 800a0fa:	4618      	mov	r0, r3
 800a0fc:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800a100:	46bd      	mov	sp, r7
 800a102:	bd80      	pop	{r7, pc}

0800a104 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 800a104:	b580      	push	{r7, lr}
 800a106:	b0cc      	sub	sp, #304	; 0x130
 800a108:	af00      	add	r7, sp, #0
 800a10a:	4602      	mov	r2, r0
 800a10c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a110:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800a114:	701a      	strb	r2, [r3, #0]
 800a116:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a11a:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800a11e:	460a      	mov	r2, r1
 800a120:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 800a122:	f107 0310 	add.w	r3, r7, #16
 800a126:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800a12a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a12e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800a132:	2200      	movs	r2, #0
 800a134:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800a136:	2300      	movs	r3, #0
 800a138:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = En_High_Power;
 800a13c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a140:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a144:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800a148:	7812      	ldrb	r2, [r2, #0]
 800a14a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800a14c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a150:	3301      	adds	r3, #1
 800a152:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = PA_Level;
 800a156:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a15a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a15e:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800a162:	7812      	ldrb	r2, [r2, #0]
 800a164:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800a166:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a16a:	3301      	adds	r3, #1
 800a16c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a170:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a174:	2218      	movs	r2, #24
 800a176:	2100      	movs	r1, #0
 800a178:	4618      	mov	r0, r3
 800a17a:	f000 f92f 	bl	800a3dc <Osal_MemSet>
  rq.ogf = 0x3f;
 800a17e:	233f      	movs	r3, #63	; 0x3f
 800a180:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 800a184:	230f      	movs	r3, #15
 800a186:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800a18a:	f107 0310 	add.w	r3, r7, #16
 800a18e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800a192:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a196:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800a19a:	f107 030f 	add.w	r3, r7, #15
 800a19e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800a1a2:	2301      	movs	r3, #1
 800a1a4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a1a8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a1ac:	2100      	movs	r1, #0
 800a1ae:	4618      	mov	r0, r3
 800a1b0:	f000 fb9e 	bl	800a8f0 <hci_send_req>
 800a1b4:	4603      	mov	r3, r0
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	da01      	bge.n	800a1be <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 800a1ba:	23ff      	movs	r3, #255	; 0xff
 800a1bc:	e004      	b.n	800a1c8 <aci_hal_set_tx_power_level+0xc4>
  return status;
 800a1be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a1c2:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800a1c6:	781b      	ldrb	r3, [r3, #0]
}
 800a1c8:	4618      	mov	r0, r3
 800a1ca:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800a1ce:	46bd      	mov	sp, r7
 800a1d0:	bd80      	pop	{r7, pc}

0800a1d2 <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 800a1d2:	b580      	push	{r7, lr}
 800a1d4:	b0cc      	sub	sp, #304	; 0x130
 800a1d6:	af00      	add	r7, sp, #0
 800a1d8:	4602      	mov	r2, r0
 800a1da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a1de:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800a1e2:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 800a1e4:	f107 0310 	add.w	r3, r7, #16
 800a1e8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800a1ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a1f0:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800a1f4:	2200      	movs	r2, #0
 800a1f6:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800a1f8:	2300      	movs	r3, #0
 800a1fa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 800a1fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a202:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a206:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800a20a:	8812      	ldrh	r2, [r2, #0]
 800a20c:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800a20e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a212:	3302      	adds	r3, #2
 800a214:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a218:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a21c:	2218      	movs	r2, #24
 800a21e:	2100      	movs	r1, #0
 800a220:	4618      	mov	r0, r3
 800a222:	f000 f8db 	bl	800a3dc <Osal_MemSet>
  rq.ogf = 0x3f;
 800a226:	233f      	movs	r3, #63	; 0x3f
 800a228:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x018;
 800a22c:	2318      	movs	r3, #24
 800a22e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800a232:	f107 0310 	add.w	r3, r7, #16
 800a236:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800a23a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a23e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800a242:	f107 030f 	add.w	r3, r7, #15
 800a246:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800a24a:	2301      	movs	r3, #1
 800a24c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a250:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a254:	2100      	movs	r1, #0
 800a256:	4618      	mov	r0, r3
 800a258:	f000 fb4a 	bl	800a8f0 <hci_send_req>
 800a25c:	4603      	mov	r3, r0
 800a25e:	2b00      	cmp	r3, #0
 800a260:	da01      	bge.n	800a266 <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 800a262:	23ff      	movs	r3, #255	; 0xff
 800a264:	e004      	b.n	800a270 <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 800a266:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a26a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800a26e:	781b      	ldrb	r3, [r3, #0]
}
 800a270:	4618      	mov	r0, r3
 800a272:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800a276:	46bd      	mov	sp, r7
 800a278:	bd80      	pop	{r7, pc}

0800a27a <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 800a27a:	b580      	push	{r7, lr}
 800a27c:	b088      	sub	sp, #32
 800a27e:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800a280:	2300      	movs	r3, #0
 800a282:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a284:	f107 0308 	add.w	r3, r7, #8
 800a288:	2218      	movs	r2, #24
 800a28a:	2100      	movs	r1, #0
 800a28c:	4618      	mov	r0, r3
 800a28e:	f000 f8a5 	bl	800a3dc <Osal_MemSet>
  rq.ogf = 0x03;
 800a292:	2303      	movs	r3, #3
 800a294:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 800a296:	2303      	movs	r3, #3
 800a298:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800a29a:	1dfb      	adds	r3, r7, #7
 800a29c:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800a29e:	2301      	movs	r3, #1
 800a2a0:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a2a2:	f107 0308 	add.w	r3, r7, #8
 800a2a6:	2100      	movs	r1, #0
 800a2a8:	4618      	mov	r0, r3
 800a2aa:	f000 fb21 	bl	800a8f0 <hci_send_req>
 800a2ae:	4603      	mov	r3, r0
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	da01      	bge.n	800a2b8 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 800a2b4:	23ff      	movs	r3, #255	; 0xff
 800a2b6:	e000      	b.n	800a2ba <hci_reset+0x40>
  return status;
 800a2b8:	79fb      	ldrb	r3, [r7, #7]
}
 800a2ba:	4618      	mov	r0, r3
 800a2bc:	3720      	adds	r7, #32
 800a2be:	46bd      	mov	sp, r7
 800a2c0:	bd80      	pop	{r7, pc}

0800a2c2 <hci_le_set_default_phy>:
}

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 800a2c2:	b590      	push	{r4, r7, lr}
 800a2c4:	b0cd      	sub	sp, #308	; 0x134
 800a2c6:	af00      	add	r7, sp, #0
 800a2c8:	4604      	mov	r4, r0
 800a2ca:	4608      	mov	r0, r1
 800a2cc:	4611      	mov	r1, r2
 800a2ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a2d2:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800a2d6:	4622      	mov	r2, r4
 800a2d8:	701a      	strb	r2, [r3, #0]
 800a2da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a2de:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800a2e2:	4602      	mov	r2, r0
 800a2e4:	701a      	strb	r2, [r3, #0]
 800a2e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a2ea:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 800a2ee:	460a      	mov	r2, r1
 800a2f0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 800a2f2:	f107 0310 	add.w	r3, r7, #16
 800a2f6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800a2fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a2fe:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800a302:	2200      	movs	r2, #0
 800a304:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800a306:	2300      	movs	r3, #0
 800a308:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 800a30c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a310:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a314:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800a318:	7812      	ldrb	r2, [r2, #0]
 800a31a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800a31c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a320:	3301      	adds	r3, #1
 800a322:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->TX_PHYS = TX_PHYS;
 800a326:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a32a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a32e:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800a332:	7812      	ldrb	r2, [r2, #0]
 800a334:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800a336:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a33a:	3301      	adds	r3, #1
 800a33c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->RX_PHYS = RX_PHYS;
 800a340:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a344:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a348:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 800a34c:	7812      	ldrb	r2, [r2, #0]
 800a34e:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800a350:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a354:	3301      	adds	r3, #1
 800a356:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a35a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a35e:	2218      	movs	r2, #24
 800a360:	2100      	movs	r1, #0
 800a362:	4618      	mov	r0, r3
 800a364:	f000 f83a 	bl	800a3dc <Osal_MemSet>
  rq.ogf = 0x08;
 800a368:	2308      	movs	r3, #8
 800a36a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x031;
 800a36e:	2331      	movs	r3, #49	; 0x31
 800a370:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800a374:	f107 0310 	add.w	r3, r7, #16
 800a378:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800a37c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a380:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800a384:	f107 030f 	add.w	r3, r7, #15
 800a388:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800a38c:	2301      	movs	r3, #1
 800a38e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a392:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a396:	2100      	movs	r1, #0
 800a398:	4618      	mov	r0, r3
 800a39a:	f000 faa9 	bl	800a8f0 <hci_send_req>
 800a39e:	4603      	mov	r3, r0
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	da01      	bge.n	800a3a8 <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 800a3a4:	23ff      	movs	r3, #255	; 0xff
 800a3a6:	e004      	b.n	800a3b2 <hci_le_set_default_phy+0xf0>
  return status;
 800a3a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a3ac:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800a3b0:	781b      	ldrb	r3, [r3, #0]
}
 800a3b2:	4618      	mov	r0, r3
 800a3b4:	f507 779a 	add.w	r7, r7, #308	; 0x134
 800a3b8:	46bd      	mov	sp, r7
 800a3ba:	bd90      	pop	{r4, r7, pc}

0800a3bc <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 800a3bc:	b580      	push	{r7, lr}
 800a3be:	b084      	sub	sp, #16
 800a3c0:	af00      	add	r7, sp, #0
 800a3c2:	60f8      	str	r0, [r7, #12]
 800a3c4:	60b9      	str	r1, [r7, #8]
 800a3c6:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 800a3c8:	687a      	ldr	r2, [r7, #4]
 800a3ca:	68b9      	ldr	r1, [r7, #8]
 800a3cc:	68f8      	ldr	r0, [r7, #12]
 800a3ce:	f002 f8db 	bl	800c588 <memcpy>
 800a3d2:	4603      	mov	r3, r0
}
 800a3d4:	4618      	mov	r0, r3
 800a3d6:	3710      	adds	r7, #16
 800a3d8:	46bd      	mov	sp, r7
 800a3da:	bd80      	pop	{r7, pc}

0800a3dc <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 800a3dc:	b580      	push	{r7, lr}
 800a3de:	b084      	sub	sp, #16
 800a3e0:	af00      	add	r7, sp, #0
 800a3e2:	60f8      	str	r0, [r7, #12]
 800a3e4:	60b9      	str	r1, [r7, #8]
 800a3e6:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 800a3e8:	687a      	ldr	r2, [r7, #4]
 800a3ea:	68b9      	ldr	r1, [r7, #8]
 800a3ec:	68f8      	ldr	r0, [r7, #12]
 800a3ee:	f002 f8d9 	bl	800c5a4 <memset>
 800a3f2:	4603      	mov	r3, r0
}
 800a3f4:	4618      	mov	r0, r3
 800a3f6:	3710      	adds	r7, #16
 800a3f8:	46bd      	mov	sp, r7
 800a3fa:	bd80      	pop	{r7, pc}

0800a3fc <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 800a3fc:	b480      	push	{r7}
 800a3fe:	af00      	add	r7, sp, #0
  return;
 800a400:	bf00      	nop
}
 800a402:	46bd      	mov	sp, r7
 800a404:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a408:	4770      	bx	lr

0800a40a <BLS_Init>:

__WEAK void BLS_Init( void )
{
 800a40a:	b480      	push	{r7}
 800a40c:	af00      	add	r7, sp, #0
  return;
 800a40e:	bf00      	nop
}
 800a410:	46bd      	mov	sp, r7
 800a412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a416:	4770      	bx	lr

0800a418 <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 800a418:	b480      	push	{r7}
 800a41a:	af00      	add	r7, sp, #0
  return;
 800a41c:	bf00      	nop
}
 800a41e:	46bd      	mov	sp, r7
 800a420:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a424:	4770      	bx	lr

0800a426 <DIS_Init>:
__WEAK void DIS_Init( void )
{
 800a426:	b480      	push	{r7}
 800a428:	af00      	add	r7, sp, #0
  return;
 800a42a:	bf00      	nop
}
 800a42c:	46bd      	mov	sp, r7
 800a42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a432:	4770      	bx	lr

0800a434 <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 800a434:	b480      	push	{r7}
 800a436:	af00      	add	r7, sp, #0
  return;
 800a438:	bf00      	nop
}
 800a43a:	46bd      	mov	sp, r7
 800a43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a440:	4770      	bx	lr

0800a442 <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 800a442:	b480      	push	{r7}
 800a444:	af00      	add	r7, sp, #0
  return;
 800a446:	bf00      	nop
}
 800a448:	46bd      	mov	sp, r7
 800a44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a44e:	4770      	bx	lr

0800a450 <HRS_Init>:
__WEAK void HRS_Init( void )
{
 800a450:	b480      	push	{r7}
 800a452:	af00      	add	r7, sp, #0
  return;
 800a454:	bf00      	nop
}
 800a456:	46bd      	mov	sp, r7
 800a458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a45c:	4770      	bx	lr

0800a45e <HTS_Init>:
__WEAK void HTS_Init( void )
{
 800a45e:	b480      	push	{r7}
 800a460:	af00      	add	r7, sp, #0
  return;
 800a462:	bf00      	nop
}
 800a464:	46bd      	mov	sp, r7
 800a466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a46a:	4770      	bx	lr

0800a46c <IAS_Init>:
__WEAK void IAS_Init( void )
{
 800a46c:	b480      	push	{r7}
 800a46e:	af00      	add	r7, sp, #0
  return;
 800a470:	bf00      	nop
}
 800a472:	46bd      	mov	sp, r7
 800a474:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a478:	4770      	bx	lr

0800a47a <LLS_Init>:
__WEAK void LLS_Init( void )
{
 800a47a:	b480      	push	{r7}
 800a47c:	af00      	add	r7, sp, #0
  return;
 800a47e:	bf00      	nop
}
 800a480:	46bd      	mov	sp, r7
 800a482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a486:	4770      	bx	lr

0800a488 <TPS_Init>:
__WEAK void TPS_Init( void )
{
 800a488:	b480      	push	{r7}
 800a48a:	af00      	add	r7, sp, #0
  return;
 800a48c:	bf00      	nop
}
 800a48e:	46bd      	mov	sp, r7
 800a490:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a494:	4770      	bx	lr

0800a496 <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 800a496:	b480      	push	{r7}
 800a498:	af00      	add	r7, sp, #0
  return;
 800a49a:	bf00      	nop
}
 800a49c:	46bd      	mov	sp, r7
 800a49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a2:	4770      	bx	lr

0800a4a4 <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 800a4a4:	b480      	push	{r7}
 800a4a6:	af00      	add	r7, sp, #0
  return;
 800a4a8:	bf00      	nop
}
 800a4aa:	46bd      	mov	sp, r7
 800a4ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b0:	4770      	bx	lr

0800a4b2 <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 800a4b2:	b480      	push	{r7}
 800a4b4:	af00      	add	r7, sp, #0
  return;
 800a4b6:	bf00      	nop
}
 800a4b8:	46bd      	mov	sp, r7
 800a4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4be:	4770      	bx	lr

0800a4c0 <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 800a4c0:	b480      	push	{r7}
 800a4c2:	af00      	add	r7, sp, #0
  return;
 800a4c4:	bf00      	nop
}
 800a4c6:	46bd      	mov	sp, r7
 800a4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4cc:	4770      	bx	lr

0800a4ce <MESH_Init>:
__WEAK void MESH_Init( void )
{
 800a4ce:	b480      	push	{r7}
 800a4d0:	af00      	add	r7, sp, #0
  return;
 800a4d2:	bf00      	nop
}
 800a4d4:	46bd      	mov	sp, r7
 800a4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4da:	4770      	bx	lr

0800a4dc <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 800a4dc:	b480      	push	{r7}
 800a4de:	af00      	add	r7, sp, #0
  return;
 800a4e0:	bf00      	nop
}
 800a4e2:	46bd      	mov	sp, r7
 800a4e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e8:	4770      	bx	lr
	...

0800a4ec <SVCCTL_Init>:
}

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 800a4ec:	b580      	push	{r7, lr}
 800a4ee:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 800a4f0:	4b04      	ldr	r3, [pc, #16]	; (800a504 <SVCCTL_Init+0x18>)
 800a4f2:	2200      	movs	r2, #0
 800a4f4:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 800a4f6:	4b04      	ldr	r3, [pc, #16]	; (800a508 <SVCCTL_Init+0x1c>)
 800a4f8:	2200      	movs	r2, #0
 800a4fa:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 800a4fc:	f000 f806 	bl	800a50c <SVCCTL_SvcInit>

  return;
 800a500:	bf00      	nop
}
 800a502:	bd80      	pop	{r7, pc}
 800a504:	20000910 	.word	0x20000910
 800a508:	20000930 	.word	0x20000930

0800a50c <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 800a50c:	b580      	push	{r7, lr}
 800a50e:	af00      	add	r7, sp, #0
  BAS_Init();
 800a510:	f7ff ff74 	bl	800a3fc <BAS_Init>

  BLS_Init();
 800a514:	f7ff ff79 	bl	800a40a <BLS_Init>

  CRS_STM_Init();
 800a518:	f7ff ff7e 	bl	800a418 <CRS_STM_Init>

  DIS_Init();
 800a51c:	f7ff ff83 	bl	800a426 <DIS_Init>

  EDS_STM_Init();
 800a520:	f7ff ff88 	bl	800a434 <EDS_STM_Init>

  HIDS_Init();
 800a524:	f7ff ff8d 	bl	800a442 <HIDS_Init>

  HRS_Init();
 800a528:	f7ff ff92 	bl	800a450 <HRS_Init>

  HTS_Init();
 800a52c:	f7ff ff97 	bl	800a45e <HTS_Init>

  IAS_Init();
 800a530:	f7ff ff9c 	bl	800a46c <IAS_Init>

  LLS_Init();
 800a534:	f7ff ffa1 	bl	800a47a <LLS_Init>

  TPS_Init();
 800a538:	f7ff ffa6 	bl	800a488 <TPS_Init>

  MOTENV_STM_Init();
 800a53c:	f7ff ffab 	bl	800a496 <MOTENV_STM_Init>

  P2PS_STM_Init();
 800a540:	f7ff ffb0 	bl	800a4a4 <P2PS_STM_Init>

  ZDD_STM_Init();
 800a544:	f7ff ffb5 	bl	800a4b2 <ZDD_STM_Init>

  OTAS_STM_Init();
 800a548:	f7ff ffba 	bl	800a4c0 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 800a54c:	f7ff ffc6 	bl	800a4dc <BVOPUS_STM_Init>

  MESH_Init();
 800a550:	f7ff ffbd 	bl	800a4ce <MESH_Init>

  SVCCTL_InitCustomSvc();
 800a554:	f001 faaa 	bl	800baac <SVCCTL_InitCustomSvc>
  
  return;
 800a558:	bf00      	nop
}
 800a55a:	bd80      	pop	{r7, pc}

0800a55c <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 800a55c:	b480      	push	{r7}
 800a55e:	b083      	sub	sp, #12
 800a560:	af00      	add	r7, sp, #0
 800a562:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 800a564:	4b09      	ldr	r3, [pc, #36]	; (800a58c <SVCCTL_RegisterSvcHandler+0x30>)
 800a566:	7f1b      	ldrb	r3, [r3, #28]
 800a568:	4619      	mov	r1, r3
 800a56a:	4a08      	ldr	r2, [pc, #32]	; (800a58c <SVCCTL_RegisterSvcHandler+0x30>)
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 800a572:	4b06      	ldr	r3, [pc, #24]	; (800a58c <SVCCTL_RegisterSvcHandler+0x30>)
 800a574:	7f1b      	ldrb	r3, [r3, #28]
 800a576:	3301      	adds	r3, #1
 800a578:	b2da      	uxtb	r2, r3
 800a57a:	4b04      	ldr	r3, [pc, #16]	; (800a58c <SVCCTL_RegisterSvcHandler+0x30>)
 800a57c:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 800a57e:	bf00      	nop
}
 800a580:	370c      	adds	r7, #12
 800a582:	46bd      	mov	sp, r7
 800a584:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a588:	4770      	bx	lr
 800a58a:	bf00      	nop
 800a58c:	20000910 	.word	0x20000910

0800a590 <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 800a590:	b580      	push	{r7, lr}
 800a592:	b086      	sub	sp, #24
 800a594:	af00      	add	r7, sp, #0
 800a596:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	3301      	adds	r3, #1
 800a59c:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 800a59e:	2300      	movs	r3, #0
 800a5a0:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 800a5a2:	693b      	ldr	r3, [r7, #16]
 800a5a4:	781b      	ldrb	r3, [r3, #0]
 800a5a6:	2bff      	cmp	r3, #255	; 0xff
 800a5a8:	d125      	bne.n	800a5f6 <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 800a5aa:	693b      	ldr	r3, [r7, #16]
 800a5ac:	3302      	adds	r3, #2
 800a5ae:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	881b      	ldrh	r3, [r3, #0]
 800a5b4:	b29b      	uxth	r3, r3
 800a5b6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800a5ba:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a5be:	d118      	bne.n	800a5f2 <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800a5c0:	2300      	movs	r3, #0
 800a5c2:	757b      	strb	r3, [r7, #21]
 800a5c4:	e00d      	b.n	800a5e2 <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 800a5c6:	7d7b      	ldrb	r3, [r7, #21]
 800a5c8:	4a1a      	ldr	r2, [pc, #104]	; (800a634 <SVCCTL_UserEvtRx+0xa4>)
 800a5ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a5ce:	6878      	ldr	r0, [r7, #4]
 800a5d0:	4798      	blx	r3
 800a5d2:	4603      	mov	r3, r0
 800a5d4:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 800a5d6:	7dfb      	ldrb	r3, [r7, #23]
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d108      	bne.n	800a5ee <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800a5dc:	7d7b      	ldrb	r3, [r7, #21]
 800a5de:	3301      	adds	r3, #1
 800a5e0:	757b      	strb	r3, [r7, #21]
 800a5e2:	4b14      	ldr	r3, [pc, #80]	; (800a634 <SVCCTL_UserEvtRx+0xa4>)
 800a5e4:	7f1b      	ldrb	r3, [r3, #28]
 800a5e6:	7d7a      	ldrb	r2, [r7, #21]
 800a5e8:	429a      	cmp	r2, r3
 800a5ea:	d3ec      	bcc.n	800a5c6 <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 800a5ec:	e002      	b.n	800a5f4 <SVCCTL_UserEvtRx+0x64>
              break;
 800a5ee:	bf00      	nop
          break;
 800a5f0:	e000      	b.n	800a5f4 <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 800a5f2:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 800a5f4:	e000      	b.n	800a5f8 <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 800a5f6:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the applicaiton.
   */
  switch (event_notification_status)
 800a5f8:	7dfb      	ldrb	r3, [r7, #23]
 800a5fa:	2b02      	cmp	r3, #2
 800a5fc:	d00f      	beq.n	800a61e <SVCCTL_UserEvtRx+0x8e>
 800a5fe:	2b02      	cmp	r3, #2
 800a600:	dc10      	bgt.n	800a624 <SVCCTL_UserEvtRx+0x94>
 800a602:	2b00      	cmp	r3, #0
 800a604:	d002      	beq.n	800a60c <SVCCTL_UserEvtRx+0x7c>
 800a606:	2b01      	cmp	r3, #1
 800a608:	d006      	beq.n	800a618 <SVCCTL_UserEvtRx+0x88>
 800a60a:	e00b      	b.n	800a624 <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 800a60c:	6878      	ldr	r0, [r7, #4]
 800a60e:	f000 ff7b 	bl	800b508 <SVCCTL_App_Notification>
 800a612:	4603      	mov	r3, r0
 800a614:	75bb      	strb	r3, [r7, #22]
      break;
 800a616:	e008      	b.n	800a62a <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 800a618:	2301      	movs	r3, #1
 800a61a:	75bb      	strb	r3, [r7, #22]
      break;
 800a61c:	e005      	b.n	800a62a <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 800a61e:	2300      	movs	r3, #0
 800a620:	75bb      	strb	r3, [r7, #22]
      break;
 800a622:	e002      	b.n	800a62a <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 800a624:	2301      	movs	r3, #1
 800a626:	75bb      	strb	r3, [r7, #22]
      break;
 800a628:	bf00      	nop
  }

  return (return_status);
 800a62a:	7dbb      	ldrb	r3, [r7, #22]
}
 800a62c:	4618      	mov	r0, r3
 800a62e:	3718      	adds	r7, #24
 800a630:	46bd      	mov	sp, r7
 800a632:	bd80      	pop	{r7, pc}
 800a634:	20000910 	.word	0x20000910

0800a638 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 800a638:	b580      	push	{r7, lr}
 800a63a:	b088      	sub	sp, #32
 800a63c:	af00      	add	r7, sp, #0
 800a63e:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800a640:	f107 030c 	add.w	r3, r7, #12
 800a644:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 800a64c:	69fb      	ldr	r3, [r7, #28]
 800a64e:	212e      	movs	r1, #46	; 0x2e
 800a650:	f64f 4066 	movw	r0, #64614	; 0xfc66
 800a654:	f000 fae2 	bl	800ac1c <shci_send>
            p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800a658:	69fb      	ldr	r3, [r7, #28]
 800a65a:	330b      	adds	r3, #11
 800a65c:	78db      	ldrb	r3, [r3, #3]
}
 800a65e:	4618      	mov	r0, r3
 800a660:	3720      	adds	r7, #32
 800a662:	46bd      	mov	sp, r7
 800a664:	bd80      	pop	{r7, pc}

0800a666 <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 800a666:	b580      	push	{r7, lr}
 800a668:	b088      	sub	sp, #32
 800a66a:	af00      	add	r7, sp, #0
 800a66c:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800a66e:	f107 030c 	add.w	r3, r7, #12
 800a672:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 800a67a:	69fb      	ldr	r3, [r7, #28]
 800a67c:	210f      	movs	r1, #15
 800a67e:	f64f 4068 	movw	r0, #64616	; 0xfc68
 800a682:	f000 facb 	bl	800ac1c <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800a686:	69fb      	ldr	r3, [r7, #28]
 800a688:	330b      	adds	r3, #11
 800a68a:	78db      	ldrb	r3, [r3, #3]
}
 800a68c:	4618      	mov	r0, r3
 800a68e:	3720      	adds	r7, #32
 800a690:	46bd      	mov	sp, r7
 800a692:	bd80      	pop	{r7, pc}

0800a694 <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 800a694:	b580      	push	{r7, lr}
 800a696:	b088      	sub	sp, #32
 800a698:	af00      	add	r7, sp, #0
 800a69a:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800a69c:	f107 030c 	add.w	r3, r7, #12
 800a6a0:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 800a6a2:	69fb      	ldr	r3, [r7, #28]
 800a6a4:	687a      	ldr	r2, [r7, #4]
 800a6a6:	2110      	movs	r1, #16
 800a6a8:	f64f 4075 	movw	r0, #64629	; 0xfc75
 800a6ac:	f000 fab6 	bl	800ac1c <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800a6b0:	69fb      	ldr	r3, [r7, #28]
 800a6b2:	330b      	adds	r3, #11
 800a6b4:	78db      	ldrb	r3, [r3, #3]
}
 800a6b6:	4618      	mov	r0, r3
 800a6b8:	3720      	adds	r7, #32
 800a6ba:	46bd      	mov	sp, r7
 800a6bc:	bd80      	pop	{r7, pc}
	...

0800a6c0 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 800a6c0:	b480      	push	{r7}
 800a6c2:	b08b      	sub	sp, #44	; 0x2c
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 800a6c8:	2300      	movs	r3, #0
 800a6ca:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 800a6cc:	2300      	movs	r3, #0
 800a6ce:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 800a6d0:	2300      	movs	r3, #0
 800a6d2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t wireless_firmware_memorySize = 0;
 800a6d4:	2300      	movs	r3, #0
 800a6d6:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 800a6d8:	2300      	movs	r3, #0
 800a6da:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 800a6dc:	2300      	movs	r3, #0
 800a6de:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 800a6e0:	2300      	movs	r3, #0
 800a6e2:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 800a6e4:	2300      	movs	r3, #0
 800a6e6:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 800a6e8:	4b4a      	ldr	r3, [pc, #296]	; (800a814 <SHCI_GetWirelessFwInfo+0x154>)
 800a6ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a6ec:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800a6f0:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 800a6f2:	693b      	ldr	r3, [r7, #16]
 800a6f4:	009b      	lsls	r3, r3, #2
 800a6f6:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800a6fa:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 800a702:	68bb      	ldr	r3, [r7, #8]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	4a44      	ldr	r2, [pc, #272]	; (800a818 <SHCI_GetWirelessFwInfo+0x158>)
 800a708:	4293      	cmp	r3, r2
 800a70a:	d10f      	bne.n	800a72c <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 800a70c:	68bb      	ldr	r3, [r7, #8]
 800a70e:	695b      	ldr	r3, [r3, #20]
 800a710:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 800a712:	68bb      	ldr	r3, [r7, #8]
 800a714:	699b      	ldr	r3, [r3, #24]
 800a716:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 800a718:	68bb      	ldr	r3, [r7, #8]
 800a71a:	69db      	ldr	r3, [r3, #28]
 800a71c:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 800a71e:	68bb      	ldr	r3, [r7, #8]
 800a720:	68db      	ldr	r3, [r3, #12]
 800a722:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 800a724:	68bb      	ldr	r3, [r7, #8]
 800a726:	691b      	ldr	r3, [r3, #16]
 800a728:	617b      	str	r3, [r7, #20]
 800a72a:	e01a      	b.n	800a762 <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 800a72c:	693b      	ldr	r3, [r7, #16]
 800a72e:	009b      	lsls	r3, r3, #2
 800a730:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800a734:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 800a738:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	691b      	ldr	r3, [r3, #16]
 800a740:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	695b      	ldr	r3, [r3, #20]
 800a748:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	699b      	ldr	r3, [r3, #24]
 800a750:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	685b      	ldr	r3, [r3, #4]
 800a758:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	689b      	ldr	r3, [r3, #8]
 800a760:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800a762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a764:	0e1b      	lsrs	r3, r3, #24
 800a766:	b2da      	uxtb	r2, r3
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800a76c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a76e:	0c1b      	lsrs	r3, r3, #16
 800a770:	b2da      	uxtb	r2, r3
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800a776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a778:	0a1b      	lsrs	r3, r3, #8
 800a77a:	b2da      	uxtb	r2, r3
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 800a780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a782:	091b      	lsrs	r3, r3, #4
 800a784:	b2db      	uxtb	r3, r3
 800a786:	f003 030f 	and.w	r3, r3, #15
 800a78a:	b2da      	uxtb	r2, r3
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 800a790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a792:	b2db      	uxtb	r3, r3
 800a794:	f003 030f 	and.w	r3, r3, #15
 800a798:	b2da      	uxtb	r2, r3
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800a79e:	6a3b      	ldr	r3, [r7, #32]
 800a7a0:	0e1b      	lsrs	r3, r3, #24
 800a7a2:	b2da      	uxtb	r2, r3
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800a7a8:	6a3b      	ldr	r3, [r7, #32]
 800a7aa:	0c1b      	lsrs	r3, r3, #16
 800a7ac:	b2da      	uxtb	r2, r3
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 800a7b2:	6a3b      	ldr	r3, [r7, #32]
 800a7b4:	0a1b      	lsrs	r3, r3, #8
 800a7b6:	b2da      	uxtb	r2, r3
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800a7bc:	6a3b      	ldr	r3, [r7, #32]
 800a7be:	b2da      	uxtb	r2, r3
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 800a7c4:	69fb      	ldr	r3, [r7, #28]
 800a7c6:	b2da      	uxtb	r2, r3
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800a7cc:	69bb      	ldr	r3, [r7, #24]
 800a7ce:	0e1b      	lsrs	r3, r3, #24
 800a7d0:	b2da      	uxtb	r2, r3
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800a7d6:	69bb      	ldr	r3, [r7, #24]
 800a7d8:	0c1b      	lsrs	r3, r3, #16
 800a7da:	b2da      	uxtb	r2, r3
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800a7e0:	69bb      	ldr	r3, [r7, #24]
 800a7e2:	0a1b      	lsrs	r3, r3, #8
 800a7e4:	b2da      	uxtb	r2, r3
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800a7ea:	697b      	ldr	r3, [r7, #20]
 800a7ec:	0e1b      	lsrs	r3, r3, #24
 800a7ee:	b2da      	uxtb	r2, r3
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800a7f4:	697b      	ldr	r3, [r7, #20]
 800a7f6:	0c1b      	lsrs	r3, r3, #16
 800a7f8:	b2da      	uxtb	r2, r3
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800a7fe:	697b      	ldr	r3, [r7, #20]
 800a800:	b2da      	uxtb	r2, r3
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 800a806:	2300      	movs	r3, #0
}
 800a808:	4618      	mov	r0, r3
 800a80a:	372c      	adds	r7, #44	; 0x2c
 800a80c:	46bd      	mov	sp, r7
 800a80e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a812:	4770      	bx	lr
 800a814:	58004000 	.word	0x58004000
 800a818:	a94656b9 	.word	0xa94656b9

0800a81c <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800a81c:	b580      	push	{r7, lr}
 800a81e:	b082      	sub	sp, #8
 800a820:	af00      	add	r7, sp, #0
 800a822:	6078      	str	r0, [r7, #4]
 800a824:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800a826:	683b      	ldr	r3, [r7, #0]
 800a828:	685b      	ldr	r3, [r3, #4]
 800a82a:	4a08      	ldr	r2, [pc, #32]	; (800a84c <hci_init+0x30>)
 800a82c:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 800a82e:	4a08      	ldr	r2, [pc, #32]	; (800a850 <hci_init+0x34>)
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 800a834:	4806      	ldr	r0, [pc, #24]	; (800a850 <hci_init+0x34>)
 800a836:	f000 f973 	bl	800ab20 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800a83a:	683b      	ldr	r3, [r7, #0]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	4618      	mov	r0, r3
 800a840:	f000 f8d4 	bl	800a9ec <TlInit>

  return;
 800a844:	bf00      	nop
}
 800a846:	3708      	adds	r7, #8
 800a848:	46bd      	mov	sp, r7
 800a84a:	bd80      	pop	{r7, pc}
 800a84c:	200010fc 	.word	0x200010fc
 800a850:	200010d4 	.word	0x200010d4

0800a854 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 800a854:	b580      	push	{r7, lr}
 800a856:	b084      	sub	sp, #16
 800a858:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800a85a:	4822      	ldr	r0, [pc, #136]	; (800a8e4 <hci_user_evt_proc+0x90>)
 800a85c:	f000 fd28 	bl	800b2b0 <LST_is_empty>
 800a860:	4603      	mov	r3, r0
 800a862:	2b00      	cmp	r3, #0
 800a864:	d12b      	bne.n	800a8be <hci_user_evt_proc+0x6a>
 800a866:	4b20      	ldr	r3, [pc, #128]	; (800a8e8 <hci_user_evt_proc+0x94>)
 800a868:	781b      	ldrb	r3, [r3, #0]
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d027      	beq.n	800a8be <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800a86e:	f107 030c 	add.w	r3, r7, #12
 800a872:	4619      	mov	r1, r3
 800a874:	481b      	ldr	r0, [pc, #108]	; (800a8e4 <hci_user_evt_proc+0x90>)
 800a876:	f000 fdaa 	bl	800b3ce <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 800a87a:	4b1c      	ldr	r3, [pc, #112]	; (800a8ec <hci_user_evt_proc+0x98>)
 800a87c:	69db      	ldr	r3, [r3, #28]
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d00c      	beq.n	800a89c <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 800a886:	2301      	movs	r3, #1
 800a888:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 800a88a:	4b18      	ldr	r3, [pc, #96]	; (800a8ec <hci_user_evt_proc+0x98>)
 800a88c:	69db      	ldr	r3, [r3, #28]
 800a88e:	1d3a      	adds	r2, r7, #4
 800a890:	4610      	mov	r0, r2
 800a892:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 800a894:	793a      	ldrb	r2, [r7, #4]
 800a896:	4b14      	ldr	r3, [pc, #80]	; (800a8e8 <hci_user_evt_proc+0x94>)
 800a898:	701a      	strb	r2, [r3, #0]
 800a89a:	e002      	b.n	800a8a2 <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800a89c:	4b12      	ldr	r3, [pc, #72]	; (800a8e8 <hci_user_evt_proc+0x94>)
 800a89e:	2201      	movs	r2, #1
 800a8a0:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 800a8a2:	4b11      	ldr	r3, [pc, #68]	; (800a8e8 <hci_user_evt_proc+0x94>)
 800a8a4:	781b      	ldrb	r3, [r3, #0]
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d004      	beq.n	800a8b4 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	4618      	mov	r0, r3
 800a8ae:	f000 fc03 	bl	800b0b8 <TL_MM_EvtDone>
 800a8b2:	e004      	b.n	800a8be <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	4619      	mov	r1, r3
 800a8b8:	480a      	ldr	r0, [pc, #40]	; (800a8e4 <hci_user_evt_proc+0x90>)
 800a8ba:	f000 fd1b 	bl	800b2f4 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800a8be:	4809      	ldr	r0, [pc, #36]	; (800a8e4 <hci_user_evt_proc+0x90>)
 800a8c0:	f000 fcf6 	bl	800b2b0 <LST_is_empty>
 800a8c4:	4603      	mov	r3, r0
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d107      	bne.n	800a8da <hci_user_evt_proc+0x86>
 800a8ca:	4b07      	ldr	r3, [pc, #28]	; (800a8e8 <hci_user_evt_proc+0x94>)
 800a8cc:	781b      	ldrb	r3, [r3, #0]
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d003      	beq.n	800a8da <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 800a8d2:	4804      	ldr	r0, [pc, #16]	; (800a8e4 <hci_user_evt_proc+0x90>)
 800a8d4:	f001 f830 	bl	800b938 <hci_notify_asynch_evt>
  }


  return;
 800a8d8:	bf00      	nop
 800a8da:	bf00      	nop
}
 800a8dc:	3710      	adds	r7, #16
 800a8de:	46bd      	mov	sp, r7
 800a8e0:	bd80      	pop	{r7, pc}
 800a8e2:	bf00      	nop
 800a8e4:	20000938 	.word	0x20000938
 800a8e8:	20000944 	.word	0x20000944
 800a8ec:	200010d4 	.word	0x200010d4

0800a8f0 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 800a8f0:	b580      	push	{r7, lr}
 800a8f2:	b088      	sub	sp, #32
 800a8f4:	af00      	add	r7, sp, #0
 800a8f6:	6078      	str	r0, [r7, #4]
 800a8f8:	460b      	mov	r3, r1
 800a8fa:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 800a8fc:	2000      	movs	r0, #0
 800a8fe:	f000 f8cb 	bl	800aa98 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 800a902:	2300      	movs	r3, #0
 800a904:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	885b      	ldrh	r3, [r3, #2]
 800a90a:	b21b      	sxth	r3, r3
 800a90c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a910:	b21a      	sxth	r2, r3
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	881b      	ldrh	r3, [r3, #0]
 800a916:	029b      	lsls	r3, r3, #10
 800a918:	b21b      	sxth	r3, r3
 800a91a:	4313      	orrs	r3, r2
 800a91c:	b21b      	sxth	r3, r3
 800a91e:	83bb      	strh	r3, [r7, #28]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	68db      	ldr	r3, [r3, #12]
 800a924:	b2d9      	uxtb	r1, r3
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	689a      	ldr	r2, [r3, #8]
 800a92a:	8bbb      	ldrh	r3, [r7, #28]
 800a92c:	4618      	mov	r0, r3
 800a92e:	f000 f88d 	bl	800aa4c <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 800a932:	e04e      	b.n	800a9d2 <hci_send_req+0xe2>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 800a934:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800a938:	f001 f815 	bl	800b966 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800a93c:	e043      	b.n	800a9c6 <hci_send_req+0xd6>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 800a93e:	f107 030c 	add.w	r3, r7, #12
 800a942:	4619      	mov	r1, r3
 800a944:	4828      	ldr	r0, [pc, #160]	; (800a9e8 <hci_send_req+0xf8>)
 800a946:	f000 fd42 	bl	800b3ce <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	7a5b      	ldrb	r3, [r3, #9]
 800a94e:	2b0f      	cmp	r3, #15
 800a950:	d114      	bne.n	800a97c <hci_send_req+0x8c>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	330b      	adds	r3, #11
 800a956:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 800a958:	693b      	ldr	r3, [r7, #16]
 800a95a:	885b      	ldrh	r3, [r3, #2]
 800a95c:	b29b      	uxth	r3, r3
 800a95e:	8bba      	ldrh	r2, [r7, #28]
 800a960:	429a      	cmp	r2, r3
 800a962:	d104      	bne.n	800a96e <hci_send_req+0x7e>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	691b      	ldr	r3, [r3, #16]
 800a968:	693a      	ldr	r2, [r7, #16]
 800a96a:	7812      	ldrb	r2, [r2, #0]
 800a96c:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 800a96e:	693b      	ldr	r3, [r7, #16]
 800a970:	785b      	ldrb	r3, [r3, #1]
 800a972:	2b00      	cmp	r3, #0
 800a974:	d027      	beq.n	800a9c6 <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800a976:	2301      	movs	r3, #1
 800a978:	77fb      	strb	r3, [r7, #31]
 800a97a:	e024      	b.n	800a9c6 <hci_send_req+0xd6>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	330b      	adds	r3, #11
 800a980:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 800a982:	69bb      	ldr	r3, [r7, #24]
 800a984:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800a988:	b29b      	uxth	r3, r3
 800a98a:	8bba      	ldrh	r2, [r7, #28]
 800a98c:	429a      	cmp	r2, r3
 800a98e:	d114      	bne.n	800a9ba <hci_send_req+0xca>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	7a9b      	ldrb	r3, [r3, #10]
 800a994:	3b03      	subs	r3, #3
 800a996:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	695a      	ldr	r2, [r3, #20]
 800a99c:	7dfb      	ldrb	r3, [r7, #23]
 800a99e:	429a      	cmp	r2, r3
 800a9a0:	bfa8      	it	ge
 800a9a2:	461a      	movge	r2, r3
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	6918      	ldr	r0, [r3, #16]
 800a9ac:	69bb      	ldr	r3, [r7, #24]
 800a9ae:	1cd9      	adds	r1, r3, #3
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	695b      	ldr	r3, [r3, #20]
 800a9b4:	461a      	mov	r2, r3
 800a9b6:	f001 fde7 	bl	800c588 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 800a9ba:	69bb      	ldr	r3, [r7, #24]
 800a9bc:	781b      	ldrb	r3, [r3, #0]
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d001      	beq.n	800a9c6 <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800a9c2:	2301      	movs	r3, #1
 800a9c4:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800a9c6:	4808      	ldr	r0, [pc, #32]	; (800a9e8 <hci_send_req+0xf8>)
 800a9c8:	f000 fc72 	bl	800b2b0 <LST_is_empty>
 800a9cc:	4603      	mov	r3, r0
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d0b5      	beq.n	800a93e <hci_send_req+0x4e>
  while(local_cmd_status == HCI_TL_CmdBusy)
 800a9d2:	7ffb      	ldrb	r3, [r7, #31]
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d0ad      	beq.n	800a934 <hci_send_req+0x44>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 800a9d8:	2001      	movs	r0, #1
 800a9da:	f000 f85d 	bl	800aa98 <NotifyCmdStatus>

  return 0;
 800a9de:	2300      	movs	r3, #0
}
 800a9e0:	4618      	mov	r0, r3
 800a9e2:	3720      	adds	r7, #32
 800a9e4:	46bd      	mov	sp, r7
 800a9e6:	bd80      	pop	{r7, pc}
 800a9e8:	200010f4 	.word	0x200010f4

0800a9ec <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800a9ec:	b580      	push	{r7, lr}
 800a9ee:	b086      	sub	sp, #24
 800a9f0:	af00      	add	r7, sp, #0
 800a9f2:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 800a9f4:	480f      	ldr	r0, [pc, #60]	; (800aa34 <TlInit+0x48>)
 800a9f6:	f000 fc4b 	bl	800b290 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 800a9fa:	4a0f      	ldr	r2, [pc, #60]	; (800aa38 <TlInit+0x4c>)
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 800aa00:	480e      	ldr	r0, [pc, #56]	; (800aa3c <TlInit+0x50>)
 800aa02:	f000 fc45 	bl	800b290 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800aa06:	4b0e      	ldr	r3, [pc, #56]	; (800aa40 <TlInit+0x54>)
 800aa08:	2201      	movs	r2, #1
 800aa0a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 800aa0c:	4b0d      	ldr	r3, [pc, #52]	; (800aa44 <TlInit+0x58>)
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d00a      	beq.n	800aa2a <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 800aa18:	4b0b      	ldr	r3, [pc, #44]	; (800aa48 <TlInit+0x5c>)
 800aa1a:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 800aa1c:	4b09      	ldr	r3, [pc, #36]	; (800aa44 <TlInit+0x58>)
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	f107 0208 	add.w	r2, r7, #8
 800aa24:	4610      	mov	r0, r2
 800aa26:	4798      	blx	r3
  }

  return;
 800aa28:	bf00      	nop
 800aa2a:	bf00      	nop
}
 800aa2c:	3718      	adds	r7, #24
 800aa2e:	46bd      	mov	sp, r7
 800aa30:	bd80      	pop	{r7, pc}
 800aa32:	bf00      	nop
 800aa34:	200010f4 	.word	0x200010f4
 800aa38:	20000940 	.word	0x20000940
 800aa3c:	20000938 	.word	0x20000938
 800aa40:	20000944 	.word	0x20000944
 800aa44:	200010d4 	.word	0x200010d4
 800aa48:	0800aad9 	.word	0x0800aad9

0800aa4c <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 800aa4c:	b580      	push	{r7, lr}
 800aa4e:	b082      	sub	sp, #8
 800aa50:	af00      	add	r7, sp, #0
 800aa52:	4603      	mov	r3, r0
 800aa54:	603a      	str	r2, [r7, #0]
 800aa56:	80fb      	strh	r3, [r7, #6]
 800aa58:	460b      	mov	r3, r1
 800aa5a:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 800aa5c:	4b0c      	ldr	r3, [pc, #48]	; (800aa90 <SendCmd+0x44>)
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	88fa      	ldrh	r2, [r7, #6]
 800aa62:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 800aa66:	4b0a      	ldr	r3, [pc, #40]	; (800aa90 <SendCmd+0x44>)
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	797a      	ldrb	r2, [r7, #5]
 800aa6c:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 800aa6e:	4b08      	ldr	r3, [pc, #32]	; (800aa90 <SendCmd+0x44>)
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	330c      	adds	r3, #12
 800aa74:	797a      	ldrb	r2, [r7, #5]
 800aa76:	6839      	ldr	r1, [r7, #0]
 800aa78:	4618      	mov	r0, r3
 800aa7a:	f001 fd85 	bl	800c588 <memcpy>

  hciContext.io.Send(0,0);
 800aa7e:	4b05      	ldr	r3, [pc, #20]	; (800aa94 <SendCmd+0x48>)
 800aa80:	691b      	ldr	r3, [r3, #16]
 800aa82:	2100      	movs	r1, #0
 800aa84:	2000      	movs	r0, #0
 800aa86:	4798      	blx	r3

  return;
 800aa88:	bf00      	nop
}
 800aa8a:	3708      	adds	r7, #8
 800aa8c:	46bd      	mov	sp, r7
 800aa8e:	bd80      	pop	{r7, pc}
 800aa90:	20000940 	.word	0x20000940
 800aa94:	200010d4 	.word	0x200010d4

0800aa98 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 800aa98:	b580      	push	{r7, lr}
 800aa9a:	b082      	sub	sp, #8
 800aa9c:	af00      	add	r7, sp, #0
 800aa9e:	4603      	mov	r3, r0
 800aaa0:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 800aaa2:	79fb      	ldrb	r3, [r7, #7]
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d108      	bne.n	800aaba <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 800aaa8:	4b0a      	ldr	r3, [pc, #40]	; (800aad4 <NotifyCmdStatus+0x3c>)
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d00d      	beq.n	800aacc <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 800aab0:	4b08      	ldr	r3, [pc, #32]	; (800aad4 <NotifyCmdStatus+0x3c>)
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	2000      	movs	r0, #0
 800aab6:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 800aab8:	e008      	b.n	800aacc <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 800aaba:	4b06      	ldr	r3, [pc, #24]	; (800aad4 <NotifyCmdStatus+0x3c>)
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d004      	beq.n	800aacc <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 800aac2:	4b04      	ldr	r3, [pc, #16]	; (800aad4 <NotifyCmdStatus+0x3c>)
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	2001      	movs	r0, #1
 800aac8:	4798      	blx	r3
  return;
 800aaca:	bf00      	nop
 800aacc:	bf00      	nop
}
 800aace:	3708      	adds	r7, #8
 800aad0:	46bd      	mov	sp, r7
 800aad2:	bd80      	pop	{r7, pc}
 800aad4:	200010fc 	.word	0x200010fc

0800aad8 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 800aad8:	b580      	push	{r7, lr}
 800aada:	b082      	sub	sp, #8
 800aadc:	af00      	add	r7, sp, #0
 800aade:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	7a5b      	ldrb	r3, [r3, #9]
 800aae4:	2b0f      	cmp	r3, #15
 800aae6:	d003      	beq.n	800aaf0 <TlEvtReceived+0x18>
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	7a5b      	ldrb	r3, [r3, #9]
 800aaec:	2b0e      	cmp	r3, #14
 800aaee:	d107      	bne.n	800ab00 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 800aaf0:	6879      	ldr	r1, [r7, #4]
 800aaf2:	4809      	ldr	r0, [pc, #36]	; (800ab18 <TlEvtReceived+0x40>)
 800aaf4:	f000 fc24 	bl	800b340 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 800aaf8:	2000      	movs	r0, #0
 800aafa:	f000 ff29 	bl	800b950 <hci_cmd_resp_release>
 800aafe:	e006      	b.n	800ab0e <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 800ab00:	6879      	ldr	r1, [r7, #4]
 800ab02:	4806      	ldr	r0, [pc, #24]	; (800ab1c <TlEvtReceived+0x44>)
 800ab04:	f000 fc1c 	bl	800b340 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800ab08:	4804      	ldr	r0, [pc, #16]	; (800ab1c <TlEvtReceived+0x44>)
 800ab0a:	f000 ff15 	bl	800b938 <hci_notify_asynch_evt>
  }

  return;
 800ab0e:	bf00      	nop
}
 800ab10:	3708      	adds	r7, #8
 800ab12:	46bd      	mov	sp, r7
 800ab14:	bd80      	pop	{r7, pc}
 800ab16:	bf00      	nop
 800ab18:	200010f4 	.word	0x200010f4
 800ab1c:	20000938 	.word	0x20000938

0800ab20 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 800ab20:	b480      	push	{r7}
 800ab22:	b083      	sub	sp, #12
 800ab24:	af00      	add	r7, sp, #0
 800ab26:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	4a05      	ldr	r2, [pc, #20]	; (800ab40 <hci_register_io_bus+0x20>)
 800ab2c:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	4a04      	ldr	r2, [pc, #16]	; (800ab44 <hci_register_io_bus+0x24>)
 800ab32:	611a      	str	r2, [r3, #16]

  return;
 800ab34:	bf00      	nop
}
 800ab36:	370c      	adds	r7, #12
 800ab38:	46bd      	mov	sp, r7
 800ab3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab3e:	4770      	bx	lr
 800ab40:	0800ae31 	.word	0x0800ae31
 800ab44:	0800ae99 	.word	0x0800ae99

0800ab48 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800ab48:	b580      	push	{r7, lr}
 800ab4a:	b082      	sub	sp, #8
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	6078      	str	r0, [r7, #4]
 800ab50:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800ab52:	683b      	ldr	r3, [r7, #0]
 800ab54:	685b      	ldr	r3, [r3, #4]
 800ab56:	4a08      	ldr	r2, [pc, #32]	; (800ab78 <shci_init+0x30>)
 800ab58:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 800ab5a:	4a08      	ldr	r2, [pc, #32]	; (800ab7c <shci_init+0x34>)
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 800ab60:	4806      	ldr	r0, [pc, #24]	; (800ab7c <shci_init+0x34>)
 800ab62:	f000 f911 	bl	800ad88 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800ab66:	683b      	ldr	r3, [r7, #0]
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	4618      	mov	r0, r3
 800ab6c:	f000 f894 	bl	800ac98 <TlInit>

  return;
 800ab70:	bf00      	nop
}
 800ab72:	3708      	adds	r7, #8
 800ab74:	46bd      	mov	sp, r7
 800ab76:	bd80      	pop	{r7, pc}
 800ab78:	20001120 	.word	0x20001120
 800ab7c:	20001100 	.word	0x20001100

0800ab80 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 800ab80:	b580      	push	{r7, lr}
 800ab82:	b084      	sub	sp, #16
 800ab84:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800ab86:	4822      	ldr	r0, [pc, #136]	; (800ac10 <shci_user_evt_proc+0x90>)
 800ab88:	f000 fb92 	bl	800b2b0 <LST_is_empty>
 800ab8c:	4603      	mov	r3, r0
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d12b      	bne.n	800abea <shci_user_evt_proc+0x6a>
 800ab92:	4b20      	ldr	r3, [pc, #128]	; (800ac14 <shci_user_evt_proc+0x94>)
 800ab94:	781b      	ldrb	r3, [r3, #0]
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d027      	beq.n	800abea <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800ab9a:	f107 030c 	add.w	r3, r7, #12
 800ab9e:	4619      	mov	r1, r3
 800aba0:	481b      	ldr	r0, [pc, #108]	; (800ac10 <shci_user_evt_proc+0x90>)
 800aba2:	f000 fc14 	bl	800b3ce <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 800aba6:	4b1c      	ldr	r3, [pc, #112]	; (800ac18 <shci_user_evt_proc+0x98>)
 800aba8:	69db      	ldr	r3, [r3, #28]
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d00c      	beq.n	800abc8 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 800abb2:	2301      	movs	r3, #1
 800abb4:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 800abb6:	4b18      	ldr	r3, [pc, #96]	; (800ac18 <shci_user_evt_proc+0x98>)
 800abb8:	69db      	ldr	r3, [r3, #28]
 800abba:	1d3a      	adds	r2, r7, #4
 800abbc:	4610      	mov	r0, r2
 800abbe:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 800abc0:	793a      	ldrb	r2, [r7, #4]
 800abc2:	4b14      	ldr	r3, [pc, #80]	; (800ac14 <shci_user_evt_proc+0x94>)
 800abc4:	701a      	strb	r2, [r3, #0]
 800abc6:	e002      	b.n	800abce <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800abc8:	4b12      	ldr	r3, [pc, #72]	; (800ac14 <shci_user_evt_proc+0x94>)
 800abca:	2201      	movs	r2, #1
 800abcc:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 800abce:	4b11      	ldr	r3, [pc, #68]	; (800ac14 <shci_user_evt_proc+0x94>)
 800abd0:	781b      	ldrb	r3, [r3, #0]
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d004      	beq.n	800abe0 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	4618      	mov	r0, r3
 800abda:	f000 fa6d 	bl	800b0b8 <TL_MM_EvtDone>
 800abde:	e004      	b.n	800abea <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	4619      	mov	r1, r3
 800abe4:	480a      	ldr	r0, [pc, #40]	; (800ac10 <shci_user_evt_proc+0x90>)
 800abe6:	f000 fb85 	bl	800b2f4 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800abea:	4809      	ldr	r0, [pc, #36]	; (800ac10 <shci_user_evt_proc+0x90>)
 800abec:	f000 fb60 	bl	800b2b0 <LST_is_empty>
 800abf0:	4603      	mov	r3, r0
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d107      	bne.n	800ac06 <shci_user_evt_proc+0x86>
 800abf6:	4b07      	ldr	r3, [pc, #28]	; (800ac14 <shci_user_evt_proc+0x94>)
 800abf8:	781b      	ldrb	r3, [r3, #0]
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d003      	beq.n	800ac06 <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 800abfe:	4804      	ldr	r0, [pc, #16]	; (800ac10 <shci_user_evt_proc+0x90>)
 800ac00:	f7f6 fe64 	bl	80018cc <shci_notify_asynch_evt>
  }


  return;
 800ac04:	bf00      	nop
 800ac06:	bf00      	nop
}
 800ac08:	3710      	adds	r7, #16
 800ac0a:	46bd      	mov	sp, r7
 800ac0c:	bd80      	pop	{r7, pc}
 800ac0e:	bf00      	nop
 800ac10:	20000948 	.word	0x20000948
 800ac14:	20000958 	.word	0x20000958
 800ac18:	20001100 	.word	0x20001100

0800ac1c <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 800ac1c:	b580      	push	{r7, lr}
 800ac1e:	b084      	sub	sp, #16
 800ac20:	af00      	add	r7, sp, #0
 800ac22:	60ba      	str	r2, [r7, #8]
 800ac24:	607b      	str	r3, [r7, #4]
 800ac26:	4603      	mov	r3, r0
 800ac28:	81fb      	strh	r3, [r7, #14]
 800ac2a:	460b      	mov	r3, r1
 800ac2c:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 800ac2e:	2000      	movs	r0, #0
 800ac30:	f000 f864 	bl	800acfc <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 800ac34:	4b16      	ldr	r3, [pc, #88]	; (800ac90 <shci_send+0x74>)
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	89fa      	ldrh	r2, [r7, #14]
 800ac3a:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 800ac3e:	4b14      	ldr	r3, [pc, #80]	; (800ac90 <shci_send+0x74>)
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	7b7a      	ldrb	r2, [r7, #13]
 800ac44:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 800ac46:	4b12      	ldr	r3, [pc, #72]	; (800ac90 <shci_send+0x74>)
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	330c      	adds	r3, #12
 800ac4c:	7b7a      	ldrb	r2, [r7, #13]
 800ac4e:	68b9      	ldr	r1, [r7, #8]
 800ac50:	4618      	mov	r0, r3
 800ac52:	f001 fc99 	bl	800c588 <memcpy>

  shciContext.io.Send(0,0);
 800ac56:	4b0f      	ldr	r3, [pc, #60]	; (800ac94 <shci_send+0x78>)
 800ac58:	691b      	ldr	r3, [r3, #16]
 800ac5a:	2100      	movs	r1, #0
 800ac5c:	2000      	movs	r0, #0
 800ac5e:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 800ac60:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800ac64:	f7f6 fe49 	bl	80018fa <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	f103 0008 	add.w	r0, r3, #8
 800ac6e:	4b08      	ldr	r3, [pc, #32]	; (800ac90 <shci_send+0x74>)
 800ac70:	6819      	ldr	r1, [r3, #0]
 800ac72:	4b07      	ldr	r3, [pc, #28]	; (800ac90 <shci_send+0x74>)
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	789b      	ldrb	r3, [r3, #2]
 800ac78:	3303      	adds	r3, #3
 800ac7a:	461a      	mov	r2, r3
 800ac7c:	f001 fc84 	bl	800c588 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800ac80:	2001      	movs	r0, #1
 800ac82:	f000 f83b 	bl	800acfc <Cmd_SetStatus>

  return;
 800ac86:	bf00      	nop
}
 800ac88:	3710      	adds	r7, #16
 800ac8a:	46bd      	mov	sp, r7
 800ac8c:	bd80      	pop	{r7, pc}
 800ac8e:	bf00      	nop
 800ac90:	20000954 	.word	0x20000954
 800ac94:	20001100 	.word	0x20001100

0800ac98 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800ac98:	b580      	push	{r7, lr}
 800ac9a:	b086      	sub	sp, #24
 800ac9c:	af00      	add	r7, sp, #0
 800ac9e:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 800aca0:	4a10      	ldr	r2, [pc, #64]	; (800ace4 <TlInit+0x4c>)
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 800aca6:	4810      	ldr	r0, [pc, #64]	; (800ace8 <TlInit+0x50>)
 800aca8:	f000 faf2 	bl	800b290 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800acac:	2001      	movs	r0, #1
 800acae:	f000 f825 	bl	800acfc <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800acb2:	4b0e      	ldr	r3, [pc, #56]	; (800acec <TlInit+0x54>)
 800acb4:	2201      	movs	r2, #1
 800acb6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 800acb8:	4b0d      	ldr	r3, [pc, #52]	; (800acf0 <TlInit+0x58>)
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d00c      	beq.n	800acda <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 800acc4:	4b0b      	ldr	r3, [pc, #44]	; (800acf4 <TlInit+0x5c>)
 800acc6:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 800acc8:	4b0b      	ldr	r3, [pc, #44]	; (800acf8 <TlInit+0x60>)
 800acca:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 800accc:	4b08      	ldr	r3, [pc, #32]	; (800acf0 <TlInit+0x58>)
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	f107 020c 	add.w	r2, r7, #12
 800acd4:	4610      	mov	r0, r2
 800acd6:	4798      	blx	r3
  }

  return;
 800acd8:	bf00      	nop
 800acda:	bf00      	nop
}
 800acdc:	3718      	adds	r7, #24
 800acde:	46bd      	mov	sp, r7
 800ace0:	bd80      	pop	{r7, pc}
 800ace2:	bf00      	nop
 800ace4:	20000954 	.word	0x20000954
 800ace8:	20000948 	.word	0x20000948
 800acec:	20000958 	.word	0x20000958
 800acf0:	20001100 	.word	0x20001100
 800acf4:	0800ad4d 	.word	0x0800ad4d
 800acf8:	0800ad65 	.word	0x0800ad65

0800acfc <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 800acfc:	b580      	push	{r7, lr}
 800acfe:	b082      	sub	sp, #8
 800ad00:	af00      	add	r7, sp, #0
 800ad02:	4603      	mov	r3, r0
 800ad04:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 800ad06:	79fb      	ldrb	r3, [r7, #7]
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d10b      	bne.n	800ad24 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 800ad0c:	4b0d      	ldr	r3, [pc, #52]	; (800ad44 <Cmd_SetStatus+0x48>)
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d003      	beq.n	800ad1c <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 800ad14:	4b0b      	ldr	r3, [pc, #44]	; (800ad44 <Cmd_SetStatus+0x48>)
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	2000      	movs	r0, #0
 800ad1a:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 800ad1c:	4b0a      	ldr	r3, [pc, #40]	; (800ad48 <Cmd_SetStatus+0x4c>)
 800ad1e:	2200      	movs	r2, #0
 800ad20:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 800ad22:	e00b      	b.n	800ad3c <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 800ad24:	4b08      	ldr	r3, [pc, #32]	; (800ad48 <Cmd_SetStatus+0x4c>)
 800ad26:	2201      	movs	r2, #1
 800ad28:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 800ad2a:	4b06      	ldr	r3, [pc, #24]	; (800ad44 <Cmd_SetStatus+0x48>)
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d004      	beq.n	800ad3c <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 800ad32:	4b04      	ldr	r3, [pc, #16]	; (800ad44 <Cmd_SetStatus+0x48>)
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	2001      	movs	r0, #1
 800ad38:	4798      	blx	r3
  return;
 800ad3a:	bf00      	nop
 800ad3c:	bf00      	nop
}
 800ad3e:	3708      	adds	r7, #8
 800ad40:	46bd      	mov	sp, r7
 800ad42:	bd80      	pop	{r7, pc}
 800ad44:	20001120 	.word	0x20001120
 800ad48:	20000950 	.word	0x20000950

0800ad4c <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 800ad4c:	b580      	push	{r7, lr}
 800ad4e:	b082      	sub	sp, #8
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 800ad54:	2000      	movs	r0, #0
 800ad56:	f7f6 fdc5 	bl	80018e4 <shci_cmd_resp_release>

  return;
 800ad5a:	bf00      	nop
}
 800ad5c:	3708      	adds	r7, #8
 800ad5e:	46bd      	mov	sp, r7
 800ad60:	bd80      	pop	{r7, pc}
	...

0800ad64 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 800ad64:	b580      	push	{r7, lr}
 800ad66:	b082      	sub	sp, #8
 800ad68:	af00      	add	r7, sp, #0
 800ad6a:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 800ad6c:	6879      	ldr	r1, [r7, #4]
 800ad6e:	4805      	ldr	r0, [pc, #20]	; (800ad84 <TlUserEvtReceived+0x20>)
 800ad70:	f000 fae6 	bl	800b340 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800ad74:	4803      	ldr	r0, [pc, #12]	; (800ad84 <TlUserEvtReceived+0x20>)
 800ad76:	f7f6 fda9 	bl	80018cc <shci_notify_asynch_evt>

  return;
 800ad7a:	bf00      	nop
}
 800ad7c:	3708      	adds	r7, #8
 800ad7e:	46bd      	mov	sp, r7
 800ad80:	bd80      	pop	{r7, pc}
 800ad82:	bf00      	nop
 800ad84:	20000948 	.word	0x20000948

0800ad88 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 800ad88:	b480      	push	{r7}
 800ad8a:	b083      	sub	sp, #12
 800ad8c:	af00      	add	r7, sp, #0
 800ad8e:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	4a05      	ldr	r2, [pc, #20]	; (800ada8 <shci_register_io_bus+0x20>)
 800ad94:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	4a04      	ldr	r2, [pc, #16]	; (800adac <shci_register_io_bus+0x24>)
 800ad9a:	611a      	str	r2, [r3, #16]

  return;
 800ad9c:	bf00      	nop
}
 800ad9e:	370c      	adds	r7, #12
 800ada0:	46bd      	mov	sp, r7
 800ada2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada6:	4770      	bx	lr
 800ada8:	0800af45 	.word	0x0800af45
 800adac:	0800af99 	.word	0x0800af99

0800adb0 <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 800adb0:	b580      	push	{r7, lr}
 800adb2:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 800adb4:	f001 f86c 	bl	800be90 <HW_IPCC_Enable>

  return;
 800adb8:	bf00      	nop
}
 800adba:	bd80      	pop	{r7, pc}

0800adbc <TL_Init>:


void TL_Init( void )
{
 800adbc:	b580      	push	{r7, lr}
 800adbe:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 800adc0:	4b10      	ldr	r3, [pc, #64]	; (800ae04 <TL_Init+0x48>)
 800adc2:	4a11      	ldr	r2, [pc, #68]	; (800ae08 <TL_Init+0x4c>)
 800adc4:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 800adc6:	4b0f      	ldr	r3, [pc, #60]	; (800ae04 <TL_Init+0x48>)
 800adc8:	4a10      	ldr	r2, [pc, #64]	; (800ae0c <TL_Init+0x50>)
 800adca:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 800adcc:	4b0d      	ldr	r3, [pc, #52]	; (800ae04 <TL_Init+0x48>)
 800adce:	4a10      	ldr	r2, [pc, #64]	; (800ae10 <TL_Init+0x54>)
 800add0:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 800add2:	4b0c      	ldr	r3, [pc, #48]	; (800ae04 <TL_Init+0x48>)
 800add4:	4a0f      	ldr	r2, [pc, #60]	; (800ae14 <TL_Init+0x58>)
 800add6:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 800add8:	4b0a      	ldr	r3, [pc, #40]	; (800ae04 <TL_Init+0x48>)
 800adda:	4a0f      	ldr	r2, [pc, #60]	; (800ae18 <TL_Init+0x5c>)
 800addc:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 800adde:	4b09      	ldr	r3, [pc, #36]	; (800ae04 <TL_Init+0x48>)
 800ade0:	4a0e      	ldr	r2, [pc, #56]	; (800ae1c <TL_Init+0x60>)
 800ade2:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 800ade4:	4b07      	ldr	r3, [pc, #28]	; (800ae04 <TL_Init+0x48>)
 800ade6:	4a0e      	ldr	r2, [pc, #56]	; (800ae20 <TL_Init+0x64>)
 800ade8:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 800adea:	4b06      	ldr	r3, [pc, #24]	; (800ae04 <TL_Init+0x48>)
 800adec:	4a0d      	ldr	r2, [pc, #52]	; (800ae24 <TL_Init+0x68>)
 800adee:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 800adf0:	4b04      	ldr	r3, [pc, #16]	; (800ae04 <TL_Init+0x48>)
 800adf2:	4a0d      	ldr	r2, [pc, #52]	; (800ae28 <TL_Init+0x6c>)
 800adf4:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800adf6:	4b03      	ldr	r3, [pc, #12]	; (800ae04 <TL_Init+0x48>)
 800adf8:	4a0c      	ldr	r2, [pc, #48]	; (800ae2c <TL_Init+0x70>)
 800adfa:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 800adfc:	f001 f85c 	bl	800beb8 <HW_IPCC_Init>

  return;
 800ae00:	bf00      	nop
}
 800ae02:	bd80      	pop	{r7, pc}
 800ae04:	20030000 	.word	0x20030000
 800ae08:	20030028 	.word	0x20030028
 800ae0c:	20030048 	.word	0x20030048
 800ae10:	20030058 	.word	0x20030058
 800ae14:	20030068 	.word	0x20030068
 800ae18:	20030070 	.word	0x20030070
 800ae1c:	20030078 	.word	0x20030078
 800ae20:	20030080 	.word	0x20030080
 800ae24:	2003009c 	.word	0x2003009c
 800ae28:	200300a0 	.word	0x200300a0
 800ae2c:	200300ac 	.word	0x200300ac

0800ae30 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 800ae30:	b580      	push	{r7, lr}
 800ae32:	b084      	sub	sp, #16
 800ae34:	af00      	add	r7, sp, #0
 800ae36:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 800ae3c:	4811      	ldr	r0, [pc, #68]	; (800ae84 <TL_BLE_Init+0x54>)
 800ae3e:	f000 fa27 	bl	800b290 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 800ae42:	4b11      	ldr	r3, [pc, #68]	; (800ae88 <TL_BLE_Init+0x58>)
 800ae44:	685b      	ldr	r3, [r3, #4]
 800ae46:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	689a      	ldr	r2, [r3, #8]
 800ae4c:	68bb      	ldr	r3, [r7, #8]
 800ae4e:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	68da      	ldr	r2, [r3, #12]
 800ae54:	68bb      	ldr	r3, [r7, #8]
 800ae56:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 800ae58:	68bb      	ldr	r3, [r7, #8]
 800ae5a:	4a0c      	ldr	r2, [pc, #48]	; (800ae8c <TL_BLE_Init+0x5c>)
 800ae5c:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 800ae5e:	68bb      	ldr	r3, [r7, #8]
 800ae60:	4a08      	ldr	r2, [pc, #32]	; (800ae84 <TL_BLE_Init+0x54>)
 800ae62:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 800ae64:	f001 f83e 	bl	800bee4 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	4a08      	ldr	r2, [pc, #32]	; (800ae90 <TL_BLE_Init+0x60>)
 800ae6e:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	685b      	ldr	r3, [r3, #4]
 800ae74:	4a07      	ldr	r2, [pc, #28]	; (800ae94 <TL_BLE_Init+0x64>)
 800ae76:	6013      	str	r3, [r2, #0]

  return 0;
 800ae78:	2300      	movs	r3, #0
}
 800ae7a:	4618      	mov	r0, r3
 800ae7c:	3710      	adds	r7, #16
 800ae7e:	46bd      	mov	sp, r7
 800ae80:	bd80      	pop	{r7, pc}
 800ae82:	bf00      	nop
 800ae84:	200300c8 	.word	0x200300c8
 800ae88:	20030000 	.word	0x20030000
 800ae8c:	20000900 	.word	0x20000900
 800ae90:	2000112c 	.word	0x2000112c
 800ae94:	20001130 	.word	0x20001130

0800ae98 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 800ae98:	b580      	push	{r7, lr}
 800ae9a:	b082      	sub	sp, #8
 800ae9c:	af00      	add	r7, sp, #0
 800ae9e:	6078      	str	r0, [r7, #4]
 800aea0:	460b      	mov	r3, r1
 800aea2:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 800aea4:	4b09      	ldr	r3, [pc, #36]	; (800aecc <TL_BLE_SendCmd+0x34>)
 800aea6:	685b      	ldr	r3, [r3, #4]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	2201      	movs	r2, #1
 800aeac:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 800aeae:	4b07      	ldr	r3, [pc, #28]	; (800aecc <TL_BLE_SendCmd+0x34>)
 800aeb0:	685b      	ldr	r3, [r3, #4]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	4619      	mov	r1, r3
 800aeb6:	2001      	movs	r0, #1
 800aeb8:	f000 f96c 	bl	800b194 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 800aebc:	f001 f81c 	bl	800bef8 <HW_IPCC_BLE_SendCmd>

  return 0;
 800aec0:	2300      	movs	r3, #0
}
 800aec2:	4618      	mov	r0, r3
 800aec4:	3708      	adds	r7, #8
 800aec6:	46bd      	mov	sp, r7
 800aec8:	bd80      	pop	{r7, pc}
 800aeca:	bf00      	nop
 800aecc:	20030000 	.word	0x20030000

0800aed0 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 800aed0:	b580      	push	{r7, lr}
 800aed2:	b082      	sub	sp, #8
 800aed4:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 800aed6:	e01c      	b.n	800af12 <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 800aed8:	1d3b      	adds	r3, r7, #4
 800aeda:	4619      	mov	r1, r3
 800aedc:	4812      	ldr	r0, [pc, #72]	; (800af28 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800aede:	f000 fa76 	bl	800b3ce <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	7a5b      	ldrb	r3, [r3, #9]
 800aee6:	2b0f      	cmp	r3, #15
 800aee8:	d003      	beq.n	800aef2 <HW_IPCC_BLE_RxEvtNot+0x22>
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	7a5b      	ldrb	r3, [r3, #9]
 800aeee:	2b0e      	cmp	r3, #14
 800aef0:	d105      	bne.n	800aefe <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	4619      	mov	r1, r3
 800aef6:	2002      	movs	r0, #2
 800aef8:	f000 f94c 	bl	800b194 <OutputDbgTrace>
 800aefc:	e004      	b.n	800af08 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	4619      	mov	r1, r3
 800af02:	2003      	movs	r0, #3
 800af04:	f000 f946 	bl	800b194 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 800af08:	4b08      	ldr	r3, [pc, #32]	; (800af2c <HW_IPCC_BLE_RxEvtNot+0x5c>)
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	687a      	ldr	r2, [r7, #4]
 800af0e:	4610      	mov	r0, r2
 800af10:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 800af12:	4805      	ldr	r0, [pc, #20]	; (800af28 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800af14:	f000 f9cc 	bl	800b2b0 <LST_is_empty>
 800af18:	4603      	mov	r3, r0
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d0dc      	beq.n	800aed8 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 800af1e:	bf00      	nop
}
 800af20:	3708      	adds	r7, #8
 800af22:	46bd      	mov	sp, r7
 800af24:	bd80      	pop	{r7, pc}
 800af26:	bf00      	nop
 800af28:	200300c8 	.word	0x200300c8
 800af2c:	2000112c 	.word	0x2000112c

0800af30 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 800af30:	b580      	push	{r7, lr}
 800af32:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 800af34:	4b02      	ldr	r3, [pc, #8]	; (800af40 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	4798      	blx	r3

  return;
 800af3a:	bf00      	nop
}
 800af3c:	bd80      	pop	{r7, pc}
 800af3e:	bf00      	nop
 800af40:	20001130 	.word	0x20001130

0800af44 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 800af44:	b580      	push	{r7, lr}
 800af46:	b084      	sub	sp, #16
 800af48:	af00      	add	r7, sp, #0
 800af4a:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 800af50:	480d      	ldr	r0, [pc, #52]	; (800af88 <TL_SYS_Init+0x44>)
 800af52:	f000 f99d 	bl	800b290 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 800af56:	4b0d      	ldr	r3, [pc, #52]	; (800af8c <TL_SYS_Init+0x48>)
 800af58:	68db      	ldr	r3, [r3, #12]
 800af5a:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	689a      	ldr	r2, [r3, #8]
 800af60:	68bb      	ldr	r3, [r7, #8]
 800af62:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 800af64:	68bb      	ldr	r3, [r7, #8]
 800af66:	4a08      	ldr	r2, [pc, #32]	; (800af88 <TL_SYS_Init+0x44>)
 800af68:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 800af6a:	f000 ffe7 	bl	800bf3c <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	4a07      	ldr	r2, [pc, #28]	; (800af90 <TL_SYS_Init+0x4c>)
 800af74:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	685b      	ldr	r3, [r3, #4]
 800af7a:	4a06      	ldr	r2, [pc, #24]	; (800af94 <TL_SYS_Init+0x50>)
 800af7c:	6013      	str	r3, [r2, #0]

  return 0;
 800af7e:	2300      	movs	r3, #0
}
 800af80:	4618      	mov	r0, r3
 800af82:	3710      	adds	r7, #16
 800af84:	46bd      	mov	sp, r7
 800af86:	bd80      	pop	{r7, pc}
 800af88:	200300d0 	.word	0x200300d0
 800af8c:	20030000 	.word	0x20030000
 800af90:	20001134 	.word	0x20001134
 800af94:	20001138 	.word	0x20001138

0800af98 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 800af98:	b580      	push	{r7, lr}
 800af9a:	b082      	sub	sp, #8
 800af9c:	af00      	add	r7, sp, #0
 800af9e:	6078      	str	r0, [r7, #4]
 800afa0:	460b      	mov	r3, r1
 800afa2:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 800afa4:	4b09      	ldr	r3, [pc, #36]	; (800afcc <TL_SYS_SendCmd+0x34>)
 800afa6:	68db      	ldr	r3, [r3, #12]
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	2210      	movs	r2, #16
 800afac:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 800afae:	4b07      	ldr	r3, [pc, #28]	; (800afcc <TL_SYS_SendCmd+0x34>)
 800afb0:	68db      	ldr	r3, [r3, #12]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	4619      	mov	r1, r3
 800afb6:	2004      	movs	r0, #4
 800afb8:	f000 f8ec 	bl	800b194 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 800afbc:	f000 ffc8 	bl	800bf50 <HW_IPCC_SYS_SendCmd>

  return 0;
 800afc0:	2300      	movs	r3, #0
}
 800afc2:	4618      	mov	r0, r3
 800afc4:	3708      	adds	r7, #8
 800afc6:	46bd      	mov	sp, r7
 800afc8:	bd80      	pop	{r7, pc}
 800afca:	bf00      	nop
 800afcc:	20030000 	.word	0x20030000

0800afd0 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 800afd0:	b580      	push	{r7, lr}
 800afd2:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800afd4:	4b07      	ldr	r3, [pc, #28]	; (800aff4 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800afd6:	68db      	ldr	r3, [r3, #12]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	4619      	mov	r1, r3
 800afdc:	2005      	movs	r0, #5
 800afde:	f000 f8d9 	bl	800b194 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800afe2:	4b05      	ldr	r3, [pc, #20]	; (800aff8 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	4a03      	ldr	r2, [pc, #12]	; (800aff4 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800afe8:	68d2      	ldr	r2, [r2, #12]
 800afea:	6812      	ldr	r2, [r2, #0]
 800afec:	4610      	mov	r0, r2
 800afee:	4798      	blx	r3

  return;
 800aff0:	bf00      	nop
}
 800aff2:	bd80      	pop	{r7, pc}
 800aff4:	20030000 	.word	0x20030000
 800aff8:	20001134 	.word	0x20001134

0800affc <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 800affc:	b580      	push	{r7, lr}
 800affe:	b082      	sub	sp, #8
 800b000:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800b002:	e00e      	b.n	800b022 <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 800b004:	1d3b      	adds	r3, r7, #4
 800b006:	4619      	mov	r1, r3
 800b008:	480b      	ldr	r0, [pc, #44]	; (800b038 <HW_IPCC_SYS_EvtNot+0x3c>)
 800b00a:	f000 f9e0 	bl	800b3ce <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	4619      	mov	r1, r3
 800b012:	2006      	movs	r0, #6
 800b014:	f000 f8be 	bl	800b194 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 800b018:	4b08      	ldr	r3, [pc, #32]	; (800b03c <HW_IPCC_SYS_EvtNot+0x40>)
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	687a      	ldr	r2, [r7, #4]
 800b01e:	4610      	mov	r0, r2
 800b020:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800b022:	4805      	ldr	r0, [pc, #20]	; (800b038 <HW_IPCC_SYS_EvtNot+0x3c>)
 800b024:	f000 f944 	bl	800b2b0 <LST_is_empty>
 800b028:	4603      	mov	r3, r0
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d0ea      	beq.n	800b004 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 800b02e:	bf00      	nop
}
 800b030:	3708      	adds	r7, #8
 800b032:	46bd      	mov	sp, r7
 800b034:	bd80      	pop	{r7, pc}
 800b036:	bf00      	nop
 800b038:	200300d0 	.word	0x200300d0
 800b03c:	20001138 	.word	0x20001138

0800b040 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 800b040:	b580      	push	{r7, lr}
 800b042:	b082      	sub	sp, #8
 800b044:	af00      	add	r7, sp, #0
 800b046:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 800b048:	4817      	ldr	r0, [pc, #92]	; (800b0a8 <TL_MM_Init+0x68>)
 800b04a:	f000 f921 	bl	800b290 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 800b04e:	4817      	ldr	r0, [pc, #92]	; (800b0ac <TL_MM_Init+0x6c>)
 800b050:	f000 f91e 	bl	800b290 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 800b054:	4b16      	ldr	r3, [pc, #88]	; (800b0b0 <TL_MM_Init+0x70>)
 800b056:	691b      	ldr	r3, [r3, #16]
 800b058:	4a16      	ldr	r2, [pc, #88]	; (800b0b4 <TL_MM_Init+0x74>)
 800b05a:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 800b05c:	4b15      	ldr	r3, [pc, #84]	; (800b0b4 <TL_MM_Init+0x74>)
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	687a      	ldr	r2, [r7, #4]
 800b062:	6892      	ldr	r2, [r2, #8]
 800b064:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 800b066:	4b13      	ldr	r3, [pc, #76]	; (800b0b4 <TL_MM_Init+0x74>)
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	687a      	ldr	r2, [r7, #4]
 800b06c:	68d2      	ldr	r2, [r2, #12]
 800b06e:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 800b070:	4b10      	ldr	r3, [pc, #64]	; (800b0b4 <TL_MM_Init+0x74>)
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	4a0c      	ldr	r2, [pc, #48]	; (800b0a8 <TL_MM_Init+0x68>)
 800b076:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 800b078:	4b0e      	ldr	r3, [pc, #56]	; (800b0b4 <TL_MM_Init+0x74>)
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	687a      	ldr	r2, [r7, #4]
 800b07e:	6812      	ldr	r2, [r2, #0]
 800b080:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 800b082:	4b0c      	ldr	r3, [pc, #48]	; (800b0b4 <TL_MM_Init+0x74>)
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	687a      	ldr	r2, [r7, #4]
 800b088:	6852      	ldr	r2, [r2, #4]
 800b08a:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 800b08c:	4b09      	ldr	r3, [pc, #36]	; (800b0b4 <TL_MM_Init+0x74>)
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	687a      	ldr	r2, [r7, #4]
 800b092:	6912      	ldr	r2, [r2, #16]
 800b094:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 800b096:	4b07      	ldr	r3, [pc, #28]	; (800b0b4 <TL_MM_Init+0x74>)
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	687a      	ldr	r2, [r7, #4]
 800b09c:	6952      	ldr	r2, [r2, #20]
 800b09e:	619a      	str	r2, [r3, #24]

  return;
 800b0a0:	bf00      	nop
}
 800b0a2:	3708      	adds	r7, #8
 800b0a4:	46bd      	mov	sp, r7
 800b0a6:	bd80      	pop	{r7, pc}
 800b0a8:	200300b8 	.word	0x200300b8
 800b0ac:	20001124 	.word	0x20001124
 800b0b0:	20030000 	.word	0x20030000
 800b0b4:	2000113c 	.word	0x2000113c

0800b0b8 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 800b0b8:	b580      	push	{r7, lr}
 800b0ba:	b082      	sub	sp, #8
 800b0bc:	af00      	add	r7, sp, #0
 800b0be:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 800b0c0:	6879      	ldr	r1, [r7, #4]
 800b0c2:	4807      	ldr	r0, [pc, #28]	; (800b0e0 <TL_MM_EvtDone+0x28>)
 800b0c4:	f000 f93c 	bl	800b340 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 800b0c8:	6879      	ldr	r1, [r7, #4]
 800b0ca:	2000      	movs	r0, #0
 800b0cc:	f000 f862 	bl	800b194 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 800b0d0:	4804      	ldr	r0, [pc, #16]	; (800b0e4 <TL_MM_EvtDone+0x2c>)
 800b0d2:	f000 ff63 	bl	800bf9c <HW_IPCC_MM_SendFreeBuf>

  return;
 800b0d6:	bf00      	nop
}
 800b0d8:	3708      	adds	r7, #8
 800b0da:	46bd      	mov	sp, r7
 800b0dc:	bd80      	pop	{r7, pc}
 800b0de:	bf00      	nop
 800b0e0:	20001124 	.word	0x20001124
 800b0e4:	0800b0e9 	.word	0x0800b0e9

0800b0e8 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 800b0e8:	b580      	push	{r7, lr}
 800b0ea:	b082      	sub	sp, #8
 800b0ec:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800b0ee:	e00c      	b.n	800b10a <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 800b0f0:	1d3b      	adds	r3, r7, #4
 800b0f2:	4619      	mov	r1, r3
 800b0f4:	480a      	ldr	r0, [pc, #40]	; (800b120 <SendFreeBuf+0x38>)
 800b0f6:	f000 f96a 	bl	800b3ce <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 800b0fa:	4b0a      	ldr	r3, [pc, #40]	; (800b124 <SendFreeBuf+0x3c>)
 800b0fc:	691b      	ldr	r3, [r3, #16]
 800b0fe:	691b      	ldr	r3, [r3, #16]
 800b100:	687a      	ldr	r2, [r7, #4]
 800b102:	4611      	mov	r1, r2
 800b104:	4618      	mov	r0, r3
 800b106:	f000 f91b 	bl	800b340 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800b10a:	4805      	ldr	r0, [pc, #20]	; (800b120 <SendFreeBuf+0x38>)
 800b10c:	f000 f8d0 	bl	800b2b0 <LST_is_empty>
 800b110:	4603      	mov	r3, r0
 800b112:	2b00      	cmp	r3, #0
 800b114:	d0ec      	beq.n	800b0f0 <SendFreeBuf+0x8>
  }

  return;
 800b116:	bf00      	nop
}
 800b118:	3708      	adds	r7, #8
 800b11a:	46bd      	mov	sp, r7
 800b11c:	bd80      	pop	{r7, pc}
 800b11e:	bf00      	nop
 800b120:	20001124 	.word	0x20001124
 800b124:	20030000 	.word	0x20030000

0800b128 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 800b128:	b580      	push	{r7, lr}
 800b12a:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 800b12c:	4805      	ldr	r0, [pc, #20]	; (800b144 <TL_TRACES_Init+0x1c>)
 800b12e:	f000 f8af 	bl	800b290 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 800b132:	4b05      	ldr	r3, [pc, #20]	; (800b148 <TL_TRACES_Init+0x20>)
 800b134:	695b      	ldr	r3, [r3, #20]
 800b136:	4a03      	ldr	r2, [pc, #12]	; (800b144 <TL_TRACES_Init+0x1c>)
 800b138:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 800b13a:	f000 ff65 	bl	800c008 <HW_IPCC_TRACES_Init>

  return;
 800b13e:	bf00      	nop
}
 800b140:	bd80      	pop	{r7, pc}
 800b142:	bf00      	nop
 800b144:	200300c0 	.word	0x200300c0
 800b148:	20030000 	.word	0x20030000

0800b14c <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 800b14c:	b580      	push	{r7, lr}
 800b14e:	b082      	sub	sp, #8
 800b150:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800b152:	e008      	b.n	800b166 <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 800b154:	1d3b      	adds	r3, r7, #4
 800b156:	4619      	mov	r1, r3
 800b158:	4808      	ldr	r0, [pc, #32]	; (800b17c <HW_IPCC_TRACES_EvtNot+0x30>)
 800b15a:	f000 f938 	bl	800b3ce <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	4618      	mov	r0, r3
 800b162:	f000 f80d 	bl	800b180 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800b166:	4805      	ldr	r0, [pc, #20]	; (800b17c <HW_IPCC_TRACES_EvtNot+0x30>)
 800b168:	f000 f8a2 	bl	800b2b0 <LST_is_empty>
 800b16c:	4603      	mov	r3, r0
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d0f0      	beq.n	800b154 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 800b172:	bf00      	nop
}
 800b174:	3708      	adds	r7, #8
 800b176:	46bd      	mov	sp, r7
 800b178:	bd80      	pop	{r7, pc}
 800b17a:	bf00      	nop
 800b17c:	200300c0 	.word	0x200300c0

0800b180 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 800b180:	b480      	push	{r7}
 800b182:	b083      	sub	sp, #12
 800b184:	af00      	add	r7, sp, #0
 800b186:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 800b188:	bf00      	nop
 800b18a:	370c      	adds	r7, #12
 800b18c:	46bd      	mov	sp, r7
 800b18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b192:	4770      	bx	lr

0800b194 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 800b194:	b480      	push	{r7}
 800b196:	b085      	sub	sp, #20
 800b198:	af00      	add	r7, sp, #0
 800b19a:	4603      	mov	r3, r0
 800b19c:	6039      	str	r1, [r7, #0]
 800b19e:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 800b1a0:	79fb      	ldrb	r3, [r7, #7]
 800b1a2:	2b06      	cmp	r3, #6
 800b1a4:	d845      	bhi.n	800b232 <OutputDbgTrace+0x9e>
 800b1a6:	a201      	add	r2, pc, #4	; (adr r2, 800b1ac <OutputDbgTrace+0x18>)
 800b1a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1ac:	0800b1c9 	.word	0x0800b1c9
 800b1b0:	0800b1ed 	.word	0x0800b1ed
 800b1b4:	0800b1f3 	.word	0x0800b1f3
 800b1b8:	0800b207 	.word	0x0800b207
 800b1bc:	0800b213 	.word	0x0800b213
 800b1c0:	0800b219 	.word	0x0800b219
 800b1c4:	0800b227 	.word	0x0800b227
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800b1c8:	683b      	ldr	r3, [r7, #0]
 800b1ca:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	7a5b      	ldrb	r3, [r3, #9]
 800b1d0:	2bff      	cmp	r3, #255	; 0xff
 800b1d2:	d005      	beq.n	800b1e0 <OutputDbgTrace+0x4c>
 800b1d4:	2bff      	cmp	r3, #255	; 0xff
 800b1d6:	dc05      	bgt.n	800b1e4 <OutputDbgTrace+0x50>
 800b1d8:	2b0e      	cmp	r3, #14
 800b1da:	d005      	beq.n	800b1e8 <OutputDbgTrace+0x54>
 800b1dc:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 800b1de:	e001      	b.n	800b1e4 <OutputDbgTrace+0x50>
          break;
 800b1e0:	bf00      	nop
 800b1e2:	e027      	b.n	800b234 <OutputDbgTrace+0xa0>
          break;
 800b1e4:	bf00      	nop
 800b1e6:	e025      	b.n	800b234 <OutputDbgTrace+0xa0>
          break;
 800b1e8:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 800b1ea:	e023      	b.n	800b234 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800b1ec:	683b      	ldr	r3, [r7, #0]
 800b1ee:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800b1f0:	e020      	b.n	800b234 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800b1f2:	683b      	ldr	r3, [r7, #0]
 800b1f4:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	7a5b      	ldrb	r3, [r3, #9]
 800b1fa:	2b0e      	cmp	r3, #14
 800b1fc:	d001      	beq.n	800b202 <OutputDbgTrace+0x6e>
 800b1fe:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800b200:	e000      	b.n	800b204 <OutputDbgTrace+0x70>
          break;
 800b202:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800b204:	e016      	b.n	800b234 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800b206:	683b      	ldr	r3, [r7, #0]
 800b208:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	7a5b      	ldrb	r3, [r3, #9]
 800b20e:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800b210:	e010      	b.n	800b234 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800b212:	683b      	ldr	r3, [r7, #0]
 800b214:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800b216:	e00d      	b.n	800b234 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800b218:	683b      	ldr	r3, [r7, #0]
 800b21a:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	7a5b      	ldrb	r3, [r3, #9]
 800b220:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800b222:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800b224:	e006      	b.n	800b234 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800b226:	683b      	ldr	r3, [r7, #0]
 800b228:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	7a5b      	ldrb	r3, [r3, #9]
 800b22e:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800b230:	e000      	b.n	800b234 <OutputDbgTrace+0xa0>

    default:
      break;
 800b232:	bf00      	nop
  }

  return;
 800b234:	bf00      	nop
}
 800b236:	3714      	adds	r7, #20
 800b238:	46bd      	mov	sp, r7
 800b23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b23e:	4770      	bx	lr

0800b240 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 800b240:	b480      	push	{r7}
 800b242:	b085      	sub	sp, #20
 800b244:	af00      	add	r7, sp, #0
 800b246:	4603      	mov	r3, r0
 800b248:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 800b24a:	4b0f      	ldr	r3, [pc, #60]	; (800b288 <OTP_Read+0x48>)
 800b24c:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800b24e:	e002      	b.n	800b256 <OTP_Read+0x16>
  {
    p_id -= 8 ;
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	3b08      	subs	r3, #8
 800b254:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	3307      	adds	r3, #7
 800b25a:	781b      	ldrb	r3, [r3, #0]
 800b25c:	79fa      	ldrb	r2, [r7, #7]
 800b25e:	429a      	cmp	r2, r3
 800b260:	d003      	beq.n	800b26a <OTP_Read+0x2a>
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	4a09      	ldr	r2, [pc, #36]	; (800b28c <OTP_Read+0x4c>)
 800b266:	4293      	cmp	r3, r2
 800b268:	d1f2      	bne.n	800b250 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	3307      	adds	r3, #7
 800b26e:	781b      	ldrb	r3, [r3, #0]
 800b270:	79fa      	ldrb	r2, [r7, #7]
 800b272:	429a      	cmp	r2, r3
 800b274:	d001      	beq.n	800b27a <OTP_Read+0x3a>
  {
    p_id = 0 ;
 800b276:	2300      	movs	r3, #0
 800b278:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 800b27a:	68fb      	ldr	r3, [r7, #12]
}
 800b27c:	4618      	mov	r0, r3
 800b27e:	3714      	adds	r7, #20
 800b280:	46bd      	mov	sp, r7
 800b282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b286:	4770      	bx	lr
 800b288:	1fff73f8 	.word	0x1fff73f8
 800b28c:	1fff7000 	.word	0x1fff7000

0800b290 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 800b290:	b480      	push	{r7}
 800b292:	b083      	sub	sp, #12
 800b294:	af00      	add	r7, sp, #0
 800b296:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	687a      	ldr	r2, [r7, #4]
 800b29c:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	687a      	ldr	r2, [r7, #4]
 800b2a2:	605a      	str	r2, [r3, #4]
}
 800b2a4:	bf00      	nop
 800b2a6:	370c      	adds	r7, #12
 800b2a8:	46bd      	mov	sp, r7
 800b2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ae:	4770      	bx	lr

0800b2b0 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 800b2b0:	b480      	push	{r7}
 800b2b2:	b087      	sub	sp, #28
 800b2b4:	af00      	add	r7, sp, #0
 800b2b6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b2b8:	f3ef 8310 	mrs	r3, PRIMASK
 800b2bc:	60fb      	str	r3, [r7, #12]
  return(result);
 800b2be:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800b2c0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800b2c2:	b672      	cpsid	i
}
 800b2c4:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	687a      	ldr	r2, [r7, #4]
 800b2cc:	429a      	cmp	r2, r3
 800b2ce:	d102      	bne.n	800b2d6 <LST_is_empty+0x26>
  {
    return_value = TRUE;
 800b2d0:	2301      	movs	r3, #1
 800b2d2:	75fb      	strb	r3, [r7, #23]
 800b2d4:	e001      	b.n	800b2da <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 800b2d6:	2300      	movs	r3, #0
 800b2d8:	75fb      	strb	r3, [r7, #23]
 800b2da:	693b      	ldr	r3, [r7, #16]
 800b2dc:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b2de:	68bb      	ldr	r3, [r7, #8]
 800b2e0:	f383 8810 	msr	PRIMASK, r3
}
 800b2e4:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 800b2e6:	7dfb      	ldrb	r3, [r7, #23]
}
 800b2e8:	4618      	mov	r0, r3
 800b2ea:	371c      	adds	r7, #28
 800b2ec:	46bd      	mov	sp, r7
 800b2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f2:	4770      	bx	lr

0800b2f4 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 800b2f4:	b480      	push	{r7}
 800b2f6:	b087      	sub	sp, #28
 800b2f8:	af00      	add	r7, sp, #0
 800b2fa:	6078      	str	r0, [r7, #4]
 800b2fc:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b2fe:	f3ef 8310 	mrs	r3, PRIMASK
 800b302:	60fb      	str	r3, [r7, #12]
  return(result);
 800b304:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800b306:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b308:	b672      	cpsid	i
}
 800b30a:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	681a      	ldr	r2, [r3, #0]
 800b310:	683b      	ldr	r3, [r7, #0]
 800b312:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800b314:	683b      	ldr	r3, [r7, #0]
 800b316:	687a      	ldr	r2, [r7, #4]
 800b318:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	683a      	ldr	r2, [r7, #0]
 800b31e:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800b320:	683b      	ldr	r3, [r7, #0]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	683a      	ldr	r2, [r7, #0]
 800b326:	605a      	str	r2, [r3, #4]
 800b328:	697b      	ldr	r3, [r7, #20]
 800b32a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b32c:	693b      	ldr	r3, [r7, #16]
 800b32e:	f383 8810 	msr	PRIMASK, r3
}
 800b332:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800b334:	bf00      	nop
 800b336:	371c      	adds	r7, #28
 800b338:	46bd      	mov	sp, r7
 800b33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b33e:	4770      	bx	lr

0800b340 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 800b340:	b480      	push	{r7}
 800b342:	b087      	sub	sp, #28
 800b344:	af00      	add	r7, sp, #0
 800b346:	6078      	str	r0, [r7, #4]
 800b348:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b34a:	f3ef 8310 	mrs	r3, PRIMASK
 800b34e:	60fb      	str	r3, [r7, #12]
  return(result);
 800b350:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800b352:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b354:	b672      	cpsid	i
}
 800b356:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 800b358:	683b      	ldr	r3, [r7, #0]
 800b35a:	687a      	ldr	r2, [r7, #4]
 800b35c:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	685a      	ldr	r2, [r3, #4]
 800b362:	683b      	ldr	r3, [r7, #0]
 800b364:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	683a      	ldr	r2, [r7, #0]
 800b36a:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800b36c:	683b      	ldr	r3, [r7, #0]
 800b36e:	685b      	ldr	r3, [r3, #4]
 800b370:	683a      	ldr	r2, [r7, #0]
 800b372:	601a      	str	r2, [r3, #0]
 800b374:	697b      	ldr	r3, [r7, #20]
 800b376:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b378:	693b      	ldr	r3, [r7, #16]
 800b37a:	f383 8810 	msr	PRIMASK, r3
}
 800b37e:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800b380:	bf00      	nop
 800b382:	371c      	adds	r7, #28
 800b384:	46bd      	mov	sp, r7
 800b386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b38a:	4770      	bx	lr

0800b38c <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 800b38c:	b480      	push	{r7}
 800b38e:	b087      	sub	sp, #28
 800b390:	af00      	add	r7, sp, #0
 800b392:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b394:	f3ef 8310 	mrs	r3, PRIMASK
 800b398:	60fb      	str	r3, [r7, #12]
  return(result);
 800b39a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800b39c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b39e:	b672      	cpsid	i
}
 800b3a0:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	685b      	ldr	r3, [r3, #4]
 800b3a6:	687a      	ldr	r2, [r7, #4]
 800b3a8:	6812      	ldr	r2, [r2, #0]
 800b3aa:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	687a      	ldr	r2, [r7, #4]
 800b3b2:	6852      	ldr	r2, [r2, #4]
 800b3b4:	605a      	str	r2, [r3, #4]
 800b3b6:	697b      	ldr	r3, [r7, #20]
 800b3b8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b3ba:	693b      	ldr	r3, [r7, #16]
 800b3bc:	f383 8810 	msr	PRIMASK, r3
}
 800b3c0:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800b3c2:	bf00      	nop
 800b3c4:	371c      	adds	r7, #28
 800b3c6:	46bd      	mov	sp, r7
 800b3c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3cc:	4770      	bx	lr

0800b3ce <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800b3ce:	b580      	push	{r7, lr}
 800b3d0:	b086      	sub	sp, #24
 800b3d2:	af00      	add	r7, sp, #0
 800b3d4:	6078      	str	r0, [r7, #4]
 800b3d6:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b3d8:	f3ef 8310 	mrs	r3, PRIMASK
 800b3dc:	60fb      	str	r3, [r7, #12]
  return(result);
 800b3de:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800b3e0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b3e2:	b672      	cpsid	i
}
 800b3e4:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	681a      	ldr	r2, [r3, #0]
 800b3ea:	683b      	ldr	r3, [r7, #0]
 800b3ec:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	4618      	mov	r0, r3
 800b3f4:	f7ff ffca 	bl	800b38c <LST_remove_node>
 800b3f8:	697b      	ldr	r3, [r7, #20]
 800b3fa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b3fc:	693b      	ldr	r3, [r7, #16]
 800b3fe:	f383 8810 	msr	PRIMASK, r3
}
 800b402:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800b404:	bf00      	nop
 800b406:	3718      	adds	r7, #24
 800b408:	46bd      	mov	sp, r7
 800b40a:	bd80      	pop	{r7, pc}

0800b40c <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 800b40c:	b480      	push	{r7}
 800b40e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 800b410:	4b03      	ldr	r3, [pc, #12]	; (800b420 <LL_FLASH_GetUDN+0x14>)
 800b412:	681b      	ldr	r3, [r3, #0]
}
 800b414:	4618      	mov	r0, r3
 800b416:	46bd      	mov	sp, r7
 800b418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b41c:	4770      	bx	lr
 800b41e:	bf00      	nop
 800b420:	1fff7580 	.word	0x1fff7580

0800b424 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 800b424:	b480      	push	{r7}
 800b426:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 800b428:	4b03      	ldr	r3, [pc, #12]	; (800b438 <LL_FLASH_GetDeviceID+0x14>)
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	b2db      	uxtb	r3, r3
}
 800b42e:	4618      	mov	r0, r3
 800b430:	46bd      	mov	sp, r7
 800b432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b436:	4770      	bx	lr
 800b438:	1fff7584 	.word	0x1fff7584

0800b43c <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 800b43c:	b480      	push	{r7}
 800b43e:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 800b440:	4b03      	ldr	r3, [pc, #12]	; (800b450 <LL_FLASH_GetSTCompanyID+0x14>)
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	0a1b      	lsrs	r3, r3, #8
}
 800b446:	4618      	mov	r0, r3
 800b448:	46bd      	mov	sp, r7
 800b44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b44e:	4770      	bx	lr
 800b450:	1fff7584 	.word	0x1fff7584

0800b454 <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 800b454:	b5b0      	push	{r4, r5, r7, lr}
 800b456:	b090      	sub	sp, #64	; 0x40
 800b458:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
#if (RADIO_ACTIVITY_EVENT != 0)
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800b45a:	2392      	movs	r3, #146	; 0x92
 800b45c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#endif /* RADIO_ACTIVITY_EVENT != 0 */
  /* USER CODE BEGIN APP_BLE_Init_1 */

  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 800b460:	4b25      	ldr	r3, [pc, #148]	; (800b4f8 <APP_BLE_Init+0xa4>)
 800b462:	1d3c      	adds	r4, r7, #4
 800b464:	461d      	mov	r5, r3
 800b466:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b468:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b46a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b46c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b46e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b470:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b472:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800b476:	c403      	stmia	r4!, {r0, r1}
 800b478:	8022      	strh	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 800b47a:	f000 f905 	bl	800b688 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 800b47e:	2101      	movs	r1, #1
 800b480:	2002      	movs	r0, #2
 800b482:	f000 fde9 	bl	800c058 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 800b486:	4a1d      	ldr	r2, [pc, #116]	; (800b4fc <APP_BLE_Init+0xa8>)
 800b488:	2100      	movs	r1, #0
 800b48a:	2002      	movs	r0, #2
 800b48c:	f000 ff10 	bl	800c2b0 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 800b490:	1d3b      	adds	r3, r7, #4
 800b492:	4618      	mov	r0, r3
 800b494:	f7ff f8d0 	bl	800a638 <SHCI_C2_BLE_Init>
 800b498:	4603      	mov	r3, r0
 800b49a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  if (status != SHCI_Success)
 800b49e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d001      	beq.n	800b4aa <APP_BLE_Init+0x56>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 800b4a6:	f7f7 fb7d 	bl	8002ba4 <Error_Handler>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 800b4aa:	f000 f903 	bl	800b6b4 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 800b4ae:	f7ff f81d 	bl	800a4ec <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800b4b2:	4b13      	ldr	r3, [pc, #76]	; (800b500 <APP_BLE_Init+0xac>)
 800b4b4:	2200      	movs	r2, #0
 800b4b6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 800b4ba:	4b11      	ldr	r3, [pc, #68]	; (800b500 <APP_BLE_Init+0xac>)
 800b4bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b4c0:	82da      	strh	r2, [r3, #22]

  /**
   * From here, all initialization are BLE application specific
   */

  UTIL_SEQ_RegTask(1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 800b4c2:	4a10      	ldr	r2, [pc, #64]	; (800b504 <APP_BLE_Init+0xb0>)
 800b4c4:	2100      	movs	r1, #0
 800b4c6:	2001      	movs	r0, #1
 800b4c8:	f000 fef2 	bl	800c2b0 <UTIL_SEQ_RegTask>

  /**
   * Initialization of ADV - Ad Manufacturer Element - Support OTA Bit Mask
   */
#if (RADIO_ACTIVITY_EVENT != 0)
  ret = aci_hal_set_radio_activity_mask(0x0006);
 800b4cc:	2006      	movs	r0, #6
 800b4ce:	f7fe fe80 	bl	800a1d2 <aci_hal_set_radio_activity_mask>
 800b4d2:	4603      	mov	r3, r0
 800b4d4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

  /**
   * Initialize Custom Template Application
   */
  Custom_APP_Init();
 800b4d8:	f000 fa9b 	bl	800ba12 <Custom_APP_Init>
  /* USER CODE END APP_BLE_Init_3 */

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 800b4dc:	4b08      	ldr	r3, [pc, #32]	; (800b500 <APP_BLE_Init+0xac>)
 800b4de:	2200      	movs	r2, #0
 800b4e0:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 800b4e2:	4b07      	ldr	r3, [pc, #28]	; (800b500 <APP_BLE_Init+0xac>)
 800b4e4:	2200      	movs	r2, #0
 800b4e6:	761a      	strb	r2, [r3, #24]

  /**
   * Start to Advertise to be connected by a Client
   */
  Adv_Request(APP_BLE_FAST_ADV);
 800b4e8:	2001      	movs	r0, #1
 800b4ea:	f000 f997 	bl	800b81c <Adv_Request>

  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */

  return;
 800b4ee:	bf00      	nop
}
 800b4f0:	3740      	adds	r7, #64	; 0x40
 800b4f2:	46bd      	mov	sp, r7
 800b4f4:	bdb0      	pop	{r4, r5, r7, pc}
 800b4f6:	bf00      	nop
 800b4f8:	0800d7a8 	.word	0x0800d7a8
 800b4fc:	0800a855 	.word	0x0800a855
 800b500:	20001148 	.word	0x20001148
 800b504:	0800b905 	.word	0x0800b905

0800b508 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 800b508:	b580      	push	{r7, lr}
 800b50a:	b08a      	sub	sp, #40	; 0x28
 800b50c:	af00      	add	r7, sp, #0
 800b50e:	6078      	str	r0, [r7, #4]
  hci_event_pckt    *p_event_pckt;
  evt_le_meta_event *p_meta_evt;
  evt_blecore_aci   *p_blecore_evt;
  tBleStatus        ret = BLE_STATUS_INVALID_PARAMS;
 800b510:	2392      	movs	r3, #146	; 0x92
 800b512:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	3301      	adds	r3, #1
 800b51a:	623b      	str	r3, [r7, #32]

  switch (p_event_pckt->evt)
 800b51c:	6a3b      	ldr	r3, [r7, #32]
 800b51e:	781b      	ldrb	r3, [r3, #0]
 800b520:	2bff      	cmp	r3, #255	; 0xff
 800b522:	d053      	beq.n	800b5cc <SVCCTL_App_Notification+0xc4>
 800b524:	2bff      	cmp	r3, #255	; 0xff
 800b526:	f300 80a1 	bgt.w	800b66c <SVCCTL_App_Notification+0x164>
 800b52a:	2b05      	cmp	r3, #5
 800b52c:	d002      	beq.n	800b534 <SVCCTL_App_Notification+0x2c>
 800b52e:	2b3e      	cmp	r3, #62	; 0x3e
 800b530:	d020      	beq.n	800b574 <SVCCTL_App_Notification+0x6c>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 800b532:	e09b      	b.n	800b66c <SVCCTL_App_Notification+0x164>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
 800b534:	6a3b      	ldr	r3, [r7, #32]
 800b536:	3302      	adds	r3, #2
 800b538:	60fb      	str	r3, [r7, #12]
      if (p_disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800b540:	b29a      	uxth	r2, r3
 800b542:	4b4e      	ldr	r3, [pc, #312]	; (800b67c <SVCCTL_App_Notification+0x174>)
 800b544:	8adb      	ldrh	r3, [r3, #22]
 800b546:	429a      	cmp	r2, r3
 800b548:	d106      	bne.n	800b558 <SVCCTL_App_Notification+0x50>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 800b54a:	4b4c      	ldr	r3, [pc, #304]	; (800b67c <SVCCTL_App_Notification+0x174>)
 800b54c:	2200      	movs	r2, #0
 800b54e:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800b550:	4b4a      	ldr	r3, [pc, #296]	; (800b67c <SVCCTL_App_Notification+0x174>)
 800b552:	2200      	movs	r2, #0
 800b554:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
      Adv_Request(APP_BLE_FAST_ADV);
 800b558:	2001      	movs	r0, #1
 800b55a:	f000 f95f 	bl	800b81c <Adv_Request>
      HandleNotification.Custom_Evt_Opcode = CUSTOM_DISCON_HANDLE_EVT;
 800b55e:	4b48      	ldr	r3, [pc, #288]	; (800b680 <SVCCTL_App_Notification+0x178>)
 800b560:	2201      	movs	r2, #1
 800b562:	701a      	strb	r2, [r3, #0]
      HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800b564:	4b45      	ldr	r3, [pc, #276]	; (800b67c <SVCCTL_App_Notification+0x174>)
 800b566:	8ada      	ldrh	r2, [r3, #22]
 800b568:	4b45      	ldr	r3, [pc, #276]	; (800b680 <SVCCTL_App_Notification+0x178>)
 800b56a:	805a      	strh	r2, [r3, #2]
      Custom_APP_Notification(&HandleNotification);
 800b56c:	4844      	ldr	r0, [pc, #272]	; (800b680 <SVCCTL_App_Notification+0x178>)
 800b56e:	f000 fa3c 	bl	800b9ea <Custom_APP_Notification>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 800b572:	e07e      	b.n	800b672 <SVCCTL_App_Notification+0x16a>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 800b574:	6a3b      	ldr	r3, [r7, #32]
 800b576:	3302      	adds	r3, #2
 800b578:	617b      	str	r3, [r7, #20]
      switch (p_meta_evt->subevent)
 800b57a:	697b      	ldr	r3, [r7, #20]
 800b57c:	781b      	ldrb	r3, [r3, #0]
 800b57e:	2b01      	cmp	r3, #1
 800b580:	d001      	beq.n	800b586 <SVCCTL_App_Notification+0x7e>
 800b582:	2b03      	cmp	r3, #3
          break;
 800b584:	e021      	b.n	800b5ca <SVCCTL_App_Notification+0xc2>
          p_connection_complete_event = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
 800b586:	697b      	ldr	r3, [r7, #20]
 800b588:	3301      	adds	r3, #1
 800b58a:	613b      	str	r3, [r7, #16]
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 800b58c:	4b3b      	ldr	r3, [pc, #236]	; (800b67c <SVCCTL_App_Notification+0x174>)
 800b58e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b592:	2b04      	cmp	r3, #4
 800b594:	d104      	bne.n	800b5a0 <SVCCTL_App_Notification+0x98>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 800b596:	4b39      	ldr	r3, [pc, #228]	; (800b67c <SVCCTL_App_Notification+0x174>)
 800b598:	2206      	movs	r2, #6
 800b59a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 800b59e:	e003      	b.n	800b5a8 <SVCCTL_App_Notification+0xa0>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 800b5a0:	4b36      	ldr	r3, [pc, #216]	; (800b67c <SVCCTL_App_Notification+0x174>)
 800b5a2:	2205      	movs	r2, #5
 800b5a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_connection_complete_event->Connection_Handle;
 800b5a8:	693b      	ldr	r3, [r7, #16]
 800b5aa:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800b5ae:	b29a      	uxth	r2, r3
 800b5b0:	4b32      	ldr	r3, [pc, #200]	; (800b67c <SVCCTL_App_Notification+0x174>)
 800b5b2:	82da      	strh	r2, [r3, #22]
          HandleNotification.Custom_Evt_Opcode = CUSTOM_CONN_HANDLE_EVT;
 800b5b4:	4b32      	ldr	r3, [pc, #200]	; (800b680 <SVCCTL_App_Notification+0x178>)
 800b5b6:	2200      	movs	r2, #0
 800b5b8:	701a      	strb	r2, [r3, #0]
          HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800b5ba:	4b30      	ldr	r3, [pc, #192]	; (800b67c <SVCCTL_App_Notification+0x174>)
 800b5bc:	8ada      	ldrh	r2, [r3, #22]
 800b5be:	4b30      	ldr	r3, [pc, #192]	; (800b680 <SVCCTL_App_Notification+0x178>)
 800b5c0:	805a      	strh	r2, [r3, #2]
          Custom_APP_Notification(&HandleNotification);
 800b5c2:	482f      	ldr	r0, [pc, #188]	; (800b680 <SVCCTL_App_Notification+0x178>)
 800b5c4:	f000 fa11 	bl	800b9ea <Custom_APP_Notification>
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 800b5c8:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 800b5ca:	e052      	b.n	800b672 <SVCCTL_App_Notification+0x16a>
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 800b5cc:	6a3b      	ldr	r3, [r7, #32]
 800b5ce:	3302      	adds	r3, #2
 800b5d0:	61fb      	str	r3, [r7, #28]
      switch (p_blecore_evt->ecode)
 800b5d2:	69fb      	ldr	r3, [r7, #28]
 800b5d4:	881b      	ldrh	r3, [r3, #0]
 800b5d6:	b29b      	uxth	r3, r3
 800b5d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b5dc:	d040      	beq.n	800b660 <SVCCTL_App_Notification+0x158>
 800b5de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b5e2:	dc45      	bgt.n	800b670 <SVCCTL_App_Notification+0x168>
 800b5e4:	2b04      	cmp	r3, #4
 800b5e6:	d03d      	beq.n	800b664 <SVCCTL_App_Notification+0x15c>
 800b5e8:	2b04      	cmp	r3, #4
 800b5ea:	db41      	blt.n	800b670 <SVCCTL_App_Notification+0x168>
 800b5ec:	f240 420a 	movw	r2, #1034	; 0x40a
 800b5f0:	4293      	cmp	r3, r2
 800b5f2:	dc3d      	bgt.n	800b670 <SVCCTL_App_Notification+0x168>
 800b5f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b5f8:	dd3a      	ble.n	800b670 <SVCCTL_App_Notification+0x168>
 800b5fa:	f2a3 4301 	subw	r3, r3, #1025	; 0x401
 800b5fe:	2b09      	cmp	r3, #9
 800b600:	d836      	bhi.n	800b670 <SVCCTL_App_Notification+0x168>
 800b602:	a201      	add	r2, pc, #4	; (adr r2, 800b608 <SVCCTL_App_Notification+0x100>)
 800b604:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b608:	0800b659 	.word	0x0800b659
 800b60c:	0800b631 	.word	0x0800b631
 800b610:	0800b671 	.word	0x0800b671
 800b614:	0800b671 	.word	0x0800b671
 800b618:	0800b671 	.word	0x0800b671
 800b61c:	0800b671 	.word	0x0800b671
 800b620:	0800b669 	.word	0x0800b669
 800b624:	0800b671 	.word	0x0800b671
 800b628:	0800b645 	.word	0x0800b645
 800b62c:	0800b669 	.word	0x0800b669
          ret = aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, CFG_FIXED_PIN);
 800b630:	4b12      	ldr	r3, [pc, #72]	; (800b67c <SVCCTL_App_Notification+0x174>)
 800b632:	8adb      	ldrh	r3, [r3, #22]
 800b634:	4913      	ldr	r1, [pc, #76]	; (800b684 <SVCCTL_App_Notification+0x17c>)
 800b636:	4618      	mov	r0, r3
 800b638:	f7fe f822 	bl	8009680 <aci_gap_pass_key_resp>
 800b63c:	4603      	mov	r3, r0
 800b63e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          break;
 800b642:	e012      	b.n	800b66a <SVCCTL_App_Notification+0x162>
          ret = aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES);
 800b644:	4b0d      	ldr	r3, [pc, #52]	; (800b67c <SVCCTL_App_Notification+0x174>)
 800b646:	8adb      	ldrh	r3, [r3, #22]
 800b648:	2101      	movs	r1, #1
 800b64a:	4618      	mov	r0, r3
 800b64c:	f7fe f9c2 	bl	80099d4 <aci_gap_numeric_comparison_value_confirm_yesno>
 800b650:	4603      	mov	r3, r0
 800b652:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          break;
 800b656:	e008      	b.n	800b66a <SVCCTL_App_Notification+0x162>
          p_pairing_complete = (aci_gap_pairing_complete_event_rp0*)p_blecore_evt->data;
 800b658:	69fb      	ldr	r3, [r7, #28]
 800b65a:	3302      	adds	r3, #2
 800b65c:	61bb      	str	r3, [r7, #24]
          break;
 800b65e:	e004      	b.n	800b66a <SVCCTL_App_Notification+0x162>
          break;
 800b660:	bf00      	nop
 800b662:	e005      	b.n	800b670 <SVCCTL_App_Notification+0x168>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 800b664:	bf00      	nop
 800b666:	e003      	b.n	800b670 <SVCCTL_App_Notification+0x168>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 800b668:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800b66a:	e001      	b.n	800b670 <SVCCTL_App_Notification+0x168>
      break;
 800b66c:	bf00      	nop
 800b66e:	e000      	b.n	800b672 <SVCCTL_App_Notification+0x16a>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800b670:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 800b672:	2301      	movs	r3, #1
}
 800b674:	4618      	mov	r0, r3
 800b676:	3728      	adds	r7, #40	; 0x28
 800b678:	46bd      	mov	sp, r7
 800b67a:	bd80      	pop	{r7, pc}
 800b67c:	20001148 	.word	0x20001148
 800b680:	200011cc 	.word	0x200011cc
 800b684:	0001b207 	.word	0x0001b207

0800b688 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 800b688:	b580      	push	{r7, lr}
 800b68a:	b082      	sub	sp, #8
 800b68c:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 800b68e:	4b06      	ldr	r3, [pc, #24]	; (800b6a8 <Ble_Tl_Init+0x20>)
 800b690:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 800b692:	4b06      	ldr	r3, [pc, #24]	; (800b6ac <Ble_Tl_Init+0x24>)
 800b694:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 800b696:	463b      	mov	r3, r7
 800b698:	4619      	mov	r1, r3
 800b69a:	4805      	ldr	r0, [pc, #20]	; (800b6b0 <Ble_Tl_Init+0x28>)
 800b69c:	f7ff f8be 	bl	800a81c <hci_init>

  return;
 800b6a0:	bf00      	nop
}
 800b6a2:	3708      	adds	r7, #8
 800b6a4:	46bd      	mov	sp, r7
 800b6a6:	bd80      	pop	{r7, pc}
 800b6a8:	200300d8 	.word	0x200300d8
 800b6ac:	0800b9b5 	.word	0x0800b9b5
 800b6b0:	0800b97d 	.word	0x0800b97d

0800b6b4 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 800b6b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b6b6:	b08d      	sub	sp, #52	; 0x34
 800b6b8:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 800b6ba:	2300      	movs	r3, #0
 800b6bc:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800b6be:	2392      	movs	r3, #146	; 0x92
 800b6c0:	75fb      	strb	r3, [r7, #23]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 800b6c2:	f7fe fdda 	bl	800a27a <hci_reset>
 800b6c6:	4603      	mov	r3, r0
 800b6c8:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 800b6ca:	f000 f8d7 	bl	800b87c <BleGetBdAddress>
 800b6ce:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 800b6d0:	693a      	ldr	r2, [r7, #16]
 800b6d2:	2106      	movs	r1, #6
 800b6d4:	2000      	movs	r0, #0
 800b6d6:	f7fe fc90 	bl	8009ffa <aci_hal_write_config_data>
 800b6da:	4603      	mov	r3, r0
 800b6dc:	75fb      	strb	r3, [r7, #23]
#endif /* CFG_BLE_ADDRESS_TYPE != GAP_PUBLIC_ADDR */

  /**
   * Write Identity root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 800b6de:	4a4a      	ldr	r2, [pc, #296]	; (800b808 <Ble_Hci_Gap_Gatt_Init+0x154>)
 800b6e0:	2110      	movs	r1, #16
 800b6e2:	2018      	movs	r0, #24
 800b6e4:	f7fe fc89 	bl	8009ffa <aci_hal_write_config_data>
 800b6e8:	4603      	mov	r3, r0
 800b6ea:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 800b6ec:	4a47      	ldr	r2, [pc, #284]	; (800b80c <Ble_Hci_Gap_Gatt_Init+0x158>)
 800b6ee:	2110      	movs	r1, #16
 800b6f0:	2008      	movs	r0, #8
 800b6f2:	f7fe fc82 	bl	8009ffa <aci_hal_write_config_data>
 800b6f6:	4603      	mov	r3, r0
 800b6f8:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 800b6fa:	2118      	movs	r1, #24
 800b6fc:	2001      	movs	r0, #1
 800b6fe:	f7fe fd01 	bl	800a104 <aci_hal_set_tx_power_level>
 800b702:	4603      	mov	r3, r0
 800b704:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 800b706:	f7fe f9cc 	bl	8009aa2 <aci_gatt_init>
 800b70a:	4603      	mov	r3, r0
 800b70c:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 800b70e:	2300      	movs	r3, #0
 800b710:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 800b712:	7bfb      	ldrb	r3, [r7, #15]
 800b714:	f043 0301 	orr.w	r3, r3, #1
 800b718:	73fb      	strb	r3, [r7, #15]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  if (role > 0)
 800b71a:	7bfb      	ldrb	r3, [r7, #15]
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d01f      	beq.n	800b760 <Ble_Hci_Gap_Gatt_Init+0xac>
  {
    const char *name = CFG_GAP_DEVICE_NAME;
 800b720:	4b3b      	ldr	r3, [pc, #236]	; (800b810 <Ble_Hci_Gap_Gatt_Init+0x15c>)
 800b722:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 800b724:	1dba      	adds	r2, r7, #6
 800b726:	7bf8      	ldrb	r0, [r7, #15]
 800b728:	1cbb      	adds	r3, r7, #2
 800b72a:	9301      	str	r3, [sp, #4]
 800b72c:	1d3b      	adds	r3, r7, #4
 800b72e:	9300      	str	r3, [sp, #0]
 800b730:	4613      	mov	r3, r2
 800b732:	2208      	movs	r2, #8
 800b734:	2100      	movs	r1, #0
 800b736:	f7fe f80a 	bl	800974e <aci_gap_init>
 800b73a:	4603      	mov	r3, r0
 800b73c:	75fb      	strb	r3, [r7, #23]
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 800b73e:	88fc      	ldrh	r4, [r7, #6]
 800b740:	88bd      	ldrh	r5, [r7, #4]
 800b742:	68b8      	ldr	r0, [r7, #8]
 800b744:	f7f4 fd1c 	bl	8000180 <strlen>
 800b748:	4603      	mov	r3, r0
 800b74a:	b2da      	uxtb	r2, r3
 800b74c:	68bb      	ldr	r3, [r7, #8]
 800b74e:	9300      	str	r3, [sp, #0]
 800b750:	4613      	mov	r3, r2
 800b752:	2200      	movs	r2, #0
 800b754:	4629      	mov	r1, r5
 800b756:	4620      	mov	r0, r4
 800b758:	f7fe fba6 	bl	8009ea8 <aci_gatt_update_char_value>
 800b75c:	4603      	mov	r3, r0
 800b75e:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 800b760:	88f8      	ldrh	r0, [r7, #6]
 800b762:	8879      	ldrh	r1, [r7, #2]
 800b764:	463b      	mov	r3, r7
 800b766:	9300      	str	r3, [sp, #0]
 800b768:	2302      	movs	r3, #2
 800b76a:	2200      	movs	r2, #0
 800b76c:	f7fe fb9c 	bl	8009ea8 <aci_gatt_update_char_value>
 800b770:	4603      	mov	r3, r0
 800b772:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize Default PHY
   */
  ret = hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 800b774:	2202      	movs	r2, #2
 800b776:	2102      	movs	r1, #2
 800b778:	2000      	movs	r0, #0
 800b77a:	f7fe fda2 	bl	800a2c2 <hci_le_set_default_phy>
 800b77e:	4603      	mov	r3, r0
 800b780:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 800b782:	4b24      	ldr	r3, [pc, #144]	; (800b814 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800b784:	2201      	movs	r2, #1
 800b786:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 800b788:	4b22      	ldr	r3, [pc, #136]	; (800b814 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800b78a:	781b      	ldrb	r3, [r3, #0]
 800b78c:	4618      	mov	r0, r3
 800b78e:	f7fd fe5f 	bl	8009450 <aci_gap_set_io_capability>
 800b792:	4603      	mov	r3, r0
 800b794:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 800b796:	4b1f      	ldr	r3, [pc, #124]	; (800b814 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800b798:	2201      	movs	r2, #1
 800b79a:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 800b79c:	4b1d      	ldr	r3, [pc, #116]	; (800b814 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800b79e:	2208      	movs	r2, #8
 800b7a0:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 800b7a2:	4b1c      	ldr	r3, [pc, #112]	; (800b814 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800b7a4:	2210      	movs	r2, #16
 800b7a6:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 800b7a8:	4b1a      	ldr	r3, [pc, #104]	; (800b814 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800b7aa:	2200      	movs	r2, #0
 800b7ac:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 800b7ae:	4b19      	ldr	r3, [pc, #100]	; (800b814 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800b7b0:	4a19      	ldr	r2, [pc, #100]	; (800b818 <Ble_Hci_Gap_Gatt_Init+0x164>)
 800b7b2:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 800b7b4:	4b17      	ldr	r3, [pc, #92]	; (800b814 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800b7b6:	2200      	movs	r2, #0
 800b7b8:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 800b7ba:	4b16      	ldr	r3, [pc, #88]	; (800b814 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800b7bc:	789c      	ldrb	r4, [r3, #2]
 800b7be:	4b15      	ldr	r3, [pc, #84]	; (800b814 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800b7c0:	785d      	ldrb	r5, [r3, #1]
 800b7c2:	4b14      	ldr	r3, [pc, #80]	; (800b814 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800b7c4:	791b      	ldrb	r3, [r3, #4]
 800b7c6:	4a13      	ldr	r2, [pc, #76]	; (800b814 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800b7c8:	7952      	ldrb	r2, [r2, #5]
 800b7ca:	4912      	ldr	r1, [pc, #72]	; (800b814 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800b7cc:	78c9      	ldrb	r1, [r1, #3]
 800b7ce:	4811      	ldr	r0, [pc, #68]	; (800b814 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800b7d0:	6880      	ldr	r0, [r0, #8]
 800b7d2:	2600      	movs	r6, #0
 800b7d4:	9604      	str	r6, [sp, #16]
 800b7d6:	9003      	str	r0, [sp, #12]
 800b7d8:	9102      	str	r1, [sp, #8]
 800b7da:	9201      	str	r2, [sp, #4]
 800b7dc:	9300      	str	r3, [sp, #0]
 800b7de:	2300      	movs	r3, #0
 800b7e0:	2201      	movs	r2, #1
 800b7e2:	4629      	mov	r1, r5
 800b7e4:	4620      	mov	r0, r4
 800b7e6:	f7fd fe87 	bl	80094f8 <aci_gap_set_authentication_requirement>
 800b7ea:	4603      	mov	r3, r0
 800b7ec:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 800b7ee:	4b09      	ldr	r3, [pc, #36]	; (800b814 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800b7f0:	789b      	ldrb	r3, [r3, #2]
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d003      	beq.n	800b7fe <Ble_Hci_Gap_Gatt_Init+0x14a>
  {
    ret = aci_gap_configure_whitelist();
 800b7f6:	f7fe f8c9 	bl	800998c <aci_gap_configure_whitelist>
 800b7fa:	4603      	mov	r3, r0
 800b7fc:	75fb      	strb	r3, [r7, #23]
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
}
 800b7fe:	bf00      	nop
 800b800:	371c      	adds	r7, #28
 800b802:	46bd      	mov	sp, r7
 800b804:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b806:	bf00      	nop
 800b808:	0800d9f0 	.word	0x0800d9f0
 800b80c:	0800da00 	.word	0x0800da00
 800b810:	0800d7e4 	.word	0x0800d7e4
 800b814:	20001148 	.word	0x20001148
 800b818:	0001b207 	.word	0x0001b207

0800b81c <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t NewStatus)
{
 800b81c:	b580      	push	{r7, lr}
 800b81e:	b08c      	sub	sp, #48	; 0x30
 800b820:	af08      	add	r7, sp, #32
 800b822:	4603      	mov	r3, r0
 800b824:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800b826:	2392      	movs	r3, #146	; 0x92
 800b828:	73fb      	strb	r3, [r7, #15]

  BleApplicationContext.Device_Connection_Status = NewStatus;
 800b82a:	4a12      	ldr	r2, [pc, #72]	; (800b874 <Adv_Request+0x58>)
 800b82c:	79fb      	ldrb	r3, [r7, #7]
 800b82e:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
  /* Start Fast or Low Power Advertising */
  ret = aci_gap_set_discoverable(ADV_TYPE,
 800b832:	2300      	movs	r3, #0
 800b834:	9306      	str	r3, [sp, #24]
 800b836:	2300      	movs	r3, #0
 800b838:	9305      	str	r3, [sp, #20]
 800b83a:	2300      	movs	r3, #0
 800b83c:	9304      	str	r3, [sp, #16]
 800b83e:	2300      	movs	r3, #0
 800b840:	9303      	str	r3, [sp, #12]
 800b842:	2300      	movs	r3, #0
 800b844:	9302      	str	r3, [sp, #8]
 800b846:	2300      	movs	r3, #0
 800b848:	9301      	str	r3, [sp, #4]
 800b84a:	2300      	movs	r3, #0
 800b84c:	9300      	str	r3, [sp, #0]
 800b84e:	2300      	movs	r3, #0
 800b850:	22a0      	movs	r2, #160	; 0xa0
 800b852:	2180      	movs	r1, #128	; 0x80
 800b854:	2000      	movs	r0, #0
 800b856:	f7fd fd01 	bl	800925c <aci_gap_set_discoverable>
 800b85a:	4603      	mov	r3, r0
 800b85c:	73fb      	strb	r3, [r7, #15]
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - Success\n");
  }

  /* Update Advertising data */
  ret = aci_gap_update_adv_data(sizeof(a_AdvData), (uint8_t*) a_AdvData);
 800b85e:	4906      	ldr	r1, [pc, #24]	; (800b878 <Adv_Request+0x5c>)
 800b860:	2009      	movs	r0, #9
 800b862:	f7fe f821 	bl	80098a8 <aci_gap_update_adv_data>
 800b866:	4603      	mov	r3, r0
 800b868:	73fb      	strb	r3, [r7, #15]
  else
  {
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
  }

  return;
 800b86a:	bf00      	nop
}
 800b86c:	3710      	adds	r7, #16
 800b86e:	46bd      	mov	sp, r7
 800b870:	bd80      	pop	{r7, pc}
 800b872:	bf00      	nop
 800b874:	20001148 	.word	0x20001148
 800b878:	20000014 	.word	0x20000014

0800b87c <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 800b87c:	b580      	push	{r7, lr}
 800b87e:	b086      	sub	sp, #24
 800b880:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 800b882:	f7ff fdc3 	bl	800b40c <LL_FLASH_GetUDN>
 800b886:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 800b888:	693b      	ldr	r3, [r7, #16]
 800b88a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b88e:	d023      	beq.n	800b8d8 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 800b890:	f7ff fdd4 	bl	800b43c <LL_FLASH_GetSTCompanyID>
 800b894:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 800b896:	f7ff fdc5 	bl	800b424 <LL_FLASH_GetDeviceID>
 800b89a:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 800b89c:	693b      	ldr	r3, [r7, #16]
 800b89e:	b2da      	uxtb	r2, r3
 800b8a0:	4b16      	ldr	r3, [pc, #88]	; (800b8fc <BleGetBdAddress+0x80>)
 800b8a2:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 800b8a4:	693b      	ldr	r3, [r7, #16]
 800b8a6:	0a1b      	lsrs	r3, r3, #8
 800b8a8:	b2da      	uxtb	r2, r3
 800b8aa:	4b14      	ldr	r3, [pc, #80]	; (800b8fc <BleGetBdAddress+0x80>)
 800b8ac:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	b2da      	uxtb	r2, r3
 800b8b2:	4b12      	ldr	r3, [pc, #72]	; (800b8fc <BleGetBdAddress+0x80>)
 800b8b4:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 800b8b6:	68bb      	ldr	r3, [r7, #8]
 800b8b8:	b2da      	uxtb	r2, r3
 800b8ba:	4b10      	ldr	r3, [pc, #64]	; (800b8fc <BleGetBdAddress+0x80>)
 800b8bc:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 800b8be:	68bb      	ldr	r3, [r7, #8]
 800b8c0:	0a1b      	lsrs	r3, r3, #8
 800b8c2:	b2da      	uxtb	r2, r3
 800b8c4:	4b0d      	ldr	r3, [pc, #52]	; (800b8fc <BleGetBdAddress+0x80>)
 800b8c6:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 800b8c8:	68bb      	ldr	r3, [r7, #8]
 800b8ca:	0c1b      	lsrs	r3, r3, #16
 800b8cc:	b2da      	uxtb	r2, r3
 800b8ce:	4b0b      	ldr	r3, [pc, #44]	; (800b8fc <BleGetBdAddress+0x80>)
 800b8d0:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 800b8d2:	4b0a      	ldr	r3, [pc, #40]	; (800b8fc <BleGetBdAddress+0x80>)
 800b8d4:	617b      	str	r3, [r7, #20]
 800b8d6:	e00b      	b.n	800b8f0 <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 800b8d8:	2000      	movs	r0, #0
 800b8da:	f7ff fcb1 	bl	800b240 <OTP_Read>
 800b8de:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d002      	beq.n	800b8ec <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	617b      	str	r3, [r7, #20]
 800b8ea:	e001      	b.n	800b8f0 <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 800b8ec:	4b04      	ldr	r3, [pc, #16]	; (800b900 <BleGetBdAddress+0x84>)
 800b8ee:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 800b8f0:	697b      	ldr	r3, [r7, #20]
}
 800b8f2:	4618      	mov	r0, r3
 800b8f4:	3718      	adds	r7, #24
 800b8f6:	46bd      	mov	sp, r7
 800b8f8:	bd80      	pop	{r7, pc}
 800b8fa:	bf00      	nop
 800b8fc:	20001140 	.word	0x20001140
 800b900:	0800d9e8 	.word	0x0800d9e8

0800b904 <Adv_Cancel>:
 *
 * SPECIFIC FUNCTIONS FOR CUSTOM
 *
 *************************************************************/
static void Adv_Cancel(void)
{
 800b904:	b580      	push	{r7, lr}
 800b906:	b082      	sub	sp, #8
 800b908:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_1 */

  /* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 800b90a:	4b0a      	ldr	r3, [pc, #40]	; (800b934 <Adv_Cancel+0x30>)
 800b90c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b910:	2b05      	cmp	r3, #5
 800b912:	d00a      	beq.n	800b92a <Adv_Cancel+0x26>
  {
    tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800b914:	2392      	movs	r3, #146	; 0x92
 800b916:	71fb      	strb	r3, [r7, #7]

    ret = aci_gap_set_non_discoverable();
 800b918:	f7fd fc7c 	bl	8009214 <aci_gap_set_non_discoverable>
 800b91c:	4603      	mov	r3, r0
 800b91e:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800b920:	4b04      	ldr	r3, [pc, #16]	; (800b934 <Adv_Cancel+0x30>)
 800b922:	2200      	movs	r2, #0
 800b924:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* USER CODE BEGIN Adv_Cancel_2 */

  /* USER CODE END Adv_Cancel_2 */

  return;
 800b928:	bf00      	nop
 800b92a:	bf00      	nop
}
 800b92c:	3708      	adds	r7, #8
 800b92e:	46bd      	mov	sp, r7
 800b930:	bd80      	pop	{r7, pc}
 800b932:	bf00      	nop
 800b934:	20001148 	.word	0x20001148

0800b938 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 800b938:	b580      	push	{r7, lr}
 800b93a:	b082      	sub	sp, #8
 800b93c:	af00      	add	r7, sp, #0
 800b93e:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 800b940:	2100      	movs	r1, #0
 800b942:	2002      	movs	r0, #2
 800b944:	f000 fcd6 	bl	800c2f4 <UTIL_SEQ_SetTask>

  return;
 800b948:	bf00      	nop
}
 800b94a:	3708      	adds	r7, #8
 800b94c:	46bd      	mov	sp, r7
 800b94e:	bd80      	pop	{r7, pc}

0800b950 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 800b950:	b580      	push	{r7, lr}
 800b952:	b082      	sub	sp, #8
 800b954:	af00      	add	r7, sp, #0
 800b956:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800b958:	2001      	movs	r0, #1
 800b95a:	f000 fd37 	bl	800c3cc <UTIL_SEQ_SetEvt>

  return;
 800b95e:	bf00      	nop
}
 800b960:	3708      	adds	r7, #8
 800b962:	46bd      	mov	sp, r7
 800b964:	bd80      	pop	{r7, pc}

0800b966 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 800b966:	b580      	push	{r7, lr}
 800b968:	b082      	sub	sp, #8
 800b96a:	af00      	add	r7, sp, #0
 800b96c:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800b96e:	2001      	movs	r0, #1
 800b970:	f000 fd4c 	bl	800c40c <UTIL_SEQ_WaitEvt>

  return;
 800b974:	bf00      	nop
}
 800b976:	3708      	adds	r7, #8
 800b978:	46bd      	mov	sp, r7
 800b97a:	bd80      	pop	{r7, pc}

0800b97c <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 800b97c:	b580      	push	{r7, lr}
 800b97e:	b084      	sub	sp, #16
 800b980:	af00      	add	r7, sp, #0
 800b982:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	685b      	ldr	r3, [r3, #4]
 800b98c:	3308      	adds	r3, #8
 800b98e:	4618      	mov	r0, r3
 800b990:	f7fe fdfe 	bl	800a590 <SVCCTL_UserEvtRx>
 800b994:	4603      	mov	r3, r0
 800b996:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 800b998:	7afb      	ldrb	r3, [r7, #11]
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d003      	beq.n	800b9a6 <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	2201      	movs	r2, #1
 800b9a2:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 800b9a4:	e003      	b.n	800b9ae <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	2200      	movs	r2, #0
 800b9aa:	701a      	strb	r2, [r3, #0]
  return;
 800b9ac:	bf00      	nop
}
 800b9ae:	3710      	adds	r7, #16
 800b9b0:	46bd      	mov	sp, r7
 800b9b2:	bd80      	pop	{r7, pc}

0800b9b4 <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 800b9b4:	b580      	push	{r7, lr}
 800b9b6:	b084      	sub	sp, #16
 800b9b8:	af00      	add	r7, sp, #0
 800b9ba:	4603      	mov	r3, r0
 800b9bc:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 800b9be:	79fb      	ldrb	r3, [r7, #7]
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d002      	beq.n	800b9ca <BLE_StatusNot+0x16>
 800b9c4:	2b01      	cmp	r3, #1
 800b9c6:	d006      	beq.n	800b9d6 <BLE_StatusNot+0x22>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 800b9c8:	e00b      	b.n	800b9e2 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800b9ca:	2303      	movs	r3, #3
 800b9cc:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 800b9ce:	68f8      	ldr	r0, [r7, #12]
 800b9d0:	f000 fcbc 	bl	800c34c <UTIL_SEQ_PauseTask>
      break;
 800b9d4:	e005      	b.n	800b9e2 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800b9d6:	2303      	movs	r3, #3
 800b9d8:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 800b9da:	68f8      	ldr	r0, [r7, #12]
 800b9dc:	f000 fcd6 	bl	800c38c <UTIL_SEQ_ResumeTask>
      break;
 800b9e0:	bf00      	nop
  }

  return;
 800b9e2:	bf00      	nop
}
 800b9e4:	3710      	adds	r7, #16
 800b9e6:	46bd      	mov	sp, r7
 800b9e8:	bd80      	pop	{r7, pc}

0800b9ea <Custom_APP_Notification>:
  /* USER CODE END CUSTOM_STM_App_Notification_2 */
  return;
}

void Custom_APP_Notification(Custom_App_ConnHandle_Not_evt_t *pNotification)
{
 800b9ea:	b480      	push	{r7}
 800b9ec:	b083      	sub	sp, #12
 800b9ee:	af00      	add	r7, sp, #0
 800b9f0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_APP_Notification_1 */

  /* USER CODE END CUSTOM_APP_Notification_1 */

  switch (pNotification->Custom_Evt_Opcode)
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	781b      	ldrb	r3, [r3, #0]
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d002      	beq.n	800ba00 <Custom_APP_Notification+0x16>
 800b9fa:	2b01      	cmp	r3, #1
 800b9fc:	d002      	beq.n	800ba04 <Custom_APP_Notification+0x1a>

    default:
      /* USER CODE BEGIN CUSTOM_APP_Notification_default */

      /* USER CODE END CUSTOM_APP_Notification_default */
      break;
 800b9fe:	e002      	b.n	800ba06 <Custom_APP_Notification+0x1c>
      break;
 800ba00:	bf00      	nop
 800ba02:	e000      	b.n	800ba06 <Custom_APP_Notification+0x1c>
      break;
 800ba04:	bf00      	nop

  /* USER CODE BEGIN CUSTOM_APP_Notification_2 */

  /* USER CODE END CUSTOM_APP_Notification_2 */

  return;
 800ba06:	bf00      	nop
}
 800ba08:	370c      	adds	r7, #12
 800ba0a:	46bd      	mov	sp, r7
 800ba0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba10:	4770      	bx	lr

0800ba12 <Custom_APP_Init>:

void Custom_APP_Init(void)
{
 800ba12:	b480      	push	{r7}
 800ba14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CUSTOM_APP_Init */

  /* USER CODE END CUSTOM_APP_Init */
  return;
 800ba16:	bf00      	nop
}
 800ba18:	46bd      	mov	sp, r7
 800ba1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba1e:	4770      	bx	lr

0800ba20 <Custom_STM_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Custom_STM_Event_Handler(void *Event)
{
 800ba20:	b480      	push	{r7}
 800ba22:	b08b      	sub	sp, #44	; 0x2c
 800ba24:	af00      	add	r7, sp, #0
 800ba26:	6078      	str	r0, [r7, #4]
  Custom_STM_App_Notification_evt_t     Notification;
  /* USER CODE BEGIN Custom_STM_Event_Handler_1 */

  /* USER CODE END Custom_STM_Event_Handler_1 */

  return_value = SVCCTL_EvtNotAck;
 800ba28:	2300      	movs	r3, #0
 800ba2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	3301      	adds	r3, #1
 800ba32:	623b      	str	r3, [r7, #32]

  switch (event_pckt->evt)
 800ba34:	6a3b      	ldr	r3, [r7, #32]
 800ba36:	781b      	ldrb	r3, [r3, #0]
 800ba38:	2bff      	cmp	r3, #255	; 0xff
 800ba3a:	d12b      	bne.n	800ba94 <Custom_STM_Event_Handler+0x74>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 800ba3c:	6a3b      	ldr	r3, [r7, #32]
 800ba3e:	3302      	adds	r3, #2
 800ba40:	61fb      	str	r3, [r7, #28]
      switch (blecore_evt->ecode)
 800ba42:	69fb      	ldr	r3, [r7, #28]
 800ba44:	881b      	ldrh	r3, [r3, #0]
 800ba46:	b29b      	uxth	r3, r3
 800ba48:	f640 4214 	movw	r2, #3092	; 0xc14
 800ba4c:	4293      	cmp	r3, r2
 800ba4e:	d01b      	beq.n	800ba88 <Custom_STM_Event_Handler+0x68>
 800ba50:	f640 4214 	movw	r2, #3092	; 0xc14
 800ba54:	4293      	cmp	r3, r2
 800ba56:	dc19      	bgt.n	800ba8c <Custom_STM_Event_Handler+0x6c>
 800ba58:	f640 4201 	movw	r2, #3073	; 0xc01
 800ba5c:	4293      	cmp	r3, r2
 800ba5e:	d003      	beq.n	800ba68 <Custom_STM_Event_Handler+0x48>
 800ba60:	f640 4213 	movw	r2, #3091	; 0xc13
 800ba64:	4293      	cmp	r3, r2

          /* USER CODE END EVT_BLUE_GATT_WRITE_PERMIT_REQ_BEGIN */
          /* USER CODE BEGIN EVT_BLUE_GATT_WRITE_PERMIT_REQ_END */

          /* USER CODE END EVT_BLUE_GATT_WRITE_PERMIT_REQ_END */
          break;
 800ba66:	e014      	b.n	800ba92 <Custom_STM_Event_Handler+0x72>
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 800ba68:	69fb      	ldr	r3, [r7, #28]
 800ba6a:	3302      	adds	r3, #2
 800ba6c:	61bb      	str	r3, [r7, #24]
          if (attribute_modified->Attr_Handle == (CustomContext.CustomMycharwriteHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 800ba6e:	69bb      	ldr	r3, [r7, #24]
 800ba70:	885b      	ldrh	r3, [r3, #2]
 800ba72:	b29b      	uxth	r3, r3
 800ba74:	461a      	mov	r2, r3
 800ba76:	4b0c      	ldr	r3, [pc, #48]	; (800baa8 <Custom_STM_Event_Handler+0x88>)
 800ba78:	885b      	ldrh	r3, [r3, #2]
 800ba7a:	3301      	adds	r3, #1
 800ba7c:	429a      	cmp	r2, r3
 800ba7e:	d107      	bne.n	800ba90 <Custom_STM_Event_Handler+0x70>
            return_value = SVCCTL_EvtAckFlowEnable;
 800ba80:	2301      	movs	r3, #1
 800ba82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          break;
 800ba86:	e003      	b.n	800ba90 <Custom_STM_Event_Handler+0x70>
          break;
 800ba88:	bf00      	nop
 800ba8a:	e004      	b.n	800ba96 <Custom_STM_Event_Handler+0x76>
        /* USER CODE END BLECORE_EVT */
        default:
          /* USER CODE BEGIN EVT_DEFAULT */

          /* USER CODE END EVT_DEFAULT */
          break;
 800ba8c:	bf00      	nop
 800ba8e:	e002      	b.n	800ba96 <Custom_STM_Event_Handler+0x76>
          break;
 800ba90:	bf00      	nop
      }
      /* USER CODE BEGIN EVT_VENDOR*/

      /* USER CODE END EVT_VENDOR*/
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800ba92:	e000      	b.n	800ba96 <Custom_STM_Event_Handler+0x76>

    default:
      /* USER CODE BEGIN EVENT_PCKT*/

      /* USER CODE END EVENT_PCKT*/
      break;
 800ba94:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_Event_Handler_2 */

  /* USER CODE END Custom_STM_Event_Handler_2 */

  return(return_value);
 800ba96:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}/* end Custom_STM_Event_Handler */
 800ba9a:	4618      	mov	r0, r3
 800ba9c:	372c      	adds	r7, #44	; 0x2c
 800ba9e:	46bd      	mov	sp, r7
 800baa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baa4:	4770      	bx	lr
 800baa6:	bf00      	nop
 800baa8:	200011d0 	.word	0x200011d0

0800baac <SVCCTL_InitCustomSvc>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void SVCCTL_InitCustomSvc(void)
{
 800baac:	b580      	push	{r7, lr}
 800baae:	b08c      	sub	sp, #48	; 0x30
 800bab0:	af06      	add	r7, sp, #24

  Char_UUID_t  uuid;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800bab2:	2392      	movs	r3, #146	; 0x92
 800bab4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE END SVCCTL_InitCustomSvc_1 */

  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(Custom_STM_Event_Handler);
 800bab6:	4834      	ldr	r0, [pc, #208]	; (800bb88 <SVCCTL_InitCustomSvc+0xdc>)
 800bab8:	f7fe fd50 	bl	800a55c <SVCCTL_RegisterSvcHandler>
   * service_max_attribute_record = 1 for mySvc +
   *                                2 for myCharWrite +
   *                              = 3
   */

  COPY_MYSVC_UUID(uuid.Char_UUID_128);
 800babc:	238f      	movs	r3, #143	; 0x8f
 800babe:	713b      	strb	r3, [r7, #4]
 800bac0:	23e5      	movs	r3, #229	; 0xe5
 800bac2:	717b      	strb	r3, [r7, #5]
 800bac4:	23b3      	movs	r3, #179	; 0xb3
 800bac6:	71bb      	strb	r3, [r7, #6]
 800bac8:	23d5      	movs	r3, #213	; 0xd5
 800baca:	71fb      	strb	r3, [r7, #7]
 800bacc:	232e      	movs	r3, #46	; 0x2e
 800bace:	723b      	strb	r3, [r7, #8]
 800bad0:	237f      	movs	r3, #127	; 0x7f
 800bad2:	727b      	strb	r3, [r7, #9]
 800bad4:	234a      	movs	r3, #74	; 0x4a
 800bad6:	72bb      	strb	r3, [r7, #10]
 800bad8:	2398      	movs	r3, #152	; 0x98
 800bada:	72fb      	strb	r3, [r7, #11]
 800badc:	232a      	movs	r3, #42	; 0x2a
 800bade:	733b      	strb	r3, [r7, #12]
 800bae0:	2348      	movs	r3, #72	; 0x48
 800bae2:	737b      	strb	r3, [r7, #13]
 800bae4:	237a      	movs	r3, #122	; 0x7a
 800bae6:	73bb      	strb	r3, [r7, #14]
 800bae8:	23cc      	movs	r3, #204	; 0xcc
 800baea:	73fb      	strb	r3, [r7, #15]
 800baec:	2300      	movs	r3, #0
 800baee:	743b      	strb	r3, [r7, #16]
 800baf0:	2300      	movs	r3, #0
 800baf2:	747b      	strb	r3, [r7, #17]
 800baf4:	2300      	movs	r3, #0
 800baf6:	74bb      	strb	r3, [r7, #18]
 800baf8:	2300      	movs	r3, #0
 800bafa:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_service(UUID_TYPE_128,
 800bafc:	1d39      	adds	r1, r7, #4
 800bafe:	4b23      	ldr	r3, [pc, #140]	; (800bb8c <SVCCTL_InitCustomSvc+0xe0>)
 800bb00:	9300      	str	r3, [sp, #0]
 800bb02:	2303      	movs	r3, #3
 800bb04:	2201      	movs	r2, #1
 800bb06:	2002      	movs	r0, #2
 800bb08:	f7fd fff0 	bl	8009aec <aci_gatt_add_service>
 800bb0c:	4603      	mov	r3, r0
 800bb0e:	75fb      	strb	r3, [r7, #23]
  }

  /**
   *  myCharWrite
   */
  COPY_MYCHARWRITE_UUID(uuid.Char_UUID_128);
 800bb10:	2319      	movs	r3, #25
 800bb12:	713b      	strb	r3, [r7, #4]
 800bb14:	23ed      	movs	r3, #237	; 0xed
 800bb16:	717b      	strb	r3, [r7, #5]
 800bb18:	2382      	movs	r3, #130	; 0x82
 800bb1a:	71bb      	strb	r3, [r7, #6]
 800bb1c:	23ae      	movs	r3, #174	; 0xae
 800bb1e:	71fb      	strb	r3, [r7, #7]
 800bb20:	23ed      	movs	r3, #237	; 0xed
 800bb22:	723b      	strb	r3, [r7, #8]
 800bb24:	2321      	movs	r3, #33	; 0x21
 800bb26:	727b      	strb	r3, [r7, #9]
 800bb28:	234c      	movs	r3, #76	; 0x4c
 800bb2a:	72bb      	strb	r3, [r7, #10]
 800bb2c:	239d      	movs	r3, #157	; 0x9d
 800bb2e:	72fb      	strb	r3, [r7, #11]
 800bb30:	2341      	movs	r3, #65	; 0x41
 800bb32:	733b      	strb	r3, [r7, #12]
 800bb34:	2345      	movs	r3, #69	; 0x45
 800bb36:	737b      	strb	r3, [r7, #13]
 800bb38:	2322      	movs	r3, #34	; 0x22
 800bb3a:	73bb      	strb	r3, [r7, #14]
 800bb3c:	238e      	movs	r3, #142	; 0x8e
 800bb3e:	73fb      	strb	r3, [r7, #15]
 800bb40:	2300      	movs	r3, #0
 800bb42:	743b      	strb	r3, [r7, #16]
 800bb44:	2300      	movs	r3, #0
 800bb46:	747b      	strb	r3, [r7, #17]
 800bb48:	2300      	movs	r3, #0
 800bb4a:	74bb      	strb	r3, [r7, #18]
 800bb4c:	2300      	movs	r3, #0
 800bb4e:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomMysvcHdle,
 800bb50:	4b0e      	ldr	r3, [pc, #56]	; (800bb8c <SVCCTL_InitCustomSvc+0xe0>)
 800bb52:	8818      	ldrh	r0, [r3, #0]
 800bb54:	4b0e      	ldr	r3, [pc, #56]	; (800bb90 <SVCCTL_InitCustomSvc+0xe4>)
 800bb56:	781b      	ldrb	r3, [r3, #0]
 800bb58:	b29b      	uxth	r3, r3
 800bb5a:	1d3a      	adds	r2, r7, #4
 800bb5c:	490d      	ldr	r1, [pc, #52]	; (800bb94 <SVCCTL_InitCustomSvc+0xe8>)
 800bb5e:	9105      	str	r1, [sp, #20]
 800bb60:	2100      	movs	r1, #0
 800bb62:	9104      	str	r1, [sp, #16]
 800bb64:	2110      	movs	r1, #16
 800bb66:	9103      	str	r1, [sp, #12]
 800bb68:	2101      	movs	r1, #1
 800bb6a:	9102      	str	r1, [sp, #8]
 800bb6c:	2100      	movs	r1, #0
 800bb6e:	9101      	str	r1, [sp, #4]
 800bb70:	2108      	movs	r1, #8
 800bb72:	9100      	str	r1, [sp, #0]
 800bb74:	2102      	movs	r1, #2
 800bb76:	f7fe f88f 	bl	8009c98 <aci_gatt_add_char>
 800bb7a:	4603      	mov	r3, r0
 800bb7c:	75fb      	strb	r3, [r7, #23]

  /* USER CODE BEGIN SVCCTL_InitCustomSvc_2 */

  /* USER CODE END SVCCTL_InitCustomSvc_2 */

  return;
 800bb7e:	bf00      	nop
}
 800bb80:	3718      	adds	r7, #24
 800bb82:	46bd      	mov	sp, r7
 800bb84:	bd80      	pop	{r7, pc}
 800bb86:	bf00      	nop
 800bb88:	0800ba21 	.word	0x0800ba21
 800bb8c:	200011d0 	.word	0x200011d0
 800bb90:	2000001d 	.word	0x2000001d
 800bb94:	200011d2 	.word	0x200011d2

0800bb98 <LL_PWR_EnableBootC2>:
{
 800bb98:	b480      	push	{r7}
 800bb9a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 800bb9c:	4b05      	ldr	r3, [pc, #20]	; (800bbb4 <LL_PWR_EnableBootC2+0x1c>)
 800bb9e:	68db      	ldr	r3, [r3, #12]
 800bba0:	4a04      	ldr	r2, [pc, #16]	; (800bbb4 <LL_PWR_EnableBootC2+0x1c>)
 800bba2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bba6:	60d3      	str	r3, [r2, #12]
}
 800bba8:	bf00      	nop
 800bbaa:	46bd      	mov	sp, r7
 800bbac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbb0:	4770      	bx	lr
 800bbb2:	bf00      	nop
 800bbb4:	58000400 	.word	0x58000400

0800bbb8 <LL_C2_EXTI_EnableEvent_32_63>:
{
 800bbb8:	b480      	push	{r7}
 800bbba:	b083      	sub	sp, #12
 800bbbc:	af00      	add	r7, sp, #0
 800bbbe:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 800bbc0:	4b06      	ldr	r3, [pc, #24]	; (800bbdc <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800bbc2:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800bbc6:	4905      	ldr	r1, [pc, #20]	; (800bbdc <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	4313      	orrs	r3, r2
 800bbcc:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 800bbd0:	bf00      	nop
 800bbd2:	370c      	adds	r7, #12
 800bbd4:	46bd      	mov	sp, r7
 800bbd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbda:	4770      	bx	lr
 800bbdc:	58000800 	.word	0x58000800

0800bbe0 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 800bbe0:	b480      	push	{r7}
 800bbe2:	b083      	sub	sp, #12
 800bbe4:	af00      	add	r7, sp, #0
 800bbe6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800bbe8:	4b05      	ldr	r3, [pc, #20]	; (800bc00 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800bbea:	6a1a      	ldr	r2, [r3, #32]
 800bbec:	4904      	ldr	r1, [pc, #16]	; (800bc00 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	4313      	orrs	r3, r2
 800bbf2:	620b      	str	r3, [r1, #32]
}
 800bbf4:	bf00      	nop
 800bbf6:	370c      	adds	r7, #12
 800bbf8:	46bd      	mov	sp, r7
 800bbfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbfe:	4770      	bx	lr
 800bc00:	58000800 	.word	0x58000800

0800bc04 <LL_AHB3_GRP1_EnableClock>:
{
 800bc04:	b480      	push	{r7}
 800bc06:	b085      	sub	sp, #20
 800bc08:	af00      	add	r7, sp, #0
 800bc0a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 800bc0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bc10:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bc12:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	4313      	orrs	r3, r2
 800bc1a:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800bc1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bc20:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	4013      	ands	r3, r2
 800bc26:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800bc28:	68fb      	ldr	r3, [r7, #12]
}
 800bc2a:	bf00      	nop
 800bc2c:	3714      	adds	r7, #20
 800bc2e:	46bd      	mov	sp, r7
 800bc30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc34:	4770      	bx	lr

0800bc36 <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 800bc36:	b480      	push	{r7}
 800bc38:	b085      	sub	sp, #20
 800bc3a:	af00      	add	r7, sp, #0
 800bc3c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 800bc3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bc42:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 800bc46:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	4313      	orrs	r3, r2
 800bc4e:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 800bc52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bc56:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	4013      	ands	r3, r2
 800bc5e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800bc60:	68fb      	ldr	r3, [r7, #12]
}
 800bc62:	bf00      	nop
 800bc64:	3714      	adds	r7, #20
 800bc66:	46bd      	mov	sp, r7
 800bc68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc6c:	4770      	bx	lr

0800bc6e <LL_C1_IPCC_EnableIT_TXF>:
{
 800bc6e:	b480      	push	{r7}
 800bc70:	b083      	sub	sp, #12
 800bc72:	af00      	add	r7, sp, #0
 800bc74:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	601a      	str	r2, [r3, #0]
}
 800bc82:	bf00      	nop
 800bc84:	370c      	adds	r7, #12
 800bc86:	46bd      	mov	sp, r7
 800bc88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc8c:	4770      	bx	lr

0800bc8e <LL_C1_IPCC_EnableIT_RXO>:
{
 800bc8e:	b480      	push	{r7}
 800bc90:	b083      	sub	sp, #12
 800bc92:	af00      	add	r7, sp, #0
 800bc94:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	f043 0201 	orr.w	r2, r3, #1
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	601a      	str	r2, [r3, #0]
}
 800bca2:	bf00      	nop
 800bca4:	370c      	adds	r7, #12
 800bca6:	46bd      	mov	sp, r7
 800bca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcac:	4770      	bx	lr

0800bcae <LL_C1_IPCC_EnableTransmitChannel>:
{
 800bcae:	b480      	push	{r7}
 800bcb0:	b083      	sub	sp, #12
 800bcb2:	af00      	add	r7, sp, #0
 800bcb4:	6078      	str	r0, [r7, #4]
 800bcb6:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	685a      	ldr	r2, [r3, #4]
 800bcbc:	683b      	ldr	r3, [r7, #0]
 800bcbe:	041b      	lsls	r3, r3, #16
 800bcc0:	43db      	mvns	r3, r3
 800bcc2:	401a      	ands	r2, r3
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	605a      	str	r2, [r3, #4]
}
 800bcc8:	bf00      	nop
 800bcca:	370c      	adds	r7, #12
 800bccc:	46bd      	mov	sp, r7
 800bcce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcd2:	4770      	bx	lr

0800bcd4 <LL_C1_IPCC_DisableTransmitChannel>:
{
 800bcd4:	b480      	push	{r7}
 800bcd6:	b083      	sub	sp, #12
 800bcd8:	af00      	add	r7, sp, #0
 800bcda:	6078      	str	r0, [r7, #4]
 800bcdc:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	685a      	ldr	r2, [r3, #4]
 800bce2:	683b      	ldr	r3, [r7, #0]
 800bce4:	041b      	lsls	r3, r3, #16
 800bce6:	431a      	orrs	r2, r3
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	605a      	str	r2, [r3, #4]
}
 800bcec:	bf00      	nop
 800bcee:	370c      	adds	r7, #12
 800bcf0:	46bd      	mov	sp, r7
 800bcf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcf6:	4770      	bx	lr

0800bcf8 <LL_C1_IPCC_EnableReceiveChannel>:
{
 800bcf8:	b480      	push	{r7}
 800bcfa:	b083      	sub	sp, #12
 800bcfc:	af00      	add	r7, sp, #0
 800bcfe:	6078      	str	r0, [r7, #4]
 800bd00:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	685a      	ldr	r2, [r3, #4]
 800bd06:	683b      	ldr	r3, [r7, #0]
 800bd08:	43db      	mvns	r3, r3
 800bd0a:	401a      	ands	r2, r3
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	605a      	str	r2, [r3, #4]
}
 800bd10:	bf00      	nop
 800bd12:	370c      	adds	r7, #12
 800bd14:	46bd      	mov	sp, r7
 800bd16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd1a:	4770      	bx	lr

0800bd1c <LL_C1_IPCC_ClearFlag_CHx>:
{
 800bd1c:	b480      	push	{r7}
 800bd1e:	b083      	sub	sp, #12
 800bd20:	af00      	add	r7, sp, #0
 800bd22:	6078      	str	r0, [r7, #4]
 800bd24:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	683a      	ldr	r2, [r7, #0]
 800bd2a:	609a      	str	r2, [r3, #8]
}
 800bd2c:	bf00      	nop
 800bd2e:	370c      	adds	r7, #12
 800bd30:	46bd      	mov	sp, r7
 800bd32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd36:	4770      	bx	lr

0800bd38 <LL_C1_IPCC_SetFlag_CHx>:
{
 800bd38:	b480      	push	{r7}
 800bd3a:	b083      	sub	sp, #12
 800bd3c:	af00      	add	r7, sp, #0
 800bd3e:	6078      	str	r0, [r7, #4]
 800bd40:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 800bd42:	683b      	ldr	r3, [r7, #0]
 800bd44:	041a      	lsls	r2, r3, #16
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	609a      	str	r2, [r3, #8]
}
 800bd4a:	bf00      	nop
 800bd4c:	370c      	adds	r7, #12
 800bd4e:	46bd      	mov	sp, r7
 800bd50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd54:	4770      	bx	lr

0800bd56 <LL_C1_IPCC_IsActiveFlag_CHx>:
{
 800bd56:	b480      	push	{r7}
 800bd58:	b083      	sub	sp, #12
 800bd5a:	af00      	add	r7, sp, #0
 800bd5c:	6078      	str	r0, [r7, #4]
 800bd5e:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	68da      	ldr	r2, [r3, #12]
 800bd64:	683b      	ldr	r3, [r7, #0]
 800bd66:	4013      	ands	r3, r2
 800bd68:	683a      	ldr	r2, [r7, #0]
 800bd6a:	429a      	cmp	r2, r3
 800bd6c:	d101      	bne.n	800bd72 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 800bd6e:	2301      	movs	r3, #1
 800bd70:	e000      	b.n	800bd74 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 800bd72:	2300      	movs	r3, #0
}
 800bd74:	4618      	mov	r0, r3
 800bd76:	370c      	adds	r7, #12
 800bd78:	46bd      	mov	sp, r7
 800bd7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd7e:	4770      	bx	lr

0800bd80 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800bd80:	b480      	push	{r7}
 800bd82:	b083      	sub	sp, #12
 800bd84:	af00      	add	r7, sp, #0
 800bd86:	6078      	str	r0, [r7, #4]
 800bd88:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	69da      	ldr	r2, [r3, #28]
 800bd8e:	683b      	ldr	r3, [r7, #0]
 800bd90:	4013      	ands	r3, r2
 800bd92:	683a      	ldr	r2, [r7, #0]
 800bd94:	429a      	cmp	r2, r3
 800bd96:	d101      	bne.n	800bd9c <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 800bd98:	2301      	movs	r3, #1
 800bd9a:	e000      	b.n	800bd9e <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 800bd9c:	2300      	movs	r3, #0
}
 800bd9e:	4618      	mov	r0, r3
 800bda0:	370c      	adds	r7, #12
 800bda2:	46bd      	mov	sp, r7
 800bda4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bda8:	4770      	bx	lr
	...

0800bdac <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 800bdac:	b580      	push	{r7, lr}
 800bdae:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 800bdb0:	2102      	movs	r1, #2
 800bdb2:	4819      	ldr	r0, [pc, #100]	; (800be18 <HW_IPCC_Rx_Handler+0x6c>)
 800bdb4:	f7ff ffe4 	bl	800bd80 <LL_C2_IPCC_IsActiveFlag_CHx>
 800bdb8:	4603      	mov	r3, r0
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d009      	beq.n	800bdd2 <HW_IPCC_Rx_Handler+0x26>
 800bdbe:	4b16      	ldr	r3, [pc, #88]	; (800be18 <HW_IPCC_Rx_Handler+0x6c>)
 800bdc0:	685b      	ldr	r3, [r3, #4]
 800bdc2:	43db      	mvns	r3, r3
 800bdc4:	f003 0302 	and.w	r3, r3, #2
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d002      	beq.n	800bdd2 <HW_IPCC_Rx_Handler+0x26>
  {
      HW_IPCC_SYS_EvtHandler();
 800bdcc:	f000 f8da 	bl	800bf84 <HW_IPCC_SYS_EvtHandler>
 800bdd0:	e01f      	b.n	800be12 <HW_IPCC_Rx_Handler+0x66>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 800bdd2:	2101      	movs	r1, #1
 800bdd4:	4810      	ldr	r0, [pc, #64]	; (800be18 <HW_IPCC_Rx_Handler+0x6c>)
 800bdd6:	f7ff ffd3 	bl	800bd80 <LL_C2_IPCC_IsActiveFlag_CHx>
 800bdda:	4603      	mov	r3, r0
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d008      	beq.n	800bdf2 <HW_IPCC_Rx_Handler+0x46>
 800bde0:	4b0d      	ldr	r3, [pc, #52]	; (800be18 <HW_IPCC_Rx_Handler+0x6c>)
 800bde2:	685b      	ldr	r3, [r3, #4]
 800bde4:	f003 0301 	and.w	r3, r3, #1
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d102      	bne.n	800bdf2 <HW_IPCC_Rx_Handler+0x46>
  {
    HW_IPCC_BLE_EvtHandler();
 800bdec:	f000 f88e 	bl	800bf0c <HW_IPCC_BLE_EvtHandler>
 800bdf0:	e00f      	b.n	800be12 <HW_IPCC_Rx_Handler+0x66>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 800bdf2:	2108      	movs	r1, #8
 800bdf4:	4808      	ldr	r0, [pc, #32]	; (800be18 <HW_IPCC_Rx_Handler+0x6c>)
 800bdf6:	f7ff ffc3 	bl	800bd80 <LL_C2_IPCC_IsActiveFlag_CHx>
 800bdfa:	4603      	mov	r3, r0
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d009      	beq.n	800be14 <HW_IPCC_Rx_Handler+0x68>
 800be00:	4b05      	ldr	r3, [pc, #20]	; (800be18 <HW_IPCC_Rx_Handler+0x6c>)
 800be02:	685b      	ldr	r3, [r3, #4]
 800be04:	43db      	mvns	r3, r3
 800be06:	f003 0308 	and.w	r3, r3, #8
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d002      	beq.n	800be14 <HW_IPCC_Rx_Handler+0x68>
  {
    HW_IPCC_TRACES_EvtHandler();
 800be0e:	f000 f905 	bl	800c01c <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 800be12:	bf00      	nop
 800be14:	bf00      	nop
}
 800be16:	bd80      	pop	{r7, pc}
 800be18:	58000c00 	.word	0x58000c00

0800be1c <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 800be1c:	b580      	push	{r7, lr}
 800be1e:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 800be20:	2102      	movs	r1, #2
 800be22:	481a      	ldr	r0, [pc, #104]	; (800be8c <HW_IPCC_Tx_Handler+0x70>)
 800be24:	f7ff ff97 	bl	800bd56 <LL_C1_IPCC_IsActiveFlag_CHx>
 800be28:	4603      	mov	r3, r0
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d109      	bne.n	800be42 <HW_IPCC_Tx_Handler+0x26>
 800be2e:	4b17      	ldr	r3, [pc, #92]	; (800be8c <HW_IPCC_Tx_Handler+0x70>)
 800be30:	685b      	ldr	r3, [r3, #4]
 800be32:	43db      	mvns	r3, r3
 800be34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d002      	beq.n	800be42 <HW_IPCC_Tx_Handler+0x26>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 800be3c:	f000 f896 	bl	800bf6c <HW_IPCC_SYS_CmdEvtHandler>
 800be40:	e020      	b.n	800be84 <HW_IPCC_Tx_Handler+0x68>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 800be42:	2108      	movs	r1, #8
 800be44:	4811      	ldr	r0, [pc, #68]	; (800be8c <HW_IPCC_Tx_Handler+0x70>)
 800be46:	f7ff ff86 	bl	800bd56 <LL_C1_IPCC_IsActiveFlag_CHx>
 800be4a:	4603      	mov	r3, r0
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d109      	bne.n	800be64 <HW_IPCC_Tx_Handler+0x48>
 800be50:	4b0e      	ldr	r3, [pc, #56]	; (800be8c <HW_IPCC_Tx_Handler+0x70>)
 800be52:	685b      	ldr	r3, [r3, #4]
 800be54:	43db      	mvns	r3, r3
 800be56:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d002      	beq.n	800be64 <HW_IPCC_Tx_Handler+0x48>
  {
    HW_IPCC_MM_FreeBufHandler();
 800be5e:	f000 f8bf 	bl	800bfe0 <HW_IPCC_MM_FreeBufHandler>
 800be62:	e00f      	b.n	800be84 <HW_IPCC_Tx_Handler+0x68>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 800be64:	2120      	movs	r1, #32
 800be66:	4809      	ldr	r0, [pc, #36]	; (800be8c <HW_IPCC_Tx_Handler+0x70>)
 800be68:	f7ff ff75 	bl	800bd56 <LL_C1_IPCC_IsActiveFlag_CHx>
 800be6c:	4603      	mov	r3, r0
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d109      	bne.n	800be86 <HW_IPCC_Tx_Handler+0x6a>
 800be72:	4b06      	ldr	r3, [pc, #24]	; (800be8c <HW_IPCC_Tx_Handler+0x70>)
 800be74:	685b      	ldr	r3, [r3, #4]
 800be76:	43db      	mvns	r3, r3
 800be78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d002      	beq.n	800be86 <HW_IPCC_Tx_Handler+0x6a>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 800be80:	f000 f850 	bl	800bf24 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 800be84:	bf00      	nop
 800be86:	bf00      	nop
}
 800be88:	bd80      	pop	{r7, pc}
 800be8a:	bf00      	nop
 800be8c:	58000c00 	.word	0x58000c00

0800be90 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 800be90:	b580      	push	{r7, lr}
 800be92:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 800be94:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800be98:	f7ff fecd 	bl	800bc36 <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 800be9c:	f44f 7000 	mov.w	r0, #512	; 0x200
 800bea0:	f7ff fe9e 	bl	800bbe0 <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 800bea4:	f44f 7000 	mov.w	r0, #512	; 0x200
 800bea8:	f7ff fe86 	bl	800bbb8 <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 800beac:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 800beae:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 800beb0:	f7ff fe72 	bl	800bb98 <LL_PWR_EnableBootC2>

  return;
 800beb4:	bf00      	nop
}
 800beb6:	bd80      	pop	{r7, pc}

0800beb8 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 800beb8:	b580      	push	{r7, lr}
 800beba:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 800bebc:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800bec0:	f7ff fea0 	bl	800bc04 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 800bec4:	4806      	ldr	r0, [pc, #24]	; (800bee0 <HW_IPCC_Init+0x28>)
 800bec6:	f7ff fee2 	bl	800bc8e <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 800beca:	4805      	ldr	r0, [pc, #20]	; (800bee0 <HW_IPCC_Init+0x28>)
 800becc:	f7ff fecf 	bl	800bc6e <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 800bed0:	202c      	movs	r0, #44	; 0x2c
 800bed2:	f7f7 fc2e 	bl	8003732 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 800bed6:	202d      	movs	r0, #45	; 0x2d
 800bed8:	f7f7 fc2b 	bl	8003732 <HAL_NVIC_EnableIRQ>

  return;
 800bedc:	bf00      	nop
}
 800bede:	bd80      	pop	{r7, pc}
 800bee0:	58000c00 	.word	0x58000c00

0800bee4 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 800bee4:	b580      	push	{r7, lr}
 800bee6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800bee8:	2101      	movs	r1, #1
 800beea:	4802      	ldr	r0, [pc, #8]	; (800bef4 <HW_IPCC_BLE_Init+0x10>)
 800beec:	f7ff ff04 	bl	800bcf8 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800bef0:	bf00      	nop
}
 800bef2:	bd80      	pop	{r7, pc}
 800bef4:	58000c00 	.word	0x58000c00

0800bef8 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 800bef8:	b580      	push	{r7, lr}
 800befa:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 800befc:	2101      	movs	r1, #1
 800befe:	4802      	ldr	r0, [pc, #8]	; (800bf08 <HW_IPCC_BLE_SendCmd+0x10>)
 800bf00:	f7ff ff1a 	bl	800bd38 <LL_C1_IPCC_SetFlag_CHx>

  return;
 800bf04:	bf00      	nop
}
 800bf06:	bd80      	pop	{r7, pc}
 800bf08:	58000c00 	.word	0x58000c00

0800bf0c <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 800bf0c:	b580      	push	{r7, lr}
 800bf0e:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 800bf10:	f7fe ffde 	bl	800aed0 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800bf14:	2101      	movs	r1, #1
 800bf16:	4802      	ldr	r0, [pc, #8]	; (800bf20 <HW_IPCC_BLE_EvtHandler+0x14>)
 800bf18:	f7ff ff00 	bl	800bd1c <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800bf1c:	bf00      	nop
}
 800bf1e:	bd80      	pop	{r7, pc}
 800bf20:	58000c00 	.word	0x58000c00

0800bf24 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 800bf24:	b580      	push	{r7, lr}
 800bf26:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 800bf28:	2120      	movs	r1, #32
 800bf2a:	4803      	ldr	r0, [pc, #12]	; (800bf38 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 800bf2c:	f7ff fed2 	bl	800bcd4 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 800bf30:	f7fe fffe 	bl	800af30 <HW_IPCC_BLE_AclDataAckNot>

  return;
 800bf34:	bf00      	nop
}
 800bf36:	bd80      	pop	{r7, pc}
 800bf38:	58000c00 	.word	0x58000c00

0800bf3c <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 800bf3c:	b580      	push	{r7, lr}
 800bf3e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800bf40:	2102      	movs	r1, #2
 800bf42:	4802      	ldr	r0, [pc, #8]	; (800bf4c <HW_IPCC_SYS_Init+0x10>)
 800bf44:	f7ff fed8 	bl	800bcf8 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800bf48:	bf00      	nop
}
 800bf4a:	bd80      	pop	{r7, pc}
 800bf4c:	58000c00 	.word	0x58000c00

0800bf50 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 800bf50:	b580      	push	{r7, lr}
 800bf52:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800bf54:	2102      	movs	r1, #2
 800bf56:	4804      	ldr	r0, [pc, #16]	; (800bf68 <HW_IPCC_SYS_SendCmd+0x18>)
 800bf58:	f7ff feee 	bl	800bd38 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800bf5c:	2102      	movs	r1, #2
 800bf5e:	4802      	ldr	r0, [pc, #8]	; (800bf68 <HW_IPCC_SYS_SendCmd+0x18>)
 800bf60:	f7ff fea5 	bl	800bcae <LL_C1_IPCC_EnableTransmitChannel>

  return;
 800bf64:	bf00      	nop
}
 800bf66:	bd80      	pop	{r7, pc}
 800bf68:	58000c00 	.word	0x58000c00

0800bf6c <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 800bf6c:	b580      	push	{r7, lr}
 800bf6e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800bf70:	2102      	movs	r1, #2
 800bf72:	4803      	ldr	r0, [pc, #12]	; (800bf80 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 800bf74:	f7ff feae 	bl	800bcd4 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 800bf78:	f7ff f82a 	bl	800afd0 <HW_IPCC_SYS_CmdEvtNot>

  return;
 800bf7c:	bf00      	nop
}
 800bf7e:	bd80      	pop	{r7, pc}
 800bf80:	58000c00 	.word	0x58000c00

0800bf84 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 800bf84:	b580      	push	{r7, lr}
 800bf86:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 800bf88:	f7ff f838 	bl	800affc <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800bf8c:	2102      	movs	r1, #2
 800bf8e:	4802      	ldr	r0, [pc, #8]	; (800bf98 <HW_IPCC_SYS_EvtHandler+0x14>)
 800bf90:	f7ff fec4 	bl	800bd1c <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800bf94:	bf00      	nop
}
 800bf96:	bd80      	pop	{r7, pc}
 800bf98:	58000c00 	.word	0x58000c00

0800bf9c <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 800bf9c:	b580      	push	{r7, lr}
 800bf9e:	b082      	sub	sp, #8
 800bfa0:	af00      	add	r7, sp, #0
 800bfa2:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 800bfa4:	2108      	movs	r1, #8
 800bfa6:	480c      	ldr	r0, [pc, #48]	; (800bfd8 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800bfa8:	f7ff fed5 	bl	800bd56 <LL_C1_IPCC_IsActiveFlag_CHx>
 800bfac:	4603      	mov	r3, r0
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d007      	beq.n	800bfc2 <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 800bfb2:	4a0a      	ldr	r2, [pc, #40]	; (800bfdc <HW_IPCC_MM_SendFreeBuf+0x40>)
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800bfb8:	2108      	movs	r1, #8
 800bfba:	4807      	ldr	r0, [pc, #28]	; (800bfd8 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800bfbc:	f7ff fe77 	bl	800bcae <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 800bfc0:	e006      	b.n	800bfd0 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800bfc6:	2108      	movs	r1, #8
 800bfc8:	4803      	ldr	r0, [pc, #12]	; (800bfd8 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800bfca:	f7ff feb5 	bl	800bd38 <LL_C1_IPCC_SetFlag_CHx>
  return;
 800bfce:	bf00      	nop
}
 800bfd0:	3708      	adds	r7, #8
 800bfd2:	46bd      	mov	sp, r7
 800bfd4:	bd80      	pop	{r7, pc}
 800bfd6:	bf00      	nop
 800bfd8:	58000c00 	.word	0x58000c00
 800bfdc:	200011d4 	.word	0x200011d4

0800bfe0 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 800bfe0:	b580      	push	{r7, lr}
 800bfe2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800bfe4:	2108      	movs	r1, #8
 800bfe6:	4806      	ldr	r0, [pc, #24]	; (800c000 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800bfe8:	f7ff fe74 	bl	800bcd4 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 800bfec:	4b05      	ldr	r3, [pc, #20]	; (800c004 <HW_IPCC_MM_FreeBufHandler+0x24>)
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800bff2:	2108      	movs	r1, #8
 800bff4:	4802      	ldr	r0, [pc, #8]	; (800c000 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800bff6:	f7ff fe9f 	bl	800bd38 <LL_C1_IPCC_SetFlag_CHx>

  return;
 800bffa:	bf00      	nop
}
 800bffc:	bd80      	pop	{r7, pc}
 800bffe:	bf00      	nop
 800c000:	58000c00 	.word	0x58000c00
 800c004:	200011d4 	.word	0x200011d4

0800c008 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 800c008:	b580      	push	{r7, lr}
 800c00a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 800c00c:	2108      	movs	r1, #8
 800c00e:	4802      	ldr	r0, [pc, #8]	; (800c018 <HW_IPCC_TRACES_Init+0x10>)
 800c010:	f7ff fe72 	bl	800bcf8 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800c014:	bf00      	nop
}
 800c016:	bd80      	pop	{r7, pc}
 800c018:	58000c00 	.word	0x58000c00

0800c01c <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 800c01c:	b580      	push	{r7, lr}
 800c01e:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 800c020:	f7ff f894 	bl	800b14c <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 800c024:	2108      	movs	r1, #8
 800c026:	4802      	ldr	r0, [pc, #8]	; (800c030 <HW_IPCC_TRACES_EvtHandler+0x14>)
 800c028:	f7ff fe78 	bl	800bd1c <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800c02c:	bf00      	nop
}
 800c02e:	bd80      	pop	{r7, pc}
 800c030:	58000c00 	.word	0x58000c00

0800c034 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 800c034:	b480      	push	{r7}
 800c036:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800c038:	4b05      	ldr	r3, [pc, #20]	; (800c050 <UTIL_LPM_Init+0x1c>)
 800c03a:	2200      	movs	r2, #0
 800c03c:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800c03e:	4b05      	ldr	r3, [pc, #20]	; (800c054 <UTIL_LPM_Init+0x20>)
 800c040:	2200      	movs	r2, #0
 800c042:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800c044:	bf00      	nop
 800c046:	46bd      	mov	sp, r7
 800c048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c04c:	4770      	bx	lr
 800c04e:	bf00      	nop
 800c050:	200011d8 	.word	0x200011d8
 800c054:	200011dc 	.word	0x200011dc

0800c058 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800c058:	b480      	push	{r7}
 800c05a:	b087      	sub	sp, #28
 800c05c:	af00      	add	r7, sp, #0
 800c05e:	6078      	str	r0, [r7, #4]
 800c060:	460b      	mov	r3, r1
 800c062:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c064:	f3ef 8310 	mrs	r3, PRIMASK
 800c068:	613b      	str	r3, [r7, #16]
  return(result);
 800c06a:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800c06c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c06e:	b672      	cpsid	i
}
 800c070:	bf00      	nop
  
  switch(state)
 800c072:	78fb      	ldrb	r3, [r7, #3]
 800c074:	2b00      	cmp	r3, #0
 800c076:	d008      	beq.n	800c08a <UTIL_LPM_SetOffMode+0x32>
 800c078:	2b01      	cmp	r3, #1
 800c07a:	d10e      	bne.n	800c09a <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 800c07c:	4b0d      	ldr	r3, [pc, #52]	; (800c0b4 <UTIL_LPM_SetOffMode+0x5c>)
 800c07e:	681a      	ldr	r2, [r3, #0]
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	4313      	orrs	r3, r2
 800c084:	4a0b      	ldr	r2, [pc, #44]	; (800c0b4 <UTIL_LPM_SetOffMode+0x5c>)
 800c086:	6013      	str	r3, [r2, #0]
      break;
 800c088:	e008      	b.n	800c09c <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	43da      	mvns	r2, r3
 800c08e:	4b09      	ldr	r3, [pc, #36]	; (800c0b4 <UTIL_LPM_SetOffMode+0x5c>)
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	4013      	ands	r3, r2
 800c094:	4a07      	ldr	r2, [pc, #28]	; (800c0b4 <UTIL_LPM_SetOffMode+0x5c>)
 800c096:	6013      	str	r3, [r2, #0]
      break;
 800c098:	e000      	b.n	800c09c <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 800c09a:	bf00      	nop
 800c09c:	697b      	ldr	r3, [r7, #20]
 800c09e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	f383 8810 	msr	PRIMASK, r3
}
 800c0a6:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800c0a8:	bf00      	nop
 800c0aa:	371c      	adds	r7, #28
 800c0ac:	46bd      	mov	sp, r7
 800c0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0b2:	4770      	bx	lr
 800c0b4:	200011dc 	.word	0x200011dc

0800c0b8 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 800c0b8:	b580      	push	{r7, lr}
 800c0ba:	b090      	sub	sp, #64	; 0x40
 800c0bc:	af00      	add	r7, sp, #0
 800c0be:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 800c0c0:	4b73      	ldr	r3, [pc, #460]	; (800c290 <UTIL_SEQ_Run+0x1d8>)
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 800c0c6:	4b72      	ldr	r3, [pc, #456]	; (800c290 <UTIL_SEQ_Run+0x1d8>)
 800c0c8:	681a      	ldr	r2, [r3, #0]
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	4013      	ands	r3, r2
 800c0ce:	4a70      	ldr	r2, [pc, #448]	; (800c290 <UTIL_SEQ_Run+0x1d8>)
 800c0d0:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 800c0d2:	4b70      	ldr	r3, [pc, #448]	; (800c294 <UTIL_SEQ_Run+0x1dc>)
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 800c0d8:	4b6f      	ldr	r3, [pc, #444]	; (800c298 <UTIL_SEQ_Run+0x1e0>)
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 800c0de:	4b6f      	ldr	r3, [pc, #444]	; (800c29c <UTIL_SEQ_Run+0x1e4>)
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	633b      	str	r3, [r7, #48]	; 0x30
  local_evtwaited =  EvtWaited;
 800c0e4:	4b6e      	ldr	r3, [pc, #440]	; (800c2a0 <UTIL_SEQ_Run+0x1e8>)
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800c0ea:	e08d      	b.n	800c208 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 800c0ec:	2300      	movs	r3, #0
 800c0ee:	63fb      	str	r3, [r7, #60]	; 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800c0f0:	e002      	b.n	800c0f8 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 800c0f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c0f4:	3301      	adds	r3, #1
 800c0f6:	63fb      	str	r3, [r7, #60]	; 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800c0f8:	4a6a      	ldr	r2, [pc, #424]	; (800c2a4 <UTIL_SEQ_Run+0x1ec>)
 800c0fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c0fc:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800c100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c102:	401a      	ands	r2, r3
 800c104:	4b62      	ldr	r3, [pc, #392]	; (800c290 <UTIL_SEQ_Run+0x1d8>)
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	4013      	ands	r3, r2
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d0f1      	beq.n	800c0f2 <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 800c10e:	4a65      	ldr	r2, [pc, #404]	; (800c2a4 <UTIL_SEQ_Run+0x1ec>)
 800c110:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c112:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800c116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c118:	401a      	ands	r2, r3
 800c11a:	4b5d      	ldr	r3, [pc, #372]	; (800c290 <UTIL_SEQ_Run+0x1d8>)
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	4013      	ands	r3, r2
 800c120:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800c122:	4a60      	ldr	r2, [pc, #384]	; (800c2a4 <UTIL_SEQ_Run+0x1ec>)
 800c124:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c126:	00db      	lsls	r3, r3, #3
 800c128:	4413      	add	r3, r2
 800c12a:	685a      	ldr	r2, [r3, #4]
 800c12c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c12e:	4013      	ands	r3, r2
 800c130:	2b00      	cmp	r3, #0
 800c132:	d106      	bne.n	800c142 <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800c134:	4a5b      	ldr	r2, [pc, #364]	; (800c2a4 <UTIL_SEQ_Run+0x1ec>)
 800c136:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c138:	00db      	lsls	r3, r3, #3
 800c13a:	4413      	add	r3, r2
 800c13c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c140:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800c142:	4a58      	ldr	r2, [pc, #352]	; (800c2a4 <UTIL_SEQ_Run+0x1ec>)
 800c144:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c146:	00db      	lsls	r3, r3, #3
 800c148:	4413      	add	r3, r2
 800c14a:	685a      	ldr	r2, [r3, #4]
 800c14c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c14e:	4013      	ands	r3, r2
 800c150:	4618      	mov	r0, r3
 800c152:	f000 f9b3 	bl	800c4bc <SEQ_BitPosition>
 800c156:	4603      	mov	r3, r0
 800c158:	461a      	mov	r2, r3
 800c15a:	4b53      	ldr	r3, [pc, #332]	; (800c2a8 <UTIL_SEQ_Run+0x1f0>)
 800c15c:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800c15e:	4a51      	ldr	r2, [pc, #324]	; (800c2a4 <UTIL_SEQ_Run+0x1ec>)
 800c160:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c162:	00db      	lsls	r3, r3, #3
 800c164:	4413      	add	r3, r2
 800c166:	685a      	ldr	r2, [r3, #4]
 800c168:	4b4f      	ldr	r3, [pc, #316]	; (800c2a8 <UTIL_SEQ_Run+0x1f0>)
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	2101      	movs	r1, #1
 800c16e:	fa01 f303 	lsl.w	r3, r1, r3
 800c172:	43db      	mvns	r3, r3
 800c174:	401a      	ands	r2, r3
 800c176:	494b      	ldr	r1, [pc, #300]	; (800c2a4 <UTIL_SEQ_Run+0x1ec>)
 800c178:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c17a:	00db      	lsls	r3, r3, #3
 800c17c:	440b      	add	r3, r1
 800c17e:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c180:	f3ef 8310 	mrs	r3, PRIMASK
 800c184:	61bb      	str	r3, [r7, #24]
  return(result);
 800c186:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800c188:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800c18a:	b672      	cpsid	i
}
 800c18c:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 800c18e:	4b46      	ldr	r3, [pc, #280]	; (800c2a8 <UTIL_SEQ_Run+0x1f0>)
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	2201      	movs	r2, #1
 800c194:	fa02 f303 	lsl.w	r3, r2, r3
 800c198:	43da      	mvns	r2, r3
 800c19a:	4b3e      	ldr	r3, [pc, #248]	; (800c294 <UTIL_SEQ_Run+0x1dc>)
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	4013      	ands	r3, r2
 800c1a0:	4a3c      	ldr	r2, [pc, #240]	; (800c294 <UTIL_SEQ_Run+0x1dc>)
 800c1a2:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800c1a4:	2302      	movs	r3, #2
 800c1a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c1a8:	e013      	b.n	800c1d2 <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800c1aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c1ac:	3b01      	subs	r3, #1
 800c1ae:	4a3d      	ldr	r2, [pc, #244]	; (800c2a4 <UTIL_SEQ_Run+0x1ec>)
 800c1b0:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800c1b4:	4b3c      	ldr	r3, [pc, #240]	; (800c2a8 <UTIL_SEQ_Run+0x1f0>)
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	2201      	movs	r2, #1
 800c1ba:	fa02 f303 	lsl.w	r3, r2, r3
 800c1be:	43da      	mvns	r2, r3
 800c1c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c1c2:	3b01      	subs	r3, #1
 800c1c4:	400a      	ands	r2, r1
 800c1c6:	4937      	ldr	r1, [pc, #220]	; (800c2a4 <UTIL_SEQ_Run+0x1ec>)
 800c1c8:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800c1cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c1ce:	3b01      	subs	r3, #1
 800c1d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c1d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d1e8      	bne.n	800c1aa <UTIL_SEQ_Run+0xf2>
 800c1d8:	6a3b      	ldr	r3, [r7, #32]
 800c1da:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c1dc:	697b      	ldr	r3, [r7, #20]
 800c1de:	f383 8810 	msr	PRIMASK, r3
}
 800c1e2:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 800c1e4:	4b30      	ldr	r3, [pc, #192]	; (800c2a8 <UTIL_SEQ_Run+0x1f0>)
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	4a30      	ldr	r2, [pc, #192]	; (800c2ac <UTIL_SEQ_Run+0x1f4>)
 800c1ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c1ee:	4798      	blx	r3

    local_taskset = TaskSet;
 800c1f0:	4b28      	ldr	r3, [pc, #160]	; (800c294 <UTIL_SEQ_Run+0x1dc>)
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	63bb      	str	r3, [r7, #56]	; 0x38
    local_evtset = EvtSet;
 800c1f6:	4b28      	ldr	r3, [pc, #160]	; (800c298 <UTIL_SEQ_Run+0x1e0>)
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	637b      	str	r3, [r7, #52]	; 0x34
    local_taskmask = TaskMask;
 800c1fc:	4b27      	ldr	r3, [pc, #156]	; (800c29c <UTIL_SEQ_Run+0x1e4>)
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	633b      	str	r3, [r7, #48]	; 0x30
    local_evtwaited = EvtWaited;
 800c202:	4b27      	ldr	r3, [pc, #156]	; (800c2a0 <UTIL_SEQ_Run+0x1e8>)
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800c208:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c20a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c20c:	401a      	ands	r2, r3
 800c20e:	4b20      	ldr	r3, [pc, #128]	; (800c290 <UTIL_SEQ_Run+0x1d8>)
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	4013      	ands	r3, r2
 800c214:	2b00      	cmp	r3, #0
 800c216:	d005      	beq.n	800c224 <UTIL_SEQ_Run+0x16c>
 800c218:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c21a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c21c:	4013      	ands	r3, r2
 800c21e:	2b00      	cmp	r3, #0
 800c220:	f43f af64 	beq.w	800c0ec <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800c224:	4b20      	ldr	r3, [pc, #128]	; (800c2a8 <UTIL_SEQ_Run+0x1f0>)
 800c226:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c22a:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 800c22c:	f000 f938 	bl	800c4a0 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c230:	f3ef 8310 	mrs	r3, PRIMASK
 800c234:	613b      	str	r3, [r7, #16]
  return(result);
 800c236:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 800c238:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800c23a:	b672      	cpsid	i
}
 800c23c:	bf00      	nop
  local_taskset = TaskSet;
 800c23e:	4b15      	ldr	r3, [pc, #84]	; (800c294 <UTIL_SEQ_Run+0x1dc>)
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 800c244:	4b14      	ldr	r3, [pc, #80]	; (800c298 <UTIL_SEQ_Run+0x1e0>)
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 800c24a:	4b14      	ldr	r3, [pc, #80]	; (800c29c <UTIL_SEQ_Run+0x1e4>)
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	633b      	str	r3, [r7, #48]	; 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 800c250:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c254:	401a      	ands	r2, r3
 800c256:	4b0e      	ldr	r3, [pc, #56]	; (800c290 <UTIL_SEQ_Run+0x1d8>)
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	4013      	ands	r3, r2
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d107      	bne.n	800c270 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 800c260:	4b0f      	ldr	r3, [pc, #60]	; (800c2a0 <UTIL_SEQ_Run+0x1e8>)
 800c262:	681a      	ldr	r2, [r3, #0]
 800c264:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c266:	4013      	ands	r3, r2
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d101      	bne.n	800c270 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 800c26c:	f7f5 fb1a 	bl	80018a4 <UTIL_SEQ_Idle>
 800c270:	69fb      	ldr	r3, [r7, #28]
 800c272:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	f383 8810 	msr	PRIMASK, r3
}
 800c27a:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 800c27c:	f000 f917 	bl	800c4ae <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 800c280:	4a03      	ldr	r2, [pc, #12]	; (800c290 <UTIL_SEQ_Run+0x1d8>)
 800c282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c284:	6013      	str	r3, [r2, #0]

  return;
 800c286:	bf00      	nop
}
 800c288:	3740      	adds	r7, #64	; 0x40
 800c28a:	46bd      	mov	sp, r7
 800c28c:	bd80      	pop	{r7, pc}
 800c28e:	bf00      	nop
 800c290:	20000024 	.word	0x20000024
 800c294:	200011e0 	.word	0x200011e0
 800c298:	200011e4 	.word	0x200011e4
 800c29c:	20000020 	.word	0x20000020
 800c2a0:	200011e8 	.word	0x200011e8
 800c2a4:	20001270 	.word	0x20001270
 800c2a8:	200011ec 	.word	0x200011ec
 800c2ac:	200011f0 	.word	0x200011f0

0800c2b0 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 800c2b0:	b580      	push	{r7, lr}
 800c2b2:	b088      	sub	sp, #32
 800c2b4:	af00      	add	r7, sp, #0
 800c2b6:	60f8      	str	r0, [r7, #12]
 800c2b8:	60b9      	str	r1, [r7, #8]
 800c2ba:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c2bc:	f3ef 8310 	mrs	r3, PRIMASK
 800c2c0:	617b      	str	r3, [r7, #20]
  return(result);
 800c2c2:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 800c2c4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800c2c6:	b672      	cpsid	i
}
 800c2c8:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800c2ca:	68f8      	ldr	r0, [r7, #12]
 800c2cc:	f000 f8f6 	bl	800c4bc <SEQ_BitPosition>
 800c2d0:	4603      	mov	r3, r0
 800c2d2:	4619      	mov	r1, r3
 800c2d4:	4a06      	ldr	r2, [pc, #24]	; (800c2f0 <UTIL_SEQ_RegTask+0x40>)
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800c2dc:	69fb      	ldr	r3, [r7, #28]
 800c2de:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c2e0:	69bb      	ldr	r3, [r7, #24]
 800c2e2:	f383 8810 	msr	PRIMASK, r3
}
 800c2e6:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 800c2e8:	bf00      	nop
}
 800c2ea:	3720      	adds	r7, #32
 800c2ec:	46bd      	mov	sp, r7
 800c2ee:	bd80      	pop	{r7, pc}
 800c2f0:	200011f0 	.word	0x200011f0

0800c2f4 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 800c2f4:	b480      	push	{r7}
 800c2f6:	b087      	sub	sp, #28
 800c2f8:	af00      	add	r7, sp, #0
 800c2fa:	6078      	str	r0, [r7, #4]
 800c2fc:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c2fe:	f3ef 8310 	mrs	r3, PRIMASK
 800c302:	60fb      	str	r3, [r7, #12]
  return(result);
 800c304:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800c306:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c308:	b672      	cpsid	i
}
 800c30a:	bf00      	nop

  TaskSet |= TaskId_bm;
 800c30c:	4b0d      	ldr	r3, [pc, #52]	; (800c344 <UTIL_SEQ_SetTask+0x50>)
 800c30e:	681a      	ldr	r2, [r3, #0]
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	4313      	orrs	r3, r2
 800c314:	4a0b      	ldr	r2, [pc, #44]	; (800c344 <UTIL_SEQ_SetTask+0x50>)
 800c316:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800c318:	4a0b      	ldr	r2, [pc, #44]	; (800c348 <UTIL_SEQ_SetTask+0x54>)
 800c31a:	683b      	ldr	r3, [r7, #0]
 800c31c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	431a      	orrs	r2, r3
 800c324:	4908      	ldr	r1, [pc, #32]	; (800c348 <UTIL_SEQ_SetTask+0x54>)
 800c326:	683b      	ldr	r3, [r7, #0]
 800c328:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800c32c:	697b      	ldr	r3, [r7, #20]
 800c32e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c330:	693b      	ldr	r3, [r7, #16]
 800c332:	f383 8810 	msr	PRIMASK, r3
}
 800c336:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800c338:	bf00      	nop
}
 800c33a:	371c      	adds	r7, #28
 800c33c:	46bd      	mov	sp, r7
 800c33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c342:	4770      	bx	lr
 800c344:	200011e0 	.word	0x200011e0
 800c348:	20001270 	.word	0x20001270

0800c34c <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800c34c:	b480      	push	{r7}
 800c34e:	b087      	sub	sp, #28
 800c350:	af00      	add	r7, sp, #0
 800c352:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c354:	f3ef 8310 	mrs	r3, PRIMASK
 800c358:	60fb      	str	r3, [r7, #12]
  return(result);
 800c35a:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800c35c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c35e:	b672      	cpsid	i
}
 800c360:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	43da      	mvns	r2, r3
 800c366:	4b08      	ldr	r3, [pc, #32]	; (800c388 <UTIL_SEQ_PauseTask+0x3c>)
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	4013      	ands	r3, r2
 800c36c:	4a06      	ldr	r2, [pc, #24]	; (800c388 <UTIL_SEQ_PauseTask+0x3c>)
 800c36e:	6013      	str	r3, [r2, #0]
 800c370:	697b      	ldr	r3, [r7, #20]
 800c372:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c374:	693b      	ldr	r3, [r7, #16]
 800c376:	f383 8810 	msr	PRIMASK, r3
}
 800c37a:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800c37c:	bf00      	nop
}
 800c37e:	371c      	adds	r7, #28
 800c380:	46bd      	mov	sp, r7
 800c382:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c386:	4770      	bx	lr
 800c388:	20000020 	.word	0x20000020

0800c38c <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800c38c:	b480      	push	{r7}
 800c38e:	b087      	sub	sp, #28
 800c390:	af00      	add	r7, sp, #0
 800c392:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c394:	f3ef 8310 	mrs	r3, PRIMASK
 800c398:	60fb      	str	r3, [r7, #12]
  return(result);
 800c39a:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800c39c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c39e:	b672      	cpsid	i
}
 800c3a0:	bf00      	nop

  TaskMask |= TaskId_bm;
 800c3a2:	4b09      	ldr	r3, [pc, #36]	; (800c3c8 <UTIL_SEQ_ResumeTask+0x3c>)
 800c3a4:	681a      	ldr	r2, [r3, #0]
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	4313      	orrs	r3, r2
 800c3aa:	4a07      	ldr	r2, [pc, #28]	; (800c3c8 <UTIL_SEQ_ResumeTask+0x3c>)
 800c3ac:	6013      	str	r3, [r2, #0]
 800c3ae:	697b      	ldr	r3, [r7, #20]
 800c3b0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c3b2:	693b      	ldr	r3, [r7, #16]
 800c3b4:	f383 8810 	msr	PRIMASK, r3
}
 800c3b8:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800c3ba:	bf00      	nop
}
 800c3bc:	371c      	adds	r7, #28
 800c3be:	46bd      	mov	sp, r7
 800c3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3c4:	4770      	bx	lr
 800c3c6:	bf00      	nop
 800c3c8:	20000020 	.word	0x20000020

0800c3cc <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 800c3cc:	b480      	push	{r7}
 800c3ce:	b087      	sub	sp, #28
 800c3d0:	af00      	add	r7, sp, #0
 800c3d2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c3d4:	f3ef 8310 	mrs	r3, PRIMASK
 800c3d8:	60fb      	str	r3, [r7, #12]
  return(result);
 800c3da:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800c3dc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c3de:	b672      	cpsid	i
}
 800c3e0:	bf00      	nop

  EvtSet |= EvtId_bm;
 800c3e2:	4b09      	ldr	r3, [pc, #36]	; (800c408 <UTIL_SEQ_SetEvt+0x3c>)
 800c3e4:	681a      	ldr	r2, [r3, #0]
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	4313      	orrs	r3, r2
 800c3ea:	4a07      	ldr	r2, [pc, #28]	; (800c408 <UTIL_SEQ_SetEvt+0x3c>)
 800c3ec:	6013      	str	r3, [r2, #0]
 800c3ee:	697b      	ldr	r3, [r7, #20]
 800c3f0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c3f2:	693b      	ldr	r3, [r7, #16]
 800c3f4:	f383 8810 	msr	PRIMASK, r3
}
 800c3f8:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800c3fa:	bf00      	nop
}
 800c3fc:	371c      	adds	r7, #28
 800c3fe:	46bd      	mov	sp, r7
 800c400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c404:	4770      	bx	lr
 800c406:	bf00      	nop
 800c408:	200011e4 	.word	0x200011e4

0800c40c <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 800c40c:	b580      	push	{r7, lr}
 800c40e:	b088      	sub	sp, #32
 800c410:	af00      	add	r7, sp, #0
 800c412:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 800c414:	4b1f      	ldr	r3, [pc, #124]	; (800c494 <UTIL_SEQ_WaitEvt+0x88>)
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 800c41a:	4b1e      	ldr	r3, [pc, #120]	; (800c494 <UTIL_SEQ_WaitEvt+0x88>)
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c422:	d102      	bne.n	800c42a <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 800c424:	2300      	movs	r3, #0
 800c426:	61fb      	str	r3, [r7, #28]
 800c428:	e005      	b.n	800c436 <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 800c42a:	4b1a      	ldr	r3, [pc, #104]	; (800c494 <UTIL_SEQ_WaitEvt+0x88>)
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	2201      	movs	r2, #1
 800c430:	fa02 f303 	lsl.w	r3, r2, r3
 800c434:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 800c436:	4b18      	ldr	r3, [pc, #96]	; (800c498 <UTIL_SEQ_WaitEvt+0x8c>)
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 800c43c:	4a16      	ldr	r2, [pc, #88]	; (800c498 <UTIL_SEQ_WaitEvt+0x8c>)
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 800c442:	e003      	b.n	800c44c <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 800c444:	6879      	ldr	r1, [r7, #4]
 800c446:	69f8      	ldr	r0, [r7, #28]
 800c448:	f7f5 fa33 	bl	80018b2 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 800c44c:	4b13      	ldr	r3, [pc, #76]	; (800c49c <UTIL_SEQ_WaitEvt+0x90>)
 800c44e:	681a      	ldr	r2, [r3, #0]
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	4013      	ands	r3, r2
 800c454:	2b00      	cmp	r3, #0
 800c456:	d0f5      	beq.n	800c444 <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 800c458:	4a0e      	ldr	r2, [pc, #56]	; (800c494 <UTIL_SEQ_WaitEvt+0x88>)
 800c45a:	69bb      	ldr	r3, [r7, #24]
 800c45c:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c45e:	f3ef 8310 	mrs	r3, PRIMASK
 800c462:	60bb      	str	r3, [r7, #8]
  return(result);
 800c464:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800c466:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800c468:	b672      	cpsid	i
}
 800c46a:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	43da      	mvns	r2, r3
 800c470:	4b0a      	ldr	r3, [pc, #40]	; (800c49c <UTIL_SEQ_WaitEvt+0x90>)
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	4013      	ands	r3, r2
 800c476:	4a09      	ldr	r2, [pc, #36]	; (800c49c <UTIL_SEQ_WaitEvt+0x90>)
 800c478:	6013      	str	r3, [r2, #0]
 800c47a:	693b      	ldr	r3, [r7, #16]
 800c47c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	f383 8810 	msr	PRIMASK, r3
}
 800c484:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 800c486:	4a04      	ldr	r2, [pc, #16]	; (800c498 <UTIL_SEQ_WaitEvt+0x8c>)
 800c488:	697b      	ldr	r3, [r7, #20]
 800c48a:	6013      	str	r3, [r2, #0]
  return;
 800c48c:	bf00      	nop
}
 800c48e:	3720      	adds	r7, #32
 800c490:	46bd      	mov	sp, r7
 800c492:	bd80      	pop	{r7, pc}
 800c494:	200011ec 	.word	0x200011ec
 800c498:	200011e8 	.word	0x200011e8
 800c49c:	200011e4 	.word	0x200011e4

0800c4a0 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 800c4a0:	b480      	push	{r7}
 800c4a2:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800c4a4:	bf00      	nop
}
 800c4a6:	46bd      	mov	sp, r7
 800c4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ac:	4770      	bx	lr

0800c4ae <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 800c4ae:	b480      	push	{r7}
 800c4b0:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800c4b2:	bf00      	nop
}
 800c4b4:	46bd      	mov	sp, r7
 800c4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ba:	4770      	bx	lr

0800c4bc <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 800c4bc:	b480      	push	{r7}
 800c4be:	b085      	sub	sp, #20
 800c4c0:	af00      	add	r7, sp, #0
 800c4c2:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 800c4c4:	2300      	movs	r3, #0
 800c4c6:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 800c4cc:	68bb      	ldr	r3, [r7, #8]
 800c4ce:	0c1b      	lsrs	r3, r3, #16
 800c4d0:	041b      	lsls	r3, r3, #16
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d104      	bne.n	800c4e0 <SEQ_BitPosition+0x24>
 800c4d6:	2310      	movs	r3, #16
 800c4d8:	73fb      	strb	r3, [r7, #15]
 800c4da:	68bb      	ldr	r3, [r7, #8]
 800c4dc:	041b      	lsls	r3, r3, #16
 800c4de:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 800c4e0:	68bb      	ldr	r3, [r7, #8]
 800c4e2:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d105      	bne.n	800c4f6 <SEQ_BitPosition+0x3a>
 800c4ea:	7bfb      	ldrb	r3, [r7, #15]
 800c4ec:	3308      	adds	r3, #8
 800c4ee:	73fb      	strb	r3, [r7, #15]
 800c4f0:	68bb      	ldr	r3, [r7, #8]
 800c4f2:	021b      	lsls	r3, r3, #8
 800c4f4:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 800c4f6:	68bb      	ldr	r3, [r7, #8]
 800c4f8:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d105      	bne.n	800c50c <SEQ_BitPosition+0x50>
 800c500:	7bfb      	ldrb	r3, [r7, #15]
 800c502:	3304      	adds	r3, #4
 800c504:	73fb      	strb	r3, [r7, #15]
 800c506:	68bb      	ldr	r3, [r7, #8]
 800c508:	011b      	lsls	r3, r3, #4
 800c50a:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 800c50c:	68bb      	ldr	r3, [r7, #8]
 800c50e:	0f1b      	lsrs	r3, r3, #28
 800c510:	4a07      	ldr	r2, [pc, #28]	; (800c530 <SEQ_BitPosition+0x74>)
 800c512:	5cd2      	ldrb	r2, [r2, r3]
 800c514:	7bfb      	ldrb	r3, [r7, #15]
 800c516:	4413      	add	r3, r2
 800c518:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 800c51a:	7bfb      	ldrb	r3, [r7, #15]
 800c51c:	f1c3 031f 	rsb	r3, r3, #31
 800c520:	b2db      	uxtb	r3, r3
}
 800c522:	4618      	mov	r0, r3
 800c524:	3714      	adds	r7, #20
 800c526:	46bd      	mov	sp, r7
 800c528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c52c:	4770      	bx	lr
 800c52e:	bf00      	nop
 800c530:	0800da10 	.word	0x0800da10

0800c534 <__errno>:
 800c534:	4b01      	ldr	r3, [pc, #4]	; (800c53c <__errno+0x8>)
 800c536:	6818      	ldr	r0, [r3, #0]
 800c538:	4770      	bx	lr
 800c53a:	bf00      	nop
 800c53c:	20000028 	.word	0x20000028

0800c540 <__libc_init_array>:
 800c540:	b570      	push	{r4, r5, r6, lr}
 800c542:	4d0d      	ldr	r5, [pc, #52]	; (800c578 <__libc_init_array+0x38>)
 800c544:	4c0d      	ldr	r4, [pc, #52]	; (800c57c <__libc_init_array+0x3c>)
 800c546:	1b64      	subs	r4, r4, r5
 800c548:	10a4      	asrs	r4, r4, #2
 800c54a:	2600      	movs	r6, #0
 800c54c:	42a6      	cmp	r6, r4
 800c54e:	d109      	bne.n	800c564 <__libc_init_array+0x24>
 800c550:	4d0b      	ldr	r5, [pc, #44]	; (800c580 <__libc_init_array+0x40>)
 800c552:	4c0c      	ldr	r4, [pc, #48]	; (800c584 <__libc_init_array+0x44>)
 800c554:	f001 f890 	bl	800d678 <_init>
 800c558:	1b64      	subs	r4, r4, r5
 800c55a:	10a4      	asrs	r4, r4, #2
 800c55c:	2600      	movs	r6, #0
 800c55e:	42a6      	cmp	r6, r4
 800c560:	d105      	bne.n	800c56e <__libc_init_array+0x2e>
 800c562:	bd70      	pop	{r4, r5, r6, pc}
 800c564:	f855 3b04 	ldr.w	r3, [r5], #4
 800c568:	4798      	blx	r3
 800c56a:	3601      	adds	r6, #1
 800c56c:	e7ee      	b.n	800c54c <__libc_init_array+0xc>
 800c56e:	f855 3b04 	ldr.w	r3, [r5], #4
 800c572:	4798      	blx	r3
 800c574:	3601      	adds	r6, #1
 800c576:	e7f2      	b.n	800c55e <__libc_init_array+0x1e>
 800c578:	0800dac0 	.word	0x0800dac0
 800c57c:	0800dac0 	.word	0x0800dac0
 800c580:	0800dac0 	.word	0x0800dac0
 800c584:	0800dac4 	.word	0x0800dac4

0800c588 <memcpy>:
 800c588:	440a      	add	r2, r1
 800c58a:	4291      	cmp	r1, r2
 800c58c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800c590:	d100      	bne.n	800c594 <memcpy+0xc>
 800c592:	4770      	bx	lr
 800c594:	b510      	push	{r4, lr}
 800c596:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c59a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c59e:	4291      	cmp	r1, r2
 800c5a0:	d1f9      	bne.n	800c596 <memcpy+0xe>
 800c5a2:	bd10      	pop	{r4, pc}

0800c5a4 <memset>:
 800c5a4:	4402      	add	r2, r0
 800c5a6:	4603      	mov	r3, r0
 800c5a8:	4293      	cmp	r3, r2
 800c5aa:	d100      	bne.n	800c5ae <memset+0xa>
 800c5ac:	4770      	bx	lr
 800c5ae:	f803 1b01 	strb.w	r1, [r3], #1
 800c5b2:	e7f9      	b.n	800c5a8 <memset+0x4>

0800c5b4 <iprintf>:
 800c5b4:	b40f      	push	{r0, r1, r2, r3}
 800c5b6:	4b0a      	ldr	r3, [pc, #40]	; (800c5e0 <iprintf+0x2c>)
 800c5b8:	b513      	push	{r0, r1, r4, lr}
 800c5ba:	681c      	ldr	r4, [r3, #0]
 800c5bc:	b124      	cbz	r4, 800c5c8 <iprintf+0x14>
 800c5be:	69a3      	ldr	r3, [r4, #24]
 800c5c0:	b913      	cbnz	r3, 800c5c8 <iprintf+0x14>
 800c5c2:	4620      	mov	r0, r4
 800c5c4:	f000 fa74 	bl	800cab0 <__sinit>
 800c5c8:	ab05      	add	r3, sp, #20
 800c5ca:	9a04      	ldr	r2, [sp, #16]
 800c5cc:	68a1      	ldr	r1, [r4, #8]
 800c5ce:	9301      	str	r3, [sp, #4]
 800c5d0:	4620      	mov	r0, r4
 800c5d2:	f000 fc7d 	bl	800ced0 <_vfiprintf_r>
 800c5d6:	b002      	add	sp, #8
 800c5d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c5dc:	b004      	add	sp, #16
 800c5de:	4770      	bx	lr
 800c5e0:	20000028 	.word	0x20000028

0800c5e4 <putchar>:
 800c5e4:	4b09      	ldr	r3, [pc, #36]	; (800c60c <putchar+0x28>)
 800c5e6:	b513      	push	{r0, r1, r4, lr}
 800c5e8:	681c      	ldr	r4, [r3, #0]
 800c5ea:	4601      	mov	r1, r0
 800c5ec:	b134      	cbz	r4, 800c5fc <putchar+0x18>
 800c5ee:	69a3      	ldr	r3, [r4, #24]
 800c5f0:	b923      	cbnz	r3, 800c5fc <putchar+0x18>
 800c5f2:	9001      	str	r0, [sp, #4]
 800c5f4:	4620      	mov	r0, r4
 800c5f6:	f000 fa5b 	bl	800cab0 <__sinit>
 800c5fa:	9901      	ldr	r1, [sp, #4]
 800c5fc:	68a2      	ldr	r2, [r4, #8]
 800c5fe:	4620      	mov	r0, r4
 800c600:	b002      	add	sp, #8
 800c602:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c606:	f000 bf27 	b.w	800d458 <_putc_r>
 800c60a:	bf00      	nop
 800c60c:	20000028 	.word	0x20000028

0800c610 <_puts_r>:
 800c610:	b570      	push	{r4, r5, r6, lr}
 800c612:	460e      	mov	r6, r1
 800c614:	4605      	mov	r5, r0
 800c616:	b118      	cbz	r0, 800c620 <_puts_r+0x10>
 800c618:	6983      	ldr	r3, [r0, #24]
 800c61a:	b90b      	cbnz	r3, 800c620 <_puts_r+0x10>
 800c61c:	f000 fa48 	bl	800cab0 <__sinit>
 800c620:	69ab      	ldr	r3, [r5, #24]
 800c622:	68ac      	ldr	r4, [r5, #8]
 800c624:	b913      	cbnz	r3, 800c62c <_puts_r+0x1c>
 800c626:	4628      	mov	r0, r5
 800c628:	f000 fa42 	bl	800cab0 <__sinit>
 800c62c:	4b2c      	ldr	r3, [pc, #176]	; (800c6e0 <_puts_r+0xd0>)
 800c62e:	429c      	cmp	r4, r3
 800c630:	d120      	bne.n	800c674 <_puts_r+0x64>
 800c632:	686c      	ldr	r4, [r5, #4]
 800c634:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c636:	07db      	lsls	r3, r3, #31
 800c638:	d405      	bmi.n	800c646 <_puts_r+0x36>
 800c63a:	89a3      	ldrh	r3, [r4, #12]
 800c63c:	0598      	lsls	r0, r3, #22
 800c63e:	d402      	bmi.n	800c646 <_puts_r+0x36>
 800c640:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c642:	f000 fad3 	bl	800cbec <__retarget_lock_acquire_recursive>
 800c646:	89a3      	ldrh	r3, [r4, #12]
 800c648:	0719      	lsls	r1, r3, #28
 800c64a:	d51d      	bpl.n	800c688 <_puts_r+0x78>
 800c64c:	6923      	ldr	r3, [r4, #16]
 800c64e:	b1db      	cbz	r3, 800c688 <_puts_r+0x78>
 800c650:	3e01      	subs	r6, #1
 800c652:	68a3      	ldr	r3, [r4, #8]
 800c654:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c658:	3b01      	subs	r3, #1
 800c65a:	60a3      	str	r3, [r4, #8]
 800c65c:	bb39      	cbnz	r1, 800c6ae <_puts_r+0x9e>
 800c65e:	2b00      	cmp	r3, #0
 800c660:	da38      	bge.n	800c6d4 <_puts_r+0xc4>
 800c662:	4622      	mov	r2, r4
 800c664:	210a      	movs	r1, #10
 800c666:	4628      	mov	r0, r5
 800c668:	f000 f848 	bl	800c6fc <__swbuf_r>
 800c66c:	3001      	adds	r0, #1
 800c66e:	d011      	beq.n	800c694 <_puts_r+0x84>
 800c670:	250a      	movs	r5, #10
 800c672:	e011      	b.n	800c698 <_puts_r+0x88>
 800c674:	4b1b      	ldr	r3, [pc, #108]	; (800c6e4 <_puts_r+0xd4>)
 800c676:	429c      	cmp	r4, r3
 800c678:	d101      	bne.n	800c67e <_puts_r+0x6e>
 800c67a:	68ac      	ldr	r4, [r5, #8]
 800c67c:	e7da      	b.n	800c634 <_puts_r+0x24>
 800c67e:	4b1a      	ldr	r3, [pc, #104]	; (800c6e8 <_puts_r+0xd8>)
 800c680:	429c      	cmp	r4, r3
 800c682:	bf08      	it	eq
 800c684:	68ec      	ldreq	r4, [r5, #12]
 800c686:	e7d5      	b.n	800c634 <_puts_r+0x24>
 800c688:	4621      	mov	r1, r4
 800c68a:	4628      	mov	r0, r5
 800c68c:	f000 f888 	bl	800c7a0 <__swsetup_r>
 800c690:	2800      	cmp	r0, #0
 800c692:	d0dd      	beq.n	800c650 <_puts_r+0x40>
 800c694:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800c698:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c69a:	07da      	lsls	r2, r3, #31
 800c69c:	d405      	bmi.n	800c6aa <_puts_r+0x9a>
 800c69e:	89a3      	ldrh	r3, [r4, #12]
 800c6a0:	059b      	lsls	r3, r3, #22
 800c6a2:	d402      	bmi.n	800c6aa <_puts_r+0x9a>
 800c6a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c6a6:	f000 faa2 	bl	800cbee <__retarget_lock_release_recursive>
 800c6aa:	4628      	mov	r0, r5
 800c6ac:	bd70      	pop	{r4, r5, r6, pc}
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	da04      	bge.n	800c6bc <_puts_r+0xac>
 800c6b2:	69a2      	ldr	r2, [r4, #24]
 800c6b4:	429a      	cmp	r2, r3
 800c6b6:	dc06      	bgt.n	800c6c6 <_puts_r+0xb6>
 800c6b8:	290a      	cmp	r1, #10
 800c6ba:	d004      	beq.n	800c6c6 <_puts_r+0xb6>
 800c6bc:	6823      	ldr	r3, [r4, #0]
 800c6be:	1c5a      	adds	r2, r3, #1
 800c6c0:	6022      	str	r2, [r4, #0]
 800c6c2:	7019      	strb	r1, [r3, #0]
 800c6c4:	e7c5      	b.n	800c652 <_puts_r+0x42>
 800c6c6:	4622      	mov	r2, r4
 800c6c8:	4628      	mov	r0, r5
 800c6ca:	f000 f817 	bl	800c6fc <__swbuf_r>
 800c6ce:	3001      	adds	r0, #1
 800c6d0:	d1bf      	bne.n	800c652 <_puts_r+0x42>
 800c6d2:	e7df      	b.n	800c694 <_puts_r+0x84>
 800c6d4:	6823      	ldr	r3, [r4, #0]
 800c6d6:	250a      	movs	r5, #10
 800c6d8:	1c5a      	adds	r2, r3, #1
 800c6da:	6022      	str	r2, [r4, #0]
 800c6dc:	701d      	strb	r5, [r3, #0]
 800c6de:	e7db      	b.n	800c698 <_puts_r+0x88>
 800c6e0:	0800da44 	.word	0x0800da44
 800c6e4:	0800da64 	.word	0x0800da64
 800c6e8:	0800da24 	.word	0x0800da24

0800c6ec <puts>:
 800c6ec:	4b02      	ldr	r3, [pc, #8]	; (800c6f8 <puts+0xc>)
 800c6ee:	4601      	mov	r1, r0
 800c6f0:	6818      	ldr	r0, [r3, #0]
 800c6f2:	f7ff bf8d 	b.w	800c610 <_puts_r>
 800c6f6:	bf00      	nop
 800c6f8:	20000028 	.word	0x20000028

0800c6fc <__swbuf_r>:
 800c6fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6fe:	460e      	mov	r6, r1
 800c700:	4614      	mov	r4, r2
 800c702:	4605      	mov	r5, r0
 800c704:	b118      	cbz	r0, 800c70e <__swbuf_r+0x12>
 800c706:	6983      	ldr	r3, [r0, #24]
 800c708:	b90b      	cbnz	r3, 800c70e <__swbuf_r+0x12>
 800c70a:	f000 f9d1 	bl	800cab0 <__sinit>
 800c70e:	4b21      	ldr	r3, [pc, #132]	; (800c794 <__swbuf_r+0x98>)
 800c710:	429c      	cmp	r4, r3
 800c712:	d12b      	bne.n	800c76c <__swbuf_r+0x70>
 800c714:	686c      	ldr	r4, [r5, #4]
 800c716:	69a3      	ldr	r3, [r4, #24]
 800c718:	60a3      	str	r3, [r4, #8]
 800c71a:	89a3      	ldrh	r3, [r4, #12]
 800c71c:	071a      	lsls	r2, r3, #28
 800c71e:	d52f      	bpl.n	800c780 <__swbuf_r+0x84>
 800c720:	6923      	ldr	r3, [r4, #16]
 800c722:	b36b      	cbz	r3, 800c780 <__swbuf_r+0x84>
 800c724:	6923      	ldr	r3, [r4, #16]
 800c726:	6820      	ldr	r0, [r4, #0]
 800c728:	1ac0      	subs	r0, r0, r3
 800c72a:	6963      	ldr	r3, [r4, #20]
 800c72c:	b2f6      	uxtb	r6, r6
 800c72e:	4283      	cmp	r3, r0
 800c730:	4637      	mov	r7, r6
 800c732:	dc04      	bgt.n	800c73e <__swbuf_r+0x42>
 800c734:	4621      	mov	r1, r4
 800c736:	4628      	mov	r0, r5
 800c738:	f000 f926 	bl	800c988 <_fflush_r>
 800c73c:	bb30      	cbnz	r0, 800c78c <__swbuf_r+0x90>
 800c73e:	68a3      	ldr	r3, [r4, #8]
 800c740:	3b01      	subs	r3, #1
 800c742:	60a3      	str	r3, [r4, #8]
 800c744:	6823      	ldr	r3, [r4, #0]
 800c746:	1c5a      	adds	r2, r3, #1
 800c748:	6022      	str	r2, [r4, #0]
 800c74a:	701e      	strb	r6, [r3, #0]
 800c74c:	6963      	ldr	r3, [r4, #20]
 800c74e:	3001      	adds	r0, #1
 800c750:	4283      	cmp	r3, r0
 800c752:	d004      	beq.n	800c75e <__swbuf_r+0x62>
 800c754:	89a3      	ldrh	r3, [r4, #12]
 800c756:	07db      	lsls	r3, r3, #31
 800c758:	d506      	bpl.n	800c768 <__swbuf_r+0x6c>
 800c75a:	2e0a      	cmp	r6, #10
 800c75c:	d104      	bne.n	800c768 <__swbuf_r+0x6c>
 800c75e:	4621      	mov	r1, r4
 800c760:	4628      	mov	r0, r5
 800c762:	f000 f911 	bl	800c988 <_fflush_r>
 800c766:	b988      	cbnz	r0, 800c78c <__swbuf_r+0x90>
 800c768:	4638      	mov	r0, r7
 800c76a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c76c:	4b0a      	ldr	r3, [pc, #40]	; (800c798 <__swbuf_r+0x9c>)
 800c76e:	429c      	cmp	r4, r3
 800c770:	d101      	bne.n	800c776 <__swbuf_r+0x7a>
 800c772:	68ac      	ldr	r4, [r5, #8]
 800c774:	e7cf      	b.n	800c716 <__swbuf_r+0x1a>
 800c776:	4b09      	ldr	r3, [pc, #36]	; (800c79c <__swbuf_r+0xa0>)
 800c778:	429c      	cmp	r4, r3
 800c77a:	bf08      	it	eq
 800c77c:	68ec      	ldreq	r4, [r5, #12]
 800c77e:	e7ca      	b.n	800c716 <__swbuf_r+0x1a>
 800c780:	4621      	mov	r1, r4
 800c782:	4628      	mov	r0, r5
 800c784:	f000 f80c 	bl	800c7a0 <__swsetup_r>
 800c788:	2800      	cmp	r0, #0
 800c78a:	d0cb      	beq.n	800c724 <__swbuf_r+0x28>
 800c78c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800c790:	e7ea      	b.n	800c768 <__swbuf_r+0x6c>
 800c792:	bf00      	nop
 800c794:	0800da44 	.word	0x0800da44
 800c798:	0800da64 	.word	0x0800da64
 800c79c:	0800da24 	.word	0x0800da24

0800c7a0 <__swsetup_r>:
 800c7a0:	4b32      	ldr	r3, [pc, #200]	; (800c86c <__swsetup_r+0xcc>)
 800c7a2:	b570      	push	{r4, r5, r6, lr}
 800c7a4:	681d      	ldr	r5, [r3, #0]
 800c7a6:	4606      	mov	r6, r0
 800c7a8:	460c      	mov	r4, r1
 800c7aa:	b125      	cbz	r5, 800c7b6 <__swsetup_r+0x16>
 800c7ac:	69ab      	ldr	r3, [r5, #24]
 800c7ae:	b913      	cbnz	r3, 800c7b6 <__swsetup_r+0x16>
 800c7b0:	4628      	mov	r0, r5
 800c7b2:	f000 f97d 	bl	800cab0 <__sinit>
 800c7b6:	4b2e      	ldr	r3, [pc, #184]	; (800c870 <__swsetup_r+0xd0>)
 800c7b8:	429c      	cmp	r4, r3
 800c7ba:	d10f      	bne.n	800c7dc <__swsetup_r+0x3c>
 800c7bc:	686c      	ldr	r4, [r5, #4]
 800c7be:	89a3      	ldrh	r3, [r4, #12]
 800c7c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c7c4:	0719      	lsls	r1, r3, #28
 800c7c6:	d42c      	bmi.n	800c822 <__swsetup_r+0x82>
 800c7c8:	06dd      	lsls	r5, r3, #27
 800c7ca:	d411      	bmi.n	800c7f0 <__swsetup_r+0x50>
 800c7cc:	2309      	movs	r3, #9
 800c7ce:	6033      	str	r3, [r6, #0]
 800c7d0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c7d4:	81a3      	strh	r3, [r4, #12]
 800c7d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c7da:	e03e      	b.n	800c85a <__swsetup_r+0xba>
 800c7dc:	4b25      	ldr	r3, [pc, #148]	; (800c874 <__swsetup_r+0xd4>)
 800c7de:	429c      	cmp	r4, r3
 800c7e0:	d101      	bne.n	800c7e6 <__swsetup_r+0x46>
 800c7e2:	68ac      	ldr	r4, [r5, #8]
 800c7e4:	e7eb      	b.n	800c7be <__swsetup_r+0x1e>
 800c7e6:	4b24      	ldr	r3, [pc, #144]	; (800c878 <__swsetup_r+0xd8>)
 800c7e8:	429c      	cmp	r4, r3
 800c7ea:	bf08      	it	eq
 800c7ec:	68ec      	ldreq	r4, [r5, #12]
 800c7ee:	e7e6      	b.n	800c7be <__swsetup_r+0x1e>
 800c7f0:	0758      	lsls	r0, r3, #29
 800c7f2:	d512      	bpl.n	800c81a <__swsetup_r+0x7a>
 800c7f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c7f6:	b141      	cbz	r1, 800c80a <__swsetup_r+0x6a>
 800c7f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c7fc:	4299      	cmp	r1, r3
 800c7fe:	d002      	beq.n	800c806 <__swsetup_r+0x66>
 800c800:	4630      	mov	r0, r6
 800c802:	f000 fa5b 	bl	800ccbc <_free_r>
 800c806:	2300      	movs	r3, #0
 800c808:	6363      	str	r3, [r4, #52]	; 0x34
 800c80a:	89a3      	ldrh	r3, [r4, #12]
 800c80c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c810:	81a3      	strh	r3, [r4, #12]
 800c812:	2300      	movs	r3, #0
 800c814:	6063      	str	r3, [r4, #4]
 800c816:	6923      	ldr	r3, [r4, #16]
 800c818:	6023      	str	r3, [r4, #0]
 800c81a:	89a3      	ldrh	r3, [r4, #12]
 800c81c:	f043 0308 	orr.w	r3, r3, #8
 800c820:	81a3      	strh	r3, [r4, #12]
 800c822:	6923      	ldr	r3, [r4, #16]
 800c824:	b94b      	cbnz	r3, 800c83a <__swsetup_r+0x9a>
 800c826:	89a3      	ldrh	r3, [r4, #12]
 800c828:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c82c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c830:	d003      	beq.n	800c83a <__swsetup_r+0x9a>
 800c832:	4621      	mov	r1, r4
 800c834:	4630      	mov	r0, r6
 800c836:	f000 fa01 	bl	800cc3c <__smakebuf_r>
 800c83a:	89a0      	ldrh	r0, [r4, #12]
 800c83c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c840:	f010 0301 	ands.w	r3, r0, #1
 800c844:	d00a      	beq.n	800c85c <__swsetup_r+0xbc>
 800c846:	2300      	movs	r3, #0
 800c848:	60a3      	str	r3, [r4, #8]
 800c84a:	6963      	ldr	r3, [r4, #20]
 800c84c:	425b      	negs	r3, r3
 800c84e:	61a3      	str	r3, [r4, #24]
 800c850:	6923      	ldr	r3, [r4, #16]
 800c852:	b943      	cbnz	r3, 800c866 <__swsetup_r+0xc6>
 800c854:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c858:	d1ba      	bne.n	800c7d0 <__swsetup_r+0x30>
 800c85a:	bd70      	pop	{r4, r5, r6, pc}
 800c85c:	0781      	lsls	r1, r0, #30
 800c85e:	bf58      	it	pl
 800c860:	6963      	ldrpl	r3, [r4, #20]
 800c862:	60a3      	str	r3, [r4, #8]
 800c864:	e7f4      	b.n	800c850 <__swsetup_r+0xb0>
 800c866:	2000      	movs	r0, #0
 800c868:	e7f7      	b.n	800c85a <__swsetup_r+0xba>
 800c86a:	bf00      	nop
 800c86c:	20000028 	.word	0x20000028
 800c870:	0800da44 	.word	0x0800da44
 800c874:	0800da64 	.word	0x0800da64
 800c878:	0800da24 	.word	0x0800da24

0800c87c <__sflush_r>:
 800c87c:	898a      	ldrh	r2, [r1, #12]
 800c87e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c882:	4605      	mov	r5, r0
 800c884:	0710      	lsls	r0, r2, #28
 800c886:	460c      	mov	r4, r1
 800c888:	d458      	bmi.n	800c93c <__sflush_r+0xc0>
 800c88a:	684b      	ldr	r3, [r1, #4]
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	dc05      	bgt.n	800c89c <__sflush_r+0x20>
 800c890:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c892:	2b00      	cmp	r3, #0
 800c894:	dc02      	bgt.n	800c89c <__sflush_r+0x20>
 800c896:	2000      	movs	r0, #0
 800c898:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c89c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c89e:	2e00      	cmp	r6, #0
 800c8a0:	d0f9      	beq.n	800c896 <__sflush_r+0x1a>
 800c8a2:	2300      	movs	r3, #0
 800c8a4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c8a8:	682f      	ldr	r7, [r5, #0]
 800c8aa:	602b      	str	r3, [r5, #0]
 800c8ac:	d032      	beq.n	800c914 <__sflush_r+0x98>
 800c8ae:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c8b0:	89a3      	ldrh	r3, [r4, #12]
 800c8b2:	075a      	lsls	r2, r3, #29
 800c8b4:	d505      	bpl.n	800c8c2 <__sflush_r+0x46>
 800c8b6:	6863      	ldr	r3, [r4, #4]
 800c8b8:	1ac0      	subs	r0, r0, r3
 800c8ba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c8bc:	b10b      	cbz	r3, 800c8c2 <__sflush_r+0x46>
 800c8be:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c8c0:	1ac0      	subs	r0, r0, r3
 800c8c2:	2300      	movs	r3, #0
 800c8c4:	4602      	mov	r2, r0
 800c8c6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c8c8:	6a21      	ldr	r1, [r4, #32]
 800c8ca:	4628      	mov	r0, r5
 800c8cc:	47b0      	blx	r6
 800c8ce:	1c43      	adds	r3, r0, #1
 800c8d0:	89a3      	ldrh	r3, [r4, #12]
 800c8d2:	d106      	bne.n	800c8e2 <__sflush_r+0x66>
 800c8d4:	6829      	ldr	r1, [r5, #0]
 800c8d6:	291d      	cmp	r1, #29
 800c8d8:	d82c      	bhi.n	800c934 <__sflush_r+0xb8>
 800c8da:	4a2a      	ldr	r2, [pc, #168]	; (800c984 <__sflush_r+0x108>)
 800c8dc:	40ca      	lsrs	r2, r1
 800c8de:	07d6      	lsls	r6, r2, #31
 800c8e0:	d528      	bpl.n	800c934 <__sflush_r+0xb8>
 800c8e2:	2200      	movs	r2, #0
 800c8e4:	6062      	str	r2, [r4, #4]
 800c8e6:	04d9      	lsls	r1, r3, #19
 800c8e8:	6922      	ldr	r2, [r4, #16]
 800c8ea:	6022      	str	r2, [r4, #0]
 800c8ec:	d504      	bpl.n	800c8f8 <__sflush_r+0x7c>
 800c8ee:	1c42      	adds	r2, r0, #1
 800c8f0:	d101      	bne.n	800c8f6 <__sflush_r+0x7a>
 800c8f2:	682b      	ldr	r3, [r5, #0]
 800c8f4:	b903      	cbnz	r3, 800c8f8 <__sflush_r+0x7c>
 800c8f6:	6560      	str	r0, [r4, #84]	; 0x54
 800c8f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c8fa:	602f      	str	r7, [r5, #0]
 800c8fc:	2900      	cmp	r1, #0
 800c8fe:	d0ca      	beq.n	800c896 <__sflush_r+0x1a>
 800c900:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c904:	4299      	cmp	r1, r3
 800c906:	d002      	beq.n	800c90e <__sflush_r+0x92>
 800c908:	4628      	mov	r0, r5
 800c90a:	f000 f9d7 	bl	800ccbc <_free_r>
 800c90e:	2000      	movs	r0, #0
 800c910:	6360      	str	r0, [r4, #52]	; 0x34
 800c912:	e7c1      	b.n	800c898 <__sflush_r+0x1c>
 800c914:	6a21      	ldr	r1, [r4, #32]
 800c916:	2301      	movs	r3, #1
 800c918:	4628      	mov	r0, r5
 800c91a:	47b0      	blx	r6
 800c91c:	1c41      	adds	r1, r0, #1
 800c91e:	d1c7      	bne.n	800c8b0 <__sflush_r+0x34>
 800c920:	682b      	ldr	r3, [r5, #0]
 800c922:	2b00      	cmp	r3, #0
 800c924:	d0c4      	beq.n	800c8b0 <__sflush_r+0x34>
 800c926:	2b1d      	cmp	r3, #29
 800c928:	d001      	beq.n	800c92e <__sflush_r+0xb2>
 800c92a:	2b16      	cmp	r3, #22
 800c92c:	d101      	bne.n	800c932 <__sflush_r+0xb6>
 800c92e:	602f      	str	r7, [r5, #0]
 800c930:	e7b1      	b.n	800c896 <__sflush_r+0x1a>
 800c932:	89a3      	ldrh	r3, [r4, #12]
 800c934:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c938:	81a3      	strh	r3, [r4, #12]
 800c93a:	e7ad      	b.n	800c898 <__sflush_r+0x1c>
 800c93c:	690f      	ldr	r7, [r1, #16]
 800c93e:	2f00      	cmp	r7, #0
 800c940:	d0a9      	beq.n	800c896 <__sflush_r+0x1a>
 800c942:	0793      	lsls	r3, r2, #30
 800c944:	680e      	ldr	r6, [r1, #0]
 800c946:	bf08      	it	eq
 800c948:	694b      	ldreq	r3, [r1, #20]
 800c94a:	600f      	str	r7, [r1, #0]
 800c94c:	bf18      	it	ne
 800c94e:	2300      	movne	r3, #0
 800c950:	eba6 0807 	sub.w	r8, r6, r7
 800c954:	608b      	str	r3, [r1, #8]
 800c956:	f1b8 0f00 	cmp.w	r8, #0
 800c95a:	dd9c      	ble.n	800c896 <__sflush_r+0x1a>
 800c95c:	6a21      	ldr	r1, [r4, #32]
 800c95e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c960:	4643      	mov	r3, r8
 800c962:	463a      	mov	r2, r7
 800c964:	4628      	mov	r0, r5
 800c966:	47b0      	blx	r6
 800c968:	2800      	cmp	r0, #0
 800c96a:	dc06      	bgt.n	800c97a <__sflush_r+0xfe>
 800c96c:	89a3      	ldrh	r3, [r4, #12]
 800c96e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c972:	81a3      	strh	r3, [r4, #12]
 800c974:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c978:	e78e      	b.n	800c898 <__sflush_r+0x1c>
 800c97a:	4407      	add	r7, r0
 800c97c:	eba8 0800 	sub.w	r8, r8, r0
 800c980:	e7e9      	b.n	800c956 <__sflush_r+0xda>
 800c982:	bf00      	nop
 800c984:	20400001 	.word	0x20400001

0800c988 <_fflush_r>:
 800c988:	b538      	push	{r3, r4, r5, lr}
 800c98a:	690b      	ldr	r3, [r1, #16]
 800c98c:	4605      	mov	r5, r0
 800c98e:	460c      	mov	r4, r1
 800c990:	b913      	cbnz	r3, 800c998 <_fflush_r+0x10>
 800c992:	2500      	movs	r5, #0
 800c994:	4628      	mov	r0, r5
 800c996:	bd38      	pop	{r3, r4, r5, pc}
 800c998:	b118      	cbz	r0, 800c9a2 <_fflush_r+0x1a>
 800c99a:	6983      	ldr	r3, [r0, #24]
 800c99c:	b90b      	cbnz	r3, 800c9a2 <_fflush_r+0x1a>
 800c99e:	f000 f887 	bl	800cab0 <__sinit>
 800c9a2:	4b14      	ldr	r3, [pc, #80]	; (800c9f4 <_fflush_r+0x6c>)
 800c9a4:	429c      	cmp	r4, r3
 800c9a6:	d11b      	bne.n	800c9e0 <_fflush_r+0x58>
 800c9a8:	686c      	ldr	r4, [r5, #4]
 800c9aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d0ef      	beq.n	800c992 <_fflush_r+0xa>
 800c9b2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c9b4:	07d0      	lsls	r0, r2, #31
 800c9b6:	d404      	bmi.n	800c9c2 <_fflush_r+0x3a>
 800c9b8:	0599      	lsls	r1, r3, #22
 800c9ba:	d402      	bmi.n	800c9c2 <_fflush_r+0x3a>
 800c9bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c9be:	f000 f915 	bl	800cbec <__retarget_lock_acquire_recursive>
 800c9c2:	4628      	mov	r0, r5
 800c9c4:	4621      	mov	r1, r4
 800c9c6:	f7ff ff59 	bl	800c87c <__sflush_r>
 800c9ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c9cc:	07da      	lsls	r2, r3, #31
 800c9ce:	4605      	mov	r5, r0
 800c9d0:	d4e0      	bmi.n	800c994 <_fflush_r+0xc>
 800c9d2:	89a3      	ldrh	r3, [r4, #12]
 800c9d4:	059b      	lsls	r3, r3, #22
 800c9d6:	d4dd      	bmi.n	800c994 <_fflush_r+0xc>
 800c9d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c9da:	f000 f908 	bl	800cbee <__retarget_lock_release_recursive>
 800c9de:	e7d9      	b.n	800c994 <_fflush_r+0xc>
 800c9e0:	4b05      	ldr	r3, [pc, #20]	; (800c9f8 <_fflush_r+0x70>)
 800c9e2:	429c      	cmp	r4, r3
 800c9e4:	d101      	bne.n	800c9ea <_fflush_r+0x62>
 800c9e6:	68ac      	ldr	r4, [r5, #8]
 800c9e8:	e7df      	b.n	800c9aa <_fflush_r+0x22>
 800c9ea:	4b04      	ldr	r3, [pc, #16]	; (800c9fc <_fflush_r+0x74>)
 800c9ec:	429c      	cmp	r4, r3
 800c9ee:	bf08      	it	eq
 800c9f0:	68ec      	ldreq	r4, [r5, #12]
 800c9f2:	e7da      	b.n	800c9aa <_fflush_r+0x22>
 800c9f4:	0800da44 	.word	0x0800da44
 800c9f8:	0800da64 	.word	0x0800da64
 800c9fc:	0800da24 	.word	0x0800da24

0800ca00 <std>:
 800ca00:	2300      	movs	r3, #0
 800ca02:	b510      	push	{r4, lr}
 800ca04:	4604      	mov	r4, r0
 800ca06:	e9c0 3300 	strd	r3, r3, [r0]
 800ca0a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ca0e:	6083      	str	r3, [r0, #8]
 800ca10:	8181      	strh	r1, [r0, #12]
 800ca12:	6643      	str	r3, [r0, #100]	; 0x64
 800ca14:	81c2      	strh	r2, [r0, #14]
 800ca16:	6183      	str	r3, [r0, #24]
 800ca18:	4619      	mov	r1, r3
 800ca1a:	2208      	movs	r2, #8
 800ca1c:	305c      	adds	r0, #92	; 0x5c
 800ca1e:	f7ff fdc1 	bl	800c5a4 <memset>
 800ca22:	4b05      	ldr	r3, [pc, #20]	; (800ca38 <std+0x38>)
 800ca24:	6263      	str	r3, [r4, #36]	; 0x24
 800ca26:	4b05      	ldr	r3, [pc, #20]	; (800ca3c <std+0x3c>)
 800ca28:	62a3      	str	r3, [r4, #40]	; 0x28
 800ca2a:	4b05      	ldr	r3, [pc, #20]	; (800ca40 <std+0x40>)
 800ca2c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ca2e:	4b05      	ldr	r3, [pc, #20]	; (800ca44 <std+0x44>)
 800ca30:	6224      	str	r4, [r4, #32]
 800ca32:	6323      	str	r3, [r4, #48]	; 0x30
 800ca34:	bd10      	pop	{r4, pc}
 800ca36:	bf00      	nop
 800ca38:	0800d509 	.word	0x0800d509
 800ca3c:	0800d52b 	.word	0x0800d52b
 800ca40:	0800d563 	.word	0x0800d563
 800ca44:	0800d587 	.word	0x0800d587

0800ca48 <_cleanup_r>:
 800ca48:	4901      	ldr	r1, [pc, #4]	; (800ca50 <_cleanup_r+0x8>)
 800ca4a:	f000 b8af 	b.w	800cbac <_fwalk_reent>
 800ca4e:	bf00      	nop
 800ca50:	0800c989 	.word	0x0800c989

0800ca54 <__sfmoreglue>:
 800ca54:	b570      	push	{r4, r5, r6, lr}
 800ca56:	2268      	movs	r2, #104	; 0x68
 800ca58:	1e4d      	subs	r5, r1, #1
 800ca5a:	4355      	muls	r5, r2
 800ca5c:	460e      	mov	r6, r1
 800ca5e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ca62:	f000 f997 	bl	800cd94 <_malloc_r>
 800ca66:	4604      	mov	r4, r0
 800ca68:	b140      	cbz	r0, 800ca7c <__sfmoreglue+0x28>
 800ca6a:	2100      	movs	r1, #0
 800ca6c:	e9c0 1600 	strd	r1, r6, [r0]
 800ca70:	300c      	adds	r0, #12
 800ca72:	60a0      	str	r0, [r4, #8]
 800ca74:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ca78:	f7ff fd94 	bl	800c5a4 <memset>
 800ca7c:	4620      	mov	r0, r4
 800ca7e:	bd70      	pop	{r4, r5, r6, pc}

0800ca80 <__sfp_lock_acquire>:
 800ca80:	4801      	ldr	r0, [pc, #4]	; (800ca88 <__sfp_lock_acquire+0x8>)
 800ca82:	f000 b8b3 	b.w	800cbec <__retarget_lock_acquire_recursive>
 800ca86:	bf00      	nop
 800ca88:	20001281 	.word	0x20001281

0800ca8c <__sfp_lock_release>:
 800ca8c:	4801      	ldr	r0, [pc, #4]	; (800ca94 <__sfp_lock_release+0x8>)
 800ca8e:	f000 b8ae 	b.w	800cbee <__retarget_lock_release_recursive>
 800ca92:	bf00      	nop
 800ca94:	20001281 	.word	0x20001281

0800ca98 <__sinit_lock_acquire>:
 800ca98:	4801      	ldr	r0, [pc, #4]	; (800caa0 <__sinit_lock_acquire+0x8>)
 800ca9a:	f000 b8a7 	b.w	800cbec <__retarget_lock_acquire_recursive>
 800ca9e:	bf00      	nop
 800caa0:	20001282 	.word	0x20001282

0800caa4 <__sinit_lock_release>:
 800caa4:	4801      	ldr	r0, [pc, #4]	; (800caac <__sinit_lock_release+0x8>)
 800caa6:	f000 b8a2 	b.w	800cbee <__retarget_lock_release_recursive>
 800caaa:	bf00      	nop
 800caac:	20001282 	.word	0x20001282

0800cab0 <__sinit>:
 800cab0:	b510      	push	{r4, lr}
 800cab2:	4604      	mov	r4, r0
 800cab4:	f7ff fff0 	bl	800ca98 <__sinit_lock_acquire>
 800cab8:	69a3      	ldr	r3, [r4, #24]
 800caba:	b11b      	cbz	r3, 800cac4 <__sinit+0x14>
 800cabc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cac0:	f7ff bff0 	b.w	800caa4 <__sinit_lock_release>
 800cac4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800cac8:	6523      	str	r3, [r4, #80]	; 0x50
 800caca:	4b13      	ldr	r3, [pc, #76]	; (800cb18 <__sinit+0x68>)
 800cacc:	4a13      	ldr	r2, [pc, #76]	; (800cb1c <__sinit+0x6c>)
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	62a2      	str	r2, [r4, #40]	; 0x28
 800cad2:	42a3      	cmp	r3, r4
 800cad4:	bf04      	itt	eq
 800cad6:	2301      	moveq	r3, #1
 800cad8:	61a3      	streq	r3, [r4, #24]
 800cada:	4620      	mov	r0, r4
 800cadc:	f000 f820 	bl	800cb20 <__sfp>
 800cae0:	6060      	str	r0, [r4, #4]
 800cae2:	4620      	mov	r0, r4
 800cae4:	f000 f81c 	bl	800cb20 <__sfp>
 800cae8:	60a0      	str	r0, [r4, #8]
 800caea:	4620      	mov	r0, r4
 800caec:	f000 f818 	bl	800cb20 <__sfp>
 800caf0:	2200      	movs	r2, #0
 800caf2:	60e0      	str	r0, [r4, #12]
 800caf4:	2104      	movs	r1, #4
 800caf6:	6860      	ldr	r0, [r4, #4]
 800caf8:	f7ff ff82 	bl	800ca00 <std>
 800cafc:	68a0      	ldr	r0, [r4, #8]
 800cafe:	2201      	movs	r2, #1
 800cb00:	2109      	movs	r1, #9
 800cb02:	f7ff ff7d 	bl	800ca00 <std>
 800cb06:	68e0      	ldr	r0, [r4, #12]
 800cb08:	2202      	movs	r2, #2
 800cb0a:	2112      	movs	r1, #18
 800cb0c:	f7ff ff78 	bl	800ca00 <std>
 800cb10:	2301      	movs	r3, #1
 800cb12:	61a3      	str	r3, [r4, #24]
 800cb14:	e7d2      	b.n	800cabc <__sinit+0xc>
 800cb16:	bf00      	nop
 800cb18:	0800da20 	.word	0x0800da20
 800cb1c:	0800ca49 	.word	0x0800ca49

0800cb20 <__sfp>:
 800cb20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb22:	4607      	mov	r7, r0
 800cb24:	f7ff ffac 	bl	800ca80 <__sfp_lock_acquire>
 800cb28:	4b1e      	ldr	r3, [pc, #120]	; (800cba4 <__sfp+0x84>)
 800cb2a:	681e      	ldr	r6, [r3, #0]
 800cb2c:	69b3      	ldr	r3, [r6, #24]
 800cb2e:	b913      	cbnz	r3, 800cb36 <__sfp+0x16>
 800cb30:	4630      	mov	r0, r6
 800cb32:	f7ff ffbd 	bl	800cab0 <__sinit>
 800cb36:	3648      	adds	r6, #72	; 0x48
 800cb38:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800cb3c:	3b01      	subs	r3, #1
 800cb3e:	d503      	bpl.n	800cb48 <__sfp+0x28>
 800cb40:	6833      	ldr	r3, [r6, #0]
 800cb42:	b30b      	cbz	r3, 800cb88 <__sfp+0x68>
 800cb44:	6836      	ldr	r6, [r6, #0]
 800cb46:	e7f7      	b.n	800cb38 <__sfp+0x18>
 800cb48:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800cb4c:	b9d5      	cbnz	r5, 800cb84 <__sfp+0x64>
 800cb4e:	4b16      	ldr	r3, [pc, #88]	; (800cba8 <__sfp+0x88>)
 800cb50:	60e3      	str	r3, [r4, #12]
 800cb52:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800cb56:	6665      	str	r5, [r4, #100]	; 0x64
 800cb58:	f000 f847 	bl	800cbea <__retarget_lock_init_recursive>
 800cb5c:	f7ff ff96 	bl	800ca8c <__sfp_lock_release>
 800cb60:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800cb64:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800cb68:	6025      	str	r5, [r4, #0]
 800cb6a:	61a5      	str	r5, [r4, #24]
 800cb6c:	2208      	movs	r2, #8
 800cb6e:	4629      	mov	r1, r5
 800cb70:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800cb74:	f7ff fd16 	bl	800c5a4 <memset>
 800cb78:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800cb7c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800cb80:	4620      	mov	r0, r4
 800cb82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cb84:	3468      	adds	r4, #104	; 0x68
 800cb86:	e7d9      	b.n	800cb3c <__sfp+0x1c>
 800cb88:	2104      	movs	r1, #4
 800cb8a:	4638      	mov	r0, r7
 800cb8c:	f7ff ff62 	bl	800ca54 <__sfmoreglue>
 800cb90:	4604      	mov	r4, r0
 800cb92:	6030      	str	r0, [r6, #0]
 800cb94:	2800      	cmp	r0, #0
 800cb96:	d1d5      	bne.n	800cb44 <__sfp+0x24>
 800cb98:	f7ff ff78 	bl	800ca8c <__sfp_lock_release>
 800cb9c:	230c      	movs	r3, #12
 800cb9e:	603b      	str	r3, [r7, #0]
 800cba0:	e7ee      	b.n	800cb80 <__sfp+0x60>
 800cba2:	bf00      	nop
 800cba4:	0800da20 	.word	0x0800da20
 800cba8:	ffff0001 	.word	0xffff0001

0800cbac <_fwalk_reent>:
 800cbac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cbb0:	4606      	mov	r6, r0
 800cbb2:	4688      	mov	r8, r1
 800cbb4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800cbb8:	2700      	movs	r7, #0
 800cbba:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cbbe:	f1b9 0901 	subs.w	r9, r9, #1
 800cbc2:	d505      	bpl.n	800cbd0 <_fwalk_reent+0x24>
 800cbc4:	6824      	ldr	r4, [r4, #0]
 800cbc6:	2c00      	cmp	r4, #0
 800cbc8:	d1f7      	bne.n	800cbba <_fwalk_reent+0xe>
 800cbca:	4638      	mov	r0, r7
 800cbcc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cbd0:	89ab      	ldrh	r3, [r5, #12]
 800cbd2:	2b01      	cmp	r3, #1
 800cbd4:	d907      	bls.n	800cbe6 <_fwalk_reent+0x3a>
 800cbd6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cbda:	3301      	adds	r3, #1
 800cbdc:	d003      	beq.n	800cbe6 <_fwalk_reent+0x3a>
 800cbde:	4629      	mov	r1, r5
 800cbe0:	4630      	mov	r0, r6
 800cbe2:	47c0      	blx	r8
 800cbe4:	4307      	orrs	r7, r0
 800cbe6:	3568      	adds	r5, #104	; 0x68
 800cbe8:	e7e9      	b.n	800cbbe <_fwalk_reent+0x12>

0800cbea <__retarget_lock_init_recursive>:
 800cbea:	4770      	bx	lr

0800cbec <__retarget_lock_acquire_recursive>:
 800cbec:	4770      	bx	lr

0800cbee <__retarget_lock_release_recursive>:
 800cbee:	4770      	bx	lr

0800cbf0 <__swhatbuf_r>:
 800cbf0:	b570      	push	{r4, r5, r6, lr}
 800cbf2:	460e      	mov	r6, r1
 800cbf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cbf8:	2900      	cmp	r1, #0
 800cbfa:	b096      	sub	sp, #88	; 0x58
 800cbfc:	4614      	mov	r4, r2
 800cbfe:	461d      	mov	r5, r3
 800cc00:	da08      	bge.n	800cc14 <__swhatbuf_r+0x24>
 800cc02:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800cc06:	2200      	movs	r2, #0
 800cc08:	602a      	str	r2, [r5, #0]
 800cc0a:	061a      	lsls	r2, r3, #24
 800cc0c:	d410      	bmi.n	800cc30 <__swhatbuf_r+0x40>
 800cc0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cc12:	e00e      	b.n	800cc32 <__swhatbuf_r+0x42>
 800cc14:	466a      	mov	r2, sp
 800cc16:	f000 fcdd 	bl	800d5d4 <_fstat_r>
 800cc1a:	2800      	cmp	r0, #0
 800cc1c:	dbf1      	blt.n	800cc02 <__swhatbuf_r+0x12>
 800cc1e:	9a01      	ldr	r2, [sp, #4]
 800cc20:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800cc24:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800cc28:	425a      	negs	r2, r3
 800cc2a:	415a      	adcs	r2, r3
 800cc2c:	602a      	str	r2, [r5, #0]
 800cc2e:	e7ee      	b.n	800cc0e <__swhatbuf_r+0x1e>
 800cc30:	2340      	movs	r3, #64	; 0x40
 800cc32:	2000      	movs	r0, #0
 800cc34:	6023      	str	r3, [r4, #0]
 800cc36:	b016      	add	sp, #88	; 0x58
 800cc38:	bd70      	pop	{r4, r5, r6, pc}
	...

0800cc3c <__smakebuf_r>:
 800cc3c:	898b      	ldrh	r3, [r1, #12]
 800cc3e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cc40:	079d      	lsls	r5, r3, #30
 800cc42:	4606      	mov	r6, r0
 800cc44:	460c      	mov	r4, r1
 800cc46:	d507      	bpl.n	800cc58 <__smakebuf_r+0x1c>
 800cc48:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cc4c:	6023      	str	r3, [r4, #0]
 800cc4e:	6123      	str	r3, [r4, #16]
 800cc50:	2301      	movs	r3, #1
 800cc52:	6163      	str	r3, [r4, #20]
 800cc54:	b002      	add	sp, #8
 800cc56:	bd70      	pop	{r4, r5, r6, pc}
 800cc58:	ab01      	add	r3, sp, #4
 800cc5a:	466a      	mov	r2, sp
 800cc5c:	f7ff ffc8 	bl	800cbf0 <__swhatbuf_r>
 800cc60:	9900      	ldr	r1, [sp, #0]
 800cc62:	4605      	mov	r5, r0
 800cc64:	4630      	mov	r0, r6
 800cc66:	f000 f895 	bl	800cd94 <_malloc_r>
 800cc6a:	b948      	cbnz	r0, 800cc80 <__smakebuf_r+0x44>
 800cc6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cc70:	059a      	lsls	r2, r3, #22
 800cc72:	d4ef      	bmi.n	800cc54 <__smakebuf_r+0x18>
 800cc74:	f023 0303 	bic.w	r3, r3, #3
 800cc78:	f043 0302 	orr.w	r3, r3, #2
 800cc7c:	81a3      	strh	r3, [r4, #12]
 800cc7e:	e7e3      	b.n	800cc48 <__smakebuf_r+0xc>
 800cc80:	4b0d      	ldr	r3, [pc, #52]	; (800ccb8 <__smakebuf_r+0x7c>)
 800cc82:	62b3      	str	r3, [r6, #40]	; 0x28
 800cc84:	89a3      	ldrh	r3, [r4, #12]
 800cc86:	6020      	str	r0, [r4, #0]
 800cc88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cc8c:	81a3      	strh	r3, [r4, #12]
 800cc8e:	9b00      	ldr	r3, [sp, #0]
 800cc90:	6163      	str	r3, [r4, #20]
 800cc92:	9b01      	ldr	r3, [sp, #4]
 800cc94:	6120      	str	r0, [r4, #16]
 800cc96:	b15b      	cbz	r3, 800ccb0 <__smakebuf_r+0x74>
 800cc98:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cc9c:	4630      	mov	r0, r6
 800cc9e:	f000 fcab 	bl	800d5f8 <_isatty_r>
 800cca2:	b128      	cbz	r0, 800ccb0 <__smakebuf_r+0x74>
 800cca4:	89a3      	ldrh	r3, [r4, #12]
 800cca6:	f023 0303 	bic.w	r3, r3, #3
 800ccaa:	f043 0301 	orr.w	r3, r3, #1
 800ccae:	81a3      	strh	r3, [r4, #12]
 800ccb0:	89a0      	ldrh	r0, [r4, #12]
 800ccb2:	4305      	orrs	r5, r0
 800ccb4:	81a5      	strh	r5, [r4, #12]
 800ccb6:	e7cd      	b.n	800cc54 <__smakebuf_r+0x18>
 800ccb8:	0800ca49 	.word	0x0800ca49

0800ccbc <_free_r>:
 800ccbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ccbe:	2900      	cmp	r1, #0
 800ccc0:	d044      	beq.n	800cd4c <_free_r+0x90>
 800ccc2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ccc6:	9001      	str	r0, [sp, #4]
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	f1a1 0404 	sub.w	r4, r1, #4
 800ccce:	bfb8      	it	lt
 800ccd0:	18e4      	addlt	r4, r4, r3
 800ccd2:	f000 fcb3 	bl	800d63c <__malloc_lock>
 800ccd6:	4a1e      	ldr	r2, [pc, #120]	; (800cd50 <_free_r+0x94>)
 800ccd8:	9801      	ldr	r0, [sp, #4]
 800ccda:	6813      	ldr	r3, [r2, #0]
 800ccdc:	b933      	cbnz	r3, 800ccec <_free_r+0x30>
 800ccde:	6063      	str	r3, [r4, #4]
 800cce0:	6014      	str	r4, [r2, #0]
 800cce2:	b003      	add	sp, #12
 800cce4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cce8:	f000 bcae 	b.w	800d648 <__malloc_unlock>
 800ccec:	42a3      	cmp	r3, r4
 800ccee:	d908      	bls.n	800cd02 <_free_r+0x46>
 800ccf0:	6825      	ldr	r5, [r4, #0]
 800ccf2:	1961      	adds	r1, r4, r5
 800ccf4:	428b      	cmp	r3, r1
 800ccf6:	bf01      	itttt	eq
 800ccf8:	6819      	ldreq	r1, [r3, #0]
 800ccfa:	685b      	ldreq	r3, [r3, #4]
 800ccfc:	1949      	addeq	r1, r1, r5
 800ccfe:	6021      	streq	r1, [r4, #0]
 800cd00:	e7ed      	b.n	800ccde <_free_r+0x22>
 800cd02:	461a      	mov	r2, r3
 800cd04:	685b      	ldr	r3, [r3, #4]
 800cd06:	b10b      	cbz	r3, 800cd0c <_free_r+0x50>
 800cd08:	42a3      	cmp	r3, r4
 800cd0a:	d9fa      	bls.n	800cd02 <_free_r+0x46>
 800cd0c:	6811      	ldr	r1, [r2, #0]
 800cd0e:	1855      	adds	r5, r2, r1
 800cd10:	42a5      	cmp	r5, r4
 800cd12:	d10b      	bne.n	800cd2c <_free_r+0x70>
 800cd14:	6824      	ldr	r4, [r4, #0]
 800cd16:	4421      	add	r1, r4
 800cd18:	1854      	adds	r4, r2, r1
 800cd1a:	42a3      	cmp	r3, r4
 800cd1c:	6011      	str	r1, [r2, #0]
 800cd1e:	d1e0      	bne.n	800cce2 <_free_r+0x26>
 800cd20:	681c      	ldr	r4, [r3, #0]
 800cd22:	685b      	ldr	r3, [r3, #4]
 800cd24:	6053      	str	r3, [r2, #4]
 800cd26:	4421      	add	r1, r4
 800cd28:	6011      	str	r1, [r2, #0]
 800cd2a:	e7da      	b.n	800cce2 <_free_r+0x26>
 800cd2c:	d902      	bls.n	800cd34 <_free_r+0x78>
 800cd2e:	230c      	movs	r3, #12
 800cd30:	6003      	str	r3, [r0, #0]
 800cd32:	e7d6      	b.n	800cce2 <_free_r+0x26>
 800cd34:	6825      	ldr	r5, [r4, #0]
 800cd36:	1961      	adds	r1, r4, r5
 800cd38:	428b      	cmp	r3, r1
 800cd3a:	bf04      	itt	eq
 800cd3c:	6819      	ldreq	r1, [r3, #0]
 800cd3e:	685b      	ldreq	r3, [r3, #4]
 800cd40:	6063      	str	r3, [r4, #4]
 800cd42:	bf04      	itt	eq
 800cd44:	1949      	addeq	r1, r1, r5
 800cd46:	6021      	streq	r1, [r4, #0]
 800cd48:	6054      	str	r4, [r2, #4]
 800cd4a:	e7ca      	b.n	800cce2 <_free_r+0x26>
 800cd4c:	b003      	add	sp, #12
 800cd4e:	bd30      	pop	{r4, r5, pc}
 800cd50:	20001284 	.word	0x20001284

0800cd54 <sbrk_aligned>:
 800cd54:	b570      	push	{r4, r5, r6, lr}
 800cd56:	4e0e      	ldr	r6, [pc, #56]	; (800cd90 <sbrk_aligned+0x3c>)
 800cd58:	460c      	mov	r4, r1
 800cd5a:	6831      	ldr	r1, [r6, #0]
 800cd5c:	4605      	mov	r5, r0
 800cd5e:	b911      	cbnz	r1, 800cd66 <sbrk_aligned+0x12>
 800cd60:	f000 fbc2 	bl	800d4e8 <_sbrk_r>
 800cd64:	6030      	str	r0, [r6, #0]
 800cd66:	4621      	mov	r1, r4
 800cd68:	4628      	mov	r0, r5
 800cd6a:	f000 fbbd 	bl	800d4e8 <_sbrk_r>
 800cd6e:	1c43      	adds	r3, r0, #1
 800cd70:	d00a      	beq.n	800cd88 <sbrk_aligned+0x34>
 800cd72:	1cc4      	adds	r4, r0, #3
 800cd74:	f024 0403 	bic.w	r4, r4, #3
 800cd78:	42a0      	cmp	r0, r4
 800cd7a:	d007      	beq.n	800cd8c <sbrk_aligned+0x38>
 800cd7c:	1a21      	subs	r1, r4, r0
 800cd7e:	4628      	mov	r0, r5
 800cd80:	f000 fbb2 	bl	800d4e8 <_sbrk_r>
 800cd84:	3001      	adds	r0, #1
 800cd86:	d101      	bne.n	800cd8c <sbrk_aligned+0x38>
 800cd88:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800cd8c:	4620      	mov	r0, r4
 800cd8e:	bd70      	pop	{r4, r5, r6, pc}
 800cd90:	20001288 	.word	0x20001288

0800cd94 <_malloc_r>:
 800cd94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd98:	1ccd      	adds	r5, r1, #3
 800cd9a:	f025 0503 	bic.w	r5, r5, #3
 800cd9e:	3508      	adds	r5, #8
 800cda0:	2d0c      	cmp	r5, #12
 800cda2:	bf38      	it	cc
 800cda4:	250c      	movcc	r5, #12
 800cda6:	2d00      	cmp	r5, #0
 800cda8:	4607      	mov	r7, r0
 800cdaa:	db01      	blt.n	800cdb0 <_malloc_r+0x1c>
 800cdac:	42a9      	cmp	r1, r5
 800cdae:	d905      	bls.n	800cdbc <_malloc_r+0x28>
 800cdb0:	230c      	movs	r3, #12
 800cdb2:	603b      	str	r3, [r7, #0]
 800cdb4:	2600      	movs	r6, #0
 800cdb6:	4630      	mov	r0, r6
 800cdb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cdbc:	4e2e      	ldr	r6, [pc, #184]	; (800ce78 <_malloc_r+0xe4>)
 800cdbe:	f000 fc3d 	bl	800d63c <__malloc_lock>
 800cdc2:	6833      	ldr	r3, [r6, #0]
 800cdc4:	461c      	mov	r4, r3
 800cdc6:	bb34      	cbnz	r4, 800ce16 <_malloc_r+0x82>
 800cdc8:	4629      	mov	r1, r5
 800cdca:	4638      	mov	r0, r7
 800cdcc:	f7ff ffc2 	bl	800cd54 <sbrk_aligned>
 800cdd0:	1c43      	adds	r3, r0, #1
 800cdd2:	4604      	mov	r4, r0
 800cdd4:	d14d      	bne.n	800ce72 <_malloc_r+0xde>
 800cdd6:	6834      	ldr	r4, [r6, #0]
 800cdd8:	4626      	mov	r6, r4
 800cdda:	2e00      	cmp	r6, #0
 800cddc:	d140      	bne.n	800ce60 <_malloc_r+0xcc>
 800cdde:	6823      	ldr	r3, [r4, #0]
 800cde0:	4631      	mov	r1, r6
 800cde2:	4638      	mov	r0, r7
 800cde4:	eb04 0803 	add.w	r8, r4, r3
 800cde8:	f000 fb7e 	bl	800d4e8 <_sbrk_r>
 800cdec:	4580      	cmp	r8, r0
 800cdee:	d13a      	bne.n	800ce66 <_malloc_r+0xd2>
 800cdf0:	6821      	ldr	r1, [r4, #0]
 800cdf2:	3503      	adds	r5, #3
 800cdf4:	1a6d      	subs	r5, r5, r1
 800cdf6:	f025 0503 	bic.w	r5, r5, #3
 800cdfa:	3508      	adds	r5, #8
 800cdfc:	2d0c      	cmp	r5, #12
 800cdfe:	bf38      	it	cc
 800ce00:	250c      	movcc	r5, #12
 800ce02:	4629      	mov	r1, r5
 800ce04:	4638      	mov	r0, r7
 800ce06:	f7ff ffa5 	bl	800cd54 <sbrk_aligned>
 800ce0a:	3001      	adds	r0, #1
 800ce0c:	d02b      	beq.n	800ce66 <_malloc_r+0xd2>
 800ce0e:	6823      	ldr	r3, [r4, #0]
 800ce10:	442b      	add	r3, r5
 800ce12:	6023      	str	r3, [r4, #0]
 800ce14:	e00e      	b.n	800ce34 <_malloc_r+0xa0>
 800ce16:	6822      	ldr	r2, [r4, #0]
 800ce18:	1b52      	subs	r2, r2, r5
 800ce1a:	d41e      	bmi.n	800ce5a <_malloc_r+0xc6>
 800ce1c:	2a0b      	cmp	r2, #11
 800ce1e:	d916      	bls.n	800ce4e <_malloc_r+0xba>
 800ce20:	1961      	adds	r1, r4, r5
 800ce22:	42a3      	cmp	r3, r4
 800ce24:	6025      	str	r5, [r4, #0]
 800ce26:	bf18      	it	ne
 800ce28:	6059      	strne	r1, [r3, #4]
 800ce2a:	6863      	ldr	r3, [r4, #4]
 800ce2c:	bf08      	it	eq
 800ce2e:	6031      	streq	r1, [r6, #0]
 800ce30:	5162      	str	r2, [r4, r5]
 800ce32:	604b      	str	r3, [r1, #4]
 800ce34:	4638      	mov	r0, r7
 800ce36:	f104 060b 	add.w	r6, r4, #11
 800ce3a:	f000 fc05 	bl	800d648 <__malloc_unlock>
 800ce3e:	f026 0607 	bic.w	r6, r6, #7
 800ce42:	1d23      	adds	r3, r4, #4
 800ce44:	1af2      	subs	r2, r6, r3
 800ce46:	d0b6      	beq.n	800cdb6 <_malloc_r+0x22>
 800ce48:	1b9b      	subs	r3, r3, r6
 800ce4a:	50a3      	str	r3, [r4, r2]
 800ce4c:	e7b3      	b.n	800cdb6 <_malloc_r+0x22>
 800ce4e:	6862      	ldr	r2, [r4, #4]
 800ce50:	42a3      	cmp	r3, r4
 800ce52:	bf0c      	ite	eq
 800ce54:	6032      	streq	r2, [r6, #0]
 800ce56:	605a      	strne	r2, [r3, #4]
 800ce58:	e7ec      	b.n	800ce34 <_malloc_r+0xa0>
 800ce5a:	4623      	mov	r3, r4
 800ce5c:	6864      	ldr	r4, [r4, #4]
 800ce5e:	e7b2      	b.n	800cdc6 <_malloc_r+0x32>
 800ce60:	4634      	mov	r4, r6
 800ce62:	6876      	ldr	r6, [r6, #4]
 800ce64:	e7b9      	b.n	800cdda <_malloc_r+0x46>
 800ce66:	230c      	movs	r3, #12
 800ce68:	603b      	str	r3, [r7, #0]
 800ce6a:	4638      	mov	r0, r7
 800ce6c:	f000 fbec 	bl	800d648 <__malloc_unlock>
 800ce70:	e7a1      	b.n	800cdb6 <_malloc_r+0x22>
 800ce72:	6025      	str	r5, [r4, #0]
 800ce74:	e7de      	b.n	800ce34 <_malloc_r+0xa0>
 800ce76:	bf00      	nop
 800ce78:	20001284 	.word	0x20001284

0800ce7c <__sfputc_r>:
 800ce7c:	6893      	ldr	r3, [r2, #8]
 800ce7e:	3b01      	subs	r3, #1
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	b410      	push	{r4}
 800ce84:	6093      	str	r3, [r2, #8]
 800ce86:	da08      	bge.n	800ce9a <__sfputc_r+0x1e>
 800ce88:	6994      	ldr	r4, [r2, #24]
 800ce8a:	42a3      	cmp	r3, r4
 800ce8c:	db01      	blt.n	800ce92 <__sfputc_r+0x16>
 800ce8e:	290a      	cmp	r1, #10
 800ce90:	d103      	bne.n	800ce9a <__sfputc_r+0x1e>
 800ce92:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ce96:	f7ff bc31 	b.w	800c6fc <__swbuf_r>
 800ce9a:	6813      	ldr	r3, [r2, #0]
 800ce9c:	1c58      	adds	r0, r3, #1
 800ce9e:	6010      	str	r0, [r2, #0]
 800cea0:	7019      	strb	r1, [r3, #0]
 800cea2:	4608      	mov	r0, r1
 800cea4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cea8:	4770      	bx	lr

0800ceaa <__sfputs_r>:
 800ceaa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ceac:	4606      	mov	r6, r0
 800ceae:	460f      	mov	r7, r1
 800ceb0:	4614      	mov	r4, r2
 800ceb2:	18d5      	adds	r5, r2, r3
 800ceb4:	42ac      	cmp	r4, r5
 800ceb6:	d101      	bne.n	800cebc <__sfputs_r+0x12>
 800ceb8:	2000      	movs	r0, #0
 800ceba:	e007      	b.n	800cecc <__sfputs_r+0x22>
 800cebc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cec0:	463a      	mov	r2, r7
 800cec2:	4630      	mov	r0, r6
 800cec4:	f7ff ffda 	bl	800ce7c <__sfputc_r>
 800cec8:	1c43      	adds	r3, r0, #1
 800ceca:	d1f3      	bne.n	800ceb4 <__sfputs_r+0xa>
 800cecc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ced0 <_vfiprintf_r>:
 800ced0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ced4:	460d      	mov	r5, r1
 800ced6:	b09d      	sub	sp, #116	; 0x74
 800ced8:	4614      	mov	r4, r2
 800ceda:	4698      	mov	r8, r3
 800cedc:	4606      	mov	r6, r0
 800cede:	b118      	cbz	r0, 800cee8 <_vfiprintf_r+0x18>
 800cee0:	6983      	ldr	r3, [r0, #24]
 800cee2:	b90b      	cbnz	r3, 800cee8 <_vfiprintf_r+0x18>
 800cee4:	f7ff fde4 	bl	800cab0 <__sinit>
 800cee8:	4b89      	ldr	r3, [pc, #548]	; (800d110 <_vfiprintf_r+0x240>)
 800ceea:	429d      	cmp	r5, r3
 800ceec:	d11b      	bne.n	800cf26 <_vfiprintf_r+0x56>
 800ceee:	6875      	ldr	r5, [r6, #4]
 800cef0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cef2:	07d9      	lsls	r1, r3, #31
 800cef4:	d405      	bmi.n	800cf02 <_vfiprintf_r+0x32>
 800cef6:	89ab      	ldrh	r3, [r5, #12]
 800cef8:	059a      	lsls	r2, r3, #22
 800cefa:	d402      	bmi.n	800cf02 <_vfiprintf_r+0x32>
 800cefc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cefe:	f7ff fe75 	bl	800cbec <__retarget_lock_acquire_recursive>
 800cf02:	89ab      	ldrh	r3, [r5, #12]
 800cf04:	071b      	lsls	r3, r3, #28
 800cf06:	d501      	bpl.n	800cf0c <_vfiprintf_r+0x3c>
 800cf08:	692b      	ldr	r3, [r5, #16]
 800cf0a:	b9eb      	cbnz	r3, 800cf48 <_vfiprintf_r+0x78>
 800cf0c:	4629      	mov	r1, r5
 800cf0e:	4630      	mov	r0, r6
 800cf10:	f7ff fc46 	bl	800c7a0 <__swsetup_r>
 800cf14:	b1c0      	cbz	r0, 800cf48 <_vfiprintf_r+0x78>
 800cf16:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cf18:	07dc      	lsls	r4, r3, #31
 800cf1a:	d50e      	bpl.n	800cf3a <_vfiprintf_r+0x6a>
 800cf1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cf20:	b01d      	add	sp, #116	; 0x74
 800cf22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf26:	4b7b      	ldr	r3, [pc, #492]	; (800d114 <_vfiprintf_r+0x244>)
 800cf28:	429d      	cmp	r5, r3
 800cf2a:	d101      	bne.n	800cf30 <_vfiprintf_r+0x60>
 800cf2c:	68b5      	ldr	r5, [r6, #8]
 800cf2e:	e7df      	b.n	800cef0 <_vfiprintf_r+0x20>
 800cf30:	4b79      	ldr	r3, [pc, #484]	; (800d118 <_vfiprintf_r+0x248>)
 800cf32:	429d      	cmp	r5, r3
 800cf34:	bf08      	it	eq
 800cf36:	68f5      	ldreq	r5, [r6, #12]
 800cf38:	e7da      	b.n	800cef0 <_vfiprintf_r+0x20>
 800cf3a:	89ab      	ldrh	r3, [r5, #12]
 800cf3c:	0598      	lsls	r0, r3, #22
 800cf3e:	d4ed      	bmi.n	800cf1c <_vfiprintf_r+0x4c>
 800cf40:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cf42:	f7ff fe54 	bl	800cbee <__retarget_lock_release_recursive>
 800cf46:	e7e9      	b.n	800cf1c <_vfiprintf_r+0x4c>
 800cf48:	2300      	movs	r3, #0
 800cf4a:	9309      	str	r3, [sp, #36]	; 0x24
 800cf4c:	2320      	movs	r3, #32
 800cf4e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cf52:	f8cd 800c 	str.w	r8, [sp, #12]
 800cf56:	2330      	movs	r3, #48	; 0x30
 800cf58:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d11c <_vfiprintf_r+0x24c>
 800cf5c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cf60:	f04f 0901 	mov.w	r9, #1
 800cf64:	4623      	mov	r3, r4
 800cf66:	469a      	mov	sl, r3
 800cf68:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cf6c:	b10a      	cbz	r2, 800cf72 <_vfiprintf_r+0xa2>
 800cf6e:	2a25      	cmp	r2, #37	; 0x25
 800cf70:	d1f9      	bne.n	800cf66 <_vfiprintf_r+0x96>
 800cf72:	ebba 0b04 	subs.w	fp, sl, r4
 800cf76:	d00b      	beq.n	800cf90 <_vfiprintf_r+0xc0>
 800cf78:	465b      	mov	r3, fp
 800cf7a:	4622      	mov	r2, r4
 800cf7c:	4629      	mov	r1, r5
 800cf7e:	4630      	mov	r0, r6
 800cf80:	f7ff ff93 	bl	800ceaa <__sfputs_r>
 800cf84:	3001      	adds	r0, #1
 800cf86:	f000 80aa 	beq.w	800d0de <_vfiprintf_r+0x20e>
 800cf8a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cf8c:	445a      	add	r2, fp
 800cf8e:	9209      	str	r2, [sp, #36]	; 0x24
 800cf90:	f89a 3000 	ldrb.w	r3, [sl]
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	f000 80a2 	beq.w	800d0de <_vfiprintf_r+0x20e>
 800cf9a:	2300      	movs	r3, #0
 800cf9c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cfa0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cfa4:	f10a 0a01 	add.w	sl, sl, #1
 800cfa8:	9304      	str	r3, [sp, #16]
 800cfaa:	9307      	str	r3, [sp, #28]
 800cfac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cfb0:	931a      	str	r3, [sp, #104]	; 0x68
 800cfb2:	4654      	mov	r4, sl
 800cfb4:	2205      	movs	r2, #5
 800cfb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cfba:	4858      	ldr	r0, [pc, #352]	; (800d11c <_vfiprintf_r+0x24c>)
 800cfbc:	f7f3 f8e8 	bl	8000190 <memchr>
 800cfc0:	9a04      	ldr	r2, [sp, #16]
 800cfc2:	b9d8      	cbnz	r0, 800cffc <_vfiprintf_r+0x12c>
 800cfc4:	06d1      	lsls	r1, r2, #27
 800cfc6:	bf44      	itt	mi
 800cfc8:	2320      	movmi	r3, #32
 800cfca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cfce:	0713      	lsls	r3, r2, #28
 800cfd0:	bf44      	itt	mi
 800cfd2:	232b      	movmi	r3, #43	; 0x2b
 800cfd4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cfd8:	f89a 3000 	ldrb.w	r3, [sl]
 800cfdc:	2b2a      	cmp	r3, #42	; 0x2a
 800cfde:	d015      	beq.n	800d00c <_vfiprintf_r+0x13c>
 800cfe0:	9a07      	ldr	r2, [sp, #28]
 800cfe2:	4654      	mov	r4, sl
 800cfe4:	2000      	movs	r0, #0
 800cfe6:	f04f 0c0a 	mov.w	ip, #10
 800cfea:	4621      	mov	r1, r4
 800cfec:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cff0:	3b30      	subs	r3, #48	; 0x30
 800cff2:	2b09      	cmp	r3, #9
 800cff4:	d94e      	bls.n	800d094 <_vfiprintf_r+0x1c4>
 800cff6:	b1b0      	cbz	r0, 800d026 <_vfiprintf_r+0x156>
 800cff8:	9207      	str	r2, [sp, #28]
 800cffa:	e014      	b.n	800d026 <_vfiprintf_r+0x156>
 800cffc:	eba0 0308 	sub.w	r3, r0, r8
 800d000:	fa09 f303 	lsl.w	r3, r9, r3
 800d004:	4313      	orrs	r3, r2
 800d006:	9304      	str	r3, [sp, #16]
 800d008:	46a2      	mov	sl, r4
 800d00a:	e7d2      	b.n	800cfb2 <_vfiprintf_r+0xe2>
 800d00c:	9b03      	ldr	r3, [sp, #12]
 800d00e:	1d19      	adds	r1, r3, #4
 800d010:	681b      	ldr	r3, [r3, #0]
 800d012:	9103      	str	r1, [sp, #12]
 800d014:	2b00      	cmp	r3, #0
 800d016:	bfbb      	ittet	lt
 800d018:	425b      	neglt	r3, r3
 800d01a:	f042 0202 	orrlt.w	r2, r2, #2
 800d01e:	9307      	strge	r3, [sp, #28]
 800d020:	9307      	strlt	r3, [sp, #28]
 800d022:	bfb8      	it	lt
 800d024:	9204      	strlt	r2, [sp, #16]
 800d026:	7823      	ldrb	r3, [r4, #0]
 800d028:	2b2e      	cmp	r3, #46	; 0x2e
 800d02a:	d10c      	bne.n	800d046 <_vfiprintf_r+0x176>
 800d02c:	7863      	ldrb	r3, [r4, #1]
 800d02e:	2b2a      	cmp	r3, #42	; 0x2a
 800d030:	d135      	bne.n	800d09e <_vfiprintf_r+0x1ce>
 800d032:	9b03      	ldr	r3, [sp, #12]
 800d034:	1d1a      	adds	r2, r3, #4
 800d036:	681b      	ldr	r3, [r3, #0]
 800d038:	9203      	str	r2, [sp, #12]
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	bfb8      	it	lt
 800d03e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800d042:	3402      	adds	r4, #2
 800d044:	9305      	str	r3, [sp, #20]
 800d046:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d12c <_vfiprintf_r+0x25c>
 800d04a:	7821      	ldrb	r1, [r4, #0]
 800d04c:	2203      	movs	r2, #3
 800d04e:	4650      	mov	r0, sl
 800d050:	f7f3 f89e 	bl	8000190 <memchr>
 800d054:	b140      	cbz	r0, 800d068 <_vfiprintf_r+0x198>
 800d056:	2340      	movs	r3, #64	; 0x40
 800d058:	eba0 000a 	sub.w	r0, r0, sl
 800d05c:	fa03 f000 	lsl.w	r0, r3, r0
 800d060:	9b04      	ldr	r3, [sp, #16]
 800d062:	4303      	orrs	r3, r0
 800d064:	3401      	adds	r4, #1
 800d066:	9304      	str	r3, [sp, #16]
 800d068:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d06c:	482c      	ldr	r0, [pc, #176]	; (800d120 <_vfiprintf_r+0x250>)
 800d06e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d072:	2206      	movs	r2, #6
 800d074:	f7f3 f88c 	bl	8000190 <memchr>
 800d078:	2800      	cmp	r0, #0
 800d07a:	d03f      	beq.n	800d0fc <_vfiprintf_r+0x22c>
 800d07c:	4b29      	ldr	r3, [pc, #164]	; (800d124 <_vfiprintf_r+0x254>)
 800d07e:	bb1b      	cbnz	r3, 800d0c8 <_vfiprintf_r+0x1f8>
 800d080:	9b03      	ldr	r3, [sp, #12]
 800d082:	3307      	adds	r3, #7
 800d084:	f023 0307 	bic.w	r3, r3, #7
 800d088:	3308      	adds	r3, #8
 800d08a:	9303      	str	r3, [sp, #12]
 800d08c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d08e:	443b      	add	r3, r7
 800d090:	9309      	str	r3, [sp, #36]	; 0x24
 800d092:	e767      	b.n	800cf64 <_vfiprintf_r+0x94>
 800d094:	fb0c 3202 	mla	r2, ip, r2, r3
 800d098:	460c      	mov	r4, r1
 800d09a:	2001      	movs	r0, #1
 800d09c:	e7a5      	b.n	800cfea <_vfiprintf_r+0x11a>
 800d09e:	2300      	movs	r3, #0
 800d0a0:	3401      	adds	r4, #1
 800d0a2:	9305      	str	r3, [sp, #20]
 800d0a4:	4619      	mov	r1, r3
 800d0a6:	f04f 0c0a 	mov.w	ip, #10
 800d0aa:	4620      	mov	r0, r4
 800d0ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d0b0:	3a30      	subs	r2, #48	; 0x30
 800d0b2:	2a09      	cmp	r2, #9
 800d0b4:	d903      	bls.n	800d0be <_vfiprintf_r+0x1ee>
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d0c5      	beq.n	800d046 <_vfiprintf_r+0x176>
 800d0ba:	9105      	str	r1, [sp, #20]
 800d0bc:	e7c3      	b.n	800d046 <_vfiprintf_r+0x176>
 800d0be:	fb0c 2101 	mla	r1, ip, r1, r2
 800d0c2:	4604      	mov	r4, r0
 800d0c4:	2301      	movs	r3, #1
 800d0c6:	e7f0      	b.n	800d0aa <_vfiprintf_r+0x1da>
 800d0c8:	ab03      	add	r3, sp, #12
 800d0ca:	9300      	str	r3, [sp, #0]
 800d0cc:	462a      	mov	r2, r5
 800d0ce:	4b16      	ldr	r3, [pc, #88]	; (800d128 <_vfiprintf_r+0x258>)
 800d0d0:	a904      	add	r1, sp, #16
 800d0d2:	4630      	mov	r0, r6
 800d0d4:	f3af 8000 	nop.w
 800d0d8:	4607      	mov	r7, r0
 800d0da:	1c78      	adds	r0, r7, #1
 800d0dc:	d1d6      	bne.n	800d08c <_vfiprintf_r+0x1bc>
 800d0de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d0e0:	07d9      	lsls	r1, r3, #31
 800d0e2:	d405      	bmi.n	800d0f0 <_vfiprintf_r+0x220>
 800d0e4:	89ab      	ldrh	r3, [r5, #12]
 800d0e6:	059a      	lsls	r2, r3, #22
 800d0e8:	d402      	bmi.n	800d0f0 <_vfiprintf_r+0x220>
 800d0ea:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d0ec:	f7ff fd7f 	bl	800cbee <__retarget_lock_release_recursive>
 800d0f0:	89ab      	ldrh	r3, [r5, #12]
 800d0f2:	065b      	lsls	r3, r3, #25
 800d0f4:	f53f af12 	bmi.w	800cf1c <_vfiprintf_r+0x4c>
 800d0f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d0fa:	e711      	b.n	800cf20 <_vfiprintf_r+0x50>
 800d0fc:	ab03      	add	r3, sp, #12
 800d0fe:	9300      	str	r3, [sp, #0]
 800d100:	462a      	mov	r2, r5
 800d102:	4b09      	ldr	r3, [pc, #36]	; (800d128 <_vfiprintf_r+0x258>)
 800d104:	a904      	add	r1, sp, #16
 800d106:	4630      	mov	r0, r6
 800d108:	f000 f880 	bl	800d20c <_printf_i>
 800d10c:	e7e4      	b.n	800d0d8 <_vfiprintf_r+0x208>
 800d10e:	bf00      	nop
 800d110:	0800da44 	.word	0x0800da44
 800d114:	0800da64 	.word	0x0800da64
 800d118:	0800da24 	.word	0x0800da24
 800d11c:	0800da84 	.word	0x0800da84
 800d120:	0800da8e 	.word	0x0800da8e
 800d124:	00000000 	.word	0x00000000
 800d128:	0800ceab 	.word	0x0800ceab
 800d12c:	0800da8a 	.word	0x0800da8a

0800d130 <_printf_common>:
 800d130:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d134:	4616      	mov	r6, r2
 800d136:	4699      	mov	r9, r3
 800d138:	688a      	ldr	r2, [r1, #8]
 800d13a:	690b      	ldr	r3, [r1, #16]
 800d13c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d140:	4293      	cmp	r3, r2
 800d142:	bfb8      	it	lt
 800d144:	4613      	movlt	r3, r2
 800d146:	6033      	str	r3, [r6, #0]
 800d148:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d14c:	4607      	mov	r7, r0
 800d14e:	460c      	mov	r4, r1
 800d150:	b10a      	cbz	r2, 800d156 <_printf_common+0x26>
 800d152:	3301      	adds	r3, #1
 800d154:	6033      	str	r3, [r6, #0]
 800d156:	6823      	ldr	r3, [r4, #0]
 800d158:	0699      	lsls	r1, r3, #26
 800d15a:	bf42      	ittt	mi
 800d15c:	6833      	ldrmi	r3, [r6, #0]
 800d15e:	3302      	addmi	r3, #2
 800d160:	6033      	strmi	r3, [r6, #0]
 800d162:	6825      	ldr	r5, [r4, #0]
 800d164:	f015 0506 	ands.w	r5, r5, #6
 800d168:	d106      	bne.n	800d178 <_printf_common+0x48>
 800d16a:	f104 0a19 	add.w	sl, r4, #25
 800d16e:	68e3      	ldr	r3, [r4, #12]
 800d170:	6832      	ldr	r2, [r6, #0]
 800d172:	1a9b      	subs	r3, r3, r2
 800d174:	42ab      	cmp	r3, r5
 800d176:	dc26      	bgt.n	800d1c6 <_printf_common+0x96>
 800d178:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d17c:	1e13      	subs	r3, r2, #0
 800d17e:	6822      	ldr	r2, [r4, #0]
 800d180:	bf18      	it	ne
 800d182:	2301      	movne	r3, #1
 800d184:	0692      	lsls	r2, r2, #26
 800d186:	d42b      	bmi.n	800d1e0 <_printf_common+0xb0>
 800d188:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d18c:	4649      	mov	r1, r9
 800d18e:	4638      	mov	r0, r7
 800d190:	47c0      	blx	r8
 800d192:	3001      	adds	r0, #1
 800d194:	d01e      	beq.n	800d1d4 <_printf_common+0xa4>
 800d196:	6823      	ldr	r3, [r4, #0]
 800d198:	68e5      	ldr	r5, [r4, #12]
 800d19a:	6832      	ldr	r2, [r6, #0]
 800d19c:	f003 0306 	and.w	r3, r3, #6
 800d1a0:	2b04      	cmp	r3, #4
 800d1a2:	bf08      	it	eq
 800d1a4:	1aad      	subeq	r5, r5, r2
 800d1a6:	68a3      	ldr	r3, [r4, #8]
 800d1a8:	6922      	ldr	r2, [r4, #16]
 800d1aa:	bf0c      	ite	eq
 800d1ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d1b0:	2500      	movne	r5, #0
 800d1b2:	4293      	cmp	r3, r2
 800d1b4:	bfc4      	itt	gt
 800d1b6:	1a9b      	subgt	r3, r3, r2
 800d1b8:	18ed      	addgt	r5, r5, r3
 800d1ba:	2600      	movs	r6, #0
 800d1bc:	341a      	adds	r4, #26
 800d1be:	42b5      	cmp	r5, r6
 800d1c0:	d11a      	bne.n	800d1f8 <_printf_common+0xc8>
 800d1c2:	2000      	movs	r0, #0
 800d1c4:	e008      	b.n	800d1d8 <_printf_common+0xa8>
 800d1c6:	2301      	movs	r3, #1
 800d1c8:	4652      	mov	r2, sl
 800d1ca:	4649      	mov	r1, r9
 800d1cc:	4638      	mov	r0, r7
 800d1ce:	47c0      	blx	r8
 800d1d0:	3001      	adds	r0, #1
 800d1d2:	d103      	bne.n	800d1dc <_printf_common+0xac>
 800d1d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d1d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d1dc:	3501      	adds	r5, #1
 800d1de:	e7c6      	b.n	800d16e <_printf_common+0x3e>
 800d1e0:	18e1      	adds	r1, r4, r3
 800d1e2:	1c5a      	adds	r2, r3, #1
 800d1e4:	2030      	movs	r0, #48	; 0x30
 800d1e6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d1ea:	4422      	add	r2, r4
 800d1ec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d1f0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d1f4:	3302      	adds	r3, #2
 800d1f6:	e7c7      	b.n	800d188 <_printf_common+0x58>
 800d1f8:	2301      	movs	r3, #1
 800d1fa:	4622      	mov	r2, r4
 800d1fc:	4649      	mov	r1, r9
 800d1fe:	4638      	mov	r0, r7
 800d200:	47c0      	blx	r8
 800d202:	3001      	adds	r0, #1
 800d204:	d0e6      	beq.n	800d1d4 <_printf_common+0xa4>
 800d206:	3601      	adds	r6, #1
 800d208:	e7d9      	b.n	800d1be <_printf_common+0x8e>
	...

0800d20c <_printf_i>:
 800d20c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d210:	7e0f      	ldrb	r7, [r1, #24]
 800d212:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d214:	2f78      	cmp	r7, #120	; 0x78
 800d216:	4691      	mov	r9, r2
 800d218:	4680      	mov	r8, r0
 800d21a:	460c      	mov	r4, r1
 800d21c:	469a      	mov	sl, r3
 800d21e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d222:	d807      	bhi.n	800d234 <_printf_i+0x28>
 800d224:	2f62      	cmp	r7, #98	; 0x62
 800d226:	d80a      	bhi.n	800d23e <_printf_i+0x32>
 800d228:	2f00      	cmp	r7, #0
 800d22a:	f000 80d8 	beq.w	800d3de <_printf_i+0x1d2>
 800d22e:	2f58      	cmp	r7, #88	; 0x58
 800d230:	f000 80a3 	beq.w	800d37a <_printf_i+0x16e>
 800d234:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d238:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d23c:	e03a      	b.n	800d2b4 <_printf_i+0xa8>
 800d23e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d242:	2b15      	cmp	r3, #21
 800d244:	d8f6      	bhi.n	800d234 <_printf_i+0x28>
 800d246:	a101      	add	r1, pc, #4	; (adr r1, 800d24c <_printf_i+0x40>)
 800d248:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d24c:	0800d2a5 	.word	0x0800d2a5
 800d250:	0800d2b9 	.word	0x0800d2b9
 800d254:	0800d235 	.word	0x0800d235
 800d258:	0800d235 	.word	0x0800d235
 800d25c:	0800d235 	.word	0x0800d235
 800d260:	0800d235 	.word	0x0800d235
 800d264:	0800d2b9 	.word	0x0800d2b9
 800d268:	0800d235 	.word	0x0800d235
 800d26c:	0800d235 	.word	0x0800d235
 800d270:	0800d235 	.word	0x0800d235
 800d274:	0800d235 	.word	0x0800d235
 800d278:	0800d3c5 	.word	0x0800d3c5
 800d27c:	0800d2e9 	.word	0x0800d2e9
 800d280:	0800d3a7 	.word	0x0800d3a7
 800d284:	0800d235 	.word	0x0800d235
 800d288:	0800d235 	.word	0x0800d235
 800d28c:	0800d3e7 	.word	0x0800d3e7
 800d290:	0800d235 	.word	0x0800d235
 800d294:	0800d2e9 	.word	0x0800d2e9
 800d298:	0800d235 	.word	0x0800d235
 800d29c:	0800d235 	.word	0x0800d235
 800d2a0:	0800d3af 	.word	0x0800d3af
 800d2a4:	682b      	ldr	r3, [r5, #0]
 800d2a6:	1d1a      	adds	r2, r3, #4
 800d2a8:	681b      	ldr	r3, [r3, #0]
 800d2aa:	602a      	str	r2, [r5, #0]
 800d2ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d2b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d2b4:	2301      	movs	r3, #1
 800d2b6:	e0a3      	b.n	800d400 <_printf_i+0x1f4>
 800d2b8:	6820      	ldr	r0, [r4, #0]
 800d2ba:	6829      	ldr	r1, [r5, #0]
 800d2bc:	0606      	lsls	r6, r0, #24
 800d2be:	f101 0304 	add.w	r3, r1, #4
 800d2c2:	d50a      	bpl.n	800d2da <_printf_i+0xce>
 800d2c4:	680e      	ldr	r6, [r1, #0]
 800d2c6:	602b      	str	r3, [r5, #0]
 800d2c8:	2e00      	cmp	r6, #0
 800d2ca:	da03      	bge.n	800d2d4 <_printf_i+0xc8>
 800d2cc:	232d      	movs	r3, #45	; 0x2d
 800d2ce:	4276      	negs	r6, r6
 800d2d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d2d4:	485e      	ldr	r0, [pc, #376]	; (800d450 <_printf_i+0x244>)
 800d2d6:	230a      	movs	r3, #10
 800d2d8:	e019      	b.n	800d30e <_printf_i+0x102>
 800d2da:	680e      	ldr	r6, [r1, #0]
 800d2dc:	602b      	str	r3, [r5, #0]
 800d2de:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d2e2:	bf18      	it	ne
 800d2e4:	b236      	sxthne	r6, r6
 800d2e6:	e7ef      	b.n	800d2c8 <_printf_i+0xbc>
 800d2e8:	682b      	ldr	r3, [r5, #0]
 800d2ea:	6820      	ldr	r0, [r4, #0]
 800d2ec:	1d19      	adds	r1, r3, #4
 800d2ee:	6029      	str	r1, [r5, #0]
 800d2f0:	0601      	lsls	r1, r0, #24
 800d2f2:	d501      	bpl.n	800d2f8 <_printf_i+0xec>
 800d2f4:	681e      	ldr	r6, [r3, #0]
 800d2f6:	e002      	b.n	800d2fe <_printf_i+0xf2>
 800d2f8:	0646      	lsls	r6, r0, #25
 800d2fa:	d5fb      	bpl.n	800d2f4 <_printf_i+0xe8>
 800d2fc:	881e      	ldrh	r6, [r3, #0]
 800d2fe:	4854      	ldr	r0, [pc, #336]	; (800d450 <_printf_i+0x244>)
 800d300:	2f6f      	cmp	r7, #111	; 0x6f
 800d302:	bf0c      	ite	eq
 800d304:	2308      	moveq	r3, #8
 800d306:	230a      	movne	r3, #10
 800d308:	2100      	movs	r1, #0
 800d30a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d30e:	6865      	ldr	r5, [r4, #4]
 800d310:	60a5      	str	r5, [r4, #8]
 800d312:	2d00      	cmp	r5, #0
 800d314:	bfa2      	ittt	ge
 800d316:	6821      	ldrge	r1, [r4, #0]
 800d318:	f021 0104 	bicge.w	r1, r1, #4
 800d31c:	6021      	strge	r1, [r4, #0]
 800d31e:	b90e      	cbnz	r6, 800d324 <_printf_i+0x118>
 800d320:	2d00      	cmp	r5, #0
 800d322:	d04d      	beq.n	800d3c0 <_printf_i+0x1b4>
 800d324:	4615      	mov	r5, r2
 800d326:	fbb6 f1f3 	udiv	r1, r6, r3
 800d32a:	fb03 6711 	mls	r7, r3, r1, r6
 800d32e:	5dc7      	ldrb	r7, [r0, r7]
 800d330:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d334:	4637      	mov	r7, r6
 800d336:	42bb      	cmp	r3, r7
 800d338:	460e      	mov	r6, r1
 800d33a:	d9f4      	bls.n	800d326 <_printf_i+0x11a>
 800d33c:	2b08      	cmp	r3, #8
 800d33e:	d10b      	bne.n	800d358 <_printf_i+0x14c>
 800d340:	6823      	ldr	r3, [r4, #0]
 800d342:	07de      	lsls	r6, r3, #31
 800d344:	d508      	bpl.n	800d358 <_printf_i+0x14c>
 800d346:	6923      	ldr	r3, [r4, #16]
 800d348:	6861      	ldr	r1, [r4, #4]
 800d34a:	4299      	cmp	r1, r3
 800d34c:	bfde      	ittt	le
 800d34e:	2330      	movle	r3, #48	; 0x30
 800d350:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d354:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800d358:	1b52      	subs	r2, r2, r5
 800d35a:	6122      	str	r2, [r4, #16]
 800d35c:	f8cd a000 	str.w	sl, [sp]
 800d360:	464b      	mov	r3, r9
 800d362:	aa03      	add	r2, sp, #12
 800d364:	4621      	mov	r1, r4
 800d366:	4640      	mov	r0, r8
 800d368:	f7ff fee2 	bl	800d130 <_printf_common>
 800d36c:	3001      	adds	r0, #1
 800d36e:	d14c      	bne.n	800d40a <_printf_i+0x1fe>
 800d370:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d374:	b004      	add	sp, #16
 800d376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d37a:	4835      	ldr	r0, [pc, #212]	; (800d450 <_printf_i+0x244>)
 800d37c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800d380:	6829      	ldr	r1, [r5, #0]
 800d382:	6823      	ldr	r3, [r4, #0]
 800d384:	f851 6b04 	ldr.w	r6, [r1], #4
 800d388:	6029      	str	r1, [r5, #0]
 800d38a:	061d      	lsls	r5, r3, #24
 800d38c:	d514      	bpl.n	800d3b8 <_printf_i+0x1ac>
 800d38e:	07df      	lsls	r7, r3, #31
 800d390:	bf44      	itt	mi
 800d392:	f043 0320 	orrmi.w	r3, r3, #32
 800d396:	6023      	strmi	r3, [r4, #0]
 800d398:	b91e      	cbnz	r6, 800d3a2 <_printf_i+0x196>
 800d39a:	6823      	ldr	r3, [r4, #0]
 800d39c:	f023 0320 	bic.w	r3, r3, #32
 800d3a0:	6023      	str	r3, [r4, #0]
 800d3a2:	2310      	movs	r3, #16
 800d3a4:	e7b0      	b.n	800d308 <_printf_i+0xfc>
 800d3a6:	6823      	ldr	r3, [r4, #0]
 800d3a8:	f043 0320 	orr.w	r3, r3, #32
 800d3ac:	6023      	str	r3, [r4, #0]
 800d3ae:	2378      	movs	r3, #120	; 0x78
 800d3b0:	4828      	ldr	r0, [pc, #160]	; (800d454 <_printf_i+0x248>)
 800d3b2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d3b6:	e7e3      	b.n	800d380 <_printf_i+0x174>
 800d3b8:	0659      	lsls	r1, r3, #25
 800d3ba:	bf48      	it	mi
 800d3bc:	b2b6      	uxthmi	r6, r6
 800d3be:	e7e6      	b.n	800d38e <_printf_i+0x182>
 800d3c0:	4615      	mov	r5, r2
 800d3c2:	e7bb      	b.n	800d33c <_printf_i+0x130>
 800d3c4:	682b      	ldr	r3, [r5, #0]
 800d3c6:	6826      	ldr	r6, [r4, #0]
 800d3c8:	6961      	ldr	r1, [r4, #20]
 800d3ca:	1d18      	adds	r0, r3, #4
 800d3cc:	6028      	str	r0, [r5, #0]
 800d3ce:	0635      	lsls	r5, r6, #24
 800d3d0:	681b      	ldr	r3, [r3, #0]
 800d3d2:	d501      	bpl.n	800d3d8 <_printf_i+0x1cc>
 800d3d4:	6019      	str	r1, [r3, #0]
 800d3d6:	e002      	b.n	800d3de <_printf_i+0x1d2>
 800d3d8:	0670      	lsls	r0, r6, #25
 800d3da:	d5fb      	bpl.n	800d3d4 <_printf_i+0x1c8>
 800d3dc:	8019      	strh	r1, [r3, #0]
 800d3de:	2300      	movs	r3, #0
 800d3e0:	6123      	str	r3, [r4, #16]
 800d3e2:	4615      	mov	r5, r2
 800d3e4:	e7ba      	b.n	800d35c <_printf_i+0x150>
 800d3e6:	682b      	ldr	r3, [r5, #0]
 800d3e8:	1d1a      	adds	r2, r3, #4
 800d3ea:	602a      	str	r2, [r5, #0]
 800d3ec:	681d      	ldr	r5, [r3, #0]
 800d3ee:	6862      	ldr	r2, [r4, #4]
 800d3f0:	2100      	movs	r1, #0
 800d3f2:	4628      	mov	r0, r5
 800d3f4:	f7f2 fecc 	bl	8000190 <memchr>
 800d3f8:	b108      	cbz	r0, 800d3fe <_printf_i+0x1f2>
 800d3fa:	1b40      	subs	r0, r0, r5
 800d3fc:	6060      	str	r0, [r4, #4]
 800d3fe:	6863      	ldr	r3, [r4, #4]
 800d400:	6123      	str	r3, [r4, #16]
 800d402:	2300      	movs	r3, #0
 800d404:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d408:	e7a8      	b.n	800d35c <_printf_i+0x150>
 800d40a:	6923      	ldr	r3, [r4, #16]
 800d40c:	462a      	mov	r2, r5
 800d40e:	4649      	mov	r1, r9
 800d410:	4640      	mov	r0, r8
 800d412:	47d0      	blx	sl
 800d414:	3001      	adds	r0, #1
 800d416:	d0ab      	beq.n	800d370 <_printf_i+0x164>
 800d418:	6823      	ldr	r3, [r4, #0]
 800d41a:	079b      	lsls	r3, r3, #30
 800d41c:	d413      	bmi.n	800d446 <_printf_i+0x23a>
 800d41e:	68e0      	ldr	r0, [r4, #12]
 800d420:	9b03      	ldr	r3, [sp, #12]
 800d422:	4298      	cmp	r0, r3
 800d424:	bfb8      	it	lt
 800d426:	4618      	movlt	r0, r3
 800d428:	e7a4      	b.n	800d374 <_printf_i+0x168>
 800d42a:	2301      	movs	r3, #1
 800d42c:	4632      	mov	r2, r6
 800d42e:	4649      	mov	r1, r9
 800d430:	4640      	mov	r0, r8
 800d432:	47d0      	blx	sl
 800d434:	3001      	adds	r0, #1
 800d436:	d09b      	beq.n	800d370 <_printf_i+0x164>
 800d438:	3501      	adds	r5, #1
 800d43a:	68e3      	ldr	r3, [r4, #12]
 800d43c:	9903      	ldr	r1, [sp, #12]
 800d43e:	1a5b      	subs	r3, r3, r1
 800d440:	42ab      	cmp	r3, r5
 800d442:	dcf2      	bgt.n	800d42a <_printf_i+0x21e>
 800d444:	e7eb      	b.n	800d41e <_printf_i+0x212>
 800d446:	2500      	movs	r5, #0
 800d448:	f104 0619 	add.w	r6, r4, #25
 800d44c:	e7f5      	b.n	800d43a <_printf_i+0x22e>
 800d44e:	bf00      	nop
 800d450:	0800da95 	.word	0x0800da95
 800d454:	0800daa6 	.word	0x0800daa6

0800d458 <_putc_r>:
 800d458:	b570      	push	{r4, r5, r6, lr}
 800d45a:	460d      	mov	r5, r1
 800d45c:	4614      	mov	r4, r2
 800d45e:	4606      	mov	r6, r0
 800d460:	b118      	cbz	r0, 800d46a <_putc_r+0x12>
 800d462:	6983      	ldr	r3, [r0, #24]
 800d464:	b90b      	cbnz	r3, 800d46a <_putc_r+0x12>
 800d466:	f7ff fb23 	bl	800cab0 <__sinit>
 800d46a:	4b1c      	ldr	r3, [pc, #112]	; (800d4dc <_putc_r+0x84>)
 800d46c:	429c      	cmp	r4, r3
 800d46e:	d124      	bne.n	800d4ba <_putc_r+0x62>
 800d470:	6874      	ldr	r4, [r6, #4]
 800d472:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d474:	07d8      	lsls	r0, r3, #31
 800d476:	d405      	bmi.n	800d484 <_putc_r+0x2c>
 800d478:	89a3      	ldrh	r3, [r4, #12]
 800d47a:	0599      	lsls	r1, r3, #22
 800d47c:	d402      	bmi.n	800d484 <_putc_r+0x2c>
 800d47e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d480:	f7ff fbb4 	bl	800cbec <__retarget_lock_acquire_recursive>
 800d484:	68a3      	ldr	r3, [r4, #8]
 800d486:	3b01      	subs	r3, #1
 800d488:	2b00      	cmp	r3, #0
 800d48a:	60a3      	str	r3, [r4, #8]
 800d48c:	da05      	bge.n	800d49a <_putc_r+0x42>
 800d48e:	69a2      	ldr	r2, [r4, #24]
 800d490:	4293      	cmp	r3, r2
 800d492:	db1c      	blt.n	800d4ce <_putc_r+0x76>
 800d494:	b2eb      	uxtb	r3, r5
 800d496:	2b0a      	cmp	r3, #10
 800d498:	d019      	beq.n	800d4ce <_putc_r+0x76>
 800d49a:	6823      	ldr	r3, [r4, #0]
 800d49c:	1c5a      	adds	r2, r3, #1
 800d49e:	6022      	str	r2, [r4, #0]
 800d4a0:	701d      	strb	r5, [r3, #0]
 800d4a2:	b2ed      	uxtb	r5, r5
 800d4a4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d4a6:	07da      	lsls	r2, r3, #31
 800d4a8:	d405      	bmi.n	800d4b6 <_putc_r+0x5e>
 800d4aa:	89a3      	ldrh	r3, [r4, #12]
 800d4ac:	059b      	lsls	r3, r3, #22
 800d4ae:	d402      	bmi.n	800d4b6 <_putc_r+0x5e>
 800d4b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d4b2:	f7ff fb9c 	bl	800cbee <__retarget_lock_release_recursive>
 800d4b6:	4628      	mov	r0, r5
 800d4b8:	bd70      	pop	{r4, r5, r6, pc}
 800d4ba:	4b09      	ldr	r3, [pc, #36]	; (800d4e0 <_putc_r+0x88>)
 800d4bc:	429c      	cmp	r4, r3
 800d4be:	d101      	bne.n	800d4c4 <_putc_r+0x6c>
 800d4c0:	68b4      	ldr	r4, [r6, #8]
 800d4c2:	e7d6      	b.n	800d472 <_putc_r+0x1a>
 800d4c4:	4b07      	ldr	r3, [pc, #28]	; (800d4e4 <_putc_r+0x8c>)
 800d4c6:	429c      	cmp	r4, r3
 800d4c8:	bf08      	it	eq
 800d4ca:	68f4      	ldreq	r4, [r6, #12]
 800d4cc:	e7d1      	b.n	800d472 <_putc_r+0x1a>
 800d4ce:	4629      	mov	r1, r5
 800d4d0:	4622      	mov	r2, r4
 800d4d2:	4630      	mov	r0, r6
 800d4d4:	f7ff f912 	bl	800c6fc <__swbuf_r>
 800d4d8:	4605      	mov	r5, r0
 800d4da:	e7e3      	b.n	800d4a4 <_putc_r+0x4c>
 800d4dc:	0800da44 	.word	0x0800da44
 800d4e0:	0800da64 	.word	0x0800da64
 800d4e4:	0800da24 	.word	0x0800da24

0800d4e8 <_sbrk_r>:
 800d4e8:	b538      	push	{r3, r4, r5, lr}
 800d4ea:	4d06      	ldr	r5, [pc, #24]	; (800d504 <_sbrk_r+0x1c>)
 800d4ec:	2300      	movs	r3, #0
 800d4ee:	4604      	mov	r4, r0
 800d4f0:	4608      	mov	r0, r1
 800d4f2:	602b      	str	r3, [r5, #0]
 800d4f4:	f7f5 fe74 	bl	80031e0 <_sbrk>
 800d4f8:	1c43      	adds	r3, r0, #1
 800d4fa:	d102      	bne.n	800d502 <_sbrk_r+0x1a>
 800d4fc:	682b      	ldr	r3, [r5, #0]
 800d4fe:	b103      	cbz	r3, 800d502 <_sbrk_r+0x1a>
 800d500:	6023      	str	r3, [r4, #0]
 800d502:	bd38      	pop	{r3, r4, r5, pc}
 800d504:	2000128c 	.word	0x2000128c

0800d508 <__sread>:
 800d508:	b510      	push	{r4, lr}
 800d50a:	460c      	mov	r4, r1
 800d50c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d510:	f000 f8a0 	bl	800d654 <_read_r>
 800d514:	2800      	cmp	r0, #0
 800d516:	bfab      	itete	ge
 800d518:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d51a:	89a3      	ldrhlt	r3, [r4, #12]
 800d51c:	181b      	addge	r3, r3, r0
 800d51e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d522:	bfac      	ite	ge
 800d524:	6563      	strge	r3, [r4, #84]	; 0x54
 800d526:	81a3      	strhlt	r3, [r4, #12]
 800d528:	bd10      	pop	{r4, pc}

0800d52a <__swrite>:
 800d52a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d52e:	461f      	mov	r7, r3
 800d530:	898b      	ldrh	r3, [r1, #12]
 800d532:	05db      	lsls	r3, r3, #23
 800d534:	4605      	mov	r5, r0
 800d536:	460c      	mov	r4, r1
 800d538:	4616      	mov	r6, r2
 800d53a:	d505      	bpl.n	800d548 <__swrite+0x1e>
 800d53c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d540:	2302      	movs	r3, #2
 800d542:	2200      	movs	r2, #0
 800d544:	f000 f868 	bl	800d618 <_lseek_r>
 800d548:	89a3      	ldrh	r3, [r4, #12]
 800d54a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d54e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d552:	81a3      	strh	r3, [r4, #12]
 800d554:	4632      	mov	r2, r6
 800d556:	463b      	mov	r3, r7
 800d558:	4628      	mov	r0, r5
 800d55a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d55e:	f000 b817 	b.w	800d590 <_write_r>

0800d562 <__sseek>:
 800d562:	b510      	push	{r4, lr}
 800d564:	460c      	mov	r4, r1
 800d566:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d56a:	f000 f855 	bl	800d618 <_lseek_r>
 800d56e:	1c43      	adds	r3, r0, #1
 800d570:	89a3      	ldrh	r3, [r4, #12]
 800d572:	bf15      	itete	ne
 800d574:	6560      	strne	r0, [r4, #84]	; 0x54
 800d576:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d57a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d57e:	81a3      	strheq	r3, [r4, #12]
 800d580:	bf18      	it	ne
 800d582:	81a3      	strhne	r3, [r4, #12]
 800d584:	bd10      	pop	{r4, pc}

0800d586 <__sclose>:
 800d586:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d58a:	f000 b813 	b.w	800d5b4 <_close_r>
	...

0800d590 <_write_r>:
 800d590:	b538      	push	{r3, r4, r5, lr}
 800d592:	4d07      	ldr	r5, [pc, #28]	; (800d5b0 <_write_r+0x20>)
 800d594:	4604      	mov	r4, r0
 800d596:	4608      	mov	r0, r1
 800d598:	4611      	mov	r1, r2
 800d59a:	2200      	movs	r2, #0
 800d59c:	602a      	str	r2, [r5, #0]
 800d59e:	461a      	mov	r2, r3
 800d5a0:	f7f5 fdcd 	bl	800313e <_write>
 800d5a4:	1c43      	adds	r3, r0, #1
 800d5a6:	d102      	bne.n	800d5ae <_write_r+0x1e>
 800d5a8:	682b      	ldr	r3, [r5, #0]
 800d5aa:	b103      	cbz	r3, 800d5ae <_write_r+0x1e>
 800d5ac:	6023      	str	r3, [r4, #0]
 800d5ae:	bd38      	pop	{r3, r4, r5, pc}
 800d5b0:	2000128c 	.word	0x2000128c

0800d5b4 <_close_r>:
 800d5b4:	b538      	push	{r3, r4, r5, lr}
 800d5b6:	4d06      	ldr	r5, [pc, #24]	; (800d5d0 <_close_r+0x1c>)
 800d5b8:	2300      	movs	r3, #0
 800d5ba:	4604      	mov	r4, r0
 800d5bc:	4608      	mov	r0, r1
 800d5be:	602b      	str	r3, [r5, #0]
 800d5c0:	f7f5 fdd9 	bl	8003176 <_close>
 800d5c4:	1c43      	adds	r3, r0, #1
 800d5c6:	d102      	bne.n	800d5ce <_close_r+0x1a>
 800d5c8:	682b      	ldr	r3, [r5, #0]
 800d5ca:	b103      	cbz	r3, 800d5ce <_close_r+0x1a>
 800d5cc:	6023      	str	r3, [r4, #0]
 800d5ce:	bd38      	pop	{r3, r4, r5, pc}
 800d5d0:	2000128c 	.word	0x2000128c

0800d5d4 <_fstat_r>:
 800d5d4:	b538      	push	{r3, r4, r5, lr}
 800d5d6:	4d07      	ldr	r5, [pc, #28]	; (800d5f4 <_fstat_r+0x20>)
 800d5d8:	2300      	movs	r3, #0
 800d5da:	4604      	mov	r4, r0
 800d5dc:	4608      	mov	r0, r1
 800d5de:	4611      	mov	r1, r2
 800d5e0:	602b      	str	r3, [r5, #0]
 800d5e2:	f7f5 fdd4 	bl	800318e <_fstat>
 800d5e6:	1c43      	adds	r3, r0, #1
 800d5e8:	d102      	bne.n	800d5f0 <_fstat_r+0x1c>
 800d5ea:	682b      	ldr	r3, [r5, #0]
 800d5ec:	b103      	cbz	r3, 800d5f0 <_fstat_r+0x1c>
 800d5ee:	6023      	str	r3, [r4, #0]
 800d5f0:	bd38      	pop	{r3, r4, r5, pc}
 800d5f2:	bf00      	nop
 800d5f4:	2000128c 	.word	0x2000128c

0800d5f8 <_isatty_r>:
 800d5f8:	b538      	push	{r3, r4, r5, lr}
 800d5fa:	4d06      	ldr	r5, [pc, #24]	; (800d614 <_isatty_r+0x1c>)
 800d5fc:	2300      	movs	r3, #0
 800d5fe:	4604      	mov	r4, r0
 800d600:	4608      	mov	r0, r1
 800d602:	602b      	str	r3, [r5, #0]
 800d604:	f7f5 fdd3 	bl	80031ae <_isatty>
 800d608:	1c43      	adds	r3, r0, #1
 800d60a:	d102      	bne.n	800d612 <_isatty_r+0x1a>
 800d60c:	682b      	ldr	r3, [r5, #0]
 800d60e:	b103      	cbz	r3, 800d612 <_isatty_r+0x1a>
 800d610:	6023      	str	r3, [r4, #0]
 800d612:	bd38      	pop	{r3, r4, r5, pc}
 800d614:	2000128c 	.word	0x2000128c

0800d618 <_lseek_r>:
 800d618:	b538      	push	{r3, r4, r5, lr}
 800d61a:	4d07      	ldr	r5, [pc, #28]	; (800d638 <_lseek_r+0x20>)
 800d61c:	4604      	mov	r4, r0
 800d61e:	4608      	mov	r0, r1
 800d620:	4611      	mov	r1, r2
 800d622:	2200      	movs	r2, #0
 800d624:	602a      	str	r2, [r5, #0]
 800d626:	461a      	mov	r2, r3
 800d628:	f7f5 fdcc 	bl	80031c4 <_lseek>
 800d62c:	1c43      	adds	r3, r0, #1
 800d62e:	d102      	bne.n	800d636 <_lseek_r+0x1e>
 800d630:	682b      	ldr	r3, [r5, #0]
 800d632:	b103      	cbz	r3, 800d636 <_lseek_r+0x1e>
 800d634:	6023      	str	r3, [r4, #0]
 800d636:	bd38      	pop	{r3, r4, r5, pc}
 800d638:	2000128c 	.word	0x2000128c

0800d63c <__malloc_lock>:
 800d63c:	4801      	ldr	r0, [pc, #4]	; (800d644 <__malloc_lock+0x8>)
 800d63e:	f7ff bad5 	b.w	800cbec <__retarget_lock_acquire_recursive>
 800d642:	bf00      	nop
 800d644:	20001280 	.word	0x20001280

0800d648 <__malloc_unlock>:
 800d648:	4801      	ldr	r0, [pc, #4]	; (800d650 <__malloc_unlock+0x8>)
 800d64a:	f7ff bad0 	b.w	800cbee <__retarget_lock_release_recursive>
 800d64e:	bf00      	nop
 800d650:	20001280 	.word	0x20001280

0800d654 <_read_r>:
 800d654:	b538      	push	{r3, r4, r5, lr}
 800d656:	4d07      	ldr	r5, [pc, #28]	; (800d674 <_read_r+0x20>)
 800d658:	4604      	mov	r4, r0
 800d65a:	4608      	mov	r0, r1
 800d65c:	4611      	mov	r1, r2
 800d65e:	2200      	movs	r2, #0
 800d660:	602a      	str	r2, [r5, #0]
 800d662:	461a      	mov	r2, r3
 800d664:	f7f5 fd4e 	bl	8003104 <_read>
 800d668:	1c43      	adds	r3, r0, #1
 800d66a:	d102      	bne.n	800d672 <_read_r+0x1e>
 800d66c:	682b      	ldr	r3, [r5, #0]
 800d66e:	b103      	cbz	r3, 800d672 <_read_r+0x1e>
 800d670:	6023      	str	r3, [r4, #0]
 800d672:	bd38      	pop	{r3, r4, r5, pc}
 800d674:	2000128c 	.word	0x2000128c

0800d678 <_init>:
 800d678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d67a:	bf00      	nop
 800d67c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d67e:	bc08      	pop	{r3}
 800d680:	469e      	mov	lr, r3
 800d682:	4770      	bx	lr

0800d684 <_fini>:
 800d684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d686:	bf00      	nop
 800d688:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d68a:	bc08      	pop	{r3}
 800d68c:	469e      	mov	lr, r3
 800d68e:	4770      	bx	lr
