
WB_AWEAR_proj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d584  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005d4  0800d6c4  0800d6c4  0001d6c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800dc98  0800dc98  0001dc98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800dca0  0800dca0  0001dca0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800dca4  0800dca4  0001dca4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000084  20000008  0800dca8  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 MB_MEM2       00000883  2000008c  0800dd2c  0002008c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 BLE_DRIVER_CONTEXT 00000035  20000910  0800e5af  00020910  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 SYSTEM_DRIVER_CONTEXT 00000011  20000948  0800e5e4  00020948  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00000548  2000095c  0800e5f5  0002095c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000ea4  0800e5f5  00020ea4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020959  2**0
                  CONTENTS, READONLY
 13 MAPPING_TABLE 00000028  20030000  20030000  00030000  2**2
                  ALLOC
 14 MB_MEM1       000001bb  20030028  20030028  00030000  2**2
                  ALLOC
 15 .debug_info   00035f42  00000000  00000000  00020989  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 000067eb  00000000  00000000  000568cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00002f20  00000000  00000000  0005d0b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 00002c38  00000000  00000000  0005ffd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002e83f  00000000  00000000  00062c10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00034f13  00000000  00000000  0009144f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000ff5b3  00000000  00000000  000c6362  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000050  00000000  00000000  001c5915  2**0
                  CONTENTS, READONLY
 23 .debug_frame  0000cf5c  00000000  00000000  001c5968  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	2000095c 	.word	0x2000095c
 800015c:	00000000 	.word	0x00000000
 8000160:	0800d6ac 	.word	0x0800d6ac

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000960 	.word	0x20000960
 800017c:	0800d6ac 	.word	0x0800d6ac

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_uldivmod>:
 8000230:	b953      	cbnz	r3, 8000248 <__aeabi_uldivmod+0x18>
 8000232:	b94a      	cbnz	r2, 8000248 <__aeabi_uldivmod+0x18>
 8000234:	2900      	cmp	r1, #0
 8000236:	bf08      	it	eq
 8000238:	2800      	cmpeq	r0, #0
 800023a:	bf1c      	itt	ne
 800023c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000240:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000244:	f000 b974 	b.w	8000530 <__aeabi_idiv0>
 8000248:	f1ad 0c08 	sub.w	ip, sp, #8
 800024c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000258:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800025c:	b004      	add	sp, #16
 800025e:	4770      	bx	lr

08000260 <__udivmoddi4>:
 8000260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000264:	9d08      	ldr	r5, [sp, #32]
 8000266:	4604      	mov	r4, r0
 8000268:	468e      	mov	lr, r1
 800026a:	2b00      	cmp	r3, #0
 800026c:	d14d      	bne.n	800030a <__udivmoddi4+0xaa>
 800026e:	428a      	cmp	r2, r1
 8000270:	4694      	mov	ip, r2
 8000272:	d969      	bls.n	8000348 <__udivmoddi4+0xe8>
 8000274:	fab2 f282 	clz	r2, r2
 8000278:	b152      	cbz	r2, 8000290 <__udivmoddi4+0x30>
 800027a:	fa01 f302 	lsl.w	r3, r1, r2
 800027e:	f1c2 0120 	rsb	r1, r2, #32
 8000282:	fa20 f101 	lsr.w	r1, r0, r1
 8000286:	fa0c fc02 	lsl.w	ip, ip, r2
 800028a:	ea41 0e03 	orr.w	lr, r1, r3
 800028e:	4094      	lsls	r4, r2
 8000290:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000294:	0c21      	lsrs	r1, r4, #16
 8000296:	fbbe f6f8 	udiv	r6, lr, r8
 800029a:	fa1f f78c 	uxth.w	r7, ip
 800029e:	fb08 e316 	mls	r3, r8, r6, lr
 80002a2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002a6:	fb06 f107 	mul.w	r1, r6, r7
 80002aa:	4299      	cmp	r1, r3
 80002ac:	d90a      	bls.n	80002c4 <__udivmoddi4+0x64>
 80002ae:	eb1c 0303 	adds.w	r3, ip, r3
 80002b2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002b6:	f080 811f 	bcs.w	80004f8 <__udivmoddi4+0x298>
 80002ba:	4299      	cmp	r1, r3
 80002bc:	f240 811c 	bls.w	80004f8 <__udivmoddi4+0x298>
 80002c0:	3e02      	subs	r6, #2
 80002c2:	4463      	add	r3, ip
 80002c4:	1a5b      	subs	r3, r3, r1
 80002c6:	b2a4      	uxth	r4, r4
 80002c8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002cc:	fb08 3310 	mls	r3, r8, r0, r3
 80002d0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d4:	fb00 f707 	mul.w	r7, r0, r7
 80002d8:	42a7      	cmp	r7, r4
 80002da:	d90a      	bls.n	80002f2 <__udivmoddi4+0x92>
 80002dc:	eb1c 0404 	adds.w	r4, ip, r4
 80002e0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002e4:	f080 810a 	bcs.w	80004fc <__udivmoddi4+0x29c>
 80002e8:	42a7      	cmp	r7, r4
 80002ea:	f240 8107 	bls.w	80004fc <__udivmoddi4+0x29c>
 80002ee:	4464      	add	r4, ip
 80002f0:	3802      	subs	r0, #2
 80002f2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002f6:	1be4      	subs	r4, r4, r7
 80002f8:	2600      	movs	r6, #0
 80002fa:	b11d      	cbz	r5, 8000304 <__udivmoddi4+0xa4>
 80002fc:	40d4      	lsrs	r4, r2
 80002fe:	2300      	movs	r3, #0
 8000300:	e9c5 4300 	strd	r4, r3, [r5]
 8000304:	4631      	mov	r1, r6
 8000306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030a:	428b      	cmp	r3, r1
 800030c:	d909      	bls.n	8000322 <__udivmoddi4+0xc2>
 800030e:	2d00      	cmp	r5, #0
 8000310:	f000 80ef 	beq.w	80004f2 <__udivmoddi4+0x292>
 8000314:	2600      	movs	r6, #0
 8000316:	e9c5 0100 	strd	r0, r1, [r5]
 800031a:	4630      	mov	r0, r6
 800031c:	4631      	mov	r1, r6
 800031e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000322:	fab3 f683 	clz	r6, r3
 8000326:	2e00      	cmp	r6, #0
 8000328:	d14a      	bne.n	80003c0 <__udivmoddi4+0x160>
 800032a:	428b      	cmp	r3, r1
 800032c:	d302      	bcc.n	8000334 <__udivmoddi4+0xd4>
 800032e:	4282      	cmp	r2, r0
 8000330:	f200 80f9 	bhi.w	8000526 <__udivmoddi4+0x2c6>
 8000334:	1a84      	subs	r4, r0, r2
 8000336:	eb61 0303 	sbc.w	r3, r1, r3
 800033a:	2001      	movs	r0, #1
 800033c:	469e      	mov	lr, r3
 800033e:	2d00      	cmp	r5, #0
 8000340:	d0e0      	beq.n	8000304 <__udivmoddi4+0xa4>
 8000342:	e9c5 4e00 	strd	r4, lr, [r5]
 8000346:	e7dd      	b.n	8000304 <__udivmoddi4+0xa4>
 8000348:	b902      	cbnz	r2, 800034c <__udivmoddi4+0xec>
 800034a:	deff      	udf	#255	; 0xff
 800034c:	fab2 f282 	clz	r2, r2
 8000350:	2a00      	cmp	r2, #0
 8000352:	f040 8092 	bne.w	800047a <__udivmoddi4+0x21a>
 8000356:	eba1 010c 	sub.w	r1, r1, ip
 800035a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800035e:	fa1f fe8c 	uxth.w	lr, ip
 8000362:	2601      	movs	r6, #1
 8000364:	0c20      	lsrs	r0, r4, #16
 8000366:	fbb1 f3f7 	udiv	r3, r1, r7
 800036a:	fb07 1113 	mls	r1, r7, r3, r1
 800036e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000372:	fb0e f003 	mul.w	r0, lr, r3
 8000376:	4288      	cmp	r0, r1
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0x12c>
 800037a:	eb1c 0101 	adds.w	r1, ip, r1
 800037e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x12a>
 8000384:	4288      	cmp	r0, r1
 8000386:	f200 80cb 	bhi.w	8000520 <__udivmoddi4+0x2c0>
 800038a:	4643      	mov	r3, r8
 800038c:	1a09      	subs	r1, r1, r0
 800038e:	b2a4      	uxth	r4, r4
 8000390:	fbb1 f0f7 	udiv	r0, r1, r7
 8000394:	fb07 1110 	mls	r1, r7, r0, r1
 8000398:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800039c:	fb0e fe00 	mul.w	lr, lr, r0
 80003a0:	45a6      	cmp	lr, r4
 80003a2:	d908      	bls.n	80003b6 <__udivmoddi4+0x156>
 80003a4:	eb1c 0404 	adds.w	r4, ip, r4
 80003a8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003ac:	d202      	bcs.n	80003b4 <__udivmoddi4+0x154>
 80003ae:	45a6      	cmp	lr, r4
 80003b0:	f200 80bb 	bhi.w	800052a <__udivmoddi4+0x2ca>
 80003b4:	4608      	mov	r0, r1
 80003b6:	eba4 040e 	sub.w	r4, r4, lr
 80003ba:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003be:	e79c      	b.n	80002fa <__udivmoddi4+0x9a>
 80003c0:	f1c6 0720 	rsb	r7, r6, #32
 80003c4:	40b3      	lsls	r3, r6
 80003c6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ca:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ce:	fa20 f407 	lsr.w	r4, r0, r7
 80003d2:	fa01 f306 	lsl.w	r3, r1, r6
 80003d6:	431c      	orrs	r4, r3
 80003d8:	40f9      	lsrs	r1, r7
 80003da:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003de:	fa00 f306 	lsl.w	r3, r0, r6
 80003e2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003e6:	0c20      	lsrs	r0, r4, #16
 80003e8:	fa1f fe8c 	uxth.w	lr, ip
 80003ec:	fb09 1118 	mls	r1, r9, r8, r1
 80003f0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f4:	fb08 f00e 	mul.w	r0, r8, lr
 80003f8:	4288      	cmp	r0, r1
 80003fa:	fa02 f206 	lsl.w	r2, r2, r6
 80003fe:	d90b      	bls.n	8000418 <__udivmoddi4+0x1b8>
 8000400:	eb1c 0101 	adds.w	r1, ip, r1
 8000404:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000408:	f080 8088 	bcs.w	800051c <__udivmoddi4+0x2bc>
 800040c:	4288      	cmp	r0, r1
 800040e:	f240 8085 	bls.w	800051c <__udivmoddi4+0x2bc>
 8000412:	f1a8 0802 	sub.w	r8, r8, #2
 8000416:	4461      	add	r1, ip
 8000418:	1a09      	subs	r1, r1, r0
 800041a:	b2a4      	uxth	r4, r4
 800041c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000420:	fb09 1110 	mls	r1, r9, r0, r1
 8000424:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000428:	fb00 fe0e 	mul.w	lr, r0, lr
 800042c:	458e      	cmp	lr, r1
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x1e2>
 8000430:	eb1c 0101 	adds.w	r1, ip, r1
 8000434:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000438:	d26c      	bcs.n	8000514 <__udivmoddi4+0x2b4>
 800043a:	458e      	cmp	lr, r1
 800043c:	d96a      	bls.n	8000514 <__udivmoddi4+0x2b4>
 800043e:	3802      	subs	r0, #2
 8000440:	4461      	add	r1, ip
 8000442:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000446:	fba0 9402 	umull	r9, r4, r0, r2
 800044a:	eba1 010e 	sub.w	r1, r1, lr
 800044e:	42a1      	cmp	r1, r4
 8000450:	46c8      	mov	r8, r9
 8000452:	46a6      	mov	lr, r4
 8000454:	d356      	bcc.n	8000504 <__udivmoddi4+0x2a4>
 8000456:	d053      	beq.n	8000500 <__udivmoddi4+0x2a0>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x212>
 800045a:	ebb3 0208 	subs.w	r2, r3, r8
 800045e:	eb61 010e 	sbc.w	r1, r1, lr
 8000462:	fa01 f707 	lsl.w	r7, r1, r7
 8000466:	fa22 f306 	lsr.w	r3, r2, r6
 800046a:	40f1      	lsrs	r1, r6
 800046c:	431f      	orrs	r7, r3
 800046e:	e9c5 7100 	strd	r7, r1, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	f1c2 0320 	rsb	r3, r2, #32
 800047e:	40d8      	lsrs	r0, r3
 8000480:	fa0c fc02 	lsl.w	ip, ip, r2
 8000484:	fa21 f303 	lsr.w	r3, r1, r3
 8000488:	4091      	lsls	r1, r2
 800048a:	4301      	orrs	r1, r0
 800048c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fbb3 f0f7 	udiv	r0, r3, r7
 8000498:	fb07 3610 	mls	r6, r7, r0, r3
 800049c:	0c0b      	lsrs	r3, r1, #16
 800049e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004a2:	fb00 f60e 	mul.w	r6, r0, lr
 80004a6:	429e      	cmp	r6, r3
 80004a8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x260>
 80004ae:	eb1c 0303 	adds.w	r3, ip, r3
 80004b2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004b6:	d22f      	bcs.n	8000518 <__udivmoddi4+0x2b8>
 80004b8:	429e      	cmp	r6, r3
 80004ba:	d92d      	bls.n	8000518 <__udivmoddi4+0x2b8>
 80004bc:	3802      	subs	r0, #2
 80004be:	4463      	add	r3, ip
 80004c0:	1b9b      	subs	r3, r3, r6
 80004c2:	b289      	uxth	r1, r1
 80004c4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004c8:	fb07 3316 	mls	r3, r7, r6, r3
 80004cc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004d0:	fb06 f30e 	mul.w	r3, r6, lr
 80004d4:	428b      	cmp	r3, r1
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x28a>
 80004d8:	eb1c 0101 	adds.w	r1, ip, r1
 80004dc:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004e0:	d216      	bcs.n	8000510 <__udivmoddi4+0x2b0>
 80004e2:	428b      	cmp	r3, r1
 80004e4:	d914      	bls.n	8000510 <__udivmoddi4+0x2b0>
 80004e6:	3e02      	subs	r6, #2
 80004e8:	4461      	add	r1, ip
 80004ea:	1ac9      	subs	r1, r1, r3
 80004ec:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004f0:	e738      	b.n	8000364 <__udivmoddi4+0x104>
 80004f2:	462e      	mov	r6, r5
 80004f4:	4628      	mov	r0, r5
 80004f6:	e705      	b.n	8000304 <__udivmoddi4+0xa4>
 80004f8:	4606      	mov	r6, r0
 80004fa:	e6e3      	b.n	80002c4 <__udivmoddi4+0x64>
 80004fc:	4618      	mov	r0, r3
 80004fe:	e6f8      	b.n	80002f2 <__udivmoddi4+0x92>
 8000500:	454b      	cmp	r3, r9
 8000502:	d2a9      	bcs.n	8000458 <__udivmoddi4+0x1f8>
 8000504:	ebb9 0802 	subs.w	r8, r9, r2
 8000508:	eb64 0e0c 	sbc.w	lr, r4, ip
 800050c:	3801      	subs	r0, #1
 800050e:	e7a3      	b.n	8000458 <__udivmoddi4+0x1f8>
 8000510:	4646      	mov	r6, r8
 8000512:	e7ea      	b.n	80004ea <__udivmoddi4+0x28a>
 8000514:	4620      	mov	r0, r4
 8000516:	e794      	b.n	8000442 <__udivmoddi4+0x1e2>
 8000518:	4640      	mov	r0, r8
 800051a:	e7d1      	b.n	80004c0 <__udivmoddi4+0x260>
 800051c:	46d0      	mov	r8, sl
 800051e:	e77b      	b.n	8000418 <__udivmoddi4+0x1b8>
 8000520:	3b02      	subs	r3, #2
 8000522:	4461      	add	r1, ip
 8000524:	e732      	b.n	800038c <__udivmoddi4+0x12c>
 8000526:	4630      	mov	r0, r6
 8000528:	e709      	b.n	800033e <__udivmoddi4+0xde>
 800052a:	4464      	add	r4, ip
 800052c:	3802      	subs	r0, #2
 800052e:	e742      	b.n	80003b6 <__udivmoddi4+0x156>

08000530 <__aeabi_idiv0>:
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop

08000534 <BH1790GLC_init>:

#include "BH1790GLC.h"


uint8_t BH1790GLC_init( BH1790GLC *dev, I2C_HandleTypeDef *i2cHandle )
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b084      	sub	sp, #16
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
 800053c:	6039      	str	r1, [r7, #0]
	/* Set struct parameters */
	dev->i2cHandle = i2cHandle;
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	683a      	ldr	r2, [r7, #0]
 8000542:	601a      	str	r2, [r3, #0]
	dev->ppg_data[0] = 0;
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	2200      	movs	r2, #0
 8000548:	809a      	strh	r2, [r3, #4]
	dev->ppg_data[1] = 0;
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	2200      	movs	r2, #0
 800054e:	80da      	strh	r2, [r3, #6]
	/* Keep count of errors */
	HAL_StatusTypeDef status;

	/* Take initial reads to make sure I2C is working */
	uint8_t regData;
	status = read(dev, BH1790GLC_MANUFACTURER_ID, &regData);	//get manufacturer id
 8000550:	f107 030e 	add.w	r3, r7, #14
 8000554:	461a      	mov	r2, r3
 8000556:	210f      	movs	r1, #15
 8000558:	6878      	ldr	r0, [r7, #4]
 800055a:	f000 f8a3 	bl	80006a4 <read>
 800055e:	4603      	mov	r3, r0
 8000560:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK){
 8000562:	7bfb      	ldrb	r3, [r7, #15]
 8000564:	2b00      	cmp	r3, #0
 8000566:	d001      	beq.n	800056c <BH1790GLC_init+0x38>
		return ERR_MID_VAL;
 8000568:	230a      	movs	r3, #10
 800056a:	e04a      	b.n	8000602 <BH1790GLC_init+0xce>
	}
	if(regData != BH1790GLC_MID_VAL){
 800056c:	7bbb      	ldrb	r3, [r7, #14]
 800056e:	2be0      	cmp	r3, #224	; 0xe0
 8000570:	d001      	beq.n	8000576 <BH1790GLC_init+0x42>
		return ERR_MID_VAL;
 8000572:	230a      	movs	r3, #10
 8000574:	e045      	b.n	8000602 <BH1790GLC_init+0xce>
	}

	status = read(dev, BH1790GLC_PART_ID, &regData);	//get part id
 8000576:	f107 030e 	add.w	r3, r7, #14
 800057a:	461a      	mov	r2, r3
 800057c:	2110      	movs	r1, #16
 800057e:	6878      	ldr	r0, [r7, #4]
 8000580:	f000 f890 	bl	80006a4 <read>
 8000584:	4603      	mov	r3, r0
 8000586:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK){
 8000588:	7bfb      	ldrb	r3, [r7, #15]
 800058a:	2b00      	cmp	r3, #0
 800058c:	d001      	beq.n	8000592 <BH1790GLC_init+0x5e>
		return ERR_PID_VAL;
 800058e:	230b      	movs	r3, #11
 8000590:	e037      	b.n	8000602 <BH1790GLC_init+0xce>
	}
	if(regData != BH1790GLC_PID_VAL){
 8000592:	7bbb      	ldrb	r3, [r7, #14]
 8000594:	2b0d      	cmp	r3, #13
 8000596:	d001      	beq.n	800059c <BH1790GLC_init+0x68>
		return ERR_PID_VAL;
 8000598:	230b      	movs	r3, #11
 800059a:	e032      	b.n	8000602 <BH1790GLC_init+0xce>
	}

	/* Configure the 3 registers needed to start taking measurements */
	uint8_t configData[3];
	configData[0] = BH1790GLC_MEAS_CONTROL1_VAL;	//to BH1790GLC_MEAS_CONTROL1 (0x41)
 800059c:	2382      	movs	r3, #130	; 0x82
 800059e:	723b      	strb	r3, [r7, #8]
	configData[1] = BH1790GLC_MEAS_CONTROL2_VAL;	//to BH1790GLC_MEAS_CONTROL2 (0x42)
 80005a0:	230c      	movs	r3, #12
 80005a2:	727b      	strb	r3, [r7, #9]
	configData[2] = BH1790GLC_MEAS_START_VAL;		//to BH1790GLC_MEAS_START (0x43)
 80005a4:	2301      	movs	r3, #1
 80005a6:	72bb      	strb	r3, [r7, #10]

	status = write(dev, BH1790GLC_MEAS_CONTROL1, &configData[0]);
 80005a8:	f107 0308 	add.w	r3, r7, #8
 80005ac:	461a      	mov	r2, r3
 80005ae:	2141      	movs	r1, #65	; 0x41
 80005b0:	6878      	ldr	r0, [r7, #4]
 80005b2:	f000 f855 	bl	8000660 <write>
 80005b6:	4603      	mov	r3, r0
 80005b8:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK){
 80005ba:	7bfb      	ldrb	r3, [r7, #15]
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d001      	beq.n	80005c4 <BH1790GLC_init+0x90>
		return ERR_MEAS_CONTROL1;
 80005c0:	2314      	movs	r3, #20
 80005c2:	e01e      	b.n	8000602 <BH1790GLC_init+0xce>
	}
	status = write(dev, BH1790GLC_MEAS_CONTROL2, &configData[1]);
 80005c4:	f107 0308 	add.w	r3, r7, #8
 80005c8:	3301      	adds	r3, #1
 80005ca:	461a      	mov	r2, r3
 80005cc:	2142      	movs	r1, #66	; 0x42
 80005ce:	6878      	ldr	r0, [r7, #4]
 80005d0:	f000 f846 	bl	8000660 <write>
 80005d4:	4603      	mov	r3, r0
 80005d6:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK){
 80005d8:	7bfb      	ldrb	r3, [r7, #15]
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d001      	beq.n	80005e2 <BH1790GLC_init+0xae>
		return ERR_MEAS_CONTROL2;
 80005de:	2315      	movs	r3, #21
 80005e0:	e00f      	b.n	8000602 <BH1790GLC_init+0xce>
	}
	status = write(dev, BH1790GLC_MEAS_START, &configData[2]);
 80005e2:	f107 0308 	add.w	r3, r7, #8
 80005e6:	3302      	adds	r3, #2
 80005e8:	461a      	mov	r2, r3
 80005ea:	2143      	movs	r1, #67	; 0x43
 80005ec:	6878      	ldr	r0, [r7, #4]
 80005ee:	f000 f837 	bl	8000660 <write>
 80005f2:	4603      	mov	r3, r0
 80005f4:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK){
 80005f6:	7bfb      	ldrb	r3, [r7, #15]
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d001      	beq.n	8000600 <BH1790GLC_init+0xcc>
		return ERR_MEAS_START;
 80005fc:	2316      	movs	r3, #22
 80005fe:	e000      	b.n	8000602 <BH1790GLC_init+0xce>
	}

	return SUCCESS;
 8000600:	2300      	movs	r3, #0
}
 8000602:	4618      	mov	r0, r3
 8000604:	3710      	adds	r7, #16
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}

0800060a <get_val>:

/*
 * Puts the ppg readings into the ppg_data struct variable
 */
uint8_t get_val( BH1790GLC *dev )
{
 800060a:	b580      	push	{r7, lr}
 800060c:	b084      	sub	sp, #16
 800060e:	af00      	add	r7, sp, #0
 8000610:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status;
	uint8_t sensorData[4];

	status = many_reads(dev, BH1790GLC_DATAOUT_LEDOFF, sensorData, 4);
 8000612:	f107 0208 	add.w	r2, r7, #8
 8000616:	2304      	movs	r3, #4
 8000618:	2154      	movs	r1, #84	; 0x54
 800061a:	6878      	ldr	r0, [r7, #4]
 800061c:	f000 f864 	bl	80006e8 <many_reads>
 8000620:	4603      	mov	r3, r0
 8000622:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK){
 8000624:	7bfb      	ldrb	r3, [r7, #15]
 8000626:	2b00      	cmp	r3, #0
 8000628:	d001      	beq.n	800062e <get_val+0x24>
		return ERR_DATA_OUT;		//error check
 800062a:	231e      	movs	r3, #30
 800062c:	e014      	b.n	8000658 <get_val+0x4e>
	}

	//convert the sensorData values to useful data
	dev->ppg_data[0] = ((uint16_t)sensorData[1]<<8)|(sensorData[0]);	//LED OFF
 800062e:	7a7b      	ldrb	r3, [r7, #9]
 8000630:	021b      	lsls	r3, r3, #8
 8000632:	b21a      	sxth	r2, r3
 8000634:	7a3b      	ldrb	r3, [r7, #8]
 8000636:	b21b      	sxth	r3, r3
 8000638:	4313      	orrs	r3, r2
 800063a:	b21b      	sxth	r3, r3
 800063c:	b29a      	uxth	r2, r3
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	809a      	strh	r2, [r3, #4]
	dev->ppg_data[1] = ((uint16_t)sensorData[3]<<8)|(sensorData[2]);	//LED ON
 8000642:	7afb      	ldrb	r3, [r7, #11]
 8000644:	021b      	lsls	r3, r3, #8
 8000646:	b21a      	sxth	r2, r3
 8000648:	7abb      	ldrb	r3, [r7, #10]
 800064a:	b21b      	sxth	r3, r3
 800064c:	4313      	orrs	r3, r2
 800064e:	b21b      	sxth	r3, r3
 8000650:	b29a      	uxth	r2, r3
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	80da      	strh	r2, [r3, #6]

	return SUCCESS;
 8000656:	2300      	movs	r3, #0
}
 8000658:	4618      	mov	r0, r3
 800065a:	3710      	adds	r7, #16
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}

08000660 <write>:
 * dev : device
 * reg : register to write to
 * data : what to write
 */
HAL_StatusTypeDef write( BH1790GLC *dev, uint8_t reg, uint8_t *data)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b08a      	sub	sp, #40	; 0x28
 8000664:	af04      	add	r7, sp, #16
 8000666:	60f8      	str	r0, [r7, #12]
 8000668:	460b      	mov	r3, r1
 800066a:	607a      	str	r2, [r7, #4]
 800066c:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef ret;

	//passing my handle, read from peripheral, get from this register, size of that register,
	// where to put the data, 1 byte of data, max delay
	ret = HAL_I2C_Mem_Write(dev->i2cHandle, (BH1790GLC_DEVICE_ADDRESS<<1), reg, 1, data, 1, HAL_MAX_DELAY);
 800066e:	68fb      	ldr	r3, [r7, #12]
 8000670:	6818      	ldr	r0, [r3, #0]
 8000672:	7afb      	ldrb	r3, [r7, #11]
 8000674:	b29a      	uxth	r2, r3
 8000676:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800067a:	9302      	str	r3, [sp, #8]
 800067c:	2301      	movs	r3, #1
 800067e:	9301      	str	r3, [sp, #4]
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	9300      	str	r3, [sp, #0]
 8000684:	2301      	movs	r3, #1
 8000686:	21b6      	movs	r1, #182	; 0xb6
 8000688:	f003 fcc8 	bl	800401c <HAL_I2C_Mem_Write>
 800068c:	4603      	mov	r3, r0
 800068e:	75fb      	strb	r3, [r7, #23]
	if(ret != HAL_OK){
 8000690:	7dfb      	ldrb	r3, [r7, #23]
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <write+0x3a>
		return ret;			//error check
 8000696:	7dfb      	ldrb	r3, [r7, #23]
 8000698:	e000      	b.n	800069c <write+0x3c>
	}

	return HAL_OK;
 800069a:	2300      	movs	r3, #0
}
 800069c:	4618      	mov	r0, r3
 800069e:	3718      	adds	r7, #24
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}

080006a4 <read>:
 * dev : device
 * reg : register to read from
 * data : stores what was read
 */
HAL_StatusTypeDef read( BH1790GLC *dev, uint8_t reg, uint8_t *data)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b08a      	sub	sp, #40	; 0x28
 80006a8:	af04      	add	r7, sp, #16
 80006aa:	60f8      	str	r0, [r7, #12]
 80006ac:	460b      	mov	r3, r1
 80006ae:	607a      	str	r2, [r7, #4]
 80006b0:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef ret;

	ret = HAL_I2C_Mem_Read(dev->i2cHandle, (BH1790GLC_DEVICE_ADDRESS<<1), reg, 1, data, 1, HAL_MAX_DELAY);
 80006b2:	68fb      	ldr	r3, [r7, #12]
 80006b4:	6818      	ldr	r0, [r3, #0]
 80006b6:	7afb      	ldrb	r3, [r7, #11]
 80006b8:	b29a      	uxth	r2, r3
 80006ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80006be:	9302      	str	r3, [sp, #8]
 80006c0:	2301      	movs	r3, #1
 80006c2:	9301      	str	r3, [sp, #4]
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	9300      	str	r3, [sp, #0]
 80006c8:	2301      	movs	r3, #1
 80006ca:	21b6      	movs	r1, #182	; 0xb6
 80006cc:	f003 fdba 	bl	8004244 <HAL_I2C_Mem_Read>
 80006d0:	4603      	mov	r3, r0
 80006d2:	75fb      	strb	r3, [r7, #23]
	if(ret != HAL_OK){
 80006d4:	7dfb      	ldrb	r3, [r7, #23]
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <read+0x3a>
		return ret;			//error check
 80006da:	7dfb      	ldrb	r3, [r7, #23]
 80006dc:	e000      	b.n	80006e0 <read+0x3c>
	}


	return HAL_OK;
 80006de:	2300      	movs	r3, #0
}
 80006e0:	4618      	mov	r0, r3
 80006e2:	3718      	adds	r7, #24
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}

080006e8 <many_reads>:
 * reg : register to read from
 * data : stores what was read
 * length : number of registers to read (in bytes)
 */
HAL_StatusTypeDef many_reads( BH1790GLC *dev, uint8_t reg, uint8_t *data, uint8_t length )
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b08a      	sub	sp, #40	; 0x28
 80006ec:	af04      	add	r7, sp, #16
 80006ee:	60f8      	str	r0, [r7, #12]
 80006f0:	607a      	str	r2, [r7, #4]
 80006f2:	461a      	mov	r2, r3
 80006f4:	460b      	mov	r3, r1
 80006f6:	72fb      	strb	r3, [r7, #11]
 80006f8:	4613      	mov	r3, r2
 80006fa:	72bb      	strb	r3, [r7, #10]
	HAL_StatusTypeDef ret;

	ret = HAL_I2C_Mem_Read(dev->i2cHandle, (BH1790GLC_DEVICE_ADDRESS<<1), reg, 1, data, length, HAL_MAX_DELAY);
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	6818      	ldr	r0, [r3, #0]
 8000700:	7afb      	ldrb	r3, [r7, #11]
 8000702:	b29a      	uxth	r2, r3
 8000704:	7abb      	ldrb	r3, [r7, #10]
 8000706:	b29b      	uxth	r3, r3
 8000708:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800070c:	9102      	str	r1, [sp, #8]
 800070e:	9301      	str	r3, [sp, #4]
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	9300      	str	r3, [sp, #0]
 8000714:	2301      	movs	r3, #1
 8000716:	21b6      	movs	r1, #182	; 0xb6
 8000718:	f003 fd94 	bl	8004244 <HAL_I2C_Mem_Read>
 800071c:	4603      	mov	r3, r0
 800071e:	75fb      	strb	r3, [r7, #23]
	if(ret != HAL_OK){
 8000720:	7dfb      	ldrb	r3, [r7, #23]
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <many_reads+0x42>
		return ret;			//error check
 8000726:	7dfb      	ldrb	r3, [r7, #23]
 8000728:	e000      	b.n	800072c <many_reads+0x44>
	}

	return HAL_OK;
 800072a:	2300      	movs	r3, #0
}
 800072c:	4618      	mov	r0, r3
 800072e:	3718      	adds	r7, #24
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}

08000734 <ICM_readBytes>:
 *
 * SPI abstraction
 *
 */
void ICM_readBytes(ICM20948 *dev, uint8_t reg, uint8_t *pData, uint16_t Size) // ***
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b084      	sub	sp, #16
 8000738:	af00      	add	r7, sp, #0
 800073a:	60f8      	str	r0, [r7, #12]
 800073c:	607a      	str	r2, [r7, #4]
 800073e:	461a      	mov	r2, r3
 8000740:	460b      	mov	r3, r1
 8000742:	72fb      	strb	r3, [r7, #11]
 8000744:	4613      	mov	r3, r2
 8000746:	813b      	strh	r3, [r7, #8]
	reg = reg | 0x80;
 8000748:	7afb      	ldrb	r3, [r7, #11]
 800074a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800074e:	b2db      	uxtb	r3, r3
 8000750:	72fb      	strb	r3, [r7, #11]
	HAL_GPIO_WritePin(ICM_CS_GPIO_Port, ICM_CS_Pin, GPIO_PIN_RESET);
 8000752:	2200      	movs	r2, #0
 8000754:	2108      	movs	r1, #8
 8000756:	480d      	ldr	r0, [pc, #52]	; (800078c <ICM_readBytes+0x58>)
 8000758:	f003 fb94 	bl	8003e84 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_DMA(dev->spiHandle, &reg, 1);
 800075c:	68fb      	ldr	r3, [r7, #12]
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	f107 010b 	add.w	r1, r7, #11
 8000764:	2201      	movs	r2, #1
 8000766:	4618      	mov	r0, r3
 8000768:	f006 fe30 	bl	80073cc <HAL_SPI_Transmit_DMA>
	HAL_SPI_Receive_DMA(dev->spiHandle, pData, Size);
 800076c:	68fb      	ldr	r3, [r7, #12]
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	893a      	ldrh	r2, [r7, #8]
 8000772:	6879      	ldr	r1, [r7, #4]
 8000774:	4618      	mov	r0, r3
 8000776:	f006 ff1d 	bl	80075b4 <HAL_SPI_Receive_DMA>
	HAL_GPIO_WritePin(ICM_CS_GPIO_Port, ICM_CS_Pin, GPIO_PIN_SET);
 800077a:	2201      	movs	r2, #1
 800077c:	2108      	movs	r1, #8
 800077e:	4803      	ldr	r0, [pc, #12]	; (800078c <ICM_readBytes+0x58>)
 8000780:	f003 fb80 	bl	8003e84 <HAL_GPIO_WritePin>
}
 8000784:	bf00      	nop
 8000786:	3710      	adds	r7, #16
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	48000400 	.word	0x48000400

08000790 <ICM_ReadOneByte>:
	HAL_GPIO_WritePin(ICM_CS_GPIO_Port, ICM_CS_Pin, GPIO_PIN_SET);

}

void ICM_ReadOneByte(ICM20948 *dev, uint8_t reg, uint8_t* pData) // ***
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b084      	sub	sp, #16
 8000794:	af00      	add	r7, sp, #0
 8000796:	60f8      	str	r0, [r7, #12]
 8000798:	460b      	mov	r3, r1
 800079a:	607a      	str	r2, [r7, #4]
 800079c:	72fb      	strb	r3, [r7, #11]
	reg = reg | 0x80;
 800079e:	7afb      	ldrb	r3, [r7, #11]
 80007a0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80007a4:	b2db      	uxtb	r3, r3
 80007a6:	72fb      	strb	r3, [r7, #11]
	HAL_GPIO_WritePin(ICM_CS_GPIO_Port, ICM_CS_Pin, GPIO_PIN_RESET);
 80007a8:	2200      	movs	r2, #0
 80007aa:	2108      	movs	r1, #8
 80007ac:	4816      	ldr	r0, [pc, #88]	; (8000808 <ICM_ReadOneByte+0x78>)
 80007ae:	f003 fb69 	bl	8003e84 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_DMA(dev->spiHandle, &reg, 1);
 80007b2:	68fb      	ldr	r3, [r7, #12]
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	f107 010b 	add.w	r1, r7, #11
 80007ba:	2201      	movs	r2, #1
 80007bc:	4618      	mov	r0, r3
 80007be:	f006 fe05 	bl	80073cc <HAL_SPI_Transmit_DMA>
	while (HAL_SPI_GetState(dev->spiHandle) != HAL_SPI_STATE_READY)
 80007c2:	bf00      	nop
 80007c4:	68fb      	ldr	r3, [r7, #12]
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	4618      	mov	r0, r3
 80007ca:	f007 fae9 	bl	8007da0 <HAL_SPI_GetState>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b01      	cmp	r3, #1
 80007d2:	d1f7      	bne.n	80007c4 <ICM_ReadOneByte+0x34>
		;
	HAL_SPI_Receive_DMA(dev->spiHandle, pData, 1);
 80007d4:	68fb      	ldr	r3, [r7, #12]
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	2201      	movs	r2, #1
 80007da:	6879      	ldr	r1, [r7, #4]
 80007dc:	4618      	mov	r0, r3
 80007de:	f006 fee9 	bl	80075b4 <HAL_SPI_Receive_DMA>
	while (HAL_SPI_GetState(dev->spiHandle) != HAL_SPI_STATE_READY)
 80007e2:	bf00      	nop
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	4618      	mov	r0, r3
 80007ea:	f007 fad9 	bl	8007da0 <HAL_SPI_GetState>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b01      	cmp	r3, #1
 80007f2:	d1f7      	bne.n	80007e4 <ICM_ReadOneByte+0x54>
		;
	HAL_GPIO_WritePin(ICM_CS_GPIO_Port, ICM_CS_Pin, GPIO_PIN_SET);
 80007f4:	2201      	movs	r2, #1
 80007f6:	2108      	movs	r1, #8
 80007f8:	4803      	ldr	r0, [pc, #12]	; (8000808 <ICM_ReadOneByte+0x78>)
 80007fa:	f003 fb43 	bl	8003e84 <HAL_GPIO_WritePin>
}
 80007fe:	bf00      	nop
 8000800:	3710      	adds	r7, #16
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	48000400 	.word	0x48000400

0800080c <ICM_WriteOneByte>:

void ICM_WriteOneByte(ICM20948 *dev, uint8_t reg, uint8_t Data) // ***
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
 8000814:	460b      	mov	r3, r1
 8000816:	70fb      	strb	r3, [r7, #3]
 8000818:	4613      	mov	r3, r2
 800081a:	70bb      	strb	r3, [r7, #2]
	reg = reg & 0x7F;
 800081c:	78fb      	ldrb	r3, [r7, #3]
 800081e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000822:	b2db      	uxtb	r3, r3
 8000824:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(ICM_CS_GPIO_Port, ICM_CS_Pin, GPIO_PIN_RESET);	//set CS pin low
 8000826:	2200      	movs	r2, #0
 8000828:	2108      	movs	r1, #8
 800082a:	480d      	ldr	r0, [pc, #52]	; (8000860 <ICM_WriteOneByte+0x54>)
 800082c:	f003 fb2a 	bl	8003e84 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_DMA(dev->spiHandle, &reg, 1);
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	1cf9      	adds	r1, r7, #3
 8000836:	2201      	movs	r2, #1
 8000838:	4618      	mov	r0, r3
 800083a:	f006 fdc7 	bl	80073cc <HAL_SPI_Transmit_DMA>
	HAL_SPI_Transmit_DMA(dev->spiHandle, &Data, 1);
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	1cb9      	adds	r1, r7, #2
 8000844:	2201      	movs	r2, #1
 8000846:	4618      	mov	r0, r3
 8000848:	f006 fdc0 	bl	80073cc <HAL_SPI_Transmit_DMA>
	HAL_GPIO_WritePin(ICM_CS_GPIO_Port, ICM_CS_Pin, GPIO_PIN_SET);		//set CS pin high
 800084c:	2201      	movs	r2, #1
 800084e:	2108      	movs	r1, #8
 8000850:	4803      	ldr	r0, [pc, #12]	; (8000860 <ICM_WriteOneByte+0x54>)
 8000852:	f003 fb17 	bl	8003e84 <HAL_GPIO_WritePin>
}
 8000856:	bf00      	nop
 8000858:	3708      	adds	r7, #8
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	48000400 	.word	0x48000400

08000864 <i2c_Mag_write>:
 *
 * AUX I2C abstraction for magnetometer
 *
 */
void i2c_Mag_write(ICM20948 *dev, uint8_t reg,uint8_t value)
  {
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
 800086c:	460b      	mov	r3, r1
 800086e:	70fb      	strb	r3, [r7, #3]
 8000870:	4613      	mov	r3, r2
 8000872:	70bb      	strb	r3, [r7, #2]
  	ICM_WriteOneByte(dev, 0x7F, 0x30);
 8000874:	2230      	movs	r2, #48	; 0x30
 8000876:	217f      	movs	r1, #127	; 0x7f
 8000878:	6878      	ldr	r0, [r7, #4]
 800087a:	f7ff ffc7 	bl	800080c <ICM_WriteOneByte>

  	HAL_Delay(1);
 800087e:	2001      	movs	r0, #1
 8000880:	f000 fd77 	bl	8001372 <HAL_Delay>
  	ICM_WriteOneByte(dev, 0x03 ,0x0C);//mode: write
 8000884:	220c      	movs	r2, #12
 8000886:	2103      	movs	r1, #3
 8000888:	6878      	ldr	r0, [r7, #4]
 800088a:	f7ff ffbf 	bl	800080c <ICM_WriteOneByte>

  	HAL_Delay(1);
 800088e:	2001      	movs	r0, #1
 8000890:	f000 fd6f 	bl	8001372 <HAL_Delay>
  	ICM_WriteOneByte(dev, 0x04 ,reg);//set reg addr
 8000894:	78fb      	ldrb	r3, [r7, #3]
 8000896:	461a      	mov	r2, r3
 8000898:	2104      	movs	r1, #4
 800089a:	6878      	ldr	r0, [r7, #4]
 800089c:	f7ff ffb6 	bl	800080c <ICM_WriteOneByte>

  	HAL_Delay(1);
 80008a0:	2001      	movs	r0, #1
 80008a2:	f000 fd66 	bl	8001372 <HAL_Delay>
  	ICM_WriteOneByte(dev, 0x06 ,value);//send value
 80008a6:	78bb      	ldrb	r3, [r7, #2]
 80008a8:	461a      	mov	r2, r3
 80008aa:	2106      	movs	r1, #6
 80008ac:	6878      	ldr	r0, [r7, #4]
 80008ae:	f7ff ffad 	bl	800080c <ICM_WriteOneByte>

  	HAL_Delay(1);
 80008b2:	2001      	movs	r0, #1
 80008b4:	f000 fd5d 	bl	8001372 <HAL_Delay>
  }
 80008b8:	bf00      	nop
 80008ba:	3708      	adds	r7, #8
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}

080008c0 <ICM_Mag_Read>:

  static uint8_t ICM_Mag_Read(ICM20948 *dev, uint8_t reg)
  {
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b084      	sub	sp, #16
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
 80008c8:	460b      	mov	r3, r1
 80008ca:	70fb      	strb	r3, [r7, #3]
  	uint8_t  Data;
  	ICM_WriteOneByte(dev, 0x7F, 0x30);
 80008cc:	2230      	movs	r2, #48	; 0x30
 80008ce:	217f      	movs	r1, #127	; 0x7f
 80008d0:	6878      	ldr	r0, [r7, #4]
 80008d2:	f7ff ff9b 	bl	800080c <ICM_WriteOneByte>
    HAL_Delay(1);
 80008d6:	2001      	movs	r0, #1
 80008d8:	f000 fd4b 	bl	8001372 <HAL_Delay>
  	ICM_WriteOneByte(dev, 0x03 ,0x0C|0x80);
 80008dc:	228c      	movs	r2, #140	; 0x8c
 80008de:	2103      	movs	r1, #3
 80008e0:	6878      	ldr	r0, [r7, #4]
 80008e2:	f7ff ff93 	bl	800080c <ICM_WriteOneByte>
    HAL_Delay(1);
 80008e6:	2001      	movs	r0, #1
 80008e8:	f000 fd43 	bl	8001372 <HAL_Delay>
  	ICM_WriteOneByte(dev, 0x04 ,reg);// set reg addr
 80008ec:	78fb      	ldrb	r3, [r7, #3]
 80008ee:	461a      	mov	r2, r3
 80008f0:	2104      	movs	r1, #4
 80008f2:	6878      	ldr	r0, [r7, #4]
 80008f4:	f7ff ff8a 	bl	800080c <ICM_WriteOneByte>
    HAL_Delay(1);
 80008f8:	2001      	movs	r0, #1
 80008fa:	f000 fd3a 	bl	8001372 <HAL_Delay>
  	ICM_WriteOneByte(dev, 0x06 ,0xff);//read
 80008fe:	22ff      	movs	r2, #255	; 0xff
 8000900:	2106      	movs	r1, #6
 8000902:	6878      	ldr	r0, [r7, #4]
 8000904:	f7ff ff82 	bl	800080c <ICM_WriteOneByte>
  	HAL_Delay(1);
 8000908:	2001      	movs	r0, #1
 800090a:	f000 fd32 	bl	8001372 <HAL_Delay>
  	ICM_WriteOneByte(dev, 0x7F, 0x00);
 800090e:	2200      	movs	r2, #0
 8000910:	217f      	movs	r1, #127	; 0x7f
 8000912:	6878      	ldr	r0, [r7, #4]
 8000914:	f7ff ff7a 	bl	800080c <ICM_WriteOneByte>
  	ICM_ReadOneByte(dev, 0x3B,&Data);
 8000918:	f107 030f 	add.w	r3, r7, #15
 800091c:	461a      	mov	r2, r3
 800091e:	213b      	movs	r1, #59	; 0x3b
 8000920:	6878      	ldr	r0, [r7, #4]
 8000922:	f7ff ff35 	bl	8000790 <ICM_ReadOneByte>
    HAL_Delay(1);
 8000926:	2001      	movs	r0, #1
 8000928:	f000 fd23 	bl	8001372 <HAL_Delay>
  	return Data;
 800092c:	7bfb      	ldrb	r3, [r7, #15]
  }
 800092e:	4618      	mov	r0, r3
 8000930:	3710      	adds	r7, #16
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}

08000936 <ICM_ReadMagData>:
/*
 *
 * Read magnetometer
 *
 */
void ICM_ReadMagData(ICM20948 *dev, int16_t magn[3]) {
 8000936:	b580      	push	{r7, lr}
 8000938:	b086      	sub	sp, #24
 800093a:	af00      	add	r7, sp, #0
 800093c:	6078      	str	r0, [r7, #4]
 800093e:	6039      	str	r1, [r7, #0]
	uint8_t mag_buffer[10];

	      mag_buffer[0] =ICM_Mag_Read(dev, 0x01);
 8000940:	2101      	movs	r1, #1
 8000942:	6878      	ldr	r0, [r7, #4]
 8000944:	f7ff ffbc 	bl	80008c0 <ICM_Mag_Read>
 8000948:	4603      	mov	r3, r0
 800094a:	733b      	strb	r3, [r7, #12]

	      mag_buffer[1] =ICM_Mag_Read(dev, 0x11);
 800094c:	2111      	movs	r1, #17
 800094e:	6878      	ldr	r0, [r7, #4]
 8000950:	f7ff ffb6 	bl	80008c0 <ICM_Mag_Read>
 8000954:	4603      	mov	r3, r0
 8000956:	737b      	strb	r3, [r7, #13]
	  	  mag_buffer[2] =ICM_Mag_Read(dev, 0x12);
 8000958:	2112      	movs	r1, #18
 800095a:	6878      	ldr	r0, [r7, #4]
 800095c:	f7ff ffb0 	bl	80008c0 <ICM_Mag_Read>
 8000960:	4603      	mov	r3, r0
 8000962:	73bb      	strb	r3, [r7, #14]
	  	  magn[0]=mag_buffer[1]|mag_buffer[2]<<8;
 8000964:	7b7b      	ldrb	r3, [r7, #13]
 8000966:	b21a      	sxth	r2, r3
 8000968:	7bbb      	ldrb	r3, [r7, #14]
 800096a:	021b      	lsls	r3, r3, #8
 800096c:	b21b      	sxth	r3, r3
 800096e:	4313      	orrs	r3, r2
 8000970:	b21a      	sxth	r2, r3
 8000972:	683b      	ldr	r3, [r7, #0]
 8000974:	801a      	strh	r2, [r3, #0]
	    	mag_buffer[3] =ICM_Mag_Read(dev, 0x13);
 8000976:	2113      	movs	r1, #19
 8000978:	6878      	ldr	r0, [r7, #4]
 800097a:	f7ff ffa1 	bl	80008c0 <ICM_Mag_Read>
 800097e:	4603      	mov	r3, r0
 8000980:	73fb      	strb	r3, [r7, #15]
	      mag_buffer[4] =ICM_Mag_Read(dev, 0x14);
 8000982:	2114      	movs	r1, #20
 8000984:	6878      	ldr	r0, [r7, #4]
 8000986:	f7ff ff9b 	bl	80008c0 <ICM_Mag_Read>
 800098a:	4603      	mov	r3, r0
 800098c:	743b      	strb	r3, [r7, #16]
	    	magn[1]=mag_buffer[3]|mag_buffer[4]<<8;
 800098e:	7bfb      	ldrb	r3, [r7, #15]
 8000990:	b219      	sxth	r1, r3
 8000992:	7c3b      	ldrb	r3, [r7, #16]
 8000994:	021b      	lsls	r3, r3, #8
 8000996:	b21a      	sxth	r2, r3
 8000998:	683b      	ldr	r3, [r7, #0]
 800099a:	3302      	adds	r3, #2
 800099c:	430a      	orrs	r2, r1
 800099e:	b212      	sxth	r2, r2
 80009a0:	801a      	strh	r2, [r3, #0]
	  	 	mag_buffer[5] =ICM_Mag_Read(dev, 0x15);
 80009a2:	2115      	movs	r1, #21
 80009a4:	6878      	ldr	r0, [r7, #4]
 80009a6:	f7ff ff8b 	bl	80008c0 <ICM_Mag_Read>
 80009aa:	4603      	mov	r3, r0
 80009ac:	747b      	strb	r3, [r7, #17]
	      mag_buffer[6] =ICM_Mag_Read(dev, 0x16);
 80009ae:	2116      	movs	r1, #22
 80009b0:	6878      	ldr	r0, [r7, #4]
 80009b2:	f7ff ff85 	bl	80008c0 <ICM_Mag_Read>
 80009b6:	4603      	mov	r3, r0
 80009b8:	74bb      	strb	r3, [r7, #18]
	  		magn[2]=mag_buffer[5]|mag_buffer[6]<<8;
 80009ba:	7c7b      	ldrb	r3, [r7, #17]
 80009bc:	b219      	sxth	r1, r3
 80009be:	7cbb      	ldrb	r3, [r7, #18]
 80009c0:	021b      	lsls	r3, r3, #8
 80009c2:	b21a      	sxth	r2, r3
 80009c4:	683b      	ldr	r3, [r7, #0]
 80009c6:	3304      	adds	r3, #4
 80009c8:	430a      	orrs	r2, r1
 80009ca:	b212      	sxth	r2, r2
 80009cc:	801a      	strh	r2, [r3, #0]

	     	i2c_Mag_write(dev, 0x31,0x01);
 80009ce:	2201      	movs	r2, #1
 80009d0:	2131      	movs	r1, #49	; 0x31
 80009d2:	6878      	ldr	r0, [r7, #4]
 80009d4:	f7ff ff46 	bl	8000864 <i2c_Mag_write>
}
 80009d8:	bf00      	nop
 80009da:	3718      	adds	r7, #24
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}

080009e0 <ICM_PowerOn>:
/*
 *
 * Sequence to setup ICM290948 as early as possible after power on
 *
 */
void ICM_PowerOn(ICM20948 *dev, SPI_HandleTypeDef *spiHandle) {
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b0b6      	sub	sp, #216	; 0xd8
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
 80009e8:	6039      	str	r1, [r7, #0]

	dev->spiHandle = spiHandle;
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	683a      	ldr	r2, [r7, #0]
 80009ee:	601a      	str	r2, [r3, #0]

	dev->accel_data[0] = 0;
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	2200      	movs	r2, #0
 80009f4:	809a      	strh	r2, [r3, #4]
	dev->accel_data[1] = 0;
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	2200      	movs	r2, #0
 80009fa:	80da      	strh	r2, [r3, #6]
	dev->accel_data[2] = 0;
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	2200      	movs	r2, #0
 8000a00:	811a      	strh	r2, [r3, #8]

	dev->gyro_data[0] = 0;
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	2200      	movs	r2, #0
 8000a06:	815a      	strh	r2, [r3, #10]
	dev->gyro_data[1] = 0;
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	819a      	strh	r2, [r3, #12]
	dev->gyro_data[2] = 0;
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	2200      	movs	r2, #0
 8000a12:	81da      	strh	r2, [r3, #14]

	dev->mag_data[0] = 0;
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	2200      	movs	r2, #0
 8000a18:	821a      	strh	r2, [r3, #16]
	dev->mag_data[1] = 0;
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	825a      	strh	r2, [r3, #18]
	dev->mag_data[2] = 0;
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	2200      	movs	r2, #0
 8000a24:	829a      	strh	r2, [r3, #20]

	char uart_buffer[200];
	uint8_t whoami = 0xEA;
 8000a26:	23ea      	movs	r3, #234	; 0xea
 8000a28:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
	uint8_t test = ICM_WHOAMI(dev);
 8000a2c:	6878      	ldr	r0, [r7, #4]
 8000a2e:	f000 f96b 	bl	8000d08 <ICM_WHOAMI>
 8000a32:	4603      	mov	r3, r0
 8000a34:	f887 30d6 	strb.w	r3, [r7, #214]	; 0xd6
	//if (test == whoami) {
		ICM_CSHigh();
 8000a38:	f000 f930 	bl	8000c9c <ICM_CSHigh>
		HAL_Delay(10);
 8000a3c:	200a      	movs	r0, #10
 8000a3e:	f000 fc98 	bl	8001372 <HAL_Delay>
		ICM_SelectBank(dev, USER_BANK_0);
 8000a42:	2100      	movs	r1, #0
 8000a44:	6878      	ldr	r0, [r7, #4]
 8000a46:	f000 f90b 	bl	8000c60 <ICM_SelectBank>
		HAL_Delay(10);
 8000a4a:	200a      	movs	r0, #10
 8000a4c:	f000 fc91 	bl	8001372 <HAL_Delay>
		ICM_Disable_I2C(dev);
 8000a50:	6878      	ldr	r0, [r7, #4]
 8000a52:	f000 f915 	bl	8000c80 <ICM_Disable_I2C>
		HAL_Delay(10);
 8000a56:	200a      	movs	r0, #10
 8000a58:	f000 fc8b 	bl	8001372 <HAL_Delay>
		ICM_SetClock(dev, (uint8_t)CLK_BEST_AVAIL);
 8000a5c:	2101      	movs	r1, #1
 8000a5e:	6878      	ldr	r0, [r7, #4]
 8000a60:	f000 f928 	bl	8000cb4 <ICM_SetClock>
		HAL_Delay(10);
 8000a64:	200a      	movs	r0, #10
 8000a66:	f000 fc84 	bl	8001372 <HAL_Delay>
		ICM_AccelGyroOff(dev);
 8000a6a:	6878      	ldr	r0, [r7, #4]
 8000a6c:	f000 f932 	bl	8000cd4 <ICM_AccelGyroOff>
		HAL_Delay(20);
 8000a70:	2014      	movs	r0, #20
 8000a72:	f000 fc7e 	bl	8001372 <HAL_Delay>
		ICM_AccelGyroOn(dev);
 8000a76:	6878      	ldr	r0, [r7, #4]
 8000a78:	f000 f939 	bl	8000cee <ICM_AccelGyroOn>
		HAL_Delay(10);
 8000a7c:	200a      	movs	r0, #10
 8000a7e:	f000 fc78 	bl	8001372 <HAL_Delay>
		ICM_Initialize(dev);
 8000a82:	6878      	ldr	r0, [r7, #4]
 8000a84:	f000 f804 	bl	8000a90 <ICM_Initialize>
	//} else {
		//sprintf(uart_buffer, "Failed WHO_AM_I.  %i is not 0xEA\r\n", test);
		//HAL_UART_Transmit_DMA(UART_BUS, (uint8_t*) uart_buffer, strlen(uart_buffer));
		//HAL_Delay(100);
	//}
}
 8000a88:	bf00      	nop
 8000a8a:	37d8      	adds	r7, #216	; 0xd8
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}

08000a90 <ICM_Initialize>:
uint16_t ICM_Initialize(ICM20948 *dev) {
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
		ICM_SelectBank(dev, USER_BANK_2);
 8000a98:	2120      	movs	r1, #32
 8000a9a:	6878      	ldr	r0, [r7, #4]
 8000a9c:	f000 f8e0 	bl	8000c60 <ICM_SelectBank>
		HAL_Delay(20);
 8000aa0:	2014      	movs	r0, #20
 8000aa2:	f000 fc66 	bl	8001372 <HAL_Delay>
		ICM_SetGyroRateLPF(dev, GYRO_RATE_250, GYRO_LPF_17HZ);
 8000aa6:	2229      	movs	r2, #41	; 0x29
 8000aa8:	2100      	movs	r1, #0
 8000aaa:	6878      	ldr	r0, [r7, #4]
 8000aac:	f000 f93e 	bl	8000d2c <ICM_SetGyroRateLPF>
		HAL_Delay(10);
 8000ab0:	200a      	movs	r0, #10
 8000ab2:	f000 fc5e 	bl	8001372 <HAL_Delay>

		// Set gyroscope sample rate to 100hz (0x0A) in GYRO_SMPLRT_DIV register (0x00)
		ICM_WriteOneByte(dev, 0x00, 0x0A);
 8000ab6:	220a      	movs	r2, #10
 8000ab8:	2100      	movs	r1, #0
 8000aba:	6878      	ldr	r0, [r7, #4]
 8000abc:	f7ff fea6 	bl	800080c <ICM_WriteOneByte>
		HAL_Delay(10);
 8000ac0:	200a      	movs	r0, #10
 8000ac2:	f000 fc56 	bl	8001372 <HAL_Delay>

		// Set accelerometer low pass filter to 136hz (0x11) and the rate to 8G (0x04) in register ACCEL_CONFIG (0x14)
		ICM_WriteOneByte(dev, 0x14, (0x04 | 0x11));
 8000ac6:	2215      	movs	r2, #21
 8000ac8:	2114      	movs	r1, #20
 8000aca:	6878      	ldr	r0, [r7, #4]
 8000acc:	f7ff fe9e 	bl	800080c <ICM_WriteOneByte>

		// Set accelerometer sample rate to 225hz (0x00) in ACCEL_SMPLRT_DIV_1 register (0x10)
		ICM_WriteOneByte(dev, 0x10, 0x00);
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	2110      	movs	r1, #16
 8000ad4:	6878      	ldr	r0, [r7, #4]
 8000ad6:	f7ff fe99 	bl	800080c <ICM_WriteOneByte>
		HAL_Delay(10);
 8000ada:	200a      	movs	r0, #10
 8000adc:	f000 fc49 	bl	8001372 <HAL_Delay>

		// Set accelerometer sample rate to 100 hz (0x0A) in ACCEL_SMPLRT_DIV_2 register (0x11)
		ICM_WriteOneByte(dev, 0x11, 0x0A);
 8000ae0:	220a      	movs	r2, #10
 8000ae2:	2111      	movs	r1, #17
 8000ae4:	6878      	ldr	r0, [r7, #4]
 8000ae6:	f7ff fe91 	bl	800080c <ICM_WriteOneByte>
		HAL_Delay(10);
 8000aea:	200a      	movs	r0, #10
 8000aec:	f000 fc41 	bl	8001372 <HAL_Delay>

		ICM_SelectBank(dev, USER_BANK_2);
 8000af0:	2120      	movs	r1, #32
 8000af2:	6878      	ldr	r0, [r7, #4]
 8000af4:	f000 f8b4 	bl	8000c60 <ICM_SelectBank>
		HAL_Delay(20);
 8000af8:	2014      	movs	r0, #20
 8000afa:	f000 fc3a 	bl	8001372 <HAL_Delay>

		// Configure AUX_I2C Magnetometer (onboard ICM-20948)
		ICM_WriteOneByte(dev, 0x7F, 0x00); // Select user bank 0
 8000afe:	2200      	movs	r2, #0
 8000b00:	217f      	movs	r1, #127	; 0x7f
 8000b02:	6878      	ldr	r0, [r7, #4]
 8000b04:	f7ff fe82 	bl	800080c <ICM_WriteOneByte>
		ICM_WriteOneByte(dev, 0x0F, 0x30); // INT Pin / Bypass Enable Configuration
 8000b08:	2230      	movs	r2, #48	; 0x30
 8000b0a:	210f      	movs	r1, #15
 8000b0c:	6878      	ldr	r0, [r7, #4]
 8000b0e:	f7ff fe7d 	bl	800080c <ICM_WriteOneByte>
		ICM_WriteOneByte(dev, 0x03, 0x20); // I2C_MST_EN
 8000b12:	2220      	movs	r2, #32
 8000b14:	2103      	movs	r1, #3
 8000b16:	6878      	ldr	r0, [r7, #4]
 8000b18:	f7ff fe78 	bl	800080c <ICM_WriteOneByte>
		ICM_WriteOneByte(dev, 0x7F, 0x30); // Select user bank 3
 8000b1c:	2230      	movs	r2, #48	; 0x30
 8000b1e:	217f      	movs	r1, #127	; 0x7f
 8000b20:	6878      	ldr	r0, [r7, #4]
 8000b22:	f7ff fe73 	bl	800080c <ICM_WriteOneByte>
		ICM_WriteOneByte(dev, 0x01, 0x4D); // I2C Master mode and Speed 400 kHz
 8000b26:	224d      	movs	r2, #77	; 0x4d
 8000b28:	2101      	movs	r1, #1
 8000b2a:	6878      	ldr	r0, [r7, #4]
 8000b2c:	f7ff fe6e 	bl	800080c <ICM_WriteOneByte>
		ICM_WriteOneByte(dev, 0x02, 0x01); // I2C_SLV0 _DLY_ enable
 8000b30:	2201      	movs	r2, #1
 8000b32:	2102      	movs	r1, #2
 8000b34:	6878      	ldr	r0, [r7, #4]
 8000b36:	f7ff fe69 	bl	800080c <ICM_WriteOneByte>
		ICM_WriteOneByte(dev, 0x05, 0x81); // enable IIC	and EXT_SENS_DATA==1 Byte
 8000b3a:	2281      	movs	r2, #129	; 0x81
 8000b3c:	2105      	movs	r1, #5
 8000b3e:	6878      	ldr	r0, [r7, #4]
 8000b40:	f7ff fe64 	bl	800080c <ICM_WriteOneByte>

		// Initialize magnetometer
		i2c_Mag_write(dev, 0x32, 0x01); // Reset AK8963
 8000b44:	2201      	movs	r2, #1
 8000b46:	2132      	movs	r1, #50	; 0x32
 8000b48:	6878      	ldr	r0, [r7, #4]
 8000b4a:	f7ff fe8b 	bl	8000864 <i2c_Mag_write>
		HAL_Delay(1000);
 8000b4e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b52:	f000 fc0e 	bl	8001372 <HAL_Delay>
		i2c_Mag_write(dev, 0x31, 0x02); // use i2c to set AK8963 working on Continuous measurement mode1 & 16-bit output
 8000b56:	2202      	movs	r2, #2
 8000b58:	2131      	movs	r1, #49	; 0x31
 8000b5a:	6878      	ldr	r0, [r7, #4]
 8000b5c:	f7ff fe82 	bl	8000864 <i2c_Mag_write>

		return 1337;
 8000b60:	f240 5339 	movw	r3, #1337	; 0x539
	}
 8000b64:	4618      	mov	r0, r3
 8000b66:	3708      	adds	r7, #8
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}

08000b6c <ICM_ReadAccelGyroData>:

void ICM_ReadAccelGyroData(ICM20948 *dev) {
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b086      	sub	sp, #24
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
	uint8_t raw_data[12];
	ICM_readBytes(dev, 0x2D, raw_data, 12);
 8000b74:	f107 020c 	add.w	r2, r7, #12
 8000b78:	230c      	movs	r3, #12
 8000b7a:	212d      	movs	r1, #45	; 0x2d
 8000b7c:	6878      	ldr	r0, [r7, #4]
 8000b7e:	f7ff fdd9 	bl	8000734 <ICM_readBytes>

	dev->accel_data[0] = (raw_data[0] << 8) | raw_data[1];
 8000b82:	7b3b      	ldrb	r3, [r7, #12]
 8000b84:	021b      	lsls	r3, r3, #8
 8000b86:	b21a      	sxth	r2, r3
 8000b88:	7b7b      	ldrb	r3, [r7, #13]
 8000b8a:	b21b      	sxth	r3, r3
 8000b8c:	4313      	orrs	r3, r2
 8000b8e:	b21b      	sxth	r3, r3
 8000b90:	b29a      	uxth	r2, r3
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	809a      	strh	r2, [r3, #4]
	dev->accel_data[1] = (raw_data[2] << 8) | raw_data[3];
 8000b96:	7bbb      	ldrb	r3, [r7, #14]
 8000b98:	021b      	lsls	r3, r3, #8
 8000b9a:	b21a      	sxth	r2, r3
 8000b9c:	7bfb      	ldrb	r3, [r7, #15]
 8000b9e:	b21b      	sxth	r3, r3
 8000ba0:	4313      	orrs	r3, r2
 8000ba2:	b21b      	sxth	r3, r3
 8000ba4:	b29a      	uxth	r2, r3
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	80da      	strh	r2, [r3, #6]
	dev->accel_data[2] = (raw_data[4] << 8) | raw_data[5];
 8000baa:	7c3b      	ldrb	r3, [r7, #16]
 8000bac:	021b      	lsls	r3, r3, #8
 8000bae:	b21a      	sxth	r2, r3
 8000bb0:	7c7b      	ldrb	r3, [r7, #17]
 8000bb2:	b21b      	sxth	r3, r3
 8000bb4:	4313      	orrs	r3, r2
 8000bb6:	b21b      	sxth	r3, r3
 8000bb8:	b29a      	uxth	r2, r3
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	811a      	strh	r2, [r3, #8]

	dev->gyro_data[0] = (raw_data[6] << 8) | raw_data[7];
 8000bbe:	7cbb      	ldrb	r3, [r7, #18]
 8000bc0:	021b      	lsls	r3, r3, #8
 8000bc2:	b21a      	sxth	r2, r3
 8000bc4:	7cfb      	ldrb	r3, [r7, #19]
 8000bc6:	b21b      	sxth	r3, r3
 8000bc8:	4313      	orrs	r3, r2
 8000bca:	b21b      	sxth	r3, r3
 8000bcc:	b29a      	uxth	r2, r3
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	815a      	strh	r2, [r3, #10]
	dev->gyro_data[1] = (raw_data[8] << 8) | raw_data[9];
 8000bd2:	7d3b      	ldrb	r3, [r7, #20]
 8000bd4:	021b      	lsls	r3, r3, #8
 8000bd6:	b21a      	sxth	r2, r3
 8000bd8:	7d7b      	ldrb	r3, [r7, #21]
 8000bda:	b21b      	sxth	r3, r3
 8000bdc:	4313      	orrs	r3, r2
 8000bde:	b21b      	sxth	r3, r3
 8000be0:	b29a      	uxth	r2, r3
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	819a      	strh	r2, [r3, #12]
	dev->gyro_data[2] = (raw_data[10] << 8) | raw_data[11];
 8000be6:	7dbb      	ldrb	r3, [r7, #22]
 8000be8:	021b      	lsls	r3, r3, #8
 8000bea:	b21a      	sxth	r2, r3
 8000bec:	7dfb      	ldrb	r3, [r7, #23]
 8000bee:	b21b      	sxth	r3, r3
 8000bf0:	4313      	orrs	r3, r2
 8000bf2:	b21b      	sxth	r3, r3
 8000bf4:	b29a      	uxth	r2, r3
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	81da      	strh	r2, [r3, #14]

	dev->accel_data[0] = dev->accel_data[0] / 8;
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	889b      	ldrh	r3, [r3, #4]
 8000bfe:	08db      	lsrs	r3, r3, #3
 8000c00:	b29a      	uxth	r2, r3
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	809a      	strh	r2, [r3, #4]
	dev->accel_data[1] = dev->accel_data[1] / 8;
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	88db      	ldrh	r3, [r3, #6]
 8000c0a:	08db      	lsrs	r3, r3, #3
 8000c0c:	b29a      	uxth	r2, r3
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	80da      	strh	r2, [r3, #6]
	dev->accel_data[2] = dev->accel_data[2] / 8;
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	891b      	ldrh	r3, [r3, #8]
 8000c16:	08db      	lsrs	r3, r3, #3
 8000c18:	b29a      	uxth	r2, r3
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	811a      	strh	r2, [r3, #8]

	dev->gyro_data[0] = dev->gyro_data[0] / 250;
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	895b      	ldrh	r3, [r3, #10]
 8000c22:	4a0e      	ldr	r2, [pc, #56]	; (8000c5c <ICM_ReadAccelGyroData+0xf0>)
 8000c24:	fba2 2303 	umull	r2, r3, r2, r3
 8000c28:	091b      	lsrs	r3, r3, #4
 8000c2a:	b29a      	uxth	r2, r3
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	815a      	strh	r2, [r3, #10]
	dev->gyro_data[1] = dev->gyro_data[1] / 250;
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	899b      	ldrh	r3, [r3, #12]
 8000c34:	4a09      	ldr	r2, [pc, #36]	; (8000c5c <ICM_ReadAccelGyroData+0xf0>)
 8000c36:	fba2 2303 	umull	r2, r3, r2, r3
 8000c3a:	091b      	lsrs	r3, r3, #4
 8000c3c:	b29a      	uxth	r2, r3
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	819a      	strh	r2, [r3, #12]
	dev->gyro_data[2] = dev->gyro_data[2] / 250;
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	89db      	ldrh	r3, [r3, #14]
 8000c46:	4a05      	ldr	r2, [pc, #20]	; (8000c5c <ICM_ReadAccelGyroData+0xf0>)
 8000c48:	fba2 2303 	umull	r2, r3, r2, r3
 8000c4c:	091b      	lsrs	r3, r3, #4
 8000c4e:	b29a      	uxth	r2, r3
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	81da      	strh	r2, [r3, #14]
}
 8000c54:	bf00      	nop
 8000c56:	3718      	adds	r7, #24
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	10624dd3 	.word	0x10624dd3

08000c60 <ICM_SelectBank>:
void ICM_SelectBank(ICM20948 *dev, uint8_t bank) {
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
 8000c68:	460b      	mov	r3, r1
 8000c6a:	70fb      	strb	r3, [r7, #3]
	ICM_WriteOneByte(dev, USER_BANK_SEL, bank);
 8000c6c:	78fb      	ldrb	r3, [r7, #3]
 8000c6e:	461a      	mov	r2, r3
 8000c70:	217f      	movs	r1, #127	; 0x7f
 8000c72:	6878      	ldr	r0, [r7, #4]
 8000c74:	f7ff fdca 	bl	800080c <ICM_WriteOneByte>
}
 8000c78:	bf00      	nop
 8000c7a:	3708      	adds	r7, #8
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}

08000c80 <ICM_Disable_I2C>:
void ICM_Disable_I2C(ICM20948 *dev) {
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
	ICM_WriteOneByte(dev, 0x03, 0x78);
 8000c88:	2278      	movs	r2, #120	; 0x78
 8000c8a:	2103      	movs	r1, #3
 8000c8c:	6878      	ldr	r0, [r7, #4]
 8000c8e:	f7ff fdbd 	bl	800080c <ICM_WriteOneByte>
}
 8000c92:	bf00      	nop
 8000c94:	3708      	adds	r7, #8
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
	...

08000c9c <ICM_CSHigh>:
void ICM_CSHigh(void) {
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ICM_CS_GPIO_Port, ICM_CS_Pin, SET);
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	2108      	movs	r1, #8
 8000ca4:	4802      	ldr	r0, [pc, #8]	; (8000cb0 <ICM_CSHigh+0x14>)
 8000ca6:	f003 f8ed 	bl	8003e84 <HAL_GPIO_WritePin>
}
 8000caa:	bf00      	nop
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	48000400 	.word	0x48000400

08000cb4 <ICM_SetClock>:
void ICM_CSLow(void) {
	HAL_GPIO_WritePin(ICM_CS_GPIO_Port, ICM_CS_Pin, RESET);
}
void ICM_SetClock(ICM20948 *dev, uint8_t clk) {
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
 8000cbc:	460b      	mov	r3, r1
 8000cbe:	70fb      	strb	r3, [r7, #3]
	ICM_WriteOneByte(dev, PWR_MGMT_1, clk);
 8000cc0:	78fb      	ldrb	r3, [r7, #3]
 8000cc2:	461a      	mov	r2, r3
 8000cc4:	2106      	movs	r1, #6
 8000cc6:	6878      	ldr	r0, [r7, #4]
 8000cc8:	f7ff fda0 	bl	800080c <ICM_WriteOneByte>
}
 8000ccc:	bf00      	nop
 8000cce:	3708      	adds	r7, #8
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}

08000cd4 <ICM_AccelGyroOff>:
void ICM_AccelGyroOff(ICM20948 *dev) {
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
	ICM_WriteOneByte(dev, PWR_MGMT_2, (0x38 | 0x07));
 8000cdc:	223f      	movs	r2, #63	; 0x3f
 8000cde:	2107      	movs	r1, #7
 8000ce0:	6878      	ldr	r0, [r7, #4]
 8000ce2:	f7ff fd93 	bl	800080c <ICM_WriteOneByte>
}
 8000ce6:	bf00      	nop
 8000ce8:	3708      	adds	r7, #8
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}

08000cee <ICM_AccelGyroOn>:
void ICM_AccelGyroOn(ICM20948 *dev) {
 8000cee:	b580      	push	{r7, lr}
 8000cf0:	b082      	sub	sp, #8
 8000cf2:	af00      	add	r7, sp, #0
 8000cf4:	6078      	str	r0, [r7, #4]
	ICM_WriteOneByte(dev, 0x07, (0x00 | 0x00));
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	2107      	movs	r1, #7
 8000cfa:	6878      	ldr	r0, [r7, #4]
 8000cfc:	f7ff fd86 	bl	800080c <ICM_WriteOneByte>
}
 8000d00:	bf00      	nop
 8000d02:	3708      	adds	r7, #8
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}

08000d08 <ICM_WHOAMI>:
uint8_t ICM_WHOAMI(ICM20948 *dev) {
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b084      	sub	sp, #16
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
	uint8_t spiData = 0x01;
 8000d10:	2301      	movs	r3, #1
 8000d12:	73fb      	strb	r3, [r7, #15]
	ICM_ReadOneByte(dev, 0x00, &spiData);
 8000d14:	f107 030f 	add.w	r3, r7, #15
 8000d18:	461a      	mov	r2, r3
 8000d1a:	2100      	movs	r1, #0
 8000d1c:	6878      	ldr	r0, [r7, #4]
 8000d1e:	f7ff fd37 	bl	8000790 <ICM_ReadOneByte>
	return spiData;
 8000d22:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d24:	4618      	mov	r0, r3
 8000d26:	3710      	adds	r7, #16
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}

08000d2c <ICM_SetGyroRateLPF>:
void ICM_SetGyroRateLPF(ICM20948 *dev, uint8_t rate, uint8_t lpf) {
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
 8000d34:	460b      	mov	r3, r1
 8000d36:	70fb      	strb	r3, [r7, #3]
 8000d38:	4613      	mov	r3, r2
 8000d3a:	70bb      	strb	r3, [r7, #2]
	ICM_WriteOneByte(dev, GYRO_CONFIG_1, (rate|lpf));
 8000d3c:	78fa      	ldrb	r2, [r7, #3]
 8000d3e:	78bb      	ldrb	r3, [r7, #2]
 8000d40:	4313      	orrs	r3, r2
 8000d42:	b2db      	uxtb	r3, r3
 8000d44:	461a      	mov	r2, r3
 8000d46:	2101      	movs	r1, #1
 8000d48:	6878      	ldr	r0, [r7, #4]
 8000d4a:	f7ff fd5f 	bl	800080c <ICM_WriteOneByte>
}
 8000d4e:	bf00      	nop
 8000d50:	3708      	adds	r7, #8
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
	...

08000d58 <APPD_EnableCPU2>:
/* USER CODE END APPD_Init */
  return;
}

void APPD_EnableCPU2( void )
{
 8000d58:	b5b0      	push	{r4, r5, r7, lr}
 8000d5a:	b088      	sub	sp, #32
 8000d5c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 8000d5e:	4b0b      	ldr	r3, [pc, #44]	; (8000d8c <APPD_EnableCPU2+0x34>)
 8000d60:	1d3c      	adds	r4, r7, #4
 8000d62:	461d      	mov	r5, r3
 8000d64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d68:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000d6c:	c403      	stmia	r4!, {r0, r1}
 8000d6e:	8022      	strh	r2, [r4, #0]
 8000d70:	3402      	adds	r4, #2
 8000d72:	0c13      	lsrs	r3, r2, #16
 8000d74:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 8000d76:	f00a f8f7 	bl	800af68 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 8000d7a:	1d3b      	adds	r3, r7, #4
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f009 fb92 	bl	800a4a6 <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 8000d82:	bf00      	nop
}
 8000d84:	3720      	adds	r7, #32
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bdb0      	pop	{r4, r5, r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	0800d6c4 	.word	0x0800d6c4

08000d90 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b083      	sub	sp, #12
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 8000d98:	4b07      	ldr	r3, [pc, #28]	; (8000db8 <LL_C2_PWR_SetPowerMode+0x28>)
 8000d9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000d9e:	f023 0207 	bic.w	r2, r3, #7
 8000da2:	4905      	ldr	r1, [pc, #20]	; (8000db8 <LL_C2_PWR_SetPowerMode+0x28>)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	4313      	orrs	r3, r2
 8000da8:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8000dac:	bf00      	nop
 8000dae:	370c      	adds	r7, #12
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr
 8000db8:	58000400 	.word	0x58000400

08000dbc <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b083      	sub	sp, #12
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000dc4:	4b06      	ldr	r3, [pc, #24]	; (8000de0 <LL_EXTI_EnableIT_32_63+0x24>)
 8000dc6:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8000dca:	4905      	ldr	r1, [pc, #20]	; (8000de0 <LL_EXTI_EnableIT_32_63+0x24>)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	4313      	orrs	r3, r2
 8000dd0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000dd4:	bf00      	nop
 8000dd6:	370c      	adds	r7, #12
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dde:	4770      	bx	lr
 8000de0:	58000800 	.word	0x58000800

08000de4 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b083      	sub	sp, #12
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8000dec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000df0:	4a0a      	ldr	r2, [pc, #40]	; (8000e1c <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8000df2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 8000df6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000dfa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000dfe:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	021b      	lsls	r3, r3, #8
 8000e06:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000e0a:	4313      	orrs	r3, r2
 8000e0c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 8000e10:	bf00      	nop
 8000e12:	370c      	adds	r7, #12
 8000e14:	46bd      	mov	sp, r7
 8000e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1a:	4770      	bx	lr
 8000e1c:	cafecafe 	.word	0xcafecafe

08000e20 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b083      	sub	sp, #12
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000e28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e2c:	689b      	ldr	r3, [r3, #8]
 8000e2e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000e32:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	4313      	orrs	r3, r2
 8000e3a:	608b      	str	r3, [r1, #8]
}
 8000e3c:	bf00      	nop
 8000e3e:	370c      	adds	r7, #12
 8000e40:	46bd      	mov	sp, r7
 8000e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e46:	4770      	bx	lr

08000e48 <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000e4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000e54:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000e58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000e60:	bf00      	nop
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr

08000e6a <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 8000e6a:	b480      	push	{r7}
 8000e6c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000e6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000e76:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000e7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e7e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000e82:	bf00      	nop
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr

08000e8c <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 8000e90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e94:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000e98:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000e9c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8000ea0:	d101      	bne.n	8000ea6 <LL_RCC_IsActiveFlag_PINRST+0x1a>
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	e000      	b.n	8000ea8 <LL_RCC_IsActiveFlag_PINRST+0x1c>
 8000ea6:	2300      	movs	r3, #0
}
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr

08000eb2 <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 8000eb2:	b480      	push	{r7}
 8000eb4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 8000eb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000eba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000ebe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ec2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000ec6:	d101      	bne.n	8000ecc <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 8000ec8:	2301      	movs	r3, #1
 8000eca:	e000      	b.n	8000ece <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 8000ecc:	2300      	movs	r3, #0
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed6:	4770      	bx	lr

08000ed8 <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b085      	sub	sp, #20
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 8000ee0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ee4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000ee6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	4313      	orrs	r3, r2
 8000eee:	650b      	str	r3, [r1, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8000ef0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ef4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	4013      	ands	r3, r2
 8000efa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000efc:	68fb      	ldr	r3, [r7, #12]
}
 8000efe:	bf00      	nop
 8000f00:	3714      	adds	r7, #20
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr
	...

08000f0c <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 8000f10:	4b04      	ldr	r3, [pc, #16]	; (8000f24 <LL_DBGMCU_GetDeviceID+0x18>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8000f18:	4618      	mov	r0, r3
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop
 8000f24:	e0042000 	.word	0xe0042000

08000f28 <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 8000f2c:	4b04      	ldr	r3, [pc, #16]	; (8000f40 <LL_DBGMCU_GetRevisionID+0x18>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	0c1b      	lsrs	r3, r3, #16
 8000f32:	b29b      	uxth	r3, r3
}
 8000f34:	4618      	mov	r0, r3
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop
 8000f40:	e0042000 	.word	0xe0042000

08000f44 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
 8000f4c:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	685a      	ldr	r2, [r3, #4]
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	041b      	lsls	r3, r3, #16
 8000f56:	431a      	orrs	r2, r3
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	605a      	str	r2, [r3, #4]
}
 8000f5c:	bf00      	nop
 8000f5e:	370c      	adds	r7, #12
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr

08000f68 <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b083      	sub	sp, #12
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
 8000f70:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	685a      	ldr	r2, [r3, #4]
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	431a      	orrs	r2, r3
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	605a      	str	r2, [r3, #4]
}
 8000f7e:	bf00      	nop
 8000f80:	370c      	adds	r7, #12
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr

08000f8a <LL_C2_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000f8a:	b480      	push	{r7}
 8000f8c:	b083      	sub	sp, #12
 8000f8e:	af00      	add	r7, sp, #0
 8000f90:	6078      	str	r0, [r7, #4]
 8000f92:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	695a      	ldr	r2, [r3, #20]
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	041b      	lsls	r3, r3, #16
 8000f9c:	431a      	orrs	r2, r3
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	615a      	str	r2, [r3, #20]
}
 8000fa2:	bf00      	nop
 8000fa4:	370c      	adds	r7, #12
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr

08000fae <LL_C2_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000fae:	b480      	push	{r7}
 8000fb0:	b083      	sub	sp, #12
 8000fb2:	af00      	add	r7, sp, #0
 8000fb4:	6078      	str	r0, [r7, #4]
 8000fb6:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	695a      	ldr	r2, [r3, #20]
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	431a      	orrs	r2, r3
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	615a      	str	r2, [r3, #20]
}
 8000fc4:	bf00      	nop
 8000fc6:	370c      	adds	r7, #12
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr

08000fd0 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
 8000fd8:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	683a      	ldr	r2, [r7, #0]
 8000fde:	609a      	str	r2, [r3, #8]
}
 8000fe0:	bf00      	nop
 8000fe2:	370c      	adds	r7, #12
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr

08000fec <LL_C2_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b083      	sub	sp, #12
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
 8000ff4:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	683a      	ldr	r2, [r7, #0]
 8000ffa:	619a      	str	r2, [r3, #24]
}
 8000ffc:	bf00      	nop
 8000ffe:	370c      	adds	r7, #12
 8001000:	46bd      	mov	sp, r7
 8001002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001006:	4770      	bx	lr

08001008 <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800100c:	4b05      	ldr	r3, [pc, #20]	; (8001024 <LL_LPM_EnableSleep+0x1c>)
 800100e:	691b      	ldr	r3, [r3, #16]
 8001010:	4a04      	ldr	r2, [pc, #16]	; (8001024 <LL_LPM_EnableSleep+0x1c>)
 8001012:	f023 0304 	bic.w	r3, r3, #4
 8001016:	6113      	str	r3, [r2, #16]
}
 8001018:	bf00      	nop
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop
 8001024:	e000ed00 	.word	0xe000ed00

08001028 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8001028:	b480      	push	{r7}
 800102a:	b083      	sub	sp, #12
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	22ff      	movs	r2, #255	; 0xff
 8001034:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001036:	bf00      	nop
 8001038:	370c      	adds	r7, #12
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr

08001042 <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 8001042:	b480      	push	{r7}
 8001044:	b083      	sub	sp, #12
 8001046:	af00      	add	r7, sp, #0
 8001048:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	22ca      	movs	r2, #202	; 0xca
 800104e:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	2253      	movs	r2, #83	; 0x53
 8001054:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001056:	bf00      	nop
 8001058:	370c      	adds	r7, #12
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr

08001062 <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 8001062:	b480      	push	{r7}
 8001064:	b083      	sub	sp, #12
 8001066:	af00      	add	r7, sp, #0
 8001068:	6078      	str	r0, [r7, #4]
 800106a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	689b      	ldr	r3, [r3, #8]
 8001070:	f023 0207 	bic.w	r2, r3, #7
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	431a      	orrs	r2, r3
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	609a      	str	r2, [r3, #8]
}
 800107c:	bf00      	nop
 800107e:	370c      	adds	r7, #12
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr

08001088 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800108c:	4b04      	ldr	r3, [pc, #16]	; (80010a0 <MX_APPE_Config+0x18>)
 800108e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001092:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 8001094:	f000 f824 	bl	80010e0 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 8001098:	f000 f864 	bl	8001164 <Config_HSE>

  return;
 800109c:	bf00      	nop
}
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	58004000 	.word	0x58004000

080010a4 <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 80010a8:	f000 f870 	bl	800118c <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 80010ac:	f000 f888 	bl	80011c0 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 80010b0:	4903      	ldr	r1, [pc, #12]	; (80010c0 <MX_APPE_Init+0x1c>)
 80010b2:	2000      	movs	r0, #0
 80010b4:	f000 fdd4 	bl	8001c60 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 80010b8:	f000 f890 	bl	80011dc <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 80010bc:	bf00      	nop
}
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	20000ae0 	.word	0x20000ae0

080010c4 <Init_Smps>:

void Init_Smps(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 80010c8:	bf00      	nop
}
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr

080010d2 <Init_Exti>:

void Init_Exti(void)
{
 80010d2:	b580      	push	{r7, lr}
 80010d4:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 80010d6:	2050      	movs	r0, #80	; 0x50
 80010d8:	f7ff fe70 	bl	8000dbc <LL_EXTI_EnableIT_32_63>

  return;
 80010dc:	bf00      	nop
}
 80010de:	bd80      	pop	{r7, pc}

080010e0 <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
#if (CFG_HW_RESET_BY_FW == 1)
  Reset_BackupDomain();
 80010e4:	f000 f804 	bl	80010f0 <Reset_BackupDomain>

  Reset_IPCC();
 80010e8:	f000 f81a 	bl	8001120 <Reset_IPCC>
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 80010ec:	bf00      	nop
}
 80010ee:	bd80      	pop	{r7, pc}

080010f0 <Reset_BackupDomain>:

#if (CFG_HW_RESET_BY_FW == 1)
static void Reset_BackupDomain(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
  if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 80010f4:	f7ff feca 	bl	8000e8c <LL_RCC_IsActiveFlag_PINRST>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d00d      	beq.n	800111a <Reset_BackupDomain+0x2a>
 80010fe:	f7ff fed8 	bl	8000eb2 <LL_RCC_IsActiveFlag_SFTRST>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d108      	bne.n	800111a <Reset_BackupDomain+0x2a>
  {
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 8001108:	f004 f934 	bl	8005374 <HAL_PWR_EnableBkUpAccess>

    /**
     *  Write twice the value to flush the APB-AHB bridge
     *  This bit shall be written in the register before writing the next one
     */
    HAL_PWR_EnableBkUpAccess();
 800110c:	f004 f932 	bl	8005374 <HAL_PWR_EnableBkUpAccess>

    __HAL_RCC_BACKUPRESET_FORCE();
 8001110:	f7ff fe9a 	bl	8000e48 <LL_RCC_ForceBackupDomainReset>
    __HAL_RCC_BACKUPRESET_RELEASE();
 8001114:	f7ff fea9 	bl	8000e6a <LL_RCC_ReleaseBackupDomainReset>
  }

  return;
 8001118:	bf00      	nop
 800111a:	bf00      	nop
}
 800111c:	bd80      	pop	{r7, pc}
	...

08001120 <Reset_IPCC>:

static void Reset_IPCC(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 8001124:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001128:	f7ff fed6 	bl	8000ed8 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_ClearFlag_CHx(
 800112c:	213f      	movs	r1, #63	; 0x3f
 800112e:	480c      	ldr	r0, [pc, #48]	; (8001160 <Reset_IPCC+0x40>)
 8001130:	f7ff ff4e 	bl	8000fd0 <LL_C1_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_ClearFlag_CHx(
 8001134:	213f      	movs	r1, #63	; 0x3f
 8001136:	480a      	ldr	r0, [pc, #40]	; (8001160 <Reset_IPCC+0x40>)
 8001138:	f7ff ff58 	bl	8000fec <LL_C2_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableTransmitChannel(
 800113c:	213f      	movs	r1, #63	; 0x3f
 800113e:	4808      	ldr	r0, [pc, #32]	; (8001160 <Reset_IPCC+0x40>)
 8001140:	f7ff ff00 	bl	8000f44 <LL_C1_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableTransmitChannel(
 8001144:	213f      	movs	r1, #63	; 0x3f
 8001146:	4806      	ldr	r0, [pc, #24]	; (8001160 <Reset_IPCC+0x40>)
 8001148:	f7ff ff1f 	bl	8000f8a <LL_C2_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableReceiveChannel(
 800114c:	213f      	movs	r1, #63	; 0x3f
 800114e:	4804      	ldr	r0, [pc, #16]	; (8001160 <Reset_IPCC+0x40>)
 8001150:	f7ff ff0a 	bl	8000f68 <LL_C1_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableReceiveChannel(
 8001154:	213f      	movs	r1, #63	; 0x3f
 8001156:	4802      	ldr	r0, [pc, #8]	; (8001160 <Reset_IPCC+0x40>)
 8001158:	f7ff ff29 	bl	8000fae <LL_C2_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  return;
 800115c:	bf00      	nop
}
 800115e:	bd80      	pop	{r7, pc}
 8001160:	58000c00 	.word	0x58000c00

08001164 <Config_HSE>:
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 800116a:	2000      	movs	r0, #0
 800116c:	f009 ff88 	bl	800b080 <OTP_Read>
 8001170:	6078      	str	r0, [r7, #4]
  if (p_otp)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d005      	beq.n	8001184 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	799b      	ldrb	r3, [r3, #6]
 800117c:	4618      	mov	r0, r3
 800117e:	f7ff fe31 	bl	8000de4 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 8001182:	bf00      	nop
 8001184:	bf00      	nop
}
 8001186:	3708      	adds	r7, #8
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}

0800118c <System_Init>:

static void System_Init(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
  Init_Smps();
 8001190:	f7ff ff98 	bl	80010c4 <Init_Smps>

  Init_Exti();
 8001194:	f7ff ff9d 	bl	80010d2 <Init_Exti>

  Init_Rtc();
 8001198:	f000 f802 	bl	80011a0 <Init_Rtc>

  return;
 800119c:	bf00      	nop
}
 800119e:	bd80      	pop	{r7, pc}

080011a0 <Init_Rtc>:

static void Init_Rtc(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 80011a4:	4805      	ldr	r0, [pc, #20]	; (80011bc <Init_Rtc+0x1c>)
 80011a6:	f7ff ff4c 	bl	8001042 <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 80011aa:	2100      	movs	r1, #0
 80011ac:	4803      	ldr	r0, [pc, #12]	; (80011bc <Init_Rtc+0x1c>)
 80011ae:	f7ff ff58 	bl	8001062 <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 80011b2:	4802      	ldr	r0, [pc, #8]	; (80011bc <Init_Rtc+0x1c>)
 80011b4:	f7ff ff38 	bl	8001028 <LL_RTC_EnableWriteProtection>

  return;
 80011b8:	bf00      	nop
}
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	40002800 	.word	0x40002800

080011c0 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 80011c4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80011c8:	f7ff fe2a 	bl	8000e20 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 80011cc:	f00a fe52 	bl	800be74 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 80011d0:	2004      	movs	r0, #4
 80011d2:	f7ff fddd 	bl	8000d90 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 80011d6:	bf00      	nop
}
 80011d8:	bd80      	pop	{r7, pc}
	...

080011dc <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b088      	sub	sp, #32
 80011e0:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 80011e2:	f009 fd0b 	bl	800abfc <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 80011e6:	4a11      	ldr	r2, [pc, #68]	; (800122c <appe_Tl_Init+0x50>)
 80011e8:	2100      	movs	r1, #0
 80011ea:	2004      	movs	r0, #4
 80011ec:	f00a ff80 	bl	800c0f0 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 80011f0:	4b0f      	ldr	r3, [pc, #60]	; (8001230 <appe_Tl_Init+0x54>)
 80011f2:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 80011f4:	4b0f      	ldr	r3, [pc, #60]	; (8001234 <appe_Tl_Init+0x58>)
 80011f6:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 80011f8:	463b      	mov	r3, r7
 80011fa:	4619      	mov	r1, r3
 80011fc:	480e      	ldr	r0, [pc, #56]	; (8001238 <appe_Tl_Init+0x5c>)
 80011fe:	f009 fbc3 	bl	800a988 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 8001202:	4b0e      	ldr	r3, [pc, #56]	; (800123c <appe_Tl_Init+0x60>)
 8001204:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8001206:	4b0e      	ldr	r3, [pc, #56]	; (8001240 <appe_Tl_Init+0x64>)
 8001208:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 800120a:	4b0e      	ldr	r3, [pc, #56]	; (8001244 <appe_Tl_Init+0x68>)
 800120c:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 800120e:	f240 533c 	movw	r3, #1340	; 0x53c
 8001212:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 8001214:	f107 0308 	add.w	r3, r7, #8
 8001218:	4618      	mov	r0, r3
 800121a:	f009 fe31 	bl	800ae80 <TL_MM_Init>

  TL_Enable();
 800121e:	f009 fce7 	bl	800abf0 <TL_Enable>

  return;
 8001222:	bf00      	nop
}
 8001224:	3720      	adds	r7, #32
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	0800a9c1 	.word	0x0800a9c1
 8001230:	200005dc 	.word	0x200005dc
 8001234:	08001249 	.word	0x08001249
 8001238:	08001261 	.word	0x08001261
 800123c:	200007f4 	.word	0x200007f4
 8001240:	200006e8 	.word	0x200006e8
 8001244:	200000a0 	.word	0x200000a0

08001248 <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 8001248:	b480      	push	{r7}
 800124a:	b083      	sub	sp, #12
 800124c:	af00      	add	r7, sp, #0
 800124e:	4603      	mov	r3, r0
 8001250:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 8001252:	bf00      	nop
}
 8001254:	370c      	adds	r7, #12
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr
	...

08001260 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b088      	sub	sp, #32
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	330b      	adds	r3, #11
 800126e:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 8001270:	69fb      	ldr	r3, [r7, #28]
 8001272:	881b      	ldrh	r3, [r3, #0]
 8001274:	b29b      	uxth	r3, r3
 8001276:	f5a3 4312 	sub.w	r3, r3, #37376	; 0x9200
 800127a:	2b07      	cmp	r3, #7
 800127c:	d81f      	bhi.n	80012be <APPE_SysUserEvtRx+0x5e>
 800127e:	a201      	add	r2, pc, #4	; (adr r2, 8001284 <APPE_SysUserEvtRx+0x24>)
 8001280:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001284:	080012a5 	.word	0x080012a5
 8001288:	080012b7 	.word	0x080012b7
 800128c:	080012bf 	.word	0x080012bf
 8001290:	080012bf 	.word	0x080012bf
 8001294:	080012bf 	.word	0x080012bf
 8001298:	080012bf 	.word	0x080012bf
 800129c:	080012bf 	.word	0x080012bf
 80012a0:	080012bf 	.word	0x080012bf
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 80012a4:	f107 030c 	add.w	r3, r7, #12
 80012a8:	4618      	mov	r0, r3
 80012aa:	f009 f929 	bl	800a500 <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
    APPE_SysEvtReadyProcessing(pPayload);
 80012ae:	6878      	ldr	r0, [r7, #4]
 80012b0:	f000 f81b 	bl	80012ea <APPE_SysEvtReadyProcessing>
    break;
 80012b4:	e004      	b.n	80012c0 <APPE_SysUserEvtRx+0x60>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
    APPE_SysEvtError(pPayload);
 80012b6:	6878      	ldr	r0, [r7, #4]
 80012b8:	f000 f806 	bl	80012c8 <APPE_SysEvtError>
    break;
 80012bc:	e000      	b.n	80012c0 <APPE_SysUserEvtRx+0x60>
  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
    break;

  default:
    break;
 80012be:	bf00      	nop
  }

  return;
 80012c0:	bf00      	nop
}
 80012c2:	3720      	adds	r7, #32
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}

080012c8 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b085      	sub	sp, #20
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	330b      	adds	r3, #11
 80012d6:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	3302      	adds	r3, #2
 80012dc:	60bb      	str	r3, [r7, #8]
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 80012de:	bf00      	nop
}
 80012e0:	3714      	adds	r7, #20
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr

080012ea <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 80012ea:	b580      	push	{r7, lr}
 80012ec:	b08a      	sub	sp, #40	; 0x28
 80012ee:	af00      	add	r7, sp, #0
 80012f0:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 80012f2:	f107 0308 	add.w	r3, r7, #8
 80012f6:	2200      	movs	r2, #0
 80012f8:	601a      	str	r2, [r3, #0]
 80012fa:	605a      	str	r2, [r3, #4]
 80012fc:	609a      	str	r2, [r3, #8]
 80012fe:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 8001300:	2300      	movs	r3, #0
 8001302:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t DeviceID=0;
 8001304:	2300      	movs	r3, #0
 8001306:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	330b      	adds	r3, #11
 800130e:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 8001310:	69fb      	ldr	r3, [r7, #28]
 8001312:	3302      	adds	r3, #2
 8001314:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 8001316:	69bb      	ldr	r3, [r7, #24]
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d11d      	bne.n	800135a <APPE_SysEvtReadyProcessing+0x70>
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");

    /* Traces channel initialization */
    APPD_EnableCPU2();
 800131e:	f7ff fd1b 	bl	8000d58 <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 8001322:	230f      	movs	r3, #15
 8001324:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 8001326:	237f      	movs	r3, #127	; 0x7f
 8001328:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 800132a:	f7ff fdfd 	bl	8000f28 <LL_DBGMCU_GetRevisionID>
 800132e:	6278      	str	r0, [r7, #36]	; 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);

    config_param.RevisionID = (uint16_t)RevisionID;
 8001330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001332:	b29b      	uxth	r3, r3
 8001334:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 8001336:	f7ff fde9 	bl	8000f0c <LL_DBGMCU_GetDeviceID>
 800133a:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
    config_param.DeviceID = (uint16_t)DeviceID;
 800133c:	6a3b      	ldr	r3, [r7, #32]
 800133e:	b29b      	uxth	r3, r3
 8001340:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 8001342:	f107 0308 	add.w	r3, r7, #8
 8001346:	4618      	mov	r0, r3
 8001348:	f009 f8c4 	bl	800a4d4 <SHCI_C2_Config>

    APP_BLE_Init();
 800134c:	f009 ffa2 	bl	800b294 <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8001350:	2100      	movs	r1, #0
 8001352:	2001      	movs	r0, #1
 8001354:	f00a fda0 	bl	800be98 <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 8001358:	e007      	b.n	800136a <APPE_SysEvtReadyProcessing+0x80>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 800135a:	69bb      	ldr	r3, [r7, #24]
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	2b01      	cmp	r3, #1
 8001360:	d103      	bne.n	800136a <APPE_SysEvtReadyProcessing+0x80>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	2200      	movs	r2, #0
 8001366:	701a      	strb	r2, [r3, #0]
  return;
 8001368:	bf00      	nop
 800136a:	bf00      	nop
}
 800136c:	3728      	adds	r7, #40	; 0x28
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}

08001372 <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 8001372:	b580      	push	{r7, lr}
 8001374:	b084      	sub	sp, #16
 8001376:	af00      	add	r7, sp, #0
 8001378:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800137a:	f001 ff81 	bl	8003280 <HAL_GetTick>
 800137e:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800138a:	d00a      	beq.n	80013a2 <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 800138c:	f001 ff90 	bl	80032b0 <HAL_GetTickFreq>
 8001390:	4603      	mov	r3, r0
 8001392:	461a      	mov	r2, r3
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	4413      	add	r3, r2
 8001398:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800139a:	e002      	b.n	80013a2 <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 800139c:	f7ff fe34 	bl	8001008 <LL_LPM_EnableSleep>
     */
  #if defined (__CC_ARM)
    __force_stores();
  #endif /* __CC_ARM */

    __WFI();
 80013a0:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 80013a2:	f001 ff6d 	bl	8003280 <HAL_GetTick>
 80013a6:	4602      	mov	r2, r0
 80013a8:	68bb      	ldr	r3, [r7, #8]
 80013aa:	1ad3      	subs	r3, r2, r3
 80013ac:	68fa      	ldr	r2, [r7, #12]
 80013ae:	429a      	cmp	r2, r3
 80013b0:	d8f4      	bhi.n	800139c <HAL_Delay+0x2a>
  }
}
 80013b2:	bf00      	nop
 80013b4:	bf00      	nop
 80013b6:	3710      	adds	r7, #16
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}

080013bc <MX_APPE_Process>:

void MX_APPE_Process(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 80013c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80013c4:	f00a fd98 	bl	800bef8 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 80013c8:	bf00      	nop
 80013ca:	bd80      	pop	{r7, pc}

080013cc <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 80013d0:	bf00      	nop
}
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr

080013da <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 80013da:	b580      	push	{r7, lr}
 80013dc:	b082      	sub	sp, #8
 80013de:	af00      	add	r7, sp, #0
 80013e0:	6078      	str	r0, [r7, #4]
 80013e2:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 80013e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80013e8:	f00a fd86 	bl	800bef8 <UTIL_SEQ_Run>

  return;
 80013ec:	bf00      	nop
}
 80013ee:	3708      	adds	r7, #8
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}

080013f4 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 80013fc:	2100      	movs	r1, #0
 80013fe:	2004      	movs	r0, #4
 8001400:	f00a fe98 	bl	800c134 <UTIL_SEQ_SetTask>
  return;
 8001404:	bf00      	nop
}
 8001406:	3708      	adds	r7, #8
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}

0800140c <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8001414:	2002      	movs	r0, #2
 8001416:	f00a fef9 	bl	800c20c <UTIL_SEQ_SetEvt>
  return;
 800141a:	bf00      	nop
}
 800141c:	3708      	adds	r7, #8
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}

08001422 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 8001422:	b580      	push	{r7, lr}
 8001424:	b082      	sub	sp, #8
 8001426:	af00      	add	r7, sp, #0
 8001428:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 800142a:	2002      	movs	r0, #2
 800142c:	f00a ff0e 	bl	800c24c <UTIL_SEQ_WaitEvt>
  return;
 8001430:	bf00      	nop
}
 8001432:	3708      	adds	r7, #8
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}

08001438 <LL_EXTI_EnableIT_0_31>:
{
 8001438:	b480      	push	{r7}
 800143a:	b083      	sub	sp, #12
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8001440:	4b06      	ldr	r3, [pc, #24]	; (800145c <LL_EXTI_EnableIT_0_31+0x24>)
 8001442:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8001446:	4905      	ldr	r1, [pc, #20]	; (800145c <LL_EXTI_EnableIT_0_31+0x24>)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	4313      	orrs	r3, r2
 800144c:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8001450:	bf00      	nop
 8001452:	370c      	adds	r7, #12
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr
 800145c:	58000800 	.word	0x58000800

08001460 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8001460:	b480      	push	{r7}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8001468:	4b05      	ldr	r3, [pc, #20]	; (8001480 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800146a:	681a      	ldr	r2, [r3, #0]
 800146c:	4904      	ldr	r1, [pc, #16]	; (8001480 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	4313      	orrs	r3, r2
 8001472:	600b      	str	r3, [r1, #0]

}
 8001474:	bf00      	nop
 8001476:	370c      	adds	r7, #12
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr
 8001480:	58000800 	.word	0x58000800

08001484 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8001484:	b480      	push	{r7}
 8001486:	b083      	sub	sp, #12
 8001488:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 800148a:	4b0d      	ldr	r3, [pc, #52]	; (80014c0 <ReadRtcSsrValue+0x3c>)
 800148c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800148e:	b29b      	uxth	r3, r3
 8001490:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001492:	4b0b      	ldr	r3, [pc, #44]	; (80014c0 <ReadRtcSsrValue+0x3c>)
 8001494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001496:	b29b      	uxth	r3, r3
 8001498:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 800149a:	e005      	b.n	80014a8 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80014a0:	4b07      	ldr	r3, [pc, #28]	; (80014c0 <ReadRtcSsrValue+0x3c>)
 80014a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014a4:	b29b      	uxth	r3, r3
 80014a6:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 80014a8:	687a      	ldr	r2, [r7, #4]
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	429a      	cmp	r2, r3
 80014ae:	d1f5      	bne.n	800149c <ReadRtcSsrValue+0x18>
  }

  return second_read;
 80014b0:	683b      	ldr	r3, [r7, #0]
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	370c      	adds	r7, #12
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr
 80014be:	bf00      	nop
 80014c0:	40002800 	.word	0x40002800

080014c4 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b085      	sub	sp, #20
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	4603      	mov	r3, r0
 80014cc:	460a      	mov	r2, r1
 80014ce:	71fb      	strb	r3, [r7, #7]
 80014d0:	4613      	mov	r3, r2
 80014d2:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 80014d4:	79ba      	ldrb	r2, [r7, #6]
 80014d6:	491d      	ldr	r1, [pc, #116]	; (800154c <LinkTimerAfter+0x88>)
 80014d8:	4613      	mov	r3, r2
 80014da:	005b      	lsls	r3, r3, #1
 80014dc:	4413      	add	r3, r2
 80014de:	00db      	lsls	r3, r3, #3
 80014e0:	440b      	add	r3, r1
 80014e2:	3315      	adds	r3, #21
 80014e4:	781b      	ldrb	r3, [r3, #0]
 80014e6:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80014e8:	7bfb      	ldrb	r3, [r7, #15]
 80014ea:	2b06      	cmp	r3, #6
 80014ec:	d009      	beq.n	8001502 <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 80014ee:	7bfa      	ldrb	r2, [r7, #15]
 80014f0:	4916      	ldr	r1, [pc, #88]	; (800154c <LinkTimerAfter+0x88>)
 80014f2:	4613      	mov	r3, r2
 80014f4:	005b      	lsls	r3, r3, #1
 80014f6:	4413      	add	r3, r2
 80014f8:	00db      	lsls	r3, r3, #3
 80014fa:	440b      	add	r3, r1
 80014fc:	3314      	adds	r3, #20
 80014fe:	79fa      	ldrb	r2, [r7, #7]
 8001500:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8001502:	79fa      	ldrb	r2, [r7, #7]
 8001504:	4911      	ldr	r1, [pc, #68]	; (800154c <LinkTimerAfter+0x88>)
 8001506:	4613      	mov	r3, r2
 8001508:	005b      	lsls	r3, r3, #1
 800150a:	4413      	add	r3, r2
 800150c:	00db      	lsls	r3, r3, #3
 800150e:	440b      	add	r3, r1
 8001510:	3315      	adds	r3, #21
 8001512:	7bfa      	ldrb	r2, [r7, #15]
 8001514:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8001516:	79fa      	ldrb	r2, [r7, #7]
 8001518:	490c      	ldr	r1, [pc, #48]	; (800154c <LinkTimerAfter+0x88>)
 800151a:	4613      	mov	r3, r2
 800151c:	005b      	lsls	r3, r3, #1
 800151e:	4413      	add	r3, r2
 8001520:	00db      	lsls	r3, r3, #3
 8001522:	440b      	add	r3, r1
 8001524:	3314      	adds	r3, #20
 8001526:	79ba      	ldrb	r2, [r7, #6]
 8001528:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 800152a:	79ba      	ldrb	r2, [r7, #6]
 800152c:	4907      	ldr	r1, [pc, #28]	; (800154c <LinkTimerAfter+0x88>)
 800152e:	4613      	mov	r3, r2
 8001530:	005b      	lsls	r3, r3, #1
 8001532:	4413      	add	r3, r2
 8001534:	00db      	lsls	r3, r3, #3
 8001536:	440b      	add	r3, r1
 8001538:	3315      	adds	r3, #21
 800153a:	79fa      	ldrb	r2, [r7, #7]
 800153c:	701a      	strb	r2, [r3, #0]

  return;
 800153e:	bf00      	nop
}
 8001540:	3714      	adds	r7, #20
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr
 800154a:	bf00      	nop
 800154c:	20000978 	.word	0x20000978

08001550 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8001550:	b480      	push	{r7}
 8001552:	b085      	sub	sp, #20
 8001554:	af00      	add	r7, sp, #0
 8001556:	4603      	mov	r3, r0
 8001558:	460a      	mov	r2, r1
 800155a:	71fb      	strb	r3, [r7, #7]
 800155c:	4613      	mov	r3, r2
 800155e:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8001560:	4b29      	ldr	r3, [pc, #164]	; (8001608 <LinkTimerBefore+0xb8>)
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	b2db      	uxtb	r3, r3
 8001566:	79ba      	ldrb	r2, [r7, #6]
 8001568:	429a      	cmp	r2, r3
 800156a:	d032      	beq.n	80015d2 <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 800156c:	79ba      	ldrb	r2, [r7, #6]
 800156e:	4927      	ldr	r1, [pc, #156]	; (800160c <LinkTimerBefore+0xbc>)
 8001570:	4613      	mov	r3, r2
 8001572:	005b      	lsls	r3, r3, #1
 8001574:	4413      	add	r3, r2
 8001576:	00db      	lsls	r3, r3, #3
 8001578:	440b      	add	r3, r1
 800157a:	3314      	adds	r3, #20
 800157c:	781b      	ldrb	r3, [r3, #0]
 800157e:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8001580:	7bfa      	ldrb	r2, [r7, #15]
 8001582:	4922      	ldr	r1, [pc, #136]	; (800160c <LinkTimerBefore+0xbc>)
 8001584:	4613      	mov	r3, r2
 8001586:	005b      	lsls	r3, r3, #1
 8001588:	4413      	add	r3, r2
 800158a:	00db      	lsls	r3, r3, #3
 800158c:	440b      	add	r3, r1
 800158e:	3315      	adds	r3, #21
 8001590:	79fa      	ldrb	r2, [r7, #7]
 8001592:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8001594:	79fa      	ldrb	r2, [r7, #7]
 8001596:	491d      	ldr	r1, [pc, #116]	; (800160c <LinkTimerBefore+0xbc>)
 8001598:	4613      	mov	r3, r2
 800159a:	005b      	lsls	r3, r3, #1
 800159c:	4413      	add	r3, r2
 800159e:	00db      	lsls	r3, r3, #3
 80015a0:	440b      	add	r3, r1
 80015a2:	3315      	adds	r3, #21
 80015a4:	79ba      	ldrb	r2, [r7, #6]
 80015a6:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 80015a8:	79fa      	ldrb	r2, [r7, #7]
 80015aa:	4918      	ldr	r1, [pc, #96]	; (800160c <LinkTimerBefore+0xbc>)
 80015ac:	4613      	mov	r3, r2
 80015ae:	005b      	lsls	r3, r3, #1
 80015b0:	4413      	add	r3, r2
 80015b2:	00db      	lsls	r3, r3, #3
 80015b4:	440b      	add	r3, r1
 80015b6:	3314      	adds	r3, #20
 80015b8:	7bfa      	ldrb	r2, [r7, #15]
 80015ba:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 80015bc:	79ba      	ldrb	r2, [r7, #6]
 80015be:	4913      	ldr	r1, [pc, #76]	; (800160c <LinkTimerBefore+0xbc>)
 80015c0:	4613      	mov	r3, r2
 80015c2:	005b      	lsls	r3, r3, #1
 80015c4:	4413      	add	r3, r2
 80015c6:	00db      	lsls	r3, r3, #3
 80015c8:	440b      	add	r3, r1
 80015ca:	3314      	adds	r3, #20
 80015cc:	79fa      	ldrb	r2, [r7, #7]
 80015ce:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 80015d0:	e014      	b.n	80015fc <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 80015d2:	79fa      	ldrb	r2, [r7, #7]
 80015d4:	490d      	ldr	r1, [pc, #52]	; (800160c <LinkTimerBefore+0xbc>)
 80015d6:	4613      	mov	r3, r2
 80015d8:	005b      	lsls	r3, r3, #1
 80015da:	4413      	add	r3, r2
 80015dc:	00db      	lsls	r3, r3, #3
 80015de:	440b      	add	r3, r1
 80015e0:	3315      	adds	r3, #21
 80015e2:	79ba      	ldrb	r2, [r7, #6]
 80015e4:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 80015e6:	79ba      	ldrb	r2, [r7, #6]
 80015e8:	4908      	ldr	r1, [pc, #32]	; (800160c <LinkTimerBefore+0xbc>)
 80015ea:	4613      	mov	r3, r2
 80015ec:	005b      	lsls	r3, r3, #1
 80015ee:	4413      	add	r3, r2
 80015f0:	00db      	lsls	r3, r3, #3
 80015f2:	440b      	add	r3, r1
 80015f4:	3314      	adds	r3, #20
 80015f6:	79fa      	ldrb	r2, [r7, #7]
 80015f8:	701a      	strb	r2, [r3, #0]
  return;
 80015fa:	bf00      	nop
}
 80015fc:	3714      	adds	r7, #20
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr
 8001606:	bf00      	nop
 8001608:	20000a08 	.word	0x20000a08
 800160c:	20000978 	.word	0x20000978

08001610 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b084      	sub	sp, #16
 8001614:	af00      	add	r7, sp, #0
 8001616:	4603      	mov	r3, r0
 8001618:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800161a:	4b4e      	ldr	r3, [pc, #312]	; (8001754 <linkTimer+0x144>)
 800161c:	781b      	ldrb	r3, [r3, #0]
 800161e:	b2db      	uxtb	r3, r3
 8001620:	2b06      	cmp	r3, #6
 8001622:	d118      	bne.n	8001656 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001624:	4b4b      	ldr	r3, [pc, #300]	; (8001754 <linkTimer+0x144>)
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	b2da      	uxtb	r2, r3
 800162a:	4b4b      	ldr	r3, [pc, #300]	; (8001758 <linkTimer+0x148>)
 800162c:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 800162e:	4a49      	ldr	r2, [pc, #292]	; (8001754 <linkTimer+0x144>)
 8001630:	79fb      	ldrb	r3, [r7, #7]
 8001632:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8001634:	79fa      	ldrb	r2, [r7, #7]
 8001636:	4949      	ldr	r1, [pc, #292]	; (800175c <linkTimer+0x14c>)
 8001638:	4613      	mov	r3, r2
 800163a:	005b      	lsls	r3, r3, #1
 800163c:	4413      	add	r3, r2
 800163e:	00db      	lsls	r3, r3, #3
 8001640:	440b      	add	r3, r1
 8001642:	3315      	adds	r3, #21
 8001644:	2206      	movs	r2, #6
 8001646:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001648:	4b45      	ldr	r3, [pc, #276]	; (8001760 <linkTimer+0x150>)
 800164a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800164e:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8001650:	2300      	movs	r3, #0
 8001652:	81fb      	strh	r3, [r7, #14]
 8001654:	e078      	b.n	8001748 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8001656:	f000 f909 	bl	800186c <ReturnTimeElapsed>
 800165a:	4603      	mov	r3, r0
 800165c:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 800165e:	79fa      	ldrb	r2, [r7, #7]
 8001660:	493e      	ldr	r1, [pc, #248]	; (800175c <linkTimer+0x14c>)
 8001662:	4613      	mov	r3, r2
 8001664:	005b      	lsls	r3, r3, #1
 8001666:	4413      	add	r3, r2
 8001668:	00db      	lsls	r3, r3, #3
 800166a:	440b      	add	r3, r1
 800166c:	3308      	adds	r3, #8
 800166e:	6819      	ldr	r1, [r3, #0]
 8001670:	89fb      	ldrh	r3, [r7, #14]
 8001672:	79fa      	ldrb	r2, [r7, #7]
 8001674:	4419      	add	r1, r3
 8001676:	4839      	ldr	r0, [pc, #228]	; (800175c <linkTimer+0x14c>)
 8001678:	4613      	mov	r3, r2
 800167a:	005b      	lsls	r3, r3, #1
 800167c:	4413      	add	r3, r2
 800167e:	00db      	lsls	r3, r3, #3
 8001680:	4403      	add	r3, r0
 8001682:	3308      	adds	r3, #8
 8001684:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8001686:	79fa      	ldrb	r2, [r7, #7]
 8001688:	4934      	ldr	r1, [pc, #208]	; (800175c <linkTimer+0x14c>)
 800168a:	4613      	mov	r3, r2
 800168c:	005b      	lsls	r3, r3, #1
 800168e:	4413      	add	r3, r2
 8001690:	00db      	lsls	r3, r3, #3
 8001692:	440b      	add	r3, r1
 8001694:	3308      	adds	r3, #8
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 800169a:	4b2e      	ldr	r3, [pc, #184]	; (8001754 <linkTimer+0x144>)
 800169c:	781b      	ldrb	r3, [r3, #0]
 800169e:	b2db      	uxtb	r3, r3
 80016a0:	4619      	mov	r1, r3
 80016a2:	4a2e      	ldr	r2, [pc, #184]	; (800175c <linkTimer+0x14c>)
 80016a4:	460b      	mov	r3, r1
 80016a6:	005b      	lsls	r3, r3, #1
 80016a8:	440b      	add	r3, r1
 80016aa:	00db      	lsls	r3, r3, #3
 80016ac:	4413      	add	r3, r2
 80016ae:	3308      	adds	r3, #8
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	68ba      	ldr	r2, [r7, #8]
 80016b4:	429a      	cmp	r2, r3
 80016b6:	d337      	bcc.n	8001728 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 80016b8:	4b26      	ldr	r3, [pc, #152]	; (8001754 <linkTimer+0x144>)
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 80016be:	7b7a      	ldrb	r2, [r7, #13]
 80016c0:	4926      	ldr	r1, [pc, #152]	; (800175c <linkTimer+0x14c>)
 80016c2:	4613      	mov	r3, r2
 80016c4:	005b      	lsls	r3, r3, #1
 80016c6:	4413      	add	r3, r2
 80016c8:	00db      	lsls	r3, r3, #3
 80016ca:	440b      	add	r3, r1
 80016cc:	3315      	adds	r3, #21
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 80016d2:	e013      	b.n	80016fc <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 80016d4:	7b7a      	ldrb	r2, [r7, #13]
 80016d6:	4921      	ldr	r1, [pc, #132]	; (800175c <linkTimer+0x14c>)
 80016d8:	4613      	mov	r3, r2
 80016da:	005b      	lsls	r3, r3, #1
 80016dc:	4413      	add	r3, r2
 80016de:	00db      	lsls	r3, r3, #3
 80016e0:	440b      	add	r3, r1
 80016e2:	3315      	adds	r3, #21
 80016e4:	781b      	ldrb	r3, [r3, #0]
 80016e6:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 80016e8:	7b7a      	ldrb	r2, [r7, #13]
 80016ea:	491c      	ldr	r1, [pc, #112]	; (800175c <linkTimer+0x14c>)
 80016ec:	4613      	mov	r3, r2
 80016ee:	005b      	lsls	r3, r3, #1
 80016f0:	4413      	add	r3, r2
 80016f2:	00db      	lsls	r3, r3, #3
 80016f4:	440b      	add	r3, r1
 80016f6:	3315      	adds	r3, #21
 80016f8:	781b      	ldrb	r3, [r3, #0]
 80016fa:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 80016fc:	7b3b      	ldrb	r3, [r7, #12]
 80016fe:	2b06      	cmp	r3, #6
 8001700:	d00b      	beq.n	800171a <linkTimer+0x10a>
 8001702:	7b3a      	ldrb	r2, [r7, #12]
 8001704:	4915      	ldr	r1, [pc, #84]	; (800175c <linkTimer+0x14c>)
 8001706:	4613      	mov	r3, r2
 8001708:	005b      	lsls	r3, r3, #1
 800170a:	4413      	add	r3, r2
 800170c:	00db      	lsls	r3, r3, #3
 800170e:	440b      	add	r3, r1
 8001710:	3308      	adds	r3, #8
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	68ba      	ldr	r2, [r7, #8]
 8001716:	429a      	cmp	r2, r3
 8001718:	d2dc      	bcs.n	80016d4 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 800171a:	7b7a      	ldrb	r2, [r7, #13]
 800171c:	79fb      	ldrb	r3, [r7, #7]
 800171e:	4611      	mov	r1, r2
 8001720:	4618      	mov	r0, r3
 8001722:	f7ff fecf 	bl	80014c4 <LinkTimerAfter>
 8001726:	e00f      	b.n	8001748 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8001728:	4b0a      	ldr	r3, [pc, #40]	; (8001754 <linkTimer+0x144>)
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	b2da      	uxtb	r2, r3
 800172e:	79fb      	ldrb	r3, [r7, #7]
 8001730:	4611      	mov	r1, r2
 8001732:	4618      	mov	r0, r3
 8001734:	f7ff ff0c 	bl	8001550 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8001738:	4b06      	ldr	r3, [pc, #24]	; (8001754 <linkTimer+0x144>)
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	b2da      	uxtb	r2, r3
 800173e:	4b06      	ldr	r3, [pc, #24]	; (8001758 <linkTimer+0x148>)
 8001740:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8001742:	4a04      	ldr	r2, [pc, #16]	; (8001754 <linkTimer+0x144>)
 8001744:	79fb      	ldrb	r3, [r7, #7]
 8001746:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8001748:	89fb      	ldrh	r3, [r7, #14]
}
 800174a:	4618      	mov	r0, r3
 800174c:	3710      	adds	r7, #16
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	20000a08 	.word	0x20000a08
 8001758:	20000a09 	.word	0x20000a09
 800175c:	20000978 	.word	0x20000978
 8001760:	20000a0c 	.word	0x20000a0c

08001764 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8001764:	b480      	push	{r7}
 8001766:	b085      	sub	sp, #20
 8001768:	af00      	add	r7, sp, #0
 800176a:	4603      	mov	r3, r0
 800176c:	460a      	mov	r2, r1
 800176e:	71fb      	strb	r3, [r7, #7]
 8001770:	4613      	mov	r3, r2
 8001772:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8001774:	4b39      	ldr	r3, [pc, #228]	; (800185c <UnlinkTimer+0xf8>)
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	b2db      	uxtb	r3, r3
 800177a:	79fa      	ldrb	r2, [r7, #7]
 800177c:	429a      	cmp	r2, r3
 800177e:	d111      	bne.n	80017a4 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001780:	4b36      	ldr	r3, [pc, #216]	; (800185c <UnlinkTimer+0xf8>)
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	b2da      	uxtb	r2, r3
 8001786:	4b36      	ldr	r3, [pc, #216]	; (8001860 <UnlinkTimer+0xfc>)
 8001788:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 800178a:	79fa      	ldrb	r2, [r7, #7]
 800178c:	4935      	ldr	r1, [pc, #212]	; (8001864 <UnlinkTimer+0x100>)
 800178e:	4613      	mov	r3, r2
 8001790:	005b      	lsls	r3, r3, #1
 8001792:	4413      	add	r3, r2
 8001794:	00db      	lsls	r3, r3, #3
 8001796:	440b      	add	r3, r1
 8001798:	3315      	adds	r3, #21
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	b2da      	uxtb	r2, r3
 800179e:	4b2f      	ldr	r3, [pc, #188]	; (800185c <UnlinkTimer+0xf8>)
 80017a0:	701a      	strb	r2, [r3, #0]
 80017a2:	e03e      	b.n	8001822 <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 80017a4:	79fa      	ldrb	r2, [r7, #7]
 80017a6:	492f      	ldr	r1, [pc, #188]	; (8001864 <UnlinkTimer+0x100>)
 80017a8:	4613      	mov	r3, r2
 80017aa:	005b      	lsls	r3, r3, #1
 80017ac:	4413      	add	r3, r2
 80017ae:	00db      	lsls	r3, r3, #3
 80017b0:	440b      	add	r3, r1
 80017b2:	3314      	adds	r3, #20
 80017b4:	781b      	ldrb	r3, [r3, #0]
 80017b6:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 80017b8:	79fa      	ldrb	r2, [r7, #7]
 80017ba:	492a      	ldr	r1, [pc, #168]	; (8001864 <UnlinkTimer+0x100>)
 80017bc:	4613      	mov	r3, r2
 80017be:	005b      	lsls	r3, r3, #1
 80017c0:	4413      	add	r3, r2
 80017c2:	00db      	lsls	r3, r3, #3
 80017c4:	440b      	add	r3, r1
 80017c6:	3315      	adds	r3, #21
 80017c8:	781b      	ldrb	r3, [r3, #0]
 80017ca:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 80017cc:	79f9      	ldrb	r1, [r7, #7]
 80017ce:	7bfa      	ldrb	r2, [r7, #15]
 80017d0:	4824      	ldr	r0, [pc, #144]	; (8001864 <UnlinkTimer+0x100>)
 80017d2:	460b      	mov	r3, r1
 80017d4:	005b      	lsls	r3, r3, #1
 80017d6:	440b      	add	r3, r1
 80017d8:	00db      	lsls	r3, r3, #3
 80017da:	4403      	add	r3, r0
 80017dc:	3315      	adds	r3, #21
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	b2d8      	uxtb	r0, r3
 80017e2:	4920      	ldr	r1, [pc, #128]	; (8001864 <UnlinkTimer+0x100>)
 80017e4:	4613      	mov	r3, r2
 80017e6:	005b      	lsls	r3, r3, #1
 80017e8:	4413      	add	r3, r2
 80017ea:	00db      	lsls	r3, r3, #3
 80017ec:	440b      	add	r3, r1
 80017ee:	3315      	adds	r3, #21
 80017f0:	4602      	mov	r2, r0
 80017f2:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80017f4:	7bbb      	ldrb	r3, [r7, #14]
 80017f6:	2b06      	cmp	r3, #6
 80017f8:	d013      	beq.n	8001822 <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 80017fa:	79f9      	ldrb	r1, [r7, #7]
 80017fc:	7bba      	ldrb	r2, [r7, #14]
 80017fe:	4819      	ldr	r0, [pc, #100]	; (8001864 <UnlinkTimer+0x100>)
 8001800:	460b      	mov	r3, r1
 8001802:	005b      	lsls	r3, r3, #1
 8001804:	440b      	add	r3, r1
 8001806:	00db      	lsls	r3, r3, #3
 8001808:	4403      	add	r3, r0
 800180a:	3314      	adds	r3, #20
 800180c:	781b      	ldrb	r3, [r3, #0]
 800180e:	b2d8      	uxtb	r0, r3
 8001810:	4914      	ldr	r1, [pc, #80]	; (8001864 <UnlinkTimer+0x100>)
 8001812:	4613      	mov	r3, r2
 8001814:	005b      	lsls	r3, r3, #1
 8001816:	4413      	add	r3, r2
 8001818:	00db      	lsls	r3, r3, #3
 800181a:	440b      	add	r3, r1
 800181c:	3314      	adds	r3, #20
 800181e:	4602      	mov	r2, r0
 8001820:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8001822:	79fa      	ldrb	r2, [r7, #7]
 8001824:	490f      	ldr	r1, [pc, #60]	; (8001864 <UnlinkTimer+0x100>)
 8001826:	4613      	mov	r3, r2
 8001828:	005b      	lsls	r3, r3, #1
 800182a:	4413      	add	r3, r2
 800182c:	00db      	lsls	r3, r3, #3
 800182e:	440b      	add	r3, r1
 8001830:	330c      	adds	r3, #12
 8001832:	2201      	movs	r2, #1
 8001834:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8001836:	4b09      	ldr	r3, [pc, #36]	; (800185c <UnlinkTimer+0xf8>)
 8001838:	781b      	ldrb	r3, [r3, #0]
 800183a:	b2db      	uxtb	r3, r3
 800183c:	2b06      	cmp	r3, #6
 800183e:	d107      	bne.n	8001850 <UnlinkTimer+0xec>
 8001840:	79bb      	ldrb	r3, [r7, #6]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d104      	bne.n	8001850 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001846:	4b08      	ldr	r3, [pc, #32]	; (8001868 <UnlinkTimer+0x104>)
 8001848:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800184c:	601a      	str	r2, [r3, #0]
  }

  return;
 800184e:	bf00      	nop
 8001850:	bf00      	nop
}
 8001852:	3714      	adds	r7, #20
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr
 800185c:	20000a08 	.word	0x20000a08
 8001860:	20000a09 	.word	0x20000a09
 8001864:	20000978 	.word	0x20000978
 8001868:	20000a0c 	.word	0x20000a0c

0800186c <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b082      	sub	sp, #8
 8001870:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8001872:	4b1a      	ldr	r3, [pc, #104]	; (80018dc <ReturnTimeElapsed+0x70>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800187a:	d026      	beq.n	80018ca <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 800187c:	f7ff fe02 	bl	8001484 <ReadRtcSsrValue>
 8001880:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8001882:	4b16      	ldr	r3, [pc, #88]	; (80018dc <ReturnTimeElapsed+0x70>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	687a      	ldr	r2, [r7, #4]
 8001888:	429a      	cmp	r2, r3
 800188a:	d805      	bhi.n	8001898 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 800188c:	4b13      	ldr	r3, [pc, #76]	; (80018dc <ReturnTimeElapsed+0x70>)
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	1ad3      	subs	r3, r2, r3
 8001894:	607b      	str	r3, [r7, #4]
 8001896:	e00a      	b.n	80018ae <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8001898:	4b11      	ldr	r3, [pc, #68]	; (80018e0 <ReturnTimeElapsed+0x74>)
 800189a:	881b      	ldrh	r3, [r3, #0]
 800189c:	461a      	mov	r2, r3
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	1ad3      	subs	r3, r2, r3
 80018a2:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 80018a4:	4b0d      	ldr	r3, [pc, #52]	; (80018dc <ReturnTimeElapsed+0x70>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	683a      	ldr	r2, [r7, #0]
 80018aa:	4413      	add	r3, r2
 80018ac:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 80018ae:	4b0d      	ldr	r3, [pc, #52]	; (80018e4 <ReturnTimeElapsed+0x78>)
 80018b0:	781b      	ldrb	r3, [r3, #0]
 80018b2:	461a      	mov	r2, r3
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	fb02 f303 	mul.w	r3, r2, r3
 80018ba:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 80018bc:	4b0a      	ldr	r3, [pc, #40]	; (80018e8 <ReturnTimeElapsed+0x7c>)
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	461a      	mov	r2, r3
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	40d3      	lsrs	r3, r2
 80018c6:	607b      	str	r3, [r7, #4]
 80018c8:	e001      	b.n	80018ce <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 80018ca:	2300      	movs	r3, #0
 80018cc:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	b29b      	uxth	r3, r3
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3708      	adds	r7, #8
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	20000a0c 	.word	0x20000a0c
 80018e0:	20000a14 	.word	0x20000a14
 80018e4:	20000a12 	.word	0x20000a12
 80018e8:	20000a11 	.word	0x20000a11

080018ec <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	4603      	mov	r3, r0
 80018f4:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 80018f6:	88fb      	ldrh	r3, [r7, #6]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d108      	bne.n	800190e <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 80018fc:	f7ff fdc2 	bl	8001484 <ReadRtcSsrValue>
 8001900:	4603      	mov	r3, r0
 8001902:	4a21      	ldr	r2, [pc, #132]	; (8001988 <RestartWakeupCounter+0x9c>)
 8001904:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001906:	2003      	movs	r0, #3
 8001908:	f001 fe5b 	bl	80035c2 <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 800190c:	e039      	b.n	8001982 <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 800190e:	88fb      	ldrh	r3, [r7, #6]
 8001910:	2b01      	cmp	r3, #1
 8001912:	d803      	bhi.n	800191c <RestartWakeupCounter+0x30>
 8001914:	4b1d      	ldr	r3, [pc, #116]	; (800198c <RestartWakeupCounter+0xa0>)
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	2b01      	cmp	r3, #1
 800191a:	d002      	beq.n	8001922 <RestartWakeupCounter+0x36>
      Value -= 1;
 800191c:	88fb      	ldrh	r3, [r7, #6]
 800191e:	3b01      	subs	r3, #1
 8001920:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8001922:	bf00      	nop
 8001924:	4b1a      	ldr	r3, [pc, #104]	; (8001990 <RestartWakeupCounter+0xa4>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	68db      	ldr	r3, [r3, #12]
 800192a:	f003 0304 	and.w	r3, r3, #4
 800192e:	2b00      	cmp	r3, #0
 8001930:	d0f8      	beq.n	8001924 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001932:	4b17      	ldr	r3, [pc, #92]	; (8001990 <RestartWakeupCounter+0xa4>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	68db      	ldr	r3, [r3, #12]
 8001938:	b2da      	uxtb	r2, r3
 800193a:	4b15      	ldr	r3, [pc, #84]	; (8001990 <RestartWakeupCounter+0xa4>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001942:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001944:	4b13      	ldr	r3, [pc, #76]	; (8001994 <RestartWakeupCounter+0xa8>)
 8001946:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800194a:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 800194c:	2003      	movs	r0, #3
 800194e:	f001 fe46 	bl	80035de <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8001952:	4b11      	ldr	r3, [pc, #68]	; (8001998 <RestartWakeupCounter+0xac>)
 8001954:	695b      	ldr	r3, [r3, #20]
 8001956:	0c1b      	lsrs	r3, r3, #16
 8001958:	041b      	lsls	r3, r3, #16
 800195a:	88fa      	ldrh	r2, [r7, #6]
 800195c:	490e      	ldr	r1, [pc, #56]	; (8001998 <RestartWakeupCounter+0xac>)
 800195e:	4313      	orrs	r3, r2
 8001960:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8001962:	f7ff fd8f 	bl	8001484 <ReadRtcSsrValue>
 8001966:	4603      	mov	r3, r0
 8001968:	4a07      	ldr	r2, [pc, #28]	; (8001988 <RestartWakeupCounter+0x9c>)
 800196a:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 800196c:	4b08      	ldr	r3, [pc, #32]	; (8001990 <RestartWakeupCounter+0xa4>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	689a      	ldr	r2, [r3, #8]
 8001972:	4b07      	ldr	r3, [pc, #28]	; (8001990 <RestartWakeupCounter+0xa4>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800197a:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 800197c:	f3af 8000 	nop.w
  return ;
 8001980:	bf00      	nop
}
 8001982:	3708      	adds	r7, #8
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}
 8001988:	20000a0c 	.word	0x20000a0c
 800198c:	20000a11 	.word	0x20000a11
 8001990:	20000ae0 	.word	0x20000ae0
 8001994:	58000800 	.word	0x58000800
 8001998:	40002800 	.word	0x40002800

0800199c <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b084      	sub	sp, #16
 80019a0:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 80019a2:	4b45      	ldr	r3, [pc, #276]	; (8001ab8 <RescheduleTimerList+0x11c>)
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019ae:	d107      	bne.n	80019c0 <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 80019b0:	bf00      	nop
 80019b2:	4b42      	ldr	r3, [pc, #264]	; (8001abc <RescheduleTimerList+0x120>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	68db      	ldr	r3, [r3, #12]
 80019b8:	f003 0304 	and.w	r3, r3, #4
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d1f8      	bne.n	80019b2 <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 80019c0:	4b3e      	ldr	r3, [pc, #248]	; (8001abc <RescheduleTimerList+0x120>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	689a      	ldr	r2, [r3, #8]
 80019c6:	4b3d      	ldr	r3, [pc, #244]	; (8001abc <RescheduleTimerList+0x120>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80019ce:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 80019d0:	4b3b      	ldr	r3, [pc, #236]	; (8001ac0 <RescheduleTimerList+0x124>)
 80019d2:	781b      	ldrb	r3, [r3, #0]
 80019d4:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 80019d6:	7bfa      	ldrb	r2, [r7, #15]
 80019d8:	493a      	ldr	r1, [pc, #232]	; (8001ac4 <RescheduleTimerList+0x128>)
 80019da:	4613      	mov	r3, r2
 80019dc:	005b      	lsls	r3, r3, #1
 80019de:	4413      	add	r3, r2
 80019e0:	00db      	lsls	r3, r3, #3
 80019e2:	440b      	add	r3, r1
 80019e4:	3308      	adds	r3, #8
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 80019ea:	f7ff ff3f 	bl	800186c <ReturnTimeElapsed>
 80019ee:	4603      	mov	r3, r0
 80019f0:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 80019f2:	88fb      	ldrh	r3, [r7, #6]
 80019f4:	68ba      	ldr	r2, [r7, #8]
 80019f6:	429a      	cmp	r2, r3
 80019f8:	d205      	bcs.n	8001a06 <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 80019fa:	2300      	movs	r3, #0
 80019fc:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80019fe:	4b32      	ldr	r3, [pc, #200]	; (8001ac8 <RescheduleTimerList+0x12c>)
 8001a00:	2201      	movs	r2, #1
 8001a02:	701a      	strb	r2, [r3, #0]
 8001a04:	e04d      	b.n	8001aa2 <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8001a06:	88fb      	ldrh	r3, [r7, #6]
 8001a08:	4a30      	ldr	r2, [pc, #192]	; (8001acc <RescheduleTimerList+0x130>)
 8001a0a:	8812      	ldrh	r2, [r2, #0]
 8001a0c:	b292      	uxth	r2, r2
 8001a0e:	4413      	add	r3, r2
 8001a10:	461a      	mov	r2, r3
 8001a12:	68bb      	ldr	r3, [r7, #8]
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d906      	bls.n	8001a26 <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8001a18:	4b2c      	ldr	r3, [pc, #176]	; (8001acc <RescheduleTimerList+0x130>)
 8001a1a:	881b      	ldrh	r3, [r3, #0]
 8001a1c:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8001a1e:	4b2a      	ldr	r3, [pc, #168]	; (8001ac8 <RescheduleTimerList+0x12c>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	701a      	strb	r2, [r3, #0]
 8001a24:	e03d      	b.n	8001aa2 <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8001a26:	68bb      	ldr	r3, [r7, #8]
 8001a28:	b29a      	uxth	r2, r3
 8001a2a:	88fb      	ldrh	r3, [r7, #6]
 8001a2c:	1ad3      	subs	r3, r2, r3
 8001a2e:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001a30:	4b25      	ldr	r3, [pc, #148]	; (8001ac8 <RescheduleTimerList+0x12c>)
 8001a32:	2201      	movs	r2, #1
 8001a34:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001a36:	e034      	b.n	8001aa2 <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8001a38:	7bfa      	ldrb	r2, [r7, #15]
 8001a3a:	4922      	ldr	r1, [pc, #136]	; (8001ac4 <RescheduleTimerList+0x128>)
 8001a3c:	4613      	mov	r3, r2
 8001a3e:	005b      	lsls	r3, r3, #1
 8001a40:	4413      	add	r3, r2
 8001a42:	00db      	lsls	r3, r3, #3
 8001a44:	440b      	add	r3, r1
 8001a46:	3308      	adds	r3, #8
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	88fb      	ldrh	r3, [r7, #6]
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	d20a      	bcs.n	8001a66 <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8001a50:	7bfa      	ldrb	r2, [r7, #15]
 8001a52:	491c      	ldr	r1, [pc, #112]	; (8001ac4 <RescheduleTimerList+0x128>)
 8001a54:	4613      	mov	r3, r2
 8001a56:	005b      	lsls	r3, r3, #1
 8001a58:	4413      	add	r3, r2
 8001a5a:	00db      	lsls	r3, r3, #3
 8001a5c:	440b      	add	r3, r1
 8001a5e:	3308      	adds	r3, #8
 8001a60:	2200      	movs	r2, #0
 8001a62:	601a      	str	r2, [r3, #0]
 8001a64:	e013      	b.n	8001a8e <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8001a66:	7bfa      	ldrb	r2, [r7, #15]
 8001a68:	4916      	ldr	r1, [pc, #88]	; (8001ac4 <RescheduleTimerList+0x128>)
 8001a6a:	4613      	mov	r3, r2
 8001a6c:	005b      	lsls	r3, r3, #1
 8001a6e:	4413      	add	r3, r2
 8001a70:	00db      	lsls	r3, r3, #3
 8001a72:	440b      	add	r3, r1
 8001a74:	3308      	adds	r3, #8
 8001a76:	6819      	ldr	r1, [r3, #0]
 8001a78:	88fb      	ldrh	r3, [r7, #6]
 8001a7a:	7bfa      	ldrb	r2, [r7, #15]
 8001a7c:	1ac9      	subs	r1, r1, r3
 8001a7e:	4811      	ldr	r0, [pc, #68]	; (8001ac4 <RescheduleTimerList+0x128>)
 8001a80:	4613      	mov	r3, r2
 8001a82:	005b      	lsls	r3, r3, #1
 8001a84:	4413      	add	r3, r2
 8001a86:	00db      	lsls	r3, r3, #3
 8001a88:	4403      	add	r3, r0
 8001a8a:	3308      	adds	r3, #8
 8001a8c:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8001a8e:	7bfa      	ldrb	r2, [r7, #15]
 8001a90:	490c      	ldr	r1, [pc, #48]	; (8001ac4 <RescheduleTimerList+0x128>)
 8001a92:	4613      	mov	r3, r2
 8001a94:	005b      	lsls	r3, r3, #1
 8001a96:	4413      	add	r3, r2
 8001a98:	00db      	lsls	r3, r3, #3
 8001a9a:	440b      	add	r3, r1
 8001a9c:	3315      	adds	r3, #21
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001aa2:	7bfb      	ldrb	r3, [r7, #15]
 8001aa4:	2b06      	cmp	r3, #6
 8001aa6:	d1c7      	bne.n	8001a38 <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8001aa8:	89bb      	ldrh	r3, [r7, #12]
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f7ff ff1e 	bl	80018ec <RestartWakeupCounter>

  return ;
 8001ab0:	bf00      	nop
}
 8001ab2:	3710      	adds	r7, #16
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	40002800 	.word	0x40002800
 8001abc:	20000ae0 	.word	0x20000ae0
 8001ac0:	20000a08 	.word	0x20000a08
 8001ac4:	20000978 	.word	0x20000978
 8001ac8:	20000a10 	.word	0x20000a10
 8001acc:	20000a16 	.word	0x20000a16

08001ad0 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b08a      	sub	sp, #40	; 0x28
 8001ad4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001ad6:	f3ef 8310 	mrs	r3, PRIMASK
 8001ada:	617b      	str	r3, [r7, #20]
  return(result);
 8001adc:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001ade:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8001ae0:	b672      	cpsid	i
}
 8001ae2:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001ae4:	4b59      	ldr	r3, [pc, #356]	; (8001c4c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	22ca      	movs	r2, #202	; 0xca
 8001aea:	625a      	str	r2, [r3, #36]	; 0x24
 8001aec:	4b57      	ldr	r3, [pc, #348]	; (8001c4c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	2253      	movs	r2, #83	; 0x53
 8001af2:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 8001af4:	4b55      	ldr	r3, [pc, #340]	; (8001c4c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	689a      	ldr	r2, [r3, #8]
 8001afa:	4b54      	ldr	r3, [pc, #336]	; (8001c4c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b02:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8001b04:	4b52      	ldr	r3, [pc, #328]	; (8001c50 <HW_TS_RTC_Wakeup_Handler+0x180>)
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8001b0c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001b10:	4950      	ldr	r1, [pc, #320]	; (8001c54 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001b12:	4613      	mov	r3, r2
 8001b14:	005b      	lsls	r3, r3, #1
 8001b16:	4413      	add	r3, r2
 8001b18:	00db      	lsls	r3, r3, #3
 8001b1a:	440b      	add	r3, r1
 8001b1c:	330c      	adds	r3, #12
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	2b02      	cmp	r3, #2
 8001b24:	d16e      	bne.n	8001c04 <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8001b26:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001b2a:	494a      	ldr	r1, [pc, #296]	; (8001c54 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001b2c:	4613      	mov	r3, r2
 8001b2e:	005b      	lsls	r3, r3, #1
 8001b30:	4413      	add	r3, r2
 8001b32:	00db      	lsls	r3, r3, #3
 8001b34:	440b      	add	r3, r1
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8001b3a:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001b3e:	4945      	ldr	r1, [pc, #276]	; (8001c54 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001b40:	4613      	mov	r3, r2
 8001b42:	005b      	lsls	r3, r3, #1
 8001b44:	4413      	add	r3, r2
 8001b46:	00db      	lsls	r3, r3, #3
 8001b48:	440b      	add	r3, r1
 8001b4a:	3310      	adds	r3, #16
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8001b50:	4b41      	ldr	r3, [pc, #260]	; (8001c58 <HW_TS_RTC_Wakeup_Handler+0x188>)
 8001b52:	781b      	ldrb	r3, [r3, #0]
 8001b54:	b2db      	uxtb	r3, r3
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d04c      	beq.n	8001bf4 <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8001b5a:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001b5e:	493d      	ldr	r1, [pc, #244]	; (8001c54 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001b60:	4613      	mov	r3, r2
 8001b62:	005b      	lsls	r3, r3, #1
 8001b64:	4413      	add	r3, r2
 8001b66:	00db      	lsls	r3, r3, #3
 8001b68:	440b      	add	r3, r1
 8001b6a:	330d      	adds	r3, #13
 8001b6c:	781b      	ldrb	r3, [r3, #0]
 8001b6e:	b2db      	uxtb	r3, r3
 8001b70:	2b01      	cmp	r3, #1
 8001b72:	d124      	bne.n	8001bbe <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8001b74:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001b78:	2101      	movs	r1, #1
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f7ff fdf2 	bl	8001764 <UnlinkTimer>
 8001b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b82:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001b84:	693b      	ldr	r3, [r7, #16]
 8001b86:	f383 8810 	msr	PRIMASK, r3
}
 8001b8a:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8001b8c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001b90:	4930      	ldr	r1, [pc, #192]	; (8001c54 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001b92:	4613      	mov	r3, r2
 8001b94:	005b      	lsls	r3, r3, #1
 8001b96:	4413      	add	r3, r2
 8001b98:	00db      	lsls	r3, r3, #3
 8001b9a:	440b      	add	r3, r1
 8001b9c:	3304      	adds	r3, #4
 8001b9e:	681a      	ldr	r2, [r3, #0]
 8001ba0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001ba4:	4611      	mov	r1, r2
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f000 f9b8 	bl	8001f1c <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001bac:	4b27      	ldr	r3, [pc, #156]	; (8001c4c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	22ca      	movs	r2, #202	; 0xca
 8001bb2:	625a      	str	r2, [r3, #36]	; 0x24
 8001bb4:	4b25      	ldr	r3, [pc, #148]	; (8001c4c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	2253      	movs	r2, #83	; 0x53
 8001bba:	625a      	str	r2, [r3, #36]	; 0x24
 8001bbc:	e012      	b.n	8001be4 <HW_TS_RTC_Wakeup_Handler+0x114>
 8001bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	f383 8810 	msr	PRIMASK, r3
}
 8001bc8:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 8001bca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f000 f920 	bl	8001e14 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001bd4:	4b1d      	ldr	r3, [pc, #116]	; (8001c4c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	22ca      	movs	r2, #202	; 0xca
 8001bda:	625a      	str	r2, [r3, #36]	; 0x24
 8001bdc:	4b1b      	ldr	r3, [pc, #108]	; (8001c4c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	2253      	movs	r2, #83	; 0x53
 8001be2:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8001be4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001be8:	69fa      	ldr	r2, [r7, #28]
 8001bea:	4619      	mov	r1, r3
 8001bec:	69b8      	ldr	r0, [r7, #24]
 8001bee:	f000 fa1b 	bl	8002028 <HW_TS_RTC_Int_AppNot>
 8001bf2:	e022      	b.n	8001c3a <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 8001bf4:	f7ff fed2 	bl	800199c <RescheduleTimerList>
 8001bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bfa:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	f383 8810 	msr	PRIMASK, r3
}
 8001c02:	e01a      	b.n	8001c3a <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8001c04:	bf00      	nop
 8001c06:	4b11      	ldr	r3, [pc, #68]	; (8001c4c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	68db      	ldr	r3, [r3, #12]
 8001c0c:	f003 0304 	and.w	r3, r3, #4
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d0f8      	beq.n	8001c06 <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001c14:	4b0d      	ldr	r3, [pc, #52]	; (8001c4c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	68db      	ldr	r3, [r3, #12]
 8001c1a:	b2da      	uxtb	r2, r3
 8001c1c:	4b0b      	ldr	r3, [pc, #44]	; (8001c4c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001c24:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001c26:	4b0d      	ldr	r3, [pc, #52]	; (8001c5c <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001c28:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001c2c:	60da      	str	r2, [r3, #12]
 8001c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c30:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	f383 8810 	msr	PRIMASK, r3
}
 8001c38:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001c3a:	4b04      	ldr	r3, [pc, #16]	; (8001c4c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	22ff      	movs	r2, #255	; 0xff
 8001c40:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 8001c42:	bf00      	nop
}
 8001c44:	3728      	adds	r7, #40	; 0x28
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	20000ae0 	.word	0x20000ae0
 8001c50:	20000a08 	.word	0x20000a08
 8001c54:	20000978 	.word	0x20000978
 8001c58:	20000a10 	.word	0x20000a10
 8001c5c:	58000800 	.word	0x58000800

08001c60 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b088      	sub	sp, #32
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	4603      	mov	r3, r0
 8001c68:	6039      	str	r1, [r7, #0]
 8001c6a:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001c6c:	4b5e      	ldr	r3, [pc, #376]	; (8001de8 <HW_TS_Init+0x188>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	22ca      	movs	r2, #202	; 0xca
 8001c72:	625a      	str	r2, [r3, #36]	; 0x24
 8001c74:	4b5c      	ldr	r3, [pc, #368]	; (8001de8 <HW_TS_Init+0x188>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	2253      	movs	r2, #83	; 0x53
 8001c7a:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8001c7c:	4b5b      	ldr	r3, [pc, #364]	; (8001dec <HW_TS_Init+0x18c>)
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	4a5a      	ldr	r2, [pc, #360]	; (8001dec <HW_TS_Init+0x18c>)
 8001c82:	f043 0320 	orr.w	r3, r3, #32
 8001c86:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8001c88:	4b58      	ldr	r3, [pc, #352]	; (8001dec <HW_TS_Init+0x18c>)
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	b2db      	uxtb	r3, r3
 8001c8e:	f003 0307 	and.w	r3, r3, #7
 8001c92:	b2db      	uxtb	r3, r3
 8001c94:	f1c3 0304 	rsb	r3, r3, #4
 8001c98:	b2da      	uxtb	r2, r3
 8001c9a:	4b55      	ldr	r3, [pc, #340]	; (8001df0 <HW_TS_Init+0x190>)
 8001c9c:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8001c9e:	4b53      	ldr	r3, [pc, #332]	; (8001dec <HW_TS_Init+0x18c>)
 8001ca0:	691b      	ldr	r3, [r3, #16]
 8001ca2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001ca6:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 8001caa:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cac:	693a      	ldr	r2, [r7, #16]
 8001cae:	fa92 f2a2 	rbit	r2, r2
 8001cb2:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001cb4:	68fa      	ldr	r2, [r7, #12]
 8001cb6:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001cb8:	697a      	ldr	r2, [r7, #20]
 8001cba:	2a00      	cmp	r2, #0
 8001cbc:	d101      	bne.n	8001cc2 <HW_TS_Init+0x62>
  {
    return 32U;
 8001cbe:	2220      	movs	r2, #32
 8001cc0:	e003      	b.n	8001cca <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 8001cc2:	697a      	ldr	r2, [r7, #20]
 8001cc4:	fab2 f282 	clz	r2, r2
 8001cc8:	b2d2      	uxtb	r2, r2
 8001cca:	40d3      	lsrs	r3, r2
 8001ccc:	b2db      	uxtb	r3, r3
 8001cce:	3301      	adds	r3, #1
 8001cd0:	b2da      	uxtb	r2, r3
 8001cd2:	4b48      	ldr	r3, [pc, #288]	; (8001df4 <HW_TS_Init+0x194>)
 8001cd4:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8001cd6:	4b45      	ldr	r3, [pc, #276]	; (8001dec <HW_TS_Init+0x18c>)
 8001cd8:	691b      	ldr	r3, [r3, #16]
 8001cda:	b29b      	uxth	r3, r3
 8001cdc:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001ce0:	b29b      	uxth	r3, r3
 8001ce2:	3301      	adds	r3, #1
 8001ce4:	b29a      	uxth	r2, r3
 8001ce6:	4b44      	ldr	r3, [pc, #272]	; (8001df8 <HW_TS_Init+0x198>)
 8001ce8:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8001cea:	4b43      	ldr	r3, [pc, #268]	; (8001df8 <HW_TS_Init+0x198>)
 8001cec:	881b      	ldrh	r3, [r3, #0]
 8001cee:	3b01      	subs	r3, #1
 8001cf0:	4a40      	ldr	r2, [pc, #256]	; (8001df4 <HW_TS_Init+0x194>)
 8001cf2:	7812      	ldrb	r2, [r2, #0]
 8001cf4:	fb02 f303 	mul.w	r3, r2, r3
 8001cf8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001cfc:	4a3c      	ldr	r2, [pc, #240]	; (8001df0 <HW_TS_Init+0x190>)
 8001cfe:	7812      	ldrb	r2, [r2, #0]
 8001d00:	40d3      	lsrs	r3, r2
 8001d02:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8001d04:	69bb      	ldr	r3, [r7, #24]
 8001d06:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d904      	bls.n	8001d18 <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8001d0e:	4b3b      	ldr	r3, [pc, #236]	; (8001dfc <HW_TS_Init+0x19c>)
 8001d10:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d14:	801a      	strh	r2, [r3, #0]
 8001d16:	e003      	b.n	8001d20 <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8001d18:	69bb      	ldr	r3, [r7, #24]
 8001d1a:	b29a      	uxth	r2, r3
 8001d1c:	4b37      	ldr	r3, [pc, #220]	; (8001dfc <HW_TS_Init+0x19c>)
 8001d1e:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8001d20:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001d24:	f7ff fb9c 	bl	8001460 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8001d28:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001d2c:	f7ff fb84 	bl	8001438 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8001d30:	79fb      	ldrb	r3, [r7, #7]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d13d      	bne.n	8001db2 <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001d36:	4b32      	ldr	r3, [pc, #200]	; (8001e00 <HW_TS_Init+0x1a0>)
 8001d38:	2201      	movs	r2, #1
 8001d3a:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001d3c:	4b31      	ldr	r3, [pc, #196]	; (8001e04 <HW_TS_Init+0x1a4>)
 8001d3e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001d42:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8001d44:	2300      	movs	r3, #0
 8001d46:	77fb      	strb	r3, [r7, #31]
 8001d48:	e00c      	b.n	8001d64 <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8001d4a:	7ffa      	ldrb	r2, [r7, #31]
 8001d4c:	492e      	ldr	r1, [pc, #184]	; (8001e08 <HW_TS_Init+0x1a8>)
 8001d4e:	4613      	mov	r3, r2
 8001d50:	005b      	lsls	r3, r3, #1
 8001d52:	4413      	add	r3, r2
 8001d54:	00db      	lsls	r3, r3, #3
 8001d56:	440b      	add	r3, r1
 8001d58:	330c      	adds	r3, #12
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8001d5e:	7ffb      	ldrb	r3, [r7, #31]
 8001d60:	3301      	adds	r3, #1
 8001d62:	77fb      	strb	r3, [r7, #31]
 8001d64:	7ffb      	ldrb	r3, [r7, #31]
 8001d66:	2b05      	cmp	r3, #5
 8001d68:	d9ef      	bls.n	8001d4a <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8001d6a:	4b28      	ldr	r3, [pc, #160]	; (8001e0c <HW_TS_Init+0x1ac>)
 8001d6c:	2206      	movs	r2, #6
 8001d6e:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 8001d70:	4b1d      	ldr	r3, [pc, #116]	; (8001de8 <HW_TS_Init+0x188>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	689a      	ldr	r2, [r3, #8]
 8001d76:	4b1c      	ldr	r3, [pc, #112]	; (8001de8 <HW_TS_Init+0x188>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d7e:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8001d80:	4b19      	ldr	r3, [pc, #100]	; (8001de8 <HW_TS_Init+0x188>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	68db      	ldr	r3, [r3, #12]
 8001d86:	b2da      	uxtb	r2, r3
 8001d88:	4b17      	ldr	r3, [pc, #92]	; (8001de8 <HW_TS_Init+0x188>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001d90:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8001d92:	4b1f      	ldr	r3, [pc, #124]	; (8001e10 <HW_TS_Init+0x1b0>)
 8001d94:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001d98:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8001d9a:	2003      	movs	r0, #3
 8001d9c:	f001 fc1f 	bl	80035de <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8001da0:	4b11      	ldr	r3, [pc, #68]	; (8001de8 <HW_TS_Init+0x188>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	689a      	ldr	r2, [r3, #8]
 8001da6:	4b10      	ldr	r3, [pc, #64]	; (8001de8 <HW_TS_Init+0x188>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001dae:	609a      	str	r2, [r3, #8]
 8001db0:	e009      	b.n	8001dc6 <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 8001db2:	4b0d      	ldr	r3, [pc, #52]	; (8001de8 <HW_TS_Init+0x188>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	68db      	ldr	r3, [r3, #12]
 8001db8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d002      	beq.n	8001dc6 <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001dc0:	2003      	movs	r0, #3
 8001dc2:	f001 fbfe 	bl	80035c2 <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001dc6:	4b08      	ldr	r3, [pc, #32]	; (8001de8 <HW_TS_Init+0x188>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	22ff      	movs	r2, #255	; 0xff
 8001dcc:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8001dce:	2200      	movs	r2, #0
 8001dd0:	2103      	movs	r1, #3
 8001dd2:	2003      	movs	r0, #3
 8001dd4:	f001 fbb3 	bl	800353e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001dd8:	2003      	movs	r0, #3
 8001dda:	f001 fbca 	bl	8003572 <HAL_NVIC_EnableIRQ>

  return;
 8001dde:	bf00      	nop
}
 8001de0:	3720      	adds	r7, #32
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	20000ae0 	.word	0x20000ae0
 8001dec:	40002800 	.word	0x40002800
 8001df0:	20000a11 	.word	0x20000a11
 8001df4:	20000a12 	.word	0x20000a12
 8001df8:	20000a14 	.word	0x20000a14
 8001dfc:	20000a16 	.word	0x20000a16
 8001e00:	20000a10 	.word	0x20000a10
 8001e04:	20000a0c 	.word	0x20000a0c
 8001e08:	20000978 	.word	0x20000978
 8001e0c:	20000a08 	.word	0x20000a08
 8001e10:	58000800 	.word	0x58000800

08001e14 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b086      	sub	sp, #24
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001e1e:	f3ef 8310 	mrs	r3, PRIMASK
 8001e22:	60fb      	str	r3, [r7, #12]
  return(result);
 8001e24:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001e26:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001e28:	b672      	cpsid	i
}
 8001e2a:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001e2c:	2003      	movs	r0, #3
 8001e2e:	f001 fbae 	bl	800358e <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001e32:	4b34      	ldr	r3, [pc, #208]	; (8001f04 <HW_TS_Stop+0xf0>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	22ca      	movs	r2, #202	; 0xca
 8001e38:	625a      	str	r2, [r3, #36]	; 0x24
 8001e3a:	4b32      	ldr	r3, [pc, #200]	; (8001f04 <HW_TS_Stop+0xf0>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	2253      	movs	r2, #83	; 0x53
 8001e40:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001e42:	79fa      	ldrb	r2, [r7, #7]
 8001e44:	4930      	ldr	r1, [pc, #192]	; (8001f08 <HW_TS_Stop+0xf4>)
 8001e46:	4613      	mov	r3, r2
 8001e48:	005b      	lsls	r3, r3, #1
 8001e4a:	4413      	add	r3, r2
 8001e4c:	00db      	lsls	r3, r3, #3
 8001e4e:	440b      	add	r3, r1
 8001e50:	330c      	adds	r3, #12
 8001e52:	781b      	ldrb	r3, [r3, #0]
 8001e54:	b2db      	uxtb	r3, r3
 8001e56:	2b02      	cmp	r3, #2
 8001e58:	d142      	bne.n	8001ee0 <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8001e5a:	79fb      	ldrb	r3, [r7, #7]
 8001e5c:	2100      	movs	r1, #0
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f7ff fc80 	bl	8001764 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8001e64:	4b29      	ldr	r3, [pc, #164]	; (8001f0c <HW_TS_Stop+0xf8>)
 8001e66:	781b      	ldrb	r3, [r3, #0]
 8001e68:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001e6a:	7cfb      	ldrb	r3, [r7, #19]
 8001e6c:	2b06      	cmp	r3, #6
 8001e6e:	d12f      	bne.n	8001ed0 <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8001e70:	4b27      	ldr	r3, [pc, #156]	; (8001f10 <HW_TS_Stop+0xfc>)
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e7c:	d107      	bne.n	8001e8e <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8001e7e:	bf00      	nop
 8001e80:	4b20      	ldr	r3, [pc, #128]	; (8001f04 <HW_TS_Stop+0xf0>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	68db      	ldr	r3, [r3, #12]
 8001e86:	f003 0304 	and.w	r3, r3, #4
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d1f8      	bne.n	8001e80 <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8001e8e:	4b1d      	ldr	r3, [pc, #116]	; (8001f04 <HW_TS_Stop+0xf0>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	689a      	ldr	r2, [r3, #8]
 8001e94:	4b1b      	ldr	r3, [pc, #108]	; (8001f04 <HW_TS_Stop+0xf0>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e9c:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8001e9e:	bf00      	nop
 8001ea0:	4b18      	ldr	r3, [pc, #96]	; (8001f04 <HW_TS_Stop+0xf0>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	68db      	ldr	r3, [r3, #12]
 8001ea6:	f003 0304 	and.w	r3, r3, #4
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d0f8      	beq.n	8001ea0 <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001eae:	4b15      	ldr	r3, [pc, #84]	; (8001f04 <HW_TS_Stop+0xf0>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	68db      	ldr	r3, [r3, #12]
 8001eb4:	b2da      	uxtb	r2, r3
 8001eb6:	4b13      	ldr	r3, [pc, #76]	; (8001f04 <HW_TS_Stop+0xf0>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001ebe:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001ec0:	4b14      	ldr	r3, [pc, #80]	; (8001f14 <HW_TS_Stop+0x100>)
 8001ec2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001ec6:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001ec8:	2003      	movs	r0, #3
 8001eca:	f001 fb88 	bl	80035de <HAL_NVIC_ClearPendingIRQ>
 8001ece:	e007      	b.n	8001ee0 <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001ed0:	4b11      	ldr	r3, [pc, #68]	; (8001f18 <HW_TS_Stop+0x104>)
 8001ed2:	781b      	ldrb	r3, [r3, #0]
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	7cfa      	ldrb	r2, [r7, #19]
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	d001      	beq.n	8001ee0 <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 8001edc:	f7ff fd5e 	bl	800199c <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001ee0:	4b08      	ldr	r3, [pc, #32]	; (8001f04 <HW_TS_Stop+0xf0>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	22ff      	movs	r2, #255	; 0xff
 8001ee6:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001ee8:	2003      	movs	r0, #3
 8001eea:	f001 fb42 	bl	8003572 <HAL_NVIC_EnableIRQ>
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001ef2:	68bb      	ldr	r3, [r7, #8]
 8001ef4:	f383 8810 	msr	PRIMASK, r3
}
 8001ef8:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8001efa:	bf00      	nop
}
 8001efc:	3718      	adds	r7, #24
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	20000ae0 	.word	0x20000ae0
 8001f08:	20000978 	.word	0x20000978
 8001f0c:	20000a08 	.word	0x20000a08
 8001f10:	40002800 	.word	0x40002800
 8001f14:	58000800 	.word	0x58000800
 8001f18:	20000a09 	.word	0x20000a09

08001f1c <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b086      	sub	sp, #24
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	4603      	mov	r3, r0
 8001f24:	6039      	str	r1, [r7, #0]
 8001f26:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001f28:	79fa      	ldrb	r2, [r7, #7]
 8001f2a:	493b      	ldr	r1, [pc, #236]	; (8002018 <HW_TS_Start+0xfc>)
 8001f2c:	4613      	mov	r3, r2
 8001f2e:	005b      	lsls	r3, r3, #1
 8001f30:	4413      	add	r3, r2
 8001f32:	00db      	lsls	r3, r3, #3
 8001f34:	440b      	add	r3, r1
 8001f36:	330c      	adds	r3, #12
 8001f38:	781b      	ldrb	r3, [r3, #0]
 8001f3a:	b2db      	uxtb	r3, r3
 8001f3c:	2b02      	cmp	r3, #2
 8001f3e:	d103      	bne.n	8001f48 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8001f40:	79fb      	ldrb	r3, [r7, #7]
 8001f42:	4618      	mov	r0, r3
 8001f44:	f7ff ff66 	bl	8001e14 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001f48:	f3ef 8310 	mrs	r3, PRIMASK
 8001f4c:	60fb      	str	r3, [r7, #12]
  return(result);
 8001f4e:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001f50:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001f52:	b672      	cpsid	i
}
 8001f54:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001f56:	2003      	movs	r0, #3
 8001f58:	f001 fb19 	bl	800358e <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001f5c:	4b2f      	ldr	r3, [pc, #188]	; (800201c <HW_TS_Start+0x100>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	22ca      	movs	r2, #202	; 0xca
 8001f62:	625a      	str	r2, [r3, #36]	; 0x24
 8001f64:	4b2d      	ldr	r3, [pc, #180]	; (800201c <HW_TS_Start+0x100>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	2253      	movs	r2, #83	; 0x53
 8001f6a:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8001f6c:	79fa      	ldrb	r2, [r7, #7]
 8001f6e:	492a      	ldr	r1, [pc, #168]	; (8002018 <HW_TS_Start+0xfc>)
 8001f70:	4613      	mov	r3, r2
 8001f72:	005b      	lsls	r3, r3, #1
 8001f74:	4413      	add	r3, r2
 8001f76:	00db      	lsls	r3, r3, #3
 8001f78:	440b      	add	r3, r1
 8001f7a:	330c      	adds	r3, #12
 8001f7c:	2202      	movs	r2, #2
 8001f7e:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8001f80:	79fa      	ldrb	r2, [r7, #7]
 8001f82:	4925      	ldr	r1, [pc, #148]	; (8002018 <HW_TS_Start+0xfc>)
 8001f84:	4613      	mov	r3, r2
 8001f86:	005b      	lsls	r3, r3, #1
 8001f88:	4413      	add	r3, r2
 8001f8a:	00db      	lsls	r3, r3, #3
 8001f8c:	440b      	add	r3, r1
 8001f8e:	3308      	adds	r3, #8
 8001f90:	683a      	ldr	r2, [r7, #0]
 8001f92:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8001f94:	79fa      	ldrb	r2, [r7, #7]
 8001f96:	4920      	ldr	r1, [pc, #128]	; (8002018 <HW_TS_Start+0xfc>)
 8001f98:	4613      	mov	r3, r2
 8001f9a:	005b      	lsls	r3, r3, #1
 8001f9c:	4413      	add	r3, r2
 8001f9e:	00db      	lsls	r3, r3, #3
 8001fa0:	440b      	add	r3, r1
 8001fa2:	3304      	adds	r3, #4
 8001fa4:	683a      	ldr	r2, [r7, #0]
 8001fa6:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8001fa8:	79fb      	ldrb	r3, [r7, #7]
 8001faa:	4618      	mov	r0, r3
 8001fac:	f7ff fb30 	bl	8001610 <linkTimer>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8001fb4:	4b1a      	ldr	r3, [pc, #104]	; (8002020 <HW_TS_Start+0x104>)
 8001fb6:	781b      	ldrb	r3, [r3, #0]
 8001fb8:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001fba:	4b1a      	ldr	r3, [pc, #104]	; (8002024 <HW_TS_Start+0x108>)
 8001fbc:	781b      	ldrb	r3, [r3, #0]
 8001fbe:	b2db      	uxtb	r3, r3
 8001fc0:	7c7a      	ldrb	r2, [r7, #17]
 8001fc2:	429a      	cmp	r2, r3
 8001fc4:	d002      	beq.n	8001fcc <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 8001fc6:	f7ff fce9 	bl	800199c <RescheduleTimerList>
 8001fca:	e013      	b.n	8001ff4 <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8001fcc:	79fa      	ldrb	r2, [r7, #7]
 8001fce:	4912      	ldr	r1, [pc, #72]	; (8002018 <HW_TS_Start+0xfc>)
 8001fd0:	4613      	mov	r3, r2
 8001fd2:	005b      	lsls	r3, r3, #1
 8001fd4:	4413      	add	r3, r2
 8001fd6:	00db      	lsls	r3, r3, #3
 8001fd8:	440b      	add	r3, r1
 8001fda:	3308      	adds	r3, #8
 8001fdc:	6819      	ldr	r1, [r3, #0]
 8001fde:	8a7b      	ldrh	r3, [r7, #18]
 8001fe0:	79fa      	ldrb	r2, [r7, #7]
 8001fe2:	1ac9      	subs	r1, r1, r3
 8001fe4:	480c      	ldr	r0, [pc, #48]	; (8002018 <HW_TS_Start+0xfc>)
 8001fe6:	4613      	mov	r3, r2
 8001fe8:	005b      	lsls	r3, r3, #1
 8001fea:	4413      	add	r3, r2
 8001fec:	00db      	lsls	r3, r3, #3
 8001fee:	4403      	add	r3, r0
 8001ff0:	3308      	adds	r3, #8
 8001ff2:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001ff4:	4b09      	ldr	r3, [pc, #36]	; (800201c <HW_TS_Start+0x100>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	22ff      	movs	r2, #255	; 0xff
 8001ffa:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001ffc:	2003      	movs	r0, #3
 8001ffe:	f001 fab8 	bl	8003572 <HAL_NVIC_EnableIRQ>
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002006:	68bb      	ldr	r3, [r7, #8]
 8002008:	f383 8810 	msr	PRIMASK, r3
}
 800200c:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 800200e:	bf00      	nop
}
 8002010:	3718      	adds	r7, #24
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	20000978 	.word	0x20000978
 800201c:	20000ae0 	.word	0x20000ae0
 8002020:	20000a08 	.word	0x20000a08
 8002024:	20000a09 	.word	0x20000a09

08002028 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b084      	sub	sp, #16
 800202c:	af00      	add	r7, sp, #0
 800202e:	60f8      	str	r0, [r7, #12]
 8002030:	460b      	mov	r3, r1
 8002032:	607a      	str	r2, [r7, #4]
 8002034:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	4798      	blx	r3

  return;
 800203a:	bf00      	nop
}
 800203c:	3710      	adds	r7, #16
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}

08002042 <LL_RCC_LSE_SetDriveCapability>:
{
 8002042:	b480      	push	{r7}
 8002044:	b083      	sub	sp, #12
 8002046:	af00      	add	r7, sp, #0
 8002048:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 800204a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800204e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002052:	f023 0218 	bic.w	r2, r3, #24
 8002056:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	4313      	orrs	r3, r2
 800205e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002062:	bf00      	nop
 8002064:	370c      	adds	r7, #12
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr

0800206e <LL_AHB1_GRP1_EnableClock>:
{
 800206e:	b480      	push	{r7}
 8002070:	b085      	sub	sp, #20
 8002072:	af00      	add	r7, sp, #0
 8002074:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8002076:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800207a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800207c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	4313      	orrs	r3, r2
 8002084:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8002086:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800208a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	4013      	ands	r3, r2
 8002090:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002092:	68fb      	ldr	r3, [r7, #12]
}
 8002094:	bf00      	nop
 8002096:	3714      	adds	r7, #20
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr

080020a0 <LL_AHB2_GRP1_EnableClock>:
{
 80020a0:	b480      	push	{r7}
 80020a2:	b085      	sub	sp, #20
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80020a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020ac:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80020ae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	4313      	orrs	r3, r2
 80020b6:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80020b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020bc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	4013      	ands	r3, r2
 80020c2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80020c4:	68fb      	ldr	r3, [r7, #12]
}
 80020c6:	bf00      	nop
 80020c8:	3714      	adds	r7, #20
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr
	...

080020d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80020d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020d6:	f2ad 6d74 	subw	sp, sp, #1652	; 0x674
 80020da:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80020dc:	f001 f862 	bl	80031a4 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 80020e0:	f7fe ffd2 	bl	8001088 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80020e4:	f000 fa1e 	bl	8002524 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80020e8:	f000 fa7e 	bl	80025e8 <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 80020ec:	f000 fadc 	bl	80026a8 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80020f0:	f000 fbfc 	bl	80028ec <MX_GPIO_Init>
  MX_DMA_Init();
 80020f4:	f000 fbe0 	bl	80028b8 <MX_DMA_Init>
  MX_RTC_Init();
 80020f8:	f000 fb1e 	bl	8002738 <MX_RTC_Init>
  MX_I2C1_Init();
 80020fc:	f000 fa94 	bl	8002628 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8002100:	f000 fb8c 	bl	800281c <MX_USART1_UART_Init>
  MX_LPTIM1_Init();
 8002104:	f000 fae4 	bl	80026d0 <MX_LPTIM1_Init>
  MX_SPI1_Init();
 8002108:	f000 fb4a 	bl	80027a0 <MX_SPI1_Init>
  MX_RF_Init();
 800210c:	f000 fb0c 	bl	8002728 <MX_RF_Init>
  /* USER CODE BEGIN 2 */

  /* Set up heart rate sensor */
  uint8_t status;									//see BH1780GLC.h for err codes

  printf("Configuring PPG sensor...");
 8002110:	48cb      	ldr	r0, [pc, #812]	; (8002440 <main+0x36c>)
 8002112:	f00a f96f 	bl	800c3f4 <iprintf>
  HAL_Delay(10);									//wait as a precaution
 8002116:	200a      	movs	r0, #10
 8002118:	f7ff f92b 	bl	8001372 <HAL_Delay>
  status = BH1790GLC_init(&hrm, &hi2c1);			//configure sensor
 800211c:	49c9      	ldr	r1, [pc, #804]	; (8002444 <main+0x370>)
 800211e:	48ca      	ldr	r0, [pc, #808]	; (8002448 <main+0x374>)
 8002120:	f7fe fa08 	bl	8000534 <BH1790GLC_init>
 8002124:	4603      	mov	r3, r0
 8002126:	f887 362f 	strb.w	r3, [r7, #1583]	; 0x62f
  if(status != 0){
 800212a:	f897 362f 	ldrb.w	r3, [r7, #1583]	; 0x62f
 800212e:	2b00      	cmp	r3, #0
 8002130:	d009      	beq.n	8002146 <main+0x72>
	  printf("Error configuring sensor. Status code: %d\n\r", status);
 8002132:	f897 362f 	ldrb.w	r3, [r7, #1583]	; 0x62f
 8002136:	4619      	mov	r1, r3
 8002138:	48c4      	ldr	r0, [pc, #784]	; (800244c <main+0x378>)
 800213a:	f00a f95b 	bl	800c3f4 <iprintf>
	  sensorReady = 0;
 800213e:	4bc4      	ldr	r3, [pc, #784]	; (8002450 <main+0x37c>)
 8002140:	2200      	movs	r2, #0
 8002142:	701a      	strb	r2, [r3, #0]
 8002144:	e008      	b.n	8002158 <main+0x84>
  }else{
	  printf("Sensor configured successfully. Status code: %d\n\r", status);
 8002146:	f897 362f 	ldrb.w	r3, [r7, #1583]	; 0x62f
 800214a:	4619      	mov	r1, r3
 800214c:	48c1      	ldr	r0, [pc, #772]	; (8002454 <main+0x380>)
 800214e:	f00a f951 	bl	800c3f4 <iprintf>
	  sensorReady = 1;
 8002152:	4bbf      	ldr	r3, [pc, #764]	; (8002450 <main+0x37c>)
 8002154:	2201      	movs	r2, #1
 8002156:	701a      	strb	r2, [r3, #0]
  }

  /* Set up timer */
  if(HAL_LPTIM_TimeOut_Start_IT(&hlptim1, PERIOD, TIMEOUT) != HAL_OK){  //pointer to the handler, period, timeout val to start the timer
 8002158:	2200      	movs	r2, #0
 800215a:	f44f 6183 	mov.w	r1, #1048	; 0x418
 800215e:	48be      	ldr	r0, [pc, #760]	; (8002458 <main+0x384>)
 8002160:	f002 fe94 	bl	8004e8c <HAL_LPTIM_TimeOut_Start_IT>
 8002164:	4603      	mov	r3, r0
 8002166:	2b00      	cmp	r3, #0
 8002168:	d001      	beq.n	800216e <main+0x9a>
	  Error_Handler();
 800216a:	f000 fc3b 	bl	80029e4 <Error_Handler>
  }

  /* Set up IMU */
  printf("Configuring IMU...");
 800216e:	48bb      	ldr	r0, [pc, #748]	; (800245c <main+0x388>)
 8002170:	f00a f940 	bl	800c3f4 <iprintf>
  HAL_Delay(10);
 8002174:	200a      	movs	r0, #10
 8002176:	f7ff f8fc 	bl	8001372 <HAL_Delay>
  ICM_SelectBank(&imu, USER_BANK_0);
 800217a:	2100      	movs	r1, #0
 800217c:	48b8      	ldr	r0, [pc, #736]	; (8002460 <main+0x38c>)
 800217e:	f7fe fd6f 	bl	8000c60 <ICM_SelectBank>
  HAL_Delay(10);
 8002182:	200a      	movs	r0, #10
 8002184:	f7ff f8f5 	bl	8001372 <HAL_Delay>
  ICM_PowerOn(&imu, &hspi1);
 8002188:	49b6      	ldr	r1, [pc, #728]	; (8002464 <main+0x390>)
 800218a:	48b5      	ldr	r0, [pc, #724]	; (8002460 <main+0x38c>)
 800218c:	f7fe fc28 	bl	80009e0 <ICM_PowerOn>
  HAL_Delay(10);
 8002190:	200a      	movs	r0, #10
 8002192:	f7ff f8ee 	bl	8001372 <HAL_Delay>


  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 8002196:	f7fe ff85 	bl	80010a4 <MX_APPE_Init>
  /* USER CODE BEGIN WHILE */
  // TO DO: FIGURE OUT IF THIS IS A GOOD IDEA... HAL_PWREx_EnterSTOP1Mode(PWR_STOPENTRY_WFI);	//enter low power mode

  // ENTER PEAK DETECTION ALGO

  uint16_t raw_data[160] = {
 800219a:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 800219e:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 80021a2:	4ab1      	ldr	r2, [pc, #708]	; (8002468 <main+0x394>)
 80021a4:	4618      	mov	r0, r3
 80021a6:	4611      	mov	r1, r2
 80021a8:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80021ac:	461a      	mov	r2, r3
 80021ae:	f00a f90b 	bl	800c3c8 <memcpy>

  uint16_t smooth_array[160];
  int deriv_array[159];

  uint16_t raw_data_1;
  float smooth_data_1 = 0;
 80021b2:	f04f 0300 	mov.w	r3, #0
 80021b6:	f207 624c 	addw	r2, r7, #1612	; 0x64c
 80021ba:	6013      	str	r3, [r2, #0]
  float lpf_beta = 0.15;
 80021bc:	4bab      	ldr	r3, [pc, #684]	; (800246c <main+0x398>)
 80021be:	f507 62c5 	add.w	r2, r7, #1576	; 0x628
 80021c2:	6013      	str	r3, [r2, #0]

  for(int i = 0; i < 160; i++){
 80021c4:	2300      	movs	r3, #0
 80021c6:	f8c7 3648 	str.w	r3, [r7, #1608]	; 0x648
 80021ca:	e079      	b.n	80022c0 <main+0x1ec>

	  raw_data_1 = raw_data[i];
 80021cc:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 80021d0:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 80021d4:	f8d7 2648 	ldr.w	r2, [r7, #1608]	; 0x648
 80021d8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80021dc:	f8a7 3620 	strh.w	r3, [r7, #1568]	; 0x620
	  smooth_data_1 = smooth_data_1 - (lpf_beta*(smooth_data_1 - raw_data_1));
 80021e0:	f8b7 3620 	ldrh.w	r3, [r7, #1568]	; 0x620
 80021e4:	ee07 3a90 	vmov	s15, r3
 80021e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021ec:	f207 634c 	addw	r3, r7, #1612	; 0x64c
 80021f0:	ed93 7a00 	vldr	s14, [r3]
 80021f4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80021f8:	f507 63c5 	add.w	r3, r7, #1576	; 0x628
 80021fc:	edd3 7a00 	vldr	s15, [r3]
 8002200:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002204:	f207 634c 	addw	r3, r7, #1612	; 0x64c
 8002208:	ed93 7a00 	vldr	s14, [r3]
 800220c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002210:	f207 634c 	addw	r3, r7, #1612	; 0x64c
 8002214:	edc3 7a00 	vstr	s15, [r3]
	  smooth_array[i] = smooth_data_1;
 8002218:	f207 634c 	addw	r3, r7, #1612	; 0x64c
 800221c:	edd3 7a00 	vldr	s15, [r3]
 8002220:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002224:	ee17 3a90 	vmov	r3, s15
 8002228:	b299      	uxth	r1, r3
 800222a:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 800222e:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 8002232:	f8d7 2648 	ldr.w	r2, [r7, #1608]	; 0x648
 8002236:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	  if(i!=0){
 800223a:	f8d7 3648 	ldr.w	r3, [r7, #1608]	; 0x648
 800223e:	2b00      	cmp	r3, #0
 8002240:	d039      	beq.n	80022b6 <main+0x1e2>


		  int deriv = (int)smooth_array[i] - (int)smooth_array[i-1];
 8002242:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 8002246:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 800224a:	f8d7 2648 	ldr.w	r2, [r7, #1608]	; 0x648
 800224e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002252:	4619      	mov	r1, r3
 8002254:	f8d7 3648 	ldr.w	r3, [r7, #1608]	; 0x648
 8002258:	1e5a      	subs	r2, r3, #1
 800225a:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 800225e:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 8002262:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002266:	1acb      	subs	r3, r1, r3
 8002268:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
		  if(deriv<255 || deriv>-255){
 800226c:	f8d7 361c 	ldr.w	r3, [r7, #1564]	; 0x61c
 8002270:	2bfe      	cmp	r3, #254	; 0xfe
 8002272:	dd04      	ble.n	800227e <main+0x1aa>
 8002274:	f8d7 361c 	ldr.w	r3, [r7, #1564]	; 0x61c
 8002278:	f113 0ffe 	cmn.w	r3, #254	; 0xfe
 800227c:	db0a      	blt.n	8002294 <main+0x1c0>

			 deriv_array[i] = deriv;
 800227e:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 8002282:	f5a3 63bf 	sub.w	r3, r3, #1528	; 0x5f8
 8002286:	f8d7 2648 	ldr.w	r2, [r7, #1608]	; 0x648
 800228a:	f8d7 161c 	ldr.w	r1, [r7, #1564]	; 0x61c
 800228e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8002292:	e010      	b.n	80022b6 <main+0x1e2>

		  } else {

			 deriv_array[i] = deriv_array[i-1];
 8002294:	f8d7 3648 	ldr.w	r3, [r7, #1608]	; 0x648
 8002298:	1e5a      	subs	r2, r3, #1
 800229a:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 800229e:	f5a3 63bf 	sub.w	r3, r3, #1528	; 0x5f8
 80022a2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80022a6:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 80022aa:	f5a3 63bf 	sub.w	r3, r3, #1528	; 0x5f8
 80022ae:	f8d7 2648 	ldr.w	r2, [r7, #1608]	; 0x648
 80022b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(int i = 0; i < 160; i++){
 80022b6:	f8d7 3648 	ldr.w	r3, [r7, #1608]	; 0x648
 80022ba:	3301      	adds	r3, #1
 80022bc:	f8c7 3648 	str.w	r3, [r7, #1608]	; 0x648
 80022c0:	f8d7 3648 	ldr.w	r3, [r7, #1608]	; 0x648
 80022c4:	2b9f      	cmp	r3, #159	; 0x9f
 80022c6:	dd81      	ble.n	80021cc <main+0xf8>

	  }

  }

  int pos = 0;
 80022c8:	2300      	movs	r3, #0
 80022ca:	f8c7 3644 	str.w	r3, [r7, #1604]	; 0x644
  int neg = 0;
 80022ce:	2300      	movs	r3, #0
 80022d0:	f8c7 3640 	str.w	r3, [r7, #1600]	; 0x640

  int pos_check = 0;
 80022d4:	2300      	movs	r3, #0
 80022d6:	f8c7 363c 	str.w	r3, [r7, #1596]	; 0x63c
  int neg_check = 0;
 80022da:	2300      	movs	r3, #0
 80022dc:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624

  int peak_vals[20] = {};
 80022e0:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 80022e4:	f5a3 63c9 	sub.w	r3, r3, #1608	; 0x648
 80022e8:	4618      	mov	r0, r3
 80022ea:	2350      	movs	r3, #80	; 0x50
 80022ec:	461a      	mov	r2, r3
 80022ee:	2100      	movs	r1, #0
 80022f0:	f00a f878 	bl	800c3e4 <memset>
  int peak_count = 0;
 80022f4:	2300      	movs	r3, #0
 80022f6:	f8c7 3638 	str.w	r3, [r7, #1592]	; 0x638


  for(int j = 0; j < 159; j++){
 80022fa:	2300      	movs	r3, #0
 80022fc:	f8c7 3634 	str.w	r3, [r7, #1588]	; 0x634
 8002300:	e066      	b.n	80023d0 <main+0x2fc>



	  if(deriv_array[j]>0 && pos_check==0){
 8002302:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 8002306:	f5a3 63bf 	sub.w	r3, r3, #1528	; 0x5f8
 800230a:	f8d7 2634 	ldr.w	r2, [r7, #1588]	; 0x634
 800230e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002312:	2b00      	cmp	r3, #0
 8002314:	dd13      	ble.n	800233e <main+0x26a>
 8002316:	f8d7 363c 	ldr.w	r3, [r7, #1596]	; 0x63c
 800231a:	2b00      	cmp	r3, #0
 800231c:	d10f      	bne.n	800233e <main+0x26a>

		  neg = 0;
 800231e:	2300      	movs	r3, #0
 8002320:	f8c7 3640 	str.w	r3, [r7, #1600]	; 0x640
		  pos++;
 8002324:	f8d7 3644 	ldr.w	r3, [r7, #1604]	; 0x644
 8002328:	3301      	adds	r3, #1
 800232a:	f8c7 3644 	str.w	r3, [r7, #1604]	; 0x644

		  if(pos==3){
 800232e:	f8d7 3644 	ldr.w	r3, [r7, #1604]	; 0x644
 8002332:	2b03      	cmp	r3, #3
 8002334:	d147      	bne.n	80023c6 <main+0x2f2>

			  pos_check = 1;
 8002336:	2301      	movs	r3, #1
 8002338:	f8c7 363c 	str.w	r3, [r7, #1596]	; 0x63c
		  if(pos==3){
 800233c:	e043      	b.n	80023c6 <main+0x2f2>

		  }

	  } else if (deriv_array[j]<0 && pos_check==1) {
 800233e:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 8002342:	f5a3 63bf 	sub.w	r3, r3, #1528	; 0x5f8
 8002346:	f8d7 2634 	ldr.w	r2, [r7, #1588]	; 0x634
 800234a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800234e:	2b00      	cmp	r3, #0
 8002350:	da28      	bge.n	80023a4 <main+0x2d0>
 8002352:	f8d7 363c 	ldr.w	r3, [r7, #1596]	; 0x63c
 8002356:	2b01      	cmp	r3, #1
 8002358:	d124      	bne.n	80023a4 <main+0x2d0>

		  pos = 0;
 800235a:	2300      	movs	r3, #0
 800235c:	f8c7 3644 	str.w	r3, [r7, #1604]	; 0x644
		  neg++;
 8002360:	f8d7 3640 	ldr.w	r3, [r7, #1600]	; 0x640
 8002364:	3301      	adds	r3, #1
 8002366:	f8c7 3640 	str.w	r3, [r7, #1600]	; 0x640

		  if(neg==3){
 800236a:	f8d7 3640 	ldr.w	r3, [r7, #1600]	; 0x640
 800236e:	2b03      	cmp	r3, #3
 8002370:	d129      	bne.n	80023c6 <main+0x2f2>

			  neg_check = 1;
 8002372:	2301      	movs	r3, #1
 8002374:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624
			  peak_vals[peak_count] = j;
 8002378:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 800237c:	f5a3 63c9 	sub.w	r3, r3, #1608	; 0x648
 8002380:	f8d7 2638 	ldr.w	r2, [r7, #1592]	; 0x638
 8002384:	f8d7 1634 	ldr.w	r1, [r7, #1588]	; 0x634
 8002388:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			  peak_count++;
 800238c:	f8d7 3638 	ldr.w	r3, [r7, #1592]	; 0x638
 8002390:	3301      	adds	r3, #1
 8002392:	f8c7 3638 	str.w	r3, [r7, #1592]	; 0x638

			  pos_check = 0;
 8002396:	2300      	movs	r3, #0
 8002398:	f8c7 363c 	str.w	r3, [r7, #1596]	; 0x63c
			  neg_check = 0;
 800239c:	2300      	movs	r3, #0
 800239e:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624
		  if(neg==3){
 80023a2:	e010      	b.n	80023c6 <main+0x2f2>

		  }


	  } else if (deriv_array[j]<0 && pos_check==0){
 80023a4:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 80023a8:	f5a3 63bf 	sub.w	r3, r3, #1528	; 0x5f8
 80023ac:	f8d7 2634 	ldr.w	r2, [r7, #1588]	; 0x634
 80023b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	da06      	bge.n	80023c6 <main+0x2f2>
 80023b8:	f8d7 363c 	ldr.w	r3, [r7, #1596]	; 0x63c
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d102      	bne.n	80023c6 <main+0x2f2>
		  pos = 0;
 80023c0:	2300      	movs	r3, #0
 80023c2:	f8c7 3644 	str.w	r3, [r7, #1604]	; 0x644
  for(int j = 0; j < 159; j++){
 80023c6:	f8d7 3634 	ldr.w	r3, [r7, #1588]	; 0x634
 80023ca:	3301      	adds	r3, #1
 80023cc:	f8c7 3634 	str.w	r3, [r7, #1588]	; 0x634
 80023d0:	f8d7 3634 	ldr.w	r3, [r7, #1588]	; 0x634
 80023d4:	2b9e      	cmp	r3, #158	; 0x9e
 80023d6:	dd94      	ble.n	8002302 <main+0x22e>
	  }

  }

  for(int k = 0; k<20; k++){
 80023d8:	2300      	movs	r3, #0
 80023da:	f8c7 3630 	str.w	r3, [r7, #1584]	; 0x630
 80023de:	e010      	b.n	8002402 <main+0x32e>

	  printf("PEAK DETECTED: %d\n", peak_vals[k]);
 80023e0:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 80023e4:	f5a3 63c9 	sub.w	r3, r3, #1608	; 0x648
 80023e8:	f8d7 2630 	ldr.w	r2, [r7, #1584]	; 0x630
 80023ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023f0:	4619      	mov	r1, r3
 80023f2:	481f      	ldr	r0, [pc, #124]	; (8002470 <main+0x39c>)
 80023f4:	f009 fffe 	bl	800c3f4 <iprintf>
  for(int k = 0; k<20; k++){
 80023f8:	f8d7 3630 	ldr.w	r3, [r7, #1584]	; 0x630
 80023fc:	3301      	adds	r3, #1
 80023fe:	f8c7 3630 	str.w	r3, [r7, #1584]	; 0x630
 8002402:	f8d7 3630 	ldr.w	r3, [r7, #1584]	; 0x630
 8002406:	2b13      	cmp	r3, #19
 8002408:	ddea      	ble.n	80023e0 <main+0x30c>


  while (1)
  {
    /* USER CODE END WHILE */
    MX_APPE_Process();
 800240a:	f7fe ffd7 	bl	80013bc <MX_APPE_Process>

    /* USER CODE BEGIN 3 */

    if(sensorReady){
 800240e:	4b10      	ldr	r3, [pc, #64]	; (8002450 <main+0x37c>)
 8002410:	781b      	ldrb	r3, [r3, #0]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d036      	beq.n	8002484 <main+0x3b0>
    	sensorReady = BUSY;		//flag set back to READY in interrupt every 32 ms
 8002416:	4b0e      	ldr	r3, [pc, #56]	; (8002450 <main+0x37c>)
 8002418:	2200      	movs	r2, #0
 800241a:	701a      	strb	r2, [r3, #0]

        uint8_t err;

        err = get_val(&hrm);
 800241c:	480a      	ldr	r0, [pc, #40]	; (8002448 <main+0x374>)
 800241e:	f7fe f8f4 	bl	800060a <get_val>
 8002422:	4603      	mov	r3, r0
 8002424:	f887 3623 	strb.w	r3, [r7, #1571]	; 0x623
        if(err != 0){
 8002428:	f897 3623 	ldrb.w	r3, [r7, #1571]	; 0x623
 800242c:	2b00      	cmp	r3, #0
 800242e:	d023      	beq.n	8002478 <main+0x3a4>
        	printf("Could not read sensor. Error code: %d\n\r", err);
 8002430:	f897 3623 	ldrb.w	r3, [r7, #1571]	; 0x623
 8002434:	4619      	mov	r1, r3
 8002436:	480f      	ldr	r0, [pc, #60]	; (8002474 <main+0x3a0>)
 8002438:	f009 ffdc 	bl	800c3f4 <iprintf>
 800243c:	e022      	b.n	8002484 <main+0x3b0>
 800243e:	bf00      	nop
 8002440:	0800d6e0 	.word	0x0800d6e0
 8002444:	20000a18 	.word	0x20000a18
 8002448:	20000cbc 	.word	0x20000cbc
 800244c:	0800d6fc 	.word	0x0800d6fc
 8002450:	20000cdc 	.word	0x20000cdc
 8002454:	0800d728 	.word	0x0800d728
 8002458:	20000aa8 	.word	0x20000aa8
 800245c:	0800d75c 	.word	0x0800d75c
 8002460:	20000cc4 	.word	0x20000cc4
 8002464:	20000b04 	.word	0x20000b04
 8002468:	0800d81c 	.word	0x0800d81c
 800246c:	3e19999a 	.word	0x3e19999a
 8002470:	0800d770 	.word	0x0800d770
 8002474:	0800d784 	.word	0x0800d784
        }else{
        	//printf("ppg_data[0]: %d, ppg_data[1]: %d\n\r", hrm.ppg_data[0], hrm.ppg_data[1]);
    		printf("ppg_data[1]: %d\n\r", hrm.ppg_data[1]);
 8002478:	4b24      	ldr	r3, [pc, #144]	; (800250c <main+0x438>)
 800247a:	88db      	ldrh	r3, [r3, #6]
 800247c:	4619      	mov	r1, r3
 800247e:	4824      	ldr	r0, [pc, #144]	; (8002510 <main+0x43c>)
 8002480:	f009 ffb8 	bl	800c3f4 <iprintf>
    }else{
    	//not ready
    }

	// Select User Bank 0
	ICM_SelectBank(&imu, USER_BANK_0);
 8002484:	2100      	movs	r1, #0
 8002486:	4823      	ldr	r0, [pc, #140]	; (8002514 <main+0x440>)
 8002488:	f7fe fbea 	bl	8000c60 <ICM_SelectBank>
	HAL_Delay(10);
 800248c:	200a      	movs	r0, #10
 800248e:	f7fe ff70 	bl	8001372 <HAL_Delay>

	// Obtain accelerometer and gyro data
	ICM_ReadAccelGyroData(&imu);
 8002492:	4820      	ldr	r0, [pc, #128]	; (8002514 <main+0x440>)
 8002494:	f7fe fb6a 	bl	8000b6c <ICM_ReadAccelGyroData>

	// Obtain magnetometer data
	ICM_ReadMagData(&imu, imu.mag_data);
 8002498:	491f      	ldr	r1, [pc, #124]	; (8002518 <main+0x444>)
 800249a:	481e      	ldr	r0, [pc, #120]	; (8002514 <main+0x440>)
 800249c:	f7fe fa4b 	bl	8000936 <ICM_ReadMagData>
	sprintf(uart_buffer,
			"(Ax: %u | Ay: %u | Az: %u)   "
			"(Gx: %u | Gy: %u | Gz: %u)   "
			"(Mx: %i | My: %i | Mz: %i)"
			" \r\n",
			imu.accel_data[0], imu.accel_data[1], imu.accel_data[2],
 80024a0:	4b1c      	ldr	r3, [pc, #112]	; (8002514 <main+0x440>)
 80024a2:	889b      	ldrh	r3, [r3, #4]
	sprintf(uart_buffer,
 80024a4:	469c      	mov	ip, r3
			imu.accel_data[0], imu.accel_data[1], imu.accel_data[2],
 80024a6:	4b1b      	ldr	r3, [pc, #108]	; (8002514 <main+0x440>)
 80024a8:	88db      	ldrh	r3, [r3, #6]
	sprintf(uart_buffer,
 80024aa:	469e      	mov	lr, r3
			imu.accel_data[0], imu.accel_data[1], imu.accel_data[2],
 80024ac:	4b19      	ldr	r3, [pc, #100]	; (8002514 <main+0x440>)
 80024ae:	891b      	ldrh	r3, [r3, #8]
	sprintf(uart_buffer,
 80024b0:	461a      	mov	r2, r3
			imu.gyro_data[0], imu.gyro_data[1], imu.gyro_data[2],
 80024b2:	4b18      	ldr	r3, [pc, #96]	; (8002514 <main+0x440>)
 80024b4:	895b      	ldrh	r3, [r3, #10]
	sprintf(uart_buffer,
 80024b6:	4619      	mov	r1, r3
			imu.gyro_data[0], imu.gyro_data[1], imu.gyro_data[2],
 80024b8:	4b16      	ldr	r3, [pc, #88]	; (8002514 <main+0x440>)
 80024ba:	899b      	ldrh	r3, [r3, #12]
	sprintf(uart_buffer,
 80024bc:	461c      	mov	r4, r3
			imu.gyro_data[0], imu.gyro_data[1], imu.gyro_data[2],
 80024be:	4b15      	ldr	r3, [pc, #84]	; (8002514 <main+0x440>)
 80024c0:	89db      	ldrh	r3, [r3, #14]
	sprintf(uart_buffer,
 80024c2:	461d      	mov	r5, r3
			imu.mag_data[0], imu.mag_data[1], imu.mag_data[2]);
 80024c4:	4b13      	ldr	r3, [pc, #76]	; (8002514 <main+0x440>)
 80024c6:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
	sprintf(uart_buffer,
 80024ca:	461e      	mov	r6, r3
			imu.mag_data[0], imu.mag_data[1], imu.mag_data[2]);
 80024cc:	4b11      	ldr	r3, [pc, #68]	; (8002514 <main+0x440>)
 80024ce:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
	sprintf(uart_buffer,
 80024d2:	607b      	str	r3, [r7, #4]
			imu.mag_data[0], imu.mag_data[1], imu.mag_data[2]);
 80024d4:	4b0f      	ldr	r3, [pc, #60]	; (8002514 <main+0x440>)
 80024d6:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
	sprintf(uart_buffer,
 80024da:	f207 5054 	addw	r0, r7, #1364	; 0x554
 80024de:	9306      	str	r3, [sp, #24]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	9305      	str	r3, [sp, #20]
 80024e4:	9604      	str	r6, [sp, #16]
 80024e6:	9503      	str	r5, [sp, #12]
 80024e8:	9402      	str	r4, [sp, #8]
 80024ea:	9101      	str	r1, [sp, #4]
 80024ec:	9200      	str	r2, [sp, #0]
 80024ee:	4673      	mov	r3, lr
 80024f0:	4662      	mov	r2, ip
 80024f2:	490a      	ldr	r1, [pc, #40]	; (800251c <main+0x448>)
 80024f4:	f009 ff96 	bl	800c424 <siprintf>
	//HAL_UART_Transmit(&huart1, (uint8_t*) uart_buffer, strlen(uart_buffer), 1000);
	printf("%s", uart_buffer);
 80024f8:	f207 5354 	addw	r3, r7, #1364	; 0x554
 80024fc:	4619      	mov	r1, r3
 80024fe:	4808      	ldr	r0, [pc, #32]	; (8002520 <main+0x44c>)
 8002500:	f009 ff78 	bl	800c3f4 <iprintf>
	HAL_Delay(5);
 8002504:	2005      	movs	r0, #5
 8002506:	f7fe ff34 	bl	8001372 <HAL_Delay>
    MX_APPE_Process();
 800250a:	e77e      	b.n	800240a <main+0x336>
 800250c:	20000cbc 	.word	0x20000cbc
 8002510:	0800d7ac 	.word	0x0800d7ac
 8002514:	20000cc4 	.word	0x20000cc4
 8002518:	20000cd4 	.word	0x20000cd4
 800251c:	0800d7c0 	.word	0x0800d7c0
 8002520:	0800d818 	.word	0x0800d818

08002524 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b09a      	sub	sp, #104	; 0x68
 8002528:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800252a:	f107 0320 	add.w	r3, r7, #32
 800252e:	2248      	movs	r2, #72	; 0x48
 8002530:	2100      	movs	r1, #0
 8002532:	4618      	mov	r0, r3
 8002534:	f009 ff56 	bl	800c3e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002538:	1d3b      	adds	r3, r7, #4
 800253a:	2200      	movs	r2, #0
 800253c:	601a      	str	r2, [r3, #0]
 800253e:	605a      	str	r2, [r3, #4]
 8002540:	609a      	str	r2, [r3, #8]
 8002542:	60da      	str	r2, [r3, #12]
 8002544:	611a      	str	r2, [r3, #16]
 8002546:	615a      	str	r2, [r3, #20]
 8002548:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800254a:	f002 ff13 	bl	8005374 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 800254e:	2010      	movs	r0, #16
 8002550:	f7ff fd77 	bl	8002042 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002554:	4b23      	ldr	r3, [pc, #140]	; (80025e4 <SystemClock_Config+0xc0>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800255c:	4a21      	ldr	r2, [pc, #132]	; (80025e4 <SystemClock_Config+0xc0>)
 800255e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002562:	6013      	str	r3, [r2, #0]
 8002564:	4b1f      	ldr	r3, [pc, #124]	; (80025e4 <SystemClock_Config+0xc0>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800256c:	603b      	str	r3, [r7, #0]
 800256e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8002570:	2327      	movs	r3, #39	; 0x27
 8002572:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002574:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002578:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800257a:	2301      	movs	r3, #1
 800257c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800257e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002582:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002584:	2301      	movs	r3, #1
 8002586:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002588:	2340      	movs	r3, #64	; 0x40
 800258a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800258c:	2300      	movs	r3, #0
 800258e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 8002590:	23a0      	movs	r3, #160	; 0xa0
 8002592:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002594:	2300      	movs	r3, #0
 8002596:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002598:	f107 0320 	add.w	r3, r7, #32
 800259c:	4618      	mov	r0, r3
 800259e:	f003 fa7d 	bl	8005a9c <HAL_RCC_OscConfig>
 80025a2:	4603      	mov	r3, r0
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d001      	beq.n	80025ac <SystemClock_Config+0x88>
  {
    Error_Handler();
 80025a8:	f000 fa1c 	bl	80029e4 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80025ac:	236f      	movs	r3, #111	; 0x6f
 80025ae:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80025b0:	2300      	movs	r3, #0
 80025b2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80025b4:	2300      	movs	r3, #0
 80025b6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80025b8:	2300      	movs	r3, #0
 80025ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80025bc:	2300      	movs	r3, #0
 80025be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 80025c0:	2300      	movs	r3, #0
 80025c2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80025c4:	2300      	movs	r3, #0
 80025c6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80025c8:	1d3b      	adds	r3, r7, #4
 80025ca:	2101      	movs	r1, #1
 80025cc:	4618      	mov	r0, r3
 80025ce:	f003 fdd9 	bl	8006184 <HAL_RCC_ClockConfig>
 80025d2:	4603      	mov	r3, r0
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d001      	beq.n	80025dc <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80025d8:	f000 fa04 	bl	80029e4 <Error_Handler>
  }
}
 80025dc:	bf00      	nop
 80025de:	3768      	adds	r7, #104	; 0x68
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}
 80025e4:	58000400 	.word	0x58000400

080025e8 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b094      	sub	sp, #80	; 0x50
 80025ec:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80025ee:	463b      	mov	r3, r7
 80025f0:	2250      	movs	r2, #80	; 0x50
 80025f2:	2100      	movs	r1, #0
 80025f4:	4618      	mov	r0, r3
 80025f6:	f009 fef5 	bl	800c3e4 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 80025fa:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80025fe:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 8002600:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002604:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8002606:	2300      	movs	r3, #0
 8002608:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 800260a:	2300      	movs	r3, #0
 800260c:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800260e:	463b      	mov	r3, r7
 8002610:	4618      	mov	r0, r3
 8002612:	f004 f9f4 	bl	80069fe <HAL_RCCEx_PeriphCLKConfig>
 8002616:	4603      	mov	r3, r0
 8002618:	2b00      	cmp	r3, #0
 800261a:	d001      	beq.n	8002620 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 800261c:	f000 f9e2 	bl	80029e4 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8002620:	bf00      	nop
 8002622:	3750      	adds	r7, #80	; 0x50
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}

08002628 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800262c:	4b1b      	ldr	r3, [pc, #108]	; (800269c <MX_I2C1_Init+0x74>)
 800262e:	4a1c      	ldr	r2, [pc, #112]	; (80026a0 <MX_I2C1_Init+0x78>)
 8002630:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8002632:	4b1a      	ldr	r3, [pc, #104]	; (800269c <MX_I2C1_Init+0x74>)
 8002634:	4a1b      	ldr	r2, [pc, #108]	; (80026a4 <MX_I2C1_Init+0x7c>)
 8002636:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002638:	4b18      	ldr	r3, [pc, #96]	; (800269c <MX_I2C1_Init+0x74>)
 800263a:	2200      	movs	r2, #0
 800263c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800263e:	4b17      	ldr	r3, [pc, #92]	; (800269c <MX_I2C1_Init+0x74>)
 8002640:	2201      	movs	r2, #1
 8002642:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002644:	4b15      	ldr	r3, [pc, #84]	; (800269c <MX_I2C1_Init+0x74>)
 8002646:	2200      	movs	r2, #0
 8002648:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800264a:	4b14      	ldr	r3, [pc, #80]	; (800269c <MX_I2C1_Init+0x74>)
 800264c:	2200      	movs	r2, #0
 800264e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002650:	4b12      	ldr	r3, [pc, #72]	; (800269c <MX_I2C1_Init+0x74>)
 8002652:	2200      	movs	r2, #0
 8002654:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002656:	4b11      	ldr	r3, [pc, #68]	; (800269c <MX_I2C1_Init+0x74>)
 8002658:	2200      	movs	r2, #0
 800265a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800265c:	4b0f      	ldr	r3, [pc, #60]	; (800269c <MX_I2C1_Init+0x74>)
 800265e:	2200      	movs	r2, #0
 8002660:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002662:	480e      	ldr	r0, [pc, #56]	; (800269c <MX_I2C1_Init+0x74>)
 8002664:	f001 fc4a 	bl	8003efc <HAL_I2C_Init>
 8002668:	4603      	mov	r3, r0
 800266a:	2b00      	cmp	r3, #0
 800266c:	d001      	beq.n	8002672 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800266e:	f000 f9b9 	bl	80029e4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002672:	2100      	movs	r1, #0
 8002674:	4809      	ldr	r0, [pc, #36]	; (800269c <MX_I2C1_Init+0x74>)
 8002676:	f002 f9d1 	bl	8004a1c <HAL_I2CEx_ConfigAnalogFilter>
 800267a:	4603      	mov	r3, r0
 800267c:	2b00      	cmp	r3, #0
 800267e:	d001      	beq.n	8002684 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002680:	f000 f9b0 	bl	80029e4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002684:	2100      	movs	r1, #0
 8002686:	4805      	ldr	r0, [pc, #20]	; (800269c <MX_I2C1_Init+0x74>)
 8002688:	f002 fa13 	bl	8004ab2 <HAL_I2CEx_ConfigDigitalFilter>
 800268c:	4603      	mov	r3, r0
 800268e:	2b00      	cmp	r3, #0
 8002690:	d001      	beq.n	8002696 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002692:	f000 f9a7 	bl	80029e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002696:	bf00      	nop
 8002698:	bd80      	pop	{r7, pc}
 800269a:	bf00      	nop
 800269c:	20000a18 	.word	0x20000a18
 80026a0:	40005400 	.word	0x40005400
 80026a4:	00707cbb 	.word	0x00707cbb

080026a8 <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 80026ac:	4b06      	ldr	r3, [pc, #24]	; (80026c8 <MX_IPCC_Init+0x20>)
 80026ae:	4a07      	ldr	r2, [pc, #28]	; (80026cc <MX_IPCC_Init+0x24>)
 80026b0:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 80026b2:	4805      	ldr	r0, [pc, #20]	; (80026c8 <MX_IPCC_Init+0x20>)
 80026b4:	f002 fa4a 	bl	8004b4c <HAL_IPCC_Init>
 80026b8:	4603      	mov	r3, r0
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d001      	beq.n	80026c2 <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 80026be:	f000 f991 	bl	80029e4 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 80026c2:	bf00      	nop
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	20000a6c 	.word	0x20000a6c
 80026cc:	58000c00 	.word	0x58000c00

080026d0 <MX_LPTIM1_Init>:
  * @brief LPTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM1_Init(void)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 80026d4:	4b12      	ldr	r3, [pc, #72]	; (8002720 <MX_LPTIM1_Init+0x50>)
 80026d6:	4a13      	ldr	r2, [pc, #76]	; (8002724 <MX_LPTIM1_Init+0x54>)
 80026d8:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 80026da:	4b11      	ldr	r3, [pc, #68]	; (8002720 <MX_LPTIM1_Init+0x50>)
 80026dc:	2200      	movs	r2, #0
 80026de:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 80026e0:	4b0f      	ldr	r3, [pc, #60]	; (8002720 <MX_LPTIM1_Init+0x50>)
 80026e2:	2200      	movs	r2, #0
 80026e4:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 80026e6:	4b0e      	ldr	r3, [pc, #56]	; (8002720 <MX_LPTIM1_Init+0x50>)
 80026e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80026ec:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 80026ee:	4b0c      	ldr	r3, [pc, #48]	; (8002720 <MX_LPTIM1_Init+0x50>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 80026f4:	4b0a      	ldr	r3, [pc, #40]	; (8002720 <MX_LPTIM1_Init+0x50>)
 80026f6:	2200      	movs	r2, #0
 80026f8:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 80026fa:	4b09      	ldr	r3, [pc, #36]	; (8002720 <MX_LPTIM1_Init+0x50>)
 80026fc:	2200      	movs	r2, #0
 80026fe:	629a      	str	r2, [r3, #40]	; 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8002700:	4b07      	ldr	r3, [pc, #28]	; (8002720 <MX_LPTIM1_Init+0x50>)
 8002702:	2200      	movs	r2, #0
 8002704:	62da      	str	r2, [r3, #44]	; 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 8002706:	4b06      	ldr	r3, [pc, #24]	; (8002720 <MX_LPTIM1_Init+0x50>)
 8002708:	2200      	movs	r2, #0
 800270a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 800270c:	4804      	ldr	r0, [pc, #16]	; (8002720 <MX_LPTIM1_Init+0x50>)
 800270e:	f002 fb1b 	bl	8004d48 <HAL_LPTIM_Init>
 8002712:	4603      	mov	r3, r0
 8002714:	2b00      	cmp	r3, #0
 8002716:	d001      	beq.n	800271c <MX_LPTIM1_Init+0x4c>
  {
    Error_Handler();
 8002718:	f000 f964 	bl	80029e4 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 800271c:	bf00      	nop
 800271e:	bd80      	pop	{r7, pc}
 8002720:	20000aa8 	.word	0x20000aa8
 8002724:	40007c00 	.word	0x40007c00

08002728 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8002728:	b480      	push	{r7}
 800272a:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 800272c:	bf00      	nop
 800272e:	46bd      	mov	sp, r7
 8002730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002734:	4770      	bx	lr
	...

08002738 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800273c:	4b16      	ldr	r3, [pc, #88]	; (8002798 <MX_RTC_Init+0x60>)
 800273e:	4a17      	ldr	r2, [pc, #92]	; (800279c <MX_RTC_Init+0x64>)
 8002740:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002742:	4b15      	ldr	r3, [pc, #84]	; (8002798 <MX_RTC_Init+0x60>)
 8002744:	2200      	movs	r2, #0
 8002746:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8002748:	4b13      	ldr	r3, [pc, #76]	; (8002798 <MX_RTC_Init+0x60>)
 800274a:	220f      	movs	r2, #15
 800274c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 800274e:	4b12      	ldr	r3, [pc, #72]	; (8002798 <MX_RTC_Init+0x60>)
 8002750:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8002754:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002756:	4b10      	ldr	r3, [pc, #64]	; (8002798 <MX_RTC_Init+0x60>)
 8002758:	2200      	movs	r2, #0
 800275a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800275c:	4b0e      	ldr	r3, [pc, #56]	; (8002798 <MX_RTC_Init+0x60>)
 800275e:	2200      	movs	r2, #0
 8002760:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002762:	4b0d      	ldr	r3, [pc, #52]	; (8002798 <MX_RTC_Init+0x60>)
 8002764:	2200      	movs	r2, #0
 8002766:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002768:	4b0b      	ldr	r3, [pc, #44]	; (8002798 <MX_RTC_Init+0x60>)
 800276a:	2200      	movs	r2, #0
 800276c:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800276e:	480a      	ldr	r0, [pc, #40]	; (8002798 <MX_RTC_Init+0x60>)
 8002770:	f004 fbcc 	bl	8006f0c <HAL_RTC_Init>
 8002774:	4603      	mov	r3, r0
 8002776:	2b00      	cmp	r3, #0
 8002778:	d001      	beq.n	800277e <MX_RTC_Init+0x46>
  {
    Error_Handler();
 800277a:	f000 f933 	bl	80029e4 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 800277e:	2200      	movs	r2, #0
 8002780:	2100      	movs	r1, #0
 8002782:	4805      	ldr	r0, [pc, #20]	; (8002798 <MX_RTC_Init+0x60>)
 8002784:	f004 fcc2 	bl	800710c <HAL_RTCEx_SetWakeUpTimer_IT>
 8002788:	4603      	mov	r3, r0
 800278a:	2b00      	cmp	r3, #0
 800278c:	d001      	beq.n	8002792 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 800278e:	f000 f929 	bl	80029e4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002792:	bf00      	nop
 8002794:	bd80      	pop	{r7, pc}
 8002796:	bf00      	nop
 8002798:	20000ae0 	.word	0x20000ae0
 800279c:	40002800 	.word	0x40002800

080027a0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80027a4:	4b1b      	ldr	r3, [pc, #108]	; (8002814 <MX_SPI1_Init+0x74>)
 80027a6:	4a1c      	ldr	r2, [pc, #112]	; (8002818 <MX_SPI1_Init+0x78>)
 80027a8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80027aa:	4b1a      	ldr	r3, [pc, #104]	; (8002814 <MX_SPI1_Init+0x74>)
 80027ac:	f44f 7282 	mov.w	r2, #260	; 0x104
 80027b0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80027b2:	4b18      	ldr	r3, [pc, #96]	; (8002814 <MX_SPI1_Init+0x74>)
 80027b4:	2200      	movs	r2, #0
 80027b6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80027b8:	4b16      	ldr	r3, [pc, #88]	; (8002814 <MX_SPI1_Init+0x74>)
 80027ba:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80027be:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80027c0:	4b14      	ldr	r3, [pc, #80]	; (8002814 <MX_SPI1_Init+0x74>)
 80027c2:	2200      	movs	r2, #0
 80027c4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80027c6:	4b13      	ldr	r3, [pc, #76]	; (8002814 <MX_SPI1_Init+0x74>)
 80027c8:	2201      	movs	r2, #1
 80027ca:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80027cc:	4b11      	ldr	r3, [pc, #68]	; (8002814 <MX_SPI1_Init+0x74>)
 80027ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027d2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80027d4:	4b0f      	ldr	r3, [pc, #60]	; (8002814 <MX_SPI1_Init+0x74>)
 80027d6:	2210      	movs	r2, #16
 80027d8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80027da:	4b0e      	ldr	r3, [pc, #56]	; (8002814 <MX_SPI1_Init+0x74>)
 80027dc:	2200      	movs	r2, #0
 80027de:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80027e0:	4b0c      	ldr	r3, [pc, #48]	; (8002814 <MX_SPI1_Init+0x74>)
 80027e2:	2200      	movs	r2, #0
 80027e4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80027e6:	4b0b      	ldr	r3, [pc, #44]	; (8002814 <MX_SPI1_Init+0x74>)
 80027e8:	2200      	movs	r2, #0
 80027ea:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80027ec:	4b09      	ldr	r3, [pc, #36]	; (8002814 <MX_SPI1_Init+0x74>)
 80027ee:	2207      	movs	r2, #7
 80027f0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80027f2:	4b08      	ldr	r3, [pc, #32]	; (8002814 <MX_SPI1_Init+0x74>)
 80027f4:	2200      	movs	r2, #0
 80027f6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80027f8:	4b06      	ldr	r3, [pc, #24]	; (8002814 <MX_SPI1_Init+0x74>)
 80027fa:	2200      	movs	r2, #0
 80027fc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80027fe:	4805      	ldr	r0, [pc, #20]	; (8002814 <MX_SPI1_Init+0x74>)
 8002800:	f004 fd40 	bl	8007284 <HAL_SPI_Init>
 8002804:	4603      	mov	r3, r0
 8002806:	2b00      	cmp	r3, #0
 8002808:	d001      	beq.n	800280e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800280a:	f000 f8eb 	bl	80029e4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800280e:	bf00      	nop
 8002810:	bd80      	pop	{r7, pc}
 8002812:	bf00      	nop
 8002814:	20000b04 	.word	0x20000b04
 8002818:	40013000 	.word	0x40013000

0800281c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002820:	4b23      	ldr	r3, [pc, #140]	; (80028b0 <MX_USART1_UART_Init+0x94>)
 8002822:	4a24      	ldr	r2, [pc, #144]	; (80028b4 <MX_USART1_UART_Init+0x98>)
 8002824:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002826:	4b22      	ldr	r3, [pc, #136]	; (80028b0 <MX_USART1_UART_Init+0x94>)
 8002828:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800282c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800282e:	4b20      	ldr	r3, [pc, #128]	; (80028b0 <MX_USART1_UART_Init+0x94>)
 8002830:	2200      	movs	r2, #0
 8002832:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002834:	4b1e      	ldr	r3, [pc, #120]	; (80028b0 <MX_USART1_UART_Init+0x94>)
 8002836:	2200      	movs	r2, #0
 8002838:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_ODD;
 800283a:	4b1d      	ldr	r3, [pc, #116]	; (80028b0 <MX_USART1_UART_Init+0x94>)
 800283c:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8002840:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002842:	4b1b      	ldr	r3, [pc, #108]	; (80028b0 <MX_USART1_UART_Init+0x94>)
 8002844:	220c      	movs	r2, #12
 8002846:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002848:	4b19      	ldr	r3, [pc, #100]	; (80028b0 <MX_USART1_UART_Init+0x94>)
 800284a:	2200      	movs	r2, #0
 800284c:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800284e:	4b18      	ldr	r3, [pc, #96]	; (80028b0 <MX_USART1_UART_Init+0x94>)
 8002850:	2200      	movs	r2, #0
 8002852:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002854:	4b16      	ldr	r3, [pc, #88]	; (80028b0 <MX_USART1_UART_Init+0x94>)
 8002856:	2200      	movs	r2, #0
 8002858:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800285a:	4b15      	ldr	r3, [pc, #84]	; (80028b0 <MX_USART1_UART_Init+0x94>)
 800285c:	2200      	movs	r2, #0
 800285e:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002860:	4b13      	ldr	r3, [pc, #76]	; (80028b0 <MX_USART1_UART_Init+0x94>)
 8002862:	2200      	movs	r2, #0
 8002864:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002866:	4812      	ldr	r0, [pc, #72]	; (80028b0 <MX_USART1_UART_Init+0x94>)
 8002868:	f005 fdd2 	bl	8008410 <HAL_UART_Init>
 800286c:	4603      	mov	r3, r0
 800286e:	2b00      	cmp	r3, #0
 8002870:	d001      	beq.n	8002876 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8002872:	f000 f8b7 	bl	80029e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002876:	2100      	movs	r1, #0
 8002878:	480d      	ldr	r0, [pc, #52]	; (80028b0 <MX_USART1_UART_Init+0x94>)
 800287a:	f006 fb21 	bl	8008ec0 <HAL_UARTEx_SetTxFifoThreshold>
 800287e:	4603      	mov	r3, r0
 8002880:	2b00      	cmp	r3, #0
 8002882:	d001      	beq.n	8002888 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8002884:	f000 f8ae 	bl	80029e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002888:	2100      	movs	r1, #0
 800288a:	4809      	ldr	r0, [pc, #36]	; (80028b0 <MX_USART1_UART_Init+0x94>)
 800288c:	f006 fb56 	bl	8008f3c <HAL_UARTEx_SetRxFifoThreshold>
 8002890:	4603      	mov	r3, r0
 8002892:	2b00      	cmp	r3, #0
 8002894:	d001      	beq.n	800289a <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 8002896:	f000 f8a5 	bl	80029e4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800289a:	4805      	ldr	r0, [pc, #20]	; (80028b0 <MX_USART1_UART_Init+0x94>)
 800289c:	f006 fad7 	bl	8008e4e <HAL_UARTEx_DisableFifoMode>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d001      	beq.n	80028aa <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 80028a6:	f000 f89d 	bl	80029e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80028aa:	bf00      	nop
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	20000c28 	.word	0x20000c28
 80028b4:	40013800 	.word	0x40013800

080028b8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80028bc:	2004      	movs	r0, #4
 80028be:	f7ff fbd6 	bl	800206e <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80028c2:	2001      	movs	r0, #1
 80028c4:	f7ff fbd3 	bl	800206e <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80028c8:	2200      	movs	r2, #0
 80028ca:	2100      	movs	r1, #0
 80028cc:	200b      	movs	r0, #11
 80028ce:	f000 fe36 	bl	800353e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80028d2:	200b      	movs	r0, #11
 80028d4:	f000 fe4d 	bl	8003572 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80028d8:	2200      	movs	r2, #0
 80028da:	2100      	movs	r1, #0
 80028dc:	200c      	movs	r0, #12
 80028de:	f000 fe2e 	bl	800353e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80028e2:	200c      	movs	r0, #12
 80028e4:	f000 fe45 	bl	8003572 <HAL_NVIC_EnableIRQ>

}
 80028e8:	bf00      	nop
 80028ea:	bd80      	pop	{r7, pc}

080028ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b086      	sub	sp, #24
 80028f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028f2:	1d3b      	adds	r3, r7, #4
 80028f4:	2200      	movs	r2, #0
 80028f6:	601a      	str	r2, [r3, #0]
 80028f8:	605a      	str	r2, [r3, #4]
 80028fa:	609a      	str	r2, [r3, #8]
 80028fc:	60da      	str	r2, [r3, #12]
 80028fe:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002900:	2004      	movs	r0, #4
 8002902:	f7ff fbcd 	bl	80020a0 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002906:	2002      	movs	r0, #2
 8002908:	f7ff fbca 	bl	80020a0 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800290c:	2001      	movs	r0, #1
 800290e:	f7ff fbc7 	bl	80020a0 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002912:	2008      	movs	r0, #8
 8002914:	f7ff fbc4 	bl	80020a0 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|GPIO_PIN_3|LD1_Pin, GPIO_PIN_RESET);
 8002918:	2200      	movs	r2, #0
 800291a:	212b      	movs	r1, #43	; 0x2b
 800291c:	481d      	ldr	r0, [pc, #116]	; (8002994 <MX_GPIO_Init+0xa8>)
 800291e:	f001 fab1 	bl	8003e84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002922:	2310      	movs	r3, #16
 8002924:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002926:	2300      	movs	r3, #0
 8002928:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800292a:	2301      	movs	r3, #1
 800292c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800292e:	1d3b      	adds	r3, r7, #4
 8002930:	4619      	mov	r1, r3
 8002932:	4819      	ldr	r0, [pc, #100]	; (8002998 <MX_GPIO_Init+0xac>)
 8002934:	f001 f936 	bl	8003ba4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin PB3 LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|GPIO_PIN_3|LD1_Pin;
 8002938:	232b      	movs	r3, #43	; 0x2b
 800293a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800293c:	2301      	movs	r3, #1
 800293e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002940:	2300      	movs	r3, #0
 8002942:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002944:	2300      	movs	r3, #0
 8002946:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002948:	1d3b      	adds	r3, r7, #4
 800294a:	4619      	mov	r1, r3
 800294c:	4811      	ldr	r0, [pc, #68]	; (8002994 <MX_GPIO_Init+0xa8>)
 800294e:	f001 f929 	bl	8003ba4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002952:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002956:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002958:	2302      	movs	r3, #2
 800295a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800295c:	2300      	movs	r3, #0
 800295e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002960:	2300      	movs	r3, #0
 8002962:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8002964:	230a      	movs	r3, #10
 8002966:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002968:	1d3b      	adds	r3, r7, #4
 800296a:	4619      	mov	r1, r3
 800296c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002970:	f001 f918 	bl	8003ba4 <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 8002974:	2303      	movs	r3, #3
 8002976:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002978:	2300      	movs	r3, #0
 800297a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800297c:	2300      	movs	r3, #0
 800297e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002980:	1d3b      	adds	r3, r7, #4
 8002982:	4619      	mov	r1, r3
 8002984:	4805      	ldr	r0, [pc, #20]	; (800299c <MX_GPIO_Init+0xb0>)
 8002986:	f001 f90d 	bl	8003ba4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800298a:	bf00      	nop
 800298c:	3718      	adds	r7, #24
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}
 8002992:	bf00      	nop
 8002994:	48000400 	.word	0x48000400
 8002998:	48000800 	.word	0x48000800
 800299c:	48000c00 	.word	0x48000c00

080029a0 <HAL_LPTIM_CompareMatchCallback>:
/* USER CODE BEGIN 4 */

/*
 * Redefinition of the low power timer interrupt
 */
void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim){
 80029a0:	b480      	push	{r7}
 80029a2:	b083      	sub	sp, #12
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
	sensorReady = READY;
 80029a8:	4b04      	ldr	r3, [pc, #16]	; (80029bc <HAL_LPTIM_CompareMatchCallback+0x1c>)
 80029aa:	2201      	movs	r2, #1
 80029ac:	701a      	strb	r2, [r3, #0]
}
 80029ae:	bf00      	nop
 80029b0:	370c      	adds	r7, #12
 80029b2:	46bd      	mov	sp, r7
 80029b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b8:	4770      	bx	lr
 80029ba:	bf00      	nop
 80029bc:	20000cdc 	.word	0x20000cdc

080029c0 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b082      	sub	sp, #8
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 80029c8:	1d39      	adds	r1, r7, #4
 80029ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80029ce:	2201      	movs	r2, #1
 80029d0:	4803      	ldr	r0, [pc, #12]	; (80029e0 <__io_putchar+0x20>)
 80029d2:	f005 fd6d 	bl	80084b0 <HAL_UART_Transmit>

  return ch;
 80029d6:	687b      	ldr	r3, [r7, #4]
}
 80029d8:	4618      	mov	r0, r3
 80029da:	3708      	adds	r7, #8
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	20000c28 	.word	0x20000c28

080029e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80029e4:	b480      	push	{r7}
 80029e6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80029e8:	b672      	cpsid	i
}
 80029ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80029ec:	e7fe      	b.n	80029ec <Error_Handler+0x8>

080029ee <LL_RCC_EnableRTC>:
{
 80029ee:	b480      	push	{r7}
 80029f0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80029f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029fa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80029fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a02:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002a06:	bf00      	nop
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0e:	4770      	bx	lr

08002a10 <LL_AHB2_GRP1_EnableClock>:
{
 8002a10:	b480      	push	{r7}
 8002a12:	b085      	sub	sp, #20
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002a18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a1c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002a1e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	4313      	orrs	r3, r2
 8002a26:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002a28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a2c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	4013      	ands	r3, r2
 8002a32:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002a34:	68fb      	ldr	r3, [r7, #12]
}
 8002a36:	bf00      	nop
 8002a38:	3714      	adds	r7, #20
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a40:	4770      	bx	lr

08002a42 <LL_AHB3_GRP1_EnableClock>:
{
 8002a42:	b480      	push	{r7}
 8002a44:	b085      	sub	sp, #20
 8002a46:	af00      	add	r7, sp, #0
 8002a48:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8002a4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a4e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002a50:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	4313      	orrs	r3, r2
 8002a58:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8002a5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a5e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	4013      	ands	r3, r2
 8002a64:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002a66:	68fb      	ldr	r3, [r7, #12]
}
 8002a68:	bf00      	nop
 8002a6a:	3714      	adds	r7, #20
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a72:	4770      	bx	lr

08002a74 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b085      	sub	sp, #20
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002a7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a80:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002a82:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002a8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a90:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	4013      	ands	r3, r2
 8002a96:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002a98:	68fb      	ldr	r3, [r7, #12]
}
 8002a9a:	bf00      	nop
 8002a9c:	3714      	adds	r7, #20
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr

08002aa6 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8002aa6:	b480      	push	{r7}
 8002aa8:	b085      	sub	sp, #20
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8002aae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ab2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002ab4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	4313      	orrs	r3, r2
 8002abc:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002abe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ac2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002aca:	68fb      	ldr	r3, [r7, #12]
}
 8002acc:	bf00      	nop
 8002ace:	3714      	adds	r7, #20
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad6:	4770      	bx	lr

08002ad8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8002adc:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002ae0:	f7ff ffaf 	bl	8002a42 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	2100      	movs	r1, #0
 8002ae8:	202e      	movs	r0, #46	; 0x2e
 8002aea:	f000 fd28 	bl	800353e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8002aee:	202e      	movs	r0, #46	; 0x2e
 8002af0:	f000 fd3f 	bl	8003572 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002af4:	bf00      	nop
 8002af6:	bd80      	pop	{r7, pc}

08002af8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b09c      	sub	sp, #112	; 0x70
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b00:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002b04:	2200      	movs	r2, #0
 8002b06:	601a      	str	r2, [r3, #0]
 8002b08:	605a      	str	r2, [r3, #4]
 8002b0a:	609a      	str	r2, [r3, #8]
 8002b0c:	60da      	str	r2, [r3, #12]
 8002b0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002b10:	f107 030c 	add.w	r3, r7, #12
 8002b14:	2250      	movs	r2, #80	; 0x50
 8002b16:	2100      	movs	r1, #0
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f009 fc63 	bl	800c3e4 <memset>
  if(hi2c->Instance==I2C1)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a1b      	ldr	r2, [pc, #108]	; (8002b90 <HAL_I2C_MspInit+0x98>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d12e      	bne.n	8002b86 <HAL_I2C_MspInit+0x8e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002b28:	2304      	movs	r3, #4
 8002b2a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002b2c:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8002b30:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002b32:	f107 030c 	add.w	r3, r7, #12
 8002b36:	4618      	mov	r0, r3
 8002b38:	f003 ff61 	bl	80069fe <HAL_RCCEx_PeriphCLKConfig>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d001      	beq.n	8002b46 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8002b42:	f7ff ff4f 	bl	80029e4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b46:	2002      	movs	r0, #2
 8002b48:	f7ff ff62 	bl	8002a10 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002b4c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002b50:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b52:	2312      	movs	r3, #18
 8002b54:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b56:	2300      	movs	r3, #0
 8002b58:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002b5e:	2304      	movs	r3, #4
 8002b60:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b62:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002b66:	4619      	mov	r1, r3
 8002b68:	480a      	ldr	r0, [pc, #40]	; (8002b94 <HAL_I2C_MspInit+0x9c>)
 8002b6a:	f001 f81b 	bl	8003ba4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002b6e:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8002b72:	f7ff ff7f 	bl	8002a74 <LL_APB1_GRP1_EnableClock>
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8002b76:	2200      	movs	r2, #0
 8002b78:	2100      	movs	r1, #0
 8002b7a:	201e      	movs	r0, #30
 8002b7c:	f000 fcdf 	bl	800353e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002b80:	201e      	movs	r0, #30
 8002b82:	f000 fcf6 	bl	8003572 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002b86:	bf00      	nop
 8002b88:	3770      	adds	r7, #112	; 0x70
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}
 8002b8e:	bf00      	nop
 8002b90:	40005400 	.word	0x40005400
 8002b94:	48000400 	.word	0x48000400

08002b98 <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b082      	sub	sp, #8
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a0d      	ldr	r2, [pc, #52]	; (8002bdc <HAL_IPCC_MspInit+0x44>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d113      	bne.n	8002bd2 <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8002baa:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002bae:	f7ff ff48 	bl	8002a42 <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	2100      	movs	r1, #0
 8002bb6:	202c      	movs	r0, #44	; 0x2c
 8002bb8:	f000 fcc1 	bl	800353e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8002bbc:	202c      	movs	r0, #44	; 0x2c
 8002bbe:	f000 fcd8 	bl	8003572 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	2100      	movs	r1, #0
 8002bc6:	202d      	movs	r0, #45	; 0x2d
 8002bc8:	f000 fcb9 	bl	800353e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8002bcc:	202d      	movs	r0, #45	; 0x2d
 8002bce:	f000 fcd0 	bl	8003572 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 8002bd2:	bf00      	nop
 8002bd4:	3708      	adds	r7, #8
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}
 8002bda:	bf00      	nop
 8002bdc:	58000c00 	.word	0x58000c00

08002be0 <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b096      	sub	sp, #88	; 0x58
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002be8:	f107 0308 	add.w	r3, r7, #8
 8002bec:	2250      	movs	r2, #80	; 0x50
 8002bee:	2100      	movs	r1, #0
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f009 fbf7 	bl	800c3e4 <memset>
  if(hlptim->Instance==LPTIM1)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a11      	ldr	r2, [pc, #68]	; (8002c40 <HAL_LPTIM_MspInit+0x60>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d11a      	bne.n	8002c36 <HAL_LPTIM_MspInit+0x56>

  /* USER CODE END LPTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 8002c00:	2310      	movs	r3, #16
 8002c02:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_LSE;
 8002c04:	f04f 130c 	mov.w	r3, #786444	; 0xc000c
 8002c08:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c0a:	f107 0308 	add.w	r3, r7, #8
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f003 fef5 	bl	80069fe <HAL_RCCEx_PeriphCLKConfig>
 8002c14:	4603      	mov	r3, r0
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d001      	beq.n	8002c1e <HAL_LPTIM_MspInit+0x3e>
    {
      Error_Handler();
 8002c1a:	f7ff fee3 	bl	80029e4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 8002c1e:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8002c22:	f7ff ff27 	bl	8002a74 <LL_APB1_GRP1_EnableClock>
    /* LPTIM1 interrupt Init */
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 0, 0);
 8002c26:	2200      	movs	r2, #0
 8002c28:	2100      	movs	r1, #0
 8002c2a:	202f      	movs	r0, #47	; 0x2f
 8002c2c:	f000 fc87 	bl	800353e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 8002c30:	202f      	movs	r0, #47	; 0x2f
 8002c32:	f000 fc9e 	bl	8003572 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }

}
 8002c36:	bf00      	nop
 8002c38:	3758      	adds	r7, #88	; 0x58
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	40007c00 	.word	0x40007c00

08002c44 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b096      	sub	sp, #88	; 0x58
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002c4c:	f107 0308 	add.w	r3, r7, #8
 8002c50:	2250      	movs	r2, #80	; 0x50
 8002c52:	2100      	movs	r1, #0
 8002c54:	4618      	mov	r0, r3
 8002c56:	f009 fbc5 	bl	800c3e4 <memset>
  if(hrtc->Instance==RTC)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a12      	ldr	r2, [pc, #72]	; (8002ca8 <HAL_RTC_MspInit+0x64>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d11d      	bne.n	8002ca0 <HAL_RTC_MspInit+0x5c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002c64:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002c68:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002c6a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c6e:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c70:	f107 0308 	add.w	r3, r7, #8
 8002c74:	4618      	mov	r0, r3
 8002c76:	f003 fec2 	bl	80069fe <HAL_RCCEx_PeriphCLKConfig>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d001      	beq.n	8002c84 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8002c80:	f7ff feb0 	bl	80029e4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002c84:	f7ff feb3 	bl	80029ee <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8002c88:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002c8c:	f7ff fef2 	bl	8002a74 <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8002c90:	2200      	movs	r2, #0
 8002c92:	2100      	movs	r1, #0
 8002c94:	2003      	movs	r0, #3
 8002c96:	f000 fc52 	bl	800353e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8002c9a:	2003      	movs	r0, #3
 8002c9c:	f000 fc69 	bl	8003572 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002ca0:	bf00      	nop
 8002ca2:	3758      	adds	r7, #88	; 0x58
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}
 8002ca8:	40002800 	.word	0x40002800

08002cac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b088      	sub	sp, #32
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cb4:	f107 030c 	add.w	r3, r7, #12
 8002cb8:	2200      	movs	r2, #0
 8002cba:	601a      	str	r2, [r3, #0]
 8002cbc:	605a      	str	r2, [r3, #4]
 8002cbe:	609a      	str	r2, [r3, #8]
 8002cc0:	60da      	str	r2, [r3, #12]
 8002cc2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a3c      	ldr	r2, [pc, #240]	; (8002dbc <HAL_SPI_MspInit+0x110>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d171      	bne.n	8002db2 <HAL_SPI_MspInit+0x106>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002cce:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002cd2:	f7ff fee8 	bl	8002aa6 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cd6:	2001      	movs	r0, #1
 8002cd8:	f7ff fe9a 	bl	8002a10 <LL_AHB2_GRP1_EnableClock>
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 8002cdc:	23c2      	movs	r3, #194	; 0xc2
 8002cde:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ce0:	2302      	movs	r3, #2
 8002ce2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002cec:	2305      	movs	r3, #5
 8002cee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cf0:	f107 030c 	add.w	r3, r7, #12
 8002cf4:	4619      	mov	r1, r3
 8002cf6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002cfa:	f000 ff53 	bl	8003ba4 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel1;
 8002cfe:	4b30      	ldr	r3, [pc, #192]	; (8002dc0 <HAL_SPI_MspInit+0x114>)
 8002d00:	4a30      	ldr	r2, [pc, #192]	; (8002dc4 <HAL_SPI_MspInit+0x118>)
 8002d02:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8002d04:	4b2e      	ldr	r3, [pc, #184]	; (8002dc0 <HAL_SPI_MspInit+0x114>)
 8002d06:	2206      	movs	r2, #6
 8002d08:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002d0a:	4b2d      	ldr	r3, [pc, #180]	; (8002dc0 <HAL_SPI_MspInit+0x114>)
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d10:	4b2b      	ldr	r3, [pc, #172]	; (8002dc0 <HAL_SPI_MspInit+0x114>)
 8002d12:	2200      	movs	r2, #0
 8002d14:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002d16:	4b2a      	ldr	r3, [pc, #168]	; (8002dc0 <HAL_SPI_MspInit+0x114>)
 8002d18:	2280      	movs	r2, #128	; 0x80
 8002d1a:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002d1c:	4b28      	ldr	r3, [pc, #160]	; (8002dc0 <HAL_SPI_MspInit+0x114>)
 8002d1e:	2200      	movs	r2, #0
 8002d20:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002d22:	4b27      	ldr	r3, [pc, #156]	; (8002dc0 <HAL_SPI_MspInit+0x114>)
 8002d24:	2200      	movs	r2, #0
 8002d26:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8002d28:	4b25      	ldr	r3, [pc, #148]	; (8002dc0 <HAL_SPI_MspInit+0x114>)
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002d2e:	4b24      	ldr	r3, [pc, #144]	; (8002dc0 <HAL_SPI_MspInit+0x114>)
 8002d30:	2200      	movs	r2, #0
 8002d32:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8002d34:	4822      	ldr	r0, [pc, #136]	; (8002dc0 <HAL_SPI_MspInit+0x114>)
 8002d36:	f000 fc61 	bl	80035fc <HAL_DMA_Init>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d001      	beq.n	8002d44 <HAL_SPI_MspInit+0x98>
    {
      Error_Handler();
 8002d40:	f7ff fe50 	bl	80029e4 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	4a1e      	ldr	r2, [pc, #120]	; (8002dc0 <HAL_SPI_MspInit+0x114>)
 8002d48:	659a      	str	r2, [r3, #88]	; 0x58
 8002d4a:	4a1d      	ldr	r2, [pc, #116]	; (8002dc0 <HAL_SPI_MspInit+0x114>)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6293      	str	r3, [r2, #40]	; 0x28

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel2;
 8002d50:	4b1d      	ldr	r3, [pc, #116]	; (8002dc8 <HAL_SPI_MspInit+0x11c>)
 8002d52:	4a1e      	ldr	r2, [pc, #120]	; (8002dcc <HAL_SPI_MspInit+0x120>)
 8002d54:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8002d56:	4b1c      	ldr	r3, [pc, #112]	; (8002dc8 <HAL_SPI_MspInit+0x11c>)
 8002d58:	2207      	movs	r2, #7
 8002d5a:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002d5c:	4b1a      	ldr	r3, [pc, #104]	; (8002dc8 <HAL_SPI_MspInit+0x11c>)
 8002d5e:	2210      	movs	r2, #16
 8002d60:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d62:	4b19      	ldr	r3, [pc, #100]	; (8002dc8 <HAL_SPI_MspInit+0x11c>)
 8002d64:	2200      	movs	r2, #0
 8002d66:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002d68:	4b17      	ldr	r3, [pc, #92]	; (8002dc8 <HAL_SPI_MspInit+0x11c>)
 8002d6a:	2280      	movs	r2, #128	; 0x80
 8002d6c:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002d6e:	4b16      	ldr	r3, [pc, #88]	; (8002dc8 <HAL_SPI_MspInit+0x11c>)
 8002d70:	2200      	movs	r2, #0
 8002d72:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002d74:	4b14      	ldr	r3, [pc, #80]	; (8002dc8 <HAL_SPI_MspInit+0x11c>)
 8002d76:	2200      	movs	r2, #0
 8002d78:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8002d7a:	4b13      	ldr	r3, [pc, #76]	; (8002dc8 <HAL_SPI_MspInit+0x11c>)
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002d80:	4b11      	ldr	r3, [pc, #68]	; (8002dc8 <HAL_SPI_MspInit+0x11c>)
 8002d82:	2200      	movs	r2, #0
 8002d84:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8002d86:	4810      	ldr	r0, [pc, #64]	; (8002dc8 <HAL_SPI_MspInit+0x11c>)
 8002d88:	f000 fc38 	bl	80035fc <HAL_DMA_Init>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d001      	beq.n	8002d96 <HAL_SPI_MspInit+0xea>
    {
      Error_Handler();
 8002d92:	f7ff fe27 	bl	80029e4 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	4a0b      	ldr	r2, [pc, #44]	; (8002dc8 <HAL_SPI_MspInit+0x11c>)
 8002d9a:	655a      	str	r2, [r3, #84]	; 0x54
 8002d9c:	4a0a      	ldr	r2, [pc, #40]	; (8002dc8 <HAL_SPI_MspInit+0x11c>)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6293      	str	r3, [r2, #40]	; 0x28

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8002da2:	2200      	movs	r2, #0
 8002da4:	2100      	movs	r1, #0
 8002da6:	2022      	movs	r0, #34	; 0x22
 8002da8:	f000 fbc9 	bl	800353e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8002dac:	2022      	movs	r0, #34	; 0x22
 8002dae:	f000 fbe0 	bl	8003572 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002db2:	bf00      	nop
 8002db4:	3720      	adds	r7, #32
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}
 8002dba:	bf00      	nop
 8002dbc:	40013000 	.word	0x40013000
 8002dc0:	20000b68 	.word	0x20000b68
 8002dc4:	40020008 	.word	0x40020008
 8002dc8:	20000bc8 	.word	0x20000bc8
 8002dcc:	4002001c 	.word	0x4002001c

08002dd0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b09c      	sub	sp, #112	; 0x70
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dd8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002ddc:	2200      	movs	r2, #0
 8002dde:	601a      	str	r2, [r3, #0]
 8002de0:	605a      	str	r2, [r3, #4]
 8002de2:	609a      	str	r2, [r3, #8]
 8002de4:	60da      	str	r2, [r3, #12]
 8002de6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002de8:	f107 030c 	add.w	r3, r7, #12
 8002dec:	2250      	movs	r2, #80	; 0x50
 8002dee:	2100      	movs	r1, #0
 8002df0:	4618      	mov	r0, r3
 8002df2:	f009 faf7 	bl	800c3e4 <memset>
  if(huart->Instance==USART1)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a16      	ldr	r2, [pc, #88]	; (8002e54 <HAL_UART_MspInit+0x84>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d124      	bne.n	8002e4a <HAL_UART_MspInit+0x7a>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002e00:	2301      	movs	r3, #1
 8002e02:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002e04:	2300      	movs	r3, #0
 8002e06:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002e08:	f107 030c 	add.w	r3, r7, #12
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f003 fdf6 	bl	80069fe <HAL_RCCEx_PeriphCLKConfig>
 8002e12:	4603      	mov	r3, r0
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d001      	beq.n	8002e1c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002e18:	f7ff fde4 	bl	80029e4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002e1c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002e20:	f7ff fe41 	bl	8002aa6 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e24:	2002      	movs	r0, #2
 8002e26:	f7ff fdf3 	bl	8002a10 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8002e2a:	23c0      	movs	r3, #192	; 0xc0
 8002e2c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e2e:	2302      	movs	r3, #2
 8002e30:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e32:	2300      	movs	r3, #0
 8002e34:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e36:	2300      	movs	r3, #0
 8002e38:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002e3a:	2307      	movs	r3, #7
 8002e3c:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e3e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002e42:	4619      	mov	r1, r3
 8002e44:	4804      	ldr	r0, [pc, #16]	; (8002e58 <HAL_UART_MspInit+0x88>)
 8002e46:	f000 fead 	bl	8003ba4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002e4a:	bf00      	nop
 8002e4c:	3770      	adds	r7, #112	; 0x70
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}
 8002e52:	bf00      	nop
 8002e54:	40013800 	.word	0x40013800
 8002e58:	48000400 	.word	0x48000400

08002e5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002e60:	e7fe      	b.n	8002e60 <NMI_Handler+0x4>

08002e62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e62:	b480      	push	{r7}
 8002e64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e66:	e7fe      	b.n	8002e66 <HardFault_Handler+0x4>

08002e68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e6c:	e7fe      	b.n	8002e6c <MemManage_Handler+0x4>

08002e6e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e6e:	b480      	push	{r7}
 8002e70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e72:	e7fe      	b.n	8002e72 <BusFault_Handler+0x4>

08002e74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e74:	b480      	push	{r7}
 8002e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e78:	e7fe      	b.n	8002e78 <UsageFault_Handler+0x4>

08002e7a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002e7a:	b480      	push	{r7}
 8002e7c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002e7e:	bf00      	nop
 8002e80:	46bd      	mov	sp, r7
 8002e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e86:	4770      	bx	lr

08002e88 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e8c:	bf00      	nop
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e94:	4770      	bx	lr

08002e96 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002e96:	b480      	push	{r7}
 8002e98:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002e9a:	bf00      	nop
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea2:	4770      	bx	lr

08002ea4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ea8:	f000 f9d6 	bl	8003258 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002eac:	bf00      	nop
 8002eae:	bd80      	pop	{r7, pc}

08002eb0 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8002eb4:	f7fe fe0c 	bl	8001ad0 <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8002eb8:	bf00      	nop
 8002eba:	bd80      	pop	{r7, pc}

08002ebc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8002ec0:	4802      	ldr	r0, [pc, #8]	; (8002ecc <DMA1_Channel1_IRQHandler+0x10>)
 8002ec2:	f000 fd1d 	bl	8003900 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002ec6:	bf00      	nop
 8002ec8:	bd80      	pop	{r7, pc}
 8002eca:	bf00      	nop
 8002ecc:	20000b68 	.word	0x20000b68

08002ed0 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8002ed4:	4802      	ldr	r0, [pc, #8]	; (8002ee0 <DMA1_Channel2_IRQHandler+0x10>)
 8002ed6:	f000 fd13 	bl	8003900 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8002eda:	bf00      	nop
 8002edc:	bd80      	pop	{r7, pc}
 8002ede:	bf00      	nop
 8002ee0:	20000bc8 	.word	0x20000bc8

08002ee4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002ee8:	4802      	ldr	r0, [pc, #8]	; (8002ef4 <I2C1_EV_IRQHandler+0x10>)
 8002eea:	f001 fac5 	bl	8004478 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002eee:	bf00      	nop
 8002ef0:	bd80      	pop	{r7, pc}
 8002ef2:	bf00      	nop
 8002ef4:	20000a18 	.word	0x20000a18

08002ef8 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002efc:	4802      	ldr	r0, [pc, #8]	; (8002f08 <SPI1_IRQHandler+0x10>)
 8002efe:	f004 fe09 	bl	8007b14 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8002f02:	bf00      	nop
 8002f04:	bd80      	pop	{r7, pc}
 8002f06:	bf00      	nop
 8002f08:	20000b04 	.word	0x20000b04

08002f0c <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8002f10:	f008 fe6c 	bl	800bbec <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8002f14:	bf00      	nop
 8002f16:	bd80      	pop	{r7, pc}

08002f18 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 8002f1c:	f008 fe9e 	bl	800bc5c <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8002f20:	bf00      	nop
 8002f22:	bd80      	pop	{r7, pc}

08002f24 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8002f28:	f000 ffc4 	bl	8003eb4 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8002f2c:	bf00      	nop
 8002f2e:	bd80      	pop	{r7, pc}

08002f30 <LPTIM1_IRQHandler>:

/**
  * @brief This function handles LPTIM1 global interrupt.
  */
void LPTIM1_IRQHandler(void)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM1_IRQn 0 */

  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 8002f34:	4802      	ldr	r0, [pc, #8]	; (8002f40 <LPTIM1_IRQHandler+0x10>)
 8002f36:	f002 f82b 	bl	8004f90 <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */

  /* USER CODE END LPTIM1_IRQn 1 */
}
 8002f3a:	bf00      	nop
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	bf00      	nop
 8002f40:	20000aa8 	.word	0x20000aa8

08002f44 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b086      	sub	sp, #24
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	60f8      	str	r0, [r7, #12]
 8002f4c:	60b9      	str	r1, [r7, #8]
 8002f4e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f50:	2300      	movs	r3, #0
 8002f52:	617b      	str	r3, [r7, #20]
 8002f54:	e00a      	b.n	8002f6c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002f56:	f3af 8000 	nop.w
 8002f5a:	4601      	mov	r1, r0
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	1c5a      	adds	r2, r3, #1
 8002f60:	60ba      	str	r2, [r7, #8]
 8002f62:	b2ca      	uxtb	r2, r1
 8002f64:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	3301      	adds	r3, #1
 8002f6a:	617b      	str	r3, [r7, #20]
 8002f6c:	697a      	ldr	r2, [r7, #20]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	429a      	cmp	r2, r3
 8002f72:	dbf0      	blt.n	8002f56 <_read+0x12>
  }

  return len;
 8002f74:	687b      	ldr	r3, [r7, #4]
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	3718      	adds	r7, #24
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}

08002f7e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002f7e:	b580      	push	{r7, lr}
 8002f80:	b086      	sub	sp, #24
 8002f82:	af00      	add	r7, sp, #0
 8002f84:	60f8      	str	r0, [r7, #12]
 8002f86:	60b9      	str	r1, [r7, #8]
 8002f88:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	617b      	str	r3, [r7, #20]
 8002f8e:	e009      	b.n	8002fa4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	1c5a      	adds	r2, r3, #1
 8002f94:	60ba      	str	r2, [r7, #8]
 8002f96:	781b      	ldrb	r3, [r3, #0]
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f7ff fd11 	bl	80029c0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	3301      	adds	r3, #1
 8002fa2:	617b      	str	r3, [r7, #20]
 8002fa4:	697a      	ldr	r2, [r7, #20]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	429a      	cmp	r2, r3
 8002faa:	dbf1      	blt.n	8002f90 <_write+0x12>
  }
  return len;
 8002fac:	687b      	ldr	r3, [r7, #4]
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	3718      	adds	r7, #24
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}

08002fb6 <_close>:

int _close(int file)
{
 8002fb6:	b480      	push	{r7}
 8002fb8:	b083      	sub	sp, #12
 8002fba:	af00      	add	r7, sp, #0
 8002fbc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002fbe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	370c      	adds	r7, #12
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fcc:	4770      	bx	lr

08002fce <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002fce:	b480      	push	{r7}
 8002fd0:	b083      	sub	sp, #12
 8002fd2:	af00      	add	r7, sp, #0
 8002fd4:	6078      	str	r0, [r7, #4]
 8002fd6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002fde:	605a      	str	r2, [r3, #4]
  return 0;
 8002fe0:	2300      	movs	r3, #0
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	370c      	adds	r7, #12
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fec:	4770      	bx	lr

08002fee <_isatty>:

int _isatty(int file)
{
 8002fee:	b480      	push	{r7}
 8002ff0:	b083      	sub	sp, #12
 8002ff2:	af00      	add	r7, sp, #0
 8002ff4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002ff6:	2301      	movs	r3, #1
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	370c      	adds	r7, #12
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003002:	4770      	bx	lr

08003004 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003004:	b480      	push	{r7}
 8003006:	b085      	sub	sp, #20
 8003008:	af00      	add	r7, sp, #0
 800300a:	60f8      	str	r0, [r7, #12]
 800300c:	60b9      	str	r1, [r7, #8]
 800300e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003010:	2300      	movs	r3, #0
}
 8003012:	4618      	mov	r0, r3
 8003014:	3714      	adds	r7, #20
 8003016:	46bd      	mov	sp, r7
 8003018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301c:	4770      	bx	lr
	...

08003020 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b086      	sub	sp, #24
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003028:	4a14      	ldr	r2, [pc, #80]	; (800307c <_sbrk+0x5c>)
 800302a:	4b15      	ldr	r3, [pc, #84]	; (8003080 <_sbrk+0x60>)
 800302c:	1ad3      	subs	r3, r2, r3
 800302e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003034:	4b13      	ldr	r3, [pc, #76]	; (8003084 <_sbrk+0x64>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d102      	bne.n	8003042 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800303c:	4b11      	ldr	r3, [pc, #68]	; (8003084 <_sbrk+0x64>)
 800303e:	4a12      	ldr	r2, [pc, #72]	; (8003088 <_sbrk+0x68>)
 8003040:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003042:	4b10      	ldr	r3, [pc, #64]	; (8003084 <_sbrk+0x64>)
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	4413      	add	r3, r2
 800304a:	693a      	ldr	r2, [r7, #16]
 800304c:	429a      	cmp	r2, r3
 800304e:	d207      	bcs.n	8003060 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003050:	f009 f990 	bl	800c374 <__errno>
 8003054:	4603      	mov	r3, r0
 8003056:	220c      	movs	r2, #12
 8003058:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800305a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800305e:	e009      	b.n	8003074 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003060:	4b08      	ldr	r3, [pc, #32]	; (8003084 <_sbrk+0x64>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003066:	4b07      	ldr	r3, [pc, #28]	; (8003084 <_sbrk+0x64>)
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	4413      	add	r3, r2
 800306e:	4a05      	ldr	r2, [pc, #20]	; (8003084 <_sbrk+0x64>)
 8003070:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003072:	68fb      	ldr	r3, [r7, #12]
}
 8003074:	4618      	mov	r0, r3
 8003076:	3718      	adds	r7, #24
 8003078:	46bd      	mov	sp, r7
 800307a:	bd80      	pop	{r7, pc}
 800307c:	20030000 	.word	0x20030000
 8003080:	00000400 	.word	0x00000400
 8003084:	20000ce0 	.word	0x20000ce0
 8003088:	20000ea8 	.word	0x20000ea8

0800308c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800308c:	b480      	push	{r7}
 800308e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8003090:	4b24      	ldr	r3, [pc, #144]	; (8003124 <SystemInit+0x98>)
 8003092:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003096:	4a23      	ldr	r2, [pc, #140]	; (8003124 <SystemInit+0x98>)
 8003098:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800309c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80030a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80030aa:	f043 0301 	orr.w	r3, r3, #1
 80030ae:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 80030b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030b4:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 80030b8:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80030ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030be:	681a      	ldr	r2, [r3, #0]
 80030c0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80030c4:	4b18      	ldr	r3, [pc, #96]	; (8003128 <SystemInit+0x9c>)
 80030c6:	4013      	ands	r3, r2
 80030c8:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80030ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80030d6:	f023 0305 	bic.w	r3, r3, #5
 80030da:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80030de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80030e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80030ea:	f023 0301 	bic.w	r3, r3, #1
 80030ee:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 80030f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030f6:	4a0d      	ldr	r2, [pc, #52]	; (800312c <SystemInit+0xa0>)
 80030f8:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 80030fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030fe:	4a0b      	ldr	r2, [pc, #44]	; (800312c <SystemInit+0xa0>)
 8003100:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003102:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800310c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003110:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003112:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003116:	2200      	movs	r2, #0
 8003118:	619a      	str	r2, [r3, #24]
}
 800311a:	bf00      	nop
 800311c:	46bd      	mov	sp, r7
 800311e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003122:	4770      	bx	lr
 8003124:	e000ed00 	.word	0xe000ed00
 8003128:	faf6fefb 	.word	0xfaf6fefb
 800312c:	22041000 	.word	0x22041000

08003130 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8003130:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003132:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003134:	3304      	adds	r3, #4

08003136 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003136:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003138:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 800313a:	d3f9      	bcc.n	8003130 <CopyDataInit>
  bx lr
 800313c:	4770      	bx	lr

0800313e <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 800313e:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8003140:	3004      	adds	r0, #4

08003142 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8003142:	4288      	cmp	r0, r1
  bcc FillZerobss
 8003144:	d3fb      	bcc.n	800313e <FillZerobss>
  bx lr
 8003146:	4770      	bx	lr

08003148 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003148:	480c      	ldr	r0, [pc, #48]	; (800317c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800314a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800314c:	f7ff ff9e 	bl	800308c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8003150:	480b      	ldr	r0, [pc, #44]	; (8003180 <LoopForever+0x6>)
 8003152:	490c      	ldr	r1, [pc, #48]	; (8003184 <LoopForever+0xa>)
 8003154:	4a0c      	ldr	r2, [pc, #48]	; (8003188 <LoopForever+0xe>)
 8003156:	2300      	movs	r3, #0
 8003158:	f7ff ffed 	bl	8003136 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 800315c:	480b      	ldr	r0, [pc, #44]	; (800318c <LoopForever+0x12>)
 800315e:	490c      	ldr	r1, [pc, #48]	; (8003190 <LoopForever+0x16>)
 8003160:	4a0c      	ldr	r2, [pc, #48]	; (8003194 <LoopForever+0x1a>)
 8003162:	2300      	movs	r3, #0
 8003164:	f7ff ffe7 	bl	8003136 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8003168:	480b      	ldr	r0, [pc, #44]	; (8003198 <LoopForever+0x1e>)
 800316a:	490c      	ldr	r1, [pc, #48]	; (800319c <LoopForever+0x22>)
 800316c:	2300      	movs	r3, #0
 800316e:	f7ff ffe8 	bl	8003142 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003172:	f009 f905 	bl	800c380 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8003176:	f7fe ffad 	bl	80020d4 <main>

0800317a <LoopForever>:

LoopForever:
  b LoopForever
 800317a:	e7fe      	b.n	800317a <LoopForever>
  ldr   r0, =_estack
 800317c:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8003180:	20000008 	.word	0x20000008
 8003184:	2000008c 	.word	0x2000008c
 8003188:	0800dca8 	.word	0x0800dca8
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 800318c:	200301e3 	.word	0x200301e3
 8003190:	200301e3 	.word	0x200301e3
 8003194:	0800e5f5 	.word	0x0800e5f5
  INIT_BSS _sbss, _ebss
 8003198:	2000095c 	.word	0x2000095c
 800319c:	20000ea4 	.word	0x20000ea4

080031a0 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80031a0:	e7fe      	b.n	80031a0 <ADC1_IRQHandler>
	...

080031a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b082      	sub	sp, #8
 80031a8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80031aa:	2300      	movs	r3, #0
 80031ac:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80031ae:	4b0c      	ldr	r3, [pc, #48]	; (80031e0 <HAL_Init+0x3c>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a0b      	ldr	r2, [pc, #44]	; (80031e0 <HAL_Init+0x3c>)
 80031b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031b8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80031ba:	2003      	movs	r0, #3
 80031bc:	f000 f9b4 	bl	8003528 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80031c0:	2000      	movs	r0, #0
 80031c2:	f000 f80f 	bl	80031e4 <HAL_InitTick>
 80031c6:	4603      	mov	r3, r0
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d002      	beq.n	80031d2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	71fb      	strb	r3, [r7, #7]
 80031d0:	e001      	b.n	80031d6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80031d2:	f7ff fc81 	bl	8002ad8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80031d6:	79fb      	ldrb	r3, [r7, #7]
}
 80031d8:	4618      	mov	r0, r3
 80031da:	3708      	adds	r7, #8
 80031dc:	46bd      	mov	sp, r7
 80031de:	bd80      	pop	{r7, pc}
 80031e0:	58004000 	.word	0x58004000

080031e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b084      	sub	sp, #16
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80031ec:	2300      	movs	r3, #0
 80031ee:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 80031f0:	4b17      	ldr	r3, [pc, #92]	; (8003250 <HAL_InitTick+0x6c>)
 80031f2:	781b      	ldrb	r3, [r3, #0]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d024      	beq.n	8003242 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80031f8:	f003 f970 	bl	80064dc <HAL_RCC_GetHCLKFreq>
 80031fc:	4602      	mov	r2, r0
 80031fe:	4b14      	ldr	r3, [pc, #80]	; (8003250 <HAL_InitTick+0x6c>)
 8003200:	781b      	ldrb	r3, [r3, #0]
 8003202:	4619      	mov	r1, r3
 8003204:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003208:	fbb3 f3f1 	udiv	r3, r3, r1
 800320c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003210:	4618      	mov	r0, r3
 8003212:	f000 f9ca 	bl	80035aa <HAL_SYSTICK_Config>
 8003216:	4603      	mov	r3, r0
 8003218:	2b00      	cmp	r3, #0
 800321a:	d10f      	bne.n	800323c <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2b0f      	cmp	r3, #15
 8003220:	d809      	bhi.n	8003236 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003222:	2200      	movs	r2, #0
 8003224:	6879      	ldr	r1, [r7, #4]
 8003226:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800322a:	f000 f988 	bl	800353e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800322e:	4a09      	ldr	r2, [pc, #36]	; (8003254 <HAL_InitTick+0x70>)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6013      	str	r3, [r2, #0]
 8003234:	e007      	b.n	8003246 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	73fb      	strb	r3, [r7, #15]
 800323a:	e004      	b.n	8003246 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	73fb      	strb	r3, [r7, #15]
 8003240:	e001      	b.n	8003246 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003246:	7bfb      	ldrb	r3, [r7, #15]
}
 8003248:	4618      	mov	r0, r3
 800324a:	3710      	adds	r7, #16
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}
 8003250:	20000010 	.word	0x20000010
 8003254:	2000000c 	.word	0x2000000c

08003258 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003258:	b480      	push	{r7}
 800325a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800325c:	4b06      	ldr	r3, [pc, #24]	; (8003278 <HAL_IncTick+0x20>)
 800325e:	781b      	ldrb	r3, [r3, #0]
 8003260:	461a      	mov	r2, r3
 8003262:	4b06      	ldr	r3, [pc, #24]	; (800327c <HAL_IncTick+0x24>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4413      	add	r3, r2
 8003268:	4a04      	ldr	r2, [pc, #16]	; (800327c <HAL_IncTick+0x24>)
 800326a:	6013      	str	r3, [r2, #0]
}
 800326c:	bf00      	nop
 800326e:	46bd      	mov	sp, r7
 8003270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003274:	4770      	bx	lr
 8003276:	bf00      	nop
 8003278:	20000010 	.word	0x20000010
 800327c:	20000ce4 	.word	0x20000ce4

08003280 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003280:	b480      	push	{r7}
 8003282:	af00      	add	r7, sp, #0
  return uwTick;
 8003284:	4b03      	ldr	r3, [pc, #12]	; (8003294 <HAL_GetTick+0x14>)
 8003286:	681b      	ldr	r3, [r3, #0]
}
 8003288:	4618      	mov	r0, r3
 800328a:	46bd      	mov	sp, r7
 800328c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003290:	4770      	bx	lr
 8003292:	bf00      	nop
 8003294:	20000ce4 	.word	0x20000ce4

08003298 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8003298:	b480      	push	{r7}
 800329a:	af00      	add	r7, sp, #0
  return uwTickPrio;
 800329c:	4b03      	ldr	r3, [pc, #12]	; (80032ac <HAL_GetTickPrio+0x14>)
 800329e:	681b      	ldr	r3, [r3, #0]
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	46bd      	mov	sp, r7
 80032a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a8:	4770      	bx	lr
 80032aa:	bf00      	nop
 80032ac:	2000000c 	.word	0x2000000c

080032b0 <HAL_GetTickFreq>:
/**
  * @brief Return tick frequency.
  * @retval tick period in Hz
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 80032b0:	b480      	push	{r7}
 80032b2:	af00      	add	r7, sp, #0
  return uwTickFreq;
 80032b4:	4b03      	ldr	r3, [pc, #12]	; (80032c4 <HAL_GetTickFreq+0x14>)
 80032b6:	781b      	ldrb	r3, [r3, #0]
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	46bd      	mov	sp, r7
 80032bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c0:	4770      	bx	lr
 80032c2:	bf00      	nop
 80032c4:	20000010 	.word	0x20000010

080032c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b085      	sub	sp, #20
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	f003 0307 	and.w	r3, r3, #7
 80032d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80032d8:	4b0c      	ldr	r3, [pc, #48]	; (800330c <__NVIC_SetPriorityGrouping+0x44>)
 80032da:	68db      	ldr	r3, [r3, #12]
 80032dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80032de:	68ba      	ldr	r2, [r7, #8]
 80032e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80032e4:	4013      	ands	r3, r2
 80032e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80032f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80032f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80032fa:	4a04      	ldr	r2, [pc, #16]	; (800330c <__NVIC_SetPriorityGrouping+0x44>)
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	60d3      	str	r3, [r2, #12]
}
 8003300:	bf00      	nop
 8003302:	3714      	adds	r7, #20
 8003304:	46bd      	mov	sp, r7
 8003306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330a:	4770      	bx	lr
 800330c:	e000ed00 	.word	0xe000ed00

08003310 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003310:	b480      	push	{r7}
 8003312:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003314:	4b04      	ldr	r3, [pc, #16]	; (8003328 <__NVIC_GetPriorityGrouping+0x18>)
 8003316:	68db      	ldr	r3, [r3, #12]
 8003318:	0a1b      	lsrs	r3, r3, #8
 800331a:	f003 0307 	and.w	r3, r3, #7
}
 800331e:	4618      	mov	r0, r3
 8003320:	46bd      	mov	sp, r7
 8003322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003326:	4770      	bx	lr
 8003328:	e000ed00 	.word	0xe000ed00

0800332c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800332c:	b480      	push	{r7}
 800332e:	b083      	sub	sp, #12
 8003330:	af00      	add	r7, sp, #0
 8003332:	4603      	mov	r3, r0
 8003334:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003336:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800333a:	2b00      	cmp	r3, #0
 800333c:	db0b      	blt.n	8003356 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800333e:	79fb      	ldrb	r3, [r7, #7]
 8003340:	f003 021f 	and.w	r2, r3, #31
 8003344:	4907      	ldr	r1, [pc, #28]	; (8003364 <__NVIC_EnableIRQ+0x38>)
 8003346:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800334a:	095b      	lsrs	r3, r3, #5
 800334c:	2001      	movs	r0, #1
 800334e:	fa00 f202 	lsl.w	r2, r0, r2
 8003352:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003356:	bf00      	nop
 8003358:	370c      	adds	r7, #12
 800335a:	46bd      	mov	sp, r7
 800335c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003360:	4770      	bx	lr
 8003362:	bf00      	nop
 8003364:	e000e100 	.word	0xe000e100

08003368 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003368:	b480      	push	{r7}
 800336a:	b083      	sub	sp, #12
 800336c:	af00      	add	r7, sp, #0
 800336e:	4603      	mov	r3, r0
 8003370:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003372:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003376:	2b00      	cmp	r3, #0
 8003378:	db12      	blt.n	80033a0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800337a:	79fb      	ldrb	r3, [r7, #7]
 800337c:	f003 021f 	and.w	r2, r3, #31
 8003380:	490a      	ldr	r1, [pc, #40]	; (80033ac <__NVIC_DisableIRQ+0x44>)
 8003382:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003386:	095b      	lsrs	r3, r3, #5
 8003388:	2001      	movs	r0, #1
 800338a:	fa00 f202 	lsl.w	r2, r0, r2
 800338e:	3320      	adds	r3, #32
 8003390:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003394:	f3bf 8f4f 	dsb	sy
}
 8003398:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800339a:	f3bf 8f6f 	isb	sy
}
 800339e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80033a0:	bf00      	nop
 80033a2:	370c      	adds	r7, #12
 80033a4:	46bd      	mov	sp, r7
 80033a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033aa:	4770      	bx	lr
 80033ac:	e000e100 	.word	0xe000e100

080033b0 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b083      	sub	sp, #12
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	4603      	mov	r3, r0
 80033b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	db0c      	blt.n	80033dc <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033c2:	79fb      	ldrb	r3, [r7, #7]
 80033c4:	f003 021f 	and.w	r2, r3, #31
 80033c8:	4907      	ldr	r1, [pc, #28]	; (80033e8 <__NVIC_SetPendingIRQ+0x38>)
 80033ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033ce:	095b      	lsrs	r3, r3, #5
 80033d0:	2001      	movs	r0, #1
 80033d2:	fa00 f202 	lsl.w	r2, r0, r2
 80033d6:	3340      	adds	r3, #64	; 0x40
 80033d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80033dc:	bf00      	nop
 80033de:	370c      	adds	r7, #12
 80033e0:	46bd      	mov	sp, r7
 80033e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e6:	4770      	bx	lr
 80033e8:	e000e100 	.word	0xe000e100

080033ec <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b083      	sub	sp, #12
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	4603      	mov	r3, r0
 80033f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	db0c      	blt.n	8003418 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033fe:	79fb      	ldrb	r3, [r7, #7]
 8003400:	f003 021f 	and.w	r2, r3, #31
 8003404:	4907      	ldr	r1, [pc, #28]	; (8003424 <__NVIC_ClearPendingIRQ+0x38>)
 8003406:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800340a:	095b      	lsrs	r3, r3, #5
 800340c:	2001      	movs	r0, #1
 800340e:	fa00 f202 	lsl.w	r2, r0, r2
 8003412:	3360      	adds	r3, #96	; 0x60
 8003414:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003418:	bf00      	nop
 800341a:	370c      	adds	r7, #12
 800341c:	46bd      	mov	sp, r7
 800341e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003422:	4770      	bx	lr
 8003424:	e000e100 	.word	0xe000e100

08003428 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003428:	b480      	push	{r7}
 800342a:	b083      	sub	sp, #12
 800342c:	af00      	add	r7, sp, #0
 800342e:	4603      	mov	r3, r0
 8003430:	6039      	str	r1, [r7, #0]
 8003432:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003434:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003438:	2b00      	cmp	r3, #0
 800343a:	db0a      	blt.n	8003452 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	b2da      	uxtb	r2, r3
 8003440:	490c      	ldr	r1, [pc, #48]	; (8003474 <__NVIC_SetPriority+0x4c>)
 8003442:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003446:	0112      	lsls	r2, r2, #4
 8003448:	b2d2      	uxtb	r2, r2
 800344a:	440b      	add	r3, r1
 800344c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003450:	e00a      	b.n	8003468 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	b2da      	uxtb	r2, r3
 8003456:	4908      	ldr	r1, [pc, #32]	; (8003478 <__NVIC_SetPriority+0x50>)
 8003458:	79fb      	ldrb	r3, [r7, #7]
 800345a:	f003 030f 	and.w	r3, r3, #15
 800345e:	3b04      	subs	r3, #4
 8003460:	0112      	lsls	r2, r2, #4
 8003462:	b2d2      	uxtb	r2, r2
 8003464:	440b      	add	r3, r1
 8003466:	761a      	strb	r2, [r3, #24]
}
 8003468:	bf00      	nop
 800346a:	370c      	adds	r7, #12
 800346c:	46bd      	mov	sp, r7
 800346e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003472:	4770      	bx	lr
 8003474:	e000e100 	.word	0xe000e100
 8003478:	e000ed00 	.word	0xe000ed00

0800347c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800347c:	b480      	push	{r7}
 800347e:	b089      	sub	sp, #36	; 0x24
 8003480:	af00      	add	r7, sp, #0
 8003482:	60f8      	str	r0, [r7, #12]
 8003484:	60b9      	str	r1, [r7, #8]
 8003486:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	f003 0307 	and.w	r3, r3, #7
 800348e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003490:	69fb      	ldr	r3, [r7, #28]
 8003492:	f1c3 0307 	rsb	r3, r3, #7
 8003496:	2b04      	cmp	r3, #4
 8003498:	bf28      	it	cs
 800349a:	2304      	movcs	r3, #4
 800349c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800349e:	69fb      	ldr	r3, [r7, #28]
 80034a0:	3304      	adds	r3, #4
 80034a2:	2b06      	cmp	r3, #6
 80034a4:	d902      	bls.n	80034ac <NVIC_EncodePriority+0x30>
 80034a6:	69fb      	ldr	r3, [r7, #28]
 80034a8:	3b03      	subs	r3, #3
 80034aa:	e000      	b.n	80034ae <NVIC_EncodePriority+0x32>
 80034ac:	2300      	movs	r3, #0
 80034ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80034b4:	69bb      	ldr	r3, [r7, #24]
 80034b6:	fa02 f303 	lsl.w	r3, r2, r3
 80034ba:	43da      	mvns	r2, r3
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	401a      	ands	r2, r3
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80034c4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80034c8:	697b      	ldr	r3, [r7, #20]
 80034ca:	fa01 f303 	lsl.w	r3, r1, r3
 80034ce:	43d9      	mvns	r1, r3
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034d4:	4313      	orrs	r3, r2
         );
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	3724      	adds	r7, #36	; 0x24
 80034da:	46bd      	mov	sp, r7
 80034dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e0:	4770      	bx	lr
	...

080034e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b082      	sub	sp, #8
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	3b01      	subs	r3, #1
 80034f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80034f4:	d301      	bcc.n	80034fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80034f6:	2301      	movs	r3, #1
 80034f8:	e00f      	b.n	800351a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80034fa:	4a0a      	ldr	r2, [pc, #40]	; (8003524 <SysTick_Config+0x40>)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	3b01      	subs	r3, #1
 8003500:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003502:	210f      	movs	r1, #15
 8003504:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003508:	f7ff ff8e 	bl	8003428 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800350c:	4b05      	ldr	r3, [pc, #20]	; (8003524 <SysTick_Config+0x40>)
 800350e:	2200      	movs	r2, #0
 8003510:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003512:	4b04      	ldr	r3, [pc, #16]	; (8003524 <SysTick_Config+0x40>)
 8003514:	2207      	movs	r2, #7
 8003516:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003518:	2300      	movs	r3, #0
}
 800351a:	4618      	mov	r0, r3
 800351c:	3708      	adds	r7, #8
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}
 8003522:	bf00      	nop
 8003524:	e000e010 	.word	0xe000e010

08003528 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b082      	sub	sp, #8
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003530:	6878      	ldr	r0, [r7, #4]
 8003532:	f7ff fec9 	bl	80032c8 <__NVIC_SetPriorityGrouping>
}
 8003536:	bf00      	nop
 8003538:	3708      	adds	r7, #8
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}

0800353e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800353e:	b580      	push	{r7, lr}
 8003540:	b086      	sub	sp, #24
 8003542:	af00      	add	r7, sp, #0
 8003544:	4603      	mov	r3, r0
 8003546:	60b9      	str	r1, [r7, #8]
 8003548:	607a      	str	r2, [r7, #4]
 800354a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800354c:	f7ff fee0 	bl	8003310 <__NVIC_GetPriorityGrouping>
 8003550:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003552:	687a      	ldr	r2, [r7, #4]
 8003554:	68b9      	ldr	r1, [r7, #8]
 8003556:	6978      	ldr	r0, [r7, #20]
 8003558:	f7ff ff90 	bl	800347c <NVIC_EncodePriority>
 800355c:	4602      	mov	r2, r0
 800355e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003562:	4611      	mov	r1, r2
 8003564:	4618      	mov	r0, r3
 8003566:	f7ff ff5f 	bl	8003428 <__NVIC_SetPriority>
}
 800356a:	bf00      	nop
 800356c:	3718      	adds	r7, #24
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}

08003572 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003572:	b580      	push	{r7, lr}
 8003574:	b082      	sub	sp, #8
 8003576:	af00      	add	r7, sp, #0
 8003578:	4603      	mov	r3, r0
 800357a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800357c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003580:	4618      	mov	r0, r3
 8003582:	f7ff fed3 	bl	800332c <__NVIC_EnableIRQ>
}
 8003586:	bf00      	nop
 8003588:	3708      	adds	r7, #8
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}

0800358e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800358e:	b580      	push	{r7, lr}
 8003590:	b082      	sub	sp, #8
 8003592:	af00      	add	r7, sp, #0
 8003594:	4603      	mov	r3, r0
 8003596:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003598:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800359c:	4618      	mov	r0, r3
 800359e:	f7ff fee3 	bl	8003368 <__NVIC_DisableIRQ>
}
 80035a2:	bf00      	nop
 80035a4:	3708      	adds	r7, #8
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}

080035aa <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80035aa:	b580      	push	{r7, lr}
 80035ac:	b082      	sub	sp, #8
 80035ae:	af00      	add	r7, sp, #0
 80035b0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	f7ff ff96 	bl	80034e4 <SysTick_Config>
 80035b8:	4603      	mov	r3, r0
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	3708      	adds	r7, #8
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}

080035c2 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80035c2:	b580      	push	{r7, lr}
 80035c4:	b082      	sub	sp, #8
 80035c6:	af00      	add	r7, sp, #0
 80035c8:	4603      	mov	r3, r0
 80035ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 80035cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035d0:	4618      	mov	r0, r3
 80035d2:	f7ff feed 	bl	80033b0 <__NVIC_SetPendingIRQ>
}
 80035d6:	bf00      	nop
 80035d8:	3708      	adds	r7, #8
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}

080035de <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80035de:	b580      	push	{r7, lr}
 80035e0:	b082      	sub	sp, #8
 80035e2:	af00      	add	r7, sp, #0
 80035e4:	4603      	mov	r3, r0
 80035e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 80035e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035ec:	4618      	mov	r0, r3
 80035ee:	f7ff fefd 	bl	80033ec <__NVIC_ClearPendingIRQ>
}
 80035f2:	bf00      	nop
 80035f4:	3708      	adds	r7, #8
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}
	...

080035fc <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b084      	sub	sp, #16
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d101      	bne.n	800360e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	e08e      	b.n	800372c <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	461a      	mov	r2, r3
 8003614:	4b47      	ldr	r3, [pc, #284]	; (8003734 <HAL_DMA_Init+0x138>)
 8003616:	429a      	cmp	r2, r3
 8003618:	d80f      	bhi.n	800363a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	461a      	mov	r2, r3
 8003620:	4b45      	ldr	r3, [pc, #276]	; (8003738 <HAL_DMA_Init+0x13c>)
 8003622:	4413      	add	r3, r2
 8003624:	4a45      	ldr	r2, [pc, #276]	; (800373c <HAL_DMA_Init+0x140>)
 8003626:	fba2 2303 	umull	r2, r3, r2, r3
 800362a:	091b      	lsrs	r3, r3, #4
 800362c:	009a      	lsls	r2, r3, #2
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	4a42      	ldr	r2, [pc, #264]	; (8003740 <HAL_DMA_Init+0x144>)
 8003636:	641a      	str	r2, [r3, #64]	; 0x40
 8003638:	e00e      	b.n	8003658 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	461a      	mov	r2, r3
 8003640:	4b40      	ldr	r3, [pc, #256]	; (8003744 <HAL_DMA_Init+0x148>)
 8003642:	4413      	add	r3, r2
 8003644:	4a3d      	ldr	r2, [pc, #244]	; (800373c <HAL_DMA_Init+0x140>)
 8003646:	fba2 2303 	umull	r2, r3, r2, r3
 800364a:	091b      	lsrs	r3, r3, #4
 800364c:	009a      	lsls	r2, r3, #2
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	4a3c      	ldr	r2, [pc, #240]	; (8003748 <HAL_DMA_Init+0x14c>)
 8003656:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2202      	movs	r2, #2
 800365c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800366e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003672:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800367c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	691b      	ldr	r3, [r3, #16]
 8003682:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003688:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	699b      	ldr	r3, [r3, #24]
 800368e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003694:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6a1b      	ldr	r3, [r3, #32]
 800369a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800369c:	68fa      	ldr	r2, [r7, #12]
 800369e:	4313      	orrs	r3, r2
 80036a0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	68fa      	ldr	r2, [r7, #12]
 80036a8:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80036aa:	6878      	ldr	r0, [r7, #4]
 80036ac:	f000 fa16 	bl	8003adc <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80036b8:	d102      	bne.n	80036c0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2200      	movs	r2, #0
 80036be:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	685a      	ldr	r2, [r3, #4]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036c8:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80036cc:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036d2:	687a      	ldr	r2, [r7, #4]
 80036d4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80036d6:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d010      	beq.n	8003702 <HAL_DMA_Init+0x106>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	2b04      	cmp	r3, #4
 80036e6:	d80c      	bhi.n	8003702 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80036e8:	6878      	ldr	r0, [r7, #4]
 80036ea:	f000 fa35 	bl	8003b58 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036f2:	2200      	movs	r2, #0
 80036f4:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036fa:	687a      	ldr	r2, [r7, #4]
 80036fc:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80036fe:	605a      	str	r2, [r3, #4]
 8003700:	e008      	b.n	8003714 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2200      	movs	r2, #0
 8003706:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2200      	movs	r2, #0
 800370c:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2200      	movs	r2, #0
 8003712:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2200      	movs	r2, #0
 8003718:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2201      	movs	r2, #1
 800371e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2200      	movs	r2, #0
 8003726:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800372a:	2300      	movs	r3, #0
}
 800372c:	4618      	mov	r0, r3
 800372e:	3710      	adds	r7, #16
 8003730:	46bd      	mov	sp, r7
 8003732:	bd80      	pop	{r7, pc}
 8003734:	40020407 	.word	0x40020407
 8003738:	bffdfff8 	.word	0xbffdfff8
 800373c:	cccccccd 	.word	0xcccccccd
 8003740:	40020000 	.word	0x40020000
 8003744:	bffdfbf8 	.word	0xbffdfbf8
 8003748:	40020400 	.word	0x40020400

0800374c <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b086      	sub	sp, #24
 8003750:	af00      	add	r7, sp, #0
 8003752:	60f8      	str	r0, [r7, #12]
 8003754:	60b9      	str	r1, [r7, #8]
 8003756:	607a      	str	r2, [r7, #4]
 8003758:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800375a:	2300      	movs	r3, #0
 800375c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003764:	2b01      	cmp	r3, #1
 8003766:	d101      	bne.n	800376c <HAL_DMA_Start_IT+0x20>
 8003768:	2302      	movs	r3, #2
 800376a:	e066      	b.n	800383a <HAL_DMA_Start_IT+0xee>
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	2201      	movs	r2, #1
 8003770:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800377a:	b2db      	uxtb	r3, r3
 800377c:	2b01      	cmp	r3, #1
 800377e:	d155      	bne.n	800382c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2202      	movs	r2, #2
 8003784:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	2200      	movs	r2, #0
 800378c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	681a      	ldr	r2, [r3, #0]
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f022 0201 	bic.w	r2, r2, #1
 800379c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	687a      	ldr	r2, [r7, #4]
 80037a2:	68b9      	ldr	r1, [r7, #8]
 80037a4:	68f8      	ldr	r0, [r7, #12]
 80037a6:	f000 f95a 	bl	8003a5e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d008      	beq.n	80037c4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	681a      	ldr	r2, [r3, #0]
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f042 020e 	orr.w	r2, r2, #14
 80037c0:	601a      	str	r2, [r3, #0]
 80037c2:	e00f      	b.n	80037e4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	681a      	ldr	r2, [r3, #0]
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f022 0204 	bic.w	r2, r2, #4
 80037d2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	681a      	ldr	r2, [r3, #0]
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f042 020a 	orr.w	r2, r2, #10
 80037e2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d007      	beq.n	8003802 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037f6:	681a      	ldr	r2, [r3, #0]
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003800:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003806:	2b00      	cmp	r3, #0
 8003808:	d007      	beq.n	800381a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800380e:	681a      	ldr	r2, [r3, #0]
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003814:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003818:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	681a      	ldr	r2, [r3, #0]
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f042 0201 	orr.w	r2, r2, #1
 8003828:	601a      	str	r2, [r3, #0]
 800382a:	e005      	b.n	8003838 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2200      	movs	r2, #0
 8003830:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003834:	2302      	movs	r3, #2
 8003836:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003838:	7dfb      	ldrb	r3, [r7, #23]
}
 800383a:	4618      	mov	r0, r3
 800383c:	3718      	adds	r7, #24
 800383e:	46bd      	mov	sp, r7
 8003840:	bd80      	pop	{r7, pc}

08003842 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003842:	b580      	push	{r7, lr}
 8003844:	b084      	sub	sp, #16
 8003846:	af00      	add	r7, sp, #0
 8003848:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800384a:	2300      	movs	r3, #0
 800384c:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003854:	b2db      	uxtb	r3, r3
 8003856:	2b02      	cmp	r3, #2
 8003858:	d005      	beq.n	8003866 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2204      	movs	r2, #4
 800385e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	73fb      	strb	r3, [r7, #15]
 8003864:	e047      	b.n	80038f6 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f022 020e 	bic.w	r2, r2, #14
 8003874:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	681a      	ldr	r2, [r3, #0]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f022 0201 	bic.w	r2, r2, #1
 8003884:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800388a:	681a      	ldr	r2, [r3, #0]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003890:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003894:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800389a:	f003 021c 	and.w	r2, r3, #28
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a2:	2101      	movs	r1, #1
 80038a4:	fa01 f202 	lsl.w	r2, r1, r2
 80038a8:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038ae:	687a      	ldr	r2, [r7, #4]
 80038b0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80038b2:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d00c      	beq.n	80038d6 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038c0:	681a      	ldr	r2, [r3, #0]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038c6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80038ca:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038d0:	687a      	ldr	r2, [r7, #4]
 80038d2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80038d4:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2201      	movs	r2, #1
 80038da:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2200      	movs	r2, #0
 80038e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d003      	beq.n	80038f6 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	4798      	blx	r3
    }
  }
  return status;
 80038f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	3710      	adds	r7, #16
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}

08003900 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b084      	sub	sp, #16
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800391c:	f003 031c 	and.w	r3, r3, #28
 8003920:	2204      	movs	r2, #4
 8003922:	409a      	lsls	r2, r3
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	4013      	ands	r3, r2
 8003928:	2b00      	cmp	r3, #0
 800392a:	d026      	beq.n	800397a <HAL_DMA_IRQHandler+0x7a>
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	f003 0304 	and.w	r3, r3, #4
 8003932:	2b00      	cmp	r3, #0
 8003934:	d021      	beq.n	800397a <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f003 0320 	and.w	r3, r3, #32
 8003940:	2b00      	cmp	r3, #0
 8003942:	d107      	bne.n	8003954 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	681a      	ldr	r2, [r3, #0]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f022 0204 	bic.w	r2, r2, #4
 8003952:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003958:	f003 021c 	and.w	r2, r3, #28
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003960:	2104      	movs	r1, #4
 8003962:	fa01 f202 	lsl.w	r2, r1, r2
 8003966:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800396c:	2b00      	cmp	r3, #0
 800396e:	d071      	beq.n	8003a54 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003974:	6878      	ldr	r0, [r7, #4]
 8003976:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003978:	e06c      	b.n	8003a54 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800397e:	f003 031c 	and.w	r3, r3, #28
 8003982:	2202      	movs	r2, #2
 8003984:	409a      	lsls	r2, r3
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	4013      	ands	r3, r2
 800398a:	2b00      	cmp	r3, #0
 800398c:	d02e      	beq.n	80039ec <HAL_DMA_IRQHandler+0xec>
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	f003 0302 	and.w	r3, r3, #2
 8003994:	2b00      	cmp	r3, #0
 8003996:	d029      	beq.n	80039ec <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f003 0320 	and.w	r3, r3, #32
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d10b      	bne.n	80039be <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	681a      	ldr	r2, [r3, #0]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f022 020a 	bic.w	r2, r2, #10
 80039b4:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2201      	movs	r2, #1
 80039ba:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039c2:	f003 021c 	and.w	r2, r3, #28
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ca:	2102      	movs	r1, #2
 80039cc:	fa01 f202 	lsl.w	r2, r1, r2
 80039d0:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2200      	movs	r2, #0
 80039d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d038      	beq.n	8003a54 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039e6:	6878      	ldr	r0, [r7, #4]
 80039e8:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80039ea:	e033      	b.n	8003a54 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039f0:	f003 031c 	and.w	r3, r3, #28
 80039f4:	2208      	movs	r2, #8
 80039f6:	409a      	lsls	r2, r3
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	4013      	ands	r3, r2
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d02a      	beq.n	8003a56 <HAL_DMA_IRQHandler+0x156>
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	f003 0308 	and.w	r3, r3, #8
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d025      	beq.n	8003a56 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	681a      	ldr	r2, [r3, #0]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f022 020e 	bic.w	r2, r2, #14
 8003a18:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a1e:	f003 021c 	and.w	r2, r3, #28
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a26:	2101      	movs	r1, #1
 8003a28:	fa01 f202 	lsl.w	r2, r1, r2
 8003a2c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2201      	movs	r2, #1
 8003a32:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2201      	movs	r2, #1
 8003a38:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d004      	beq.n	8003a56 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a50:	6878      	ldr	r0, [r7, #4]
 8003a52:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003a54:	bf00      	nop
 8003a56:	bf00      	nop
}
 8003a58:	3710      	adds	r7, #16
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}

08003a5e <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003a5e:	b480      	push	{r7}
 8003a60:	b085      	sub	sp, #20
 8003a62:	af00      	add	r7, sp, #0
 8003a64:	60f8      	str	r0, [r7, #12]
 8003a66:	60b9      	str	r1, [r7, #8]
 8003a68:	607a      	str	r2, [r7, #4]
 8003a6a:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a70:	68fa      	ldr	r2, [r7, #12]
 8003a72:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003a74:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d004      	beq.n	8003a88 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a82:	68fa      	ldr	r2, [r7, #12]
 8003a84:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003a86:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a8c:	f003 021c 	and.w	r2, r3, #28
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a94:	2101      	movs	r1, #1
 8003a96:	fa01 f202 	lsl.w	r2, r1, r2
 8003a9a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	683a      	ldr	r2, [r7, #0]
 8003aa2:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	689b      	ldr	r3, [r3, #8]
 8003aa8:	2b10      	cmp	r3, #16
 8003aaa:	d108      	bne.n	8003abe <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	687a      	ldr	r2, [r7, #4]
 8003ab2:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	68ba      	ldr	r2, [r7, #8]
 8003aba:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003abc:	e007      	b.n	8003ace <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	68ba      	ldr	r2, [r7, #8]
 8003ac4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	687a      	ldr	r2, [r7, #4]
 8003acc:	60da      	str	r2, [r3, #12]
}
 8003ace:	bf00      	nop
 8003ad0:	3714      	adds	r7, #20
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad8:	4770      	bx	lr
	...

08003adc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b085      	sub	sp, #20
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	461a      	mov	r2, r3
 8003aea:	4b17      	ldr	r3, [pc, #92]	; (8003b48 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003aec:	429a      	cmp	r2, r3
 8003aee:	d80a      	bhi.n	8003b06 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003af4:	089b      	lsrs	r3, r3, #2
 8003af6:	009b      	lsls	r3, r3, #2
 8003af8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003afc:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8003b00:	687a      	ldr	r2, [r7, #4]
 8003b02:	6493      	str	r3, [r2, #72]	; 0x48
 8003b04:	e007      	b.n	8003b16 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b0a:	089b      	lsrs	r3, r3, #2
 8003b0c:	009a      	lsls	r2, r3, #2
 8003b0e:	4b0f      	ldr	r3, [pc, #60]	; (8003b4c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003b10:	4413      	add	r3, r2
 8003b12:	687a      	ldr	r2, [r7, #4]
 8003b14:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	b2db      	uxtb	r3, r3
 8003b1c:	3b08      	subs	r3, #8
 8003b1e:	4a0c      	ldr	r2, [pc, #48]	; (8003b50 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003b20:	fba2 2303 	umull	r2, r3, r2, r3
 8003b24:	091b      	lsrs	r3, r3, #4
 8003b26:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	4a0a      	ldr	r2, [pc, #40]	; (8003b54 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003b2c:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	f003 031f 	and.w	r3, r3, #31
 8003b34:	2201      	movs	r2, #1
 8003b36:	409a      	lsls	r2, r3
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003b3c:	bf00      	nop
 8003b3e:	3714      	adds	r7, #20
 8003b40:	46bd      	mov	sp, r7
 8003b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b46:	4770      	bx	lr
 8003b48:	40020407 	.word	0x40020407
 8003b4c:	4002081c 	.word	0x4002081c
 8003b50:	cccccccd 	.word	0xcccccccd
 8003b54:	40020880 	.word	0x40020880

08003b58 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b085      	sub	sp, #20
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b68:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003b6a:	68fa      	ldr	r2, [r7, #12]
 8003b6c:	4b0b      	ldr	r3, [pc, #44]	; (8003b9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003b6e:	4413      	add	r3, r2
 8003b70:	009b      	lsls	r3, r3, #2
 8003b72:	461a      	mov	r2, r3
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	4a09      	ldr	r2, [pc, #36]	; (8003ba0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8003b7c:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	3b01      	subs	r3, #1
 8003b82:	f003 0303 	and.w	r3, r3, #3
 8003b86:	2201      	movs	r2, #1
 8003b88:	409a      	lsls	r2, r3
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003b8e:	bf00      	nop
 8003b90:	3714      	adds	r7, #20
 8003b92:	46bd      	mov	sp, r7
 8003b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b98:	4770      	bx	lr
 8003b9a:	bf00      	nop
 8003b9c:	1000823f 	.word	0x1000823f
 8003ba0:	40020940 	.word	0x40020940

08003ba4 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b087      	sub	sp, #28
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
 8003bac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003bae:	2300      	movs	r3, #0
 8003bb0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003bb2:	e14c      	b.n	8003e4e <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	681a      	ldr	r2, [r3, #0]
 8003bb8:	2101      	movs	r1, #1
 8003bba:	697b      	ldr	r3, [r7, #20]
 8003bbc:	fa01 f303 	lsl.w	r3, r1, r3
 8003bc0:	4013      	ands	r3, r2
 8003bc2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	f000 813e 	beq.w	8003e48 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	f003 0303 	and.w	r3, r3, #3
 8003bd4:	2b01      	cmp	r3, #1
 8003bd6:	d005      	beq.n	8003be4 <HAL_GPIO_Init+0x40>
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	f003 0303 	and.w	r3, r3, #3
 8003be0:	2b02      	cmp	r3, #2
 8003be2:	d130      	bne.n	8003c46 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	005b      	lsls	r3, r3, #1
 8003bee:	2203      	movs	r2, #3
 8003bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf4:	43db      	mvns	r3, r3
 8003bf6:	693a      	ldr	r2, [r7, #16]
 8003bf8:	4013      	ands	r3, r2
 8003bfa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	68da      	ldr	r2, [r3, #12]
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	005b      	lsls	r3, r3, #1
 8003c04:	fa02 f303 	lsl.w	r3, r2, r3
 8003c08:	693a      	ldr	r2, [r7, #16]
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	693a      	ldr	r2, [r7, #16]
 8003c12:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c22:	43db      	mvns	r3, r3
 8003c24:	693a      	ldr	r2, [r7, #16]
 8003c26:	4013      	ands	r3, r2
 8003c28:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	091b      	lsrs	r3, r3, #4
 8003c30:	f003 0201 	and.w	r2, r3, #1
 8003c34:	697b      	ldr	r3, [r7, #20]
 8003c36:	fa02 f303 	lsl.w	r3, r2, r3
 8003c3a:	693a      	ldr	r2, [r7, #16]
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	693a      	ldr	r2, [r7, #16]
 8003c44:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	f003 0303 	and.w	r3, r3, #3
 8003c4e:	2b03      	cmp	r3, #3
 8003c50:	d017      	beq.n	8003c82 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	68db      	ldr	r3, [r3, #12]
 8003c56:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003c58:	697b      	ldr	r3, [r7, #20]
 8003c5a:	005b      	lsls	r3, r3, #1
 8003c5c:	2203      	movs	r2, #3
 8003c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c62:	43db      	mvns	r3, r3
 8003c64:	693a      	ldr	r2, [r7, #16]
 8003c66:	4013      	ands	r3, r2
 8003c68:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	689a      	ldr	r2, [r3, #8]
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	005b      	lsls	r3, r3, #1
 8003c72:	fa02 f303 	lsl.w	r3, r2, r3
 8003c76:	693a      	ldr	r2, [r7, #16]
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	693a      	ldr	r2, [r7, #16]
 8003c80:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	f003 0303 	and.w	r3, r3, #3
 8003c8a:	2b02      	cmp	r3, #2
 8003c8c:	d123      	bne.n	8003cd6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	08da      	lsrs	r2, r3, #3
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	3208      	adds	r2, #8
 8003c96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c9a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	f003 0307 	and.w	r3, r3, #7
 8003ca2:	009b      	lsls	r3, r3, #2
 8003ca4:	220f      	movs	r2, #15
 8003ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8003caa:	43db      	mvns	r3, r3
 8003cac:	693a      	ldr	r2, [r7, #16]
 8003cae:	4013      	ands	r3, r2
 8003cb0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	691a      	ldr	r2, [r3, #16]
 8003cb6:	697b      	ldr	r3, [r7, #20]
 8003cb8:	f003 0307 	and.w	r3, r3, #7
 8003cbc:	009b      	lsls	r3, r3, #2
 8003cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc2:	693a      	ldr	r2, [r7, #16]
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003cc8:	697b      	ldr	r3, [r7, #20]
 8003cca:	08da      	lsrs	r2, r3, #3
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	3208      	adds	r2, #8
 8003cd0:	6939      	ldr	r1, [r7, #16]
 8003cd2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	005b      	lsls	r3, r3, #1
 8003ce0:	2203      	movs	r2, #3
 8003ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce6:	43db      	mvns	r3, r3
 8003ce8:	693a      	ldr	r2, [r7, #16]
 8003cea:	4013      	ands	r3, r2
 8003cec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	f003 0203 	and.w	r2, r3, #3
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	005b      	lsls	r3, r3, #1
 8003cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8003cfe:	693a      	ldr	r2, [r7, #16]
 8003d00:	4313      	orrs	r3, r2
 8003d02:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	693a      	ldr	r2, [r7, #16]
 8003d08:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	f000 8098 	beq.w	8003e48 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8003d18:	4a54      	ldr	r2, [pc, #336]	; (8003e6c <HAL_GPIO_Init+0x2c8>)
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	089b      	lsrs	r3, r3, #2
 8003d1e:	3302      	adds	r3, #2
 8003d20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d24:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	f003 0303 	and.w	r3, r3, #3
 8003d2c:	009b      	lsls	r3, r3, #2
 8003d2e:	220f      	movs	r2, #15
 8003d30:	fa02 f303 	lsl.w	r3, r2, r3
 8003d34:	43db      	mvns	r3, r3
 8003d36:	693a      	ldr	r2, [r7, #16]
 8003d38:	4013      	ands	r3, r2
 8003d3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003d42:	d019      	beq.n	8003d78 <HAL_GPIO_Init+0x1d4>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	4a4a      	ldr	r2, [pc, #296]	; (8003e70 <HAL_GPIO_Init+0x2cc>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d013      	beq.n	8003d74 <HAL_GPIO_Init+0x1d0>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	4a49      	ldr	r2, [pc, #292]	; (8003e74 <HAL_GPIO_Init+0x2d0>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d00d      	beq.n	8003d70 <HAL_GPIO_Init+0x1cc>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	4a48      	ldr	r2, [pc, #288]	; (8003e78 <HAL_GPIO_Init+0x2d4>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d007      	beq.n	8003d6c <HAL_GPIO_Init+0x1c8>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	4a47      	ldr	r2, [pc, #284]	; (8003e7c <HAL_GPIO_Init+0x2d8>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d101      	bne.n	8003d68 <HAL_GPIO_Init+0x1c4>
 8003d64:	2304      	movs	r3, #4
 8003d66:	e008      	b.n	8003d7a <HAL_GPIO_Init+0x1d6>
 8003d68:	2307      	movs	r3, #7
 8003d6a:	e006      	b.n	8003d7a <HAL_GPIO_Init+0x1d6>
 8003d6c:	2303      	movs	r3, #3
 8003d6e:	e004      	b.n	8003d7a <HAL_GPIO_Init+0x1d6>
 8003d70:	2302      	movs	r3, #2
 8003d72:	e002      	b.n	8003d7a <HAL_GPIO_Init+0x1d6>
 8003d74:	2301      	movs	r3, #1
 8003d76:	e000      	b.n	8003d7a <HAL_GPIO_Init+0x1d6>
 8003d78:	2300      	movs	r3, #0
 8003d7a:	697a      	ldr	r2, [r7, #20]
 8003d7c:	f002 0203 	and.w	r2, r2, #3
 8003d80:	0092      	lsls	r2, r2, #2
 8003d82:	4093      	lsls	r3, r2
 8003d84:	693a      	ldr	r2, [r7, #16]
 8003d86:	4313      	orrs	r3, r2
 8003d88:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003d8a:	4938      	ldr	r1, [pc, #224]	; (8003e6c <HAL_GPIO_Init+0x2c8>)
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	089b      	lsrs	r3, r3, #2
 8003d90:	3302      	adds	r3, #2
 8003d92:	693a      	ldr	r2, [r7, #16]
 8003d94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003d98:	4b39      	ldr	r3, [pc, #228]	; (8003e80 <HAL_GPIO_Init+0x2dc>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	43db      	mvns	r3, r3
 8003da2:	693a      	ldr	r2, [r7, #16]
 8003da4:	4013      	ands	r3, r2
 8003da6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d003      	beq.n	8003dbc <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8003db4:	693a      	ldr	r2, [r7, #16]
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	4313      	orrs	r3, r2
 8003dba:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003dbc:	4a30      	ldr	r2, [pc, #192]	; (8003e80 <HAL_GPIO_Init+0x2dc>)
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003dc2:	4b2f      	ldr	r3, [pc, #188]	; (8003e80 <HAL_GPIO_Init+0x2dc>)
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	43db      	mvns	r3, r3
 8003dcc:	693a      	ldr	r2, [r7, #16]
 8003dce:	4013      	ands	r3, r2
 8003dd0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d003      	beq.n	8003de6 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8003dde:	693a      	ldr	r2, [r7, #16]
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	4313      	orrs	r3, r2
 8003de4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003de6:	4a26      	ldr	r2, [pc, #152]	; (8003e80 <HAL_GPIO_Init+0x2dc>)
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003dec:	4b24      	ldr	r3, [pc, #144]	; (8003e80 <HAL_GPIO_Init+0x2dc>)
 8003dee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003df2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	43db      	mvns	r3, r3
 8003df8:	693a      	ldr	r2, [r7, #16]
 8003dfa:	4013      	ands	r3, r2
 8003dfc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d003      	beq.n	8003e12 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8003e0a:	693a      	ldr	r2, [r7, #16]
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003e12:	4a1b      	ldr	r2, [pc, #108]	; (8003e80 <HAL_GPIO_Init+0x2dc>)
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8003e1a:	4b19      	ldr	r3, [pc, #100]	; (8003e80 <HAL_GPIO_Init+0x2dc>)
 8003e1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e20:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	43db      	mvns	r3, r3
 8003e26:	693a      	ldr	r2, [r7, #16]
 8003e28:	4013      	ands	r3, r2
 8003e2a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d003      	beq.n	8003e40 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8003e38:	693a      	ldr	r2, [r7, #16]
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003e40:	4a0f      	ldr	r2, [pc, #60]	; (8003e80 <HAL_GPIO_Init+0x2dc>)
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8003e48:	697b      	ldr	r3, [r7, #20]
 8003e4a:	3301      	adds	r3, #1
 8003e4c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	681a      	ldr	r2, [r3, #0]
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	fa22 f303 	lsr.w	r3, r2, r3
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	f47f aeab 	bne.w	8003bb4 <HAL_GPIO_Init+0x10>
  }
}
 8003e5e:	bf00      	nop
 8003e60:	bf00      	nop
 8003e62:	371c      	adds	r7, #28
 8003e64:	46bd      	mov	sp, r7
 8003e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6a:	4770      	bx	lr
 8003e6c:	40010000 	.word	0x40010000
 8003e70:	48000400 	.word	0x48000400
 8003e74:	48000800 	.word	0x48000800
 8003e78:	48000c00 	.word	0x48000c00
 8003e7c:	48001000 	.word	0x48001000
 8003e80:	58000800 	.word	0x58000800

08003e84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b083      	sub	sp, #12
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
 8003e8c:	460b      	mov	r3, r1
 8003e8e:	807b      	strh	r3, [r7, #2]
 8003e90:	4613      	mov	r3, r2
 8003e92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003e94:	787b      	ldrb	r3, [r7, #1]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d003      	beq.n	8003ea2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003e9a:	887a      	ldrh	r2, [r7, #2]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003ea0:	e002      	b.n	8003ea8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003ea2:	887a      	ldrh	r2, [r7, #2]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003ea8:	bf00      	nop
 8003eaa:	370c      	adds	r7, #12
 8003eac:	46bd      	mov	sp, r7
 8003eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb2:	4770      	bx	lr

08003eb4 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b082      	sub	sp, #8
 8003eb8:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8003eba:	4b0a      	ldr	r3, [pc, #40]	; (8003ee4 <HAL_HSEM_IRQHandler+0x30>)
 8003ebc:	68db      	ldr	r3, [r3, #12]
 8003ebe:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8003ec0:	4b08      	ldr	r3, [pc, #32]	; (8003ee4 <HAL_HSEM_IRQHandler+0x30>)
 8003ec2:	681a      	ldr	r2, [r3, #0]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	43db      	mvns	r3, r3
 8003ec8:	4906      	ldr	r1, [pc, #24]	; (8003ee4 <HAL_HSEM_IRQHandler+0x30>)
 8003eca:	4013      	ands	r3, r2
 8003ecc:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8003ece:	4a05      	ldr	r2, [pc, #20]	; (8003ee4 <HAL_HSEM_IRQHandler+0x30>)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8003ed4:	6878      	ldr	r0, [r7, #4]
 8003ed6:	f000 f807 	bl	8003ee8 <HAL_HSEM_FreeCallback>
}
 8003eda:	bf00      	nop
 8003edc:	3708      	adds	r7, #8
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}
 8003ee2:	bf00      	nop
 8003ee4:	58001500 	.word	0x58001500

08003ee8 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b083      	sub	sp, #12
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8003ef0:	bf00      	nop
 8003ef2:	370c      	adds	r7, #12
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efa:	4770      	bx	lr

08003efc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b082      	sub	sp, #8
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d101      	bne.n	8003f0e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	e081      	b.n	8004012 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f14:	b2db      	uxtb	r3, r3
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d106      	bne.n	8003f28 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003f22:	6878      	ldr	r0, [r7, #4]
 8003f24:	f7fe fde8 	bl	8002af8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2224      	movs	r2, #36	; 0x24
 8003f2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	681a      	ldr	r2, [r3, #0]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f022 0201 	bic.w	r2, r2, #1
 8003f3e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	685a      	ldr	r2, [r3, #4]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003f4c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	689a      	ldr	r2, [r3, #8]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003f5c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	68db      	ldr	r3, [r3, #12]
 8003f62:	2b01      	cmp	r3, #1
 8003f64:	d107      	bne.n	8003f76 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	689a      	ldr	r2, [r3, #8]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003f72:	609a      	str	r2, [r3, #8]
 8003f74:	e006      	b.n	8003f84 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	689a      	ldr	r2, [r3, #8]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003f82:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	68db      	ldr	r3, [r3, #12]
 8003f88:	2b02      	cmp	r3, #2
 8003f8a:	d104      	bne.n	8003f96 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003f94:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	687a      	ldr	r2, [r7, #4]
 8003f9e:	6812      	ldr	r2, [r2, #0]
 8003fa0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003fa4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003fa8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	68da      	ldr	r2, [r3, #12]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003fb8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	691a      	ldr	r2, [r3, #16]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	695b      	ldr	r3, [r3, #20]
 8003fc2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	699b      	ldr	r3, [r3, #24]
 8003fca:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	430a      	orrs	r2, r1
 8003fd2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	69d9      	ldr	r1, [r3, #28]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6a1a      	ldr	r2, [r3, #32]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	430a      	orrs	r2, r1
 8003fe2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	681a      	ldr	r2, [r3, #0]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f042 0201 	orr.w	r2, r2, #1
 8003ff2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2220      	movs	r2, #32
 8003ffe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2200      	movs	r2, #0
 8004006:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2200      	movs	r2, #0
 800400c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004010:	2300      	movs	r3, #0
}
 8004012:	4618      	mov	r0, r3
 8004014:	3708      	adds	r7, #8
 8004016:	46bd      	mov	sp, r7
 8004018:	bd80      	pop	{r7, pc}
	...

0800401c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b088      	sub	sp, #32
 8004020:	af02      	add	r7, sp, #8
 8004022:	60f8      	str	r0, [r7, #12]
 8004024:	4608      	mov	r0, r1
 8004026:	4611      	mov	r1, r2
 8004028:	461a      	mov	r2, r3
 800402a:	4603      	mov	r3, r0
 800402c:	817b      	strh	r3, [r7, #10]
 800402e:	460b      	mov	r3, r1
 8004030:	813b      	strh	r3, [r7, #8]
 8004032:	4613      	mov	r3, r2
 8004034:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800403c:	b2db      	uxtb	r3, r3
 800403e:	2b20      	cmp	r3, #32
 8004040:	f040 80f9 	bne.w	8004236 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004044:	6a3b      	ldr	r3, [r7, #32]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d002      	beq.n	8004050 <HAL_I2C_Mem_Write+0x34>
 800404a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800404c:	2b00      	cmp	r3, #0
 800404e:	d105      	bne.n	800405c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004056:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004058:	2301      	movs	r3, #1
 800405a:	e0ed      	b.n	8004238 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004062:	2b01      	cmp	r3, #1
 8004064:	d101      	bne.n	800406a <HAL_I2C_Mem_Write+0x4e>
 8004066:	2302      	movs	r3, #2
 8004068:	e0e6      	b.n	8004238 <HAL_I2C_Mem_Write+0x21c>
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	2201      	movs	r2, #1
 800406e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004072:	f7ff f905 	bl	8003280 <HAL_GetTick>
 8004076:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004078:	697b      	ldr	r3, [r7, #20]
 800407a:	9300      	str	r3, [sp, #0]
 800407c:	2319      	movs	r3, #25
 800407e:	2201      	movs	r2, #1
 8004080:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004084:	68f8      	ldr	r0, [r7, #12]
 8004086:	f000 fadd 	bl	8004644 <I2C_WaitOnFlagUntilTimeout>
 800408a:	4603      	mov	r3, r0
 800408c:	2b00      	cmp	r3, #0
 800408e:	d001      	beq.n	8004094 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004090:	2301      	movs	r3, #1
 8004092:	e0d1      	b.n	8004238 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2221      	movs	r2, #33	; 0x21
 8004098:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	2240      	movs	r2, #64	; 0x40
 80040a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	2200      	movs	r2, #0
 80040a8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	6a3a      	ldr	r2, [r7, #32]
 80040ae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80040b4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	2200      	movs	r2, #0
 80040ba:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80040bc:	88f8      	ldrh	r0, [r7, #6]
 80040be:	893a      	ldrh	r2, [r7, #8]
 80040c0:	8979      	ldrh	r1, [r7, #10]
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	9301      	str	r3, [sp, #4]
 80040c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040c8:	9300      	str	r3, [sp, #0]
 80040ca:	4603      	mov	r3, r0
 80040cc:	68f8      	ldr	r0, [r7, #12]
 80040ce:	f000 f9ed 	bl	80044ac <I2C_RequestMemoryWrite>
 80040d2:	4603      	mov	r3, r0
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d005      	beq.n	80040e4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	2200      	movs	r2, #0
 80040dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80040e0:	2301      	movs	r3, #1
 80040e2:	e0a9      	b.n	8004238 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040e8:	b29b      	uxth	r3, r3
 80040ea:	2bff      	cmp	r3, #255	; 0xff
 80040ec:	d90e      	bls.n	800410c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	22ff      	movs	r2, #255	; 0xff
 80040f2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040f8:	b2da      	uxtb	r2, r3
 80040fa:	8979      	ldrh	r1, [r7, #10]
 80040fc:	2300      	movs	r3, #0
 80040fe:	9300      	str	r3, [sp, #0]
 8004100:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004104:	68f8      	ldr	r0, [r7, #12]
 8004106:	f000 fc57 	bl	80049b8 <I2C_TransferConfig>
 800410a:	e00f      	b.n	800412c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004110:	b29a      	uxth	r2, r3
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800411a:	b2da      	uxtb	r2, r3
 800411c:	8979      	ldrh	r1, [r7, #10]
 800411e:	2300      	movs	r3, #0
 8004120:	9300      	str	r3, [sp, #0]
 8004122:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004126:	68f8      	ldr	r0, [r7, #12]
 8004128:	f000 fc46 	bl	80049b8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800412c:	697a      	ldr	r2, [r7, #20]
 800412e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004130:	68f8      	ldr	r0, [r7, #12]
 8004132:	f000 fad6 	bl	80046e2 <I2C_WaitOnTXISFlagUntilTimeout>
 8004136:	4603      	mov	r3, r0
 8004138:	2b00      	cmp	r3, #0
 800413a:	d001      	beq.n	8004140 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800413c:	2301      	movs	r3, #1
 800413e:	e07b      	b.n	8004238 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004144:	781a      	ldrb	r2, [r3, #0]
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004150:	1c5a      	adds	r2, r3, #1
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800415a:	b29b      	uxth	r3, r3
 800415c:	3b01      	subs	r3, #1
 800415e:	b29a      	uxth	r2, r3
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004168:	3b01      	subs	r3, #1
 800416a:	b29a      	uxth	r2, r3
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004174:	b29b      	uxth	r3, r3
 8004176:	2b00      	cmp	r3, #0
 8004178:	d034      	beq.n	80041e4 <HAL_I2C_Mem_Write+0x1c8>
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800417e:	2b00      	cmp	r3, #0
 8004180:	d130      	bne.n	80041e4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004182:	697b      	ldr	r3, [r7, #20]
 8004184:	9300      	str	r3, [sp, #0]
 8004186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004188:	2200      	movs	r2, #0
 800418a:	2180      	movs	r1, #128	; 0x80
 800418c:	68f8      	ldr	r0, [r7, #12]
 800418e:	f000 fa59 	bl	8004644 <I2C_WaitOnFlagUntilTimeout>
 8004192:	4603      	mov	r3, r0
 8004194:	2b00      	cmp	r3, #0
 8004196:	d001      	beq.n	800419c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004198:	2301      	movs	r3, #1
 800419a:	e04d      	b.n	8004238 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041a0:	b29b      	uxth	r3, r3
 80041a2:	2bff      	cmp	r3, #255	; 0xff
 80041a4:	d90e      	bls.n	80041c4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	22ff      	movs	r2, #255	; 0xff
 80041aa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041b0:	b2da      	uxtb	r2, r3
 80041b2:	8979      	ldrh	r1, [r7, #10]
 80041b4:	2300      	movs	r3, #0
 80041b6:	9300      	str	r3, [sp, #0]
 80041b8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80041bc:	68f8      	ldr	r0, [r7, #12]
 80041be:	f000 fbfb 	bl	80049b8 <I2C_TransferConfig>
 80041c2:	e00f      	b.n	80041e4 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041c8:	b29a      	uxth	r2, r3
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041d2:	b2da      	uxtb	r2, r3
 80041d4:	8979      	ldrh	r1, [r7, #10]
 80041d6:	2300      	movs	r3, #0
 80041d8:	9300      	str	r3, [sp, #0]
 80041da:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80041de:	68f8      	ldr	r0, [r7, #12]
 80041e0:	f000 fbea 	bl	80049b8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041e8:	b29b      	uxth	r3, r3
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d19e      	bne.n	800412c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041ee:	697a      	ldr	r2, [r7, #20]
 80041f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80041f2:	68f8      	ldr	r0, [r7, #12]
 80041f4:	f000 fabc 	bl	8004770 <I2C_WaitOnSTOPFlagUntilTimeout>
 80041f8:	4603      	mov	r3, r0
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d001      	beq.n	8004202 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80041fe:	2301      	movs	r3, #1
 8004200:	e01a      	b.n	8004238 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	2220      	movs	r2, #32
 8004208:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	6859      	ldr	r1, [r3, #4]
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681a      	ldr	r2, [r3, #0]
 8004214:	4b0a      	ldr	r3, [pc, #40]	; (8004240 <HAL_I2C_Mem_Write+0x224>)
 8004216:	400b      	ands	r3, r1
 8004218:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	2220      	movs	r2, #32
 800421e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2200      	movs	r2, #0
 8004226:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	2200      	movs	r2, #0
 800422e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004232:	2300      	movs	r3, #0
 8004234:	e000      	b.n	8004238 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004236:	2302      	movs	r3, #2
  }
}
 8004238:	4618      	mov	r0, r3
 800423a:	3718      	adds	r7, #24
 800423c:	46bd      	mov	sp, r7
 800423e:	bd80      	pop	{r7, pc}
 8004240:	fe00e800 	.word	0xfe00e800

08004244 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b088      	sub	sp, #32
 8004248:	af02      	add	r7, sp, #8
 800424a:	60f8      	str	r0, [r7, #12]
 800424c:	4608      	mov	r0, r1
 800424e:	4611      	mov	r1, r2
 8004250:	461a      	mov	r2, r3
 8004252:	4603      	mov	r3, r0
 8004254:	817b      	strh	r3, [r7, #10]
 8004256:	460b      	mov	r3, r1
 8004258:	813b      	strh	r3, [r7, #8]
 800425a:	4613      	mov	r3, r2
 800425c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004264:	b2db      	uxtb	r3, r3
 8004266:	2b20      	cmp	r3, #32
 8004268:	f040 80fd 	bne.w	8004466 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800426c:	6a3b      	ldr	r3, [r7, #32]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d002      	beq.n	8004278 <HAL_I2C_Mem_Read+0x34>
 8004272:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004274:	2b00      	cmp	r3, #0
 8004276:	d105      	bne.n	8004284 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800427e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004280:	2301      	movs	r3, #1
 8004282:	e0f1      	b.n	8004468 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800428a:	2b01      	cmp	r3, #1
 800428c:	d101      	bne.n	8004292 <HAL_I2C_Mem_Read+0x4e>
 800428e:	2302      	movs	r3, #2
 8004290:	e0ea      	b.n	8004468 <HAL_I2C_Mem_Read+0x224>
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	2201      	movs	r2, #1
 8004296:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800429a:	f7fe fff1 	bl	8003280 <HAL_GetTick>
 800429e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	9300      	str	r3, [sp, #0]
 80042a4:	2319      	movs	r3, #25
 80042a6:	2201      	movs	r2, #1
 80042a8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80042ac:	68f8      	ldr	r0, [r7, #12]
 80042ae:	f000 f9c9 	bl	8004644 <I2C_WaitOnFlagUntilTimeout>
 80042b2:	4603      	mov	r3, r0
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d001      	beq.n	80042bc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80042b8:	2301      	movs	r3, #1
 80042ba:	e0d5      	b.n	8004468 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	2222      	movs	r2, #34	; 0x22
 80042c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	2240      	movs	r2, #64	; 0x40
 80042c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	2200      	movs	r2, #0
 80042d0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	6a3a      	ldr	r2, [r7, #32]
 80042d6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80042dc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2200      	movs	r2, #0
 80042e2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80042e4:	88f8      	ldrh	r0, [r7, #6]
 80042e6:	893a      	ldrh	r2, [r7, #8]
 80042e8:	8979      	ldrh	r1, [r7, #10]
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	9301      	str	r3, [sp, #4]
 80042ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042f0:	9300      	str	r3, [sp, #0]
 80042f2:	4603      	mov	r3, r0
 80042f4:	68f8      	ldr	r0, [r7, #12]
 80042f6:	f000 f92d 	bl	8004554 <I2C_RequestMemoryRead>
 80042fa:	4603      	mov	r3, r0
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d005      	beq.n	800430c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	2200      	movs	r2, #0
 8004304:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004308:	2301      	movs	r3, #1
 800430a:	e0ad      	b.n	8004468 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004310:	b29b      	uxth	r3, r3
 8004312:	2bff      	cmp	r3, #255	; 0xff
 8004314:	d90e      	bls.n	8004334 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	22ff      	movs	r2, #255	; 0xff
 800431a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004320:	b2da      	uxtb	r2, r3
 8004322:	8979      	ldrh	r1, [r7, #10]
 8004324:	4b52      	ldr	r3, [pc, #328]	; (8004470 <HAL_I2C_Mem_Read+0x22c>)
 8004326:	9300      	str	r3, [sp, #0]
 8004328:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800432c:	68f8      	ldr	r0, [r7, #12]
 800432e:	f000 fb43 	bl	80049b8 <I2C_TransferConfig>
 8004332:	e00f      	b.n	8004354 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004338:	b29a      	uxth	r2, r3
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004342:	b2da      	uxtb	r2, r3
 8004344:	8979      	ldrh	r1, [r7, #10]
 8004346:	4b4a      	ldr	r3, [pc, #296]	; (8004470 <HAL_I2C_Mem_Read+0x22c>)
 8004348:	9300      	str	r3, [sp, #0]
 800434a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800434e:	68f8      	ldr	r0, [r7, #12]
 8004350:	f000 fb32 	bl	80049b8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	9300      	str	r3, [sp, #0]
 8004358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800435a:	2200      	movs	r2, #0
 800435c:	2104      	movs	r1, #4
 800435e:	68f8      	ldr	r0, [r7, #12]
 8004360:	f000 f970 	bl	8004644 <I2C_WaitOnFlagUntilTimeout>
 8004364:	4603      	mov	r3, r0
 8004366:	2b00      	cmp	r3, #0
 8004368:	d001      	beq.n	800436e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800436a:	2301      	movs	r3, #1
 800436c:	e07c      	b.n	8004468 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004378:	b2d2      	uxtb	r2, r2
 800437a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004380:	1c5a      	adds	r2, r3, #1
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800438a:	3b01      	subs	r3, #1
 800438c:	b29a      	uxth	r2, r3
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004396:	b29b      	uxth	r3, r3
 8004398:	3b01      	subs	r3, #1
 800439a:	b29a      	uxth	r2, r3
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043a4:	b29b      	uxth	r3, r3
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d034      	beq.n	8004414 <HAL_I2C_Mem_Read+0x1d0>
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d130      	bne.n	8004414 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80043b2:	697b      	ldr	r3, [r7, #20]
 80043b4:	9300      	str	r3, [sp, #0]
 80043b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043b8:	2200      	movs	r2, #0
 80043ba:	2180      	movs	r1, #128	; 0x80
 80043bc:	68f8      	ldr	r0, [r7, #12]
 80043be:	f000 f941 	bl	8004644 <I2C_WaitOnFlagUntilTimeout>
 80043c2:	4603      	mov	r3, r0
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d001      	beq.n	80043cc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80043c8:	2301      	movs	r3, #1
 80043ca:	e04d      	b.n	8004468 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043d0:	b29b      	uxth	r3, r3
 80043d2:	2bff      	cmp	r3, #255	; 0xff
 80043d4:	d90e      	bls.n	80043f4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	22ff      	movs	r2, #255	; 0xff
 80043da:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043e0:	b2da      	uxtb	r2, r3
 80043e2:	8979      	ldrh	r1, [r7, #10]
 80043e4:	2300      	movs	r3, #0
 80043e6:	9300      	str	r3, [sp, #0]
 80043e8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80043ec:	68f8      	ldr	r0, [r7, #12]
 80043ee:	f000 fae3 	bl	80049b8 <I2C_TransferConfig>
 80043f2:	e00f      	b.n	8004414 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043f8:	b29a      	uxth	r2, r3
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004402:	b2da      	uxtb	r2, r3
 8004404:	8979      	ldrh	r1, [r7, #10]
 8004406:	2300      	movs	r3, #0
 8004408:	9300      	str	r3, [sp, #0]
 800440a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800440e:	68f8      	ldr	r0, [r7, #12]
 8004410:	f000 fad2 	bl	80049b8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004418:	b29b      	uxth	r3, r3
 800441a:	2b00      	cmp	r3, #0
 800441c:	d19a      	bne.n	8004354 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800441e:	697a      	ldr	r2, [r7, #20]
 8004420:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004422:	68f8      	ldr	r0, [r7, #12]
 8004424:	f000 f9a4 	bl	8004770 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004428:	4603      	mov	r3, r0
 800442a:	2b00      	cmp	r3, #0
 800442c:	d001      	beq.n	8004432 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800442e:	2301      	movs	r3, #1
 8004430:	e01a      	b.n	8004468 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	2220      	movs	r2, #32
 8004438:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	6859      	ldr	r1, [r3, #4]
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681a      	ldr	r2, [r3, #0]
 8004444:	4b0b      	ldr	r3, [pc, #44]	; (8004474 <HAL_I2C_Mem_Read+0x230>)
 8004446:	400b      	ands	r3, r1
 8004448:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	2220      	movs	r2, #32
 800444e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	2200      	movs	r2, #0
 8004456:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	2200      	movs	r2, #0
 800445e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004462:	2300      	movs	r3, #0
 8004464:	e000      	b.n	8004468 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8004466:	2302      	movs	r3, #2
  }
}
 8004468:	4618      	mov	r0, r3
 800446a:	3718      	adds	r7, #24
 800446c:	46bd      	mov	sp, r7
 800446e:	bd80      	pop	{r7, pc}
 8004470:	80002400 	.word	0x80002400
 8004474:	fe00e800 	.word	0xfe00e800

08004478 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b084      	sub	sp, #16
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	699b      	ldr	r3, [r3, #24]
 8004486:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004494:	2b00      	cmp	r3, #0
 8004496:	d005      	beq.n	80044a4 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800449c:	68ba      	ldr	r2, [r7, #8]
 800449e:	68f9      	ldr	r1, [r7, #12]
 80044a0:	6878      	ldr	r0, [r7, #4]
 80044a2:	4798      	blx	r3
  }
}
 80044a4:	bf00      	nop
 80044a6:	3710      	adds	r7, #16
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bd80      	pop	{r7, pc}

080044ac <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b086      	sub	sp, #24
 80044b0:	af02      	add	r7, sp, #8
 80044b2:	60f8      	str	r0, [r7, #12]
 80044b4:	4608      	mov	r0, r1
 80044b6:	4611      	mov	r1, r2
 80044b8:	461a      	mov	r2, r3
 80044ba:	4603      	mov	r3, r0
 80044bc:	817b      	strh	r3, [r7, #10]
 80044be:	460b      	mov	r3, r1
 80044c0:	813b      	strh	r3, [r7, #8]
 80044c2:	4613      	mov	r3, r2
 80044c4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80044c6:	88fb      	ldrh	r3, [r7, #6]
 80044c8:	b2da      	uxtb	r2, r3
 80044ca:	8979      	ldrh	r1, [r7, #10]
 80044cc:	4b20      	ldr	r3, [pc, #128]	; (8004550 <I2C_RequestMemoryWrite+0xa4>)
 80044ce:	9300      	str	r3, [sp, #0]
 80044d0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80044d4:	68f8      	ldr	r0, [r7, #12]
 80044d6:	f000 fa6f 	bl	80049b8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80044da:	69fa      	ldr	r2, [r7, #28]
 80044dc:	69b9      	ldr	r1, [r7, #24]
 80044de:	68f8      	ldr	r0, [r7, #12]
 80044e0:	f000 f8ff 	bl	80046e2 <I2C_WaitOnTXISFlagUntilTimeout>
 80044e4:	4603      	mov	r3, r0
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d001      	beq.n	80044ee <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80044ea:	2301      	movs	r3, #1
 80044ec:	e02c      	b.n	8004548 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80044ee:	88fb      	ldrh	r3, [r7, #6]
 80044f0:	2b01      	cmp	r3, #1
 80044f2:	d105      	bne.n	8004500 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80044f4:	893b      	ldrh	r3, [r7, #8]
 80044f6:	b2da      	uxtb	r2, r3
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	629a      	str	r2, [r3, #40]	; 0x28
 80044fe:	e015      	b.n	800452c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004500:	893b      	ldrh	r3, [r7, #8]
 8004502:	0a1b      	lsrs	r3, r3, #8
 8004504:	b29b      	uxth	r3, r3
 8004506:	b2da      	uxtb	r2, r3
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800450e:	69fa      	ldr	r2, [r7, #28]
 8004510:	69b9      	ldr	r1, [r7, #24]
 8004512:	68f8      	ldr	r0, [r7, #12]
 8004514:	f000 f8e5 	bl	80046e2 <I2C_WaitOnTXISFlagUntilTimeout>
 8004518:	4603      	mov	r3, r0
 800451a:	2b00      	cmp	r3, #0
 800451c:	d001      	beq.n	8004522 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	e012      	b.n	8004548 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004522:	893b      	ldrh	r3, [r7, #8]
 8004524:	b2da      	uxtb	r2, r3
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800452c:	69fb      	ldr	r3, [r7, #28]
 800452e:	9300      	str	r3, [sp, #0]
 8004530:	69bb      	ldr	r3, [r7, #24]
 8004532:	2200      	movs	r2, #0
 8004534:	2180      	movs	r1, #128	; 0x80
 8004536:	68f8      	ldr	r0, [r7, #12]
 8004538:	f000 f884 	bl	8004644 <I2C_WaitOnFlagUntilTimeout>
 800453c:	4603      	mov	r3, r0
 800453e:	2b00      	cmp	r3, #0
 8004540:	d001      	beq.n	8004546 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004542:	2301      	movs	r3, #1
 8004544:	e000      	b.n	8004548 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004546:	2300      	movs	r3, #0
}
 8004548:	4618      	mov	r0, r3
 800454a:	3710      	adds	r7, #16
 800454c:	46bd      	mov	sp, r7
 800454e:	bd80      	pop	{r7, pc}
 8004550:	80002000 	.word	0x80002000

08004554 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b086      	sub	sp, #24
 8004558:	af02      	add	r7, sp, #8
 800455a:	60f8      	str	r0, [r7, #12]
 800455c:	4608      	mov	r0, r1
 800455e:	4611      	mov	r1, r2
 8004560:	461a      	mov	r2, r3
 8004562:	4603      	mov	r3, r0
 8004564:	817b      	strh	r3, [r7, #10]
 8004566:	460b      	mov	r3, r1
 8004568:	813b      	strh	r3, [r7, #8]
 800456a:	4613      	mov	r3, r2
 800456c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800456e:	88fb      	ldrh	r3, [r7, #6]
 8004570:	b2da      	uxtb	r2, r3
 8004572:	8979      	ldrh	r1, [r7, #10]
 8004574:	4b20      	ldr	r3, [pc, #128]	; (80045f8 <I2C_RequestMemoryRead+0xa4>)
 8004576:	9300      	str	r3, [sp, #0]
 8004578:	2300      	movs	r3, #0
 800457a:	68f8      	ldr	r0, [r7, #12]
 800457c:	f000 fa1c 	bl	80049b8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004580:	69fa      	ldr	r2, [r7, #28]
 8004582:	69b9      	ldr	r1, [r7, #24]
 8004584:	68f8      	ldr	r0, [r7, #12]
 8004586:	f000 f8ac 	bl	80046e2 <I2C_WaitOnTXISFlagUntilTimeout>
 800458a:	4603      	mov	r3, r0
 800458c:	2b00      	cmp	r3, #0
 800458e:	d001      	beq.n	8004594 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004590:	2301      	movs	r3, #1
 8004592:	e02c      	b.n	80045ee <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004594:	88fb      	ldrh	r3, [r7, #6]
 8004596:	2b01      	cmp	r3, #1
 8004598:	d105      	bne.n	80045a6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800459a:	893b      	ldrh	r3, [r7, #8]
 800459c:	b2da      	uxtb	r2, r3
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	629a      	str	r2, [r3, #40]	; 0x28
 80045a4:	e015      	b.n	80045d2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80045a6:	893b      	ldrh	r3, [r7, #8]
 80045a8:	0a1b      	lsrs	r3, r3, #8
 80045aa:	b29b      	uxth	r3, r3
 80045ac:	b2da      	uxtb	r2, r3
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80045b4:	69fa      	ldr	r2, [r7, #28]
 80045b6:	69b9      	ldr	r1, [r7, #24]
 80045b8:	68f8      	ldr	r0, [r7, #12]
 80045ba:	f000 f892 	bl	80046e2 <I2C_WaitOnTXISFlagUntilTimeout>
 80045be:	4603      	mov	r3, r0
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d001      	beq.n	80045c8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80045c4:	2301      	movs	r3, #1
 80045c6:	e012      	b.n	80045ee <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80045c8:	893b      	ldrh	r3, [r7, #8]
 80045ca:	b2da      	uxtb	r2, r3
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80045d2:	69fb      	ldr	r3, [r7, #28]
 80045d4:	9300      	str	r3, [sp, #0]
 80045d6:	69bb      	ldr	r3, [r7, #24]
 80045d8:	2200      	movs	r2, #0
 80045da:	2140      	movs	r1, #64	; 0x40
 80045dc:	68f8      	ldr	r0, [r7, #12]
 80045de:	f000 f831 	bl	8004644 <I2C_WaitOnFlagUntilTimeout>
 80045e2:	4603      	mov	r3, r0
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d001      	beq.n	80045ec <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80045e8:	2301      	movs	r3, #1
 80045ea:	e000      	b.n	80045ee <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80045ec:	2300      	movs	r3, #0
}
 80045ee:	4618      	mov	r0, r3
 80045f0:	3710      	adds	r7, #16
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bd80      	pop	{r7, pc}
 80045f6:	bf00      	nop
 80045f8:	80002000 	.word	0x80002000

080045fc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80045fc:	b480      	push	{r7}
 80045fe:	b083      	sub	sp, #12
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	699b      	ldr	r3, [r3, #24]
 800460a:	f003 0302 	and.w	r3, r3, #2
 800460e:	2b02      	cmp	r3, #2
 8004610:	d103      	bne.n	800461a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	2200      	movs	r2, #0
 8004618:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	699b      	ldr	r3, [r3, #24]
 8004620:	f003 0301 	and.w	r3, r3, #1
 8004624:	2b01      	cmp	r3, #1
 8004626:	d007      	beq.n	8004638 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	699a      	ldr	r2, [r3, #24]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f042 0201 	orr.w	r2, r2, #1
 8004636:	619a      	str	r2, [r3, #24]
  }
}
 8004638:	bf00      	nop
 800463a:	370c      	adds	r7, #12
 800463c:	46bd      	mov	sp, r7
 800463e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004642:	4770      	bx	lr

08004644 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b084      	sub	sp, #16
 8004648:	af00      	add	r7, sp, #0
 800464a:	60f8      	str	r0, [r7, #12]
 800464c:	60b9      	str	r1, [r7, #8]
 800464e:	603b      	str	r3, [r7, #0]
 8004650:	4613      	mov	r3, r2
 8004652:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004654:	e031      	b.n	80046ba <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800465c:	d02d      	beq.n	80046ba <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800465e:	f7fe fe0f 	bl	8003280 <HAL_GetTick>
 8004662:	4602      	mov	r2, r0
 8004664:	69bb      	ldr	r3, [r7, #24]
 8004666:	1ad3      	subs	r3, r2, r3
 8004668:	683a      	ldr	r2, [r7, #0]
 800466a:	429a      	cmp	r2, r3
 800466c:	d302      	bcc.n	8004674 <I2C_WaitOnFlagUntilTimeout+0x30>
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d122      	bne.n	80046ba <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	699a      	ldr	r2, [r3, #24]
 800467a:	68bb      	ldr	r3, [r7, #8]
 800467c:	4013      	ands	r3, r2
 800467e:	68ba      	ldr	r2, [r7, #8]
 8004680:	429a      	cmp	r2, r3
 8004682:	bf0c      	ite	eq
 8004684:	2301      	moveq	r3, #1
 8004686:	2300      	movne	r3, #0
 8004688:	b2db      	uxtb	r3, r3
 800468a:	461a      	mov	r2, r3
 800468c:	79fb      	ldrb	r3, [r7, #7]
 800468e:	429a      	cmp	r2, r3
 8004690:	d113      	bne.n	80046ba <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004696:	f043 0220 	orr.w	r2, r3, #32
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	2220      	movs	r2, #32
 80046a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	2200      	movs	r2, #0
 80046aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	2200      	movs	r2, #0
 80046b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 80046b6:	2301      	movs	r3, #1
 80046b8:	e00f      	b.n	80046da <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	699a      	ldr	r2, [r3, #24]
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	4013      	ands	r3, r2
 80046c4:	68ba      	ldr	r2, [r7, #8]
 80046c6:	429a      	cmp	r2, r3
 80046c8:	bf0c      	ite	eq
 80046ca:	2301      	moveq	r3, #1
 80046cc:	2300      	movne	r3, #0
 80046ce:	b2db      	uxtb	r3, r3
 80046d0:	461a      	mov	r2, r3
 80046d2:	79fb      	ldrb	r3, [r7, #7]
 80046d4:	429a      	cmp	r2, r3
 80046d6:	d0be      	beq.n	8004656 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80046d8:	2300      	movs	r3, #0
}
 80046da:	4618      	mov	r0, r3
 80046dc:	3710      	adds	r7, #16
 80046de:	46bd      	mov	sp, r7
 80046e0:	bd80      	pop	{r7, pc}

080046e2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80046e2:	b580      	push	{r7, lr}
 80046e4:	b084      	sub	sp, #16
 80046e6:	af00      	add	r7, sp, #0
 80046e8:	60f8      	str	r0, [r7, #12]
 80046ea:	60b9      	str	r1, [r7, #8]
 80046ec:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80046ee:	e033      	b.n	8004758 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80046f0:	687a      	ldr	r2, [r7, #4]
 80046f2:	68b9      	ldr	r1, [r7, #8]
 80046f4:	68f8      	ldr	r0, [r7, #12]
 80046f6:	f000 f87f 	bl	80047f8 <I2C_IsErrorOccurred>
 80046fa:	4603      	mov	r3, r0
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d001      	beq.n	8004704 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004700:	2301      	movs	r3, #1
 8004702:	e031      	b.n	8004768 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800470a:	d025      	beq.n	8004758 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800470c:	f7fe fdb8 	bl	8003280 <HAL_GetTick>
 8004710:	4602      	mov	r2, r0
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	1ad3      	subs	r3, r2, r3
 8004716:	68ba      	ldr	r2, [r7, #8]
 8004718:	429a      	cmp	r2, r3
 800471a:	d302      	bcc.n	8004722 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d11a      	bne.n	8004758 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	699b      	ldr	r3, [r3, #24]
 8004728:	f003 0302 	and.w	r3, r3, #2
 800472c:	2b02      	cmp	r3, #2
 800472e:	d013      	beq.n	8004758 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004734:	f043 0220 	orr.w	r2, r3, #32
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	2220      	movs	r2, #32
 8004740:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	2200      	movs	r2, #0
 8004748:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	2200      	movs	r2, #0
 8004750:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004754:	2301      	movs	r3, #1
 8004756:	e007      	b.n	8004768 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	699b      	ldr	r3, [r3, #24]
 800475e:	f003 0302 	and.w	r3, r3, #2
 8004762:	2b02      	cmp	r3, #2
 8004764:	d1c4      	bne.n	80046f0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004766:	2300      	movs	r3, #0
}
 8004768:	4618      	mov	r0, r3
 800476a:	3710      	adds	r7, #16
 800476c:	46bd      	mov	sp, r7
 800476e:	bd80      	pop	{r7, pc}

08004770 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b084      	sub	sp, #16
 8004774:	af00      	add	r7, sp, #0
 8004776:	60f8      	str	r0, [r7, #12]
 8004778:	60b9      	str	r1, [r7, #8]
 800477a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800477c:	e02f      	b.n	80047de <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800477e:	687a      	ldr	r2, [r7, #4]
 8004780:	68b9      	ldr	r1, [r7, #8]
 8004782:	68f8      	ldr	r0, [r7, #12]
 8004784:	f000 f838 	bl	80047f8 <I2C_IsErrorOccurred>
 8004788:	4603      	mov	r3, r0
 800478a:	2b00      	cmp	r3, #0
 800478c:	d001      	beq.n	8004792 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800478e:	2301      	movs	r3, #1
 8004790:	e02d      	b.n	80047ee <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004792:	f7fe fd75 	bl	8003280 <HAL_GetTick>
 8004796:	4602      	mov	r2, r0
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	1ad3      	subs	r3, r2, r3
 800479c:	68ba      	ldr	r2, [r7, #8]
 800479e:	429a      	cmp	r2, r3
 80047a0:	d302      	bcc.n	80047a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d11a      	bne.n	80047de <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	699b      	ldr	r3, [r3, #24]
 80047ae:	f003 0320 	and.w	r3, r3, #32
 80047b2:	2b20      	cmp	r3, #32
 80047b4:	d013      	beq.n	80047de <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047ba:	f043 0220 	orr.w	r2, r3, #32
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	2220      	movs	r2, #32
 80047c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	2200      	movs	r2, #0
 80047ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	2200      	movs	r2, #0
 80047d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80047da:	2301      	movs	r3, #1
 80047dc:	e007      	b.n	80047ee <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	699b      	ldr	r3, [r3, #24]
 80047e4:	f003 0320 	and.w	r3, r3, #32
 80047e8:	2b20      	cmp	r3, #32
 80047ea:	d1c8      	bne.n	800477e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80047ec:	2300      	movs	r3, #0
}
 80047ee:	4618      	mov	r0, r3
 80047f0:	3710      	adds	r7, #16
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bd80      	pop	{r7, pc}
	...

080047f8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b08a      	sub	sp, #40	; 0x28
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	60f8      	str	r0, [r7, #12]
 8004800:	60b9      	str	r1, [r7, #8]
 8004802:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004804:	2300      	movs	r3, #0
 8004806:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	699b      	ldr	r3, [r3, #24]
 8004810:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004812:	2300      	movs	r3, #0
 8004814:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800481a:	69bb      	ldr	r3, [r7, #24]
 800481c:	f003 0310 	and.w	r3, r3, #16
 8004820:	2b00      	cmp	r3, #0
 8004822:	d068      	beq.n	80048f6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	2210      	movs	r2, #16
 800482a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800482c:	e049      	b.n	80048c2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004834:	d045      	beq.n	80048c2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004836:	f7fe fd23 	bl	8003280 <HAL_GetTick>
 800483a:	4602      	mov	r2, r0
 800483c:	69fb      	ldr	r3, [r7, #28]
 800483e:	1ad3      	subs	r3, r2, r3
 8004840:	68ba      	ldr	r2, [r7, #8]
 8004842:	429a      	cmp	r2, r3
 8004844:	d302      	bcc.n	800484c <I2C_IsErrorOccurred+0x54>
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d13a      	bne.n	80048c2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004856:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800485e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	699b      	ldr	r3, [r3, #24]
 8004866:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800486a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800486e:	d121      	bne.n	80048b4 <I2C_IsErrorOccurred+0xbc>
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004876:	d01d      	beq.n	80048b4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004878:	7cfb      	ldrb	r3, [r7, #19]
 800487a:	2b20      	cmp	r3, #32
 800487c:	d01a      	beq.n	80048b4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	685a      	ldr	r2, [r3, #4]
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800488c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800488e:	f7fe fcf7 	bl	8003280 <HAL_GetTick>
 8004892:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004894:	e00e      	b.n	80048b4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004896:	f7fe fcf3 	bl	8003280 <HAL_GetTick>
 800489a:	4602      	mov	r2, r0
 800489c:	69fb      	ldr	r3, [r7, #28]
 800489e:	1ad3      	subs	r3, r2, r3
 80048a0:	2b19      	cmp	r3, #25
 80048a2:	d907      	bls.n	80048b4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80048a4:	6a3b      	ldr	r3, [r7, #32]
 80048a6:	f043 0320 	orr.w	r3, r3, #32
 80048aa:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80048ac:	2301      	movs	r3, #1
 80048ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80048b2:	e006      	b.n	80048c2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	699b      	ldr	r3, [r3, #24]
 80048ba:	f003 0320 	and.w	r3, r3, #32
 80048be:	2b20      	cmp	r3, #32
 80048c0:	d1e9      	bne.n	8004896 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	699b      	ldr	r3, [r3, #24]
 80048c8:	f003 0320 	and.w	r3, r3, #32
 80048cc:	2b20      	cmp	r3, #32
 80048ce:	d003      	beq.n	80048d8 <I2C_IsErrorOccurred+0xe0>
 80048d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d0aa      	beq.n	800482e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80048d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d103      	bne.n	80048e8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	2220      	movs	r2, #32
 80048e6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80048e8:	6a3b      	ldr	r3, [r7, #32]
 80048ea:	f043 0304 	orr.w	r3, r3, #4
 80048ee:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80048f0:	2301      	movs	r3, #1
 80048f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	699b      	ldr	r3, [r3, #24]
 80048fc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80048fe:	69bb      	ldr	r3, [r7, #24]
 8004900:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004904:	2b00      	cmp	r3, #0
 8004906:	d00b      	beq.n	8004920 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004908:	6a3b      	ldr	r3, [r7, #32]
 800490a:	f043 0301 	orr.w	r3, r3, #1
 800490e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004918:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800491a:	2301      	movs	r3, #1
 800491c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004920:	69bb      	ldr	r3, [r7, #24]
 8004922:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004926:	2b00      	cmp	r3, #0
 8004928:	d00b      	beq.n	8004942 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800492a:	6a3b      	ldr	r3, [r7, #32]
 800492c:	f043 0308 	orr.w	r3, r3, #8
 8004930:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800493a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800493c:	2301      	movs	r3, #1
 800493e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004942:	69bb      	ldr	r3, [r7, #24]
 8004944:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004948:	2b00      	cmp	r3, #0
 800494a:	d00b      	beq.n	8004964 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800494c:	6a3b      	ldr	r3, [r7, #32]
 800494e:	f043 0302 	orr.w	r3, r3, #2
 8004952:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f44f 7200 	mov.w	r2, #512	; 0x200
 800495c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800495e:	2301      	movs	r3, #1
 8004960:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8004964:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004968:	2b00      	cmp	r3, #0
 800496a:	d01c      	beq.n	80049a6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800496c:	68f8      	ldr	r0, [r7, #12]
 800496e:	f7ff fe45 	bl	80045fc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	6859      	ldr	r1, [r3, #4]
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681a      	ldr	r2, [r3, #0]
 800497c:	4b0d      	ldr	r3, [pc, #52]	; (80049b4 <I2C_IsErrorOccurred+0x1bc>)
 800497e:	400b      	ands	r3, r1
 8004980:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004986:	6a3b      	ldr	r3, [r7, #32]
 8004988:	431a      	orrs	r2, r3
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	2220      	movs	r2, #32
 8004992:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	2200      	movs	r2, #0
 800499a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	2200      	movs	r2, #0
 80049a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80049a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80049aa:	4618      	mov	r0, r3
 80049ac:	3728      	adds	r7, #40	; 0x28
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd80      	pop	{r7, pc}
 80049b2:	bf00      	nop
 80049b4:	fe00e800 	.word	0xfe00e800

080049b8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80049b8:	b480      	push	{r7}
 80049ba:	b087      	sub	sp, #28
 80049bc:	af00      	add	r7, sp, #0
 80049be:	60f8      	str	r0, [r7, #12]
 80049c0:	607b      	str	r3, [r7, #4]
 80049c2:	460b      	mov	r3, r1
 80049c4:	817b      	strh	r3, [r7, #10]
 80049c6:	4613      	mov	r3, r2
 80049c8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80049ca:	897b      	ldrh	r3, [r7, #10]
 80049cc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80049d0:	7a7b      	ldrb	r3, [r7, #9]
 80049d2:	041b      	lsls	r3, r3, #16
 80049d4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80049d8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80049de:	6a3b      	ldr	r3, [r7, #32]
 80049e0:	4313      	orrs	r3, r2
 80049e2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80049e6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	685a      	ldr	r2, [r3, #4]
 80049ee:	6a3b      	ldr	r3, [r7, #32]
 80049f0:	0d5b      	lsrs	r3, r3, #21
 80049f2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80049f6:	4b08      	ldr	r3, [pc, #32]	; (8004a18 <I2C_TransferConfig+0x60>)
 80049f8:	430b      	orrs	r3, r1
 80049fa:	43db      	mvns	r3, r3
 80049fc:	ea02 0103 	and.w	r1, r2, r3
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	697a      	ldr	r2, [r7, #20]
 8004a06:	430a      	orrs	r2, r1
 8004a08:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004a0a:	bf00      	nop
 8004a0c:	371c      	adds	r7, #28
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a14:	4770      	bx	lr
 8004a16:	bf00      	nop
 8004a18:	03ff63ff 	.word	0x03ff63ff

08004a1c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b083      	sub	sp, #12
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
 8004a24:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a2c:	b2db      	uxtb	r3, r3
 8004a2e:	2b20      	cmp	r3, #32
 8004a30:	d138      	bne.n	8004aa4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004a38:	2b01      	cmp	r3, #1
 8004a3a:	d101      	bne.n	8004a40 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004a3c:	2302      	movs	r3, #2
 8004a3e:	e032      	b.n	8004aa6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2201      	movs	r2, #1
 8004a44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2224      	movs	r2, #36	; 0x24
 8004a4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	681a      	ldr	r2, [r3, #0]
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f022 0201 	bic.w	r2, r2, #1
 8004a5e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	681a      	ldr	r2, [r3, #0]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004a6e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	6819      	ldr	r1, [r3, #0]
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	683a      	ldr	r2, [r7, #0]
 8004a7c:	430a      	orrs	r2, r1
 8004a7e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	681a      	ldr	r2, [r3, #0]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f042 0201 	orr.w	r2, r2, #1
 8004a8e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2220      	movs	r2, #32
 8004a94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	e000      	b.n	8004aa6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004aa4:	2302      	movs	r3, #2
  }
}
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	370c      	adds	r7, #12
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab0:	4770      	bx	lr

08004ab2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004ab2:	b480      	push	{r7}
 8004ab4:	b085      	sub	sp, #20
 8004ab6:	af00      	add	r7, sp, #0
 8004ab8:	6078      	str	r0, [r7, #4]
 8004aba:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ac2:	b2db      	uxtb	r3, r3
 8004ac4:	2b20      	cmp	r3, #32
 8004ac6:	d139      	bne.n	8004b3c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004ace:	2b01      	cmp	r3, #1
 8004ad0:	d101      	bne.n	8004ad6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004ad2:	2302      	movs	r3, #2
 8004ad4:	e033      	b.n	8004b3e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2201      	movs	r2, #1
 8004ada:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2224      	movs	r2, #36	; 0x24
 8004ae2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	681a      	ldr	r2, [r3, #0]
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f022 0201 	bic.w	r2, r2, #1
 8004af4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004b04:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	021b      	lsls	r3, r3, #8
 8004b0a:	68fa      	ldr	r2, [r7, #12]
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	68fa      	ldr	r2, [r7, #12]
 8004b16:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	681a      	ldr	r2, [r3, #0]
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f042 0201 	orr.w	r2, r2, #1
 8004b26:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2220      	movs	r2, #32
 8004b2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2200      	movs	r2, #0
 8004b34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004b38:	2300      	movs	r3, #0
 8004b3a:	e000      	b.n	8004b3e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004b3c:	2302      	movs	r3, #2
  }
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	3714      	adds	r7, #20
 8004b42:	46bd      	mov	sp, r7
 8004b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b48:	4770      	bx	lr
	...

08004b4c <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b084      	sub	sp, #16
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8004b54:	2300      	movs	r3, #0
 8004b56:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d01e      	beq.n	8004b9c <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8004b5e:	4b13      	ldr	r3, [pc, #76]	; (8004bac <HAL_IPCC_Init+0x60>)
 8004b60:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004b68:	b2db      	uxtb	r3, r3
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d102      	bne.n	8004b74 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	f7fe f812 	bl	8002b98 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8004b74:	68b8      	ldr	r0, [r7, #8]
 8004b76:	f000 f85b 	bl	8004c30 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
 8004b82:	68bb      	ldr	r3, [r7, #8]
 8004b84:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 8004b86:	6878      	ldr	r0, [r7, #4]
 8004b88:	f000 f82c 	bl	8004be4 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2201      	movs	r2, #1
 8004b96:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8004b9a:	e001      	b.n	8004ba0 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8004ba0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	3710      	adds	r7, #16
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bd80      	pop	{r7, pc}
 8004baa:	bf00      	nop
 8004bac:	58000c00 	.word	0x58000c00

08004bb0 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b085      	sub	sp, #20
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	60f8      	str	r0, [r7, #12]
 8004bb8:	60b9      	str	r1, [r7, #8]
 8004bba:	4613      	mov	r3, r2
 8004bbc:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 8004bbe:	bf00      	nop
 8004bc0:	3714      	adds	r7, #20
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc8:	4770      	bx	lr

08004bca <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8004bca:	b480      	push	{r7}
 8004bcc:	b085      	sub	sp, #20
 8004bce:	af00      	add	r7, sp, #0
 8004bd0:	60f8      	str	r0, [r7, #12]
 8004bd2:	60b9      	str	r1, [r7, #8]
 8004bd4:	4613      	mov	r3, r2
 8004bd6:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8004bd8:	bf00      	nop
 8004bda:	3714      	adds	r7, #20
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be2:	4770      	bx	lr

08004be4 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 8004be4:	b480      	push	{r7}
 8004be6:	b085      	sub	sp, #20
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8004bec:	2300      	movs	r3, #0
 8004bee:	60fb      	str	r3, [r7, #12]
 8004bf0:	e00f      	b.n	8004c12 <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 8004bf2:	687a      	ldr	r2, [r7, #4]
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	009b      	lsls	r3, r3, #2
 8004bf8:	4413      	add	r3, r2
 8004bfa:	4a0b      	ldr	r2, [pc, #44]	; (8004c28 <IPCC_SetDefaultCallbacks+0x44>)
 8004bfc:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 8004bfe:	687a      	ldr	r2, [r7, #4]
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	3306      	adds	r3, #6
 8004c04:	009b      	lsls	r3, r3, #2
 8004c06:	4413      	add	r3, r2
 8004c08:	4a08      	ldr	r2, [pc, #32]	; (8004c2c <IPCC_SetDefaultCallbacks+0x48>)
 8004c0a:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	3301      	adds	r3, #1
 8004c10:	60fb      	str	r3, [r7, #12]
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	2b05      	cmp	r3, #5
 8004c16:	d9ec      	bls.n	8004bf2 <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8004c18:	bf00      	nop
 8004c1a:	bf00      	nop
 8004c1c:	3714      	adds	r7, #20
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c24:	4770      	bx	lr
 8004c26:	bf00      	nop
 8004c28:	08004bb1 	.word	0x08004bb1
 8004c2c:	08004bcb 	.word	0x08004bcb

08004c30 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8004c30:	b480      	push	{r7}
 8004c32:	b083      	sub	sp, #12
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
 8004c44:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	223f      	movs	r2, #63	; 0x3f
 8004c4a:	609a      	str	r2, [r3, #8]
}
 8004c4c:	bf00      	nop
 8004c4e:	370c      	adds	r7, #12
 8004c50:	46bd      	mov	sp, r7
 8004c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c56:	4770      	bx	lr

08004c58 <LL_RCC_SetLPTIMClockSource>:
{
 8004c58:	b480      	push	{r7}
 8004c5a:	b083      	sub	sp, #12
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8004c60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c64:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	0c1b      	lsrs	r3, r3, #16
 8004c6c:	041b      	lsls	r3, r3, #16
 8004c6e:	43db      	mvns	r3, r3
 8004c70:	401a      	ands	r2, r3
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	041b      	lsls	r3, r3, #16
 8004c76:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004c80:	bf00      	nop
 8004c82:	370c      	adds	r7, #12
 8004c84:	46bd      	mov	sp, r7
 8004c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8a:	4770      	bx	lr

08004c8c <LL_RCC_GetLPTIMClockSource>:
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	b083      	sub	sp, #12
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
  return (uint32_t)((READ_BIT(RCC->CCIPR, LPTIMx) >> 16) | LPTIMx);
 8004c94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c98:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	4013      	ands	r3, r2
 8004ca0:	0c1a      	lsrs	r2, r3, #16
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	4313      	orrs	r3, r2
}
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	370c      	adds	r7, #12
 8004caa:	46bd      	mov	sp, r7
 8004cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb0:	4770      	bx	lr

08004cb2 <LL_APB1_GRP1_ForceReset>:
{
 8004cb2:	b480      	push	{r7}
 8004cb4:	b083      	sub	sp, #12
 8004cb6:	af00      	add	r7, sp, #0
 8004cb8:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1RSTR1, Periphs);
 8004cba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cbe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004cc0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	638b      	str	r3, [r1, #56]	; 0x38
}
 8004cca:	bf00      	nop
 8004ccc:	370c      	adds	r7, #12
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd4:	4770      	bx	lr

08004cd6 <LL_APB1_GRP2_ForceReset>:
{
 8004cd6:	b480      	push	{r7}
 8004cd8:	b083      	sub	sp, #12
 8004cda:	af00      	add	r7, sp, #0
 8004cdc:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1RSTR2, Periphs);
 8004cde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ce2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004ce4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	4313      	orrs	r3, r2
 8004cec:	63cb      	str	r3, [r1, #60]	; 0x3c
}
 8004cee:	bf00      	nop
 8004cf0:	370c      	adds	r7, #12
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf8:	4770      	bx	lr

08004cfa <LL_APB1_GRP1_ReleaseReset>:
{
 8004cfa:	b480      	push	{r7}
 8004cfc:	b083      	sub	sp, #12
 8004cfe:	af00      	add	r7, sp, #0
 8004d00:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1RSTR1, Periphs);
 8004d02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d06:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	43db      	mvns	r3, r3
 8004d0c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004d10:	4013      	ands	r3, r2
 8004d12:	638b      	str	r3, [r1, #56]	; 0x38
}
 8004d14:	bf00      	nop
 8004d16:	370c      	adds	r7, #12
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1e:	4770      	bx	lr

08004d20 <LL_APB1_GRP2_ReleaseReset>:
{
 8004d20:	b480      	push	{r7}
 8004d22:	b083      	sub	sp, #12
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1RSTR2, Periphs);
 8004d28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d2c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	43db      	mvns	r3, r3
 8004d32:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004d36:	4013      	ands	r3, r2
 8004d38:	63cb      	str	r3, [r1, #60]	; 0x3c
}
 8004d3a:	bf00      	nop
 8004d3c:	370c      	adds	r7, #12
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d44:	4770      	bx	lr
	...

08004d48 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b084      	sub	sp, #16
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d101      	bne.n	8004d5a <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 8004d56:	2301      	movs	r3, #1
 8004d58:	e08f      	b.n	8004e7a <HAL_LPTIM_Init+0x132>
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	2b01      	cmp	r3, #1
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8004d66:	b2db      	uxtb	r3, r3
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d106      	bne.n	8004d7a <HAL_LPTIM_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 8004d74:	6878      	ldr	r0, [r7, #4]
 8004d76:	f7fd ff33 	bl	8002be0 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2202      	movs	r2, #2
 8004d7e:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	68db      	ldr	r3, [r3, #12]
 8004d88:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	2b01      	cmp	r3, #1
 8004d90:	d004      	beq.n	8004d9c <HAL_LPTIM_Init+0x54>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d96:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004d9a:	d103      	bne.n	8004da4 <HAL_LPTIM_Init+0x5c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	f023 031e 	bic.w	r3, r3, #30
 8004da2:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	695b      	ldr	r3, [r3, #20]
 8004da8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d005      	beq.n	8004dbc <HAL_LPTIM_Init+0x74>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8004db6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004dba:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8004dbc:	68fa      	ldr	r2, [r7, #12]
 8004dbe:	4b31      	ldr	r3, [pc, #196]	; (8004e84 <HAL_LPTIM_Init+0x13c>)
 8004dc0:	4013      	ands	r3, r2
 8004dc2:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8004dcc:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 8004dd2:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 8004dd8:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 8004dde:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8004de0:	68fa      	ldr	r2, [r7, #12]
 8004de2:	4313      	orrs	r3, r2
 8004de4:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	685b      	ldr	r3, [r3, #4]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d107      	bne.n	8004dfe <HAL_LPTIM_Init+0xb6>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8004df6:	4313      	orrs	r3, r2
 8004df8:	68fa      	ldr	r2, [r7, #12]
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	685b      	ldr	r3, [r3, #4]
 8004e02:	2b01      	cmp	r3, #1
 8004e04:	d004      	beq.n	8004e10 <HAL_LPTIM_Init+0xc8>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e0a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004e0e:	d107      	bne.n	8004e20 <HAL_LPTIM_Init+0xd8>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	68fa      	ldr	r2, [r7, #12]
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	695b      	ldr	r3, [r3, #20]
 8004e24:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d00a      	beq.n	8004e42 <HAL_LPTIM_Init+0xfa>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8004e34:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 8004e3a:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8004e3c:	68fa      	ldr	r2, [r7, #12]
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	68fa      	ldr	r2, [r7, #12]
 8004e48:	60da      	str	r2, [r3, #12]
#if defined(LPTIM_OR_OR)

  /* Configure LPTIM input sources */
  if (hlptim->Instance == LPTIM1)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4a0e      	ldr	r2, [pc, #56]	; (8004e88 <HAL_LPTIM_Init+0x140>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d108      	bne.n	8004e66 <HAL_LPTIM_Init+0x11e>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->OR = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	430a      	orrs	r2, r1
 8004e62:	621a      	str	r2, [r3, #32]
 8004e64:	e004      	b.n	8004e70 <HAL_LPTIM_Init+0x128>
  {
    /* Check LPTIM2 Input1 source */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

    /* Configure LPTIM2 Input1 source */
    hlptim->Instance->OR = hlptim->Init.Input1Source;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	687a      	ldr	r2, [r7, #4]
 8004e6c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004e6e:	621a      	str	r2, [r3, #32]
  }
#endif /* LPTIM_OR_OR */

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2201      	movs	r2, #1
 8004e74:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 8004e78:	2300      	movs	r3, #0
}
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	3710      	adds	r7, #16
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd80      	pop	{r7, pc}
 8004e82:	bf00      	nop
 8004e84:	ff19f1fe 	.word	0xff19f1fe
 8004e88:	40007c00 	.word	0x40007c00

08004e8c <HAL_LPTIM_TimeOut_Start_IT>:
  * @param  Timeout Specifies the TimeOut value to reset the counter.
  *         This parameter must be a value between 0x0000 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_TimeOut_Start_IT(LPTIM_HandleTypeDef *hlptim, uint32_t Period, uint32_t Timeout)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b084      	sub	sp, #16
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	60f8      	str	r0, [r7, #12]
 8004e94:	60b9      	str	r1, [r7, #8]
 8004e96:	607a      	str	r2, [r7, #4]
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(Period));
  assert_param(IS_LPTIM_PULSE(Timeout));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	2202      	movs	r2, #2
 8004e9c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Enable EXTI Line interrupt on the LPTIM Wake-up Timer */
  __HAL_LPTIM_WAKEUPTIMER_EXTI_ENABLE_IT(hlptim->Instance);
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4a38      	ldr	r2, [pc, #224]	; (8004f88 <HAL_LPTIM_TimeOut_Start_IT+0xfc>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d108      	bne.n	8004ebc <HAL_LPTIM_TimeOut_Start_IT+0x30>
 8004eaa:	4b38      	ldr	r3, [pc, #224]	; (8004f8c <HAL_LPTIM_TimeOut_Start_IT+0x100>)
 8004eac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004eb0:	4a36      	ldr	r2, [pc, #216]	; (8004f8c <HAL_LPTIM_TimeOut_Start_IT+0x100>)
 8004eb2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004eb6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004eba:	e007      	b.n	8004ecc <HAL_LPTIM_TimeOut_Start_IT+0x40>
 8004ebc:	4b33      	ldr	r3, [pc, #204]	; (8004f8c <HAL_LPTIM_TimeOut_Start_IT+0x100>)
 8004ebe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ec2:	4a32      	ldr	r2, [pc, #200]	; (8004f8c <HAL_LPTIM_TimeOut_Start_IT+0x100>)
 8004ec4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004ec8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Set TIMOUT bit to enable the timeout function */
  hlptim->Instance->CFGR |= LPTIM_CFGR_TIMOUT;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	68da      	ldr	r2, [r3, #12]
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8004eda:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	691a      	ldr	r2, [r3, #16]
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f042 0201 	orr.w	r2, r2, #1
 8004eea:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	2210      	movs	r2, #16
 8004ef2:	605a      	str	r2, [r3, #4]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	68ba      	ldr	r2, [r7, #8]
 8004efa:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8004efc:	2110      	movs	r1, #16
 8004efe:	68f8      	ldr	r0, [r7, #12]
 8004f00:	f000 f92c 	bl	800515c <LPTIM_WaitForFlag>
 8004f04:	4603      	mov	r3, r0
 8004f06:	2b03      	cmp	r3, #3
 8004f08:	d101      	bne.n	8004f0e <HAL_LPTIM_TimeOut_Start_IT+0x82>
  {
    return HAL_TIMEOUT;
 8004f0a:	2303      	movs	r3, #3
 8004f0c:	e038      	b.n	8004f80 <HAL_LPTIM_TimeOut_Start_IT+0xf4>
  }

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	2208      	movs	r2, #8
 8004f14:	605a      	str	r2, [r3, #4]

  /* Load the Timeout value in the compare register */
  __HAL_LPTIM_COMPARE_SET(hlptim, Timeout);
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	687a      	ldr	r2, [r7, #4]
 8004f1c:	615a      	str	r2, [r3, #20]

  /* Wait for the completion of the write operation to the LPTIM_CMP register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 8004f1e:	2108      	movs	r1, #8
 8004f20:	68f8      	ldr	r0, [r7, #12]
 8004f22:	f000 f91b 	bl	800515c <LPTIM_WaitForFlag>
 8004f26:	4603      	mov	r3, r0
 8004f28:	2b03      	cmp	r3, #3
 8004f2a:	d101      	bne.n	8004f30 <HAL_LPTIM_TimeOut_Start_IT+0xa4>
  {
    return HAL_TIMEOUT;
 8004f2c:	2303      	movs	r3, #3
 8004f2e:	e027      	b.n	8004f80 <HAL_LPTIM_TimeOut_Start_IT+0xf4>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 8004f30:	68f8      	ldr	r0, [r7, #12]
 8004f32:	f000 f943 	bl	80051bc <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 8004f36:	68f8      	ldr	r0, [r7, #12]
 8004f38:	f000 f901 	bl	800513e <HAL_LPTIM_GetState>
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	2b03      	cmp	r3, #3
 8004f40:	d101      	bne.n	8004f46 <HAL_LPTIM_TimeOut_Start_IT+0xba>
  {
    return HAL_TIMEOUT;
 8004f42:	2303      	movs	r3, #3
 8004f44:	e01c      	b.n	8004f80 <HAL_LPTIM_TimeOut_Start_IT+0xf4>
  }

  /* Enable Compare match interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_CMPM);
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	689a      	ldr	r2, [r3, #8]
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f042 0201 	orr.w	r2, r2, #1
 8004f54:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	691a      	ldr	r2, [r3, #16]
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f042 0201 	orr.w	r2, r2, #1
 8004f64:	611a      	str	r2, [r3, #16]

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	691a      	ldr	r2, [r3, #16]
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f042 0204 	orr.w	r2, r2, #4
 8004f74:	611a      	str	r2, [r3, #16]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	2201      	movs	r2, #1
 8004f7a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 8004f7e:	2300      	movs	r3, #0
}
 8004f80:	4618      	mov	r0, r3
 8004f82:	3710      	adds	r7, #16
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bd80      	pop	{r7, pc}
 8004f88:	40007c00 	.word	0x40007c00
 8004f8c:	58000800 	.word	0x58000800

08004f90 <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b082      	sub	sp, #8
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f003 0301 	and.w	r3, r3, #1
 8004fa2:	2b01      	cmp	r3, #1
 8004fa4:	d10d      	bne.n	8004fc2 <HAL_LPTIM_IRQHandler+0x32>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	689b      	ldr	r3, [r3, #8]
 8004fac:	f003 0301 	and.w	r3, r3, #1
 8004fb0:	2b01      	cmp	r3, #1
 8004fb2:	d106      	bne.n	8004fc2 <HAL_LPTIM_IRQHandler+0x32>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	2201      	movs	r2, #1
 8004fba:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
#else
      HAL_LPTIM_CompareMatchCallback(hlptim);
 8004fbc:	6878      	ldr	r0, [r7, #4]
 8004fbe:	f7fd fcef 	bl	80029a0 <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f003 0302 	and.w	r3, r3, #2
 8004fcc:	2b02      	cmp	r3, #2
 8004fce:	d10d      	bne.n	8004fec <HAL_LPTIM_IRQHandler+0x5c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	689b      	ldr	r3, [r3, #8]
 8004fd6:	f003 0302 	and.w	r3, r3, #2
 8004fda:	2b02      	cmp	r3, #2
 8004fdc:	d106      	bne.n	8004fec <HAL_LPTIM_IRQHandler+0x5c>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	2202      	movs	r2, #2
 8004fe4:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 8004fe6:	6878      	ldr	r0, [r7, #4]
 8004fe8:	f000 f86d 	bl	80050c6 <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f003 0304 	and.w	r3, r3, #4
 8004ff6:	2b04      	cmp	r3, #4
 8004ff8:	d10d      	bne.n	8005016 <HAL_LPTIM_IRQHandler+0x86>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	689b      	ldr	r3, [r3, #8]
 8005000:	f003 0304 	and.w	r3, r3, #4
 8005004:	2b04      	cmp	r3, #4
 8005006:	d106      	bne.n	8005016 <HAL_LPTIM_IRQHandler+0x86>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	2204      	movs	r2, #4
 800500e:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 8005010:	6878      	ldr	r0, [r7, #4]
 8005012:	f000 f862 	bl	80050da <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f003 0308 	and.w	r3, r3, #8
 8005020:	2b08      	cmp	r3, #8
 8005022:	d10d      	bne.n	8005040 <HAL_LPTIM_IRQHandler+0xb0>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	689b      	ldr	r3, [r3, #8]
 800502a:	f003 0308 	and.w	r3, r3, #8
 800502e:	2b08      	cmp	r3, #8
 8005030:	d106      	bne.n	8005040 <HAL_LPTIM_IRQHandler+0xb0>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	2208      	movs	r2, #8
 8005038:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 800503a:	6878      	ldr	r0, [r7, #4]
 800503c:	f000 f857 	bl	80050ee <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f003 0310 	and.w	r3, r3, #16
 800504a:	2b10      	cmp	r3, #16
 800504c:	d10d      	bne.n	800506a <HAL_LPTIM_IRQHandler+0xda>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	689b      	ldr	r3, [r3, #8]
 8005054:	f003 0310 	and.w	r3, r3, #16
 8005058:	2b10      	cmp	r3, #16
 800505a:	d106      	bne.n	800506a <HAL_LPTIM_IRQHandler+0xda>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	2210      	movs	r2, #16
 8005062:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 8005064:	6878      	ldr	r0, [r7, #4]
 8005066:	f000 f84c 	bl	8005102 <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f003 0320 	and.w	r3, r3, #32
 8005074:	2b20      	cmp	r3, #32
 8005076:	d10d      	bne.n	8005094 <HAL_LPTIM_IRQHandler+0x104>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	689b      	ldr	r3, [r3, #8]
 800507e:	f003 0320 	and.w	r3, r3, #32
 8005082:	2b20      	cmp	r3, #32
 8005084:	d106      	bne.n	8005094 <HAL_LPTIM_IRQHandler+0x104>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	2220      	movs	r2, #32
 800508c:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 800508e:	6878      	ldr	r0, [r7, #4]
 8005090:	f000 f841 	bl	8005116 <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800509e:	2b40      	cmp	r3, #64	; 0x40
 80050a0:	d10d      	bne.n	80050be <HAL_LPTIM_IRQHandler+0x12e>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	689b      	ldr	r3, [r3, #8]
 80050a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050ac:	2b40      	cmp	r3, #64	; 0x40
 80050ae:	d106      	bne.n	80050be <HAL_LPTIM_IRQHandler+0x12e>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	2240      	movs	r2, #64	; 0x40
 80050b6:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 80050b8:	6878      	ldr	r0, [r7, #4]
 80050ba:	f000 f836 	bl	800512a <HAL_LPTIM_DirectionDownCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
}
 80050be:	bf00      	nop
 80050c0:	3708      	adds	r7, #8
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bd80      	pop	{r7, pc}

080050c6 <HAL_LPTIM_AutoReloadMatchCallback>:
  * @brief  Autoreload match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 80050c6:	b480      	push	{r7}
 80050c8:	b083      	sub	sp, #12
 80050ca:	af00      	add	r7, sp, #0
 80050cc:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadMatchCallback could be implemented in the user file
   */
}
 80050ce:	bf00      	nop
 80050d0:	370c      	adds	r7, #12
 80050d2:	46bd      	mov	sp, r7
 80050d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d8:	4770      	bx	lr

080050da <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 80050da:	b480      	push	{r7}
 80050dc:	b083      	sub	sp, #12
 80050de:	af00      	add	r7, sp, #0
 80050e0:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 80050e2:	bf00      	nop
 80050e4:	370c      	adds	r7, #12
 80050e6:	46bd      	mov	sp, r7
 80050e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ec:	4770      	bx	lr

080050ee <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 80050ee:	b480      	push	{r7}
 80050f0:	b083      	sub	sp, #12
 80050f2:	af00      	add	r7, sp, #0
 80050f4:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 80050f6:	bf00      	nop
 80050f8:	370c      	adds	r7, #12
 80050fa:	46bd      	mov	sp, r7
 80050fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005100:	4770      	bx	lr

08005102 <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8005102:	b480      	push	{r7}
 8005104:	b083      	sub	sp, #12
 8005106:	af00      	add	r7, sp, #0
 8005108:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 800510a:	bf00      	nop
 800510c:	370c      	adds	r7, #12
 800510e:	46bd      	mov	sp, r7
 8005110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005114:	4770      	bx	lr

08005116 <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 8005116:	b480      	push	{r7}
 8005118:	b083      	sub	sp, #12
 800511a:	af00      	add	r7, sp, #0
 800511c:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 800511e:	bf00      	nop
 8005120:	370c      	adds	r7, #12
 8005122:	46bd      	mov	sp, r7
 8005124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005128:	4770      	bx	lr

0800512a <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 800512a:	b480      	push	{r7}
 800512c:	b083      	sub	sp, #12
 800512e:	af00      	add	r7, sp, #0
 8005130:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 8005132:	bf00      	nop
 8005134:	370c      	adds	r7, #12
 8005136:	46bd      	mov	sp, r7
 8005138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513c:	4770      	bx	lr

0800513e <HAL_LPTIM_GetState>:
  * @brief  Return the LPTIM handle state.
  * @param  hlptim LPTIM handle
  * @retval HAL state
  */
HAL_LPTIM_StateTypeDef HAL_LPTIM_GetState(LPTIM_HandleTypeDef *hlptim)
{
 800513e:	b480      	push	{r7}
 8005140:	b083      	sub	sp, #12
 8005142:	af00      	add	r7, sp, #0
 8005144:	6078      	str	r0, [r7, #4]
  /* Return LPTIM handle state */
  return hlptim->State;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800514c:	b2db      	uxtb	r3, r3
}
 800514e:	4618      	mov	r0, r3
 8005150:	370c      	adds	r7, #12
 8005152:	46bd      	mov	sp, r7
 8005154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005158:	4770      	bx	lr
	...

0800515c <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 800515c:	b480      	push	{r7}
 800515e:	b085      	sub	sp, #20
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
 8005164:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 8005166:	2300      	movs	r3, #0
 8005168:	73fb      	strb	r3, [r7, #15]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 800516a:	4b12      	ldr	r3, [pc, #72]	; (80051b4 <LPTIM_WaitForFlag+0x58>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4a12      	ldr	r2, [pc, #72]	; (80051b8 <LPTIM_WaitForFlag+0x5c>)
 8005170:	fba2 2303 	umull	r2, r3, r2, r3
 8005174:	0b9b      	lsrs	r3, r3, #14
 8005176:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800517a:	fb02 f303 	mul.w	r3, r2, r3
 800517e:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	3b01      	subs	r3, #1
 8005184:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 8005186:	68bb      	ldr	r3, [r7, #8]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d101      	bne.n	8005190 <LPTIM_WaitForFlag+0x34>
    {
      result = HAL_TIMEOUT;
 800518c:	2303      	movs	r3, #3
 800518e:	73fb      	strb	r3, [r7, #15]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	681a      	ldr	r2, [r3, #0]
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	4013      	ands	r3, r2
 800519a:	683a      	ldr	r2, [r7, #0]
 800519c:	429a      	cmp	r2, r3
 800519e:	d002      	beq.n	80051a6 <LPTIM_WaitForFlag+0x4a>
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d1ec      	bne.n	8005180 <LPTIM_WaitForFlag+0x24>

  return result;
 80051a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80051a8:	4618      	mov	r0, r3
 80051aa:	3714      	adds	r7, #20
 80051ac:	46bd      	mov	sp, r7
 80051ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b2:	4770      	bx	lr
 80051b4:	20000008 	.word	0x20000008
 80051b8:	d1b71759 	.word	0xd1b71759

080051bc <LPTIM_Disable>:
  *         Please check Errata Sheet ES0335 for more details under "MCU may remain
  *         stuck in LPTIM interrupt when entering Stop mode" section.
  * @retval None
  */
void LPTIM_Disable(LPTIM_HandleTypeDef *hlptim)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b08c      	sub	sp, #48	; 0x30
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpclksource = 0;
 80051c4:	2300      	movs	r3, #0
 80051c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80051c8:	f3ef 8310 	mrs	r3, PRIMASK
 80051cc:	60fb      	str	r3, [r7, #12]
  return(result);
 80051ce:	68fb      	ldr	r3, [r7, #12]
#if defined(LPTIM_OR_OR)
  uint32_t tmpOR;
#endif /* LPTIM_OR_OR */

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 80051d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80051d2:	2301      	movs	r3, #1
 80051d4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051d6:	693b      	ldr	r3, [r7, #16]
 80051d8:	f383 8810 	msr	PRIMASK, r3
}
 80051dc:	bf00      	nop
  __set_PRIMASK(1) ;

  /*********** Save LPTIM Config ***********/
  /* Save LPTIM source clock */
  switch ((uint32_t)hlptim->Instance)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4a62      	ldr	r2, [pc, #392]	; (800536c <LPTIM_Disable+0x1b0>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d003      	beq.n	80051f0 <LPTIM_Disable+0x34>
 80051e8:	4a61      	ldr	r2, [pc, #388]	; (8005370 <LPTIM_Disable+0x1b4>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d006      	beq.n	80051fc <LPTIM_Disable+0x40>
    case LPTIM2_BASE:
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
      break;
#endif /* LPTIM2 */
    default:
      break;
 80051ee:	e00b      	b.n	8005208 <LPTIM_Disable+0x4c>
      tmpclksource = __HAL_RCC_GET_LPTIM1_SOURCE();
 80051f0:	f44f 2040 	mov.w	r0, #786432	; 0xc0000
 80051f4:	f7ff fd4a 	bl	8004c8c <LL_RCC_GetLPTIMClockSource>
 80051f8:	62f8      	str	r0, [r7, #44]	; 0x2c
      break;
 80051fa:	e005      	b.n	8005208 <LPTIM_Disable+0x4c>
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
 80051fc:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 8005200:	f7ff fd44 	bl	8004c8c <LL_RCC_GetLPTIMClockSource>
 8005204:	62f8      	str	r0, [r7, #44]	; 0x2c
      break;
 8005206:	bf00      	nop
  }

  /* Save LPTIM configuration registers */
  tmpIER = hlptim->Instance->IER;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	689b      	ldr	r3, [r3, #8]
 800520e:	627b      	str	r3, [r7, #36]	; 0x24
  tmpCFGR = hlptim->Instance->CFGR;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	68db      	ldr	r3, [r3, #12]
 8005216:	623b      	str	r3, [r7, #32]
  tmpCMP = hlptim->Instance->CMP;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	695b      	ldr	r3, [r3, #20]
 800521e:	61fb      	str	r3, [r7, #28]
  tmpARR = hlptim->Instance->ARR;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	699b      	ldr	r3, [r3, #24]
 8005226:	61bb      	str	r3, [r7, #24]
#if defined(LPTIM_OR_OR)
  tmpOR = hlptim->Instance->OR;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	6a1b      	ldr	r3, [r3, #32]
 800522e:	617b      	str	r3, [r7, #20]
#endif /* LPTIM_OR_OR */

  /*********** Reset LPTIM ***********/
  switch ((uint32_t)hlptim->Instance)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	4a4d      	ldr	r2, [pc, #308]	; (800536c <LPTIM_Disable+0x1b0>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d003      	beq.n	8005242 <LPTIM_Disable+0x86>
 800523a:	4a4d      	ldr	r2, [pc, #308]	; (8005370 <LPTIM_Disable+0x1b4>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d009      	beq.n	8005254 <LPTIM_Disable+0x98>
      __HAL_RCC_LPTIM2_FORCE_RESET();
      __HAL_RCC_LPTIM2_RELEASE_RESET();
      break;
#endif /* LPTIM2 */
    default:
      break;
 8005240:	e00f      	b.n	8005262 <LPTIM_Disable+0xa6>
      __HAL_RCC_LPTIM1_FORCE_RESET();
 8005242:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8005246:	f7ff fd34 	bl	8004cb2 <LL_APB1_GRP1_ForceReset>
      __HAL_RCC_LPTIM1_RELEASE_RESET();
 800524a:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800524e:	f7ff fd54 	bl	8004cfa <LL_APB1_GRP1_ReleaseReset>
      break;
 8005252:	e006      	b.n	8005262 <LPTIM_Disable+0xa6>
      __HAL_RCC_LPTIM2_FORCE_RESET();
 8005254:	2020      	movs	r0, #32
 8005256:	f7ff fd3e 	bl	8004cd6 <LL_APB1_GRP2_ForceReset>
      __HAL_RCC_LPTIM2_RELEASE_RESET();
 800525a:	2020      	movs	r0, #32
 800525c:	f7ff fd60 	bl	8004d20 <LL_APB1_GRP2_ReleaseReset>
      break;
 8005260:	bf00      	nop
  }

  /*********** Restore LPTIM Config ***********/
  if ((tmpCMP != 0UL) || (tmpARR != 0UL))
 8005262:	69fb      	ldr	r3, [r7, #28]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d102      	bne.n	800526e <LPTIM_Disable+0xb2>
 8005268:	69bb      	ldr	r3, [r7, #24]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d05f      	beq.n	800532e <LPTIM_Disable+0x172>
  {
    /* Force LPTIM source kernel clock from APB */
    switch ((uint32_t)hlptim->Instance)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4a3e      	ldr	r2, [pc, #248]	; (800536c <LPTIM_Disable+0x1b0>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d003      	beq.n	8005280 <LPTIM_Disable+0xc4>
 8005278:	4a3d      	ldr	r2, [pc, #244]	; (8005370 <LPTIM_Disable+0x1b4>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d005      	beq.n	800528a <LPTIM_Disable+0xce>
      case LPTIM2_BASE:
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_PCLK1);
        break;
#endif /* LPTIM2 */
      default:
        break;
 800527e:	e009      	b.n	8005294 <LPTIM_Disable+0xd8>
        __HAL_RCC_LPTIM1_CONFIG(RCC_LPTIM1CLKSOURCE_PCLK1);
 8005280:	f44f 2040 	mov.w	r0, #786432	; 0xc0000
 8005284:	f7ff fce8 	bl	8004c58 <LL_RCC_SetLPTIMClockSource>
        break;
 8005288:	e004      	b.n	8005294 <LPTIM_Disable+0xd8>
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_PCLK1);
 800528a:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 800528e:	f7ff fce3 	bl	8004c58 <LL_RCC_SetLPTIMClockSource>
        break;
 8005292:	bf00      	nop
    }

    if (tmpCMP != 0UL)
 8005294:	69fb      	ldr	r3, [r7, #28]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d01a      	beq.n	80052d0 <LPTIM_Disable+0x114>
    {
      /* Restore CMP register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	691a      	ldr	r2, [r3, #16]
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f042 0201 	orr.w	r2, r2, #1
 80052a8:	611a      	str	r2, [r3, #16]
      hlptim->Instance->CMP = tmpCMP;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	69fa      	ldr	r2, [r7, #28]
 80052b0:	615a      	str	r2, [r3, #20]

      /* Wait for the completion of the write operation to the LPTIM_CMP register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 80052b2:	2108      	movs	r1, #8
 80052b4:	6878      	ldr	r0, [r7, #4]
 80052b6:	f7ff ff51 	bl	800515c <LPTIM_WaitForFlag>
 80052ba:	4603      	mov	r3, r0
 80052bc:	2b03      	cmp	r3, #3
 80052be:	d103      	bne.n	80052c8 <LPTIM_Disable+0x10c>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2203      	movs	r2, #3
 80052c4:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	2208      	movs	r2, #8
 80052ce:	605a      	str	r2, [r3, #4]
    }

    if (tmpARR != 0UL)
 80052d0:	69bb      	ldr	r3, [r7, #24]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d01a      	beq.n	800530c <LPTIM_Disable+0x150>
    {
      /* Restore ARR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	691a      	ldr	r2, [r3, #16]
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f042 0201 	orr.w	r2, r2, #1
 80052e4:	611a      	str	r2, [r3, #16]
      hlptim->Instance->ARR = tmpARR;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	69ba      	ldr	r2, [r7, #24]
 80052ec:	619a      	str	r2, [r3, #24]

      /* Wait for the completion of the write operation to the LPTIM_ARR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 80052ee:	2110      	movs	r1, #16
 80052f0:	6878      	ldr	r0, [r7, #4]
 80052f2:	f7ff ff33 	bl	800515c <LPTIM_WaitForFlag>
 80052f6:	4603      	mov	r3, r0
 80052f8:	2b03      	cmp	r3, #3
 80052fa:	d103      	bne.n	8005304 <LPTIM_Disable+0x148>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2203      	movs	r2, #3
 8005300:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
      }

      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	2210      	movs	r2, #16
 800530a:	605a      	str	r2, [r3, #4]
    }

    /* Restore LPTIM source kernel clock */
    switch ((uint32_t)hlptim->Instance)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a16      	ldr	r2, [pc, #88]	; (800536c <LPTIM_Disable+0x1b0>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d003      	beq.n	800531e <LPTIM_Disable+0x162>
 8005316:	4a16      	ldr	r2, [pc, #88]	; (8005370 <LPTIM_Disable+0x1b4>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d004      	beq.n	8005326 <LPTIM_Disable+0x16a>
      case LPTIM2_BASE:
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
        break;
#endif /* LPTIM2 */
      default:
        break;
 800531c:	e008      	b.n	8005330 <LPTIM_Disable+0x174>
        __HAL_RCC_LPTIM1_CONFIG(tmpclksource);
 800531e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005320:	f7ff fc9a 	bl	8004c58 <LL_RCC_SetLPTIMClockSource>
        break;
 8005324:	e004      	b.n	8005330 <LPTIM_Disable+0x174>
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
 8005326:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005328:	f7ff fc96 	bl	8004c58 <LL_RCC_SetLPTIMClockSource>
        break;
 800532c:	e000      	b.n	8005330 <LPTIM_Disable+0x174>
    }
  }
 800532e:	bf00      	nop

  /* Restore configuration registers (LPTIM should be disabled first) */
  hlptim->Instance->CR &= ~(LPTIM_CR_ENABLE);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	691a      	ldr	r2, [r3, #16]
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f022 0201 	bic.w	r2, r2, #1
 800533e:	611a      	str	r2, [r3, #16]
  hlptim->Instance->IER = tmpIER;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005346:	609a      	str	r2, [r3, #8]
  hlptim->Instance->CFGR = tmpCFGR;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	6a3a      	ldr	r2, [r7, #32]
 800534e:	60da      	str	r2, [r3, #12]
#if defined(LPTIM_OR_OR)
  hlptim->Instance->OR = tmpOR;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	697a      	ldr	r2, [r7, #20]
 8005356:	621a      	str	r2, [r3, #32]
 8005358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800535a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	f383 8810 	msr	PRIMASK, r3
}
 8005362:	bf00      	nop
#endif /* LPTIM_OR_OR */

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8005364:	bf00      	nop
 8005366:	3730      	adds	r7, #48	; 0x30
 8005368:	46bd      	mov	sp, r7
 800536a:	bd80      	pop	{r7, pc}
 800536c:	40007c00 	.word	0x40007c00
 8005370:	40009400 	.word	0x40009400

08005374 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005374:	b480      	push	{r7}
 8005376:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005378:	4b05      	ldr	r3, [pc, #20]	; (8005390 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a04      	ldr	r2, [pc, #16]	; (8005390 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800537e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005382:	6013      	str	r3, [r2, #0]
}
 8005384:	bf00      	nop
 8005386:	46bd      	mov	sp, r7
 8005388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538c:	4770      	bx	lr
 800538e:	bf00      	nop
 8005390:	58000400 	.word	0x58000400

08005394 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005394:	b480      	push	{r7}
 8005396:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8005398:	4b04      	ldr	r3, [pc, #16]	; (80053ac <HAL_PWREx_GetVoltageRange+0x18>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80053a0:	4618      	mov	r0, r3
 80053a2:	46bd      	mov	sp, r7
 80053a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a8:	4770      	bx	lr
 80053aa:	bf00      	nop
 80053ac:	58000400 	.word	0x58000400

080053b0 <LL_RCC_HSE_IsEnabledDiv2>:
{
 80053b0:	b480      	push	{r7}
 80053b2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80053b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80053be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80053c2:	d101      	bne.n	80053c8 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80053c4:	2301      	movs	r3, #1
 80053c6:	e000      	b.n	80053ca <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80053c8:	2300      	movs	r3, #0
}
 80053ca:	4618      	mov	r0, r3
 80053cc:	46bd      	mov	sp, r7
 80053ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d2:	4770      	bx	lr

080053d4 <LL_RCC_HSE_Enable>:
{
 80053d4:	b480      	push	{r7}
 80053d6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80053d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80053e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053e6:	6013      	str	r3, [r2, #0]
}
 80053e8:	bf00      	nop
 80053ea:	46bd      	mov	sp, r7
 80053ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f0:	4770      	bx	lr

080053f2 <LL_RCC_HSE_Disable>:
{
 80053f2:	b480      	push	{r7}
 80053f4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80053f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005400:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005404:	6013      	str	r3, [r2, #0]
}
 8005406:	bf00      	nop
 8005408:	46bd      	mov	sp, r7
 800540a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540e:	4770      	bx	lr

08005410 <LL_RCC_HSE_IsReady>:
{
 8005410:	b480      	push	{r7}
 8005412:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8005414:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800541e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005422:	d101      	bne.n	8005428 <LL_RCC_HSE_IsReady+0x18>
 8005424:	2301      	movs	r3, #1
 8005426:	e000      	b.n	800542a <LL_RCC_HSE_IsReady+0x1a>
 8005428:	2300      	movs	r3, #0
}
 800542a:	4618      	mov	r0, r3
 800542c:	46bd      	mov	sp, r7
 800542e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005432:	4770      	bx	lr

08005434 <LL_RCC_HSI_Enable>:
{
 8005434:	b480      	push	{r7}
 8005436:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8005438:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005442:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005446:	6013      	str	r3, [r2, #0]
}
 8005448:	bf00      	nop
 800544a:	46bd      	mov	sp, r7
 800544c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005450:	4770      	bx	lr

08005452 <LL_RCC_HSI_Disable>:
{
 8005452:	b480      	push	{r7}
 8005454:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8005456:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005460:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005464:	6013      	str	r3, [r2, #0]
}
 8005466:	bf00      	nop
 8005468:	46bd      	mov	sp, r7
 800546a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546e:	4770      	bx	lr

08005470 <LL_RCC_HSI_IsReady>:
{
 8005470:	b480      	push	{r7}
 8005472:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8005474:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800547e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005482:	d101      	bne.n	8005488 <LL_RCC_HSI_IsReady+0x18>
 8005484:	2301      	movs	r3, #1
 8005486:	e000      	b.n	800548a <LL_RCC_HSI_IsReady+0x1a>
 8005488:	2300      	movs	r3, #0
}
 800548a:	4618      	mov	r0, r3
 800548c:	46bd      	mov	sp, r7
 800548e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005492:	4770      	bx	lr

08005494 <LL_RCC_HSI_SetCalibTrimming>:
{
 8005494:	b480      	push	{r7}
 8005496:	b083      	sub	sp, #12
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800549c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054a0:	685b      	ldr	r3, [r3, #4]
 80054a2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	061b      	lsls	r3, r3, #24
 80054aa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80054ae:	4313      	orrs	r3, r2
 80054b0:	604b      	str	r3, [r1, #4]
}
 80054b2:	bf00      	nop
 80054b4:	370c      	adds	r7, #12
 80054b6:	46bd      	mov	sp, r7
 80054b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054bc:	4770      	bx	lr

080054be <LL_RCC_HSI48_Enable>:
{
 80054be:	b480      	push	{r7}
 80054c0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80054c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80054ca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80054ce:	f043 0301 	orr.w	r3, r3, #1
 80054d2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80054d6:	bf00      	nop
 80054d8:	46bd      	mov	sp, r7
 80054da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054de:	4770      	bx	lr

080054e0 <LL_RCC_HSI48_Disable>:
{
 80054e0:	b480      	push	{r7}
 80054e2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80054e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80054ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80054f0:	f023 0301 	bic.w	r3, r3, #1
 80054f4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80054f8:	bf00      	nop
 80054fa:	46bd      	mov	sp, r7
 80054fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005500:	4770      	bx	lr

08005502 <LL_RCC_HSI48_IsReady>:
{
 8005502:	b480      	push	{r7}
 8005504:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8005506:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800550a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800550e:	f003 0302 	and.w	r3, r3, #2
 8005512:	2b02      	cmp	r3, #2
 8005514:	d101      	bne.n	800551a <LL_RCC_HSI48_IsReady+0x18>
 8005516:	2301      	movs	r3, #1
 8005518:	e000      	b.n	800551c <LL_RCC_HSI48_IsReady+0x1a>
 800551a:	2300      	movs	r3, #0
}
 800551c:	4618      	mov	r0, r3
 800551e:	46bd      	mov	sp, r7
 8005520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005524:	4770      	bx	lr

08005526 <LL_RCC_LSE_Enable>:
{
 8005526:	b480      	push	{r7}
 8005528:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800552a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800552e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005532:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005536:	f043 0301 	orr.w	r3, r3, #1
 800553a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800553e:	bf00      	nop
 8005540:	46bd      	mov	sp, r7
 8005542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005546:	4770      	bx	lr

08005548 <LL_RCC_LSE_Disable>:
{
 8005548:	b480      	push	{r7}
 800554a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800554c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005550:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005554:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005558:	f023 0301 	bic.w	r3, r3, #1
 800555c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005560:	bf00      	nop
 8005562:	46bd      	mov	sp, r7
 8005564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005568:	4770      	bx	lr

0800556a <LL_RCC_LSE_EnableBypass>:
{
 800556a:	b480      	push	{r7}
 800556c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800556e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005572:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005576:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800557a:	f043 0304 	orr.w	r3, r3, #4
 800557e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005582:	bf00      	nop
 8005584:	46bd      	mov	sp, r7
 8005586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558a:	4770      	bx	lr

0800558c <LL_RCC_LSE_DisableBypass>:
{
 800558c:	b480      	push	{r7}
 800558e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005590:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005594:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005598:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800559c:	f023 0304 	bic.w	r3, r3, #4
 80055a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80055a4:	bf00      	nop
 80055a6:	46bd      	mov	sp, r7
 80055a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ac:	4770      	bx	lr

080055ae <LL_RCC_LSE_IsReady>:
{
 80055ae:	b480      	push	{r7}
 80055b0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80055b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055ba:	f003 0302 	and.w	r3, r3, #2
 80055be:	2b02      	cmp	r3, #2
 80055c0:	d101      	bne.n	80055c6 <LL_RCC_LSE_IsReady+0x18>
 80055c2:	2301      	movs	r3, #1
 80055c4:	e000      	b.n	80055c8 <LL_RCC_LSE_IsReady+0x1a>
 80055c6:	2300      	movs	r3, #0
}
 80055c8:	4618      	mov	r0, r3
 80055ca:	46bd      	mov	sp, r7
 80055cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d0:	4770      	bx	lr

080055d2 <LL_RCC_LSI1_Enable>:
{
 80055d2:	b480      	push	{r7}
 80055d4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80055d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80055de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80055e2:	f043 0301 	orr.w	r3, r3, #1
 80055e6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80055ea:	bf00      	nop
 80055ec:	46bd      	mov	sp, r7
 80055ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f2:	4770      	bx	lr

080055f4 <LL_RCC_LSI1_Disable>:
{
 80055f4:	b480      	push	{r7}
 80055f6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80055f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005600:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005604:	f023 0301 	bic.w	r3, r3, #1
 8005608:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800560c:	bf00      	nop
 800560e:	46bd      	mov	sp, r7
 8005610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005614:	4770      	bx	lr

08005616 <LL_RCC_LSI1_IsReady>:
{
 8005616:	b480      	push	{r7}
 8005618:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800561a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800561e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005622:	f003 0302 	and.w	r3, r3, #2
 8005626:	2b02      	cmp	r3, #2
 8005628:	d101      	bne.n	800562e <LL_RCC_LSI1_IsReady+0x18>
 800562a:	2301      	movs	r3, #1
 800562c:	e000      	b.n	8005630 <LL_RCC_LSI1_IsReady+0x1a>
 800562e:	2300      	movs	r3, #0
}
 8005630:	4618      	mov	r0, r3
 8005632:	46bd      	mov	sp, r7
 8005634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005638:	4770      	bx	lr

0800563a <LL_RCC_LSI2_Enable>:
{
 800563a:	b480      	push	{r7}
 800563c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800563e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005642:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005646:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800564a:	f043 0304 	orr.w	r3, r3, #4
 800564e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8005652:	bf00      	nop
 8005654:	46bd      	mov	sp, r7
 8005656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565a:	4770      	bx	lr

0800565c <LL_RCC_LSI2_Disable>:
{
 800565c:	b480      	push	{r7}
 800565e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8005660:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005664:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005668:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800566c:	f023 0304 	bic.w	r3, r3, #4
 8005670:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8005674:	bf00      	nop
 8005676:	46bd      	mov	sp, r7
 8005678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567c:	4770      	bx	lr

0800567e <LL_RCC_LSI2_IsReady>:
{
 800567e:	b480      	push	{r7}
 8005680:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8005682:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005686:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800568a:	f003 0308 	and.w	r3, r3, #8
 800568e:	2b08      	cmp	r3, #8
 8005690:	d101      	bne.n	8005696 <LL_RCC_LSI2_IsReady+0x18>
 8005692:	2301      	movs	r3, #1
 8005694:	e000      	b.n	8005698 <LL_RCC_LSI2_IsReady+0x1a>
 8005696:	2300      	movs	r3, #0
}
 8005698:	4618      	mov	r0, r3
 800569a:	46bd      	mov	sp, r7
 800569c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a0:	4770      	bx	lr

080056a2 <LL_RCC_LSI2_SetTrimming>:
{
 80056a2:	b480      	push	{r7}
 80056a4:	b083      	sub	sp, #12
 80056a6:	af00      	add	r7, sp, #0
 80056a8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 80056aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80056b2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	021b      	lsls	r3, r3, #8
 80056ba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80056be:	4313      	orrs	r3, r2
 80056c0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80056c4:	bf00      	nop
 80056c6:	370c      	adds	r7, #12
 80056c8:	46bd      	mov	sp, r7
 80056ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ce:	4770      	bx	lr

080056d0 <LL_RCC_MSI_Enable>:
{
 80056d0:	b480      	push	{r7}
 80056d2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80056d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80056de:	f043 0301 	orr.w	r3, r3, #1
 80056e2:	6013      	str	r3, [r2, #0]
}
 80056e4:	bf00      	nop
 80056e6:	46bd      	mov	sp, r7
 80056e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ec:	4770      	bx	lr

080056ee <LL_RCC_MSI_Disable>:
{
 80056ee:	b480      	push	{r7}
 80056f0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80056f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80056fc:	f023 0301 	bic.w	r3, r3, #1
 8005700:	6013      	str	r3, [r2, #0]
}
 8005702:	bf00      	nop
 8005704:	46bd      	mov	sp, r7
 8005706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570a:	4770      	bx	lr

0800570c <LL_RCC_MSI_IsReady>:
{
 800570c:	b480      	push	{r7}
 800570e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8005710:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f003 0302 	and.w	r3, r3, #2
 800571a:	2b02      	cmp	r3, #2
 800571c:	d101      	bne.n	8005722 <LL_RCC_MSI_IsReady+0x16>
 800571e:	2301      	movs	r3, #1
 8005720:	e000      	b.n	8005724 <LL_RCC_MSI_IsReady+0x18>
 8005722:	2300      	movs	r3, #0
}
 8005724:	4618      	mov	r0, r3
 8005726:	46bd      	mov	sp, r7
 8005728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572c:	4770      	bx	lr

0800572e <LL_RCC_MSI_SetRange>:
{
 800572e:	b480      	push	{r7}
 8005730:	b083      	sub	sp, #12
 8005732:	af00      	add	r7, sp, #0
 8005734:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8005736:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005740:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	4313      	orrs	r3, r2
 8005748:	600b      	str	r3, [r1, #0]
}
 800574a:	bf00      	nop
 800574c:	370c      	adds	r7, #12
 800574e:	46bd      	mov	sp, r7
 8005750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005754:	4770      	bx	lr

08005756 <LL_RCC_MSI_GetRange>:
{
 8005756:	b480      	push	{r7}
 8005758:	b083      	sub	sp, #12
 800575a:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 800575c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005766:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2bb0      	cmp	r3, #176	; 0xb0
 800576c:	d901      	bls.n	8005772 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 800576e:	23b0      	movs	r3, #176	; 0xb0
 8005770:	607b      	str	r3, [r7, #4]
  return msiRange;
 8005772:	687b      	ldr	r3, [r7, #4]
}
 8005774:	4618      	mov	r0, r3
 8005776:	370c      	adds	r7, #12
 8005778:	46bd      	mov	sp, r7
 800577a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577e:	4770      	bx	lr

08005780 <LL_RCC_MSI_SetCalibTrimming>:
{
 8005780:	b480      	push	{r7}
 8005782:	b083      	sub	sp, #12
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8005788:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800578c:	685b      	ldr	r3, [r3, #4]
 800578e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	021b      	lsls	r3, r3, #8
 8005796:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800579a:	4313      	orrs	r3, r2
 800579c:	604b      	str	r3, [r1, #4]
}
 800579e:	bf00      	nop
 80057a0:	370c      	adds	r7, #12
 80057a2:	46bd      	mov	sp, r7
 80057a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a8:	4770      	bx	lr

080057aa <LL_RCC_SetSysClkSource>:
{
 80057aa:	b480      	push	{r7}
 80057ac:	b083      	sub	sp, #12
 80057ae:	af00      	add	r7, sp, #0
 80057b0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80057b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057b6:	689b      	ldr	r3, [r3, #8]
 80057b8:	f023 0203 	bic.w	r2, r3, #3
 80057bc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	4313      	orrs	r3, r2
 80057c4:	608b      	str	r3, [r1, #8]
}
 80057c6:	bf00      	nop
 80057c8:	370c      	adds	r7, #12
 80057ca:	46bd      	mov	sp, r7
 80057cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d0:	4770      	bx	lr

080057d2 <LL_RCC_GetSysClkSource>:
{
 80057d2:	b480      	push	{r7}
 80057d4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80057d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057da:	689b      	ldr	r3, [r3, #8]
 80057dc:	f003 030c 	and.w	r3, r3, #12
}
 80057e0:	4618      	mov	r0, r3
 80057e2:	46bd      	mov	sp, r7
 80057e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e8:	4770      	bx	lr

080057ea <LL_RCC_SetAHBPrescaler>:
{
 80057ea:	b480      	push	{r7}
 80057ec:	b083      	sub	sp, #12
 80057ee:	af00      	add	r7, sp, #0
 80057f0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80057f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057f6:	689b      	ldr	r3, [r3, #8]
 80057f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80057fc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	4313      	orrs	r3, r2
 8005804:	608b      	str	r3, [r1, #8]
}
 8005806:	bf00      	nop
 8005808:	370c      	adds	r7, #12
 800580a:	46bd      	mov	sp, r7
 800580c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005810:	4770      	bx	lr

08005812 <LL_C2_RCC_SetAHBPrescaler>:
{
 8005812:	b480      	push	{r7}
 8005814:	b083      	sub	sp, #12
 8005816:	af00      	add	r7, sp, #0
 8005818:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800581a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800581e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005822:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005826:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	4313      	orrs	r3, r2
 800582e:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8005832:	bf00      	nop
 8005834:	370c      	adds	r7, #12
 8005836:	46bd      	mov	sp, r7
 8005838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583c:	4770      	bx	lr

0800583e <LL_RCC_SetAHB4Prescaler>:
{
 800583e:	b480      	push	{r7}
 8005840:	b083      	sub	sp, #12
 8005842:	af00      	add	r7, sp, #0
 8005844:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8005846:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800584a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800584e:	f023 020f 	bic.w	r2, r3, #15
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	091b      	lsrs	r3, r3, #4
 8005856:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800585a:	4313      	orrs	r3, r2
 800585c:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8005860:	bf00      	nop
 8005862:	370c      	adds	r7, #12
 8005864:	46bd      	mov	sp, r7
 8005866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586a:	4770      	bx	lr

0800586c <LL_RCC_SetAPB1Prescaler>:
{
 800586c:	b480      	push	{r7}
 800586e:	b083      	sub	sp, #12
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8005874:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005878:	689b      	ldr	r3, [r3, #8]
 800587a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800587e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	4313      	orrs	r3, r2
 8005886:	608b      	str	r3, [r1, #8]
}
 8005888:	bf00      	nop
 800588a:	370c      	adds	r7, #12
 800588c:	46bd      	mov	sp, r7
 800588e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005892:	4770      	bx	lr

08005894 <LL_RCC_SetAPB2Prescaler>:
{
 8005894:	b480      	push	{r7}
 8005896:	b083      	sub	sp, #12
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800589c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058a0:	689b      	ldr	r3, [r3, #8]
 80058a2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80058a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	4313      	orrs	r3, r2
 80058ae:	608b      	str	r3, [r1, #8]
}
 80058b0:	bf00      	nop
 80058b2:	370c      	adds	r7, #12
 80058b4:	46bd      	mov	sp, r7
 80058b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ba:	4770      	bx	lr

080058bc <LL_RCC_GetAHBPrescaler>:
{
 80058bc:	b480      	push	{r7}
 80058be:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80058c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058c4:	689b      	ldr	r3, [r3, #8]
 80058c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80058ca:	4618      	mov	r0, r3
 80058cc:	46bd      	mov	sp, r7
 80058ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d2:	4770      	bx	lr

080058d4 <LL_RCC_GetAHB4Prescaler>:
{
 80058d4:	b480      	push	{r7}
 80058d6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80058d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058dc:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80058e0:	011b      	lsls	r3, r3, #4
 80058e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80058e6:	4618      	mov	r0, r3
 80058e8:	46bd      	mov	sp, r7
 80058ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ee:	4770      	bx	lr

080058f0 <LL_RCC_GetAPB1Prescaler>:
{
 80058f0:	b480      	push	{r7}
 80058f2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80058f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058f8:	689b      	ldr	r3, [r3, #8]
 80058fa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80058fe:	4618      	mov	r0, r3
 8005900:	46bd      	mov	sp, r7
 8005902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005906:	4770      	bx	lr

08005908 <LL_RCC_GetAPB2Prescaler>:
{
 8005908:	b480      	push	{r7}
 800590a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800590c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005910:	689b      	ldr	r3, [r3, #8]
 8005912:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8005916:	4618      	mov	r0, r3
 8005918:	46bd      	mov	sp, r7
 800591a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591e:	4770      	bx	lr

08005920 <LL_RCC_PLL_Enable>:
{
 8005920:	b480      	push	{r7}
 8005922:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8005924:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800592e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005932:	6013      	str	r3, [r2, #0]
}
 8005934:	bf00      	nop
 8005936:	46bd      	mov	sp, r7
 8005938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593c:	4770      	bx	lr

0800593e <LL_RCC_PLL_Disable>:
{
 800593e:	b480      	push	{r7}
 8005940:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8005942:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800594c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005950:	6013      	str	r3, [r2, #0]
}
 8005952:	bf00      	nop
 8005954:	46bd      	mov	sp, r7
 8005956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595a:	4770      	bx	lr

0800595c <LL_RCC_PLL_IsReady>:
{
 800595c:	b480      	push	{r7}
 800595e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8005960:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800596a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800596e:	d101      	bne.n	8005974 <LL_RCC_PLL_IsReady+0x18>
 8005970:	2301      	movs	r3, #1
 8005972:	e000      	b.n	8005976 <LL_RCC_PLL_IsReady+0x1a>
 8005974:	2300      	movs	r3, #0
}
 8005976:	4618      	mov	r0, r3
 8005978:	46bd      	mov	sp, r7
 800597a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597e:	4770      	bx	lr

08005980 <LL_RCC_PLL_GetN>:
{
 8005980:	b480      	push	{r7}
 8005982:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8005984:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005988:	68db      	ldr	r3, [r3, #12]
 800598a:	0a1b      	lsrs	r3, r3, #8
 800598c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8005990:	4618      	mov	r0, r3
 8005992:	46bd      	mov	sp, r7
 8005994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005998:	4770      	bx	lr

0800599a <LL_RCC_PLL_GetR>:
{
 800599a:	b480      	push	{r7}
 800599c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800599e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059a2:	68db      	ldr	r3, [r3, #12]
 80059a4:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 80059a8:	4618      	mov	r0, r3
 80059aa:	46bd      	mov	sp, r7
 80059ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b0:	4770      	bx	lr

080059b2 <LL_RCC_PLL_GetDivider>:
{
 80059b2:	b480      	push	{r7}
 80059b4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80059b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059ba:	68db      	ldr	r3, [r3, #12]
 80059bc:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 80059c0:	4618      	mov	r0, r3
 80059c2:	46bd      	mov	sp, r7
 80059c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c8:	4770      	bx	lr

080059ca <LL_RCC_PLL_GetMainSource>:
{
 80059ca:	b480      	push	{r7}
 80059cc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80059ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059d2:	68db      	ldr	r3, [r3, #12]
 80059d4:	f003 0303 	and.w	r3, r3, #3
}
 80059d8:	4618      	mov	r0, r3
 80059da:	46bd      	mov	sp, r7
 80059dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e0:	4770      	bx	lr

080059e2 <LL_RCC_IsActiveFlag_HPRE>:
{
 80059e2:	b480      	push	{r7}
 80059e4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80059e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059ea:	689b      	ldr	r3, [r3, #8]
 80059ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80059f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059f4:	d101      	bne.n	80059fa <LL_RCC_IsActiveFlag_HPRE+0x18>
 80059f6:	2301      	movs	r3, #1
 80059f8:	e000      	b.n	80059fc <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80059fa:	2300      	movs	r3, #0
}
 80059fc:	4618      	mov	r0, r3
 80059fe:	46bd      	mov	sp, r7
 8005a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a04:	4770      	bx	lr

08005a06 <LL_RCC_IsActiveFlag_C2HPRE>:
{
 8005a06:	b480      	push	{r7}
 8005a08:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8005a0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a0e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005a12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a16:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005a1a:	d101      	bne.n	8005a20 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8005a1c:	2301      	movs	r3, #1
 8005a1e:	e000      	b.n	8005a22 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8005a20:	2300      	movs	r3, #0
}
 8005a22:	4618      	mov	r0, r3
 8005a24:	46bd      	mov	sp, r7
 8005a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2a:	4770      	bx	lr

08005a2c <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8005a30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a34:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005a38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a40:	d101      	bne.n	8005a46 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8005a42:	2301      	movs	r3, #1
 8005a44:	e000      	b.n	8005a48 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8005a46:	2300      	movs	r3, #0
}
 8005a48:	4618      	mov	r0, r3
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a50:	4770      	bx	lr

08005a52 <LL_RCC_IsActiveFlag_PPRE1>:
{
 8005a52:	b480      	push	{r7}
 8005a54:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8005a56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a5a:	689b      	ldr	r3, [r3, #8]
 8005a5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a60:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005a64:	d101      	bne.n	8005a6a <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8005a66:	2301      	movs	r3, #1
 8005a68:	e000      	b.n	8005a6c <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8005a6a:	2300      	movs	r3, #0
}
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a74:	4770      	bx	lr

08005a76 <LL_RCC_IsActiveFlag_PPRE2>:
{
 8005a76:	b480      	push	{r7}
 8005a78:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8005a7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a7e:	689b      	ldr	r3, [r3, #8]
 8005a80:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005a84:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005a88:	d101      	bne.n	8005a8e <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	e000      	b.n	8005a90 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8005a8e:	2300      	movs	r3, #0
}
 8005a90:	4618      	mov	r0, r3
 8005a92:	46bd      	mov	sp, r7
 8005a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a98:	4770      	bx	lr
	...

08005a9c <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005a9c:	b590      	push	{r4, r7, lr}
 8005a9e:	b08d      	sub	sp, #52	; 0x34
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d101      	bne.n	8005aae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005aaa:	2301      	movs	r3, #1
 8005aac:	e363      	b.n	8006176 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f003 0320 	and.w	r3, r3, #32
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	f000 808d 	beq.w	8005bd6 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005abc:	f7ff fe89 	bl	80057d2 <LL_RCC_GetSysClkSource>
 8005ac0:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005ac2:	f7ff ff82 	bl	80059ca <LL_RCC_PLL_GetMainSource>
 8005ac6:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005ac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d005      	beq.n	8005ada <HAL_RCC_OscConfig+0x3e>
 8005ace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ad0:	2b0c      	cmp	r3, #12
 8005ad2:	d147      	bne.n	8005b64 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8005ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ad6:	2b01      	cmp	r3, #1
 8005ad8:	d144      	bne.n	8005b64 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	69db      	ldr	r3, [r3, #28]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d101      	bne.n	8005ae6 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	e347      	b.n	8006176 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8005aea:	f7ff fe34 	bl	8005756 <LL_RCC_MSI_GetRange>
 8005aee:	4603      	mov	r3, r0
 8005af0:	429c      	cmp	r4, r3
 8005af2:	d914      	bls.n	8005b1e <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af8:	4618      	mov	r0, r3
 8005afa:	f000 fd2f 	bl	800655c <RCC_SetFlashLatencyFromMSIRange>
 8005afe:	4603      	mov	r3, r0
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d001      	beq.n	8005b08 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8005b04:	2301      	movs	r3, #1
 8005b06:	e336      	b.n	8006176 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	f7ff fe0e 	bl	800572e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6a1b      	ldr	r3, [r3, #32]
 8005b16:	4618      	mov	r0, r3
 8005b18:	f7ff fe32 	bl	8005780 <LL_RCC_MSI_SetCalibTrimming>
 8005b1c:	e013      	b.n	8005b46 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b22:	4618      	mov	r0, r3
 8005b24:	f7ff fe03 	bl	800572e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6a1b      	ldr	r3, [r3, #32]
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	f7ff fe27 	bl	8005780 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b36:	4618      	mov	r0, r3
 8005b38:	f000 fd10 	bl	800655c <RCC_SetFlashLatencyFromMSIRange>
 8005b3c:	4603      	mov	r3, r0
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d001      	beq.n	8005b46 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8005b42:	2301      	movs	r3, #1
 8005b44:	e317      	b.n	8006176 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005b46:	f000 fcc9 	bl	80064dc <HAL_RCC_GetHCLKFreq>
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	4aa4      	ldr	r2, [pc, #656]	; (8005de0 <HAL_RCC_OscConfig+0x344>)
 8005b4e:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005b50:	4ba4      	ldr	r3, [pc, #656]	; (8005de4 <HAL_RCC_OscConfig+0x348>)
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4618      	mov	r0, r3
 8005b56:	f7fd fb45 	bl	80031e4 <HAL_InitTick>
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d039      	beq.n	8005bd4 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8005b60:	2301      	movs	r3, #1
 8005b62:	e308      	b.n	8006176 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	69db      	ldr	r3, [r3, #28]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d01e      	beq.n	8005baa <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005b6c:	f7ff fdb0 	bl	80056d0 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005b70:	f7fd fb86 	bl	8003280 <HAL_GetTick>
 8005b74:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8005b76:	e008      	b.n	8005b8a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005b78:	f7fd fb82 	bl	8003280 <HAL_GetTick>
 8005b7c:	4602      	mov	r2, r0
 8005b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b80:	1ad3      	subs	r3, r2, r3
 8005b82:	2b02      	cmp	r3, #2
 8005b84:	d901      	bls.n	8005b8a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8005b86:	2303      	movs	r3, #3
 8005b88:	e2f5      	b.n	8006176 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8005b8a:	f7ff fdbf 	bl	800570c <LL_RCC_MSI_IsReady>
 8005b8e:	4603      	mov	r3, r0
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d0f1      	beq.n	8005b78 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b98:	4618      	mov	r0, r3
 8005b9a:	f7ff fdc8 	bl	800572e <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6a1b      	ldr	r3, [r3, #32]
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	f7ff fdec 	bl	8005780 <LL_RCC_MSI_SetCalibTrimming>
 8005ba8:	e015      	b.n	8005bd6 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005baa:	f7ff fda0 	bl	80056ee <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005bae:	f7fd fb67 	bl	8003280 <HAL_GetTick>
 8005bb2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8005bb4:	e008      	b.n	8005bc8 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005bb6:	f7fd fb63 	bl	8003280 <HAL_GetTick>
 8005bba:	4602      	mov	r2, r0
 8005bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bbe:	1ad3      	subs	r3, r2, r3
 8005bc0:	2b02      	cmp	r3, #2
 8005bc2:	d901      	bls.n	8005bc8 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8005bc4:	2303      	movs	r3, #3
 8005bc6:	e2d6      	b.n	8006176 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8005bc8:	f7ff fda0 	bl	800570c <LL_RCC_MSI_IsReady>
 8005bcc:	4603      	mov	r3, r0
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d1f1      	bne.n	8005bb6 <HAL_RCC_OscConfig+0x11a>
 8005bd2:	e000      	b.n	8005bd6 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8005bd4:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f003 0301 	and.w	r3, r3, #1
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d047      	beq.n	8005c72 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005be2:	f7ff fdf6 	bl	80057d2 <LL_RCC_GetSysClkSource>
 8005be6:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005be8:	f7ff feef 	bl	80059ca <LL_RCC_PLL_GetMainSource>
 8005bec:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8005bee:	6a3b      	ldr	r3, [r7, #32]
 8005bf0:	2b08      	cmp	r3, #8
 8005bf2:	d005      	beq.n	8005c00 <HAL_RCC_OscConfig+0x164>
 8005bf4:	6a3b      	ldr	r3, [r7, #32]
 8005bf6:	2b0c      	cmp	r3, #12
 8005bf8:	d108      	bne.n	8005c0c <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8005bfa:	69fb      	ldr	r3, [r7, #28]
 8005bfc:	2b03      	cmp	r3, #3
 8005bfe:	d105      	bne.n	8005c0c <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	685b      	ldr	r3, [r3, #4]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d134      	bne.n	8005c72 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8005c08:	2301      	movs	r3, #1
 8005c0a:	e2b4      	b.n	8006176 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	685b      	ldr	r3, [r3, #4]
 8005c10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c14:	d102      	bne.n	8005c1c <HAL_RCC_OscConfig+0x180>
 8005c16:	f7ff fbdd 	bl	80053d4 <LL_RCC_HSE_Enable>
 8005c1a:	e001      	b.n	8005c20 <HAL_RCC_OscConfig+0x184>
 8005c1c:	f7ff fbe9 	bl	80053f2 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	685b      	ldr	r3, [r3, #4]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d012      	beq.n	8005c4e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c28:	f7fd fb2a 	bl	8003280 <HAL_GetTick>
 8005c2c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8005c2e:	e008      	b.n	8005c42 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005c30:	f7fd fb26 	bl	8003280 <HAL_GetTick>
 8005c34:	4602      	mov	r2, r0
 8005c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c38:	1ad3      	subs	r3, r2, r3
 8005c3a:	2b64      	cmp	r3, #100	; 0x64
 8005c3c:	d901      	bls.n	8005c42 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8005c3e:	2303      	movs	r3, #3
 8005c40:	e299      	b.n	8006176 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8005c42:	f7ff fbe5 	bl	8005410 <LL_RCC_HSE_IsReady>
 8005c46:	4603      	mov	r3, r0
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d0f1      	beq.n	8005c30 <HAL_RCC_OscConfig+0x194>
 8005c4c:	e011      	b.n	8005c72 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c4e:	f7fd fb17 	bl	8003280 <HAL_GetTick>
 8005c52:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8005c54:	e008      	b.n	8005c68 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005c56:	f7fd fb13 	bl	8003280 <HAL_GetTick>
 8005c5a:	4602      	mov	r2, r0
 8005c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c5e:	1ad3      	subs	r3, r2, r3
 8005c60:	2b64      	cmp	r3, #100	; 0x64
 8005c62:	d901      	bls.n	8005c68 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8005c64:	2303      	movs	r3, #3
 8005c66:	e286      	b.n	8006176 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8005c68:	f7ff fbd2 	bl	8005410 <LL_RCC_HSE_IsReady>
 8005c6c:	4603      	mov	r3, r0
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d1f1      	bne.n	8005c56 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f003 0302 	and.w	r3, r3, #2
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d04c      	beq.n	8005d18 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005c7e:	f7ff fda8 	bl	80057d2 <LL_RCC_GetSysClkSource>
 8005c82:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005c84:	f7ff fea1 	bl	80059ca <LL_RCC_PLL_GetMainSource>
 8005c88:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8005c8a:	69bb      	ldr	r3, [r7, #24]
 8005c8c:	2b04      	cmp	r3, #4
 8005c8e:	d005      	beq.n	8005c9c <HAL_RCC_OscConfig+0x200>
 8005c90:	69bb      	ldr	r3, [r7, #24]
 8005c92:	2b0c      	cmp	r3, #12
 8005c94:	d10e      	bne.n	8005cb4 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8005c96:	697b      	ldr	r3, [r7, #20]
 8005c98:	2b02      	cmp	r3, #2
 8005c9a:	d10b      	bne.n	8005cb4 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	68db      	ldr	r3, [r3, #12]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d101      	bne.n	8005ca8 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8005ca4:	2301      	movs	r3, #1
 8005ca6:	e266      	b.n	8006176 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	691b      	ldr	r3, [r3, #16]
 8005cac:	4618      	mov	r0, r3
 8005cae:	f7ff fbf1 	bl	8005494 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8005cb2:	e031      	b.n	8005d18 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	68db      	ldr	r3, [r3, #12]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d019      	beq.n	8005cf0 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005cbc:	f7ff fbba 	bl	8005434 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cc0:	f7fd fade 	bl	8003280 <HAL_GetTick>
 8005cc4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8005cc6:	e008      	b.n	8005cda <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005cc8:	f7fd fada 	bl	8003280 <HAL_GetTick>
 8005ccc:	4602      	mov	r2, r0
 8005cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cd0:	1ad3      	subs	r3, r2, r3
 8005cd2:	2b02      	cmp	r3, #2
 8005cd4:	d901      	bls.n	8005cda <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8005cd6:	2303      	movs	r3, #3
 8005cd8:	e24d      	b.n	8006176 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8005cda:	f7ff fbc9 	bl	8005470 <LL_RCC_HSI_IsReady>
 8005cde:	4603      	mov	r3, r0
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d0f1      	beq.n	8005cc8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	691b      	ldr	r3, [r3, #16]
 8005ce8:	4618      	mov	r0, r3
 8005cea:	f7ff fbd3 	bl	8005494 <LL_RCC_HSI_SetCalibTrimming>
 8005cee:	e013      	b.n	8005d18 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005cf0:	f7ff fbaf 	bl	8005452 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cf4:	f7fd fac4 	bl	8003280 <HAL_GetTick>
 8005cf8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8005cfa:	e008      	b.n	8005d0e <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005cfc:	f7fd fac0 	bl	8003280 <HAL_GetTick>
 8005d00:	4602      	mov	r2, r0
 8005d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d04:	1ad3      	subs	r3, r2, r3
 8005d06:	2b02      	cmp	r3, #2
 8005d08:	d901      	bls.n	8005d0e <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8005d0a:	2303      	movs	r3, #3
 8005d0c:	e233      	b.n	8006176 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8005d0e:	f7ff fbaf 	bl	8005470 <LL_RCC_HSI_IsReady>
 8005d12:	4603      	mov	r3, r0
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d1f1      	bne.n	8005cfc <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f003 0308 	and.w	r3, r3, #8
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d106      	bne.n	8005d32 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	f000 80a3 	beq.w	8005e78 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	695b      	ldr	r3, [r3, #20]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d076      	beq.n	8005e28 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f003 0310 	and.w	r3, r3, #16
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d046      	beq.n	8005dd4 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8005d46:	f7ff fc66 	bl	8005616 <LL_RCC_LSI1_IsReady>
 8005d4a:	4603      	mov	r3, r0
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d113      	bne.n	8005d78 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8005d50:	f7ff fc3f 	bl	80055d2 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005d54:	f7fd fa94 	bl	8003280 <HAL_GetTick>
 8005d58:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8005d5a:	e008      	b.n	8005d6e <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005d5c:	f7fd fa90 	bl	8003280 <HAL_GetTick>
 8005d60:	4602      	mov	r2, r0
 8005d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d64:	1ad3      	subs	r3, r2, r3
 8005d66:	2b02      	cmp	r3, #2
 8005d68:	d901      	bls.n	8005d6e <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8005d6a:	2303      	movs	r3, #3
 8005d6c:	e203      	b.n	8006176 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8005d6e:	f7ff fc52 	bl	8005616 <LL_RCC_LSI1_IsReady>
 8005d72:	4603      	mov	r3, r0
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d0f1      	beq.n	8005d5c <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8005d78:	f7ff fc5f 	bl	800563a <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d7c:	f7fd fa80 	bl	8003280 <HAL_GetTick>
 8005d80:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8005d82:	e008      	b.n	8005d96 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8005d84:	f7fd fa7c 	bl	8003280 <HAL_GetTick>
 8005d88:	4602      	mov	r2, r0
 8005d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d8c:	1ad3      	subs	r3, r2, r3
 8005d8e:	2b03      	cmp	r3, #3
 8005d90:	d901      	bls.n	8005d96 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8005d92:	2303      	movs	r3, #3
 8005d94:	e1ef      	b.n	8006176 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8005d96:	f7ff fc72 	bl	800567e <LL_RCC_LSI2_IsReady>
 8005d9a:	4603      	mov	r3, r0
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d0f1      	beq.n	8005d84 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	699b      	ldr	r3, [r3, #24]
 8005da4:	4618      	mov	r0, r3
 8005da6:	f7ff fc7c 	bl	80056a2 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8005daa:	f7ff fc23 	bl	80055f4 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dae:	f7fd fa67 	bl	8003280 <HAL_GetTick>
 8005db2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8005db4:	e008      	b.n	8005dc8 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005db6:	f7fd fa63 	bl	8003280 <HAL_GetTick>
 8005dba:	4602      	mov	r2, r0
 8005dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dbe:	1ad3      	subs	r3, r2, r3
 8005dc0:	2b02      	cmp	r3, #2
 8005dc2:	d901      	bls.n	8005dc8 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8005dc4:	2303      	movs	r3, #3
 8005dc6:	e1d6      	b.n	8006176 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8005dc8:	f7ff fc25 	bl	8005616 <LL_RCC_LSI1_IsReady>
 8005dcc:	4603      	mov	r3, r0
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d1f1      	bne.n	8005db6 <HAL_RCC_OscConfig+0x31a>
 8005dd2:	e051      	b.n	8005e78 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8005dd4:	f7ff fbfd 	bl	80055d2 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dd8:	f7fd fa52 	bl	8003280 <HAL_GetTick>
 8005ddc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8005dde:	e00c      	b.n	8005dfa <HAL_RCC_OscConfig+0x35e>
 8005de0:	20000008 	.word	0x20000008
 8005de4:	2000000c 	.word	0x2000000c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005de8:	f7fd fa4a 	bl	8003280 <HAL_GetTick>
 8005dec:	4602      	mov	r2, r0
 8005dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005df0:	1ad3      	subs	r3, r2, r3
 8005df2:	2b02      	cmp	r3, #2
 8005df4:	d901      	bls.n	8005dfa <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8005df6:	2303      	movs	r3, #3
 8005df8:	e1bd      	b.n	8006176 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8005dfa:	f7ff fc0c 	bl	8005616 <LL_RCC_LSI1_IsReady>
 8005dfe:	4603      	mov	r3, r0
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d0f1      	beq.n	8005de8 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8005e04:	f7ff fc2a 	bl	800565c <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8005e08:	e008      	b.n	8005e1c <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8005e0a:	f7fd fa39 	bl	8003280 <HAL_GetTick>
 8005e0e:	4602      	mov	r2, r0
 8005e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e12:	1ad3      	subs	r3, r2, r3
 8005e14:	2b03      	cmp	r3, #3
 8005e16:	d901      	bls.n	8005e1c <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8005e18:	2303      	movs	r3, #3
 8005e1a:	e1ac      	b.n	8006176 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8005e1c:	f7ff fc2f 	bl	800567e <LL_RCC_LSI2_IsReady>
 8005e20:	4603      	mov	r3, r0
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d1f1      	bne.n	8005e0a <HAL_RCC_OscConfig+0x36e>
 8005e26:	e027      	b.n	8005e78 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8005e28:	f7ff fc18 	bl	800565c <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e2c:	f7fd fa28 	bl	8003280 <HAL_GetTick>
 8005e30:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8005e32:	e008      	b.n	8005e46 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8005e34:	f7fd fa24 	bl	8003280 <HAL_GetTick>
 8005e38:	4602      	mov	r2, r0
 8005e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e3c:	1ad3      	subs	r3, r2, r3
 8005e3e:	2b03      	cmp	r3, #3
 8005e40:	d901      	bls.n	8005e46 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8005e42:	2303      	movs	r3, #3
 8005e44:	e197      	b.n	8006176 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8005e46:	f7ff fc1a 	bl	800567e <LL_RCC_LSI2_IsReady>
 8005e4a:	4603      	mov	r3, r0
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d1f1      	bne.n	8005e34 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8005e50:	f7ff fbd0 	bl	80055f4 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e54:	f7fd fa14 	bl	8003280 <HAL_GetTick>
 8005e58:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8005e5a:	e008      	b.n	8005e6e <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005e5c:	f7fd fa10 	bl	8003280 <HAL_GetTick>
 8005e60:	4602      	mov	r2, r0
 8005e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e64:	1ad3      	subs	r3, r2, r3
 8005e66:	2b02      	cmp	r3, #2
 8005e68:	d901      	bls.n	8005e6e <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8005e6a:	2303      	movs	r3, #3
 8005e6c:	e183      	b.n	8006176 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8005e6e:	f7ff fbd2 	bl	8005616 <LL_RCC_LSI1_IsReady>
 8005e72:	4603      	mov	r3, r0
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d1f1      	bne.n	8005e5c <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f003 0304 	and.w	r3, r3, #4
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d05b      	beq.n	8005f3c <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005e84:	4ba7      	ldr	r3, [pc, #668]	; (8006124 <HAL_RCC_OscConfig+0x688>)
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d114      	bne.n	8005eba <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8005e90:	f7ff fa70 	bl	8005374 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005e94:	f7fd f9f4 	bl	8003280 <HAL_GetTick>
 8005e98:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005e9a:	e008      	b.n	8005eae <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e9c:	f7fd f9f0 	bl	8003280 <HAL_GetTick>
 8005ea0:	4602      	mov	r2, r0
 8005ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ea4:	1ad3      	subs	r3, r2, r3
 8005ea6:	2b02      	cmp	r3, #2
 8005ea8:	d901      	bls.n	8005eae <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8005eaa:	2303      	movs	r3, #3
 8005eac:	e163      	b.n	8006176 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005eae:	4b9d      	ldr	r3, [pc, #628]	; (8006124 <HAL_RCC_OscConfig+0x688>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d0f0      	beq.n	8005e9c <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	689b      	ldr	r3, [r3, #8]
 8005ebe:	2b01      	cmp	r3, #1
 8005ec0:	d102      	bne.n	8005ec8 <HAL_RCC_OscConfig+0x42c>
 8005ec2:	f7ff fb30 	bl	8005526 <LL_RCC_LSE_Enable>
 8005ec6:	e00c      	b.n	8005ee2 <HAL_RCC_OscConfig+0x446>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	689b      	ldr	r3, [r3, #8]
 8005ecc:	2b05      	cmp	r3, #5
 8005ece:	d104      	bne.n	8005eda <HAL_RCC_OscConfig+0x43e>
 8005ed0:	f7ff fb4b 	bl	800556a <LL_RCC_LSE_EnableBypass>
 8005ed4:	f7ff fb27 	bl	8005526 <LL_RCC_LSE_Enable>
 8005ed8:	e003      	b.n	8005ee2 <HAL_RCC_OscConfig+0x446>
 8005eda:	f7ff fb35 	bl	8005548 <LL_RCC_LSE_Disable>
 8005ede:	f7ff fb55 	bl	800558c <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	689b      	ldr	r3, [r3, #8]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d014      	beq.n	8005f14 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005eea:	f7fd f9c9 	bl	8003280 <HAL_GetTick>
 8005eee:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8005ef0:	e00a      	b.n	8005f08 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ef2:	f7fd f9c5 	bl	8003280 <HAL_GetTick>
 8005ef6:	4602      	mov	r2, r0
 8005ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005efa:	1ad3      	subs	r3, r2, r3
 8005efc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d901      	bls.n	8005f08 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8005f04:	2303      	movs	r3, #3
 8005f06:	e136      	b.n	8006176 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8005f08:	f7ff fb51 	bl	80055ae <LL_RCC_LSE_IsReady>
 8005f0c:	4603      	mov	r3, r0
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d0ef      	beq.n	8005ef2 <HAL_RCC_OscConfig+0x456>
 8005f12:	e013      	b.n	8005f3c <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f14:	f7fd f9b4 	bl	8003280 <HAL_GetTick>
 8005f18:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8005f1a:	e00a      	b.n	8005f32 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f1c:	f7fd f9b0 	bl	8003280 <HAL_GetTick>
 8005f20:	4602      	mov	r2, r0
 8005f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f24:	1ad3      	subs	r3, r2, r3
 8005f26:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d901      	bls.n	8005f32 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8005f2e:	2303      	movs	r3, #3
 8005f30:	e121      	b.n	8006176 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8005f32:	f7ff fb3c 	bl	80055ae <LL_RCC_LSE_IsReady>
 8005f36:	4603      	mov	r3, r0
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d1ef      	bne.n	8005f1c <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d02c      	beq.n	8005fa2 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d014      	beq.n	8005f7a <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005f50:	f7ff fab5 	bl	80054be <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f54:	f7fd f994 	bl	8003280 <HAL_GetTick>
 8005f58:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8005f5a:	e008      	b.n	8005f6e <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005f5c:	f7fd f990 	bl	8003280 <HAL_GetTick>
 8005f60:	4602      	mov	r2, r0
 8005f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f64:	1ad3      	subs	r3, r2, r3
 8005f66:	2b02      	cmp	r3, #2
 8005f68:	d901      	bls.n	8005f6e <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8005f6a:	2303      	movs	r3, #3
 8005f6c:	e103      	b.n	8006176 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8005f6e:	f7ff fac8 	bl	8005502 <LL_RCC_HSI48_IsReady>
 8005f72:	4603      	mov	r3, r0
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d0f1      	beq.n	8005f5c <HAL_RCC_OscConfig+0x4c0>
 8005f78:	e013      	b.n	8005fa2 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005f7a:	f7ff fab1 	bl	80054e0 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f7e:	f7fd f97f 	bl	8003280 <HAL_GetTick>
 8005f82:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8005f84:	e008      	b.n	8005f98 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005f86:	f7fd f97b 	bl	8003280 <HAL_GetTick>
 8005f8a:	4602      	mov	r2, r0
 8005f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f8e:	1ad3      	subs	r3, r2, r3
 8005f90:	2b02      	cmp	r3, #2
 8005f92:	d901      	bls.n	8005f98 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8005f94:	2303      	movs	r3, #3
 8005f96:	e0ee      	b.n	8006176 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8005f98:	f7ff fab3 	bl	8005502 <LL_RCC_HSI48_IsReady>
 8005f9c:	4603      	mov	r3, r0
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d1f1      	bne.n	8005f86 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	f000 80e4 	beq.w	8006174 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005fac:	f7ff fc11 	bl	80057d2 <LL_RCC_GetSysClkSource>
 8005fb0:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8005fb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fb6:	68db      	ldr	r3, [r3, #12]
 8005fb8:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fbe:	2b02      	cmp	r3, #2
 8005fc0:	f040 80b4 	bne.w	800612c <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	f003 0203 	and.w	r2, r3, #3
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fce:	429a      	cmp	r2, r3
 8005fd0:	d123      	bne.n	800601a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005fdc:	429a      	cmp	r2, r3
 8005fde:	d11c      	bne.n	800601a <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	0a1b      	lsrs	r3, r3, #8
 8005fe4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005fec:	429a      	cmp	r2, r3
 8005fee:	d114      	bne.n	800601a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8005ffa:	429a      	cmp	r2, r3
 8005ffc:	d10d      	bne.n	800601a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006008:	429a      	cmp	r2, r3
 800600a:	d106      	bne.n	800601a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8006016:	429a      	cmp	r2, r3
 8006018:	d05d      	beq.n	80060d6 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800601a:	693b      	ldr	r3, [r7, #16]
 800601c:	2b0c      	cmp	r3, #12
 800601e:	d058      	beq.n	80060d2 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8006020:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800602a:	2b00      	cmp	r3, #0
 800602c:	d001      	beq.n	8006032 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 800602e:	2301      	movs	r3, #1
 8006030:	e0a1      	b.n	8006176 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8006032:	f7ff fc84 	bl	800593e <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006036:	f7fd f923 	bl	8003280 <HAL_GetTick>
 800603a:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800603c:	e008      	b.n	8006050 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800603e:	f7fd f91f 	bl	8003280 <HAL_GetTick>
 8006042:	4602      	mov	r2, r0
 8006044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006046:	1ad3      	subs	r3, r2, r3
 8006048:	2b02      	cmp	r3, #2
 800604a:	d901      	bls.n	8006050 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 800604c:	2303      	movs	r3, #3
 800604e:	e092      	b.n	8006176 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006050:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800605a:	2b00      	cmp	r3, #0
 800605c:	d1ef      	bne.n	800603e <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800605e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006062:	68da      	ldr	r2, [r3, #12]
 8006064:	4b30      	ldr	r3, [pc, #192]	; (8006128 <HAL_RCC_OscConfig+0x68c>)
 8006066:	4013      	ands	r3, r2
 8006068:	687a      	ldr	r2, [r7, #4]
 800606a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800606c:	687a      	ldr	r2, [r7, #4]
 800606e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006070:	4311      	orrs	r1, r2
 8006072:	687a      	ldr	r2, [r7, #4]
 8006074:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006076:	0212      	lsls	r2, r2, #8
 8006078:	4311      	orrs	r1, r2
 800607a:	687a      	ldr	r2, [r7, #4]
 800607c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800607e:	4311      	orrs	r1, r2
 8006080:	687a      	ldr	r2, [r7, #4]
 8006082:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006084:	4311      	orrs	r1, r2
 8006086:	687a      	ldr	r2, [r7, #4]
 8006088:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800608a:	430a      	orrs	r2, r1
 800608c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006090:	4313      	orrs	r3, r2
 8006092:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006094:	f7ff fc44 	bl	8005920 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006098:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800609c:	68db      	ldr	r3, [r3, #12]
 800609e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80060a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060a6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80060a8:	f7fd f8ea 	bl	8003280 <HAL_GetTick>
 80060ac:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80060ae:	e008      	b.n	80060c2 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80060b0:	f7fd f8e6 	bl	8003280 <HAL_GetTick>
 80060b4:	4602      	mov	r2, r0
 80060b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060b8:	1ad3      	subs	r3, r2, r3
 80060ba:	2b02      	cmp	r3, #2
 80060bc:	d901      	bls.n	80060c2 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 80060be:	2303      	movs	r3, #3
 80060c0:	e059      	b.n	8006176 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80060c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d0ef      	beq.n	80060b0 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80060d0:	e050      	b.n	8006174 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80060d2:	2301      	movs	r3, #1
 80060d4:	e04f      	b.n	8006176 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80060d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d147      	bne.n	8006174 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80060e4:	f7ff fc1c 	bl	8005920 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80060e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060ec:	68db      	ldr	r3, [r3, #12]
 80060ee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80060f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060f6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80060f8:	f7fd f8c2 	bl	8003280 <HAL_GetTick>
 80060fc:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80060fe:	e008      	b.n	8006112 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006100:	f7fd f8be 	bl	8003280 <HAL_GetTick>
 8006104:	4602      	mov	r2, r0
 8006106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006108:	1ad3      	subs	r3, r2, r3
 800610a:	2b02      	cmp	r3, #2
 800610c:	d901      	bls.n	8006112 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 800610e:	2303      	movs	r3, #3
 8006110:	e031      	b.n	8006176 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006112:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800611c:	2b00      	cmp	r3, #0
 800611e:	d0ef      	beq.n	8006100 <HAL_RCC_OscConfig+0x664>
 8006120:	e028      	b.n	8006174 <HAL_RCC_OscConfig+0x6d8>
 8006122:	bf00      	nop
 8006124:	58000400 	.word	0x58000400
 8006128:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800612c:	693b      	ldr	r3, [r7, #16]
 800612e:	2b0c      	cmp	r3, #12
 8006130:	d01e      	beq.n	8006170 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006132:	f7ff fc04 	bl	800593e <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006136:	f7fd f8a3 	bl	8003280 <HAL_GetTick>
 800613a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800613c:	e008      	b.n	8006150 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800613e:	f7fd f89f 	bl	8003280 <HAL_GetTick>
 8006142:	4602      	mov	r2, r0
 8006144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006146:	1ad3      	subs	r3, r2, r3
 8006148:	2b02      	cmp	r3, #2
 800614a:	d901      	bls.n	8006150 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 800614c:	2303      	movs	r3, #3
 800614e:	e012      	b.n	8006176 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006150:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800615a:	2b00      	cmp	r3, #0
 800615c:	d1ef      	bne.n	800613e <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 800615e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006162:	68da      	ldr	r2, [r3, #12]
 8006164:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006168:	4b05      	ldr	r3, [pc, #20]	; (8006180 <HAL_RCC_OscConfig+0x6e4>)
 800616a:	4013      	ands	r3, r2
 800616c:	60cb      	str	r3, [r1, #12]
 800616e:	e001      	b.n	8006174 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006170:	2301      	movs	r3, #1
 8006172:	e000      	b.n	8006176 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8006174:	2300      	movs	r3, #0
}
 8006176:	4618      	mov	r0, r3
 8006178:	3734      	adds	r7, #52	; 0x34
 800617a:	46bd      	mov	sp, r7
 800617c:	bd90      	pop	{r4, r7, pc}
 800617e:	bf00      	nop
 8006180:	eefefffc 	.word	0xeefefffc

08006184 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b084      	sub	sp, #16
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
 800618c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d101      	bne.n	8006198 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006194:	2301      	movs	r3, #1
 8006196:	e12d      	b.n	80063f4 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006198:	4b98      	ldr	r3, [pc, #608]	; (80063fc <HAL_RCC_ClockConfig+0x278>)
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f003 0307 	and.w	r3, r3, #7
 80061a0:	683a      	ldr	r2, [r7, #0]
 80061a2:	429a      	cmp	r2, r3
 80061a4:	d91b      	bls.n	80061de <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80061a6:	4b95      	ldr	r3, [pc, #596]	; (80063fc <HAL_RCC_ClockConfig+0x278>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f023 0207 	bic.w	r2, r3, #7
 80061ae:	4993      	ldr	r1, [pc, #588]	; (80063fc <HAL_RCC_ClockConfig+0x278>)
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	4313      	orrs	r3, r2
 80061b4:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80061b6:	f7fd f863 	bl	8003280 <HAL_GetTick>
 80061ba:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80061bc:	e008      	b.n	80061d0 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80061be:	f7fd f85f 	bl	8003280 <HAL_GetTick>
 80061c2:	4602      	mov	r2, r0
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	1ad3      	subs	r3, r2, r3
 80061c8:	2b02      	cmp	r3, #2
 80061ca:	d901      	bls.n	80061d0 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80061cc:	2303      	movs	r3, #3
 80061ce:	e111      	b.n	80063f4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80061d0:	4b8a      	ldr	r3, [pc, #552]	; (80063fc <HAL_RCC_ClockConfig+0x278>)
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f003 0307 	and.w	r3, r3, #7
 80061d8:	683a      	ldr	r2, [r7, #0]
 80061da:	429a      	cmp	r2, r3
 80061dc:	d1ef      	bne.n	80061be <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f003 0302 	and.w	r3, r3, #2
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d016      	beq.n	8006218 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	689b      	ldr	r3, [r3, #8]
 80061ee:	4618      	mov	r0, r3
 80061f0:	f7ff fafb 	bl	80057ea <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80061f4:	f7fd f844 	bl	8003280 <HAL_GetTick>
 80061f8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80061fa:	e008      	b.n	800620e <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80061fc:	f7fd f840 	bl	8003280 <HAL_GetTick>
 8006200:	4602      	mov	r2, r0
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	1ad3      	subs	r3, r2, r3
 8006206:	2b02      	cmp	r3, #2
 8006208:	d901      	bls.n	800620e <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800620a:	2303      	movs	r3, #3
 800620c:	e0f2      	b.n	80063f4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800620e:	f7ff fbe8 	bl	80059e2 <LL_RCC_IsActiveFlag_HPRE>
 8006212:	4603      	mov	r3, r0
 8006214:	2b00      	cmp	r3, #0
 8006216:	d0f1      	beq.n	80061fc <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f003 0320 	and.w	r3, r3, #32
 8006220:	2b00      	cmp	r3, #0
 8006222:	d016      	beq.n	8006252 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	695b      	ldr	r3, [r3, #20]
 8006228:	4618      	mov	r0, r3
 800622a:	f7ff faf2 	bl	8005812 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800622e:	f7fd f827 	bl	8003280 <HAL_GetTick>
 8006232:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8006234:	e008      	b.n	8006248 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006236:	f7fd f823 	bl	8003280 <HAL_GetTick>
 800623a:	4602      	mov	r2, r0
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	1ad3      	subs	r3, r2, r3
 8006240:	2b02      	cmp	r3, #2
 8006242:	d901      	bls.n	8006248 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8006244:	2303      	movs	r3, #3
 8006246:	e0d5      	b.n	80063f4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8006248:	f7ff fbdd 	bl	8005a06 <LL_RCC_IsActiveFlag_C2HPRE>
 800624c:	4603      	mov	r3, r0
 800624e:	2b00      	cmp	r3, #0
 8006250:	d0f1      	beq.n	8006236 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800625a:	2b00      	cmp	r3, #0
 800625c:	d016      	beq.n	800628c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	699b      	ldr	r3, [r3, #24]
 8006262:	4618      	mov	r0, r3
 8006264:	f7ff faeb 	bl	800583e <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006268:	f7fd f80a 	bl	8003280 <HAL_GetTick>
 800626c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800626e:	e008      	b.n	8006282 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006270:	f7fd f806 	bl	8003280 <HAL_GetTick>
 8006274:	4602      	mov	r2, r0
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	1ad3      	subs	r3, r2, r3
 800627a:	2b02      	cmp	r3, #2
 800627c:	d901      	bls.n	8006282 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800627e:	2303      	movs	r3, #3
 8006280:	e0b8      	b.n	80063f4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8006282:	f7ff fbd3 	bl	8005a2c <LL_RCC_IsActiveFlag_SHDHPRE>
 8006286:	4603      	mov	r3, r0
 8006288:	2b00      	cmp	r3, #0
 800628a:	d0f1      	beq.n	8006270 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f003 0304 	and.w	r3, r3, #4
 8006294:	2b00      	cmp	r3, #0
 8006296:	d016      	beq.n	80062c6 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	68db      	ldr	r3, [r3, #12]
 800629c:	4618      	mov	r0, r3
 800629e:	f7ff fae5 	bl	800586c <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80062a2:	f7fc ffed 	bl	8003280 <HAL_GetTick>
 80062a6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80062a8:	e008      	b.n	80062bc <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80062aa:	f7fc ffe9 	bl	8003280 <HAL_GetTick>
 80062ae:	4602      	mov	r2, r0
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	1ad3      	subs	r3, r2, r3
 80062b4:	2b02      	cmp	r3, #2
 80062b6:	d901      	bls.n	80062bc <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80062b8:	2303      	movs	r3, #3
 80062ba:	e09b      	b.n	80063f4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80062bc:	f7ff fbc9 	bl	8005a52 <LL_RCC_IsActiveFlag_PPRE1>
 80062c0:	4603      	mov	r3, r0
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d0f1      	beq.n	80062aa <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f003 0308 	and.w	r3, r3, #8
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d017      	beq.n	8006302 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	691b      	ldr	r3, [r3, #16]
 80062d6:	00db      	lsls	r3, r3, #3
 80062d8:	4618      	mov	r0, r3
 80062da:	f7ff fadb 	bl	8005894 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80062de:	f7fc ffcf 	bl	8003280 <HAL_GetTick>
 80062e2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80062e4:	e008      	b.n	80062f8 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80062e6:	f7fc ffcb 	bl	8003280 <HAL_GetTick>
 80062ea:	4602      	mov	r2, r0
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	1ad3      	subs	r3, r2, r3
 80062f0:	2b02      	cmp	r3, #2
 80062f2:	d901      	bls.n	80062f8 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80062f4:	2303      	movs	r3, #3
 80062f6:	e07d      	b.n	80063f4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80062f8:	f7ff fbbd 	bl	8005a76 <LL_RCC_IsActiveFlag_PPRE2>
 80062fc:	4603      	mov	r3, r0
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d0f1      	beq.n	80062e6 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f003 0301 	and.w	r3, r3, #1
 800630a:	2b00      	cmp	r3, #0
 800630c:	d043      	beq.n	8006396 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	685b      	ldr	r3, [r3, #4]
 8006312:	2b02      	cmp	r3, #2
 8006314:	d106      	bne.n	8006324 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8006316:	f7ff f87b 	bl	8005410 <LL_RCC_HSE_IsReady>
 800631a:	4603      	mov	r3, r0
 800631c:	2b00      	cmp	r3, #0
 800631e:	d11e      	bne.n	800635e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006320:	2301      	movs	r3, #1
 8006322:	e067      	b.n	80063f4 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	685b      	ldr	r3, [r3, #4]
 8006328:	2b03      	cmp	r3, #3
 800632a:	d106      	bne.n	800633a <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800632c:	f7ff fb16 	bl	800595c <LL_RCC_PLL_IsReady>
 8006330:	4603      	mov	r3, r0
 8006332:	2b00      	cmp	r3, #0
 8006334:	d113      	bne.n	800635e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006336:	2301      	movs	r3, #1
 8006338:	e05c      	b.n	80063f4 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	685b      	ldr	r3, [r3, #4]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d106      	bne.n	8006350 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8006342:	f7ff f9e3 	bl	800570c <LL_RCC_MSI_IsReady>
 8006346:	4603      	mov	r3, r0
 8006348:	2b00      	cmp	r3, #0
 800634a:	d108      	bne.n	800635e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800634c:	2301      	movs	r3, #1
 800634e:	e051      	b.n	80063f4 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8006350:	f7ff f88e 	bl	8005470 <LL_RCC_HSI_IsReady>
 8006354:	4603      	mov	r3, r0
 8006356:	2b00      	cmp	r3, #0
 8006358:	d101      	bne.n	800635e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800635a:	2301      	movs	r3, #1
 800635c:	e04a      	b.n	80063f4 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	685b      	ldr	r3, [r3, #4]
 8006362:	4618      	mov	r0, r3
 8006364:	f7ff fa21 	bl	80057aa <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006368:	f7fc ff8a 	bl	8003280 <HAL_GetTick>
 800636c:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800636e:	e00a      	b.n	8006386 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006370:	f7fc ff86 	bl	8003280 <HAL_GetTick>
 8006374:	4602      	mov	r2, r0
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	1ad3      	subs	r3, r2, r3
 800637a:	f241 3288 	movw	r2, #5000	; 0x1388
 800637e:	4293      	cmp	r3, r2
 8006380:	d901      	bls.n	8006386 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8006382:	2303      	movs	r3, #3
 8006384:	e036      	b.n	80063f4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006386:	f7ff fa24 	bl	80057d2 <LL_RCC_GetSysClkSource>
 800638a:	4602      	mov	r2, r0
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	685b      	ldr	r3, [r3, #4]
 8006390:	009b      	lsls	r3, r3, #2
 8006392:	429a      	cmp	r2, r3
 8006394:	d1ec      	bne.n	8006370 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006396:	4b19      	ldr	r3, [pc, #100]	; (80063fc <HAL_RCC_ClockConfig+0x278>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f003 0307 	and.w	r3, r3, #7
 800639e:	683a      	ldr	r2, [r7, #0]
 80063a0:	429a      	cmp	r2, r3
 80063a2:	d21b      	bcs.n	80063dc <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80063a4:	4b15      	ldr	r3, [pc, #84]	; (80063fc <HAL_RCC_ClockConfig+0x278>)
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f023 0207 	bic.w	r2, r3, #7
 80063ac:	4913      	ldr	r1, [pc, #76]	; (80063fc <HAL_RCC_ClockConfig+0x278>)
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	4313      	orrs	r3, r2
 80063b2:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80063b4:	f7fc ff64 	bl	8003280 <HAL_GetTick>
 80063b8:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80063ba:	e008      	b.n	80063ce <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80063bc:	f7fc ff60 	bl	8003280 <HAL_GetTick>
 80063c0:	4602      	mov	r2, r0
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	1ad3      	subs	r3, r2, r3
 80063c6:	2b02      	cmp	r3, #2
 80063c8:	d901      	bls.n	80063ce <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80063ca:	2303      	movs	r3, #3
 80063cc:	e012      	b.n	80063f4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80063ce:	4b0b      	ldr	r3, [pc, #44]	; (80063fc <HAL_RCC_ClockConfig+0x278>)
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f003 0307 	and.w	r3, r3, #7
 80063d6:	683a      	ldr	r2, [r7, #0]
 80063d8:	429a      	cmp	r2, r3
 80063da:	d1ef      	bne.n	80063bc <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80063dc:	f000 f87e 	bl	80064dc <HAL_RCC_GetHCLKFreq>
 80063e0:	4603      	mov	r3, r0
 80063e2:	4a07      	ldr	r2, [pc, #28]	; (8006400 <HAL_RCC_ClockConfig+0x27c>)
 80063e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 80063e6:	f7fc ff57 	bl	8003298 <HAL_GetTickPrio>
 80063ea:	4603      	mov	r3, r0
 80063ec:	4618      	mov	r0, r3
 80063ee:	f7fc fef9 	bl	80031e4 <HAL_InitTick>
 80063f2:	4603      	mov	r3, r0
}
 80063f4:	4618      	mov	r0, r3
 80063f6:	3710      	adds	r7, #16
 80063f8:	46bd      	mov	sp, r7
 80063fa:	bd80      	pop	{r7, pc}
 80063fc:	58004000 	.word	0x58004000
 8006400:	20000008 	.word	0x20000008

08006404 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006404:	b590      	push	{r4, r7, lr}
 8006406:	b085      	sub	sp, #20
 8006408:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800640a:	f7ff f9e2 	bl	80057d2 <LL_RCC_GetSysClkSource>
 800640e:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d10a      	bne.n	800642c <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8006416:	f7ff f99e 	bl	8005756 <LL_RCC_MSI_GetRange>
 800641a:	4603      	mov	r3, r0
 800641c:	091b      	lsrs	r3, r3, #4
 800641e:	f003 030f 	and.w	r3, r3, #15
 8006422:	4a2b      	ldr	r2, [pc, #172]	; (80064d0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8006424:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006428:	60fb      	str	r3, [r7, #12]
 800642a:	e04b      	b.n	80064c4 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2b04      	cmp	r3, #4
 8006430:	d102      	bne.n	8006438 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006432:	4b28      	ldr	r3, [pc, #160]	; (80064d4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8006434:	60fb      	str	r3, [r7, #12]
 8006436:	e045      	b.n	80064c4 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2b08      	cmp	r3, #8
 800643c:	d10a      	bne.n	8006454 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800643e:	f7fe ffb7 	bl	80053b0 <LL_RCC_HSE_IsEnabledDiv2>
 8006442:	4603      	mov	r3, r0
 8006444:	2b01      	cmp	r3, #1
 8006446:	d102      	bne.n	800644e <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8006448:	4b22      	ldr	r3, [pc, #136]	; (80064d4 <HAL_RCC_GetSysClockFreq+0xd0>)
 800644a:	60fb      	str	r3, [r7, #12]
 800644c:	e03a      	b.n	80064c4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800644e:	4b22      	ldr	r3, [pc, #136]	; (80064d8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8006450:	60fb      	str	r3, [r7, #12]
 8006452:	e037      	b.n	80064c4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8006454:	f7ff fab9 	bl	80059ca <LL_RCC_PLL_GetMainSource>
 8006458:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	2b02      	cmp	r3, #2
 800645e:	d003      	beq.n	8006468 <HAL_RCC_GetSysClockFreq+0x64>
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	2b03      	cmp	r3, #3
 8006464:	d003      	beq.n	800646e <HAL_RCC_GetSysClockFreq+0x6a>
 8006466:	e00d      	b.n	8006484 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8006468:	4b1a      	ldr	r3, [pc, #104]	; (80064d4 <HAL_RCC_GetSysClockFreq+0xd0>)
 800646a:	60bb      	str	r3, [r7, #8]
        break;
 800646c:	e015      	b.n	800649a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800646e:	f7fe ff9f 	bl	80053b0 <LL_RCC_HSE_IsEnabledDiv2>
 8006472:	4603      	mov	r3, r0
 8006474:	2b01      	cmp	r3, #1
 8006476:	d102      	bne.n	800647e <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8006478:	4b16      	ldr	r3, [pc, #88]	; (80064d4 <HAL_RCC_GetSysClockFreq+0xd0>)
 800647a:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800647c:	e00d      	b.n	800649a <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 800647e:	4b16      	ldr	r3, [pc, #88]	; (80064d8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8006480:	60bb      	str	r3, [r7, #8]
        break;
 8006482:	e00a      	b.n	800649a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8006484:	f7ff f967 	bl	8005756 <LL_RCC_MSI_GetRange>
 8006488:	4603      	mov	r3, r0
 800648a:	091b      	lsrs	r3, r3, #4
 800648c:	f003 030f 	and.w	r3, r3, #15
 8006490:	4a0f      	ldr	r2, [pc, #60]	; (80064d0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8006492:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006496:	60bb      	str	r3, [r7, #8]
        break;
 8006498:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 800649a:	f7ff fa71 	bl	8005980 <LL_RCC_PLL_GetN>
 800649e:	4602      	mov	r2, r0
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	fb03 f402 	mul.w	r4, r3, r2
 80064a6:	f7ff fa84 	bl	80059b2 <LL_RCC_PLL_GetDivider>
 80064aa:	4603      	mov	r3, r0
 80064ac:	091b      	lsrs	r3, r3, #4
 80064ae:	3301      	adds	r3, #1
 80064b0:	fbb4 f4f3 	udiv	r4, r4, r3
 80064b4:	f7ff fa71 	bl	800599a <LL_RCC_PLL_GetR>
 80064b8:	4603      	mov	r3, r0
 80064ba:	0f5b      	lsrs	r3, r3, #29
 80064bc:	3301      	adds	r3, #1
 80064be:	fbb4 f3f3 	udiv	r3, r4, r3
 80064c2:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80064c4:	68fb      	ldr	r3, [r7, #12]
}
 80064c6:	4618      	mov	r0, r3
 80064c8:	3714      	adds	r7, #20
 80064ca:	46bd      	mov	sp, r7
 80064cc:	bd90      	pop	{r4, r7, pc}
 80064ce:	bf00      	nop
 80064d0:	0800db60 	.word	0x0800db60
 80064d4:	00f42400 	.word	0x00f42400
 80064d8:	01e84800 	.word	0x01e84800

080064dc <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80064dc:	b598      	push	{r3, r4, r7, lr}
 80064de:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80064e0:	f7ff ff90 	bl	8006404 <HAL_RCC_GetSysClockFreq>
 80064e4:	4604      	mov	r4, r0
 80064e6:	f7ff f9e9 	bl	80058bc <LL_RCC_GetAHBPrescaler>
 80064ea:	4603      	mov	r3, r0
 80064ec:	091b      	lsrs	r3, r3, #4
 80064ee:	f003 030f 	and.w	r3, r3, #15
 80064f2:	4a03      	ldr	r2, [pc, #12]	; (8006500 <HAL_RCC_GetHCLKFreq+0x24>)
 80064f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80064f8:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80064fc:	4618      	mov	r0, r3
 80064fe:	bd98      	pop	{r3, r4, r7, pc}
 8006500:	0800db00 	.word	0x0800db00

08006504 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006504:	b598      	push	{r3, r4, r7, lr}
 8006506:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8006508:	f7ff ffe8 	bl	80064dc <HAL_RCC_GetHCLKFreq>
 800650c:	4604      	mov	r4, r0
 800650e:	f7ff f9ef 	bl	80058f0 <LL_RCC_GetAPB1Prescaler>
 8006512:	4603      	mov	r3, r0
 8006514:	0a1b      	lsrs	r3, r3, #8
 8006516:	f003 0307 	and.w	r3, r3, #7
 800651a:	4a04      	ldr	r2, [pc, #16]	; (800652c <HAL_RCC_GetPCLK1Freq+0x28>)
 800651c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006520:	f003 031f 	and.w	r3, r3, #31
 8006524:	fa24 f303 	lsr.w	r3, r4, r3
}
 8006528:	4618      	mov	r0, r3
 800652a:	bd98      	pop	{r3, r4, r7, pc}
 800652c:	0800db40 	.word	0x0800db40

08006530 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006530:	b598      	push	{r3, r4, r7, lr}
 8006532:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8006534:	f7ff ffd2 	bl	80064dc <HAL_RCC_GetHCLKFreq>
 8006538:	4604      	mov	r4, r0
 800653a:	f7ff f9e5 	bl	8005908 <LL_RCC_GetAPB2Prescaler>
 800653e:	4603      	mov	r3, r0
 8006540:	0adb      	lsrs	r3, r3, #11
 8006542:	f003 0307 	and.w	r3, r3, #7
 8006546:	4a04      	ldr	r2, [pc, #16]	; (8006558 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006548:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800654c:	f003 031f 	and.w	r3, r3, #31
 8006550:	fa24 f303 	lsr.w	r3, r4, r3
}
 8006554:	4618      	mov	r0, r3
 8006556:	bd98      	pop	{r3, r4, r7, pc}
 8006558:	0800db40 	.word	0x0800db40

0800655c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 800655c:	b590      	push	{r4, r7, lr}
 800655e:	b085      	sub	sp, #20
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2bb0      	cmp	r3, #176	; 0xb0
 8006568:	d903      	bls.n	8006572 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800656a:	4b15      	ldr	r3, [pc, #84]	; (80065c0 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800656c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800656e:	60fb      	str	r3, [r7, #12]
 8006570:	e007      	b.n	8006582 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	091b      	lsrs	r3, r3, #4
 8006576:	f003 030f 	and.w	r3, r3, #15
 800657a:	4a11      	ldr	r2, [pc, #68]	; (80065c0 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800657c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006580:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8006582:	f7ff f9a7 	bl	80058d4 <LL_RCC_GetAHB4Prescaler>
 8006586:	4603      	mov	r3, r0
 8006588:	091b      	lsrs	r3, r3, #4
 800658a:	f003 030f 	and.w	r3, r3, #15
 800658e:	4a0d      	ldr	r2, [pc, #52]	; (80065c4 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8006590:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006594:	68fa      	ldr	r2, [r7, #12]
 8006596:	fbb2 f3f3 	udiv	r3, r2, r3
 800659a:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	4a0a      	ldr	r2, [pc, #40]	; (80065c8 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 80065a0:	fba2 2303 	umull	r2, r3, r2, r3
 80065a4:	0c9c      	lsrs	r4, r3, #18
 80065a6:	f7fe fef5 	bl	8005394 <HAL_PWREx_GetVoltageRange>
 80065aa:	4603      	mov	r3, r0
 80065ac:	4619      	mov	r1, r3
 80065ae:	4620      	mov	r0, r4
 80065b0:	f000 f80c 	bl	80065cc <RCC_SetFlashLatency>
 80065b4:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 80065b6:	4618      	mov	r0, r3
 80065b8:	3714      	adds	r7, #20
 80065ba:	46bd      	mov	sp, r7
 80065bc:	bd90      	pop	{r4, r7, pc}
 80065be:	bf00      	nop
 80065c0:	0800db60 	.word	0x0800db60
 80065c4:	0800db00 	.word	0x0800db00
 80065c8:	431bde83 	.word	0x431bde83

080065cc <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80065cc:	b590      	push	{r4, r7, lr}
 80065ce:	b093      	sub	sp, #76	; 0x4c
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
 80065d4:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 80065d6:	4b37      	ldr	r3, [pc, #220]	; (80066b4 <RCC_SetFlashLatency+0xe8>)
 80065d8:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80065dc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80065de:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 80065e2:	4a35      	ldr	r2, [pc, #212]	; (80066b8 <RCC_SetFlashLatency+0xec>)
 80065e4:	f107 031c 	add.w	r3, r7, #28
 80065e8:	ca07      	ldmia	r2, {r0, r1, r2}
 80065ea:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 80065ee:	4b33      	ldr	r3, [pc, #204]	; (80066bc <RCC_SetFlashLatency+0xf0>)
 80065f0:	f107 040c 	add.w	r4, r7, #12
 80065f4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80065f6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80065fa:	2300      	movs	r3, #0
 80065fc:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006604:	d11a      	bne.n	800663c <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8006606:	2300      	movs	r3, #0
 8006608:	643b      	str	r3, [r7, #64]	; 0x40
 800660a:	e013      	b.n	8006634 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800660c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800660e:	009b      	lsls	r3, r3, #2
 8006610:	3348      	adds	r3, #72	; 0x48
 8006612:	443b      	add	r3, r7
 8006614:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8006618:	687a      	ldr	r2, [r7, #4]
 800661a:	429a      	cmp	r2, r3
 800661c:	d807      	bhi.n	800662e <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800661e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006620:	009b      	lsls	r3, r3, #2
 8006622:	3348      	adds	r3, #72	; 0x48
 8006624:	443b      	add	r3, r7
 8006626:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800662a:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800662c:	e020      	b.n	8006670 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800662e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006630:	3301      	adds	r3, #1
 8006632:	643b      	str	r3, [r7, #64]	; 0x40
 8006634:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006636:	2b03      	cmp	r3, #3
 8006638:	d9e8      	bls.n	800660c <RCC_SetFlashLatency+0x40>
 800663a:	e019      	b.n	8006670 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800663c:	2300      	movs	r3, #0
 800663e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006640:	e013      	b.n	800666a <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8006642:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006644:	009b      	lsls	r3, r3, #2
 8006646:	3348      	adds	r3, #72	; 0x48
 8006648:	443b      	add	r3, r7
 800664a:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800664e:	687a      	ldr	r2, [r7, #4]
 8006650:	429a      	cmp	r2, r3
 8006652:	d807      	bhi.n	8006664 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8006654:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006656:	009b      	lsls	r3, r3, #2
 8006658:	3348      	adds	r3, #72	; 0x48
 800665a:	443b      	add	r3, r7
 800665c:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8006660:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8006662:	e005      	b.n	8006670 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8006664:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006666:	3301      	adds	r3, #1
 8006668:	63fb      	str	r3, [r7, #60]	; 0x3c
 800666a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800666c:	2b02      	cmp	r3, #2
 800666e:	d9e8      	bls.n	8006642 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8006670:	4b13      	ldr	r3, [pc, #76]	; (80066c0 <RCC_SetFlashLatency+0xf4>)
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f023 0207 	bic.w	r2, r3, #7
 8006678:	4911      	ldr	r1, [pc, #68]	; (80066c0 <RCC_SetFlashLatency+0xf4>)
 800667a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800667c:	4313      	orrs	r3, r2
 800667e:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006680:	f7fc fdfe 	bl	8003280 <HAL_GetTick>
 8006684:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8006686:	e008      	b.n	800669a <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006688:	f7fc fdfa 	bl	8003280 <HAL_GetTick>
 800668c:	4602      	mov	r2, r0
 800668e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006690:	1ad3      	subs	r3, r2, r3
 8006692:	2b02      	cmp	r3, #2
 8006694:	d901      	bls.n	800669a <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8006696:	2303      	movs	r3, #3
 8006698:	e007      	b.n	80066aa <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800669a:	4b09      	ldr	r3, [pc, #36]	; (80066c0 <RCC_SetFlashLatency+0xf4>)
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f003 0307 	and.w	r3, r3, #7
 80066a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80066a4:	429a      	cmp	r2, r3
 80066a6:	d1ef      	bne.n	8006688 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 80066a8:	2300      	movs	r3, #0
}
 80066aa:	4618      	mov	r0, r3
 80066ac:	374c      	adds	r7, #76	; 0x4c
 80066ae:	46bd      	mov	sp, r7
 80066b0:	bd90      	pop	{r4, r7, pc}
 80066b2:	bf00      	nop
 80066b4:	0800d95c 	.word	0x0800d95c
 80066b8:	0800d96c 	.word	0x0800d96c
 80066bc:	0800d978 	.word	0x0800d978
 80066c0:	58004000 	.word	0x58004000

080066c4 <LL_RCC_LSE_IsEnabled>:
{
 80066c4:	b480      	push	{r7}
 80066c6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 80066c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80066cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066d0:	f003 0301 	and.w	r3, r3, #1
 80066d4:	2b01      	cmp	r3, #1
 80066d6:	d101      	bne.n	80066dc <LL_RCC_LSE_IsEnabled+0x18>
 80066d8:	2301      	movs	r3, #1
 80066da:	e000      	b.n	80066de <LL_RCC_LSE_IsEnabled+0x1a>
 80066dc:	2300      	movs	r3, #0
}
 80066de:	4618      	mov	r0, r3
 80066e0:	46bd      	mov	sp, r7
 80066e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e6:	4770      	bx	lr

080066e8 <LL_RCC_LSE_IsReady>:
{
 80066e8:	b480      	push	{r7}
 80066ea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80066ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80066f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066f4:	f003 0302 	and.w	r3, r3, #2
 80066f8:	2b02      	cmp	r3, #2
 80066fa:	d101      	bne.n	8006700 <LL_RCC_LSE_IsReady+0x18>
 80066fc:	2301      	movs	r3, #1
 80066fe:	e000      	b.n	8006702 <LL_RCC_LSE_IsReady+0x1a>
 8006700:	2300      	movs	r3, #0
}
 8006702:	4618      	mov	r0, r3
 8006704:	46bd      	mov	sp, r7
 8006706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670a:	4770      	bx	lr

0800670c <LL_RCC_SetRFWKPClockSource>:
{
 800670c:	b480      	push	{r7}
 800670e:	b083      	sub	sp, #12
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8006714:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006718:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800671c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006720:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	4313      	orrs	r3, r2
 8006728:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 800672c:	bf00      	nop
 800672e:	370c      	adds	r7, #12
 8006730:	46bd      	mov	sp, r7
 8006732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006736:	4770      	bx	lr

08006738 <LL_RCC_SetSMPSClockSource>:
{
 8006738:	b480      	push	{r7}
 800673a:	b083      	sub	sp, #12
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8006740:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006746:	f023 0203 	bic.w	r2, r3, #3
 800674a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	4313      	orrs	r3, r2
 8006752:	624b      	str	r3, [r1, #36]	; 0x24
}
 8006754:	bf00      	nop
 8006756:	370c      	adds	r7, #12
 8006758:	46bd      	mov	sp, r7
 800675a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675e:	4770      	bx	lr

08006760 <LL_RCC_SetSMPSPrescaler>:
{
 8006760:	b480      	push	{r7}
 8006762:	b083      	sub	sp, #12
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8006768:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800676c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800676e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006772:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	4313      	orrs	r3, r2
 800677a:	624b      	str	r3, [r1, #36]	; 0x24
}
 800677c:	bf00      	nop
 800677e:	370c      	adds	r7, #12
 8006780:	46bd      	mov	sp, r7
 8006782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006786:	4770      	bx	lr

08006788 <LL_RCC_SetUSARTClockSource>:
{
 8006788:	b480      	push	{r7}
 800678a:	b083      	sub	sp, #12
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8006790:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006794:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006798:	f023 0203 	bic.w	r2, r3, #3
 800679c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	4313      	orrs	r3, r2
 80067a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80067a8:	bf00      	nop
 80067aa:	370c      	adds	r7, #12
 80067ac:	46bd      	mov	sp, r7
 80067ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b2:	4770      	bx	lr

080067b4 <LL_RCC_SetLPUARTClockSource>:
{
 80067b4:	b480      	push	{r7}
 80067b6:	b083      	sub	sp, #12
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80067bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80067c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067c4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80067c8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	4313      	orrs	r3, r2
 80067d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80067d4:	bf00      	nop
 80067d6:	370c      	adds	r7, #12
 80067d8:	46bd      	mov	sp, r7
 80067da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067de:	4770      	bx	lr

080067e0 <LL_RCC_SetI2CClockSource>:
{
 80067e0:	b480      	push	{r7}
 80067e2:	b083      	sub	sp, #12
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80067e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80067ec:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	091b      	lsrs	r3, r3, #4
 80067f4:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80067f8:	43db      	mvns	r3, r3
 80067fa:	401a      	ands	r2, r3
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	011b      	lsls	r3, r3, #4
 8006800:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8006804:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006808:	4313      	orrs	r3, r2
 800680a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800680e:	bf00      	nop
 8006810:	370c      	adds	r7, #12
 8006812:	46bd      	mov	sp, r7
 8006814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006818:	4770      	bx	lr

0800681a <LL_RCC_SetLPTIMClockSource>:
{
 800681a:	b480      	push	{r7}
 800681c:	b083      	sub	sp, #12
 800681e:	af00      	add	r7, sp, #0
 8006820:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8006822:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006826:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	0c1b      	lsrs	r3, r3, #16
 800682e:	041b      	lsls	r3, r3, #16
 8006830:	43db      	mvns	r3, r3
 8006832:	401a      	ands	r2, r3
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	041b      	lsls	r3, r3, #16
 8006838:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800683c:	4313      	orrs	r3, r2
 800683e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006842:	bf00      	nop
 8006844:	370c      	adds	r7, #12
 8006846:	46bd      	mov	sp, r7
 8006848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684c:	4770      	bx	lr

0800684e <LL_RCC_SetSAIClockSource>:
{
 800684e:	b480      	push	{r7}
 8006850:	b083      	sub	sp, #12
 8006852:	af00      	add	r7, sp, #0
 8006854:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8006856:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800685a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800685e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006862:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	4313      	orrs	r3, r2
 800686a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800686e:	bf00      	nop
 8006870:	370c      	adds	r7, #12
 8006872:	46bd      	mov	sp, r7
 8006874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006878:	4770      	bx	lr

0800687a <LL_RCC_SetRNGClockSource>:
{
 800687a:	b480      	push	{r7}
 800687c:	b083      	sub	sp, #12
 800687e:	af00      	add	r7, sp, #0
 8006880:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8006882:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006886:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800688a:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800688e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	4313      	orrs	r3, r2
 8006896:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800689a:	bf00      	nop
 800689c:	370c      	adds	r7, #12
 800689e:	46bd      	mov	sp, r7
 80068a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a4:	4770      	bx	lr

080068a6 <LL_RCC_SetCLK48ClockSource>:
{
 80068a6:	b480      	push	{r7}
 80068a8:	b083      	sub	sp, #12
 80068aa:	af00      	add	r7, sp, #0
 80068ac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 80068ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80068b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068b6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80068ba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	4313      	orrs	r3, r2
 80068c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80068c6:	bf00      	nop
 80068c8:	370c      	adds	r7, #12
 80068ca:	46bd      	mov	sp, r7
 80068cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d0:	4770      	bx	lr

080068d2 <LL_RCC_SetUSBClockSource>:
{
 80068d2:	b580      	push	{r7, lr}
 80068d4:	b082      	sub	sp, #8
 80068d6:	af00      	add	r7, sp, #0
 80068d8:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 80068da:	6878      	ldr	r0, [r7, #4]
 80068dc:	f7ff ffe3 	bl	80068a6 <LL_RCC_SetCLK48ClockSource>
}
 80068e0:	bf00      	nop
 80068e2:	3708      	adds	r7, #8
 80068e4:	46bd      	mov	sp, r7
 80068e6:	bd80      	pop	{r7, pc}

080068e8 <LL_RCC_SetADCClockSource>:
{
 80068e8:	b480      	push	{r7}
 80068ea:	b083      	sub	sp, #12
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80068f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80068f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068f8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80068fc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	4313      	orrs	r3, r2
 8006904:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006908:	bf00      	nop
 800690a:	370c      	adds	r7, #12
 800690c:	46bd      	mov	sp, r7
 800690e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006912:	4770      	bx	lr

08006914 <LL_RCC_SetRTCClockSource>:
{
 8006914:	b480      	push	{r7}
 8006916:	b083      	sub	sp, #12
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800691c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006920:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006924:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006928:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	4313      	orrs	r3, r2
 8006930:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8006934:	bf00      	nop
 8006936:	370c      	adds	r7, #12
 8006938:	46bd      	mov	sp, r7
 800693a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693e:	4770      	bx	lr

08006940 <LL_RCC_GetRTCClockSource>:
{
 8006940:	b480      	push	{r7}
 8006942:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8006944:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006948:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800694c:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8006950:	4618      	mov	r0, r3
 8006952:	46bd      	mov	sp, r7
 8006954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006958:	4770      	bx	lr

0800695a <LL_RCC_ForceBackupDomainReset>:
{
 800695a:	b480      	push	{r7}
 800695c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800695e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006962:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006966:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800696a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800696e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006972:	bf00      	nop
 8006974:	46bd      	mov	sp, r7
 8006976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697a:	4770      	bx	lr

0800697c <LL_RCC_ReleaseBackupDomainReset>:
{
 800697c:	b480      	push	{r7}
 800697e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006980:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006984:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006988:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800698c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006990:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006994:	bf00      	nop
 8006996:	46bd      	mov	sp, r7
 8006998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699c:	4770      	bx	lr

0800699e <LL_RCC_PLLSAI1_Enable>:
{
 800699e:	b480      	push	{r7}
 80069a0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80069a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80069ac:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80069b0:	6013      	str	r3, [r2, #0]
}
 80069b2:	bf00      	nop
 80069b4:	46bd      	mov	sp, r7
 80069b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ba:	4770      	bx	lr

080069bc <LL_RCC_PLLSAI1_Disable>:
{
 80069bc:	b480      	push	{r7}
 80069be:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80069c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80069ca:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80069ce:	6013      	str	r3, [r2, #0]
}
 80069d0:	bf00      	nop
 80069d2:	46bd      	mov	sp, r7
 80069d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d8:	4770      	bx	lr

080069da <LL_RCC_PLLSAI1_IsReady>:
{
 80069da:	b480      	push	{r7}
 80069dc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 80069de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80069e8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80069ec:	d101      	bne.n	80069f2 <LL_RCC_PLLSAI1_IsReady+0x18>
 80069ee:	2301      	movs	r3, #1
 80069f0:	e000      	b.n	80069f4 <LL_RCC_PLLSAI1_IsReady+0x1a>
 80069f2:	2300      	movs	r3, #0
}
 80069f4:	4618      	mov	r0, r3
 80069f6:	46bd      	mov	sp, r7
 80069f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fc:	4770      	bx	lr

080069fe <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80069fe:	b580      	push	{r7, lr}
 8006a00:	b088      	sub	sp, #32
 8006a02:	af00      	add	r7, sp, #0
 8006a04:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8006a06:	2300      	movs	r3, #0
 8006a08:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d034      	beq.n	8006a84 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a1e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006a22:	d021      	beq.n	8006a68 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8006a24:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006a28:	d81b      	bhi.n	8006a62 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006a2a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006a2e:	d01d      	beq.n	8006a6c <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8006a30:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006a34:	d815      	bhi.n	8006a62 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d00b      	beq.n	8006a52 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8006a3a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006a3e:	d110      	bne.n	8006a62 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8006a40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a44:	68db      	ldr	r3, [r3, #12]
 8006a46:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006a4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a4e:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8006a50:	e00d      	b.n	8006a6e <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	3304      	adds	r3, #4
 8006a56:	4618      	mov	r0, r3
 8006a58:	f000 f947 	bl	8006cea <RCCEx_PLLSAI1_ConfigNP>
 8006a5c:	4603      	mov	r3, r0
 8006a5e:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006a60:	e005      	b.n	8006a6e <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8006a62:	2301      	movs	r3, #1
 8006a64:	77fb      	strb	r3, [r7, #31]
        break;
 8006a66:	e002      	b.n	8006a6e <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8006a68:	bf00      	nop
 8006a6a:	e000      	b.n	8006a6e <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8006a6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a6e:	7ffb      	ldrb	r3, [r7, #31]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d105      	bne.n	8006a80 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a78:	4618      	mov	r0, r3
 8006a7a:	f7ff fee8 	bl	800684e <LL_RCC_SetSAIClockSource>
 8006a7e:	e001      	b.n	8006a84 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a80:	7ffb      	ldrb	r3, [r7, #31]
 8006a82:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d046      	beq.n	8006b1e <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8006a90:	f7ff ff56 	bl	8006940 <LL_RCC_GetRTCClockSource>
 8006a94:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a9a:	69ba      	ldr	r2, [r7, #24]
 8006a9c:	429a      	cmp	r2, r3
 8006a9e:	d03c      	beq.n	8006b1a <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8006aa0:	f7fe fc68 	bl	8005374 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8006aa4:	69bb      	ldr	r3, [r7, #24]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d105      	bne.n	8006ab6 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aae:	4618      	mov	r0, r3
 8006ab0:	f7ff ff30 	bl	8006914 <LL_RCC_SetRTCClockSource>
 8006ab4:	e02e      	b.n	8006b14 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8006ab6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006aba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006abe:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8006ac0:	f7ff ff4b 	bl	800695a <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8006ac4:	f7ff ff5a 	bl	800697c <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8006ac8:	697b      	ldr	r3, [r7, #20]
 8006aca:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ad2:	4313      	orrs	r3, r2
 8006ad4:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8006ad6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006ada:	697b      	ldr	r3, [r7, #20]
 8006adc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8006ae0:	f7ff fdf0 	bl	80066c4 <LL_RCC_LSE_IsEnabled>
 8006ae4:	4603      	mov	r3, r0
 8006ae6:	2b01      	cmp	r3, #1
 8006ae8:	d114      	bne.n	8006b14 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006aea:	f7fc fbc9 	bl	8003280 <HAL_GetTick>
 8006aee:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8006af0:	e00b      	b.n	8006b0a <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006af2:	f7fc fbc5 	bl	8003280 <HAL_GetTick>
 8006af6:	4602      	mov	r2, r0
 8006af8:	693b      	ldr	r3, [r7, #16]
 8006afa:	1ad3      	subs	r3, r2, r3
 8006afc:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b00:	4293      	cmp	r3, r2
 8006b02:	d902      	bls.n	8006b0a <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8006b04:	2303      	movs	r3, #3
 8006b06:	77fb      	strb	r3, [r7, #31]
              break;
 8006b08:	e004      	b.n	8006b14 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8006b0a:	f7ff fded 	bl	80066e8 <LL_RCC_LSE_IsReady>
 8006b0e:	4603      	mov	r3, r0
 8006b10:	2b01      	cmp	r3, #1
 8006b12:	d1ee      	bne.n	8006af2 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8006b14:	7ffb      	ldrb	r3, [r7, #31]
 8006b16:	77bb      	strb	r3, [r7, #30]
 8006b18:	e001      	b.n	8006b1e <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b1a:	7ffb      	ldrb	r3, [r7, #31]
 8006b1c:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f003 0301 	and.w	r3, r3, #1
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d004      	beq.n	8006b34 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	699b      	ldr	r3, [r3, #24]
 8006b2e:	4618      	mov	r0, r3
 8006b30:	f7ff fe2a 	bl	8006788 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f003 0302 	and.w	r3, r3, #2
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d004      	beq.n	8006b4a <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	69db      	ldr	r3, [r3, #28]
 8006b44:	4618      	mov	r0, r3
 8006b46:	f7ff fe35 	bl	80067b4 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f003 0310 	and.w	r3, r3, #16
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d004      	beq.n	8006b60 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	f7ff fe5d 	bl	800681a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f003 0320 	and.w	r3, r3, #32
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d004      	beq.n	8006b76 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b70:	4618      	mov	r0, r3
 8006b72:	f7ff fe52 	bl	800681a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f003 0304 	and.w	r3, r3, #4
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d004      	beq.n	8006b8c <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	6a1b      	ldr	r3, [r3, #32]
 8006b86:	4618      	mov	r0, r3
 8006b88:	f7ff fe2a 	bl	80067e0 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f003 0308 	and.w	r3, r3, #8
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d004      	beq.n	8006ba2 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	f7ff fe1f 	bl	80067e0 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d022      	beq.n	8006bf4 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	f7ff fe8d 	bl	80068d2 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bbc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006bc0:	d107      	bne.n	8006bd2 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8006bc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006bc6:	68db      	ldr	r3, [r3, #12]
 8006bc8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006bcc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006bd0:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bd6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006bda:	d10b      	bne.n	8006bf4 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	3304      	adds	r3, #4
 8006be0:	4618      	mov	r0, r3
 8006be2:	f000 f8dd 	bl	8006da0 <RCCEx_PLLSAI1_ConfigNQ>
 8006be6:	4603      	mov	r3, r0
 8006be8:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8006bea:	7ffb      	ldrb	r3, [r7, #31]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d001      	beq.n	8006bf4 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8006bf0:	7ffb      	ldrb	r3, [r7, #31]
 8006bf2:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d02b      	beq.n	8006c58 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c08:	d008      	beq.n	8006c1c <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c0e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006c12:	d003      	beq.n	8006c1c <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d105      	bne.n	8006c28 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c20:	4618      	mov	r0, r3
 8006c22:	f7ff fe2a 	bl	800687a <LL_RCC_SetRNGClockSource>
 8006c26:	e00a      	b.n	8006c3e <HAL_RCCEx_PeriphCLKConfig+0x240>
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006c30:	60fb      	str	r3, [r7, #12]
 8006c32:	2000      	movs	r0, #0
 8006c34:	f7ff fe21 	bl	800687a <LL_RCC_SetRNGClockSource>
 8006c38:	68f8      	ldr	r0, [r7, #12]
 8006c3a:	f7ff fe34 	bl	80068a6 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c42:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8006c46:	d107      	bne.n	8006c58 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8006c48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c4c:	68db      	ldr	r3, [r3, #12]
 8006c4e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006c52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006c56:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d022      	beq.n	8006caa <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c68:	4618      	mov	r0, r3
 8006c6a:	f7ff fe3d 	bl	80068e8 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c72:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c76:	d107      	bne.n	8006c88 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006c78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c7c:	68db      	ldr	r3, [r3, #12]
 8006c7e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006c82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c86:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c8c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006c90:	d10b      	bne.n	8006caa <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	3304      	adds	r3, #4
 8006c96:	4618      	mov	r0, r3
 8006c98:	f000 f8dd 	bl	8006e56 <RCCEx_PLLSAI1_ConfigNR>
 8006c9c:	4603      	mov	r3, r0
 8006c9e:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8006ca0:	7ffb      	ldrb	r3, [r7, #31]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d001      	beq.n	8006caa <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8006ca6:	7ffb      	ldrb	r3, [r7, #31]
 8006ca8:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d004      	beq.n	8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cba:	4618      	mov	r0, r3
 8006cbc:	f7ff fd26 	bl	800670c <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d009      	beq.n	8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	f7ff fd45 	bl	8006760 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006cda:	4618      	mov	r0, r3
 8006cdc:	f7ff fd2c 	bl	8006738 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8006ce0:	7fbb      	ldrb	r3, [r7, #30]
}
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	3720      	adds	r7, #32
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	bd80      	pop	{r7, pc}

08006cea <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8006cea:	b580      	push	{r7, lr}
 8006cec:	b084      	sub	sp, #16
 8006cee:	af00      	add	r7, sp, #0
 8006cf0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8006cf6:	f7ff fe61 	bl	80069bc <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006cfa:	f7fc fac1 	bl	8003280 <HAL_GetTick>
 8006cfe:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006d00:	e009      	b.n	8006d16 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006d02:	f7fc fabd 	bl	8003280 <HAL_GetTick>
 8006d06:	4602      	mov	r2, r0
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	1ad3      	subs	r3, r2, r3
 8006d0c:	2b02      	cmp	r3, #2
 8006d0e:	d902      	bls.n	8006d16 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8006d10:	2303      	movs	r3, #3
 8006d12:	73fb      	strb	r3, [r7, #15]
      break;
 8006d14:	e004      	b.n	8006d20 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006d16:	f7ff fe60 	bl	80069da <LL_RCC_PLLSAI1_IsReady>
 8006d1a:	4603      	mov	r3, r0
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d1f0      	bne.n	8006d02 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8006d20:	7bfb      	ldrb	r3, [r7, #15]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d137      	bne.n	8006d96 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8006d26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d2a:	691b      	ldr	r3, [r3, #16]
 8006d2c:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	021b      	lsls	r3, r3, #8
 8006d36:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006d3a:	4313      	orrs	r3, r2
 8006d3c:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8006d3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d42:	691b      	ldr	r3, [r3, #16]
 8006d44:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	685b      	ldr	r3, [r3, #4]
 8006d4c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006d50:	4313      	orrs	r3, r2
 8006d52:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8006d54:	f7ff fe23 	bl	800699e <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006d58:	f7fc fa92 	bl	8003280 <HAL_GetTick>
 8006d5c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006d5e:	e009      	b.n	8006d74 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006d60:	f7fc fa8e 	bl	8003280 <HAL_GetTick>
 8006d64:	4602      	mov	r2, r0
 8006d66:	68bb      	ldr	r3, [r7, #8]
 8006d68:	1ad3      	subs	r3, r2, r3
 8006d6a:	2b02      	cmp	r3, #2
 8006d6c:	d902      	bls.n	8006d74 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8006d6e:	2303      	movs	r3, #3
 8006d70:	73fb      	strb	r3, [r7, #15]
        break;
 8006d72:	e004      	b.n	8006d7e <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006d74:	f7ff fe31 	bl	80069da <LL_RCC_PLLSAI1_IsReady>
 8006d78:	4603      	mov	r3, r0
 8006d7a:	2b01      	cmp	r3, #1
 8006d7c:	d1f0      	bne.n	8006d60 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8006d7e:	7bfb      	ldrb	r3, [r7, #15]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d108      	bne.n	8006d96 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8006d84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d88:	691a      	ldr	r2, [r3, #16]
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	691b      	ldr	r3, [r3, #16]
 8006d8e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006d92:	4313      	orrs	r3, r2
 8006d94:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8006d96:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d98:	4618      	mov	r0, r3
 8006d9a:	3710      	adds	r7, #16
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	bd80      	pop	{r7, pc}

08006da0 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b084      	sub	sp, #16
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006da8:	2300      	movs	r3, #0
 8006daa:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8006dac:	f7ff fe06 	bl	80069bc <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006db0:	f7fc fa66 	bl	8003280 <HAL_GetTick>
 8006db4:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006db6:	e009      	b.n	8006dcc <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006db8:	f7fc fa62 	bl	8003280 <HAL_GetTick>
 8006dbc:	4602      	mov	r2, r0
 8006dbe:	68bb      	ldr	r3, [r7, #8]
 8006dc0:	1ad3      	subs	r3, r2, r3
 8006dc2:	2b02      	cmp	r3, #2
 8006dc4:	d902      	bls.n	8006dcc <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8006dc6:	2303      	movs	r3, #3
 8006dc8:	73fb      	strb	r3, [r7, #15]
      break;
 8006dca:	e004      	b.n	8006dd6 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006dcc:	f7ff fe05 	bl	80069da <LL_RCC_PLLSAI1_IsReady>
 8006dd0:	4603      	mov	r3, r0
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d1f0      	bne.n	8006db8 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8006dd6:	7bfb      	ldrb	r3, [r7, #15]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d137      	bne.n	8006e4c <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8006ddc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006de0:	691b      	ldr	r3, [r3, #16]
 8006de2:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	021b      	lsls	r3, r3, #8
 8006dec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006df0:	4313      	orrs	r3, r2
 8006df2:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8006df4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006df8:	691b      	ldr	r3, [r3, #16]
 8006dfa:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	689b      	ldr	r3, [r3, #8]
 8006e02:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006e06:	4313      	orrs	r3, r2
 8006e08:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8006e0a:	f7ff fdc8 	bl	800699e <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e0e:	f7fc fa37 	bl	8003280 <HAL_GetTick>
 8006e12:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006e14:	e009      	b.n	8006e2a <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006e16:	f7fc fa33 	bl	8003280 <HAL_GetTick>
 8006e1a:	4602      	mov	r2, r0
 8006e1c:	68bb      	ldr	r3, [r7, #8]
 8006e1e:	1ad3      	subs	r3, r2, r3
 8006e20:	2b02      	cmp	r3, #2
 8006e22:	d902      	bls.n	8006e2a <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8006e24:	2303      	movs	r3, #3
 8006e26:	73fb      	strb	r3, [r7, #15]
        break;
 8006e28:	e004      	b.n	8006e34 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006e2a:	f7ff fdd6 	bl	80069da <LL_RCC_PLLSAI1_IsReady>
 8006e2e:	4603      	mov	r3, r0
 8006e30:	2b01      	cmp	r3, #1
 8006e32:	d1f0      	bne.n	8006e16 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8006e34:	7bfb      	ldrb	r3, [r7, #15]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d108      	bne.n	8006e4c <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8006e3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e3e:	691a      	ldr	r2, [r3, #16]
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	691b      	ldr	r3, [r3, #16]
 8006e44:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006e48:	4313      	orrs	r3, r2
 8006e4a:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8006e4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e4e:	4618      	mov	r0, r3
 8006e50:	3710      	adds	r7, #16
 8006e52:	46bd      	mov	sp, r7
 8006e54:	bd80      	pop	{r7, pc}

08006e56 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8006e56:	b580      	push	{r7, lr}
 8006e58:	b084      	sub	sp, #16
 8006e5a:	af00      	add	r7, sp, #0
 8006e5c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006e5e:	2300      	movs	r3, #0
 8006e60:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8006e62:	f7ff fdab 	bl	80069bc <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006e66:	f7fc fa0b 	bl	8003280 <HAL_GetTick>
 8006e6a:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006e6c:	e009      	b.n	8006e82 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006e6e:	f7fc fa07 	bl	8003280 <HAL_GetTick>
 8006e72:	4602      	mov	r2, r0
 8006e74:	68bb      	ldr	r3, [r7, #8]
 8006e76:	1ad3      	subs	r3, r2, r3
 8006e78:	2b02      	cmp	r3, #2
 8006e7a:	d902      	bls.n	8006e82 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8006e7c:	2303      	movs	r3, #3
 8006e7e:	73fb      	strb	r3, [r7, #15]
      break;
 8006e80:	e004      	b.n	8006e8c <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006e82:	f7ff fdaa 	bl	80069da <LL_RCC_PLLSAI1_IsReady>
 8006e86:	4603      	mov	r3, r0
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d1f0      	bne.n	8006e6e <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8006e8c:	7bfb      	ldrb	r3, [r7, #15]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d137      	bne.n	8006f02 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8006e92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e96:	691b      	ldr	r3, [r3, #16]
 8006e98:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	021b      	lsls	r3, r3, #8
 8006ea2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006ea6:	4313      	orrs	r3, r2
 8006ea8:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8006eaa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006eae:	691b      	ldr	r3, [r3, #16]
 8006eb0:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	68db      	ldr	r3, [r3, #12]
 8006eb8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006ebc:	4313      	orrs	r3, r2
 8006ebe:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8006ec0:	f7ff fd6d 	bl	800699e <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ec4:	f7fc f9dc 	bl	8003280 <HAL_GetTick>
 8006ec8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006eca:	e009      	b.n	8006ee0 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006ecc:	f7fc f9d8 	bl	8003280 <HAL_GetTick>
 8006ed0:	4602      	mov	r2, r0
 8006ed2:	68bb      	ldr	r3, [r7, #8]
 8006ed4:	1ad3      	subs	r3, r2, r3
 8006ed6:	2b02      	cmp	r3, #2
 8006ed8:	d902      	bls.n	8006ee0 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8006eda:	2303      	movs	r3, #3
 8006edc:	73fb      	strb	r3, [r7, #15]
        break;
 8006ede:	e004      	b.n	8006eea <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006ee0:	f7ff fd7b 	bl	80069da <LL_RCC_PLLSAI1_IsReady>
 8006ee4:	4603      	mov	r3, r0
 8006ee6:	2b01      	cmp	r3, #1
 8006ee8:	d1f0      	bne.n	8006ecc <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8006eea:	7bfb      	ldrb	r3, [r7, #15]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d108      	bne.n	8006f02 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8006ef0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ef4:	691a      	ldr	r2, [r3, #16]
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	691b      	ldr	r3, [r3, #16]
 8006efa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006efe:	4313      	orrs	r3, r2
 8006f00:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8006f02:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f04:	4618      	mov	r0, r3
 8006f06:	3710      	adds	r7, #16
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	bd80      	pop	{r7, pc}

08006f0c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b084      	sub	sp, #16
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d101      	bne.n	8006f1e <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8006f1a:	2301      	movs	r3, #1
 8006f1c:	e09f      	b.n	800705e <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006f24:	b2db      	uxtb	r3, r3
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d106      	bne.n	8006f38 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8006f32:	6878      	ldr	r0, [r7, #4]
 8006f34:	f7fb fe86 	bl	8002c44 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2202      	movs	r2, #2
 8006f3c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8006f40:	4b49      	ldr	r3, [pc, #292]	; (8007068 <HAL_RTC_Init+0x15c>)
 8006f42:	68db      	ldr	r3, [r3, #12]
 8006f44:	f003 0310 	and.w	r3, r3, #16
 8006f48:	2b10      	cmp	r3, #16
 8006f4a:	d07e      	beq.n	800704a <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	22ca      	movs	r2, #202	; 0xca
 8006f52:	625a      	str	r2, [r3, #36]	; 0x24
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	2253      	movs	r2, #83	; 0x53
 8006f5a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8006f5c:	6878      	ldr	r0, [r7, #4]
 8006f5e:	f000 f8ab 	bl	80070b8 <RTC_EnterInitMode>
 8006f62:	4603      	mov	r3, r0
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d00a      	beq.n	8006f7e <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	22ff      	movs	r2, #255	; 0xff
 8006f6e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2204      	movs	r2, #4
 8006f74:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      status = HAL_ERROR;
 8006f78:	2301      	movs	r3, #1
 8006f7a:	73fb      	strb	r3, [r7, #15]
 8006f7c:	e067      	b.n	800704e <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	689b      	ldr	r3, [r3, #8]
 8006f84:	687a      	ldr	r2, [r7, #4]
 8006f86:	6812      	ldr	r2, [r2, #0]
 8006f88:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006f8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f90:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	6899      	ldr	r1, [r3, #8]
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	685a      	ldr	r2, [r3, #4]
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	691b      	ldr	r3, [r3, #16]
 8006fa0:	431a      	orrs	r2, r3
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	699b      	ldr	r3, [r3, #24]
 8006fa6:	431a      	orrs	r2, r3
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	430a      	orrs	r2, r1
 8006fae:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	687a      	ldr	r2, [r7, #4]
 8006fb6:	68d2      	ldr	r2, [r2, #12]
 8006fb8:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	6919      	ldr	r1, [r3, #16]
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	689b      	ldr	r3, [r3, #8]
 8006fc4:	041a      	lsls	r2, r3, #16
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	430a      	orrs	r2, r1
 8006fcc:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	68da      	ldr	r2, [r3, #12]
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006fdc:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f022 0203 	bic.w	r2, r2, #3
 8006fec:	64da      	str	r2, [r3, #76]	; 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	69da      	ldr	r2, [r3, #28]
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	695b      	ldr	r3, [r3, #20]
 8006ffc:	431a      	orrs	r2, r3
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	430a      	orrs	r2, r1
 8007004:	64da      	str	r2, [r3, #76]	; 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	689b      	ldr	r3, [r3, #8]
 800700c:	f003 0320 	and.w	r3, r3, #32
 8007010:	2b00      	cmp	r3, #0
 8007012:	d113      	bne.n	800703c <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007014:	6878      	ldr	r0, [r7, #4]
 8007016:	f000 f829 	bl	800706c <HAL_RTC_WaitForSynchro>
 800701a:	4603      	mov	r3, r0
 800701c:	2b00      	cmp	r3, #0
 800701e:	d00d      	beq.n	800703c <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	22ff      	movs	r2, #255	; 0xff
 8007026:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2204      	movs	r2, #4
 800702c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2200      	movs	r2, #0
 8007034:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 8007038:	2301      	movs	r3, #1
 800703a:	e010      	b.n	800705e <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	22ff      	movs	r2, #255	; 0xff
 8007042:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      status = HAL_OK;
 8007044:	2300      	movs	r3, #0
 8007046:	73fb      	strb	r3, [r7, #15]
 8007048:	e001      	b.n	800704e <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 800704a:	2300      	movs	r3, #0
 800704c:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800704e:	7bfb      	ldrb	r3, [r7, #15]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d103      	bne.n	800705c <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2201      	movs	r2, #1
 8007058:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  return status;
 800705c:	7bfb      	ldrb	r3, [r7, #15]
}
 800705e:	4618      	mov	r0, r3
 8007060:	3710      	adds	r7, #16
 8007062:	46bd      	mov	sp, r7
 8007064:	bd80      	pop	{r7, pc}
 8007066:	bf00      	nop
 8007068:	40002800 	.word	0x40002800

0800706c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b084      	sub	sp, #16
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	68da      	ldr	r2, [r3, #12]
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007082:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8007084:	f7fc f8fc 	bl	8003280 <HAL_GetTick>
 8007088:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800708a:	e009      	b.n	80070a0 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800708c:	f7fc f8f8 	bl	8003280 <HAL_GetTick>
 8007090:	4602      	mov	r2, r0
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	1ad3      	subs	r3, r2, r3
 8007096:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800709a:	d901      	bls.n	80070a0 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800709c:	2303      	movs	r3, #3
 800709e:	e007      	b.n	80070b0 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	68db      	ldr	r3, [r3, #12]
 80070a6:	f003 0320 	and.w	r3, r3, #32
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d0ee      	beq.n	800708c <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 80070ae:	2300      	movs	r3, #0
}
 80070b0:	4618      	mov	r0, r3
 80070b2:	3710      	adds	r7, #16
 80070b4:	46bd      	mov	sp, r7
 80070b6:	bd80      	pop	{r7, pc}

080070b8 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b084      	sub	sp, #16
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	68db      	ldr	r3, [r3, #12]
 80070c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d119      	bne.n	8007102 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80070d6:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80070d8:	f7fc f8d2 	bl	8003280 <HAL_GetTick>
 80070dc:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80070de:	e009      	b.n	80070f4 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80070e0:	f7fc f8ce 	bl	8003280 <HAL_GetTick>
 80070e4:	4602      	mov	r2, r0
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	1ad3      	subs	r3, r2, r3
 80070ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80070ee:	d901      	bls.n	80070f4 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 80070f0:	2303      	movs	r3, #3
 80070f2:	e007      	b.n	8007104 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	68db      	ldr	r3, [r3, #12]
 80070fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d0ee      	beq.n	80070e0 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8007102:	2300      	movs	r3, #0
}
 8007104:	4618      	mov	r0, r3
 8007106:	3710      	adds	r7, #16
 8007108:	46bd      	mov	sp, r7
 800710a:	bd80      	pop	{r7, pc}

0800710c <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b086      	sub	sp, #24
 8007110:	af00      	add	r7, sp, #0
 8007112:	60f8      	str	r0, [r7, #12]
 8007114:	60b9      	str	r1, [r7, #8]
 8007116:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800711e:	2b01      	cmp	r3, #1
 8007120:	d101      	bne.n	8007126 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 8007122:	2302      	movs	r3, #2
 8007124:	e0a8      	b.n	8007278 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	2201      	movs	r2, #1
 800712a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	2202      	movs	r2, #2
 8007132:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	22ca      	movs	r2, #202	; 0xca
 800713c:	625a      	str	r2, [r3, #36]	; 0x24
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	2253      	movs	r2, #83	; 0x53
 8007144:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	689b      	ldr	r3, [r3, #8]
 800714c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007150:	2b00      	cmp	r3, #0
 8007152:	d020      	beq.n	8007196 <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 8007154:	f7fc f894 	bl	8003280 <HAL_GetTick>
 8007158:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 800715a:	e015      	b.n	8007188 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800715c:	f7fc f890 	bl	8003280 <HAL_GetTick>
 8007160:	4602      	mov	r2, r0
 8007162:	697b      	ldr	r3, [r7, #20]
 8007164:	1ad3      	subs	r3, r2, r3
 8007166:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800716a:	d90d      	bls.n	8007188 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	22ff      	movs	r2, #255	; 0xff
 8007172:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	2203      	movs	r2, #3
 8007178:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	2200      	movs	r2, #0
 8007180:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8007184:	2303      	movs	r3, #3
 8007186:	e077      	b.n	8007278 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	68db      	ldr	r3, [r3, #12]
 800718e:	f003 0304 	and.w	r3, r3, #4
 8007192:	2b00      	cmp	r3, #0
 8007194:	d1e2      	bne.n	800715c <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	689a      	ldr	r2, [r3, #8]
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80071a4:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	68db      	ldr	r3, [r3, #12]
 80071ac:	b2da      	uxtb	r2, r3
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80071b6:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80071b8:	f7fc f862 	bl	8003280 <HAL_GetTick>
 80071bc:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80071be:	e015      	b.n	80071ec <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80071c0:	f7fc f85e 	bl	8003280 <HAL_GetTick>
 80071c4:	4602      	mov	r2, r0
 80071c6:	697b      	ldr	r3, [r7, #20]
 80071c8:	1ad3      	subs	r3, r2, r3
 80071ca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80071ce:	d90d      	bls.n	80071ec <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	22ff      	movs	r2, #255	; 0xff
 80071d6:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	2203      	movs	r2, #3
 80071dc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	2200      	movs	r2, #0
 80071e4:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 80071e8:	2303      	movs	r3, #3
 80071ea:	e045      	b.n	8007278 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	68db      	ldr	r3, [r3, #12]
 80071f2:	f003 0304 	and.w	r3, r3, #4
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d0e2      	beq.n	80071c0 <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	68ba      	ldr	r2, [r7, #8]
 8007200:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	689a      	ldr	r2, [r3, #8]
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f022 0207 	bic.w	r2, r2, #7
 8007210:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	6899      	ldr	r1, [r3, #8]
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	687a      	ldr	r2, [r7, #4]
 800721e:	430a      	orrs	r2, r1
 8007220:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8007222:	4b17      	ldr	r3, [pc, #92]	; (8007280 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8007224:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007228:	4a15      	ldr	r2, [pc, #84]	; (8007280 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800722a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800722e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8007232:	4b13      	ldr	r3, [pc, #76]	; (8007280 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	4a12      	ldr	r2, [pc, #72]	; (8007280 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8007238:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800723c:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	689a      	ldr	r2, [r3, #8]
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800724c:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	689a      	ldr	r2, [r3, #8]
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800725c:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	22ff      	movs	r2, #255	; 0xff
 8007264:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	2201      	movs	r2, #1
 800726a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	2200      	movs	r2, #0
 8007272:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8007276:	2300      	movs	r3, #0
}
 8007278:	4618      	mov	r0, r3
 800727a:	3718      	adds	r7, #24
 800727c:	46bd      	mov	sp, r7
 800727e:	bd80      	pop	{r7, pc}
 8007280:	58000800 	.word	0x58000800

08007284 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b084      	sub	sp, #16
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d101      	bne.n	8007296 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007292:	2301      	movs	r3, #1
 8007294:	e095      	b.n	80073c2 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800729a:	2b00      	cmp	r3, #0
 800729c:	d108      	bne.n	80072b0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	685b      	ldr	r3, [r3, #4]
 80072a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80072a6:	d009      	beq.n	80072bc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2200      	movs	r2, #0
 80072ac:	61da      	str	r2, [r3, #28]
 80072ae:	e005      	b.n	80072bc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2200      	movs	r2, #0
 80072b4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	2200      	movs	r2, #0
 80072ba:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2200      	movs	r2, #0
 80072c0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80072c8:	b2db      	uxtb	r3, r3
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d106      	bne.n	80072dc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	2200      	movs	r2, #0
 80072d2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80072d6:	6878      	ldr	r0, [r7, #4]
 80072d8:	f7fb fce8 	bl	8002cac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2202      	movs	r2, #2
 80072e0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	681a      	ldr	r2, [r3, #0]
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80072f2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	68db      	ldr	r3, [r3, #12]
 80072f8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80072fc:	d902      	bls.n	8007304 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80072fe:	2300      	movs	r3, #0
 8007300:	60fb      	str	r3, [r7, #12]
 8007302:	e002      	b.n	800730a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007304:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007308:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	68db      	ldr	r3, [r3, #12]
 800730e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8007312:	d007      	beq.n	8007324 <HAL_SPI_Init+0xa0>
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	68db      	ldr	r3, [r3, #12]
 8007318:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800731c:	d002      	beq.n	8007324 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	2200      	movs	r2, #0
 8007322:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	685b      	ldr	r3, [r3, #4]
 8007328:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	689b      	ldr	r3, [r3, #8]
 8007330:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007334:	431a      	orrs	r2, r3
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	691b      	ldr	r3, [r3, #16]
 800733a:	f003 0302 	and.w	r3, r3, #2
 800733e:	431a      	orrs	r2, r3
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	695b      	ldr	r3, [r3, #20]
 8007344:	f003 0301 	and.w	r3, r3, #1
 8007348:	431a      	orrs	r2, r3
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	699b      	ldr	r3, [r3, #24]
 800734e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007352:	431a      	orrs	r2, r3
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	69db      	ldr	r3, [r3, #28]
 8007358:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800735c:	431a      	orrs	r2, r3
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	6a1b      	ldr	r3, [r3, #32]
 8007362:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007366:	ea42 0103 	orr.w	r1, r2, r3
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800736e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	430a      	orrs	r2, r1
 8007378:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	699b      	ldr	r3, [r3, #24]
 800737e:	0c1b      	lsrs	r3, r3, #16
 8007380:	f003 0204 	and.w	r2, r3, #4
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007388:	f003 0310 	and.w	r3, r3, #16
 800738c:	431a      	orrs	r2, r3
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007392:	f003 0308 	and.w	r3, r3, #8
 8007396:	431a      	orrs	r2, r3
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	68db      	ldr	r3, [r3, #12]
 800739c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80073a0:	ea42 0103 	orr.w	r1, r2, r3
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	430a      	orrs	r2, r1
 80073b0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2200      	movs	r2, #0
 80073b6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2201      	movs	r2, #1
 80073bc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80073c0:	2300      	movs	r3, #0
}
 80073c2:	4618      	mov	r0, r3
 80073c4:	3710      	adds	r7, #16
 80073c6:	46bd      	mov	sp, r7
 80073c8:	bd80      	pop	{r7, pc}
	...

080073cc <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b086      	sub	sp, #24
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	60f8      	str	r0, [r7, #12]
 80073d4:	60b9      	str	r1, [r7, #8]
 80073d6:	4613      	mov	r3, r2
 80073d8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80073da:	2300      	movs	r3, #0
 80073dc:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80073e4:	2b01      	cmp	r3, #1
 80073e6:	d101      	bne.n	80073ec <HAL_SPI_Transmit_DMA+0x20>
 80073e8:	2302      	movs	r3, #2
 80073ea:	e0d8      	b.n	800759e <HAL_SPI_Transmit_DMA+0x1d2>
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	2201      	movs	r2, #1
 80073f0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80073fa:	b2db      	uxtb	r3, r3
 80073fc:	2b01      	cmp	r3, #1
 80073fe:	d002      	beq.n	8007406 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8007400:	2302      	movs	r3, #2
 8007402:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007404:	e0c6      	b.n	8007594 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  if ((pData == NULL) || (Size == 0U))
 8007406:	68bb      	ldr	r3, [r7, #8]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d002      	beq.n	8007412 <HAL_SPI_Transmit_DMA+0x46>
 800740c:	88fb      	ldrh	r3, [r7, #6]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d102      	bne.n	8007418 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8007412:	2301      	movs	r3, #1
 8007414:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007416:	e0bd      	b.n	8007594 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	2203      	movs	r2, #3
 800741c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	2200      	movs	r2, #0
 8007424:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	68ba      	ldr	r2, [r7, #8]
 800742a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	88fa      	ldrh	r2, [r7, #6]
 8007430:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	88fa      	ldrh	r2, [r7, #6]
 8007436:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	2200      	movs	r2, #0
 800743c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	2200      	movs	r2, #0
 8007442:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	2200      	movs	r2, #0
 8007448:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	2200      	movs	r2, #0
 800744e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	2200      	movs	r2, #0
 8007456:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	689b      	ldr	r3, [r3, #8]
 800745e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007462:	d10f      	bne.n	8007484 <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	681a      	ldr	r2, [r3, #0]
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007472:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	681a      	ldr	r2, [r3, #0]
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007482:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007488:	4a47      	ldr	r2, [pc, #284]	; (80075a8 <HAL_SPI_Transmit_DMA+0x1dc>)
 800748a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007490:	4a46      	ldr	r2, [pc, #280]	; (80075ac <HAL_SPI_Transmit_DMA+0x1e0>)
 8007492:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007498:	4a45      	ldr	r2, [pc, #276]	; (80075b0 <HAL_SPI_Transmit_DMA+0x1e4>)
 800749a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074a0:	2200      	movs	r2, #0
 80074a2:	639a      	str	r2, [r3, #56]	; 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	685a      	ldr	r2, [r3, #4]
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80074b2:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	68db      	ldr	r3, [r3, #12]
 80074b8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80074bc:	d82d      	bhi.n	800751a <HAL_SPI_Transmit_DMA+0x14e>
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074c2:	699b      	ldr	r3, [r3, #24]
 80074c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80074c8:	d127      	bne.n	800751a <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80074ce:	b29b      	uxth	r3, r3
 80074d0:	f003 0301 	and.w	r3, r3, #1
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d10f      	bne.n	80074f8 <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	685a      	ldr	r2, [r3, #4]
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80074e6:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80074ec:	b29b      	uxth	r3, r3
 80074ee:	085b      	lsrs	r3, r3, #1
 80074f0:	b29a      	uxth	r2, r3
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80074f6:	e010      	b.n	800751a <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	685a      	ldr	r2, [r3, #4]
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007506:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800750c:	b29b      	uxth	r3, r3
 800750e:	085b      	lsrs	r3, r3, #1
 8007510:	b29b      	uxth	r3, r3
 8007512:	3301      	adds	r3, #1
 8007514:	b29a      	uxth	r2, r3
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007522:	4619      	mov	r1, r3
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	330c      	adds	r3, #12
 800752a:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007530:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8007532:	f7fc f90b 	bl	800374c <HAL_DMA_Start_IT>
 8007536:	4603      	mov	r3, r0
 8007538:	2b00      	cmp	r3, #0
 800753a:	d00c      	beq.n	8007556 <HAL_SPI_Transmit_DMA+0x18a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007540:	f043 0210 	orr.w	r2, r3, #16
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8007548:	2301      	movs	r3, #1
 800754a:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	2201      	movs	r2, #1
 8007550:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8007554:	e01e      	b.n	8007594 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007560:	2b40      	cmp	r3, #64	; 0x40
 8007562:	d007      	beq.n	8007574 <HAL_SPI_Transmit_DMA+0x1a8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	681a      	ldr	r2, [r3, #0]
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007572:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	685a      	ldr	r2, [r3, #4]
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	f042 0220 	orr.w	r2, r2, #32
 8007582:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	685a      	ldr	r2, [r3, #4]
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	f042 0202 	orr.w	r2, r2, #2
 8007592:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	2200      	movs	r2, #0
 8007598:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800759c:	7dfb      	ldrb	r3, [r7, #23]
}
 800759e:	4618      	mov	r0, r3
 80075a0:	3718      	adds	r7, #24
 80075a2:	46bd      	mov	sp, r7
 80075a4:	bd80      	pop	{r7, pc}
 80075a6:	bf00      	nop
 80075a8:	08007f9b 	.word	0x08007f9b
 80075ac:	08007dbd 	.word	0x08007dbd
 80075b0:	08007fef 	.word	0x08007fef

080075b4 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80075b4:	b580      	push	{r7, lr}
 80075b6:	b086      	sub	sp, #24
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	60f8      	str	r0, [r7, #12]
 80075bc:	60b9      	str	r1, [r7, #8]
 80075be:	4613      	mov	r3, r2
 80075c0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80075c2:	2300      	movs	r3, #0
 80075c4:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	689b      	ldr	r3, [r3, #8]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d110      	bne.n	80075f0 <HAL_SPI_Receive_DMA+0x3c>
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	685b      	ldr	r3, [r3, #4]
 80075d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80075d6:	d10b      	bne.n	80075f0 <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	2204      	movs	r2, #4
 80075dc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 80075e0:	88fb      	ldrh	r3, [r7, #6]
 80075e2:	68ba      	ldr	r2, [r7, #8]
 80075e4:	68b9      	ldr	r1, [r7, #8]
 80075e6:	68f8      	ldr	r0, [r7, #12]
 80075e8:	f000 f908 	bl	80077fc <HAL_SPI_TransmitReceive_DMA>
 80075ec:	4603      	mov	r3, r0
 80075ee:	e0fb      	b.n	80077e8 <HAL_SPI_Receive_DMA+0x234>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80075f6:	2b01      	cmp	r3, #1
 80075f8:	d101      	bne.n	80075fe <HAL_SPI_Receive_DMA+0x4a>
 80075fa:	2302      	movs	r3, #2
 80075fc:	e0f4      	b.n	80077e8 <HAL_SPI_Receive_DMA+0x234>
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	2201      	movs	r2, #1
 8007602:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800760c:	b2db      	uxtb	r3, r3
 800760e:	2b01      	cmp	r3, #1
 8007610:	d002      	beq.n	8007618 <HAL_SPI_Receive_DMA+0x64>
  {
    errorcode = HAL_BUSY;
 8007612:	2302      	movs	r3, #2
 8007614:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007616:	e0e2      	b.n	80077de <HAL_SPI_Receive_DMA+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 8007618:	68bb      	ldr	r3, [r7, #8]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d002      	beq.n	8007624 <HAL_SPI_Receive_DMA+0x70>
 800761e:	88fb      	ldrh	r3, [r7, #6]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d102      	bne.n	800762a <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 8007624:	2301      	movs	r3, #1
 8007626:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007628:	e0d9      	b.n	80077de <HAL_SPI_Receive_DMA+0x22a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	2204      	movs	r2, #4
 800762e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	2200      	movs	r2, #0
 8007636:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	68ba      	ldr	r2, [r7, #8]
 800763c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	88fa      	ldrh	r2, [r7, #6]
 8007642:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	88fa      	ldrh	r2, [r7, #6]
 800764a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	2200      	movs	r2, #0
 8007652:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	2200      	movs	r2, #0
 8007658:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->TxXferSize  = 0U;
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	2200      	movs	r2, #0
 800765e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	2200      	movs	r2, #0
 8007664:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	689b      	ldr	r3, [r3, #8]
 800766a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800766e:	d10f      	bne.n	8007690 <HAL_SPI_Receive_DMA+0xdc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	681a      	ldr	r2, [r3, #0]
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800767e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	681a      	ldr	r2, [r3, #0]
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800768e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */


  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	685a      	ldr	r2, [r3, #4]
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800769e:	605a      	str	r2, [r3, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	68db      	ldr	r3, [r3, #12]
 80076a4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80076a8:	d908      	bls.n	80076bc <HAL_SPI_Receive_DMA+0x108>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	685a      	ldr	r2, [r3, #4]
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80076b8:	605a      	str	r2, [r3, #4]
 80076ba:	e042      	b.n	8007742 <HAL_SPI_Receive_DMA+0x18e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	685a      	ldr	r2, [r3, #4]
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80076ca:	605a      	str	r2, [r3, #4]

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076d0:	699b      	ldr	r3, [r3, #24]
 80076d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80076d6:	d134      	bne.n	8007742 <HAL_SPI_Receive_DMA+0x18e>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	685a      	ldr	r2, [r3, #4]
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80076e6:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80076ee:	b29b      	uxth	r3, r3
 80076f0:	f003 0301 	and.w	r3, r3, #1
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d111      	bne.n	800771c <HAL_SPI_Receive_DMA+0x168>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	685a      	ldr	r2, [r3, #4]
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007706:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800770e:	b29b      	uxth	r3, r3
 8007710:	085b      	lsrs	r3, r3, #1
 8007712:	b29a      	uxth	r2, r3
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800771a:	e012      	b.n	8007742 <HAL_SPI_Receive_DMA+0x18e>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	685a      	ldr	r2, [r3, #4]
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800772a:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007732:	b29b      	uxth	r3, r3
 8007734:	085b      	lsrs	r3, r3, #1
 8007736:	b29b      	uxth	r3, r3
 8007738:	3301      	adds	r3, #1
 800773a:	b29a      	uxth	r2, r3
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007746:	4a2a      	ldr	r2, [pc, #168]	; (80077f0 <HAL_SPI_Receive_DMA+0x23c>)
 8007748:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800774e:	4a29      	ldr	r2, [pc, #164]	; (80077f4 <HAL_SPI_Receive_DMA+0x240>)
 8007750:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007756:	4a28      	ldr	r2, [pc, #160]	; (80077f8 <HAL_SPI_Receive_DMA+0x244>)
 8007758:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800775e:	2200      	movs	r2, #0
 8007760:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	330c      	adds	r3, #12
 800776c:	4619      	mov	r1, r3
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007772:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800777a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800777c:	f7fb ffe6 	bl	800374c <HAL_DMA_Start_IT>
 8007780:	4603      	mov	r3, r0
 8007782:	2b00      	cmp	r3, #0
 8007784:	d00c      	beq.n	80077a0 <HAL_SPI_Receive_DMA+0x1ec>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800778a:	f043 0210 	orr.w	r2, r3, #16
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8007792:	2301      	movs	r3, #1
 8007794:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	2201      	movs	r2, #1
 800779a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 800779e:	e01e      	b.n	80077de <HAL_SPI_Receive_DMA+0x22a>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077aa:	2b40      	cmp	r3, #64	; 0x40
 80077ac:	d007      	beq.n	80077be <HAL_SPI_Receive_DMA+0x20a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	681a      	ldr	r2, [r3, #0]
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80077bc:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	685a      	ldr	r2, [r3, #4]
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	f042 0220 	orr.w	r2, r2, #32
 80077cc:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	685a      	ldr	r2, [r3, #4]
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f042 0201 	orr.w	r2, r2, #1
 80077dc:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	2200      	movs	r2, #0
 80077e2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80077e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80077e8:	4618      	mov	r0, r3
 80077ea:	3718      	adds	r7, #24
 80077ec:	46bd      	mov	sp, r7
 80077ee:	bd80      	pop	{r7, pc}
 80077f0:	08007fb7 	.word	0x08007fb7
 80077f4:	08007e63 	.word	0x08007e63
 80077f8:	08007fef 	.word	0x08007fef

080077fc <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 80077fc:	b580      	push	{r7, lr}
 80077fe:	b086      	sub	sp, #24
 8007800:	af00      	add	r7, sp, #0
 8007802:	60f8      	str	r0, [r7, #12]
 8007804:	60b9      	str	r1, [r7, #8]
 8007806:	607a      	str	r2, [r7, #4]
 8007808:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800780a:	2300      	movs	r3, #0
 800780c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007814:	2b01      	cmp	r3, #1
 8007816:	d101      	bne.n	800781c <HAL_SPI_TransmitReceive_DMA+0x20>
 8007818:	2302      	movs	r3, #2
 800781a:	e16c      	b.n	8007af6 <HAL_SPI_TransmitReceive_DMA+0x2fa>
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	2201      	movs	r2, #1
 8007820:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800782a:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	685b      	ldr	r3, [r3, #4]
 8007830:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8007832:	7dbb      	ldrb	r3, [r7, #22]
 8007834:	2b01      	cmp	r3, #1
 8007836:	d00d      	beq.n	8007854 <HAL_SPI_TransmitReceive_DMA+0x58>
 8007838:	693b      	ldr	r3, [r7, #16]
 800783a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800783e:	d106      	bne.n	800784e <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	689b      	ldr	r3, [r3, #8]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d102      	bne.n	800784e <HAL_SPI_TransmitReceive_DMA+0x52>
 8007848:	7dbb      	ldrb	r3, [r7, #22]
 800784a:	2b04      	cmp	r3, #4
 800784c:	d002      	beq.n	8007854 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 800784e:	2302      	movs	r3, #2
 8007850:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007852:	e14b      	b.n	8007aec <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007854:	68bb      	ldr	r3, [r7, #8]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d005      	beq.n	8007866 <HAL_SPI_TransmitReceive_DMA+0x6a>
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d002      	beq.n	8007866 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8007860:	887b      	ldrh	r3, [r7, #2]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d102      	bne.n	800786c <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 8007866:	2301      	movs	r3, #1
 8007868:	75fb      	strb	r3, [r7, #23]
    goto error;
 800786a:	e13f      	b.n	8007aec <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007872:	b2db      	uxtb	r3, r3
 8007874:	2b04      	cmp	r3, #4
 8007876:	d003      	beq.n	8007880 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	2205      	movs	r2, #5
 800787c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	2200      	movs	r2, #0
 8007884:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	68ba      	ldr	r2, [r7, #8]
 800788a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	887a      	ldrh	r2, [r7, #2]
 8007890:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	887a      	ldrh	r2, [r7, #2]
 8007896:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	687a      	ldr	r2, [r7, #4]
 800789c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	887a      	ldrh	r2, [r7, #2]
 80078a2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	887a      	ldrh	r2, [r7, #2]
 80078aa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	2200      	movs	r2, #0
 80078b2:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	2200      	movs	r2, #0
 80078b8:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	685a      	ldr	r2, [r3, #4]
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 80078c8:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	68db      	ldr	r3, [r3, #12]
 80078ce:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80078d2:	d908      	bls.n	80078e6 <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	685a      	ldr	r2, [r3, #4]
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80078e2:	605a      	str	r2, [r3, #4]
 80078e4:	e06f      	b.n	80079c6 <HAL_SPI_TransmitReceive_DMA+0x1ca>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	685a      	ldr	r2, [r3, #4]
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80078f4:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078fa:	699b      	ldr	r3, [r3, #24]
 80078fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007900:	d126      	bne.n	8007950 <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8007906:	f003 0301 	and.w	r3, r3, #1
 800790a:	2b00      	cmp	r3, #0
 800790c:	d10f      	bne.n	800792e <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	685a      	ldr	r2, [r3, #4]
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800791c:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007922:	b29b      	uxth	r3, r3
 8007924:	085b      	lsrs	r3, r3, #1
 8007926:	b29a      	uxth	r2, r3
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800792c:	e010      	b.n	8007950 <HAL_SPI_TransmitReceive_DMA+0x154>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	685a      	ldr	r2, [r3, #4]
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800793c:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007942:	b29b      	uxth	r3, r3
 8007944:	085b      	lsrs	r3, r3, #1
 8007946:	b29b      	uxth	r3, r3
 8007948:	3301      	adds	r3, #1
 800794a:	b29a      	uxth	r2, r3
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007954:	699b      	ldr	r3, [r3, #24]
 8007956:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800795a:	d134      	bne.n	80079c6 <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	685a      	ldr	r2, [r3, #4]
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800796a:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007972:	b29b      	uxth	r3, r3
 8007974:	f003 0301 	and.w	r3, r3, #1
 8007978:	2b00      	cmp	r3, #0
 800797a:	d111      	bne.n	80079a0 <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	685a      	ldr	r2, [r3, #4]
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800798a:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007992:	b29b      	uxth	r3, r3
 8007994:	085b      	lsrs	r3, r3, #1
 8007996:	b29a      	uxth	r2, r3
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800799e:	e012      	b.n	80079c6 <HAL_SPI_TransmitReceive_DMA+0x1ca>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	685a      	ldr	r2, [r3, #4]
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80079ae:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80079b6:	b29b      	uxth	r3, r3
 80079b8:	085b      	lsrs	r3, r3, #1
 80079ba:	b29b      	uxth	r3, r3
 80079bc:	3301      	adds	r3, #1
 80079be:	b29a      	uxth	r2, r3
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80079cc:	b2db      	uxtb	r3, r3
 80079ce:	2b04      	cmp	r3, #4
 80079d0:	d108      	bne.n	80079e4 <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079d6:	4a4a      	ldr	r2, [pc, #296]	; (8007b00 <HAL_SPI_TransmitReceive_DMA+0x304>)
 80079d8:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079de:	4a49      	ldr	r2, [pc, #292]	; (8007b04 <HAL_SPI_TransmitReceive_DMA+0x308>)
 80079e0:	62da      	str	r2, [r3, #44]	; 0x2c
 80079e2:	e007      	b.n	80079f4 <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079e8:	4a47      	ldr	r2, [pc, #284]	; (8007b08 <HAL_SPI_TransmitReceive_DMA+0x30c>)
 80079ea:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079f0:	4a46      	ldr	r2, [pc, #280]	; (8007b0c <HAL_SPI_TransmitReceive_DMA+0x310>)
 80079f2:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079f8:	4a45      	ldr	r2, [pc, #276]	; (8007b10 <HAL_SPI_TransmitReceive_DMA+0x314>)
 80079fa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a00:	2200      	movs	r2, #0
 8007a02:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	330c      	adds	r3, #12
 8007a0e:	4619      	mov	r1, r3
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a14:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007a1c:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8007a1e:	f7fb fe95 	bl	800374c <HAL_DMA_Start_IT>
 8007a22:	4603      	mov	r3, r0
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d00c      	beq.n	8007a42 <HAL_SPI_TransmitReceive_DMA+0x246>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a2c:	f043 0210 	orr.w	r2, r3, #16
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8007a34:	2301      	movs	r3, #1
 8007a36:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	2201      	movs	r2, #1
 8007a3c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8007a40:	e054      	b.n	8007aec <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	685a      	ldr	r2, [r3, #4]
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	f042 0201 	orr.w	r2, r2, #1
 8007a50:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a56:	2200      	movs	r2, #0
 8007a58:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a5e:	2200      	movs	r2, #0
 8007a60:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a66:	2200      	movs	r2, #0
 8007a68:	635a      	str	r2, [r3, #52]	; 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a6e:	2200      	movs	r2, #0
 8007a70:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a7a:	4619      	mov	r1, r3
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	330c      	adds	r3, #12
 8007a82:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a88:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8007a8a:	f7fb fe5f 	bl	800374c <HAL_DMA_Start_IT>
 8007a8e:	4603      	mov	r3, r0
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d00c      	beq.n	8007aae <HAL_SPI_TransmitReceive_DMA+0x2b2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a98:	f043 0210 	orr.w	r2, r3, #16
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8007aa0:	2301      	movs	r3, #1
 8007aa2:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	2201      	movs	r2, #1
 8007aa8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8007aac:	e01e      	b.n	8007aec <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ab8:	2b40      	cmp	r3, #64	; 0x40
 8007aba:	d007      	beq.n	8007acc <HAL_SPI_TransmitReceive_DMA+0x2d0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	681a      	ldr	r2, [r3, #0]
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007aca:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	685a      	ldr	r2, [r3, #4]
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	f042 0220 	orr.w	r2, r2, #32
 8007ada:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	685a      	ldr	r2, [r3, #4]
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	f042 0202 	orr.w	r2, r2, #2
 8007aea:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	2200      	movs	r2, #0
 8007af0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007af4:	7dfb      	ldrb	r3, [r7, #23]
}
 8007af6:	4618      	mov	r0, r3
 8007af8:	3718      	adds	r7, #24
 8007afa:	46bd      	mov	sp, r7
 8007afc:	bd80      	pop	{r7, pc}
 8007afe:	bf00      	nop
 8007b00:	08007fb7 	.word	0x08007fb7
 8007b04:	08007e63 	.word	0x08007e63
 8007b08:	08007fd3 	.word	0x08007fd3
 8007b0c:	08007f0b 	.word	0x08007f0b
 8007b10:	08007fef 	.word	0x08007fef

08007b14 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b088      	sub	sp, #32
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	685b      	ldr	r3, [r3, #4]
 8007b22:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	689b      	ldr	r3, [r3, #8]
 8007b2a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007b2c:	69bb      	ldr	r3, [r7, #24]
 8007b2e:	099b      	lsrs	r3, r3, #6
 8007b30:	f003 0301 	and.w	r3, r3, #1
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d10f      	bne.n	8007b58 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007b38:	69bb      	ldr	r3, [r7, #24]
 8007b3a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d00a      	beq.n	8007b58 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007b42:	69fb      	ldr	r3, [r7, #28]
 8007b44:	099b      	lsrs	r3, r3, #6
 8007b46:	f003 0301 	and.w	r3, r3, #1
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d004      	beq.n	8007b58 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b52:	6878      	ldr	r0, [r7, #4]
 8007b54:	4798      	blx	r3
    return;
 8007b56:	e0d7      	b.n	8007d08 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8007b58:	69bb      	ldr	r3, [r7, #24]
 8007b5a:	085b      	lsrs	r3, r3, #1
 8007b5c:	f003 0301 	and.w	r3, r3, #1
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d00a      	beq.n	8007b7a <HAL_SPI_IRQHandler+0x66>
 8007b64:	69fb      	ldr	r3, [r7, #28]
 8007b66:	09db      	lsrs	r3, r3, #7
 8007b68:	f003 0301 	and.w	r3, r3, #1
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d004      	beq.n	8007b7a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b74:	6878      	ldr	r0, [r7, #4]
 8007b76:	4798      	blx	r3
    return;
 8007b78:	e0c6      	b.n	8007d08 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007b7a:	69bb      	ldr	r3, [r7, #24]
 8007b7c:	095b      	lsrs	r3, r3, #5
 8007b7e:	f003 0301 	and.w	r3, r3, #1
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d10c      	bne.n	8007ba0 <HAL_SPI_IRQHandler+0x8c>
 8007b86:	69bb      	ldr	r3, [r7, #24]
 8007b88:	099b      	lsrs	r3, r3, #6
 8007b8a:	f003 0301 	and.w	r3, r3, #1
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d106      	bne.n	8007ba0 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8007b92:	69bb      	ldr	r3, [r7, #24]
 8007b94:	0a1b      	lsrs	r3, r3, #8
 8007b96:	f003 0301 	and.w	r3, r3, #1
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	f000 80b4 	beq.w	8007d08 <HAL_SPI_IRQHandler+0x1f4>
 8007ba0:	69fb      	ldr	r3, [r7, #28]
 8007ba2:	095b      	lsrs	r3, r3, #5
 8007ba4:	f003 0301 	and.w	r3, r3, #1
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	f000 80ad 	beq.w	8007d08 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007bae:	69bb      	ldr	r3, [r7, #24]
 8007bb0:	099b      	lsrs	r3, r3, #6
 8007bb2:	f003 0301 	and.w	r3, r3, #1
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d023      	beq.n	8007c02 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007bc0:	b2db      	uxtb	r3, r3
 8007bc2:	2b03      	cmp	r3, #3
 8007bc4:	d011      	beq.n	8007bea <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007bca:	f043 0204 	orr.w	r2, r3, #4
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	617b      	str	r3, [r7, #20]
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	68db      	ldr	r3, [r3, #12]
 8007bdc:	617b      	str	r3, [r7, #20]
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	689b      	ldr	r3, [r3, #8]
 8007be4:	617b      	str	r3, [r7, #20]
 8007be6:	697b      	ldr	r3, [r7, #20]
 8007be8:	e00b      	b.n	8007c02 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007bea:	2300      	movs	r3, #0
 8007bec:	613b      	str	r3, [r7, #16]
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	68db      	ldr	r3, [r3, #12]
 8007bf4:	613b      	str	r3, [r7, #16]
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	689b      	ldr	r3, [r3, #8]
 8007bfc:	613b      	str	r3, [r7, #16]
 8007bfe:	693b      	ldr	r3, [r7, #16]
        return;
 8007c00:	e082      	b.n	8007d08 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8007c02:	69bb      	ldr	r3, [r7, #24]
 8007c04:	095b      	lsrs	r3, r3, #5
 8007c06:	f003 0301 	and.w	r3, r3, #1
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d014      	beq.n	8007c38 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c12:	f043 0201 	orr.w	r2, r3, #1
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	60fb      	str	r3, [r7, #12]
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	689b      	ldr	r3, [r3, #8]
 8007c24:	60fb      	str	r3, [r7, #12]
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	681a      	ldr	r2, [r3, #0]
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007c34:	601a      	str	r2, [r3, #0]
 8007c36:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8007c38:	69bb      	ldr	r3, [r7, #24]
 8007c3a:	0a1b      	lsrs	r3, r3, #8
 8007c3c:	f003 0301 	and.w	r3, r3, #1
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d00c      	beq.n	8007c5e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c48:	f043 0208 	orr.w	r2, r3, #8
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007c50:	2300      	movs	r3, #0
 8007c52:	60bb      	str	r3, [r7, #8]
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	689b      	ldr	r3, [r3, #8]
 8007c5a:	60bb      	str	r3, [r7, #8]
 8007c5c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d04f      	beq.n	8007d06 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	685a      	ldr	r2, [r3, #4]
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007c74:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	2201      	movs	r2, #1
 8007c7a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8007c7e:	69fb      	ldr	r3, [r7, #28]
 8007c80:	f003 0302 	and.w	r3, r3, #2
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d104      	bne.n	8007c92 <HAL_SPI_IRQHandler+0x17e>
 8007c88:	69fb      	ldr	r3, [r7, #28]
 8007c8a:	f003 0301 	and.w	r3, r3, #1
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d034      	beq.n	8007cfc <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	685a      	ldr	r2, [r3, #4]
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	f022 0203 	bic.w	r2, r2, #3
 8007ca0:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d011      	beq.n	8007cce <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cae:	4a18      	ldr	r2, [pc, #96]	; (8007d10 <HAL_SPI_IRQHandler+0x1fc>)
 8007cb0:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	f7fb fdc3 	bl	8003842 <HAL_DMA_Abort_IT>
 8007cbc:	4603      	mov	r3, r0
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d005      	beq.n	8007cce <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007cc6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d016      	beq.n	8007d04 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cda:	4a0d      	ldr	r2, [pc, #52]	; (8007d10 <HAL_SPI_IRQHandler+0x1fc>)
 8007cdc:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	f7fb fdad 	bl	8003842 <HAL_DMA_Abort_IT>
 8007ce8:	4603      	mov	r3, r0
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d00a      	beq.n	8007d04 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007cf2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8007cfa:	e003      	b.n	8007d04 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8007cfc:	6878      	ldr	r0, [r7, #4]
 8007cfe:	f000 f845 	bl	8007d8c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8007d02:	e000      	b.n	8007d06 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8007d04:	bf00      	nop
    return;
 8007d06:	bf00      	nop
  }
}
 8007d08:	3720      	adds	r7, #32
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	bd80      	pop	{r7, pc}
 8007d0e:	bf00      	nop
 8007d10:	0800802f 	.word	0x0800802f

08007d14 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007d14:	b480      	push	{r7}
 8007d16:	b083      	sub	sp, #12
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8007d1c:	bf00      	nop
 8007d1e:	370c      	adds	r7, #12
 8007d20:	46bd      	mov	sp, r7
 8007d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d26:	4770      	bx	lr

08007d28 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007d28:	b480      	push	{r7}
 8007d2a:	b083      	sub	sp, #12
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8007d30:	bf00      	nop
 8007d32:	370c      	adds	r7, #12
 8007d34:	46bd      	mov	sp, r7
 8007d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3a:	4770      	bx	lr

08007d3c <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007d3c:	b480      	push	{r7}
 8007d3e:	b083      	sub	sp, #12
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8007d44:	bf00      	nop
 8007d46:	370c      	adds	r7, #12
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4e:	4770      	bx	lr

08007d50 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007d50:	b480      	push	{r7}
 8007d52:	b083      	sub	sp, #12
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8007d58:	bf00      	nop
 8007d5a:	370c      	adds	r7, #12
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d62:	4770      	bx	lr

08007d64 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007d64:	b480      	push	{r7}
 8007d66:	b083      	sub	sp, #12
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8007d6c:	bf00      	nop
 8007d6e:	370c      	adds	r7, #12
 8007d70:	46bd      	mov	sp, r7
 8007d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d76:	4770      	bx	lr

08007d78 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007d78:	b480      	push	{r7}
 8007d7a:	b083      	sub	sp, #12
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8007d80:	bf00      	nop
 8007d82:	370c      	adds	r7, #12
 8007d84:	46bd      	mov	sp, r7
 8007d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8a:	4770      	bx	lr

08007d8c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007d8c:	b480      	push	{r7}
 8007d8e:	b083      	sub	sp, #12
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007d94:	bf00      	nop
 8007d96:	370c      	adds	r7, #12
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9e:	4770      	bx	lr

08007da0 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8007da0:	b480      	push	{r7}
 8007da2:	b083      	sub	sp, #12
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007dae:	b2db      	uxtb	r3, r3
}
 8007db0:	4618      	mov	r0, r3
 8007db2:	370c      	adds	r7, #12
 8007db4:	46bd      	mov	sp, r7
 8007db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dba:	4770      	bx	lr

08007dbc <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b086      	sub	sp, #24
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dc8:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007dca:	f7fb fa59 	bl	8003280 <HAL_GetTick>
 8007dce:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	f003 0320 	and.w	r3, r3, #32
 8007dda:	2b20      	cmp	r3, #32
 8007ddc:	d03b      	beq.n	8007e56 <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8007dde:	697b      	ldr	r3, [r7, #20]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	685a      	ldr	r2, [r3, #4]
 8007de4:	697b      	ldr	r3, [r7, #20]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	f022 0220 	bic.w	r2, r2, #32
 8007dec:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8007dee:	697b      	ldr	r3, [r7, #20]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	685a      	ldr	r2, [r3, #4]
 8007df4:	697b      	ldr	r3, [r7, #20]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	f022 0202 	bic.w	r2, r2, #2
 8007dfc:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8007dfe:	693a      	ldr	r2, [r7, #16]
 8007e00:	2164      	movs	r1, #100	; 0x64
 8007e02:	6978      	ldr	r0, [r7, #20]
 8007e04:	f000 fa9e 	bl	8008344 <SPI_EndRxTxTransaction>
 8007e08:	4603      	mov	r3, r0
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d005      	beq.n	8007e1a <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007e0e:	697b      	ldr	r3, [r7, #20]
 8007e10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e12:	f043 0220 	orr.w	r2, r3, #32
 8007e16:	697b      	ldr	r3, [r7, #20]
 8007e18:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007e1a:	697b      	ldr	r3, [r7, #20]
 8007e1c:	689b      	ldr	r3, [r3, #8]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d10a      	bne.n	8007e38 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007e22:	2300      	movs	r3, #0
 8007e24:	60fb      	str	r3, [r7, #12]
 8007e26:	697b      	ldr	r3, [r7, #20]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	68db      	ldr	r3, [r3, #12]
 8007e2c:	60fb      	str	r3, [r7, #12]
 8007e2e:	697b      	ldr	r3, [r7, #20]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	689b      	ldr	r3, [r3, #8]
 8007e34:	60fb      	str	r3, [r7, #12]
 8007e36:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8007e38:	697b      	ldr	r3, [r7, #20]
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8007e3e:	697b      	ldr	r3, [r7, #20]
 8007e40:	2201      	movs	r2, #1
 8007e42:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007e46:	697b      	ldr	r3, [r7, #20]
 8007e48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d003      	beq.n	8007e56 <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8007e4e:	6978      	ldr	r0, [r7, #20]
 8007e50:	f7ff ff9c 	bl	8007d8c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8007e54:	e002      	b.n	8007e5c <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8007e56:	6978      	ldr	r0, [r7, #20]
 8007e58:	f7ff ff5c 	bl	8007d14 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007e5c:	3718      	adds	r7, #24
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	bd80      	pop	{r7, pc}

08007e62 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007e62:	b580      	push	{r7, lr}
 8007e64:	b084      	sub	sp, #16
 8007e66:	af00      	add	r7, sp, #0
 8007e68:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e6e:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007e70:	f7fb fa06 	bl	8003280 <HAL_GetTick>
 8007e74:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	f003 0320 	and.w	r3, r3, #32
 8007e80:	2b20      	cmp	r3, #32
 8007e82:	d03c      	beq.n	8007efe <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	685a      	ldr	r2, [r3, #4]
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	f022 0220 	bic.w	r2, r2, #32
 8007e92:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	689b      	ldr	r3, [r3, #8]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d10d      	bne.n	8007eb8 <SPI_DMAReceiveCplt+0x56>
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	685b      	ldr	r3, [r3, #4]
 8007ea0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007ea4:	d108      	bne.n	8007eb8 <SPI_DMAReceiveCplt+0x56>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	685a      	ldr	r2, [r3, #4]
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	f022 0203 	bic.w	r2, r2, #3
 8007eb4:	605a      	str	r2, [r3, #4]
 8007eb6:	e007      	b.n	8007ec8 <SPI_DMAReceiveCplt+0x66>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	685a      	ldr	r2, [r3, #4]
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	f022 0201 	bic.w	r2, r2, #1
 8007ec6:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8007ec8:	68ba      	ldr	r2, [r7, #8]
 8007eca:	2164      	movs	r1, #100	; 0x64
 8007ecc:	68f8      	ldr	r0, [r7, #12]
 8007ece:	f000 f9e1 	bl	8008294 <SPI_EndRxTransaction>
 8007ed2:	4603      	mov	r3, r0
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d002      	beq.n	8007ede <SPI_DMAReceiveCplt+0x7c>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	2220      	movs	r2, #32
 8007edc:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	2201      	movs	r2, #1
 8007eea:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d003      	beq.n	8007efe <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8007ef6:	68f8      	ldr	r0, [r7, #12]
 8007ef8:	f7ff ff48 	bl	8007d8c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8007efc:	e002      	b.n	8007f04 <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8007efe:	68f8      	ldr	r0, [r7, #12]
 8007f00:	f7ff ff12 	bl	8007d28 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007f04:	3710      	adds	r7, #16
 8007f06:	46bd      	mov	sp, r7
 8007f08:	bd80      	pop	{r7, pc}

08007f0a <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007f0a:	b580      	push	{r7, lr}
 8007f0c:	b084      	sub	sp, #16
 8007f0e:	af00      	add	r7, sp, #0
 8007f10:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f16:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007f18:	f7fb f9b2 	bl	8003280 <HAL_GetTick>
 8007f1c:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	f003 0320 	and.w	r3, r3, #32
 8007f28:	2b20      	cmp	r3, #32
 8007f2a:	d030      	beq.n	8007f8e <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	685a      	ldr	r2, [r3, #4]
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	f022 0220 	bic.w	r2, r2, #32
 8007f3a:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8007f3c:	68ba      	ldr	r2, [r7, #8]
 8007f3e:	2164      	movs	r1, #100	; 0x64
 8007f40:	68f8      	ldr	r0, [r7, #12]
 8007f42:	f000 f9ff 	bl	8008344 <SPI_EndRxTxTransaction>
 8007f46:	4603      	mov	r3, r0
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d005      	beq.n	8007f58 <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f50:	f043 0220 	orr.w	r2, r3, #32
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	685a      	ldr	r2, [r3, #4]
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	f022 0203 	bic.w	r2, r2, #3
 8007f66:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	2200      	movs	r2, #0
 8007f72:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	2201      	movs	r2, #1
 8007f7a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d003      	beq.n	8007f8e <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8007f86:	68f8      	ldr	r0, [r7, #12]
 8007f88:	f7ff ff00 	bl	8007d8c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8007f8c:	e002      	b.n	8007f94 <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8007f8e:	68f8      	ldr	r0, [r7, #12]
 8007f90:	f7ff fed4 	bl	8007d3c <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007f94:	3710      	adds	r7, #16
 8007f96:	46bd      	mov	sp, r7
 8007f98:	bd80      	pop	{r7, pc}

08007f9a <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007f9a:	b580      	push	{r7, lr}
 8007f9c:	b084      	sub	sp, #16
 8007f9e:	af00      	add	r7, sp, #0
 8007fa0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fa6:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8007fa8:	68f8      	ldr	r0, [r7, #12]
 8007faa:	f7ff fed1 	bl	8007d50 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007fae:	bf00      	nop
 8007fb0:	3710      	adds	r7, #16
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	bd80      	pop	{r7, pc}

08007fb6 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007fb6:	b580      	push	{r7, lr}
 8007fb8:	b084      	sub	sp, #16
 8007fba:	af00      	add	r7, sp, #0
 8007fbc:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fc2:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8007fc4:	68f8      	ldr	r0, [r7, #12]
 8007fc6:	f7ff fecd 	bl	8007d64 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007fca:	bf00      	nop
 8007fcc:	3710      	adds	r7, #16
 8007fce:	46bd      	mov	sp, r7
 8007fd0:	bd80      	pop	{r7, pc}

08007fd2 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007fd2:	b580      	push	{r7, lr}
 8007fd4:	b084      	sub	sp, #16
 8007fd6:	af00      	add	r7, sp, #0
 8007fd8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fde:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8007fe0:	68f8      	ldr	r0, [r7, #12]
 8007fe2:	f7ff fec9 	bl	8007d78 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007fe6:	bf00      	nop
 8007fe8:	3710      	adds	r7, #16
 8007fea:	46bd      	mov	sp, r7
 8007fec:	bd80      	pop	{r7, pc}

08007fee <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8007fee:	b580      	push	{r7, lr}
 8007ff0:	b084      	sub	sp, #16
 8007ff2:	af00      	add	r7, sp, #0
 8007ff4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ffa:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	685a      	ldr	r2, [r3, #4]
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	f022 0203 	bic.w	r2, r2, #3
 800800a:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008010:	f043 0210 	orr.w	r2, r3, #16
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	2201      	movs	r2, #1
 800801c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8008020:	68f8      	ldr	r0, [r7, #12]
 8008022:	f7ff feb3 	bl	8007d8c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008026:	bf00      	nop
 8008028:	3710      	adds	r7, #16
 800802a:	46bd      	mov	sp, r7
 800802c:	bd80      	pop	{r7, pc}

0800802e <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800802e:	b580      	push	{r7, lr}
 8008030:	b084      	sub	sp, #16
 8008032:	af00      	add	r7, sp, #0
 8008034:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800803a:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	2200      	movs	r2, #0
 8008040:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	2200      	movs	r2, #0
 8008048:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800804a:	68f8      	ldr	r0, [r7, #12]
 800804c:	f7ff fe9e 	bl	8007d8c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008050:	bf00      	nop
 8008052:	3710      	adds	r7, #16
 8008054:	46bd      	mov	sp, r7
 8008056:	bd80      	pop	{r7, pc}

08008058 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008058:	b580      	push	{r7, lr}
 800805a:	b088      	sub	sp, #32
 800805c:	af00      	add	r7, sp, #0
 800805e:	60f8      	str	r0, [r7, #12]
 8008060:	60b9      	str	r1, [r7, #8]
 8008062:	603b      	str	r3, [r7, #0]
 8008064:	4613      	mov	r3, r2
 8008066:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008068:	f7fb f90a 	bl	8003280 <HAL_GetTick>
 800806c:	4602      	mov	r2, r0
 800806e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008070:	1a9b      	subs	r3, r3, r2
 8008072:	683a      	ldr	r2, [r7, #0]
 8008074:	4413      	add	r3, r2
 8008076:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008078:	f7fb f902 	bl	8003280 <HAL_GetTick>
 800807c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800807e:	4b39      	ldr	r3, [pc, #228]	; (8008164 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	015b      	lsls	r3, r3, #5
 8008084:	0d1b      	lsrs	r3, r3, #20
 8008086:	69fa      	ldr	r2, [r7, #28]
 8008088:	fb02 f303 	mul.w	r3, r2, r3
 800808c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800808e:	e054      	b.n	800813a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008090:	683b      	ldr	r3, [r7, #0]
 8008092:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008096:	d050      	beq.n	800813a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008098:	f7fb f8f2 	bl	8003280 <HAL_GetTick>
 800809c:	4602      	mov	r2, r0
 800809e:	69bb      	ldr	r3, [r7, #24]
 80080a0:	1ad3      	subs	r3, r2, r3
 80080a2:	69fa      	ldr	r2, [r7, #28]
 80080a4:	429a      	cmp	r2, r3
 80080a6:	d902      	bls.n	80080ae <SPI_WaitFlagStateUntilTimeout+0x56>
 80080a8:	69fb      	ldr	r3, [r7, #28]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d13d      	bne.n	800812a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	685a      	ldr	r2, [r3, #4]
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80080bc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	685b      	ldr	r3, [r3, #4]
 80080c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80080c6:	d111      	bne.n	80080ec <SPI_WaitFlagStateUntilTimeout+0x94>
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	689b      	ldr	r3, [r3, #8]
 80080cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80080d0:	d004      	beq.n	80080dc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	689b      	ldr	r3, [r3, #8]
 80080d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80080da:	d107      	bne.n	80080ec <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	681a      	ldr	r2, [r3, #0]
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80080ea:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80080f4:	d10f      	bne.n	8008116 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	681a      	ldr	r2, [r3, #0]
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008104:	601a      	str	r2, [r3, #0]
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	681a      	ldr	r2, [r3, #0]
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008114:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	2201      	movs	r2, #1
 800811a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	2200      	movs	r2, #0
 8008122:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8008126:	2303      	movs	r3, #3
 8008128:	e017      	b.n	800815a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800812a:	697b      	ldr	r3, [r7, #20]
 800812c:	2b00      	cmp	r3, #0
 800812e:	d101      	bne.n	8008134 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008130:	2300      	movs	r3, #0
 8008132:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008134:	697b      	ldr	r3, [r7, #20]
 8008136:	3b01      	subs	r3, #1
 8008138:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	689a      	ldr	r2, [r3, #8]
 8008140:	68bb      	ldr	r3, [r7, #8]
 8008142:	4013      	ands	r3, r2
 8008144:	68ba      	ldr	r2, [r7, #8]
 8008146:	429a      	cmp	r2, r3
 8008148:	bf0c      	ite	eq
 800814a:	2301      	moveq	r3, #1
 800814c:	2300      	movne	r3, #0
 800814e:	b2db      	uxtb	r3, r3
 8008150:	461a      	mov	r2, r3
 8008152:	79fb      	ldrb	r3, [r7, #7]
 8008154:	429a      	cmp	r2, r3
 8008156:	d19b      	bne.n	8008090 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008158:	2300      	movs	r3, #0
}
 800815a:	4618      	mov	r0, r3
 800815c:	3720      	adds	r7, #32
 800815e:	46bd      	mov	sp, r7
 8008160:	bd80      	pop	{r7, pc}
 8008162:	bf00      	nop
 8008164:	20000008 	.word	0x20000008

08008168 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008168:	b580      	push	{r7, lr}
 800816a:	b08a      	sub	sp, #40	; 0x28
 800816c:	af00      	add	r7, sp, #0
 800816e:	60f8      	str	r0, [r7, #12]
 8008170:	60b9      	str	r1, [r7, #8]
 8008172:	607a      	str	r2, [r7, #4]
 8008174:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8008176:	2300      	movs	r3, #0
 8008178:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800817a:	f7fb f881 	bl	8003280 <HAL_GetTick>
 800817e:	4602      	mov	r2, r0
 8008180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008182:	1a9b      	subs	r3, r3, r2
 8008184:	683a      	ldr	r2, [r7, #0]
 8008186:	4413      	add	r3, r2
 8008188:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800818a:	f7fb f879 	bl	8003280 <HAL_GetTick>
 800818e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	330c      	adds	r3, #12
 8008196:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8008198:	4b3d      	ldr	r3, [pc, #244]	; (8008290 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800819a:	681a      	ldr	r2, [r3, #0]
 800819c:	4613      	mov	r3, r2
 800819e:	009b      	lsls	r3, r3, #2
 80081a0:	4413      	add	r3, r2
 80081a2:	00da      	lsls	r2, r3, #3
 80081a4:	1ad3      	subs	r3, r2, r3
 80081a6:	0d1b      	lsrs	r3, r3, #20
 80081a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081aa:	fb02 f303 	mul.w	r3, r2, r3
 80081ae:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80081b0:	e060      	b.n	8008274 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80081b2:	68bb      	ldr	r3, [r7, #8]
 80081b4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80081b8:	d107      	bne.n	80081ca <SPI_WaitFifoStateUntilTimeout+0x62>
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d104      	bne.n	80081ca <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80081c0:	69fb      	ldr	r3, [r7, #28]
 80081c2:	781b      	ldrb	r3, [r3, #0]
 80081c4:	b2db      	uxtb	r3, r3
 80081c6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80081c8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80081ca:	683b      	ldr	r3, [r7, #0]
 80081cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80081d0:	d050      	beq.n	8008274 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80081d2:	f7fb f855 	bl	8003280 <HAL_GetTick>
 80081d6:	4602      	mov	r2, r0
 80081d8:	6a3b      	ldr	r3, [r7, #32]
 80081da:	1ad3      	subs	r3, r2, r3
 80081dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081de:	429a      	cmp	r2, r3
 80081e0:	d902      	bls.n	80081e8 <SPI_WaitFifoStateUntilTimeout+0x80>
 80081e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d13d      	bne.n	8008264 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	685a      	ldr	r2, [r3, #4]
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80081f6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	685b      	ldr	r3, [r3, #4]
 80081fc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008200:	d111      	bne.n	8008226 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	689b      	ldr	r3, [r3, #8]
 8008206:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800820a:	d004      	beq.n	8008216 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	689b      	ldr	r3, [r3, #8]
 8008210:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008214:	d107      	bne.n	8008226 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	681a      	ldr	r2, [r3, #0]
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008224:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800822a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800822e:	d10f      	bne.n	8008250 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	681a      	ldr	r2, [r3, #0]
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800823e:	601a      	str	r2, [r3, #0]
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	681a      	ldr	r2, [r3, #0]
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800824e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	2201      	movs	r2, #1
 8008254:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	2200      	movs	r2, #0
 800825c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8008260:	2303      	movs	r3, #3
 8008262:	e010      	b.n	8008286 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008264:	69bb      	ldr	r3, [r7, #24]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d101      	bne.n	800826e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800826a:	2300      	movs	r3, #0
 800826c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800826e:	69bb      	ldr	r3, [r7, #24]
 8008270:	3b01      	subs	r3, #1
 8008272:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	689a      	ldr	r2, [r3, #8]
 800827a:	68bb      	ldr	r3, [r7, #8]
 800827c:	4013      	ands	r3, r2
 800827e:	687a      	ldr	r2, [r7, #4]
 8008280:	429a      	cmp	r2, r3
 8008282:	d196      	bne.n	80081b2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8008284:	2300      	movs	r3, #0
}
 8008286:	4618      	mov	r0, r3
 8008288:	3728      	adds	r7, #40	; 0x28
 800828a:	46bd      	mov	sp, r7
 800828c:	bd80      	pop	{r7, pc}
 800828e:	bf00      	nop
 8008290:	20000008 	.word	0x20000008

08008294 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008294:	b580      	push	{r7, lr}
 8008296:	b086      	sub	sp, #24
 8008298:	af02      	add	r7, sp, #8
 800829a:	60f8      	str	r0, [r7, #12]
 800829c:	60b9      	str	r1, [r7, #8]
 800829e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	685b      	ldr	r3, [r3, #4]
 80082a4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80082a8:	d111      	bne.n	80082ce <SPI_EndRxTransaction+0x3a>
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	689b      	ldr	r3, [r3, #8]
 80082ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80082b2:	d004      	beq.n	80082be <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	689b      	ldr	r3, [r3, #8]
 80082b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80082bc:	d107      	bne.n	80082ce <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	681a      	ldr	r2, [r3, #0]
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80082cc:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	9300      	str	r3, [sp, #0]
 80082d2:	68bb      	ldr	r3, [r7, #8]
 80082d4:	2200      	movs	r2, #0
 80082d6:	2180      	movs	r1, #128	; 0x80
 80082d8:	68f8      	ldr	r0, [r7, #12]
 80082da:	f7ff febd 	bl	8008058 <SPI_WaitFlagStateUntilTimeout>
 80082de:	4603      	mov	r3, r0
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d007      	beq.n	80082f4 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80082e8:	f043 0220 	orr.w	r2, r3, #32
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80082f0:	2303      	movs	r3, #3
 80082f2:	e023      	b.n	800833c <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	685b      	ldr	r3, [r3, #4]
 80082f8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80082fc:	d11d      	bne.n	800833a <SPI_EndRxTransaction+0xa6>
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	689b      	ldr	r3, [r3, #8]
 8008302:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008306:	d004      	beq.n	8008312 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	689b      	ldr	r3, [r3, #8]
 800830c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008310:	d113      	bne.n	800833a <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	9300      	str	r3, [sp, #0]
 8008316:	68bb      	ldr	r3, [r7, #8]
 8008318:	2200      	movs	r2, #0
 800831a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800831e:	68f8      	ldr	r0, [r7, #12]
 8008320:	f7ff ff22 	bl	8008168 <SPI_WaitFifoStateUntilTimeout>
 8008324:	4603      	mov	r3, r0
 8008326:	2b00      	cmp	r3, #0
 8008328:	d007      	beq.n	800833a <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800832e:	f043 0220 	orr.w	r2, r3, #32
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8008336:	2303      	movs	r3, #3
 8008338:	e000      	b.n	800833c <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800833a:	2300      	movs	r3, #0
}
 800833c:	4618      	mov	r0, r3
 800833e:	3710      	adds	r7, #16
 8008340:	46bd      	mov	sp, r7
 8008342:	bd80      	pop	{r7, pc}

08008344 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008344:	b580      	push	{r7, lr}
 8008346:	b086      	sub	sp, #24
 8008348:	af02      	add	r7, sp, #8
 800834a:	60f8      	str	r0, [r7, #12]
 800834c:	60b9      	str	r1, [r7, #8]
 800834e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	9300      	str	r3, [sp, #0]
 8008354:	68bb      	ldr	r3, [r7, #8]
 8008356:	2200      	movs	r2, #0
 8008358:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800835c:	68f8      	ldr	r0, [r7, #12]
 800835e:	f7ff ff03 	bl	8008168 <SPI_WaitFifoStateUntilTimeout>
 8008362:	4603      	mov	r3, r0
 8008364:	2b00      	cmp	r3, #0
 8008366:	d007      	beq.n	8008378 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800836c:	f043 0220 	orr.w	r2, r3, #32
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008374:	2303      	movs	r3, #3
 8008376:	e027      	b.n	80083c8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	9300      	str	r3, [sp, #0]
 800837c:	68bb      	ldr	r3, [r7, #8]
 800837e:	2200      	movs	r2, #0
 8008380:	2180      	movs	r1, #128	; 0x80
 8008382:	68f8      	ldr	r0, [r7, #12]
 8008384:	f7ff fe68 	bl	8008058 <SPI_WaitFlagStateUntilTimeout>
 8008388:	4603      	mov	r3, r0
 800838a:	2b00      	cmp	r3, #0
 800838c:	d007      	beq.n	800839e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008392:	f043 0220 	orr.w	r2, r3, #32
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800839a:	2303      	movs	r3, #3
 800839c:	e014      	b.n	80083c8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	9300      	str	r3, [sp, #0]
 80083a2:	68bb      	ldr	r3, [r7, #8]
 80083a4:	2200      	movs	r2, #0
 80083a6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80083aa:	68f8      	ldr	r0, [r7, #12]
 80083ac:	f7ff fedc 	bl	8008168 <SPI_WaitFifoStateUntilTimeout>
 80083b0:	4603      	mov	r3, r0
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d007      	beq.n	80083c6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80083ba:	f043 0220 	orr.w	r2, r3, #32
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80083c2:	2303      	movs	r3, #3
 80083c4:	e000      	b.n	80083c8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80083c6:	2300      	movs	r3, #0
}
 80083c8:	4618      	mov	r0, r3
 80083ca:	3710      	adds	r7, #16
 80083cc:	46bd      	mov	sp, r7
 80083ce:	bd80      	pop	{r7, pc}

080083d0 <LL_RCC_GetUSARTClockSource>:
{
 80083d0:	b480      	push	{r7}
 80083d2:	b083      	sub	sp, #12
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 80083d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80083dc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	4013      	ands	r3, r2
}
 80083e4:	4618      	mov	r0, r3
 80083e6:	370c      	adds	r7, #12
 80083e8:	46bd      	mov	sp, r7
 80083ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ee:	4770      	bx	lr

080083f0 <LL_RCC_GetLPUARTClockSource>:
{
 80083f0:	b480      	push	{r7}
 80083f2:	b083      	sub	sp, #12
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80083f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80083fc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	4013      	ands	r3, r2
}
 8008404:	4618      	mov	r0, r3
 8008406:	370c      	adds	r7, #12
 8008408:	46bd      	mov	sp, r7
 800840a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840e:	4770      	bx	lr

08008410 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008410:	b580      	push	{r7, lr}
 8008412:	b082      	sub	sp, #8
 8008414:	af00      	add	r7, sp, #0
 8008416:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	2b00      	cmp	r3, #0
 800841c:	d101      	bne.n	8008422 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800841e:	2301      	movs	r3, #1
 8008420:	e042      	b.n	80084a8 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008428:	2b00      	cmp	r3, #0
 800842a:	d106      	bne.n	800843a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	2200      	movs	r2, #0
 8008430:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008434:	6878      	ldr	r0, [r7, #4]
 8008436:	f7fa fccb 	bl	8002dd0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	2224      	movs	r2, #36	; 0x24
 800843e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	681a      	ldr	r2, [r3, #0]
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	f022 0201 	bic.w	r2, r2, #1
 8008450:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008452:	6878      	ldr	r0, [r7, #4]
 8008454:	f000 f8ba 	bl	80085cc <UART_SetConfig>
 8008458:	4603      	mov	r3, r0
 800845a:	2b01      	cmp	r3, #1
 800845c:	d101      	bne.n	8008462 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800845e:	2301      	movs	r3, #1
 8008460:	e022      	b.n	80084a8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008466:	2b00      	cmp	r3, #0
 8008468:	d002      	beq.n	8008470 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800846a:	6878      	ldr	r0, [r7, #4]
 800846c:	f000 fad6 	bl	8008a1c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	685a      	ldr	r2, [r3, #4]
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800847e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	689a      	ldr	r2, [r3, #8]
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800848e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	681a      	ldr	r2, [r3, #0]
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	f042 0201 	orr.w	r2, r2, #1
 800849e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80084a0:	6878      	ldr	r0, [r7, #4]
 80084a2:	f000 fb5d 	bl	8008b60 <UART_CheckIdleState>
 80084a6:	4603      	mov	r3, r0
}
 80084a8:	4618      	mov	r0, r3
 80084aa:	3708      	adds	r7, #8
 80084ac:	46bd      	mov	sp, r7
 80084ae:	bd80      	pop	{r7, pc}

080084b0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b08a      	sub	sp, #40	; 0x28
 80084b4:	af02      	add	r7, sp, #8
 80084b6:	60f8      	str	r0, [r7, #12]
 80084b8:	60b9      	str	r1, [r7, #8]
 80084ba:	603b      	str	r3, [r7, #0]
 80084bc:	4613      	mov	r3, r2
 80084be:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084c6:	2b20      	cmp	r3, #32
 80084c8:	d17b      	bne.n	80085c2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80084ca:	68bb      	ldr	r3, [r7, #8]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d002      	beq.n	80084d6 <HAL_UART_Transmit+0x26>
 80084d0:	88fb      	ldrh	r3, [r7, #6]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d101      	bne.n	80084da <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80084d6:	2301      	movs	r3, #1
 80084d8:	e074      	b.n	80085c4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	2200      	movs	r2, #0
 80084de:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	2221      	movs	r2, #33	; 0x21
 80084e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80084ea:	f7fa fec9 	bl	8003280 <HAL_GetTick>
 80084ee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	88fa      	ldrh	r2, [r7, #6]
 80084f4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	88fa      	ldrh	r2, [r7, #6]
 80084fc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	689b      	ldr	r3, [r3, #8]
 8008504:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008508:	d108      	bne.n	800851c <HAL_UART_Transmit+0x6c>
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	691b      	ldr	r3, [r3, #16]
 800850e:	2b00      	cmp	r3, #0
 8008510:	d104      	bne.n	800851c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008512:	2300      	movs	r3, #0
 8008514:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008516:	68bb      	ldr	r3, [r7, #8]
 8008518:	61bb      	str	r3, [r7, #24]
 800851a:	e003      	b.n	8008524 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800851c:	68bb      	ldr	r3, [r7, #8]
 800851e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008520:	2300      	movs	r3, #0
 8008522:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008524:	e030      	b.n	8008588 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008526:	683b      	ldr	r3, [r7, #0]
 8008528:	9300      	str	r3, [sp, #0]
 800852a:	697b      	ldr	r3, [r7, #20]
 800852c:	2200      	movs	r2, #0
 800852e:	2180      	movs	r1, #128	; 0x80
 8008530:	68f8      	ldr	r0, [r7, #12]
 8008532:	f000 fbbf 	bl	8008cb4 <UART_WaitOnFlagUntilTimeout>
 8008536:	4603      	mov	r3, r0
 8008538:	2b00      	cmp	r3, #0
 800853a:	d005      	beq.n	8008548 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	2220      	movs	r2, #32
 8008540:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8008544:	2303      	movs	r3, #3
 8008546:	e03d      	b.n	80085c4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8008548:	69fb      	ldr	r3, [r7, #28]
 800854a:	2b00      	cmp	r3, #0
 800854c:	d10b      	bne.n	8008566 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800854e:	69bb      	ldr	r3, [r7, #24]
 8008550:	881b      	ldrh	r3, [r3, #0]
 8008552:	461a      	mov	r2, r3
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800855c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800855e:	69bb      	ldr	r3, [r7, #24]
 8008560:	3302      	adds	r3, #2
 8008562:	61bb      	str	r3, [r7, #24]
 8008564:	e007      	b.n	8008576 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008566:	69fb      	ldr	r3, [r7, #28]
 8008568:	781a      	ldrb	r2, [r3, #0]
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008570:	69fb      	ldr	r3, [r7, #28]
 8008572:	3301      	adds	r3, #1
 8008574:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800857c:	b29b      	uxth	r3, r3
 800857e:	3b01      	subs	r3, #1
 8008580:	b29a      	uxth	r2, r3
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800858e:	b29b      	uxth	r3, r3
 8008590:	2b00      	cmp	r3, #0
 8008592:	d1c8      	bne.n	8008526 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008594:	683b      	ldr	r3, [r7, #0]
 8008596:	9300      	str	r3, [sp, #0]
 8008598:	697b      	ldr	r3, [r7, #20]
 800859a:	2200      	movs	r2, #0
 800859c:	2140      	movs	r1, #64	; 0x40
 800859e:	68f8      	ldr	r0, [r7, #12]
 80085a0:	f000 fb88 	bl	8008cb4 <UART_WaitOnFlagUntilTimeout>
 80085a4:	4603      	mov	r3, r0
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d005      	beq.n	80085b6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	2220      	movs	r2, #32
 80085ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 80085b2:	2303      	movs	r3, #3
 80085b4:	e006      	b.n	80085c4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	2220      	movs	r2, #32
 80085ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80085be:	2300      	movs	r3, #0
 80085c0:	e000      	b.n	80085c4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80085c2:	2302      	movs	r3, #2
  }
}
 80085c4:	4618      	mov	r0, r3
 80085c6:	3720      	adds	r7, #32
 80085c8:	46bd      	mov	sp, r7
 80085ca:	bd80      	pop	{r7, pc}

080085cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80085cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80085d0:	b08c      	sub	sp, #48	; 0x30
 80085d2:	af00      	add	r7, sp, #0
 80085d4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80085d6:	2300      	movs	r3, #0
 80085d8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80085dc:	697b      	ldr	r3, [r7, #20]
 80085de:	689a      	ldr	r2, [r3, #8]
 80085e0:	697b      	ldr	r3, [r7, #20]
 80085e2:	691b      	ldr	r3, [r3, #16]
 80085e4:	431a      	orrs	r2, r3
 80085e6:	697b      	ldr	r3, [r7, #20]
 80085e8:	695b      	ldr	r3, [r3, #20]
 80085ea:	431a      	orrs	r2, r3
 80085ec:	697b      	ldr	r3, [r7, #20]
 80085ee:	69db      	ldr	r3, [r3, #28]
 80085f0:	4313      	orrs	r3, r2
 80085f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80085f4:	697b      	ldr	r3, [r7, #20]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	681a      	ldr	r2, [r3, #0]
 80085fa:	4baf      	ldr	r3, [pc, #700]	; (80088b8 <UART_SetConfig+0x2ec>)
 80085fc:	4013      	ands	r3, r2
 80085fe:	697a      	ldr	r2, [r7, #20]
 8008600:	6812      	ldr	r2, [r2, #0]
 8008602:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008604:	430b      	orrs	r3, r1
 8008606:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008608:	697b      	ldr	r3, [r7, #20]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	685b      	ldr	r3, [r3, #4]
 800860e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008612:	697b      	ldr	r3, [r7, #20]
 8008614:	68da      	ldr	r2, [r3, #12]
 8008616:	697b      	ldr	r3, [r7, #20]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	430a      	orrs	r2, r1
 800861c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800861e:	697b      	ldr	r3, [r7, #20]
 8008620:	699b      	ldr	r3, [r3, #24]
 8008622:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008624:	697b      	ldr	r3, [r7, #20]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	4aa4      	ldr	r2, [pc, #656]	; (80088bc <UART_SetConfig+0x2f0>)
 800862a:	4293      	cmp	r3, r2
 800862c:	d004      	beq.n	8008638 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800862e:	697b      	ldr	r3, [r7, #20]
 8008630:	6a1b      	ldr	r3, [r3, #32]
 8008632:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008634:	4313      	orrs	r3, r2
 8008636:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008638:	697b      	ldr	r3, [r7, #20]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	689b      	ldr	r3, [r3, #8]
 800863e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8008642:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8008646:	697a      	ldr	r2, [r7, #20]
 8008648:	6812      	ldr	r2, [r2, #0]
 800864a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800864c:	430b      	orrs	r3, r1
 800864e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008650:	697b      	ldr	r3, [r7, #20]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008656:	f023 010f 	bic.w	r1, r3, #15
 800865a:	697b      	ldr	r3, [r7, #20]
 800865c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800865e:	697b      	ldr	r3, [r7, #20]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	430a      	orrs	r2, r1
 8008664:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008666:	697b      	ldr	r3, [r7, #20]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	4a95      	ldr	r2, [pc, #596]	; (80088c0 <UART_SetConfig+0x2f4>)
 800866c:	4293      	cmp	r3, r2
 800866e:	d125      	bne.n	80086bc <UART_SetConfig+0xf0>
 8008670:	2003      	movs	r0, #3
 8008672:	f7ff fead 	bl	80083d0 <LL_RCC_GetUSARTClockSource>
 8008676:	4603      	mov	r3, r0
 8008678:	2b03      	cmp	r3, #3
 800867a:	d81b      	bhi.n	80086b4 <UART_SetConfig+0xe8>
 800867c:	a201      	add	r2, pc, #4	; (adr r2, 8008684 <UART_SetConfig+0xb8>)
 800867e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008682:	bf00      	nop
 8008684:	08008695 	.word	0x08008695
 8008688:	080086a5 	.word	0x080086a5
 800868c:	0800869d 	.word	0x0800869d
 8008690:	080086ad 	.word	0x080086ad
 8008694:	2301      	movs	r3, #1
 8008696:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800869a:	e042      	b.n	8008722 <UART_SetConfig+0x156>
 800869c:	2302      	movs	r3, #2
 800869e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80086a2:	e03e      	b.n	8008722 <UART_SetConfig+0x156>
 80086a4:	2304      	movs	r3, #4
 80086a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80086aa:	e03a      	b.n	8008722 <UART_SetConfig+0x156>
 80086ac:	2308      	movs	r3, #8
 80086ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80086b2:	e036      	b.n	8008722 <UART_SetConfig+0x156>
 80086b4:	2310      	movs	r3, #16
 80086b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80086ba:	e032      	b.n	8008722 <UART_SetConfig+0x156>
 80086bc:	697b      	ldr	r3, [r7, #20]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	4a7e      	ldr	r2, [pc, #504]	; (80088bc <UART_SetConfig+0x2f0>)
 80086c2:	4293      	cmp	r3, r2
 80086c4:	d12a      	bne.n	800871c <UART_SetConfig+0x150>
 80086c6:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80086ca:	f7ff fe91 	bl	80083f0 <LL_RCC_GetLPUARTClockSource>
 80086ce:	4603      	mov	r3, r0
 80086d0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80086d4:	d01a      	beq.n	800870c <UART_SetConfig+0x140>
 80086d6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80086da:	d81b      	bhi.n	8008714 <UART_SetConfig+0x148>
 80086dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80086e0:	d00c      	beq.n	80086fc <UART_SetConfig+0x130>
 80086e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80086e6:	d815      	bhi.n	8008714 <UART_SetConfig+0x148>
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d003      	beq.n	80086f4 <UART_SetConfig+0x128>
 80086ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80086f0:	d008      	beq.n	8008704 <UART_SetConfig+0x138>
 80086f2:	e00f      	b.n	8008714 <UART_SetConfig+0x148>
 80086f4:	2300      	movs	r3, #0
 80086f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80086fa:	e012      	b.n	8008722 <UART_SetConfig+0x156>
 80086fc:	2302      	movs	r3, #2
 80086fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008702:	e00e      	b.n	8008722 <UART_SetConfig+0x156>
 8008704:	2304      	movs	r3, #4
 8008706:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800870a:	e00a      	b.n	8008722 <UART_SetConfig+0x156>
 800870c:	2308      	movs	r3, #8
 800870e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008712:	e006      	b.n	8008722 <UART_SetConfig+0x156>
 8008714:	2310      	movs	r3, #16
 8008716:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800871a:	e002      	b.n	8008722 <UART_SetConfig+0x156>
 800871c:	2310      	movs	r3, #16
 800871e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008722:	697b      	ldr	r3, [r7, #20]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	4a65      	ldr	r2, [pc, #404]	; (80088bc <UART_SetConfig+0x2f0>)
 8008728:	4293      	cmp	r3, r2
 800872a:	f040 8097 	bne.w	800885c <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800872e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008732:	2b08      	cmp	r3, #8
 8008734:	d823      	bhi.n	800877e <UART_SetConfig+0x1b2>
 8008736:	a201      	add	r2, pc, #4	; (adr r2, 800873c <UART_SetConfig+0x170>)
 8008738:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800873c:	08008761 	.word	0x08008761
 8008740:	0800877f 	.word	0x0800877f
 8008744:	08008769 	.word	0x08008769
 8008748:	0800877f 	.word	0x0800877f
 800874c:	0800876f 	.word	0x0800876f
 8008750:	0800877f 	.word	0x0800877f
 8008754:	0800877f 	.word	0x0800877f
 8008758:	0800877f 	.word	0x0800877f
 800875c:	08008777 	.word	0x08008777
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008760:	f7fd fed0 	bl	8006504 <HAL_RCC_GetPCLK1Freq>
 8008764:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008766:	e010      	b.n	800878a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008768:	4b56      	ldr	r3, [pc, #344]	; (80088c4 <UART_SetConfig+0x2f8>)
 800876a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800876c:	e00d      	b.n	800878a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800876e:	f7fd fe49 	bl	8006404 <HAL_RCC_GetSysClockFreq>
 8008772:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008774:	e009      	b.n	800878a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008776:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800877a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800877c:	e005      	b.n	800878a <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 800877e:	2300      	movs	r3, #0
 8008780:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008782:	2301      	movs	r3, #1
 8008784:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008788:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800878a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800878c:	2b00      	cmp	r3, #0
 800878e:	f000 812b 	beq.w	80089e8 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008792:	697b      	ldr	r3, [r7, #20]
 8008794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008796:	4a4c      	ldr	r2, [pc, #304]	; (80088c8 <UART_SetConfig+0x2fc>)
 8008798:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800879c:	461a      	mov	r2, r3
 800879e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087a0:	fbb3 f3f2 	udiv	r3, r3, r2
 80087a4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80087a6:	697b      	ldr	r3, [r7, #20]
 80087a8:	685a      	ldr	r2, [r3, #4]
 80087aa:	4613      	mov	r3, r2
 80087ac:	005b      	lsls	r3, r3, #1
 80087ae:	4413      	add	r3, r2
 80087b0:	69ba      	ldr	r2, [r7, #24]
 80087b2:	429a      	cmp	r2, r3
 80087b4:	d305      	bcc.n	80087c2 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80087b6:	697b      	ldr	r3, [r7, #20]
 80087b8:	685b      	ldr	r3, [r3, #4]
 80087ba:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80087bc:	69ba      	ldr	r2, [r7, #24]
 80087be:	429a      	cmp	r2, r3
 80087c0:	d903      	bls.n	80087ca <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 80087c2:	2301      	movs	r3, #1
 80087c4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80087c8:	e10e      	b.n	80089e8 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80087ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087cc:	2200      	movs	r2, #0
 80087ce:	60bb      	str	r3, [r7, #8]
 80087d0:	60fa      	str	r2, [r7, #12]
 80087d2:	697b      	ldr	r3, [r7, #20]
 80087d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087d6:	4a3c      	ldr	r2, [pc, #240]	; (80088c8 <UART_SetConfig+0x2fc>)
 80087d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80087dc:	b29b      	uxth	r3, r3
 80087de:	2200      	movs	r2, #0
 80087e0:	603b      	str	r3, [r7, #0]
 80087e2:	607a      	str	r2, [r7, #4]
 80087e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80087e8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80087ec:	f7f7 fd20 	bl	8000230 <__aeabi_uldivmod>
 80087f0:	4602      	mov	r2, r0
 80087f2:	460b      	mov	r3, r1
 80087f4:	4610      	mov	r0, r2
 80087f6:	4619      	mov	r1, r3
 80087f8:	f04f 0200 	mov.w	r2, #0
 80087fc:	f04f 0300 	mov.w	r3, #0
 8008800:	020b      	lsls	r3, r1, #8
 8008802:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008806:	0202      	lsls	r2, r0, #8
 8008808:	6979      	ldr	r1, [r7, #20]
 800880a:	6849      	ldr	r1, [r1, #4]
 800880c:	0849      	lsrs	r1, r1, #1
 800880e:	2000      	movs	r0, #0
 8008810:	460c      	mov	r4, r1
 8008812:	4605      	mov	r5, r0
 8008814:	eb12 0804 	adds.w	r8, r2, r4
 8008818:	eb43 0905 	adc.w	r9, r3, r5
 800881c:	697b      	ldr	r3, [r7, #20]
 800881e:	685b      	ldr	r3, [r3, #4]
 8008820:	2200      	movs	r2, #0
 8008822:	469a      	mov	sl, r3
 8008824:	4693      	mov	fp, r2
 8008826:	4652      	mov	r2, sl
 8008828:	465b      	mov	r3, fp
 800882a:	4640      	mov	r0, r8
 800882c:	4649      	mov	r1, r9
 800882e:	f7f7 fcff 	bl	8000230 <__aeabi_uldivmod>
 8008832:	4602      	mov	r2, r0
 8008834:	460b      	mov	r3, r1
 8008836:	4613      	mov	r3, r2
 8008838:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800883a:	6a3b      	ldr	r3, [r7, #32]
 800883c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008840:	d308      	bcc.n	8008854 <UART_SetConfig+0x288>
 8008842:	6a3b      	ldr	r3, [r7, #32]
 8008844:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008848:	d204      	bcs.n	8008854 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 800884a:	697b      	ldr	r3, [r7, #20]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	6a3a      	ldr	r2, [r7, #32]
 8008850:	60da      	str	r2, [r3, #12]
 8008852:	e0c9      	b.n	80089e8 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8008854:	2301      	movs	r3, #1
 8008856:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800885a:	e0c5      	b.n	80089e8 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800885c:	697b      	ldr	r3, [r7, #20]
 800885e:	69db      	ldr	r3, [r3, #28]
 8008860:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008864:	d16d      	bne.n	8008942 <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8008866:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800886a:	3b01      	subs	r3, #1
 800886c:	2b07      	cmp	r3, #7
 800886e:	d82d      	bhi.n	80088cc <UART_SetConfig+0x300>
 8008870:	a201      	add	r2, pc, #4	; (adr r2, 8008878 <UART_SetConfig+0x2ac>)
 8008872:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008876:	bf00      	nop
 8008878:	08008899 	.word	0x08008899
 800887c:	080088a1 	.word	0x080088a1
 8008880:	080088cd 	.word	0x080088cd
 8008884:	080088a7 	.word	0x080088a7
 8008888:	080088cd 	.word	0x080088cd
 800888c:	080088cd 	.word	0x080088cd
 8008890:	080088cd 	.word	0x080088cd
 8008894:	080088af 	.word	0x080088af
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008898:	f7fd fe4a 	bl	8006530 <HAL_RCC_GetPCLK2Freq>
 800889c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800889e:	e01b      	b.n	80088d8 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80088a0:	4b08      	ldr	r3, [pc, #32]	; (80088c4 <UART_SetConfig+0x2f8>)
 80088a2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80088a4:	e018      	b.n	80088d8 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80088a6:	f7fd fdad 	bl	8006404 <HAL_RCC_GetSysClockFreq>
 80088aa:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80088ac:	e014      	b.n	80088d8 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80088ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80088b2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80088b4:	e010      	b.n	80088d8 <UART_SetConfig+0x30c>
 80088b6:	bf00      	nop
 80088b8:	cfff69f3 	.word	0xcfff69f3
 80088bc:	40008000 	.word	0x40008000
 80088c0:	40013800 	.word	0x40013800
 80088c4:	00f42400 	.word	0x00f42400
 80088c8:	0800dba0 	.word	0x0800dba0
      default:
        pclk = 0U;
 80088cc:	2300      	movs	r3, #0
 80088ce:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80088d0:	2301      	movs	r3, #1
 80088d2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80088d6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80088d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088da:	2b00      	cmp	r3, #0
 80088dc:	f000 8084 	beq.w	80089e8 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80088e0:	697b      	ldr	r3, [r7, #20]
 80088e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088e4:	4a4b      	ldr	r2, [pc, #300]	; (8008a14 <UART_SetConfig+0x448>)
 80088e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80088ea:	461a      	mov	r2, r3
 80088ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088ee:	fbb3 f3f2 	udiv	r3, r3, r2
 80088f2:	005a      	lsls	r2, r3, #1
 80088f4:	697b      	ldr	r3, [r7, #20]
 80088f6:	685b      	ldr	r3, [r3, #4]
 80088f8:	085b      	lsrs	r3, r3, #1
 80088fa:	441a      	add	r2, r3
 80088fc:	697b      	ldr	r3, [r7, #20]
 80088fe:	685b      	ldr	r3, [r3, #4]
 8008900:	fbb2 f3f3 	udiv	r3, r2, r3
 8008904:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008906:	6a3b      	ldr	r3, [r7, #32]
 8008908:	2b0f      	cmp	r3, #15
 800890a:	d916      	bls.n	800893a <UART_SetConfig+0x36e>
 800890c:	6a3b      	ldr	r3, [r7, #32]
 800890e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008912:	d212      	bcs.n	800893a <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008914:	6a3b      	ldr	r3, [r7, #32]
 8008916:	b29b      	uxth	r3, r3
 8008918:	f023 030f 	bic.w	r3, r3, #15
 800891c:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800891e:	6a3b      	ldr	r3, [r7, #32]
 8008920:	085b      	lsrs	r3, r3, #1
 8008922:	b29b      	uxth	r3, r3
 8008924:	f003 0307 	and.w	r3, r3, #7
 8008928:	b29a      	uxth	r2, r3
 800892a:	8bfb      	ldrh	r3, [r7, #30]
 800892c:	4313      	orrs	r3, r2
 800892e:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008930:	697b      	ldr	r3, [r7, #20]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	8bfa      	ldrh	r2, [r7, #30]
 8008936:	60da      	str	r2, [r3, #12]
 8008938:	e056      	b.n	80089e8 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800893a:	2301      	movs	r3, #1
 800893c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008940:	e052      	b.n	80089e8 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008942:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008946:	3b01      	subs	r3, #1
 8008948:	2b07      	cmp	r3, #7
 800894a:	d822      	bhi.n	8008992 <UART_SetConfig+0x3c6>
 800894c:	a201      	add	r2, pc, #4	; (adr r2, 8008954 <UART_SetConfig+0x388>)
 800894e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008952:	bf00      	nop
 8008954:	08008975 	.word	0x08008975
 8008958:	0800897d 	.word	0x0800897d
 800895c:	08008993 	.word	0x08008993
 8008960:	08008983 	.word	0x08008983
 8008964:	08008993 	.word	0x08008993
 8008968:	08008993 	.word	0x08008993
 800896c:	08008993 	.word	0x08008993
 8008970:	0800898b 	.word	0x0800898b
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008974:	f7fd fddc 	bl	8006530 <HAL_RCC_GetPCLK2Freq>
 8008978:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800897a:	e010      	b.n	800899e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800897c:	4b26      	ldr	r3, [pc, #152]	; (8008a18 <UART_SetConfig+0x44c>)
 800897e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008980:	e00d      	b.n	800899e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008982:	f7fd fd3f 	bl	8006404 <HAL_RCC_GetSysClockFreq>
 8008986:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008988:	e009      	b.n	800899e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800898a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800898e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008990:	e005      	b.n	800899e <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8008992:	2300      	movs	r3, #0
 8008994:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008996:	2301      	movs	r3, #1
 8008998:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800899c:	bf00      	nop
    }

    if (pclk != 0U)
 800899e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d021      	beq.n	80089e8 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80089a4:	697b      	ldr	r3, [r7, #20]
 80089a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089a8:	4a1a      	ldr	r2, [pc, #104]	; (8008a14 <UART_SetConfig+0x448>)
 80089aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80089ae:	461a      	mov	r2, r3
 80089b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089b2:	fbb3 f2f2 	udiv	r2, r3, r2
 80089b6:	697b      	ldr	r3, [r7, #20]
 80089b8:	685b      	ldr	r3, [r3, #4]
 80089ba:	085b      	lsrs	r3, r3, #1
 80089bc:	441a      	add	r2, r3
 80089be:	697b      	ldr	r3, [r7, #20]
 80089c0:	685b      	ldr	r3, [r3, #4]
 80089c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80089c6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80089c8:	6a3b      	ldr	r3, [r7, #32]
 80089ca:	2b0f      	cmp	r3, #15
 80089cc:	d909      	bls.n	80089e2 <UART_SetConfig+0x416>
 80089ce:	6a3b      	ldr	r3, [r7, #32]
 80089d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80089d4:	d205      	bcs.n	80089e2 <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80089d6:	6a3b      	ldr	r3, [r7, #32]
 80089d8:	b29a      	uxth	r2, r3
 80089da:	697b      	ldr	r3, [r7, #20]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	60da      	str	r2, [r3, #12]
 80089e0:	e002      	b.n	80089e8 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 80089e2:	2301      	movs	r3, #1
 80089e4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80089e8:	697b      	ldr	r3, [r7, #20]
 80089ea:	2201      	movs	r2, #1
 80089ec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80089f0:	697b      	ldr	r3, [r7, #20]
 80089f2:	2201      	movs	r2, #1
 80089f4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80089f8:	697b      	ldr	r3, [r7, #20]
 80089fa:	2200      	movs	r2, #0
 80089fc:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80089fe:	697b      	ldr	r3, [r7, #20]
 8008a00:	2200      	movs	r2, #0
 8008a02:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8008a04:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8008a08:	4618      	mov	r0, r3
 8008a0a:	3730      	adds	r7, #48	; 0x30
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008a12:	bf00      	nop
 8008a14:	0800dba0 	.word	0x0800dba0
 8008a18:	00f42400 	.word	0x00f42400

08008a1c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008a1c:	b480      	push	{r7}
 8008a1e:	b083      	sub	sp, #12
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a28:	f003 0301 	and.w	r3, r3, #1
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d00a      	beq.n	8008a46 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	685b      	ldr	r3, [r3, #4]
 8008a36:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	430a      	orrs	r2, r1
 8008a44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a4a:	f003 0302 	and.w	r3, r3, #2
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d00a      	beq.n	8008a68 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	685b      	ldr	r3, [r3, #4]
 8008a58:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	430a      	orrs	r2, r1
 8008a66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a6c:	f003 0304 	and.w	r3, r3, #4
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d00a      	beq.n	8008a8a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	685b      	ldr	r3, [r3, #4]
 8008a7a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	430a      	orrs	r2, r1
 8008a88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a8e:	f003 0308 	and.w	r3, r3, #8
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d00a      	beq.n	8008aac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	685b      	ldr	r3, [r3, #4]
 8008a9c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	430a      	orrs	r2, r1
 8008aaa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ab0:	f003 0310 	and.w	r3, r3, #16
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d00a      	beq.n	8008ace <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	689b      	ldr	r3, [r3, #8]
 8008abe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	430a      	orrs	r2, r1
 8008acc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ad2:	f003 0320 	and.w	r3, r3, #32
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d00a      	beq.n	8008af0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	689b      	ldr	r3, [r3, #8]
 8008ae0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	430a      	orrs	r2, r1
 8008aee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008af4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d01a      	beq.n	8008b32 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	685b      	ldr	r3, [r3, #4]
 8008b02:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	430a      	orrs	r2, r1
 8008b10:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008b1a:	d10a      	bne.n	8008b32 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	685b      	ldr	r3, [r3, #4]
 8008b22:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	430a      	orrs	r2, r1
 8008b30:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d00a      	beq.n	8008b54 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	685b      	ldr	r3, [r3, #4]
 8008b44:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	430a      	orrs	r2, r1
 8008b52:	605a      	str	r2, [r3, #4]
  }
}
 8008b54:	bf00      	nop
 8008b56:	370c      	adds	r7, #12
 8008b58:	46bd      	mov	sp, r7
 8008b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5e:	4770      	bx	lr

08008b60 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008b60:	b580      	push	{r7, lr}
 8008b62:	b098      	sub	sp, #96	; 0x60
 8008b64:	af02      	add	r7, sp, #8
 8008b66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	2200      	movs	r2, #0
 8008b6c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008b70:	f7fa fb86 	bl	8003280 <HAL_GetTick>
 8008b74:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	f003 0308 	and.w	r3, r3, #8
 8008b80:	2b08      	cmp	r3, #8
 8008b82:	d12f      	bne.n	8008be4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008b84:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008b88:	9300      	str	r3, [sp, #0]
 8008b8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008b8c:	2200      	movs	r2, #0
 8008b8e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008b92:	6878      	ldr	r0, [r7, #4]
 8008b94:	f000 f88e 	bl	8008cb4 <UART_WaitOnFlagUntilTimeout>
 8008b98:	4603      	mov	r3, r0
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d022      	beq.n	8008be4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ba4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ba6:	e853 3f00 	ldrex	r3, [r3]
 8008baa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008bac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008bb2:	653b      	str	r3, [r7, #80]	; 0x50
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	461a      	mov	r2, r3
 8008bba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008bbc:	647b      	str	r3, [r7, #68]	; 0x44
 8008bbe:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bc0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008bc2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008bc4:	e841 2300 	strex	r3, r2, [r1]
 8008bc8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008bca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d1e6      	bne.n	8008b9e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	2220      	movs	r2, #32
 8008bd4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	2200      	movs	r2, #0
 8008bdc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008be0:	2303      	movs	r3, #3
 8008be2:	e063      	b.n	8008cac <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	f003 0304 	and.w	r3, r3, #4
 8008bee:	2b04      	cmp	r3, #4
 8008bf0:	d149      	bne.n	8008c86 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008bf2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008bf6:	9300      	str	r3, [sp, #0]
 8008bf8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008bfa:	2200      	movs	r2, #0
 8008bfc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008c00:	6878      	ldr	r0, [r7, #4]
 8008c02:	f000 f857 	bl	8008cb4 <UART_WaitOnFlagUntilTimeout>
 8008c06:	4603      	mov	r3, r0
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d03c      	beq.n	8008c86 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c14:	e853 3f00 	ldrex	r3, [r3]
 8008c18:	623b      	str	r3, [r7, #32]
   return(result);
 8008c1a:	6a3b      	ldr	r3, [r7, #32]
 8008c1c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008c20:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	461a      	mov	r2, r3
 8008c28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c2a:	633b      	str	r3, [r7, #48]	; 0x30
 8008c2c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c2e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008c30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c32:	e841 2300 	strex	r3, r2, [r1]
 8008c36:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008c38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d1e6      	bne.n	8008c0c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	3308      	adds	r3, #8
 8008c44:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c46:	693b      	ldr	r3, [r7, #16]
 8008c48:	e853 3f00 	ldrex	r3, [r3]
 8008c4c:	60fb      	str	r3, [r7, #12]
   return(result);
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	f023 0301 	bic.w	r3, r3, #1
 8008c54:	64bb      	str	r3, [r7, #72]	; 0x48
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	3308      	adds	r3, #8
 8008c5c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008c5e:	61fa      	str	r2, [r7, #28]
 8008c60:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c62:	69b9      	ldr	r1, [r7, #24]
 8008c64:	69fa      	ldr	r2, [r7, #28]
 8008c66:	e841 2300 	strex	r3, r2, [r1]
 8008c6a:	617b      	str	r3, [r7, #20]
   return(result);
 8008c6c:	697b      	ldr	r3, [r7, #20]
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d1e5      	bne.n	8008c3e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	2220      	movs	r2, #32
 8008c76:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	2200      	movs	r2, #0
 8008c7e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008c82:	2303      	movs	r3, #3
 8008c84:	e012      	b.n	8008cac <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	2220      	movs	r2, #32
 8008c8a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	2220      	movs	r2, #32
 8008c92:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	2200      	movs	r2, #0
 8008c9a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	2200      	movs	r2, #0
 8008ca0:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	2200      	movs	r2, #0
 8008ca6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008caa:	2300      	movs	r3, #0
}
 8008cac:	4618      	mov	r0, r3
 8008cae:	3758      	adds	r7, #88	; 0x58
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	bd80      	pop	{r7, pc}

08008cb4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	b084      	sub	sp, #16
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	60f8      	str	r0, [r7, #12]
 8008cbc:	60b9      	str	r1, [r7, #8]
 8008cbe:	603b      	str	r3, [r7, #0]
 8008cc0:	4613      	mov	r3, r2
 8008cc2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008cc4:	e049      	b.n	8008d5a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008cc6:	69bb      	ldr	r3, [r7, #24]
 8008cc8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008ccc:	d045      	beq.n	8008d5a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008cce:	f7fa fad7 	bl	8003280 <HAL_GetTick>
 8008cd2:	4602      	mov	r2, r0
 8008cd4:	683b      	ldr	r3, [r7, #0]
 8008cd6:	1ad3      	subs	r3, r2, r3
 8008cd8:	69ba      	ldr	r2, [r7, #24]
 8008cda:	429a      	cmp	r2, r3
 8008cdc:	d302      	bcc.n	8008ce4 <UART_WaitOnFlagUntilTimeout+0x30>
 8008cde:	69bb      	ldr	r3, [r7, #24]
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d101      	bne.n	8008ce8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008ce4:	2303      	movs	r3, #3
 8008ce6:	e048      	b.n	8008d7a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	f003 0304 	and.w	r3, r3, #4
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d031      	beq.n	8008d5a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	69db      	ldr	r3, [r3, #28]
 8008cfc:	f003 0308 	and.w	r3, r3, #8
 8008d00:	2b08      	cmp	r3, #8
 8008d02:	d110      	bne.n	8008d26 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	2208      	movs	r2, #8
 8008d0a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8008d0c:	68f8      	ldr	r0, [r7, #12]
 8008d0e:	f000 f838 	bl	8008d82 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	2208      	movs	r2, #8
 8008d16:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	2200      	movs	r2, #0
 8008d1e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8008d22:	2301      	movs	r3, #1
 8008d24:	e029      	b.n	8008d7a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	69db      	ldr	r3, [r3, #28]
 8008d2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008d30:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008d34:	d111      	bne.n	8008d5a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008d3e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008d40:	68f8      	ldr	r0, [r7, #12]
 8008d42:	f000 f81e 	bl	8008d82 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	2220      	movs	r2, #32
 8008d4a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	2200      	movs	r2, #0
 8008d52:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8008d56:	2303      	movs	r3, #3
 8008d58:	e00f      	b.n	8008d7a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	69da      	ldr	r2, [r3, #28]
 8008d60:	68bb      	ldr	r3, [r7, #8]
 8008d62:	4013      	ands	r3, r2
 8008d64:	68ba      	ldr	r2, [r7, #8]
 8008d66:	429a      	cmp	r2, r3
 8008d68:	bf0c      	ite	eq
 8008d6a:	2301      	moveq	r3, #1
 8008d6c:	2300      	movne	r3, #0
 8008d6e:	b2db      	uxtb	r3, r3
 8008d70:	461a      	mov	r2, r3
 8008d72:	79fb      	ldrb	r3, [r7, #7]
 8008d74:	429a      	cmp	r2, r3
 8008d76:	d0a6      	beq.n	8008cc6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008d78:	2300      	movs	r3, #0
}
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	3710      	adds	r7, #16
 8008d7e:	46bd      	mov	sp, r7
 8008d80:	bd80      	pop	{r7, pc}

08008d82 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008d82:	b480      	push	{r7}
 8008d84:	b095      	sub	sp, #84	; 0x54
 8008d86:	af00      	add	r7, sp, #0
 8008d88:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d92:	e853 3f00 	ldrex	r3, [r3]
 8008d96:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d9a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008d9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	461a      	mov	r2, r3
 8008da6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008da8:	643b      	str	r3, [r7, #64]	; 0x40
 8008daa:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dac:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008dae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008db0:	e841 2300 	strex	r3, r2, [r1]
 8008db4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008db6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d1e6      	bne.n	8008d8a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	3308      	adds	r3, #8
 8008dc2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dc4:	6a3b      	ldr	r3, [r7, #32]
 8008dc6:	e853 3f00 	ldrex	r3, [r3]
 8008dca:	61fb      	str	r3, [r7, #28]
   return(result);
 8008dcc:	69fb      	ldr	r3, [r7, #28]
 8008dce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008dd2:	f023 0301 	bic.w	r3, r3, #1
 8008dd6:	64bb      	str	r3, [r7, #72]	; 0x48
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	3308      	adds	r3, #8
 8008dde:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008de0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008de2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008de4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008de6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008de8:	e841 2300 	strex	r3, r2, [r1]
 8008dec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d1e3      	bne.n	8008dbc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008df8:	2b01      	cmp	r3, #1
 8008dfa:	d118      	bne.n	8008e2e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	e853 3f00 	ldrex	r3, [r3]
 8008e08:	60bb      	str	r3, [r7, #8]
   return(result);
 8008e0a:	68bb      	ldr	r3, [r7, #8]
 8008e0c:	f023 0310 	bic.w	r3, r3, #16
 8008e10:	647b      	str	r3, [r7, #68]	; 0x44
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	461a      	mov	r2, r3
 8008e18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e1a:	61bb      	str	r3, [r7, #24]
 8008e1c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e1e:	6979      	ldr	r1, [r7, #20]
 8008e20:	69ba      	ldr	r2, [r7, #24]
 8008e22:	e841 2300 	strex	r3, r2, [r1]
 8008e26:	613b      	str	r3, [r7, #16]
   return(result);
 8008e28:	693b      	ldr	r3, [r7, #16]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d1e6      	bne.n	8008dfc <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	2220      	movs	r2, #32
 8008e32:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	2200      	movs	r2, #0
 8008e3a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	2200      	movs	r2, #0
 8008e40:	675a      	str	r2, [r3, #116]	; 0x74
}
 8008e42:	bf00      	nop
 8008e44:	3754      	adds	r7, #84	; 0x54
 8008e46:	46bd      	mov	sp, r7
 8008e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e4c:	4770      	bx	lr

08008e4e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008e4e:	b480      	push	{r7}
 8008e50:	b085      	sub	sp, #20
 8008e52:	af00      	add	r7, sp, #0
 8008e54:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008e5c:	2b01      	cmp	r3, #1
 8008e5e:	d101      	bne.n	8008e64 <HAL_UARTEx_DisableFifoMode+0x16>
 8008e60:	2302      	movs	r3, #2
 8008e62:	e027      	b.n	8008eb4 <HAL_UARTEx_DisableFifoMode+0x66>
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	2201      	movs	r2, #1
 8008e68:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	2224      	movs	r2, #36	; 0x24
 8008e70:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	681a      	ldr	r2, [r3, #0]
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	f022 0201 	bic.w	r2, r2, #1
 8008e8a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008e92:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	2200      	movs	r2, #0
 8008e98:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	68fa      	ldr	r2, [r7, #12]
 8008ea0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	2220      	movs	r2, #32
 8008ea6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	2200      	movs	r2, #0
 8008eae:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008eb2:	2300      	movs	r3, #0
}
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	3714      	adds	r7, #20
 8008eb8:	46bd      	mov	sp, r7
 8008eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ebe:	4770      	bx	lr

08008ec0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008ec0:	b580      	push	{r7, lr}
 8008ec2:	b084      	sub	sp, #16
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	6078      	str	r0, [r7, #4]
 8008ec8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008ed0:	2b01      	cmp	r3, #1
 8008ed2:	d101      	bne.n	8008ed8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008ed4:	2302      	movs	r3, #2
 8008ed6:	e02d      	b.n	8008f34 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	2201      	movs	r2, #1
 8008edc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	2224      	movs	r2, #36	; 0x24
 8008ee4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	681a      	ldr	r2, [r3, #0]
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	f022 0201 	bic.w	r2, r2, #1
 8008efe:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	689b      	ldr	r3, [r3, #8]
 8008f06:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	683a      	ldr	r2, [r7, #0]
 8008f10:	430a      	orrs	r2, r1
 8008f12:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008f14:	6878      	ldr	r0, [r7, #4]
 8008f16:	f000 f84f 	bl	8008fb8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	68fa      	ldr	r2, [r7, #12]
 8008f20:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	2220      	movs	r2, #32
 8008f26:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	2200      	movs	r2, #0
 8008f2e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008f32:	2300      	movs	r3, #0
}
 8008f34:	4618      	mov	r0, r3
 8008f36:	3710      	adds	r7, #16
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	bd80      	pop	{r7, pc}

08008f3c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008f3c:	b580      	push	{r7, lr}
 8008f3e:	b084      	sub	sp, #16
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	6078      	str	r0, [r7, #4]
 8008f44:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008f4c:	2b01      	cmp	r3, #1
 8008f4e:	d101      	bne.n	8008f54 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008f50:	2302      	movs	r3, #2
 8008f52:	e02d      	b.n	8008fb0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	2201      	movs	r2, #1
 8008f58:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	2224      	movs	r2, #36	; 0x24
 8008f60:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	681a      	ldr	r2, [r3, #0]
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	f022 0201 	bic.w	r2, r2, #1
 8008f7a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	689b      	ldr	r3, [r3, #8]
 8008f82:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	683a      	ldr	r2, [r7, #0]
 8008f8c:	430a      	orrs	r2, r1
 8008f8e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008f90:	6878      	ldr	r0, [r7, #4]
 8008f92:	f000 f811 	bl	8008fb8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	68fa      	ldr	r2, [r7, #12]
 8008f9c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	2220      	movs	r2, #32
 8008fa2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	2200      	movs	r2, #0
 8008faa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008fae:	2300      	movs	r3, #0
}
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	3710      	adds	r7, #16
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	bd80      	pop	{r7, pc}

08008fb8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008fb8:	b480      	push	{r7}
 8008fba:	b085      	sub	sp, #20
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d108      	bne.n	8008fda <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	2201      	movs	r2, #1
 8008fcc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	2201      	movs	r2, #1
 8008fd4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008fd8:	e031      	b.n	800903e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008fda:	2308      	movs	r3, #8
 8008fdc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008fde:	2308      	movs	r3, #8
 8008fe0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	689b      	ldr	r3, [r3, #8]
 8008fe8:	0e5b      	lsrs	r3, r3, #25
 8008fea:	b2db      	uxtb	r3, r3
 8008fec:	f003 0307 	and.w	r3, r3, #7
 8008ff0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	689b      	ldr	r3, [r3, #8]
 8008ff8:	0f5b      	lsrs	r3, r3, #29
 8008ffa:	b2db      	uxtb	r3, r3
 8008ffc:	f003 0307 	and.w	r3, r3, #7
 8009000:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009002:	7bbb      	ldrb	r3, [r7, #14]
 8009004:	7b3a      	ldrb	r2, [r7, #12]
 8009006:	4911      	ldr	r1, [pc, #68]	; (800904c <UARTEx_SetNbDataToProcess+0x94>)
 8009008:	5c8a      	ldrb	r2, [r1, r2]
 800900a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800900e:	7b3a      	ldrb	r2, [r7, #12]
 8009010:	490f      	ldr	r1, [pc, #60]	; (8009050 <UARTEx_SetNbDataToProcess+0x98>)
 8009012:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009014:	fb93 f3f2 	sdiv	r3, r3, r2
 8009018:	b29a      	uxth	r2, r3
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009020:	7bfb      	ldrb	r3, [r7, #15]
 8009022:	7b7a      	ldrb	r2, [r7, #13]
 8009024:	4909      	ldr	r1, [pc, #36]	; (800904c <UARTEx_SetNbDataToProcess+0x94>)
 8009026:	5c8a      	ldrb	r2, [r1, r2]
 8009028:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800902c:	7b7a      	ldrb	r2, [r7, #13]
 800902e:	4908      	ldr	r1, [pc, #32]	; (8009050 <UARTEx_SetNbDataToProcess+0x98>)
 8009030:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009032:	fb93 f3f2 	sdiv	r3, r3, r2
 8009036:	b29a      	uxth	r2, r3
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800903e:	bf00      	nop
 8009040:	3714      	adds	r7, #20
 8009042:	46bd      	mov	sp, r7
 8009044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009048:	4770      	bx	lr
 800904a:	bf00      	nop
 800904c:	0800dbb8 	.word	0x0800dbb8
 8009050:	0800dbc0 	.word	0x0800dbc0

08009054 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 8009054:	b580      	push	{r7, lr}
 8009056:	b088      	sub	sp, #32
 8009058:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800905a:	2300      	movs	r3, #0
 800905c:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800905e:	f107 0308 	add.w	r3, r7, #8
 8009062:	2218      	movs	r2, #24
 8009064:	2100      	movs	r1, #0
 8009066:	4618      	mov	r0, r3
 8009068:	f001 f8d8 	bl	800a21c <Osal_MemSet>
  rq.ogf = 0x3f;
 800906c:	233f      	movs	r3, #63	; 0x3f
 800906e:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 8009070:	2381      	movs	r3, #129	; 0x81
 8009072:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8009074:	1dfb      	adds	r3, r7, #7
 8009076:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8009078:	2301      	movs	r3, #1
 800907a:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800907c:	f107 0308 	add.w	r3, r7, #8
 8009080:	2100      	movs	r1, #0
 8009082:	4618      	mov	r0, r3
 8009084:	f001 fb54 	bl	800a730 <hci_send_req>
 8009088:	4603      	mov	r3, r0
 800908a:	2b00      	cmp	r3, #0
 800908c:	da01      	bge.n	8009092 <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 800908e:	23ff      	movs	r3, #255	; 0xff
 8009090:	e000      	b.n	8009094 <aci_gap_set_non_discoverable+0x40>
  return status;
 8009092:	79fb      	ldrb	r3, [r7, #7]
}
 8009094:	4618      	mov	r0, r3
 8009096:	3720      	adds	r7, #32
 8009098:	46bd      	mov	sp, r7
 800909a:	bd80      	pop	{r7, pc}

0800909c <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Slave_Conn_Interval_Min,
                                     uint16_t Slave_Conn_Interval_Max )
{
 800909c:	b5b0      	push	{r4, r5, r7, lr}
 800909e:	b0ce      	sub	sp, #312	; 0x138
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	4605      	mov	r5, r0
 80090a4:	460c      	mov	r4, r1
 80090a6:	4610      	mov	r0, r2
 80090a8:	4619      	mov	r1, r3
 80090aa:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80090ae:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 80090b2:	462a      	mov	r2, r5
 80090b4:	701a      	strb	r2, [r3, #0]
 80090b6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80090ba:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80090be:	4622      	mov	r2, r4
 80090c0:	801a      	strh	r2, [r3, #0]
 80090c2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80090c6:	f5a3 739b 	sub.w	r3, r3, #310	; 0x136
 80090ca:	4602      	mov	r2, r0
 80090cc:	801a      	strh	r2, [r3, #0]
 80090ce:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80090d2:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 80090d6:	460a      	mov	r2, r1
 80090d8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 80090da:	f107 0310 	add.w	r3, r7, #16
 80090de:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 80090e2:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 80090e6:	3308      	adds	r3, #8
 80090e8:	f107 0210 	add.w	r2, r7, #16
 80090ec:	4413      	add	r3, r2
 80090ee:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 80090f2:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 80090f6:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 80090fa:	4413      	add	r3, r2
 80090fc:	3309      	adds	r3, #9
 80090fe:	f107 0210 	add.w	r2, r7, #16
 8009102:	4413      	add	r3, r2
 8009104:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8009108:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800910c:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8009110:	2200      	movs	r2, #0
 8009112:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009114:	2300      	movs	r3, #0
 8009116:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Type = Advertising_Type;
 800911a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800911e:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8009122:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 8009126:	7812      	ldrb	r2, [r2, #0]
 8009128:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800912a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800912e:	3301      	adds	r3, #1
 8009130:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 8009134:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009138:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800913c:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 8009140:	8812      	ldrh	r2, [r2, #0]
 8009142:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 8009146:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800914a:	3302      	adds	r3, #2
 800914c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 8009150:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009154:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8009158:	f5a2 729b 	sub.w	r2, r2, #310	; 0x136
 800915c:	8812      	ldrh	r2, [r2, #0]
 800915e:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 8009162:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009166:	3302      	adds	r3, #2
 8009168:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 800916c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009170:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8009174:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8009178:	7812      	ldrb	r2, [r2, #0]
 800917a:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800917c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009180:	3301      	adds	r3, #1
 8009182:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 8009186:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800918a:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 800918e:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8009190:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009194:	3301      	adds	r3, #1
 8009196:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 800919a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800919e:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 80091a2:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 80091a4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80091a8:	3301      	adds	r3, #1
 80091aa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 80091ae:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80091b2:	3308      	adds	r3, #8
 80091b4:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 80091b8:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 80091bc:	4618      	mov	r0, r3
 80091be:	f001 f81d 	bl	800a1fc <Osal_MemCpy>
    index_input += Local_Name_Length;
 80091c2:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 80091c6:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80091ca:	4413      	add	r3, r2
 80091cc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 80091d0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80091d4:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 80091d8:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 80091da:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80091de:	3301      	adds	r3, #1
 80091e0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 80091e4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80091e8:	3301      	adds	r3, #1
 80091ea:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 80091ee:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 80091f2:	4618      	mov	r0, r3
 80091f4:	f001 f802 	bl	800a1fc <Osal_MemCpy>
    index_input += Service_Uuid_length;
 80091f8:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 80091fc:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8009200:	4413      	add	r3, r2
 8009202:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Min = Slave_Conn_Interval_Min;
 8009206:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800920a:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 800920e:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8009210:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009214:	3302      	adds	r3, #2
 8009216:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Max = Slave_Conn_Interval_Max;
 800921a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800921e:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 8009222:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 8009224:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009228:	3302      	adds	r3, #2
 800922a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800922e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009232:	2218      	movs	r2, #24
 8009234:	2100      	movs	r1, #0
 8009236:	4618      	mov	r0, r3
 8009238:	f000 fff0 	bl	800a21c <Osal_MemSet>
  rq.ogf = 0x3f;
 800923c:	233f      	movs	r3, #63	; 0x3f
 800923e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 8009242:	2383      	movs	r3, #131	; 0x83
 8009244:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8009248:	f107 0310 	add.w	r3, r7, #16
 800924c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8009250:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009254:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8009258:	f107 030f 	add.w	r3, r7, #15
 800925c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8009260:	2301      	movs	r3, #1
 8009262:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009266:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800926a:	2100      	movs	r1, #0
 800926c:	4618      	mov	r0, r3
 800926e:	f001 fa5f 	bl	800a730 <hci_send_req>
 8009272:	4603      	mov	r3, r0
 8009274:	2b00      	cmp	r3, #0
 8009276:	da01      	bge.n	800927c <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 8009278:	23ff      	movs	r3, #255	; 0xff
 800927a:	e004      	b.n	8009286 <aci_gap_set_discoverable+0x1ea>
  return status;
 800927c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009280:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8009284:	781b      	ldrb	r3, [r3, #0]
}
 8009286:	4618      	mov	r0, r3
 8009288:	f507 779c 	add.w	r7, r7, #312	; 0x138
 800928c:	46bd      	mov	sp, r7
 800928e:	bdb0      	pop	{r4, r5, r7, pc}

08009290 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 8009290:	b580      	push	{r7, lr}
 8009292:	b0cc      	sub	sp, #304	; 0x130
 8009294:	af00      	add	r7, sp, #0
 8009296:	4602      	mov	r2, r0
 8009298:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800929c:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80092a0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 80092a2:	f107 0310 	add.w	r3, r7, #16
 80092a6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80092aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80092ae:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80092b2:	2200      	movs	r2, #0
 80092b4:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80092b6:	2300      	movs	r3, #0
 80092b8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->IO_Capability = IO_Capability;
 80092bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80092c0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80092c4:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 80092c8:	7812      	ldrb	r2, [r2, #0]
 80092ca:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80092cc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80092d0:	3301      	adds	r3, #1
 80092d2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80092d6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80092da:	2218      	movs	r2, #24
 80092dc:	2100      	movs	r1, #0
 80092de:	4618      	mov	r0, r3
 80092e0:	f000 ff9c 	bl	800a21c <Osal_MemSet>
  rq.ogf = 0x3f;
 80092e4:	233f      	movs	r3, #63	; 0x3f
 80092e6:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x085;
 80092ea:	2385      	movs	r3, #133	; 0x85
 80092ec:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80092f0:	f107 0310 	add.w	r3, r7, #16
 80092f4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80092f8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80092fc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8009300:	f107 030f 	add.w	r3, r7, #15
 8009304:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8009308:	2301      	movs	r3, #1
 800930a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800930e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009312:	2100      	movs	r1, #0
 8009314:	4618      	mov	r0, r3
 8009316:	f001 fa0b 	bl	800a730 <hci_send_req>
 800931a:	4603      	mov	r3, r0
 800931c:	2b00      	cmp	r3, #0
 800931e:	da01      	bge.n	8009324 <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 8009320:	23ff      	movs	r3, #255	; 0xff
 8009322:	e004      	b.n	800932e <aci_gap_set_io_capability+0x9e>
  return status;
 8009324:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009328:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800932c:	781b      	ldrb	r3, [r3, #0]
}
 800932e:	4618      	mov	r0, r3
 8009330:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8009334:	46bd      	mov	sp, r7
 8009336:	bd80      	pop	{r7, pc}

08009338 <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 8009338:	b5b0      	push	{r4, r5, r7, lr}
 800933a:	b0cc      	sub	sp, #304	; 0x130
 800933c:	af00      	add	r7, sp, #0
 800933e:	4605      	mov	r5, r0
 8009340:	460c      	mov	r4, r1
 8009342:	4610      	mov	r0, r2
 8009344:	4619      	mov	r1, r3
 8009346:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800934a:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800934e:	462a      	mov	r2, r5
 8009350:	701a      	strb	r2, [r3, #0]
 8009352:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009356:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800935a:	4622      	mov	r2, r4
 800935c:	701a      	strb	r2, [r3, #0]
 800935e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009362:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8009366:	4602      	mov	r2, r0
 8009368:	701a      	strb	r2, [r3, #0]
 800936a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800936e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009372:	460a      	mov	r2, r1
 8009374:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 8009376:	f107 0310 	add.w	r3, r7, #16
 800937a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800937e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009382:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009386:	2200      	movs	r2, #0
 8009388:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800938a:	2300      	movs	r3, #0
 800938c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 8009390:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009394:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009398:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800939c:	7812      	ldrb	r2, [r2, #0]
 800939e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80093a0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80093a4:	3301      	adds	r3, #1
 80093a6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->MITM_Mode = MITM_Mode;
 80093aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80093ae:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80093b2:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80093b6:	7812      	ldrb	r2, [r2, #0]
 80093b8:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80093ba:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80093be:	3301      	adds	r3, #1
 80093c0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->SC_Support = SC_Support;
 80093c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80093c8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80093cc:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 80093d0:	7812      	ldrb	r2, [r2, #0]
 80093d2:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80093d4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80093d8:	3301      	adds	r3, #1
 80093da:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 80093de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80093e2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80093e6:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80093ea:	7812      	ldrb	r2, [r2, #0]
 80093ec:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 80093ee:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80093f2:	3301      	adds	r3, #1
 80093f4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 80093f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80093fc:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 8009400:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8009402:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009406:	3301      	adds	r3, #1
 8009408:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 800940c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009410:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 8009414:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8009416:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800941a:	3301      	adds	r3, #1
 800941c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 8009420:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009424:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8009428:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800942a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800942e:	3301      	adds	r3, #1
 8009430:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 8009434:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009438:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800943c:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 8009440:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009444:	3304      	adds	r3, #4
 8009446:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 800944a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800944e:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8009452:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 8009454:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009458:	3301      	adds	r3, #1
 800945a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800945e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009462:	2218      	movs	r2, #24
 8009464:	2100      	movs	r1, #0
 8009466:	4618      	mov	r0, r3
 8009468:	f000 fed8 	bl	800a21c <Osal_MemSet>
  rq.ogf = 0x3f;
 800946c:	233f      	movs	r3, #63	; 0x3f
 800946e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 8009472:	2386      	movs	r3, #134	; 0x86
 8009474:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8009478:	f107 0310 	add.w	r3, r7, #16
 800947c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8009480:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009484:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8009488:	f107 030f 	add.w	r3, r7, #15
 800948c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8009490:	2301      	movs	r3, #1
 8009492:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009496:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800949a:	2100      	movs	r1, #0
 800949c:	4618      	mov	r0, r3
 800949e:	f001 f947 	bl	800a730 <hci_send_req>
 80094a2:	4603      	mov	r3, r0
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	da01      	bge.n	80094ac <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 80094a8:	23ff      	movs	r3, #255	; 0xff
 80094aa:	e004      	b.n	80094b6 <aci_gap_set_authentication_requirement+0x17e>
  return status;
 80094ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80094b0:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80094b4:	781b      	ldrb	r3, [r3, #0]
}
 80094b6:	4618      	mov	r0, r3
 80094b8:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80094bc:	46bd      	mov	sp, r7
 80094be:	bdb0      	pop	{r4, r5, r7, pc}

080094c0 <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 80094c0:	b580      	push	{r7, lr}
 80094c2:	b0cc      	sub	sp, #304	; 0x130
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	4602      	mov	r2, r0
 80094c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80094cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80094d0:	6019      	str	r1, [r3, #0]
 80094d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80094d6:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80094da:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 80094dc:	f107 0310 	add.w	r3, r7, #16
 80094e0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80094e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80094e8:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80094ec:	2200      	movs	r2, #0
 80094ee:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80094f0:	2300      	movs	r3, #0
 80094f2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 80094f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80094fa:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80094fe:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8009502:	8812      	ldrh	r2, [r2, #0]
 8009504:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8009506:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800950a:	3302      	adds	r3, #2
 800950c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Pass_Key = Pass_Key;
 8009510:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009514:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009518:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 800951c:	6812      	ldr	r2, [r2, #0]
 800951e:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 8009522:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009526:	3304      	adds	r3, #4
 8009528:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800952c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009530:	2218      	movs	r2, #24
 8009532:	2100      	movs	r1, #0
 8009534:	4618      	mov	r0, r3
 8009536:	f000 fe71 	bl	800a21c <Osal_MemSet>
  rq.ogf = 0x3f;
 800953a:	233f      	movs	r3, #63	; 0x3f
 800953c:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x088;
 8009540:	2388      	movs	r3, #136	; 0x88
 8009542:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8009546:	f107 0310 	add.w	r3, r7, #16
 800954a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800954e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009552:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8009556:	f107 030f 	add.w	r3, r7, #15
 800955a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800955e:	2301      	movs	r3, #1
 8009560:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009564:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009568:	2100      	movs	r1, #0
 800956a:	4618      	mov	r0, r3
 800956c:	f001 f8e0 	bl	800a730 <hci_send_req>
 8009570:	4603      	mov	r3, r0
 8009572:	2b00      	cmp	r3, #0
 8009574:	da01      	bge.n	800957a <aci_gap_pass_key_resp+0xba>
    return BLE_STATUS_TIMEOUT;
 8009576:	23ff      	movs	r3, #255	; 0xff
 8009578:	e004      	b.n	8009584 <aci_gap_pass_key_resp+0xc4>
  return status;
 800957a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800957e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009582:	781b      	ldrb	r3, [r3, #0]
}
 8009584:	4618      	mov	r0, r3
 8009586:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800958a:	46bd      	mov	sp, r7
 800958c:	bd80      	pop	{r7, pc}

0800958e <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 800958e:	b590      	push	{r4, r7, lr}
 8009590:	b0cd      	sub	sp, #308	; 0x134
 8009592:	af00      	add	r7, sp, #0
 8009594:	4604      	mov	r4, r0
 8009596:	4608      	mov	r0, r1
 8009598:	4611      	mov	r1, r2
 800959a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800959e:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 80095a2:	6013      	str	r3, [r2, #0]
 80095a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80095a8:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80095ac:	4622      	mov	r2, r4
 80095ae:	701a      	strb	r2, [r3, #0]
 80095b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80095b4:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80095b8:	4602      	mov	r2, r0
 80095ba:	701a      	strb	r2, [r3, #0]
 80095bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80095c0:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 80095c4:	460a      	mov	r2, r1
 80095c6:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 80095c8:	f107 0310 	add.w	r3, r7, #16
 80095cc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 80095d0:	f107 0308 	add.w	r3, r7, #8
 80095d4:	2207      	movs	r2, #7
 80095d6:	2100      	movs	r1, #0
 80095d8:	4618      	mov	r0, r3
 80095da:	f000 fe1f 	bl	800a21c <Osal_MemSet>
  int index_input = 0;
 80095de:	2300      	movs	r3, #0
 80095e0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = Role;
 80095e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80095e8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80095ec:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 80095f0:	7812      	ldrb	r2, [r2, #0]
 80095f2:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80095f4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80095f8:	3301      	adds	r3, #1
 80095fa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = privacy_enabled;
 80095fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009602:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009606:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800960a:	7812      	ldrb	r2, [r2, #0]
 800960c:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800960e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009612:	3301      	adds	r3, #1
 8009614:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = device_name_char_len;
 8009618:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800961c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009620:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8009624:	7812      	ldrb	r2, [r2, #0]
 8009626:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8009628:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800962c:	3301      	adds	r3, #1
 800962e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009632:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009636:	2218      	movs	r2, #24
 8009638:	2100      	movs	r1, #0
 800963a:	4618      	mov	r0, r3
 800963c:	f000 fdee 	bl	800a21c <Osal_MemSet>
  rq.ogf = 0x3f;
 8009640:	233f      	movs	r3, #63	; 0x3f
 8009642:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 8009646:	238a      	movs	r3, #138	; 0x8a
 8009648:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800964c:	f107 0310 	add.w	r3, r7, #16
 8009650:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8009654:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009658:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 800965c:	f107 0308 	add.w	r3, r7, #8
 8009660:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8009664:	2307      	movs	r3, #7
 8009666:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800966a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800966e:	2100      	movs	r1, #0
 8009670:	4618      	mov	r0, r3
 8009672:	f001 f85d 	bl	800a730 <hci_send_req>
 8009676:	4603      	mov	r3, r0
 8009678:	2b00      	cmp	r3, #0
 800967a:	da01      	bge.n	8009680 <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 800967c:	23ff      	movs	r3, #255	; 0xff
 800967e:	e02e      	b.n	80096de <aci_gap_init+0x150>
  if ( resp.Status )
 8009680:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009684:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8009688:	781b      	ldrb	r3, [r3, #0]
 800968a:	2b00      	cmp	r3, #0
 800968c:	d005      	beq.n	800969a <aci_gap_init+0x10c>
    return resp.Status;
 800968e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009692:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8009696:	781b      	ldrb	r3, [r3, #0]
 8009698:	e021      	b.n	80096de <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 800969a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800969e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80096a2:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80096a6:	b29a      	uxth	r2, r3
 80096a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80096ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 80096b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80096b8:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80096bc:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 80096c0:	b29a      	uxth	r2, r3
 80096c2:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80096c6:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 80096c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80096cc:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80096d0:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 80096d4:	b29a      	uxth	r2, r3
 80096d6:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80096da:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80096dc:	2300      	movs	r3, #0
}
 80096de:	4618      	mov	r0, r3
 80096e0:	f507 779a 	add.w	r7, r7, #308	; 0x134
 80096e4:	46bd      	mov	sp, r7
 80096e6:	bd90      	pop	{r4, r7, pc}

080096e8 <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 80096e8:	b580      	push	{r7, lr}
 80096ea:	b0cc      	sub	sp, #304	; 0x130
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	4602      	mov	r2, r0
 80096f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80096f4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80096f8:	6019      	str	r1, [r3, #0]
 80096fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80096fe:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8009702:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 8009704:	f107 0310 	add.w	r3, r7, #16
 8009708:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800970c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009710:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009714:	2200      	movs	r2, #0
 8009716:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009718:	2300      	movs	r3, #0
 800971a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->AdvDataLen = AdvDataLen;
 800971e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009722:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009726:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800972a:	7812      	ldrb	r2, [r2, #0]
 800972c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800972e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009732:	3301      	adds	r3, #1
 8009734:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 8009738:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800973c:	1c58      	adds	r0, r3, #1
 800973e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009742:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8009746:	781a      	ldrb	r2, [r3, #0]
 8009748:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800974c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009750:	6819      	ldr	r1, [r3, #0]
 8009752:	f000 fd53 	bl	800a1fc <Osal_MemCpy>
  index_input += AdvDataLen;
 8009756:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800975a:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800975e:	781b      	ldrb	r3, [r3, #0]
 8009760:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8009764:	4413      	add	r3, r2
 8009766:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800976a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800976e:	2218      	movs	r2, #24
 8009770:	2100      	movs	r1, #0
 8009772:	4618      	mov	r0, r3
 8009774:	f000 fd52 	bl	800a21c <Osal_MemSet>
  rq.ogf = 0x3f;
 8009778:	233f      	movs	r3, #63	; 0x3f
 800977a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08e;
 800977e:	238e      	movs	r3, #142	; 0x8e
 8009780:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8009784:	f107 0310 	add.w	r3, r7, #16
 8009788:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800978c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009790:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8009794:	f107 030f 	add.w	r3, r7, #15
 8009798:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800979c:	2301      	movs	r3, #1
 800979e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80097a2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80097a6:	2100      	movs	r1, #0
 80097a8:	4618      	mov	r0, r3
 80097aa:	f000 ffc1 	bl	800a730 <hci_send_req>
 80097ae:	4603      	mov	r3, r0
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	da01      	bge.n	80097b8 <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 80097b4:	23ff      	movs	r3, #255	; 0xff
 80097b6:	e004      	b.n	80097c2 <aci_gap_update_adv_data+0xda>
  return status;
 80097b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80097bc:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80097c0:	781b      	ldrb	r3, [r3, #0]
}
 80097c2:	4618      	mov	r0, r3
 80097c4:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80097c8:	46bd      	mov	sp, r7
 80097ca:	bd80      	pop	{r7, pc}

080097cc <aci_gap_configure_whitelist>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_whitelist( void )
{
 80097cc:	b580      	push	{r7, lr}
 80097ce:	b088      	sub	sp, #32
 80097d0:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80097d2:	2300      	movs	r3, #0
 80097d4:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80097d6:	f107 0308 	add.w	r3, r7, #8
 80097da:	2218      	movs	r2, #24
 80097dc:	2100      	movs	r1, #0
 80097de:	4618      	mov	r0, r3
 80097e0:	f000 fd1c 	bl	800a21c <Osal_MemSet>
  rq.ogf = 0x3f;
 80097e4:	233f      	movs	r3, #63	; 0x3f
 80097e6:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 80097e8:	2392      	movs	r3, #146	; 0x92
 80097ea:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80097ec:	1dfb      	adds	r3, r7, #7
 80097ee:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80097f0:	2301      	movs	r3, #1
 80097f2:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80097f4:	f107 0308 	add.w	r3, r7, #8
 80097f8:	2100      	movs	r1, #0
 80097fa:	4618      	mov	r0, r3
 80097fc:	f000 ff98 	bl	800a730 <hci_send_req>
 8009800:	4603      	mov	r3, r0
 8009802:	2b00      	cmp	r3, #0
 8009804:	da01      	bge.n	800980a <aci_gap_configure_whitelist+0x3e>
    return BLE_STATUS_TIMEOUT;
 8009806:	23ff      	movs	r3, #255	; 0xff
 8009808:	e000      	b.n	800980c <aci_gap_configure_whitelist+0x40>
  return status;
 800980a:	79fb      	ldrb	r3, [r7, #7]
}
 800980c:	4618      	mov	r0, r3
 800980e:	3720      	adds	r7, #32
 8009810:	46bd      	mov	sp, r7
 8009812:	bd80      	pop	{r7, pc}

08009814 <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 8009814:	b580      	push	{r7, lr}
 8009816:	b0cc      	sub	sp, #304	; 0x130
 8009818:	af00      	add	r7, sp, #0
 800981a:	4602      	mov	r2, r0
 800981c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009820:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8009824:	801a      	strh	r2, [r3, #0]
 8009826:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800982a:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 800982e:	460a      	mov	r2, r1
 8009830:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 8009832:	f107 0310 	add.w	r3, r7, #16
 8009836:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800983a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800983e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009842:	2200      	movs	r2, #0
 8009844:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009846:	2300      	movs	r3, #0
 8009848:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 800984c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009850:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009854:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8009858:	8812      	ldrh	r2, [r2, #0]
 800985a:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800985c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009860:	3302      	adds	r3, #2
 8009862:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 8009866:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800986a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800986e:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8009872:	7812      	ldrb	r2, [r2, #0]
 8009874:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8009876:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800987a:	3301      	adds	r3, #1
 800987c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009880:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009884:	2218      	movs	r2, #24
 8009886:	2100      	movs	r1, #0
 8009888:	4618      	mov	r0, r3
 800988a:	f000 fcc7 	bl	800a21c <Osal_MemSet>
  rq.ogf = 0x3f;
 800988e:	233f      	movs	r3, #63	; 0x3f
 8009890:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x0a5;
 8009894:	23a5      	movs	r3, #165	; 0xa5
 8009896:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800989a:	f107 0310 	add.w	r3, r7, #16
 800989e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80098a2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80098a6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80098aa:	f107 030f 	add.w	r3, r7, #15
 80098ae:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80098b2:	2301      	movs	r3, #1
 80098b4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80098b8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80098bc:	2100      	movs	r1, #0
 80098be:	4618      	mov	r0, r3
 80098c0:	f000 ff36 	bl	800a730 <hci_send_req>
 80098c4:	4603      	mov	r3, r0
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	da01      	bge.n	80098ce <aci_gap_numeric_comparison_value_confirm_yesno+0xba>
    return BLE_STATUS_TIMEOUT;
 80098ca:	23ff      	movs	r3, #255	; 0xff
 80098cc:	e004      	b.n	80098d8 <aci_gap_numeric_comparison_value_confirm_yesno+0xc4>
  return status;
 80098ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80098d2:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80098d6:	781b      	ldrb	r3, [r3, #0]
}
 80098d8:	4618      	mov	r0, r3
 80098da:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80098de:	46bd      	mov	sp, r7
 80098e0:	bd80      	pop	{r7, pc}

080098e2 <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 80098e2:	b580      	push	{r7, lr}
 80098e4:	b088      	sub	sp, #32
 80098e6:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80098e8:	2300      	movs	r3, #0
 80098ea:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80098ec:	f107 0308 	add.w	r3, r7, #8
 80098f0:	2218      	movs	r2, #24
 80098f2:	2100      	movs	r1, #0
 80098f4:	4618      	mov	r0, r3
 80098f6:	f000 fc91 	bl	800a21c <Osal_MemSet>
  rq.ogf = 0x3f;
 80098fa:	233f      	movs	r3, #63	; 0x3f
 80098fc:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 80098fe:	f240 1301 	movw	r3, #257	; 0x101
 8009902:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8009904:	1dfb      	adds	r3, r7, #7
 8009906:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8009908:	2301      	movs	r3, #1
 800990a:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800990c:	f107 0308 	add.w	r3, r7, #8
 8009910:	2100      	movs	r1, #0
 8009912:	4618      	mov	r0, r3
 8009914:	f000 ff0c 	bl	800a730 <hci_send_req>
 8009918:	4603      	mov	r3, r0
 800991a:	2b00      	cmp	r3, #0
 800991c:	da01      	bge.n	8009922 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 800991e:	23ff      	movs	r3, #255	; 0xff
 8009920:	e000      	b.n	8009924 <aci_gatt_init+0x42>
  return status;
 8009922:	79fb      	ldrb	r3, [r7, #7]
}
 8009924:	4618      	mov	r0, r3
 8009926:	3720      	adds	r7, #32
 8009928:	46bd      	mov	sp, r7
 800992a:	bd80      	pop	{r7, pc}

0800992c <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 800992c:	b590      	push	{r4, r7, lr}
 800992e:	b0cf      	sub	sp, #316	; 0x13c
 8009930:	af00      	add	r7, sp, #0
 8009932:	4604      	mov	r4, r0
 8009934:	f507 709c 	add.w	r0, r7, #312	; 0x138
 8009938:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
 800993c:	6001      	str	r1, [r0, #0]
 800993e:	4610      	mov	r0, r2
 8009940:	4619      	mov	r1, r3
 8009942:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009946:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 800994a:	4622      	mov	r2, r4
 800994c:	701a      	strb	r2, [r3, #0]
 800994e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009952:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8009956:	4602      	mov	r2, r0
 8009958:	701a      	strb	r2, [r3, #0]
 800995a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800995e:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8009962:	460a      	mov	r2, r1
 8009964:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 8009966:	f107 0310 	add.w	r3, r7, #16
 800996a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 800996e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009972:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8009976:	781b      	ldrb	r3, [r3, #0]
 8009978:	2b01      	cmp	r3, #1
 800997a:	d00a      	beq.n	8009992 <aci_gatt_add_service+0x66>
 800997c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009980:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8009984:	781b      	ldrb	r3, [r3, #0]
 8009986:	2b02      	cmp	r3, #2
 8009988:	d101      	bne.n	800998e <aci_gatt_add_service+0x62>
 800998a:	2311      	movs	r3, #17
 800998c:	e002      	b.n	8009994 <aci_gatt_add_service+0x68>
 800998e:	2301      	movs	r3, #1
 8009990:	e000      	b.n	8009994 <aci_gatt_add_service+0x68>
 8009992:	2303      	movs	r3, #3
 8009994:	f107 0210 	add.w	r2, r7, #16
 8009998:	4413      	add	r3, r2
 800999a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800999e:	f107 030c 	add.w	r3, r7, #12
 80099a2:	2203      	movs	r2, #3
 80099a4:	2100      	movs	r1, #0
 80099a6:	4618      	mov	r0, r3
 80099a8:	f000 fc38 	bl	800a21c <Osal_MemSet>
  int index_input = 0;
 80099ac:	2300      	movs	r3, #0
 80099ae:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 80099b2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80099b6:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80099ba:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 80099be:	7812      	ldrb	r2, [r2, #0]
 80099c0:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80099c2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80099c6:	3301      	adds	r3, #1
 80099c8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 80099cc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80099d0:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 80099d4:	781b      	ldrb	r3, [r3, #0]
 80099d6:	2b01      	cmp	r3, #1
 80099d8:	d002      	beq.n	80099e0 <aci_gatt_add_service+0xb4>
 80099da:	2b02      	cmp	r3, #2
 80099dc:	d004      	beq.n	80099e8 <aci_gatt_add_service+0xbc>
 80099de:	e007      	b.n	80099f0 <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 80099e0:	2302      	movs	r3, #2
 80099e2:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 80099e6:	e005      	b.n	80099f4 <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 80099e8:	2310      	movs	r3, #16
 80099ea:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 80099ee:	e001      	b.n	80099f4 <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 80099f0:	2397      	movs	r3, #151	; 0x97
 80099f2:	e06c      	b.n	8009ace <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 80099f4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80099f8:	1c58      	adds	r0, r3, #1
 80099fa:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 80099fe:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009a02:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8009a06:	6819      	ldr	r1, [r3, #0]
 8009a08:	f000 fbf8 	bl	800a1fc <Osal_MemCpy>
    index_input += size;
 8009a0c:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8009a10:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8009a14:	4413      	add	r3, r2
 8009a16:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Type = Service_Type;
 8009a1a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009a1e:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8009a22:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8009a26:	7812      	ldrb	r2, [r2, #0]
 8009a28:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8009a2a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009a2e:	3301      	adds	r3, #1
 8009a30:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 8009a34:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009a38:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8009a3c:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 8009a40:	7812      	ldrb	r2, [r2, #0]
 8009a42:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 8009a44:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009a48:	3301      	adds	r3, #1
 8009a4a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009a4e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009a52:	2218      	movs	r2, #24
 8009a54:	2100      	movs	r1, #0
 8009a56:	4618      	mov	r0, r3
 8009a58:	f000 fbe0 	bl	800a21c <Osal_MemSet>
  rq.ogf = 0x3f;
 8009a5c:	233f      	movs	r3, #63	; 0x3f
 8009a5e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 8009a62:	f44f 7381 	mov.w	r3, #258	; 0x102
 8009a66:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8009a6a:	f107 0310 	add.w	r3, r7, #16
 8009a6e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8009a72:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009a76:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8009a7a:	f107 030c 	add.w	r3, r7, #12
 8009a7e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8009a82:	2303      	movs	r3, #3
 8009a84:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009a88:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009a8c:	2100      	movs	r1, #0
 8009a8e:	4618      	mov	r0, r3
 8009a90:	f000 fe4e 	bl	800a730 <hci_send_req>
 8009a94:	4603      	mov	r3, r0
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	da01      	bge.n	8009a9e <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 8009a9a:	23ff      	movs	r3, #255	; 0xff
 8009a9c:	e017      	b.n	8009ace <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 8009a9e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009aa2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009aa6:	781b      	ldrb	r3, [r3, #0]
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d005      	beq.n	8009ab8 <aci_gatt_add_service+0x18c>
    return resp.Status;
 8009aac:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009ab0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009ab4:	781b      	ldrb	r3, [r3, #0]
 8009ab6:	e00a      	b.n	8009ace <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 8009ab8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009abc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009ac0:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8009ac4:	b29a      	uxth	r2, r3
 8009ac6:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8009aca:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8009acc:	2300      	movs	r3, #0
}
 8009ace:	4618      	mov	r0, r3
 8009ad0:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8009ad4:	46bd      	mov	sp, r7
 8009ad6:	bd90      	pop	{r4, r7, pc}

08009ad8 <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 8009ad8:	b590      	push	{r4, r7, lr}
 8009ada:	b0d1      	sub	sp, #324	; 0x144
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	4604      	mov	r4, r0
 8009ae0:	4608      	mov	r0, r1
 8009ae2:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 8009ae6:	f5a1 719c 	sub.w	r1, r1, #312	; 0x138
 8009aea:	600a      	str	r2, [r1, #0]
 8009aec:	4619      	mov	r1, r3
 8009aee:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8009af2:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8009af6:	4622      	mov	r2, r4
 8009af8:	801a      	strh	r2, [r3, #0]
 8009afa:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8009afe:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8009b02:	4602      	mov	r2, r0
 8009b04:	701a      	strb	r2, [r3, #0]
 8009b06:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8009b0a:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 8009b0e:	460a      	mov	r2, r1
 8009b10:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 8009b12:	f107 0318 	add.w	r3, r7, #24
 8009b16:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 8009b1a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8009b1e:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8009b22:	781b      	ldrb	r3, [r3, #0]
 8009b24:	2b01      	cmp	r3, #1
 8009b26:	d00a      	beq.n	8009b3e <aci_gatt_add_char+0x66>
 8009b28:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8009b2c:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8009b30:	781b      	ldrb	r3, [r3, #0]
 8009b32:	2b02      	cmp	r3, #2
 8009b34:	d101      	bne.n	8009b3a <aci_gatt_add_char+0x62>
 8009b36:	2313      	movs	r3, #19
 8009b38:	e002      	b.n	8009b40 <aci_gatt_add_char+0x68>
 8009b3a:	2303      	movs	r3, #3
 8009b3c:	e000      	b.n	8009b40 <aci_gatt_add_char+0x68>
 8009b3e:	2305      	movs	r3, #5
 8009b40:	f107 0218 	add.w	r2, r7, #24
 8009b44:	4413      	add	r3, r2
 8009b46:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8009b4a:	f107 0314 	add.w	r3, r7, #20
 8009b4e:	2203      	movs	r2, #3
 8009b50:	2100      	movs	r1, #0
 8009b52:	4618      	mov	r0, r3
 8009b54:	f000 fb62 	bl	800a21c <Osal_MemSet>
  int index_input = 0;
 8009b58:	2300      	movs	r3, #0
 8009b5a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Service_Handle = Service_Handle;
 8009b5e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8009b62:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8009b66:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8009b6a:	8812      	ldrh	r2, [r2, #0]
 8009b6c:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8009b6e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009b72:	3302      	adds	r3, #2
 8009b74:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 8009b78:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8009b7c:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8009b80:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 8009b84:	7812      	ldrb	r2, [r2, #0]
 8009b86:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8009b88:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009b8c:	3301      	adds	r3, #1
 8009b8e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 8009b92:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8009b96:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8009b9a:	781b      	ldrb	r3, [r3, #0]
 8009b9c:	2b01      	cmp	r3, #1
 8009b9e:	d002      	beq.n	8009ba6 <aci_gatt_add_char+0xce>
 8009ba0:	2b02      	cmp	r3, #2
 8009ba2:	d004      	beq.n	8009bae <aci_gatt_add_char+0xd6>
 8009ba4:	e007      	b.n	8009bb6 <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 8009ba6:	2302      	movs	r3, #2
 8009ba8:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 8009bac:	e005      	b.n	8009bba <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 8009bae:	2310      	movs	r3, #16
 8009bb0:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 8009bb4:	e001      	b.n	8009bba <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 8009bb6:	2397      	movs	r3, #151	; 0x97
 8009bb8:	e091      	b.n	8009cde <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 8009bba:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8009bbe:	1cd8      	adds	r0, r3, #3
 8009bc0:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 8009bc4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8009bc8:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8009bcc:	6819      	ldr	r1, [r3, #0]
 8009bce:	f000 fb15 	bl	800a1fc <Osal_MemCpy>
    index_input += size;
 8009bd2:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8009bd6:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8009bda:	4413      	add	r3, r2
 8009bdc:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 8009be0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009be4:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8009be8:	f5a2 729d 	sub.w	r2, r2, #314	; 0x13a
 8009bec:	8812      	ldrh	r2, [r2, #0]
 8009bee:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8009bf0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009bf4:	3302      	adds	r3, #2
 8009bf6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Properties = Char_Properties;
 8009bfa:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009bfe:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8009c02:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 8009c04:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009c08:	3301      	adds	r3, #1
 8009c0a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 8009c0e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009c12:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8009c16:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 8009c18:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009c1c:	3301      	adds	r3, #1
 8009c1e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 8009c22:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009c26:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 8009c2a:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 8009c2c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009c30:	3301      	adds	r3, #1
 8009c32:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 8009c36:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009c3a:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 8009c3e:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 8009c40:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009c44:	3301      	adds	r3, #1
 8009c46:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Is_Variable = Is_Variable;
 8009c4a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009c4e:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 8009c52:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 8009c54:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009c58:	3301      	adds	r3, #1
 8009c5a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009c5e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8009c62:	2218      	movs	r2, #24
 8009c64:	2100      	movs	r1, #0
 8009c66:	4618      	mov	r0, r3
 8009c68:	f000 fad8 	bl	800a21c <Osal_MemSet>
  rq.ogf = 0x3f;
 8009c6c:	233f      	movs	r3, #63	; 0x3f
 8009c6e:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x104;
 8009c72:	f44f 7382 	mov.w	r3, #260	; 0x104
 8009c76:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 8009c7a:	f107 0318 	add.w	r3, r7, #24
 8009c7e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 8009c82:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009c86:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 8009c8a:	f107 0314 	add.w	r3, r7, #20
 8009c8e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 8009c92:	2303      	movs	r3, #3
 8009c94:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009c98:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8009c9c:	2100      	movs	r1, #0
 8009c9e:	4618      	mov	r0, r3
 8009ca0:	f000 fd46 	bl	800a730 <hci_send_req>
 8009ca4:	4603      	mov	r3, r0
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	da01      	bge.n	8009cae <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 8009caa:	23ff      	movs	r3, #255	; 0xff
 8009cac:	e017      	b.n	8009cde <aci_gatt_add_char+0x206>
  if ( resp.Status )
 8009cae:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8009cb2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009cb6:	781b      	ldrb	r3, [r3, #0]
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d005      	beq.n	8009cc8 <aci_gatt_add_char+0x1f0>
    return resp.Status;
 8009cbc:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8009cc0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009cc4:	781b      	ldrb	r3, [r3, #0]
 8009cc6:	e00a      	b.n	8009cde <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 8009cc8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8009ccc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009cd0:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8009cd4:	b29a      	uxth	r2, r3
 8009cd6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8009cda:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8009cdc:	2300      	movs	r3, #0
}
 8009cde:	4618      	mov	r0, r3
 8009ce0:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 8009ce4:	46bd      	mov	sp, r7
 8009ce6:	bd90      	pop	{r4, r7, pc}

08009ce8 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 8009ce8:	b5b0      	push	{r4, r5, r7, lr}
 8009cea:	b0cc      	sub	sp, #304	; 0x130
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	4605      	mov	r5, r0
 8009cf0:	460c      	mov	r4, r1
 8009cf2:	4610      	mov	r0, r2
 8009cf4:	4619      	mov	r1, r3
 8009cf6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009cfa:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8009cfe:	462a      	mov	r2, r5
 8009d00:	801a      	strh	r2, [r3, #0]
 8009d02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009d06:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009d0a:	4622      	mov	r2, r4
 8009d0c:	801a      	strh	r2, [r3, #0]
 8009d0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009d12:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8009d16:	4602      	mov	r2, r0
 8009d18:	701a      	strb	r2, [r3, #0]
 8009d1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009d1e:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8009d22:	460a      	mov	r2, r1
 8009d24:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 8009d26:	f107 0310 	add.w	r3, r7, #16
 8009d2a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8009d2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009d32:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009d36:	2200      	movs	r2, #0
 8009d38:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009d3a:	2300      	movs	r3, #0
 8009d3c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = Service_Handle;
 8009d40:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009d44:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009d48:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8009d4c:	8812      	ldrh	r2, [r2, #0]
 8009d4e:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8009d50:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009d54:	3302      	adds	r3, #2
 8009d56:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 8009d5a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009d5e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009d62:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8009d66:	8812      	ldrh	r2, [r2, #0]
 8009d68:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8009d6a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009d6e:	3302      	adds	r3, #2
 8009d70:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = Val_Offset;
 8009d74:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009d78:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009d7c:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 8009d80:	7812      	ldrb	r2, [r2, #0]
 8009d82:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8009d84:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009d88:	3301      	adds	r3, #1
 8009d8a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 8009d8e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009d92:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009d96:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 8009d9a:	7812      	ldrb	r2, [r2, #0]
 8009d9c:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8009d9e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009da2:	3301      	adds	r3, #1
 8009da4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 8009da8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009dac:	1d98      	adds	r0, r3, #6
 8009dae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009db2:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8009db6:	781b      	ldrb	r3, [r3, #0]
 8009db8:	461a      	mov	r2, r3
 8009dba:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8009dbe:	f000 fa1d 	bl	800a1fc <Osal_MemCpy>
  index_input += Char_Value_Length;
 8009dc2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009dc6:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8009dca:	781b      	ldrb	r3, [r3, #0]
 8009dcc:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8009dd0:	4413      	add	r3, r2
 8009dd2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009dd6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009dda:	2218      	movs	r2, #24
 8009ddc:	2100      	movs	r1, #0
 8009dde:	4618      	mov	r0, r3
 8009de0:	f000 fa1c 	bl	800a21c <Osal_MemSet>
  rq.ogf = 0x3f;
 8009de4:	233f      	movs	r3, #63	; 0x3f
 8009de6:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 8009dea:	f44f 7383 	mov.w	r3, #262	; 0x106
 8009dee:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8009df2:	f107 0310 	add.w	r3, r7, #16
 8009df6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8009dfa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009dfe:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8009e02:	f107 030f 	add.w	r3, r7, #15
 8009e06:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8009e0a:	2301      	movs	r3, #1
 8009e0c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009e10:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009e14:	2100      	movs	r1, #0
 8009e16:	4618      	mov	r0, r3
 8009e18:	f000 fc8a 	bl	800a730 <hci_send_req>
 8009e1c:	4603      	mov	r3, r0
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	da01      	bge.n	8009e26 <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 8009e22:	23ff      	movs	r3, #255	; 0xff
 8009e24:	e004      	b.n	8009e30 <aci_gatt_update_char_value+0x148>
  return status;
 8009e26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009e2a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009e2e:	781b      	ldrb	r3, [r3, #0]
}
 8009e30:	4618      	mov	r0, r3
 8009e32:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8009e36:	46bd      	mov	sp, r7
 8009e38:	bdb0      	pop	{r4, r5, r7, pc}

08009e3a <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 8009e3a:	b580      	push	{r7, lr}
 8009e3c:	b0cc      	sub	sp, #304	; 0x130
 8009e3e:	af00      	add	r7, sp, #0
 8009e40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009e44:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009e48:	601a      	str	r2, [r3, #0]
 8009e4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009e4e:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8009e52:	4602      	mov	r2, r0
 8009e54:	701a      	strb	r2, [r3, #0]
 8009e56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009e5a:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8009e5e:	460a      	mov	r2, r1
 8009e60:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 8009e62:	f107 0310 	add.w	r3, r7, #16
 8009e66:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8009e6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009e6e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009e72:	2200      	movs	r2, #0
 8009e74:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009e76:	2300      	movs	r3, #0
 8009e78:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = Offset;
 8009e7c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009e80:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009e84:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8009e88:	7812      	ldrb	r2, [r2, #0]
 8009e8a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8009e8c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009e90:	3301      	adds	r3, #1
 8009e92:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = Length;
 8009e96:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009e9a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009e9e:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8009ea2:	7812      	ldrb	r2, [r2, #0]
 8009ea4:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8009ea6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009eaa:	3301      	adds	r3, #1
 8009eac:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 8009eb0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009eb4:	1c98      	adds	r0, r3, #2
 8009eb6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009eba:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8009ebe:	781a      	ldrb	r2, [r3, #0]
 8009ec0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009ec4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009ec8:	6819      	ldr	r1, [r3, #0]
 8009eca:	f000 f997 	bl	800a1fc <Osal_MemCpy>
  index_input += Length;
 8009ece:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009ed2:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8009ed6:	781b      	ldrb	r3, [r3, #0]
 8009ed8:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8009edc:	4413      	add	r3, r2
 8009ede:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009ee2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009ee6:	2218      	movs	r2, #24
 8009ee8:	2100      	movs	r1, #0
 8009eea:	4618      	mov	r0, r3
 8009eec:	f000 f996 	bl	800a21c <Osal_MemSet>
  rq.ogf = 0x3f;
 8009ef0:	233f      	movs	r3, #63	; 0x3f
 8009ef2:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 8009ef6:	230c      	movs	r3, #12
 8009ef8:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8009efc:	f107 0310 	add.w	r3, r7, #16
 8009f00:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8009f04:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009f08:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8009f0c:	f107 030f 	add.w	r3, r7, #15
 8009f10:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8009f14:	2301      	movs	r3, #1
 8009f16:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009f1a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009f1e:	2100      	movs	r1, #0
 8009f20:	4618      	mov	r0, r3
 8009f22:	f000 fc05 	bl	800a730 <hci_send_req>
 8009f26:	4603      	mov	r3, r0
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	da01      	bge.n	8009f30 <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 8009f2c:	23ff      	movs	r3, #255	; 0xff
 8009f2e:	e004      	b.n	8009f3a <aci_hal_write_config_data+0x100>
  return status;
 8009f30:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009f34:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009f38:	781b      	ldrb	r3, [r3, #0]
}
 8009f3a:	4618      	mov	r0, r3
 8009f3c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8009f40:	46bd      	mov	sp, r7
 8009f42:	bd80      	pop	{r7, pc}

08009f44 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 8009f44:	b580      	push	{r7, lr}
 8009f46:	b0cc      	sub	sp, #304	; 0x130
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	4602      	mov	r2, r0
 8009f4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009f50:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8009f54:	701a      	strb	r2, [r3, #0]
 8009f56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009f5a:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8009f5e:	460a      	mov	r2, r1
 8009f60:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 8009f62:	f107 0310 	add.w	r3, r7, #16
 8009f66:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8009f6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009f6e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009f72:	2200      	movs	r2, #0
 8009f74:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009f76:	2300      	movs	r3, #0
 8009f78:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = En_High_Power;
 8009f7c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009f80:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009f84:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8009f88:	7812      	ldrb	r2, [r2, #0]
 8009f8a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8009f8c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009f90:	3301      	adds	r3, #1
 8009f92:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = PA_Level;
 8009f96:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009f9a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009f9e:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8009fa2:	7812      	ldrb	r2, [r2, #0]
 8009fa4:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8009fa6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009faa:	3301      	adds	r3, #1
 8009fac:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009fb0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009fb4:	2218      	movs	r2, #24
 8009fb6:	2100      	movs	r1, #0
 8009fb8:	4618      	mov	r0, r3
 8009fba:	f000 f92f 	bl	800a21c <Osal_MemSet>
  rq.ogf = 0x3f;
 8009fbe:	233f      	movs	r3, #63	; 0x3f
 8009fc0:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 8009fc4:	230f      	movs	r3, #15
 8009fc6:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8009fca:	f107 0310 	add.w	r3, r7, #16
 8009fce:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8009fd2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009fd6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8009fda:	f107 030f 	add.w	r3, r7, #15
 8009fde:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8009fe2:	2301      	movs	r3, #1
 8009fe4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009fe8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009fec:	2100      	movs	r1, #0
 8009fee:	4618      	mov	r0, r3
 8009ff0:	f000 fb9e 	bl	800a730 <hci_send_req>
 8009ff4:	4603      	mov	r3, r0
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	da01      	bge.n	8009ffe <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 8009ffa:	23ff      	movs	r3, #255	; 0xff
 8009ffc:	e004      	b.n	800a008 <aci_hal_set_tx_power_level+0xc4>
  return status;
 8009ffe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a002:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800a006:	781b      	ldrb	r3, [r3, #0]
}
 800a008:	4618      	mov	r0, r3
 800a00a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800a00e:	46bd      	mov	sp, r7
 800a010:	bd80      	pop	{r7, pc}

0800a012 <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 800a012:	b580      	push	{r7, lr}
 800a014:	b0cc      	sub	sp, #304	; 0x130
 800a016:	af00      	add	r7, sp, #0
 800a018:	4602      	mov	r2, r0
 800a01a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a01e:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800a022:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 800a024:	f107 0310 	add.w	r3, r7, #16
 800a028:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800a02c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a030:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800a034:	2200      	movs	r2, #0
 800a036:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800a038:	2300      	movs	r3, #0
 800a03a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 800a03e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a042:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a046:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800a04a:	8812      	ldrh	r2, [r2, #0]
 800a04c:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800a04e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a052:	3302      	adds	r3, #2
 800a054:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a058:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a05c:	2218      	movs	r2, #24
 800a05e:	2100      	movs	r1, #0
 800a060:	4618      	mov	r0, r3
 800a062:	f000 f8db 	bl	800a21c <Osal_MemSet>
  rq.ogf = 0x3f;
 800a066:	233f      	movs	r3, #63	; 0x3f
 800a068:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x018;
 800a06c:	2318      	movs	r3, #24
 800a06e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800a072:	f107 0310 	add.w	r3, r7, #16
 800a076:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800a07a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a07e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800a082:	f107 030f 	add.w	r3, r7, #15
 800a086:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800a08a:	2301      	movs	r3, #1
 800a08c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a090:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a094:	2100      	movs	r1, #0
 800a096:	4618      	mov	r0, r3
 800a098:	f000 fb4a 	bl	800a730 <hci_send_req>
 800a09c:	4603      	mov	r3, r0
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	da01      	bge.n	800a0a6 <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 800a0a2:	23ff      	movs	r3, #255	; 0xff
 800a0a4:	e004      	b.n	800a0b0 <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 800a0a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a0aa:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800a0ae:	781b      	ldrb	r3, [r3, #0]
}
 800a0b0:	4618      	mov	r0, r3
 800a0b2:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800a0b6:	46bd      	mov	sp, r7
 800a0b8:	bd80      	pop	{r7, pc}

0800a0ba <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 800a0ba:	b580      	push	{r7, lr}
 800a0bc:	b088      	sub	sp, #32
 800a0be:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800a0c0:	2300      	movs	r3, #0
 800a0c2:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a0c4:	f107 0308 	add.w	r3, r7, #8
 800a0c8:	2218      	movs	r2, #24
 800a0ca:	2100      	movs	r1, #0
 800a0cc:	4618      	mov	r0, r3
 800a0ce:	f000 f8a5 	bl	800a21c <Osal_MemSet>
  rq.ogf = 0x03;
 800a0d2:	2303      	movs	r3, #3
 800a0d4:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 800a0d6:	2303      	movs	r3, #3
 800a0d8:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800a0da:	1dfb      	adds	r3, r7, #7
 800a0dc:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800a0de:	2301      	movs	r3, #1
 800a0e0:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a0e2:	f107 0308 	add.w	r3, r7, #8
 800a0e6:	2100      	movs	r1, #0
 800a0e8:	4618      	mov	r0, r3
 800a0ea:	f000 fb21 	bl	800a730 <hci_send_req>
 800a0ee:	4603      	mov	r3, r0
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	da01      	bge.n	800a0f8 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 800a0f4:	23ff      	movs	r3, #255	; 0xff
 800a0f6:	e000      	b.n	800a0fa <hci_reset+0x40>
  return status;
 800a0f8:	79fb      	ldrb	r3, [r7, #7]
}
 800a0fa:	4618      	mov	r0, r3
 800a0fc:	3720      	adds	r7, #32
 800a0fe:	46bd      	mov	sp, r7
 800a100:	bd80      	pop	{r7, pc}

0800a102 <hci_le_set_default_phy>:
}

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 800a102:	b590      	push	{r4, r7, lr}
 800a104:	b0cd      	sub	sp, #308	; 0x134
 800a106:	af00      	add	r7, sp, #0
 800a108:	4604      	mov	r4, r0
 800a10a:	4608      	mov	r0, r1
 800a10c:	4611      	mov	r1, r2
 800a10e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a112:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800a116:	4622      	mov	r2, r4
 800a118:	701a      	strb	r2, [r3, #0]
 800a11a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a11e:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800a122:	4602      	mov	r2, r0
 800a124:	701a      	strb	r2, [r3, #0]
 800a126:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a12a:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 800a12e:	460a      	mov	r2, r1
 800a130:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 800a132:	f107 0310 	add.w	r3, r7, #16
 800a136:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800a13a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a13e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800a142:	2200      	movs	r2, #0
 800a144:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800a146:	2300      	movs	r3, #0
 800a148:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 800a14c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a150:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a154:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800a158:	7812      	ldrb	r2, [r2, #0]
 800a15a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800a15c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a160:	3301      	adds	r3, #1
 800a162:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->TX_PHYS = TX_PHYS;
 800a166:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a16a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a16e:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800a172:	7812      	ldrb	r2, [r2, #0]
 800a174:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800a176:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a17a:	3301      	adds	r3, #1
 800a17c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->RX_PHYS = RX_PHYS;
 800a180:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a184:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a188:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 800a18c:	7812      	ldrb	r2, [r2, #0]
 800a18e:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800a190:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a194:	3301      	adds	r3, #1
 800a196:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a19a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a19e:	2218      	movs	r2, #24
 800a1a0:	2100      	movs	r1, #0
 800a1a2:	4618      	mov	r0, r3
 800a1a4:	f000 f83a 	bl	800a21c <Osal_MemSet>
  rq.ogf = 0x08;
 800a1a8:	2308      	movs	r3, #8
 800a1aa:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x031;
 800a1ae:	2331      	movs	r3, #49	; 0x31
 800a1b0:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800a1b4:	f107 0310 	add.w	r3, r7, #16
 800a1b8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800a1bc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a1c0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800a1c4:	f107 030f 	add.w	r3, r7, #15
 800a1c8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800a1cc:	2301      	movs	r3, #1
 800a1ce:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a1d2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a1d6:	2100      	movs	r1, #0
 800a1d8:	4618      	mov	r0, r3
 800a1da:	f000 faa9 	bl	800a730 <hci_send_req>
 800a1de:	4603      	mov	r3, r0
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	da01      	bge.n	800a1e8 <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 800a1e4:	23ff      	movs	r3, #255	; 0xff
 800a1e6:	e004      	b.n	800a1f2 <hci_le_set_default_phy+0xf0>
  return status;
 800a1e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a1ec:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800a1f0:	781b      	ldrb	r3, [r3, #0]
}
 800a1f2:	4618      	mov	r0, r3
 800a1f4:	f507 779a 	add.w	r7, r7, #308	; 0x134
 800a1f8:	46bd      	mov	sp, r7
 800a1fa:	bd90      	pop	{r4, r7, pc}

0800a1fc <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 800a1fc:	b580      	push	{r7, lr}
 800a1fe:	b084      	sub	sp, #16
 800a200:	af00      	add	r7, sp, #0
 800a202:	60f8      	str	r0, [r7, #12]
 800a204:	60b9      	str	r1, [r7, #8]
 800a206:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 800a208:	687a      	ldr	r2, [r7, #4]
 800a20a:	68b9      	ldr	r1, [r7, #8]
 800a20c:	68f8      	ldr	r0, [r7, #12]
 800a20e:	f002 f8db 	bl	800c3c8 <memcpy>
 800a212:	4603      	mov	r3, r0
}
 800a214:	4618      	mov	r0, r3
 800a216:	3710      	adds	r7, #16
 800a218:	46bd      	mov	sp, r7
 800a21a:	bd80      	pop	{r7, pc}

0800a21c <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 800a21c:	b580      	push	{r7, lr}
 800a21e:	b084      	sub	sp, #16
 800a220:	af00      	add	r7, sp, #0
 800a222:	60f8      	str	r0, [r7, #12]
 800a224:	60b9      	str	r1, [r7, #8]
 800a226:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 800a228:	687a      	ldr	r2, [r7, #4]
 800a22a:	68b9      	ldr	r1, [r7, #8]
 800a22c:	68f8      	ldr	r0, [r7, #12]
 800a22e:	f002 f8d9 	bl	800c3e4 <memset>
 800a232:	4603      	mov	r3, r0
}
 800a234:	4618      	mov	r0, r3
 800a236:	3710      	adds	r7, #16
 800a238:	46bd      	mov	sp, r7
 800a23a:	bd80      	pop	{r7, pc}

0800a23c <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 800a23c:	b480      	push	{r7}
 800a23e:	af00      	add	r7, sp, #0
  return;
 800a240:	bf00      	nop
}
 800a242:	46bd      	mov	sp, r7
 800a244:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a248:	4770      	bx	lr

0800a24a <BLS_Init>:

__WEAK void BLS_Init( void )
{
 800a24a:	b480      	push	{r7}
 800a24c:	af00      	add	r7, sp, #0
  return;
 800a24e:	bf00      	nop
}
 800a250:	46bd      	mov	sp, r7
 800a252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a256:	4770      	bx	lr

0800a258 <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 800a258:	b480      	push	{r7}
 800a25a:	af00      	add	r7, sp, #0
  return;
 800a25c:	bf00      	nop
}
 800a25e:	46bd      	mov	sp, r7
 800a260:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a264:	4770      	bx	lr

0800a266 <DIS_Init>:
__WEAK void DIS_Init( void )
{
 800a266:	b480      	push	{r7}
 800a268:	af00      	add	r7, sp, #0
  return;
 800a26a:	bf00      	nop
}
 800a26c:	46bd      	mov	sp, r7
 800a26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a272:	4770      	bx	lr

0800a274 <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 800a274:	b480      	push	{r7}
 800a276:	af00      	add	r7, sp, #0
  return;
 800a278:	bf00      	nop
}
 800a27a:	46bd      	mov	sp, r7
 800a27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a280:	4770      	bx	lr

0800a282 <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 800a282:	b480      	push	{r7}
 800a284:	af00      	add	r7, sp, #0
  return;
 800a286:	bf00      	nop
}
 800a288:	46bd      	mov	sp, r7
 800a28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a28e:	4770      	bx	lr

0800a290 <HRS_Init>:
__WEAK void HRS_Init( void )
{
 800a290:	b480      	push	{r7}
 800a292:	af00      	add	r7, sp, #0
  return;
 800a294:	bf00      	nop
}
 800a296:	46bd      	mov	sp, r7
 800a298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a29c:	4770      	bx	lr

0800a29e <HTS_Init>:
__WEAK void HTS_Init( void )
{
 800a29e:	b480      	push	{r7}
 800a2a0:	af00      	add	r7, sp, #0
  return;
 800a2a2:	bf00      	nop
}
 800a2a4:	46bd      	mov	sp, r7
 800a2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2aa:	4770      	bx	lr

0800a2ac <IAS_Init>:
__WEAK void IAS_Init( void )
{
 800a2ac:	b480      	push	{r7}
 800a2ae:	af00      	add	r7, sp, #0
  return;
 800a2b0:	bf00      	nop
}
 800a2b2:	46bd      	mov	sp, r7
 800a2b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b8:	4770      	bx	lr

0800a2ba <LLS_Init>:
__WEAK void LLS_Init( void )
{
 800a2ba:	b480      	push	{r7}
 800a2bc:	af00      	add	r7, sp, #0
  return;
 800a2be:	bf00      	nop
}
 800a2c0:	46bd      	mov	sp, r7
 800a2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c6:	4770      	bx	lr

0800a2c8 <TPS_Init>:
__WEAK void TPS_Init( void )
{
 800a2c8:	b480      	push	{r7}
 800a2ca:	af00      	add	r7, sp, #0
  return;
 800a2cc:	bf00      	nop
}
 800a2ce:	46bd      	mov	sp, r7
 800a2d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d4:	4770      	bx	lr

0800a2d6 <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 800a2d6:	b480      	push	{r7}
 800a2d8:	af00      	add	r7, sp, #0
  return;
 800a2da:	bf00      	nop
}
 800a2dc:	46bd      	mov	sp, r7
 800a2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e2:	4770      	bx	lr

0800a2e4 <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 800a2e4:	b480      	push	{r7}
 800a2e6:	af00      	add	r7, sp, #0
  return;
 800a2e8:	bf00      	nop
}
 800a2ea:	46bd      	mov	sp, r7
 800a2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f0:	4770      	bx	lr

0800a2f2 <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 800a2f2:	b480      	push	{r7}
 800a2f4:	af00      	add	r7, sp, #0
  return;
 800a2f6:	bf00      	nop
}
 800a2f8:	46bd      	mov	sp, r7
 800a2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2fe:	4770      	bx	lr

0800a300 <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 800a300:	b480      	push	{r7}
 800a302:	af00      	add	r7, sp, #0
  return;
 800a304:	bf00      	nop
}
 800a306:	46bd      	mov	sp, r7
 800a308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a30c:	4770      	bx	lr

0800a30e <MESH_Init>:
__WEAK void MESH_Init( void )
{
 800a30e:	b480      	push	{r7}
 800a310:	af00      	add	r7, sp, #0
  return;
 800a312:	bf00      	nop
}
 800a314:	46bd      	mov	sp, r7
 800a316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a31a:	4770      	bx	lr

0800a31c <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 800a31c:	b480      	push	{r7}
 800a31e:	af00      	add	r7, sp, #0
  return;
 800a320:	bf00      	nop
}
 800a322:	46bd      	mov	sp, r7
 800a324:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a328:	4770      	bx	lr
	...

0800a32c <SVCCTL_Init>:
}

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 800a32c:	b580      	push	{r7, lr}
 800a32e:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 800a330:	4b04      	ldr	r3, [pc, #16]	; (800a344 <SVCCTL_Init+0x18>)
 800a332:	2200      	movs	r2, #0
 800a334:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 800a336:	4b04      	ldr	r3, [pc, #16]	; (800a348 <SVCCTL_Init+0x1c>)
 800a338:	2200      	movs	r2, #0
 800a33a:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 800a33c:	f000 f806 	bl	800a34c <SVCCTL_SvcInit>

  return;
 800a340:	bf00      	nop
}
 800a342:	bd80      	pop	{r7, pc}
 800a344:	20000910 	.word	0x20000910
 800a348:	20000930 	.word	0x20000930

0800a34c <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 800a34c:	b580      	push	{r7, lr}
 800a34e:	af00      	add	r7, sp, #0
  BAS_Init();
 800a350:	f7ff ff74 	bl	800a23c <BAS_Init>

  BLS_Init();
 800a354:	f7ff ff79 	bl	800a24a <BLS_Init>

  CRS_STM_Init();
 800a358:	f7ff ff7e 	bl	800a258 <CRS_STM_Init>

  DIS_Init();
 800a35c:	f7ff ff83 	bl	800a266 <DIS_Init>

  EDS_STM_Init();
 800a360:	f7ff ff88 	bl	800a274 <EDS_STM_Init>

  HIDS_Init();
 800a364:	f7ff ff8d 	bl	800a282 <HIDS_Init>

  HRS_Init();
 800a368:	f7ff ff92 	bl	800a290 <HRS_Init>

  HTS_Init();
 800a36c:	f7ff ff97 	bl	800a29e <HTS_Init>

  IAS_Init();
 800a370:	f7ff ff9c 	bl	800a2ac <IAS_Init>

  LLS_Init();
 800a374:	f7ff ffa1 	bl	800a2ba <LLS_Init>

  TPS_Init();
 800a378:	f7ff ffa6 	bl	800a2c8 <TPS_Init>

  MOTENV_STM_Init();
 800a37c:	f7ff ffab 	bl	800a2d6 <MOTENV_STM_Init>

  P2PS_STM_Init();
 800a380:	f7ff ffb0 	bl	800a2e4 <P2PS_STM_Init>

  ZDD_STM_Init();
 800a384:	f7ff ffb5 	bl	800a2f2 <ZDD_STM_Init>

  OTAS_STM_Init();
 800a388:	f7ff ffba 	bl	800a300 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 800a38c:	f7ff ffc6 	bl	800a31c <BVOPUS_STM_Init>

  MESH_Init();
 800a390:	f7ff ffbd 	bl	800a30e <MESH_Init>

  SVCCTL_InitCustomSvc();
 800a394:	f001 faaa 	bl	800b8ec <SVCCTL_InitCustomSvc>
  
  return;
 800a398:	bf00      	nop
}
 800a39a:	bd80      	pop	{r7, pc}

0800a39c <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 800a39c:	b480      	push	{r7}
 800a39e:	b083      	sub	sp, #12
 800a3a0:	af00      	add	r7, sp, #0
 800a3a2:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 800a3a4:	4b09      	ldr	r3, [pc, #36]	; (800a3cc <SVCCTL_RegisterSvcHandler+0x30>)
 800a3a6:	7f1b      	ldrb	r3, [r3, #28]
 800a3a8:	4619      	mov	r1, r3
 800a3aa:	4a08      	ldr	r2, [pc, #32]	; (800a3cc <SVCCTL_RegisterSvcHandler+0x30>)
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 800a3b2:	4b06      	ldr	r3, [pc, #24]	; (800a3cc <SVCCTL_RegisterSvcHandler+0x30>)
 800a3b4:	7f1b      	ldrb	r3, [r3, #28]
 800a3b6:	3301      	adds	r3, #1
 800a3b8:	b2da      	uxtb	r2, r3
 800a3ba:	4b04      	ldr	r3, [pc, #16]	; (800a3cc <SVCCTL_RegisterSvcHandler+0x30>)
 800a3bc:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 800a3be:	bf00      	nop
}
 800a3c0:	370c      	adds	r7, #12
 800a3c2:	46bd      	mov	sp, r7
 800a3c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c8:	4770      	bx	lr
 800a3ca:	bf00      	nop
 800a3cc:	20000910 	.word	0x20000910

0800a3d0 <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 800a3d0:	b580      	push	{r7, lr}
 800a3d2:	b086      	sub	sp, #24
 800a3d4:	af00      	add	r7, sp, #0
 800a3d6:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	3301      	adds	r3, #1
 800a3dc:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 800a3de:	2300      	movs	r3, #0
 800a3e0:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 800a3e2:	693b      	ldr	r3, [r7, #16]
 800a3e4:	781b      	ldrb	r3, [r3, #0]
 800a3e6:	2bff      	cmp	r3, #255	; 0xff
 800a3e8:	d125      	bne.n	800a436 <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 800a3ea:	693b      	ldr	r3, [r7, #16]
 800a3ec:	3302      	adds	r3, #2
 800a3ee:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	881b      	ldrh	r3, [r3, #0]
 800a3f4:	b29b      	uxth	r3, r3
 800a3f6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800a3fa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a3fe:	d118      	bne.n	800a432 <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800a400:	2300      	movs	r3, #0
 800a402:	757b      	strb	r3, [r7, #21]
 800a404:	e00d      	b.n	800a422 <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 800a406:	7d7b      	ldrb	r3, [r7, #21]
 800a408:	4a1a      	ldr	r2, [pc, #104]	; (800a474 <SVCCTL_UserEvtRx+0xa4>)
 800a40a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a40e:	6878      	ldr	r0, [r7, #4]
 800a410:	4798      	blx	r3
 800a412:	4603      	mov	r3, r0
 800a414:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 800a416:	7dfb      	ldrb	r3, [r7, #23]
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d108      	bne.n	800a42e <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800a41c:	7d7b      	ldrb	r3, [r7, #21]
 800a41e:	3301      	adds	r3, #1
 800a420:	757b      	strb	r3, [r7, #21]
 800a422:	4b14      	ldr	r3, [pc, #80]	; (800a474 <SVCCTL_UserEvtRx+0xa4>)
 800a424:	7f1b      	ldrb	r3, [r3, #28]
 800a426:	7d7a      	ldrb	r2, [r7, #21]
 800a428:	429a      	cmp	r2, r3
 800a42a:	d3ec      	bcc.n	800a406 <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 800a42c:	e002      	b.n	800a434 <SVCCTL_UserEvtRx+0x64>
              break;
 800a42e:	bf00      	nop
          break;
 800a430:	e000      	b.n	800a434 <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 800a432:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 800a434:	e000      	b.n	800a438 <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 800a436:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the applicaiton.
   */
  switch (event_notification_status)
 800a438:	7dfb      	ldrb	r3, [r7, #23]
 800a43a:	2b02      	cmp	r3, #2
 800a43c:	d00f      	beq.n	800a45e <SVCCTL_UserEvtRx+0x8e>
 800a43e:	2b02      	cmp	r3, #2
 800a440:	dc10      	bgt.n	800a464 <SVCCTL_UserEvtRx+0x94>
 800a442:	2b00      	cmp	r3, #0
 800a444:	d002      	beq.n	800a44c <SVCCTL_UserEvtRx+0x7c>
 800a446:	2b01      	cmp	r3, #1
 800a448:	d006      	beq.n	800a458 <SVCCTL_UserEvtRx+0x88>
 800a44a:	e00b      	b.n	800a464 <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 800a44c:	6878      	ldr	r0, [r7, #4]
 800a44e:	f000 ff7b 	bl	800b348 <SVCCTL_App_Notification>
 800a452:	4603      	mov	r3, r0
 800a454:	75bb      	strb	r3, [r7, #22]
      break;
 800a456:	e008      	b.n	800a46a <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 800a458:	2301      	movs	r3, #1
 800a45a:	75bb      	strb	r3, [r7, #22]
      break;
 800a45c:	e005      	b.n	800a46a <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 800a45e:	2300      	movs	r3, #0
 800a460:	75bb      	strb	r3, [r7, #22]
      break;
 800a462:	e002      	b.n	800a46a <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 800a464:	2301      	movs	r3, #1
 800a466:	75bb      	strb	r3, [r7, #22]
      break;
 800a468:	bf00      	nop
  }

  return (return_status);
 800a46a:	7dbb      	ldrb	r3, [r7, #22]
}
 800a46c:	4618      	mov	r0, r3
 800a46e:	3718      	adds	r7, #24
 800a470:	46bd      	mov	sp, r7
 800a472:	bd80      	pop	{r7, pc}
 800a474:	20000910 	.word	0x20000910

0800a478 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 800a478:	b580      	push	{r7, lr}
 800a47a:	b088      	sub	sp, #32
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800a480:	f107 030c 	add.w	r3, r7, #12
 800a484:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 800a48c:	69fb      	ldr	r3, [r7, #28]
 800a48e:	212e      	movs	r1, #46	; 0x2e
 800a490:	f64f 4066 	movw	r0, #64614	; 0xfc66
 800a494:	f000 fae2 	bl	800aa5c <shci_send>
            p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800a498:	69fb      	ldr	r3, [r7, #28]
 800a49a:	330b      	adds	r3, #11
 800a49c:	78db      	ldrb	r3, [r3, #3]
}
 800a49e:	4618      	mov	r0, r3
 800a4a0:	3720      	adds	r7, #32
 800a4a2:	46bd      	mov	sp, r7
 800a4a4:	bd80      	pop	{r7, pc}

0800a4a6 <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 800a4a6:	b580      	push	{r7, lr}
 800a4a8:	b088      	sub	sp, #32
 800a4aa:	af00      	add	r7, sp, #0
 800a4ac:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800a4ae:	f107 030c 	add.w	r3, r7, #12
 800a4b2:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 800a4ba:	69fb      	ldr	r3, [r7, #28]
 800a4bc:	210f      	movs	r1, #15
 800a4be:	f64f 4068 	movw	r0, #64616	; 0xfc68
 800a4c2:	f000 facb 	bl	800aa5c <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800a4c6:	69fb      	ldr	r3, [r7, #28]
 800a4c8:	330b      	adds	r3, #11
 800a4ca:	78db      	ldrb	r3, [r3, #3]
}
 800a4cc:	4618      	mov	r0, r3
 800a4ce:	3720      	adds	r7, #32
 800a4d0:	46bd      	mov	sp, r7
 800a4d2:	bd80      	pop	{r7, pc}

0800a4d4 <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 800a4d4:	b580      	push	{r7, lr}
 800a4d6:	b088      	sub	sp, #32
 800a4d8:	af00      	add	r7, sp, #0
 800a4da:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800a4dc:	f107 030c 	add.w	r3, r7, #12
 800a4e0:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 800a4e2:	69fb      	ldr	r3, [r7, #28]
 800a4e4:	687a      	ldr	r2, [r7, #4]
 800a4e6:	2110      	movs	r1, #16
 800a4e8:	f64f 4075 	movw	r0, #64629	; 0xfc75
 800a4ec:	f000 fab6 	bl	800aa5c <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800a4f0:	69fb      	ldr	r3, [r7, #28]
 800a4f2:	330b      	adds	r3, #11
 800a4f4:	78db      	ldrb	r3, [r3, #3]
}
 800a4f6:	4618      	mov	r0, r3
 800a4f8:	3720      	adds	r7, #32
 800a4fa:	46bd      	mov	sp, r7
 800a4fc:	bd80      	pop	{r7, pc}
	...

0800a500 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 800a500:	b480      	push	{r7}
 800a502:	b08b      	sub	sp, #44	; 0x2c
 800a504:	af00      	add	r7, sp, #0
 800a506:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 800a508:	2300      	movs	r3, #0
 800a50a:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 800a50c:	2300      	movs	r3, #0
 800a50e:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 800a510:	2300      	movs	r3, #0
 800a512:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t wireless_firmware_memorySize = 0;
 800a514:	2300      	movs	r3, #0
 800a516:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 800a518:	2300      	movs	r3, #0
 800a51a:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 800a51c:	2300      	movs	r3, #0
 800a51e:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 800a520:	2300      	movs	r3, #0
 800a522:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 800a524:	2300      	movs	r3, #0
 800a526:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 800a528:	4b4a      	ldr	r3, [pc, #296]	; (800a654 <SHCI_GetWirelessFwInfo+0x154>)
 800a52a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a52c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800a530:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 800a532:	693b      	ldr	r3, [r7, #16]
 800a534:	009b      	lsls	r3, r3, #2
 800a536:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800a53a:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 800a542:	68bb      	ldr	r3, [r7, #8]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	4a44      	ldr	r2, [pc, #272]	; (800a658 <SHCI_GetWirelessFwInfo+0x158>)
 800a548:	4293      	cmp	r3, r2
 800a54a:	d10f      	bne.n	800a56c <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 800a54c:	68bb      	ldr	r3, [r7, #8]
 800a54e:	695b      	ldr	r3, [r3, #20]
 800a550:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 800a552:	68bb      	ldr	r3, [r7, #8]
 800a554:	699b      	ldr	r3, [r3, #24]
 800a556:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 800a558:	68bb      	ldr	r3, [r7, #8]
 800a55a:	69db      	ldr	r3, [r3, #28]
 800a55c:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 800a55e:	68bb      	ldr	r3, [r7, #8]
 800a560:	68db      	ldr	r3, [r3, #12]
 800a562:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 800a564:	68bb      	ldr	r3, [r7, #8]
 800a566:	691b      	ldr	r3, [r3, #16]
 800a568:	617b      	str	r3, [r7, #20]
 800a56a:	e01a      	b.n	800a5a2 <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 800a56c:	693b      	ldr	r3, [r7, #16]
 800a56e:	009b      	lsls	r3, r3, #2
 800a570:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800a574:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 800a578:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	691b      	ldr	r3, [r3, #16]
 800a580:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	695b      	ldr	r3, [r3, #20]
 800a588:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	699b      	ldr	r3, [r3, #24]
 800a590:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	685b      	ldr	r3, [r3, #4]
 800a598:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	689b      	ldr	r3, [r3, #8]
 800a5a0:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800a5a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5a4:	0e1b      	lsrs	r3, r3, #24
 800a5a6:	b2da      	uxtb	r2, r3
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800a5ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5ae:	0c1b      	lsrs	r3, r3, #16
 800a5b0:	b2da      	uxtb	r2, r3
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800a5b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5b8:	0a1b      	lsrs	r3, r3, #8
 800a5ba:	b2da      	uxtb	r2, r3
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 800a5c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5c2:	091b      	lsrs	r3, r3, #4
 800a5c4:	b2db      	uxtb	r3, r3
 800a5c6:	f003 030f 	and.w	r3, r3, #15
 800a5ca:	b2da      	uxtb	r2, r3
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 800a5d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5d2:	b2db      	uxtb	r3, r3
 800a5d4:	f003 030f 	and.w	r3, r3, #15
 800a5d8:	b2da      	uxtb	r2, r3
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800a5de:	6a3b      	ldr	r3, [r7, #32]
 800a5e0:	0e1b      	lsrs	r3, r3, #24
 800a5e2:	b2da      	uxtb	r2, r3
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800a5e8:	6a3b      	ldr	r3, [r7, #32]
 800a5ea:	0c1b      	lsrs	r3, r3, #16
 800a5ec:	b2da      	uxtb	r2, r3
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 800a5f2:	6a3b      	ldr	r3, [r7, #32]
 800a5f4:	0a1b      	lsrs	r3, r3, #8
 800a5f6:	b2da      	uxtb	r2, r3
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800a5fc:	6a3b      	ldr	r3, [r7, #32]
 800a5fe:	b2da      	uxtb	r2, r3
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 800a604:	69fb      	ldr	r3, [r7, #28]
 800a606:	b2da      	uxtb	r2, r3
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800a60c:	69bb      	ldr	r3, [r7, #24]
 800a60e:	0e1b      	lsrs	r3, r3, #24
 800a610:	b2da      	uxtb	r2, r3
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800a616:	69bb      	ldr	r3, [r7, #24]
 800a618:	0c1b      	lsrs	r3, r3, #16
 800a61a:	b2da      	uxtb	r2, r3
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800a620:	69bb      	ldr	r3, [r7, #24]
 800a622:	0a1b      	lsrs	r3, r3, #8
 800a624:	b2da      	uxtb	r2, r3
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800a62a:	697b      	ldr	r3, [r7, #20]
 800a62c:	0e1b      	lsrs	r3, r3, #24
 800a62e:	b2da      	uxtb	r2, r3
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800a634:	697b      	ldr	r3, [r7, #20]
 800a636:	0c1b      	lsrs	r3, r3, #16
 800a638:	b2da      	uxtb	r2, r3
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800a63e:	697b      	ldr	r3, [r7, #20]
 800a640:	b2da      	uxtb	r2, r3
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 800a646:	2300      	movs	r3, #0
}
 800a648:	4618      	mov	r0, r3
 800a64a:	372c      	adds	r7, #44	; 0x2c
 800a64c:	46bd      	mov	sp, r7
 800a64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a652:	4770      	bx	lr
 800a654:	58004000 	.word	0x58004000
 800a658:	a94656b9 	.word	0xa94656b9

0800a65c <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800a65c:	b580      	push	{r7, lr}
 800a65e:	b082      	sub	sp, #8
 800a660:	af00      	add	r7, sp, #0
 800a662:	6078      	str	r0, [r7, #4]
 800a664:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800a666:	683b      	ldr	r3, [r7, #0]
 800a668:	685b      	ldr	r3, [r3, #4]
 800a66a:	4a08      	ldr	r2, [pc, #32]	; (800a68c <hci_init+0x30>)
 800a66c:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 800a66e:	4a08      	ldr	r2, [pc, #32]	; (800a690 <hci_init+0x34>)
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 800a674:	4806      	ldr	r0, [pc, #24]	; (800a690 <hci_init+0x34>)
 800a676:	f000 f973 	bl	800a960 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800a67a:	683b      	ldr	r3, [r7, #0]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	4618      	mov	r0, r3
 800a680:	f000 f8d4 	bl	800a82c <TlInit>

  return;
 800a684:	bf00      	nop
}
 800a686:	3708      	adds	r7, #8
 800a688:	46bd      	mov	sp, r7
 800a68a:	bd80      	pop	{r7, pc}
 800a68c:	20000d10 	.word	0x20000d10
 800a690:	20000ce8 	.word	0x20000ce8

0800a694 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 800a694:	b580      	push	{r7, lr}
 800a696:	b084      	sub	sp, #16
 800a698:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800a69a:	4822      	ldr	r0, [pc, #136]	; (800a724 <hci_user_evt_proc+0x90>)
 800a69c:	f000 fd28 	bl	800b0f0 <LST_is_empty>
 800a6a0:	4603      	mov	r3, r0
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d12b      	bne.n	800a6fe <hci_user_evt_proc+0x6a>
 800a6a6:	4b20      	ldr	r3, [pc, #128]	; (800a728 <hci_user_evt_proc+0x94>)
 800a6a8:	781b      	ldrb	r3, [r3, #0]
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d027      	beq.n	800a6fe <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800a6ae:	f107 030c 	add.w	r3, r7, #12
 800a6b2:	4619      	mov	r1, r3
 800a6b4:	481b      	ldr	r0, [pc, #108]	; (800a724 <hci_user_evt_proc+0x90>)
 800a6b6:	f000 fdaa 	bl	800b20e <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 800a6ba:	4b1c      	ldr	r3, [pc, #112]	; (800a72c <hci_user_evt_proc+0x98>)
 800a6bc:	69db      	ldr	r3, [r3, #28]
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d00c      	beq.n	800a6dc <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 800a6c6:	2301      	movs	r3, #1
 800a6c8:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 800a6ca:	4b18      	ldr	r3, [pc, #96]	; (800a72c <hci_user_evt_proc+0x98>)
 800a6cc:	69db      	ldr	r3, [r3, #28]
 800a6ce:	1d3a      	adds	r2, r7, #4
 800a6d0:	4610      	mov	r0, r2
 800a6d2:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 800a6d4:	793a      	ldrb	r2, [r7, #4]
 800a6d6:	4b14      	ldr	r3, [pc, #80]	; (800a728 <hci_user_evt_proc+0x94>)
 800a6d8:	701a      	strb	r2, [r3, #0]
 800a6da:	e002      	b.n	800a6e2 <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800a6dc:	4b12      	ldr	r3, [pc, #72]	; (800a728 <hci_user_evt_proc+0x94>)
 800a6de:	2201      	movs	r2, #1
 800a6e0:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 800a6e2:	4b11      	ldr	r3, [pc, #68]	; (800a728 <hci_user_evt_proc+0x94>)
 800a6e4:	781b      	ldrb	r3, [r3, #0]
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d004      	beq.n	800a6f4 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	4618      	mov	r0, r3
 800a6ee:	f000 fc03 	bl	800aef8 <TL_MM_EvtDone>
 800a6f2:	e004      	b.n	800a6fe <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	4619      	mov	r1, r3
 800a6f8:	480a      	ldr	r0, [pc, #40]	; (800a724 <hci_user_evt_proc+0x90>)
 800a6fa:	f000 fd1b 	bl	800b134 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800a6fe:	4809      	ldr	r0, [pc, #36]	; (800a724 <hci_user_evt_proc+0x90>)
 800a700:	f000 fcf6 	bl	800b0f0 <LST_is_empty>
 800a704:	4603      	mov	r3, r0
 800a706:	2b00      	cmp	r3, #0
 800a708:	d107      	bne.n	800a71a <hci_user_evt_proc+0x86>
 800a70a:	4b07      	ldr	r3, [pc, #28]	; (800a728 <hci_user_evt_proc+0x94>)
 800a70c:	781b      	ldrb	r3, [r3, #0]
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d003      	beq.n	800a71a <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 800a712:	4804      	ldr	r0, [pc, #16]	; (800a724 <hci_user_evt_proc+0x90>)
 800a714:	f001 f830 	bl	800b778 <hci_notify_asynch_evt>
  }


  return;
 800a718:	bf00      	nop
 800a71a:	bf00      	nop
}
 800a71c:	3710      	adds	r7, #16
 800a71e:	46bd      	mov	sp, r7
 800a720:	bd80      	pop	{r7, pc}
 800a722:	bf00      	nop
 800a724:	20000938 	.word	0x20000938
 800a728:	20000944 	.word	0x20000944
 800a72c:	20000ce8 	.word	0x20000ce8

0800a730 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 800a730:	b580      	push	{r7, lr}
 800a732:	b088      	sub	sp, #32
 800a734:	af00      	add	r7, sp, #0
 800a736:	6078      	str	r0, [r7, #4]
 800a738:	460b      	mov	r3, r1
 800a73a:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 800a73c:	2000      	movs	r0, #0
 800a73e:	f000 f8cb 	bl	800a8d8 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 800a742:	2300      	movs	r3, #0
 800a744:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	885b      	ldrh	r3, [r3, #2]
 800a74a:	b21b      	sxth	r3, r3
 800a74c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a750:	b21a      	sxth	r2, r3
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	881b      	ldrh	r3, [r3, #0]
 800a756:	029b      	lsls	r3, r3, #10
 800a758:	b21b      	sxth	r3, r3
 800a75a:	4313      	orrs	r3, r2
 800a75c:	b21b      	sxth	r3, r3
 800a75e:	83bb      	strh	r3, [r7, #28]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	68db      	ldr	r3, [r3, #12]
 800a764:	b2d9      	uxtb	r1, r3
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	689a      	ldr	r2, [r3, #8]
 800a76a:	8bbb      	ldrh	r3, [r7, #28]
 800a76c:	4618      	mov	r0, r3
 800a76e:	f000 f88d 	bl	800a88c <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 800a772:	e04e      	b.n	800a812 <hci_send_req+0xe2>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 800a774:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800a778:	f001 f815 	bl	800b7a6 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800a77c:	e043      	b.n	800a806 <hci_send_req+0xd6>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 800a77e:	f107 030c 	add.w	r3, r7, #12
 800a782:	4619      	mov	r1, r3
 800a784:	4828      	ldr	r0, [pc, #160]	; (800a828 <hci_send_req+0xf8>)
 800a786:	f000 fd42 	bl	800b20e <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	7a5b      	ldrb	r3, [r3, #9]
 800a78e:	2b0f      	cmp	r3, #15
 800a790:	d114      	bne.n	800a7bc <hci_send_req+0x8c>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	330b      	adds	r3, #11
 800a796:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 800a798:	693b      	ldr	r3, [r7, #16]
 800a79a:	885b      	ldrh	r3, [r3, #2]
 800a79c:	b29b      	uxth	r3, r3
 800a79e:	8bba      	ldrh	r2, [r7, #28]
 800a7a0:	429a      	cmp	r2, r3
 800a7a2:	d104      	bne.n	800a7ae <hci_send_req+0x7e>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	691b      	ldr	r3, [r3, #16]
 800a7a8:	693a      	ldr	r2, [r7, #16]
 800a7aa:	7812      	ldrb	r2, [r2, #0]
 800a7ac:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 800a7ae:	693b      	ldr	r3, [r7, #16]
 800a7b0:	785b      	ldrb	r3, [r3, #1]
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d027      	beq.n	800a806 <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800a7b6:	2301      	movs	r3, #1
 800a7b8:	77fb      	strb	r3, [r7, #31]
 800a7ba:	e024      	b.n	800a806 <hci_send_req+0xd6>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	330b      	adds	r3, #11
 800a7c0:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 800a7c2:	69bb      	ldr	r3, [r7, #24]
 800a7c4:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800a7c8:	b29b      	uxth	r3, r3
 800a7ca:	8bba      	ldrh	r2, [r7, #28]
 800a7cc:	429a      	cmp	r2, r3
 800a7ce:	d114      	bne.n	800a7fa <hci_send_req+0xca>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	7a9b      	ldrb	r3, [r3, #10]
 800a7d4:	3b03      	subs	r3, #3
 800a7d6:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	695a      	ldr	r2, [r3, #20]
 800a7dc:	7dfb      	ldrb	r3, [r7, #23]
 800a7de:	429a      	cmp	r2, r3
 800a7e0:	bfa8      	it	ge
 800a7e2:	461a      	movge	r2, r3
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	6918      	ldr	r0, [r3, #16]
 800a7ec:	69bb      	ldr	r3, [r7, #24]
 800a7ee:	1cd9      	adds	r1, r3, #3
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	695b      	ldr	r3, [r3, #20]
 800a7f4:	461a      	mov	r2, r3
 800a7f6:	f001 fde7 	bl	800c3c8 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 800a7fa:	69bb      	ldr	r3, [r7, #24]
 800a7fc:	781b      	ldrb	r3, [r3, #0]
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d001      	beq.n	800a806 <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800a802:	2301      	movs	r3, #1
 800a804:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800a806:	4808      	ldr	r0, [pc, #32]	; (800a828 <hci_send_req+0xf8>)
 800a808:	f000 fc72 	bl	800b0f0 <LST_is_empty>
 800a80c:	4603      	mov	r3, r0
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d0b5      	beq.n	800a77e <hci_send_req+0x4e>
  while(local_cmd_status == HCI_TL_CmdBusy)
 800a812:	7ffb      	ldrb	r3, [r7, #31]
 800a814:	2b00      	cmp	r3, #0
 800a816:	d0ad      	beq.n	800a774 <hci_send_req+0x44>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 800a818:	2001      	movs	r0, #1
 800a81a:	f000 f85d 	bl	800a8d8 <NotifyCmdStatus>

  return 0;
 800a81e:	2300      	movs	r3, #0
}
 800a820:	4618      	mov	r0, r3
 800a822:	3720      	adds	r7, #32
 800a824:	46bd      	mov	sp, r7
 800a826:	bd80      	pop	{r7, pc}
 800a828:	20000d08 	.word	0x20000d08

0800a82c <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800a82c:	b580      	push	{r7, lr}
 800a82e:	b086      	sub	sp, #24
 800a830:	af00      	add	r7, sp, #0
 800a832:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 800a834:	480f      	ldr	r0, [pc, #60]	; (800a874 <TlInit+0x48>)
 800a836:	f000 fc4b 	bl	800b0d0 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 800a83a:	4a0f      	ldr	r2, [pc, #60]	; (800a878 <TlInit+0x4c>)
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 800a840:	480e      	ldr	r0, [pc, #56]	; (800a87c <TlInit+0x50>)
 800a842:	f000 fc45 	bl	800b0d0 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800a846:	4b0e      	ldr	r3, [pc, #56]	; (800a880 <TlInit+0x54>)
 800a848:	2201      	movs	r2, #1
 800a84a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 800a84c:	4b0d      	ldr	r3, [pc, #52]	; (800a884 <TlInit+0x58>)
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	2b00      	cmp	r3, #0
 800a852:	d00a      	beq.n	800a86a <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 800a858:	4b0b      	ldr	r3, [pc, #44]	; (800a888 <TlInit+0x5c>)
 800a85a:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 800a85c:	4b09      	ldr	r3, [pc, #36]	; (800a884 <TlInit+0x58>)
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	f107 0208 	add.w	r2, r7, #8
 800a864:	4610      	mov	r0, r2
 800a866:	4798      	blx	r3
  }

  return;
 800a868:	bf00      	nop
 800a86a:	bf00      	nop
}
 800a86c:	3718      	adds	r7, #24
 800a86e:	46bd      	mov	sp, r7
 800a870:	bd80      	pop	{r7, pc}
 800a872:	bf00      	nop
 800a874:	20000d08 	.word	0x20000d08
 800a878:	20000940 	.word	0x20000940
 800a87c:	20000938 	.word	0x20000938
 800a880:	20000944 	.word	0x20000944
 800a884:	20000ce8 	.word	0x20000ce8
 800a888:	0800a919 	.word	0x0800a919

0800a88c <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 800a88c:	b580      	push	{r7, lr}
 800a88e:	b082      	sub	sp, #8
 800a890:	af00      	add	r7, sp, #0
 800a892:	4603      	mov	r3, r0
 800a894:	603a      	str	r2, [r7, #0]
 800a896:	80fb      	strh	r3, [r7, #6]
 800a898:	460b      	mov	r3, r1
 800a89a:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 800a89c:	4b0c      	ldr	r3, [pc, #48]	; (800a8d0 <SendCmd+0x44>)
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	88fa      	ldrh	r2, [r7, #6]
 800a8a2:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 800a8a6:	4b0a      	ldr	r3, [pc, #40]	; (800a8d0 <SendCmd+0x44>)
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	797a      	ldrb	r2, [r7, #5]
 800a8ac:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 800a8ae:	4b08      	ldr	r3, [pc, #32]	; (800a8d0 <SendCmd+0x44>)
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	330c      	adds	r3, #12
 800a8b4:	797a      	ldrb	r2, [r7, #5]
 800a8b6:	6839      	ldr	r1, [r7, #0]
 800a8b8:	4618      	mov	r0, r3
 800a8ba:	f001 fd85 	bl	800c3c8 <memcpy>

  hciContext.io.Send(0,0);
 800a8be:	4b05      	ldr	r3, [pc, #20]	; (800a8d4 <SendCmd+0x48>)
 800a8c0:	691b      	ldr	r3, [r3, #16]
 800a8c2:	2100      	movs	r1, #0
 800a8c4:	2000      	movs	r0, #0
 800a8c6:	4798      	blx	r3

  return;
 800a8c8:	bf00      	nop
}
 800a8ca:	3708      	adds	r7, #8
 800a8cc:	46bd      	mov	sp, r7
 800a8ce:	bd80      	pop	{r7, pc}
 800a8d0:	20000940 	.word	0x20000940
 800a8d4:	20000ce8 	.word	0x20000ce8

0800a8d8 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 800a8d8:	b580      	push	{r7, lr}
 800a8da:	b082      	sub	sp, #8
 800a8dc:	af00      	add	r7, sp, #0
 800a8de:	4603      	mov	r3, r0
 800a8e0:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 800a8e2:	79fb      	ldrb	r3, [r7, #7]
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d108      	bne.n	800a8fa <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 800a8e8:	4b0a      	ldr	r3, [pc, #40]	; (800a914 <NotifyCmdStatus+0x3c>)
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d00d      	beq.n	800a90c <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 800a8f0:	4b08      	ldr	r3, [pc, #32]	; (800a914 <NotifyCmdStatus+0x3c>)
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	2000      	movs	r0, #0
 800a8f6:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 800a8f8:	e008      	b.n	800a90c <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 800a8fa:	4b06      	ldr	r3, [pc, #24]	; (800a914 <NotifyCmdStatus+0x3c>)
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d004      	beq.n	800a90c <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 800a902:	4b04      	ldr	r3, [pc, #16]	; (800a914 <NotifyCmdStatus+0x3c>)
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	2001      	movs	r0, #1
 800a908:	4798      	blx	r3
  return;
 800a90a:	bf00      	nop
 800a90c:	bf00      	nop
}
 800a90e:	3708      	adds	r7, #8
 800a910:	46bd      	mov	sp, r7
 800a912:	bd80      	pop	{r7, pc}
 800a914:	20000d10 	.word	0x20000d10

0800a918 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 800a918:	b580      	push	{r7, lr}
 800a91a:	b082      	sub	sp, #8
 800a91c:	af00      	add	r7, sp, #0
 800a91e:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	7a5b      	ldrb	r3, [r3, #9]
 800a924:	2b0f      	cmp	r3, #15
 800a926:	d003      	beq.n	800a930 <TlEvtReceived+0x18>
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	7a5b      	ldrb	r3, [r3, #9]
 800a92c:	2b0e      	cmp	r3, #14
 800a92e:	d107      	bne.n	800a940 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 800a930:	6879      	ldr	r1, [r7, #4]
 800a932:	4809      	ldr	r0, [pc, #36]	; (800a958 <TlEvtReceived+0x40>)
 800a934:	f000 fc24 	bl	800b180 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 800a938:	2000      	movs	r0, #0
 800a93a:	f000 ff29 	bl	800b790 <hci_cmd_resp_release>
 800a93e:	e006      	b.n	800a94e <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 800a940:	6879      	ldr	r1, [r7, #4]
 800a942:	4806      	ldr	r0, [pc, #24]	; (800a95c <TlEvtReceived+0x44>)
 800a944:	f000 fc1c 	bl	800b180 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800a948:	4804      	ldr	r0, [pc, #16]	; (800a95c <TlEvtReceived+0x44>)
 800a94a:	f000 ff15 	bl	800b778 <hci_notify_asynch_evt>
  }

  return;
 800a94e:	bf00      	nop
}
 800a950:	3708      	adds	r7, #8
 800a952:	46bd      	mov	sp, r7
 800a954:	bd80      	pop	{r7, pc}
 800a956:	bf00      	nop
 800a958:	20000d08 	.word	0x20000d08
 800a95c:	20000938 	.word	0x20000938

0800a960 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 800a960:	b480      	push	{r7}
 800a962:	b083      	sub	sp, #12
 800a964:	af00      	add	r7, sp, #0
 800a966:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	4a05      	ldr	r2, [pc, #20]	; (800a980 <hci_register_io_bus+0x20>)
 800a96c:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	4a04      	ldr	r2, [pc, #16]	; (800a984 <hci_register_io_bus+0x24>)
 800a972:	611a      	str	r2, [r3, #16]

  return;
 800a974:	bf00      	nop
}
 800a976:	370c      	adds	r7, #12
 800a978:	46bd      	mov	sp, r7
 800a97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a97e:	4770      	bx	lr
 800a980:	0800ac71 	.word	0x0800ac71
 800a984:	0800acd9 	.word	0x0800acd9

0800a988 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800a988:	b580      	push	{r7, lr}
 800a98a:	b082      	sub	sp, #8
 800a98c:	af00      	add	r7, sp, #0
 800a98e:	6078      	str	r0, [r7, #4]
 800a990:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800a992:	683b      	ldr	r3, [r7, #0]
 800a994:	685b      	ldr	r3, [r3, #4]
 800a996:	4a08      	ldr	r2, [pc, #32]	; (800a9b8 <shci_init+0x30>)
 800a998:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 800a99a:	4a08      	ldr	r2, [pc, #32]	; (800a9bc <shci_init+0x34>)
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 800a9a0:	4806      	ldr	r0, [pc, #24]	; (800a9bc <shci_init+0x34>)
 800a9a2:	f000 f911 	bl	800abc8 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800a9a6:	683b      	ldr	r3, [r7, #0]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	4618      	mov	r0, r3
 800a9ac:	f000 f894 	bl	800aad8 <TlInit>

  return;
 800a9b0:	bf00      	nop
}
 800a9b2:	3708      	adds	r7, #8
 800a9b4:	46bd      	mov	sp, r7
 800a9b6:	bd80      	pop	{r7, pc}
 800a9b8:	20000d34 	.word	0x20000d34
 800a9bc:	20000d14 	.word	0x20000d14

0800a9c0 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 800a9c0:	b580      	push	{r7, lr}
 800a9c2:	b084      	sub	sp, #16
 800a9c4:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800a9c6:	4822      	ldr	r0, [pc, #136]	; (800aa50 <shci_user_evt_proc+0x90>)
 800a9c8:	f000 fb92 	bl	800b0f0 <LST_is_empty>
 800a9cc:	4603      	mov	r3, r0
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d12b      	bne.n	800aa2a <shci_user_evt_proc+0x6a>
 800a9d2:	4b20      	ldr	r3, [pc, #128]	; (800aa54 <shci_user_evt_proc+0x94>)
 800a9d4:	781b      	ldrb	r3, [r3, #0]
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d027      	beq.n	800aa2a <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800a9da:	f107 030c 	add.w	r3, r7, #12
 800a9de:	4619      	mov	r1, r3
 800a9e0:	481b      	ldr	r0, [pc, #108]	; (800aa50 <shci_user_evt_proc+0x90>)
 800a9e2:	f000 fc14 	bl	800b20e <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 800a9e6:	4b1c      	ldr	r3, [pc, #112]	; (800aa58 <shci_user_evt_proc+0x98>)
 800a9e8:	69db      	ldr	r3, [r3, #28]
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d00c      	beq.n	800aa08 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 800a9f2:	2301      	movs	r3, #1
 800a9f4:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 800a9f6:	4b18      	ldr	r3, [pc, #96]	; (800aa58 <shci_user_evt_proc+0x98>)
 800a9f8:	69db      	ldr	r3, [r3, #28]
 800a9fa:	1d3a      	adds	r2, r7, #4
 800a9fc:	4610      	mov	r0, r2
 800a9fe:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 800aa00:	793a      	ldrb	r2, [r7, #4]
 800aa02:	4b14      	ldr	r3, [pc, #80]	; (800aa54 <shci_user_evt_proc+0x94>)
 800aa04:	701a      	strb	r2, [r3, #0]
 800aa06:	e002      	b.n	800aa0e <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800aa08:	4b12      	ldr	r3, [pc, #72]	; (800aa54 <shci_user_evt_proc+0x94>)
 800aa0a:	2201      	movs	r2, #1
 800aa0c:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 800aa0e:	4b11      	ldr	r3, [pc, #68]	; (800aa54 <shci_user_evt_proc+0x94>)
 800aa10:	781b      	ldrb	r3, [r3, #0]
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d004      	beq.n	800aa20 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	4618      	mov	r0, r3
 800aa1a:	f000 fa6d 	bl	800aef8 <TL_MM_EvtDone>
 800aa1e:	e004      	b.n	800aa2a <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	4619      	mov	r1, r3
 800aa24:	480a      	ldr	r0, [pc, #40]	; (800aa50 <shci_user_evt_proc+0x90>)
 800aa26:	f000 fb85 	bl	800b134 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800aa2a:	4809      	ldr	r0, [pc, #36]	; (800aa50 <shci_user_evt_proc+0x90>)
 800aa2c:	f000 fb60 	bl	800b0f0 <LST_is_empty>
 800aa30:	4603      	mov	r3, r0
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d107      	bne.n	800aa46 <shci_user_evt_proc+0x86>
 800aa36:	4b07      	ldr	r3, [pc, #28]	; (800aa54 <shci_user_evt_proc+0x94>)
 800aa38:	781b      	ldrb	r3, [r3, #0]
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d003      	beq.n	800aa46 <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 800aa3e:	4804      	ldr	r0, [pc, #16]	; (800aa50 <shci_user_evt_proc+0x90>)
 800aa40:	f7f6 fcd8 	bl	80013f4 <shci_notify_asynch_evt>
  }


  return;
 800aa44:	bf00      	nop
 800aa46:	bf00      	nop
}
 800aa48:	3710      	adds	r7, #16
 800aa4a:	46bd      	mov	sp, r7
 800aa4c:	bd80      	pop	{r7, pc}
 800aa4e:	bf00      	nop
 800aa50:	20000948 	.word	0x20000948
 800aa54:	20000958 	.word	0x20000958
 800aa58:	20000d14 	.word	0x20000d14

0800aa5c <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 800aa5c:	b580      	push	{r7, lr}
 800aa5e:	b084      	sub	sp, #16
 800aa60:	af00      	add	r7, sp, #0
 800aa62:	60ba      	str	r2, [r7, #8]
 800aa64:	607b      	str	r3, [r7, #4]
 800aa66:	4603      	mov	r3, r0
 800aa68:	81fb      	strh	r3, [r7, #14]
 800aa6a:	460b      	mov	r3, r1
 800aa6c:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 800aa6e:	2000      	movs	r0, #0
 800aa70:	f000 f864 	bl	800ab3c <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 800aa74:	4b16      	ldr	r3, [pc, #88]	; (800aad0 <shci_send+0x74>)
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	89fa      	ldrh	r2, [r7, #14]
 800aa7a:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 800aa7e:	4b14      	ldr	r3, [pc, #80]	; (800aad0 <shci_send+0x74>)
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	7b7a      	ldrb	r2, [r7, #13]
 800aa84:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 800aa86:	4b12      	ldr	r3, [pc, #72]	; (800aad0 <shci_send+0x74>)
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	330c      	adds	r3, #12
 800aa8c:	7b7a      	ldrb	r2, [r7, #13]
 800aa8e:	68b9      	ldr	r1, [r7, #8]
 800aa90:	4618      	mov	r0, r3
 800aa92:	f001 fc99 	bl	800c3c8 <memcpy>

  shciContext.io.Send(0,0);
 800aa96:	4b0f      	ldr	r3, [pc, #60]	; (800aad4 <shci_send+0x78>)
 800aa98:	691b      	ldr	r3, [r3, #16]
 800aa9a:	2100      	movs	r1, #0
 800aa9c:	2000      	movs	r0, #0
 800aa9e:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 800aaa0:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800aaa4:	f7f6 fcbd 	bl	8001422 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	f103 0008 	add.w	r0, r3, #8
 800aaae:	4b08      	ldr	r3, [pc, #32]	; (800aad0 <shci_send+0x74>)
 800aab0:	6819      	ldr	r1, [r3, #0]
 800aab2:	4b07      	ldr	r3, [pc, #28]	; (800aad0 <shci_send+0x74>)
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	789b      	ldrb	r3, [r3, #2]
 800aab8:	3303      	adds	r3, #3
 800aaba:	461a      	mov	r2, r3
 800aabc:	f001 fc84 	bl	800c3c8 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800aac0:	2001      	movs	r0, #1
 800aac2:	f000 f83b 	bl	800ab3c <Cmd_SetStatus>

  return;
 800aac6:	bf00      	nop
}
 800aac8:	3710      	adds	r7, #16
 800aaca:	46bd      	mov	sp, r7
 800aacc:	bd80      	pop	{r7, pc}
 800aace:	bf00      	nop
 800aad0:	20000954 	.word	0x20000954
 800aad4:	20000d14 	.word	0x20000d14

0800aad8 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800aad8:	b580      	push	{r7, lr}
 800aada:	b086      	sub	sp, #24
 800aadc:	af00      	add	r7, sp, #0
 800aade:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 800aae0:	4a10      	ldr	r2, [pc, #64]	; (800ab24 <TlInit+0x4c>)
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 800aae6:	4810      	ldr	r0, [pc, #64]	; (800ab28 <TlInit+0x50>)
 800aae8:	f000 faf2 	bl	800b0d0 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800aaec:	2001      	movs	r0, #1
 800aaee:	f000 f825 	bl	800ab3c <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800aaf2:	4b0e      	ldr	r3, [pc, #56]	; (800ab2c <TlInit+0x54>)
 800aaf4:	2201      	movs	r2, #1
 800aaf6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 800aaf8:	4b0d      	ldr	r3, [pc, #52]	; (800ab30 <TlInit+0x58>)
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d00c      	beq.n	800ab1a <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 800ab04:	4b0b      	ldr	r3, [pc, #44]	; (800ab34 <TlInit+0x5c>)
 800ab06:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 800ab08:	4b0b      	ldr	r3, [pc, #44]	; (800ab38 <TlInit+0x60>)
 800ab0a:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 800ab0c:	4b08      	ldr	r3, [pc, #32]	; (800ab30 <TlInit+0x58>)
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	f107 020c 	add.w	r2, r7, #12
 800ab14:	4610      	mov	r0, r2
 800ab16:	4798      	blx	r3
  }

  return;
 800ab18:	bf00      	nop
 800ab1a:	bf00      	nop
}
 800ab1c:	3718      	adds	r7, #24
 800ab1e:	46bd      	mov	sp, r7
 800ab20:	bd80      	pop	{r7, pc}
 800ab22:	bf00      	nop
 800ab24:	20000954 	.word	0x20000954
 800ab28:	20000948 	.word	0x20000948
 800ab2c:	20000958 	.word	0x20000958
 800ab30:	20000d14 	.word	0x20000d14
 800ab34:	0800ab8d 	.word	0x0800ab8d
 800ab38:	0800aba5 	.word	0x0800aba5

0800ab3c <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 800ab3c:	b580      	push	{r7, lr}
 800ab3e:	b082      	sub	sp, #8
 800ab40:	af00      	add	r7, sp, #0
 800ab42:	4603      	mov	r3, r0
 800ab44:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 800ab46:	79fb      	ldrb	r3, [r7, #7]
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d10b      	bne.n	800ab64 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 800ab4c:	4b0d      	ldr	r3, [pc, #52]	; (800ab84 <Cmd_SetStatus+0x48>)
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d003      	beq.n	800ab5c <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 800ab54:	4b0b      	ldr	r3, [pc, #44]	; (800ab84 <Cmd_SetStatus+0x48>)
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	2000      	movs	r0, #0
 800ab5a:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 800ab5c:	4b0a      	ldr	r3, [pc, #40]	; (800ab88 <Cmd_SetStatus+0x4c>)
 800ab5e:	2200      	movs	r2, #0
 800ab60:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 800ab62:	e00b      	b.n	800ab7c <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 800ab64:	4b08      	ldr	r3, [pc, #32]	; (800ab88 <Cmd_SetStatus+0x4c>)
 800ab66:	2201      	movs	r2, #1
 800ab68:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 800ab6a:	4b06      	ldr	r3, [pc, #24]	; (800ab84 <Cmd_SetStatus+0x48>)
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d004      	beq.n	800ab7c <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 800ab72:	4b04      	ldr	r3, [pc, #16]	; (800ab84 <Cmd_SetStatus+0x48>)
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	2001      	movs	r0, #1
 800ab78:	4798      	blx	r3
  return;
 800ab7a:	bf00      	nop
 800ab7c:	bf00      	nop
}
 800ab7e:	3708      	adds	r7, #8
 800ab80:	46bd      	mov	sp, r7
 800ab82:	bd80      	pop	{r7, pc}
 800ab84:	20000d34 	.word	0x20000d34
 800ab88:	20000950 	.word	0x20000950

0800ab8c <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 800ab8c:	b580      	push	{r7, lr}
 800ab8e:	b082      	sub	sp, #8
 800ab90:	af00      	add	r7, sp, #0
 800ab92:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 800ab94:	2000      	movs	r0, #0
 800ab96:	f7f6 fc39 	bl	800140c <shci_cmd_resp_release>

  return;
 800ab9a:	bf00      	nop
}
 800ab9c:	3708      	adds	r7, #8
 800ab9e:	46bd      	mov	sp, r7
 800aba0:	bd80      	pop	{r7, pc}
	...

0800aba4 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 800aba4:	b580      	push	{r7, lr}
 800aba6:	b082      	sub	sp, #8
 800aba8:	af00      	add	r7, sp, #0
 800abaa:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 800abac:	6879      	ldr	r1, [r7, #4]
 800abae:	4805      	ldr	r0, [pc, #20]	; (800abc4 <TlUserEvtReceived+0x20>)
 800abb0:	f000 fae6 	bl	800b180 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800abb4:	4803      	ldr	r0, [pc, #12]	; (800abc4 <TlUserEvtReceived+0x20>)
 800abb6:	f7f6 fc1d 	bl	80013f4 <shci_notify_asynch_evt>

  return;
 800abba:	bf00      	nop
}
 800abbc:	3708      	adds	r7, #8
 800abbe:	46bd      	mov	sp, r7
 800abc0:	bd80      	pop	{r7, pc}
 800abc2:	bf00      	nop
 800abc4:	20000948 	.word	0x20000948

0800abc8 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 800abc8:	b480      	push	{r7}
 800abca:	b083      	sub	sp, #12
 800abcc:	af00      	add	r7, sp, #0
 800abce:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	4a05      	ldr	r2, [pc, #20]	; (800abe8 <shci_register_io_bus+0x20>)
 800abd4:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	4a04      	ldr	r2, [pc, #16]	; (800abec <shci_register_io_bus+0x24>)
 800abda:	611a      	str	r2, [r3, #16]

  return;
 800abdc:	bf00      	nop
}
 800abde:	370c      	adds	r7, #12
 800abe0:	46bd      	mov	sp, r7
 800abe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe6:	4770      	bx	lr
 800abe8:	0800ad85 	.word	0x0800ad85
 800abec:	0800add9 	.word	0x0800add9

0800abf0 <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 800abf0:	b580      	push	{r7, lr}
 800abf2:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 800abf4:	f001 f86c 	bl	800bcd0 <HW_IPCC_Enable>

  return;
 800abf8:	bf00      	nop
}
 800abfa:	bd80      	pop	{r7, pc}

0800abfc <TL_Init>:


void TL_Init( void )
{
 800abfc:	b580      	push	{r7, lr}
 800abfe:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 800ac00:	4b10      	ldr	r3, [pc, #64]	; (800ac44 <TL_Init+0x48>)
 800ac02:	4a11      	ldr	r2, [pc, #68]	; (800ac48 <TL_Init+0x4c>)
 800ac04:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 800ac06:	4b0f      	ldr	r3, [pc, #60]	; (800ac44 <TL_Init+0x48>)
 800ac08:	4a10      	ldr	r2, [pc, #64]	; (800ac4c <TL_Init+0x50>)
 800ac0a:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 800ac0c:	4b0d      	ldr	r3, [pc, #52]	; (800ac44 <TL_Init+0x48>)
 800ac0e:	4a10      	ldr	r2, [pc, #64]	; (800ac50 <TL_Init+0x54>)
 800ac10:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 800ac12:	4b0c      	ldr	r3, [pc, #48]	; (800ac44 <TL_Init+0x48>)
 800ac14:	4a0f      	ldr	r2, [pc, #60]	; (800ac54 <TL_Init+0x58>)
 800ac16:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 800ac18:	4b0a      	ldr	r3, [pc, #40]	; (800ac44 <TL_Init+0x48>)
 800ac1a:	4a0f      	ldr	r2, [pc, #60]	; (800ac58 <TL_Init+0x5c>)
 800ac1c:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 800ac1e:	4b09      	ldr	r3, [pc, #36]	; (800ac44 <TL_Init+0x48>)
 800ac20:	4a0e      	ldr	r2, [pc, #56]	; (800ac5c <TL_Init+0x60>)
 800ac22:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 800ac24:	4b07      	ldr	r3, [pc, #28]	; (800ac44 <TL_Init+0x48>)
 800ac26:	4a0e      	ldr	r2, [pc, #56]	; (800ac60 <TL_Init+0x64>)
 800ac28:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 800ac2a:	4b06      	ldr	r3, [pc, #24]	; (800ac44 <TL_Init+0x48>)
 800ac2c:	4a0d      	ldr	r2, [pc, #52]	; (800ac64 <TL_Init+0x68>)
 800ac2e:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 800ac30:	4b04      	ldr	r3, [pc, #16]	; (800ac44 <TL_Init+0x48>)
 800ac32:	4a0d      	ldr	r2, [pc, #52]	; (800ac68 <TL_Init+0x6c>)
 800ac34:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800ac36:	4b03      	ldr	r3, [pc, #12]	; (800ac44 <TL_Init+0x48>)
 800ac38:	4a0c      	ldr	r2, [pc, #48]	; (800ac6c <TL_Init+0x70>)
 800ac3a:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 800ac3c:	f001 f85c 	bl	800bcf8 <HW_IPCC_Init>

  return;
 800ac40:	bf00      	nop
}
 800ac42:	bd80      	pop	{r7, pc}
 800ac44:	20030000 	.word	0x20030000
 800ac48:	20030028 	.word	0x20030028
 800ac4c:	20030048 	.word	0x20030048
 800ac50:	20030058 	.word	0x20030058
 800ac54:	20030068 	.word	0x20030068
 800ac58:	20030070 	.word	0x20030070
 800ac5c:	20030078 	.word	0x20030078
 800ac60:	20030080 	.word	0x20030080
 800ac64:	2003009c 	.word	0x2003009c
 800ac68:	200300a0 	.word	0x200300a0
 800ac6c:	200300ac 	.word	0x200300ac

0800ac70 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 800ac70:	b580      	push	{r7, lr}
 800ac72:	b084      	sub	sp, #16
 800ac74:	af00      	add	r7, sp, #0
 800ac76:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 800ac7c:	4811      	ldr	r0, [pc, #68]	; (800acc4 <TL_BLE_Init+0x54>)
 800ac7e:	f000 fa27 	bl	800b0d0 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 800ac82:	4b11      	ldr	r3, [pc, #68]	; (800acc8 <TL_BLE_Init+0x58>)
 800ac84:	685b      	ldr	r3, [r3, #4]
 800ac86:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	689a      	ldr	r2, [r3, #8]
 800ac8c:	68bb      	ldr	r3, [r7, #8]
 800ac8e:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	68da      	ldr	r2, [r3, #12]
 800ac94:	68bb      	ldr	r3, [r7, #8]
 800ac96:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 800ac98:	68bb      	ldr	r3, [r7, #8]
 800ac9a:	4a0c      	ldr	r2, [pc, #48]	; (800accc <TL_BLE_Init+0x5c>)
 800ac9c:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 800ac9e:	68bb      	ldr	r3, [r7, #8]
 800aca0:	4a08      	ldr	r2, [pc, #32]	; (800acc4 <TL_BLE_Init+0x54>)
 800aca2:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 800aca4:	f001 f83e 	bl	800bd24 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	4a08      	ldr	r2, [pc, #32]	; (800acd0 <TL_BLE_Init+0x60>)
 800acae:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	685b      	ldr	r3, [r3, #4]
 800acb4:	4a07      	ldr	r2, [pc, #28]	; (800acd4 <TL_BLE_Init+0x64>)
 800acb6:	6013      	str	r3, [r2, #0]

  return 0;
 800acb8:	2300      	movs	r3, #0
}
 800acba:	4618      	mov	r0, r3
 800acbc:	3710      	adds	r7, #16
 800acbe:	46bd      	mov	sp, r7
 800acc0:	bd80      	pop	{r7, pc}
 800acc2:	bf00      	nop
 800acc4:	200300c8 	.word	0x200300c8
 800acc8:	20030000 	.word	0x20030000
 800accc:	20000900 	.word	0x20000900
 800acd0:	20000d40 	.word	0x20000d40
 800acd4:	20000d44 	.word	0x20000d44

0800acd8 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 800acd8:	b580      	push	{r7, lr}
 800acda:	b082      	sub	sp, #8
 800acdc:	af00      	add	r7, sp, #0
 800acde:	6078      	str	r0, [r7, #4]
 800ace0:	460b      	mov	r3, r1
 800ace2:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 800ace4:	4b09      	ldr	r3, [pc, #36]	; (800ad0c <TL_BLE_SendCmd+0x34>)
 800ace6:	685b      	ldr	r3, [r3, #4]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	2201      	movs	r2, #1
 800acec:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 800acee:	4b07      	ldr	r3, [pc, #28]	; (800ad0c <TL_BLE_SendCmd+0x34>)
 800acf0:	685b      	ldr	r3, [r3, #4]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	4619      	mov	r1, r3
 800acf6:	2001      	movs	r0, #1
 800acf8:	f000 f96c 	bl	800afd4 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 800acfc:	f001 f81c 	bl	800bd38 <HW_IPCC_BLE_SendCmd>

  return 0;
 800ad00:	2300      	movs	r3, #0
}
 800ad02:	4618      	mov	r0, r3
 800ad04:	3708      	adds	r7, #8
 800ad06:	46bd      	mov	sp, r7
 800ad08:	bd80      	pop	{r7, pc}
 800ad0a:	bf00      	nop
 800ad0c:	20030000 	.word	0x20030000

0800ad10 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 800ad10:	b580      	push	{r7, lr}
 800ad12:	b082      	sub	sp, #8
 800ad14:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 800ad16:	e01c      	b.n	800ad52 <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 800ad18:	1d3b      	adds	r3, r7, #4
 800ad1a:	4619      	mov	r1, r3
 800ad1c:	4812      	ldr	r0, [pc, #72]	; (800ad68 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800ad1e:	f000 fa76 	bl	800b20e <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	7a5b      	ldrb	r3, [r3, #9]
 800ad26:	2b0f      	cmp	r3, #15
 800ad28:	d003      	beq.n	800ad32 <HW_IPCC_BLE_RxEvtNot+0x22>
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	7a5b      	ldrb	r3, [r3, #9]
 800ad2e:	2b0e      	cmp	r3, #14
 800ad30:	d105      	bne.n	800ad3e <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	4619      	mov	r1, r3
 800ad36:	2002      	movs	r0, #2
 800ad38:	f000 f94c 	bl	800afd4 <OutputDbgTrace>
 800ad3c:	e004      	b.n	800ad48 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	4619      	mov	r1, r3
 800ad42:	2003      	movs	r0, #3
 800ad44:	f000 f946 	bl	800afd4 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 800ad48:	4b08      	ldr	r3, [pc, #32]	; (800ad6c <HW_IPCC_BLE_RxEvtNot+0x5c>)
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	687a      	ldr	r2, [r7, #4]
 800ad4e:	4610      	mov	r0, r2
 800ad50:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 800ad52:	4805      	ldr	r0, [pc, #20]	; (800ad68 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800ad54:	f000 f9cc 	bl	800b0f0 <LST_is_empty>
 800ad58:	4603      	mov	r3, r0
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d0dc      	beq.n	800ad18 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 800ad5e:	bf00      	nop
}
 800ad60:	3708      	adds	r7, #8
 800ad62:	46bd      	mov	sp, r7
 800ad64:	bd80      	pop	{r7, pc}
 800ad66:	bf00      	nop
 800ad68:	200300c8 	.word	0x200300c8
 800ad6c:	20000d40 	.word	0x20000d40

0800ad70 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 800ad70:	b580      	push	{r7, lr}
 800ad72:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 800ad74:	4b02      	ldr	r3, [pc, #8]	; (800ad80 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	4798      	blx	r3

  return;
 800ad7a:	bf00      	nop
}
 800ad7c:	bd80      	pop	{r7, pc}
 800ad7e:	bf00      	nop
 800ad80:	20000d44 	.word	0x20000d44

0800ad84 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 800ad84:	b580      	push	{r7, lr}
 800ad86:	b084      	sub	sp, #16
 800ad88:	af00      	add	r7, sp, #0
 800ad8a:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 800ad90:	480d      	ldr	r0, [pc, #52]	; (800adc8 <TL_SYS_Init+0x44>)
 800ad92:	f000 f99d 	bl	800b0d0 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 800ad96:	4b0d      	ldr	r3, [pc, #52]	; (800adcc <TL_SYS_Init+0x48>)
 800ad98:	68db      	ldr	r3, [r3, #12]
 800ad9a:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	689a      	ldr	r2, [r3, #8]
 800ada0:	68bb      	ldr	r3, [r7, #8]
 800ada2:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 800ada4:	68bb      	ldr	r3, [r7, #8]
 800ada6:	4a08      	ldr	r2, [pc, #32]	; (800adc8 <TL_SYS_Init+0x44>)
 800ada8:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 800adaa:	f000 ffe7 	bl	800bd7c <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	4a07      	ldr	r2, [pc, #28]	; (800add0 <TL_SYS_Init+0x4c>)
 800adb4:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	685b      	ldr	r3, [r3, #4]
 800adba:	4a06      	ldr	r2, [pc, #24]	; (800add4 <TL_SYS_Init+0x50>)
 800adbc:	6013      	str	r3, [r2, #0]

  return 0;
 800adbe:	2300      	movs	r3, #0
}
 800adc0:	4618      	mov	r0, r3
 800adc2:	3710      	adds	r7, #16
 800adc4:	46bd      	mov	sp, r7
 800adc6:	bd80      	pop	{r7, pc}
 800adc8:	200300d0 	.word	0x200300d0
 800adcc:	20030000 	.word	0x20030000
 800add0:	20000d48 	.word	0x20000d48
 800add4:	20000d4c 	.word	0x20000d4c

0800add8 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 800add8:	b580      	push	{r7, lr}
 800adda:	b082      	sub	sp, #8
 800addc:	af00      	add	r7, sp, #0
 800adde:	6078      	str	r0, [r7, #4]
 800ade0:	460b      	mov	r3, r1
 800ade2:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 800ade4:	4b09      	ldr	r3, [pc, #36]	; (800ae0c <TL_SYS_SendCmd+0x34>)
 800ade6:	68db      	ldr	r3, [r3, #12]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	2210      	movs	r2, #16
 800adec:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 800adee:	4b07      	ldr	r3, [pc, #28]	; (800ae0c <TL_SYS_SendCmd+0x34>)
 800adf0:	68db      	ldr	r3, [r3, #12]
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	4619      	mov	r1, r3
 800adf6:	2004      	movs	r0, #4
 800adf8:	f000 f8ec 	bl	800afd4 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 800adfc:	f000 ffc8 	bl	800bd90 <HW_IPCC_SYS_SendCmd>

  return 0;
 800ae00:	2300      	movs	r3, #0
}
 800ae02:	4618      	mov	r0, r3
 800ae04:	3708      	adds	r7, #8
 800ae06:	46bd      	mov	sp, r7
 800ae08:	bd80      	pop	{r7, pc}
 800ae0a:	bf00      	nop
 800ae0c:	20030000 	.word	0x20030000

0800ae10 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 800ae10:	b580      	push	{r7, lr}
 800ae12:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800ae14:	4b07      	ldr	r3, [pc, #28]	; (800ae34 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800ae16:	68db      	ldr	r3, [r3, #12]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	4619      	mov	r1, r3
 800ae1c:	2005      	movs	r0, #5
 800ae1e:	f000 f8d9 	bl	800afd4 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800ae22:	4b05      	ldr	r3, [pc, #20]	; (800ae38 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	4a03      	ldr	r2, [pc, #12]	; (800ae34 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800ae28:	68d2      	ldr	r2, [r2, #12]
 800ae2a:	6812      	ldr	r2, [r2, #0]
 800ae2c:	4610      	mov	r0, r2
 800ae2e:	4798      	blx	r3

  return;
 800ae30:	bf00      	nop
}
 800ae32:	bd80      	pop	{r7, pc}
 800ae34:	20030000 	.word	0x20030000
 800ae38:	20000d48 	.word	0x20000d48

0800ae3c <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 800ae3c:	b580      	push	{r7, lr}
 800ae3e:	b082      	sub	sp, #8
 800ae40:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800ae42:	e00e      	b.n	800ae62 <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 800ae44:	1d3b      	adds	r3, r7, #4
 800ae46:	4619      	mov	r1, r3
 800ae48:	480b      	ldr	r0, [pc, #44]	; (800ae78 <HW_IPCC_SYS_EvtNot+0x3c>)
 800ae4a:	f000 f9e0 	bl	800b20e <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	4619      	mov	r1, r3
 800ae52:	2006      	movs	r0, #6
 800ae54:	f000 f8be 	bl	800afd4 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 800ae58:	4b08      	ldr	r3, [pc, #32]	; (800ae7c <HW_IPCC_SYS_EvtNot+0x40>)
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	687a      	ldr	r2, [r7, #4]
 800ae5e:	4610      	mov	r0, r2
 800ae60:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800ae62:	4805      	ldr	r0, [pc, #20]	; (800ae78 <HW_IPCC_SYS_EvtNot+0x3c>)
 800ae64:	f000 f944 	bl	800b0f0 <LST_is_empty>
 800ae68:	4603      	mov	r3, r0
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d0ea      	beq.n	800ae44 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 800ae6e:	bf00      	nop
}
 800ae70:	3708      	adds	r7, #8
 800ae72:	46bd      	mov	sp, r7
 800ae74:	bd80      	pop	{r7, pc}
 800ae76:	bf00      	nop
 800ae78:	200300d0 	.word	0x200300d0
 800ae7c:	20000d4c 	.word	0x20000d4c

0800ae80 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 800ae80:	b580      	push	{r7, lr}
 800ae82:	b082      	sub	sp, #8
 800ae84:	af00      	add	r7, sp, #0
 800ae86:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 800ae88:	4817      	ldr	r0, [pc, #92]	; (800aee8 <TL_MM_Init+0x68>)
 800ae8a:	f000 f921 	bl	800b0d0 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 800ae8e:	4817      	ldr	r0, [pc, #92]	; (800aeec <TL_MM_Init+0x6c>)
 800ae90:	f000 f91e 	bl	800b0d0 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 800ae94:	4b16      	ldr	r3, [pc, #88]	; (800aef0 <TL_MM_Init+0x70>)
 800ae96:	691b      	ldr	r3, [r3, #16]
 800ae98:	4a16      	ldr	r2, [pc, #88]	; (800aef4 <TL_MM_Init+0x74>)
 800ae9a:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 800ae9c:	4b15      	ldr	r3, [pc, #84]	; (800aef4 <TL_MM_Init+0x74>)
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	687a      	ldr	r2, [r7, #4]
 800aea2:	6892      	ldr	r2, [r2, #8]
 800aea4:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 800aea6:	4b13      	ldr	r3, [pc, #76]	; (800aef4 <TL_MM_Init+0x74>)
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	687a      	ldr	r2, [r7, #4]
 800aeac:	68d2      	ldr	r2, [r2, #12]
 800aeae:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 800aeb0:	4b10      	ldr	r3, [pc, #64]	; (800aef4 <TL_MM_Init+0x74>)
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	4a0c      	ldr	r2, [pc, #48]	; (800aee8 <TL_MM_Init+0x68>)
 800aeb6:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 800aeb8:	4b0e      	ldr	r3, [pc, #56]	; (800aef4 <TL_MM_Init+0x74>)
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	687a      	ldr	r2, [r7, #4]
 800aebe:	6812      	ldr	r2, [r2, #0]
 800aec0:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 800aec2:	4b0c      	ldr	r3, [pc, #48]	; (800aef4 <TL_MM_Init+0x74>)
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	687a      	ldr	r2, [r7, #4]
 800aec8:	6852      	ldr	r2, [r2, #4]
 800aeca:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 800aecc:	4b09      	ldr	r3, [pc, #36]	; (800aef4 <TL_MM_Init+0x74>)
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	687a      	ldr	r2, [r7, #4]
 800aed2:	6912      	ldr	r2, [r2, #16]
 800aed4:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 800aed6:	4b07      	ldr	r3, [pc, #28]	; (800aef4 <TL_MM_Init+0x74>)
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	687a      	ldr	r2, [r7, #4]
 800aedc:	6952      	ldr	r2, [r2, #20]
 800aede:	619a      	str	r2, [r3, #24]

  return;
 800aee0:	bf00      	nop
}
 800aee2:	3708      	adds	r7, #8
 800aee4:	46bd      	mov	sp, r7
 800aee6:	bd80      	pop	{r7, pc}
 800aee8:	200300b8 	.word	0x200300b8
 800aeec:	20000d38 	.word	0x20000d38
 800aef0:	20030000 	.word	0x20030000
 800aef4:	20000d50 	.word	0x20000d50

0800aef8 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 800aef8:	b580      	push	{r7, lr}
 800aefa:	b082      	sub	sp, #8
 800aefc:	af00      	add	r7, sp, #0
 800aefe:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 800af00:	6879      	ldr	r1, [r7, #4]
 800af02:	4807      	ldr	r0, [pc, #28]	; (800af20 <TL_MM_EvtDone+0x28>)
 800af04:	f000 f93c 	bl	800b180 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 800af08:	6879      	ldr	r1, [r7, #4]
 800af0a:	2000      	movs	r0, #0
 800af0c:	f000 f862 	bl	800afd4 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 800af10:	4804      	ldr	r0, [pc, #16]	; (800af24 <TL_MM_EvtDone+0x2c>)
 800af12:	f000 ff63 	bl	800bddc <HW_IPCC_MM_SendFreeBuf>

  return;
 800af16:	bf00      	nop
}
 800af18:	3708      	adds	r7, #8
 800af1a:	46bd      	mov	sp, r7
 800af1c:	bd80      	pop	{r7, pc}
 800af1e:	bf00      	nop
 800af20:	20000d38 	.word	0x20000d38
 800af24:	0800af29 	.word	0x0800af29

0800af28 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 800af28:	b580      	push	{r7, lr}
 800af2a:	b082      	sub	sp, #8
 800af2c:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800af2e:	e00c      	b.n	800af4a <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 800af30:	1d3b      	adds	r3, r7, #4
 800af32:	4619      	mov	r1, r3
 800af34:	480a      	ldr	r0, [pc, #40]	; (800af60 <SendFreeBuf+0x38>)
 800af36:	f000 f96a 	bl	800b20e <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 800af3a:	4b0a      	ldr	r3, [pc, #40]	; (800af64 <SendFreeBuf+0x3c>)
 800af3c:	691b      	ldr	r3, [r3, #16]
 800af3e:	691b      	ldr	r3, [r3, #16]
 800af40:	687a      	ldr	r2, [r7, #4]
 800af42:	4611      	mov	r1, r2
 800af44:	4618      	mov	r0, r3
 800af46:	f000 f91b 	bl	800b180 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800af4a:	4805      	ldr	r0, [pc, #20]	; (800af60 <SendFreeBuf+0x38>)
 800af4c:	f000 f8d0 	bl	800b0f0 <LST_is_empty>
 800af50:	4603      	mov	r3, r0
 800af52:	2b00      	cmp	r3, #0
 800af54:	d0ec      	beq.n	800af30 <SendFreeBuf+0x8>
  }

  return;
 800af56:	bf00      	nop
}
 800af58:	3708      	adds	r7, #8
 800af5a:	46bd      	mov	sp, r7
 800af5c:	bd80      	pop	{r7, pc}
 800af5e:	bf00      	nop
 800af60:	20000d38 	.word	0x20000d38
 800af64:	20030000 	.word	0x20030000

0800af68 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 800af68:	b580      	push	{r7, lr}
 800af6a:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 800af6c:	4805      	ldr	r0, [pc, #20]	; (800af84 <TL_TRACES_Init+0x1c>)
 800af6e:	f000 f8af 	bl	800b0d0 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 800af72:	4b05      	ldr	r3, [pc, #20]	; (800af88 <TL_TRACES_Init+0x20>)
 800af74:	695b      	ldr	r3, [r3, #20]
 800af76:	4a03      	ldr	r2, [pc, #12]	; (800af84 <TL_TRACES_Init+0x1c>)
 800af78:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 800af7a:	f000 ff65 	bl	800be48 <HW_IPCC_TRACES_Init>

  return;
 800af7e:	bf00      	nop
}
 800af80:	bd80      	pop	{r7, pc}
 800af82:	bf00      	nop
 800af84:	200300c0 	.word	0x200300c0
 800af88:	20030000 	.word	0x20030000

0800af8c <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 800af8c:	b580      	push	{r7, lr}
 800af8e:	b082      	sub	sp, #8
 800af90:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800af92:	e008      	b.n	800afa6 <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 800af94:	1d3b      	adds	r3, r7, #4
 800af96:	4619      	mov	r1, r3
 800af98:	4808      	ldr	r0, [pc, #32]	; (800afbc <HW_IPCC_TRACES_EvtNot+0x30>)
 800af9a:	f000 f938 	bl	800b20e <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	4618      	mov	r0, r3
 800afa2:	f000 f80d 	bl	800afc0 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800afa6:	4805      	ldr	r0, [pc, #20]	; (800afbc <HW_IPCC_TRACES_EvtNot+0x30>)
 800afa8:	f000 f8a2 	bl	800b0f0 <LST_is_empty>
 800afac:	4603      	mov	r3, r0
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d0f0      	beq.n	800af94 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 800afb2:	bf00      	nop
}
 800afb4:	3708      	adds	r7, #8
 800afb6:	46bd      	mov	sp, r7
 800afb8:	bd80      	pop	{r7, pc}
 800afba:	bf00      	nop
 800afbc:	200300c0 	.word	0x200300c0

0800afc0 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 800afc0:	b480      	push	{r7}
 800afc2:	b083      	sub	sp, #12
 800afc4:	af00      	add	r7, sp, #0
 800afc6:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 800afc8:	bf00      	nop
 800afca:	370c      	adds	r7, #12
 800afcc:	46bd      	mov	sp, r7
 800afce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd2:	4770      	bx	lr

0800afd4 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 800afd4:	b480      	push	{r7}
 800afd6:	b085      	sub	sp, #20
 800afd8:	af00      	add	r7, sp, #0
 800afda:	4603      	mov	r3, r0
 800afdc:	6039      	str	r1, [r7, #0]
 800afde:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 800afe0:	79fb      	ldrb	r3, [r7, #7]
 800afe2:	2b06      	cmp	r3, #6
 800afe4:	d845      	bhi.n	800b072 <OutputDbgTrace+0x9e>
 800afe6:	a201      	add	r2, pc, #4	; (adr r2, 800afec <OutputDbgTrace+0x18>)
 800afe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afec:	0800b009 	.word	0x0800b009
 800aff0:	0800b02d 	.word	0x0800b02d
 800aff4:	0800b033 	.word	0x0800b033
 800aff8:	0800b047 	.word	0x0800b047
 800affc:	0800b053 	.word	0x0800b053
 800b000:	0800b059 	.word	0x0800b059
 800b004:	0800b067 	.word	0x0800b067
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800b008:	683b      	ldr	r3, [r7, #0]
 800b00a:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	7a5b      	ldrb	r3, [r3, #9]
 800b010:	2bff      	cmp	r3, #255	; 0xff
 800b012:	d005      	beq.n	800b020 <OutputDbgTrace+0x4c>
 800b014:	2bff      	cmp	r3, #255	; 0xff
 800b016:	dc05      	bgt.n	800b024 <OutputDbgTrace+0x50>
 800b018:	2b0e      	cmp	r3, #14
 800b01a:	d005      	beq.n	800b028 <OutputDbgTrace+0x54>
 800b01c:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 800b01e:	e001      	b.n	800b024 <OutputDbgTrace+0x50>
          break;
 800b020:	bf00      	nop
 800b022:	e027      	b.n	800b074 <OutputDbgTrace+0xa0>
          break;
 800b024:	bf00      	nop
 800b026:	e025      	b.n	800b074 <OutputDbgTrace+0xa0>
          break;
 800b028:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 800b02a:	e023      	b.n	800b074 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800b02c:	683b      	ldr	r3, [r7, #0]
 800b02e:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800b030:	e020      	b.n	800b074 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800b032:	683b      	ldr	r3, [r7, #0]
 800b034:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	7a5b      	ldrb	r3, [r3, #9]
 800b03a:	2b0e      	cmp	r3, #14
 800b03c:	d001      	beq.n	800b042 <OutputDbgTrace+0x6e>
 800b03e:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800b040:	e000      	b.n	800b044 <OutputDbgTrace+0x70>
          break;
 800b042:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800b044:	e016      	b.n	800b074 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800b046:	683b      	ldr	r3, [r7, #0]
 800b048:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	7a5b      	ldrb	r3, [r3, #9]
 800b04e:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800b050:	e010      	b.n	800b074 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800b052:	683b      	ldr	r3, [r7, #0]
 800b054:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800b056:	e00d      	b.n	800b074 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800b058:	683b      	ldr	r3, [r7, #0]
 800b05a:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	7a5b      	ldrb	r3, [r3, #9]
 800b060:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800b062:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800b064:	e006      	b.n	800b074 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800b066:	683b      	ldr	r3, [r7, #0]
 800b068:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	7a5b      	ldrb	r3, [r3, #9]
 800b06e:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800b070:	e000      	b.n	800b074 <OutputDbgTrace+0xa0>

    default:
      break;
 800b072:	bf00      	nop
  }

  return;
 800b074:	bf00      	nop
}
 800b076:	3714      	adds	r7, #20
 800b078:	46bd      	mov	sp, r7
 800b07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b07e:	4770      	bx	lr

0800b080 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 800b080:	b480      	push	{r7}
 800b082:	b085      	sub	sp, #20
 800b084:	af00      	add	r7, sp, #0
 800b086:	4603      	mov	r3, r0
 800b088:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 800b08a:	4b0f      	ldr	r3, [pc, #60]	; (800b0c8 <OTP_Read+0x48>)
 800b08c:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800b08e:	e002      	b.n	800b096 <OTP_Read+0x16>
  {
    p_id -= 8 ;
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	3b08      	subs	r3, #8
 800b094:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	3307      	adds	r3, #7
 800b09a:	781b      	ldrb	r3, [r3, #0]
 800b09c:	79fa      	ldrb	r2, [r7, #7]
 800b09e:	429a      	cmp	r2, r3
 800b0a0:	d003      	beq.n	800b0aa <OTP_Read+0x2a>
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	4a09      	ldr	r2, [pc, #36]	; (800b0cc <OTP_Read+0x4c>)
 800b0a6:	4293      	cmp	r3, r2
 800b0a8:	d1f2      	bne.n	800b090 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	3307      	adds	r3, #7
 800b0ae:	781b      	ldrb	r3, [r3, #0]
 800b0b0:	79fa      	ldrb	r2, [r7, #7]
 800b0b2:	429a      	cmp	r2, r3
 800b0b4:	d001      	beq.n	800b0ba <OTP_Read+0x3a>
  {
    p_id = 0 ;
 800b0b6:	2300      	movs	r3, #0
 800b0b8:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 800b0ba:	68fb      	ldr	r3, [r7, #12]
}
 800b0bc:	4618      	mov	r0, r3
 800b0be:	3714      	adds	r7, #20
 800b0c0:	46bd      	mov	sp, r7
 800b0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c6:	4770      	bx	lr
 800b0c8:	1fff73f8 	.word	0x1fff73f8
 800b0cc:	1fff7000 	.word	0x1fff7000

0800b0d0 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 800b0d0:	b480      	push	{r7}
 800b0d2:	b083      	sub	sp, #12
 800b0d4:	af00      	add	r7, sp, #0
 800b0d6:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	687a      	ldr	r2, [r7, #4]
 800b0dc:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	687a      	ldr	r2, [r7, #4]
 800b0e2:	605a      	str	r2, [r3, #4]
}
 800b0e4:	bf00      	nop
 800b0e6:	370c      	adds	r7, #12
 800b0e8:	46bd      	mov	sp, r7
 800b0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ee:	4770      	bx	lr

0800b0f0 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 800b0f0:	b480      	push	{r7}
 800b0f2:	b087      	sub	sp, #28
 800b0f4:	af00      	add	r7, sp, #0
 800b0f6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b0f8:	f3ef 8310 	mrs	r3, PRIMASK
 800b0fc:	60fb      	str	r3, [r7, #12]
  return(result);
 800b0fe:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800b100:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800b102:	b672      	cpsid	i
}
 800b104:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	687a      	ldr	r2, [r7, #4]
 800b10c:	429a      	cmp	r2, r3
 800b10e:	d102      	bne.n	800b116 <LST_is_empty+0x26>
  {
    return_value = TRUE;
 800b110:	2301      	movs	r3, #1
 800b112:	75fb      	strb	r3, [r7, #23]
 800b114:	e001      	b.n	800b11a <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 800b116:	2300      	movs	r3, #0
 800b118:	75fb      	strb	r3, [r7, #23]
 800b11a:	693b      	ldr	r3, [r7, #16]
 800b11c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b11e:	68bb      	ldr	r3, [r7, #8]
 800b120:	f383 8810 	msr	PRIMASK, r3
}
 800b124:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 800b126:	7dfb      	ldrb	r3, [r7, #23]
}
 800b128:	4618      	mov	r0, r3
 800b12a:	371c      	adds	r7, #28
 800b12c:	46bd      	mov	sp, r7
 800b12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b132:	4770      	bx	lr

0800b134 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 800b134:	b480      	push	{r7}
 800b136:	b087      	sub	sp, #28
 800b138:	af00      	add	r7, sp, #0
 800b13a:	6078      	str	r0, [r7, #4]
 800b13c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b13e:	f3ef 8310 	mrs	r3, PRIMASK
 800b142:	60fb      	str	r3, [r7, #12]
  return(result);
 800b144:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800b146:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b148:	b672      	cpsid	i
}
 800b14a:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	681a      	ldr	r2, [r3, #0]
 800b150:	683b      	ldr	r3, [r7, #0]
 800b152:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800b154:	683b      	ldr	r3, [r7, #0]
 800b156:	687a      	ldr	r2, [r7, #4]
 800b158:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	683a      	ldr	r2, [r7, #0]
 800b15e:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800b160:	683b      	ldr	r3, [r7, #0]
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	683a      	ldr	r2, [r7, #0]
 800b166:	605a      	str	r2, [r3, #4]
 800b168:	697b      	ldr	r3, [r7, #20]
 800b16a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b16c:	693b      	ldr	r3, [r7, #16]
 800b16e:	f383 8810 	msr	PRIMASK, r3
}
 800b172:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800b174:	bf00      	nop
 800b176:	371c      	adds	r7, #28
 800b178:	46bd      	mov	sp, r7
 800b17a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b17e:	4770      	bx	lr

0800b180 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 800b180:	b480      	push	{r7}
 800b182:	b087      	sub	sp, #28
 800b184:	af00      	add	r7, sp, #0
 800b186:	6078      	str	r0, [r7, #4]
 800b188:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b18a:	f3ef 8310 	mrs	r3, PRIMASK
 800b18e:	60fb      	str	r3, [r7, #12]
  return(result);
 800b190:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800b192:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b194:	b672      	cpsid	i
}
 800b196:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 800b198:	683b      	ldr	r3, [r7, #0]
 800b19a:	687a      	ldr	r2, [r7, #4]
 800b19c:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	685a      	ldr	r2, [r3, #4]
 800b1a2:	683b      	ldr	r3, [r7, #0]
 800b1a4:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	683a      	ldr	r2, [r7, #0]
 800b1aa:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800b1ac:	683b      	ldr	r3, [r7, #0]
 800b1ae:	685b      	ldr	r3, [r3, #4]
 800b1b0:	683a      	ldr	r2, [r7, #0]
 800b1b2:	601a      	str	r2, [r3, #0]
 800b1b4:	697b      	ldr	r3, [r7, #20]
 800b1b6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b1b8:	693b      	ldr	r3, [r7, #16]
 800b1ba:	f383 8810 	msr	PRIMASK, r3
}
 800b1be:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800b1c0:	bf00      	nop
 800b1c2:	371c      	adds	r7, #28
 800b1c4:	46bd      	mov	sp, r7
 800b1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ca:	4770      	bx	lr

0800b1cc <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 800b1cc:	b480      	push	{r7}
 800b1ce:	b087      	sub	sp, #28
 800b1d0:	af00      	add	r7, sp, #0
 800b1d2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b1d4:	f3ef 8310 	mrs	r3, PRIMASK
 800b1d8:	60fb      	str	r3, [r7, #12]
  return(result);
 800b1da:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800b1dc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b1de:	b672      	cpsid	i
}
 800b1e0:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	685b      	ldr	r3, [r3, #4]
 800b1e6:	687a      	ldr	r2, [r7, #4]
 800b1e8:	6812      	ldr	r2, [r2, #0]
 800b1ea:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	687a      	ldr	r2, [r7, #4]
 800b1f2:	6852      	ldr	r2, [r2, #4]
 800b1f4:	605a      	str	r2, [r3, #4]
 800b1f6:	697b      	ldr	r3, [r7, #20]
 800b1f8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b1fa:	693b      	ldr	r3, [r7, #16]
 800b1fc:	f383 8810 	msr	PRIMASK, r3
}
 800b200:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800b202:	bf00      	nop
 800b204:	371c      	adds	r7, #28
 800b206:	46bd      	mov	sp, r7
 800b208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b20c:	4770      	bx	lr

0800b20e <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800b20e:	b580      	push	{r7, lr}
 800b210:	b086      	sub	sp, #24
 800b212:	af00      	add	r7, sp, #0
 800b214:	6078      	str	r0, [r7, #4]
 800b216:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b218:	f3ef 8310 	mrs	r3, PRIMASK
 800b21c:	60fb      	str	r3, [r7, #12]
  return(result);
 800b21e:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800b220:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b222:	b672      	cpsid	i
}
 800b224:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	681a      	ldr	r2, [r3, #0]
 800b22a:	683b      	ldr	r3, [r7, #0]
 800b22c:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	4618      	mov	r0, r3
 800b234:	f7ff ffca 	bl	800b1cc <LST_remove_node>
 800b238:	697b      	ldr	r3, [r7, #20]
 800b23a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b23c:	693b      	ldr	r3, [r7, #16]
 800b23e:	f383 8810 	msr	PRIMASK, r3
}
 800b242:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800b244:	bf00      	nop
 800b246:	3718      	adds	r7, #24
 800b248:	46bd      	mov	sp, r7
 800b24a:	bd80      	pop	{r7, pc}

0800b24c <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 800b24c:	b480      	push	{r7}
 800b24e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 800b250:	4b03      	ldr	r3, [pc, #12]	; (800b260 <LL_FLASH_GetUDN+0x14>)
 800b252:	681b      	ldr	r3, [r3, #0]
}
 800b254:	4618      	mov	r0, r3
 800b256:	46bd      	mov	sp, r7
 800b258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b25c:	4770      	bx	lr
 800b25e:	bf00      	nop
 800b260:	1fff7580 	.word	0x1fff7580

0800b264 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 800b264:	b480      	push	{r7}
 800b266:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 800b268:	4b03      	ldr	r3, [pc, #12]	; (800b278 <LL_FLASH_GetDeviceID+0x14>)
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	b2db      	uxtb	r3, r3
}
 800b26e:	4618      	mov	r0, r3
 800b270:	46bd      	mov	sp, r7
 800b272:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b276:	4770      	bx	lr
 800b278:	1fff7584 	.word	0x1fff7584

0800b27c <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 800b27c:	b480      	push	{r7}
 800b27e:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 800b280:	4b03      	ldr	r3, [pc, #12]	; (800b290 <LL_FLASH_GetSTCompanyID+0x14>)
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	0a1b      	lsrs	r3, r3, #8
}
 800b286:	4618      	mov	r0, r3
 800b288:	46bd      	mov	sp, r7
 800b28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b28e:	4770      	bx	lr
 800b290:	1fff7584 	.word	0x1fff7584

0800b294 <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 800b294:	b5b0      	push	{r4, r5, r7, lr}
 800b296:	b090      	sub	sp, #64	; 0x40
 800b298:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
#if (RADIO_ACTIVITY_EVENT != 0)
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800b29a:	2392      	movs	r3, #146	; 0x92
 800b29c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#endif /* RADIO_ACTIVITY_EVENT != 0 */
  /* USER CODE BEGIN APP_BLE_Init_1 */

  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 800b2a0:	4b25      	ldr	r3, [pc, #148]	; (800b338 <APP_BLE_Init+0xa4>)
 800b2a2:	1d3c      	adds	r4, r7, #4
 800b2a4:	461d      	mov	r5, r3
 800b2a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b2a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b2aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b2ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b2ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b2b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b2b2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800b2b6:	c403      	stmia	r4!, {r0, r1}
 800b2b8:	8022      	strh	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 800b2ba:	f000 f905 	bl	800b4c8 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 800b2be:	2101      	movs	r1, #1
 800b2c0:	2002      	movs	r0, #2
 800b2c2:	f000 fde9 	bl	800be98 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 800b2c6:	4a1d      	ldr	r2, [pc, #116]	; (800b33c <APP_BLE_Init+0xa8>)
 800b2c8:	2100      	movs	r1, #0
 800b2ca:	2002      	movs	r0, #2
 800b2cc:	f000 ff10 	bl	800c0f0 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 800b2d0:	1d3b      	adds	r3, r7, #4
 800b2d2:	4618      	mov	r0, r3
 800b2d4:	f7ff f8d0 	bl	800a478 <SHCI_C2_BLE_Init>
 800b2d8:	4603      	mov	r3, r0
 800b2da:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  if (status != SHCI_Success)
 800b2de:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d001      	beq.n	800b2ea <APP_BLE_Init+0x56>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 800b2e6:	f7f7 fb7d 	bl	80029e4 <Error_Handler>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 800b2ea:	f000 f903 	bl	800b4f4 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 800b2ee:	f7ff f81d 	bl	800a32c <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800b2f2:	4b13      	ldr	r3, [pc, #76]	; (800b340 <APP_BLE_Init+0xac>)
 800b2f4:	2200      	movs	r2, #0
 800b2f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 800b2fa:	4b11      	ldr	r3, [pc, #68]	; (800b340 <APP_BLE_Init+0xac>)
 800b2fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b300:	82da      	strh	r2, [r3, #22]

  /**
   * From here, all initialization are BLE application specific
   */

  UTIL_SEQ_RegTask(1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 800b302:	4a10      	ldr	r2, [pc, #64]	; (800b344 <APP_BLE_Init+0xb0>)
 800b304:	2100      	movs	r1, #0
 800b306:	2001      	movs	r0, #1
 800b308:	f000 fef2 	bl	800c0f0 <UTIL_SEQ_RegTask>

  /**
   * Initialization of ADV - Ad Manufacturer Element - Support OTA Bit Mask
   */
#if (RADIO_ACTIVITY_EVENT != 0)
  ret = aci_hal_set_radio_activity_mask(0x0006);
 800b30c:	2006      	movs	r0, #6
 800b30e:	f7fe fe80 	bl	800a012 <aci_hal_set_radio_activity_mask>
 800b312:	4603      	mov	r3, r0
 800b314:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

  /**
   * Initialize Custom Template Application
   */
  Custom_APP_Init();
 800b318:	f000 fa9b 	bl	800b852 <Custom_APP_Init>
  /* USER CODE END APP_BLE_Init_3 */

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 800b31c:	4b08      	ldr	r3, [pc, #32]	; (800b340 <APP_BLE_Init+0xac>)
 800b31e:	2200      	movs	r2, #0
 800b320:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 800b322:	4b07      	ldr	r3, [pc, #28]	; (800b340 <APP_BLE_Init+0xac>)
 800b324:	2200      	movs	r2, #0
 800b326:	761a      	strb	r2, [r3, #24]

  /**
   * Start to Advertise to be connected by a Client
   */
  Adv_Request(APP_BLE_FAST_ADV);
 800b328:	2001      	movs	r0, #1
 800b32a:	f000 f997 	bl	800b65c <Adv_Request>

  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */

  return;
 800b32e:	bf00      	nop
}
 800b330:	3740      	adds	r7, #64	; 0x40
 800b332:	46bd      	mov	sp, r7
 800b334:	bdb0      	pop	{r4, r5, r7, pc}
 800b336:	bf00      	nop
 800b338:	0800d988 	.word	0x0800d988
 800b33c:	0800a695 	.word	0x0800a695
 800b340:	20000d5c 	.word	0x20000d5c
 800b344:	0800b745 	.word	0x0800b745

0800b348 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 800b348:	b580      	push	{r7, lr}
 800b34a:	b08a      	sub	sp, #40	; 0x28
 800b34c:	af00      	add	r7, sp, #0
 800b34e:	6078      	str	r0, [r7, #4]
  hci_event_pckt    *p_event_pckt;
  evt_le_meta_event *p_meta_evt;
  evt_blecore_aci   *p_blecore_evt;
  tBleStatus        ret = BLE_STATUS_INVALID_PARAMS;
 800b350:	2392      	movs	r3, #146	; 0x92
 800b352:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	3301      	adds	r3, #1
 800b35a:	623b      	str	r3, [r7, #32]

  switch (p_event_pckt->evt)
 800b35c:	6a3b      	ldr	r3, [r7, #32]
 800b35e:	781b      	ldrb	r3, [r3, #0]
 800b360:	2bff      	cmp	r3, #255	; 0xff
 800b362:	d053      	beq.n	800b40c <SVCCTL_App_Notification+0xc4>
 800b364:	2bff      	cmp	r3, #255	; 0xff
 800b366:	f300 80a1 	bgt.w	800b4ac <SVCCTL_App_Notification+0x164>
 800b36a:	2b05      	cmp	r3, #5
 800b36c:	d002      	beq.n	800b374 <SVCCTL_App_Notification+0x2c>
 800b36e:	2b3e      	cmp	r3, #62	; 0x3e
 800b370:	d020      	beq.n	800b3b4 <SVCCTL_App_Notification+0x6c>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 800b372:	e09b      	b.n	800b4ac <SVCCTL_App_Notification+0x164>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
 800b374:	6a3b      	ldr	r3, [r7, #32]
 800b376:	3302      	adds	r3, #2
 800b378:	60fb      	str	r3, [r7, #12]
      if (p_disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800b380:	b29a      	uxth	r2, r3
 800b382:	4b4e      	ldr	r3, [pc, #312]	; (800b4bc <SVCCTL_App_Notification+0x174>)
 800b384:	8adb      	ldrh	r3, [r3, #22]
 800b386:	429a      	cmp	r2, r3
 800b388:	d106      	bne.n	800b398 <SVCCTL_App_Notification+0x50>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 800b38a:	4b4c      	ldr	r3, [pc, #304]	; (800b4bc <SVCCTL_App_Notification+0x174>)
 800b38c:	2200      	movs	r2, #0
 800b38e:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800b390:	4b4a      	ldr	r3, [pc, #296]	; (800b4bc <SVCCTL_App_Notification+0x174>)
 800b392:	2200      	movs	r2, #0
 800b394:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
      Adv_Request(APP_BLE_FAST_ADV);
 800b398:	2001      	movs	r0, #1
 800b39a:	f000 f95f 	bl	800b65c <Adv_Request>
      HandleNotification.Custom_Evt_Opcode = CUSTOM_DISCON_HANDLE_EVT;
 800b39e:	4b48      	ldr	r3, [pc, #288]	; (800b4c0 <SVCCTL_App_Notification+0x178>)
 800b3a0:	2201      	movs	r2, #1
 800b3a2:	701a      	strb	r2, [r3, #0]
      HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800b3a4:	4b45      	ldr	r3, [pc, #276]	; (800b4bc <SVCCTL_App_Notification+0x174>)
 800b3a6:	8ada      	ldrh	r2, [r3, #22]
 800b3a8:	4b45      	ldr	r3, [pc, #276]	; (800b4c0 <SVCCTL_App_Notification+0x178>)
 800b3aa:	805a      	strh	r2, [r3, #2]
      Custom_APP_Notification(&HandleNotification);
 800b3ac:	4844      	ldr	r0, [pc, #272]	; (800b4c0 <SVCCTL_App_Notification+0x178>)
 800b3ae:	f000 fa3c 	bl	800b82a <Custom_APP_Notification>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 800b3b2:	e07e      	b.n	800b4b2 <SVCCTL_App_Notification+0x16a>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 800b3b4:	6a3b      	ldr	r3, [r7, #32]
 800b3b6:	3302      	adds	r3, #2
 800b3b8:	617b      	str	r3, [r7, #20]
      switch (p_meta_evt->subevent)
 800b3ba:	697b      	ldr	r3, [r7, #20]
 800b3bc:	781b      	ldrb	r3, [r3, #0]
 800b3be:	2b01      	cmp	r3, #1
 800b3c0:	d001      	beq.n	800b3c6 <SVCCTL_App_Notification+0x7e>
 800b3c2:	2b03      	cmp	r3, #3
          break;
 800b3c4:	e021      	b.n	800b40a <SVCCTL_App_Notification+0xc2>
          p_connection_complete_event = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
 800b3c6:	697b      	ldr	r3, [r7, #20]
 800b3c8:	3301      	adds	r3, #1
 800b3ca:	613b      	str	r3, [r7, #16]
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 800b3cc:	4b3b      	ldr	r3, [pc, #236]	; (800b4bc <SVCCTL_App_Notification+0x174>)
 800b3ce:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b3d2:	2b04      	cmp	r3, #4
 800b3d4:	d104      	bne.n	800b3e0 <SVCCTL_App_Notification+0x98>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 800b3d6:	4b39      	ldr	r3, [pc, #228]	; (800b4bc <SVCCTL_App_Notification+0x174>)
 800b3d8:	2206      	movs	r2, #6
 800b3da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 800b3de:	e003      	b.n	800b3e8 <SVCCTL_App_Notification+0xa0>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 800b3e0:	4b36      	ldr	r3, [pc, #216]	; (800b4bc <SVCCTL_App_Notification+0x174>)
 800b3e2:	2205      	movs	r2, #5
 800b3e4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_connection_complete_event->Connection_Handle;
 800b3e8:	693b      	ldr	r3, [r7, #16]
 800b3ea:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800b3ee:	b29a      	uxth	r2, r3
 800b3f0:	4b32      	ldr	r3, [pc, #200]	; (800b4bc <SVCCTL_App_Notification+0x174>)
 800b3f2:	82da      	strh	r2, [r3, #22]
          HandleNotification.Custom_Evt_Opcode = CUSTOM_CONN_HANDLE_EVT;
 800b3f4:	4b32      	ldr	r3, [pc, #200]	; (800b4c0 <SVCCTL_App_Notification+0x178>)
 800b3f6:	2200      	movs	r2, #0
 800b3f8:	701a      	strb	r2, [r3, #0]
          HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800b3fa:	4b30      	ldr	r3, [pc, #192]	; (800b4bc <SVCCTL_App_Notification+0x174>)
 800b3fc:	8ada      	ldrh	r2, [r3, #22]
 800b3fe:	4b30      	ldr	r3, [pc, #192]	; (800b4c0 <SVCCTL_App_Notification+0x178>)
 800b400:	805a      	strh	r2, [r3, #2]
          Custom_APP_Notification(&HandleNotification);
 800b402:	482f      	ldr	r0, [pc, #188]	; (800b4c0 <SVCCTL_App_Notification+0x178>)
 800b404:	f000 fa11 	bl	800b82a <Custom_APP_Notification>
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 800b408:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 800b40a:	e052      	b.n	800b4b2 <SVCCTL_App_Notification+0x16a>
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 800b40c:	6a3b      	ldr	r3, [r7, #32]
 800b40e:	3302      	adds	r3, #2
 800b410:	61fb      	str	r3, [r7, #28]
      switch (p_blecore_evt->ecode)
 800b412:	69fb      	ldr	r3, [r7, #28]
 800b414:	881b      	ldrh	r3, [r3, #0]
 800b416:	b29b      	uxth	r3, r3
 800b418:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b41c:	d040      	beq.n	800b4a0 <SVCCTL_App_Notification+0x158>
 800b41e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b422:	dc45      	bgt.n	800b4b0 <SVCCTL_App_Notification+0x168>
 800b424:	2b04      	cmp	r3, #4
 800b426:	d03d      	beq.n	800b4a4 <SVCCTL_App_Notification+0x15c>
 800b428:	2b04      	cmp	r3, #4
 800b42a:	db41      	blt.n	800b4b0 <SVCCTL_App_Notification+0x168>
 800b42c:	f240 420a 	movw	r2, #1034	; 0x40a
 800b430:	4293      	cmp	r3, r2
 800b432:	dc3d      	bgt.n	800b4b0 <SVCCTL_App_Notification+0x168>
 800b434:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b438:	dd3a      	ble.n	800b4b0 <SVCCTL_App_Notification+0x168>
 800b43a:	f2a3 4301 	subw	r3, r3, #1025	; 0x401
 800b43e:	2b09      	cmp	r3, #9
 800b440:	d836      	bhi.n	800b4b0 <SVCCTL_App_Notification+0x168>
 800b442:	a201      	add	r2, pc, #4	; (adr r2, 800b448 <SVCCTL_App_Notification+0x100>)
 800b444:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b448:	0800b499 	.word	0x0800b499
 800b44c:	0800b471 	.word	0x0800b471
 800b450:	0800b4b1 	.word	0x0800b4b1
 800b454:	0800b4b1 	.word	0x0800b4b1
 800b458:	0800b4b1 	.word	0x0800b4b1
 800b45c:	0800b4b1 	.word	0x0800b4b1
 800b460:	0800b4a9 	.word	0x0800b4a9
 800b464:	0800b4b1 	.word	0x0800b4b1
 800b468:	0800b485 	.word	0x0800b485
 800b46c:	0800b4a9 	.word	0x0800b4a9
          ret = aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, CFG_FIXED_PIN);
 800b470:	4b12      	ldr	r3, [pc, #72]	; (800b4bc <SVCCTL_App_Notification+0x174>)
 800b472:	8adb      	ldrh	r3, [r3, #22]
 800b474:	4913      	ldr	r1, [pc, #76]	; (800b4c4 <SVCCTL_App_Notification+0x17c>)
 800b476:	4618      	mov	r0, r3
 800b478:	f7fe f822 	bl	80094c0 <aci_gap_pass_key_resp>
 800b47c:	4603      	mov	r3, r0
 800b47e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          break;
 800b482:	e012      	b.n	800b4aa <SVCCTL_App_Notification+0x162>
          ret = aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES);
 800b484:	4b0d      	ldr	r3, [pc, #52]	; (800b4bc <SVCCTL_App_Notification+0x174>)
 800b486:	8adb      	ldrh	r3, [r3, #22]
 800b488:	2101      	movs	r1, #1
 800b48a:	4618      	mov	r0, r3
 800b48c:	f7fe f9c2 	bl	8009814 <aci_gap_numeric_comparison_value_confirm_yesno>
 800b490:	4603      	mov	r3, r0
 800b492:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          break;
 800b496:	e008      	b.n	800b4aa <SVCCTL_App_Notification+0x162>
          p_pairing_complete = (aci_gap_pairing_complete_event_rp0*)p_blecore_evt->data;
 800b498:	69fb      	ldr	r3, [r7, #28]
 800b49a:	3302      	adds	r3, #2
 800b49c:	61bb      	str	r3, [r7, #24]
          break;
 800b49e:	e004      	b.n	800b4aa <SVCCTL_App_Notification+0x162>
          break;
 800b4a0:	bf00      	nop
 800b4a2:	e005      	b.n	800b4b0 <SVCCTL_App_Notification+0x168>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 800b4a4:	bf00      	nop
 800b4a6:	e003      	b.n	800b4b0 <SVCCTL_App_Notification+0x168>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 800b4a8:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800b4aa:	e001      	b.n	800b4b0 <SVCCTL_App_Notification+0x168>
      break;
 800b4ac:	bf00      	nop
 800b4ae:	e000      	b.n	800b4b2 <SVCCTL_App_Notification+0x16a>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800b4b0:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 800b4b2:	2301      	movs	r3, #1
}
 800b4b4:	4618      	mov	r0, r3
 800b4b6:	3728      	adds	r7, #40	; 0x28
 800b4b8:	46bd      	mov	sp, r7
 800b4ba:	bd80      	pop	{r7, pc}
 800b4bc:	20000d5c 	.word	0x20000d5c
 800b4c0:	20000de0 	.word	0x20000de0
 800b4c4:	0001b207 	.word	0x0001b207

0800b4c8 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 800b4c8:	b580      	push	{r7, lr}
 800b4ca:	b082      	sub	sp, #8
 800b4cc:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 800b4ce:	4b06      	ldr	r3, [pc, #24]	; (800b4e8 <Ble_Tl_Init+0x20>)
 800b4d0:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 800b4d2:	4b06      	ldr	r3, [pc, #24]	; (800b4ec <Ble_Tl_Init+0x24>)
 800b4d4:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 800b4d6:	463b      	mov	r3, r7
 800b4d8:	4619      	mov	r1, r3
 800b4da:	4805      	ldr	r0, [pc, #20]	; (800b4f0 <Ble_Tl_Init+0x28>)
 800b4dc:	f7ff f8be 	bl	800a65c <hci_init>

  return;
 800b4e0:	bf00      	nop
}
 800b4e2:	3708      	adds	r7, #8
 800b4e4:	46bd      	mov	sp, r7
 800b4e6:	bd80      	pop	{r7, pc}
 800b4e8:	200300d8 	.word	0x200300d8
 800b4ec:	0800b7f5 	.word	0x0800b7f5
 800b4f0:	0800b7bd 	.word	0x0800b7bd

0800b4f4 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 800b4f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b4f6:	b08d      	sub	sp, #52	; 0x34
 800b4f8:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 800b4fa:	2300      	movs	r3, #0
 800b4fc:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800b4fe:	2392      	movs	r3, #146	; 0x92
 800b500:	75fb      	strb	r3, [r7, #23]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 800b502:	f7fe fdda 	bl	800a0ba <hci_reset>
 800b506:	4603      	mov	r3, r0
 800b508:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 800b50a:	f000 f8d7 	bl	800b6bc <BleGetBdAddress>
 800b50e:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 800b510:	693a      	ldr	r2, [r7, #16]
 800b512:	2106      	movs	r1, #6
 800b514:	2000      	movs	r0, #0
 800b516:	f7fe fc90 	bl	8009e3a <aci_hal_write_config_data>
 800b51a:	4603      	mov	r3, r0
 800b51c:	75fb      	strb	r3, [r7, #23]
#endif /* CFG_BLE_ADDRESS_TYPE != GAP_PUBLIC_ADDR */

  /**
   * Write Identity root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 800b51e:	4a4a      	ldr	r2, [pc, #296]	; (800b648 <Ble_Hci_Gap_Gatt_Init+0x154>)
 800b520:	2110      	movs	r1, #16
 800b522:	2018      	movs	r0, #24
 800b524:	f7fe fc89 	bl	8009e3a <aci_hal_write_config_data>
 800b528:	4603      	mov	r3, r0
 800b52a:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 800b52c:	4a47      	ldr	r2, [pc, #284]	; (800b64c <Ble_Hci_Gap_Gatt_Init+0x158>)
 800b52e:	2110      	movs	r1, #16
 800b530:	2008      	movs	r0, #8
 800b532:	f7fe fc82 	bl	8009e3a <aci_hal_write_config_data>
 800b536:	4603      	mov	r3, r0
 800b538:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 800b53a:	2118      	movs	r1, #24
 800b53c:	2001      	movs	r0, #1
 800b53e:	f7fe fd01 	bl	8009f44 <aci_hal_set_tx_power_level>
 800b542:	4603      	mov	r3, r0
 800b544:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 800b546:	f7fe f9cc 	bl	80098e2 <aci_gatt_init>
 800b54a:	4603      	mov	r3, r0
 800b54c:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 800b54e:	2300      	movs	r3, #0
 800b550:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 800b552:	7bfb      	ldrb	r3, [r7, #15]
 800b554:	f043 0301 	orr.w	r3, r3, #1
 800b558:	73fb      	strb	r3, [r7, #15]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  if (role > 0)
 800b55a:	7bfb      	ldrb	r3, [r7, #15]
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d01f      	beq.n	800b5a0 <Ble_Hci_Gap_Gatt_Init+0xac>
  {
    const char *name = CFG_GAP_DEVICE_NAME;
 800b560:	4b3b      	ldr	r3, [pc, #236]	; (800b650 <Ble_Hci_Gap_Gatt_Init+0x15c>)
 800b562:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 800b564:	1dba      	adds	r2, r7, #6
 800b566:	7bf8      	ldrb	r0, [r7, #15]
 800b568:	1cbb      	adds	r3, r7, #2
 800b56a:	9301      	str	r3, [sp, #4]
 800b56c:	1d3b      	adds	r3, r7, #4
 800b56e:	9300      	str	r3, [sp, #0]
 800b570:	4613      	mov	r3, r2
 800b572:	2208      	movs	r2, #8
 800b574:	2100      	movs	r1, #0
 800b576:	f7fe f80a 	bl	800958e <aci_gap_init>
 800b57a:	4603      	mov	r3, r0
 800b57c:	75fb      	strb	r3, [r7, #23]
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 800b57e:	88fc      	ldrh	r4, [r7, #6]
 800b580:	88bd      	ldrh	r5, [r7, #4]
 800b582:	68b8      	ldr	r0, [r7, #8]
 800b584:	f7f4 fdfc 	bl	8000180 <strlen>
 800b588:	4603      	mov	r3, r0
 800b58a:	b2da      	uxtb	r2, r3
 800b58c:	68bb      	ldr	r3, [r7, #8]
 800b58e:	9300      	str	r3, [sp, #0]
 800b590:	4613      	mov	r3, r2
 800b592:	2200      	movs	r2, #0
 800b594:	4629      	mov	r1, r5
 800b596:	4620      	mov	r0, r4
 800b598:	f7fe fba6 	bl	8009ce8 <aci_gatt_update_char_value>
 800b59c:	4603      	mov	r3, r0
 800b59e:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 800b5a0:	88f8      	ldrh	r0, [r7, #6]
 800b5a2:	8879      	ldrh	r1, [r7, #2]
 800b5a4:	463b      	mov	r3, r7
 800b5a6:	9300      	str	r3, [sp, #0]
 800b5a8:	2302      	movs	r3, #2
 800b5aa:	2200      	movs	r2, #0
 800b5ac:	f7fe fb9c 	bl	8009ce8 <aci_gatt_update_char_value>
 800b5b0:	4603      	mov	r3, r0
 800b5b2:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize Default PHY
   */
  ret = hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 800b5b4:	2202      	movs	r2, #2
 800b5b6:	2102      	movs	r1, #2
 800b5b8:	2000      	movs	r0, #0
 800b5ba:	f7fe fda2 	bl	800a102 <hci_le_set_default_phy>
 800b5be:	4603      	mov	r3, r0
 800b5c0:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 800b5c2:	4b24      	ldr	r3, [pc, #144]	; (800b654 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800b5c4:	2201      	movs	r2, #1
 800b5c6:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 800b5c8:	4b22      	ldr	r3, [pc, #136]	; (800b654 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800b5ca:	781b      	ldrb	r3, [r3, #0]
 800b5cc:	4618      	mov	r0, r3
 800b5ce:	f7fd fe5f 	bl	8009290 <aci_gap_set_io_capability>
 800b5d2:	4603      	mov	r3, r0
 800b5d4:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 800b5d6:	4b1f      	ldr	r3, [pc, #124]	; (800b654 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800b5d8:	2201      	movs	r2, #1
 800b5da:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 800b5dc:	4b1d      	ldr	r3, [pc, #116]	; (800b654 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800b5de:	2208      	movs	r2, #8
 800b5e0:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 800b5e2:	4b1c      	ldr	r3, [pc, #112]	; (800b654 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800b5e4:	2210      	movs	r2, #16
 800b5e6:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 800b5e8:	4b1a      	ldr	r3, [pc, #104]	; (800b654 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800b5ea:	2200      	movs	r2, #0
 800b5ec:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 800b5ee:	4b19      	ldr	r3, [pc, #100]	; (800b654 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800b5f0:	4a19      	ldr	r2, [pc, #100]	; (800b658 <Ble_Hci_Gap_Gatt_Init+0x164>)
 800b5f2:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 800b5f4:	4b17      	ldr	r3, [pc, #92]	; (800b654 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800b5f6:	2200      	movs	r2, #0
 800b5f8:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 800b5fa:	4b16      	ldr	r3, [pc, #88]	; (800b654 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800b5fc:	789c      	ldrb	r4, [r3, #2]
 800b5fe:	4b15      	ldr	r3, [pc, #84]	; (800b654 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800b600:	785d      	ldrb	r5, [r3, #1]
 800b602:	4b14      	ldr	r3, [pc, #80]	; (800b654 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800b604:	791b      	ldrb	r3, [r3, #4]
 800b606:	4a13      	ldr	r2, [pc, #76]	; (800b654 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800b608:	7952      	ldrb	r2, [r2, #5]
 800b60a:	4912      	ldr	r1, [pc, #72]	; (800b654 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800b60c:	78c9      	ldrb	r1, [r1, #3]
 800b60e:	4811      	ldr	r0, [pc, #68]	; (800b654 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800b610:	6880      	ldr	r0, [r0, #8]
 800b612:	2600      	movs	r6, #0
 800b614:	9604      	str	r6, [sp, #16]
 800b616:	9003      	str	r0, [sp, #12]
 800b618:	9102      	str	r1, [sp, #8]
 800b61a:	9201      	str	r2, [sp, #4]
 800b61c:	9300      	str	r3, [sp, #0]
 800b61e:	2300      	movs	r3, #0
 800b620:	2201      	movs	r2, #1
 800b622:	4629      	mov	r1, r5
 800b624:	4620      	mov	r0, r4
 800b626:	f7fd fe87 	bl	8009338 <aci_gap_set_authentication_requirement>
 800b62a:	4603      	mov	r3, r0
 800b62c:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 800b62e:	4b09      	ldr	r3, [pc, #36]	; (800b654 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800b630:	789b      	ldrb	r3, [r3, #2]
 800b632:	2b00      	cmp	r3, #0
 800b634:	d003      	beq.n	800b63e <Ble_Hci_Gap_Gatt_Init+0x14a>
  {
    ret = aci_gap_configure_whitelist();
 800b636:	f7fe f8c9 	bl	80097cc <aci_gap_configure_whitelist>
 800b63a:	4603      	mov	r3, r0
 800b63c:	75fb      	strb	r3, [r7, #23]
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
}
 800b63e:	bf00      	nop
 800b640:	371c      	adds	r7, #28
 800b642:	46bd      	mov	sp, r7
 800b644:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b646:	bf00      	nop
 800b648:	0800dbd0 	.word	0x0800dbd0
 800b64c:	0800dbe0 	.word	0x0800dbe0
 800b650:	0800d9c4 	.word	0x0800d9c4
 800b654:	20000d5c 	.word	0x20000d5c
 800b658:	0001b207 	.word	0x0001b207

0800b65c <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t NewStatus)
{
 800b65c:	b580      	push	{r7, lr}
 800b65e:	b08c      	sub	sp, #48	; 0x30
 800b660:	af08      	add	r7, sp, #32
 800b662:	4603      	mov	r3, r0
 800b664:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800b666:	2392      	movs	r3, #146	; 0x92
 800b668:	73fb      	strb	r3, [r7, #15]

  BleApplicationContext.Device_Connection_Status = NewStatus;
 800b66a:	4a12      	ldr	r2, [pc, #72]	; (800b6b4 <Adv_Request+0x58>)
 800b66c:	79fb      	ldrb	r3, [r7, #7]
 800b66e:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
  /* Start Fast or Low Power Advertising */
  ret = aci_gap_set_discoverable(ADV_TYPE,
 800b672:	2300      	movs	r3, #0
 800b674:	9306      	str	r3, [sp, #24]
 800b676:	2300      	movs	r3, #0
 800b678:	9305      	str	r3, [sp, #20]
 800b67a:	2300      	movs	r3, #0
 800b67c:	9304      	str	r3, [sp, #16]
 800b67e:	2300      	movs	r3, #0
 800b680:	9303      	str	r3, [sp, #12]
 800b682:	2300      	movs	r3, #0
 800b684:	9302      	str	r3, [sp, #8]
 800b686:	2300      	movs	r3, #0
 800b688:	9301      	str	r3, [sp, #4]
 800b68a:	2300      	movs	r3, #0
 800b68c:	9300      	str	r3, [sp, #0]
 800b68e:	2300      	movs	r3, #0
 800b690:	22a0      	movs	r2, #160	; 0xa0
 800b692:	2180      	movs	r1, #128	; 0x80
 800b694:	2000      	movs	r0, #0
 800b696:	f7fd fd01 	bl	800909c <aci_gap_set_discoverable>
 800b69a:	4603      	mov	r3, r0
 800b69c:	73fb      	strb	r3, [r7, #15]
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - Success\n");
  }

  /* Update Advertising data */
  ret = aci_gap_update_adv_data(sizeof(a_AdvData), (uint8_t*) a_AdvData);
 800b69e:	4906      	ldr	r1, [pc, #24]	; (800b6b8 <Adv_Request+0x5c>)
 800b6a0:	2009      	movs	r0, #9
 800b6a2:	f7fe f821 	bl	80096e8 <aci_gap_update_adv_data>
 800b6a6:	4603      	mov	r3, r0
 800b6a8:	73fb      	strb	r3, [r7, #15]
  else
  {
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
  }

  return;
 800b6aa:	bf00      	nop
}
 800b6ac:	3710      	adds	r7, #16
 800b6ae:	46bd      	mov	sp, r7
 800b6b0:	bd80      	pop	{r7, pc}
 800b6b2:	bf00      	nop
 800b6b4:	20000d5c 	.word	0x20000d5c
 800b6b8:	20000014 	.word	0x20000014

0800b6bc <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 800b6bc:	b580      	push	{r7, lr}
 800b6be:	b086      	sub	sp, #24
 800b6c0:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 800b6c2:	f7ff fdc3 	bl	800b24c <LL_FLASH_GetUDN>
 800b6c6:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 800b6c8:	693b      	ldr	r3, [r7, #16]
 800b6ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b6ce:	d023      	beq.n	800b718 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 800b6d0:	f7ff fdd4 	bl	800b27c <LL_FLASH_GetSTCompanyID>
 800b6d4:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 800b6d6:	f7ff fdc5 	bl	800b264 <LL_FLASH_GetDeviceID>
 800b6da:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 800b6dc:	693b      	ldr	r3, [r7, #16]
 800b6de:	b2da      	uxtb	r2, r3
 800b6e0:	4b16      	ldr	r3, [pc, #88]	; (800b73c <BleGetBdAddress+0x80>)
 800b6e2:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 800b6e4:	693b      	ldr	r3, [r7, #16]
 800b6e6:	0a1b      	lsrs	r3, r3, #8
 800b6e8:	b2da      	uxtb	r2, r3
 800b6ea:	4b14      	ldr	r3, [pc, #80]	; (800b73c <BleGetBdAddress+0x80>)
 800b6ec:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	b2da      	uxtb	r2, r3
 800b6f2:	4b12      	ldr	r3, [pc, #72]	; (800b73c <BleGetBdAddress+0x80>)
 800b6f4:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 800b6f6:	68bb      	ldr	r3, [r7, #8]
 800b6f8:	b2da      	uxtb	r2, r3
 800b6fa:	4b10      	ldr	r3, [pc, #64]	; (800b73c <BleGetBdAddress+0x80>)
 800b6fc:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 800b6fe:	68bb      	ldr	r3, [r7, #8]
 800b700:	0a1b      	lsrs	r3, r3, #8
 800b702:	b2da      	uxtb	r2, r3
 800b704:	4b0d      	ldr	r3, [pc, #52]	; (800b73c <BleGetBdAddress+0x80>)
 800b706:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 800b708:	68bb      	ldr	r3, [r7, #8]
 800b70a:	0c1b      	lsrs	r3, r3, #16
 800b70c:	b2da      	uxtb	r2, r3
 800b70e:	4b0b      	ldr	r3, [pc, #44]	; (800b73c <BleGetBdAddress+0x80>)
 800b710:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 800b712:	4b0a      	ldr	r3, [pc, #40]	; (800b73c <BleGetBdAddress+0x80>)
 800b714:	617b      	str	r3, [r7, #20]
 800b716:	e00b      	b.n	800b730 <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 800b718:	2000      	movs	r0, #0
 800b71a:	f7ff fcb1 	bl	800b080 <OTP_Read>
 800b71e:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	2b00      	cmp	r3, #0
 800b724:	d002      	beq.n	800b72c <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	617b      	str	r3, [r7, #20]
 800b72a:	e001      	b.n	800b730 <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 800b72c:	4b04      	ldr	r3, [pc, #16]	; (800b740 <BleGetBdAddress+0x84>)
 800b72e:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 800b730:	697b      	ldr	r3, [r7, #20]
}
 800b732:	4618      	mov	r0, r3
 800b734:	3718      	adds	r7, #24
 800b736:	46bd      	mov	sp, r7
 800b738:	bd80      	pop	{r7, pc}
 800b73a:	bf00      	nop
 800b73c:	20000d54 	.word	0x20000d54
 800b740:	0800dbc8 	.word	0x0800dbc8

0800b744 <Adv_Cancel>:
 *
 * SPECIFIC FUNCTIONS FOR CUSTOM
 *
 *************************************************************/
static void Adv_Cancel(void)
{
 800b744:	b580      	push	{r7, lr}
 800b746:	b082      	sub	sp, #8
 800b748:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_1 */

  /* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 800b74a:	4b0a      	ldr	r3, [pc, #40]	; (800b774 <Adv_Cancel+0x30>)
 800b74c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b750:	2b05      	cmp	r3, #5
 800b752:	d00a      	beq.n	800b76a <Adv_Cancel+0x26>
  {
    tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800b754:	2392      	movs	r3, #146	; 0x92
 800b756:	71fb      	strb	r3, [r7, #7]

    ret = aci_gap_set_non_discoverable();
 800b758:	f7fd fc7c 	bl	8009054 <aci_gap_set_non_discoverable>
 800b75c:	4603      	mov	r3, r0
 800b75e:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800b760:	4b04      	ldr	r3, [pc, #16]	; (800b774 <Adv_Cancel+0x30>)
 800b762:	2200      	movs	r2, #0
 800b764:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* USER CODE BEGIN Adv_Cancel_2 */

  /* USER CODE END Adv_Cancel_2 */

  return;
 800b768:	bf00      	nop
 800b76a:	bf00      	nop
}
 800b76c:	3708      	adds	r7, #8
 800b76e:	46bd      	mov	sp, r7
 800b770:	bd80      	pop	{r7, pc}
 800b772:	bf00      	nop
 800b774:	20000d5c 	.word	0x20000d5c

0800b778 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 800b778:	b580      	push	{r7, lr}
 800b77a:	b082      	sub	sp, #8
 800b77c:	af00      	add	r7, sp, #0
 800b77e:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 800b780:	2100      	movs	r1, #0
 800b782:	2002      	movs	r0, #2
 800b784:	f000 fcd6 	bl	800c134 <UTIL_SEQ_SetTask>

  return;
 800b788:	bf00      	nop
}
 800b78a:	3708      	adds	r7, #8
 800b78c:	46bd      	mov	sp, r7
 800b78e:	bd80      	pop	{r7, pc}

0800b790 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 800b790:	b580      	push	{r7, lr}
 800b792:	b082      	sub	sp, #8
 800b794:	af00      	add	r7, sp, #0
 800b796:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800b798:	2001      	movs	r0, #1
 800b79a:	f000 fd37 	bl	800c20c <UTIL_SEQ_SetEvt>

  return;
 800b79e:	bf00      	nop
}
 800b7a0:	3708      	adds	r7, #8
 800b7a2:	46bd      	mov	sp, r7
 800b7a4:	bd80      	pop	{r7, pc}

0800b7a6 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 800b7a6:	b580      	push	{r7, lr}
 800b7a8:	b082      	sub	sp, #8
 800b7aa:	af00      	add	r7, sp, #0
 800b7ac:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800b7ae:	2001      	movs	r0, #1
 800b7b0:	f000 fd4c 	bl	800c24c <UTIL_SEQ_WaitEvt>

  return;
 800b7b4:	bf00      	nop
}
 800b7b6:	3708      	adds	r7, #8
 800b7b8:	46bd      	mov	sp, r7
 800b7ba:	bd80      	pop	{r7, pc}

0800b7bc <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 800b7bc:	b580      	push	{r7, lr}
 800b7be:	b084      	sub	sp, #16
 800b7c0:	af00      	add	r7, sp, #0
 800b7c2:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	685b      	ldr	r3, [r3, #4]
 800b7cc:	3308      	adds	r3, #8
 800b7ce:	4618      	mov	r0, r3
 800b7d0:	f7fe fdfe 	bl	800a3d0 <SVCCTL_UserEvtRx>
 800b7d4:	4603      	mov	r3, r0
 800b7d6:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 800b7d8:	7afb      	ldrb	r3, [r7, #11]
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d003      	beq.n	800b7e6 <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	2201      	movs	r2, #1
 800b7e2:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 800b7e4:	e003      	b.n	800b7ee <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	2200      	movs	r2, #0
 800b7ea:	701a      	strb	r2, [r3, #0]
  return;
 800b7ec:	bf00      	nop
}
 800b7ee:	3710      	adds	r7, #16
 800b7f0:	46bd      	mov	sp, r7
 800b7f2:	bd80      	pop	{r7, pc}

0800b7f4 <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 800b7f4:	b580      	push	{r7, lr}
 800b7f6:	b084      	sub	sp, #16
 800b7f8:	af00      	add	r7, sp, #0
 800b7fa:	4603      	mov	r3, r0
 800b7fc:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 800b7fe:	79fb      	ldrb	r3, [r7, #7]
 800b800:	2b00      	cmp	r3, #0
 800b802:	d002      	beq.n	800b80a <BLE_StatusNot+0x16>
 800b804:	2b01      	cmp	r3, #1
 800b806:	d006      	beq.n	800b816 <BLE_StatusNot+0x22>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 800b808:	e00b      	b.n	800b822 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800b80a:	2303      	movs	r3, #3
 800b80c:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 800b80e:	68f8      	ldr	r0, [r7, #12]
 800b810:	f000 fcbc 	bl	800c18c <UTIL_SEQ_PauseTask>
      break;
 800b814:	e005      	b.n	800b822 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800b816:	2303      	movs	r3, #3
 800b818:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 800b81a:	68f8      	ldr	r0, [r7, #12]
 800b81c:	f000 fcd6 	bl	800c1cc <UTIL_SEQ_ResumeTask>
      break;
 800b820:	bf00      	nop
  }

  return;
 800b822:	bf00      	nop
}
 800b824:	3710      	adds	r7, #16
 800b826:	46bd      	mov	sp, r7
 800b828:	bd80      	pop	{r7, pc}

0800b82a <Custom_APP_Notification>:
  /* USER CODE END CUSTOM_STM_App_Notification_2 */
  return;
}

void Custom_APP_Notification(Custom_App_ConnHandle_Not_evt_t *pNotification)
{
 800b82a:	b480      	push	{r7}
 800b82c:	b083      	sub	sp, #12
 800b82e:	af00      	add	r7, sp, #0
 800b830:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_APP_Notification_1 */

  /* USER CODE END CUSTOM_APP_Notification_1 */

  switch (pNotification->Custom_Evt_Opcode)
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	781b      	ldrb	r3, [r3, #0]
 800b836:	2b00      	cmp	r3, #0
 800b838:	d002      	beq.n	800b840 <Custom_APP_Notification+0x16>
 800b83a:	2b01      	cmp	r3, #1
 800b83c:	d002      	beq.n	800b844 <Custom_APP_Notification+0x1a>

    default:
      /* USER CODE BEGIN CUSTOM_APP_Notification_default */

      /* USER CODE END CUSTOM_APP_Notification_default */
      break;
 800b83e:	e002      	b.n	800b846 <Custom_APP_Notification+0x1c>
      break;
 800b840:	bf00      	nop
 800b842:	e000      	b.n	800b846 <Custom_APP_Notification+0x1c>
      break;
 800b844:	bf00      	nop

  /* USER CODE BEGIN CUSTOM_APP_Notification_2 */

  /* USER CODE END CUSTOM_APP_Notification_2 */

  return;
 800b846:	bf00      	nop
}
 800b848:	370c      	adds	r7, #12
 800b84a:	46bd      	mov	sp, r7
 800b84c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b850:	4770      	bx	lr

0800b852 <Custom_APP_Init>:

void Custom_APP_Init(void)
{
 800b852:	b480      	push	{r7}
 800b854:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CUSTOM_APP_Init */

  /* USER CODE END CUSTOM_APP_Init */
  return;
 800b856:	bf00      	nop
}
 800b858:	46bd      	mov	sp, r7
 800b85a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b85e:	4770      	bx	lr

0800b860 <Custom_STM_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Custom_STM_Event_Handler(void *Event)
{
 800b860:	b480      	push	{r7}
 800b862:	b08b      	sub	sp, #44	; 0x2c
 800b864:	af00      	add	r7, sp, #0
 800b866:	6078      	str	r0, [r7, #4]
  Custom_STM_App_Notification_evt_t     Notification;
  /* USER CODE BEGIN Custom_STM_Event_Handler_1 */

  /* USER CODE END Custom_STM_Event_Handler_1 */

  return_value = SVCCTL_EvtNotAck;
 800b868:	2300      	movs	r3, #0
 800b86a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	3301      	adds	r3, #1
 800b872:	623b      	str	r3, [r7, #32]

  switch (event_pckt->evt)
 800b874:	6a3b      	ldr	r3, [r7, #32]
 800b876:	781b      	ldrb	r3, [r3, #0]
 800b878:	2bff      	cmp	r3, #255	; 0xff
 800b87a:	d12b      	bne.n	800b8d4 <Custom_STM_Event_Handler+0x74>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 800b87c:	6a3b      	ldr	r3, [r7, #32]
 800b87e:	3302      	adds	r3, #2
 800b880:	61fb      	str	r3, [r7, #28]
      switch (blecore_evt->ecode)
 800b882:	69fb      	ldr	r3, [r7, #28]
 800b884:	881b      	ldrh	r3, [r3, #0]
 800b886:	b29b      	uxth	r3, r3
 800b888:	f640 4214 	movw	r2, #3092	; 0xc14
 800b88c:	4293      	cmp	r3, r2
 800b88e:	d01b      	beq.n	800b8c8 <Custom_STM_Event_Handler+0x68>
 800b890:	f640 4214 	movw	r2, #3092	; 0xc14
 800b894:	4293      	cmp	r3, r2
 800b896:	dc19      	bgt.n	800b8cc <Custom_STM_Event_Handler+0x6c>
 800b898:	f640 4201 	movw	r2, #3073	; 0xc01
 800b89c:	4293      	cmp	r3, r2
 800b89e:	d003      	beq.n	800b8a8 <Custom_STM_Event_Handler+0x48>
 800b8a0:	f640 4213 	movw	r2, #3091	; 0xc13
 800b8a4:	4293      	cmp	r3, r2

          /* USER CODE END EVT_BLUE_GATT_WRITE_PERMIT_REQ_BEGIN */
          /* USER CODE BEGIN EVT_BLUE_GATT_WRITE_PERMIT_REQ_END */

          /* USER CODE END EVT_BLUE_GATT_WRITE_PERMIT_REQ_END */
          break;
 800b8a6:	e014      	b.n	800b8d2 <Custom_STM_Event_Handler+0x72>
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 800b8a8:	69fb      	ldr	r3, [r7, #28]
 800b8aa:	3302      	adds	r3, #2
 800b8ac:	61bb      	str	r3, [r7, #24]
          if (attribute_modified->Attr_Handle == (CustomContext.CustomMycharwriteHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 800b8ae:	69bb      	ldr	r3, [r7, #24]
 800b8b0:	885b      	ldrh	r3, [r3, #2]
 800b8b2:	b29b      	uxth	r3, r3
 800b8b4:	461a      	mov	r2, r3
 800b8b6:	4b0c      	ldr	r3, [pc, #48]	; (800b8e8 <Custom_STM_Event_Handler+0x88>)
 800b8b8:	885b      	ldrh	r3, [r3, #2]
 800b8ba:	3301      	adds	r3, #1
 800b8bc:	429a      	cmp	r2, r3
 800b8be:	d107      	bne.n	800b8d0 <Custom_STM_Event_Handler+0x70>
            return_value = SVCCTL_EvtAckFlowEnable;
 800b8c0:	2301      	movs	r3, #1
 800b8c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          break;
 800b8c6:	e003      	b.n	800b8d0 <Custom_STM_Event_Handler+0x70>
          break;
 800b8c8:	bf00      	nop
 800b8ca:	e004      	b.n	800b8d6 <Custom_STM_Event_Handler+0x76>
        /* USER CODE END BLECORE_EVT */
        default:
          /* USER CODE BEGIN EVT_DEFAULT */

          /* USER CODE END EVT_DEFAULT */
          break;
 800b8cc:	bf00      	nop
 800b8ce:	e002      	b.n	800b8d6 <Custom_STM_Event_Handler+0x76>
          break;
 800b8d0:	bf00      	nop
      }
      /* USER CODE BEGIN EVT_VENDOR*/

      /* USER CODE END EVT_VENDOR*/
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800b8d2:	e000      	b.n	800b8d6 <Custom_STM_Event_Handler+0x76>

    default:
      /* USER CODE BEGIN EVENT_PCKT*/

      /* USER CODE END EVENT_PCKT*/
      break;
 800b8d4:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_Event_Handler_2 */

  /* USER CODE END Custom_STM_Event_Handler_2 */

  return(return_value);
 800b8d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}/* end Custom_STM_Event_Handler */
 800b8da:	4618      	mov	r0, r3
 800b8dc:	372c      	adds	r7, #44	; 0x2c
 800b8de:	46bd      	mov	sp, r7
 800b8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e4:	4770      	bx	lr
 800b8e6:	bf00      	nop
 800b8e8:	20000de4 	.word	0x20000de4

0800b8ec <SVCCTL_InitCustomSvc>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void SVCCTL_InitCustomSvc(void)
{
 800b8ec:	b580      	push	{r7, lr}
 800b8ee:	b08c      	sub	sp, #48	; 0x30
 800b8f0:	af06      	add	r7, sp, #24

  Char_UUID_t  uuid;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800b8f2:	2392      	movs	r3, #146	; 0x92
 800b8f4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE END SVCCTL_InitCustomSvc_1 */

  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(Custom_STM_Event_Handler);
 800b8f6:	4834      	ldr	r0, [pc, #208]	; (800b9c8 <SVCCTL_InitCustomSvc+0xdc>)
 800b8f8:	f7fe fd50 	bl	800a39c <SVCCTL_RegisterSvcHandler>
   * service_max_attribute_record = 1 for mySvc +
   *                                2 for myCharWrite +
   *                              = 3
   */

  COPY_MYSVC_UUID(uuid.Char_UUID_128);
 800b8fc:	238f      	movs	r3, #143	; 0x8f
 800b8fe:	713b      	strb	r3, [r7, #4]
 800b900:	23e5      	movs	r3, #229	; 0xe5
 800b902:	717b      	strb	r3, [r7, #5]
 800b904:	23b3      	movs	r3, #179	; 0xb3
 800b906:	71bb      	strb	r3, [r7, #6]
 800b908:	23d5      	movs	r3, #213	; 0xd5
 800b90a:	71fb      	strb	r3, [r7, #7]
 800b90c:	232e      	movs	r3, #46	; 0x2e
 800b90e:	723b      	strb	r3, [r7, #8]
 800b910:	237f      	movs	r3, #127	; 0x7f
 800b912:	727b      	strb	r3, [r7, #9]
 800b914:	234a      	movs	r3, #74	; 0x4a
 800b916:	72bb      	strb	r3, [r7, #10]
 800b918:	2398      	movs	r3, #152	; 0x98
 800b91a:	72fb      	strb	r3, [r7, #11]
 800b91c:	232a      	movs	r3, #42	; 0x2a
 800b91e:	733b      	strb	r3, [r7, #12]
 800b920:	2348      	movs	r3, #72	; 0x48
 800b922:	737b      	strb	r3, [r7, #13]
 800b924:	237a      	movs	r3, #122	; 0x7a
 800b926:	73bb      	strb	r3, [r7, #14]
 800b928:	23cc      	movs	r3, #204	; 0xcc
 800b92a:	73fb      	strb	r3, [r7, #15]
 800b92c:	2300      	movs	r3, #0
 800b92e:	743b      	strb	r3, [r7, #16]
 800b930:	2300      	movs	r3, #0
 800b932:	747b      	strb	r3, [r7, #17]
 800b934:	2300      	movs	r3, #0
 800b936:	74bb      	strb	r3, [r7, #18]
 800b938:	2300      	movs	r3, #0
 800b93a:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_service(UUID_TYPE_128,
 800b93c:	1d39      	adds	r1, r7, #4
 800b93e:	4b23      	ldr	r3, [pc, #140]	; (800b9cc <SVCCTL_InitCustomSvc+0xe0>)
 800b940:	9300      	str	r3, [sp, #0]
 800b942:	2303      	movs	r3, #3
 800b944:	2201      	movs	r2, #1
 800b946:	2002      	movs	r0, #2
 800b948:	f7fd fff0 	bl	800992c <aci_gatt_add_service>
 800b94c:	4603      	mov	r3, r0
 800b94e:	75fb      	strb	r3, [r7, #23]
  }

  /**
   *  myCharWrite
   */
  COPY_MYCHARWRITE_UUID(uuid.Char_UUID_128);
 800b950:	2319      	movs	r3, #25
 800b952:	713b      	strb	r3, [r7, #4]
 800b954:	23ed      	movs	r3, #237	; 0xed
 800b956:	717b      	strb	r3, [r7, #5]
 800b958:	2382      	movs	r3, #130	; 0x82
 800b95a:	71bb      	strb	r3, [r7, #6]
 800b95c:	23ae      	movs	r3, #174	; 0xae
 800b95e:	71fb      	strb	r3, [r7, #7]
 800b960:	23ed      	movs	r3, #237	; 0xed
 800b962:	723b      	strb	r3, [r7, #8]
 800b964:	2321      	movs	r3, #33	; 0x21
 800b966:	727b      	strb	r3, [r7, #9]
 800b968:	234c      	movs	r3, #76	; 0x4c
 800b96a:	72bb      	strb	r3, [r7, #10]
 800b96c:	239d      	movs	r3, #157	; 0x9d
 800b96e:	72fb      	strb	r3, [r7, #11]
 800b970:	2341      	movs	r3, #65	; 0x41
 800b972:	733b      	strb	r3, [r7, #12]
 800b974:	2345      	movs	r3, #69	; 0x45
 800b976:	737b      	strb	r3, [r7, #13]
 800b978:	2322      	movs	r3, #34	; 0x22
 800b97a:	73bb      	strb	r3, [r7, #14]
 800b97c:	238e      	movs	r3, #142	; 0x8e
 800b97e:	73fb      	strb	r3, [r7, #15]
 800b980:	2300      	movs	r3, #0
 800b982:	743b      	strb	r3, [r7, #16]
 800b984:	2300      	movs	r3, #0
 800b986:	747b      	strb	r3, [r7, #17]
 800b988:	2300      	movs	r3, #0
 800b98a:	74bb      	strb	r3, [r7, #18]
 800b98c:	2300      	movs	r3, #0
 800b98e:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomMysvcHdle,
 800b990:	4b0e      	ldr	r3, [pc, #56]	; (800b9cc <SVCCTL_InitCustomSvc+0xe0>)
 800b992:	8818      	ldrh	r0, [r3, #0]
 800b994:	4b0e      	ldr	r3, [pc, #56]	; (800b9d0 <SVCCTL_InitCustomSvc+0xe4>)
 800b996:	781b      	ldrb	r3, [r3, #0]
 800b998:	b29b      	uxth	r3, r3
 800b99a:	1d3a      	adds	r2, r7, #4
 800b99c:	490d      	ldr	r1, [pc, #52]	; (800b9d4 <SVCCTL_InitCustomSvc+0xe8>)
 800b99e:	9105      	str	r1, [sp, #20]
 800b9a0:	2100      	movs	r1, #0
 800b9a2:	9104      	str	r1, [sp, #16]
 800b9a4:	2110      	movs	r1, #16
 800b9a6:	9103      	str	r1, [sp, #12]
 800b9a8:	2101      	movs	r1, #1
 800b9aa:	9102      	str	r1, [sp, #8]
 800b9ac:	2100      	movs	r1, #0
 800b9ae:	9101      	str	r1, [sp, #4]
 800b9b0:	2108      	movs	r1, #8
 800b9b2:	9100      	str	r1, [sp, #0]
 800b9b4:	2102      	movs	r1, #2
 800b9b6:	f7fe f88f 	bl	8009ad8 <aci_gatt_add_char>
 800b9ba:	4603      	mov	r3, r0
 800b9bc:	75fb      	strb	r3, [r7, #23]

  /* USER CODE BEGIN SVCCTL_InitCustomSvc_2 */

  /* USER CODE END SVCCTL_InitCustomSvc_2 */

  return;
 800b9be:	bf00      	nop
}
 800b9c0:	3718      	adds	r7, #24
 800b9c2:	46bd      	mov	sp, r7
 800b9c4:	bd80      	pop	{r7, pc}
 800b9c6:	bf00      	nop
 800b9c8:	0800b861 	.word	0x0800b861
 800b9cc:	20000de4 	.word	0x20000de4
 800b9d0:	2000001d 	.word	0x2000001d
 800b9d4:	20000de6 	.word	0x20000de6

0800b9d8 <LL_PWR_EnableBootC2>:
{
 800b9d8:	b480      	push	{r7}
 800b9da:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 800b9dc:	4b05      	ldr	r3, [pc, #20]	; (800b9f4 <LL_PWR_EnableBootC2+0x1c>)
 800b9de:	68db      	ldr	r3, [r3, #12]
 800b9e0:	4a04      	ldr	r2, [pc, #16]	; (800b9f4 <LL_PWR_EnableBootC2+0x1c>)
 800b9e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b9e6:	60d3      	str	r3, [r2, #12]
}
 800b9e8:	bf00      	nop
 800b9ea:	46bd      	mov	sp, r7
 800b9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9f0:	4770      	bx	lr
 800b9f2:	bf00      	nop
 800b9f4:	58000400 	.word	0x58000400

0800b9f8 <LL_C2_EXTI_EnableEvent_32_63>:
{
 800b9f8:	b480      	push	{r7}
 800b9fa:	b083      	sub	sp, #12
 800b9fc:	af00      	add	r7, sp, #0
 800b9fe:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 800ba00:	4b06      	ldr	r3, [pc, #24]	; (800ba1c <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800ba02:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800ba06:	4905      	ldr	r1, [pc, #20]	; (800ba1c <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	4313      	orrs	r3, r2
 800ba0c:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 800ba10:	bf00      	nop
 800ba12:	370c      	adds	r7, #12
 800ba14:	46bd      	mov	sp, r7
 800ba16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba1a:	4770      	bx	lr
 800ba1c:	58000800 	.word	0x58000800

0800ba20 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 800ba20:	b480      	push	{r7}
 800ba22:	b083      	sub	sp, #12
 800ba24:	af00      	add	r7, sp, #0
 800ba26:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800ba28:	4b05      	ldr	r3, [pc, #20]	; (800ba40 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800ba2a:	6a1a      	ldr	r2, [r3, #32]
 800ba2c:	4904      	ldr	r1, [pc, #16]	; (800ba40 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	4313      	orrs	r3, r2
 800ba32:	620b      	str	r3, [r1, #32]
}
 800ba34:	bf00      	nop
 800ba36:	370c      	adds	r7, #12
 800ba38:	46bd      	mov	sp, r7
 800ba3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba3e:	4770      	bx	lr
 800ba40:	58000800 	.word	0x58000800

0800ba44 <LL_AHB3_GRP1_EnableClock>:
{
 800ba44:	b480      	push	{r7}
 800ba46:	b085      	sub	sp, #20
 800ba48:	af00      	add	r7, sp, #0
 800ba4a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 800ba4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ba50:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ba52:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	4313      	orrs	r3, r2
 800ba5a:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800ba5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ba60:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	4013      	ands	r3, r2
 800ba66:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800ba68:	68fb      	ldr	r3, [r7, #12]
}
 800ba6a:	bf00      	nop
 800ba6c:	3714      	adds	r7, #20
 800ba6e:	46bd      	mov	sp, r7
 800ba70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba74:	4770      	bx	lr

0800ba76 <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 800ba76:	b480      	push	{r7}
 800ba78:	b085      	sub	sp, #20
 800ba7a:	af00      	add	r7, sp, #0
 800ba7c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 800ba7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ba82:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 800ba86:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	4313      	orrs	r3, r2
 800ba8e:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 800ba92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ba96:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	4013      	ands	r3, r2
 800ba9e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800baa0:	68fb      	ldr	r3, [r7, #12]
}
 800baa2:	bf00      	nop
 800baa4:	3714      	adds	r7, #20
 800baa6:	46bd      	mov	sp, r7
 800baa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baac:	4770      	bx	lr

0800baae <LL_C1_IPCC_EnableIT_TXF>:
{
 800baae:	b480      	push	{r7}
 800bab0:	b083      	sub	sp, #12
 800bab2:	af00      	add	r7, sp, #0
 800bab4:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	601a      	str	r2, [r3, #0]
}
 800bac2:	bf00      	nop
 800bac4:	370c      	adds	r7, #12
 800bac6:	46bd      	mov	sp, r7
 800bac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bacc:	4770      	bx	lr

0800bace <LL_C1_IPCC_EnableIT_RXO>:
{
 800bace:	b480      	push	{r7}
 800bad0:	b083      	sub	sp, #12
 800bad2:	af00      	add	r7, sp, #0
 800bad4:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	f043 0201 	orr.w	r2, r3, #1
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	601a      	str	r2, [r3, #0]
}
 800bae2:	bf00      	nop
 800bae4:	370c      	adds	r7, #12
 800bae6:	46bd      	mov	sp, r7
 800bae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baec:	4770      	bx	lr

0800baee <LL_C1_IPCC_EnableTransmitChannel>:
{
 800baee:	b480      	push	{r7}
 800baf0:	b083      	sub	sp, #12
 800baf2:	af00      	add	r7, sp, #0
 800baf4:	6078      	str	r0, [r7, #4]
 800baf6:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	685a      	ldr	r2, [r3, #4]
 800bafc:	683b      	ldr	r3, [r7, #0]
 800bafe:	041b      	lsls	r3, r3, #16
 800bb00:	43db      	mvns	r3, r3
 800bb02:	401a      	ands	r2, r3
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	605a      	str	r2, [r3, #4]
}
 800bb08:	bf00      	nop
 800bb0a:	370c      	adds	r7, #12
 800bb0c:	46bd      	mov	sp, r7
 800bb0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb12:	4770      	bx	lr

0800bb14 <LL_C1_IPCC_DisableTransmitChannel>:
{
 800bb14:	b480      	push	{r7}
 800bb16:	b083      	sub	sp, #12
 800bb18:	af00      	add	r7, sp, #0
 800bb1a:	6078      	str	r0, [r7, #4]
 800bb1c:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	685a      	ldr	r2, [r3, #4]
 800bb22:	683b      	ldr	r3, [r7, #0]
 800bb24:	041b      	lsls	r3, r3, #16
 800bb26:	431a      	orrs	r2, r3
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	605a      	str	r2, [r3, #4]
}
 800bb2c:	bf00      	nop
 800bb2e:	370c      	adds	r7, #12
 800bb30:	46bd      	mov	sp, r7
 800bb32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb36:	4770      	bx	lr

0800bb38 <LL_C1_IPCC_EnableReceiveChannel>:
{
 800bb38:	b480      	push	{r7}
 800bb3a:	b083      	sub	sp, #12
 800bb3c:	af00      	add	r7, sp, #0
 800bb3e:	6078      	str	r0, [r7, #4]
 800bb40:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	685a      	ldr	r2, [r3, #4]
 800bb46:	683b      	ldr	r3, [r7, #0]
 800bb48:	43db      	mvns	r3, r3
 800bb4a:	401a      	ands	r2, r3
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	605a      	str	r2, [r3, #4]
}
 800bb50:	bf00      	nop
 800bb52:	370c      	adds	r7, #12
 800bb54:	46bd      	mov	sp, r7
 800bb56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb5a:	4770      	bx	lr

0800bb5c <LL_C1_IPCC_ClearFlag_CHx>:
{
 800bb5c:	b480      	push	{r7}
 800bb5e:	b083      	sub	sp, #12
 800bb60:	af00      	add	r7, sp, #0
 800bb62:	6078      	str	r0, [r7, #4]
 800bb64:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	683a      	ldr	r2, [r7, #0]
 800bb6a:	609a      	str	r2, [r3, #8]
}
 800bb6c:	bf00      	nop
 800bb6e:	370c      	adds	r7, #12
 800bb70:	46bd      	mov	sp, r7
 800bb72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb76:	4770      	bx	lr

0800bb78 <LL_C1_IPCC_SetFlag_CHx>:
{
 800bb78:	b480      	push	{r7}
 800bb7a:	b083      	sub	sp, #12
 800bb7c:	af00      	add	r7, sp, #0
 800bb7e:	6078      	str	r0, [r7, #4]
 800bb80:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 800bb82:	683b      	ldr	r3, [r7, #0]
 800bb84:	041a      	lsls	r2, r3, #16
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	609a      	str	r2, [r3, #8]
}
 800bb8a:	bf00      	nop
 800bb8c:	370c      	adds	r7, #12
 800bb8e:	46bd      	mov	sp, r7
 800bb90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb94:	4770      	bx	lr

0800bb96 <LL_C1_IPCC_IsActiveFlag_CHx>:
{
 800bb96:	b480      	push	{r7}
 800bb98:	b083      	sub	sp, #12
 800bb9a:	af00      	add	r7, sp, #0
 800bb9c:	6078      	str	r0, [r7, #4]
 800bb9e:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	68da      	ldr	r2, [r3, #12]
 800bba4:	683b      	ldr	r3, [r7, #0]
 800bba6:	4013      	ands	r3, r2
 800bba8:	683a      	ldr	r2, [r7, #0]
 800bbaa:	429a      	cmp	r2, r3
 800bbac:	d101      	bne.n	800bbb2 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 800bbae:	2301      	movs	r3, #1
 800bbb0:	e000      	b.n	800bbb4 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 800bbb2:	2300      	movs	r3, #0
}
 800bbb4:	4618      	mov	r0, r3
 800bbb6:	370c      	adds	r7, #12
 800bbb8:	46bd      	mov	sp, r7
 800bbba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbbe:	4770      	bx	lr

0800bbc0 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800bbc0:	b480      	push	{r7}
 800bbc2:	b083      	sub	sp, #12
 800bbc4:	af00      	add	r7, sp, #0
 800bbc6:	6078      	str	r0, [r7, #4]
 800bbc8:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	69da      	ldr	r2, [r3, #28]
 800bbce:	683b      	ldr	r3, [r7, #0]
 800bbd0:	4013      	ands	r3, r2
 800bbd2:	683a      	ldr	r2, [r7, #0]
 800bbd4:	429a      	cmp	r2, r3
 800bbd6:	d101      	bne.n	800bbdc <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 800bbd8:	2301      	movs	r3, #1
 800bbda:	e000      	b.n	800bbde <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 800bbdc:	2300      	movs	r3, #0
}
 800bbde:	4618      	mov	r0, r3
 800bbe0:	370c      	adds	r7, #12
 800bbe2:	46bd      	mov	sp, r7
 800bbe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbe8:	4770      	bx	lr
	...

0800bbec <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 800bbec:	b580      	push	{r7, lr}
 800bbee:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 800bbf0:	2102      	movs	r1, #2
 800bbf2:	4819      	ldr	r0, [pc, #100]	; (800bc58 <HW_IPCC_Rx_Handler+0x6c>)
 800bbf4:	f7ff ffe4 	bl	800bbc0 <LL_C2_IPCC_IsActiveFlag_CHx>
 800bbf8:	4603      	mov	r3, r0
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d009      	beq.n	800bc12 <HW_IPCC_Rx_Handler+0x26>
 800bbfe:	4b16      	ldr	r3, [pc, #88]	; (800bc58 <HW_IPCC_Rx_Handler+0x6c>)
 800bc00:	685b      	ldr	r3, [r3, #4]
 800bc02:	43db      	mvns	r3, r3
 800bc04:	f003 0302 	and.w	r3, r3, #2
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d002      	beq.n	800bc12 <HW_IPCC_Rx_Handler+0x26>
  {
      HW_IPCC_SYS_EvtHandler();
 800bc0c:	f000 f8da 	bl	800bdc4 <HW_IPCC_SYS_EvtHandler>
 800bc10:	e01f      	b.n	800bc52 <HW_IPCC_Rx_Handler+0x66>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 800bc12:	2101      	movs	r1, #1
 800bc14:	4810      	ldr	r0, [pc, #64]	; (800bc58 <HW_IPCC_Rx_Handler+0x6c>)
 800bc16:	f7ff ffd3 	bl	800bbc0 <LL_C2_IPCC_IsActiveFlag_CHx>
 800bc1a:	4603      	mov	r3, r0
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d008      	beq.n	800bc32 <HW_IPCC_Rx_Handler+0x46>
 800bc20:	4b0d      	ldr	r3, [pc, #52]	; (800bc58 <HW_IPCC_Rx_Handler+0x6c>)
 800bc22:	685b      	ldr	r3, [r3, #4]
 800bc24:	f003 0301 	and.w	r3, r3, #1
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d102      	bne.n	800bc32 <HW_IPCC_Rx_Handler+0x46>
  {
    HW_IPCC_BLE_EvtHandler();
 800bc2c:	f000 f88e 	bl	800bd4c <HW_IPCC_BLE_EvtHandler>
 800bc30:	e00f      	b.n	800bc52 <HW_IPCC_Rx_Handler+0x66>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 800bc32:	2108      	movs	r1, #8
 800bc34:	4808      	ldr	r0, [pc, #32]	; (800bc58 <HW_IPCC_Rx_Handler+0x6c>)
 800bc36:	f7ff ffc3 	bl	800bbc0 <LL_C2_IPCC_IsActiveFlag_CHx>
 800bc3a:	4603      	mov	r3, r0
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d009      	beq.n	800bc54 <HW_IPCC_Rx_Handler+0x68>
 800bc40:	4b05      	ldr	r3, [pc, #20]	; (800bc58 <HW_IPCC_Rx_Handler+0x6c>)
 800bc42:	685b      	ldr	r3, [r3, #4]
 800bc44:	43db      	mvns	r3, r3
 800bc46:	f003 0308 	and.w	r3, r3, #8
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d002      	beq.n	800bc54 <HW_IPCC_Rx_Handler+0x68>
  {
    HW_IPCC_TRACES_EvtHandler();
 800bc4e:	f000 f905 	bl	800be5c <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 800bc52:	bf00      	nop
 800bc54:	bf00      	nop
}
 800bc56:	bd80      	pop	{r7, pc}
 800bc58:	58000c00 	.word	0x58000c00

0800bc5c <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 800bc5c:	b580      	push	{r7, lr}
 800bc5e:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 800bc60:	2102      	movs	r1, #2
 800bc62:	481a      	ldr	r0, [pc, #104]	; (800bccc <HW_IPCC_Tx_Handler+0x70>)
 800bc64:	f7ff ff97 	bl	800bb96 <LL_C1_IPCC_IsActiveFlag_CHx>
 800bc68:	4603      	mov	r3, r0
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d109      	bne.n	800bc82 <HW_IPCC_Tx_Handler+0x26>
 800bc6e:	4b17      	ldr	r3, [pc, #92]	; (800bccc <HW_IPCC_Tx_Handler+0x70>)
 800bc70:	685b      	ldr	r3, [r3, #4]
 800bc72:	43db      	mvns	r3, r3
 800bc74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d002      	beq.n	800bc82 <HW_IPCC_Tx_Handler+0x26>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 800bc7c:	f000 f896 	bl	800bdac <HW_IPCC_SYS_CmdEvtHandler>
 800bc80:	e020      	b.n	800bcc4 <HW_IPCC_Tx_Handler+0x68>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 800bc82:	2108      	movs	r1, #8
 800bc84:	4811      	ldr	r0, [pc, #68]	; (800bccc <HW_IPCC_Tx_Handler+0x70>)
 800bc86:	f7ff ff86 	bl	800bb96 <LL_C1_IPCC_IsActiveFlag_CHx>
 800bc8a:	4603      	mov	r3, r0
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d109      	bne.n	800bca4 <HW_IPCC_Tx_Handler+0x48>
 800bc90:	4b0e      	ldr	r3, [pc, #56]	; (800bccc <HW_IPCC_Tx_Handler+0x70>)
 800bc92:	685b      	ldr	r3, [r3, #4]
 800bc94:	43db      	mvns	r3, r3
 800bc96:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d002      	beq.n	800bca4 <HW_IPCC_Tx_Handler+0x48>
  {
    HW_IPCC_MM_FreeBufHandler();
 800bc9e:	f000 f8bf 	bl	800be20 <HW_IPCC_MM_FreeBufHandler>
 800bca2:	e00f      	b.n	800bcc4 <HW_IPCC_Tx_Handler+0x68>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 800bca4:	2120      	movs	r1, #32
 800bca6:	4809      	ldr	r0, [pc, #36]	; (800bccc <HW_IPCC_Tx_Handler+0x70>)
 800bca8:	f7ff ff75 	bl	800bb96 <LL_C1_IPCC_IsActiveFlag_CHx>
 800bcac:	4603      	mov	r3, r0
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d109      	bne.n	800bcc6 <HW_IPCC_Tx_Handler+0x6a>
 800bcb2:	4b06      	ldr	r3, [pc, #24]	; (800bccc <HW_IPCC_Tx_Handler+0x70>)
 800bcb4:	685b      	ldr	r3, [r3, #4]
 800bcb6:	43db      	mvns	r3, r3
 800bcb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d002      	beq.n	800bcc6 <HW_IPCC_Tx_Handler+0x6a>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 800bcc0:	f000 f850 	bl	800bd64 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 800bcc4:	bf00      	nop
 800bcc6:	bf00      	nop
}
 800bcc8:	bd80      	pop	{r7, pc}
 800bcca:	bf00      	nop
 800bccc:	58000c00 	.word	0x58000c00

0800bcd0 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 800bcd0:	b580      	push	{r7, lr}
 800bcd2:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 800bcd4:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800bcd8:	f7ff fecd 	bl	800ba76 <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 800bcdc:	f44f 7000 	mov.w	r0, #512	; 0x200
 800bce0:	f7ff fe9e 	bl	800ba20 <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 800bce4:	f44f 7000 	mov.w	r0, #512	; 0x200
 800bce8:	f7ff fe86 	bl	800b9f8 <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 800bcec:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 800bcee:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 800bcf0:	f7ff fe72 	bl	800b9d8 <LL_PWR_EnableBootC2>

  return;
 800bcf4:	bf00      	nop
}
 800bcf6:	bd80      	pop	{r7, pc}

0800bcf8 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 800bcf8:	b580      	push	{r7, lr}
 800bcfa:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 800bcfc:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800bd00:	f7ff fea0 	bl	800ba44 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 800bd04:	4806      	ldr	r0, [pc, #24]	; (800bd20 <HW_IPCC_Init+0x28>)
 800bd06:	f7ff fee2 	bl	800bace <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 800bd0a:	4805      	ldr	r0, [pc, #20]	; (800bd20 <HW_IPCC_Init+0x28>)
 800bd0c:	f7ff fecf 	bl	800baae <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 800bd10:	202c      	movs	r0, #44	; 0x2c
 800bd12:	f7f7 fc2e 	bl	8003572 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 800bd16:	202d      	movs	r0, #45	; 0x2d
 800bd18:	f7f7 fc2b 	bl	8003572 <HAL_NVIC_EnableIRQ>

  return;
 800bd1c:	bf00      	nop
}
 800bd1e:	bd80      	pop	{r7, pc}
 800bd20:	58000c00 	.word	0x58000c00

0800bd24 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 800bd24:	b580      	push	{r7, lr}
 800bd26:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800bd28:	2101      	movs	r1, #1
 800bd2a:	4802      	ldr	r0, [pc, #8]	; (800bd34 <HW_IPCC_BLE_Init+0x10>)
 800bd2c:	f7ff ff04 	bl	800bb38 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800bd30:	bf00      	nop
}
 800bd32:	bd80      	pop	{r7, pc}
 800bd34:	58000c00 	.word	0x58000c00

0800bd38 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 800bd38:	b580      	push	{r7, lr}
 800bd3a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 800bd3c:	2101      	movs	r1, #1
 800bd3e:	4802      	ldr	r0, [pc, #8]	; (800bd48 <HW_IPCC_BLE_SendCmd+0x10>)
 800bd40:	f7ff ff1a 	bl	800bb78 <LL_C1_IPCC_SetFlag_CHx>

  return;
 800bd44:	bf00      	nop
}
 800bd46:	bd80      	pop	{r7, pc}
 800bd48:	58000c00 	.word	0x58000c00

0800bd4c <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 800bd4c:	b580      	push	{r7, lr}
 800bd4e:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 800bd50:	f7fe ffde 	bl	800ad10 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800bd54:	2101      	movs	r1, #1
 800bd56:	4802      	ldr	r0, [pc, #8]	; (800bd60 <HW_IPCC_BLE_EvtHandler+0x14>)
 800bd58:	f7ff ff00 	bl	800bb5c <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800bd5c:	bf00      	nop
}
 800bd5e:	bd80      	pop	{r7, pc}
 800bd60:	58000c00 	.word	0x58000c00

0800bd64 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 800bd64:	b580      	push	{r7, lr}
 800bd66:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 800bd68:	2120      	movs	r1, #32
 800bd6a:	4803      	ldr	r0, [pc, #12]	; (800bd78 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 800bd6c:	f7ff fed2 	bl	800bb14 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 800bd70:	f7fe fffe 	bl	800ad70 <HW_IPCC_BLE_AclDataAckNot>

  return;
 800bd74:	bf00      	nop
}
 800bd76:	bd80      	pop	{r7, pc}
 800bd78:	58000c00 	.word	0x58000c00

0800bd7c <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 800bd7c:	b580      	push	{r7, lr}
 800bd7e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800bd80:	2102      	movs	r1, #2
 800bd82:	4802      	ldr	r0, [pc, #8]	; (800bd8c <HW_IPCC_SYS_Init+0x10>)
 800bd84:	f7ff fed8 	bl	800bb38 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800bd88:	bf00      	nop
}
 800bd8a:	bd80      	pop	{r7, pc}
 800bd8c:	58000c00 	.word	0x58000c00

0800bd90 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 800bd90:	b580      	push	{r7, lr}
 800bd92:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800bd94:	2102      	movs	r1, #2
 800bd96:	4804      	ldr	r0, [pc, #16]	; (800bda8 <HW_IPCC_SYS_SendCmd+0x18>)
 800bd98:	f7ff feee 	bl	800bb78 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800bd9c:	2102      	movs	r1, #2
 800bd9e:	4802      	ldr	r0, [pc, #8]	; (800bda8 <HW_IPCC_SYS_SendCmd+0x18>)
 800bda0:	f7ff fea5 	bl	800baee <LL_C1_IPCC_EnableTransmitChannel>

  return;
 800bda4:	bf00      	nop
}
 800bda6:	bd80      	pop	{r7, pc}
 800bda8:	58000c00 	.word	0x58000c00

0800bdac <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 800bdac:	b580      	push	{r7, lr}
 800bdae:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800bdb0:	2102      	movs	r1, #2
 800bdb2:	4803      	ldr	r0, [pc, #12]	; (800bdc0 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 800bdb4:	f7ff feae 	bl	800bb14 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 800bdb8:	f7ff f82a 	bl	800ae10 <HW_IPCC_SYS_CmdEvtNot>

  return;
 800bdbc:	bf00      	nop
}
 800bdbe:	bd80      	pop	{r7, pc}
 800bdc0:	58000c00 	.word	0x58000c00

0800bdc4 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 800bdc4:	b580      	push	{r7, lr}
 800bdc6:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 800bdc8:	f7ff f838 	bl	800ae3c <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800bdcc:	2102      	movs	r1, #2
 800bdce:	4802      	ldr	r0, [pc, #8]	; (800bdd8 <HW_IPCC_SYS_EvtHandler+0x14>)
 800bdd0:	f7ff fec4 	bl	800bb5c <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800bdd4:	bf00      	nop
}
 800bdd6:	bd80      	pop	{r7, pc}
 800bdd8:	58000c00 	.word	0x58000c00

0800bddc <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 800bddc:	b580      	push	{r7, lr}
 800bdde:	b082      	sub	sp, #8
 800bde0:	af00      	add	r7, sp, #0
 800bde2:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 800bde4:	2108      	movs	r1, #8
 800bde6:	480c      	ldr	r0, [pc, #48]	; (800be18 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800bde8:	f7ff fed5 	bl	800bb96 <LL_C1_IPCC_IsActiveFlag_CHx>
 800bdec:	4603      	mov	r3, r0
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d007      	beq.n	800be02 <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 800bdf2:	4a0a      	ldr	r2, [pc, #40]	; (800be1c <HW_IPCC_MM_SendFreeBuf+0x40>)
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800bdf8:	2108      	movs	r1, #8
 800bdfa:	4807      	ldr	r0, [pc, #28]	; (800be18 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800bdfc:	f7ff fe77 	bl	800baee <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 800be00:	e006      	b.n	800be10 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800be06:	2108      	movs	r1, #8
 800be08:	4803      	ldr	r0, [pc, #12]	; (800be18 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800be0a:	f7ff feb5 	bl	800bb78 <LL_C1_IPCC_SetFlag_CHx>
  return;
 800be0e:	bf00      	nop
}
 800be10:	3708      	adds	r7, #8
 800be12:	46bd      	mov	sp, r7
 800be14:	bd80      	pop	{r7, pc}
 800be16:	bf00      	nop
 800be18:	58000c00 	.word	0x58000c00
 800be1c:	20000de8 	.word	0x20000de8

0800be20 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 800be20:	b580      	push	{r7, lr}
 800be22:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800be24:	2108      	movs	r1, #8
 800be26:	4806      	ldr	r0, [pc, #24]	; (800be40 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800be28:	f7ff fe74 	bl	800bb14 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 800be2c:	4b05      	ldr	r3, [pc, #20]	; (800be44 <HW_IPCC_MM_FreeBufHandler+0x24>)
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800be32:	2108      	movs	r1, #8
 800be34:	4802      	ldr	r0, [pc, #8]	; (800be40 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800be36:	f7ff fe9f 	bl	800bb78 <LL_C1_IPCC_SetFlag_CHx>

  return;
 800be3a:	bf00      	nop
}
 800be3c:	bd80      	pop	{r7, pc}
 800be3e:	bf00      	nop
 800be40:	58000c00 	.word	0x58000c00
 800be44:	20000de8 	.word	0x20000de8

0800be48 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 800be48:	b580      	push	{r7, lr}
 800be4a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 800be4c:	2108      	movs	r1, #8
 800be4e:	4802      	ldr	r0, [pc, #8]	; (800be58 <HW_IPCC_TRACES_Init+0x10>)
 800be50:	f7ff fe72 	bl	800bb38 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800be54:	bf00      	nop
}
 800be56:	bd80      	pop	{r7, pc}
 800be58:	58000c00 	.word	0x58000c00

0800be5c <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 800be5c:	b580      	push	{r7, lr}
 800be5e:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 800be60:	f7ff f894 	bl	800af8c <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 800be64:	2108      	movs	r1, #8
 800be66:	4802      	ldr	r0, [pc, #8]	; (800be70 <HW_IPCC_TRACES_EvtHandler+0x14>)
 800be68:	f7ff fe78 	bl	800bb5c <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800be6c:	bf00      	nop
}
 800be6e:	bd80      	pop	{r7, pc}
 800be70:	58000c00 	.word	0x58000c00

0800be74 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 800be74:	b480      	push	{r7}
 800be76:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800be78:	4b05      	ldr	r3, [pc, #20]	; (800be90 <UTIL_LPM_Init+0x1c>)
 800be7a:	2200      	movs	r2, #0
 800be7c:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800be7e:	4b05      	ldr	r3, [pc, #20]	; (800be94 <UTIL_LPM_Init+0x20>)
 800be80:	2200      	movs	r2, #0
 800be82:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800be84:	bf00      	nop
 800be86:	46bd      	mov	sp, r7
 800be88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be8c:	4770      	bx	lr
 800be8e:	bf00      	nop
 800be90:	20000dec 	.word	0x20000dec
 800be94:	20000df0 	.word	0x20000df0

0800be98 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800be98:	b480      	push	{r7}
 800be9a:	b087      	sub	sp, #28
 800be9c:	af00      	add	r7, sp, #0
 800be9e:	6078      	str	r0, [r7, #4]
 800bea0:	460b      	mov	r3, r1
 800bea2:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bea4:	f3ef 8310 	mrs	r3, PRIMASK
 800bea8:	613b      	str	r3, [r7, #16]
  return(result);
 800beaa:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800beac:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800beae:	b672      	cpsid	i
}
 800beb0:	bf00      	nop
  
  switch(state)
 800beb2:	78fb      	ldrb	r3, [r7, #3]
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d008      	beq.n	800beca <UTIL_LPM_SetOffMode+0x32>
 800beb8:	2b01      	cmp	r3, #1
 800beba:	d10e      	bne.n	800beda <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 800bebc:	4b0d      	ldr	r3, [pc, #52]	; (800bef4 <UTIL_LPM_SetOffMode+0x5c>)
 800bebe:	681a      	ldr	r2, [r3, #0]
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	4313      	orrs	r3, r2
 800bec4:	4a0b      	ldr	r2, [pc, #44]	; (800bef4 <UTIL_LPM_SetOffMode+0x5c>)
 800bec6:	6013      	str	r3, [r2, #0]
      break;
 800bec8:	e008      	b.n	800bedc <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	43da      	mvns	r2, r3
 800bece:	4b09      	ldr	r3, [pc, #36]	; (800bef4 <UTIL_LPM_SetOffMode+0x5c>)
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	4013      	ands	r3, r2
 800bed4:	4a07      	ldr	r2, [pc, #28]	; (800bef4 <UTIL_LPM_SetOffMode+0x5c>)
 800bed6:	6013      	str	r3, [r2, #0]
      break;
 800bed8:	e000      	b.n	800bedc <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 800beda:	bf00      	nop
 800bedc:	697b      	ldr	r3, [r7, #20]
 800bede:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	f383 8810 	msr	PRIMASK, r3
}
 800bee6:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800bee8:	bf00      	nop
 800beea:	371c      	adds	r7, #28
 800beec:	46bd      	mov	sp, r7
 800beee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bef2:	4770      	bx	lr
 800bef4:	20000df0 	.word	0x20000df0

0800bef8 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 800bef8:	b580      	push	{r7, lr}
 800befa:	b090      	sub	sp, #64	; 0x40
 800befc:	af00      	add	r7, sp, #0
 800befe:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 800bf00:	4b73      	ldr	r3, [pc, #460]	; (800c0d0 <UTIL_SEQ_Run+0x1d8>)
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 800bf06:	4b72      	ldr	r3, [pc, #456]	; (800c0d0 <UTIL_SEQ_Run+0x1d8>)
 800bf08:	681a      	ldr	r2, [r3, #0]
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	4013      	ands	r3, r2
 800bf0e:	4a70      	ldr	r2, [pc, #448]	; (800c0d0 <UTIL_SEQ_Run+0x1d8>)
 800bf10:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 800bf12:	4b70      	ldr	r3, [pc, #448]	; (800c0d4 <UTIL_SEQ_Run+0x1dc>)
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 800bf18:	4b6f      	ldr	r3, [pc, #444]	; (800c0d8 <UTIL_SEQ_Run+0x1e0>)
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 800bf1e:	4b6f      	ldr	r3, [pc, #444]	; (800c0dc <UTIL_SEQ_Run+0x1e4>)
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	633b      	str	r3, [r7, #48]	; 0x30
  local_evtwaited =  EvtWaited;
 800bf24:	4b6e      	ldr	r3, [pc, #440]	; (800c0e0 <UTIL_SEQ_Run+0x1e8>)
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800bf2a:	e08d      	b.n	800c048 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 800bf2c:	2300      	movs	r3, #0
 800bf2e:	63fb      	str	r3, [r7, #60]	; 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800bf30:	e002      	b.n	800bf38 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 800bf32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf34:	3301      	adds	r3, #1
 800bf36:	63fb      	str	r3, [r7, #60]	; 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800bf38:	4a6a      	ldr	r2, [pc, #424]	; (800c0e4 <UTIL_SEQ_Run+0x1ec>)
 800bf3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf3c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800bf40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf42:	401a      	ands	r2, r3
 800bf44:	4b62      	ldr	r3, [pc, #392]	; (800c0d0 <UTIL_SEQ_Run+0x1d8>)
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	4013      	ands	r3, r2
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d0f1      	beq.n	800bf32 <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 800bf4e:	4a65      	ldr	r2, [pc, #404]	; (800c0e4 <UTIL_SEQ_Run+0x1ec>)
 800bf50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf52:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800bf56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf58:	401a      	ands	r2, r3
 800bf5a:	4b5d      	ldr	r3, [pc, #372]	; (800c0d0 <UTIL_SEQ_Run+0x1d8>)
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	4013      	ands	r3, r2
 800bf60:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800bf62:	4a60      	ldr	r2, [pc, #384]	; (800c0e4 <UTIL_SEQ_Run+0x1ec>)
 800bf64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf66:	00db      	lsls	r3, r3, #3
 800bf68:	4413      	add	r3, r2
 800bf6a:	685a      	ldr	r2, [r3, #4]
 800bf6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf6e:	4013      	ands	r3, r2
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d106      	bne.n	800bf82 <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800bf74:	4a5b      	ldr	r2, [pc, #364]	; (800c0e4 <UTIL_SEQ_Run+0x1ec>)
 800bf76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf78:	00db      	lsls	r3, r3, #3
 800bf7a:	4413      	add	r3, r2
 800bf7c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bf80:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800bf82:	4a58      	ldr	r2, [pc, #352]	; (800c0e4 <UTIL_SEQ_Run+0x1ec>)
 800bf84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf86:	00db      	lsls	r3, r3, #3
 800bf88:	4413      	add	r3, r2
 800bf8a:	685a      	ldr	r2, [r3, #4]
 800bf8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf8e:	4013      	ands	r3, r2
 800bf90:	4618      	mov	r0, r3
 800bf92:	f000 f9b3 	bl	800c2fc <SEQ_BitPosition>
 800bf96:	4603      	mov	r3, r0
 800bf98:	461a      	mov	r2, r3
 800bf9a:	4b53      	ldr	r3, [pc, #332]	; (800c0e8 <UTIL_SEQ_Run+0x1f0>)
 800bf9c:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800bf9e:	4a51      	ldr	r2, [pc, #324]	; (800c0e4 <UTIL_SEQ_Run+0x1ec>)
 800bfa0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bfa2:	00db      	lsls	r3, r3, #3
 800bfa4:	4413      	add	r3, r2
 800bfa6:	685a      	ldr	r2, [r3, #4]
 800bfa8:	4b4f      	ldr	r3, [pc, #316]	; (800c0e8 <UTIL_SEQ_Run+0x1f0>)
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	2101      	movs	r1, #1
 800bfae:	fa01 f303 	lsl.w	r3, r1, r3
 800bfb2:	43db      	mvns	r3, r3
 800bfb4:	401a      	ands	r2, r3
 800bfb6:	494b      	ldr	r1, [pc, #300]	; (800c0e4 <UTIL_SEQ_Run+0x1ec>)
 800bfb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bfba:	00db      	lsls	r3, r3, #3
 800bfbc:	440b      	add	r3, r1
 800bfbe:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bfc0:	f3ef 8310 	mrs	r3, PRIMASK
 800bfc4:	61bb      	str	r3, [r7, #24]
  return(result);
 800bfc6:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800bfc8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800bfca:	b672      	cpsid	i
}
 800bfcc:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 800bfce:	4b46      	ldr	r3, [pc, #280]	; (800c0e8 <UTIL_SEQ_Run+0x1f0>)
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	2201      	movs	r2, #1
 800bfd4:	fa02 f303 	lsl.w	r3, r2, r3
 800bfd8:	43da      	mvns	r2, r3
 800bfda:	4b3e      	ldr	r3, [pc, #248]	; (800c0d4 <UTIL_SEQ_Run+0x1dc>)
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	4013      	ands	r3, r2
 800bfe0:	4a3c      	ldr	r2, [pc, #240]	; (800c0d4 <UTIL_SEQ_Run+0x1dc>)
 800bfe2:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800bfe4:	2302      	movs	r3, #2
 800bfe6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bfe8:	e013      	b.n	800c012 <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800bfea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bfec:	3b01      	subs	r3, #1
 800bfee:	4a3d      	ldr	r2, [pc, #244]	; (800c0e4 <UTIL_SEQ_Run+0x1ec>)
 800bff0:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800bff4:	4b3c      	ldr	r3, [pc, #240]	; (800c0e8 <UTIL_SEQ_Run+0x1f0>)
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	2201      	movs	r2, #1
 800bffa:	fa02 f303 	lsl.w	r3, r2, r3
 800bffe:	43da      	mvns	r2, r3
 800c000:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c002:	3b01      	subs	r3, #1
 800c004:	400a      	ands	r2, r1
 800c006:	4937      	ldr	r1, [pc, #220]	; (800c0e4 <UTIL_SEQ_Run+0x1ec>)
 800c008:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800c00c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c00e:	3b01      	subs	r3, #1
 800c010:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c012:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c014:	2b00      	cmp	r3, #0
 800c016:	d1e8      	bne.n	800bfea <UTIL_SEQ_Run+0xf2>
 800c018:	6a3b      	ldr	r3, [r7, #32]
 800c01a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c01c:	697b      	ldr	r3, [r7, #20]
 800c01e:	f383 8810 	msr	PRIMASK, r3
}
 800c022:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 800c024:	4b30      	ldr	r3, [pc, #192]	; (800c0e8 <UTIL_SEQ_Run+0x1f0>)
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	4a30      	ldr	r2, [pc, #192]	; (800c0ec <UTIL_SEQ_Run+0x1f4>)
 800c02a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c02e:	4798      	blx	r3

    local_taskset = TaskSet;
 800c030:	4b28      	ldr	r3, [pc, #160]	; (800c0d4 <UTIL_SEQ_Run+0x1dc>)
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	63bb      	str	r3, [r7, #56]	; 0x38
    local_evtset = EvtSet;
 800c036:	4b28      	ldr	r3, [pc, #160]	; (800c0d8 <UTIL_SEQ_Run+0x1e0>)
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	637b      	str	r3, [r7, #52]	; 0x34
    local_taskmask = TaskMask;
 800c03c:	4b27      	ldr	r3, [pc, #156]	; (800c0dc <UTIL_SEQ_Run+0x1e4>)
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	633b      	str	r3, [r7, #48]	; 0x30
    local_evtwaited = EvtWaited;
 800c042:	4b27      	ldr	r3, [pc, #156]	; (800c0e0 <UTIL_SEQ_Run+0x1e8>)
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800c048:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c04a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c04c:	401a      	ands	r2, r3
 800c04e:	4b20      	ldr	r3, [pc, #128]	; (800c0d0 <UTIL_SEQ_Run+0x1d8>)
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	4013      	ands	r3, r2
 800c054:	2b00      	cmp	r3, #0
 800c056:	d005      	beq.n	800c064 <UTIL_SEQ_Run+0x16c>
 800c058:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c05a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c05c:	4013      	ands	r3, r2
 800c05e:	2b00      	cmp	r3, #0
 800c060:	f43f af64 	beq.w	800bf2c <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800c064:	4b20      	ldr	r3, [pc, #128]	; (800c0e8 <UTIL_SEQ_Run+0x1f0>)
 800c066:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c06a:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 800c06c:	f000 f938 	bl	800c2e0 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c070:	f3ef 8310 	mrs	r3, PRIMASK
 800c074:	613b      	str	r3, [r7, #16]
  return(result);
 800c076:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 800c078:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800c07a:	b672      	cpsid	i
}
 800c07c:	bf00      	nop
  local_taskset = TaskSet;
 800c07e:	4b15      	ldr	r3, [pc, #84]	; (800c0d4 <UTIL_SEQ_Run+0x1dc>)
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 800c084:	4b14      	ldr	r3, [pc, #80]	; (800c0d8 <UTIL_SEQ_Run+0x1e0>)
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 800c08a:	4b14      	ldr	r3, [pc, #80]	; (800c0dc <UTIL_SEQ_Run+0x1e4>)
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	633b      	str	r3, [r7, #48]	; 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 800c090:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c094:	401a      	ands	r2, r3
 800c096:	4b0e      	ldr	r3, [pc, #56]	; (800c0d0 <UTIL_SEQ_Run+0x1d8>)
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	4013      	ands	r3, r2
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d107      	bne.n	800c0b0 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 800c0a0:	4b0f      	ldr	r3, [pc, #60]	; (800c0e0 <UTIL_SEQ_Run+0x1e8>)
 800c0a2:	681a      	ldr	r2, [r3, #0]
 800c0a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c0a6:	4013      	ands	r3, r2
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d101      	bne.n	800c0b0 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 800c0ac:	f7f5 f98e 	bl	80013cc <UTIL_SEQ_Idle>
 800c0b0:	69fb      	ldr	r3, [r7, #28]
 800c0b2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	f383 8810 	msr	PRIMASK, r3
}
 800c0ba:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 800c0bc:	f000 f917 	bl	800c2ee <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 800c0c0:	4a03      	ldr	r2, [pc, #12]	; (800c0d0 <UTIL_SEQ_Run+0x1d8>)
 800c0c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0c4:	6013      	str	r3, [r2, #0]

  return;
 800c0c6:	bf00      	nop
}
 800c0c8:	3740      	adds	r7, #64	; 0x40
 800c0ca:	46bd      	mov	sp, r7
 800c0cc:	bd80      	pop	{r7, pc}
 800c0ce:	bf00      	nop
 800c0d0:	20000024 	.word	0x20000024
 800c0d4:	20000df4 	.word	0x20000df4
 800c0d8:	20000df8 	.word	0x20000df8
 800c0dc:	20000020 	.word	0x20000020
 800c0e0:	20000dfc 	.word	0x20000dfc
 800c0e4:	20000e84 	.word	0x20000e84
 800c0e8:	20000e00 	.word	0x20000e00
 800c0ec:	20000e04 	.word	0x20000e04

0800c0f0 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 800c0f0:	b580      	push	{r7, lr}
 800c0f2:	b088      	sub	sp, #32
 800c0f4:	af00      	add	r7, sp, #0
 800c0f6:	60f8      	str	r0, [r7, #12]
 800c0f8:	60b9      	str	r1, [r7, #8]
 800c0fa:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c0fc:	f3ef 8310 	mrs	r3, PRIMASK
 800c100:	617b      	str	r3, [r7, #20]
  return(result);
 800c102:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 800c104:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800c106:	b672      	cpsid	i
}
 800c108:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800c10a:	68f8      	ldr	r0, [r7, #12]
 800c10c:	f000 f8f6 	bl	800c2fc <SEQ_BitPosition>
 800c110:	4603      	mov	r3, r0
 800c112:	4619      	mov	r1, r3
 800c114:	4a06      	ldr	r2, [pc, #24]	; (800c130 <UTIL_SEQ_RegTask+0x40>)
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800c11c:	69fb      	ldr	r3, [r7, #28]
 800c11e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c120:	69bb      	ldr	r3, [r7, #24]
 800c122:	f383 8810 	msr	PRIMASK, r3
}
 800c126:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 800c128:	bf00      	nop
}
 800c12a:	3720      	adds	r7, #32
 800c12c:	46bd      	mov	sp, r7
 800c12e:	bd80      	pop	{r7, pc}
 800c130:	20000e04 	.word	0x20000e04

0800c134 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 800c134:	b480      	push	{r7}
 800c136:	b087      	sub	sp, #28
 800c138:	af00      	add	r7, sp, #0
 800c13a:	6078      	str	r0, [r7, #4]
 800c13c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c13e:	f3ef 8310 	mrs	r3, PRIMASK
 800c142:	60fb      	str	r3, [r7, #12]
  return(result);
 800c144:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800c146:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c148:	b672      	cpsid	i
}
 800c14a:	bf00      	nop

  TaskSet |= TaskId_bm;
 800c14c:	4b0d      	ldr	r3, [pc, #52]	; (800c184 <UTIL_SEQ_SetTask+0x50>)
 800c14e:	681a      	ldr	r2, [r3, #0]
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	4313      	orrs	r3, r2
 800c154:	4a0b      	ldr	r2, [pc, #44]	; (800c184 <UTIL_SEQ_SetTask+0x50>)
 800c156:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800c158:	4a0b      	ldr	r2, [pc, #44]	; (800c188 <UTIL_SEQ_SetTask+0x54>)
 800c15a:	683b      	ldr	r3, [r7, #0]
 800c15c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	431a      	orrs	r2, r3
 800c164:	4908      	ldr	r1, [pc, #32]	; (800c188 <UTIL_SEQ_SetTask+0x54>)
 800c166:	683b      	ldr	r3, [r7, #0]
 800c168:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800c16c:	697b      	ldr	r3, [r7, #20]
 800c16e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c170:	693b      	ldr	r3, [r7, #16]
 800c172:	f383 8810 	msr	PRIMASK, r3
}
 800c176:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800c178:	bf00      	nop
}
 800c17a:	371c      	adds	r7, #28
 800c17c:	46bd      	mov	sp, r7
 800c17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c182:	4770      	bx	lr
 800c184:	20000df4 	.word	0x20000df4
 800c188:	20000e84 	.word	0x20000e84

0800c18c <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800c18c:	b480      	push	{r7}
 800c18e:	b087      	sub	sp, #28
 800c190:	af00      	add	r7, sp, #0
 800c192:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c194:	f3ef 8310 	mrs	r3, PRIMASK
 800c198:	60fb      	str	r3, [r7, #12]
  return(result);
 800c19a:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800c19c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c19e:	b672      	cpsid	i
}
 800c1a0:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	43da      	mvns	r2, r3
 800c1a6:	4b08      	ldr	r3, [pc, #32]	; (800c1c8 <UTIL_SEQ_PauseTask+0x3c>)
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	4013      	ands	r3, r2
 800c1ac:	4a06      	ldr	r2, [pc, #24]	; (800c1c8 <UTIL_SEQ_PauseTask+0x3c>)
 800c1ae:	6013      	str	r3, [r2, #0]
 800c1b0:	697b      	ldr	r3, [r7, #20]
 800c1b2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c1b4:	693b      	ldr	r3, [r7, #16]
 800c1b6:	f383 8810 	msr	PRIMASK, r3
}
 800c1ba:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800c1bc:	bf00      	nop
}
 800c1be:	371c      	adds	r7, #28
 800c1c0:	46bd      	mov	sp, r7
 800c1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1c6:	4770      	bx	lr
 800c1c8:	20000020 	.word	0x20000020

0800c1cc <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800c1cc:	b480      	push	{r7}
 800c1ce:	b087      	sub	sp, #28
 800c1d0:	af00      	add	r7, sp, #0
 800c1d2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c1d4:	f3ef 8310 	mrs	r3, PRIMASK
 800c1d8:	60fb      	str	r3, [r7, #12]
  return(result);
 800c1da:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800c1dc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c1de:	b672      	cpsid	i
}
 800c1e0:	bf00      	nop

  TaskMask |= TaskId_bm;
 800c1e2:	4b09      	ldr	r3, [pc, #36]	; (800c208 <UTIL_SEQ_ResumeTask+0x3c>)
 800c1e4:	681a      	ldr	r2, [r3, #0]
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	4313      	orrs	r3, r2
 800c1ea:	4a07      	ldr	r2, [pc, #28]	; (800c208 <UTIL_SEQ_ResumeTask+0x3c>)
 800c1ec:	6013      	str	r3, [r2, #0]
 800c1ee:	697b      	ldr	r3, [r7, #20]
 800c1f0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c1f2:	693b      	ldr	r3, [r7, #16]
 800c1f4:	f383 8810 	msr	PRIMASK, r3
}
 800c1f8:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800c1fa:	bf00      	nop
}
 800c1fc:	371c      	adds	r7, #28
 800c1fe:	46bd      	mov	sp, r7
 800c200:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c204:	4770      	bx	lr
 800c206:	bf00      	nop
 800c208:	20000020 	.word	0x20000020

0800c20c <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 800c20c:	b480      	push	{r7}
 800c20e:	b087      	sub	sp, #28
 800c210:	af00      	add	r7, sp, #0
 800c212:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c214:	f3ef 8310 	mrs	r3, PRIMASK
 800c218:	60fb      	str	r3, [r7, #12]
  return(result);
 800c21a:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800c21c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c21e:	b672      	cpsid	i
}
 800c220:	bf00      	nop

  EvtSet |= EvtId_bm;
 800c222:	4b09      	ldr	r3, [pc, #36]	; (800c248 <UTIL_SEQ_SetEvt+0x3c>)
 800c224:	681a      	ldr	r2, [r3, #0]
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	4313      	orrs	r3, r2
 800c22a:	4a07      	ldr	r2, [pc, #28]	; (800c248 <UTIL_SEQ_SetEvt+0x3c>)
 800c22c:	6013      	str	r3, [r2, #0]
 800c22e:	697b      	ldr	r3, [r7, #20]
 800c230:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c232:	693b      	ldr	r3, [r7, #16]
 800c234:	f383 8810 	msr	PRIMASK, r3
}
 800c238:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800c23a:	bf00      	nop
}
 800c23c:	371c      	adds	r7, #28
 800c23e:	46bd      	mov	sp, r7
 800c240:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c244:	4770      	bx	lr
 800c246:	bf00      	nop
 800c248:	20000df8 	.word	0x20000df8

0800c24c <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 800c24c:	b580      	push	{r7, lr}
 800c24e:	b088      	sub	sp, #32
 800c250:	af00      	add	r7, sp, #0
 800c252:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 800c254:	4b1f      	ldr	r3, [pc, #124]	; (800c2d4 <UTIL_SEQ_WaitEvt+0x88>)
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 800c25a:	4b1e      	ldr	r3, [pc, #120]	; (800c2d4 <UTIL_SEQ_WaitEvt+0x88>)
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c262:	d102      	bne.n	800c26a <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 800c264:	2300      	movs	r3, #0
 800c266:	61fb      	str	r3, [r7, #28]
 800c268:	e005      	b.n	800c276 <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 800c26a:	4b1a      	ldr	r3, [pc, #104]	; (800c2d4 <UTIL_SEQ_WaitEvt+0x88>)
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	2201      	movs	r2, #1
 800c270:	fa02 f303 	lsl.w	r3, r2, r3
 800c274:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 800c276:	4b18      	ldr	r3, [pc, #96]	; (800c2d8 <UTIL_SEQ_WaitEvt+0x8c>)
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 800c27c:	4a16      	ldr	r2, [pc, #88]	; (800c2d8 <UTIL_SEQ_WaitEvt+0x8c>)
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 800c282:	e003      	b.n	800c28c <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 800c284:	6879      	ldr	r1, [r7, #4]
 800c286:	69f8      	ldr	r0, [r7, #28]
 800c288:	f7f5 f8a7 	bl	80013da <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 800c28c:	4b13      	ldr	r3, [pc, #76]	; (800c2dc <UTIL_SEQ_WaitEvt+0x90>)
 800c28e:	681a      	ldr	r2, [r3, #0]
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	4013      	ands	r3, r2
 800c294:	2b00      	cmp	r3, #0
 800c296:	d0f5      	beq.n	800c284 <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 800c298:	4a0e      	ldr	r2, [pc, #56]	; (800c2d4 <UTIL_SEQ_WaitEvt+0x88>)
 800c29a:	69bb      	ldr	r3, [r7, #24]
 800c29c:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c29e:	f3ef 8310 	mrs	r3, PRIMASK
 800c2a2:	60bb      	str	r3, [r7, #8]
  return(result);
 800c2a4:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800c2a6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800c2a8:	b672      	cpsid	i
}
 800c2aa:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	43da      	mvns	r2, r3
 800c2b0:	4b0a      	ldr	r3, [pc, #40]	; (800c2dc <UTIL_SEQ_WaitEvt+0x90>)
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	4013      	ands	r3, r2
 800c2b6:	4a09      	ldr	r2, [pc, #36]	; (800c2dc <UTIL_SEQ_WaitEvt+0x90>)
 800c2b8:	6013      	str	r3, [r2, #0]
 800c2ba:	693b      	ldr	r3, [r7, #16]
 800c2bc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	f383 8810 	msr	PRIMASK, r3
}
 800c2c4:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 800c2c6:	4a04      	ldr	r2, [pc, #16]	; (800c2d8 <UTIL_SEQ_WaitEvt+0x8c>)
 800c2c8:	697b      	ldr	r3, [r7, #20]
 800c2ca:	6013      	str	r3, [r2, #0]
  return;
 800c2cc:	bf00      	nop
}
 800c2ce:	3720      	adds	r7, #32
 800c2d0:	46bd      	mov	sp, r7
 800c2d2:	bd80      	pop	{r7, pc}
 800c2d4:	20000e00 	.word	0x20000e00
 800c2d8:	20000dfc 	.word	0x20000dfc
 800c2dc:	20000df8 	.word	0x20000df8

0800c2e0 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 800c2e0:	b480      	push	{r7}
 800c2e2:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800c2e4:	bf00      	nop
}
 800c2e6:	46bd      	mov	sp, r7
 800c2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ec:	4770      	bx	lr

0800c2ee <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 800c2ee:	b480      	push	{r7}
 800c2f0:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800c2f2:	bf00      	nop
}
 800c2f4:	46bd      	mov	sp, r7
 800c2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2fa:	4770      	bx	lr

0800c2fc <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 800c2fc:	b480      	push	{r7}
 800c2fe:	b085      	sub	sp, #20
 800c300:	af00      	add	r7, sp, #0
 800c302:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 800c304:	2300      	movs	r3, #0
 800c306:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 800c30c:	68bb      	ldr	r3, [r7, #8]
 800c30e:	0c1b      	lsrs	r3, r3, #16
 800c310:	041b      	lsls	r3, r3, #16
 800c312:	2b00      	cmp	r3, #0
 800c314:	d104      	bne.n	800c320 <SEQ_BitPosition+0x24>
 800c316:	2310      	movs	r3, #16
 800c318:	73fb      	strb	r3, [r7, #15]
 800c31a:	68bb      	ldr	r3, [r7, #8]
 800c31c:	041b      	lsls	r3, r3, #16
 800c31e:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 800c320:	68bb      	ldr	r3, [r7, #8]
 800c322:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800c326:	2b00      	cmp	r3, #0
 800c328:	d105      	bne.n	800c336 <SEQ_BitPosition+0x3a>
 800c32a:	7bfb      	ldrb	r3, [r7, #15]
 800c32c:	3308      	adds	r3, #8
 800c32e:	73fb      	strb	r3, [r7, #15]
 800c330:	68bb      	ldr	r3, [r7, #8]
 800c332:	021b      	lsls	r3, r3, #8
 800c334:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 800c336:	68bb      	ldr	r3, [r7, #8]
 800c338:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d105      	bne.n	800c34c <SEQ_BitPosition+0x50>
 800c340:	7bfb      	ldrb	r3, [r7, #15]
 800c342:	3304      	adds	r3, #4
 800c344:	73fb      	strb	r3, [r7, #15]
 800c346:	68bb      	ldr	r3, [r7, #8]
 800c348:	011b      	lsls	r3, r3, #4
 800c34a:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 800c34c:	68bb      	ldr	r3, [r7, #8]
 800c34e:	0f1b      	lsrs	r3, r3, #28
 800c350:	4a07      	ldr	r2, [pc, #28]	; (800c370 <SEQ_BitPosition+0x74>)
 800c352:	5cd2      	ldrb	r2, [r2, r3]
 800c354:	7bfb      	ldrb	r3, [r7, #15]
 800c356:	4413      	add	r3, r2
 800c358:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 800c35a:	7bfb      	ldrb	r3, [r7, #15]
 800c35c:	f1c3 031f 	rsb	r3, r3, #31
 800c360:	b2db      	uxtb	r3, r3
}
 800c362:	4618      	mov	r0, r3
 800c364:	3714      	adds	r7, #20
 800c366:	46bd      	mov	sp, r7
 800c368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c36c:	4770      	bx	lr
 800c36e:	bf00      	nop
 800c370:	0800dbf0 	.word	0x0800dbf0

0800c374 <__errno>:
 800c374:	4b01      	ldr	r3, [pc, #4]	; (800c37c <__errno+0x8>)
 800c376:	6818      	ldr	r0, [r3, #0]
 800c378:	4770      	bx	lr
 800c37a:	bf00      	nop
 800c37c:	20000028 	.word	0x20000028

0800c380 <__libc_init_array>:
 800c380:	b570      	push	{r4, r5, r6, lr}
 800c382:	4d0d      	ldr	r5, [pc, #52]	; (800c3b8 <__libc_init_array+0x38>)
 800c384:	4c0d      	ldr	r4, [pc, #52]	; (800c3bc <__libc_init_array+0x3c>)
 800c386:	1b64      	subs	r4, r4, r5
 800c388:	10a4      	asrs	r4, r4, #2
 800c38a:	2600      	movs	r6, #0
 800c38c:	42a6      	cmp	r6, r4
 800c38e:	d109      	bne.n	800c3a4 <__libc_init_array+0x24>
 800c390:	4d0b      	ldr	r5, [pc, #44]	; (800c3c0 <__libc_init_array+0x40>)
 800c392:	4c0c      	ldr	r4, [pc, #48]	; (800c3c4 <__libc_init_array+0x44>)
 800c394:	f001 f98a 	bl	800d6ac <_init>
 800c398:	1b64      	subs	r4, r4, r5
 800c39a:	10a4      	asrs	r4, r4, #2
 800c39c:	2600      	movs	r6, #0
 800c39e:	42a6      	cmp	r6, r4
 800c3a0:	d105      	bne.n	800c3ae <__libc_init_array+0x2e>
 800c3a2:	bd70      	pop	{r4, r5, r6, pc}
 800c3a4:	f855 3b04 	ldr.w	r3, [r5], #4
 800c3a8:	4798      	blx	r3
 800c3aa:	3601      	adds	r6, #1
 800c3ac:	e7ee      	b.n	800c38c <__libc_init_array+0xc>
 800c3ae:	f855 3b04 	ldr.w	r3, [r5], #4
 800c3b2:	4798      	blx	r3
 800c3b4:	3601      	adds	r6, #1
 800c3b6:	e7f2      	b.n	800c39e <__libc_init_array+0x1e>
 800c3b8:	0800dca0 	.word	0x0800dca0
 800c3bc:	0800dca0 	.word	0x0800dca0
 800c3c0:	0800dca0 	.word	0x0800dca0
 800c3c4:	0800dca4 	.word	0x0800dca4

0800c3c8 <memcpy>:
 800c3c8:	440a      	add	r2, r1
 800c3ca:	4291      	cmp	r1, r2
 800c3cc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800c3d0:	d100      	bne.n	800c3d4 <memcpy+0xc>
 800c3d2:	4770      	bx	lr
 800c3d4:	b510      	push	{r4, lr}
 800c3d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c3da:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c3de:	4291      	cmp	r1, r2
 800c3e0:	d1f9      	bne.n	800c3d6 <memcpy+0xe>
 800c3e2:	bd10      	pop	{r4, pc}

0800c3e4 <memset>:
 800c3e4:	4402      	add	r2, r0
 800c3e6:	4603      	mov	r3, r0
 800c3e8:	4293      	cmp	r3, r2
 800c3ea:	d100      	bne.n	800c3ee <memset+0xa>
 800c3ec:	4770      	bx	lr
 800c3ee:	f803 1b01 	strb.w	r1, [r3], #1
 800c3f2:	e7f9      	b.n	800c3e8 <memset+0x4>

0800c3f4 <iprintf>:
 800c3f4:	b40f      	push	{r0, r1, r2, r3}
 800c3f6:	4b0a      	ldr	r3, [pc, #40]	; (800c420 <iprintf+0x2c>)
 800c3f8:	b513      	push	{r0, r1, r4, lr}
 800c3fa:	681c      	ldr	r4, [r3, #0]
 800c3fc:	b124      	cbz	r4, 800c408 <iprintf+0x14>
 800c3fe:	69a3      	ldr	r3, [r4, #24]
 800c400:	b913      	cbnz	r3, 800c408 <iprintf+0x14>
 800c402:	4620      	mov	r0, r4
 800c404:	f000 f886 	bl	800c514 <__sinit>
 800c408:	ab05      	add	r3, sp, #20
 800c40a:	9a04      	ldr	r2, [sp, #16]
 800c40c:	68a1      	ldr	r1, [r4, #8]
 800c40e:	9301      	str	r3, [sp, #4]
 800c410:	4620      	mov	r0, r4
 800c412:	f000 fb39 	bl	800ca88 <_vfiprintf_r>
 800c416:	b002      	add	sp, #8
 800c418:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c41c:	b004      	add	sp, #16
 800c41e:	4770      	bx	lr
 800c420:	20000028 	.word	0x20000028

0800c424 <siprintf>:
 800c424:	b40e      	push	{r1, r2, r3}
 800c426:	b500      	push	{lr}
 800c428:	b09c      	sub	sp, #112	; 0x70
 800c42a:	ab1d      	add	r3, sp, #116	; 0x74
 800c42c:	9002      	str	r0, [sp, #8]
 800c42e:	9006      	str	r0, [sp, #24]
 800c430:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c434:	4809      	ldr	r0, [pc, #36]	; (800c45c <siprintf+0x38>)
 800c436:	9107      	str	r1, [sp, #28]
 800c438:	9104      	str	r1, [sp, #16]
 800c43a:	4909      	ldr	r1, [pc, #36]	; (800c460 <siprintf+0x3c>)
 800c43c:	f853 2b04 	ldr.w	r2, [r3], #4
 800c440:	9105      	str	r1, [sp, #20]
 800c442:	6800      	ldr	r0, [r0, #0]
 800c444:	9301      	str	r3, [sp, #4]
 800c446:	a902      	add	r1, sp, #8
 800c448:	f000 f9f4 	bl	800c834 <_svfiprintf_r>
 800c44c:	9b02      	ldr	r3, [sp, #8]
 800c44e:	2200      	movs	r2, #0
 800c450:	701a      	strb	r2, [r3, #0]
 800c452:	b01c      	add	sp, #112	; 0x70
 800c454:	f85d eb04 	ldr.w	lr, [sp], #4
 800c458:	b003      	add	sp, #12
 800c45a:	4770      	bx	lr
 800c45c:	20000028 	.word	0x20000028
 800c460:	ffff0208 	.word	0xffff0208

0800c464 <std>:
 800c464:	2300      	movs	r3, #0
 800c466:	b510      	push	{r4, lr}
 800c468:	4604      	mov	r4, r0
 800c46a:	e9c0 3300 	strd	r3, r3, [r0]
 800c46e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c472:	6083      	str	r3, [r0, #8]
 800c474:	8181      	strh	r1, [r0, #12]
 800c476:	6643      	str	r3, [r0, #100]	; 0x64
 800c478:	81c2      	strh	r2, [r0, #14]
 800c47a:	6183      	str	r3, [r0, #24]
 800c47c:	4619      	mov	r1, r3
 800c47e:	2208      	movs	r2, #8
 800c480:	305c      	adds	r0, #92	; 0x5c
 800c482:	f7ff ffaf 	bl	800c3e4 <memset>
 800c486:	4b05      	ldr	r3, [pc, #20]	; (800c49c <std+0x38>)
 800c488:	6263      	str	r3, [r4, #36]	; 0x24
 800c48a:	4b05      	ldr	r3, [pc, #20]	; (800c4a0 <std+0x3c>)
 800c48c:	62a3      	str	r3, [r4, #40]	; 0x28
 800c48e:	4b05      	ldr	r3, [pc, #20]	; (800c4a4 <std+0x40>)
 800c490:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c492:	4b05      	ldr	r3, [pc, #20]	; (800c4a8 <std+0x44>)
 800c494:	6224      	str	r4, [r4, #32]
 800c496:	6323      	str	r3, [r4, #48]	; 0x30
 800c498:	bd10      	pop	{r4, pc}
 800c49a:	bf00      	nop
 800c49c:	0800d031 	.word	0x0800d031
 800c4a0:	0800d053 	.word	0x0800d053
 800c4a4:	0800d08b 	.word	0x0800d08b
 800c4a8:	0800d0af 	.word	0x0800d0af

0800c4ac <_cleanup_r>:
 800c4ac:	4901      	ldr	r1, [pc, #4]	; (800c4b4 <_cleanup_r+0x8>)
 800c4ae:	f000 b8af 	b.w	800c610 <_fwalk_reent>
 800c4b2:	bf00      	nop
 800c4b4:	0800d389 	.word	0x0800d389

0800c4b8 <__sfmoreglue>:
 800c4b8:	b570      	push	{r4, r5, r6, lr}
 800c4ba:	2268      	movs	r2, #104	; 0x68
 800c4bc:	1e4d      	subs	r5, r1, #1
 800c4be:	4355      	muls	r5, r2
 800c4c0:	460e      	mov	r6, r1
 800c4c2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c4c6:	f000 f8e5 	bl	800c694 <_malloc_r>
 800c4ca:	4604      	mov	r4, r0
 800c4cc:	b140      	cbz	r0, 800c4e0 <__sfmoreglue+0x28>
 800c4ce:	2100      	movs	r1, #0
 800c4d0:	e9c0 1600 	strd	r1, r6, [r0]
 800c4d4:	300c      	adds	r0, #12
 800c4d6:	60a0      	str	r0, [r4, #8]
 800c4d8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c4dc:	f7ff ff82 	bl	800c3e4 <memset>
 800c4e0:	4620      	mov	r0, r4
 800c4e2:	bd70      	pop	{r4, r5, r6, pc}

0800c4e4 <__sfp_lock_acquire>:
 800c4e4:	4801      	ldr	r0, [pc, #4]	; (800c4ec <__sfp_lock_acquire+0x8>)
 800c4e6:	f000 b8b3 	b.w	800c650 <__retarget_lock_acquire_recursive>
 800c4ea:	bf00      	nop
 800c4ec:	20000e95 	.word	0x20000e95

0800c4f0 <__sfp_lock_release>:
 800c4f0:	4801      	ldr	r0, [pc, #4]	; (800c4f8 <__sfp_lock_release+0x8>)
 800c4f2:	f000 b8ae 	b.w	800c652 <__retarget_lock_release_recursive>
 800c4f6:	bf00      	nop
 800c4f8:	20000e95 	.word	0x20000e95

0800c4fc <__sinit_lock_acquire>:
 800c4fc:	4801      	ldr	r0, [pc, #4]	; (800c504 <__sinit_lock_acquire+0x8>)
 800c4fe:	f000 b8a7 	b.w	800c650 <__retarget_lock_acquire_recursive>
 800c502:	bf00      	nop
 800c504:	20000e96 	.word	0x20000e96

0800c508 <__sinit_lock_release>:
 800c508:	4801      	ldr	r0, [pc, #4]	; (800c510 <__sinit_lock_release+0x8>)
 800c50a:	f000 b8a2 	b.w	800c652 <__retarget_lock_release_recursive>
 800c50e:	bf00      	nop
 800c510:	20000e96 	.word	0x20000e96

0800c514 <__sinit>:
 800c514:	b510      	push	{r4, lr}
 800c516:	4604      	mov	r4, r0
 800c518:	f7ff fff0 	bl	800c4fc <__sinit_lock_acquire>
 800c51c:	69a3      	ldr	r3, [r4, #24]
 800c51e:	b11b      	cbz	r3, 800c528 <__sinit+0x14>
 800c520:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c524:	f7ff bff0 	b.w	800c508 <__sinit_lock_release>
 800c528:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c52c:	6523      	str	r3, [r4, #80]	; 0x50
 800c52e:	4b13      	ldr	r3, [pc, #76]	; (800c57c <__sinit+0x68>)
 800c530:	4a13      	ldr	r2, [pc, #76]	; (800c580 <__sinit+0x6c>)
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	62a2      	str	r2, [r4, #40]	; 0x28
 800c536:	42a3      	cmp	r3, r4
 800c538:	bf04      	itt	eq
 800c53a:	2301      	moveq	r3, #1
 800c53c:	61a3      	streq	r3, [r4, #24]
 800c53e:	4620      	mov	r0, r4
 800c540:	f000 f820 	bl	800c584 <__sfp>
 800c544:	6060      	str	r0, [r4, #4]
 800c546:	4620      	mov	r0, r4
 800c548:	f000 f81c 	bl	800c584 <__sfp>
 800c54c:	60a0      	str	r0, [r4, #8]
 800c54e:	4620      	mov	r0, r4
 800c550:	f000 f818 	bl	800c584 <__sfp>
 800c554:	2200      	movs	r2, #0
 800c556:	60e0      	str	r0, [r4, #12]
 800c558:	2104      	movs	r1, #4
 800c55a:	6860      	ldr	r0, [r4, #4]
 800c55c:	f7ff ff82 	bl	800c464 <std>
 800c560:	68a0      	ldr	r0, [r4, #8]
 800c562:	2201      	movs	r2, #1
 800c564:	2109      	movs	r1, #9
 800c566:	f7ff ff7d 	bl	800c464 <std>
 800c56a:	68e0      	ldr	r0, [r4, #12]
 800c56c:	2202      	movs	r2, #2
 800c56e:	2112      	movs	r1, #18
 800c570:	f7ff ff78 	bl	800c464 <std>
 800c574:	2301      	movs	r3, #1
 800c576:	61a3      	str	r3, [r4, #24]
 800c578:	e7d2      	b.n	800c520 <__sinit+0xc>
 800c57a:	bf00      	nop
 800c57c:	0800dc00 	.word	0x0800dc00
 800c580:	0800c4ad 	.word	0x0800c4ad

0800c584 <__sfp>:
 800c584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c586:	4607      	mov	r7, r0
 800c588:	f7ff ffac 	bl	800c4e4 <__sfp_lock_acquire>
 800c58c:	4b1e      	ldr	r3, [pc, #120]	; (800c608 <__sfp+0x84>)
 800c58e:	681e      	ldr	r6, [r3, #0]
 800c590:	69b3      	ldr	r3, [r6, #24]
 800c592:	b913      	cbnz	r3, 800c59a <__sfp+0x16>
 800c594:	4630      	mov	r0, r6
 800c596:	f7ff ffbd 	bl	800c514 <__sinit>
 800c59a:	3648      	adds	r6, #72	; 0x48
 800c59c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c5a0:	3b01      	subs	r3, #1
 800c5a2:	d503      	bpl.n	800c5ac <__sfp+0x28>
 800c5a4:	6833      	ldr	r3, [r6, #0]
 800c5a6:	b30b      	cbz	r3, 800c5ec <__sfp+0x68>
 800c5a8:	6836      	ldr	r6, [r6, #0]
 800c5aa:	e7f7      	b.n	800c59c <__sfp+0x18>
 800c5ac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c5b0:	b9d5      	cbnz	r5, 800c5e8 <__sfp+0x64>
 800c5b2:	4b16      	ldr	r3, [pc, #88]	; (800c60c <__sfp+0x88>)
 800c5b4:	60e3      	str	r3, [r4, #12]
 800c5b6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c5ba:	6665      	str	r5, [r4, #100]	; 0x64
 800c5bc:	f000 f847 	bl	800c64e <__retarget_lock_init_recursive>
 800c5c0:	f7ff ff96 	bl	800c4f0 <__sfp_lock_release>
 800c5c4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c5c8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c5cc:	6025      	str	r5, [r4, #0]
 800c5ce:	61a5      	str	r5, [r4, #24]
 800c5d0:	2208      	movs	r2, #8
 800c5d2:	4629      	mov	r1, r5
 800c5d4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c5d8:	f7ff ff04 	bl	800c3e4 <memset>
 800c5dc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c5e0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c5e4:	4620      	mov	r0, r4
 800c5e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c5e8:	3468      	adds	r4, #104	; 0x68
 800c5ea:	e7d9      	b.n	800c5a0 <__sfp+0x1c>
 800c5ec:	2104      	movs	r1, #4
 800c5ee:	4638      	mov	r0, r7
 800c5f0:	f7ff ff62 	bl	800c4b8 <__sfmoreglue>
 800c5f4:	4604      	mov	r4, r0
 800c5f6:	6030      	str	r0, [r6, #0]
 800c5f8:	2800      	cmp	r0, #0
 800c5fa:	d1d5      	bne.n	800c5a8 <__sfp+0x24>
 800c5fc:	f7ff ff78 	bl	800c4f0 <__sfp_lock_release>
 800c600:	230c      	movs	r3, #12
 800c602:	603b      	str	r3, [r7, #0]
 800c604:	e7ee      	b.n	800c5e4 <__sfp+0x60>
 800c606:	bf00      	nop
 800c608:	0800dc00 	.word	0x0800dc00
 800c60c:	ffff0001 	.word	0xffff0001

0800c610 <_fwalk_reent>:
 800c610:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c614:	4606      	mov	r6, r0
 800c616:	4688      	mov	r8, r1
 800c618:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c61c:	2700      	movs	r7, #0
 800c61e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c622:	f1b9 0901 	subs.w	r9, r9, #1
 800c626:	d505      	bpl.n	800c634 <_fwalk_reent+0x24>
 800c628:	6824      	ldr	r4, [r4, #0]
 800c62a:	2c00      	cmp	r4, #0
 800c62c:	d1f7      	bne.n	800c61e <_fwalk_reent+0xe>
 800c62e:	4638      	mov	r0, r7
 800c630:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c634:	89ab      	ldrh	r3, [r5, #12]
 800c636:	2b01      	cmp	r3, #1
 800c638:	d907      	bls.n	800c64a <_fwalk_reent+0x3a>
 800c63a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c63e:	3301      	adds	r3, #1
 800c640:	d003      	beq.n	800c64a <_fwalk_reent+0x3a>
 800c642:	4629      	mov	r1, r5
 800c644:	4630      	mov	r0, r6
 800c646:	47c0      	blx	r8
 800c648:	4307      	orrs	r7, r0
 800c64a:	3568      	adds	r5, #104	; 0x68
 800c64c:	e7e9      	b.n	800c622 <_fwalk_reent+0x12>

0800c64e <__retarget_lock_init_recursive>:
 800c64e:	4770      	bx	lr

0800c650 <__retarget_lock_acquire_recursive>:
 800c650:	4770      	bx	lr

0800c652 <__retarget_lock_release_recursive>:
 800c652:	4770      	bx	lr

0800c654 <sbrk_aligned>:
 800c654:	b570      	push	{r4, r5, r6, lr}
 800c656:	4e0e      	ldr	r6, [pc, #56]	; (800c690 <sbrk_aligned+0x3c>)
 800c658:	460c      	mov	r4, r1
 800c65a:	6831      	ldr	r1, [r6, #0]
 800c65c:	4605      	mov	r5, r0
 800c65e:	b911      	cbnz	r1, 800c666 <sbrk_aligned+0x12>
 800c660:	f000 fcd6 	bl	800d010 <_sbrk_r>
 800c664:	6030      	str	r0, [r6, #0]
 800c666:	4621      	mov	r1, r4
 800c668:	4628      	mov	r0, r5
 800c66a:	f000 fcd1 	bl	800d010 <_sbrk_r>
 800c66e:	1c43      	adds	r3, r0, #1
 800c670:	d00a      	beq.n	800c688 <sbrk_aligned+0x34>
 800c672:	1cc4      	adds	r4, r0, #3
 800c674:	f024 0403 	bic.w	r4, r4, #3
 800c678:	42a0      	cmp	r0, r4
 800c67a:	d007      	beq.n	800c68c <sbrk_aligned+0x38>
 800c67c:	1a21      	subs	r1, r4, r0
 800c67e:	4628      	mov	r0, r5
 800c680:	f000 fcc6 	bl	800d010 <_sbrk_r>
 800c684:	3001      	adds	r0, #1
 800c686:	d101      	bne.n	800c68c <sbrk_aligned+0x38>
 800c688:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800c68c:	4620      	mov	r0, r4
 800c68e:	bd70      	pop	{r4, r5, r6, pc}
 800c690:	20000e9c 	.word	0x20000e9c

0800c694 <_malloc_r>:
 800c694:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c698:	1ccd      	adds	r5, r1, #3
 800c69a:	f025 0503 	bic.w	r5, r5, #3
 800c69e:	3508      	adds	r5, #8
 800c6a0:	2d0c      	cmp	r5, #12
 800c6a2:	bf38      	it	cc
 800c6a4:	250c      	movcc	r5, #12
 800c6a6:	2d00      	cmp	r5, #0
 800c6a8:	4607      	mov	r7, r0
 800c6aa:	db01      	blt.n	800c6b0 <_malloc_r+0x1c>
 800c6ac:	42a9      	cmp	r1, r5
 800c6ae:	d905      	bls.n	800c6bc <_malloc_r+0x28>
 800c6b0:	230c      	movs	r3, #12
 800c6b2:	603b      	str	r3, [r7, #0]
 800c6b4:	2600      	movs	r6, #0
 800c6b6:	4630      	mov	r0, r6
 800c6b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c6bc:	4e2e      	ldr	r6, [pc, #184]	; (800c778 <_malloc_r+0xe4>)
 800c6be:	f000 ff31 	bl	800d524 <__malloc_lock>
 800c6c2:	6833      	ldr	r3, [r6, #0]
 800c6c4:	461c      	mov	r4, r3
 800c6c6:	bb34      	cbnz	r4, 800c716 <_malloc_r+0x82>
 800c6c8:	4629      	mov	r1, r5
 800c6ca:	4638      	mov	r0, r7
 800c6cc:	f7ff ffc2 	bl	800c654 <sbrk_aligned>
 800c6d0:	1c43      	adds	r3, r0, #1
 800c6d2:	4604      	mov	r4, r0
 800c6d4:	d14d      	bne.n	800c772 <_malloc_r+0xde>
 800c6d6:	6834      	ldr	r4, [r6, #0]
 800c6d8:	4626      	mov	r6, r4
 800c6da:	2e00      	cmp	r6, #0
 800c6dc:	d140      	bne.n	800c760 <_malloc_r+0xcc>
 800c6de:	6823      	ldr	r3, [r4, #0]
 800c6e0:	4631      	mov	r1, r6
 800c6e2:	4638      	mov	r0, r7
 800c6e4:	eb04 0803 	add.w	r8, r4, r3
 800c6e8:	f000 fc92 	bl	800d010 <_sbrk_r>
 800c6ec:	4580      	cmp	r8, r0
 800c6ee:	d13a      	bne.n	800c766 <_malloc_r+0xd2>
 800c6f0:	6821      	ldr	r1, [r4, #0]
 800c6f2:	3503      	adds	r5, #3
 800c6f4:	1a6d      	subs	r5, r5, r1
 800c6f6:	f025 0503 	bic.w	r5, r5, #3
 800c6fa:	3508      	adds	r5, #8
 800c6fc:	2d0c      	cmp	r5, #12
 800c6fe:	bf38      	it	cc
 800c700:	250c      	movcc	r5, #12
 800c702:	4629      	mov	r1, r5
 800c704:	4638      	mov	r0, r7
 800c706:	f7ff ffa5 	bl	800c654 <sbrk_aligned>
 800c70a:	3001      	adds	r0, #1
 800c70c:	d02b      	beq.n	800c766 <_malloc_r+0xd2>
 800c70e:	6823      	ldr	r3, [r4, #0]
 800c710:	442b      	add	r3, r5
 800c712:	6023      	str	r3, [r4, #0]
 800c714:	e00e      	b.n	800c734 <_malloc_r+0xa0>
 800c716:	6822      	ldr	r2, [r4, #0]
 800c718:	1b52      	subs	r2, r2, r5
 800c71a:	d41e      	bmi.n	800c75a <_malloc_r+0xc6>
 800c71c:	2a0b      	cmp	r2, #11
 800c71e:	d916      	bls.n	800c74e <_malloc_r+0xba>
 800c720:	1961      	adds	r1, r4, r5
 800c722:	42a3      	cmp	r3, r4
 800c724:	6025      	str	r5, [r4, #0]
 800c726:	bf18      	it	ne
 800c728:	6059      	strne	r1, [r3, #4]
 800c72a:	6863      	ldr	r3, [r4, #4]
 800c72c:	bf08      	it	eq
 800c72e:	6031      	streq	r1, [r6, #0]
 800c730:	5162      	str	r2, [r4, r5]
 800c732:	604b      	str	r3, [r1, #4]
 800c734:	4638      	mov	r0, r7
 800c736:	f104 060b 	add.w	r6, r4, #11
 800c73a:	f000 fef9 	bl	800d530 <__malloc_unlock>
 800c73e:	f026 0607 	bic.w	r6, r6, #7
 800c742:	1d23      	adds	r3, r4, #4
 800c744:	1af2      	subs	r2, r6, r3
 800c746:	d0b6      	beq.n	800c6b6 <_malloc_r+0x22>
 800c748:	1b9b      	subs	r3, r3, r6
 800c74a:	50a3      	str	r3, [r4, r2]
 800c74c:	e7b3      	b.n	800c6b6 <_malloc_r+0x22>
 800c74e:	6862      	ldr	r2, [r4, #4]
 800c750:	42a3      	cmp	r3, r4
 800c752:	bf0c      	ite	eq
 800c754:	6032      	streq	r2, [r6, #0]
 800c756:	605a      	strne	r2, [r3, #4]
 800c758:	e7ec      	b.n	800c734 <_malloc_r+0xa0>
 800c75a:	4623      	mov	r3, r4
 800c75c:	6864      	ldr	r4, [r4, #4]
 800c75e:	e7b2      	b.n	800c6c6 <_malloc_r+0x32>
 800c760:	4634      	mov	r4, r6
 800c762:	6876      	ldr	r6, [r6, #4]
 800c764:	e7b9      	b.n	800c6da <_malloc_r+0x46>
 800c766:	230c      	movs	r3, #12
 800c768:	603b      	str	r3, [r7, #0]
 800c76a:	4638      	mov	r0, r7
 800c76c:	f000 fee0 	bl	800d530 <__malloc_unlock>
 800c770:	e7a1      	b.n	800c6b6 <_malloc_r+0x22>
 800c772:	6025      	str	r5, [r4, #0]
 800c774:	e7de      	b.n	800c734 <_malloc_r+0xa0>
 800c776:	bf00      	nop
 800c778:	20000e98 	.word	0x20000e98

0800c77c <__ssputs_r>:
 800c77c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c780:	688e      	ldr	r6, [r1, #8]
 800c782:	429e      	cmp	r6, r3
 800c784:	4682      	mov	sl, r0
 800c786:	460c      	mov	r4, r1
 800c788:	4690      	mov	r8, r2
 800c78a:	461f      	mov	r7, r3
 800c78c:	d838      	bhi.n	800c800 <__ssputs_r+0x84>
 800c78e:	898a      	ldrh	r2, [r1, #12]
 800c790:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c794:	d032      	beq.n	800c7fc <__ssputs_r+0x80>
 800c796:	6825      	ldr	r5, [r4, #0]
 800c798:	6909      	ldr	r1, [r1, #16]
 800c79a:	eba5 0901 	sub.w	r9, r5, r1
 800c79e:	6965      	ldr	r5, [r4, #20]
 800c7a0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c7a4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c7a8:	3301      	adds	r3, #1
 800c7aa:	444b      	add	r3, r9
 800c7ac:	106d      	asrs	r5, r5, #1
 800c7ae:	429d      	cmp	r5, r3
 800c7b0:	bf38      	it	cc
 800c7b2:	461d      	movcc	r5, r3
 800c7b4:	0553      	lsls	r3, r2, #21
 800c7b6:	d531      	bpl.n	800c81c <__ssputs_r+0xa0>
 800c7b8:	4629      	mov	r1, r5
 800c7ba:	f7ff ff6b 	bl	800c694 <_malloc_r>
 800c7be:	4606      	mov	r6, r0
 800c7c0:	b950      	cbnz	r0, 800c7d8 <__ssputs_r+0x5c>
 800c7c2:	230c      	movs	r3, #12
 800c7c4:	f8ca 3000 	str.w	r3, [sl]
 800c7c8:	89a3      	ldrh	r3, [r4, #12]
 800c7ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c7ce:	81a3      	strh	r3, [r4, #12]
 800c7d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c7d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c7d8:	6921      	ldr	r1, [r4, #16]
 800c7da:	464a      	mov	r2, r9
 800c7dc:	f7ff fdf4 	bl	800c3c8 <memcpy>
 800c7e0:	89a3      	ldrh	r3, [r4, #12]
 800c7e2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c7e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c7ea:	81a3      	strh	r3, [r4, #12]
 800c7ec:	6126      	str	r6, [r4, #16]
 800c7ee:	6165      	str	r5, [r4, #20]
 800c7f0:	444e      	add	r6, r9
 800c7f2:	eba5 0509 	sub.w	r5, r5, r9
 800c7f6:	6026      	str	r6, [r4, #0]
 800c7f8:	60a5      	str	r5, [r4, #8]
 800c7fa:	463e      	mov	r6, r7
 800c7fc:	42be      	cmp	r6, r7
 800c7fe:	d900      	bls.n	800c802 <__ssputs_r+0x86>
 800c800:	463e      	mov	r6, r7
 800c802:	6820      	ldr	r0, [r4, #0]
 800c804:	4632      	mov	r2, r6
 800c806:	4641      	mov	r1, r8
 800c808:	f000 fe72 	bl	800d4f0 <memmove>
 800c80c:	68a3      	ldr	r3, [r4, #8]
 800c80e:	1b9b      	subs	r3, r3, r6
 800c810:	60a3      	str	r3, [r4, #8]
 800c812:	6823      	ldr	r3, [r4, #0]
 800c814:	4433      	add	r3, r6
 800c816:	6023      	str	r3, [r4, #0]
 800c818:	2000      	movs	r0, #0
 800c81a:	e7db      	b.n	800c7d4 <__ssputs_r+0x58>
 800c81c:	462a      	mov	r2, r5
 800c81e:	f000 fed9 	bl	800d5d4 <_realloc_r>
 800c822:	4606      	mov	r6, r0
 800c824:	2800      	cmp	r0, #0
 800c826:	d1e1      	bne.n	800c7ec <__ssputs_r+0x70>
 800c828:	6921      	ldr	r1, [r4, #16]
 800c82a:	4650      	mov	r0, sl
 800c82c:	f000 fe86 	bl	800d53c <_free_r>
 800c830:	e7c7      	b.n	800c7c2 <__ssputs_r+0x46>
	...

0800c834 <_svfiprintf_r>:
 800c834:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c838:	4698      	mov	r8, r3
 800c83a:	898b      	ldrh	r3, [r1, #12]
 800c83c:	061b      	lsls	r3, r3, #24
 800c83e:	b09d      	sub	sp, #116	; 0x74
 800c840:	4607      	mov	r7, r0
 800c842:	460d      	mov	r5, r1
 800c844:	4614      	mov	r4, r2
 800c846:	d50e      	bpl.n	800c866 <_svfiprintf_r+0x32>
 800c848:	690b      	ldr	r3, [r1, #16]
 800c84a:	b963      	cbnz	r3, 800c866 <_svfiprintf_r+0x32>
 800c84c:	2140      	movs	r1, #64	; 0x40
 800c84e:	f7ff ff21 	bl	800c694 <_malloc_r>
 800c852:	6028      	str	r0, [r5, #0]
 800c854:	6128      	str	r0, [r5, #16]
 800c856:	b920      	cbnz	r0, 800c862 <_svfiprintf_r+0x2e>
 800c858:	230c      	movs	r3, #12
 800c85a:	603b      	str	r3, [r7, #0]
 800c85c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c860:	e0d1      	b.n	800ca06 <_svfiprintf_r+0x1d2>
 800c862:	2340      	movs	r3, #64	; 0x40
 800c864:	616b      	str	r3, [r5, #20]
 800c866:	2300      	movs	r3, #0
 800c868:	9309      	str	r3, [sp, #36]	; 0x24
 800c86a:	2320      	movs	r3, #32
 800c86c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c870:	f8cd 800c 	str.w	r8, [sp, #12]
 800c874:	2330      	movs	r3, #48	; 0x30
 800c876:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ca20 <_svfiprintf_r+0x1ec>
 800c87a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c87e:	f04f 0901 	mov.w	r9, #1
 800c882:	4623      	mov	r3, r4
 800c884:	469a      	mov	sl, r3
 800c886:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c88a:	b10a      	cbz	r2, 800c890 <_svfiprintf_r+0x5c>
 800c88c:	2a25      	cmp	r2, #37	; 0x25
 800c88e:	d1f9      	bne.n	800c884 <_svfiprintf_r+0x50>
 800c890:	ebba 0b04 	subs.w	fp, sl, r4
 800c894:	d00b      	beq.n	800c8ae <_svfiprintf_r+0x7a>
 800c896:	465b      	mov	r3, fp
 800c898:	4622      	mov	r2, r4
 800c89a:	4629      	mov	r1, r5
 800c89c:	4638      	mov	r0, r7
 800c89e:	f7ff ff6d 	bl	800c77c <__ssputs_r>
 800c8a2:	3001      	adds	r0, #1
 800c8a4:	f000 80aa 	beq.w	800c9fc <_svfiprintf_r+0x1c8>
 800c8a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c8aa:	445a      	add	r2, fp
 800c8ac:	9209      	str	r2, [sp, #36]	; 0x24
 800c8ae:	f89a 3000 	ldrb.w	r3, [sl]
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	f000 80a2 	beq.w	800c9fc <_svfiprintf_r+0x1c8>
 800c8b8:	2300      	movs	r3, #0
 800c8ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c8be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c8c2:	f10a 0a01 	add.w	sl, sl, #1
 800c8c6:	9304      	str	r3, [sp, #16]
 800c8c8:	9307      	str	r3, [sp, #28]
 800c8ca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c8ce:	931a      	str	r3, [sp, #104]	; 0x68
 800c8d0:	4654      	mov	r4, sl
 800c8d2:	2205      	movs	r2, #5
 800c8d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c8d8:	4851      	ldr	r0, [pc, #324]	; (800ca20 <_svfiprintf_r+0x1ec>)
 800c8da:	f7f3 fc59 	bl	8000190 <memchr>
 800c8de:	9a04      	ldr	r2, [sp, #16]
 800c8e0:	b9d8      	cbnz	r0, 800c91a <_svfiprintf_r+0xe6>
 800c8e2:	06d0      	lsls	r0, r2, #27
 800c8e4:	bf44      	itt	mi
 800c8e6:	2320      	movmi	r3, #32
 800c8e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c8ec:	0711      	lsls	r1, r2, #28
 800c8ee:	bf44      	itt	mi
 800c8f0:	232b      	movmi	r3, #43	; 0x2b
 800c8f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c8f6:	f89a 3000 	ldrb.w	r3, [sl]
 800c8fa:	2b2a      	cmp	r3, #42	; 0x2a
 800c8fc:	d015      	beq.n	800c92a <_svfiprintf_r+0xf6>
 800c8fe:	9a07      	ldr	r2, [sp, #28]
 800c900:	4654      	mov	r4, sl
 800c902:	2000      	movs	r0, #0
 800c904:	f04f 0c0a 	mov.w	ip, #10
 800c908:	4621      	mov	r1, r4
 800c90a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c90e:	3b30      	subs	r3, #48	; 0x30
 800c910:	2b09      	cmp	r3, #9
 800c912:	d94e      	bls.n	800c9b2 <_svfiprintf_r+0x17e>
 800c914:	b1b0      	cbz	r0, 800c944 <_svfiprintf_r+0x110>
 800c916:	9207      	str	r2, [sp, #28]
 800c918:	e014      	b.n	800c944 <_svfiprintf_r+0x110>
 800c91a:	eba0 0308 	sub.w	r3, r0, r8
 800c91e:	fa09 f303 	lsl.w	r3, r9, r3
 800c922:	4313      	orrs	r3, r2
 800c924:	9304      	str	r3, [sp, #16]
 800c926:	46a2      	mov	sl, r4
 800c928:	e7d2      	b.n	800c8d0 <_svfiprintf_r+0x9c>
 800c92a:	9b03      	ldr	r3, [sp, #12]
 800c92c:	1d19      	adds	r1, r3, #4
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	9103      	str	r1, [sp, #12]
 800c932:	2b00      	cmp	r3, #0
 800c934:	bfbb      	ittet	lt
 800c936:	425b      	neglt	r3, r3
 800c938:	f042 0202 	orrlt.w	r2, r2, #2
 800c93c:	9307      	strge	r3, [sp, #28]
 800c93e:	9307      	strlt	r3, [sp, #28]
 800c940:	bfb8      	it	lt
 800c942:	9204      	strlt	r2, [sp, #16]
 800c944:	7823      	ldrb	r3, [r4, #0]
 800c946:	2b2e      	cmp	r3, #46	; 0x2e
 800c948:	d10c      	bne.n	800c964 <_svfiprintf_r+0x130>
 800c94a:	7863      	ldrb	r3, [r4, #1]
 800c94c:	2b2a      	cmp	r3, #42	; 0x2a
 800c94e:	d135      	bne.n	800c9bc <_svfiprintf_r+0x188>
 800c950:	9b03      	ldr	r3, [sp, #12]
 800c952:	1d1a      	adds	r2, r3, #4
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	9203      	str	r2, [sp, #12]
 800c958:	2b00      	cmp	r3, #0
 800c95a:	bfb8      	it	lt
 800c95c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c960:	3402      	adds	r4, #2
 800c962:	9305      	str	r3, [sp, #20]
 800c964:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ca30 <_svfiprintf_r+0x1fc>
 800c968:	7821      	ldrb	r1, [r4, #0]
 800c96a:	2203      	movs	r2, #3
 800c96c:	4650      	mov	r0, sl
 800c96e:	f7f3 fc0f 	bl	8000190 <memchr>
 800c972:	b140      	cbz	r0, 800c986 <_svfiprintf_r+0x152>
 800c974:	2340      	movs	r3, #64	; 0x40
 800c976:	eba0 000a 	sub.w	r0, r0, sl
 800c97a:	fa03 f000 	lsl.w	r0, r3, r0
 800c97e:	9b04      	ldr	r3, [sp, #16]
 800c980:	4303      	orrs	r3, r0
 800c982:	3401      	adds	r4, #1
 800c984:	9304      	str	r3, [sp, #16]
 800c986:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c98a:	4826      	ldr	r0, [pc, #152]	; (800ca24 <_svfiprintf_r+0x1f0>)
 800c98c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c990:	2206      	movs	r2, #6
 800c992:	f7f3 fbfd 	bl	8000190 <memchr>
 800c996:	2800      	cmp	r0, #0
 800c998:	d038      	beq.n	800ca0c <_svfiprintf_r+0x1d8>
 800c99a:	4b23      	ldr	r3, [pc, #140]	; (800ca28 <_svfiprintf_r+0x1f4>)
 800c99c:	bb1b      	cbnz	r3, 800c9e6 <_svfiprintf_r+0x1b2>
 800c99e:	9b03      	ldr	r3, [sp, #12]
 800c9a0:	3307      	adds	r3, #7
 800c9a2:	f023 0307 	bic.w	r3, r3, #7
 800c9a6:	3308      	adds	r3, #8
 800c9a8:	9303      	str	r3, [sp, #12]
 800c9aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c9ac:	4433      	add	r3, r6
 800c9ae:	9309      	str	r3, [sp, #36]	; 0x24
 800c9b0:	e767      	b.n	800c882 <_svfiprintf_r+0x4e>
 800c9b2:	fb0c 3202 	mla	r2, ip, r2, r3
 800c9b6:	460c      	mov	r4, r1
 800c9b8:	2001      	movs	r0, #1
 800c9ba:	e7a5      	b.n	800c908 <_svfiprintf_r+0xd4>
 800c9bc:	2300      	movs	r3, #0
 800c9be:	3401      	adds	r4, #1
 800c9c0:	9305      	str	r3, [sp, #20]
 800c9c2:	4619      	mov	r1, r3
 800c9c4:	f04f 0c0a 	mov.w	ip, #10
 800c9c8:	4620      	mov	r0, r4
 800c9ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c9ce:	3a30      	subs	r2, #48	; 0x30
 800c9d0:	2a09      	cmp	r2, #9
 800c9d2:	d903      	bls.n	800c9dc <_svfiprintf_r+0x1a8>
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	d0c5      	beq.n	800c964 <_svfiprintf_r+0x130>
 800c9d8:	9105      	str	r1, [sp, #20]
 800c9da:	e7c3      	b.n	800c964 <_svfiprintf_r+0x130>
 800c9dc:	fb0c 2101 	mla	r1, ip, r1, r2
 800c9e0:	4604      	mov	r4, r0
 800c9e2:	2301      	movs	r3, #1
 800c9e4:	e7f0      	b.n	800c9c8 <_svfiprintf_r+0x194>
 800c9e6:	ab03      	add	r3, sp, #12
 800c9e8:	9300      	str	r3, [sp, #0]
 800c9ea:	462a      	mov	r2, r5
 800c9ec:	4b0f      	ldr	r3, [pc, #60]	; (800ca2c <_svfiprintf_r+0x1f8>)
 800c9ee:	a904      	add	r1, sp, #16
 800c9f0:	4638      	mov	r0, r7
 800c9f2:	f3af 8000 	nop.w
 800c9f6:	1c42      	adds	r2, r0, #1
 800c9f8:	4606      	mov	r6, r0
 800c9fa:	d1d6      	bne.n	800c9aa <_svfiprintf_r+0x176>
 800c9fc:	89ab      	ldrh	r3, [r5, #12]
 800c9fe:	065b      	lsls	r3, r3, #25
 800ca00:	f53f af2c 	bmi.w	800c85c <_svfiprintf_r+0x28>
 800ca04:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ca06:	b01d      	add	sp, #116	; 0x74
 800ca08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca0c:	ab03      	add	r3, sp, #12
 800ca0e:	9300      	str	r3, [sp, #0]
 800ca10:	462a      	mov	r2, r5
 800ca12:	4b06      	ldr	r3, [pc, #24]	; (800ca2c <_svfiprintf_r+0x1f8>)
 800ca14:	a904      	add	r1, sp, #16
 800ca16:	4638      	mov	r0, r7
 800ca18:	f000 f9d4 	bl	800cdc4 <_printf_i>
 800ca1c:	e7eb      	b.n	800c9f6 <_svfiprintf_r+0x1c2>
 800ca1e:	bf00      	nop
 800ca20:	0800dc64 	.word	0x0800dc64
 800ca24:	0800dc6e 	.word	0x0800dc6e
 800ca28:	00000000 	.word	0x00000000
 800ca2c:	0800c77d 	.word	0x0800c77d
 800ca30:	0800dc6a 	.word	0x0800dc6a

0800ca34 <__sfputc_r>:
 800ca34:	6893      	ldr	r3, [r2, #8]
 800ca36:	3b01      	subs	r3, #1
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	b410      	push	{r4}
 800ca3c:	6093      	str	r3, [r2, #8]
 800ca3e:	da08      	bge.n	800ca52 <__sfputc_r+0x1e>
 800ca40:	6994      	ldr	r4, [r2, #24]
 800ca42:	42a3      	cmp	r3, r4
 800ca44:	db01      	blt.n	800ca4a <__sfputc_r+0x16>
 800ca46:	290a      	cmp	r1, #10
 800ca48:	d103      	bne.n	800ca52 <__sfputc_r+0x1e>
 800ca4a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ca4e:	f000 bb33 	b.w	800d0b8 <__swbuf_r>
 800ca52:	6813      	ldr	r3, [r2, #0]
 800ca54:	1c58      	adds	r0, r3, #1
 800ca56:	6010      	str	r0, [r2, #0]
 800ca58:	7019      	strb	r1, [r3, #0]
 800ca5a:	4608      	mov	r0, r1
 800ca5c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ca60:	4770      	bx	lr

0800ca62 <__sfputs_r>:
 800ca62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca64:	4606      	mov	r6, r0
 800ca66:	460f      	mov	r7, r1
 800ca68:	4614      	mov	r4, r2
 800ca6a:	18d5      	adds	r5, r2, r3
 800ca6c:	42ac      	cmp	r4, r5
 800ca6e:	d101      	bne.n	800ca74 <__sfputs_r+0x12>
 800ca70:	2000      	movs	r0, #0
 800ca72:	e007      	b.n	800ca84 <__sfputs_r+0x22>
 800ca74:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca78:	463a      	mov	r2, r7
 800ca7a:	4630      	mov	r0, r6
 800ca7c:	f7ff ffda 	bl	800ca34 <__sfputc_r>
 800ca80:	1c43      	adds	r3, r0, #1
 800ca82:	d1f3      	bne.n	800ca6c <__sfputs_r+0xa>
 800ca84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ca88 <_vfiprintf_r>:
 800ca88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca8c:	460d      	mov	r5, r1
 800ca8e:	b09d      	sub	sp, #116	; 0x74
 800ca90:	4614      	mov	r4, r2
 800ca92:	4698      	mov	r8, r3
 800ca94:	4606      	mov	r6, r0
 800ca96:	b118      	cbz	r0, 800caa0 <_vfiprintf_r+0x18>
 800ca98:	6983      	ldr	r3, [r0, #24]
 800ca9a:	b90b      	cbnz	r3, 800caa0 <_vfiprintf_r+0x18>
 800ca9c:	f7ff fd3a 	bl	800c514 <__sinit>
 800caa0:	4b89      	ldr	r3, [pc, #548]	; (800ccc8 <_vfiprintf_r+0x240>)
 800caa2:	429d      	cmp	r5, r3
 800caa4:	d11b      	bne.n	800cade <_vfiprintf_r+0x56>
 800caa6:	6875      	ldr	r5, [r6, #4]
 800caa8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800caaa:	07d9      	lsls	r1, r3, #31
 800caac:	d405      	bmi.n	800caba <_vfiprintf_r+0x32>
 800caae:	89ab      	ldrh	r3, [r5, #12]
 800cab0:	059a      	lsls	r2, r3, #22
 800cab2:	d402      	bmi.n	800caba <_vfiprintf_r+0x32>
 800cab4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cab6:	f7ff fdcb 	bl	800c650 <__retarget_lock_acquire_recursive>
 800caba:	89ab      	ldrh	r3, [r5, #12]
 800cabc:	071b      	lsls	r3, r3, #28
 800cabe:	d501      	bpl.n	800cac4 <_vfiprintf_r+0x3c>
 800cac0:	692b      	ldr	r3, [r5, #16]
 800cac2:	b9eb      	cbnz	r3, 800cb00 <_vfiprintf_r+0x78>
 800cac4:	4629      	mov	r1, r5
 800cac6:	4630      	mov	r0, r6
 800cac8:	f000 fb5a 	bl	800d180 <__swsetup_r>
 800cacc:	b1c0      	cbz	r0, 800cb00 <_vfiprintf_r+0x78>
 800cace:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cad0:	07dc      	lsls	r4, r3, #31
 800cad2:	d50e      	bpl.n	800caf2 <_vfiprintf_r+0x6a>
 800cad4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cad8:	b01d      	add	sp, #116	; 0x74
 800cada:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cade:	4b7b      	ldr	r3, [pc, #492]	; (800cccc <_vfiprintf_r+0x244>)
 800cae0:	429d      	cmp	r5, r3
 800cae2:	d101      	bne.n	800cae8 <_vfiprintf_r+0x60>
 800cae4:	68b5      	ldr	r5, [r6, #8]
 800cae6:	e7df      	b.n	800caa8 <_vfiprintf_r+0x20>
 800cae8:	4b79      	ldr	r3, [pc, #484]	; (800ccd0 <_vfiprintf_r+0x248>)
 800caea:	429d      	cmp	r5, r3
 800caec:	bf08      	it	eq
 800caee:	68f5      	ldreq	r5, [r6, #12]
 800caf0:	e7da      	b.n	800caa8 <_vfiprintf_r+0x20>
 800caf2:	89ab      	ldrh	r3, [r5, #12]
 800caf4:	0598      	lsls	r0, r3, #22
 800caf6:	d4ed      	bmi.n	800cad4 <_vfiprintf_r+0x4c>
 800caf8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cafa:	f7ff fdaa 	bl	800c652 <__retarget_lock_release_recursive>
 800cafe:	e7e9      	b.n	800cad4 <_vfiprintf_r+0x4c>
 800cb00:	2300      	movs	r3, #0
 800cb02:	9309      	str	r3, [sp, #36]	; 0x24
 800cb04:	2320      	movs	r3, #32
 800cb06:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cb0a:	f8cd 800c 	str.w	r8, [sp, #12]
 800cb0e:	2330      	movs	r3, #48	; 0x30
 800cb10:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ccd4 <_vfiprintf_r+0x24c>
 800cb14:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cb18:	f04f 0901 	mov.w	r9, #1
 800cb1c:	4623      	mov	r3, r4
 800cb1e:	469a      	mov	sl, r3
 800cb20:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cb24:	b10a      	cbz	r2, 800cb2a <_vfiprintf_r+0xa2>
 800cb26:	2a25      	cmp	r2, #37	; 0x25
 800cb28:	d1f9      	bne.n	800cb1e <_vfiprintf_r+0x96>
 800cb2a:	ebba 0b04 	subs.w	fp, sl, r4
 800cb2e:	d00b      	beq.n	800cb48 <_vfiprintf_r+0xc0>
 800cb30:	465b      	mov	r3, fp
 800cb32:	4622      	mov	r2, r4
 800cb34:	4629      	mov	r1, r5
 800cb36:	4630      	mov	r0, r6
 800cb38:	f7ff ff93 	bl	800ca62 <__sfputs_r>
 800cb3c:	3001      	adds	r0, #1
 800cb3e:	f000 80aa 	beq.w	800cc96 <_vfiprintf_r+0x20e>
 800cb42:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cb44:	445a      	add	r2, fp
 800cb46:	9209      	str	r2, [sp, #36]	; 0x24
 800cb48:	f89a 3000 	ldrb.w	r3, [sl]
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	f000 80a2 	beq.w	800cc96 <_vfiprintf_r+0x20e>
 800cb52:	2300      	movs	r3, #0
 800cb54:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cb58:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cb5c:	f10a 0a01 	add.w	sl, sl, #1
 800cb60:	9304      	str	r3, [sp, #16]
 800cb62:	9307      	str	r3, [sp, #28]
 800cb64:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cb68:	931a      	str	r3, [sp, #104]	; 0x68
 800cb6a:	4654      	mov	r4, sl
 800cb6c:	2205      	movs	r2, #5
 800cb6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cb72:	4858      	ldr	r0, [pc, #352]	; (800ccd4 <_vfiprintf_r+0x24c>)
 800cb74:	f7f3 fb0c 	bl	8000190 <memchr>
 800cb78:	9a04      	ldr	r2, [sp, #16]
 800cb7a:	b9d8      	cbnz	r0, 800cbb4 <_vfiprintf_r+0x12c>
 800cb7c:	06d1      	lsls	r1, r2, #27
 800cb7e:	bf44      	itt	mi
 800cb80:	2320      	movmi	r3, #32
 800cb82:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cb86:	0713      	lsls	r3, r2, #28
 800cb88:	bf44      	itt	mi
 800cb8a:	232b      	movmi	r3, #43	; 0x2b
 800cb8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cb90:	f89a 3000 	ldrb.w	r3, [sl]
 800cb94:	2b2a      	cmp	r3, #42	; 0x2a
 800cb96:	d015      	beq.n	800cbc4 <_vfiprintf_r+0x13c>
 800cb98:	9a07      	ldr	r2, [sp, #28]
 800cb9a:	4654      	mov	r4, sl
 800cb9c:	2000      	movs	r0, #0
 800cb9e:	f04f 0c0a 	mov.w	ip, #10
 800cba2:	4621      	mov	r1, r4
 800cba4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cba8:	3b30      	subs	r3, #48	; 0x30
 800cbaa:	2b09      	cmp	r3, #9
 800cbac:	d94e      	bls.n	800cc4c <_vfiprintf_r+0x1c4>
 800cbae:	b1b0      	cbz	r0, 800cbde <_vfiprintf_r+0x156>
 800cbb0:	9207      	str	r2, [sp, #28]
 800cbb2:	e014      	b.n	800cbde <_vfiprintf_r+0x156>
 800cbb4:	eba0 0308 	sub.w	r3, r0, r8
 800cbb8:	fa09 f303 	lsl.w	r3, r9, r3
 800cbbc:	4313      	orrs	r3, r2
 800cbbe:	9304      	str	r3, [sp, #16]
 800cbc0:	46a2      	mov	sl, r4
 800cbc2:	e7d2      	b.n	800cb6a <_vfiprintf_r+0xe2>
 800cbc4:	9b03      	ldr	r3, [sp, #12]
 800cbc6:	1d19      	adds	r1, r3, #4
 800cbc8:	681b      	ldr	r3, [r3, #0]
 800cbca:	9103      	str	r1, [sp, #12]
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	bfbb      	ittet	lt
 800cbd0:	425b      	neglt	r3, r3
 800cbd2:	f042 0202 	orrlt.w	r2, r2, #2
 800cbd6:	9307      	strge	r3, [sp, #28]
 800cbd8:	9307      	strlt	r3, [sp, #28]
 800cbda:	bfb8      	it	lt
 800cbdc:	9204      	strlt	r2, [sp, #16]
 800cbde:	7823      	ldrb	r3, [r4, #0]
 800cbe0:	2b2e      	cmp	r3, #46	; 0x2e
 800cbe2:	d10c      	bne.n	800cbfe <_vfiprintf_r+0x176>
 800cbe4:	7863      	ldrb	r3, [r4, #1]
 800cbe6:	2b2a      	cmp	r3, #42	; 0x2a
 800cbe8:	d135      	bne.n	800cc56 <_vfiprintf_r+0x1ce>
 800cbea:	9b03      	ldr	r3, [sp, #12]
 800cbec:	1d1a      	adds	r2, r3, #4
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	9203      	str	r2, [sp, #12]
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	bfb8      	it	lt
 800cbf6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800cbfa:	3402      	adds	r4, #2
 800cbfc:	9305      	str	r3, [sp, #20]
 800cbfe:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800cce4 <_vfiprintf_r+0x25c>
 800cc02:	7821      	ldrb	r1, [r4, #0]
 800cc04:	2203      	movs	r2, #3
 800cc06:	4650      	mov	r0, sl
 800cc08:	f7f3 fac2 	bl	8000190 <memchr>
 800cc0c:	b140      	cbz	r0, 800cc20 <_vfiprintf_r+0x198>
 800cc0e:	2340      	movs	r3, #64	; 0x40
 800cc10:	eba0 000a 	sub.w	r0, r0, sl
 800cc14:	fa03 f000 	lsl.w	r0, r3, r0
 800cc18:	9b04      	ldr	r3, [sp, #16]
 800cc1a:	4303      	orrs	r3, r0
 800cc1c:	3401      	adds	r4, #1
 800cc1e:	9304      	str	r3, [sp, #16]
 800cc20:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cc24:	482c      	ldr	r0, [pc, #176]	; (800ccd8 <_vfiprintf_r+0x250>)
 800cc26:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cc2a:	2206      	movs	r2, #6
 800cc2c:	f7f3 fab0 	bl	8000190 <memchr>
 800cc30:	2800      	cmp	r0, #0
 800cc32:	d03f      	beq.n	800ccb4 <_vfiprintf_r+0x22c>
 800cc34:	4b29      	ldr	r3, [pc, #164]	; (800ccdc <_vfiprintf_r+0x254>)
 800cc36:	bb1b      	cbnz	r3, 800cc80 <_vfiprintf_r+0x1f8>
 800cc38:	9b03      	ldr	r3, [sp, #12]
 800cc3a:	3307      	adds	r3, #7
 800cc3c:	f023 0307 	bic.w	r3, r3, #7
 800cc40:	3308      	adds	r3, #8
 800cc42:	9303      	str	r3, [sp, #12]
 800cc44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc46:	443b      	add	r3, r7
 800cc48:	9309      	str	r3, [sp, #36]	; 0x24
 800cc4a:	e767      	b.n	800cb1c <_vfiprintf_r+0x94>
 800cc4c:	fb0c 3202 	mla	r2, ip, r2, r3
 800cc50:	460c      	mov	r4, r1
 800cc52:	2001      	movs	r0, #1
 800cc54:	e7a5      	b.n	800cba2 <_vfiprintf_r+0x11a>
 800cc56:	2300      	movs	r3, #0
 800cc58:	3401      	adds	r4, #1
 800cc5a:	9305      	str	r3, [sp, #20]
 800cc5c:	4619      	mov	r1, r3
 800cc5e:	f04f 0c0a 	mov.w	ip, #10
 800cc62:	4620      	mov	r0, r4
 800cc64:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cc68:	3a30      	subs	r2, #48	; 0x30
 800cc6a:	2a09      	cmp	r2, #9
 800cc6c:	d903      	bls.n	800cc76 <_vfiprintf_r+0x1ee>
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d0c5      	beq.n	800cbfe <_vfiprintf_r+0x176>
 800cc72:	9105      	str	r1, [sp, #20]
 800cc74:	e7c3      	b.n	800cbfe <_vfiprintf_r+0x176>
 800cc76:	fb0c 2101 	mla	r1, ip, r1, r2
 800cc7a:	4604      	mov	r4, r0
 800cc7c:	2301      	movs	r3, #1
 800cc7e:	e7f0      	b.n	800cc62 <_vfiprintf_r+0x1da>
 800cc80:	ab03      	add	r3, sp, #12
 800cc82:	9300      	str	r3, [sp, #0]
 800cc84:	462a      	mov	r2, r5
 800cc86:	4b16      	ldr	r3, [pc, #88]	; (800cce0 <_vfiprintf_r+0x258>)
 800cc88:	a904      	add	r1, sp, #16
 800cc8a:	4630      	mov	r0, r6
 800cc8c:	f3af 8000 	nop.w
 800cc90:	4607      	mov	r7, r0
 800cc92:	1c78      	adds	r0, r7, #1
 800cc94:	d1d6      	bne.n	800cc44 <_vfiprintf_r+0x1bc>
 800cc96:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cc98:	07d9      	lsls	r1, r3, #31
 800cc9a:	d405      	bmi.n	800cca8 <_vfiprintf_r+0x220>
 800cc9c:	89ab      	ldrh	r3, [r5, #12]
 800cc9e:	059a      	lsls	r2, r3, #22
 800cca0:	d402      	bmi.n	800cca8 <_vfiprintf_r+0x220>
 800cca2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cca4:	f7ff fcd5 	bl	800c652 <__retarget_lock_release_recursive>
 800cca8:	89ab      	ldrh	r3, [r5, #12]
 800ccaa:	065b      	lsls	r3, r3, #25
 800ccac:	f53f af12 	bmi.w	800cad4 <_vfiprintf_r+0x4c>
 800ccb0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ccb2:	e711      	b.n	800cad8 <_vfiprintf_r+0x50>
 800ccb4:	ab03      	add	r3, sp, #12
 800ccb6:	9300      	str	r3, [sp, #0]
 800ccb8:	462a      	mov	r2, r5
 800ccba:	4b09      	ldr	r3, [pc, #36]	; (800cce0 <_vfiprintf_r+0x258>)
 800ccbc:	a904      	add	r1, sp, #16
 800ccbe:	4630      	mov	r0, r6
 800ccc0:	f000 f880 	bl	800cdc4 <_printf_i>
 800ccc4:	e7e4      	b.n	800cc90 <_vfiprintf_r+0x208>
 800ccc6:	bf00      	nop
 800ccc8:	0800dc24 	.word	0x0800dc24
 800cccc:	0800dc44 	.word	0x0800dc44
 800ccd0:	0800dc04 	.word	0x0800dc04
 800ccd4:	0800dc64 	.word	0x0800dc64
 800ccd8:	0800dc6e 	.word	0x0800dc6e
 800ccdc:	00000000 	.word	0x00000000
 800cce0:	0800ca63 	.word	0x0800ca63
 800cce4:	0800dc6a 	.word	0x0800dc6a

0800cce8 <_printf_common>:
 800cce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ccec:	4616      	mov	r6, r2
 800ccee:	4699      	mov	r9, r3
 800ccf0:	688a      	ldr	r2, [r1, #8]
 800ccf2:	690b      	ldr	r3, [r1, #16]
 800ccf4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ccf8:	4293      	cmp	r3, r2
 800ccfa:	bfb8      	it	lt
 800ccfc:	4613      	movlt	r3, r2
 800ccfe:	6033      	str	r3, [r6, #0]
 800cd00:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cd04:	4607      	mov	r7, r0
 800cd06:	460c      	mov	r4, r1
 800cd08:	b10a      	cbz	r2, 800cd0e <_printf_common+0x26>
 800cd0a:	3301      	adds	r3, #1
 800cd0c:	6033      	str	r3, [r6, #0]
 800cd0e:	6823      	ldr	r3, [r4, #0]
 800cd10:	0699      	lsls	r1, r3, #26
 800cd12:	bf42      	ittt	mi
 800cd14:	6833      	ldrmi	r3, [r6, #0]
 800cd16:	3302      	addmi	r3, #2
 800cd18:	6033      	strmi	r3, [r6, #0]
 800cd1a:	6825      	ldr	r5, [r4, #0]
 800cd1c:	f015 0506 	ands.w	r5, r5, #6
 800cd20:	d106      	bne.n	800cd30 <_printf_common+0x48>
 800cd22:	f104 0a19 	add.w	sl, r4, #25
 800cd26:	68e3      	ldr	r3, [r4, #12]
 800cd28:	6832      	ldr	r2, [r6, #0]
 800cd2a:	1a9b      	subs	r3, r3, r2
 800cd2c:	42ab      	cmp	r3, r5
 800cd2e:	dc26      	bgt.n	800cd7e <_printf_common+0x96>
 800cd30:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800cd34:	1e13      	subs	r3, r2, #0
 800cd36:	6822      	ldr	r2, [r4, #0]
 800cd38:	bf18      	it	ne
 800cd3a:	2301      	movne	r3, #1
 800cd3c:	0692      	lsls	r2, r2, #26
 800cd3e:	d42b      	bmi.n	800cd98 <_printf_common+0xb0>
 800cd40:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cd44:	4649      	mov	r1, r9
 800cd46:	4638      	mov	r0, r7
 800cd48:	47c0      	blx	r8
 800cd4a:	3001      	adds	r0, #1
 800cd4c:	d01e      	beq.n	800cd8c <_printf_common+0xa4>
 800cd4e:	6823      	ldr	r3, [r4, #0]
 800cd50:	68e5      	ldr	r5, [r4, #12]
 800cd52:	6832      	ldr	r2, [r6, #0]
 800cd54:	f003 0306 	and.w	r3, r3, #6
 800cd58:	2b04      	cmp	r3, #4
 800cd5a:	bf08      	it	eq
 800cd5c:	1aad      	subeq	r5, r5, r2
 800cd5e:	68a3      	ldr	r3, [r4, #8]
 800cd60:	6922      	ldr	r2, [r4, #16]
 800cd62:	bf0c      	ite	eq
 800cd64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cd68:	2500      	movne	r5, #0
 800cd6a:	4293      	cmp	r3, r2
 800cd6c:	bfc4      	itt	gt
 800cd6e:	1a9b      	subgt	r3, r3, r2
 800cd70:	18ed      	addgt	r5, r5, r3
 800cd72:	2600      	movs	r6, #0
 800cd74:	341a      	adds	r4, #26
 800cd76:	42b5      	cmp	r5, r6
 800cd78:	d11a      	bne.n	800cdb0 <_printf_common+0xc8>
 800cd7a:	2000      	movs	r0, #0
 800cd7c:	e008      	b.n	800cd90 <_printf_common+0xa8>
 800cd7e:	2301      	movs	r3, #1
 800cd80:	4652      	mov	r2, sl
 800cd82:	4649      	mov	r1, r9
 800cd84:	4638      	mov	r0, r7
 800cd86:	47c0      	blx	r8
 800cd88:	3001      	adds	r0, #1
 800cd8a:	d103      	bne.n	800cd94 <_printf_common+0xac>
 800cd8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cd90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd94:	3501      	adds	r5, #1
 800cd96:	e7c6      	b.n	800cd26 <_printf_common+0x3e>
 800cd98:	18e1      	adds	r1, r4, r3
 800cd9a:	1c5a      	adds	r2, r3, #1
 800cd9c:	2030      	movs	r0, #48	; 0x30
 800cd9e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cda2:	4422      	add	r2, r4
 800cda4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cda8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cdac:	3302      	adds	r3, #2
 800cdae:	e7c7      	b.n	800cd40 <_printf_common+0x58>
 800cdb0:	2301      	movs	r3, #1
 800cdb2:	4622      	mov	r2, r4
 800cdb4:	4649      	mov	r1, r9
 800cdb6:	4638      	mov	r0, r7
 800cdb8:	47c0      	blx	r8
 800cdba:	3001      	adds	r0, #1
 800cdbc:	d0e6      	beq.n	800cd8c <_printf_common+0xa4>
 800cdbe:	3601      	adds	r6, #1
 800cdc0:	e7d9      	b.n	800cd76 <_printf_common+0x8e>
	...

0800cdc4 <_printf_i>:
 800cdc4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cdc8:	7e0f      	ldrb	r7, [r1, #24]
 800cdca:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800cdcc:	2f78      	cmp	r7, #120	; 0x78
 800cdce:	4691      	mov	r9, r2
 800cdd0:	4680      	mov	r8, r0
 800cdd2:	460c      	mov	r4, r1
 800cdd4:	469a      	mov	sl, r3
 800cdd6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800cdda:	d807      	bhi.n	800cdec <_printf_i+0x28>
 800cddc:	2f62      	cmp	r7, #98	; 0x62
 800cdde:	d80a      	bhi.n	800cdf6 <_printf_i+0x32>
 800cde0:	2f00      	cmp	r7, #0
 800cde2:	f000 80d8 	beq.w	800cf96 <_printf_i+0x1d2>
 800cde6:	2f58      	cmp	r7, #88	; 0x58
 800cde8:	f000 80a3 	beq.w	800cf32 <_printf_i+0x16e>
 800cdec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cdf0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800cdf4:	e03a      	b.n	800ce6c <_printf_i+0xa8>
 800cdf6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800cdfa:	2b15      	cmp	r3, #21
 800cdfc:	d8f6      	bhi.n	800cdec <_printf_i+0x28>
 800cdfe:	a101      	add	r1, pc, #4	; (adr r1, 800ce04 <_printf_i+0x40>)
 800ce00:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ce04:	0800ce5d 	.word	0x0800ce5d
 800ce08:	0800ce71 	.word	0x0800ce71
 800ce0c:	0800cded 	.word	0x0800cded
 800ce10:	0800cded 	.word	0x0800cded
 800ce14:	0800cded 	.word	0x0800cded
 800ce18:	0800cded 	.word	0x0800cded
 800ce1c:	0800ce71 	.word	0x0800ce71
 800ce20:	0800cded 	.word	0x0800cded
 800ce24:	0800cded 	.word	0x0800cded
 800ce28:	0800cded 	.word	0x0800cded
 800ce2c:	0800cded 	.word	0x0800cded
 800ce30:	0800cf7d 	.word	0x0800cf7d
 800ce34:	0800cea1 	.word	0x0800cea1
 800ce38:	0800cf5f 	.word	0x0800cf5f
 800ce3c:	0800cded 	.word	0x0800cded
 800ce40:	0800cded 	.word	0x0800cded
 800ce44:	0800cf9f 	.word	0x0800cf9f
 800ce48:	0800cded 	.word	0x0800cded
 800ce4c:	0800cea1 	.word	0x0800cea1
 800ce50:	0800cded 	.word	0x0800cded
 800ce54:	0800cded 	.word	0x0800cded
 800ce58:	0800cf67 	.word	0x0800cf67
 800ce5c:	682b      	ldr	r3, [r5, #0]
 800ce5e:	1d1a      	adds	r2, r3, #4
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	602a      	str	r2, [r5, #0]
 800ce64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ce68:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ce6c:	2301      	movs	r3, #1
 800ce6e:	e0a3      	b.n	800cfb8 <_printf_i+0x1f4>
 800ce70:	6820      	ldr	r0, [r4, #0]
 800ce72:	6829      	ldr	r1, [r5, #0]
 800ce74:	0606      	lsls	r6, r0, #24
 800ce76:	f101 0304 	add.w	r3, r1, #4
 800ce7a:	d50a      	bpl.n	800ce92 <_printf_i+0xce>
 800ce7c:	680e      	ldr	r6, [r1, #0]
 800ce7e:	602b      	str	r3, [r5, #0]
 800ce80:	2e00      	cmp	r6, #0
 800ce82:	da03      	bge.n	800ce8c <_printf_i+0xc8>
 800ce84:	232d      	movs	r3, #45	; 0x2d
 800ce86:	4276      	negs	r6, r6
 800ce88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ce8c:	485e      	ldr	r0, [pc, #376]	; (800d008 <_printf_i+0x244>)
 800ce8e:	230a      	movs	r3, #10
 800ce90:	e019      	b.n	800cec6 <_printf_i+0x102>
 800ce92:	680e      	ldr	r6, [r1, #0]
 800ce94:	602b      	str	r3, [r5, #0]
 800ce96:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ce9a:	bf18      	it	ne
 800ce9c:	b236      	sxthne	r6, r6
 800ce9e:	e7ef      	b.n	800ce80 <_printf_i+0xbc>
 800cea0:	682b      	ldr	r3, [r5, #0]
 800cea2:	6820      	ldr	r0, [r4, #0]
 800cea4:	1d19      	adds	r1, r3, #4
 800cea6:	6029      	str	r1, [r5, #0]
 800cea8:	0601      	lsls	r1, r0, #24
 800ceaa:	d501      	bpl.n	800ceb0 <_printf_i+0xec>
 800ceac:	681e      	ldr	r6, [r3, #0]
 800ceae:	e002      	b.n	800ceb6 <_printf_i+0xf2>
 800ceb0:	0646      	lsls	r6, r0, #25
 800ceb2:	d5fb      	bpl.n	800ceac <_printf_i+0xe8>
 800ceb4:	881e      	ldrh	r6, [r3, #0]
 800ceb6:	4854      	ldr	r0, [pc, #336]	; (800d008 <_printf_i+0x244>)
 800ceb8:	2f6f      	cmp	r7, #111	; 0x6f
 800ceba:	bf0c      	ite	eq
 800cebc:	2308      	moveq	r3, #8
 800cebe:	230a      	movne	r3, #10
 800cec0:	2100      	movs	r1, #0
 800cec2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cec6:	6865      	ldr	r5, [r4, #4]
 800cec8:	60a5      	str	r5, [r4, #8]
 800ceca:	2d00      	cmp	r5, #0
 800cecc:	bfa2      	ittt	ge
 800cece:	6821      	ldrge	r1, [r4, #0]
 800ced0:	f021 0104 	bicge.w	r1, r1, #4
 800ced4:	6021      	strge	r1, [r4, #0]
 800ced6:	b90e      	cbnz	r6, 800cedc <_printf_i+0x118>
 800ced8:	2d00      	cmp	r5, #0
 800ceda:	d04d      	beq.n	800cf78 <_printf_i+0x1b4>
 800cedc:	4615      	mov	r5, r2
 800cede:	fbb6 f1f3 	udiv	r1, r6, r3
 800cee2:	fb03 6711 	mls	r7, r3, r1, r6
 800cee6:	5dc7      	ldrb	r7, [r0, r7]
 800cee8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ceec:	4637      	mov	r7, r6
 800ceee:	42bb      	cmp	r3, r7
 800cef0:	460e      	mov	r6, r1
 800cef2:	d9f4      	bls.n	800cede <_printf_i+0x11a>
 800cef4:	2b08      	cmp	r3, #8
 800cef6:	d10b      	bne.n	800cf10 <_printf_i+0x14c>
 800cef8:	6823      	ldr	r3, [r4, #0]
 800cefa:	07de      	lsls	r6, r3, #31
 800cefc:	d508      	bpl.n	800cf10 <_printf_i+0x14c>
 800cefe:	6923      	ldr	r3, [r4, #16]
 800cf00:	6861      	ldr	r1, [r4, #4]
 800cf02:	4299      	cmp	r1, r3
 800cf04:	bfde      	ittt	le
 800cf06:	2330      	movle	r3, #48	; 0x30
 800cf08:	f805 3c01 	strble.w	r3, [r5, #-1]
 800cf0c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800cf10:	1b52      	subs	r2, r2, r5
 800cf12:	6122      	str	r2, [r4, #16]
 800cf14:	f8cd a000 	str.w	sl, [sp]
 800cf18:	464b      	mov	r3, r9
 800cf1a:	aa03      	add	r2, sp, #12
 800cf1c:	4621      	mov	r1, r4
 800cf1e:	4640      	mov	r0, r8
 800cf20:	f7ff fee2 	bl	800cce8 <_printf_common>
 800cf24:	3001      	adds	r0, #1
 800cf26:	d14c      	bne.n	800cfc2 <_printf_i+0x1fe>
 800cf28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cf2c:	b004      	add	sp, #16
 800cf2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf32:	4835      	ldr	r0, [pc, #212]	; (800d008 <_printf_i+0x244>)
 800cf34:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800cf38:	6829      	ldr	r1, [r5, #0]
 800cf3a:	6823      	ldr	r3, [r4, #0]
 800cf3c:	f851 6b04 	ldr.w	r6, [r1], #4
 800cf40:	6029      	str	r1, [r5, #0]
 800cf42:	061d      	lsls	r5, r3, #24
 800cf44:	d514      	bpl.n	800cf70 <_printf_i+0x1ac>
 800cf46:	07df      	lsls	r7, r3, #31
 800cf48:	bf44      	itt	mi
 800cf4a:	f043 0320 	orrmi.w	r3, r3, #32
 800cf4e:	6023      	strmi	r3, [r4, #0]
 800cf50:	b91e      	cbnz	r6, 800cf5a <_printf_i+0x196>
 800cf52:	6823      	ldr	r3, [r4, #0]
 800cf54:	f023 0320 	bic.w	r3, r3, #32
 800cf58:	6023      	str	r3, [r4, #0]
 800cf5a:	2310      	movs	r3, #16
 800cf5c:	e7b0      	b.n	800cec0 <_printf_i+0xfc>
 800cf5e:	6823      	ldr	r3, [r4, #0]
 800cf60:	f043 0320 	orr.w	r3, r3, #32
 800cf64:	6023      	str	r3, [r4, #0]
 800cf66:	2378      	movs	r3, #120	; 0x78
 800cf68:	4828      	ldr	r0, [pc, #160]	; (800d00c <_printf_i+0x248>)
 800cf6a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800cf6e:	e7e3      	b.n	800cf38 <_printf_i+0x174>
 800cf70:	0659      	lsls	r1, r3, #25
 800cf72:	bf48      	it	mi
 800cf74:	b2b6      	uxthmi	r6, r6
 800cf76:	e7e6      	b.n	800cf46 <_printf_i+0x182>
 800cf78:	4615      	mov	r5, r2
 800cf7a:	e7bb      	b.n	800cef4 <_printf_i+0x130>
 800cf7c:	682b      	ldr	r3, [r5, #0]
 800cf7e:	6826      	ldr	r6, [r4, #0]
 800cf80:	6961      	ldr	r1, [r4, #20]
 800cf82:	1d18      	adds	r0, r3, #4
 800cf84:	6028      	str	r0, [r5, #0]
 800cf86:	0635      	lsls	r5, r6, #24
 800cf88:	681b      	ldr	r3, [r3, #0]
 800cf8a:	d501      	bpl.n	800cf90 <_printf_i+0x1cc>
 800cf8c:	6019      	str	r1, [r3, #0]
 800cf8e:	e002      	b.n	800cf96 <_printf_i+0x1d2>
 800cf90:	0670      	lsls	r0, r6, #25
 800cf92:	d5fb      	bpl.n	800cf8c <_printf_i+0x1c8>
 800cf94:	8019      	strh	r1, [r3, #0]
 800cf96:	2300      	movs	r3, #0
 800cf98:	6123      	str	r3, [r4, #16]
 800cf9a:	4615      	mov	r5, r2
 800cf9c:	e7ba      	b.n	800cf14 <_printf_i+0x150>
 800cf9e:	682b      	ldr	r3, [r5, #0]
 800cfa0:	1d1a      	adds	r2, r3, #4
 800cfa2:	602a      	str	r2, [r5, #0]
 800cfa4:	681d      	ldr	r5, [r3, #0]
 800cfa6:	6862      	ldr	r2, [r4, #4]
 800cfa8:	2100      	movs	r1, #0
 800cfaa:	4628      	mov	r0, r5
 800cfac:	f7f3 f8f0 	bl	8000190 <memchr>
 800cfb0:	b108      	cbz	r0, 800cfb6 <_printf_i+0x1f2>
 800cfb2:	1b40      	subs	r0, r0, r5
 800cfb4:	6060      	str	r0, [r4, #4]
 800cfb6:	6863      	ldr	r3, [r4, #4]
 800cfb8:	6123      	str	r3, [r4, #16]
 800cfba:	2300      	movs	r3, #0
 800cfbc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cfc0:	e7a8      	b.n	800cf14 <_printf_i+0x150>
 800cfc2:	6923      	ldr	r3, [r4, #16]
 800cfc4:	462a      	mov	r2, r5
 800cfc6:	4649      	mov	r1, r9
 800cfc8:	4640      	mov	r0, r8
 800cfca:	47d0      	blx	sl
 800cfcc:	3001      	adds	r0, #1
 800cfce:	d0ab      	beq.n	800cf28 <_printf_i+0x164>
 800cfd0:	6823      	ldr	r3, [r4, #0]
 800cfd2:	079b      	lsls	r3, r3, #30
 800cfd4:	d413      	bmi.n	800cffe <_printf_i+0x23a>
 800cfd6:	68e0      	ldr	r0, [r4, #12]
 800cfd8:	9b03      	ldr	r3, [sp, #12]
 800cfda:	4298      	cmp	r0, r3
 800cfdc:	bfb8      	it	lt
 800cfde:	4618      	movlt	r0, r3
 800cfe0:	e7a4      	b.n	800cf2c <_printf_i+0x168>
 800cfe2:	2301      	movs	r3, #1
 800cfe4:	4632      	mov	r2, r6
 800cfe6:	4649      	mov	r1, r9
 800cfe8:	4640      	mov	r0, r8
 800cfea:	47d0      	blx	sl
 800cfec:	3001      	adds	r0, #1
 800cfee:	d09b      	beq.n	800cf28 <_printf_i+0x164>
 800cff0:	3501      	adds	r5, #1
 800cff2:	68e3      	ldr	r3, [r4, #12]
 800cff4:	9903      	ldr	r1, [sp, #12]
 800cff6:	1a5b      	subs	r3, r3, r1
 800cff8:	42ab      	cmp	r3, r5
 800cffa:	dcf2      	bgt.n	800cfe2 <_printf_i+0x21e>
 800cffc:	e7eb      	b.n	800cfd6 <_printf_i+0x212>
 800cffe:	2500      	movs	r5, #0
 800d000:	f104 0619 	add.w	r6, r4, #25
 800d004:	e7f5      	b.n	800cff2 <_printf_i+0x22e>
 800d006:	bf00      	nop
 800d008:	0800dc75 	.word	0x0800dc75
 800d00c:	0800dc86 	.word	0x0800dc86

0800d010 <_sbrk_r>:
 800d010:	b538      	push	{r3, r4, r5, lr}
 800d012:	4d06      	ldr	r5, [pc, #24]	; (800d02c <_sbrk_r+0x1c>)
 800d014:	2300      	movs	r3, #0
 800d016:	4604      	mov	r4, r0
 800d018:	4608      	mov	r0, r1
 800d01a:	602b      	str	r3, [r5, #0]
 800d01c:	f7f6 f800 	bl	8003020 <_sbrk>
 800d020:	1c43      	adds	r3, r0, #1
 800d022:	d102      	bne.n	800d02a <_sbrk_r+0x1a>
 800d024:	682b      	ldr	r3, [r5, #0]
 800d026:	b103      	cbz	r3, 800d02a <_sbrk_r+0x1a>
 800d028:	6023      	str	r3, [r4, #0]
 800d02a:	bd38      	pop	{r3, r4, r5, pc}
 800d02c:	20000ea0 	.word	0x20000ea0

0800d030 <__sread>:
 800d030:	b510      	push	{r4, lr}
 800d032:	460c      	mov	r4, r1
 800d034:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d038:	f000 fafc 	bl	800d634 <_read_r>
 800d03c:	2800      	cmp	r0, #0
 800d03e:	bfab      	itete	ge
 800d040:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d042:	89a3      	ldrhlt	r3, [r4, #12]
 800d044:	181b      	addge	r3, r3, r0
 800d046:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d04a:	bfac      	ite	ge
 800d04c:	6563      	strge	r3, [r4, #84]	; 0x54
 800d04e:	81a3      	strhlt	r3, [r4, #12]
 800d050:	bd10      	pop	{r4, pc}

0800d052 <__swrite>:
 800d052:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d056:	461f      	mov	r7, r3
 800d058:	898b      	ldrh	r3, [r1, #12]
 800d05a:	05db      	lsls	r3, r3, #23
 800d05c:	4605      	mov	r5, r0
 800d05e:	460c      	mov	r4, r1
 800d060:	4616      	mov	r6, r2
 800d062:	d505      	bpl.n	800d070 <__swrite+0x1e>
 800d064:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d068:	2302      	movs	r3, #2
 800d06a:	2200      	movs	r2, #0
 800d06c:	f000 f9c8 	bl	800d400 <_lseek_r>
 800d070:	89a3      	ldrh	r3, [r4, #12]
 800d072:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d076:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d07a:	81a3      	strh	r3, [r4, #12]
 800d07c:	4632      	mov	r2, r6
 800d07e:	463b      	mov	r3, r7
 800d080:	4628      	mov	r0, r5
 800d082:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d086:	f000 b869 	b.w	800d15c <_write_r>

0800d08a <__sseek>:
 800d08a:	b510      	push	{r4, lr}
 800d08c:	460c      	mov	r4, r1
 800d08e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d092:	f000 f9b5 	bl	800d400 <_lseek_r>
 800d096:	1c43      	adds	r3, r0, #1
 800d098:	89a3      	ldrh	r3, [r4, #12]
 800d09a:	bf15      	itete	ne
 800d09c:	6560      	strne	r0, [r4, #84]	; 0x54
 800d09e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d0a2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d0a6:	81a3      	strheq	r3, [r4, #12]
 800d0a8:	bf18      	it	ne
 800d0aa:	81a3      	strhne	r3, [r4, #12]
 800d0ac:	bd10      	pop	{r4, pc}

0800d0ae <__sclose>:
 800d0ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d0b2:	f000 b8d3 	b.w	800d25c <_close_r>
	...

0800d0b8 <__swbuf_r>:
 800d0b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0ba:	460e      	mov	r6, r1
 800d0bc:	4614      	mov	r4, r2
 800d0be:	4605      	mov	r5, r0
 800d0c0:	b118      	cbz	r0, 800d0ca <__swbuf_r+0x12>
 800d0c2:	6983      	ldr	r3, [r0, #24]
 800d0c4:	b90b      	cbnz	r3, 800d0ca <__swbuf_r+0x12>
 800d0c6:	f7ff fa25 	bl	800c514 <__sinit>
 800d0ca:	4b21      	ldr	r3, [pc, #132]	; (800d150 <__swbuf_r+0x98>)
 800d0cc:	429c      	cmp	r4, r3
 800d0ce:	d12b      	bne.n	800d128 <__swbuf_r+0x70>
 800d0d0:	686c      	ldr	r4, [r5, #4]
 800d0d2:	69a3      	ldr	r3, [r4, #24]
 800d0d4:	60a3      	str	r3, [r4, #8]
 800d0d6:	89a3      	ldrh	r3, [r4, #12]
 800d0d8:	071a      	lsls	r2, r3, #28
 800d0da:	d52f      	bpl.n	800d13c <__swbuf_r+0x84>
 800d0dc:	6923      	ldr	r3, [r4, #16]
 800d0de:	b36b      	cbz	r3, 800d13c <__swbuf_r+0x84>
 800d0e0:	6923      	ldr	r3, [r4, #16]
 800d0e2:	6820      	ldr	r0, [r4, #0]
 800d0e4:	1ac0      	subs	r0, r0, r3
 800d0e6:	6963      	ldr	r3, [r4, #20]
 800d0e8:	b2f6      	uxtb	r6, r6
 800d0ea:	4283      	cmp	r3, r0
 800d0ec:	4637      	mov	r7, r6
 800d0ee:	dc04      	bgt.n	800d0fa <__swbuf_r+0x42>
 800d0f0:	4621      	mov	r1, r4
 800d0f2:	4628      	mov	r0, r5
 800d0f4:	f000 f948 	bl	800d388 <_fflush_r>
 800d0f8:	bb30      	cbnz	r0, 800d148 <__swbuf_r+0x90>
 800d0fa:	68a3      	ldr	r3, [r4, #8]
 800d0fc:	3b01      	subs	r3, #1
 800d0fe:	60a3      	str	r3, [r4, #8]
 800d100:	6823      	ldr	r3, [r4, #0]
 800d102:	1c5a      	adds	r2, r3, #1
 800d104:	6022      	str	r2, [r4, #0]
 800d106:	701e      	strb	r6, [r3, #0]
 800d108:	6963      	ldr	r3, [r4, #20]
 800d10a:	3001      	adds	r0, #1
 800d10c:	4283      	cmp	r3, r0
 800d10e:	d004      	beq.n	800d11a <__swbuf_r+0x62>
 800d110:	89a3      	ldrh	r3, [r4, #12]
 800d112:	07db      	lsls	r3, r3, #31
 800d114:	d506      	bpl.n	800d124 <__swbuf_r+0x6c>
 800d116:	2e0a      	cmp	r6, #10
 800d118:	d104      	bne.n	800d124 <__swbuf_r+0x6c>
 800d11a:	4621      	mov	r1, r4
 800d11c:	4628      	mov	r0, r5
 800d11e:	f000 f933 	bl	800d388 <_fflush_r>
 800d122:	b988      	cbnz	r0, 800d148 <__swbuf_r+0x90>
 800d124:	4638      	mov	r0, r7
 800d126:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d128:	4b0a      	ldr	r3, [pc, #40]	; (800d154 <__swbuf_r+0x9c>)
 800d12a:	429c      	cmp	r4, r3
 800d12c:	d101      	bne.n	800d132 <__swbuf_r+0x7a>
 800d12e:	68ac      	ldr	r4, [r5, #8]
 800d130:	e7cf      	b.n	800d0d2 <__swbuf_r+0x1a>
 800d132:	4b09      	ldr	r3, [pc, #36]	; (800d158 <__swbuf_r+0xa0>)
 800d134:	429c      	cmp	r4, r3
 800d136:	bf08      	it	eq
 800d138:	68ec      	ldreq	r4, [r5, #12]
 800d13a:	e7ca      	b.n	800d0d2 <__swbuf_r+0x1a>
 800d13c:	4621      	mov	r1, r4
 800d13e:	4628      	mov	r0, r5
 800d140:	f000 f81e 	bl	800d180 <__swsetup_r>
 800d144:	2800      	cmp	r0, #0
 800d146:	d0cb      	beq.n	800d0e0 <__swbuf_r+0x28>
 800d148:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800d14c:	e7ea      	b.n	800d124 <__swbuf_r+0x6c>
 800d14e:	bf00      	nop
 800d150:	0800dc24 	.word	0x0800dc24
 800d154:	0800dc44 	.word	0x0800dc44
 800d158:	0800dc04 	.word	0x0800dc04

0800d15c <_write_r>:
 800d15c:	b538      	push	{r3, r4, r5, lr}
 800d15e:	4d07      	ldr	r5, [pc, #28]	; (800d17c <_write_r+0x20>)
 800d160:	4604      	mov	r4, r0
 800d162:	4608      	mov	r0, r1
 800d164:	4611      	mov	r1, r2
 800d166:	2200      	movs	r2, #0
 800d168:	602a      	str	r2, [r5, #0]
 800d16a:	461a      	mov	r2, r3
 800d16c:	f7f5 ff07 	bl	8002f7e <_write>
 800d170:	1c43      	adds	r3, r0, #1
 800d172:	d102      	bne.n	800d17a <_write_r+0x1e>
 800d174:	682b      	ldr	r3, [r5, #0]
 800d176:	b103      	cbz	r3, 800d17a <_write_r+0x1e>
 800d178:	6023      	str	r3, [r4, #0]
 800d17a:	bd38      	pop	{r3, r4, r5, pc}
 800d17c:	20000ea0 	.word	0x20000ea0

0800d180 <__swsetup_r>:
 800d180:	4b32      	ldr	r3, [pc, #200]	; (800d24c <__swsetup_r+0xcc>)
 800d182:	b570      	push	{r4, r5, r6, lr}
 800d184:	681d      	ldr	r5, [r3, #0]
 800d186:	4606      	mov	r6, r0
 800d188:	460c      	mov	r4, r1
 800d18a:	b125      	cbz	r5, 800d196 <__swsetup_r+0x16>
 800d18c:	69ab      	ldr	r3, [r5, #24]
 800d18e:	b913      	cbnz	r3, 800d196 <__swsetup_r+0x16>
 800d190:	4628      	mov	r0, r5
 800d192:	f7ff f9bf 	bl	800c514 <__sinit>
 800d196:	4b2e      	ldr	r3, [pc, #184]	; (800d250 <__swsetup_r+0xd0>)
 800d198:	429c      	cmp	r4, r3
 800d19a:	d10f      	bne.n	800d1bc <__swsetup_r+0x3c>
 800d19c:	686c      	ldr	r4, [r5, #4]
 800d19e:	89a3      	ldrh	r3, [r4, #12]
 800d1a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d1a4:	0719      	lsls	r1, r3, #28
 800d1a6:	d42c      	bmi.n	800d202 <__swsetup_r+0x82>
 800d1a8:	06dd      	lsls	r5, r3, #27
 800d1aa:	d411      	bmi.n	800d1d0 <__swsetup_r+0x50>
 800d1ac:	2309      	movs	r3, #9
 800d1ae:	6033      	str	r3, [r6, #0]
 800d1b0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d1b4:	81a3      	strh	r3, [r4, #12]
 800d1b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d1ba:	e03e      	b.n	800d23a <__swsetup_r+0xba>
 800d1bc:	4b25      	ldr	r3, [pc, #148]	; (800d254 <__swsetup_r+0xd4>)
 800d1be:	429c      	cmp	r4, r3
 800d1c0:	d101      	bne.n	800d1c6 <__swsetup_r+0x46>
 800d1c2:	68ac      	ldr	r4, [r5, #8]
 800d1c4:	e7eb      	b.n	800d19e <__swsetup_r+0x1e>
 800d1c6:	4b24      	ldr	r3, [pc, #144]	; (800d258 <__swsetup_r+0xd8>)
 800d1c8:	429c      	cmp	r4, r3
 800d1ca:	bf08      	it	eq
 800d1cc:	68ec      	ldreq	r4, [r5, #12]
 800d1ce:	e7e6      	b.n	800d19e <__swsetup_r+0x1e>
 800d1d0:	0758      	lsls	r0, r3, #29
 800d1d2:	d512      	bpl.n	800d1fa <__swsetup_r+0x7a>
 800d1d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d1d6:	b141      	cbz	r1, 800d1ea <__swsetup_r+0x6a>
 800d1d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d1dc:	4299      	cmp	r1, r3
 800d1de:	d002      	beq.n	800d1e6 <__swsetup_r+0x66>
 800d1e0:	4630      	mov	r0, r6
 800d1e2:	f000 f9ab 	bl	800d53c <_free_r>
 800d1e6:	2300      	movs	r3, #0
 800d1e8:	6363      	str	r3, [r4, #52]	; 0x34
 800d1ea:	89a3      	ldrh	r3, [r4, #12]
 800d1ec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d1f0:	81a3      	strh	r3, [r4, #12]
 800d1f2:	2300      	movs	r3, #0
 800d1f4:	6063      	str	r3, [r4, #4]
 800d1f6:	6923      	ldr	r3, [r4, #16]
 800d1f8:	6023      	str	r3, [r4, #0]
 800d1fa:	89a3      	ldrh	r3, [r4, #12]
 800d1fc:	f043 0308 	orr.w	r3, r3, #8
 800d200:	81a3      	strh	r3, [r4, #12]
 800d202:	6923      	ldr	r3, [r4, #16]
 800d204:	b94b      	cbnz	r3, 800d21a <__swsetup_r+0x9a>
 800d206:	89a3      	ldrh	r3, [r4, #12]
 800d208:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d20c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d210:	d003      	beq.n	800d21a <__swsetup_r+0x9a>
 800d212:	4621      	mov	r1, r4
 800d214:	4630      	mov	r0, r6
 800d216:	f000 f92b 	bl	800d470 <__smakebuf_r>
 800d21a:	89a0      	ldrh	r0, [r4, #12]
 800d21c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d220:	f010 0301 	ands.w	r3, r0, #1
 800d224:	d00a      	beq.n	800d23c <__swsetup_r+0xbc>
 800d226:	2300      	movs	r3, #0
 800d228:	60a3      	str	r3, [r4, #8]
 800d22a:	6963      	ldr	r3, [r4, #20]
 800d22c:	425b      	negs	r3, r3
 800d22e:	61a3      	str	r3, [r4, #24]
 800d230:	6923      	ldr	r3, [r4, #16]
 800d232:	b943      	cbnz	r3, 800d246 <__swsetup_r+0xc6>
 800d234:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d238:	d1ba      	bne.n	800d1b0 <__swsetup_r+0x30>
 800d23a:	bd70      	pop	{r4, r5, r6, pc}
 800d23c:	0781      	lsls	r1, r0, #30
 800d23e:	bf58      	it	pl
 800d240:	6963      	ldrpl	r3, [r4, #20]
 800d242:	60a3      	str	r3, [r4, #8]
 800d244:	e7f4      	b.n	800d230 <__swsetup_r+0xb0>
 800d246:	2000      	movs	r0, #0
 800d248:	e7f7      	b.n	800d23a <__swsetup_r+0xba>
 800d24a:	bf00      	nop
 800d24c:	20000028 	.word	0x20000028
 800d250:	0800dc24 	.word	0x0800dc24
 800d254:	0800dc44 	.word	0x0800dc44
 800d258:	0800dc04 	.word	0x0800dc04

0800d25c <_close_r>:
 800d25c:	b538      	push	{r3, r4, r5, lr}
 800d25e:	4d06      	ldr	r5, [pc, #24]	; (800d278 <_close_r+0x1c>)
 800d260:	2300      	movs	r3, #0
 800d262:	4604      	mov	r4, r0
 800d264:	4608      	mov	r0, r1
 800d266:	602b      	str	r3, [r5, #0]
 800d268:	f7f5 fea5 	bl	8002fb6 <_close>
 800d26c:	1c43      	adds	r3, r0, #1
 800d26e:	d102      	bne.n	800d276 <_close_r+0x1a>
 800d270:	682b      	ldr	r3, [r5, #0]
 800d272:	b103      	cbz	r3, 800d276 <_close_r+0x1a>
 800d274:	6023      	str	r3, [r4, #0]
 800d276:	bd38      	pop	{r3, r4, r5, pc}
 800d278:	20000ea0 	.word	0x20000ea0

0800d27c <__sflush_r>:
 800d27c:	898a      	ldrh	r2, [r1, #12]
 800d27e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d282:	4605      	mov	r5, r0
 800d284:	0710      	lsls	r0, r2, #28
 800d286:	460c      	mov	r4, r1
 800d288:	d458      	bmi.n	800d33c <__sflush_r+0xc0>
 800d28a:	684b      	ldr	r3, [r1, #4]
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	dc05      	bgt.n	800d29c <__sflush_r+0x20>
 800d290:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d292:	2b00      	cmp	r3, #0
 800d294:	dc02      	bgt.n	800d29c <__sflush_r+0x20>
 800d296:	2000      	movs	r0, #0
 800d298:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d29c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d29e:	2e00      	cmp	r6, #0
 800d2a0:	d0f9      	beq.n	800d296 <__sflush_r+0x1a>
 800d2a2:	2300      	movs	r3, #0
 800d2a4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d2a8:	682f      	ldr	r7, [r5, #0]
 800d2aa:	602b      	str	r3, [r5, #0]
 800d2ac:	d032      	beq.n	800d314 <__sflush_r+0x98>
 800d2ae:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d2b0:	89a3      	ldrh	r3, [r4, #12]
 800d2b2:	075a      	lsls	r2, r3, #29
 800d2b4:	d505      	bpl.n	800d2c2 <__sflush_r+0x46>
 800d2b6:	6863      	ldr	r3, [r4, #4]
 800d2b8:	1ac0      	subs	r0, r0, r3
 800d2ba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d2bc:	b10b      	cbz	r3, 800d2c2 <__sflush_r+0x46>
 800d2be:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d2c0:	1ac0      	subs	r0, r0, r3
 800d2c2:	2300      	movs	r3, #0
 800d2c4:	4602      	mov	r2, r0
 800d2c6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d2c8:	6a21      	ldr	r1, [r4, #32]
 800d2ca:	4628      	mov	r0, r5
 800d2cc:	47b0      	blx	r6
 800d2ce:	1c43      	adds	r3, r0, #1
 800d2d0:	89a3      	ldrh	r3, [r4, #12]
 800d2d2:	d106      	bne.n	800d2e2 <__sflush_r+0x66>
 800d2d4:	6829      	ldr	r1, [r5, #0]
 800d2d6:	291d      	cmp	r1, #29
 800d2d8:	d82c      	bhi.n	800d334 <__sflush_r+0xb8>
 800d2da:	4a2a      	ldr	r2, [pc, #168]	; (800d384 <__sflush_r+0x108>)
 800d2dc:	40ca      	lsrs	r2, r1
 800d2de:	07d6      	lsls	r6, r2, #31
 800d2e0:	d528      	bpl.n	800d334 <__sflush_r+0xb8>
 800d2e2:	2200      	movs	r2, #0
 800d2e4:	6062      	str	r2, [r4, #4]
 800d2e6:	04d9      	lsls	r1, r3, #19
 800d2e8:	6922      	ldr	r2, [r4, #16]
 800d2ea:	6022      	str	r2, [r4, #0]
 800d2ec:	d504      	bpl.n	800d2f8 <__sflush_r+0x7c>
 800d2ee:	1c42      	adds	r2, r0, #1
 800d2f0:	d101      	bne.n	800d2f6 <__sflush_r+0x7a>
 800d2f2:	682b      	ldr	r3, [r5, #0]
 800d2f4:	b903      	cbnz	r3, 800d2f8 <__sflush_r+0x7c>
 800d2f6:	6560      	str	r0, [r4, #84]	; 0x54
 800d2f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d2fa:	602f      	str	r7, [r5, #0]
 800d2fc:	2900      	cmp	r1, #0
 800d2fe:	d0ca      	beq.n	800d296 <__sflush_r+0x1a>
 800d300:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d304:	4299      	cmp	r1, r3
 800d306:	d002      	beq.n	800d30e <__sflush_r+0x92>
 800d308:	4628      	mov	r0, r5
 800d30a:	f000 f917 	bl	800d53c <_free_r>
 800d30e:	2000      	movs	r0, #0
 800d310:	6360      	str	r0, [r4, #52]	; 0x34
 800d312:	e7c1      	b.n	800d298 <__sflush_r+0x1c>
 800d314:	6a21      	ldr	r1, [r4, #32]
 800d316:	2301      	movs	r3, #1
 800d318:	4628      	mov	r0, r5
 800d31a:	47b0      	blx	r6
 800d31c:	1c41      	adds	r1, r0, #1
 800d31e:	d1c7      	bne.n	800d2b0 <__sflush_r+0x34>
 800d320:	682b      	ldr	r3, [r5, #0]
 800d322:	2b00      	cmp	r3, #0
 800d324:	d0c4      	beq.n	800d2b0 <__sflush_r+0x34>
 800d326:	2b1d      	cmp	r3, #29
 800d328:	d001      	beq.n	800d32e <__sflush_r+0xb2>
 800d32a:	2b16      	cmp	r3, #22
 800d32c:	d101      	bne.n	800d332 <__sflush_r+0xb6>
 800d32e:	602f      	str	r7, [r5, #0]
 800d330:	e7b1      	b.n	800d296 <__sflush_r+0x1a>
 800d332:	89a3      	ldrh	r3, [r4, #12]
 800d334:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d338:	81a3      	strh	r3, [r4, #12]
 800d33a:	e7ad      	b.n	800d298 <__sflush_r+0x1c>
 800d33c:	690f      	ldr	r7, [r1, #16]
 800d33e:	2f00      	cmp	r7, #0
 800d340:	d0a9      	beq.n	800d296 <__sflush_r+0x1a>
 800d342:	0793      	lsls	r3, r2, #30
 800d344:	680e      	ldr	r6, [r1, #0]
 800d346:	bf08      	it	eq
 800d348:	694b      	ldreq	r3, [r1, #20]
 800d34a:	600f      	str	r7, [r1, #0]
 800d34c:	bf18      	it	ne
 800d34e:	2300      	movne	r3, #0
 800d350:	eba6 0807 	sub.w	r8, r6, r7
 800d354:	608b      	str	r3, [r1, #8]
 800d356:	f1b8 0f00 	cmp.w	r8, #0
 800d35a:	dd9c      	ble.n	800d296 <__sflush_r+0x1a>
 800d35c:	6a21      	ldr	r1, [r4, #32]
 800d35e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d360:	4643      	mov	r3, r8
 800d362:	463a      	mov	r2, r7
 800d364:	4628      	mov	r0, r5
 800d366:	47b0      	blx	r6
 800d368:	2800      	cmp	r0, #0
 800d36a:	dc06      	bgt.n	800d37a <__sflush_r+0xfe>
 800d36c:	89a3      	ldrh	r3, [r4, #12]
 800d36e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d372:	81a3      	strh	r3, [r4, #12]
 800d374:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d378:	e78e      	b.n	800d298 <__sflush_r+0x1c>
 800d37a:	4407      	add	r7, r0
 800d37c:	eba8 0800 	sub.w	r8, r8, r0
 800d380:	e7e9      	b.n	800d356 <__sflush_r+0xda>
 800d382:	bf00      	nop
 800d384:	20400001 	.word	0x20400001

0800d388 <_fflush_r>:
 800d388:	b538      	push	{r3, r4, r5, lr}
 800d38a:	690b      	ldr	r3, [r1, #16]
 800d38c:	4605      	mov	r5, r0
 800d38e:	460c      	mov	r4, r1
 800d390:	b913      	cbnz	r3, 800d398 <_fflush_r+0x10>
 800d392:	2500      	movs	r5, #0
 800d394:	4628      	mov	r0, r5
 800d396:	bd38      	pop	{r3, r4, r5, pc}
 800d398:	b118      	cbz	r0, 800d3a2 <_fflush_r+0x1a>
 800d39a:	6983      	ldr	r3, [r0, #24]
 800d39c:	b90b      	cbnz	r3, 800d3a2 <_fflush_r+0x1a>
 800d39e:	f7ff f8b9 	bl	800c514 <__sinit>
 800d3a2:	4b14      	ldr	r3, [pc, #80]	; (800d3f4 <_fflush_r+0x6c>)
 800d3a4:	429c      	cmp	r4, r3
 800d3a6:	d11b      	bne.n	800d3e0 <_fflush_r+0x58>
 800d3a8:	686c      	ldr	r4, [r5, #4]
 800d3aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d0ef      	beq.n	800d392 <_fflush_r+0xa>
 800d3b2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d3b4:	07d0      	lsls	r0, r2, #31
 800d3b6:	d404      	bmi.n	800d3c2 <_fflush_r+0x3a>
 800d3b8:	0599      	lsls	r1, r3, #22
 800d3ba:	d402      	bmi.n	800d3c2 <_fflush_r+0x3a>
 800d3bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d3be:	f7ff f947 	bl	800c650 <__retarget_lock_acquire_recursive>
 800d3c2:	4628      	mov	r0, r5
 800d3c4:	4621      	mov	r1, r4
 800d3c6:	f7ff ff59 	bl	800d27c <__sflush_r>
 800d3ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d3cc:	07da      	lsls	r2, r3, #31
 800d3ce:	4605      	mov	r5, r0
 800d3d0:	d4e0      	bmi.n	800d394 <_fflush_r+0xc>
 800d3d2:	89a3      	ldrh	r3, [r4, #12]
 800d3d4:	059b      	lsls	r3, r3, #22
 800d3d6:	d4dd      	bmi.n	800d394 <_fflush_r+0xc>
 800d3d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d3da:	f7ff f93a 	bl	800c652 <__retarget_lock_release_recursive>
 800d3de:	e7d9      	b.n	800d394 <_fflush_r+0xc>
 800d3e0:	4b05      	ldr	r3, [pc, #20]	; (800d3f8 <_fflush_r+0x70>)
 800d3e2:	429c      	cmp	r4, r3
 800d3e4:	d101      	bne.n	800d3ea <_fflush_r+0x62>
 800d3e6:	68ac      	ldr	r4, [r5, #8]
 800d3e8:	e7df      	b.n	800d3aa <_fflush_r+0x22>
 800d3ea:	4b04      	ldr	r3, [pc, #16]	; (800d3fc <_fflush_r+0x74>)
 800d3ec:	429c      	cmp	r4, r3
 800d3ee:	bf08      	it	eq
 800d3f0:	68ec      	ldreq	r4, [r5, #12]
 800d3f2:	e7da      	b.n	800d3aa <_fflush_r+0x22>
 800d3f4:	0800dc24 	.word	0x0800dc24
 800d3f8:	0800dc44 	.word	0x0800dc44
 800d3fc:	0800dc04 	.word	0x0800dc04

0800d400 <_lseek_r>:
 800d400:	b538      	push	{r3, r4, r5, lr}
 800d402:	4d07      	ldr	r5, [pc, #28]	; (800d420 <_lseek_r+0x20>)
 800d404:	4604      	mov	r4, r0
 800d406:	4608      	mov	r0, r1
 800d408:	4611      	mov	r1, r2
 800d40a:	2200      	movs	r2, #0
 800d40c:	602a      	str	r2, [r5, #0]
 800d40e:	461a      	mov	r2, r3
 800d410:	f7f5 fdf8 	bl	8003004 <_lseek>
 800d414:	1c43      	adds	r3, r0, #1
 800d416:	d102      	bne.n	800d41e <_lseek_r+0x1e>
 800d418:	682b      	ldr	r3, [r5, #0]
 800d41a:	b103      	cbz	r3, 800d41e <_lseek_r+0x1e>
 800d41c:	6023      	str	r3, [r4, #0]
 800d41e:	bd38      	pop	{r3, r4, r5, pc}
 800d420:	20000ea0 	.word	0x20000ea0

0800d424 <__swhatbuf_r>:
 800d424:	b570      	push	{r4, r5, r6, lr}
 800d426:	460e      	mov	r6, r1
 800d428:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d42c:	2900      	cmp	r1, #0
 800d42e:	b096      	sub	sp, #88	; 0x58
 800d430:	4614      	mov	r4, r2
 800d432:	461d      	mov	r5, r3
 800d434:	da08      	bge.n	800d448 <__swhatbuf_r+0x24>
 800d436:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800d43a:	2200      	movs	r2, #0
 800d43c:	602a      	str	r2, [r5, #0]
 800d43e:	061a      	lsls	r2, r3, #24
 800d440:	d410      	bmi.n	800d464 <__swhatbuf_r+0x40>
 800d442:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d446:	e00e      	b.n	800d466 <__swhatbuf_r+0x42>
 800d448:	466a      	mov	r2, sp
 800d44a:	f000 f905 	bl	800d658 <_fstat_r>
 800d44e:	2800      	cmp	r0, #0
 800d450:	dbf1      	blt.n	800d436 <__swhatbuf_r+0x12>
 800d452:	9a01      	ldr	r2, [sp, #4]
 800d454:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d458:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d45c:	425a      	negs	r2, r3
 800d45e:	415a      	adcs	r2, r3
 800d460:	602a      	str	r2, [r5, #0]
 800d462:	e7ee      	b.n	800d442 <__swhatbuf_r+0x1e>
 800d464:	2340      	movs	r3, #64	; 0x40
 800d466:	2000      	movs	r0, #0
 800d468:	6023      	str	r3, [r4, #0]
 800d46a:	b016      	add	sp, #88	; 0x58
 800d46c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d470 <__smakebuf_r>:
 800d470:	898b      	ldrh	r3, [r1, #12]
 800d472:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d474:	079d      	lsls	r5, r3, #30
 800d476:	4606      	mov	r6, r0
 800d478:	460c      	mov	r4, r1
 800d47a:	d507      	bpl.n	800d48c <__smakebuf_r+0x1c>
 800d47c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d480:	6023      	str	r3, [r4, #0]
 800d482:	6123      	str	r3, [r4, #16]
 800d484:	2301      	movs	r3, #1
 800d486:	6163      	str	r3, [r4, #20]
 800d488:	b002      	add	sp, #8
 800d48a:	bd70      	pop	{r4, r5, r6, pc}
 800d48c:	ab01      	add	r3, sp, #4
 800d48e:	466a      	mov	r2, sp
 800d490:	f7ff ffc8 	bl	800d424 <__swhatbuf_r>
 800d494:	9900      	ldr	r1, [sp, #0]
 800d496:	4605      	mov	r5, r0
 800d498:	4630      	mov	r0, r6
 800d49a:	f7ff f8fb 	bl	800c694 <_malloc_r>
 800d49e:	b948      	cbnz	r0, 800d4b4 <__smakebuf_r+0x44>
 800d4a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d4a4:	059a      	lsls	r2, r3, #22
 800d4a6:	d4ef      	bmi.n	800d488 <__smakebuf_r+0x18>
 800d4a8:	f023 0303 	bic.w	r3, r3, #3
 800d4ac:	f043 0302 	orr.w	r3, r3, #2
 800d4b0:	81a3      	strh	r3, [r4, #12]
 800d4b2:	e7e3      	b.n	800d47c <__smakebuf_r+0xc>
 800d4b4:	4b0d      	ldr	r3, [pc, #52]	; (800d4ec <__smakebuf_r+0x7c>)
 800d4b6:	62b3      	str	r3, [r6, #40]	; 0x28
 800d4b8:	89a3      	ldrh	r3, [r4, #12]
 800d4ba:	6020      	str	r0, [r4, #0]
 800d4bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d4c0:	81a3      	strh	r3, [r4, #12]
 800d4c2:	9b00      	ldr	r3, [sp, #0]
 800d4c4:	6163      	str	r3, [r4, #20]
 800d4c6:	9b01      	ldr	r3, [sp, #4]
 800d4c8:	6120      	str	r0, [r4, #16]
 800d4ca:	b15b      	cbz	r3, 800d4e4 <__smakebuf_r+0x74>
 800d4cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d4d0:	4630      	mov	r0, r6
 800d4d2:	f000 f8d3 	bl	800d67c <_isatty_r>
 800d4d6:	b128      	cbz	r0, 800d4e4 <__smakebuf_r+0x74>
 800d4d8:	89a3      	ldrh	r3, [r4, #12]
 800d4da:	f023 0303 	bic.w	r3, r3, #3
 800d4de:	f043 0301 	orr.w	r3, r3, #1
 800d4e2:	81a3      	strh	r3, [r4, #12]
 800d4e4:	89a0      	ldrh	r0, [r4, #12]
 800d4e6:	4305      	orrs	r5, r0
 800d4e8:	81a5      	strh	r5, [r4, #12]
 800d4ea:	e7cd      	b.n	800d488 <__smakebuf_r+0x18>
 800d4ec:	0800c4ad 	.word	0x0800c4ad

0800d4f0 <memmove>:
 800d4f0:	4288      	cmp	r0, r1
 800d4f2:	b510      	push	{r4, lr}
 800d4f4:	eb01 0402 	add.w	r4, r1, r2
 800d4f8:	d902      	bls.n	800d500 <memmove+0x10>
 800d4fa:	4284      	cmp	r4, r0
 800d4fc:	4623      	mov	r3, r4
 800d4fe:	d807      	bhi.n	800d510 <memmove+0x20>
 800d500:	1e43      	subs	r3, r0, #1
 800d502:	42a1      	cmp	r1, r4
 800d504:	d008      	beq.n	800d518 <memmove+0x28>
 800d506:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d50a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d50e:	e7f8      	b.n	800d502 <memmove+0x12>
 800d510:	4402      	add	r2, r0
 800d512:	4601      	mov	r1, r0
 800d514:	428a      	cmp	r2, r1
 800d516:	d100      	bne.n	800d51a <memmove+0x2a>
 800d518:	bd10      	pop	{r4, pc}
 800d51a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d51e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d522:	e7f7      	b.n	800d514 <memmove+0x24>

0800d524 <__malloc_lock>:
 800d524:	4801      	ldr	r0, [pc, #4]	; (800d52c <__malloc_lock+0x8>)
 800d526:	f7ff b893 	b.w	800c650 <__retarget_lock_acquire_recursive>
 800d52a:	bf00      	nop
 800d52c:	20000e94 	.word	0x20000e94

0800d530 <__malloc_unlock>:
 800d530:	4801      	ldr	r0, [pc, #4]	; (800d538 <__malloc_unlock+0x8>)
 800d532:	f7ff b88e 	b.w	800c652 <__retarget_lock_release_recursive>
 800d536:	bf00      	nop
 800d538:	20000e94 	.word	0x20000e94

0800d53c <_free_r>:
 800d53c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d53e:	2900      	cmp	r1, #0
 800d540:	d044      	beq.n	800d5cc <_free_r+0x90>
 800d542:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d546:	9001      	str	r0, [sp, #4]
 800d548:	2b00      	cmp	r3, #0
 800d54a:	f1a1 0404 	sub.w	r4, r1, #4
 800d54e:	bfb8      	it	lt
 800d550:	18e4      	addlt	r4, r4, r3
 800d552:	f7ff ffe7 	bl	800d524 <__malloc_lock>
 800d556:	4a1e      	ldr	r2, [pc, #120]	; (800d5d0 <_free_r+0x94>)
 800d558:	9801      	ldr	r0, [sp, #4]
 800d55a:	6813      	ldr	r3, [r2, #0]
 800d55c:	b933      	cbnz	r3, 800d56c <_free_r+0x30>
 800d55e:	6063      	str	r3, [r4, #4]
 800d560:	6014      	str	r4, [r2, #0]
 800d562:	b003      	add	sp, #12
 800d564:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d568:	f7ff bfe2 	b.w	800d530 <__malloc_unlock>
 800d56c:	42a3      	cmp	r3, r4
 800d56e:	d908      	bls.n	800d582 <_free_r+0x46>
 800d570:	6825      	ldr	r5, [r4, #0]
 800d572:	1961      	adds	r1, r4, r5
 800d574:	428b      	cmp	r3, r1
 800d576:	bf01      	itttt	eq
 800d578:	6819      	ldreq	r1, [r3, #0]
 800d57a:	685b      	ldreq	r3, [r3, #4]
 800d57c:	1949      	addeq	r1, r1, r5
 800d57e:	6021      	streq	r1, [r4, #0]
 800d580:	e7ed      	b.n	800d55e <_free_r+0x22>
 800d582:	461a      	mov	r2, r3
 800d584:	685b      	ldr	r3, [r3, #4]
 800d586:	b10b      	cbz	r3, 800d58c <_free_r+0x50>
 800d588:	42a3      	cmp	r3, r4
 800d58a:	d9fa      	bls.n	800d582 <_free_r+0x46>
 800d58c:	6811      	ldr	r1, [r2, #0]
 800d58e:	1855      	adds	r5, r2, r1
 800d590:	42a5      	cmp	r5, r4
 800d592:	d10b      	bne.n	800d5ac <_free_r+0x70>
 800d594:	6824      	ldr	r4, [r4, #0]
 800d596:	4421      	add	r1, r4
 800d598:	1854      	adds	r4, r2, r1
 800d59a:	42a3      	cmp	r3, r4
 800d59c:	6011      	str	r1, [r2, #0]
 800d59e:	d1e0      	bne.n	800d562 <_free_r+0x26>
 800d5a0:	681c      	ldr	r4, [r3, #0]
 800d5a2:	685b      	ldr	r3, [r3, #4]
 800d5a4:	6053      	str	r3, [r2, #4]
 800d5a6:	4421      	add	r1, r4
 800d5a8:	6011      	str	r1, [r2, #0]
 800d5aa:	e7da      	b.n	800d562 <_free_r+0x26>
 800d5ac:	d902      	bls.n	800d5b4 <_free_r+0x78>
 800d5ae:	230c      	movs	r3, #12
 800d5b0:	6003      	str	r3, [r0, #0]
 800d5b2:	e7d6      	b.n	800d562 <_free_r+0x26>
 800d5b4:	6825      	ldr	r5, [r4, #0]
 800d5b6:	1961      	adds	r1, r4, r5
 800d5b8:	428b      	cmp	r3, r1
 800d5ba:	bf04      	itt	eq
 800d5bc:	6819      	ldreq	r1, [r3, #0]
 800d5be:	685b      	ldreq	r3, [r3, #4]
 800d5c0:	6063      	str	r3, [r4, #4]
 800d5c2:	bf04      	itt	eq
 800d5c4:	1949      	addeq	r1, r1, r5
 800d5c6:	6021      	streq	r1, [r4, #0]
 800d5c8:	6054      	str	r4, [r2, #4]
 800d5ca:	e7ca      	b.n	800d562 <_free_r+0x26>
 800d5cc:	b003      	add	sp, #12
 800d5ce:	bd30      	pop	{r4, r5, pc}
 800d5d0:	20000e98 	.word	0x20000e98

0800d5d4 <_realloc_r>:
 800d5d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d5d8:	4680      	mov	r8, r0
 800d5da:	4614      	mov	r4, r2
 800d5dc:	460e      	mov	r6, r1
 800d5de:	b921      	cbnz	r1, 800d5ea <_realloc_r+0x16>
 800d5e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d5e4:	4611      	mov	r1, r2
 800d5e6:	f7ff b855 	b.w	800c694 <_malloc_r>
 800d5ea:	b92a      	cbnz	r2, 800d5f8 <_realloc_r+0x24>
 800d5ec:	f7ff ffa6 	bl	800d53c <_free_r>
 800d5f0:	4625      	mov	r5, r4
 800d5f2:	4628      	mov	r0, r5
 800d5f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d5f8:	f000 f850 	bl	800d69c <_malloc_usable_size_r>
 800d5fc:	4284      	cmp	r4, r0
 800d5fe:	4607      	mov	r7, r0
 800d600:	d802      	bhi.n	800d608 <_realloc_r+0x34>
 800d602:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d606:	d812      	bhi.n	800d62e <_realloc_r+0x5a>
 800d608:	4621      	mov	r1, r4
 800d60a:	4640      	mov	r0, r8
 800d60c:	f7ff f842 	bl	800c694 <_malloc_r>
 800d610:	4605      	mov	r5, r0
 800d612:	2800      	cmp	r0, #0
 800d614:	d0ed      	beq.n	800d5f2 <_realloc_r+0x1e>
 800d616:	42bc      	cmp	r4, r7
 800d618:	4622      	mov	r2, r4
 800d61a:	4631      	mov	r1, r6
 800d61c:	bf28      	it	cs
 800d61e:	463a      	movcs	r2, r7
 800d620:	f7fe fed2 	bl	800c3c8 <memcpy>
 800d624:	4631      	mov	r1, r6
 800d626:	4640      	mov	r0, r8
 800d628:	f7ff ff88 	bl	800d53c <_free_r>
 800d62c:	e7e1      	b.n	800d5f2 <_realloc_r+0x1e>
 800d62e:	4635      	mov	r5, r6
 800d630:	e7df      	b.n	800d5f2 <_realloc_r+0x1e>
	...

0800d634 <_read_r>:
 800d634:	b538      	push	{r3, r4, r5, lr}
 800d636:	4d07      	ldr	r5, [pc, #28]	; (800d654 <_read_r+0x20>)
 800d638:	4604      	mov	r4, r0
 800d63a:	4608      	mov	r0, r1
 800d63c:	4611      	mov	r1, r2
 800d63e:	2200      	movs	r2, #0
 800d640:	602a      	str	r2, [r5, #0]
 800d642:	461a      	mov	r2, r3
 800d644:	f7f5 fc7e 	bl	8002f44 <_read>
 800d648:	1c43      	adds	r3, r0, #1
 800d64a:	d102      	bne.n	800d652 <_read_r+0x1e>
 800d64c:	682b      	ldr	r3, [r5, #0]
 800d64e:	b103      	cbz	r3, 800d652 <_read_r+0x1e>
 800d650:	6023      	str	r3, [r4, #0]
 800d652:	bd38      	pop	{r3, r4, r5, pc}
 800d654:	20000ea0 	.word	0x20000ea0

0800d658 <_fstat_r>:
 800d658:	b538      	push	{r3, r4, r5, lr}
 800d65a:	4d07      	ldr	r5, [pc, #28]	; (800d678 <_fstat_r+0x20>)
 800d65c:	2300      	movs	r3, #0
 800d65e:	4604      	mov	r4, r0
 800d660:	4608      	mov	r0, r1
 800d662:	4611      	mov	r1, r2
 800d664:	602b      	str	r3, [r5, #0]
 800d666:	f7f5 fcb2 	bl	8002fce <_fstat>
 800d66a:	1c43      	adds	r3, r0, #1
 800d66c:	d102      	bne.n	800d674 <_fstat_r+0x1c>
 800d66e:	682b      	ldr	r3, [r5, #0]
 800d670:	b103      	cbz	r3, 800d674 <_fstat_r+0x1c>
 800d672:	6023      	str	r3, [r4, #0]
 800d674:	bd38      	pop	{r3, r4, r5, pc}
 800d676:	bf00      	nop
 800d678:	20000ea0 	.word	0x20000ea0

0800d67c <_isatty_r>:
 800d67c:	b538      	push	{r3, r4, r5, lr}
 800d67e:	4d06      	ldr	r5, [pc, #24]	; (800d698 <_isatty_r+0x1c>)
 800d680:	2300      	movs	r3, #0
 800d682:	4604      	mov	r4, r0
 800d684:	4608      	mov	r0, r1
 800d686:	602b      	str	r3, [r5, #0]
 800d688:	f7f5 fcb1 	bl	8002fee <_isatty>
 800d68c:	1c43      	adds	r3, r0, #1
 800d68e:	d102      	bne.n	800d696 <_isatty_r+0x1a>
 800d690:	682b      	ldr	r3, [r5, #0]
 800d692:	b103      	cbz	r3, 800d696 <_isatty_r+0x1a>
 800d694:	6023      	str	r3, [r4, #0]
 800d696:	bd38      	pop	{r3, r4, r5, pc}
 800d698:	20000ea0 	.word	0x20000ea0

0800d69c <_malloc_usable_size_r>:
 800d69c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d6a0:	1f18      	subs	r0, r3, #4
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	bfbc      	itt	lt
 800d6a6:	580b      	ldrlt	r3, [r1, r0]
 800d6a8:	18c0      	addlt	r0, r0, r3
 800d6aa:	4770      	bx	lr

0800d6ac <_init>:
 800d6ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d6ae:	bf00      	nop
 800d6b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d6b2:	bc08      	pop	{r3}
 800d6b4:	469e      	mov	lr, r3
 800d6b6:	4770      	bx	lr

0800d6b8 <_fini>:
 800d6b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d6ba:	bf00      	nop
 800d6bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d6be:	bc08      	pop	{r3}
 800d6c0:	469e      	mov	lr, r3
 800d6c2:	4770      	bx	lr
