
WB_AWEAR_proj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000af08  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000041c  0800b048  0800b048  0001b048  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800b464  0800b464  0001b464  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800b46c  0800b46c  0001b46c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800b470  0800b470  0001b470  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000084  20000008  0800b474  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 MB_MEM2       00000883  2000008c  0800b4f8  0002008c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 BLE_DRIVER_CONTEXT 00000035  20000910  0800bd7b  00020910  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 SYSTEM_DRIVER_CONTEXT 00000011  20000948  0800bdb0  00020948  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00000408  2000095c  0800bdc1  0002095c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000d64  0800bdc1  00020d64  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020959  2**0
                  CONTENTS, READONLY
 13 MAPPING_TABLE 00000028  20030000  20030000  00030000  2**2
                  ALLOC
 14 MB_MEM1       000001bb  20030028  20030028  00030000  2**2
                  ALLOC
 15 .debug_info   0003219d  00000000  00000000  00020989  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00006135  00000000  00000000  00052b26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00002bc0  00000000  00000000  00058c60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 00002908  00000000  00000000  0005b820  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002d805  00000000  00000000  0005e128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00030604  00000000  00000000  0008b92d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000fcc87  00000000  00000000  000bbf31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000050  00000000  00000000  001b8bb8  2**0
                  CONTENTS, READONLY
 23 .debug_frame  0000bf54  00000000  00000000  001b8c08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	2000095c 	.word	0x2000095c
 800015c:	00000000 	.word	0x00000000
 8000160:	0800b030 	.word	0x0800b030

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000960 	.word	0x20000960
 800017c:	0800b030 	.word	0x0800b030

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_uldivmod>:
 8000230:	b953      	cbnz	r3, 8000248 <__aeabi_uldivmod+0x18>
 8000232:	b94a      	cbnz	r2, 8000248 <__aeabi_uldivmod+0x18>
 8000234:	2900      	cmp	r1, #0
 8000236:	bf08      	it	eq
 8000238:	2800      	cmpeq	r0, #0
 800023a:	bf1c      	itt	ne
 800023c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000240:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000244:	f000 b974 	b.w	8000530 <__aeabi_idiv0>
 8000248:	f1ad 0c08 	sub.w	ip, sp, #8
 800024c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000258:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800025c:	b004      	add	sp, #16
 800025e:	4770      	bx	lr

08000260 <__udivmoddi4>:
 8000260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000264:	9d08      	ldr	r5, [sp, #32]
 8000266:	4604      	mov	r4, r0
 8000268:	468e      	mov	lr, r1
 800026a:	2b00      	cmp	r3, #0
 800026c:	d14d      	bne.n	800030a <__udivmoddi4+0xaa>
 800026e:	428a      	cmp	r2, r1
 8000270:	4694      	mov	ip, r2
 8000272:	d969      	bls.n	8000348 <__udivmoddi4+0xe8>
 8000274:	fab2 f282 	clz	r2, r2
 8000278:	b152      	cbz	r2, 8000290 <__udivmoddi4+0x30>
 800027a:	fa01 f302 	lsl.w	r3, r1, r2
 800027e:	f1c2 0120 	rsb	r1, r2, #32
 8000282:	fa20 f101 	lsr.w	r1, r0, r1
 8000286:	fa0c fc02 	lsl.w	ip, ip, r2
 800028a:	ea41 0e03 	orr.w	lr, r1, r3
 800028e:	4094      	lsls	r4, r2
 8000290:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000294:	0c21      	lsrs	r1, r4, #16
 8000296:	fbbe f6f8 	udiv	r6, lr, r8
 800029a:	fa1f f78c 	uxth.w	r7, ip
 800029e:	fb08 e316 	mls	r3, r8, r6, lr
 80002a2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002a6:	fb06 f107 	mul.w	r1, r6, r7
 80002aa:	4299      	cmp	r1, r3
 80002ac:	d90a      	bls.n	80002c4 <__udivmoddi4+0x64>
 80002ae:	eb1c 0303 	adds.w	r3, ip, r3
 80002b2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002b6:	f080 811f 	bcs.w	80004f8 <__udivmoddi4+0x298>
 80002ba:	4299      	cmp	r1, r3
 80002bc:	f240 811c 	bls.w	80004f8 <__udivmoddi4+0x298>
 80002c0:	3e02      	subs	r6, #2
 80002c2:	4463      	add	r3, ip
 80002c4:	1a5b      	subs	r3, r3, r1
 80002c6:	b2a4      	uxth	r4, r4
 80002c8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002cc:	fb08 3310 	mls	r3, r8, r0, r3
 80002d0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d4:	fb00 f707 	mul.w	r7, r0, r7
 80002d8:	42a7      	cmp	r7, r4
 80002da:	d90a      	bls.n	80002f2 <__udivmoddi4+0x92>
 80002dc:	eb1c 0404 	adds.w	r4, ip, r4
 80002e0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002e4:	f080 810a 	bcs.w	80004fc <__udivmoddi4+0x29c>
 80002e8:	42a7      	cmp	r7, r4
 80002ea:	f240 8107 	bls.w	80004fc <__udivmoddi4+0x29c>
 80002ee:	4464      	add	r4, ip
 80002f0:	3802      	subs	r0, #2
 80002f2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002f6:	1be4      	subs	r4, r4, r7
 80002f8:	2600      	movs	r6, #0
 80002fa:	b11d      	cbz	r5, 8000304 <__udivmoddi4+0xa4>
 80002fc:	40d4      	lsrs	r4, r2
 80002fe:	2300      	movs	r3, #0
 8000300:	e9c5 4300 	strd	r4, r3, [r5]
 8000304:	4631      	mov	r1, r6
 8000306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030a:	428b      	cmp	r3, r1
 800030c:	d909      	bls.n	8000322 <__udivmoddi4+0xc2>
 800030e:	2d00      	cmp	r5, #0
 8000310:	f000 80ef 	beq.w	80004f2 <__udivmoddi4+0x292>
 8000314:	2600      	movs	r6, #0
 8000316:	e9c5 0100 	strd	r0, r1, [r5]
 800031a:	4630      	mov	r0, r6
 800031c:	4631      	mov	r1, r6
 800031e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000322:	fab3 f683 	clz	r6, r3
 8000326:	2e00      	cmp	r6, #0
 8000328:	d14a      	bne.n	80003c0 <__udivmoddi4+0x160>
 800032a:	428b      	cmp	r3, r1
 800032c:	d302      	bcc.n	8000334 <__udivmoddi4+0xd4>
 800032e:	4282      	cmp	r2, r0
 8000330:	f200 80f9 	bhi.w	8000526 <__udivmoddi4+0x2c6>
 8000334:	1a84      	subs	r4, r0, r2
 8000336:	eb61 0303 	sbc.w	r3, r1, r3
 800033a:	2001      	movs	r0, #1
 800033c:	469e      	mov	lr, r3
 800033e:	2d00      	cmp	r5, #0
 8000340:	d0e0      	beq.n	8000304 <__udivmoddi4+0xa4>
 8000342:	e9c5 4e00 	strd	r4, lr, [r5]
 8000346:	e7dd      	b.n	8000304 <__udivmoddi4+0xa4>
 8000348:	b902      	cbnz	r2, 800034c <__udivmoddi4+0xec>
 800034a:	deff      	udf	#255	; 0xff
 800034c:	fab2 f282 	clz	r2, r2
 8000350:	2a00      	cmp	r2, #0
 8000352:	f040 8092 	bne.w	800047a <__udivmoddi4+0x21a>
 8000356:	eba1 010c 	sub.w	r1, r1, ip
 800035a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800035e:	fa1f fe8c 	uxth.w	lr, ip
 8000362:	2601      	movs	r6, #1
 8000364:	0c20      	lsrs	r0, r4, #16
 8000366:	fbb1 f3f7 	udiv	r3, r1, r7
 800036a:	fb07 1113 	mls	r1, r7, r3, r1
 800036e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000372:	fb0e f003 	mul.w	r0, lr, r3
 8000376:	4288      	cmp	r0, r1
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0x12c>
 800037a:	eb1c 0101 	adds.w	r1, ip, r1
 800037e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x12a>
 8000384:	4288      	cmp	r0, r1
 8000386:	f200 80cb 	bhi.w	8000520 <__udivmoddi4+0x2c0>
 800038a:	4643      	mov	r3, r8
 800038c:	1a09      	subs	r1, r1, r0
 800038e:	b2a4      	uxth	r4, r4
 8000390:	fbb1 f0f7 	udiv	r0, r1, r7
 8000394:	fb07 1110 	mls	r1, r7, r0, r1
 8000398:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800039c:	fb0e fe00 	mul.w	lr, lr, r0
 80003a0:	45a6      	cmp	lr, r4
 80003a2:	d908      	bls.n	80003b6 <__udivmoddi4+0x156>
 80003a4:	eb1c 0404 	adds.w	r4, ip, r4
 80003a8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003ac:	d202      	bcs.n	80003b4 <__udivmoddi4+0x154>
 80003ae:	45a6      	cmp	lr, r4
 80003b0:	f200 80bb 	bhi.w	800052a <__udivmoddi4+0x2ca>
 80003b4:	4608      	mov	r0, r1
 80003b6:	eba4 040e 	sub.w	r4, r4, lr
 80003ba:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003be:	e79c      	b.n	80002fa <__udivmoddi4+0x9a>
 80003c0:	f1c6 0720 	rsb	r7, r6, #32
 80003c4:	40b3      	lsls	r3, r6
 80003c6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ca:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ce:	fa20 f407 	lsr.w	r4, r0, r7
 80003d2:	fa01 f306 	lsl.w	r3, r1, r6
 80003d6:	431c      	orrs	r4, r3
 80003d8:	40f9      	lsrs	r1, r7
 80003da:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003de:	fa00 f306 	lsl.w	r3, r0, r6
 80003e2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003e6:	0c20      	lsrs	r0, r4, #16
 80003e8:	fa1f fe8c 	uxth.w	lr, ip
 80003ec:	fb09 1118 	mls	r1, r9, r8, r1
 80003f0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f4:	fb08 f00e 	mul.w	r0, r8, lr
 80003f8:	4288      	cmp	r0, r1
 80003fa:	fa02 f206 	lsl.w	r2, r2, r6
 80003fe:	d90b      	bls.n	8000418 <__udivmoddi4+0x1b8>
 8000400:	eb1c 0101 	adds.w	r1, ip, r1
 8000404:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000408:	f080 8088 	bcs.w	800051c <__udivmoddi4+0x2bc>
 800040c:	4288      	cmp	r0, r1
 800040e:	f240 8085 	bls.w	800051c <__udivmoddi4+0x2bc>
 8000412:	f1a8 0802 	sub.w	r8, r8, #2
 8000416:	4461      	add	r1, ip
 8000418:	1a09      	subs	r1, r1, r0
 800041a:	b2a4      	uxth	r4, r4
 800041c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000420:	fb09 1110 	mls	r1, r9, r0, r1
 8000424:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000428:	fb00 fe0e 	mul.w	lr, r0, lr
 800042c:	458e      	cmp	lr, r1
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x1e2>
 8000430:	eb1c 0101 	adds.w	r1, ip, r1
 8000434:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000438:	d26c      	bcs.n	8000514 <__udivmoddi4+0x2b4>
 800043a:	458e      	cmp	lr, r1
 800043c:	d96a      	bls.n	8000514 <__udivmoddi4+0x2b4>
 800043e:	3802      	subs	r0, #2
 8000440:	4461      	add	r1, ip
 8000442:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000446:	fba0 9402 	umull	r9, r4, r0, r2
 800044a:	eba1 010e 	sub.w	r1, r1, lr
 800044e:	42a1      	cmp	r1, r4
 8000450:	46c8      	mov	r8, r9
 8000452:	46a6      	mov	lr, r4
 8000454:	d356      	bcc.n	8000504 <__udivmoddi4+0x2a4>
 8000456:	d053      	beq.n	8000500 <__udivmoddi4+0x2a0>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x212>
 800045a:	ebb3 0208 	subs.w	r2, r3, r8
 800045e:	eb61 010e 	sbc.w	r1, r1, lr
 8000462:	fa01 f707 	lsl.w	r7, r1, r7
 8000466:	fa22 f306 	lsr.w	r3, r2, r6
 800046a:	40f1      	lsrs	r1, r6
 800046c:	431f      	orrs	r7, r3
 800046e:	e9c5 7100 	strd	r7, r1, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	f1c2 0320 	rsb	r3, r2, #32
 800047e:	40d8      	lsrs	r0, r3
 8000480:	fa0c fc02 	lsl.w	ip, ip, r2
 8000484:	fa21 f303 	lsr.w	r3, r1, r3
 8000488:	4091      	lsls	r1, r2
 800048a:	4301      	orrs	r1, r0
 800048c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fbb3 f0f7 	udiv	r0, r3, r7
 8000498:	fb07 3610 	mls	r6, r7, r0, r3
 800049c:	0c0b      	lsrs	r3, r1, #16
 800049e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004a2:	fb00 f60e 	mul.w	r6, r0, lr
 80004a6:	429e      	cmp	r6, r3
 80004a8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x260>
 80004ae:	eb1c 0303 	adds.w	r3, ip, r3
 80004b2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004b6:	d22f      	bcs.n	8000518 <__udivmoddi4+0x2b8>
 80004b8:	429e      	cmp	r6, r3
 80004ba:	d92d      	bls.n	8000518 <__udivmoddi4+0x2b8>
 80004bc:	3802      	subs	r0, #2
 80004be:	4463      	add	r3, ip
 80004c0:	1b9b      	subs	r3, r3, r6
 80004c2:	b289      	uxth	r1, r1
 80004c4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004c8:	fb07 3316 	mls	r3, r7, r6, r3
 80004cc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004d0:	fb06 f30e 	mul.w	r3, r6, lr
 80004d4:	428b      	cmp	r3, r1
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x28a>
 80004d8:	eb1c 0101 	adds.w	r1, ip, r1
 80004dc:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004e0:	d216      	bcs.n	8000510 <__udivmoddi4+0x2b0>
 80004e2:	428b      	cmp	r3, r1
 80004e4:	d914      	bls.n	8000510 <__udivmoddi4+0x2b0>
 80004e6:	3e02      	subs	r6, #2
 80004e8:	4461      	add	r1, ip
 80004ea:	1ac9      	subs	r1, r1, r3
 80004ec:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004f0:	e738      	b.n	8000364 <__udivmoddi4+0x104>
 80004f2:	462e      	mov	r6, r5
 80004f4:	4628      	mov	r0, r5
 80004f6:	e705      	b.n	8000304 <__udivmoddi4+0xa4>
 80004f8:	4606      	mov	r6, r0
 80004fa:	e6e3      	b.n	80002c4 <__udivmoddi4+0x64>
 80004fc:	4618      	mov	r0, r3
 80004fe:	e6f8      	b.n	80002f2 <__udivmoddi4+0x92>
 8000500:	454b      	cmp	r3, r9
 8000502:	d2a9      	bcs.n	8000458 <__udivmoddi4+0x1f8>
 8000504:	ebb9 0802 	subs.w	r8, r9, r2
 8000508:	eb64 0e0c 	sbc.w	lr, r4, ip
 800050c:	3801      	subs	r0, #1
 800050e:	e7a3      	b.n	8000458 <__udivmoddi4+0x1f8>
 8000510:	4646      	mov	r6, r8
 8000512:	e7ea      	b.n	80004ea <__udivmoddi4+0x28a>
 8000514:	4620      	mov	r0, r4
 8000516:	e794      	b.n	8000442 <__udivmoddi4+0x1e2>
 8000518:	4640      	mov	r0, r8
 800051a:	e7d1      	b.n	80004c0 <__udivmoddi4+0x260>
 800051c:	46d0      	mov	r8, sl
 800051e:	e77b      	b.n	8000418 <__udivmoddi4+0x1b8>
 8000520:	3b02      	subs	r3, #2
 8000522:	4461      	add	r1, ip
 8000524:	e732      	b.n	800038c <__udivmoddi4+0x12c>
 8000526:	4630      	mov	r0, r6
 8000528:	e709      	b.n	800033e <__udivmoddi4+0xde>
 800052a:	4464      	add	r4, ip
 800052c:	3802      	subs	r0, #2
 800052e:	e742      	b.n	80003b6 <__udivmoddi4+0x156>

08000530 <__aeabi_idiv0>:
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop

08000534 <BH1790GLC_init>:

#include "BH1790GLC.h"


uint8_t BH1790GLC_init( BH1790GLC *dev, I2C_HandleTypeDef *i2cHandle )
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b084      	sub	sp, #16
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
 800053c:	6039      	str	r1, [r7, #0]
	/* Set struct parameters */
	dev->i2cHandle = i2cHandle;
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	683a      	ldr	r2, [r7, #0]
 8000542:	601a      	str	r2, [r3, #0]
	dev->ppg_data[0] = 0;
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	2200      	movs	r2, #0
 8000548:	711a      	strb	r2, [r3, #4]
	dev->ppg_data[1] = 0;
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	2200      	movs	r2, #0
 800054e:	715a      	strb	r2, [r3, #5]
	/* Keep count of errors */
	HAL_StatusTypeDef status;

	/* Take initial reads to make sure I2C is working */
	uint8_t regData;
	status = read(dev, BH1790GLC_MANUFACTURER_ID, &regData);	//get manufacturer id
 8000550:	f107 030e 	add.w	r3, r7, #14
 8000554:	461a      	mov	r2, r3
 8000556:	210f      	movs	r1, #15
 8000558:	6878      	ldr	r0, [r7, #4]
 800055a:	f000 f8a3 	bl	80006a4 <read>
 800055e:	4603      	mov	r3, r0
 8000560:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK){
 8000562:	7bfb      	ldrb	r3, [r7, #15]
 8000564:	2b00      	cmp	r3, #0
 8000566:	d001      	beq.n	800056c <BH1790GLC_init+0x38>
		return ERR_MID_VAL;
 8000568:	230a      	movs	r3, #10
 800056a:	e04a      	b.n	8000602 <BH1790GLC_init+0xce>
	}
	if(regData != BH1790GLC_MID_VAL){
 800056c:	7bbb      	ldrb	r3, [r7, #14]
 800056e:	2be0      	cmp	r3, #224	; 0xe0
 8000570:	d001      	beq.n	8000576 <BH1790GLC_init+0x42>
		return ERR_MID_VAL;
 8000572:	230a      	movs	r3, #10
 8000574:	e045      	b.n	8000602 <BH1790GLC_init+0xce>
	}

	status = read(dev, BH1790GLC_PART_ID, &regData);	//get part id
 8000576:	f107 030e 	add.w	r3, r7, #14
 800057a:	461a      	mov	r2, r3
 800057c:	2110      	movs	r1, #16
 800057e:	6878      	ldr	r0, [r7, #4]
 8000580:	f000 f890 	bl	80006a4 <read>
 8000584:	4603      	mov	r3, r0
 8000586:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK){
 8000588:	7bfb      	ldrb	r3, [r7, #15]
 800058a:	2b00      	cmp	r3, #0
 800058c:	d001      	beq.n	8000592 <BH1790GLC_init+0x5e>
		return ERR_PID_VAL;
 800058e:	230b      	movs	r3, #11
 8000590:	e037      	b.n	8000602 <BH1790GLC_init+0xce>
	}
	if(regData != BH1790GLC_PID_VAL){
 8000592:	7bbb      	ldrb	r3, [r7, #14]
 8000594:	2b0d      	cmp	r3, #13
 8000596:	d001      	beq.n	800059c <BH1790GLC_init+0x68>
		return ERR_PID_VAL;
 8000598:	230b      	movs	r3, #11
 800059a:	e032      	b.n	8000602 <BH1790GLC_init+0xce>
	}

	/* Configure the 3 registers needed to start taking measurements */
	uint8_t configData[3];
	configData[0] = BH1790GLC_MEAS_CONTROL1_VAL;	//to BH1790GLC_MEAS_CONTROL1 (0x41)
 800059c:	2382      	movs	r3, #130	; 0x82
 800059e:	723b      	strb	r3, [r7, #8]
	configData[1] = BH1790GLC_MEAS_CONTROL2_VAL;	//to BH1790GLC_MEAS_CONTROL2 (0x42)
 80005a0:	230c      	movs	r3, #12
 80005a2:	727b      	strb	r3, [r7, #9]
	configData[2] = BH1790GLC_MEAS_START_VAL;		//to BH1790GLC_MEAS_START (0x43)
 80005a4:	2301      	movs	r3, #1
 80005a6:	72bb      	strb	r3, [r7, #10]

	status = write(dev, BH1790GLC_MEAS_CONTROL1, &configData[0]);
 80005a8:	f107 0308 	add.w	r3, r7, #8
 80005ac:	461a      	mov	r2, r3
 80005ae:	2141      	movs	r1, #65	; 0x41
 80005b0:	6878      	ldr	r0, [r7, #4]
 80005b2:	f000 f855 	bl	8000660 <write>
 80005b6:	4603      	mov	r3, r0
 80005b8:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK){
 80005ba:	7bfb      	ldrb	r3, [r7, #15]
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d001      	beq.n	80005c4 <BH1790GLC_init+0x90>
		return ERR_MEAS_CONTROL1;
 80005c0:	2314      	movs	r3, #20
 80005c2:	e01e      	b.n	8000602 <BH1790GLC_init+0xce>
	}
	status = write(dev, BH1790GLC_MEAS_CONTROL2, &configData[1]);
 80005c4:	f107 0308 	add.w	r3, r7, #8
 80005c8:	3301      	adds	r3, #1
 80005ca:	461a      	mov	r2, r3
 80005cc:	2142      	movs	r1, #66	; 0x42
 80005ce:	6878      	ldr	r0, [r7, #4]
 80005d0:	f000 f846 	bl	8000660 <write>
 80005d4:	4603      	mov	r3, r0
 80005d6:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK){
 80005d8:	7bfb      	ldrb	r3, [r7, #15]
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d001      	beq.n	80005e2 <BH1790GLC_init+0xae>
		return ERR_MEAS_CONTROL2;
 80005de:	2315      	movs	r3, #21
 80005e0:	e00f      	b.n	8000602 <BH1790GLC_init+0xce>
	}
	status = write(dev, BH1790GLC_MEAS_START, &configData[2]);
 80005e2:	f107 0308 	add.w	r3, r7, #8
 80005e6:	3302      	adds	r3, #2
 80005e8:	461a      	mov	r2, r3
 80005ea:	2143      	movs	r1, #67	; 0x43
 80005ec:	6878      	ldr	r0, [r7, #4]
 80005ee:	f000 f837 	bl	8000660 <write>
 80005f2:	4603      	mov	r3, r0
 80005f4:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK){
 80005f6:	7bfb      	ldrb	r3, [r7, #15]
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d001      	beq.n	8000600 <BH1790GLC_init+0xcc>
		return ERR_MEAS_START;
 80005fc:	2316      	movs	r3, #22
 80005fe:	e000      	b.n	8000602 <BH1790GLC_init+0xce>
	}

	return SUCCESS;
 8000600:	2300      	movs	r3, #0
}
 8000602:	4618      	mov	r0, r3
 8000604:	3710      	adds	r7, #16
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}

0800060a <get_val>:

/*
 * Puts the ppg readings into the ppg_data struct variable
 */
uint8_t get_val( BH1790GLC *dev )
{
 800060a:	b580      	push	{r7, lr}
 800060c:	b084      	sub	sp, #16
 800060e:	af00      	add	r7, sp, #0
 8000610:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status;
	uint8_t sensorData[4];

	status = many_reads(dev, BH1790GLC_DATAOUT_LEDOFF, sensorData, 4);
 8000612:	f107 0208 	add.w	r2, r7, #8
 8000616:	2304      	movs	r3, #4
 8000618:	2154      	movs	r1, #84	; 0x54
 800061a:	6878      	ldr	r0, [r7, #4]
 800061c:	f000 f864 	bl	80006e8 <many_reads>
 8000620:	4603      	mov	r3, r0
 8000622:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK){
 8000624:	7bfb      	ldrb	r3, [r7, #15]
 8000626:	2b00      	cmp	r3, #0
 8000628:	d001      	beq.n	800062e <get_val+0x24>
		return ERR_DATA_OUT;		//error check
 800062a:	231e      	movs	r3, #30
 800062c:	e014      	b.n	8000658 <get_val+0x4e>
	}

	//convert the sensorData values to useful data
	dev->ppg_data[0] = ((uint8_t)sensorData[1]<<8)|(sensorData[0]);
 800062e:	7a7b      	ldrb	r3, [r7, #9]
 8000630:	021b      	lsls	r3, r3, #8
 8000632:	b25a      	sxtb	r2, r3
 8000634:	7a3b      	ldrb	r3, [r7, #8]
 8000636:	b25b      	sxtb	r3, r3
 8000638:	4313      	orrs	r3, r2
 800063a:	b25b      	sxtb	r3, r3
 800063c:	b2da      	uxtb	r2, r3
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	711a      	strb	r2, [r3, #4]
	dev->ppg_data[1] = ((uint8_t)sensorData[3]<<8)|(sensorData[2]);
 8000642:	7afb      	ldrb	r3, [r7, #11]
 8000644:	021b      	lsls	r3, r3, #8
 8000646:	b25a      	sxtb	r2, r3
 8000648:	7abb      	ldrb	r3, [r7, #10]
 800064a:	b25b      	sxtb	r3, r3
 800064c:	4313      	orrs	r3, r2
 800064e:	b25b      	sxtb	r3, r3
 8000650:	b2da      	uxtb	r2, r3
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	715a      	strb	r2, [r3, #5]

	return SUCCESS;
 8000656:	2300      	movs	r3, #0
}
 8000658:	4618      	mov	r0, r3
 800065a:	3710      	adds	r7, #16
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}

08000660 <write>:
 * dev : device
 * reg : register to write to
 * data : what to write
 */
HAL_StatusTypeDef write( BH1790GLC *dev, uint8_t reg, uint8_t *data)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b08a      	sub	sp, #40	; 0x28
 8000664:	af04      	add	r7, sp, #16
 8000666:	60f8      	str	r0, [r7, #12]
 8000668:	460b      	mov	r3, r1
 800066a:	607a      	str	r2, [r7, #4]
 800066c:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef ret;

	//passing my handle, read from peripheral, get from this register, size of that register,
	// where to put the data, 1 byte of data, max delay
	ret = HAL_I2C_Mem_Write(dev->i2cHandle, (BH1790GLC_DEVICE_ADDRESS<<1), reg, 1, data, 1, HAL_MAX_DELAY);
 800066e:	68fb      	ldr	r3, [r7, #12]
 8000670:	6818      	ldr	r0, [r3, #0]
 8000672:	7afb      	ldrb	r3, [r7, #11]
 8000674:	b29a      	uxth	r2, r3
 8000676:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800067a:	9302      	str	r3, [sp, #8]
 800067c:	2301      	movs	r3, #1
 800067e:	9301      	str	r3, [sp, #4]
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	9300      	str	r3, [sp, #0]
 8000684:	2301      	movs	r3, #1
 8000686:	21b6      	movs	r1, #182	; 0xb6
 8000688:	f002 fbfe 	bl	8002e88 <HAL_I2C_Mem_Write>
 800068c:	4603      	mov	r3, r0
 800068e:	75fb      	strb	r3, [r7, #23]
	if(ret != HAL_OK){
 8000690:	7dfb      	ldrb	r3, [r7, #23]
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <write+0x3a>
		return ret;			//error check
 8000696:	7dfb      	ldrb	r3, [r7, #23]
 8000698:	e000      	b.n	800069c <write+0x3c>
	}

	return HAL_OK;
 800069a:	2300      	movs	r3, #0
}
 800069c:	4618      	mov	r0, r3
 800069e:	3718      	adds	r7, #24
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}

080006a4 <read>:
 * dev : device
 * reg : register to read from
 * data : stores what was read
 */
HAL_StatusTypeDef read( BH1790GLC *dev, uint8_t reg, uint8_t *data)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b08a      	sub	sp, #40	; 0x28
 80006a8:	af04      	add	r7, sp, #16
 80006aa:	60f8      	str	r0, [r7, #12]
 80006ac:	460b      	mov	r3, r1
 80006ae:	607a      	str	r2, [r7, #4]
 80006b0:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef ret;

	ret = HAL_I2C_Mem_Read(dev->i2cHandle, (BH1790GLC_DEVICE_ADDRESS<<1), reg, 1, data, 1, HAL_MAX_DELAY);
 80006b2:	68fb      	ldr	r3, [r7, #12]
 80006b4:	6818      	ldr	r0, [r3, #0]
 80006b6:	7afb      	ldrb	r3, [r7, #11]
 80006b8:	b29a      	uxth	r2, r3
 80006ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80006be:	9302      	str	r3, [sp, #8]
 80006c0:	2301      	movs	r3, #1
 80006c2:	9301      	str	r3, [sp, #4]
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	9300      	str	r3, [sp, #0]
 80006c8:	2301      	movs	r3, #1
 80006ca:	21b6      	movs	r1, #182	; 0xb6
 80006cc:	f002 fcf0 	bl	80030b0 <HAL_I2C_Mem_Read>
 80006d0:	4603      	mov	r3, r0
 80006d2:	75fb      	strb	r3, [r7, #23]
	if(ret != HAL_OK){
 80006d4:	7dfb      	ldrb	r3, [r7, #23]
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <read+0x3a>
		return ret;			//error check
 80006da:	7dfb      	ldrb	r3, [r7, #23]
 80006dc:	e000      	b.n	80006e0 <read+0x3c>
	}


	return HAL_OK;
 80006de:	2300      	movs	r3, #0
}
 80006e0:	4618      	mov	r0, r3
 80006e2:	3718      	adds	r7, #24
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}

080006e8 <many_reads>:
 * reg : register to read from
 * data : stores what was read
 * length : number of registers to read (in bytes)
 */
HAL_StatusTypeDef many_reads( BH1790GLC *dev, uint8_t reg, uint8_t *data, uint8_t length )
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b08a      	sub	sp, #40	; 0x28
 80006ec:	af04      	add	r7, sp, #16
 80006ee:	60f8      	str	r0, [r7, #12]
 80006f0:	607a      	str	r2, [r7, #4]
 80006f2:	461a      	mov	r2, r3
 80006f4:	460b      	mov	r3, r1
 80006f6:	72fb      	strb	r3, [r7, #11]
 80006f8:	4613      	mov	r3, r2
 80006fa:	72bb      	strb	r3, [r7, #10]
	HAL_StatusTypeDef ret;

	ret = HAL_I2C_Mem_Read(dev->i2cHandle, (BH1790GLC_DEVICE_ADDRESS<<1), reg, 1, data, length, HAL_MAX_DELAY);
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	6818      	ldr	r0, [r3, #0]
 8000700:	7afb      	ldrb	r3, [r7, #11]
 8000702:	b29a      	uxth	r2, r3
 8000704:	7abb      	ldrb	r3, [r7, #10]
 8000706:	b29b      	uxth	r3, r3
 8000708:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800070c:	9102      	str	r1, [sp, #8]
 800070e:	9301      	str	r3, [sp, #4]
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	9300      	str	r3, [sp, #0]
 8000714:	2301      	movs	r3, #1
 8000716:	21b6      	movs	r1, #182	; 0xb6
 8000718:	f002 fcca 	bl	80030b0 <HAL_I2C_Mem_Read>
 800071c:	4603      	mov	r3, r0
 800071e:	75fb      	strb	r3, [r7, #23]
	if(ret != HAL_OK){
 8000720:	7dfb      	ldrb	r3, [r7, #23]
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <many_reads+0x42>
		return ret;			//error check
 8000726:	7dfb      	ldrb	r3, [r7, #23]
 8000728:	e000      	b.n	800072c <many_reads+0x44>
	}

	return HAL_OK;
 800072a:	2300      	movs	r3, #0
}
 800072c:	4618      	mov	r0, r3
 800072e:	3718      	adds	r7, #24
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}

08000734 <APPD_EnableCPU2>:
/* USER CODE END APPD_Init */
  return;
}

void APPD_EnableCPU2( void )
{
 8000734:	b5b0      	push	{r4, r5, r7, lr}
 8000736:	b088      	sub	sp, #32
 8000738:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 800073a:	4b0b      	ldr	r3, [pc, #44]	; (8000768 <APPD_EnableCPU2+0x34>)
 800073c:	1d3c      	adds	r4, r7, #4
 800073e:	461d      	mov	r5, r3
 8000740:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000742:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000744:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000748:	c403      	stmia	r4!, {r0, r1}
 800074a:	8022      	strh	r2, [r4, #0]
 800074c:	3402      	adds	r4, #2
 800074e:	0c13      	lsrs	r3, r2, #16
 8000750:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 8000752:	f008 fa99 	bl	8008c88 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 8000756:	1d3b      	adds	r3, r7, #4
 8000758:	4618      	mov	r0, r3
 800075a:	f007 fd34 	bl	80081c6 <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 800075e:	bf00      	nop
}
 8000760:	3720      	adds	r7, #32
 8000762:	46bd      	mov	sp, r7
 8000764:	bdb0      	pop	{r4, r5, r7, pc}
 8000766:	bf00      	nop
 8000768:	0800b048 	.word	0x0800b048

0800076c <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 800076c:	b480      	push	{r7}
 800076e:	b083      	sub	sp, #12
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 8000774:	4b07      	ldr	r3, [pc, #28]	; (8000794 <LL_C2_PWR_SetPowerMode+0x28>)
 8000776:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800077a:	f023 0207 	bic.w	r2, r3, #7
 800077e:	4905      	ldr	r1, [pc, #20]	; (8000794 <LL_C2_PWR_SetPowerMode+0x28>)
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	4313      	orrs	r3, r2
 8000784:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8000788:	bf00      	nop
 800078a:	370c      	adds	r7, #12
 800078c:	46bd      	mov	sp, r7
 800078e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000792:	4770      	bx	lr
 8000794:	58000400 	.word	0x58000400

08000798 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8000798:	b480      	push	{r7}
 800079a:	b083      	sub	sp, #12
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80007a0:	4b06      	ldr	r3, [pc, #24]	; (80007bc <LL_EXTI_EnableIT_32_63+0x24>)
 80007a2:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80007a6:	4905      	ldr	r1, [pc, #20]	; (80007bc <LL_EXTI_EnableIT_32_63+0x24>)
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	4313      	orrs	r3, r2
 80007ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80007b0:	bf00      	nop
 80007b2:	370c      	adds	r7, #12
 80007b4:	46bd      	mov	sp, r7
 80007b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ba:	4770      	bx	lr
 80007bc:	58000800 	.word	0x58000800

080007c0 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 80007c0:	b480      	push	{r7}
 80007c2:	b083      	sub	sp, #12
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 80007c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007cc:	4a0a      	ldr	r2, [pc, #40]	; (80007f8 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 80007ce:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 80007d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80007da:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	021b      	lsls	r3, r3, #8
 80007e2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80007e6:	4313      	orrs	r3, r2
 80007e8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 80007ec:	bf00      	nop
 80007ee:	370c      	adds	r7, #12
 80007f0:	46bd      	mov	sp, r7
 80007f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f6:	4770      	bx	lr
 80007f8:	cafecafe 	.word	0xcafecafe

080007fc <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 80007fc:	b480      	push	{r7}
 80007fe:	b083      	sub	sp, #12
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000804:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000808:	689b      	ldr	r3, [r3, #8]
 800080a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800080e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	4313      	orrs	r3, r2
 8000816:	608b      	str	r3, [r1, #8]
}
 8000818:	bf00      	nop
 800081a:	370c      	adds	r7, #12
 800081c:	46bd      	mov	sp, r7
 800081e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000822:	4770      	bx	lr

08000824 <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000828:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800082c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000830:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000834:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000838:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800083c:	bf00      	nop
 800083e:	46bd      	mov	sp, r7
 8000840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000844:	4770      	bx	lr

08000846 <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 8000846:	b480      	push	{r7}
 8000848:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800084a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800084e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000852:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000856:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800085a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800085e:	bf00      	nop
 8000860:	46bd      	mov	sp, r7
 8000862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000866:	4770      	bx	lr

08000868 <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 800086c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000870:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000874:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000878:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800087c:	d101      	bne.n	8000882 <LL_RCC_IsActiveFlag_PINRST+0x1a>
 800087e:	2301      	movs	r3, #1
 8000880:	e000      	b.n	8000884 <LL_RCC_IsActiveFlag_PINRST+0x1c>
 8000882:	2300      	movs	r3, #0
}
 8000884:	4618      	mov	r0, r3
 8000886:	46bd      	mov	sp, r7
 8000888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088c:	4770      	bx	lr

0800088e <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 800088e:	b480      	push	{r7}
 8000890:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 8000892:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000896:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800089a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800089e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80008a2:	d101      	bne.n	80008a8 <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 80008a4:	2301      	movs	r3, #1
 80008a6:	e000      	b.n	80008aa <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 80008a8:	2300      	movs	r3, #0
}
 80008aa:	4618      	mov	r0, r3
 80008ac:	46bd      	mov	sp, r7
 80008ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b2:	4770      	bx	lr

080008b4 <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 80008b4:	b480      	push	{r7}
 80008b6:	b085      	sub	sp, #20
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 80008bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008c0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80008c2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	4313      	orrs	r3, r2
 80008ca:	650b      	str	r3, [r1, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80008cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008d0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	4013      	ands	r3, r2
 80008d6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80008d8:	68fb      	ldr	r3, [r7, #12]
}
 80008da:	bf00      	nop
 80008dc:	3714      	adds	r7, #20
 80008de:	46bd      	mov	sp, r7
 80008e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e4:	4770      	bx	lr
	...

080008e8 <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 80008ec:	4b04      	ldr	r3, [pc, #16]	; (8000900 <LL_DBGMCU_GetDeviceID+0x18>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 80008f4:	4618      	mov	r0, r3
 80008f6:	46bd      	mov	sp, r7
 80008f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fc:	4770      	bx	lr
 80008fe:	bf00      	nop
 8000900:	e0042000 	.word	0xe0042000

08000904 <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 8000908:	4b04      	ldr	r3, [pc, #16]	; (800091c <LL_DBGMCU_GetRevisionID+0x18>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	0c1b      	lsrs	r3, r3, #16
 800090e:	b29b      	uxth	r3, r3
}
 8000910:	4618      	mov	r0, r3
 8000912:	46bd      	mov	sp, r7
 8000914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000918:	4770      	bx	lr
 800091a:	bf00      	nop
 800091c:	e0042000 	.word	0xe0042000

08000920 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000920:	b480      	push	{r7}
 8000922:	b083      	sub	sp, #12
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
 8000928:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	685a      	ldr	r2, [r3, #4]
 800092e:	683b      	ldr	r3, [r7, #0]
 8000930:	041b      	lsls	r3, r3, #16
 8000932:	431a      	orrs	r2, r3
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	605a      	str	r2, [r3, #4]
}
 8000938:	bf00      	nop
 800093a:	370c      	adds	r7, #12
 800093c:	46bd      	mov	sp, r7
 800093e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000942:	4770      	bx	lr

08000944 <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000944:	b480      	push	{r7}
 8000946:	b083      	sub	sp, #12
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
 800094c:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	685a      	ldr	r2, [r3, #4]
 8000952:	683b      	ldr	r3, [r7, #0]
 8000954:	431a      	orrs	r2, r3
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	605a      	str	r2, [r3, #4]
}
 800095a:	bf00      	nop
 800095c:	370c      	adds	r7, #12
 800095e:	46bd      	mov	sp, r7
 8000960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000964:	4770      	bx	lr

08000966 <LL_C2_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000966:	b480      	push	{r7}
 8000968:	b083      	sub	sp, #12
 800096a:	af00      	add	r7, sp, #0
 800096c:	6078      	str	r0, [r7, #4]
 800096e:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	695a      	ldr	r2, [r3, #20]
 8000974:	683b      	ldr	r3, [r7, #0]
 8000976:	041b      	lsls	r3, r3, #16
 8000978:	431a      	orrs	r2, r3
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	615a      	str	r2, [r3, #20]
}
 800097e:	bf00      	nop
 8000980:	370c      	adds	r7, #12
 8000982:	46bd      	mov	sp, r7
 8000984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000988:	4770      	bx	lr

0800098a <LL_C2_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800098a:	b480      	push	{r7}
 800098c:	b083      	sub	sp, #12
 800098e:	af00      	add	r7, sp, #0
 8000990:	6078      	str	r0, [r7, #4]
 8000992:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	695a      	ldr	r2, [r3, #20]
 8000998:	683b      	ldr	r3, [r7, #0]
 800099a:	431a      	orrs	r2, r3
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	615a      	str	r2, [r3, #20]
}
 80009a0:	bf00      	nop
 80009a2:	370c      	adds	r7, #12
 80009a4:	46bd      	mov	sp, r7
 80009a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009aa:	4770      	bx	lr

080009ac <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80009ac:	b480      	push	{r7}
 80009ae:	b083      	sub	sp, #12
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
 80009b4:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	683a      	ldr	r2, [r7, #0]
 80009ba:	609a      	str	r2, [r3, #8]
}
 80009bc:	bf00      	nop
 80009be:	370c      	adds	r7, #12
 80009c0:	46bd      	mov	sp, r7
 80009c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c6:	4770      	bx	lr

080009c8 <LL_C2_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80009c8:	b480      	push	{r7}
 80009ca:	b083      	sub	sp, #12
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
 80009d0:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	683a      	ldr	r2, [r7, #0]
 80009d6:	619a      	str	r2, [r3, #24]
}
 80009d8:	bf00      	nop
 80009da:	370c      	adds	r7, #12
 80009dc:	46bd      	mov	sp, r7
 80009de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e2:	4770      	bx	lr

080009e4 <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80009e8:	4b05      	ldr	r3, [pc, #20]	; (8000a00 <LL_LPM_EnableSleep+0x1c>)
 80009ea:	691b      	ldr	r3, [r3, #16]
 80009ec:	4a04      	ldr	r2, [pc, #16]	; (8000a00 <LL_LPM_EnableSleep+0x1c>)
 80009ee:	f023 0304 	bic.w	r3, r3, #4
 80009f2:	6113      	str	r3, [r2, #16]
}
 80009f4:	bf00      	nop
 80009f6:	46bd      	mov	sp, r7
 80009f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop
 8000a00:	e000ed00 	.word	0xe000ed00

08000a04 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8000a04:	b480      	push	{r7}
 8000a06:	b083      	sub	sp, #12
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	22ff      	movs	r2, #255	; 0xff
 8000a10:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000a12:	bf00      	nop
 8000a14:	370c      	adds	r7, #12
 8000a16:	46bd      	mov	sp, r7
 8000a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1c:	4770      	bx	lr

08000a1e <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 8000a1e:	b480      	push	{r7}
 8000a20:	b083      	sub	sp, #12
 8000a22:	af00      	add	r7, sp, #0
 8000a24:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	22ca      	movs	r2, #202	; 0xca
 8000a2a:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	2253      	movs	r2, #83	; 0x53
 8000a30:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000a32:	bf00      	nop
 8000a34:	370c      	adds	r7, #12
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr

08000a3e <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 8000a3e:	b480      	push	{r7}
 8000a40:	b083      	sub	sp, #12
 8000a42:	af00      	add	r7, sp, #0
 8000a44:	6078      	str	r0, [r7, #4]
 8000a46:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	689b      	ldr	r3, [r3, #8]
 8000a4c:	f023 0207 	bic.w	r2, r3, #7
 8000a50:	683b      	ldr	r3, [r7, #0]
 8000a52:	431a      	orrs	r2, r3
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	609a      	str	r2, [r3, #8]
}
 8000a58:	bf00      	nop
 8000a5a:	370c      	adds	r7, #12
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a62:	4770      	bx	lr

08000a64 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8000a68:	4b04      	ldr	r3, [pc, #16]	; (8000a7c <MX_APPE_Config+0x18>)
 8000a6a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000a6e:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 8000a70:	f000 f824 	bl	8000abc <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 8000a74:	f000 f864 	bl	8000b40 <Config_HSE>

  return;
 8000a78:	bf00      	nop
}
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	58004000 	.word	0x58004000

08000a80 <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 8000a84:	f000 f870 	bl	8000b68 <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 8000a88:	f000 f888 	bl	8000b9c <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8000a8c:	4903      	ldr	r1, [pc, #12]	; (8000a9c <MX_APPE_Init+0x1c>)
 8000a8e:	2000      	movs	r0, #0
 8000a90:	f000 fdd4 	bl	800163c <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8000a94:	f000 f890 	bl	8000bb8 <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 8000a98:	bf00      	nop
}
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	20000ae0 	.word	0x20000ae0

08000aa0 <Init_Smps>:

void Init_Smps(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 8000aa4:	bf00      	nop
}
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr

08000aae <Init_Exti>:

void Init_Exti(void)
{
 8000aae:	b580      	push	{r7, lr}
 8000ab0:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 8000ab2:	2050      	movs	r0, #80	; 0x50
 8000ab4:	f7ff fe70 	bl	8000798 <LL_EXTI_EnableIT_32_63>

  return;
 8000ab8:	bf00      	nop
}
 8000aba:	bd80      	pop	{r7, pc}

08000abc <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
#if (CFG_HW_RESET_BY_FW == 1)
  Reset_BackupDomain();
 8000ac0:	f000 f804 	bl	8000acc <Reset_BackupDomain>

  Reset_IPCC();
 8000ac4:	f000 f81a 	bl	8000afc <Reset_IPCC>
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 8000ac8:	bf00      	nop
}
 8000aca:	bd80      	pop	{r7, pc}

08000acc <Reset_BackupDomain>:

#if (CFG_HW_RESET_BY_FW == 1)
static void Reset_BackupDomain(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
  if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 8000ad0:	f7ff feca 	bl	8000868 <LL_RCC_IsActiveFlag_PINRST>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d00d      	beq.n	8000af6 <Reset_BackupDomain+0x2a>
 8000ada:	f7ff fed8 	bl	800088e <LL_RCC_IsActiveFlag_SFTRST>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d108      	bne.n	8000af6 <Reset_BackupDomain+0x2a>
  {
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 8000ae4:	f003 fb7c 	bl	80041e0 <HAL_PWR_EnableBkUpAccess>

    /**
     *  Write twice the value to flush the APB-AHB bridge
     *  This bit shall be written in the register before writing the next one
     */
    HAL_PWR_EnableBkUpAccess();
 8000ae8:	f003 fb7a 	bl	80041e0 <HAL_PWR_EnableBkUpAccess>

    __HAL_RCC_BACKUPRESET_FORCE();
 8000aec:	f7ff fe9a 	bl	8000824 <LL_RCC_ForceBackupDomainReset>
    __HAL_RCC_BACKUPRESET_RELEASE();
 8000af0:	f7ff fea9 	bl	8000846 <LL_RCC_ReleaseBackupDomainReset>
  }

  return;
 8000af4:	bf00      	nop
 8000af6:	bf00      	nop
}
 8000af8:	bd80      	pop	{r7, pc}
	...

08000afc <Reset_IPCC>:

static void Reset_IPCC(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 8000b00:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000b04:	f7ff fed6 	bl	80008b4 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_ClearFlag_CHx(
 8000b08:	213f      	movs	r1, #63	; 0x3f
 8000b0a:	480c      	ldr	r0, [pc, #48]	; (8000b3c <Reset_IPCC+0x40>)
 8000b0c:	f7ff ff4e 	bl	80009ac <LL_C1_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_ClearFlag_CHx(
 8000b10:	213f      	movs	r1, #63	; 0x3f
 8000b12:	480a      	ldr	r0, [pc, #40]	; (8000b3c <Reset_IPCC+0x40>)
 8000b14:	f7ff ff58 	bl	80009c8 <LL_C2_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableTransmitChannel(
 8000b18:	213f      	movs	r1, #63	; 0x3f
 8000b1a:	4808      	ldr	r0, [pc, #32]	; (8000b3c <Reset_IPCC+0x40>)
 8000b1c:	f7ff ff00 	bl	8000920 <LL_C1_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableTransmitChannel(
 8000b20:	213f      	movs	r1, #63	; 0x3f
 8000b22:	4806      	ldr	r0, [pc, #24]	; (8000b3c <Reset_IPCC+0x40>)
 8000b24:	f7ff ff1f 	bl	8000966 <LL_C2_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableReceiveChannel(
 8000b28:	213f      	movs	r1, #63	; 0x3f
 8000b2a:	4804      	ldr	r0, [pc, #16]	; (8000b3c <Reset_IPCC+0x40>)
 8000b2c:	f7ff ff0a 	bl	8000944 <LL_C1_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableReceiveChannel(
 8000b30:	213f      	movs	r1, #63	; 0x3f
 8000b32:	4802      	ldr	r0, [pc, #8]	; (8000b3c <Reset_IPCC+0x40>)
 8000b34:	f7ff ff29 	bl	800098a <LL_C2_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  return;
 8000b38:	bf00      	nop
}
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	58000c00 	.word	0x58000c00

08000b40 <Config_HSE>:
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8000b46:	2000      	movs	r0, #0
 8000b48:	f008 f92a 	bl	8008da0 <OTP_Read>
 8000b4c:	6078      	str	r0, [r7, #4]
  if (p_otp)
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d005      	beq.n	8000b60 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	799b      	ldrb	r3, [r3, #6]
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f7ff fe31 	bl	80007c0 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 8000b5e:	bf00      	nop
 8000b60:	bf00      	nop
}
 8000b62:	3708      	adds	r7, #8
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}

08000b68 <System_Init>:

static void System_Init(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
  Init_Smps();
 8000b6c:	f7ff ff98 	bl	8000aa0 <Init_Smps>

  Init_Exti();
 8000b70:	f7ff ff9d 	bl	8000aae <Init_Exti>

  Init_Rtc();
 8000b74:	f000 f802 	bl	8000b7c <Init_Rtc>

  return;
 8000b78:	bf00      	nop
}
 8000b7a:	bd80      	pop	{r7, pc}

08000b7c <Init_Rtc>:

static void Init_Rtc(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 8000b80:	4805      	ldr	r0, [pc, #20]	; (8000b98 <Init_Rtc+0x1c>)
 8000b82:	f7ff ff4c 	bl	8000a1e <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 8000b86:	2100      	movs	r1, #0
 8000b88:	4803      	ldr	r0, [pc, #12]	; (8000b98 <Init_Rtc+0x1c>)
 8000b8a:	f7ff ff58 	bl	8000a3e <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 8000b8e:	4802      	ldr	r0, [pc, #8]	; (8000b98 <Init_Rtc+0x1c>)
 8000b90:	f7ff ff38 	bl	8000a04 <LL_RTC_EnableWriteProtection>

  return;
 8000b94:	bf00      	nop
}
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	40002800 	.word	0x40002800

08000b9c <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8000ba0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000ba4:	f7ff fe2a 	bl	80007fc <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8000ba8:	f008 fff4 	bl	8009b94 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8000bac:	2004      	movs	r0, #4
 8000bae:	f7ff fddd 	bl	800076c <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 8000bb2:	bf00      	nop
}
 8000bb4:	bd80      	pop	{r7, pc}
	...

08000bb8 <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b088      	sub	sp, #32
 8000bbc:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 8000bbe:	f007 fead 	bl	800891c <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 8000bc2:	4a11      	ldr	r2, [pc, #68]	; (8000c08 <appe_Tl_Init+0x50>)
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	2004      	movs	r0, #4
 8000bc8:	f009 f922 	bl	8009e10 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8000bcc:	4b0f      	ldr	r3, [pc, #60]	; (8000c0c <appe_Tl_Init+0x54>)
 8000bce:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8000bd0:	4b0f      	ldr	r3, [pc, #60]	; (8000c10 <appe_Tl_Init+0x58>)
 8000bd2:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8000bd4:	463b      	mov	r3, r7
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	480e      	ldr	r0, [pc, #56]	; (8000c14 <appe_Tl_Init+0x5c>)
 8000bda:	f007 fd65 	bl	80086a8 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 8000bde:	4b0e      	ldr	r3, [pc, #56]	; (8000c18 <appe_Tl_Init+0x60>)
 8000be0:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8000be2:	4b0e      	ldr	r3, [pc, #56]	; (8000c1c <appe_Tl_Init+0x64>)
 8000be4:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8000be6:	4b0e      	ldr	r3, [pc, #56]	; (8000c20 <appe_Tl_Init+0x68>)
 8000be8:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8000bea:	f240 533c 	movw	r3, #1340	; 0x53c
 8000bee:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 8000bf0:	f107 0308 	add.w	r3, r7, #8
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f007 ffd3 	bl	8008ba0 <TL_MM_Init>

  TL_Enable();
 8000bfa:	f007 fe89 	bl	8008910 <TL_Enable>

  return;
 8000bfe:	bf00      	nop
}
 8000c00:	3720      	adds	r7, #32
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	080086e1 	.word	0x080086e1
 8000c0c:	200005dc 	.word	0x200005dc
 8000c10:	08000c25 	.word	0x08000c25
 8000c14:	08000c3d 	.word	0x08000c3d
 8000c18:	200007f4 	.word	0x200007f4
 8000c1c:	200006e8 	.word	0x200006e8
 8000c20:	200000a0 	.word	0x200000a0

08000c24 <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b083      	sub	sp, #12
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 8000c2e:	bf00      	nop
}
 8000c30:	370c      	adds	r7, #12
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr
	...

08000c3c <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b088      	sub	sp, #32
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	685b      	ldr	r3, [r3, #4]
 8000c48:	330b      	adds	r3, #11
 8000c4a:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 8000c4c:	69fb      	ldr	r3, [r7, #28]
 8000c4e:	881b      	ldrh	r3, [r3, #0]
 8000c50:	b29b      	uxth	r3, r3
 8000c52:	f5a3 4312 	sub.w	r3, r3, #37376	; 0x9200
 8000c56:	2b07      	cmp	r3, #7
 8000c58:	d81f      	bhi.n	8000c9a <APPE_SysUserEvtRx+0x5e>
 8000c5a:	a201      	add	r2, pc, #4	; (adr r2, 8000c60 <APPE_SysUserEvtRx+0x24>)
 8000c5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c60:	08000c81 	.word	0x08000c81
 8000c64:	08000c93 	.word	0x08000c93
 8000c68:	08000c9b 	.word	0x08000c9b
 8000c6c:	08000c9b 	.word	0x08000c9b
 8000c70:	08000c9b 	.word	0x08000c9b
 8000c74:	08000c9b 	.word	0x08000c9b
 8000c78:	08000c9b 	.word	0x08000c9b
 8000c7c:	08000c9b 	.word	0x08000c9b
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 8000c80:	f107 030c 	add.w	r3, r7, #12
 8000c84:	4618      	mov	r0, r3
 8000c86:	f007 facb 	bl	8008220 <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
    APPE_SysEvtReadyProcessing(pPayload);
 8000c8a:	6878      	ldr	r0, [r7, #4]
 8000c8c:	f000 f81b 	bl	8000cc6 <APPE_SysEvtReadyProcessing>
    break;
 8000c90:	e004      	b.n	8000c9c <APPE_SysUserEvtRx+0x60>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
    APPE_SysEvtError(pPayload);
 8000c92:	6878      	ldr	r0, [r7, #4]
 8000c94:	f000 f806 	bl	8000ca4 <APPE_SysEvtError>
    break;
 8000c98:	e000      	b.n	8000c9c <APPE_SysUserEvtRx+0x60>
  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
    break;

  default:
    break;
 8000c9a:	bf00      	nop
  }

  return;
 8000c9c:	bf00      	nop
}
 8000c9e:	3720      	adds	r7, #32
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}

08000ca4 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b085      	sub	sp, #20
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	685b      	ldr	r3, [r3, #4]
 8000cb0:	330b      	adds	r3, #11
 8000cb2:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	3302      	adds	r3, #2
 8000cb8:	60bb      	str	r3, [r7, #8]
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 8000cba:	bf00      	nop
}
 8000cbc:	3714      	adds	r7, #20
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr

08000cc6 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 8000cc6:	b580      	push	{r7, lr}
 8000cc8:	b08a      	sub	sp, #40	; 0x28
 8000cca:	af00      	add	r7, sp, #0
 8000ccc:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 8000cce:	f107 0308 	add.w	r3, r7, #8
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	601a      	str	r2, [r3, #0]
 8000cd6:	605a      	str	r2, [r3, #4]
 8000cd8:	609a      	str	r2, [r3, #8]
 8000cda:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t DeviceID=0;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	685b      	ldr	r3, [r3, #4]
 8000ce8:	330b      	adds	r3, #11
 8000cea:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 8000cec:	69fb      	ldr	r3, [r7, #28]
 8000cee:	3302      	adds	r3, #2
 8000cf0:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 8000cf2:	69bb      	ldr	r3, [r7, #24]
 8000cf4:	781b      	ldrb	r3, [r3, #0]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d11d      	bne.n	8000d36 <APPE_SysEvtReadyProcessing+0x70>
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");

    /* Traces channel initialization */
    APPD_EnableCPU2();
 8000cfa:	f7ff fd1b 	bl	8000734 <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 8000cfe:	230f      	movs	r3, #15
 8000d00:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 8000d02:	237f      	movs	r3, #127	; 0x7f
 8000d04:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 8000d06:	f7ff fdfd 	bl	8000904 <LL_DBGMCU_GetRevisionID>
 8000d0a:	6278      	str	r0, [r7, #36]	; 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);

    config_param.RevisionID = (uint16_t)RevisionID;
 8000d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d0e:	b29b      	uxth	r3, r3
 8000d10:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 8000d12:	f7ff fde9 	bl	80008e8 <LL_DBGMCU_GetDeviceID>
 8000d16:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
    config_param.DeviceID = (uint16_t)DeviceID;
 8000d18:	6a3b      	ldr	r3, [r7, #32]
 8000d1a:	b29b      	uxth	r3, r3
 8000d1c:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 8000d1e:	f107 0308 	add.w	r3, r7, #8
 8000d22:	4618      	mov	r0, r3
 8000d24:	f007 fa66 	bl	80081f4 <SHCI_C2_Config>

    APP_BLE_Init();
 8000d28:	f008 f944 	bl	8008fb4 <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	2001      	movs	r0, #1
 8000d30:	f008 ff42 	bl	8009bb8 <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 8000d34:	e007      	b.n	8000d46 <APPE_SysEvtReadyProcessing+0x80>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 8000d36:	69bb      	ldr	r3, [r7, #24]
 8000d38:	781b      	ldrb	r3, [r3, #0]
 8000d3a:	2b01      	cmp	r3, #1
 8000d3c:	d103      	bne.n	8000d46 <APPE_SysEvtReadyProcessing+0x80>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	2200      	movs	r2, #0
 8000d42:	701a      	strb	r2, [r3, #0]
  return;
 8000d44:	bf00      	nop
 8000d46:	bf00      	nop
}
 8000d48:	3728      	adds	r7, #40	; 0x28
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}

08000d4e <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 8000d4e:	b580      	push	{r7, lr}
 8000d50:	b084      	sub	sp, #16
 8000d52:	af00      	add	r7, sp, #0
 8000d54:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d56:	f001 fc9d 	bl	8002694 <HAL_GetTick>
 8000d5a:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000d66:	d00a      	beq.n	8000d7e <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 8000d68:	f001 fcac 	bl	80026c4 <HAL_GetTickFreq>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	461a      	mov	r2, r3
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	4413      	add	r3, r2
 8000d74:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d76:	e002      	b.n	8000d7e <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 8000d78:	f7ff fe34 	bl	80009e4 <LL_LPM_EnableSleep>
     */
  #if defined (__CC_ARM)
    __force_stores();
  #endif /* __CC_ARM */

    __WFI();
 8000d7c:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 8000d7e:	f001 fc89 	bl	8002694 <HAL_GetTick>
 8000d82:	4602      	mov	r2, r0
 8000d84:	68bb      	ldr	r3, [r7, #8]
 8000d86:	1ad3      	subs	r3, r2, r3
 8000d88:	68fa      	ldr	r2, [r7, #12]
 8000d8a:	429a      	cmp	r2, r3
 8000d8c:	d8f4      	bhi.n	8000d78 <HAL_Delay+0x2a>
  }
}
 8000d8e:	bf00      	nop
 8000d90:	bf00      	nop
 8000d92:	3710      	adds	r7, #16
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}

08000d98 <MX_APPE_Process>:

void MX_APPE_Process(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8000d9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000da0:	f008 ff3a 	bl	8009c18 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 8000da4:	bf00      	nop
 8000da6:	bd80      	pop	{r7, pc}

08000da8 <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 8000dac:	bf00      	nop
}
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr

08000db6 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 8000db6:	b580      	push	{r7, lr}
 8000db8:	b082      	sub	sp, #8
 8000dba:	af00      	add	r7, sp, #0
 8000dbc:	6078      	str	r0, [r7, #4]
 8000dbe:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8000dc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000dc4:	f008 ff28 	bl	8009c18 <UTIL_SEQ_Run>

  return;
 8000dc8:	bf00      	nop
}
 8000dca:	3708      	adds	r7, #8
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}

08000dd0 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8000dd8:	2100      	movs	r1, #0
 8000dda:	2004      	movs	r0, #4
 8000ddc:	f009 f83a 	bl	8009e54 <UTIL_SEQ_SetTask>
  return;
 8000de0:	bf00      	nop
}
 8000de2:	3708      	adds	r7, #8
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}

08000de8 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8000df0:	2002      	movs	r0, #2
 8000df2:	f009 f89b 	bl	8009f2c <UTIL_SEQ_SetEvt>
  return;
 8000df6:	bf00      	nop
}
 8000df8:	3708      	adds	r7, #8
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}

08000dfe <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 8000dfe:	b580      	push	{r7, lr}
 8000e00:	b082      	sub	sp, #8
 8000e02:	af00      	add	r7, sp, #0
 8000e04:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8000e06:	2002      	movs	r0, #2
 8000e08:	f009 f8b0 	bl	8009f6c <UTIL_SEQ_WaitEvt>
  return;
 8000e0c:	bf00      	nop
}
 8000e0e:	3708      	adds	r7, #8
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}

08000e14 <LL_EXTI_EnableIT_0_31>:
{
 8000e14:	b480      	push	{r7}
 8000e16:	b083      	sub	sp, #12
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8000e1c:	4b06      	ldr	r3, [pc, #24]	; (8000e38 <LL_EXTI_EnableIT_0_31+0x24>)
 8000e1e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8000e22:	4905      	ldr	r1, [pc, #20]	; (8000e38 <LL_EXTI_EnableIT_0_31+0x24>)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	4313      	orrs	r3, r2
 8000e28:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8000e2c:	bf00      	nop
 8000e2e:	370c      	adds	r7, #12
 8000e30:	46bd      	mov	sp, r7
 8000e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e36:	4770      	bx	lr
 8000e38:	58000800 	.word	0x58000800

08000e3c <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b083      	sub	sp, #12
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8000e44:	4b05      	ldr	r3, [pc, #20]	; (8000e5c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000e46:	681a      	ldr	r2, [r3, #0]
 8000e48:	4904      	ldr	r1, [pc, #16]	; (8000e5c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	4313      	orrs	r3, r2
 8000e4e:	600b      	str	r3, [r1, #0]

}
 8000e50:	bf00      	nop
 8000e52:	370c      	adds	r7, #12
 8000e54:	46bd      	mov	sp, r7
 8000e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5a:	4770      	bx	lr
 8000e5c:	58000800 	.word	0x58000800

08000e60 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b083      	sub	sp, #12
 8000e64:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000e66:	4b0d      	ldr	r3, [pc, #52]	; (8000e9c <ReadRtcSsrValue+0x3c>)
 8000e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e6a:	b29b      	uxth	r3, r3
 8000e6c:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000e6e:	4b0b      	ldr	r3, [pc, #44]	; (8000e9c <ReadRtcSsrValue+0x3c>)
 8000e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e72:	b29b      	uxth	r3, r3
 8000e74:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 8000e76:	e005      	b.n	8000e84 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000e7c:	4b07      	ldr	r3, [pc, #28]	; (8000e9c <ReadRtcSsrValue+0x3c>)
 8000e7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e80:	b29b      	uxth	r3, r3
 8000e82:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8000e84:	687a      	ldr	r2, [r7, #4]
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	429a      	cmp	r2, r3
 8000e8a:	d1f5      	bne.n	8000e78 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8000e8c:	683b      	ldr	r3, [r7, #0]
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	370c      	adds	r7, #12
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop
 8000e9c:	40002800 	.word	0x40002800

08000ea0 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b085      	sub	sp, #20
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	460a      	mov	r2, r1
 8000eaa:	71fb      	strb	r3, [r7, #7]
 8000eac:	4613      	mov	r3, r2
 8000eae:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8000eb0:	79ba      	ldrb	r2, [r7, #6]
 8000eb2:	491d      	ldr	r1, [pc, #116]	; (8000f28 <LinkTimerAfter+0x88>)
 8000eb4:	4613      	mov	r3, r2
 8000eb6:	005b      	lsls	r3, r3, #1
 8000eb8:	4413      	add	r3, r2
 8000eba:	00db      	lsls	r3, r3, #3
 8000ebc:	440b      	add	r3, r1
 8000ebe:	3315      	adds	r3, #21
 8000ec0:	781b      	ldrb	r3, [r3, #0]
 8000ec2:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000ec4:	7bfb      	ldrb	r3, [r7, #15]
 8000ec6:	2b06      	cmp	r3, #6
 8000ec8:	d009      	beq.n	8000ede <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8000eca:	7bfa      	ldrb	r2, [r7, #15]
 8000ecc:	4916      	ldr	r1, [pc, #88]	; (8000f28 <LinkTimerAfter+0x88>)
 8000ece:	4613      	mov	r3, r2
 8000ed0:	005b      	lsls	r3, r3, #1
 8000ed2:	4413      	add	r3, r2
 8000ed4:	00db      	lsls	r3, r3, #3
 8000ed6:	440b      	add	r3, r1
 8000ed8:	3314      	adds	r3, #20
 8000eda:	79fa      	ldrb	r2, [r7, #7]
 8000edc:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8000ede:	79fa      	ldrb	r2, [r7, #7]
 8000ee0:	4911      	ldr	r1, [pc, #68]	; (8000f28 <LinkTimerAfter+0x88>)
 8000ee2:	4613      	mov	r3, r2
 8000ee4:	005b      	lsls	r3, r3, #1
 8000ee6:	4413      	add	r3, r2
 8000ee8:	00db      	lsls	r3, r3, #3
 8000eea:	440b      	add	r3, r1
 8000eec:	3315      	adds	r3, #21
 8000eee:	7bfa      	ldrb	r2, [r7, #15]
 8000ef0:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8000ef2:	79fa      	ldrb	r2, [r7, #7]
 8000ef4:	490c      	ldr	r1, [pc, #48]	; (8000f28 <LinkTimerAfter+0x88>)
 8000ef6:	4613      	mov	r3, r2
 8000ef8:	005b      	lsls	r3, r3, #1
 8000efa:	4413      	add	r3, r2
 8000efc:	00db      	lsls	r3, r3, #3
 8000efe:	440b      	add	r3, r1
 8000f00:	3314      	adds	r3, #20
 8000f02:	79ba      	ldrb	r2, [r7, #6]
 8000f04:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8000f06:	79ba      	ldrb	r2, [r7, #6]
 8000f08:	4907      	ldr	r1, [pc, #28]	; (8000f28 <LinkTimerAfter+0x88>)
 8000f0a:	4613      	mov	r3, r2
 8000f0c:	005b      	lsls	r3, r3, #1
 8000f0e:	4413      	add	r3, r2
 8000f10:	00db      	lsls	r3, r3, #3
 8000f12:	440b      	add	r3, r1
 8000f14:	3315      	adds	r3, #21
 8000f16:	79fa      	ldrb	r2, [r7, #7]
 8000f18:	701a      	strb	r2, [r3, #0]

  return;
 8000f1a:	bf00      	nop
}
 8000f1c:	3714      	adds	r7, #20
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop
 8000f28:	20000978 	.word	0x20000978

08000f2c <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b085      	sub	sp, #20
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	4603      	mov	r3, r0
 8000f34:	460a      	mov	r2, r1
 8000f36:	71fb      	strb	r3, [r7, #7]
 8000f38:	4613      	mov	r3, r2
 8000f3a:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8000f3c:	4b29      	ldr	r3, [pc, #164]	; (8000fe4 <LinkTimerBefore+0xb8>)
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	b2db      	uxtb	r3, r3
 8000f42:	79ba      	ldrb	r2, [r7, #6]
 8000f44:	429a      	cmp	r2, r3
 8000f46:	d032      	beq.n	8000fae <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8000f48:	79ba      	ldrb	r2, [r7, #6]
 8000f4a:	4927      	ldr	r1, [pc, #156]	; (8000fe8 <LinkTimerBefore+0xbc>)
 8000f4c:	4613      	mov	r3, r2
 8000f4e:	005b      	lsls	r3, r3, #1
 8000f50:	4413      	add	r3, r2
 8000f52:	00db      	lsls	r3, r3, #3
 8000f54:	440b      	add	r3, r1
 8000f56:	3314      	adds	r3, #20
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8000f5c:	7bfa      	ldrb	r2, [r7, #15]
 8000f5e:	4922      	ldr	r1, [pc, #136]	; (8000fe8 <LinkTimerBefore+0xbc>)
 8000f60:	4613      	mov	r3, r2
 8000f62:	005b      	lsls	r3, r3, #1
 8000f64:	4413      	add	r3, r2
 8000f66:	00db      	lsls	r3, r3, #3
 8000f68:	440b      	add	r3, r1
 8000f6a:	3315      	adds	r3, #21
 8000f6c:	79fa      	ldrb	r2, [r7, #7]
 8000f6e:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8000f70:	79fa      	ldrb	r2, [r7, #7]
 8000f72:	491d      	ldr	r1, [pc, #116]	; (8000fe8 <LinkTimerBefore+0xbc>)
 8000f74:	4613      	mov	r3, r2
 8000f76:	005b      	lsls	r3, r3, #1
 8000f78:	4413      	add	r3, r2
 8000f7a:	00db      	lsls	r3, r3, #3
 8000f7c:	440b      	add	r3, r1
 8000f7e:	3315      	adds	r3, #21
 8000f80:	79ba      	ldrb	r2, [r7, #6]
 8000f82:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8000f84:	79fa      	ldrb	r2, [r7, #7]
 8000f86:	4918      	ldr	r1, [pc, #96]	; (8000fe8 <LinkTimerBefore+0xbc>)
 8000f88:	4613      	mov	r3, r2
 8000f8a:	005b      	lsls	r3, r3, #1
 8000f8c:	4413      	add	r3, r2
 8000f8e:	00db      	lsls	r3, r3, #3
 8000f90:	440b      	add	r3, r1
 8000f92:	3314      	adds	r3, #20
 8000f94:	7bfa      	ldrb	r2, [r7, #15]
 8000f96:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000f98:	79ba      	ldrb	r2, [r7, #6]
 8000f9a:	4913      	ldr	r1, [pc, #76]	; (8000fe8 <LinkTimerBefore+0xbc>)
 8000f9c:	4613      	mov	r3, r2
 8000f9e:	005b      	lsls	r3, r3, #1
 8000fa0:	4413      	add	r3, r2
 8000fa2:	00db      	lsls	r3, r3, #3
 8000fa4:	440b      	add	r3, r1
 8000fa6:	3314      	adds	r3, #20
 8000fa8:	79fa      	ldrb	r2, [r7, #7]
 8000faa:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8000fac:	e014      	b.n	8000fd8 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8000fae:	79fa      	ldrb	r2, [r7, #7]
 8000fb0:	490d      	ldr	r1, [pc, #52]	; (8000fe8 <LinkTimerBefore+0xbc>)
 8000fb2:	4613      	mov	r3, r2
 8000fb4:	005b      	lsls	r3, r3, #1
 8000fb6:	4413      	add	r3, r2
 8000fb8:	00db      	lsls	r3, r3, #3
 8000fba:	440b      	add	r3, r1
 8000fbc:	3315      	adds	r3, #21
 8000fbe:	79ba      	ldrb	r2, [r7, #6]
 8000fc0:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000fc2:	79ba      	ldrb	r2, [r7, #6]
 8000fc4:	4908      	ldr	r1, [pc, #32]	; (8000fe8 <LinkTimerBefore+0xbc>)
 8000fc6:	4613      	mov	r3, r2
 8000fc8:	005b      	lsls	r3, r3, #1
 8000fca:	4413      	add	r3, r2
 8000fcc:	00db      	lsls	r3, r3, #3
 8000fce:	440b      	add	r3, r1
 8000fd0:	3314      	adds	r3, #20
 8000fd2:	79fa      	ldrb	r2, [r7, #7]
 8000fd4:	701a      	strb	r2, [r3, #0]
  return;
 8000fd6:	bf00      	nop
}
 8000fd8:	3714      	adds	r7, #20
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop
 8000fe4:	20000a08 	.word	0x20000a08
 8000fe8:	20000978 	.word	0x20000978

08000fec <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b084      	sub	sp, #16
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000ff6:	4b4e      	ldr	r3, [pc, #312]	; (8001130 <linkTimer+0x144>)
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	b2db      	uxtb	r3, r3
 8000ffc:	2b06      	cmp	r3, #6
 8000ffe:	d118      	bne.n	8001032 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001000:	4b4b      	ldr	r3, [pc, #300]	; (8001130 <linkTimer+0x144>)
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	b2da      	uxtb	r2, r3
 8001006:	4b4b      	ldr	r3, [pc, #300]	; (8001134 <linkTimer+0x148>)
 8001008:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 800100a:	4a49      	ldr	r2, [pc, #292]	; (8001130 <linkTimer+0x144>)
 800100c:	79fb      	ldrb	r3, [r7, #7]
 800100e:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8001010:	79fa      	ldrb	r2, [r7, #7]
 8001012:	4949      	ldr	r1, [pc, #292]	; (8001138 <linkTimer+0x14c>)
 8001014:	4613      	mov	r3, r2
 8001016:	005b      	lsls	r3, r3, #1
 8001018:	4413      	add	r3, r2
 800101a:	00db      	lsls	r3, r3, #3
 800101c:	440b      	add	r3, r1
 800101e:	3315      	adds	r3, #21
 8001020:	2206      	movs	r2, #6
 8001022:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001024:	4b45      	ldr	r3, [pc, #276]	; (800113c <linkTimer+0x150>)
 8001026:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800102a:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 800102c:	2300      	movs	r3, #0
 800102e:	81fb      	strh	r3, [r7, #14]
 8001030:	e078      	b.n	8001124 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8001032:	f000 f909 	bl	8001248 <ReturnTimeElapsed>
 8001036:	4603      	mov	r3, r0
 8001038:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 800103a:	79fa      	ldrb	r2, [r7, #7]
 800103c:	493e      	ldr	r1, [pc, #248]	; (8001138 <linkTimer+0x14c>)
 800103e:	4613      	mov	r3, r2
 8001040:	005b      	lsls	r3, r3, #1
 8001042:	4413      	add	r3, r2
 8001044:	00db      	lsls	r3, r3, #3
 8001046:	440b      	add	r3, r1
 8001048:	3308      	adds	r3, #8
 800104a:	6819      	ldr	r1, [r3, #0]
 800104c:	89fb      	ldrh	r3, [r7, #14]
 800104e:	79fa      	ldrb	r2, [r7, #7]
 8001050:	4419      	add	r1, r3
 8001052:	4839      	ldr	r0, [pc, #228]	; (8001138 <linkTimer+0x14c>)
 8001054:	4613      	mov	r3, r2
 8001056:	005b      	lsls	r3, r3, #1
 8001058:	4413      	add	r3, r2
 800105a:	00db      	lsls	r3, r3, #3
 800105c:	4403      	add	r3, r0
 800105e:	3308      	adds	r3, #8
 8001060:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8001062:	79fa      	ldrb	r2, [r7, #7]
 8001064:	4934      	ldr	r1, [pc, #208]	; (8001138 <linkTimer+0x14c>)
 8001066:	4613      	mov	r3, r2
 8001068:	005b      	lsls	r3, r3, #1
 800106a:	4413      	add	r3, r2
 800106c:	00db      	lsls	r3, r3, #3
 800106e:	440b      	add	r3, r1
 8001070:	3308      	adds	r3, #8
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8001076:	4b2e      	ldr	r3, [pc, #184]	; (8001130 <linkTimer+0x144>)
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	b2db      	uxtb	r3, r3
 800107c:	4619      	mov	r1, r3
 800107e:	4a2e      	ldr	r2, [pc, #184]	; (8001138 <linkTimer+0x14c>)
 8001080:	460b      	mov	r3, r1
 8001082:	005b      	lsls	r3, r3, #1
 8001084:	440b      	add	r3, r1
 8001086:	00db      	lsls	r3, r3, #3
 8001088:	4413      	add	r3, r2
 800108a:	3308      	adds	r3, #8
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	68ba      	ldr	r2, [r7, #8]
 8001090:	429a      	cmp	r2, r3
 8001092:	d337      	bcc.n	8001104 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8001094:	4b26      	ldr	r3, [pc, #152]	; (8001130 <linkTimer+0x144>)
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 800109a:	7b7a      	ldrb	r2, [r7, #13]
 800109c:	4926      	ldr	r1, [pc, #152]	; (8001138 <linkTimer+0x14c>)
 800109e:	4613      	mov	r3, r2
 80010a0:	005b      	lsls	r3, r3, #1
 80010a2:	4413      	add	r3, r2
 80010a4:	00db      	lsls	r3, r3, #3
 80010a6:	440b      	add	r3, r1
 80010a8:	3315      	adds	r3, #21
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 80010ae:	e013      	b.n	80010d8 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 80010b0:	7b7a      	ldrb	r2, [r7, #13]
 80010b2:	4921      	ldr	r1, [pc, #132]	; (8001138 <linkTimer+0x14c>)
 80010b4:	4613      	mov	r3, r2
 80010b6:	005b      	lsls	r3, r3, #1
 80010b8:	4413      	add	r3, r2
 80010ba:	00db      	lsls	r3, r3, #3
 80010bc:	440b      	add	r3, r1
 80010be:	3315      	adds	r3, #21
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 80010c4:	7b7a      	ldrb	r2, [r7, #13]
 80010c6:	491c      	ldr	r1, [pc, #112]	; (8001138 <linkTimer+0x14c>)
 80010c8:	4613      	mov	r3, r2
 80010ca:	005b      	lsls	r3, r3, #1
 80010cc:	4413      	add	r3, r2
 80010ce:	00db      	lsls	r3, r3, #3
 80010d0:	440b      	add	r3, r1
 80010d2:	3315      	adds	r3, #21
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 80010d8:	7b3b      	ldrb	r3, [r7, #12]
 80010da:	2b06      	cmp	r3, #6
 80010dc:	d00b      	beq.n	80010f6 <linkTimer+0x10a>
 80010de:	7b3a      	ldrb	r2, [r7, #12]
 80010e0:	4915      	ldr	r1, [pc, #84]	; (8001138 <linkTimer+0x14c>)
 80010e2:	4613      	mov	r3, r2
 80010e4:	005b      	lsls	r3, r3, #1
 80010e6:	4413      	add	r3, r2
 80010e8:	00db      	lsls	r3, r3, #3
 80010ea:	440b      	add	r3, r1
 80010ec:	3308      	adds	r3, #8
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	68ba      	ldr	r2, [r7, #8]
 80010f2:	429a      	cmp	r2, r3
 80010f4:	d2dc      	bcs.n	80010b0 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 80010f6:	7b7a      	ldrb	r2, [r7, #13]
 80010f8:	79fb      	ldrb	r3, [r7, #7]
 80010fa:	4611      	mov	r1, r2
 80010fc:	4618      	mov	r0, r3
 80010fe:	f7ff fecf 	bl	8000ea0 <LinkTimerAfter>
 8001102:	e00f      	b.n	8001124 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8001104:	4b0a      	ldr	r3, [pc, #40]	; (8001130 <linkTimer+0x144>)
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	b2da      	uxtb	r2, r3
 800110a:	79fb      	ldrb	r3, [r7, #7]
 800110c:	4611      	mov	r1, r2
 800110e:	4618      	mov	r0, r3
 8001110:	f7ff ff0c 	bl	8000f2c <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8001114:	4b06      	ldr	r3, [pc, #24]	; (8001130 <linkTimer+0x144>)
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	b2da      	uxtb	r2, r3
 800111a:	4b06      	ldr	r3, [pc, #24]	; (8001134 <linkTimer+0x148>)
 800111c:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 800111e:	4a04      	ldr	r2, [pc, #16]	; (8001130 <linkTimer+0x144>)
 8001120:	79fb      	ldrb	r3, [r7, #7]
 8001122:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8001124:	89fb      	ldrh	r3, [r7, #14]
}
 8001126:	4618      	mov	r0, r3
 8001128:	3710      	adds	r7, #16
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	20000a08 	.word	0x20000a08
 8001134:	20000a09 	.word	0x20000a09
 8001138:	20000978 	.word	0x20000978
 800113c:	20000a0c 	.word	0x20000a0c

08001140 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8001140:	b480      	push	{r7}
 8001142:	b085      	sub	sp, #20
 8001144:	af00      	add	r7, sp, #0
 8001146:	4603      	mov	r3, r0
 8001148:	460a      	mov	r2, r1
 800114a:	71fb      	strb	r3, [r7, #7]
 800114c:	4613      	mov	r3, r2
 800114e:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8001150:	4b39      	ldr	r3, [pc, #228]	; (8001238 <UnlinkTimer+0xf8>)
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	b2db      	uxtb	r3, r3
 8001156:	79fa      	ldrb	r2, [r7, #7]
 8001158:	429a      	cmp	r2, r3
 800115a:	d111      	bne.n	8001180 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 800115c:	4b36      	ldr	r3, [pc, #216]	; (8001238 <UnlinkTimer+0xf8>)
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	b2da      	uxtb	r2, r3
 8001162:	4b36      	ldr	r3, [pc, #216]	; (800123c <UnlinkTimer+0xfc>)
 8001164:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8001166:	79fa      	ldrb	r2, [r7, #7]
 8001168:	4935      	ldr	r1, [pc, #212]	; (8001240 <UnlinkTimer+0x100>)
 800116a:	4613      	mov	r3, r2
 800116c:	005b      	lsls	r3, r3, #1
 800116e:	4413      	add	r3, r2
 8001170:	00db      	lsls	r3, r3, #3
 8001172:	440b      	add	r3, r1
 8001174:	3315      	adds	r3, #21
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	b2da      	uxtb	r2, r3
 800117a:	4b2f      	ldr	r3, [pc, #188]	; (8001238 <UnlinkTimer+0xf8>)
 800117c:	701a      	strb	r2, [r3, #0]
 800117e:	e03e      	b.n	80011fe <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8001180:	79fa      	ldrb	r2, [r7, #7]
 8001182:	492f      	ldr	r1, [pc, #188]	; (8001240 <UnlinkTimer+0x100>)
 8001184:	4613      	mov	r3, r2
 8001186:	005b      	lsls	r3, r3, #1
 8001188:	4413      	add	r3, r2
 800118a:	00db      	lsls	r3, r3, #3
 800118c:	440b      	add	r3, r1
 800118e:	3314      	adds	r3, #20
 8001190:	781b      	ldrb	r3, [r3, #0]
 8001192:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8001194:	79fa      	ldrb	r2, [r7, #7]
 8001196:	492a      	ldr	r1, [pc, #168]	; (8001240 <UnlinkTimer+0x100>)
 8001198:	4613      	mov	r3, r2
 800119a:	005b      	lsls	r3, r3, #1
 800119c:	4413      	add	r3, r2
 800119e:	00db      	lsls	r3, r3, #3
 80011a0:	440b      	add	r3, r1
 80011a2:	3315      	adds	r3, #21
 80011a4:	781b      	ldrb	r3, [r3, #0]
 80011a6:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 80011a8:	79f9      	ldrb	r1, [r7, #7]
 80011aa:	7bfa      	ldrb	r2, [r7, #15]
 80011ac:	4824      	ldr	r0, [pc, #144]	; (8001240 <UnlinkTimer+0x100>)
 80011ae:	460b      	mov	r3, r1
 80011b0:	005b      	lsls	r3, r3, #1
 80011b2:	440b      	add	r3, r1
 80011b4:	00db      	lsls	r3, r3, #3
 80011b6:	4403      	add	r3, r0
 80011b8:	3315      	adds	r3, #21
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	b2d8      	uxtb	r0, r3
 80011be:	4920      	ldr	r1, [pc, #128]	; (8001240 <UnlinkTimer+0x100>)
 80011c0:	4613      	mov	r3, r2
 80011c2:	005b      	lsls	r3, r3, #1
 80011c4:	4413      	add	r3, r2
 80011c6:	00db      	lsls	r3, r3, #3
 80011c8:	440b      	add	r3, r1
 80011ca:	3315      	adds	r3, #21
 80011cc:	4602      	mov	r2, r0
 80011ce:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80011d0:	7bbb      	ldrb	r3, [r7, #14]
 80011d2:	2b06      	cmp	r3, #6
 80011d4:	d013      	beq.n	80011fe <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 80011d6:	79f9      	ldrb	r1, [r7, #7]
 80011d8:	7bba      	ldrb	r2, [r7, #14]
 80011da:	4819      	ldr	r0, [pc, #100]	; (8001240 <UnlinkTimer+0x100>)
 80011dc:	460b      	mov	r3, r1
 80011de:	005b      	lsls	r3, r3, #1
 80011e0:	440b      	add	r3, r1
 80011e2:	00db      	lsls	r3, r3, #3
 80011e4:	4403      	add	r3, r0
 80011e6:	3314      	adds	r3, #20
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	b2d8      	uxtb	r0, r3
 80011ec:	4914      	ldr	r1, [pc, #80]	; (8001240 <UnlinkTimer+0x100>)
 80011ee:	4613      	mov	r3, r2
 80011f0:	005b      	lsls	r3, r3, #1
 80011f2:	4413      	add	r3, r2
 80011f4:	00db      	lsls	r3, r3, #3
 80011f6:	440b      	add	r3, r1
 80011f8:	3314      	adds	r3, #20
 80011fa:	4602      	mov	r2, r0
 80011fc:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 80011fe:	79fa      	ldrb	r2, [r7, #7]
 8001200:	490f      	ldr	r1, [pc, #60]	; (8001240 <UnlinkTimer+0x100>)
 8001202:	4613      	mov	r3, r2
 8001204:	005b      	lsls	r3, r3, #1
 8001206:	4413      	add	r3, r2
 8001208:	00db      	lsls	r3, r3, #3
 800120a:	440b      	add	r3, r1
 800120c:	330c      	adds	r3, #12
 800120e:	2201      	movs	r2, #1
 8001210:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8001212:	4b09      	ldr	r3, [pc, #36]	; (8001238 <UnlinkTimer+0xf8>)
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	b2db      	uxtb	r3, r3
 8001218:	2b06      	cmp	r3, #6
 800121a:	d107      	bne.n	800122c <UnlinkTimer+0xec>
 800121c:	79bb      	ldrb	r3, [r7, #6]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d104      	bne.n	800122c <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001222:	4b08      	ldr	r3, [pc, #32]	; (8001244 <UnlinkTimer+0x104>)
 8001224:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001228:	601a      	str	r2, [r3, #0]
  }

  return;
 800122a:	bf00      	nop
 800122c:	bf00      	nop
}
 800122e:	3714      	adds	r7, #20
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr
 8001238:	20000a08 	.word	0x20000a08
 800123c:	20000a09 	.word	0x20000a09
 8001240:	20000978 	.word	0x20000978
 8001244:	20000a0c 	.word	0x20000a0c

08001248 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 800124e:	4b1a      	ldr	r3, [pc, #104]	; (80012b8 <ReturnTimeElapsed+0x70>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001256:	d026      	beq.n	80012a6 <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8001258:	f7ff fe02 	bl	8000e60 <ReadRtcSsrValue>
 800125c:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 800125e:	4b16      	ldr	r3, [pc, #88]	; (80012b8 <ReturnTimeElapsed+0x70>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	687a      	ldr	r2, [r7, #4]
 8001264:	429a      	cmp	r2, r3
 8001266:	d805      	bhi.n	8001274 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8001268:	4b13      	ldr	r3, [pc, #76]	; (80012b8 <ReturnTimeElapsed+0x70>)
 800126a:	681a      	ldr	r2, [r3, #0]
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	1ad3      	subs	r3, r2, r3
 8001270:	607b      	str	r3, [r7, #4]
 8001272:	e00a      	b.n	800128a <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8001274:	4b11      	ldr	r3, [pc, #68]	; (80012bc <ReturnTimeElapsed+0x74>)
 8001276:	881b      	ldrh	r3, [r3, #0]
 8001278:	461a      	mov	r2, r3
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	1ad3      	subs	r3, r2, r3
 800127e:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8001280:	4b0d      	ldr	r3, [pc, #52]	; (80012b8 <ReturnTimeElapsed+0x70>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	683a      	ldr	r2, [r7, #0]
 8001286:	4413      	add	r3, r2
 8001288:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 800128a:	4b0d      	ldr	r3, [pc, #52]	; (80012c0 <ReturnTimeElapsed+0x78>)
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	461a      	mov	r2, r3
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	fb02 f303 	mul.w	r3, r2, r3
 8001296:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8001298:	4b0a      	ldr	r3, [pc, #40]	; (80012c4 <ReturnTimeElapsed+0x7c>)
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	461a      	mov	r2, r3
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	40d3      	lsrs	r3, r2
 80012a2:	607b      	str	r3, [r7, #4]
 80012a4:	e001      	b.n	80012aa <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 80012a6:	2300      	movs	r3, #0
 80012a8:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	b29b      	uxth	r3, r3
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	3708      	adds	r7, #8
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	20000a0c 	.word	0x20000a0c
 80012bc:	20000a14 	.word	0x20000a14
 80012c0:	20000a12 	.word	0x20000a12
 80012c4:	20000a11 	.word	0x20000a11

080012c8 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	4603      	mov	r3, r0
 80012d0:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 80012d2:	88fb      	ldrh	r3, [r7, #6]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d108      	bne.n	80012ea <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 80012d8:	f7ff fdc2 	bl	8000e60 <ReadRtcSsrValue>
 80012dc:	4603      	mov	r3, r0
 80012de:	4a21      	ldr	r2, [pc, #132]	; (8001364 <RestartWakeupCounter+0x9c>)
 80012e0:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 80012e2:	2003      	movs	r0, #3
 80012e4:	f001 fb77 	bl	80029d6 <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 80012e8:	e039      	b.n	800135e <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 80012ea:	88fb      	ldrh	r3, [r7, #6]
 80012ec:	2b01      	cmp	r3, #1
 80012ee:	d803      	bhi.n	80012f8 <RestartWakeupCounter+0x30>
 80012f0:	4b1d      	ldr	r3, [pc, #116]	; (8001368 <RestartWakeupCounter+0xa0>)
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	2b01      	cmp	r3, #1
 80012f6:	d002      	beq.n	80012fe <RestartWakeupCounter+0x36>
      Value -= 1;
 80012f8:	88fb      	ldrh	r3, [r7, #6]
 80012fa:	3b01      	subs	r3, #1
 80012fc:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 80012fe:	bf00      	nop
 8001300:	4b1a      	ldr	r3, [pc, #104]	; (800136c <RestartWakeupCounter+0xa4>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	68db      	ldr	r3, [r3, #12]
 8001306:	f003 0304 	and.w	r3, r3, #4
 800130a:	2b00      	cmp	r3, #0
 800130c:	d0f8      	beq.n	8001300 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 800130e:	4b17      	ldr	r3, [pc, #92]	; (800136c <RestartWakeupCounter+0xa4>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	68db      	ldr	r3, [r3, #12]
 8001314:	b2da      	uxtb	r2, r3
 8001316:	4b15      	ldr	r3, [pc, #84]	; (800136c <RestartWakeupCounter+0xa4>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800131e:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001320:	4b13      	ldr	r3, [pc, #76]	; (8001370 <RestartWakeupCounter+0xa8>)
 8001322:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001326:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001328:	2003      	movs	r0, #3
 800132a:	f001 fb62 	bl	80029f2 <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 800132e:	4b11      	ldr	r3, [pc, #68]	; (8001374 <RestartWakeupCounter+0xac>)
 8001330:	695b      	ldr	r3, [r3, #20]
 8001332:	0c1b      	lsrs	r3, r3, #16
 8001334:	041b      	lsls	r3, r3, #16
 8001336:	88fa      	ldrh	r2, [r7, #6]
 8001338:	490e      	ldr	r1, [pc, #56]	; (8001374 <RestartWakeupCounter+0xac>)
 800133a:	4313      	orrs	r3, r2
 800133c:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 800133e:	f7ff fd8f 	bl	8000e60 <ReadRtcSsrValue>
 8001342:	4603      	mov	r3, r0
 8001344:	4a07      	ldr	r2, [pc, #28]	; (8001364 <RestartWakeupCounter+0x9c>)
 8001346:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 8001348:	4b08      	ldr	r3, [pc, #32]	; (800136c <RestartWakeupCounter+0xa4>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	689a      	ldr	r2, [r3, #8]
 800134e:	4b07      	ldr	r3, [pc, #28]	; (800136c <RestartWakeupCounter+0xa4>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001356:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8001358:	f3af 8000 	nop.w
  return ;
 800135c:	bf00      	nop
}
 800135e:	3708      	adds	r7, #8
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	20000a0c 	.word	0x20000a0c
 8001368:	20000a11 	.word	0x20000a11
 800136c:	20000ae0 	.word	0x20000ae0
 8001370:	58000800 	.word	0x58000800
 8001374:	40002800 	.word	0x40002800

08001378 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b084      	sub	sp, #16
 800137c:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 800137e:	4b45      	ldr	r3, [pc, #276]	; (8001494 <RescheduleTimerList+0x11c>)
 8001380:	689b      	ldr	r3, [r3, #8]
 8001382:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001386:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800138a:	d107      	bne.n	800139c <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 800138c:	bf00      	nop
 800138e:	4b42      	ldr	r3, [pc, #264]	; (8001498 <RescheduleTimerList+0x120>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	68db      	ldr	r3, [r3, #12]
 8001394:	f003 0304 	and.w	r3, r3, #4
 8001398:	2b00      	cmp	r3, #0
 800139a:	d1f8      	bne.n	800138e <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 800139c:	4b3e      	ldr	r3, [pc, #248]	; (8001498 <RescheduleTimerList+0x120>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	689a      	ldr	r2, [r3, #8]
 80013a2:	4b3d      	ldr	r3, [pc, #244]	; (8001498 <RescheduleTimerList+0x120>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80013aa:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 80013ac:	4b3b      	ldr	r3, [pc, #236]	; (800149c <RescheduleTimerList+0x124>)
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 80013b2:	7bfa      	ldrb	r2, [r7, #15]
 80013b4:	493a      	ldr	r1, [pc, #232]	; (80014a0 <RescheduleTimerList+0x128>)
 80013b6:	4613      	mov	r3, r2
 80013b8:	005b      	lsls	r3, r3, #1
 80013ba:	4413      	add	r3, r2
 80013bc:	00db      	lsls	r3, r3, #3
 80013be:	440b      	add	r3, r1
 80013c0:	3308      	adds	r3, #8
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 80013c6:	f7ff ff3f 	bl	8001248 <ReturnTimeElapsed>
 80013ca:	4603      	mov	r3, r0
 80013cc:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 80013ce:	88fb      	ldrh	r3, [r7, #6]
 80013d0:	68ba      	ldr	r2, [r7, #8]
 80013d2:	429a      	cmp	r2, r3
 80013d4:	d205      	bcs.n	80013e2 <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 80013d6:	2300      	movs	r3, #0
 80013d8:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80013da:	4b32      	ldr	r3, [pc, #200]	; (80014a4 <RescheduleTimerList+0x12c>)
 80013dc:	2201      	movs	r2, #1
 80013de:	701a      	strb	r2, [r3, #0]
 80013e0:	e04d      	b.n	800147e <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 80013e2:	88fb      	ldrh	r3, [r7, #6]
 80013e4:	4a30      	ldr	r2, [pc, #192]	; (80014a8 <RescheduleTimerList+0x130>)
 80013e6:	8812      	ldrh	r2, [r2, #0]
 80013e8:	b292      	uxth	r2, r2
 80013ea:	4413      	add	r3, r2
 80013ec:	461a      	mov	r2, r3
 80013ee:	68bb      	ldr	r3, [r7, #8]
 80013f0:	4293      	cmp	r3, r2
 80013f2:	d906      	bls.n	8001402 <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 80013f4:	4b2c      	ldr	r3, [pc, #176]	; (80014a8 <RescheduleTimerList+0x130>)
 80013f6:	881b      	ldrh	r3, [r3, #0]
 80013f8:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 80013fa:	4b2a      	ldr	r3, [pc, #168]	; (80014a4 <RescheduleTimerList+0x12c>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	701a      	strb	r2, [r3, #0]
 8001400:	e03d      	b.n	800147e <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8001402:	68bb      	ldr	r3, [r7, #8]
 8001404:	b29a      	uxth	r2, r3
 8001406:	88fb      	ldrh	r3, [r7, #6]
 8001408:	1ad3      	subs	r3, r2, r3
 800140a:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 800140c:	4b25      	ldr	r3, [pc, #148]	; (80014a4 <RescheduleTimerList+0x12c>)
 800140e:	2201      	movs	r2, #1
 8001410:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001412:	e034      	b.n	800147e <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8001414:	7bfa      	ldrb	r2, [r7, #15]
 8001416:	4922      	ldr	r1, [pc, #136]	; (80014a0 <RescheduleTimerList+0x128>)
 8001418:	4613      	mov	r3, r2
 800141a:	005b      	lsls	r3, r3, #1
 800141c:	4413      	add	r3, r2
 800141e:	00db      	lsls	r3, r3, #3
 8001420:	440b      	add	r3, r1
 8001422:	3308      	adds	r3, #8
 8001424:	681a      	ldr	r2, [r3, #0]
 8001426:	88fb      	ldrh	r3, [r7, #6]
 8001428:	429a      	cmp	r2, r3
 800142a:	d20a      	bcs.n	8001442 <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 800142c:	7bfa      	ldrb	r2, [r7, #15]
 800142e:	491c      	ldr	r1, [pc, #112]	; (80014a0 <RescheduleTimerList+0x128>)
 8001430:	4613      	mov	r3, r2
 8001432:	005b      	lsls	r3, r3, #1
 8001434:	4413      	add	r3, r2
 8001436:	00db      	lsls	r3, r3, #3
 8001438:	440b      	add	r3, r1
 800143a:	3308      	adds	r3, #8
 800143c:	2200      	movs	r2, #0
 800143e:	601a      	str	r2, [r3, #0]
 8001440:	e013      	b.n	800146a <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8001442:	7bfa      	ldrb	r2, [r7, #15]
 8001444:	4916      	ldr	r1, [pc, #88]	; (80014a0 <RescheduleTimerList+0x128>)
 8001446:	4613      	mov	r3, r2
 8001448:	005b      	lsls	r3, r3, #1
 800144a:	4413      	add	r3, r2
 800144c:	00db      	lsls	r3, r3, #3
 800144e:	440b      	add	r3, r1
 8001450:	3308      	adds	r3, #8
 8001452:	6819      	ldr	r1, [r3, #0]
 8001454:	88fb      	ldrh	r3, [r7, #6]
 8001456:	7bfa      	ldrb	r2, [r7, #15]
 8001458:	1ac9      	subs	r1, r1, r3
 800145a:	4811      	ldr	r0, [pc, #68]	; (80014a0 <RescheduleTimerList+0x128>)
 800145c:	4613      	mov	r3, r2
 800145e:	005b      	lsls	r3, r3, #1
 8001460:	4413      	add	r3, r2
 8001462:	00db      	lsls	r3, r3, #3
 8001464:	4403      	add	r3, r0
 8001466:	3308      	adds	r3, #8
 8001468:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 800146a:	7bfa      	ldrb	r2, [r7, #15]
 800146c:	490c      	ldr	r1, [pc, #48]	; (80014a0 <RescheduleTimerList+0x128>)
 800146e:	4613      	mov	r3, r2
 8001470:	005b      	lsls	r3, r3, #1
 8001472:	4413      	add	r3, r2
 8001474:	00db      	lsls	r3, r3, #3
 8001476:	440b      	add	r3, r1
 8001478:	3315      	adds	r3, #21
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800147e:	7bfb      	ldrb	r3, [r7, #15]
 8001480:	2b06      	cmp	r3, #6
 8001482:	d1c7      	bne.n	8001414 <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8001484:	89bb      	ldrh	r3, [r7, #12]
 8001486:	4618      	mov	r0, r3
 8001488:	f7ff ff1e 	bl	80012c8 <RestartWakeupCounter>

  return ;
 800148c:	bf00      	nop
}
 800148e:	3710      	adds	r7, #16
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	40002800 	.word	0x40002800
 8001498:	20000ae0 	.word	0x20000ae0
 800149c:	20000a08 	.word	0x20000a08
 80014a0:	20000978 	.word	0x20000978
 80014a4:	20000a10 	.word	0x20000a10
 80014a8:	20000a16 	.word	0x20000a16

080014ac <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b08a      	sub	sp, #40	; 0x28
 80014b0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80014b2:	f3ef 8310 	mrs	r3, PRIMASK
 80014b6:	617b      	str	r3, [r7, #20]
  return(result);
 80014b8:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80014ba:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 80014bc:	b672      	cpsid	i
}
 80014be:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80014c0:	4b59      	ldr	r3, [pc, #356]	; (8001628 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	22ca      	movs	r2, #202	; 0xca
 80014c6:	625a      	str	r2, [r3, #36]	; 0x24
 80014c8:	4b57      	ldr	r3, [pc, #348]	; (8001628 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	2253      	movs	r2, #83	; 0x53
 80014ce:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 80014d0:	4b55      	ldr	r3, [pc, #340]	; (8001628 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	689a      	ldr	r2, [r3, #8]
 80014d6:	4b54      	ldr	r3, [pc, #336]	; (8001628 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80014de:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 80014e0:	4b52      	ldr	r3, [pc, #328]	; (800162c <HW_TS_RTC_Wakeup_Handler+0x180>)
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 80014e8:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80014ec:	4950      	ldr	r1, [pc, #320]	; (8001630 <HW_TS_RTC_Wakeup_Handler+0x184>)
 80014ee:	4613      	mov	r3, r2
 80014f0:	005b      	lsls	r3, r3, #1
 80014f2:	4413      	add	r3, r2
 80014f4:	00db      	lsls	r3, r3, #3
 80014f6:	440b      	add	r3, r1
 80014f8:	330c      	adds	r3, #12
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	b2db      	uxtb	r3, r3
 80014fe:	2b02      	cmp	r3, #2
 8001500:	d16e      	bne.n	80015e0 <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8001502:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001506:	494a      	ldr	r1, [pc, #296]	; (8001630 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001508:	4613      	mov	r3, r2
 800150a:	005b      	lsls	r3, r3, #1
 800150c:	4413      	add	r3, r2
 800150e:	00db      	lsls	r3, r3, #3
 8001510:	440b      	add	r3, r1
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8001516:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800151a:	4945      	ldr	r1, [pc, #276]	; (8001630 <HW_TS_RTC_Wakeup_Handler+0x184>)
 800151c:	4613      	mov	r3, r2
 800151e:	005b      	lsls	r3, r3, #1
 8001520:	4413      	add	r3, r2
 8001522:	00db      	lsls	r3, r3, #3
 8001524:	440b      	add	r3, r1
 8001526:	3310      	adds	r3, #16
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 800152c:	4b41      	ldr	r3, [pc, #260]	; (8001634 <HW_TS_RTC_Wakeup_Handler+0x188>)
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	b2db      	uxtb	r3, r3
 8001532:	2b00      	cmp	r3, #0
 8001534:	d04c      	beq.n	80015d0 <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8001536:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800153a:	493d      	ldr	r1, [pc, #244]	; (8001630 <HW_TS_RTC_Wakeup_Handler+0x184>)
 800153c:	4613      	mov	r3, r2
 800153e:	005b      	lsls	r3, r3, #1
 8001540:	4413      	add	r3, r2
 8001542:	00db      	lsls	r3, r3, #3
 8001544:	440b      	add	r3, r1
 8001546:	330d      	adds	r3, #13
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	b2db      	uxtb	r3, r3
 800154c:	2b01      	cmp	r3, #1
 800154e:	d124      	bne.n	800159a <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8001550:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001554:	2101      	movs	r1, #1
 8001556:	4618      	mov	r0, r3
 8001558:	f7ff fdf2 	bl	8001140 <UnlinkTimer>
 800155c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800155e:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001560:	693b      	ldr	r3, [r7, #16]
 8001562:	f383 8810 	msr	PRIMASK, r3
}
 8001566:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8001568:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800156c:	4930      	ldr	r1, [pc, #192]	; (8001630 <HW_TS_RTC_Wakeup_Handler+0x184>)
 800156e:	4613      	mov	r3, r2
 8001570:	005b      	lsls	r3, r3, #1
 8001572:	4413      	add	r3, r2
 8001574:	00db      	lsls	r3, r3, #3
 8001576:	440b      	add	r3, r1
 8001578:	3304      	adds	r3, #4
 800157a:	681a      	ldr	r2, [r3, #0]
 800157c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001580:	4611      	mov	r1, r2
 8001582:	4618      	mov	r0, r3
 8001584:	f000 f9b8 	bl	80018f8 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001588:	4b27      	ldr	r3, [pc, #156]	; (8001628 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	22ca      	movs	r2, #202	; 0xca
 800158e:	625a      	str	r2, [r3, #36]	; 0x24
 8001590:	4b25      	ldr	r3, [pc, #148]	; (8001628 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	2253      	movs	r2, #83	; 0x53
 8001596:	625a      	str	r2, [r3, #36]	; 0x24
 8001598:	e012      	b.n	80015c0 <HW_TS_RTC_Wakeup_Handler+0x114>
 800159a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800159c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	f383 8810 	msr	PRIMASK, r3
}
 80015a4:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 80015a6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80015aa:	4618      	mov	r0, r3
 80015ac:	f000 f920 	bl	80017f0 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80015b0:	4b1d      	ldr	r3, [pc, #116]	; (8001628 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	22ca      	movs	r2, #202	; 0xca
 80015b6:	625a      	str	r2, [r3, #36]	; 0x24
 80015b8:	4b1b      	ldr	r3, [pc, #108]	; (8001628 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	2253      	movs	r2, #83	; 0x53
 80015be:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 80015c0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80015c4:	69fa      	ldr	r2, [r7, #28]
 80015c6:	4619      	mov	r1, r3
 80015c8:	69b8      	ldr	r0, [r7, #24]
 80015ca:	f000 fa1b 	bl	8001a04 <HW_TS_RTC_Int_AppNot>
 80015ce:	e022      	b.n	8001616 <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 80015d0:	f7ff fed2 	bl	8001378 <RescheduleTimerList>
 80015d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80015d8:	68bb      	ldr	r3, [r7, #8]
 80015da:	f383 8810 	msr	PRIMASK, r3
}
 80015de:	e01a      	b.n	8001616 <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 80015e0:	bf00      	nop
 80015e2:	4b11      	ldr	r3, [pc, #68]	; (8001628 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	68db      	ldr	r3, [r3, #12]
 80015e8:	f003 0304 	and.w	r3, r3, #4
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d0f8      	beq.n	80015e2 <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80015f0:	4b0d      	ldr	r3, [pc, #52]	; (8001628 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	68db      	ldr	r3, [r3, #12]
 80015f6:	b2da      	uxtb	r2, r3
 80015f8:	4b0b      	ldr	r3, [pc, #44]	; (8001628 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001600:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001602:	4b0d      	ldr	r3, [pc, #52]	; (8001638 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001604:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001608:	60da      	str	r2, [r3, #12]
 800160a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800160c:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	f383 8810 	msr	PRIMASK, r3
}
 8001614:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001616:	4b04      	ldr	r3, [pc, #16]	; (8001628 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	22ff      	movs	r2, #255	; 0xff
 800161c:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 800161e:	bf00      	nop
}
 8001620:	3728      	adds	r7, #40	; 0x28
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	20000ae0 	.word	0x20000ae0
 800162c:	20000a08 	.word	0x20000a08
 8001630:	20000978 	.word	0x20000978
 8001634:	20000a10 	.word	0x20000a10
 8001638:	58000800 	.word	0x58000800

0800163c <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b088      	sub	sp, #32
 8001640:	af00      	add	r7, sp, #0
 8001642:	4603      	mov	r3, r0
 8001644:	6039      	str	r1, [r7, #0]
 8001646:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001648:	4b5e      	ldr	r3, [pc, #376]	; (80017c4 <HW_TS_Init+0x188>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	22ca      	movs	r2, #202	; 0xca
 800164e:	625a      	str	r2, [r3, #36]	; 0x24
 8001650:	4b5c      	ldr	r3, [pc, #368]	; (80017c4 <HW_TS_Init+0x188>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	2253      	movs	r2, #83	; 0x53
 8001656:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8001658:	4b5b      	ldr	r3, [pc, #364]	; (80017c8 <HW_TS_Init+0x18c>)
 800165a:	689b      	ldr	r3, [r3, #8]
 800165c:	4a5a      	ldr	r2, [pc, #360]	; (80017c8 <HW_TS_Init+0x18c>)
 800165e:	f043 0320 	orr.w	r3, r3, #32
 8001662:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8001664:	4b58      	ldr	r3, [pc, #352]	; (80017c8 <HW_TS_Init+0x18c>)
 8001666:	689b      	ldr	r3, [r3, #8]
 8001668:	b2db      	uxtb	r3, r3
 800166a:	f003 0307 	and.w	r3, r3, #7
 800166e:	b2db      	uxtb	r3, r3
 8001670:	f1c3 0304 	rsb	r3, r3, #4
 8001674:	b2da      	uxtb	r2, r3
 8001676:	4b55      	ldr	r3, [pc, #340]	; (80017cc <HW_TS_Init+0x190>)
 8001678:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 800167a:	4b53      	ldr	r3, [pc, #332]	; (80017c8 <HW_TS_Init+0x18c>)
 800167c:	691b      	ldr	r3, [r3, #16]
 800167e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001682:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 8001686:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001688:	693a      	ldr	r2, [r7, #16]
 800168a:	fa92 f2a2 	rbit	r2, r2
 800168e:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001690:	68fa      	ldr	r2, [r7, #12]
 8001692:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001694:	697a      	ldr	r2, [r7, #20]
 8001696:	2a00      	cmp	r2, #0
 8001698:	d101      	bne.n	800169e <HW_TS_Init+0x62>
  {
    return 32U;
 800169a:	2220      	movs	r2, #32
 800169c:	e003      	b.n	80016a6 <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 800169e:	697a      	ldr	r2, [r7, #20]
 80016a0:	fab2 f282 	clz	r2, r2
 80016a4:	b2d2      	uxtb	r2, r2
 80016a6:	40d3      	lsrs	r3, r2
 80016a8:	b2db      	uxtb	r3, r3
 80016aa:	3301      	adds	r3, #1
 80016ac:	b2da      	uxtb	r2, r3
 80016ae:	4b48      	ldr	r3, [pc, #288]	; (80017d0 <HW_TS_Init+0x194>)
 80016b0:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 80016b2:	4b45      	ldr	r3, [pc, #276]	; (80017c8 <HW_TS_Init+0x18c>)
 80016b4:	691b      	ldr	r3, [r3, #16]
 80016b6:	b29b      	uxth	r3, r3
 80016b8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80016bc:	b29b      	uxth	r3, r3
 80016be:	3301      	adds	r3, #1
 80016c0:	b29a      	uxth	r2, r3
 80016c2:	4b44      	ldr	r3, [pc, #272]	; (80017d4 <HW_TS_Init+0x198>)
 80016c4:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 80016c6:	4b43      	ldr	r3, [pc, #268]	; (80017d4 <HW_TS_Init+0x198>)
 80016c8:	881b      	ldrh	r3, [r3, #0]
 80016ca:	3b01      	subs	r3, #1
 80016cc:	4a40      	ldr	r2, [pc, #256]	; (80017d0 <HW_TS_Init+0x194>)
 80016ce:	7812      	ldrb	r2, [r2, #0]
 80016d0:	fb02 f303 	mul.w	r3, r2, r3
 80016d4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80016d8:	4a3c      	ldr	r2, [pc, #240]	; (80017cc <HW_TS_Init+0x190>)
 80016da:	7812      	ldrb	r2, [r2, #0]
 80016dc:	40d3      	lsrs	r3, r2
 80016de:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 80016e0:	69bb      	ldr	r3, [r7, #24]
 80016e2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d904      	bls.n	80016f4 <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 80016ea:	4b3b      	ldr	r3, [pc, #236]	; (80017d8 <HW_TS_Init+0x19c>)
 80016ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016f0:	801a      	strh	r2, [r3, #0]
 80016f2:	e003      	b.n	80016fc <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 80016f4:	69bb      	ldr	r3, [r7, #24]
 80016f6:	b29a      	uxth	r2, r3
 80016f8:	4b37      	ldr	r3, [pc, #220]	; (80017d8 <HW_TS_Init+0x19c>)
 80016fa:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80016fc:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001700:	f7ff fb9c 	bl	8000e3c <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8001704:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001708:	f7ff fb84 	bl	8000e14 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 800170c:	79fb      	ldrb	r3, [r7, #7]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d13d      	bne.n	800178e <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001712:	4b32      	ldr	r3, [pc, #200]	; (80017dc <HW_TS_Init+0x1a0>)
 8001714:	2201      	movs	r2, #1
 8001716:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001718:	4b31      	ldr	r3, [pc, #196]	; (80017e0 <HW_TS_Init+0x1a4>)
 800171a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800171e:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8001720:	2300      	movs	r3, #0
 8001722:	77fb      	strb	r3, [r7, #31]
 8001724:	e00c      	b.n	8001740 <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8001726:	7ffa      	ldrb	r2, [r7, #31]
 8001728:	492e      	ldr	r1, [pc, #184]	; (80017e4 <HW_TS_Init+0x1a8>)
 800172a:	4613      	mov	r3, r2
 800172c:	005b      	lsls	r3, r3, #1
 800172e:	4413      	add	r3, r2
 8001730:	00db      	lsls	r3, r3, #3
 8001732:	440b      	add	r3, r1
 8001734:	330c      	adds	r3, #12
 8001736:	2200      	movs	r2, #0
 8001738:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 800173a:	7ffb      	ldrb	r3, [r7, #31]
 800173c:	3301      	adds	r3, #1
 800173e:	77fb      	strb	r3, [r7, #31]
 8001740:	7ffb      	ldrb	r3, [r7, #31]
 8001742:	2b05      	cmp	r3, #5
 8001744:	d9ef      	bls.n	8001726 <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8001746:	4b28      	ldr	r3, [pc, #160]	; (80017e8 <HW_TS_Init+0x1ac>)
 8001748:	2206      	movs	r2, #6
 800174a:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 800174c:	4b1d      	ldr	r3, [pc, #116]	; (80017c4 <HW_TS_Init+0x188>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	689a      	ldr	r2, [r3, #8]
 8001752:	4b1c      	ldr	r3, [pc, #112]	; (80017c4 <HW_TS_Init+0x188>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800175a:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 800175c:	4b19      	ldr	r3, [pc, #100]	; (80017c4 <HW_TS_Init+0x188>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	68db      	ldr	r3, [r3, #12]
 8001762:	b2da      	uxtb	r2, r3
 8001764:	4b17      	ldr	r3, [pc, #92]	; (80017c4 <HW_TS_Init+0x188>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800176c:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 800176e:	4b1f      	ldr	r3, [pc, #124]	; (80017ec <HW_TS_Init+0x1b0>)
 8001770:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001774:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8001776:	2003      	movs	r0, #3
 8001778:	f001 f93b 	bl	80029f2 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 800177c:	4b11      	ldr	r3, [pc, #68]	; (80017c4 <HW_TS_Init+0x188>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	689a      	ldr	r2, [r3, #8]
 8001782:	4b10      	ldr	r3, [pc, #64]	; (80017c4 <HW_TS_Init+0x188>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800178a:	609a      	str	r2, [r3, #8]
 800178c:	e009      	b.n	80017a2 <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 800178e:	4b0d      	ldr	r3, [pc, #52]	; (80017c4 <HW_TS_Init+0x188>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	68db      	ldr	r3, [r3, #12]
 8001794:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001798:	2b00      	cmp	r3, #0
 800179a:	d002      	beq.n	80017a2 <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 800179c:	2003      	movs	r0, #3
 800179e:	f001 f91a 	bl	80029d6 <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80017a2:	4b08      	ldr	r3, [pc, #32]	; (80017c4 <HW_TS_Init+0x188>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	22ff      	movs	r2, #255	; 0xff
 80017a8:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 80017aa:	2200      	movs	r2, #0
 80017ac:	2103      	movs	r1, #3
 80017ae:	2003      	movs	r0, #3
 80017b0:	f001 f8cf 	bl	8002952 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80017b4:	2003      	movs	r0, #3
 80017b6:	f001 f8e6 	bl	8002986 <HAL_NVIC_EnableIRQ>

  return;
 80017ba:	bf00      	nop
}
 80017bc:	3720      	adds	r7, #32
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	20000ae0 	.word	0x20000ae0
 80017c8:	40002800 	.word	0x40002800
 80017cc:	20000a11 	.word	0x20000a11
 80017d0:	20000a12 	.word	0x20000a12
 80017d4:	20000a14 	.word	0x20000a14
 80017d8:	20000a16 	.word	0x20000a16
 80017dc:	20000a10 	.word	0x20000a10
 80017e0:	20000a0c 	.word	0x20000a0c
 80017e4:	20000978 	.word	0x20000978
 80017e8:	20000a08 	.word	0x20000a08
 80017ec:	58000800 	.word	0x58000800

080017f0 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b086      	sub	sp, #24
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	4603      	mov	r3, r0
 80017f8:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80017fa:	f3ef 8310 	mrs	r3, PRIMASK
 80017fe:	60fb      	str	r3, [r7, #12]
  return(result);
 8001800:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001802:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001804:	b672      	cpsid	i
}
 8001806:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001808:	2003      	movs	r0, #3
 800180a:	f001 f8ca 	bl	80029a2 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 800180e:	4b34      	ldr	r3, [pc, #208]	; (80018e0 <HW_TS_Stop+0xf0>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	22ca      	movs	r2, #202	; 0xca
 8001814:	625a      	str	r2, [r3, #36]	; 0x24
 8001816:	4b32      	ldr	r3, [pc, #200]	; (80018e0 <HW_TS_Stop+0xf0>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	2253      	movs	r2, #83	; 0x53
 800181c:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 800181e:	79fa      	ldrb	r2, [r7, #7]
 8001820:	4930      	ldr	r1, [pc, #192]	; (80018e4 <HW_TS_Stop+0xf4>)
 8001822:	4613      	mov	r3, r2
 8001824:	005b      	lsls	r3, r3, #1
 8001826:	4413      	add	r3, r2
 8001828:	00db      	lsls	r3, r3, #3
 800182a:	440b      	add	r3, r1
 800182c:	330c      	adds	r3, #12
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	b2db      	uxtb	r3, r3
 8001832:	2b02      	cmp	r3, #2
 8001834:	d142      	bne.n	80018bc <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8001836:	79fb      	ldrb	r3, [r7, #7]
 8001838:	2100      	movs	r1, #0
 800183a:	4618      	mov	r0, r3
 800183c:	f7ff fc80 	bl	8001140 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8001840:	4b29      	ldr	r3, [pc, #164]	; (80018e8 <HW_TS_Stop+0xf8>)
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001846:	7cfb      	ldrb	r3, [r7, #19]
 8001848:	2b06      	cmp	r3, #6
 800184a:	d12f      	bne.n	80018ac <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 800184c:	4b27      	ldr	r3, [pc, #156]	; (80018ec <HW_TS_Stop+0xfc>)
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001854:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001858:	d107      	bne.n	800186a <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 800185a:	bf00      	nop
 800185c:	4b20      	ldr	r3, [pc, #128]	; (80018e0 <HW_TS_Stop+0xf0>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	68db      	ldr	r3, [r3, #12]
 8001862:	f003 0304 	and.w	r3, r3, #4
 8001866:	2b00      	cmp	r3, #0
 8001868:	d1f8      	bne.n	800185c <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 800186a:	4b1d      	ldr	r3, [pc, #116]	; (80018e0 <HW_TS_Stop+0xf0>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	689a      	ldr	r2, [r3, #8]
 8001870:	4b1b      	ldr	r3, [pc, #108]	; (80018e0 <HW_TS_Stop+0xf0>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001878:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 800187a:	bf00      	nop
 800187c:	4b18      	ldr	r3, [pc, #96]	; (80018e0 <HW_TS_Stop+0xf0>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	68db      	ldr	r3, [r3, #12]
 8001882:	f003 0304 	and.w	r3, r3, #4
 8001886:	2b00      	cmp	r3, #0
 8001888:	d0f8      	beq.n	800187c <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 800188a:	4b15      	ldr	r3, [pc, #84]	; (80018e0 <HW_TS_Stop+0xf0>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	68db      	ldr	r3, [r3, #12]
 8001890:	b2da      	uxtb	r2, r3
 8001892:	4b13      	ldr	r3, [pc, #76]	; (80018e0 <HW_TS_Stop+0xf0>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800189a:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 800189c:	4b14      	ldr	r3, [pc, #80]	; (80018f0 <HW_TS_Stop+0x100>)
 800189e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80018a2:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 80018a4:	2003      	movs	r0, #3
 80018a6:	f001 f8a4 	bl	80029f2 <HAL_NVIC_ClearPendingIRQ>
 80018aa:	e007      	b.n	80018bc <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80018ac:	4b11      	ldr	r3, [pc, #68]	; (80018f4 <HW_TS_Stop+0x104>)
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	b2db      	uxtb	r3, r3
 80018b2:	7cfa      	ldrb	r2, [r7, #19]
 80018b4:	429a      	cmp	r2, r3
 80018b6:	d001      	beq.n	80018bc <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 80018b8:	f7ff fd5e 	bl	8001378 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80018bc:	4b08      	ldr	r3, [pc, #32]	; (80018e0 <HW_TS_Stop+0xf0>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	22ff      	movs	r2, #255	; 0xff
 80018c2:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80018c4:	2003      	movs	r0, #3
 80018c6:	f001 f85e 	bl	8002986 <HAL_NVIC_EnableIRQ>
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80018ce:	68bb      	ldr	r3, [r7, #8]
 80018d0:	f383 8810 	msr	PRIMASK, r3
}
 80018d4:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80018d6:	bf00      	nop
}
 80018d8:	3718      	adds	r7, #24
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	20000ae0 	.word	0x20000ae0
 80018e4:	20000978 	.word	0x20000978
 80018e8:	20000a08 	.word	0x20000a08
 80018ec:	40002800 	.word	0x40002800
 80018f0:	58000800 	.word	0x58000800
 80018f4:	20000a09 	.word	0x20000a09

080018f8 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b086      	sub	sp, #24
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	4603      	mov	r3, r0
 8001900:	6039      	str	r1, [r7, #0]
 8001902:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001904:	79fa      	ldrb	r2, [r7, #7]
 8001906:	493b      	ldr	r1, [pc, #236]	; (80019f4 <HW_TS_Start+0xfc>)
 8001908:	4613      	mov	r3, r2
 800190a:	005b      	lsls	r3, r3, #1
 800190c:	4413      	add	r3, r2
 800190e:	00db      	lsls	r3, r3, #3
 8001910:	440b      	add	r3, r1
 8001912:	330c      	adds	r3, #12
 8001914:	781b      	ldrb	r3, [r3, #0]
 8001916:	b2db      	uxtb	r3, r3
 8001918:	2b02      	cmp	r3, #2
 800191a:	d103      	bne.n	8001924 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 800191c:	79fb      	ldrb	r3, [r7, #7]
 800191e:	4618      	mov	r0, r3
 8001920:	f7ff ff66 	bl	80017f0 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001924:	f3ef 8310 	mrs	r3, PRIMASK
 8001928:	60fb      	str	r3, [r7, #12]
  return(result);
 800192a:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800192c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800192e:	b672      	cpsid	i
}
 8001930:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001932:	2003      	movs	r0, #3
 8001934:	f001 f835 	bl	80029a2 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001938:	4b2f      	ldr	r3, [pc, #188]	; (80019f8 <HW_TS_Start+0x100>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	22ca      	movs	r2, #202	; 0xca
 800193e:	625a      	str	r2, [r3, #36]	; 0x24
 8001940:	4b2d      	ldr	r3, [pc, #180]	; (80019f8 <HW_TS_Start+0x100>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	2253      	movs	r2, #83	; 0x53
 8001946:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8001948:	79fa      	ldrb	r2, [r7, #7]
 800194a:	492a      	ldr	r1, [pc, #168]	; (80019f4 <HW_TS_Start+0xfc>)
 800194c:	4613      	mov	r3, r2
 800194e:	005b      	lsls	r3, r3, #1
 8001950:	4413      	add	r3, r2
 8001952:	00db      	lsls	r3, r3, #3
 8001954:	440b      	add	r3, r1
 8001956:	330c      	adds	r3, #12
 8001958:	2202      	movs	r2, #2
 800195a:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 800195c:	79fa      	ldrb	r2, [r7, #7]
 800195e:	4925      	ldr	r1, [pc, #148]	; (80019f4 <HW_TS_Start+0xfc>)
 8001960:	4613      	mov	r3, r2
 8001962:	005b      	lsls	r3, r3, #1
 8001964:	4413      	add	r3, r2
 8001966:	00db      	lsls	r3, r3, #3
 8001968:	440b      	add	r3, r1
 800196a:	3308      	adds	r3, #8
 800196c:	683a      	ldr	r2, [r7, #0]
 800196e:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8001970:	79fa      	ldrb	r2, [r7, #7]
 8001972:	4920      	ldr	r1, [pc, #128]	; (80019f4 <HW_TS_Start+0xfc>)
 8001974:	4613      	mov	r3, r2
 8001976:	005b      	lsls	r3, r3, #1
 8001978:	4413      	add	r3, r2
 800197a:	00db      	lsls	r3, r3, #3
 800197c:	440b      	add	r3, r1
 800197e:	3304      	adds	r3, #4
 8001980:	683a      	ldr	r2, [r7, #0]
 8001982:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8001984:	79fb      	ldrb	r3, [r7, #7]
 8001986:	4618      	mov	r0, r3
 8001988:	f7ff fb30 	bl	8000fec <linkTimer>
 800198c:	4603      	mov	r3, r0
 800198e:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8001990:	4b1a      	ldr	r3, [pc, #104]	; (80019fc <HW_TS_Start+0x104>)
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001996:	4b1a      	ldr	r3, [pc, #104]	; (8001a00 <HW_TS_Start+0x108>)
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	b2db      	uxtb	r3, r3
 800199c:	7c7a      	ldrb	r2, [r7, #17]
 800199e:	429a      	cmp	r2, r3
 80019a0:	d002      	beq.n	80019a8 <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 80019a2:	f7ff fce9 	bl	8001378 <RescheduleTimerList>
 80019a6:	e013      	b.n	80019d0 <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 80019a8:	79fa      	ldrb	r2, [r7, #7]
 80019aa:	4912      	ldr	r1, [pc, #72]	; (80019f4 <HW_TS_Start+0xfc>)
 80019ac:	4613      	mov	r3, r2
 80019ae:	005b      	lsls	r3, r3, #1
 80019b0:	4413      	add	r3, r2
 80019b2:	00db      	lsls	r3, r3, #3
 80019b4:	440b      	add	r3, r1
 80019b6:	3308      	adds	r3, #8
 80019b8:	6819      	ldr	r1, [r3, #0]
 80019ba:	8a7b      	ldrh	r3, [r7, #18]
 80019bc:	79fa      	ldrb	r2, [r7, #7]
 80019be:	1ac9      	subs	r1, r1, r3
 80019c0:	480c      	ldr	r0, [pc, #48]	; (80019f4 <HW_TS_Start+0xfc>)
 80019c2:	4613      	mov	r3, r2
 80019c4:	005b      	lsls	r3, r3, #1
 80019c6:	4413      	add	r3, r2
 80019c8:	00db      	lsls	r3, r3, #3
 80019ca:	4403      	add	r3, r0
 80019cc:	3308      	adds	r3, #8
 80019ce:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80019d0:	4b09      	ldr	r3, [pc, #36]	; (80019f8 <HW_TS_Start+0x100>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	22ff      	movs	r2, #255	; 0xff
 80019d6:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80019d8:	2003      	movs	r0, #3
 80019da:	f000 ffd4 	bl	8002986 <HAL_NVIC_EnableIRQ>
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80019e2:	68bb      	ldr	r3, [r7, #8]
 80019e4:	f383 8810 	msr	PRIMASK, r3
}
 80019e8:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80019ea:	bf00      	nop
}
 80019ec:	3718      	adds	r7, #24
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	20000978 	.word	0x20000978
 80019f8:	20000ae0 	.word	0x20000ae0
 80019fc:	20000a08 	.word	0x20000a08
 8001a00:	20000a09 	.word	0x20000a09

08001a04 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b084      	sub	sp, #16
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	60f8      	str	r0, [r7, #12]
 8001a0c:	460b      	mov	r3, r1
 8001a0e:	607a      	str	r2, [r7, #4]
 8001a10:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	4798      	blx	r3

  return;
 8001a16:	bf00      	nop
}
 8001a18:	3710      	adds	r7, #16
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}

08001a1e <LL_RCC_LSE_SetDriveCapability>:
{
 8001a1e:	b480      	push	{r7}
 8001a20:	b083      	sub	sp, #12
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001a26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a2e:	f023 0218 	bic.w	r2, r3, #24
 8001a32:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001a3e:	bf00      	nop
 8001a40:	370c      	adds	r7, #12
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr

08001a4a <LL_AHB2_GRP1_EnableClock>:
{
 8001a4a:	b480      	push	{r7}
 8001a4c:	b085      	sub	sp, #20
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001a52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a56:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a58:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001a62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a66:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a6e:	68fb      	ldr	r3, [r7, #12]
}
 8001a70:	bf00      	nop
 8001a72:	3714      	adds	r7, #20
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr

08001a7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a82:	f000 fd99 	bl	80025b8 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 8001a86:	f7fe ffed 	bl	8000a64 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a8a:	f000 f847 	bl	8001b1c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001a8e:	f000 f8a7 	bl	8001be0 <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 8001a92:	f000 f905 	bl	8001ca0 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a96:	f000 f9cd 	bl	8001e34 <MX_GPIO_Init>
  MX_RTC_Init();
 8001a9a:	f000 f949 	bl	8001d30 <MX_RTC_Init>
  MX_I2C1_Init();
 8001a9e:	f000 f8bf 	bl	8001c20 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8001aa2:	f000 f979 	bl	8001d98 <MX_USART1_UART_Init>
  MX_LPTIM1_Init();
 8001aa6:	f000 f90f 	bl	8001cc8 <MX_LPTIM1_Init>
  MX_RF_Init();
 8001aaa:	f000 f939 	bl	8001d20 <MX_RF_Init>
  /* USER CODE BEGIN 2 */

  /* Set up timer */
  if(HAL_LPTIM_TimeOut_Start_IT(&hlptim1, PERIOD, TIMEOUT) != HAL_OK){  //pointer to the handler, period, timeout val to start the timer
 8001aae:	2200      	movs	r2, #0
 8001ab0:	f44f 6183 	mov.w	r1, #1048	; 0x418
 8001ab4:	4813      	ldr	r0, [pc, #76]	; (8001b04 <main+0x88>)
 8001ab6:	f002 f91f 	bl	8003cf8 <HAL_LPTIM_TimeOut_Start_IT>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d001      	beq.n	8001ac4 <main+0x48>
	  Error_Handler();
 8001ac0:	f000 fa4a 	bl	8001f58 <Error_Handler>
  }

  /* Set up heart rate sensor */
  uint8_t status;									//see BH1780GLC.h for err codes

  printf("Configuring sensor...");
 8001ac4:	4810      	ldr	r0, [pc, #64]	; (8001b08 <main+0x8c>)
 8001ac6:	f008 fb25 	bl	800a114 <iprintf>
  HAL_Delay(10);									//wait as a precaution
 8001aca:	200a      	movs	r0, #10
 8001acc:	f7ff f93f 	bl	8000d4e <HAL_Delay>
  status = BH1790GLC_init(&hrm, &hi2c1);			//configure sensor
 8001ad0:	490e      	ldr	r1, [pc, #56]	; (8001b0c <main+0x90>)
 8001ad2:	480f      	ldr	r0, [pc, #60]	; (8001b10 <main+0x94>)
 8001ad4:	f7fe fd2e 	bl	8000534 <BH1790GLC_init>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	71fb      	strb	r3, [r7, #7]
  if(status != 0){
 8001adc:	79fb      	ldrb	r3, [r7, #7]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d005      	beq.n	8001aee <main+0x72>
	  printf("Error configuring sensor. Status code: %d\n\r", status);
 8001ae2:	79fb      	ldrb	r3, [r7, #7]
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	480b      	ldr	r0, [pc, #44]	; (8001b14 <main+0x98>)
 8001ae8:	f008 fb14 	bl	800a114 <iprintf>
 8001aec:	e004      	b.n	8001af8 <main+0x7c>
  }else{
	  printf("Sensor configured successfully. Status code: %d\n\r", status);
 8001aee:	79fb      	ldrb	r3, [r7, #7]
 8001af0:	4619      	mov	r1, r3
 8001af2:	4809      	ldr	r0, [pc, #36]	; (8001b18 <main+0x9c>)
 8001af4:	f008 fb0e 	bl	800a114 <iprintf>
  }

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 8001af8:	f7fe ffc2 	bl	8000a80 <MX_APPE_Init>
  /* USER CODE BEGIN WHILE */
  // TO DO: FIGURE OUT IF THIS IS A GOOD IDEA... HAL_PWREx_EnterSTOP1Mode(PWR_STOPENTRY_WFI);	//enter low power mode
  while (1)
  {
    /* USER CODE END WHILE */
    MX_APPE_Process();
 8001afc:	f7ff f94c 	bl	8000d98 <MX_APPE_Process>
 8001b00:	e7fc      	b.n	8001afc <main+0x80>
 8001b02:	bf00      	nop
 8001b04:	20000aa8 	.word	0x20000aa8
 8001b08:	0800b064 	.word	0x0800b064
 8001b0c:	20000a18 	.word	0x20000a18
 8001b10:	20000b98 	.word	0x20000b98
 8001b14:	0800b07c 	.word	0x0800b07c
 8001b18:	0800b0a8 	.word	0x0800b0a8

08001b1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b09a      	sub	sp, #104	; 0x68
 8001b20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b22:	f107 0320 	add.w	r3, r7, #32
 8001b26:	2248      	movs	r2, #72	; 0x48
 8001b28:	2100      	movs	r1, #0
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f008 faea 	bl	800a104 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b30:	1d3b      	adds	r3, r7, #4
 8001b32:	2200      	movs	r2, #0
 8001b34:	601a      	str	r2, [r3, #0]
 8001b36:	605a      	str	r2, [r3, #4]
 8001b38:	609a      	str	r2, [r3, #8]
 8001b3a:	60da      	str	r2, [r3, #12]
 8001b3c:	611a      	str	r2, [r3, #16]
 8001b3e:	615a      	str	r2, [r3, #20]
 8001b40:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001b42:	f002 fb4d 	bl	80041e0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 8001b46:	2010      	movs	r0, #16
 8001b48:	f7ff ff69 	bl	8001a1e <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b4c:	4b23      	ldr	r3, [pc, #140]	; (8001bdc <SystemClock_Config+0xc0>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001b54:	4a21      	ldr	r2, [pc, #132]	; (8001bdc <SystemClock_Config+0xc0>)
 8001b56:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b5a:	6013      	str	r3, [r2, #0]
 8001b5c:	4b1f      	ldr	r3, [pc, #124]	; (8001bdc <SystemClock_Config+0xc0>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001b64:	603b      	str	r3, [r7, #0]
 8001b66:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8001b68:	2327      	movs	r3, #39	; 0x27
 8001b6a:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b6c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b70:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001b72:	2301      	movs	r3, #1
 8001b74:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b76:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001b80:	2340      	movs	r3, #64	; 0x40
 8001b82:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001b84:	2300      	movs	r3, #0
 8001b86:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 8001b88:	23a0      	movs	r3, #160	; 0xa0
 8001b8a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b90:	f107 0320 	add.w	r3, r7, #32
 8001b94:	4618      	mov	r0, r3
 8001b96:	f002 feb7 	bl	8004908 <HAL_RCC_OscConfig>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d001      	beq.n	8001ba4 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8001ba0:	f000 f9da 	bl	8001f58 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8001ba4:	236f      	movs	r3, #111	; 0x6f
 8001ba6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001bac:	2300      	movs	r3, #0
 8001bae:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001bc0:	1d3b      	adds	r3, r7, #4
 8001bc2:	2101      	movs	r1, #1
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f003 fa13 	bl	8004ff0 <HAL_RCC_ClockConfig>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d001      	beq.n	8001bd4 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8001bd0:	f000 f9c2 	bl	8001f58 <Error_Handler>
  }
}
 8001bd4:	bf00      	nop
 8001bd6:	3768      	adds	r7, #104	; 0x68
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	58000400 	.word	0x58000400

08001be0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b094      	sub	sp, #80	; 0x50
 8001be4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001be6:	463b      	mov	r3, r7
 8001be8:	2250      	movs	r2, #80	; 0x50
 8001bea:	2100      	movs	r1, #0
 8001bec:	4618      	mov	r0, r3
 8001bee:	f008 fa89 	bl	800a104 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 8001bf2:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001bf6:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 8001bf8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001bfc:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8001c02:	2300      	movs	r3, #0
 8001c04:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c06:	463b      	mov	r3, r7
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f003 fe2e 	bl	800586a <HAL_RCCEx_PeriphCLKConfig>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d001      	beq.n	8001c18 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8001c14:	f000 f9a0 	bl	8001f58 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8001c18:	bf00      	nop
 8001c1a:	3750      	adds	r7, #80	; 0x50
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}

08001c20 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001c24:	4b1b      	ldr	r3, [pc, #108]	; (8001c94 <MX_I2C1_Init+0x74>)
 8001c26:	4a1c      	ldr	r2, [pc, #112]	; (8001c98 <MX_I2C1_Init+0x78>)
 8001c28:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8001c2a:	4b1a      	ldr	r3, [pc, #104]	; (8001c94 <MX_I2C1_Init+0x74>)
 8001c2c:	4a1b      	ldr	r2, [pc, #108]	; (8001c9c <MX_I2C1_Init+0x7c>)
 8001c2e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001c30:	4b18      	ldr	r3, [pc, #96]	; (8001c94 <MX_I2C1_Init+0x74>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c36:	4b17      	ldr	r3, [pc, #92]	; (8001c94 <MX_I2C1_Init+0x74>)
 8001c38:	2201      	movs	r2, #1
 8001c3a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c3c:	4b15      	ldr	r3, [pc, #84]	; (8001c94 <MX_I2C1_Init+0x74>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001c42:	4b14      	ldr	r3, [pc, #80]	; (8001c94 <MX_I2C1_Init+0x74>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001c48:	4b12      	ldr	r3, [pc, #72]	; (8001c94 <MX_I2C1_Init+0x74>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c4e:	4b11      	ldr	r3, [pc, #68]	; (8001c94 <MX_I2C1_Init+0x74>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c54:	4b0f      	ldr	r3, [pc, #60]	; (8001c94 <MX_I2C1_Init+0x74>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001c5a:	480e      	ldr	r0, [pc, #56]	; (8001c94 <MX_I2C1_Init+0x74>)
 8001c5c:	f001 f884 	bl	8002d68 <HAL_I2C_Init>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d001      	beq.n	8001c6a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001c66:	f000 f977 	bl	8001f58 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001c6a:	2100      	movs	r1, #0
 8001c6c:	4809      	ldr	r0, [pc, #36]	; (8001c94 <MX_I2C1_Init+0x74>)
 8001c6e:	f001 fe0b 	bl	8003888 <HAL_I2CEx_ConfigAnalogFilter>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d001      	beq.n	8001c7c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001c78:	f000 f96e 	bl	8001f58 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001c7c:	2100      	movs	r1, #0
 8001c7e:	4805      	ldr	r0, [pc, #20]	; (8001c94 <MX_I2C1_Init+0x74>)
 8001c80:	f001 fe4d 	bl	800391e <HAL_I2CEx_ConfigDigitalFilter>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d001      	beq.n	8001c8e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001c8a:	f000 f965 	bl	8001f58 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001c8e:	bf00      	nop
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	20000a18 	.word	0x20000a18
 8001c98:	40005400 	.word	0x40005400
 8001c9c:	00707cbb 	.word	0x00707cbb

08001ca0 <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8001ca4:	4b06      	ldr	r3, [pc, #24]	; (8001cc0 <MX_IPCC_Init+0x20>)
 8001ca6:	4a07      	ldr	r2, [pc, #28]	; (8001cc4 <MX_IPCC_Init+0x24>)
 8001ca8:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 8001caa:	4805      	ldr	r0, [pc, #20]	; (8001cc0 <MX_IPCC_Init+0x20>)
 8001cac:	f001 fe84 	bl	80039b8 <HAL_IPCC_Init>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d001      	beq.n	8001cba <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 8001cb6:	f000 f94f 	bl	8001f58 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 8001cba:	bf00      	nop
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	20000a6c 	.word	0x20000a6c
 8001cc4:	58000c00 	.word	0x58000c00

08001cc8 <MX_LPTIM1_Init>:
  * @brief LPTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM1_Init(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 8001ccc:	4b12      	ldr	r3, [pc, #72]	; (8001d18 <MX_LPTIM1_Init+0x50>)
 8001cce:	4a13      	ldr	r2, [pc, #76]	; (8001d1c <MX_LPTIM1_Init+0x54>)
 8001cd0:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8001cd2:	4b11      	ldr	r3, [pc, #68]	; (8001d18 <MX_LPTIM1_Init+0x50>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 8001cd8:	4b0f      	ldr	r3, [pc, #60]	; (8001d18 <MX_LPTIM1_Init+0x50>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8001cde:	4b0e      	ldr	r3, [pc, #56]	; (8001d18 <MX_LPTIM1_Init+0x50>)
 8001ce0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ce4:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8001ce6:	4b0c      	ldr	r3, [pc, #48]	; (8001d18 <MX_LPTIM1_Init+0x50>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8001cec:	4b0a      	ldr	r3, [pc, #40]	; (8001d18 <MX_LPTIM1_Init+0x50>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 8001cf2:	4b09      	ldr	r3, [pc, #36]	; (8001d18 <MX_LPTIM1_Init+0x50>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	629a      	str	r2, [r3, #40]	; 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8001cf8:	4b07      	ldr	r3, [pc, #28]	; (8001d18 <MX_LPTIM1_Init+0x50>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	62da      	str	r2, [r3, #44]	; 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 8001cfe:	4b06      	ldr	r3, [pc, #24]	; (8001d18 <MX_LPTIM1_Init+0x50>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 8001d04:	4804      	ldr	r0, [pc, #16]	; (8001d18 <MX_LPTIM1_Init+0x50>)
 8001d06:	f001 ff55 	bl	8003bb4 <HAL_LPTIM_Init>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d001      	beq.n	8001d14 <MX_LPTIM1_Init+0x4c>
  {
    Error_Handler();
 8001d10:	f000 f922 	bl	8001f58 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 8001d14:	bf00      	nop
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	20000aa8 	.word	0x20000aa8
 8001d1c:	40007c00 	.word	0x40007c00

08001d20 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8001d20:	b480      	push	{r7}
 8001d22:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8001d24:	bf00      	nop
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr
	...

08001d30 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001d34:	4b16      	ldr	r3, [pc, #88]	; (8001d90 <MX_RTC_Init+0x60>)
 8001d36:	4a17      	ldr	r2, [pc, #92]	; (8001d94 <MX_RTC_Init+0x64>)
 8001d38:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001d3a:	4b15      	ldr	r3, [pc, #84]	; (8001d90 <MX_RTC_Init+0x60>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8001d40:	4b13      	ldr	r3, [pc, #76]	; (8001d90 <MX_RTC_Init+0x60>)
 8001d42:	220f      	movs	r2, #15
 8001d44:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8001d46:	4b12      	ldr	r3, [pc, #72]	; (8001d90 <MX_RTC_Init+0x60>)
 8001d48:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8001d4c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001d4e:	4b10      	ldr	r3, [pc, #64]	; (8001d90 <MX_RTC_Init+0x60>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001d54:	4b0e      	ldr	r3, [pc, #56]	; (8001d90 <MX_RTC_Init+0x60>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001d5a:	4b0d      	ldr	r3, [pc, #52]	; (8001d90 <MX_RTC_Init+0x60>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001d60:	4b0b      	ldr	r3, [pc, #44]	; (8001d90 <MX_RTC_Init+0x60>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001d66:	480a      	ldr	r0, [pc, #40]	; (8001d90 <MX_RTC_Init+0x60>)
 8001d68:	f004 f806 	bl	8005d78 <HAL_RTC_Init>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d001      	beq.n	8001d76 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8001d72:	f000 f8f1 	bl	8001f58 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8001d76:	2200      	movs	r2, #0
 8001d78:	2100      	movs	r1, #0
 8001d7a:	4805      	ldr	r0, [pc, #20]	; (8001d90 <MX_RTC_Init+0x60>)
 8001d7c:	f004 f8fc 	bl	8005f78 <HAL_RTCEx_SetWakeUpTimer_IT>
 8001d80:	4603      	mov	r3, r0
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d001      	beq.n	8001d8a <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8001d86:	f000 f8e7 	bl	8001f58 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001d8a:	bf00      	nop
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	20000ae0 	.word	0x20000ae0
 8001d94:	40002800 	.word	0x40002800

08001d98 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001d9c:	4b23      	ldr	r3, [pc, #140]	; (8001e2c <MX_USART1_UART_Init+0x94>)
 8001d9e:	4a24      	ldr	r2, [pc, #144]	; (8001e30 <MX_USART1_UART_Init+0x98>)
 8001da0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001da2:	4b22      	ldr	r3, [pc, #136]	; (8001e2c <MX_USART1_UART_Init+0x94>)
 8001da4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001da8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001daa:	4b20      	ldr	r3, [pc, #128]	; (8001e2c <MX_USART1_UART_Init+0x94>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001db0:	4b1e      	ldr	r3, [pc, #120]	; (8001e2c <MX_USART1_UART_Init+0x94>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_ODD;
 8001db6:	4b1d      	ldr	r3, [pc, #116]	; (8001e2c <MX_USART1_UART_Init+0x94>)
 8001db8:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8001dbc:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001dbe:	4b1b      	ldr	r3, [pc, #108]	; (8001e2c <MX_USART1_UART_Init+0x94>)
 8001dc0:	220c      	movs	r2, #12
 8001dc2:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001dc4:	4b19      	ldr	r3, [pc, #100]	; (8001e2c <MX_USART1_UART_Init+0x94>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001dca:	4b18      	ldr	r3, [pc, #96]	; (8001e2c <MX_USART1_UART_Init+0x94>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001dd0:	4b16      	ldr	r3, [pc, #88]	; (8001e2c <MX_USART1_UART_Init+0x94>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001dd6:	4b15      	ldr	r3, [pc, #84]	; (8001e2c <MX_USART1_UART_Init+0x94>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ddc:	4b13      	ldr	r3, [pc, #76]	; (8001e2c <MX_USART1_UART_Init+0x94>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001de2:	4812      	ldr	r0, [pc, #72]	; (8001e2c <MX_USART1_UART_Init+0x94>)
 8001de4:	f004 f9a4 	bl	8006130 <HAL_UART_Init>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d001      	beq.n	8001df2 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8001dee:	f000 f8b3 	bl	8001f58 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001df2:	2100      	movs	r1, #0
 8001df4:	480d      	ldr	r0, [pc, #52]	; (8001e2c <MX_USART1_UART_Init+0x94>)
 8001df6:	f004 fef3 	bl	8006be0 <HAL_UARTEx_SetTxFifoThreshold>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d001      	beq.n	8001e04 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8001e00:	f000 f8aa 	bl	8001f58 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e04:	2100      	movs	r1, #0
 8001e06:	4809      	ldr	r0, [pc, #36]	; (8001e2c <MX_USART1_UART_Init+0x94>)
 8001e08:	f004 ff28 	bl	8006c5c <HAL_UARTEx_SetRxFifoThreshold>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d001      	beq.n	8001e16 <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 8001e12:	f000 f8a1 	bl	8001f58 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001e16:	4805      	ldr	r0, [pc, #20]	; (8001e2c <MX_USART1_UART_Init+0x94>)
 8001e18:	f004 fea9 	bl	8006b6e <HAL_UARTEx_DisableFifoMode>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d001      	beq.n	8001e26 <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 8001e22:	f000 f899 	bl	8001f58 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001e26:	bf00      	nop
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	20000b04 	.word	0x20000b04
 8001e30:	40013800 	.word	0x40013800

08001e34 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b086      	sub	sp, #24
 8001e38:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e3a:	1d3b      	adds	r3, r7, #4
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	601a      	str	r2, [r3, #0]
 8001e40:	605a      	str	r2, [r3, #4]
 8001e42:	609a      	str	r2, [r3, #8]
 8001e44:	60da      	str	r2, [r3, #12]
 8001e46:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e48:	2004      	movs	r0, #4
 8001e4a:	f7ff fdfe 	bl	8001a4a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e4e:	2002      	movs	r0, #2
 8001e50:	f7ff fdfb 	bl	8001a4a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e54:	2001      	movs	r0, #1
 8001e56:	f7ff fdf8 	bl	8001a4a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e5a:	2008      	movs	r0, #8
 8001e5c:	f7ff fdf5 	bl	8001a4a <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 8001e60:	2200      	movs	r2, #0
 8001e62:	2123      	movs	r1, #35	; 0x23
 8001e64:	481d      	ldr	r0, [pc, #116]	; (8001edc <MX_GPIO_Init+0xa8>)
 8001e66:	f000 ff43 	bl	8002cf0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001e6a:	2310      	movs	r3, #16
 8001e6c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e72:	2301      	movs	r3, #1
 8001e74:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001e76:	1d3b      	adds	r3, r7, #4
 8001e78:	4619      	mov	r1, r3
 8001e7a:	4819      	ldr	r0, [pc, #100]	; (8001ee0 <MX_GPIO_Init+0xac>)
 8001e7c:	f000 fdc8 	bl	8002a10 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 8001e80:	2323      	movs	r3, #35	; 0x23
 8001e82:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e84:	2301      	movs	r3, #1
 8001e86:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e90:	1d3b      	adds	r3, r7, #4
 8001e92:	4619      	mov	r1, r3
 8001e94:	4811      	ldr	r0, [pc, #68]	; (8001edc <MX_GPIO_Init+0xa8>)
 8001e96:	f000 fdbb 	bl	8002a10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001e9a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001e9e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ea0:	2302      	movs	r3, #2
 8001ea2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8001eac:	230a      	movs	r3, #10
 8001eae:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eb0:	1d3b      	adds	r3, r7, #4
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001eb8:	f000 fdaa 	bl	8002a10 <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 8001ebc:	2303      	movs	r3, #3
 8001ebe:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ec8:	1d3b      	adds	r3, r7, #4
 8001eca:	4619      	mov	r1, r3
 8001ecc:	4805      	ldr	r0, [pc, #20]	; (8001ee4 <MX_GPIO_Init+0xb0>)
 8001ece:	f000 fd9f 	bl	8002a10 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001ed2:	bf00      	nop
 8001ed4:	3718      	adds	r7, #24
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	48000400 	.word	0x48000400
 8001ee0:	48000800 	.word	0x48000800
 8001ee4:	48000c00 	.word	0x48000c00

08001ee8 <HAL_LPTIM_CompareMatchCallback>:
/* USER CODE BEGIN 4 */

/*
 * Redefinition of the low power timer interrupt
 */
void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim){
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b084      	sub	sp, #16
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
    uint8_t err;

    err = get_val(&hrm);
 8001ef0:	480d      	ldr	r0, [pc, #52]	; (8001f28 <HAL_LPTIM_CompareMatchCallback+0x40>)
 8001ef2:	f7fe fb8a 	bl	800060a <get_val>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	73fb      	strb	r3, [r7, #15]
    if(err != 0){
 8001efa:	7bfb      	ldrb	r3, [r7, #15]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d005      	beq.n	8001f0c <HAL_LPTIM_CompareMatchCallback+0x24>
    	printf("Could not read sensor. Error code: %d\n\r", err);
 8001f00:	7bfb      	ldrb	r3, [r7, #15]
 8001f02:	4619      	mov	r1, r3
 8001f04:	4809      	ldr	r0, [pc, #36]	; (8001f2c <HAL_LPTIM_CompareMatchCallback+0x44>)
 8001f06:	f008 f905 	bl	800a114 <iprintf>
    }else{
		printf("ppg_data[0]: %d, ppg_data[1]: %d\n\r", hrm.ppg_data[0], hrm.ppg_data[1]);
    }
}
 8001f0a:	e008      	b.n	8001f1e <HAL_LPTIM_CompareMatchCallback+0x36>
		printf("ppg_data[0]: %d, ppg_data[1]: %d\n\r", hrm.ppg_data[0], hrm.ppg_data[1]);
 8001f0c:	4b06      	ldr	r3, [pc, #24]	; (8001f28 <HAL_LPTIM_CompareMatchCallback+0x40>)
 8001f0e:	791b      	ldrb	r3, [r3, #4]
 8001f10:	4619      	mov	r1, r3
 8001f12:	4b05      	ldr	r3, [pc, #20]	; (8001f28 <HAL_LPTIM_CompareMatchCallback+0x40>)
 8001f14:	795b      	ldrb	r3, [r3, #5]
 8001f16:	461a      	mov	r2, r3
 8001f18:	4805      	ldr	r0, [pc, #20]	; (8001f30 <HAL_LPTIM_CompareMatchCallback+0x48>)
 8001f1a:	f008 f8fb 	bl	800a114 <iprintf>
}
 8001f1e:	bf00      	nop
 8001f20:	3710      	adds	r7, #16
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	20000b98 	.word	0x20000b98
 8001f2c:	0800b0dc 	.word	0x0800b0dc
 8001f30:	0800b104 	.word	0x0800b104

08001f34 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b082      	sub	sp, #8
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8001f3c:	1d39      	adds	r1, r7, #4
 8001f3e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f42:	2201      	movs	r2, #1
 8001f44:	4803      	ldr	r0, [pc, #12]	; (8001f54 <__io_putchar+0x20>)
 8001f46:	f004 f943 	bl	80061d0 <HAL_UART_Transmit>

  return ch;
 8001f4a:	687b      	ldr	r3, [r7, #4]
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	3708      	adds	r7, #8
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	20000b04 	.word	0x20000b04

08001f58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001f5c:	b672      	cpsid	i
}
 8001f5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f60:	e7fe      	b.n	8001f60 <Error_Handler+0x8>

08001f62 <LL_RCC_EnableRTC>:
{
 8001f62:	b480      	push	{r7}
 8001f64:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001f66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f6e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f76:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001f7a:	bf00      	nop
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr

08001f84 <LL_AHB2_GRP1_EnableClock>:
{
 8001f84:	b480      	push	{r7}
 8001f86:	b085      	sub	sp, #20
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001f8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f90:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001f92:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001f9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fa0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
}
 8001faa:	bf00      	nop
 8001fac:	3714      	adds	r7, #20
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr

08001fb6 <LL_AHB3_GRP1_EnableClock>:
{
 8001fb6:	b480      	push	{r7}
 8001fb8:	b085      	sub	sp, #20
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8001fbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fc2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001fc4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8001fce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fd2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001fda:	68fb      	ldr	r3, [r7, #12]
}
 8001fdc:	bf00      	nop
 8001fde:	3714      	adds	r7, #20
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr

08001fe8 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b085      	sub	sp, #20
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001ff0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ff4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001ff6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002000:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002004:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	4013      	ands	r3, r2
 800200a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800200c:	68fb      	ldr	r3, [r7, #12]
}
 800200e:	bf00      	nop
 8002010:	3714      	adds	r7, #20
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr

0800201a <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800201a:	b480      	push	{r7}
 800201c:	b085      	sub	sp, #20
 800201e:	af00      	add	r7, sp, #0
 8002020:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8002022:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002026:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002028:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	4313      	orrs	r3, r2
 8002030:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002032:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002036:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	4013      	ands	r3, r2
 800203c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800203e:	68fb      	ldr	r3, [r7, #12]
}
 8002040:	bf00      	nop
 8002042:	3714      	adds	r7, #20
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr

0800204c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8002050:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002054:	f7ff ffaf 	bl	8001fb6 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8002058:	2200      	movs	r2, #0
 800205a:	2100      	movs	r1, #0
 800205c:	202e      	movs	r0, #46	; 0x2e
 800205e:	f000 fc78 	bl	8002952 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8002062:	202e      	movs	r0, #46	; 0x2e
 8002064:	f000 fc8f 	bl	8002986 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002068:	bf00      	nop
 800206a:	bd80      	pop	{r7, pc}

0800206c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b09c      	sub	sp, #112	; 0x70
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002074:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002078:	2200      	movs	r2, #0
 800207a:	601a      	str	r2, [r3, #0]
 800207c:	605a      	str	r2, [r3, #4]
 800207e:	609a      	str	r2, [r3, #8]
 8002080:	60da      	str	r2, [r3, #12]
 8002082:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002084:	f107 030c 	add.w	r3, r7, #12
 8002088:	2250      	movs	r2, #80	; 0x50
 800208a:	2100      	movs	r1, #0
 800208c:	4618      	mov	r0, r3
 800208e:	f008 f839 	bl	800a104 <memset>
  if(hi2c->Instance==I2C1)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a1b      	ldr	r2, [pc, #108]	; (8002104 <HAL_I2C_MspInit+0x98>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d12e      	bne.n	80020fa <HAL_I2C_MspInit+0x8e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800209c:	2304      	movs	r3, #4
 800209e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80020a0:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80020a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80020a6:	f107 030c 	add.w	r3, r7, #12
 80020aa:	4618      	mov	r0, r3
 80020ac:	f003 fbdd 	bl	800586a <HAL_RCCEx_PeriphCLKConfig>
 80020b0:	4603      	mov	r3, r0
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d001      	beq.n	80020ba <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80020b6:	f7ff ff4f 	bl	8001f58 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020ba:	2002      	movs	r0, #2
 80020bc:	f7ff ff62 	bl	8001f84 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80020c0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80020c4:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020c6:	2312      	movs	r3, #18
 80020c8:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ca:	2300      	movs	r3, #0
 80020cc:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ce:	2300      	movs	r3, #0
 80020d0:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80020d2:	2304      	movs	r3, #4
 80020d4:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020d6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80020da:	4619      	mov	r1, r3
 80020dc:	480a      	ldr	r0, [pc, #40]	; (8002108 <HAL_I2C_MspInit+0x9c>)
 80020de:	f000 fc97 	bl	8002a10 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80020e2:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80020e6:	f7ff ff7f 	bl	8001fe8 <LL_APB1_GRP1_EnableClock>
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80020ea:	2200      	movs	r2, #0
 80020ec:	2100      	movs	r1, #0
 80020ee:	201e      	movs	r0, #30
 80020f0:	f000 fc2f 	bl	8002952 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80020f4:	201e      	movs	r0, #30
 80020f6:	f000 fc46 	bl	8002986 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80020fa:	bf00      	nop
 80020fc:	3770      	adds	r7, #112	; 0x70
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	40005400 	.word	0x40005400
 8002108:	48000400 	.word	0x48000400

0800210c <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b082      	sub	sp, #8
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a0d      	ldr	r2, [pc, #52]	; (8002150 <HAL_IPCC_MspInit+0x44>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d113      	bne.n	8002146 <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 800211e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002122:	f7ff ff48 	bl	8001fb6 <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 8002126:	2200      	movs	r2, #0
 8002128:	2100      	movs	r1, #0
 800212a:	202c      	movs	r0, #44	; 0x2c
 800212c:	f000 fc11 	bl	8002952 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8002130:	202c      	movs	r0, #44	; 0x2c
 8002132:	f000 fc28 	bl	8002986 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 8002136:	2200      	movs	r2, #0
 8002138:	2100      	movs	r1, #0
 800213a:	202d      	movs	r0, #45	; 0x2d
 800213c:	f000 fc09 	bl	8002952 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8002140:	202d      	movs	r0, #45	; 0x2d
 8002142:	f000 fc20 	bl	8002986 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 8002146:	bf00      	nop
 8002148:	3708      	adds	r7, #8
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	58000c00 	.word	0x58000c00

08002154 <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b096      	sub	sp, #88	; 0x58
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800215c:	f107 0308 	add.w	r3, r7, #8
 8002160:	2250      	movs	r2, #80	; 0x50
 8002162:	2100      	movs	r1, #0
 8002164:	4618      	mov	r0, r3
 8002166:	f007 ffcd 	bl	800a104 <memset>
  if(hlptim->Instance==LPTIM1)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a11      	ldr	r2, [pc, #68]	; (80021b4 <HAL_LPTIM_MspInit+0x60>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d11a      	bne.n	80021aa <HAL_LPTIM_MspInit+0x56>

  /* USER CODE END LPTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 8002174:	2310      	movs	r3, #16
 8002176:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_LSE;
 8002178:	f04f 130c 	mov.w	r3, #786444	; 0xc000c
 800217c:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800217e:	f107 0308 	add.w	r3, r7, #8
 8002182:	4618      	mov	r0, r3
 8002184:	f003 fb71 	bl	800586a <HAL_RCCEx_PeriphCLKConfig>
 8002188:	4603      	mov	r3, r0
 800218a:	2b00      	cmp	r3, #0
 800218c:	d001      	beq.n	8002192 <HAL_LPTIM_MspInit+0x3e>
    {
      Error_Handler();
 800218e:	f7ff fee3 	bl	8001f58 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 8002192:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8002196:	f7ff ff27 	bl	8001fe8 <LL_APB1_GRP1_EnableClock>
    /* LPTIM1 interrupt Init */
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 0, 0);
 800219a:	2200      	movs	r2, #0
 800219c:	2100      	movs	r1, #0
 800219e:	202f      	movs	r0, #47	; 0x2f
 80021a0:	f000 fbd7 	bl	8002952 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 80021a4:	202f      	movs	r0, #47	; 0x2f
 80021a6:	f000 fbee 	bl	8002986 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }

}
 80021aa:	bf00      	nop
 80021ac:	3758      	adds	r7, #88	; 0x58
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	40007c00 	.word	0x40007c00

080021b8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b096      	sub	sp, #88	; 0x58
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80021c0:	f107 0308 	add.w	r3, r7, #8
 80021c4:	2250      	movs	r2, #80	; 0x50
 80021c6:	2100      	movs	r1, #0
 80021c8:	4618      	mov	r0, r3
 80021ca:	f007 ff9b 	bl	800a104 <memset>
  if(hrtc->Instance==RTC)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a12      	ldr	r2, [pc, #72]	; (800221c <HAL_RTC_MspInit+0x64>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d11d      	bne.n	8002214 <HAL_RTC_MspInit+0x5c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80021d8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80021dc:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80021de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021e2:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80021e4:	f107 0308 	add.w	r3, r7, #8
 80021e8:	4618      	mov	r0, r3
 80021ea:	f003 fb3e 	bl	800586a <HAL_RCCEx_PeriphCLKConfig>
 80021ee:	4603      	mov	r3, r0
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d001      	beq.n	80021f8 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80021f4:	f7ff feb0 	bl	8001f58 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80021f8:	f7ff feb3 	bl	8001f62 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80021fc:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002200:	f7ff fef2 	bl	8001fe8 <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8002204:	2200      	movs	r2, #0
 8002206:	2100      	movs	r1, #0
 8002208:	2003      	movs	r0, #3
 800220a:	f000 fba2 	bl	8002952 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 800220e:	2003      	movs	r0, #3
 8002210:	f000 fbb9 	bl	8002986 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002214:	bf00      	nop
 8002216:	3758      	adds	r7, #88	; 0x58
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}
 800221c:	40002800 	.word	0x40002800

08002220 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b09c      	sub	sp, #112	; 0x70
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002228:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800222c:	2200      	movs	r2, #0
 800222e:	601a      	str	r2, [r3, #0]
 8002230:	605a      	str	r2, [r3, #4]
 8002232:	609a      	str	r2, [r3, #8]
 8002234:	60da      	str	r2, [r3, #12]
 8002236:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002238:	f107 030c 	add.w	r3, r7, #12
 800223c:	2250      	movs	r2, #80	; 0x50
 800223e:	2100      	movs	r1, #0
 8002240:	4618      	mov	r0, r3
 8002242:	f007 ff5f 	bl	800a104 <memset>
  if(huart->Instance==USART1)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a16      	ldr	r2, [pc, #88]	; (80022a4 <HAL_UART_MspInit+0x84>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d124      	bne.n	800229a <HAL_UART_MspInit+0x7a>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002250:	2301      	movs	r3, #1
 8002252:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002254:	2300      	movs	r3, #0
 8002256:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002258:	f107 030c 	add.w	r3, r7, #12
 800225c:	4618      	mov	r0, r3
 800225e:	f003 fb04 	bl	800586a <HAL_RCCEx_PeriphCLKConfig>
 8002262:	4603      	mov	r3, r0
 8002264:	2b00      	cmp	r3, #0
 8002266:	d001      	beq.n	800226c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002268:	f7ff fe76 	bl	8001f58 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800226c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002270:	f7ff fed3 	bl	800201a <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002274:	2002      	movs	r0, #2
 8002276:	f7ff fe85 	bl	8001f84 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800227a:	23c0      	movs	r3, #192	; 0xc0
 800227c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800227e:	2302      	movs	r3, #2
 8002280:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002282:	2300      	movs	r3, #0
 8002284:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002286:	2300      	movs	r3, #0
 8002288:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800228a:	2307      	movs	r3, #7
 800228c:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800228e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002292:	4619      	mov	r1, r3
 8002294:	4804      	ldr	r0, [pc, #16]	; (80022a8 <HAL_UART_MspInit+0x88>)
 8002296:	f000 fbbb 	bl	8002a10 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800229a:	bf00      	nop
 800229c:	3770      	adds	r7, #112	; 0x70
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	40013800 	.word	0x40013800
 80022a8:	48000400 	.word	0x48000400

080022ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022ac:	b480      	push	{r7}
 80022ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80022b0:	e7fe      	b.n	80022b0 <NMI_Handler+0x4>

080022b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022b2:	b480      	push	{r7}
 80022b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022b6:	e7fe      	b.n	80022b6 <HardFault_Handler+0x4>

080022b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022b8:	b480      	push	{r7}
 80022ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022bc:	e7fe      	b.n	80022bc <MemManage_Handler+0x4>

080022be <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022be:	b480      	push	{r7}
 80022c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022c2:	e7fe      	b.n	80022c2 <BusFault_Handler+0x4>

080022c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022c4:	b480      	push	{r7}
 80022c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022c8:	e7fe      	b.n	80022c8 <UsageFault_Handler+0x4>

080022ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022ca:	b480      	push	{r7}
 80022cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80022ce:	bf00      	nop
 80022d0:	46bd      	mov	sp, r7
 80022d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d6:	4770      	bx	lr

080022d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022d8:	b480      	push	{r7}
 80022da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022dc:	bf00      	nop
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr

080022e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022e6:	b480      	push	{r7}
 80022e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022ea:	bf00      	nop
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr

080022f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022f8:	f000 f9b8 	bl	800266c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022fc:	bf00      	nop
 80022fe:	bd80      	pop	{r7, pc}

08002300 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8002304:	f7ff f8d2 	bl	80014ac <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8002308:	bf00      	nop
 800230a:	bd80      	pop	{r7, pc}

0800230c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002310:	4802      	ldr	r0, [pc, #8]	; (800231c <I2C1_EV_IRQHandler+0x10>)
 8002312:	f000 ffe7 	bl	80032e4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002316:	bf00      	nop
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	20000a18 	.word	0x20000a18

08002320 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8002324:	f007 faf2 	bl	800990c <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8002328:	bf00      	nop
 800232a:	bd80      	pop	{r7, pc}

0800232c <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 8002330:	f007 fb24 	bl	800997c <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8002334:	bf00      	nop
 8002336:	bd80      	pop	{r7, pc}

08002338 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 800233c:	f000 fcf0 	bl	8002d20 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8002340:	bf00      	nop
 8002342:	bd80      	pop	{r7, pc}

08002344 <LPTIM1_IRQHandler>:

/**
  * @brief This function handles LPTIM1 global interrupt.
  */
void LPTIM1_IRQHandler(void)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM1_IRQn 0 */

  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 8002348:	4802      	ldr	r0, [pc, #8]	; (8002354 <LPTIM1_IRQHandler+0x10>)
 800234a:	f001 fd57 	bl	8003dfc <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */

  /* USER CODE END LPTIM1_IRQn 1 */
}
 800234e:	bf00      	nop
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	20000aa8 	.word	0x20000aa8

08002358 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b086      	sub	sp, #24
 800235c:	af00      	add	r7, sp, #0
 800235e:	60f8      	str	r0, [r7, #12]
 8002360:	60b9      	str	r1, [r7, #8]
 8002362:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002364:	2300      	movs	r3, #0
 8002366:	617b      	str	r3, [r7, #20]
 8002368:	e00a      	b.n	8002380 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800236a:	f3af 8000 	nop.w
 800236e:	4601      	mov	r1, r0
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	1c5a      	adds	r2, r3, #1
 8002374:	60ba      	str	r2, [r7, #8]
 8002376:	b2ca      	uxtb	r2, r1
 8002378:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	3301      	adds	r3, #1
 800237e:	617b      	str	r3, [r7, #20]
 8002380:	697a      	ldr	r2, [r7, #20]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	429a      	cmp	r2, r3
 8002386:	dbf0      	blt.n	800236a <_read+0x12>
  }

  return len;
 8002388:	687b      	ldr	r3, [r7, #4]
}
 800238a:	4618      	mov	r0, r3
 800238c:	3718      	adds	r7, #24
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}

08002392 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002392:	b580      	push	{r7, lr}
 8002394:	b086      	sub	sp, #24
 8002396:	af00      	add	r7, sp, #0
 8002398:	60f8      	str	r0, [r7, #12]
 800239a:	60b9      	str	r1, [r7, #8]
 800239c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800239e:	2300      	movs	r3, #0
 80023a0:	617b      	str	r3, [r7, #20]
 80023a2:	e009      	b.n	80023b8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	1c5a      	adds	r2, r3, #1
 80023a8:	60ba      	str	r2, [r7, #8]
 80023aa:	781b      	ldrb	r3, [r3, #0]
 80023ac:	4618      	mov	r0, r3
 80023ae:	f7ff fdc1 	bl	8001f34 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	3301      	adds	r3, #1
 80023b6:	617b      	str	r3, [r7, #20]
 80023b8:	697a      	ldr	r2, [r7, #20]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	429a      	cmp	r2, r3
 80023be:	dbf1      	blt.n	80023a4 <_write+0x12>
  }
  return len;
 80023c0:	687b      	ldr	r3, [r7, #4]
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	3718      	adds	r7, #24
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}

080023ca <_close>:

int _close(int file)
{
 80023ca:	b480      	push	{r7}
 80023cc:	b083      	sub	sp, #12
 80023ce:	af00      	add	r7, sp, #0
 80023d0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80023d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	370c      	adds	r7, #12
 80023da:	46bd      	mov	sp, r7
 80023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e0:	4770      	bx	lr

080023e2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80023e2:	b480      	push	{r7}
 80023e4:	b083      	sub	sp, #12
 80023e6:	af00      	add	r7, sp, #0
 80023e8:	6078      	str	r0, [r7, #4]
 80023ea:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80023f2:	605a      	str	r2, [r3, #4]
  return 0;
 80023f4:	2300      	movs	r3, #0
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	370c      	adds	r7, #12
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr

08002402 <_isatty>:

int _isatty(int file)
{
 8002402:	b480      	push	{r7}
 8002404:	b083      	sub	sp, #12
 8002406:	af00      	add	r7, sp, #0
 8002408:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800240a:	2301      	movs	r3, #1
}
 800240c:	4618      	mov	r0, r3
 800240e:	370c      	adds	r7, #12
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr

08002418 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002418:	b480      	push	{r7}
 800241a:	b085      	sub	sp, #20
 800241c:	af00      	add	r7, sp, #0
 800241e:	60f8      	str	r0, [r7, #12]
 8002420:	60b9      	str	r1, [r7, #8]
 8002422:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002424:	2300      	movs	r3, #0
}
 8002426:	4618      	mov	r0, r3
 8002428:	3714      	adds	r7, #20
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr
	...

08002434 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b086      	sub	sp, #24
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800243c:	4a14      	ldr	r2, [pc, #80]	; (8002490 <_sbrk+0x5c>)
 800243e:	4b15      	ldr	r3, [pc, #84]	; (8002494 <_sbrk+0x60>)
 8002440:	1ad3      	subs	r3, r2, r3
 8002442:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002448:	4b13      	ldr	r3, [pc, #76]	; (8002498 <_sbrk+0x64>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d102      	bne.n	8002456 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002450:	4b11      	ldr	r3, [pc, #68]	; (8002498 <_sbrk+0x64>)
 8002452:	4a12      	ldr	r2, [pc, #72]	; (800249c <_sbrk+0x68>)
 8002454:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002456:	4b10      	ldr	r3, [pc, #64]	; (8002498 <_sbrk+0x64>)
 8002458:	681a      	ldr	r2, [r3, #0]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	4413      	add	r3, r2
 800245e:	693a      	ldr	r2, [r7, #16]
 8002460:	429a      	cmp	r2, r3
 8002462:	d207      	bcs.n	8002474 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002464:	f007 fe16 	bl	800a094 <__errno>
 8002468:	4603      	mov	r3, r0
 800246a:	220c      	movs	r2, #12
 800246c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800246e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002472:	e009      	b.n	8002488 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002474:	4b08      	ldr	r3, [pc, #32]	; (8002498 <_sbrk+0x64>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800247a:	4b07      	ldr	r3, [pc, #28]	; (8002498 <_sbrk+0x64>)
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	4413      	add	r3, r2
 8002482:	4a05      	ldr	r2, [pc, #20]	; (8002498 <_sbrk+0x64>)
 8002484:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002486:	68fb      	ldr	r3, [r7, #12]
}
 8002488:	4618      	mov	r0, r3
 800248a:	3718      	adds	r7, #24
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}
 8002490:	20030000 	.word	0x20030000
 8002494:	00000400 	.word	0x00000400
 8002498:	20000ba0 	.word	0x20000ba0
 800249c:	20000d68 	.word	0x20000d68

080024a0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80024a0:	b480      	push	{r7}
 80024a2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 80024a4:	4b24      	ldr	r3, [pc, #144]	; (8002538 <SystemInit+0x98>)
 80024a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024aa:	4a23      	ldr	r2, [pc, #140]	; (8002538 <SystemInit+0x98>)
 80024ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80024b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80024b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024be:	f043 0301 	orr.w	r3, r3, #1
 80024c2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 80024c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024c8:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 80024cc:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80024ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80024d8:	4b18      	ldr	r3, [pc, #96]	; (800253c <SystemInit+0x9c>)
 80024da:	4013      	ands	r3, r2
 80024dc:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80024de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024ea:	f023 0305 	bic.w	r3, r3, #5
 80024ee:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80024f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80024fa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024fe:	f023 0301 	bic.w	r3, r3, #1
 8002502:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8002506:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800250a:	4a0d      	ldr	r2, [pc, #52]	; (8002540 <SystemInit+0xa0>)
 800250c:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 800250e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002512:	4a0b      	ldr	r2, [pc, #44]	; (8002540 <SystemInit+0xa0>)
 8002514:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002516:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002520:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002524:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002526:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800252a:	2200      	movs	r2, #0
 800252c:	619a      	str	r2, [r3, #24]
}
 800252e:	bf00      	nop
 8002530:	46bd      	mov	sp, r7
 8002532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002536:	4770      	bx	lr
 8002538:	e000ed00 	.word	0xe000ed00
 800253c:	faf6fefb 	.word	0xfaf6fefb
 8002540:	22041000 	.word	0x22041000

08002544 <CopyDataInit>:
 8002544:	58d4      	ldr	r4, [r2, r3]
 8002546:	50c4      	str	r4, [r0, r3]
 8002548:	3304      	adds	r3, #4

0800254a <LoopCopyDataInit>:
 800254a:	18c4      	adds	r4, r0, r3
 800254c:	428c      	cmp	r4, r1
 800254e:	d3f9      	bcc.n	8002544 <CopyDataInit>
 8002550:	4770      	bx	lr

08002552 <FillZerobss>:
 8002552:	6003      	str	r3, [r0, #0]
 8002554:	3004      	adds	r0, #4

08002556 <LoopFillZerobss>:
 8002556:	4288      	cmp	r0, r1
 8002558:	d3fb      	bcc.n	8002552 <FillZerobss>
 800255a:	4770      	bx	lr

0800255c <Reset_Handler>:
 800255c:	480c      	ldr	r0, [pc, #48]	; (8002590 <LoopForever+0x2>)
 800255e:	4685      	mov	sp, r0
 8002560:	f7ff ff9e 	bl	80024a0 <SystemInit>
 8002564:	480b      	ldr	r0, [pc, #44]	; (8002594 <LoopForever+0x6>)
 8002566:	490c      	ldr	r1, [pc, #48]	; (8002598 <LoopForever+0xa>)
 8002568:	4a0c      	ldr	r2, [pc, #48]	; (800259c <LoopForever+0xe>)
 800256a:	2300      	movs	r3, #0
 800256c:	f7ff ffed 	bl	800254a <LoopCopyDataInit>
 8002570:	480b      	ldr	r0, [pc, #44]	; (80025a0 <LoopForever+0x12>)
 8002572:	490c      	ldr	r1, [pc, #48]	; (80025a4 <LoopForever+0x16>)
 8002574:	4a0c      	ldr	r2, [pc, #48]	; (80025a8 <LoopForever+0x1a>)
 8002576:	2300      	movs	r3, #0
 8002578:	f7ff ffe7 	bl	800254a <LoopCopyDataInit>
 800257c:	480b      	ldr	r0, [pc, #44]	; (80025ac <LoopForever+0x1e>)
 800257e:	490c      	ldr	r1, [pc, #48]	; (80025b0 <LoopForever+0x22>)
 8002580:	2300      	movs	r3, #0
 8002582:	f7ff ffe8 	bl	8002556 <LoopFillZerobss>
 8002586:	f007 fd8b 	bl	800a0a0 <__libc_init_array>
 800258a:	f7ff fa77 	bl	8001a7c <main>

0800258e <LoopForever>:
 800258e:	e7fe      	b.n	800258e <LoopForever>
 8002590:	20030000 	.word	0x20030000
 8002594:	20000008 	.word	0x20000008
 8002598:	2000008c 	.word	0x2000008c
 800259c:	0800b474 	.word	0x0800b474
 80025a0:	200301e3 	.word	0x200301e3
 80025a4:	200301e3 	.word	0x200301e3
 80025a8:	0800bdc1 	.word	0x0800bdc1
 80025ac:	2000095c 	.word	0x2000095c
 80025b0:	20000d64 	.word	0x20000d64

080025b4 <ADC1_IRQHandler>:
 80025b4:	e7fe      	b.n	80025b4 <ADC1_IRQHandler>
	...

080025b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b082      	sub	sp, #8
 80025bc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80025be:	2300      	movs	r3, #0
 80025c0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80025c2:	4b0c      	ldr	r3, [pc, #48]	; (80025f4 <HAL_Init+0x3c>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a0b      	ldr	r2, [pc, #44]	; (80025f4 <HAL_Init+0x3c>)
 80025c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025cc:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025ce:	2003      	movs	r0, #3
 80025d0:	f000 f9b4 	bl	800293c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80025d4:	2000      	movs	r0, #0
 80025d6:	f000 f80f 	bl	80025f8 <HAL_InitTick>
 80025da:	4603      	mov	r3, r0
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d002      	beq.n	80025e6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	71fb      	strb	r3, [r7, #7]
 80025e4:	e001      	b.n	80025ea <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80025e6:	f7ff fd31 	bl	800204c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80025ea:	79fb      	ldrb	r3, [r7, #7]
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	3708      	adds	r7, #8
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}
 80025f4:	58004000 	.word	0x58004000

080025f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b084      	sub	sp, #16
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002600:	2300      	movs	r3, #0
 8002602:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8002604:	4b17      	ldr	r3, [pc, #92]	; (8002664 <HAL_InitTick+0x6c>)
 8002606:	781b      	ldrb	r3, [r3, #0]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d024      	beq.n	8002656 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800260c:	f002 fe9c 	bl	8005348 <HAL_RCC_GetHCLKFreq>
 8002610:	4602      	mov	r2, r0
 8002612:	4b14      	ldr	r3, [pc, #80]	; (8002664 <HAL_InitTick+0x6c>)
 8002614:	781b      	ldrb	r3, [r3, #0]
 8002616:	4619      	mov	r1, r3
 8002618:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800261c:	fbb3 f3f1 	udiv	r3, r3, r1
 8002620:	fbb2 f3f3 	udiv	r3, r2, r3
 8002624:	4618      	mov	r0, r3
 8002626:	f000 f9ca 	bl	80029be <HAL_SYSTICK_Config>
 800262a:	4603      	mov	r3, r0
 800262c:	2b00      	cmp	r3, #0
 800262e:	d10f      	bne.n	8002650 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2b0f      	cmp	r3, #15
 8002634:	d809      	bhi.n	800264a <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002636:	2200      	movs	r2, #0
 8002638:	6879      	ldr	r1, [r7, #4]
 800263a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800263e:	f000 f988 	bl	8002952 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002642:	4a09      	ldr	r2, [pc, #36]	; (8002668 <HAL_InitTick+0x70>)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6013      	str	r3, [r2, #0]
 8002648:	e007      	b.n	800265a <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	73fb      	strb	r3, [r7, #15]
 800264e:	e004      	b.n	800265a <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002650:	2301      	movs	r3, #1
 8002652:	73fb      	strb	r3, [r7, #15]
 8002654:	e001      	b.n	800265a <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800265a:	7bfb      	ldrb	r3, [r7, #15]
}
 800265c:	4618      	mov	r0, r3
 800265e:	3710      	adds	r7, #16
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}
 8002664:	20000010 	.word	0x20000010
 8002668:	2000000c 	.word	0x2000000c

0800266c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800266c:	b480      	push	{r7}
 800266e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002670:	4b06      	ldr	r3, [pc, #24]	; (800268c <HAL_IncTick+0x20>)
 8002672:	781b      	ldrb	r3, [r3, #0]
 8002674:	461a      	mov	r2, r3
 8002676:	4b06      	ldr	r3, [pc, #24]	; (8002690 <HAL_IncTick+0x24>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4413      	add	r3, r2
 800267c:	4a04      	ldr	r2, [pc, #16]	; (8002690 <HAL_IncTick+0x24>)
 800267e:	6013      	str	r3, [r2, #0]
}
 8002680:	bf00      	nop
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr
 800268a:	bf00      	nop
 800268c:	20000010 	.word	0x20000010
 8002690:	20000ba4 	.word	0x20000ba4

08002694 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002694:	b480      	push	{r7}
 8002696:	af00      	add	r7, sp, #0
  return uwTick;
 8002698:	4b03      	ldr	r3, [pc, #12]	; (80026a8 <HAL_GetTick+0x14>)
 800269a:	681b      	ldr	r3, [r3, #0]
}
 800269c:	4618      	mov	r0, r3
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr
 80026a6:	bf00      	nop
 80026a8:	20000ba4 	.word	0x20000ba4

080026ac <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 80026ac:	b480      	push	{r7}
 80026ae:	af00      	add	r7, sp, #0
  return uwTickPrio;
 80026b0:	4b03      	ldr	r3, [pc, #12]	; (80026c0 <HAL_GetTickPrio+0x14>)
 80026b2:	681b      	ldr	r3, [r3, #0]
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	46bd      	mov	sp, r7
 80026b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026bc:	4770      	bx	lr
 80026be:	bf00      	nop
 80026c0:	2000000c 	.word	0x2000000c

080026c4 <HAL_GetTickFreq>:
/**
  * @brief Return tick frequency.
  * @retval tick period in Hz
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 80026c4:	b480      	push	{r7}
 80026c6:	af00      	add	r7, sp, #0
  return uwTickFreq;
 80026c8:	4b03      	ldr	r3, [pc, #12]	; (80026d8 <HAL_GetTickFreq+0x14>)
 80026ca:	781b      	ldrb	r3, [r3, #0]
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	46bd      	mov	sp, r7
 80026d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d4:	4770      	bx	lr
 80026d6:	bf00      	nop
 80026d8:	20000010 	.word	0x20000010

080026dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026dc:	b480      	push	{r7}
 80026de:	b085      	sub	sp, #20
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	f003 0307 	and.w	r3, r3, #7
 80026ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026ec:	4b0c      	ldr	r3, [pc, #48]	; (8002720 <__NVIC_SetPriorityGrouping+0x44>)
 80026ee:	68db      	ldr	r3, [r3, #12]
 80026f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026f2:	68ba      	ldr	r2, [r7, #8]
 80026f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80026f8:	4013      	ands	r3, r2
 80026fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002704:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002708:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800270c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800270e:	4a04      	ldr	r2, [pc, #16]	; (8002720 <__NVIC_SetPriorityGrouping+0x44>)
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	60d3      	str	r3, [r2, #12]
}
 8002714:	bf00      	nop
 8002716:	3714      	adds	r7, #20
 8002718:	46bd      	mov	sp, r7
 800271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271e:	4770      	bx	lr
 8002720:	e000ed00 	.word	0xe000ed00

08002724 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002724:	b480      	push	{r7}
 8002726:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002728:	4b04      	ldr	r3, [pc, #16]	; (800273c <__NVIC_GetPriorityGrouping+0x18>)
 800272a:	68db      	ldr	r3, [r3, #12]
 800272c:	0a1b      	lsrs	r3, r3, #8
 800272e:	f003 0307 	and.w	r3, r3, #7
}
 8002732:	4618      	mov	r0, r3
 8002734:	46bd      	mov	sp, r7
 8002736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273a:	4770      	bx	lr
 800273c:	e000ed00 	.word	0xe000ed00

08002740 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002740:	b480      	push	{r7}
 8002742:	b083      	sub	sp, #12
 8002744:	af00      	add	r7, sp, #0
 8002746:	4603      	mov	r3, r0
 8002748:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800274a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800274e:	2b00      	cmp	r3, #0
 8002750:	db0b      	blt.n	800276a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002752:	79fb      	ldrb	r3, [r7, #7]
 8002754:	f003 021f 	and.w	r2, r3, #31
 8002758:	4907      	ldr	r1, [pc, #28]	; (8002778 <__NVIC_EnableIRQ+0x38>)
 800275a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800275e:	095b      	lsrs	r3, r3, #5
 8002760:	2001      	movs	r0, #1
 8002762:	fa00 f202 	lsl.w	r2, r0, r2
 8002766:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800276a:	bf00      	nop
 800276c:	370c      	adds	r7, #12
 800276e:	46bd      	mov	sp, r7
 8002770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002774:	4770      	bx	lr
 8002776:	bf00      	nop
 8002778:	e000e100 	.word	0xe000e100

0800277c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800277c:	b480      	push	{r7}
 800277e:	b083      	sub	sp, #12
 8002780:	af00      	add	r7, sp, #0
 8002782:	4603      	mov	r3, r0
 8002784:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002786:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800278a:	2b00      	cmp	r3, #0
 800278c:	db12      	blt.n	80027b4 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800278e:	79fb      	ldrb	r3, [r7, #7]
 8002790:	f003 021f 	and.w	r2, r3, #31
 8002794:	490a      	ldr	r1, [pc, #40]	; (80027c0 <__NVIC_DisableIRQ+0x44>)
 8002796:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800279a:	095b      	lsrs	r3, r3, #5
 800279c:	2001      	movs	r0, #1
 800279e:	fa00 f202 	lsl.w	r2, r0, r2
 80027a2:	3320      	adds	r3, #32
 80027a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80027a8:	f3bf 8f4f 	dsb	sy
}
 80027ac:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80027ae:	f3bf 8f6f 	isb	sy
}
 80027b2:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80027b4:	bf00      	nop
 80027b6:	370c      	adds	r7, #12
 80027b8:	46bd      	mov	sp, r7
 80027ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027be:	4770      	bx	lr
 80027c0:	e000e100 	.word	0xe000e100

080027c4 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b083      	sub	sp, #12
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	4603      	mov	r3, r0
 80027cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	db0c      	blt.n	80027f0 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027d6:	79fb      	ldrb	r3, [r7, #7]
 80027d8:	f003 021f 	and.w	r2, r3, #31
 80027dc:	4907      	ldr	r1, [pc, #28]	; (80027fc <__NVIC_SetPendingIRQ+0x38>)
 80027de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027e2:	095b      	lsrs	r3, r3, #5
 80027e4:	2001      	movs	r0, #1
 80027e6:	fa00 f202 	lsl.w	r2, r0, r2
 80027ea:	3340      	adds	r3, #64	; 0x40
 80027ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80027f0:	bf00      	nop
 80027f2:	370c      	adds	r7, #12
 80027f4:	46bd      	mov	sp, r7
 80027f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fa:	4770      	bx	lr
 80027fc:	e000e100 	.word	0xe000e100

08002800 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8002800:	b480      	push	{r7}
 8002802:	b083      	sub	sp, #12
 8002804:	af00      	add	r7, sp, #0
 8002806:	4603      	mov	r3, r0
 8002808:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800280a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800280e:	2b00      	cmp	r3, #0
 8002810:	db0c      	blt.n	800282c <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002812:	79fb      	ldrb	r3, [r7, #7]
 8002814:	f003 021f 	and.w	r2, r3, #31
 8002818:	4907      	ldr	r1, [pc, #28]	; (8002838 <__NVIC_ClearPendingIRQ+0x38>)
 800281a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800281e:	095b      	lsrs	r3, r3, #5
 8002820:	2001      	movs	r0, #1
 8002822:	fa00 f202 	lsl.w	r2, r0, r2
 8002826:	3360      	adds	r3, #96	; 0x60
 8002828:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800282c:	bf00      	nop
 800282e:	370c      	adds	r7, #12
 8002830:	46bd      	mov	sp, r7
 8002832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002836:	4770      	bx	lr
 8002838:	e000e100 	.word	0xe000e100

0800283c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800283c:	b480      	push	{r7}
 800283e:	b083      	sub	sp, #12
 8002840:	af00      	add	r7, sp, #0
 8002842:	4603      	mov	r3, r0
 8002844:	6039      	str	r1, [r7, #0]
 8002846:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002848:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800284c:	2b00      	cmp	r3, #0
 800284e:	db0a      	blt.n	8002866 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	b2da      	uxtb	r2, r3
 8002854:	490c      	ldr	r1, [pc, #48]	; (8002888 <__NVIC_SetPriority+0x4c>)
 8002856:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800285a:	0112      	lsls	r2, r2, #4
 800285c:	b2d2      	uxtb	r2, r2
 800285e:	440b      	add	r3, r1
 8002860:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002864:	e00a      	b.n	800287c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	b2da      	uxtb	r2, r3
 800286a:	4908      	ldr	r1, [pc, #32]	; (800288c <__NVIC_SetPriority+0x50>)
 800286c:	79fb      	ldrb	r3, [r7, #7]
 800286e:	f003 030f 	and.w	r3, r3, #15
 8002872:	3b04      	subs	r3, #4
 8002874:	0112      	lsls	r2, r2, #4
 8002876:	b2d2      	uxtb	r2, r2
 8002878:	440b      	add	r3, r1
 800287a:	761a      	strb	r2, [r3, #24]
}
 800287c:	bf00      	nop
 800287e:	370c      	adds	r7, #12
 8002880:	46bd      	mov	sp, r7
 8002882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002886:	4770      	bx	lr
 8002888:	e000e100 	.word	0xe000e100
 800288c:	e000ed00 	.word	0xe000ed00

08002890 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002890:	b480      	push	{r7}
 8002892:	b089      	sub	sp, #36	; 0x24
 8002894:	af00      	add	r7, sp, #0
 8002896:	60f8      	str	r0, [r7, #12]
 8002898:	60b9      	str	r1, [r7, #8]
 800289a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	f003 0307 	and.w	r3, r3, #7
 80028a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028a4:	69fb      	ldr	r3, [r7, #28]
 80028a6:	f1c3 0307 	rsb	r3, r3, #7
 80028aa:	2b04      	cmp	r3, #4
 80028ac:	bf28      	it	cs
 80028ae:	2304      	movcs	r3, #4
 80028b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028b2:	69fb      	ldr	r3, [r7, #28]
 80028b4:	3304      	adds	r3, #4
 80028b6:	2b06      	cmp	r3, #6
 80028b8:	d902      	bls.n	80028c0 <NVIC_EncodePriority+0x30>
 80028ba:	69fb      	ldr	r3, [r7, #28]
 80028bc:	3b03      	subs	r3, #3
 80028be:	e000      	b.n	80028c2 <NVIC_EncodePriority+0x32>
 80028c0:	2300      	movs	r3, #0
 80028c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80028c8:	69bb      	ldr	r3, [r7, #24]
 80028ca:	fa02 f303 	lsl.w	r3, r2, r3
 80028ce:	43da      	mvns	r2, r3
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	401a      	ands	r2, r3
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028d8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	fa01 f303 	lsl.w	r3, r1, r3
 80028e2:	43d9      	mvns	r1, r3
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028e8:	4313      	orrs	r3, r2
         );
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3724      	adds	r7, #36	; 0x24
 80028ee:	46bd      	mov	sp, r7
 80028f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f4:	4770      	bx	lr
	...

080028f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b082      	sub	sp, #8
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	3b01      	subs	r3, #1
 8002904:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002908:	d301      	bcc.n	800290e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800290a:	2301      	movs	r3, #1
 800290c:	e00f      	b.n	800292e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800290e:	4a0a      	ldr	r2, [pc, #40]	; (8002938 <SysTick_Config+0x40>)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	3b01      	subs	r3, #1
 8002914:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002916:	210f      	movs	r1, #15
 8002918:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800291c:	f7ff ff8e 	bl	800283c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002920:	4b05      	ldr	r3, [pc, #20]	; (8002938 <SysTick_Config+0x40>)
 8002922:	2200      	movs	r2, #0
 8002924:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002926:	4b04      	ldr	r3, [pc, #16]	; (8002938 <SysTick_Config+0x40>)
 8002928:	2207      	movs	r2, #7
 800292a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800292c:	2300      	movs	r3, #0
}
 800292e:	4618      	mov	r0, r3
 8002930:	3708      	adds	r7, #8
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
 8002936:	bf00      	nop
 8002938:	e000e010 	.word	0xe000e010

0800293c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b082      	sub	sp, #8
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002944:	6878      	ldr	r0, [r7, #4]
 8002946:	f7ff fec9 	bl	80026dc <__NVIC_SetPriorityGrouping>
}
 800294a:	bf00      	nop
 800294c:	3708      	adds	r7, #8
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}

08002952 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002952:	b580      	push	{r7, lr}
 8002954:	b086      	sub	sp, #24
 8002956:	af00      	add	r7, sp, #0
 8002958:	4603      	mov	r3, r0
 800295a:	60b9      	str	r1, [r7, #8]
 800295c:	607a      	str	r2, [r7, #4]
 800295e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002960:	f7ff fee0 	bl	8002724 <__NVIC_GetPriorityGrouping>
 8002964:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002966:	687a      	ldr	r2, [r7, #4]
 8002968:	68b9      	ldr	r1, [r7, #8]
 800296a:	6978      	ldr	r0, [r7, #20]
 800296c:	f7ff ff90 	bl	8002890 <NVIC_EncodePriority>
 8002970:	4602      	mov	r2, r0
 8002972:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002976:	4611      	mov	r1, r2
 8002978:	4618      	mov	r0, r3
 800297a:	f7ff ff5f 	bl	800283c <__NVIC_SetPriority>
}
 800297e:	bf00      	nop
 8002980:	3718      	adds	r7, #24
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}

08002986 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002986:	b580      	push	{r7, lr}
 8002988:	b082      	sub	sp, #8
 800298a:	af00      	add	r7, sp, #0
 800298c:	4603      	mov	r3, r0
 800298e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002990:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002994:	4618      	mov	r0, r3
 8002996:	f7ff fed3 	bl	8002740 <__NVIC_EnableIRQ>
}
 800299a:	bf00      	nop
 800299c:	3708      	adds	r7, #8
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}

080029a2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80029a2:	b580      	push	{r7, lr}
 80029a4:	b082      	sub	sp, #8
 80029a6:	af00      	add	r7, sp, #0
 80029a8:	4603      	mov	r3, r0
 80029aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80029ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029b0:	4618      	mov	r0, r3
 80029b2:	f7ff fee3 	bl	800277c <__NVIC_DisableIRQ>
}
 80029b6:	bf00      	nop
 80029b8:	3708      	adds	r7, #8
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}

080029be <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029be:	b580      	push	{r7, lr}
 80029c0:	b082      	sub	sp, #8
 80029c2:	af00      	add	r7, sp, #0
 80029c4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	f7ff ff96 	bl	80028f8 <SysTick_Config>
 80029cc:	4603      	mov	r3, r0
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3708      	adds	r7, #8
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}

080029d6 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80029d6:	b580      	push	{r7, lr}
 80029d8:	b082      	sub	sp, #8
 80029da:	af00      	add	r7, sp, #0
 80029dc:	4603      	mov	r3, r0
 80029de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 80029e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029e4:	4618      	mov	r0, r3
 80029e6:	f7ff feed 	bl	80027c4 <__NVIC_SetPendingIRQ>
}
 80029ea:	bf00      	nop
 80029ec:	3708      	adds	r7, #8
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}

080029f2 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80029f2:	b580      	push	{r7, lr}
 80029f4:	b082      	sub	sp, #8
 80029f6:	af00      	add	r7, sp, #0
 80029f8:	4603      	mov	r3, r0
 80029fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 80029fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a00:	4618      	mov	r0, r3
 8002a02:	f7ff fefd 	bl	8002800 <__NVIC_ClearPendingIRQ>
}
 8002a06:	bf00      	nop
 8002a08:	3708      	adds	r7, #8
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}
	...

08002a10 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b087      	sub	sp, #28
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
 8002a18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a1e:	e14c      	b.n	8002cba <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	2101      	movs	r1, #1
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	fa01 f303 	lsl.w	r3, r1, r3
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	f000 813e 	beq.w	8002cb4 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	f003 0303 	and.w	r3, r3, #3
 8002a40:	2b01      	cmp	r3, #1
 8002a42:	d005      	beq.n	8002a50 <HAL_GPIO_Init+0x40>
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	f003 0303 	and.w	r3, r3, #3
 8002a4c:	2b02      	cmp	r3, #2
 8002a4e:	d130      	bne.n	8002ab2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	005b      	lsls	r3, r3, #1
 8002a5a:	2203      	movs	r2, #3
 8002a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a60:	43db      	mvns	r3, r3
 8002a62:	693a      	ldr	r2, [r7, #16]
 8002a64:	4013      	ands	r3, r2
 8002a66:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	68da      	ldr	r2, [r3, #12]
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	005b      	lsls	r3, r3, #1
 8002a70:	fa02 f303 	lsl.w	r3, r2, r3
 8002a74:	693a      	ldr	r2, [r7, #16]
 8002a76:	4313      	orrs	r3, r2
 8002a78:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	693a      	ldr	r2, [r7, #16]
 8002a7e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002a86:	2201      	movs	r2, #1
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8e:	43db      	mvns	r3, r3
 8002a90:	693a      	ldr	r2, [r7, #16]
 8002a92:	4013      	ands	r3, r2
 8002a94:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	091b      	lsrs	r3, r3, #4
 8002a9c:	f003 0201 	and.w	r2, r3, #1
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa6:	693a      	ldr	r2, [r7, #16]
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	693a      	ldr	r2, [r7, #16]
 8002ab0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	f003 0303 	and.w	r3, r3, #3
 8002aba:	2b03      	cmp	r3, #3
 8002abc:	d017      	beq.n	8002aee <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	68db      	ldr	r3, [r3, #12]
 8002ac2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	005b      	lsls	r3, r3, #1
 8002ac8:	2203      	movs	r2, #3
 8002aca:	fa02 f303 	lsl.w	r3, r2, r3
 8002ace:	43db      	mvns	r3, r3
 8002ad0:	693a      	ldr	r2, [r7, #16]
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	689a      	ldr	r2, [r3, #8]
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	005b      	lsls	r3, r3, #1
 8002ade:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae2:	693a      	ldr	r2, [r7, #16]
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	693a      	ldr	r2, [r7, #16]
 8002aec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	f003 0303 	and.w	r3, r3, #3
 8002af6:	2b02      	cmp	r3, #2
 8002af8:	d123      	bne.n	8002b42 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	08da      	lsrs	r2, r3, #3
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	3208      	adds	r2, #8
 8002b02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b06:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	f003 0307 	and.w	r3, r3, #7
 8002b0e:	009b      	lsls	r3, r3, #2
 8002b10:	220f      	movs	r2, #15
 8002b12:	fa02 f303 	lsl.w	r3, r2, r3
 8002b16:	43db      	mvns	r3, r3
 8002b18:	693a      	ldr	r2, [r7, #16]
 8002b1a:	4013      	ands	r3, r2
 8002b1c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	691a      	ldr	r2, [r3, #16]
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	f003 0307 	and.w	r3, r3, #7
 8002b28:	009b      	lsls	r3, r3, #2
 8002b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b2e:	693a      	ldr	r2, [r7, #16]
 8002b30:	4313      	orrs	r3, r2
 8002b32:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	08da      	lsrs	r2, r3, #3
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	3208      	adds	r2, #8
 8002b3c:	6939      	ldr	r1, [r7, #16]
 8002b3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	005b      	lsls	r3, r3, #1
 8002b4c:	2203      	movs	r2, #3
 8002b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b52:	43db      	mvns	r3, r3
 8002b54:	693a      	ldr	r2, [r7, #16]
 8002b56:	4013      	ands	r3, r2
 8002b58:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	f003 0203 	and.w	r2, r3, #3
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	005b      	lsls	r3, r3, #1
 8002b66:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6a:	693a      	ldr	r2, [r7, #16]
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	693a      	ldr	r2, [r7, #16]
 8002b74:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	f000 8098 	beq.w	8002cb4 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8002b84:	4a54      	ldr	r2, [pc, #336]	; (8002cd8 <HAL_GPIO_Init+0x2c8>)
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	089b      	lsrs	r3, r3, #2
 8002b8a:	3302      	adds	r3, #2
 8002b8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b90:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	f003 0303 	and.w	r3, r3, #3
 8002b98:	009b      	lsls	r3, r3, #2
 8002b9a:	220f      	movs	r2, #15
 8002b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba0:	43db      	mvns	r3, r3
 8002ba2:	693a      	ldr	r2, [r7, #16]
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002bae:	d019      	beq.n	8002be4 <HAL_GPIO_Init+0x1d4>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	4a4a      	ldr	r2, [pc, #296]	; (8002cdc <HAL_GPIO_Init+0x2cc>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d013      	beq.n	8002be0 <HAL_GPIO_Init+0x1d0>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	4a49      	ldr	r2, [pc, #292]	; (8002ce0 <HAL_GPIO_Init+0x2d0>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d00d      	beq.n	8002bdc <HAL_GPIO_Init+0x1cc>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	4a48      	ldr	r2, [pc, #288]	; (8002ce4 <HAL_GPIO_Init+0x2d4>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d007      	beq.n	8002bd8 <HAL_GPIO_Init+0x1c8>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	4a47      	ldr	r2, [pc, #284]	; (8002ce8 <HAL_GPIO_Init+0x2d8>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d101      	bne.n	8002bd4 <HAL_GPIO_Init+0x1c4>
 8002bd0:	2304      	movs	r3, #4
 8002bd2:	e008      	b.n	8002be6 <HAL_GPIO_Init+0x1d6>
 8002bd4:	2307      	movs	r3, #7
 8002bd6:	e006      	b.n	8002be6 <HAL_GPIO_Init+0x1d6>
 8002bd8:	2303      	movs	r3, #3
 8002bda:	e004      	b.n	8002be6 <HAL_GPIO_Init+0x1d6>
 8002bdc:	2302      	movs	r3, #2
 8002bde:	e002      	b.n	8002be6 <HAL_GPIO_Init+0x1d6>
 8002be0:	2301      	movs	r3, #1
 8002be2:	e000      	b.n	8002be6 <HAL_GPIO_Init+0x1d6>
 8002be4:	2300      	movs	r3, #0
 8002be6:	697a      	ldr	r2, [r7, #20]
 8002be8:	f002 0203 	and.w	r2, r2, #3
 8002bec:	0092      	lsls	r2, r2, #2
 8002bee:	4093      	lsls	r3, r2
 8002bf0:	693a      	ldr	r2, [r7, #16]
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002bf6:	4938      	ldr	r1, [pc, #224]	; (8002cd8 <HAL_GPIO_Init+0x2c8>)
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	089b      	lsrs	r3, r3, #2
 8002bfc:	3302      	adds	r3, #2
 8002bfe:	693a      	ldr	r2, [r7, #16]
 8002c00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002c04:	4b39      	ldr	r3, [pc, #228]	; (8002cec <HAL_GPIO_Init+0x2dc>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	43db      	mvns	r3, r3
 8002c0e:	693a      	ldr	r2, [r7, #16]
 8002c10:	4013      	ands	r3, r2
 8002c12:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d003      	beq.n	8002c28 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002c20:	693a      	ldr	r2, [r7, #16]
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	4313      	orrs	r3, r2
 8002c26:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002c28:	4a30      	ldr	r2, [pc, #192]	; (8002cec <HAL_GPIO_Init+0x2dc>)
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002c2e:	4b2f      	ldr	r3, [pc, #188]	; (8002cec <HAL_GPIO_Init+0x2dc>)
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	43db      	mvns	r3, r3
 8002c38:	693a      	ldr	r2, [r7, #16]
 8002c3a:	4013      	ands	r3, r2
 8002c3c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d003      	beq.n	8002c52 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8002c4a:	693a      	ldr	r2, [r7, #16]
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002c52:	4a26      	ldr	r2, [pc, #152]	; (8002cec <HAL_GPIO_Init+0x2dc>)
 8002c54:	693b      	ldr	r3, [r7, #16]
 8002c56:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002c58:	4b24      	ldr	r3, [pc, #144]	; (8002cec <HAL_GPIO_Init+0x2dc>)
 8002c5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	43db      	mvns	r3, r3
 8002c64:	693a      	ldr	r2, [r7, #16]
 8002c66:	4013      	ands	r3, r2
 8002c68:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d003      	beq.n	8002c7e <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8002c76:	693a      	ldr	r2, [r7, #16]
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002c7e:	4a1b      	ldr	r2, [pc, #108]	; (8002cec <HAL_GPIO_Init+0x2dc>)
 8002c80:	693b      	ldr	r3, [r7, #16]
 8002c82:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8002c86:	4b19      	ldr	r3, [pc, #100]	; (8002cec <HAL_GPIO_Init+0x2dc>)
 8002c88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	43db      	mvns	r3, r3
 8002c92:	693a      	ldr	r2, [r7, #16]
 8002c94:	4013      	ands	r3, r2
 8002c96:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d003      	beq.n	8002cac <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8002ca4:	693a      	ldr	r2, [r7, #16]
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002cac:	4a0f      	ldr	r2, [pc, #60]	; (8002cec <HAL_GPIO_Init+0x2dc>)
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	3301      	adds	r3, #1
 8002cb8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	681a      	ldr	r2, [r3, #0]
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	fa22 f303 	lsr.w	r3, r2, r3
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	f47f aeab 	bne.w	8002a20 <HAL_GPIO_Init+0x10>
  }
}
 8002cca:	bf00      	nop
 8002ccc:	bf00      	nop
 8002cce:	371c      	adds	r7, #28
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd6:	4770      	bx	lr
 8002cd8:	40010000 	.word	0x40010000
 8002cdc:	48000400 	.word	0x48000400
 8002ce0:	48000800 	.word	0x48000800
 8002ce4:	48000c00 	.word	0x48000c00
 8002ce8:	48001000 	.word	0x48001000
 8002cec:	58000800 	.word	0x58000800

08002cf0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b083      	sub	sp, #12
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
 8002cf8:	460b      	mov	r3, r1
 8002cfa:	807b      	strh	r3, [r7, #2]
 8002cfc:	4613      	mov	r3, r2
 8002cfe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002d00:	787b      	ldrb	r3, [r7, #1]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d003      	beq.n	8002d0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002d06:	887a      	ldrh	r2, [r7, #2]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002d0c:	e002      	b.n	8002d14 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002d0e:	887a      	ldrh	r2, [r7, #2]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002d14:	bf00      	nop
 8002d16:	370c      	adds	r7, #12
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1e:	4770      	bx	lr

08002d20 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b082      	sub	sp, #8
 8002d24:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8002d26:	4b0a      	ldr	r3, [pc, #40]	; (8002d50 <HAL_HSEM_IRQHandler+0x30>)
 8002d28:	68db      	ldr	r3, [r3, #12]
 8002d2a:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8002d2c:	4b08      	ldr	r3, [pc, #32]	; (8002d50 <HAL_HSEM_IRQHandler+0x30>)
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	43db      	mvns	r3, r3
 8002d34:	4906      	ldr	r1, [pc, #24]	; (8002d50 <HAL_HSEM_IRQHandler+0x30>)
 8002d36:	4013      	ands	r3, r2
 8002d38:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8002d3a:	4a05      	ldr	r2, [pc, #20]	; (8002d50 <HAL_HSEM_IRQHandler+0x30>)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8002d40:	6878      	ldr	r0, [r7, #4]
 8002d42:	f000 f807 	bl	8002d54 <HAL_HSEM_FreeCallback>
}
 8002d46:	bf00      	nop
 8002d48:	3708      	adds	r7, #8
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}
 8002d4e:	bf00      	nop
 8002d50:	58001500 	.word	0x58001500

08002d54 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b083      	sub	sp, #12
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8002d5c:	bf00      	nop
 8002d5e:	370c      	adds	r7, #12
 8002d60:	46bd      	mov	sp, r7
 8002d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d66:	4770      	bx	lr

08002d68 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b082      	sub	sp, #8
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d101      	bne.n	8002d7a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	e081      	b.n	8002e7e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d80:	b2db      	uxtb	r3, r3
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d106      	bne.n	8002d94 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002d8e:	6878      	ldr	r0, [r7, #4]
 8002d90:	f7ff f96c 	bl	800206c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2224      	movs	r2, #36	; 0x24
 8002d98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	681a      	ldr	r2, [r3, #0]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f022 0201 	bic.w	r2, r2, #1
 8002daa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	685a      	ldr	r2, [r3, #4]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002db8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	689a      	ldr	r2, [r3, #8]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002dc8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	68db      	ldr	r3, [r3, #12]
 8002dce:	2b01      	cmp	r3, #1
 8002dd0:	d107      	bne.n	8002de2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	689a      	ldr	r2, [r3, #8]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002dde:	609a      	str	r2, [r3, #8]
 8002de0:	e006      	b.n	8002df0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	689a      	ldr	r2, [r3, #8]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002dee:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	68db      	ldr	r3, [r3, #12]
 8002df4:	2b02      	cmp	r3, #2
 8002df6:	d104      	bne.n	8002e02 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002e00:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	687a      	ldr	r2, [r7, #4]
 8002e0a:	6812      	ldr	r2, [r2, #0]
 8002e0c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002e10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e14:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	68da      	ldr	r2, [r3, #12]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e24:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	691a      	ldr	r2, [r3, #16]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	695b      	ldr	r3, [r3, #20]
 8002e2e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	699b      	ldr	r3, [r3, #24]
 8002e36:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	430a      	orrs	r2, r1
 8002e3e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	69d9      	ldr	r1, [r3, #28]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6a1a      	ldr	r2, [r3, #32]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	430a      	orrs	r2, r1
 8002e4e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f042 0201 	orr.w	r2, r2, #1
 8002e5e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2200      	movs	r2, #0
 8002e64:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2220      	movs	r2, #32
 8002e6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2200      	movs	r2, #0
 8002e72:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2200      	movs	r2, #0
 8002e78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002e7c:	2300      	movs	r3, #0
}
 8002e7e:	4618      	mov	r0, r3
 8002e80:	3708      	adds	r7, #8
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}
	...

08002e88 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b088      	sub	sp, #32
 8002e8c:	af02      	add	r7, sp, #8
 8002e8e:	60f8      	str	r0, [r7, #12]
 8002e90:	4608      	mov	r0, r1
 8002e92:	4611      	mov	r1, r2
 8002e94:	461a      	mov	r2, r3
 8002e96:	4603      	mov	r3, r0
 8002e98:	817b      	strh	r3, [r7, #10]
 8002e9a:	460b      	mov	r3, r1
 8002e9c:	813b      	strh	r3, [r7, #8]
 8002e9e:	4613      	mov	r3, r2
 8002ea0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	2b20      	cmp	r3, #32
 8002eac:	f040 80f9 	bne.w	80030a2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002eb0:	6a3b      	ldr	r3, [r7, #32]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d002      	beq.n	8002ebc <HAL_I2C_Mem_Write+0x34>
 8002eb6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d105      	bne.n	8002ec8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ec2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	e0ed      	b.n	80030a4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ece:	2b01      	cmp	r3, #1
 8002ed0:	d101      	bne.n	8002ed6 <HAL_I2C_Mem_Write+0x4e>
 8002ed2:	2302      	movs	r3, #2
 8002ed4:	e0e6      	b.n	80030a4 <HAL_I2C_Mem_Write+0x21c>
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	2201      	movs	r2, #1
 8002eda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002ede:	f7ff fbd9 	bl	8002694 <HAL_GetTick>
 8002ee2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	9300      	str	r3, [sp, #0]
 8002ee8:	2319      	movs	r3, #25
 8002eea:	2201      	movs	r2, #1
 8002eec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002ef0:	68f8      	ldr	r0, [r7, #12]
 8002ef2:	f000 fadd 	bl	80034b0 <I2C_WaitOnFlagUntilTimeout>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d001      	beq.n	8002f00 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002efc:	2301      	movs	r3, #1
 8002efe:	e0d1      	b.n	80030a4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2221      	movs	r2, #33	; 0x21
 8002f04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2240      	movs	r2, #64	; 0x40
 8002f0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2200      	movs	r2, #0
 8002f14:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	6a3a      	ldr	r2, [r7, #32]
 8002f1a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002f20:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2200      	movs	r2, #0
 8002f26:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002f28:	88f8      	ldrh	r0, [r7, #6]
 8002f2a:	893a      	ldrh	r2, [r7, #8]
 8002f2c:	8979      	ldrh	r1, [r7, #10]
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	9301      	str	r3, [sp, #4]
 8002f32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f34:	9300      	str	r3, [sp, #0]
 8002f36:	4603      	mov	r3, r0
 8002f38:	68f8      	ldr	r0, [r7, #12]
 8002f3a:	f000 f9ed 	bl	8003318 <I2C_RequestMemoryWrite>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d005      	beq.n	8002f50 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	2200      	movs	r2, #0
 8002f48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	e0a9      	b.n	80030a4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f54:	b29b      	uxth	r3, r3
 8002f56:	2bff      	cmp	r3, #255	; 0xff
 8002f58:	d90e      	bls.n	8002f78 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	22ff      	movs	r2, #255	; 0xff
 8002f5e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f64:	b2da      	uxtb	r2, r3
 8002f66:	8979      	ldrh	r1, [r7, #10]
 8002f68:	2300      	movs	r3, #0
 8002f6a:	9300      	str	r3, [sp, #0]
 8002f6c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002f70:	68f8      	ldr	r0, [r7, #12]
 8002f72:	f000 fc57 	bl	8003824 <I2C_TransferConfig>
 8002f76:	e00f      	b.n	8002f98 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f7c:	b29a      	uxth	r2, r3
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f86:	b2da      	uxtb	r2, r3
 8002f88:	8979      	ldrh	r1, [r7, #10]
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	9300      	str	r3, [sp, #0]
 8002f8e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f92:	68f8      	ldr	r0, [r7, #12]
 8002f94:	f000 fc46 	bl	8003824 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f98:	697a      	ldr	r2, [r7, #20]
 8002f9a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002f9c:	68f8      	ldr	r0, [r7, #12]
 8002f9e:	f000 fad6 	bl	800354e <I2C_WaitOnTXISFlagUntilTimeout>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d001      	beq.n	8002fac <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	e07b      	b.n	80030a4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb0:	781a      	ldrb	r2, [r3, #0]
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fbc:	1c5a      	adds	r2, r3, #1
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fc6:	b29b      	uxth	r3, r3
 8002fc8:	3b01      	subs	r3, #1
 8002fca:	b29a      	uxth	r2, r3
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fd4:	3b01      	subs	r3, #1
 8002fd6:	b29a      	uxth	r2, r3
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fe0:	b29b      	uxth	r3, r3
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d034      	beq.n	8003050 <HAL_I2C_Mem_Write+0x1c8>
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d130      	bne.n	8003050 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	9300      	str	r3, [sp, #0]
 8002ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	2180      	movs	r1, #128	; 0x80
 8002ff8:	68f8      	ldr	r0, [r7, #12]
 8002ffa:	f000 fa59 	bl	80034b0 <I2C_WaitOnFlagUntilTimeout>
 8002ffe:	4603      	mov	r3, r0
 8003000:	2b00      	cmp	r3, #0
 8003002:	d001      	beq.n	8003008 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	e04d      	b.n	80030a4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800300c:	b29b      	uxth	r3, r3
 800300e:	2bff      	cmp	r3, #255	; 0xff
 8003010:	d90e      	bls.n	8003030 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	22ff      	movs	r2, #255	; 0xff
 8003016:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800301c:	b2da      	uxtb	r2, r3
 800301e:	8979      	ldrh	r1, [r7, #10]
 8003020:	2300      	movs	r3, #0
 8003022:	9300      	str	r3, [sp, #0]
 8003024:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003028:	68f8      	ldr	r0, [r7, #12]
 800302a:	f000 fbfb 	bl	8003824 <I2C_TransferConfig>
 800302e:	e00f      	b.n	8003050 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003034:	b29a      	uxth	r2, r3
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800303e:	b2da      	uxtb	r2, r3
 8003040:	8979      	ldrh	r1, [r7, #10]
 8003042:	2300      	movs	r3, #0
 8003044:	9300      	str	r3, [sp, #0]
 8003046:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800304a:	68f8      	ldr	r0, [r7, #12]
 800304c:	f000 fbea 	bl	8003824 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003054:	b29b      	uxth	r3, r3
 8003056:	2b00      	cmp	r3, #0
 8003058:	d19e      	bne.n	8002f98 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800305a:	697a      	ldr	r2, [r7, #20]
 800305c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800305e:	68f8      	ldr	r0, [r7, #12]
 8003060:	f000 fabc 	bl	80035dc <I2C_WaitOnSTOPFlagUntilTimeout>
 8003064:	4603      	mov	r3, r0
 8003066:	2b00      	cmp	r3, #0
 8003068:	d001      	beq.n	800306e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	e01a      	b.n	80030a4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	2220      	movs	r2, #32
 8003074:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	6859      	ldr	r1, [r3, #4]
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681a      	ldr	r2, [r3, #0]
 8003080:	4b0a      	ldr	r3, [pc, #40]	; (80030ac <HAL_I2C_Mem_Write+0x224>)
 8003082:	400b      	ands	r3, r1
 8003084:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	2220      	movs	r2, #32
 800308a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	2200      	movs	r2, #0
 8003092:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	2200      	movs	r2, #0
 800309a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800309e:	2300      	movs	r3, #0
 80030a0:	e000      	b.n	80030a4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80030a2:	2302      	movs	r3, #2
  }
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	3718      	adds	r7, #24
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd80      	pop	{r7, pc}
 80030ac:	fe00e800 	.word	0xfe00e800

080030b0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b088      	sub	sp, #32
 80030b4:	af02      	add	r7, sp, #8
 80030b6:	60f8      	str	r0, [r7, #12]
 80030b8:	4608      	mov	r0, r1
 80030ba:	4611      	mov	r1, r2
 80030bc:	461a      	mov	r2, r3
 80030be:	4603      	mov	r3, r0
 80030c0:	817b      	strh	r3, [r7, #10]
 80030c2:	460b      	mov	r3, r1
 80030c4:	813b      	strh	r3, [r7, #8]
 80030c6:	4613      	mov	r3, r2
 80030c8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030d0:	b2db      	uxtb	r3, r3
 80030d2:	2b20      	cmp	r3, #32
 80030d4:	f040 80fd 	bne.w	80032d2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80030d8:	6a3b      	ldr	r3, [r7, #32]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d002      	beq.n	80030e4 <HAL_I2C_Mem_Read+0x34>
 80030de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d105      	bne.n	80030f0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030ea:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80030ec:	2301      	movs	r3, #1
 80030ee:	e0f1      	b.n	80032d4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80030f6:	2b01      	cmp	r3, #1
 80030f8:	d101      	bne.n	80030fe <HAL_I2C_Mem_Read+0x4e>
 80030fa:	2302      	movs	r3, #2
 80030fc:	e0ea      	b.n	80032d4 <HAL_I2C_Mem_Read+0x224>
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	2201      	movs	r2, #1
 8003102:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003106:	f7ff fac5 	bl	8002694 <HAL_GetTick>
 800310a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	9300      	str	r3, [sp, #0]
 8003110:	2319      	movs	r3, #25
 8003112:	2201      	movs	r2, #1
 8003114:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003118:	68f8      	ldr	r0, [r7, #12]
 800311a:	f000 f9c9 	bl	80034b0 <I2C_WaitOnFlagUntilTimeout>
 800311e:	4603      	mov	r3, r0
 8003120:	2b00      	cmp	r3, #0
 8003122:	d001      	beq.n	8003128 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003124:	2301      	movs	r3, #1
 8003126:	e0d5      	b.n	80032d4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	2222      	movs	r2, #34	; 0x22
 800312c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	2240      	movs	r2, #64	; 0x40
 8003134:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2200      	movs	r2, #0
 800313c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	6a3a      	ldr	r2, [r7, #32]
 8003142:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003148:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	2200      	movs	r2, #0
 800314e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003150:	88f8      	ldrh	r0, [r7, #6]
 8003152:	893a      	ldrh	r2, [r7, #8]
 8003154:	8979      	ldrh	r1, [r7, #10]
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	9301      	str	r3, [sp, #4]
 800315a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800315c:	9300      	str	r3, [sp, #0]
 800315e:	4603      	mov	r3, r0
 8003160:	68f8      	ldr	r0, [r7, #12]
 8003162:	f000 f92d 	bl	80033c0 <I2C_RequestMemoryRead>
 8003166:	4603      	mov	r3, r0
 8003168:	2b00      	cmp	r3, #0
 800316a:	d005      	beq.n	8003178 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	2200      	movs	r2, #0
 8003170:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003174:	2301      	movs	r3, #1
 8003176:	e0ad      	b.n	80032d4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800317c:	b29b      	uxth	r3, r3
 800317e:	2bff      	cmp	r3, #255	; 0xff
 8003180:	d90e      	bls.n	80031a0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	22ff      	movs	r2, #255	; 0xff
 8003186:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800318c:	b2da      	uxtb	r2, r3
 800318e:	8979      	ldrh	r1, [r7, #10]
 8003190:	4b52      	ldr	r3, [pc, #328]	; (80032dc <HAL_I2C_Mem_Read+0x22c>)
 8003192:	9300      	str	r3, [sp, #0]
 8003194:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003198:	68f8      	ldr	r0, [r7, #12]
 800319a:	f000 fb43 	bl	8003824 <I2C_TransferConfig>
 800319e:	e00f      	b.n	80031c0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031a4:	b29a      	uxth	r2, r3
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031ae:	b2da      	uxtb	r2, r3
 80031b0:	8979      	ldrh	r1, [r7, #10]
 80031b2:	4b4a      	ldr	r3, [pc, #296]	; (80032dc <HAL_I2C_Mem_Read+0x22c>)
 80031b4:	9300      	str	r3, [sp, #0]
 80031b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80031ba:	68f8      	ldr	r0, [r7, #12]
 80031bc:	f000 fb32 	bl	8003824 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	9300      	str	r3, [sp, #0]
 80031c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031c6:	2200      	movs	r2, #0
 80031c8:	2104      	movs	r1, #4
 80031ca:	68f8      	ldr	r0, [r7, #12]
 80031cc:	f000 f970 	bl	80034b0 <I2C_WaitOnFlagUntilTimeout>
 80031d0:	4603      	mov	r3, r0
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d001      	beq.n	80031da <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e07c      	b.n	80032d4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e4:	b2d2      	uxtb	r2, r2
 80031e6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ec:	1c5a      	adds	r2, r3, #1
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031f6:	3b01      	subs	r3, #1
 80031f8:	b29a      	uxth	r2, r3
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003202:	b29b      	uxth	r3, r3
 8003204:	3b01      	subs	r3, #1
 8003206:	b29a      	uxth	r2, r3
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003210:	b29b      	uxth	r3, r3
 8003212:	2b00      	cmp	r3, #0
 8003214:	d034      	beq.n	8003280 <HAL_I2C_Mem_Read+0x1d0>
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800321a:	2b00      	cmp	r3, #0
 800321c:	d130      	bne.n	8003280 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	9300      	str	r3, [sp, #0]
 8003222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003224:	2200      	movs	r2, #0
 8003226:	2180      	movs	r1, #128	; 0x80
 8003228:	68f8      	ldr	r0, [r7, #12]
 800322a:	f000 f941 	bl	80034b0 <I2C_WaitOnFlagUntilTimeout>
 800322e:	4603      	mov	r3, r0
 8003230:	2b00      	cmp	r3, #0
 8003232:	d001      	beq.n	8003238 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003234:	2301      	movs	r3, #1
 8003236:	e04d      	b.n	80032d4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800323c:	b29b      	uxth	r3, r3
 800323e:	2bff      	cmp	r3, #255	; 0xff
 8003240:	d90e      	bls.n	8003260 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	22ff      	movs	r2, #255	; 0xff
 8003246:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800324c:	b2da      	uxtb	r2, r3
 800324e:	8979      	ldrh	r1, [r7, #10]
 8003250:	2300      	movs	r3, #0
 8003252:	9300      	str	r3, [sp, #0]
 8003254:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003258:	68f8      	ldr	r0, [r7, #12]
 800325a:	f000 fae3 	bl	8003824 <I2C_TransferConfig>
 800325e:	e00f      	b.n	8003280 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003264:	b29a      	uxth	r2, r3
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800326e:	b2da      	uxtb	r2, r3
 8003270:	8979      	ldrh	r1, [r7, #10]
 8003272:	2300      	movs	r3, #0
 8003274:	9300      	str	r3, [sp, #0]
 8003276:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800327a:	68f8      	ldr	r0, [r7, #12]
 800327c:	f000 fad2 	bl	8003824 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003284:	b29b      	uxth	r3, r3
 8003286:	2b00      	cmp	r3, #0
 8003288:	d19a      	bne.n	80031c0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800328a:	697a      	ldr	r2, [r7, #20]
 800328c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800328e:	68f8      	ldr	r0, [r7, #12]
 8003290:	f000 f9a4 	bl	80035dc <I2C_WaitOnSTOPFlagUntilTimeout>
 8003294:	4603      	mov	r3, r0
 8003296:	2b00      	cmp	r3, #0
 8003298:	d001      	beq.n	800329e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e01a      	b.n	80032d4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	2220      	movs	r2, #32
 80032a4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	6859      	ldr	r1, [r3, #4]
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	4b0b      	ldr	r3, [pc, #44]	; (80032e0 <HAL_I2C_Mem_Read+0x230>)
 80032b2:	400b      	ands	r3, r1
 80032b4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	2220      	movs	r2, #32
 80032ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	2200      	movs	r2, #0
 80032c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	2200      	movs	r2, #0
 80032ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80032ce:	2300      	movs	r3, #0
 80032d0:	e000      	b.n	80032d4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80032d2:	2302      	movs	r3, #2
  }
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	3718      	adds	r7, #24
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}
 80032dc:	80002400 	.word	0x80002400
 80032e0:	fe00e800 	.word	0xfe00e800

080032e4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b084      	sub	sp, #16
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	699b      	ldr	r3, [r3, #24]
 80032f2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003300:	2b00      	cmp	r3, #0
 8003302:	d005      	beq.n	8003310 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003308:	68ba      	ldr	r2, [r7, #8]
 800330a:	68f9      	ldr	r1, [r7, #12]
 800330c:	6878      	ldr	r0, [r7, #4]
 800330e:	4798      	blx	r3
  }
}
 8003310:	bf00      	nop
 8003312:	3710      	adds	r7, #16
 8003314:	46bd      	mov	sp, r7
 8003316:	bd80      	pop	{r7, pc}

08003318 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b086      	sub	sp, #24
 800331c:	af02      	add	r7, sp, #8
 800331e:	60f8      	str	r0, [r7, #12]
 8003320:	4608      	mov	r0, r1
 8003322:	4611      	mov	r1, r2
 8003324:	461a      	mov	r2, r3
 8003326:	4603      	mov	r3, r0
 8003328:	817b      	strh	r3, [r7, #10]
 800332a:	460b      	mov	r3, r1
 800332c:	813b      	strh	r3, [r7, #8]
 800332e:	4613      	mov	r3, r2
 8003330:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003332:	88fb      	ldrh	r3, [r7, #6]
 8003334:	b2da      	uxtb	r2, r3
 8003336:	8979      	ldrh	r1, [r7, #10]
 8003338:	4b20      	ldr	r3, [pc, #128]	; (80033bc <I2C_RequestMemoryWrite+0xa4>)
 800333a:	9300      	str	r3, [sp, #0]
 800333c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003340:	68f8      	ldr	r0, [r7, #12]
 8003342:	f000 fa6f 	bl	8003824 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003346:	69fa      	ldr	r2, [r7, #28]
 8003348:	69b9      	ldr	r1, [r7, #24]
 800334a:	68f8      	ldr	r0, [r7, #12]
 800334c:	f000 f8ff 	bl	800354e <I2C_WaitOnTXISFlagUntilTimeout>
 8003350:	4603      	mov	r3, r0
 8003352:	2b00      	cmp	r3, #0
 8003354:	d001      	beq.n	800335a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	e02c      	b.n	80033b4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800335a:	88fb      	ldrh	r3, [r7, #6]
 800335c:	2b01      	cmp	r3, #1
 800335e:	d105      	bne.n	800336c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003360:	893b      	ldrh	r3, [r7, #8]
 8003362:	b2da      	uxtb	r2, r3
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	629a      	str	r2, [r3, #40]	; 0x28
 800336a:	e015      	b.n	8003398 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800336c:	893b      	ldrh	r3, [r7, #8]
 800336e:	0a1b      	lsrs	r3, r3, #8
 8003370:	b29b      	uxth	r3, r3
 8003372:	b2da      	uxtb	r2, r3
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800337a:	69fa      	ldr	r2, [r7, #28]
 800337c:	69b9      	ldr	r1, [r7, #24]
 800337e:	68f8      	ldr	r0, [r7, #12]
 8003380:	f000 f8e5 	bl	800354e <I2C_WaitOnTXISFlagUntilTimeout>
 8003384:	4603      	mov	r3, r0
 8003386:	2b00      	cmp	r3, #0
 8003388:	d001      	beq.n	800338e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	e012      	b.n	80033b4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800338e:	893b      	ldrh	r3, [r7, #8]
 8003390:	b2da      	uxtb	r2, r3
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003398:	69fb      	ldr	r3, [r7, #28]
 800339a:	9300      	str	r3, [sp, #0]
 800339c:	69bb      	ldr	r3, [r7, #24]
 800339e:	2200      	movs	r2, #0
 80033a0:	2180      	movs	r1, #128	; 0x80
 80033a2:	68f8      	ldr	r0, [r7, #12]
 80033a4:	f000 f884 	bl	80034b0 <I2C_WaitOnFlagUntilTimeout>
 80033a8:	4603      	mov	r3, r0
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d001      	beq.n	80033b2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	e000      	b.n	80033b4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80033b2:	2300      	movs	r3, #0
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	3710      	adds	r7, #16
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}
 80033bc:	80002000 	.word	0x80002000

080033c0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b086      	sub	sp, #24
 80033c4:	af02      	add	r7, sp, #8
 80033c6:	60f8      	str	r0, [r7, #12]
 80033c8:	4608      	mov	r0, r1
 80033ca:	4611      	mov	r1, r2
 80033cc:	461a      	mov	r2, r3
 80033ce:	4603      	mov	r3, r0
 80033d0:	817b      	strh	r3, [r7, #10]
 80033d2:	460b      	mov	r3, r1
 80033d4:	813b      	strh	r3, [r7, #8]
 80033d6:	4613      	mov	r3, r2
 80033d8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80033da:	88fb      	ldrh	r3, [r7, #6]
 80033dc:	b2da      	uxtb	r2, r3
 80033de:	8979      	ldrh	r1, [r7, #10]
 80033e0:	4b20      	ldr	r3, [pc, #128]	; (8003464 <I2C_RequestMemoryRead+0xa4>)
 80033e2:	9300      	str	r3, [sp, #0]
 80033e4:	2300      	movs	r3, #0
 80033e6:	68f8      	ldr	r0, [r7, #12]
 80033e8:	f000 fa1c 	bl	8003824 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80033ec:	69fa      	ldr	r2, [r7, #28]
 80033ee:	69b9      	ldr	r1, [r7, #24]
 80033f0:	68f8      	ldr	r0, [r7, #12]
 80033f2:	f000 f8ac 	bl	800354e <I2C_WaitOnTXISFlagUntilTimeout>
 80033f6:	4603      	mov	r3, r0
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d001      	beq.n	8003400 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80033fc:	2301      	movs	r3, #1
 80033fe:	e02c      	b.n	800345a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003400:	88fb      	ldrh	r3, [r7, #6]
 8003402:	2b01      	cmp	r3, #1
 8003404:	d105      	bne.n	8003412 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003406:	893b      	ldrh	r3, [r7, #8]
 8003408:	b2da      	uxtb	r2, r3
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	629a      	str	r2, [r3, #40]	; 0x28
 8003410:	e015      	b.n	800343e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003412:	893b      	ldrh	r3, [r7, #8]
 8003414:	0a1b      	lsrs	r3, r3, #8
 8003416:	b29b      	uxth	r3, r3
 8003418:	b2da      	uxtb	r2, r3
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003420:	69fa      	ldr	r2, [r7, #28]
 8003422:	69b9      	ldr	r1, [r7, #24]
 8003424:	68f8      	ldr	r0, [r7, #12]
 8003426:	f000 f892 	bl	800354e <I2C_WaitOnTXISFlagUntilTimeout>
 800342a:	4603      	mov	r3, r0
 800342c:	2b00      	cmp	r3, #0
 800342e:	d001      	beq.n	8003434 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003430:	2301      	movs	r3, #1
 8003432:	e012      	b.n	800345a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003434:	893b      	ldrh	r3, [r7, #8]
 8003436:	b2da      	uxtb	r2, r3
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800343e:	69fb      	ldr	r3, [r7, #28]
 8003440:	9300      	str	r3, [sp, #0]
 8003442:	69bb      	ldr	r3, [r7, #24]
 8003444:	2200      	movs	r2, #0
 8003446:	2140      	movs	r1, #64	; 0x40
 8003448:	68f8      	ldr	r0, [r7, #12]
 800344a:	f000 f831 	bl	80034b0 <I2C_WaitOnFlagUntilTimeout>
 800344e:	4603      	mov	r3, r0
 8003450:	2b00      	cmp	r3, #0
 8003452:	d001      	beq.n	8003458 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003454:	2301      	movs	r3, #1
 8003456:	e000      	b.n	800345a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003458:	2300      	movs	r3, #0
}
 800345a:	4618      	mov	r0, r3
 800345c:	3710      	adds	r7, #16
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}
 8003462:	bf00      	nop
 8003464:	80002000 	.word	0x80002000

08003468 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003468:	b480      	push	{r7}
 800346a:	b083      	sub	sp, #12
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	699b      	ldr	r3, [r3, #24]
 8003476:	f003 0302 	and.w	r3, r3, #2
 800347a:	2b02      	cmp	r3, #2
 800347c:	d103      	bne.n	8003486 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	2200      	movs	r2, #0
 8003484:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	699b      	ldr	r3, [r3, #24]
 800348c:	f003 0301 	and.w	r3, r3, #1
 8003490:	2b01      	cmp	r3, #1
 8003492:	d007      	beq.n	80034a4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	699a      	ldr	r2, [r3, #24]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f042 0201 	orr.w	r2, r2, #1
 80034a2:	619a      	str	r2, [r3, #24]
  }
}
 80034a4:	bf00      	nop
 80034a6:	370c      	adds	r7, #12
 80034a8:	46bd      	mov	sp, r7
 80034aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ae:	4770      	bx	lr

080034b0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b084      	sub	sp, #16
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	60f8      	str	r0, [r7, #12]
 80034b8:	60b9      	str	r1, [r7, #8]
 80034ba:	603b      	str	r3, [r7, #0]
 80034bc:	4613      	mov	r3, r2
 80034be:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80034c0:	e031      	b.n	8003526 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80034c8:	d02d      	beq.n	8003526 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034ca:	f7ff f8e3 	bl	8002694 <HAL_GetTick>
 80034ce:	4602      	mov	r2, r0
 80034d0:	69bb      	ldr	r3, [r7, #24]
 80034d2:	1ad3      	subs	r3, r2, r3
 80034d4:	683a      	ldr	r2, [r7, #0]
 80034d6:	429a      	cmp	r2, r3
 80034d8:	d302      	bcc.n	80034e0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d122      	bne.n	8003526 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	699a      	ldr	r2, [r3, #24]
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	4013      	ands	r3, r2
 80034ea:	68ba      	ldr	r2, [r7, #8]
 80034ec:	429a      	cmp	r2, r3
 80034ee:	bf0c      	ite	eq
 80034f0:	2301      	moveq	r3, #1
 80034f2:	2300      	movne	r3, #0
 80034f4:	b2db      	uxtb	r3, r3
 80034f6:	461a      	mov	r2, r3
 80034f8:	79fb      	ldrb	r3, [r7, #7]
 80034fa:	429a      	cmp	r2, r3
 80034fc:	d113      	bne.n	8003526 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003502:	f043 0220 	orr.w	r2, r3, #32
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	2220      	movs	r2, #32
 800350e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	2200      	movs	r2, #0
 8003516:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	2200      	movs	r2, #0
 800351e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8003522:	2301      	movs	r3, #1
 8003524:	e00f      	b.n	8003546 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	699a      	ldr	r2, [r3, #24]
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	4013      	ands	r3, r2
 8003530:	68ba      	ldr	r2, [r7, #8]
 8003532:	429a      	cmp	r2, r3
 8003534:	bf0c      	ite	eq
 8003536:	2301      	moveq	r3, #1
 8003538:	2300      	movne	r3, #0
 800353a:	b2db      	uxtb	r3, r3
 800353c:	461a      	mov	r2, r3
 800353e:	79fb      	ldrb	r3, [r7, #7]
 8003540:	429a      	cmp	r2, r3
 8003542:	d0be      	beq.n	80034c2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003544:	2300      	movs	r3, #0
}
 8003546:	4618      	mov	r0, r3
 8003548:	3710      	adds	r7, #16
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}

0800354e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800354e:	b580      	push	{r7, lr}
 8003550:	b084      	sub	sp, #16
 8003552:	af00      	add	r7, sp, #0
 8003554:	60f8      	str	r0, [r7, #12]
 8003556:	60b9      	str	r1, [r7, #8]
 8003558:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800355a:	e033      	b.n	80035c4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800355c:	687a      	ldr	r2, [r7, #4]
 800355e:	68b9      	ldr	r1, [r7, #8]
 8003560:	68f8      	ldr	r0, [r7, #12]
 8003562:	f000 f87f 	bl	8003664 <I2C_IsErrorOccurred>
 8003566:	4603      	mov	r3, r0
 8003568:	2b00      	cmp	r3, #0
 800356a:	d001      	beq.n	8003570 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800356c:	2301      	movs	r3, #1
 800356e:	e031      	b.n	80035d4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003576:	d025      	beq.n	80035c4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003578:	f7ff f88c 	bl	8002694 <HAL_GetTick>
 800357c:	4602      	mov	r2, r0
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	1ad3      	subs	r3, r2, r3
 8003582:	68ba      	ldr	r2, [r7, #8]
 8003584:	429a      	cmp	r2, r3
 8003586:	d302      	bcc.n	800358e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d11a      	bne.n	80035c4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	699b      	ldr	r3, [r3, #24]
 8003594:	f003 0302 	and.w	r3, r3, #2
 8003598:	2b02      	cmp	r3, #2
 800359a:	d013      	beq.n	80035c4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035a0:	f043 0220 	orr.w	r2, r3, #32
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	2220      	movs	r2, #32
 80035ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	2200      	movs	r2, #0
 80035b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2200      	movs	r2, #0
 80035bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
 80035c2:	e007      	b.n	80035d4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	699b      	ldr	r3, [r3, #24]
 80035ca:	f003 0302 	and.w	r3, r3, #2
 80035ce:	2b02      	cmp	r3, #2
 80035d0:	d1c4      	bne.n	800355c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80035d2:	2300      	movs	r3, #0
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	3710      	adds	r7, #16
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}

080035dc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b084      	sub	sp, #16
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	60f8      	str	r0, [r7, #12]
 80035e4:	60b9      	str	r1, [r7, #8]
 80035e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80035e8:	e02f      	b.n	800364a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80035ea:	687a      	ldr	r2, [r7, #4]
 80035ec:	68b9      	ldr	r1, [r7, #8]
 80035ee:	68f8      	ldr	r0, [r7, #12]
 80035f0:	f000 f838 	bl	8003664 <I2C_IsErrorOccurred>
 80035f4:	4603      	mov	r3, r0
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d001      	beq.n	80035fe <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80035fa:	2301      	movs	r3, #1
 80035fc:	e02d      	b.n	800365a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035fe:	f7ff f849 	bl	8002694 <HAL_GetTick>
 8003602:	4602      	mov	r2, r0
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	1ad3      	subs	r3, r2, r3
 8003608:	68ba      	ldr	r2, [r7, #8]
 800360a:	429a      	cmp	r2, r3
 800360c:	d302      	bcc.n	8003614 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d11a      	bne.n	800364a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	699b      	ldr	r3, [r3, #24]
 800361a:	f003 0320 	and.w	r3, r3, #32
 800361e:	2b20      	cmp	r3, #32
 8003620:	d013      	beq.n	800364a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003626:	f043 0220 	orr.w	r2, r3, #32
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	2220      	movs	r2, #32
 8003632:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	2200      	movs	r2, #0
 800363a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	2200      	movs	r2, #0
 8003642:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	e007      	b.n	800365a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	699b      	ldr	r3, [r3, #24]
 8003650:	f003 0320 	and.w	r3, r3, #32
 8003654:	2b20      	cmp	r3, #32
 8003656:	d1c8      	bne.n	80035ea <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003658:	2300      	movs	r3, #0
}
 800365a:	4618      	mov	r0, r3
 800365c:	3710      	adds	r7, #16
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}
	...

08003664 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b08a      	sub	sp, #40	; 0x28
 8003668:	af00      	add	r7, sp, #0
 800366a:	60f8      	str	r0, [r7, #12]
 800366c:	60b9      	str	r1, [r7, #8]
 800366e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003670:	2300      	movs	r3, #0
 8003672:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	699b      	ldr	r3, [r3, #24]
 800367c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800367e:	2300      	movs	r3, #0
 8003680:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003686:	69bb      	ldr	r3, [r7, #24]
 8003688:	f003 0310 	and.w	r3, r3, #16
 800368c:	2b00      	cmp	r3, #0
 800368e:	d068      	beq.n	8003762 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	2210      	movs	r2, #16
 8003696:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003698:	e049      	b.n	800372e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80036a0:	d045      	beq.n	800372e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80036a2:	f7fe fff7 	bl	8002694 <HAL_GetTick>
 80036a6:	4602      	mov	r2, r0
 80036a8:	69fb      	ldr	r3, [r7, #28]
 80036aa:	1ad3      	subs	r3, r2, r3
 80036ac:	68ba      	ldr	r2, [r7, #8]
 80036ae:	429a      	cmp	r2, r3
 80036b0:	d302      	bcc.n	80036b8 <I2C_IsErrorOccurred+0x54>
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d13a      	bne.n	800372e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036c2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80036ca:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	699b      	ldr	r3, [r3, #24]
 80036d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80036d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036da:	d121      	bne.n	8003720 <I2C_IsErrorOccurred+0xbc>
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80036e2:	d01d      	beq.n	8003720 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80036e4:	7cfb      	ldrb	r3, [r7, #19]
 80036e6:	2b20      	cmp	r3, #32
 80036e8:	d01a      	beq.n	8003720 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	685a      	ldr	r2, [r3, #4]
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80036f8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80036fa:	f7fe ffcb 	bl	8002694 <HAL_GetTick>
 80036fe:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003700:	e00e      	b.n	8003720 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003702:	f7fe ffc7 	bl	8002694 <HAL_GetTick>
 8003706:	4602      	mov	r2, r0
 8003708:	69fb      	ldr	r3, [r7, #28]
 800370a:	1ad3      	subs	r3, r2, r3
 800370c:	2b19      	cmp	r3, #25
 800370e:	d907      	bls.n	8003720 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003710:	6a3b      	ldr	r3, [r7, #32]
 8003712:	f043 0320 	orr.w	r3, r3, #32
 8003716:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003718:	2301      	movs	r3, #1
 800371a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800371e:	e006      	b.n	800372e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	699b      	ldr	r3, [r3, #24]
 8003726:	f003 0320 	and.w	r3, r3, #32
 800372a:	2b20      	cmp	r3, #32
 800372c:	d1e9      	bne.n	8003702 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	699b      	ldr	r3, [r3, #24]
 8003734:	f003 0320 	and.w	r3, r3, #32
 8003738:	2b20      	cmp	r3, #32
 800373a:	d003      	beq.n	8003744 <I2C_IsErrorOccurred+0xe0>
 800373c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003740:	2b00      	cmp	r3, #0
 8003742:	d0aa      	beq.n	800369a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003744:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003748:	2b00      	cmp	r3, #0
 800374a:	d103      	bne.n	8003754 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	2220      	movs	r2, #32
 8003752:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003754:	6a3b      	ldr	r3, [r7, #32]
 8003756:	f043 0304 	orr.w	r3, r3, #4
 800375a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	699b      	ldr	r3, [r3, #24]
 8003768:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800376a:	69bb      	ldr	r3, [r7, #24]
 800376c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003770:	2b00      	cmp	r3, #0
 8003772:	d00b      	beq.n	800378c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003774:	6a3b      	ldr	r3, [r7, #32]
 8003776:	f043 0301 	orr.w	r3, r3, #1
 800377a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003784:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800378c:	69bb      	ldr	r3, [r7, #24]
 800378e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003792:	2b00      	cmp	r3, #0
 8003794:	d00b      	beq.n	80037ae <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003796:	6a3b      	ldr	r3, [r7, #32]
 8003798:	f043 0308 	orr.w	r3, r3, #8
 800379c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80037a6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80037a8:	2301      	movs	r3, #1
 80037aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80037ae:	69bb      	ldr	r3, [r7, #24]
 80037b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d00b      	beq.n	80037d0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80037b8:	6a3b      	ldr	r3, [r7, #32]
 80037ba:	f043 0302 	orr.w	r3, r3, #2
 80037be:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80037c8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80037d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d01c      	beq.n	8003812 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80037d8:	68f8      	ldr	r0, [r7, #12]
 80037da:	f7ff fe45 	bl	8003468 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	6859      	ldr	r1, [r3, #4]
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681a      	ldr	r2, [r3, #0]
 80037e8:	4b0d      	ldr	r3, [pc, #52]	; (8003820 <I2C_IsErrorOccurred+0x1bc>)
 80037ea:	400b      	ands	r3, r1
 80037ec:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80037f2:	6a3b      	ldr	r3, [r7, #32]
 80037f4:	431a      	orrs	r2, r3
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	2220      	movs	r2, #32
 80037fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	2200      	movs	r2, #0
 8003806:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	2200      	movs	r2, #0
 800380e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003812:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003816:	4618      	mov	r0, r3
 8003818:	3728      	adds	r7, #40	; 0x28
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}
 800381e:	bf00      	nop
 8003820:	fe00e800 	.word	0xfe00e800

08003824 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003824:	b480      	push	{r7}
 8003826:	b087      	sub	sp, #28
 8003828:	af00      	add	r7, sp, #0
 800382a:	60f8      	str	r0, [r7, #12]
 800382c:	607b      	str	r3, [r7, #4]
 800382e:	460b      	mov	r3, r1
 8003830:	817b      	strh	r3, [r7, #10]
 8003832:	4613      	mov	r3, r2
 8003834:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003836:	897b      	ldrh	r3, [r7, #10]
 8003838:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800383c:	7a7b      	ldrb	r3, [r7, #9]
 800383e:	041b      	lsls	r3, r3, #16
 8003840:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003844:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800384a:	6a3b      	ldr	r3, [r7, #32]
 800384c:	4313      	orrs	r3, r2
 800384e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003852:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	685a      	ldr	r2, [r3, #4]
 800385a:	6a3b      	ldr	r3, [r7, #32]
 800385c:	0d5b      	lsrs	r3, r3, #21
 800385e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003862:	4b08      	ldr	r3, [pc, #32]	; (8003884 <I2C_TransferConfig+0x60>)
 8003864:	430b      	orrs	r3, r1
 8003866:	43db      	mvns	r3, r3
 8003868:	ea02 0103 	and.w	r1, r2, r3
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	697a      	ldr	r2, [r7, #20]
 8003872:	430a      	orrs	r2, r1
 8003874:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003876:	bf00      	nop
 8003878:	371c      	adds	r7, #28
 800387a:	46bd      	mov	sp, r7
 800387c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003880:	4770      	bx	lr
 8003882:	bf00      	nop
 8003884:	03ff63ff 	.word	0x03ff63ff

08003888 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003888:	b480      	push	{r7}
 800388a:	b083      	sub	sp, #12
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
 8003890:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003898:	b2db      	uxtb	r3, r3
 800389a:	2b20      	cmp	r3, #32
 800389c:	d138      	bne.n	8003910 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	d101      	bne.n	80038ac <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80038a8:	2302      	movs	r3, #2
 80038aa:	e032      	b.n	8003912 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2201      	movs	r2, #1
 80038b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2224      	movs	r2, #36	; 0x24
 80038b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	681a      	ldr	r2, [r3, #0]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f022 0201 	bic.w	r2, r2, #1
 80038ca:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80038da:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	6819      	ldr	r1, [r3, #0]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	683a      	ldr	r2, [r7, #0]
 80038e8:	430a      	orrs	r2, r1
 80038ea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	681a      	ldr	r2, [r3, #0]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f042 0201 	orr.w	r2, r2, #1
 80038fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2220      	movs	r2, #32
 8003900:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2200      	movs	r2, #0
 8003908:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800390c:	2300      	movs	r3, #0
 800390e:	e000      	b.n	8003912 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003910:	2302      	movs	r3, #2
  }
}
 8003912:	4618      	mov	r0, r3
 8003914:	370c      	adds	r7, #12
 8003916:	46bd      	mov	sp, r7
 8003918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391c:	4770      	bx	lr

0800391e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800391e:	b480      	push	{r7}
 8003920:	b085      	sub	sp, #20
 8003922:	af00      	add	r7, sp, #0
 8003924:	6078      	str	r0, [r7, #4]
 8003926:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800392e:	b2db      	uxtb	r3, r3
 8003930:	2b20      	cmp	r3, #32
 8003932:	d139      	bne.n	80039a8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800393a:	2b01      	cmp	r3, #1
 800393c:	d101      	bne.n	8003942 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800393e:	2302      	movs	r3, #2
 8003940:	e033      	b.n	80039aa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2201      	movs	r2, #1
 8003946:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2224      	movs	r2, #36	; 0x24
 800394e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	681a      	ldr	r2, [r3, #0]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f022 0201 	bic.w	r2, r2, #1
 8003960:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003970:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	021b      	lsls	r3, r3, #8
 8003976:	68fa      	ldr	r2, [r7, #12]
 8003978:	4313      	orrs	r3, r2
 800397a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	68fa      	ldr	r2, [r7, #12]
 8003982:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	681a      	ldr	r2, [r3, #0]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f042 0201 	orr.w	r2, r2, #1
 8003992:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2220      	movs	r2, #32
 8003998:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2200      	movs	r2, #0
 80039a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80039a4:	2300      	movs	r3, #0
 80039a6:	e000      	b.n	80039aa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80039a8:	2302      	movs	r3, #2
  }
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	3714      	adds	r7, #20
 80039ae:	46bd      	mov	sp, r7
 80039b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b4:	4770      	bx	lr
	...

080039b8 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b084      	sub	sp, #16
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 80039c0:	2300      	movs	r3, #0
 80039c2:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d01e      	beq.n	8003a08 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 80039ca:	4b13      	ldr	r3, [pc, #76]	; (8003a18 <HAL_IPCC_Init+0x60>)
 80039cc:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80039d4:	b2db      	uxtb	r3, r3
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d102      	bne.n	80039e0 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 80039da:	6878      	ldr	r0, [r7, #4]
 80039dc:	f7fe fb96 	bl	800210c <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 80039e0:	68b8      	ldr	r0, [r7, #8]
 80039e2:	f000 f85b 	bl	8003a9c <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 80039f2:	6878      	ldr	r0, [r7, #4]
 80039f4:	f000 f82c 	bl	8003a50 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2200      	movs	r2, #0
 80039fc:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2201      	movs	r2, #1
 8003a02:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8003a06:	e001      	b.n	8003a0c <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8003a0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	3710      	adds	r7, #16
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}
 8003a16:	bf00      	nop
 8003a18:	58000c00 	.word	0x58000c00

08003a1c <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b085      	sub	sp, #20
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	60f8      	str	r0, [r7, #12]
 8003a24:	60b9      	str	r1, [r7, #8]
 8003a26:	4613      	mov	r3, r2
 8003a28:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 8003a2a:	bf00      	nop
 8003a2c:	3714      	adds	r7, #20
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a34:	4770      	bx	lr

08003a36 <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8003a36:	b480      	push	{r7}
 8003a38:	b085      	sub	sp, #20
 8003a3a:	af00      	add	r7, sp, #0
 8003a3c:	60f8      	str	r0, [r7, #12]
 8003a3e:	60b9      	str	r1, [r7, #8]
 8003a40:	4613      	mov	r3, r2
 8003a42:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8003a44:	bf00      	nop
 8003a46:	3714      	adds	r7, #20
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4e:	4770      	bx	lr

08003a50 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b085      	sub	sp, #20
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8003a58:	2300      	movs	r3, #0
 8003a5a:	60fb      	str	r3, [r7, #12]
 8003a5c:	e00f      	b.n	8003a7e <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 8003a5e:	687a      	ldr	r2, [r7, #4]
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	009b      	lsls	r3, r3, #2
 8003a64:	4413      	add	r3, r2
 8003a66:	4a0b      	ldr	r2, [pc, #44]	; (8003a94 <IPCC_SetDefaultCallbacks+0x44>)
 8003a68:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 8003a6a:	687a      	ldr	r2, [r7, #4]
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	3306      	adds	r3, #6
 8003a70:	009b      	lsls	r3, r3, #2
 8003a72:	4413      	add	r3, r2
 8003a74:	4a08      	ldr	r2, [pc, #32]	; (8003a98 <IPCC_SetDefaultCallbacks+0x48>)
 8003a76:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	3301      	adds	r3, #1
 8003a7c:	60fb      	str	r3, [r7, #12]
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2b05      	cmp	r3, #5
 8003a82:	d9ec      	bls.n	8003a5e <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8003a84:	bf00      	nop
 8003a86:	bf00      	nop
 8003a88:	3714      	adds	r7, #20
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a90:	4770      	bx	lr
 8003a92:	bf00      	nop
 8003a94:	08003a1d 	.word	0x08003a1d
 8003a98:	08003a37 	.word	0x08003a37

08003a9c <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b083      	sub	sp, #12
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
 8003ab0:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	223f      	movs	r2, #63	; 0x3f
 8003ab6:	609a      	str	r2, [r3, #8]
}
 8003ab8:	bf00      	nop
 8003aba:	370c      	adds	r7, #12
 8003abc:	46bd      	mov	sp, r7
 8003abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac2:	4770      	bx	lr

08003ac4 <LL_RCC_SetLPTIMClockSource>:
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b083      	sub	sp, #12
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8003acc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ad0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	0c1b      	lsrs	r3, r3, #16
 8003ad8:	041b      	lsls	r3, r3, #16
 8003ada:	43db      	mvns	r3, r3
 8003adc:	401a      	ands	r2, r3
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	041b      	lsls	r3, r3, #16
 8003ae2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003aec:	bf00      	nop
 8003aee:	370c      	adds	r7, #12
 8003af0:	46bd      	mov	sp, r7
 8003af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af6:	4770      	bx	lr

08003af8 <LL_RCC_GetLPTIMClockSource>:
{
 8003af8:	b480      	push	{r7}
 8003afa:	b083      	sub	sp, #12
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  return (uint32_t)((READ_BIT(RCC->CCIPR, LPTIMx) >> 16) | LPTIMx);
 8003b00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b04:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	4013      	ands	r3, r2
 8003b0c:	0c1a      	lsrs	r2, r3, #16
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	4313      	orrs	r3, r2
}
 8003b12:	4618      	mov	r0, r3
 8003b14:	370c      	adds	r7, #12
 8003b16:	46bd      	mov	sp, r7
 8003b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1c:	4770      	bx	lr

08003b1e <LL_APB1_GRP1_ForceReset>:
{
 8003b1e:	b480      	push	{r7}
 8003b20:	b083      	sub	sp, #12
 8003b22:	af00      	add	r7, sp, #0
 8003b24:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1RSTR1, Periphs);
 8003b26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b2a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b2c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	4313      	orrs	r3, r2
 8003b34:	638b      	str	r3, [r1, #56]	; 0x38
}
 8003b36:	bf00      	nop
 8003b38:	370c      	adds	r7, #12
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b40:	4770      	bx	lr

08003b42 <LL_APB1_GRP2_ForceReset>:
{
 8003b42:	b480      	push	{r7}
 8003b44:	b083      	sub	sp, #12
 8003b46:	af00      	add	r7, sp, #0
 8003b48:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1RSTR2, Periphs);
 8003b4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b4e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b50:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	4313      	orrs	r3, r2
 8003b58:	63cb      	str	r3, [r1, #60]	; 0x3c
}
 8003b5a:	bf00      	nop
 8003b5c:	370c      	adds	r7, #12
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b64:	4770      	bx	lr

08003b66 <LL_APB1_GRP1_ReleaseReset>:
{
 8003b66:	b480      	push	{r7}
 8003b68:	b083      	sub	sp, #12
 8003b6a:	af00      	add	r7, sp, #0
 8003b6c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1RSTR1, Periphs);
 8003b6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b72:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	43db      	mvns	r3, r3
 8003b78:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003b7c:	4013      	ands	r3, r2
 8003b7e:	638b      	str	r3, [r1, #56]	; 0x38
}
 8003b80:	bf00      	nop
 8003b82:	370c      	adds	r7, #12
 8003b84:	46bd      	mov	sp, r7
 8003b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8a:	4770      	bx	lr

08003b8c <LL_APB1_GRP2_ReleaseReset>:
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b083      	sub	sp, #12
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1RSTR2, Periphs);
 8003b94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b98:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	43db      	mvns	r3, r3
 8003b9e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003ba2:	4013      	ands	r3, r2
 8003ba4:	63cb      	str	r3, [r1, #60]	; 0x3c
}
 8003ba6:	bf00      	nop
 8003ba8:	370c      	adds	r7, #12
 8003baa:	46bd      	mov	sp, r7
 8003bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb0:	4770      	bx	lr
	...

08003bb4 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b084      	sub	sp, #16
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d101      	bne.n	8003bc6 <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	e08f      	b.n	8003ce6 <HAL_LPTIM_Init+0x132>
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	2b01      	cmp	r3, #1
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8003bd2:	b2db      	uxtb	r3, r3
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d106      	bne.n	8003be6 <HAL_LPTIM_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 8003be0:	6878      	ldr	r0, [r7, #4]
 8003be2:	f7fe fab7 	bl	8002154 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2202      	movs	r2, #2
 8003bea:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	68db      	ldr	r3, [r3, #12]
 8003bf4:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	2b01      	cmp	r3, #1
 8003bfc:	d004      	beq.n	8003c08 <HAL_LPTIM_Init+0x54>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c02:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003c06:	d103      	bne.n	8003c10 <HAL_LPTIM_Init+0x5c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	f023 031e 	bic.w	r3, r3, #30
 8003c0e:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	695b      	ldr	r3, [r3, #20]
 8003c14:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d005      	beq.n	8003c28 <HAL_LPTIM_Init+0x74>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8003c22:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003c26:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8003c28:	68fa      	ldr	r2, [r7, #12]
 8003c2a:	4b31      	ldr	r3, [pc, #196]	; (8003cf0 <HAL_LPTIM_Init+0x13c>)
 8003c2c:	4013      	ands	r3, r2
 8003c2e:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8003c38:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 8003c3e:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 8003c44:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 8003c4a:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8003c4c:	68fa      	ldr	r2, [r7, #12]
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d107      	bne.n	8003c6a <HAL_LPTIM_Init+0xb6>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8003c62:	4313      	orrs	r3, r2
 8003c64:	68fa      	ldr	r2, [r7, #12]
 8003c66:	4313      	orrs	r3, r2
 8003c68:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	2b01      	cmp	r3, #1
 8003c70:	d004      	beq.n	8003c7c <HAL_LPTIM_Init+0xc8>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c76:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003c7a:	d107      	bne.n	8003c8c <HAL_LPTIM_Init+0xd8>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8003c84:	4313      	orrs	r3, r2
 8003c86:	68fa      	ldr	r2, [r7, #12]
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	695b      	ldr	r3, [r3, #20]
 8003c90:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d00a      	beq.n	8003cae <HAL_LPTIM_Init+0xfa>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8003ca0:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 8003ca6:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8003ca8:	68fa      	ldr	r2, [r7, #12]
 8003caa:	4313      	orrs	r3, r2
 8003cac:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	68fa      	ldr	r2, [r7, #12]
 8003cb4:	60da      	str	r2, [r3, #12]
#if defined(LPTIM_OR_OR)

  /* Configure LPTIM input sources */
  if (hlptim->Instance == LPTIM1)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a0e      	ldr	r2, [pc, #56]	; (8003cf4 <HAL_LPTIM_Init+0x140>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d108      	bne.n	8003cd2 <HAL_LPTIM_Init+0x11e>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->OR = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	430a      	orrs	r2, r1
 8003cce:	621a      	str	r2, [r3, #32]
 8003cd0:	e004      	b.n	8003cdc <HAL_LPTIM_Init+0x128>
  {
    /* Check LPTIM2 Input1 source */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

    /* Configure LPTIM2 Input1 source */
    hlptim->Instance->OR = hlptim->Init.Input1Source;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	687a      	ldr	r2, [r7, #4]
 8003cd8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003cda:	621a      	str	r2, [r3, #32]
  }
#endif /* LPTIM_OR_OR */

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2201      	movs	r2, #1
 8003ce0:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 8003ce4:	2300      	movs	r3, #0
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	3710      	adds	r7, #16
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}
 8003cee:	bf00      	nop
 8003cf0:	ff19f1fe 	.word	0xff19f1fe
 8003cf4:	40007c00 	.word	0x40007c00

08003cf8 <HAL_LPTIM_TimeOut_Start_IT>:
  * @param  Timeout Specifies the TimeOut value to reset the counter.
  *         This parameter must be a value between 0x0000 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_TimeOut_Start_IT(LPTIM_HandleTypeDef *hlptim, uint32_t Period, uint32_t Timeout)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b084      	sub	sp, #16
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	60f8      	str	r0, [r7, #12]
 8003d00:	60b9      	str	r1, [r7, #8]
 8003d02:	607a      	str	r2, [r7, #4]
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(Period));
  assert_param(IS_LPTIM_PULSE(Timeout));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	2202      	movs	r2, #2
 8003d08:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Enable EXTI Line interrupt on the LPTIM Wake-up Timer */
  __HAL_LPTIM_WAKEUPTIMER_EXTI_ENABLE_IT(hlptim->Instance);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a38      	ldr	r2, [pc, #224]	; (8003df4 <HAL_LPTIM_TimeOut_Start_IT+0xfc>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d108      	bne.n	8003d28 <HAL_LPTIM_TimeOut_Start_IT+0x30>
 8003d16:	4b38      	ldr	r3, [pc, #224]	; (8003df8 <HAL_LPTIM_TimeOut_Start_IT+0x100>)
 8003d18:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d1c:	4a36      	ldr	r2, [pc, #216]	; (8003df8 <HAL_LPTIM_TimeOut_Start_IT+0x100>)
 8003d1e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003d22:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003d26:	e007      	b.n	8003d38 <HAL_LPTIM_TimeOut_Start_IT+0x40>
 8003d28:	4b33      	ldr	r3, [pc, #204]	; (8003df8 <HAL_LPTIM_TimeOut_Start_IT+0x100>)
 8003d2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d2e:	4a32      	ldr	r2, [pc, #200]	; (8003df8 <HAL_LPTIM_TimeOut_Start_IT+0x100>)
 8003d30:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003d34:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Set TIMOUT bit to enable the timeout function */
  hlptim->Instance->CFGR |= LPTIM_CFGR_TIMOUT;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	68da      	ldr	r2, [r3, #12]
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8003d46:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	691a      	ldr	r2, [r3, #16]
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f042 0201 	orr.w	r2, r2, #1
 8003d56:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	2210      	movs	r2, #16
 8003d5e:	605a      	str	r2, [r3, #4]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	68ba      	ldr	r2, [r7, #8]
 8003d66:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8003d68:	2110      	movs	r1, #16
 8003d6a:	68f8      	ldr	r0, [r7, #12]
 8003d6c:	f000 f92c 	bl	8003fc8 <LPTIM_WaitForFlag>
 8003d70:	4603      	mov	r3, r0
 8003d72:	2b03      	cmp	r3, #3
 8003d74:	d101      	bne.n	8003d7a <HAL_LPTIM_TimeOut_Start_IT+0x82>
  {
    return HAL_TIMEOUT;
 8003d76:	2303      	movs	r3, #3
 8003d78:	e038      	b.n	8003dec <HAL_LPTIM_TimeOut_Start_IT+0xf4>
  }

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	2208      	movs	r2, #8
 8003d80:	605a      	str	r2, [r3, #4]

  /* Load the Timeout value in the compare register */
  __HAL_LPTIM_COMPARE_SET(hlptim, Timeout);
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	687a      	ldr	r2, [r7, #4]
 8003d88:	615a      	str	r2, [r3, #20]

  /* Wait for the completion of the write operation to the LPTIM_CMP register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 8003d8a:	2108      	movs	r1, #8
 8003d8c:	68f8      	ldr	r0, [r7, #12]
 8003d8e:	f000 f91b 	bl	8003fc8 <LPTIM_WaitForFlag>
 8003d92:	4603      	mov	r3, r0
 8003d94:	2b03      	cmp	r3, #3
 8003d96:	d101      	bne.n	8003d9c <HAL_LPTIM_TimeOut_Start_IT+0xa4>
  {
    return HAL_TIMEOUT;
 8003d98:	2303      	movs	r3, #3
 8003d9a:	e027      	b.n	8003dec <HAL_LPTIM_TimeOut_Start_IT+0xf4>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 8003d9c:	68f8      	ldr	r0, [r7, #12]
 8003d9e:	f000 f943 	bl	8004028 <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 8003da2:	68f8      	ldr	r0, [r7, #12]
 8003da4:	f000 f901 	bl	8003faa <HAL_LPTIM_GetState>
 8003da8:	4603      	mov	r3, r0
 8003daa:	2b03      	cmp	r3, #3
 8003dac:	d101      	bne.n	8003db2 <HAL_LPTIM_TimeOut_Start_IT+0xba>
  {
    return HAL_TIMEOUT;
 8003dae:	2303      	movs	r3, #3
 8003db0:	e01c      	b.n	8003dec <HAL_LPTIM_TimeOut_Start_IT+0xf4>
  }

  /* Enable Compare match interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_CMPM);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	689a      	ldr	r2, [r3, #8]
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f042 0201 	orr.w	r2, r2, #1
 8003dc0:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	691a      	ldr	r2, [r3, #16]
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f042 0201 	orr.w	r2, r2, #1
 8003dd0:	611a      	str	r2, [r3, #16]

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	691a      	ldr	r2, [r3, #16]
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f042 0204 	orr.w	r2, r2, #4
 8003de0:	611a      	str	r2, [r3, #16]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	2201      	movs	r2, #1
 8003de6:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 8003dea:	2300      	movs	r3, #0
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	3710      	adds	r7, #16
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd80      	pop	{r7, pc}
 8003df4:	40007c00 	.word	0x40007c00
 8003df8:	58000800 	.word	0x58000800

08003dfc <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b082      	sub	sp, #8
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f003 0301 	and.w	r3, r3, #1
 8003e0e:	2b01      	cmp	r3, #1
 8003e10:	d10d      	bne.n	8003e2e <HAL_LPTIM_IRQHandler+0x32>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	f003 0301 	and.w	r3, r3, #1
 8003e1c:	2b01      	cmp	r3, #1
 8003e1e:	d106      	bne.n	8003e2e <HAL_LPTIM_IRQHandler+0x32>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	2201      	movs	r2, #1
 8003e26:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
#else
      HAL_LPTIM_CompareMatchCallback(hlptim);
 8003e28:	6878      	ldr	r0, [r7, #4]
 8003e2a:	f7fe f85d 	bl	8001ee8 <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f003 0302 	and.w	r3, r3, #2
 8003e38:	2b02      	cmp	r3, #2
 8003e3a:	d10d      	bne.n	8003e58 <HAL_LPTIM_IRQHandler+0x5c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	689b      	ldr	r3, [r3, #8]
 8003e42:	f003 0302 	and.w	r3, r3, #2
 8003e46:	2b02      	cmp	r3, #2
 8003e48:	d106      	bne.n	8003e58 <HAL_LPTIM_IRQHandler+0x5c>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	2202      	movs	r2, #2
 8003e50:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	f000 f86d 	bl	8003f32 <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f003 0304 	and.w	r3, r3, #4
 8003e62:	2b04      	cmp	r3, #4
 8003e64:	d10d      	bne.n	8003e82 <HAL_LPTIM_IRQHandler+0x86>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	689b      	ldr	r3, [r3, #8]
 8003e6c:	f003 0304 	and.w	r3, r3, #4
 8003e70:	2b04      	cmp	r3, #4
 8003e72:	d106      	bne.n	8003e82 <HAL_LPTIM_IRQHandler+0x86>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	2204      	movs	r2, #4
 8003e7a:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 8003e7c:	6878      	ldr	r0, [r7, #4]
 8003e7e:	f000 f862 	bl	8003f46 <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f003 0308 	and.w	r3, r3, #8
 8003e8c:	2b08      	cmp	r3, #8
 8003e8e:	d10d      	bne.n	8003eac <HAL_LPTIM_IRQHandler+0xb0>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	689b      	ldr	r3, [r3, #8]
 8003e96:	f003 0308 	and.w	r3, r3, #8
 8003e9a:	2b08      	cmp	r3, #8
 8003e9c:	d106      	bne.n	8003eac <HAL_LPTIM_IRQHandler+0xb0>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	2208      	movs	r2, #8
 8003ea4:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	f000 f857 	bl	8003f5a <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f003 0310 	and.w	r3, r3, #16
 8003eb6:	2b10      	cmp	r3, #16
 8003eb8:	d10d      	bne.n	8003ed6 <HAL_LPTIM_IRQHandler+0xda>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	f003 0310 	and.w	r3, r3, #16
 8003ec4:	2b10      	cmp	r3, #16
 8003ec6:	d106      	bne.n	8003ed6 <HAL_LPTIM_IRQHandler+0xda>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	2210      	movs	r2, #16
 8003ece:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 8003ed0:	6878      	ldr	r0, [r7, #4]
 8003ed2:	f000 f84c 	bl	8003f6e <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f003 0320 	and.w	r3, r3, #32
 8003ee0:	2b20      	cmp	r3, #32
 8003ee2:	d10d      	bne.n	8003f00 <HAL_LPTIM_IRQHandler+0x104>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	689b      	ldr	r3, [r3, #8]
 8003eea:	f003 0320 	and.w	r3, r3, #32
 8003eee:	2b20      	cmp	r3, #32
 8003ef0:	d106      	bne.n	8003f00 <HAL_LPTIM_IRQHandler+0x104>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	2220      	movs	r2, #32
 8003ef8:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 8003efa:	6878      	ldr	r0, [r7, #4]
 8003efc:	f000 f841 	bl	8003f82 <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f0a:	2b40      	cmp	r3, #64	; 0x40
 8003f0c:	d10d      	bne.n	8003f2a <HAL_LPTIM_IRQHandler+0x12e>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	689b      	ldr	r3, [r3, #8]
 8003f14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f18:	2b40      	cmp	r3, #64	; 0x40
 8003f1a:	d106      	bne.n	8003f2a <HAL_LPTIM_IRQHandler+0x12e>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	2240      	movs	r2, #64	; 0x40
 8003f22:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 8003f24:	6878      	ldr	r0, [r7, #4]
 8003f26:	f000 f836 	bl	8003f96 <HAL_LPTIM_DirectionDownCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
}
 8003f2a:	bf00      	nop
 8003f2c:	3708      	adds	r7, #8
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}

08003f32 <HAL_LPTIM_AutoReloadMatchCallback>:
  * @brief  Autoreload match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8003f32:	b480      	push	{r7}
 8003f34:	b083      	sub	sp, #12
 8003f36:	af00      	add	r7, sp, #0
 8003f38:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadMatchCallback could be implemented in the user file
   */
}
 8003f3a:	bf00      	nop
 8003f3c:	370c      	adds	r7, #12
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f44:	4770      	bx	lr

08003f46 <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 8003f46:	b480      	push	{r7}
 8003f48:	b083      	sub	sp, #12
 8003f4a:	af00      	add	r7, sp, #0
 8003f4c:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 8003f4e:	bf00      	nop
 8003f50:	370c      	adds	r7, #12
 8003f52:	46bd      	mov	sp, r7
 8003f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f58:	4770      	bx	lr

08003f5a <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8003f5a:	b480      	push	{r7}
 8003f5c:	b083      	sub	sp, #12
 8003f5e:	af00      	add	r7, sp, #0
 8003f60:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 8003f62:	bf00      	nop
 8003f64:	370c      	adds	r7, #12
 8003f66:	46bd      	mov	sp, r7
 8003f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6c:	4770      	bx	lr

08003f6e <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8003f6e:	b480      	push	{r7}
 8003f70:	b083      	sub	sp, #12
 8003f72:	af00      	add	r7, sp, #0
 8003f74:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 8003f76:	bf00      	nop
 8003f78:	370c      	adds	r7, #12
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f80:	4770      	bx	lr

08003f82 <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 8003f82:	b480      	push	{r7}
 8003f84:	b083      	sub	sp, #12
 8003f86:	af00      	add	r7, sp, #0
 8003f88:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 8003f8a:	bf00      	nop
 8003f8c:	370c      	adds	r7, #12
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f94:	4770      	bx	lr

08003f96 <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 8003f96:	b480      	push	{r7}
 8003f98:	b083      	sub	sp, #12
 8003f9a:	af00      	add	r7, sp, #0
 8003f9c:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 8003f9e:	bf00      	nop
 8003fa0:	370c      	adds	r7, #12
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa8:	4770      	bx	lr

08003faa <HAL_LPTIM_GetState>:
  * @brief  Return the LPTIM handle state.
  * @param  hlptim LPTIM handle
  * @retval HAL state
  */
HAL_LPTIM_StateTypeDef HAL_LPTIM_GetState(LPTIM_HandleTypeDef *hlptim)
{
 8003faa:	b480      	push	{r7}
 8003fac:	b083      	sub	sp, #12
 8003fae:	af00      	add	r7, sp, #0
 8003fb0:	6078      	str	r0, [r7, #4]
  /* Return LPTIM handle state */
  return hlptim->State;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8003fb8:	b2db      	uxtb	r3, r3
}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	370c      	adds	r7, #12
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc4:	4770      	bx	lr
	...

08003fc8 <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b085      	sub	sp, #20
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
 8003fd0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	73fb      	strb	r3, [r7, #15]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 8003fd6:	4b12      	ldr	r3, [pc, #72]	; (8004020 <LPTIM_WaitForFlag+0x58>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a12      	ldr	r2, [pc, #72]	; (8004024 <LPTIM_WaitForFlag+0x5c>)
 8003fdc:	fba2 2303 	umull	r2, r3, r2, r3
 8003fe0:	0b9b      	lsrs	r3, r3, #14
 8003fe2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003fe6:	fb02 f303 	mul.w	r3, r2, r3
 8003fea:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	3b01      	subs	r3, #1
 8003ff0:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d101      	bne.n	8003ffc <LPTIM_WaitForFlag+0x34>
    {
      result = HAL_TIMEOUT;
 8003ff8:	2303      	movs	r3, #3
 8003ffa:	73fb      	strb	r3, [r7, #15]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	681a      	ldr	r2, [r3, #0]
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	4013      	ands	r3, r2
 8004006:	683a      	ldr	r2, [r7, #0]
 8004008:	429a      	cmp	r2, r3
 800400a:	d002      	beq.n	8004012 <LPTIM_WaitForFlag+0x4a>
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d1ec      	bne.n	8003fec <LPTIM_WaitForFlag+0x24>

  return result;
 8004012:	7bfb      	ldrb	r3, [r7, #15]
}
 8004014:	4618      	mov	r0, r3
 8004016:	3714      	adds	r7, #20
 8004018:	46bd      	mov	sp, r7
 800401a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401e:	4770      	bx	lr
 8004020:	20000008 	.word	0x20000008
 8004024:	d1b71759 	.word	0xd1b71759

08004028 <LPTIM_Disable>:
  *         Please check Errata Sheet ES0335 for more details under "MCU may remain
  *         stuck in LPTIM interrupt when entering Stop mode" section.
  * @retval None
  */
void LPTIM_Disable(LPTIM_HandleTypeDef *hlptim)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b08c      	sub	sp, #48	; 0x30
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  uint32_t tmpclksource = 0;
 8004030:	2300      	movs	r3, #0
 8004032:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004034:	f3ef 8310 	mrs	r3, PRIMASK
 8004038:	60fb      	str	r3, [r7, #12]
  return(result);
 800403a:	68fb      	ldr	r3, [r7, #12]
#if defined(LPTIM_OR_OR)
  uint32_t tmpOR;
#endif /* LPTIM_OR_OR */

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 800403c:	62bb      	str	r3, [r7, #40]	; 0x28
 800403e:	2301      	movs	r3, #1
 8004040:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004042:	693b      	ldr	r3, [r7, #16]
 8004044:	f383 8810 	msr	PRIMASK, r3
}
 8004048:	bf00      	nop
  __set_PRIMASK(1) ;

  /*********** Save LPTIM Config ***********/
  /* Save LPTIM source clock */
  switch ((uint32_t)hlptim->Instance)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a62      	ldr	r2, [pc, #392]	; (80041d8 <LPTIM_Disable+0x1b0>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d003      	beq.n	800405c <LPTIM_Disable+0x34>
 8004054:	4a61      	ldr	r2, [pc, #388]	; (80041dc <LPTIM_Disable+0x1b4>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d006      	beq.n	8004068 <LPTIM_Disable+0x40>
    case LPTIM2_BASE:
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
      break;
#endif /* LPTIM2 */
    default:
      break;
 800405a:	e00b      	b.n	8004074 <LPTIM_Disable+0x4c>
      tmpclksource = __HAL_RCC_GET_LPTIM1_SOURCE();
 800405c:	f44f 2040 	mov.w	r0, #786432	; 0xc0000
 8004060:	f7ff fd4a 	bl	8003af8 <LL_RCC_GetLPTIMClockSource>
 8004064:	62f8      	str	r0, [r7, #44]	; 0x2c
      break;
 8004066:	e005      	b.n	8004074 <LPTIM_Disable+0x4c>
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
 8004068:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 800406c:	f7ff fd44 	bl	8003af8 <LL_RCC_GetLPTIMClockSource>
 8004070:	62f8      	str	r0, [r7, #44]	; 0x2c
      break;
 8004072:	bf00      	nop
  }

  /* Save LPTIM configuration registers */
  tmpIER = hlptim->Instance->IER;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	689b      	ldr	r3, [r3, #8]
 800407a:	627b      	str	r3, [r7, #36]	; 0x24
  tmpCFGR = hlptim->Instance->CFGR;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	68db      	ldr	r3, [r3, #12]
 8004082:	623b      	str	r3, [r7, #32]
  tmpCMP = hlptim->Instance->CMP;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	695b      	ldr	r3, [r3, #20]
 800408a:	61fb      	str	r3, [r7, #28]
  tmpARR = hlptim->Instance->ARR;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	699b      	ldr	r3, [r3, #24]
 8004092:	61bb      	str	r3, [r7, #24]
#if defined(LPTIM_OR_OR)
  tmpOR = hlptim->Instance->OR;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	6a1b      	ldr	r3, [r3, #32]
 800409a:	617b      	str	r3, [r7, #20]
#endif /* LPTIM_OR_OR */

  /*********** Reset LPTIM ***********/
  switch ((uint32_t)hlptim->Instance)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a4d      	ldr	r2, [pc, #308]	; (80041d8 <LPTIM_Disable+0x1b0>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d003      	beq.n	80040ae <LPTIM_Disable+0x86>
 80040a6:	4a4d      	ldr	r2, [pc, #308]	; (80041dc <LPTIM_Disable+0x1b4>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d009      	beq.n	80040c0 <LPTIM_Disable+0x98>
      __HAL_RCC_LPTIM2_FORCE_RESET();
      __HAL_RCC_LPTIM2_RELEASE_RESET();
      break;
#endif /* LPTIM2 */
    default:
      break;
 80040ac:	e00f      	b.n	80040ce <LPTIM_Disable+0xa6>
      __HAL_RCC_LPTIM1_FORCE_RESET();
 80040ae:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 80040b2:	f7ff fd34 	bl	8003b1e <LL_APB1_GRP1_ForceReset>
      __HAL_RCC_LPTIM1_RELEASE_RESET();
 80040b6:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 80040ba:	f7ff fd54 	bl	8003b66 <LL_APB1_GRP1_ReleaseReset>
      break;
 80040be:	e006      	b.n	80040ce <LPTIM_Disable+0xa6>
      __HAL_RCC_LPTIM2_FORCE_RESET();
 80040c0:	2020      	movs	r0, #32
 80040c2:	f7ff fd3e 	bl	8003b42 <LL_APB1_GRP2_ForceReset>
      __HAL_RCC_LPTIM2_RELEASE_RESET();
 80040c6:	2020      	movs	r0, #32
 80040c8:	f7ff fd60 	bl	8003b8c <LL_APB1_GRP2_ReleaseReset>
      break;
 80040cc:	bf00      	nop
  }

  /*********** Restore LPTIM Config ***********/
  if ((tmpCMP != 0UL) || (tmpARR != 0UL))
 80040ce:	69fb      	ldr	r3, [r7, #28]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d102      	bne.n	80040da <LPTIM_Disable+0xb2>
 80040d4:	69bb      	ldr	r3, [r7, #24]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d05f      	beq.n	800419a <LPTIM_Disable+0x172>
  {
    /* Force LPTIM source kernel clock from APB */
    switch ((uint32_t)hlptim->Instance)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a3e      	ldr	r2, [pc, #248]	; (80041d8 <LPTIM_Disable+0x1b0>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d003      	beq.n	80040ec <LPTIM_Disable+0xc4>
 80040e4:	4a3d      	ldr	r2, [pc, #244]	; (80041dc <LPTIM_Disable+0x1b4>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d005      	beq.n	80040f6 <LPTIM_Disable+0xce>
      case LPTIM2_BASE:
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_PCLK1);
        break;
#endif /* LPTIM2 */
      default:
        break;
 80040ea:	e009      	b.n	8004100 <LPTIM_Disable+0xd8>
        __HAL_RCC_LPTIM1_CONFIG(RCC_LPTIM1CLKSOURCE_PCLK1);
 80040ec:	f44f 2040 	mov.w	r0, #786432	; 0xc0000
 80040f0:	f7ff fce8 	bl	8003ac4 <LL_RCC_SetLPTIMClockSource>
        break;
 80040f4:	e004      	b.n	8004100 <LPTIM_Disable+0xd8>
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_PCLK1);
 80040f6:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 80040fa:	f7ff fce3 	bl	8003ac4 <LL_RCC_SetLPTIMClockSource>
        break;
 80040fe:	bf00      	nop
    }

    if (tmpCMP != 0UL)
 8004100:	69fb      	ldr	r3, [r7, #28]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d01a      	beq.n	800413c <LPTIM_Disable+0x114>
    {
      /* Restore CMP register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	691a      	ldr	r2, [r3, #16]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f042 0201 	orr.w	r2, r2, #1
 8004114:	611a      	str	r2, [r3, #16]
      hlptim->Instance->CMP = tmpCMP;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	69fa      	ldr	r2, [r7, #28]
 800411c:	615a      	str	r2, [r3, #20]

      /* Wait for the completion of the write operation to the LPTIM_CMP register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 800411e:	2108      	movs	r1, #8
 8004120:	6878      	ldr	r0, [r7, #4]
 8004122:	f7ff ff51 	bl	8003fc8 <LPTIM_WaitForFlag>
 8004126:	4603      	mov	r3, r0
 8004128:	2b03      	cmp	r3, #3
 800412a:	d103      	bne.n	8004134 <LPTIM_Disable+0x10c>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2203      	movs	r2, #3
 8004130:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	2208      	movs	r2, #8
 800413a:	605a      	str	r2, [r3, #4]
    }

    if (tmpARR != 0UL)
 800413c:	69bb      	ldr	r3, [r7, #24]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d01a      	beq.n	8004178 <LPTIM_Disable+0x150>
    {
      /* Restore ARR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	691a      	ldr	r2, [r3, #16]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f042 0201 	orr.w	r2, r2, #1
 8004150:	611a      	str	r2, [r3, #16]
      hlptim->Instance->ARR = tmpARR;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	69ba      	ldr	r2, [r7, #24]
 8004158:	619a      	str	r2, [r3, #24]

      /* Wait for the completion of the write operation to the LPTIM_ARR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 800415a:	2110      	movs	r1, #16
 800415c:	6878      	ldr	r0, [r7, #4]
 800415e:	f7ff ff33 	bl	8003fc8 <LPTIM_WaitForFlag>
 8004162:	4603      	mov	r3, r0
 8004164:	2b03      	cmp	r3, #3
 8004166:	d103      	bne.n	8004170 <LPTIM_Disable+0x148>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2203      	movs	r2, #3
 800416c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
      }

      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	2210      	movs	r2, #16
 8004176:	605a      	str	r2, [r3, #4]
    }

    /* Restore LPTIM source kernel clock */
    switch ((uint32_t)hlptim->Instance)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a16      	ldr	r2, [pc, #88]	; (80041d8 <LPTIM_Disable+0x1b0>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d003      	beq.n	800418a <LPTIM_Disable+0x162>
 8004182:	4a16      	ldr	r2, [pc, #88]	; (80041dc <LPTIM_Disable+0x1b4>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d004      	beq.n	8004192 <LPTIM_Disable+0x16a>
      case LPTIM2_BASE:
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
        break;
#endif /* LPTIM2 */
      default:
        break;
 8004188:	e008      	b.n	800419c <LPTIM_Disable+0x174>
        __HAL_RCC_LPTIM1_CONFIG(tmpclksource);
 800418a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800418c:	f7ff fc9a 	bl	8003ac4 <LL_RCC_SetLPTIMClockSource>
        break;
 8004190:	e004      	b.n	800419c <LPTIM_Disable+0x174>
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
 8004192:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004194:	f7ff fc96 	bl	8003ac4 <LL_RCC_SetLPTIMClockSource>
        break;
 8004198:	e000      	b.n	800419c <LPTIM_Disable+0x174>
    }
  }
 800419a:	bf00      	nop

  /* Restore configuration registers (LPTIM should be disabled first) */
  hlptim->Instance->CR &= ~(LPTIM_CR_ENABLE);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	691a      	ldr	r2, [r3, #16]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f022 0201 	bic.w	r2, r2, #1
 80041aa:	611a      	str	r2, [r3, #16]
  hlptim->Instance->IER = tmpIER;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041b2:	609a      	str	r2, [r3, #8]
  hlptim->Instance->CFGR = tmpCFGR;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	6a3a      	ldr	r2, [r7, #32]
 80041ba:	60da      	str	r2, [r3, #12]
#if defined(LPTIM_OR_OR)
  hlptim->Instance->OR = tmpOR;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	697a      	ldr	r2, [r7, #20]
 80041c2:	621a      	str	r2, [r3, #32]
 80041c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041c6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	f383 8810 	msr	PRIMASK, r3
}
 80041ce:	bf00      	nop
#endif /* LPTIM_OR_OR */

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 80041d0:	bf00      	nop
 80041d2:	3730      	adds	r7, #48	; 0x30
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bd80      	pop	{r7, pc}
 80041d8:	40007c00 	.word	0x40007c00
 80041dc:	40009400 	.word	0x40009400

080041e0 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80041e0:	b480      	push	{r7}
 80041e2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80041e4:	4b05      	ldr	r3, [pc, #20]	; (80041fc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a04      	ldr	r2, [pc, #16]	; (80041fc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80041ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041ee:	6013      	str	r3, [r2, #0]
}
 80041f0:	bf00      	nop
 80041f2:	46bd      	mov	sp, r7
 80041f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f8:	4770      	bx	lr
 80041fa:	bf00      	nop
 80041fc:	58000400 	.word	0x58000400

08004200 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004200:	b480      	push	{r7}
 8004202:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8004204:	4b04      	ldr	r3, [pc, #16]	; (8004218 <HAL_PWREx_GetVoltageRange+0x18>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 800420c:	4618      	mov	r0, r3
 800420e:	46bd      	mov	sp, r7
 8004210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004214:	4770      	bx	lr
 8004216:	bf00      	nop
 8004218:	58000400 	.word	0x58000400

0800421c <LL_RCC_HSE_IsEnabledDiv2>:
{
 800421c:	b480      	push	{r7}
 800421e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8004220:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800422a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800422e:	d101      	bne.n	8004234 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8004230:	2301      	movs	r3, #1
 8004232:	e000      	b.n	8004236 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8004234:	2300      	movs	r3, #0
}
 8004236:	4618      	mov	r0, r3
 8004238:	46bd      	mov	sp, r7
 800423a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423e:	4770      	bx	lr

08004240 <LL_RCC_HSE_Enable>:
{
 8004240:	b480      	push	{r7}
 8004242:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8004244:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800424e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004252:	6013      	str	r3, [r2, #0]
}
 8004254:	bf00      	nop
 8004256:	46bd      	mov	sp, r7
 8004258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425c:	4770      	bx	lr

0800425e <LL_RCC_HSE_Disable>:
{
 800425e:	b480      	push	{r7}
 8004260:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8004262:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800426c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004270:	6013      	str	r3, [r2, #0]
}
 8004272:	bf00      	nop
 8004274:	46bd      	mov	sp, r7
 8004276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427a:	4770      	bx	lr

0800427c <LL_RCC_HSE_IsReady>:
{
 800427c:	b480      	push	{r7}
 800427e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8004280:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800428a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800428e:	d101      	bne.n	8004294 <LL_RCC_HSE_IsReady+0x18>
 8004290:	2301      	movs	r3, #1
 8004292:	e000      	b.n	8004296 <LL_RCC_HSE_IsReady+0x1a>
 8004294:	2300      	movs	r3, #0
}
 8004296:	4618      	mov	r0, r3
 8004298:	46bd      	mov	sp, r7
 800429a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429e:	4770      	bx	lr

080042a0 <LL_RCC_HSI_Enable>:
{
 80042a0:	b480      	push	{r7}
 80042a2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80042a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80042ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042b2:	6013      	str	r3, [r2, #0]
}
 80042b4:	bf00      	nop
 80042b6:	46bd      	mov	sp, r7
 80042b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042bc:	4770      	bx	lr

080042be <LL_RCC_HSI_Disable>:
{
 80042be:	b480      	push	{r7}
 80042c0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80042c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80042cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80042d0:	6013      	str	r3, [r2, #0]
}
 80042d2:	bf00      	nop
 80042d4:	46bd      	mov	sp, r7
 80042d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042da:	4770      	bx	lr

080042dc <LL_RCC_HSI_IsReady>:
{
 80042dc:	b480      	push	{r7}
 80042de:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80042e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042ee:	d101      	bne.n	80042f4 <LL_RCC_HSI_IsReady+0x18>
 80042f0:	2301      	movs	r3, #1
 80042f2:	e000      	b.n	80042f6 <LL_RCC_HSI_IsReady+0x1a>
 80042f4:	2300      	movs	r3, #0
}
 80042f6:	4618      	mov	r0, r3
 80042f8:	46bd      	mov	sp, r7
 80042fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fe:	4770      	bx	lr

08004300 <LL_RCC_HSI_SetCalibTrimming>:
{
 8004300:	b480      	push	{r7}
 8004302:	b083      	sub	sp, #12
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8004308:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	061b      	lsls	r3, r3, #24
 8004316:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800431a:	4313      	orrs	r3, r2
 800431c:	604b      	str	r3, [r1, #4]
}
 800431e:	bf00      	nop
 8004320:	370c      	adds	r7, #12
 8004322:	46bd      	mov	sp, r7
 8004324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004328:	4770      	bx	lr

0800432a <LL_RCC_HSI48_Enable>:
{
 800432a:	b480      	push	{r7}
 800432c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800432e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004332:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004336:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800433a:	f043 0301 	orr.w	r3, r3, #1
 800433e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8004342:	bf00      	nop
 8004344:	46bd      	mov	sp, r7
 8004346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434a:	4770      	bx	lr

0800434c <LL_RCC_HSI48_Disable>:
{
 800434c:	b480      	push	{r7}
 800434e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8004350:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004354:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004358:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800435c:	f023 0301 	bic.w	r3, r3, #1
 8004360:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8004364:	bf00      	nop
 8004366:	46bd      	mov	sp, r7
 8004368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436c:	4770      	bx	lr

0800436e <LL_RCC_HSI48_IsReady>:
{
 800436e:	b480      	push	{r7}
 8004370:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8004372:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004376:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800437a:	f003 0302 	and.w	r3, r3, #2
 800437e:	2b02      	cmp	r3, #2
 8004380:	d101      	bne.n	8004386 <LL_RCC_HSI48_IsReady+0x18>
 8004382:	2301      	movs	r3, #1
 8004384:	e000      	b.n	8004388 <LL_RCC_HSI48_IsReady+0x1a>
 8004386:	2300      	movs	r3, #0
}
 8004388:	4618      	mov	r0, r3
 800438a:	46bd      	mov	sp, r7
 800438c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004390:	4770      	bx	lr

08004392 <LL_RCC_LSE_Enable>:
{
 8004392:	b480      	push	{r7}
 8004394:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004396:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800439a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800439e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80043a2:	f043 0301 	orr.w	r3, r3, #1
 80043a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80043aa:	bf00      	nop
 80043ac:	46bd      	mov	sp, r7
 80043ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b2:	4770      	bx	lr

080043b4 <LL_RCC_LSE_Disable>:
{
 80043b4:	b480      	push	{r7}
 80043b6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80043b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80043c4:	f023 0301 	bic.w	r3, r3, #1
 80043c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80043cc:	bf00      	nop
 80043ce:	46bd      	mov	sp, r7
 80043d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d4:	4770      	bx	lr

080043d6 <LL_RCC_LSE_EnableBypass>:
{
 80043d6:	b480      	push	{r7}
 80043d8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80043da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043e2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80043e6:	f043 0304 	orr.w	r3, r3, #4
 80043ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80043ee:	bf00      	nop
 80043f0:	46bd      	mov	sp, r7
 80043f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f6:	4770      	bx	lr

080043f8 <LL_RCC_LSE_DisableBypass>:
{
 80043f8:	b480      	push	{r7}
 80043fa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80043fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004400:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004404:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004408:	f023 0304 	bic.w	r3, r3, #4
 800440c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004410:	bf00      	nop
 8004412:	46bd      	mov	sp, r7
 8004414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004418:	4770      	bx	lr

0800441a <LL_RCC_LSE_IsReady>:
{
 800441a:	b480      	push	{r7}
 800441c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800441e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004422:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004426:	f003 0302 	and.w	r3, r3, #2
 800442a:	2b02      	cmp	r3, #2
 800442c:	d101      	bne.n	8004432 <LL_RCC_LSE_IsReady+0x18>
 800442e:	2301      	movs	r3, #1
 8004430:	e000      	b.n	8004434 <LL_RCC_LSE_IsReady+0x1a>
 8004432:	2300      	movs	r3, #0
}
 8004434:	4618      	mov	r0, r3
 8004436:	46bd      	mov	sp, r7
 8004438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443c:	4770      	bx	lr

0800443e <LL_RCC_LSI1_Enable>:
{
 800443e:	b480      	push	{r7}
 8004440:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8004442:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004446:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800444a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800444e:	f043 0301 	orr.w	r3, r3, #1
 8004452:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004456:	bf00      	nop
 8004458:	46bd      	mov	sp, r7
 800445a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445e:	4770      	bx	lr

08004460 <LL_RCC_LSI1_Disable>:
{
 8004460:	b480      	push	{r7}
 8004462:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8004464:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004468:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800446c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004470:	f023 0301 	bic.w	r3, r3, #1
 8004474:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004478:	bf00      	nop
 800447a:	46bd      	mov	sp, r7
 800447c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004480:	4770      	bx	lr

08004482 <LL_RCC_LSI1_IsReady>:
{
 8004482:	b480      	push	{r7}
 8004484:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8004486:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800448a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800448e:	f003 0302 	and.w	r3, r3, #2
 8004492:	2b02      	cmp	r3, #2
 8004494:	d101      	bne.n	800449a <LL_RCC_LSI1_IsReady+0x18>
 8004496:	2301      	movs	r3, #1
 8004498:	e000      	b.n	800449c <LL_RCC_LSI1_IsReady+0x1a>
 800449a:	2300      	movs	r3, #0
}
 800449c:	4618      	mov	r0, r3
 800449e:	46bd      	mov	sp, r7
 80044a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a4:	4770      	bx	lr

080044a6 <LL_RCC_LSI2_Enable>:
{
 80044a6:	b480      	push	{r7}
 80044a8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80044aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044b2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80044b6:	f043 0304 	orr.w	r3, r3, #4
 80044ba:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80044be:	bf00      	nop
 80044c0:	46bd      	mov	sp, r7
 80044c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c6:	4770      	bx	lr

080044c8 <LL_RCC_LSI2_Disable>:
{
 80044c8:	b480      	push	{r7}
 80044ca:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80044cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044d4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80044d8:	f023 0304 	bic.w	r3, r3, #4
 80044dc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80044e0:	bf00      	nop
 80044e2:	46bd      	mov	sp, r7
 80044e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e8:	4770      	bx	lr

080044ea <LL_RCC_LSI2_IsReady>:
{
 80044ea:	b480      	push	{r7}
 80044ec:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 80044ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044f6:	f003 0308 	and.w	r3, r3, #8
 80044fa:	2b08      	cmp	r3, #8
 80044fc:	d101      	bne.n	8004502 <LL_RCC_LSI2_IsReady+0x18>
 80044fe:	2301      	movs	r3, #1
 8004500:	e000      	b.n	8004504 <LL_RCC_LSI2_IsReady+0x1a>
 8004502:	2300      	movs	r3, #0
}
 8004504:	4618      	mov	r0, r3
 8004506:	46bd      	mov	sp, r7
 8004508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450c:	4770      	bx	lr

0800450e <LL_RCC_LSI2_SetTrimming>:
{
 800450e:	b480      	push	{r7}
 8004510:	b083      	sub	sp, #12
 8004512:	af00      	add	r7, sp, #0
 8004514:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8004516:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800451a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800451e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	021b      	lsls	r3, r3, #8
 8004526:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800452a:	4313      	orrs	r3, r2
 800452c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8004530:	bf00      	nop
 8004532:	370c      	adds	r7, #12
 8004534:	46bd      	mov	sp, r7
 8004536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453a:	4770      	bx	lr

0800453c <LL_RCC_MSI_Enable>:
{
 800453c:	b480      	push	{r7}
 800453e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8004540:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800454a:	f043 0301 	orr.w	r3, r3, #1
 800454e:	6013      	str	r3, [r2, #0]
}
 8004550:	bf00      	nop
 8004552:	46bd      	mov	sp, r7
 8004554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004558:	4770      	bx	lr

0800455a <LL_RCC_MSI_Disable>:
{
 800455a:	b480      	push	{r7}
 800455c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800455e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004568:	f023 0301 	bic.w	r3, r3, #1
 800456c:	6013      	str	r3, [r2, #0]
}
 800456e:	bf00      	nop
 8004570:	46bd      	mov	sp, r7
 8004572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004576:	4770      	bx	lr

08004578 <LL_RCC_MSI_IsReady>:
{
 8004578:	b480      	push	{r7}
 800457a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800457c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f003 0302 	and.w	r3, r3, #2
 8004586:	2b02      	cmp	r3, #2
 8004588:	d101      	bne.n	800458e <LL_RCC_MSI_IsReady+0x16>
 800458a:	2301      	movs	r3, #1
 800458c:	e000      	b.n	8004590 <LL_RCC_MSI_IsReady+0x18>
 800458e:	2300      	movs	r3, #0
}
 8004590:	4618      	mov	r0, r3
 8004592:	46bd      	mov	sp, r7
 8004594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004598:	4770      	bx	lr

0800459a <LL_RCC_MSI_SetRange>:
{
 800459a:	b480      	push	{r7}
 800459c:	b083      	sub	sp, #12
 800459e:	af00      	add	r7, sp, #0
 80045a0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80045a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045ac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	4313      	orrs	r3, r2
 80045b4:	600b      	str	r3, [r1, #0]
}
 80045b6:	bf00      	nop
 80045b8:	370c      	adds	r7, #12
 80045ba:	46bd      	mov	sp, r7
 80045bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c0:	4770      	bx	lr

080045c2 <LL_RCC_MSI_GetRange>:
{
 80045c2:	b480      	push	{r7}
 80045c4:	b083      	sub	sp, #12
 80045c6:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 80045c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80045d2:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2bb0      	cmp	r3, #176	; 0xb0
 80045d8:	d901      	bls.n	80045de <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 80045da:	23b0      	movs	r3, #176	; 0xb0
 80045dc:	607b      	str	r3, [r7, #4]
  return msiRange;
 80045de:	687b      	ldr	r3, [r7, #4]
}
 80045e0:	4618      	mov	r0, r3
 80045e2:	370c      	adds	r7, #12
 80045e4:	46bd      	mov	sp, r7
 80045e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ea:	4770      	bx	lr

080045ec <LL_RCC_MSI_SetCalibTrimming>:
{
 80045ec:	b480      	push	{r7}
 80045ee:	b083      	sub	sp, #12
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80045f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	021b      	lsls	r3, r3, #8
 8004602:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004606:	4313      	orrs	r3, r2
 8004608:	604b      	str	r3, [r1, #4]
}
 800460a:	bf00      	nop
 800460c:	370c      	adds	r7, #12
 800460e:	46bd      	mov	sp, r7
 8004610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004614:	4770      	bx	lr

08004616 <LL_RCC_SetSysClkSource>:
{
 8004616:	b480      	push	{r7}
 8004618:	b083      	sub	sp, #12
 800461a:	af00      	add	r7, sp, #0
 800461c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800461e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004622:	689b      	ldr	r3, [r3, #8]
 8004624:	f023 0203 	bic.w	r2, r3, #3
 8004628:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	4313      	orrs	r3, r2
 8004630:	608b      	str	r3, [r1, #8]
}
 8004632:	bf00      	nop
 8004634:	370c      	adds	r7, #12
 8004636:	46bd      	mov	sp, r7
 8004638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463c:	4770      	bx	lr

0800463e <LL_RCC_GetSysClkSource>:
{
 800463e:	b480      	push	{r7}
 8004640:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004642:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004646:	689b      	ldr	r3, [r3, #8]
 8004648:	f003 030c 	and.w	r3, r3, #12
}
 800464c:	4618      	mov	r0, r3
 800464e:	46bd      	mov	sp, r7
 8004650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004654:	4770      	bx	lr

08004656 <LL_RCC_SetAHBPrescaler>:
{
 8004656:	b480      	push	{r7}
 8004658:	b083      	sub	sp, #12
 800465a:	af00      	add	r7, sp, #0
 800465c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800465e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004662:	689b      	ldr	r3, [r3, #8]
 8004664:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004668:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	4313      	orrs	r3, r2
 8004670:	608b      	str	r3, [r1, #8]
}
 8004672:	bf00      	nop
 8004674:	370c      	adds	r7, #12
 8004676:	46bd      	mov	sp, r7
 8004678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467c:	4770      	bx	lr

0800467e <LL_C2_RCC_SetAHBPrescaler>:
{
 800467e:	b480      	push	{r7}
 8004680:	b083      	sub	sp, #12
 8004682:	af00      	add	r7, sp, #0
 8004684:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8004686:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800468a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800468e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004692:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	4313      	orrs	r3, r2
 800469a:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800469e:	bf00      	nop
 80046a0:	370c      	adds	r7, #12
 80046a2:	46bd      	mov	sp, r7
 80046a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a8:	4770      	bx	lr

080046aa <LL_RCC_SetAHB4Prescaler>:
{
 80046aa:	b480      	push	{r7}
 80046ac:	b083      	sub	sp, #12
 80046ae:	af00      	add	r7, sp, #0
 80046b0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80046b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046b6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80046ba:	f023 020f 	bic.w	r2, r3, #15
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	091b      	lsrs	r3, r3, #4
 80046c2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80046c6:	4313      	orrs	r3, r2
 80046c8:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80046cc:	bf00      	nop
 80046ce:	370c      	adds	r7, #12
 80046d0:	46bd      	mov	sp, r7
 80046d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d6:	4770      	bx	lr

080046d8 <LL_RCC_SetAPB1Prescaler>:
{
 80046d8:	b480      	push	{r7}
 80046da:	b083      	sub	sp, #12
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80046e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046e4:	689b      	ldr	r3, [r3, #8]
 80046e6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80046ea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	4313      	orrs	r3, r2
 80046f2:	608b      	str	r3, [r1, #8]
}
 80046f4:	bf00      	nop
 80046f6:	370c      	adds	r7, #12
 80046f8:	46bd      	mov	sp, r7
 80046fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fe:	4770      	bx	lr

08004700 <LL_RCC_SetAPB2Prescaler>:
{
 8004700:	b480      	push	{r7}
 8004702:	b083      	sub	sp, #12
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8004708:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800470c:	689b      	ldr	r3, [r3, #8]
 800470e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004712:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	4313      	orrs	r3, r2
 800471a:	608b      	str	r3, [r1, #8]
}
 800471c:	bf00      	nop
 800471e:	370c      	adds	r7, #12
 8004720:	46bd      	mov	sp, r7
 8004722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004726:	4770      	bx	lr

08004728 <LL_RCC_GetAHBPrescaler>:
{
 8004728:	b480      	push	{r7}
 800472a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800472c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004730:	689b      	ldr	r3, [r3, #8]
 8004732:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004736:	4618      	mov	r0, r3
 8004738:	46bd      	mov	sp, r7
 800473a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473e:	4770      	bx	lr

08004740 <LL_RCC_GetAHB4Prescaler>:
{
 8004740:	b480      	push	{r7}
 8004742:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8004744:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004748:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800474c:	011b      	lsls	r3, r3, #4
 800474e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004752:	4618      	mov	r0, r3
 8004754:	46bd      	mov	sp, r7
 8004756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475a:	4770      	bx	lr

0800475c <LL_RCC_GetAPB1Prescaler>:
{
 800475c:	b480      	push	{r7}
 800475e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8004760:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004764:	689b      	ldr	r3, [r3, #8]
 8004766:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 800476a:	4618      	mov	r0, r3
 800476c:	46bd      	mov	sp, r7
 800476e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004772:	4770      	bx	lr

08004774 <LL_RCC_GetAPB2Prescaler>:
{
 8004774:	b480      	push	{r7}
 8004776:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8004778:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800477c:	689b      	ldr	r3, [r3, #8]
 800477e:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8004782:	4618      	mov	r0, r3
 8004784:	46bd      	mov	sp, r7
 8004786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478a:	4770      	bx	lr

0800478c <LL_RCC_PLL_Enable>:
{
 800478c:	b480      	push	{r7}
 800478e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8004790:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800479a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800479e:	6013      	str	r3, [r2, #0]
}
 80047a0:	bf00      	nop
 80047a2:	46bd      	mov	sp, r7
 80047a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a8:	4770      	bx	lr

080047aa <LL_RCC_PLL_Disable>:
{
 80047aa:	b480      	push	{r7}
 80047ac:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80047ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80047b8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80047bc:	6013      	str	r3, [r2, #0]
}
 80047be:	bf00      	nop
 80047c0:	46bd      	mov	sp, r7
 80047c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c6:	4770      	bx	lr

080047c8 <LL_RCC_PLL_IsReady>:
{
 80047c8:	b480      	push	{r7}
 80047ca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80047cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047d6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80047da:	d101      	bne.n	80047e0 <LL_RCC_PLL_IsReady+0x18>
 80047dc:	2301      	movs	r3, #1
 80047de:	e000      	b.n	80047e2 <LL_RCC_PLL_IsReady+0x1a>
 80047e0:	2300      	movs	r3, #0
}
 80047e2:	4618      	mov	r0, r3
 80047e4:	46bd      	mov	sp, r7
 80047e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ea:	4770      	bx	lr

080047ec <LL_RCC_PLL_GetN>:
{
 80047ec:	b480      	push	{r7}
 80047ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80047f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047f4:	68db      	ldr	r3, [r3, #12]
 80047f6:	0a1b      	lsrs	r3, r3, #8
 80047f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80047fc:	4618      	mov	r0, r3
 80047fe:	46bd      	mov	sp, r7
 8004800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004804:	4770      	bx	lr

08004806 <LL_RCC_PLL_GetR>:
{
 8004806:	b480      	push	{r7}
 8004808:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800480a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800480e:	68db      	ldr	r3, [r3, #12]
 8004810:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8004814:	4618      	mov	r0, r3
 8004816:	46bd      	mov	sp, r7
 8004818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481c:	4770      	bx	lr

0800481e <LL_RCC_PLL_GetDivider>:
{
 800481e:	b480      	push	{r7}
 8004820:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8004822:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004826:	68db      	ldr	r3, [r3, #12]
 8004828:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 800482c:	4618      	mov	r0, r3
 800482e:	46bd      	mov	sp, r7
 8004830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004834:	4770      	bx	lr

08004836 <LL_RCC_PLL_GetMainSource>:
{
 8004836:	b480      	push	{r7}
 8004838:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800483a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800483e:	68db      	ldr	r3, [r3, #12]
 8004840:	f003 0303 	and.w	r3, r3, #3
}
 8004844:	4618      	mov	r0, r3
 8004846:	46bd      	mov	sp, r7
 8004848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484c:	4770      	bx	lr

0800484e <LL_RCC_IsActiveFlag_HPRE>:
{
 800484e:	b480      	push	{r7}
 8004850:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8004852:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004856:	689b      	ldr	r3, [r3, #8]
 8004858:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800485c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004860:	d101      	bne.n	8004866 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8004862:	2301      	movs	r3, #1
 8004864:	e000      	b.n	8004868 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8004866:	2300      	movs	r3, #0
}
 8004868:	4618      	mov	r0, r3
 800486a:	46bd      	mov	sp, r7
 800486c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004870:	4770      	bx	lr

08004872 <LL_RCC_IsActiveFlag_C2HPRE>:
{
 8004872:	b480      	push	{r7}
 8004874:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8004876:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800487a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800487e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004882:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004886:	d101      	bne.n	800488c <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8004888:	2301      	movs	r3, #1
 800488a:	e000      	b.n	800488e <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 800488c:	2300      	movs	r3, #0
}
 800488e:	4618      	mov	r0, r3
 8004890:	46bd      	mov	sp, r7
 8004892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004896:	4770      	bx	lr

08004898 <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 8004898:	b480      	push	{r7}
 800489a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800489c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048a0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80048a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048ac:	d101      	bne.n	80048b2 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80048ae:	2301      	movs	r3, #1
 80048b0:	e000      	b.n	80048b4 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80048b2:	2300      	movs	r3, #0
}
 80048b4:	4618      	mov	r0, r3
 80048b6:	46bd      	mov	sp, r7
 80048b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048bc:	4770      	bx	lr

080048be <LL_RCC_IsActiveFlag_PPRE1>:
{
 80048be:	b480      	push	{r7}
 80048c0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80048c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048cc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80048d0:	d101      	bne.n	80048d6 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80048d2:	2301      	movs	r3, #1
 80048d4:	e000      	b.n	80048d8 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80048d6:	2300      	movs	r3, #0
}
 80048d8:	4618      	mov	r0, r3
 80048da:	46bd      	mov	sp, r7
 80048dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e0:	4770      	bx	lr

080048e2 <LL_RCC_IsActiveFlag_PPRE2>:
{
 80048e2:	b480      	push	{r7}
 80048e4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80048e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048ea:	689b      	ldr	r3, [r3, #8]
 80048ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80048f0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80048f4:	d101      	bne.n	80048fa <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80048f6:	2301      	movs	r3, #1
 80048f8:	e000      	b.n	80048fc <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80048fa:	2300      	movs	r3, #0
}
 80048fc:	4618      	mov	r0, r3
 80048fe:	46bd      	mov	sp, r7
 8004900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004904:	4770      	bx	lr
	...

08004908 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004908:	b590      	push	{r4, r7, lr}
 800490a:	b08d      	sub	sp, #52	; 0x34
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d101      	bne.n	800491a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004916:	2301      	movs	r3, #1
 8004918:	e363      	b.n	8004fe2 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f003 0320 	and.w	r3, r3, #32
 8004922:	2b00      	cmp	r3, #0
 8004924:	f000 808d 	beq.w	8004a42 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004928:	f7ff fe89 	bl	800463e <LL_RCC_GetSysClkSource>
 800492c:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800492e:	f7ff ff82 	bl	8004836 <LL_RCC_PLL_GetMainSource>
 8004932:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004936:	2b00      	cmp	r3, #0
 8004938:	d005      	beq.n	8004946 <HAL_RCC_OscConfig+0x3e>
 800493a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800493c:	2b0c      	cmp	r3, #12
 800493e:	d147      	bne.n	80049d0 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8004940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004942:	2b01      	cmp	r3, #1
 8004944:	d144      	bne.n	80049d0 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	69db      	ldr	r3, [r3, #28]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d101      	bne.n	8004952 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800494e:	2301      	movs	r3, #1
 8004950:	e347      	b.n	8004fe2 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8004956:	f7ff fe34 	bl	80045c2 <LL_RCC_MSI_GetRange>
 800495a:	4603      	mov	r3, r0
 800495c:	429c      	cmp	r4, r3
 800495e:	d914      	bls.n	800498a <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004964:	4618      	mov	r0, r3
 8004966:	f000 fd2f 	bl	80053c8 <RCC_SetFlashLatencyFromMSIRange>
 800496a:	4603      	mov	r3, r0
 800496c:	2b00      	cmp	r3, #0
 800496e:	d001      	beq.n	8004974 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8004970:	2301      	movs	r3, #1
 8004972:	e336      	b.n	8004fe2 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004978:	4618      	mov	r0, r3
 800497a:	f7ff fe0e 	bl	800459a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6a1b      	ldr	r3, [r3, #32]
 8004982:	4618      	mov	r0, r3
 8004984:	f7ff fe32 	bl	80045ec <LL_RCC_MSI_SetCalibTrimming>
 8004988:	e013      	b.n	80049b2 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800498e:	4618      	mov	r0, r3
 8004990:	f7ff fe03 	bl	800459a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6a1b      	ldr	r3, [r3, #32]
 8004998:	4618      	mov	r0, r3
 800499a:	f7ff fe27 	bl	80045ec <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a2:	4618      	mov	r0, r3
 80049a4:	f000 fd10 	bl	80053c8 <RCC_SetFlashLatencyFromMSIRange>
 80049a8:	4603      	mov	r3, r0
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d001      	beq.n	80049b2 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	e317      	b.n	8004fe2 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80049b2:	f000 fcc9 	bl	8005348 <HAL_RCC_GetHCLKFreq>
 80049b6:	4603      	mov	r3, r0
 80049b8:	4aa4      	ldr	r2, [pc, #656]	; (8004c4c <HAL_RCC_OscConfig+0x344>)
 80049ba:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80049bc:	4ba4      	ldr	r3, [pc, #656]	; (8004c50 <HAL_RCC_OscConfig+0x348>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4618      	mov	r0, r3
 80049c2:	f7fd fe19 	bl	80025f8 <HAL_InitTick>
 80049c6:	4603      	mov	r3, r0
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d039      	beq.n	8004a40 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 80049cc:	2301      	movs	r3, #1
 80049ce:	e308      	b.n	8004fe2 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	69db      	ldr	r3, [r3, #28]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d01e      	beq.n	8004a16 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80049d8:	f7ff fdb0 	bl	800453c <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80049dc:	f7fd fe5a 	bl	8002694 <HAL_GetTick>
 80049e0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80049e2:	e008      	b.n	80049f6 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80049e4:	f7fd fe56 	bl	8002694 <HAL_GetTick>
 80049e8:	4602      	mov	r2, r0
 80049ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ec:	1ad3      	subs	r3, r2, r3
 80049ee:	2b02      	cmp	r3, #2
 80049f0:	d901      	bls.n	80049f6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80049f2:	2303      	movs	r3, #3
 80049f4:	e2f5      	b.n	8004fe2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 80049f6:	f7ff fdbf 	bl	8004578 <LL_RCC_MSI_IsReady>
 80049fa:	4603      	mov	r3, r0
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d0f1      	beq.n	80049e4 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a04:	4618      	mov	r0, r3
 8004a06:	f7ff fdc8 	bl	800459a <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6a1b      	ldr	r3, [r3, #32]
 8004a0e:	4618      	mov	r0, r3
 8004a10:	f7ff fdec 	bl	80045ec <LL_RCC_MSI_SetCalibTrimming>
 8004a14:	e015      	b.n	8004a42 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004a16:	f7ff fda0 	bl	800455a <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004a1a:	f7fd fe3b 	bl	8002694 <HAL_GetTick>
 8004a1e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8004a20:	e008      	b.n	8004a34 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004a22:	f7fd fe37 	bl	8002694 <HAL_GetTick>
 8004a26:	4602      	mov	r2, r0
 8004a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a2a:	1ad3      	subs	r3, r2, r3
 8004a2c:	2b02      	cmp	r3, #2
 8004a2e:	d901      	bls.n	8004a34 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004a30:	2303      	movs	r3, #3
 8004a32:	e2d6      	b.n	8004fe2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8004a34:	f7ff fda0 	bl	8004578 <LL_RCC_MSI_IsReady>
 8004a38:	4603      	mov	r3, r0
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d1f1      	bne.n	8004a22 <HAL_RCC_OscConfig+0x11a>
 8004a3e:	e000      	b.n	8004a42 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004a40:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f003 0301 	and.w	r3, r3, #1
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d047      	beq.n	8004ade <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a4e:	f7ff fdf6 	bl	800463e <LL_RCC_GetSysClkSource>
 8004a52:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004a54:	f7ff feef 	bl	8004836 <LL_RCC_PLL_GetMainSource>
 8004a58:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004a5a:	6a3b      	ldr	r3, [r7, #32]
 8004a5c:	2b08      	cmp	r3, #8
 8004a5e:	d005      	beq.n	8004a6c <HAL_RCC_OscConfig+0x164>
 8004a60:	6a3b      	ldr	r3, [r7, #32]
 8004a62:	2b0c      	cmp	r3, #12
 8004a64:	d108      	bne.n	8004a78 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8004a66:	69fb      	ldr	r3, [r7, #28]
 8004a68:	2b03      	cmp	r3, #3
 8004a6a:	d105      	bne.n	8004a78 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d134      	bne.n	8004ade <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8004a74:	2301      	movs	r3, #1
 8004a76:	e2b4      	b.n	8004fe2 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a80:	d102      	bne.n	8004a88 <HAL_RCC_OscConfig+0x180>
 8004a82:	f7ff fbdd 	bl	8004240 <LL_RCC_HSE_Enable>
 8004a86:	e001      	b.n	8004a8c <HAL_RCC_OscConfig+0x184>
 8004a88:	f7ff fbe9 	bl	800425e <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d012      	beq.n	8004aba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a94:	f7fd fdfe 	bl	8002694 <HAL_GetTick>
 8004a98:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8004a9a:	e008      	b.n	8004aae <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a9c:	f7fd fdfa 	bl	8002694 <HAL_GetTick>
 8004aa0:	4602      	mov	r2, r0
 8004aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa4:	1ad3      	subs	r3, r2, r3
 8004aa6:	2b64      	cmp	r3, #100	; 0x64
 8004aa8:	d901      	bls.n	8004aae <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8004aaa:	2303      	movs	r3, #3
 8004aac:	e299      	b.n	8004fe2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8004aae:	f7ff fbe5 	bl	800427c <LL_RCC_HSE_IsReady>
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d0f1      	beq.n	8004a9c <HAL_RCC_OscConfig+0x194>
 8004ab8:	e011      	b.n	8004ade <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004aba:	f7fd fdeb 	bl	8002694 <HAL_GetTick>
 8004abe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8004ac0:	e008      	b.n	8004ad4 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ac2:	f7fd fde7 	bl	8002694 <HAL_GetTick>
 8004ac6:	4602      	mov	r2, r0
 8004ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aca:	1ad3      	subs	r3, r2, r3
 8004acc:	2b64      	cmp	r3, #100	; 0x64
 8004ace:	d901      	bls.n	8004ad4 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8004ad0:	2303      	movs	r3, #3
 8004ad2:	e286      	b.n	8004fe2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8004ad4:	f7ff fbd2 	bl	800427c <LL_RCC_HSE_IsReady>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d1f1      	bne.n	8004ac2 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f003 0302 	and.w	r3, r3, #2
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d04c      	beq.n	8004b84 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004aea:	f7ff fda8 	bl	800463e <LL_RCC_GetSysClkSource>
 8004aee:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004af0:	f7ff fea1 	bl	8004836 <LL_RCC_PLL_GetMainSource>
 8004af4:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8004af6:	69bb      	ldr	r3, [r7, #24]
 8004af8:	2b04      	cmp	r3, #4
 8004afa:	d005      	beq.n	8004b08 <HAL_RCC_OscConfig+0x200>
 8004afc:	69bb      	ldr	r3, [r7, #24]
 8004afe:	2b0c      	cmp	r3, #12
 8004b00:	d10e      	bne.n	8004b20 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8004b02:	697b      	ldr	r3, [r7, #20]
 8004b04:	2b02      	cmp	r3, #2
 8004b06:	d10b      	bne.n	8004b20 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	68db      	ldr	r3, [r3, #12]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d101      	bne.n	8004b14 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8004b10:	2301      	movs	r3, #1
 8004b12:	e266      	b.n	8004fe2 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	691b      	ldr	r3, [r3, #16]
 8004b18:	4618      	mov	r0, r3
 8004b1a:	f7ff fbf1 	bl	8004300 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004b1e:	e031      	b.n	8004b84 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	68db      	ldr	r3, [r3, #12]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d019      	beq.n	8004b5c <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b28:	f7ff fbba 	bl	80042a0 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b2c:	f7fd fdb2 	bl	8002694 <HAL_GetTick>
 8004b30:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8004b32:	e008      	b.n	8004b46 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b34:	f7fd fdae 	bl	8002694 <HAL_GetTick>
 8004b38:	4602      	mov	r2, r0
 8004b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b3c:	1ad3      	subs	r3, r2, r3
 8004b3e:	2b02      	cmp	r3, #2
 8004b40:	d901      	bls.n	8004b46 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8004b42:	2303      	movs	r3, #3
 8004b44:	e24d      	b.n	8004fe2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8004b46:	f7ff fbc9 	bl	80042dc <LL_RCC_HSI_IsReady>
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d0f1      	beq.n	8004b34 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	691b      	ldr	r3, [r3, #16]
 8004b54:	4618      	mov	r0, r3
 8004b56:	f7ff fbd3 	bl	8004300 <LL_RCC_HSI_SetCalibTrimming>
 8004b5a:	e013      	b.n	8004b84 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b5c:	f7ff fbaf 	bl	80042be <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b60:	f7fd fd98 	bl	8002694 <HAL_GetTick>
 8004b64:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8004b66:	e008      	b.n	8004b7a <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b68:	f7fd fd94 	bl	8002694 <HAL_GetTick>
 8004b6c:	4602      	mov	r2, r0
 8004b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b70:	1ad3      	subs	r3, r2, r3
 8004b72:	2b02      	cmp	r3, #2
 8004b74:	d901      	bls.n	8004b7a <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8004b76:	2303      	movs	r3, #3
 8004b78:	e233      	b.n	8004fe2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8004b7a:	f7ff fbaf 	bl	80042dc <LL_RCC_HSI_IsReady>
 8004b7e:	4603      	mov	r3, r0
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d1f1      	bne.n	8004b68 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f003 0308 	and.w	r3, r3, #8
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d106      	bne.n	8004b9e <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	f000 80a3 	beq.w	8004ce4 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	695b      	ldr	r3, [r3, #20]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d076      	beq.n	8004c94 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f003 0310 	and.w	r3, r3, #16
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d046      	beq.n	8004c40 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8004bb2:	f7ff fc66 	bl	8004482 <LL_RCC_LSI1_IsReady>
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d113      	bne.n	8004be4 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8004bbc:	f7ff fc3f 	bl	800443e <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004bc0:	f7fd fd68 	bl	8002694 <HAL_GetTick>
 8004bc4:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8004bc6:	e008      	b.n	8004bda <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004bc8:	f7fd fd64 	bl	8002694 <HAL_GetTick>
 8004bcc:	4602      	mov	r2, r0
 8004bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd0:	1ad3      	subs	r3, r2, r3
 8004bd2:	2b02      	cmp	r3, #2
 8004bd4:	d901      	bls.n	8004bda <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8004bd6:	2303      	movs	r3, #3
 8004bd8:	e203      	b.n	8004fe2 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8004bda:	f7ff fc52 	bl	8004482 <LL_RCC_LSI1_IsReady>
 8004bde:	4603      	mov	r3, r0
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d0f1      	beq.n	8004bc8 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8004be4:	f7ff fc5f 	bl	80044a6 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004be8:	f7fd fd54 	bl	8002694 <HAL_GetTick>
 8004bec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8004bee:	e008      	b.n	8004c02 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004bf0:	f7fd fd50 	bl	8002694 <HAL_GetTick>
 8004bf4:	4602      	mov	r2, r0
 8004bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf8:	1ad3      	subs	r3, r2, r3
 8004bfa:	2b03      	cmp	r3, #3
 8004bfc:	d901      	bls.n	8004c02 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8004bfe:	2303      	movs	r3, #3
 8004c00:	e1ef      	b.n	8004fe2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8004c02:	f7ff fc72 	bl	80044ea <LL_RCC_LSI2_IsReady>
 8004c06:	4603      	mov	r3, r0
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d0f1      	beq.n	8004bf0 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	699b      	ldr	r3, [r3, #24]
 8004c10:	4618      	mov	r0, r3
 8004c12:	f7ff fc7c 	bl	800450e <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8004c16:	f7ff fc23 	bl	8004460 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c1a:	f7fd fd3b 	bl	8002694 <HAL_GetTick>
 8004c1e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8004c20:	e008      	b.n	8004c34 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004c22:	f7fd fd37 	bl	8002694 <HAL_GetTick>
 8004c26:	4602      	mov	r2, r0
 8004c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c2a:	1ad3      	subs	r3, r2, r3
 8004c2c:	2b02      	cmp	r3, #2
 8004c2e:	d901      	bls.n	8004c34 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8004c30:	2303      	movs	r3, #3
 8004c32:	e1d6      	b.n	8004fe2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8004c34:	f7ff fc25 	bl	8004482 <LL_RCC_LSI1_IsReady>
 8004c38:	4603      	mov	r3, r0
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d1f1      	bne.n	8004c22 <HAL_RCC_OscConfig+0x31a>
 8004c3e:	e051      	b.n	8004ce4 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8004c40:	f7ff fbfd 	bl	800443e <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c44:	f7fd fd26 	bl	8002694 <HAL_GetTick>
 8004c48:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8004c4a:	e00c      	b.n	8004c66 <HAL_RCC_OscConfig+0x35e>
 8004c4c:	20000008 	.word	0x20000008
 8004c50:	2000000c 	.word	0x2000000c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004c54:	f7fd fd1e 	bl	8002694 <HAL_GetTick>
 8004c58:	4602      	mov	r2, r0
 8004c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c5c:	1ad3      	subs	r3, r2, r3
 8004c5e:	2b02      	cmp	r3, #2
 8004c60:	d901      	bls.n	8004c66 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8004c62:	2303      	movs	r3, #3
 8004c64:	e1bd      	b.n	8004fe2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8004c66:	f7ff fc0c 	bl	8004482 <LL_RCC_LSI1_IsReady>
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d0f1      	beq.n	8004c54 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8004c70:	f7ff fc2a 	bl	80044c8 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8004c74:	e008      	b.n	8004c88 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004c76:	f7fd fd0d 	bl	8002694 <HAL_GetTick>
 8004c7a:	4602      	mov	r2, r0
 8004c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c7e:	1ad3      	subs	r3, r2, r3
 8004c80:	2b03      	cmp	r3, #3
 8004c82:	d901      	bls.n	8004c88 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8004c84:	2303      	movs	r3, #3
 8004c86:	e1ac      	b.n	8004fe2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8004c88:	f7ff fc2f 	bl	80044ea <LL_RCC_LSI2_IsReady>
 8004c8c:	4603      	mov	r3, r0
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d1f1      	bne.n	8004c76 <HAL_RCC_OscConfig+0x36e>
 8004c92:	e027      	b.n	8004ce4 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8004c94:	f7ff fc18 	bl	80044c8 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c98:	f7fd fcfc 	bl	8002694 <HAL_GetTick>
 8004c9c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8004c9e:	e008      	b.n	8004cb2 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004ca0:	f7fd fcf8 	bl	8002694 <HAL_GetTick>
 8004ca4:	4602      	mov	r2, r0
 8004ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca8:	1ad3      	subs	r3, r2, r3
 8004caa:	2b03      	cmp	r3, #3
 8004cac:	d901      	bls.n	8004cb2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004cae:	2303      	movs	r3, #3
 8004cb0:	e197      	b.n	8004fe2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8004cb2:	f7ff fc1a 	bl	80044ea <LL_RCC_LSI2_IsReady>
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d1f1      	bne.n	8004ca0 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8004cbc:	f7ff fbd0 	bl	8004460 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cc0:	f7fd fce8 	bl	8002694 <HAL_GetTick>
 8004cc4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8004cc6:	e008      	b.n	8004cda <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004cc8:	f7fd fce4 	bl	8002694 <HAL_GetTick>
 8004ccc:	4602      	mov	r2, r0
 8004cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd0:	1ad3      	subs	r3, r2, r3
 8004cd2:	2b02      	cmp	r3, #2
 8004cd4:	d901      	bls.n	8004cda <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8004cd6:	2303      	movs	r3, #3
 8004cd8:	e183      	b.n	8004fe2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8004cda:	f7ff fbd2 	bl	8004482 <LL_RCC_LSI1_IsReady>
 8004cde:	4603      	mov	r3, r0
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d1f1      	bne.n	8004cc8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f003 0304 	and.w	r3, r3, #4
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d05b      	beq.n	8004da8 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004cf0:	4ba7      	ldr	r3, [pc, #668]	; (8004f90 <HAL_RCC_OscConfig+0x688>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d114      	bne.n	8004d26 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8004cfc:	f7ff fa70 	bl	80041e0 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d00:	f7fd fcc8 	bl	8002694 <HAL_GetTick>
 8004d04:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d06:	e008      	b.n	8004d1a <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d08:	f7fd fcc4 	bl	8002694 <HAL_GetTick>
 8004d0c:	4602      	mov	r2, r0
 8004d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d10:	1ad3      	subs	r3, r2, r3
 8004d12:	2b02      	cmp	r3, #2
 8004d14:	d901      	bls.n	8004d1a <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8004d16:	2303      	movs	r3, #3
 8004d18:	e163      	b.n	8004fe2 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d1a:	4b9d      	ldr	r3, [pc, #628]	; (8004f90 <HAL_RCC_OscConfig+0x688>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d0f0      	beq.n	8004d08 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	689b      	ldr	r3, [r3, #8]
 8004d2a:	2b01      	cmp	r3, #1
 8004d2c:	d102      	bne.n	8004d34 <HAL_RCC_OscConfig+0x42c>
 8004d2e:	f7ff fb30 	bl	8004392 <LL_RCC_LSE_Enable>
 8004d32:	e00c      	b.n	8004d4e <HAL_RCC_OscConfig+0x446>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	689b      	ldr	r3, [r3, #8]
 8004d38:	2b05      	cmp	r3, #5
 8004d3a:	d104      	bne.n	8004d46 <HAL_RCC_OscConfig+0x43e>
 8004d3c:	f7ff fb4b 	bl	80043d6 <LL_RCC_LSE_EnableBypass>
 8004d40:	f7ff fb27 	bl	8004392 <LL_RCC_LSE_Enable>
 8004d44:	e003      	b.n	8004d4e <HAL_RCC_OscConfig+0x446>
 8004d46:	f7ff fb35 	bl	80043b4 <LL_RCC_LSE_Disable>
 8004d4a:	f7ff fb55 	bl	80043f8 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	689b      	ldr	r3, [r3, #8]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d014      	beq.n	8004d80 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d56:	f7fd fc9d 	bl	8002694 <HAL_GetTick>
 8004d5a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8004d5c:	e00a      	b.n	8004d74 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d5e:	f7fd fc99 	bl	8002694 <HAL_GetTick>
 8004d62:	4602      	mov	r2, r0
 8004d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d66:	1ad3      	subs	r3, r2, r3
 8004d68:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d901      	bls.n	8004d74 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8004d70:	2303      	movs	r3, #3
 8004d72:	e136      	b.n	8004fe2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8004d74:	f7ff fb51 	bl	800441a <LL_RCC_LSE_IsReady>
 8004d78:	4603      	mov	r3, r0
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d0ef      	beq.n	8004d5e <HAL_RCC_OscConfig+0x456>
 8004d7e:	e013      	b.n	8004da8 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d80:	f7fd fc88 	bl	8002694 <HAL_GetTick>
 8004d84:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8004d86:	e00a      	b.n	8004d9e <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d88:	f7fd fc84 	bl	8002694 <HAL_GetTick>
 8004d8c:	4602      	mov	r2, r0
 8004d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d90:	1ad3      	subs	r3, r2, r3
 8004d92:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d901      	bls.n	8004d9e <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8004d9a:	2303      	movs	r3, #3
 8004d9c:	e121      	b.n	8004fe2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8004d9e:	f7ff fb3c 	bl	800441a <LL_RCC_LSE_IsReady>
 8004da2:	4603      	mov	r3, r0
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d1ef      	bne.n	8004d88 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d02c      	beq.n	8004e0e <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d014      	beq.n	8004de6 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004dbc:	f7ff fab5 	bl	800432a <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dc0:	f7fd fc68 	bl	8002694 <HAL_GetTick>
 8004dc4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8004dc6:	e008      	b.n	8004dda <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004dc8:	f7fd fc64 	bl	8002694 <HAL_GetTick>
 8004dcc:	4602      	mov	r2, r0
 8004dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd0:	1ad3      	subs	r3, r2, r3
 8004dd2:	2b02      	cmp	r3, #2
 8004dd4:	d901      	bls.n	8004dda <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8004dd6:	2303      	movs	r3, #3
 8004dd8:	e103      	b.n	8004fe2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8004dda:	f7ff fac8 	bl	800436e <LL_RCC_HSI48_IsReady>
 8004dde:	4603      	mov	r3, r0
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d0f1      	beq.n	8004dc8 <HAL_RCC_OscConfig+0x4c0>
 8004de4:	e013      	b.n	8004e0e <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004de6:	f7ff fab1 	bl	800434c <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dea:	f7fd fc53 	bl	8002694 <HAL_GetTick>
 8004dee:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8004df0:	e008      	b.n	8004e04 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004df2:	f7fd fc4f 	bl	8002694 <HAL_GetTick>
 8004df6:	4602      	mov	r2, r0
 8004df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dfa:	1ad3      	subs	r3, r2, r3
 8004dfc:	2b02      	cmp	r3, #2
 8004dfe:	d901      	bls.n	8004e04 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8004e00:	2303      	movs	r3, #3
 8004e02:	e0ee      	b.n	8004fe2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8004e04:	f7ff fab3 	bl	800436e <LL_RCC_HSI48_IsReady>
 8004e08:	4603      	mov	r3, r0
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d1f1      	bne.n	8004df2 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	f000 80e4 	beq.w	8004fe0 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e18:	f7ff fc11 	bl	800463e <LL_RCC_GetSysClkSource>
 8004e1c:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8004e1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e22:	68db      	ldr	r3, [r3, #12]
 8004e24:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e2a:	2b02      	cmp	r3, #2
 8004e2c:	f040 80b4 	bne.w	8004f98 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	f003 0203 	and.w	r2, r3, #3
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e3a:	429a      	cmp	r2, r3
 8004e3c:	d123      	bne.n	8004e86 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e48:	429a      	cmp	r2, r3
 8004e4a:	d11c      	bne.n	8004e86 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	0a1b      	lsrs	r3, r3, #8
 8004e50:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004e58:	429a      	cmp	r2, r3
 8004e5a:	d114      	bne.n	8004e86 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004e66:	429a      	cmp	r2, r3
 8004e68:	d10d      	bne.n	8004e86 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004e74:	429a      	cmp	r2, r3
 8004e76:	d106      	bne.n	8004e86 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004e82:	429a      	cmp	r2, r3
 8004e84:	d05d      	beq.n	8004f42 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004e86:	693b      	ldr	r3, [r7, #16]
 8004e88:	2b0c      	cmp	r3, #12
 8004e8a:	d058      	beq.n	8004f3e <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004e8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d001      	beq.n	8004e9e <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	e0a1      	b.n	8004fe2 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004e9e:	f7ff fc84 	bl	80047aa <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004ea2:	f7fd fbf7 	bl	8002694 <HAL_GetTick>
 8004ea6:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ea8:	e008      	b.n	8004ebc <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004eaa:	f7fd fbf3 	bl	8002694 <HAL_GetTick>
 8004eae:	4602      	mov	r2, r0
 8004eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb2:	1ad3      	subs	r3, r2, r3
 8004eb4:	2b02      	cmp	r3, #2
 8004eb6:	d901      	bls.n	8004ebc <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8004eb8:	2303      	movs	r3, #3
 8004eba:	e092      	b.n	8004fe2 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ebc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d1ef      	bne.n	8004eaa <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004eca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ece:	68da      	ldr	r2, [r3, #12]
 8004ed0:	4b30      	ldr	r3, [pc, #192]	; (8004f94 <HAL_RCC_OscConfig+0x68c>)
 8004ed2:	4013      	ands	r3, r2
 8004ed4:	687a      	ldr	r2, [r7, #4]
 8004ed6:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8004ed8:	687a      	ldr	r2, [r7, #4]
 8004eda:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004edc:	4311      	orrs	r1, r2
 8004ede:	687a      	ldr	r2, [r7, #4]
 8004ee0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004ee2:	0212      	lsls	r2, r2, #8
 8004ee4:	4311      	orrs	r1, r2
 8004ee6:	687a      	ldr	r2, [r7, #4]
 8004ee8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004eea:	4311      	orrs	r1, r2
 8004eec:	687a      	ldr	r2, [r7, #4]
 8004eee:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004ef0:	4311      	orrs	r1, r2
 8004ef2:	687a      	ldr	r2, [r7, #4]
 8004ef4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004ef6:	430a      	orrs	r2, r1
 8004ef8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004efc:	4313      	orrs	r3, r2
 8004efe:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004f00:	f7ff fc44 	bl	800478c <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004f04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f08:	68db      	ldr	r3, [r3, #12]
 8004f0a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004f0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f12:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004f14:	f7fd fbbe 	bl	8002694 <HAL_GetTick>
 8004f18:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f1a:	e008      	b.n	8004f2e <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f1c:	f7fd fbba 	bl	8002694 <HAL_GetTick>
 8004f20:	4602      	mov	r2, r0
 8004f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f24:	1ad3      	subs	r3, r2, r3
 8004f26:	2b02      	cmp	r3, #2
 8004f28:	d901      	bls.n	8004f2e <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8004f2a:	2303      	movs	r3, #3
 8004f2c:	e059      	b.n	8004fe2 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d0ef      	beq.n	8004f1c <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004f3c:	e050      	b.n	8004fe0 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	e04f      	b.n	8004fe2 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d147      	bne.n	8004fe0 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004f50:	f7ff fc1c 	bl	800478c <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004f54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f58:	68db      	ldr	r3, [r3, #12]
 8004f5a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004f5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f62:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004f64:	f7fd fb96 	bl	8002694 <HAL_GetTick>
 8004f68:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f6a:	e008      	b.n	8004f7e <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f6c:	f7fd fb92 	bl	8002694 <HAL_GetTick>
 8004f70:	4602      	mov	r2, r0
 8004f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f74:	1ad3      	subs	r3, r2, r3
 8004f76:	2b02      	cmp	r3, #2
 8004f78:	d901      	bls.n	8004f7e <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8004f7a:	2303      	movs	r3, #3
 8004f7c:	e031      	b.n	8004fe2 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d0ef      	beq.n	8004f6c <HAL_RCC_OscConfig+0x664>
 8004f8c:	e028      	b.n	8004fe0 <HAL_RCC_OscConfig+0x6d8>
 8004f8e:	bf00      	nop
 8004f90:	58000400 	.word	0x58000400
 8004f94:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004f98:	693b      	ldr	r3, [r7, #16]
 8004f9a:	2b0c      	cmp	r3, #12
 8004f9c:	d01e      	beq.n	8004fdc <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f9e:	f7ff fc04 	bl	80047aa <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fa2:	f7fd fb77 	bl	8002694 <HAL_GetTick>
 8004fa6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004fa8:	e008      	b.n	8004fbc <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004faa:	f7fd fb73 	bl	8002694 <HAL_GetTick>
 8004fae:	4602      	mov	r2, r0
 8004fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fb2:	1ad3      	subs	r3, r2, r3
 8004fb4:	2b02      	cmp	r3, #2
 8004fb6:	d901      	bls.n	8004fbc <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8004fb8:	2303      	movs	r3, #3
 8004fba:	e012      	b.n	8004fe2 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004fbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d1ef      	bne.n	8004faa <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8004fca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fce:	68da      	ldr	r2, [r3, #12]
 8004fd0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004fd4:	4b05      	ldr	r3, [pc, #20]	; (8004fec <HAL_RCC_OscConfig+0x6e4>)
 8004fd6:	4013      	ands	r3, r2
 8004fd8:	60cb      	str	r3, [r1, #12]
 8004fda:	e001      	b.n	8004fe0 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004fdc:	2301      	movs	r3, #1
 8004fde:	e000      	b.n	8004fe2 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8004fe0:	2300      	movs	r3, #0
}
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	3734      	adds	r7, #52	; 0x34
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	bd90      	pop	{r4, r7, pc}
 8004fea:	bf00      	nop
 8004fec:	eefefffc 	.word	0xeefefffc

08004ff0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b084      	sub	sp, #16
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
 8004ff8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d101      	bne.n	8005004 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005000:	2301      	movs	r3, #1
 8005002:	e12d      	b.n	8005260 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005004:	4b98      	ldr	r3, [pc, #608]	; (8005268 <HAL_RCC_ClockConfig+0x278>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f003 0307 	and.w	r3, r3, #7
 800500c:	683a      	ldr	r2, [r7, #0]
 800500e:	429a      	cmp	r2, r3
 8005010:	d91b      	bls.n	800504a <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005012:	4b95      	ldr	r3, [pc, #596]	; (8005268 <HAL_RCC_ClockConfig+0x278>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f023 0207 	bic.w	r2, r3, #7
 800501a:	4993      	ldr	r1, [pc, #588]	; (8005268 <HAL_RCC_ClockConfig+0x278>)
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	4313      	orrs	r3, r2
 8005020:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005022:	f7fd fb37 	bl	8002694 <HAL_GetTick>
 8005026:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005028:	e008      	b.n	800503c <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800502a:	f7fd fb33 	bl	8002694 <HAL_GetTick>
 800502e:	4602      	mov	r2, r0
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	1ad3      	subs	r3, r2, r3
 8005034:	2b02      	cmp	r3, #2
 8005036:	d901      	bls.n	800503c <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8005038:	2303      	movs	r3, #3
 800503a:	e111      	b.n	8005260 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800503c:	4b8a      	ldr	r3, [pc, #552]	; (8005268 <HAL_RCC_ClockConfig+0x278>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f003 0307 	and.w	r3, r3, #7
 8005044:	683a      	ldr	r2, [r7, #0]
 8005046:	429a      	cmp	r2, r3
 8005048:	d1ef      	bne.n	800502a <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f003 0302 	and.w	r3, r3, #2
 8005052:	2b00      	cmp	r3, #0
 8005054:	d016      	beq.n	8005084 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	689b      	ldr	r3, [r3, #8]
 800505a:	4618      	mov	r0, r3
 800505c:	f7ff fafb 	bl	8004656 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005060:	f7fd fb18 	bl	8002694 <HAL_GetTick>
 8005064:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8005066:	e008      	b.n	800507a <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005068:	f7fd fb14 	bl	8002694 <HAL_GetTick>
 800506c:	4602      	mov	r2, r0
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	1ad3      	subs	r3, r2, r3
 8005072:	2b02      	cmp	r3, #2
 8005074:	d901      	bls.n	800507a <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8005076:	2303      	movs	r3, #3
 8005078:	e0f2      	b.n	8005260 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800507a:	f7ff fbe8 	bl	800484e <LL_RCC_IsActiveFlag_HPRE>
 800507e:	4603      	mov	r3, r0
 8005080:	2b00      	cmp	r3, #0
 8005082:	d0f1      	beq.n	8005068 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f003 0320 	and.w	r3, r3, #32
 800508c:	2b00      	cmp	r3, #0
 800508e:	d016      	beq.n	80050be <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	695b      	ldr	r3, [r3, #20]
 8005094:	4618      	mov	r0, r3
 8005096:	f7ff faf2 	bl	800467e <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800509a:	f7fd fafb 	bl	8002694 <HAL_GetTick>
 800509e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80050a0:	e008      	b.n	80050b4 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80050a2:	f7fd faf7 	bl	8002694 <HAL_GetTick>
 80050a6:	4602      	mov	r2, r0
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	1ad3      	subs	r3, r2, r3
 80050ac:	2b02      	cmp	r3, #2
 80050ae:	d901      	bls.n	80050b4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80050b0:	2303      	movs	r3, #3
 80050b2:	e0d5      	b.n	8005260 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80050b4:	f7ff fbdd 	bl	8004872 <LL_RCC_IsActiveFlag_C2HPRE>
 80050b8:	4603      	mov	r3, r0
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d0f1      	beq.n	80050a2 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d016      	beq.n	80050f8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	699b      	ldr	r3, [r3, #24]
 80050ce:	4618      	mov	r0, r3
 80050d0:	f7ff faeb 	bl	80046aa <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80050d4:	f7fd fade 	bl	8002694 <HAL_GetTick>
 80050d8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80050da:	e008      	b.n	80050ee <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80050dc:	f7fd fada 	bl	8002694 <HAL_GetTick>
 80050e0:	4602      	mov	r2, r0
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	1ad3      	subs	r3, r2, r3
 80050e6:	2b02      	cmp	r3, #2
 80050e8:	d901      	bls.n	80050ee <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80050ea:	2303      	movs	r3, #3
 80050ec:	e0b8      	b.n	8005260 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80050ee:	f7ff fbd3 	bl	8004898 <LL_RCC_IsActiveFlag_SHDHPRE>
 80050f2:	4603      	mov	r3, r0
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d0f1      	beq.n	80050dc <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f003 0304 	and.w	r3, r3, #4
 8005100:	2b00      	cmp	r3, #0
 8005102:	d016      	beq.n	8005132 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	68db      	ldr	r3, [r3, #12]
 8005108:	4618      	mov	r0, r3
 800510a:	f7ff fae5 	bl	80046d8 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800510e:	f7fd fac1 	bl	8002694 <HAL_GetTick>
 8005112:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005114:	e008      	b.n	8005128 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005116:	f7fd fabd 	bl	8002694 <HAL_GetTick>
 800511a:	4602      	mov	r2, r0
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	1ad3      	subs	r3, r2, r3
 8005120:	2b02      	cmp	r3, #2
 8005122:	d901      	bls.n	8005128 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8005124:	2303      	movs	r3, #3
 8005126:	e09b      	b.n	8005260 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005128:	f7ff fbc9 	bl	80048be <LL_RCC_IsActiveFlag_PPRE1>
 800512c:	4603      	mov	r3, r0
 800512e:	2b00      	cmp	r3, #0
 8005130:	d0f1      	beq.n	8005116 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f003 0308 	and.w	r3, r3, #8
 800513a:	2b00      	cmp	r3, #0
 800513c:	d017      	beq.n	800516e <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	691b      	ldr	r3, [r3, #16]
 8005142:	00db      	lsls	r3, r3, #3
 8005144:	4618      	mov	r0, r3
 8005146:	f7ff fadb 	bl	8004700 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800514a:	f7fd faa3 	bl	8002694 <HAL_GetTick>
 800514e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005150:	e008      	b.n	8005164 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005152:	f7fd fa9f 	bl	8002694 <HAL_GetTick>
 8005156:	4602      	mov	r2, r0
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	1ad3      	subs	r3, r2, r3
 800515c:	2b02      	cmp	r3, #2
 800515e:	d901      	bls.n	8005164 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8005160:	2303      	movs	r3, #3
 8005162:	e07d      	b.n	8005260 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005164:	f7ff fbbd 	bl	80048e2 <LL_RCC_IsActiveFlag_PPRE2>
 8005168:	4603      	mov	r3, r0
 800516a:	2b00      	cmp	r3, #0
 800516c:	d0f1      	beq.n	8005152 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f003 0301 	and.w	r3, r3, #1
 8005176:	2b00      	cmp	r3, #0
 8005178:	d043      	beq.n	8005202 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	685b      	ldr	r3, [r3, #4]
 800517e:	2b02      	cmp	r3, #2
 8005180:	d106      	bne.n	8005190 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8005182:	f7ff f87b 	bl	800427c <LL_RCC_HSE_IsReady>
 8005186:	4603      	mov	r3, r0
 8005188:	2b00      	cmp	r3, #0
 800518a:	d11e      	bne.n	80051ca <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800518c:	2301      	movs	r3, #1
 800518e:	e067      	b.n	8005260 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	685b      	ldr	r3, [r3, #4]
 8005194:	2b03      	cmp	r3, #3
 8005196:	d106      	bne.n	80051a6 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8005198:	f7ff fb16 	bl	80047c8 <LL_RCC_PLL_IsReady>
 800519c:	4603      	mov	r3, r0
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d113      	bne.n	80051ca <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80051a2:	2301      	movs	r3, #1
 80051a4:	e05c      	b.n	8005260 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	685b      	ldr	r3, [r3, #4]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d106      	bne.n	80051bc <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80051ae:	f7ff f9e3 	bl	8004578 <LL_RCC_MSI_IsReady>
 80051b2:	4603      	mov	r3, r0
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d108      	bne.n	80051ca <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80051b8:	2301      	movs	r3, #1
 80051ba:	e051      	b.n	8005260 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80051bc:	f7ff f88e 	bl	80042dc <LL_RCC_HSI_IsReady>
 80051c0:	4603      	mov	r3, r0
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d101      	bne.n	80051ca <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80051c6:	2301      	movs	r3, #1
 80051c8:	e04a      	b.n	8005260 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	685b      	ldr	r3, [r3, #4]
 80051ce:	4618      	mov	r0, r3
 80051d0:	f7ff fa21 	bl	8004616 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051d4:	f7fd fa5e 	bl	8002694 <HAL_GetTick>
 80051d8:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051da:	e00a      	b.n	80051f2 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80051dc:	f7fd fa5a 	bl	8002694 <HAL_GetTick>
 80051e0:	4602      	mov	r2, r0
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	1ad3      	subs	r3, r2, r3
 80051e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d901      	bls.n	80051f2 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80051ee:	2303      	movs	r3, #3
 80051f0:	e036      	b.n	8005260 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051f2:	f7ff fa24 	bl	800463e <LL_RCC_GetSysClkSource>
 80051f6:	4602      	mov	r2, r0
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	685b      	ldr	r3, [r3, #4]
 80051fc:	009b      	lsls	r3, r3, #2
 80051fe:	429a      	cmp	r2, r3
 8005200:	d1ec      	bne.n	80051dc <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005202:	4b19      	ldr	r3, [pc, #100]	; (8005268 <HAL_RCC_ClockConfig+0x278>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f003 0307 	and.w	r3, r3, #7
 800520a:	683a      	ldr	r2, [r7, #0]
 800520c:	429a      	cmp	r2, r3
 800520e:	d21b      	bcs.n	8005248 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005210:	4b15      	ldr	r3, [pc, #84]	; (8005268 <HAL_RCC_ClockConfig+0x278>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f023 0207 	bic.w	r2, r3, #7
 8005218:	4913      	ldr	r1, [pc, #76]	; (8005268 <HAL_RCC_ClockConfig+0x278>)
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	4313      	orrs	r3, r2
 800521e:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005220:	f7fd fa38 	bl	8002694 <HAL_GetTick>
 8005224:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005226:	e008      	b.n	800523a <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005228:	f7fd fa34 	bl	8002694 <HAL_GetTick>
 800522c:	4602      	mov	r2, r0
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	1ad3      	subs	r3, r2, r3
 8005232:	2b02      	cmp	r3, #2
 8005234:	d901      	bls.n	800523a <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8005236:	2303      	movs	r3, #3
 8005238:	e012      	b.n	8005260 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800523a:	4b0b      	ldr	r3, [pc, #44]	; (8005268 <HAL_RCC_ClockConfig+0x278>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f003 0307 	and.w	r3, r3, #7
 8005242:	683a      	ldr	r2, [r7, #0]
 8005244:	429a      	cmp	r2, r3
 8005246:	d1ef      	bne.n	8005228 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005248:	f000 f87e 	bl	8005348 <HAL_RCC_GetHCLKFreq>
 800524c:	4603      	mov	r3, r0
 800524e:	4a07      	ldr	r2, [pc, #28]	; (800526c <HAL_RCC_ClockConfig+0x27c>)
 8005250:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8005252:	f7fd fa2b 	bl	80026ac <HAL_GetTickPrio>
 8005256:	4603      	mov	r3, r0
 8005258:	4618      	mov	r0, r3
 800525a:	f7fd f9cd 	bl	80025f8 <HAL_InitTick>
 800525e:	4603      	mov	r3, r0
}
 8005260:	4618      	mov	r0, r3
 8005262:	3710      	adds	r7, #16
 8005264:	46bd      	mov	sp, r7
 8005266:	bd80      	pop	{r7, pc}
 8005268:	58004000 	.word	0x58004000
 800526c:	20000008 	.word	0x20000008

08005270 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005270:	b590      	push	{r4, r7, lr}
 8005272:	b085      	sub	sp, #20
 8005274:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005276:	f7ff f9e2 	bl	800463e <LL_RCC_GetSysClkSource>
 800527a:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d10a      	bne.n	8005298 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8005282:	f7ff f99e 	bl	80045c2 <LL_RCC_MSI_GetRange>
 8005286:	4603      	mov	r3, r0
 8005288:	091b      	lsrs	r3, r3, #4
 800528a:	f003 030f 	and.w	r3, r3, #15
 800528e:	4a2b      	ldr	r2, [pc, #172]	; (800533c <HAL_RCC_GetSysClockFreq+0xcc>)
 8005290:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005294:	60fb      	str	r3, [r7, #12]
 8005296:	e04b      	b.n	8005330 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2b04      	cmp	r3, #4
 800529c:	d102      	bne.n	80052a4 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800529e:	4b28      	ldr	r3, [pc, #160]	; (8005340 <HAL_RCC_GetSysClockFreq+0xd0>)
 80052a0:	60fb      	str	r3, [r7, #12]
 80052a2:	e045      	b.n	8005330 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2b08      	cmp	r3, #8
 80052a8:	d10a      	bne.n	80052c0 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80052aa:	f7fe ffb7 	bl	800421c <LL_RCC_HSE_IsEnabledDiv2>
 80052ae:	4603      	mov	r3, r0
 80052b0:	2b01      	cmp	r3, #1
 80052b2:	d102      	bne.n	80052ba <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80052b4:	4b22      	ldr	r3, [pc, #136]	; (8005340 <HAL_RCC_GetSysClockFreq+0xd0>)
 80052b6:	60fb      	str	r3, [r7, #12]
 80052b8:	e03a      	b.n	8005330 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80052ba:	4b22      	ldr	r3, [pc, #136]	; (8005344 <HAL_RCC_GetSysClockFreq+0xd4>)
 80052bc:	60fb      	str	r3, [r7, #12]
 80052be:	e037      	b.n	8005330 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80052c0:	f7ff fab9 	bl	8004836 <LL_RCC_PLL_GetMainSource>
 80052c4:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	2b02      	cmp	r3, #2
 80052ca:	d003      	beq.n	80052d4 <HAL_RCC_GetSysClockFreq+0x64>
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	2b03      	cmp	r3, #3
 80052d0:	d003      	beq.n	80052da <HAL_RCC_GetSysClockFreq+0x6a>
 80052d2:	e00d      	b.n	80052f0 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80052d4:	4b1a      	ldr	r3, [pc, #104]	; (8005340 <HAL_RCC_GetSysClockFreq+0xd0>)
 80052d6:	60bb      	str	r3, [r7, #8]
        break;
 80052d8:	e015      	b.n	8005306 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80052da:	f7fe ff9f 	bl	800421c <LL_RCC_HSE_IsEnabledDiv2>
 80052de:	4603      	mov	r3, r0
 80052e0:	2b01      	cmp	r3, #1
 80052e2:	d102      	bne.n	80052ea <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80052e4:	4b16      	ldr	r3, [pc, #88]	; (8005340 <HAL_RCC_GetSysClockFreq+0xd0>)
 80052e6:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80052e8:	e00d      	b.n	8005306 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 80052ea:	4b16      	ldr	r3, [pc, #88]	; (8005344 <HAL_RCC_GetSysClockFreq+0xd4>)
 80052ec:	60bb      	str	r3, [r7, #8]
        break;
 80052ee:	e00a      	b.n	8005306 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80052f0:	f7ff f967 	bl	80045c2 <LL_RCC_MSI_GetRange>
 80052f4:	4603      	mov	r3, r0
 80052f6:	091b      	lsrs	r3, r3, #4
 80052f8:	f003 030f 	and.w	r3, r3, #15
 80052fc:	4a0f      	ldr	r2, [pc, #60]	; (800533c <HAL_RCC_GetSysClockFreq+0xcc>)
 80052fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005302:	60bb      	str	r3, [r7, #8]
        break;
 8005304:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8005306:	f7ff fa71 	bl	80047ec <LL_RCC_PLL_GetN>
 800530a:	4602      	mov	r2, r0
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	fb03 f402 	mul.w	r4, r3, r2
 8005312:	f7ff fa84 	bl	800481e <LL_RCC_PLL_GetDivider>
 8005316:	4603      	mov	r3, r0
 8005318:	091b      	lsrs	r3, r3, #4
 800531a:	3301      	adds	r3, #1
 800531c:	fbb4 f4f3 	udiv	r4, r4, r3
 8005320:	f7ff fa71 	bl	8004806 <LL_RCC_PLL_GetR>
 8005324:	4603      	mov	r3, r0
 8005326:	0f5b      	lsrs	r3, r3, #29
 8005328:	3301      	adds	r3, #1
 800532a:	fbb4 f3f3 	udiv	r3, r4, r3
 800532e:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8005330:	68fb      	ldr	r3, [r7, #12]
}
 8005332:	4618      	mov	r0, r3
 8005334:	3714      	adds	r7, #20
 8005336:	46bd      	mov	sp, r7
 8005338:	bd90      	pop	{r4, r7, pc}
 800533a:	bf00      	nop
 800533c:	0800b32c 	.word	0x0800b32c
 8005340:	00f42400 	.word	0x00f42400
 8005344:	01e84800 	.word	0x01e84800

08005348 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005348:	b598      	push	{r3, r4, r7, lr}
 800534a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800534c:	f7ff ff90 	bl	8005270 <HAL_RCC_GetSysClockFreq>
 8005350:	4604      	mov	r4, r0
 8005352:	f7ff f9e9 	bl	8004728 <LL_RCC_GetAHBPrescaler>
 8005356:	4603      	mov	r3, r0
 8005358:	091b      	lsrs	r3, r3, #4
 800535a:	f003 030f 	and.w	r3, r3, #15
 800535e:	4a03      	ldr	r2, [pc, #12]	; (800536c <HAL_RCC_GetHCLKFreq+0x24>)
 8005360:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005364:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8005368:	4618      	mov	r0, r3
 800536a:	bd98      	pop	{r3, r4, r7, pc}
 800536c:	0800b2cc 	.word	0x0800b2cc

08005370 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005370:	b598      	push	{r3, r4, r7, lr}
 8005372:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8005374:	f7ff ffe8 	bl	8005348 <HAL_RCC_GetHCLKFreq>
 8005378:	4604      	mov	r4, r0
 800537a:	f7ff f9ef 	bl	800475c <LL_RCC_GetAPB1Prescaler>
 800537e:	4603      	mov	r3, r0
 8005380:	0a1b      	lsrs	r3, r3, #8
 8005382:	f003 0307 	and.w	r3, r3, #7
 8005386:	4a04      	ldr	r2, [pc, #16]	; (8005398 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005388:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800538c:	f003 031f 	and.w	r3, r3, #31
 8005390:	fa24 f303 	lsr.w	r3, r4, r3
}
 8005394:	4618      	mov	r0, r3
 8005396:	bd98      	pop	{r3, r4, r7, pc}
 8005398:	0800b30c 	.word	0x0800b30c

0800539c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800539c:	b598      	push	{r3, r4, r7, lr}
 800539e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80053a0:	f7ff ffd2 	bl	8005348 <HAL_RCC_GetHCLKFreq>
 80053a4:	4604      	mov	r4, r0
 80053a6:	f7ff f9e5 	bl	8004774 <LL_RCC_GetAPB2Prescaler>
 80053aa:	4603      	mov	r3, r0
 80053ac:	0adb      	lsrs	r3, r3, #11
 80053ae:	f003 0307 	and.w	r3, r3, #7
 80053b2:	4a04      	ldr	r2, [pc, #16]	; (80053c4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80053b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80053b8:	f003 031f 	and.w	r3, r3, #31
 80053bc:	fa24 f303 	lsr.w	r3, r4, r3
}
 80053c0:	4618      	mov	r0, r3
 80053c2:	bd98      	pop	{r3, r4, r7, pc}
 80053c4:	0800b30c 	.word	0x0800b30c

080053c8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80053c8:	b590      	push	{r4, r7, lr}
 80053ca:	b085      	sub	sp, #20
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2bb0      	cmp	r3, #176	; 0xb0
 80053d4:	d903      	bls.n	80053de <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 80053d6:	4b15      	ldr	r3, [pc, #84]	; (800542c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80053d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053da:	60fb      	str	r3, [r7, #12]
 80053dc:	e007      	b.n	80053ee <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	091b      	lsrs	r3, r3, #4
 80053e2:	f003 030f 	and.w	r3, r3, #15
 80053e6:	4a11      	ldr	r2, [pc, #68]	; (800542c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80053e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80053ec:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 80053ee:	f7ff f9a7 	bl	8004740 <LL_RCC_GetAHB4Prescaler>
 80053f2:	4603      	mov	r3, r0
 80053f4:	091b      	lsrs	r3, r3, #4
 80053f6:	f003 030f 	and.w	r3, r3, #15
 80053fa:	4a0d      	ldr	r2, [pc, #52]	; (8005430 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 80053fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005400:	68fa      	ldr	r2, [r7, #12]
 8005402:	fbb2 f3f3 	udiv	r3, r2, r3
 8005406:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	4a0a      	ldr	r2, [pc, #40]	; (8005434 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 800540c:	fba2 2303 	umull	r2, r3, r2, r3
 8005410:	0c9c      	lsrs	r4, r3, #18
 8005412:	f7fe fef5 	bl	8004200 <HAL_PWREx_GetVoltageRange>
 8005416:	4603      	mov	r3, r0
 8005418:	4619      	mov	r1, r3
 800541a:	4620      	mov	r0, r4
 800541c:	f000 f80c 	bl	8005438 <RCC_SetFlashLatency>
 8005420:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8005422:	4618      	mov	r0, r3
 8005424:	3714      	adds	r7, #20
 8005426:	46bd      	mov	sp, r7
 8005428:	bd90      	pop	{r4, r7, pc}
 800542a:	bf00      	nop
 800542c:	0800b32c 	.word	0x0800b32c
 8005430:	0800b2cc 	.word	0x0800b2cc
 8005434:	431bde83 	.word	0x431bde83

08005438 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8005438:	b590      	push	{r4, r7, lr}
 800543a:	b093      	sub	sp, #76	; 0x4c
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
 8005440:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8005442:	4b37      	ldr	r3, [pc, #220]	; (8005520 <RCC_SetFlashLatency+0xe8>)
 8005444:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8005448:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800544a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800544e:	4a35      	ldr	r2, [pc, #212]	; (8005524 <RCC_SetFlashLatency+0xec>)
 8005450:	f107 031c 	add.w	r3, r7, #28
 8005454:	ca07      	ldmia	r2, {r0, r1, r2}
 8005456:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800545a:	4b33      	ldr	r3, [pc, #204]	; (8005528 <RCC_SetFlashLatency+0xf0>)
 800545c:	f107 040c 	add.w	r4, r7, #12
 8005460:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005462:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8005466:	2300      	movs	r3, #0
 8005468:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005470:	d11a      	bne.n	80054a8 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005472:	2300      	movs	r3, #0
 8005474:	643b      	str	r3, [r7, #64]	; 0x40
 8005476:	e013      	b.n	80054a0 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8005478:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800547a:	009b      	lsls	r3, r3, #2
 800547c:	3348      	adds	r3, #72	; 0x48
 800547e:	443b      	add	r3, r7
 8005480:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8005484:	687a      	ldr	r2, [r7, #4]
 8005486:	429a      	cmp	r2, r3
 8005488:	d807      	bhi.n	800549a <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800548a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800548c:	009b      	lsls	r3, r3, #2
 800548e:	3348      	adds	r3, #72	; 0x48
 8005490:	443b      	add	r3, r7
 8005492:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8005496:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8005498:	e020      	b.n	80054dc <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800549a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800549c:	3301      	adds	r3, #1
 800549e:	643b      	str	r3, [r7, #64]	; 0x40
 80054a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054a2:	2b03      	cmp	r3, #3
 80054a4:	d9e8      	bls.n	8005478 <RCC_SetFlashLatency+0x40>
 80054a6:	e019      	b.n	80054dc <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80054a8:	2300      	movs	r3, #0
 80054aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80054ac:	e013      	b.n	80054d6 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80054ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054b0:	009b      	lsls	r3, r3, #2
 80054b2:	3348      	adds	r3, #72	; 0x48
 80054b4:	443b      	add	r3, r7
 80054b6:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80054ba:	687a      	ldr	r2, [r7, #4]
 80054bc:	429a      	cmp	r2, r3
 80054be:	d807      	bhi.n	80054d0 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80054c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054c2:	009b      	lsls	r3, r3, #2
 80054c4:	3348      	adds	r3, #72	; 0x48
 80054c6:	443b      	add	r3, r7
 80054c8:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80054cc:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80054ce:	e005      	b.n	80054dc <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80054d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054d2:	3301      	adds	r3, #1
 80054d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80054d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054d8:	2b02      	cmp	r3, #2
 80054da:	d9e8      	bls.n	80054ae <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 80054dc:	4b13      	ldr	r3, [pc, #76]	; (800552c <RCC_SetFlashLatency+0xf4>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f023 0207 	bic.w	r2, r3, #7
 80054e4:	4911      	ldr	r1, [pc, #68]	; (800552c <RCC_SetFlashLatency+0xf4>)
 80054e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054e8:	4313      	orrs	r3, r2
 80054ea:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80054ec:	f7fd f8d2 	bl	8002694 <HAL_GetTick>
 80054f0:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80054f2:	e008      	b.n	8005506 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80054f4:	f7fd f8ce 	bl	8002694 <HAL_GetTick>
 80054f8:	4602      	mov	r2, r0
 80054fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054fc:	1ad3      	subs	r3, r2, r3
 80054fe:	2b02      	cmp	r3, #2
 8005500:	d901      	bls.n	8005506 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8005502:	2303      	movs	r3, #3
 8005504:	e007      	b.n	8005516 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005506:	4b09      	ldr	r3, [pc, #36]	; (800552c <RCC_SetFlashLatency+0xf4>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f003 0307 	and.w	r3, r3, #7
 800550e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005510:	429a      	cmp	r2, r3
 8005512:	d1ef      	bne.n	80054f4 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8005514:	2300      	movs	r3, #0
}
 8005516:	4618      	mov	r0, r3
 8005518:	374c      	adds	r7, #76	; 0x4c
 800551a:	46bd      	mov	sp, r7
 800551c:	bd90      	pop	{r4, r7, pc}
 800551e:	bf00      	nop
 8005520:	0800b128 	.word	0x0800b128
 8005524:	0800b138 	.word	0x0800b138
 8005528:	0800b144 	.word	0x0800b144
 800552c:	58004000 	.word	0x58004000

08005530 <LL_RCC_LSE_IsEnabled>:
{
 8005530:	b480      	push	{r7}
 8005532:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8005534:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005538:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800553c:	f003 0301 	and.w	r3, r3, #1
 8005540:	2b01      	cmp	r3, #1
 8005542:	d101      	bne.n	8005548 <LL_RCC_LSE_IsEnabled+0x18>
 8005544:	2301      	movs	r3, #1
 8005546:	e000      	b.n	800554a <LL_RCC_LSE_IsEnabled+0x1a>
 8005548:	2300      	movs	r3, #0
}
 800554a:	4618      	mov	r0, r3
 800554c:	46bd      	mov	sp, r7
 800554e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005552:	4770      	bx	lr

08005554 <LL_RCC_LSE_IsReady>:
{
 8005554:	b480      	push	{r7}
 8005556:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005558:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800555c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005560:	f003 0302 	and.w	r3, r3, #2
 8005564:	2b02      	cmp	r3, #2
 8005566:	d101      	bne.n	800556c <LL_RCC_LSE_IsReady+0x18>
 8005568:	2301      	movs	r3, #1
 800556a:	e000      	b.n	800556e <LL_RCC_LSE_IsReady+0x1a>
 800556c:	2300      	movs	r3, #0
}
 800556e:	4618      	mov	r0, r3
 8005570:	46bd      	mov	sp, r7
 8005572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005576:	4770      	bx	lr

08005578 <LL_RCC_SetRFWKPClockSource>:
{
 8005578:	b480      	push	{r7}
 800557a:	b083      	sub	sp, #12
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8005580:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005584:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005588:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800558c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	4313      	orrs	r3, r2
 8005594:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8005598:	bf00      	nop
 800559a:	370c      	adds	r7, #12
 800559c:	46bd      	mov	sp, r7
 800559e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a2:	4770      	bx	lr

080055a4 <LL_RCC_SetSMPSClockSource>:
{
 80055a4:	b480      	push	{r7}
 80055a6:	b083      	sub	sp, #12
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 80055ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055b2:	f023 0203 	bic.w	r2, r3, #3
 80055b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	4313      	orrs	r3, r2
 80055be:	624b      	str	r3, [r1, #36]	; 0x24
}
 80055c0:	bf00      	nop
 80055c2:	370c      	adds	r7, #12
 80055c4:	46bd      	mov	sp, r7
 80055c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ca:	4770      	bx	lr

080055cc <LL_RCC_SetSMPSPrescaler>:
{
 80055cc:	b480      	push	{r7}
 80055ce:	b083      	sub	sp, #12
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 80055d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055da:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80055de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	4313      	orrs	r3, r2
 80055e6:	624b      	str	r3, [r1, #36]	; 0x24
}
 80055e8:	bf00      	nop
 80055ea:	370c      	adds	r7, #12
 80055ec:	46bd      	mov	sp, r7
 80055ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f2:	4770      	bx	lr

080055f4 <LL_RCC_SetUSARTClockSource>:
{
 80055f4:	b480      	push	{r7}
 80055f6:	b083      	sub	sp, #12
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 80055fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005600:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005604:	f023 0203 	bic.w	r2, r3, #3
 8005608:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	4313      	orrs	r3, r2
 8005610:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005614:	bf00      	nop
 8005616:	370c      	adds	r7, #12
 8005618:	46bd      	mov	sp, r7
 800561a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561e:	4770      	bx	lr

08005620 <LL_RCC_SetLPUARTClockSource>:
{
 8005620:	b480      	push	{r7}
 8005622:	b083      	sub	sp, #12
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8005628:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800562c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005630:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005634:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	4313      	orrs	r3, r2
 800563c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005640:	bf00      	nop
 8005642:	370c      	adds	r7, #12
 8005644:	46bd      	mov	sp, r7
 8005646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564a:	4770      	bx	lr

0800564c <LL_RCC_SetI2CClockSource>:
{
 800564c:	b480      	push	{r7}
 800564e:	b083      	sub	sp, #12
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8005654:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005658:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	091b      	lsrs	r3, r3, #4
 8005660:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8005664:	43db      	mvns	r3, r3
 8005666:	401a      	ands	r2, r3
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	011b      	lsls	r3, r3, #4
 800566c:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8005670:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005674:	4313      	orrs	r3, r2
 8005676:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800567a:	bf00      	nop
 800567c:	370c      	adds	r7, #12
 800567e:	46bd      	mov	sp, r7
 8005680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005684:	4770      	bx	lr

08005686 <LL_RCC_SetLPTIMClockSource>:
{
 8005686:	b480      	push	{r7}
 8005688:	b083      	sub	sp, #12
 800568a:	af00      	add	r7, sp, #0
 800568c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800568e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005692:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	0c1b      	lsrs	r3, r3, #16
 800569a:	041b      	lsls	r3, r3, #16
 800569c:	43db      	mvns	r3, r3
 800569e:	401a      	ands	r2, r3
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	041b      	lsls	r3, r3, #16
 80056a4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80056a8:	4313      	orrs	r3, r2
 80056aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80056ae:	bf00      	nop
 80056b0:	370c      	adds	r7, #12
 80056b2:	46bd      	mov	sp, r7
 80056b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b8:	4770      	bx	lr

080056ba <LL_RCC_SetSAIClockSource>:
{
 80056ba:	b480      	push	{r7}
 80056bc:	b083      	sub	sp, #12
 80056be:	af00      	add	r7, sp, #0
 80056c0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 80056c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056ca:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80056ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	4313      	orrs	r3, r2
 80056d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80056da:	bf00      	nop
 80056dc:	370c      	adds	r7, #12
 80056de:	46bd      	mov	sp, r7
 80056e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e4:	4770      	bx	lr

080056e6 <LL_RCC_SetRNGClockSource>:
{
 80056e6:	b480      	push	{r7}
 80056e8:	b083      	sub	sp, #12
 80056ea:	af00      	add	r7, sp, #0
 80056ec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80056ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056f6:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80056fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	4313      	orrs	r3, r2
 8005702:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005706:	bf00      	nop
 8005708:	370c      	adds	r7, #12
 800570a:	46bd      	mov	sp, r7
 800570c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005710:	4770      	bx	lr

08005712 <LL_RCC_SetCLK48ClockSource>:
{
 8005712:	b480      	push	{r7}
 8005714:	b083      	sub	sp, #12
 8005716:	af00      	add	r7, sp, #0
 8005718:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 800571a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800571e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005722:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005726:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	4313      	orrs	r3, r2
 800572e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005732:	bf00      	nop
 8005734:	370c      	adds	r7, #12
 8005736:	46bd      	mov	sp, r7
 8005738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573c:	4770      	bx	lr

0800573e <LL_RCC_SetUSBClockSource>:
{
 800573e:	b580      	push	{r7, lr}
 8005740:	b082      	sub	sp, #8
 8005742:	af00      	add	r7, sp, #0
 8005744:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8005746:	6878      	ldr	r0, [r7, #4]
 8005748:	f7ff ffe3 	bl	8005712 <LL_RCC_SetCLK48ClockSource>
}
 800574c:	bf00      	nop
 800574e:	3708      	adds	r7, #8
 8005750:	46bd      	mov	sp, r7
 8005752:	bd80      	pop	{r7, pc}

08005754 <LL_RCC_SetADCClockSource>:
{
 8005754:	b480      	push	{r7}
 8005756:	b083      	sub	sp, #12
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800575c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005760:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005764:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005768:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	4313      	orrs	r3, r2
 8005770:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005774:	bf00      	nop
 8005776:	370c      	adds	r7, #12
 8005778:	46bd      	mov	sp, r7
 800577a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577e:	4770      	bx	lr

08005780 <LL_RCC_SetRTCClockSource>:
{
 8005780:	b480      	push	{r7}
 8005782:	b083      	sub	sp, #12
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8005788:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800578c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005790:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005794:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	4313      	orrs	r3, r2
 800579c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80057a0:	bf00      	nop
 80057a2:	370c      	adds	r7, #12
 80057a4:	46bd      	mov	sp, r7
 80057a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057aa:	4770      	bx	lr

080057ac <LL_RCC_GetRTCClockSource>:
{
 80057ac:	b480      	push	{r7}
 80057ae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80057b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 80057bc:	4618      	mov	r0, r3
 80057be:	46bd      	mov	sp, r7
 80057c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c4:	4770      	bx	lr

080057c6 <LL_RCC_ForceBackupDomainReset>:
{
 80057c6:	b480      	push	{r7}
 80057c8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80057ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80057d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80057de:	bf00      	nop
 80057e0:	46bd      	mov	sp, r7
 80057e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e6:	4770      	bx	lr

080057e8 <LL_RCC_ReleaseBackupDomainReset>:
{
 80057e8:	b480      	push	{r7}
 80057ea:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80057ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057f4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80057f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005800:	bf00      	nop
 8005802:	46bd      	mov	sp, r7
 8005804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005808:	4770      	bx	lr

0800580a <LL_RCC_PLLSAI1_Enable>:
{
 800580a:	b480      	push	{r7}
 800580c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800580e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005818:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800581c:	6013      	str	r3, [r2, #0]
}
 800581e:	bf00      	nop
 8005820:	46bd      	mov	sp, r7
 8005822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005826:	4770      	bx	lr

08005828 <LL_RCC_PLLSAI1_Disable>:
{
 8005828:	b480      	push	{r7}
 800582a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800582c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005836:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800583a:	6013      	str	r3, [r2, #0]
}
 800583c:	bf00      	nop
 800583e:	46bd      	mov	sp, r7
 8005840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005844:	4770      	bx	lr

08005846 <LL_RCC_PLLSAI1_IsReady>:
{
 8005846:	b480      	push	{r7}
 8005848:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800584a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005854:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005858:	d101      	bne.n	800585e <LL_RCC_PLLSAI1_IsReady+0x18>
 800585a:	2301      	movs	r3, #1
 800585c:	e000      	b.n	8005860 <LL_RCC_PLLSAI1_IsReady+0x1a>
 800585e:	2300      	movs	r3, #0
}
 8005860:	4618      	mov	r0, r3
 8005862:	46bd      	mov	sp, r7
 8005864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005868:	4770      	bx	lr

0800586a <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800586a:	b580      	push	{r7, lr}
 800586c:	b088      	sub	sp, #32
 800586e:	af00      	add	r7, sp, #0
 8005870:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8005872:	2300      	movs	r3, #0
 8005874:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8005876:	2300      	movs	r3, #0
 8005878:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005882:	2b00      	cmp	r3, #0
 8005884:	d034      	beq.n	80058f0 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800588a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800588e:	d021      	beq.n	80058d4 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8005890:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005894:	d81b      	bhi.n	80058ce <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005896:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800589a:	d01d      	beq.n	80058d8 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 800589c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80058a0:	d815      	bhi.n	80058ce <HAL_RCCEx_PeriphCLKConfig+0x64>
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d00b      	beq.n	80058be <HAL_RCCEx_PeriphCLKConfig+0x54>
 80058a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80058aa:	d110      	bne.n	80058ce <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 80058ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058b0:	68db      	ldr	r3, [r3, #12]
 80058b2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80058b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058ba:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 80058bc:	e00d      	b.n	80058da <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	3304      	adds	r3, #4
 80058c2:	4618      	mov	r0, r3
 80058c4:	f000 f947 	bl	8005b56 <RCCEx_PLLSAI1_ConfigNP>
 80058c8:	4603      	mov	r3, r0
 80058ca:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80058cc:	e005      	b.n	80058da <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 80058ce:	2301      	movs	r3, #1
 80058d0:	77fb      	strb	r3, [r7, #31]
        break;
 80058d2:	e002      	b.n	80058da <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80058d4:	bf00      	nop
 80058d6:	e000      	b.n	80058da <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80058d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80058da:	7ffb      	ldrb	r3, [r7, #31]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d105      	bne.n	80058ec <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058e4:	4618      	mov	r0, r3
 80058e6:	f7ff fee8 	bl	80056ba <LL_RCC_SetSAIClockSource>
 80058ea:	e001      	b.n	80058f0 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058ec:	7ffb      	ldrb	r3, [r7, #31]
 80058ee:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d046      	beq.n	800598a <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 80058fc:	f7ff ff56 	bl	80057ac <LL_RCC_GetRTCClockSource>
 8005900:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005906:	69ba      	ldr	r2, [r7, #24]
 8005908:	429a      	cmp	r2, r3
 800590a:	d03c      	beq.n	8005986 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800590c:	f7fe fc68 	bl	80041e0 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8005910:	69bb      	ldr	r3, [r7, #24]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d105      	bne.n	8005922 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800591a:	4618      	mov	r0, r3
 800591c:	f7ff ff30 	bl	8005780 <LL_RCC_SetRTCClockSource>
 8005920:	e02e      	b.n	8005980 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8005922:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005926:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800592a:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 800592c:	f7ff ff4b 	bl	80057c6 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8005930:	f7ff ff5a 	bl	80057e8 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8005934:	697b      	ldr	r3, [r7, #20]
 8005936:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800593e:	4313      	orrs	r3, r2
 8005940:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8005942:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005946:	697b      	ldr	r3, [r7, #20]
 8005948:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 800594c:	f7ff fdf0 	bl	8005530 <LL_RCC_LSE_IsEnabled>
 8005950:	4603      	mov	r3, r0
 8005952:	2b01      	cmp	r3, #1
 8005954:	d114      	bne.n	8005980 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005956:	f7fc fe9d 	bl	8002694 <HAL_GetTick>
 800595a:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 800595c:	e00b      	b.n	8005976 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800595e:	f7fc fe99 	bl	8002694 <HAL_GetTick>
 8005962:	4602      	mov	r2, r0
 8005964:	693b      	ldr	r3, [r7, #16]
 8005966:	1ad3      	subs	r3, r2, r3
 8005968:	f241 3288 	movw	r2, #5000	; 0x1388
 800596c:	4293      	cmp	r3, r2
 800596e:	d902      	bls.n	8005976 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8005970:	2303      	movs	r3, #3
 8005972:	77fb      	strb	r3, [r7, #31]
              break;
 8005974:	e004      	b.n	8005980 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8005976:	f7ff fded 	bl	8005554 <LL_RCC_LSE_IsReady>
 800597a:	4603      	mov	r3, r0
 800597c:	2b01      	cmp	r3, #1
 800597e:	d1ee      	bne.n	800595e <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8005980:	7ffb      	ldrb	r3, [r7, #31]
 8005982:	77bb      	strb	r3, [r7, #30]
 8005984:	e001      	b.n	800598a <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005986:	7ffb      	ldrb	r3, [r7, #31]
 8005988:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f003 0301 	and.w	r3, r3, #1
 8005992:	2b00      	cmp	r3, #0
 8005994:	d004      	beq.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	699b      	ldr	r3, [r3, #24]
 800599a:	4618      	mov	r0, r3
 800599c:	f7ff fe2a 	bl	80055f4 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f003 0302 	and.w	r3, r3, #2
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d004      	beq.n	80059b6 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	69db      	ldr	r3, [r3, #28]
 80059b0:	4618      	mov	r0, r3
 80059b2:	f7ff fe35 	bl	8005620 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f003 0310 	and.w	r3, r3, #16
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d004      	beq.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059c6:	4618      	mov	r0, r3
 80059c8:	f7ff fe5d 	bl	8005686 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f003 0320 	and.w	r3, r3, #32
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d004      	beq.n	80059e2 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059dc:	4618      	mov	r0, r3
 80059de:	f7ff fe52 	bl	8005686 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f003 0304 	and.w	r3, r3, #4
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d004      	beq.n	80059f8 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6a1b      	ldr	r3, [r3, #32]
 80059f2:	4618      	mov	r0, r3
 80059f4:	f7ff fe2a 	bl	800564c <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f003 0308 	and.w	r3, r3, #8
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d004      	beq.n	8005a0e <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a08:	4618      	mov	r0, r3
 8005a0a:	f7ff fe1f 	bl	800564c <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d022      	beq.n	8005a60 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a1e:	4618      	mov	r0, r3
 8005a20:	f7ff fe8d 	bl	800573e <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a28:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a2c:	d107      	bne.n	8005a3e <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8005a2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a32:	68db      	ldr	r3, [r3, #12]
 8005a34:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005a38:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005a3c:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a42:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005a46:	d10b      	bne.n	8005a60 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	3304      	adds	r3, #4
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	f000 f8dd 	bl	8005c0c <RCCEx_PLLSAI1_ConfigNQ>
 8005a52:	4603      	mov	r3, r0
 8005a54:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8005a56:	7ffb      	ldrb	r3, [r7, #31]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d001      	beq.n	8005a60 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8005a5c:	7ffb      	ldrb	r3, [r7, #31]
 8005a5e:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d02b      	beq.n	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a74:	d008      	beq.n	8005a88 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a7a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005a7e:	d003      	beq.n	8005a88 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d105      	bne.n	8005a94 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	f7ff fe2a 	bl	80056e6 <LL_RCC_SetRNGClockSource>
 8005a92:	e00a      	b.n	8005aaa <HAL_RCCEx_PeriphCLKConfig+0x240>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a9c:	60fb      	str	r3, [r7, #12]
 8005a9e:	2000      	movs	r0, #0
 8005aa0:	f7ff fe21 	bl	80056e6 <LL_RCC_SetRNGClockSource>
 8005aa4:	68f8      	ldr	r0, [r7, #12]
 8005aa6:	f7ff fe34 	bl	8005712 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aae:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8005ab2:	d107      	bne.n	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8005ab4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ab8:	68db      	ldr	r3, [r3, #12]
 8005aba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005abe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005ac2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d022      	beq.n	8005b16 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	f7ff fe3d 	bl	8005754 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ade:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ae2:	d107      	bne.n	8005af4 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005ae4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ae8:	68db      	ldr	r3, [r3, #12]
 8005aea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005aee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005af2:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005af8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005afc:	d10b      	bne.n	8005b16 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	3304      	adds	r3, #4
 8005b02:	4618      	mov	r0, r3
 8005b04:	f000 f8dd 	bl	8005cc2 <RCCEx_PLLSAI1_ConfigNR>
 8005b08:	4603      	mov	r3, r0
 8005b0a:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8005b0c:	7ffb      	ldrb	r3, [r7, #31]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d001      	beq.n	8005b16 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8005b12:	7ffb      	ldrb	r3, [r7, #31]
 8005b14:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d004      	beq.n	8005b2c <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b26:	4618      	mov	r0, r3
 8005b28:	f7ff fd26 	bl	8005578 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d009      	beq.n	8005b4c <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	f7ff fd45 	bl	80055cc <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b46:	4618      	mov	r0, r3
 8005b48:	f7ff fd2c 	bl	80055a4 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8005b4c:	7fbb      	ldrb	r3, [r7, #30]
}
 8005b4e:	4618      	mov	r0, r3
 8005b50:	3720      	adds	r7, #32
 8005b52:	46bd      	mov	sp, r7
 8005b54:	bd80      	pop	{r7, pc}

08005b56 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005b56:	b580      	push	{r7, lr}
 8005b58:	b084      	sub	sp, #16
 8005b5a:	af00      	add	r7, sp, #0
 8005b5c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005b5e:	2300      	movs	r3, #0
 8005b60:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005b62:	f7ff fe61 	bl	8005828 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005b66:	f7fc fd95 	bl	8002694 <HAL_GetTick>
 8005b6a:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005b6c:	e009      	b.n	8005b82 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005b6e:	f7fc fd91 	bl	8002694 <HAL_GetTick>
 8005b72:	4602      	mov	r2, r0
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	1ad3      	subs	r3, r2, r3
 8005b78:	2b02      	cmp	r3, #2
 8005b7a:	d902      	bls.n	8005b82 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8005b7c:	2303      	movs	r3, #3
 8005b7e:	73fb      	strb	r3, [r7, #15]
      break;
 8005b80:	e004      	b.n	8005b8c <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005b82:	f7ff fe60 	bl	8005846 <LL_RCC_PLLSAI1_IsReady>
 8005b86:	4603      	mov	r3, r0
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d1f0      	bne.n	8005b6e <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8005b8c:	7bfb      	ldrb	r3, [r7, #15]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d137      	bne.n	8005c02 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005b92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b96:	691b      	ldr	r3, [r3, #16]
 8005b98:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	021b      	lsls	r3, r3, #8
 8005ba2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005ba6:	4313      	orrs	r3, r2
 8005ba8:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8005baa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bae:	691b      	ldr	r3, [r3, #16]
 8005bb0:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	685b      	ldr	r3, [r3, #4]
 8005bb8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005bbc:	4313      	orrs	r3, r2
 8005bbe:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005bc0:	f7ff fe23 	bl	800580a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005bc4:	f7fc fd66 	bl	8002694 <HAL_GetTick>
 8005bc8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005bca:	e009      	b.n	8005be0 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005bcc:	f7fc fd62 	bl	8002694 <HAL_GetTick>
 8005bd0:	4602      	mov	r2, r0
 8005bd2:	68bb      	ldr	r3, [r7, #8]
 8005bd4:	1ad3      	subs	r3, r2, r3
 8005bd6:	2b02      	cmp	r3, #2
 8005bd8:	d902      	bls.n	8005be0 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8005bda:	2303      	movs	r3, #3
 8005bdc:	73fb      	strb	r3, [r7, #15]
        break;
 8005bde:	e004      	b.n	8005bea <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005be0:	f7ff fe31 	bl	8005846 <LL_RCC_PLLSAI1_IsReady>
 8005be4:	4603      	mov	r3, r0
 8005be6:	2b01      	cmp	r3, #1
 8005be8:	d1f0      	bne.n	8005bcc <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8005bea:	7bfb      	ldrb	r3, [r7, #15]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d108      	bne.n	8005c02 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005bf0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bf4:	691a      	ldr	r2, [r3, #16]
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	691b      	ldr	r3, [r3, #16]
 8005bfa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005bfe:	4313      	orrs	r3, r2
 8005c00:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005c02:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c04:	4618      	mov	r0, r3
 8005c06:	3710      	adds	r7, #16
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	bd80      	pop	{r7, pc}

08005c0c <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b084      	sub	sp, #16
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005c14:	2300      	movs	r3, #0
 8005c16:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005c18:	f7ff fe06 	bl	8005828 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005c1c:	f7fc fd3a 	bl	8002694 <HAL_GetTick>
 8005c20:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005c22:	e009      	b.n	8005c38 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005c24:	f7fc fd36 	bl	8002694 <HAL_GetTick>
 8005c28:	4602      	mov	r2, r0
 8005c2a:	68bb      	ldr	r3, [r7, #8]
 8005c2c:	1ad3      	subs	r3, r2, r3
 8005c2e:	2b02      	cmp	r3, #2
 8005c30:	d902      	bls.n	8005c38 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8005c32:	2303      	movs	r3, #3
 8005c34:	73fb      	strb	r3, [r7, #15]
      break;
 8005c36:	e004      	b.n	8005c42 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005c38:	f7ff fe05 	bl	8005846 <LL_RCC_PLLSAI1_IsReady>
 8005c3c:	4603      	mov	r3, r0
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d1f0      	bne.n	8005c24 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8005c42:	7bfb      	ldrb	r3, [r7, #15]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d137      	bne.n	8005cb8 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005c48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c4c:	691b      	ldr	r3, [r3, #16]
 8005c4e:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	021b      	lsls	r3, r3, #8
 8005c58:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005c5c:	4313      	orrs	r3, r2
 8005c5e:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8005c60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c64:	691b      	ldr	r3, [r3, #16]
 8005c66:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	689b      	ldr	r3, [r3, #8]
 8005c6e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005c72:	4313      	orrs	r3, r2
 8005c74:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005c76:	f7ff fdc8 	bl	800580a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c7a:	f7fc fd0b 	bl	8002694 <HAL_GetTick>
 8005c7e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005c80:	e009      	b.n	8005c96 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005c82:	f7fc fd07 	bl	8002694 <HAL_GetTick>
 8005c86:	4602      	mov	r2, r0
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	1ad3      	subs	r3, r2, r3
 8005c8c:	2b02      	cmp	r3, #2
 8005c8e:	d902      	bls.n	8005c96 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8005c90:	2303      	movs	r3, #3
 8005c92:	73fb      	strb	r3, [r7, #15]
        break;
 8005c94:	e004      	b.n	8005ca0 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005c96:	f7ff fdd6 	bl	8005846 <LL_RCC_PLLSAI1_IsReady>
 8005c9a:	4603      	mov	r3, r0
 8005c9c:	2b01      	cmp	r3, #1
 8005c9e:	d1f0      	bne.n	8005c82 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8005ca0:	7bfb      	ldrb	r3, [r7, #15]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d108      	bne.n	8005cb8 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005ca6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005caa:	691a      	ldr	r2, [r3, #16]
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	691b      	ldr	r3, [r3, #16]
 8005cb0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005cb4:	4313      	orrs	r3, r2
 8005cb6:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005cb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cba:	4618      	mov	r0, r3
 8005cbc:	3710      	adds	r7, #16
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	bd80      	pop	{r7, pc}

08005cc2 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005cc2:	b580      	push	{r7, lr}
 8005cc4:	b084      	sub	sp, #16
 8005cc6:	af00      	add	r7, sp, #0
 8005cc8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005cca:	2300      	movs	r3, #0
 8005ccc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005cce:	f7ff fdab 	bl	8005828 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005cd2:	f7fc fcdf 	bl	8002694 <HAL_GetTick>
 8005cd6:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005cd8:	e009      	b.n	8005cee <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005cda:	f7fc fcdb 	bl	8002694 <HAL_GetTick>
 8005cde:	4602      	mov	r2, r0
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	1ad3      	subs	r3, r2, r3
 8005ce4:	2b02      	cmp	r3, #2
 8005ce6:	d902      	bls.n	8005cee <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8005ce8:	2303      	movs	r3, #3
 8005cea:	73fb      	strb	r3, [r7, #15]
      break;
 8005cec:	e004      	b.n	8005cf8 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005cee:	f7ff fdaa 	bl	8005846 <LL_RCC_PLLSAI1_IsReady>
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d1f0      	bne.n	8005cda <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8005cf8:	7bfb      	ldrb	r3, [r7, #15]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d137      	bne.n	8005d6e <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005cfe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d02:	691b      	ldr	r3, [r3, #16]
 8005d04:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	021b      	lsls	r3, r3, #8
 8005d0e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005d12:	4313      	orrs	r3, r2
 8005d14:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8005d16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d1a:	691b      	ldr	r3, [r3, #16]
 8005d1c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	68db      	ldr	r3, [r3, #12]
 8005d24:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005d28:	4313      	orrs	r3, r2
 8005d2a:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005d2c:	f7ff fd6d 	bl	800580a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d30:	f7fc fcb0 	bl	8002694 <HAL_GetTick>
 8005d34:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005d36:	e009      	b.n	8005d4c <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005d38:	f7fc fcac 	bl	8002694 <HAL_GetTick>
 8005d3c:	4602      	mov	r2, r0
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	1ad3      	subs	r3, r2, r3
 8005d42:	2b02      	cmp	r3, #2
 8005d44:	d902      	bls.n	8005d4c <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8005d46:	2303      	movs	r3, #3
 8005d48:	73fb      	strb	r3, [r7, #15]
        break;
 8005d4a:	e004      	b.n	8005d56 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005d4c:	f7ff fd7b 	bl	8005846 <LL_RCC_PLLSAI1_IsReady>
 8005d50:	4603      	mov	r3, r0
 8005d52:	2b01      	cmp	r3, #1
 8005d54:	d1f0      	bne.n	8005d38 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8005d56:	7bfb      	ldrb	r3, [r7, #15]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d108      	bne.n	8005d6e <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005d5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d60:	691a      	ldr	r2, [r3, #16]
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	691b      	ldr	r3, [r3, #16]
 8005d66:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005d6a:	4313      	orrs	r3, r2
 8005d6c:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005d6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d70:	4618      	mov	r0, r3
 8005d72:	3710      	adds	r7, #16
 8005d74:	46bd      	mov	sp, r7
 8005d76:	bd80      	pop	{r7, pc}

08005d78 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b084      	sub	sp, #16
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d101      	bne.n	8005d8a <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8005d86:	2301      	movs	r3, #1
 8005d88:	e09f      	b.n	8005eca <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005d90:	b2db      	uxtb	r3, r3
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d106      	bne.n	8005da4 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2200      	movs	r2, #0
 8005d9a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005d9e:	6878      	ldr	r0, [r7, #4]
 8005da0:	f7fc fa0a 	bl	80021b8 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2202      	movs	r2, #2
 8005da8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8005dac:	4b49      	ldr	r3, [pc, #292]	; (8005ed4 <HAL_RTC_Init+0x15c>)
 8005dae:	68db      	ldr	r3, [r3, #12]
 8005db0:	f003 0310 	and.w	r3, r3, #16
 8005db4:	2b10      	cmp	r3, #16
 8005db6:	d07e      	beq.n	8005eb6 <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	22ca      	movs	r2, #202	; 0xca
 8005dbe:	625a      	str	r2, [r3, #36]	; 0x24
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	2253      	movs	r2, #83	; 0x53
 8005dc6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005dc8:	6878      	ldr	r0, [r7, #4]
 8005dca:	f000 f8ab 	bl	8005f24 <RTC_EnterInitMode>
 8005dce:	4603      	mov	r3, r0
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d00a      	beq.n	8005dea <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	22ff      	movs	r2, #255	; 0xff
 8005dda:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2204      	movs	r2, #4
 8005de0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      status = HAL_ERROR;
 8005de4:	2301      	movs	r3, #1
 8005de6:	73fb      	strb	r3, [r7, #15]
 8005de8:	e067      	b.n	8005eba <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	689b      	ldr	r3, [r3, #8]
 8005df0:	687a      	ldr	r2, [r7, #4]
 8005df2:	6812      	ldr	r2, [r2, #0]
 8005df4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005df8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005dfc:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	6899      	ldr	r1, [r3, #8]
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	685a      	ldr	r2, [r3, #4]
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	691b      	ldr	r3, [r3, #16]
 8005e0c:	431a      	orrs	r2, r3
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	699b      	ldr	r3, [r3, #24]
 8005e12:	431a      	orrs	r2, r3
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	430a      	orrs	r2, r1
 8005e1a:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	687a      	ldr	r2, [r7, #4]
 8005e22:	68d2      	ldr	r2, [r2, #12]
 8005e24:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	6919      	ldr	r1, [r3, #16]
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	689b      	ldr	r3, [r3, #8]
 8005e30:	041a      	lsls	r2, r3, #16
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	430a      	orrs	r2, r1
 8005e38:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	68da      	ldr	r2, [r3, #12]
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005e48:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f022 0203 	bic.w	r2, r2, #3
 8005e58:	64da      	str	r2, [r3, #76]	; 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	69da      	ldr	r2, [r3, #28]
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	695b      	ldr	r3, [r3, #20]
 8005e68:	431a      	orrs	r2, r3
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	430a      	orrs	r2, r1
 8005e70:	64da      	str	r2, [r3, #76]	; 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	689b      	ldr	r3, [r3, #8]
 8005e78:	f003 0320 	and.w	r3, r3, #32
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d113      	bne.n	8005ea8 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005e80:	6878      	ldr	r0, [r7, #4]
 8005e82:	f000 f829 	bl	8005ed8 <HAL_RTC_WaitForSynchro>
 8005e86:	4603      	mov	r3, r0
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d00d      	beq.n	8005ea8 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	22ff      	movs	r2, #255	; 0xff
 8005e92:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2204      	movs	r2, #4
 8005e98:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 8005ea4:	2301      	movs	r3, #1
 8005ea6:	e010      	b.n	8005eca <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	22ff      	movs	r2, #255	; 0xff
 8005eae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      status = HAL_OK;
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	73fb      	strb	r3, [r7, #15]
 8005eb4:	e001      	b.n	8005eba <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8005eba:	7bfb      	ldrb	r3, [r7, #15]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d103      	bne.n	8005ec8 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2201      	movs	r2, #1
 8005ec4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  return status;
 8005ec8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005eca:	4618      	mov	r0, r3
 8005ecc:	3710      	adds	r7, #16
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	bd80      	pop	{r7, pc}
 8005ed2:	bf00      	nop
 8005ed4:	40002800 	.word	0x40002800

08005ed8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b084      	sub	sp, #16
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	68da      	ldr	r2, [r3, #12]
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005eee:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8005ef0:	f7fc fbd0 	bl	8002694 <HAL_GetTick>
 8005ef4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005ef6:	e009      	b.n	8005f0c <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005ef8:	f7fc fbcc 	bl	8002694 <HAL_GetTick>
 8005efc:	4602      	mov	r2, r0
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	1ad3      	subs	r3, r2, r3
 8005f02:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005f06:	d901      	bls.n	8005f0c <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8005f08:	2303      	movs	r3, #3
 8005f0a:	e007      	b.n	8005f1c <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	68db      	ldr	r3, [r3, #12]
 8005f12:	f003 0320 	and.w	r3, r3, #32
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d0ee      	beq.n	8005ef8 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8005f1a:	2300      	movs	r3, #0
}
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	3710      	adds	r7, #16
 8005f20:	46bd      	mov	sp, r7
 8005f22:	bd80      	pop	{r7, pc}

08005f24 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b084      	sub	sp, #16
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	68db      	ldr	r3, [r3, #12]
 8005f32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d119      	bne.n	8005f6e <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005f42:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005f44:	f7fc fba6 	bl	8002694 <HAL_GetTick>
 8005f48:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005f4a:	e009      	b.n	8005f60 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8005f4c:	f7fc fba2 	bl	8002694 <HAL_GetTick>
 8005f50:	4602      	mov	r2, r0
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	1ad3      	subs	r3, r2, r3
 8005f56:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005f5a:	d901      	bls.n	8005f60 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8005f5c:	2303      	movs	r3, #3
 8005f5e:	e007      	b.n	8005f70 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	68db      	ldr	r3, [r3, #12]
 8005f66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d0ee      	beq.n	8005f4c <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8005f6e:	2300      	movs	r3, #0
}
 8005f70:	4618      	mov	r0, r3
 8005f72:	3710      	adds	r7, #16
 8005f74:	46bd      	mov	sp, r7
 8005f76:	bd80      	pop	{r7, pc}

08005f78 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b086      	sub	sp, #24
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	60f8      	str	r0, [r7, #12]
 8005f80:	60b9      	str	r1, [r7, #8]
 8005f82:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005f8a:	2b01      	cmp	r3, #1
 8005f8c:	d101      	bne.n	8005f92 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 8005f8e:	2302      	movs	r3, #2
 8005f90:	e0a8      	b.n	80060e4 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	2201      	movs	r2, #1
 8005f96:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	2202      	movs	r2, #2
 8005f9e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	22ca      	movs	r2, #202	; 0xca
 8005fa8:	625a      	str	r2, [r3, #36]	; 0x24
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	2253      	movs	r2, #83	; 0x53
 8005fb0:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	689b      	ldr	r3, [r3, #8]
 8005fb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d020      	beq.n	8006002 <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 8005fc0:	f7fc fb68 	bl	8002694 <HAL_GetTick>
 8005fc4:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8005fc6:	e015      	b.n	8005ff4 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005fc8:	f7fc fb64 	bl	8002694 <HAL_GetTick>
 8005fcc:	4602      	mov	r2, r0
 8005fce:	697b      	ldr	r3, [r7, #20]
 8005fd0:	1ad3      	subs	r3, r2, r3
 8005fd2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005fd6:	d90d      	bls.n	8005ff4 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	22ff      	movs	r2, #255	; 0xff
 8005fde:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	2203      	movs	r2, #3
 8005fe4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	2200      	movs	r2, #0
 8005fec:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8005ff0:	2303      	movs	r3, #3
 8005ff2:	e077      	b.n	80060e4 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	68db      	ldr	r3, [r3, #12]
 8005ffa:	f003 0304 	and.w	r3, r3, #4
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d1e2      	bne.n	8005fc8 <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	689a      	ldr	r2, [r3, #8]
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006010:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	68db      	ldr	r3, [r3, #12]
 8006018:	b2da      	uxtb	r2, r3
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8006022:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8006024:	f7fc fb36 	bl	8002694 <HAL_GetTick>
 8006028:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800602a:	e015      	b.n	8006058 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800602c:	f7fc fb32 	bl	8002694 <HAL_GetTick>
 8006030:	4602      	mov	r2, r0
 8006032:	697b      	ldr	r3, [r7, #20]
 8006034:	1ad3      	subs	r3, r2, r3
 8006036:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800603a:	d90d      	bls.n	8006058 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	22ff      	movs	r2, #255	; 0xff
 8006042:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	2203      	movs	r2, #3
 8006048:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	2200      	movs	r2, #0
 8006050:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 8006054:	2303      	movs	r3, #3
 8006056:	e045      	b.n	80060e4 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	68db      	ldr	r3, [r3, #12]
 800605e:	f003 0304 	and.w	r3, r3, #4
 8006062:	2b00      	cmp	r3, #0
 8006064:	d0e2      	beq.n	800602c <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	68ba      	ldr	r2, [r7, #8]
 800606c:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	689a      	ldr	r2, [r3, #8]
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f022 0207 	bic.w	r2, r2, #7
 800607c:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	6899      	ldr	r1, [r3, #8]
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	687a      	ldr	r2, [r7, #4]
 800608a:	430a      	orrs	r2, r1
 800608c:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 800608e:	4b17      	ldr	r3, [pc, #92]	; (80060ec <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8006090:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006094:	4a15      	ldr	r2, [pc, #84]	; (80060ec <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8006096:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800609a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 800609e:	4b13      	ldr	r3, [pc, #76]	; (80060ec <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	4a12      	ldr	r2, [pc, #72]	; (80060ec <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80060a4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80060a8:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	689a      	ldr	r2, [r3, #8]
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80060b8:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	689a      	ldr	r2, [r3, #8]
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80060c8:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	22ff      	movs	r2, #255	; 0xff
 80060d0:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	2201      	movs	r2, #1
 80060d6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	2200      	movs	r2, #0
 80060de:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80060e2:	2300      	movs	r3, #0
}
 80060e4:	4618      	mov	r0, r3
 80060e6:	3718      	adds	r7, #24
 80060e8:	46bd      	mov	sp, r7
 80060ea:	bd80      	pop	{r7, pc}
 80060ec:	58000800 	.word	0x58000800

080060f0 <LL_RCC_GetUSARTClockSource>:
{
 80060f0:	b480      	push	{r7}
 80060f2:	b083      	sub	sp, #12
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 80060f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060fc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	4013      	ands	r3, r2
}
 8006104:	4618      	mov	r0, r3
 8006106:	370c      	adds	r7, #12
 8006108:	46bd      	mov	sp, r7
 800610a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610e:	4770      	bx	lr

08006110 <LL_RCC_GetLPUARTClockSource>:
{
 8006110:	b480      	push	{r7}
 8006112:	b083      	sub	sp, #12
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8006118:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800611c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	4013      	ands	r3, r2
}
 8006124:	4618      	mov	r0, r3
 8006126:	370c      	adds	r7, #12
 8006128:	46bd      	mov	sp, r7
 800612a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612e:	4770      	bx	lr

08006130 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b082      	sub	sp, #8
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d101      	bne.n	8006142 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800613e:	2301      	movs	r3, #1
 8006140:	e042      	b.n	80061c8 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006148:	2b00      	cmp	r3, #0
 800614a:	d106      	bne.n	800615a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2200      	movs	r2, #0
 8006150:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006154:	6878      	ldr	r0, [r7, #4]
 8006156:	f7fc f863 	bl	8002220 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2224      	movs	r2, #36	; 0x24
 800615e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	681a      	ldr	r2, [r3, #0]
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f022 0201 	bic.w	r2, r2, #1
 8006170:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006172:	6878      	ldr	r0, [r7, #4]
 8006174:	f000 f8ba 	bl	80062ec <UART_SetConfig>
 8006178:	4603      	mov	r3, r0
 800617a:	2b01      	cmp	r3, #1
 800617c:	d101      	bne.n	8006182 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800617e:	2301      	movs	r3, #1
 8006180:	e022      	b.n	80061c8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006186:	2b00      	cmp	r3, #0
 8006188:	d002      	beq.n	8006190 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800618a:	6878      	ldr	r0, [r7, #4]
 800618c:	f000 fad6 	bl	800673c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	685a      	ldr	r2, [r3, #4]
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800619e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	689a      	ldr	r2, [r3, #8]
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80061ae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	681a      	ldr	r2, [r3, #0]
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f042 0201 	orr.w	r2, r2, #1
 80061be:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80061c0:	6878      	ldr	r0, [r7, #4]
 80061c2:	f000 fb5d 	bl	8006880 <UART_CheckIdleState>
 80061c6:	4603      	mov	r3, r0
}
 80061c8:	4618      	mov	r0, r3
 80061ca:	3708      	adds	r7, #8
 80061cc:	46bd      	mov	sp, r7
 80061ce:	bd80      	pop	{r7, pc}

080061d0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b08a      	sub	sp, #40	; 0x28
 80061d4:	af02      	add	r7, sp, #8
 80061d6:	60f8      	str	r0, [r7, #12]
 80061d8:	60b9      	str	r1, [r7, #8]
 80061da:	603b      	str	r3, [r7, #0]
 80061dc:	4613      	mov	r3, r2
 80061de:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061e6:	2b20      	cmp	r3, #32
 80061e8:	d17b      	bne.n	80062e2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80061ea:	68bb      	ldr	r3, [r7, #8]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d002      	beq.n	80061f6 <HAL_UART_Transmit+0x26>
 80061f0:	88fb      	ldrh	r3, [r7, #6]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d101      	bne.n	80061fa <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80061f6:	2301      	movs	r3, #1
 80061f8:	e074      	b.n	80062e4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	2200      	movs	r2, #0
 80061fe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	2221      	movs	r2, #33	; 0x21
 8006206:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800620a:	f7fc fa43 	bl	8002694 <HAL_GetTick>
 800620e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	88fa      	ldrh	r2, [r7, #6]
 8006214:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	88fa      	ldrh	r2, [r7, #6]
 800621c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	689b      	ldr	r3, [r3, #8]
 8006224:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006228:	d108      	bne.n	800623c <HAL_UART_Transmit+0x6c>
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	691b      	ldr	r3, [r3, #16]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d104      	bne.n	800623c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006232:	2300      	movs	r3, #0
 8006234:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006236:	68bb      	ldr	r3, [r7, #8]
 8006238:	61bb      	str	r3, [r7, #24]
 800623a:	e003      	b.n	8006244 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800623c:	68bb      	ldr	r3, [r7, #8]
 800623e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006240:	2300      	movs	r3, #0
 8006242:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006244:	e030      	b.n	80062a8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	9300      	str	r3, [sp, #0]
 800624a:	697b      	ldr	r3, [r7, #20]
 800624c:	2200      	movs	r2, #0
 800624e:	2180      	movs	r1, #128	; 0x80
 8006250:	68f8      	ldr	r0, [r7, #12]
 8006252:	f000 fbbf 	bl	80069d4 <UART_WaitOnFlagUntilTimeout>
 8006256:	4603      	mov	r3, r0
 8006258:	2b00      	cmp	r3, #0
 800625a:	d005      	beq.n	8006268 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	2220      	movs	r2, #32
 8006260:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8006264:	2303      	movs	r3, #3
 8006266:	e03d      	b.n	80062e4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8006268:	69fb      	ldr	r3, [r7, #28]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d10b      	bne.n	8006286 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800626e:	69bb      	ldr	r3, [r7, #24]
 8006270:	881b      	ldrh	r3, [r3, #0]
 8006272:	461a      	mov	r2, r3
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800627c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800627e:	69bb      	ldr	r3, [r7, #24]
 8006280:	3302      	adds	r3, #2
 8006282:	61bb      	str	r3, [r7, #24]
 8006284:	e007      	b.n	8006296 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006286:	69fb      	ldr	r3, [r7, #28]
 8006288:	781a      	ldrb	r2, [r3, #0]
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006290:	69fb      	ldr	r3, [r7, #28]
 8006292:	3301      	adds	r3, #1
 8006294:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800629c:	b29b      	uxth	r3, r3
 800629e:	3b01      	subs	r3, #1
 80062a0:	b29a      	uxth	r2, r3
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80062ae:	b29b      	uxth	r3, r3
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d1c8      	bne.n	8006246 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	9300      	str	r3, [sp, #0]
 80062b8:	697b      	ldr	r3, [r7, #20]
 80062ba:	2200      	movs	r2, #0
 80062bc:	2140      	movs	r1, #64	; 0x40
 80062be:	68f8      	ldr	r0, [r7, #12]
 80062c0:	f000 fb88 	bl	80069d4 <UART_WaitOnFlagUntilTimeout>
 80062c4:	4603      	mov	r3, r0
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d005      	beq.n	80062d6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	2220      	movs	r2, #32
 80062ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 80062d2:	2303      	movs	r3, #3
 80062d4:	e006      	b.n	80062e4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	2220      	movs	r2, #32
 80062da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80062de:	2300      	movs	r3, #0
 80062e0:	e000      	b.n	80062e4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80062e2:	2302      	movs	r3, #2
  }
}
 80062e4:	4618      	mov	r0, r3
 80062e6:	3720      	adds	r7, #32
 80062e8:	46bd      	mov	sp, r7
 80062ea:	bd80      	pop	{r7, pc}

080062ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80062ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80062f0:	b08c      	sub	sp, #48	; 0x30
 80062f2:	af00      	add	r7, sp, #0
 80062f4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80062f6:	2300      	movs	r3, #0
 80062f8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80062fc:	697b      	ldr	r3, [r7, #20]
 80062fe:	689a      	ldr	r2, [r3, #8]
 8006300:	697b      	ldr	r3, [r7, #20]
 8006302:	691b      	ldr	r3, [r3, #16]
 8006304:	431a      	orrs	r2, r3
 8006306:	697b      	ldr	r3, [r7, #20]
 8006308:	695b      	ldr	r3, [r3, #20]
 800630a:	431a      	orrs	r2, r3
 800630c:	697b      	ldr	r3, [r7, #20]
 800630e:	69db      	ldr	r3, [r3, #28]
 8006310:	4313      	orrs	r3, r2
 8006312:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006314:	697b      	ldr	r3, [r7, #20]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	681a      	ldr	r2, [r3, #0]
 800631a:	4baf      	ldr	r3, [pc, #700]	; (80065d8 <UART_SetConfig+0x2ec>)
 800631c:	4013      	ands	r3, r2
 800631e:	697a      	ldr	r2, [r7, #20]
 8006320:	6812      	ldr	r2, [r2, #0]
 8006322:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006324:	430b      	orrs	r3, r1
 8006326:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006328:	697b      	ldr	r3, [r7, #20]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	685b      	ldr	r3, [r3, #4]
 800632e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006332:	697b      	ldr	r3, [r7, #20]
 8006334:	68da      	ldr	r2, [r3, #12]
 8006336:	697b      	ldr	r3, [r7, #20]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	430a      	orrs	r2, r1
 800633c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800633e:	697b      	ldr	r3, [r7, #20]
 8006340:	699b      	ldr	r3, [r3, #24]
 8006342:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006344:	697b      	ldr	r3, [r7, #20]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	4aa4      	ldr	r2, [pc, #656]	; (80065dc <UART_SetConfig+0x2f0>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d004      	beq.n	8006358 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800634e:	697b      	ldr	r3, [r7, #20]
 8006350:	6a1b      	ldr	r3, [r3, #32]
 8006352:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006354:	4313      	orrs	r3, r2
 8006356:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006358:	697b      	ldr	r3, [r7, #20]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	689b      	ldr	r3, [r3, #8]
 800635e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8006362:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8006366:	697a      	ldr	r2, [r7, #20]
 8006368:	6812      	ldr	r2, [r2, #0]
 800636a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800636c:	430b      	orrs	r3, r1
 800636e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006370:	697b      	ldr	r3, [r7, #20]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006376:	f023 010f 	bic.w	r1, r3, #15
 800637a:	697b      	ldr	r3, [r7, #20]
 800637c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800637e:	697b      	ldr	r3, [r7, #20]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	430a      	orrs	r2, r1
 8006384:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006386:	697b      	ldr	r3, [r7, #20]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	4a95      	ldr	r2, [pc, #596]	; (80065e0 <UART_SetConfig+0x2f4>)
 800638c:	4293      	cmp	r3, r2
 800638e:	d125      	bne.n	80063dc <UART_SetConfig+0xf0>
 8006390:	2003      	movs	r0, #3
 8006392:	f7ff fead 	bl	80060f0 <LL_RCC_GetUSARTClockSource>
 8006396:	4603      	mov	r3, r0
 8006398:	2b03      	cmp	r3, #3
 800639a:	d81b      	bhi.n	80063d4 <UART_SetConfig+0xe8>
 800639c:	a201      	add	r2, pc, #4	; (adr r2, 80063a4 <UART_SetConfig+0xb8>)
 800639e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063a2:	bf00      	nop
 80063a4:	080063b5 	.word	0x080063b5
 80063a8:	080063c5 	.word	0x080063c5
 80063ac:	080063bd 	.word	0x080063bd
 80063b0:	080063cd 	.word	0x080063cd
 80063b4:	2301      	movs	r3, #1
 80063b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80063ba:	e042      	b.n	8006442 <UART_SetConfig+0x156>
 80063bc:	2302      	movs	r3, #2
 80063be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80063c2:	e03e      	b.n	8006442 <UART_SetConfig+0x156>
 80063c4:	2304      	movs	r3, #4
 80063c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80063ca:	e03a      	b.n	8006442 <UART_SetConfig+0x156>
 80063cc:	2308      	movs	r3, #8
 80063ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80063d2:	e036      	b.n	8006442 <UART_SetConfig+0x156>
 80063d4:	2310      	movs	r3, #16
 80063d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80063da:	e032      	b.n	8006442 <UART_SetConfig+0x156>
 80063dc:	697b      	ldr	r3, [r7, #20]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4a7e      	ldr	r2, [pc, #504]	; (80065dc <UART_SetConfig+0x2f0>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d12a      	bne.n	800643c <UART_SetConfig+0x150>
 80063e6:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80063ea:	f7ff fe91 	bl	8006110 <LL_RCC_GetLPUARTClockSource>
 80063ee:	4603      	mov	r3, r0
 80063f0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80063f4:	d01a      	beq.n	800642c <UART_SetConfig+0x140>
 80063f6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80063fa:	d81b      	bhi.n	8006434 <UART_SetConfig+0x148>
 80063fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006400:	d00c      	beq.n	800641c <UART_SetConfig+0x130>
 8006402:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006406:	d815      	bhi.n	8006434 <UART_SetConfig+0x148>
 8006408:	2b00      	cmp	r3, #0
 800640a:	d003      	beq.n	8006414 <UART_SetConfig+0x128>
 800640c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006410:	d008      	beq.n	8006424 <UART_SetConfig+0x138>
 8006412:	e00f      	b.n	8006434 <UART_SetConfig+0x148>
 8006414:	2300      	movs	r3, #0
 8006416:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800641a:	e012      	b.n	8006442 <UART_SetConfig+0x156>
 800641c:	2302      	movs	r3, #2
 800641e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006422:	e00e      	b.n	8006442 <UART_SetConfig+0x156>
 8006424:	2304      	movs	r3, #4
 8006426:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800642a:	e00a      	b.n	8006442 <UART_SetConfig+0x156>
 800642c:	2308      	movs	r3, #8
 800642e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006432:	e006      	b.n	8006442 <UART_SetConfig+0x156>
 8006434:	2310      	movs	r3, #16
 8006436:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800643a:	e002      	b.n	8006442 <UART_SetConfig+0x156>
 800643c:	2310      	movs	r3, #16
 800643e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006442:	697b      	ldr	r3, [r7, #20]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	4a65      	ldr	r2, [pc, #404]	; (80065dc <UART_SetConfig+0x2f0>)
 8006448:	4293      	cmp	r3, r2
 800644a:	f040 8097 	bne.w	800657c <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800644e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006452:	2b08      	cmp	r3, #8
 8006454:	d823      	bhi.n	800649e <UART_SetConfig+0x1b2>
 8006456:	a201      	add	r2, pc, #4	; (adr r2, 800645c <UART_SetConfig+0x170>)
 8006458:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800645c:	08006481 	.word	0x08006481
 8006460:	0800649f 	.word	0x0800649f
 8006464:	08006489 	.word	0x08006489
 8006468:	0800649f 	.word	0x0800649f
 800646c:	0800648f 	.word	0x0800648f
 8006470:	0800649f 	.word	0x0800649f
 8006474:	0800649f 	.word	0x0800649f
 8006478:	0800649f 	.word	0x0800649f
 800647c:	08006497 	.word	0x08006497
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006480:	f7fe ff76 	bl	8005370 <HAL_RCC_GetPCLK1Freq>
 8006484:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006486:	e010      	b.n	80064aa <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006488:	4b56      	ldr	r3, [pc, #344]	; (80065e4 <UART_SetConfig+0x2f8>)
 800648a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800648c:	e00d      	b.n	80064aa <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800648e:	f7fe feef 	bl	8005270 <HAL_RCC_GetSysClockFreq>
 8006492:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006494:	e009      	b.n	80064aa <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006496:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800649a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800649c:	e005      	b.n	80064aa <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 800649e:	2300      	movs	r3, #0
 80064a0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80064a2:	2301      	movs	r3, #1
 80064a4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80064a8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80064aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	f000 812b 	beq.w	8006708 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80064b2:	697b      	ldr	r3, [r7, #20]
 80064b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064b6:	4a4c      	ldr	r2, [pc, #304]	; (80065e8 <UART_SetConfig+0x2fc>)
 80064b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80064bc:	461a      	mov	r2, r3
 80064be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80064c4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80064c6:	697b      	ldr	r3, [r7, #20]
 80064c8:	685a      	ldr	r2, [r3, #4]
 80064ca:	4613      	mov	r3, r2
 80064cc:	005b      	lsls	r3, r3, #1
 80064ce:	4413      	add	r3, r2
 80064d0:	69ba      	ldr	r2, [r7, #24]
 80064d2:	429a      	cmp	r2, r3
 80064d4:	d305      	bcc.n	80064e2 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80064d6:	697b      	ldr	r3, [r7, #20]
 80064d8:	685b      	ldr	r3, [r3, #4]
 80064da:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80064dc:	69ba      	ldr	r2, [r7, #24]
 80064de:	429a      	cmp	r2, r3
 80064e0:	d903      	bls.n	80064ea <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 80064e2:	2301      	movs	r3, #1
 80064e4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80064e8:	e10e      	b.n	8006708 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80064ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ec:	2200      	movs	r2, #0
 80064ee:	60bb      	str	r3, [r7, #8]
 80064f0:	60fa      	str	r2, [r7, #12]
 80064f2:	697b      	ldr	r3, [r7, #20]
 80064f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064f6:	4a3c      	ldr	r2, [pc, #240]	; (80065e8 <UART_SetConfig+0x2fc>)
 80064f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80064fc:	b29b      	uxth	r3, r3
 80064fe:	2200      	movs	r2, #0
 8006500:	603b      	str	r3, [r7, #0]
 8006502:	607a      	str	r2, [r7, #4]
 8006504:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006508:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800650c:	f7f9 fe90 	bl	8000230 <__aeabi_uldivmod>
 8006510:	4602      	mov	r2, r0
 8006512:	460b      	mov	r3, r1
 8006514:	4610      	mov	r0, r2
 8006516:	4619      	mov	r1, r3
 8006518:	f04f 0200 	mov.w	r2, #0
 800651c:	f04f 0300 	mov.w	r3, #0
 8006520:	020b      	lsls	r3, r1, #8
 8006522:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006526:	0202      	lsls	r2, r0, #8
 8006528:	6979      	ldr	r1, [r7, #20]
 800652a:	6849      	ldr	r1, [r1, #4]
 800652c:	0849      	lsrs	r1, r1, #1
 800652e:	2000      	movs	r0, #0
 8006530:	460c      	mov	r4, r1
 8006532:	4605      	mov	r5, r0
 8006534:	eb12 0804 	adds.w	r8, r2, r4
 8006538:	eb43 0905 	adc.w	r9, r3, r5
 800653c:	697b      	ldr	r3, [r7, #20]
 800653e:	685b      	ldr	r3, [r3, #4]
 8006540:	2200      	movs	r2, #0
 8006542:	469a      	mov	sl, r3
 8006544:	4693      	mov	fp, r2
 8006546:	4652      	mov	r2, sl
 8006548:	465b      	mov	r3, fp
 800654a:	4640      	mov	r0, r8
 800654c:	4649      	mov	r1, r9
 800654e:	f7f9 fe6f 	bl	8000230 <__aeabi_uldivmod>
 8006552:	4602      	mov	r2, r0
 8006554:	460b      	mov	r3, r1
 8006556:	4613      	mov	r3, r2
 8006558:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800655a:	6a3b      	ldr	r3, [r7, #32]
 800655c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006560:	d308      	bcc.n	8006574 <UART_SetConfig+0x288>
 8006562:	6a3b      	ldr	r3, [r7, #32]
 8006564:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006568:	d204      	bcs.n	8006574 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 800656a:	697b      	ldr	r3, [r7, #20]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	6a3a      	ldr	r2, [r7, #32]
 8006570:	60da      	str	r2, [r3, #12]
 8006572:	e0c9      	b.n	8006708 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8006574:	2301      	movs	r3, #1
 8006576:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800657a:	e0c5      	b.n	8006708 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800657c:	697b      	ldr	r3, [r7, #20]
 800657e:	69db      	ldr	r3, [r3, #28]
 8006580:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006584:	d16d      	bne.n	8006662 <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8006586:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800658a:	3b01      	subs	r3, #1
 800658c:	2b07      	cmp	r3, #7
 800658e:	d82d      	bhi.n	80065ec <UART_SetConfig+0x300>
 8006590:	a201      	add	r2, pc, #4	; (adr r2, 8006598 <UART_SetConfig+0x2ac>)
 8006592:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006596:	bf00      	nop
 8006598:	080065b9 	.word	0x080065b9
 800659c:	080065c1 	.word	0x080065c1
 80065a0:	080065ed 	.word	0x080065ed
 80065a4:	080065c7 	.word	0x080065c7
 80065a8:	080065ed 	.word	0x080065ed
 80065ac:	080065ed 	.word	0x080065ed
 80065b0:	080065ed 	.word	0x080065ed
 80065b4:	080065cf 	.word	0x080065cf
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80065b8:	f7fe fef0 	bl	800539c <HAL_RCC_GetPCLK2Freq>
 80065bc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80065be:	e01b      	b.n	80065f8 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80065c0:	4b08      	ldr	r3, [pc, #32]	; (80065e4 <UART_SetConfig+0x2f8>)
 80065c2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80065c4:	e018      	b.n	80065f8 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80065c6:	f7fe fe53 	bl	8005270 <HAL_RCC_GetSysClockFreq>
 80065ca:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80065cc:	e014      	b.n	80065f8 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80065ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80065d2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80065d4:	e010      	b.n	80065f8 <UART_SetConfig+0x30c>
 80065d6:	bf00      	nop
 80065d8:	cfff69f3 	.word	0xcfff69f3
 80065dc:	40008000 	.word	0x40008000
 80065e0:	40013800 	.word	0x40013800
 80065e4:	00f42400 	.word	0x00f42400
 80065e8:	0800b36c 	.word	0x0800b36c
      default:
        pclk = 0U;
 80065ec:	2300      	movs	r3, #0
 80065ee:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80065f0:	2301      	movs	r3, #1
 80065f2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80065f6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80065f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	f000 8084 	beq.w	8006708 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006600:	697b      	ldr	r3, [r7, #20]
 8006602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006604:	4a4b      	ldr	r2, [pc, #300]	; (8006734 <UART_SetConfig+0x448>)
 8006606:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800660a:	461a      	mov	r2, r3
 800660c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800660e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006612:	005a      	lsls	r2, r3, #1
 8006614:	697b      	ldr	r3, [r7, #20]
 8006616:	685b      	ldr	r3, [r3, #4]
 8006618:	085b      	lsrs	r3, r3, #1
 800661a:	441a      	add	r2, r3
 800661c:	697b      	ldr	r3, [r7, #20]
 800661e:	685b      	ldr	r3, [r3, #4]
 8006620:	fbb2 f3f3 	udiv	r3, r2, r3
 8006624:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006626:	6a3b      	ldr	r3, [r7, #32]
 8006628:	2b0f      	cmp	r3, #15
 800662a:	d916      	bls.n	800665a <UART_SetConfig+0x36e>
 800662c:	6a3b      	ldr	r3, [r7, #32]
 800662e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006632:	d212      	bcs.n	800665a <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006634:	6a3b      	ldr	r3, [r7, #32]
 8006636:	b29b      	uxth	r3, r3
 8006638:	f023 030f 	bic.w	r3, r3, #15
 800663c:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800663e:	6a3b      	ldr	r3, [r7, #32]
 8006640:	085b      	lsrs	r3, r3, #1
 8006642:	b29b      	uxth	r3, r3
 8006644:	f003 0307 	and.w	r3, r3, #7
 8006648:	b29a      	uxth	r2, r3
 800664a:	8bfb      	ldrh	r3, [r7, #30]
 800664c:	4313      	orrs	r3, r2
 800664e:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006650:	697b      	ldr	r3, [r7, #20]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	8bfa      	ldrh	r2, [r7, #30]
 8006656:	60da      	str	r2, [r3, #12]
 8006658:	e056      	b.n	8006708 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800665a:	2301      	movs	r3, #1
 800665c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006660:	e052      	b.n	8006708 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006662:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006666:	3b01      	subs	r3, #1
 8006668:	2b07      	cmp	r3, #7
 800666a:	d822      	bhi.n	80066b2 <UART_SetConfig+0x3c6>
 800666c:	a201      	add	r2, pc, #4	; (adr r2, 8006674 <UART_SetConfig+0x388>)
 800666e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006672:	bf00      	nop
 8006674:	08006695 	.word	0x08006695
 8006678:	0800669d 	.word	0x0800669d
 800667c:	080066b3 	.word	0x080066b3
 8006680:	080066a3 	.word	0x080066a3
 8006684:	080066b3 	.word	0x080066b3
 8006688:	080066b3 	.word	0x080066b3
 800668c:	080066b3 	.word	0x080066b3
 8006690:	080066ab 	.word	0x080066ab
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006694:	f7fe fe82 	bl	800539c <HAL_RCC_GetPCLK2Freq>
 8006698:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800669a:	e010      	b.n	80066be <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800669c:	4b26      	ldr	r3, [pc, #152]	; (8006738 <UART_SetConfig+0x44c>)
 800669e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80066a0:	e00d      	b.n	80066be <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80066a2:	f7fe fde5 	bl	8005270 <HAL_RCC_GetSysClockFreq>
 80066a6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80066a8:	e009      	b.n	80066be <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80066aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80066ae:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80066b0:	e005      	b.n	80066be <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 80066b2:	2300      	movs	r3, #0
 80066b4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80066b6:	2301      	movs	r3, #1
 80066b8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80066bc:	bf00      	nop
    }

    if (pclk != 0U)
 80066be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d021      	beq.n	8006708 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80066c4:	697b      	ldr	r3, [r7, #20]
 80066c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066c8:	4a1a      	ldr	r2, [pc, #104]	; (8006734 <UART_SetConfig+0x448>)
 80066ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80066ce:	461a      	mov	r2, r3
 80066d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066d2:	fbb3 f2f2 	udiv	r2, r3, r2
 80066d6:	697b      	ldr	r3, [r7, #20]
 80066d8:	685b      	ldr	r3, [r3, #4]
 80066da:	085b      	lsrs	r3, r3, #1
 80066dc:	441a      	add	r2, r3
 80066de:	697b      	ldr	r3, [r7, #20]
 80066e0:	685b      	ldr	r3, [r3, #4]
 80066e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80066e6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80066e8:	6a3b      	ldr	r3, [r7, #32]
 80066ea:	2b0f      	cmp	r3, #15
 80066ec:	d909      	bls.n	8006702 <UART_SetConfig+0x416>
 80066ee:	6a3b      	ldr	r3, [r7, #32]
 80066f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066f4:	d205      	bcs.n	8006702 <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80066f6:	6a3b      	ldr	r3, [r7, #32]
 80066f8:	b29a      	uxth	r2, r3
 80066fa:	697b      	ldr	r3, [r7, #20]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	60da      	str	r2, [r3, #12]
 8006700:	e002      	b.n	8006708 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8006702:	2301      	movs	r3, #1
 8006704:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006708:	697b      	ldr	r3, [r7, #20]
 800670a:	2201      	movs	r2, #1
 800670c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006710:	697b      	ldr	r3, [r7, #20]
 8006712:	2201      	movs	r2, #1
 8006714:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006718:	697b      	ldr	r3, [r7, #20]
 800671a:	2200      	movs	r2, #0
 800671c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800671e:	697b      	ldr	r3, [r7, #20]
 8006720:	2200      	movs	r2, #0
 8006722:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8006724:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8006728:	4618      	mov	r0, r3
 800672a:	3730      	adds	r7, #48	; 0x30
 800672c:	46bd      	mov	sp, r7
 800672e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006732:	bf00      	nop
 8006734:	0800b36c 	.word	0x0800b36c
 8006738:	00f42400 	.word	0x00f42400

0800673c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800673c:	b480      	push	{r7}
 800673e:	b083      	sub	sp, #12
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006748:	f003 0301 	and.w	r3, r3, #1
 800674c:	2b00      	cmp	r3, #0
 800674e:	d00a      	beq.n	8006766 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	685b      	ldr	r3, [r3, #4]
 8006756:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	430a      	orrs	r2, r1
 8006764:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800676a:	f003 0302 	and.w	r3, r3, #2
 800676e:	2b00      	cmp	r3, #0
 8006770:	d00a      	beq.n	8006788 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	685b      	ldr	r3, [r3, #4]
 8006778:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	430a      	orrs	r2, r1
 8006786:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800678c:	f003 0304 	and.w	r3, r3, #4
 8006790:	2b00      	cmp	r3, #0
 8006792:	d00a      	beq.n	80067aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	685b      	ldr	r3, [r3, #4]
 800679a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	430a      	orrs	r2, r1
 80067a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067ae:	f003 0308 	and.w	r3, r3, #8
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d00a      	beq.n	80067cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	685b      	ldr	r3, [r3, #4]
 80067bc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	430a      	orrs	r2, r1
 80067ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067d0:	f003 0310 	and.w	r3, r3, #16
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d00a      	beq.n	80067ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	689b      	ldr	r3, [r3, #8]
 80067de:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	430a      	orrs	r2, r1
 80067ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067f2:	f003 0320 	and.w	r3, r3, #32
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d00a      	beq.n	8006810 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	689b      	ldr	r3, [r3, #8]
 8006800:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	430a      	orrs	r2, r1
 800680e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006814:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006818:	2b00      	cmp	r3, #0
 800681a:	d01a      	beq.n	8006852 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	685b      	ldr	r3, [r3, #4]
 8006822:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	430a      	orrs	r2, r1
 8006830:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006836:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800683a:	d10a      	bne.n	8006852 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	685b      	ldr	r3, [r3, #4]
 8006842:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	430a      	orrs	r2, r1
 8006850:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006856:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800685a:	2b00      	cmp	r3, #0
 800685c:	d00a      	beq.n	8006874 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	685b      	ldr	r3, [r3, #4]
 8006864:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	430a      	orrs	r2, r1
 8006872:	605a      	str	r2, [r3, #4]
  }
}
 8006874:	bf00      	nop
 8006876:	370c      	adds	r7, #12
 8006878:	46bd      	mov	sp, r7
 800687a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687e:	4770      	bx	lr

08006880 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b098      	sub	sp, #96	; 0x60
 8006884:	af02      	add	r7, sp, #8
 8006886:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2200      	movs	r2, #0
 800688c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006890:	f7fb ff00 	bl	8002694 <HAL_GetTick>
 8006894:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f003 0308 	and.w	r3, r3, #8
 80068a0:	2b08      	cmp	r3, #8
 80068a2:	d12f      	bne.n	8006904 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80068a4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80068a8:	9300      	str	r3, [sp, #0]
 80068aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80068ac:	2200      	movs	r2, #0
 80068ae:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80068b2:	6878      	ldr	r0, [r7, #4]
 80068b4:	f000 f88e 	bl	80069d4 <UART_WaitOnFlagUntilTimeout>
 80068b8:	4603      	mov	r3, r0
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d022      	beq.n	8006904 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068c6:	e853 3f00 	ldrex	r3, [r3]
 80068ca:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80068cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80068d2:	653b      	str	r3, [r7, #80]	; 0x50
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	461a      	mov	r2, r3
 80068da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80068dc:	647b      	str	r3, [r7, #68]	; 0x44
 80068de:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068e0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80068e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80068e4:	e841 2300 	strex	r3, r2, [r1]
 80068e8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80068ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d1e6      	bne.n	80068be <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2220      	movs	r2, #32
 80068f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2200      	movs	r2, #0
 80068fc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006900:	2303      	movs	r3, #3
 8006902:	e063      	b.n	80069cc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f003 0304 	and.w	r3, r3, #4
 800690e:	2b04      	cmp	r3, #4
 8006910:	d149      	bne.n	80069a6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006912:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006916:	9300      	str	r3, [sp, #0]
 8006918:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800691a:	2200      	movs	r2, #0
 800691c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006920:	6878      	ldr	r0, [r7, #4]
 8006922:	f000 f857 	bl	80069d4 <UART_WaitOnFlagUntilTimeout>
 8006926:	4603      	mov	r3, r0
 8006928:	2b00      	cmp	r3, #0
 800692a:	d03c      	beq.n	80069a6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006934:	e853 3f00 	ldrex	r3, [r3]
 8006938:	623b      	str	r3, [r7, #32]
   return(result);
 800693a:	6a3b      	ldr	r3, [r7, #32]
 800693c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006940:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	461a      	mov	r2, r3
 8006948:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800694a:	633b      	str	r3, [r7, #48]	; 0x30
 800694c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800694e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006950:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006952:	e841 2300 	strex	r3, r2, [r1]
 8006956:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800695a:	2b00      	cmp	r3, #0
 800695c:	d1e6      	bne.n	800692c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	3308      	adds	r3, #8
 8006964:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006966:	693b      	ldr	r3, [r7, #16]
 8006968:	e853 3f00 	ldrex	r3, [r3]
 800696c:	60fb      	str	r3, [r7, #12]
   return(result);
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	f023 0301 	bic.w	r3, r3, #1
 8006974:	64bb      	str	r3, [r7, #72]	; 0x48
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	3308      	adds	r3, #8
 800697c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800697e:	61fa      	str	r2, [r7, #28]
 8006980:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006982:	69b9      	ldr	r1, [r7, #24]
 8006984:	69fa      	ldr	r2, [r7, #28]
 8006986:	e841 2300 	strex	r3, r2, [r1]
 800698a:	617b      	str	r3, [r7, #20]
   return(result);
 800698c:	697b      	ldr	r3, [r7, #20]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d1e5      	bne.n	800695e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2220      	movs	r2, #32
 8006996:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2200      	movs	r2, #0
 800699e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80069a2:	2303      	movs	r3, #3
 80069a4:	e012      	b.n	80069cc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2220      	movs	r2, #32
 80069aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	2220      	movs	r2, #32
 80069b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2200      	movs	r2, #0
 80069ba:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2200      	movs	r2, #0
 80069c0:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2200      	movs	r2, #0
 80069c6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80069ca:	2300      	movs	r3, #0
}
 80069cc:	4618      	mov	r0, r3
 80069ce:	3758      	adds	r7, #88	; 0x58
 80069d0:	46bd      	mov	sp, r7
 80069d2:	bd80      	pop	{r7, pc}

080069d4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b084      	sub	sp, #16
 80069d8:	af00      	add	r7, sp, #0
 80069da:	60f8      	str	r0, [r7, #12]
 80069dc:	60b9      	str	r1, [r7, #8]
 80069de:	603b      	str	r3, [r7, #0]
 80069e0:	4613      	mov	r3, r2
 80069e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80069e4:	e049      	b.n	8006a7a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80069e6:	69bb      	ldr	r3, [r7, #24]
 80069e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80069ec:	d045      	beq.n	8006a7a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069ee:	f7fb fe51 	bl	8002694 <HAL_GetTick>
 80069f2:	4602      	mov	r2, r0
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	1ad3      	subs	r3, r2, r3
 80069f8:	69ba      	ldr	r2, [r7, #24]
 80069fa:	429a      	cmp	r2, r3
 80069fc:	d302      	bcc.n	8006a04 <UART_WaitOnFlagUntilTimeout+0x30>
 80069fe:	69bb      	ldr	r3, [r7, #24]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d101      	bne.n	8006a08 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006a04:	2303      	movs	r3, #3
 8006a06:	e048      	b.n	8006a9a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f003 0304 	and.w	r3, r3, #4
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d031      	beq.n	8006a7a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	69db      	ldr	r3, [r3, #28]
 8006a1c:	f003 0308 	and.w	r3, r3, #8
 8006a20:	2b08      	cmp	r3, #8
 8006a22:	d110      	bne.n	8006a46 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	2208      	movs	r2, #8
 8006a2a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8006a2c:	68f8      	ldr	r0, [r7, #12]
 8006a2e:	f000 f838 	bl	8006aa2 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	2208      	movs	r2, #8
 8006a36:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8006a42:	2301      	movs	r3, #1
 8006a44:	e029      	b.n	8006a9a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	69db      	ldr	r3, [r3, #28]
 8006a4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006a50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a54:	d111      	bne.n	8006a7a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006a5e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006a60:	68f8      	ldr	r0, [r7, #12]
 8006a62:	f000 f81e 	bl	8006aa2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	2220      	movs	r2, #32
 8006a6a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	2200      	movs	r2, #0
 8006a72:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8006a76:	2303      	movs	r3, #3
 8006a78:	e00f      	b.n	8006a9a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	69da      	ldr	r2, [r3, #28]
 8006a80:	68bb      	ldr	r3, [r7, #8]
 8006a82:	4013      	ands	r3, r2
 8006a84:	68ba      	ldr	r2, [r7, #8]
 8006a86:	429a      	cmp	r2, r3
 8006a88:	bf0c      	ite	eq
 8006a8a:	2301      	moveq	r3, #1
 8006a8c:	2300      	movne	r3, #0
 8006a8e:	b2db      	uxtb	r3, r3
 8006a90:	461a      	mov	r2, r3
 8006a92:	79fb      	ldrb	r3, [r7, #7]
 8006a94:	429a      	cmp	r2, r3
 8006a96:	d0a6      	beq.n	80069e6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006a98:	2300      	movs	r3, #0
}
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	3710      	adds	r7, #16
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	bd80      	pop	{r7, pc}

08006aa2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006aa2:	b480      	push	{r7}
 8006aa4:	b095      	sub	sp, #84	; 0x54
 8006aa6:	af00      	add	r7, sp, #0
 8006aa8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ab0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ab2:	e853 3f00 	ldrex	r3, [r3]
 8006ab6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006abe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	461a      	mov	r2, r3
 8006ac6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ac8:	643b      	str	r3, [r7, #64]	; 0x40
 8006aca:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006acc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006ace:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006ad0:	e841 2300 	strex	r3, r2, [r1]
 8006ad4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006ad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d1e6      	bne.n	8006aaa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	3308      	adds	r3, #8
 8006ae2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ae4:	6a3b      	ldr	r3, [r7, #32]
 8006ae6:	e853 3f00 	ldrex	r3, [r3]
 8006aea:	61fb      	str	r3, [r7, #28]
   return(result);
 8006aec:	69fb      	ldr	r3, [r7, #28]
 8006aee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006af2:	f023 0301 	bic.w	r3, r3, #1
 8006af6:	64bb      	str	r3, [r7, #72]	; 0x48
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	3308      	adds	r3, #8
 8006afe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b00:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006b02:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b04:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006b06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b08:	e841 2300 	strex	r3, r2, [r1]
 8006b0c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d1e3      	bne.n	8006adc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b18:	2b01      	cmp	r3, #1
 8006b1a:	d118      	bne.n	8006b4e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	e853 3f00 	ldrex	r3, [r3]
 8006b28:	60bb      	str	r3, [r7, #8]
   return(result);
 8006b2a:	68bb      	ldr	r3, [r7, #8]
 8006b2c:	f023 0310 	bic.w	r3, r3, #16
 8006b30:	647b      	str	r3, [r7, #68]	; 0x44
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	461a      	mov	r2, r3
 8006b38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b3a:	61bb      	str	r3, [r7, #24]
 8006b3c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b3e:	6979      	ldr	r1, [r7, #20]
 8006b40:	69ba      	ldr	r2, [r7, #24]
 8006b42:	e841 2300 	strex	r3, r2, [r1]
 8006b46:	613b      	str	r3, [r7, #16]
   return(result);
 8006b48:	693b      	ldr	r3, [r7, #16]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d1e6      	bne.n	8006b1c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2220      	movs	r2, #32
 8006b52:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2200      	movs	r2, #0
 8006b5a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2200      	movs	r2, #0
 8006b60:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006b62:	bf00      	nop
 8006b64:	3754      	adds	r7, #84	; 0x54
 8006b66:	46bd      	mov	sp, r7
 8006b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6c:	4770      	bx	lr

08006b6e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006b6e:	b480      	push	{r7}
 8006b70:	b085      	sub	sp, #20
 8006b72:	af00      	add	r7, sp, #0
 8006b74:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006b7c:	2b01      	cmp	r3, #1
 8006b7e:	d101      	bne.n	8006b84 <HAL_UARTEx_DisableFifoMode+0x16>
 8006b80:	2302      	movs	r3, #2
 8006b82:	e027      	b.n	8006bd4 <HAL_UARTEx_DisableFifoMode+0x66>
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2201      	movs	r2, #1
 8006b88:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2224      	movs	r2, #36	; 0x24
 8006b90:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	681a      	ldr	r2, [r3, #0]
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f022 0201 	bic.w	r2, r2, #1
 8006baa:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006bb2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	68fa      	ldr	r2, [r7, #12]
 8006bc0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2220      	movs	r2, #32
 8006bc6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2200      	movs	r2, #0
 8006bce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006bd2:	2300      	movs	r3, #0
}
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	3714      	adds	r7, #20
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bde:	4770      	bx	lr

08006be0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b084      	sub	sp, #16
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
 8006be8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006bf0:	2b01      	cmp	r3, #1
 8006bf2:	d101      	bne.n	8006bf8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006bf4:	2302      	movs	r3, #2
 8006bf6:	e02d      	b.n	8006c54 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2201      	movs	r2, #1
 8006bfc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2224      	movs	r2, #36	; 0x24
 8006c04:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	681a      	ldr	r2, [r3, #0]
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f022 0201 	bic.w	r2, r2, #1
 8006c1e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	689b      	ldr	r3, [r3, #8]
 8006c26:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	683a      	ldr	r2, [r7, #0]
 8006c30:	430a      	orrs	r2, r1
 8006c32:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006c34:	6878      	ldr	r0, [r7, #4]
 8006c36:	f000 f84f 	bl	8006cd8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	68fa      	ldr	r2, [r7, #12]
 8006c40:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2220      	movs	r2, #32
 8006c46:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006c52:	2300      	movs	r3, #0
}
 8006c54:	4618      	mov	r0, r3
 8006c56:	3710      	adds	r7, #16
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	bd80      	pop	{r7, pc}

08006c5c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b084      	sub	sp, #16
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
 8006c64:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006c6c:	2b01      	cmp	r3, #1
 8006c6e:	d101      	bne.n	8006c74 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006c70:	2302      	movs	r3, #2
 8006c72:	e02d      	b.n	8006cd0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2201      	movs	r2, #1
 8006c78:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2224      	movs	r2, #36	; 0x24
 8006c80:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	681a      	ldr	r2, [r3, #0]
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f022 0201 	bic.w	r2, r2, #1
 8006c9a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	689b      	ldr	r3, [r3, #8]
 8006ca2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	683a      	ldr	r2, [r7, #0]
 8006cac:	430a      	orrs	r2, r1
 8006cae:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006cb0:	6878      	ldr	r0, [r7, #4]
 8006cb2:	f000 f811 	bl	8006cd8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	68fa      	ldr	r2, [r7, #12]
 8006cbc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	2220      	movs	r2, #32
 8006cc2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2200      	movs	r2, #0
 8006cca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006cce:	2300      	movs	r3, #0
}
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	3710      	adds	r7, #16
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	bd80      	pop	{r7, pc}

08006cd8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006cd8:	b480      	push	{r7}
 8006cda:	b085      	sub	sp, #20
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d108      	bne.n	8006cfa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2201      	movs	r2, #1
 8006cec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2201      	movs	r2, #1
 8006cf4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006cf8:	e031      	b.n	8006d5e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006cfa:	2308      	movs	r3, #8
 8006cfc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006cfe:	2308      	movs	r3, #8
 8006d00:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	689b      	ldr	r3, [r3, #8]
 8006d08:	0e5b      	lsrs	r3, r3, #25
 8006d0a:	b2db      	uxtb	r3, r3
 8006d0c:	f003 0307 	and.w	r3, r3, #7
 8006d10:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	689b      	ldr	r3, [r3, #8]
 8006d18:	0f5b      	lsrs	r3, r3, #29
 8006d1a:	b2db      	uxtb	r3, r3
 8006d1c:	f003 0307 	and.w	r3, r3, #7
 8006d20:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006d22:	7bbb      	ldrb	r3, [r7, #14]
 8006d24:	7b3a      	ldrb	r2, [r7, #12]
 8006d26:	4911      	ldr	r1, [pc, #68]	; (8006d6c <UARTEx_SetNbDataToProcess+0x94>)
 8006d28:	5c8a      	ldrb	r2, [r1, r2]
 8006d2a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006d2e:	7b3a      	ldrb	r2, [r7, #12]
 8006d30:	490f      	ldr	r1, [pc, #60]	; (8006d70 <UARTEx_SetNbDataToProcess+0x98>)
 8006d32:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006d34:	fb93 f3f2 	sdiv	r3, r3, r2
 8006d38:	b29a      	uxth	r2, r3
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006d40:	7bfb      	ldrb	r3, [r7, #15]
 8006d42:	7b7a      	ldrb	r2, [r7, #13]
 8006d44:	4909      	ldr	r1, [pc, #36]	; (8006d6c <UARTEx_SetNbDataToProcess+0x94>)
 8006d46:	5c8a      	ldrb	r2, [r1, r2]
 8006d48:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006d4c:	7b7a      	ldrb	r2, [r7, #13]
 8006d4e:	4908      	ldr	r1, [pc, #32]	; (8006d70 <UARTEx_SetNbDataToProcess+0x98>)
 8006d50:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006d52:	fb93 f3f2 	sdiv	r3, r3, r2
 8006d56:	b29a      	uxth	r2, r3
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006d5e:	bf00      	nop
 8006d60:	3714      	adds	r7, #20
 8006d62:	46bd      	mov	sp, r7
 8006d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d68:	4770      	bx	lr
 8006d6a:	bf00      	nop
 8006d6c:	0800b384 	.word	0x0800b384
 8006d70:	0800b38c 	.word	0x0800b38c

08006d74 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b088      	sub	sp, #32
 8006d78:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006d7e:	f107 0308 	add.w	r3, r7, #8
 8006d82:	2218      	movs	r2, #24
 8006d84:	2100      	movs	r1, #0
 8006d86:	4618      	mov	r0, r3
 8006d88:	f001 f8d8 	bl	8007f3c <Osal_MemSet>
  rq.ogf = 0x3f;
 8006d8c:	233f      	movs	r3, #63	; 0x3f
 8006d8e:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 8006d90:	2381      	movs	r3, #129	; 0x81
 8006d92:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8006d94:	1dfb      	adds	r3, r7, #7
 8006d96:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8006d98:	2301      	movs	r3, #1
 8006d9a:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006d9c:	f107 0308 	add.w	r3, r7, #8
 8006da0:	2100      	movs	r1, #0
 8006da2:	4618      	mov	r0, r3
 8006da4:	f001 fb54 	bl	8008450 <hci_send_req>
 8006da8:	4603      	mov	r3, r0
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	da01      	bge.n	8006db2 <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 8006dae:	23ff      	movs	r3, #255	; 0xff
 8006db0:	e000      	b.n	8006db4 <aci_gap_set_non_discoverable+0x40>
  return status;
 8006db2:	79fb      	ldrb	r3, [r7, #7]
}
 8006db4:	4618      	mov	r0, r3
 8006db6:	3720      	adds	r7, #32
 8006db8:	46bd      	mov	sp, r7
 8006dba:	bd80      	pop	{r7, pc}

08006dbc <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Slave_Conn_Interval_Min,
                                     uint16_t Slave_Conn_Interval_Max )
{
 8006dbc:	b5b0      	push	{r4, r5, r7, lr}
 8006dbe:	b0ce      	sub	sp, #312	; 0x138
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	4605      	mov	r5, r0
 8006dc4:	460c      	mov	r4, r1
 8006dc6:	4610      	mov	r0, r2
 8006dc8:	4619      	mov	r1, r3
 8006dca:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006dce:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8006dd2:	462a      	mov	r2, r5
 8006dd4:	701a      	strb	r2, [r3, #0]
 8006dd6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006dda:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8006dde:	4622      	mov	r2, r4
 8006de0:	801a      	strh	r2, [r3, #0]
 8006de2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006de6:	f5a3 739b 	sub.w	r3, r3, #310	; 0x136
 8006dea:	4602      	mov	r2, r0
 8006dec:	801a      	strh	r2, [r3, #0]
 8006dee:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006df2:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8006df6:	460a      	mov	r2, r1
 8006df8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 8006dfa:	f107 0310 	add.w	r3, r7, #16
 8006dfe:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 8006e02:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8006e06:	3308      	adds	r3, #8
 8006e08:	f107 0210 	add.w	r2, r7, #16
 8006e0c:	4413      	add	r3, r2
 8006e0e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 8006e12:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8006e16:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8006e1a:	4413      	add	r3, r2
 8006e1c:	3309      	adds	r3, #9
 8006e1e:	f107 0210 	add.w	r2, r7, #16
 8006e22:	4413      	add	r3, r2
 8006e24:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8006e28:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006e2c:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8006e30:	2200      	movs	r2, #0
 8006e32:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006e34:	2300      	movs	r3, #0
 8006e36:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Type = Advertising_Type;
 8006e3a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006e3e:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8006e42:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 8006e46:	7812      	ldrb	r2, [r2, #0]
 8006e48:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8006e4a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006e4e:	3301      	adds	r3, #1
 8006e50:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 8006e54:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006e58:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8006e5c:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 8006e60:	8812      	ldrh	r2, [r2, #0]
 8006e62:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 8006e66:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006e6a:	3302      	adds	r3, #2
 8006e6c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 8006e70:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006e74:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8006e78:	f5a2 729b 	sub.w	r2, r2, #310	; 0x136
 8006e7c:	8812      	ldrh	r2, [r2, #0]
 8006e7e:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 8006e82:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006e86:	3302      	adds	r3, #2
 8006e88:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 8006e8c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006e90:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8006e94:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8006e98:	7812      	ldrb	r2, [r2, #0]
 8006e9a:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8006e9c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006ea0:	3301      	adds	r3, #1
 8006ea2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 8006ea6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006eaa:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8006eae:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8006eb0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006eb4:	3301      	adds	r3, #1
 8006eb6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 8006eba:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006ebe:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8006ec2:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 8006ec4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006ec8:	3301      	adds	r3, #1
 8006eca:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 8006ece:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006ed2:	3308      	adds	r3, #8
 8006ed4:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8006ed8:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 8006edc:	4618      	mov	r0, r3
 8006ede:	f001 f81d 	bl	8007f1c <Osal_MemCpy>
    index_input += Local_Name_Length;
 8006ee2:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8006ee6:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8006eea:	4413      	add	r3, r2
 8006eec:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 8006ef0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006ef4:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8006ef8:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8006efa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006efe:	3301      	adds	r3, #1
 8006f00:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 8006f04:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006f08:	3301      	adds	r3, #1
 8006f0a:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8006f0e:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 8006f12:	4618      	mov	r0, r3
 8006f14:	f001 f802 	bl	8007f1c <Osal_MemCpy>
    index_input += Service_Uuid_length;
 8006f18:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8006f1c:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8006f20:	4413      	add	r3, r2
 8006f22:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Min = Slave_Conn_Interval_Min;
 8006f26:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f2a:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 8006f2e:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8006f30:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006f34:	3302      	adds	r3, #2
 8006f36:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Max = Slave_Conn_Interval_Max;
 8006f3a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f3e:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 8006f42:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 8006f44:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006f48:	3302      	adds	r3, #2
 8006f4a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006f4e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006f52:	2218      	movs	r2, #24
 8006f54:	2100      	movs	r1, #0
 8006f56:	4618      	mov	r0, r3
 8006f58:	f000 fff0 	bl	8007f3c <Osal_MemSet>
  rq.ogf = 0x3f;
 8006f5c:	233f      	movs	r3, #63	; 0x3f
 8006f5e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 8006f62:	2383      	movs	r3, #131	; 0x83
 8006f64:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8006f68:	f107 0310 	add.w	r3, r7, #16
 8006f6c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8006f70:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006f74:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8006f78:	f107 030f 	add.w	r3, r7, #15
 8006f7c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8006f80:	2301      	movs	r3, #1
 8006f82:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006f86:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006f8a:	2100      	movs	r1, #0
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	f001 fa5f 	bl	8008450 <hci_send_req>
 8006f92:	4603      	mov	r3, r0
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	da01      	bge.n	8006f9c <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 8006f98:	23ff      	movs	r3, #255	; 0xff
 8006f9a:	e004      	b.n	8006fa6 <aci_gap_set_discoverable+0x1ea>
  return status;
 8006f9c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8006fa0:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8006fa4:	781b      	ldrb	r3, [r3, #0]
}
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8006fac:	46bd      	mov	sp, r7
 8006fae:	bdb0      	pop	{r4, r5, r7, pc}

08006fb0 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b0cc      	sub	sp, #304	; 0x130
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	4602      	mov	r2, r0
 8006fb8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fbc:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8006fc0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 8006fc2:	f107 0310 	add.w	r3, r7, #16
 8006fc6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8006fca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fce:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->IO_Capability = IO_Capability;
 8006fdc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006fe0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006fe4:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8006fe8:	7812      	ldrb	r2, [r2, #0]
 8006fea:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8006fec:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006ff0:	3301      	adds	r3, #1
 8006ff2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006ff6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006ffa:	2218      	movs	r2, #24
 8006ffc:	2100      	movs	r1, #0
 8006ffe:	4618      	mov	r0, r3
 8007000:	f000 ff9c 	bl	8007f3c <Osal_MemSet>
  rq.ogf = 0x3f;
 8007004:	233f      	movs	r3, #63	; 0x3f
 8007006:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x085;
 800700a:	2385      	movs	r3, #133	; 0x85
 800700c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007010:	f107 0310 	add.w	r3, r7, #16
 8007014:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007018:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800701c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007020:	f107 030f 	add.w	r3, r7, #15
 8007024:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007028:	2301      	movs	r3, #1
 800702a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800702e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007032:	2100      	movs	r1, #0
 8007034:	4618      	mov	r0, r3
 8007036:	f001 fa0b 	bl	8008450 <hci_send_req>
 800703a:	4603      	mov	r3, r0
 800703c:	2b00      	cmp	r3, #0
 800703e:	da01      	bge.n	8007044 <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 8007040:	23ff      	movs	r3, #255	; 0xff
 8007042:	e004      	b.n	800704e <aci_gap_set_io_capability+0x9e>
  return status;
 8007044:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007048:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800704c:	781b      	ldrb	r3, [r3, #0]
}
 800704e:	4618      	mov	r0, r3
 8007050:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007054:	46bd      	mov	sp, r7
 8007056:	bd80      	pop	{r7, pc}

08007058 <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 8007058:	b5b0      	push	{r4, r5, r7, lr}
 800705a:	b0cc      	sub	sp, #304	; 0x130
 800705c:	af00      	add	r7, sp, #0
 800705e:	4605      	mov	r5, r0
 8007060:	460c      	mov	r4, r1
 8007062:	4610      	mov	r0, r2
 8007064:	4619      	mov	r1, r3
 8007066:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800706a:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800706e:	462a      	mov	r2, r5
 8007070:	701a      	strb	r2, [r3, #0]
 8007072:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007076:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800707a:	4622      	mov	r2, r4
 800707c:	701a      	strb	r2, [r3, #0]
 800707e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007082:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8007086:	4602      	mov	r2, r0
 8007088:	701a      	strb	r2, [r3, #0]
 800708a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800708e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007092:	460a      	mov	r2, r1
 8007094:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 8007096:	f107 0310 	add.w	r3, r7, #16
 800709a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800709e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070a2:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80070a6:	2200      	movs	r2, #0
 80070a8:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80070aa:	2300      	movs	r3, #0
 80070ac:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 80070b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070b4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80070b8:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 80070bc:	7812      	ldrb	r2, [r2, #0]
 80070be:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80070c0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80070c4:	3301      	adds	r3, #1
 80070c6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->MITM_Mode = MITM_Mode;
 80070ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070ce:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80070d2:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80070d6:	7812      	ldrb	r2, [r2, #0]
 80070d8:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80070da:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80070de:	3301      	adds	r3, #1
 80070e0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->SC_Support = SC_Support;
 80070e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070e8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80070ec:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 80070f0:	7812      	ldrb	r2, [r2, #0]
 80070f2:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80070f4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80070f8:	3301      	adds	r3, #1
 80070fa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 80070fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007102:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007106:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800710a:	7812      	ldrb	r2, [r2, #0]
 800710c:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 800710e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007112:	3301      	adds	r3, #1
 8007114:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 8007118:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800711c:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 8007120:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8007122:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007126:	3301      	adds	r3, #1
 8007128:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 800712c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007130:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 8007134:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8007136:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800713a:	3301      	adds	r3, #1
 800713c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 8007140:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007144:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8007148:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800714a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800714e:	3301      	adds	r3, #1
 8007150:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 8007154:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007158:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800715c:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 8007160:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007164:	3304      	adds	r3, #4
 8007166:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 800716a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800716e:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8007172:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 8007174:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007178:	3301      	adds	r3, #1
 800717a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800717e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007182:	2218      	movs	r2, #24
 8007184:	2100      	movs	r1, #0
 8007186:	4618      	mov	r0, r3
 8007188:	f000 fed8 	bl	8007f3c <Osal_MemSet>
  rq.ogf = 0x3f;
 800718c:	233f      	movs	r3, #63	; 0x3f
 800718e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 8007192:	2386      	movs	r3, #134	; 0x86
 8007194:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007198:	f107 0310 	add.w	r3, r7, #16
 800719c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80071a0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80071a4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80071a8:	f107 030f 	add.w	r3, r7, #15
 80071ac:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80071b0:	2301      	movs	r3, #1
 80071b2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80071b6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80071ba:	2100      	movs	r1, #0
 80071bc:	4618      	mov	r0, r3
 80071be:	f001 f947 	bl	8008450 <hci_send_req>
 80071c2:	4603      	mov	r3, r0
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	da01      	bge.n	80071cc <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 80071c8:	23ff      	movs	r3, #255	; 0xff
 80071ca:	e004      	b.n	80071d6 <aci_gap_set_authentication_requirement+0x17e>
  return status;
 80071cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071d0:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80071d4:	781b      	ldrb	r3, [r3, #0]
}
 80071d6:	4618      	mov	r0, r3
 80071d8:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80071dc:	46bd      	mov	sp, r7
 80071de:	bdb0      	pop	{r4, r5, r7, pc}

080071e0 <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b0cc      	sub	sp, #304	; 0x130
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	4602      	mov	r2, r0
 80071e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071f0:	6019      	str	r1, [r3, #0]
 80071f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071f6:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80071fa:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 80071fc:	f107 0310 	add.w	r3, r7, #16
 8007200:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007204:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007208:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800720c:	2200      	movs	r2, #0
 800720e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007210:	2300      	movs	r3, #0
 8007212:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 8007216:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800721a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800721e:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8007222:	8812      	ldrh	r2, [r2, #0]
 8007224:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8007226:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800722a:	3302      	adds	r3, #2
 800722c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Pass_Key = Pass_Key;
 8007230:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007234:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007238:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 800723c:	6812      	ldr	r2, [r2, #0]
 800723e:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 8007242:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007246:	3304      	adds	r3, #4
 8007248:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800724c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007250:	2218      	movs	r2, #24
 8007252:	2100      	movs	r1, #0
 8007254:	4618      	mov	r0, r3
 8007256:	f000 fe71 	bl	8007f3c <Osal_MemSet>
  rq.ogf = 0x3f;
 800725a:	233f      	movs	r3, #63	; 0x3f
 800725c:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x088;
 8007260:	2388      	movs	r3, #136	; 0x88
 8007262:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007266:	f107 0310 	add.w	r3, r7, #16
 800726a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800726e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007272:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007276:	f107 030f 	add.w	r3, r7, #15
 800727a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800727e:	2301      	movs	r3, #1
 8007280:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007284:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007288:	2100      	movs	r1, #0
 800728a:	4618      	mov	r0, r3
 800728c:	f001 f8e0 	bl	8008450 <hci_send_req>
 8007290:	4603      	mov	r3, r0
 8007292:	2b00      	cmp	r3, #0
 8007294:	da01      	bge.n	800729a <aci_gap_pass_key_resp+0xba>
    return BLE_STATUS_TIMEOUT;
 8007296:	23ff      	movs	r3, #255	; 0xff
 8007298:	e004      	b.n	80072a4 <aci_gap_pass_key_resp+0xc4>
  return status;
 800729a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800729e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80072a2:	781b      	ldrb	r3, [r3, #0]
}
 80072a4:	4618      	mov	r0, r3
 80072a6:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80072aa:	46bd      	mov	sp, r7
 80072ac:	bd80      	pop	{r7, pc}

080072ae <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 80072ae:	b590      	push	{r4, r7, lr}
 80072b0:	b0cd      	sub	sp, #308	; 0x134
 80072b2:	af00      	add	r7, sp, #0
 80072b4:	4604      	mov	r4, r0
 80072b6:	4608      	mov	r0, r1
 80072b8:	4611      	mov	r1, r2
 80072ba:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80072be:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 80072c2:	6013      	str	r3, [r2, #0]
 80072c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072c8:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80072cc:	4622      	mov	r2, r4
 80072ce:	701a      	strb	r2, [r3, #0]
 80072d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072d4:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80072d8:	4602      	mov	r2, r0
 80072da:	701a      	strb	r2, [r3, #0]
 80072dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072e0:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 80072e4:	460a      	mov	r2, r1
 80072e6:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 80072e8:	f107 0310 	add.w	r3, r7, #16
 80072ec:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 80072f0:	f107 0308 	add.w	r3, r7, #8
 80072f4:	2207      	movs	r2, #7
 80072f6:	2100      	movs	r1, #0
 80072f8:	4618      	mov	r0, r3
 80072fa:	f000 fe1f 	bl	8007f3c <Osal_MemSet>
  int index_input = 0;
 80072fe:	2300      	movs	r3, #0
 8007300:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = Role;
 8007304:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007308:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800730c:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8007310:	7812      	ldrb	r2, [r2, #0]
 8007312:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007314:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007318:	3301      	adds	r3, #1
 800731a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = privacy_enabled;
 800731e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007322:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007326:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800732a:	7812      	ldrb	r2, [r2, #0]
 800732c:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800732e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007332:	3301      	adds	r3, #1
 8007334:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = device_name_char_len;
 8007338:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800733c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007340:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8007344:	7812      	ldrb	r2, [r2, #0]
 8007346:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8007348:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800734c:	3301      	adds	r3, #1
 800734e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007352:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007356:	2218      	movs	r2, #24
 8007358:	2100      	movs	r1, #0
 800735a:	4618      	mov	r0, r3
 800735c:	f000 fdee 	bl	8007f3c <Osal_MemSet>
  rq.ogf = 0x3f;
 8007360:	233f      	movs	r3, #63	; 0x3f
 8007362:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 8007366:	238a      	movs	r3, #138	; 0x8a
 8007368:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800736c:	f107 0310 	add.w	r3, r7, #16
 8007370:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007374:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007378:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 800737c:	f107 0308 	add.w	r3, r7, #8
 8007380:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8007384:	2307      	movs	r3, #7
 8007386:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800738a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800738e:	2100      	movs	r1, #0
 8007390:	4618      	mov	r0, r3
 8007392:	f001 f85d 	bl	8008450 <hci_send_req>
 8007396:	4603      	mov	r3, r0
 8007398:	2b00      	cmp	r3, #0
 800739a:	da01      	bge.n	80073a0 <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 800739c:	23ff      	movs	r3, #255	; 0xff
 800739e:	e02e      	b.n	80073fe <aci_gap_init+0x150>
  if ( resp.Status )
 80073a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073a4:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80073a8:	781b      	ldrb	r3, [r3, #0]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d005      	beq.n	80073ba <aci_gap_init+0x10c>
    return resp.Status;
 80073ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073b2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80073b6:	781b      	ldrb	r3, [r3, #0]
 80073b8:	e021      	b.n	80073fe <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 80073ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073be:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80073c2:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80073c6:	b29a      	uxth	r2, r3
 80073c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 80073d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073d8:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80073dc:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 80073e0:	b29a      	uxth	r2, r3
 80073e2:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80073e6:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 80073e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073ec:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80073f0:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 80073f4:	b29a      	uxth	r2, r3
 80073f6:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80073fa:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80073fc:	2300      	movs	r3, #0
}
 80073fe:	4618      	mov	r0, r3
 8007400:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8007404:	46bd      	mov	sp, r7
 8007406:	bd90      	pop	{r4, r7, pc}

08007408 <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 8007408:	b580      	push	{r7, lr}
 800740a:	b0cc      	sub	sp, #304	; 0x130
 800740c:	af00      	add	r7, sp, #0
 800740e:	4602      	mov	r2, r0
 8007410:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007414:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007418:	6019      	str	r1, [r3, #0]
 800741a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800741e:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8007422:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 8007424:	f107 0310 	add.w	r3, r7, #16
 8007428:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800742c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007430:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007434:	2200      	movs	r2, #0
 8007436:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007438:	2300      	movs	r3, #0
 800743a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->AdvDataLen = AdvDataLen;
 800743e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007442:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007446:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800744a:	7812      	ldrb	r2, [r2, #0]
 800744c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800744e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007452:	3301      	adds	r3, #1
 8007454:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 8007458:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800745c:	1c58      	adds	r0, r3, #1
 800745e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007462:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8007466:	781a      	ldrb	r2, [r3, #0]
 8007468:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800746c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007470:	6819      	ldr	r1, [r3, #0]
 8007472:	f000 fd53 	bl	8007f1c <Osal_MemCpy>
  index_input += AdvDataLen;
 8007476:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800747a:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800747e:	781b      	ldrb	r3, [r3, #0]
 8007480:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8007484:	4413      	add	r3, r2
 8007486:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800748a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800748e:	2218      	movs	r2, #24
 8007490:	2100      	movs	r1, #0
 8007492:	4618      	mov	r0, r3
 8007494:	f000 fd52 	bl	8007f3c <Osal_MemSet>
  rq.ogf = 0x3f;
 8007498:	233f      	movs	r3, #63	; 0x3f
 800749a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08e;
 800749e:	238e      	movs	r3, #142	; 0x8e
 80074a0:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80074a4:	f107 0310 	add.w	r3, r7, #16
 80074a8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80074ac:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80074b0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80074b4:	f107 030f 	add.w	r3, r7, #15
 80074b8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80074bc:	2301      	movs	r3, #1
 80074be:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80074c2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80074c6:	2100      	movs	r1, #0
 80074c8:	4618      	mov	r0, r3
 80074ca:	f000 ffc1 	bl	8008450 <hci_send_req>
 80074ce:	4603      	mov	r3, r0
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	da01      	bge.n	80074d8 <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 80074d4:	23ff      	movs	r3, #255	; 0xff
 80074d6:	e004      	b.n	80074e2 <aci_gap_update_adv_data+0xda>
  return status;
 80074d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074dc:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80074e0:	781b      	ldrb	r3, [r3, #0]
}
 80074e2:	4618      	mov	r0, r3
 80074e4:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80074e8:	46bd      	mov	sp, r7
 80074ea:	bd80      	pop	{r7, pc}

080074ec <aci_gap_configure_whitelist>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_whitelist( void )
{
 80074ec:	b580      	push	{r7, lr}
 80074ee:	b088      	sub	sp, #32
 80074f0:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80074f2:	2300      	movs	r3, #0
 80074f4:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80074f6:	f107 0308 	add.w	r3, r7, #8
 80074fa:	2218      	movs	r2, #24
 80074fc:	2100      	movs	r1, #0
 80074fe:	4618      	mov	r0, r3
 8007500:	f000 fd1c 	bl	8007f3c <Osal_MemSet>
  rq.ogf = 0x3f;
 8007504:	233f      	movs	r3, #63	; 0x3f
 8007506:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 8007508:	2392      	movs	r3, #146	; 0x92
 800750a:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800750c:	1dfb      	adds	r3, r7, #7
 800750e:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8007510:	2301      	movs	r3, #1
 8007512:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007514:	f107 0308 	add.w	r3, r7, #8
 8007518:	2100      	movs	r1, #0
 800751a:	4618      	mov	r0, r3
 800751c:	f000 ff98 	bl	8008450 <hci_send_req>
 8007520:	4603      	mov	r3, r0
 8007522:	2b00      	cmp	r3, #0
 8007524:	da01      	bge.n	800752a <aci_gap_configure_whitelist+0x3e>
    return BLE_STATUS_TIMEOUT;
 8007526:	23ff      	movs	r3, #255	; 0xff
 8007528:	e000      	b.n	800752c <aci_gap_configure_whitelist+0x40>
  return status;
 800752a:	79fb      	ldrb	r3, [r7, #7]
}
 800752c:	4618      	mov	r0, r3
 800752e:	3720      	adds	r7, #32
 8007530:	46bd      	mov	sp, r7
 8007532:	bd80      	pop	{r7, pc}

08007534 <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 8007534:	b580      	push	{r7, lr}
 8007536:	b0cc      	sub	sp, #304	; 0x130
 8007538:	af00      	add	r7, sp, #0
 800753a:	4602      	mov	r2, r0
 800753c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007540:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8007544:	801a      	strh	r2, [r3, #0]
 8007546:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800754a:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 800754e:	460a      	mov	r2, r1
 8007550:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 8007552:	f107 0310 	add.w	r3, r7, #16
 8007556:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800755a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800755e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007562:	2200      	movs	r2, #0
 8007564:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007566:	2300      	movs	r3, #0
 8007568:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 800756c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007570:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007574:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8007578:	8812      	ldrh	r2, [r2, #0]
 800757a:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800757c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007580:	3302      	adds	r3, #2
 8007582:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 8007586:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800758a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800758e:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8007592:	7812      	ldrb	r2, [r2, #0]
 8007594:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8007596:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800759a:	3301      	adds	r3, #1
 800759c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80075a0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80075a4:	2218      	movs	r2, #24
 80075a6:	2100      	movs	r1, #0
 80075a8:	4618      	mov	r0, r3
 80075aa:	f000 fcc7 	bl	8007f3c <Osal_MemSet>
  rq.ogf = 0x3f;
 80075ae:	233f      	movs	r3, #63	; 0x3f
 80075b0:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x0a5;
 80075b4:	23a5      	movs	r3, #165	; 0xa5
 80075b6:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80075ba:	f107 0310 	add.w	r3, r7, #16
 80075be:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80075c2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80075c6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80075ca:	f107 030f 	add.w	r3, r7, #15
 80075ce:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80075d2:	2301      	movs	r3, #1
 80075d4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80075d8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80075dc:	2100      	movs	r1, #0
 80075de:	4618      	mov	r0, r3
 80075e0:	f000 ff36 	bl	8008450 <hci_send_req>
 80075e4:	4603      	mov	r3, r0
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	da01      	bge.n	80075ee <aci_gap_numeric_comparison_value_confirm_yesno+0xba>
    return BLE_STATUS_TIMEOUT;
 80075ea:	23ff      	movs	r3, #255	; 0xff
 80075ec:	e004      	b.n	80075f8 <aci_gap_numeric_comparison_value_confirm_yesno+0xc4>
  return status;
 80075ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075f2:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80075f6:	781b      	ldrb	r3, [r3, #0]
}
 80075f8:	4618      	mov	r0, r3
 80075fa:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80075fe:	46bd      	mov	sp, r7
 8007600:	bd80      	pop	{r7, pc}

08007602 <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 8007602:	b580      	push	{r7, lr}
 8007604:	b088      	sub	sp, #32
 8007606:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8007608:	2300      	movs	r3, #0
 800760a:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800760c:	f107 0308 	add.w	r3, r7, #8
 8007610:	2218      	movs	r2, #24
 8007612:	2100      	movs	r1, #0
 8007614:	4618      	mov	r0, r3
 8007616:	f000 fc91 	bl	8007f3c <Osal_MemSet>
  rq.ogf = 0x3f;
 800761a:	233f      	movs	r3, #63	; 0x3f
 800761c:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 800761e:	f240 1301 	movw	r3, #257	; 0x101
 8007622:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8007624:	1dfb      	adds	r3, r7, #7
 8007626:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8007628:	2301      	movs	r3, #1
 800762a:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800762c:	f107 0308 	add.w	r3, r7, #8
 8007630:	2100      	movs	r1, #0
 8007632:	4618      	mov	r0, r3
 8007634:	f000 ff0c 	bl	8008450 <hci_send_req>
 8007638:	4603      	mov	r3, r0
 800763a:	2b00      	cmp	r3, #0
 800763c:	da01      	bge.n	8007642 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 800763e:	23ff      	movs	r3, #255	; 0xff
 8007640:	e000      	b.n	8007644 <aci_gatt_init+0x42>
  return status;
 8007642:	79fb      	ldrb	r3, [r7, #7]
}
 8007644:	4618      	mov	r0, r3
 8007646:	3720      	adds	r7, #32
 8007648:	46bd      	mov	sp, r7
 800764a:	bd80      	pop	{r7, pc}

0800764c <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 800764c:	b590      	push	{r4, r7, lr}
 800764e:	b0cf      	sub	sp, #316	; 0x13c
 8007650:	af00      	add	r7, sp, #0
 8007652:	4604      	mov	r4, r0
 8007654:	f507 709c 	add.w	r0, r7, #312	; 0x138
 8007658:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
 800765c:	6001      	str	r1, [r0, #0]
 800765e:	4610      	mov	r0, r2
 8007660:	4619      	mov	r1, r3
 8007662:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007666:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 800766a:	4622      	mov	r2, r4
 800766c:	701a      	strb	r2, [r3, #0]
 800766e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007672:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8007676:	4602      	mov	r2, r0
 8007678:	701a      	strb	r2, [r3, #0]
 800767a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800767e:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8007682:	460a      	mov	r2, r1
 8007684:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 8007686:	f107 0310 	add.w	r3, r7, #16
 800768a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 800768e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007692:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8007696:	781b      	ldrb	r3, [r3, #0]
 8007698:	2b01      	cmp	r3, #1
 800769a:	d00a      	beq.n	80076b2 <aci_gatt_add_service+0x66>
 800769c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80076a0:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 80076a4:	781b      	ldrb	r3, [r3, #0]
 80076a6:	2b02      	cmp	r3, #2
 80076a8:	d101      	bne.n	80076ae <aci_gatt_add_service+0x62>
 80076aa:	2311      	movs	r3, #17
 80076ac:	e002      	b.n	80076b4 <aci_gatt_add_service+0x68>
 80076ae:	2301      	movs	r3, #1
 80076b0:	e000      	b.n	80076b4 <aci_gatt_add_service+0x68>
 80076b2:	2303      	movs	r3, #3
 80076b4:	f107 0210 	add.w	r2, r7, #16
 80076b8:	4413      	add	r3, r2
 80076ba:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 80076be:	f107 030c 	add.w	r3, r7, #12
 80076c2:	2203      	movs	r2, #3
 80076c4:	2100      	movs	r1, #0
 80076c6:	4618      	mov	r0, r3
 80076c8:	f000 fc38 	bl	8007f3c <Osal_MemSet>
  int index_input = 0;
 80076cc:	2300      	movs	r3, #0
 80076ce:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 80076d2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80076d6:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80076da:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 80076de:	7812      	ldrb	r2, [r2, #0]
 80076e0:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80076e2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80076e6:	3301      	adds	r3, #1
 80076e8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 80076ec:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80076f0:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 80076f4:	781b      	ldrb	r3, [r3, #0]
 80076f6:	2b01      	cmp	r3, #1
 80076f8:	d002      	beq.n	8007700 <aci_gatt_add_service+0xb4>
 80076fa:	2b02      	cmp	r3, #2
 80076fc:	d004      	beq.n	8007708 <aci_gatt_add_service+0xbc>
 80076fe:	e007      	b.n	8007710 <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 8007700:	2302      	movs	r3, #2
 8007702:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8007706:	e005      	b.n	8007714 <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 8007708:	2310      	movs	r3, #16
 800770a:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 800770e:	e001      	b.n	8007714 <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 8007710:	2397      	movs	r3, #151	; 0x97
 8007712:	e06c      	b.n	80077ee <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 8007714:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007718:	1c58      	adds	r0, r3, #1
 800771a:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 800771e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007722:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8007726:	6819      	ldr	r1, [r3, #0]
 8007728:	f000 fbf8 	bl	8007f1c <Osal_MemCpy>
    index_input += size;
 800772c:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8007730:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8007734:	4413      	add	r3, r2
 8007736:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Type = Service_Type;
 800773a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800773e:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8007742:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8007746:	7812      	ldrb	r2, [r2, #0]
 8007748:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800774a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800774e:	3301      	adds	r3, #1
 8007750:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 8007754:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007758:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800775c:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 8007760:	7812      	ldrb	r2, [r2, #0]
 8007762:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 8007764:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007768:	3301      	adds	r3, #1
 800776a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800776e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007772:	2218      	movs	r2, #24
 8007774:	2100      	movs	r1, #0
 8007776:	4618      	mov	r0, r3
 8007778:	f000 fbe0 	bl	8007f3c <Osal_MemSet>
  rq.ogf = 0x3f;
 800777c:	233f      	movs	r3, #63	; 0x3f
 800777e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 8007782:	f44f 7381 	mov.w	r3, #258	; 0x102
 8007786:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800778a:	f107 0310 	add.w	r3, r7, #16
 800778e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007792:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007796:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 800779a:	f107 030c 	add.w	r3, r7, #12
 800779e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 80077a2:	2303      	movs	r3, #3
 80077a4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80077a8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80077ac:	2100      	movs	r1, #0
 80077ae:	4618      	mov	r0, r3
 80077b0:	f000 fe4e 	bl	8008450 <hci_send_req>
 80077b4:	4603      	mov	r3, r0
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	da01      	bge.n	80077be <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 80077ba:	23ff      	movs	r3, #255	; 0xff
 80077bc:	e017      	b.n	80077ee <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 80077be:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80077c2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80077c6:	781b      	ldrb	r3, [r3, #0]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d005      	beq.n	80077d8 <aci_gatt_add_service+0x18c>
    return resp.Status;
 80077cc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80077d0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80077d4:	781b      	ldrb	r3, [r3, #0]
 80077d6:	e00a      	b.n	80077ee <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 80077d8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80077dc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80077e0:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80077e4:	b29a      	uxth	r2, r3
 80077e6:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80077ea:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80077ec:	2300      	movs	r3, #0
}
 80077ee:	4618      	mov	r0, r3
 80077f0:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 80077f4:	46bd      	mov	sp, r7
 80077f6:	bd90      	pop	{r4, r7, pc}

080077f8 <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 80077f8:	b590      	push	{r4, r7, lr}
 80077fa:	b0d1      	sub	sp, #324	; 0x144
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	4604      	mov	r4, r0
 8007800:	4608      	mov	r0, r1
 8007802:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 8007806:	f5a1 719c 	sub.w	r1, r1, #312	; 0x138
 800780a:	600a      	str	r2, [r1, #0]
 800780c:	4619      	mov	r1, r3
 800780e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8007812:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8007816:	4622      	mov	r2, r4
 8007818:	801a      	strh	r2, [r3, #0]
 800781a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800781e:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8007822:	4602      	mov	r2, r0
 8007824:	701a      	strb	r2, [r3, #0]
 8007826:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800782a:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 800782e:	460a      	mov	r2, r1
 8007830:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 8007832:	f107 0318 	add.w	r3, r7, #24
 8007836:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 800783a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800783e:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8007842:	781b      	ldrb	r3, [r3, #0]
 8007844:	2b01      	cmp	r3, #1
 8007846:	d00a      	beq.n	800785e <aci_gatt_add_char+0x66>
 8007848:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800784c:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8007850:	781b      	ldrb	r3, [r3, #0]
 8007852:	2b02      	cmp	r3, #2
 8007854:	d101      	bne.n	800785a <aci_gatt_add_char+0x62>
 8007856:	2313      	movs	r3, #19
 8007858:	e002      	b.n	8007860 <aci_gatt_add_char+0x68>
 800785a:	2303      	movs	r3, #3
 800785c:	e000      	b.n	8007860 <aci_gatt_add_char+0x68>
 800785e:	2305      	movs	r3, #5
 8007860:	f107 0218 	add.w	r2, r7, #24
 8007864:	4413      	add	r3, r2
 8007866:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800786a:	f107 0314 	add.w	r3, r7, #20
 800786e:	2203      	movs	r2, #3
 8007870:	2100      	movs	r1, #0
 8007872:	4618      	mov	r0, r3
 8007874:	f000 fb62 	bl	8007f3c <Osal_MemSet>
  int index_input = 0;
 8007878:	2300      	movs	r3, #0
 800787a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Service_Handle = Service_Handle;
 800787e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8007882:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8007886:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 800788a:	8812      	ldrh	r2, [r2, #0]
 800788c:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800788e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007892:	3302      	adds	r3, #2
 8007894:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 8007898:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800789c:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 80078a0:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 80078a4:	7812      	ldrb	r2, [r2, #0]
 80078a6:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80078a8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80078ac:	3301      	adds	r3, #1
 80078ae:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 80078b2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80078b6:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 80078ba:	781b      	ldrb	r3, [r3, #0]
 80078bc:	2b01      	cmp	r3, #1
 80078be:	d002      	beq.n	80078c6 <aci_gatt_add_char+0xce>
 80078c0:	2b02      	cmp	r3, #2
 80078c2:	d004      	beq.n	80078ce <aci_gatt_add_char+0xd6>
 80078c4:	e007      	b.n	80078d6 <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 80078c6:	2302      	movs	r3, #2
 80078c8:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 80078cc:	e005      	b.n	80078da <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 80078ce:	2310      	movs	r3, #16
 80078d0:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 80078d4:	e001      	b.n	80078da <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 80078d6:	2397      	movs	r3, #151	; 0x97
 80078d8:	e091      	b.n	80079fe <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 80078da:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80078de:	1cd8      	adds	r0, r3, #3
 80078e0:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 80078e4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80078e8:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80078ec:	6819      	ldr	r1, [r3, #0]
 80078ee:	f000 fb15 	bl	8007f1c <Osal_MemCpy>
    index_input += size;
 80078f2:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 80078f6:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80078fa:	4413      	add	r3, r2
 80078fc:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 8007900:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007904:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8007908:	f5a2 729d 	sub.w	r2, r2, #314	; 0x13a
 800790c:	8812      	ldrh	r2, [r2, #0]
 800790e:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8007910:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007914:	3302      	adds	r3, #2
 8007916:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Properties = Char_Properties;
 800791a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800791e:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8007922:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 8007924:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007928:	3301      	adds	r3, #1
 800792a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 800792e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007932:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8007936:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 8007938:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800793c:	3301      	adds	r3, #1
 800793e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 8007942:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007946:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 800794a:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 800794c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007950:	3301      	adds	r3, #1
 8007952:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 8007956:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800795a:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 800795e:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 8007960:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007964:	3301      	adds	r3, #1
 8007966:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Is_Variable = Is_Variable;
 800796a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800796e:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 8007972:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 8007974:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007978:	3301      	adds	r3, #1
 800797a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800797e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8007982:	2218      	movs	r2, #24
 8007984:	2100      	movs	r1, #0
 8007986:	4618      	mov	r0, r3
 8007988:	f000 fad8 	bl	8007f3c <Osal_MemSet>
  rq.ogf = 0x3f;
 800798c:	233f      	movs	r3, #63	; 0x3f
 800798e:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x104;
 8007992:	f44f 7382 	mov.w	r3, #260	; 0x104
 8007996:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 800799a:	f107 0318 	add.w	r3, r7, #24
 800799e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 80079a2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80079a6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 80079aa:	f107 0314 	add.w	r3, r7, #20
 80079ae:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 80079b2:	2303      	movs	r3, #3
 80079b4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 80079b8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80079bc:	2100      	movs	r1, #0
 80079be:	4618      	mov	r0, r3
 80079c0:	f000 fd46 	bl	8008450 <hci_send_req>
 80079c4:	4603      	mov	r3, r0
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	da01      	bge.n	80079ce <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 80079ca:	23ff      	movs	r3, #255	; 0xff
 80079cc:	e017      	b.n	80079fe <aci_gatt_add_char+0x206>
  if ( resp.Status )
 80079ce:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80079d2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80079d6:	781b      	ldrb	r3, [r3, #0]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d005      	beq.n	80079e8 <aci_gatt_add_char+0x1f0>
    return resp.Status;
 80079dc:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80079e0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80079e4:	781b      	ldrb	r3, [r3, #0]
 80079e6:	e00a      	b.n	80079fe <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 80079e8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80079ec:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80079f0:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80079f4:	b29a      	uxth	r2, r3
 80079f6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80079fa:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80079fc:	2300      	movs	r3, #0
}
 80079fe:	4618      	mov	r0, r3
 8007a00:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 8007a04:	46bd      	mov	sp, r7
 8007a06:	bd90      	pop	{r4, r7, pc}

08007a08 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 8007a08:	b5b0      	push	{r4, r5, r7, lr}
 8007a0a:	b0cc      	sub	sp, #304	; 0x130
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	4605      	mov	r5, r0
 8007a10:	460c      	mov	r4, r1
 8007a12:	4610      	mov	r0, r2
 8007a14:	4619      	mov	r1, r3
 8007a16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a1a:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8007a1e:	462a      	mov	r2, r5
 8007a20:	801a      	strh	r2, [r3, #0]
 8007a22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a26:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007a2a:	4622      	mov	r2, r4
 8007a2c:	801a      	strh	r2, [r3, #0]
 8007a2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a32:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8007a36:	4602      	mov	r2, r0
 8007a38:	701a      	strb	r2, [r3, #0]
 8007a3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a3e:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8007a42:	460a      	mov	r2, r1
 8007a44:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 8007a46:	f107 0310 	add.w	r3, r7, #16
 8007a4a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007a4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a52:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007a56:	2200      	movs	r2, #0
 8007a58:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = Service_Handle;
 8007a60:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a64:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007a68:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8007a6c:	8812      	ldrh	r2, [r2, #0]
 8007a6e:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8007a70:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007a74:	3302      	adds	r3, #2
 8007a76:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 8007a7a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a7e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007a82:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8007a86:	8812      	ldrh	r2, [r2, #0]
 8007a88:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8007a8a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007a8e:	3302      	adds	r3, #2
 8007a90:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = Val_Offset;
 8007a94:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a98:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007a9c:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 8007aa0:	7812      	ldrb	r2, [r2, #0]
 8007aa2:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8007aa4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007aa8:	3301      	adds	r3, #1
 8007aaa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 8007aae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ab2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007ab6:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 8007aba:	7812      	ldrb	r2, [r2, #0]
 8007abc:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8007abe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007ac2:	3301      	adds	r3, #1
 8007ac4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 8007ac8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007acc:	1d98      	adds	r0, r3, #6
 8007ace:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ad2:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8007ad6:	781b      	ldrb	r3, [r3, #0]
 8007ad8:	461a      	mov	r2, r3
 8007ada:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8007ade:	f000 fa1d 	bl	8007f1c <Osal_MemCpy>
  index_input += Char_Value_Length;
 8007ae2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ae6:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8007aea:	781b      	ldrb	r3, [r3, #0]
 8007aec:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8007af0:	4413      	add	r3, r2
 8007af2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007af6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007afa:	2218      	movs	r2, #24
 8007afc:	2100      	movs	r1, #0
 8007afe:	4618      	mov	r0, r3
 8007b00:	f000 fa1c 	bl	8007f3c <Osal_MemSet>
  rq.ogf = 0x3f;
 8007b04:	233f      	movs	r3, #63	; 0x3f
 8007b06:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 8007b0a:	f44f 7383 	mov.w	r3, #262	; 0x106
 8007b0e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007b12:	f107 0310 	add.w	r3, r7, #16
 8007b16:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007b1a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007b1e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007b22:	f107 030f 	add.w	r3, r7, #15
 8007b26:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007b2a:	2301      	movs	r3, #1
 8007b2c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007b30:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007b34:	2100      	movs	r1, #0
 8007b36:	4618      	mov	r0, r3
 8007b38:	f000 fc8a 	bl	8008450 <hci_send_req>
 8007b3c:	4603      	mov	r3, r0
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	da01      	bge.n	8007b46 <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 8007b42:	23ff      	movs	r3, #255	; 0xff
 8007b44:	e004      	b.n	8007b50 <aci_gatt_update_char_value+0x148>
  return status;
 8007b46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b4a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007b4e:	781b      	ldrb	r3, [r3, #0]
}
 8007b50:	4618      	mov	r0, r3
 8007b52:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007b56:	46bd      	mov	sp, r7
 8007b58:	bdb0      	pop	{r4, r5, r7, pc}

08007b5a <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 8007b5a:	b580      	push	{r7, lr}
 8007b5c:	b0cc      	sub	sp, #304	; 0x130
 8007b5e:	af00      	add	r7, sp, #0
 8007b60:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b64:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b68:	601a      	str	r2, [r3, #0]
 8007b6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b6e:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8007b72:	4602      	mov	r2, r0
 8007b74:	701a      	strb	r2, [r3, #0]
 8007b76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b7a:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8007b7e:	460a      	mov	r2, r1
 8007b80:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 8007b82:	f107 0310 	add.w	r3, r7, #16
 8007b86:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007b8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b8e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007b92:	2200      	movs	r2, #0
 8007b94:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007b96:	2300      	movs	r3, #0
 8007b98:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = Offset;
 8007b9c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ba0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007ba4:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8007ba8:	7812      	ldrb	r2, [r2, #0]
 8007baa:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007bac:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007bb0:	3301      	adds	r3, #1
 8007bb2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = Length;
 8007bb6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007bba:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007bbe:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8007bc2:	7812      	ldrb	r2, [r2, #0]
 8007bc4:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8007bc6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007bca:	3301      	adds	r3, #1
 8007bcc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 8007bd0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007bd4:	1c98      	adds	r0, r3, #2
 8007bd6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bda:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8007bde:	781a      	ldrb	r2, [r3, #0]
 8007be0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007be4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007be8:	6819      	ldr	r1, [r3, #0]
 8007bea:	f000 f997 	bl	8007f1c <Osal_MemCpy>
  index_input += Length;
 8007bee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bf2:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8007bf6:	781b      	ldrb	r3, [r3, #0]
 8007bf8:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8007bfc:	4413      	add	r3, r2
 8007bfe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007c02:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007c06:	2218      	movs	r2, #24
 8007c08:	2100      	movs	r1, #0
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	f000 f996 	bl	8007f3c <Osal_MemSet>
  rq.ogf = 0x3f;
 8007c10:	233f      	movs	r3, #63	; 0x3f
 8007c12:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 8007c16:	230c      	movs	r3, #12
 8007c18:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007c1c:	f107 0310 	add.w	r3, r7, #16
 8007c20:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007c24:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007c28:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007c2c:	f107 030f 	add.w	r3, r7, #15
 8007c30:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007c34:	2301      	movs	r3, #1
 8007c36:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007c3a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007c3e:	2100      	movs	r1, #0
 8007c40:	4618      	mov	r0, r3
 8007c42:	f000 fc05 	bl	8008450 <hci_send_req>
 8007c46:	4603      	mov	r3, r0
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	da01      	bge.n	8007c50 <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 8007c4c:	23ff      	movs	r3, #255	; 0xff
 8007c4e:	e004      	b.n	8007c5a <aci_hal_write_config_data+0x100>
  return status;
 8007c50:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c54:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007c58:	781b      	ldrb	r3, [r3, #0]
}
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007c60:	46bd      	mov	sp, r7
 8007c62:	bd80      	pop	{r7, pc}

08007c64 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 8007c64:	b580      	push	{r7, lr}
 8007c66:	b0cc      	sub	sp, #304	; 0x130
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	4602      	mov	r2, r0
 8007c6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c70:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8007c74:	701a      	strb	r2, [r3, #0]
 8007c76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c7a:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8007c7e:	460a      	mov	r2, r1
 8007c80:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 8007c82:	f107 0310 	add.w	r3, r7, #16
 8007c86:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007c8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c8e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007c92:	2200      	movs	r2, #0
 8007c94:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007c96:	2300      	movs	r3, #0
 8007c98:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = En_High_Power;
 8007c9c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ca0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007ca4:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8007ca8:	7812      	ldrb	r2, [r2, #0]
 8007caa:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007cac:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007cb0:	3301      	adds	r3, #1
 8007cb2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = PA_Level;
 8007cb6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007cba:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007cbe:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8007cc2:	7812      	ldrb	r2, [r2, #0]
 8007cc4:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8007cc6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007cca:	3301      	adds	r3, #1
 8007ccc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007cd0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007cd4:	2218      	movs	r2, #24
 8007cd6:	2100      	movs	r1, #0
 8007cd8:	4618      	mov	r0, r3
 8007cda:	f000 f92f 	bl	8007f3c <Osal_MemSet>
  rq.ogf = 0x3f;
 8007cde:	233f      	movs	r3, #63	; 0x3f
 8007ce0:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 8007ce4:	230f      	movs	r3, #15
 8007ce6:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007cea:	f107 0310 	add.w	r3, r7, #16
 8007cee:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007cf2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007cf6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007cfa:	f107 030f 	add.w	r3, r7, #15
 8007cfe:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007d02:	2301      	movs	r3, #1
 8007d04:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007d08:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007d0c:	2100      	movs	r1, #0
 8007d0e:	4618      	mov	r0, r3
 8007d10:	f000 fb9e 	bl	8008450 <hci_send_req>
 8007d14:	4603      	mov	r3, r0
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	da01      	bge.n	8007d1e <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 8007d1a:	23ff      	movs	r3, #255	; 0xff
 8007d1c:	e004      	b.n	8007d28 <aci_hal_set_tx_power_level+0xc4>
  return status;
 8007d1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d22:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007d26:	781b      	ldrb	r3, [r3, #0]
}
 8007d28:	4618      	mov	r0, r3
 8007d2a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	bd80      	pop	{r7, pc}

08007d32 <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 8007d32:	b580      	push	{r7, lr}
 8007d34:	b0cc      	sub	sp, #304	; 0x130
 8007d36:	af00      	add	r7, sp, #0
 8007d38:	4602      	mov	r2, r0
 8007d3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d3e:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8007d42:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 8007d44:	f107 0310 	add.w	r3, r7, #16
 8007d48:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007d4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d50:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007d54:	2200      	movs	r2, #0
 8007d56:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007d58:	2300      	movs	r3, #0
 8007d5a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 8007d5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d62:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007d66:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8007d6a:	8812      	ldrh	r2, [r2, #0]
 8007d6c:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8007d6e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007d72:	3302      	adds	r3, #2
 8007d74:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007d78:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007d7c:	2218      	movs	r2, #24
 8007d7e:	2100      	movs	r1, #0
 8007d80:	4618      	mov	r0, r3
 8007d82:	f000 f8db 	bl	8007f3c <Osal_MemSet>
  rq.ogf = 0x3f;
 8007d86:	233f      	movs	r3, #63	; 0x3f
 8007d88:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x018;
 8007d8c:	2318      	movs	r3, #24
 8007d8e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007d92:	f107 0310 	add.w	r3, r7, #16
 8007d96:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007d9a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007d9e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007da2:	f107 030f 	add.w	r3, r7, #15
 8007da6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007daa:	2301      	movs	r3, #1
 8007dac:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007db0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007db4:	2100      	movs	r1, #0
 8007db6:	4618      	mov	r0, r3
 8007db8:	f000 fb4a 	bl	8008450 <hci_send_req>
 8007dbc:	4603      	mov	r3, r0
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	da01      	bge.n	8007dc6 <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 8007dc2:	23ff      	movs	r3, #255	; 0xff
 8007dc4:	e004      	b.n	8007dd0 <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 8007dc6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007dca:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007dce:	781b      	ldrb	r3, [r3, #0]
}
 8007dd0:	4618      	mov	r0, r3
 8007dd2:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	bd80      	pop	{r7, pc}

08007dda <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 8007dda:	b580      	push	{r7, lr}
 8007ddc:	b088      	sub	sp, #32
 8007dde:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8007de0:	2300      	movs	r3, #0
 8007de2:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007de4:	f107 0308 	add.w	r3, r7, #8
 8007de8:	2218      	movs	r2, #24
 8007dea:	2100      	movs	r1, #0
 8007dec:	4618      	mov	r0, r3
 8007dee:	f000 f8a5 	bl	8007f3c <Osal_MemSet>
  rq.ogf = 0x03;
 8007df2:	2303      	movs	r3, #3
 8007df4:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 8007df6:	2303      	movs	r3, #3
 8007df8:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8007dfa:	1dfb      	adds	r3, r7, #7
 8007dfc:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8007dfe:	2301      	movs	r3, #1
 8007e00:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007e02:	f107 0308 	add.w	r3, r7, #8
 8007e06:	2100      	movs	r1, #0
 8007e08:	4618      	mov	r0, r3
 8007e0a:	f000 fb21 	bl	8008450 <hci_send_req>
 8007e0e:	4603      	mov	r3, r0
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	da01      	bge.n	8007e18 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 8007e14:	23ff      	movs	r3, #255	; 0xff
 8007e16:	e000      	b.n	8007e1a <hci_reset+0x40>
  return status;
 8007e18:	79fb      	ldrb	r3, [r7, #7]
}
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	3720      	adds	r7, #32
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	bd80      	pop	{r7, pc}

08007e22 <hci_le_set_default_phy>:
}

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 8007e22:	b590      	push	{r4, r7, lr}
 8007e24:	b0cd      	sub	sp, #308	; 0x134
 8007e26:	af00      	add	r7, sp, #0
 8007e28:	4604      	mov	r4, r0
 8007e2a:	4608      	mov	r0, r1
 8007e2c:	4611      	mov	r1, r2
 8007e2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e32:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8007e36:	4622      	mov	r2, r4
 8007e38:	701a      	strb	r2, [r3, #0]
 8007e3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e3e:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8007e42:	4602      	mov	r2, r0
 8007e44:	701a      	strb	r2, [r3, #0]
 8007e46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e4a:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8007e4e:	460a      	mov	r2, r1
 8007e50:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 8007e52:	f107 0310 	add.w	r3, r7, #16
 8007e56:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007e5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e5e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007e62:	2200      	movs	r2, #0
 8007e64:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007e66:	2300      	movs	r3, #0
 8007e68:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 8007e6c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e70:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007e74:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8007e78:	7812      	ldrb	r2, [r2, #0]
 8007e7a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007e7c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007e80:	3301      	adds	r3, #1
 8007e82:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->TX_PHYS = TX_PHYS;
 8007e86:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e8a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007e8e:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8007e92:	7812      	ldrb	r2, [r2, #0]
 8007e94:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8007e96:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007e9a:	3301      	adds	r3, #1
 8007e9c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->RX_PHYS = RX_PHYS;
 8007ea0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ea4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007ea8:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8007eac:	7812      	ldrb	r2, [r2, #0]
 8007eae:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8007eb0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007eb4:	3301      	adds	r3, #1
 8007eb6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007eba:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007ebe:	2218      	movs	r2, #24
 8007ec0:	2100      	movs	r1, #0
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	f000 f83a 	bl	8007f3c <Osal_MemSet>
  rq.ogf = 0x08;
 8007ec8:	2308      	movs	r3, #8
 8007eca:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x031;
 8007ece:	2331      	movs	r3, #49	; 0x31
 8007ed0:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007ed4:	f107 0310 	add.w	r3, r7, #16
 8007ed8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007edc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007ee0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007ee4:	f107 030f 	add.w	r3, r7, #15
 8007ee8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007eec:	2301      	movs	r3, #1
 8007eee:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007ef2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007ef6:	2100      	movs	r1, #0
 8007ef8:	4618      	mov	r0, r3
 8007efa:	f000 faa9 	bl	8008450 <hci_send_req>
 8007efe:	4603      	mov	r3, r0
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	da01      	bge.n	8007f08 <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 8007f04:	23ff      	movs	r3, #255	; 0xff
 8007f06:	e004      	b.n	8007f12 <hci_le_set_default_phy+0xf0>
  return status;
 8007f08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f0c:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007f10:	781b      	ldrb	r3, [r3, #0]
}
 8007f12:	4618      	mov	r0, r3
 8007f14:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	bd90      	pop	{r4, r7, pc}

08007f1c <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 8007f1c:	b580      	push	{r7, lr}
 8007f1e:	b084      	sub	sp, #16
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	60f8      	str	r0, [r7, #12]
 8007f24:	60b9      	str	r1, [r7, #8]
 8007f26:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 8007f28:	687a      	ldr	r2, [r7, #4]
 8007f2a:	68b9      	ldr	r1, [r7, #8]
 8007f2c:	68f8      	ldr	r0, [r7, #12]
 8007f2e:	f002 f8db 	bl	800a0e8 <memcpy>
 8007f32:	4603      	mov	r3, r0
}
 8007f34:	4618      	mov	r0, r3
 8007f36:	3710      	adds	r7, #16
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	bd80      	pop	{r7, pc}

08007f3c <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 8007f3c:	b580      	push	{r7, lr}
 8007f3e:	b084      	sub	sp, #16
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	60f8      	str	r0, [r7, #12]
 8007f44:	60b9      	str	r1, [r7, #8]
 8007f46:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 8007f48:	687a      	ldr	r2, [r7, #4]
 8007f4a:	68b9      	ldr	r1, [r7, #8]
 8007f4c:	68f8      	ldr	r0, [r7, #12]
 8007f4e:	f002 f8d9 	bl	800a104 <memset>
 8007f52:	4603      	mov	r3, r0
}
 8007f54:	4618      	mov	r0, r3
 8007f56:	3710      	adds	r7, #16
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	bd80      	pop	{r7, pc}

08007f5c <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 8007f5c:	b480      	push	{r7}
 8007f5e:	af00      	add	r7, sp, #0
  return;
 8007f60:	bf00      	nop
}
 8007f62:	46bd      	mov	sp, r7
 8007f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f68:	4770      	bx	lr

08007f6a <BLS_Init>:

__WEAK void BLS_Init( void )
{
 8007f6a:	b480      	push	{r7}
 8007f6c:	af00      	add	r7, sp, #0
  return;
 8007f6e:	bf00      	nop
}
 8007f70:	46bd      	mov	sp, r7
 8007f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f76:	4770      	bx	lr

08007f78 <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 8007f78:	b480      	push	{r7}
 8007f7a:	af00      	add	r7, sp, #0
  return;
 8007f7c:	bf00      	nop
}
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f84:	4770      	bx	lr

08007f86 <DIS_Init>:
__WEAK void DIS_Init( void )
{
 8007f86:	b480      	push	{r7}
 8007f88:	af00      	add	r7, sp, #0
  return;
 8007f8a:	bf00      	nop
}
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f92:	4770      	bx	lr

08007f94 <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 8007f94:	b480      	push	{r7}
 8007f96:	af00      	add	r7, sp, #0
  return;
 8007f98:	bf00      	nop
}
 8007f9a:	46bd      	mov	sp, r7
 8007f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa0:	4770      	bx	lr

08007fa2 <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 8007fa2:	b480      	push	{r7}
 8007fa4:	af00      	add	r7, sp, #0
  return;
 8007fa6:	bf00      	nop
}
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fae:	4770      	bx	lr

08007fb0 <HRS_Init>:
__WEAK void HRS_Init( void )
{
 8007fb0:	b480      	push	{r7}
 8007fb2:	af00      	add	r7, sp, #0
  return;
 8007fb4:	bf00      	nop
}
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fbc:	4770      	bx	lr

08007fbe <HTS_Init>:
__WEAK void HTS_Init( void )
{
 8007fbe:	b480      	push	{r7}
 8007fc0:	af00      	add	r7, sp, #0
  return;
 8007fc2:	bf00      	nop
}
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fca:	4770      	bx	lr

08007fcc <IAS_Init>:
__WEAK void IAS_Init( void )
{
 8007fcc:	b480      	push	{r7}
 8007fce:	af00      	add	r7, sp, #0
  return;
 8007fd0:	bf00      	nop
}
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd8:	4770      	bx	lr

08007fda <LLS_Init>:
__WEAK void LLS_Init( void )
{
 8007fda:	b480      	push	{r7}
 8007fdc:	af00      	add	r7, sp, #0
  return;
 8007fde:	bf00      	nop
}
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe6:	4770      	bx	lr

08007fe8 <TPS_Init>:
__WEAK void TPS_Init( void )
{
 8007fe8:	b480      	push	{r7}
 8007fea:	af00      	add	r7, sp, #0
  return;
 8007fec:	bf00      	nop
}
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff4:	4770      	bx	lr

08007ff6 <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 8007ff6:	b480      	push	{r7}
 8007ff8:	af00      	add	r7, sp, #0
  return;
 8007ffa:	bf00      	nop
}
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008002:	4770      	bx	lr

08008004 <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 8008004:	b480      	push	{r7}
 8008006:	af00      	add	r7, sp, #0
  return;
 8008008:	bf00      	nop
}
 800800a:	46bd      	mov	sp, r7
 800800c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008010:	4770      	bx	lr

08008012 <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 8008012:	b480      	push	{r7}
 8008014:	af00      	add	r7, sp, #0
  return;
 8008016:	bf00      	nop
}
 8008018:	46bd      	mov	sp, r7
 800801a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801e:	4770      	bx	lr

08008020 <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 8008020:	b480      	push	{r7}
 8008022:	af00      	add	r7, sp, #0
  return;
 8008024:	bf00      	nop
}
 8008026:	46bd      	mov	sp, r7
 8008028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802c:	4770      	bx	lr

0800802e <MESH_Init>:
__WEAK void MESH_Init( void )
{
 800802e:	b480      	push	{r7}
 8008030:	af00      	add	r7, sp, #0
  return;
 8008032:	bf00      	nop
}
 8008034:	46bd      	mov	sp, r7
 8008036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803a:	4770      	bx	lr

0800803c <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 800803c:	b480      	push	{r7}
 800803e:	af00      	add	r7, sp, #0
  return;
 8008040:	bf00      	nop
}
 8008042:	46bd      	mov	sp, r7
 8008044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008048:	4770      	bx	lr
	...

0800804c <SVCCTL_Init>:
}

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 800804c:	b580      	push	{r7, lr}
 800804e:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 8008050:	4b04      	ldr	r3, [pc, #16]	; (8008064 <SVCCTL_Init+0x18>)
 8008052:	2200      	movs	r2, #0
 8008054:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 8008056:	4b04      	ldr	r3, [pc, #16]	; (8008068 <SVCCTL_Init+0x1c>)
 8008058:	2200      	movs	r2, #0
 800805a:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 800805c:	f000 f806 	bl	800806c <SVCCTL_SvcInit>

  return;
 8008060:	bf00      	nop
}
 8008062:	bd80      	pop	{r7, pc}
 8008064:	20000910 	.word	0x20000910
 8008068:	20000930 	.word	0x20000930

0800806c <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 800806c:	b580      	push	{r7, lr}
 800806e:	af00      	add	r7, sp, #0
  BAS_Init();
 8008070:	f7ff ff74 	bl	8007f5c <BAS_Init>

  BLS_Init();
 8008074:	f7ff ff79 	bl	8007f6a <BLS_Init>

  CRS_STM_Init();
 8008078:	f7ff ff7e 	bl	8007f78 <CRS_STM_Init>

  DIS_Init();
 800807c:	f7ff ff83 	bl	8007f86 <DIS_Init>

  EDS_STM_Init();
 8008080:	f7ff ff88 	bl	8007f94 <EDS_STM_Init>

  HIDS_Init();
 8008084:	f7ff ff8d 	bl	8007fa2 <HIDS_Init>

  HRS_Init();
 8008088:	f7ff ff92 	bl	8007fb0 <HRS_Init>

  HTS_Init();
 800808c:	f7ff ff97 	bl	8007fbe <HTS_Init>

  IAS_Init();
 8008090:	f7ff ff9c 	bl	8007fcc <IAS_Init>

  LLS_Init();
 8008094:	f7ff ffa1 	bl	8007fda <LLS_Init>

  TPS_Init();
 8008098:	f7ff ffa6 	bl	8007fe8 <TPS_Init>

  MOTENV_STM_Init();
 800809c:	f7ff ffab 	bl	8007ff6 <MOTENV_STM_Init>

  P2PS_STM_Init();
 80080a0:	f7ff ffb0 	bl	8008004 <P2PS_STM_Init>

  ZDD_STM_Init();
 80080a4:	f7ff ffb5 	bl	8008012 <ZDD_STM_Init>

  OTAS_STM_Init();
 80080a8:	f7ff ffba 	bl	8008020 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 80080ac:	f7ff ffc6 	bl	800803c <BVOPUS_STM_Init>

  MESH_Init();
 80080b0:	f7ff ffbd 	bl	800802e <MESH_Init>

  SVCCTL_InitCustomSvc();
 80080b4:	f001 faaa 	bl	800960c <SVCCTL_InitCustomSvc>
  
  return;
 80080b8:	bf00      	nop
}
 80080ba:	bd80      	pop	{r7, pc}

080080bc <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 80080bc:	b480      	push	{r7}
 80080be:	b083      	sub	sp, #12
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 80080c4:	4b09      	ldr	r3, [pc, #36]	; (80080ec <SVCCTL_RegisterSvcHandler+0x30>)
 80080c6:	7f1b      	ldrb	r3, [r3, #28]
 80080c8:	4619      	mov	r1, r3
 80080ca:	4a08      	ldr	r2, [pc, #32]	; (80080ec <SVCCTL_RegisterSvcHandler+0x30>)
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 80080d2:	4b06      	ldr	r3, [pc, #24]	; (80080ec <SVCCTL_RegisterSvcHandler+0x30>)
 80080d4:	7f1b      	ldrb	r3, [r3, #28]
 80080d6:	3301      	adds	r3, #1
 80080d8:	b2da      	uxtb	r2, r3
 80080da:	4b04      	ldr	r3, [pc, #16]	; (80080ec <SVCCTL_RegisterSvcHandler+0x30>)
 80080dc:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 80080de:	bf00      	nop
}
 80080e0:	370c      	adds	r7, #12
 80080e2:	46bd      	mov	sp, r7
 80080e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e8:	4770      	bx	lr
 80080ea:	bf00      	nop
 80080ec:	20000910 	.word	0x20000910

080080f0 <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 80080f0:	b580      	push	{r7, lr}
 80080f2:	b086      	sub	sp, #24
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	3301      	adds	r3, #1
 80080fc:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 80080fe:	2300      	movs	r3, #0
 8008100:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 8008102:	693b      	ldr	r3, [r7, #16]
 8008104:	781b      	ldrb	r3, [r3, #0]
 8008106:	2bff      	cmp	r3, #255	; 0xff
 8008108:	d125      	bne.n	8008156 <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 800810a:	693b      	ldr	r3, [r7, #16]
 800810c:	3302      	adds	r3, #2
 800810e:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	881b      	ldrh	r3, [r3, #0]
 8008114:	b29b      	uxth	r3, r3
 8008116:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800811a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800811e:	d118      	bne.n	8008152 <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8008120:	2300      	movs	r3, #0
 8008122:	757b      	strb	r3, [r7, #21]
 8008124:	e00d      	b.n	8008142 <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 8008126:	7d7b      	ldrb	r3, [r7, #21]
 8008128:	4a1a      	ldr	r2, [pc, #104]	; (8008194 <SVCCTL_UserEvtRx+0xa4>)
 800812a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800812e:	6878      	ldr	r0, [r7, #4]
 8008130:	4798      	blx	r3
 8008132:	4603      	mov	r3, r0
 8008134:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 8008136:	7dfb      	ldrb	r3, [r7, #23]
 8008138:	2b00      	cmp	r3, #0
 800813a:	d108      	bne.n	800814e <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800813c:	7d7b      	ldrb	r3, [r7, #21]
 800813e:	3301      	adds	r3, #1
 8008140:	757b      	strb	r3, [r7, #21]
 8008142:	4b14      	ldr	r3, [pc, #80]	; (8008194 <SVCCTL_UserEvtRx+0xa4>)
 8008144:	7f1b      	ldrb	r3, [r3, #28]
 8008146:	7d7a      	ldrb	r2, [r7, #21]
 8008148:	429a      	cmp	r2, r3
 800814a:	d3ec      	bcc.n	8008126 <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 800814c:	e002      	b.n	8008154 <SVCCTL_UserEvtRx+0x64>
              break;
 800814e:	bf00      	nop
          break;
 8008150:	e000      	b.n	8008154 <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 8008152:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 8008154:	e000      	b.n	8008158 <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 8008156:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the applicaiton.
   */
  switch (event_notification_status)
 8008158:	7dfb      	ldrb	r3, [r7, #23]
 800815a:	2b02      	cmp	r3, #2
 800815c:	d00f      	beq.n	800817e <SVCCTL_UserEvtRx+0x8e>
 800815e:	2b02      	cmp	r3, #2
 8008160:	dc10      	bgt.n	8008184 <SVCCTL_UserEvtRx+0x94>
 8008162:	2b00      	cmp	r3, #0
 8008164:	d002      	beq.n	800816c <SVCCTL_UserEvtRx+0x7c>
 8008166:	2b01      	cmp	r3, #1
 8008168:	d006      	beq.n	8008178 <SVCCTL_UserEvtRx+0x88>
 800816a:	e00b      	b.n	8008184 <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 800816c:	6878      	ldr	r0, [r7, #4]
 800816e:	f000 ff7b 	bl	8009068 <SVCCTL_App_Notification>
 8008172:	4603      	mov	r3, r0
 8008174:	75bb      	strb	r3, [r7, #22]
      break;
 8008176:	e008      	b.n	800818a <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 8008178:	2301      	movs	r3, #1
 800817a:	75bb      	strb	r3, [r7, #22]
      break;
 800817c:	e005      	b.n	800818a <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 800817e:	2300      	movs	r3, #0
 8008180:	75bb      	strb	r3, [r7, #22]
      break;
 8008182:	e002      	b.n	800818a <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 8008184:	2301      	movs	r3, #1
 8008186:	75bb      	strb	r3, [r7, #22]
      break;
 8008188:	bf00      	nop
  }

  return (return_status);
 800818a:	7dbb      	ldrb	r3, [r7, #22]
}
 800818c:	4618      	mov	r0, r3
 800818e:	3718      	adds	r7, #24
 8008190:	46bd      	mov	sp, r7
 8008192:	bd80      	pop	{r7, pc}
 8008194:	20000910 	.word	0x20000910

08008198 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 8008198:	b580      	push	{r7, lr}
 800819a:	b088      	sub	sp, #32
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 80081a0:	f107 030c 	add.w	r3, r7, #12
 80081a4:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 80081ac:	69fb      	ldr	r3, [r7, #28]
 80081ae:	212e      	movs	r1, #46	; 0x2e
 80081b0:	f64f 4066 	movw	r0, #64614	; 0xfc66
 80081b4:	f000 fae2 	bl	800877c <shci_send>
            p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 80081b8:	69fb      	ldr	r3, [r7, #28]
 80081ba:	330b      	adds	r3, #11
 80081bc:	78db      	ldrb	r3, [r3, #3]
}
 80081be:	4618      	mov	r0, r3
 80081c0:	3720      	adds	r7, #32
 80081c2:	46bd      	mov	sp, r7
 80081c4:	bd80      	pop	{r7, pc}

080081c6 <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 80081c6:	b580      	push	{r7, lr}
 80081c8:	b088      	sub	sp, #32
 80081ca:	af00      	add	r7, sp, #0
 80081cc:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 80081ce:	f107 030c 	add.w	r3, r7, #12
 80081d2:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 80081da:	69fb      	ldr	r3, [r7, #28]
 80081dc:	210f      	movs	r1, #15
 80081de:	f64f 4068 	movw	r0, #64616	; 0xfc68
 80081e2:	f000 facb 	bl	800877c <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 80081e6:	69fb      	ldr	r3, [r7, #28]
 80081e8:	330b      	adds	r3, #11
 80081ea:	78db      	ldrb	r3, [r3, #3]
}
 80081ec:	4618      	mov	r0, r3
 80081ee:	3720      	adds	r7, #32
 80081f0:	46bd      	mov	sp, r7
 80081f2:	bd80      	pop	{r7, pc}

080081f4 <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 80081f4:	b580      	push	{r7, lr}
 80081f6:	b088      	sub	sp, #32
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 80081fc:	f107 030c 	add.w	r3, r7, #12
 8008200:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 8008202:	69fb      	ldr	r3, [r7, #28]
 8008204:	687a      	ldr	r2, [r7, #4]
 8008206:	2110      	movs	r1, #16
 8008208:	f64f 4075 	movw	r0, #64629	; 0xfc75
 800820c:	f000 fab6 	bl	800877c <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8008210:	69fb      	ldr	r3, [r7, #28]
 8008212:	330b      	adds	r3, #11
 8008214:	78db      	ldrb	r3, [r3, #3]
}
 8008216:	4618      	mov	r0, r3
 8008218:	3720      	adds	r7, #32
 800821a:	46bd      	mov	sp, r7
 800821c:	bd80      	pop	{r7, pc}
	...

08008220 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 8008220:	b480      	push	{r7}
 8008222:	b08b      	sub	sp, #44	; 0x2c
 8008224:	af00      	add	r7, sp, #0
 8008226:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 8008228:	2300      	movs	r3, #0
 800822a:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 800822c:	2300      	movs	r3, #0
 800822e:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 8008230:	2300      	movs	r3, #0
 8008232:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t wireless_firmware_memorySize = 0;
 8008234:	2300      	movs	r3, #0
 8008236:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 8008238:	2300      	movs	r3, #0
 800823a:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 800823c:	2300      	movs	r3, #0
 800823e:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 8008240:	2300      	movs	r3, #0
 8008242:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 8008244:	2300      	movs	r3, #0
 8008246:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 8008248:	4b4a      	ldr	r3, [pc, #296]	; (8008374 <SHCI_GetWirelessFwInfo+0x154>)
 800824a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800824c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8008250:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 8008252:	693b      	ldr	r3, [r7, #16]
 8008254:	009b      	lsls	r3, r3, #2
 8008256:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800825a:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 8008262:	68bb      	ldr	r3, [r7, #8]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	4a44      	ldr	r2, [pc, #272]	; (8008378 <SHCI_GetWirelessFwInfo+0x158>)
 8008268:	4293      	cmp	r3, r2
 800826a:	d10f      	bne.n	800828c <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 800826c:	68bb      	ldr	r3, [r7, #8]
 800826e:	695b      	ldr	r3, [r3, #20]
 8008270:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 8008272:	68bb      	ldr	r3, [r7, #8]
 8008274:	699b      	ldr	r3, [r3, #24]
 8008276:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 8008278:	68bb      	ldr	r3, [r7, #8]
 800827a:	69db      	ldr	r3, [r3, #28]
 800827c:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 800827e:	68bb      	ldr	r3, [r7, #8]
 8008280:	68db      	ldr	r3, [r3, #12]
 8008282:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 8008284:	68bb      	ldr	r3, [r7, #8]
 8008286:	691b      	ldr	r3, [r3, #16]
 8008288:	617b      	str	r3, [r7, #20]
 800828a:	e01a      	b.n	80082c2 <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 800828c:	693b      	ldr	r3, [r7, #16]
 800828e:	009b      	lsls	r3, r3, #2
 8008290:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8008294:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8008298:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	691b      	ldr	r3, [r3, #16]
 80082a0:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	695b      	ldr	r3, [r3, #20]
 80082a8:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	699b      	ldr	r3, [r3, #24]
 80082b0:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	685b      	ldr	r3, [r3, #4]
 80082b8:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	689b      	ldr	r3, [r3, #8]
 80082c0:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 80082c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082c4:	0e1b      	lsrs	r3, r3, #24
 80082c6:	b2da      	uxtb	r2, r3
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 80082cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082ce:	0c1b      	lsrs	r3, r3, #16
 80082d0:	b2da      	uxtb	r2, r3
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 80082d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082d8:	0a1b      	lsrs	r3, r3, #8
 80082da:	b2da      	uxtb	r2, r3
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 80082e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082e2:	091b      	lsrs	r3, r3, #4
 80082e4:	b2db      	uxtb	r3, r3
 80082e6:	f003 030f 	and.w	r3, r3, #15
 80082ea:	b2da      	uxtb	r2, r3
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 80082f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082f2:	b2db      	uxtb	r3, r3
 80082f4:	f003 030f 	and.w	r3, r3, #15
 80082f8:	b2da      	uxtb	r2, r3
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 80082fe:	6a3b      	ldr	r3, [r7, #32]
 8008300:	0e1b      	lsrs	r3, r3, #24
 8008302:	b2da      	uxtb	r2, r3
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8008308:	6a3b      	ldr	r3, [r7, #32]
 800830a:	0c1b      	lsrs	r3, r3, #16
 800830c:	b2da      	uxtb	r2, r3
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 8008312:	6a3b      	ldr	r3, [r7, #32]
 8008314:	0a1b      	lsrs	r3, r3, #8
 8008316:	b2da      	uxtb	r2, r3
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800831c:	6a3b      	ldr	r3, [r7, #32]
 800831e:	b2da      	uxtb	r2, r3
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 8008324:	69fb      	ldr	r3, [r7, #28]
 8008326:	b2da      	uxtb	r2, r3
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800832c:	69bb      	ldr	r3, [r7, #24]
 800832e:	0e1b      	lsrs	r3, r3, #24
 8008330:	b2da      	uxtb	r2, r3
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8008336:	69bb      	ldr	r3, [r7, #24]
 8008338:	0c1b      	lsrs	r3, r3, #16
 800833a:	b2da      	uxtb	r2, r3
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8008340:	69bb      	ldr	r3, [r7, #24]
 8008342:	0a1b      	lsrs	r3, r3, #8
 8008344:	b2da      	uxtb	r2, r3
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800834a:	697b      	ldr	r3, [r7, #20]
 800834c:	0e1b      	lsrs	r3, r3, #24
 800834e:	b2da      	uxtb	r2, r3
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8008354:	697b      	ldr	r3, [r7, #20]
 8008356:	0c1b      	lsrs	r3, r3, #16
 8008358:	b2da      	uxtb	r2, r3
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800835e:	697b      	ldr	r3, [r7, #20]
 8008360:	b2da      	uxtb	r2, r3
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 8008366:	2300      	movs	r3, #0
}
 8008368:	4618      	mov	r0, r3
 800836a:	372c      	adds	r7, #44	; 0x2c
 800836c:	46bd      	mov	sp, r7
 800836e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008372:	4770      	bx	lr
 8008374:	58004000 	.word	0x58004000
 8008378:	a94656b9 	.word	0xa94656b9

0800837c <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800837c:	b580      	push	{r7, lr}
 800837e:	b082      	sub	sp, #8
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
 8008384:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8008386:	683b      	ldr	r3, [r7, #0]
 8008388:	685b      	ldr	r3, [r3, #4]
 800838a:	4a08      	ldr	r2, [pc, #32]	; (80083ac <hci_init+0x30>)
 800838c:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 800838e:	4a08      	ldr	r2, [pc, #32]	; (80083b0 <hci_init+0x34>)
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 8008394:	4806      	ldr	r0, [pc, #24]	; (80083b0 <hci_init+0x34>)
 8008396:	f000 f973 	bl	8008680 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800839a:	683b      	ldr	r3, [r7, #0]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	4618      	mov	r0, r3
 80083a0:	f000 f8d4 	bl	800854c <TlInit>

  return;
 80083a4:	bf00      	nop
}
 80083a6:	3708      	adds	r7, #8
 80083a8:	46bd      	mov	sp, r7
 80083aa:	bd80      	pop	{r7, pc}
 80083ac:	20000bd0 	.word	0x20000bd0
 80083b0:	20000ba8 	.word	0x20000ba8

080083b4 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 80083b4:	b580      	push	{r7, lr}
 80083b6:	b084      	sub	sp, #16
 80083b8:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 80083ba:	4822      	ldr	r0, [pc, #136]	; (8008444 <hci_user_evt_proc+0x90>)
 80083bc:	f000 fd28 	bl	8008e10 <LST_is_empty>
 80083c0:	4603      	mov	r3, r0
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d12b      	bne.n	800841e <hci_user_evt_proc+0x6a>
 80083c6:	4b20      	ldr	r3, [pc, #128]	; (8008448 <hci_user_evt_proc+0x94>)
 80083c8:	781b      	ldrb	r3, [r3, #0]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d027      	beq.n	800841e <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 80083ce:	f107 030c 	add.w	r3, r7, #12
 80083d2:	4619      	mov	r1, r3
 80083d4:	481b      	ldr	r0, [pc, #108]	; (8008444 <hci_user_evt_proc+0x90>)
 80083d6:	f000 fdaa 	bl	8008f2e <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 80083da:	4b1c      	ldr	r3, [pc, #112]	; (800844c <hci_user_evt_proc+0x98>)
 80083dc:	69db      	ldr	r3, [r3, #28]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d00c      	beq.n	80083fc <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 80083e6:	2301      	movs	r3, #1
 80083e8:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 80083ea:	4b18      	ldr	r3, [pc, #96]	; (800844c <hci_user_evt_proc+0x98>)
 80083ec:	69db      	ldr	r3, [r3, #28]
 80083ee:	1d3a      	adds	r2, r7, #4
 80083f0:	4610      	mov	r0, r2
 80083f2:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 80083f4:	793a      	ldrb	r2, [r7, #4]
 80083f6:	4b14      	ldr	r3, [pc, #80]	; (8008448 <hci_user_evt_proc+0x94>)
 80083f8:	701a      	strb	r2, [r3, #0]
 80083fa:	e002      	b.n	8008402 <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 80083fc:	4b12      	ldr	r3, [pc, #72]	; (8008448 <hci_user_evt_proc+0x94>)
 80083fe:	2201      	movs	r2, #1
 8008400:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 8008402:	4b11      	ldr	r3, [pc, #68]	; (8008448 <hci_user_evt_proc+0x94>)
 8008404:	781b      	ldrb	r3, [r3, #0]
 8008406:	2b00      	cmp	r3, #0
 8008408:	d004      	beq.n	8008414 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	4618      	mov	r0, r3
 800840e:	f000 fc03 	bl	8008c18 <TL_MM_EvtDone>
 8008412:	e004      	b.n	800841e <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	4619      	mov	r1, r3
 8008418:	480a      	ldr	r0, [pc, #40]	; (8008444 <hci_user_evt_proc+0x90>)
 800841a:	f000 fd1b 	bl	8008e54 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800841e:	4809      	ldr	r0, [pc, #36]	; (8008444 <hci_user_evt_proc+0x90>)
 8008420:	f000 fcf6 	bl	8008e10 <LST_is_empty>
 8008424:	4603      	mov	r3, r0
 8008426:	2b00      	cmp	r3, #0
 8008428:	d107      	bne.n	800843a <hci_user_evt_proc+0x86>
 800842a:	4b07      	ldr	r3, [pc, #28]	; (8008448 <hci_user_evt_proc+0x94>)
 800842c:	781b      	ldrb	r3, [r3, #0]
 800842e:	2b00      	cmp	r3, #0
 8008430:	d003      	beq.n	800843a <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 8008432:	4804      	ldr	r0, [pc, #16]	; (8008444 <hci_user_evt_proc+0x90>)
 8008434:	f001 f830 	bl	8009498 <hci_notify_asynch_evt>
  }


  return;
 8008438:	bf00      	nop
 800843a:	bf00      	nop
}
 800843c:	3710      	adds	r7, #16
 800843e:	46bd      	mov	sp, r7
 8008440:	bd80      	pop	{r7, pc}
 8008442:	bf00      	nop
 8008444:	20000938 	.word	0x20000938
 8008448:	20000944 	.word	0x20000944
 800844c:	20000ba8 	.word	0x20000ba8

08008450 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 8008450:	b580      	push	{r7, lr}
 8008452:	b088      	sub	sp, #32
 8008454:	af00      	add	r7, sp, #0
 8008456:	6078      	str	r0, [r7, #4]
 8008458:	460b      	mov	r3, r1
 800845a:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 800845c:	2000      	movs	r0, #0
 800845e:	f000 f8cb 	bl	80085f8 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 8008462:	2300      	movs	r3, #0
 8008464:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	885b      	ldrh	r3, [r3, #2]
 800846a:	b21b      	sxth	r3, r3
 800846c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008470:	b21a      	sxth	r2, r3
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	881b      	ldrh	r3, [r3, #0]
 8008476:	029b      	lsls	r3, r3, #10
 8008478:	b21b      	sxth	r3, r3
 800847a:	4313      	orrs	r3, r2
 800847c:	b21b      	sxth	r3, r3
 800847e:	83bb      	strh	r3, [r7, #28]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	68db      	ldr	r3, [r3, #12]
 8008484:	b2d9      	uxtb	r1, r3
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	689a      	ldr	r2, [r3, #8]
 800848a:	8bbb      	ldrh	r3, [r7, #28]
 800848c:	4618      	mov	r0, r3
 800848e:	f000 f88d 	bl	80085ac <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 8008492:	e04e      	b.n	8008532 <hci_send_req+0xe2>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 8008494:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8008498:	f001 f815 	bl	80094c6 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800849c:	e043      	b.n	8008526 <hci_send_req+0xd6>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 800849e:	f107 030c 	add.w	r3, r7, #12
 80084a2:	4619      	mov	r1, r3
 80084a4:	4828      	ldr	r0, [pc, #160]	; (8008548 <hci_send_req+0xf8>)
 80084a6:	f000 fd42 	bl	8008f2e <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	7a5b      	ldrb	r3, [r3, #9]
 80084ae:	2b0f      	cmp	r3, #15
 80084b0:	d114      	bne.n	80084dc <hci_send_req+0x8c>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	330b      	adds	r3, #11
 80084b6:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 80084b8:	693b      	ldr	r3, [r7, #16]
 80084ba:	885b      	ldrh	r3, [r3, #2]
 80084bc:	b29b      	uxth	r3, r3
 80084be:	8bba      	ldrh	r2, [r7, #28]
 80084c0:	429a      	cmp	r2, r3
 80084c2:	d104      	bne.n	80084ce <hci_send_req+0x7e>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	691b      	ldr	r3, [r3, #16]
 80084c8:	693a      	ldr	r2, [r7, #16]
 80084ca:	7812      	ldrb	r2, [r2, #0]
 80084cc:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 80084ce:	693b      	ldr	r3, [r7, #16]
 80084d0:	785b      	ldrb	r3, [r3, #1]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d027      	beq.n	8008526 <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 80084d6:	2301      	movs	r3, #1
 80084d8:	77fb      	strb	r3, [r7, #31]
 80084da:	e024      	b.n	8008526 <hci_send_req+0xd6>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	330b      	adds	r3, #11
 80084e0:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 80084e2:	69bb      	ldr	r3, [r7, #24]
 80084e4:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80084e8:	b29b      	uxth	r3, r3
 80084ea:	8bba      	ldrh	r2, [r7, #28]
 80084ec:	429a      	cmp	r2, r3
 80084ee:	d114      	bne.n	800851a <hci_send_req+0xca>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	7a9b      	ldrb	r3, [r3, #10]
 80084f4:	3b03      	subs	r3, #3
 80084f6:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	695a      	ldr	r2, [r3, #20]
 80084fc:	7dfb      	ldrb	r3, [r7, #23]
 80084fe:	429a      	cmp	r2, r3
 8008500:	bfa8      	it	ge
 8008502:	461a      	movge	r2, r3
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	6918      	ldr	r0, [r3, #16]
 800850c:	69bb      	ldr	r3, [r7, #24]
 800850e:	1cd9      	adds	r1, r3, #3
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	695b      	ldr	r3, [r3, #20]
 8008514:	461a      	mov	r2, r3
 8008516:	f001 fde7 	bl	800a0e8 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 800851a:	69bb      	ldr	r3, [r7, #24]
 800851c:	781b      	ldrb	r3, [r3, #0]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d001      	beq.n	8008526 <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8008522:	2301      	movs	r3, #1
 8008524:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8008526:	4808      	ldr	r0, [pc, #32]	; (8008548 <hci_send_req+0xf8>)
 8008528:	f000 fc72 	bl	8008e10 <LST_is_empty>
 800852c:	4603      	mov	r3, r0
 800852e:	2b00      	cmp	r3, #0
 8008530:	d0b5      	beq.n	800849e <hci_send_req+0x4e>
  while(local_cmd_status == HCI_TL_CmdBusy)
 8008532:	7ffb      	ldrb	r3, [r7, #31]
 8008534:	2b00      	cmp	r3, #0
 8008536:	d0ad      	beq.n	8008494 <hci_send_req+0x44>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 8008538:	2001      	movs	r0, #1
 800853a:	f000 f85d 	bl	80085f8 <NotifyCmdStatus>

  return 0;
 800853e:	2300      	movs	r3, #0
}
 8008540:	4618      	mov	r0, r3
 8008542:	3720      	adds	r7, #32
 8008544:	46bd      	mov	sp, r7
 8008546:	bd80      	pop	{r7, pc}
 8008548:	20000bc8 	.word	0x20000bc8

0800854c <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800854c:	b580      	push	{r7, lr}
 800854e:	b086      	sub	sp, #24
 8008550:	af00      	add	r7, sp, #0
 8008552:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 8008554:	480f      	ldr	r0, [pc, #60]	; (8008594 <TlInit+0x48>)
 8008556:	f000 fc4b 	bl	8008df0 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 800855a:	4a0f      	ldr	r2, [pc, #60]	; (8008598 <TlInit+0x4c>)
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 8008560:	480e      	ldr	r0, [pc, #56]	; (800859c <TlInit+0x50>)
 8008562:	f000 fc45 	bl	8008df0 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8008566:	4b0e      	ldr	r3, [pc, #56]	; (80085a0 <TlInit+0x54>)
 8008568:	2201      	movs	r2, #1
 800856a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 800856c:	4b0d      	ldr	r3, [pc, #52]	; (80085a4 <TlInit+0x58>)
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	2b00      	cmp	r3, #0
 8008572:	d00a      	beq.n	800858a <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 8008578:	4b0b      	ldr	r3, [pc, #44]	; (80085a8 <TlInit+0x5c>)
 800857a:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 800857c:	4b09      	ldr	r3, [pc, #36]	; (80085a4 <TlInit+0x58>)
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	f107 0208 	add.w	r2, r7, #8
 8008584:	4610      	mov	r0, r2
 8008586:	4798      	blx	r3
  }

  return;
 8008588:	bf00      	nop
 800858a:	bf00      	nop
}
 800858c:	3718      	adds	r7, #24
 800858e:	46bd      	mov	sp, r7
 8008590:	bd80      	pop	{r7, pc}
 8008592:	bf00      	nop
 8008594:	20000bc8 	.word	0x20000bc8
 8008598:	20000940 	.word	0x20000940
 800859c:	20000938 	.word	0x20000938
 80085a0:	20000944 	.word	0x20000944
 80085a4:	20000ba8 	.word	0x20000ba8
 80085a8:	08008639 	.word	0x08008639

080085ac <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 80085ac:	b580      	push	{r7, lr}
 80085ae:	b082      	sub	sp, #8
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	4603      	mov	r3, r0
 80085b4:	603a      	str	r2, [r7, #0]
 80085b6:	80fb      	strh	r3, [r7, #6]
 80085b8:	460b      	mov	r3, r1
 80085ba:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 80085bc:	4b0c      	ldr	r3, [pc, #48]	; (80085f0 <SendCmd+0x44>)
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	88fa      	ldrh	r2, [r7, #6]
 80085c2:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 80085c6:	4b0a      	ldr	r3, [pc, #40]	; (80085f0 <SendCmd+0x44>)
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	797a      	ldrb	r2, [r7, #5]
 80085cc:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 80085ce:	4b08      	ldr	r3, [pc, #32]	; (80085f0 <SendCmd+0x44>)
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	330c      	adds	r3, #12
 80085d4:	797a      	ldrb	r2, [r7, #5]
 80085d6:	6839      	ldr	r1, [r7, #0]
 80085d8:	4618      	mov	r0, r3
 80085da:	f001 fd85 	bl	800a0e8 <memcpy>

  hciContext.io.Send(0,0);
 80085de:	4b05      	ldr	r3, [pc, #20]	; (80085f4 <SendCmd+0x48>)
 80085e0:	691b      	ldr	r3, [r3, #16]
 80085e2:	2100      	movs	r1, #0
 80085e4:	2000      	movs	r0, #0
 80085e6:	4798      	blx	r3

  return;
 80085e8:	bf00      	nop
}
 80085ea:	3708      	adds	r7, #8
 80085ec:	46bd      	mov	sp, r7
 80085ee:	bd80      	pop	{r7, pc}
 80085f0:	20000940 	.word	0x20000940
 80085f4:	20000ba8 	.word	0x20000ba8

080085f8 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 80085f8:	b580      	push	{r7, lr}
 80085fa:	b082      	sub	sp, #8
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	4603      	mov	r3, r0
 8008600:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 8008602:	79fb      	ldrb	r3, [r7, #7]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d108      	bne.n	800861a <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 8008608:	4b0a      	ldr	r3, [pc, #40]	; (8008634 <NotifyCmdStatus+0x3c>)
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	2b00      	cmp	r3, #0
 800860e:	d00d      	beq.n	800862c <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 8008610:	4b08      	ldr	r3, [pc, #32]	; (8008634 <NotifyCmdStatus+0x3c>)
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	2000      	movs	r0, #0
 8008616:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 8008618:	e008      	b.n	800862c <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 800861a:	4b06      	ldr	r3, [pc, #24]	; (8008634 <NotifyCmdStatus+0x3c>)
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	2b00      	cmp	r3, #0
 8008620:	d004      	beq.n	800862c <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 8008622:	4b04      	ldr	r3, [pc, #16]	; (8008634 <NotifyCmdStatus+0x3c>)
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	2001      	movs	r0, #1
 8008628:	4798      	blx	r3
  return;
 800862a:	bf00      	nop
 800862c:	bf00      	nop
}
 800862e:	3708      	adds	r7, #8
 8008630:	46bd      	mov	sp, r7
 8008632:	bd80      	pop	{r7, pc}
 8008634:	20000bd0 	.word	0x20000bd0

08008638 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 8008638:	b580      	push	{r7, lr}
 800863a:	b082      	sub	sp, #8
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	7a5b      	ldrb	r3, [r3, #9]
 8008644:	2b0f      	cmp	r3, #15
 8008646:	d003      	beq.n	8008650 <TlEvtReceived+0x18>
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	7a5b      	ldrb	r3, [r3, #9]
 800864c:	2b0e      	cmp	r3, #14
 800864e:	d107      	bne.n	8008660 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 8008650:	6879      	ldr	r1, [r7, #4]
 8008652:	4809      	ldr	r0, [pc, #36]	; (8008678 <TlEvtReceived+0x40>)
 8008654:	f000 fc24 	bl	8008ea0 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 8008658:	2000      	movs	r0, #0
 800865a:	f000 ff29 	bl	80094b0 <hci_cmd_resp_release>
 800865e:	e006      	b.n	800866e <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 8008660:	6879      	ldr	r1, [r7, #4]
 8008662:	4806      	ldr	r0, [pc, #24]	; (800867c <TlEvtReceived+0x44>)
 8008664:	f000 fc1c 	bl	8008ea0 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8008668:	4804      	ldr	r0, [pc, #16]	; (800867c <TlEvtReceived+0x44>)
 800866a:	f000 ff15 	bl	8009498 <hci_notify_asynch_evt>
  }

  return;
 800866e:	bf00      	nop
}
 8008670:	3708      	adds	r7, #8
 8008672:	46bd      	mov	sp, r7
 8008674:	bd80      	pop	{r7, pc}
 8008676:	bf00      	nop
 8008678:	20000bc8 	.word	0x20000bc8
 800867c:	20000938 	.word	0x20000938

08008680 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 8008680:	b480      	push	{r7}
 8008682:	b083      	sub	sp, #12
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	4a05      	ldr	r2, [pc, #20]	; (80086a0 <hci_register_io_bus+0x20>)
 800868c:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	4a04      	ldr	r2, [pc, #16]	; (80086a4 <hci_register_io_bus+0x24>)
 8008692:	611a      	str	r2, [r3, #16]

  return;
 8008694:	bf00      	nop
}
 8008696:	370c      	adds	r7, #12
 8008698:	46bd      	mov	sp, r7
 800869a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869e:	4770      	bx	lr
 80086a0:	08008991 	.word	0x08008991
 80086a4:	080089f9 	.word	0x080089f9

080086a8 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 80086a8:	b580      	push	{r7, lr}
 80086aa:	b082      	sub	sp, #8
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]
 80086b0:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 80086b2:	683b      	ldr	r3, [r7, #0]
 80086b4:	685b      	ldr	r3, [r3, #4]
 80086b6:	4a08      	ldr	r2, [pc, #32]	; (80086d8 <shci_init+0x30>)
 80086b8:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 80086ba:	4a08      	ldr	r2, [pc, #32]	; (80086dc <shci_init+0x34>)
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 80086c0:	4806      	ldr	r0, [pc, #24]	; (80086dc <shci_init+0x34>)
 80086c2:	f000 f911 	bl	80088e8 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 80086c6:	683b      	ldr	r3, [r7, #0]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	4618      	mov	r0, r3
 80086cc:	f000 f894 	bl	80087f8 <TlInit>

  return;
 80086d0:	bf00      	nop
}
 80086d2:	3708      	adds	r7, #8
 80086d4:	46bd      	mov	sp, r7
 80086d6:	bd80      	pop	{r7, pc}
 80086d8:	20000bf4 	.word	0x20000bf4
 80086dc:	20000bd4 	.word	0x20000bd4

080086e0 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 80086e0:	b580      	push	{r7, lr}
 80086e2:	b084      	sub	sp, #16
 80086e4:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 80086e6:	4822      	ldr	r0, [pc, #136]	; (8008770 <shci_user_evt_proc+0x90>)
 80086e8:	f000 fb92 	bl	8008e10 <LST_is_empty>
 80086ec:	4603      	mov	r3, r0
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d12b      	bne.n	800874a <shci_user_evt_proc+0x6a>
 80086f2:	4b20      	ldr	r3, [pc, #128]	; (8008774 <shci_user_evt_proc+0x94>)
 80086f4:	781b      	ldrb	r3, [r3, #0]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d027      	beq.n	800874a <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 80086fa:	f107 030c 	add.w	r3, r7, #12
 80086fe:	4619      	mov	r1, r3
 8008700:	481b      	ldr	r0, [pc, #108]	; (8008770 <shci_user_evt_proc+0x90>)
 8008702:	f000 fc14 	bl	8008f2e <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 8008706:	4b1c      	ldr	r3, [pc, #112]	; (8008778 <shci_user_evt_proc+0x98>)
 8008708:	69db      	ldr	r3, [r3, #28]
 800870a:	2b00      	cmp	r3, #0
 800870c:	d00c      	beq.n	8008728 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 8008712:	2301      	movs	r3, #1
 8008714:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 8008716:	4b18      	ldr	r3, [pc, #96]	; (8008778 <shci_user_evt_proc+0x98>)
 8008718:	69db      	ldr	r3, [r3, #28]
 800871a:	1d3a      	adds	r2, r7, #4
 800871c:	4610      	mov	r0, r2
 800871e:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 8008720:	793a      	ldrb	r2, [r7, #4]
 8008722:	4b14      	ldr	r3, [pc, #80]	; (8008774 <shci_user_evt_proc+0x94>)
 8008724:	701a      	strb	r2, [r3, #0]
 8008726:	e002      	b.n	800872e <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8008728:	4b12      	ldr	r3, [pc, #72]	; (8008774 <shci_user_evt_proc+0x94>)
 800872a:	2201      	movs	r2, #1
 800872c:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 800872e:	4b11      	ldr	r3, [pc, #68]	; (8008774 <shci_user_evt_proc+0x94>)
 8008730:	781b      	ldrb	r3, [r3, #0]
 8008732:	2b00      	cmp	r3, #0
 8008734:	d004      	beq.n	8008740 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	4618      	mov	r0, r3
 800873a:	f000 fa6d 	bl	8008c18 <TL_MM_EvtDone>
 800873e:	e004      	b.n	800874a <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	4619      	mov	r1, r3
 8008744:	480a      	ldr	r0, [pc, #40]	; (8008770 <shci_user_evt_proc+0x90>)
 8008746:	f000 fb85 	bl	8008e54 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800874a:	4809      	ldr	r0, [pc, #36]	; (8008770 <shci_user_evt_proc+0x90>)
 800874c:	f000 fb60 	bl	8008e10 <LST_is_empty>
 8008750:	4603      	mov	r3, r0
 8008752:	2b00      	cmp	r3, #0
 8008754:	d107      	bne.n	8008766 <shci_user_evt_proc+0x86>
 8008756:	4b07      	ldr	r3, [pc, #28]	; (8008774 <shci_user_evt_proc+0x94>)
 8008758:	781b      	ldrb	r3, [r3, #0]
 800875a:	2b00      	cmp	r3, #0
 800875c:	d003      	beq.n	8008766 <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 800875e:	4804      	ldr	r0, [pc, #16]	; (8008770 <shci_user_evt_proc+0x90>)
 8008760:	f7f8 fb36 	bl	8000dd0 <shci_notify_asynch_evt>
  }


  return;
 8008764:	bf00      	nop
 8008766:	bf00      	nop
}
 8008768:	3710      	adds	r7, #16
 800876a:	46bd      	mov	sp, r7
 800876c:	bd80      	pop	{r7, pc}
 800876e:	bf00      	nop
 8008770:	20000948 	.word	0x20000948
 8008774:	20000958 	.word	0x20000958
 8008778:	20000bd4 	.word	0x20000bd4

0800877c <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 800877c:	b580      	push	{r7, lr}
 800877e:	b084      	sub	sp, #16
 8008780:	af00      	add	r7, sp, #0
 8008782:	60ba      	str	r2, [r7, #8]
 8008784:	607b      	str	r3, [r7, #4]
 8008786:	4603      	mov	r3, r0
 8008788:	81fb      	strh	r3, [r7, #14]
 800878a:	460b      	mov	r3, r1
 800878c:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 800878e:	2000      	movs	r0, #0
 8008790:	f000 f864 	bl	800885c <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 8008794:	4b16      	ldr	r3, [pc, #88]	; (80087f0 <shci_send+0x74>)
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	89fa      	ldrh	r2, [r7, #14]
 800879a:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 800879e:	4b14      	ldr	r3, [pc, #80]	; (80087f0 <shci_send+0x74>)
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	7b7a      	ldrb	r2, [r7, #13]
 80087a4:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 80087a6:	4b12      	ldr	r3, [pc, #72]	; (80087f0 <shci_send+0x74>)
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	330c      	adds	r3, #12
 80087ac:	7b7a      	ldrb	r2, [r7, #13]
 80087ae:	68b9      	ldr	r1, [r7, #8]
 80087b0:	4618      	mov	r0, r3
 80087b2:	f001 fc99 	bl	800a0e8 <memcpy>

  shciContext.io.Send(0,0);
 80087b6:	4b0f      	ldr	r3, [pc, #60]	; (80087f4 <shci_send+0x78>)
 80087b8:	691b      	ldr	r3, [r3, #16]
 80087ba:	2100      	movs	r1, #0
 80087bc:	2000      	movs	r0, #0
 80087be:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 80087c0:	f248 00e8 	movw	r0, #33000	; 0x80e8
 80087c4:	f7f8 fb1b 	bl	8000dfe <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	f103 0008 	add.w	r0, r3, #8
 80087ce:	4b08      	ldr	r3, [pc, #32]	; (80087f0 <shci_send+0x74>)
 80087d0:	6819      	ldr	r1, [r3, #0]
 80087d2:	4b07      	ldr	r3, [pc, #28]	; (80087f0 <shci_send+0x74>)
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	789b      	ldrb	r3, [r3, #2]
 80087d8:	3303      	adds	r3, #3
 80087da:	461a      	mov	r2, r3
 80087dc:	f001 fc84 	bl	800a0e8 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 80087e0:	2001      	movs	r0, #1
 80087e2:	f000 f83b 	bl	800885c <Cmd_SetStatus>

  return;
 80087e6:	bf00      	nop
}
 80087e8:	3710      	adds	r7, #16
 80087ea:	46bd      	mov	sp, r7
 80087ec:	bd80      	pop	{r7, pc}
 80087ee:	bf00      	nop
 80087f0:	20000954 	.word	0x20000954
 80087f4:	20000bd4 	.word	0x20000bd4

080087f8 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 80087f8:	b580      	push	{r7, lr}
 80087fa:	b086      	sub	sp, #24
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 8008800:	4a10      	ldr	r2, [pc, #64]	; (8008844 <TlInit+0x4c>)
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 8008806:	4810      	ldr	r0, [pc, #64]	; (8008848 <TlInit+0x50>)
 8008808:	f000 faf2 	bl	8008df0 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800880c:	2001      	movs	r0, #1
 800880e:	f000 f825 	bl	800885c <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8008812:	4b0e      	ldr	r3, [pc, #56]	; (800884c <TlInit+0x54>)
 8008814:	2201      	movs	r2, #1
 8008816:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 8008818:	4b0d      	ldr	r3, [pc, #52]	; (8008850 <TlInit+0x58>)
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	2b00      	cmp	r3, #0
 800881e:	d00c      	beq.n	800883a <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 8008824:	4b0b      	ldr	r3, [pc, #44]	; (8008854 <TlInit+0x5c>)
 8008826:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 8008828:	4b0b      	ldr	r3, [pc, #44]	; (8008858 <TlInit+0x60>)
 800882a:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 800882c:	4b08      	ldr	r3, [pc, #32]	; (8008850 <TlInit+0x58>)
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	f107 020c 	add.w	r2, r7, #12
 8008834:	4610      	mov	r0, r2
 8008836:	4798      	blx	r3
  }

  return;
 8008838:	bf00      	nop
 800883a:	bf00      	nop
}
 800883c:	3718      	adds	r7, #24
 800883e:	46bd      	mov	sp, r7
 8008840:	bd80      	pop	{r7, pc}
 8008842:	bf00      	nop
 8008844:	20000954 	.word	0x20000954
 8008848:	20000948 	.word	0x20000948
 800884c:	20000958 	.word	0x20000958
 8008850:	20000bd4 	.word	0x20000bd4
 8008854:	080088ad 	.word	0x080088ad
 8008858:	080088c5 	.word	0x080088c5

0800885c <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 800885c:	b580      	push	{r7, lr}
 800885e:	b082      	sub	sp, #8
 8008860:	af00      	add	r7, sp, #0
 8008862:	4603      	mov	r3, r0
 8008864:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 8008866:	79fb      	ldrb	r3, [r7, #7]
 8008868:	2b00      	cmp	r3, #0
 800886a:	d10b      	bne.n	8008884 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 800886c:	4b0d      	ldr	r3, [pc, #52]	; (80088a4 <Cmd_SetStatus+0x48>)
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	2b00      	cmp	r3, #0
 8008872:	d003      	beq.n	800887c <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 8008874:	4b0b      	ldr	r3, [pc, #44]	; (80088a4 <Cmd_SetStatus+0x48>)
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	2000      	movs	r0, #0
 800887a:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 800887c:	4b0a      	ldr	r3, [pc, #40]	; (80088a8 <Cmd_SetStatus+0x4c>)
 800887e:	2200      	movs	r2, #0
 8008880:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 8008882:	e00b      	b.n	800889c <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 8008884:	4b08      	ldr	r3, [pc, #32]	; (80088a8 <Cmd_SetStatus+0x4c>)
 8008886:	2201      	movs	r2, #1
 8008888:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 800888a:	4b06      	ldr	r3, [pc, #24]	; (80088a4 <Cmd_SetStatus+0x48>)
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	2b00      	cmp	r3, #0
 8008890:	d004      	beq.n	800889c <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 8008892:	4b04      	ldr	r3, [pc, #16]	; (80088a4 <Cmd_SetStatus+0x48>)
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	2001      	movs	r0, #1
 8008898:	4798      	blx	r3
  return;
 800889a:	bf00      	nop
 800889c:	bf00      	nop
}
 800889e:	3708      	adds	r7, #8
 80088a0:	46bd      	mov	sp, r7
 80088a2:	bd80      	pop	{r7, pc}
 80088a4:	20000bf4 	.word	0x20000bf4
 80088a8:	20000950 	.word	0x20000950

080088ac <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 80088ac:	b580      	push	{r7, lr}
 80088ae:	b082      	sub	sp, #8
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 80088b4:	2000      	movs	r0, #0
 80088b6:	f7f8 fa97 	bl	8000de8 <shci_cmd_resp_release>

  return;
 80088ba:	bf00      	nop
}
 80088bc:	3708      	adds	r7, #8
 80088be:	46bd      	mov	sp, r7
 80088c0:	bd80      	pop	{r7, pc}
	...

080088c4 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 80088c4:	b580      	push	{r7, lr}
 80088c6:	b082      	sub	sp, #8
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 80088cc:	6879      	ldr	r1, [r7, #4]
 80088ce:	4805      	ldr	r0, [pc, #20]	; (80088e4 <TlUserEvtReceived+0x20>)
 80088d0:	f000 fae6 	bl	8008ea0 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 80088d4:	4803      	ldr	r0, [pc, #12]	; (80088e4 <TlUserEvtReceived+0x20>)
 80088d6:	f7f8 fa7b 	bl	8000dd0 <shci_notify_asynch_evt>

  return;
 80088da:	bf00      	nop
}
 80088dc:	3708      	adds	r7, #8
 80088de:	46bd      	mov	sp, r7
 80088e0:	bd80      	pop	{r7, pc}
 80088e2:	bf00      	nop
 80088e4:	20000948 	.word	0x20000948

080088e8 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 80088e8:	b480      	push	{r7}
 80088ea:	b083      	sub	sp, #12
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	4a05      	ldr	r2, [pc, #20]	; (8008908 <shci_register_io_bus+0x20>)
 80088f4:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	4a04      	ldr	r2, [pc, #16]	; (800890c <shci_register_io_bus+0x24>)
 80088fa:	611a      	str	r2, [r3, #16]

  return;
 80088fc:	bf00      	nop
}
 80088fe:	370c      	adds	r7, #12
 8008900:	46bd      	mov	sp, r7
 8008902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008906:	4770      	bx	lr
 8008908:	08008aa5 	.word	0x08008aa5
 800890c:	08008af9 	.word	0x08008af9

08008910 <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 8008910:	b580      	push	{r7, lr}
 8008912:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 8008914:	f001 f86c 	bl	80099f0 <HW_IPCC_Enable>

  return;
 8008918:	bf00      	nop
}
 800891a:	bd80      	pop	{r7, pc}

0800891c <TL_Init>:


void TL_Init( void )
{
 800891c:	b580      	push	{r7, lr}
 800891e:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 8008920:	4b10      	ldr	r3, [pc, #64]	; (8008964 <TL_Init+0x48>)
 8008922:	4a11      	ldr	r2, [pc, #68]	; (8008968 <TL_Init+0x4c>)
 8008924:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 8008926:	4b0f      	ldr	r3, [pc, #60]	; (8008964 <TL_Init+0x48>)
 8008928:	4a10      	ldr	r2, [pc, #64]	; (800896c <TL_Init+0x50>)
 800892a:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 800892c:	4b0d      	ldr	r3, [pc, #52]	; (8008964 <TL_Init+0x48>)
 800892e:	4a10      	ldr	r2, [pc, #64]	; (8008970 <TL_Init+0x54>)
 8008930:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 8008932:	4b0c      	ldr	r3, [pc, #48]	; (8008964 <TL_Init+0x48>)
 8008934:	4a0f      	ldr	r2, [pc, #60]	; (8008974 <TL_Init+0x58>)
 8008936:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 8008938:	4b0a      	ldr	r3, [pc, #40]	; (8008964 <TL_Init+0x48>)
 800893a:	4a0f      	ldr	r2, [pc, #60]	; (8008978 <TL_Init+0x5c>)
 800893c:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 800893e:	4b09      	ldr	r3, [pc, #36]	; (8008964 <TL_Init+0x48>)
 8008940:	4a0e      	ldr	r2, [pc, #56]	; (800897c <TL_Init+0x60>)
 8008942:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 8008944:	4b07      	ldr	r3, [pc, #28]	; (8008964 <TL_Init+0x48>)
 8008946:	4a0e      	ldr	r2, [pc, #56]	; (8008980 <TL_Init+0x64>)
 8008948:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 800894a:	4b06      	ldr	r3, [pc, #24]	; (8008964 <TL_Init+0x48>)
 800894c:	4a0d      	ldr	r2, [pc, #52]	; (8008984 <TL_Init+0x68>)
 800894e:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 8008950:	4b04      	ldr	r3, [pc, #16]	; (8008964 <TL_Init+0x48>)
 8008952:	4a0d      	ldr	r2, [pc, #52]	; (8008988 <TL_Init+0x6c>)
 8008954:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 8008956:	4b03      	ldr	r3, [pc, #12]	; (8008964 <TL_Init+0x48>)
 8008958:	4a0c      	ldr	r2, [pc, #48]	; (800898c <TL_Init+0x70>)
 800895a:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 800895c:	f001 f85c 	bl	8009a18 <HW_IPCC_Init>

  return;
 8008960:	bf00      	nop
}
 8008962:	bd80      	pop	{r7, pc}
 8008964:	20030000 	.word	0x20030000
 8008968:	20030028 	.word	0x20030028
 800896c:	20030048 	.word	0x20030048
 8008970:	20030058 	.word	0x20030058
 8008974:	20030068 	.word	0x20030068
 8008978:	20030070 	.word	0x20030070
 800897c:	20030078 	.word	0x20030078
 8008980:	20030080 	.word	0x20030080
 8008984:	2003009c 	.word	0x2003009c
 8008988:	200300a0 	.word	0x200300a0
 800898c:	200300ac 	.word	0x200300ac

08008990 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 8008990:	b580      	push	{r7, lr}
 8008992:	b084      	sub	sp, #16
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 800899c:	4811      	ldr	r0, [pc, #68]	; (80089e4 <TL_BLE_Init+0x54>)
 800899e:	f000 fa27 	bl	8008df0 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 80089a2:	4b11      	ldr	r3, [pc, #68]	; (80089e8 <TL_BLE_Init+0x58>)
 80089a4:	685b      	ldr	r3, [r3, #4]
 80089a6:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	689a      	ldr	r2, [r3, #8]
 80089ac:	68bb      	ldr	r3, [r7, #8]
 80089ae:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	68da      	ldr	r2, [r3, #12]
 80089b4:	68bb      	ldr	r3, [r7, #8]
 80089b6:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 80089b8:	68bb      	ldr	r3, [r7, #8]
 80089ba:	4a0c      	ldr	r2, [pc, #48]	; (80089ec <TL_BLE_Init+0x5c>)
 80089bc:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 80089be:	68bb      	ldr	r3, [r7, #8]
 80089c0:	4a08      	ldr	r2, [pc, #32]	; (80089e4 <TL_BLE_Init+0x54>)
 80089c2:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 80089c4:	f001 f83e 	bl	8009a44 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	4a08      	ldr	r2, [pc, #32]	; (80089f0 <TL_BLE_Init+0x60>)
 80089ce:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	685b      	ldr	r3, [r3, #4]
 80089d4:	4a07      	ldr	r2, [pc, #28]	; (80089f4 <TL_BLE_Init+0x64>)
 80089d6:	6013      	str	r3, [r2, #0]

  return 0;
 80089d8:	2300      	movs	r3, #0
}
 80089da:	4618      	mov	r0, r3
 80089dc:	3710      	adds	r7, #16
 80089de:	46bd      	mov	sp, r7
 80089e0:	bd80      	pop	{r7, pc}
 80089e2:	bf00      	nop
 80089e4:	200300c8 	.word	0x200300c8
 80089e8:	20030000 	.word	0x20030000
 80089ec:	20000900 	.word	0x20000900
 80089f0:	20000c00 	.word	0x20000c00
 80089f4:	20000c04 	.word	0x20000c04

080089f8 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 80089f8:	b580      	push	{r7, lr}
 80089fa:	b082      	sub	sp, #8
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]
 8008a00:	460b      	mov	r3, r1
 8008a02:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 8008a04:	4b09      	ldr	r3, [pc, #36]	; (8008a2c <TL_BLE_SendCmd+0x34>)
 8008a06:	685b      	ldr	r3, [r3, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	2201      	movs	r2, #1
 8008a0c:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 8008a0e:	4b07      	ldr	r3, [pc, #28]	; (8008a2c <TL_BLE_SendCmd+0x34>)
 8008a10:	685b      	ldr	r3, [r3, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	4619      	mov	r1, r3
 8008a16:	2001      	movs	r0, #1
 8008a18:	f000 f96c 	bl	8008cf4 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 8008a1c:	f001 f81c 	bl	8009a58 <HW_IPCC_BLE_SendCmd>

  return 0;
 8008a20:	2300      	movs	r3, #0
}
 8008a22:	4618      	mov	r0, r3
 8008a24:	3708      	adds	r7, #8
 8008a26:	46bd      	mov	sp, r7
 8008a28:	bd80      	pop	{r7, pc}
 8008a2a:	bf00      	nop
 8008a2c:	20030000 	.word	0x20030000

08008a30 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 8008a30:	b580      	push	{r7, lr}
 8008a32:	b082      	sub	sp, #8
 8008a34:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 8008a36:	e01c      	b.n	8008a72 <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 8008a38:	1d3b      	adds	r3, r7, #4
 8008a3a:	4619      	mov	r1, r3
 8008a3c:	4812      	ldr	r0, [pc, #72]	; (8008a88 <HW_IPCC_BLE_RxEvtNot+0x58>)
 8008a3e:	f000 fa76 	bl	8008f2e <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	7a5b      	ldrb	r3, [r3, #9]
 8008a46:	2b0f      	cmp	r3, #15
 8008a48:	d003      	beq.n	8008a52 <HW_IPCC_BLE_RxEvtNot+0x22>
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	7a5b      	ldrb	r3, [r3, #9]
 8008a4e:	2b0e      	cmp	r3, #14
 8008a50:	d105      	bne.n	8008a5e <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	4619      	mov	r1, r3
 8008a56:	2002      	movs	r0, #2
 8008a58:	f000 f94c 	bl	8008cf4 <OutputDbgTrace>
 8008a5c:	e004      	b.n	8008a68 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	4619      	mov	r1, r3
 8008a62:	2003      	movs	r0, #3
 8008a64:	f000 f946 	bl	8008cf4 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 8008a68:	4b08      	ldr	r3, [pc, #32]	; (8008a8c <HW_IPCC_BLE_RxEvtNot+0x5c>)
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	687a      	ldr	r2, [r7, #4]
 8008a6e:	4610      	mov	r0, r2
 8008a70:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 8008a72:	4805      	ldr	r0, [pc, #20]	; (8008a88 <HW_IPCC_BLE_RxEvtNot+0x58>)
 8008a74:	f000 f9cc 	bl	8008e10 <LST_is_empty>
 8008a78:	4603      	mov	r3, r0
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d0dc      	beq.n	8008a38 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 8008a7e:	bf00      	nop
}
 8008a80:	3708      	adds	r7, #8
 8008a82:	46bd      	mov	sp, r7
 8008a84:	bd80      	pop	{r7, pc}
 8008a86:	bf00      	nop
 8008a88:	200300c8 	.word	0x200300c8
 8008a8c:	20000c00 	.word	0x20000c00

08008a90 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 8008a90:	b580      	push	{r7, lr}
 8008a92:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 8008a94:	4b02      	ldr	r3, [pc, #8]	; (8008aa0 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	4798      	blx	r3

  return;
 8008a9a:	bf00      	nop
}
 8008a9c:	bd80      	pop	{r7, pc}
 8008a9e:	bf00      	nop
 8008aa0:	20000c04 	.word	0x20000c04

08008aa4 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 8008aa4:	b580      	push	{r7, lr}
 8008aa6:	b084      	sub	sp, #16
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 8008ab0:	480d      	ldr	r0, [pc, #52]	; (8008ae8 <TL_SYS_Init+0x44>)
 8008ab2:	f000 f99d 	bl	8008df0 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 8008ab6:	4b0d      	ldr	r3, [pc, #52]	; (8008aec <TL_SYS_Init+0x48>)
 8008ab8:	68db      	ldr	r3, [r3, #12]
 8008aba:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	689a      	ldr	r2, [r3, #8]
 8008ac0:	68bb      	ldr	r3, [r7, #8]
 8008ac2:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 8008ac4:	68bb      	ldr	r3, [r7, #8]
 8008ac6:	4a08      	ldr	r2, [pc, #32]	; (8008ae8 <TL_SYS_Init+0x44>)
 8008ac8:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 8008aca:	f000 ffe7 	bl	8009a9c <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	4a07      	ldr	r2, [pc, #28]	; (8008af0 <TL_SYS_Init+0x4c>)
 8008ad4:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	685b      	ldr	r3, [r3, #4]
 8008ada:	4a06      	ldr	r2, [pc, #24]	; (8008af4 <TL_SYS_Init+0x50>)
 8008adc:	6013      	str	r3, [r2, #0]

  return 0;
 8008ade:	2300      	movs	r3, #0
}
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	3710      	adds	r7, #16
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	bd80      	pop	{r7, pc}
 8008ae8:	200300d0 	.word	0x200300d0
 8008aec:	20030000 	.word	0x20030000
 8008af0:	20000c08 	.word	0x20000c08
 8008af4:	20000c0c 	.word	0x20000c0c

08008af8 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 8008af8:	b580      	push	{r7, lr}
 8008afa:	b082      	sub	sp, #8
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	6078      	str	r0, [r7, #4]
 8008b00:	460b      	mov	r3, r1
 8008b02:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 8008b04:	4b09      	ldr	r3, [pc, #36]	; (8008b2c <TL_SYS_SendCmd+0x34>)
 8008b06:	68db      	ldr	r3, [r3, #12]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	2210      	movs	r2, #16
 8008b0c:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 8008b0e:	4b07      	ldr	r3, [pc, #28]	; (8008b2c <TL_SYS_SendCmd+0x34>)
 8008b10:	68db      	ldr	r3, [r3, #12]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	4619      	mov	r1, r3
 8008b16:	2004      	movs	r0, #4
 8008b18:	f000 f8ec 	bl	8008cf4 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 8008b1c:	f000 ffc8 	bl	8009ab0 <HW_IPCC_SYS_SendCmd>

  return 0;
 8008b20:	2300      	movs	r3, #0
}
 8008b22:	4618      	mov	r0, r3
 8008b24:	3708      	adds	r7, #8
 8008b26:	46bd      	mov	sp, r7
 8008b28:	bd80      	pop	{r7, pc}
 8008b2a:	bf00      	nop
 8008b2c:	20030000 	.word	0x20030000

08008b30 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8008b34:	4b07      	ldr	r3, [pc, #28]	; (8008b54 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8008b36:	68db      	ldr	r3, [r3, #12]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	4619      	mov	r1, r3
 8008b3c:	2005      	movs	r0, #5
 8008b3e:	f000 f8d9 	bl	8008cf4 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8008b42:	4b05      	ldr	r3, [pc, #20]	; (8008b58 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	4a03      	ldr	r2, [pc, #12]	; (8008b54 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8008b48:	68d2      	ldr	r2, [r2, #12]
 8008b4a:	6812      	ldr	r2, [r2, #0]
 8008b4c:	4610      	mov	r0, r2
 8008b4e:	4798      	blx	r3

  return;
 8008b50:	bf00      	nop
}
 8008b52:	bd80      	pop	{r7, pc}
 8008b54:	20030000 	.word	0x20030000
 8008b58:	20000c08 	.word	0x20000c08

08008b5c <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	b082      	sub	sp, #8
 8008b60:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8008b62:	e00e      	b.n	8008b82 <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 8008b64:	1d3b      	adds	r3, r7, #4
 8008b66:	4619      	mov	r1, r3
 8008b68:	480b      	ldr	r0, [pc, #44]	; (8008b98 <HW_IPCC_SYS_EvtNot+0x3c>)
 8008b6a:	f000 f9e0 	bl	8008f2e <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	4619      	mov	r1, r3
 8008b72:	2006      	movs	r0, #6
 8008b74:	f000 f8be 	bl	8008cf4 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 8008b78:	4b08      	ldr	r3, [pc, #32]	; (8008b9c <HW_IPCC_SYS_EvtNot+0x40>)
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	687a      	ldr	r2, [r7, #4]
 8008b7e:	4610      	mov	r0, r2
 8008b80:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8008b82:	4805      	ldr	r0, [pc, #20]	; (8008b98 <HW_IPCC_SYS_EvtNot+0x3c>)
 8008b84:	f000 f944 	bl	8008e10 <LST_is_empty>
 8008b88:	4603      	mov	r3, r0
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d0ea      	beq.n	8008b64 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 8008b8e:	bf00      	nop
}
 8008b90:	3708      	adds	r7, #8
 8008b92:	46bd      	mov	sp, r7
 8008b94:	bd80      	pop	{r7, pc}
 8008b96:	bf00      	nop
 8008b98:	200300d0 	.word	0x200300d0
 8008b9c:	20000c0c 	.word	0x20000c0c

08008ba0 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 8008ba0:	b580      	push	{r7, lr}
 8008ba2:	b082      	sub	sp, #8
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 8008ba8:	4817      	ldr	r0, [pc, #92]	; (8008c08 <TL_MM_Init+0x68>)
 8008baa:	f000 f921 	bl	8008df0 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 8008bae:	4817      	ldr	r0, [pc, #92]	; (8008c0c <TL_MM_Init+0x6c>)
 8008bb0:	f000 f91e 	bl	8008df0 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 8008bb4:	4b16      	ldr	r3, [pc, #88]	; (8008c10 <TL_MM_Init+0x70>)
 8008bb6:	691b      	ldr	r3, [r3, #16]
 8008bb8:	4a16      	ldr	r2, [pc, #88]	; (8008c14 <TL_MM_Init+0x74>)
 8008bba:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 8008bbc:	4b15      	ldr	r3, [pc, #84]	; (8008c14 <TL_MM_Init+0x74>)
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	687a      	ldr	r2, [r7, #4]
 8008bc2:	6892      	ldr	r2, [r2, #8]
 8008bc4:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 8008bc6:	4b13      	ldr	r3, [pc, #76]	; (8008c14 <TL_MM_Init+0x74>)
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	687a      	ldr	r2, [r7, #4]
 8008bcc:	68d2      	ldr	r2, [r2, #12]
 8008bce:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 8008bd0:	4b10      	ldr	r3, [pc, #64]	; (8008c14 <TL_MM_Init+0x74>)
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	4a0c      	ldr	r2, [pc, #48]	; (8008c08 <TL_MM_Init+0x68>)
 8008bd6:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 8008bd8:	4b0e      	ldr	r3, [pc, #56]	; (8008c14 <TL_MM_Init+0x74>)
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	687a      	ldr	r2, [r7, #4]
 8008bde:	6812      	ldr	r2, [r2, #0]
 8008be0:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 8008be2:	4b0c      	ldr	r3, [pc, #48]	; (8008c14 <TL_MM_Init+0x74>)
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	687a      	ldr	r2, [r7, #4]
 8008be8:	6852      	ldr	r2, [r2, #4]
 8008bea:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 8008bec:	4b09      	ldr	r3, [pc, #36]	; (8008c14 <TL_MM_Init+0x74>)
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	687a      	ldr	r2, [r7, #4]
 8008bf2:	6912      	ldr	r2, [r2, #16]
 8008bf4:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 8008bf6:	4b07      	ldr	r3, [pc, #28]	; (8008c14 <TL_MM_Init+0x74>)
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	687a      	ldr	r2, [r7, #4]
 8008bfc:	6952      	ldr	r2, [r2, #20]
 8008bfe:	619a      	str	r2, [r3, #24]

  return;
 8008c00:	bf00      	nop
}
 8008c02:	3708      	adds	r7, #8
 8008c04:	46bd      	mov	sp, r7
 8008c06:	bd80      	pop	{r7, pc}
 8008c08:	200300b8 	.word	0x200300b8
 8008c0c:	20000bf8 	.word	0x20000bf8
 8008c10:	20030000 	.word	0x20030000
 8008c14:	20000c10 	.word	0x20000c10

08008c18 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 8008c18:	b580      	push	{r7, lr}
 8008c1a:	b082      	sub	sp, #8
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 8008c20:	6879      	ldr	r1, [r7, #4]
 8008c22:	4807      	ldr	r0, [pc, #28]	; (8008c40 <TL_MM_EvtDone+0x28>)
 8008c24:	f000 f93c 	bl	8008ea0 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 8008c28:	6879      	ldr	r1, [r7, #4]
 8008c2a:	2000      	movs	r0, #0
 8008c2c:	f000 f862 	bl	8008cf4 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 8008c30:	4804      	ldr	r0, [pc, #16]	; (8008c44 <TL_MM_EvtDone+0x2c>)
 8008c32:	f000 ff63 	bl	8009afc <HW_IPCC_MM_SendFreeBuf>

  return;
 8008c36:	bf00      	nop
}
 8008c38:	3708      	adds	r7, #8
 8008c3a:	46bd      	mov	sp, r7
 8008c3c:	bd80      	pop	{r7, pc}
 8008c3e:	bf00      	nop
 8008c40:	20000bf8 	.word	0x20000bf8
 8008c44:	08008c49 	.word	0x08008c49

08008c48 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	b082      	sub	sp, #8
 8008c4c:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8008c4e:	e00c      	b.n	8008c6a <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 8008c50:	1d3b      	adds	r3, r7, #4
 8008c52:	4619      	mov	r1, r3
 8008c54:	480a      	ldr	r0, [pc, #40]	; (8008c80 <SendFreeBuf+0x38>)
 8008c56:	f000 f96a 	bl	8008f2e <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 8008c5a:	4b0a      	ldr	r3, [pc, #40]	; (8008c84 <SendFreeBuf+0x3c>)
 8008c5c:	691b      	ldr	r3, [r3, #16]
 8008c5e:	691b      	ldr	r3, [r3, #16]
 8008c60:	687a      	ldr	r2, [r7, #4]
 8008c62:	4611      	mov	r1, r2
 8008c64:	4618      	mov	r0, r3
 8008c66:	f000 f91b 	bl	8008ea0 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8008c6a:	4805      	ldr	r0, [pc, #20]	; (8008c80 <SendFreeBuf+0x38>)
 8008c6c:	f000 f8d0 	bl	8008e10 <LST_is_empty>
 8008c70:	4603      	mov	r3, r0
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d0ec      	beq.n	8008c50 <SendFreeBuf+0x8>
  }

  return;
 8008c76:	bf00      	nop
}
 8008c78:	3708      	adds	r7, #8
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	bd80      	pop	{r7, pc}
 8008c7e:	bf00      	nop
 8008c80:	20000bf8 	.word	0x20000bf8
 8008c84:	20030000 	.word	0x20030000

08008c88 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 8008c8c:	4805      	ldr	r0, [pc, #20]	; (8008ca4 <TL_TRACES_Init+0x1c>)
 8008c8e:	f000 f8af 	bl	8008df0 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 8008c92:	4b05      	ldr	r3, [pc, #20]	; (8008ca8 <TL_TRACES_Init+0x20>)
 8008c94:	695b      	ldr	r3, [r3, #20]
 8008c96:	4a03      	ldr	r2, [pc, #12]	; (8008ca4 <TL_TRACES_Init+0x1c>)
 8008c98:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 8008c9a:	f000 ff65 	bl	8009b68 <HW_IPCC_TRACES_Init>

  return;
 8008c9e:	bf00      	nop
}
 8008ca0:	bd80      	pop	{r7, pc}
 8008ca2:	bf00      	nop
 8008ca4:	200300c0 	.word	0x200300c0
 8008ca8:	20030000 	.word	0x20030000

08008cac <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 8008cac:	b580      	push	{r7, lr}
 8008cae:	b082      	sub	sp, #8
 8008cb0:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8008cb2:	e008      	b.n	8008cc6 <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 8008cb4:	1d3b      	adds	r3, r7, #4
 8008cb6:	4619      	mov	r1, r3
 8008cb8:	4808      	ldr	r0, [pc, #32]	; (8008cdc <HW_IPCC_TRACES_EvtNot+0x30>)
 8008cba:	f000 f938 	bl	8008f2e <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	f000 f80d 	bl	8008ce0 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8008cc6:	4805      	ldr	r0, [pc, #20]	; (8008cdc <HW_IPCC_TRACES_EvtNot+0x30>)
 8008cc8:	f000 f8a2 	bl	8008e10 <LST_is_empty>
 8008ccc:	4603      	mov	r3, r0
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d0f0      	beq.n	8008cb4 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 8008cd2:	bf00      	nop
}
 8008cd4:	3708      	adds	r7, #8
 8008cd6:	46bd      	mov	sp, r7
 8008cd8:	bd80      	pop	{r7, pc}
 8008cda:	bf00      	nop
 8008cdc:	200300c0 	.word	0x200300c0

08008ce0 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 8008ce0:	b480      	push	{r7}
 8008ce2:	b083      	sub	sp, #12
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 8008ce8:	bf00      	nop
 8008cea:	370c      	adds	r7, #12
 8008cec:	46bd      	mov	sp, r7
 8008cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf2:	4770      	bx	lr

08008cf4 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 8008cf4:	b480      	push	{r7}
 8008cf6:	b085      	sub	sp, #20
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	4603      	mov	r3, r0
 8008cfc:	6039      	str	r1, [r7, #0]
 8008cfe:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 8008d00:	79fb      	ldrb	r3, [r7, #7]
 8008d02:	2b06      	cmp	r3, #6
 8008d04:	d845      	bhi.n	8008d92 <OutputDbgTrace+0x9e>
 8008d06:	a201      	add	r2, pc, #4	; (adr r2, 8008d0c <OutputDbgTrace+0x18>)
 8008d08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d0c:	08008d29 	.word	0x08008d29
 8008d10:	08008d4d 	.word	0x08008d4d
 8008d14:	08008d53 	.word	0x08008d53
 8008d18:	08008d67 	.word	0x08008d67
 8008d1c:	08008d73 	.word	0x08008d73
 8008d20:	08008d79 	.word	0x08008d79
 8008d24:	08008d87 	.word	0x08008d87
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8008d28:	683b      	ldr	r3, [r7, #0]
 8008d2a:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	7a5b      	ldrb	r3, [r3, #9]
 8008d30:	2bff      	cmp	r3, #255	; 0xff
 8008d32:	d005      	beq.n	8008d40 <OutputDbgTrace+0x4c>
 8008d34:	2bff      	cmp	r3, #255	; 0xff
 8008d36:	dc05      	bgt.n	8008d44 <OutputDbgTrace+0x50>
 8008d38:	2b0e      	cmp	r3, #14
 8008d3a:	d005      	beq.n	8008d48 <OutputDbgTrace+0x54>
 8008d3c:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 8008d3e:	e001      	b.n	8008d44 <OutputDbgTrace+0x50>
          break;
 8008d40:	bf00      	nop
 8008d42:	e027      	b.n	8008d94 <OutputDbgTrace+0xa0>
          break;
 8008d44:	bf00      	nop
 8008d46:	e025      	b.n	8008d94 <OutputDbgTrace+0xa0>
          break;
 8008d48:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 8008d4a:	e023      	b.n	8008d94 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8008d4c:	683b      	ldr	r3, [r7, #0]
 8008d4e:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8008d50:	e020      	b.n	8008d94 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8008d52:	683b      	ldr	r3, [r7, #0]
 8008d54:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	7a5b      	ldrb	r3, [r3, #9]
 8008d5a:	2b0e      	cmp	r3, #14
 8008d5c:	d001      	beq.n	8008d62 <OutputDbgTrace+0x6e>
 8008d5e:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8008d60:	e000      	b.n	8008d64 <OutputDbgTrace+0x70>
          break;
 8008d62:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8008d64:	e016      	b.n	8008d94 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8008d66:	683b      	ldr	r3, [r7, #0]
 8008d68:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	7a5b      	ldrb	r3, [r3, #9]
 8008d6e:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8008d70:	e010      	b.n	8008d94 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8008d72:	683b      	ldr	r3, [r7, #0]
 8008d74:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8008d76:	e00d      	b.n	8008d94 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8008d78:	683b      	ldr	r3, [r7, #0]
 8008d7a:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	7a5b      	ldrb	r3, [r3, #9]
 8008d80:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8008d82:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8008d84:	e006      	b.n	8008d94 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8008d86:	683b      	ldr	r3, [r7, #0]
 8008d88:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	7a5b      	ldrb	r3, [r3, #9]
 8008d8e:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8008d90:	e000      	b.n	8008d94 <OutputDbgTrace+0xa0>

    default:
      break;
 8008d92:	bf00      	nop
  }

  return;
 8008d94:	bf00      	nop
}
 8008d96:	3714      	adds	r7, #20
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9e:	4770      	bx	lr

08008da0 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 8008da0:	b480      	push	{r7}
 8008da2:	b085      	sub	sp, #20
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	4603      	mov	r3, r0
 8008da8:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 8008daa:	4b0f      	ldr	r3, [pc, #60]	; (8008de8 <OTP_Read+0x48>)
 8008dac:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8008dae:	e002      	b.n	8008db6 <OTP_Read+0x16>
  {
    p_id -= 8 ;
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	3b08      	subs	r3, #8
 8008db4:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	3307      	adds	r3, #7
 8008dba:	781b      	ldrb	r3, [r3, #0]
 8008dbc:	79fa      	ldrb	r2, [r7, #7]
 8008dbe:	429a      	cmp	r2, r3
 8008dc0:	d003      	beq.n	8008dca <OTP_Read+0x2a>
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	4a09      	ldr	r2, [pc, #36]	; (8008dec <OTP_Read+0x4c>)
 8008dc6:	4293      	cmp	r3, r2
 8008dc8:	d1f2      	bne.n	8008db0 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	3307      	adds	r3, #7
 8008dce:	781b      	ldrb	r3, [r3, #0]
 8008dd0:	79fa      	ldrb	r2, [r7, #7]
 8008dd2:	429a      	cmp	r2, r3
 8008dd4:	d001      	beq.n	8008dda <OTP_Read+0x3a>
  {
    p_id = 0 ;
 8008dd6:	2300      	movs	r3, #0
 8008dd8:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 8008dda:	68fb      	ldr	r3, [r7, #12]
}
 8008ddc:	4618      	mov	r0, r3
 8008dde:	3714      	adds	r7, #20
 8008de0:	46bd      	mov	sp, r7
 8008de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de6:	4770      	bx	lr
 8008de8:	1fff73f8 	.word	0x1fff73f8
 8008dec:	1fff7000 	.word	0x1fff7000

08008df0 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 8008df0:	b480      	push	{r7}
 8008df2:	b083      	sub	sp, #12
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	687a      	ldr	r2, [r7, #4]
 8008dfc:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	687a      	ldr	r2, [r7, #4]
 8008e02:	605a      	str	r2, [r3, #4]
}
 8008e04:	bf00      	nop
 8008e06:	370c      	adds	r7, #12
 8008e08:	46bd      	mov	sp, r7
 8008e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0e:	4770      	bx	lr

08008e10 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 8008e10:	b480      	push	{r7}
 8008e12:	b087      	sub	sp, #28
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008e18:	f3ef 8310 	mrs	r3, PRIMASK
 8008e1c:	60fb      	str	r3, [r7, #12]
  return(result);
 8008e1e:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8008e20:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8008e22:	b672      	cpsid	i
}
 8008e24:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	687a      	ldr	r2, [r7, #4]
 8008e2c:	429a      	cmp	r2, r3
 8008e2e:	d102      	bne.n	8008e36 <LST_is_empty+0x26>
  {
    return_value = TRUE;
 8008e30:	2301      	movs	r3, #1
 8008e32:	75fb      	strb	r3, [r7, #23]
 8008e34:	e001      	b.n	8008e3a <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 8008e36:	2300      	movs	r3, #0
 8008e38:	75fb      	strb	r3, [r7, #23]
 8008e3a:	693b      	ldr	r3, [r7, #16]
 8008e3c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008e3e:	68bb      	ldr	r3, [r7, #8]
 8008e40:	f383 8810 	msr	PRIMASK, r3
}
 8008e44:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 8008e46:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e48:	4618      	mov	r0, r3
 8008e4a:	371c      	adds	r7, #28
 8008e4c:	46bd      	mov	sp, r7
 8008e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e52:	4770      	bx	lr

08008e54 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 8008e54:	b480      	push	{r7}
 8008e56:	b087      	sub	sp, #28
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	6078      	str	r0, [r7, #4]
 8008e5c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008e5e:	f3ef 8310 	mrs	r3, PRIMASK
 8008e62:	60fb      	str	r3, [r7, #12]
  return(result);
 8008e64:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8008e66:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008e68:	b672      	cpsid	i
}
 8008e6a:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681a      	ldr	r2, [r3, #0]
 8008e70:	683b      	ldr	r3, [r7, #0]
 8008e72:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8008e74:	683b      	ldr	r3, [r7, #0]
 8008e76:	687a      	ldr	r2, [r7, #4]
 8008e78:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	683a      	ldr	r2, [r7, #0]
 8008e7e:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 8008e80:	683b      	ldr	r3, [r7, #0]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	683a      	ldr	r2, [r7, #0]
 8008e86:	605a      	str	r2, [r3, #4]
 8008e88:	697b      	ldr	r3, [r7, #20]
 8008e8a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008e8c:	693b      	ldr	r3, [r7, #16]
 8008e8e:	f383 8810 	msr	PRIMASK, r3
}
 8008e92:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8008e94:	bf00      	nop
 8008e96:	371c      	adds	r7, #28
 8008e98:	46bd      	mov	sp, r7
 8008e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e9e:	4770      	bx	lr

08008ea0 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 8008ea0:	b480      	push	{r7}
 8008ea2:	b087      	sub	sp, #28
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]
 8008ea8:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008eaa:	f3ef 8310 	mrs	r3, PRIMASK
 8008eae:	60fb      	str	r3, [r7, #12]
  return(result);
 8008eb0:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8008eb2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008eb4:	b672      	cpsid	i
}
 8008eb6:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 8008eb8:	683b      	ldr	r3, [r7, #0]
 8008eba:	687a      	ldr	r2, [r7, #4]
 8008ebc:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	685a      	ldr	r2, [r3, #4]
 8008ec2:	683b      	ldr	r3, [r7, #0]
 8008ec4:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	683a      	ldr	r2, [r7, #0]
 8008eca:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8008ecc:	683b      	ldr	r3, [r7, #0]
 8008ece:	685b      	ldr	r3, [r3, #4]
 8008ed0:	683a      	ldr	r2, [r7, #0]
 8008ed2:	601a      	str	r2, [r3, #0]
 8008ed4:	697b      	ldr	r3, [r7, #20]
 8008ed6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008ed8:	693b      	ldr	r3, [r7, #16]
 8008eda:	f383 8810 	msr	PRIMASK, r3
}
 8008ede:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8008ee0:	bf00      	nop
 8008ee2:	371c      	adds	r7, #28
 8008ee4:	46bd      	mov	sp, r7
 8008ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eea:	4770      	bx	lr

08008eec <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 8008eec:	b480      	push	{r7}
 8008eee:	b087      	sub	sp, #28
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008ef4:	f3ef 8310 	mrs	r3, PRIMASK
 8008ef8:	60fb      	str	r3, [r7, #12]
  return(result);
 8008efa:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8008efc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008efe:	b672      	cpsid	i
}
 8008f00:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	685b      	ldr	r3, [r3, #4]
 8008f06:	687a      	ldr	r2, [r7, #4]
 8008f08:	6812      	ldr	r2, [r2, #0]
 8008f0a:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	687a      	ldr	r2, [r7, #4]
 8008f12:	6852      	ldr	r2, [r2, #4]
 8008f14:	605a      	str	r2, [r3, #4]
 8008f16:	697b      	ldr	r3, [r7, #20]
 8008f18:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008f1a:	693b      	ldr	r3, [r7, #16]
 8008f1c:	f383 8810 	msr	PRIMASK, r3
}
 8008f20:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8008f22:	bf00      	nop
 8008f24:	371c      	adds	r7, #28
 8008f26:	46bd      	mov	sp, r7
 8008f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2c:	4770      	bx	lr

08008f2e <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 8008f2e:	b580      	push	{r7, lr}
 8008f30:	b086      	sub	sp, #24
 8008f32:	af00      	add	r7, sp, #0
 8008f34:	6078      	str	r0, [r7, #4]
 8008f36:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008f38:	f3ef 8310 	mrs	r3, PRIMASK
 8008f3c:	60fb      	str	r3, [r7, #12]
  return(result);
 8008f3e:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8008f40:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008f42:	b672      	cpsid	i
}
 8008f44:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681a      	ldr	r2, [r3, #0]
 8008f4a:	683b      	ldr	r3, [r7, #0]
 8008f4c:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	4618      	mov	r0, r3
 8008f54:	f7ff ffca 	bl	8008eec <LST_remove_node>
 8008f58:	697b      	ldr	r3, [r7, #20]
 8008f5a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008f5c:	693b      	ldr	r3, [r7, #16]
 8008f5e:	f383 8810 	msr	PRIMASK, r3
}
 8008f62:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8008f64:	bf00      	nop
 8008f66:	3718      	adds	r7, #24
 8008f68:	46bd      	mov	sp, r7
 8008f6a:	bd80      	pop	{r7, pc}

08008f6c <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8008f6c:	b480      	push	{r7}
 8008f6e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 8008f70:	4b03      	ldr	r3, [pc, #12]	; (8008f80 <LL_FLASH_GetUDN+0x14>)
 8008f72:	681b      	ldr	r3, [r3, #0]
}
 8008f74:	4618      	mov	r0, r3
 8008f76:	46bd      	mov	sp, r7
 8008f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7c:	4770      	bx	lr
 8008f7e:	bf00      	nop
 8008f80:	1fff7580 	.word	0x1fff7580

08008f84 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8008f84:	b480      	push	{r7}
 8008f86:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8008f88:	4b03      	ldr	r3, [pc, #12]	; (8008f98 <LL_FLASH_GetDeviceID+0x14>)
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	b2db      	uxtb	r3, r3
}
 8008f8e:	4618      	mov	r0, r3
 8008f90:	46bd      	mov	sp, r7
 8008f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f96:	4770      	bx	lr
 8008f98:	1fff7584 	.word	0x1fff7584

08008f9c <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8008f9c:	b480      	push	{r7}
 8008f9e:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8008fa0:	4b03      	ldr	r3, [pc, #12]	; (8008fb0 <LL_FLASH_GetSTCompanyID+0x14>)
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	0a1b      	lsrs	r3, r3, #8
}
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fae:	4770      	bx	lr
 8008fb0:	1fff7584 	.word	0x1fff7584

08008fb4 <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 8008fb4:	b5b0      	push	{r4, r5, r7, lr}
 8008fb6:	b090      	sub	sp, #64	; 0x40
 8008fb8:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
#if (RADIO_ACTIVITY_EVENT != 0)
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8008fba:	2392      	movs	r3, #146	; 0x92
 8008fbc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#endif /* RADIO_ACTIVITY_EVENT != 0 */
  /* USER CODE BEGIN APP_BLE_Init_1 */

  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 8008fc0:	4b25      	ldr	r3, [pc, #148]	; (8009058 <APP_BLE_Init+0xa4>)
 8008fc2:	1d3c      	adds	r4, r7, #4
 8008fc4:	461d      	mov	r5, r3
 8008fc6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008fc8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008fca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008fcc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008fce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008fd0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008fd2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8008fd6:	c403      	stmia	r4!, {r0, r1}
 8008fd8:	8022      	strh	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 8008fda:	f000 f905 	bl	80091e8 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 8008fde:	2101      	movs	r1, #1
 8008fe0:	2002      	movs	r0, #2
 8008fe2:	f000 fde9 	bl	8009bb8 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 8008fe6:	4a1d      	ldr	r2, [pc, #116]	; (800905c <APP_BLE_Init+0xa8>)
 8008fe8:	2100      	movs	r1, #0
 8008fea:	2002      	movs	r0, #2
 8008fec:	f000 ff10 	bl	8009e10 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 8008ff0:	1d3b      	adds	r3, r7, #4
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	f7ff f8d0 	bl	8008198 <SHCI_C2_BLE_Init>
 8008ff8:	4603      	mov	r3, r0
 8008ffa:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  if (status != SHCI_Success)
 8008ffe:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8009002:	2b00      	cmp	r3, #0
 8009004:	d001      	beq.n	800900a <APP_BLE_Init+0x56>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 8009006:	f7f8 ffa7 	bl	8001f58 <Error_Handler>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 800900a:	f000 f903 	bl	8009214 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 800900e:	f7ff f81d 	bl	800804c <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8009012:	4b13      	ldr	r3, [pc, #76]	; (8009060 <APP_BLE_Init+0xac>)
 8009014:	2200      	movs	r2, #0
 8009016:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 800901a:	4b11      	ldr	r3, [pc, #68]	; (8009060 <APP_BLE_Init+0xac>)
 800901c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009020:	82da      	strh	r2, [r3, #22]

  /**
   * From here, all initialization are BLE application specific
   */

  UTIL_SEQ_RegTask(1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 8009022:	4a10      	ldr	r2, [pc, #64]	; (8009064 <APP_BLE_Init+0xb0>)
 8009024:	2100      	movs	r1, #0
 8009026:	2001      	movs	r0, #1
 8009028:	f000 fef2 	bl	8009e10 <UTIL_SEQ_RegTask>

  /**
   * Initialization of ADV - Ad Manufacturer Element - Support OTA Bit Mask
   */
#if (RADIO_ACTIVITY_EVENT != 0)
  ret = aci_hal_set_radio_activity_mask(0x0006);
 800902c:	2006      	movs	r0, #6
 800902e:	f7fe fe80 	bl	8007d32 <aci_hal_set_radio_activity_mask>
 8009032:	4603      	mov	r3, r0
 8009034:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

  /**
   * Initialize Custom Template Application
   */
  Custom_APP_Init();
 8009038:	f000 fa9b 	bl	8009572 <Custom_APP_Init>
  /* USER CODE END APP_BLE_Init_3 */

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 800903c:	4b08      	ldr	r3, [pc, #32]	; (8009060 <APP_BLE_Init+0xac>)
 800903e:	2200      	movs	r2, #0
 8009040:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 8009042:	4b07      	ldr	r3, [pc, #28]	; (8009060 <APP_BLE_Init+0xac>)
 8009044:	2200      	movs	r2, #0
 8009046:	761a      	strb	r2, [r3, #24]

  /**
   * Start to Advertise to be connected by a Client
   */
  Adv_Request(APP_BLE_FAST_ADV);
 8009048:	2001      	movs	r0, #1
 800904a:	f000 f997 	bl	800937c <Adv_Request>

  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */

  return;
 800904e:	bf00      	nop
}
 8009050:	3740      	adds	r7, #64	; 0x40
 8009052:	46bd      	mov	sp, r7
 8009054:	bdb0      	pop	{r4, r5, r7, pc}
 8009056:	bf00      	nop
 8009058:	0800b154 	.word	0x0800b154
 800905c:	080083b5 	.word	0x080083b5
 8009060:	20000c1c 	.word	0x20000c1c
 8009064:	08009465 	.word	0x08009465

08009068 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 8009068:	b580      	push	{r7, lr}
 800906a:	b08a      	sub	sp, #40	; 0x28
 800906c:	af00      	add	r7, sp, #0
 800906e:	6078      	str	r0, [r7, #4]
  hci_event_pckt    *p_event_pckt;
  evt_le_meta_event *p_meta_evt;
  evt_blecore_aci   *p_blecore_evt;
  tBleStatus        ret = BLE_STATUS_INVALID_PARAMS;
 8009070:	2392      	movs	r3, #146	; 0x92
 8009072:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	3301      	adds	r3, #1
 800907a:	623b      	str	r3, [r7, #32]

  switch (p_event_pckt->evt)
 800907c:	6a3b      	ldr	r3, [r7, #32]
 800907e:	781b      	ldrb	r3, [r3, #0]
 8009080:	2bff      	cmp	r3, #255	; 0xff
 8009082:	d053      	beq.n	800912c <SVCCTL_App_Notification+0xc4>
 8009084:	2bff      	cmp	r3, #255	; 0xff
 8009086:	f300 80a1 	bgt.w	80091cc <SVCCTL_App_Notification+0x164>
 800908a:	2b05      	cmp	r3, #5
 800908c:	d002      	beq.n	8009094 <SVCCTL_App_Notification+0x2c>
 800908e:	2b3e      	cmp	r3, #62	; 0x3e
 8009090:	d020      	beq.n	80090d4 <SVCCTL_App_Notification+0x6c>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 8009092:	e09b      	b.n	80091cc <SVCCTL_App_Notification+0x164>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
 8009094:	6a3b      	ldr	r3, [r7, #32]
 8009096:	3302      	adds	r3, #2
 8009098:	60fb      	str	r3, [r7, #12]
      if (p_disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80090a0:	b29a      	uxth	r2, r3
 80090a2:	4b4e      	ldr	r3, [pc, #312]	; (80091dc <SVCCTL_App_Notification+0x174>)
 80090a4:	8adb      	ldrh	r3, [r3, #22]
 80090a6:	429a      	cmp	r2, r3
 80090a8:	d106      	bne.n	80090b8 <SVCCTL_App_Notification+0x50>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 80090aa:	4b4c      	ldr	r3, [pc, #304]	; (80091dc <SVCCTL_App_Notification+0x174>)
 80090ac:	2200      	movs	r2, #0
 80090ae:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 80090b0:	4b4a      	ldr	r3, [pc, #296]	; (80091dc <SVCCTL_App_Notification+0x174>)
 80090b2:	2200      	movs	r2, #0
 80090b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
      Adv_Request(APP_BLE_FAST_ADV);
 80090b8:	2001      	movs	r0, #1
 80090ba:	f000 f95f 	bl	800937c <Adv_Request>
      HandleNotification.Custom_Evt_Opcode = CUSTOM_DISCON_HANDLE_EVT;
 80090be:	4b48      	ldr	r3, [pc, #288]	; (80091e0 <SVCCTL_App_Notification+0x178>)
 80090c0:	2201      	movs	r2, #1
 80090c2:	701a      	strb	r2, [r3, #0]
      HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 80090c4:	4b45      	ldr	r3, [pc, #276]	; (80091dc <SVCCTL_App_Notification+0x174>)
 80090c6:	8ada      	ldrh	r2, [r3, #22]
 80090c8:	4b45      	ldr	r3, [pc, #276]	; (80091e0 <SVCCTL_App_Notification+0x178>)
 80090ca:	805a      	strh	r2, [r3, #2]
      Custom_APP_Notification(&HandleNotification);
 80090cc:	4844      	ldr	r0, [pc, #272]	; (80091e0 <SVCCTL_App_Notification+0x178>)
 80090ce:	f000 fa3c 	bl	800954a <Custom_APP_Notification>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 80090d2:	e07e      	b.n	80091d2 <SVCCTL_App_Notification+0x16a>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 80090d4:	6a3b      	ldr	r3, [r7, #32]
 80090d6:	3302      	adds	r3, #2
 80090d8:	617b      	str	r3, [r7, #20]
      switch (p_meta_evt->subevent)
 80090da:	697b      	ldr	r3, [r7, #20]
 80090dc:	781b      	ldrb	r3, [r3, #0]
 80090de:	2b01      	cmp	r3, #1
 80090e0:	d001      	beq.n	80090e6 <SVCCTL_App_Notification+0x7e>
 80090e2:	2b03      	cmp	r3, #3
          break;
 80090e4:	e021      	b.n	800912a <SVCCTL_App_Notification+0xc2>
          p_connection_complete_event = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
 80090e6:	697b      	ldr	r3, [r7, #20]
 80090e8:	3301      	adds	r3, #1
 80090ea:	613b      	str	r3, [r7, #16]
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 80090ec:	4b3b      	ldr	r3, [pc, #236]	; (80091dc <SVCCTL_App_Notification+0x174>)
 80090ee:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80090f2:	2b04      	cmp	r3, #4
 80090f4:	d104      	bne.n	8009100 <SVCCTL_App_Notification+0x98>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 80090f6:	4b39      	ldr	r3, [pc, #228]	; (80091dc <SVCCTL_App_Notification+0x174>)
 80090f8:	2206      	movs	r2, #6
 80090fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 80090fe:	e003      	b.n	8009108 <SVCCTL_App_Notification+0xa0>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 8009100:	4b36      	ldr	r3, [pc, #216]	; (80091dc <SVCCTL_App_Notification+0x174>)
 8009102:	2205      	movs	r2, #5
 8009104:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_connection_complete_event->Connection_Handle;
 8009108:	693b      	ldr	r3, [r7, #16]
 800910a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800910e:	b29a      	uxth	r2, r3
 8009110:	4b32      	ldr	r3, [pc, #200]	; (80091dc <SVCCTL_App_Notification+0x174>)
 8009112:	82da      	strh	r2, [r3, #22]
          HandleNotification.Custom_Evt_Opcode = CUSTOM_CONN_HANDLE_EVT;
 8009114:	4b32      	ldr	r3, [pc, #200]	; (80091e0 <SVCCTL_App_Notification+0x178>)
 8009116:	2200      	movs	r2, #0
 8009118:	701a      	strb	r2, [r3, #0]
          HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800911a:	4b30      	ldr	r3, [pc, #192]	; (80091dc <SVCCTL_App_Notification+0x174>)
 800911c:	8ada      	ldrh	r2, [r3, #22]
 800911e:	4b30      	ldr	r3, [pc, #192]	; (80091e0 <SVCCTL_App_Notification+0x178>)
 8009120:	805a      	strh	r2, [r3, #2]
          Custom_APP_Notification(&HandleNotification);
 8009122:	482f      	ldr	r0, [pc, #188]	; (80091e0 <SVCCTL_App_Notification+0x178>)
 8009124:	f000 fa11 	bl	800954a <Custom_APP_Notification>
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 8009128:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 800912a:	e052      	b.n	80091d2 <SVCCTL_App_Notification+0x16a>
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 800912c:	6a3b      	ldr	r3, [r7, #32]
 800912e:	3302      	adds	r3, #2
 8009130:	61fb      	str	r3, [r7, #28]
      switch (p_blecore_evt->ecode)
 8009132:	69fb      	ldr	r3, [r7, #28]
 8009134:	881b      	ldrh	r3, [r3, #0]
 8009136:	b29b      	uxth	r3, r3
 8009138:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800913c:	d040      	beq.n	80091c0 <SVCCTL_App_Notification+0x158>
 800913e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009142:	dc45      	bgt.n	80091d0 <SVCCTL_App_Notification+0x168>
 8009144:	2b04      	cmp	r3, #4
 8009146:	d03d      	beq.n	80091c4 <SVCCTL_App_Notification+0x15c>
 8009148:	2b04      	cmp	r3, #4
 800914a:	db41      	blt.n	80091d0 <SVCCTL_App_Notification+0x168>
 800914c:	f240 420a 	movw	r2, #1034	; 0x40a
 8009150:	4293      	cmp	r3, r2
 8009152:	dc3d      	bgt.n	80091d0 <SVCCTL_App_Notification+0x168>
 8009154:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009158:	dd3a      	ble.n	80091d0 <SVCCTL_App_Notification+0x168>
 800915a:	f2a3 4301 	subw	r3, r3, #1025	; 0x401
 800915e:	2b09      	cmp	r3, #9
 8009160:	d836      	bhi.n	80091d0 <SVCCTL_App_Notification+0x168>
 8009162:	a201      	add	r2, pc, #4	; (adr r2, 8009168 <SVCCTL_App_Notification+0x100>)
 8009164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009168:	080091b9 	.word	0x080091b9
 800916c:	08009191 	.word	0x08009191
 8009170:	080091d1 	.word	0x080091d1
 8009174:	080091d1 	.word	0x080091d1
 8009178:	080091d1 	.word	0x080091d1
 800917c:	080091d1 	.word	0x080091d1
 8009180:	080091c9 	.word	0x080091c9
 8009184:	080091d1 	.word	0x080091d1
 8009188:	080091a5 	.word	0x080091a5
 800918c:	080091c9 	.word	0x080091c9
          ret = aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, CFG_FIXED_PIN);
 8009190:	4b12      	ldr	r3, [pc, #72]	; (80091dc <SVCCTL_App_Notification+0x174>)
 8009192:	8adb      	ldrh	r3, [r3, #22]
 8009194:	4913      	ldr	r1, [pc, #76]	; (80091e4 <SVCCTL_App_Notification+0x17c>)
 8009196:	4618      	mov	r0, r3
 8009198:	f7fe f822 	bl	80071e0 <aci_gap_pass_key_resp>
 800919c:	4603      	mov	r3, r0
 800919e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          break;
 80091a2:	e012      	b.n	80091ca <SVCCTL_App_Notification+0x162>
          ret = aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES);
 80091a4:	4b0d      	ldr	r3, [pc, #52]	; (80091dc <SVCCTL_App_Notification+0x174>)
 80091a6:	8adb      	ldrh	r3, [r3, #22]
 80091a8:	2101      	movs	r1, #1
 80091aa:	4618      	mov	r0, r3
 80091ac:	f7fe f9c2 	bl	8007534 <aci_gap_numeric_comparison_value_confirm_yesno>
 80091b0:	4603      	mov	r3, r0
 80091b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          break;
 80091b6:	e008      	b.n	80091ca <SVCCTL_App_Notification+0x162>
          p_pairing_complete = (aci_gap_pairing_complete_event_rp0*)p_blecore_evt->data;
 80091b8:	69fb      	ldr	r3, [r7, #28]
 80091ba:	3302      	adds	r3, #2
 80091bc:	61bb      	str	r3, [r7, #24]
          break;
 80091be:	e004      	b.n	80091ca <SVCCTL_App_Notification+0x162>
          break;
 80091c0:	bf00      	nop
 80091c2:	e005      	b.n	80091d0 <SVCCTL_App_Notification+0x168>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 80091c4:	bf00      	nop
 80091c6:	e003      	b.n	80091d0 <SVCCTL_App_Notification+0x168>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 80091c8:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 80091ca:	e001      	b.n	80091d0 <SVCCTL_App_Notification+0x168>
      break;
 80091cc:	bf00      	nop
 80091ce:	e000      	b.n	80091d2 <SVCCTL_App_Notification+0x16a>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 80091d0:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 80091d2:	2301      	movs	r3, #1
}
 80091d4:	4618      	mov	r0, r3
 80091d6:	3728      	adds	r7, #40	; 0x28
 80091d8:	46bd      	mov	sp, r7
 80091da:	bd80      	pop	{r7, pc}
 80091dc:	20000c1c 	.word	0x20000c1c
 80091e0:	20000ca0 	.word	0x20000ca0
 80091e4:	0001b207 	.word	0x0001b207

080091e8 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 80091e8:	b580      	push	{r7, lr}
 80091ea:	b082      	sub	sp, #8
 80091ec:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 80091ee:	4b06      	ldr	r3, [pc, #24]	; (8009208 <Ble_Tl_Init+0x20>)
 80091f0:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 80091f2:	4b06      	ldr	r3, [pc, #24]	; (800920c <Ble_Tl_Init+0x24>)
 80091f4:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 80091f6:	463b      	mov	r3, r7
 80091f8:	4619      	mov	r1, r3
 80091fa:	4805      	ldr	r0, [pc, #20]	; (8009210 <Ble_Tl_Init+0x28>)
 80091fc:	f7ff f8be 	bl	800837c <hci_init>

  return;
 8009200:	bf00      	nop
}
 8009202:	3708      	adds	r7, #8
 8009204:	46bd      	mov	sp, r7
 8009206:	bd80      	pop	{r7, pc}
 8009208:	200300d8 	.word	0x200300d8
 800920c:	08009515 	.word	0x08009515
 8009210:	080094dd 	.word	0x080094dd

08009214 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 8009214:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009216:	b08d      	sub	sp, #52	; 0x34
 8009218:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 800921a:	2300      	movs	r3, #0
 800921c:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800921e:	2392      	movs	r3, #146	; 0x92
 8009220:	75fb      	strb	r3, [r7, #23]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 8009222:	f7fe fdda 	bl	8007dda <hci_reset>
 8009226:	4603      	mov	r3, r0
 8009228:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 800922a:	f000 f8d7 	bl	80093dc <BleGetBdAddress>
 800922e:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 8009230:	693a      	ldr	r2, [r7, #16]
 8009232:	2106      	movs	r1, #6
 8009234:	2000      	movs	r0, #0
 8009236:	f7fe fc90 	bl	8007b5a <aci_hal_write_config_data>
 800923a:	4603      	mov	r3, r0
 800923c:	75fb      	strb	r3, [r7, #23]
#endif /* CFG_BLE_ADDRESS_TYPE != GAP_PUBLIC_ADDR */

  /**
   * Write Identity root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 800923e:	4a4a      	ldr	r2, [pc, #296]	; (8009368 <Ble_Hci_Gap_Gatt_Init+0x154>)
 8009240:	2110      	movs	r1, #16
 8009242:	2018      	movs	r0, #24
 8009244:	f7fe fc89 	bl	8007b5a <aci_hal_write_config_data>
 8009248:	4603      	mov	r3, r0
 800924a:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 800924c:	4a47      	ldr	r2, [pc, #284]	; (800936c <Ble_Hci_Gap_Gatt_Init+0x158>)
 800924e:	2110      	movs	r1, #16
 8009250:	2008      	movs	r0, #8
 8009252:	f7fe fc82 	bl	8007b5a <aci_hal_write_config_data>
 8009256:	4603      	mov	r3, r0
 8009258:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 800925a:	2118      	movs	r1, #24
 800925c:	2001      	movs	r0, #1
 800925e:	f7fe fd01 	bl	8007c64 <aci_hal_set_tx_power_level>
 8009262:	4603      	mov	r3, r0
 8009264:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 8009266:	f7fe f9cc 	bl	8007602 <aci_gatt_init>
 800926a:	4603      	mov	r3, r0
 800926c:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 800926e:	2300      	movs	r3, #0
 8009270:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 8009272:	7bfb      	ldrb	r3, [r7, #15]
 8009274:	f043 0301 	orr.w	r3, r3, #1
 8009278:	73fb      	strb	r3, [r7, #15]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  if (role > 0)
 800927a:	7bfb      	ldrb	r3, [r7, #15]
 800927c:	2b00      	cmp	r3, #0
 800927e:	d01f      	beq.n	80092c0 <Ble_Hci_Gap_Gatt_Init+0xac>
  {
    const char *name = CFG_GAP_DEVICE_NAME;
 8009280:	4b3b      	ldr	r3, [pc, #236]	; (8009370 <Ble_Hci_Gap_Gatt_Init+0x15c>)
 8009282:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 8009284:	1dba      	adds	r2, r7, #6
 8009286:	7bf8      	ldrb	r0, [r7, #15]
 8009288:	1cbb      	adds	r3, r7, #2
 800928a:	9301      	str	r3, [sp, #4]
 800928c:	1d3b      	adds	r3, r7, #4
 800928e:	9300      	str	r3, [sp, #0]
 8009290:	4613      	mov	r3, r2
 8009292:	2208      	movs	r2, #8
 8009294:	2100      	movs	r1, #0
 8009296:	f7fe f80a 	bl	80072ae <aci_gap_init>
 800929a:	4603      	mov	r3, r0
 800929c:	75fb      	strb	r3, [r7, #23]
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 800929e:	88fc      	ldrh	r4, [r7, #6]
 80092a0:	88bd      	ldrh	r5, [r7, #4]
 80092a2:	68b8      	ldr	r0, [r7, #8]
 80092a4:	f7f6 ff6c 	bl	8000180 <strlen>
 80092a8:	4603      	mov	r3, r0
 80092aa:	b2da      	uxtb	r2, r3
 80092ac:	68bb      	ldr	r3, [r7, #8]
 80092ae:	9300      	str	r3, [sp, #0]
 80092b0:	4613      	mov	r3, r2
 80092b2:	2200      	movs	r2, #0
 80092b4:	4629      	mov	r1, r5
 80092b6:	4620      	mov	r0, r4
 80092b8:	f7fe fba6 	bl	8007a08 <aci_gatt_update_char_value>
 80092bc:	4603      	mov	r3, r0
 80092be:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 80092c0:	88f8      	ldrh	r0, [r7, #6]
 80092c2:	8879      	ldrh	r1, [r7, #2]
 80092c4:	463b      	mov	r3, r7
 80092c6:	9300      	str	r3, [sp, #0]
 80092c8:	2302      	movs	r3, #2
 80092ca:	2200      	movs	r2, #0
 80092cc:	f7fe fb9c 	bl	8007a08 <aci_gatt_update_char_value>
 80092d0:	4603      	mov	r3, r0
 80092d2:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize Default PHY
   */
  ret = hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 80092d4:	2202      	movs	r2, #2
 80092d6:	2102      	movs	r1, #2
 80092d8:	2000      	movs	r0, #0
 80092da:	f7fe fda2 	bl	8007e22 <hci_le_set_default_phy>
 80092de:	4603      	mov	r3, r0
 80092e0:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 80092e2:	4b24      	ldr	r3, [pc, #144]	; (8009374 <Ble_Hci_Gap_Gatt_Init+0x160>)
 80092e4:	2201      	movs	r2, #1
 80092e6:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 80092e8:	4b22      	ldr	r3, [pc, #136]	; (8009374 <Ble_Hci_Gap_Gatt_Init+0x160>)
 80092ea:	781b      	ldrb	r3, [r3, #0]
 80092ec:	4618      	mov	r0, r3
 80092ee:	f7fd fe5f 	bl	8006fb0 <aci_gap_set_io_capability>
 80092f2:	4603      	mov	r3, r0
 80092f4:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 80092f6:	4b1f      	ldr	r3, [pc, #124]	; (8009374 <Ble_Hci_Gap_Gatt_Init+0x160>)
 80092f8:	2201      	movs	r2, #1
 80092fa:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 80092fc:	4b1d      	ldr	r3, [pc, #116]	; (8009374 <Ble_Hci_Gap_Gatt_Init+0x160>)
 80092fe:	2208      	movs	r2, #8
 8009300:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 8009302:	4b1c      	ldr	r3, [pc, #112]	; (8009374 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8009304:	2210      	movs	r2, #16
 8009306:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 8009308:	4b1a      	ldr	r3, [pc, #104]	; (8009374 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800930a:	2200      	movs	r2, #0
 800930c:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 800930e:	4b19      	ldr	r3, [pc, #100]	; (8009374 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8009310:	4a19      	ldr	r2, [pc, #100]	; (8009378 <Ble_Hci_Gap_Gatt_Init+0x164>)
 8009312:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 8009314:	4b17      	ldr	r3, [pc, #92]	; (8009374 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8009316:	2200      	movs	r2, #0
 8009318:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 800931a:	4b16      	ldr	r3, [pc, #88]	; (8009374 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800931c:	789c      	ldrb	r4, [r3, #2]
 800931e:	4b15      	ldr	r3, [pc, #84]	; (8009374 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8009320:	785d      	ldrb	r5, [r3, #1]
 8009322:	4b14      	ldr	r3, [pc, #80]	; (8009374 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8009324:	791b      	ldrb	r3, [r3, #4]
 8009326:	4a13      	ldr	r2, [pc, #76]	; (8009374 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8009328:	7952      	ldrb	r2, [r2, #5]
 800932a:	4912      	ldr	r1, [pc, #72]	; (8009374 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800932c:	78c9      	ldrb	r1, [r1, #3]
 800932e:	4811      	ldr	r0, [pc, #68]	; (8009374 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8009330:	6880      	ldr	r0, [r0, #8]
 8009332:	2600      	movs	r6, #0
 8009334:	9604      	str	r6, [sp, #16]
 8009336:	9003      	str	r0, [sp, #12]
 8009338:	9102      	str	r1, [sp, #8]
 800933a:	9201      	str	r2, [sp, #4]
 800933c:	9300      	str	r3, [sp, #0]
 800933e:	2300      	movs	r3, #0
 8009340:	2201      	movs	r2, #1
 8009342:	4629      	mov	r1, r5
 8009344:	4620      	mov	r0, r4
 8009346:	f7fd fe87 	bl	8007058 <aci_gap_set_authentication_requirement>
 800934a:	4603      	mov	r3, r0
 800934c:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 800934e:	4b09      	ldr	r3, [pc, #36]	; (8009374 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8009350:	789b      	ldrb	r3, [r3, #2]
 8009352:	2b00      	cmp	r3, #0
 8009354:	d003      	beq.n	800935e <Ble_Hci_Gap_Gatt_Init+0x14a>
  {
    ret = aci_gap_configure_whitelist();
 8009356:	f7fe f8c9 	bl	80074ec <aci_gap_configure_whitelist>
 800935a:	4603      	mov	r3, r0
 800935c:	75fb      	strb	r3, [r7, #23]
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
}
 800935e:	bf00      	nop
 8009360:	371c      	adds	r7, #28
 8009362:	46bd      	mov	sp, r7
 8009364:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009366:	bf00      	nop
 8009368:	0800b39c 	.word	0x0800b39c
 800936c:	0800b3ac 	.word	0x0800b3ac
 8009370:	0800b190 	.word	0x0800b190
 8009374:	20000c1c 	.word	0x20000c1c
 8009378:	0001b207 	.word	0x0001b207

0800937c <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t NewStatus)
{
 800937c:	b580      	push	{r7, lr}
 800937e:	b08c      	sub	sp, #48	; 0x30
 8009380:	af08      	add	r7, sp, #32
 8009382:	4603      	mov	r3, r0
 8009384:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8009386:	2392      	movs	r3, #146	; 0x92
 8009388:	73fb      	strb	r3, [r7, #15]

  BleApplicationContext.Device_Connection_Status = NewStatus;
 800938a:	4a12      	ldr	r2, [pc, #72]	; (80093d4 <Adv_Request+0x58>)
 800938c:	79fb      	ldrb	r3, [r7, #7]
 800938e:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
  /* Start Fast or Low Power Advertising */
  ret = aci_gap_set_discoverable(ADV_TYPE,
 8009392:	2300      	movs	r3, #0
 8009394:	9306      	str	r3, [sp, #24]
 8009396:	2300      	movs	r3, #0
 8009398:	9305      	str	r3, [sp, #20]
 800939a:	2300      	movs	r3, #0
 800939c:	9304      	str	r3, [sp, #16]
 800939e:	2300      	movs	r3, #0
 80093a0:	9303      	str	r3, [sp, #12]
 80093a2:	2300      	movs	r3, #0
 80093a4:	9302      	str	r3, [sp, #8]
 80093a6:	2300      	movs	r3, #0
 80093a8:	9301      	str	r3, [sp, #4]
 80093aa:	2300      	movs	r3, #0
 80093ac:	9300      	str	r3, [sp, #0]
 80093ae:	2300      	movs	r3, #0
 80093b0:	22a0      	movs	r2, #160	; 0xa0
 80093b2:	2180      	movs	r1, #128	; 0x80
 80093b4:	2000      	movs	r0, #0
 80093b6:	f7fd fd01 	bl	8006dbc <aci_gap_set_discoverable>
 80093ba:	4603      	mov	r3, r0
 80093bc:	73fb      	strb	r3, [r7, #15]
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - Success\n");
  }

  /* Update Advertising data */
  ret = aci_gap_update_adv_data(sizeof(a_AdvData), (uint8_t*) a_AdvData);
 80093be:	4906      	ldr	r1, [pc, #24]	; (80093d8 <Adv_Request+0x5c>)
 80093c0:	2009      	movs	r0, #9
 80093c2:	f7fe f821 	bl	8007408 <aci_gap_update_adv_data>
 80093c6:	4603      	mov	r3, r0
 80093c8:	73fb      	strb	r3, [r7, #15]
  else
  {
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
  }

  return;
 80093ca:	bf00      	nop
}
 80093cc:	3710      	adds	r7, #16
 80093ce:	46bd      	mov	sp, r7
 80093d0:	bd80      	pop	{r7, pc}
 80093d2:	bf00      	nop
 80093d4:	20000c1c 	.word	0x20000c1c
 80093d8:	20000014 	.word	0x20000014

080093dc <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 80093dc:	b580      	push	{r7, lr}
 80093de:	b086      	sub	sp, #24
 80093e0:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 80093e2:	f7ff fdc3 	bl	8008f6c <LL_FLASH_GetUDN>
 80093e6:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 80093e8:	693b      	ldr	r3, [r7, #16]
 80093ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80093ee:	d023      	beq.n	8009438 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 80093f0:	f7ff fdd4 	bl	8008f9c <LL_FLASH_GetSTCompanyID>
 80093f4:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 80093f6:	f7ff fdc5 	bl	8008f84 <LL_FLASH_GetDeviceID>
 80093fa:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 80093fc:	693b      	ldr	r3, [r7, #16]
 80093fe:	b2da      	uxtb	r2, r3
 8009400:	4b16      	ldr	r3, [pc, #88]	; (800945c <BleGetBdAddress+0x80>)
 8009402:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 8009404:	693b      	ldr	r3, [r7, #16]
 8009406:	0a1b      	lsrs	r3, r3, #8
 8009408:	b2da      	uxtb	r2, r3
 800940a:	4b14      	ldr	r3, [pc, #80]	; (800945c <BleGetBdAddress+0x80>)
 800940c:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	b2da      	uxtb	r2, r3
 8009412:	4b12      	ldr	r3, [pc, #72]	; (800945c <BleGetBdAddress+0x80>)
 8009414:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 8009416:	68bb      	ldr	r3, [r7, #8]
 8009418:	b2da      	uxtb	r2, r3
 800941a:	4b10      	ldr	r3, [pc, #64]	; (800945c <BleGetBdAddress+0x80>)
 800941c:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 800941e:	68bb      	ldr	r3, [r7, #8]
 8009420:	0a1b      	lsrs	r3, r3, #8
 8009422:	b2da      	uxtb	r2, r3
 8009424:	4b0d      	ldr	r3, [pc, #52]	; (800945c <BleGetBdAddress+0x80>)
 8009426:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 8009428:	68bb      	ldr	r3, [r7, #8]
 800942a:	0c1b      	lsrs	r3, r3, #16
 800942c:	b2da      	uxtb	r2, r3
 800942e:	4b0b      	ldr	r3, [pc, #44]	; (800945c <BleGetBdAddress+0x80>)
 8009430:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 8009432:	4b0a      	ldr	r3, [pc, #40]	; (800945c <BleGetBdAddress+0x80>)
 8009434:	617b      	str	r3, [r7, #20]
 8009436:	e00b      	b.n	8009450 <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 8009438:	2000      	movs	r0, #0
 800943a:	f7ff fcb1 	bl	8008da0 <OTP_Read>
 800943e:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	2b00      	cmp	r3, #0
 8009444:	d002      	beq.n	800944c <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	617b      	str	r3, [r7, #20]
 800944a:	e001      	b.n	8009450 <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 800944c:	4b04      	ldr	r3, [pc, #16]	; (8009460 <BleGetBdAddress+0x84>)
 800944e:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 8009450:	697b      	ldr	r3, [r7, #20]
}
 8009452:	4618      	mov	r0, r3
 8009454:	3718      	adds	r7, #24
 8009456:	46bd      	mov	sp, r7
 8009458:	bd80      	pop	{r7, pc}
 800945a:	bf00      	nop
 800945c:	20000c14 	.word	0x20000c14
 8009460:	0800b394 	.word	0x0800b394

08009464 <Adv_Cancel>:
 *
 * SPECIFIC FUNCTIONS FOR CUSTOM
 *
 *************************************************************/
static void Adv_Cancel(void)
{
 8009464:	b580      	push	{r7, lr}
 8009466:	b082      	sub	sp, #8
 8009468:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_1 */

  /* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 800946a:	4b0a      	ldr	r3, [pc, #40]	; (8009494 <Adv_Cancel+0x30>)
 800946c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009470:	2b05      	cmp	r3, #5
 8009472:	d00a      	beq.n	800948a <Adv_Cancel+0x26>
  {
    tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8009474:	2392      	movs	r3, #146	; 0x92
 8009476:	71fb      	strb	r3, [r7, #7]

    ret = aci_gap_set_non_discoverable();
 8009478:	f7fd fc7c 	bl	8006d74 <aci_gap_set_non_discoverable>
 800947c:	4603      	mov	r3, r0
 800947e:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8009480:	4b04      	ldr	r3, [pc, #16]	; (8009494 <Adv_Cancel+0x30>)
 8009482:	2200      	movs	r2, #0
 8009484:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* USER CODE BEGIN Adv_Cancel_2 */

  /* USER CODE END Adv_Cancel_2 */

  return;
 8009488:	bf00      	nop
 800948a:	bf00      	nop
}
 800948c:	3708      	adds	r7, #8
 800948e:	46bd      	mov	sp, r7
 8009490:	bd80      	pop	{r7, pc}
 8009492:	bf00      	nop
 8009494:	20000c1c 	.word	0x20000c1c

08009498 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 8009498:	b580      	push	{r7, lr}
 800949a:	b082      	sub	sp, #8
 800949c:	af00      	add	r7, sp, #0
 800949e:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 80094a0:	2100      	movs	r1, #0
 80094a2:	2002      	movs	r0, #2
 80094a4:	f000 fcd6 	bl	8009e54 <UTIL_SEQ_SetTask>

  return;
 80094a8:	bf00      	nop
}
 80094aa:	3708      	adds	r7, #8
 80094ac:	46bd      	mov	sp, r7
 80094ae:	bd80      	pop	{r7, pc}

080094b0 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 80094b0:	b580      	push	{r7, lr}
 80094b2:	b082      	sub	sp, #8
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 80094b8:	2001      	movs	r0, #1
 80094ba:	f000 fd37 	bl	8009f2c <UTIL_SEQ_SetEvt>

  return;
 80094be:	bf00      	nop
}
 80094c0:	3708      	adds	r7, #8
 80094c2:	46bd      	mov	sp, r7
 80094c4:	bd80      	pop	{r7, pc}

080094c6 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 80094c6:	b580      	push	{r7, lr}
 80094c8:	b082      	sub	sp, #8
 80094ca:	af00      	add	r7, sp, #0
 80094cc:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 80094ce:	2001      	movs	r0, #1
 80094d0:	f000 fd4c 	bl	8009f6c <UTIL_SEQ_WaitEvt>

  return;
 80094d4:	bf00      	nop
}
 80094d6:	3708      	adds	r7, #8
 80094d8:	46bd      	mov	sp, r7
 80094da:	bd80      	pop	{r7, pc}

080094dc <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 80094dc:	b580      	push	{r7, lr}
 80094de:	b084      	sub	sp, #16
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	685b      	ldr	r3, [r3, #4]
 80094ec:	3308      	adds	r3, #8
 80094ee:	4618      	mov	r0, r3
 80094f0:	f7fe fdfe 	bl	80080f0 <SVCCTL_UserEvtRx>
 80094f4:	4603      	mov	r3, r0
 80094f6:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 80094f8:	7afb      	ldrb	r3, [r7, #11]
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d003      	beq.n	8009506 <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	2201      	movs	r2, #1
 8009502:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 8009504:	e003      	b.n	800950e <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	2200      	movs	r2, #0
 800950a:	701a      	strb	r2, [r3, #0]
  return;
 800950c:	bf00      	nop
}
 800950e:	3710      	adds	r7, #16
 8009510:	46bd      	mov	sp, r7
 8009512:	bd80      	pop	{r7, pc}

08009514 <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 8009514:	b580      	push	{r7, lr}
 8009516:	b084      	sub	sp, #16
 8009518:	af00      	add	r7, sp, #0
 800951a:	4603      	mov	r3, r0
 800951c:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 800951e:	79fb      	ldrb	r3, [r7, #7]
 8009520:	2b00      	cmp	r3, #0
 8009522:	d002      	beq.n	800952a <BLE_StatusNot+0x16>
 8009524:	2b01      	cmp	r3, #1
 8009526:	d006      	beq.n	8009536 <BLE_StatusNot+0x22>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 8009528:	e00b      	b.n	8009542 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800952a:	2303      	movs	r3, #3
 800952c:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 800952e:	68f8      	ldr	r0, [r7, #12]
 8009530:	f000 fcbc 	bl	8009eac <UTIL_SEQ_PauseTask>
      break;
 8009534:	e005      	b.n	8009542 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8009536:	2303      	movs	r3, #3
 8009538:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 800953a:	68f8      	ldr	r0, [r7, #12]
 800953c:	f000 fcd6 	bl	8009eec <UTIL_SEQ_ResumeTask>
      break;
 8009540:	bf00      	nop
  }

  return;
 8009542:	bf00      	nop
}
 8009544:	3710      	adds	r7, #16
 8009546:	46bd      	mov	sp, r7
 8009548:	bd80      	pop	{r7, pc}

0800954a <Custom_APP_Notification>:
  /* USER CODE END CUSTOM_STM_App_Notification_2 */
  return;
}

void Custom_APP_Notification(Custom_App_ConnHandle_Not_evt_t *pNotification)
{
 800954a:	b480      	push	{r7}
 800954c:	b083      	sub	sp, #12
 800954e:	af00      	add	r7, sp, #0
 8009550:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_APP_Notification_1 */

  /* USER CODE END CUSTOM_APP_Notification_1 */

  switch (pNotification->Custom_Evt_Opcode)
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	781b      	ldrb	r3, [r3, #0]
 8009556:	2b00      	cmp	r3, #0
 8009558:	d002      	beq.n	8009560 <Custom_APP_Notification+0x16>
 800955a:	2b01      	cmp	r3, #1
 800955c:	d002      	beq.n	8009564 <Custom_APP_Notification+0x1a>

    default:
      /* USER CODE BEGIN CUSTOM_APP_Notification_default */

      /* USER CODE END CUSTOM_APP_Notification_default */
      break;
 800955e:	e002      	b.n	8009566 <Custom_APP_Notification+0x1c>
      break;
 8009560:	bf00      	nop
 8009562:	e000      	b.n	8009566 <Custom_APP_Notification+0x1c>
      break;
 8009564:	bf00      	nop

  /* USER CODE BEGIN CUSTOM_APP_Notification_2 */

  /* USER CODE END CUSTOM_APP_Notification_2 */

  return;
 8009566:	bf00      	nop
}
 8009568:	370c      	adds	r7, #12
 800956a:	46bd      	mov	sp, r7
 800956c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009570:	4770      	bx	lr

08009572 <Custom_APP_Init>:

void Custom_APP_Init(void)
{
 8009572:	b480      	push	{r7}
 8009574:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CUSTOM_APP_Init */

  /* USER CODE END CUSTOM_APP_Init */
  return;
 8009576:	bf00      	nop
}
 8009578:	46bd      	mov	sp, r7
 800957a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800957e:	4770      	bx	lr

08009580 <Custom_STM_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Custom_STM_Event_Handler(void *Event)
{
 8009580:	b480      	push	{r7}
 8009582:	b08b      	sub	sp, #44	; 0x2c
 8009584:	af00      	add	r7, sp, #0
 8009586:	6078      	str	r0, [r7, #4]
  Custom_STM_App_Notification_evt_t     Notification;
  /* USER CODE BEGIN Custom_STM_Event_Handler_1 */

  /* USER CODE END Custom_STM_Event_Handler_1 */

  return_value = SVCCTL_EvtNotAck;
 8009588:	2300      	movs	r3, #0
 800958a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	3301      	adds	r3, #1
 8009592:	623b      	str	r3, [r7, #32]

  switch (event_pckt->evt)
 8009594:	6a3b      	ldr	r3, [r7, #32]
 8009596:	781b      	ldrb	r3, [r3, #0]
 8009598:	2bff      	cmp	r3, #255	; 0xff
 800959a:	d12b      	bne.n	80095f4 <Custom_STM_Event_Handler+0x74>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 800959c:	6a3b      	ldr	r3, [r7, #32]
 800959e:	3302      	adds	r3, #2
 80095a0:	61fb      	str	r3, [r7, #28]
      switch (blecore_evt->ecode)
 80095a2:	69fb      	ldr	r3, [r7, #28]
 80095a4:	881b      	ldrh	r3, [r3, #0]
 80095a6:	b29b      	uxth	r3, r3
 80095a8:	f640 4214 	movw	r2, #3092	; 0xc14
 80095ac:	4293      	cmp	r3, r2
 80095ae:	d01b      	beq.n	80095e8 <Custom_STM_Event_Handler+0x68>
 80095b0:	f640 4214 	movw	r2, #3092	; 0xc14
 80095b4:	4293      	cmp	r3, r2
 80095b6:	dc19      	bgt.n	80095ec <Custom_STM_Event_Handler+0x6c>
 80095b8:	f640 4201 	movw	r2, #3073	; 0xc01
 80095bc:	4293      	cmp	r3, r2
 80095be:	d003      	beq.n	80095c8 <Custom_STM_Event_Handler+0x48>
 80095c0:	f640 4213 	movw	r2, #3091	; 0xc13
 80095c4:	4293      	cmp	r3, r2

          /* USER CODE END EVT_BLUE_GATT_WRITE_PERMIT_REQ_BEGIN */
          /* USER CODE BEGIN EVT_BLUE_GATT_WRITE_PERMIT_REQ_END */

          /* USER CODE END EVT_BLUE_GATT_WRITE_PERMIT_REQ_END */
          break;
 80095c6:	e014      	b.n	80095f2 <Custom_STM_Event_Handler+0x72>
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 80095c8:	69fb      	ldr	r3, [r7, #28]
 80095ca:	3302      	adds	r3, #2
 80095cc:	61bb      	str	r3, [r7, #24]
          if (attribute_modified->Attr_Handle == (CustomContext.CustomMycharwriteHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 80095ce:	69bb      	ldr	r3, [r7, #24]
 80095d0:	885b      	ldrh	r3, [r3, #2]
 80095d2:	b29b      	uxth	r3, r3
 80095d4:	461a      	mov	r2, r3
 80095d6:	4b0c      	ldr	r3, [pc, #48]	; (8009608 <Custom_STM_Event_Handler+0x88>)
 80095d8:	885b      	ldrh	r3, [r3, #2]
 80095da:	3301      	adds	r3, #1
 80095dc:	429a      	cmp	r2, r3
 80095de:	d107      	bne.n	80095f0 <Custom_STM_Event_Handler+0x70>
            return_value = SVCCTL_EvtAckFlowEnable;
 80095e0:	2301      	movs	r3, #1
 80095e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          break;
 80095e6:	e003      	b.n	80095f0 <Custom_STM_Event_Handler+0x70>
          break;
 80095e8:	bf00      	nop
 80095ea:	e004      	b.n	80095f6 <Custom_STM_Event_Handler+0x76>
        /* USER CODE END BLECORE_EVT */
        default:
          /* USER CODE BEGIN EVT_DEFAULT */

          /* USER CODE END EVT_DEFAULT */
          break;
 80095ec:	bf00      	nop
 80095ee:	e002      	b.n	80095f6 <Custom_STM_Event_Handler+0x76>
          break;
 80095f0:	bf00      	nop
      }
      /* USER CODE BEGIN EVT_VENDOR*/

      /* USER CODE END EVT_VENDOR*/
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 80095f2:	e000      	b.n	80095f6 <Custom_STM_Event_Handler+0x76>

    default:
      /* USER CODE BEGIN EVENT_PCKT*/

      /* USER CODE END EVENT_PCKT*/
      break;
 80095f4:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_Event_Handler_2 */

  /* USER CODE END Custom_STM_Event_Handler_2 */

  return(return_value);
 80095f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}/* end Custom_STM_Event_Handler */
 80095fa:	4618      	mov	r0, r3
 80095fc:	372c      	adds	r7, #44	; 0x2c
 80095fe:	46bd      	mov	sp, r7
 8009600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009604:	4770      	bx	lr
 8009606:	bf00      	nop
 8009608:	20000ca4 	.word	0x20000ca4

0800960c <SVCCTL_InitCustomSvc>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void SVCCTL_InitCustomSvc(void)
{
 800960c:	b580      	push	{r7, lr}
 800960e:	b08c      	sub	sp, #48	; 0x30
 8009610:	af06      	add	r7, sp, #24

  Char_UUID_t  uuid;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8009612:	2392      	movs	r3, #146	; 0x92
 8009614:	75fb      	strb	r3, [r7, #23]
  /* USER CODE END SVCCTL_InitCustomSvc_1 */

  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(Custom_STM_Event_Handler);
 8009616:	4834      	ldr	r0, [pc, #208]	; (80096e8 <SVCCTL_InitCustomSvc+0xdc>)
 8009618:	f7fe fd50 	bl	80080bc <SVCCTL_RegisterSvcHandler>
   * service_max_attribute_record = 1 for mySvc +
   *                                2 for myCharWrite +
   *                              = 3
   */

  COPY_MYSVC_UUID(uuid.Char_UUID_128);
 800961c:	238f      	movs	r3, #143	; 0x8f
 800961e:	713b      	strb	r3, [r7, #4]
 8009620:	23e5      	movs	r3, #229	; 0xe5
 8009622:	717b      	strb	r3, [r7, #5]
 8009624:	23b3      	movs	r3, #179	; 0xb3
 8009626:	71bb      	strb	r3, [r7, #6]
 8009628:	23d5      	movs	r3, #213	; 0xd5
 800962a:	71fb      	strb	r3, [r7, #7]
 800962c:	232e      	movs	r3, #46	; 0x2e
 800962e:	723b      	strb	r3, [r7, #8]
 8009630:	237f      	movs	r3, #127	; 0x7f
 8009632:	727b      	strb	r3, [r7, #9]
 8009634:	234a      	movs	r3, #74	; 0x4a
 8009636:	72bb      	strb	r3, [r7, #10]
 8009638:	2398      	movs	r3, #152	; 0x98
 800963a:	72fb      	strb	r3, [r7, #11]
 800963c:	232a      	movs	r3, #42	; 0x2a
 800963e:	733b      	strb	r3, [r7, #12]
 8009640:	2348      	movs	r3, #72	; 0x48
 8009642:	737b      	strb	r3, [r7, #13]
 8009644:	237a      	movs	r3, #122	; 0x7a
 8009646:	73bb      	strb	r3, [r7, #14]
 8009648:	23cc      	movs	r3, #204	; 0xcc
 800964a:	73fb      	strb	r3, [r7, #15]
 800964c:	2300      	movs	r3, #0
 800964e:	743b      	strb	r3, [r7, #16]
 8009650:	2300      	movs	r3, #0
 8009652:	747b      	strb	r3, [r7, #17]
 8009654:	2300      	movs	r3, #0
 8009656:	74bb      	strb	r3, [r7, #18]
 8009658:	2300      	movs	r3, #0
 800965a:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_service(UUID_TYPE_128,
 800965c:	1d39      	adds	r1, r7, #4
 800965e:	4b23      	ldr	r3, [pc, #140]	; (80096ec <SVCCTL_InitCustomSvc+0xe0>)
 8009660:	9300      	str	r3, [sp, #0]
 8009662:	2303      	movs	r3, #3
 8009664:	2201      	movs	r2, #1
 8009666:	2002      	movs	r0, #2
 8009668:	f7fd fff0 	bl	800764c <aci_gatt_add_service>
 800966c:	4603      	mov	r3, r0
 800966e:	75fb      	strb	r3, [r7, #23]
  }

  /**
   *  myCharWrite
   */
  COPY_MYCHARWRITE_UUID(uuid.Char_UUID_128);
 8009670:	2319      	movs	r3, #25
 8009672:	713b      	strb	r3, [r7, #4]
 8009674:	23ed      	movs	r3, #237	; 0xed
 8009676:	717b      	strb	r3, [r7, #5]
 8009678:	2382      	movs	r3, #130	; 0x82
 800967a:	71bb      	strb	r3, [r7, #6]
 800967c:	23ae      	movs	r3, #174	; 0xae
 800967e:	71fb      	strb	r3, [r7, #7]
 8009680:	23ed      	movs	r3, #237	; 0xed
 8009682:	723b      	strb	r3, [r7, #8]
 8009684:	2321      	movs	r3, #33	; 0x21
 8009686:	727b      	strb	r3, [r7, #9]
 8009688:	234c      	movs	r3, #76	; 0x4c
 800968a:	72bb      	strb	r3, [r7, #10]
 800968c:	239d      	movs	r3, #157	; 0x9d
 800968e:	72fb      	strb	r3, [r7, #11]
 8009690:	2341      	movs	r3, #65	; 0x41
 8009692:	733b      	strb	r3, [r7, #12]
 8009694:	2345      	movs	r3, #69	; 0x45
 8009696:	737b      	strb	r3, [r7, #13]
 8009698:	2322      	movs	r3, #34	; 0x22
 800969a:	73bb      	strb	r3, [r7, #14]
 800969c:	238e      	movs	r3, #142	; 0x8e
 800969e:	73fb      	strb	r3, [r7, #15]
 80096a0:	2300      	movs	r3, #0
 80096a2:	743b      	strb	r3, [r7, #16]
 80096a4:	2300      	movs	r3, #0
 80096a6:	747b      	strb	r3, [r7, #17]
 80096a8:	2300      	movs	r3, #0
 80096aa:	74bb      	strb	r3, [r7, #18]
 80096ac:	2300      	movs	r3, #0
 80096ae:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomMysvcHdle,
 80096b0:	4b0e      	ldr	r3, [pc, #56]	; (80096ec <SVCCTL_InitCustomSvc+0xe0>)
 80096b2:	8818      	ldrh	r0, [r3, #0]
 80096b4:	4b0e      	ldr	r3, [pc, #56]	; (80096f0 <SVCCTL_InitCustomSvc+0xe4>)
 80096b6:	781b      	ldrb	r3, [r3, #0]
 80096b8:	b29b      	uxth	r3, r3
 80096ba:	1d3a      	adds	r2, r7, #4
 80096bc:	490d      	ldr	r1, [pc, #52]	; (80096f4 <SVCCTL_InitCustomSvc+0xe8>)
 80096be:	9105      	str	r1, [sp, #20]
 80096c0:	2100      	movs	r1, #0
 80096c2:	9104      	str	r1, [sp, #16]
 80096c4:	2110      	movs	r1, #16
 80096c6:	9103      	str	r1, [sp, #12]
 80096c8:	2101      	movs	r1, #1
 80096ca:	9102      	str	r1, [sp, #8]
 80096cc:	2100      	movs	r1, #0
 80096ce:	9101      	str	r1, [sp, #4]
 80096d0:	2108      	movs	r1, #8
 80096d2:	9100      	str	r1, [sp, #0]
 80096d4:	2102      	movs	r1, #2
 80096d6:	f7fe f88f 	bl	80077f8 <aci_gatt_add_char>
 80096da:	4603      	mov	r3, r0
 80096dc:	75fb      	strb	r3, [r7, #23]

  /* USER CODE BEGIN SVCCTL_InitCustomSvc_2 */

  /* USER CODE END SVCCTL_InitCustomSvc_2 */

  return;
 80096de:	bf00      	nop
}
 80096e0:	3718      	adds	r7, #24
 80096e2:	46bd      	mov	sp, r7
 80096e4:	bd80      	pop	{r7, pc}
 80096e6:	bf00      	nop
 80096e8:	08009581 	.word	0x08009581
 80096ec:	20000ca4 	.word	0x20000ca4
 80096f0:	2000001d 	.word	0x2000001d
 80096f4:	20000ca6 	.word	0x20000ca6

080096f8 <LL_PWR_EnableBootC2>:
{
 80096f8:	b480      	push	{r7}
 80096fa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 80096fc:	4b05      	ldr	r3, [pc, #20]	; (8009714 <LL_PWR_EnableBootC2+0x1c>)
 80096fe:	68db      	ldr	r3, [r3, #12]
 8009700:	4a04      	ldr	r2, [pc, #16]	; (8009714 <LL_PWR_EnableBootC2+0x1c>)
 8009702:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009706:	60d3      	str	r3, [r2, #12]
}
 8009708:	bf00      	nop
 800970a:	46bd      	mov	sp, r7
 800970c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009710:	4770      	bx	lr
 8009712:	bf00      	nop
 8009714:	58000400 	.word	0x58000400

08009718 <LL_C2_EXTI_EnableEvent_32_63>:
{
 8009718:	b480      	push	{r7}
 800971a:	b083      	sub	sp, #12
 800971c:	af00      	add	r7, sp, #0
 800971e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 8009720:	4b06      	ldr	r3, [pc, #24]	; (800973c <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8009722:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8009726:	4905      	ldr	r1, [pc, #20]	; (800973c <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	4313      	orrs	r3, r2
 800972c:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 8009730:	bf00      	nop
 8009732:	370c      	adds	r7, #12
 8009734:	46bd      	mov	sp, r7
 8009736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800973a:	4770      	bx	lr
 800973c:	58000800 	.word	0x58000800

08009740 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8009740:	b480      	push	{r7}
 8009742:	b083      	sub	sp, #12
 8009744:	af00      	add	r7, sp, #0
 8009746:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8009748:	4b05      	ldr	r3, [pc, #20]	; (8009760 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800974a:	6a1a      	ldr	r2, [r3, #32]
 800974c:	4904      	ldr	r1, [pc, #16]	; (8009760 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	4313      	orrs	r3, r2
 8009752:	620b      	str	r3, [r1, #32]
}
 8009754:	bf00      	nop
 8009756:	370c      	adds	r7, #12
 8009758:	46bd      	mov	sp, r7
 800975a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800975e:	4770      	bx	lr
 8009760:	58000800 	.word	0x58000800

08009764 <LL_AHB3_GRP1_EnableClock>:
{
 8009764:	b480      	push	{r7}
 8009766:	b085      	sub	sp, #20
 8009768:	af00      	add	r7, sp, #0
 800976a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 800976c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009770:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009772:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	4313      	orrs	r3, r2
 800977a:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800977c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009780:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	4013      	ands	r3, r2
 8009786:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8009788:	68fb      	ldr	r3, [r7, #12]
}
 800978a:	bf00      	nop
 800978c:	3714      	adds	r7, #20
 800978e:	46bd      	mov	sp, r7
 8009790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009794:	4770      	bx	lr

08009796 <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8009796:	b480      	push	{r7}
 8009798:	b085      	sub	sp, #20
 800979a:	af00      	add	r7, sp, #0
 800979c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 800979e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80097a2:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 80097a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	4313      	orrs	r3, r2
 80097ae:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 80097b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80097b6:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	4013      	ands	r3, r2
 80097be:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80097c0:	68fb      	ldr	r3, [r7, #12]
}
 80097c2:	bf00      	nop
 80097c4:	3714      	adds	r7, #20
 80097c6:	46bd      	mov	sp, r7
 80097c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097cc:	4770      	bx	lr

080097ce <LL_C1_IPCC_EnableIT_TXF>:
{
 80097ce:	b480      	push	{r7}
 80097d0:	b083      	sub	sp, #12
 80097d2:	af00      	add	r7, sp, #0
 80097d4:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	601a      	str	r2, [r3, #0]
}
 80097e2:	bf00      	nop
 80097e4:	370c      	adds	r7, #12
 80097e6:	46bd      	mov	sp, r7
 80097e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ec:	4770      	bx	lr

080097ee <LL_C1_IPCC_EnableIT_RXO>:
{
 80097ee:	b480      	push	{r7}
 80097f0:	b083      	sub	sp, #12
 80097f2:	af00      	add	r7, sp, #0
 80097f4:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	f043 0201 	orr.w	r2, r3, #1
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	601a      	str	r2, [r3, #0]
}
 8009802:	bf00      	nop
 8009804:	370c      	adds	r7, #12
 8009806:	46bd      	mov	sp, r7
 8009808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800980c:	4770      	bx	lr

0800980e <LL_C1_IPCC_EnableTransmitChannel>:
{
 800980e:	b480      	push	{r7}
 8009810:	b083      	sub	sp, #12
 8009812:	af00      	add	r7, sp, #0
 8009814:	6078      	str	r0, [r7, #4]
 8009816:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	685a      	ldr	r2, [r3, #4]
 800981c:	683b      	ldr	r3, [r7, #0]
 800981e:	041b      	lsls	r3, r3, #16
 8009820:	43db      	mvns	r3, r3
 8009822:	401a      	ands	r2, r3
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	605a      	str	r2, [r3, #4]
}
 8009828:	bf00      	nop
 800982a:	370c      	adds	r7, #12
 800982c:	46bd      	mov	sp, r7
 800982e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009832:	4770      	bx	lr

08009834 <LL_C1_IPCC_DisableTransmitChannel>:
{
 8009834:	b480      	push	{r7}
 8009836:	b083      	sub	sp, #12
 8009838:	af00      	add	r7, sp, #0
 800983a:	6078      	str	r0, [r7, #4]
 800983c:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	685a      	ldr	r2, [r3, #4]
 8009842:	683b      	ldr	r3, [r7, #0]
 8009844:	041b      	lsls	r3, r3, #16
 8009846:	431a      	orrs	r2, r3
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	605a      	str	r2, [r3, #4]
}
 800984c:	bf00      	nop
 800984e:	370c      	adds	r7, #12
 8009850:	46bd      	mov	sp, r7
 8009852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009856:	4770      	bx	lr

08009858 <LL_C1_IPCC_EnableReceiveChannel>:
{
 8009858:	b480      	push	{r7}
 800985a:	b083      	sub	sp, #12
 800985c:	af00      	add	r7, sp, #0
 800985e:	6078      	str	r0, [r7, #4]
 8009860:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	685a      	ldr	r2, [r3, #4]
 8009866:	683b      	ldr	r3, [r7, #0]
 8009868:	43db      	mvns	r3, r3
 800986a:	401a      	ands	r2, r3
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	605a      	str	r2, [r3, #4]
}
 8009870:	bf00      	nop
 8009872:	370c      	adds	r7, #12
 8009874:	46bd      	mov	sp, r7
 8009876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800987a:	4770      	bx	lr

0800987c <LL_C1_IPCC_ClearFlag_CHx>:
{
 800987c:	b480      	push	{r7}
 800987e:	b083      	sub	sp, #12
 8009880:	af00      	add	r7, sp, #0
 8009882:	6078      	str	r0, [r7, #4]
 8009884:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	683a      	ldr	r2, [r7, #0]
 800988a:	609a      	str	r2, [r3, #8]
}
 800988c:	bf00      	nop
 800988e:	370c      	adds	r7, #12
 8009890:	46bd      	mov	sp, r7
 8009892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009896:	4770      	bx	lr

08009898 <LL_C1_IPCC_SetFlag_CHx>:
{
 8009898:	b480      	push	{r7}
 800989a:	b083      	sub	sp, #12
 800989c:	af00      	add	r7, sp, #0
 800989e:	6078      	str	r0, [r7, #4]
 80098a0:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 80098a2:	683b      	ldr	r3, [r7, #0]
 80098a4:	041a      	lsls	r2, r3, #16
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	609a      	str	r2, [r3, #8]
}
 80098aa:	bf00      	nop
 80098ac:	370c      	adds	r7, #12
 80098ae:	46bd      	mov	sp, r7
 80098b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b4:	4770      	bx	lr

080098b6 <LL_C1_IPCC_IsActiveFlag_CHx>:
{
 80098b6:	b480      	push	{r7}
 80098b8:	b083      	sub	sp, #12
 80098ba:	af00      	add	r7, sp, #0
 80098bc:	6078      	str	r0, [r7, #4]
 80098be:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	68da      	ldr	r2, [r3, #12]
 80098c4:	683b      	ldr	r3, [r7, #0]
 80098c6:	4013      	ands	r3, r2
 80098c8:	683a      	ldr	r2, [r7, #0]
 80098ca:	429a      	cmp	r2, r3
 80098cc:	d101      	bne.n	80098d2 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 80098ce:	2301      	movs	r3, #1
 80098d0:	e000      	b.n	80098d4 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 80098d2:	2300      	movs	r3, #0
}
 80098d4:	4618      	mov	r0, r3
 80098d6:	370c      	adds	r7, #12
 80098d8:	46bd      	mov	sp, r7
 80098da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098de:	4770      	bx	lr

080098e0 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 80098e0:	b480      	push	{r7}
 80098e2:	b083      	sub	sp, #12
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	6078      	str	r0, [r7, #4]
 80098e8:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	69da      	ldr	r2, [r3, #28]
 80098ee:	683b      	ldr	r3, [r7, #0]
 80098f0:	4013      	ands	r3, r2
 80098f2:	683a      	ldr	r2, [r7, #0]
 80098f4:	429a      	cmp	r2, r3
 80098f6:	d101      	bne.n	80098fc <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 80098f8:	2301      	movs	r3, #1
 80098fa:	e000      	b.n	80098fe <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 80098fc:	2300      	movs	r3, #0
}
 80098fe:	4618      	mov	r0, r3
 8009900:	370c      	adds	r7, #12
 8009902:	46bd      	mov	sp, r7
 8009904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009908:	4770      	bx	lr
	...

0800990c <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 800990c:	b580      	push	{r7, lr}
 800990e:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 8009910:	2102      	movs	r1, #2
 8009912:	4819      	ldr	r0, [pc, #100]	; (8009978 <HW_IPCC_Rx_Handler+0x6c>)
 8009914:	f7ff ffe4 	bl	80098e0 <LL_C2_IPCC_IsActiveFlag_CHx>
 8009918:	4603      	mov	r3, r0
 800991a:	2b00      	cmp	r3, #0
 800991c:	d009      	beq.n	8009932 <HW_IPCC_Rx_Handler+0x26>
 800991e:	4b16      	ldr	r3, [pc, #88]	; (8009978 <HW_IPCC_Rx_Handler+0x6c>)
 8009920:	685b      	ldr	r3, [r3, #4]
 8009922:	43db      	mvns	r3, r3
 8009924:	f003 0302 	and.w	r3, r3, #2
 8009928:	2b00      	cmp	r3, #0
 800992a:	d002      	beq.n	8009932 <HW_IPCC_Rx_Handler+0x26>
  {
      HW_IPCC_SYS_EvtHandler();
 800992c:	f000 f8da 	bl	8009ae4 <HW_IPCC_SYS_EvtHandler>
 8009930:	e01f      	b.n	8009972 <HW_IPCC_Rx_Handler+0x66>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 8009932:	2101      	movs	r1, #1
 8009934:	4810      	ldr	r0, [pc, #64]	; (8009978 <HW_IPCC_Rx_Handler+0x6c>)
 8009936:	f7ff ffd3 	bl	80098e0 <LL_C2_IPCC_IsActiveFlag_CHx>
 800993a:	4603      	mov	r3, r0
 800993c:	2b00      	cmp	r3, #0
 800993e:	d008      	beq.n	8009952 <HW_IPCC_Rx_Handler+0x46>
 8009940:	4b0d      	ldr	r3, [pc, #52]	; (8009978 <HW_IPCC_Rx_Handler+0x6c>)
 8009942:	685b      	ldr	r3, [r3, #4]
 8009944:	f003 0301 	and.w	r3, r3, #1
 8009948:	2b00      	cmp	r3, #0
 800994a:	d102      	bne.n	8009952 <HW_IPCC_Rx_Handler+0x46>
  {
    HW_IPCC_BLE_EvtHandler();
 800994c:	f000 f88e 	bl	8009a6c <HW_IPCC_BLE_EvtHandler>
 8009950:	e00f      	b.n	8009972 <HW_IPCC_Rx_Handler+0x66>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 8009952:	2108      	movs	r1, #8
 8009954:	4808      	ldr	r0, [pc, #32]	; (8009978 <HW_IPCC_Rx_Handler+0x6c>)
 8009956:	f7ff ffc3 	bl	80098e0 <LL_C2_IPCC_IsActiveFlag_CHx>
 800995a:	4603      	mov	r3, r0
 800995c:	2b00      	cmp	r3, #0
 800995e:	d009      	beq.n	8009974 <HW_IPCC_Rx_Handler+0x68>
 8009960:	4b05      	ldr	r3, [pc, #20]	; (8009978 <HW_IPCC_Rx_Handler+0x6c>)
 8009962:	685b      	ldr	r3, [r3, #4]
 8009964:	43db      	mvns	r3, r3
 8009966:	f003 0308 	and.w	r3, r3, #8
 800996a:	2b00      	cmp	r3, #0
 800996c:	d002      	beq.n	8009974 <HW_IPCC_Rx_Handler+0x68>
  {
    HW_IPCC_TRACES_EvtHandler();
 800996e:	f000 f905 	bl	8009b7c <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 8009972:	bf00      	nop
 8009974:	bf00      	nop
}
 8009976:	bd80      	pop	{r7, pc}
 8009978:	58000c00 	.word	0x58000c00

0800997c <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 800997c:	b580      	push	{r7, lr}
 800997e:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8009980:	2102      	movs	r1, #2
 8009982:	481a      	ldr	r0, [pc, #104]	; (80099ec <HW_IPCC_Tx_Handler+0x70>)
 8009984:	f7ff ff97 	bl	80098b6 <LL_C1_IPCC_IsActiveFlag_CHx>
 8009988:	4603      	mov	r3, r0
 800998a:	2b00      	cmp	r3, #0
 800998c:	d109      	bne.n	80099a2 <HW_IPCC_Tx_Handler+0x26>
 800998e:	4b17      	ldr	r3, [pc, #92]	; (80099ec <HW_IPCC_Tx_Handler+0x70>)
 8009990:	685b      	ldr	r3, [r3, #4]
 8009992:	43db      	mvns	r3, r3
 8009994:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009998:	2b00      	cmp	r3, #0
 800999a:	d002      	beq.n	80099a2 <HW_IPCC_Tx_Handler+0x26>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 800999c:	f000 f896 	bl	8009acc <HW_IPCC_SYS_CmdEvtHandler>
 80099a0:	e020      	b.n	80099e4 <HW_IPCC_Tx_Handler+0x68>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 80099a2:	2108      	movs	r1, #8
 80099a4:	4811      	ldr	r0, [pc, #68]	; (80099ec <HW_IPCC_Tx_Handler+0x70>)
 80099a6:	f7ff ff86 	bl	80098b6 <LL_C1_IPCC_IsActiveFlag_CHx>
 80099aa:	4603      	mov	r3, r0
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d109      	bne.n	80099c4 <HW_IPCC_Tx_Handler+0x48>
 80099b0:	4b0e      	ldr	r3, [pc, #56]	; (80099ec <HW_IPCC_Tx_Handler+0x70>)
 80099b2:	685b      	ldr	r3, [r3, #4]
 80099b4:	43db      	mvns	r3, r3
 80099b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d002      	beq.n	80099c4 <HW_IPCC_Tx_Handler+0x48>
  {
    HW_IPCC_MM_FreeBufHandler();
 80099be:	f000 f8bf 	bl	8009b40 <HW_IPCC_MM_FreeBufHandler>
 80099c2:	e00f      	b.n	80099e4 <HW_IPCC_Tx_Handler+0x68>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 80099c4:	2120      	movs	r1, #32
 80099c6:	4809      	ldr	r0, [pc, #36]	; (80099ec <HW_IPCC_Tx_Handler+0x70>)
 80099c8:	f7ff ff75 	bl	80098b6 <LL_C1_IPCC_IsActiveFlag_CHx>
 80099cc:	4603      	mov	r3, r0
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d109      	bne.n	80099e6 <HW_IPCC_Tx_Handler+0x6a>
 80099d2:	4b06      	ldr	r3, [pc, #24]	; (80099ec <HW_IPCC_Tx_Handler+0x70>)
 80099d4:	685b      	ldr	r3, [r3, #4]
 80099d6:	43db      	mvns	r3, r3
 80099d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d002      	beq.n	80099e6 <HW_IPCC_Tx_Handler+0x6a>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 80099e0:	f000 f850 	bl	8009a84 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 80099e4:	bf00      	nop
 80099e6:	bf00      	nop
}
 80099e8:	bd80      	pop	{r7, pc}
 80099ea:	bf00      	nop
 80099ec:	58000c00 	.word	0x58000c00

080099f0 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 80099f0:	b580      	push	{r7, lr}
 80099f2:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 80099f4:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80099f8:	f7ff fecd 	bl	8009796 <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 80099fc:	f44f 7000 	mov.w	r0, #512	; 0x200
 8009a00:	f7ff fe9e 	bl	8009740 <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 8009a04:	f44f 7000 	mov.w	r0, #512	; 0x200
 8009a08:	f7ff fe86 	bl	8009718 <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 8009a0c:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 8009a0e:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 8009a10:	f7ff fe72 	bl	80096f8 <LL_PWR_EnableBootC2>

  return;
 8009a14:	bf00      	nop
}
 8009a16:	bd80      	pop	{r7, pc}

08009a18 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 8009a18:	b580      	push	{r7, lr}
 8009a1a:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 8009a1c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8009a20:	f7ff fea0 	bl	8009764 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 8009a24:	4806      	ldr	r0, [pc, #24]	; (8009a40 <HW_IPCC_Init+0x28>)
 8009a26:	f7ff fee2 	bl	80097ee <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 8009a2a:	4805      	ldr	r0, [pc, #20]	; (8009a40 <HW_IPCC_Init+0x28>)
 8009a2c:	f7ff fecf 	bl	80097ce <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8009a30:	202c      	movs	r0, #44	; 0x2c
 8009a32:	f7f8 ffa8 	bl	8002986 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8009a36:	202d      	movs	r0, #45	; 0x2d
 8009a38:	f7f8 ffa5 	bl	8002986 <HAL_NVIC_EnableIRQ>

  return;
 8009a3c:	bf00      	nop
}
 8009a3e:	bd80      	pop	{r7, pc}
 8009a40:	58000c00 	.word	0x58000c00

08009a44 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 8009a44:	b580      	push	{r7, lr}
 8009a46:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8009a48:	2101      	movs	r1, #1
 8009a4a:	4802      	ldr	r0, [pc, #8]	; (8009a54 <HW_IPCC_BLE_Init+0x10>)
 8009a4c:	f7ff ff04 	bl	8009858 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8009a50:	bf00      	nop
}
 8009a52:	bd80      	pop	{r7, pc}
 8009a54:	58000c00 	.word	0x58000c00

08009a58 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 8009a58:	b580      	push	{r7, lr}
 8009a5a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 8009a5c:	2101      	movs	r1, #1
 8009a5e:	4802      	ldr	r0, [pc, #8]	; (8009a68 <HW_IPCC_BLE_SendCmd+0x10>)
 8009a60:	f7ff ff1a 	bl	8009898 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8009a64:	bf00      	nop
}
 8009a66:	bd80      	pop	{r7, pc}
 8009a68:	58000c00 	.word	0x58000c00

08009a6c <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 8009a6c:	b580      	push	{r7, lr}
 8009a6e:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 8009a70:	f7fe ffde 	bl	8008a30 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8009a74:	2101      	movs	r1, #1
 8009a76:	4802      	ldr	r0, [pc, #8]	; (8009a80 <HW_IPCC_BLE_EvtHandler+0x14>)
 8009a78:	f7ff ff00 	bl	800987c <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8009a7c:	bf00      	nop
}
 8009a7e:	bd80      	pop	{r7, pc}
 8009a80:	58000c00 	.word	0x58000c00

08009a84 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 8009a84:	b580      	push	{r7, lr}
 8009a86:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 8009a88:	2120      	movs	r1, #32
 8009a8a:	4803      	ldr	r0, [pc, #12]	; (8009a98 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 8009a8c:	f7ff fed2 	bl	8009834 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 8009a90:	f7fe fffe 	bl	8008a90 <HW_IPCC_BLE_AclDataAckNot>

  return;
 8009a94:	bf00      	nop
}
 8009a96:	bd80      	pop	{r7, pc}
 8009a98:	58000c00 	.word	0x58000c00

08009a9c <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 8009a9c:	b580      	push	{r7, lr}
 8009a9e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8009aa0:	2102      	movs	r1, #2
 8009aa2:	4802      	ldr	r0, [pc, #8]	; (8009aac <HW_IPCC_SYS_Init+0x10>)
 8009aa4:	f7ff fed8 	bl	8009858 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8009aa8:	bf00      	nop
}
 8009aaa:	bd80      	pop	{r7, pc}
 8009aac:	58000c00 	.word	0x58000c00

08009ab0 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 8009ab0:	b580      	push	{r7, lr}
 8009ab2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8009ab4:	2102      	movs	r1, #2
 8009ab6:	4804      	ldr	r0, [pc, #16]	; (8009ac8 <HW_IPCC_SYS_SendCmd+0x18>)
 8009ab8:	f7ff feee 	bl	8009898 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8009abc:	2102      	movs	r1, #2
 8009abe:	4802      	ldr	r0, [pc, #8]	; (8009ac8 <HW_IPCC_SYS_SendCmd+0x18>)
 8009ac0:	f7ff fea5 	bl	800980e <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8009ac4:	bf00      	nop
}
 8009ac6:	bd80      	pop	{r7, pc}
 8009ac8:	58000c00 	.word	0x58000c00

08009acc <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 8009acc:	b580      	push	{r7, lr}
 8009ace:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8009ad0:	2102      	movs	r1, #2
 8009ad2:	4803      	ldr	r0, [pc, #12]	; (8009ae0 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 8009ad4:	f7ff feae 	bl	8009834 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 8009ad8:	f7ff f82a 	bl	8008b30 <HW_IPCC_SYS_CmdEvtNot>

  return;
 8009adc:	bf00      	nop
}
 8009ade:	bd80      	pop	{r7, pc}
 8009ae0:	58000c00 	.word	0x58000c00

08009ae4 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 8009ae4:	b580      	push	{r7, lr}
 8009ae6:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 8009ae8:	f7ff f838 	bl	8008b5c <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8009aec:	2102      	movs	r1, #2
 8009aee:	4802      	ldr	r0, [pc, #8]	; (8009af8 <HW_IPCC_SYS_EvtHandler+0x14>)
 8009af0:	f7ff fec4 	bl	800987c <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8009af4:	bf00      	nop
}
 8009af6:	bd80      	pop	{r7, pc}
 8009af8:	58000c00 	.word	0x58000c00

08009afc <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 8009afc:	b580      	push	{r7, lr}
 8009afe:	b082      	sub	sp, #8
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 8009b04:	2108      	movs	r1, #8
 8009b06:	480c      	ldr	r0, [pc, #48]	; (8009b38 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8009b08:	f7ff fed5 	bl	80098b6 <LL_C1_IPCC_IsActiveFlag_CHx>
 8009b0c:	4603      	mov	r3, r0
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d007      	beq.n	8009b22 <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 8009b12:	4a0a      	ldr	r2, [pc, #40]	; (8009b3c <HW_IPCC_MM_SendFreeBuf+0x40>)
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8009b18:	2108      	movs	r1, #8
 8009b1a:	4807      	ldr	r0, [pc, #28]	; (8009b38 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8009b1c:	f7ff fe77 	bl	800980e <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 8009b20:	e006      	b.n	8009b30 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8009b26:	2108      	movs	r1, #8
 8009b28:	4803      	ldr	r0, [pc, #12]	; (8009b38 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8009b2a:	f7ff feb5 	bl	8009898 <LL_C1_IPCC_SetFlag_CHx>
  return;
 8009b2e:	bf00      	nop
}
 8009b30:	3708      	adds	r7, #8
 8009b32:	46bd      	mov	sp, r7
 8009b34:	bd80      	pop	{r7, pc}
 8009b36:	bf00      	nop
 8009b38:	58000c00 	.word	0x58000c00
 8009b3c:	20000ca8 	.word	0x20000ca8

08009b40 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 8009b40:	b580      	push	{r7, lr}
 8009b42:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8009b44:	2108      	movs	r1, #8
 8009b46:	4806      	ldr	r0, [pc, #24]	; (8009b60 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8009b48:	f7ff fe74 	bl	8009834 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 8009b4c:	4b05      	ldr	r3, [pc, #20]	; (8009b64 <HW_IPCC_MM_FreeBufHandler+0x24>)
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8009b52:	2108      	movs	r1, #8
 8009b54:	4802      	ldr	r0, [pc, #8]	; (8009b60 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8009b56:	f7ff fe9f 	bl	8009898 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8009b5a:	bf00      	nop
}
 8009b5c:	bd80      	pop	{r7, pc}
 8009b5e:	bf00      	nop
 8009b60:	58000c00 	.word	0x58000c00
 8009b64:	20000ca8 	.word	0x20000ca8

08009b68 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 8009b68:	b580      	push	{r7, lr}
 8009b6a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 8009b6c:	2108      	movs	r1, #8
 8009b6e:	4802      	ldr	r0, [pc, #8]	; (8009b78 <HW_IPCC_TRACES_Init+0x10>)
 8009b70:	f7ff fe72 	bl	8009858 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8009b74:	bf00      	nop
}
 8009b76:	bd80      	pop	{r7, pc}
 8009b78:	58000c00 	.word	0x58000c00

08009b7c <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 8009b7c:	b580      	push	{r7, lr}
 8009b7e:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 8009b80:	f7ff f894 	bl	8008cac <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 8009b84:	2108      	movs	r1, #8
 8009b86:	4802      	ldr	r0, [pc, #8]	; (8009b90 <HW_IPCC_TRACES_EvtHandler+0x14>)
 8009b88:	f7ff fe78 	bl	800987c <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8009b8c:	bf00      	nop
}
 8009b8e:	bd80      	pop	{r7, pc}
 8009b90:	58000c00 	.word	0x58000c00

08009b94 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 8009b94:	b480      	push	{r7}
 8009b96:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8009b98:	4b05      	ldr	r3, [pc, #20]	; (8009bb0 <UTIL_LPM_Init+0x1c>)
 8009b9a:	2200      	movs	r2, #0
 8009b9c:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8009b9e:	4b05      	ldr	r3, [pc, #20]	; (8009bb4 <UTIL_LPM_Init+0x20>)
 8009ba0:	2200      	movs	r2, #0
 8009ba2:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8009ba4:	bf00      	nop
 8009ba6:	46bd      	mov	sp, r7
 8009ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bac:	4770      	bx	lr
 8009bae:	bf00      	nop
 8009bb0:	20000cac 	.word	0x20000cac
 8009bb4:	20000cb0 	.word	0x20000cb0

08009bb8 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8009bb8:	b480      	push	{r7}
 8009bba:	b087      	sub	sp, #28
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	6078      	str	r0, [r7, #4]
 8009bc0:	460b      	mov	r3, r1
 8009bc2:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009bc4:	f3ef 8310 	mrs	r3, PRIMASK
 8009bc8:	613b      	str	r3, [r7, #16]
  return(result);
 8009bca:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8009bcc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009bce:	b672      	cpsid	i
}
 8009bd0:	bf00      	nop
  
  switch(state)
 8009bd2:	78fb      	ldrb	r3, [r7, #3]
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d008      	beq.n	8009bea <UTIL_LPM_SetOffMode+0x32>
 8009bd8:	2b01      	cmp	r3, #1
 8009bda:	d10e      	bne.n	8009bfa <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 8009bdc:	4b0d      	ldr	r3, [pc, #52]	; (8009c14 <UTIL_LPM_SetOffMode+0x5c>)
 8009bde:	681a      	ldr	r2, [r3, #0]
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	4313      	orrs	r3, r2
 8009be4:	4a0b      	ldr	r2, [pc, #44]	; (8009c14 <UTIL_LPM_SetOffMode+0x5c>)
 8009be6:	6013      	str	r3, [r2, #0]
      break;
 8009be8:	e008      	b.n	8009bfc <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	43da      	mvns	r2, r3
 8009bee:	4b09      	ldr	r3, [pc, #36]	; (8009c14 <UTIL_LPM_SetOffMode+0x5c>)
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	4013      	ands	r3, r2
 8009bf4:	4a07      	ldr	r2, [pc, #28]	; (8009c14 <UTIL_LPM_SetOffMode+0x5c>)
 8009bf6:	6013      	str	r3, [r2, #0]
      break;
 8009bf8:	e000      	b.n	8009bfc <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 8009bfa:	bf00      	nop
 8009bfc:	697b      	ldr	r3, [r7, #20]
 8009bfe:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	f383 8810 	msr	PRIMASK, r3
}
 8009c06:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8009c08:	bf00      	nop
 8009c0a:	371c      	adds	r7, #28
 8009c0c:	46bd      	mov	sp, r7
 8009c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c12:	4770      	bx	lr
 8009c14:	20000cb0 	.word	0x20000cb0

08009c18 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 8009c18:	b580      	push	{r7, lr}
 8009c1a:	b090      	sub	sp, #64	; 0x40
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 8009c20:	4b73      	ldr	r3, [pc, #460]	; (8009df0 <UTIL_SEQ_Run+0x1d8>)
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 8009c26:	4b72      	ldr	r3, [pc, #456]	; (8009df0 <UTIL_SEQ_Run+0x1d8>)
 8009c28:	681a      	ldr	r2, [r3, #0]
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	4013      	ands	r3, r2
 8009c2e:	4a70      	ldr	r2, [pc, #448]	; (8009df0 <UTIL_SEQ_Run+0x1d8>)
 8009c30:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 8009c32:	4b70      	ldr	r3, [pc, #448]	; (8009df4 <UTIL_SEQ_Run+0x1dc>)
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 8009c38:	4b6f      	ldr	r3, [pc, #444]	; (8009df8 <UTIL_SEQ_Run+0x1e0>)
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 8009c3e:	4b6f      	ldr	r3, [pc, #444]	; (8009dfc <UTIL_SEQ_Run+0x1e4>)
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	633b      	str	r3, [r7, #48]	; 0x30
  local_evtwaited =  EvtWaited;
 8009c44:	4b6e      	ldr	r3, [pc, #440]	; (8009e00 <UTIL_SEQ_Run+0x1e8>)
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8009c4a:	e08d      	b.n	8009d68 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 8009c4c:	2300      	movs	r3, #0
 8009c4e:	63fb      	str	r3, [r7, #60]	; 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8009c50:	e002      	b.n	8009c58 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 8009c52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c54:	3301      	adds	r3, #1
 8009c56:	63fb      	str	r3, [r7, #60]	; 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8009c58:	4a6a      	ldr	r2, [pc, #424]	; (8009e04 <UTIL_SEQ_Run+0x1ec>)
 8009c5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c5c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8009c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c62:	401a      	ands	r2, r3
 8009c64:	4b62      	ldr	r3, [pc, #392]	; (8009df0 <UTIL_SEQ_Run+0x1d8>)
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	4013      	ands	r3, r2
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d0f1      	beq.n	8009c52 <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 8009c6e:	4a65      	ldr	r2, [pc, #404]	; (8009e04 <UTIL_SEQ_Run+0x1ec>)
 8009c70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c72:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8009c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c78:	401a      	ands	r2, r3
 8009c7a:	4b5d      	ldr	r3, [pc, #372]	; (8009df0 <UTIL_SEQ_Run+0x1d8>)
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	4013      	ands	r3, r2
 8009c80:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 8009c82:	4a60      	ldr	r2, [pc, #384]	; (8009e04 <UTIL_SEQ_Run+0x1ec>)
 8009c84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c86:	00db      	lsls	r3, r3, #3
 8009c88:	4413      	add	r3, r2
 8009c8a:	685a      	ldr	r2, [r3, #4]
 8009c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c8e:	4013      	ands	r3, r2
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d106      	bne.n	8009ca2 <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 8009c94:	4a5b      	ldr	r2, [pc, #364]	; (8009e04 <UTIL_SEQ_Run+0x1ec>)
 8009c96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c98:	00db      	lsls	r3, r3, #3
 8009c9a:	4413      	add	r3, r2
 8009c9c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009ca0:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 8009ca2:	4a58      	ldr	r2, [pc, #352]	; (8009e04 <UTIL_SEQ_Run+0x1ec>)
 8009ca4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ca6:	00db      	lsls	r3, r3, #3
 8009ca8:	4413      	add	r3, r2
 8009caa:	685a      	ldr	r2, [r3, #4]
 8009cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cae:	4013      	ands	r3, r2
 8009cb0:	4618      	mov	r0, r3
 8009cb2:	f000 f9b3 	bl	800a01c <SEQ_BitPosition>
 8009cb6:	4603      	mov	r3, r0
 8009cb8:	461a      	mov	r2, r3
 8009cba:	4b53      	ldr	r3, [pc, #332]	; (8009e08 <UTIL_SEQ_Run+0x1f0>)
 8009cbc:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 8009cbe:	4a51      	ldr	r2, [pc, #324]	; (8009e04 <UTIL_SEQ_Run+0x1ec>)
 8009cc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009cc2:	00db      	lsls	r3, r3, #3
 8009cc4:	4413      	add	r3, r2
 8009cc6:	685a      	ldr	r2, [r3, #4]
 8009cc8:	4b4f      	ldr	r3, [pc, #316]	; (8009e08 <UTIL_SEQ_Run+0x1f0>)
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	2101      	movs	r1, #1
 8009cce:	fa01 f303 	lsl.w	r3, r1, r3
 8009cd2:	43db      	mvns	r3, r3
 8009cd4:	401a      	ands	r2, r3
 8009cd6:	494b      	ldr	r1, [pc, #300]	; (8009e04 <UTIL_SEQ_Run+0x1ec>)
 8009cd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009cda:	00db      	lsls	r3, r3, #3
 8009cdc:	440b      	add	r3, r1
 8009cde:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009ce0:	f3ef 8310 	mrs	r3, PRIMASK
 8009ce4:	61bb      	str	r3, [r7, #24]
  return(result);
 8009ce6:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8009ce8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8009cea:	b672      	cpsid	i
}
 8009cec:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 8009cee:	4b46      	ldr	r3, [pc, #280]	; (8009e08 <UTIL_SEQ_Run+0x1f0>)
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	2201      	movs	r2, #1
 8009cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8009cf8:	43da      	mvns	r2, r3
 8009cfa:	4b3e      	ldr	r3, [pc, #248]	; (8009df4 <UTIL_SEQ_Run+0x1dc>)
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	4013      	ands	r3, r2
 8009d00:	4a3c      	ldr	r2, [pc, #240]	; (8009df4 <UTIL_SEQ_Run+0x1dc>)
 8009d02:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8009d04:	2302      	movs	r3, #2
 8009d06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009d08:	e013      	b.n	8009d32 <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 8009d0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d0c:	3b01      	subs	r3, #1
 8009d0e:	4a3d      	ldr	r2, [pc, #244]	; (8009e04 <UTIL_SEQ_Run+0x1ec>)
 8009d10:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8009d14:	4b3c      	ldr	r3, [pc, #240]	; (8009e08 <UTIL_SEQ_Run+0x1f0>)
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	2201      	movs	r2, #1
 8009d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8009d1e:	43da      	mvns	r2, r3
 8009d20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d22:	3b01      	subs	r3, #1
 8009d24:	400a      	ands	r2, r1
 8009d26:	4937      	ldr	r1, [pc, #220]	; (8009e04 <UTIL_SEQ_Run+0x1ec>)
 8009d28:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8009d2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d2e:	3b01      	subs	r3, #1
 8009d30:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009d32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d1e8      	bne.n	8009d0a <UTIL_SEQ_Run+0xf2>
 8009d38:	6a3b      	ldr	r3, [r7, #32]
 8009d3a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009d3c:	697b      	ldr	r3, [r7, #20]
 8009d3e:	f383 8810 	msr	PRIMASK, r3
}
 8009d42:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 8009d44:	4b30      	ldr	r3, [pc, #192]	; (8009e08 <UTIL_SEQ_Run+0x1f0>)
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	4a30      	ldr	r2, [pc, #192]	; (8009e0c <UTIL_SEQ_Run+0x1f4>)
 8009d4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009d4e:	4798      	blx	r3

    local_taskset = TaskSet;
 8009d50:	4b28      	ldr	r3, [pc, #160]	; (8009df4 <UTIL_SEQ_Run+0x1dc>)
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	63bb      	str	r3, [r7, #56]	; 0x38
    local_evtset = EvtSet;
 8009d56:	4b28      	ldr	r3, [pc, #160]	; (8009df8 <UTIL_SEQ_Run+0x1e0>)
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	637b      	str	r3, [r7, #52]	; 0x34
    local_taskmask = TaskMask;
 8009d5c:	4b27      	ldr	r3, [pc, #156]	; (8009dfc <UTIL_SEQ_Run+0x1e4>)
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	633b      	str	r3, [r7, #48]	; 0x30
    local_evtwaited = EvtWaited;
 8009d62:	4b27      	ldr	r3, [pc, #156]	; (8009e00 <UTIL_SEQ_Run+0x1e8>)
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8009d68:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d6c:	401a      	ands	r2, r3
 8009d6e:	4b20      	ldr	r3, [pc, #128]	; (8009df0 <UTIL_SEQ_Run+0x1d8>)
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	4013      	ands	r3, r2
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d005      	beq.n	8009d84 <UTIL_SEQ_Run+0x16c>
 8009d78:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d7c:	4013      	ands	r3, r2
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	f43f af64 	beq.w	8009c4c <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 8009d84:	4b20      	ldr	r3, [pc, #128]	; (8009e08 <UTIL_SEQ_Run+0x1f0>)
 8009d86:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009d8a:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 8009d8c:	f000 f938 	bl	800a000 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009d90:	f3ef 8310 	mrs	r3, PRIMASK
 8009d94:	613b      	str	r3, [r7, #16]
  return(result);
 8009d96:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 8009d98:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8009d9a:	b672      	cpsid	i
}
 8009d9c:	bf00      	nop
  local_taskset = TaskSet;
 8009d9e:	4b15      	ldr	r3, [pc, #84]	; (8009df4 <UTIL_SEQ_Run+0x1dc>)
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 8009da4:	4b14      	ldr	r3, [pc, #80]	; (8009df8 <UTIL_SEQ_Run+0x1e0>)
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 8009daa:	4b14      	ldr	r3, [pc, #80]	; (8009dfc <UTIL_SEQ_Run+0x1e4>)
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	633b      	str	r3, [r7, #48]	; 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 8009db0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009db4:	401a      	ands	r2, r3
 8009db6:	4b0e      	ldr	r3, [pc, #56]	; (8009df0 <UTIL_SEQ_Run+0x1d8>)
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	4013      	ands	r3, r2
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d107      	bne.n	8009dd0 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 8009dc0:	4b0f      	ldr	r3, [pc, #60]	; (8009e00 <UTIL_SEQ_Run+0x1e8>)
 8009dc2:	681a      	ldr	r2, [r3, #0]
 8009dc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009dc6:	4013      	ands	r3, r2
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d101      	bne.n	8009dd0 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 8009dcc:	f7f6 ffec 	bl	8000da8 <UTIL_SEQ_Idle>
 8009dd0:	69fb      	ldr	r3, [r7, #28]
 8009dd2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	f383 8810 	msr	PRIMASK, r3
}
 8009dda:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 8009ddc:	f000 f917 	bl	800a00e <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 8009de0:	4a03      	ldr	r2, [pc, #12]	; (8009df0 <UTIL_SEQ_Run+0x1d8>)
 8009de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009de4:	6013      	str	r3, [r2, #0]

  return;
 8009de6:	bf00      	nop
}
 8009de8:	3740      	adds	r7, #64	; 0x40
 8009dea:	46bd      	mov	sp, r7
 8009dec:	bd80      	pop	{r7, pc}
 8009dee:	bf00      	nop
 8009df0:	20000024 	.word	0x20000024
 8009df4:	20000cb4 	.word	0x20000cb4
 8009df8:	20000cb8 	.word	0x20000cb8
 8009dfc:	20000020 	.word	0x20000020
 8009e00:	20000cbc 	.word	0x20000cbc
 8009e04:	20000d44 	.word	0x20000d44
 8009e08:	20000cc0 	.word	0x20000cc0
 8009e0c:	20000cc4 	.word	0x20000cc4

08009e10 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 8009e10:	b580      	push	{r7, lr}
 8009e12:	b088      	sub	sp, #32
 8009e14:	af00      	add	r7, sp, #0
 8009e16:	60f8      	str	r0, [r7, #12]
 8009e18:	60b9      	str	r1, [r7, #8]
 8009e1a:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009e1c:	f3ef 8310 	mrs	r3, PRIMASK
 8009e20:	617b      	str	r3, [r7, #20]
  return(result);
 8009e22:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 8009e24:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8009e26:	b672      	cpsid	i
}
 8009e28:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 8009e2a:	68f8      	ldr	r0, [r7, #12]
 8009e2c:	f000 f8f6 	bl	800a01c <SEQ_BitPosition>
 8009e30:	4603      	mov	r3, r0
 8009e32:	4619      	mov	r1, r3
 8009e34:	4a06      	ldr	r2, [pc, #24]	; (8009e50 <UTIL_SEQ_RegTask+0x40>)
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8009e3c:	69fb      	ldr	r3, [r7, #28]
 8009e3e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009e40:	69bb      	ldr	r3, [r7, #24]
 8009e42:	f383 8810 	msr	PRIMASK, r3
}
 8009e46:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 8009e48:	bf00      	nop
}
 8009e4a:	3720      	adds	r7, #32
 8009e4c:	46bd      	mov	sp, r7
 8009e4e:	bd80      	pop	{r7, pc}
 8009e50:	20000cc4 	.word	0x20000cc4

08009e54 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 8009e54:	b480      	push	{r7}
 8009e56:	b087      	sub	sp, #28
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	6078      	str	r0, [r7, #4]
 8009e5c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009e5e:	f3ef 8310 	mrs	r3, PRIMASK
 8009e62:	60fb      	str	r3, [r7, #12]
  return(result);
 8009e64:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8009e66:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009e68:	b672      	cpsid	i
}
 8009e6a:	bf00      	nop

  TaskSet |= TaskId_bm;
 8009e6c:	4b0d      	ldr	r3, [pc, #52]	; (8009ea4 <UTIL_SEQ_SetTask+0x50>)
 8009e6e:	681a      	ldr	r2, [r3, #0]
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	4313      	orrs	r3, r2
 8009e74:	4a0b      	ldr	r2, [pc, #44]	; (8009ea4 <UTIL_SEQ_SetTask+0x50>)
 8009e76:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 8009e78:	4a0b      	ldr	r2, [pc, #44]	; (8009ea8 <UTIL_SEQ_SetTask+0x54>)
 8009e7a:	683b      	ldr	r3, [r7, #0]
 8009e7c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	431a      	orrs	r2, r3
 8009e84:	4908      	ldr	r1, [pc, #32]	; (8009ea8 <UTIL_SEQ_SetTask+0x54>)
 8009e86:	683b      	ldr	r3, [r7, #0]
 8009e88:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 8009e8c:	697b      	ldr	r3, [r7, #20]
 8009e8e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009e90:	693b      	ldr	r3, [r7, #16]
 8009e92:	f383 8810 	msr	PRIMASK, r3
}
 8009e96:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8009e98:	bf00      	nop
}
 8009e9a:	371c      	adds	r7, #28
 8009e9c:	46bd      	mov	sp, r7
 8009e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea2:	4770      	bx	lr
 8009ea4:	20000cb4 	.word	0x20000cb4
 8009ea8:	20000d44 	.word	0x20000d44

08009eac <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 8009eac:	b480      	push	{r7}
 8009eae:	b087      	sub	sp, #28
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009eb4:	f3ef 8310 	mrs	r3, PRIMASK
 8009eb8:	60fb      	str	r3, [r7, #12]
  return(result);
 8009eba:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8009ebc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009ebe:	b672      	cpsid	i
}
 8009ec0:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	43da      	mvns	r2, r3
 8009ec6:	4b08      	ldr	r3, [pc, #32]	; (8009ee8 <UTIL_SEQ_PauseTask+0x3c>)
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	4013      	ands	r3, r2
 8009ecc:	4a06      	ldr	r2, [pc, #24]	; (8009ee8 <UTIL_SEQ_PauseTask+0x3c>)
 8009ece:	6013      	str	r3, [r2, #0]
 8009ed0:	697b      	ldr	r3, [r7, #20]
 8009ed2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009ed4:	693b      	ldr	r3, [r7, #16]
 8009ed6:	f383 8810 	msr	PRIMASK, r3
}
 8009eda:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8009edc:	bf00      	nop
}
 8009ede:	371c      	adds	r7, #28
 8009ee0:	46bd      	mov	sp, r7
 8009ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee6:	4770      	bx	lr
 8009ee8:	20000020 	.word	0x20000020

08009eec <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 8009eec:	b480      	push	{r7}
 8009eee:	b087      	sub	sp, #28
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009ef4:	f3ef 8310 	mrs	r3, PRIMASK
 8009ef8:	60fb      	str	r3, [r7, #12]
  return(result);
 8009efa:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8009efc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009efe:	b672      	cpsid	i
}
 8009f00:	bf00      	nop

  TaskMask |= TaskId_bm;
 8009f02:	4b09      	ldr	r3, [pc, #36]	; (8009f28 <UTIL_SEQ_ResumeTask+0x3c>)
 8009f04:	681a      	ldr	r2, [r3, #0]
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	4313      	orrs	r3, r2
 8009f0a:	4a07      	ldr	r2, [pc, #28]	; (8009f28 <UTIL_SEQ_ResumeTask+0x3c>)
 8009f0c:	6013      	str	r3, [r2, #0]
 8009f0e:	697b      	ldr	r3, [r7, #20]
 8009f10:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009f12:	693b      	ldr	r3, [r7, #16]
 8009f14:	f383 8810 	msr	PRIMASK, r3
}
 8009f18:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8009f1a:	bf00      	nop
}
 8009f1c:	371c      	adds	r7, #28
 8009f1e:	46bd      	mov	sp, r7
 8009f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f24:	4770      	bx	lr
 8009f26:	bf00      	nop
 8009f28:	20000020 	.word	0x20000020

08009f2c <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 8009f2c:	b480      	push	{r7}
 8009f2e:	b087      	sub	sp, #28
 8009f30:	af00      	add	r7, sp, #0
 8009f32:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009f34:	f3ef 8310 	mrs	r3, PRIMASK
 8009f38:	60fb      	str	r3, [r7, #12]
  return(result);
 8009f3a:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8009f3c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009f3e:	b672      	cpsid	i
}
 8009f40:	bf00      	nop

  EvtSet |= EvtId_bm;
 8009f42:	4b09      	ldr	r3, [pc, #36]	; (8009f68 <UTIL_SEQ_SetEvt+0x3c>)
 8009f44:	681a      	ldr	r2, [r3, #0]
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	4313      	orrs	r3, r2
 8009f4a:	4a07      	ldr	r2, [pc, #28]	; (8009f68 <UTIL_SEQ_SetEvt+0x3c>)
 8009f4c:	6013      	str	r3, [r2, #0]
 8009f4e:	697b      	ldr	r3, [r7, #20]
 8009f50:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009f52:	693b      	ldr	r3, [r7, #16]
 8009f54:	f383 8810 	msr	PRIMASK, r3
}
 8009f58:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8009f5a:	bf00      	nop
}
 8009f5c:	371c      	adds	r7, #28
 8009f5e:	46bd      	mov	sp, r7
 8009f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f64:	4770      	bx	lr
 8009f66:	bf00      	nop
 8009f68:	20000cb8 	.word	0x20000cb8

08009f6c <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 8009f6c:	b580      	push	{r7, lr}
 8009f6e:	b088      	sub	sp, #32
 8009f70:	af00      	add	r7, sp, #0
 8009f72:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 8009f74:	4b1f      	ldr	r3, [pc, #124]	; (8009ff4 <UTIL_SEQ_WaitEvt+0x88>)
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 8009f7a:	4b1e      	ldr	r3, [pc, #120]	; (8009ff4 <UTIL_SEQ_WaitEvt+0x88>)
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009f82:	d102      	bne.n	8009f8a <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 8009f84:	2300      	movs	r3, #0
 8009f86:	61fb      	str	r3, [r7, #28]
 8009f88:	e005      	b.n	8009f96 <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 8009f8a:	4b1a      	ldr	r3, [pc, #104]	; (8009ff4 <UTIL_SEQ_WaitEvt+0x88>)
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	2201      	movs	r2, #1
 8009f90:	fa02 f303 	lsl.w	r3, r2, r3
 8009f94:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 8009f96:	4b18      	ldr	r3, [pc, #96]	; (8009ff8 <UTIL_SEQ_WaitEvt+0x8c>)
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 8009f9c:	4a16      	ldr	r2, [pc, #88]	; (8009ff8 <UTIL_SEQ_WaitEvt+0x8c>)
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 8009fa2:	e003      	b.n	8009fac <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 8009fa4:	6879      	ldr	r1, [r7, #4]
 8009fa6:	69f8      	ldr	r0, [r7, #28]
 8009fa8:	f7f6 ff05 	bl	8000db6 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 8009fac:	4b13      	ldr	r3, [pc, #76]	; (8009ffc <UTIL_SEQ_WaitEvt+0x90>)
 8009fae:	681a      	ldr	r2, [r3, #0]
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	4013      	ands	r3, r2
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d0f5      	beq.n	8009fa4 <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 8009fb8:	4a0e      	ldr	r2, [pc, #56]	; (8009ff4 <UTIL_SEQ_WaitEvt+0x88>)
 8009fba:	69bb      	ldr	r3, [r7, #24]
 8009fbc:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009fbe:	f3ef 8310 	mrs	r3, PRIMASK
 8009fc2:	60bb      	str	r3, [r7, #8]
  return(result);
 8009fc4:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8009fc6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8009fc8:	b672      	cpsid	i
}
 8009fca:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	43da      	mvns	r2, r3
 8009fd0:	4b0a      	ldr	r3, [pc, #40]	; (8009ffc <UTIL_SEQ_WaitEvt+0x90>)
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	4013      	ands	r3, r2
 8009fd6:	4a09      	ldr	r2, [pc, #36]	; (8009ffc <UTIL_SEQ_WaitEvt+0x90>)
 8009fd8:	6013      	str	r3, [r2, #0]
 8009fda:	693b      	ldr	r3, [r7, #16]
 8009fdc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	f383 8810 	msr	PRIMASK, r3
}
 8009fe4:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 8009fe6:	4a04      	ldr	r2, [pc, #16]	; (8009ff8 <UTIL_SEQ_WaitEvt+0x8c>)
 8009fe8:	697b      	ldr	r3, [r7, #20]
 8009fea:	6013      	str	r3, [r2, #0]
  return;
 8009fec:	bf00      	nop
}
 8009fee:	3720      	adds	r7, #32
 8009ff0:	46bd      	mov	sp, r7
 8009ff2:	bd80      	pop	{r7, pc}
 8009ff4:	20000cc0 	.word	0x20000cc0
 8009ff8:	20000cbc 	.word	0x20000cbc
 8009ffc:	20000cb8 	.word	0x20000cb8

0800a000 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 800a000:	b480      	push	{r7}
 800a002:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800a004:	bf00      	nop
}
 800a006:	46bd      	mov	sp, r7
 800a008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a00c:	4770      	bx	lr

0800a00e <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 800a00e:	b480      	push	{r7}
 800a010:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800a012:	bf00      	nop
}
 800a014:	46bd      	mov	sp, r7
 800a016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a01a:	4770      	bx	lr

0800a01c <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 800a01c:	b480      	push	{r7}
 800a01e:	b085      	sub	sp, #20
 800a020:	af00      	add	r7, sp, #0
 800a022:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 800a024:	2300      	movs	r3, #0
 800a026:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 800a02c:	68bb      	ldr	r3, [r7, #8]
 800a02e:	0c1b      	lsrs	r3, r3, #16
 800a030:	041b      	lsls	r3, r3, #16
 800a032:	2b00      	cmp	r3, #0
 800a034:	d104      	bne.n	800a040 <SEQ_BitPosition+0x24>
 800a036:	2310      	movs	r3, #16
 800a038:	73fb      	strb	r3, [r7, #15]
 800a03a:	68bb      	ldr	r3, [r7, #8]
 800a03c:	041b      	lsls	r3, r3, #16
 800a03e:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 800a040:	68bb      	ldr	r3, [r7, #8]
 800a042:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800a046:	2b00      	cmp	r3, #0
 800a048:	d105      	bne.n	800a056 <SEQ_BitPosition+0x3a>
 800a04a:	7bfb      	ldrb	r3, [r7, #15]
 800a04c:	3308      	adds	r3, #8
 800a04e:	73fb      	strb	r3, [r7, #15]
 800a050:	68bb      	ldr	r3, [r7, #8]
 800a052:	021b      	lsls	r3, r3, #8
 800a054:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 800a056:	68bb      	ldr	r3, [r7, #8]
 800a058:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d105      	bne.n	800a06c <SEQ_BitPosition+0x50>
 800a060:	7bfb      	ldrb	r3, [r7, #15]
 800a062:	3304      	adds	r3, #4
 800a064:	73fb      	strb	r3, [r7, #15]
 800a066:	68bb      	ldr	r3, [r7, #8]
 800a068:	011b      	lsls	r3, r3, #4
 800a06a:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 800a06c:	68bb      	ldr	r3, [r7, #8]
 800a06e:	0f1b      	lsrs	r3, r3, #28
 800a070:	4a07      	ldr	r2, [pc, #28]	; (800a090 <SEQ_BitPosition+0x74>)
 800a072:	5cd2      	ldrb	r2, [r2, r3]
 800a074:	7bfb      	ldrb	r3, [r7, #15]
 800a076:	4413      	add	r3, r2
 800a078:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 800a07a:	7bfb      	ldrb	r3, [r7, #15]
 800a07c:	f1c3 031f 	rsb	r3, r3, #31
 800a080:	b2db      	uxtb	r3, r3
}
 800a082:	4618      	mov	r0, r3
 800a084:	3714      	adds	r7, #20
 800a086:	46bd      	mov	sp, r7
 800a088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a08c:	4770      	bx	lr
 800a08e:	bf00      	nop
 800a090:	0800b3bc 	.word	0x0800b3bc

0800a094 <__errno>:
 800a094:	4b01      	ldr	r3, [pc, #4]	; (800a09c <__errno+0x8>)
 800a096:	6818      	ldr	r0, [r3, #0]
 800a098:	4770      	bx	lr
 800a09a:	bf00      	nop
 800a09c:	20000028 	.word	0x20000028

0800a0a0 <__libc_init_array>:
 800a0a0:	b570      	push	{r4, r5, r6, lr}
 800a0a2:	4d0d      	ldr	r5, [pc, #52]	; (800a0d8 <__libc_init_array+0x38>)
 800a0a4:	4c0d      	ldr	r4, [pc, #52]	; (800a0dc <__libc_init_array+0x3c>)
 800a0a6:	1b64      	subs	r4, r4, r5
 800a0a8:	10a4      	asrs	r4, r4, #2
 800a0aa:	2600      	movs	r6, #0
 800a0ac:	42a6      	cmp	r6, r4
 800a0ae:	d109      	bne.n	800a0c4 <__libc_init_array+0x24>
 800a0b0:	4d0b      	ldr	r5, [pc, #44]	; (800a0e0 <__libc_init_array+0x40>)
 800a0b2:	4c0c      	ldr	r4, [pc, #48]	; (800a0e4 <__libc_init_array+0x44>)
 800a0b4:	f000 ffbc 	bl	800b030 <_init>
 800a0b8:	1b64      	subs	r4, r4, r5
 800a0ba:	10a4      	asrs	r4, r4, #2
 800a0bc:	2600      	movs	r6, #0
 800a0be:	42a6      	cmp	r6, r4
 800a0c0:	d105      	bne.n	800a0ce <__libc_init_array+0x2e>
 800a0c2:	bd70      	pop	{r4, r5, r6, pc}
 800a0c4:	f855 3b04 	ldr.w	r3, [r5], #4
 800a0c8:	4798      	blx	r3
 800a0ca:	3601      	adds	r6, #1
 800a0cc:	e7ee      	b.n	800a0ac <__libc_init_array+0xc>
 800a0ce:	f855 3b04 	ldr.w	r3, [r5], #4
 800a0d2:	4798      	blx	r3
 800a0d4:	3601      	adds	r6, #1
 800a0d6:	e7f2      	b.n	800a0be <__libc_init_array+0x1e>
 800a0d8:	0800b46c 	.word	0x0800b46c
 800a0dc:	0800b46c 	.word	0x0800b46c
 800a0e0:	0800b46c 	.word	0x0800b46c
 800a0e4:	0800b470 	.word	0x0800b470

0800a0e8 <memcpy>:
 800a0e8:	440a      	add	r2, r1
 800a0ea:	4291      	cmp	r1, r2
 800a0ec:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800a0f0:	d100      	bne.n	800a0f4 <memcpy+0xc>
 800a0f2:	4770      	bx	lr
 800a0f4:	b510      	push	{r4, lr}
 800a0f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a0fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a0fe:	4291      	cmp	r1, r2
 800a100:	d1f9      	bne.n	800a0f6 <memcpy+0xe>
 800a102:	bd10      	pop	{r4, pc}

0800a104 <memset>:
 800a104:	4402      	add	r2, r0
 800a106:	4603      	mov	r3, r0
 800a108:	4293      	cmp	r3, r2
 800a10a:	d100      	bne.n	800a10e <memset+0xa>
 800a10c:	4770      	bx	lr
 800a10e:	f803 1b01 	strb.w	r1, [r3], #1
 800a112:	e7f9      	b.n	800a108 <memset+0x4>

0800a114 <iprintf>:
 800a114:	b40f      	push	{r0, r1, r2, r3}
 800a116:	4b0a      	ldr	r3, [pc, #40]	; (800a140 <iprintf+0x2c>)
 800a118:	b513      	push	{r0, r1, r4, lr}
 800a11a:	681c      	ldr	r4, [r3, #0]
 800a11c:	b124      	cbz	r4, 800a128 <iprintf+0x14>
 800a11e:	69a3      	ldr	r3, [r4, #24]
 800a120:	b913      	cbnz	r3, 800a128 <iprintf+0x14>
 800a122:	4620      	mov	r0, r4
 800a124:	f000 f866 	bl	800a1f4 <__sinit>
 800a128:	ab05      	add	r3, sp, #20
 800a12a:	9a04      	ldr	r2, [sp, #16]
 800a12c:	68a1      	ldr	r1, [r4, #8]
 800a12e:	9301      	str	r3, [sp, #4]
 800a130:	4620      	mov	r0, r4
 800a132:	f000 f9bd 	bl	800a4b0 <_vfiprintf_r>
 800a136:	b002      	add	sp, #8
 800a138:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a13c:	b004      	add	sp, #16
 800a13e:	4770      	bx	lr
 800a140:	20000028 	.word	0x20000028

0800a144 <std>:
 800a144:	2300      	movs	r3, #0
 800a146:	b510      	push	{r4, lr}
 800a148:	4604      	mov	r4, r0
 800a14a:	e9c0 3300 	strd	r3, r3, [r0]
 800a14e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a152:	6083      	str	r3, [r0, #8]
 800a154:	8181      	strh	r1, [r0, #12]
 800a156:	6643      	str	r3, [r0, #100]	; 0x64
 800a158:	81c2      	strh	r2, [r0, #14]
 800a15a:	6183      	str	r3, [r0, #24]
 800a15c:	4619      	mov	r1, r3
 800a15e:	2208      	movs	r2, #8
 800a160:	305c      	adds	r0, #92	; 0x5c
 800a162:	f7ff ffcf 	bl	800a104 <memset>
 800a166:	4b05      	ldr	r3, [pc, #20]	; (800a17c <std+0x38>)
 800a168:	6263      	str	r3, [r4, #36]	; 0x24
 800a16a:	4b05      	ldr	r3, [pc, #20]	; (800a180 <std+0x3c>)
 800a16c:	62a3      	str	r3, [r4, #40]	; 0x28
 800a16e:	4b05      	ldr	r3, [pc, #20]	; (800a184 <std+0x40>)
 800a170:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a172:	4b05      	ldr	r3, [pc, #20]	; (800a188 <std+0x44>)
 800a174:	6224      	str	r4, [r4, #32]
 800a176:	6323      	str	r3, [r4, #48]	; 0x30
 800a178:	bd10      	pop	{r4, pc}
 800a17a:	bf00      	nop
 800a17c:	0800aa59 	.word	0x0800aa59
 800a180:	0800aa7b 	.word	0x0800aa7b
 800a184:	0800aab3 	.word	0x0800aab3
 800a188:	0800aad7 	.word	0x0800aad7

0800a18c <_cleanup_r>:
 800a18c:	4901      	ldr	r1, [pc, #4]	; (800a194 <_cleanup_r+0x8>)
 800a18e:	f000 b8af 	b.w	800a2f0 <_fwalk_reent>
 800a192:	bf00      	nop
 800a194:	0800adb1 	.word	0x0800adb1

0800a198 <__sfmoreglue>:
 800a198:	b570      	push	{r4, r5, r6, lr}
 800a19a:	2268      	movs	r2, #104	; 0x68
 800a19c:	1e4d      	subs	r5, r1, #1
 800a19e:	4355      	muls	r5, r2
 800a1a0:	460e      	mov	r6, r1
 800a1a2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a1a6:	f000 f8e5 	bl	800a374 <_malloc_r>
 800a1aa:	4604      	mov	r4, r0
 800a1ac:	b140      	cbz	r0, 800a1c0 <__sfmoreglue+0x28>
 800a1ae:	2100      	movs	r1, #0
 800a1b0:	e9c0 1600 	strd	r1, r6, [r0]
 800a1b4:	300c      	adds	r0, #12
 800a1b6:	60a0      	str	r0, [r4, #8]
 800a1b8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a1bc:	f7ff ffa2 	bl	800a104 <memset>
 800a1c0:	4620      	mov	r0, r4
 800a1c2:	bd70      	pop	{r4, r5, r6, pc}

0800a1c4 <__sfp_lock_acquire>:
 800a1c4:	4801      	ldr	r0, [pc, #4]	; (800a1cc <__sfp_lock_acquire+0x8>)
 800a1c6:	f000 b8b3 	b.w	800a330 <__retarget_lock_acquire_recursive>
 800a1ca:	bf00      	nop
 800a1cc:	20000d55 	.word	0x20000d55

0800a1d0 <__sfp_lock_release>:
 800a1d0:	4801      	ldr	r0, [pc, #4]	; (800a1d8 <__sfp_lock_release+0x8>)
 800a1d2:	f000 b8ae 	b.w	800a332 <__retarget_lock_release_recursive>
 800a1d6:	bf00      	nop
 800a1d8:	20000d55 	.word	0x20000d55

0800a1dc <__sinit_lock_acquire>:
 800a1dc:	4801      	ldr	r0, [pc, #4]	; (800a1e4 <__sinit_lock_acquire+0x8>)
 800a1de:	f000 b8a7 	b.w	800a330 <__retarget_lock_acquire_recursive>
 800a1e2:	bf00      	nop
 800a1e4:	20000d56 	.word	0x20000d56

0800a1e8 <__sinit_lock_release>:
 800a1e8:	4801      	ldr	r0, [pc, #4]	; (800a1f0 <__sinit_lock_release+0x8>)
 800a1ea:	f000 b8a2 	b.w	800a332 <__retarget_lock_release_recursive>
 800a1ee:	bf00      	nop
 800a1f0:	20000d56 	.word	0x20000d56

0800a1f4 <__sinit>:
 800a1f4:	b510      	push	{r4, lr}
 800a1f6:	4604      	mov	r4, r0
 800a1f8:	f7ff fff0 	bl	800a1dc <__sinit_lock_acquire>
 800a1fc:	69a3      	ldr	r3, [r4, #24]
 800a1fe:	b11b      	cbz	r3, 800a208 <__sinit+0x14>
 800a200:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a204:	f7ff bff0 	b.w	800a1e8 <__sinit_lock_release>
 800a208:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a20c:	6523      	str	r3, [r4, #80]	; 0x50
 800a20e:	4b13      	ldr	r3, [pc, #76]	; (800a25c <__sinit+0x68>)
 800a210:	4a13      	ldr	r2, [pc, #76]	; (800a260 <__sinit+0x6c>)
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	62a2      	str	r2, [r4, #40]	; 0x28
 800a216:	42a3      	cmp	r3, r4
 800a218:	bf04      	itt	eq
 800a21a:	2301      	moveq	r3, #1
 800a21c:	61a3      	streq	r3, [r4, #24]
 800a21e:	4620      	mov	r0, r4
 800a220:	f000 f820 	bl	800a264 <__sfp>
 800a224:	6060      	str	r0, [r4, #4]
 800a226:	4620      	mov	r0, r4
 800a228:	f000 f81c 	bl	800a264 <__sfp>
 800a22c:	60a0      	str	r0, [r4, #8]
 800a22e:	4620      	mov	r0, r4
 800a230:	f000 f818 	bl	800a264 <__sfp>
 800a234:	2200      	movs	r2, #0
 800a236:	60e0      	str	r0, [r4, #12]
 800a238:	2104      	movs	r1, #4
 800a23a:	6860      	ldr	r0, [r4, #4]
 800a23c:	f7ff ff82 	bl	800a144 <std>
 800a240:	68a0      	ldr	r0, [r4, #8]
 800a242:	2201      	movs	r2, #1
 800a244:	2109      	movs	r1, #9
 800a246:	f7ff ff7d 	bl	800a144 <std>
 800a24a:	68e0      	ldr	r0, [r4, #12]
 800a24c:	2202      	movs	r2, #2
 800a24e:	2112      	movs	r1, #18
 800a250:	f7ff ff78 	bl	800a144 <std>
 800a254:	2301      	movs	r3, #1
 800a256:	61a3      	str	r3, [r4, #24]
 800a258:	e7d2      	b.n	800a200 <__sinit+0xc>
 800a25a:	bf00      	nop
 800a25c:	0800b3cc 	.word	0x0800b3cc
 800a260:	0800a18d 	.word	0x0800a18d

0800a264 <__sfp>:
 800a264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a266:	4607      	mov	r7, r0
 800a268:	f7ff ffac 	bl	800a1c4 <__sfp_lock_acquire>
 800a26c:	4b1e      	ldr	r3, [pc, #120]	; (800a2e8 <__sfp+0x84>)
 800a26e:	681e      	ldr	r6, [r3, #0]
 800a270:	69b3      	ldr	r3, [r6, #24]
 800a272:	b913      	cbnz	r3, 800a27a <__sfp+0x16>
 800a274:	4630      	mov	r0, r6
 800a276:	f7ff ffbd 	bl	800a1f4 <__sinit>
 800a27a:	3648      	adds	r6, #72	; 0x48
 800a27c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a280:	3b01      	subs	r3, #1
 800a282:	d503      	bpl.n	800a28c <__sfp+0x28>
 800a284:	6833      	ldr	r3, [r6, #0]
 800a286:	b30b      	cbz	r3, 800a2cc <__sfp+0x68>
 800a288:	6836      	ldr	r6, [r6, #0]
 800a28a:	e7f7      	b.n	800a27c <__sfp+0x18>
 800a28c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a290:	b9d5      	cbnz	r5, 800a2c8 <__sfp+0x64>
 800a292:	4b16      	ldr	r3, [pc, #88]	; (800a2ec <__sfp+0x88>)
 800a294:	60e3      	str	r3, [r4, #12]
 800a296:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a29a:	6665      	str	r5, [r4, #100]	; 0x64
 800a29c:	f000 f847 	bl	800a32e <__retarget_lock_init_recursive>
 800a2a0:	f7ff ff96 	bl	800a1d0 <__sfp_lock_release>
 800a2a4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a2a8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a2ac:	6025      	str	r5, [r4, #0]
 800a2ae:	61a5      	str	r5, [r4, #24]
 800a2b0:	2208      	movs	r2, #8
 800a2b2:	4629      	mov	r1, r5
 800a2b4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a2b8:	f7ff ff24 	bl	800a104 <memset>
 800a2bc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a2c0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a2c4:	4620      	mov	r0, r4
 800a2c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a2c8:	3468      	adds	r4, #104	; 0x68
 800a2ca:	e7d9      	b.n	800a280 <__sfp+0x1c>
 800a2cc:	2104      	movs	r1, #4
 800a2ce:	4638      	mov	r0, r7
 800a2d0:	f7ff ff62 	bl	800a198 <__sfmoreglue>
 800a2d4:	4604      	mov	r4, r0
 800a2d6:	6030      	str	r0, [r6, #0]
 800a2d8:	2800      	cmp	r0, #0
 800a2da:	d1d5      	bne.n	800a288 <__sfp+0x24>
 800a2dc:	f7ff ff78 	bl	800a1d0 <__sfp_lock_release>
 800a2e0:	230c      	movs	r3, #12
 800a2e2:	603b      	str	r3, [r7, #0]
 800a2e4:	e7ee      	b.n	800a2c4 <__sfp+0x60>
 800a2e6:	bf00      	nop
 800a2e8:	0800b3cc 	.word	0x0800b3cc
 800a2ec:	ffff0001 	.word	0xffff0001

0800a2f0 <_fwalk_reent>:
 800a2f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a2f4:	4606      	mov	r6, r0
 800a2f6:	4688      	mov	r8, r1
 800a2f8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a2fc:	2700      	movs	r7, #0
 800a2fe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a302:	f1b9 0901 	subs.w	r9, r9, #1
 800a306:	d505      	bpl.n	800a314 <_fwalk_reent+0x24>
 800a308:	6824      	ldr	r4, [r4, #0]
 800a30a:	2c00      	cmp	r4, #0
 800a30c:	d1f7      	bne.n	800a2fe <_fwalk_reent+0xe>
 800a30e:	4638      	mov	r0, r7
 800a310:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a314:	89ab      	ldrh	r3, [r5, #12]
 800a316:	2b01      	cmp	r3, #1
 800a318:	d907      	bls.n	800a32a <_fwalk_reent+0x3a>
 800a31a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a31e:	3301      	adds	r3, #1
 800a320:	d003      	beq.n	800a32a <_fwalk_reent+0x3a>
 800a322:	4629      	mov	r1, r5
 800a324:	4630      	mov	r0, r6
 800a326:	47c0      	blx	r8
 800a328:	4307      	orrs	r7, r0
 800a32a:	3568      	adds	r5, #104	; 0x68
 800a32c:	e7e9      	b.n	800a302 <_fwalk_reent+0x12>

0800a32e <__retarget_lock_init_recursive>:
 800a32e:	4770      	bx	lr

0800a330 <__retarget_lock_acquire_recursive>:
 800a330:	4770      	bx	lr

0800a332 <__retarget_lock_release_recursive>:
 800a332:	4770      	bx	lr

0800a334 <sbrk_aligned>:
 800a334:	b570      	push	{r4, r5, r6, lr}
 800a336:	4e0e      	ldr	r6, [pc, #56]	; (800a370 <sbrk_aligned+0x3c>)
 800a338:	460c      	mov	r4, r1
 800a33a:	6831      	ldr	r1, [r6, #0]
 800a33c:	4605      	mov	r5, r0
 800a33e:	b911      	cbnz	r1, 800a346 <sbrk_aligned+0x12>
 800a340:	f000 fb7a 	bl	800aa38 <_sbrk_r>
 800a344:	6030      	str	r0, [r6, #0]
 800a346:	4621      	mov	r1, r4
 800a348:	4628      	mov	r0, r5
 800a34a:	f000 fb75 	bl	800aa38 <_sbrk_r>
 800a34e:	1c43      	adds	r3, r0, #1
 800a350:	d00a      	beq.n	800a368 <sbrk_aligned+0x34>
 800a352:	1cc4      	adds	r4, r0, #3
 800a354:	f024 0403 	bic.w	r4, r4, #3
 800a358:	42a0      	cmp	r0, r4
 800a35a:	d007      	beq.n	800a36c <sbrk_aligned+0x38>
 800a35c:	1a21      	subs	r1, r4, r0
 800a35e:	4628      	mov	r0, r5
 800a360:	f000 fb6a 	bl	800aa38 <_sbrk_r>
 800a364:	3001      	adds	r0, #1
 800a366:	d101      	bne.n	800a36c <sbrk_aligned+0x38>
 800a368:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800a36c:	4620      	mov	r0, r4
 800a36e:	bd70      	pop	{r4, r5, r6, pc}
 800a370:	20000d5c 	.word	0x20000d5c

0800a374 <_malloc_r>:
 800a374:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a378:	1ccd      	adds	r5, r1, #3
 800a37a:	f025 0503 	bic.w	r5, r5, #3
 800a37e:	3508      	adds	r5, #8
 800a380:	2d0c      	cmp	r5, #12
 800a382:	bf38      	it	cc
 800a384:	250c      	movcc	r5, #12
 800a386:	2d00      	cmp	r5, #0
 800a388:	4607      	mov	r7, r0
 800a38a:	db01      	blt.n	800a390 <_malloc_r+0x1c>
 800a38c:	42a9      	cmp	r1, r5
 800a38e:	d905      	bls.n	800a39c <_malloc_r+0x28>
 800a390:	230c      	movs	r3, #12
 800a392:	603b      	str	r3, [r7, #0]
 800a394:	2600      	movs	r6, #0
 800a396:	4630      	mov	r0, r6
 800a398:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a39c:	4e2e      	ldr	r6, [pc, #184]	; (800a458 <_malloc_r+0xe4>)
 800a39e:	f000 fdbb 	bl	800af18 <__malloc_lock>
 800a3a2:	6833      	ldr	r3, [r6, #0]
 800a3a4:	461c      	mov	r4, r3
 800a3a6:	bb34      	cbnz	r4, 800a3f6 <_malloc_r+0x82>
 800a3a8:	4629      	mov	r1, r5
 800a3aa:	4638      	mov	r0, r7
 800a3ac:	f7ff ffc2 	bl	800a334 <sbrk_aligned>
 800a3b0:	1c43      	adds	r3, r0, #1
 800a3b2:	4604      	mov	r4, r0
 800a3b4:	d14d      	bne.n	800a452 <_malloc_r+0xde>
 800a3b6:	6834      	ldr	r4, [r6, #0]
 800a3b8:	4626      	mov	r6, r4
 800a3ba:	2e00      	cmp	r6, #0
 800a3bc:	d140      	bne.n	800a440 <_malloc_r+0xcc>
 800a3be:	6823      	ldr	r3, [r4, #0]
 800a3c0:	4631      	mov	r1, r6
 800a3c2:	4638      	mov	r0, r7
 800a3c4:	eb04 0803 	add.w	r8, r4, r3
 800a3c8:	f000 fb36 	bl	800aa38 <_sbrk_r>
 800a3cc:	4580      	cmp	r8, r0
 800a3ce:	d13a      	bne.n	800a446 <_malloc_r+0xd2>
 800a3d0:	6821      	ldr	r1, [r4, #0]
 800a3d2:	3503      	adds	r5, #3
 800a3d4:	1a6d      	subs	r5, r5, r1
 800a3d6:	f025 0503 	bic.w	r5, r5, #3
 800a3da:	3508      	adds	r5, #8
 800a3dc:	2d0c      	cmp	r5, #12
 800a3de:	bf38      	it	cc
 800a3e0:	250c      	movcc	r5, #12
 800a3e2:	4629      	mov	r1, r5
 800a3e4:	4638      	mov	r0, r7
 800a3e6:	f7ff ffa5 	bl	800a334 <sbrk_aligned>
 800a3ea:	3001      	adds	r0, #1
 800a3ec:	d02b      	beq.n	800a446 <_malloc_r+0xd2>
 800a3ee:	6823      	ldr	r3, [r4, #0]
 800a3f0:	442b      	add	r3, r5
 800a3f2:	6023      	str	r3, [r4, #0]
 800a3f4:	e00e      	b.n	800a414 <_malloc_r+0xa0>
 800a3f6:	6822      	ldr	r2, [r4, #0]
 800a3f8:	1b52      	subs	r2, r2, r5
 800a3fa:	d41e      	bmi.n	800a43a <_malloc_r+0xc6>
 800a3fc:	2a0b      	cmp	r2, #11
 800a3fe:	d916      	bls.n	800a42e <_malloc_r+0xba>
 800a400:	1961      	adds	r1, r4, r5
 800a402:	42a3      	cmp	r3, r4
 800a404:	6025      	str	r5, [r4, #0]
 800a406:	bf18      	it	ne
 800a408:	6059      	strne	r1, [r3, #4]
 800a40a:	6863      	ldr	r3, [r4, #4]
 800a40c:	bf08      	it	eq
 800a40e:	6031      	streq	r1, [r6, #0]
 800a410:	5162      	str	r2, [r4, r5]
 800a412:	604b      	str	r3, [r1, #4]
 800a414:	4638      	mov	r0, r7
 800a416:	f104 060b 	add.w	r6, r4, #11
 800a41a:	f000 fd83 	bl	800af24 <__malloc_unlock>
 800a41e:	f026 0607 	bic.w	r6, r6, #7
 800a422:	1d23      	adds	r3, r4, #4
 800a424:	1af2      	subs	r2, r6, r3
 800a426:	d0b6      	beq.n	800a396 <_malloc_r+0x22>
 800a428:	1b9b      	subs	r3, r3, r6
 800a42a:	50a3      	str	r3, [r4, r2]
 800a42c:	e7b3      	b.n	800a396 <_malloc_r+0x22>
 800a42e:	6862      	ldr	r2, [r4, #4]
 800a430:	42a3      	cmp	r3, r4
 800a432:	bf0c      	ite	eq
 800a434:	6032      	streq	r2, [r6, #0]
 800a436:	605a      	strne	r2, [r3, #4]
 800a438:	e7ec      	b.n	800a414 <_malloc_r+0xa0>
 800a43a:	4623      	mov	r3, r4
 800a43c:	6864      	ldr	r4, [r4, #4]
 800a43e:	e7b2      	b.n	800a3a6 <_malloc_r+0x32>
 800a440:	4634      	mov	r4, r6
 800a442:	6876      	ldr	r6, [r6, #4]
 800a444:	e7b9      	b.n	800a3ba <_malloc_r+0x46>
 800a446:	230c      	movs	r3, #12
 800a448:	603b      	str	r3, [r7, #0]
 800a44a:	4638      	mov	r0, r7
 800a44c:	f000 fd6a 	bl	800af24 <__malloc_unlock>
 800a450:	e7a1      	b.n	800a396 <_malloc_r+0x22>
 800a452:	6025      	str	r5, [r4, #0]
 800a454:	e7de      	b.n	800a414 <_malloc_r+0xa0>
 800a456:	bf00      	nop
 800a458:	20000d58 	.word	0x20000d58

0800a45c <__sfputc_r>:
 800a45c:	6893      	ldr	r3, [r2, #8]
 800a45e:	3b01      	subs	r3, #1
 800a460:	2b00      	cmp	r3, #0
 800a462:	b410      	push	{r4}
 800a464:	6093      	str	r3, [r2, #8]
 800a466:	da08      	bge.n	800a47a <__sfputc_r+0x1e>
 800a468:	6994      	ldr	r4, [r2, #24]
 800a46a:	42a3      	cmp	r3, r4
 800a46c:	db01      	blt.n	800a472 <__sfputc_r+0x16>
 800a46e:	290a      	cmp	r1, #10
 800a470:	d103      	bne.n	800a47a <__sfputc_r+0x1e>
 800a472:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a476:	f000 bb33 	b.w	800aae0 <__swbuf_r>
 800a47a:	6813      	ldr	r3, [r2, #0]
 800a47c:	1c58      	adds	r0, r3, #1
 800a47e:	6010      	str	r0, [r2, #0]
 800a480:	7019      	strb	r1, [r3, #0]
 800a482:	4608      	mov	r0, r1
 800a484:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a488:	4770      	bx	lr

0800a48a <__sfputs_r>:
 800a48a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a48c:	4606      	mov	r6, r0
 800a48e:	460f      	mov	r7, r1
 800a490:	4614      	mov	r4, r2
 800a492:	18d5      	adds	r5, r2, r3
 800a494:	42ac      	cmp	r4, r5
 800a496:	d101      	bne.n	800a49c <__sfputs_r+0x12>
 800a498:	2000      	movs	r0, #0
 800a49a:	e007      	b.n	800a4ac <__sfputs_r+0x22>
 800a49c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a4a0:	463a      	mov	r2, r7
 800a4a2:	4630      	mov	r0, r6
 800a4a4:	f7ff ffda 	bl	800a45c <__sfputc_r>
 800a4a8:	1c43      	adds	r3, r0, #1
 800a4aa:	d1f3      	bne.n	800a494 <__sfputs_r+0xa>
 800a4ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a4b0 <_vfiprintf_r>:
 800a4b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4b4:	460d      	mov	r5, r1
 800a4b6:	b09d      	sub	sp, #116	; 0x74
 800a4b8:	4614      	mov	r4, r2
 800a4ba:	4698      	mov	r8, r3
 800a4bc:	4606      	mov	r6, r0
 800a4be:	b118      	cbz	r0, 800a4c8 <_vfiprintf_r+0x18>
 800a4c0:	6983      	ldr	r3, [r0, #24]
 800a4c2:	b90b      	cbnz	r3, 800a4c8 <_vfiprintf_r+0x18>
 800a4c4:	f7ff fe96 	bl	800a1f4 <__sinit>
 800a4c8:	4b89      	ldr	r3, [pc, #548]	; (800a6f0 <_vfiprintf_r+0x240>)
 800a4ca:	429d      	cmp	r5, r3
 800a4cc:	d11b      	bne.n	800a506 <_vfiprintf_r+0x56>
 800a4ce:	6875      	ldr	r5, [r6, #4]
 800a4d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a4d2:	07d9      	lsls	r1, r3, #31
 800a4d4:	d405      	bmi.n	800a4e2 <_vfiprintf_r+0x32>
 800a4d6:	89ab      	ldrh	r3, [r5, #12]
 800a4d8:	059a      	lsls	r2, r3, #22
 800a4da:	d402      	bmi.n	800a4e2 <_vfiprintf_r+0x32>
 800a4dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a4de:	f7ff ff27 	bl	800a330 <__retarget_lock_acquire_recursive>
 800a4e2:	89ab      	ldrh	r3, [r5, #12]
 800a4e4:	071b      	lsls	r3, r3, #28
 800a4e6:	d501      	bpl.n	800a4ec <_vfiprintf_r+0x3c>
 800a4e8:	692b      	ldr	r3, [r5, #16]
 800a4ea:	b9eb      	cbnz	r3, 800a528 <_vfiprintf_r+0x78>
 800a4ec:	4629      	mov	r1, r5
 800a4ee:	4630      	mov	r0, r6
 800a4f0:	f000 fb5a 	bl	800aba8 <__swsetup_r>
 800a4f4:	b1c0      	cbz	r0, 800a528 <_vfiprintf_r+0x78>
 800a4f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a4f8:	07dc      	lsls	r4, r3, #31
 800a4fa:	d50e      	bpl.n	800a51a <_vfiprintf_r+0x6a>
 800a4fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a500:	b01d      	add	sp, #116	; 0x74
 800a502:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a506:	4b7b      	ldr	r3, [pc, #492]	; (800a6f4 <_vfiprintf_r+0x244>)
 800a508:	429d      	cmp	r5, r3
 800a50a:	d101      	bne.n	800a510 <_vfiprintf_r+0x60>
 800a50c:	68b5      	ldr	r5, [r6, #8]
 800a50e:	e7df      	b.n	800a4d0 <_vfiprintf_r+0x20>
 800a510:	4b79      	ldr	r3, [pc, #484]	; (800a6f8 <_vfiprintf_r+0x248>)
 800a512:	429d      	cmp	r5, r3
 800a514:	bf08      	it	eq
 800a516:	68f5      	ldreq	r5, [r6, #12]
 800a518:	e7da      	b.n	800a4d0 <_vfiprintf_r+0x20>
 800a51a:	89ab      	ldrh	r3, [r5, #12]
 800a51c:	0598      	lsls	r0, r3, #22
 800a51e:	d4ed      	bmi.n	800a4fc <_vfiprintf_r+0x4c>
 800a520:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a522:	f7ff ff06 	bl	800a332 <__retarget_lock_release_recursive>
 800a526:	e7e9      	b.n	800a4fc <_vfiprintf_r+0x4c>
 800a528:	2300      	movs	r3, #0
 800a52a:	9309      	str	r3, [sp, #36]	; 0x24
 800a52c:	2320      	movs	r3, #32
 800a52e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a532:	f8cd 800c 	str.w	r8, [sp, #12]
 800a536:	2330      	movs	r3, #48	; 0x30
 800a538:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a6fc <_vfiprintf_r+0x24c>
 800a53c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a540:	f04f 0901 	mov.w	r9, #1
 800a544:	4623      	mov	r3, r4
 800a546:	469a      	mov	sl, r3
 800a548:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a54c:	b10a      	cbz	r2, 800a552 <_vfiprintf_r+0xa2>
 800a54e:	2a25      	cmp	r2, #37	; 0x25
 800a550:	d1f9      	bne.n	800a546 <_vfiprintf_r+0x96>
 800a552:	ebba 0b04 	subs.w	fp, sl, r4
 800a556:	d00b      	beq.n	800a570 <_vfiprintf_r+0xc0>
 800a558:	465b      	mov	r3, fp
 800a55a:	4622      	mov	r2, r4
 800a55c:	4629      	mov	r1, r5
 800a55e:	4630      	mov	r0, r6
 800a560:	f7ff ff93 	bl	800a48a <__sfputs_r>
 800a564:	3001      	adds	r0, #1
 800a566:	f000 80aa 	beq.w	800a6be <_vfiprintf_r+0x20e>
 800a56a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a56c:	445a      	add	r2, fp
 800a56e:	9209      	str	r2, [sp, #36]	; 0x24
 800a570:	f89a 3000 	ldrb.w	r3, [sl]
 800a574:	2b00      	cmp	r3, #0
 800a576:	f000 80a2 	beq.w	800a6be <_vfiprintf_r+0x20e>
 800a57a:	2300      	movs	r3, #0
 800a57c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a580:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a584:	f10a 0a01 	add.w	sl, sl, #1
 800a588:	9304      	str	r3, [sp, #16]
 800a58a:	9307      	str	r3, [sp, #28]
 800a58c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a590:	931a      	str	r3, [sp, #104]	; 0x68
 800a592:	4654      	mov	r4, sl
 800a594:	2205      	movs	r2, #5
 800a596:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a59a:	4858      	ldr	r0, [pc, #352]	; (800a6fc <_vfiprintf_r+0x24c>)
 800a59c:	f7f5 fdf8 	bl	8000190 <memchr>
 800a5a0:	9a04      	ldr	r2, [sp, #16]
 800a5a2:	b9d8      	cbnz	r0, 800a5dc <_vfiprintf_r+0x12c>
 800a5a4:	06d1      	lsls	r1, r2, #27
 800a5a6:	bf44      	itt	mi
 800a5a8:	2320      	movmi	r3, #32
 800a5aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a5ae:	0713      	lsls	r3, r2, #28
 800a5b0:	bf44      	itt	mi
 800a5b2:	232b      	movmi	r3, #43	; 0x2b
 800a5b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a5b8:	f89a 3000 	ldrb.w	r3, [sl]
 800a5bc:	2b2a      	cmp	r3, #42	; 0x2a
 800a5be:	d015      	beq.n	800a5ec <_vfiprintf_r+0x13c>
 800a5c0:	9a07      	ldr	r2, [sp, #28]
 800a5c2:	4654      	mov	r4, sl
 800a5c4:	2000      	movs	r0, #0
 800a5c6:	f04f 0c0a 	mov.w	ip, #10
 800a5ca:	4621      	mov	r1, r4
 800a5cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a5d0:	3b30      	subs	r3, #48	; 0x30
 800a5d2:	2b09      	cmp	r3, #9
 800a5d4:	d94e      	bls.n	800a674 <_vfiprintf_r+0x1c4>
 800a5d6:	b1b0      	cbz	r0, 800a606 <_vfiprintf_r+0x156>
 800a5d8:	9207      	str	r2, [sp, #28]
 800a5da:	e014      	b.n	800a606 <_vfiprintf_r+0x156>
 800a5dc:	eba0 0308 	sub.w	r3, r0, r8
 800a5e0:	fa09 f303 	lsl.w	r3, r9, r3
 800a5e4:	4313      	orrs	r3, r2
 800a5e6:	9304      	str	r3, [sp, #16]
 800a5e8:	46a2      	mov	sl, r4
 800a5ea:	e7d2      	b.n	800a592 <_vfiprintf_r+0xe2>
 800a5ec:	9b03      	ldr	r3, [sp, #12]
 800a5ee:	1d19      	adds	r1, r3, #4
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	9103      	str	r1, [sp, #12]
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	bfbb      	ittet	lt
 800a5f8:	425b      	neglt	r3, r3
 800a5fa:	f042 0202 	orrlt.w	r2, r2, #2
 800a5fe:	9307      	strge	r3, [sp, #28]
 800a600:	9307      	strlt	r3, [sp, #28]
 800a602:	bfb8      	it	lt
 800a604:	9204      	strlt	r2, [sp, #16]
 800a606:	7823      	ldrb	r3, [r4, #0]
 800a608:	2b2e      	cmp	r3, #46	; 0x2e
 800a60a:	d10c      	bne.n	800a626 <_vfiprintf_r+0x176>
 800a60c:	7863      	ldrb	r3, [r4, #1]
 800a60e:	2b2a      	cmp	r3, #42	; 0x2a
 800a610:	d135      	bne.n	800a67e <_vfiprintf_r+0x1ce>
 800a612:	9b03      	ldr	r3, [sp, #12]
 800a614:	1d1a      	adds	r2, r3, #4
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	9203      	str	r2, [sp, #12]
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	bfb8      	it	lt
 800a61e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a622:	3402      	adds	r4, #2
 800a624:	9305      	str	r3, [sp, #20]
 800a626:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a70c <_vfiprintf_r+0x25c>
 800a62a:	7821      	ldrb	r1, [r4, #0]
 800a62c:	2203      	movs	r2, #3
 800a62e:	4650      	mov	r0, sl
 800a630:	f7f5 fdae 	bl	8000190 <memchr>
 800a634:	b140      	cbz	r0, 800a648 <_vfiprintf_r+0x198>
 800a636:	2340      	movs	r3, #64	; 0x40
 800a638:	eba0 000a 	sub.w	r0, r0, sl
 800a63c:	fa03 f000 	lsl.w	r0, r3, r0
 800a640:	9b04      	ldr	r3, [sp, #16]
 800a642:	4303      	orrs	r3, r0
 800a644:	3401      	adds	r4, #1
 800a646:	9304      	str	r3, [sp, #16]
 800a648:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a64c:	482c      	ldr	r0, [pc, #176]	; (800a700 <_vfiprintf_r+0x250>)
 800a64e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a652:	2206      	movs	r2, #6
 800a654:	f7f5 fd9c 	bl	8000190 <memchr>
 800a658:	2800      	cmp	r0, #0
 800a65a:	d03f      	beq.n	800a6dc <_vfiprintf_r+0x22c>
 800a65c:	4b29      	ldr	r3, [pc, #164]	; (800a704 <_vfiprintf_r+0x254>)
 800a65e:	bb1b      	cbnz	r3, 800a6a8 <_vfiprintf_r+0x1f8>
 800a660:	9b03      	ldr	r3, [sp, #12]
 800a662:	3307      	adds	r3, #7
 800a664:	f023 0307 	bic.w	r3, r3, #7
 800a668:	3308      	adds	r3, #8
 800a66a:	9303      	str	r3, [sp, #12]
 800a66c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a66e:	443b      	add	r3, r7
 800a670:	9309      	str	r3, [sp, #36]	; 0x24
 800a672:	e767      	b.n	800a544 <_vfiprintf_r+0x94>
 800a674:	fb0c 3202 	mla	r2, ip, r2, r3
 800a678:	460c      	mov	r4, r1
 800a67a:	2001      	movs	r0, #1
 800a67c:	e7a5      	b.n	800a5ca <_vfiprintf_r+0x11a>
 800a67e:	2300      	movs	r3, #0
 800a680:	3401      	adds	r4, #1
 800a682:	9305      	str	r3, [sp, #20]
 800a684:	4619      	mov	r1, r3
 800a686:	f04f 0c0a 	mov.w	ip, #10
 800a68a:	4620      	mov	r0, r4
 800a68c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a690:	3a30      	subs	r2, #48	; 0x30
 800a692:	2a09      	cmp	r2, #9
 800a694:	d903      	bls.n	800a69e <_vfiprintf_r+0x1ee>
 800a696:	2b00      	cmp	r3, #0
 800a698:	d0c5      	beq.n	800a626 <_vfiprintf_r+0x176>
 800a69a:	9105      	str	r1, [sp, #20]
 800a69c:	e7c3      	b.n	800a626 <_vfiprintf_r+0x176>
 800a69e:	fb0c 2101 	mla	r1, ip, r1, r2
 800a6a2:	4604      	mov	r4, r0
 800a6a4:	2301      	movs	r3, #1
 800a6a6:	e7f0      	b.n	800a68a <_vfiprintf_r+0x1da>
 800a6a8:	ab03      	add	r3, sp, #12
 800a6aa:	9300      	str	r3, [sp, #0]
 800a6ac:	462a      	mov	r2, r5
 800a6ae:	4b16      	ldr	r3, [pc, #88]	; (800a708 <_vfiprintf_r+0x258>)
 800a6b0:	a904      	add	r1, sp, #16
 800a6b2:	4630      	mov	r0, r6
 800a6b4:	f3af 8000 	nop.w
 800a6b8:	4607      	mov	r7, r0
 800a6ba:	1c78      	adds	r0, r7, #1
 800a6bc:	d1d6      	bne.n	800a66c <_vfiprintf_r+0x1bc>
 800a6be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a6c0:	07d9      	lsls	r1, r3, #31
 800a6c2:	d405      	bmi.n	800a6d0 <_vfiprintf_r+0x220>
 800a6c4:	89ab      	ldrh	r3, [r5, #12]
 800a6c6:	059a      	lsls	r2, r3, #22
 800a6c8:	d402      	bmi.n	800a6d0 <_vfiprintf_r+0x220>
 800a6ca:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a6cc:	f7ff fe31 	bl	800a332 <__retarget_lock_release_recursive>
 800a6d0:	89ab      	ldrh	r3, [r5, #12]
 800a6d2:	065b      	lsls	r3, r3, #25
 800a6d4:	f53f af12 	bmi.w	800a4fc <_vfiprintf_r+0x4c>
 800a6d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a6da:	e711      	b.n	800a500 <_vfiprintf_r+0x50>
 800a6dc:	ab03      	add	r3, sp, #12
 800a6de:	9300      	str	r3, [sp, #0]
 800a6e0:	462a      	mov	r2, r5
 800a6e2:	4b09      	ldr	r3, [pc, #36]	; (800a708 <_vfiprintf_r+0x258>)
 800a6e4:	a904      	add	r1, sp, #16
 800a6e6:	4630      	mov	r0, r6
 800a6e8:	f000 f880 	bl	800a7ec <_printf_i>
 800a6ec:	e7e4      	b.n	800a6b8 <_vfiprintf_r+0x208>
 800a6ee:	bf00      	nop
 800a6f0:	0800b3f0 	.word	0x0800b3f0
 800a6f4:	0800b410 	.word	0x0800b410
 800a6f8:	0800b3d0 	.word	0x0800b3d0
 800a6fc:	0800b430 	.word	0x0800b430
 800a700:	0800b43a 	.word	0x0800b43a
 800a704:	00000000 	.word	0x00000000
 800a708:	0800a48b 	.word	0x0800a48b
 800a70c:	0800b436 	.word	0x0800b436

0800a710 <_printf_common>:
 800a710:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a714:	4616      	mov	r6, r2
 800a716:	4699      	mov	r9, r3
 800a718:	688a      	ldr	r2, [r1, #8]
 800a71a:	690b      	ldr	r3, [r1, #16]
 800a71c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a720:	4293      	cmp	r3, r2
 800a722:	bfb8      	it	lt
 800a724:	4613      	movlt	r3, r2
 800a726:	6033      	str	r3, [r6, #0]
 800a728:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a72c:	4607      	mov	r7, r0
 800a72e:	460c      	mov	r4, r1
 800a730:	b10a      	cbz	r2, 800a736 <_printf_common+0x26>
 800a732:	3301      	adds	r3, #1
 800a734:	6033      	str	r3, [r6, #0]
 800a736:	6823      	ldr	r3, [r4, #0]
 800a738:	0699      	lsls	r1, r3, #26
 800a73a:	bf42      	ittt	mi
 800a73c:	6833      	ldrmi	r3, [r6, #0]
 800a73e:	3302      	addmi	r3, #2
 800a740:	6033      	strmi	r3, [r6, #0]
 800a742:	6825      	ldr	r5, [r4, #0]
 800a744:	f015 0506 	ands.w	r5, r5, #6
 800a748:	d106      	bne.n	800a758 <_printf_common+0x48>
 800a74a:	f104 0a19 	add.w	sl, r4, #25
 800a74e:	68e3      	ldr	r3, [r4, #12]
 800a750:	6832      	ldr	r2, [r6, #0]
 800a752:	1a9b      	subs	r3, r3, r2
 800a754:	42ab      	cmp	r3, r5
 800a756:	dc26      	bgt.n	800a7a6 <_printf_common+0x96>
 800a758:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a75c:	1e13      	subs	r3, r2, #0
 800a75e:	6822      	ldr	r2, [r4, #0]
 800a760:	bf18      	it	ne
 800a762:	2301      	movne	r3, #1
 800a764:	0692      	lsls	r2, r2, #26
 800a766:	d42b      	bmi.n	800a7c0 <_printf_common+0xb0>
 800a768:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a76c:	4649      	mov	r1, r9
 800a76e:	4638      	mov	r0, r7
 800a770:	47c0      	blx	r8
 800a772:	3001      	adds	r0, #1
 800a774:	d01e      	beq.n	800a7b4 <_printf_common+0xa4>
 800a776:	6823      	ldr	r3, [r4, #0]
 800a778:	68e5      	ldr	r5, [r4, #12]
 800a77a:	6832      	ldr	r2, [r6, #0]
 800a77c:	f003 0306 	and.w	r3, r3, #6
 800a780:	2b04      	cmp	r3, #4
 800a782:	bf08      	it	eq
 800a784:	1aad      	subeq	r5, r5, r2
 800a786:	68a3      	ldr	r3, [r4, #8]
 800a788:	6922      	ldr	r2, [r4, #16]
 800a78a:	bf0c      	ite	eq
 800a78c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a790:	2500      	movne	r5, #0
 800a792:	4293      	cmp	r3, r2
 800a794:	bfc4      	itt	gt
 800a796:	1a9b      	subgt	r3, r3, r2
 800a798:	18ed      	addgt	r5, r5, r3
 800a79a:	2600      	movs	r6, #0
 800a79c:	341a      	adds	r4, #26
 800a79e:	42b5      	cmp	r5, r6
 800a7a0:	d11a      	bne.n	800a7d8 <_printf_common+0xc8>
 800a7a2:	2000      	movs	r0, #0
 800a7a4:	e008      	b.n	800a7b8 <_printf_common+0xa8>
 800a7a6:	2301      	movs	r3, #1
 800a7a8:	4652      	mov	r2, sl
 800a7aa:	4649      	mov	r1, r9
 800a7ac:	4638      	mov	r0, r7
 800a7ae:	47c0      	blx	r8
 800a7b0:	3001      	adds	r0, #1
 800a7b2:	d103      	bne.n	800a7bc <_printf_common+0xac>
 800a7b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a7b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a7bc:	3501      	adds	r5, #1
 800a7be:	e7c6      	b.n	800a74e <_printf_common+0x3e>
 800a7c0:	18e1      	adds	r1, r4, r3
 800a7c2:	1c5a      	adds	r2, r3, #1
 800a7c4:	2030      	movs	r0, #48	; 0x30
 800a7c6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a7ca:	4422      	add	r2, r4
 800a7cc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a7d0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a7d4:	3302      	adds	r3, #2
 800a7d6:	e7c7      	b.n	800a768 <_printf_common+0x58>
 800a7d8:	2301      	movs	r3, #1
 800a7da:	4622      	mov	r2, r4
 800a7dc:	4649      	mov	r1, r9
 800a7de:	4638      	mov	r0, r7
 800a7e0:	47c0      	blx	r8
 800a7e2:	3001      	adds	r0, #1
 800a7e4:	d0e6      	beq.n	800a7b4 <_printf_common+0xa4>
 800a7e6:	3601      	adds	r6, #1
 800a7e8:	e7d9      	b.n	800a79e <_printf_common+0x8e>
	...

0800a7ec <_printf_i>:
 800a7ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a7f0:	7e0f      	ldrb	r7, [r1, #24]
 800a7f2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a7f4:	2f78      	cmp	r7, #120	; 0x78
 800a7f6:	4691      	mov	r9, r2
 800a7f8:	4680      	mov	r8, r0
 800a7fa:	460c      	mov	r4, r1
 800a7fc:	469a      	mov	sl, r3
 800a7fe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a802:	d807      	bhi.n	800a814 <_printf_i+0x28>
 800a804:	2f62      	cmp	r7, #98	; 0x62
 800a806:	d80a      	bhi.n	800a81e <_printf_i+0x32>
 800a808:	2f00      	cmp	r7, #0
 800a80a:	f000 80d8 	beq.w	800a9be <_printf_i+0x1d2>
 800a80e:	2f58      	cmp	r7, #88	; 0x58
 800a810:	f000 80a3 	beq.w	800a95a <_printf_i+0x16e>
 800a814:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a818:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a81c:	e03a      	b.n	800a894 <_printf_i+0xa8>
 800a81e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a822:	2b15      	cmp	r3, #21
 800a824:	d8f6      	bhi.n	800a814 <_printf_i+0x28>
 800a826:	a101      	add	r1, pc, #4	; (adr r1, 800a82c <_printf_i+0x40>)
 800a828:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a82c:	0800a885 	.word	0x0800a885
 800a830:	0800a899 	.word	0x0800a899
 800a834:	0800a815 	.word	0x0800a815
 800a838:	0800a815 	.word	0x0800a815
 800a83c:	0800a815 	.word	0x0800a815
 800a840:	0800a815 	.word	0x0800a815
 800a844:	0800a899 	.word	0x0800a899
 800a848:	0800a815 	.word	0x0800a815
 800a84c:	0800a815 	.word	0x0800a815
 800a850:	0800a815 	.word	0x0800a815
 800a854:	0800a815 	.word	0x0800a815
 800a858:	0800a9a5 	.word	0x0800a9a5
 800a85c:	0800a8c9 	.word	0x0800a8c9
 800a860:	0800a987 	.word	0x0800a987
 800a864:	0800a815 	.word	0x0800a815
 800a868:	0800a815 	.word	0x0800a815
 800a86c:	0800a9c7 	.word	0x0800a9c7
 800a870:	0800a815 	.word	0x0800a815
 800a874:	0800a8c9 	.word	0x0800a8c9
 800a878:	0800a815 	.word	0x0800a815
 800a87c:	0800a815 	.word	0x0800a815
 800a880:	0800a98f 	.word	0x0800a98f
 800a884:	682b      	ldr	r3, [r5, #0]
 800a886:	1d1a      	adds	r2, r3, #4
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	602a      	str	r2, [r5, #0]
 800a88c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a890:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a894:	2301      	movs	r3, #1
 800a896:	e0a3      	b.n	800a9e0 <_printf_i+0x1f4>
 800a898:	6820      	ldr	r0, [r4, #0]
 800a89a:	6829      	ldr	r1, [r5, #0]
 800a89c:	0606      	lsls	r6, r0, #24
 800a89e:	f101 0304 	add.w	r3, r1, #4
 800a8a2:	d50a      	bpl.n	800a8ba <_printf_i+0xce>
 800a8a4:	680e      	ldr	r6, [r1, #0]
 800a8a6:	602b      	str	r3, [r5, #0]
 800a8a8:	2e00      	cmp	r6, #0
 800a8aa:	da03      	bge.n	800a8b4 <_printf_i+0xc8>
 800a8ac:	232d      	movs	r3, #45	; 0x2d
 800a8ae:	4276      	negs	r6, r6
 800a8b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a8b4:	485e      	ldr	r0, [pc, #376]	; (800aa30 <_printf_i+0x244>)
 800a8b6:	230a      	movs	r3, #10
 800a8b8:	e019      	b.n	800a8ee <_printf_i+0x102>
 800a8ba:	680e      	ldr	r6, [r1, #0]
 800a8bc:	602b      	str	r3, [r5, #0]
 800a8be:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a8c2:	bf18      	it	ne
 800a8c4:	b236      	sxthne	r6, r6
 800a8c6:	e7ef      	b.n	800a8a8 <_printf_i+0xbc>
 800a8c8:	682b      	ldr	r3, [r5, #0]
 800a8ca:	6820      	ldr	r0, [r4, #0]
 800a8cc:	1d19      	adds	r1, r3, #4
 800a8ce:	6029      	str	r1, [r5, #0]
 800a8d0:	0601      	lsls	r1, r0, #24
 800a8d2:	d501      	bpl.n	800a8d8 <_printf_i+0xec>
 800a8d4:	681e      	ldr	r6, [r3, #0]
 800a8d6:	e002      	b.n	800a8de <_printf_i+0xf2>
 800a8d8:	0646      	lsls	r6, r0, #25
 800a8da:	d5fb      	bpl.n	800a8d4 <_printf_i+0xe8>
 800a8dc:	881e      	ldrh	r6, [r3, #0]
 800a8de:	4854      	ldr	r0, [pc, #336]	; (800aa30 <_printf_i+0x244>)
 800a8e0:	2f6f      	cmp	r7, #111	; 0x6f
 800a8e2:	bf0c      	ite	eq
 800a8e4:	2308      	moveq	r3, #8
 800a8e6:	230a      	movne	r3, #10
 800a8e8:	2100      	movs	r1, #0
 800a8ea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a8ee:	6865      	ldr	r5, [r4, #4]
 800a8f0:	60a5      	str	r5, [r4, #8]
 800a8f2:	2d00      	cmp	r5, #0
 800a8f4:	bfa2      	ittt	ge
 800a8f6:	6821      	ldrge	r1, [r4, #0]
 800a8f8:	f021 0104 	bicge.w	r1, r1, #4
 800a8fc:	6021      	strge	r1, [r4, #0]
 800a8fe:	b90e      	cbnz	r6, 800a904 <_printf_i+0x118>
 800a900:	2d00      	cmp	r5, #0
 800a902:	d04d      	beq.n	800a9a0 <_printf_i+0x1b4>
 800a904:	4615      	mov	r5, r2
 800a906:	fbb6 f1f3 	udiv	r1, r6, r3
 800a90a:	fb03 6711 	mls	r7, r3, r1, r6
 800a90e:	5dc7      	ldrb	r7, [r0, r7]
 800a910:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a914:	4637      	mov	r7, r6
 800a916:	42bb      	cmp	r3, r7
 800a918:	460e      	mov	r6, r1
 800a91a:	d9f4      	bls.n	800a906 <_printf_i+0x11a>
 800a91c:	2b08      	cmp	r3, #8
 800a91e:	d10b      	bne.n	800a938 <_printf_i+0x14c>
 800a920:	6823      	ldr	r3, [r4, #0]
 800a922:	07de      	lsls	r6, r3, #31
 800a924:	d508      	bpl.n	800a938 <_printf_i+0x14c>
 800a926:	6923      	ldr	r3, [r4, #16]
 800a928:	6861      	ldr	r1, [r4, #4]
 800a92a:	4299      	cmp	r1, r3
 800a92c:	bfde      	ittt	le
 800a92e:	2330      	movle	r3, #48	; 0x30
 800a930:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a934:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800a938:	1b52      	subs	r2, r2, r5
 800a93a:	6122      	str	r2, [r4, #16]
 800a93c:	f8cd a000 	str.w	sl, [sp]
 800a940:	464b      	mov	r3, r9
 800a942:	aa03      	add	r2, sp, #12
 800a944:	4621      	mov	r1, r4
 800a946:	4640      	mov	r0, r8
 800a948:	f7ff fee2 	bl	800a710 <_printf_common>
 800a94c:	3001      	adds	r0, #1
 800a94e:	d14c      	bne.n	800a9ea <_printf_i+0x1fe>
 800a950:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a954:	b004      	add	sp, #16
 800a956:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a95a:	4835      	ldr	r0, [pc, #212]	; (800aa30 <_printf_i+0x244>)
 800a95c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a960:	6829      	ldr	r1, [r5, #0]
 800a962:	6823      	ldr	r3, [r4, #0]
 800a964:	f851 6b04 	ldr.w	r6, [r1], #4
 800a968:	6029      	str	r1, [r5, #0]
 800a96a:	061d      	lsls	r5, r3, #24
 800a96c:	d514      	bpl.n	800a998 <_printf_i+0x1ac>
 800a96e:	07df      	lsls	r7, r3, #31
 800a970:	bf44      	itt	mi
 800a972:	f043 0320 	orrmi.w	r3, r3, #32
 800a976:	6023      	strmi	r3, [r4, #0]
 800a978:	b91e      	cbnz	r6, 800a982 <_printf_i+0x196>
 800a97a:	6823      	ldr	r3, [r4, #0]
 800a97c:	f023 0320 	bic.w	r3, r3, #32
 800a980:	6023      	str	r3, [r4, #0]
 800a982:	2310      	movs	r3, #16
 800a984:	e7b0      	b.n	800a8e8 <_printf_i+0xfc>
 800a986:	6823      	ldr	r3, [r4, #0]
 800a988:	f043 0320 	orr.w	r3, r3, #32
 800a98c:	6023      	str	r3, [r4, #0]
 800a98e:	2378      	movs	r3, #120	; 0x78
 800a990:	4828      	ldr	r0, [pc, #160]	; (800aa34 <_printf_i+0x248>)
 800a992:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a996:	e7e3      	b.n	800a960 <_printf_i+0x174>
 800a998:	0659      	lsls	r1, r3, #25
 800a99a:	bf48      	it	mi
 800a99c:	b2b6      	uxthmi	r6, r6
 800a99e:	e7e6      	b.n	800a96e <_printf_i+0x182>
 800a9a0:	4615      	mov	r5, r2
 800a9a2:	e7bb      	b.n	800a91c <_printf_i+0x130>
 800a9a4:	682b      	ldr	r3, [r5, #0]
 800a9a6:	6826      	ldr	r6, [r4, #0]
 800a9a8:	6961      	ldr	r1, [r4, #20]
 800a9aa:	1d18      	adds	r0, r3, #4
 800a9ac:	6028      	str	r0, [r5, #0]
 800a9ae:	0635      	lsls	r5, r6, #24
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	d501      	bpl.n	800a9b8 <_printf_i+0x1cc>
 800a9b4:	6019      	str	r1, [r3, #0]
 800a9b6:	e002      	b.n	800a9be <_printf_i+0x1d2>
 800a9b8:	0670      	lsls	r0, r6, #25
 800a9ba:	d5fb      	bpl.n	800a9b4 <_printf_i+0x1c8>
 800a9bc:	8019      	strh	r1, [r3, #0]
 800a9be:	2300      	movs	r3, #0
 800a9c0:	6123      	str	r3, [r4, #16]
 800a9c2:	4615      	mov	r5, r2
 800a9c4:	e7ba      	b.n	800a93c <_printf_i+0x150>
 800a9c6:	682b      	ldr	r3, [r5, #0]
 800a9c8:	1d1a      	adds	r2, r3, #4
 800a9ca:	602a      	str	r2, [r5, #0]
 800a9cc:	681d      	ldr	r5, [r3, #0]
 800a9ce:	6862      	ldr	r2, [r4, #4]
 800a9d0:	2100      	movs	r1, #0
 800a9d2:	4628      	mov	r0, r5
 800a9d4:	f7f5 fbdc 	bl	8000190 <memchr>
 800a9d8:	b108      	cbz	r0, 800a9de <_printf_i+0x1f2>
 800a9da:	1b40      	subs	r0, r0, r5
 800a9dc:	6060      	str	r0, [r4, #4]
 800a9de:	6863      	ldr	r3, [r4, #4]
 800a9e0:	6123      	str	r3, [r4, #16]
 800a9e2:	2300      	movs	r3, #0
 800a9e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a9e8:	e7a8      	b.n	800a93c <_printf_i+0x150>
 800a9ea:	6923      	ldr	r3, [r4, #16]
 800a9ec:	462a      	mov	r2, r5
 800a9ee:	4649      	mov	r1, r9
 800a9f0:	4640      	mov	r0, r8
 800a9f2:	47d0      	blx	sl
 800a9f4:	3001      	adds	r0, #1
 800a9f6:	d0ab      	beq.n	800a950 <_printf_i+0x164>
 800a9f8:	6823      	ldr	r3, [r4, #0]
 800a9fa:	079b      	lsls	r3, r3, #30
 800a9fc:	d413      	bmi.n	800aa26 <_printf_i+0x23a>
 800a9fe:	68e0      	ldr	r0, [r4, #12]
 800aa00:	9b03      	ldr	r3, [sp, #12]
 800aa02:	4298      	cmp	r0, r3
 800aa04:	bfb8      	it	lt
 800aa06:	4618      	movlt	r0, r3
 800aa08:	e7a4      	b.n	800a954 <_printf_i+0x168>
 800aa0a:	2301      	movs	r3, #1
 800aa0c:	4632      	mov	r2, r6
 800aa0e:	4649      	mov	r1, r9
 800aa10:	4640      	mov	r0, r8
 800aa12:	47d0      	blx	sl
 800aa14:	3001      	adds	r0, #1
 800aa16:	d09b      	beq.n	800a950 <_printf_i+0x164>
 800aa18:	3501      	adds	r5, #1
 800aa1a:	68e3      	ldr	r3, [r4, #12]
 800aa1c:	9903      	ldr	r1, [sp, #12]
 800aa1e:	1a5b      	subs	r3, r3, r1
 800aa20:	42ab      	cmp	r3, r5
 800aa22:	dcf2      	bgt.n	800aa0a <_printf_i+0x21e>
 800aa24:	e7eb      	b.n	800a9fe <_printf_i+0x212>
 800aa26:	2500      	movs	r5, #0
 800aa28:	f104 0619 	add.w	r6, r4, #25
 800aa2c:	e7f5      	b.n	800aa1a <_printf_i+0x22e>
 800aa2e:	bf00      	nop
 800aa30:	0800b441 	.word	0x0800b441
 800aa34:	0800b452 	.word	0x0800b452

0800aa38 <_sbrk_r>:
 800aa38:	b538      	push	{r3, r4, r5, lr}
 800aa3a:	4d06      	ldr	r5, [pc, #24]	; (800aa54 <_sbrk_r+0x1c>)
 800aa3c:	2300      	movs	r3, #0
 800aa3e:	4604      	mov	r4, r0
 800aa40:	4608      	mov	r0, r1
 800aa42:	602b      	str	r3, [r5, #0]
 800aa44:	f7f7 fcf6 	bl	8002434 <_sbrk>
 800aa48:	1c43      	adds	r3, r0, #1
 800aa4a:	d102      	bne.n	800aa52 <_sbrk_r+0x1a>
 800aa4c:	682b      	ldr	r3, [r5, #0]
 800aa4e:	b103      	cbz	r3, 800aa52 <_sbrk_r+0x1a>
 800aa50:	6023      	str	r3, [r4, #0]
 800aa52:	bd38      	pop	{r3, r4, r5, pc}
 800aa54:	20000d60 	.word	0x20000d60

0800aa58 <__sread>:
 800aa58:	b510      	push	{r4, lr}
 800aa5a:	460c      	mov	r4, r1
 800aa5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa60:	f000 fab2 	bl	800afc8 <_read_r>
 800aa64:	2800      	cmp	r0, #0
 800aa66:	bfab      	itete	ge
 800aa68:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800aa6a:	89a3      	ldrhlt	r3, [r4, #12]
 800aa6c:	181b      	addge	r3, r3, r0
 800aa6e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800aa72:	bfac      	ite	ge
 800aa74:	6563      	strge	r3, [r4, #84]	; 0x54
 800aa76:	81a3      	strhlt	r3, [r4, #12]
 800aa78:	bd10      	pop	{r4, pc}

0800aa7a <__swrite>:
 800aa7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa7e:	461f      	mov	r7, r3
 800aa80:	898b      	ldrh	r3, [r1, #12]
 800aa82:	05db      	lsls	r3, r3, #23
 800aa84:	4605      	mov	r5, r0
 800aa86:	460c      	mov	r4, r1
 800aa88:	4616      	mov	r6, r2
 800aa8a:	d505      	bpl.n	800aa98 <__swrite+0x1e>
 800aa8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa90:	2302      	movs	r3, #2
 800aa92:	2200      	movs	r2, #0
 800aa94:	f000 f9c8 	bl	800ae28 <_lseek_r>
 800aa98:	89a3      	ldrh	r3, [r4, #12]
 800aa9a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aa9e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800aaa2:	81a3      	strh	r3, [r4, #12]
 800aaa4:	4632      	mov	r2, r6
 800aaa6:	463b      	mov	r3, r7
 800aaa8:	4628      	mov	r0, r5
 800aaaa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aaae:	f000 b869 	b.w	800ab84 <_write_r>

0800aab2 <__sseek>:
 800aab2:	b510      	push	{r4, lr}
 800aab4:	460c      	mov	r4, r1
 800aab6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aaba:	f000 f9b5 	bl	800ae28 <_lseek_r>
 800aabe:	1c43      	adds	r3, r0, #1
 800aac0:	89a3      	ldrh	r3, [r4, #12]
 800aac2:	bf15      	itete	ne
 800aac4:	6560      	strne	r0, [r4, #84]	; 0x54
 800aac6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800aaca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800aace:	81a3      	strheq	r3, [r4, #12]
 800aad0:	bf18      	it	ne
 800aad2:	81a3      	strhne	r3, [r4, #12]
 800aad4:	bd10      	pop	{r4, pc}

0800aad6 <__sclose>:
 800aad6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aada:	f000 b8d3 	b.w	800ac84 <_close_r>
	...

0800aae0 <__swbuf_r>:
 800aae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aae2:	460e      	mov	r6, r1
 800aae4:	4614      	mov	r4, r2
 800aae6:	4605      	mov	r5, r0
 800aae8:	b118      	cbz	r0, 800aaf2 <__swbuf_r+0x12>
 800aaea:	6983      	ldr	r3, [r0, #24]
 800aaec:	b90b      	cbnz	r3, 800aaf2 <__swbuf_r+0x12>
 800aaee:	f7ff fb81 	bl	800a1f4 <__sinit>
 800aaf2:	4b21      	ldr	r3, [pc, #132]	; (800ab78 <__swbuf_r+0x98>)
 800aaf4:	429c      	cmp	r4, r3
 800aaf6:	d12b      	bne.n	800ab50 <__swbuf_r+0x70>
 800aaf8:	686c      	ldr	r4, [r5, #4]
 800aafa:	69a3      	ldr	r3, [r4, #24]
 800aafc:	60a3      	str	r3, [r4, #8]
 800aafe:	89a3      	ldrh	r3, [r4, #12]
 800ab00:	071a      	lsls	r2, r3, #28
 800ab02:	d52f      	bpl.n	800ab64 <__swbuf_r+0x84>
 800ab04:	6923      	ldr	r3, [r4, #16]
 800ab06:	b36b      	cbz	r3, 800ab64 <__swbuf_r+0x84>
 800ab08:	6923      	ldr	r3, [r4, #16]
 800ab0a:	6820      	ldr	r0, [r4, #0]
 800ab0c:	1ac0      	subs	r0, r0, r3
 800ab0e:	6963      	ldr	r3, [r4, #20]
 800ab10:	b2f6      	uxtb	r6, r6
 800ab12:	4283      	cmp	r3, r0
 800ab14:	4637      	mov	r7, r6
 800ab16:	dc04      	bgt.n	800ab22 <__swbuf_r+0x42>
 800ab18:	4621      	mov	r1, r4
 800ab1a:	4628      	mov	r0, r5
 800ab1c:	f000 f948 	bl	800adb0 <_fflush_r>
 800ab20:	bb30      	cbnz	r0, 800ab70 <__swbuf_r+0x90>
 800ab22:	68a3      	ldr	r3, [r4, #8]
 800ab24:	3b01      	subs	r3, #1
 800ab26:	60a3      	str	r3, [r4, #8]
 800ab28:	6823      	ldr	r3, [r4, #0]
 800ab2a:	1c5a      	adds	r2, r3, #1
 800ab2c:	6022      	str	r2, [r4, #0]
 800ab2e:	701e      	strb	r6, [r3, #0]
 800ab30:	6963      	ldr	r3, [r4, #20]
 800ab32:	3001      	adds	r0, #1
 800ab34:	4283      	cmp	r3, r0
 800ab36:	d004      	beq.n	800ab42 <__swbuf_r+0x62>
 800ab38:	89a3      	ldrh	r3, [r4, #12]
 800ab3a:	07db      	lsls	r3, r3, #31
 800ab3c:	d506      	bpl.n	800ab4c <__swbuf_r+0x6c>
 800ab3e:	2e0a      	cmp	r6, #10
 800ab40:	d104      	bne.n	800ab4c <__swbuf_r+0x6c>
 800ab42:	4621      	mov	r1, r4
 800ab44:	4628      	mov	r0, r5
 800ab46:	f000 f933 	bl	800adb0 <_fflush_r>
 800ab4a:	b988      	cbnz	r0, 800ab70 <__swbuf_r+0x90>
 800ab4c:	4638      	mov	r0, r7
 800ab4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ab50:	4b0a      	ldr	r3, [pc, #40]	; (800ab7c <__swbuf_r+0x9c>)
 800ab52:	429c      	cmp	r4, r3
 800ab54:	d101      	bne.n	800ab5a <__swbuf_r+0x7a>
 800ab56:	68ac      	ldr	r4, [r5, #8]
 800ab58:	e7cf      	b.n	800aafa <__swbuf_r+0x1a>
 800ab5a:	4b09      	ldr	r3, [pc, #36]	; (800ab80 <__swbuf_r+0xa0>)
 800ab5c:	429c      	cmp	r4, r3
 800ab5e:	bf08      	it	eq
 800ab60:	68ec      	ldreq	r4, [r5, #12]
 800ab62:	e7ca      	b.n	800aafa <__swbuf_r+0x1a>
 800ab64:	4621      	mov	r1, r4
 800ab66:	4628      	mov	r0, r5
 800ab68:	f000 f81e 	bl	800aba8 <__swsetup_r>
 800ab6c:	2800      	cmp	r0, #0
 800ab6e:	d0cb      	beq.n	800ab08 <__swbuf_r+0x28>
 800ab70:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800ab74:	e7ea      	b.n	800ab4c <__swbuf_r+0x6c>
 800ab76:	bf00      	nop
 800ab78:	0800b3f0 	.word	0x0800b3f0
 800ab7c:	0800b410 	.word	0x0800b410
 800ab80:	0800b3d0 	.word	0x0800b3d0

0800ab84 <_write_r>:
 800ab84:	b538      	push	{r3, r4, r5, lr}
 800ab86:	4d07      	ldr	r5, [pc, #28]	; (800aba4 <_write_r+0x20>)
 800ab88:	4604      	mov	r4, r0
 800ab8a:	4608      	mov	r0, r1
 800ab8c:	4611      	mov	r1, r2
 800ab8e:	2200      	movs	r2, #0
 800ab90:	602a      	str	r2, [r5, #0]
 800ab92:	461a      	mov	r2, r3
 800ab94:	f7f7 fbfd 	bl	8002392 <_write>
 800ab98:	1c43      	adds	r3, r0, #1
 800ab9a:	d102      	bne.n	800aba2 <_write_r+0x1e>
 800ab9c:	682b      	ldr	r3, [r5, #0]
 800ab9e:	b103      	cbz	r3, 800aba2 <_write_r+0x1e>
 800aba0:	6023      	str	r3, [r4, #0]
 800aba2:	bd38      	pop	{r3, r4, r5, pc}
 800aba4:	20000d60 	.word	0x20000d60

0800aba8 <__swsetup_r>:
 800aba8:	4b32      	ldr	r3, [pc, #200]	; (800ac74 <__swsetup_r+0xcc>)
 800abaa:	b570      	push	{r4, r5, r6, lr}
 800abac:	681d      	ldr	r5, [r3, #0]
 800abae:	4606      	mov	r6, r0
 800abb0:	460c      	mov	r4, r1
 800abb2:	b125      	cbz	r5, 800abbe <__swsetup_r+0x16>
 800abb4:	69ab      	ldr	r3, [r5, #24]
 800abb6:	b913      	cbnz	r3, 800abbe <__swsetup_r+0x16>
 800abb8:	4628      	mov	r0, r5
 800abba:	f7ff fb1b 	bl	800a1f4 <__sinit>
 800abbe:	4b2e      	ldr	r3, [pc, #184]	; (800ac78 <__swsetup_r+0xd0>)
 800abc0:	429c      	cmp	r4, r3
 800abc2:	d10f      	bne.n	800abe4 <__swsetup_r+0x3c>
 800abc4:	686c      	ldr	r4, [r5, #4]
 800abc6:	89a3      	ldrh	r3, [r4, #12]
 800abc8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800abcc:	0719      	lsls	r1, r3, #28
 800abce:	d42c      	bmi.n	800ac2a <__swsetup_r+0x82>
 800abd0:	06dd      	lsls	r5, r3, #27
 800abd2:	d411      	bmi.n	800abf8 <__swsetup_r+0x50>
 800abd4:	2309      	movs	r3, #9
 800abd6:	6033      	str	r3, [r6, #0]
 800abd8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800abdc:	81a3      	strh	r3, [r4, #12]
 800abde:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800abe2:	e03e      	b.n	800ac62 <__swsetup_r+0xba>
 800abe4:	4b25      	ldr	r3, [pc, #148]	; (800ac7c <__swsetup_r+0xd4>)
 800abe6:	429c      	cmp	r4, r3
 800abe8:	d101      	bne.n	800abee <__swsetup_r+0x46>
 800abea:	68ac      	ldr	r4, [r5, #8]
 800abec:	e7eb      	b.n	800abc6 <__swsetup_r+0x1e>
 800abee:	4b24      	ldr	r3, [pc, #144]	; (800ac80 <__swsetup_r+0xd8>)
 800abf0:	429c      	cmp	r4, r3
 800abf2:	bf08      	it	eq
 800abf4:	68ec      	ldreq	r4, [r5, #12]
 800abf6:	e7e6      	b.n	800abc6 <__swsetup_r+0x1e>
 800abf8:	0758      	lsls	r0, r3, #29
 800abfa:	d512      	bpl.n	800ac22 <__swsetup_r+0x7a>
 800abfc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800abfe:	b141      	cbz	r1, 800ac12 <__swsetup_r+0x6a>
 800ac00:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ac04:	4299      	cmp	r1, r3
 800ac06:	d002      	beq.n	800ac0e <__swsetup_r+0x66>
 800ac08:	4630      	mov	r0, r6
 800ac0a:	f000 f991 	bl	800af30 <_free_r>
 800ac0e:	2300      	movs	r3, #0
 800ac10:	6363      	str	r3, [r4, #52]	; 0x34
 800ac12:	89a3      	ldrh	r3, [r4, #12]
 800ac14:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ac18:	81a3      	strh	r3, [r4, #12]
 800ac1a:	2300      	movs	r3, #0
 800ac1c:	6063      	str	r3, [r4, #4]
 800ac1e:	6923      	ldr	r3, [r4, #16]
 800ac20:	6023      	str	r3, [r4, #0]
 800ac22:	89a3      	ldrh	r3, [r4, #12]
 800ac24:	f043 0308 	orr.w	r3, r3, #8
 800ac28:	81a3      	strh	r3, [r4, #12]
 800ac2a:	6923      	ldr	r3, [r4, #16]
 800ac2c:	b94b      	cbnz	r3, 800ac42 <__swsetup_r+0x9a>
 800ac2e:	89a3      	ldrh	r3, [r4, #12]
 800ac30:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ac34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ac38:	d003      	beq.n	800ac42 <__swsetup_r+0x9a>
 800ac3a:	4621      	mov	r1, r4
 800ac3c:	4630      	mov	r0, r6
 800ac3e:	f000 f92b 	bl	800ae98 <__smakebuf_r>
 800ac42:	89a0      	ldrh	r0, [r4, #12]
 800ac44:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ac48:	f010 0301 	ands.w	r3, r0, #1
 800ac4c:	d00a      	beq.n	800ac64 <__swsetup_r+0xbc>
 800ac4e:	2300      	movs	r3, #0
 800ac50:	60a3      	str	r3, [r4, #8]
 800ac52:	6963      	ldr	r3, [r4, #20]
 800ac54:	425b      	negs	r3, r3
 800ac56:	61a3      	str	r3, [r4, #24]
 800ac58:	6923      	ldr	r3, [r4, #16]
 800ac5a:	b943      	cbnz	r3, 800ac6e <__swsetup_r+0xc6>
 800ac5c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ac60:	d1ba      	bne.n	800abd8 <__swsetup_r+0x30>
 800ac62:	bd70      	pop	{r4, r5, r6, pc}
 800ac64:	0781      	lsls	r1, r0, #30
 800ac66:	bf58      	it	pl
 800ac68:	6963      	ldrpl	r3, [r4, #20]
 800ac6a:	60a3      	str	r3, [r4, #8]
 800ac6c:	e7f4      	b.n	800ac58 <__swsetup_r+0xb0>
 800ac6e:	2000      	movs	r0, #0
 800ac70:	e7f7      	b.n	800ac62 <__swsetup_r+0xba>
 800ac72:	bf00      	nop
 800ac74:	20000028 	.word	0x20000028
 800ac78:	0800b3f0 	.word	0x0800b3f0
 800ac7c:	0800b410 	.word	0x0800b410
 800ac80:	0800b3d0 	.word	0x0800b3d0

0800ac84 <_close_r>:
 800ac84:	b538      	push	{r3, r4, r5, lr}
 800ac86:	4d06      	ldr	r5, [pc, #24]	; (800aca0 <_close_r+0x1c>)
 800ac88:	2300      	movs	r3, #0
 800ac8a:	4604      	mov	r4, r0
 800ac8c:	4608      	mov	r0, r1
 800ac8e:	602b      	str	r3, [r5, #0]
 800ac90:	f7f7 fb9b 	bl	80023ca <_close>
 800ac94:	1c43      	adds	r3, r0, #1
 800ac96:	d102      	bne.n	800ac9e <_close_r+0x1a>
 800ac98:	682b      	ldr	r3, [r5, #0]
 800ac9a:	b103      	cbz	r3, 800ac9e <_close_r+0x1a>
 800ac9c:	6023      	str	r3, [r4, #0]
 800ac9e:	bd38      	pop	{r3, r4, r5, pc}
 800aca0:	20000d60 	.word	0x20000d60

0800aca4 <__sflush_r>:
 800aca4:	898a      	ldrh	r2, [r1, #12]
 800aca6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800acaa:	4605      	mov	r5, r0
 800acac:	0710      	lsls	r0, r2, #28
 800acae:	460c      	mov	r4, r1
 800acb0:	d458      	bmi.n	800ad64 <__sflush_r+0xc0>
 800acb2:	684b      	ldr	r3, [r1, #4]
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	dc05      	bgt.n	800acc4 <__sflush_r+0x20>
 800acb8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800acba:	2b00      	cmp	r3, #0
 800acbc:	dc02      	bgt.n	800acc4 <__sflush_r+0x20>
 800acbe:	2000      	movs	r0, #0
 800acc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800acc4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800acc6:	2e00      	cmp	r6, #0
 800acc8:	d0f9      	beq.n	800acbe <__sflush_r+0x1a>
 800acca:	2300      	movs	r3, #0
 800accc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800acd0:	682f      	ldr	r7, [r5, #0]
 800acd2:	602b      	str	r3, [r5, #0]
 800acd4:	d032      	beq.n	800ad3c <__sflush_r+0x98>
 800acd6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800acd8:	89a3      	ldrh	r3, [r4, #12]
 800acda:	075a      	lsls	r2, r3, #29
 800acdc:	d505      	bpl.n	800acea <__sflush_r+0x46>
 800acde:	6863      	ldr	r3, [r4, #4]
 800ace0:	1ac0      	subs	r0, r0, r3
 800ace2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ace4:	b10b      	cbz	r3, 800acea <__sflush_r+0x46>
 800ace6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ace8:	1ac0      	subs	r0, r0, r3
 800acea:	2300      	movs	r3, #0
 800acec:	4602      	mov	r2, r0
 800acee:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800acf0:	6a21      	ldr	r1, [r4, #32]
 800acf2:	4628      	mov	r0, r5
 800acf4:	47b0      	blx	r6
 800acf6:	1c43      	adds	r3, r0, #1
 800acf8:	89a3      	ldrh	r3, [r4, #12]
 800acfa:	d106      	bne.n	800ad0a <__sflush_r+0x66>
 800acfc:	6829      	ldr	r1, [r5, #0]
 800acfe:	291d      	cmp	r1, #29
 800ad00:	d82c      	bhi.n	800ad5c <__sflush_r+0xb8>
 800ad02:	4a2a      	ldr	r2, [pc, #168]	; (800adac <__sflush_r+0x108>)
 800ad04:	40ca      	lsrs	r2, r1
 800ad06:	07d6      	lsls	r6, r2, #31
 800ad08:	d528      	bpl.n	800ad5c <__sflush_r+0xb8>
 800ad0a:	2200      	movs	r2, #0
 800ad0c:	6062      	str	r2, [r4, #4]
 800ad0e:	04d9      	lsls	r1, r3, #19
 800ad10:	6922      	ldr	r2, [r4, #16]
 800ad12:	6022      	str	r2, [r4, #0]
 800ad14:	d504      	bpl.n	800ad20 <__sflush_r+0x7c>
 800ad16:	1c42      	adds	r2, r0, #1
 800ad18:	d101      	bne.n	800ad1e <__sflush_r+0x7a>
 800ad1a:	682b      	ldr	r3, [r5, #0]
 800ad1c:	b903      	cbnz	r3, 800ad20 <__sflush_r+0x7c>
 800ad1e:	6560      	str	r0, [r4, #84]	; 0x54
 800ad20:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ad22:	602f      	str	r7, [r5, #0]
 800ad24:	2900      	cmp	r1, #0
 800ad26:	d0ca      	beq.n	800acbe <__sflush_r+0x1a>
 800ad28:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ad2c:	4299      	cmp	r1, r3
 800ad2e:	d002      	beq.n	800ad36 <__sflush_r+0x92>
 800ad30:	4628      	mov	r0, r5
 800ad32:	f000 f8fd 	bl	800af30 <_free_r>
 800ad36:	2000      	movs	r0, #0
 800ad38:	6360      	str	r0, [r4, #52]	; 0x34
 800ad3a:	e7c1      	b.n	800acc0 <__sflush_r+0x1c>
 800ad3c:	6a21      	ldr	r1, [r4, #32]
 800ad3e:	2301      	movs	r3, #1
 800ad40:	4628      	mov	r0, r5
 800ad42:	47b0      	blx	r6
 800ad44:	1c41      	adds	r1, r0, #1
 800ad46:	d1c7      	bne.n	800acd8 <__sflush_r+0x34>
 800ad48:	682b      	ldr	r3, [r5, #0]
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d0c4      	beq.n	800acd8 <__sflush_r+0x34>
 800ad4e:	2b1d      	cmp	r3, #29
 800ad50:	d001      	beq.n	800ad56 <__sflush_r+0xb2>
 800ad52:	2b16      	cmp	r3, #22
 800ad54:	d101      	bne.n	800ad5a <__sflush_r+0xb6>
 800ad56:	602f      	str	r7, [r5, #0]
 800ad58:	e7b1      	b.n	800acbe <__sflush_r+0x1a>
 800ad5a:	89a3      	ldrh	r3, [r4, #12]
 800ad5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad60:	81a3      	strh	r3, [r4, #12]
 800ad62:	e7ad      	b.n	800acc0 <__sflush_r+0x1c>
 800ad64:	690f      	ldr	r7, [r1, #16]
 800ad66:	2f00      	cmp	r7, #0
 800ad68:	d0a9      	beq.n	800acbe <__sflush_r+0x1a>
 800ad6a:	0793      	lsls	r3, r2, #30
 800ad6c:	680e      	ldr	r6, [r1, #0]
 800ad6e:	bf08      	it	eq
 800ad70:	694b      	ldreq	r3, [r1, #20]
 800ad72:	600f      	str	r7, [r1, #0]
 800ad74:	bf18      	it	ne
 800ad76:	2300      	movne	r3, #0
 800ad78:	eba6 0807 	sub.w	r8, r6, r7
 800ad7c:	608b      	str	r3, [r1, #8]
 800ad7e:	f1b8 0f00 	cmp.w	r8, #0
 800ad82:	dd9c      	ble.n	800acbe <__sflush_r+0x1a>
 800ad84:	6a21      	ldr	r1, [r4, #32]
 800ad86:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ad88:	4643      	mov	r3, r8
 800ad8a:	463a      	mov	r2, r7
 800ad8c:	4628      	mov	r0, r5
 800ad8e:	47b0      	blx	r6
 800ad90:	2800      	cmp	r0, #0
 800ad92:	dc06      	bgt.n	800ada2 <__sflush_r+0xfe>
 800ad94:	89a3      	ldrh	r3, [r4, #12]
 800ad96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad9a:	81a3      	strh	r3, [r4, #12]
 800ad9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ada0:	e78e      	b.n	800acc0 <__sflush_r+0x1c>
 800ada2:	4407      	add	r7, r0
 800ada4:	eba8 0800 	sub.w	r8, r8, r0
 800ada8:	e7e9      	b.n	800ad7e <__sflush_r+0xda>
 800adaa:	bf00      	nop
 800adac:	20400001 	.word	0x20400001

0800adb0 <_fflush_r>:
 800adb0:	b538      	push	{r3, r4, r5, lr}
 800adb2:	690b      	ldr	r3, [r1, #16]
 800adb4:	4605      	mov	r5, r0
 800adb6:	460c      	mov	r4, r1
 800adb8:	b913      	cbnz	r3, 800adc0 <_fflush_r+0x10>
 800adba:	2500      	movs	r5, #0
 800adbc:	4628      	mov	r0, r5
 800adbe:	bd38      	pop	{r3, r4, r5, pc}
 800adc0:	b118      	cbz	r0, 800adca <_fflush_r+0x1a>
 800adc2:	6983      	ldr	r3, [r0, #24]
 800adc4:	b90b      	cbnz	r3, 800adca <_fflush_r+0x1a>
 800adc6:	f7ff fa15 	bl	800a1f4 <__sinit>
 800adca:	4b14      	ldr	r3, [pc, #80]	; (800ae1c <_fflush_r+0x6c>)
 800adcc:	429c      	cmp	r4, r3
 800adce:	d11b      	bne.n	800ae08 <_fflush_r+0x58>
 800add0:	686c      	ldr	r4, [r5, #4]
 800add2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800add6:	2b00      	cmp	r3, #0
 800add8:	d0ef      	beq.n	800adba <_fflush_r+0xa>
 800adda:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800addc:	07d0      	lsls	r0, r2, #31
 800adde:	d404      	bmi.n	800adea <_fflush_r+0x3a>
 800ade0:	0599      	lsls	r1, r3, #22
 800ade2:	d402      	bmi.n	800adea <_fflush_r+0x3a>
 800ade4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ade6:	f7ff faa3 	bl	800a330 <__retarget_lock_acquire_recursive>
 800adea:	4628      	mov	r0, r5
 800adec:	4621      	mov	r1, r4
 800adee:	f7ff ff59 	bl	800aca4 <__sflush_r>
 800adf2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800adf4:	07da      	lsls	r2, r3, #31
 800adf6:	4605      	mov	r5, r0
 800adf8:	d4e0      	bmi.n	800adbc <_fflush_r+0xc>
 800adfa:	89a3      	ldrh	r3, [r4, #12]
 800adfc:	059b      	lsls	r3, r3, #22
 800adfe:	d4dd      	bmi.n	800adbc <_fflush_r+0xc>
 800ae00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ae02:	f7ff fa96 	bl	800a332 <__retarget_lock_release_recursive>
 800ae06:	e7d9      	b.n	800adbc <_fflush_r+0xc>
 800ae08:	4b05      	ldr	r3, [pc, #20]	; (800ae20 <_fflush_r+0x70>)
 800ae0a:	429c      	cmp	r4, r3
 800ae0c:	d101      	bne.n	800ae12 <_fflush_r+0x62>
 800ae0e:	68ac      	ldr	r4, [r5, #8]
 800ae10:	e7df      	b.n	800add2 <_fflush_r+0x22>
 800ae12:	4b04      	ldr	r3, [pc, #16]	; (800ae24 <_fflush_r+0x74>)
 800ae14:	429c      	cmp	r4, r3
 800ae16:	bf08      	it	eq
 800ae18:	68ec      	ldreq	r4, [r5, #12]
 800ae1a:	e7da      	b.n	800add2 <_fflush_r+0x22>
 800ae1c:	0800b3f0 	.word	0x0800b3f0
 800ae20:	0800b410 	.word	0x0800b410
 800ae24:	0800b3d0 	.word	0x0800b3d0

0800ae28 <_lseek_r>:
 800ae28:	b538      	push	{r3, r4, r5, lr}
 800ae2a:	4d07      	ldr	r5, [pc, #28]	; (800ae48 <_lseek_r+0x20>)
 800ae2c:	4604      	mov	r4, r0
 800ae2e:	4608      	mov	r0, r1
 800ae30:	4611      	mov	r1, r2
 800ae32:	2200      	movs	r2, #0
 800ae34:	602a      	str	r2, [r5, #0]
 800ae36:	461a      	mov	r2, r3
 800ae38:	f7f7 faee 	bl	8002418 <_lseek>
 800ae3c:	1c43      	adds	r3, r0, #1
 800ae3e:	d102      	bne.n	800ae46 <_lseek_r+0x1e>
 800ae40:	682b      	ldr	r3, [r5, #0]
 800ae42:	b103      	cbz	r3, 800ae46 <_lseek_r+0x1e>
 800ae44:	6023      	str	r3, [r4, #0]
 800ae46:	bd38      	pop	{r3, r4, r5, pc}
 800ae48:	20000d60 	.word	0x20000d60

0800ae4c <__swhatbuf_r>:
 800ae4c:	b570      	push	{r4, r5, r6, lr}
 800ae4e:	460e      	mov	r6, r1
 800ae50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae54:	2900      	cmp	r1, #0
 800ae56:	b096      	sub	sp, #88	; 0x58
 800ae58:	4614      	mov	r4, r2
 800ae5a:	461d      	mov	r5, r3
 800ae5c:	da08      	bge.n	800ae70 <__swhatbuf_r+0x24>
 800ae5e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ae62:	2200      	movs	r2, #0
 800ae64:	602a      	str	r2, [r5, #0]
 800ae66:	061a      	lsls	r2, r3, #24
 800ae68:	d410      	bmi.n	800ae8c <__swhatbuf_r+0x40>
 800ae6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ae6e:	e00e      	b.n	800ae8e <__swhatbuf_r+0x42>
 800ae70:	466a      	mov	r2, sp
 800ae72:	f000 f8bb 	bl	800afec <_fstat_r>
 800ae76:	2800      	cmp	r0, #0
 800ae78:	dbf1      	blt.n	800ae5e <__swhatbuf_r+0x12>
 800ae7a:	9a01      	ldr	r2, [sp, #4]
 800ae7c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ae80:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ae84:	425a      	negs	r2, r3
 800ae86:	415a      	adcs	r2, r3
 800ae88:	602a      	str	r2, [r5, #0]
 800ae8a:	e7ee      	b.n	800ae6a <__swhatbuf_r+0x1e>
 800ae8c:	2340      	movs	r3, #64	; 0x40
 800ae8e:	2000      	movs	r0, #0
 800ae90:	6023      	str	r3, [r4, #0]
 800ae92:	b016      	add	sp, #88	; 0x58
 800ae94:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ae98 <__smakebuf_r>:
 800ae98:	898b      	ldrh	r3, [r1, #12]
 800ae9a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ae9c:	079d      	lsls	r5, r3, #30
 800ae9e:	4606      	mov	r6, r0
 800aea0:	460c      	mov	r4, r1
 800aea2:	d507      	bpl.n	800aeb4 <__smakebuf_r+0x1c>
 800aea4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800aea8:	6023      	str	r3, [r4, #0]
 800aeaa:	6123      	str	r3, [r4, #16]
 800aeac:	2301      	movs	r3, #1
 800aeae:	6163      	str	r3, [r4, #20]
 800aeb0:	b002      	add	sp, #8
 800aeb2:	bd70      	pop	{r4, r5, r6, pc}
 800aeb4:	ab01      	add	r3, sp, #4
 800aeb6:	466a      	mov	r2, sp
 800aeb8:	f7ff ffc8 	bl	800ae4c <__swhatbuf_r>
 800aebc:	9900      	ldr	r1, [sp, #0]
 800aebe:	4605      	mov	r5, r0
 800aec0:	4630      	mov	r0, r6
 800aec2:	f7ff fa57 	bl	800a374 <_malloc_r>
 800aec6:	b948      	cbnz	r0, 800aedc <__smakebuf_r+0x44>
 800aec8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aecc:	059a      	lsls	r2, r3, #22
 800aece:	d4ef      	bmi.n	800aeb0 <__smakebuf_r+0x18>
 800aed0:	f023 0303 	bic.w	r3, r3, #3
 800aed4:	f043 0302 	orr.w	r3, r3, #2
 800aed8:	81a3      	strh	r3, [r4, #12]
 800aeda:	e7e3      	b.n	800aea4 <__smakebuf_r+0xc>
 800aedc:	4b0d      	ldr	r3, [pc, #52]	; (800af14 <__smakebuf_r+0x7c>)
 800aede:	62b3      	str	r3, [r6, #40]	; 0x28
 800aee0:	89a3      	ldrh	r3, [r4, #12]
 800aee2:	6020      	str	r0, [r4, #0]
 800aee4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aee8:	81a3      	strh	r3, [r4, #12]
 800aeea:	9b00      	ldr	r3, [sp, #0]
 800aeec:	6163      	str	r3, [r4, #20]
 800aeee:	9b01      	ldr	r3, [sp, #4]
 800aef0:	6120      	str	r0, [r4, #16]
 800aef2:	b15b      	cbz	r3, 800af0c <__smakebuf_r+0x74>
 800aef4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aef8:	4630      	mov	r0, r6
 800aefa:	f000 f889 	bl	800b010 <_isatty_r>
 800aefe:	b128      	cbz	r0, 800af0c <__smakebuf_r+0x74>
 800af00:	89a3      	ldrh	r3, [r4, #12]
 800af02:	f023 0303 	bic.w	r3, r3, #3
 800af06:	f043 0301 	orr.w	r3, r3, #1
 800af0a:	81a3      	strh	r3, [r4, #12]
 800af0c:	89a0      	ldrh	r0, [r4, #12]
 800af0e:	4305      	orrs	r5, r0
 800af10:	81a5      	strh	r5, [r4, #12]
 800af12:	e7cd      	b.n	800aeb0 <__smakebuf_r+0x18>
 800af14:	0800a18d 	.word	0x0800a18d

0800af18 <__malloc_lock>:
 800af18:	4801      	ldr	r0, [pc, #4]	; (800af20 <__malloc_lock+0x8>)
 800af1a:	f7ff ba09 	b.w	800a330 <__retarget_lock_acquire_recursive>
 800af1e:	bf00      	nop
 800af20:	20000d54 	.word	0x20000d54

0800af24 <__malloc_unlock>:
 800af24:	4801      	ldr	r0, [pc, #4]	; (800af2c <__malloc_unlock+0x8>)
 800af26:	f7ff ba04 	b.w	800a332 <__retarget_lock_release_recursive>
 800af2a:	bf00      	nop
 800af2c:	20000d54 	.word	0x20000d54

0800af30 <_free_r>:
 800af30:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800af32:	2900      	cmp	r1, #0
 800af34:	d044      	beq.n	800afc0 <_free_r+0x90>
 800af36:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800af3a:	9001      	str	r0, [sp, #4]
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	f1a1 0404 	sub.w	r4, r1, #4
 800af42:	bfb8      	it	lt
 800af44:	18e4      	addlt	r4, r4, r3
 800af46:	f7ff ffe7 	bl	800af18 <__malloc_lock>
 800af4a:	4a1e      	ldr	r2, [pc, #120]	; (800afc4 <_free_r+0x94>)
 800af4c:	9801      	ldr	r0, [sp, #4]
 800af4e:	6813      	ldr	r3, [r2, #0]
 800af50:	b933      	cbnz	r3, 800af60 <_free_r+0x30>
 800af52:	6063      	str	r3, [r4, #4]
 800af54:	6014      	str	r4, [r2, #0]
 800af56:	b003      	add	sp, #12
 800af58:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800af5c:	f7ff bfe2 	b.w	800af24 <__malloc_unlock>
 800af60:	42a3      	cmp	r3, r4
 800af62:	d908      	bls.n	800af76 <_free_r+0x46>
 800af64:	6825      	ldr	r5, [r4, #0]
 800af66:	1961      	adds	r1, r4, r5
 800af68:	428b      	cmp	r3, r1
 800af6a:	bf01      	itttt	eq
 800af6c:	6819      	ldreq	r1, [r3, #0]
 800af6e:	685b      	ldreq	r3, [r3, #4]
 800af70:	1949      	addeq	r1, r1, r5
 800af72:	6021      	streq	r1, [r4, #0]
 800af74:	e7ed      	b.n	800af52 <_free_r+0x22>
 800af76:	461a      	mov	r2, r3
 800af78:	685b      	ldr	r3, [r3, #4]
 800af7a:	b10b      	cbz	r3, 800af80 <_free_r+0x50>
 800af7c:	42a3      	cmp	r3, r4
 800af7e:	d9fa      	bls.n	800af76 <_free_r+0x46>
 800af80:	6811      	ldr	r1, [r2, #0]
 800af82:	1855      	adds	r5, r2, r1
 800af84:	42a5      	cmp	r5, r4
 800af86:	d10b      	bne.n	800afa0 <_free_r+0x70>
 800af88:	6824      	ldr	r4, [r4, #0]
 800af8a:	4421      	add	r1, r4
 800af8c:	1854      	adds	r4, r2, r1
 800af8e:	42a3      	cmp	r3, r4
 800af90:	6011      	str	r1, [r2, #0]
 800af92:	d1e0      	bne.n	800af56 <_free_r+0x26>
 800af94:	681c      	ldr	r4, [r3, #0]
 800af96:	685b      	ldr	r3, [r3, #4]
 800af98:	6053      	str	r3, [r2, #4]
 800af9a:	4421      	add	r1, r4
 800af9c:	6011      	str	r1, [r2, #0]
 800af9e:	e7da      	b.n	800af56 <_free_r+0x26>
 800afa0:	d902      	bls.n	800afa8 <_free_r+0x78>
 800afa2:	230c      	movs	r3, #12
 800afa4:	6003      	str	r3, [r0, #0]
 800afa6:	e7d6      	b.n	800af56 <_free_r+0x26>
 800afa8:	6825      	ldr	r5, [r4, #0]
 800afaa:	1961      	adds	r1, r4, r5
 800afac:	428b      	cmp	r3, r1
 800afae:	bf04      	itt	eq
 800afb0:	6819      	ldreq	r1, [r3, #0]
 800afb2:	685b      	ldreq	r3, [r3, #4]
 800afb4:	6063      	str	r3, [r4, #4]
 800afb6:	bf04      	itt	eq
 800afb8:	1949      	addeq	r1, r1, r5
 800afba:	6021      	streq	r1, [r4, #0]
 800afbc:	6054      	str	r4, [r2, #4]
 800afbe:	e7ca      	b.n	800af56 <_free_r+0x26>
 800afc0:	b003      	add	sp, #12
 800afc2:	bd30      	pop	{r4, r5, pc}
 800afc4:	20000d58 	.word	0x20000d58

0800afc8 <_read_r>:
 800afc8:	b538      	push	{r3, r4, r5, lr}
 800afca:	4d07      	ldr	r5, [pc, #28]	; (800afe8 <_read_r+0x20>)
 800afcc:	4604      	mov	r4, r0
 800afce:	4608      	mov	r0, r1
 800afd0:	4611      	mov	r1, r2
 800afd2:	2200      	movs	r2, #0
 800afd4:	602a      	str	r2, [r5, #0]
 800afd6:	461a      	mov	r2, r3
 800afd8:	f7f7 f9be 	bl	8002358 <_read>
 800afdc:	1c43      	adds	r3, r0, #1
 800afde:	d102      	bne.n	800afe6 <_read_r+0x1e>
 800afe0:	682b      	ldr	r3, [r5, #0]
 800afe2:	b103      	cbz	r3, 800afe6 <_read_r+0x1e>
 800afe4:	6023      	str	r3, [r4, #0]
 800afe6:	bd38      	pop	{r3, r4, r5, pc}
 800afe8:	20000d60 	.word	0x20000d60

0800afec <_fstat_r>:
 800afec:	b538      	push	{r3, r4, r5, lr}
 800afee:	4d07      	ldr	r5, [pc, #28]	; (800b00c <_fstat_r+0x20>)
 800aff0:	2300      	movs	r3, #0
 800aff2:	4604      	mov	r4, r0
 800aff4:	4608      	mov	r0, r1
 800aff6:	4611      	mov	r1, r2
 800aff8:	602b      	str	r3, [r5, #0]
 800affa:	f7f7 f9f2 	bl	80023e2 <_fstat>
 800affe:	1c43      	adds	r3, r0, #1
 800b000:	d102      	bne.n	800b008 <_fstat_r+0x1c>
 800b002:	682b      	ldr	r3, [r5, #0]
 800b004:	b103      	cbz	r3, 800b008 <_fstat_r+0x1c>
 800b006:	6023      	str	r3, [r4, #0]
 800b008:	bd38      	pop	{r3, r4, r5, pc}
 800b00a:	bf00      	nop
 800b00c:	20000d60 	.word	0x20000d60

0800b010 <_isatty_r>:
 800b010:	b538      	push	{r3, r4, r5, lr}
 800b012:	4d06      	ldr	r5, [pc, #24]	; (800b02c <_isatty_r+0x1c>)
 800b014:	2300      	movs	r3, #0
 800b016:	4604      	mov	r4, r0
 800b018:	4608      	mov	r0, r1
 800b01a:	602b      	str	r3, [r5, #0]
 800b01c:	f7f7 f9f1 	bl	8002402 <_isatty>
 800b020:	1c43      	adds	r3, r0, #1
 800b022:	d102      	bne.n	800b02a <_isatty_r+0x1a>
 800b024:	682b      	ldr	r3, [r5, #0]
 800b026:	b103      	cbz	r3, 800b02a <_isatty_r+0x1a>
 800b028:	6023      	str	r3, [r4, #0]
 800b02a:	bd38      	pop	{r3, r4, r5, pc}
 800b02c:	20000d60 	.word	0x20000d60

0800b030 <_init>:
 800b030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b032:	bf00      	nop
 800b034:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b036:	bc08      	pop	{r3}
 800b038:	469e      	mov	lr, r3
 800b03a:	4770      	bx	lr

0800b03c <_fini>:
 800b03c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b03e:	bf00      	nop
 800b040:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b042:	bc08      	pop	{r3}
 800b044:	469e      	mov	lr, r3
 800b046:	4770      	bx	lr
