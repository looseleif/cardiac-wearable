
AWEAR_proj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009538  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000055c  080096c8  080096c8  000196c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009c24  08009c24  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08009c24  08009c24  00019c24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009c2c  08009c2c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009c2c  08009c2c  00019c2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009c30  08009c30  00019c30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08009c34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009a0  200001dc  08009e10  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000b7c  08009e10  00020b7c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000134b4  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002897  00000000  00000000  000336c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010f0  00000000  00000000  00035f58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fe8  00000000  00000000  00037048  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023d85  00000000  00000000  00038030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013f93  00000000  00000000  0005bdb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d48f8  00000000  00000000  0006fd48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00144640  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000057f4  00000000  00000000  00144690  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080096b0 	.word	0x080096b0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	080096b0 	.word	0x080096b0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bbc:	f000 b974 	b.w	8000ea8 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468e      	mov	lr, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14d      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4694      	mov	ip, r2
 8000bea:	d969      	bls.n	8000cc0 <__udivmoddi4+0xe8>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b152      	cbz	r2, 8000c08 <__udivmoddi4+0x30>
 8000bf2:	fa01 f302 	lsl.w	r3, r1, r2
 8000bf6:	f1c2 0120 	rsb	r1, r2, #32
 8000bfa:	fa20 f101 	lsr.w	r1, r0, r1
 8000bfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c02:	ea41 0e03 	orr.w	lr, r1, r3
 8000c06:	4094      	lsls	r4, r2
 8000c08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c0c:	0c21      	lsrs	r1, r4, #16
 8000c0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c12:	fa1f f78c 	uxth.w	r7, ip
 8000c16:	fb08 e316 	mls	r3, r8, r6, lr
 8000c1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c1e:	fb06 f107 	mul.w	r1, r6, r7
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c2e:	f080 811f 	bcs.w	8000e70 <__udivmoddi4+0x298>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 811c 	bls.w	8000e70 <__udivmoddi4+0x298>
 8000c38:	3e02      	subs	r6, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a5b      	subs	r3, r3, r1
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c44:	fb08 3310 	mls	r3, r8, r0, r3
 8000c48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c4c:	fb00 f707 	mul.w	r7, r0, r7
 8000c50:	42a7      	cmp	r7, r4
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x92>
 8000c54:	eb1c 0404 	adds.w	r4, ip, r4
 8000c58:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c5c:	f080 810a 	bcs.w	8000e74 <__udivmoddi4+0x29c>
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	f240 8107 	bls.w	8000e74 <__udivmoddi4+0x29c>
 8000c66:	4464      	add	r4, ip
 8000c68:	3802      	subs	r0, #2
 8000c6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c6e:	1be4      	subs	r4, r4, r7
 8000c70:	2600      	movs	r6, #0
 8000c72:	b11d      	cbz	r5, 8000c7c <__udivmoddi4+0xa4>
 8000c74:	40d4      	lsrs	r4, r2
 8000c76:	2300      	movs	r3, #0
 8000c78:	e9c5 4300 	strd	r4, r3, [r5]
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d909      	bls.n	8000c9a <__udivmoddi4+0xc2>
 8000c86:	2d00      	cmp	r5, #0
 8000c88:	f000 80ef 	beq.w	8000e6a <__udivmoddi4+0x292>
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c92:	4630      	mov	r0, r6
 8000c94:	4631      	mov	r1, r6
 8000c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9a:	fab3 f683 	clz	r6, r3
 8000c9e:	2e00      	cmp	r6, #0
 8000ca0:	d14a      	bne.n	8000d38 <__udivmoddi4+0x160>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xd4>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80f9 	bhi.w	8000e9e <__udivmoddi4+0x2c6>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb61 0303 	sbc.w	r3, r1, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	469e      	mov	lr, r3
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	d0e0      	beq.n	8000c7c <__udivmoddi4+0xa4>
 8000cba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cbe:	e7dd      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000cc0:	b902      	cbnz	r2, 8000cc4 <__udivmoddi4+0xec>
 8000cc2:	deff      	udf	#255	; 0xff
 8000cc4:	fab2 f282 	clz	r2, r2
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	f040 8092 	bne.w	8000df2 <__udivmoddi4+0x21a>
 8000cce:	eba1 010c 	sub.w	r1, r1, ip
 8000cd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd6:	fa1f fe8c 	uxth.w	lr, ip
 8000cda:	2601      	movs	r6, #1
 8000cdc:	0c20      	lsrs	r0, r4, #16
 8000cde:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ce2:	fb07 1113 	mls	r1, r7, r3, r1
 8000ce6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cea:	fb0e f003 	mul.w	r0, lr, r3
 8000cee:	4288      	cmp	r0, r1
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x12c>
 8000cf2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf6:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x12a>
 8000cfc:	4288      	cmp	r0, r1
 8000cfe:	f200 80cb 	bhi.w	8000e98 <__udivmoddi4+0x2c0>
 8000d02:	4643      	mov	r3, r8
 8000d04:	1a09      	subs	r1, r1, r0
 8000d06:	b2a4      	uxth	r4, r4
 8000d08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d14:	fb0e fe00 	mul.w	lr, lr, r0
 8000d18:	45a6      	cmp	lr, r4
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x156>
 8000d1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d20:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000d24:	d202      	bcs.n	8000d2c <__udivmoddi4+0x154>
 8000d26:	45a6      	cmp	lr, r4
 8000d28:	f200 80bb 	bhi.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	eba4 040e 	sub.w	r4, r4, lr
 8000d32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d36:	e79c      	b.n	8000c72 <__udivmoddi4+0x9a>
 8000d38:	f1c6 0720 	rsb	r7, r6, #32
 8000d3c:	40b3      	lsls	r3, r6
 8000d3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d46:	fa20 f407 	lsr.w	r4, r0, r7
 8000d4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d4e:	431c      	orrs	r4, r3
 8000d50:	40f9      	lsrs	r1, r7
 8000d52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d56:	fa00 f306 	lsl.w	r3, r0, r6
 8000d5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d5e:	0c20      	lsrs	r0, r4, #16
 8000d60:	fa1f fe8c 	uxth.w	lr, ip
 8000d64:	fb09 1118 	mls	r1, r9, r8, r1
 8000d68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d70:	4288      	cmp	r0, r1
 8000d72:	fa02 f206 	lsl.w	r2, r2, r6
 8000d76:	d90b      	bls.n	8000d90 <__udivmoddi4+0x1b8>
 8000d78:	eb1c 0101 	adds.w	r1, ip, r1
 8000d7c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000d80:	f080 8088 	bcs.w	8000e94 <__udivmoddi4+0x2bc>
 8000d84:	4288      	cmp	r0, r1
 8000d86:	f240 8085 	bls.w	8000e94 <__udivmoddi4+0x2bc>
 8000d8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d8e:	4461      	add	r1, ip
 8000d90:	1a09      	subs	r1, r1, r0
 8000d92:	b2a4      	uxth	r4, r4
 8000d94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d98:	fb09 1110 	mls	r1, r9, r0, r1
 8000d9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000da0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da4:	458e      	cmp	lr, r1
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x1e2>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000db0:	d26c      	bcs.n	8000e8c <__udivmoddi4+0x2b4>
 8000db2:	458e      	cmp	lr, r1
 8000db4:	d96a      	bls.n	8000e8c <__udivmoddi4+0x2b4>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4461      	add	r1, ip
 8000dba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dbe:	fba0 9402 	umull	r9, r4, r0, r2
 8000dc2:	eba1 010e 	sub.w	r1, r1, lr
 8000dc6:	42a1      	cmp	r1, r4
 8000dc8:	46c8      	mov	r8, r9
 8000dca:	46a6      	mov	lr, r4
 8000dcc:	d356      	bcc.n	8000e7c <__udivmoddi4+0x2a4>
 8000dce:	d053      	beq.n	8000e78 <__udivmoddi4+0x2a0>
 8000dd0:	b15d      	cbz	r5, 8000dea <__udivmoddi4+0x212>
 8000dd2:	ebb3 0208 	subs.w	r2, r3, r8
 8000dd6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dda:	fa01 f707 	lsl.w	r7, r1, r7
 8000dde:	fa22 f306 	lsr.w	r3, r2, r6
 8000de2:	40f1      	lsrs	r1, r6
 8000de4:	431f      	orrs	r7, r3
 8000de6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dea:	2600      	movs	r6, #0
 8000dec:	4631      	mov	r1, r6
 8000dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df2:	f1c2 0320 	rsb	r3, r2, #32
 8000df6:	40d8      	lsrs	r0, r3
 8000df8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dfc:	fa21 f303 	lsr.w	r3, r1, r3
 8000e00:	4091      	lsls	r1, r2
 8000e02:	4301      	orrs	r1, r0
 8000e04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e08:	fa1f fe8c 	uxth.w	lr, ip
 8000e0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e10:	fb07 3610 	mls	r6, r7, r0, r3
 8000e14:	0c0b      	lsrs	r3, r1, #16
 8000e16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e1e:	429e      	cmp	r6, r3
 8000e20:	fa04 f402 	lsl.w	r4, r4, r2
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x260>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e2e:	d22f      	bcs.n	8000e90 <__udivmoddi4+0x2b8>
 8000e30:	429e      	cmp	r6, r3
 8000e32:	d92d      	bls.n	8000e90 <__udivmoddi4+0x2b8>
 8000e34:	3802      	subs	r0, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	1b9b      	subs	r3, r3, r6
 8000e3a:	b289      	uxth	r1, r1
 8000e3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e40:	fb07 3316 	mls	r3, r7, r6, r3
 8000e44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e48:	fb06 f30e 	mul.w	r3, r6, lr
 8000e4c:	428b      	cmp	r3, r1
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x28a>
 8000e50:	eb1c 0101 	adds.w	r1, ip, r1
 8000e54:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000e58:	d216      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d914      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5e:	3e02      	subs	r6, #2
 8000e60:	4461      	add	r1, ip
 8000e62:	1ac9      	subs	r1, r1, r3
 8000e64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e68:	e738      	b.n	8000cdc <__udivmoddi4+0x104>
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e705      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e3      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6f8      	b.n	8000c6a <__udivmoddi4+0x92>
 8000e78:	454b      	cmp	r3, r9
 8000e7a:	d2a9      	bcs.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7a3      	b.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e88:	4646      	mov	r6, r8
 8000e8a:	e7ea      	b.n	8000e62 <__udivmoddi4+0x28a>
 8000e8c:	4620      	mov	r0, r4
 8000e8e:	e794      	b.n	8000dba <__udivmoddi4+0x1e2>
 8000e90:	4640      	mov	r0, r8
 8000e92:	e7d1      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e94:	46d0      	mov	r8, sl
 8000e96:	e77b      	b.n	8000d90 <__udivmoddi4+0x1b8>
 8000e98:	3b02      	subs	r3, #2
 8000e9a:	4461      	add	r1, ip
 8000e9c:	e732      	b.n	8000d04 <__udivmoddi4+0x12c>
 8000e9e:	4630      	mov	r0, r6
 8000ea0:	e709      	b.n	8000cb6 <__udivmoddi4+0xde>
 8000ea2:	4464      	add	r4, ip
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	e742      	b.n	8000d2e <__udivmoddi4+0x156>

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <BH1790GLC_init>:

/*****************************************************************************
INIT FUNCTION
******************************************************************************/
uint8_t BH1790GLC_init( BH1790GLC *dev, I2C_HandleTypeDef *i2cHandle )
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b086      	sub	sp, #24
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
 8000eb4:	6039      	str	r1, [r7, #0]
	/* Set struct parameters */
	dev->i2cHandle = i2cHandle;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	683a      	ldr	r2, [r7, #0]
 8000eba:	601a      	str	r2, [r3, #0]
	dev->ppg_data[0] = 0;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	809a      	strh	r2, [r3, #4]
	dev->ppg_data[1] = 0;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	80da      	strh	r2, [r3, #6]

	dev->samples_index = 0;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	2200      	movs	r2, #0
 8000ecc:	f8a3 23f0 	strh.w	r2, [r3, #1008]	; 0x3f0

	for(int i=0; i<NUM_SAMPLES; i++){
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	617b      	str	r3, [r7, #20]
 8000ed4:	e00a      	b.n	8000eec <BH1790GLC_init+0x40>
		dev->smooth_array[i] = 0;
 8000ed6:	687a      	ldr	r2, [r7, #4]
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8000ede:	005b      	lsls	r3, r3, #1
 8000ee0:	4413      	add	r3, r2
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	805a      	strh	r2, [r3, #2]
	for(int i=0; i<NUM_SAMPLES; i++){
 8000ee6:	697b      	ldr	r3, [r7, #20]
 8000ee8:	3301      	adds	r3, #1
 8000eea:	617b      	str	r3, [r7, #20]
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000ef2:	dbf0      	blt.n	8000ed6 <BH1790GLC_init+0x2a>
	/* Keep count of errors */
	HAL_StatusTypeDef status;

	/* Take initial reads to make sure I2C is working */
	uint8_t regData;
	status = read(dev, BH1790GLC_MANUFACTURER_ID, &regData);	//get manufacturer id
 8000ef4:	f107 0312 	add.w	r3, r7, #18
 8000ef8:	461a      	mov	r2, r3
 8000efa:	210f      	movs	r1, #15
 8000efc:	6878      	ldr	r0, [r7, #4]
 8000efe:	f000 fbbf 	bl	8001680 <read>
 8000f02:	4603      	mov	r3, r0
 8000f04:	74fb      	strb	r3, [r7, #19]
	if(status != HAL_OK){
 8000f06:	7cfb      	ldrb	r3, [r7, #19]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <BH1790GLC_init+0x64>
		return ERR_MID_VAL;
 8000f0c:	230a      	movs	r3, #10
 8000f0e:	e04a      	b.n	8000fa6 <BH1790GLC_init+0xfa>
	}
	if(regData != BH1790GLC_MID_VAL){
 8000f10:	7cbb      	ldrb	r3, [r7, #18]
 8000f12:	2be0      	cmp	r3, #224	; 0xe0
 8000f14:	d001      	beq.n	8000f1a <BH1790GLC_init+0x6e>
		return ERR_MID_VAL;
 8000f16:	230a      	movs	r3, #10
 8000f18:	e045      	b.n	8000fa6 <BH1790GLC_init+0xfa>
	}

	status = read(dev, BH1790GLC_PART_ID, &regData);	//get part id
 8000f1a:	f107 0312 	add.w	r3, r7, #18
 8000f1e:	461a      	mov	r2, r3
 8000f20:	2110      	movs	r1, #16
 8000f22:	6878      	ldr	r0, [r7, #4]
 8000f24:	f000 fbac 	bl	8001680 <read>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	74fb      	strb	r3, [r7, #19]
	if(status != HAL_OK){
 8000f2c:	7cfb      	ldrb	r3, [r7, #19]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d001      	beq.n	8000f36 <BH1790GLC_init+0x8a>
		return ERR_PID_VAL;
 8000f32:	230b      	movs	r3, #11
 8000f34:	e037      	b.n	8000fa6 <BH1790GLC_init+0xfa>
	}
	if(regData != BH1790GLC_PID_VAL){
 8000f36:	7cbb      	ldrb	r3, [r7, #18]
 8000f38:	2b0d      	cmp	r3, #13
 8000f3a:	d001      	beq.n	8000f40 <BH1790GLC_init+0x94>
		return ERR_PID_VAL;
 8000f3c:	230b      	movs	r3, #11
 8000f3e:	e032      	b.n	8000fa6 <BH1790GLC_init+0xfa>
	}

	/* Configure the 3 registers needed to start taking measurements */
	uint8_t configData[3];
	configData[0] = BH1790GLC_MEAS_CONTROL1_VAL;	//to BH1790GLC_MEAS_CONTROL1 (0x41)
 8000f40:	2382      	movs	r3, #130	; 0x82
 8000f42:	733b      	strb	r3, [r7, #12]
	configData[1] = BH1790GLC_MEAS_CONTROL2_VAL;	//to BH1790GLC_MEAS_CONTROL2 (0x42)
 8000f44:	230c      	movs	r3, #12
 8000f46:	737b      	strb	r3, [r7, #13]
	configData[2] = BH1790GLC_MEAS_START_VAL;		//to BH1790GLC_MEAS_START (0x43)
 8000f48:	2301      	movs	r3, #1
 8000f4a:	73bb      	strb	r3, [r7, #14]

	status = write(dev, BH1790GLC_MEAS_CONTROL1, &configData[0]);
 8000f4c:	f107 030c 	add.w	r3, r7, #12
 8000f50:	461a      	mov	r2, r3
 8000f52:	2141      	movs	r1, #65	; 0x41
 8000f54:	6878      	ldr	r0, [r7, #4]
 8000f56:	f000 fb71 	bl	800163c <write>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	74fb      	strb	r3, [r7, #19]
	if(status != HAL_OK){
 8000f5e:	7cfb      	ldrb	r3, [r7, #19]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d001      	beq.n	8000f68 <BH1790GLC_init+0xbc>
		return ERR_MEAS_CONTROL1;
 8000f64:	2314      	movs	r3, #20
 8000f66:	e01e      	b.n	8000fa6 <BH1790GLC_init+0xfa>
	}
	status = write(dev, BH1790GLC_MEAS_CONTROL2, &configData[1]);
 8000f68:	f107 030c 	add.w	r3, r7, #12
 8000f6c:	3301      	adds	r3, #1
 8000f6e:	461a      	mov	r2, r3
 8000f70:	2142      	movs	r1, #66	; 0x42
 8000f72:	6878      	ldr	r0, [r7, #4]
 8000f74:	f000 fb62 	bl	800163c <write>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	74fb      	strb	r3, [r7, #19]
	if(status != HAL_OK){
 8000f7c:	7cfb      	ldrb	r3, [r7, #19]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <BH1790GLC_init+0xda>
		return ERR_MEAS_CONTROL2;
 8000f82:	2315      	movs	r3, #21
 8000f84:	e00f      	b.n	8000fa6 <BH1790GLC_init+0xfa>
	}
	status = write(dev, BH1790GLC_MEAS_START, &configData[2]);
 8000f86:	f107 030c 	add.w	r3, r7, #12
 8000f8a:	3302      	adds	r3, #2
 8000f8c:	461a      	mov	r2, r3
 8000f8e:	2143      	movs	r1, #67	; 0x43
 8000f90:	6878      	ldr	r0, [r7, #4]
 8000f92:	f000 fb53 	bl	800163c <write>
 8000f96:	4603      	mov	r3, r0
 8000f98:	74fb      	strb	r3, [r7, #19]
	if(status != HAL_OK){
 8000f9a:	7cfb      	ldrb	r3, [r7, #19]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <BH1790GLC_init+0xf8>
		return ERR_MEAS_START;
 8000fa0:	2316      	movs	r3, #22
 8000fa2:	e000      	b.n	8000fa6 <BH1790GLC_init+0xfa>
	}

	return SUCCESS;
 8000fa4:	2300      	movs	r3, #0
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	3718      	adds	r7, #24
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}

08000fae <get_val>:
******************************************************************************/
/*
 * Puts the ppg readings into the ppg_data struct variable
 */
uint8_t get_val( BH1790GLC *dev )
{
 8000fae:	b580      	push	{r7, lr}
 8000fb0:	b084      	sub	sp, #16
 8000fb2:	af00      	add	r7, sp, #0
 8000fb4:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status;
	uint8_t sensorData[4];

	status = many_reads(dev, BH1790GLC_DATAOUT_LEDOFF, sensorData, 4);
 8000fb6:	f107 0208 	add.w	r2, r7, #8
 8000fba:	2304      	movs	r3, #4
 8000fbc:	2154      	movs	r1, #84	; 0x54
 8000fbe:	6878      	ldr	r0, [r7, #4]
 8000fc0:	f000 fb80 	bl	80016c4 <many_reads>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK){
 8000fc8:	7bfb      	ldrb	r3, [r7, #15]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d001      	beq.n	8000fd2 <get_val+0x24>
		return ERR_DATA_OUT;		//error check
 8000fce:	231e      	movs	r3, #30
 8000fd0:	e014      	b.n	8000ffc <get_val+0x4e>
	}

	//convert the sensorData values to useful data
	dev->ppg_data[0] = ((uint16_t)sensorData[1]<<8)|(sensorData[0]);	//LED OFF
 8000fd2:	7a7b      	ldrb	r3, [r7, #9]
 8000fd4:	021b      	lsls	r3, r3, #8
 8000fd6:	b21a      	sxth	r2, r3
 8000fd8:	7a3b      	ldrb	r3, [r7, #8]
 8000fda:	b21b      	sxth	r3, r3
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	b21b      	sxth	r3, r3
 8000fe0:	b29a      	uxth	r2, r3
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	809a      	strh	r2, [r3, #4]
	dev->ppg_data[1] = ((uint16_t)sensorData[3]<<8)|(sensorData[2]);	//LED ON
 8000fe6:	7afb      	ldrb	r3, [r7, #11]
 8000fe8:	021b      	lsls	r3, r3, #8
 8000fea:	b21a      	sxth	r2, r3
 8000fec:	7abb      	ldrb	r3, [r7, #10]
 8000fee:	b21b      	sxth	r3, r3
 8000ff0:	4313      	orrs	r3, r2
 8000ff2:	b21b      	sxth	r3, r3
 8000ff4:	b29a      	uxth	r2, r3
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	80da      	strh	r2, [r3, #6]

	return SUCCESS;
 8000ffa:	2300      	movs	r3, #0
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	3710      	adds	r7, #16
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}

08001004 <add_sample>:
	}

	return SUCCESS;
}

uint8_t add_sample( BH1790GLC *dev ){
 8001004:	b480      	push	{r7}
 8001006:	b083      	sub	sp, #12
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]


	dev->ppg_samples[dev->samples_index] = dev->ppg_data[1];
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	f8b3 33f0 	ldrh.w	r3, [r3, #1008]	; 0x3f0
 8001012:	461a      	mov	r2, r3
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	88d9      	ldrh	r1, [r3, #6]
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	3204      	adds	r2, #4
 800101c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	dev->samples_index++;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	f8b3 33f0 	ldrh.w	r3, [r3, #1008]	; 0x3f0
 8001026:	3301      	adds	r3, #1
 8001028:	b29a      	uxth	r2, r3
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	f8a3 23f0 	strh.w	r2, [r3, #1008]	; 0x3f0


	if(dev->samples_index==NUM_SAMPLES){
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	f8b3 33f0 	ldrh.w	r3, [r3, #1008]	; 0x3f0
 8001036:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800103a:	d105      	bne.n	8001048 <add_sample+0x44>

		dev->samples_index = 0;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2200      	movs	r2, #0
 8001040:	f8a3 23f0 	strh.w	r2, [r3, #1008]	; 0x3f0
		return 1;
 8001044:	2301      	movs	r3, #1
 8001046:	e008      	b.n	800105a <add_sample+0x56>
	}
	else if(dev->ppg_data[0] > led_off_threshold) {
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	889b      	ldrh	r3, [r3, #4]
 800104c:	2b64      	cmp	r3, #100	; 0x64
 800104e:	d903      	bls.n	8001058 <add_sample+0x54>
		dev->samples_index = 0;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	2200      	movs	r2, #0
 8001054:	f8a3 23f0 	strh.w	r2, [r3, #1008]	; 0x3f0
	}

	return 0;
 8001058:	2300      	movs	r3, #0
}
 800105a:	4618      	mov	r0, r3
 800105c:	370c      	adds	r7, #12
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
	...

08001068 <ppg_calculate>:

uint8_t ppg_calculate( BH1790GLC *dev ){
 8001068:	b580      	push	{r7, lr}
 800106a:	f5ad 6d11 	sub.w	sp, sp, #2320	; 0x910
 800106e:	af00      	add	r7, sp, #0
 8001070:	f507 6311 	add.w	r3, r7, #2320	; 0x910
 8001074:	f6a3 130c 	subw	r3, r3, #2316	; 0x90c
 8001078:	6018      	str	r0, [r3, #0]

	  //uint16_t smooth_array[NUM_SAMPLES];
	  int deriv_array[NUM_SAMPLES-1];

	  uint16_t raw_data_1;
	  float smooth_data_1 = 0;
 800107a:	f04f 0300 	mov.w	r3, #0
 800107e:	f607 120c 	addw	r2, r7, #2316	; 0x90c
 8001082:	6013      	str	r3, [r2, #0]
	  float lpf_beta = 0.075;
 8001084:	4bc3      	ldr	r3, [pc, #780]	; (8001394 <ppg_calculate+0x32c>)
 8001086:	f507 620c 	add.w	r2, r7, #2240	; 0x8c0
 800108a:	6013      	str	r3, [r2, #0]

	  for(int i = 0; i < NUM_SAMPLES; i++){
 800108c:	2300      	movs	r3, #0
 800108e:	f8c7 3908 	str.w	r3, [r7, #2312]	; 0x908
 8001092:	e088      	b.n	80011a6 <ppg_calculate+0x13e>

		  raw_data_1 = dev->ppg_samples[i];
 8001094:	f507 6311 	add.w	r3, r7, #2320	; 0x910
 8001098:	f6a3 130c 	subw	r3, r3, #2316	; 0x90c
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f8d7 2908 	ldr.w	r2, [r7, #2312]	; 0x908
 80010a2:	3204      	adds	r2, #4
 80010a4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80010a8:	f8a7 387e 	strh.w	r3, [r7, #2174]	; 0x87e
		  smooth_data_1 = smooth_data_1 - (lpf_beta*(smooth_data_1 - raw_data_1));
 80010ac:	f8b7 387e 	ldrh.w	r3, [r7, #2174]	; 0x87e
 80010b0:	ee07 3a90 	vmov	s15, r3
 80010b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010b8:	f607 130c 	addw	r3, r7, #2316	; 0x90c
 80010bc:	ed93 7a00 	vldr	s14, [r3]
 80010c0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80010c4:	f507 630c 	add.w	r3, r7, #2240	; 0x8c0
 80010c8:	edd3 7a00 	vldr	s15, [r3]
 80010cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010d0:	f607 130c 	addw	r3, r7, #2316	; 0x90c
 80010d4:	ed93 7a00 	vldr	s14, [r3]
 80010d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010dc:	f607 130c 	addw	r3, r7, #2316	; 0x90c
 80010e0:	edc3 7a00 	vstr	s15, [r3]
		  dev->smooth_array[i] = smooth_data_1;
 80010e4:	f607 130c 	addw	r3, r7, #2316	; 0x90c
 80010e8:	edd3 7a00 	vldr	s15, [r3]
 80010ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010f0:	ee17 3a90 	vmov	r3, s15
 80010f4:	b299      	uxth	r1, r3
 80010f6:	f507 6311 	add.w	r3, r7, #2320	; 0x910
 80010fa:	f6a3 130c 	subw	r3, r3, #2316	; 0x90c
 80010fe:	681a      	ldr	r2, [r3, #0]
 8001100:	f8d7 3908 	ldr.w	r3, [r7, #2312]	; 0x908
 8001104:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001108:	005b      	lsls	r3, r3, #1
 800110a:	4413      	add	r3, r2
 800110c:	460a      	mov	r2, r1
 800110e:	805a      	strh	r2, [r3, #2]


		  if(i!=0){
 8001110:	f8d7 3908 	ldr.w	r3, [r7, #2312]	; 0x908
 8001114:	2b00      	cmp	r3, #0
 8001116:	d041      	beq.n	800119c <ppg_calculate+0x134>


			  int deriv = (int)dev->smooth_array[i] - (int)dev->smooth_array[i-1];
 8001118:	f507 6311 	add.w	r3, r7, #2320	; 0x910
 800111c:	f6a3 130c 	subw	r3, r3, #2316	; 0x90c
 8001120:	681a      	ldr	r2, [r3, #0]
 8001122:	f8d7 3908 	ldr.w	r3, [r7, #2312]	; 0x908
 8001126:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800112a:	005b      	lsls	r3, r3, #1
 800112c:	4413      	add	r3, r2
 800112e:	885b      	ldrh	r3, [r3, #2]
 8001130:	4619      	mov	r1, r3
 8001132:	f8d7 3908 	ldr.w	r3, [r7, #2312]	; 0x908
 8001136:	3b01      	subs	r3, #1
 8001138:	f507 6211 	add.w	r2, r7, #2320	; 0x910
 800113c:	f6a2 120c 	subw	r2, r2, #2316	; 0x90c
 8001140:	6812      	ldr	r2, [r2, #0]
 8001142:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001146:	005b      	lsls	r3, r3, #1
 8001148:	4413      	add	r3, r2
 800114a:	885b      	ldrh	r3, [r3, #2]
 800114c:	1acb      	subs	r3, r1, r3
 800114e:	f8c7 3878 	str.w	r3, [r7, #2168]	; 0x878
			  if(deriv<255 || deriv>-255){ // check 255 value later
 8001152:	f8d7 3878 	ldr.w	r3, [r7, #2168]	; 0x878
 8001156:	2bfe      	cmp	r3, #254	; 0xfe
 8001158:	dd04      	ble.n	8001164 <ppg_calculate+0xfc>
 800115a:	f8d7 3878 	ldr.w	r3, [r7, #2168]	; 0x878
 800115e:	f113 0ffe 	cmn.w	r3, #254	; 0xfe
 8001162:	db0a      	blt.n	800117a <ppg_calculate+0x112>

				 deriv_array[i] = deriv;
 8001164:	f507 6311 	add.w	r3, r7, #2320	; 0x910
 8001168:	f6a3 0364 	subw	r3, r3, #2148	; 0x864
 800116c:	f8d7 2908 	ldr.w	r2, [r7, #2312]	; 0x908
 8001170:	f8d7 1878 	ldr.w	r1, [r7, #2168]	; 0x878
 8001174:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8001178:	e010      	b.n	800119c <ppg_calculate+0x134>

			  } else {

				 deriv_array[i] = deriv_array[i-1];
 800117a:	f8d7 3908 	ldr.w	r3, [r7, #2312]	; 0x908
 800117e:	1e5a      	subs	r2, r3, #1
 8001180:	f507 6311 	add.w	r3, r7, #2320	; 0x910
 8001184:	f6a3 0364 	subw	r3, r3, #2148	; 0x864
 8001188:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800118c:	f507 6311 	add.w	r3, r7, #2320	; 0x910
 8001190:	f6a3 0364 	subw	r3, r3, #2148	; 0x864
 8001194:	f8d7 2908 	ldr.w	r2, [r7, #2312]	; 0x908
 8001198:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	  for(int i = 0; i < NUM_SAMPLES; i++){
 800119c:	f8d7 3908 	ldr.w	r3, [r7, #2312]	; 0x908
 80011a0:	3301      	adds	r3, #1
 80011a2:	f8c7 3908 	str.w	r3, [r7, #2312]	; 0x908
 80011a6:	f8d7 3908 	ldr.w	r3, [r7, #2312]	; 0x908
 80011aa:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80011ae:	f6ff af71 	blt.w	8001094 <ppg_calculate+0x2c>

		  }

	  }

	  int pos = 0;
 80011b2:	2300      	movs	r3, #0
 80011b4:	f8c7 3904 	str.w	r3, [r7, #2308]	; 0x904
	  int neg = 0;
 80011b8:	2300      	movs	r3, #0
 80011ba:	f8c7 3900 	str.w	r3, [r7, #2304]	; 0x900

	  int pos_check = 0;
 80011be:	2300      	movs	r3, #0
 80011c0:	f8c7 38fc 	str.w	r3, [r7, #2300]	; 0x8fc
	  int neg_check = 0;
 80011c4:	2300      	movs	r3, #0
 80011c6:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc

	  int peak_vals[40] = {};
 80011ca:	f507 6311 	add.w	r3, r7, #2320	; 0x910
 80011ce:	f6a3 1304 	subw	r3, r3, #2308	; 0x904
 80011d2:	4618      	mov	r0, r3
 80011d4:	23a0      	movs	r3, #160	; 0xa0
 80011d6:	461a      	mov	r2, r3
 80011d8:	2100      	movs	r1, #0
 80011da:	f005 fbdf 	bl	800699c <memset>
	  int peak_count = 0;
 80011de:	2300      	movs	r3, #0
 80011e0:	f8c7 38f8 	str.w	r3, [r7, #2296]	; 0x8f8


	  for(int j = 0; j < NUM_SAMPLES-1; j++){
 80011e4:	2300      	movs	r3, #0
 80011e6:	f8c7 38f4 	str.w	r3, [r7, #2292]	; 0x8f4
 80011ea:	e066      	b.n	80012ba <ppg_calculate+0x252>



		  if(deriv_array[j]>0 && pos_check==0){
 80011ec:	f507 6311 	add.w	r3, r7, #2320	; 0x910
 80011f0:	f6a3 0364 	subw	r3, r3, #2148	; 0x864
 80011f4:	f8d7 28f4 	ldr.w	r2, [r7, #2292]	; 0x8f4
 80011f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	dd13      	ble.n	8001228 <ppg_calculate+0x1c0>
 8001200:	f8d7 38fc 	ldr.w	r3, [r7, #2300]	; 0x8fc
 8001204:	2b00      	cmp	r3, #0
 8001206:	d10f      	bne.n	8001228 <ppg_calculate+0x1c0>

			  neg = 0;
 8001208:	2300      	movs	r3, #0
 800120a:	f8c7 3900 	str.w	r3, [r7, #2304]	; 0x900
			  pos++;
 800120e:	f8d7 3904 	ldr.w	r3, [r7, #2308]	; 0x904
 8001212:	3301      	adds	r3, #1
 8001214:	f8c7 3904 	str.w	r3, [r7, #2308]	; 0x904

			  if(pos==3){
 8001218:	f8d7 3904 	ldr.w	r3, [r7, #2308]	; 0x904
 800121c:	2b03      	cmp	r3, #3
 800121e:	d147      	bne.n	80012b0 <ppg_calculate+0x248>

				  pos_check = 1;
 8001220:	2301      	movs	r3, #1
 8001222:	f8c7 38fc 	str.w	r3, [r7, #2300]	; 0x8fc
			  if(pos==3){
 8001226:	e043      	b.n	80012b0 <ppg_calculate+0x248>

			  }

		  } else if (deriv_array[j]<0 && pos_check==1) {
 8001228:	f507 6311 	add.w	r3, r7, #2320	; 0x910
 800122c:	f6a3 0364 	subw	r3, r3, #2148	; 0x864
 8001230:	f8d7 28f4 	ldr.w	r2, [r7, #2292]	; 0x8f4
 8001234:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001238:	2b00      	cmp	r3, #0
 800123a:	da28      	bge.n	800128e <ppg_calculate+0x226>
 800123c:	f8d7 38fc 	ldr.w	r3, [r7, #2300]	; 0x8fc
 8001240:	2b01      	cmp	r3, #1
 8001242:	d124      	bne.n	800128e <ppg_calculate+0x226>

			  pos = 0;
 8001244:	2300      	movs	r3, #0
 8001246:	f8c7 3904 	str.w	r3, [r7, #2308]	; 0x904
			  neg++;
 800124a:	f8d7 3900 	ldr.w	r3, [r7, #2304]	; 0x900
 800124e:	3301      	adds	r3, #1
 8001250:	f8c7 3900 	str.w	r3, [r7, #2304]	; 0x900

			  if(neg==3){
 8001254:	f8d7 3900 	ldr.w	r3, [r7, #2304]	; 0x900
 8001258:	2b03      	cmp	r3, #3
 800125a:	d129      	bne.n	80012b0 <ppg_calculate+0x248>

				  neg_check = 1;
 800125c:	2301      	movs	r3, #1
 800125e:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
				  peak_vals[peak_count] = j;
 8001262:	f507 6311 	add.w	r3, r7, #2320	; 0x910
 8001266:	f6a3 1304 	subw	r3, r3, #2308	; 0x904
 800126a:	f8d7 28f8 	ldr.w	r2, [r7, #2296]	; 0x8f8
 800126e:	f8d7 18f4 	ldr.w	r1, [r7, #2292]	; 0x8f4
 8001272:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				  peak_count++;
 8001276:	f8d7 38f8 	ldr.w	r3, [r7, #2296]	; 0x8f8
 800127a:	3301      	adds	r3, #1
 800127c:	f8c7 38f8 	str.w	r3, [r7, #2296]	; 0x8f8

				  pos_check = 0;
 8001280:	2300      	movs	r3, #0
 8001282:	f8c7 38fc 	str.w	r3, [r7, #2300]	; 0x8fc
				  neg_check = 0;
 8001286:	2300      	movs	r3, #0
 8001288:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
			  if(neg==3){
 800128c:	e010      	b.n	80012b0 <ppg_calculate+0x248>

			  }


		  } else if (deriv_array[j]<0 && pos_check==0){
 800128e:	f507 6311 	add.w	r3, r7, #2320	; 0x910
 8001292:	f6a3 0364 	subw	r3, r3, #2148	; 0x864
 8001296:	f8d7 28f4 	ldr.w	r2, [r7, #2292]	; 0x8f4
 800129a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	da06      	bge.n	80012b0 <ppg_calculate+0x248>
 80012a2:	f8d7 38fc 	ldr.w	r3, [r7, #2300]	; 0x8fc
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d102      	bne.n	80012b0 <ppg_calculate+0x248>
			  pos = 0;
 80012aa:	2300      	movs	r3, #0
 80012ac:	f8c7 3904 	str.w	r3, [r7, #2308]	; 0x904
	  for(int j = 0; j < NUM_SAMPLES-1; j++){
 80012b0:	f8d7 38f4 	ldr.w	r3, [r7, #2292]	; 0x8f4
 80012b4:	3301      	adds	r3, #1
 80012b6:	f8c7 38f4 	str.w	r3, [r7, #2292]	; 0x8f4
 80012ba:	f8d7 38f4 	ldr.w	r3, [r7, #2292]	; 0x8f4
 80012be:	f5b3 7ff9 	cmp.w	r3, #498	; 0x1f2
 80012c2:	dd93      	ble.n	80011ec <ppg_calculate+0x184>

	  }

	  //printf("{");

	  for(int k = 0; k<40; k++){
 80012c4:	2300      	movs	r3, #0
 80012c6:	f8c7 38f0 	str.w	r3, [r7, #2288]	; 0x8f0
 80012ca:	e004      	b.n	80012d6 <ppg_calculate+0x26e>
 80012cc:	f8d7 38f0 	ldr.w	r3, [r7, #2288]	; 0x8f0
 80012d0:	3301      	adds	r3, #1
 80012d2:	f8c7 38f0 	str.w	r3, [r7, #2288]	; 0x8f0
 80012d6:	f8d7 38f0 	ldr.w	r3, [r7, #2288]	; 0x8f0
 80012da:	2b27      	cmp	r3, #39	; 0x27
 80012dc:	ddf6      	ble.n	80012cc <ppg_calculate+0x264>
		  //printf("[%d],", peak_vals[k]);

	  }
	  //printf("}\n");

	  double sum = 0;
 80012de:	f04f 0200 	mov.w	r2, #0
 80012e2:	f04f 0300 	mov.w	r3, #0
 80012e6:	f607 01e8 	addw	r1, r7, #2280	; 0x8e8
 80012ea:	e9c1 2300 	strd	r2, r3, [r1]

	  for (int k = 1; k < peak_count; k++) {
 80012ee:	2301      	movs	r3, #1
 80012f0:	f8c7 38e4 	str.w	r3, [r7, #2276]	; 0x8e4
 80012f4:	e027      	b.n	8001346 <ppg_calculate+0x2de>
	    sum += peak_vals[k] - peak_vals[k - 1];
 80012f6:	f507 6311 	add.w	r3, r7, #2320	; 0x910
 80012fa:	f6a3 1304 	subw	r3, r3, #2308	; 0x904
 80012fe:	f8d7 28e4 	ldr.w	r2, [r7, #2276]	; 0x8e4
 8001302:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001306:	f8d7 38e4 	ldr.w	r3, [r7, #2276]	; 0x8e4
 800130a:	1e59      	subs	r1, r3, #1
 800130c:	f507 6311 	add.w	r3, r7, #2320	; 0x910
 8001310:	f6a3 1304 	subw	r3, r3, #2308	; 0x904
 8001314:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001318:	1ad3      	subs	r3, r2, r3
 800131a:	4618      	mov	r0, r3
 800131c:	f7ff f902 	bl	8000524 <__aeabi_i2d>
 8001320:	4602      	mov	r2, r0
 8001322:	460b      	mov	r3, r1
 8001324:	f607 01e8 	addw	r1, r7, #2280	; 0x8e8
 8001328:	e9d1 0100 	ldrd	r0, r1, [r1]
 800132c:	f7fe ffae 	bl	800028c <__adddf3>
 8001330:	4602      	mov	r2, r0
 8001332:	460b      	mov	r3, r1
 8001334:	f607 01e8 	addw	r1, r7, #2280	; 0x8e8
 8001338:	e9c1 2300 	strd	r2, r3, [r1]
	  for (int k = 1; k < peak_count; k++) {
 800133c:	f8d7 38e4 	ldr.w	r3, [r7, #2276]	; 0x8e4
 8001340:	3301      	adds	r3, #1
 8001342:	f8c7 38e4 	str.w	r3, [r7, #2276]	; 0x8e4
 8001346:	f8d7 28e4 	ldr.w	r2, [r7, #2276]	; 0x8e4
 800134a:	f8d7 38f8 	ldr.w	r3, [r7, #2296]	; 0x8f8
 800134e:	429a      	cmp	r2, r3
 8001350:	dbd1      	blt.n	80012f6 <ppg_calculate+0x28e>
	  }

	  double mean_interval = sum / (peak_count - 1);
 8001352:	f8d7 38f8 	ldr.w	r3, [r7, #2296]	; 0x8f8
 8001356:	3b01      	subs	r3, #1
 8001358:	4618      	mov	r0, r3
 800135a:	f7ff f8e3 	bl	8000524 <__aeabi_i2d>
 800135e:	4602      	mov	r2, r0
 8001360:	460b      	mov	r3, r1
 8001362:	f607 01e8 	addw	r1, r7, #2280	; 0x8e8
 8001366:	e9d1 0100 	ldrd	r0, r1, [r1]
 800136a:	f7ff fa6f 	bl	800084c <__aeabi_ddiv>
 800136e:	4602      	mov	r2, r0
 8001370:	460b      	mov	r3, r1
 8001372:	f507 610b 	add.w	r1, r7, #2224	; 0x8b0
 8001376:	e9c1 2300 	strd	r2, r3, [r1]

	  double squared_diff_sum = 0;
 800137a:	f04f 0200 	mov.w	r2, #0
 800137e:	f04f 0300 	mov.w	r3, #0
 8001382:	f607 01d8 	addw	r1, r7, #2264	; 0x8d8
 8001386:	e9c1 2300 	strd	r2, r3, [r1]
	  for (int k = 1; k < peak_count; k++) {
 800138a:	2301      	movs	r3, #1
 800138c:	f8c7 38d4 	str.w	r3, [r7, #2260]	; 0x8d4
 8001390:	e040      	b.n	8001414 <ppg_calculate+0x3ac>
 8001392:	bf00      	nop
 8001394:	3d99999a 	.word	0x3d99999a
	    double diff = peak_vals[k] - peak_vals[k - 1] - mean_interval;
 8001398:	f507 6311 	add.w	r3, r7, #2320	; 0x910
 800139c:	f6a3 1304 	subw	r3, r3, #2308	; 0x904
 80013a0:	f8d7 28d4 	ldr.w	r2, [r7, #2260]	; 0x8d4
 80013a4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80013a8:	f8d7 38d4 	ldr.w	r3, [r7, #2260]	; 0x8d4
 80013ac:	1e59      	subs	r1, r3, #1
 80013ae:	f507 6311 	add.w	r3, r7, #2320	; 0x910
 80013b2:	f6a3 1304 	subw	r3, r3, #2308	; 0x904
 80013b6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80013ba:	1ad3      	subs	r3, r2, r3
 80013bc:	4618      	mov	r0, r3
 80013be:	f7ff f8b1 	bl	8000524 <__aeabi_i2d>
 80013c2:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 80013c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ca:	f7fe ff5d 	bl	8000288 <__aeabi_dsub>
 80013ce:	4602      	mov	r2, r0
 80013d0:	460b      	mov	r3, r1
 80013d2:	f507 6108 	add.w	r1, r7, #2176	; 0x880
 80013d6:	e9c1 2300 	strd	r2, r3, [r1]
	    squared_diff_sum += diff * diff;
 80013da:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 80013de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013e2:	f507 6108 	add.w	r1, r7, #2176	; 0x880
 80013e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80013ea:	f7ff f905 	bl	80005f8 <__aeabi_dmul>
 80013ee:	4602      	mov	r2, r0
 80013f0:	460b      	mov	r3, r1
 80013f2:	f607 01d8 	addw	r1, r7, #2264	; 0x8d8
 80013f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80013fa:	f7fe ff47 	bl	800028c <__adddf3>
 80013fe:	4602      	mov	r2, r0
 8001400:	460b      	mov	r3, r1
 8001402:	f607 01d8 	addw	r1, r7, #2264	; 0x8d8
 8001406:	e9c1 2300 	strd	r2, r3, [r1]
	  for (int k = 1; k < peak_count; k++) {
 800140a:	f8d7 38d4 	ldr.w	r3, [r7, #2260]	; 0x8d4
 800140e:	3301      	adds	r3, #1
 8001410:	f8c7 38d4 	str.w	r3, [r7, #2260]	; 0x8d4
 8001414:	f8d7 28d4 	ldr.w	r2, [r7, #2260]	; 0x8d4
 8001418:	f8d7 38f8 	ldr.w	r3, [r7, #2296]	; 0x8f8
 800141c:	429a      	cmp	r2, r3
 800141e:	dbbb      	blt.n	8001398 <ppg_calculate+0x330>
	  }

	  double std_deviation = sqrt(squared_diff_sum / (peak_count - 1));  // Calculate the standard deviation of the intervals
 8001420:	f8d7 38f8 	ldr.w	r3, [r7, #2296]	; 0x8f8
 8001424:	3b01      	subs	r3, #1
 8001426:	4618      	mov	r0, r3
 8001428:	f7ff f87c 	bl	8000524 <__aeabi_i2d>
 800142c:	4602      	mov	r2, r0
 800142e:	460b      	mov	r3, r1
 8001430:	f607 01d8 	addw	r1, r7, #2264	; 0x8d8
 8001434:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001438:	f7ff fa08 	bl	800084c <__aeabi_ddiv>
 800143c:	4602      	mov	r2, r0
 800143e:	460b      	mov	r3, r1
 8001440:	ec43 2b17 	vmov	d7, r2, r3
 8001444:	eeb0 0a47 	vmov.f32	s0, s14
 8001448:	eef0 0a67 	vmov.f32	s1, s15
 800144c:	f008 f852 	bl	80094f4 <sqrt>
 8001450:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 8001454:	ed83 0b00 	vstr	d0, [r3]
	  double cv = std_deviation / mean_interval; // Calculate the coefficient of variation (CV)
 8001458:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 800145c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001460:	f607 01a8 	addw	r1, r7, #2216	; 0x8a8
 8001464:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001468:	f7ff f9f0 	bl	800084c <__aeabi_ddiv>
 800146c:	4602      	mov	r2, r0
 800146e:	460b      	mov	r3, r1
 8001470:	f507 610a 	add.w	r1, r7, #2208	; 0x8a0
 8001474:	e9c1 2300 	strd	r2, r3, [r1]

	  double cv_threshold;
	     int af_detected_cv = 0;
 8001478:	2300      	movs	r3, #0
 800147a:	f8c7 38d0 	str.w	r3, [r7, #2256]	; 0x8d0
	     int af_detected_tpr = 0;
 800147e:	2300      	movs	r3, #0
 8001480:	f8c7 38cc 	str.w	r3, [r7, #2252]	; 0x8cc

	     // Check for atrial fibrillation using cv threshold
	     if (peak_count >= 3 && peak_count <= 40)
 8001484:	f8d7 38f8 	ldr.w	r3, [r7, #2296]	; 0x8f8
 8001488:	2b02      	cmp	r3, #2
 800148a:	dd1a      	ble.n	80014c2 <ppg_calculate+0x45a>
 800148c:	f8d7 38f8 	ldr.w	r3, [r7, #2296]	; 0x8f8
 8001490:	2b28      	cmp	r3, #40	; 0x28
 8001492:	dc16      	bgt.n	80014c2 <ppg_calculate+0x45a>
	     {
	         cv_threshold = 0.624;// - (0.312 * (peak_count - 3)) / (40 - 3);
 8001494:	a365      	add	r3, pc, #404	; (adr r3, 800162c <ppg_calculate+0x5c4>)
 8001496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800149a:	f607 0198 	addw	r1, r7, #2200	; 0x898
 800149e:	e9c1 2300 	strd	r2, r3, [r1]

	         if (cv > cv_threshold)
 80014a2:	f607 0398 	addw	r3, r7, #2200	; 0x898
 80014a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014aa:	f507 610a 	add.w	r1, r7, #2208	; 0x8a0
 80014ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 80014b2:	f7ff fb31 	bl	8000b18 <__aeabi_dcmpgt>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d002      	beq.n	80014c2 <ppg_calculate+0x45a>
	         {
	             af_detected_cv = 1;
 80014bc:	2301      	movs	r3, #1
 80014be:	f8c7 38d0 	str.w	r3, [r7, #2256]	; 0x8d0
	         }
	     }

	     // Calculate turning point ratio
	     int turning_points = 0;
 80014c2:	2300      	movs	r3, #0
 80014c4:	f8c7 38c8 	str.w	r3, [r7, #2248]	; 0x8c8

	     for (int j = 1; j < NUM_SAMPLES-2; j++)
 80014c8:	2301      	movs	r3, #1
 80014ca:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 80014ce:	e055      	b.n	800157c <ppg_calculate+0x514>
	     {
	         if ((deriv_array[j] > deriv_array[j - 1] && deriv_array[j] > deriv_array[j + 1]) ||
 80014d0:	f507 6311 	add.w	r3, r7, #2320	; 0x910
 80014d4:	f6a3 0364 	subw	r3, r3, #2148	; 0x864
 80014d8:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 80014dc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80014e0:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 80014e4:	1e59      	subs	r1, r3, #1
 80014e6:	f507 6311 	add.w	r3, r7, #2320	; 0x910
 80014ea:	f6a3 0364 	subw	r3, r3, #2148	; 0x864
 80014ee:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80014f2:	429a      	cmp	r2, r3
 80014f4:	dd12      	ble.n	800151c <ppg_calculate+0x4b4>
 80014f6:	f507 6311 	add.w	r3, r7, #2320	; 0x910
 80014fa:	f6a3 0364 	subw	r3, r3, #2148	; 0x864
 80014fe:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 8001502:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001506:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 800150a:	1c59      	adds	r1, r3, #1
 800150c:	f507 6311 	add.w	r3, r7, #2320	; 0x910
 8001510:	f6a3 0364 	subw	r3, r3, #2148	; 0x864
 8001514:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001518:	429a      	cmp	r2, r3
 800151a:	dc25      	bgt.n	8001568 <ppg_calculate+0x500>
	             (deriv_array[j] < deriv_array[j - 1] && deriv_array[j] < deriv_array[j + 1]))
 800151c:	f507 6311 	add.w	r3, r7, #2320	; 0x910
 8001520:	f6a3 0364 	subw	r3, r3, #2148	; 0x864
 8001524:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 8001528:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800152c:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8001530:	1e59      	subs	r1, r3, #1
 8001532:	f507 6311 	add.w	r3, r7, #2320	; 0x910
 8001536:	f6a3 0364 	subw	r3, r3, #2148	; 0x864
 800153a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
	         if ((deriv_array[j] > deriv_array[j - 1] && deriv_array[j] > deriv_array[j + 1]) ||
 800153e:	429a      	cmp	r2, r3
 8001540:	da17      	bge.n	8001572 <ppg_calculate+0x50a>
	             (deriv_array[j] < deriv_array[j - 1] && deriv_array[j] < deriv_array[j + 1]))
 8001542:	f507 6311 	add.w	r3, r7, #2320	; 0x910
 8001546:	f6a3 0364 	subw	r3, r3, #2148	; 0x864
 800154a:	f8d7 28c4 	ldr.w	r2, [r7, #2244]	; 0x8c4
 800154e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001552:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8001556:	1c59      	adds	r1, r3, #1
 8001558:	f507 6311 	add.w	r3, r7, #2320	; 0x910
 800155c:	f6a3 0364 	subw	r3, r3, #2148	; 0x864
 8001560:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001564:	429a      	cmp	r2, r3
 8001566:	da04      	bge.n	8001572 <ppg_calculate+0x50a>
	         {
	             turning_points++;
 8001568:	f8d7 38c8 	ldr.w	r3, [r7, #2248]	; 0x8c8
 800156c:	3301      	adds	r3, #1
 800156e:	f8c7 38c8 	str.w	r3, [r7, #2248]	; 0x8c8
	     for (int j = 1; j < NUM_SAMPLES-2; j++)
 8001572:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8001576:	3301      	adds	r3, #1
 8001578:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 800157c:	f8d7 38c4 	ldr.w	r3, [r7, #2244]	; 0x8c4
 8001580:	f5b3 7ff9 	cmp.w	r3, #498	; 0x1f2
 8001584:	dba4      	blt.n	80014d0 <ppg_calculate+0x468>
	         }
	     }

	     double turning_point_ratio = (double)turning_points / (double)(NUM_SAMPLES-2);
 8001586:	f8d7 08c8 	ldr.w	r0, [r7, #2248]	; 0x8c8
 800158a:	f7fe ffcb 	bl	8000524 <__aeabi_i2d>
 800158e:	a329      	add	r3, pc, #164	; (adr r3, 8001634 <ppg_calculate+0x5cc>)
 8001590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001594:	f7ff f95a 	bl	800084c <__aeabi_ddiv>
 8001598:	4602      	mov	r2, r0
 800159a:	460b      	mov	r3, r1
 800159c:	f507 6109 	add.w	r1, r7, #2192	; 0x890
 80015a0:	e9c1 2300 	strd	r2, r3, [r1]

	    // printf("Turning Point Ratio: %f\n", turning_point_ratio);

	     // Check for atrial fibrillation using turning point ratio threshold
	     double tpr_threshold = 0.375;
 80015a4:	f04f 0200 	mov.w	r2, #0
 80015a8:	4b1b      	ldr	r3, [pc, #108]	; (8001618 <ppg_calculate+0x5b0>)
 80015aa:	f607 0188 	addw	r1, r7, #2184	; 0x888
 80015ae:	e9c1 2300 	strd	r2, r3, [r1]
	     if (turning_point_ratio >= tpr_threshold)
 80015b2:	f607 0388 	addw	r3, r7, #2184	; 0x888
 80015b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ba:	f507 6109 	add.w	r1, r7, #2192	; 0x890
 80015be:	e9d1 0100 	ldrd	r0, r1, [r1]
 80015c2:	f7ff fa9f 	bl	8000b04 <__aeabi_dcmpge>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d002      	beq.n	80015d2 <ppg_calculate+0x56a>
	     {
	         af_detected_tpr = 1;
 80015cc:	2301      	movs	r3, #1
 80015ce:	f8c7 38cc 	str.w	r3, [r7, #2252]	; 0x8cc
	     }

	     // Check if both CV and Turning Point Ratio conditions are met
	     if (af_detected_cv && af_detected_tpr)
 80015d2:	f8d7 38d0 	ldr.w	r3, [r7, #2256]	; 0x8d0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d007      	beq.n	80015ea <ppg_calculate+0x582>
 80015da:	f8d7 38cc 	ldr.w	r3, [r7, #2252]	; 0x8cc
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d003      	beq.n	80015ea <ppg_calculate+0x582>
	     {
	         printf("Atrial fibrillation detected.\n");
 80015e2:	480e      	ldr	r0, [pc, #56]	; (800161c <ppg_calculate+0x5b4>)
 80015e4:	f005 fed2 	bl	800738c <puts>
	     {
 80015e8:	e002      	b.n	80015f0 <ppg_calculate+0x588>
	     }
	     else
	     {
	         printf("Atrial fibrillation not detected.\n");
 80015ea:	480d      	ldr	r0, [pc, #52]	; (8001620 <ppg_calculate+0x5b8>)
 80015ec:	f005 fece 	bl	800738c <puts>
	     }

	     printf("Coefficient of Variation: %f\n", cv);
 80015f0:	f507 630a 	add.w	r3, r7, #2208	; 0x8a0
 80015f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015f8:	480a      	ldr	r0, [pc, #40]	; (8001624 <ppg_calculate+0x5bc>)
 80015fa:	f005 fe41 	bl	8007280 <iprintf>
	     printf("Turning Point Ratio: %f\n", turning_point_ratio);
 80015fe:	f507 6309 	add.w	r3, r7, #2192	; 0x890
 8001602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001606:	4808      	ldr	r0, [pc, #32]	; (8001628 <ppg_calculate+0x5c0>)
 8001608:	f005 fe3a 	bl	8007280 <iprintf>


	 }
 800160c:	bf00      	nop
 800160e:	4618      	mov	r0, r3
 8001610:	f507 6711 	add.w	r7, r7, #2320	; 0x910
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	3fd80000 	.word	0x3fd80000
 800161c:	080096c8 	.word	0x080096c8
 8001620:	080096e8 	.word	0x080096e8
 8001624:	0800970c 	.word	0x0800970c
 8001628:	0800972c 	.word	0x0800972c
 800162c:	d916872b 	.word	0xd916872b
 8001630:	3fe3f7ce 	.word	0x3fe3f7ce
 8001634:	00000000 	.word	0x00000000
 8001638:	407f2000 	.word	0x407f2000

0800163c <write>:
 * dev : device
 * reg : register to write to
 * data : what to write
 */
HAL_StatusTypeDef write( BH1790GLC *dev, uint8_t reg, uint8_t *data)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b08a      	sub	sp, #40	; 0x28
 8001640:	af04      	add	r7, sp, #16
 8001642:	60f8      	str	r0, [r7, #12]
 8001644:	460b      	mov	r3, r1
 8001646:	607a      	str	r2, [r7, #4]
 8001648:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef ret;

	//passing my handle, read from peripheral, get from this register, size of that register,
	// where to put the data, 1 byte of data, max delay
	ret = HAL_I2C_Mem_Write(dev->i2cHandle, (BH1790GLC_DEVICE_ADDRESS<<1), reg, 1, data, 1, HAL_MAX_DELAY);
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	6818      	ldr	r0, [r3, #0]
 800164e:	7afb      	ldrb	r3, [r7, #11]
 8001650:	b29a      	uxth	r2, r3
 8001652:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001656:	9302      	str	r3, [sp, #8]
 8001658:	2301      	movs	r3, #1
 800165a:	9301      	str	r3, [sp, #4]
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	9300      	str	r3, [sp, #0]
 8001660:	2301      	movs	r3, #1
 8001662:	21b6      	movs	r1, #182	; 0xb6
 8001664:	f001 fafa 	bl	8002c5c <HAL_I2C_Mem_Write>
 8001668:	4603      	mov	r3, r0
 800166a:	75fb      	strb	r3, [r7, #23]
	if(ret != HAL_OK){
 800166c:	7dfb      	ldrb	r3, [r7, #23]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d001      	beq.n	8001676 <write+0x3a>
		return ret;			//error check
 8001672:	7dfb      	ldrb	r3, [r7, #23]
 8001674:	e000      	b.n	8001678 <write+0x3c>
	}

	return HAL_OK;
 8001676:	2300      	movs	r3, #0
}
 8001678:	4618      	mov	r0, r3
 800167a:	3718      	adds	r7, #24
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}

08001680 <read>:
 * dev : device
 * reg : register to read from
 * data : stores what was read
 */
HAL_StatusTypeDef read( BH1790GLC *dev, uint8_t reg, uint8_t *data)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b08a      	sub	sp, #40	; 0x28
 8001684:	af04      	add	r7, sp, #16
 8001686:	60f8      	str	r0, [r7, #12]
 8001688:	460b      	mov	r3, r1
 800168a:	607a      	str	r2, [r7, #4]
 800168c:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef ret;

	ret = HAL_I2C_Mem_Read(dev->i2cHandle, (BH1790GLC_DEVICE_ADDRESS<<1), reg, 1, data, 1, HAL_MAX_DELAY);
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	6818      	ldr	r0, [r3, #0]
 8001692:	7afb      	ldrb	r3, [r7, #11]
 8001694:	b29a      	uxth	r2, r3
 8001696:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800169a:	9302      	str	r3, [sp, #8]
 800169c:	2301      	movs	r3, #1
 800169e:	9301      	str	r3, [sp, #4]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	9300      	str	r3, [sp, #0]
 80016a4:	2301      	movs	r3, #1
 80016a6:	21b6      	movs	r1, #182	; 0xb6
 80016a8:	f001 fbec 	bl	8002e84 <HAL_I2C_Mem_Read>
 80016ac:	4603      	mov	r3, r0
 80016ae:	75fb      	strb	r3, [r7, #23]
	if(ret != HAL_OK){
 80016b0:	7dfb      	ldrb	r3, [r7, #23]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d001      	beq.n	80016ba <read+0x3a>
		return ret;			//error check
 80016b6:	7dfb      	ldrb	r3, [r7, #23]
 80016b8:	e000      	b.n	80016bc <read+0x3c>
	}


	return HAL_OK;
 80016ba:	2300      	movs	r3, #0
}
 80016bc:	4618      	mov	r0, r3
 80016be:	3718      	adds	r7, #24
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}

080016c4 <many_reads>:
 * reg : register to read from
 * data : stores what was read
 * length : number of registers to read (in bytes)
 */
HAL_StatusTypeDef many_reads( BH1790GLC *dev, uint8_t reg, uint8_t *data, uint8_t length )
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b08a      	sub	sp, #40	; 0x28
 80016c8:	af04      	add	r7, sp, #16
 80016ca:	60f8      	str	r0, [r7, #12]
 80016cc:	607a      	str	r2, [r7, #4]
 80016ce:	461a      	mov	r2, r3
 80016d0:	460b      	mov	r3, r1
 80016d2:	72fb      	strb	r3, [r7, #11]
 80016d4:	4613      	mov	r3, r2
 80016d6:	72bb      	strb	r3, [r7, #10]
	HAL_StatusTypeDef ret;

	ret = HAL_I2C_Mem_Read(dev->i2cHandle, (BH1790GLC_DEVICE_ADDRESS<<1), reg, 1, data, length, HAL_MAX_DELAY);
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	6818      	ldr	r0, [r3, #0]
 80016dc:	7afb      	ldrb	r3, [r7, #11]
 80016de:	b29a      	uxth	r2, r3
 80016e0:	7abb      	ldrb	r3, [r7, #10]
 80016e2:	b29b      	uxth	r3, r3
 80016e4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80016e8:	9102      	str	r1, [sp, #8]
 80016ea:	9301      	str	r3, [sp, #4]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	9300      	str	r3, [sp, #0]
 80016f0:	2301      	movs	r3, #1
 80016f2:	21b6      	movs	r1, #182	; 0xb6
 80016f4:	f001 fbc6 	bl	8002e84 <HAL_I2C_Mem_Read>
 80016f8:	4603      	mov	r3, r0
 80016fa:	75fb      	strb	r3, [r7, #23]
	if(ret != HAL_OK){
 80016fc:	7dfb      	ldrb	r3, [r7, #23]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d001      	beq.n	8001706 <many_reads+0x42>
		return ret;			//error check
 8001702:	7dfb      	ldrb	r3, [r7, #23]
 8001704:	e000      	b.n	8001708 <many_reads+0x44>
	}

	return HAL_OK;
 8001706:	2300      	movs	r3, #0
}
 8001708:	4618      	mov	r0, r3
 800170a:	3718      	adds	r7, #24
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}

08001710 <ICM_PowerOn>:
INIT FUNCTIONS
******************************************************************************/
/*
 * Sequence to setup ICM290948 as early as possible after power on
 */
uint8_t ICM_PowerOn(ICM20948 *dev, SPI_HandleTypeDef *spiHandle) {
 8001710:	b580      	push	{r7, lr}
 8001712:	b084      	sub	sp, #16
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
 8001718:	6039      	str	r1, [r7, #0]
	dev->spiHandle = spiHandle;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	683a      	ldr	r2, [r7, #0]
 800171e:	601a      	str	r2, [r3, #0]

	dev->accel_data[0] = 0;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2200      	movs	r2, #0
 8001724:	809a      	strh	r2, [r3, #4]
	dev->accel_data[1] = 0;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2200      	movs	r2, #0
 800172a:	80da      	strh	r2, [r3, #6]
	dev->accel_data[2] = 0;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2200      	movs	r2, #0
 8001730:	811a      	strh	r2, [r3, #8]

	dev->gyro_data[0] = 0;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2200      	movs	r2, #0
 8001736:	815a      	strh	r2, [r3, #10]
	dev->gyro_data[1] = 0;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2200      	movs	r2, #0
 800173c:	819a      	strh	r2, [r3, #12]
	dev->gyro_data[2] = 0;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2200      	movs	r2, #0
 8001742:	81da      	strh	r2, [r3, #14]

	dev->mag_data[0] = 0;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2200      	movs	r2, #0
 8001748:	821a      	strh	r2, [r3, #16]
	dev->mag_data[1] = 0;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2200      	movs	r2, #0
 800174e:	825a      	strh	r2, [r3, #18]
	dev->mag_data[2] = 0;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2200      	movs	r2, #0
 8001754:	829a      	strh	r2, [r3, #20]

	/* Take initial reads to make sure SPI is working */
	uint8_t ret;
	ret = ICM_WHOAMI(dev);
 8001756:	6878      	ldr	r0, [r7, #4]
 8001758:	f000 f8f4 	bl	8001944 <ICM_WHOAMI>
 800175c:	4603      	mov	r3, r0
 800175e:	73fb      	strb	r3, [r7, #15]
	if (ret != WHO_AM_I){
 8001760:	7bfb      	ldrb	r3, [r7, #15]
 8001762:	2bea      	cmp	r3, #234	; 0xea
 8001764:	d001      	beq.n	800176a <ICM_PowerOn+0x5a>
		return ERR_WHO_AM_I;
 8001766:	230a      	movs	r3, #10
 8001768:	e028      	b.n	80017bc <ICM_PowerOn+0xac>
	}

	/* SPI is working -> start setting up the sensor */
	ICM_CSHigh();
 800176a:	f000 f91b 	bl	80019a4 <ICM_CSHigh>
	HAL_Delay(10);
 800176e:	200a      	movs	r0, #10
 8001770:	f000 ff1c 	bl	80025ac <HAL_Delay>
	ICM_SelectBank(dev, USER_BANK_0);
 8001774:	2100      	movs	r1, #0
 8001776:	6878      	ldr	r0, [r7, #4]
 8001778:	f000 f8f6 	bl	8001968 <ICM_SelectBank>
	HAL_Delay(10);
 800177c:	200a      	movs	r0, #10
 800177e:	f000 ff15 	bl	80025ac <HAL_Delay>
	ICM_Disable_I2C(dev);
 8001782:	6878      	ldr	r0, [r7, #4]
 8001784:	f000 f900 	bl	8001988 <ICM_Disable_I2C>
	HAL_Delay(10);
 8001788:	200a      	movs	r0, #10
 800178a:	f000 ff0f 	bl	80025ac <HAL_Delay>
	ICM_SetClock(dev, (uint8_t)CLK_BEST_AVAIL);
 800178e:	2101      	movs	r1, #1
 8001790:	6878      	ldr	r0, [r7, #4]
 8001792:	f000 f913 	bl	80019bc <ICM_SetClock>
	HAL_Delay(10);
 8001796:	200a      	movs	r0, #10
 8001798:	f000 ff08 	bl	80025ac <HAL_Delay>
	ICM_AccelGyroOff(dev);
 800179c:	6878      	ldr	r0, [r7, #4]
 800179e:	f000 f91d 	bl	80019dc <ICM_AccelGyroOff>
	HAL_Delay(20);
 80017a2:	2014      	movs	r0, #20
 80017a4:	f000 ff02 	bl	80025ac <HAL_Delay>
	ICM_AccelGyroOn(dev);
 80017a8:	6878      	ldr	r0, [r7, #4]
 80017aa:	f000 f924 	bl	80019f6 <ICM_AccelGyroOn>
	HAL_Delay(10);
 80017ae:	200a      	movs	r0, #10
 80017b0:	f000 fefc 	bl	80025ac <HAL_Delay>
	ICM_Initialize(dev);
 80017b4:	6878      	ldr	r0, [r7, #4]
 80017b6:	f000 f805 	bl	80017c4 <ICM_Initialize>

	return SUCCESS;
 80017ba:	2300      	movs	r3, #0
}
 80017bc:	4618      	mov	r0, r3
 80017be:	3710      	adds	r7, #16
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}

080017c4 <ICM_Initialize>:

uint8_t ICM_Initialize(ICM20948 *dev) {
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
	ICM_SelectBank(dev, USER_BANK_2);
 80017cc:	2120      	movs	r1, #32
 80017ce:	6878      	ldr	r0, [r7, #4]
 80017d0:	f000 f8ca 	bl	8001968 <ICM_SelectBank>
	HAL_Delay(20);
 80017d4:	2014      	movs	r0, #20
 80017d6:	f000 fee9 	bl	80025ac <HAL_Delay>
	ICM_SetGyroRateLPF(dev, GYRO_RATE_250, GYRO_LPF_17HZ);
 80017da:	2229      	movs	r2, #41	; 0x29
 80017dc:	2100      	movs	r1, #0
 80017de:	6878      	ldr	r0, [r7, #4]
 80017e0:	f000 f916 	bl	8001a10 <ICM_SetGyroRateLPF>
	HAL_Delay(10);
 80017e4:	200a      	movs	r0, #10
 80017e6:	f000 fee1 	bl	80025ac <HAL_Delay>

	// Set gyroscope sample rate to 100hz (0x0A) in GYRO_SMPLRT_DIV register (0x00)
	ICM_WriteOneByte(dev, 0x00, 0x0A);
 80017ea:	220a      	movs	r2, #10
 80017ec:	2100      	movs	r1, #0
 80017ee:	6878      	ldr	r0, [r7, #4]
 80017f0:	f000 f986 	bl	8001b00 <ICM_WriteOneByte>
	HAL_Delay(10);
 80017f4:	200a      	movs	r0, #10
 80017f6:	f000 fed9 	bl	80025ac <HAL_Delay>

	// Set accelerometer low pass filter to 136hz (0x11) and the rate to 16G (0x0C) in register ACCEL_CONFIG (0x14)
	ICM_WriteOneByte(dev, 0x14, (0x0C | 0x11));	// 8G --> 0x04
 80017fa:	221d      	movs	r2, #29
 80017fc:	2114      	movs	r1, #20
 80017fe:	6878      	ldr	r0, [r7, #4]
 8001800:	f000 f97e 	bl	8001b00 <ICM_WriteOneByte>

	// Set accelerometer sample rate to 225hz (0x00) in ACCEL_SMPLRT_DIV_1 register (0x10)
	ICM_WriteOneByte(dev, 0x10, 0x00);
 8001804:	2200      	movs	r2, #0
 8001806:	2110      	movs	r1, #16
 8001808:	6878      	ldr	r0, [r7, #4]
 800180a:	f000 f979 	bl	8001b00 <ICM_WriteOneByte>
	HAL_Delay(10);
 800180e:	200a      	movs	r0, #10
 8001810:	f000 fecc 	bl	80025ac <HAL_Delay>

	// Set accelerometer sample rate to 100 hz (0x0A) in ACCEL_SMPLRT_DIV_2 register (0x11)
	ICM_WriteOneByte(dev, 0x11, 0x0A);
 8001814:	220a      	movs	r2, #10
 8001816:	2111      	movs	r1, #17
 8001818:	6878      	ldr	r0, [r7, #4]
 800181a:	f000 f971 	bl	8001b00 <ICM_WriteOneByte>
	HAL_Delay(10);
 800181e:	200a      	movs	r0, #10
 8001820:	f000 fec4 	bl	80025ac <HAL_Delay>

	ICM_SelectBank(dev, USER_BANK_2);
 8001824:	2120      	movs	r1, #32
 8001826:	6878      	ldr	r0, [r7, #4]
 8001828:	f000 f89e 	bl	8001968 <ICM_SelectBank>
	HAL_Delay(20);
 800182c:	2014      	movs	r0, #20
 800182e:	f000 febd 	bl	80025ac <HAL_Delay>
//	// Initialize magnetometer
//	ICM_Mag_Write(dev, 0x32, 0x01); // Reset AK8963
//	HAL_Delay(1000);
//	ICM_Mag_Write(dev, 0x31, 0x02); // use i2c to set AK8963 working on Continuous measurement mode1 & 16-bit output

	return SUCCESS;
 8001832:	2300      	movs	r3, #0
}
 8001834:	4618      	mov	r0, r3
 8001836:	3708      	adds	r7, #8
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}

0800183c <ICM_ReadAccelGyroData>:
DATA ACQUISITION FUNCTIONS
******************************************************************************/
/*
 * Read Accelerometer and Gyro data
 */
void ICM_ReadAccelGyroData(ICM20948 *dev) {
 800183c:	b580      	push	{r7, lr}
 800183e:	b086      	sub	sp, #24
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
	uint8_t raw_data[12];
	ICM_readBytes(dev, 0x2D, raw_data, 12);
 8001844:	f107 020c 	add.w	r2, r7, #12
 8001848:	230c      	movs	r3, #12
 800184a:	212d      	movs	r1, #45	; 0x2d
 800184c:	6878      	ldr	r0, [r7, #4]
 800184e:	f000 f8f5 	bl	8001a3c <ICM_readBytes>

	dev->accel_data[0] = (raw_data[0] << 8) | raw_data[1];
 8001852:	7b3b      	ldrb	r3, [r7, #12]
 8001854:	021b      	lsls	r3, r3, #8
 8001856:	b21a      	sxth	r2, r3
 8001858:	7b7b      	ldrb	r3, [r7, #13]
 800185a:	b21b      	sxth	r3, r3
 800185c:	4313      	orrs	r3, r2
 800185e:	b21a      	sxth	r2, r3
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	809a      	strh	r2, [r3, #4]
	dev->accel_data[1] = (raw_data[2] << 8) | raw_data[3];
 8001864:	7bbb      	ldrb	r3, [r7, #14]
 8001866:	021b      	lsls	r3, r3, #8
 8001868:	b21a      	sxth	r2, r3
 800186a:	7bfb      	ldrb	r3, [r7, #15]
 800186c:	b21b      	sxth	r3, r3
 800186e:	4313      	orrs	r3, r2
 8001870:	b21a      	sxth	r2, r3
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	80da      	strh	r2, [r3, #6]
	dev->accel_data[2] = (raw_data[4] << 8) | raw_data[5];
 8001876:	7c3b      	ldrb	r3, [r7, #16]
 8001878:	021b      	lsls	r3, r3, #8
 800187a:	b21a      	sxth	r2, r3
 800187c:	7c7b      	ldrb	r3, [r7, #17]
 800187e:	b21b      	sxth	r3, r3
 8001880:	4313      	orrs	r3, r2
 8001882:	b21a      	sxth	r2, r3
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	811a      	strh	r2, [r3, #8]

	dev->gyro_data[0] = (raw_data[6] << 8) | raw_data[7];
 8001888:	7cbb      	ldrb	r3, [r7, #18]
 800188a:	021b      	lsls	r3, r3, #8
 800188c:	b21a      	sxth	r2, r3
 800188e:	7cfb      	ldrb	r3, [r7, #19]
 8001890:	b21b      	sxth	r3, r3
 8001892:	4313      	orrs	r3, r2
 8001894:	b21b      	sxth	r3, r3
 8001896:	b29a      	uxth	r2, r3
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	815a      	strh	r2, [r3, #10]
	dev->gyro_data[1] = (raw_data[8] << 8) | raw_data[9];
 800189c:	7d3b      	ldrb	r3, [r7, #20]
 800189e:	021b      	lsls	r3, r3, #8
 80018a0:	b21a      	sxth	r2, r3
 80018a2:	7d7b      	ldrb	r3, [r7, #21]
 80018a4:	b21b      	sxth	r3, r3
 80018a6:	4313      	orrs	r3, r2
 80018a8:	b21b      	sxth	r3, r3
 80018aa:	b29a      	uxth	r2, r3
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	819a      	strh	r2, [r3, #12]
	dev->gyro_data[2] = (raw_data[10] << 8) | raw_data[11];
 80018b0:	7dbb      	ldrb	r3, [r7, #22]
 80018b2:	021b      	lsls	r3, r3, #8
 80018b4:	b21a      	sxth	r2, r3
 80018b6:	7dfb      	ldrb	r3, [r7, #23]
 80018b8:	b21b      	sxth	r3, r3
 80018ba:	4313      	orrs	r3, r2
 80018bc:	b21b      	sxth	r3, r3
 80018be:	b29a      	uxth	r2, r3
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	81da      	strh	r2, [r3, #14]

	dev->accel_data[0] = dev->accel_data[0] / 8;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	da00      	bge.n	80018d0 <ICM_ReadAccelGyroData+0x94>
 80018ce:	3307      	adds	r3, #7
 80018d0:	10db      	asrs	r3, r3, #3
 80018d2:	b21a      	sxth	r2, r3
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	809a      	strh	r2, [r3, #4]
	dev->accel_data[1] = dev->accel_data[1] / 8;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	da00      	bge.n	80018e4 <ICM_ReadAccelGyroData+0xa8>
 80018e2:	3307      	adds	r3, #7
 80018e4:	10db      	asrs	r3, r3, #3
 80018e6:	b21a      	sxth	r2, r3
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	80da      	strh	r2, [r3, #6]
	dev->accel_data[2] = dev->accel_data[2] / 8;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	da00      	bge.n	80018f8 <ICM_ReadAccelGyroData+0xbc>
 80018f6:	3307      	adds	r3, #7
 80018f8:	10db      	asrs	r3, r3, #3
 80018fa:	b21a      	sxth	r2, r3
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	811a      	strh	r2, [r3, #8]

	dev->gyro_data[0] = dev->gyro_data[0] / 250;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	895b      	ldrh	r3, [r3, #10]
 8001904:	4a0e      	ldr	r2, [pc, #56]	; (8001940 <ICM_ReadAccelGyroData+0x104>)
 8001906:	fba2 2303 	umull	r2, r3, r2, r3
 800190a:	091b      	lsrs	r3, r3, #4
 800190c:	b29a      	uxth	r2, r3
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	815a      	strh	r2, [r3, #10]
	dev->gyro_data[1] = dev->gyro_data[1] / 250;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	899b      	ldrh	r3, [r3, #12]
 8001916:	4a0a      	ldr	r2, [pc, #40]	; (8001940 <ICM_ReadAccelGyroData+0x104>)
 8001918:	fba2 2303 	umull	r2, r3, r2, r3
 800191c:	091b      	lsrs	r3, r3, #4
 800191e:	b29a      	uxth	r2, r3
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	819a      	strh	r2, [r3, #12]
	dev->gyro_data[2] = dev->gyro_data[2] / 250;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	89db      	ldrh	r3, [r3, #14]
 8001928:	4a05      	ldr	r2, [pc, #20]	; (8001940 <ICM_ReadAccelGyroData+0x104>)
 800192a:	fba2 2303 	umull	r2, r3, r2, r3
 800192e:	091b      	lsrs	r3, r3, #4
 8001930:	b29a      	uxth	r2, r3
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	81da      	strh	r2, [r3, #14]
}
 8001936:	bf00      	nop
 8001938:	3718      	adds	r7, #24
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	10624dd3 	.word	0x10624dd3

08001944 <ICM_WHOAMI>:


/*****************************************************************************
CONFIG HELPERS
******************************************************************************/
uint8_t ICM_WHOAMI(ICM20948 *dev) {
 8001944:	b580      	push	{r7, lr}
 8001946:	b084      	sub	sp, #16
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
	uint8_t spiData = 0x01;
 800194c:	2301      	movs	r3, #1
 800194e:	73fb      	strb	r3, [r7, #15]
	ICM_ReadOneByte(dev, 0x00, &spiData);
 8001950:	f107 030f 	add.w	r3, r7, #15
 8001954:	461a      	mov	r2, r3
 8001956:	2100      	movs	r1, #0
 8001958:	6878      	ldr	r0, [r7, #4]
 800195a:	f000 f89f 	bl	8001a9c <ICM_ReadOneByte>
	return spiData;
 800195e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001960:	4618      	mov	r0, r3
 8001962:	3710      	adds	r7, #16
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}

08001968 <ICM_SelectBank>:

void ICM_SelectBank(ICM20948 *dev, uint8_t bank) {
 8001968:	b580      	push	{r7, lr}
 800196a:	b082      	sub	sp, #8
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
 8001970:	460b      	mov	r3, r1
 8001972:	70fb      	strb	r3, [r7, #3]
	ICM_WriteOneByte(dev, USER_BANK_SEL, bank);
 8001974:	78fb      	ldrb	r3, [r7, #3]
 8001976:	461a      	mov	r2, r3
 8001978:	217f      	movs	r1, #127	; 0x7f
 800197a:	6878      	ldr	r0, [r7, #4]
 800197c:	f000 f8c0 	bl	8001b00 <ICM_WriteOneByte>
}
 8001980:	bf00      	nop
 8001982:	3708      	adds	r7, #8
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}

08001988 <ICM_Disable_I2C>:

void ICM_Disable_I2C(ICM20948 *dev) {
 8001988:	b580      	push	{r7, lr}
 800198a:	b082      	sub	sp, #8
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
	ICM_WriteOneByte(dev, 0x03, 0x78);
 8001990:	2278      	movs	r2, #120	; 0x78
 8001992:	2103      	movs	r1, #3
 8001994:	6878      	ldr	r0, [r7, #4]
 8001996:	f000 f8b3 	bl	8001b00 <ICM_WriteOneByte>
}
 800199a:	bf00      	nop
 800199c:	3708      	adds	r7, #8
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
	...

080019a4 <ICM_CSHigh>:

void ICM_CSHigh(void) {
 80019a4:	b580      	push	{r7, lr}
 80019a6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ICM_CS_GPIO_Port, ICM_CS_Pin, SET);
 80019a8:	2201      	movs	r2, #1
 80019aa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80019ae:	4802      	ldr	r0, [pc, #8]	; (80019b8 <ICM_CSHigh+0x14>)
 80019b0:	f001 f8ac 	bl	8002b0c <HAL_GPIO_WritePin>
}
 80019b4:	bf00      	nop
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	48000400 	.word	0x48000400

080019bc <ICM_SetClock>:

void ICM_CSLow(void) {
	HAL_GPIO_WritePin(ICM_CS_GPIO_Port, ICM_CS_Pin, RESET);
}

void ICM_SetClock(ICM20948 *dev, uint8_t clk) {
 80019bc:	b580      	push	{r7, lr}
 80019be:	b082      	sub	sp, #8
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
 80019c4:	460b      	mov	r3, r1
 80019c6:	70fb      	strb	r3, [r7, #3]
	ICM_WriteOneByte(dev, PWR_MGMT_1, clk);
 80019c8:	78fb      	ldrb	r3, [r7, #3]
 80019ca:	461a      	mov	r2, r3
 80019cc:	2106      	movs	r1, #6
 80019ce:	6878      	ldr	r0, [r7, #4]
 80019d0:	f000 f896 	bl	8001b00 <ICM_WriteOneByte>
}
 80019d4:	bf00      	nop
 80019d6:	3708      	adds	r7, #8
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}

080019dc <ICM_AccelGyroOff>:

void ICM_AccelGyroOff(ICM20948 *dev) {
 80019dc:	b580      	push	{r7, lr}
 80019de:	b082      	sub	sp, #8
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
	ICM_WriteOneByte(dev, PWR_MGMT_2, (0x38 | 0x07));
 80019e4:	223f      	movs	r2, #63	; 0x3f
 80019e6:	2107      	movs	r1, #7
 80019e8:	6878      	ldr	r0, [r7, #4]
 80019ea:	f000 f889 	bl	8001b00 <ICM_WriteOneByte>
}
 80019ee:	bf00      	nop
 80019f0:	3708      	adds	r7, #8
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}

080019f6 <ICM_AccelGyroOn>:

void ICM_AccelGyroOn(ICM20948 *dev) {
 80019f6:	b580      	push	{r7, lr}
 80019f8:	b082      	sub	sp, #8
 80019fa:	af00      	add	r7, sp, #0
 80019fc:	6078      	str	r0, [r7, #4]
	ICM_WriteOneByte(dev, 0x07, (0x00 | 0x00));
 80019fe:	2200      	movs	r2, #0
 8001a00:	2107      	movs	r1, #7
 8001a02:	6878      	ldr	r0, [r7, #4]
 8001a04:	f000 f87c 	bl	8001b00 <ICM_WriteOneByte>
}
 8001a08:	bf00      	nop
 8001a0a:	3708      	adds	r7, #8
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}

08001a10 <ICM_SetGyroRateLPF>:

void ICM_SetGyroRateLPF(ICM20948 *dev, uint8_t rate, uint8_t lpf) {
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
 8001a18:	460b      	mov	r3, r1
 8001a1a:	70fb      	strb	r3, [r7, #3]
 8001a1c:	4613      	mov	r3, r2
 8001a1e:	70bb      	strb	r3, [r7, #2]
	ICM_WriteOneByte(dev, GYRO_CONFIG_1, (rate|lpf));
 8001a20:	78fa      	ldrb	r2, [r7, #3]
 8001a22:	78bb      	ldrb	r3, [r7, #2]
 8001a24:	4313      	orrs	r3, r2
 8001a26:	b2db      	uxtb	r3, r3
 8001a28:	461a      	mov	r2, r3
 8001a2a:	2101      	movs	r1, #1
 8001a2c:	6878      	ldr	r0, [r7, #4]
 8001a2e:	f000 f867 	bl	8001b00 <ICM_WriteOneByte>
}
 8001a32:	bf00      	nop
 8001a34:	3708      	adds	r7, #8
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
	...

08001a3c <ICM_readBytes>:

/*****************************************************************************
LOW-LEVEL FUNCTIONS
******************************************************************************/
void ICM_readBytes(ICM20948 *dev, uint8_t reg, uint8_t *pData, uint16_t Size)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b084      	sub	sp, #16
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	60f8      	str	r0, [r7, #12]
 8001a44:	607a      	str	r2, [r7, #4]
 8001a46:	461a      	mov	r2, r3
 8001a48:	460b      	mov	r3, r1
 8001a4a:	72fb      	strb	r3, [r7, #11]
 8001a4c:	4613      	mov	r3, r2
 8001a4e:	813b      	strh	r3, [r7, #8]
	reg = reg | 0x80;
 8001a50:	7afb      	ldrb	r3, [r7, #11]
 8001a52:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001a56:	b2db      	uxtb	r3, r3
 8001a58:	72fb      	strb	r3, [r7, #11]
	HAL_GPIO_WritePin(ICM_CS_GPIO_Port, ICM_CS_Pin, GPIO_PIN_RESET);
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001a60:	480d      	ldr	r0, [pc, #52]	; (8001a98 <ICM_readBytes+0x5c>)
 8001a62:	f001 f853 	bl	8002b0c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(dev->spiHandle, &reg, 1, 100);
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	6818      	ldr	r0, [r3, #0]
 8001a6a:	f107 010b 	add.w	r1, r7, #11
 8001a6e:	2364      	movs	r3, #100	; 0x64
 8001a70:	2201      	movs	r2, #1
 8001a72:	f003 fc10 	bl	8005296 <HAL_SPI_Transmit>
	HAL_SPI_Receive(dev->spiHandle, pData, Size, 100);
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	6818      	ldr	r0, [r3, #0]
 8001a7a:	893a      	ldrh	r2, [r7, #8]
 8001a7c:	2364      	movs	r3, #100	; 0x64
 8001a7e:	6879      	ldr	r1, [r7, #4]
 8001a80:	f003 fd77 	bl	8005572 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(ICM_CS_GPIO_Port, ICM_CS_Pin, GPIO_PIN_SET);
 8001a84:	2201      	movs	r2, #1
 8001a86:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001a8a:	4803      	ldr	r0, [pc, #12]	; (8001a98 <ICM_readBytes+0x5c>)
 8001a8c:	f001 f83e 	bl	8002b0c <HAL_GPIO_WritePin>
}
 8001a90:	bf00      	nop
 8001a92:	3710      	adds	r7, #16
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	48000400 	.word	0x48000400

08001a9c <ICM_ReadOneByte>:
	HAL_GPIO_WritePin(ICM_CS_GPIO_Port, ICM_CS_Pin, GPIO_PIN_SET);

}

void ICM_ReadOneByte(ICM20948 *dev, uint8_t reg, uint8_t* pData)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b086      	sub	sp, #24
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	60f8      	str	r0, [r7, #12]
 8001aa4:	460b      	mov	r3, r1
 8001aa6:	607a      	str	r2, [r7, #4]
 8001aa8:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef status;

	reg = reg | 0x80;													//first bit 1 indicates read
 8001aaa:	7afb      	ldrb	r3, [r7, #11]
 8001aac:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	72fb      	strb	r3, [r7, #11]
	HAL_GPIO_WritePin(ICM_CS_GPIO_Port, ICM_CS_Pin, GPIO_PIN_RESET);	//enable SPI
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001aba:	4810      	ldr	r0, [pc, #64]	; (8001afc <ICM_ReadOneByte+0x60>)
 8001abc:	f001 f826 	bl	8002b0c <HAL_GPIO_WritePin>
	//HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);			//turn off green LED

	status = HAL_SPI_Transmit(dev->spiHandle, &reg, 1, 100);
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	6818      	ldr	r0, [r3, #0]
 8001ac4:	f107 010b 	add.w	r1, r7, #11
 8001ac8:	2364      	movs	r3, #100	; 0x64
 8001aca:	2201      	movs	r2, #1
 8001acc:	f003 fbe3 	bl	8005296 <HAL_SPI_Transmit>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	75fb      	strb	r3, [r7, #23]
	status = HAL_SPI_Receive(dev->spiHandle, pData, 1, 100);
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	6818      	ldr	r0, [r3, #0]
 8001ad8:	2364      	movs	r3, #100	; 0x64
 8001ada:	2201      	movs	r2, #1
 8001adc:	6879      	ldr	r1, [r7, #4]
 8001ade:	f003 fd48 	bl	8005572 <HAL_SPI_Receive>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	75fb      	strb	r3, [r7, #23]

	HAL_GPIO_WritePin(ICM_CS_GPIO_Port, ICM_CS_Pin, GPIO_PIN_SET);		//disable SPI
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001aec:	4803      	ldr	r0, [pc, #12]	; (8001afc <ICM_ReadOneByte+0x60>)
 8001aee:	f001 f80d 	bl	8002b0c <HAL_GPIO_WritePin>
	//HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);			//turn on green LED
}
 8001af2:	bf00      	nop
 8001af4:	3718      	adds	r7, #24
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	48000400 	.word	0x48000400

08001b00 <ICM_WriteOneByte>:

void ICM_WriteOneByte(ICM20948 *dev, uint8_t reg, uint8_t Data)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b084      	sub	sp, #16
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
 8001b08:	460b      	mov	r3, r1
 8001b0a:	70fb      	strb	r3, [r7, #3]
 8001b0c:	4613      	mov	r3, r2
 8001b0e:	70bb      	strb	r3, [r7, #2]
	HAL_StatusTypeDef status;

	reg = reg & 0x7F;													//first bit 0 indicates write
 8001b10:	78fb      	ldrb	r3, [r7, #3]
 8001b12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001b16:	b2db      	uxtb	r3, r3
 8001b18:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(ICM_CS_GPIO_Port, ICM_CS_Pin, GPIO_PIN_RESET);	//set CS pin low
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001b20:	480f      	ldr	r0, [pc, #60]	; (8001b60 <ICM_WriteOneByte+0x60>)
 8001b22:	f000 fff3 	bl	8002b0c <HAL_GPIO_WritePin>
	status = HAL_SPI_Transmit(dev->spiHandle, &reg, 1, 100);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6818      	ldr	r0, [r3, #0]
 8001b2a:	1cf9      	adds	r1, r7, #3
 8001b2c:	2364      	movs	r3, #100	; 0x64
 8001b2e:	2201      	movs	r2, #1
 8001b30:	f003 fbb1 	bl	8005296 <HAL_SPI_Transmit>
 8001b34:	4603      	mov	r3, r0
 8001b36:	73fb      	strb	r3, [r7, #15]
	status = HAL_SPI_Transmit(dev->spiHandle, &Data, 1, 100);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6818      	ldr	r0, [r3, #0]
 8001b3c:	1cb9      	adds	r1, r7, #2
 8001b3e:	2364      	movs	r3, #100	; 0x64
 8001b40:	2201      	movs	r2, #1
 8001b42:	f003 fba8 	bl	8005296 <HAL_SPI_Transmit>
 8001b46:	4603      	mov	r3, r0
 8001b48:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(ICM_CS_GPIO_Port, ICM_CS_Pin, GPIO_PIN_SET);		//set CS pin high
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001b50:	4803      	ldr	r0, [pc, #12]	; (8001b60 <ICM_WriteOneByte+0x60>)
 8001b52:	f000 ffdb 	bl	8002b0c <HAL_GPIO_WritePin>
}
 8001b56:	bf00      	nop
 8001b58:	3710      	adds	r7, #16
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	48000400 	.word	0x48000400

08001b64 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b082      	sub	sp, #8
 8001b68:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b6a:	f000 fcaa 	bl	80024c2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b6e:	f000 f893 	bl	8001c98 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b72:	f000 f9b1 	bl	8001ed8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001b76:	f000 f8d7 	bl	8001d28 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8001b7a:	f000 f97d 	bl	8001e78 <MX_USART1_UART_Init>
  MX_LPTIM1_Init();
 8001b7e:	f000 f911 	bl	8001da4 <MX_LPTIM1_Init>
  MX_SPI2_Init();
 8001b82:	f000 f93b 	bl	8001dfc <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  /* Set up heart rate sensor */
  uint8_t status;									//see BH1780GLC.h for err codes

  printf("Configuring PPG sensor...");
 8001b86:	4839      	ldr	r0, [pc, #228]	; (8001c6c <main+0x108>)
 8001b88:	f005 fb7a 	bl	8007280 <iprintf>
  HAL_Delay(10);									//wait as a precaution
 8001b8c:	200a      	movs	r0, #10
 8001b8e:	f000 fd0d 	bl	80025ac <HAL_Delay>
  status = BH1790GLC_init(&hrm, &hi2c1);			//configure sensor
 8001b92:	4937      	ldr	r1, [pc, #220]	; (8001c70 <main+0x10c>)
 8001b94:	4837      	ldr	r0, [pc, #220]	; (8001c74 <main+0x110>)
 8001b96:	f7ff f989 	bl	8000eac <BH1790GLC_init>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	70fb      	strb	r3, [r7, #3]
  if(status != 0){
 8001b9e:	78fb      	ldrb	r3, [r7, #3]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d008      	beq.n	8001bb6 <main+0x52>
	  printf("Error configuring sensor. Status code: %d\n\r", status);
 8001ba4:	78fb      	ldrb	r3, [r7, #3]
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	4833      	ldr	r0, [pc, #204]	; (8001c78 <main+0x114>)
 8001baa:	f005 fb69 	bl	8007280 <iprintf>
	  sensorReady = 0;
 8001bae:	4b33      	ldr	r3, [pc, #204]	; (8001c7c <main+0x118>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	701a      	strb	r2, [r3, #0]
 8001bb4:	e007      	b.n	8001bc6 <main+0x62>
  }else{
	  printf("Sensor configured successfully. Status code: %d\n\r", status);
 8001bb6:	78fb      	ldrb	r3, [r7, #3]
 8001bb8:	4619      	mov	r1, r3
 8001bba:	4831      	ldr	r0, [pc, #196]	; (8001c80 <main+0x11c>)
 8001bbc:	f005 fb60 	bl	8007280 <iprintf>
	  sensorReady = 1;
 8001bc0:	4b2e      	ldr	r3, [pc, #184]	; (8001c7c <main+0x118>)
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	701a      	strb	r2, [r3, #0]
  }

  /* Set up timer */
  if(HAL_LPTIM_TimeOut_Start_IT(&hlptim1, PERIOD, TIMEOUT) != HAL_OK){  //pointer to the handler, period, timeout val to start the timer
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	f44f 6183 	mov.w	r1, #1048	; 0x418
 8001bcc:	482d      	ldr	r0, [pc, #180]	; (8001c84 <main+0x120>)
 8001bce:	f001 fe53 	bl	8003878 <HAL_LPTIM_TimeOut_Start_IT>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d001      	beq.n	8001bdc <main+0x78>
	  Error_Handler();
 8001bd8:	f000 f9e0 	bl	8001f9c <Error_Handler>
  }

  /* Set up IMU */
  printf("Configuring IMU...");
 8001bdc:	482a      	ldr	r0, [pc, #168]	; (8001c88 <main+0x124>)
 8001bde:	f005 fb4f 	bl	8007280 <iprintf>
  HAL_Delay(10);									//wait as a precaution
 8001be2:	200a      	movs	r0, #10
 8001be4:	f000 fce2 	bl	80025ac <HAL_Delay>
  ICM_SelectBank(&imu, USER_BANK_0);				//specify register bank
 8001be8:	2100      	movs	r1, #0
 8001bea:	4828      	ldr	r0, [pc, #160]	; (8001c8c <main+0x128>)
 8001bec:	f7ff febc 	bl	8001968 <ICM_SelectBank>
  HAL_Delay(10);									//wait as a precaution
 8001bf0:	200a      	movs	r0, #10
 8001bf2:	f000 fcdb 	bl	80025ac <HAL_Delay>
  ICM_PowerOn(&imu, &hspi2);						//configure sensor
 8001bf6:	4926      	ldr	r1, [pc, #152]	; (8001c90 <main+0x12c>)
 8001bf8:	4824      	ldr	r0, [pc, #144]	; (8001c8c <main+0x128>)
 8001bfa:	f7ff fd89 	bl	8001710 <ICM_PowerOn>
  HAL_Delay(10);									//wait as a precaution
 8001bfe:	200a      	movs	r0, #10
 8001c00:	f000 fcd4 	bl	80025ac <HAL_Delay>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	if(sensorReady){
 8001c04:	4b1d      	ldr	r3, [pc, #116]	; (8001c7c <main+0x118>)
 8001c06:	781b      	ldrb	r3, [r3, #0]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d023      	beq.n	8001c54 <main+0xf0>
		sensorReady = BUSY;		//flag set back to READY in interrupt every 32 ms
 8001c0c:	4b1b      	ldr	r3, [pc, #108]	; (8001c7c <main+0x118>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	701a      	strb	r2, [r3, #0]

		uint8_t err;

		err = get_val(&hrm);
 8001c12:	4818      	ldr	r0, [pc, #96]	; (8001c74 <main+0x110>)
 8001c14:	f7ff f9cb 	bl	8000fae <get_val>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	70bb      	strb	r3, [r7, #2]
		if(err != 0){
 8001c1c:	78bb      	ldrb	r3, [r7, #2]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d005      	beq.n	8001c2e <main+0xca>
			printf("Could not read sensor. Error code: %d\n\r", err);
 8001c22:	78bb      	ldrb	r3, [r7, #2]
 8001c24:	4619      	mov	r1, r3
 8001c26:	481b      	ldr	r0, [pc, #108]	; (8001c94 <main+0x130>)
 8001c28:	f005 fb2a 	bl	8007280 <iprintf>
 8001c2c:	e012      	b.n	8001c54 <main+0xf0>
		}else{

			if(add_sample(&hrm)==1){
 8001c2e:	4811      	ldr	r0, [pc, #68]	; (8001c74 <main+0x110>)
 8001c30:	f7ff f9e8 	bl	8001004 <add_sample>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b01      	cmp	r3, #1
 8001c38:	d10c      	bne.n	8001c54 <main+0xf0>
				ppg_calculate(&hrm);
 8001c3a:	480e      	ldr	r0, [pc, #56]	; (8001c74 <main+0x110>)
 8001c3c:	f7ff fa14 	bl	8001068 <ppg_calculate>
				for(int i = 100; i < 500; i++){
 8001c40:	2364      	movs	r3, #100	; 0x64
 8001c42:	607b      	str	r3, [r7, #4]
 8001c44:	e002      	b.n	8001c4c <main+0xe8>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	3301      	adds	r3, #1
 8001c4a:	607b      	str	r3, [r7, #4]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001c52:	dbf8      	blt.n	8001c46 <main+0xe2>
	}else{
		//not ready
	}

	// Select User Bank 0
	ICM_SelectBank(&imu, USER_BANK_0);
 8001c54:	2100      	movs	r1, #0
 8001c56:	480d      	ldr	r0, [pc, #52]	; (8001c8c <main+0x128>)
 8001c58:	f7ff fe86 	bl	8001968 <ICM_SelectBank>
	ICM_ReadAccelGyroData(&imu);
 8001c5c:	480b      	ldr	r0, [pc, #44]	; (8001c8c <main+0x128>)
 8001c5e:	f7ff fded 	bl	800183c <ICM_ReadAccelGyroData>
	HAL_Delay(5);
 8001c62:	2005      	movs	r0, #5
 8001c64:	f000 fca2 	bl	80025ac <HAL_Delay>
	if(sensorReady){
 8001c68:	e7cc      	b.n	8001c04 <main+0xa0>
 8001c6a:	bf00      	nop
 8001c6c:	08009748 	.word	0x08009748
 8001c70:	200001f8 	.word	0x200001f8
 8001c74:	2000036c 	.word	0x2000036c
 8001c78:	08009764 	.word	0x08009764
 8001c7c:	20000b60 	.word	0x20000b60
 8001c80:	08009790 	.word	0x08009790
 8001c84:	2000024c 	.word	0x2000024c
 8001c88:	080097c4 	.word	0x080097c4
 8001c8c:	20000b48 	.word	0x20000b48
 8001c90:	20000284 	.word	0x20000284
 8001c94:	080097d8 	.word	0x080097d8

08001c98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b096      	sub	sp, #88	; 0x58
 8001c9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c9e:	f107 0314 	add.w	r3, r7, #20
 8001ca2:	2244      	movs	r2, #68	; 0x44
 8001ca4:	2100      	movs	r1, #0
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f004 fe78 	bl	800699c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001cac:	463b      	mov	r3, r7
 8001cae:	2200      	movs	r2, #0
 8001cb0:	601a      	str	r2, [r3, #0]
 8001cb2:	605a      	str	r2, [r3, #4]
 8001cb4:	609a      	str	r2, [r3, #8]
 8001cb6:	60da      	str	r2, [r3, #12]
 8001cb8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001cba:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001cbe:	f002 f87d 	bl	8003dbc <HAL_PWREx_ControlVoltageScaling>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d001      	beq.n	8001ccc <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001cc8:	f000 f968 	bl	8001f9c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_MSI;
 8001ccc:	2318      	movs	r3, #24
 8001cce:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001cdc:	2360      	movs	r3, #96	; 0x60
 8001cde:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ce4:	f107 0314 	add.w	r3, r7, #20
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f002 f8bd 	bl	8003e68 <HAL_RCC_OscConfig>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d001      	beq.n	8001cf8 <SystemClock_Config+0x60>
  {
    Error_Handler();
 8001cf4:	f000 f952 	bl	8001f9c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001cf8:	230f      	movs	r3, #15
 8001cfa:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d00:	2300      	movs	r3, #0
 8001d02:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001d04:	2300      	movs	r3, #0
 8001d06:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001d0c:	463b      	mov	r3, r7
 8001d0e:	2100      	movs	r1, #0
 8001d10:	4618      	mov	r0, r3
 8001d12:	f002 fcbd 	bl	8004690 <HAL_RCC_ClockConfig>
 8001d16:	4603      	mov	r3, r0
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d001      	beq.n	8001d20 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8001d1c:	f000 f93e 	bl	8001f9c <Error_Handler>
  }
}
 8001d20:	bf00      	nop
 8001d22:	3758      	adds	r7, #88	; 0x58
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}

08001d28 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001d2c:	4b1b      	ldr	r3, [pc, #108]	; (8001d9c <MX_I2C1_Init+0x74>)
 8001d2e:	4a1c      	ldr	r2, [pc, #112]	; (8001da0 <MX_I2C1_Init+0x78>)
 8001d30:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000E14;
 8001d32:	4b1a      	ldr	r3, [pc, #104]	; (8001d9c <MX_I2C1_Init+0x74>)
 8001d34:	f640 6214 	movw	r2, #3604	; 0xe14
 8001d38:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001d3a:	4b18      	ldr	r3, [pc, #96]	; (8001d9c <MX_I2C1_Init+0x74>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d40:	4b16      	ldr	r3, [pc, #88]	; (8001d9c <MX_I2C1_Init+0x74>)
 8001d42:	2201      	movs	r2, #1
 8001d44:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d46:	4b15      	ldr	r3, [pc, #84]	; (8001d9c <MX_I2C1_Init+0x74>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001d4c:	4b13      	ldr	r3, [pc, #76]	; (8001d9c <MX_I2C1_Init+0x74>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001d52:	4b12      	ldr	r3, [pc, #72]	; (8001d9c <MX_I2C1_Init+0x74>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d58:	4b10      	ldr	r3, [pc, #64]	; (8001d9c <MX_I2C1_Init+0x74>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d5e:	4b0f      	ldr	r3, [pc, #60]	; (8001d9c <MX_I2C1_Init+0x74>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001d64:	480d      	ldr	r0, [pc, #52]	; (8001d9c <MX_I2C1_Init+0x74>)
 8001d66:	f000 fee9 	bl	8002b3c <HAL_I2C_Init>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d001      	beq.n	8001d74 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001d70:	f000 f914 	bl	8001f9c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001d74:	2100      	movs	r1, #0
 8001d76:	4809      	ldr	r0, [pc, #36]	; (8001d9c <MX_I2C1_Init+0x74>)
 8001d78:	f001 fc44 	bl	8003604 <HAL_I2CEx_ConfigAnalogFilter>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d001      	beq.n	8001d86 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8001d82:	f000 f90b 	bl	8001f9c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001d86:	2100      	movs	r1, #0
 8001d88:	4804      	ldr	r0, [pc, #16]	; (8001d9c <MX_I2C1_Init+0x74>)
 8001d8a:	f001 fc86 	bl	800369a <HAL_I2CEx_ConfigDigitalFilter>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d001      	beq.n	8001d98 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001d94:	f000 f902 	bl	8001f9c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001d98:	bf00      	nop
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	200001f8 	.word	0x200001f8
 8001da0:	40005400 	.word	0x40005400

08001da4 <MX_LPTIM1_Init>:
  * @brief LPTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM1_Init(void)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 8001da8:	4b12      	ldr	r3, [pc, #72]	; (8001df4 <MX_LPTIM1_Init+0x50>)
 8001daa:	4a13      	ldr	r2, [pc, #76]	; (8001df8 <MX_LPTIM1_Init+0x54>)
 8001dac:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8001dae:	4b11      	ldr	r3, [pc, #68]	; (8001df4 <MX_LPTIM1_Init+0x50>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 8001db4:	4b0f      	ldr	r3, [pc, #60]	; (8001df4 <MX_LPTIM1_Init+0x50>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8001dba:	4b0e      	ldr	r3, [pc, #56]	; (8001df4 <MX_LPTIM1_Init+0x50>)
 8001dbc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001dc0:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8001dc2:	4b0c      	ldr	r3, [pc, #48]	; (8001df4 <MX_LPTIM1_Init+0x50>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8001dc8:	4b0a      	ldr	r3, [pc, #40]	; (8001df4 <MX_LPTIM1_Init+0x50>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 8001dce:	4b09      	ldr	r3, [pc, #36]	; (8001df4 <MX_LPTIM1_Init+0x50>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	629a      	str	r2, [r3, #40]	; 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8001dd4:	4b07      	ldr	r3, [pc, #28]	; (8001df4 <MX_LPTIM1_Init+0x50>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	62da      	str	r2, [r3, #44]	; 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 8001dda:	4b06      	ldr	r3, [pc, #24]	; (8001df4 <MX_LPTIM1_Init+0x50>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 8001de0:	4804      	ldr	r0, [pc, #16]	; (8001df4 <MX_LPTIM1_Init+0x50>)
 8001de2:	f001 fca7 	bl	8003734 <HAL_LPTIM_Init>
 8001de6:	4603      	mov	r3, r0
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d001      	beq.n	8001df0 <MX_LPTIM1_Init+0x4c>
  {
    Error_Handler();
 8001dec:	f000 f8d6 	bl	8001f9c <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 8001df0:	bf00      	nop
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	2000024c 	.word	0x2000024c
 8001df8:	40007c00 	.word	0x40007c00

08001dfc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001e00:	4b1b      	ldr	r3, [pc, #108]	; (8001e70 <MX_SPI2_Init+0x74>)
 8001e02:	4a1c      	ldr	r2, [pc, #112]	; (8001e74 <MX_SPI2_Init+0x78>)
 8001e04:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001e06:	4b1a      	ldr	r3, [pc, #104]	; (8001e70 <MX_SPI2_Init+0x74>)
 8001e08:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001e0c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001e0e:	4b18      	ldr	r3, [pc, #96]	; (8001e70 <MX_SPI2_Init+0x74>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8001e14:	4b16      	ldr	r3, [pc, #88]	; (8001e70 <MX_SPI2_Init+0x74>)
 8001e16:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001e1a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e1c:	4b14      	ldr	r3, [pc, #80]	; (8001e70 <MX_SPI2_Init+0x74>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001e22:	4b13      	ldr	r3, [pc, #76]	; (8001e70 <MX_SPI2_Init+0x74>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001e28:	4b11      	ldr	r3, [pc, #68]	; (8001e70 <MX_SPI2_Init+0x74>)
 8001e2a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e2e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001e30:	4b0f      	ldr	r3, [pc, #60]	; (8001e70 <MX_SPI2_Init+0x74>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e36:	4b0e      	ldr	r3, [pc, #56]	; (8001e70 <MX_SPI2_Init+0x74>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e3c:	4b0c      	ldr	r3, [pc, #48]	; (8001e70 <MX_SPI2_Init+0x74>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e42:	4b0b      	ldr	r3, [pc, #44]	; (8001e70 <MX_SPI2_Init+0x74>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001e48:	4b09      	ldr	r3, [pc, #36]	; (8001e70 <MX_SPI2_Init+0x74>)
 8001e4a:	2207      	movs	r2, #7
 8001e4c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001e4e:	4b08      	ldr	r3, [pc, #32]	; (8001e70 <MX_SPI2_Init+0x74>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001e54:	4b06      	ldr	r3, [pc, #24]	; (8001e70 <MX_SPI2_Init+0x74>)
 8001e56:	2208      	movs	r2, #8
 8001e58:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001e5a:	4805      	ldr	r0, [pc, #20]	; (8001e70 <MX_SPI2_Init+0x74>)
 8001e5c:	f003 f978 	bl	8005150 <HAL_SPI_Init>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d001      	beq.n	8001e6a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001e66:	f000 f899 	bl	8001f9c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001e6a:	bf00      	nop
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	20000284 	.word	0x20000284
 8001e74:	40003800 	.word	0x40003800

08001e78 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001e7c:	4b14      	ldr	r3, [pc, #80]	; (8001ed0 <MX_USART1_UART_Init+0x58>)
 8001e7e:	4a15      	ldr	r2, [pc, #84]	; (8001ed4 <MX_USART1_UART_Init+0x5c>)
 8001e80:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001e82:	4b13      	ldr	r3, [pc, #76]	; (8001ed0 <MX_USART1_UART_Init+0x58>)
 8001e84:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e88:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001e8a:	4b11      	ldr	r3, [pc, #68]	; (8001ed0 <MX_USART1_UART_Init+0x58>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001e90:	4b0f      	ldr	r3, [pc, #60]	; (8001ed0 <MX_USART1_UART_Init+0x58>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_ODD;
 8001e96:	4b0e      	ldr	r3, [pc, #56]	; (8001ed0 <MX_USART1_UART_Init+0x58>)
 8001e98:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8001e9c:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001e9e:	4b0c      	ldr	r3, [pc, #48]	; (8001ed0 <MX_USART1_UART_Init+0x58>)
 8001ea0:	220c      	movs	r2, #12
 8001ea2:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ea4:	4b0a      	ldr	r3, [pc, #40]	; (8001ed0 <MX_USART1_UART_Init+0x58>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001eaa:	4b09      	ldr	r3, [pc, #36]	; (8001ed0 <MX_USART1_UART_Init+0x58>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001eb0:	4b07      	ldr	r3, [pc, #28]	; (8001ed0 <MX_USART1_UART_Init+0x58>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001eb6:	4b06      	ldr	r3, [pc, #24]	; (8001ed0 <MX_USART1_UART_Init+0x58>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001ebc:	4804      	ldr	r0, [pc, #16]	; (8001ed0 <MX_USART1_UART_Init+0x58>)
 8001ebe:	f004 f857 	bl	8005f70 <HAL_UART_Init>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d001      	beq.n	8001ecc <MX_USART1_UART_Init+0x54>
  {
    Error_Handler();
 8001ec8:	f000 f868 	bl	8001f9c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001ecc:	bf00      	nop
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	200002e8 	.word	0x200002e8
 8001ed4:	40013800 	.word	0x40013800

08001ed8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b088      	sub	sp, #32
 8001edc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ede:	f107 030c 	add.w	r3, r7, #12
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	601a      	str	r2, [r3, #0]
 8001ee6:	605a      	str	r2, [r3, #4]
 8001ee8:	609a      	str	r2, [r3, #8]
 8001eea:	60da      	str	r2, [r3, #12]
 8001eec:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eee:	4b18      	ldr	r3, [pc, #96]	; (8001f50 <MX_GPIO_Init+0x78>)
 8001ef0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ef2:	4a17      	ldr	r2, [pc, #92]	; (8001f50 <MX_GPIO_Init+0x78>)
 8001ef4:	f043 0302 	orr.w	r3, r3, #2
 8001ef8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001efa:	4b15      	ldr	r3, [pc, #84]	; (8001f50 <MX_GPIO_Init+0x78>)
 8001efc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001efe:	f003 0302 	and.w	r3, r3, #2
 8001f02:	60bb      	str	r3, [r7, #8]
 8001f04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f06:	4b12      	ldr	r3, [pc, #72]	; (8001f50 <MX_GPIO_Init+0x78>)
 8001f08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f0a:	4a11      	ldr	r2, [pc, #68]	; (8001f50 <MX_GPIO_Init+0x78>)
 8001f0c:	f043 0301 	orr.w	r3, r3, #1
 8001f10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f12:	4b0f      	ldr	r3, [pc, #60]	; (8001f50 <MX_GPIO_Init+0x78>)
 8001f14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f16:	f003 0301 	and.w	r3, r3, #1
 8001f1a:	607b      	str	r3, [r7, #4]
 8001f1c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 8001f1e:	2200      	movs	r2, #0
 8001f20:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f24:	480b      	ldr	r0, [pc, #44]	; (8001f54 <MX_GPIO_Init+0x7c>)
 8001f26:	f000 fdf1 	bl	8002b0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001f2a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001f2e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f30:	2301      	movs	r3, #1
 8001f32:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f34:	2300      	movs	r3, #0
 8001f36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f3c:	f107 030c 	add.w	r3, r7, #12
 8001f40:	4619      	mov	r1, r3
 8001f42:	4804      	ldr	r0, [pc, #16]	; (8001f54 <MX_GPIO_Init+0x7c>)
 8001f44:	f000 fc68 	bl	8002818 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001f48:	bf00      	nop
 8001f4a:	3720      	adds	r7, #32
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	40021000 	.word	0x40021000
 8001f54:	48000400 	.word	0x48000400

08001f58 <HAL_LPTIM_CompareMatchCallback>:
/* USER CODE BEGIN 4 */

/*
 * Redefinition of the low power timer interrupt
 */
void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim){
 8001f58:	b480      	push	{r7}
 8001f5a:	b083      	sub	sp, #12
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
	sensorReady = READY;
 8001f60:	4b04      	ldr	r3, [pc, #16]	; (8001f74 <HAL_LPTIM_CompareMatchCallback+0x1c>)
 8001f62:	2201      	movs	r2, #1
 8001f64:	701a      	strb	r2, [r3, #0]
	//printf("inside interrupt: sensorReady");
}
 8001f66:	bf00      	nop
 8001f68:	370c      	adds	r7, #12
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr
 8001f72:	bf00      	nop
 8001f74:	20000b60 	.word	0x20000b60

08001f78 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b082      	sub	sp, #8
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001f80:	1d39      	adds	r1, r7, #4
 8001f82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f86:	2201      	movs	r2, #1
 8001f88:	4803      	ldr	r0, [pc, #12]	; (8001f98 <__io_putchar+0x20>)
 8001f8a:	f004 f83f 	bl	800600c <HAL_UART_Transmit>

  return ch;
 8001f8e:	687b      	ldr	r3, [r7, #4]
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	3708      	adds	r7, #8
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	200002e8 	.word	0x200002e8

08001f9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001fa0:	b672      	cpsid	i
}
 8001fa2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001fa4:	e7fe      	b.n	8001fa4 <Error_Handler+0x8>
	...

08001fa8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b083      	sub	sp, #12
 8001fac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fae:	4b0f      	ldr	r3, [pc, #60]	; (8001fec <HAL_MspInit+0x44>)
 8001fb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fb2:	4a0e      	ldr	r2, [pc, #56]	; (8001fec <HAL_MspInit+0x44>)
 8001fb4:	f043 0301 	orr.w	r3, r3, #1
 8001fb8:	6613      	str	r3, [r2, #96]	; 0x60
 8001fba:	4b0c      	ldr	r3, [pc, #48]	; (8001fec <HAL_MspInit+0x44>)
 8001fbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fbe:	f003 0301 	and.w	r3, r3, #1
 8001fc2:	607b      	str	r3, [r7, #4]
 8001fc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fc6:	4b09      	ldr	r3, [pc, #36]	; (8001fec <HAL_MspInit+0x44>)
 8001fc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fca:	4a08      	ldr	r2, [pc, #32]	; (8001fec <HAL_MspInit+0x44>)
 8001fcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fd0:	6593      	str	r3, [r2, #88]	; 0x58
 8001fd2:	4b06      	ldr	r3, [pc, #24]	; (8001fec <HAL_MspInit+0x44>)
 8001fd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fda:	603b      	str	r3, [r7, #0]
 8001fdc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fde:	bf00      	nop
 8001fe0:	370c      	adds	r7, #12
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr
 8001fea:	bf00      	nop
 8001fec:	40021000 	.word	0x40021000

08001ff0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b0a2      	sub	sp, #136	; 0x88
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ff8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	601a      	str	r2, [r3, #0]
 8002000:	605a      	str	r2, [r3, #4]
 8002002:	609a      	str	r2, [r3, #8]
 8002004:	60da      	str	r2, [r3, #12]
 8002006:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002008:	f107 0314 	add.w	r3, r7, #20
 800200c:	2260      	movs	r2, #96	; 0x60
 800200e:	2100      	movs	r1, #0
 8002010:	4618      	mov	r0, r3
 8002012:	f004 fcc3 	bl	800699c <memset>
  if(hi2c->Instance==I2C1)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a20      	ldr	r2, [pc, #128]	; (800209c <HAL_I2C_MspInit+0xac>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d139      	bne.n	8002094 <HAL_I2C_MspInit+0xa4>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002020:	2340      	movs	r3, #64	; 0x40
 8002022:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002024:	2300      	movs	r3, #0
 8002026:	647b      	str	r3, [r7, #68]	; 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002028:	f107 0314 	add.w	r3, r7, #20
 800202c:	4618      	mov	r0, r3
 800202e:	f002 fd53 	bl	8004ad8 <HAL_RCCEx_PeriphCLKConfig>
 8002032:	4603      	mov	r3, r0
 8002034:	2b00      	cmp	r3, #0
 8002036:	d001      	beq.n	800203c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002038:	f7ff ffb0 	bl	8001f9c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800203c:	4b18      	ldr	r3, [pc, #96]	; (80020a0 <HAL_I2C_MspInit+0xb0>)
 800203e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002040:	4a17      	ldr	r2, [pc, #92]	; (80020a0 <HAL_I2C_MspInit+0xb0>)
 8002042:	f043 0301 	orr.w	r3, r3, #1
 8002046:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002048:	4b15      	ldr	r3, [pc, #84]	; (80020a0 <HAL_I2C_MspInit+0xb0>)
 800204a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800204c:	f003 0301 	and.w	r3, r3, #1
 8002050:	613b      	str	r3, [r7, #16]
 8002052:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002054:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002058:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800205a:	2312      	movs	r3, #18
 800205c:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800205e:	2300      	movs	r3, #0
 8002060:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002062:	2303      	movs	r3, #3
 8002064:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002068:	2304      	movs	r3, #4
 800206a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800206e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002072:	4619      	mov	r1, r3
 8002074:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002078:	f000 fbce 	bl	8002818 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800207c:	4b08      	ldr	r3, [pc, #32]	; (80020a0 <HAL_I2C_MspInit+0xb0>)
 800207e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002080:	4a07      	ldr	r2, [pc, #28]	; (80020a0 <HAL_I2C_MspInit+0xb0>)
 8002082:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002086:	6593      	str	r3, [r2, #88]	; 0x58
 8002088:	4b05      	ldr	r3, [pc, #20]	; (80020a0 <HAL_I2C_MspInit+0xb0>)
 800208a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800208c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002090:	60fb      	str	r3, [r7, #12]
 8002092:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002094:	bf00      	nop
 8002096:	3788      	adds	r7, #136	; 0x88
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}
 800209c:	40005400 	.word	0x40005400
 80020a0:	40021000 	.word	0x40021000

080020a4 <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b09c      	sub	sp, #112	; 0x70
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80020ac:	f107 0310 	add.w	r3, r7, #16
 80020b0:	2260      	movs	r2, #96	; 0x60
 80020b2:	2100      	movs	r1, #0
 80020b4:	4618      	mov	r0, r3
 80020b6:	f004 fc71 	bl	800699c <memset>
  if(hlptim->Instance==LPTIM1)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a15      	ldr	r2, [pc, #84]	; (8002114 <HAL_LPTIM_MspInit+0x70>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d123      	bne.n	800210c <HAL_LPTIM_MspInit+0x68>

  /* USER CODE END LPTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 80020c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80020c8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_LSI;
 80020ca:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80020ce:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80020d0:	f107 0310 	add.w	r3, r7, #16
 80020d4:	4618      	mov	r0, r3
 80020d6:	f002 fcff 	bl	8004ad8 <HAL_RCCEx_PeriphCLKConfig>
 80020da:	4603      	mov	r3, r0
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d001      	beq.n	80020e4 <HAL_LPTIM_MspInit+0x40>
    {
      Error_Handler();
 80020e0:	f7ff ff5c 	bl	8001f9c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 80020e4:	4b0c      	ldr	r3, [pc, #48]	; (8002118 <HAL_LPTIM_MspInit+0x74>)
 80020e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020e8:	4a0b      	ldr	r2, [pc, #44]	; (8002118 <HAL_LPTIM_MspInit+0x74>)
 80020ea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80020ee:	6593      	str	r3, [r2, #88]	; 0x58
 80020f0:	4b09      	ldr	r3, [pc, #36]	; (8002118 <HAL_LPTIM_MspInit+0x74>)
 80020f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020f4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80020f8:	60fb      	str	r3, [r7, #12]
 80020fa:	68fb      	ldr	r3, [r7, #12]
    /* LPTIM1 interrupt Init */
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 0, 0);
 80020fc:	2200      	movs	r2, #0
 80020fe:	2100      	movs	r1, #0
 8002100:	2041      	movs	r0, #65	; 0x41
 8002102:	f000 fb52 	bl	80027aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 8002106:	2041      	movs	r0, #65	; 0x41
 8002108:	f000 fb6b 	bl	80027e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }

}
 800210c:	bf00      	nop
 800210e:	3770      	adds	r7, #112	; 0x70
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}
 8002114:	40007c00 	.word	0x40007c00
 8002118:	40021000 	.word	0x40021000

0800211c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b08a      	sub	sp, #40	; 0x28
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002124:	f107 0314 	add.w	r3, r7, #20
 8002128:	2200      	movs	r2, #0
 800212a:	601a      	str	r2, [r3, #0]
 800212c:	605a      	str	r2, [r3, #4]
 800212e:	609a      	str	r2, [r3, #8]
 8002130:	60da      	str	r2, [r3, #12]
 8002132:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a17      	ldr	r2, [pc, #92]	; (8002198 <HAL_SPI_MspInit+0x7c>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d128      	bne.n	8002190 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800213e:	4b17      	ldr	r3, [pc, #92]	; (800219c <HAL_SPI_MspInit+0x80>)
 8002140:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002142:	4a16      	ldr	r2, [pc, #88]	; (800219c <HAL_SPI_MspInit+0x80>)
 8002144:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002148:	6593      	str	r3, [r2, #88]	; 0x58
 800214a:	4b14      	ldr	r3, [pc, #80]	; (800219c <HAL_SPI_MspInit+0x80>)
 800214c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800214e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002152:	613b      	str	r3, [r7, #16]
 8002154:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002156:	4b11      	ldr	r3, [pc, #68]	; (800219c <HAL_SPI_MspInit+0x80>)
 8002158:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800215a:	4a10      	ldr	r2, [pc, #64]	; (800219c <HAL_SPI_MspInit+0x80>)
 800215c:	f043 0302 	orr.w	r3, r3, #2
 8002160:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002162:	4b0e      	ldr	r3, [pc, #56]	; (800219c <HAL_SPI_MspInit+0x80>)
 8002164:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002166:	f003 0302 	and.w	r3, r3, #2
 800216a:	60fb      	str	r3, [r7, #12]
 800216c:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB10     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 800216e:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 8002172:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002174:	2302      	movs	r3, #2
 8002176:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002178:	2300      	movs	r3, #0
 800217a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800217c:	2303      	movs	r3, #3
 800217e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002180:	2305      	movs	r3, #5
 8002182:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002184:	f107 0314 	add.w	r3, r7, #20
 8002188:	4619      	mov	r1, r3
 800218a:	4805      	ldr	r0, [pc, #20]	; (80021a0 <HAL_SPI_MspInit+0x84>)
 800218c:	f000 fb44 	bl	8002818 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002190:	bf00      	nop
 8002192:	3728      	adds	r7, #40	; 0x28
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}
 8002198:	40003800 	.word	0x40003800
 800219c:	40021000 	.word	0x40021000
 80021a0:	48000400 	.word	0x48000400

080021a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b0a2      	sub	sp, #136	; 0x88
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021ac:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80021b0:	2200      	movs	r2, #0
 80021b2:	601a      	str	r2, [r3, #0]
 80021b4:	605a      	str	r2, [r3, #4]
 80021b6:	609a      	str	r2, [r3, #8]
 80021b8:	60da      	str	r2, [r3, #12]
 80021ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80021bc:	f107 0314 	add.w	r3, r7, #20
 80021c0:	2260      	movs	r2, #96	; 0x60
 80021c2:	2100      	movs	r1, #0
 80021c4:	4618      	mov	r0, r3
 80021c6:	f004 fbe9 	bl	800699c <memset>
  if(huart->Instance==USART1)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a1f      	ldr	r2, [pc, #124]	; (800224c <HAL_UART_MspInit+0xa8>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d137      	bne.n	8002244 <HAL_UART_MspInit+0xa0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80021d4:	2301      	movs	r3, #1
 80021d6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80021d8:	2300      	movs	r3, #0
 80021da:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80021dc:	f107 0314 	add.w	r3, r7, #20
 80021e0:	4618      	mov	r0, r3
 80021e2:	f002 fc79 	bl	8004ad8 <HAL_RCCEx_PeriphCLKConfig>
 80021e6:	4603      	mov	r3, r0
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d001      	beq.n	80021f0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80021ec:	f7ff fed6 	bl	8001f9c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80021f0:	4b17      	ldr	r3, [pc, #92]	; (8002250 <HAL_UART_MspInit+0xac>)
 80021f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021f4:	4a16      	ldr	r2, [pc, #88]	; (8002250 <HAL_UART_MspInit+0xac>)
 80021f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021fa:	6613      	str	r3, [r2, #96]	; 0x60
 80021fc:	4b14      	ldr	r3, [pc, #80]	; (8002250 <HAL_UART_MspInit+0xac>)
 80021fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002200:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002204:	613b      	str	r3, [r7, #16]
 8002206:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002208:	4b11      	ldr	r3, [pc, #68]	; (8002250 <HAL_UART_MspInit+0xac>)
 800220a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800220c:	4a10      	ldr	r2, [pc, #64]	; (8002250 <HAL_UART_MspInit+0xac>)
 800220e:	f043 0302 	orr.w	r3, r3, #2
 8002212:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002214:	4b0e      	ldr	r3, [pc, #56]	; (8002250 <HAL_UART_MspInit+0xac>)
 8002216:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002218:	f003 0302 	and.w	r3, r3, #2
 800221c:	60fb      	str	r3, [r7, #12]
 800221e:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002220:	23c0      	movs	r3, #192	; 0xc0
 8002222:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002224:	2302      	movs	r3, #2
 8002226:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002228:	2300      	movs	r3, #0
 800222a:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800222c:	2303      	movs	r3, #3
 800222e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002232:	2307      	movs	r3, #7
 8002234:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002238:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800223c:	4619      	mov	r1, r3
 800223e:	4805      	ldr	r0, [pc, #20]	; (8002254 <HAL_UART_MspInit+0xb0>)
 8002240:	f000 faea 	bl	8002818 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002244:	bf00      	nop
 8002246:	3788      	adds	r7, #136	; 0x88
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}
 800224c:	40013800 	.word	0x40013800
 8002250:	40021000 	.word	0x40021000
 8002254:	48000400 	.word	0x48000400

08002258 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002258:	b480      	push	{r7}
 800225a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800225c:	e7fe      	b.n	800225c <NMI_Handler+0x4>

0800225e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800225e:	b480      	push	{r7}
 8002260:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002262:	e7fe      	b.n	8002262 <HardFault_Handler+0x4>

08002264 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002264:	b480      	push	{r7}
 8002266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002268:	e7fe      	b.n	8002268 <MemManage_Handler+0x4>

0800226a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800226a:	b480      	push	{r7}
 800226c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800226e:	e7fe      	b.n	800226e <BusFault_Handler+0x4>

08002270 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002270:	b480      	push	{r7}
 8002272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002274:	e7fe      	b.n	8002274 <UsageFault_Handler+0x4>

08002276 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002276:	b480      	push	{r7}
 8002278:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800227a:	bf00      	nop
 800227c:	46bd      	mov	sp, r7
 800227e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002282:	4770      	bx	lr

08002284 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002284:	b480      	push	{r7}
 8002286:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002288:	bf00      	nop
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr

08002292 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002292:	b480      	push	{r7}
 8002294:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002296:	bf00      	nop
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr

080022a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022a4:	f000 f962 	bl	800256c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022a8:	bf00      	nop
 80022aa:	bd80      	pop	{r7, pc}

080022ac <LPTIM1_IRQHandler>:

/**
  * @brief This function handles LPTIM1 global interrupt.
  */
void LPTIM1_IRQHandler(void)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM1_IRQn 0 */

  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 80022b0:	4802      	ldr	r0, [pc, #8]	; (80022bc <LPTIM1_IRQHandler+0x10>)
 80022b2:	f001 fb5f 	bl	8003974 <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */

  /* USER CODE END LPTIM1_IRQn 1 */
}
 80022b6:	bf00      	nop
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	2000024c 	.word	0x2000024c

080022c0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80022c0:	b480      	push	{r7}
 80022c2:	af00      	add	r7, sp, #0
  return 1;
 80022c4:	2301      	movs	r3, #1
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	46bd      	mov	sp, r7
 80022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ce:	4770      	bx	lr

080022d0 <_kill>:

int _kill(int pid, int sig)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b082      	sub	sp, #8
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
 80022d8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80022da:	f004 fb35 	bl	8006948 <__errno>
 80022de:	4603      	mov	r3, r0
 80022e0:	2216      	movs	r2, #22
 80022e2:	601a      	str	r2, [r3, #0]
  return -1;
 80022e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	3708      	adds	r7, #8
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}

080022f0 <_exit>:

void _exit (int status)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b082      	sub	sp, #8
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80022f8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80022fc:	6878      	ldr	r0, [r7, #4]
 80022fe:	f7ff ffe7 	bl	80022d0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002302:	e7fe      	b.n	8002302 <_exit+0x12>

08002304 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b086      	sub	sp, #24
 8002308:	af00      	add	r7, sp, #0
 800230a:	60f8      	str	r0, [r7, #12]
 800230c:	60b9      	str	r1, [r7, #8]
 800230e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002310:	2300      	movs	r3, #0
 8002312:	617b      	str	r3, [r7, #20]
 8002314:	e00a      	b.n	800232c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002316:	f3af 8000 	nop.w
 800231a:	4601      	mov	r1, r0
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	1c5a      	adds	r2, r3, #1
 8002320:	60ba      	str	r2, [r7, #8]
 8002322:	b2ca      	uxtb	r2, r1
 8002324:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	3301      	adds	r3, #1
 800232a:	617b      	str	r3, [r7, #20]
 800232c:	697a      	ldr	r2, [r7, #20]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	429a      	cmp	r2, r3
 8002332:	dbf0      	blt.n	8002316 <_read+0x12>
  }

  return len;
 8002334:	687b      	ldr	r3, [r7, #4]
}
 8002336:	4618      	mov	r0, r3
 8002338:	3718      	adds	r7, #24
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}

0800233e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800233e:	b580      	push	{r7, lr}
 8002340:	b086      	sub	sp, #24
 8002342:	af00      	add	r7, sp, #0
 8002344:	60f8      	str	r0, [r7, #12]
 8002346:	60b9      	str	r1, [r7, #8]
 8002348:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800234a:	2300      	movs	r3, #0
 800234c:	617b      	str	r3, [r7, #20]
 800234e:	e009      	b.n	8002364 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	1c5a      	adds	r2, r3, #1
 8002354:	60ba      	str	r2, [r7, #8]
 8002356:	781b      	ldrb	r3, [r3, #0]
 8002358:	4618      	mov	r0, r3
 800235a:	f7ff fe0d 	bl	8001f78 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	3301      	adds	r3, #1
 8002362:	617b      	str	r3, [r7, #20]
 8002364:	697a      	ldr	r2, [r7, #20]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	429a      	cmp	r2, r3
 800236a:	dbf1      	blt.n	8002350 <_write+0x12>
  }
  return len;
 800236c:	687b      	ldr	r3, [r7, #4]
}
 800236e:	4618      	mov	r0, r3
 8002370:	3718      	adds	r7, #24
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}

08002376 <_close>:

int _close(int file)
{
 8002376:	b480      	push	{r7}
 8002378:	b083      	sub	sp, #12
 800237a:	af00      	add	r7, sp, #0
 800237c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800237e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002382:	4618      	mov	r0, r3
 8002384:	370c      	adds	r7, #12
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr

0800238e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800238e:	b480      	push	{r7}
 8002390:	b083      	sub	sp, #12
 8002392:	af00      	add	r7, sp, #0
 8002394:	6078      	str	r0, [r7, #4]
 8002396:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800239e:	605a      	str	r2, [r3, #4]
  return 0;
 80023a0:	2300      	movs	r3, #0
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	370c      	adds	r7, #12
 80023a6:	46bd      	mov	sp, r7
 80023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ac:	4770      	bx	lr

080023ae <_isatty>:

int _isatty(int file)
{
 80023ae:	b480      	push	{r7}
 80023b0:	b083      	sub	sp, #12
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80023b6:	2301      	movs	r3, #1
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	370c      	adds	r7, #12
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr

080023c4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b085      	sub	sp, #20
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	60f8      	str	r0, [r7, #12]
 80023cc:	60b9      	str	r1, [r7, #8]
 80023ce:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80023d0:	2300      	movs	r3, #0
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3714      	adds	r7, #20
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr
	...

080023e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b086      	sub	sp, #24
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80023e8:	4a14      	ldr	r2, [pc, #80]	; (800243c <_sbrk+0x5c>)
 80023ea:	4b15      	ldr	r3, [pc, #84]	; (8002440 <_sbrk+0x60>)
 80023ec:	1ad3      	subs	r3, r2, r3
 80023ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80023f4:	4b13      	ldr	r3, [pc, #76]	; (8002444 <_sbrk+0x64>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d102      	bne.n	8002402 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80023fc:	4b11      	ldr	r3, [pc, #68]	; (8002444 <_sbrk+0x64>)
 80023fe:	4a12      	ldr	r2, [pc, #72]	; (8002448 <_sbrk+0x68>)
 8002400:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002402:	4b10      	ldr	r3, [pc, #64]	; (8002444 <_sbrk+0x64>)
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	4413      	add	r3, r2
 800240a:	693a      	ldr	r2, [r7, #16]
 800240c:	429a      	cmp	r2, r3
 800240e:	d207      	bcs.n	8002420 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002410:	f004 fa9a 	bl	8006948 <__errno>
 8002414:	4603      	mov	r3, r0
 8002416:	220c      	movs	r2, #12
 8002418:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800241a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800241e:	e009      	b.n	8002434 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002420:	4b08      	ldr	r3, [pc, #32]	; (8002444 <_sbrk+0x64>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002426:	4b07      	ldr	r3, [pc, #28]	; (8002444 <_sbrk+0x64>)
 8002428:	681a      	ldr	r2, [r3, #0]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	4413      	add	r3, r2
 800242e:	4a05      	ldr	r2, [pc, #20]	; (8002444 <_sbrk+0x64>)
 8002430:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002432:	68fb      	ldr	r3, [r7, #12]
}
 8002434:	4618      	mov	r0, r3
 8002436:	3718      	adds	r7, #24
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}
 800243c:	20010000 	.word	0x20010000
 8002440:	00000400 	.word	0x00000400
 8002444:	20000b64 	.word	0x20000b64
 8002448:	20000b80 	.word	0x20000b80

0800244c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800244c:	b480      	push	{r7}
 800244e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002450:	4b06      	ldr	r3, [pc, #24]	; (800246c <SystemInit+0x20>)
 8002452:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002456:	4a05      	ldr	r2, [pc, #20]	; (800246c <SystemInit+0x20>)
 8002458:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800245c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002460:	bf00      	nop
 8002462:	46bd      	mov	sp, r7
 8002464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002468:	4770      	bx	lr
 800246a:	bf00      	nop
 800246c:	e000ed00 	.word	0xe000ed00

08002470 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002470:	f8df d034 	ldr.w	sp, [pc, #52]	; 80024a8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002474:	f7ff ffea 	bl	800244c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002478:	480c      	ldr	r0, [pc, #48]	; (80024ac <LoopForever+0x6>)
  ldr r1, =_edata
 800247a:	490d      	ldr	r1, [pc, #52]	; (80024b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800247c:	4a0d      	ldr	r2, [pc, #52]	; (80024b4 <LoopForever+0xe>)
  movs r3, #0
 800247e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002480:	e002      	b.n	8002488 <LoopCopyDataInit>

08002482 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002482:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002484:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002486:	3304      	adds	r3, #4

08002488 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002488:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800248a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800248c:	d3f9      	bcc.n	8002482 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800248e:	4a0a      	ldr	r2, [pc, #40]	; (80024b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002490:	4c0a      	ldr	r4, [pc, #40]	; (80024bc <LoopForever+0x16>)
  movs r3, #0
 8002492:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002494:	e001      	b.n	800249a <LoopFillZerobss>

08002496 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002496:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002498:	3204      	adds	r2, #4

0800249a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800249a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800249c:	d3fb      	bcc.n	8002496 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800249e:	f004 fa59 	bl	8006954 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80024a2:	f7ff fb5f 	bl	8001b64 <main>

080024a6 <LoopForever>:

LoopForever:
    b LoopForever
 80024a6:	e7fe      	b.n	80024a6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80024a8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80024ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024b0:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 80024b4:	08009c34 	.word	0x08009c34
  ldr r2, =_sbss
 80024b8:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 80024bc:	20000b7c 	.word	0x20000b7c

080024c0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80024c0:	e7fe      	b.n	80024c0 <ADC1_IRQHandler>

080024c2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024c2:	b580      	push	{r7, lr}
 80024c4:	b082      	sub	sp, #8
 80024c6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80024c8:	2300      	movs	r3, #0
 80024ca:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024cc:	2003      	movs	r0, #3
 80024ce:	f000 f961 	bl	8002794 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80024d2:	200f      	movs	r0, #15
 80024d4:	f000 f80e 	bl	80024f4 <HAL_InitTick>
 80024d8:	4603      	mov	r3, r0
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d002      	beq.n	80024e4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	71fb      	strb	r3, [r7, #7]
 80024e2:	e001      	b.n	80024e8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80024e4:	f7ff fd60 	bl	8001fa8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80024e8:	79fb      	ldrb	r3, [r7, #7]
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	3708      	adds	r7, #8
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}
	...

080024f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b084      	sub	sp, #16
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80024fc:	2300      	movs	r3, #0
 80024fe:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002500:	4b17      	ldr	r3, [pc, #92]	; (8002560 <HAL_InitTick+0x6c>)
 8002502:	781b      	ldrb	r3, [r3, #0]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d023      	beq.n	8002550 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002508:	4b16      	ldr	r3, [pc, #88]	; (8002564 <HAL_InitTick+0x70>)
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	4b14      	ldr	r3, [pc, #80]	; (8002560 <HAL_InitTick+0x6c>)
 800250e:	781b      	ldrb	r3, [r3, #0]
 8002510:	4619      	mov	r1, r3
 8002512:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002516:	fbb3 f3f1 	udiv	r3, r3, r1
 800251a:	fbb2 f3f3 	udiv	r3, r2, r3
 800251e:	4618      	mov	r0, r3
 8002520:	f000 f96d 	bl	80027fe <HAL_SYSTICK_Config>
 8002524:	4603      	mov	r3, r0
 8002526:	2b00      	cmp	r3, #0
 8002528:	d10f      	bne.n	800254a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2b0f      	cmp	r3, #15
 800252e:	d809      	bhi.n	8002544 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002530:	2200      	movs	r2, #0
 8002532:	6879      	ldr	r1, [r7, #4]
 8002534:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002538:	f000 f937 	bl	80027aa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800253c:	4a0a      	ldr	r2, [pc, #40]	; (8002568 <HAL_InitTick+0x74>)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6013      	str	r3, [r2, #0]
 8002542:	e007      	b.n	8002554 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002544:	2301      	movs	r3, #1
 8002546:	73fb      	strb	r3, [r7, #15]
 8002548:	e004      	b.n	8002554 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	73fb      	strb	r3, [r7, #15]
 800254e:	e001      	b.n	8002554 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002550:	2301      	movs	r3, #1
 8002552:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002554:	7bfb      	ldrb	r3, [r7, #15]
}
 8002556:	4618      	mov	r0, r3
 8002558:	3710      	adds	r7, #16
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	20000008 	.word	0x20000008
 8002564:	20000000 	.word	0x20000000
 8002568:	20000004 	.word	0x20000004

0800256c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800256c:	b480      	push	{r7}
 800256e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002570:	4b06      	ldr	r3, [pc, #24]	; (800258c <HAL_IncTick+0x20>)
 8002572:	781b      	ldrb	r3, [r3, #0]
 8002574:	461a      	mov	r2, r3
 8002576:	4b06      	ldr	r3, [pc, #24]	; (8002590 <HAL_IncTick+0x24>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4413      	add	r3, r2
 800257c:	4a04      	ldr	r2, [pc, #16]	; (8002590 <HAL_IncTick+0x24>)
 800257e:	6013      	str	r3, [r2, #0]
}
 8002580:	bf00      	nop
 8002582:	46bd      	mov	sp, r7
 8002584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002588:	4770      	bx	lr
 800258a:	bf00      	nop
 800258c:	20000008 	.word	0x20000008
 8002590:	20000b68 	.word	0x20000b68

08002594 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002594:	b480      	push	{r7}
 8002596:	af00      	add	r7, sp, #0
  return uwTick;
 8002598:	4b03      	ldr	r3, [pc, #12]	; (80025a8 <HAL_GetTick+0x14>)
 800259a:	681b      	ldr	r3, [r3, #0]
}
 800259c:	4618      	mov	r0, r3
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr
 80025a6:	bf00      	nop
 80025a8:	20000b68 	.word	0x20000b68

080025ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b084      	sub	sp, #16
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80025b4:	f7ff ffee 	bl	8002594 <HAL_GetTick>
 80025b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80025c4:	d005      	beq.n	80025d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80025c6:	4b0a      	ldr	r3, [pc, #40]	; (80025f0 <HAL_Delay+0x44>)
 80025c8:	781b      	ldrb	r3, [r3, #0]
 80025ca:	461a      	mov	r2, r3
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	4413      	add	r3, r2
 80025d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80025d2:	bf00      	nop
 80025d4:	f7ff ffde 	bl	8002594 <HAL_GetTick>
 80025d8:	4602      	mov	r2, r0
 80025da:	68bb      	ldr	r3, [r7, #8]
 80025dc:	1ad3      	subs	r3, r2, r3
 80025de:	68fa      	ldr	r2, [r7, #12]
 80025e0:	429a      	cmp	r2, r3
 80025e2:	d8f7      	bhi.n	80025d4 <HAL_Delay+0x28>
  {
  }
}
 80025e4:	bf00      	nop
 80025e6:	bf00      	nop
 80025e8:	3710      	adds	r7, #16
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	20000008 	.word	0x20000008

080025f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b085      	sub	sp, #20
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	f003 0307 	and.w	r3, r3, #7
 8002602:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002604:	4b0c      	ldr	r3, [pc, #48]	; (8002638 <__NVIC_SetPriorityGrouping+0x44>)
 8002606:	68db      	ldr	r3, [r3, #12]
 8002608:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800260a:	68ba      	ldr	r2, [r7, #8]
 800260c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002610:	4013      	ands	r3, r2
 8002612:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800261c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002620:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002624:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002626:	4a04      	ldr	r2, [pc, #16]	; (8002638 <__NVIC_SetPriorityGrouping+0x44>)
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	60d3      	str	r3, [r2, #12]
}
 800262c:	bf00      	nop
 800262e:	3714      	adds	r7, #20
 8002630:	46bd      	mov	sp, r7
 8002632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002636:	4770      	bx	lr
 8002638:	e000ed00 	.word	0xe000ed00

0800263c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800263c:	b480      	push	{r7}
 800263e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002640:	4b04      	ldr	r3, [pc, #16]	; (8002654 <__NVIC_GetPriorityGrouping+0x18>)
 8002642:	68db      	ldr	r3, [r3, #12]
 8002644:	0a1b      	lsrs	r3, r3, #8
 8002646:	f003 0307 	and.w	r3, r3, #7
}
 800264a:	4618      	mov	r0, r3
 800264c:	46bd      	mov	sp, r7
 800264e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002652:	4770      	bx	lr
 8002654:	e000ed00 	.word	0xe000ed00

08002658 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002658:	b480      	push	{r7}
 800265a:	b083      	sub	sp, #12
 800265c:	af00      	add	r7, sp, #0
 800265e:	4603      	mov	r3, r0
 8002660:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002666:	2b00      	cmp	r3, #0
 8002668:	db0b      	blt.n	8002682 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800266a:	79fb      	ldrb	r3, [r7, #7]
 800266c:	f003 021f 	and.w	r2, r3, #31
 8002670:	4907      	ldr	r1, [pc, #28]	; (8002690 <__NVIC_EnableIRQ+0x38>)
 8002672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002676:	095b      	lsrs	r3, r3, #5
 8002678:	2001      	movs	r0, #1
 800267a:	fa00 f202 	lsl.w	r2, r0, r2
 800267e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002682:	bf00      	nop
 8002684:	370c      	adds	r7, #12
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr
 800268e:	bf00      	nop
 8002690:	e000e100 	.word	0xe000e100

08002694 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002694:	b480      	push	{r7}
 8002696:	b083      	sub	sp, #12
 8002698:	af00      	add	r7, sp, #0
 800269a:	4603      	mov	r3, r0
 800269c:	6039      	str	r1, [r7, #0]
 800269e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	db0a      	blt.n	80026be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	b2da      	uxtb	r2, r3
 80026ac:	490c      	ldr	r1, [pc, #48]	; (80026e0 <__NVIC_SetPriority+0x4c>)
 80026ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026b2:	0112      	lsls	r2, r2, #4
 80026b4:	b2d2      	uxtb	r2, r2
 80026b6:	440b      	add	r3, r1
 80026b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026bc:	e00a      	b.n	80026d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	b2da      	uxtb	r2, r3
 80026c2:	4908      	ldr	r1, [pc, #32]	; (80026e4 <__NVIC_SetPriority+0x50>)
 80026c4:	79fb      	ldrb	r3, [r7, #7]
 80026c6:	f003 030f 	and.w	r3, r3, #15
 80026ca:	3b04      	subs	r3, #4
 80026cc:	0112      	lsls	r2, r2, #4
 80026ce:	b2d2      	uxtb	r2, r2
 80026d0:	440b      	add	r3, r1
 80026d2:	761a      	strb	r2, [r3, #24]
}
 80026d4:	bf00      	nop
 80026d6:	370c      	adds	r7, #12
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr
 80026e0:	e000e100 	.word	0xe000e100
 80026e4:	e000ed00 	.word	0xe000ed00

080026e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b089      	sub	sp, #36	; 0x24
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	60f8      	str	r0, [r7, #12]
 80026f0:	60b9      	str	r1, [r7, #8]
 80026f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	f003 0307 	and.w	r3, r3, #7
 80026fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026fc:	69fb      	ldr	r3, [r7, #28]
 80026fe:	f1c3 0307 	rsb	r3, r3, #7
 8002702:	2b04      	cmp	r3, #4
 8002704:	bf28      	it	cs
 8002706:	2304      	movcs	r3, #4
 8002708:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800270a:	69fb      	ldr	r3, [r7, #28]
 800270c:	3304      	adds	r3, #4
 800270e:	2b06      	cmp	r3, #6
 8002710:	d902      	bls.n	8002718 <NVIC_EncodePriority+0x30>
 8002712:	69fb      	ldr	r3, [r7, #28]
 8002714:	3b03      	subs	r3, #3
 8002716:	e000      	b.n	800271a <NVIC_EncodePriority+0x32>
 8002718:	2300      	movs	r3, #0
 800271a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800271c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002720:	69bb      	ldr	r3, [r7, #24]
 8002722:	fa02 f303 	lsl.w	r3, r2, r3
 8002726:	43da      	mvns	r2, r3
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	401a      	ands	r2, r3
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002730:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	fa01 f303 	lsl.w	r3, r1, r3
 800273a:	43d9      	mvns	r1, r3
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002740:	4313      	orrs	r3, r2
         );
}
 8002742:	4618      	mov	r0, r3
 8002744:	3724      	adds	r7, #36	; 0x24
 8002746:	46bd      	mov	sp, r7
 8002748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274c:	4770      	bx	lr
	...

08002750 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b082      	sub	sp, #8
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	3b01      	subs	r3, #1
 800275c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002760:	d301      	bcc.n	8002766 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002762:	2301      	movs	r3, #1
 8002764:	e00f      	b.n	8002786 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002766:	4a0a      	ldr	r2, [pc, #40]	; (8002790 <SysTick_Config+0x40>)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	3b01      	subs	r3, #1
 800276c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800276e:	210f      	movs	r1, #15
 8002770:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002774:	f7ff ff8e 	bl	8002694 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002778:	4b05      	ldr	r3, [pc, #20]	; (8002790 <SysTick_Config+0x40>)
 800277a:	2200      	movs	r2, #0
 800277c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800277e:	4b04      	ldr	r3, [pc, #16]	; (8002790 <SysTick_Config+0x40>)
 8002780:	2207      	movs	r2, #7
 8002782:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002784:	2300      	movs	r3, #0
}
 8002786:	4618      	mov	r0, r3
 8002788:	3708      	adds	r7, #8
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	e000e010 	.word	0xe000e010

08002794 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b082      	sub	sp, #8
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800279c:	6878      	ldr	r0, [r7, #4]
 800279e:	f7ff ff29 	bl	80025f4 <__NVIC_SetPriorityGrouping>
}
 80027a2:	bf00      	nop
 80027a4:	3708      	adds	r7, #8
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}

080027aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027aa:	b580      	push	{r7, lr}
 80027ac:	b086      	sub	sp, #24
 80027ae:	af00      	add	r7, sp, #0
 80027b0:	4603      	mov	r3, r0
 80027b2:	60b9      	str	r1, [r7, #8]
 80027b4:	607a      	str	r2, [r7, #4]
 80027b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80027b8:	2300      	movs	r3, #0
 80027ba:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80027bc:	f7ff ff3e 	bl	800263c <__NVIC_GetPriorityGrouping>
 80027c0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027c2:	687a      	ldr	r2, [r7, #4]
 80027c4:	68b9      	ldr	r1, [r7, #8]
 80027c6:	6978      	ldr	r0, [r7, #20]
 80027c8:	f7ff ff8e 	bl	80026e8 <NVIC_EncodePriority>
 80027cc:	4602      	mov	r2, r0
 80027ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027d2:	4611      	mov	r1, r2
 80027d4:	4618      	mov	r0, r3
 80027d6:	f7ff ff5d 	bl	8002694 <__NVIC_SetPriority>
}
 80027da:	bf00      	nop
 80027dc:	3718      	adds	r7, #24
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}

080027e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027e2:	b580      	push	{r7, lr}
 80027e4:	b082      	sub	sp, #8
 80027e6:	af00      	add	r7, sp, #0
 80027e8:	4603      	mov	r3, r0
 80027ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027f0:	4618      	mov	r0, r3
 80027f2:	f7ff ff31 	bl	8002658 <__NVIC_EnableIRQ>
}
 80027f6:	bf00      	nop
 80027f8:	3708      	adds	r7, #8
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}

080027fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027fe:	b580      	push	{r7, lr}
 8002800:	b082      	sub	sp, #8
 8002802:	af00      	add	r7, sp, #0
 8002804:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	f7ff ffa2 	bl	8002750 <SysTick_Config>
 800280c:	4603      	mov	r3, r0
}
 800280e:	4618      	mov	r0, r3
 8002810:	3708      	adds	r7, #8
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}
	...

08002818 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002818:	b480      	push	{r7}
 800281a:	b087      	sub	sp, #28
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
 8002820:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002822:	2300      	movs	r3, #0
 8002824:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002826:	e154      	b.n	8002ad2 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	2101      	movs	r1, #1
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	fa01 f303 	lsl.w	r3, r1, r3
 8002834:	4013      	ands	r3, r2
 8002836:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	2b00      	cmp	r3, #0
 800283c:	f000 8146 	beq.w	8002acc <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	f003 0303 	and.w	r3, r3, #3
 8002848:	2b01      	cmp	r3, #1
 800284a:	d005      	beq.n	8002858 <HAL_GPIO_Init+0x40>
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	f003 0303 	and.w	r3, r3, #3
 8002854:	2b02      	cmp	r3, #2
 8002856:	d130      	bne.n	80028ba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	005b      	lsls	r3, r3, #1
 8002862:	2203      	movs	r2, #3
 8002864:	fa02 f303 	lsl.w	r3, r2, r3
 8002868:	43db      	mvns	r3, r3
 800286a:	693a      	ldr	r2, [r7, #16]
 800286c:	4013      	ands	r3, r2
 800286e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	68da      	ldr	r2, [r3, #12]
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	005b      	lsls	r3, r3, #1
 8002878:	fa02 f303 	lsl.w	r3, r2, r3
 800287c:	693a      	ldr	r2, [r7, #16]
 800287e:	4313      	orrs	r3, r2
 8002880:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	693a      	ldr	r2, [r7, #16]
 8002886:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800288e:	2201      	movs	r2, #1
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	fa02 f303 	lsl.w	r3, r2, r3
 8002896:	43db      	mvns	r3, r3
 8002898:	693a      	ldr	r2, [r7, #16]
 800289a:	4013      	ands	r3, r2
 800289c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	091b      	lsrs	r3, r3, #4
 80028a4:	f003 0201 	and.w	r2, r3, #1
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	fa02 f303 	lsl.w	r3, r2, r3
 80028ae:	693a      	ldr	r2, [r7, #16]
 80028b0:	4313      	orrs	r3, r2
 80028b2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	693a      	ldr	r2, [r7, #16]
 80028b8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	f003 0303 	and.w	r3, r3, #3
 80028c2:	2b03      	cmp	r3, #3
 80028c4:	d017      	beq.n	80028f6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	68db      	ldr	r3, [r3, #12]
 80028ca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	005b      	lsls	r3, r3, #1
 80028d0:	2203      	movs	r2, #3
 80028d2:	fa02 f303 	lsl.w	r3, r2, r3
 80028d6:	43db      	mvns	r3, r3
 80028d8:	693a      	ldr	r2, [r7, #16]
 80028da:	4013      	ands	r3, r2
 80028dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	689a      	ldr	r2, [r3, #8]
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	005b      	lsls	r3, r3, #1
 80028e6:	fa02 f303 	lsl.w	r3, r2, r3
 80028ea:	693a      	ldr	r2, [r7, #16]
 80028ec:	4313      	orrs	r3, r2
 80028ee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	693a      	ldr	r2, [r7, #16]
 80028f4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	f003 0303 	and.w	r3, r3, #3
 80028fe:	2b02      	cmp	r3, #2
 8002900:	d123      	bne.n	800294a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	08da      	lsrs	r2, r3, #3
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	3208      	adds	r2, #8
 800290a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800290e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	f003 0307 	and.w	r3, r3, #7
 8002916:	009b      	lsls	r3, r3, #2
 8002918:	220f      	movs	r2, #15
 800291a:	fa02 f303 	lsl.w	r3, r2, r3
 800291e:	43db      	mvns	r3, r3
 8002920:	693a      	ldr	r2, [r7, #16]
 8002922:	4013      	ands	r3, r2
 8002924:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	691a      	ldr	r2, [r3, #16]
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	f003 0307 	and.w	r3, r3, #7
 8002930:	009b      	lsls	r3, r3, #2
 8002932:	fa02 f303 	lsl.w	r3, r2, r3
 8002936:	693a      	ldr	r2, [r7, #16]
 8002938:	4313      	orrs	r3, r2
 800293a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	08da      	lsrs	r2, r3, #3
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	3208      	adds	r2, #8
 8002944:	6939      	ldr	r1, [r7, #16]
 8002946:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	005b      	lsls	r3, r3, #1
 8002954:	2203      	movs	r2, #3
 8002956:	fa02 f303 	lsl.w	r3, r2, r3
 800295a:	43db      	mvns	r3, r3
 800295c:	693a      	ldr	r2, [r7, #16]
 800295e:	4013      	ands	r3, r2
 8002960:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	f003 0203 	and.w	r2, r3, #3
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	005b      	lsls	r3, r3, #1
 800296e:	fa02 f303 	lsl.w	r3, r2, r3
 8002972:	693a      	ldr	r2, [r7, #16]
 8002974:	4313      	orrs	r3, r2
 8002976:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	693a      	ldr	r2, [r7, #16]
 800297c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002986:	2b00      	cmp	r3, #0
 8002988:	f000 80a0 	beq.w	8002acc <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800298c:	4b58      	ldr	r3, [pc, #352]	; (8002af0 <HAL_GPIO_Init+0x2d8>)
 800298e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002990:	4a57      	ldr	r2, [pc, #348]	; (8002af0 <HAL_GPIO_Init+0x2d8>)
 8002992:	f043 0301 	orr.w	r3, r3, #1
 8002996:	6613      	str	r3, [r2, #96]	; 0x60
 8002998:	4b55      	ldr	r3, [pc, #340]	; (8002af0 <HAL_GPIO_Init+0x2d8>)
 800299a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800299c:	f003 0301 	and.w	r3, r3, #1
 80029a0:	60bb      	str	r3, [r7, #8]
 80029a2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80029a4:	4a53      	ldr	r2, [pc, #332]	; (8002af4 <HAL_GPIO_Init+0x2dc>)
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	089b      	lsrs	r3, r3, #2
 80029aa:	3302      	adds	r3, #2
 80029ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029b0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	f003 0303 	and.w	r3, r3, #3
 80029b8:	009b      	lsls	r3, r3, #2
 80029ba:	220f      	movs	r2, #15
 80029bc:	fa02 f303 	lsl.w	r3, r2, r3
 80029c0:	43db      	mvns	r3, r3
 80029c2:	693a      	ldr	r2, [r7, #16]
 80029c4:	4013      	ands	r3, r2
 80029c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80029ce:	d019      	beq.n	8002a04 <HAL_GPIO_Init+0x1ec>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	4a49      	ldr	r2, [pc, #292]	; (8002af8 <HAL_GPIO_Init+0x2e0>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d013      	beq.n	8002a00 <HAL_GPIO_Init+0x1e8>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	4a48      	ldr	r2, [pc, #288]	; (8002afc <HAL_GPIO_Init+0x2e4>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d00d      	beq.n	80029fc <HAL_GPIO_Init+0x1e4>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	4a47      	ldr	r2, [pc, #284]	; (8002b00 <HAL_GPIO_Init+0x2e8>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d007      	beq.n	80029f8 <HAL_GPIO_Init+0x1e0>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	4a46      	ldr	r2, [pc, #280]	; (8002b04 <HAL_GPIO_Init+0x2ec>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d101      	bne.n	80029f4 <HAL_GPIO_Init+0x1dc>
 80029f0:	2304      	movs	r3, #4
 80029f2:	e008      	b.n	8002a06 <HAL_GPIO_Init+0x1ee>
 80029f4:	2307      	movs	r3, #7
 80029f6:	e006      	b.n	8002a06 <HAL_GPIO_Init+0x1ee>
 80029f8:	2303      	movs	r3, #3
 80029fa:	e004      	b.n	8002a06 <HAL_GPIO_Init+0x1ee>
 80029fc:	2302      	movs	r3, #2
 80029fe:	e002      	b.n	8002a06 <HAL_GPIO_Init+0x1ee>
 8002a00:	2301      	movs	r3, #1
 8002a02:	e000      	b.n	8002a06 <HAL_GPIO_Init+0x1ee>
 8002a04:	2300      	movs	r3, #0
 8002a06:	697a      	ldr	r2, [r7, #20]
 8002a08:	f002 0203 	and.w	r2, r2, #3
 8002a0c:	0092      	lsls	r2, r2, #2
 8002a0e:	4093      	lsls	r3, r2
 8002a10:	693a      	ldr	r2, [r7, #16]
 8002a12:	4313      	orrs	r3, r2
 8002a14:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002a16:	4937      	ldr	r1, [pc, #220]	; (8002af4 <HAL_GPIO_Init+0x2dc>)
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	089b      	lsrs	r3, r3, #2
 8002a1c:	3302      	adds	r3, #2
 8002a1e:	693a      	ldr	r2, [r7, #16]
 8002a20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002a24:	4b38      	ldr	r3, [pc, #224]	; (8002b08 <HAL_GPIO_Init+0x2f0>)
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	43db      	mvns	r3, r3
 8002a2e:	693a      	ldr	r2, [r7, #16]
 8002a30:	4013      	ands	r3, r2
 8002a32:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d003      	beq.n	8002a48 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002a40:	693a      	ldr	r2, [r7, #16]
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	4313      	orrs	r3, r2
 8002a46:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002a48:	4a2f      	ldr	r2, [pc, #188]	; (8002b08 <HAL_GPIO_Init+0x2f0>)
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002a4e:	4b2e      	ldr	r3, [pc, #184]	; (8002b08 <HAL_GPIO_Init+0x2f0>)
 8002a50:	68db      	ldr	r3, [r3, #12]
 8002a52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	43db      	mvns	r3, r3
 8002a58:	693a      	ldr	r2, [r7, #16]
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d003      	beq.n	8002a72 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8002a6a:	693a      	ldr	r2, [r7, #16]
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002a72:	4a25      	ldr	r2, [pc, #148]	; (8002b08 <HAL_GPIO_Init+0x2f0>)
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002a78:	4b23      	ldr	r3, [pc, #140]	; (8002b08 <HAL_GPIO_Init+0x2f0>)
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	43db      	mvns	r3, r3
 8002a82:	693a      	ldr	r2, [r7, #16]
 8002a84:	4013      	ands	r3, r2
 8002a86:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d003      	beq.n	8002a9c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002a94:	693a      	ldr	r2, [r7, #16]
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002a9c:	4a1a      	ldr	r2, [pc, #104]	; (8002b08 <HAL_GPIO_Init+0x2f0>)
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002aa2:	4b19      	ldr	r3, [pc, #100]	; (8002b08 <HAL_GPIO_Init+0x2f0>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	43db      	mvns	r3, r3
 8002aac:	693a      	ldr	r2, [r7, #16]
 8002aae:	4013      	ands	r3, r2
 8002ab0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d003      	beq.n	8002ac6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002abe:	693a      	ldr	r2, [r7, #16]
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002ac6:	4a10      	ldr	r2, [pc, #64]	; (8002b08 <HAL_GPIO_Init+0x2f0>)
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	3301      	adds	r3, #1
 8002ad0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	fa22 f303 	lsr.w	r3, r2, r3
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	f47f aea3 	bne.w	8002828 <HAL_GPIO_Init+0x10>
  }
}
 8002ae2:	bf00      	nop
 8002ae4:	bf00      	nop
 8002ae6:	371c      	adds	r7, #28
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aee:	4770      	bx	lr
 8002af0:	40021000 	.word	0x40021000
 8002af4:	40010000 	.word	0x40010000
 8002af8:	48000400 	.word	0x48000400
 8002afc:	48000800 	.word	0x48000800
 8002b00:	48000c00 	.word	0x48000c00
 8002b04:	48001000 	.word	0x48001000
 8002b08:	40010400 	.word	0x40010400

08002b0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b083      	sub	sp, #12
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
 8002b14:	460b      	mov	r3, r1
 8002b16:	807b      	strh	r3, [r7, #2]
 8002b18:	4613      	mov	r3, r2
 8002b1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b1c:	787b      	ldrb	r3, [r7, #1]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d003      	beq.n	8002b2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002b22:	887a      	ldrh	r2, [r7, #2]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002b28:	e002      	b.n	8002b30 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002b2a:	887a      	ldrh	r2, [r7, #2]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002b30:	bf00      	nop
 8002b32:	370c      	adds	r7, #12
 8002b34:	46bd      	mov	sp, r7
 8002b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3a:	4770      	bx	lr

08002b3c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b082      	sub	sp, #8
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d101      	bne.n	8002b4e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e081      	b.n	8002c52 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b54:	b2db      	uxtb	r3, r3
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d106      	bne.n	8002b68 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	f7ff fa44 	bl	8001ff0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2224      	movs	r2, #36	; 0x24
 8002b6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	681a      	ldr	r2, [r3, #0]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f022 0201 	bic.w	r2, r2, #1
 8002b7e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	685a      	ldr	r2, [r3, #4]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002b8c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	689a      	ldr	r2, [r3, #8]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002b9c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	68db      	ldr	r3, [r3, #12]
 8002ba2:	2b01      	cmp	r3, #1
 8002ba4:	d107      	bne.n	8002bb6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	689a      	ldr	r2, [r3, #8]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002bb2:	609a      	str	r2, [r3, #8]
 8002bb4:	e006      	b.n	8002bc4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	689a      	ldr	r2, [r3, #8]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002bc2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	68db      	ldr	r3, [r3, #12]
 8002bc8:	2b02      	cmp	r3, #2
 8002bca:	d104      	bne.n	8002bd6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002bd4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	687a      	ldr	r2, [r7, #4]
 8002bde:	6812      	ldr	r2, [r2, #0]
 8002be0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002be4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002be8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	68da      	ldr	r2, [r3, #12]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002bf8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	691a      	ldr	r2, [r3, #16]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	695b      	ldr	r3, [r3, #20]
 8002c02:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	699b      	ldr	r3, [r3, #24]
 8002c0a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	430a      	orrs	r2, r1
 8002c12:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	69d9      	ldr	r1, [r3, #28]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6a1a      	ldr	r2, [r3, #32]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	430a      	orrs	r2, r1
 8002c22:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	681a      	ldr	r2, [r3, #0]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f042 0201 	orr.w	r2, r2, #1
 8002c32:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2200      	movs	r2, #0
 8002c38:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2220      	movs	r2, #32
 8002c3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2200      	movs	r2, #0
 8002c46:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002c50:	2300      	movs	r3, #0
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	3708      	adds	r7, #8
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}
	...

08002c5c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b088      	sub	sp, #32
 8002c60:	af02      	add	r7, sp, #8
 8002c62:	60f8      	str	r0, [r7, #12]
 8002c64:	4608      	mov	r0, r1
 8002c66:	4611      	mov	r1, r2
 8002c68:	461a      	mov	r2, r3
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	817b      	strh	r3, [r7, #10]
 8002c6e:	460b      	mov	r3, r1
 8002c70:	813b      	strh	r3, [r7, #8]
 8002c72:	4613      	mov	r3, r2
 8002c74:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c7c:	b2db      	uxtb	r3, r3
 8002c7e:	2b20      	cmp	r3, #32
 8002c80:	f040 80f9 	bne.w	8002e76 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c84:	6a3b      	ldr	r3, [r7, #32]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d002      	beq.n	8002c90 <HAL_I2C_Mem_Write+0x34>
 8002c8a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d105      	bne.n	8002c9c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c96:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	e0ed      	b.n	8002e78 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ca2:	2b01      	cmp	r3, #1
 8002ca4:	d101      	bne.n	8002caa <HAL_I2C_Mem_Write+0x4e>
 8002ca6:	2302      	movs	r3, #2
 8002ca8:	e0e6      	b.n	8002e78 <HAL_I2C_Mem_Write+0x21c>
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	2201      	movs	r2, #1
 8002cae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002cb2:	f7ff fc6f 	bl	8002594 <HAL_GetTick>
 8002cb6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002cb8:	697b      	ldr	r3, [r7, #20]
 8002cba:	9300      	str	r3, [sp, #0]
 8002cbc:	2319      	movs	r3, #25
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002cc4:	68f8      	ldr	r0, [r7, #12]
 8002cc6:	f000 fac3 	bl	8003250 <I2C_WaitOnFlagUntilTimeout>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d001      	beq.n	8002cd4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	e0d1      	b.n	8002e78 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	2221      	movs	r2, #33	; 0x21
 8002cd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	2240      	movs	r2, #64	; 0x40
 8002ce0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	6a3a      	ldr	r2, [r7, #32]
 8002cee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002cf4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002cfc:	88f8      	ldrh	r0, [r7, #6]
 8002cfe:	893a      	ldrh	r2, [r7, #8]
 8002d00:	8979      	ldrh	r1, [r7, #10]
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	9301      	str	r3, [sp, #4]
 8002d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d08:	9300      	str	r3, [sp, #0]
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	68f8      	ldr	r0, [r7, #12]
 8002d0e:	f000 f9d3 	bl	80030b8 <I2C_RequestMemoryWrite>
 8002d12:	4603      	mov	r3, r0
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d005      	beq.n	8002d24 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002d20:	2301      	movs	r3, #1
 8002d22:	e0a9      	b.n	8002e78 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d28:	b29b      	uxth	r3, r3
 8002d2a:	2bff      	cmp	r3, #255	; 0xff
 8002d2c:	d90e      	bls.n	8002d4c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	22ff      	movs	r2, #255	; 0xff
 8002d32:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d38:	b2da      	uxtb	r2, r3
 8002d3a:	8979      	ldrh	r1, [r7, #10]
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	9300      	str	r3, [sp, #0]
 8002d40:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d44:	68f8      	ldr	r0, [r7, #12]
 8002d46:	f000 fc2b 	bl	80035a0 <I2C_TransferConfig>
 8002d4a:	e00f      	b.n	8002d6c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d50:	b29a      	uxth	r2, r3
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d5a:	b2da      	uxtb	r2, r3
 8002d5c:	8979      	ldrh	r1, [r7, #10]
 8002d5e:	2300      	movs	r3, #0
 8002d60:	9300      	str	r3, [sp, #0]
 8002d62:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d66:	68f8      	ldr	r0, [r7, #12]
 8002d68:	f000 fc1a 	bl	80035a0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d6c:	697a      	ldr	r2, [r7, #20]
 8002d6e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002d70:	68f8      	ldr	r0, [r7, #12]
 8002d72:	f000 faad 	bl	80032d0 <I2C_WaitOnTXISFlagUntilTimeout>
 8002d76:	4603      	mov	r3, r0
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d001      	beq.n	8002d80 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	e07b      	b.n	8002e78 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d84:	781a      	ldrb	r2, [r3, #0]
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d90:	1c5a      	adds	r2, r3, #1
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d9a:	b29b      	uxth	r3, r3
 8002d9c:	3b01      	subs	r3, #1
 8002d9e:	b29a      	uxth	r2, r3
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002da8:	3b01      	subs	r3, #1
 8002daa:	b29a      	uxth	r2, r3
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002db4:	b29b      	uxth	r3, r3
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d034      	beq.n	8002e24 <HAL_I2C_Mem_Write+0x1c8>
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d130      	bne.n	8002e24 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	9300      	str	r3, [sp, #0]
 8002dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dc8:	2200      	movs	r2, #0
 8002dca:	2180      	movs	r1, #128	; 0x80
 8002dcc:	68f8      	ldr	r0, [r7, #12]
 8002dce:	f000 fa3f 	bl	8003250 <I2C_WaitOnFlagUntilTimeout>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d001      	beq.n	8002ddc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	e04d      	b.n	8002e78 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002de0:	b29b      	uxth	r3, r3
 8002de2:	2bff      	cmp	r3, #255	; 0xff
 8002de4:	d90e      	bls.n	8002e04 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	22ff      	movs	r2, #255	; 0xff
 8002dea:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002df0:	b2da      	uxtb	r2, r3
 8002df2:	8979      	ldrh	r1, [r7, #10]
 8002df4:	2300      	movs	r3, #0
 8002df6:	9300      	str	r3, [sp, #0]
 8002df8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002dfc:	68f8      	ldr	r0, [r7, #12]
 8002dfe:	f000 fbcf 	bl	80035a0 <I2C_TransferConfig>
 8002e02:	e00f      	b.n	8002e24 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e08:	b29a      	uxth	r2, r3
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e12:	b2da      	uxtb	r2, r3
 8002e14:	8979      	ldrh	r1, [r7, #10]
 8002e16:	2300      	movs	r3, #0
 8002e18:	9300      	str	r3, [sp, #0]
 8002e1a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e1e:	68f8      	ldr	r0, [r7, #12]
 8002e20:	f000 fbbe 	bl	80035a0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e28:	b29b      	uxth	r3, r3
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d19e      	bne.n	8002d6c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e2e:	697a      	ldr	r2, [r7, #20]
 8002e30:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002e32:	68f8      	ldr	r0, [r7, #12]
 8002e34:	f000 fa8c 	bl	8003350 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d001      	beq.n	8002e42 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e01a      	b.n	8002e78 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	2220      	movs	r2, #32
 8002e48:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	6859      	ldr	r1, [r3, #4]
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681a      	ldr	r2, [r3, #0]
 8002e54:	4b0a      	ldr	r3, [pc, #40]	; (8002e80 <HAL_I2C_Mem_Write+0x224>)
 8002e56:	400b      	ands	r3, r1
 8002e58:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2220      	movs	r2, #32
 8002e5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2200      	movs	r2, #0
 8002e66:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002e72:	2300      	movs	r3, #0
 8002e74:	e000      	b.n	8002e78 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002e76:	2302      	movs	r3, #2
  }
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	3718      	adds	r7, #24
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}
 8002e80:	fe00e800 	.word	0xfe00e800

08002e84 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b088      	sub	sp, #32
 8002e88:	af02      	add	r7, sp, #8
 8002e8a:	60f8      	str	r0, [r7, #12]
 8002e8c:	4608      	mov	r0, r1
 8002e8e:	4611      	mov	r1, r2
 8002e90:	461a      	mov	r2, r3
 8002e92:	4603      	mov	r3, r0
 8002e94:	817b      	strh	r3, [r7, #10]
 8002e96:	460b      	mov	r3, r1
 8002e98:	813b      	strh	r3, [r7, #8]
 8002e9a:	4613      	mov	r3, r2
 8002e9c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	2b20      	cmp	r3, #32
 8002ea8:	f040 80fd 	bne.w	80030a6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002eac:	6a3b      	ldr	r3, [r7, #32]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d002      	beq.n	8002eb8 <HAL_I2C_Mem_Read+0x34>
 8002eb2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d105      	bne.n	8002ec4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ebe:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	e0f1      	b.n	80030a8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002eca:	2b01      	cmp	r3, #1
 8002ecc:	d101      	bne.n	8002ed2 <HAL_I2C_Mem_Read+0x4e>
 8002ece:	2302      	movs	r3, #2
 8002ed0:	e0ea      	b.n	80030a8 <HAL_I2C_Mem_Read+0x224>
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	2201      	movs	r2, #1
 8002ed6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002eda:	f7ff fb5b 	bl	8002594 <HAL_GetTick>
 8002ede:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	9300      	str	r3, [sp, #0]
 8002ee4:	2319      	movs	r3, #25
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002eec:	68f8      	ldr	r0, [r7, #12]
 8002eee:	f000 f9af 	bl	8003250 <I2C_WaitOnFlagUntilTimeout>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d001      	beq.n	8002efc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	e0d5      	b.n	80030a8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	2222      	movs	r2, #34	; 0x22
 8002f00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2240      	movs	r2, #64	; 0x40
 8002f08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	6a3a      	ldr	r2, [r7, #32]
 8002f16:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002f1c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	2200      	movs	r2, #0
 8002f22:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002f24:	88f8      	ldrh	r0, [r7, #6]
 8002f26:	893a      	ldrh	r2, [r7, #8]
 8002f28:	8979      	ldrh	r1, [r7, #10]
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	9301      	str	r3, [sp, #4]
 8002f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f30:	9300      	str	r3, [sp, #0]
 8002f32:	4603      	mov	r3, r0
 8002f34:	68f8      	ldr	r0, [r7, #12]
 8002f36:	f000 f913 	bl	8003160 <I2C_RequestMemoryRead>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d005      	beq.n	8002f4c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2200      	movs	r2, #0
 8002f44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	e0ad      	b.n	80030a8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f50:	b29b      	uxth	r3, r3
 8002f52:	2bff      	cmp	r3, #255	; 0xff
 8002f54:	d90e      	bls.n	8002f74 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	22ff      	movs	r2, #255	; 0xff
 8002f5a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f60:	b2da      	uxtb	r2, r3
 8002f62:	8979      	ldrh	r1, [r7, #10]
 8002f64:	4b52      	ldr	r3, [pc, #328]	; (80030b0 <HAL_I2C_Mem_Read+0x22c>)
 8002f66:	9300      	str	r3, [sp, #0]
 8002f68:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002f6c:	68f8      	ldr	r0, [r7, #12]
 8002f6e:	f000 fb17 	bl	80035a0 <I2C_TransferConfig>
 8002f72:	e00f      	b.n	8002f94 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f78:	b29a      	uxth	r2, r3
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f82:	b2da      	uxtb	r2, r3
 8002f84:	8979      	ldrh	r1, [r7, #10]
 8002f86:	4b4a      	ldr	r3, [pc, #296]	; (80030b0 <HAL_I2C_Mem_Read+0x22c>)
 8002f88:	9300      	str	r3, [sp, #0]
 8002f8a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f8e:	68f8      	ldr	r0, [r7, #12]
 8002f90:	f000 fb06 	bl	80035a0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	9300      	str	r3, [sp, #0]
 8002f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	2104      	movs	r1, #4
 8002f9e:	68f8      	ldr	r0, [r7, #12]
 8002fa0:	f000 f956 	bl	8003250 <I2C_WaitOnFlagUntilTimeout>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d001      	beq.n	8002fae <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	e07c      	b.n	80030a8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb8:	b2d2      	uxtb	r2, r2
 8002fba:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc0:	1c5a      	adds	r2, r3, #1
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fca:	3b01      	subs	r3, #1
 8002fcc:	b29a      	uxth	r2, r3
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fd6:	b29b      	uxth	r3, r3
 8002fd8:	3b01      	subs	r3, #1
 8002fda:	b29a      	uxth	r2, r3
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fe4:	b29b      	uxth	r3, r3
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d034      	beq.n	8003054 <HAL_I2C_Mem_Read+0x1d0>
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d130      	bne.n	8003054 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	9300      	str	r3, [sp, #0]
 8002ff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	2180      	movs	r1, #128	; 0x80
 8002ffc:	68f8      	ldr	r0, [r7, #12]
 8002ffe:	f000 f927 	bl	8003250 <I2C_WaitOnFlagUntilTimeout>
 8003002:	4603      	mov	r3, r0
 8003004:	2b00      	cmp	r3, #0
 8003006:	d001      	beq.n	800300c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	e04d      	b.n	80030a8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003010:	b29b      	uxth	r3, r3
 8003012:	2bff      	cmp	r3, #255	; 0xff
 8003014:	d90e      	bls.n	8003034 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	22ff      	movs	r2, #255	; 0xff
 800301a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003020:	b2da      	uxtb	r2, r3
 8003022:	8979      	ldrh	r1, [r7, #10]
 8003024:	2300      	movs	r3, #0
 8003026:	9300      	str	r3, [sp, #0]
 8003028:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800302c:	68f8      	ldr	r0, [r7, #12]
 800302e:	f000 fab7 	bl	80035a0 <I2C_TransferConfig>
 8003032:	e00f      	b.n	8003054 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003038:	b29a      	uxth	r2, r3
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003042:	b2da      	uxtb	r2, r3
 8003044:	8979      	ldrh	r1, [r7, #10]
 8003046:	2300      	movs	r3, #0
 8003048:	9300      	str	r3, [sp, #0]
 800304a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800304e:	68f8      	ldr	r0, [r7, #12]
 8003050:	f000 faa6 	bl	80035a0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003058:	b29b      	uxth	r3, r3
 800305a:	2b00      	cmp	r3, #0
 800305c:	d19a      	bne.n	8002f94 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800305e:	697a      	ldr	r2, [r7, #20]
 8003060:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003062:	68f8      	ldr	r0, [r7, #12]
 8003064:	f000 f974 	bl	8003350 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003068:	4603      	mov	r3, r0
 800306a:	2b00      	cmp	r3, #0
 800306c:	d001      	beq.n	8003072 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	e01a      	b.n	80030a8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	2220      	movs	r2, #32
 8003078:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	6859      	ldr	r1, [r3, #4]
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	4b0b      	ldr	r3, [pc, #44]	; (80030b4 <HAL_I2C_Mem_Read+0x230>)
 8003086:	400b      	ands	r3, r1
 8003088:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2220      	movs	r2, #32
 800308e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2200      	movs	r2, #0
 8003096:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2200      	movs	r2, #0
 800309e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80030a2:	2300      	movs	r3, #0
 80030a4:	e000      	b.n	80030a8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80030a6:	2302      	movs	r3, #2
  }
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	3718      	adds	r7, #24
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd80      	pop	{r7, pc}
 80030b0:	80002400 	.word	0x80002400
 80030b4:	fe00e800 	.word	0xfe00e800

080030b8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b086      	sub	sp, #24
 80030bc:	af02      	add	r7, sp, #8
 80030be:	60f8      	str	r0, [r7, #12]
 80030c0:	4608      	mov	r0, r1
 80030c2:	4611      	mov	r1, r2
 80030c4:	461a      	mov	r2, r3
 80030c6:	4603      	mov	r3, r0
 80030c8:	817b      	strh	r3, [r7, #10]
 80030ca:	460b      	mov	r3, r1
 80030cc:	813b      	strh	r3, [r7, #8]
 80030ce:	4613      	mov	r3, r2
 80030d0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80030d2:	88fb      	ldrh	r3, [r7, #6]
 80030d4:	b2da      	uxtb	r2, r3
 80030d6:	8979      	ldrh	r1, [r7, #10]
 80030d8:	4b20      	ldr	r3, [pc, #128]	; (800315c <I2C_RequestMemoryWrite+0xa4>)
 80030da:	9300      	str	r3, [sp, #0]
 80030dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80030e0:	68f8      	ldr	r0, [r7, #12]
 80030e2:	f000 fa5d 	bl	80035a0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80030e6:	69fa      	ldr	r2, [r7, #28]
 80030e8:	69b9      	ldr	r1, [r7, #24]
 80030ea:	68f8      	ldr	r0, [r7, #12]
 80030ec:	f000 f8f0 	bl	80032d0 <I2C_WaitOnTXISFlagUntilTimeout>
 80030f0:	4603      	mov	r3, r0
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d001      	beq.n	80030fa <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	e02c      	b.n	8003154 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80030fa:	88fb      	ldrh	r3, [r7, #6]
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	d105      	bne.n	800310c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003100:	893b      	ldrh	r3, [r7, #8]
 8003102:	b2da      	uxtb	r2, r3
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	629a      	str	r2, [r3, #40]	; 0x28
 800310a:	e015      	b.n	8003138 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800310c:	893b      	ldrh	r3, [r7, #8]
 800310e:	0a1b      	lsrs	r3, r3, #8
 8003110:	b29b      	uxth	r3, r3
 8003112:	b2da      	uxtb	r2, r3
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800311a:	69fa      	ldr	r2, [r7, #28]
 800311c:	69b9      	ldr	r1, [r7, #24]
 800311e:	68f8      	ldr	r0, [r7, #12]
 8003120:	f000 f8d6 	bl	80032d0 <I2C_WaitOnTXISFlagUntilTimeout>
 8003124:	4603      	mov	r3, r0
 8003126:	2b00      	cmp	r3, #0
 8003128:	d001      	beq.n	800312e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	e012      	b.n	8003154 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800312e:	893b      	ldrh	r3, [r7, #8]
 8003130:	b2da      	uxtb	r2, r3
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003138:	69fb      	ldr	r3, [r7, #28]
 800313a:	9300      	str	r3, [sp, #0]
 800313c:	69bb      	ldr	r3, [r7, #24]
 800313e:	2200      	movs	r2, #0
 8003140:	2180      	movs	r1, #128	; 0x80
 8003142:	68f8      	ldr	r0, [r7, #12]
 8003144:	f000 f884 	bl	8003250 <I2C_WaitOnFlagUntilTimeout>
 8003148:	4603      	mov	r3, r0
 800314a:	2b00      	cmp	r3, #0
 800314c:	d001      	beq.n	8003152 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	e000      	b.n	8003154 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003152:	2300      	movs	r3, #0
}
 8003154:	4618      	mov	r0, r3
 8003156:	3710      	adds	r7, #16
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}
 800315c:	80002000 	.word	0x80002000

08003160 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b086      	sub	sp, #24
 8003164:	af02      	add	r7, sp, #8
 8003166:	60f8      	str	r0, [r7, #12]
 8003168:	4608      	mov	r0, r1
 800316a:	4611      	mov	r1, r2
 800316c:	461a      	mov	r2, r3
 800316e:	4603      	mov	r3, r0
 8003170:	817b      	strh	r3, [r7, #10]
 8003172:	460b      	mov	r3, r1
 8003174:	813b      	strh	r3, [r7, #8]
 8003176:	4613      	mov	r3, r2
 8003178:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800317a:	88fb      	ldrh	r3, [r7, #6]
 800317c:	b2da      	uxtb	r2, r3
 800317e:	8979      	ldrh	r1, [r7, #10]
 8003180:	4b20      	ldr	r3, [pc, #128]	; (8003204 <I2C_RequestMemoryRead+0xa4>)
 8003182:	9300      	str	r3, [sp, #0]
 8003184:	2300      	movs	r3, #0
 8003186:	68f8      	ldr	r0, [r7, #12]
 8003188:	f000 fa0a 	bl	80035a0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800318c:	69fa      	ldr	r2, [r7, #28]
 800318e:	69b9      	ldr	r1, [r7, #24]
 8003190:	68f8      	ldr	r0, [r7, #12]
 8003192:	f000 f89d 	bl	80032d0 <I2C_WaitOnTXISFlagUntilTimeout>
 8003196:	4603      	mov	r3, r0
 8003198:	2b00      	cmp	r3, #0
 800319a:	d001      	beq.n	80031a0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800319c:	2301      	movs	r3, #1
 800319e:	e02c      	b.n	80031fa <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80031a0:	88fb      	ldrh	r3, [r7, #6]
 80031a2:	2b01      	cmp	r3, #1
 80031a4:	d105      	bne.n	80031b2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80031a6:	893b      	ldrh	r3, [r7, #8]
 80031a8:	b2da      	uxtb	r2, r3
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	629a      	str	r2, [r3, #40]	; 0x28
 80031b0:	e015      	b.n	80031de <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80031b2:	893b      	ldrh	r3, [r7, #8]
 80031b4:	0a1b      	lsrs	r3, r3, #8
 80031b6:	b29b      	uxth	r3, r3
 80031b8:	b2da      	uxtb	r2, r3
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80031c0:	69fa      	ldr	r2, [r7, #28]
 80031c2:	69b9      	ldr	r1, [r7, #24]
 80031c4:	68f8      	ldr	r0, [r7, #12]
 80031c6:	f000 f883 	bl	80032d0 <I2C_WaitOnTXISFlagUntilTimeout>
 80031ca:	4603      	mov	r3, r0
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d001      	beq.n	80031d4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80031d0:	2301      	movs	r3, #1
 80031d2:	e012      	b.n	80031fa <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80031d4:	893b      	ldrh	r3, [r7, #8]
 80031d6:	b2da      	uxtb	r2, r3
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80031de:	69fb      	ldr	r3, [r7, #28]
 80031e0:	9300      	str	r3, [sp, #0]
 80031e2:	69bb      	ldr	r3, [r7, #24]
 80031e4:	2200      	movs	r2, #0
 80031e6:	2140      	movs	r1, #64	; 0x40
 80031e8:	68f8      	ldr	r0, [r7, #12]
 80031ea:	f000 f831 	bl	8003250 <I2C_WaitOnFlagUntilTimeout>
 80031ee:	4603      	mov	r3, r0
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d001      	beq.n	80031f8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80031f4:	2301      	movs	r3, #1
 80031f6:	e000      	b.n	80031fa <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80031f8:	2300      	movs	r3, #0
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	3710      	adds	r7, #16
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}
 8003202:	bf00      	nop
 8003204:	80002000 	.word	0x80002000

08003208 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003208:	b480      	push	{r7}
 800320a:	b083      	sub	sp, #12
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	699b      	ldr	r3, [r3, #24]
 8003216:	f003 0302 	and.w	r3, r3, #2
 800321a:	2b02      	cmp	r3, #2
 800321c:	d103      	bne.n	8003226 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	2200      	movs	r2, #0
 8003224:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	699b      	ldr	r3, [r3, #24]
 800322c:	f003 0301 	and.w	r3, r3, #1
 8003230:	2b01      	cmp	r3, #1
 8003232:	d007      	beq.n	8003244 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	699a      	ldr	r2, [r3, #24]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f042 0201 	orr.w	r2, r2, #1
 8003242:	619a      	str	r2, [r3, #24]
  }
}
 8003244:	bf00      	nop
 8003246:	370c      	adds	r7, #12
 8003248:	46bd      	mov	sp, r7
 800324a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324e:	4770      	bx	lr

08003250 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b084      	sub	sp, #16
 8003254:	af00      	add	r7, sp, #0
 8003256:	60f8      	str	r0, [r7, #12]
 8003258:	60b9      	str	r1, [r7, #8]
 800325a:	603b      	str	r3, [r7, #0]
 800325c:	4613      	mov	r3, r2
 800325e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003260:	e022      	b.n	80032a8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003268:	d01e      	beq.n	80032a8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800326a:	f7ff f993 	bl	8002594 <HAL_GetTick>
 800326e:	4602      	mov	r2, r0
 8003270:	69bb      	ldr	r3, [r7, #24]
 8003272:	1ad3      	subs	r3, r2, r3
 8003274:	683a      	ldr	r2, [r7, #0]
 8003276:	429a      	cmp	r2, r3
 8003278:	d302      	bcc.n	8003280 <I2C_WaitOnFlagUntilTimeout+0x30>
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d113      	bne.n	80032a8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003284:	f043 0220 	orr.w	r2, r3, #32
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2220      	movs	r2, #32
 8003290:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	2200      	movs	r2, #0
 8003298:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2200      	movs	r2, #0
 80032a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80032a4:	2301      	movs	r3, #1
 80032a6:	e00f      	b.n	80032c8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	699a      	ldr	r2, [r3, #24]
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	4013      	ands	r3, r2
 80032b2:	68ba      	ldr	r2, [r7, #8]
 80032b4:	429a      	cmp	r2, r3
 80032b6:	bf0c      	ite	eq
 80032b8:	2301      	moveq	r3, #1
 80032ba:	2300      	movne	r3, #0
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	461a      	mov	r2, r3
 80032c0:	79fb      	ldrb	r3, [r7, #7]
 80032c2:	429a      	cmp	r2, r3
 80032c4:	d0cd      	beq.n	8003262 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80032c6:	2300      	movs	r3, #0
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	3710      	adds	r7, #16
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd80      	pop	{r7, pc}

080032d0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b084      	sub	sp, #16
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	60f8      	str	r0, [r7, #12]
 80032d8:	60b9      	str	r1, [r7, #8]
 80032da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80032dc:	e02c      	b.n	8003338 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80032de:	687a      	ldr	r2, [r7, #4]
 80032e0:	68b9      	ldr	r1, [r7, #8]
 80032e2:	68f8      	ldr	r0, [r7, #12]
 80032e4:	f000 f870 	bl	80033c8 <I2C_IsErrorOccurred>
 80032e8:	4603      	mov	r3, r0
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d001      	beq.n	80032f2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	e02a      	b.n	8003348 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80032f8:	d01e      	beq.n	8003338 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032fa:	f7ff f94b 	bl	8002594 <HAL_GetTick>
 80032fe:	4602      	mov	r2, r0
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	1ad3      	subs	r3, r2, r3
 8003304:	68ba      	ldr	r2, [r7, #8]
 8003306:	429a      	cmp	r2, r3
 8003308:	d302      	bcc.n	8003310 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d113      	bne.n	8003338 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003314:	f043 0220 	orr.w	r2, r3, #32
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	2220      	movs	r2, #32
 8003320:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	2200      	movs	r2, #0
 8003328:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	2200      	movs	r2, #0
 8003330:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	e007      	b.n	8003348 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	699b      	ldr	r3, [r3, #24]
 800333e:	f003 0302 	and.w	r3, r3, #2
 8003342:	2b02      	cmp	r3, #2
 8003344:	d1cb      	bne.n	80032de <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003346:	2300      	movs	r3, #0
}
 8003348:	4618      	mov	r0, r3
 800334a:	3710      	adds	r7, #16
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}

08003350 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b084      	sub	sp, #16
 8003354:	af00      	add	r7, sp, #0
 8003356:	60f8      	str	r0, [r7, #12]
 8003358:	60b9      	str	r1, [r7, #8]
 800335a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800335c:	e028      	b.n	80033b0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800335e:	687a      	ldr	r2, [r7, #4]
 8003360:	68b9      	ldr	r1, [r7, #8]
 8003362:	68f8      	ldr	r0, [r7, #12]
 8003364:	f000 f830 	bl	80033c8 <I2C_IsErrorOccurred>
 8003368:	4603      	mov	r3, r0
 800336a:	2b00      	cmp	r3, #0
 800336c:	d001      	beq.n	8003372 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800336e:	2301      	movs	r3, #1
 8003370:	e026      	b.n	80033c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003372:	f7ff f90f 	bl	8002594 <HAL_GetTick>
 8003376:	4602      	mov	r2, r0
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	1ad3      	subs	r3, r2, r3
 800337c:	68ba      	ldr	r2, [r7, #8]
 800337e:	429a      	cmp	r2, r3
 8003380:	d302      	bcc.n	8003388 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d113      	bne.n	80033b0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800338c:	f043 0220 	orr.w	r2, r3, #32
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	2220      	movs	r2, #32
 8003398:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	2200      	movs	r2, #0
 80033a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	2200      	movs	r2, #0
 80033a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	e007      	b.n	80033c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	699b      	ldr	r3, [r3, #24]
 80033b6:	f003 0320 	and.w	r3, r3, #32
 80033ba:	2b20      	cmp	r3, #32
 80033bc:	d1cf      	bne.n	800335e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80033be:	2300      	movs	r3, #0
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	3710      	adds	r7, #16
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}

080033c8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b08a      	sub	sp, #40	; 0x28
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	60f8      	str	r0, [r7, #12]
 80033d0:	60b9      	str	r1, [r7, #8]
 80033d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80033d4:	2300      	movs	r3, #0
 80033d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	699b      	ldr	r3, [r3, #24]
 80033e0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80033e2:	2300      	movs	r3, #0
 80033e4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80033ea:	69bb      	ldr	r3, [r7, #24]
 80033ec:	f003 0310 	and.w	r3, r3, #16
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d075      	beq.n	80034e0 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	2210      	movs	r2, #16
 80033fa:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80033fc:	e056      	b.n	80034ac <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003404:	d052      	beq.n	80034ac <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003406:	f7ff f8c5 	bl	8002594 <HAL_GetTick>
 800340a:	4602      	mov	r2, r0
 800340c:	69fb      	ldr	r3, [r7, #28]
 800340e:	1ad3      	subs	r3, r2, r3
 8003410:	68ba      	ldr	r2, [r7, #8]
 8003412:	429a      	cmp	r2, r3
 8003414:	d302      	bcc.n	800341c <I2C_IsErrorOccurred+0x54>
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d147      	bne.n	80034ac <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003426:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800342e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	699b      	ldr	r3, [r3, #24]
 8003436:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800343a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800343e:	d12e      	bne.n	800349e <I2C_IsErrorOccurred+0xd6>
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003446:	d02a      	beq.n	800349e <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8003448:	7cfb      	ldrb	r3, [r7, #19]
 800344a:	2b20      	cmp	r3, #32
 800344c:	d027      	beq.n	800349e <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	685a      	ldr	r2, [r3, #4]
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800345c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800345e:	f7ff f899 	bl	8002594 <HAL_GetTick>
 8003462:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003464:	e01b      	b.n	800349e <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003466:	f7ff f895 	bl	8002594 <HAL_GetTick>
 800346a:	4602      	mov	r2, r0
 800346c:	69fb      	ldr	r3, [r7, #28]
 800346e:	1ad3      	subs	r3, r2, r3
 8003470:	2b19      	cmp	r3, #25
 8003472:	d914      	bls.n	800349e <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003478:	f043 0220 	orr.w	r2, r3, #32
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2220      	movs	r2, #32
 8003484:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	2200      	movs	r2, #0
 800348c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	2200      	movs	r2, #0
 8003494:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8003498:	2301      	movs	r3, #1
 800349a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	699b      	ldr	r3, [r3, #24]
 80034a4:	f003 0320 	and.w	r3, r3, #32
 80034a8:	2b20      	cmp	r3, #32
 80034aa:	d1dc      	bne.n	8003466 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	699b      	ldr	r3, [r3, #24]
 80034b2:	f003 0320 	and.w	r3, r3, #32
 80034b6:	2b20      	cmp	r3, #32
 80034b8:	d003      	beq.n	80034c2 <I2C_IsErrorOccurred+0xfa>
 80034ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d09d      	beq.n	80033fe <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80034c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d103      	bne.n	80034d2 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	2220      	movs	r2, #32
 80034d0:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80034d2:	6a3b      	ldr	r3, [r7, #32]
 80034d4:	f043 0304 	orr.w	r3, r3, #4
 80034d8:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	699b      	ldr	r3, [r3, #24]
 80034e6:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80034e8:	69bb      	ldr	r3, [r7, #24]
 80034ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d00b      	beq.n	800350a <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80034f2:	6a3b      	ldr	r3, [r7, #32]
 80034f4:	f043 0301 	orr.w	r3, r3, #1
 80034f8:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003502:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003504:	2301      	movs	r3, #1
 8003506:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800350a:	69bb      	ldr	r3, [r7, #24]
 800350c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003510:	2b00      	cmp	r3, #0
 8003512:	d00b      	beq.n	800352c <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003514:	6a3b      	ldr	r3, [r7, #32]
 8003516:	f043 0308 	orr.w	r3, r3, #8
 800351a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003524:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800352c:	69bb      	ldr	r3, [r7, #24]
 800352e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003532:	2b00      	cmp	r3, #0
 8003534:	d00b      	beq.n	800354e <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003536:	6a3b      	ldr	r3, [r7, #32]
 8003538:	f043 0302 	orr.w	r3, r3, #2
 800353c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003546:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800354e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003552:	2b00      	cmp	r3, #0
 8003554:	d01c      	beq.n	8003590 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003556:	68f8      	ldr	r0, [r7, #12]
 8003558:	f7ff fe56 	bl	8003208 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	6859      	ldr	r1, [r3, #4]
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681a      	ldr	r2, [r3, #0]
 8003566:	4b0d      	ldr	r3, [pc, #52]	; (800359c <I2C_IsErrorOccurred+0x1d4>)
 8003568:	400b      	ands	r3, r1
 800356a:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003570:	6a3b      	ldr	r3, [r7, #32]
 8003572:	431a      	orrs	r2, r3
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	2220      	movs	r2, #32
 800357c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	2200      	movs	r2, #0
 8003584:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	2200      	movs	r2, #0
 800358c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003590:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003594:	4618      	mov	r0, r3
 8003596:	3728      	adds	r7, #40	; 0x28
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}
 800359c:	fe00e800 	.word	0xfe00e800

080035a0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80035a0:	b480      	push	{r7}
 80035a2:	b087      	sub	sp, #28
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	60f8      	str	r0, [r7, #12]
 80035a8:	607b      	str	r3, [r7, #4]
 80035aa:	460b      	mov	r3, r1
 80035ac:	817b      	strh	r3, [r7, #10]
 80035ae:	4613      	mov	r3, r2
 80035b0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80035b2:	897b      	ldrh	r3, [r7, #10]
 80035b4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80035b8:	7a7b      	ldrb	r3, [r7, #9]
 80035ba:	041b      	lsls	r3, r3, #16
 80035bc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80035c0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80035c6:	6a3b      	ldr	r3, [r7, #32]
 80035c8:	4313      	orrs	r3, r2
 80035ca:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80035ce:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	685a      	ldr	r2, [r3, #4]
 80035d6:	6a3b      	ldr	r3, [r7, #32]
 80035d8:	0d5b      	lsrs	r3, r3, #21
 80035da:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80035de:	4b08      	ldr	r3, [pc, #32]	; (8003600 <I2C_TransferConfig+0x60>)
 80035e0:	430b      	orrs	r3, r1
 80035e2:	43db      	mvns	r3, r3
 80035e4:	ea02 0103 	and.w	r1, r2, r3
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	697a      	ldr	r2, [r7, #20]
 80035ee:	430a      	orrs	r2, r1
 80035f0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80035f2:	bf00      	nop
 80035f4:	371c      	adds	r7, #28
 80035f6:	46bd      	mov	sp, r7
 80035f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fc:	4770      	bx	lr
 80035fe:	bf00      	nop
 8003600:	03ff63ff 	.word	0x03ff63ff

08003604 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003604:	b480      	push	{r7}
 8003606:	b083      	sub	sp, #12
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
 800360c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003614:	b2db      	uxtb	r3, r3
 8003616:	2b20      	cmp	r3, #32
 8003618:	d138      	bne.n	800368c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003620:	2b01      	cmp	r3, #1
 8003622:	d101      	bne.n	8003628 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003624:	2302      	movs	r3, #2
 8003626:	e032      	b.n	800368e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2201      	movs	r2, #1
 800362c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2224      	movs	r2, #36	; 0x24
 8003634:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	681a      	ldr	r2, [r3, #0]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f022 0201 	bic.w	r2, r2, #1
 8003646:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	681a      	ldr	r2, [r3, #0]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003656:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	6819      	ldr	r1, [r3, #0]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	683a      	ldr	r2, [r7, #0]
 8003664:	430a      	orrs	r2, r1
 8003666:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	681a      	ldr	r2, [r3, #0]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f042 0201 	orr.w	r2, r2, #1
 8003676:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2220      	movs	r2, #32
 800367c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2200      	movs	r2, #0
 8003684:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003688:	2300      	movs	r3, #0
 800368a:	e000      	b.n	800368e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800368c:	2302      	movs	r3, #2
  }
}
 800368e:	4618      	mov	r0, r3
 8003690:	370c      	adds	r7, #12
 8003692:	46bd      	mov	sp, r7
 8003694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003698:	4770      	bx	lr

0800369a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800369a:	b480      	push	{r7}
 800369c:	b085      	sub	sp, #20
 800369e:	af00      	add	r7, sp, #0
 80036a0:	6078      	str	r0, [r7, #4]
 80036a2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036aa:	b2db      	uxtb	r3, r3
 80036ac:	2b20      	cmp	r3, #32
 80036ae:	d139      	bne.n	8003724 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80036b6:	2b01      	cmp	r3, #1
 80036b8:	d101      	bne.n	80036be <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80036ba:	2302      	movs	r3, #2
 80036bc:	e033      	b.n	8003726 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2201      	movs	r2, #1
 80036c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2224      	movs	r2, #36	; 0x24
 80036ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	681a      	ldr	r2, [r3, #0]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f022 0201 	bic.w	r2, r2, #1
 80036dc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80036ec:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	021b      	lsls	r3, r3, #8
 80036f2:	68fa      	ldr	r2, [r7, #12]
 80036f4:	4313      	orrs	r3, r2
 80036f6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	68fa      	ldr	r2, [r7, #12]
 80036fe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	681a      	ldr	r2, [r3, #0]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f042 0201 	orr.w	r2, r2, #1
 800370e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2220      	movs	r2, #32
 8003714:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2200      	movs	r2, #0
 800371c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003720:	2300      	movs	r3, #0
 8003722:	e000      	b.n	8003726 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003724:	2302      	movs	r3, #2
  }
}
 8003726:	4618      	mov	r0, r3
 8003728:	3714      	adds	r7, #20
 800372a:	46bd      	mov	sp, r7
 800372c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003730:	4770      	bx	lr
	...

08003734 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b084      	sub	sp, #16
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d101      	bne.n	8003746 <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	e08f      	b.n	8003866 <HAL_LPTIM_Init+0x132>
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	2b01      	cmp	r3, #1
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));
#if defined(LPTIM_RCR_REP)
  assert_param(IS_LPTIM_REPETITION(hlptim->Init.RepetitionCounter));
#endif

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8003752:	b2db      	uxtb	r3, r3
 8003754:	2b00      	cmp	r3, #0
 8003756:	d106      	bne.n	8003766 <HAL_LPTIM_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2200      	movs	r2, #0
 800375c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 8003760:	6878      	ldr	r0, [r7, #4]
 8003762:	f7fe fc9f 	bl	80020a4 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2202      	movs	r2, #2
 800376a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  }

#endif

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	68db      	ldr	r3, [r3, #12]
 8003774:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	2b01      	cmp	r3, #1
 800377c:	d004      	beq.n	8003788 <HAL_LPTIM_Init+0x54>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003782:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003786:	d103      	bne.n	8003790 <HAL_LPTIM_Init+0x5c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	f023 031e 	bic.w	r3, r3, #30
 800378e:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	695b      	ldr	r3, [r3, #20]
 8003794:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003798:	4293      	cmp	r3, r2
 800379a:	d005      	beq.n	80037a8 <HAL_LPTIM_Init+0x74>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80037a2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80037a6:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 80037a8:	68fa      	ldr	r2, [r7, #12]
 80037aa:	4b31      	ldr	r3, [pc, #196]	; (8003870 <HAL_LPTIM_Init+0x13c>)
 80037ac:	4013      	ands	r3, r2
 80037ae:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80037b8:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 80037be:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 80037c4:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 80037ca:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80037cc:	68fa      	ldr	r2, [r7, #12]
 80037ce:	4313      	orrs	r3, r2
 80037d0:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d107      	bne.n	80037ea <HAL_LPTIM_Init+0xb6>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 80037e2:	4313      	orrs	r3, r2
 80037e4:	68fa      	ldr	r2, [r7, #12]
 80037e6:	4313      	orrs	r3, r2
 80037e8:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	2b01      	cmp	r3, #1
 80037f0:	d004      	beq.n	80037fc <HAL_LPTIM_Init+0xc8>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037f6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80037fa:	d107      	bne.n	800380c <HAL_LPTIM_Init+0xd8>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8003804:	4313      	orrs	r3, r2
 8003806:	68fa      	ldr	r2, [r7, #12]
 8003808:	4313      	orrs	r3, r2
 800380a:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	695b      	ldr	r3, [r3, #20]
 8003810:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003814:	4293      	cmp	r3, r2
 8003816:	d00a      	beq.n	800382e <HAL_LPTIM_Init+0xfa>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8003820:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 8003826:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8003828:	68fa      	ldr	r2, [r7, #12]
 800382a:	4313      	orrs	r3, r2
 800382c:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	68fa      	ldr	r2, [r7, #12]
 8003834:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if (hlptim->Instance == LPTIM1)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a0e      	ldr	r2, [pc, #56]	; (8003874 <HAL_LPTIM_Init+0x140>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d108      	bne.n	8003852 <HAL_LPTIM_Init+0x11e>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->OR = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	430a      	orrs	r2, r1
 800384e:	621a      	str	r2, [r3, #32]
 8003850:	e004      	b.n	800385c <HAL_LPTIM_Init+0x128>
  {
    /* Check LPTIM2 Input1 source */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

    /* Configure LPTIM2 Input1 source */
    hlptim->Instance->OR = hlptim->Init.Input1Source;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	687a      	ldr	r2, [r7, #4]
 8003858:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800385a:	621a      	str	r2, [r3, #32]
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2201      	movs	r2, #1
 8003860:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 8003864:	2300      	movs	r3, #0
}
 8003866:	4618      	mov	r0, r3
 8003868:	3710      	adds	r7, #16
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}
 800386e:	bf00      	nop
 8003870:	ff19f1fe 	.word	0xff19f1fe
 8003874:	40007c00 	.word	0x40007c00

08003878 <HAL_LPTIM_TimeOut_Start_IT>:
  * @param  Timeout Specifies the TimeOut value to reset the counter.
  *         This parameter must be a value between 0x0000 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_TimeOut_Start_IT(LPTIM_HandleTypeDef *hlptim, uint32_t Period, uint32_t Timeout)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b084      	sub	sp, #16
 800387c:	af00      	add	r7, sp, #0
 800387e:	60f8      	str	r0, [r7, #12]
 8003880:	60b9      	str	r1, [r7, #8]
 8003882:	607a      	str	r2, [r7, #4]
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(Period));
  assert_param(IS_LPTIM_PULSE(Timeout));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	2202      	movs	r2, #2
 8003888:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Enable EXTI Line interrupt on the LPTIM Wake-up Timer */
  __HAL_LPTIM_WAKEUPTIMER_EXTI_ENABLE_IT(hlptim->Instance);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a36      	ldr	r2, [pc, #216]	; (800396c <HAL_LPTIM_TimeOut_Start_IT+0xf4>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d106      	bne.n	80038a4 <HAL_LPTIM_TimeOut_Start_IT+0x2c>
 8003896:	4b36      	ldr	r3, [pc, #216]	; (8003970 <HAL_LPTIM_TimeOut_Start_IT+0xf8>)
 8003898:	6a1b      	ldr	r3, [r3, #32]
 800389a:	4a35      	ldr	r2, [pc, #212]	; (8003970 <HAL_LPTIM_TimeOut_Start_IT+0xf8>)
 800389c:	f043 0301 	orr.w	r3, r3, #1
 80038a0:	6213      	str	r3, [r2, #32]
 80038a2:	e005      	b.n	80038b0 <HAL_LPTIM_TimeOut_Start_IT+0x38>
 80038a4:	4b32      	ldr	r3, [pc, #200]	; (8003970 <HAL_LPTIM_TimeOut_Start_IT+0xf8>)
 80038a6:	6a1b      	ldr	r3, [r3, #32]
 80038a8:	4a31      	ldr	r2, [pc, #196]	; (8003970 <HAL_LPTIM_TimeOut_Start_IT+0xf8>)
 80038aa:	f043 0302 	orr.w	r3, r3, #2
 80038ae:	6213      	str	r3, [r2, #32]

  /* Set TIMOUT bit to enable the timeout function */
  hlptim->Instance->CFGR |= LPTIM_CFGR_TIMOUT;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	68da      	ldr	r2, [r3, #12]
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80038be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	691a      	ldr	r2, [r3, #16]
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f042 0201 	orr.w	r2, r2, #1
 80038ce:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	2210      	movs	r2, #16
 80038d6:	605a      	str	r2, [r3, #4]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	68ba      	ldr	r2, [r7, #8]
 80038de:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 80038e0:	2110      	movs	r1, #16
 80038e2:	68f8      	ldr	r0, [r7, #12]
 80038e4:	f000 f92c 	bl	8003b40 <LPTIM_WaitForFlag>
 80038e8:	4603      	mov	r3, r0
 80038ea:	2b03      	cmp	r3, #3
 80038ec:	d101      	bne.n	80038f2 <HAL_LPTIM_TimeOut_Start_IT+0x7a>
  {
    return HAL_TIMEOUT;
 80038ee:	2303      	movs	r3, #3
 80038f0:	e038      	b.n	8003964 <HAL_LPTIM_TimeOut_Start_IT+0xec>
  }

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	2208      	movs	r2, #8
 80038f8:	605a      	str	r2, [r3, #4]

  /* Load the Timeout value in the compare register */
  __HAL_LPTIM_COMPARE_SET(hlptim, Timeout);
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	687a      	ldr	r2, [r7, #4]
 8003900:	615a      	str	r2, [r3, #20]

  /* Wait for the completion of the write operation to the LPTIM_CMP register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 8003902:	2108      	movs	r1, #8
 8003904:	68f8      	ldr	r0, [r7, #12]
 8003906:	f000 f91b 	bl	8003b40 <LPTIM_WaitForFlag>
 800390a:	4603      	mov	r3, r0
 800390c:	2b03      	cmp	r3, #3
 800390e:	d101      	bne.n	8003914 <HAL_LPTIM_TimeOut_Start_IT+0x9c>
  {
    return HAL_TIMEOUT;
 8003910:	2303      	movs	r3, #3
 8003912:	e027      	b.n	8003964 <HAL_LPTIM_TimeOut_Start_IT+0xec>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 8003914:	68f8      	ldr	r0, [r7, #12]
 8003916:	f000 f943 	bl	8003ba0 <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 800391a:	68f8      	ldr	r0, [r7, #12]
 800391c:	f000 f901 	bl	8003b22 <HAL_LPTIM_GetState>
 8003920:	4603      	mov	r3, r0
 8003922:	2b03      	cmp	r3, #3
 8003924:	d101      	bne.n	800392a <HAL_LPTIM_TimeOut_Start_IT+0xb2>
  {
    return HAL_TIMEOUT;
 8003926:	2303      	movs	r3, #3
 8003928:	e01c      	b.n	8003964 <HAL_LPTIM_TimeOut_Start_IT+0xec>
  }

  /* Enable Compare match interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_CMPM);
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	689a      	ldr	r2, [r3, #8]
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f042 0201 	orr.w	r2, r2, #1
 8003938:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	691a      	ldr	r2, [r3, #16]
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f042 0201 	orr.w	r2, r2, #1
 8003948:	611a      	str	r2, [r3, #16]

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	691a      	ldr	r2, [r3, #16]
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f042 0204 	orr.w	r2, r2, #4
 8003958:	611a      	str	r2, [r3, #16]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	2201      	movs	r2, #1
 800395e:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 8003962:	2300      	movs	r3, #0
}
 8003964:	4618      	mov	r0, r3
 8003966:	3710      	adds	r7, #16
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}
 800396c:	40007c00 	.word	0x40007c00
 8003970:	40010400 	.word	0x40010400

08003974 <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b082      	sub	sp, #8
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f003 0301 	and.w	r3, r3, #1
 8003986:	2b01      	cmp	r3, #1
 8003988:	d10d      	bne.n	80039a6 <HAL_LPTIM_IRQHandler+0x32>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	f003 0301 	and.w	r3, r3, #1
 8003994:	2b01      	cmp	r3, #1
 8003996:	d106      	bne.n	80039a6 <HAL_LPTIM_IRQHandler+0x32>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	2201      	movs	r2, #1
 800399e:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
#else
      HAL_LPTIM_CompareMatchCallback(hlptim);
 80039a0:	6878      	ldr	r0, [r7, #4]
 80039a2:	f7fe fad9 	bl	8001f58 <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f003 0302 	and.w	r3, r3, #2
 80039b0:	2b02      	cmp	r3, #2
 80039b2:	d10d      	bne.n	80039d0 <HAL_LPTIM_IRQHandler+0x5c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	f003 0302 	and.w	r3, r3, #2
 80039be:	2b02      	cmp	r3, #2
 80039c0:	d106      	bne.n	80039d0 <HAL_LPTIM_IRQHandler+0x5c>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	2202      	movs	r2, #2
 80039c8:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	f000 f86d 	bl	8003aaa <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f003 0304 	and.w	r3, r3, #4
 80039da:	2b04      	cmp	r3, #4
 80039dc:	d10d      	bne.n	80039fa <HAL_LPTIM_IRQHandler+0x86>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	f003 0304 	and.w	r3, r3, #4
 80039e8:	2b04      	cmp	r3, #4
 80039ea:	d106      	bne.n	80039fa <HAL_LPTIM_IRQHandler+0x86>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	2204      	movs	r2, #4
 80039f2:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 80039f4:	6878      	ldr	r0, [r7, #4]
 80039f6:	f000 f862 	bl	8003abe <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f003 0308 	and.w	r3, r3, #8
 8003a04:	2b08      	cmp	r3, #8
 8003a06:	d10d      	bne.n	8003a24 <HAL_LPTIM_IRQHandler+0xb0>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	689b      	ldr	r3, [r3, #8]
 8003a0e:	f003 0308 	and.w	r3, r3, #8
 8003a12:	2b08      	cmp	r3, #8
 8003a14:	d106      	bne.n	8003a24 <HAL_LPTIM_IRQHandler+0xb0>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	2208      	movs	r2, #8
 8003a1c:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	f000 f857 	bl	8003ad2 <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f003 0310 	and.w	r3, r3, #16
 8003a2e:	2b10      	cmp	r3, #16
 8003a30:	d10d      	bne.n	8003a4e <HAL_LPTIM_IRQHandler+0xda>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	f003 0310 	and.w	r3, r3, #16
 8003a3c:	2b10      	cmp	r3, #16
 8003a3e:	d106      	bne.n	8003a4e <HAL_LPTIM_IRQHandler+0xda>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	2210      	movs	r2, #16
 8003a46:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 8003a48:	6878      	ldr	r0, [r7, #4]
 8003a4a:	f000 f84c 	bl	8003ae6 <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f003 0320 	and.w	r3, r3, #32
 8003a58:	2b20      	cmp	r3, #32
 8003a5a:	d10d      	bne.n	8003a78 <HAL_LPTIM_IRQHandler+0x104>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	f003 0320 	and.w	r3, r3, #32
 8003a66:	2b20      	cmp	r3, #32
 8003a68:	d106      	bne.n	8003a78 <HAL_LPTIM_IRQHandler+0x104>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	2220      	movs	r2, #32
 8003a70:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 8003a72:	6878      	ldr	r0, [r7, #4]
 8003a74:	f000 f841 	bl	8003afa <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a82:	2b40      	cmp	r3, #64	; 0x40
 8003a84:	d10d      	bne.n	8003aa2 <HAL_LPTIM_IRQHandler+0x12e>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a90:	2b40      	cmp	r3, #64	; 0x40
 8003a92:	d106      	bne.n	8003aa2 <HAL_LPTIM_IRQHandler+0x12e>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	2240      	movs	r2, #64	; 0x40
 8003a9a:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 8003a9c:	6878      	ldr	r0, [r7, #4]
 8003a9e:	f000 f836 	bl	8003b0e <HAL_LPTIM_DirectionDownCallback>
      HAL_LPTIM_RepCounterWriteCallback(hlptim);
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
#endif
}
 8003aa2:	bf00      	nop
 8003aa4:	3708      	adds	r7, #8
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}

08003aaa <HAL_LPTIM_AutoReloadMatchCallback>:
  * @brief  Autoreload match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8003aaa:	b480      	push	{r7}
 8003aac:	b083      	sub	sp, #12
 8003aae:	af00      	add	r7, sp, #0
 8003ab0:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadMatchCallback could be implemented in the user file
   */
}
 8003ab2:	bf00      	nop
 8003ab4:	370c      	adds	r7, #12
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abc:	4770      	bx	lr

08003abe <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 8003abe:	b480      	push	{r7}
 8003ac0:	b083      	sub	sp, #12
 8003ac2:	af00      	add	r7, sp, #0
 8003ac4:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 8003ac6:	bf00      	nop
 8003ac8:	370c      	adds	r7, #12
 8003aca:	46bd      	mov	sp, r7
 8003acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad0:	4770      	bx	lr

08003ad2 <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8003ad2:	b480      	push	{r7}
 8003ad4:	b083      	sub	sp, #12
 8003ad6:	af00      	add	r7, sp, #0
 8003ad8:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 8003ada:	bf00      	nop
 8003adc:	370c      	adds	r7, #12
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae4:	4770      	bx	lr

08003ae6 <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8003ae6:	b480      	push	{r7}
 8003ae8:	b083      	sub	sp, #12
 8003aea:	af00      	add	r7, sp, #0
 8003aec:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 8003aee:	bf00      	nop
 8003af0:	370c      	adds	r7, #12
 8003af2:	46bd      	mov	sp, r7
 8003af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af8:	4770      	bx	lr

08003afa <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 8003afa:	b480      	push	{r7}
 8003afc:	b083      	sub	sp, #12
 8003afe:	af00      	add	r7, sp, #0
 8003b00:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 8003b02:	bf00      	nop
 8003b04:	370c      	adds	r7, #12
 8003b06:	46bd      	mov	sp, r7
 8003b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0c:	4770      	bx	lr

08003b0e <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 8003b0e:	b480      	push	{r7}
 8003b10:	b083      	sub	sp, #12
 8003b12:	af00      	add	r7, sp, #0
 8003b14:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 8003b16:	bf00      	nop
 8003b18:	370c      	adds	r7, #12
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b20:	4770      	bx	lr

08003b22 <HAL_LPTIM_GetState>:
  * @brief  Return the LPTIM handle state.
  * @param  hlptim LPTIM handle
  * @retval HAL state
  */
HAL_LPTIM_StateTypeDef HAL_LPTIM_GetState(LPTIM_HandleTypeDef *hlptim)
{
 8003b22:	b480      	push	{r7}
 8003b24:	b083      	sub	sp, #12
 8003b26:	af00      	add	r7, sp, #0
 8003b28:	6078      	str	r0, [r7, #4]
  /* Return LPTIM handle state */
  return hlptim->State;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8003b30:	b2db      	uxtb	r3, r3
}
 8003b32:	4618      	mov	r0, r3
 8003b34:	370c      	adds	r7, #12
 8003b36:	46bd      	mov	sp, r7
 8003b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3c:	4770      	bx	lr
	...

08003b40 <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b085      	sub	sp, #20
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
 8003b48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	73fb      	strb	r3, [r7, #15]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 8003b4e:	4b12      	ldr	r3, [pc, #72]	; (8003b98 <LPTIM_WaitForFlag+0x58>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a12      	ldr	r2, [pc, #72]	; (8003b9c <LPTIM_WaitForFlag+0x5c>)
 8003b54:	fba2 2303 	umull	r2, r3, r2, r3
 8003b58:	0b9b      	lsrs	r3, r3, #14
 8003b5a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003b5e:	fb02 f303 	mul.w	r3, r2, r3
 8003b62:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	3b01      	subs	r3, #1
 8003b68:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d101      	bne.n	8003b74 <LPTIM_WaitForFlag+0x34>
    {
      result = HAL_TIMEOUT;
 8003b70:	2303      	movs	r3, #3
 8003b72:	73fb      	strb	r3, [r7, #15]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	4013      	ands	r3, r2
 8003b7e:	683a      	ldr	r2, [r7, #0]
 8003b80:	429a      	cmp	r2, r3
 8003b82:	d002      	beq.n	8003b8a <LPTIM_WaitForFlag+0x4a>
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d1ec      	bne.n	8003b64 <LPTIM_WaitForFlag+0x24>

  return result;
 8003b8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	3714      	adds	r7, #20
 8003b90:	46bd      	mov	sp, r7
 8003b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b96:	4770      	bx	lr
 8003b98:	20000000 	.word	0x20000000
 8003b9c:	d1b71759 	.word	0xd1b71759

08003ba0 <LPTIM_Disable>:
  *         Please check Errata Sheet ES0335 for more details under "MCU may remain
  *         stuck in LPTIM interrupt when entering Stop mode" section.
  * @retval None
  */
void LPTIM_Disable(LPTIM_HandleTypeDef *hlptim)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b08c      	sub	sp, #48	; 0x30
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  uint32_t tmpclksource = 0;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	62fb      	str	r3, [r7, #44]	; 0x2c
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003bac:	f3ef 8310 	mrs	r3, PRIMASK
 8003bb0:	60fb      	str	r3, [r7, #12]
  return(result);
 8003bb2:	68fb      	ldr	r3, [r7, #12]
#if defined(LPTIM_RCR_REP)
  uint32_t tmpRCR;
#endif

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8003bb4:	62bb      	str	r3, [r7, #40]	; 0x28
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	f383 8810 	msr	PRIMASK, r3
}
 8003bc0:	bf00      	nop
  __set_PRIMASK(1) ;

  /*********** Save LPTIM Config ***********/
  /* Save LPTIM source clock */
  switch ((uint32_t)hlptim->Instance)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a73      	ldr	r2, [pc, #460]	; (8003d94 <LPTIM_Disable+0x1f4>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d003      	beq.n	8003bd4 <LPTIM_Disable+0x34>
 8003bcc:	4a72      	ldr	r2, [pc, #456]	; (8003d98 <LPTIM_Disable+0x1f8>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d007      	beq.n	8003be2 <LPTIM_Disable+0x42>
    case LPTIM2_BASE:
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
      break;
#endif /* LPTIM2 */
    default:
      break;
 8003bd2:	e00d      	b.n	8003bf0 <LPTIM_Disable+0x50>
      tmpclksource = __HAL_RCC_GET_LPTIM1_SOURCE();
 8003bd4:	4b71      	ldr	r3, [pc, #452]	; (8003d9c <LPTIM_Disable+0x1fc>)
 8003bd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bda:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8003bde:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8003be0:	e006      	b.n	8003bf0 <LPTIM_Disable+0x50>
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
 8003be2:	4b6e      	ldr	r3, [pc, #440]	; (8003d9c <LPTIM_Disable+0x1fc>)
 8003be4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003be8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003bec:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8003bee:	bf00      	nop
  }

  /* Save LPTIM configuration registers */
  tmpIER = hlptim->Instance->IER;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	689b      	ldr	r3, [r3, #8]
 8003bf6:	627b      	str	r3, [r7, #36]	; 0x24
  tmpCFGR = hlptim->Instance->CFGR;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	68db      	ldr	r3, [r3, #12]
 8003bfe:	623b      	str	r3, [r7, #32]
  tmpCMP = hlptim->Instance->CMP;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	695b      	ldr	r3, [r3, #20]
 8003c06:	61fb      	str	r3, [r7, #28]
  tmpARR = hlptim->Instance->ARR;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	699b      	ldr	r3, [r3, #24]
 8003c0e:	61bb      	str	r3, [r7, #24]
  tmpOR = hlptim->Instance->OR;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	6a1b      	ldr	r3, [r3, #32]
 8003c16:	617b      	str	r3, [r7, #20]
#if defined(LPTIM_RCR_REP)
  tmpRCR = hlptim->Instance->RCR;
#endif

  /*********** Reset LPTIM ***********/
  switch ((uint32_t)hlptim->Instance)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a5d      	ldr	r2, [pc, #372]	; (8003d94 <LPTIM_Disable+0x1f4>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d003      	beq.n	8003c2a <LPTIM_Disable+0x8a>
 8003c22:	4a5d      	ldr	r2, [pc, #372]	; (8003d98 <LPTIM_Disable+0x1f8>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d00d      	beq.n	8003c44 <LPTIM_Disable+0xa4>
      __HAL_RCC_LPTIM2_FORCE_RESET();
      __HAL_RCC_LPTIM2_RELEASE_RESET();
      break;
#endif /* LPTIM2 */
    default:
      break;
 8003c28:	e019      	b.n	8003c5e <LPTIM_Disable+0xbe>
      __HAL_RCC_LPTIM1_FORCE_RESET();
 8003c2a:	4b5c      	ldr	r3, [pc, #368]	; (8003d9c <LPTIM_Disable+0x1fc>)
 8003c2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c2e:	4a5b      	ldr	r2, [pc, #364]	; (8003d9c <LPTIM_Disable+0x1fc>)
 8003c30:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003c34:	6393      	str	r3, [r2, #56]	; 0x38
      __HAL_RCC_LPTIM1_RELEASE_RESET();
 8003c36:	4b59      	ldr	r3, [pc, #356]	; (8003d9c <LPTIM_Disable+0x1fc>)
 8003c38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c3a:	4a58      	ldr	r2, [pc, #352]	; (8003d9c <LPTIM_Disable+0x1fc>)
 8003c3c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003c40:	6393      	str	r3, [r2, #56]	; 0x38
      break;
 8003c42:	e00c      	b.n	8003c5e <LPTIM_Disable+0xbe>
      __HAL_RCC_LPTIM2_FORCE_RESET();
 8003c44:	4b55      	ldr	r3, [pc, #340]	; (8003d9c <LPTIM_Disable+0x1fc>)
 8003c46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c48:	4a54      	ldr	r2, [pc, #336]	; (8003d9c <LPTIM_Disable+0x1fc>)
 8003c4a:	f043 0320 	orr.w	r3, r3, #32
 8003c4e:	63d3      	str	r3, [r2, #60]	; 0x3c
      __HAL_RCC_LPTIM2_RELEASE_RESET();
 8003c50:	4b52      	ldr	r3, [pc, #328]	; (8003d9c <LPTIM_Disable+0x1fc>)
 8003c52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c54:	4a51      	ldr	r2, [pc, #324]	; (8003d9c <LPTIM_Disable+0x1fc>)
 8003c56:	f023 0320 	bic.w	r3, r3, #32
 8003c5a:	63d3      	str	r3, [r2, #60]	; 0x3c
      break;
 8003c5c:	bf00      	nop

  /*********** Restore LPTIM Config ***********/
#if defined(LPTIM_RCR_REP)
  if ((tmpCMP != 0UL) || (tmpARR != 0UL) || (tmpRCR != 0UL))
#else
  if ((tmpCMP != 0UL) || (tmpARR != 0UL))
 8003c5e:	69fb      	ldr	r3, [r7, #28]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d102      	bne.n	8003c6a <LPTIM_Disable+0xca>
 8003c64:	69bb      	ldr	r3, [r7, #24]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d075      	beq.n	8003d56 <LPTIM_Disable+0x1b6>
#endif
  {
    /* Force LPTIM source kernel clock from APB */
    switch ((uint32_t)hlptim->Instance)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4a49      	ldr	r2, [pc, #292]	; (8003d94 <LPTIM_Disable+0x1f4>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d003      	beq.n	8003c7c <LPTIM_Disable+0xdc>
 8003c74:	4a48      	ldr	r2, [pc, #288]	; (8003d98 <LPTIM_Disable+0x1f8>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d009      	beq.n	8003c8e <LPTIM_Disable+0xee>
      case LPTIM2_BASE:
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_PCLK1);
        break;
#endif /* LPTIM2 */
      default:
        break;
 8003c7a:	e011      	b.n	8003ca0 <LPTIM_Disable+0x100>
        __HAL_RCC_LPTIM1_CONFIG(RCC_LPTIM1CLKSOURCE_PCLK1);
 8003c7c:	4b47      	ldr	r3, [pc, #284]	; (8003d9c <LPTIM_Disable+0x1fc>)
 8003c7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c82:	4a46      	ldr	r2, [pc, #280]	; (8003d9c <LPTIM_Disable+0x1fc>)
 8003c84:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8003c88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
        break;
 8003c8c:	e008      	b.n	8003ca0 <LPTIM_Disable+0x100>
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_PCLK1);
 8003c8e:	4b43      	ldr	r3, [pc, #268]	; (8003d9c <LPTIM_Disable+0x1fc>)
 8003c90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c94:	4a41      	ldr	r2, [pc, #260]	; (8003d9c <LPTIM_Disable+0x1fc>)
 8003c96:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8003c9a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
        break;
 8003c9e:	bf00      	nop
    }

    if (tmpCMP != 0UL)
 8003ca0:	69fb      	ldr	r3, [r7, #28]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d01a      	beq.n	8003cdc <LPTIM_Disable+0x13c>
    {
      /* Restore CMP register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	691a      	ldr	r2, [r3, #16]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f042 0201 	orr.w	r2, r2, #1
 8003cb4:	611a      	str	r2, [r3, #16]
      hlptim->Instance->CMP = tmpCMP;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	69fa      	ldr	r2, [r7, #28]
 8003cbc:	615a      	str	r2, [r3, #20]

      /* Wait for the completion of the write operation to the LPTIM_CMP register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 8003cbe:	2108      	movs	r1, #8
 8003cc0:	6878      	ldr	r0, [r7, #4]
 8003cc2:	f7ff ff3d 	bl	8003b40 <LPTIM_WaitForFlag>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	2b03      	cmp	r3, #3
 8003cca:	d103      	bne.n	8003cd4 <LPTIM_Disable+0x134>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2203      	movs	r2, #3
 8003cd0:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	2208      	movs	r2, #8
 8003cda:	605a      	str	r2, [r3, #4]
    }

    if (tmpARR != 0UL)
 8003cdc:	69bb      	ldr	r3, [r7, #24]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d01a      	beq.n	8003d18 <LPTIM_Disable+0x178>
    {
      /* Restore ARR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	691a      	ldr	r2, [r3, #16]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f042 0201 	orr.w	r2, r2, #1
 8003cf0:	611a      	str	r2, [r3, #16]
      hlptim->Instance->ARR = tmpARR;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	69ba      	ldr	r2, [r7, #24]
 8003cf8:	619a      	str	r2, [r3, #24]

      /* Wait for the completion of the write operation to the LPTIM_ARR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8003cfa:	2110      	movs	r1, #16
 8003cfc:	6878      	ldr	r0, [r7, #4]
 8003cfe:	f7ff ff1f 	bl	8003b40 <LPTIM_WaitForFlag>
 8003d02:	4603      	mov	r3, r0
 8003d04:	2b03      	cmp	r3, #3
 8003d06:	d103      	bne.n	8003d10 <LPTIM_Disable+0x170>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2203      	movs	r2, #3
 8003d0c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
      }

      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	2210      	movs	r2, #16
 8003d16:	605a      	str	r2, [r3, #4]
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
    }
#endif

    /* Restore LPTIM source kernel clock */
    switch ((uint32_t)hlptim->Instance)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a1d      	ldr	r2, [pc, #116]	; (8003d94 <LPTIM_Disable+0x1f4>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d003      	beq.n	8003d2a <LPTIM_Disable+0x18a>
 8003d22:	4a1d      	ldr	r2, [pc, #116]	; (8003d98 <LPTIM_Disable+0x1f8>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d00b      	beq.n	8003d40 <LPTIM_Disable+0x1a0>
      case LPTIM2_BASE:
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
        break;
#endif /* LPTIM2 */
      default:
        break;
 8003d28:	e016      	b.n	8003d58 <LPTIM_Disable+0x1b8>
        __HAL_RCC_LPTIM1_CONFIG(tmpclksource);
 8003d2a:	4b1c      	ldr	r3, [pc, #112]	; (8003d9c <LPTIM_Disable+0x1fc>)
 8003d2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d30:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003d34:	4919      	ldr	r1, [pc, #100]	; (8003d9c <LPTIM_Disable+0x1fc>)
 8003d36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
        break;
 8003d3e:	e00b      	b.n	8003d58 <LPTIM_Disable+0x1b8>
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
 8003d40:	4b16      	ldr	r3, [pc, #88]	; (8003d9c <LPTIM_Disable+0x1fc>)
 8003d42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d46:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003d4a:	4914      	ldr	r1, [pc, #80]	; (8003d9c <LPTIM_Disable+0x1fc>)
 8003d4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
        break;
 8003d54:	e000      	b.n	8003d58 <LPTIM_Disable+0x1b8>
    }
  }
 8003d56:	bf00      	nop

  /* Restore configuration registers (LPTIM should be disabled first) */
  hlptim->Instance->CR &= ~(LPTIM_CR_ENABLE);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	691a      	ldr	r2, [r3, #16]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f022 0201 	bic.w	r2, r2, #1
 8003d66:	611a      	str	r2, [r3, #16]
  hlptim->Instance->IER = tmpIER;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d6e:	609a      	str	r2, [r3, #8]
  hlptim->Instance->CFGR = tmpCFGR;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	6a3a      	ldr	r2, [r7, #32]
 8003d76:	60da      	str	r2, [r3, #12]
  hlptim->Instance->OR = tmpOR;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	697a      	ldr	r2, [r7, #20]
 8003d7e:	621a      	str	r2, [r3, #32]
 8003d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d82:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	f383 8810 	msr	PRIMASK, r3
}
 8003d8a:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8003d8c:	bf00      	nop
 8003d8e:	3730      	adds	r7, #48	; 0x30
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bd80      	pop	{r7, pc}
 8003d94:	40007c00 	.word	0x40007c00
 8003d98:	40009400 	.word	0x40009400
 8003d9c:	40021000 	.word	0x40021000

08003da0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003da0:	b480      	push	{r7}
 8003da2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003da4:	4b04      	ldr	r3, [pc, #16]	; (8003db8 <HAL_PWREx_GetVoltageRange+0x18>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	46bd      	mov	sp, r7
 8003db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db4:	4770      	bx	lr
 8003db6:	bf00      	nop
 8003db8:	40007000 	.word	0x40007000

08003dbc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b085      	sub	sp, #20
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003dca:	d130      	bne.n	8003e2e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003dcc:	4b23      	ldr	r3, [pc, #140]	; (8003e5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003dd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003dd8:	d038      	beq.n	8003e4c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003dda:	4b20      	ldr	r3, [pc, #128]	; (8003e5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003de2:	4a1e      	ldr	r2, [pc, #120]	; (8003e5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003de4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003de8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003dea:	4b1d      	ldr	r3, [pc, #116]	; (8003e60 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	2232      	movs	r2, #50	; 0x32
 8003df0:	fb02 f303 	mul.w	r3, r2, r3
 8003df4:	4a1b      	ldr	r2, [pc, #108]	; (8003e64 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003df6:	fba2 2303 	umull	r2, r3, r2, r3
 8003dfa:	0c9b      	lsrs	r3, r3, #18
 8003dfc:	3301      	adds	r3, #1
 8003dfe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003e00:	e002      	b.n	8003e08 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	3b01      	subs	r3, #1
 8003e06:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003e08:	4b14      	ldr	r3, [pc, #80]	; (8003e5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e0a:	695b      	ldr	r3, [r3, #20]
 8003e0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e14:	d102      	bne.n	8003e1c <HAL_PWREx_ControlVoltageScaling+0x60>
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d1f2      	bne.n	8003e02 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003e1c:	4b0f      	ldr	r3, [pc, #60]	; (8003e5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e1e:	695b      	ldr	r3, [r3, #20]
 8003e20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e28:	d110      	bne.n	8003e4c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003e2a:	2303      	movs	r3, #3
 8003e2c:	e00f      	b.n	8003e4e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003e2e:	4b0b      	ldr	r3, [pc, #44]	; (8003e5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003e36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e3a:	d007      	beq.n	8003e4c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003e3c:	4b07      	ldr	r3, [pc, #28]	; (8003e5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003e44:	4a05      	ldr	r2, [pc, #20]	; (8003e5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e46:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003e4a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003e4c:	2300      	movs	r3, #0
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	3714      	adds	r7, #20
 8003e52:	46bd      	mov	sp, r7
 8003e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e58:	4770      	bx	lr
 8003e5a:	bf00      	nop
 8003e5c:	40007000 	.word	0x40007000
 8003e60:	20000000 	.word	0x20000000
 8003e64:	431bde83 	.word	0x431bde83

08003e68 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b088      	sub	sp, #32
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d102      	bne.n	8003e7c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
 8003e78:	f000 bc02 	b.w	8004680 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e7c:	4b96      	ldr	r3, [pc, #600]	; (80040d8 <HAL_RCC_OscConfig+0x270>)
 8003e7e:	689b      	ldr	r3, [r3, #8]
 8003e80:	f003 030c 	and.w	r3, r3, #12
 8003e84:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e86:	4b94      	ldr	r3, [pc, #592]	; (80040d8 <HAL_RCC_OscConfig+0x270>)
 8003e88:	68db      	ldr	r3, [r3, #12]
 8003e8a:	f003 0303 	and.w	r3, r3, #3
 8003e8e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f003 0310 	and.w	r3, r3, #16
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	f000 80e4 	beq.w	8004066 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003e9e:	69bb      	ldr	r3, [r7, #24]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d007      	beq.n	8003eb4 <HAL_RCC_OscConfig+0x4c>
 8003ea4:	69bb      	ldr	r3, [r7, #24]
 8003ea6:	2b0c      	cmp	r3, #12
 8003ea8:	f040 808b 	bne.w	8003fc2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003eac:	697b      	ldr	r3, [r7, #20]
 8003eae:	2b01      	cmp	r3, #1
 8003eb0:	f040 8087 	bne.w	8003fc2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003eb4:	4b88      	ldr	r3, [pc, #544]	; (80040d8 <HAL_RCC_OscConfig+0x270>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f003 0302 	and.w	r3, r3, #2
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d005      	beq.n	8003ecc <HAL_RCC_OscConfig+0x64>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	699b      	ldr	r3, [r3, #24]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d101      	bne.n	8003ecc <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	e3d9      	b.n	8004680 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6a1a      	ldr	r2, [r3, #32]
 8003ed0:	4b81      	ldr	r3, [pc, #516]	; (80040d8 <HAL_RCC_OscConfig+0x270>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f003 0308 	and.w	r3, r3, #8
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d004      	beq.n	8003ee6 <HAL_RCC_OscConfig+0x7e>
 8003edc:	4b7e      	ldr	r3, [pc, #504]	; (80040d8 <HAL_RCC_OscConfig+0x270>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ee4:	e005      	b.n	8003ef2 <HAL_RCC_OscConfig+0x8a>
 8003ee6:	4b7c      	ldr	r3, [pc, #496]	; (80040d8 <HAL_RCC_OscConfig+0x270>)
 8003ee8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003eec:	091b      	lsrs	r3, r3, #4
 8003eee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d223      	bcs.n	8003f3e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6a1b      	ldr	r3, [r3, #32]
 8003efa:	4618      	mov	r0, r3
 8003efc:	f000 fd8c 	bl	8004a18 <RCC_SetFlashLatencyFromMSIRange>
 8003f00:	4603      	mov	r3, r0
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d001      	beq.n	8003f0a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003f06:	2301      	movs	r3, #1
 8003f08:	e3ba      	b.n	8004680 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003f0a:	4b73      	ldr	r3, [pc, #460]	; (80040d8 <HAL_RCC_OscConfig+0x270>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a72      	ldr	r2, [pc, #456]	; (80040d8 <HAL_RCC_OscConfig+0x270>)
 8003f10:	f043 0308 	orr.w	r3, r3, #8
 8003f14:	6013      	str	r3, [r2, #0]
 8003f16:	4b70      	ldr	r3, [pc, #448]	; (80040d8 <HAL_RCC_OscConfig+0x270>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6a1b      	ldr	r3, [r3, #32]
 8003f22:	496d      	ldr	r1, [pc, #436]	; (80040d8 <HAL_RCC_OscConfig+0x270>)
 8003f24:	4313      	orrs	r3, r2
 8003f26:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003f28:	4b6b      	ldr	r3, [pc, #428]	; (80040d8 <HAL_RCC_OscConfig+0x270>)
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	69db      	ldr	r3, [r3, #28]
 8003f34:	021b      	lsls	r3, r3, #8
 8003f36:	4968      	ldr	r1, [pc, #416]	; (80040d8 <HAL_RCC_OscConfig+0x270>)
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	604b      	str	r3, [r1, #4]
 8003f3c:	e025      	b.n	8003f8a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003f3e:	4b66      	ldr	r3, [pc, #408]	; (80040d8 <HAL_RCC_OscConfig+0x270>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a65      	ldr	r2, [pc, #404]	; (80040d8 <HAL_RCC_OscConfig+0x270>)
 8003f44:	f043 0308 	orr.w	r3, r3, #8
 8003f48:	6013      	str	r3, [r2, #0]
 8003f4a:	4b63      	ldr	r3, [pc, #396]	; (80040d8 <HAL_RCC_OscConfig+0x270>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6a1b      	ldr	r3, [r3, #32]
 8003f56:	4960      	ldr	r1, [pc, #384]	; (80040d8 <HAL_RCC_OscConfig+0x270>)
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003f5c:	4b5e      	ldr	r3, [pc, #376]	; (80040d8 <HAL_RCC_OscConfig+0x270>)
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	69db      	ldr	r3, [r3, #28]
 8003f68:	021b      	lsls	r3, r3, #8
 8003f6a:	495b      	ldr	r1, [pc, #364]	; (80040d8 <HAL_RCC_OscConfig+0x270>)
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003f70:	69bb      	ldr	r3, [r7, #24]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d109      	bne.n	8003f8a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6a1b      	ldr	r3, [r3, #32]
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	f000 fd4c 	bl	8004a18 <RCC_SetFlashLatencyFromMSIRange>
 8003f80:	4603      	mov	r3, r0
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d001      	beq.n	8003f8a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	e37a      	b.n	8004680 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003f8a:	f000 fc81 	bl	8004890 <HAL_RCC_GetSysClockFreq>
 8003f8e:	4602      	mov	r2, r0
 8003f90:	4b51      	ldr	r3, [pc, #324]	; (80040d8 <HAL_RCC_OscConfig+0x270>)
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	091b      	lsrs	r3, r3, #4
 8003f96:	f003 030f 	and.w	r3, r3, #15
 8003f9a:	4950      	ldr	r1, [pc, #320]	; (80040dc <HAL_RCC_OscConfig+0x274>)
 8003f9c:	5ccb      	ldrb	r3, [r1, r3]
 8003f9e:	f003 031f 	and.w	r3, r3, #31
 8003fa2:	fa22 f303 	lsr.w	r3, r2, r3
 8003fa6:	4a4e      	ldr	r2, [pc, #312]	; (80040e0 <HAL_RCC_OscConfig+0x278>)
 8003fa8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003faa:	4b4e      	ldr	r3, [pc, #312]	; (80040e4 <HAL_RCC_OscConfig+0x27c>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4618      	mov	r0, r3
 8003fb0:	f7fe faa0 	bl	80024f4 <HAL_InitTick>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003fb8:	7bfb      	ldrb	r3, [r7, #15]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d052      	beq.n	8004064 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003fbe:	7bfb      	ldrb	r3, [r7, #15]
 8003fc0:	e35e      	b.n	8004680 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	699b      	ldr	r3, [r3, #24]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d032      	beq.n	8004030 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003fca:	4b43      	ldr	r3, [pc, #268]	; (80040d8 <HAL_RCC_OscConfig+0x270>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a42      	ldr	r2, [pc, #264]	; (80040d8 <HAL_RCC_OscConfig+0x270>)
 8003fd0:	f043 0301 	orr.w	r3, r3, #1
 8003fd4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003fd6:	f7fe fadd 	bl	8002594 <HAL_GetTick>
 8003fda:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003fdc:	e008      	b.n	8003ff0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003fde:	f7fe fad9 	bl	8002594 <HAL_GetTick>
 8003fe2:	4602      	mov	r2, r0
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	1ad3      	subs	r3, r2, r3
 8003fe8:	2b02      	cmp	r3, #2
 8003fea:	d901      	bls.n	8003ff0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003fec:	2303      	movs	r3, #3
 8003fee:	e347      	b.n	8004680 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003ff0:	4b39      	ldr	r3, [pc, #228]	; (80040d8 <HAL_RCC_OscConfig+0x270>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f003 0302 	and.w	r3, r3, #2
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d0f0      	beq.n	8003fde <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003ffc:	4b36      	ldr	r3, [pc, #216]	; (80040d8 <HAL_RCC_OscConfig+0x270>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a35      	ldr	r2, [pc, #212]	; (80040d8 <HAL_RCC_OscConfig+0x270>)
 8004002:	f043 0308 	orr.w	r3, r3, #8
 8004006:	6013      	str	r3, [r2, #0]
 8004008:	4b33      	ldr	r3, [pc, #204]	; (80040d8 <HAL_RCC_OscConfig+0x270>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6a1b      	ldr	r3, [r3, #32]
 8004014:	4930      	ldr	r1, [pc, #192]	; (80040d8 <HAL_RCC_OscConfig+0x270>)
 8004016:	4313      	orrs	r3, r2
 8004018:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800401a:	4b2f      	ldr	r3, [pc, #188]	; (80040d8 <HAL_RCC_OscConfig+0x270>)
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	69db      	ldr	r3, [r3, #28]
 8004026:	021b      	lsls	r3, r3, #8
 8004028:	492b      	ldr	r1, [pc, #172]	; (80040d8 <HAL_RCC_OscConfig+0x270>)
 800402a:	4313      	orrs	r3, r2
 800402c:	604b      	str	r3, [r1, #4]
 800402e:	e01a      	b.n	8004066 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004030:	4b29      	ldr	r3, [pc, #164]	; (80040d8 <HAL_RCC_OscConfig+0x270>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a28      	ldr	r2, [pc, #160]	; (80040d8 <HAL_RCC_OscConfig+0x270>)
 8004036:	f023 0301 	bic.w	r3, r3, #1
 800403a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800403c:	f7fe faaa 	bl	8002594 <HAL_GetTick>
 8004040:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004042:	e008      	b.n	8004056 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004044:	f7fe faa6 	bl	8002594 <HAL_GetTick>
 8004048:	4602      	mov	r2, r0
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	1ad3      	subs	r3, r2, r3
 800404e:	2b02      	cmp	r3, #2
 8004050:	d901      	bls.n	8004056 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8004052:	2303      	movs	r3, #3
 8004054:	e314      	b.n	8004680 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004056:	4b20      	ldr	r3, [pc, #128]	; (80040d8 <HAL_RCC_OscConfig+0x270>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f003 0302 	and.w	r3, r3, #2
 800405e:	2b00      	cmp	r3, #0
 8004060:	d1f0      	bne.n	8004044 <HAL_RCC_OscConfig+0x1dc>
 8004062:	e000      	b.n	8004066 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004064:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f003 0301 	and.w	r3, r3, #1
 800406e:	2b00      	cmp	r3, #0
 8004070:	d073      	beq.n	800415a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004072:	69bb      	ldr	r3, [r7, #24]
 8004074:	2b08      	cmp	r3, #8
 8004076:	d005      	beq.n	8004084 <HAL_RCC_OscConfig+0x21c>
 8004078:	69bb      	ldr	r3, [r7, #24]
 800407a:	2b0c      	cmp	r3, #12
 800407c:	d10e      	bne.n	800409c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	2b03      	cmp	r3, #3
 8004082:	d10b      	bne.n	800409c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004084:	4b14      	ldr	r3, [pc, #80]	; (80040d8 <HAL_RCC_OscConfig+0x270>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800408c:	2b00      	cmp	r3, #0
 800408e:	d063      	beq.n	8004158 <HAL_RCC_OscConfig+0x2f0>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d15f      	bne.n	8004158 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004098:	2301      	movs	r3, #1
 800409a:	e2f1      	b.n	8004680 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040a4:	d106      	bne.n	80040b4 <HAL_RCC_OscConfig+0x24c>
 80040a6:	4b0c      	ldr	r3, [pc, #48]	; (80040d8 <HAL_RCC_OscConfig+0x270>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a0b      	ldr	r2, [pc, #44]	; (80040d8 <HAL_RCC_OscConfig+0x270>)
 80040ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040b0:	6013      	str	r3, [r2, #0]
 80040b2:	e025      	b.n	8004100 <HAL_RCC_OscConfig+0x298>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80040bc:	d114      	bne.n	80040e8 <HAL_RCC_OscConfig+0x280>
 80040be:	4b06      	ldr	r3, [pc, #24]	; (80040d8 <HAL_RCC_OscConfig+0x270>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a05      	ldr	r2, [pc, #20]	; (80040d8 <HAL_RCC_OscConfig+0x270>)
 80040c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80040c8:	6013      	str	r3, [r2, #0]
 80040ca:	4b03      	ldr	r3, [pc, #12]	; (80040d8 <HAL_RCC_OscConfig+0x270>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a02      	ldr	r2, [pc, #8]	; (80040d8 <HAL_RCC_OscConfig+0x270>)
 80040d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040d4:	6013      	str	r3, [r2, #0]
 80040d6:	e013      	b.n	8004100 <HAL_RCC_OscConfig+0x298>
 80040d8:	40021000 	.word	0x40021000
 80040dc:	08009800 	.word	0x08009800
 80040e0:	20000000 	.word	0x20000000
 80040e4:	20000004 	.word	0x20000004
 80040e8:	4ba0      	ldr	r3, [pc, #640]	; (800436c <HAL_RCC_OscConfig+0x504>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a9f      	ldr	r2, [pc, #636]	; (800436c <HAL_RCC_OscConfig+0x504>)
 80040ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040f2:	6013      	str	r3, [r2, #0]
 80040f4:	4b9d      	ldr	r3, [pc, #628]	; (800436c <HAL_RCC_OscConfig+0x504>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a9c      	ldr	r2, [pc, #624]	; (800436c <HAL_RCC_OscConfig+0x504>)
 80040fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d013      	beq.n	8004130 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004108:	f7fe fa44 	bl	8002594 <HAL_GetTick>
 800410c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800410e:	e008      	b.n	8004122 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004110:	f7fe fa40 	bl	8002594 <HAL_GetTick>
 8004114:	4602      	mov	r2, r0
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	1ad3      	subs	r3, r2, r3
 800411a:	2b64      	cmp	r3, #100	; 0x64
 800411c:	d901      	bls.n	8004122 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800411e:	2303      	movs	r3, #3
 8004120:	e2ae      	b.n	8004680 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004122:	4b92      	ldr	r3, [pc, #584]	; (800436c <HAL_RCC_OscConfig+0x504>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800412a:	2b00      	cmp	r3, #0
 800412c:	d0f0      	beq.n	8004110 <HAL_RCC_OscConfig+0x2a8>
 800412e:	e014      	b.n	800415a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004130:	f7fe fa30 	bl	8002594 <HAL_GetTick>
 8004134:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004136:	e008      	b.n	800414a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004138:	f7fe fa2c 	bl	8002594 <HAL_GetTick>
 800413c:	4602      	mov	r2, r0
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	1ad3      	subs	r3, r2, r3
 8004142:	2b64      	cmp	r3, #100	; 0x64
 8004144:	d901      	bls.n	800414a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004146:	2303      	movs	r3, #3
 8004148:	e29a      	b.n	8004680 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800414a:	4b88      	ldr	r3, [pc, #544]	; (800436c <HAL_RCC_OscConfig+0x504>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004152:	2b00      	cmp	r3, #0
 8004154:	d1f0      	bne.n	8004138 <HAL_RCC_OscConfig+0x2d0>
 8004156:	e000      	b.n	800415a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004158:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f003 0302 	and.w	r3, r3, #2
 8004162:	2b00      	cmp	r3, #0
 8004164:	d060      	beq.n	8004228 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004166:	69bb      	ldr	r3, [r7, #24]
 8004168:	2b04      	cmp	r3, #4
 800416a:	d005      	beq.n	8004178 <HAL_RCC_OscConfig+0x310>
 800416c:	69bb      	ldr	r3, [r7, #24]
 800416e:	2b0c      	cmp	r3, #12
 8004170:	d119      	bne.n	80041a6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	2b02      	cmp	r3, #2
 8004176:	d116      	bne.n	80041a6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004178:	4b7c      	ldr	r3, [pc, #496]	; (800436c <HAL_RCC_OscConfig+0x504>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004180:	2b00      	cmp	r3, #0
 8004182:	d005      	beq.n	8004190 <HAL_RCC_OscConfig+0x328>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	68db      	ldr	r3, [r3, #12]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d101      	bne.n	8004190 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800418c:	2301      	movs	r3, #1
 800418e:	e277      	b.n	8004680 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004190:	4b76      	ldr	r3, [pc, #472]	; (800436c <HAL_RCC_OscConfig+0x504>)
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	691b      	ldr	r3, [r3, #16]
 800419c:	061b      	lsls	r3, r3, #24
 800419e:	4973      	ldr	r1, [pc, #460]	; (800436c <HAL_RCC_OscConfig+0x504>)
 80041a0:	4313      	orrs	r3, r2
 80041a2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80041a4:	e040      	b.n	8004228 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	68db      	ldr	r3, [r3, #12]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d023      	beq.n	80041f6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80041ae:	4b6f      	ldr	r3, [pc, #444]	; (800436c <HAL_RCC_OscConfig+0x504>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a6e      	ldr	r2, [pc, #440]	; (800436c <HAL_RCC_OscConfig+0x504>)
 80041b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041ba:	f7fe f9eb 	bl	8002594 <HAL_GetTick>
 80041be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80041c0:	e008      	b.n	80041d4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041c2:	f7fe f9e7 	bl	8002594 <HAL_GetTick>
 80041c6:	4602      	mov	r2, r0
 80041c8:	693b      	ldr	r3, [r7, #16]
 80041ca:	1ad3      	subs	r3, r2, r3
 80041cc:	2b02      	cmp	r3, #2
 80041ce:	d901      	bls.n	80041d4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80041d0:	2303      	movs	r3, #3
 80041d2:	e255      	b.n	8004680 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80041d4:	4b65      	ldr	r3, [pc, #404]	; (800436c <HAL_RCC_OscConfig+0x504>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d0f0      	beq.n	80041c2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041e0:	4b62      	ldr	r3, [pc, #392]	; (800436c <HAL_RCC_OscConfig+0x504>)
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	691b      	ldr	r3, [r3, #16]
 80041ec:	061b      	lsls	r3, r3, #24
 80041ee:	495f      	ldr	r1, [pc, #380]	; (800436c <HAL_RCC_OscConfig+0x504>)
 80041f0:	4313      	orrs	r3, r2
 80041f2:	604b      	str	r3, [r1, #4]
 80041f4:	e018      	b.n	8004228 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80041f6:	4b5d      	ldr	r3, [pc, #372]	; (800436c <HAL_RCC_OscConfig+0x504>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a5c      	ldr	r2, [pc, #368]	; (800436c <HAL_RCC_OscConfig+0x504>)
 80041fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004200:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004202:	f7fe f9c7 	bl	8002594 <HAL_GetTick>
 8004206:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004208:	e008      	b.n	800421c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800420a:	f7fe f9c3 	bl	8002594 <HAL_GetTick>
 800420e:	4602      	mov	r2, r0
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	1ad3      	subs	r3, r2, r3
 8004214:	2b02      	cmp	r3, #2
 8004216:	d901      	bls.n	800421c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004218:	2303      	movs	r3, #3
 800421a:	e231      	b.n	8004680 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800421c:	4b53      	ldr	r3, [pc, #332]	; (800436c <HAL_RCC_OscConfig+0x504>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004224:	2b00      	cmp	r3, #0
 8004226:	d1f0      	bne.n	800420a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f003 0308 	and.w	r3, r3, #8
 8004230:	2b00      	cmp	r3, #0
 8004232:	d03c      	beq.n	80042ae <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	695b      	ldr	r3, [r3, #20]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d01c      	beq.n	8004276 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800423c:	4b4b      	ldr	r3, [pc, #300]	; (800436c <HAL_RCC_OscConfig+0x504>)
 800423e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004242:	4a4a      	ldr	r2, [pc, #296]	; (800436c <HAL_RCC_OscConfig+0x504>)
 8004244:	f043 0301 	orr.w	r3, r3, #1
 8004248:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800424c:	f7fe f9a2 	bl	8002594 <HAL_GetTick>
 8004250:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004252:	e008      	b.n	8004266 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004254:	f7fe f99e 	bl	8002594 <HAL_GetTick>
 8004258:	4602      	mov	r2, r0
 800425a:	693b      	ldr	r3, [r7, #16]
 800425c:	1ad3      	subs	r3, r2, r3
 800425e:	2b02      	cmp	r3, #2
 8004260:	d901      	bls.n	8004266 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004262:	2303      	movs	r3, #3
 8004264:	e20c      	b.n	8004680 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004266:	4b41      	ldr	r3, [pc, #260]	; (800436c <HAL_RCC_OscConfig+0x504>)
 8004268:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800426c:	f003 0302 	and.w	r3, r3, #2
 8004270:	2b00      	cmp	r3, #0
 8004272:	d0ef      	beq.n	8004254 <HAL_RCC_OscConfig+0x3ec>
 8004274:	e01b      	b.n	80042ae <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004276:	4b3d      	ldr	r3, [pc, #244]	; (800436c <HAL_RCC_OscConfig+0x504>)
 8004278:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800427c:	4a3b      	ldr	r2, [pc, #236]	; (800436c <HAL_RCC_OscConfig+0x504>)
 800427e:	f023 0301 	bic.w	r3, r3, #1
 8004282:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004286:	f7fe f985 	bl	8002594 <HAL_GetTick>
 800428a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800428c:	e008      	b.n	80042a0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800428e:	f7fe f981 	bl	8002594 <HAL_GetTick>
 8004292:	4602      	mov	r2, r0
 8004294:	693b      	ldr	r3, [r7, #16]
 8004296:	1ad3      	subs	r3, r2, r3
 8004298:	2b02      	cmp	r3, #2
 800429a:	d901      	bls.n	80042a0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800429c:	2303      	movs	r3, #3
 800429e:	e1ef      	b.n	8004680 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80042a0:	4b32      	ldr	r3, [pc, #200]	; (800436c <HAL_RCC_OscConfig+0x504>)
 80042a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042a6:	f003 0302 	and.w	r3, r3, #2
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d1ef      	bne.n	800428e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f003 0304 	and.w	r3, r3, #4
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	f000 80a6 	beq.w	8004408 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042bc:	2300      	movs	r3, #0
 80042be:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80042c0:	4b2a      	ldr	r3, [pc, #168]	; (800436c <HAL_RCC_OscConfig+0x504>)
 80042c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d10d      	bne.n	80042e8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042cc:	4b27      	ldr	r3, [pc, #156]	; (800436c <HAL_RCC_OscConfig+0x504>)
 80042ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042d0:	4a26      	ldr	r2, [pc, #152]	; (800436c <HAL_RCC_OscConfig+0x504>)
 80042d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042d6:	6593      	str	r3, [r2, #88]	; 0x58
 80042d8:	4b24      	ldr	r3, [pc, #144]	; (800436c <HAL_RCC_OscConfig+0x504>)
 80042da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042e0:	60bb      	str	r3, [r7, #8]
 80042e2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042e4:	2301      	movs	r3, #1
 80042e6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80042e8:	4b21      	ldr	r3, [pc, #132]	; (8004370 <HAL_RCC_OscConfig+0x508>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d118      	bne.n	8004326 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80042f4:	4b1e      	ldr	r3, [pc, #120]	; (8004370 <HAL_RCC_OscConfig+0x508>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a1d      	ldr	r2, [pc, #116]	; (8004370 <HAL_RCC_OscConfig+0x508>)
 80042fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042fe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004300:	f7fe f948 	bl	8002594 <HAL_GetTick>
 8004304:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004306:	e008      	b.n	800431a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004308:	f7fe f944 	bl	8002594 <HAL_GetTick>
 800430c:	4602      	mov	r2, r0
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	1ad3      	subs	r3, r2, r3
 8004312:	2b02      	cmp	r3, #2
 8004314:	d901      	bls.n	800431a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004316:	2303      	movs	r3, #3
 8004318:	e1b2      	b.n	8004680 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800431a:	4b15      	ldr	r3, [pc, #84]	; (8004370 <HAL_RCC_OscConfig+0x508>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004322:	2b00      	cmp	r3, #0
 8004324:	d0f0      	beq.n	8004308 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	689b      	ldr	r3, [r3, #8]
 800432a:	2b01      	cmp	r3, #1
 800432c:	d108      	bne.n	8004340 <HAL_RCC_OscConfig+0x4d8>
 800432e:	4b0f      	ldr	r3, [pc, #60]	; (800436c <HAL_RCC_OscConfig+0x504>)
 8004330:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004334:	4a0d      	ldr	r2, [pc, #52]	; (800436c <HAL_RCC_OscConfig+0x504>)
 8004336:	f043 0301 	orr.w	r3, r3, #1
 800433a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800433e:	e029      	b.n	8004394 <HAL_RCC_OscConfig+0x52c>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	2b05      	cmp	r3, #5
 8004346:	d115      	bne.n	8004374 <HAL_RCC_OscConfig+0x50c>
 8004348:	4b08      	ldr	r3, [pc, #32]	; (800436c <HAL_RCC_OscConfig+0x504>)
 800434a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800434e:	4a07      	ldr	r2, [pc, #28]	; (800436c <HAL_RCC_OscConfig+0x504>)
 8004350:	f043 0304 	orr.w	r3, r3, #4
 8004354:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004358:	4b04      	ldr	r3, [pc, #16]	; (800436c <HAL_RCC_OscConfig+0x504>)
 800435a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800435e:	4a03      	ldr	r2, [pc, #12]	; (800436c <HAL_RCC_OscConfig+0x504>)
 8004360:	f043 0301 	orr.w	r3, r3, #1
 8004364:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004368:	e014      	b.n	8004394 <HAL_RCC_OscConfig+0x52c>
 800436a:	bf00      	nop
 800436c:	40021000 	.word	0x40021000
 8004370:	40007000 	.word	0x40007000
 8004374:	4b9a      	ldr	r3, [pc, #616]	; (80045e0 <HAL_RCC_OscConfig+0x778>)
 8004376:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800437a:	4a99      	ldr	r2, [pc, #612]	; (80045e0 <HAL_RCC_OscConfig+0x778>)
 800437c:	f023 0301 	bic.w	r3, r3, #1
 8004380:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004384:	4b96      	ldr	r3, [pc, #600]	; (80045e0 <HAL_RCC_OscConfig+0x778>)
 8004386:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800438a:	4a95      	ldr	r2, [pc, #596]	; (80045e0 <HAL_RCC_OscConfig+0x778>)
 800438c:	f023 0304 	bic.w	r3, r3, #4
 8004390:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d016      	beq.n	80043ca <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800439c:	f7fe f8fa 	bl	8002594 <HAL_GetTick>
 80043a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043a2:	e00a      	b.n	80043ba <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043a4:	f7fe f8f6 	bl	8002594 <HAL_GetTick>
 80043a8:	4602      	mov	r2, r0
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	1ad3      	subs	r3, r2, r3
 80043ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d901      	bls.n	80043ba <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80043b6:	2303      	movs	r3, #3
 80043b8:	e162      	b.n	8004680 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043ba:	4b89      	ldr	r3, [pc, #548]	; (80045e0 <HAL_RCC_OscConfig+0x778>)
 80043bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043c0:	f003 0302 	and.w	r3, r3, #2
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d0ed      	beq.n	80043a4 <HAL_RCC_OscConfig+0x53c>
 80043c8:	e015      	b.n	80043f6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043ca:	f7fe f8e3 	bl	8002594 <HAL_GetTick>
 80043ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80043d0:	e00a      	b.n	80043e8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043d2:	f7fe f8df 	bl	8002594 <HAL_GetTick>
 80043d6:	4602      	mov	r2, r0
 80043d8:	693b      	ldr	r3, [r7, #16]
 80043da:	1ad3      	subs	r3, r2, r3
 80043dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d901      	bls.n	80043e8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80043e4:	2303      	movs	r3, #3
 80043e6:	e14b      	b.n	8004680 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80043e8:	4b7d      	ldr	r3, [pc, #500]	; (80045e0 <HAL_RCC_OscConfig+0x778>)
 80043ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043ee:	f003 0302 	and.w	r3, r3, #2
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d1ed      	bne.n	80043d2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80043f6:	7ffb      	ldrb	r3, [r7, #31]
 80043f8:	2b01      	cmp	r3, #1
 80043fa:	d105      	bne.n	8004408 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043fc:	4b78      	ldr	r3, [pc, #480]	; (80045e0 <HAL_RCC_OscConfig+0x778>)
 80043fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004400:	4a77      	ldr	r2, [pc, #476]	; (80045e0 <HAL_RCC_OscConfig+0x778>)
 8004402:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004406:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f003 0320 	and.w	r3, r3, #32
 8004410:	2b00      	cmp	r3, #0
 8004412:	d03c      	beq.n	800448e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004418:	2b00      	cmp	r3, #0
 800441a:	d01c      	beq.n	8004456 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800441c:	4b70      	ldr	r3, [pc, #448]	; (80045e0 <HAL_RCC_OscConfig+0x778>)
 800441e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004422:	4a6f      	ldr	r2, [pc, #444]	; (80045e0 <HAL_RCC_OscConfig+0x778>)
 8004424:	f043 0301 	orr.w	r3, r3, #1
 8004428:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800442c:	f7fe f8b2 	bl	8002594 <HAL_GetTick>
 8004430:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004432:	e008      	b.n	8004446 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004434:	f7fe f8ae 	bl	8002594 <HAL_GetTick>
 8004438:	4602      	mov	r2, r0
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	1ad3      	subs	r3, r2, r3
 800443e:	2b02      	cmp	r3, #2
 8004440:	d901      	bls.n	8004446 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004442:	2303      	movs	r3, #3
 8004444:	e11c      	b.n	8004680 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004446:	4b66      	ldr	r3, [pc, #408]	; (80045e0 <HAL_RCC_OscConfig+0x778>)
 8004448:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800444c:	f003 0302 	and.w	r3, r3, #2
 8004450:	2b00      	cmp	r3, #0
 8004452:	d0ef      	beq.n	8004434 <HAL_RCC_OscConfig+0x5cc>
 8004454:	e01b      	b.n	800448e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004456:	4b62      	ldr	r3, [pc, #392]	; (80045e0 <HAL_RCC_OscConfig+0x778>)
 8004458:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800445c:	4a60      	ldr	r2, [pc, #384]	; (80045e0 <HAL_RCC_OscConfig+0x778>)
 800445e:	f023 0301 	bic.w	r3, r3, #1
 8004462:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004466:	f7fe f895 	bl	8002594 <HAL_GetTick>
 800446a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800446c:	e008      	b.n	8004480 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800446e:	f7fe f891 	bl	8002594 <HAL_GetTick>
 8004472:	4602      	mov	r2, r0
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	1ad3      	subs	r3, r2, r3
 8004478:	2b02      	cmp	r3, #2
 800447a:	d901      	bls.n	8004480 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800447c:	2303      	movs	r3, #3
 800447e:	e0ff      	b.n	8004680 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004480:	4b57      	ldr	r3, [pc, #348]	; (80045e0 <HAL_RCC_OscConfig+0x778>)
 8004482:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004486:	f003 0302 	and.w	r3, r3, #2
 800448a:	2b00      	cmp	r3, #0
 800448c:	d1ef      	bne.n	800446e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004492:	2b00      	cmp	r3, #0
 8004494:	f000 80f3 	beq.w	800467e <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800449c:	2b02      	cmp	r3, #2
 800449e:	f040 80c9 	bne.w	8004634 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80044a2:	4b4f      	ldr	r3, [pc, #316]	; (80045e0 <HAL_RCC_OscConfig+0x778>)
 80044a4:	68db      	ldr	r3, [r3, #12]
 80044a6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80044a8:	697b      	ldr	r3, [r7, #20]
 80044aa:	f003 0203 	and.w	r2, r3, #3
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044b2:	429a      	cmp	r2, r3
 80044b4:	d12c      	bne.n	8004510 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80044b6:	697b      	ldr	r3, [r7, #20]
 80044b8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044c0:	3b01      	subs	r3, #1
 80044c2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80044c4:	429a      	cmp	r2, r3
 80044c6:	d123      	bne.n	8004510 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80044c8:	697b      	ldr	r3, [r7, #20]
 80044ca:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044d2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80044d4:	429a      	cmp	r2, r3
 80044d6:	d11b      	bne.n	8004510 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80044d8:	697b      	ldr	r3, [r7, #20]
 80044da:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044e2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80044e4:	429a      	cmp	r2, r3
 80044e6:	d113      	bne.n	8004510 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044f2:	085b      	lsrs	r3, r3, #1
 80044f4:	3b01      	subs	r3, #1
 80044f6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80044f8:	429a      	cmp	r2, r3
 80044fa:	d109      	bne.n	8004510 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80044fc:	697b      	ldr	r3, [r7, #20]
 80044fe:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004506:	085b      	lsrs	r3, r3, #1
 8004508:	3b01      	subs	r3, #1
 800450a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800450c:	429a      	cmp	r2, r3
 800450e:	d06b      	beq.n	80045e8 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004510:	69bb      	ldr	r3, [r7, #24]
 8004512:	2b0c      	cmp	r3, #12
 8004514:	d062      	beq.n	80045dc <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004516:	4b32      	ldr	r3, [pc, #200]	; (80045e0 <HAL_RCC_OscConfig+0x778>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800451e:	2b00      	cmp	r3, #0
 8004520:	d001      	beq.n	8004526 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8004522:	2301      	movs	r3, #1
 8004524:	e0ac      	b.n	8004680 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004526:	4b2e      	ldr	r3, [pc, #184]	; (80045e0 <HAL_RCC_OscConfig+0x778>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a2d      	ldr	r2, [pc, #180]	; (80045e0 <HAL_RCC_OscConfig+0x778>)
 800452c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004530:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004532:	f7fe f82f 	bl	8002594 <HAL_GetTick>
 8004536:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004538:	e008      	b.n	800454c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800453a:	f7fe f82b 	bl	8002594 <HAL_GetTick>
 800453e:	4602      	mov	r2, r0
 8004540:	693b      	ldr	r3, [r7, #16]
 8004542:	1ad3      	subs	r3, r2, r3
 8004544:	2b02      	cmp	r3, #2
 8004546:	d901      	bls.n	800454c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8004548:	2303      	movs	r3, #3
 800454a:	e099      	b.n	8004680 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800454c:	4b24      	ldr	r3, [pc, #144]	; (80045e0 <HAL_RCC_OscConfig+0x778>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004554:	2b00      	cmp	r3, #0
 8004556:	d1f0      	bne.n	800453a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004558:	4b21      	ldr	r3, [pc, #132]	; (80045e0 <HAL_RCC_OscConfig+0x778>)
 800455a:	68da      	ldr	r2, [r3, #12]
 800455c:	4b21      	ldr	r3, [pc, #132]	; (80045e4 <HAL_RCC_OscConfig+0x77c>)
 800455e:	4013      	ands	r3, r2
 8004560:	687a      	ldr	r2, [r7, #4]
 8004562:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004564:	687a      	ldr	r2, [r7, #4]
 8004566:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004568:	3a01      	subs	r2, #1
 800456a:	0112      	lsls	r2, r2, #4
 800456c:	4311      	orrs	r1, r2
 800456e:	687a      	ldr	r2, [r7, #4]
 8004570:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004572:	0212      	lsls	r2, r2, #8
 8004574:	4311      	orrs	r1, r2
 8004576:	687a      	ldr	r2, [r7, #4]
 8004578:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800457a:	0852      	lsrs	r2, r2, #1
 800457c:	3a01      	subs	r2, #1
 800457e:	0552      	lsls	r2, r2, #21
 8004580:	4311      	orrs	r1, r2
 8004582:	687a      	ldr	r2, [r7, #4]
 8004584:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004586:	0852      	lsrs	r2, r2, #1
 8004588:	3a01      	subs	r2, #1
 800458a:	0652      	lsls	r2, r2, #25
 800458c:	4311      	orrs	r1, r2
 800458e:	687a      	ldr	r2, [r7, #4]
 8004590:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004592:	06d2      	lsls	r2, r2, #27
 8004594:	430a      	orrs	r2, r1
 8004596:	4912      	ldr	r1, [pc, #72]	; (80045e0 <HAL_RCC_OscConfig+0x778>)
 8004598:	4313      	orrs	r3, r2
 800459a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800459c:	4b10      	ldr	r3, [pc, #64]	; (80045e0 <HAL_RCC_OscConfig+0x778>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a0f      	ldr	r2, [pc, #60]	; (80045e0 <HAL_RCC_OscConfig+0x778>)
 80045a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80045a6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80045a8:	4b0d      	ldr	r3, [pc, #52]	; (80045e0 <HAL_RCC_OscConfig+0x778>)
 80045aa:	68db      	ldr	r3, [r3, #12]
 80045ac:	4a0c      	ldr	r2, [pc, #48]	; (80045e0 <HAL_RCC_OscConfig+0x778>)
 80045ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80045b2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80045b4:	f7fd ffee 	bl	8002594 <HAL_GetTick>
 80045b8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045ba:	e008      	b.n	80045ce <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045bc:	f7fd ffea 	bl	8002594 <HAL_GetTick>
 80045c0:	4602      	mov	r2, r0
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	1ad3      	subs	r3, r2, r3
 80045c6:	2b02      	cmp	r3, #2
 80045c8:	d901      	bls.n	80045ce <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80045ca:	2303      	movs	r3, #3
 80045cc:	e058      	b.n	8004680 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045ce:	4b04      	ldr	r3, [pc, #16]	; (80045e0 <HAL_RCC_OscConfig+0x778>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d0f0      	beq.n	80045bc <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80045da:	e050      	b.n	800467e <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80045dc:	2301      	movs	r3, #1
 80045de:	e04f      	b.n	8004680 <HAL_RCC_OscConfig+0x818>
 80045e0:	40021000 	.word	0x40021000
 80045e4:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045e8:	4b27      	ldr	r3, [pc, #156]	; (8004688 <HAL_RCC_OscConfig+0x820>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d144      	bne.n	800467e <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80045f4:	4b24      	ldr	r3, [pc, #144]	; (8004688 <HAL_RCC_OscConfig+0x820>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a23      	ldr	r2, [pc, #140]	; (8004688 <HAL_RCC_OscConfig+0x820>)
 80045fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80045fe:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004600:	4b21      	ldr	r3, [pc, #132]	; (8004688 <HAL_RCC_OscConfig+0x820>)
 8004602:	68db      	ldr	r3, [r3, #12]
 8004604:	4a20      	ldr	r2, [pc, #128]	; (8004688 <HAL_RCC_OscConfig+0x820>)
 8004606:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800460a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800460c:	f7fd ffc2 	bl	8002594 <HAL_GetTick>
 8004610:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004612:	e008      	b.n	8004626 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004614:	f7fd ffbe 	bl	8002594 <HAL_GetTick>
 8004618:	4602      	mov	r2, r0
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	1ad3      	subs	r3, r2, r3
 800461e:	2b02      	cmp	r3, #2
 8004620:	d901      	bls.n	8004626 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8004622:	2303      	movs	r3, #3
 8004624:	e02c      	b.n	8004680 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004626:	4b18      	ldr	r3, [pc, #96]	; (8004688 <HAL_RCC_OscConfig+0x820>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800462e:	2b00      	cmp	r3, #0
 8004630:	d0f0      	beq.n	8004614 <HAL_RCC_OscConfig+0x7ac>
 8004632:	e024      	b.n	800467e <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004634:	69bb      	ldr	r3, [r7, #24]
 8004636:	2b0c      	cmp	r3, #12
 8004638:	d01f      	beq.n	800467a <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800463a:	4b13      	ldr	r3, [pc, #76]	; (8004688 <HAL_RCC_OscConfig+0x820>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a12      	ldr	r2, [pc, #72]	; (8004688 <HAL_RCC_OscConfig+0x820>)
 8004640:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004644:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004646:	f7fd ffa5 	bl	8002594 <HAL_GetTick>
 800464a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800464c:	e008      	b.n	8004660 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800464e:	f7fd ffa1 	bl	8002594 <HAL_GetTick>
 8004652:	4602      	mov	r2, r0
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	1ad3      	subs	r3, r2, r3
 8004658:	2b02      	cmp	r3, #2
 800465a:	d901      	bls.n	8004660 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 800465c:	2303      	movs	r3, #3
 800465e:	e00f      	b.n	8004680 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004660:	4b09      	ldr	r3, [pc, #36]	; (8004688 <HAL_RCC_OscConfig+0x820>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004668:	2b00      	cmp	r3, #0
 800466a:	d1f0      	bne.n	800464e <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800466c:	4b06      	ldr	r3, [pc, #24]	; (8004688 <HAL_RCC_OscConfig+0x820>)
 800466e:	68da      	ldr	r2, [r3, #12]
 8004670:	4905      	ldr	r1, [pc, #20]	; (8004688 <HAL_RCC_OscConfig+0x820>)
 8004672:	4b06      	ldr	r3, [pc, #24]	; (800468c <HAL_RCC_OscConfig+0x824>)
 8004674:	4013      	ands	r3, r2
 8004676:	60cb      	str	r3, [r1, #12]
 8004678:	e001      	b.n	800467e <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	e000      	b.n	8004680 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800467e:	2300      	movs	r3, #0
}
 8004680:	4618      	mov	r0, r3
 8004682:	3720      	adds	r7, #32
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}
 8004688:	40021000 	.word	0x40021000
 800468c:	feeefffc 	.word	0xfeeefffc

08004690 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b084      	sub	sp, #16
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
 8004698:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d101      	bne.n	80046a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80046a0:	2301      	movs	r3, #1
 80046a2:	e0e7      	b.n	8004874 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80046a4:	4b75      	ldr	r3, [pc, #468]	; (800487c <HAL_RCC_ClockConfig+0x1ec>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f003 0307 	and.w	r3, r3, #7
 80046ac:	683a      	ldr	r2, [r7, #0]
 80046ae:	429a      	cmp	r2, r3
 80046b0:	d910      	bls.n	80046d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046b2:	4b72      	ldr	r3, [pc, #456]	; (800487c <HAL_RCC_ClockConfig+0x1ec>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f023 0207 	bic.w	r2, r3, #7
 80046ba:	4970      	ldr	r1, [pc, #448]	; (800487c <HAL_RCC_ClockConfig+0x1ec>)
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	4313      	orrs	r3, r2
 80046c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046c2:	4b6e      	ldr	r3, [pc, #440]	; (800487c <HAL_RCC_ClockConfig+0x1ec>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f003 0307 	and.w	r3, r3, #7
 80046ca:	683a      	ldr	r2, [r7, #0]
 80046cc:	429a      	cmp	r2, r3
 80046ce:	d001      	beq.n	80046d4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80046d0:	2301      	movs	r3, #1
 80046d2:	e0cf      	b.n	8004874 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f003 0302 	and.w	r3, r3, #2
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d010      	beq.n	8004702 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	689a      	ldr	r2, [r3, #8]
 80046e4:	4b66      	ldr	r3, [pc, #408]	; (8004880 <HAL_RCC_ClockConfig+0x1f0>)
 80046e6:	689b      	ldr	r3, [r3, #8]
 80046e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80046ec:	429a      	cmp	r2, r3
 80046ee:	d908      	bls.n	8004702 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80046f0:	4b63      	ldr	r3, [pc, #396]	; (8004880 <HAL_RCC_ClockConfig+0x1f0>)
 80046f2:	689b      	ldr	r3, [r3, #8]
 80046f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	689b      	ldr	r3, [r3, #8]
 80046fc:	4960      	ldr	r1, [pc, #384]	; (8004880 <HAL_RCC_ClockConfig+0x1f0>)
 80046fe:	4313      	orrs	r3, r2
 8004700:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f003 0301 	and.w	r3, r3, #1
 800470a:	2b00      	cmp	r3, #0
 800470c:	d04c      	beq.n	80047a8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	2b03      	cmp	r3, #3
 8004714:	d107      	bne.n	8004726 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004716:	4b5a      	ldr	r3, [pc, #360]	; (8004880 <HAL_RCC_ClockConfig+0x1f0>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800471e:	2b00      	cmp	r3, #0
 8004720:	d121      	bne.n	8004766 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004722:	2301      	movs	r3, #1
 8004724:	e0a6      	b.n	8004874 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	2b02      	cmp	r3, #2
 800472c:	d107      	bne.n	800473e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800472e:	4b54      	ldr	r3, [pc, #336]	; (8004880 <HAL_RCC_ClockConfig+0x1f0>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004736:	2b00      	cmp	r3, #0
 8004738:	d115      	bne.n	8004766 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800473a:	2301      	movs	r3, #1
 800473c:	e09a      	b.n	8004874 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d107      	bne.n	8004756 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004746:	4b4e      	ldr	r3, [pc, #312]	; (8004880 <HAL_RCC_ClockConfig+0x1f0>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f003 0302 	and.w	r3, r3, #2
 800474e:	2b00      	cmp	r3, #0
 8004750:	d109      	bne.n	8004766 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004752:	2301      	movs	r3, #1
 8004754:	e08e      	b.n	8004874 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004756:	4b4a      	ldr	r3, [pc, #296]	; (8004880 <HAL_RCC_ClockConfig+0x1f0>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800475e:	2b00      	cmp	r3, #0
 8004760:	d101      	bne.n	8004766 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004762:	2301      	movs	r3, #1
 8004764:	e086      	b.n	8004874 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004766:	4b46      	ldr	r3, [pc, #280]	; (8004880 <HAL_RCC_ClockConfig+0x1f0>)
 8004768:	689b      	ldr	r3, [r3, #8]
 800476a:	f023 0203 	bic.w	r2, r3, #3
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	4943      	ldr	r1, [pc, #268]	; (8004880 <HAL_RCC_ClockConfig+0x1f0>)
 8004774:	4313      	orrs	r3, r2
 8004776:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004778:	f7fd ff0c 	bl	8002594 <HAL_GetTick>
 800477c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800477e:	e00a      	b.n	8004796 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004780:	f7fd ff08 	bl	8002594 <HAL_GetTick>
 8004784:	4602      	mov	r2, r0
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	1ad3      	subs	r3, r2, r3
 800478a:	f241 3288 	movw	r2, #5000	; 0x1388
 800478e:	4293      	cmp	r3, r2
 8004790:	d901      	bls.n	8004796 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004792:	2303      	movs	r3, #3
 8004794:	e06e      	b.n	8004874 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004796:	4b3a      	ldr	r3, [pc, #232]	; (8004880 <HAL_RCC_ClockConfig+0x1f0>)
 8004798:	689b      	ldr	r3, [r3, #8]
 800479a:	f003 020c 	and.w	r2, r3, #12
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	009b      	lsls	r3, r3, #2
 80047a4:	429a      	cmp	r2, r3
 80047a6:	d1eb      	bne.n	8004780 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f003 0302 	and.w	r3, r3, #2
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d010      	beq.n	80047d6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	689a      	ldr	r2, [r3, #8]
 80047b8:	4b31      	ldr	r3, [pc, #196]	; (8004880 <HAL_RCC_ClockConfig+0x1f0>)
 80047ba:	689b      	ldr	r3, [r3, #8]
 80047bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80047c0:	429a      	cmp	r2, r3
 80047c2:	d208      	bcs.n	80047d6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047c4:	4b2e      	ldr	r3, [pc, #184]	; (8004880 <HAL_RCC_ClockConfig+0x1f0>)
 80047c6:	689b      	ldr	r3, [r3, #8]
 80047c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	689b      	ldr	r3, [r3, #8]
 80047d0:	492b      	ldr	r1, [pc, #172]	; (8004880 <HAL_RCC_ClockConfig+0x1f0>)
 80047d2:	4313      	orrs	r3, r2
 80047d4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80047d6:	4b29      	ldr	r3, [pc, #164]	; (800487c <HAL_RCC_ClockConfig+0x1ec>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f003 0307 	and.w	r3, r3, #7
 80047de:	683a      	ldr	r2, [r7, #0]
 80047e0:	429a      	cmp	r2, r3
 80047e2:	d210      	bcs.n	8004806 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047e4:	4b25      	ldr	r3, [pc, #148]	; (800487c <HAL_RCC_ClockConfig+0x1ec>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f023 0207 	bic.w	r2, r3, #7
 80047ec:	4923      	ldr	r1, [pc, #140]	; (800487c <HAL_RCC_ClockConfig+0x1ec>)
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	4313      	orrs	r3, r2
 80047f2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047f4:	4b21      	ldr	r3, [pc, #132]	; (800487c <HAL_RCC_ClockConfig+0x1ec>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f003 0307 	and.w	r3, r3, #7
 80047fc:	683a      	ldr	r2, [r7, #0]
 80047fe:	429a      	cmp	r2, r3
 8004800:	d001      	beq.n	8004806 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004802:	2301      	movs	r3, #1
 8004804:	e036      	b.n	8004874 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f003 0304 	and.w	r3, r3, #4
 800480e:	2b00      	cmp	r3, #0
 8004810:	d008      	beq.n	8004824 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004812:	4b1b      	ldr	r3, [pc, #108]	; (8004880 <HAL_RCC_ClockConfig+0x1f0>)
 8004814:	689b      	ldr	r3, [r3, #8]
 8004816:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	68db      	ldr	r3, [r3, #12]
 800481e:	4918      	ldr	r1, [pc, #96]	; (8004880 <HAL_RCC_ClockConfig+0x1f0>)
 8004820:	4313      	orrs	r3, r2
 8004822:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f003 0308 	and.w	r3, r3, #8
 800482c:	2b00      	cmp	r3, #0
 800482e:	d009      	beq.n	8004844 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004830:	4b13      	ldr	r3, [pc, #76]	; (8004880 <HAL_RCC_ClockConfig+0x1f0>)
 8004832:	689b      	ldr	r3, [r3, #8]
 8004834:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	691b      	ldr	r3, [r3, #16]
 800483c:	00db      	lsls	r3, r3, #3
 800483e:	4910      	ldr	r1, [pc, #64]	; (8004880 <HAL_RCC_ClockConfig+0x1f0>)
 8004840:	4313      	orrs	r3, r2
 8004842:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004844:	f000 f824 	bl	8004890 <HAL_RCC_GetSysClockFreq>
 8004848:	4602      	mov	r2, r0
 800484a:	4b0d      	ldr	r3, [pc, #52]	; (8004880 <HAL_RCC_ClockConfig+0x1f0>)
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	091b      	lsrs	r3, r3, #4
 8004850:	f003 030f 	and.w	r3, r3, #15
 8004854:	490b      	ldr	r1, [pc, #44]	; (8004884 <HAL_RCC_ClockConfig+0x1f4>)
 8004856:	5ccb      	ldrb	r3, [r1, r3]
 8004858:	f003 031f 	and.w	r3, r3, #31
 800485c:	fa22 f303 	lsr.w	r3, r2, r3
 8004860:	4a09      	ldr	r2, [pc, #36]	; (8004888 <HAL_RCC_ClockConfig+0x1f8>)
 8004862:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004864:	4b09      	ldr	r3, [pc, #36]	; (800488c <HAL_RCC_ClockConfig+0x1fc>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4618      	mov	r0, r3
 800486a:	f7fd fe43 	bl	80024f4 <HAL_InitTick>
 800486e:	4603      	mov	r3, r0
 8004870:	72fb      	strb	r3, [r7, #11]

  return status;
 8004872:	7afb      	ldrb	r3, [r7, #11]
}
 8004874:	4618      	mov	r0, r3
 8004876:	3710      	adds	r7, #16
 8004878:	46bd      	mov	sp, r7
 800487a:	bd80      	pop	{r7, pc}
 800487c:	40022000 	.word	0x40022000
 8004880:	40021000 	.word	0x40021000
 8004884:	08009800 	.word	0x08009800
 8004888:	20000000 	.word	0x20000000
 800488c:	20000004 	.word	0x20000004

08004890 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004890:	b480      	push	{r7}
 8004892:	b089      	sub	sp, #36	; 0x24
 8004894:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004896:	2300      	movs	r3, #0
 8004898:	61fb      	str	r3, [r7, #28]
 800489a:	2300      	movs	r3, #0
 800489c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800489e:	4b3e      	ldr	r3, [pc, #248]	; (8004998 <HAL_RCC_GetSysClockFreq+0x108>)
 80048a0:	689b      	ldr	r3, [r3, #8]
 80048a2:	f003 030c 	and.w	r3, r3, #12
 80048a6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80048a8:	4b3b      	ldr	r3, [pc, #236]	; (8004998 <HAL_RCC_GetSysClockFreq+0x108>)
 80048aa:	68db      	ldr	r3, [r3, #12]
 80048ac:	f003 0303 	and.w	r3, r3, #3
 80048b0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d005      	beq.n	80048c4 <HAL_RCC_GetSysClockFreq+0x34>
 80048b8:	693b      	ldr	r3, [r7, #16]
 80048ba:	2b0c      	cmp	r3, #12
 80048bc:	d121      	bne.n	8004902 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	2b01      	cmp	r3, #1
 80048c2:	d11e      	bne.n	8004902 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80048c4:	4b34      	ldr	r3, [pc, #208]	; (8004998 <HAL_RCC_GetSysClockFreq+0x108>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f003 0308 	and.w	r3, r3, #8
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d107      	bne.n	80048e0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80048d0:	4b31      	ldr	r3, [pc, #196]	; (8004998 <HAL_RCC_GetSysClockFreq+0x108>)
 80048d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048d6:	0a1b      	lsrs	r3, r3, #8
 80048d8:	f003 030f 	and.w	r3, r3, #15
 80048dc:	61fb      	str	r3, [r7, #28]
 80048de:	e005      	b.n	80048ec <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80048e0:	4b2d      	ldr	r3, [pc, #180]	; (8004998 <HAL_RCC_GetSysClockFreq+0x108>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	091b      	lsrs	r3, r3, #4
 80048e6:	f003 030f 	and.w	r3, r3, #15
 80048ea:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80048ec:	4a2b      	ldr	r2, [pc, #172]	; (800499c <HAL_RCC_GetSysClockFreq+0x10c>)
 80048ee:	69fb      	ldr	r3, [r7, #28]
 80048f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048f4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d10d      	bne.n	8004918 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80048fc:	69fb      	ldr	r3, [r7, #28]
 80048fe:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004900:	e00a      	b.n	8004918 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004902:	693b      	ldr	r3, [r7, #16]
 8004904:	2b04      	cmp	r3, #4
 8004906:	d102      	bne.n	800490e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004908:	4b25      	ldr	r3, [pc, #148]	; (80049a0 <HAL_RCC_GetSysClockFreq+0x110>)
 800490a:	61bb      	str	r3, [r7, #24]
 800490c:	e004      	b.n	8004918 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800490e:	693b      	ldr	r3, [r7, #16]
 8004910:	2b08      	cmp	r3, #8
 8004912:	d101      	bne.n	8004918 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004914:	4b23      	ldr	r3, [pc, #140]	; (80049a4 <HAL_RCC_GetSysClockFreq+0x114>)
 8004916:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004918:	693b      	ldr	r3, [r7, #16]
 800491a:	2b0c      	cmp	r3, #12
 800491c:	d134      	bne.n	8004988 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800491e:	4b1e      	ldr	r3, [pc, #120]	; (8004998 <HAL_RCC_GetSysClockFreq+0x108>)
 8004920:	68db      	ldr	r3, [r3, #12]
 8004922:	f003 0303 	and.w	r3, r3, #3
 8004926:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	2b02      	cmp	r3, #2
 800492c:	d003      	beq.n	8004936 <HAL_RCC_GetSysClockFreq+0xa6>
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	2b03      	cmp	r3, #3
 8004932:	d003      	beq.n	800493c <HAL_RCC_GetSysClockFreq+0xac>
 8004934:	e005      	b.n	8004942 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004936:	4b1a      	ldr	r3, [pc, #104]	; (80049a0 <HAL_RCC_GetSysClockFreq+0x110>)
 8004938:	617b      	str	r3, [r7, #20]
      break;
 800493a:	e005      	b.n	8004948 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800493c:	4b19      	ldr	r3, [pc, #100]	; (80049a4 <HAL_RCC_GetSysClockFreq+0x114>)
 800493e:	617b      	str	r3, [r7, #20]
      break;
 8004940:	e002      	b.n	8004948 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004942:	69fb      	ldr	r3, [r7, #28]
 8004944:	617b      	str	r3, [r7, #20]
      break;
 8004946:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004948:	4b13      	ldr	r3, [pc, #76]	; (8004998 <HAL_RCC_GetSysClockFreq+0x108>)
 800494a:	68db      	ldr	r3, [r3, #12]
 800494c:	091b      	lsrs	r3, r3, #4
 800494e:	f003 0307 	and.w	r3, r3, #7
 8004952:	3301      	adds	r3, #1
 8004954:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004956:	4b10      	ldr	r3, [pc, #64]	; (8004998 <HAL_RCC_GetSysClockFreq+0x108>)
 8004958:	68db      	ldr	r3, [r3, #12]
 800495a:	0a1b      	lsrs	r3, r3, #8
 800495c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004960:	697a      	ldr	r2, [r7, #20]
 8004962:	fb03 f202 	mul.w	r2, r3, r2
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	fbb2 f3f3 	udiv	r3, r2, r3
 800496c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800496e:	4b0a      	ldr	r3, [pc, #40]	; (8004998 <HAL_RCC_GetSysClockFreq+0x108>)
 8004970:	68db      	ldr	r3, [r3, #12]
 8004972:	0e5b      	lsrs	r3, r3, #25
 8004974:	f003 0303 	and.w	r3, r3, #3
 8004978:	3301      	adds	r3, #1
 800497a:	005b      	lsls	r3, r3, #1
 800497c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800497e:	697a      	ldr	r2, [r7, #20]
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	fbb2 f3f3 	udiv	r3, r2, r3
 8004986:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004988:	69bb      	ldr	r3, [r7, #24]
}
 800498a:	4618      	mov	r0, r3
 800498c:	3724      	adds	r7, #36	; 0x24
 800498e:	46bd      	mov	sp, r7
 8004990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004994:	4770      	bx	lr
 8004996:	bf00      	nop
 8004998:	40021000 	.word	0x40021000
 800499c:	08009818 	.word	0x08009818
 80049a0:	00f42400 	.word	0x00f42400
 80049a4:	007a1200 	.word	0x007a1200

080049a8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80049a8:	b480      	push	{r7}
 80049aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80049ac:	4b03      	ldr	r3, [pc, #12]	; (80049bc <HAL_RCC_GetHCLKFreq+0x14>)
 80049ae:	681b      	ldr	r3, [r3, #0]
}
 80049b0:	4618      	mov	r0, r3
 80049b2:	46bd      	mov	sp, r7
 80049b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b8:	4770      	bx	lr
 80049ba:	bf00      	nop
 80049bc:	20000000 	.word	0x20000000

080049c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80049c4:	f7ff fff0 	bl	80049a8 <HAL_RCC_GetHCLKFreq>
 80049c8:	4602      	mov	r2, r0
 80049ca:	4b06      	ldr	r3, [pc, #24]	; (80049e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80049cc:	689b      	ldr	r3, [r3, #8]
 80049ce:	0a1b      	lsrs	r3, r3, #8
 80049d0:	f003 0307 	and.w	r3, r3, #7
 80049d4:	4904      	ldr	r1, [pc, #16]	; (80049e8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80049d6:	5ccb      	ldrb	r3, [r1, r3]
 80049d8:	f003 031f 	and.w	r3, r3, #31
 80049dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049e0:	4618      	mov	r0, r3
 80049e2:	bd80      	pop	{r7, pc}
 80049e4:	40021000 	.word	0x40021000
 80049e8:	08009810 	.word	0x08009810

080049ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80049f0:	f7ff ffda 	bl	80049a8 <HAL_RCC_GetHCLKFreq>
 80049f4:	4602      	mov	r2, r0
 80049f6:	4b06      	ldr	r3, [pc, #24]	; (8004a10 <HAL_RCC_GetPCLK2Freq+0x24>)
 80049f8:	689b      	ldr	r3, [r3, #8]
 80049fa:	0adb      	lsrs	r3, r3, #11
 80049fc:	f003 0307 	and.w	r3, r3, #7
 8004a00:	4904      	ldr	r1, [pc, #16]	; (8004a14 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004a02:	5ccb      	ldrb	r3, [r1, r3]
 8004a04:	f003 031f 	and.w	r3, r3, #31
 8004a08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	bd80      	pop	{r7, pc}
 8004a10:	40021000 	.word	0x40021000
 8004a14:	08009810 	.word	0x08009810

08004a18 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b086      	sub	sp, #24
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004a20:	2300      	movs	r3, #0
 8004a22:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004a24:	4b2a      	ldr	r3, [pc, #168]	; (8004ad0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004a26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d003      	beq.n	8004a38 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004a30:	f7ff f9b6 	bl	8003da0 <HAL_PWREx_GetVoltageRange>
 8004a34:	6178      	str	r0, [r7, #20]
 8004a36:	e014      	b.n	8004a62 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004a38:	4b25      	ldr	r3, [pc, #148]	; (8004ad0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004a3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a3c:	4a24      	ldr	r2, [pc, #144]	; (8004ad0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004a3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a42:	6593      	str	r3, [r2, #88]	; 0x58
 8004a44:	4b22      	ldr	r3, [pc, #136]	; (8004ad0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004a46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a4c:	60fb      	str	r3, [r7, #12]
 8004a4e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004a50:	f7ff f9a6 	bl	8003da0 <HAL_PWREx_GetVoltageRange>
 8004a54:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004a56:	4b1e      	ldr	r3, [pc, #120]	; (8004ad0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004a58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a5a:	4a1d      	ldr	r2, [pc, #116]	; (8004ad0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004a5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a60:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a68:	d10b      	bne.n	8004a82 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2b80      	cmp	r3, #128	; 0x80
 8004a6e:	d919      	bls.n	8004aa4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2ba0      	cmp	r3, #160	; 0xa0
 8004a74:	d902      	bls.n	8004a7c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004a76:	2302      	movs	r3, #2
 8004a78:	613b      	str	r3, [r7, #16]
 8004a7a:	e013      	b.n	8004aa4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	613b      	str	r3, [r7, #16]
 8004a80:	e010      	b.n	8004aa4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2b80      	cmp	r3, #128	; 0x80
 8004a86:	d902      	bls.n	8004a8e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004a88:	2303      	movs	r3, #3
 8004a8a:	613b      	str	r3, [r7, #16]
 8004a8c:	e00a      	b.n	8004aa4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2b80      	cmp	r3, #128	; 0x80
 8004a92:	d102      	bne.n	8004a9a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004a94:	2302      	movs	r3, #2
 8004a96:	613b      	str	r3, [r7, #16]
 8004a98:	e004      	b.n	8004aa4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2b70      	cmp	r3, #112	; 0x70
 8004a9e:	d101      	bne.n	8004aa4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004aa4:	4b0b      	ldr	r3, [pc, #44]	; (8004ad4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f023 0207 	bic.w	r2, r3, #7
 8004aac:	4909      	ldr	r1, [pc, #36]	; (8004ad4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004aae:	693b      	ldr	r3, [r7, #16]
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004ab4:	4b07      	ldr	r3, [pc, #28]	; (8004ad4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f003 0307 	and.w	r3, r3, #7
 8004abc:	693a      	ldr	r2, [r7, #16]
 8004abe:	429a      	cmp	r2, r3
 8004ac0:	d001      	beq.n	8004ac6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	e000      	b.n	8004ac8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004ac6:	2300      	movs	r3, #0
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	3718      	adds	r7, #24
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bd80      	pop	{r7, pc}
 8004ad0:	40021000 	.word	0x40021000
 8004ad4:	40022000 	.word	0x40022000

08004ad8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b086      	sub	sp, #24
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d031      	beq.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004af8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004afc:	d01a      	beq.n	8004b34 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8004afe:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004b02:	d814      	bhi.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d009      	beq.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004b08:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004b0c:	d10f      	bne.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8004b0e:	4b5d      	ldr	r3, [pc, #372]	; (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004b10:	68db      	ldr	r3, [r3, #12]
 8004b12:	4a5c      	ldr	r2, [pc, #368]	; (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004b14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b18:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004b1a:	e00c      	b.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	3304      	adds	r3, #4
 8004b20:	2100      	movs	r1, #0
 8004b22:	4618      	mov	r0, r3
 8004b24:	f000 fa22 	bl	8004f6c <RCCEx_PLLSAI1_Config>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004b2c:	e003      	b.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004b2e:	2301      	movs	r3, #1
 8004b30:	74fb      	strb	r3, [r7, #19]
      break;
 8004b32:	e000      	b.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8004b34:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b36:	7cfb      	ldrb	r3, [r7, #19]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d10b      	bne.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004b3c:	4b51      	ldr	r3, [pc, #324]	; (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004b3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b42:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b4a:	494e      	ldr	r1, [pc, #312]	; (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004b4c:	4313      	orrs	r3, r2
 8004b4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004b52:	e001      	b.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b54:	7cfb      	ldrb	r3, [r7, #19]
 8004b56:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	f000 809e 	beq.w	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b66:	2300      	movs	r3, #0
 8004b68:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004b6a:	4b46      	ldr	r3, [pc, #280]	; (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004b6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d101      	bne.n	8004b7a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8004b76:	2301      	movs	r3, #1
 8004b78:	e000      	b.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d00d      	beq.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b80:	4b40      	ldr	r3, [pc, #256]	; (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004b82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b84:	4a3f      	ldr	r2, [pc, #252]	; (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004b86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b8a:	6593      	str	r3, [r2, #88]	; 0x58
 8004b8c:	4b3d      	ldr	r3, [pc, #244]	; (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004b8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b94:	60bb      	str	r3, [r7, #8]
 8004b96:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b98:	2301      	movs	r3, #1
 8004b9a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004b9c:	4b3a      	ldr	r3, [pc, #232]	; (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a39      	ldr	r2, [pc, #228]	; (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004ba2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ba6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004ba8:	f7fd fcf4 	bl	8002594 <HAL_GetTick>
 8004bac:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004bae:	e009      	b.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bb0:	f7fd fcf0 	bl	8002594 <HAL_GetTick>
 8004bb4:	4602      	mov	r2, r0
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	1ad3      	subs	r3, r2, r3
 8004bba:	2b02      	cmp	r3, #2
 8004bbc:	d902      	bls.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8004bbe:	2303      	movs	r3, #3
 8004bc0:	74fb      	strb	r3, [r7, #19]
        break;
 8004bc2:	e005      	b.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004bc4:	4b30      	ldr	r3, [pc, #192]	; (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d0ef      	beq.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8004bd0:	7cfb      	ldrb	r3, [r7, #19]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d15a      	bne.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004bd6:	4b2b      	ldr	r3, [pc, #172]	; (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004bd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bdc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004be0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004be2:	697b      	ldr	r3, [r7, #20]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d01e      	beq.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bec:	697a      	ldr	r2, [r7, #20]
 8004bee:	429a      	cmp	r2, r3
 8004bf0:	d019      	beq.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004bf2:	4b24      	ldr	r3, [pc, #144]	; (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004bf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bf8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bfc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004bfe:	4b21      	ldr	r3, [pc, #132]	; (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004c00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c04:	4a1f      	ldr	r2, [pc, #124]	; (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004c06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c0a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004c0e:	4b1d      	ldr	r3, [pc, #116]	; (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004c10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c14:	4a1b      	ldr	r2, [pc, #108]	; (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004c16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c1a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004c1e:	4a19      	ldr	r2, [pc, #100]	; (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004c20:	697b      	ldr	r3, [r7, #20]
 8004c22:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	f003 0301 	and.w	r3, r3, #1
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d016      	beq.n	8004c5e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c30:	f7fd fcb0 	bl	8002594 <HAL_GetTick>
 8004c34:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c36:	e00b      	b.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c38:	f7fd fcac 	bl	8002594 <HAL_GetTick>
 8004c3c:	4602      	mov	r2, r0
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	1ad3      	subs	r3, r2, r3
 8004c42:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d902      	bls.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8004c4a:	2303      	movs	r3, #3
 8004c4c:	74fb      	strb	r3, [r7, #19]
            break;
 8004c4e:	e006      	b.n	8004c5e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c50:	4b0c      	ldr	r3, [pc, #48]	; (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004c52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c56:	f003 0302 	and.w	r3, r3, #2
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d0ec      	beq.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8004c5e:	7cfb      	ldrb	r3, [r7, #19]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d10b      	bne.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c64:	4b07      	ldr	r3, [pc, #28]	; (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004c66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c6a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c72:	4904      	ldr	r1, [pc, #16]	; (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004c74:	4313      	orrs	r3, r2
 8004c76:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004c7a:	e009      	b.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004c7c:	7cfb      	ldrb	r3, [r7, #19]
 8004c7e:	74bb      	strb	r3, [r7, #18]
 8004c80:	e006      	b.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8004c82:	bf00      	nop
 8004c84:	40021000 	.word	0x40021000
 8004c88:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c8c:	7cfb      	ldrb	r3, [r7, #19]
 8004c8e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004c90:	7c7b      	ldrb	r3, [r7, #17]
 8004c92:	2b01      	cmp	r3, #1
 8004c94:	d105      	bne.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c96:	4b8d      	ldr	r3, [pc, #564]	; (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004c98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c9a:	4a8c      	ldr	r2, [pc, #560]	; (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004c9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ca0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f003 0301 	and.w	r3, r3, #1
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d00a      	beq.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004cae:	4b87      	ldr	r3, [pc, #540]	; (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004cb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cb4:	f023 0203 	bic.w	r2, r3, #3
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6a1b      	ldr	r3, [r3, #32]
 8004cbc:	4983      	ldr	r1, [pc, #524]	; (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f003 0302 	and.w	r3, r3, #2
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d00a      	beq.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004cd0:	4b7e      	ldr	r3, [pc, #504]	; (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004cd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cd6:	f023 020c 	bic.w	r2, r3, #12
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cde:	497b      	ldr	r1, [pc, #492]	; (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f003 0304 	and.w	r3, r3, #4
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d00a      	beq.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004cf2:	4b76      	ldr	r3, [pc, #472]	; (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004cf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cf8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d00:	4972      	ldr	r1, [pc, #456]	; (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004d02:	4313      	orrs	r3, r2
 8004d04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f003 0320 	and.w	r3, r3, #32
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d00a      	beq.n	8004d2a <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004d14:	4b6d      	ldr	r3, [pc, #436]	; (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004d16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d1a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d22:	496a      	ldr	r1, [pc, #424]	; (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004d24:	4313      	orrs	r3, r2
 8004d26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d00a      	beq.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004d36:	4b65      	ldr	r3, [pc, #404]	; (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004d38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d3c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d44:	4961      	ldr	r1, [pc, #388]	; (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004d46:	4313      	orrs	r3, r2
 8004d48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d00a      	beq.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004d58:	4b5c      	ldr	r3, [pc, #368]	; (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004d5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d5e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d66:	4959      	ldr	r1, [pc, #356]	; (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d00a      	beq.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004d7a:	4b54      	ldr	r3, [pc, #336]	; (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004d7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d80:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d88:	4950      	ldr	r1, [pc, #320]	; (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d00a      	beq.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004d9c:	4b4b      	ldr	r3, [pc, #300]	; (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004d9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004da2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004daa:	4948      	ldr	r1, [pc, #288]	; (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004dac:	4313      	orrs	r3, r2
 8004dae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d00a      	beq.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004dbe:	4b43      	ldr	r3, [pc, #268]	; (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004dc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dc4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dcc:	493f      	ldr	r1, [pc, #252]	; (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d028      	beq.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004de0:	4b3a      	ldr	r3, [pc, #232]	; (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004de2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004de6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004dee:	4937      	ldr	r1, [pc, #220]	; (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004df0:	4313      	orrs	r3, r2
 8004df2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004dfa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004dfe:	d106      	bne.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e00:	4b32      	ldr	r3, [pc, #200]	; (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004e02:	68db      	ldr	r3, [r3, #12]
 8004e04:	4a31      	ldr	r2, [pc, #196]	; (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004e06:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e0a:	60d3      	str	r3, [r2, #12]
 8004e0c:	e011      	b.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e12:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004e16:	d10c      	bne.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	3304      	adds	r3, #4
 8004e1c:	2101      	movs	r1, #1
 8004e1e:	4618      	mov	r0, r3
 8004e20:	f000 f8a4 	bl	8004f6c <RCCEx_PLLSAI1_Config>
 8004e24:	4603      	mov	r3, r0
 8004e26:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004e28:	7cfb      	ldrb	r3, [r7, #19]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d001      	beq.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0x35a>
        {
          /* set overall return value */
          status = ret;
 8004e2e:	7cfb      	ldrb	r3, [r7, #19]
 8004e30:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d028      	beq.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004e3e:	4b23      	ldr	r3, [pc, #140]	; (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004e40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e44:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e4c:	491f      	ldr	r1, [pc, #124]	; (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e58:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e5c:	d106      	bne.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e5e:	4b1b      	ldr	r3, [pc, #108]	; (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004e60:	68db      	ldr	r3, [r3, #12]
 8004e62:	4a1a      	ldr	r2, [pc, #104]	; (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004e64:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e68:	60d3      	str	r3, [r2, #12]
 8004e6a:	e011      	b.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e70:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004e74:	d10c      	bne.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	3304      	adds	r3, #4
 8004e7a:	2101      	movs	r1, #1
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	f000 f875 	bl	8004f6c <RCCEx_PLLSAI1_Config>
 8004e82:	4603      	mov	r3, r0
 8004e84:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004e86:	7cfb      	ldrb	r3, [r7, #19]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d001      	beq.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8004e8c:	7cfb      	ldrb	r3, [r7, #19]
 8004e8e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d02b      	beq.n	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004e9c:	4b0b      	ldr	r3, [pc, #44]	; (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004e9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ea2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004eaa:	4908      	ldr	r1, [pc, #32]	; (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004eac:	4313      	orrs	r3, r2
 8004eae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004eb6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004eba:	d109      	bne.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ebc:	4b03      	ldr	r3, [pc, #12]	; (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004ebe:	68db      	ldr	r3, [r3, #12]
 8004ec0:	4a02      	ldr	r2, [pc, #8]	; (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004ec2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ec6:	60d3      	str	r3, [r2, #12]
 8004ec8:	e014      	b.n	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8004eca:	bf00      	nop
 8004ecc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ed4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004ed8:	d10c      	bne.n	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	3304      	adds	r3, #4
 8004ede:	2101      	movs	r1, #1
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	f000 f843 	bl	8004f6c <RCCEx_PLLSAI1_Config>
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004eea:	7cfb      	ldrb	r3, [r7, #19]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d001      	beq.n	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      {
        /* set overall return value */
        status = ret;
 8004ef0:	7cfb      	ldrb	r3, [r7, #19]
 8004ef2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d01c      	beq.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004f00:	4b19      	ldr	r3, [pc, #100]	; (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f06:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f0e:	4916      	ldr	r1, [pc, #88]	; (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f10:	4313      	orrs	r3, r2
 8004f12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f1a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004f1e:	d10c      	bne.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	3304      	adds	r3, #4
 8004f24:	2102      	movs	r1, #2
 8004f26:	4618      	mov	r0, r3
 8004f28:	f000 f820 	bl	8004f6c <RCCEx_PLLSAI1_Config>
 8004f2c:	4603      	mov	r3, r0
 8004f2e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004f30:	7cfb      	ldrb	r3, [r7, #19]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d001      	beq.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x462>
      {
        /* set overall return value */
        status = ret;
 8004f36:	7cfb      	ldrb	r3, [r7, #19]
 8004f38:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d00a      	beq.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004f46:	4b08      	ldr	r3, [pc, #32]	; (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f4c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f54:	4904      	ldr	r1, [pc, #16]	; (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f56:	4313      	orrs	r3, r2
 8004f58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004f5c:	7cbb      	ldrb	r3, [r7, #18]
}
 8004f5e:	4618      	mov	r0, r3
 8004f60:	3718      	adds	r7, #24
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bd80      	pop	{r7, pc}
 8004f66:	bf00      	nop
 8004f68:	40021000 	.word	0x40021000

08004f6c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b084      	sub	sp, #16
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
 8004f74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004f76:	2300      	movs	r3, #0
 8004f78:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004f7a:	4b74      	ldr	r3, [pc, #464]	; (800514c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f7c:	68db      	ldr	r3, [r3, #12]
 8004f7e:	f003 0303 	and.w	r3, r3, #3
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d018      	beq.n	8004fb8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004f86:	4b71      	ldr	r3, [pc, #452]	; (800514c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f88:	68db      	ldr	r3, [r3, #12]
 8004f8a:	f003 0203 	and.w	r2, r3, #3
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	429a      	cmp	r2, r3
 8004f94:	d10d      	bne.n	8004fb2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
       ||
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d009      	beq.n	8004fb2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004f9e:	4b6b      	ldr	r3, [pc, #428]	; (800514c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004fa0:	68db      	ldr	r3, [r3, #12]
 8004fa2:	091b      	lsrs	r3, r3, #4
 8004fa4:	f003 0307 	and.w	r3, r3, #7
 8004fa8:	1c5a      	adds	r2, r3, #1
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	685b      	ldr	r3, [r3, #4]
       ||
 8004fae:	429a      	cmp	r2, r3
 8004fb0:	d047      	beq.n	8005042 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	73fb      	strb	r3, [r7, #15]
 8004fb6:	e044      	b.n	8005042 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	2b03      	cmp	r3, #3
 8004fbe:	d018      	beq.n	8004ff2 <RCCEx_PLLSAI1_Config+0x86>
 8004fc0:	2b03      	cmp	r3, #3
 8004fc2:	d825      	bhi.n	8005010 <RCCEx_PLLSAI1_Config+0xa4>
 8004fc4:	2b01      	cmp	r3, #1
 8004fc6:	d002      	beq.n	8004fce <RCCEx_PLLSAI1_Config+0x62>
 8004fc8:	2b02      	cmp	r3, #2
 8004fca:	d009      	beq.n	8004fe0 <RCCEx_PLLSAI1_Config+0x74>
 8004fcc:	e020      	b.n	8005010 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004fce:	4b5f      	ldr	r3, [pc, #380]	; (800514c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f003 0302 	and.w	r3, r3, #2
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d11d      	bne.n	8005016 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004fde:	e01a      	b.n	8005016 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004fe0:	4b5a      	ldr	r3, [pc, #360]	; (800514c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d116      	bne.n	800501a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004fec:	2301      	movs	r3, #1
 8004fee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ff0:	e013      	b.n	800501a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004ff2:	4b56      	ldr	r3, [pc, #344]	; (800514c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d10f      	bne.n	800501e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004ffe:	4b53      	ldr	r3, [pc, #332]	; (800514c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005006:	2b00      	cmp	r3, #0
 8005008:	d109      	bne.n	800501e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800500a:	2301      	movs	r3, #1
 800500c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800500e:	e006      	b.n	800501e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005010:	2301      	movs	r3, #1
 8005012:	73fb      	strb	r3, [r7, #15]
      break;
 8005014:	e004      	b.n	8005020 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005016:	bf00      	nop
 8005018:	e002      	b.n	8005020 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800501a:	bf00      	nop
 800501c:	e000      	b.n	8005020 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800501e:	bf00      	nop
    }

    if(status == HAL_OK)
 8005020:	7bfb      	ldrb	r3, [r7, #15]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d10d      	bne.n	8005042 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005026:	4b49      	ldr	r3, [pc, #292]	; (800514c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005028:	68db      	ldr	r3, [r3, #12]
 800502a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6819      	ldr	r1, [r3, #0]
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	685b      	ldr	r3, [r3, #4]
 8005036:	3b01      	subs	r3, #1
 8005038:	011b      	lsls	r3, r3, #4
 800503a:	430b      	orrs	r3, r1
 800503c:	4943      	ldr	r1, [pc, #268]	; (800514c <RCCEx_PLLSAI1_Config+0x1e0>)
 800503e:	4313      	orrs	r3, r2
 8005040:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005042:	7bfb      	ldrb	r3, [r7, #15]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d17c      	bne.n	8005142 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005048:	4b40      	ldr	r3, [pc, #256]	; (800514c <RCCEx_PLLSAI1_Config+0x1e0>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a3f      	ldr	r2, [pc, #252]	; (800514c <RCCEx_PLLSAI1_Config+0x1e0>)
 800504e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005052:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005054:	f7fd fa9e 	bl	8002594 <HAL_GetTick>
 8005058:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800505a:	e009      	b.n	8005070 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800505c:	f7fd fa9a 	bl	8002594 <HAL_GetTick>
 8005060:	4602      	mov	r2, r0
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	1ad3      	subs	r3, r2, r3
 8005066:	2b02      	cmp	r3, #2
 8005068:	d902      	bls.n	8005070 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800506a:	2303      	movs	r3, #3
 800506c:	73fb      	strb	r3, [r7, #15]
        break;
 800506e:	e005      	b.n	800507c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005070:	4b36      	ldr	r3, [pc, #216]	; (800514c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005078:	2b00      	cmp	r3, #0
 800507a:	d1ef      	bne.n	800505c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800507c:	7bfb      	ldrb	r3, [r7, #15]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d15f      	bne.n	8005142 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d110      	bne.n	80050aa <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005088:	4b30      	ldr	r3, [pc, #192]	; (800514c <RCCEx_PLLSAI1_Config+0x1e0>)
 800508a:	691b      	ldr	r3, [r3, #16]
 800508c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8005090:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005094:	687a      	ldr	r2, [r7, #4]
 8005096:	6892      	ldr	r2, [r2, #8]
 8005098:	0211      	lsls	r1, r2, #8
 800509a:	687a      	ldr	r2, [r7, #4]
 800509c:	68d2      	ldr	r2, [r2, #12]
 800509e:	06d2      	lsls	r2, r2, #27
 80050a0:	430a      	orrs	r2, r1
 80050a2:	492a      	ldr	r1, [pc, #168]	; (800514c <RCCEx_PLLSAI1_Config+0x1e0>)
 80050a4:	4313      	orrs	r3, r2
 80050a6:	610b      	str	r3, [r1, #16]
 80050a8:	e027      	b.n	80050fa <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	2b01      	cmp	r3, #1
 80050ae:	d112      	bne.n	80050d6 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80050b0:	4b26      	ldr	r3, [pc, #152]	; (800514c <RCCEx_PLLSAI1_Config+0x1e0>)
 80050b2:	691b      	ldr	r3, [r3, #16]
 80050b4:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80050b8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80050bc:	687a      	ldr	r2, [r7, #4]
 80050be:	6892      	ldr	r2, [r2, #8]
 80050c0:	0211      	lsls	r1, r2, #8
 80050c2:	687a      	ldr	r2, [r7, #4]
 80050c4:	6912      	ldr	r2, [r2, #16]
 80050c6:	0852      	lsrs	r2, r2, #1
 80050c8:	3a01      	subs	r2, #1
 80050ca:	0552      	lsls	r2, r2, #21
 80050cc:	430a      	orrs	r2, r1
 80050ce:	491f      	ldr	r1, [pc, #124]	; (800514c <RCCEx_PLLSAI1_Config+0x1e0>)
 80050d0:	4313      	orrs	r3, r2
 80050d2:	610b      	str	r3, [r1, #16]
 80050d4:	e011      	b.n	80050fa <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80050d6:	4b1d      	ldr	r3, [pc, #116]	; (800514c <RCCEx_PLLSAI1_Config+0x1e0>)
 80050d8:	691b      	ldr	r3, [r3, #16]
 80050da:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80050de:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80050e2:	687a      	ldr	r2, [r7, #4]
 80050e4:	6892      	ldr	r2, [r2, #8]
 80050e6:	0211      	lsls	r1, r2, #8
 80050e8:	687a      	ldr	r2, [r7, #4]
 80050ea:	6952      	ldr	r2, [r2, #20]
 80050ec:	0852      	lsrs	r2, r2, #1
 80050ee:	3a01      	subs	r2, #1
 80050f0:	0652      	lsls	r2, r2, #25
 80050f2:	430a      	orrs	r2, r1
 80050f4:	4915      	ldr	r1, [pc, #84]	; (800514c <RCCEx_PLLSAI1_Config+0x1e0>)
 80050f6:	4313      	orrs	r3, r2
 80050f8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80050fa:	4b14      	ldr	r3, [pc, #80]	; (800514c <RCCEx_PLLSAI1_Config+0x1e0>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4a13      	ldr	r2, [pc, #76]	; (800514c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005100:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005104:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005106:	f7fd fa45 	bl	8002594 <HAL_GetTick>
 800510a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800510c:	e009      	b.n	8005122 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800510e:	f7fd fa41 	bl	8002594 <HAL_GetTick>
 8005112:	4602      	mov	r2, r0
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	1ad3      	subs	r3, r2, r3
 8005118:	2b02      	cmp	r3, #2
 800511a:	d902      	bls.n	8005122 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800511c:	2303      	movs	r3, #3
 800511e:	73fb      	strb	r3, [r7, #15]
          break;
 8005120:	e005      	b.n	800512e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005122:	4b0a      	ldr	r3, [pc, #40]	; (800514c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800512a:	2b00      	cmp	r3, #0
 800512c:	d0ef      	beq.n	800510e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800512e:	7bfb      	ldrb	r3, [r7, #15]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d106      	bne.n	8005142 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005134:	4b05      	ldr	r3, [pc, #20]	; (800514c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005136:	691a      	ldr	r2, [r3, #16]
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	699b      	ldr	r3, [r3, #24]
 800513c:	4903      	ldr	r1, [pc, #12]	; (800514c <RCCEx_PLLSAI1_Config+0x1e0>)
 800513e:	4313      	orrs	r3, r2
 8005140:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005142:	7bfb      	ldrb	r3, [r7, #15]
}
 8005144:	4618      	mov	r0, r3
 8005146:	3710      	adds	r7, #16
 8005148:	46bd      	mov	sp, r7
 800514a:	bd80      	pop	{r7, pc}
 800514c:	40021000 	.word	0x40021000

08005150 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b084      	sub	sp, #16
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d101      	bne.n	8005162 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800515e:	2301      	movs	r3, #1
 8005160:	e095      	b.n	800528e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005166:	2b00      	cmp	r3, #0
 8005168:	d108      	bne.n	800517c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	685b      	ldr	r3, [r3, #4]
 800516e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005172:	d009      	beq.n	8005188 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2200      	movs	r2, #0
 8005178:	61da      	str	r2, [r3, #28]
 800517a:	e005      	b.n	8005188 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2200      	movs	r2, #0
 8005180:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2200      	movs	r2, #0
 8005186:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2200      	movs	r2, #0
 800518c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005194:	b2db      	uxtb	r3, r3
 8005196:	2b00      	cmp	r3, #0
 8005198:	d106      	bne.n	80051a8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2200      	movs	r2, #0
 800519e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80051a2:	6878      	ldr	r0, [r7, #4]
 80051a4:	f7fc ffba 	bl	800211c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2202      	movs	r2, #2
 80051ac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	681a      	ldr	r2, [r3, #0]
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051be:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	68db      	ldr	r3, [r3, #12]
 80051c4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80051c8:	d902      	bls.n	80051d0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80051ca:	2300      	movs	r3, #0
 80051cc:	60fb      	str	r3, [r7, #12]
 80051ce:	e002      	b.n	80051d6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80051d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80051d4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	68db      	ldr	r3, [r3, #12]
 80051da:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80051de:	d007      	beq.n	80051f0 <HAL_SPI_Init+0xa0>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	68db      	ldr	r3, [r3, #12]
 80051e4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80051e8:	d002      	beq.n	80051f0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2200      	movs	r2, #0
 80051ee:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	685b      	ldr	r3, [r3, #4]
 80051f4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	689b      	ldr	r3, [r3, #8]
 80051fc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005200:	431a      	orrs	r2, r3
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	691b      	ldr	r3, [r3, #16]
 8005206:	f003 0302 	and.w	r3, r3, #2
 800520a:	431a      	orrs	r2, r3
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	695b      	ldr	r3, [r3, #20]
 8005210:	f003 0301 	and.w	r3, r3, #1
 8005214:	431a      	orrs	r2, r3
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	699b      	ldr	r3, [r3, #24]
 800521a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800521e:	431a      	orrs	r2, r3
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	69db      	ldr	r3, [r3, #28]
 8005224:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005228:	431a      	orrs	r2, r3
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6a1b      	ldr	r3, [r3, #32]
 800522e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005232:	ea42 0103 	orr.w	r1, r2, r3
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800523a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	430a      	orrs	r2, r1
 8005244:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	699b      	ldr	r3, [r3, #24]
 800524a:	0c1b      	lsrs	r3, r3, #16
 800524c:	f003 0204 	and.w	r2, r3, #4
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005254:	f003 0310 	and.w	r3, r3, #16
 8005258:	431a      	orrs	r2, r3
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800525e:	f003 0308 	and.w	r3, r3, #8
 8005262:	431a      	orrs	r2, r3
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	68db      	ldr	r3, [r3, #12]
 8005268:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800526c:	ea42 0103 	orr.w	r1, r2, r3
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	430a      	orrs	r2, r1
 800527c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2200      	movs	r2, #0
 8005282:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2201      	movs	r2, #1
 8005288:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800528c:	2300      	movs	r3, #0
}
 800528e:	4618      	mov	r0, r3
 8005290:	3710      	adds	r7, #16
 8005292:	46bd      	mov	sp, r7
 8005294:	bd80      	pop	{r7, pc}

08005296 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005296:	b580      	push	{r7, lr}
 8005298:	b088      	sub	sp, #32
 800529a:	af00      	add	r7, sp, #0
 800529c:	60f8      	str	r0, [r7, #12]
 800529e:	60b9      	str	r1, [r7, #8]
 80052a0:	603b      	str	r3, [r7, #0]
 80052a2:	4613      	mov	r3, r2
 80052a4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80052a6:	2300      	movs	r3, #0
 80052a8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80052b0:	2b01      	cmp	r3, #1
 80052b2:	d101      	bne.n	80052b8 <HAL_SPI_Transmit+0x22>
 80052b4:	2302      	movs	r3, #2
 80052b6:	e158      	b.n	800556a <HAL_SPI_Transmit+0x2d4>
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	2201      	movs	r2, #1
 80052bc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80052c0:	f7fd f968 	bl	8002594 <HAL_GetTick>
 80052c4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80052c6:	88fb      	ldrh	r3, [r7, #6]
 80052c8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80052d0:	b2db      	uxtb	r3, r3
 80052d2:	2b01      	cmp	r3, #1
 80052d4:	d002      	beq.n	80052dc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80052d6:	2302      	movs	r3, #2
 80052d8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80052da:	e13d      	b.n	8005558 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d002      	beq.n	80052e8 <HAL_SPI_Transmit+0x52>
 80052e2:	88fb      	ldrh	r3, [r7, #6]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d102      	bne.n	80052ee <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80052e8:	2301      	movs	r3, #1
 80052ea:	77fb      	strb	r3, [r7, #31]
    goto error;
 80052ec:	e134      	b.n	8005558 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	2203      	movs	r2, #3
 80052f2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	2200      	movs	r2, #0
 80052fa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	68ba      	ldr	r2, [r7, #8]
 8005300:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	88fa      	ldrh	r2, [r7, #6]
 8005306:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	88fa      	ldrh	r2, [r7, #6]
 800530c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	2200      	movs	r2, #0
 8005312:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	2200      	movs	r2, #0
 8005318:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	2200      	movs	r2, #0
 8005320:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	2200      	movs	r2, #0
 8005328:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	2200      	movs	r2, #0
 800532e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	689b      	ldr	r3, [r3, #8]
 8005334:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005338:	d10f      	bne.n	800535a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	681a      	ldr	r2, [r3, #0]
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005348:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	681a      	ldr	r2, [r3, #0]
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005358:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005364:	2b40      	cmp	r3, #64	; 0x40
 8005366:	d007      	beq.n	8005378 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	681a      	ldr	r2, [r3, #0]
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005376:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	68db      	ldr	r3, [r3, #12]
 800537c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005380:	d94b      	bls.n	800541a <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	685b      	ldr	r3, [r3, #4]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d002      	beq.n	8005390 <HAL_SPI_Transmit+0xfa>
 800538a:	8afb      	ldrh	r3, [r7, #22]
 800538c:	2b01      	cmp	r3, #1
 800538e:	d13e      	bne.n	800540e <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005394:	881a      	ldrh	r2, [r3, #0]
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053a0:	1c9a      	adds	r2, r3, #2
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053aa:	b29b      	uxth	r3, r3
 80053ac:	3b01      	subs	r3, #1
 80053ae:	b29a      	uxth	r2, r3
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80053b4:	e02b      	b.n	800540e <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	689b      	ldr	r3, [r3, #8]
 80053bc:	f003 0302 	and.w	r3, r3, #2
 80053c0:	2b02      	cmp	r3, #2
 80053c2:	d112      	bne.n	80053ea <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053c8:	881a      	ldrh	r2, [r3, #0]
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053d4:	1c9a      	adds	r2, r3, #2
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053de:	b29b      	uxth	r3, r3
 80053e0:	3b01      	subs	r3, #1
 80053e2:	b29a      	uxth	r2, r3
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80053e8:	e011      	b.n	800540e <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80053ea:	f7fd f8d3 	bl	8002594 <HAL_GetTick>
 80053ee:	4602      	mov	r2, r0
 80053f0:	69bb      	ldr	r3, [r7, #24]
 80053f2:	1ad3      	subs	r3, r2, r3
 80053f4:	683a      	ldr	r2, [r7, #0]
 80053f6:	429a      	cmp	r2, r3
 80053f8:	d803      	bhi.n	8005402 <HAL_SPI_Transmit+0x16c>
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005400:	d102      	bne.n	8005408 <HAL_SPI_Transmit+0x172>
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d102      	bne.n	800540e <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8005408:	2303      	movs	r3, #3
 800540a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800540c:	e0a4      	b.n	8005558 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005412:	b29b      	uxth	r3, r3
 8005414:	2b00      	cmp	r3, #0
 8005416:	d1ce      	bne.n	80053b6 <HAL_SPI_Transmit+0x120>
 8005418:	e07c      	b.n	8005514 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	685b      	ldr	r3, [r3, #4]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d002      	beq.n	8005428 <HAL_SPI_Transmit+0x192>
 8005422:	8afb      	ldrh	r3, [r7, #22]
 8005424:	2b01      	cmp	r3, #1
 8005426:	d170      	bne.n	800550a <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800542c:	b29b      	uxth	r3, r3
 800542e:	2b01      	cmp	r3, #1
 8005430:	d912      	bls.n	8005458 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005436:	881a      	ldrh	r2, [r3, #0]
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005442:	1c9a      	adds	r2, r3, #2
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800544c:	b29b      	uxth	r3, r3
 800544e:	3b02      	subs	r3, #2
 8005450:	b29a      	uxth	r2, r3
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005456:	e058      	b.n	800550a <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	330c      	adds	r3, #12
 8005462:	7812      	ldrb	r2, [r2, #0]
 8005464:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800546a:	1c5a      	adds	r2, r3, #1
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005474:	b29b      	uxth	r3, r3
 8005476:	3b01      	subs	r3, #1
 8005478:	b29a      	uxth	r2, r3
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800547e:	e044      	b.n	800550a <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	689b      	ldr	r3, [r3, #8]
 8005486:	f003 0302 	and.w	r3, r3, #2
 800548a:	2b02      	cmp	r3, #2
 800548c:	d12b      	bne.n	80054e6 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005492:	b29b      	uxth	r3, r3
 8005494:	2b01      	cmp	r3, #1
 8005496:	d912      	bls.n	80054be <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800549c:	881a      	ldrh	r2, [r3, #0]
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054a8:	1c9a      	adds	r2, r3, #2
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054b2:	b29b      	uxth	r3, r3
 80054b4:	3b02      	subs	r3, #2
 80054b6:	b29a      	uxth	r2, r3
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	87da      	strh	r2, [r3, #62]	; 0x3e
 80054bc:	e025      	b.n	800550a <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	330c      	adds	r3, #12
 80054c8:	7812      	ldrb	r2, [r2, #0]
 80054ca:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054d0:	1c5a      	adds	r2, r3, #1
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054da:	b29b      	uxth	r3, r3
 80054dc:	3b01      	subs	r3, #1
 80054de:	b29a      	uxth	r2, r3
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80054e4:	e011      	b.n	800550a <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80054e6:	f7fd f855 	bl	8002594 <HAL_GetTick>
 80054ea:	4602      	mov	r2, r0
 80054ec:	69bb      	ldr	r3, [r7, #24]
 80054ee:	1ad3      	subs	r3, r2, r3
 80054f0:	683a      	ldr	r2, [r7, #0]
 80054f2:	429a      	cmp	r2, r3
 80054f4:	d803      	bhi.n	80054fe <HAL_SPI_Transmit+0x268>
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80054fc:	d102      	bne.n	8005504 <HAL_SPI_Transmit+0x26e>
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d102      	bne.n	800550a <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8005504:	2303      	movs	r3, #3
 8005506:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005508:	e026      	b.n	8005558 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800550e:	b29b      	uxth	r3, r3
 8005510:	2b00      	cmp	r3, #0
 8005512:	d1b5      	bne.n	8005480 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005514:	69ba      	ldr	r2, [r7, #24]
 8005516:	6839      	ldr	r1, [r7, #0]
 8005518:	68f8      	ldr	r0, [r7, #12]
 800551a:	f000 fce3 	bl	8005ee4 <SPI_EndRxTxTransaction>
 800551e:	4603      	mov	r3, r0
 8005520:	2b00      	cmp	r3, #0
 8005522:	d002      	beq.n	800552a <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	2220      	movs	r2, #32
 8005528:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	689b      	ldr	r3, [r3, #8]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d10a      	bne.n	8005548 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005532:	2300      	movs	r3, #0
 8005534:	613b      	str	r3, [r7, #16]
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	68db      	ldr	r3, [r3, #12]
 800553c:	613b      	str	r3, [r7, #16]
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	689b      	ldr	r3, [r3, #8]
 8005544:	613b      	str	r3, [r7, #16]
 8005546:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800554c:	2b00      	cmp	r3, #0
 800554e:	d002      	beq.n	8005556 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8005550:	2301      	movs	r3, #1
 8005552:	77fb      	strb	r3, [r7, #31]
 8005554:	e000      	b.n	8005558 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8005556:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	2201      	movs	r2, #1
 800555c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	2200      	movs	r2, #0
 8005564:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005568:	7ffb      	ldrb	r3, [r7, #31]
}
 800556a:	4618      	mov	r0, r3
 800556c:	3720      	adds	r7, #32
 800556e:	46bd      	mov	sp, r7
 8005570:	bd80      	pop	{r7, pc}

08005572 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005572:	b580      	push	{r7, lr}
 8005574:	b088      	sub	sp, #32
 8005576:	af02      	add	r7, sp, #8
 8005578:	60f8      	str	r0, [r7, #12]
 800557a:	60b9      	str	r1, [r7, #8]
 800557c:	603b      	str	r3, [r7, #0]
 800557e:	4613      	mov	r3, r2
 8005580:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005582:	2300      	movs	r3, #0
 8005584:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	685b      	ldr	r3, [r3, #4]
 800558a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800558e:	d112      	bne.n	80055b6 <HAL_SPI_Receive+0x44>
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	689b      	ldr	r3, [r3, #8]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d10e      	bne.n	80055b6 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	2204      	movs	r2, #4
 800559c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80055a0:	88fa      	ldrh	r2, [r7, #6]
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	9300      	str	r3, [sp, #0]
 80055a6:	4613      	mov	r3, r2
 80055a8:	68ba      	ldr	r2, [r7, #8]
 80055aa:	68b9      	ldr	r1, [r7, #8]
 80055ac:	68f8      	ldr	r0, [r7, #12]
 80055ae:	f000 f910 	bl	80057d2 <HAL_SPI_TransmitReceive>
 80055b2:	4603      	mov	r3, r0
 80055b4:	e109      	b.n	80057ca <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80055bc:	2b01      	cmp	r3, #1
 80055be:	d101      	bne.n	80055c4 <HAL_SPI_Receive+0x52>
 80055c0:	2302      	movs	r3, #2
 80055c2:	e102      	b.n	80057ca <HAL_SPI_Receive+0x258>
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	2201      	movs	r2, #1
 80055c8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80055cc:	f7fc ffe2 	bl	8002594 <HAL_GetTick>
 80055d0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80055d8:	b2db      	uxtb	r3, r3
 80055da:	2b01      	cmp	r3, #1
 80055dc:	d002      	beq.n	80055e4 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80055de:	2302      	movs	r3, #2
 80055e0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80055e2:	e0e9      	b.n	80057b8 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d002      	beq.n	80055f0 <HAL_SPI_Receive+0x7e>
 80055ea:	88fb      	ldrh	r3, [r7, #6]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d102      	bne.n	80055f6 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80055f0:	2301      	movs	r3, #1
 80055f2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80055f4:	e0e0      	b.n	80057b8 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	2204      	movs	r2, #4
 80055fa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	2200      	movs	r2, #0
 8005602:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	68ba      	ldr	r2, [r7, #8]
 8005608:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	88fa      	ldrh	r2, [r7, #6]
 800560e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	88fa      	ldrh	r2, [r7, #6]
 8005616:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	2200      	movs	r2, #0
 800561e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	2200      	movs	r2, #0
 8005624:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	2200      	movs	r2, #0
 800562a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	2200      	movs	r2, #0
 8005630:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	2200      	movs	r2, #0
 8005636:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	68db      	ldr	r3, [r3, #12]
 800563c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005640:	d908      	bls.n	8005654 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	685a      	ldr	r2, [r3, #4]
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005650:	605a      	str	r2, [r3, #4]
 8005652:	e007      	b.n	8005664 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	685a      	ldr	r2, [r3, #4]
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005662:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	689b      	ldr	r3, [r3, #8]
 8005668:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800566c:	d10f      	bne.n	800568e <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	681a      	ldr	r2, [r3, #0]
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800567c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	681a      	ldr	r2, [r3, #0]
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800568c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005698:	2b40      	cmp	r3, #64	; 0x40
 800569a:	d007      	beq.n	80056ac <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	681a      	ldr	r2, [r3, #0]
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80056aa:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	68db      	ldr	r3, [r3, #12]
 80056b0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80056b4:	d867      	bhi.n	8005786 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80056b6:	e030      	b.n	800571a <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	689b      	ldr	r3, [r3, #8]
 80056be:	f003 0301 	and.w	r3, r3, #1
 80056c2:	2b01      	cmp	r3, #1
 80056c4:	d117      	bne.n	80056f6 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f103 020c 	add.w	r2, r3, #12
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056d2:	7812      	ldrb	r2, [r2, #0]
 80056d4:	b2d2      	uxtb	r2, r2
 80056d6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056dc:	1c5a      	adds	r2, r3, #1
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80056e8:	b29b      	uxth	r3, r3
 80056ea:	3b01      	subs	r3, #1
 80056ec:	b29a      	uxth	r2, r3
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80056f4:	e011      	b.n	800571a <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80056f6:	f7fc ff4d 	bl	8002594 <HAL_GetTick>
 80056fa:	4602      	mov	r2, r0
 80056fc:	693b      	ldr	r3, [r7, #16]
 80056fe:	1ad3      	subs	r3, r2, r3
 8005700:	683a      	ldr	r2, [r7, #0]
 8005702:	429a      	cmp	r2, r3
 8005704:	d803      	bhi.n	800570e <HAL_SPI_Receive+0x19c>
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800570c:	d102      	bne.n	8005714 <HAL_SPI_Receive+0x1a2>
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d102      	bne.n	800571a <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8005714:	2303      	movs	r3, #3
 8005716:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005718:	e04e      	b.n	80057b8 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005720:	b29b      	uxth	r3, r3
 8005722:	2b00      	cmp	r3, #0
 8005724:	d1c8      	bne.n	80056b8 <HAL_SPI_Receive+0x146>
 8005726:	e034      	b.n	8005792 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	689b      	ldr	r3, [r3, #8]
 800572e:	f003 0301 	and.w	r3, r3, #1
 8005732:	2b01      	cmp	r3, #1
 8005734:	d115      	bne.n	8005762 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	68da      	ldr	r2, [r3, #12]
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005740:	b292      	uxth	r2, r2
 8005742:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005748:	1c9a      	adds	r2, r3, #2
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005754:	b29b      	uxth	r3, r3
 8005756:	3b01      	subs	r3, #1
 8005758:	b29a      	uxth	r2, r3
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005760:	e011      	b.n	8005786 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005762:	f7fc ff17 	bl	8002594 <HAL_GetTick>
 8005766:	4602      	mov	r2, r0
 8005768:	693b      	ldr	r3, [r7, #16]
 800576a:	1ad3      	subs	r3, r2, r3
 800576c:	683a      	ldr	r2, [r7, #0]
 800576e:	429a      	cmp	r2, r3
 8005770:	d803      	bhi.n	800577a <HAL_SPI_Receive+0x208>
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005778:	d102      	bne.n	8005780 <HAL_SPI_Receive+0x20e>
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d102      	bne.n	8005786 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8005780:	2303      	movs	r3, #3
 8005782:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005784:	e018      	b.n	80057b8 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800578c:	b29b      	uxth	r3, r3
 800578e:	2b00      	cmp	r3, #0
 8005790:	d1ca      	bne.n	8005728 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005792:	693a      	ldr	r2, [r7, #16]
 8005794:	6839      	ldr	r1, [r7, #0]
 8005796:	68f8      	ldr	r0, [r7, #12]
 8005798:	f000 fb4c 	bl	8005e34 <SPI_EndRxTransaction>
 800579c:	4603      	mov	r3, r0
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d002      	beq.n	80057a8 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	2220      	movs	r2, #32
 80057a6:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d002      	beq.n	80057b6 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 80057b0:	2301      	movs	r3, #1
 80057b2:	75fb      	strb	r3, [r7, #23]
 80057b4:	e000      	b.n	80057b8 <HAL_SPI_Receive+0x246>
  }

error :
 80057b6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	2201      	movs	r2, #1
 80057bc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	2200      	movs	r2, #0
 80057c4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80057c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80057ca:	4618      	mov	r0, r3
 80057cc:	3718      	adds	r7, #24
 80057ce:	46bd      	mov	sp, r7
 80057d0:	bd80      	pop	{r7, pc}

080057d2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80057d2:	b580      	push	{r7, lr}
 80057d4:	b08a      	sub	sp, #40	; 0x28
 80057d6:	af00      	add	r7, sp, #0
 80057d8:	60f8      	str	r0, [r7, #12]
 80057da:	60b9      	str	r1, [r7, #8]
 80057dc:	607a      	str	r2, [r7, #4]
 80057de:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80057e0:	2301      	movs	r3, #1
 80057e2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80057e4:	2300      	movs	r3, #0
 80057e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80057f0:	2b01      	cmp	r3, #1
 80057f2:	d101      	bne.n	80057f8 <HAL_SPI_TransmitReceive+0x26>
 80057f4:	2302      	movs	r3, #2
 80057f6:	e1fb      	b.n	8005bf0 <HAL_SPI_TransmitReceive+0x41e>
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	2201      	movs	r2, #1
 80057fc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005800:	f7fc fec8 	bl	8002594 <HAL_GetTick>
 8005804:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800580c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	685b      	ldr	r3, [r3, #4]
 8005812:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8005814:	887b      	ldrh	r3, [r7, #2]
 8005816:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8005818:	887b      	ldrh	r3, [r7, #2]
 800581a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800581c:	7efb      	ldrb	r3, [r7, #27]
 800581e:	2b01      	cmp	r3, #1
 8005820:	d00e      	beq.n	8005840 <HAL_SPI_TransmitReceive+0x6e>
 8005822:	697b      	ldr	r3, [r7, #20]
 8005824:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005828:	d106      	bne.n	8005838 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	689b      	ldr	r3, [r3, #8]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d102      	bne.n	8005838 <HAL_SPI_TransmitReceive+0x66>
 8005832:	7efb      	ldrb	r3, [r7, #27]
 8005834:	2b04      	cmp	r3, #4
 8005836:	d003      	beq.n	8005840 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8005838:	2302      	movs	r3, #2
 800583a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800583e:	e1cd      	b.n	8005bdc <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d005      	beq.n	8005852 <HAL_SPI_TransmitReceive+0x80>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d002      	beq.n	8005852 <HAL_SPI_TransmitReceive+0x80>
 800584c:	887b      	ldrh	r3, [r7, #2]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d103      	bne.n	800585a <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8005852:	2301      	movs	r3, #1
 8005854:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005858:	e1c0      	b.n	8005bdc <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005860:	b2db      	uxtb	r3, r3
 8005862:	2b04      	cmp	r3, #4
 8005864:	d003      	beq.n	800586e <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	2205      	movs	r2, #5
 800586a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	2200      	movs	r2, #0
 8005872:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	687a      	ldr	r2, [r7, #4]
 8005878:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	887a      	ldrh	r2, [r7, #2]
 800587e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	887a      	ldrh	r2, [r7, #2]
 8005886:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	68ba      	ldr	r2, [r7, #8]
 800588e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	887a      	ldrh	r2, [r7, #2]
 8005894:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	887a      	ldrh	r2, [r7, #2]
 800589a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	2200      	movs	r2, #0
 80058a0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	2200      	movs	r2, #0
 80058a6:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	68db      	ldr	r3, [r3, #12]
 80058ac:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80058b0:	d802      	bhi.n	80058b8 <HAL_SPI_TransmitReceive+0xe6>
 80058b2:	8a3b      	ldrh	r3, [r7, #16]
 80058b4:	2b01      	cmp	r3, #1
 80058b6:	d908      	bls.n	80058ca <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	685a      	ldr	r2, [r3, #4]
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80058c6:	605a      	str	r2, [r3, #4]
 80058c8:	e007      	b.n	80058da <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	685a      	ldr	r2, [r3, #4]
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80058d8:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058e4:	2b40      	cmp	r3, #64	; 0x40
 80058e6:	d007      	beq.n	80058f8 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	681a      	ldr	r2, [r3, #0]
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80058f6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	68db      	ldr	r3, [r3, #12]
 80058fc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005900:	d97c      	bls.n	80059fc <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	685b      	ldr	r3, [r3, #4]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d002      	beq.n	8005910 <HAL_SPI_TransmitReceive+0x13e>
 800590a:	8a7b      	ldrh	r3, [r7, #18]
 800590c:	2b01      	cmp	r3, #1
 800590e:	d169      	bne.n	80059e4 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005914:	881a      	ldrh	r2, [r3, #0]
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005920:	1c9a      	adds	r2, r3, #2
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800592a:	b29b      	uxth	r3, r3
 800592c:	3b01      	subs	r3, #1
 800592e:	b29a      	uxth	r2, r3
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005934:	e056      	b.n	80059e4 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	689b      	ldr	r3, [r3, #8]
 800593c:	f003 0302 	and.w	r3, r3, #2
 8005940:	2b02      	cmp	r3, #2
 8005942:	d11b      	bne.n	800597c <HAL_SPI_TransmitReceive+0x1aa>
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005948:	b29b      	uxth	r3, r3
 800594a:	2b00      	cmp	r3, #0
 800594c:	d016      	beq.n	800597c <HAL_SPI_TransmitReceive+0x1aa>
 800594e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005950:	2b01      	cmp	r3, #1
 8005952:	d113      	bne.n	800597c <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005958:	881a      	ldrh	r2, [r3, #0]
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005964:	1c9a      	adds	r2, r3, #2
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800596e:	b29b      	uxth	r3, r3
 8005970:	3b01      	subs	r3, #1
 8005972:	b29a      	uxth	r2, r3
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005978:	2300      	movs	r3, #0
 800597a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	689b      	ldr	r3, [r3, #8]
 8005982:	f003 0301 	and.w	r3, r3, #1
 8005986:	2b01      	cmp	r3, #1
 8005988:	d11c      	bne.n	80059c4 <HAL_SPI_TransmitReceive+0x1f2>
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005990:	b29b      	uxth	r3, r3
 8005992:	2b00      	cmp	r3, #0
 8005994:	d016      	beq.n	80059c4 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	68da      	ldr	r2, [r3, #12]
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059a0:	b292      	uxth	r2, r2
 80059a2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059a8:	1c9a      	adds	r2, r3, #2
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80059b4:	b29b      	uxth	r3, r3
 80059b6:	3b01      	subs	r3, #1
 80059b8:	b29a      	uxth	r2, r3
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80059c0:	2301      	movs	r3, #1
 80059c2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80059c4:	f7fc fde6 	bl	8002594 <HAL_GetTick>
 80059c8:	4602      	mov	r2, r0
 80059ca:	69fb      	ldr	r3, [r7, #28]
 80059cc:	1ad3      	subs	r3, r2, r3
 80059ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059d0:	429a      	cmp	r2, r3
 80059d2:	d807      	bhi.n	80059e4 <HAL_SPI_TransmitReceive+0x212>
 80059d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80059da:	d003      	beq.n	80059e4 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80059dc:	2303      	movs	r3, #3
 80059de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80059e2:	e0fb      	b.n	8005bdc <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059e8:	b29b      	uxth	r3, r3
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d1a3      	bne.n	8005936 <HAL_SPI_TransmitReceive+0x164>
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80059f4:	b29b      	uxth	r3, r3
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d19d      	bne.n	8005936 <HAL_SPI_TransmitReceive+0x164>
 80059fa:	e0df      	b.n	8005bbc <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	685b      	ldr	r3, [r3, #4]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d003      	beq.n	8005a0c <HAL_SPI_TransmitReceive+0x23a>
 8005a04:	8a7b      	ldrh	r3, [r7, #18]
 8005a06:	2b01      	cmp	r3, #1
 8005a08:	f040 80cb 	bne.w	8005ba2 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a10:	b29b      	uxth	r3, r3
 8005a12:	2b01      	cmp	r3, #1
 8005a14:	d912      	bls.n	8005a3c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a1a:	881a      	ldrh	r2, [r3, #0]
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a26:	1c9a      	adds	r2, r3, #2
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a30:	b29b      	uxth	r3, r3
 8005a32:	3b02      	subs	r3, #2
 8005a34:	b29a      	uxth	r2, r3
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005a3a:	e0b2      	b.n	8005ba2 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	330c      	adds	r3, #12
 8005a46:	7812      	ldrb	r2, [r2, #0]
 8005a48:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a4e:	1c5a      	adds	r2, r3, #1
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a58:	b29b      	uxth	r3, r3
 8005a5a:	3b01      	subs	r3, #1
 8005a5c:	b29a      	uxth	r2, r3
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005a62:	e09e      	b.n	8005ba2 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	689b      	ldr	r3, [r3, #8]
 8005a6a:	f003 0302 	and.w	r3, r3, #2
 8005a6e:	2b02      	cmp	r3, #2
 8005a70:	d134      	bne.n	8005adc <HAL_SPI_TransmitReceive+0x30a>
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a76:	b29b      	uxth	r3, r3
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d02f      	beq.n	8005adc <HAL_SPI_TransmitReceive+0x30a>
 8005a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a7e:	2b01      	cmp	r3, #1
 8005a80:	d12c      	bne.n	8005adc <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a86:	b29b      	uxth	r3, r3
 8005a88:	2b01      	cmp	r3, #1
 8005a8a:	d912      	bls.n	8005ab2 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a90:	881a      	ldrh	r2, [r3, #0]
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a9c:	1c9a      	adds	r2, r3, #2
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005aa6:	b29b      	uxth	r3, r3
 8005aa8:	3b02      	subs	r3, #2
 8005aaa:	b29a      	uxth	r2, r3
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005ab0:	e012      	b.n	8005ad8 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	330c      	adds	r3, #12
 8005abc:	7812      	ldrb	r2, [r2, #0]
 8005abe:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ac4:	1c5a      	adds	r2, r3, #1
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ace:	b29b      	uxth	r3, r3
 8005ad0:	3b01      	subs	r3, #1
 8005ad2:	b29a      	uxth	r2, r3
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005ad8:	2300      	movs	r3, #0
 8005ada:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	689b      	ldr	r3, [r3, #8]
 8005ae2:	f003 0301 	and.w	r3, r3, #1
 8005ae6:	2b01      	cmp	r3, #1
 8005ae8:	d148      	bne.n	8005b7c <HAL_SPI_TransmitReceive+0x3aa>
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005af0:	b29b      	uxth	r3, r3
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d042      	beq.n	8005b7c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005afc:	b29b      	uxth	r3, r3
 8005afe:	2b01      	cmp	r3, #1
 8005b00:	d923      	bls.n	8005b4a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	68da      	ldr	r2, [r3, #12]
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b0c:	b292      	uxth	r2, r2
 8005b0e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b14:	1c9a      	adds	r2, r3, #2
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005b20:	b29b      	uxth	r3, r3
 8005b22:	3b02      	subs	r3, #2
 8005b24:	b29a      	uxth	r2, r3
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005b32:	b29b      	uxth	r3, r3
 8005b34:	2b01      	cmp	r3, #1
 8005b36:	d81f      	bhi.n	8005b78 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	685a      	ldr	r2, [r3, #4]
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005b46:	605a      	str	r2, [r3, #4]
 8005b48:	e016      	b.n	8005b78 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f103 020c 	add.w	r2, r3, #12
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b56:	7812      	ldrb	r2, [r2, #0]
 8005b58:	b2d2      	uxtb	r2, r2
 8005b5a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b60:	1c5a      	adds	r2, r3, #1
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005b6c:	b29b      	uxth	r3, r3
 8005b6e:	3b01      	subs	r3, #1
 8005b70:	b29a      	uxth	r2, r3
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005b78:	2301      	movs	r3, #1
 8005b7a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005b7c:	f7fc fd0a 	bl	8002594 <HAL_GetTick>
 8005b80:	4602      	mov	r2, r0
 8005b82:	69fb      	ldr	r3, [r7, #28]
 8005b84:	1ad3      	subs	r3, r2, r3
 8005b86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b88:	429a      	cmp	r2, r3
 8005b8a:	d803      	bhi.n	8005b94 <HAL_SPI_TransmitReceive+0x3c2>
 8005b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b8e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b92:	d102      	bne.n	8005b9a <HAL_SPI_TransmitReceive+0x3c8>
 8005b94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d103      	bne.n	8005ba2 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8005b9a:	2303      	movs	r3, #3
 8005b9c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005ba0:	e01c      	b.n	8005bdc <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ba6:	b29b      	uxth	r3, r3
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	f47f af5b 	bne.w	8005a64 <HAL_SPI_TransmitReceive+0x292>
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005bb4:	b29b      	uxth	r3, r3
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	f47f af54 	bne.w	8005a64 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005bbc:	69fa      	ldr	r2, [r7, #28]
 8005bbe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005bc0:	68f8      	ldr	r0, [r7, #12]
 8005bc2:	f000 f98f 	bl	8005ee4 <SPI_EndRxTxTransaction>
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d006      	beq.n	8005bda <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8005bcc:	2301      	movs	r3, #1
 8005bce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	2220      	movs	r2, #32
 8005bd6:	661a      	str	r2, [r3, #96]	; 0x60
 8005bd8:	e000      	b.n	8005bdc <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8005bda:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	2201      	movs	r2, #1
 8005be0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	2200      	movs	r2, #0
 8005be8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005bec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	3728      	adds	r7, #40	; 0x28
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	bd80      	pop	{r7, pc}

08005bf8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b088      	sub	sp, #32
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	60f8      	str	r0, [r7, #12]
 8005c00:	60b9      	str	r1, [r7, #8]
 8005c02:	603b      	str	r3, [r7, #0]
 8005c04:	4613      	mov	r3, r2
 8005c06:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005c08:	f7fc fcc4 	bl	8002594 <HAL_GetTick>
 8005c0c:	4602      	mov	r2, r0
 8005c0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c10:	1a9b      	subs	r3, r3, r2
 8005c12:	683a      	ldr	r2, [r7, #0]
 8005c14:	4413      	add	r3, r2
 8005c16:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005c18:	f7fc fcbc 	bl	8002594 <HAL_GetTick>
 8005c1c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005c1e:	4b39      	ldr	r3, [pc, #228]	; (8005d04 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	015b      	lsls	r3, r3, #5
 8005c24:	0d1b      	lsrs	r3, r3, #20
 8005c26:	69fa      	ldr	r2, [r7, #28]
 8005c28:	fb02 f303 	mul.w	r3, r2, r3
 8005c2c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005c2e:	e054      	b.n	8005cda <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005c36:	d050      	beq.n	8005cda <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005c38:	f7fc fcac 	bl	8002594 <HAL_GetTick>
 8005c3c:	4602      	mov	r2, r0
 8005c3e:	69bb      	ldr	r3, [r7, #24]
 8005c40:	1ad3      	subs	r3, r2, r3
 8005c42:	69fa      	ldr	r2, [r7, #28]
 8005c44:	429a      	cmp	r2, r3
 8005c46:	d902      	bls.n	8005c4e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005c48:	69fb      	ldr	r3, [r7, #28]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d13d      	bne.n	8005cca <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	685a      	ldr	r2, [r3, #4]
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005c5c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	685b      	ldr	r3, [r3, #4]
 8005c62:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c66:	d111      	bne.n	8005c8c <SPI_WaitFlagStateUntilTimeout+0x94>
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	689b      	ldr	r3, [r3, #8]
 8005c6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c70:	d004      	beq.n	8005c7c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	689b      	ldr	r3, [r3, #8]
 8005c76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c7a:	d107      	bne.n	8005c8c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	681a      	ldr	r2, [r3, #0]
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c8a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c94:	d10f      	bne.n	8005cb6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	681a      	ldr	r2, [r3, #0]
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005ca4:	601a      	str	r2, [r3, #0]
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	681a      	ldr	r2, [r3, #0]
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005cb4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	2201      	movs	r2, #1
 8005cba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005cc6:	2303      	movs	r3, #3
 8005cc8:	e017      	b.n	8005cfa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005cca:	697b      	ldr	r3, [r7, #20]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d101      	bne.n	8005cd4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005cd4:	697b      	ldr	r3, [r7, #20]
 8005cd6:	3b01      	subs	r3, #1
 8005cd8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	689a      	ldr	r2, [r3, #8]
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	4013      	ands	r3, r2
 8005ce4:	68ba      	ldr	r2, [r7, #8]
 8005ce6:	429a      	cmp	r2, r3
 8005ce8:	bf0c      	ite	eq
 8005cea:	2301      	moveq	r3, #1
 8005cec:	2300      	movne	r3, #0
 8005cee:	b2db      	uxtb	r3, r3
 8005cf0:	461a      	mov	r2, r3
 8005cf2:	79fb      	ldrb	r3, [r7, #7]
 8005cf4:	429a      	cmp	r2, r3
 8005cf6:	d19b      	bne.n	8005c30 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005cf8:	2300      	movs	r3, #0
}
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	3720      	adds	r7, #32
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	bd80      	pop	{r7, pc}
 8005d02:	bf00      	nop
 8005d04:	20000000 	.word	0x20000000

08005d08 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b08a      	sub	sp, #40	; 0x28
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	60f8      	str	r0, [r7, #12]
 8005d10:	60b9      	str	r1, [r7, #8]
 8005d12:	607a      	str	r2, [r7, #4]
 8005d14:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005d16:	2300      	movs	r3, #0
 8005d18:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005d1a:	f7fc fc3b 	bl	8002594 <HAL_GetTick>
 8005d1e:	4602      	mov	r2, r0
 8005d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d22:	1a9b      	subs	r3, r3, r2
 8005d24:	683a      	ldr	r2, [r7, #0]
 8005d26:	4413      	add	r3, r2
 8005d28:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8005d2a:	f7fc fc33 	bl	8002594 <HAL_GetTick>
 8005d2e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	330c      	adds	r3, #12
 8005d36:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005d38:	4b3d      	ldr	r3, [pc, #244]	; (8005e30 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005d3a:	681a      	ldr	r2, [r3, #0]
 8005d3c:	4613      	mov	r3, r2
 8005d3e:	009b      	lsls	r3, r3, #2
 8005d40:	4413      	add	r3, r2
 8005d42:	00da      	lsls	r2, r3, #3
 8005d44:	1ad3      	subs	r3, r2, r3
 8005d46:	0d1b      	lsrs	r3, r3, #20
 8005d48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d4a:	fb02 f303 	mul.w	r3, r2, r3
 8005d4e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005d50:	e060      	b.n	8005e14 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005d58:	d107      	bne.n	8005d6a <SPI_WaitFifoStateUntilTimeout+0x62>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d104      	bne.n	8005d6a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005d60:	69fb      	ldr	r3, [r7, #28]
 8005d62:	781b      	ldrb	r3, [r3, #0]
 8005d64:	b2db      	uxtb	r3, r3
 8005d66:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005d68:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005d70:	d050      	beq.n	8005e14 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005d72:	f7fc fc0f 	bl	8002594 <HAL_GetTick>
 8005d76:	4602      	mov	r2, r0
 8005d78:	6a3b      	ldr	r3, [r7, #32]
 8005d7a:	1ad3      	subs	r3, r2, r3
 8005d7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d7e:	429a      	cmp	r2, r3
 8005d80:	d902      	bls.n	8005d88 <SPI_WaitFifoStateUntilTimeout+0x80>
 8005d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d13d      	bne.n	8005e04 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	685a      	ldr	r2, [r3, #4]
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005d96:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	685b      	ldr	r3, [r3, #4]
 8005d9c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005da0:	d111      	bne.n	8005dc6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	689b      	ldr	r3, [r3, #8]
 8005da6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005daa:	d004      	beq.n	8005db6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	689b      	ldr	r3, [r3, #8]
 8005db0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005db4:	d107      	bne.n	8005dc6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	681a      	ldr	r2, [r3, #0]
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005dc4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005dce:	d10f      	bne.n	8005df0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	681a      	ldr	r2, [r3, #0]
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005dde:	601a      	str	r2, [r3, #0]
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	681a      	ldr	r2, [r3, #0]
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005dee:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	2201      	movs	r2, #1
 8005df4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005e00:	2303      	movs	r3, #3
 8005e02:	e010      	b.n	8005e26 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005e04:	69bb      	ldr	r3, [r7, #24]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d101      	bne.n	8005e0e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8005e0e:	69bb      	ldr	r3, [r7, #24]
 8005e10:	3b01      	subs	r3, #1
 8005e12:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	689a      	ldr	r2, [r3, #8]
 8005e1a:	68bb      	ldr	r3, [r7, #8]
 8005e1c:	4013      	ands	r3, r2
 8005e1e:	687a      	ldr	r2, [r7, #4]
 8005e20:	429a      	cmp	r2, r3
 8005e22:	d196      	bne.n	8005d52 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005e24:	2300      	movs	r3, #0
}
 8005e26:	4618      	mov	r0, r3
 8005e28:	3728      	adds	r7, #40	; 0x28
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	bd80      	pop	{r7, pc}
 8005e2e:	bf00      	nop
 8005e30:	20000000 	.word	0x20000000

08005e34 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b086      	sub	sp, #24
 8005e38:	af02      	add	r7, sp, #8
 8005e3a:	60f8      	str	r0, [r7, #12]
 8005e3c:	60b9      	str	r1, [r7, #8]
 8005e3e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	685b      	ldr	r3, [r3, #4]
 8005e44:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e48:	d111      	bne.n	8005e6e <SPI_EndRxTransaction+0x3a>
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	689b      	ldr	r3, [r3, #8]
 8005e4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e52:	d004      	beq.n	8005e5e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	689b      	ldr	r3, [r3, #8]
 8005e58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e5c:	d107      	bne.n	8005e6e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	681a      	ldr	r2, [r3, #0]
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e6c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	9300      	str	r3, [sp, #0]
 8005e72:	68bb      	ldr	r3, [r7, #8]
 8005e74:	2200      	movs	r2, #0
 8005e76:	2180      	movs	r1, #128	; 0x80
 8005e78:	68f8      	ldr	r0, [r7, #12]
 8005e7a:	f7ff febd 	bl	8005bf8 <SPI_WaitFlagStateUntilTimeout>
 8005e7e:	4603      	mov	r3, r0
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d007      	beq.n	8005e94 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e88:	f043 0220 	orr.w	r2, r3, #32
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005e90:	2303      	movs	r3, #3
 8005e92:	e023      	b.n	8005edc <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	685b      	ldr	r3, [r3, #4]
 8005e98:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e9c:	d11d      	bne.n	8005eda <SPI_EndRxTransaction+0xa6>
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	689b      	ldr	r3, [r3, #8]
 8005ea2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ea6:	d004      	beq.n	8005eb2 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	689b      	ldr	r3, [r3, #8]
 8005eac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005eb0:	d113      	bne.n	8005eda <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	9300      	str	r3, [sp, #0]
 8005eb6:	68bb      	ldr	r3, [r7, #8]
 8005eb8:	2200      	movs	r2, #0
 8005eba:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005ebe:	68f8      	ldr	r0, [r7, #12]
 8005ec0:	f7ff ff22 	bl	8005d08 <SPI_WaitFifoStateUntilTimeout>
 8005ec4:	4603      	mov	r3, r0
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d007      	beq.n	8005eda <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ece:	f043 0220 	orr.w	r2, r3, #32
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8005ed6:	2303      	movs	r3, #3
 8005ed8:	e000      	b.n	8005edc <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8005eda:	2300      	movs	r3, #0
}
 8005edc:	4618      	mov	r0, r3
 8005ede:	3710      	adds	r7, #16
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	bd80      	pop	{r7, pc}

08005ee4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b086      	sub	sp, #24
 8005ee8:	af02      	add	r7, sp, #8
 8005eea:	60f8      	str	r0, [r7, #12]
 8005eec:	60b9      	str	r1, [r7, #8]
 8005eee:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	9300      	str	r3, [sp, #0]
 8005ef4:	68bb      	ldr	r3, [r7, #8]
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005efc:	68f8      	ldr	r0, [r7, #12]
 8005efe:	f7ff ff03 	bl	8005d08 <SPI_WaitFifoStateUntilTimeout>
 8005f02:	4603      	mov	r3, r0
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d007      	beq.n	8005f18 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f0c:	f043 0220 	orr.w	r2, r3, #32
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005f14:	2303      	movs	r3, #3
 8005f16:	e027      	b.n	8005f68 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	9300      	str	r3, [sp, #0]
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	2200      	movs	r2, #0
 8005f20:	2180      	movs	r1, #128	; 0x80
 8005f22:	68f8      	ldr	r0, [r7, #12]
 8005f24:	f7ff fe68 	bl	8005bf8 <SPI_WaitFlagStateUntilTimeout>
 8005f28:	4603      	mov	r3, r0
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d007      	beq.n	8005f3e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f32:	f043 0220 	orr.w	r2, r3, #32
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005f3a:	2303      	movs	r3, #3
 8005f3c:	e014      	b.n	8005f68 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	9300      	str	r3, [sp, #0]
 8005f42:	68bb      	ldr	r3, [r7, #8]
 8005f44:	2200      	movs	r2, #0
 8005f46:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005f4a:	68f8      	ldr	r0, [r7, #12]
 8005f4c:	f7ff fedc 	bl	8005d08 <SPI_WaitFifoStateUntilTimeout>
 8005f50:	4603      	mov	r3, r0
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d007      	beq.n	8005f66 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f5a:	f043 0220 	orr.w	r2, r3, #32
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005f62:	2303      	movs	r3, #3
 8005f64:	e000      	b.n	8005f68 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005f66:	2300      	movs	r3, #0
}
 8005f68:	4618      	mov	r0, r3
 8005f6a:	3710      	adds	r7, #16
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	bd80      	pop	{r7, pc}

08005f70 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b082      	sub	sp, #8
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d101      	bne.n	8005f82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005f7e:	2301      	movs	r3, #1
 8005f80:	e040      	b.n	8006004 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d106      	bne.n	8005f98 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005f92:	6878      	ldr	r0, [r7, #4]
 8005f94:	f7fc f906 	bl	80021a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2224      	movs	r2, #36	; 0x24
 8005f9c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	681a      	ldr	r2, [r3, #0]
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f022 0201 	bic.w	r2, r2, #1
 8005fac:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005fae:	6878      	ldr	r0, [r7, #4]
 8005fb0:	f000 f8c0 	bl	8006134 <UART_SetConfig>
 8005fb4:	4603      	mov	r3, r0
 8005fb6:	2b01      	cmp	r3, #1
 8005fb8:	d101      	bne.n	8005fbe <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005fba:	2301      	movs	r3, #1
 8005fbc:	e022      	b.n	8006004 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d002      	beq.n	8005fcc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005fc6:	6878      	ldr	r0, [r7, #4]
 8005fc8:	f000 fb0e 	bl	80065e8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	685a      	ldr	r2, [r3, #4]
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005fda:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	689a      	ldr	r2, [r3, #8]
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005fea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	681a      	ldr	r2, [r3, #0]
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f042 0201 	orr.w	r2, r2, #1
 8005ffa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005ffc:	6878      	ldr	r0, [r7, #4]
 8005ffe:	f000 fb95 	bl	800672c <UART_CheckIdleState>
 8006002:	4603      	mov	r3, r0
}
 8006004:	4618      	mov	r0, r3
 8006006:	3708      	adds	r7, #8
 8006008:	46bd      	mov	sp, r7
 800600a:	bd80      	pop	{r7, pc}

0800600c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b08a      	sub	sp, #40	; 0x28
 8006010:	af02      	add	r7, sp, #8
 8006012:	60f8      	str	r0, [r7, #12]
 8006014:	60b9      	str	r1, [r7, #8]
 8006016:	603b      	str	r3, [r7, #0]
 8006018:	4613      	mov	r3, r2
 800601a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006020:	2b20      	cmp	r3, #32
 8006022:	f040 8082 	bne.w	800612a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006026:	68bb      	ldr	r3, [r7, #8]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d002      	beq.n	8006032 <HAL_UART_Transmit+0x26>
 800602c:	88fb      	ldrh	r3, [r7, #6]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d101      	bne.n	8006036 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006032:	2301      	movs	r3, #1
 8006034:	e07a      	b.n	800612c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800603c:	2b01      	cmp	r3, #1
 800603e:	d101      	bne.n	8006044 <HAL_UART_Transmit+0x38>
 8006040:	2302      	movs	r3, #2
 8006042:	e073      	b.n	800612c <HAL_UART_Transmit+0x120>
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	2201      	movs	r2, #1
 8006048:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	2200      	movs	r2, #0
 8006050:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	2221      	movs	r2, #33	; 0x21
 8006058:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800605a:	f7fc fa9b 	bl	8002594 <HAL_GetTick>
 800605e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	88fa      	ldrh	r2, [r7, #6]
 8006064:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	88fa      	ldrh	r2, [r7, #6]
 800606c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	689b      	ldr	r3, [r3, #8]
 8006074:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006078:	d108      	bne.n	800608c <HAL_UART_Transmit+0x80>
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	691b      	ldr	r3, [r3, #16]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d104      	bne.n	800608c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8006082:	2300      	movs	r3, #0
 8006084:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	61bb      	str	r3, [r7, #24]
 800608a:	e003      	b.n	8006094 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006090:	2300      	movs	r3, #0
 8006092:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	2200      	movs	r2, #0
 8006098:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800609c:	e02d      	b.n	80060fa <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	9300      	str	r3, [sp, #0]
 80060a2:	697b      	ldr	r3, [r7, #20]
 80060a4:	2200      	movs	r2, #0
 80060a6:	2180      	movs	r1, #128	; 0x80
 80060a8:	68f8      	ldr	r0, [r7, #12]
 80060aa:	f000 fb88 	bl	80067be <UART_WaitOnFlagUntilTimeout>
 80060ae:	4603      	mov	r3, r0
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d001      	beq.n	80060b8 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80060b4:	2303      	movs	r3, #3
 80060b6:	e039      	b.n	800612c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80060b8:	69fb      	ldr	r3, [r7, #28]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d10b      	bne.n	80060d6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80060be:	69bb      	ldr	r3, [r7, #24]
 80060c0:	881a      	ldrh	r2, [r3, #0]
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80060ca:	b292      	uxth	r2, r2
 80060cc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80060ce:	69bb      	ldr	r3, [r7, #24]
 80060d0:	3302      	adds	r3, #2
 80060d2:	61bb      	str	r3, [r7, #24]
 80060d4:	e008      	b.n	80060e8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80060d6:	69fb      	ldr	r3, [r7, #28]
 80060d8:	781a      	ldrb	r2, [r3, #0]
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	b292      	uxth	r2, r2
 80060e0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80060e2:	69fb      	ldr	r3, [r7, #28]
 80060e4:	3301      	adds	r3, #1
 80060e6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80060ee:	b29b      	uxth	r3, r3
 80060f0:	3b01      	subs	r3, #1
 80060f2:	b29a      	uxth	r2, r3
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006100:	b29b      	uxth	r3, r3
 8006102:	2b00      	cmp	r3, #0
 8006104:	d1cb      	bne.n	800609e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	9300      	str	r3, [sp, #0]
 800610a:	697b      	ldr	r3, [r7, #20]
 800610c:	2200      	movs	r2, #0
 800610e:	2140      	movs	r1, #64	; 0x40
 8006110:	68f8      	ldr	r0, [r7, #12]
 8006112:	f000 fb54 	bl	80067be <UART_WaitOnFlagUntilTimeout>
 8006116:	4603      	mov	r3, r0
 8006118:	2b00      	cmp	r3, #0
 800611a:	d001      	beq.n	8006120 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800611c:	2303      	movs	r3, #3
 800611e:	e005      	b.n	800612c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	2220      	movs	r2, #32
 8006124:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8006126:	2300      	movs	r3, #0
 8006128:	e000      	b.n	800612c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800612a:	2302      	movs	r3, #2
  }
}
 800612c:	4618      	mov	r0, r3
 800612e:	3720      	adds	r7, #32
 8006130:	46bd      	mov	sp, r7
 8006132:	bd80      	pop	{r7, pc}

08006134 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006134:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006138:	b08a      	sub	sp, #40	; 0x28
 800613a:	af00      	add	r7, sp, #0
 800613c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800613e:	2300      	movs	r3, #0
 8006140:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	689a      	ldr	r2, [r3, #8]
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	691b      	ldr	r3, [r3, #16]
 800614c:	431a      	orrs	r2, r3
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	695b      	ldr	r3, [r3, #20]
 8006152:	431a      	orrs	r2, r3
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	69db      	ldr	r3, [r3, #28]
 8006158:	4313      	orrs	r3, r2
 800615a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	681a      	ldr	r2, [r3, #0]
 8006162:	4b9e      	ldr	r3, [pc, #632]	; (80063dc <UART_SetConfig+0x2a8>)
 8006164:	4013      	ands	r3, r2
 8006166:	68fa      	ldr	r2, [r7, #12]
 8006168:	6812      	ldr	r2, [r2, #0]
 800616a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800616c:	430b      	orrs	r3, r1
 800616e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	685b      	ldr	r3, [r3, #4]
 8006176:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	68da      	ldr	r2, [r3, #12]
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	430a      	orrs	r2, r1
 8006184:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	699b      	ldr	r3, [r3, #24]
 800618a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4a93      	ldr	r2, [pc, #588]	; (80063e0 <UART_SetConfig+0x2ac>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d004      	beq.n	80061a0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	6a1b      	ldr	r3, [r3, #32]
 800619a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800619c:	4313      	orrs	r3, r2
 800619e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	689b      	ldr	r3, [r3, #8]
 80061a6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061b0:	430a      	orrs	r2, r1
 80061b2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	4a8a      	ldr	r2, [pc, #552]	; (80063e4 <UART_SetConfig+0x2b0>)
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d126      	bne.n	800620c <UART_SetConfig+0xd8>
 80061be:	4b8a      	ldr	r3, [pc, #552]	; (80063e8 <UART_SetConfig+0x2b4>)
 80061c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061c4:	f003 0303 	and.w	r3, r3, #3
 80061c8:	2b03      	cmp	r3, #3
 80061ca:	d81b      	bhi.n	8006204 <UART_SetConfig+0xd0>
 80061cc:	a201      	add	r2, pc, #4	; (adr r2, 80061d4 <UART_SetConfig+0xa0>)
 80061ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061d2:	bf00      	nop
 80061d4:	080061e5 	.word	0x080061e5
 80061d8:	080061f5 	.word	0x080061f5
 80061dc:	080061ed 	.word	0x080061ed
 80061e0:	080061fd 	.word	0x080061fd
 80061e4:	2301      	movs	r3, #1
 80061e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80061ea:	e0ab      	b.n	8006344 <UART_SetConfig+0x210>
 80061ec:	2302      	movs	r3, #2
 80061ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80061f2:	e0a7      	b.n	8006344 <UART_SetConfig+0x210>
 80061f4:	2304      	movs	r3, #4
 80061f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80061fa:	e0a3      	b.n	8006344 <UART_SetConfig+0x210>
 80061fc:	2308      	movs	r3, #8
 80061fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006202:	e09f      	b.n	8006344 <UART_SetConfig+0x210>
 8006204:	2310      	movs	r3, #16
 8006206:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800620a:	e09b      	b.n	8006344 <UART_SetConfig+0x210>
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	4a76      	ldr	r2, [pc, #472]	; (80063ec <UART_SetConfig+0x2b8>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d138      	bne.n	8006288 <UART_SetConfig+0x154>
 8006216:	4b74      	ldr	r3, [pc, #464]	; (80063e8 <UART_SetConfig+0x2b4>)
 8006218:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800621c:	f003 030c 	and.w	r3, r3, #12
 8006220:	2b0c      	cmp	r3, #12
 8006222:	d82d      	bhi.n	8006280 <UART_SetConfig+0x14c>
 8006224:	a201      	add	r2, pc, #4	; (adr r2, 800622c <UART_SetConfig+0xf8>)
 8006226:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800622a:	bf00      	nop
 800622c:	08006261 	.word	0x08006261
 8006230:	08006281 	.word	0x08006281
 8006234:	08006281 	.word	0x08006281
 8006238:	08006281 	.word	0x08006281
 800623c:	08006271 	.word	0x08006271
 8006240:	08006281 	.word	0x08006281
 8006244:	08006281 	.word	0x08006281
 8006248:	08006281 	.word	0x08006281
 800624c:	08006269 	.word	0x08006269
 8006250:	08006281 	.word	0x08006281
 8006254:	08006281 	.word	0x08006281
 8006258:	08006281 	.word	0x08006281
 800625c:	08006279 	.word	0x08006279
 8006260:	2300      	movs	r3, #0
 8006262:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006266:	e06d      	b.n	8006344 <UART_SetConfig+0x210>
 8006268:	2302      	movs	r3, #2
 800626a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800626e:	e069      	b.n	8006344 <UART_SetConfig+0x210>
 8006270:	2304      	movs	r3, #4
 8006272:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006276:	e065      	b.n	8006344 <UART_SetConfig+0x210>
 8006278:	2308      	movs	r3, #8
 800627a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800627e:	e061      	b.n	8006344 <UART_SetConfig+0x210>
 8006280:	2310      	movs	r3, #16
 8006282:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006286:	e05d      	b.n	8006344 <UART_SetConfig+0x210>
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	4a58      	ldr	r2, [pc, #352]	; (80063f0 <UART_SetConfig+0x2bc>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d125      	bne.n	80062de <UART_SetConfig+0x1aa>
 8006292:	4b55      	ldr	r3, [pc, #340]	; (80063e8 <UART_SetConfig+0x2b4>)
 8006294:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006298:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800629c:	2b30      	cmp	r3, #48	; 0x30
 800629e:	d016      	beq.n	80062ce <UART_SetConfig+0x19a>
 80062a0:	2b30      	cmp	r3, #48	; 0x30
 80062a2:	d818      	bhi.n	80062d6 <UART_SetConfig+0x1a2>
 80062a4:	2b20      	cmp	r3, #32
 80062a6:	d00a      	beq.n	80062be <UART_SetConfig+0x18a>
 80062a8:	2b20      	cmp	r3, #32
 80062aa:	d814      	bhi.n	80062d6 <UART_SetConfig+0x1a2>
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d002      	beq.n	80062b6 <UART_SetConfig+0x182>
 80062b0:	2b10      	cmp	r3, #16
 80062b2:	d008      	beq.n	80062c6 <UART_SetConfig+0x192>
 80062b4:	e00f      	b.n	80062d6 <UART_SetConfig+0x1a2>
 80062b6:	2300      	movs	r3, #0
 80062b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80062bc:	e042      	b.n	8006344 <UART_SetConfig+0x210>
 80062be:	2302      	movs	r3, #2
 80062c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80062c4:	e03e      	b.n	8006344 <UART_SetConfig+0x210>
 80062c6:	2304      	movs	r3, #4
 80062c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80062cc:	e03a      	b.n	8006344 <UART_SetConfig+0x210>
 80062ce:	2308      	movs	r3, #8
 80062d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80062d4:	e036      	b.n	8006344 <UART_SetConfig+0x210>
 80062d6:	2310      	movs	r3, #16
 80062d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80062dc:	e032      	b.n	8006344 <UART_SetConfig+0x210>
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	4a3f      	ldr	r2, [pc, #252]	; (80063e0 <UART_SetConfig+0x2ac>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d12a      	bne.n	800633e <UART_SetConfig+0x20a>
 80062e8:	4b3f      	ldr	r3, [pc, #252]	; (80063e8 <UART_SetConfig+0x2b4>)
 80062ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062ee:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80062f2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80062f6:	d01a      	beq.n	800632e <UART_SetConfig+0x1fa>
 80062f8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80062fc:	d81b      	bhi.n	8006336 <UART_SetConfig+0x202>
 80062fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006302:	d00c      	beq.n	800631e <UART_SetConfig+0x1ea>
 8006304:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006308:	d815      	bhi.n	8006336 <UART_SetConfig+0x202>
 800630a:	2b00      	cmp	r3, #0
 800630c:	d003      	beq.n	8006316 <UART_SetConfig+0x1e2>
 800630e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006312:	d008      	beq.n	8006326 <UART_SetConfig+0x1f2>
 8006314:	e00f      	b.n	8006336 <UART_SetConfig+0x202>
 8006316:	2300      	movs	r3, #0
 8006318:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800631c:	e012      	b.n	8006344 <UART_SetConfig+0x210>
 800631e:	2302      	movs	r3, #2
 8006320:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006324:	e00e      	b.n	8006344 <UART_SetConfig+0x210>
 8006326:	2304      	movs	r3, #4
 8006328:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800632c:	e00a      	b.n	8006344 <UART_SetConfig+0x210>
 800632e:	2308      	movs	r3, #8
 8006330:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006334:	e006      	b.n	8006344 <UART_SetConfig+0x210>
 8006336:	2310      	movs	r3, #16
 8006338:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800633c:	e002      	b.n	8006344 <UART_SetConfig+0x210>
 800633e:	2310      	movs	r3, #16
 8006340:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	4a25      	ldr	r2, [pc, #148]	; (80063e0 <UART_SetConfig+0x2ac>)
 800634a:	4293      	cmp	r3, r2
 800634c:	f040 808a 	bne.w	8006464 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006350:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006354:	2b08      	cmp	r3, #8
 8006356:	d824      	bhi.n	80063a2 <UART_SetConfig+0x26e>
 8006358:	a201      	add	r2, pc, #4	; (adr r2, 8006360 <UART_SetConfig+0x22c>)
 800635a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800635e:	bf00      	nop
 8006360:	08006385 	.word	0x08006385
 8006364:	080063a3 	.word	0x080063a3
 8006368:	0800638d 	.word	0x0800638d
 800636c:	080063a3 	.word	0x080063a3
 8006370:	08006393 	.word	0x08006393
 8006374:	080063a3 	.word	0x080063a3
 8006378:	080063a3 	.word	0x080063a3
 800637c:	080063a3 	.word	0x080063a3
 8006380:	0800639b 	.word	0x0800639b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006384:	f7fe fb1c 	bl	80049c0 <HAL_RCC_GetPCLK1Freq>
 8006388:	61f8      	str	r0, [r7, #28]
        break;
 800638a:	e010      	b.n	80063ae <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800638c:	4b19      	ldr	r3, [pc, #100]	; (80063f4 <UART_SetConfig+0x2c0>)
 800638e:	61fb      	str	r3, [r7, #28]
        break;
 8006390:	e00d      	b.n	80063ae <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006392:	f7fe fa7d 	bl	8004890 <HAL_RCC_GetSysClockFreq>
 8006396:	61f8      	str	r0, [r7, #28]
        break;
 8006398:	e009      	b.n	80063ae <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800639a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800639e:	61fb      	str	r3, [r7, #28]
        break;
 80063a0:	e005      	b.n	80063ae <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 80063a2:	2300      	movs	r3, #0
 80063a4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80063a6:	2301      	movs	r3, #1
 80063a8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80063ac:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80063ae:	69fb      	ldr	r3, [r7, #28]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	f000 8109 	beq.w	80065c8 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	685a      	ldr	r2, [r3, #4]
 80063ba:	4613      	mov	r3, r2
 80063bc:	005b      	lsls	r3, r3, #1
 80063be:	4413      	add	r3, r2
 80063c0:	69fa      	ldr	r2, [r7, #28]
 80063c2:	429a      	cmp	r2, r3
 80063c4:	d305      	bcc.n	80063d2 <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	685b      	ldr	r3, [r3, #4]
 80063ca:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80063cc:	69fa      	ldr	r2, [r7, #28]
 80063ce:	429a      	cmp	r2, r3
 80063d0:	d912      	bls.n	80063f8 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 80063d2:	2301      	movs	r3, #1
 80063d4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80063d8:	e0f6      	b.n	80065c8 <UART_SetConfig+0x494>
 80063da:	bf00      	nop
 80063dc:	efff69f3 	.word	0xefff69f3
 80063e0:	40008000 	.word	0x40008000
 80063e4:	40013800 	.word	0x40013800
 80063e8:	40021000 	.word	0x40021000
 80063ec:	40004400 	.word	0x40004400
 80063f0:	40004800 	.word	0x40004800
 80063f4:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80063f8:	69fb      	ldr	r3, [r7, #28]
 80063fa:	2200      	movs	r2, #0
 80063fc:	461c      	mov	r4, r3
 80063fe:	4615      	mov	r5, r2
 8006400:	f04f 0200 	mov.w	r2, #0
 8006404:	f04f 0300 	mov.w	r3, #0
 8006408:	022b      	lsls	r3, r5, #8
 800640a:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800640e:	0222      	lsls	r2, r4, #8
 8006410:	68f9      	ldr	r1, [r7, #12]
 8006412:	6849      	ldr	r1, [r1, #4]
 8006414:	0849      	lsrs	r1, r1, #1
 8006416:	2000      	movs	r0, #0
 8006418:	4688      	mov	r8, r1
 800641a:	4681      	mov	r9, r0
 800641c:	eb12 0a08 	adds.w	sl, r2, r8
 8006420:	eb43 0b09 	adc.w	fp, r3, r9
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	685b      	ldr	r3, [r3, #4]
 8006428:	2200      	movs	r2, #0
 800642a:	603b      	str	r3, [r7, #0]
 800642c:	607a      	str	r2, [r7, #4]
 800642e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006432:	4650      	mov	r0, sl
 8006434:	4659      	mov	r1, fp
 8006436:	f7fa fbb7 	bl	8000ba8 <__aeabi_uldivmod>
 800643a:	4602      	mov	r2, r0
 800643c:	460b      	mov	r3, r1
 800643e:	4613      	mov	r3, r2
 8006440:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006442:	69bb      	ldr	r3, [r7, #24]
 8006444:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006448:	d308      	bcc.n	800645c <UART_SetConfig+0x328>
 800644a:	69bb      	ldr	r3, [r7, #24]
 800644c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006450:	d204      	bcs.n	800645c <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	69ba      	ldr	r2, [r7, #24]
 8006458:	60da      	str	r2, [r3, #12]
 800645a:	e0b5      	b.n	80065c8 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 800645c:	2301      	movs	r3, #1
 800645e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006462:	e0b1      	b.n	80065c8 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	69db      	ldr	r3, [r3, #28]
 8006468:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800646c:	d15d      	bne.n	800652a <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 800646e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006472:	2b08      	cmp	r3, #8
 8006474:	d827      	bhi.n	80064c6 <UART_SetConfig+0x392>
 8006476:	a201      	add	r2, pc, #4	; (adr r2, 800647c <UART_SetConfig+0x348>)
 8006478:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800647c:	080064a1 	.word	0x080064a1
 8006480:	080064a9 	.word	0x080064a9
 8006484:	080064b1 	.word	0x080064b1
 8006488:	080064c7 	.word	0x080064c7
 800648c:	080064b7 	.word	0x080064b7
 8006490:	080064c7 	.word	0x080064c7
 8006494:	080064c7 	.word	0x080064c7
 8006498:	080064c7 	.word	0x080064c7
 800649c:	080064bf 	.word	0x080064bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80064a0:	f7fe fa8e 	bl	80049c0 <HAL_RCC_GetPCLK1Freq>
 80064a4:	61f8      	str	r0, [r7, #28]
        break;
 80064a6:	e014      	b.n	80064d2 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80064a8:	f7fe faa0 	bl	80049ec <HAL_RCC_GetPCLK2Freq>
 80064ac:	61f8      	str	r0, [r7, #28]
        break;
 80064ae:	e010      	b.n	80064d2 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80064b0:	4b4c      	ldr	r3, [pc, #304]	; (80065e4 <UART_SetConfig+0x4b0>)
 80064b2:	61fb      	str	r3, [r7, #28]
        break;
 80064b4:	e00d      	b.n	80064d2 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80064b6:	f7fe f9eb 	bl	8004890 <HAL_RCC_GetSysClockFreq>
 80064ba:	61f8      	str	r0, [r7, #28]
        break;
 80064bc:	e009      	b.n	80064d2 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80064be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80064c2:	61fb      	str	r3, [r7, #28]
        break;
 80064c4:	e005      	b.n	80064d2 <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 80064c6:	2300      	movs	r3, #0
 80064c8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80064ca:	2301      	movs	r3, #1
 80064cc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80064d0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80064d2:	69fb      	ldr	r3, [r7, #28]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d077      	beq.n	80065c8 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80064d8:	69fb      	ldr	r3, [r7, #28]
 80064da:	005a      	lsls	r2, r3, #1
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	685b      	ldr	r3, [r3, #4]
 80064e0:	085b      	lsrs	r3, r3, #1
 80064e2:	441a      	add	r2, r3
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	685b      	ldr	r3, [r3, #4]
 80064e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80064ec:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80064ee:	69bb      	ldr	r3, [r7, #24]
 80064f0:	2b0f      	cmp	r3, #15
 80064f2:	d916      	bls.n	8006522 <UART_SetConfig+0x3ee>
 80064f4:	69bb      	ldr	r3, [r7, #24]
 80064f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064fa:	d212      	bcs.n	8006522 <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80064fc:	69bb      	ldr	r3, [r7, #24]
 80064fe:	b29b      	uxth	r3, r3
 8006500:	f023 030f 	bic.w	r3, r3, #15
 8006504:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006506:	69bb      	ldr	r3, [r7, #24]
 8006508:	085b      	lsrs	r3, r3, #1
 800650a:	b29b      	uxth	r3, r3
 800650c:	f003 0307 	and.w	r3, r3, #7
 8006510:	b29a      	uxth	r2, r3
 8006512:	8afb      	ldrh	r3, [r7, #22]
 8006514:	4313      	orrs	r3, r2
 8006516:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	8afa      	ldrh	r2, [r7, #22]
 800651e:	60da      	str	r2, [r3, #12]
 8006520:	e052      	b.n	80065c8 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8006522:	2301      	movs	r3, #1
 8006524:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006528:	e04e      	b.n	80065c8 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 800652a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800652e:	2b08      	cmp	r3, #8
 8006530:	d827      	bhi.n	8006582 <UART_SetConfig+0x44e>
 8006532:	a201      	add	r2, pc, #4	; (adr r2, 8006538 <UART_SetConfig+0x404>)
 8006534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006538:	0800655d 	.word	0x0800655d
 800653c:	08006565 	.word	0x08006565
 8006540:	0800656d 	.word	0x0800656d
 8006544:	08006583 	.word	0x08006583
 8006548:	08006573 	.word	0x08006573
 800654c:	08006583 	.word	0x08006583
 8006550:	08006583 	.word	0x08006583
 8006554:	08006583 	.word	0x08006583
 8006558:	0800657b 	.word	0x0800657b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800655c:	f7fe fa30 	bl	80049c0 <HAL_RCC_GetPCLK1Freq>
 8006560:	61f8      	str	r0, [r7, #28]
        break;
 8006562:	e014      	b.n	800658e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006564:	f7fe fa42 	bl	80049ec <HAL_RCC_GetPCLK2Freq>
 8006568:	61f8      	str	r0, [r7, #28]
        break;
 800656a:	e010      	b.n	800658e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800656c:	4b1d      	ldr	r3, [pc, #116]	; (80065e4 <UART_SetConfig+0x4b0>)
 800656e:	61fb      	str	r3, [r7, #28]
        break;
 8006570:	e00d      	b.n	800658e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006572:	f7fe f98d 	bl	8004890 <HAL_RCC_GetSysClockFreq>
 8006576:	61f8      	str	r0, [r7, #28]
        break;
 8006578:	e009      	b.n	800658e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800657a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800657e:	61fb      	str	r3, [r7, #28]
        break;
 8006580:	e005      	b.n	800658e <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 8006582:	2300      	movs	r3, #0
 8006584:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006586:	2301      	movs	r3, #1
 8006588:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800658c:	bf00      	nop
    }

    if (pclk != 0U)
 800658e:	69fb      	ldr	r3, [r7, #28]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d019      	beq.n	80065c8 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	685b      	ldr	r3, [r3, #4]
 8006598:	085a      	lsrs	r2, r3, #1
 800659a:	69fb      	ldr	r3, [r7, #28]
 800659c:	441a      	add	r2, r3
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	685b      	ldr	r3, [r3, #4]
 80065a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80065a6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80065a8:	69bb      	ldr	r3, [r7, #24]
 80065aa:	2b0f      	cmp	r3, #15
 80065ac:	d909      	bls.n	80065c2 <UART_SetConfig+0x48e>
 80065ae:	69bb      	ldr	r3, [r7, #24]
 80065b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065b4:	d205      	bcs.n	80065c2 <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80065b6:	69bb      	ldr	r3, [r7, #24]
 80065b8:	b29a      	uxth	r2, r3
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	60da      	str	r2, [r3, #12]
 80065c0:	e002      	b.n	80065c8 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 80065c2:	2301      	movs	r3, #1
 80065c4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	2200      	movs	r2, #0
 80065cc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	2200      	movs	r2, #0
 80065d2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80065d4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80065d8:	4618      	mov	r0, r3
 80065da:	3728      	adds	r7, #40	; 0x28
 80065dc:	46bd      	mov	sp, r7
 80065de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80065e2:	bf00      	nop
 80065e4:	00f42400 	.word	0x00f42400

080065e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80065e8:	b480      	push	{r7}
 80065ea:	b083      	sub	sp, #12
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065f4:	f003 0301 	and.w	r3, r3, #1
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d00a      	beq.n	8006612 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	685b      	ldr	r3, [r3, #4]
 8006602:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	430a      	orrs	r2, r1
 8006610:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006616:	f003 0302 	and.w	r3, r3, #2
 800661a:	2b00      	cmp	r3, #0
 800661c:	d00a      	beq.n	8006634 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	685b      	ldr	r3, [r3, #4]
 8006624:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	430a      	orrs	r2, r1
 8006632:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006638:	f003 0304 	and.w	r3, r3, #4
 800663c:	2b00      	cmp	r3, #0
 800663e:	d00a      	beq.n	8006656 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	685b      	ldr	r3, [r3, #4]
 8006646:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	430a      	orrs	r2, r1
 8006654:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800665a:	f003 0308 	and.w	r3, r3, #8
 800665e:	2b00      	cmp	r3, #0
 8006660:	d00a      	beq.n	8006678 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	685b      	ldr	r3, [r3, #4]
 8006668:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	430a      	orrs	r2, r1
 8006676:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800667c:	f003 0310 	and.w	r3, r3, #16
 8006680:	2b00      	cmp	r3, #0
 8006682:	d00a      	beq.n	800669a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	689b      	ldr	r3, [r3, #8]
 800668a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	430a      	orrs	r2, r1
 8006698:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800669e:	f003 0320 	and.w	r3, r3, #32
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d00a      	beq.n	80066bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	689b      	ldr	r3, [r3, #8]
 80066ac:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	430a      	orrs	r2, r1
 80066ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d01a      	beq.n	80066fe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	685b      	ldr	r3, [r3, #4]
 80066ce:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	430a      	orrs	r2, r1
 80066dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80066e6:	d10a      	bne.n	80066fe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	685b      	ldr	r3, [r3, #4]
 80066ee:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	430a      	orrs	r2, r1
 80066fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006702:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006706:	2b00      	cmp	r3, #0
 8006708:	d00a      	beq.n	8006720 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	685b      	ldr	r3, [r3, #4]
 8006710:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	430a      	orrs	r2, r1
 800671e:	605a      	str	r2, [r3, #4]
  }
}
 8006720:	bf00      	nop
 8006722:	370c      	adds	r7, #12
 8006724:	46bd      	mov	sp, r7
 8006726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672a:	4770      	bx	lr

0800672c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800672c:	b580      	push	{r7, lr}
 800672e:	b086      	sub	sp, #24
 8006730:	af02      	add	r7, sp, #8
 8006732:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2200      	movs	r2, #0
 8006738:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800673c:	f7fb ff2a 	bl	8002594 <HAL_GetTick>
 8006740:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f003 0308 	and.w	r3, r3, #8
 800674c:	2b08      	cmp	r3, #8
 800674e:	d10e      	bne.n	800676e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006750:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006754:	9300      	str	r3, [sp, #0]
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	2200      	movs	r2, #0
 800675a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800675e:	6878      	ldr	r0, [r7, #4]
 8006760:	f000 f82d 	bl	80067be <UART_WaitOnFlagUntilTimeout>
 8006764:	4603      	mov	r3, r0
 8006766:	2b00      	cmp	r3, #0
 8006768:	d001      	beq.n	800676e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800676a:	2303      	movs	r3, #3
 800676c:	e023      	b.n	80067b6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f003 0304 	and.w	r3, r3, #4
 8006778:	2b04      	cmp	r3, #4
 800677a:	d10e      	bne.n	800679a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800677c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006780:	9300      	str	r3, [sp, #0]
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	2200      	movs	r2, #0
 8006786:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800678a:	6878      	ldr	r0, [r7, #4]
 800678c:	f000 f817 	bl	80067be <UART_WaitOnFlagUntilTimeout>
 8006790:	4603      	mov	r3, r0
 8006792:	2b00      	cmp	r3, #0
 8006794:	d001      	beq.n	800679a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006796:	2303      	movs	r3, #3
 8006798:	e00d      	b.n	80067b6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	2220      	movs	r2, #32
 800679e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2220      	movs	r2, #32
 80067a4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	2200      	movs	r2, #0
 80067aa:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2200      	movs	r2, #0
 80067b0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80067b4:	2300      	movs	r3, #0
}
 80067b6:	4618      	mov	r0, r3
 80067b8:	3710      	adds	r7, #16
 80067ba:	46bd      	mov	sp, r7
 80067bc:	bd80      	pop	{r7, pc}

080067be <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80067be:	b580      	push	{r7, lr}
 80067c0:	b09c      	sub	sp, #112	; 0x70
 80067c2:	af00      	add	r7, sp, #0
 80067c4:	60f8      	str	r0, [r7, #12]
 80067c6:	60b9      	str	r1, [r7, #8]
 80067c8:	603b      	str	r3, [r7, #0]
 80067ca:	4613      	mov	r3, r2
 80067cc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80067ce:	e0a5      	b.n	800691c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80067d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80067d6:	f000 80a1 	beq.w	800691c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067da:	f7fb fedb 	bl	8002594 <HAL_GetTick>
 80067de:	4602      	mov	r2, r0
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	1ad3      	subs	r3, r2, r3
 80067e4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80067e6:	429a      	cmp	r2, r3
 80067e8:	d302      	bcc.n	80067f0 <UART_WaitOnFlagUntilTimeout+0x32>
 80067ea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d13e      	bne.n	800686e <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80067f8:	e853 3f00 	ldrex	r3, [r3]
 80067fc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80067fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006800:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006804:	667b      	str	r3, [r7, #100]	; 0x64
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	461a      	mov	r2, r3
 800680c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800680e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006810:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006812:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006814:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006816:	e841 2300 	strex	r3, r2, [r1]
 800681a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800681c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800681e:	2b00      	cmp	r3, #0
 8006820:	d1e6      	bne.n	80067f0 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	3308      	adds	r3, #8
 8006828:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800682a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800682c:	e853 3f00 	ldrex	r3, [r3]
 8006830:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006832:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006834:	f023 0301 	bic.w	r3, r3, #1
 8006838:	663b      	str	r3, [r7, #96]	; 0x60
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	3308      	adds	r3, #8
 8006840:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006842:	64ba      	str	r2, [r7, #72]	; 0x48
 8006844:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006846:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006848:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800684a:	e841 2300 	strex	r3, r2, [r1]
 800684e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006850:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006852:	2b00      	cmp	r3, #0
 8006854:	d1e5      	bne.n	8006822 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	2220      	movs	r2, #32
 800685a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	2220      	movs	r2, #32
 8006860:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	2200      	movs	r2, #0
 8006866:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800686a:	2303      	movs	r3, #3
 800686c:	e067      	b.n	800693e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f003 0304 	and.w	r3, r3, #4
 8006878:	2b00      	cmp	r3, #0
 800687a:	d04f      	beq.n	800691c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	69db      	ldr	r3, [r3, #28]
 8006882:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006886:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800688a:	d147      	bne.n	800691c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006894:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800689c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800689e:	e853 3f00 	ldrex	r3, [r3]
 80068a2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80068a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068a6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80068aa:	66fb      	str	r3, [r7, #108]	; 0x6c
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	461a      	mov	r2, r3
 80068b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068b4:	637b      	str	r3, [r7, #52]	; 0x34
 80068b6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068b8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80068ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80068bc:	e841 2300 	strex	r3, r2, [r1]
 80068c0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80068c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d1e6      	bne.n	8006896 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	3308      	adds	r3, #8
 80068ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068d0:	697b      	ldr	r3, [r7, #20]
 80068d2:	e853 3f00 	ldrex	r3, [r3]
 80068d6:	613b      	str	r3, [r7, #16]
   return(result);
 80068d8:	693b      	ldr	r3, [r7, #16]
 80068da:	f023 0301 	bic.w	r3, r3, #1
 80068de:	66bb      	str	r3, [r7, #104]	; 0x68
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	3308      	adds	r3, #8
 80068e6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80068e8:	623a      	str	r2, [r7, #32]
 80068ea:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068ec:	69f9      	ldr	r1, [r7, #28]
 80068ee:	6a3a      	ldr	r2, [r7, #32]
 80068f0:	e841 2300 	strex	r3, r2, [r1]
 80068f4:	61bb      	str	r3, [r7, #24]
   return(result);
 80068f6:	69bb      	ldr	r3, [r7, #24]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d1e5      	bne.n	80068c8 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	2220      	movs	r2, #32
 8006900:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	2220      	movs	r2, #32
 8006906:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	2220      	movs	r2, #32
 800690c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	2200      	movs	r2, #0
 8006914:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006918:	2303      	movs	r3, #3
 800691a:	e010      	b.n	800693e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	69da      	ldr	r2, [r3, #28]
 8006922:	68bb      	ldr	r3, [r7, #8]
 8006924:	4013      	ands	r3, r2
 8006926:	68ba      	ldr	r2, [r7, #8]
 8006928:	429a      	cmp	r2, r3
 800692a:	bf0c      	ite	eq
 800692c:	2301      	moveq	r3, #1
 800692e:	2300      	movne	r3, #0
 8006930:	b2db      	uxtb	r3, r3
 8006932:	461a      	mov	r2, r3
 8006934:	79fb      	ldrb	r3, [r7, #7]
 8006936:	429a      	cmp	r2, r3
 8006938:	f43f af4a 	beq.w	80067d0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800693c:	2300      	movs	r3, #0
}
 800693e:	4618      	mov	r0, r3
 8006940:	3770      	adds	r7, #112	; 0x70
 8006942:	46bd      	mov	sp, r7
 8006944:	bd80      	pop	{r7, pc}
	...

08006948 <__errno>:
 8006948:	4b01      	ldr	r3, [pc, #4]	; (8006950 <__errno+0x8>)
 800694a:	6818      	ldr	r0, [r3, #0]
 800694c:	4770      	bx	lr
 800694e:	bf00      	nop
 8006950:	2000000c 	.word	0x2000000c

08006954 <__libc_init_array>:
 8006954:	b570      	push	{r4, r5, r6, lr}
 8006956:	4d0d      	ldr	r5, [pc, #52]	; (800698c <__libc_init_array+0x38>)
 8006958:	4c0d      	ldr	r4, [pc, #52]	; (8006990 <__libc_init_array+0x3c>)
 800695a:	1b64      	subs	r4, r4, r5
 800695c:	10a4      	asrs	r4, r4, #2
 800695e:	2600      	movs	r6, #0
 8006960:	42a6      	cmp	r6, r4
 8006962:	d109      	bne.n	8006978 <__libc_init_array+0x24>
 8006964:	4d0b      	ldr	r5, [pc, #44]	; (8006994 <__libc_init_array+0x40>)
 8006966:	4c0c      	ldr	r4, [pc, #48]	; (8006998 <__libc_init_array+0x44>)
 8006968:	f002 fea2 	bl	80096b0 <_init>
 800696c:	1b64      	subs	r4, r4, r5
 800696e:	10a4      	asrs	r4, r4, #2
 8006970:	2600      	movs	r6, #0
 8006972:	42a6      	cmp	r6, r4
 8006974:	d105      	bne.n	8006982 <__libc_init_array+0x2e>
 8006976:	bd70      	pop	{r4, r5, r6, pc}
 8006978:	f855 3b04 	ldr.w	r3, [r5], #4
 800697c:	4798      	blx	r3
 800697e:	3601      	adds	r6, #1
 8006980:	e7ee      	b.n	8006960 <__libc_init_array+0xc>
 8006982:	f855 3b04 	ldr.w	r3, [r5], #4
 8006986:	4798      	blx	r3
 8006988:	3601      	adds	r6, #1
 800698a:	e7f2      	b.n	8006972 <__libc_init_array+0x1e>
 800698c:	08009c2c 	.word	0x08009c2c
 8006990:	08009c2c 	.word	0x08009c2c
 8006994:	08009c2c 	.word	0x08009c2c
 8006998:	08009c30 	.word	0x08009c30

0800699c <memset>:
 800699c:	4402      	add	r2, r0
 800699e:	4603      	mov	r3, r0
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d100      	bne.n	80069a6 <memset+0xa>
 80069a4:	4770      	bx	lr
 80069a6:	f803 1b01 	strb.w	r1, [r3], #1
 80069aa:	e7f9      	b.n	80069a0 <memset+0x4>

080069ac <__cvt>:
 80069ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80069b0:	ec55 4b10 	vmov	r4, r5, d0
 80069b4:	2d00      	cmp	r5, #0
 80069b6:	460e      	mov	r6, r1
 80069b8:	4619      	mov	r1, r3
 80069ba:	462b      	mov	r3, r5
 80069bc:	bfbb      	ittet	lt
 80069be:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80069c2:	461d      	movlt	r5, r3
 80069c4:	2300      	movge	r3, #0
 80069c6:	232d      	movlt	r3, #45	; 0x2d
 80069c8:	700b      	strb	r3, [r1, #0]
 80069ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80069cc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80069d0:	4691      	mov	r9, r2
 80069d2:	f023 0820 	bic.w	r8, r3, #32
 80069d6:	bfbc      	itt	lt
 80069d8:	4622      	movlt	r2, r4
 80069da:	4614      	movlt	r4, r2
 80069dc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80069e0:	d005      	beq.n	80069ee <__cvt+0x42>
 80069e2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80069e6:	d100      	bne.n	80069ea <__cvt+0x3e>
 80069e8:	3601      	adds	r6, #1
 80069ea:	2102      	movs	r1, #2
 80069ec:	e000      	b.n	80069f0 <__cvt+0x44>
 80069ee:	2103      	movs	r1, #3
 80069f0:	ab03      	add	r3, sp, #12
 80069f2:	9301      	str	r3, [sp, #4]
 80069f4:	ab02      	add	r3, sp, #8
 80069f6:	9300      	str	r3, [sp, #0]
 80069f8:	ec45 4b10 	vmov	d0, r4, r5
 80069fc:	4653      	mov	r3, sl
 80069fe:	4632      	mov	r2, r6
 8006a00:	f000 fe1a 	bl	8007638 <_dtoa_r>
 8006a04:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006a08:	4607      	mov	r7, r0
 8006a0a:	d102      	bne.n	8006a12 <__cvt+0x66>
 8006a0c:	f019 0f01 	tst.w	r9, #1
 8006a10:	d022      	beq.n	8006a58 <__cvt+0xac>
 8006a12:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006a16:	eb07 0906 	add.w	r9, r7, r6
 8006a1a:	d110      	bne.n	8006a3e <__cvt+0x92>
 8006a1c:	783b      	ldrb	r3, [r7, #0]
 8006a1e:	2b30      	cmp	r3, #48	; 0x30
 8006a20:	d10a      	bne.n	8006a38 <__cvt+0x8c>
 8006a22:	2200      	movs	r2, #0
 8006a24:	2300      	movs	r3, #0
 8006a26:	4620      	mov	r0, r4
 8006a28:	4629      	mov	r1, r5
 8006a2a:	f7fa f84d 	bl	8000ac8 <__aeabi_dcmpeq>
 8006a2e:	b918      	cbnz	r0, 8006a38 <__cvt+0x8c>
 8006a30:	f1c6 0601 	rsb	r6, r6, #1
 8006a34:	f8ca 6000 	str.w	r6, [sl]
 8006a38:	f8da 3000 	ldr.w	r3, [sl]
 8006a3c:	4499      	add	r9, r3
 8006a3e:	2200      	movs	r2, #0
 8006a40:	2300      	movs	r3, #0
 8006a42:	4620      	mov	r0, r4
 8006a44:	4629      	mov	r1, r5
 8006a46:	f7fa f83f 	bl	8000ac8 <__aeabi_dcmpeq>
 8006a4a:	b108      	cbz	r0, 8006a50 <__cvt+0xa4>
 8006a4c:	f8cd 900c 	str.w	r9, [sp, #12]
 8006a50:	2230      	movs	r2, #48	; 0x30
 8006a52:	9b03      	ldr	r3, [sp, #12]
 8006a54:	454b      	cmp	r3, r9
 8006a56:	d307      	bcc.n	8006a68 <__cvt+0xbc>
 8006a58:	9b03      	ldr	r3, [sp, #12]
 8006a5a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006a5c:	1bdb      	subs	r3, r3, r7
 8006a5e:	4638      	mov	r0, r7
 8006a60:	6013      	str	r3, [r2, #0]
 8006a62:	b004      	add	sp, #16
 8006a64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a68:	1c59      	adds	r1, r3, #1
 8006a6a:	9103      	str	r1, [sp, #12]
 8006a6c:	701a      	strb	r2, [r3, #0]
 8006a6e:	e7f0      	b.n	8006a52 <__cvt+0xa6>

08006a70 <__exponent>:
 8006a70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006a72:	4603      	mov	r3, r0
 8006a74:	2900      	cmp	r1, #0
 8006a76:	bfb8      	it	lt
 8006a78:	4249      	neglt	r1, r1
 8006a7a:	f803 2b02 	strb.w	r2, [r3], #2
 8006a7e:	bfb4      	ite	lt
 8006a80:	222d      	movlt	r2, #45	; 0x2d
 8006a82:	222b      	movge	r2, #43	; 0x2b
 8006a84:	2909      	cmp	r1, #9
 8006a86:	7042      	strb	r2, [r0, #1]
 8006a88:	dd2a      	ble.n	8006ae0 <__exponent+0x70>
 8006a8a:	f10d 0407 	add.w	r4, sp, #7
 8006a8e:	46a4      	mov	ip, r4
 8006a90:	270a      	movs	r7, #10
 8006a92:	46a6      	mov	lr, r4
 8006a94:	460a      	mov	r2, r1
 8006a96:	fb91 f6f7 	sdiv	r6, r1, r7
 8006a9a:	fb07 1516 	mls	r5, r7, r6, r1
 8006a9e:	3530      	adds	r5, #48	; 0x30
 8006aa0:	2a63      	cmp	r2, #99	; 0x63
 8006aa2:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8006aa6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006aaa:	4631      	mov	r1, r6
 8006aac:	dcf1      	bgt.n	8006a92 <__exponent+0x22>
 8006aae:	3130      	adds	r1, #48	; 0x30
 8006ab0:	f1ae 0502 	sub.w	r5, lr, #2
 8006ab4:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006ab8:	1c44      	adds	r4, r0, #1
 8006aba:	4629      	mov	r1, r5
 8006abc:	4561      	cmp	r1, ip
 8006abe:	d30a      	bcc.n	8006ad6 <__exponent+0x66>
 8006ac0:	f10d 0209 	add.w	r2, sp, #9
 8006ac4:	eba2 020e 	sub.w	r2, r2, lr
 8006ac8:	4565      	cmp	r5, ip
 8006aca:	bf88      	it	hi
 8006acc:	2200      	movhi	r2, #0
 8006ace:	4413      	add	r3, r2
 8006ad0:	1a18      	subs	r0, r3, r0
 8006ad2:	b003      	add	sp, #12
 8006ad4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ad6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006ada:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006ade:	e7ed      	b.n	8006abc <__exponent+0x4c>
 8006ae0:	2330      	movs	r3, #48	; 0x30
 8006ae2:	3130      	adds	r1, #48	; 0x30
 8006ae4:	7083      	strb	r3, [r0, #2]
 8006ae6:	70c1      	strb	r1, [r0, #3]
 8006ae8:	1d03      	adds	r3, r0, #4
 8006aea:	e7f1      	b.n	8006ad0 <__exponent+0x60>

08006aec <_printf_float>:
 8006aec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006af0:	ed2d 8b02 	vpush	{d8}
 8006af4:	b08d      	sub	sp, #52	; 0x34
 8006af6:	460c      	mov	r4, r1
 8006af8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006afc:	4616      	mov	r6, r2
 8006afe:	461f      	mov	r7, r3
 8006b00:	4605      	mov	r5, r0
 8006b02:	f001 fd3f 	bl	8008584 <_localeconv_r>
 8006b06:	f8d0 a000 	ldr.w	sl, [r0]
 8006b0a:	4650      	mov	r0, sl
 8006b0c:	f7f9 fb60 	bl	80001d0 <strlen>
 8006b10:	2300      	movs	r3, #0
 8006b12:	930a      	str	r3, [sp, #40]	; 0x28
 8006b14:	6823      	ldr	r3, [r4, #0]
 8006b16:	9305      	str	r3, [sp, #20]
 8006b18:	f8d8 3000 	ldr.w	r3, [r8]
 8006b1c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006b20:	3307      	adds	r3, #7
 8006b22:	f023 0307 	bic.w	r3, r3, #7
 8006b26:	f103 0208 	add.w	r2, r3, #8
 8006b2a:	f8c8 2000 	str.w	r2, [r8]
 8006b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b32:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006b36:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006b3a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006b3e:	9307      	str	r3, [sp, #28]
 8006b40:	f8cd 8018 	str.w	r8, [sp, #24]
 8006b44:	ee08 0a10 	vmov	s16, r0
 8006b48:	4b9f      	ldr	r3, [pc, #636]	; (8006dc8 <_printf_float+0x2dc>)
 8006b4a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006b4e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006b52:	f7f9 ffeb 	bl	8000b2c <__aeabi_dcmpun>
 8006b56:	bb88      	cbnz	r0, 8006bbc <_printf_float+0xd0>
 8006b58:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006b5c:	4b9a      	ldr	r3, [pc, #616]	; (8006dc8 <_printf_float+0x2dc>)
 8006b5e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006b62:	f7f9 ffc5 	bl	8000af0 <__aeabi_dcmple>
 8006b66:	bb48      	cbnz	r0, 8006bbc <_printf_float+0xd0>
 8006b68:	2200      	movs	r2, #0
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	4640      	mov	r0, r8
 8006b6e:	4649      	mov	r1, r9
 8006b70:	f7f9 ffb4 	bl	8000adc <__aeabi_dcmplt>
 8006b74:	b110      	cbz	r0, 8006b7c <_printf_float+0x90>
 8006b76:	232d      	movs	r3, #45	; 0x2d
 8006b78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b7c:	4b93      	ldr	r3, [pc, #588]	; (8006dcc <_printf_float+0x2e0>)
 8006b7e:	4894      	ldr	r0, [pc, #592]	; (8006dd0 <_printf_float+0x2e4>)
 8006b80:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006b84:	bf94      	ite	ls
 8006b86:	4698      	movls	r8, r3
 8006b88:	4680      	movhi	r8, r0
 8006b8a:	2303      	movs	r3, #3
 8006b8c:	6123      	str	r3, [r4, #16]
 8006b8e:	9b05      	ldr	r3, [sp, #20]
 8006b90:	f023 0204 	bic.w	r2, r3, #4
 8006b94:	6022      	str	r2, [r4, #0]
 8006b96:	f04f 0900 	mov.w	r9, #0
 8006b9a:	9700      	str	r7, [sp, #0]
 8006b9c:	4633      	mov	r3, r6
 8006b9e:	aa0b      	add	r2, sp, #44	; 0x2c
 8006ba0:	4621      	mov	r1, r4
 8006ba2:	4628      	mov	r0, r5
 8006ba4:	f000 f9d8 	bl	8006f58 <_printf_common>
 8006ba8:	3001      	adds	r0, #1
 8006baa:	f040 8090 	bne.w	8006cce <_printf_float+0x1e2>
 8006bae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006bb2:	b00d      	add	sp, #52	; 0x34
 8006bb4:	ecbd 8b02 	vpop	{d8}
 8006bb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bbc:	4642      	mov	r2, r8
 8006bbe:	464b      	mov	r3, r9
 8006bc0:	4640      	mov	r0, r8
 8006bc2:	4649      	mov	r1, r9
 8006bc4:	f7f9 ffb2 	bl	8000b2c <__aeabi_dcmpun>
 8006bc8:	b140      	cbz	r0, 8006bdc <_printf_float+0xf0>
 8006bca:	464b      	mov	r3, r9
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	bfbc      	itt	lt
 8006bd0:	232d      	movlt	r3, #45	; 0x2d
 8006bd2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006bd6:	487f      	ldr	r0, [pc, #508]	; (8006dd4 <_printf_float+0x2e8>)
 8006bd8:	4b7f      	ldr	r3, [pc, #508]	; (8006dd8 <_printf_float+0x2ec>)
 8006bda:	e7d1      	b.n	8006b80 <_printf_float+0x94>
 8006bdc:	6863      	ldr	r3, [r4, #4]
 8006bde:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006be2:	9206      	str	r2, [sp, #24]
 8006be4:	1c5a      	adds	r2, r3, #1
 8006be6:	d13f      	bne.n	8006c68 <_printf_float+0x17c>
 8006be8:	2306      	movs	r3, #6
 8006bea:	6063      	str	r3, [r4, #4]
 8006bec:	9b05      	ldr	r3, [sp, #20]
 8006bee:	6861      	ldr	r1, [r4, #4]
 8006bf0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	9303      	str	r3, [sp, #12]
 8006bf8:	ab0a      	add	r3, sp, #40	; 0x28
 8006bfa:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006bfe:	ab09      	add	r3, sp, #36	; 0x24
 8006c00:	ec49 8b10 	vmov	d0, r8, r9
 8006c04:	9300      	str	r3, [sp, #0]
 8006c06:	6022      	str	r2, [r4, #0]
 8006c08:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006c0c:	4628      	mov	r0, r5
 8006c0e:	f7ff fecd 	bl	80069ac <__cvt>
 8006c12:	9b06      	ldr	r3, [sp, #24]
 8006c14:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006c16:	2b47      	cmp	r3, #71	; 0x47
 8006c18:	4680      	mov	r8, r0
 8006c1a:	d108      	bne.n	8006c2e <_printf_float+0x142>
 8006c1c:	1cc8      	adds	r0, r1, #3
 8006c1e:	db02      	blt.n	8006c26 <_printf_float+0x13a>
 8006c20:	6863      	ldr	r3, [r4, #4]
 8006c22:	4299      	cmp	r1, r3
 8006c24:	dd41      	ble.n	8006caa <_printf_float+0x1be>
 8006c26:	f1ab 0b02 	sub.w	fp, fp, #2
 8006c2a:	fa5f fb8b 	uxtb.w	fp, fp
 8006c2e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006c32:	d820      	bhi.n	8006c76 <_printf_float+0x18a>
 8006c34:	3901      	subs	r1, #1
 8006c36:	465a      	mov	r2, fp
 8006c38:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006c3c:	9109      	str	r1, [sp, #36]	; 0x24
 8006c3e:	f7ff ff17 	bl	8006a70 <__exponent>
 8006c42:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006c44:	1813      	adds	r3, r2, r0
 8006c46:	2a01      	cmp	r2, #1
 8006c48:	4681      	mov	r9, r0
 8006c4a:	6123      	str	r3, [r4, #16]
 8006c4c:	dc02      	bgt.n	8006c54 <_printf_float+0x168>
 8006c4e:	6822      	ldr	r2, [r4, #0]
 8006c50:	07d2      	lsls	r2, r2, #31
 8006c52:	d501      	bpl.n	8006c58 <_printf_float+0x16c>
 8006c54:	3301      	adds	r3, #1
 8006c56:	6123      	str	r3, [r4, #16]
 8006c58:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d09c      	beq.n	8006b9a <_printf_float+0xae>
 8006c60:	232d      	movs	r3, #45	; 0x2d
 8006c62:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c66:	e798      	b.n	8006b9a <_printf_float+0xae>
 8006c68:	9a06      	ldr	r2, [sp, #24]
 8006c6a:	2a47      	cmp	r2, #71	; 0x47
 8006c6c:	d1be      	bne.n	8006bec <_printf_float+0x100>
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d1bc      	bne.n	8006bec <_printf_float+0x100>
 8006c72:	2301      	movs	r3, #1
 8006c74:	e7b9      	b.n	8006bea <_printf_float+0xfe>
 8006c76:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006c7a:	d118      	bne.n	8006cae <_printf_float+0x1c2>
 8006c7c:	2900      	cmp	r1, #0
 8006c7e:	6863      	ldr	r3, [r4, #4]
 8006c80:	dd0b      	ble.n	8006c9a <_printf_float+0x1ae>
 8006c82:	6121      	str	r1, [r4, #16]
 8006c84:	b913      	cbnz	r3, 8006c8c <_printf_float+0x1a0>
 8006c86:	6822      	ldr	r2, [r4, #0]
 8006c88:	07d0      	lsls	r0, r2, #31
 8006c8a:	d502      	bpl.n	8006c92 <_printf_float+0x1a6>
 8006c8c:	3301      	adds	r3, #1
 8006c8e:	440b      	add	r3, r1
 8006c90:	6123      	str	r3, [r4, #16]
 8006c92:	65a1      	str	r1, [r4, #88]	; 0x58
 8006c94:	f04f 0900 	mov.w	r9, #0
 8006c98:	e7de      	b.n	8006c58 <_printf_float+0x16c>
 8006c9a:	b913      	cbnz	r3, 8006ca2 <_printf_float+0x1b6>
 8006c9c:	6822      	ldr	r2, [r4, #0]
 8006c9e:	07d2      	lsls	r2, r2, #31
 8006ca0:	d501      	bpl.n	8006ca6 <_printf_float+0x1ba>
 8006ca2:	3302      	adds	r3, #2
 8006ca4:	e7f4      	b.n	8006c90 <_printf_float+0x1a4>
 8006ca6:	2301      	movs	r3, #1
 8006ca8:	e7f2      	b.n	8006c90 <_printf_float+0x1a4>
 8006caa:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006cae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006cb0:	4299      	cmp	r1, r3
 8006cb2:	db05      	blt.n	8006cc0 <_printf_float+0x1d4>
 8006cb4:	6823      	ldr	r3, [r4, #0]
 8006cb6:	6121      	str	r1, [r4, #16]
 8006cb8:	07d8      	lsls	r0, r3, #31
 8006cba:	d5ea      	bpl.n	8006c92 <_printf_float+0x1a6>
 8006cbc:	1c4b      	adds	r3, r1, #1
 8006cbe:	e7e7      	b.n	8006c90 <_printf_float+0x1a4>
 8006cc0:	2900      	cmp	r1, #0
 8006cc2:	bfd4      	ite	le
 8006cc4:	f1c1 0202 	rsble	r2, r1, #2
 8006cc8:	2201      	movgt	r2, #1
 8006cca:	4413      	add	r3, r2
 8006ccc:	e7e0      	b.n	8006c90 <_printf_float+0x1a4>
 8006cce:	6823      	ldr	r3, [r4, #0]
 8006cd0:	055a      	lsls	r2, r3, #21
 8006cd2:	d407      	bmi.n	8006ce4 <_printf_float+0x1f8>
 8006cd4:	6923      	ldr	r3, [r4, #16]
 8006cd6:	4642      	mov	r2, r8
 8006cd8:	4631      	mov	r1, r6
 8006cda:	4628      	mov	r0, r5
 8006cdc:	47b8      	blx	r7
 8006cde:	3001      	adds	r0, #1
 8006ce0:	d12c      	bne.n	8006d3c <_printf_float+0x250>
 8006ce2:	e764      	b.n	8006bae <_printf_float+0xc2>
 8006ce4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006ce8:	f240 80e0 	bls.w	8006eac <_printf_float+0x3c0>
 8006cec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	f7f9 fee8 	bl	8000ac8 <__aeabi_dcmpeq>
 8006cf8:	2800      	cmp	r0, #0
 8006cfa:	d034      	beq.n	8006d66 <_printf_float+0x27a>
 8006cfc:	4a37      	ldr	r2, [pc, #220]	; (8006ddc <_printf_float+0x2f0>)
 8006cfe:	2301      	movs	r3, #1
 8006d00:	4631      	mov	r1, r6
 8006d02:	4628      	mov	r0, r5
 8006d04:	47b8      	blx	r7
 8006d06:	3001      	adds	r0, #1
 8006d08:	f43f af51 	beq.w	8006bae <_printf_float+0xc2>
 8006d0c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006d10:	429a      	cmp	r2, r3
 8006d12:	db02      	blt.n	8006d1a <_printf_float+0x22e>
 8006d14:	6823      	ldr	r3, [r4, #0]
 8006d16:	07d8      	lsls	r0, r3, #31
 8006d18:	d510      	bpl.n	8006d3c <_printf_float+0x250>
 8006d1a:	ee18 3a10 	vmov	r3, s16
 8006d1e:	4652      	mov	r2, sl
 8006d20:	4631      	mov	r1, r6
 8006d22:	4628      	mov	r0, r5
 8006d24:	47b8      	blx	r7
 8006d26:	3001      	adds	r0, #1
 8006d28:	f43f af41 	beq.w	8006bae <_printf_float+0xc2>
 8006d2c:	f04f 0800 	mov.w	r8, #0
 8006d30:	f104 091a 	add.w	r9, r4, #26
 8006d34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d36:	3b01      	subs	r3, #1
 8006d38:	4543      	cmp	r3, r8
 8006d3a:	dc09      	bgt.n	8006d50 <_printf_float+0x264>
 8006d3c:	6823      	ldr	r3, [r4, #0]
 8006d3e:	079b      	lsls	r3, r3, #30
 8006d40:	f100 8105 	bmi.w	8006f4e <_printf_float+0x462>
 8006d44:	68e0      	ldr	r0, [r4, #12]
 8006d46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006d48:	4298      	cmp	r0, r3
 8006d4a:	bfb8      	it	lt
 8006d4c:	4618      	movlt	r0, r3
 8006d4e:	e730      	b.n	8006bb2 <_printf_float+0xc6>
 8006d50:	2301      	movs	r3, #1
 8006d52:	464a      	mov	r2, r9
 8006d54:	4631      	mov	r1, r6
 8006d56:	4628      	mov	r0, r5
 8006d58:	47b8      	blx	r7
 8006d5a:	3001      	adds	r0, #1
 8006d5c:	f43f af27 	beq.w	8006bae <_printf_float+0xc2>
 8006d60:	f108 0801 	add.w	r8, r8, #1
 8006d64:	e7e6      	b.n	8006d34 <_printf_float+0x248>
 8006d66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	dc39      	bgt.n	8006de0 <_printf_float+0x2f4>
 8006d6c:	4a1b      	ldr	r2, [pc, #108]	; (8006ddc <_printf_float+0x2f0>)
 8006d6e:	2301      	movs	r3, #1
 8006d70:	4631      	mov	r1, r6
 8006d72:	4628      	mov	r0, r5
 8006d74:	47b8      	blx	r7
 8006d76:	3001      	adds	r0, #1
 8006d78:	f43f af19 	beq.w	8006bae <_printf_float+0xc2>
 8006d7c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006d80:	4313      	orrs	r3, r2
 8006d82:	d102      	bne.n	8006d8a <_printf_float+0x29e>
 8006d84:	6823      	ldr	r3, [r4, #0]
 8006d86:	07d9      	lsls	r1, r3, #31
 8006d88:	d5d8      	bpl.n	8006d3c <_printf_float+0x250>
 8006d8a:	ee18 3a10 	vmov	r3, s16
 8006d8e:	4652      	mov	r2, sl
 8006d90:	4631      	mov	r1, r6
 8006d92:	4628      	mov	r0, r5
 8006d94:	47b8      	blx	r7
 8006d96:	3001      	adds	r0, #1
 8006d98:	f43f af09 	beq.w	8006bae <_printf_float+0xc2>
 8006d9c:	f04f 0900 	mov.w	r9, #0
 8006da0:	f104 0a1a 	add.w	sl, r4, #26
 8006da4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006da6:	425b      	negs	r3, r3
 8006da8:	454b      	cmp	r3, r9
 8006daa:	dc01      	bgt.n	8006db0 <_printf_float+0x2c4>
 8006dac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006dae:	e792      	b.n	8006cd6 <_printf_float+0x1ea>
 8006db0:	2301      	movs	r3, #1
 8006db2:	4652      	mov	r2, sl
 8006db4:	4631      	mov	r1, r6
 8006db6:	4628      	mov	r0, r5
 8006db8:	47b8      	blx	r7
 8006dba:	3001      	adds	r0, #1
 8006dbc:	f43f aef7 	beq.w	8006bae <_printf_float+0xc2>
 8006dc0:	f109 0901 	add.w	r9, r9, #1
 8006dc4:	e7ee      	b.n	8006da4 <_printf_float+0x2b8>
 8006dc6:	bf00      	nop
 8006dc8:	7fefffff 	.word	0x7fefffff
 8006dcc:	0800984c 	.word	0x0800984c
 8006dd0:	08009850 	.word	0x08009850
 8006dd4:	08009858 	.word	0x08009858
 8006dd8:	08009854 	.word	0x08009854
 8006ddc:	0800985c 	.word	0x0800985c
 8006de0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006de2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006de4:	429a      	cmp	r2, r3
 8006de6:	bfa8      	it	ge
 8006de8:	461a      	movge	r2, r3
 8006dea:	2a00      	cmp	r2, #0
 8006dec:	4691      	mov	r9, r2
 8006dee:	dc37      	bgt.n	8006e60 <_printf_float+0x374>
 8006df0:	f04f 0b00 	mov.w	fp, #0
 8006df4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006df8:	f104 021a 	add.w	r2, r4, #26
 8006dfc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006dfe:	9305      	str	r3, [sp, #20]
 8006e00:	eba3 0309 	sub.w	r3, r3, r9
 8006e04:	455b      	cmp	r3, fp
 8006e06:	dc33      	bgt.n	8006e70 <_printf_float+0x384>
 8006e08:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006e0c:	429a      	cmp	r2, r3
 8006e0e:	db3b      	blt.n	8006e88 <_printf_float+0x39c>
 8006e10:	6823      	ldr	r3, [r4, #0]
 8006e12:	07da      	lsls	r2, r3, #31
 8006e14:	d438      	bmi.n	8006e88 <_printf_float+0x39c>
 8006e16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e18:	9a05      	ldr	r2, [sp, #20]
 8006e1a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006e1c:	1a9a      	subs	r2, r3, r2
 8006e1e:	eba3 0901 	sub.w	r9, r3, r1
 8006e22:	4591      	cmp	r9, r2
 8006e24:	bfa8      	it	ge
 8006e26:	4691      	movge	r9, r2
 8006e28:	f1b9 0f00 	cmp.w	r9, #0
 8006e2c:	dc35      	bgt.n	8006e9a <_printf_float+0x3ae>
 8006e2e:	f04f 0800 	mov.w	r8, #0
 8006e32:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006e36:	f104 0a1a 	add.w	sl, r4, #26
 8006e3a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006e3e:	1a9b      	subs	r3, r3, r2
 8006e40:	eba3 0309 	sub.w	r3, r3, r9
 8006e44:	4543      	cmp	r3, r8
 8006e46:	f77f af79 	ble.w	8006d3c <_printf_float+0x250>
 8006e4a:	2301      	movs	r3, #1
 8006e4c:	4652      	mov	r2, sl
 8006e4e:	4631      	mov	r1, r6
 8006e50:	4628      	mov	r0, r5
 8006e52:	47b8      	blx	r7
 8006e54:	3001      	adds	r0, #1
 8006e56:	f43f aeaa 	beq.w	8006bae <_printf_float+0xc2>
 8006e5a:	f108 0801 	add.w	r8, r8, #1
 8006e5e:	e7ec      	b.n	8006e3a <_printf_float+0x34e>
 8006e60:	4613      	mov	r3, r2
 8006e62:	4631      	mov	r1, r6
 8006e64:	4642      	mov	r2, r8
 8006e66:	4628      	mov	r0, r5
 8006e68:	47b8      	blx	r7
 8006e6a:	3001      	adds	r0, #1
 8006e6c:	d1c0      	bne.n	8006df0 <_printf_float+0x304>
 8006e6e:	e69e      	b.n	8006bae <_printf_float+0xc2>
 8006e70:	2301      	movs	r3, #1
 8006e72:	4631      	mov	r1, r6
 8006e74:	4628      	mov	r0, r5
 8006e76:	9205      	str	r2, [sp, #20]
 8006e78:	47b8      	blx	r7
 8006e7a:	3001      	adds	r0, #1
 8006e7c:	f43f ae97 	beq.w	8006bae <_printf_float+0xc2>
 8006e80:	9a05      	ldr	r2, [sp, #20]
 8006e82:	f10b 0b01 	add.w	fp, fp, #1
 8006e86:	e7b9      	b.n	8006dfc <_printf_float+0x310>
 8006e88:	ee18 3a10 	vmov	r3, s16
 8006e8c:	4652      	mov	r2, sl
 8006e8e:	4631      	mov	r1, r6
 8006e90:	4628      	mov	r0, r5
 8006e92:	47b8      	blx	r7
 8006e94:	3001      	adds	r0, #1
 8006e96:	d1be      	bne.n	8006e16 <_printf_float+0x32a>
 8006e98:	e689      	b.n	8006bae <_printf_float+0xc2>
 8006e9a:	9a05      	ldr	r2, [sp, #20]
 8006e9c:	464b      	mov	r3, r9
 8006e9e:	4442      	add	r2, r8
 8006ea0:	4631      	mov	r1, r6
 8006ea2:	4628      	mov	r0, r5
 8006ea4:	47b8      	blx	r7
 8006ea6:	3001      	adds	r0, #1
 8006ea8:	d1c1      	bne.n	8006e2e <_printf_float+0x342>
 8006eaa:	e680      	b.n	8006bae <_printf_float+0xc2>
 8006eac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006eae:	2a01      	cmp	r2, #1
 8006eb0:	dc01      	bgt.n	8006eb6 <_printf_float+0x3ca>
 8006eb2:	07db      	lsls	r3, r3, #31
 8006eb4:	d538      	bpl.n	8006f28 <_printf_float+0x43c>
 8006eb6:	2301      	movs	r3, #1
 8006eb8:	4642      	mov	r2, r8
 8006eba:	4631      	mov	r1, r6
 8006ebc:	4628      	mov	r0, r5
 8006ebe:	47b8      	blx	r7
 8006ec0:	3001      	adds	r0, #1
 8006ec2:	f43f ae74 	beq.w	8006bae <_printf_float+0xc2>
 8006ec6:	ee18 3a10 	vmov	r3, s16
 8006eca:	4652      	mov	r2, sl
 8006ecc:	4631      	mov	r1, r6
 8006ece:	4628      	mov	r0, r5
 8006ed0:	47b8      	blx	r7
 8006ed2:	3001      	adds	r0, #1
 8006ed4:	f43f ae6b 	beq.w	8006bae <_printf_float+0xc2>
 8006ed8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006edc:	2200      	movs	r2, #0
 8006ede:	2300      	movs	r3, #0
 8006ee0:	f7f9 fdf2 	bl	8000ac8 <__aeabi_dcmpeq>
 8006ee4:	b9d8      	cbnz	r0, 8006f1e <_printf_float+0x432>
 8006ee6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ee8:	f108 0201 	add.w	r2, r8, #1
 8006eec:	3b01      	subs	r3, #1
 8006eee:	4631      	mov	r1, r6
 8006ef0:	4628      	mov	r0, r5
 8006ef2:	47b8      	blx	r7
 8006ef4:	3001      	adds	r0, #1
 8006ef6:	d10e      	bne.n	8006f16 <_printf_float+0x42a>
 8006ef8:	e659      	b.n	8006bae <_printf_float+0xc2>
 8006efa:	2301      	movs	r3, #1
 8006efc:	4652      	mov	r2, sl
 8006efe:	4631      	mov	r1, r6
 8006f00:	4628      	mov	r0, r5
 8006f02:	47b8      	blx	r7
 8006f04:	3001      	adds	r0, #1
 8006f06:	f43f ae52 	beq.w	8006bae <_printf_float+0xc2>
 8006f0a:	f108 0801 	add.w	r8, r8, #1
 8006f0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f10:	3b01      	subs	r3, #1
 8006f12:	4543      	cmp	r3, r8
 8006f14:	dcf1      	bgt.n	8006efa <_printf_float+0x40e>
 8006f16:	464b      	mov	r3, r9
 8006f18:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006f1c:	e6dc      	b.n	8006cd8 <_printf_float+0x1ec>
 8006f1e:	f04f 0800 	mov.w	r8, #0
 8006f22:	f104 0a1a 	add.w	sl, r4, #26
 8006f26:	e7f2      	b.n	8006f0e <_printf_float+0x422>
 8006f28:	2301      	movs	r3, #1
 8006f2a:	4642      	mov	r2, r8
 8006f2c:	e7df      	b.n	8006eee <_printf_float+0x402>
 8006f2e:	2301      	movs	r3, #1
 8006f30:	464a      	mov	r2, r9
 8006f32:	4631      	mov	r1, r6
 8006f34:	4628      	mov	r0, r5
 8006f36:	47b8      	blx	r7
 8006f38:	3001      	adds	r0, #1
 8006f3a:	f43f ae38 	beq.w	8006bae <_printf_float+0xc2>
 8006f3e:	f108 0801 	add.w	r8, r8, #1
 8006f42:	68e3      	ldr	r3, [r4, #12]
 8006f44:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006f46:	1a5b      	subs	r3, r3, r1
 8006f48:	4543      	cmp	r3, r8
 8006f4a:	dcf0      	bgt.n	8006f2e <_printf_float+0x442>
 8006f4c:	e6fa      	b.n	8006d44 <_printf_float+0x258>
 8006f4e:	f04f 0800 	mov.w	r8, #0
 8006f52:	f104 0919 	add.w	r9, r4, #25
 8006f56:	e7f4      	b.n	8006f42 <_printf_float+0x456>

08006f58 <_printf_common>:
 8006f58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f5c:	4616      	mov	r6, r2
 8006f5e:	4699      	mov	r9, r3
 8006f60:	688a      	ldr	r2, [r1, #8]
 8006f62:	690b      	ldr	r3, [r1, #16]
 8006f64:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006f68:	4293      	cmp	r3, r2
 8006f6a:	bfb8      	it	lt
 8006f6c:	4613      	movlt	r3, r2
 8006f6e:	6033      	str	r3, [r6, #0]
 8006f70:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006f74:	4607      	mov	r7, r0
 8006f76:	460c      	mov	r4, r1
 8006f78:	b10a      	cbz	r2, 8006f7e <_printf_common+0x26>
 8006f7a:	3301      	adds	r3, #1
 8006f7c:	6033      	str	r3, [r6, #0]
 8006f7e:	6823      	ldr	r3, [r4, #0]
 8006f80:	0699      	lsls	r1, r3, #26
 8006f82:	bf42      	ittt	mi
 8006f84:	6833      	ldrmi	r3, [r6, #0]
 8006f86:	3302      	addmi	r3, #2
 8006f88:	6033      	strmi	r3, [r6, #0]
 8006f8a:	6825      	ldr	r5, [r4, #0]
 8006f8c:	f015 0506 	ands.w	r5, r5, #6
 8006f90:	d106      	bne.n	8006fa0 <_printf_common+0x48>
 8006f92:	f104 0a19 	add.w	sl, r4, #25
 8006f96:	68e3      	ldr	r3, [r4, #12]
 8006f98:	6832      	ldr	r2, [r6, #0]
 8006f9a:	1a9b      	subs	r3, r3, r2
 8006f9c:	42ab      	cmp	r3, r5
 8006f9e:	dc26      	bgt.n	8006fee <_printf_common+0x96>
 8006fa0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006fa4:	1e13      	subs	r3, r2, #0
 8006fa6:	6822      	ldr	r2, [r4, #0]
 8006fa8:	bf18      	it	ne
 8006faa:	2301      	movne	r3, #1
 8006fac:	0692      	lsls	r2, r2, #26
 8006fae:	d42b      	bmi.n	8007008 <_printf_common+0xb0>
 8006fb0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006fb4:	4649      	mov	r1, r9
 8006fb6:	4638      	mov	r0, r7
 8006fb8:	47c0      	blx	r8
 8006fba:	3001      	adds	r0, #1
 8006fbc:	d01e      	beq.n	8006ffc <_printf_common+0xa4>
 8006fbe:	6823      	ldr	r3, [r4, #0]
 8006fc0:	68e5      	ldr	r5, [r4, #12]
 8006fc2:	6832      	ldr	r2, [r6, #0]
 8006fc4:	f003 0306 	and.w	r3, r3, #6
 8006fc8:	2b04      	cmp	r3, #4
 8006fca:	bf08      	it	eq
 8006fcc:	1aad      	subeq	r5, r5, r2
 8006fce:	68a3      	ldr	r3, [r4, #8]
 8006fd0:	6922      	ldr	r2, [r4, #16]
 8006fd2:	bf0c      	ite	eq
 8006fd4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006fd8:	2500      	movne	r5, #0
 8006fda:	4293      	cmp	r3, r2
 8006fdc:	bfc4      	itt	gt
 8006fde:	1a9b      	subgt	r3, r3, r2
 8006fe0:	18ed      	addgt	r5, r5, r3
 8006fe2:	2600      	movs	r6, #0
 8006fe4:	341a      	adds	r4, #26
 8006fe6:	42b5      	cmp	r5, r6
 8006fe8:	d11a      	bne.n	8007020 <_printf_common+0xc8>
 8006fea:	2000      	movs	r0, #0
 8006fec:	e008      	b.n	8007000 <_printf_common+0xa8>
 8006fee:	2301      	movs	r3, #1
 8006ff0:	4652      	mov	r2, sl
 8006ff2:	4649      	mov	r1, r9
 8006ff4:	4638      	mov	r0, r7
 8006ff6:	47c0      	blx	r8
 8006ff8:	3001      	adds	r0, #1
 8006ffa:	d103      	bne.n	8007004 <_printf_common+0xac>
 8006ffc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007000:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007004:	3501      	adds	r5, #1
 8007006:	e7c6      	b.n	8006f96 <_printf_common+0x3e>
 8007008:	18e1      	adds	r1, r4, r3
 800700a:	1c5a      	adds	r2, r3, #1
 800700c:	2030      	movs	r0, #48	; 0x30
 800700e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007012:	4422      	add	r2, r4
 8007014:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007018:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800701c:	3302      	adds	r3, #2
 800701e:	e7c7      	b.n	8006fb0 <_printf_common+0x58>
 8007020:	2301      	movs	r3, #1
 8007022:	4622      	mov	r2, r4
 8007024:	4649      	mov	r1, r9
 8007026:	4638      	mov	r0, r7
 8007028:	47c0      	blx	r8
 800702a:	3001      	adds	r0, #1
 800702c:	d0e6      	beq.n	8006ffc <_printf_common+0xa4>
 800702e:	3601      	adds	r6, #1
 8007030:	e7d9      	b.n	8006fe6 <_printf_common+0x8e>
	...

08007034 <_printf_i>:
 8007034:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007038:	7e0f      	ldrb	r7, [r1, #24]
 800703a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800703c:	2f78      	cmp	r7, #120	; 0x78
 800703e:	4691      	mov	r9, r2
 8007040:	4680      	mov	r8, r0
 8007042:	460c      	mov	r4, r1
 8007044:	469a      	mov	sl, r3
 8007046:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800704a:	d807      	bhi.n	800705c <_printf_i+0x28>
 800704c:	2f62      	cmp	r7, #98	; 0x62
 800704e:	d80a      	bhi.n	8007066 <_printf_i+0x32>
 8007050:	2f00      	cmp	r7, #0
 8007052:	f000 80d8 	beq.w	8007206 <_printf_i+0x1d2>
 8007056:	2f58      	cmp	r7, #88	; 0x58
 8007058:	f000 80a3 	beq.w	80071a2 <_printf_i+0x16e>
 800705c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007060:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007064:	e03a      	b.n	80070dc <_printf_i+0xa8>
 8007066:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800706a:	2b15      	cmp	r3, #21
 800706c:	d8f6      	bhi.n	800705c <_printf_i+0x28>
 800706e:	a101      	add	r1, pc, #4	; (adr r1, 8007074 <_printf_i+0x40>)
 8007070:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007074:	080070cd 	.word	0x080070cd
 8007078:	080070e1 	.word	0x080070e1
 800707c:	0800705d 	.word	0x0800705d
 8007080:	0800705d 	.word	0x0800705d
 8007084:	0800705d 	.word	0x0800705d
 8007088:	0800705d 	.word	0x0800705d
 800708c:	080070e1 	.word	0x080070e1
 8007090:	0800705d 	.word	0x0800705d
 8007094:	0800705d 	.word	0x0800705d
 8007098:	0800705d 	.word	0x0800705d
 800709c:	0800705d 	.word	0x0800705d
 80070a0:	080071ed 	.word	0x080071ed
 80070a4:	08007111 	.word	0x08007111
 80070a8:	080071cf 	.word	0x080071cf
 80070ac:	0800705d 	.word	0x0800705d
 80070b0:	0800705d 	.word	0x0800705d
 80070b4:	0800720f 	.word	0x0800720f
 80070b8:	0800705d 	.word	0x0800705d
 80070bc:	08007111 	.word	0x08007111
 80070c0:	0800705d 	.word	0x0800705d
 80070c4:	0800705d 	.word	0x0800705d
 80070c8:	080071d7 	.word	0x080071d7
 80070cc:	682b      	ldr	r3, [r5, #0]
 80070ce:	1d1a      	adds	r2, r3, #4
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	602a      	str	r2, [r5, #0]
 80070d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80070d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80070dc:	2301      	movs	r3, #1
 80070de:	e0a3      	b.n	8007228 <_printf_i+0x1f4>
 80070e0:	6820      	ldr	r0, [r4, #0]
 80070e2:	6829      	ldr	r1, [r5, #0]
 80070e4:	0606      	lsls	r6, r0, #24
 80070e6:	f101 0304 	add.w	r3, r1, #4
 80070ea:	d50a      	bpl.n	8007102 <_printf_i+0xce>
 80070ec:	680e      	ldr	r6, [r1, #0]
 80070ee:	602b      	str	r3, [r5, #0]
 80070f0:	2e00      	cmp	r6, #0
 80070f2:	da03      	bge.n	80070fc <_printf_i+0xc8>
 80070f4:	232d      	movs	r3, #45	; 0x2d
 80070f6:	4276      	negs	r6, r6
 80070f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80070fc:	485e      	ldr	r0, [pc, #376]	; (8007278 <_printf_i+0x244>)
 80070fe:	230a      	movs	r3, #10
 8007100:	e019      	b.n	8007136 <_printf_i+0x102>
 8007102:	680e      	ldr	r6, [r1, #0]
 8007104:	602b      	str	r3, [r5, #0]
 8007106:	f010 0f40 	tst.w	r0, #64	; 0x40
 800710a:	bf18      	it	ne
 800710c:	b236      	sxthne	r6, r6
 800710e:	e7ef      	b.n	80070f0 <_printf_i+0xbc>
 8007110:	682b      	ldr	r3, [r5, #0]
 8007112:	6820      	ldr	r0, [r4, #0]
 8007114:	1d19      	adds	r1, r3, #4
 8007116:	6029      	str	r1, [r5, #0]
 8007118:	0601      	lsls	r1, r0, #24
 800711a:	d501      	bpl.n	8007120 <_printf_i+0xec>
 800711c:	681e      	ldr	r6, [r3, #0]
 800711e:	e002      	b.n	8007126 <_printf_i+0xf2>
 8007120:	0646      	lsls	r6, r0, #25
 8007122:	d5fb      	bpl.n	800711c <_printf_i+0xe8>
 8007124:	881e      	ldrh	r6, [r3, #0]
 8007126:	4854      	ldr	r0, [pc, #336]	; (8007278 <_printf_i+0x244>)
 8007128:	2f6f      	cmp	r7, #111	; 0x6f
 800712a:	bf0c      	ite	eq
 800712c:	2308      	moveq	r3, #8
 800712e:	230a      	movne	r3, #10
 8007130:	2100      	movs	r1, #0
 8007132:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007136:	6865      	ldr	r5, [r4, #4]
 8007138:	60a5      	str	r5, [r4, #8]
 800713a:	2d00      	cmp	r5, #0
 800713c:	bfa2      	ittt	ge
 800713e:	6821      	ldrge	r1, [r4, #0]
 8007140:	f021 0104 	bicge.w	r1, r1, #4
 8007144:	6021      	strge	r1, [r4, #0]
 8007146:	b90e      	cbnz	r6, 800714c <_printf_i+0x118>
 8007148:	2d00      	cmp	r5, #0
 800714a:	d04d      	beq.n	80071e8 <_printf_i+0x1b4>
 800714c:	4615      	mov	r5, r2
 800714e:	fbb6 f1f3 	udiv	r1, r6, r3
 8007152:	fb03 6711 	mls	r7, r3, r1, r6
 8007156:	5dc7      	ldrb	r7, [r0, r7]
 8007158:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800715c:	4637      	mov	r7, r6
 800715e:	42bb      	cmp	r3, r7
 8007160:	460e      	mov	r6, r1
 8007162:	d9f4      	bls.n	800714e <_printf_i+0x11a>
 8007164:	2b08      	cmp	r3, #8
 8007166:	d10b      	bne.n	8007180 <_printf_i+0x14c>
 8007168:	6823      	ldr	r3, [r4, #0]
 800716a:	07de      	lsls	r6, r3, #31
 800716c:	d508      	bpl.n	8007180 <_printf_i+0x14c>
 800716e:	6923      	ldr	r3, [r4, #16]
 8007170:	6861      	ldr	r1, [r4, #4]
 8007172:	4299      	cmp	r1, r3
 8007174:	bfde      	ittt	le
 8007176:	2330      	movle	r3, #48	; 0x30
 8007178:	f805 3c01 	strble.w	r3, [r5, #-1]
 800717c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8007180:	1b52      	subs	r2, r2, r5
 8007182:	6122      	str	r2, [r4, #16]
 8007184:	f8cd a000 	str.w	sl, [sp]
 8007188:	464b      	mov	r3, r9
 800718a:	aa03      	add	r2, sp, #12
 800718c:	4621      	mov	r1, r4
 800718e:	4640      	mov	r0, r8
 8007190:	f7ff fee2 	bl	8006f58 <_printf_common>
 8007194:	3001      	adds	r0, #1
 8007196:	d14c      	bne.n	8007232 <_printf_i+0x1fe>
 8007198:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800719c:	b004      	add	sp, #16
 800719e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071a2:	4835      	ldr	r0, [pc, #212]	; (8007278 <_printf_i+0x244>)
 80071a4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80071a8:	6829      	ldr	r1, [r5, #0]
 80071aa:	6823      	ldr	r3, [r4, #0]
 80071ac:	f851 6b04 	ldr.w	r6, [r1], #4
 80071b0:	6029      	str	r1, [r5, #0]
 80071b2:	061d      	lsls	r5, r3, #24
 80071b4:	d514      	bpl.n	80071e0 <_printf_i+0x1ac>
 80071b6:	07df      	lsls	r7, r3, #31
 80071b8:	bf44      	itt	mi
 80071ba:	f043 0320 	orrmi.w	r3, r3, #32
 80071be:	6023      	strmi	r3, [r4, #0]
 80071c0:	b91e      	cbnz	r6, 80071ca <_printf_i+0x196>
 80071c2:	6823      	ldr	r3, [r4, #0]
 80071c4:	f023 0320 	bic.w	r3, r3, #32
 80071c8:	6023      	str	r3, [r4, #0]
 80071ca:	2310      	movs	r3, #16
 80071cc:	e7b0      	b.n	8007130 <_printf_i+0xfc>
 80071ce:	6823      	ldr	r3, [r4, #0]
 80071d0:	f043 0320 	orr.w	r3, r3, #32
 80071d4:	6023      	str	r3, [r4, #0]
 80071d6:	2378      	movs	r3, #120	; 0x78
 80071d8:	4828      	ldr	r0, [pc, #160]	; (800727c <_printf_i+0x248>)
 80071da:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80071de:	e7e3      	b.n	80071a8 <_printf_i+0x174>
 80071e0:	0659      	lsls	r1, r3, #25
 80071e2:	bf48      	it	mi
 80071e4:	b2b6      	uxthmi	r6, r6
 80071e6:	e7e6      	b.n	80071b6 <_printf_i+0x182>
 80071e8:	4615      	mov	r5, r2
 80071ea:	e7bb      	b.n	8007164 <_printf_i+0x130>
 80071ec:	682b      	ldr	r3, [r5, #0]
 80071ee:	6826      	ldr	r6, [r4, #0]
 80071f0:	6961      	ldr	r1, [r4, #20]
 80071f2:	1d18      	adds	r0, r3, #4
 80071f4:	6028      	str	r0, [r5, #0]
 80071f6:	0635      	lsls	r5, r6, #24
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	d501      	bpl.n	8007200 <_printf_i+0x1cc>
 80071fc:	6019      	str	r1, [r3, #0]
 80071fe:	e002      	b.n	8007206 <_printf_i+0x1d2>
 8007200:	0670      	lsls	r0, r6, #25
 8007202:	d5fb      	bpl.n	80071fc <_printf_i+0x1c8>
 8007204:	8019      	strh	r1, [r3, #0]
 8007206:	2300      	movs	r3, #0
 8007208:	6123      	str	r3, [r4, #16]
 800720a:	4615      	mov	r5, r2
 800720c:	e7ba      	b.n	8007184 <_printf_i+0x150>
 800720e:	682b      	ldr	r3, [r5, #0]
 8007210:	1d1a      	adds	r2, r3, #4
 8007212:	602a      	str	r2, [r5, #0]
 8007214:	681d      	ldr	r5, [r3, #0]
 8007216:	6862      	ldr	r2, [r4, #4]
 8007218:	2100      	movs	r1, #0
 800721a:	4628      	mov	r0, r5
 800721c:	f7f8 ffe0 	bl	80001e0 <memchr>
 8007220:	b108      	cbz	r0, 8007226 <_printf_i+0x1f2>
 8007222:	1b40      	subs	r0, r0, r5
 8007224:	6060      	str	r0, [r4, #4]
 8007226:	6863      	ldr	r3, [r4, #4]
 8007228:	6123      	str	r3, [r4, #16]
 800722a:	2300      	movs	r3, #0
 800722c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007230:	e7a8      	b.n	8007184 <_printf_i+0x150>
 8007232:	6923      	ldr	r3, [r4, #16]
 8007234:	462a      	mov	r2, r5
 8007236:	4649      	mov	r1, r9
 8007238:	4640      	mov	r0, r8
 800723a:	47d0      	blx	sl
 800723c:	3001      	adds	r0, #1
 800723e:	d0ab      	beq.n	8007198 <_printf_i+0x164>
 8007240:	6823      	ldr	r3, [r4, #0]
 8007242:	079b      	lsls	r3, r3, #30
 8007244:	d413      	bmi.n	800726e <_printf_i+0x23a>
 8007246:	68e0      	ldr	r0, [r4, #12]
 8007248:	9b03      	ldr	r3, [sp, #12]
 800724a:	4298      	cmp	r0, r3
 800724c:	bfb8      	it	lt
 800724e:	4618      	movlt	r0, r3
 8007250:	e7a4      	b.n	800719c <_printf_i+0x168>
 8007252:	2301      	movs	r3, #1
 8007254:	4632      	mov	r2, r6
 8007256:	4649      	mov	r1, r9
 8007258:	4640      	mov	r0, r8
 800725a:	47d0      	blx	sl
 800725c:	3001      	adds	r0, #1
 800725e:	d09b      	beq.n	8007198 <_printf_i+0x164>
 8007260:	3501      	adds	r5, #1
 8007262:	68e3      	ldr	r3, [r4, #12]
 8007264:	9903      	ldr	r1, [sp, #12]
 8007266:	1a5b      	subs	r3, r3, r1
 8007268:	42ab      	cmp	r3, r5
 800726a:	dcf2      	bgt.n	8007252 <_printf_i+0x21e>
 800726c:	e7eb      	b.n	8007246 <_printf_i+0x212>
 800726e:	2500      	movs	r5, #0
 8007270:	f104 0619 	add.w	r6, r4, #25
 8007274:	e7f5      	b.n	8007262 <_printf_i+0x22e>
 8007276:	bf00      	nop
 8007278:	0800985e 	.word	0x0800985e
 800727c:	0800986f 	.word	0x0800986f

08007280 <iprintf>:
 8007280:	b40f      	push	{r0, r1, r2, r3}
 8007282:	4b0a      	ldr	r3, [pc, #40]	; (80072ac <iprintf+0x2c>)
 8007284:	b513      	push	{r0, r1, r4, lr}
 8007286:	681c      	ldr	r4, [r3, #0]
 8007288:	b124      	cbz	r4, 8007294 <iprintf+0x14>
 800728a:	69a3      	ldr	r3, [r4, #24]
 800728c:	b913      	cbnz	r3, 8007294 <iprintf+0x14>
 800728e:	4620      	mov	r0, r4
 8007290:	f001 f8da 	bl	8008448 <__sinit>
 8007294:	ab05      	add	r3, sp, #20
 8007296:	9a04      	ldr	r2, [sp, #16]
 8007298:	68a1      	ldr	r1, [r4, #8]
 800729a:	9301      	str	r3, [sp, #4]
 800729c:	4620      	mov	r0, r4
 800729e:	f001 fe97 	bl	8008fd0 <_vfiprintf_r>
 80072a2:	b002      	add	sp, #8
 80072a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80072a8:	b004      	add	sp, #16
 80072aa:	4770      	bx	lr
 80072ac:	2000000c 	.word	0x2000000c

080072b0 <_puts_r>:
 80072b0:	b570      	push	{r4, r5, r6, lr}
 80072b2:	460e      	mov	r6, r1
 80072b4:	4605      	mov	r5, r0
 80072b6:	b118      	cbz	r0, 80072c0 <_puts_r+0x10>
 80072b8:	6983      	ldr	r3, [r0, #24]
 80072ba:	b90b      	cbnz	r3, 80072c0 <_puts_r+0x10>
 80072bc:	f001 f8c4 	bl	8008448 <__sinit>
 80072c0:	69ab      	ldr	r3, [r5, #24]
 80072c2:	68ac      	ldr	r4, [r5, #8]
 80072c4:	b913      	cbnz	r3, 80072cc <_puts_r+0x1c>
 80072c6:	4628      	mov	r0, r5
 80072c8:	f001 f8be 	bl	8008448 <__sinit>
 80072cc:	4b2c      	ldr	r3, [pc, #176]	; (8007380 <_puts_r+0xd0>)
 80072ce:	429c      	cmp	r4, r3
 80072d0:	d120      	bne.n	8007314 <_puts_r+0x64>
 80072d2:	686c      	ldr	r4, [r5, #4]
 80072d4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80072d6:	07db      	lsls	r3, r3, #31
 80072d8:	d405      	bmi.n	80072e6 <_puts_r+0x36>
 80072da:	89a3      	ldrh	r3, [r4, #12]
 80072dc:	0598      	lsls	r0, r3, #22
 80072de:	d402      	bmi.n	80072e6 <_puts_r+0x36>
 80072e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80072e2:	f001 f954 	bl	800858e <__retarget_lock_acquire_recursive>
 80072e6:	89a3      	ldrh	r3, [r4, #12]
 80072e8:	0719      	lsls	r1, r3, #28
 80072ea:	d51d      	bpl.n	8007328 <_puts_r+0x78>
 80072ec:	6923      	ldr	r3, [r4, #16]
 80072ee:	b1db      	cbz	r3, 8007328 <_puts_r+0x78>
 80072f0:	3e01      	subs	r6, #1
 80072f2:	68a3      	ldr	r3, [r4, #8]
 80072f4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80072f8:	3b01      	subs	r3, #1
 80072fa:	60a3      	str	r3, [r4, #8]
 80072fc:	bb39      	cbnz	r1, 800734e <_puts_r+0x9e>
 80072fe:	2b00      	cmp	r3, #0
 8007300:	da38      	bge.n	8007374 <_puts_r+0xc4>
 8007302:	4622      	mov	r2, r4
 8007304:	210a      	movs	r1, #10
 8007306:	4628      	mov	r0, r5
 8007308:	f000 f848 	bl	800739c <__swbuf_r>
 800730c:	3001      	adds	r0, #1
 800730e:	d011      	beq.n	8007334 <_puts_r+0x84>
 8007310:	250a      	movs	r5, #10
 8007312:	e011      	b.n	8007338 <_puts_r+0x88>
 8007314:	4b1b      	ldr	r3, [pc, #108]	; (8007384 <_puts_r+0xd4>)
 8007316:	429c      	cmp	r4, r3
 8007318:	d101      	bne.n	800731e <_puts_r+0x6e>
 800731a:	68ac      	ldr	r4, [r5, #8]
 800731c:	e7da      	b.n	80072d4 <_puts_r+0x24>
 800731e:	4b1a      	ldr	r3, [pc, #104]	; (8007388 <_puts_r+0xd8>)
 8007320:	429c      	cmp	r4, r3
 8007322:	bf08      	it	eq
 8007324:	68ec      	ldreq	r4, [r5, #12]
 8007326:	e7d5      	b.n	80072d4 <_puts_r+0x24>
 8007328:	4621      	mov	r1, r4
 800732a:	4628      	mov	r0, r5
 800732c:	f000 f888 	bl	8007440 <__swsetup_r>
 8007330:	2800      	cmp	r0, #0
 8007332:	d0dd      	beq.n	80072f0 <_puts_r+0x40>
 8007334:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8007338:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800733a:	07da      	lsls	r2, r3, #31
 800733c:	d405      	bmi.n	800734a <_puts_r+0x9a>
 800733e:	89a3      	ldrh	r3, [r4, #12]
 8007340:	059b      	lsls	r3, r3, #22
 8007342:	d402      	bmi.n	800734a <_puts_r+0x9a>
 8007344:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007346:	f001 f923 	bl	8008590 <__retarget_lock_release_recursive>
 800734a:	4628      	mov	r0, r5
 800734c:	bd70      	pop	{r4, r5, r6, pc}
 800734e:	2b00      	cmp	r3, #0
 8007350:	da04      	bge.n	800735c <_puts_r+0xac>
 8007352:	69a2      	ldr	r2, [r4, #24]
 8007354:	429a      	cmp	r2, r3
 8007356:	dc06      	bgt.n	8007366 <_puts_r+0xb6>
 8007358:	290a      	cmp	r1, #10
 800735a:	d004      	beq.n	8007366 <_puts_r+0xb6>
 800735c:	6823      	ldr	r3, [r4, #0]
 800735e:	1c5a      	adds	r2, r3, #1
 8007360:	6022      	str	r2, [r4, #0]
 8007362:	7019      	strb	r1, [r3, #0]
 8007364:	e7c5      	b.n	80072f2 <_puts_r+0x42>
 8007366:	4622      	mov	r2, r4
 8007368:	4628      	mov	r0, r5
 800736a:	f000 f817 	bl	800739c <__swbuf_r>
 800736e:	3001      	adds	r0, #1
 8007370:	d1bf      	bne.n	80072f2 <_puts_r+0x42>
 8007372:	e7df      	b.n	8007334 <_puts_r+0x84>
 8007374:	6823      	ldr	r3, [r4, #0]
 8007376:	250a      	movs	r5, #10
 8007378:	1c5a      	adds	r2, r3, #1
 800737a:	6022      	str	r2, [r4, #0]
 800737c:	701d      	strb	r5, [r3, #0]
 800737e:	e7db      	b.n	8007338 <_puts_r+0x88>
 8007380:	08009930 	.word	0x08009930
 8007384:	08009950 	.word	0x08009950
 8007388:	08009910 	.word	0x08009910

0800738c <puts>:
 800738c:	4b02      	ldr	r3, [pc, #8]	; (8007398 <puts+0xc>)
 800738e:	4601      	mov	r1, r0
 8007390:	6818      	ldr	r0, [r3, #0]
 8007392:	f7ff bf8d 	b.w	80072b0 <_puts_r>
 8007396:	bf00      	nop
 8007398:	2000000c 	.word	0x2000000c

0800739c <__swbuf_r>:
 800739c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800739e:	460e      	mov	r6, r1
 80073a0:	4614      	mov	r4, r2
 80073a2:	4605      	mov	r5, r0
 80073a4:	b118      	cbz	r0, 80073ae <__swbuf_r+0x12>
 80073a6:	6983      	ldr	r3, [r0, #24]
 80073a8:	b90b      	cbnz	r3, 80073ae <__swbuf_r+0x12>
 80073aa:	f001 f84d 	bl	8008448 <__sinit>
 80073ae:	4b21      	ldr	r3, [pc, #132]	; (8007434 <__swbuf_r+0x98>)
 80073b0:	429c      	cmp	r4, r3
 80073b2:	d12b      	bne.n	800740c <__swbuf_r+0x70>
 80073b4:	686c      	ldr	r4, [r5, #4]
 80073b6:	69a3      	ldr	r3, [r4, #24]
 80073b8:	60a3      	str	r3, [r4, #8]
 80073ba:	89a3      	ldrh	r3, [r4, #12]
 80073bc:	071a      	lsls	r2, r3, #28
 80073be:	d52f      	bpl.n	8007420 <__swbuf_r+0x84>
 80073c0:	6923      	ldr	r3, [r4, #16]
 80073c2:	b36b      	cbz	r3, 8007420 <__swbuf_r+0x84>
 80073c4:	6923      	ldr	r3, [r4, #16]
 80073c6:	6820      	ldr	r0, [r4, #0]
 80073c8:	1ac0      	subs	r0, r0, r3
 80073ca:	6963      	ldr	r3, [r4, #20]
 80073cc:	b2f6      	uxtb	r6, r6
 80073ce:	4283      	cmp	r3, r0
 80073d0:	4637      	mov	r7, r6
 80073d2:	dc04      	bgt.n	80073de <__swbuf_r+0x42>
 80073d4:	4621      	mov	r1, r4
 80073d6:	4628      	mov	r0, r5
 80073d8:	f000 ffa2 	bl	8008320 <_fflush_r>
 80073dc:	bb30      	cbnz	r0, 800742c <__swbuf_r+0x90>
 80073de:	68a3      	ldr	r3, [r4, #8]
 80073e0:	3b01      	subs	r3, #1
 80073e2:	60a3      	str	r3, [r4, #8]
 80073e4:	6823      	ldr	r3, [r4, #0]
 80073e6:	1c5a      	adds	r2, r3, #1
 80073e8:	6022      	str	r2, [r4, #0]
 80073ea:	701e      	strb	r6, [r3, #0]
 80073ec:	6963      	ldr	r3, [r4, #20]
 80073ee:	3001      	adds	r0, #1
 80073f0:	4283      	cmp	r3, r0
 80073f2:	d004      	beq.n	80073fe <__swbuf_r+0x62>
 80073f4:	89a3      	ldrh	r3, [r4, #12]
 80073f6:	07db      	lsls	r3, r3, #31
 80073f8:	d506      	bpl.n	8007408 <__swbuf_r+0x6c>
 80073fa:	2e0a      	cmp	r6, #10
 80073fc:	d104      	bne.n	8007408 <__swbuf_r+0x6c>
 80073fe:	4621      	mov	r1, r4
 8007400:	4628      	mov	r0, r5
 8007402:	f000 ff8d 	bl	8008320 <_fflush_r>
 8007406:	b988      	cbnz	r0, 800742c <__swbuf_r+0x90>
 8007408:	4638      	mov	r0, r7
 800740a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800740c:	4b0a      	ldr	r3, [pc, #40]	; (8007438 <__swbuf_r+0x9c>)
 800740e:	429c      	cmp	r4, r3
 8007410:	d101      	bne.n	8007416 <__swbuf_r+0x7a>
 8007412:	68ac      	ldr	r4, [r5, #8]
 8007414:	e7cf      	b.n	80073b6 <__swbuf_r+0x1a>
 8007416:	4b09      	ldr	r3, [pc, #36]	; (800743c <__swbuf_r+0xa0>)
 8007418:	429c      	cmp	r4, r3
 800741a:	bf08      	it	eq
 800741c:	68ec      	ldreq	r4, [r5, #12]
 800741e:	e7ca      	b.n	80073b6 <__swbuf_r+0x1a>
 8007420:	4621      	mov	r1, r4
 8007422:	4628      	mov	r0, r5
 8007424:	f000 f80c 	bl	8007440 <__swsetup_r>
 8007428:	2800      	cmp	r0, #0
 800742a:	d0cb      	beq.n	80073c4 <__swbuf_r+0x28>
 800742c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8007430:	e7ea      	b.n	8007408 <__swbuf_r+0x6c>
 8007432:	bf00      	nop
 8007434:	08009930 	.word	0x08009930
 8007438:	08009950 	.word	0x08009950
 800743c:	08009910 	.word	0x08009910

08007440 <__swsetup_r>:
 8007440:	4b32      	ldr	r3, [pc, #200]	; (800750c <__swsetup_r+0xcc>)
 8007442:	b570      	push	{r4, r5, r6, lr}
 8007444:	681d      	ldr	r5, [r3, #0]
 8007446:	4606      	mov	r6, r0
 8007448:	460c      	mov	r4, r1
 800744a:	b125      	cbz	r5, 8007456 <__swsetup_r+0x16>
 800744c:	69ab      	ldr	r3, [r5, #24]
 800744e:	b913      	cbnz	r3, 8007456 <__swsetup_r+0x16>
 8007450:	4628      	mov	r0, r5
 8007452:	f000 fff9 	bl	8008448 <__sinit>
 8007456:	4b2e      	ldr	r3, [pc, #184]	; (8007510 <__swsetup_r+0xd0>)
 8007458:	429c      	cmp	r4, r3
 800745a:	d10f      	bne.n	800747c <__swsetup_r+0x3c>
 800745c:	686c      	ldr	r4, [r5, #4]
 800745e:	89a3      	ldrh	r3, [r4, #12]
 8007460:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007464:	0719      	lsls	r1, r3, #28
 8007466:	d42c      	bmi.n	80074c2 <__swsetup_r+0x82>
 8007468:	06dd      	lsls	r5, r3, #27
 800746a:	d411      	bmi.n	8007490 <__swsetup_r+0x50>
 800746c:	2309      	movs	r3, #9
 800746e:	6033      	str	r3, [r6, #0]
 8007470:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007474:	81a3      	strh	r3, [r4, #12]
 8007476:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800747a:	e03e      	b.n	80074fa <__swsetup_r+0xba>
 800747c:	4b25      	ldr	r3, [pc, #148]	; (8007514 <__swsetup_r+0xd4>)
 800747e:	429c      	cmp	r4, r3
 8007480:	d101      	bne.n	8007486 <__swsetup_r+0x46>
 8007482:	68ac      	ldr	r4, [r5, #8]
 8007484:	e7eb      	b.n	800745e <__swsetup_r+0x1e>
 8007486:	4b24      	ldr	r3, [pc, #144]	; (8007518 <__swsetup_r+0xd8>)
 8007488:	429c      	cmp	r4, r3
 800748a:	bf08      	it	eq
 800748c:	68ec      	ldreq	r4, [r5, #12]
 800748e:	e7e6      	b.n	800745e <__swsetup_r+0x1e>
 8007490:	0758      	lsls	r0, r3, #29
 8007492:	d512      	bpl.n	80074ba <__swsetup_r+0x7a>
 8007494:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007496:	b141      	cbz	r1, 80074aa <__swsetup_r+0x6a>
 8007498:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800749c:	4299      	cmp	r1, r3
 800749e:	d002      	beq.n	80074a6 <__swsetup_r+0x66>
 80074a0:	4630      	mov	r0, r6
 80074a2:	f001 fc8b 	bl	8008dbc <_free_r>
 80074a6:	2300      	movs	r3, #0
 80074a8:	6363      	str	r3, [r4, #52]	; 0x34
 80074aa:	89a3      	ldrh	r3, [r4, #12]
 80074ac:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80074b0:	81a3      	strh	r3, [r4, #12]
 80074b2:	2300      	movs	r3, #0
 80074b4:	6063      	str	r3, [r4, #4]
 80074b6:	6923      	ldr	r3, [r4, #16]
 80074b8:	6023      	str	r3, [r4, #0]
 80074ba:	89a3      	ldrh	r3, [r4, #12]
 80074bc:	f043 0308 	orr.w	r3, r3, #8
 80074c0:	81a3      	strh	r3, [r4, #12]
 80074c2:	6923      	ldr	r3, [r4, #16]
 80074c4:	b94b      	cbnz	r3, 80074da <__swsetup_r+0x9a>
 80074c6:	89a3      	ldrh	r3, [r4, #12]
 80074c8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80074cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80074d0:	d003      	beq.n	80074da <__swsetup_r+0x9a>
 80074d2:	4621      	mov	r1, r4
 80074d4:	4630      	mov	r0, r6
 80074d6:	f001 f881 	bl	80085dc <__smakebuf_r>
 80074da:	89a0      	ldrh	r0, [r4, #12]
 80074dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80074e0:	f010 0301 	ands.w	r3, r0, #1
 80074e4:	d00a      	beq.n	80074fc <__swsetup_r+0xbc>
 80074e6:	2300      	movs	r3, #0
 80074e8:	60a3      	str	r3, [r4, #8]
 80074ea:	6963      	ldr	r3, [r4, #20]
 80074ec:	425b      	negs	r3, r3
 80074ee:	61a3      	str	r3, [r4, #24]
 80074f0:	6923      	ldr	r3, [r4, #16]
 80074f2:	b943      	cbnz	r3, 8007506 <__swsetup_r+0xc6>
 80074f4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80074f8:	d1ba      	bne.n	8007470 <__swsetup_r+0x30>
 80074fa:	bd70      	pop	{r4, r5, r6, pc}
 80074fc:	0781      	lsls	r1, r0, #30
 80074fe:	bf58      	it	pl
 8007500:	6963      	ldrpl	r3, [r4, #20]
 8007502:	60a3      	str	r3, [r4, #8]
 8007504:	e7f4      	b.n	80074f0 <__swsetup_r+0xb0>
 8007506:	2000      	movs	r0, #0
 8007508:	e7f7      	b.n	80074fa <__swsetup_r+0xba>
 800750a:	bf00      	nop
 800750c:	2000000c 	.word	0x2000000c
 8007510:	08009930 	.word	0x08009930
 8007514:	08009950 	.word	0x08009950
 8007518:	08009910 	.word	0x08009910

0800751c <quorem>:
 800751c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007520:	6903      	ldr	r3, [r0, #16]
 8007522:	690c      	ldr	r4, [r1, #16]
 8007524:	42a3      	cmp	r3, r4
 8007526:	4607      	mov	r7, r0
 8007528:	f2c0 8081 	blt.w	800762e <quorem+0x112>
 800752c:	3c01      	subs	r4, #1
 800752e:	f101 0814 	add.w	r8, r1, #20
 8007532:	f100 0514 	add.w	r5, r0, #20
 8007536:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800753a:	9301      	str	r3, [sp, #4]
 800753c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007540:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007544:	3301      	adds	r3, #1
 8007546:	429a      	cmp	r2, r3
 8007548:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800754c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007550:	fbb2 f6f3 	udiv	r6, r2, r3
 8007554:	d331      	bcc.n	80075ba <quorem+0x9e>
 8007556:	f04f 0e00 	mov.w	lr, #0
 800755a:	4640      	mov	r0, r8
 800755c:	46ac      	mov	ip, r5
 800755e:	46f2      	mov	sl, lr
 8007560:	f850 2b04 	ldr.w	r2, [r0], #4
 8007564:	b293      	uxth	r3, r2
 8007566:	fb06 e303 	mla	r3, r6, r3, lr
 800756a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800756e:	b29b      	uxth	r3, r3
 8007570:	ebaa 0303 	sub.w	r3, sl, r3
 8007574:	f8dc a000 	ldr.w	sl, [ip]
 8007578:	0c12      	lsrs	r2, r2, #16
 800757a:	fa13 f38a 	uxtah	r3, r3, sl
 800757e:	fb06 e202 	mla	r2, r6, r2, lr
 8007582:	9300      	str	r3, [sp, #0]
 8007584:	9b00      	ldr	r3, [sp, #0]
 8007586:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800758a:	b292      	uxth	r2, r2
 800758c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007590:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007594:	f8bd 3000 	ldrh.w	r3, [sp]
 8007598:	4581      	cmp	r9, r0
 800759a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800759e:	f84c 3b04 	str.w	r3, [ip], #4
 80075a2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80075a6:	d2db      	bcs.n	8007560 <quorem+0x44>
 80075a8:	f855 300b 	ldr.w	r3, [r5, fp]
 80075ac:	b92b      	cbnz	r3, 80075ba <quorem+0x9e>
 80075ae:	9b01      	ldr	r3, [sp, #4]
 80075b0:	3b04      	subs	r3, #4
 80075b2:	429d      	cmp	r5, r3
 80075b4:	461a      	mov	r2, r3
 80075b6:	d32e      	bcc.n	8007616 <quorem+0xfa>
 80075b8:	613c      	str	r4, [r7, #16]
 80075ba:	4638      	mov	r0, r7
 80075bc:	f001 fae6 	bl	8008b8c <__mcmp>
 80075c0:	2800      	cmp	r0, #0
 80075c2:	db24      	blt.n	800760e <quorem+0xf2>
 80075c4:	3601      	adds	r6, #1
 80075c6:	4628      	mov	r0, r5
 80075c8:	f04f 0c00 	mov.w	ip, #0
 80075cc:	f858 2b04 	ldr.w	r2, [r8], #4
 80075d0:	f8d0 e000 	ldr.w	lr, [r0]
 80075d4:	b293      	uxth	r3, r2
 80075d6:	ebac 0303 	sub.w	r3, ip, r3
 80075da:	0c12      	lsrs	r2, r2, #16
 80075dc:	fa13 f38e 	uxtah	r3, r3, lr
 80075e0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80075e4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80075e8:	b29b      	uxth	r3, r3
 80075ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80075ee:	45c1      	cmp	r9, r8
 80075f0:	f840 3b04 	str.w	r3, [r0], #4
 80075f4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80075f8:	d2e8      	bcs.n	80075cc <quorem+0xb0>
 80075fa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80075fe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007602:	b922      	cbnz	r2, 800760e <quorem+0xf2>
 8007604:	3b04      	subs	r3, #4
 8007606:	429d      	cmp	r5, r3
 8007608:	461a      	mov	r2, r3
 800760a:	d30a      	bcc.n	8007622 <quorem+0x106>
 800760c:	613c      	str	r4, [r7, #16]
 800760e:	4630      	mov	r0, r6
 8007610:	b003      	add	sp, #12
 8007612:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007616:	6812      	ldr	r2, [r2, #0]
 8007618:	3b04      	subs	r3, #4
 800761a:	2a00      	cmp	r2, #0
 800761c:	d1cc      	bne.n	80075b8 <quorem+0x9c>
 800761e:	3c01      	subs	r4, #1
 8007620:	e7c7      	b.n	80075b2 <quorem+0x96>
 8007622:	6812      	ldr	r2, [r2, #0]
 8007624:	3b04      	subs	r3, #4
 8007626:	2a00      	cmp	r2, #0
 8007628:	d1f0      	bne.n	800760c <quorem+0xf0>
 800762a:	3c01      	subs	r4, #1
 800762c:	e7eb      	b.n	8007606 <quorem+0xea>
 800762e:	2000      	movs	r0, #0
 8007630:	e7ee      	b.n	8007610 <quorem+0xf4>
 8007632:	0000      	movs	r0, r0
 8007634:	0000      	movs	r0, r0
	...

08007638 <_dtoa_r>:
 8007638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800763c:	ed2d 8b04 	vpush	{d8-d9}
 8007640:	ec57 6b10 	vmov	r6, r7, d0
 8007644:	b093      	sub	sp, #76	; 0x4c
 8007646:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007648:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800764c:	9106      	str	r1, [sp, #24]
 800764e:	ee10 aa10 	vmov	sl, s0
 8007652:	4604      	mov	r4, r0
 8007654:	9209      	str	r2, [sp, #36]	; 0x24
 8007656:	930c      	str	r3, [sp, #48]	; 0x30
 8007658:	46bb      	mov	fp, r7
 800765a:	b975      	cbnz	r5, 800767a <_dtoa_r+0x42>
 800765c:	2010      	movs	r0, #16
 800765e:	f000 fffd 	bl	800865c <malloc>
 8007662:	4602      	mov	r2, r0
 8007664:	6260      	str	r0, [r4, #36]	; 0x24
 8007666:	b920      	cbnz	r0, 8007672 <_dtoa_r+0x3a>
 8007668:	4ba7      	ldr	r3, [pc, #668]	; (8007908 <_dtoa_r+0x2d0>)
 800766a:	21ea      	movs	r1, #234	; 0xea
 800766c:	48a7      	ldr	r0, [pc, #668]	; (800790c <_dtoa_r+0x2d4>)
 800766e:	f001 fe45 	bl	80092fc <__assert_func>
 8007672:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007676:	6005      	str	r5, [r0, #0]
 8007678:	60c5      	str	r5, [r0, #12]
 800767a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800767c:	6819      	ldr	r1, [r3, #0]
 800767e:	b151      	cbz	r1, 8007696 <_dtoa_r+0x5e>
 8007680:	685a      	ldr	r2, [r3, #4]
 8007682:	604a      	str	r2, [r1, #4]
 8007684:	2301      	movs	r3, #1
 8007686:	4093      	lsls	r3, r2
 8007688:	608b      	str	r3, [r1, #8]
 800768a:	4620      	mov	r0, r4
 800768c:	f001 f83c 	bl	8008708 <_Bfree>
 8007690:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007692:	2200      	movs	r2, #0
 8007694:	601a      	str	r2, [r3, #0]
 8007696:	1e3b      	subs	r3, r7, #0
 8007698:	bfaa      	itet	ge
 800769a:	2300      	movge	r3, #0
 800769c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80076a0:	f8c8 3000 	strge.w	r3, [r8]
 80076a4:	4b9a      	ldr	r3, [pc, #616]	; (8007910 <_dtoa_r+0x2d8>)
 80076a6:	bfbc      	itt	lt
 80076a8:	2201      	movlt	r2, #1
 80076aa:	f8c8 2000 	strlt.w	r2, [r8]
 80076ae:	ea33 030b 	bics.w	r3, r3, fp
 80076b2:	d11b      	bne.n	80076ec <_dtoa_r+0xb4>
 80076b4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80076b6:	f242 730f 	movw	r3, #9999	; 0x270f
 80076ba:	6013      	str	r3, [r2, #0]
 80076bc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80076c0:	4333      	orrs	r3, r6
 80076c2:	f000 8592 	beq.w	80081ea <_dtoa_r+0xbb2>
 80076c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80076c8:	b963      	cbnz	r3, 80076e4 <_dtoa_r+0xac>
 80076ca:	4b92      	ldr	r3, [pc, #584]	; (8007914 <_dtoa_r+0x2dc>)
 80076cc:	e022      	b.n	8007714 <_dtoa_r+0xdc>
 80076ce:	4b92      	ldr	r3, [pc, #584]	; (8007918 <_dtoa_r+0x2e0>)
 80076d0:	9301      	str	r3, [sp, #4]
 80076d2:	3308      	adds	r3, #8
 80076d4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80076d6:	6013      	str	r3, [r2, #0]
 80076d8:	9801      	ldr	r0, [sp, #4]
 80076da:	b013      	add	sp, #76	; 0x4c
 80076dc:	ecbd 8b04 	vpop	{d8-d9}
 80076e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076e4:	4b8b      	ldr	r3, [pc, #556]	; (8007914 <_dtoa_r+0x2dc>)
 80076e6:	9301      	str	r3, [sp, #4]
 80076e8:	3303      	adds	r3, #3
 80076ea:	e7f3      	b.n	80076d4 <_dtoa_r+0x9c>
 80076ec:	2200      	movs	r2, #0
 80076ee:	2300      	movs	r3, #0
 80076f0:	4650      	mov	r0, sl
 80076f2:	4659      	mov	r1, fp
 80076f4:	f7f9 f9e8 	bl	8000ac8 <__aeabi_dcmpeq>
 80076f8:	ec4b ab19 	vmov	d9, sl, fp
 80076fc:	4680      	mov	r8, r0
 80076fe:	b158      	cbz	r0, 8007718 <_dtoa_r+0xe0>
 8007700:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007702:	2301      	movs	r3, #1
 8007704:	6013      	str	r3, [r2, #0]
 8007706:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007708:	2b00      	cmp	r3, #0
 800770a:	f000 856b 	beq.w	80081e4 <_dtoa_r+0xbac>
 800770e:	4883      	ldr	r0, [pc, #524]	; (800791c <_dtoa_r+0x2e4>)
 8007710:	6018      	str	r0, [r3, #0]
 8007712:	1e43      	subs	r3, r0, #1
 8007714:	9301      	str	r3, [sp, #4]
 8007716:	e7df      	b.n	80076d8 <_dtoa_r+0xa0>
 8007718:	ec4b ab10 	vmov	d0, sl, fp
 800771c:	aa10      	add	r2, sp, #64	; 0x40
 800771e:	a911      	add	r1, sp, #68	; 0x44
 8007720:	4620      	mov	r0, r4
 8007722:	f001 fad9 	bl	8008cd8 <__d2b>
 8007726:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800772a:	ee08 0a10 	vmov	s16, r0
 800772e:	2d00      	cmp	r5, #0
 8007730:	f000 8084 	beq.w	800783c <_dtoa_r+0x204>
 8007734:	ee19 3a90 	vmov	r3, s19
 8007738:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800773c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007740:	4656      	mov	r6, sl
 8007742:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007746:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800774a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800774e:	4b74      	ldr	r3, [pc, #464]	; (8007920 <_dtoa_r+0x2e8>)
 8007750:	2200      	movs	r2, #0
 8007752:	4630      	mov	r0, r6
 8007754:	4639      	mov	r1, r7
 8007756:	f7f8 fd97 	bl	8000288 <__aeabi_dsub>
 800775a:	a365      	add	r3, pc, #404	; (adr r3, 80078f0 <_dtoa_r+0x2b8>)
 800775c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007760:	f7f8 ff4a 	bl	80005f8 <__aeabi_dmul>
 8007764:	a364      	add	r3, pc, #400	; (adr r3, 80078f8 <_dtoa_r+0x2c0>)
 8007766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800776a:	f7f8 fd8f 	bl	800028c <__adddf3>
 800776e:	4606      	mov	r6, r0
 8007770:	4628      	mov	r0, r5
 8007772:	460f      	mov	r7, r1
 8007774:	f7f8 fed6 	bl	8000524 <__aeabi_i2d>
 8007778:	a361      	add	r3, pc, #388	; (adr r3, 8007900 <_dtoa_r+0x2c8>)
 800777a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800777e:	f7f8 ff3b 	bl	80005f8 <__aeabi_dmul>
 8007782:	4602      	mov	r2, r0
 8007784:	460b      	mov	r3, r1
 8007786:	4630      	mov	r0, r6
 8007788:	4639      	mov	r1, r7
 800778a:	f7f8 fd7f 	bl	800028c <__adddf3>
 800778e:	4606      	mov	r6, r0
 8007790:	460f      	mov	r7, r1
 8007792:	f7f9 f9e1 	bl	8000b58 <__aeabi_d2iz>
 8007796:	2200      	movs	r2, #0
 8007798:	9000      	str	r0, [sp, #0]
 800779a:	2300      	movs	r3, #0
 800779c:	4630      	mov	r0, r6
 800779e:	4639      	mov	r1, r7
 80077a0:	f7f9 f99c 	bl	8000adc <__aeabi_dcmplt>
 80077a4:	b150      	cbz	r0, 80077bc <_dtoa_r+0x184>
 80077a6:	9800      	ldr	r0, [sp, #0]
 80077a8:	f7f8 febc 	bl	8000524 <__aeabi_i2d>
 80077ac:	4632      	mov	r2, r6
 80077ae:	463b      	mov	r3, r7
 80077b0:	f7f9 f98a 	bl	8000ac8 <__aeabi_dcmpeq>
 80077b4:	b910      	cbnz	r0, 80077bc <_dtoa_r+0x184>
 80077b6:	9b00      	ldr	r3, [sp, #0]
 80077b8:	3b01      	subs	r3, #1
 80077ba:	9300      	str	r3, [sp, #0]
 80077bc:	9b00      	ldr	r3, [sp, #0]
 80077be:	2b16      	cmp	r3, #22
 80077c0:	d85a      	bhi.n	8007878 <_dtoa_r+0x240>
 80077c2:	9a00      	ldr	r2, [sp, #0]
 80077c4:	4b57      	ldr	r3, [pc, #348]	; (8007924 <_dtoa_r+0x2ec>)
 80077c6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80077ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077ce:	ec51 0b19 	vmov	r0, r1, d9
 80077d2:	f7f9 f983 	bl	8000adc <__aeabi_dcmplt>
 80077d6:	2800      	cmp	r0, #0
 80077d8:	d050      	beq.n	800787c <_dtoa_r+0x244>
 80077da:	9b00      	ldr	r3, [sp, #0]
 80077dc:	3b01      	subs	r3, #1
 80077de:	9300      	str	r3, [sp, #0]
 80077e0:	2300      	movs	r3, #0
 80077e2:	930b      	str	r3, [sp, #44]	; 0x2c
 80077e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80077e6:	1b5d      	subs	r5, r3, r5
 80077e8:	1e6b      	subs	r3, r5, #1
 80077ea:	9305      	str	r3, [sp, #20]
 80077ec:	bf45      	ittet	mi
 80077ee:	f1c5 0301 	rsbmi	r3, r5, #1
 80077f2:	9304      	strmi	r3, [sp, #16]
 80077f4:	2300      	movpl	r3, #0
 80077f6:	2300      	movmi	r3, #0
 80077f8:	bf4c      	ite	mi
 80077fa:	9305      	strmi	r3, [sp, #20]
 80077fc:	9304      	strpl	r3, [sp, #16]
 80077fe:	9b00      	ldr	r3, [sp, #0]
 8007800:	2b00      	cmp	r3, #0
 8007802:	db3d      	blt.n	8007880 <_dtoa_r+0x248>
 8007804:	9b05      	ldr	r3, [sp, #20]
 8007806:	9a00      	ldr	r2, [sp, #0]
 8007808:	920a      	str	r2, [sp, #40]	; 0x28
 800780a:	4413      	add	r3, r2
 800780c:	9305      	str	r3, [sp, #20]
 800780e:	2300      	movs	r3, #0
 8007810:	9307      	str	r3, [sp, #28]
 8007812:	9b06      	ldr	r3, [sp, #24]
 8007814:	2b09      	cmp	r3, #9
 8007816:	f200 8089 	bhi.w	800792c <_dtoa_r+0x2f4>
 800781a:	2b05      	cmp	r3, #5
 800781c:	bfc4      	itt	gt
 800781e:	3b04      	subgt	r3, #4
 8007820:	9306      	strgt	r3, [sp, #24]
 8007822:	9b06      	ldr	r3, [sp, #24]
 8007824:	f1a3 0302 	sub.w	r3, r3, #2
 8007828:	bfcc      	ite	gt
 800782a:	2500      	movgt	r5, #0
 800782c:	2501      	movle	r5, #1
 800782e:	2b03      	cmp	r3, #3
 8007830:	f200 8087 	bhi.w	8007942 <_dtoa_r+0x30a>
 8007834:	e8df f003 	tbb	[pc, r3]
 8007838:	59383a2d 	.word	0x59383a2d
 800783c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007840:	441d      	add	r5, r3
 8007842:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007846:	2b20      	cmp	r3, #32
 8007848:	bfc1      	itttt	gt
 800784a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800784e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007852:	fa0b f303 	lslgt.w	r3, fp, r3
 8007856:	fa26 f000 	lsrgt.w	r0, r6, r0
 800785a:	bfda      	itte	le
 800785c:	f1c3 0320 	rsble	r3, r3, #32
 8007860:	fa06 f003 	lslle.w	r0, r6, r3
 8007864:	4318      	orrgt	r0, r3
 8007866:	f7f8 fe4d 	bl	8000504 <__aeabi_ui2d>
 800786a:	2301      	movs	r3, #1
 800786c:	4606      	mov	r6, r0
 800786e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007872:	3d01      	subs	r5, #1
 8007874:	930e      	str	r3, [sp, #56]	; 0x38
 8007876:	e76a      	b.n	800774e <_dtoa_r+0x116>
 8007878:	2301      	movs	r3, #1
 800787a:	e7b2      	b.n	80077e2 <_dtoa_r+0x1aa>
 800787c:	900b      	str	r0, [sp, #44]	; 0x2c
 800787e:	e7b1      	b.n	80077e4 <_dtoa_r+0x1ac>
 8007880:	9b04      	ldr	r3, [sp, #16]
 8007882:	9a00      	ldr	r2, [sp, #0]
 8007884:	1a9b      	subs	r3, r3, r2
 8007886:	9304      	str	r3, [sp, #16]
 8007888:	4253      	negs	r3, r2
 800788a:	9307      	str	r3, [sp, #28]
 800788c:	2300      	movs	r3, #0
 800788e:	930a      	str	r3, [sp, #40]	; 0x28
 8007890:	e7bf      	b.n	8007812 <_dtoa_r+0x1da>
 8007892:	2300      	movs	r3, #0
 8007894:	9308      	str	r3, [sp, #32]
 8007896:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007898:	2b00      	cmp	r3, #0
 800789a:	dc55      	bgt.n	8007948 <_dtoa_r+0x310>
 800789c:	2301      	movs	r3, #1
 800789e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80078a2:	461a      	mov	r2, r3
 80078a4:	9209      	str	r2, [sp, #36]	; 0x24
 80078a6:	e00c      	b.n	80078c2 <_dtoa_r+0x28a>
 80078a8:	2301      	movs	r3, #1
 80078aa:	e7f3      	b.n	8007894 <_dtoa_r+0x25c>
 80078ac:	2300      	movs	r3, #0
 80078ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80078b0:	9308      	str	r3, [sp, #32]
 80078b2:	9b00      	ldr	r3, [sp, #0]
 80078b4:	4413      	add	r3, r2
 80078b6:	9302      	str	r3, [sp, #8]
 80078b8:	3301      	adds	r3, #1
 80078ba:	2b01      	cmp	r3, #1
 80078bc:	9303      	str	r3, [sp, #12]
 80078be:	bfb8      	it	lt
 80078c0:	2301      	movlt	r3, #1
 80078c2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80078c4:	2200      	movs	r2, #0
 80078c6:	6042      	str	r2, [r0, #4]
 80078c8:	2204      	movs	r2, #4
 80078ca:	f102 0614 	add.w	r6, r2, #20
 80078ce:	429e      	cmp	r6, r3
 80078d0:	6841      	ldr	r1, [r0, #4]
 80078d2:	d93d      	bls.n	8007950 <_dtoa_r+0x318>
 80078d4:	4620      	mov	r0, r4
 80078d6:	f000 fed7 	bl	8008688 <_Balloc>
 80078da:	9001      	str	r0, [sp, #4]
 80078dc:	2800      	cmp	r0, #0
 80078de:	d13b      	bne.n	8007958 <_dtoa_r+0x320>
 80078e0:	4b11      	ldr	r3, [pc, #68]	; (8007928 <_dtoa_r+0x2f0>)
 80078e2:	4602      	mov	r2, r0
 80078e4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80078e8:	e6c0      	b.n	800766c <_dtoa_r+0x34>
 80078ea:	2301      	movs	r3, #1
 80078ec:	e7df      	b.n	80078ae <_dtoa_r+0x276>
 80078ee:	bf00      	nop
 80078f0:	636f4361 	.word	0x636f4361
 80078f4:	3fd287a7 	.word	0x3fd287a7
 80078f8:	8b60c8b3 	.word	0x8b60c8b3
 80078fc:	3fc68a28 	.word	0x3fc68a28
 8007900:	509f79fb 	.word	0x509f79fb
 8007904:	3fd34413 	.word	0x3fd34413
 8007908:	0800988d 	.word	0x0800988d
 800790c:	080098a4 	.word	0x080098a4
 8007910:	7ff00000 	.word	0x7ff00000
 8007914:	08009889 	.word	0x08009889
 8007918:	08009880 	.word	0x08009880
 800791c:	0800985d 	.word	0x0800985d
 8007920:	3ff80000 	.word	0x3ff80000
 8007924:	080099f8 	.word	0x080099f8
 8007928:	080098ff 	.word	0x080098ff
 800792c:	2501      	movs	r5, #1
 800792e:	2300      	movs	r3, #0
 8007930:	9306      	str	r3, [sp, #24]
 8007932:	9508      	str	r5, [sp, #32]
 8007934:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007938:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800793c:	2200      	movs	r2, #0
 800793e:	2312      	movs	r3, #18
 8007940:	e7b0      	b.n	80078a4 <_dtoa_r+0x26c>
 8007942:	2301      	movs	r3, #1
 8007944:	9308      	str	r3, [sp, #32]
 8007946:	e7f5      	b.n	8007934 <_dtoa_r+0x2fc>
 8007948:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800794a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800794e:	e7b8      	b.n	80078c2 <_dtoa_r+0x28a>
 8007950:	3101      	adds	r1, #1
 8007952:	6041      	str	r1, [r0, #4]
 8007954:	0052      	lsls	r2, r2, #1
 8007956:	e7b8      	b.n	80078ca <_dtoa_r+0x292>
 8007958:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800795a:	9a01      	ldr	r2, [sp, #4]
 800795c:	601a      	str	r2, [r3, #0]
 800795e:	9b03      	ldr	r3, [sp, #12]
 8007960:	2b0e      	cmp	r3, #14
 8007962:	f200 809d 	bhi.w	8007aa0 <_dtoa_r+0x468>
 8007966:	2d00      	cmp	r5, #0
 8007968:	f000 809a 	beq.w	8007aa0 <_dtoa_r+0x468>
 800796c:	9b00      	ldr	r3, [sp, #0]
 800796e:	2b00      	cmp	r3, #0
 8007970:	dd32      	ble.n	80079d8 <_dtoa_r+0x3a0>
 8007972:	4ab7      	ldr	r2, [pc, #732]	; (8007c50 <_dtoa_r+0x618>)
 8007974:	f003 030f 	and.w	r3, r3, #15
 8007978:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800797c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007980:	9b00      	ldr	r3, [sp, #0]
 8007982:	05d8      	lsls	r0, r3, #23
 8007984:	ea4f 1723 	mov.w	r7, r3, asr #4
 8007988:	d516      	bpl.n	80079b8 <_dtoa_r+0x380>
 800798a:	4bb2      	ldr	r3, [pc, #712]	; (8007c54 <_dtoa_r+0x61c>)
 800798c:	ec51 0b19 	vmov	r0, r1, d9
 8007990:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007994:	f7f8 ff5a 	bl	800084c <__aeabi_ddiv>
 8007998:	f007 070f 	and.w	r7, r7, #15
 800799c:	4682      	mov	sl, r0
 800799e:	468b      	mov	fp, r1
 80079a0:	2503      	movs	r5, #3
 80079a2:	4eac      	ldr	r6, [pc, #688]	; (8007c54 <_dtoa_r+0x61c>)
 80079a4:	b957      	cbnz	r7, 80079bc <_dtoa_r+0x384>
 80079a6:	4642      	mov	r2, r8
 80079a8:	464b      	mov	r3, r9
 80079aa:	4650      	mov	r0, sl
 80079ac:	4659      	mov	r1, fp
 80079ae:	f7f8 ff4d 	bl	800084c <__aeabi_ddiv>
 80079b2:	4682      	mov	sl, r0
 80079b4:	468b      	mov	fp, r1
 80079b6:	e028      	b.n	8007a0a <_dtoa_r+0x3d2>
 80079b8:	2502      	movs	r5, #2
 80079ba:	e7f2      	b.n	80079a2 <_dtoa_r+0x36a>
 80079bc:	07f9      	lsls	r1, r7, #31
 80079be:	d508      	bpl.n	80079d2 <_dtoa_r+0x39a>
 80079c0:	4640      	mov	r0, r8
 80079c2:	4649      	mov	r1, r9
 80079c4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80079c8:	f7f8 fe16 	bl	80005f8 <__aeabi_dmul>
 80079cc:	3501      	adds	r5, #1
 80079ce:	4680      	mov	r8, r0
 80079d0:	4689      	mov	r9, r1
 80079d2:	107f      	asrs	r7, r7, #1
 80079d4:	3608      	adds	r6, #8
 80079d6:	e7e5      	b.n	80079a4 <_dtoa_r+0x36c>
 80079d8:	f000 809b 	beq.w	8007b12 <_dtoa_r+0x4da>
 80079dc:	9b00      	ldr	r3, [sp, #0]
 80079de:	4f9d      	ldr	r7, [pc, #628]	; (8007c54 <_dtoa_r+0x61c>)
 80079e0:	425e      	negs	r6, r3
 80079e2:	4b9b      	ldr	r3, [pc, #620]	; (8007c50 <_dtoa_r+0x618>)
 80079e4:	f006 020f 	and.w	r2, r6, #15
 80079e8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80079ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079f0:	ec51 0b19 	vmov	r0, r1, d9
 80079f4:	f7f8 fe00 	bl	80005f8 <__aeabi_dmul>
 80079f8:	1136      	asrs	r6, r6, #4
 80079fa:	4682      	mov	sl, r0
 80079fc:	468b      	mov	fp, r1
 80079fe:	2300      	movs	r3, #0
 8007a00:	2502      	movs	r5, #2
 8007a02:	2e00      	cmp	r6, #0
 8007a04:	d17a      	bne.n	8007afc <_dtoa_r+0x4c4>
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d1d3      	bne.n	80079b2 <_dtoa_r+0x37a>
 8007a0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	f000 8082 	beq.w	8007b16 <_dtoa_r+0x4de>
 8007a12:	4b91      	ldr	r3, [pc, #580]	; (8007c58 <_dtoa_r+0x620>)
 8007a14:	2200      	movs	r2, #0
 8007a16:	4650      	mov	r0, sl
 8007a18:	4659      	mov	r1, fp
 8007a1a:	f7f9 f85f 	bl	8000adc <__aeabi_dcmplt>
 8007a1e:	2800      	cmp	r0, #0
 8007a20:	d079      	beq.n	8007b16 <_dtoa_r+0x4de>
 8007a22:	9b03      	ldr	r3, [sp, #12]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d076      	beq.n	8007b16 <_dtoa_r+0x4de>
 8007a28:	9b02      	ldr	r3, [sp, #8]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	dd36      	ble.n	8007a9c <_dtoa_r+0x464>
 8007a2e:	9b00      	ldr	r3, [sp, #0]
 8007a30:	4650      	mov	r0, sl
 8007a32:	4659      	mov	r1, fp
 8007a34:	1e5f      	subs	r7, r3, #1
 8007a36:	2200      	movs	r2, #0
 8007a38:	4b88      	ldr	r3, [pc, #544]	; (8007c5c <_dtoa_r+0x624>)
 8007a3a:	f7f8 fddd 	bl	80005f8 <__aeabi_dmul>
 8007a3e:	9e02      	ldr	r6, [sp, #8]
 8007a40:	4682      	mov	sl, r0
 8007a42:	468b      	mov	fp, r1
 8007a44:	3501      	adds	r5, #1
 8007a46:	4628      	mov	r0, r5
 8007a48:	f7f8 fd6c 	bl	8000524 <__aeabi_i2d>
 8007a4c:	4652      	mov	r2, sl
 8007a4e:	465b      	mov	r3, fp
 8007a50:	f7f8 fdd2 	bl	80005f8 <__aeabi_dmul>
 8007a54:	4b82      	ldr	r3, [pc, #520]	; (8007c60 <_dtoa_r+0x628>)
 8007a56:	2200      	movs	r2, #0
 8007a58:	f7f8 fc18 	bl	800028c <__adddf3>
 8007a5c:	46d0      	mov	r8, sl
 8007a5e:	46d9      	mov	r9, fp
 8007a60:	4682      	mov	sl, r0
 8007a62:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8007a66:	2e00      	cmp	r6, #0
 8007a68:	d158      	bne.n	8007b1c <_dtoa_r+0x4e4>
 8007a6a:	4b7e      	ldr	r3, [pc, #504]	; (8007c64 <_dtoa_r+0x62c>)
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	4640      	mov	r0, r8
 8007a70:	4649      	mov	r1, r9
 8007a72:	f7f8 fc09 	bl	8000288 <__aeabi_dsub>
 8007a76:	4652      	mov	r2, sl
 8007a78:	465b      	mov	r3, fp
 8007a7a:	4680      	mov	r8, r0
 8007a7c:	4689      	mov	r9, r1
 8007a7e:	f7f9 f84b 	bl	8000b18 <__aeabi_dcmpgt>
 8007a82:	2800      	cmp	r0, #0
 8007a84:	f040 8295 	bne.w	8007fb2 <_dtoa_r+0x97a>
 8007a88:	4652      	mov	r2, sl
 8007a8a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007a8e:	4640      	mov	r0, r8
 8007a90:	4649      	mov	r1, r9
 8007a92:	f7f9 f823 	bl	8000adc <__aeabi_dcmplt>
 8007a96:	2800      	cmp	r0, #0
 8007a98:	f040 8289 	bne.w	8007fae <_dtoa_r+0x976>
 8007a9c:	ec5b ab19 	vmov	sl, fp, d9
 8007aa0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	f2c0 8148 	blt.w	8007d38 <_dtoa_r+0x700>
 8007aa8:	9a00      	ldr	r2, [sp, #0]
 8007aaa:	2a0e      	cmp	r2, #14
 8007aac:	f300 8144 	bgt.w	8007d38 <_dtoa_r+0x700>
 8007ab0:	4b67      	ldr	r3, [pc, #412]	; (8007c50 <_dtoa_r+0x618>)
 8007ab2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007ab6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007aba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	f280 80d5 	bge.w	8007c6c <_dtoa_r+0x634>
 8007ac2:	9b03      	ldr	r3, [sp, #12]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	f300 80d1 	bgt.w	8007c6c <_dtoa_r+0x634>
 8007aca:	f040 826f 	bne.w	8007fac <_dtoa_r+0x974>
 8007ace:	4b65      	ldr	r3, [pc, #404]	; (8007c64 <_dtoa_r+0x62c>)
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	4640      	mov	r0, r8
 8007ad4:	4649      	mov	r1, r9
 8007ad6:	f7f8 fd8f 	bl	80005f8 <__aeabi_dmul>
 8007ada:	4652      	mov	r2, sl
 8007adc:	465b      	mov	r3, fp
 8007ade:	f7f9 f811 	bl	8000b04 <__aeabi_dcmpge>
 8007ae2:	9e03      	ldr	r6, [sp, #12]
 8007ae4:	4637      	mov	r7, r6
 8007ae6:	2800      	cmp	r0, #0
 8007ae8:	f040 8245 	bne.w	8007f76 <_dtoa_r+0x93e>
 8007aec:	9d01      	ldr	r5, [sp, #4]
 8007aee:	2331      	movs	r3, #49	; 0x31
 8007af0:	f805 3b01 	strb.w	r3, [r5], #1
 8007af4:	9b00      	ldr	r3, [sp, #0]
 8007af6:	3301      	adds	r3, #1
 8007af8:	9300      	str	r3, [sp, #0]
 8007afa:	e240      	b.n	8007f7e <_dtoa_r+0x946>
 8007afc:	07f2      	lsls	r2, r6, #31
 8007afe:	d505      	bpl.n	8007b0c <_dtoa_r+0x4d4>
 8007b00:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b04:	f7f8 fd78 	bl	80005f8 <__aeabi_dmul>
 8007b08:	3501      	adds	r5, #1
 8007b0a:	2301      	movs	r3, #1
 8007b0c:	1076      	asrs	r6, r6, #1
 8007b0e:	3708      	adds	r7, #8
 8007b10:	e777      	b.n	8007a02 <_dtoa_r+0x3ca>
 8007b12:	2502      	movs	r5, #2
 8007b14:	e779      	b.n	8007a0a <_dtoa_r+0x3d2>
 8007b16:	9f00      	ldr	r7, [sp, #0]
 8007b18:	9e03      	ldr	r6, [sp, #12]
 8007b1a:	e794      	b.n	8007a46 <_dtoa_r+0x40e>
 8007b1c:	9901      	ldr	r1, [sp, #4]
 8007b1e:	4b4c      	ldr	r3, [pc, #304]	; (8007c50 <_dtoa_r+0x618>)
 8007b20:	4431      	add	r1, r6
 8007b22:	910d      	str	r1, [sp, #52]	; 0x34
 8007b24:	9908      	ldr	r1, [sp, #32]
 8007b26:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007b2a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007b2e:	2900      	cmp	r1, #0
 8007b30:	d043      	beq.n	8007bba <_dtoa_r+0x582>
 8007b32:	494d      	ldr	r1, [pc, #308]	; (8007c68 <_dtoa_r+0x630>)
 8007b34:	2000      	movs	r0, #0
 8007b36:	f7f8 fe89 	bl	800084c <__aeabi_ddiv>
 8007b3a:	4652      	mov	r2, sl
 8007b3c:	465b      	mov	r3, fp
 8007b3e:	f7f8 fba3 	bl	8000288 <__aeabi_dsub>
 8007b42:	9d01      	ldr	r5, [sp, #4]
 8007b44:	4682      	mov	sl, r0
 8007b46:	468b      	mov	fp, r1
 8007b48:	4649      	mov	r1, r9
 8007b4a:	4640      	mov	r0, r8
 8007b4c:	f7f9 f804 	bl	8000b58 <__aeabi_d2iz>
 8007b50:	4606      	mov	r6, r0
 8007b52:	f7f8 fce7 	bl	8000524 <__aeabi_i2d>
 8007b56:	4602      	mov	r2, r0
 8007b58:	460b      	mov	r3, r1
 8007b5a:	4640      	mov	r0, r8
 8007b5c:	4649      	mov	r1, r9
 8007b5e:	f7f8 fb93 	bl	8000288 <__aeabi_dsub>
 8007b62:	3630      	adds	r6, #48	; 0x30
 8007b64:	f805 6b01 	strb.w	r6, [r5], #1
 8007b68:	4652      	mov	r2, sl
 8007b6a:	465b      	mov	r3, fp
 8007b6c:	4680      	mov	r8, r0
 8007b6e:	4689      	mov	r9, r1
 8007b70:	f7f8 ffb4 	bl	8000adc <__aeabi_dcmplt>
 8007b74:	2800      	cmp	r0, #0
 8007b76:	d163      	bne.n	8007c40 <_dtoa_r+0x608>
 8007b78:	4642      	mov	r2, r8
 8007b7a:	464b      	mov	r3, r9
 8007b7c:	4936      	ldr	r1, [pc, #216]	; (8007c58 <_dtoa_r+0x620>)
 8007b7e:	2000      	movs	r0, #0
 8007b80:	f7f8 fb82 	bl	8000288 <__aeabi_dsub>
 8007b84:	4652      	mov	r2, sl
 8007b86:	465b      	mov	r3, fp
 8007b88:	f7f8 ffa8 	bl	8000adc <__aeabi_dcmplt>
 8007b8c:	2800      	cmp	r0, #0
 8007b8e:	f040 80b5 	bne.w	8007cfc <_dtoa_r+0x6c4>
 8007b92:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007b94:	429d      	cmp	r5, r3
 8007b96:	d081      	beq.n	8007a9c <_dtoa_r+0x464>
 8007b98:	4b30      	ldr	r3, [pc, #192]	; (8007c5c <_dtoa_r+0x624>)
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	4650      	mov	r0, sl
 8007b9e:	4659      	mov	r1, fp
 8007ba0:	f7f8 fd2a 	bl	80005f8 <__aeabi_dmul>
 8007ba4:	4b2d      	ldr	r3, [pc, #180]	; (8007c5c <_dtoa_r+0x624>)
 8007ba6:	4682      	mov	sl, r0
 8007ba8:	468b      	mov	fp, r1
 8007baa:	4640      	mov	r0, r8
 8007bac:	4649      	mov	r1, r9
 8007bae:	2200      	movs	r2, #0
 8007bb0:	f7f8 fd22 	bl	80005f8 <__aeabi_dmul>
 8007bb4:	4680      	mov	r8, r0
 8007bb6:	4689      	mov	r9, r1
 8007bb8:	e7c6      	b.n	8007b48 <_dtoa_r+0x510>
 8007bba:	4650      	mov	r0, sl
 8007bbc:	4659      	mov	r1, fp
 8007bbe:	f7f8 fd1b 	bl	80005f8 <__aeabi_dmul>
 8007bc2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007bc4:	9d01      	ldr	r5, [sp, #4]
 8007bc6:	930f      	str	r3, [sp, #60]	; 0x3c
 8007bc8:	4682      	mov	sl, r0
 8007bca:	468b      	mov	fp, r1
 8007bcc:	4649      	mov	r1, r9
 8007bce:	4640      	mov	r0, r8
 8007bd0:	f7f8 ffc2 	bl	8000b58 <__aeabi_d2iz>
 8007bd4:	4606      	mov	r6, r0
 8007bd6:	f7f8 fca5 	bl	8000524 <__aeabi_i2d>
 8007bda:	3630      	adds	r6, #48	; 0x30
 8007bdc:	4602      	mov	r2, r0
 8007bde:	460b      	mov	r3, r1
 8007be0:	4640      	mov	r0, r8
 8007be2:	4649      	mov	r1, r9
 8007be4:	f7f8 fb50 	bl	8000288 <__aeabi_dsub>
 8007be8:	f805 6b01 	strb.w	r6, [r5], #1
 8007bec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007bee:	429d      	cmp	r5, r3
 8007bf0:	4680      	mov	r8, r0
 8007bf2:	4689      	mov	r9, r1
 8007bf4:	f04f 0200 	mov.w	r2, #0
 8007bf8:	d124      	bne.n	8007c44 <_dtoa_r+0x60c>
 8007bfa:	4b1b      	ldr	r3, [pc, #108]	; (8007c68 <_dtoa_r+0x630>)
 8007bfc:	4650      	mov	r0, sl
 8007bfe:	4659      	mov	r1, fp
 8007c00:	f7f8 fb44 	bl	800028c <__adddf3>
 8007c04:	4602      	mov	r2, r0
 8007c06:	460b      	mov	r3, r1
 8007c08:	4640      	mov	r0, r8
 8007c0a:	4649      	mov	r1, r9
 8007c0c:	f7f8 ff84 	bl	8000b18 <__aeabi_dcmpgt>
 8007c10:	2800      	cmp	r0, #0
 8007c12:	d173      	bne.n	8007cfc <_dtoa_r+0x6c4>
 8007c14:	4652      	mov	r2, sl
 8007c16:	465b      	mov	r3, fp
 8007c18:	4913      	ldr	r1, [pc, #76]	; (8007c68 <_dtoa_r+0x630>)
 8007c1a:	2000      	movs	r0, #0
 8007c1c:	f7f8 fb34 	bl	8000288 <__aeabi_dsub>
 8007c20:	4602      	mov	r2, r0
 8007c22:	460b      	mov	r3, r1
 8007c24:	4640      	mov	r0, r8
 8007c26:	4649      	mov	r1, r9
 8007c28:	f7f8 ff58 	bl	8000adc <__aeabi_dcmplt>
 8007c2c:	2800      	cmp	r0, #0
 8007c2e:	f43f af35 	beq.w	8007a9c <_dtoa_r+0x464>
 8007c32:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007c34:	1e6b      	subs	r3, r5, #1
 8007c36:	930f      	str	r3, [sp, #60]	; 0x3c
 8007c38:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007c3c:	2b30      	cmp	r3, #48	; 0x30
 8007c3e:	d0f8      	beq.n	8007c32 <_dtoa_r+0x5fa>
 8007c40:	9700      	str	r7, [sp, #0]
 8007c42:	e049      	b.n	8007cd8 <_dtoa_r+0x6a0>
 8007c44:	4b05      	ldr	r3, [pc, #20]	; (8007c5c <_dtoa_r+0x624>)
 8007c46:	f7f8 fcd7 	bl	80005f8 <__aeabi_dmul>
 8007c4a:	4680      	mov	r8, r0
 8007c4c:	4689      	mov	r9, r1
 8007c4e:	e7bd      	b.n	8007bcc <_dtoa_r+0x594>
 8007c50:	080099f8 	.word	0x080099f8
 8007c54:	080099d0 	.word	0x080099d0
 8007c58:	3ff00000 	.word	0x3ff00000
 8007c5c:	40240000 	.word	0x40240000
 8007c60:	401c0000 	.word	0x401c0000
 8007c64:	40140000 	.word	0x40140000
 8007c68:	3fe00000 	.word	0x3fe00000
 8007c6c:	9d01      	ldr	r5, [sp, #4]
 8007c6e:	4656      	mov	r6, sl
 8007c70:	465f      	mov	r7, fp
 8007c72:	4642      	mov	r2, r8
 8007c74:	464b      	mov	r3, r9
 8007c76:	4630      	mov	r0, r6
 8007c78:	4639      	mov	r1, r7
 8007c7a:	f7f8 fde7 	bl	800084c <__aeabi_ddiv>
 8007c7e:	f7f8 ff6b 	bl	8000b58 <__aeabi_d2iz>
 8007c82:	4682      	mov	sl, r0
 8007c84:	f7f8 fc4e 	bl	8000524 <__aeabi_i2d>
 8007c88:	4642      	mov	r2, r8
 8007c8a:	464b      	mov	r3, r9
 8007c8c:	f7f8 fcb4 	bl	80005f8 <__aeabi_dmul>
 8007c90:	4602      	mov	r2, r0
 8007c92:	460b      	mov	r3, r1
 8007c94:	4630      	mov	r0, r6
 8007c96:	4639      	mov	r1, r7
 8007c98:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8007c9c:	f7f8 faf4 	bl	8000288 <__aeabi_dsub>
 8007ca0:	f805 6b01 	strb.w	r6, [r5], #1
 8007ca4:	9e01      	ldr	r6, [sp, #4]
 8007ca6:	9f03      	ldr	r7, [sp, #12]
 8007ca8:	1bae      	subs	r6, r5, r6
 8007caa:	42b7      	cmp	r7, r6
 8007cac:	4602      	mov	r2, r0
 8007cae:	460b      	mov	r3, r1
 8007cb0:	d135      	bne.n	8007d1e <_dtoa_r+0x6e6>
 8007cb2:	f7f8 faeb 	bl	800028c <__adddf3>
 8007cb6:	4642      	mov	r2, r8
 8007cb8:	464b      	mov	r3, r9
 8007cba:	4606      	mov	r6, r0
 8007cbc:	460f      	mov	r7, r1
 8007cbe:	f7f8 ff2b 	bl	8000b18 <__aeabi_dcmpgt>
 8007cc2:	b9d0      	cbnz	r0, 8007cfa <_dtoa_r+0x6c2>
 8007cc4:	4642      	mov	r2, r8
 8007cc6:	464b      	mov	r3, r9
 8007cc8:	4630      	mov	r0, r6
 8007cca:	4639      	mov	r1, r7
 8007ccc:	f7f8 fefc 	bl	8000ac8 <__aeabi_dcmpeq>
 8007cd0:	b110      	cbz	r0, 8007cd8 <_dtoa_r+0x6a0>
 8007cd2:	f01a 0f01 	tst.w	sl, #1
 8007cd6:	d110      	bne.n	8007cfa <_dtoa_r+0x6c2>
 8007cd8:	4620      	mov	r0, r4
 8007cda:	ee18 1a10 	vmov	r1, s16
 8007cde:	f000 fd13 	bl	8008708 <_Bfree>
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	9800      	ldr	r0, [sp, #0]
 8007ce6:	702b      	strb	r3, [r5, #0]
 8007ce8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007cea:	3001      	adds	r0, #1
 8007cec:	6018      	str	r0, [r3, #0]
 8007cee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	f43f acf1 	beq.w	80076d8 <_dtoa_r+0xa0>
 8007cf6:	601d      	str	r5, [r3, #0]
 8007cf8:	e4ee      	b.n	80076d8 <_dtoa_r+0xa0>
 8007cfa:	9f00      	ldr	r7, [sp, #0]
 8007cfc:	462b      	mov	r3, r5
 8007cfe:	461d      	mov	r5, r3
 8007d00:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007d04:	2a39      	cmp	r2, #57	; 0x39
 8007d06:	d106      	bne.n	8007d16 <_dtoa_r+0x6de>
 8007d08:	9a01      	ldr	r2, [sp, #4]
 8007d0a:	429a      	cmp	r2, r3
 8007d0c:	d1f7      	bne.n	8007cfe <_dtoa_r+0x6c6>
 8007d0e:	9901      	ldr	r1, [sp, #4]
 8007d10:	2230      	movs	r2, #48	; 0x30
 8007d12:	3701      	adds	r7, #1
 8007d14:	700a      	strb	r2, [r1, #0]
 8007d16:	781a      	ldrb	r2, [r3, #0]
 8007d18:	3201      	adds	r2, #1
 8007d1a:	701a      	strb	r2, [r3, #0]
 8007d1c:	e790      	b.n	8007c40 <_dtoa_r+0x608>
 8007d1e:	4ba6      	ldr	r3, [pc, #664]	; (8007fb8 <_dtoa_r+0x980>)
 8007d20:	2200      	movs	r2, #0
 8007d22:	f7f8 fc69 	bl	80005f8 <__aeabi_dmul>
 8007d26:	2200      	movs	r2, #0
 8007d28:	2300      	movs	r3, #0
 8007d2a:	4606      	mov	r6, r0
 8007d2c:	460f      	mov	r7, r1
 8007d2e:	f7f8 fecb 	bl	8000ac8 <__aeabi_dcmpeq>
 8007d32:	2800      	cmp	r0, #0
 8007d34:	d09d      	beq.n	8007c72 <_dtoa_r+0x63a>
 8007d36:	e7cf      	b.n	8007cd8 <_dtoa_r+0x6a0>
 8007d38:	9a08      	ldr	r2, [sp, #32]
 8007d3a:	2a00      	cmp	r2, #0
 8007d3c:	f000 80d7 	beq.w	8007eee <_dtoa_r+0x8b6>
 8007d40:	9a06      	ldr	r2, [sp, #24]
 8007d42:	2a01      	cmp	r2, #1
 8007d44:	f300 80ba 	bgt.w	8007ebc <_dtoa_r+0x884>
 8007d48:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007d4a:	2a00      	cmp	r2, #0
 8007d4c:	f000 80b2 	beq.w	8007eb4 <_dtoa_r+0x87c>
 8007d50:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007d54:	9e07      	ldr	r6, [sp, #28]
 8007d56:	9d04      	ldr	r5, [sp, #16]
 8007d58:	9a04      	ldr	r2, [sp, #16]
 8007d5a:	441a      	add	r2, r3
 8007d5c:	9204      	str	r2, [sp, #16]
 8007d5e:	9a05      	ldr	r2, [sp, #20]
 8007d60:	2101      	movs	r1, #1
 8007d62:	441a      	add	r2, r3
 8007d64:	4620      	mov	r0, r4
 8007d66:	9205      	str	r2, [sp, #20]
 8007d68:	f000 fd86 	bl	8008878 <__i2b>
 8007d6c:	4607      	mov	r7, r0
 8007d6e:	2d00      	cmp	r5, #0
 8007d70:	dd0c      	ble.n	8007d8c <_dtoa_r+0x754>
 8007d72:	9b05      	ldr	r3, [sp, #20]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	dd09      	ble.n	8007d8c <_dtoa_r+0x754>
 8007d78:	42ab      	cmp	r3, r5
 8007d7a:	9a04      	ldr	r2, [sp, #16]
 8007d7c:	bfa8      	it	ge
 8007d7e:	462b      	movge	r3, r5
 8007d80:	1ad2      	subs	r2, r2, r3
 8007d82:	9204      	str	r2, [sp, #16]
 8007d84:	9a05      	ldr	r2, [sp, #20]
 8007d86:	1aed      	subs	r5, r5, r3
 8007d88:	1ad3      	subs	r3, r2, r3
 8007d8a:	9305      	str	r3, [sp, #20]
 8007d8c:	9b07      	ldr	r3, [sp, #28]
 8007d8e:	b31b      	cbz	r3, 8007dd8 <_dtoa_r+0x7a0>
 8007d90:	9b08      	ldr	r3, [sp, #32]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	f000 80af 	beq.w	8007ef6 <_dtoa_r+0x8be>
 8007d98:	2e00      	cmp	r6, #0
 8007d9a:	dd13      	ble.n	8007dc4 <_dtoa_r+0x78c>
 8007d9c:	4639      	mov	r1, r7
 8007d9e:	4632      	mov	r2, r6
 8007da0:	4620      	mov	r0, r4
 8007da2:	f000 fe29 	bl	80089f8 <__pow5mult>
 8007da6:	ee18 2a10 	vmov	r2, s16
 8007daa:	4601      	mov	r1, r0
 8007dac:	4607      	mov	r7, r0
 8007dae:	4620      	mov	r0, r4
 8007db0:	f000 fd78 	bl	80088a4 <__multiply>
 8007db4:	ee18 1a10 	vmov	r1, s16
 8007db8:	4680      	mov	r8, r0
 8007dba:	4620      	mov	r0, r4
 8007dbc:	f000 fca4 	bl	8008708 <_Bfree>
 8007dc0:	ee08 8a10 	vmov	s16, r8
 8007dc4:	9b07      	ldr	r3, [sp, #28]
 8007dc6:	1b9a      	subs	r2, r3, r6
 8007dc8:	d006      	beq.n	8007dd8 <_dtoa_r+0x7a0>
 8007dca:	ee18 1a10 	vmov	r1, s16
 8007dce:	4620      	mov	r0, r4
 8007dd0:	f000 fe12 	bl	80089f8 <__pow5mult>
 8007dd4:	ee08 0a10 	vmov	s16, r0
 8007dd8:	2101      	movs	r1, #1
 8007dda:	4620      	mov	r0, r4
 8007ddc:	f000 fd4c 	bl	8008878 <__i2b>
 8007de0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	4606      	mov	r6, r0
 8007de6:	f340 8088 	ble.w	8007efa <_dtoa_r+0x8c2>
 8007dea:	461a      	mov	r2, r3
 8007dec:	4601      	mov	r1, r0
 8007dee:	4620      	mov	r0, r4
 8007df0:	f000 fe02 	bl	80089f8 <__pow5mult>
 8007df4:	9b06      	ldr	r3, [sp, #24]
 8007df6:	2b01      	cmp	r3, #1
 8007df8:	4606      	mov	r6, r0
 8007dfa:	f340 8081 	ble.w	8007f00 <_dtoa_r+0x8c8>
 8007dfe:	f04f 0800 	mov.w	r8, #0
 8007e02:	6933      	ldr	r3, [r6, #16]
 8007e04:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007e08:	6918      	ldr	r0, [r3, #16]
 8007e0a:	f000 fce5 	bl	80087d8 <__hi0bits>
 8007e0e:	f1c0 0020 	rsb	r0, r0, #32
 8007e12:	9b05      	ldr	r3, [sp, #20]
 8007e14:	4418      	add	r0, r3
 8007e16:	f010 001f 	ands.w	r0, r0, #31
 8007e1a:	f000 8092 	beq.w	8007f42 <_dtoa_r+0x90a>
 8007e1e:	f1c0 0320 	rsb	r3, r0, #32
 8007e22:	2b04      	cmp	r3, #4
 8007e24:	f340 808a 	ble.w	8007f3c <_dtoa_r+0x904>
 8007e28:	f1c0 001c 	rsb	r0, r0, #28
 8007e2c:	9b04      	ldr	r3, [sp, #16]
 8007e2e:	4403      	add	r3, r0
 8007e30:	9304      	str	r3, [sp, #16]
 8007e32:	9b05      	ldr	r3, [sp, #20]
 8007e34:	4403      	add	r3, r0
 8007e36:	4405      	add	r5, r0
 8007e38:	9305      	str	r3, [sp, #20]
 8007e3a:	9b04      	ldr	r3, [sp, #16]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	dd07      	ble.n	8007e50 <_dtoa_r+0x818>
 8007e40:	ee18 1a10 	vmov	r1, s16
 8007e44:	461a      	mov	r2, r3
 8007e46:	4620      	mov	r0, r4
 8007e48:	f000 fe30 	bl	8008aac <__lshift>
 8007e4c:	ee08 0a10 	vmov	s16, r0
 8007e50:	9b05      	ldr	r3, [sp, #20]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	dd05      	ble.n	8007e62 <_dtoa_r+0x82a>
 8007e56:	4631      	mov	r1, r6
 8007e58:	461a      	mov	r2, r3
 8007e5a:	4620      	mov	r0, r4
 8007e5c:	f000 fe26 	bl	8008aac <__lshift>
 8007e60:	4606      	mov	r6, r0
 8007e62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d06e      	beq.n	8007f46 <_dtoa_r+0x90e>
 8007e68:	ee18 0a10 	vmov	r0, s16
 8007e6c:	4631      	mov	r1, r6
 8007e6e:	f000 fe8d 	bl	8008b8c <__mcmp>
 8007e72:	2800      	cmp	r0, #0
 8007e74:	da67      	bge.n	8007f46 <_dtoa_r+0x90e>
 8007e76:	9b00      	ldr	r3, [sp, #0]
 8007e78:	3b01      	subs	r3, #1
 8007e7a:	ee18 1a10 	vmov	r1, s16
 8007e7e:	9300      	str	r3, [sp, #0]
 8007e80:	220a      	movs	r2, #10
 8007e82:	2300      	movs	r3, #0
 8007e84:	4620      	mov	r0, r4
 8007e86:	f000 fc61 	bl	800874c <__multadd>
 8007e8a:	9b08      	ldr	r3, [sp, #32]
 8007e8c:	ee08 0a10 	vmov	s16, r0
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	f000 81b1 	beq.w	80081f8 <_dtoa_r+0xbc0>
 8007e96:	2300      	movs	r3, #0
 8007e98:	4639      	mov	r1, r7
 8007e9a:	220a      	movs	r2, #10
 8007e9c:	4620      	mov	r0, r4
 8007e9e:	f000 fc55 	bl	800874c <__multadd>
 8007ea2:	9b02      	ldr	r3, [sp, #8]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	4607      	mov	r7, r0
 8007ea8:	f300 808e 	bgt.w	8007fc8 <_dtoa_r+0x990>
 8007eac:	9b06      	ldr	r3, [sp, #24]
 8007eae:	2b02      	cmp	r3, #2
 8007eb0:	dc51      	bgt.n	8007f56 <_dtoa_r+0x91e>
 8007eb2:	e089      	b.n	8007fc8 <_dtoa_r+0x990>
 8007eb4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007eb6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007eba:	e74b      	b.n	8007d54 <_dtoa_r+0x71c>
 8007ebc:	9b03      	ldr	r3, [sp, #12]
 8007ebe:	1e5e      	subs	r6, r3, #1
 8007ec0:	9b07      	ldr	r3, [sp, #28]
 8007ec2:	42b3      	cmp	r3, r6
 8007ec4:	bfbf      	itttt	lt
 8007ec6:	9b07      	ldrlt	r3, [sp, #28]
 8007ec8:	9607      	strlt	r6, [sp, #28]
 8007eca:	1af2      	sublt	r2, r6, r3
 8007ecc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007ece:	bfb6      	itet	lt
 8007ed0:	189b      	addlt	r3, r3, r2
 8007ed2:	1b9e      	subge	r6, r3, r6
 8007ed4:	930a      	strlt	r3, [sp, #40]	; 0x28
 8007ed6:	9b03      	ldr	r3, [sp, #12]
 8007ed8:	bfb8      	it	lt
 8007eda:	2600      	movlt	r6, #0
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	bfb7      	itett	lt
 8007ee0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8007ee4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8007ee8:	1a9d      	sublt	r5, r3, r2
 8007eea:	2300      	movlt	r3, #0
 8007eec:	e734      	b.n	8007d58 <_dtoa_r+0x720>
 8007eee:	9e07      	ldr	r6, [sp, #28]
 8007ef0:	9d04      	ldr	r5, [sp, #16]
 8007ef2:	9f08      	ldr	r7, [sp, #32]
 8007ef4:	e73b      	b.n	8007d6e <_dtoa_r+0x736>
 8007ef6:	9a07      	ldr	r2, [sp, #28]
 8007ef8:	e767      	b.n	8007dca <_dtoa_r+0x792>
 8007efa:	9b06      	ldr	r3, [sp, #24]
 8007efc:	2b01      	cmp	r3, #1
 8007efe:	dc18      	bgt.n	8007f32 <_dtoa_r+0x8fa>
 8007f00:	f1ba 0f00 	cmp.w	sl, #0
 8007f04:	d115      	bne.n	8007f32 <_dtoa_r+0x8fa>
 8007f06:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007f0a:	b993      	cbnz	r3, 8007f32 <_dtoa_r+0x8fa>
 8007f0c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007f10:	0d1b      	lsrs	r3, r3, #20
 8007f12:	051b      	lsls	r3, r3, #20
 8007f14:	b183      	cbz	r3, 8007f38 <_dtoa_r+0x900>
 8007f16:	9b04      	ldr	r3, [sp, #16]
 8007f18:	3301      	adds	r3, #1
 8007f1a:	9304      	str	r3, [sp, #16]
 8007f1c:	9b05      	ldr	r3, [sp, #20]
 8007f1e:	3301      	adds	r3, #1
 8007f20:	9305      	str	r3, [sp, #20]
 8007f22:	f04f 0801 	mov.w	r8, #1
 8007f26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	f47f af6a 	bne.w	8007e02 <_dtoa_r+0x7ca>
 8007f2e:	2001      	movs	r0, #1
 8007f30:	e76f      	b.n	8007e12 <_dtoa_r+0x7da>
 8007f32:	f04f 0800 	mov.w	r8, #0
 8007f36:	e7f6      	b.n	8007f26 <_dtoa_r+0x8ee>
 8007f38:	4698      	mov	r8, r3
 8007f3a:	e7f4      	b.n	8007f26 <_dtoa_r+0x8ee>
 8007f3c:	f43f af7d 	beq.w	8007e3a <_dtoa_r+0x802>
 8007f40:	4618      	mov	r0, r3
 8007f42:	301c      	adds	r0, #28
 8007f44:	e772      	b.n	8007e2c <_dtoa_r+0x7f4>
 8007f46:	9b03      	ldr	r3, [sp, #12]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	dc37      	bgt.n	8007fbc <_dtoa_r+0x984>
 8007f4c:	9b06      	ldr	r3, [sp, #24]
 8007f4e:	2b02      	cmp	r3, #2
 8007f50:	dd34      	ble.n	8007fbc <_dtoa_r+0x984>
 8007f52:	9b03      	ldr	r3, [sp, #12]
 8007f54:	9302      	str	r3, [sp, #8]
 8007f56:	9b02      	ldr	r3, [sp, #8]
 8007f58:	b96b      	cbnz	r3, 8007f76 <_dtoa_r+0x93e>
 8007f5a:	4631      	mov	r1, r6
 8007f5c:	2205      	movs	r2, #5
 8007f5e:	4620      	mov	r0, r4
 8007f60:	f000 fbf4 	bl	800874c <__multadd>
 8007f64:	4601      	mov	r1, r0
 8007f66:	4606      	mov	r6, r0
 8007f68:	ee18 0a10 	vmov	r0, s16
 8007f6c:	f000 fe0e 	bl	8008b8c <__mcmp>
 8007f70:	2800      	cmp	r0, #0
 8007f72:	f73f adbb 	bgt.w	8007aec <_dtoa_r+0x4b4>
 8007f76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f78:	9d01      	ldr	r5, [sp, #4]
 8007f7a:	43db      	mvns	r3, r3
 8007f7c:	9300      	str	r3, [sp, #0]
 8007f7e:	f04f 0800 	mov.w	r8, #0
 8007f82:	4631      	mov	r1, r6
 8007f84:	4620      	mov	r0, r4
 8007f86:	f000 fbbf 	bl	8008708 <_Bfree>
 8007f8a:	2f00      	cmp	r7, #0
 8007f8c:	f43f aea4 	beq.w	8007cd8 <_dtoa_r+0x6a0>
 8007f90:	f1b8 0f00 	cmp.w	r8, #0
 8007f94:	d005      	beq.n	8007fa2 <_dtoa_r+0x96a>
 8007f96:	45b8      	cmp	r8, r7
 8007f98:	d003      	beq.n	8007fa2 <_dtoa_r+0x96a>
 8007f9a:	4641      	mov	r1, r8
 8007f9c:	4620      	mov	r0, r4
 8007f9e:	f000 fbb3 	bl	8008708 <_Bfree>
 8007fa2:	4639      	mov	r1, r7
 8007fa4:	4620      	mov	r0, r4
 8007fa6:	f000 fbaf 	bl	8008708 <_Bfree>
 8007faa:	e695      	b.n	8007cd8 <_dtoa_r+0x6a0>
 8007fac:	2600      	movs	r6, #0
 8007fae:	4637      	mov	r7, r6
 8007fb0:	e7e1      	b.n	8007f76 <_dtoa_r+0x93e>
 8007fb2:	9700      	str	r7, [sp, #0]
 8007fb4:	4637      	mov	r7, r6
 8007fb6:	e599      	b.n	8007aec <_dtoa_r+0x4b4>
 8007fb8:	40240000 	.word	0x40240000
 8007fbc:	9b08      	ldr	r3, [sp, #32]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	f000 80ca 	beq.w	8008158 <_dtoa_r+0xb20>
 8007fc4:	9b03      	ldr	r3, [sp, #12]
 8007fc6:	9302      	str	r3, [sp, #8]
 8007fc8:	2d00      	cmp	r5, #0
 8007fca:	dd05      	ble.n	8007fd8 <_dtoa_r+0x9a0>
 8007fcc:	4639      	mov	r1, r7
 8007fce:	462a      	mov	r2, r5
 8007fd0:	4620      	mov	r0, r4
 8007fd2:	f000 fd6b 	bl	8008aac <__lshift>
 8007fd6:	4607      	mov	r7, r0
 8007fd8:	f1b8 0f00 	cmp.w	r8, #0
 8007fdc:	d05b      	beq.n	8008096 <_dtoa_r+0xa5e>
 8007fde:	6879      	ldr	r1, [r7, #4]
 8007fe0:	4620      	mov	r0, r4
 8007fe2:	f000 fb51 	bl	8008688 <_Balloc>
 8007fe6:	4605      	mov	r5, r0
 8007fe8:	b928      	cbnz	r0, 8007ff6 <_dtoa_r+0x9be>
 8007fea:	4b87      	ldr	r3, [pc, #540]	; (8008208 <_dtoa_r+0xbd0>)
 8007fec:	4602      	mov	r2, r0
 8007fee:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007ff2:	f7ff bb3b 	b.w	800766c <_dtoa_r+0x34>
 8007ff6:	693a      	ldr	r2, [r7, #16]
 8007ff8:	3202      	adds	r2, #2
 8007ffa:	0092      	lsls	r2, r2, #2
 8007ffc:	f107 010c 	add.w	r1, r7, #12
 8008000:	300c      	adds	r0, #12
 8008002:	f000 fb33 	bl	800866c <memcpy>
 8008006:	2201      	movs	r2, #1
 8008008:	4629      	mov	r1, r5
 800800a:	4620      	mov	r0, r4
 800800c:	f000 fd4e 	bl	8008aac <__lshift>
 8008010:	9b01      	ldr	r3, [sp, #4]
 8008012:	f103 0901 	add.w	r9, r3, #1
 8008016:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800801a:	4413      	add	r3, r2
 800801c:	9305      	str	r3, [sp, #20]
 800801e:	f00a 0301 	and.w	r3, sl, #1
 8008022:	46b8      	mov	r8, r7
 8008024:	9304      	str	r3, [sp, #16]
 8008026:	4607      	mov	r7, r0
 8008028:	4631      	mov	r1, r6
 800802a:	ee18 0a10 	vmov	r0, s16
 800802e:	f7ff fa75 	bl	800751c <quorem>
 8008032:	4641      	mov	r1, r8
 8008034:	9002      	str	r0, [sp, #8]
 8008036:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800803a:	ee18 0a10 	vmov	r0, s16
 800803e:	f000 fda5 	bl	8008b8c <__mcmp>
 8008042:	463a      	mov	r2, r7
 8008044:	9003      	str	r0, [sp, #12]
 8008046:	4631      	mov	r1, r6
 8008048:	4620      	mov	r0, r4
 800804a:	f000 fdbb 	bl	8008bc4 <__mdiff>
 800804e:	68c2      	ldr	r2, [r0, #12]
 8008050:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 8008054:	4605      	mov	r5, r0
 8008056:	bb02      	cbnz	r2, 800809a <_dtoa_r+0xa62>
 8008058:	4601      	mov	r1, r0
 800805a:	ee18 0a10 	vmov	r0, s16
 800805e:	f000 fd95 	bl	8008b8c <__mcmp>
 8008062:	4602      	mov	r2, r0
 8008064:	4629      	mov	r1, r5
 8008066:	4620      	mov	r0, r4
 8008068:	9207      	str	r2, [sp, #28]
 800806a:	f000 fb4d 	bl	8008708 <_Bfree>
 800806e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8008072:	ea43 0102 	orr.w	r1, r3, r2
 8008076:	9b04      	ldr	r3, [sp, #16]
 8008078:	430b      	orrs	r3, r1
 800807a:	464d      	mov	r5, r9
 800807c:	d10f      	bne.n	800809e <_dtoa_r+0xa66>
 800807e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008082:	d02a      	beq.n	80080da <_dtoa_r+0xaa2>
 8008084:	9b03      	ldr	r3, [sp, #12]
 8008086:	2b00      	cmp	r3, #0
 8008088:	dd02      	ble.n	8008090 <_dtoa_r+0xa58>
 800808a:	9b02      	ldr	r3, [sp, #8]
 800808c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008090:	f88b a000 	strb.w	sl, [fp]
 8008094:	e775      	b.n	8007f82 <_dtoa_r+0x94a>
 8008096:	4638      	mov	r0, r7
 8008098:	e7ba      	b.n	8008010 <_dtoa_r+0x9d8>
 800809a:	2201      	movs	r2, #1
 800809c:	e7e2      	b.n	8008064 <_dtoa_r+0xa2c>
 800809e:	9b03      	ldr	r3, [sp, #12]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	db04      	blt.n	80080ae <_dtoa_r+0xa76>
 80080a4:	9906      	ldr	r1, [sp, #24]
 80080a6:	430b      	orrs	r3, r1
 80080a8:	9904      	ldr	r1, [sp, #16]
 80080aa:	430b      	orrs	r3, r1
 80080ac:	d122      	bne.n	80080f4 <_dtoa_r+0xabc>
 80080ae:	2a00      	cmp	r2, #0
 80080b0:	ddee      	ble.n	8008090 <_dtoa_r+0xa58>
 80080b2:	ee18 1a10 	vmov	r1, s16
 80080b6:	2201      	movs	r2, #1
 80080b8:	4620      	mov	r0, r4
 80080ba:	f000 fcf7 	bl	8008aac <__lshift>
 80080be:	4631      	mov	r1, r6
 80080c0:	ee08 0a10 	vmov	s16, r0
 80080c4:	f000 fd62 	bl	8008b8c <__mcmp>
 80080c8:	2800      	cmp	r0, #0
 80080ca:	dc03      	bgt.n	80080d4 <_dtoa_r+0xa9c>
 80080cc:	d1e0      	bne.n	8008090 <_dtoa_r+0xa58>
 80080ce:	f01a 0f01 	tst.w	sl, #1
 80080d2:	d0dd      	beq.n	8008090 <_dtoa_r+0xa58>
 80080d4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80080d8:	d1d7      	bne.n	800808a <_dtoa_r+0xa52>
 80080da:	2339      	movs	r3, #57	; 0x39
 80080dc:	f88b 3000 	strb.w	r3, [fp]
 80080e0:	462b      	mov	r3, r5
 80080e2:	461d      	mov	r5, r3
 80080e4:	3b01      	subs	r3, #1
 80080e6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80080ea:	2a39      	cmp	r2, #57	; 0x39
 80080ec:	d071      	beq.n	80081d2 <_dtoa_r+0xb9a>
 80080ee:	3201      	adds	r2, #1
 80080f0:	701a      	strb	r2, [r3, #0]
 80080f2:	e746      	b.n	8007f82 <_dtoa_r+0x94a>
 80080f4:	2a00      	cmp	r2, #0
 80080f6:	dd07      	ble.n	8008108 <_dtoa_r+0xad0>
 80080f8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80080fc:	d0ed      	beq.n	80080da <_dtoa_r+0xaa2>
 80080fe:	f10a 0301 	add.w	r3, sl, #1
 8008102:	f88b 3000 	strb.w	r3, [fp]
 8008106:	e73c      	b.n	8007f82 <_dtoa_r+0x94a>
 8008108:	9b05      	ldr	r3, [sp, #20]
 800810a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800810e:	4599      	cmp	r9, r3
 8008110:	d047      	beq.n	80081a2 <_dtoa_r+0xb6a>
 8008112:	ee18 1a10 	vmov	r1, s16
 8008116:	2300      	movs	r3, #0
 8008118:	220a      	movs	r2, #10
 800811a:	4620      	mov	r0, r4
 800811c:	f000 fb16 	bl	800874c <__multadd>
 8008120:	45b8      	cmp	r8, r7
 8008122:	ee08 0a10 	vmov	s16, r0
 8008126:	f04f 0300 	mov.w	r3, #0
 800812a:	f04f 020a 	mov.w	r2, #10
 800812e:	4641      	mov	r1, r8
 8008130:	4620      	mov	r0, r4
 8008132:	d106      	bne.n	8008142 <_dtoa_r+0xb0a>
 8008134:	f000 fb0a 	bl	800874c <__multadd>
 8008138:	4680      	mov	r8, r0
 800813a:	4607      	mov	r7, r0
 800813c:	f109 0901 	add.w	r9, r9, #1
 8008140:	e772      	b.n	8008028 <_dtoa_r+0x9f0>
 8008142:	f000 fb03 	bl	800874c <__multadd>
 8008146:	4639      	mov	r1, r7
 8008148:	4680      	mov	r8, r0
 800814a:	2300      	movs	r3, #0
 800814c:	220a      	movs	r2, #10
 800814e:	4620      	mov	r0, r4
 8008150:	f000 fafc 	bl	800874c <__multadd>
 8008154:	4607      	mov	r7, r0
 8008156:	e7f1      	b.n	800813c <_dtoa_r+0xb04>
 8008158:	9b03      	ldr	r3, [sp, #12]
 800815a:	9302      	str	r3, [sp, #8]
 800815c:	9d01      	ldr	r5, [sp, #4]
 800815e:	ee18 0a10 	vmov	r0, s16
 8008162:	4631      	mov	r1, r6
 8008164:	f7ff f9da 	bl	800751c <quorem>
 8008168:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800816c:	9b01      	ldr	r3, [sp, #4]
 800816e:	f805 ab01 	strb.w	sl, [r5], #1
 8008172:	1aea      	subs	r2, r5, r3
 8008174:	9b02      	ldr	r3, [sp, #8]
 8008176:	4293      	cmp	r3, r2
 8008178:	dd09      	ble.n	800818e <_dtoa_r+0xb56>
 800817a:	ee18 1a10 	vmov	r1, s16
 800817e:	2300      	movs	r3, #0
 8008180:	220a      	movs	r2, #10
 8008182:	4620      	mov	r0, r4
 8008184:	f000 fae2 	bl	800874c <__multadd>
 8008188:	ee08 0a10 	vmov	s16, r0
 800818c:	e7e7      	b.n	800815e <_dtoa_r+0xb26>
 800818e:	9b02      	ldr	r3, [sp, #8]
 8008190:	2b00      	cmp	r3, #0
 8008192:	bfc8      	it	gt
 8008194:	461d      	movgt	r5, r3
 8008196:	9b01      	ldr	r3, [sp, #4]
 8008198:	bfd8      	it	le
 800819a:	2501      	movle	r5, #1
 800819c:	441d      	add	r5, r3
 800819e:	f04f 0800 	mov.w	r8, #0
 80081a2:	ee18 1a10 	vmov	r1, s16
 80081a6:	2201      	movs	r2, #1
 80081a8:	4620      	mov	r0, r4
 80081aa:	f000 fc7f 	bl	8008aac <__lshift>
 80081ae:	4631      	mov	r1, r6
 80081b0:	ee08 0a10 	vmov	s16, r0
 80081b4:	f000 fcea 	bl	8008b8c <__mcmp>
 80081b8:	2800      	cmp	r0, #0
 80081ba:	dc91      	bgt.n	80080e0 <_dtoa_r+0xaa8>
 80081bc:	d102      	bne.n	80081c4 <_dtoa_r+0xb8c>
 80081be:	f01a 0f01 	tst.w	sl, #1
 80081c2:	d18d      	bne.n	80080e0 <_dtoa_r+0xaa8>
 80081c4:	462b      	mov	r3, r5
 80081c6:	461d      	mov	r5, r3
 80081c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80081cc:	2a30      	cmp	r2, #48	; 0x30
 80081ce:	d0fa      	beq.n	80081c6 <_dtoa_r+0xb8e>
 80081d0:	e6d7      	b.n	8007f82 <_dtoa_r+0x94a>
 80081d2:	9a01      	ldr	r2, [sp, #4]
 80081d4:	429a      	cmp	r2, r3
 80081d6:	d184      	bne.n	80080e2 <_dtoa_r+0xaaa>
 80081d8:	9b00      	ldr	r3, [sp, #0]
 80081da:	3301      	adds	r3, #1
 80081dc:	9300      	str	r3, [sp, #0]
 80081de:	2331      	movs	r3, #49	; 0x31
 80081e0:	7013      	strb	r3, [r2, #0]
 80081e2:	e6ce      	b.n	8007f82 <_dtoa_r+0x94a>
 80081e4:	4b09      	ldr	r3, [pc, #36]	; (800820c <_dtoa_r+0xbd4>)
 80081e6:	f7ff ba95 	b.w	8007714 <_dtoa_r+0xdc>
 80081ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	f47f aa6e 	bne.w	80076ce <_dtoa_r+0x96>
 80081f2:	4b07      	ldr	r3, [pc, #28]	; (8008210 <_dtoa_r+0xbd8>)
 80081f4:	f7ff ba8e 	b.w	8007714 <_dtoa_r+0xdc>
 80081f8:	9b02      	ldr	r3, [sp, #8]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	dcae      	bgt.n	800815c <_dtoa_r+0xb24>
 80081fe:	9b06      	ldr	r3, [sp, #24]
 8008200:	2b02      	cmp	r3, #2
 8008202:	f73f aea8 	bgt.w	8007f56 <_dtoa_r+0x91e>
 8008206:	e7a9      	b.n	800815c <_dtoa_r+0xb24>
 8008208:	080098ff 	.word	0x080098ff
 800820c:	0800985c 	.word	0x0800985c
 8008210:	08009880 	.word	0x08009880

08008214 <__sflush_r>:
 8008214:	898a      	ldrh	r2, [r1, #12]
 8008216:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800821a:	4605      	mov	r5, r0
 800821c:	0710      	lsls	r0, r2, #28
 800821e:	460c      	mov	r4, r1
 8008220:	d458      	bmi.n	80082d4 <__sflush_r+0xc0>
 8008222:	684b      	ldr	r3, [r1, #4]
 8008224:	2b00      	cmp	r3, #0
 8008226:	dc05      	bgt.n	8008234 <__sflush_r+0x20>
 8008228:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800822a:	2b00      	cmp	r3, #0
 800822c:	dc02      	bgt.n	8008234 <__sflush_r+0x20>
 800822e:	2000      	movs	r0, #0
 8008230:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008234:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008236:	2e00      	cmp	r6, #0
 8008238:	d0f9      	beq.n	800822e <__sflush_r+0x1a>
 800823a:	2300      	movs	r3, #0
 800823c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008240:	682f      	ldr	r7, [r5, #0]
 8008242:	602b      	str	r3, [r5, #0]
 8008244:	d032      	beq.n	80082ac <__sflush_r+0x98>
 8008246:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008248:	89a3      	ldrh	r3, [r4, #12]
 800824a:	075a      	lsls	r2, r3, #29
 800824c:	d505      	bpl.n	800825a <__sflush_r+0x46>
 800824e:	6863      	ldr	r3, [r4, #4]
 8008250:	1ac0      	subs	r0, r0, r3
 8008252:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008254:	b10b      	cbz	r3, 800825a <__sflush_r+0x46>
 8008256:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008258:	1ac0      	subs	r0, r0, r3
 800825a:	2300      	movs	r3, #0
 800825c:	4602      	mov	r2, r0
 800825e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008260:	6a21      	ldr	r1, [r4, #32]
 8008262:	4628      	mov	r0, r5
 8008264:	47b0      	blx	r6
 8008266:	1c43      	adds	r3, r0, #1
 8008268:	89a3      	ldrh	r3, [r4, #12]
 800826a:	d106      	bne.n	800827a <__sflush_r+0x66>
 800826c:	6829      	ldr	r1, [r5, #0]
 800826e:	291d      	cmp	r1, #29
 8008270:	d82c      	bhi.n	80082cc <__sflush_r+0xb8>
 8008272:	4a2a      	ldr	r2, [pc, #168]	; (800831c <__sflush_r+0x108>)
 8008274:	40ca      	lsrs	r2, r1
 8008276:	07d6      	lsls	r6, r2, #31
 8008278:	d528      	bpl.n	80082cc <__sflush_r+0xb8>
 800827a:	2200      	movs	r2, #0
 800827c:	6062      	str	r2, [r4, #4]
 800827e:	04d9      	lsls	r1, r3, #19
 8008280:	6922      	ldr	r2, [r4, #16]
 8008282:	6022      	str	r2, [r4, #0]
 8008284:	d504      	bpl.n	8008290 <__sflush_r+0x7c>
 8008286:	1c42      	adds	r2, r0, #1
 8008288:	d101      	bne.n	800828e <__sflush_r+0x7a>
 800828a:	682b      	ldr	r3, [r5, #0]
 800828c:	b903      	cbnz	r3, 8008290 <__sflush_r+0x7c>
 800828e:	6560      	str	r0, [r4, #84]	; 0x54
 8008290:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008292:	602f      	str	r7, [r5, #0]
 8008294:	2900      	cmp	r1, #0
 8008296:	d0ca      	beq.n	800822e <__sflush_r+0x1a>
 8008298:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800829c:	4299      	cmp	r1, r3
 800829e:	d002      	beq.n	80082a6 <__sflush_r+0x92>
 80082a0:	4628      	mov	r0, r5
 80082a2:	f000 fd8b 	bl	8008dbc <_free_r>
 80082a6:	2000      	movs	r0, #0
 80082a8:	6360      	str	r0, [r4, #52]	; 0x34
 80082aa:	e7c1      	b.n	8008230 <__sflush_r+0x1c>
 80082ac:	6a21      	ldr	r1, [r4, #32]
 80082ae:	2301      	movs	r3, #1
 80082b0:	4628      	mov	r0, r5
 80082b2:	47b0      	blx	r6
 80082b4:	1c41      	adds	r1, r0, #1
 80082b6:	d1c7      	bne.n	8008248 <__sflush_r+0x34>
 80082b8:	682b      	ldr	r3, [r5, #0]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d0c4      	beq.n	8008248 <__sflush_r+0x34>
 80082be:	2b1d      	cmp	r3, #29
 80082c0:	d001      	beq.n	80082c6 <__sflush_r+0xb2>
 80082c2:	2b16      	cmp	r3, #22
 80082c4:	d101      	bne.n	80082ca <__sflush_r+0xb6>
 80082c6:	602f      	str	r7, [r5, #0]
 80082c8:	e7b1      	b.n	800822e <__sflush_r+0x1a>
 80082ca:	89a3      	ldrh	r3, [r4, #12]
 80082cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80082d0:	81a3      	strh	r3, [r4, #12]
 80082d2:	e7ad      	b.n	8008230 <__sflush_r+0x1c>
 80082d4:	690f      	ldr	r7, [r1, #16]
 80082d6:	2f00      	cmp	r7, #0
 80082d8:	d0a9      	beq.n	800822e <__sflush_r+0x1a>
 80082da:	0793      	lsls	r3, r2, #30
 80082dc:	680e      	ldr	r6, [r1, #0]
 80082de:	bf08      	it	eq
 80082e0:	694b      	ldreq	r3, [r1, #20]
 80082e2:	600f      	str	r7, [r1, #0]
 80082e4:	bf18      	it	ne
 80082e6:	2300      	movne	r3, #0
 80082e8:	eba6 0807 	sub.w	r8, r6, r7
 80082ec:	608b      	str	r3, [r1, #8]
 80082ee:	f1b8 0f00 	cmp.w	r8, #0
 80082f2:	dd9c      	ble.n	800822e <__sflush_r+0x1a>
 80082f4:	6a21      	ldr	r1, [r4, #32]
 80082f6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80082f8:	4643      	mov	r3, r8
 80082fa:	463a      	mov	r2, r7
 80082fc:	4628      	mov	r0, r5
 80082fe:	47b0      	blx	r6
 8008300:	2800      	cmp	r0, #0
 8008302:	dc06      	bgt.n	8008312 <__sflush_r+0xfe>
 8008304:	89a3      	ldrh	r3, [r4, #12]
 8008306:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800830a:	81a3      	strh	r3, [r4, #12]
 800830c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008310:	e78e      	b.n	8008230 <__sflush_r+0x1c>
 8008312:	4407      	add	r7, r0
 8008314:	eba8 0800 	sub.w	r8, r8, r0
 8008318:	e7e9      	b.n	80082ee <__sflush_r+0xda>
 800831a:	bf00      	nop
 800831c:	20400001 	.word	0x20400001

08008320 <_fflush_r>:
 8008320:	b538      	push	{r3, r4, r5, lr}
 8008322:	690b      	ldr	r3, [r1, #16]
 8008324:	4605      	mov	r5, r0
 8008326:	460c      	mov	r4, r1
 8008328:	b913      	cbnz	r3, 8008330 <_fflush_r+0x10>
 800832a:	2500      	movs	r5, #0
 800832c:	4628      	mov	r0, r5
 800832e:	bd38      	pop	{r3, r4, r5, pc}
 8008330:	b118      	cbz	r0, 800833a <_fflush_r+0x1a>
 8008332:	6983      	ldr	r3, [r0, #24]
 8008334:	b90b      	cbnz	r3, 800833a <_fflush_r+0x1a>
 8008336:	f000 f887 	bl	8008448 <__sinit>
 800833a:	4b14      	ldr	r3, [pc, #80]	; (800838c <_fflush_r+0x6c>)
 800833c:	429c      	cmp	r4, r3
 800833e:	d11b      	bne.n	8008378 <_fflush_r+0x58>
 8008340:	686c      	ldr	r4, [r5, #4]
 8008342:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008346:	2b00      	cmp	r3, #0
 8008348:	d0ef      	beq.n	800832a <_fflush_r+0xa>
 800834a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800834c:	07d0      	lsls	r0, r2, #31
 800834e:	d404      	bmi.n	800835a <_fflush_r+0x3a>
 8008350:	0599      	lsls	r1, r3, #22
 8008352:	d402      	bmi.n	800835a <_fflush_r+0x3a>
 8008354:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008356:	f000 f91a 	bl	800858e <__retarget_lock_acquire_recursive>
 800835a:	4628      	mov	r0, r5
 800835c:	4621      	mov	r1, r4
 800835e:	f7ff ff59 	bl	8008214 <__sflush_r>
 8008362:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008364:	07da      	lsls	r2, r3, #31
 8008366:	4605      	mov	r5, r0
 8008368:	d4e0      	bmi.n	800832c <_fflush_r+0xc>
 800836a:	89a3      	ldrh	r3, [r4, #12]
 800836c:	059b      	lsls	r3, r3, #22
 800836e:	d4dd      	bmi.n	800832c <_fflush_r+0xc>
 8008370:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008372:	f000 f90d 	bl	8008590 <__retarget_lock_release_recursive>
 8008376:	e7d9      	b.n	800832c <_fflush_r+0xc>
 8008378:	4b05      	ldr	r3, [pc, #20]	; (8008390 <_fflush_r+0x70>)
 800837a:	429c      	cmp	r4, r3
 800837c:	d101      	bne.n	8008382 <_fflush_r+0x62>
 800837e:	68ac      	ldr	r4, [r5, #8]
 8008380:	e7df      	b.n	8008342 <_fflush_r+0x22>
 8008382:	4b04      	ldr	r3, [pc, #16]	; (8008394 <_fflush_r+0x74>)
 8008384:	429c      	cmp	r4, r3
 8008386:	bf08      	it	eq
 8008388:	68ec      	ldreq	r4, [r5, #12]
 800838a:	e7da      	b.n	8008342 <_fflush_r+0x22>
 800838c:	08009930 	.word	0x08009930
 8008390:	08009950 	.word	0x08009950
 8008394:	08009910 	.word	0x08009910

08008398 <std>:
 8008398:	2300      	movs	r3, #0
 800839a:	b510      	push	{r4, lr}
 800839c:	4604      	mov	r4, r0
 800839e:	e9c0 3300 	strd	r3, r3, [r0]
 80083a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80083a6:	6083      	str	r3, [r0, #8]
 80083a8:	8181      	strh	r1, [r0, #12]
 80083aa:	6643      	str	r3, [r0, #100]	; 0x64
 80083ac:	81c2      	strh	r2, [r0, #14]
 80083ae:	6183      	str	r3, [r0, #24]
 80083b0:	4619      	mov	r1, r3
 80083b2:	2208      	movs	r2, #8
 80083b4:	305c      	adds	r0, #92	; 0x5c
 80083b6:	f7fe faf1 	bl	800699c <memset>
 80083ba:	4b05      	ldr	r3, [pc, #20]	; (80083d0 <std+0x38>)
 80083bc:	6263      	str	r3, [r4, #36]	; 0x24
 80083be:	4b05      	ldr	r3, [pc, #20]	; (80083d4 <std+0x3c>)
 80083c0:	62a3      	str	r3, [r4, #40]	; 0x28
 80083c2:	4b05      	ldr	r3, [pc, #20]	; (80083d8 <std+0x40>)
 80083c4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80083c6:	4b05      	ldr	r3, [pc, #20]	; (80083dc <std+0x44>)
 80083c8:	6224      	str	r4, [r4, #32]
 80083ca:	6323      	str	r3, [r4, #48]	; 0x30
 80083cc:	bd10      	pop	{r4, pc}
 80083ce:	bf00      	nop
 80083d0:	08009251 	.word	0x08009251
 80083d4:	08009273 	.word	0x08009273
 80083d8:	080092ab 	.word	0x080092ab
 80083dc:	080092cf 	.word	0x080092cf

080083e0 <_cleanup_r>:
 80083e0:	4901      	ldr	r1, [pc, #4]	; (80083e8 <_cleanup_r+0x8>)
 80083e2:	f000 b8af 	b.w	8008544 <_fwalk_reent>
 80083e6:	bf00      	nop
 80083e8:	08008321 	.word	0x08008321

080083ec <__sfmoreglue>:
 80083ec:	b570      	push	{r4, r5, r6, lr}
 80083ee:	2268      	movs	r2, #104	; 0x68
 80083f0:	1e4d      	subs	r5, r1, #1
 80083f2:	4355      	muls	r5, r2
 80083f4:	460e      	mov	r6, r1
 80083f6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80083fa:	f000 fd4b 	bl	8008e94 <_malloc_r>
 80083fe:	4604      	mov	r4, r0
 8008400:	b140      	cbz	r0, 8008414 <__sfmoreglue+0x28>
 8008402:	2100      	movs	r1, #0
 8008404:	e9c0 1600 	strd	r1, r6, [r0]
 8008408:	300c      	adds	r0, #12
 800840a:	60a0      	str	r0, [r4, #8]
 800840c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008410:	f7fe fac4 	bl	800699c <memset>
 8008414:	4620      	mov	r0, r4
 8008416:	bd70      	pop	{r4, r5, r6, pc}

08008418 <__sfp_lock_acquire>:
 8008418:	4801      	ldr	r0, [pc, #4]	; (8008420 <__sfp_lock_acquire+0x8>)
 800841a:	f000 b8b8 	b.w	800858e <__retarget_lock_acquire_recursive>
 800841e:	bf00      	nop
 8008420:	20000b6d 	.word	0x20000b6d

08008424 <__sfp_lock_release>:
 8008424:	4801      	ldr	r0, [pc, #4]	; (800842c <__sfp_lock_release+0x8>)
 8008426:	f000 b8b3 	b.w	8008590 <__retarget_lock_release_recursive>
 800842a:	bf00      	nop
 800842c:	20000b6d 	.word	0x20000b6d

08008430 <__sinit_lock_acquire>:
 8008430:	4801      	ldr	r0, [pc, #4]	; (8008438 <__sinit_lock_acquire+0x8>)
 8008432:	f000 b8ac 	b.w	800858e <__retarget_lock_acquire_recursive>
 8008436:	bf00      	nop
 8008438:	20000b6e 	.word	0x20000b6e

0800843c <__sinit_lock_release>:
 800843c:	4801      	ldr	r0, [pc, #4]	; (8008444 <__sinit_lock_release+0x8>)
 800843e:	f000 b8a7 	b.w	8008590 <__retarget_lock_release_recursive>
 8008442:	bf00      	nop
 8008444:	20000b6e 	.word	0x20000b6e

08008448 <__sinit>:
 8008448:	b510      	push	{r4, lr}
 800844a:	4604      	mov	r4, r0
 800844c:	f7ff fff0 	bl	8008430 <__sinit_lock_acquire>
 8008450:	69a3      	ldr	r3, [r4, #24]
 8008452:	b11b      	cbz	r3, 800845c <__sinit+0x14>
 8008454:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008458:	f7ff bff0 	b.w	800843c <__sinit_lock_release>
 800845c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008460:	6523      	str	r3, [r4, #80]	; 0x50
 8008462:	4b13      	ldr	r3, [pc, #76]	; (80084b0 <__sinit+0x68>)
 8008464:	4a13      	ldr	r2, [pc, #76]	; (80084b4 <__sinit+0x6c>)
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	62a2      	str	r2, [r4, #40]	; 0x28
 800846a:	42a3      	cmp	r3, r4
 800846c:	bf04      	itt	eq
 800846e:	2301      	moveq	r3, #1
 8008470:	61a3      	streq	r3, [r4, #24]
 8008472:	4620      	mov	r0, r4
 8008474:	f000 f820 	bl	80084b8 <__sfp>
 8008478:	6060      	str	r0, [r4, #4]
 800847a:	4620      	mov	r0, r4
 800847c:	f000 f81c 	bl	80084b8 <__sfp>
 8008480:	60a0      	str	r0, [r4, #8]
 8008482:	4620      	mov	r0, r4
 8008484:	f000 f818 	bl	80084b8 <__sfp>
 8008488:	2200      	movs	r2, #0
 800848a:	60e0      	str	r0, [r4, #12]
 800848c:	2104      	movs	r1, #4
 800848e:	6860      	ldr	r0, [r4, #4]
 8008490:	f7ff ff82 	bl	8008398 <std>
 8008494:	68a0      	ldr	r0, [r4, #8]
 8008496:	2201      	movs	r2, #1
 8008498:	2109      	movs	r1, #9
 800849a:	f7ff ff7d 	bl	8008398 <std>
 800849e:	68e0      	ldr	r0, [r4, #12]
 80084a0:	2202      	movs	r2, #2
 80084a2:	2112      	movs	r1, #18
 80084a4:	f7ff ff78 	bl	8008398 <std>
 80084a8:	2301      	movs	r3, #1
 80084aa:	61a3      	str	r3, [r4, #24]
 80084ac:	e7d2      	b.n	8008454 <__sinit+0xc>
 80084ae:	bf00      	nop
 80084b0:	08009848 	.word	0x08009848
 80084b4:	080083e1 	.word	0x080083e1

080084b8 <__sfp>:
 80084b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084ba:	4607      	mov	r7, r0
 80084bc:	f7ff ffac 	bl	8008418 <__sfp_lock_acquire>
 80084c0:	4b1e      	ldr	r3, [pc, #120]	; (800853c <__sfp+0x84>)
 80084c2:	681e      	ldr	r6, [r3, #0]
 80084c4:	69b3      	ldr	r3, [r6, #24]
 80084c6:	b913      	cbnz	r3, 80084ce <__sfp+0x16>
 80084c8:	4630      	mov	r0, r6
 80084ca:	f7ff ffbd 	bl	8008448 <__sinit>
 80084ce:	3648      	adds	r6, #72	; 0x48
 80084d0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80084d4:	3b01      	subs	r3, #1
 80084d6:	d503      	bpl.n	80084e0 <__sfp+0x28>
 80084d8:	6833      	ldr	r3, [r6, #0]
 80084da:	b30b      	cbz	r3, 8008520 <__sfp+0x68>
 80084dc:	6836      	ldr	r6, [r6, #0]
 80084de:	e7f7      	b.n	80084d0 <__sfp+0x18>
 80084e0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80084e4:	b9d5      	cbnz	r5, 800851c <__sfp+0x64>
 80084e6:	4b16      	ldr	r3, [pc, #88]	; (8008540 <__sfp+0x88>)
 80084e8:	60e3      	str	r3, [r4, #12]
 80084ea:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80084ee:	6665      	str	r5, [r4, #100]	; 0x64
 80084f0:	f000 f84c 	bl	800858c <__retarget_lock_init_recursive>
 80084f4:	f7ff ff96 	bl	8008424 <__sfp_lock_release>
 80084f8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80084fc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008500:	6025      	str	r5, [r4, #0]
 8008502:	61a5      	str	r5, [r4, #24]
 8008504:	2208      	movs	r2, #8
 8008506:	4629      	mov	r1, r5
 8008508:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800850c:	f7fe fa46 	bl	800699c <memset>
 8008510:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008514:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008518:	4620      	mov	r0, r4
 800851a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800851c:	3468      	adds	r4, #104	; 0x68
 800851e:	e7d9      	b.n	80084d4 <__sfp+0x1c>
 8008520:	2104      	movs	r1, #4
 8008522:	4638      	mov	r0, r7
 8008524:	f7ff ff62 	bl	80083ec <__sfmoreglue>
 8008528:	4604      	mov	r4, r0
 800852a:	6030      	str	r0, [r6, #0]
 800852c:	2800      	cmp	r0, #0
 800852e:	d1d5      	bne.n	80084dc <__sfp+0x24>
 8008530:	f7ff ff78 	bl	8008424 <__sfp_lock_release>
 8008534:	230c      	movs	r3, #12
 8008536:	603b      	str	r3, [r7, #0]
 8008538:	e7ee      	b.n	8008518 <__sfp+0x60>
 800853a:	bf00      	nop
 800853c:	08009848 	.word	0x08009848
 8008540:	ffff0001 	.word	0xffff0001

08008544 <_fwalk_reent>:
 8008544:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008548:	4606      	mov	r6, r0
 800854a:	4688      	mov	r8, r1
 800854c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008550:	2700      	movs	r7, #0
 8008552:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008556:	f1b9 0901 	subs.w	r9, r9, #1
 800855a:	d505      	bpl.n	8008568 <_fwalk_reent+0x24>
 800855c:	6824      	ldr	r4, [r4, #0]
 800855e:	2c00      	cmp	r4, #0
 8008560:	d1f7      	bne.n	8008552 <_fwalk_reent+0xe>
 8008562:	4638      	mov	r0, r7
 8008564:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008568:	89ab      	ldrh	r3, [r5, #12]
 800856a:	2b01      	cmp	r3, #1
 800856c:	d907      	bls.n	800857e <_fwalk_reent+0x3a>
 800856e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008572:	3301      	adds	r3, #1
 8008574:	d003      	beq.n	800857e <_fwalk_reent+0x3a>
 8008576:	4629      	mov	r1, r5
 8008578:	4630      	mov	r0, r6
 800857a:	47c0      	blx	r8
 800857c:	4307      	orrs	r7, r0
 800857e:	3568      	adds	r5, #104	; 0x68
 8008580:	e7e9      	b.n	8008556 <_fwalk_reent+0x12>
	...

08008584 <_localeconv_r>:
 8008584:	4800      	ldr	r0, [pc, #0]	; (8008588 <_localeconv_r+0x4>)
 8008586:	4770      	bx	lr
 8008588:	20000160 	.word	0x20000160

0800858c <__retarget_lock_init_recursive>:
 800858c:	4770      	bx	lr

0800858e <__retarget_lock_acquire_recursive>:
 800858e:	4770      	bx	lr

08008590 <__retarget_lock_release_recursive>:
 8008590:	4770      	bx	lr

08008592 <__swhatbuf_r>:
 8008592:	b570      	push	{r4, r5, r6, lr}
 8008594:	460e      	mov	r6, r1
 8008596:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800859a:	2900      	cmp	r1, #0
 800859c:	b096      	sub	sp, #88	; 0x58
 800859e:	4614      	mov	r4, r2
 80085a0:	461d      	mov	r5, r3
 80085a2:	da08      	bge.n	80085b6 <__swhatbuf_r+0x24>
 80085a4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80085a8:	2200      	movs	r2, #0
 80085aa:	602a      	str	r2, [r5, #0]
 80085ac:	061a      	lsls	r2, r3, #24
 80085ae:	d410      	bmi.n	80085d2 <__swhatbuf_r+0x40>
 80085b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80085b4:	e00e      	b.n	80085d4 <__swhatbuf_r+0x42>
 80085b6:	466a      	mov	r2, sp
 80085b8:	f000 fee0 	bl	800937c <_fstat_r>
 80085bc:	2800      	cmp	r0, #0
 80085be:	dbf1      	blt.n	80085a4 <__swhatbuf_r+0x12>
 80085c0:	9a01      	ldr	r2, [sp, #4]
 80085c2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80085c6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80085ca:	425a      	negs	r2, r3
 80085cc:	415a      	adcs	r2, r3
 80085ce:	602a      	str	r2, [r5, #0]
 80085d0:	e7ee      	b.n	80085b0 <__swhatbuf_r+0x1e>
 80085d2:	2340      	movs	r3, #64	; 0x40
 80085d4:	2000      	movs	r0, #0
 80085d6:	6023      	str	r3, [r4, #0]
 80085d8:	b016      	add	sp, #88	; 0x58
 80085da:	bd70      	pop	{r4, r5, r6, pc}

080085dc <__smakebuf_r>:
 80085dc:	898b      	ldrh	r3, [r1, #12]
 80085de:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80085e0:	079d      	lsls	r5, r3, #30
 80085e2:	4606      	mov	r6, r0
 80085e4:	460c      	mov	r4, r1
 80085e6:	d507      	bpl.n	80085f8 <__smakebuf_r+0x1c>
 80085e8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80085ec:	6023      	str	r3, [r4, #0]
 80085ee:	6123      	str	r3, [r4, #16]
 80085f0:	2301      	movs	r3, #1
 80085f2:	6163      	str	r3, [r4, #20]
 80085f4:	b002      	add	sp, #8
 80085f6:	bd70      	pop	{r4, r5, r6, pc}
 80085f8:	ab01      	add	r3, sp, #4
 80085fa:	466a      	mov	r2, sp
 80085fc:	f7ff ffc9 	bl	8008592 <__swhatbuf_r>
 8008600:	9900      	ldr	r1, [sp, #0]
 8008602:	4605      	mov	r5, r0
 8008604:	4630      	mov	r0, r6
 8008606:	f000 fc45 	bl	8008e94 <_malloc_r>
 800860a:	b948      	cbnz	r0, 8008620 <__smakebuf_r+0x44>
 800860c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008610:	059a      	lsls	r2, r3, #22
 8008612:	d4ef      	bmi.n	80085f4 <__smakebuf_r+0x18>
 8008614:	f023 0303 	bic.w	r3, r3, #3
 8008618:	f043 0302 	orr.w	r3, r3, #2
 800861c:	81a3      	strh	r3, [r4, #12]
 800861e:	e7e3      	b.n	80085e8 <__smakebuf_r+0xc>
 8008620:	4b0d      	ldr	r3, [pc, #52]	; (8008658 <__smakebuf_r+0x7c>)
 8008622:	62b3      	str	r3, [r6, #40]	; 0x28
 8008624:	89a3      	ldrh	r3, [r4, #12]
 8008626:	6020      	str	r0, [r4, #0]
 8008628:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800862c:	81a3      	strh	r3, [r4, #12]
 800862e:	9b00      	ldr	r3, [sp, #0]
 8008630:	6163      	str	r3, [r4, #20]
 8008632:	9b01      	ldr	r3, [sp, #4]
 8008634:	6120      	str	r0, [r4, #16]
 8008636:	b15b      	cbz	r3, 8008650 <__smakebuf_r+0x74>
 8008638:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800863c:	4630      	mov	r0, r6
 800863e:	f000 feaf 	bl	80093a0 <_isatty_r>
 8008642:	b128      	cbz	r0, 8008650 <__smakebuf_r+0x74>
 8008644:	89a3      	ldrh	r3, [r4, #12]
 8008646:	f023 0303 	bic.w	r3, r3, #3
 800864a:	f043 0301 	orr.w	r3, r3, #1
 800864e:	81a3      	strh	r3, [r4, #12]
 8008650:	89a0      	ldrh	r0, [r4, #12]
 8008652:	4305      	orrs	r5, r0
 8008654:	81a5      	strh	r5, [r4, #12]
 8008656:	e7cd      	b.n	80085f4 <__smakebuf_r+0x18>
 8008658:	080083e1 	.word	0x080083e1

0800865c <malloc>:
 800865c:	4b02      	ldr	r3, [pc, #8]	; (8008668 <malloc+0xc>)
 800865e:	4601      	mov	r1, r0
 8008660:	6818      	ldr	r0, [r3, #0]
 8008662:	f000 bc17 	b.w	8008e94 <_malloc_r>
 8008666:	bf00      	nop
 8008668:	2000000c 	.word	0x2000000c

0800866c <memcpy>:
 800866c:	440a      	add	r2, r1
 800866e:	4291      	cmp	r1, r2
 8008670:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008674:	d100      	bne.n	8008678 <memcpy+0xc>
 8008676:	4770      	bx	lr
 8008678:	b510      	push	{r4, lr}
 800867a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800867e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008682:	4291      	cmp	r1, r2
 8008684:	d1f9      	bne.n	800867a <memcpy+0xe>
 8008686:	bd10      	pop	{r4, pc}

08008688 <_Balloc>:
 8008688:	b570      	push	{r4, r5, r6, lr}
 800868a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800868c:	4604      	mov	r4, r0
 800868e:	460d      	mov	r5, r1
 8008690:	b976      	cbnz	r6, 80086b0 <_Balloc+0x28>
 8008692:	2010      	movs	r0, #16
 8008694:	f7ff ffe2 	bl	800865c <malloc>
 8008698:	4602      	mov	r2, r0
 800869a:	6260      	str	r0, [r4, #36]	; 0x24
 800869c:	b920      	cbnz	r0, 80086a8 <_Balloc+0x20>
 800869e:	4b18      	ldr	r3, [pc, #96]	; (8008700 <_Balloc+0x78>)
 80086a0:	4818      	ldr	r0, [pc, #96]	; (8008704 <_Balloc+0x7c>)
 80086a2:	2166      	movs	r1, #102	; 0x66
 80086a4:	f000 fe2a 	bl	80092fc <__assert_func>
 80086a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80086ac:	6006      	str	r6, [r0, #0]
 80086ae:	60c6      	str	r6, [r0, #12]
 80086b0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80086b2:	68f3      	ldr	r3, [r6, #12]
 80086b4:	b183      	cbz	r3, 80086d8 <_Balloc+0x50>
 80086b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80086b8:	68db      	ldr	r3, [r3, #12]
 80086ba:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80086be:	b9b8      	cbnz	r0, 80086f0 <_Balloc+0x68>
 80086c0:	2101      	movs	r1, #1
 80086c2:	fa01 f605 	lsl.w	r6, r1, r5
 80086c6:	1d72      	adds	r2, r6, #5
 80086c8:	0092      	lsls	r2, r2, #2
 80086ca:	4620      	mov	r0, r4
 80086cc:	f000 fb60 	bl	8008d90 <_calloc_r>
 80086d0:	b160      	cbz	r0, 80086ec <_Balloc+0x64>
 80086d2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80086d6:	e00e      	b.n	80086f6 <_Balloc+0x6e>
 80086d8:	2221      	movs	r2, #33	; 0x21
 80086da:	2104      	movs	r1, #4
 80086dc:	4620      	mov	r0, r4
 80086de:	f000 fb57 	bl	8008d90 <_calloc_r>
 80086e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80086e4:	60f0      	str	r0, [r6, #12]
 80086e6:	68db      	ldr	r3, [r3, #12]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d1e4      	bne.n	80086b6 <_Balloc+0x2e>
 80086ec:	2000      	movs	r0, #0
 80086ee:	bd70      	pop	{r4, r5, r6, pc}
 80086f0:	6802      	ldr	r2, [r0, #0]
 80086f2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80086f6:	2300      	movs	r3, #0
 80086f8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80086fc:	e7f7      	b.n	80086ee <_Balloc+0x66>
 80086fe:	bf00      	nop
 8008700:	0800988d 	.word	0x0800988d
 8008704:	08009970 	.word	0x08009970

08008708 <_Bfree>:
 8008708:	b570      	push	{r4, r5, r6, lr}
 800870a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800870c:	4605      	mov	r5, r0
 800870e:	460c      	mov	r4, r1
 8008710:	b976      	cbnz	r6, 8008730 <_Bfree+0x28>
 8008712:	2010      	movs	r0, #16
 8008714:	f7ff ffa2 	bl	800865c <malloc>
 8008718:	4602      	mov	r2, r0
 800871a:	6268      	str	r0, [r5, #36]	; 0x24
 800871c:	b920      	cbnz	r0, 8008728 <_Bfree+0x20>
 800871e:	4b09      	ldr	r3, [pc, #36]	; (8008744 <_Bfree+0x3c>)
 8008720:	4809      	ldr	r0, [pc, #36]	; (8008748 <_Bfree+0x40>)
 8008722:	218a      	movs	r1, #138	; 0x8a
 8008724:	f000 fdea 	bl	80092fc <__assert_func>
 8008728:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800872c:	6006      	str	r6, [r0, #0]
 800872e:	60c6      	str	r6, [r0, #12]
 8008730:	b13c      	cbz	r4, 8008742 <_Bfree+0x3a>
 8008732:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008734:	6862      	ldr	r2, [r4, #4]
 8008736:	68db      	ldr	r3, [r3, #12]
 8008738:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800873c:	6021      	str	r1, [r4, #0]
 800873e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008742:	bd70      	pop	{r4, r5, r6, pc}
 8008744:	0800988d 	.word	0x0800988d
 8008748:	08009970 	.word	0x08009970

0800874c <__multadd>:
 800874c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008750:	690d      	ldr	r5, [r1, #16]
 8008752:	4607      	mov	r7, r0
 8008754:	460c      	mov	r4, r1
 8008756:	461e      	mov	r6, r3
 8008758:	f101 0c14 	add.w	ip, r1, #20
 800875c:	2000      	movs	r0, #0
 800875e:	f8dc 3000 	ldr.w	r3, [ip]
 8008762:	b299      	uxth	r1, r3
 8008764:	fb02 6101 	mla	r1, r2, r1, r6
 8008768:	0c1e      	lsrs	r6, r3, #16
 800876a:	0c0b      	lsrs	r3, r1, #16
 800876c:	fb02 3306 	mla	r3, r2, r6, r3
 8008770:	b289      	uxth	r1, r1
 8008772:	3001      	adds	r0, #1
 8008774:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008778:	4285      	cmp	r5, r0
 800877a:	f84c 1b04 	str.w	r1, [ip], #4
 800877e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008782:	dcec      	bgt.n	800875e <__multadd+0x12>
 8008784:	b30e      	cbz	r6, 80087ca <__multadd+0x7e>
 8008786:	68a3      	ldr	r3, [r4, #8]
 8008788:	42ab      	cmp	r3, r5
 800878a:	dc19      	bgt.n	80087c0 <__multadd+0x74>
 800878c:	6861      	ldr	r1, [r4, #4]
 800878e:	4638      	mov	r0, r7
 8008790:	3101      	adds	r1, #1
 8008792:	f7ff ff79 	bl	8008688 <_Balloc>
 8008796:	4680      	mov	r8, r0
 8008798:	b928      	cbnz	r0, 80087a6 <__multadd+0x5a>
 800879a:	4602      	mov	r2, r0
 800879c:	4b0c      	ldr	r3, [pc, #48]	; (80087d0 <__multadd+0x84>)
 800879e:	480d      	ldr	r0, [pc, #52]	; (80087d4 <__multadd+0x88>)
 80087a0:	21b5      	movs	r1, #181	; 0xb5
 80087a2:	f000 fdab 	bl	80092fc <__assert_func>
 80087a6:	6922      	ldr	r2, [r4, #16]
 80087a8:	3202      	adds	r2, #2
 80087aa:	f104 010c 	add.w	r1, r4, #12
 80087ae:	0092      	lsls	r2, r2, #2
 80087b0:	300c      	adds	r0, #12
 80087b2:	f7ff ff5b 	bl	800866c <memcpy>
 80087b6:	4621      	mov	r1, r4
 80087b8:	4638      	mov	r0, r7
 80087ba:	f7ff ffa5 	bl	8008708 <_Bfree>
 80087be:	4644      	mov	r4, r8
 80087c0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80087c4:	3501      	adds	r5, #1
 80087c6:	615e      	str	r6, [r3, #20]
 80087c8:	6125      	str	r5, [r4, #16]
 80087ca:	4620      	mov	r0, r4
 80087cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80087d0:	080098ff 	.word	0x080098ff
 80087d4:	08009970 	.word	0x08009970

080087d8 <__hi0bits>:
 80087d8:	0c03      	lsrs	r3, r0, #16
 80087da:	041b      	lsls	r3, r3, #16
 80087dc:	b9d3      	cbnz	r3, 8008814 <__hi0bits+0x3c>
 80087de:	0400      	lsls	r0, r0, #16
 80087e0:	2310      	movs	r3, #16
 80087e2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80087e6:	bf04      	itt	eq
 80087e8:	0200      	lsleq	r0, r0, #8
 80087ea:	3308      	addeq	r3, #8
 80087ec:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80087f0:	bf04      	itt	eq
 80087f2:	0100      	lsleq	r0, r0, #4
 80087f4:	3304      	addeq	r3, #4
 80087f6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80087fa:	bf04      	itt	eq
 80087fc:	0080      	lsleq	r0, r0, #2
 80087fe:	3302      	addeq	r3, #2
 8008800:	2800      	cmp	r0, #0
 8008802:	db05      	blt.n	8008810 <__hi0bits+0x38>
 8008804:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008808:	f103 0301 	add.w	r3, r3, #1
 800880c:	bf08      	it	eq
 800880e:	2320      	moveq	r3, #32
 8008810:	4618      	mov	r0, r3
 8008812:	4770      	bx	lr
 8008814:	2300      	movs	r3, #0
 8008816:	e7e4      	b.n	80087e2 <__hi0bits+0xa>

08008818 <__lo0bits>:
 8008818:	6803      	ldr	r3, [r0, #0]
 800881a:	f013 0207 	ands.w	r2, r3, #7
 800881e:	4601      	mov	r1, r0
 8008820:	d00b      	beq.n	800883a <__lo0bits+0x22>
 8008822:	07da      	lsls	r2, r3, #31
 8008824:	d423      	bmi.n	800886e <__lo0bits+0x56>
 8008826:	0798      	lsls	r0, r3, #30
 8008828:	bf49      	itett	mi
 800882a:	085b      	lsrmi	r3, r3, #1
 800882c:	089b      	lsrpl	r3, r3, #2
 800882e:	2001      	movmi	r0, #1
 8008830:	600b      	strmi	r3, [r1, #0]
 8008832:	bf5c      	itt	pl
 8008834:	600b      	strpl	r3, [r1, #0]
 8008836:	2002      	movpl	r0, #2
 8008838:	4770      	bx	lr
 800883a:	b298      	uxth	r0, r3
 800883c:	b9a8      	cbnz	r0, 800886a <__lo0bits+0x52>
 800883e:	0c1b      	lsrs	r3, r3, #16
 8008840:	2010      	movs	r0, #16
 8008842:	b2da      	uxtb	r2, r3
 8008844:	b90a      	cbnz	r2, 800884a <__lo0bits+0x32>
 8008846:	3008      	adds	r0, #8
 8008848:	0a1b      	lsrs	r3, r3, #8
 800884a:	071a      	lsls	r2, r3, #28
 800884c:	bf04      	itt	eq
 800884e:	091b      	lsreq	r3, r3, #4
 8008850:	3004      	addeq	r0, #4
 8008852:	079a      	lsls	r2, r3, #30
 8008854:	bf04      	itt	eq
 8008856:	089b      	lsreq	r3, r3, #2
 8008858:	3002      	addeq	r0, #2
 800885a:	07da      	lsls	r2, r3, #31
 800885c:	d403      	bmi.n	8008866 <__lo0bits+0x4e>
 800885e:	085b      	lsrs	r3, r3, #1
 8008860:	f100 0001 	add.w	r0, r0, #1
 8008864:	d005      	beq.n	8008872 <__lo0bits+0x5a>
 8008866:	600b      	str	r3, [r1, #0]
 8008868:	4770      	bx	lr
 800886a:	4610      	mov	r0, r2
 800886c:	e7e9      	b.n	8008842 <__lo0bits+0x2a>
 800886e:	2000      	movs	r0, #0
 8008870:	4770      	bx	lr
 8008872:	2020      	movs	r0, #32
 8008874:	4770      	bx	lr
	...

08008878 <__i2b>:
 8008878:	b510      	push	{r4, lr}
 800887a:	460c      	mov	r4, r1
 800887c:	2101      	movs	r1, #1
 800887e:	f7ff ff03 	bl	8008688 <_Balloc>
 8008882:	4602      	mov	r2, r0
 8008884:	b928      	cbnz	r0, 8008892 <__i2b+0x1a>
 8008886:	4b05      	ldr	r3, [pc, #20]	; (800889c <__i2b+0x24>)
 8008888:	4805      	ldr	r0, [pc, #20]	; (80088a0 <__i2b+0x28>)
 800888a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800888e:	f000 fd35 	bl	80092fc <__assert_func>
 8008892:	2301      	movs	r3, #1
 8008894:	6144      	str	r4, [r0, #20]
 8008896:	6103      	str	r3, [r0, #16]
 8008898:	bd10      	pop	{r4, pc}
 800889a:	bf00      	nop
 800889c:	080098ff 	.word	0x080098ff
 80088a0:	08009970 	.word	0x08009970

080088a4 <__multiply>:
 80088a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088a8:	4691      	mov	r9, r2
 80088aa:	690a      	ldr	r2, [r1, #16]
 80088ac:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80088b0:	429a      	cmp	r2, r3
 80088b2:	bfb8      	it	lt
 80088b4:	460b      	movlt	r3, r1
 80088b6:	460c      	mov	r4, r1
 80088b8:	bfbc      	itt	lt
 80088ba:	464c      	movlt	r4, r9
 80088bc:	4699      	movlt	r9, r3
 80088be:	6927      	ldr	r7, [r4, #16]
 80088c0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80088c4:	68a3      	ldr	r3, [r4, #8]
 80088c6:	6861      	ldr	r1, [r4, #4]
 80088c8:	eb07 060a 	add.w	r6, r7, sl
 80088cc:	42b3      	cmp	r3, r6
 80088ce:	b085      	sub	sp, #20
 80088d0:	bfb8      	it	lt
 80088d2:	3101      	addlt	r1, #1
 80088d4:	f7ff fed8 	bl	8008688 <_Balloc>
 80088d8:	b930      	cbnz	r0, 80088e8 <__multiply+0x44>
 80088da:	4602      	mov	r2, r0
 80088dc:	4b44      	ldr	r3, [pc, #272]	; (80089f0 <__multiply+0x14c>)
 80088de:	4845      	ldr	r0, [pc, #276]	; (80089f4 <__multiply+0x150>)
 80088e0:	f240 115d 	movw	r1, #349	; 0x15d
 80088e4:	f000 fd0a 	bl	80092fc <__assert_func>
 80088e8:	f100 0514 	add.w	r5, r0, #20
 80088ec:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80088f0:	462b      	mov	r3, r5
 80088f2:	2200      	movs	r2, #0
 80088f4:	4543      	cmp	r3, r8
 80088f6:	d321      	bcc.n	800893c <__multiply+0x98>
 80088f8:	f104 0314 	add.w	r3, r4, #20
 80088fc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008900:	f109 0314 	add.w	r3, r9, #20
 8008904:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008908:	9202      	str	r2, [sp, #8]
 800890a:	1b3a      	subs	r2, r7, r4
 800890c:	3a15      	subs	r2, #21
 800890e:	f022 0203 	bic.w	r2, r2, #3
 8008912:	3204      	adds	r2, #4
 8008914:	f104 0115 	add.w	r1, r4, #21
 8008918:	428f      	cmp	r7, r1
 800891a:	bf38      	it	cc
 800891c:	2204      	movcc	r2, #4
 800891e:	9201      	str	r2, [sp, #4]
 8008920:	9a02      	ldr	r2, [sp, #8]
 8008922:	9303      	str	r3, [sp, #12]
 8008924:	429a      	cmp	r2, r3
 8008926:	d80c      	bhi.n	8008942 <__multiply+0x9e>
 8008928:	2e00      	cmp	r6, #0
 800892a:	dd03      	ble.n	8008934 <__multiply+0x90>
 800892c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008930:	2b00      	cmp	r3, #0
 8008932:	d05a      	beq.n	80089ea <__multiply+0x146>
 8008934:	6106      	str	r6, [r0, #16]
 8008936:	b005      	add	sp, #20
 8008938:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800893c:	f843 2b04 	str.w	r2, [r3], #4
 8008940:	e7d8      	b.n	80088f4 <__multiply+0x50>
 8008942:	f8b3 a000 	ldrh.w	sl, [r3]
 8008946:	f1ba 0f00 	cmp.w	sl, #0
 800894a:	d024      	beq.n	8008996 <__multiply+0xf2>
 800894c:	f104 0e14 	add.w	lr, r4, #20
 8008950:	46a9      	mov	r9, r5
 8008952:	f04f 0c00 	mov.w	ip, #0
 8008956:	f85e 2b04 	ldr.w	r2, [lr], #4
 800895a:	f8d9 1000 	ldr.w	r1, [r9]
 800895e:	fa1f fb82 	uxth.w	fp, r2
 8008962:	b289      	uxth	r1, r1
 8008964:	fb0a 110b 	mla	r1, sl, fp, r1
 8008968:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800896c:	f8d9 2000 	ldr.w	r2, [r9]
 8008970:	4461      	add	r1, ip
 8008972:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008976:	fb0a c20b 	mla	r2, sl, fp, ip
 800897a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800897e:	b289      	uxth	r1, r1
 8008980:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008984:	4577      	cmp	r7, lr
 8008986:	f849 1b04 	str.w	r1, [r9], #4
 800898a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800898e:	d8e2      	bhi.n	8008956 <__multiply+0xb2>
 8008990:	9a01      	ldr	r2, [sp, #4]
 8008992:	f845 c002 	str.w	ip, [r5, r2]
 8008996:	9a03      	ldr	r2, [sp, #12]
 8008998:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800899c:	3304      	adds	r3, #4
 800899e:	f1b9 0f00 	cmp.w	r9, #0
 80089a2:	d020      	beq.n	80089e6 <__multiply+0x142>
 80089a4:	6829      	ldr	r1, [r5, #0]
 80089a6:	f104 0c14 	add.w	ip, r4, #20
 80089aa:	46ae      	mov	lr, r5
 80089ac:	f04f 0a00 	mov.w	sl, #0
 80089b0:	f8bc b000 	ldrh.w	fp, [ip]
 80089b4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80089b8:	fb09 220b 	mla	r2, r9, fp, r2
 80089bc:	4492      	add	sl, r2
 80089be:	b289      	uxth	r1, r1
 80089c0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80089c4:	f84e 1b04 	str.w	r1, [lr], #4
 80089c8:	f85c 2b04 	ldr.w	r2, [ip], #4
 80089cc:	f8be 1000 	ldrh.w	r1, [lr]
 80089d0:	0c12      	lsrs	r2, r2, #16
 80089d2:	fb09 1102 	mla	r1, r9, r2, r1
 80089d6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80089da:	4567      	cmp	r7, ip
 80089dc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80089e0:	d8e6      	bhi.n	80089b0 <__multiply+0x10c>
 80089e2:	9a01      	ldr	r2, [sp, #4]
 80089e4:	50a9      	str	r1, [r5, r2]
 80089e6:	3504      	adds	r5, #4
 80089e8:	e79a      	b.n	8008920 <__multiply+0x7c>
 80089ea:	3e01      	subs	r6, #1
 80089ec:	e79c      	b.n	8008928 <__multiply+0x84>
 80089ee:	bf00      	nop
 80089f0:	080098ff 	.word	0x080098ff
 80089f4:	08009970 	.word	0x08009970

080089f8 <__pow5mult>:
 80089f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80089fc:	4615      	mov	r5, r2
 80089fe:	f012 0203 	ands.w	r2, r2, #3
 8008a02:	4606      	mov	r6, r0
 8008a04:	460f      	mov	r7, r1
 8008a06:	d007      	beq.n	8008a18 <__pow5mult+0x20>
 8008a08:	4c25      	ldr	r4, [pc, #148]	; (8008aa0 <__pow5mult+0xa8>)
 8008a0a:	3a01      	subs	r2, #1
 8008a0c:	2300      	movs	r3, #0
 8008a0e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008a12:	f7ff fe9b 	bl	800874c <__multadd>
 8008a16:	4607      	mov	r7, r0
 8008a18:	10ad      	asrs	r5, r5, #2
 8008a1a:	d03d      	beq.n	8008a98 <__pow5mult+0xa0>
 8008a1c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008a1e:	b97c      	cbnz	r4, 8008a40 <__pow5mult+0x48>
 8008a20:	2010      	movs	r0, #16
 8008a22:	f7ff fe1b 	bl	800865c <malloc>
 8008a26:	4602      	mov	r2, r0
 8008a28:	6270      	str	r0, [r6, #36]	; 0x24
 8008a2a:	b928      	cbnz	r0, 8008a38 <__pow5mult+0x40>
 8008a2c:	4b1d      	ldr	r3, [pc, #116]	; (8008aa4 <__pow5mult+0xac>)
 8008a2e:	481e      	ldr	r0, [pc, #120]	; (8008aa8 <__pow5mult+0xb0>)
 8008a30:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008a34:	f000 fc62 	bl	80092fc <__assert_func>
 8008a38:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008a3c:	6004      	str	r4, [r0, #0]
 8008a3e:	60c4      	str	r4, [r0, #12]
 8008a40:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008a44:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008a48:	b94c      	cbnz	r4, 8008a5e <__pow5mult+0x66>
 8008a4a:	f240 2171 	movw	r1, #625	; 0x271
 8008a4e:	4630      	mov	r0, r6
 8008a50:	f7ff ff12 	bl	8008878 <__i2b>
 8008a54:	2300      	movs	r3, #0
 8008a56:	f8c8 0008 	str.w	r0, [r8, #8]
 8008a5a:	4604      	mov	r4, r0
 8008a5c:	6003      	str	r3, [r0, #0]
 8008a5e:	f04f 0900 	mov.w	r9, #0
 8008a62:	07eb      	lsls	r3, r5, #31
 8008a64:	d50a      	bpl.n	8008a7c <__pow5mult+0x84>
 8008a66:	4639      	mov	r1, r7
 8008a68:	4622      	mov	r2, r4
 8008a6a:	4630      	mov	r0, r6
 8008a6c:	f7ff ff1a 	bl	80088a4 <__multiply>
 8008a70:	4639      	mov	r1, r7
 8008a72:	4680      	mov	r8, r0
 8008a74:	4630      	mov	r0, r6
 8008a76:	f7ff fe47 	bl	8008708 <_Bfree>
 8008a7a:	4647      	mov	r7, r8
 8008a7c:	106d      	asrs	r5, r5, #1
 8008a7e:	d00b      	beq.n	8008a98 <__pow5mult+0xa0>
 8008a80:	6820      	ldr	r0, [r4, #0]
 8008a82:	b938      	cbnz	r0, 8008a94 <__pow5mult+0x9c>
 8008a84:	4622      	mov	r2, r4
 8008a86:	4621      	mov	r1, r4
 8008a88:	4630      	mov	r0, r6
 8008a8a:	f7ff ff0b 	bl	80088a4 <__multiply>
 8008a8e:	6020      	str	r0, [r4, #0]
 8008a90:	f8c0 9000 	str.w	r9, [r0]
 8008a94:	4604      	mov	r4, r0
 8008a96:	e7e4      	b.n	8008a62 <__pow5mult+0x6a>
 8008a98:	4638      	mov	r0, r7
 8008a9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a9e:	bf00      	nop
 8008aa0:	08009ac0 	.word	0x08009ac0
 8008aa4:	0800988d 	.word	0x0800988d
 8008aa8:	08009970 	.word	0x08009970

08008aac <__lshift>:
 8008aac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ab0:	460c      	mov	r4, r1
 8008ab2:	6849      	ldr	r1, [r1, #4]
 8008ab4:	6923      	ldr	r3, [r4, #16]
 8008ab6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008aba:	68a3      	ldr	r3, [r4, #8]
 8008abc:	4607      	mov	r7, r0
 8008abe:	4691      	mov	r9, r2
 8008ac0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008ac4:	f108 0601 	add.w	r6, r8, #1
 8008ac8:	42b3      	cmp	r3, r6
 8008aca:	db0b      	blt.n	8008ae4 <__lshift+0x38>
 8008acc:	4638      	mov	r0, r7
 8008ace:	f7ff fddb 	bl	8008688 <_Balloc>
 8008ad2:	4605      	mov	r5, r0
 8008ad4:	b948      	cbnz	r0, 8008aea <__lshift+0x3e>
 8008ad6:	4602      	mov	r2, r0
 8008ad8:	4b2a      	ldr	r3, [pc, #168]	; (8008b84 <__lshift+0xd8>)
 8008ada:	482b      	ldr	r0, [pc, #172]	; (8008b88 <__lshift+0xdc>)
 8008adc:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008ae0:	f000 fc0c 	bl	80092fc <__assert_func>
 8008ae4:	3101      	adds	r1, #1
 8008ae6:	005b      	lsls	r3, r3, #1
 8008ae8:	e7ee      	b.n	8008ac8 <__lshift+0x1c>
 8008aea:	2300      	movs	r3, #0
 8008aec:	f100 0114 	add.w	r1, r0, #20
 8008af0:	f100 0210 	add.w	r2, r0, #16
 8008af4:	4618      	mov	r0, r3
 8008af6:	4553      	cmp	r3, sl
 8008af8:	db37      	blt.n	8008b6a <__lshift+0xbe>
 8008afa:	6920      	ldr	r0, [r4, #16]
 8008afc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008b00:	f104 0314 	add.w	r3, r4, #20
 8008b04:	f019 091f 	ands.w	r9, r9, #31
 8008b08:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008b0c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008b10:	d02f      	beq.n	8008b72 <__lshift+0xc6>
 8008b12:	f1c9 0e20 	rsb	lr, r9, #32
 8008b16:	468a      	mov	sl, r1
 8008b18:	f04f 0c00 	mov.w	ip, #0
 8008b1c:	681a      	ldr	r2, [r3, #0]
 8008b1e:	fa02 f209 	lsl.w	r2, r2, r9
 8008b22:	ea42 020c 	orr.w	r2, r2, ip
 8008b26:	f84a 2b04 	str.w	r2, [sl], #4
 8008b2a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b2e:	4298      	cmp	r0, r3
 8008b30:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008b34:	d8f2      	bhi.n	8008b1c <__lshift+0x70>
 8008b36:	1b03      	subs	r3, r0, r4
 8008b38:	3b15      	subs	r3, #21
 8008b3a:	f023 0303 	bic.w	r3, r3, #3
 8008b3e:	3304      	adds	r3, #4
 8008b40:	f104 0215 	add.w	r2, r4, #21
 8008b44:	4290      	cmp	r0, r2
 8008b46:	bf38      	it	cc
 8008b48:	2304      	movcc	r3, #4
 8008b4a:	f841 c003 	str.w	ip, [r1, r3]
 8008b4e:	f1bc 0f00 	cmp.w	ip, #0
 8008b52:	d001      	beq.n	8008b58 <__lshift+0xac>
 8008b54:	f108 0602 	add.w	r6, r8, #2
 8008b58:	3e01      	subs	r6, #1
 8008b5a:	4638      	mov	r0, r7
 8008b5c:	612e      	str	r6, [r5, #16]
 8008b5e:	4621      	mov	r1, r4
 8008b60:	f7ff fdd2 	bl	8008708 <_Bfree>
 8008b64:	4628      	mov	r0, r5
 8008b66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b6a:	f842 0f04 	str.w	r0, [r2, #4]!
 8008b6e:	3301      	adds	r3, #1
 8008b70:	e7c1      	b.n	8008af6 <__lshift+0x4a>
 8008b72:	3904      	subs	r1, #4
 8008b74:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b78:	f841 2f04 	str.w	r2, [r1, #4]!
 8008b7c:	4298      	cmp	r0, r3
 8008b7e:	d8f9      	bhi.n	8008b74 <__lshift+0xc8>
 8008b80:	e7ea      	b.n	8008b58 <__lshift+0xac>
 8008b82:	bf00      	nop
 8008b84:	080098ff 	.word	0x080098ff
 8008b88:	08009970 	.word	0x08009970

08008b8c <__mcmp>:
 8008b8c:	b530      	push	{r4, r5, lr}
 8008b8e:	6902      	ldr	r2, [r0, #16]
 8008b90:	690c      	ldr	r4, [r1, #16]
 8008b92:	1b12      	subs	r2, r2, r4
 8008b94:	d10e      	bne.n	8008bb4 <__mcmp+0x28>
 8008b96:	f100 0314 	add.w	r3, r0, #20
 8008b9a:	3114      	adds	r1, #20
 8008b9c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008ba0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008ba4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008ba8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008bac:	42a5      	cmp	r5, r4
 8008bae:	d003      	beq.n	8008bb8 <__mcmp+0x2c>
 8008bb0:	d305      	bcc.n	8008bbe <__mcmp+0x32>
 8008bb2:	2201      	movs	r2, #1
 8008bb4:	4610      	mov	r0, r2
 8008bb6:	bd30      	pop	{r4, r5, pc}
 8008bb8:	4283      	cmp	r3, r0
 8008bba:	d3f3      	bcc.n	8008ba4 <__mcmp+0x18>
 8008bbc:	e7fa      	b.n	8008bb4 <__mcmp+0x28>
 8008bbe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008bc2:	e7f7      	b.n	8008bb4 <__mcmp+0x28>

08008bc4 <__mdiff>:
 8008bc4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bc8:	460c      	mov	r4, r1
 8008bca:	4606      	mov	r6, r0
 8008bcc:	4611      	mov	r1, r2
 8008bce:	4620      	mov	r0, r4
 8008bd0:	4690      	mov	r8, r2
 8008bd2:	f7ff ffdb 	bl	8008b8c <__mcmp>
 8008bd6:	1e05      	subs	r5, r0, #0
 8008bd8:	d110      	bne.n	8008bfc <__mdiff+0x38>
 8008bda:	4629      	mov	r1, r5
 8008bdc:	4630      	mov	r0, r6
 8008bde:	f7ff fd53 	bl	8008688 <_Balloc>
 8008be2:	b930      	cbnz	r0, 8008bf2 <__mdiff+0x2e>
 8008be4:	4b3a      	ldr	r3, [pc, #232]	; (8008cd0 <__mdiff+0x10c>)
 8008be6:	4602      	mov	r2, r0
 8008be8:	f240 2132 	movw	r1, #562	; 0x232
 8008bec:	4839      	ldr	r0, [pc, #228]	; (8008cd4 <__mdiff+0x110>)
 8008bee:	f000 fb85 	bl	80092fc <__assert_func>
 8008bf2:	2301      	movs	r3, #1
 8008bf4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008bf8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bfc:	bfa4      	itt	ge
 8008bfe:	4643      	movge	r3, r8
 8008c00:	46a0      	movge	r8, r4
 8008c02:	4630      	mov	r0, r6
 8008c04:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008c08:	bfa6      	itte	ge
 8008c0a:	461c      	movge	r4, r3
 8008c0c:	2500      	movge	r5, #0
 8008c0e:	2501      	movlt	r5, #1
 8008c10:	f7ff fd3a 	bl	8008688 <_Balloc>
 8008c14:	b920      	cbnz	r0, 8008c20 <__mdiff+0x5c>
 8008c16:	4b2e      	ldr	r3, [pc, #184]	; (8008cd0 <__mdiff+0x10c>)
 8008c18:	4602      	mov	r2, r0
 8008c1a:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008c1e:	e7e5      	b.n	8008bec <__mdiff+0x28>
 8008c20:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008c24:	6926      	ldr	r6, [r4, #16]
 8008c26:	60c5      	str	r5, [r0, #12]
 8008c28:	f104 0914 	add.w	r9, r4, #20
 8008c2c:	f108 0514 	add.w	r5, r8, #20
 8008c30:	f100 0e14 	add.w	lr, r0, #20
 8008c34:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008c38:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008c3c:	f108 0210 	add.w	r2, r8, #16
 8008c40:	46f2      	mov	sl, lr
 8008c42:	2100      	movs	r1, #0
 8008c44:	f859 3b04 	ldr.w	r3, [r9], #4
 8008c48:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008c4c:	fa1f f883 	uxth.w	r8, r3
 8008c50:	fa11 f18b 	uxtah	r1, r1, fp
 8008c54:	0c1b      	lsrs	r3, r3, #16
 8008c56:	eba1 0808 	sub.w	r8, r1, r8
 8008c5a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008c5e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008c62:	fa1f f888 	uxth.w	r8, r8
 8008c66:	1419      	asrs	r1, r3, #16
 8008c68:	454e      	cmp	r6, r9
 8008c6a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008c6e:	f84a 3b04 	str.w	r3, [sl], #4
 8008c72:	d8e7      	bhi.n	8008c44 <__mdiff+0x80>
 8008c74:	1b33      	subs	r3, r6, r4
 8008c76:	3b15      	subs	r3, #21
 8008c78:	f023 0303 	bic.w	r3, r3, #3
 8008c7c:	3304      	adds	r3, #4
 8008c7e:	3415      	adds	r4, #21
 8008c80:	42a6      	cmp	r6, r4
 8008c82:	bf38      	it	cc
 8008c84:	2304      	movcc	r3, #4
 8008c86:	441d      	add	r5, r3
 8008c88:	4473      	add	r3, lr
 8008c8a:	469e      	mov	lr, r3
 8008c8c:	462e      	mov	r6, r5
 8008c8e:	4566      	cmp	r6, ip
 8008c90:	d30e      	bcc.n	8008cb0 <__mdiff+0xec>
 8008c92:	f10c 0203 	add.w	r2, ip, #3
 8008c96:	1b52      	subs	r2, r2, r5
 8008c98:	f022 0203 	bic.w	r2, r2, #3
 8008c9c:	3d03      	subs	r5, #3
 8008c9e:	45ac      	cmp	ip, r5
 8008ca0:	bf38      	it	cc
 8008ca2:	2200      	movcc	r2, #0
 8008ca4:	441a      	add	r2, r3
 8008ca6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008caa:	b17b      	cbz	r3, 8008ccc <__mdiff+0x108>
 8008cac:	6107      	str	r7, [r0, #16]
 8008cae:	e7a3      	b.n	8008bf8 <__mdiff+0x34>
 8008cb0:	f856 8b04 	ldr.w	r8, [r6], #4
 8008cb4:	fa11 f288 	uxtah	r2, r1, r8
 8008cb8:	1414      	asrs	r4, r2, #16
 8008cba:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008cbe:	b292      	uxth	r2, r2
 8008cc0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008cc4:	f84e 2b04 	str.w	r2, [lr], #4
 8008cc8:	1421      	asrs	r1, r4, #16
 8008cca:	e7e0      	b.n	8008c8e <__mdiff+0xca>
 8008ccc:	3f01      	subs	r7, #1
 8008cce:	e7ea      	b.n	8008ca6 <__mdiff+0xe2>
 8008cd0:	080098ff 	.word	0x080098ff
 8008cd4:	08009970 	.word	0x08009970

08008cd8 <__d2b>:
 8008cd8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008cdc:	4689      	mov	r9, r1
 8008cde:	2101      	movs	r1, #1
 8008ce0:	ec57 6b10 	vmov	r6, r7, d0
 8008ce4:	4690      	mov	r8, r2
 8008ce6:	f7ff fccf 	bl	8008688 <_Balloc>
 8008cea:	4604      	mov	r4, r0
 8008cec:	b930      	cbnz	r0, 8008cfc <__d2b+0x24>
 8008cee:	4602      	mov	r2, r0
 8008cf0:	4b25      	ldr	r3, [pc, #148]	; (8008d88 <__d2b+0xb0>)
 8008cf2:	4826      	ldr	r0, [pc, #152]	; (8008d8c <__d2b+0xb4>)
 8008cf4:	f240 310a 	movw	r1, #778	; 0x30a
 8008cf8:	f000 fb00 	bl	80092fc <__assert_func>
 8008cfc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008d00:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008d04:	bb35      	cbnz	r5, 8008d54 <__d2b+0x7c>
 8008d06:	2e00      	cmp	r6, #0
 8008d08:	9301      	str	r3, [sp, #4]
 8008d0a:	d028      	beq.n	8008d5e <__d2b+0x86>
 8008d0c:	4668      	mov	r0, sp
 8008d0e:	9600      	str	r6, [sp, #0]
 8008d10:	f7ff fd82 	bl	8008818 <__lo0bits>
 8008d14:	9900      	ldr	r1, [sp, #0]
 8008d16:	b300      	cbz	r0, 8008d5a <__d2b+0x82>
 8008d18:	9a01      	ldr	r2, [sp, #4]
 8008d1a:	f1c0 0320 	rsb	r3, r0, #32
 8008d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8008d22:	430b      	orrs	r3, r1
 8008d24:	40c2      	lsrs	r2, r0
 8008d26:	6163      	str	r3, [r4, #20]
 8008d28:	9201      	str	r2, [sp, #4]
 8008d2a:	9b01      	ldr	r3, [sp, #4]
 8008d2c:	61a3      	str	r3, [r4, #24]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	bf14      	ite	ne
 8008d32:	2202      	movne	r2, #2
 8008d34:	2201      	moveq	r2, #1
 8008d36:	6122      	str	r2, [r4, #16]
 8008d38:	b1d5      	cbz	r5, 8008d70 <__d2b+0x98>
 8008d3a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008d3e:	4405      	add	r5, r0
 8008d40:	f8c9 5000 	str.w	r5, [r9]
 8008d44:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008d48:	f8c8 0000 	str.w	r0, [r8]
 8008d4c:	4620      	mov	r0, r4
 8008d4e:	b003      	add	sp, #12
 8008d50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008d54:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008d58:	e7d5      	b.n	8008d06 <__d2b+0x2e>
 8008d5a:	6161      	str	r1, [r4, #20]
 8008d5c:	e7e5      	b.n	8008d2a <__d2b+0x52>
 8008d5e:	a801      	add	r0, sp, #4
 8008d60:	f7ff fd5a 	bl	8008818 <__lo0bits>
 8008d64:	9b01      	ldr	r3, [sp, #4]
 8008d66:	6163      	str	r3, [r4, #20]
 8008d68:	2201      	movs	r2, #1
 8008d6a:	6122      	str	r2, [r4, #16]
 8008d6c:	3020      	adds	r0, #32
 8008d6e:	e7e3      	b.n	8008d38 <__d2b+0x60>
 8008d70:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008d74:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008d78:	f8c9 0000 	str.w	r0, [r9]
 8008d7c:	6918      	ldr	r0, [r3, #16]
 8008d7e:	f7ff fd2b 	bl	80087d8 <__hi0bits>
 8008d82:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008d86:	e7df      	b.n	8008d48 <__d2b+0x70>
 8008d88:	080098ff 	.word	0x080098ff
 8008d8c:	08009970 	.word	0x08009970

08008d90 <_calloc_r>:
 8008d90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008d92:	fba1 2402 	umull	r2, r4, r1, r2
 8008d96:	b94c      	cbnz	r4, 8008dac <_calloc_r+0x1c>
 8008d98:	4611      	mov	r1, r2
 8008d9a:	9201      	str	r2, [sp, #4]
 8008d9c:	f000 f87a 	bl	8008e94 <_malloc_r>
 8008da0:	9a01      	ldr	r2, [sp, #4]
 8008da2:	4605      	mov	r5, r0
 8008da4:	b930      	cbnz	r0, 8008db4 <_calloc_r+0x24>
 8008da6:	4628      	mov	r0, r5
 8008da8:	b003      	add	sp, #12
 8008daa:	bd30      	pop	{r4, r5, pc}
 8008dac:	220c      	movs	r2, #12
 8008dae:	6002      	str	r2, [r0, #0]
 8008db0:	2500      	movs	r5, #0
 8008db2:	e7f8      	b.n	8008da6 <_calloc_r+0x16>
 8008db4:	4621      	mov	r1, r4
 8008db6:	f7fd fdf1 	bl	800699c <memset>
 8008dba:	e7f4      	b.n	8008da6 <_calloc_r+0x16>

08008dbc <_free_r>:
 8008dbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008dbe:	2900      	cmp	r1, #0
 8008dc0:	d044      	beq.n	8008e4c <_free_r+0x90>
 8008dc2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008dc6:	9001      	str	r0, [sp, #4]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	f1a1 0404 	sub.w	r4, r1, #4
 8008dce:	bfb8      	it	lt
 8008dd0:	18e4      	addlt	r4, r4, r3
 8008dd2:	f000 fb19 	bl	8009408 <__malloc_lock>
 8008dd6:	4a1e      	ldr	r2, [pc, #120]	; (8008e50 <_free_r+0x94>)
 8008dd8:	9801      	ldr	r0, [sp, #4]
 8008dda:	6813      	ldr	r3, [r2, #0]
 8008ddc:	b933      	cbnz	r3, 8008dec <_free_r+0x30>
 8008dde:	6063      	str	r3, [r4, #4]
 8008de0:	6014      	str	r4, [r2, #0]
 8008de2:	b003      	add	sp, #12
 8008de4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008de8:	f000 bb14 	b.w	8009414 <__malloc_unlock>
 8008dec:	42a3      	cmp	r3, r4
 8008dee:	d908      	bls.n	8008e02 <_free_r+0x46>
 8008df0:	6825      	ldr	r5, [r4, #0]
 8008df2:	1961      	adds	r1, r4, r5
 8008df4:	428b      	cmp	r3, r1
 8008df6:	bf01      	itttt	eq
 8008df8:	6819      	ldreq	r1, [r3, #0]
 8008dfa:	685b      	ldreq	r3, [r3, #4]
 8008dfc:	1949      	addeq	r1, r1, r5
 8008dfe:	6021      	streq	r1, [r4, #0]
 8008e00:	e7ed      	b.n	8008dde <_free_r+0x22>
 8008e02:	461a      	mov	r2, r3
 8008e04:	685b      	ldr	r3, [r3, #4]
 8008e06:	b10b      	cbz	r3, 8008e0c <_free_r+0x50>
 8008e08:	42a3      	cmp	r3, r4
 8008e0a:	d9fa      	bls.n	8008e02 <_free_r+0x46>
 8008e0c:	6811      	ldr	r1, [r2, #0]
 8008e0e:	1855      	adds	r5, r2, r1
 8008e10:	42a5      	cmp	r5, r4
 8008e12:	d10b      	bne.n	8008e2c <_free_r+0x70>
 8008e14:	6824      	ldr	r4, [r4, #0]
 8008e16:	4421      	add	r1, r4
 8008e18:	1854      	adds	r4, r2, r1
 8008e1a:	42a3      	cmp	r3, r4
 8008e1c:	6011      	str	r1, [r2, #0]
 8008e1e:	d1e0      	bne.n	8008de2 <_free_r+0x26>
 8008e20:	681c      	ldr	r4, [r3, #0]
 8008e22:	685b      	ldr	r3, [r3, #4]
 8008e24:	6053      	str	r3, [r2, #4]
 8008e26:	4421      	add	r1, r4
 8008e28:	6011      	str	r1, [r2, #0]
 8008e2a:	e7da      	b.n	8008de2 <_free_r+0x26>
 8008e2c:	d902      	bls.n	8008e34 <_free_r+0x78>
 8008e2e:	230c      	movs	r3, #12
 8008e30:	6003      	str	r3, [r0, #0]
 8008e32:	e7d6      	b.n	8008de2 <_free_r+0x26>
 8008e34:	6825      	ldr	r5, [r4, #0]
 8008e36:	1961      	adds	r1, r4, r5
 8008e38:	428b      	cmp	r3, r1
 8008e3a:	bf04      	itt	eq
 8008e3c:	6819      	ldreq	r1, [r3, #0]
 8008e3e:	685b      	ldreq	r3, [r3, #4]
 8008e40:	6063      	str	r3, [r4, #4]
 8008e42:	bf04      	itt	eq
 8008e44:	1949      	addeq	r1, r1, r5
 8008e46:	6021      	streq	r1, [r4, #0]
 8008e48:	6054      	str	r4, [r2, #4]
 8008e4a:	e7ca      	b.n	8008de2 <_free_r+0x26>
 8008e4c:	b003      	add	sp, #12
 8008e4e:	bd30      	pop	{r4, r5, pc}
 8008e50:	20000b70 	.word	0x20000b70

08008e54 <sbrk_aligned>:
 8008e54:	b570      	push	{r4, r5, r6, lr}
 8008e56:	4e0e      	ldr	r6, [pc, #56]	; (8008e90 <sbrk_aligned+0x3c>)
 8008e58:	460c      	mov	r4, r1
 8008e5a:	6831      	ldr	r1, [r6, #0]
 8008e5c:	4605      	mov	r5, r0
 8008e5e:	b911      	cbnz	r1, 8008e66 <sbrk_aligned+0x12>
 8008e60:	f000 f9e6 	bl	8009230 <_sbrk_r>
 8008e64:	6030      	str	r0, [r6, #0]
 8008e66:	4621      	mov	r1, r4
 8008e68:	4628      	mov	r0, r5
 8008e6a:	f000 f9e1 	bl	8009230 <_sbrk_r>
 8008e6e:	1c43      	adds	r3, r0, #1
 8008e70:	d00a      	beq.n	8008e88 <sbrk_aligned+0x34>
 8008e72:	1cc4      	adds	r4, r0, #3
 8008e74:	f024 0403 	bic.w	r4, r4, #3
 8008e78:	42a0      	cmp	r0, r4
 8008e7a:	d007      	beq.n	8008e8c <sbrk_aligned+0x38>
 8008e7c:	1a21      	subs	r1, r4, r0
 8008e7e:	4628      	mov	r0, r5
 8008e80:	f000 f9d6 	bl	8009230 <_sbrk_r>
 8008e84:	3001      	adds	r0, #1
 8008e86:	d101      	bne.n	8008e8c <sbrk_aligned+0x38>
 8008e88:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8008e8c:	4620      	mov	r0, r4
 8008e8e:	bd70      	pop	{r4, r5, r6, pc}
 8008e90:	20000b74 	.word	0x20000b74

08008e94 <_malloc_r>:
 8008e94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e98:	1ccd      	adds	r5, r1, #3
 8008e9a:	f025 0503 	bic.w	r5, r5, #3
 8008e9e:	3508      	adds	r5, #8
 8008ea0:	2d0c      	cmp	r5, #12
 8008ea2:	bf38      	it	cc
 8008ea4:	250c      	movcc	r5, #12
 8008ea6:	2d00      	cmp	r5, #0
 8008ea8:	4607      	mov	r7, r0
 8008eaa:	db01      	blt.n	8008eb0 <_malloc_r+0x1c>
 8008eac:	42a9      	cmp	r1, r5
 8008eae:	d905      	bls.n	8008ebc <_malloc_r+0x28>
 8008eb0:	230c      	movs	r3, #12
 8008eb2:	603b      	str	r3, [r7, #0]
 8008eb4:	2600      	movs	r6, #0
 8008eb6:	4630      	mov	r0, r6
 8008eb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ebc:	4e2e      	ldr	r6, [pc, #184]	; (8008f78 <_malloc_r+0xe4>)
 8008ebe:	f000 faa3 	bl	8009408 <__malloc_lock>
 8008ec2:	6833      	ldr	r3, [r6, #0]
 8008ec4:	461c      	mov	r4, r3
 8008ec6:	bb34      	cbnz	r4, 8008f16 <_malloc_r+0x82>
 8008ec8:	4629      	mov	r1, r5
 8008eca:	4638      	mov	r0, r7
 8008ecc:	f7ff ffc2 	bl	8008e54 <sbrk_aligned>
 8008ed0:	1c43      	adds	r3, r0, #1
 8008ed2:	4604      	mov	r4, r0
 8008ed4:	d14d      	bne.n	8008f72 <_malloc_r+0xde>
 8008ed6:	6834      	ldr	r4, [r6, #0]
 8008ed8:	4626      	mov	r6, r4
 8008eda:	2e00      	cmp	r6, #0
 8008edc:	d140      	bne.n	8008f60 <_malloc_r+0xcc>
 8008ede:	6823      	ldr	r3, [r4, #0]
 8008ee0:	4631      	mov	r1, r6
 8008ee2:	4638      	mov	r0, r7
 8008ee4:	eb04 0803 	add.w	r8, r4, r3
 8008ee8:	f000 f9a2 	bl	8009230 <_sbrk_r>
 8008eec:	4580      	cmp	r8, r0
 8008eee:	d13a      	bne.n	8008f66 <_malloc_r+0xd2>
 8008ef0:	6821      	ldr	r1, [r4, #0]
 8008ef2:	3503      	adds	r5, #3
 8008ef4:	1a6d      	subs	r5, r5, r1
 8008ef6:	f025 0503 	bic.w	r5, r5, #3
 8008efa:	3508      	adds	r5, #8
 8008efc:	2d0c      	cmp	r5, #12
 8008efe:	bf38      	it	cc
 8008f00:	250c      	movcc	r5, #12
 8008f02:	4629      	mov	r1, r5
 8008f04:	4638      	mov	r0, r7
 8008f06:	f7ff ffa5 	bl	8008e54 <sbrk_aligned>
 8008f0a:	3001      	adds	r0, #1
 8008f0c:	d02b      	beq.n	8008f66 <_malloc_r+0xd2>
 8008f0e:	6823      	ldr	r3, [r4, #0]
 8008f10:	442b      	add	r3, r5
 8008f12:	6023      	str	r3, [r4, #0]
 8008f14:	e00e      	b.n	8008f34 <_malloc_r+0xa0>
 8008f16:	6822      	ldr	r2, [r4, #0]
 8008f18:	1b52      	subs	r2, r2, r5
 8008f1a:	d41e      	bmi.n	8008f5a <_malloc_r+0xc6>
 8008f1c:	2a0b      	cmp	r2, #11
 8008f1e:	d916      	bls.n	8008f4e <_malloc_r+0xba>
 8008f20:	1961      	adds	r1, r4, r5
 8008f22:	42a3      	cmp	r3, r4
 8008f24:	6025      	str	r5, [r4, #0]
 8008f26:	bf18      	it	ne
 8008f28:	6059      	strne	r1, [r3, #4]
 8008f2a:	6863      	ldr	r3, [r4, #4]
 8008f2c:	bf08      	it	eq
 8008f2e:	6031      	streq	r1, [r6, #0]
 8008f30:	5162      	str	r2, [r4, r5]
 8008f32:	604b      	str	r3, [r1, #4]
 8008f34:	4638      	mov	r0, r7
 8008f36:	f104 060b 	add.w	r6, r4, #11
 8008f3a:	f000 fa6b 	bl	8009414 <__malloc_unlock>
 8008f3e:	f026 0607 	bic.w	r6, r6, #7
 8008f42:	1d23      	adds	r3, r4, #4
 8008f44:	1af2      	subs	r2, r6, r3
 8008f46:	d0b6      	beq.n	8008eb6 <_malloc_r+0x22>
 8008f48:	1b9b      	subs	r3, r3, r6
 8008f4a:	50a3      	str	r3, [r4, r2]
 8008f4c:	e7b3      	b.n	8008eb6 <_malloc_r+0x22>
 8008f4e:	6862      	ldr	r2, [r4, #4]
 8008f50:	42a3      	cmp	r3, r4
 8008f52:	bf0c      	ite	eq
 8008f54:	6032      	streq	r2, [r6, #0]
 8008f56:	605a      	strne	r2, [r3, #4]
 8008f58:	e7ec      	b.n	8008f34 <_malloc_r+0xa0>
 8008f5a:	4623      	mov	r3, r4
 8008f5c:	6864      	ldr	r4, [r4, #4]
 8008f5e:	e7b2      	b.n	8008ec6 <_malloc_r+0x32>
 8008f60:	4634      	mov	r4, r6
 8008f62:	6876      	ldr	r6, [r6, #4]
 8008f64:	e7b9      	b.n	8008eda <_malloc_r+0x46>
 8008f66:	230c      	movs	r3, #12
 8008f68:	603b      	str	r3, [r7, #0]
 8008f6a:	4638      	mov	r0, r7
 8008f6c:	f000 fa52 	bl	8009414 <__malloc_unlock>
 8008f70:	e7a1      	b.n	8008eb6 <_malloc_r+0x22>
 8008f72:	6025      	str	r5, [r4, #0]
 8008f74:	e7de      	b.n	8008f34 <_malloc_r+0xa0>
 8008f76:	bf00      	nop
 8008f78:	20000b70 	.word	0x20000b70

08008f7c <__sfputc_r>:
 8008f7c:	6893      	ldr	r3, [r2, #8]
 8008f7e:	3b01      	subs	r3, #1
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	b410      	push	{r4}
 8008f84:	6093      	str	r3, [r2, #8]
 8008f86:	da08      	bge.n	8008f9a <__sfputc_r+0x1e>
 8008f88:	6994      	ldr	r4, [r2, #24]
 8008f8a:	42a3      	cmp	r3, r4
 8008f8c:	db01      	blt.n	8008f92 <__sfputc_r+0x16>
 8008f8e:	290a      	cmp	r1, #10
 8008f90:	d103      	bne.n	8008f9a <__sfputc_r+0x1e>
 8008f92:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008f96:	f7fe ba01 	b.w	800739c <__swbuf_r>
 8008f9a:	6813      	ldr	r3, [r2, #0]
 8008f9c:	1c58      	adds	r0, r3, #1
 8008f9e:	6010      	str	r0, [r2, #0]
 8008fa0:	7019      	strb	r1, [r3, #0]
 8008fa2:	4608      	mov	r0, r1
 8008fa4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008fa8:	4770      	bx	lr

08008faa <__sfputs_r>:
 8008faa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fac:	4606      	mov	r6, r0
 8008fae:	460f      	mov	r7, r1
 8008fb0:	4614      	mov	r4, r2
 8008fb2:	18d5      	adds	r5, r2, r3
 8008fb4:	42ac      	cmp	r4, r5
 8008fb6:	d101      	bne.n	8008fbc <__sfputs_r+0x12>
 8008fb8:	2000      	movs	r0, #0
 8008fba:	e007      	b.n	8008fcc <__sfputs_r+0x22>
 8008fbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008fc0:	463a      	mov	r2, r7
 8008fc2:	4630      	mov	r0, r6
 8008fc4:	f7ff ffda 	bl	8008f7c <__sfputc_r>
 8008fc8:	1c43      	adds	r3, r0, #1
 8008fca:	d1f3      	bne.n	8008fb4 <__sfputs_r+0xa>
 8008fcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008fd0 <_vfiprintf_r>:
 8008fd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fd4:	460d      	mov	r5, r1
 8008fd6:	b09d      	sub	sp, #116	; 0x74
 8008fd8:	4614      	mov	r4, r2
 8008fda:	4698      	mov	r8, r3
 8008fdc:	4606      	mov	r6, r0
 8008fde:	b118      	cbz	r0, 8008fe8 <_vfiprintf_r+0x18>
 8008fe0:	6983      	ldr	r3, [r0, #24]
 8008fe2:	b90b      	cbnz	r3, 8008fe8 <_vfiprintf_r+0x18>
 8008fe4:	f7ff fa30 	bl	8008448 <__sinit>
 8008fe8:	4b89      	ldr	r3, [pc, #548]	; (8009210 <_vfiprintf_r+0x240>)
 8008fea:	429d      	cmp	r5, r3
 8008fec:	d11b      	bne.n	8009026 <_vfiprintf_r+0x56>
 8008fee:	6875      	ldr	r5, [r6, #4]
 8008ff0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008ff2:	07d9      	lsls	r1, r3, #31
 8008ff4:	d405      	bmi.n	8009002 <_vfiprintf_r+0x32>
 8008ff6:	89ab      	ldrh	r3, [r5, #12]
 8008ff8:	059a      	lsls	r2, r3, #22
 8008ffa:	d402      	bmi.n	8009002 <_vfiprintf_r+0x32>
 8008ffc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008ffe:	f7ff fac6 	bl	800858e <__retarget_lock_acquire_recursive>
 8009002:	89ab      	ldrh	r3, [r5, #12]
 8009004:	071b      	lsls	r3, r3, #28
 8009006:	d501      	bpl.n	800900c <_vfiprintf_r+0x3c>
 8009008:	692b      	ldr	r3, [r5, #16]
 800900a:	b9eb      	cbnz	r3, 8009048 <_vfiprintf_r+0x78>
 800900c:	4629      	mov	r1, r5
 800900e:	4630      	mov	r0, r6
 8009010:	f7fe fa16 	bl	8007440 <__swsetup_r>
 8009014:	b1c0      	cbz	r0, 8009048 <_vfiprintf_r+0x78>
 8009016:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009018:	07dc      	lsls	r4, r3, #31
 800901a:	d50e      	bpl.n	800903a <_vfiprintf_r+0x6a>
 800901c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009020:	b01d      	add	sp, #116	; 0x74
 8009022:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009026:	4b7b      	ldr	r3, [pc, #492]	; (8009214 <_vfiprintf_r+0x244>)
 8009028:	429d      	cmp	r5, r3
 800902a:	d101      	bne.n	8009030 <_vfiprintf_r+0x60>
 800902c:	68b5      	ldr	r5, [r6, #8]
 800902e:	e7df      	b.n	8008ff0 <_vfiprintf_r+0x20>
 8009030:	4b79      	ldr	r3, [pc, #484]	; (8009218 <_vfiprintf_r+0x248>)
 8009032:	429d      	cmp	r5, r3
 8009034:	bf08      	it	eq
 8009036:	68f5      	ldreq	r5, [r6, #12]
 8009038:	e7da      	b.n	8008ff0 <_vfiprintf_r+0x20>
 800903a:	89ab      	ldrh	r3, [r5, #12]
 800903c:	0598      	lsls	r0, r3, #22
 800903e:	d4ed      	bmi.n	800901c <_vfiprintf_r+0x4c>
 8009040:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009042:	f7ff faa5 	bl	8008590 <__retarget_lock_release_recursive>
 8009046:	e7e9      	b.n	800901c <_vfiprintf_r+0x4c>
 8009048:	2300      	movs	r3, #0
 800904a:	9309      	str	r3, [sp, #36]	; 0x24
 800904c:	2320      	movs	r3, #32
 800904e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009052:	f8cd 800c 	str.w	r8, [sp, #12]
 8009056:	2330      	movs	r3, #48	; 0x30
 8009058:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800921c <_vfiprintf_r+0x24c>
 800905c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009060:	f04f 0901 	mov.w	r9, #1
 8009064:	4623      	mov	r3, r4
 8009066:	469a      	mov	sl, r3
 8009068:	f813 2b01 	ldrb.w	r2, [r3], #1
 800906c:	b10a      	cbz	r2, 8009072 <_vfiprintf_r+0xa2>
 800906e:	2a25      	cmp	r2, #37	; 0x25
 8009070:	d1f9      	bne.n	8009066 <_vfiprintf_r+0x96>
 8009072:	ebba 0b04 	subs.w	fp, sl, r4
 8009076:	d00b      	beq.n	8009090 <_vfiprintf_r+0xc0>
 8009078:	465b      	mov	r3, fp
 800907a:	4622      	mov	r2, r4
 800907c:	4629      	mov	r1, r5
 800907e:	4630      	mov	r0, r6
 8009080:	f7ff ff93 	bl	8008faa <__sfputs_r>
 8009084:	3001      	adds	r0, #1
 8009086:	f000 80aa 	beq.w	80091de <_vfiprintf_r+0x20e>
 800908a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800908c:	445a      	add	r2, fp
 800908e:	9209      	str	r2, [sp, #36]	; 0x24
 8009090:	f89a 3000 	ldrb.w	r3, [sl]
 8009094:	2b00      	cmp	r3, #0
 8009096:	f000 80a2 	beq.w	80091de <_vfiprintf_r+0x20e>
 800909a:	2300      	movs	r3, #0
 800909c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80090a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80090a4:	f10a 0a01 	add.w	sl, sl, #1
 80090a8:	9304      	str	r3, [sp, #16]
 80090aa:	9307      	str	r3, [sp, #28]
 80090ac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80090b0:	931a      	str	r3, [sp, #104]	; 0x68
 80090b2:	4654      	mov	r4, sl
 80090b4:	2205      	movs	r2, #5
 80090b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090ba:	4858      	ldr	r0, [pc, #352]	; (800921c <_vfiprintf_r+0x24c>)
 80090bc:	f7f7 f890 	bl	80001e0 <memchr>
 80090c0:	9a04      	ldr	r2, [sp, #16]
 80090c2:	b9d8      	cbnz	r0, 80090fc <_vfiprintf_r+0x12c>
 80090c4:	06d1      	lsls	r1, r2, #27
 80090c6:	bf44      	itt	mi
 80090c8:	2320      	movmi	r3, #32
 80090ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80090ce:	0713      	lsls	r3, r2, #28
 80090d0:	bf44      	itt	mi
 80090d2:	232b      	movmi	r3, #43	; 0x2b
 80090d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80090d8:	f89a 3000 	ldrb.w	r3, [sl]
 80090dc:	2b2a      	cmp	r3, #42	; 0x2a
 80090de:	d015      	beq.n	800910c <_vfiprintf_r+0x13c>
 80090e0:	9a07      	ldr	r2, [sp, #28]
 80090e2:	4654      	mov	r4, sl
 80090e4:	2000      	movs	r0, #0
 80090e6:	f04f 0c0a 	mov.w	ip, #10
 80090ea:	4621      	mov	r1, r4
 80090ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 80090f0:	3b30      	subs	r3, #48	; 0x30
 80090f2:	2b09      	cmp	r3, #9
 80090f4:	d94e      	bls.n	8009194 <_vfiprintf_r+0x1c4>
 80090f6:	b1b0      	cbz	r0, 8009126 <_vfiprintf_r+0x156>
 80090f8:	9207      	str	r2, [sp, #28]
 80090fa:	e014      	b.n	8009126 <_vfiprintf_r+0x156>
 80090fc:	eba0 0308 	sub.w	r3, r0, r8
 8009100:	fa09 f303 	lsl.w	r3, r9, r3
 8009104:	4313      	orrs	r3, r2
 8009106:	9304      	str	r3, [sp, #16]
 8009108:	46a2      	mov	sl, r4
 800910a:	e7d2      	b.n	80090b2 <_vfiprintf_r+0xe2>
 800910c:	9b03      	ldr	r3, [sp, #12]
 800910e:	1d19      	adds	r1, r3, #4
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	9103      	str	r1, [sp, #12]
 8009114:	2b00      	cmp	r3, #0
 8009116:	bfbb      	ittet	lt
 8009118:	425b      	neglt	r3, r3
 800911a:	f042 0202 	orrlt.w	r2, r2, #2
 800911e:	9307      	strge	r3, [sp, #28]
 8009120:	9307      	strlt	r3, [sp, #28]
 8009122:	bfb8      	it	lt
 8009124:	9204      	strlt	r2, [sp, #16]
 8009126:	7823      	ldrb	r3, [r4, #0]
 8009128:	2b2e      	cmp	r3, #46	; 0x2e
 800912a:	d10c      	bne.n	8009146 <_vfiprintf_r+0x176>
 800912c:	7863      	ldrb	r3, [r4, #1]
 800912e:	2b2a      	cmp	r3, #42	; 0x2a
 8009130:	d135      	bne.n	800919e <_vfiprintf_r+0x1ce>
 8009132:	9b03      	ldr	r3, [sp, #12]
 8009134:	1d1a      	adds	r2, r3, #4
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	9203      	str	r2, [sp, #12]
 800913a:	2b00      	cmp	r3, #0
 800913c:	bfb8      	it	lt
 800913e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009142:	3402      	adds	r4, #2
 8009144:	9305      	str	r3, [sp, #20]
 8009146:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800922c <_vfiprintf_r+0x25c>
 800914a:	7821      	ldrb	r1, [r4, #0]
 800914c:	2203      	movs	r2, #3
 800914e:	4650      	mov	r0, sl
 8009150:	f7f7 f846 	bl	80001e0 <memchr>
 8009154:	b140      	cbz	r0, 8009168 <_vfiprintf_r+0x198>
 8009156:	2340      	movs	r3, #64	; 0x40
 8009158:	eba0 000a 	sub.w	r0, r0, sl
 800915c:	fa03 f000 	lsl.w	r0, r3, r0
 8009160:	9b04      	ldr	r3, [sp, #16]
 8009162:	4303      	orrs	r3, r0
 8009164:	3401      	adds	r4, #1
 8009166:	9304      	str	r3, [sp, #16]
 8009168:	f814 1b01 	ldrb.w	r1, [r4], #1
 800916c:	482c      	ldr	r0, [pc, #176]	; (8009220 <_vfiprintf_r+0x250>)
 800916e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009172:	2206      	movs	r2, #6
 8009174:	f7f7 f834 	bl	80001e0 <memchr>
 8009178:	2800      	cmp	r0, #0
 800917a:	d03f      	beq.n	80091fc <_vfiprintf_r+0x22c>
 800917c:	4b29      	ldr	r3, [pc, #164]	; (8009224 <_vfiprintf_r+0x254>)
 800917e:	bb1b      	cbnz	r3, 80091c8 <_vfiprintf_r+0x1f8>
 8009180:	9b03      	ldr	r3, [sp, #12]
 8009182:	3307      	adds	r3, #7
 8009184:	f023 0307 	bic.w	r3, r3, #7
 8009188:	3308      	adds	r3, #8
 800918a:	9303      	str	r3, [sp, #12]
 800918c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800918e:	443b      	add	r3, r7
 8009190:	9309      	str	r3, [sp, #36]	; 0x24
 8009192:	e767      	b.n	8009064 <_vfiprintf_r+0x94>
 8009194:	fb0c 3202 	mla	r2, ip, r2, r3
 8009198:	460c      	mov	r4, r1
 800919a:	2001      	movs	r0, #1
 800919c:	e7a5      	b.n	80090ea <_vfiprintf_r+0x11a>
 800919e:	2300      	movs	r3, #0
 80091a0:	3401      	adds	r4, #1
 80091a2:	9305      	str	r3, [sp, #20]
 80091a4:	4619      	mov	r1, r3
 80091a6:	f04f 0c0a 	mov.w	ip, #10
 80091aa:	4620      	mov	r0, r4
 80091ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 80091b0:	3a30      	subs	r2, #48	; 0x30
 80091b2:	2a09      	cmp	r2, #9
 80091b4:	d903      	bls.n	80091be <_vfiprintf_r+0x1ee>
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d0c5      	beq.n	8009146 <_vfiprintf_r+0x176>
 80091ba:	9105      	str	r1, [sp, #20]
 80091bc:	e7c3      	b.n	8009146 <_vfiprintf_r+0x176>
 80091be:	fb0c 2101 	mla	r1, ip, r1, r2
 80091c2:	4604      	mov	r4, r0
 80091c4:	2301      	movs	r3, #1
 80091c6:	e7f0      	b.n	80091aa <_vfiprintf_r+0x1da>
 80091c8:	ab03      	add	r3, sp, #12
 80091ca:	9300      	str	r3, [sp, #0]
 80091cc:	462a      	mov	r2, r5
 80091ce:	4b16      	ldr	r3, [pc, #88]	; (8009228 <_vfiprintf_r+0x258>)
 80091d0:	a904      	add	r1, sp, #16
 80091d2:	4630      	mov	r0, r6
 80091d4:	f7fd fc8a 	bl	8006aec <_printf_float>
 80091d8:	4607      	mov	r7, r0
 80091da:	1c78      	adds	r0, r7, #1
 80091dc:	d1d6      	bne.n	800918c <_vfiprintf_r+0x1bc>
 80091de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80091e0:	07d9      	lsls	r1, r3, #31
 80091e2:	d405      	bmi.n	80091f0 <_vfiprintf_r+0x220>
 80091e4:	89ab      	ldrh	r3, [r5, #12]
 80091e6:	059a      	lsls	r2, r3, #22
 80091e8:	d402      	bmi.n	80091f0 <_vfiprintf_r+0x220>
 80091ea:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80091ec:	f7ff f9d0 	bl	8008590 <__retarget_lock_release_recursive>
 80091f0:	89ab      	ldrh	r3, [r5, #12]
 80091f2:	065b      	lsls	r3, r3, #25
 80091f4:	f53f af12 	bmi.w	800901c <_vfiprintf_r+0x4c>
 80091f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80091fa:	e711      	b.n	8009020 <_vfiprintf_r+0x50>
 80091fc:	ab03      	add	r3, sp, #12
 80091fe:	9300      	str	r3, [sp, #0]
 8009200:	462a      	mov	r2, r5
 8009202:	4b09      	ldr	r3, [pc, #36]	; (8009228 <_vfiprintf_r+0x258>)
 8009204:	a904      	add	r1, sp, #16
 8009206:	4630      	mov	r0, r6
 8009208:	f7fd ff14 	bl	8007034 <_printf_i>
 800920c:	e7e4      	b.n	80091d8 <_vfiprintf_r+0x208>
 800920e:	bf00      	nop
 8009210:	08009930 	.word	0x08009930
 8009214:	08009950 	.word	0x08009950
 8009218:	08009910 	.word	0x08009910
 800921c:	08009acc 	.word	0x08009acc
 8009220:	08009ad6 	.word	0x08009ad6
 8009224:	08006aed 	.word	0x08006aed
 8009228:	08008fab 	.word	0x08008fab
 800922c:	08009ad2 	.word	0x08009ad2

08009230 <_sbrk_r>:
 8009230:	b538      	push	{r3, r4, r5, lr}
 8009232:	4d06      	ldr	r5, [pc, #24]	; (800924c <_sbrk_r+0x1c>)
 8009234:	2300      	movs	r3, #0
 8009236:	4604      	mov	r4, r0
 8009238:	4608      	mov	r0, r1
 800923a:	602b      	str	r3, [r5, #0]
 800923c:	f7f9 f8d0 	bl	80023e0 <_sbrk>
 8009240:	1c43      	adds	r3, r0, #1
 8009242:	d102      	bne.n	800924a <_sbrk_r+0x1a>
 8009244:	682b      	ldr	r3, [r5, #0]
 8009246:	b103      	cbz	r3, 800924a <_sbrk_r+0x1a>
 8009248:	6023      	str	r3, [r4, #0]
 800924a:	bd38      	pop	{r3, r4, r5, pc}
 800924c:	20000b78 	.word	0x20000b78

08009250 <__sread>:
 8009250:	b510      	push	{r4, lr}
 8009252:	460c      	mov	r4, r1
 8009254:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009258:	f000 f8e2 	bl	8009420 <_read_r>
 800925c:	2800      	cmp	r0, #0
 800925e:	bfab      	itete	ge
 8009260:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009262:	89a3      	ldrhlt	r3, [r4, #12]
 8009264:	181b      	addge	r3, r3, r0
 8009266:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800926a:	bfac      	ite	ge
 800926c:	6563      	strge	r3, [r4, #84]	; 0x54
 800926e:	81a3      	strhlt	r3, [r4, #12]
 8009270:	bd10      	pop	{r4, pc}

08009272 <__swrite>:
 8009272:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009276:	461f      	mov	r7, r3
 8009278:	898b      	ldrh	r3, [r1, #12]
 800927a:	05db      	lsls	r3, r3, #23
 800927c:	4605      	mov	r5, r0
 800927e:	460c      	mov	r4, r1
 8009280:	4616      	mov	r6, r2
 8009282:	d505      	bpl.n	8009290 <__swrite+0x1e>
 8009284:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009288:	2302      	movs	r3, #2
 800928a:	2200      	movs	r2, #0
 800928c:	f000 f898 	bl	80093c0 <_lseek_r>
 8009290:	89a3      	ldrh	r3, [r4, #12]
 8009292:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009296:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800929a:	81a3      	strh	r3, [r4, #12]
 800929c:	4632      	mov	r2, r6
 800929e:	463b      	mov	r3, r7
 80092a0:	4628      	mov	r0, r5
 80092a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80092a6:	f000 b817 	b.w	80092d8 <_write_r>

080092aa <__sseek>:
 80092aa:	b510      	push	{r4, lr}
 80092ac:	460c      	mov	r4, r1
 80092ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092b2:	f000 f885 	bl	80093c0 <_lseek_r>
 80092b6:	1c43      	adds	r3, r0, #1
 80092b8:	89a3      	ldrh	r3, [r4, #12]
 80092ba:	bf15      	itete	ne
 80092bc:	6560      	strne	r0, [r4, #84]	; 0x54
 80092be:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80092c2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80092c6:	81a3      	strheq	r3, [r4, #12]
 80092c8:	bf18      	it	ne
 80092ca:	81a3      	strhne	r3, [r4, #12]
 80092cc:	bd10      	pop	{r4, pc}

080092ce <__sclose>:
 80092ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092d2:	f000 b831 	b.w	8009338 <_close_r>
	...

080092d8 <_write_r>:
 80092d8:	b538      	push	{r3, r4, r5, lr}
 80092da:	4d07      	ldr	r5, [pc, #28]	; (80092f8 <_write_r+0x20>)
 80092dc:	4604      	mov	r4, r0
 80092de:	4608      	mov	r0, r1
 80092e0:	4611      	mov	r1, r2
 80092e2:	2200      	movs	r2, #0
 80092e4:	602a      	str	r2, [r5, #0]
 80092e6:	461a      	mov	r2, r3
 80092e8:	f7f9 f829 	bl	800233e <_write>
 80092ec:	1c43      	adds	r3, r0, #1
 80092ee:	d102      	bne.n	80092f6 <_write_r+0x1e>
 80092f0:	682b      	ldr	r3, [r5, #0]
 80092f2:	b103      	cbz	r3, 80092f6 <_write_r+0x1e>
 80092f4:	6023      	str	r3, [r4, #0]
 80092f6:	bd38      	pop	{r3, r4, r5, pc}
 80092f8:	20000b78 	.word	0x20000b78

080092fc <__assert_func>:
 80092fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80092fe:	4614      	mov	r4, r2
 8009300:	461a      	mov	r2, r3
 8009302:	4b09      	ldr	r3, [pc, #36]	; (8009328 <__assert_func+0x2c>)
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	4605      	mov	r5, r0
 8009308:	68d8      	ldr	r0, [r3, #12]
 800930a:	b14c      	cbz	r4, 8009320 <__assert_func+0x24>
 800930c:	4b07      	ldr	r3, [pc, #28]	; (800932c <__assert_func+0x30>)
 800930e:	9100      	str	r1, [sp, #0]
 8009310:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009314:	4906      	ldr	r1, [pc, #24]	; (8009330 <__assert_func+0x34>)
 8009316:	462b      	mov	r3, r5
 8009318:	f000 f81e 	bl	8009358 <fiprintf>
 800931c:	f000 f89f 	bl	800945e <abort>
 8009320:	4b04      	ldr	r3, [pc, #16]	; (8009334 <__assert_func+0x38>)
 8009322:	461c      	mov	r4, r3
 8009324:	e7f3      	b.n	800930e <__assert_func+0x12>
 8009326:	bf00      	nop
 8009328:	2000000c 	.word	0x2000000c
 800932c:	08009add 	.word	0x08009add
 8009330:	08009aea 	.word	0x08009aea
 8009334:	08009b18 	.word	0x08009b18

08009338 <_close_r>:
 8009338:	b538      	push	{r3, r4, r5, lr}
 800933a:	4d06      	ldr	r5, [pc, #24]	; (8009354 <_close_r+0x1c>)
 800933c:	2300      	movs	r3, #0
 800933e:	4604      	mov	r4, r0
 8009340:	4608      	mov	r0, r1
 8009342:	602b      	str	r3, [r5, #0]
 8009344:	f7f9 f817 	bl	8002376 <_close>
 8009348:	1c43      	adds	r3, r0, #1
 800934a:	d102      	bne.n	8009352 <_close_r+0x1a>
 800934c:	682b      	ldr	r3, [r5, #0]
 800934e:	b103      	cbz	r3, 8009352 <_close_r+0x1a>
 8009350:	6023      	str	r3, [r4, #0]
 8009352:	bd38      	pop	{r3, r4, r5, pc}
 8009354:	20000b78 	.word	0x20000b78

08009358 <fiprintf>:
 8009358:	b40e      	push	{r1, r2, r3}
 800935a:	b503      	push	{r0, r1, lr}
 800935c:	4601      	mov	r1, r0
 800935e:	ab03      	add	r3, sp, #12
 8009360:	4805      	ldr	r0, [pc, #20]	; (8009378 <fiprintf+0x20>)
 8009362:	f853 2b04 	ldr.w	r2, [r3], #4
 8009366:	6800      	ldr	r0, [r0, #0]
 8009368:	9301      	str	r3, [sp, #4]
 800936a:	f7ff fe31 	bl	8008fd0 <_vfiprintf_r>
 800936e:	b002      	add	sp, #8
 8009370:	f85d eb04 	ldr.w	lr, [sp], #4
 8009374:	b003      	add	sp, #12
 8009376:	4770      	bx	lr
 8009378:	2000000c 	.word	0x2000000c

0800937c <_fstat_r>:
 800937c:	b538      	push	{r3, r4, r5, lr}
 800937e:	4d07      	ldr	r5, [pc, #28]	; (800939c <_fstat_r+0x20>)
 8009380:	2300      	movs	r3, #0
 8009382:	4604      	mov	r4, r0
 8009384:	4608      	mov	r0, r1
 8009386:	4611      	mov	r1, r2
 8009388:	602b      	str	r3, [r5, #0]
 800938a:	f7f9 f800 	bl	800238e <_fstat>
 800938e:	1c43      	adds	r3, r0, #1
 8009390:	d102      	bne.n	8009398 <_fstat_r+0x1c>
 8009392:	682b      	ldr	r3, [r5, #0]
 8009394:	b103      	cbz	r3, 8009398 <_fstat_r+0x1c>
 8009396:	6023      	str	r3, [r4, #0]
 8009398:	bd38      	pop	{r3, r4, r5, pc}
 800939a:	bf00      	nop
 800939c:	20000b78 	.word	0x20000b78

080093a0 <_isatty_r>:
 80093a0:	b538      	push	{r3, r4, r5, lr}
 80093a2:	4d06      	ldr	r5, [pc, #24]	; (80093bc <_isatty_r+0x1c>)
 80093a4:	2300      	movs	r3, #0
 80093a6:	4604      	mov	r4, r0
 80093a8:	4608      	mov	r0, r1
 80093aa:	602b      	str	r3, [r5, #0]
 80093ac:	f7f8 ffff 	bl	80023ae <_isatty>
 80093b0:	1c43      	adds	r3, r0, #1
 80093b2:	d102      	bne.n	80093ba <_isatty_r+0x1a>
 80093b4:	682b      	ldr	r3, [r5, #0]
 80093b6:	b103      	cbz	r3, 80093ba <_isatty_r+0x1a>
 80093b8:	6023      	str	r3, [r4, #0]
 80093ba:	bd38      	pop	{r3, r4, r5, pc}
 80093bc:	20000b78 	.word	0x20000b78

080093c0 <_lseek_r>:
 80093c0:	b538      	push	{r3, r4, r5, lr}
 80093c2:	4d07      	ldr	r5, [pc, #28]	; (80093e0 <_lseek_r+0x20>)
 80093c4:	4604      	mov	r4, r0
 80093c6:	4608      	mov	r0, r1
 80093c8:	4611      	mov	r1, r2
 80093ca:	2200      	movs	r2, #0
 80093cc:	602a      	str	r2, [r5, #0]
 80093ce:	461a      	mov	r2, r3
 80093d0:	f7f8 fff8 	bl	80023c4 <_lseek>
 80093d4:	1c43      	adds	r3, r0, #1
 80093d6:	d102      	bne.n	80093de <_lseek_r+0x1e>
 80093d8:	682b      	ldr	r3, [r5, #0]
 80093da:	b103      	cbz	r3, 80093de <_lseek_r+0x1e>
 80093dc:	6023      	str	r3, [r4, #0]
 80093de:	bd38      	pop	{r3, r4, r5, pc}
 80093e0:	20000b78 	.word	0x20000b78

080093e4 <__ascii_mbtowc>:
 80093e4:	b082      	sub	sp, #8
 80093e6:	b901      	cbnz	r1, 80093ea <__ascii_mbtowc+0x6>
 80093e8:	a901      	add	r1, sp, #4
 80093ea:	b142      	cbz	r2, 80093fe <__ascii_mbtowc+0x1a>
 80093ec:	b14b      	cbz	r3, 8009402 <__ascii_mbtowc+0x1e>
 80093ee:	7813      	ldrb	r3, [r2, #0]
 80093f0:	600b      	str	r3, [r1, #0]
 80093f2:	7812      	ldrb	r2, [r2, #0]
 80093f4:	1e10      	subs	r0, r2, #0
 80093f6:	bf18      	it	ne
 80093f8:	2001      	movne	r0, #1
 80093fa:	b002      	add	sp, #8
 80093fc:	4770      	bx	lr
 80093fe:	4610      	mov	r0, r2
 8009400:	e7fb      	b.n	80093fa <__ascii_mbtowc+0x16>
 8009402:	f06f 0001 	mvn.w	r0, #1
 8009406:	e7f8      	b.n	80093fa <__ascii_mbtowc+0x16>

08009408 <__malloc_lock>:
 8009408:	4801      	ldr	r0, [pc, #4]	; (8009410 <__malloc_lock+0x8>)
 800940a:	f7ff b8c0 	b.w	800858e <__retarget_lock_acquire_recursive>
 800940e:	bf00      	nop
 8009410:	20000b6c 	.word	0x20000b6c

08009414 <__malloc_unlock>:
 8009414:	4801      	ldr	r0, [pc, #4]	; (800941c <__malloc_unlock+0x8>)
 8009416:	f7ff b8bb 	b.w	8008590 <__retarget_lock_release_recursive>
 800941a:	bf00      	nop
 800941c:	20000b6c 	.word	0x20000b6c

08009420 <_read_r>:
 8009420:	b538      	push	{r3, r4, r5, lr}
 8009422:	4d07      	ldr	r5, [pc, #28]	; (8009440 <_read_r+0x20>)
 8009424:	4604      	mov	r4, r0
 8009426:	4608      	mov	r0, r1
 8009428:	4611      	mov	r1, r2
 800942a:	2200      	movs	r2, #0
 800942c:	602a      	str	r2, [r5, #0]
 800942e:	461a      	mov	r2, r3
 8009430:	f7f8 ff68 	bl	8002304 <_read>
 8009434:	1c43      	adds	r3, r0, #1
 8009436:	d102      	bne.n	800943e <_read_r+0x1e>
 8009438:	682b      	ldr	r3, [r5, #0]
 800943a:	b103      	cbz	r3, 800943e <_read_r+0x1e>
 800943c:	6023      	str	r3, [r4, #0]
 800943e:	bd38      	pop	{r3, r4, r5, pc}
 8009440:	20000b78 	.word	0x20000b78

08009444 <__ascii_wctomb>:
 8009444:	b149      	cbz	r1, 800945a <__ascii_wctomb+0x16>
 8009446:	2aff      	cmp	r2, #255	; 0xff
 8009448:	bf85      	ittet	hi
 800944a:	238a      	movhi	r3, #138	; 0x8a
 800944c:	6003      	strhi	r3, [r0, #0]
 800944e:	700a      	strbls	r2, [r1, #0]
 8009450:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8009454:	bf98      	it	ls
 8009456:	2001      	movls	r0, #1
 8009458:	4770      	bx	lr
 800945a:	4608      	mov	r0, r1
 800945c:	4770      	bx	lr

0800945e <abort>:
 800945e:	b508      	push	{r3, lr}
 8009460:	2006      	movs	r0, #6
 8009462:	f000 f82b 	bl	80094bc <raise>
 8009466:	2001      	movs	r0, #1
 8009468:	f7f8 ff42 	bl	80022f0 <_exit>

0800946c <_raise_r>:
 800946c:	291f      	cmp	r1, #31
 800946e:	b538      	push	{r3, r4, r5, lr}
 8009470:	4604      	mov	r4, r0
 8009472:	460d      	mov	r5, r1
 8009474:	d904      	bls.n	8009480 <_raise_r+0x14>
 8009476:	2316      	movs	r3, #22
 8009478:	6003      	str	r3, [r0, #0]
 800947a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800947e:	bd38      	pop	{r3, r4, r5, pc}
 8009480:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009482:	b112      	cbz	r2, 800948a <_raise_r+0x1e>
 8009484:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009488:	b94b      	cbnz	r3, 800949e <_raise_r+0x32>
 800948a:	4620      	mov	r0, r4
 800948c:	f000 f830 	bl	80094f0 <_getpid_r>
 8009490:	462a      	mov	r2, r5
 8009492:	4601      	mov	r1, r0
 8009494:	4620      	mov	r0, r4
 8009496:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800949a:	f000 b817 	b.w	80094cc <_kill_r>
 800949e:	2b01      	cmp	r3, #1
 80094a0:	d00a      	beq.n	80094b8 <_raise_r+0x4c>
 80094a2:	1c59      	adds	r1, r3, #1
 80094a4:	d103      	bne.n	80094ae <_raise_r+0x42>
 80094a6:	2316      	movs	r3, #22
 80094a8:	6003      	str	r3, [r0, #0]
 80094aa:	2001      	movs	r0, #1
 80094ac:	e7e7      	b.n	800947e <_raise_r+0x12>
 80094ae:	2400      	movs	r4, #0
 80094b0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80094b4:	4628      	mov	r0, r5
 80094b6:	4798      	blx	r3
 80094b8:	2000      	movs	r0, #0
 80094ba:	e7e0      	b.n	800947e <_raise_r+0x12>

080094bc <raise>:
 80094bc:	4b02      	ldr	r3, [pc, #8]	; (80094c8 <raise+0xc>)
 80094be:	4601      	mov	r1, r0
 80094c0:	6818      	ldr	r0, [r3, #0]
 80094c2:	f7ff bfd3 	b.w	800946c <_raise_r>
 80094c6:	bf00      	nop
 80094c8:	2000000c 	.word	0x2000000c

080094cc <_kill_r>:
 80094cc:	b538      	push	{r3, r4, r5, lr}
 80094ce:	4d07      	ldr	r5, [pc, #28]	; (80094ec <_kill_r+0x20>)
 80094d0:	2300      	movs	r3, #0
 80094d2:	4604      	mov	r4, r0
 80094d4:	4608      	mov	r0, r1
 80094d6:	4611      	mov	r1, r2
 80094d8:	602b      	str	r3, [r5, #0]
 80094da:	f7f8 fef9 	bl	80022d0 <_kill>
 80094de:	1c43      	adds	r3, r0, #1
 80094e0:	d102      	bne.n	80094e8 <_kill_r+0x1c>
 80094e2:	682b      	ldr	r3, [r5, #0]
 80094e4:	b103      	cbz	r3, 80094e8 <_kill_r+0x1c>
 80094e6:	6023      	str	r3, [r4, #0]
 80094e8:	bd38      	pop	{r3, r4, r5, pc}
 80094ea:	bf00      	nop
 80094ec:	20000b78 	.word	0x20000b78

080094f0 <_getpid_r>:
 80094f0:	f7f8 bee6 	b.w	80022c0 <_getpid>

080094f4 <sqrt>:
 80094f4:	b538      	push	{r3, r4, r5, lr}
 80094f6:	ed2d 8b02 	vpush	{d8}
 80094fa:	ec55 4b10 	vmov	r4, r5, d0
 80094fe:	f000 f825 	bl	800954c <__ieee754_sqrt>
 8009502:	4622      	mov	r2, r4
 8009504:	462b      	mov	r3, r5
 8009506:	4620      	mov	r0, r4
 8009508:	4629      	mov	r1, r5
 800950a:	eeb0 8a40 	vmov.f32	s16, s0
 800950e:	eef0 8a60 	vmov.f32	s17, s1
 8009512:	f7f7 fb0b 	bl	8000b2c <__aeabi_dcmpun>
 8009516:	b990      	cbnz	r0, 800953e <sqrt+0x4a>
 8009518:	2200      	movs	r2, #0
 800951a:	2300      	movs	r3, #0
 800951c:	4620      	mov	r0, r4
 800951e:	4629      	mov	r1, r5
 8009520:	f7f7 fadc 	bl	8000adc <__aeabi_dcmplt>
 8009524:	b158      	cbz	r0, 800953e <sqrt+0x4a>
 8009526:	f7fd fa0f 	bl	8006948 <__errno>
 800952a:	2321      	movs	r3, #33	; 0x21
 800952c:	6003      	str	r3, [r0, #0]
 800952e:	2200      	movs	r2, #0
 8009530:	2300      	movs	r3, #0
 8009532:	4610      	mov	r0, r2
 8009534:	4619      	mov	r1, r3
 8009536:	f7f7 f989 	bl	800084c <__aeabi_ddiv>
 800953a:	ec41 0b18 	vmov	d8, r0, r1
 800953e:	eeb0 0a48 	vmov.f32	s0, s16
 8009542:	eef0 0a68 	vmov.f32	s1, s17
 8009546:	ecbd 8b02 	vpop	{d8}
 800954a:	bd38      	pop	{r3, r4, r5, pc}

0800954c <__ieee754_sqrt>:
 800954c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009550:	ec55 4b10 	vmov	r4, r5, d0
 8009554:	4e55      	ldr	r6, [pc, #340]	; (80096ac <__ieee754_sqrt+0x160>)
 8009556:	43ae      	bics	r6, r5
 8009558:	ee10 0a10 	vmov	r0, s0
 800955c:	ee10 3a10 	vmov	r3, s0
 8009560:	462a      	mov	r2, r5
 8009562:	4629      	mov	r1, r5
 8009564:	d110      	bne.n	8009588 <__ieee754_sqrt+0x3c>
 8009566:	ee10 2a10 	vmov	r2, s0
 800956a:	462b      	mov	r3, r5
 800956c:	f7f7 f844 	bl	80005f8 <__aeabi_dmul>
 8009570:	4602      	mov	r2, r0
 8009572:	460b      	mov	r3, r1
 8009574:	4620      	mov	r0, r4
 8009576:	4629      	mov	r1, r5
 8009578:	f7f6 fe88 	bl	800028c <__adddf3>
 800957c:	4604      	mov	r4, r0
 800957e:	460d      	mov	r5, r1
 8009580:	ec45 4b10 	vmov	d0, r4, r5
 8009584:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009588:	2d00      	cmp	r5, #0
 800958a:	dc10      	bgt.n	80095ae <__ieee754_sqrt+0x62>
 800958c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009590:	4330      	orrs	r0, r6
 8009592:	d0f5      	beq.n	8009580 <__ieee754_sqrt+0x34>
 8009594:	b15d      	cbz	r5, 80095ae <__ieee754_sqrt+0x62>
 8009596:	ee10 2a10 	vmov	r2, s0
 800959a:	462b      	mov	r3, r5
 800959c:	ee10 0a10 	vmov	r0, s0
 80095a0:	f7f6 fe72 	bl	8000288 <__aeabi_dsub>
 80095a4:	4602      	mov	r2, r0
 80095a6:	460b      	mov	r3, r1
 80095a8:	f7f7 f950 	bl	800084c <__aeabi_ddiv>
 80095ac:	e7e6      	b.n	800957c <__ieee754_sqrt+0x30>
 80095ae:	1512      	asrs	r2, r2, #20
 80095b0:	d074      	beq.n	800969c <__ieee754_sqrt+0x150>
 80095b2:	07d4      	lsls	r4, r2, #31
 80095b4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80095b8:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 80095bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80095c0:	bf5e      	ittt	pl
 80095c2:	0fda      	lsrpl	r2, r3, #31
 80095c4:	005b      	lslpl	r3, r3, #1
 80095c6:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 80095ca:	2400      	movs	r4, #0
 80095cc:	0fda      	lsrs	r2, r3, #31
 80095ce:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 80095d2:	107f      	asrs	r7, r7, #1
 80095d4:	005b      	lsls	r3, r3, #1
 80095d6:	2516      	movs	r5, #22
 80095d8:	4620      	mov	r0, r4
 80095da:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80095de:	1886      	adds	r6, r0, r2
 80095e0:	428e      	cmp	r6, r1
 80095e2:	bfde      	ittt	le
 80095e4:	1b89      	suble	r1, r1, r6
 80095e6:	18b0      	addle	r0, r6, r2
 80095e8:	18a4      	addle	r4, r4, r2
 80095ea:	0049      	lsls	r1, r1, #1
 80095ec:	3d01      	subs	r5, #1
 80095ee:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 80095f2:	ea4f 0252 	mov.w	r2, r2, lsr #1
 80095f6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80095fa:	d1f0      	bne.n	80095de <__ieee754_sqrt+0x92>
 80095fc:	462a      	mov	r2, r5
 80095fe:	f04f 0e20 	mov.w	lr, #32
 8009602:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8009606:	4281      	cmp	r1, r0
 8009608:	eb06 0c05 	add.w	ip, r6, r5
 800960c:	dc02      	bgt.n	8009614 <__ieee754_sqrt+0xc8>
 800960e:	d113      	bne.n	8009638 <__ieee754_sqrt+0xec>
 8009610:	459c      	cmp	ip, r3
 8009612:	d811      	bhi.n	8009638 <__ieee754_sqrt+0xec>
 8009614:	f1bc 0f00 	cmp.w	ip, #0
 8009618:	eb0c 0506 	add.w	r5, ip, r6
 800961c:	da43      	bge.n	80096a6 <__ieee754_sqrt+0x15a>
 800961e:	2d00      	cmp	r5, #0
 8009620:	db41      	blt.n	80096a6 <__ieee754_sqrt+0x15a>
 8009622:	f100 0801 	add.w	r8, r0, #1
 8009626:	1a09      	subs	r1, r1, r0
 8009628:	459c      	cmp	ip, r3
 800962a:	bf88      	it	hi
 800962c:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
 8009630:	eba3 030c 	sub.w	r3, r3, ip
 8009634:	4432      	add	r2, r6
 8009636:	4640      	mov	r0, r8
 8009638:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800963c:	f1be 0e01 	subs.w	lr, lr, #1
 8009640:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8009644:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009648:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800964c:	d1db      	bne.n	8009606 <__ieee754_sqrt+0xba>
 800964e:	430b      	orrs	r3, r1
 8009650:	d006      	beq.n	8009660 <__ieee754_sqrt+0x114>
 8009652:	1c50      	adds	r0, r2, #1
 8009654:	bf13      	iteet	ne
 8009656:	3201      	addne	r2, #1
 8009658:	3401      	addeq	r4, #1
 800965a:	4672      	moveq	r2, lr
 800965c:	f022 0201 	bicne.w	r2, r2, #1
 8009660:	1063      	asrs	r3, r4, #1
 8009662:	0852      	lsrs	r2, r2, #1
 8009664:	07e1      	lsls	r1, r4, #31
 8009666:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800966a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800966e:	bf48      	it	mi
 8009670:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8009674:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8009678:	4614      	mov	r4, r2
 800967a:	e781      	b.n	8009580 <__ieee754_sqrt+0x34>
 800967c:	0ad9      	lsrs	r1, r3, #11
 800967e:	3815      	subs	r0, #21
 8009680:	055b      	lsls	r3, r3, #21
 8009682:	2900      	cmp	r1, #0
 8009684:	d0fa      	beq.n	800967c <__ieee754_sqrt+0x130>
 8009686:	02cd      	lsls	r5, r1, #11
 8009688:	d50a      	bpl.n	80096a0 <__ieee754_sqrt+0x154>
 800968a:	f1c2 0420 	rsb	r4, r2, #32
 800968e:	fa23 f404 	lsr.w	r4, r3, r4
 8009692:	1e55      	subs	r5, r2, #1
 8009694:	4093      	lsls	r3, r2
 8009696:	4321      	orrs	r1, r4
 8009698:	1b42      	subs	r2, r0, r5
 800969a:	e78a      	b.n	80095b2 <__ieee754_sqrt+0x66>
 800969c:	4610      	mov	r0, r2
 800969e:	e7f0      	b.n	8009682 <__ieee754_sqrt+0x136>
 80096a0:	0049      	lsls	r1, r1, #1
 80096a2:	3201      	adds	r2, #1
 80096a4:	e7ef      	b.n	8009686 <__ieee754_sqrt+0x13a>
 80096a6:	4680      	mov	r8, r0
 80096a8:	e7bd      	b.n	8009626 <__ieee754_sqrt+0xda>
 80096aa:	bf00      	nop
 80096ac:	7ff00000 	.word	0x7ff00000

080096b0 <_init>:
 80096b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096b2:	bf00      	nop
 80096b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096b6:	bc08      	pop	{r3}
 80096b8:	469e      	mov	lr, r3
 80096ba:	4770      	bx	lr

080096bc <_fini>:
 80096bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096be:	bf00      	nop
 80096c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096c2:	bc08      	pop	{r3}
 80096c4:	469e      	mov	lr, r3
 80096c6:	4770      	bx	lr
