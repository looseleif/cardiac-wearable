
AWEAR_proj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000049b8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000110  08004b48  08004b48  00014b48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c58  08004c58  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004c58  08004c58  00014c58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004c60  08004c60  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c60  08004c60  00014c60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004c64  08004c64  00014c64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004c68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001ac  20000070  08004cd8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000021c  08004cd8  0002021c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011969  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002395  00000000  00000000  00031a09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fe0  00000000  00000000  00033da0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ef8  00000000  00000000  00034d80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000233b2  00000000  00000000  00035c78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012657  00000000  00000000  0005902a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d36ed  00000000  00000000  0006b681  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013ed6e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a4c  00000000  00000000  0013edc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004b30 	.word	0x08004b30

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08004b30 	.word	0x08004b30

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000578:	f000 fc19 	bl	8000dae <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800057c:	f000 f822 	bl	80005c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000580:	f000 f940 	bl	8000804 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000584:	f000 f866 	bl	8000654 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000588:	f000 f90c 	bl	80007a4 <MX_USART1_UART_Init>
  MX_LPTIM1_Init();
 800058c:	f000 f8a0 	bl	80006d0 <MX_LPTIM1_Init>
  MX_SPI2_Init();
 8000590:	f000 f8ca 	bl	8000728 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  /* Set up timer */
  if(HAL_LPTIM_TimeOut_Start_IT(&hlptim1, PERIOD, TIMEOUT) != HAL_OK){  //pointer to the handler, period, timeout val to start the timer
 8000594:	2200      	movs	r2, #0
 8000596:	f44f 6183 	mov.w	r1, #1048	; 0x418
 800059a:	4808      	ldr	r0, [pc, #32]	; (80005bc <main+0x48>)
 800059c:	f001 f90c 	bl	80017b8 <HAL_LPTIM_TimeOut_Start_IT>
 80005a0:	4603      	mov	r3, r0
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d001      	beq.n	80005aa <main+0x36>
	  Error_Handler();
 80005a6:	f000 f991 	bl	80008cc <Error_Handler>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
      printf("Hello World\n\r");
 80005aa:	4805      	ldr	r0, [pc, #20]	; (80005c0 <main+0x4c>)
 80005ac:	f003 fb32 	bl	8003c14 <iprintf>
      HAL_Delay(1000);
 80005b0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005b4:	f000 fc70 	bl	8000e98 <HAL_Delay>
  {
 80005b8:	e7f7      	b.n	80005aa <main+0x36>
 80005ba:	bf00      	nop
 80005bc:	200000e0 	.word	0x200000e0
 80005c0:	08004b48 	.word	0x08004b48

080005c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b096      	sub	sp, #88	; 0x58
 80005c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ca:	f107 0314 	add.w	r3, r7, #20
 80005ce:	2244      	movs	r2, #68	; 0x44
 80005d0:	2100      	movs	r1, #0
 80005d2:	4618      	mov	r0, r3
 80005d4:	f003 fb16 	bl	8003c04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d8:	463b      	mov	r3, r7
 80005da:	2200      	movs	r2, #0
 80005dc:	601a      	str	r2, [r3, #0]
 80005de:	605a      	str	r2, [r3, #4]
 80005e0:	609a      	str	r2, [r3, #8]
 80005e2:	60da      	str	r2, [r3, #12]
 80005e4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005e6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005ea:	f001 fb87 	bl	8001cfc <HAL_PWREx_ControlVoltageScaling>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d001      	beq.n	80005f8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005f4:	f000 f96a 	bl	80008cc <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_MSI;
 80005f8:	2318      	movs	r3, #24
 80005fa:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80005fc:	2301      	movs	r3, #1
 80005fe:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000600:	2301      	movs	r3, #1
 8000602:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000604:	2300      	movs	r3, #0
 8000606:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000608:	2360      	movs	r3, #96	; 0x60
 800060a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800060c:	2300      	movs	r3, #0
 800060e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000610:	f107 0314 	add.w	r3, r7, #20
 8000614:	4618      	mov	r0, r3
 8000616:	f001 fbc7 	bl	8001da8 <HAL_RCC_OscConfig>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <SystemClock_Config+0x60>
  {
    Error_Handler();
 8000620:	f000 f954 	bl	80008cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000624:	230f      	movs	r3, #15
 8000626:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000628:	2300      	movs	r3, #0
 800062a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800062c:	2300      	movs	r3, #0
 800062e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000630:	2300      	movs	r3, #0
 8000632:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000634:	2300      	movs	r3, #0
 8000636:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000638:	463b      	mov	r3, r7
 800063a:	2100      	movs	r1, #0
 800063c:	4618      	mov	r0, r3
 800063e:	f001 ffc7 	bl	80025d0 <HAL_RCC_ClockConfig>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000648:	f000 f940 	bl	80008cc <Error_Handler>
  }
}
 800064c:	bf00      	nop
 800064e:	3758      	adds	r7, #88	; 0x58
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}

08000654 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000658:	4b1b      	ldr	r3, [pc, #108]	; (80006c8 <MX_I2C1_Init+0x74>)
 800065a:	4a1c      	ldr	r2, [pc, #112]	; (80006cc <MX_I2C1_Init+0x78>)
 800065c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000E14;
 800065e:	4b1a      	ldr	r3, [pc, #104]	; (80006c8 <MX_I2C1_Init+0x74>)
 8000660:	f640 6214 	movw	r2, #3604	; 0xe14
 8000664:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000666:	4b18      	ldr	r3, [pc, #96]	; (80006c8 <MX_I2C1_Init+0x74>)
 8000668:	2200      	movs	r2, #0
 800066a:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800066c:	4b16      	ldr	r3, [pc, #88]	; (80006c8 <MX_I2C1_Init+0x74>)
 800066e:	2201      	movs	r2, #1
 8000670:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000672:	4b15      	ldr	r3, [pc, #84]	; (80006c8 <MX_I2C1_Init+0x74>)
 8000674:	2200      	movs	r2, #0
 8000676:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000678:	4b13      	ldr	r3, [pc, #76]	; (80006c8 <MX_I2C1_Init+0x74>)
 800067a:	2200      	movs	r2, #0
 800067c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800067e:	4b12      	ldr	r3, [pc, #72]	; (80006c8 <MX_I2C1_Init+0x74>)
 8000680:	2200      	movs	r2, #0
 8000682:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000684:	4b10      	ldr	r3, [pc, #64]	; (80006c8 <MX_I2C1_Init+0x74>)
 8000686:	2200      	movs	r2, #0
 8000688:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800068a:	4b0f      	ldr	r3, [pc, #60]	; (80006c8 <MX_I2C1_Init+0x74>)
 800068c:	2200      	movs	r2, #0
 800068e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000690:	480d      	ldr	r0, [pc, #52]	; (80006c8 <MX_I2C1_Init+0x74>)
 8000692:	f000 fec9 	bl	8001428 <HAL_I2C_Init>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800069c:	f000 f916 	bl	80008cc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006a0:	2100      	movs	r1, #0
 80006a2:	4809      	ldr	r0, [pc, #36]	; (80006c8 <MX_I2C1_Init+0x74>)
 80006a4:	f000 ff4f 	bl	8001546 <HAL_I2CEx_ConfigAnalogFilter>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80006ae:	f000 f90d 	bl	80008cc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80006b2:	2100      	movs	r1, #0
 80006b4:	4804      	ldr	r0, [pc, #16]	; (80006c8 <MX_I2C1_Init+0x74>)
 80006b6:	f000 ff91 	bl	80015dc <HAL_I2CEx_ConfigDigitalFilter>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80006c0:	f000 f904 	bl	80008cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006c4:	bf00      	nop
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	2000008c 	.word	0x2000008c
 80006cc:	40005400 	.word	0x40005400

080006d0 <MX_LPTIM1_Init>:
  * @brief LPTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM1_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 80006d4:	4b12      	ldr	r3, [pc, #72]	; (8000720 <MX_LPTIM1_Init+0x50>)
 80006d6:	4a13      	ldr	r2, [pc, #76]	; (8000724 <MX_LPTIM1_Init+0x54>)
 80006d8:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 80006da:	4b11      	ldr	r3, [pc, #68]	; (8000720 <MX_LPTIM1_Init+0x50>)
 80006dc:	2200      	movs	r2, #0
 80006de:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 80006e0:	4b0f      	ldr	r3, [pc, #60]	; (8000720 <MX_LPTIM1_Init+0x50>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 80006e6:	4b0e      	ldr	r3, [pc, #56]	; (8000720 <MX_LPTIM1_Init+0x50>)
 80006e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80006ec:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 80006ee:	4b0c      	ldr	r3, [pc, #48]	; (8000720 <MX_LPTIM1_Init+0x50>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 80006f4:	4b0a      	ldr	r3, [pc, #40]	; (8000720 <MX_LPTIM1_Init+0x50>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 80006fa:	4b09      	ldr	r3, [pc, #36]	; (8000720 <MX_LPTIM1_Init+0x50>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	629a      	str	r2, [r3, #40]	; 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8000700:	4b07      	ldr	r3, [pc, #28]	; (8000720 <MX_LPTIM1_Init+0x50>)
 8000702:	2200      	movs	r2, #0
 8000704:	62da      	str	r2, [r3, #44]	; 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 8000706:	4b06      	ldr	r3, [pc, #24]	; (8000720 <MX_LPTIM1_Init+0x50>)
 8000708:	2200      	movs	r2, #0
 800070a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 800070c:	4804      	ldr	r0, [pc, #16]	; (8000720 <MX_LPTIM1_Init+0x50>)
 800070e:	f000 ffb1 	bl	8001674 <HAL_LPTIM_Init>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <MX_LPTIM1_Init+0x4c>
  {
    Error_Handler();
 8000718:	f000 f8d8 	bl	80008cc <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 800071c:	bf00      	nop
 800071e:	bd80      	pop	{r7, pc}
 8000720:	200000e0 	.word	0x200000e0
 8000724:	40007c00 	.word	0x40007c00

08000728 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800072c:	4b1b      	ldr	r3, [pc, #108]	; (800079c <MX_SPI2_Init+0x74>)
 800072e:	4a1c      	ldr	r2, [pc, #112]	; (80007a0 <MX_SPI2_Init+0x78>)
 8000730:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000732:	4b1a      	ldr	r3, [pc, #104]	; (800079c <MX_SPI2_Init+0x74>)
 8000734:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000738:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800073a:	4b18      	ldr	r3, [pc, #96]	; (800079c <MX_SPI2_Init+0x74>)
 800073c:	2200      	movs	r2, #0
 800073e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8000740:	4b16      	ldr	r3, [pc, #88]	; (800079c <MX_SPI2_Init+0x74>)
 8000742:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000746:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000748:	4b14      	ldr	r3, [pc, #80]	; (800079c <MX_SPI2_Init+0x74>)
 800074a:	2200      	movs	r2, #0
 800074c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800074e:	4b13      	ldr	r3, [pc, #76]	; (800079c <MX_SPI2_Init+0x74>)
 8000750:	2200      	movs	r2, #0
 8000752:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000754:	4b11      	ldr	r3, [pc, #68]	; (800079c <MX_SPI2_Init+0x74>)
 8000756:	f44f 7200 	mov.w	r2, #512	; 0x200
 800075a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800075c:	4b0f      	ldr	r3, [pc, #60]	; (800079c <MX_SPI2_Init+0x74>)
 800075e:	2200      	movs	r2, #0
 8000760:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000762:	4b0e      	ldr	r3, [pc, #56]	; (800079c <MX_SPI2_Init+0x74>)
 8000764:	2200      	movs	r2, #0
 8000766:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000768:	4b0c      	ldr	r3, [pc, #48]	; (800079c <MX_SPI2_Init+0x74>)
 800076a:	2200      	movs	r2, #0
 800076c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800076e:	4b0b      	ldr	r3, [pc, #44]	; (800079c <MX_SPI2_Init+0x74>)
 8000770:	2200      	movs	r2, #0
 8000772:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000774:	4b09      	ldr	r3, [pc, #36]	; (800079c <MX_SPI2_Init+0x74>)
 8000776:	2207      	movs	r2, #7
 8000778:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800077a:	4b08      	ldr	r3, [pc, #32]	; (800079c <MX_SPI2_Init+0x74>)
 800077c:	2200      	movs	r2, #0
 800077e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000780:	4b06      	ldr	r3, [pc, #24]	; (800079c <MX_SPI2_Init+0x74>)
 8000782:	2208      	movs	r2, #8
 8000784:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000786:	4805      	ldr	r0, [pc, #20]	; (800079c <MX_SPI2_Init+0x74>)
 8000788:	f002 fc82 	bl	8003090 <HAL_SPI_Init>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000792:	f000 f89b 	bl	80008cc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000796:	bf00      	nop
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	20000118 	.word	0x20000118
 80007a0:	40003800 	.word	0x40003800

080007a4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007a8:	4b14      	ldr	r3, [pc, #80]	; (80007fc <MX_USART1_UART_Init+0x58>)
 80007aa:	4a15      	ldr	r2, [pc, #84]	; (8000800 <MX_USART1_UART_Init+0x5c>)
 80007ac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80007ae:	4b13      	ldr	r3, [pc, #76]	; (80007fc <MX_USART1_UART_Init+0x58>)
 80007b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007b4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007b6:	4b11      	ldr	r3, [pc, #68]	; (80007fc <MX_USART1_UART_Init+0x58>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007bc:	4b0f      	ldr	r3, [pc, #60]	; (80007fc <MX_USART1_UART_Init+0x58>)
 80007be:	2200      	movs	r2, #0
 80007c0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_ODD;
 80007c2:	4b0e      	ldr	r3, [pc, #56]	; (80007fc <MX_USART1_UART_Init+0x58>)
 80007c4:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80007c8:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007ca:	4b0c      	ldr	r3, [pc, #48]	; (80007fc <MX_USART1_UART_Init+0x58>)
 80007cc:	220c      	movs	r2, #12
 80007ce:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007d0:	4b0a      	ldr	r3, [pc, #40]	; (80007fc <MX_USART1_UART_Init+0x58>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007d6:	4b09      	ldr	r3, [pc, #36]	; (80007fc <MX_USART1_UART_Init+0x58>)
 80007d8:	2200      	movs	r2, #0
 80007da:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007dc:	4b07      	ldr	r3, [pc, #28]	; (80007fc <MX_USART1_UART_Init+0x58>)
 80007de:	2200      	movs	r2, #0
 80007e0:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007e2:	4b06      	ldr	r3, [pc, #24]	; (80007fc <MX_USART1_UART_Init+0x58>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007e8:	4804      	ldr	r0, [pc, #16]	; (80007fc <MX_USART1_UART_Init+0x58>)
 80007ea:	f002 fcf4 	bl	80031d6 <HAL_UART_Init>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <MX_USART1_UART_Init+0x54>
  {
    Error_Handler();
 80007f4:	f000 f86a 	bl	80008cc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80007f8:	bf00      	nop
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	2000017c 	.word	0x2000017c
 8000800:	40013800 	.word	0x40013800

08000804 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b088      	sub	sp, #32
 8000808:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800080a:	f107 030c 	add.w	r3, r7, #12
 800080e:	2200      	movs	r2, #0
 8000810:	601a      	str	r2, [r3, #0]
 8000812:	605a      	str	r2, [r3, #4]
 8000814:	609a      	str	r2, [r3, #8]
 8000816:	60da      	str	r2, [r3, #12]
 8000818:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800081a:	4b18      	ldr	r3, [pc, #96]	; (800087c <MX_GPIO_Init+0x78>)
 800081c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800081e:	4a17      	ldr	r2, [pc, #92]	; (800087c <MX_GPIO_Init+0x78>)
 8000820:	f043 0302 	orr.w	r3, r3, #2
 8000824:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000826:	4b15      	ldr	r3, [pc, #84]	; (800087c <MX_GPIO_Init+0x78>)
 8000828:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800082a:	f003 0302 	and.w	r3, r3, #2
 800082e:	60bb      	str	r3, [r7, #8]
 8000830:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000832:	4b12      	ldr	r3, [pc, #72]	; (800087c <MX_GPIO_Init+0x78>)
 8000834:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000836:	4a11      	ldr	r2, [pc, #68]	; (800087c <MX_GPIO_Init+0x78>)
 8000838:	f043 0301 	orr.w	r3, r3, #1
 800083c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800083e:	4b0f      	ldr	r3, [pc, #60]	; (800087c <MX_GPIO_Init+0x78>)
 8000840:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000842:	f003 0301 	and.w	r3, r3, #1
 8000846:	607b      	str	r3, [r7, #4]
 8000848:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 800084a:	2200      	movs	r2, #0
 800084c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000850:	480b      	ldr	r0, [pc, #44]	; (8000880 <MX_GPIO_Init+0x7c>)
 8000852:	f000 fdd1 	bl	80013f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000856:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800085a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800085c:	2301      	movs	r3, #1
 800085e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000860:	2300      	movs	r3, #0
 8000862:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000864:	2300      	movs	r3, #0
 8000866:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000868:	f107 030c 	add.w	r3, r7, #12
 800086c:	4619      	mov	r1, r3
 800086e:	4804      	ldr	r0, [pc, #16]	; (8000880 <MX_GPIO_Init+0x7c>)
 8000870:	f000 fc48 	bl	8001104 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000874:	bf00      	nop
 8000876:	3720      	adds	r7, #32
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	40021000 	.word	0x40021000
 8000880:	48000400 	.word	0x48000400

08000884 <HAL_LPTIM_CompareMatchCallback>:
/* USER CODE BEGIN 4 */

/*
 * Redefinition of the low power timer interrupt
 */
void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim){
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
	sensorReady = READY;
 800088c:	4b04      	ldr	r3, [pc, #16]	; (80008a0 <HAL_LPTIM_CompareMatchCallback+0x1c>)
 800088e:	2201      	movs	r2, #1
 8000890:	701a      	strb	r2, [r3, #0]

	printf("inside interrupt: sensorReady");
 8000892:	4804      	ldr	r0, [pc, #16]	; (80008a4 <HAL_LPTIM_CompareMatchCallback+0x20>)
 8000894:	f003 f9be 	bl	8003c14 <iprintf>
}
 8000898:	bf00      	nop
 800089a:	3708      	adds	r7, #8
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	20000200 	.word	0x20000200
 80008a4:	08004b58 	.word	0x08004b58

080008a8 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 80008b0:	1d39      	adds	r1, r7, #4
 80008b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80008b6:	2201      	movs	r2, #1
 80008b8:	4803      	ldr	r0, [pc, #12]	; (80008c8 <__io_putchar+0x20>)
 80008ba:	f002 fcda 	bl	8003272 <HAL_UART_Transmit>

  return ch;
 80008be:	687b      	ldr	r3, [r7, #4]
}
 80008c0:	4618      	mov	r0, r3
 80008c2:	3708      	adds	r7, #8
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	2000017c 	.word	0x2000017c

080008cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008d0:	b672      	cpsid	i
}
 80008d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008d4:	e7fe      	b.n	80008d4 <Error_Handler+0x8>
	...

080008d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	b083      	sub	sp, #12
 80008dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008de:	4b0f      	ldr	r3, [pc, #60]	; (800091c <HAL_MspInit+0x44>)
 80008e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008e2:	4a0e      	ldr	r2, [pc, #56]	; (800091c <HAL_MspInit+0x44>)
 80008e4:	f043 0301 	orr.w	r3, r3, #1
 80008e8:	6613      	str	r3, [r2, #96]	; 0x60
 80008ea:	4b0c      	ldr	r3, [pc, #48]	; (800091c <HAL_MspInit+0x44>)
 80008ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008ee:	f003 0301 	and.w	r3, r3, #1
 80008f2:	607b      	str	r3, [r7, #4]
 80008f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008f6:	4b09      	ldr	r3, [pc, #36]	; (800091c <HAL_MspInit+0x44>)
 80008f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008fa:	4a08      	ldr	r2, [pc, #32]	; (800091c <HAL_MspInit+0x44>)
 80008fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000900:	6593      	str	r3, [r2, #88]	; 0x58
 8000902:	4b06      	ldr	r3, [pc, #24]	; (800091c <HAL_MspInit+0x44>)
 8000904:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000906:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800090a:	603b      	str	r3, [r7, #0]
 800090c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800090e:	bf00      	nop
 8000910:	370c      	adds	r7, #12
 8000912:	46bd      	mov	sp, r7
 8000914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000918:	4770      	bx	lr
 800091a:	bf00      	nop
 800091c:	40021000 	.word	0x40021000

08000920 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b0a2      	sub	sp, #136	; 0x88
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000928:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800092c:	2200      	movs	r2, #0
 800092e:	601a      	str	r2, [r3, #0]
 8000930:	605a      	str	r2, [r3, #4]
 8000932:	609a      	str	r2, [r3, #8]
 8000934:	60da      	str	r2, [r3, #12]
 8000936:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000938:	f107 0314 	add.w	r3, r7, #20
 800093c:	2260      	movs	r2, #96	; 0x60
 800093e:	2100      	movs	r1, #0
 8000940:	4618      	mov	r0, r3
 8000942:	f003 f95f 	bl	8003c04 <memset>
  if(hi2c->Instance==I2C1)
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	4a20      	ldr	r2, [pc, #128]	; (80009cc <HAL_I2C_MspInit+0xac>)
 800094c:	4293      	cmp	r3, r2
 800094e:	d139      	bne.n	80009c4 <HAL_I2C_MspInit+0xa4>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000950:	2340      	movs	r3, #64	; 0x40
 8000952:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000954:	2300      	movs	r3, #0
 8000956:	647b      	str	r3, [r7, #68]	; 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000958:	f107 0314 	add.w	r3, r7, #20
 800095c:	4618      	mov	r0, r3
 800095e:	f002 f85b 	bl	8002a18 <HAL_RCCEx_PeriphCLKConfig>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000968:	f7ff ffb0 	bl	80008cc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800096c:	4b18      	ldr	r3, [pc, #96]	; (80009d0 <HAL_I2C_MspInit+0xb0>)
 800096e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000970:	4a17      	ldr	r2, [pc, #92]	; (80009d0 <HAL_I2C_MspInit+0xb0>)
 8000972:	f043 0301 	orr.w	r3, r3, #1
 8000976:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000978:	4b15      	ldr	r3, [pc, #84]	; (80009d0 <HAL_I2C_MspInit+0xb0>)
 800097a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800097c:	f003 0301 	and.w	r3, r3, #1
 8000980:	613b      	str	r3, [r7, #16]
 8000982:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000984:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000988:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800098a:	2312      	movs	r3, #18
 800098c:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098e:	2300      	movs	r3, #0
 8000990:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000992:	2303      	movs	r3, #3
 8000994:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000998:	2304      	movs	r3, #4
 800099a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800099e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80009a2:	4619      	mov	r1, r3
 80009a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009a8:	f000 fbac 	bl	8001104 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80009ac:	4b08      	ldr	r3, [pc, #32]	; (80009d0 <HAL_I2C_MspInit+0xb0>)
 80009ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009b0:	4a07      	ldr	r2, [pc, #28]	; (80009d0 <HAL_I2C_MspInit+0xb0>)
 80009b2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80009b6:	6593      	str	r3, [r2, #88]	; 0x58
 80009b8:	4b05      	ldr	r3, [pc, #20]	; (80009d0 <HAL_I2C_MspInit+0xb0>)
 80009ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009c0:	60fb      	str	r3, [r7, #12]
 80009c2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80009c4:	bf00      	nop
 80009c6:	3788      	adds	r7, #136	; 0x88
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	40005400 	.word	0x40005400
 80009d0:	40021000 	.word	0x40021000

080009d4 <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b09c      	sub	sp, #112	; 0x70
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009dc:	f107 0310 	add.w	r3, r7, #16
 80009e0:	2260      	movs	r2, #96	; 0x60
 80009e2:	2100      	movs	r1, #0
 80009e4:	4618      	mov	r0, r3
 80009e6:	f003 f90d 	bl	8003c04 <memset>
  if(hlptim->Instance==LPTIM1)
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	4a15      	ldr	r2, [pc, #84]	; (8000a44 <HAL_LPTIM_MspInit+0x70>)
 80009f0:	4293      	cmp	r3, r2
 80009f2:	d123      	bne.n	8000a3c <HAL_LPTIM_MspInit+0x68>

  /* USER CODE END LPTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 80009f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009f8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_LSI;
 80009fa:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80009fe:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a00:	f107 0310 	add.w	r3, r7, #16
 8000a04:	4618      	mov	r0, r3
 8000a06:	f002 f807 	bl	8002a18 <HAL_RCCEx_PeriphCLKConfig>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <HAL_LPTIM_MspInit+0x40>
    {
      Error_Handler();
 8000a10:	f7ff ff5c 	bl	80008cc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 8000a14:	4b0c      	ldr	r3, [pc, #48]	; (8000a48 <HAL_LPTIM_MspInit+0x74>)
 8000a16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a18:	4a0b      	ldr	r2, [pc, #44]	; (8000a48 <HAL_LPTIM_MspInit+0x74>)
 8000a1a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a1e:	6593      	str	r3, [r2, #88]	; 0x58
 8000a20:	4b09      	ldr	r3, [pc, #36]	; (8000a48 <HAL_LPTIM_MspInit+0x74>)
 8000a22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a24:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000a28:	60fb      	str	r3, [r7, #12]
 8000a2a:	68fb      	ldr	r3, [r7, #12]
    /* LPTIM1 interrupt Init */
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 0, 0);
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	2100      	movs	r1, #0
 8000a30:	2041      	movs	r0, #65	; 0x41
 8000a32:	f000 fb30 	bl	8001096 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 8000a36:	2041      	movs	r0, #65	; 0x41
 8000a38:	f000 fb49 	bl	80010ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }

}
 8000a3c:	bf00      	nop
 8000a3e:	3770      	adds	r7, #112	; 0x70
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	40007c00 	.word	0x40007c00
 8000a48:	40021000 	.word	0x40021000

08000a4c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b08a      	sub	sp, #40	; 0x28
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a54:	f107 0314 	add.w	r3, r7, #20
 8000a58:	2200      	movs	r2, #0
 8000a5a:	601a      	str	r2, [r3, #0]
 8000a5c:	605a      	str	r2, [r3, #4]
 8000a5e:	609a      	str	r2, [r3, #8]
 8000a60:	60da      	str	r2, [r3, #12]
 8000a62:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	4a17      	ldr	r2, [pc, #92]	; (8000ac8 <HAL_SPI_MspInit+0x7c>)
 8000a6a:	4293      	cmp	r3, r2
 8000a6c:	d128      	bne.n	8000ac0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000a6e:	4b17      	ldr	r3, [pc, #92]	; (8000acc <HAL_SPI_MspInit+0x80>)
 8000a70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a72:	4a16      	ldr	r2, [pc, #88]	; (8000acc <HAL_SPI_MspInit+0x80>)
 8000a74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a78:	6593      	str	r3, [r2, #88]	; 0x58
 8000a7a:	4b14      	ldr	r3, [pc, #80]	; (8000acc <HAL_SPI_MspInit+0x80>)
 8000a7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a82:	613b      	str	r3, [r7, #16]
 8000a84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a86:	4b11      	ldr	r3, [pc, #68]	; (8000acc <HAL_SPI_MspInit+0x80>)
 8000a88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a8a:	4a10      	ldr	r2, [pc, #64]	; (8000acc <HAL_SPI_MspInit+0x80>)
 8000a8c:	f043 0302 	orr.w	r3, r3, #2
 8000a90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a92:	4b0e      	ldr	r3, [pc, #56]	; (8000acc <HAL_SPI_MspInit+0x80>)
 8000a94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a96:	f003 0302 	and.w	r3, r3, #2
 8000a9a:	60fb      	str	r3, [r7, #12]
 8000a9c:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB10     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 8000a9e:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 8000aa2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa4:	2302      	movs	r3, #2
 8000aa6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aac:	2303      	movs	r3, #3
 8000aae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ab0:	2305      	movs	r3, #5
 8000ab2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ab4:	f107 0314 	add.w	r3, r7, #20
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4805      	ldr	r0, [pc, #20]	; (8000ad0 <HAL_SPI_MspInit+0x84>)
 8000abc:	f000 fb22 	bl	8001104 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000ac0:	bf00      	nop
 8000ac2:	3728      	adds	r7, #40	; 0x28
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	40003800 	.word	0x40003800
 8000acc:	40021000 	.word	0x40021000
 8000ad0:	48000400 	.word	0x48000400

08000ad4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b0a2      	sub	sp, #136	; 0x88
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000adc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	601a      	str	r2, [r3, #0]
 8000ae4:	605a      	str	r2, [r3, #4]
 8000ae6:	609a      	str	r2, [r3, #8]
 8000ae8:	60da      	str	r2, [r3, #12]
 8000aea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000aec:	f107 0314 	add.w	r3, r7, #20
 8000af0:	2260      	movs	r2, #96	; 0x60
 8000af2:	2100      	movs	r1, #0
 8000af4:	4618      	mov	r0, r3
 8000af6:	f003 f885 	bl	8003c04 <memset>
  if(huart->Instance==USART1)
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	4a1f      	ldr	r2, [pc, #124]	; (8000b7c <HAL_UART_MspInit+0xa8>)
 8000b00:	4293      	cmp	r3, r2
 8000b02:	d137      	bne.n	8000b74 <HAL_UART_MspInit+0xa0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000b04:	2301      	movs	r3, #1
 8000b06:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b0c:	f107 0314 	add.w	r3, r7, #20
 8000b10:	4618      	mov	r0, r3
 8000b12:	f001 ff81 	bl	8002a18 <HAL_RCCEx_PeriphCLKConfig>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d001      	beq.n	8000b20 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000b1c:	f7ff fed6 	bl	80008cc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b20:	4b17      	ldr	r3, [pc, #92]	; (8000b80 <HAL_UART_MspInit+0xac>)
 8000b22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b24:	4a16      	ldr	r2, [pc, #88]	; (8000b80 <HAL_UART_MspInit+0xac>)
 8000b26:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b2a:	6613      	str	r3, [r2, #96]	; 0x60
 8000b2c:	4b14      	ldr	r3, [pc, #80]	; (8000b80 <HAL_UART_MspInit+0xac>)
 8000b2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b34:	613b      	str	r3, [r7, #16]
 8000b36:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b38:	4b11      	ldr	r3, [pc, #68]	; (8000b80 <HAL_UART_MspInit+0xac>)
 8000b3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b3c:	4a10      	ldr	r2, [pc, #64]	; (8000b80 <HAL_UART_MspInit+0xac>)
 8000b3e:	f043 0302 	orr.w	r3, r3, #2
 8000b42:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b44:	4b0e      	ldr	r3, [pc, #56]	; (8000b80 <HAL_UART_MspInit+0xac>)
 8000b46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b48:	f003 0302 	and.w	r3, r3, #2
 8000b4c:	60fb      	str	r3, [r7, #12]
 8000b4e:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000b50:	23c0      	movs	r3, #192	; 0xc0
 8000b52:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b54:	2302      	movs	r3, #2
 8000b56:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b5c:	2303      	movs	r3, #3
 8000b5e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000b62:	2307      	movs	r3, #7
 8000b64:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b68:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	4805      	ldr	r0, [pc, #20]	; (8000b84 <HAL_UART_MspInit+0xb0>)
 8000b70:	f000 fac8 	bl	8001104 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000b74:	bf00      	nop
 8000b76:	3788      	adds	r7, #136	; 0x88
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	40013800 	.word	0x40013800
 8000b80:	40021000 	.word	0x40021000
 8000b84:	48000400 	.word	0x48000400

08000b88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b8c:	e7fe      	b.n	8000b8c <NMI_Handler+0x4>

08000b8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b8e:	b480      	push	{r7}
 8000b90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b92:	e7fe      	b.n	8000b92 <HardFault_Handler+0x4>

08000b94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b98:	e7fe      	b.n	8000b98 <MemManage_Handler+0x4>

08000b9a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b9a:	b480      	push	{r7}
 8000b9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b9e:	e7fe      	b.n	8000b9e <BusFault_Handler+0x4>

08000ba0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ba4:	e7fe      	b.n	8000ba4 <UsageFault_Handler+0x4>

08000ba6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ba6:	b480      	push	{r7}
 8000ba8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000baa:	bf00      	nop
 8000bac:	46bd      	mov	sp, r7
 8000bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb2:	4770      	bx	lr

08000bb4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bb8:	bf00      	nop
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr

08000bc2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bc2:	b480      	push	{r7}
 8000bc4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bc6:	bf00      	nop
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bce:	4770      	bx	lr

08000bd0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bd4:	f000 f940 	bl	8000e58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bd8:	bf00      	nop
 8000bda:	bd80      	pop	{r7, pc}

08000bdc <LPTIM1_IRQHandler>:

/**
  * @brief This function handles LPTIM1 global interrupt.
  */
void LPTIM1_IRQHandler(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM1_IRQn 0 */

  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 8000be0:	4802      	ldr	r0, [pc, #8]	; (8000bec <LPTIM1_IRQHandler+0x10>)
 8000be2:	f000 fe67 	bl	80018b4 <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */

  /* USER CODE END LPTIM1_IRQn 1 */
}
 8000be6:	bf00      	nop
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	200000e0 	.word	0x200000e0

08000bf0 <_read>:
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b086      	sub	sp, #24
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	60f8      	str	r0, [r7, #12]
 8000bf8:	60b9      	str	r1, [r7, #8]
 8000bfa:	607a      	str	r2, [r7, #4]
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	617b      	str	r3, [r7, #20]
 8000c00:	e00a      	b.n	8000c18 <_read+0x28>
 8000c02:	f3af 8000 	nop.w
 8000c06:	4601      	mov	r1, r0
 8000c08:	68bb      	ldr	r3, [r7, #8]
 8000c0a:	1c5a      	adds	r2, r3, #1
 8000c0c:	60ba      	str	r2, [r7, #8]
 8000c0e:	b2ca      	uxtb	r2, r1
 8000c10:	701a      	strb	r2, [r3, #0]
 8000c12:	697b      	ldr	r3, [r7, #20]
 8000c14:	3301      	adds	r3, #1
 8000c16:	617b      	str	r3, [r7, #20]
 8000c18:	697a      	ldr	r2, [r7, #20]
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	429a      	cmp	r2, r3
 8000c1e:	dbf0      	blt.n	8000c02 <_read+0x12>
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	4618      	mov	r0, r3
 8000c24:	3718      	adds	r7, #24
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}

08000c2a <_write>:
 8000c2a:	b580      	push	{r7, lr}
 8000c2c:	b086      	sub	sp, #24
 8000c2e:	af00      	add	r7, sp, #0
 8000c30:	60f8      	str	r0, [r7, #12]
 8000c32:	60b9      	str	r1, [r7, #8]
 8000c34:	607a      	str	r2, [r7, #4]
 8000c36:	2300      	movs	r3, #0
 8000c38:	617b      	str	r3, [r7, #20]
 8000c3a:	e009      	b.n	8000c50 <_write+0x26>
 8000c3c:	68bb      	ldr	r3, [r7, #8]
 8000c3e:	1c5a      	adds	r2, r3, #1
 8000c40:	60ba      	str	r2, [r7, #8]
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	4618      	mov	r0, r3
 8000c46:	f7ff fe2f 	bl	80008a8 <__io_putchar>
 8000c4a:	697b      	ldr	r3, [r7, #20]
 8000c4c:	3301      	adds	r3, #1
 8000c4e:	617b      	str	r3, [r7, #20]
 8000c50:	697a      	ldr	r2, [r7, #20]
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	429a      	cmp	r2, r3
 8000c56:	dbf1      	blt.n	8000c3c <_write+0x12>
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	3718      	adds	r7, #24
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}

08000c62 <_close>:
 8000c62:	b480      	push	{r7}
 8000c64:	b083      	sub	sp, #12
 8000c66:	af00      	add	r7, sp, #0
 8000c68:	6078      	str	r0, [r7, #4]
 8000c6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c6e:	4618      	mov	r0, r3
 8000c70:	370c      	adds	r7, #12
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr

08000c7a <_fstat>:
 8000c7a:	b480      	push	{r7}
 8000c7c:	b083      	sub	sp, #12
 8000c7e:	af00      	add	r7, sp, #0
 8000c80:	6078      	str	r0, [r7, #4]
 8000c82:	6039      	str	r1, [r7, #0]
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c8a:	605a      	str	r2, [r3, #4]
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	4618      	mov	r0, r3
 8000c90:	370c      	adds	r7, #12
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr

08000c9a <_isatty>:
 8000c9a:	b480      	push	{r7}
 8000c9c:	b083      	sub	sp, #12
 8000c9e:	af00      	add	r7, sp, #0
 8000ca0:	6078      	str	r0, [r7, #4]
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	370c      	adds	r7, #12
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cae:	4770      	bx	lr

08000cb0 <_lseek>:
 8000cb0:	b480      	push	{r7}
 8000cb2:	b085      	sub	sp, #20
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	60f8      	str	r0, [r7, #12]
 8000cb8:	60b9      	str	r1, [r7, #8]
 8000cba:	607a      	str	r2, [r7, #4]
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	3714      	adds	r7, #20
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr
	...

08000ccc <_sbrk>:
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b086      	sub	sp, #24
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
 8000cd4:	4a14      	ldr	r2, [pc, #80]	; (8000d28 <_sbrk+0x5c>)
 8000cd6:	4b15      	ldr	r3, [pc, #84]	; (8000d2c <_sbrk+0x60>)
 8000cd8:	1ad3      	subs	r3, r2, r3
 8000cda:	617b      	str	r3, [r7, #20]
 8000cdc:	697b      	ldr	r3, [r7, #20]
 8000cde:	613b      	str	r3, [r7, #16]
 8000ce0:	4b13      	ldr	r3, [pc, #76]	; (8000d30 <_sbrk+0x64>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d102      	bne.n	8000cee <_sbrk+0x22>
 8000ce8:	4b11      	ldr	r3, [pc, #68]	; (8000d30 <_sbrk+0x64>)
 8000cea:	4a12      	ldr	r2, [pc, #72]	; (8000d34 <_sbrk+0x68>)
 8000cec:	601a      	str	r2, [r3, #0]
 8000cee:	4b10      	ldr	r3, [pc, #64]	; (8000d30 <_sbrk+0x64>)
 8000cf0:	681a      	ldr	r2, [r3, #0]
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	4413      	add	r3, r2
 8000cf6:	693a      	ldr	r2, [r7, #16]
 8000cf8:	429a      	cmp	r2, r3
 8000cfa:	d207      	bcs.n	8000d0c <_sbrk+0x40>
 8000cfc:	f002 ff58 	bl	8003bb0 <__errno>
 8000d00:	4603      	mov	r3, r0
 8000d02:	220c      	movs	r2, #12
 8000d04:	601a      	str	r2, [r3, #0]
 8000d06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d0a:	e009      	b.n	8000d20 <_sbrk+0x54>
 8000d0c:	4b08      	ldr	r3, [pc, #32]	; (8000d30 <_sbrk+0x64>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	60fb      	str	r3, [r7, #12]
 8000d12:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <_sbrk+0x64>)
 8000d14:	681a      	ldr	r2, [r3, #0]
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	4413      	add	r3, r2
 8000d1a:	4a05      	ldr	r2, [pc, #20]	; (8000d30 <_sbrk+0x64>)
 8000d1c:	6013      	str	r3, [r2, #0]
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	4618      	mov	r0, r3
 8000d22:	3718      	adds	r7, #24
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	20010000 	.word	0x20010000
 8000d2c:	00000400 	.word	0x00000400
 8000d30:	20000204 	.word	0x20000204
 8000d34:	20000220 	.word	0x20000220

08000d38 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000d3c:	4b06      	ldr	r3, [pc, #24]	; (8000d58 <SystemInit+0x20>)
 8000d3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d42:	4a05      	ldr	r2, [pc, #20]	; (8000d58 <SystemInit+0x20>)
 8000d44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000d4c:	bf00      	nop
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop
 8000d58:	e000ed00 	.word	0xe000ed00

08000d5c <Reset_Handler>:
 8000d5c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d94 <LoopForever+0x2>
 8000d60:	f7ff ffea 	bl	8000d38 <SystemInit>
 8000d64:	480c      	ldr	r0, [pc, #48]	; (8000d98 <LoopForever+0x6>)
 8000d66:	490d      	ldr	r1, [pc, #52]	; (8000d9c <LoopForever+0xa>)
 8000d68:	4a0d      	ldr	r2, [pc, #52]	; (8000da0 <LoopForever+0xe>)
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	e002      	b.n	8000d74 <LoopCopyDataInit>

08000d6e <CopyDataInit>:
 8000d6e:	58d4      	ldr	r4, [r2, r3]
 8000d70:	50c4      	str	r4, [r0, r3]
 8000d72:	3304      	adds	r3, #4

08000d74 <LoopCopyDataInit>:
 8000d74:	18c4      	adds	r4, r0, r3
 8000d76:	428c      	cmp	r4, r1
 8000d78:	d3f9      	bcc.n	8000d6e <CopyDataInit>
 8000d7a:	4a0a      	ldr	r2, [pc, #40]	; (8000da4 <LoopForever+0x12>)
 8000d7c:	4c0a      	ldr	r4, [pc, #40]	; (8000da8 <LoopForever+0x16>)
 8000d7e:	2300      	movs	r3, #0
 8000d80:	e001      	b.n	8000d86 <LoopFillZerobss>

08000d82 <FillZerobss>:
 8000d82:	6013      	str	r3, [r2, #0]
 8000d84:	3204      	adds	r2, #4

08000d86 <LoopFillZerobss>:
 8000d86:	42a2      	cmp	r2, r4
 8000d88:	d3fb      	bcc.n	8000d82 <FillZerobss>
 8000d8a:	f002 ff17 	bl	8003bbc <__libc_init_array>
 8000d8e:	f7ff fbf1 	bl	8000574 <main>

08000d92 <LoopForever>:
 8000d92:	e7fe      	b.n	8000d92 <LoopForever>
 8000d94:	20010000 	.word	0x20010000
 8000d98:	20000000 	.word	0x20000000
 8000d9c:	20000070 	.word	0x20000070
 8000da0:	08004c68 	.word	0x08004c68
 8000da4:	20000070 	.word	0x20000070
 8000da8:	2000021c 	.word	0x2000021c

08000dac <ADC1_IRQHandler>:
 8000dac:	e7fe      	b.n	8000dac <ADC1_IRQHandler>

08000dae <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dae:	b580      	push	{r7, lr}
 8000db0:	b082      	sub	sp, #8
 8000db2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000db4:	2300      	movs	r3, #0
 8000db6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000db8:	2003      	movs	r0, #3
 8000dba:	f000 f961 	bl	8001080 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000dbe:	200f      	movs	r0, #15
 8000dc0:	f000 f80e 	bl	8000de0 <HAL_InitTick>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d002      	beq.n	8000dd0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000dca:	2301      	movs	r3, #1
 8000dcc:	71fb      	strb	r3, [r7, #7]
 8000dce:	e001      	b.n	8000dd4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000dd0:	f7ff fd82 	bl	80008d8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000dd4:	79fb      	ldrb	r3, [r7, #7]
}
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	3708      	adds	r7, #8
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
	...

08000de0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b084      	sub	sp, #16
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000de8:	2300      	movs	r3, #0
 8000dea:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000dec:	4b17      	ldr	r3, [pc, #92]	; (8000e4c <HAL_InitTick+0x6c>)
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d023      	beq.n	8000e3c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000df4:	4b16      	ldr	r3, [pc, #88]	; (8000e50 <HAL_InitTick+0x70>)
 8000df6:	681a      	ldr	r2, [r3, #0]
 8000df8:	4b14      	ldr	r3, [pc, #80]	; (8000e4c <HAL_InitTick+0x6c>)
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e02:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e06:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f000 f96d 	bl	80010ea <HAL_SYSTICK_Config>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d10f      	bne.n	8000e36 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	2b0f      	cmp	r3, #15
 8000e1a:	d809      	bhi.n	8000e30 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	6879      	ldr	r1, [r7, #4]
 8000e20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e24:	f000 f937 	bl	8001096 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e28:	4a0a      	ldr	r2, [pc, #40]	; (8000e54 <HAL_InitTick+0x74>)
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	6013      	str	r3, [r2, #0]
 8000e2e:	e007      	b.n	8000e40 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000e30:	2301      	movs	r3, #1
 8000e32:	73fb      	strb	r3, [r7, #15]
 8000e34:	e004      	b.n	8000e40 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e36:	2301      	movs	r3, #1
 8000e38:	73fb      	strb	r3, [r7, #15]
 8000e3a:	e001      	b.n	8000e40 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e3c:	2301      	movs	r3, #1
 8000e3e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000e40:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	3710      	adds	r7, #16
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	20000008 	.word	0x20000008
 8000e50:	20000000 	.word	0x20000000
 8000e54:	20000004 	.word	0x20000004

08000e58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e5c:	4b06      	ldr	r3, [pc, #24]	; (8000e78 <HAL_IncTick+0x20>)
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	461a      	mov	r2, r3
 8000e62:	4b06      	ldr	r3, [pc, #24]	; (8000e7c <HAL_IncTick+0x24>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	4413      	add	r3, r2
 8000e68:	4a04      	ldr	r2, [pc, #16]	; (8000e7c <HAL_IncTick+0x24>)
 8000e6a:	6013      	str	r3, [r2, #0]
}
 8000e6c:	bf00      	nop
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop
 8000e78:	20000008 	.word	0x20000008
 8000e7c:	20000208 	.word	0x20000208

08000e80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  return uwTick;
 8000e84:	4b03      	ldr	r3, [pc, #12]	; (8000e94 <HAL_GetTick+0x14>)
 8000e86:	681b      	ldr	r3, [r3, #0]
}
 8000e88:	4618      	mov	r0, r3
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop
 8000e94:	20000208 	.word	0x20000208

08000e98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b084      	sub	sp, #16
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ea0:	f7ff ffee 	bl	8000e80 <HAL_GetTick>
 8000ea4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000eb0:	d005      	beq.n	8000ebe <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000eb2:	4b0a      	ldr	r3, [pc, #40]	; (8000edc <HAL_Delay+0x44>)
 8000eb4:	781b      	ldrb	r3, [r3, #0]
 8000eb6:	461a      	mov	r2, r3
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	4413      	add	r3, r2
 8000ebc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ebe:	bf00      	nop
 8000ec0:	f7ff ffde 	bl	8000e80 <HAL_GetTick>
 8000ec4:	4602      	mov	r2, r0
 8000ec6:	68bb      	ldr	r3, [r7, #8]
 8000ec8:	1ad3      	subs	r3, r2, r3
 8000eca:	68fa      	ldr	r2, [r7, #12]
 8000ecc:	429a      	cmp	r2, r3
 8000ece:	d8f7      	bhi.n	8000ec0 <HAL_Delay+0x28>
  {
  }
}
 8000ed0:	bf00      	nop
 8000ed2:	bf00      	nop
 8000ed4:	3710      	adds	r7, #16
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	20000008 	.word	0x20000008

08000ee0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b085      	sub	sp, #20
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	f003 0307 	and.w	r3, r3, #7
 8000eee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ef0:	4b0c      	ldr	r3, [pc, #48]	; (8000f24 <__NVIC_SetPriorityGrouping+0x44>)
 8000ef2:	68db      	ldr	r3, [r3, #12]
 8000ef4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ef6:	68ba      	ldr	r2, [r7, #8]
 8000ef8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000efc:	4013      	ands	r3, r2
 8000efe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f04:	68bb      	ldr	r3, [r7, #8]
 8000f06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f12:	4a04      	ldr	r2, [pc, #16]	; (8000f24 <__NVIC_SetPriorityGrouping+0x44>)
 8000f14:	68bb      	ldr	r3, [r7, #8]
 8000f16:	60d3      	str	r3, [r2, #12]
}
 8000f18:	bf00      	nop
 8000f1a:	3714      	adds	r7, #20
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr
 8000f24:	e000ed00 	.word	0xe000ed00

08000f28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f2c:	4b04      	ldr	r3, [pc, #16]	; (8000f40 <__NVIC_GetPriorityGrouping+0x18>)
 8000f2e:	68db      	ldr	r3, [r3, #12]
 8000f30:	0a1b      	lsrs	r3, r3, #8
 8000f32:	f003 0307 	and.w	r3, r3, #7
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr
 8000f40:	e000ed00 	.word	0xe000ed00

08000f44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	db0b      	blt.n	8000f6e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f56:	79fb      	ldrb	r3, [r7, #7]
 8000f58:	f003 021f 	and.w	r2, r3, #31
 8000f5c:	4907      	ldr	r1, [pc, #28]	; (8000f7c <__NVIC_EnableIRQ+0x38>)
 8000f5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f62:	095b      	lsrs	r3, r3, #5
 8000f64:	2001      	movs	r0, #1
 8000f66:	fa00 f202 	lsl.w	r2, r0, r2
 8000f6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f6e:	bf00      	nop
 8000f70:	370c      	adds	r7, #12
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop
 8000f7c:	e000e100 	.word	0xe000e100

08000f80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b083      	sub	sp, #12
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	4603      	mov	r3, r0
 8000f88:	6039      	str	r1, [r7, #0]
 8000f8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	db0a      	blt.n	8000faa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	b2da      	uxtb	r2, r3
 8000f98:	490c      	ldr	r1, [pc, #48]	; (8000fcc <__NVIC_SetPriority+0x4c>)
 8000f9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f9e:	0112      	lsls	r2, r2, #4
 8000fa0:	b2d2      	uxtb	r2, r2
 8000fa2:	440b      	add	r3, r1
 8000fa4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fa8:	e00a      	b.n	8000fc0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	b2da      	uxtb	r2, r3
 8000fae:	4908      	ldr	r1, [pc, #32]	; (8000fd0 <__NVIC_SetPriority+0x50>)
 8000fb0:	79fb      	ldrb	r3, [r7, #7]
 8000fb2:	f003 030f 	and.w	r3, r3, #15
 8000fb6:	3b04      	subs	r3, #4
 8000fb8:	0112      	lsls	r2, r2, #4
 8000fba:	b2d2      	uxtb	r2, r2
 8000fbc:	440b      	add	r3, r1
 8000fbe:	761a      	strb	r2, [r3, #24]
}
 8000fc0:	bf00      	nop
 8000fc2:	370c      	adds	r7, #12
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr
 8000fcc:	e000e100 	.word	0xe000e100
 8000fd0:	e000ed00 	.word	0xe000ed00

08000fd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b089      	sub	sp, #36	; 0x24
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	60f8      	str	r0, [r7, #12]
 8000fdc:	60b9      	str	r1, [r7, #8]
 8000fde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	f003 0307 	and.w	r3, r3, #7
 8000fe6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fe8:	69fb      	ldr	r3, [r7, #28]
 8000fea:	f1c3 0307 	rsb	r3, r3, #7
 8000fee:	2b04      	cmp	r3, #4
 8000ff0:	bf28      	it	cs
 8000ff2:	2304      	movcs	r3, #4
 8000ff4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ff6:	69fb      	ldr	r3, [r7, #28]
 8000ff8:	3304      	adds	r3, #4
 8000ffa:	2b06      	cmp	r3, #6
 8000ffc:	d902      	bls.n	8001004 <NVIC_EncodePriority+0x30>
 8000ffe:	69fb      	ldr	r3, [r7, #28]
 8001000:	3b03      	subs	r3, #3
 8001002:	e000      	b.n	8001006 <NVIC_EncodePriority+0x32>
 8001004:	2300      	movs	r3, #0
 8001006:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001008:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800100c:	69bb      	ldr	r3, [r7, #24]
 800100e:	fa02 f303 	lsl.w	r3, r2, r3
 8001012:	43da      	mvns	r2, r3
 8001014:	68bb      	ldr	r3, [r7, #8]
 8001016:	401a      	ands	r2, r3
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800101c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	fa01 f303 	lsl.w	r3, r1, r3
 8001026:	43d9      	mvns	r1, r3
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800102c:	4313      	orrs	r3, r2
         );
}
 800102e:	4618      	mov	r0, r3
 8001030:	3724      	adds	r7, #36	; 0x24
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
	...

0800103c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	3b01      	subs	r3, #1
 8001048:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800104c:	d301      	bcc.n	8001052 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800104e:	2301      	movs	r3, #1
 8001050:	e00f      	b.n	8001072 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001052:	4a0a      	ldr	r2, [pc, #40]	; (800107c <SysTick_Config+0x40>)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	3b01      	subs	r3, #1
 8001058:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800105a:	210f      	movs	r1, #15
 800105c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001060:	f7ff ff8e 	bl	8000f80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001064:	4b05      	ldr	r3, [pc, #20]	; (800107c <SysTick_Config+0x40>)
 8001066:	2200      	movs	r2, #0
 8001068:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800106a:	4b04      	ldr	r3, [pc, #16]	; (800107c <SysTick_Config+0x40>)
 800106c:	2207      	movs	r2, #7
 800106e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001070:	2300      	movs	r3, #0
}
 8001072:	4618      	mov	r0, r3
 8001074:	3708      	adds	r7, #8
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	e000e010 	.word	0xe000e010

08001080 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001088:	6878      	ldr	r0, [r7, #4]
 800108a:	f7ff ff29 	bl	8000ee0 <__NVIC_SetPriorityGrouping>
}
 800108e:	bf00      	nop
 8001090:	3708      	adds	r7, #8
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}

08001096 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001096:	b580      	push	{r7, lr}
 8001098:	b086      	sub	sp, #24
 800109a:	af00      	add	r7, sp, #0
 800109c:	4603      	mov	r3, r0
 800109e:	60b9      	str	r1, [r7, #8]
 80010a0:	607a      	str	r2, [r7, #4]
 80010a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80010a4:	2300      	movs	r3, #0
 80010a6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80010a8:	f7ff ff3e 	bl	8000f28 <__NVIC_GetPriorityGrouping>
 80010ac:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010ae:	687a      	ldr	r2, [r7, #4]
 80010b0:	68b9      	ldr	r1, [r7, #8]
 80010b2:	6978      	ldr	r0, [r7, #20]
 80010b4:	f7ff ff8e 	bl	8000fd4 <NVIC_EncodePriority>
 80010b8:	4602      	mov	r2, r0
 80010ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010be:	4611      	mov	r1, r2
 80010c0:	4618      	mov	r0, r3
 80010c2:	f7ff ff5d 	bl	8000f80 <__NVIC_SetPriority>
}
 80010c6:	bf00      	nop
 80010c8:	3718      	adds	r7, #24
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}

080010ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010ce:	b580      	push	{r7, lr}
 80010d0:	b082      	sub	sp, #8
 80010d2:	af00      	add	r7, sp, #0
 80010d4:	4603      	mov	r3, r0
 80010d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff ff31 	bl	8000f44 <__NVIC_EnableIRQ>
}
 80010e2:	bf00      	nop
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b082      	sub	sp, #8
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010f2:	6878      	ldr	r0, [r7, #4]
 80010f4:	f7ff ffa2 	bl	800103c <SysTick_Config>
 80010f8:	4603      	mov	r3, r0
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
	...

08001104 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001104:	b480      	push	{r7}
 8001106:	b087      	sub	sp, #28
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
 800110c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800110e:	2300      	movs	r3, #0
 8001110:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001112:	e154      	b.n	80013be <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	681a      	ldr	r2, [r3, #0]
 8001118:	2101      	movs	r1, #1
 800111a:	697b      	ldr	r3, [r7, #20]
 800111c:	fa01 f303 	lsl.w	r3, r1, r3
 8001120:	4013      	ands	r3, r2
 8001122:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	2b00      	cmp	r3, #0
 8001128:	f000 8146 	beq.w	80013b8 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	f003 0303 	and.w	r3, r3, #3
 8001134:	2b01      	cmp	r3, #1
 8001136:	d005      	beq.n	8001144 <HAL_GPIO_Init+0x40>
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	f003 0303 	and.w	r3, r3, #3
 8001140:	2b02      	cmp	r3, #2
 8001142:	d130      	bne.n	80011a6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	689b      	ldr	r3, [r3, #8]
 8001148:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800114a:	697b      	ldr	r3, [r7, #20]
 800114c:	005b      	lsls	r3, r3, #1
 800114e:	2203      	movs	r2, #3
 8001150:	fa02 f303 	lsl.w	r3, r2, r3
 8001154:	43db      	mvns	r3, r3
 8001156:	693a      	ldr	r2, [r7, #16]
 8001158:	4013      	ands	r3, r2
 800115a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	68da      	ldr	r2, [r3, #12]
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	005b      	lsls	r3, r3, #1
 8001164:	fa02 f303 	lsl.w	r3, r2, r3
 8001168:	693a      	ldr	r2, [r7, #16]
 800116a:	4313      	orrs	r3, r2
 800116c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	693a      	ldr	r2, [r7, #16]
 8001172:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800117a:	2201      	movs	r2, #1
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	fa02 f303 	lsl.w	r3, r2, r3
 8001182:	43db      	mvns	r3, r3
 8001184:	693a      	ldr	r2, [r7, #16]
 8001186:	4013      	ands	r3, r2
 8001188:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	091b      	lsrs	r3, r3, #4
 8001190:	f003 0201 	and.w	r2, r3, #1
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	fa02 f303 	lsl.w	r3, r2, r3
 800119a:	693a      	ldr	r2, [r7, #16]
 800119c:	4313      	orrs	r3, r2
 800119e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	693a      	ldr	r2, [r7, #16]
 80011a4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	f003 0303 	and.w	r3, r3, #3
 80011ae:	2b03      	cmp	r3, #3
 80011b0:	d017      	beq.n	80011e2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	68db      	ldr	r3, [r3, #12]
 80011b6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	005b      	lsls	r3, r3, #1
 80011bc:	2203      	movs	r2, #3
 80011be:	fa02 f303 	lsl.w	r3, r2, r3
 80011c2:	43db      	mvns	r3, r3
 80011c4:	693a      	ldr	r2, [r7, #16]
 80011c6:	4013      	ands	r3, r2
 80011c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	689a      	ldr	r2, [r3, #8]
 80011ce:	697b      	ldr	r3, [r7, #20]
 80011d0:	005b      	lsls	r3, r3, #1
 80011d2:	fa02 f303 	lsl.w	r3, r2, r3
 80011d6:	693a      	ldr	r2, [r7, #16]
 80011d8:	4313      	orrs	r3, r2
 80011da:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	693a      	ldr	r2, [r7, #16]
 80011e0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	f003 0303 	and.w	r3, r3, #3
 80011ea:	2b02      	cmp	r3, #2
 80011ec:	d123      	bne.n	8001236 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	08da      	lsrs	r2, r3, #3
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	3208      	adds	r2, #8
 80011f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011fa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	f003 0307 	and.w	r3, r3, #7
 8001202:	009b      	lsls	r3, r3, #2
 8001204:	220f      	movs	r2, #15
 8001206:	fa02 f303 	lsl.w	r3, r2, r3
 800120a:	43db      	mvns	r3, r3
 800120c:	693a      	ldr	r2, [r7, #16]
 800120e:	4013      	ands	r3, r2
 8001210:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	691a      	ldr	r2, [r3, #16]
 8001216:	697b      	ldr	r3, [r7, #20]
 8001218:	f003 0307 	and.w	r3, r3, #7
 800121c:	009b      	lsls	r3, r3, #2
 800121e:	fa02 f303 	lsl.w	r3, r2, r3
 8001222:	693a      	ldr	r2, [r7, #16]
 8001224:	4313      	orrs	r3, r2
 8001226:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	08da      	lsrs	r2, r3, #3
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	3208      	adds	r2, #8
 8001230:	6939      	ldr	r1, [r7, #16]
 8001232:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	005b      	lsls	r3, r3, #1
 8001240:	2203      	movs	r2, #3
 8001242:	fa02 f303 	lsl.w	r3, r2, r3
 8001246:	43db      	mvns	r3, r3
 8001248:	693a      	ldr	r2, [r7, #16]
 800124a:	4013      	ands	r3, r2
 800124c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	f003 0203 	and.w	r2, r3, #3
 8001256:	697b      	ldr	r3, [r7, #20]
 8001258:	005b      	lsls	r3, r3, #1
 800125a:	fa02 f303 	lsl.w	r3, r2, r3
 800125e:	693a      	ldr	r2, [r7, #16]
 8001260:	4313      	orrs	r3, r2
 8001262:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	693a      	ldr	r2, [r7, #16]
 8001268:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001272:	2b00      	cmp	r3, #0
 8001274:	f000 80a0 	beq.w	80013b8 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001278:	4b58      	ldr	r3, [pc, #352]	; (80013dc <HAL_GPIO_Init+0x2d8>)
 800127a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800127c:	4a57      	ldr	r2, [pc, #348]	; (80013dc <HAL_GPIO_Init+0x2d8>)
 800127e:	f043 0301 	orr.w	r3, r3, #1
 8001282:	6613      	str	r3, [r2, #96]	; 0x60
 8001284:	4b55      	ldr	r3, [pc, #340]	; (80013dc <HAL_GPIO_Init+0x2d8>)
 8001286:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001288:	f003 0301 	and.w	r3, r3, #1
 800128c:	60bb      	str	r3, [r7, #8]
 800128e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001290:	4a53      	ldr	r2, [pc, #332]	; (80013e0 <HAL_GPIO_Init+0x2dc>)
 8001292:	697b      	ldr	r3, [r7, #20]
 8001294:	089b      	lsrs	r3, r3, #2
 8001296:	3302      	adds	r3, #2
 8001298:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800129c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800129e:	697b      	ldr	r3, [r7, #20]
 80012a0:	f003 0303 	and.w	r3, r3, #3
 80012a4:	009b      	lsls	r3, r3, #2
 80012a6:	220f      	movs	r2, #15
 80012a8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ac:	43db      	mvns	r3, r3
 80012ae:	693a      	ldr	r2, [r7, #16]
 80012b0:	4013      	ands	r3, r2
 80012b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80012ba:	d019      	beq.n	80012f0 <HAL_GPIO_Init+0x1ec>
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	4a49      	ldr	r2, [pc, #292]	; (80013e4 <HAL_GPIO_Init+0x2e0>)
 80012c0:	4293      	cmp	r3, r2
 80012c2:	d013      	beq.n	80012ec <HAL_GPIO_Init+0x1e8>
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	4a48      	ldr	r2, [pc, #288]	; (80013e8 <HAL_GPIO_Init+0x2e4>)
 80012c8:	4293      	cmp	r3, r2
 80012ca:	d00d      	beq.n	80012e8 <HAL_GPIO_Init+0x1e4>
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	4a47      	ldr	r2, [pc, #284]	; (80013ec <HAL_GPIO_Init+0x2e8>)
 80012d0:	4293      	cmp	r3, r2
 80012d2:	d007      	beq.n	80012e4 <HAL_GPIO_Init+0x1e0>
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	4a46      	ldr	r2, [pc, #280]	; (80013f0 <HAL_GPIO_Init+0x2ec>)
 80012d8:	4293      	cmp	r3, r2
 80012da:	d101      	bne.n	80012e0 <HAL_GPIO_Init+0x1dc>
 80012dc:	2304      	movs	r3, #4
 80012de:	e008      	b.n	80012f2 <HAL_GPIO_Init+0x1ee>
 80012e0:	2307      	movs	r3, #7
 80012e2:	e006      	b.n	80012f2 <HAL_GPIO_Init+0x1ee>
 80012e4:	2303      	movs	r3, #3
 80012e6:	e004      	b.n	80012f2 <HAL_GPIO_Init+0x1ee>
 80012e8:	2302      	movs	r3, #2
 80012ea:	e002      	b.n	80012f2 <HAL_GPIO_Init+0x1ee>
 80012ec:	2301      	movs	r3, #1
 80012ee:	e000      	b.n	80012f2 <HAL_GPIO_Init+0x1ee>
 80012f0:	2300      	movs	r3, #0
 80012f2:	697a      	ldr	r2, [r7, #20]
 80012f4:	f002 0203 	and.w	r2, r2, #3
 80012f8:	0092      	lsls	r2, r2, #2
 80012fa:	4093      	lsls	r3, r2
 80012fc:	693a      	ldr	r2, [r7, #16]
 80012fe:	4313      	orrs	r3, r2
 8001300:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001302:	4937      	ldr	r1, [pc, #220]	; (80013e0 <HAL_GPIO_Init+0x2dc>)
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	089b      	lsrs	r3, r3, #2
 8001308:	3302      	adds	r3, #2
 800130a:	693a      	ldr	r2, [r7, #16]
 800130c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001310:	4b38      	ldr	r3, [pc, #224]	; (80013f4 <HAL_GPIO_Init+0x2f0>)
 8001312:	689b      	ldr	r3, [r3, #8]
 8001314:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	43db      	mvns	r3, r3
 800131a:	693a      	ldr	r2, [r7, #16]
 800131c:	4013      	ands	r3, r2
 800131e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001328:	2b00      	cmp	r3, #0
 800132a:	d003      	beq.n	8001334 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 800132c:	693a      	ldr	r2, [r7, #16]
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	4313      	orrs	r3, r2
 8001332:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001334:	4a2f      	ldr	r2, [pc, #188]	; (80013f4 <HAL_GPIO_Init+0x2f0>)
 8001336:	693b      	ldr	r3, [r7, #16]
 8001338:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800133a:	4b2e      	ldr	r3, [pc, #184]	; (80013f4 <HAL_GPIO_Init+0x2f0>)
 800133c:	68db      	ldr	r3, [r3, #12]
 800133e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	43db      	mvns	r3, r3
 8001344:	693a      	ldr	r2, [r7, #16]
 8001346:	4013      	ands	r3, r2
 8001348:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001352:	2b00      	cmp	r3, #0
 8001354:	d003      	beq.n	800135e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001356:	693a      	ldr	r2, [r7, #16]
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	4313      	orrs	r3, r2
 800135c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800135e:	4a25      	ldr	r2, [pc, #148]	; (80013f4 <HAL_GPIO_Init+0x2f0>)
 8001360:	693b      	ldr	r3, [r7, #16]
 8001362:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001364:	4b23      	ldr	r3, [pc, #140]	; (80013f4 <HAL_GPIO_Init+0x2f0>)
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	43db      	mvns	r3, r3
 800136e:	693a      	ldr	r2, [r7, #16]
 8001370:	4013      	ands	r3, r2
 8001372:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800137c:	2b00      	cmp	r3, #0
 800137e:	d003      	beq.n	8001388 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001380:	693a      	ldr	r2, [r7, #16]
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	4313      	orrs	r3, r2
 8001386:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001388:	4a1a      	ldr	r2, [pc, #104]	; (80013f4 <HAL_GPIO_Init+0x2f0>)
 800138a:	693b      	ldr	r3, [r7, #16]
 800138c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800138e:	4b19      	ldr	r3, [pc, #100]	; (80013f4 <HAL_GPIO_Init+0x2f0>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	43db      	mvns	r3, r3
 8001398:	693a      	ldr	r2, [r7, #16]
 800139a:	4013      	ands	r3, r2
 800139c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d003      	beq.n	80013b2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80013aa:	693a      	ldr	r2, [r7, #16]
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	4313      	orrs	r3, r2
 80013b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80013b2:	4a10      	ldr	r2, [pc, #64]	; (80013f4 <HAL_GPIO_Init+0x2f0>)
 80013b4:	693b      	ldr	r3, [r7, #16]
 80013b6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	3301      	adds	r3, #1
 80013bc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	681a      	ldr	r2, [r3, #0]
 80013c2:	697b      	ldr	r3, [r7, #20]
 80013c4:	fa22 f303 	lsr.w	r3, r2, r3
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	f47f aea3 	bne.w	8001114 <HAL_GPIO_Init+0x10>
  }
}
 80013ce:	bf00      	nop
 80013d0:	bf00      	nop
 80013d2:	371c      	adds	r7, #28
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr
 80013dc:	40021000 	.word	0x40021000
 80013e0:	40010000 	.word	0x40010000
 80013e4:	48000400 	.word	0x48000400
 80013e8:	48000800 	.word	0x48000800
 80013ec:	48000c00 	.word	0x48000c00
 80013f0:	48001000 	.word	0x48001000
 80013f4:	40010400 	.word	0x40010400

080013f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b083      	sub	sp, #12
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
 8001400:	460b      	mov	r3, r1
 8001402:	807b      	strh	r3, [r7, #2]
 8001404:	4613      	mov	r3, r2
 8001406:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001408:	787b      	ldrb	r3, [r7, #1]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d003      	beq.n	8001416 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800140e:	887a      	ldrh	r2, [r7, #2]
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001414:	e002      	b.n	800141c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001416:	887a      	ldrh	r2, [r7, #2]
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800141c:	bf00      	nop
 800141e:	370c      	adds	r7, #12
 8001420:	46bd      	mov	sp, r7
 8001422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001426:	4770      	bx	lr

08001428 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d101      	bne.n	800143a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001436:	2301      	movs	r3, #1
 8001438:	e081      	b.n	800153e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001440:	b2db      	uxtb	r3, r3
 8001442:	2b00      	cmp	r3, #0
 8001444:	d106      	bne.n	8001454 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	2200      	movs	r2, #0
 800144a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800144e:	6878      	ldr	r0, [r7, #4]
 8001450:	f7ff fa66 	bl	8000920 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2224      	movs	r2, #36	; 0x24
 8001458:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	681a      	ldr	r2, [r3, #0]
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f022 0201 	bic.w	r2, r2, #1
 800146a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	685a      	ldr	r2, [r3, #4]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001478:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	689a      	ldr	r2, [r3, #8]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001488:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	68db      	ldr	r3, [r3, #12]
 800148e:	2b01      	cmp	r3, #1
 8001490:	d107      	bne.n	80014a2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	689a      	ldr	r2, [r3, #8]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800149e:	609a      	str	r2, [r3, #8]
 80014a0:	e006      	b.n	80014b0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	689a      	ldr	r2, [r3, #8]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80014ae:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	68db      	ldr	r3, [r3, #12]
 80014b4:	2b02      	cmp	r3, #2
 80014b6:	d104      	bne.n	80014c2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80014c0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	687a      	ldr	r2, [r7, #4]
 80014ca:	6812      	ldr	r2, [r2, #0]
 80014cc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80014d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80014d4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	68da      	ldr	r2, [r3, #12]
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80014e4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	691a      	ldr	r2, [r3, #16]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	695b      	ldr	r3, [r3, #20]
 80014ee:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	699b      	ldr	r3, [r3, #24]
 80014f6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	430a      	orrs	r2, r1
 80014fe:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	69d9      	ldr	r1, [r3, #28]
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6a1a      	ldr	r2, [r3, #32]
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	430a      	orrs	r2, r1
 800150e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	681a      	ldr	r2, [r3, #0]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f042 0201 	orr.w	r2, r2, #1
 800151e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2200      	movs	r2, #0
 8001524:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2220      	movs	r2, #32
 800152a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2200      	movs	r2, #0
 8001532:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2200      	movs	r2, #0
 8001538:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800153c:	2300      	movs	r3, #0
}
 800153e:	4618      	mov	r0, r3
 8001540:	3708      	adds	r7, #8
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}

08001546 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001546:	b480      	push	{r7}
 8001548:	b083      	sub	sp, #12
 800154a:	af00      	add	r7, sp, #0
 800154c:	6078      	str	r0, [r7, #4]
 800154e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001556:	b2db      	uxtb	r3, r3
 8001558:	2b20      	cmp	r3, #32
 800155a:	d138      	bne.n	80015ce <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001562:	2b01      	cmp	r3, #1
 8001564:	d101      	bne.n	800156a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001566:	2302      	movs	r3, #2
 8001568:	e032      	b.n	80015d0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2201      	movs	r2, #1
 800156e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2224      	movs	r2, #36	; 0x24
 8001576:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	681a      	ldr	r2, [r3, #0]
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f022 0201 	bic.w	r2, r2, #1
 8001588:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001598:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	6819      	ldr	r1, [r3, #0]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	683a      	ldr	r2, [r7, #0]
 80015a6:	430a      	orrs	r2, r1
 80015a8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	681a      	ldr	r2, [r3, #0]
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f042 0201 	orr.w	r2, r2, #1
 80015b8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2220      	movs	r2, #32
 80015be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2200      	movs	r2, #0
 80015c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80015ca:	2300      	movs	r3, #0
 80015cc:	e000      	b.n	80015d0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80015ce:	2302      	movs	r3, #2
  }
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	370c      	adds	r7, #12
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr

080015dc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80015dc:	b480      	push	{r7}
 80015de:	b085      	sub	sp, #20
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
 80015e4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80015ec:	b2db      	uxtb	r3, r3
 80015ee:	2b20      	cmp	r3, #32
 80015f0:	d139      	bne.n	8001666 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80015f8:	2b01      	cmp	r3, #1
 80015fa:	d101      	bne.n	8001600 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80015fc:	2302      	movs	r3, #2
 80015fe:	e033      	b.n	8001668 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2201      	movs	r2, #1
 8001604:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2224      	movs	r2, #36	; 0x24
 800160c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	681a      	ldr	r2, [r3, #0]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f022 0201 	bic.w	r2, r2, #1
 800161e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800162e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	021b      	lsls	r3, r3, #8
 8001634:	68fa      	ldr	r2, [r7, #12]
 8001636:	4313      	orrs	r3, r2
 8001638:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	68fa      	ldr	r2, [r7, #12]
 8001640:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f042 0201 	orr.w	r2, r2, #1
 8001650:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2220      	movs	r2, #32
 8001656:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2200      	movs	r2, #0
 800165e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001662:	2300      	movs	r3, #0
 8001664:	e000      	b.n	8001668 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001666:	2302      	movs	r3, #2
  }
}
 8001668:	4618      	mov	r0, r3
 800166a:	3714      	adds	r7, #20
 800166c:	46bd      	mov	sp, r7
 800166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001672:	4770      	bx	lr

08001674 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b084      	sub	sp, #16
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d101      	bne.n	8001686 <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 8001682:	2301      	movs	r3, #1
 8001684:	e08f      	b.n	80017a6 <HAL_LPTIM_Init+0x132>
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	2b01      	cmp	r3, #1
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));
#if defined(LPTIM_RCR_REP)
  assert_param(IS_LPTIM_REPETITION(hlptim->Init.RepetitionCounter));
#endif

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8001692:	b2db      	uxtb	r3, r3
 8001694:	2b00      	cmp	r3, #0
 8001696:	d106      	bne.n	80016a6 <HAL_LPTIM_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2200      	movs	r2, #0
 800169c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 80016a0:	6878      	ldr	r0, [r7, #4]
 80016a2:	f7ff f997 	bl	80009d4 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2202      	movs	r2, #2
 80016aa:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  }

#endif

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	68db      	ldr	r3, [r3, #12]
 80016b4:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	2b01      	cmp	r3, #1
 80016bc:	d004      	beq.n	80016c8 <HAL_LPTIM_Init+0x54>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016c2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80016c6:	d103      	bne.n	80016d0 <HAL_LPTIM_Init+0x5c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	f023 031e 	bic.w	r3, r3, #30
 80016ce:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	695b      	ldr	r3, [r3, #20]
 80016d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016d8:	4293      	cmp	r3, r2
 80016da:	d005      	beq.n	80016e8 <HAL_LPTIM_Init+0x74>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80016e2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80016e6:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 80016e8:	68fa      	ldr	r2, [r7, #12]
 80016ea:	4b31      	ldr	r3, [pc, #196]	; (80017b0 <HAL_LPTIM_Init+0x13c>)
 80016ec:	4013      	ands	r3, r2
 80016ee:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80016f8:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 80016fe:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 8001704:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 800170a:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 800170c:	68fa      	ldr	r2, [r7, #12]
 800170e:	4313      	orrs	r3, r2
 8001710:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d107      	bne.n	800172a <HAL_LPTIM_Init+0xb6>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8001722:	4313      	orrs	r3, r2
 8001724:	68fa      	ldr	r2, [r7, #12]
 8001726:	4313      	orrs	r3, r2
 8001728:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	2b01      	cmp	r3, #1
 8001730:	d004      	beq.n	800173c <HAL_LPTIM_Init+0xc8>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001736:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800173a:	d107      	bne.n	800174c <HAL_LPTIM_Init+0xd8>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8001744:	4313      	orrs	r3, r2
 8001746:	68fa      	ldr	r2, [r7, #12]
 8001748:	4313      	orrs	r3, r2
 800174a:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	695b      	ldr	r3, [r3, #20]
 8001750:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001754:	4293      	cmp	r3, r2
 8001756:	d00a      	beq.n	800176e <HAL_LPTIM_Init+0xfa>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8001760:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 8001766:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8001768:	68fa      	ldr	r2, [r7, #12]
 800176a:	4313      	orrs	r3, r2
 800176c:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	68fa      	ldr	r2, [r7, #12]
 8001774:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if (hlptim->Instance == LPTIM1)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4a0e      	ldr	r2, [pc, #56]	; (80017b4 <HAL_LPTIM_Init+0x140>)
 800177c:	4293      	cmp	r3, r2
 800177e:	d108      	bne.n	8001792 <HAL_LPTIM_Init+0x11e>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->OR = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	430a      	orrs	r2, r1
 800178e:	621a      	str	r2, [r3, #32]
 8001790:	e004      	b.n	800179c <HAL_LPTIM_Init+0x128>
  {
    /* Check LPTIM2 Input1 source */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

    /* Configure LPTIM2 Input1 source */
    hlptim->Instance->OR = hlptim->Init.Input1Source;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	687a      	ldr	r2, [r7, #4]
 8001798:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800179a:	621a      	str	r2, [r3, #32]
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2201      	movs	r2, #1
 80017a0:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 80017a4:	2300      	movs	r3, #0
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	3710      	adds	r7, #16
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	ff19f1fe 	.word	0xff19f1fe
 80017b4:	40007c00 	.word	0x40007c00

080017b8 <HAL_LPTIM_TimeOut_Start_IT>:
  * @param  Timeout Specifies the TimeOut value to reset the counter.
  *         This parameter must be a value between 0x0000 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_TimeOut_Start_IT(LPTIM_HandleTypeDef *hlptim, uint32_t Period, uint32_t Timeout)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b084      	sub	sp, #16
 80017bc:	af00      	add	r7, sp, #0
 80017be:	60f8      	str	r0, [r7, #12]
 80017c0:	60b9      	str	r1, [r7, #8]
 80017c2:	607a      	str	r2, [r7, #4]
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(Period));
  assert_param(IS_LPTIM_PULSE(Timeout));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	2202      	movs	r2, #2
 80017c8:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Enable EXTI Line interrupt on the LPTIM Wake-up Timer */
  __HAL_LPTIM_WAKEUPTIMER_EXTI_ENABLE_IT(hlptim->Instance);
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a36      	ldr	r2, [pc, #216]	; (80018ac <HAL_LPTIM_TimeOut_Start_IT+0xf4>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d106      	bne.n	80017e4 <HAL_LPTIM_TimeOut_Start_IT+0x2c>
 80017d6:	4b36      	ldr	r3, [pc, #216]	; (80018b0 <HAL_LPTIM_TimeOut_Start_IT+0xf8>)
 80017d8:	6a1b      	ldr	r3, [r3, #32]
 80017da:	4a35      	ldr	r2, [pc, #212]	; (80018b0 <HAL_LPTIM_TimeOut_Start_IT+0xf8>)
 80017dc:	f043 0301 	orr.w	r3, r3, #1
 80017e0:	6213      	str	r3, [r2, #32]
 80017e2:	e005      	b.n	80017f0 <HAL_LPTIM_TimeOut_Start_IT+0x38>
 80017e4:	4b32      	ldr	r3, [pc, #200]	; (80018b0 <HAL_LPTIM_TimeOut_Start_IT+0xf8>)
 80017e6:	6a1b      	ldr	r3, [r3, #32]
 80017e8:	4a31      	ldr	r2, [pc, #196]	; (80018b0 <HAL_LPTIM_TimeOut_Start_IT+0xf8>)
 80017ea:	f043 0302 	orr.w	r3, r3, #2
 80017ee:	6213      	str	r3, [r2, #32]

  /* Set TIMOUT bit to enable the timeout function */
  hlptim->Instance->CFGR |= LPTIM_CFGR_TIMOUT;
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	68da      	ldr	r2, [r3, #12]
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80017fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	691a      	ldr	r2, [r3, #16]
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f042 0201 	orr.w	r2, r2, #1
 800180e:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	2210      	movs	r2, #16
 8001816:	605a      	str	r2, [r3, #4]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	68ba      	ldr	r2, [r7, #8]
 800181e:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8001820:	2110      	movs	r1, #16
 8001822:	68f8      	ldr	r0, [r7, #12]
 8001824:	f000 f92c 	bl	8001a80 <LPTIM_WaitForFlag>
 8001828:	4603      	mov	r3, r0
 800182a:	2b03      	cmp	r3, #3
 800182c:	d101      	bne.n	8001832 <HAL_LPTIM_TimeOut_Start_IT+0x7a>
  {
    return HAL_TIMEOUT;
 800182e:	2303      	movs	r3, #3
 8001830:	e038      	b.n	80018a4 <HAL_LPTIM_TimeOut_Start_IT+0xec>
  }

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	2208      	movs	r2, #8
 8001838:	605a      	str	r2, [r3, #4]

  /* Load the Timeout value in the compare register */
  __HAL_LPTIM_COMPARE_SET(hlptim, Timeout);
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	687a      	ldr	r2, [r7, #4]
 8001840:	615a      	str	r2, [r3, #20]

  /* Wait for the completion of the write operation to the LPTIM_CMP register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 8001842:	2108      	movs	r1, #8
 8001844:	68f8      	ldr	r0, [r7, #12]
 8001846:	f000 f91b 	bl	8001a80 <LPTIM_WaitForFlag>
 800184a:	4603      	mov	r3, r0
 800184c:	2b03      	cmp	r3, #3
 800184e:	d101      	bne.n	8001854 <HAL_LPTIM_TimeOut_Start_IT+0x9c>
  {
    return HAL_TIMEOUT;
 8001850:	2303      	movs	r3, #3
 8001852:	e027      	b.n	80018a4 <HAL_LPTIM_TimeOut_Start_IT+0xec>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 8001854:	68f8      	ldr	r0, [r7, #12]
 8001856:	f000 f943 	bl	8001ae0 <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 800185a:	68f8      	ldr	r0, [r7, #12]
 800185c:	f000 f901 	bl	8001a62 <HAL_LPTIM_GetState>
 8001860:	4603      	mov	r3, r0
 8001862:	2b03      	cmp	r3, #3
 8001864:	d101      	bne.n	800186a <HAL_LPTIM_TimeOut_Start_IT+0xb2>
  {
    return HAL_TIMEOUT;
 8001866:	2303      	movs	r3, #3
 8001868:	e01c      	b.n	80018a4 <HAL_LPTIM_TimeOut_Start_IT+0xec>
  }

  /* Enable Compare match interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_CMPM);
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	689a      	ldr	r2, [r3, #8]
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f042 0201 	orr.w	r2, r2, #1
 8001878:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	691a      	ldr	r2, [r3, #16]
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f042 0201 	orr.w	r2, r2, #1
 8001888:	611a      	str	r2, [r3, #16]

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	691a      	ldr	r2, [r3, #16]
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f042 0204 	orr.w	r2, r2, #4
 8001898:	611a      	str	r2, [r3, #16]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	2201      	movs	r2, #1
 800189e:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 80018a2:	2300      	movs	r3, #0
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	3710      	adds	r7, #16
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	40007c00 	.word	0x40007c00
 80018b0:	40010400 	.word	0x40010400

080018b4 <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f003 0301 	and.w	r3, r3, #1
 80018c6:	2b01      	cmp	r3, #1
 80018c8:	d10d      	bne.n	80018e6 <HAL_LPTIM_IRQHandler+0x32>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	f003 0301 	and.w	r3, r3, #1
 80018d4:	2b01      	cmp	r3, #1
 80018d6:	d106      	bne.n	80018e6 <HAL_LPTIM_IRQHandler+0x32>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	2201      	movs	r2, #1
 80018de:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
#else
      HAL_LPTIM_CompareMatchCallback(hlptim);
 80018e0:	6878      	ldr	r0, [r7, #4]
 80018e2:	f7fe ffcf 	bl	8000884 <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f003 0302 	and.w	r3, r3, #2
 80018f0:	2b02      	cmp	r3, #2
 80018f2:	d10d      	bne.n	8001910 <HAL_LPTIM_IRQHandler+0x5c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	f003 0302 	and.w	r3, r3, #2
 80018fe:	2b02      	cmp	r3, #2
 8001900:	d106      	bne.n	8001910 <HAL_LPTIM_IRQHandler+0x5c>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	2202      	movs	r2, #2
 8001908:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 800190a:	6878      	ldr	r0, [r7, #4]
 800190c:	f000 f86d 	bl	80019ea <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f003 0304 	and.w	r3, r3, #4
 800191a:	2b04      	cmp	r3, #4
 800191c:	d10d      	bne.n	800193a <HAL_LPTIM_IRQHandler+0x86>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	689b      	ldr	r3, [r3, #8]
 8001924:	f003 0304 	and.w	r3, r3, #4
 8001928:	2b04      	cmp	r3, #4
 800192a:	d106      	bne.n	800193a <HAL_LPTIM_IRQHandler+0x86>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	2204      	movs	r2, #4
 8001932:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 8001934:	6878      	ldr	r0, [r7, #4]
 8001936:	f000 f862 	bl	80019fe <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f003 0308 	and.w	r3, r3, #8
 8001944:	2b08      	cmp	r3, #8
 8001946:	d10d      	bne.n	8001964 <HAL_LPTIM_IRQHandler+0xb0>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	689b      	ldr	r3, [r3, #8]
 800194e:	f003 0308 	and.w	r3, r3, #8
 8001952:	2b08      	cmp	r3, #8
 8001954:	d106      	bne.n	8001964 <HAL_LPTIM_IRQHandler+0xb0>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	2208      	movs	r2, #8
 800195c:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 800195e:	6878      	ldr	r0, [r7, #4]
 8001960:	f000 f857 	bl	8001a12 <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f003 0310 	and.w	r3, r3, #16
 800196e:	2b10      	cmp	r3, #16
 8001970:	d10d      	bne.n	800198e <HAL_LPTIM_IRQHandler+0xda>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	f003 0310 	and.w	r3, r3, #16
 800197c:	2b10      	cmp	r3, #16
 800197e:	d106      	bne.n	800198e <HAL_LPTIM_IRQHandler+0xda>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	2210      	movs	r2, #16
 8001986:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 8001988:	6878      	ldr	r0, [r7, #4]
 800198a:	f000 f84c 	bl	8001a26 <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f003 0320 	and.w	r3, r3, #32
 8001998:	2b20      	cmp	r3, #32
 800199a:	d10d      	bne.n	80019b8 <HAL_LPTIM_IRQHandler+0x104>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	f003 0320 	and.w	r3, r3, #32
 80019a6:	2b20      	cmp	r3, #32
 80019a8:	d106      	bne.n	80019b8 <HAL_LPTIM_IRQHandler+0x104>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	2220      	movs	r2, #32
 80019b0:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 80019b2:	6878      	ldr	r0, [r7, #4]
 80019b4:	f000 f841 	bl	8001a3a <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019c2:	2b40      	cmp	r3, #64	; 0x40
 80019c4:	d10d      	bne.n	80019e2 <HAL_LPTIM_IRQHandler+0x12e>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019d0:	2b40      	cmp	r3, #64	; 0x40
 80019d2:	d106      	bne.n	80019e2 <HAL_LPTIM_IRQHandler+0x12e>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	2240      	movs	r2, #64	; 0x40
 80019da:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 80019dc:	6878      	ldr	r0, [r7, #4]
 80019de:	f000 f836 	bl	8001a4e <HAL_LPTIM_DirectionDownCallback>
      HAL_LPTIM_RepCounterWriteCallback(hlptim);
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
#endif
}
 80019e2:	bf00      	nop
 80019e4:	3708      	adds	r7, #8
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}

080019ea <HAL_LPTIM_AutoReloadMatchCallback>:
  * @brief  Autoreload match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 80019ea:	b480      	push	{r7}
 80019ec:	b083      	sub	sp, #12
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadMatchCallback could be implemented in the user file
   */
}
 80019f2:	bf00      	nop
 80019f4:	370c      	adds	r7, #12
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr

080019fe <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 80019fe:	b480      	push	{r7}
 8001a00:	b083      	sub	sp, #12
 8001a02:	af00      	add	r7, sp, #0
 8001a04:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 8001a06:	bf00      	nop
 8001a08:	370c      	adds	r7, #12
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr

08001a12 <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8001a12:	b480      	push	{r7}
 8001a14:	b083      	sub	sp, #12
 8001a16:	af00      	add	r7, sp, #0
 8001a18:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 8001a1a:	bf00      	nop
 8001a1c:	370c      	adds	r7, #12
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr

08001a26 <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8001a26:	b480      	push	{r7}
 8001a28:	b083      	sub	sp, #12
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 8001a2e:	bf00      	nop
 8001a30:	370c      	adds	r7, #12
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr

08001a3a <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 8001a3a:	b480      	push	{r7}
 8001a3c:	b083      	sub	sp, #12
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 8001a42:	bf00      	nop
 8001a44:	370c      	adds	r7, #12
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr

08001a4e <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 8001a4e:	b480      	push	{r7}
 8001a50:	b083      	sub	sp, #12
 8001a52:	af00      	add	r7, sp, #0
 8001a54:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 8001a56:	bf00      	nop
 8001a58:	370c      	adds	r7, #12
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr

08001a62 <HAL_LPTIM_GetState>:
  * @brief  Return the LPTIM handle state.
  * @param  hlptim LPTIM handle
  * @retval HAL state
  */
HAL_LPTIM_StateTypeDef HAL_LPTIM_GetState(LPTIM_HandleTypeDef *hlptim)
{
 8001a62:	b480      	push	{r7}
 8001a64:	b083      	sub	sp, #12
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	6078      	str	r0, [r7, #4]
  /* Return LPTIM handle state */
  return hlptim->State;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8001a70:	b2db      	uxtb	r3, r3
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	370c      	adds	r7, #12
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr
	...

08001a80 <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b085      	sub	sp, #20
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
 8001a88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	73fb      	strb	r3, [r7, #15]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 8001a8e:	4b12      	ldr	r3, [pc, #72]	; (8001ad8 <LPTIM_WaitForFlag+0x58>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4a12      	ldr	r2, [pc, #72]	; (8001adc <LPTIM_WaitForFlag+0x5c>)
 8001a94:	fba2 2303 	umull	r2, r3, r2, r3
 8001a98:	0b9b      	lsrs	r3, r3, #14
 8001a9a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001a9e:	fb02 f303 	mul.w	r3, r2, r3
 8001aa2:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	3b01      	subs	r3, #1
 8001aa8:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 8001aaa:	68bb      	ldr	r3, [r7, #8]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d101      	bne.n	8001ab4 <LPTIM_WaitForFlag+0x34>
    {
      result = HAL_TIMEOUT;
 8001ab0:	2303      	movs	r3, #3
 8001ab2:	73fb      	strb	r3, [r7, #15]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	681a      	ldr	r2, [r3, #0]
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	4013      	ands	r3, r2
 8001abe:	683a      	ldr	r2, [r7, #0]
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	d002      	beq.n	8001aca <LPTIM_WaitForFlag+0x4a>
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d1ec      	bne.n	8001aa4 <LPTIM_WaitForFlag+0x24>

  return result;
 8001aca:	7bfb      	ldrb	r3, [r7, #15]
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	3714      	adds	r7, #20
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr
 8001ad8:	20000000 	.word	0x20000000
 8001adc:	d1b71759 	.word	0xd1b71759

08001ae0 <LPTIM_Disable>:
  *         Please check Errata Sheet ES0335 for more details under "MCU may remain
  *         stuck in LPTIM interrupt when entering Stop mode" section.
  * @retval None
  */
void LPTIM_Disable(LPTIM_HandleTypeDef *hlptim)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b08c      	sub	sp, #48	; 0x30
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  uint32_t tmpclksource = 0;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	62fb      	str	r3, [r7, #44]	; 0x2c
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001aec:	f3ef 8310 	mrs	r3, PRIMASK
 8001af0:	60fb      	str	r3, [r7, #12]
  return(result);
 8001af2:	68fb      	ldr	r3, [r7, #12]
#if defined(LPTIM_RCR_REP)
  uint32_t tmpRCR;
#endif

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8001af4:	62bb      	str	r3, [r7, #40]	; 0x28
 8001af6:	2301      	movs	r3, #1
 8001af8:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	f383 8810 	msr	PRIMASK, r3
}
 8001b00:	bf00      	nop
  __set_PRIMASK(1) ;

  /*********** Save LPTIM Config ***********/
  /* Save LPTIM source clock */
  switch ((uint32_t)hlptim->Instance)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a73      	ldr	r2, [pc, #460]	; (8001cd4 <LPTIM_Disable+0x1f4>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d003      	beq.n	8001b14 <LPTIM_Disable+0x34>
 8001b0c:	4a72      	ldr	r2, [pc, #456]	; (8001cd8 <LPTIM_Disable+0x1f8>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d007      	beq.n	8001b22 <LPTIM_Disable+0x42>
    case LPTIM2_BASE:
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
      break;
#endif /* LPTIM2 */
    default:
      break;
 8001b12:	e00d      	b.n	8001b30 <LPTIM_Disable+0x50>
      tmpclksource = __HAL_RCC_GET_LPTIM1_SOURCE();
 8001b14:	4b71      	ldr	r3, [pc, #452]	; (8001cdc <LPTIM_Disable+0x1fc>)
 8001b16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b1a:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8001b1e:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8001b20:	e006      	b.n	8001b30 <LPTIM_Disable+0x50>
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
 8001b22:	4b6e      	ldr	r3, [pc, #440]	; (8001cdc <LPTIM_Disable+0x1fc>)
 8001b24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b28:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001b2c:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8001b2e:	bf00      	nop
  }

  /* Save LPTIM configuration registers */
  tmpIER = hlptim->Instance->IER;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	689b      	ldr	r3, [r3, #8]
 8001b36:	627b      	str	r3, [r7, #36]	; 0x24
  tmpCFGR = hlptim->Instance->CFGR;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	68db      	ldr	r3, [r3, #12]
 8001b3e:	623b      	str	r3, [r7, #32]
  tmpCMP = hlptim->Instance->CMP;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	695b      	ldr	r3, [r3, #20]
 8001b46:	61fb      	str	r3, [r7, #28]
  tmpARR = hlptim->Instance->ARR;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	699b      	ldr	r3, [r3, #24]
 8001b4e:	61bb      	str	r3, [r7, #24]
  tmpOR = hlptim->Instance->OR;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	6a1b      	ldr	r3, [r3, #32]
 8001b56:	617b      	str	r3, [r7, #20]
#if defined(LPTIM_RCR_REP)
  tmpRCR = hlptim->Instance->RCR;
#endif

  /*********** Reset LPTIM ***********/
  switch ((uint32_t)hlptim->Instance)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a5d      	ldr	r2, [pc, #372]	; (8001cd4 <LPTIM_Disable+0x1f4>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d003      	beq.n	8001b6a <LPTIM_Disable+0x8a>
 8001b62:	4a5d      	ldr	r2, [pc, #372]	; (8001cd8 <LPTIM_Disable+0x1f8>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d00d      	beq.n	8001b84 <LPTIM_Disable+0xa4>
      __HAL_RCC_LPTIM2_FORCE_RESET();
      __HAL_RCC_LPTIM2_RELEASE_RESET();
      break;
#endif /* LPTIM2 */
    default:
      break;
 8001b68:	e019      	b.n	8001b9e <LPTIM_Disable+0xbe>
      __HAL_RCC_LPTIM1_FORCE_RESET();
 8001b6a:	4b5c      	ldr	r3, [pc, #368]	; (8001cdc <LPTIM_Disable+0x1fc>)
 8001b6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b6e:	4a5b      	ldr	r2, [pc, #364]	; (8001cdc <LPTIM_Disable+0x1fc>)
 8001b70:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001b74:	6393      	str	r3, [r2, #56]	; 0x38
      __HAL_RCC_LPTIM1_RELEASE_RESET();
 8001b76:	4b59      	ldr	r3, [pc, #356]	; (8001cdc <LPTIM_Disable+0x1fc>)
 8001b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b7a:	4a58      	ldr	r2, [pc, #352]	; (8001cdc <LPTIM_Disable+0x1fc>)
 8001b7c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001b80:	6393      	str	r3, [r2, #56]	; 0x38
      break;
 8001b82:	e00c      	b.n	8001b9e <LPTIM_Disable+0xbe>
      __HAL_RCC_LPTIM2_FORCE_RESET();
 8001b84:	4b55      	ldr	r3, [pc, #340]	; (8001cdc <LPTIM_Disable+0x1fc>)
 8001b86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b88:	4a54      	ldr	r2, [pc, #336]	; (8001cdc <LPTIM_Disable+0x1fc>)
 8001b8a:	f043 0320 	orr.w	r3, r3, #32
 8001b8e:	63d3      	str	r3, [r2, #60]	; 0x3c
      __HAL_RCC_LPTIM2_RELEASE_RESET();
 8001b90:	4b52      	ldr	r3, [pc, #328]	; (8001cdc <LPTIM_Disable+0x1fc>)
 8001b92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b94:	4a51      	ldr	r2, [pc, #324]	; (8001cdc <LPTIM_Disable+0x1fc>)
 8001b96:	f023 0320 	bic.w	r3, r3, #32
 8001b9a:	63d3      	str	r3, [r2, #60]	; 0x3c
      break;
 8001b9c:	bf00      	nop

  /*********** Restore LPTIM Config ***********/
#if defined(LPTIM_RCR_REP)
  if ((tmpCMP != 0UL) || (tmpARR != 0UL) || (tmpRCR != 0UL))
#else
  if ((tmpCMP != 0UL) || (tmpARR != 0UL))
 8001b9e:	69fb      	ldr	r3, [r7, #28]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d102      	bne.n	8001baa <LPTIM_Disable+0xca>
 8001ba4:	69bb      	ldr	r3, [r7, #24]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d075      	beq.n	8001c96 <LPTIM_Disable+0x1b6>
#endif
  {
    /* Force LPTIM source kernel clock from APB */
    switch ((uint32_t)hlptim->Instance)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a49      	ldr	r2, [pc, #292]	; (8001cd4 <LPTIM_Disable+0x1f4>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d003      	beq.n	8001bbc <LPTIM_Disable+0xdc>
 8001bb4:	4a48      	ldr	r2, [pc, #288]	; (8001cd8 <LPTIM_Disable+0x1f8>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d009      	beq.n	8001bce <LPTIM_Disable+0xee>
      case LPTIM2_BASE:
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_PCLK1);
        break;
#endif /* LPTIM2 */
      default:
        break;
 8001bba:	e011      	b.n	8001be0 <LPTIM_Disable+0x100>
        __HAL_RCC_LPTIM1_CONFIG(RCC_LPTIM1CLKSOURCE_PCLK1);
 8001bbc:	4b47      	ldr	r3, [pc, #284]	; (8001cdc <LPTIM_Disable+0x1fc>)
 8001bbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bc2:	4a46      	ldr	r2, [pc, #280]	; (8001cdc <LPTIM_Disable+0x1fc>)
 8001bc4:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8001bc8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
        break;
 8001bcc:	e008      	b.n	8001be0 <LPTIM_Disable+0x100>
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_PCLK1);
 8001bce:	4b43      	ldr	r3, [pc, #268]	; (8001cdc <LPTIM_Disable+0x1fc>)
 8001bd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bd4:	4a41      	ldr	r2, [pc, #260]	; (8001cdc <LPTIM_Disable+0x1fc>)
 8001bd6:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8001bda:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
        break;
 8001bde:	bf00      	nop
    }

    if (tmpCMP != 0UL)
 8001be0:	69fb      	ldr	r3, [r7, #28]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d01a      	beq.n	8001c1c <LPTIM_Disable+0x13c>
    {
      /* Restore CMP register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	691a      	ldr	r2, [r3, #16]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f042 0201 	orr.w	r2, r2, #1
 8001bf4:	611a      	str	r2, [r3, #16]
      hlptim->Instance->CMP = tmpCMP;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	69fa      	ldr	r2, [r7, #28]
 8001bfc:	615a      	str	r2, [r3, #20]

      /* Wait for the completion of the write operation to the LPTIM_CMP register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 8001bfe:	2108      	movs	r1, #8
 8001c00:	6878      	ldr	r0, [r7, #4]
 8001c02:	f7ff ff3d 	bl	8001a80 <LPTIM_WaitForFlag>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2b03      	cmp	r3, #3
 8001c0a:	d103      	bne.n	8001c14 <LPTIM_Disable+0x134>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2203      	movs	r2, #3
 8001c10:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	2208      	movs	r2, #8
 8001c1a:	605a      	str	r2, [r3, #4]
    }

    if (tmpARR != 0UL)
 8001c1c:	69bb      	ldr	r3, [r7, #24]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d01a      	beq.n	8001c58 <LPTIM_Disable+0x178>
    {
      /* Restore ARR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	691a      	ldr	r2, [r3, #16]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f042 0201 	orr.w	r2, r2, #1
 8001c30:	611a      	str	r2, [r3, #16]
      hlptim->Instance->ARR = tmpARR;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	69ba      	ldr	r2, [r7, #24]
 8001c38:	619a      	str	r2, [r3, #24]

      /* Wait for the completion of the write operation to the LPTIM_ARR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8001c3a:	2110      	movs	r1, #16
 8001c3c:	6878      	ldr	r0, [r7, #4]
 8001c3e:	f7ff ff1f 	bl	8001a80 <LPTIM_WaitForFlag>
 8001c42:	4603      	mov	r3, r0
 8001c44:	2b03      	cmp	r3, #3
 8001c46:	d103      	bne.n	8001c50 <LPTIM_Disable+0x170>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2203      	movs	r2, #3
 8001c4c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
      }

      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	2210      	movs	r2, #16
 8001c56:	605a      	str	r2, [r3, #4]
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
    }
#endif

    /* Restore LPTIM source kernel clock */
    switch ((uint32_t)hlptim->Instance)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a1d      	ldr	r2, [pc, #116]	; (8001cd4 <LPTIM_Disable+0x1f4>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d003      	beq.n	8001c6a <LPTIM_Disable+0x18a>
 8001c62:	4a1d      	ldr	r2, [pc, #116]	; (8001cd8 <LPTIM_Disable+0x1f8>)
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d00b      	beq.n	8001c80 <LPTIM_Disable+0x1a0>
      case LPTIM2_BASE:
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
        break;
#endif /* LPTIM2 */
      default:
        break;
 8001c68:	e016      	b.n	8001c98 <LPTIM_Disable+0x1b8>
        __HAL_RCC_LPTIM1_CONFIG(tmpclksource);
 8001c6a:	4b1c      	ldr	r3, [pc, #112]	; (8001cdc <LPTIM_Disable+0x1fc>)
 8001c6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c70:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001c74:	4919      	ldr	r1, [pc, #100]	; (8001cdc <LPTIM_Disable+0x1fc>)
 8001c76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
        break;
 8001c7e:	e00b      	b.n	8001c98 <LPTIM_Disable+0x1b8>
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
 8001c80:	4b16      	ldr	r3, [pc, #88]	; (8001cdc <LPTIM_Disable+0x1fc>)
 8001c82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c86:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001c8a:	4914      	ldr	r1, [pc, #80]	; (8001cdc <LPTIM_Disable+0x1fc>)
 8001c8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
        break;
 8001c94:	e000      	b.n	8001c98 <LPTIM_Disable+0x1b8>
    }
  }
 8001c96:	bf00      	nop

  /* Restore configuration registers (LPTIM should be disabled first) */
  hlptim->Instance->CR &= ~(LPTIM_CR_ENABLE);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	691a      	ldr	r2, [r3, #16]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f022 0201 	bic.w	r2, r2, #1
 8001ca6:	611a      	str	r2, [r3, #16]
  hlptim->Instance->IER = tmpIER;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cae:	609a      	str	r2, [r3, #8]
  hlptim->Instance->CFGR = tmpCFGR;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	6a3a      	ldr	r2, [r7, #32]
 8001cb6:	60da      	str	r2, [r3, #12]
  hlptim->Instance->OR = tmpOR;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	697a      	ldr	r2, [r7, #20]
 8001cbe:	621a      	str	r2, [r3, #32]
 8001cc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cc2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	f383 8810 	msr	PRIMASK, r3
}
 8001cca:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8001ccc:	bf00      	nop
 8001cce:	3730      	adds	r7, #48	; 0x30
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}
 8001cd4:	40007c00 	.word	0x40007c00
 8001cd8:	40009400 	.word	0x40009400
 8001cdc:	40021000 	.word	0x40021000

08001ce0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001ce4:	4b04      	ldr	r3, [pc, #16]	; (8001cf8 <HAL_PWREx_GetVoltageRange+0x18>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr
 8001cf6:	bf00      	nop
 8001cf8:	40007000 	.word	0x40007000

08001cfc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b085      	sub	sp, #20
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d0a:	d130      	bne.n	8001d6e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d0c:	4b23      	ldr	r3, [pc, #140]	; (8001d9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001d14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d18:	d038      	beq.n	8001d8c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d1a:	4b20      	ldr	r3, [pc, #128]	; (8001d9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001d22:	4a1e      	ldr	r2, [pc, #120]	; (8001d9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d24:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d28:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001d2a:	4b1d      	ldr	r3, [pc, #116]	; (8001da0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	2232      	movs	r2, #50	; 0x32
 8001d30:	fb02 f303 	mul.w	r3, r2, r3
 8001d34:	4a1b      	ldr	r2, [pc, #108]	; (8001da4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001d36:	fba2 2303 	umull	r2, r3, r2, r3
 8001d3a:	0c9b      	lsrs	r3, r3, #18
 8001d3c:	3301      	adds	r3, #1
 8001d3e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d40:	e002      	b.n	8001d48 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	3b01      	subs	r3, #1
 8001d46:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d48:	4b14      	ldr	r3, [pc, #80]	; (8001d9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d4a:	695b      	ldr	r3, [r3, #20]
 8001d4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d54:	d102      	bne.n	8001d5c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d1f2      	bne.n	8001d42 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001d5c:	4b0f      	ldr	r3, [pc, #60]	; (8001d9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d5e:	695b      	ldr	r3, [r3, #20]
 8001d60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d68:	d110      	bne.n	8001d8c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	e00f      	b.n	8001d8e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001d6e:	4b0b      	ldr	r3, [pc, #44]	; (8001d9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001d76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d7a:	d007      	beq.n	8001d8c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001d7c:	4b07      	ldr	r3, [pc, #28]	; (8001d9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001d84:	4a05      	ldr	r2, [pc, #20]	; (8001d9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d86:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d8a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001d8c:	2300      	movs	r3, #0
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3714      	adds	r7, #20
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr
 8001d9a:	bf00      	nop
 8001d9c:	40007000 	.word	0x40007000
 8001da0:	20000000 	.word	0x20000000
 8001da4:	431bde83 	.word	0x431bde83

08001da8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b088      	sub	sp, #32
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d102      	bne.n	8001dbc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
 8001db8:	f000 bc02 	b.w	80025c0 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001dbc:	4b96      	ldr	r3, [pc, #600]	; (8002018 <HAL_RCC_OscConfig+0x270>)
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	f003 030c 	and.w	r3, r3, #12
 8001dc4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001dc6:	4b94      	ldr	r3, [pc, #592]	; (8002018 <HAL_RCC_OscConfig+0x270>)
 8001dc8:	68db      	ldr	r3, [r3, #12]
 8001dca:	f003 0303 	and.w	r3, r3, #3
 8001dce:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f003 0310 	and.w	r3, r3, #16
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	f000 80e4 	beq.w	8001fa6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001dde:	69bb      	ldr	r3, [r7, #24]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d007      	beq.n	8001df4 <HAL_RCC_OscConfig+0x4c>
 8001de4:	69bb      	ldr	r3, [r7, #24]
 8001de6:	2b0c      	cmp	r3, #12
 8001de8:	f040 808b 	bne.w	8001f02 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	f040 8087 	bne.w	8001f02 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001df4:	4b88      	ldr	r3, [pc, #544]	; (8002018 <HAL_RCC_OscConfig+0x270>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f003 0302 	and.w	r3, r3, #2
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d005      	beq.n	8001e0c <HAL_RCC_OscConfig+0x64>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	699b      	ldr	r3, [r3, #24]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d101      	bne.n	8001e0c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	e3d9      	b.n	80025c0 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6a1a      	ldr	r2, [r3, #32]
 8001e10:	4b81      	ldr	r3, [pc, #516]	; (8002018 <HAL_RCC_OscConfig+0x270>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f003 0308 	and.w	r3, r3, #8
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d004      	beq.n	8001e26 <HAL_RCC_OscConfig+0x7e>
 8001e1c:	4b7e      	ldr	r3, [pc, #504]	; (8002018 <HAL_RCC_OscConfig+0x270>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e24:	e005      	b.n	8001e32 <HAL_RCC_OscConfig+0x8a>
 8001e26:	4b7c      	ldr	r3, [pc, #496]	; (8002018 <HAL_RCC_OscConfig+0x270>)
 8001e28:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e2c:	091b      	lsrs	r3, r3, #4
 8001e2e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d223      	bcs.n	8001e7e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6a1b      	ldr	r3, [r3, #32]
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f000 fd8c 	bl	8002958 <RCC_SetFlashLatencyFromMSIRange>
 8001e40:	4603      	mov	r3, r0
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d001      	beq.n	8001e4a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	e3ba      	b.n	80025c0 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e4a:	4b73      	ldr	r3, [pc, #460]	; (8002018 <HAL_RCC_OscConfig+0x270>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a72      	ldr	r2, [pc, #456]	; (8002018 <HAL_RCC_OscConfig+0x270>)
 8001e50:	f043 0308 	orr.w	r3, r3, #8
 8001e54:	6013      	str	r3, [r2, #0]
 8001e56:	4b70      	ldr	r3, [pc, #448]	; (8002018 <HAL_RCC_OscConfig+0x270>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6a1b      	ldr	r3, [r3, #32]
 8001e62:	496d      	ldr	r1, [pc, #436]	; (8002018 <HAL_RCC_OscConfig+0x270>)
 8001e64:	4313      	orrs	r3, r2
 8001e66:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e68:	4b6b      	ldr	r3, [pc, #428]	; (8002018 <HAL_RCC_OscConfig+0x270>)
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	69db      	ldr	r3, [r3, #28]
 8001e74:	021b      	lsls	r3, r3, #8
 8001e76:	4968      	ldr	r1, [pc, #416]	; (8002018 <HAL_RCC_OscConfig+0x270>)
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	604b      	str	r3, [r1, #4]
 8001e7c:	e025      	b.n	8001eca <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e7e:	4b66      	ldr	r3, [pc, #408]	; (8002018 <HAL_RCC_OscConfig+0x270>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a65      	ldr	r2, [pc, #404]	; (8002018 <HAL_RCC_OscConfig+0x270>)
 8001e84:	f043 0308 	orr.w	r3, r3, #8
 8001e88:	6013      	str	r3, [r2, #0]
 8001e8a:	4b63      	ldr	r3, [pc, #396]	; (8002018 <HAL_RCC_OscConfig+0x270>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6a1b      	ldr	r3, [r3, #32]
 8001e96:	4960      	ldr	r1, [pc, #384]	; (8002018 <HAL_RCC_OscConfig+0x270>)
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e9c:	4b5e      	ldr	r3, [pc, #376]	; (8002018 <HAL_RCC_OscConfig+0x270>)
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	69db      	ldr	r3, [r3, #28]
 8001ea8:	021b      	lsls	r3, r3, #8
 8001eaa:	495b      	ldr	r1, [pc, #364]	; (8002018 <HAL_RCC_OscConfig+0x270>)
 8001eac:	4313      	orrs	r3, r2
 8001eae:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001eb0:	69bb      	ldr	r3, [r7, #24]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d109      	bne.n	8001eca <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6a1b      	ldr	r3, [r3, #32]
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f000 fd4c 	bl	8002958 <RCC_SetFlashLatencyFromMSIRange>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d001      	beq.n	8001eca <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e37a      	b.n	80025c0 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001eca:	f000 fc81 	bl	80027d0 <HAL_RCC_GetSysClockFreq>
 8001ece:	4602      	mov	r2, r0
 8001ed0:	4b51      	ldr	r3, [pc, #324]	; (8002018 <HAL_RCC_OscConfig+0x270>)
 8001ed2:	689b      	ldr	r3, [r3, #8]
 8001ed4:	091b      	lsrs	r3, r3, #4
 8001ed6:	f003 030f 	and.w	r3, r3, #15
 8001eda:	4950      	ldr	r1, [pc, #320]	; (800201c <HAL_RCC_OscConfig+0x274>)
 8001edc:	5ccb      	ldrb	r3, [r1, r3]
 8001ede:	f003 031f 	and.w	r3, r3, #31
 8001ee2:	fa22 f303 	lsr.w	r3, r2, r3
 8001ee6:	4a4e      	ldr	r2, [pc, #312]	; (8002020 <HAL_RCC_OscConfig+0x278>)
 8001ee8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001eea:	4b4e      	ldr	r3, [pc, #312]	; (8002024 <HAL_RCC_OscConfig+0x27c>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f7fe ff76 	bl	8000de0 <HAL_InitTick>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001ef8:	7bfb      	ldrb	r3, [r7, #15]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d052      	beq.n	8001fa4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001efe:	7bfb      	ldrb	r3, [r7, #15]
 8001f00:	e35e      	b.n	80025c0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	699b      	ldr	r3, [r3, #24]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d032      	beq.n	8001f70 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001f0a:	4b43      	ldr	r3, [pc, #268]	; (8002018 <HAL_RCC_OscConfig+0x270>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a42      	ldr	r2, [pc, #264]	; (8002018 <HAL_RCC_OscConfig+0x270>)
 8001f10:	f043 0301 	orr.w	r3, r3, #1
 8001f14:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001f16:	f7fe ffb3 	bl	8000e80 <HAL_GetTick>
 8001f1a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f1c:	e008      	b.n	8001f30 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001f1e:	f7fe ffaf 	bl	8000e80 <HAL_GetTick>
 8001f22:	4602      	mov	r2, r0
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	1ad3      	subs	r3, r2, r3
 8001f28:	2b02      	cmp	r3, #2
 8001f2a:	d901      	bls.n	8001f30 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001f2c:	2303      	movs	r3, #3
 8001f2e:	e347      	b.n	80025c0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f30:	4b39      	ldr	r3, [pc, #228]	; (8002018 <HAL_RCC_OscConfig+0x270>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f003 0302 	and.w	r3, r3, #2
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d0f0      	beq.n	8001f1e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f3c:	4b36      	ldr	r3, [pc, #216]	; (8002018 <HAL_RCC_OscConfig+0x270>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a35      	ldr	r2, [pc, #212]	; (8002018 <HAL_RCC_OscConfig+0x270>)
 8001f42:	f043 0308 	orr.w	r3, r3, #8
 8001f46:	6013      	str	r3, [r2, #0]
 8001f48:	4b33      	ldr	r3, [pc, #204]	; (8002018 <HAL_RCC_OscConfig+0x270>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6a1b      	ldr	r3, [r3, #32]
 8001f54:	4930      	ldr	r1, [pc, #192]	; (8002018 <HAL_RCC_OscConfig+0x270>)
 8001f56:	4313      	orrs	r3, r2
 8001f58:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f5a:	4b2f      	ldr	r3, [pc, #188]	; (8002018 <HAL_RCC_OscConfig+0x270>)
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	69db      	ldr	r3, [r3, #28]
 8001f66:	021b      	lsls	r3, r3, #8
 8001f68:	492b      	ldr	r1, [pc, #172]	; (8002018 <HAL_RCC_OscConfig+0x270>)
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	604b      	str	r3, [r1, #4]
 8001f6e:	e01a      	b.n	8001fa6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001f70:	4b29      	ldr	r3, [pc, #164]	; (8002018 <HAL_RCC_OscConfig+0x270>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a28      	ldr	r2, [pc, #160]	; (8002018 <HAL_RCC_OscConfig+0x270>)
 8001f76:	f023 0301 	bic.w	r3, r3, #1
 8001f7a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001f7c:	f7fe ff80 	bl	8000e80 <HAL_GetTick>
 8001f80:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001f82:	e008      	b.n	8001f96 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001f84:	f7fe ff7c 	bl	8000e80 <HAL_GetTick>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	1ad3      	subs	r3, r2, r3
 8001f8e:	2b02      	cmp	r3, #2
 8001f90:	d901      	bls.n	8001f96 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001f92:	2303      	movs	r3, #3
 8001f94:	e314      	b.n	80025c0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001f96:	4b20      	ldr	r3, [pc, #128]	; (8002018 <HAL_RCC_OscConfig+0x270>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f003 0302 	and.w	r3, r3, #2
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d1f0      	bne.n	8001f84 <HAL_RCC_OscConfig+0x1dc>
 8001fa2:	e000      	b.n	8001fa6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001fa4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f003 0301 	and.w	r3, r3, #1
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d073      	beq.n	800209a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001fb2:	69bb      	ldr	r3, [r7, #24]
 8001fb4:	2b08      	cmp	r3, #8
 8001fb6:	d005      	beq.n	8001fc4 <HAL_RCC_OscConfig+0x21c>
 8001fb8:	69bb      	ldr	r3, [r7, #24]
 8001fba:	2b0c      	cmp	r3, #12
 8001fbc:	d10e      	bne.n	8001fdc <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	2b03      	cmp	r3, #3
 8001fc2:	d10b      	bne.n	8001fdc <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fc4:	4b14      	ldr	r3, [pc, #80]	; (8002018 <HAL_RCC_OscConfig+0x270>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d063      	beq.n	8002098 <HAL_RCC_OscConfig+0x2f0>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d15f      	bne.n	8002098 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	e2f1      	b.n	80025c0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fe4:	d106      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x24c>
 8001fe6:	4b0c      	ldr	r3, [pc, #48]	; (8002018 <HAL_RCC_OscConfig+0x270>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a0b      	ldr	r2, [pc, #44]	; (8002018 <HAL_RCC_OscConfig+0x270>)
 8001fec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ff0:	6013      	str	r3, [r2, #0]
 8001ff2:	e025      	b.n	8002040 <HAL_RCC_OscConfig+0x298>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ffc:	d114      	bne.n	8002028 <HAL_RCC_OscConfig+0x280>
 8001ffe:	4b06      	ldr	r3, [pc, #24]	; (8002018 <HAL_RCC_OscConfig+0x270>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a05      	ldr	r2, [pc, #20]	; (8002018 <HAL_RCC_OscConfig+0x270>)
 8002004:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002008:	6013      	str	r3, [r2, #0]
 800200a:	4b03      	ldr	r3, [pc, #12]	; (8002018 <HAL_RCC_OscConfig+0x270>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a02      	ldr	r2, [pc, #8]	; (8002018 <HAL_RCC_OscConfig+0x270>)
 8002010:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002014:	6013      	str	r3, [r2, #0]
 8002016:	e013      	b.n	8002040 <HAL_RCC_OscConfig+0x298>
 8002018:	40021000 	.word	0x40021000
 800201c:	08004b78 	.word	0x08004b78
 8002020:	20000000 	.word	0x20000000
 8002024:	20000004 	.word	0x20000004
 8002028:	4ba0      	ldr	r3, [pc, #640]	; (80022ac <HAL_RCC_OscConfig+0x504>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a9f      	ldr	r2, [pc, #636]	; (80022ac <HAL_RCC_OscConfig+0x504>)
 800202e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002032:	6013      	str	r3, [r2, #0]
 8002034:	4b9d      	ldr	r3, [pc, #628]	; (80022ac <HAL_RCC_OscConfig+0x504>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a9c      	ldr	r2, [pc, #624]	; (80022ac <HAL_RCC_OscConfig+0x504>)
 800203a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800203e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d013      	beq.n	8002070 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002048:	f7fe ff1a 	bl	8000e80 <HAL_GetTick>
 800204c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800204e:	e008      	b.n	8002062 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002050:	f7fe ff16 	bl	8000e80 <HAL_GetTick>
 8002054:	4602      	mov	r2, r0
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	1ad3      	subs	r3, r2, r3
 800205a:	2b64      	cmp	r3, #100	; 0x64
 800205c:	d901      	bls.n	8002062 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800205e:	2303      	movs	r3, #3
 8002060:	e2ae      	b.n	80025c0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002062:	4b92      	ldr	r3, [pc, #584]	; (80022ac <HAL_RCC_OscConfig+0x504>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800206a:	2b00      	cmp	r3, #0
 800206c:	d0f0      	beq.n	8002050 <HAL_RCC_OscConfig+0x2a8>
 800206e:	e014      	b.n	800209a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002070:	f7fe ff06 	bl	8000e80 <HAL_GetTick>
 8002074:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002076:	e008      	b.n	800208a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002078:	f7fe ff02 	bl	8000e80 <HAL_GetTick>
 800207c:	4602      	mov	r2, r0
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	1ad3      	subs	r3, r2, r3
 8002082:	2b64      	cmp	r3, #100	; 0x64
 8002084:	d901      	bls.n	800208a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002086:	2303      	movs	r3, #3
 8002088:	e29a      	b.n	80025c0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800208a:	4b88      	ldr	r3, [pc, #544]	; (80022ac <HAL_RCC_OscConfig+0x504>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002092:	2b00      	cmp	r3, #0
 8002094:	d1f0      	bne.n	8002078 <HAL_RCC_OscConfig+0x2d0>
 8002096:	e000      	b.n	800209a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002098:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f003 0302 	and.w	r3, r3, #2
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d060      	beq.n	8002168 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80020a6:	69bb      	ldr	r3, [r7, #24]
 80020a8:	2b04      	cmp	r3, #4
 80020aa:	d005      	beq.n	80020b8 <HAL_RCC_OscConfig+0x310>
 80020ac:	69bb      	ldr	r3, [r7, #24]
 80020ae:	2b0c      	cmp	r3, #12
 80020b0:	d119      	bne.n	80020e6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	2b02      	cmp	r3, #2
 80020b6:	d116      	bne.n	80020e6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80020b8:	4b7c      	ldr	r3, [pc, #496]	; (80022ac <HAL_RCC_OscConfig+0x504>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d005      	beq.n	80020d0 <HAL_RCC_OscConfig+0x328>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	68db      	ldr	r3, [r3, #12]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d101      	bne.n	80020d0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80020cc:	2301      	movs	r3, #1
 80020ce:	e277      	b.n	80025c0 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020d0:	4b76      	ldr	r3, [pc, #472]	; (80022ac <HAL_RCC_OscConfig+0x504>)
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	691b      	ldr	r3, [r3, #16]
 80020dc:	061b      	lsls	r3, r3, #24
 80020de:	4973      	ldr	r1, [pc, #460]	; (80022ac <HAL_RCC_OscConfig+0x504>)
 80020e0:	4313      	orrs	r3, r2
 80020e2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80020e4:	e040      	b.n	8002168 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	68db      	ldr	r3, [r3, #12]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d023      	beq.n	8002136 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020ee:	4b6f      	ldr	r3, [pc, #444]	; (80022ac <HAL_RCC_OscConfig+0x504>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a6e      	ldr	r2, [pc, #440]	; (80022ac <HAL_RCC_OscConfig+0x504>)
 80020f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020fa:	f7fe fec1 	bl	8000e80 <HAL_GetTick>
 80020fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002100:	e008      	b.n	8002114 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002102:	f7fe febd 	bl	8000e80 <HAL_GetTick>
 8002106:	4602      	mov	r2, r0
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	1ad3      	subs	r3, r2, r3
 800210c:	2b02      	cmp	r3, #2
 800210e:	d901      	bls.n	8002114 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002110:	2303      	movs	r3, #3
 8002112:	e255      	b.n	80025c0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002114:	4b65      	ldr	r3, [pc, #404]	; (80022ac <HAL_RCC_OscConfig+0x504>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800211c:	2b00      	cmp	r3, #0
 800211e:	d0f0      	beq.n	8002102 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002120:	4b62      	ldr	r3, [pc, #392]	; (80022ac <HAL_RCC_OscConfig+0x504>)
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	691b      	ldr	r3, [r3, #16]
 800212c:	061b      	lsls	r3, r3, #24
 800212e:	495f      	ldr	r1, [pc, #380]	; (80022ac <HAL_RCC_OscConfig+0x504>)
 8002130:	4313      	orrs	r3, r2
 8002132:	604b      	str	r3, [r1, #4]
 8002134:	e018      	b.n	8002168 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002136:	4b5d      	ldr	r3, [pc, #372]	; (80022ac <HAL_RCC_OscConfig+0x504>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a5c      	ldr	r2, [pc, #368]	; (80022ac <HAL_RCC_OscConfig+0x504>)
 800213c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002140:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002142:	f7fe fe9d 	bl	8000e80 <HAL_GetTick>
 8002146:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002148:	e008      	b.n	800215c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800214a:	f7fe fe99 	bl	8000e80 <HAL_GetTick>
 800214e:	4602      	mov	r2, r0
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	1ad3      	subs	r3, r2, r3
 8002154:	2b02      	cmp	r3, #2
 8002156:	d901      	bls.n	800215c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002158:	2303      	movs	r3, #3
 800215a:	e231      	b.n	80025c0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800215c:	4b53      	ldr	r3, [pc, #332]	; (80022ac <HAL_RCC_OscConfig+0x504>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002164:	2b00      	cmp	r3, #0
 8002166:	d1f0      	bne.n	800214a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f003 0308 	and.w	r3, r3, #8
 8002170:	2b00      	cmp	r3, #0
 8002172:	d03c      	beq.n	80021ee <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	695b      	ldr	r3, [r3, #20]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d01c      	beq.n	80021b6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800217c:	4b4b      	ldr	r3, [pc, #300]	; (80022ac <HAL_RCC_OscConfig+0x504>)
 800217e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002182:	4a4a      	ldr	r2, [pc, #296]	; (80022ac <HAL_RCC_OscConfig+0x504>)
 8002184:	f043 0301 	orr.w	r3, r3, #1
 8002188:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800218c:	f7fe fe78 	bl	8000e80 <HAL_GetTick>
 8002190:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002192:	e008      	b.n	80021a6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002194:	f7fe fe74 	bl	8000e80 <HAL_GetTick>
 8002198:	4602      	mov	r2, r0
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	1ad3      	subs	r3, r2, r3
 800219e:	2b02      	cmp	r3, #2
 80021a0:	d901      	bls.n	80021a6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80021a2:	2303      	movs	r3, #3
 80021a4:	e20c      	b.n	80025c0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80021a6:	4b41      	ldr	r3, [pc, #260]	; (80022ac <HAL_RCC_OscConfig+0x504>)
 80021a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021ac:	f003 0302 	and.w	r3, r3, #2
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d0ef      	beq.n	8002194 <HAL_RCC_OscConfig+0x3ec>
 80021b4:	e01b      	b.n	80021ee <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021b6:	4b3d      	ldr	r3, [pc, #244]	; (80022ac <HAL_RCC_OscConfig+0x504>)
 80021b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021bc:	4a3b      	ldr	r2, [pc, #236]	; (80022ac <HAL_RCC_OscConfig+0x504>)
 80021be:	f023 0301 	bic.w	r3, r3, #1
 80021c2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021c6:	f7fe fe5b 	bl	8000e80 <HAL_GetTick>
 80021ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80021cc:	e008      	b.n	80021e0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021ce:	f7fe fe57 	bl	8000e80 <HAL_GetTick>
 80021d2:	4602      	mov	r2, r0
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	1ad3      	subs	r3, r2, r3
 80021d8:	2b02      	cmp	r3, #2
 80021da:	d901      	bls.n	80021e0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80021dc:	2303      	movs	r3, #3
 80021de:	e1ef      	b.n	80025c0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80021e0:	4b32      	ldr	r3, [pc, #200]	; (80022ac <HAL_RCC_OscConfig+0x504>)
 80021e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021e6:	f003 0302 	and.w	r3, r3, #2
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d1ef      	bne.n	80021ce <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 0304 	and.w	r3, r3, #4
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	f000 80a6 	beq.w	8002348 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021fc:	2300      	movs	r3, #0
 80021fe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002200:	4b2a      	ldr	r3, [pc, #168]	; (80022ac <HAL_RCC_OscConfig+0x504>)
 8002202:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002204:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002208:	2b00      	cmp	r3, #0
 800220a:	d10d      	bne.n	8002228 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800220c:	4b27      	ldr	r3, [pc, #156]	; (80022ac <HAL_RCC_OscConfig+0x504>)
 800220e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002210:	4a26      	ldr	r2, [pc, #152]	; (80022ac <HAL_RCC_OscConfig+0x504>)
 8002212:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002216:	6593      	str	r3, [r2, #88]	; 0x58
 8002218:	4b24      	ldr	r3, [pc, #144]	; (80022ac <HAL_RCC_OscConfig+0x504>)
 800221a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800221c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002220:	60bb      	str	r3, [r7, #8]
 8002222:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002224:	2301      	movs	r3, #1
 8002226:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002228:	4b21      	ldr	r3, [pc, #132]	; (80022b0 <HAL_RCC_OscConfig+0x508>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002230:	2b00      	cmp	r3, #0
 8002232:	d118      	bne.n	8002266 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002234:	4b1e      	ldr	r3, [pc, #120]	; (80022b0 <HAL_RCC_OscConfig+0x508>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a1d      	ldr	r2, [pc, #116]	; (80022b0 <HAL_RCC_OscConfig+0x508>)
 800223a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800223e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002240:	f7fe fe1e 	bl	8000e80 <HAL_GetTick>
 8002244:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002246:	e008      	b.n	800225a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002248:	f7fe fe1a 	bl	8000e80 <HAL_GetTick>
 800224c:	4602      	mov	r2, r0
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	1ad3      	subs	r3, r2, r3
 8002252:	2b02      	cmp	r3, #2
 8002254:	d901      	bls.n	800225a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002256:	2303      	movs	r3, #3
 8002258:	e1b2      	b.n	80025c0 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800225a:	4b15      	ldr	r3, [pc, #84]	; (80022b0 <HAL_RCC_OscConfig+0x508>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002262:	2b00      	cmp	r3, #0
 8002264:	d0f0      	beq.n	8002248 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	2b01      	cmp	r3, #1
 800226c:	d108      	bne.n	8002280 <HAL_RCC_OscConfig+0x4d8>
 800226e:	4b0f      	ldr	r3, [pc, #60]	; (80022ac <HAL_RCC_OscConfig+0x504>)
 8002270:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002274:	4a0d      	ldr	r2, [pc, #52]	; (80022ac <HAL_RCC_OscConfig+0x504>)
 8002276:	f043 0301 	orr.w	r3, r3, #1
 800227a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800227e:	e029      	b.n	80022d4 <HAL_RCC_OscConfig+0x52c>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	2b05      	cmp	r3, #5
 8002286:	d115      	bne.n	80022b4 <HAL_RCC_OscConfig+0x50c>
 8002288:	4b08      	ldr	r3, [pc, #32]	; (80022ac <HAL_RCC_OscConfig+0x504>)
 800228a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800228e:	4a07      	ldr	r2, [pc, #28]	; (80022ac <HAL_RCC_OscConfig+0x504>)
 8002290:	f043 0304 	orr.w	r3, r3, #4
 8002294:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002298:	4b04      	ldr	r3, [pc, #16]	; (80022ac <HAL_RCC_OscConfig+0x504>)
 800229a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800229e:	4a03      	ldr	r2, [pc, #12]	; (80022ac <HAL_RCC_OscConfig+0x504>)
 80022a0:	f043 0301 	orr.w	r3, r3, #1
 80022a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80022a8:	e014      	b.n	80022d4 <HAL_RCC_OscConfig+0x52c>
 80022aa:	bf00      	nop
 80022ac:	40021000 	.word	0x40021000
 80022b0:	40007000 	.word	0x40007000
 80022b4:	4b9a      	ldr	r3, [pc, #616]	; (8002520 <HAL_RCC_OscConfig+0x778>)
 80022b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022ba:	4a99      	ldr	r2, [pc, #612]	; (8002520 <HAL_RCC_OscConfig+0x778>)
 80022bc:	f023 0301 	bic.w	r3, r3, #1
 80022c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80022c4:	4b96      	ldr	r3, [pc, #600]	; (8002520 <HAL_RCC_OscConfig+0x778>)
 80022c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022ca:	4a95      	ldr	r2, [pc, #596]	; (8002520 <HAL_RCC_OscConfig+0x778>)
 80022cc:	f023 0304 	bic.w	r3, r3, #4
 80022d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d016      	beq.n	800230a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022dc:	f7fe fdd0 	bl	8000e80 <HAL_GetTick>
 80022e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022e2:	e00a      	b.n	80022fa <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022e4:	f7fe fdcc 	bl	8000e80 <HAL_GetTick>
 80022e8:	4602      	mov	r2, r0
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	1ad3      	subs	r3, r2, r3
 80022ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d901      	bls.n	80022fa <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80022f6:	2303      	movs	r3, #3
 80022f8:	e162      	b.n	80025c0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022fa:	4b89      	ldr	r3, [pc, #548]	; (8002520 <HAL_RCC_OscConfig+0x778>)
 80022fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002300:	f003 0302 	and.w	r3, r3, #2
 8002304:	2b00      	cmp	r3, #0
 8002306:	d0ed      	beq.n	80022e4 <HAL_RCC_OscConfig+0x53c>
 8002308:	e015      	b.n	8002336 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800230a:	f7fe fdb9 	bl	8000e80 <HAL_GetTick>
 800230e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002310:	e00a      	b.n	8002328 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002312:	f7fe fdb5 	bl	8000e80 <HAL_GetTick>
 8002316:	4602      	mov	r2, r0
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	1ad3      	subs	r3, r2, r3
 800231c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002320:	4293      	cmp	r3, r2
 8002322:	d901      	bls.n	8002328 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002324:	2303      	movs	r3, #3
 8002326:	e14b      	b.n	80025c0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002328:	4b7d      	ldr	r3, [pc, #500]	; (8002520 <HAL_RCC_OscConfig+0x778>)
 800232a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800232e:	f003 0302 	and.w	r3, r3, #2
 8002332:	2b00      	cmp	r3, #0
 8002334:	d1ed      	bne.n	8002312 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002336:	7ffb      	ldrb	r3, [r7, #31]
 8002338:	2b01      	cmp	r3, #1
 800233a:	d105      	bne.n	8002348 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800233c:	4b78      	ldr	r3, [pc, #480]	; (8002520 <HAL_RCC_OscConfig+0x778>)
 800233e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002340:	4a77      	ldr	r2, [pc, #476]	; (8002520 <HAL_RCC_OscConfig+0x778>)
 8002342:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002346:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 0320 	and.w	r3, r3, #32
 8002350:	2b00      	cmp	r3, #0
 8002352:	d03c      	beq.n	80023ce <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002358:	2b00      	cmp	r3, #0
 800235a:	d01c      	beq.n	8002396 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800235c:	4b70      	ldr	r3, [pc, #448]	; (8002520 <HAL_RCC_OscConfig+0x778>)
 800235e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002362:	4a6f      	ldr	r2, [pc, #444]	; (8002520 <HAL_RCC_OscConfig+0x778>)
 8002364:	f043 0301 	orr.w	r3, r3, #1
 8002368:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800236c:	f7fe fd88 	bl	8000e80 <HAL_GetTick>
 8002370:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002372:	e008      	b.n	8002386 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002374:	f7fe fd84 	bl	8000e80 <HAL_GetTick>
 8002378:	4602      	mov	r2, r0
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	1ad3      	subs	r3, r2, r3
 800237e:	2b02      	cmp	r3, #2
 8002380:	d901      	bls.n	8002386 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002382:	2303      	movs	r3, #3
 8002384:	e11c      	b.n	80025c0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002386:	4b66      	ldr	r3, [pc, #408]	; (8002520 <HAL_RCC_OscConfig+0x778>)
 8002388:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800238c:	f003 0302 	and.w	r3, r3, #2
 8002390:	2b00      	cmp	r3, #0
 8002392:	d0ef      	beq.n	8002374 <HAL_RCC_OscConfig+0x5cc>
 8002394:	e01b      	b.n	80023ce <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002396:	4b62      	ldr	r3, [pc, #392]	; (8002520 <HAL_RCC_OscConfig+0x778>)
 8002398:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800239c:	4a60      	ldr	r2, [pc, #384]	; (8002520 <HAL_RCC_OscConfig+0x778>)
 800239e:	f023 0301 	bic.w	r3, r3, #1
 80023a2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023a6:	f7fe fd6b 	bl	8000e80 <HAL_GetTick>
 80023aa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80023ac:	e008      	b.n	80023c0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80023ae:	f7fe fd67 	bl	8000e80 <HAL_GetTick>
 80023b2:	4602      	mov	r2, r0
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	1ad3      	subs	r3, r2, r3
 80023b8:	2b02      	cmp	r3, #2
 80023ba:	d901      	bls.n	80023c0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80023bc:	2303      	movs	r3, #3
 80023be:	e0ff      	b.n	80025c0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80023c0:	4b57      	ldr	r3, [pc, #348]	; (8002520 <HAL_RCC_OscConfig+0x778>)
 80023c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80023c6:	f003 0302 	and.w	r3, r3, #2
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d1ef      	bne.n	80023ae <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	f000 80f3 	beq.w	80025be <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023dc:	2b02      	cmp	r3, #2
 80023de:	f040 80c9 	bne.w	8002574 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80023e2:	4b4f      	ldr	r3, [pc, #316]	; (8002520 <HAL_RCC_OscConfig+0x778>)
 80023e4:	68db      	ldr	r3, [r3, #12]
 80023e6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	f003 0203 	and.w	r2, r3, #3
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023f2:	429a      	cmp	r2, r3
 80023f4:	d12c      	bne.n	8002450 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002400:	3b01      	subs	r3, #1
 8002402:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002404:	429a      	cmp	r2, r3
 8002406:	d123      	bne.n	8002450 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002412:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002414:	429a      	cmp	r2, r3
 8002416:	d11b      	bne.n	8002450 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002422:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002424:	429a      	cmp	r2, r3
 8002426:	d113      	bne.n	8002450 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002432:	085b      	lsrs	r3, r3, #1
 8002434:	3b01      	subs	r3, #1
 8002436:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002438:	429a      	cmp	r2, r3
 800243a:	d109      	bne.n	8002450 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002446:	085b      	lsrs	r3, r3, #1
 8002448:	3b01      	subs	r3, #1
 800244a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800244c:	429a      	cmp	r2, r3
 800244e:	d06b      	beq.n	8002528 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002450:	69bb      	ldr	r3, [r7, #24]
 8002452:	2b0c      	cmp	r3, #12
 8002454:	d062      	beq.n	800251c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002456:	4b32      	ldr	r3, [pc, #200]	; (8002520 <HAL_RCC_OscConfig+0x778>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800245e:	2b00      	cmp	r3, #0
 8002460:	d001      	beq.n	8002466 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	e0ac      	b.n	80025c0 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002466:	4b2e      	ldr	r3, [pc, #184]	; (8002520 <HAL_RCC_OscConfig+0x778>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a2d      	ldr	r2, [pc, #180]	; (8002520 <HAL_RCC_OscConfig+0x778>)
 800246c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002470:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002472:	f7fe fd05 	bl	8000e80 <HAL_GetTick>
 8002476:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002478:	e008      	b.n	800248c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800247a:	f7fe fd01 	bl	8000e80 <HAL_GetTick>
 800247e:	4602      	mov	r2, r0
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	1ad3      	subs	r3, r2, r3
 8002484:	2b02      	cmp	r3, #2
 8002486:	d901      	bls.n	800248c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002488:	2303      	movs	r3, #3
 800248a:	e099      	b.n	80025c0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800248c:	4b24      	ldr	r3, [pc, #144]	; (8002520 <HAL_RCC_OscConfig+0x778>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002494:	2b00      	cmp	r3, #0
 8002496:	d1f0      	bne.n	800247a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002498:	4b21      	ldr	r3, [pc, #132]	; (8002520 <HAL_RCC_OscConfig+0x778>)
 800249a:	68da      	ldr	r2, [r3, #12]
 800249c:	4b21      	ldr	r3, [pc, #132]	; (8002524 <HAL_RCC_OscConfig+0x77c>)
 800249e:	4013      	ands	r3, r2
 80024a0:	687a      	ldr	r2, [r7, #4]
 80024a2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80024a4:	687a      	ldr	r2, [r7, #4]
 80024a6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80024a8:	3a01      	subs	r2, #1
 80024aa:	0112      	lsls	r2, r2, #4
 80024ac:	4311      	orrs	r1, r2
 80024ae:	687a      	ldr	r2, [r7, #4]
 80024b0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80024b2:	0212      	lsls	r2, r2, #8
 80024b4:	4311      	orrs	r1, r2
 80024b6:	687a      	ldr	r2, [r7, #4]
 80024b8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80024ba:	0852      	lsrs	r2, r2, #1
 80024bc:	3a01      	subs	r2, #1
 80024be:	0552      	lsls	r2, r2, #21
 80024c0:	4311      	orrs	r1, r2
 80024c2:	687a      	ldr	r2, [r7, #4]
 80024c4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80024c6:	0852      	lsrs	r2, r2, #1
 80024c8:	3a01      	subs	r2, #1
 80024ca:	0652      	lsls	r2, r2, #25
 80024cc:	4311      	orrs	r1, r2
 80024ce:	687a      	ldr	r2, [r7, #4]
 80024d0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80024d2:	06d2      	lsls	r2, r2, #27
 80024d4:	430a      	orrs	r2, r1
 80024d6:	4912      	ldr	r1, [pc, #72]	; (8002520 <HAL_RCC_OscConfig+0x778>)
 80024d8:	4313      	orrs	r3, r2
 80024da:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80024dc:	4b10      	ldr	r3, [pc, #64]	; (8002520 <HAL_RCC_OscConfig+0x778>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a0f      	ldr	r2, [pc, #60]	; (8002520 <HAL_RCC_OscConfig+0x778>)
 80024e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80024e6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80024e8:	4b0d      	ldr	r3, [pc, #52]	; (8002520 <HAL_RCC_OscConfig+0x778>)
 80024ea:	68db      	ldr	r3, [r3, #12]
 80024ec:	4a0c      	ldr	r2, [pc, #48]	; (8002520 <HAL_RCC_OscConfig+0x778>)
 80024ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80024f2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80024f4:	f7fe fcc4 	bl	8000e80 <HAL_GetTick>
 80024f8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024fa:	e008      	b.n	800250e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024fc:	f7fe fcc0 	bl	8000e80 <HAL_GetTick>
 8002500:	4602      	mov	r2, r0
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	1ad3      	subs	r3, r2, r3
 8002506:	2b02      	cmp	r3, #2
 8002508:	d901      	bls.n	800250e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800250a:	2303      	movs	r3, #3
 800250c:	e058      	b.n	80025c0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800250e:	4b04      	ldr	r3, [pc, #16]	; (8002520 <HAL_RCC_OscConfig+0x778>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002516:	2b00      	cmp	r3, #0
 8002518:	d0f0      	beq.n	80024fc <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800251a:	e050      	b.n	80025be <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800251c:	2301      	movs	r3, #1
 800251e:	e04f      	b.n	80025c0 <HAL_RCC_OscConfig+0x818>
 8002520:	40021000 	.word	0x40021000
 8002524:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002528:	4b27      	ldr	r3, [pc, #156]	; (80025c8 <HAL_RCC_OscConfig+0x820>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002530:	2b00      	cmp	r3, #0
 8002532:	d144      	bne.n	80025be <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002534:	4b24      	ldr	r3, [pc, #144]	; (80025c8 <HAL_RCC_OscConfig+0x820>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a23      	ldr	r2, [pc, #140]	; (80025c8 <HAL_RCC_OscConfig+0x820>)
 800253a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800253e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002540:	4b21      	ldr	r3, [pc, #132]	; (80025c8 <HAL_RCC_OscConfig+0x820>)
 8002542:	68db      	ldr	r3, [r3, #12]
 8002544:	4a20      	ldr	r2, [pc, #128]	; (80025c8 <HAL_RCC_OscConfig+0x820>)
 8002546:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800254a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800254c:	f7fe fc98 	bl	8000e80 <HAL_GetTick>
 8002550:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002552:	e008      	b.n	8002566 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002554:	f7fe fc94 	bl	8000e80 <HAL_GetTick>
 8002558:	4602      	mov	r2, r0
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	1ad3      	subs	r3, r2, r3
 800255e:	2b02      	cmp	r3, #2
 8002560:	d901      	bls.n	8002566 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8002562:	2303      	movs	r3, #3
 8002564:	e02c      	b.n	80025c0 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002566:	4b18      	ldr	r3, [pc, #96]	; (80025c8 <HAL_RCC_OscConfig+0x820>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800256e:	2b00      	cmp	r3, #0
 8002570:	d0f0      	beq.n	8002554 <HAL_RCC_OscConfig+0x7ac>
 8002572:	e024      	b.n	80025be <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002574:	69bb      	ldr	r3, [r7, #24]
 8002576:	2b0c      	cmp	r3, #12
 8002578:	d01f      	beq.n	80025ba <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800257a:	4b13      	ldr	r3, [pc, #76]	; (80025c8 <HAL_RCC_OscConfig+0x820>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a12      	ldr	r2, [pc, #72]	; (80025c8 <HAL_RCC_OscConfig+0x820>)
 8002580:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002584:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002586:	f7fe fc7b 	bl	8000e80 <HAL_GetTick>
 800258a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800258c:	e008      	b.n	80025a0 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800258e:	f7fe fc77 	bl	8000e80 <HAL_GetTick>
 8002592:	4602      	mov	r2, r0
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	1ad3      	subs	r3, r2, r3
 8002598:	2b02      	cmp	r3, #2
 800259a:	d901      	bls.n	80025a0 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 800259c:	2303      	movs	r3, #3
 800259e:	e00f      	b.n	80025c0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025a0:	4b09      	ldr	r3, [pc, #36]	; (80025c8 <HAL_RCC_OscConfig+0x820>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d1f0      	bne.n	800258e <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80025ac:	4b06      	ldr	r3, [pc, #24]	; (80025c8 <HAL_RCC_OscConfig+0x820>)
 80025ae:	68da      	ldr	r2, [r3, #12]
 80025b0:	4905      	ldr	r1, [pc, #20]	; (80025c8 <HAL_RCC_OscConfig+0x820>)
 80025b2:	4b06      	ldr	r3, [pc, #24]	; (80025cc <HAL_RCC_OscConfig+0x824>)
 80025b4:	4013      	ands	r3, r2
 80025b6:	60cb      	str	r3, [r1, #12]
 80025b8:	e001      	b.n	80025be <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	e000      	b.n	80025c0 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80025be:	2300      	movs	r3, #0
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	3720      	adds	r7, #32
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}
 80025c8:	40021000 	.word	0x40021000
 80025cc:	feeefffc 	.word	0xfeeefffc

080025d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b084      	sub	sp, #16
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
 80025d8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d101      	bne.n	80025e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	e0e7      	b.n	80027b4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80025e4:	4b75      	ldr	r3, [pc, #468]	; (80027bc <HAL_RCC_ClockConfig+0x1ec>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f003 0307 	and.w	r3, r3, #7
 80025ec:	683a      	ldr	r2, [r7, #0]
 80025ee:	429a      	cmp	r2, r3
 80025f0:	d910      	bls.n	8002614 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025f2:	4b72      	ldr	r3, [pc, #456]	; (80027bc <HAL_RCC_ClockConfig+0x1ec>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f023 0207 	bic.w	r2, r3, #7
 80025fa:	4970      	ldr	r1, [pc, #448]	; (80027bc <HAL_RCC_ClockConfig+0x1ec>)
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	4313      	orrs	r3, r2
 8002600:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002602:	4b6e      	ldr	r3, [pc, #440]	; (80027bc <HAL_RCC_ClockConfig+0x1ec>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 0307 	and.w	r3, r3, #7
 800260a:	683a      	ldr	r2, [r7, #0]
 800260c:	429a      	cmp	r2, r3
 800260e:	d001      	beq.n	8002614 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002610:	2301      	movs	r3, #1
 8002612:	e0cf      	b.n	80027b4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f003 0302 	and.w	r3, r3, #2
 800261c:	2b00      	cmp	r3, #0
 800261e:	d010      	beq.n	8002642 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	689a      	ldr	r2, [r3, #8]
 8002624:	4b66      	ldr	r3, [pc, #408]	; (80027c0 <HAL_RCC_ClockConfig+0x1f0>)
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800262c:	429a      	cmp	r2, r3
 800262e:	d908      	bls.n	8002642 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002630:	4b63      	ldr	r3, [pc, #396]	; (80027c0 <HAL_RCC_ClockConfig+0x1f0>)
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	4960      	ldr	r1, [pc, #384]	; (80027c0 <HAL_RCC_ClockConfig+0x1f0>)
 800263e:	4313      	orrs	r3, r2
 8002640:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f003 0301 	and.w	r3, r3, #1
 800264a:	2b00      	cmp	r3, #0
 800264c:	d04c      	beq.n	80026e8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	2b03      	cmp	r3, #3
 8002654:	d107      	bne.n	8002666 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002656:	4b5a      	ldr	r3, [pc, #360]	; (80027c0 <HAL_RCC_ClockConfig+0x1f0>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800265e:	2b00      	cmp	r3, #0
 8002660:	d121      	bne.n	80026a6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	e0a6      	b.n	80027b4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	2b02      	cmp	r3, #2
 800266c:	d107      	bne.n	800267e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800266e:	4b54      	ldr	r3, [pc, #336]	; (80027c0 <HAL_RCC_ClockConfig+0x1f0>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002676:	2b00      	cmp	r3, #0
 8002678:	d115      	bne.n	80026a6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	e09a      	b.n	80027b4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d107      	bne.n	8002696 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002686:	4b4e      	ldr	r3, [pc, #312]	; (80027c0 <HAL_RCC_ClockConfig+0x1f0>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f003 0302 	and.w	r3, r3, #2
 800268e:	2b00      	cmp	r3, #0
 8002690:	d109      	bne.n	80026a6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	e08e      	b.n	80027b4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002696:	4b4a      	ldr	r3, [pc, #296]	; (80027c0 <HAL_RCC_ClockConfig+0x1f0>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d101      	bne.n	80026a6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	e086      	b.n	80027b4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80026a6:	4b46      	ldr	r3, [pc, #280]	; (80027c0 <HAL_RCC_ClockConfig+0x1f0>)
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	f023 0203 	bic.w	r2, r3, #3
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	4943      	ldr	r1, [pc, #268]	; (80027c0 <HAL_RCC_ClockConfig+0x1f0>)
 80026b4:	4313      	orrs	r3, r2
 80026b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026b8:	f7fe fbe2 	bl	8000e80 <HAL_GetTick>
 80026bc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026be:	e00a      	b.n	80026d6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026c0:	f7fe fbde 	bl	8000e80 <HAL_GetTick>
 80026c4:	4602      	mov	r2, r0
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	1ad3      	subs	r3, r2, r3
 80026ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d901      	bls.n	80026d6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80026d2:	2303      	movs	r3, #3
 80026d4:	e06e      	b.n	80027b4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026d6:	4b3a      	ldr	r3, [pc, #232]	; (80027c0 <HAL_RCC_ClockConfig+0x1f0>)
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	f003 020c 	and.w	r2, r3, #12
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	009b      	lsls	r3, r3, #2
 80026e4:	429a      	cmp	r2, r3
 80026e6:	d1eb      	bne.n	80026c0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f003 0302 	and.w	r3, r3, #2
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d010      	beq.n	8002716 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	689a      	ldr	r2, [r3, #8]
 80026f8:	4b31      	ldr	r3, [pc, #196]	; (80027c0 <HAL_RCC_ClockConfig+0x1f0>)
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002700:	429a      	cmp	r2, r3
 8002702:	d208      	bcs.n	8002716 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002704:	4b2e      	ldr	r3, [pc, #184]	; (80027c0 <HAL_RCC_ClockConfig+0x1f0>)
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	492b      	ldr	r1, [pc, #172]	; (80027c0 <HAL_RCC_ClockConfig+0x1f0>)
 8002712:	4313      	orrs	r3, r2
 8002714:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002716:	4b29      	ldr	r3, [pc, #164]	; (80027bc <HAL_RCC_ClockConfig+0x1ec>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f003 0307 	and.w	r3, r3, #7
 800271e:	683a      	ldr	r2, [r7, #0]
 8002720:	429a      	cmp	r2, r3
 8002722:	d210      	bcs.n	8002746 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002724:	4b25      	ldr	r3, [pc, #148]	; (80027bc <HAL_RCC_ClockConfig+0x1ec>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f023 0207 	bic.w	r2, r3, #7
 800272c:	4923      	ldr	r1, [pc, #140]	; (80027bc <HAL_RCC_ClockConfig+0x1ec>)
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	4313      	orrs	r3, r2
 8002732:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002734:	4b21      	ldr	r3, [pc, #132]	; (80027bc <HAL_RCC_ClockConfig+0x1ec>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f003 0307 	and.w	r3, r3, #7
 800273c:	683a      	ldr	r2, [r7, #0]
 800273e:	429a      	cmp	r2, r3
 8002740:	d001      	beq.n	8002746 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e036      	b.n	80027b4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 0304 	and.w	r3, r3, #4
 800274e:	2b00      	cmp	r3, #0
 8002750:	d008      	beq.n	8002764 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002752:	4b1b      	ldr	r3, [pc, #108]	; (80027c0 <HAL_RCC_ClockConfig+0x1f0>)
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	68db      	ldr	r3, [r3, #12]
 800275e:	4918      	ldr	r1, [pc, #96]	; (80027c0 <HAL_RCC_ClockConfig+0x1f0>)
 8002760:	4313      	orrs	r3, r2
 8002762:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 0308 	and.w	r3, r3, #8
 800276c:	2b00      	cmp	r3, #0
 800276e:	d009      	beq.n	8002784 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002770:	4b13      	ldr	r3, [pc, #76]	; (80027c0 <HAL_RCC_ClockConfig+0x1f0>)
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	691b      	ldr	r3, [r3, #16]
 800277c:	00db      	lsls	r3, r3, #3
 800277e:	4910      	ldr	r1, [pc, #64]	; (80027c0 <HAL_RCC_ClockConfig+0x1f0>)
 8002780:	4313      	orrs	r3, r2
 8002782:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002784:	f000 f824 	bl	80027d0 <HAL_RCC_GetSysClockFreq>
 8002788:	4602      	mov	r2, r0
 800278a:	4b0d      	ldr	r3, [pc, #52]	; (80027c0 <HAL_RCC_ClockConfig+0x1f0>)
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	091b      	lsrs	r3, r3, #4
 8002790:	f003 030f 	and.w	r3, r3, #15
 8002794:	490b      	ldr	r1, [pc, #44]	; (80027c4 <HAL_RCC_ClockConfig+0x1f4>)
 8002796:	5ccb      	ldrb	r3, [r1, r3]
 8002798:	f003 031f 	and.w	r3, r3, #31
 800279c:	fa22 f303 	lsr.w	r3, r2, r3
 80027a0:	4a09      	ldr	r2, [pc, #36]	; (80027c8 <HAL_RCC_ClockConfig+0x1f8>)
 80027a2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80027a4:	4b09      	ldr	r3, [pc, #36]	; (80027cc <HAL_RCC_ClockConfig+0x1fc>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4618      	mov	r0, r3
 80027aa:	f7fe fb19 	bl	8000de0 <HAL_InitTick>
 80027ae:	4603      	mov	r3, r0
 80027b0:	72fb      	strb	r3, [r7, #11]

  return status;
 80027b2:	7afb      	ldrb	r3, [r7, #11]
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	3710      	adds	r7, #16
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	40022000 	.word	0x40022000
 80027c0:	40021000 	.word	0x40021000
 80027c4:	08004b78 	.word	0x08004b78
 80027c8:	20000000 	.word	0x20000000
 80027cc:	20000004 	.word	0x20000004

080027d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b089      	sub	sp, #36	; 0x24
 80027d4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80027d6:	2300      	movs	r3, #0
 80027d8:	61fb      	str	r3, [r7, #28]
 80027da:	2300      	movs	r3, #0
 80027dc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027de:	4b3e      	ldr	r3, [pc, #248]	; (80028d8 <HAL_RCC_GetSysClockFreq+0x108>)
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	f003 030c 	and.w	r3, r3, #12
 80027e6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80027e8:	4b3b      	ldr	r3, [pc, #236]	; (80028d8 <HAL_RCC_GetSysClockFreq+0x108>)
 80027ea:	68db      	ldr	r3, [r3, #12]
 80027ec:	f003 0303 	and.w	r3, r3, #3
 80027f0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d005      	beq.n	8002804 <HAL_RCC_GetSysClockFreq+0x34>
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	2b0c      	cmp	r3, #12
 80027fc:	d121      	bne.n	8002842 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	2b01      	cmp	r3, #1
 8002802:	d11e      	bne.n	8002842 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002804:	4b34      	ldr	r3, [pc, #208]	; (80028d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 0308 	and.w	r3, r3, #8
 800280c:	2b00      	cmp	r3, #0
 800280e:	d107      	bne.n	8002820 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002810:	4b31      	ldr	r3, [pc, #196]	; (80028d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002812:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002816:	0a1b      	lsrs	r3, r3, #8
 8002818:	f003 030f 	and.w	r3, r3, #15
 800281c:	61fb      	str	r3, [r7, #28]
 800281e:	e005      	b.n	800282c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002820:	4b2d      	ldr	r3, [pc, #180]	; (80028d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	091b      	lsrs	r3, r3, #4
 8002826:	f003 030f 	and.w	r3, r3, #15
 800282a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800282c:	4a2b      	ldr	r2, [pc, #172]	; (80028dc <HAL_RCC_GetSysClockFreq+0x10c>)
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002834:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d10d      	bne.n	8002858 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800283c:	69fb      	ldr	r3, [r7, #28]
 800283e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002840:	e00a      	b.n	8002858 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	2b04      	cmp	r3, #4
 8002846:	d102      	bne.n	800284e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002848:	4b25      	ldr	r3, [pc, #148]	; (80028e0 <HAL_RCC_GetSysClockFreq+0x110>)
 800284a:	61bb      	str	r3, [r7, #24]
 800284c:	e004      	b.n	8002858 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	2b08      	cmp	r3, #8
 8002852:	d101      	bne.n	8002858 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002854:	4b23      	ldr	r3, [pc, #140]	; (80028e4 <HAL_RCC_GetSysClockFreq+0x114>)
 8002856:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	2b0c      	cmp	r3, #12
 800285c:	d134      	bne.n	80028c8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800285e:	4b1e      	ldr	r3, [pc, #120]	; (80028d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002860:	68db      	ldr	r3, [r3, #12]
 8002862:	f003 0303 	and.w	r3, r3, #3
 8002866:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	2b02      	cmp	r3, #2
 800286c:	d003      	beq.n	8002876 <HAL_RCC_GetSysClockFreq+0xa6>
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	2b03      	cmp	r3, #3
 8002872:	d003      	beq.n	800287c <HAL_RCC_GetSysClockFreq+0xac>
 8002874:	e005      	b.n	8002882 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002876:	4b1a      	ldr	r3, [pc, #104]	; (80028e0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002878:	617b      	str	r3, [r7, #20]
      break;
 800287a:	e005      	b.n	8002888 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800287c:	4b19      	ldr	r3, [pc, #100]	; (80028e4 <HAL_RCC_GetSysClockFreq+0x114>)
 800287e:	617b      	str	r3, [r7, #20]
      break;
 8002880:	e002      	b.n	8002888 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002882:	69fb      	ldr	r3, [r7, #28]
 8002884:	617b      	str	r3, [r7, #20]
      break;
 8002886:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002888:	4b13      	ldr	r3, [pc, #76]	; (80028d8 <HAL_RCC_GetSysClockFreq+0x108>)
 800288a:	68db      	ldr	r3, [r3, #12]
 800288c:	091b      	lsrs	r3, r3, #4
 800288e:	f003 0307 	and.w	r3, r3, #7
 8002892:	3301      	adds	r3, #1
 8002894:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002896:	4b10      	ldr	r3, [pc, #64]	; (80028d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002898:	68db      	ldr	r3, [r3, #12]
 800289a:	0a1b      	lsrs	r3, r3, #8
 800289c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80028a0:	697a      	ldr	r2, [r7, #20]
 80028a2:	fb03 f202 	mul.w	r2, r3, r2
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80028ac:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80028ae:	4b0a      	ldr	r3, [pc, #40]	; (80028d8 <HAL_RCC_GetSysClockFreq+0x108>)
 80028b0:	68db      	ldr	r3, [r3, #12]
 80028b2:	0e5b      	lsrs	r3, r3, #25
 80028b4:	f003 0303 	and.w	r3, r3, #3
 80028b8:	3301      	adds	r3, #1
 80028ba:	005b      	lsls	r3, r3, #1
 80028bc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80028be:	697a      	ldr	r2, [r7, #20]
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80028c6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80028c8:	69bb      	ldr	r3, [r7, #24]
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	3724      	adds	r7, #36	; 0x24
 80028ce:	46bd      	mov	sp, r7
 80028d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d4:	4770      	bx	lr
 80028d6:	bf00      	nop
 80028d8:	40021000 	.word	0x40021000
 80028dc:	08004b90 	.word	0x08004b90
 80028e0:	00f42400 	.word	0x00f42400
 80028e4:	007a1200 	.word	0x007a1200

080028e8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028e8:	b480      	push	{r7}
 80028ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028ec:	4b03      	ldr	r3, [pc, #12]	; (80028fc <HAL_RCC_GetHCLKFreq+0x14>)
 80028ee:	681b      	ldr	r3, [r3, #0]
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr
 80028fa:	bf00      	nop
 80028fc:	20000000 	.word	0x20000000

08002900 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002904:	f7ff fff0 	bl	80028e8 <HAL_RCC_GetHCLKFreq>
 8002908:	4602      	mov	r2, r0
 800290a:	4b06      	ldr	r3, [pc, #24]	; (8002924 <HAL_RCC_GetPCLK1Freq+0x24>)
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	0a1b      	lsrs	r3, r3, #8
 8002910:	f003 0307 	and.w	r3, r3, #7
 8002914:	4904      	ldr	r1, [pc, #16]	; (8002928 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002916:	5ccb      	ldrb	r3, [r1, r3]
 8002918:	f003 031f 	and.w	r3, r3, #31
 800291c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002920:	4618      	mov	r0, r3
 8002922:	bd80      	pop	{r7, pc}
 8002924:	40021000 	.word	0x40021000
 8002928:	08004b88 	.word	0x08004b88

0800292c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002930:	f7ff ffda 	bl	80028e8 <HAL_RCC_GetHCLKFreq>
 8002934:	4602      	mov	r2, r0
 8002936:	4b06      	ldr	r3, [pc, #24]	; (8002950 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	0adb      	lsrs	r3, r3, #11
 800293c:	f003 0307 	and.w	r3, r3, #7
 8002940:	4904      	ldr	r1, [pc, #16]	; (8002954 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002942:	5ccb      	ldrb	r3, [r1, r3]
 8002944:	f003 031f 	and.w	r3, r3, #31
 8002948:	fa22 f303 	lsr.w	r3, r2, r3
}
 800294c:	4618      	mov	r0, r3
 800294e:	bd80      	pop	{r7, pc}
 8002950:	40021000 	.word	0x40021000
 8002954:	08004b88 	.word	0x08004b88

08002958 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b086      	sub	sp, #24
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002960:	2300      	movs	r3, #0
 8002962:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002964:	4b2a      	ldr	r3, [pc, #168]	; (8002a10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002966:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002968:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800296c:	2b00      	cmp	r3, #0
 800296e:	d003      	beq.n	8002978 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002970:	f7ff f9b6 	bl	8001ce0 <HAL_PWREx_GetVoltageRange>
 8002974:	6178      	str	r0, [r7, #20]
 8002976:	e014      	b.n	80029a2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002978:	4b25      	ldr	r3, [pc, #148]	; (8002a10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800297a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800297c:	4a24      	ldr	r2, [pc, #144]	; (8002a10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800297e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002982:	6593      	str	r3, [r2, #88]	; 0x58
 8002984:	4b22      	ldr	r3, [pc, #136]	; (8002a10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002986:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002988:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800298c:	60fb      	str	r3, [r7, #12]
 800298e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002990:	f7ff f9a6 	bl	8001ce0 <HAL_PWREx_GetVoltageRange>
 8002994:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002996:	4b1e      	ldr	r3, [pc, #120]	; (8002a10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002998:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800299a:	4a1d      	ldr	r2, [pc, #116]	; (8002a10 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800299c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029a0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80029a8:	d10b      	bne.n	80029c2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2b80      	cmp	r3, #128	; 0x80
 80029ae:	d919      	bls.n	80029e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2ba0      	cmp	r3, #160	; 0xa0
 80029b4:	d902      	bls.n	80029bc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80029b6:	2302      	movs	r3, #2
 80029b8:	613b      	str	r3, [r7, #16]
 80029ba:	e013      	b.n	80029e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80029bc:	2301      	movs	r3, #1
 80029be:	613b      	str	r3, [r7, #16]
 80029c0:	e010      	b.n	80029e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2b80      	cmp	r3, #128	; 0x80
 80029c6:	d902      	bls.n	80029ce <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80029c8:	2303      	movs	r3, #3
 80029ca:	613b      	str	r3, [r7, #16]
 80029cc:	e00a      	b.n	80029e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2b80      	cmp	r3, #128	; 0x80
 80029d2:	d102      	bne.n	80029da <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80029d4:	2302      	movs	r3, #2
 80029d6:	613b      	str	r3, [r7, #16]
 80029d8:	e004      	b.n	80029e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2b70      	cmp	r3, #112	; 0x70
 80029de:	d101      	bne.n	80029e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80029e0:	2301      	movs	r3, #1
 80029e2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80029e4:	4b0b      	ldr	r3, [pc, #44]	; (8002a14 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f023 0207 	bic.w	r2, r3, #7
 80029ec:	4909      	ldr	r1, [pc, #36]	; (8002a14 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	4313      	orrs	r3, r2
 80029f2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80029f4:	4b07      	ldr	r3, [pc, #28]	; (8002a14 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f003 0307 	and.w	r3, r3, #7
 80029fc:	693a      	ldr	r2, [r7, #16]
 80029fe:	429a      	cmp	r2, r3
 8002a00:	d001      	beq.n	8002a06 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	e000      	b.n	8002a08 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002a06:	2300      	movs	r3, #0
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	3718      	adds	r7, #24
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}
 8002a10:	40021000 	.word	0x40021000
 8002a14:	40022000 	.word	0x40022000

08002a18 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b086      	sub	sp, #24
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002a20:	2300      	movs	r3, #0
 8002a22:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002a24:	2300      	movs	r3, #0
 8002a26:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d031      	beq.n	8002a98 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a38:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002a3c:	d01a      	beq.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002a3e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002a42:	d814      	bhi.n	8002a6e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d009      	beq.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002a48:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002a4c:	d10f      	bne.n	8002a6e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002a4e:	4b5d      	ldr	r3, [pc, #372]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002a50:	68db      	ldr	r3, [r3, #12]
 8002a52:	4a5c      	ldr	r2, [pc, #368]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002a54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a58:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002a5a:	e00c      	b.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	3304      	adds	r3, #4
 8002a60:	2100      	movs	r1, #0
 8002a62:	4618      	mov	r0, r3
 8002a64:	f000 fa22 	bl	8002eac <RCCEx_PLLSAI1_Config>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002a6c:	e003      	b.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	74fb      	strb	r3, [r7, #19]
      break;
 8002a72:	e000      	b.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002a74:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a76:	7cfb      	ldrb	r3, [r7, #19]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d10b      	bne.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002a7c:	4b51      	ldr	r3, [pc, #324]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002a7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a82:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a8a:	494e      	ldr	r1, [pc, #312]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002a92:	e001      	b.n	8002a98 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a94:	7cfb      	ldrb	r3, [r7, #19]
 8002a96:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	f000 809e 	beq.w	8002be2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002aaa:	4b46      	ldr	r3, [pc, #280]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002aac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d101      	bne.n	8002aba <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e000      	b.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8002aba:	2300      	movs	r3, #0
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d00d      	beq.n	8002adc <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ac0:	4b40      	ldr	r3, [pc, #256]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ac2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ac4:	4a3f      	ldr	r2, [pc, #252]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ac6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002aca:	6593      	str	r3, [r2, #88]	; 0x58
 8002acc:	4b3d      	ldr	r3, [pc, #244]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ace:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ad0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ad4:	60bb      	str	r3, [r7, #8]
 8002ad6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002adc:	4b3a      	ldr	r3, [pc, #232]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a39      	ldr	r2, [pc, #228]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002ae2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ae6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002ae8:	f7fe f9ca 	bl	8000e80 <HAL_GetTick>
 8002aec:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002aee:	e009      	b.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002af0:	f7fe f9c6 	bl	8000e80 <HAL_GetTick>
 8002af4:	4602      	mov	r2, r0
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	1ad3      	subs	r3, r2, r3
 8002afa:	2b02      	cmp	r3, #2
 8002afc:	d902      	bls.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8002afe:	2303      	movs	r3, #3
 8002b00:	74fb      	strb	r3, [r7, #19]
        break;
 8002b02:	e005      	b.n	8002b10 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002b04:	4b30      	ldr	r3, [pc, #192]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d0ef      	beq.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002b10:	7cfb      	ldrb	r3, [r7, #19]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d15a      	bne.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002b16:	4b2b      	ldr	r3, [pc, #172]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002b18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b1c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b20:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d01e      	beq.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b2c:	697a      	ldr	r2, [r7, #20]
 8002b2e:	429a      	cmp	r2, r3
 8002b30:	d019      	beq.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002b32:	4b24      	ldr	r3, [pc, #144]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002b34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b3c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002b3e:	4b21      	ldr	r3, [pc, #132]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002b40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b44:	4a1f      	ldr	r2, [pc, #124]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002b46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b4a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002b4e:	4b1d      	ldr	r3, [pc, #116]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002b50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b54:	4a1b      	ldr	r2, [pc, #108]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002b56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b5a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002b5e:	4a19      	ldr	r2, [pc, #100]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	f003 0301 	and.w	r3, r3, #1
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d016      	beq.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b70:	f7fe f986 	bl	8000e80 <HAL_GetTick>
 8002b74:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b76:	e00b      	b.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b78:	f7fe f982 	bl	8000e80 <HAL_GetTick>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	1ad3      	subs	r3, r2, r3
 8002b82:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d902      	bls.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8002b8a:	2303      	movs	r3, #3
 8002b8c:	74fb      	strb	r3, [r7, #19]
            break;
 8002b8e:	e006      	b.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b90:	4b0c      	ldr	r3, [pc, #48]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002b92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b96:	f003 0302 	and.w	r3, r3, #2
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d0ec      	beq.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8002b9e:	7cfb      	ldrb	r3, [r7, #19]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d10b      	bne.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ba4:	4b07      	ldr	r3, [pc, #28]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ba6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002baa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bb2:	4904      	ldr	r1, [pc, #16]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002bba:	e009      	b.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002bbc:	7cfb      	ldrb	r3, [r7, #19]
 8002bbe:	74bb      	strb	r3, [r7, #18]
 8002bc0:	e006      	b.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8002bc2:	bf00      	nop
 8002bc4:	40021000 	.word	0x40021000
 8002bc8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bcc:	7cfb      	ldrb	r3, [r7, #19]
 8002bce:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002bd0:	7c7b      	ldrb	r3, [r7, #17]
 8002bd2:	2b01      	cmp	r3, #1
 8002bd4:	d105      	bne.n	8002be2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bd6:	4b8d      	ldr	r3, [pc, #564]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002bd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bda:	4a8c      	ldr	r2, [pc, #560]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002bdc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002be0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 0301 	and.w	r3, r3, #1
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d00a      	beq.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002bee:	4b87      	ldr	r3, [pc, #540]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002bf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bf4:	f023 0203 	bic.w	r2, r3, #3
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6a1b      	ldr	r3, [r3, #32]
 8002bfc:	4983      	ldr	r1, [pc, #524]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f003 0302 	and.w	r3, r3, #2
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d00a      	beq.n	8002c26 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002c10:	4b7e      	ldr	r3, [pc, #504]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002c12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c16:	f023 020c 	bic.w	r2, r3, #12
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c1e:	497b      	ldr	r1, [pc, #492]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002c20:	4313      	orrs	r3, r2
 8002c22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f003 0304 	and.w	r3, r3, #4
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d00a      	beq.n	8002c48 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002c32:	4b76      	ldr	r3, [pc, #472]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002c34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c38:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c40:	4972      	ldr	r1, [pc, #456]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002c42:	4313      	orrs	r3, r2
 8002c44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f003 0320 	and.w	r3, r3, #32
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d00a      	beq.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002c54:	4b6d      	ldr	r3, [pc, #436]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002c56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c5a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c62:	496a      	ldr	r1, [pc, #424]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002c64:	4313      	orrs	r3, r2
 8002c66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d00a      	beq.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002c76:	4b65      	ldr	r3, [pc, #404]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002c78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c7c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c84:	4961      	ldr	r1, [pc, #388]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002c86:	4313      	orrs	r3, r2
 8002c88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d00a      	beq.n	8002cae <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002c98:	4b5c      	ldr	r3, [pc, #368]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002c9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c9e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca6:	4959      	ldr	r1, [pc, #356]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d00a      	beq.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002cba:	4b54      	ldr	r3, [pc, #336]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002cbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cc0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cc8:	4950      	ldr	r1, [pc, #320]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d00a      	beq.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002cdc:	4b4b      	ldr	r3, [pc, #300]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002cde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ce2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cea:	4948      	ldr	r1, [pc, #288]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002cec:	4313      	orrs	r3, r2
 8002cee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d00a      	beq.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002cfe:	4b43      	ldr	r3, [pc, #268]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002d00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d04:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d0c:	493f      	ldr	r1, [pc, #252]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d028      	beq.n	8002d72 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002d20:	4b3a      	ldr	r3, [pc, #232]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002d22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d26:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d2e:	4937      	ldr	r1, [pc, #220]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002d30:	4313      	orrs	r3, r2
 8002d32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d3a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d3e:	d106      	bne.n	8002d4e <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d40:	4b32      	ldr	r3, [pc, #200]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002d42:	68db      	ldr	r3, [r3, #12]
 8002d44:	4a31      	ldr	r2, [pc, #196]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002d46:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d4a:	60d3      	str	r3, [r2, #12]
 8002d4c:	e011      	b.n	8002d72 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d52:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002d56:	d10c      	bne.n	8002d72 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	3304      	adds	r3, #4
 8002d5c:	2101      	movs	r1, #1
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f000 f8a4 	bl	8002eac <RCCEx_PLLSAI1_Config>
 8002d64:	4603      	mov	r3, r0
 8002d66:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002d68:	7cfb      	ldrb	r3, [r7, #19]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d001      	beq.n	8002d72 <HAL_RCCEx_PeriphCLKConfig+0x35a>
        {
          /* set overall return value */
          status = ret;
 8002d6e:	7cfb      	ldrb	r3, [r7, #19]
 8002d70:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d028      	beq.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002d7e:	4b23      	ldr	r3, [pc, #140]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002d80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d84:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d8c:	491f      	ldr	r1, [pc, #124]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d98:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d9c:	d106      	bne.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d9e:	4b1b      	ldr	r3, [pc, #108]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002da0:	68db      	ldr	r3, [r3, #12]
 8002da2:	4a1a      	ldr	r2, [pc, #104]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002da4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002da8:	60d3      	str	r3, [r2, #12]
 8002daa:	e011      	b.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002db0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002db4:	d10c      	bne.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	3304      	adds	r3, #4
 8002dba:	2101      	movs	r1, #1
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f000 f875 	bl	8002eac <RCCEx_PLLSAI1_Config>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002dc6:	7cfb      	ldrb	r3, [r7, #19]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d001      	beq.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8002dcc:	7cfb      	ldrb	r3, [r7, #19]
 8002dce:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d02b      	beq.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002ddc:	4b0b      	ldr	r3, [pc, #44]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002dde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002de2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002dea:	4908      	ldr	r1, [pc, #32]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002dec:	4313      	orrs	r3, r2
 8002dee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002df6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002dfa:	d109      	bne.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002dfc:	4b03      	ldr	r3, [pc, #12]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002dfe:	68db      	ldr	r3, [r3, #12]
 8002e00:	4a02      	ldr	r2, [pc, #8]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002e02:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e06:	60d3      	str	r3, [r2, #12]
 8002e08:	e014      	b.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8002e0a:	bf00      	nop
 8002e0c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e14:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002e18:	d10c      	bne.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	3304      	adds	r3, #4
 8002e1e:	2101      	movs	r1, #1
 8002e20:	4618      	mov	r0, r3
 8002e22:	f000 f843 	bl	8002eac <RCCEx_PLLSAI1_Config>
 8002e26:	4603      	mov	r3, r0
 8002e28:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002e2a:	7cfb      	ldrb	r3, [r7, #19]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d001      	beq.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      {
        /* set overall return value */
        status = ret;
 8002e30:	7cfb      	ldrb	r3, [r7, #19]
 8002e32:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d01c      	beq.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002e40:	4b19      	ldr	r3, [pc, #100]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e46:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e4e:	4916      	ldr	r1, [pc, #88]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e50:	4313      	orrs	r3, r2
 8002e52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e5a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002e5e:	d10c      	bne.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	3304      	adds	r3, #4
 8002e64:	2102      	movs	r1, #2
 8002e66:	4618      	mov	r0, r3
 8002e68:	f000 f820 	bl	8002eac <RCCEx_PLLSAI1_Config>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002e70:	7cfb      	ldrb	r3, [r7, #19]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d001      	beq.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0x462>
      {
        /* set overall return value */
        status = ret;
 8002e76:	7cfb      	ldrb	r3, [r7, #19]
 8002e78:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d00a      	beq.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002e86:	4b08      	ldr	r3, [pc, #32]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e8c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e94:	4904      	ldr	r1, [pc, #16]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e96:	4313      	orrs	r3, r2
 8002e98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002e9c:	7cbb      	ldrb	r3, [r7, #18]
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3718      	adds	r7, #24
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	40021000 	.word	0x40021000

08002eac <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b084      	sub	sp, #16
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
 8002eb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002eba:	4b74      	ldr	r3, [pc, #464]	; (800308c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ebc:	68db      	ldr	r3, [r3, #12]
 8002ebe:	f003 0303 	and.w	r3, r3, #3
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d018      	beq.n	8002ef8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002ec6:	4b71      	ldr	r3, [pc, #452]	; (800308c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ec8:	68db      	ldr	r3, [r3, #12]
 8002eca:	f003 0203 	and.w	r2, r3, #3
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	429a      	cmp	r2, r3
 8002ed4:	d10d      	bne.n	8002ef2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
       ||
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d009      	beq.n	8002ef2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002ede:	4b6b      	ldr	r3, [pc, #428]	; (800308c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ee0:	68db      	ldr	r3, [r3, #12]
 8002ee2:	091b      	lsrs	r3, r3, #4
 8002ee4:	f003 0307 	and.w	r3, r3, #7
 8002ee8:	1c5a      	adds	r2, r3, #1
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	685b      	ldr	r3, [r3, #4]
       ||
 8002eee:	429a      	cmp	r2, r3
 8002ef0:	d047      	beq.n	8002f82 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	73fb      	strb	r3, [r7, #15]
 8002ef6:	e044      	b.n	8002f82 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	2b03      	cmp	r3, #3
 8002efe:	d018      	beq.n	8002f32 <RCCEx_PLLSAI1_Config+0x86>
 8002f00:	2b03      	cmp	r3, #3
 8002f02:	d825      	bhi.n	8002f50 <RCCEx_PLLSAI1_Config+0xa4>
 8002f04:	2b01      	cmp	r3, #1
 8002f06:	d002      	beq.n	8002f0e <RCCEx_PLLSAI1_Config+0x62>
 8002f08:	2b02      	cmp	r3, #2
 8002f0a:	d009      	beq.n	8002f20 <RCCEx_PLLSAI1_Config+0x74>
 8002f0c:	e020      	b.n	8002f50 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002f0e:	4b5f      	ldr	r3, [pc, #380]	; (800308c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 0302 	and.w	r3, r3, #2
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d11d      	bne.n	8002f56 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f1e:	e01a      	b.n	8002f56 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002f20:	4b5a      	ldr	r3, [pc, #360]	; (800308c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d116      	bne.n	8002f5a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f30:	e013      	b.n	8002f5a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002f32:	4b56      	ldr	r3, [pc, #344]	; (800308c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d10f      	bne.n	8002f5e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002f3e:	4b53      	ldr	r3, [pc, #332]	; (800308c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d109      	bne.n	8002f5e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002f4e:	e006      	b.n	8002f5e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	73fb      	strb	r3, [r7, #15]
      break;
 8002f54:	e004      	b.n	8002f60 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002f56:	bf00      	nop
 8002f58:	e002      	b.n	8002f60 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002f5a:	bf00      	nop
 8002f5c:	e000      	b.n	8002f60 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002f5e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002f60:	7bfb      	ldrb	r3, [r7, #15]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d10d      	bne.n	8002f82 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002f66:	4b49      	ldr	r3, [pc, #292]	; (800308c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f68:	68db      	ldr	r3, [r3, #12]
 8002f6a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6819      	ldr	r1, [r3, #0]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	3b01      	subs	r3, #1
 8002f78:	011b      	lsls	r3, r3, #4
 8002f7a:	430b      	orrs	r3, r1
 8002f7c:	4943      	ldr	r1, [pc, #268]	; (800308c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002f82:	7bfb      	ldrb	r3, [r7, #15]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d17c      	bne.n	8003082 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002f88:	4b40      	ldr	r3, [pc, #256]	; (800308c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a3f      	ldr	r2, [pc, #252]	; (800308c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f8e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002f92:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f94:	f7fd ff74 	bl	8000e80 <HAL_GetTick>
 8002f98:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002f9a:	e009      	b.n	8002fb0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002f9c:	f7fd ff70 	bl	8000e80 <HAL_GetTick>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	1ad3      	subs	r3, r2, r3
 8002fa6:	2b02      	cmp	r3, #2
 8002fa8:	d902      	bls.n	8002fb0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002faa:	2303      	movs	r3, #3
 8002fac:	73fb      	strb	r3, [r7, #15]
        break;
 8002fae:	e005      	b.n	8002fbc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002fb0:	4b36      	ldr	r3, [pc, #216]	; (800308c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d1ef      	bne.n	8002f9c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002fbc:	7bfb      	ldrb	r3, [r7, #15]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d15f      	bne.n	8003082 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d110      	bne.n	8002fea <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002fc8:	4b30      	ldr	r3, [pc, #192]	; (800308c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002fca:	691b      	ldr	r3, [r3, #16]
 8002fcc:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002fd0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002fd4:	687a      	ldr	r2, [r7, #4]
 8002fd6:	6892      	ldr	r2, [r2, #8]
 8002fd8:	0211      	lsls	r1, r2, #8
 8002fda:	687a      	ldr	r2, [r7, #4]
 8002fdc:	68d2      	ldr	r2, [r2, #12]
 8002fde:	06d2      	lsls	r2, r2, #27
 8002fe0:	430a      	orrs	r2, r1
 8002fe2:	492a      	ldr	r1, [pc, #168]	; (800308c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	610b      	str	r3, [r1, #16]
 8002fe8:	e027      	b.n	800303a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	d112      	bne.n	8003016 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002ff0:	4b26      	ldr	r3, [pc, #152]	; (800308c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ff2:	691b      	ldr	r3, [r3, #16]
 8002ff4:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002ff8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002ffc:	687a      	ldr	r2, [r7, #4]
 8002ffe:	6892      	ldr	r2, [r2, #8]
 8003000:	0211      	lsls	r1, r2, #8
 8003002:	687a      	ldr	r2, [r7, #4]
 8003004:	6912      	ldr	r2, [r2, #16]
 8003006:	0852      	lsrs	r2, r2, #1
 8003008:	3a01      	subs	r2, #1
 800300a:	0552      	lsls	r2, r2, #21
 800300c:	430a      	orrs	r2, r1
 800300e:	491f      	ldr	r1, [pc, #124]	; (800308c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003010:	4313      	orrs	r3, r2
 8003012:	610b      	str	r3, [r1, #16]
 8003014:	e011      	b.n	800303a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003016:	4b1d      	ldr	r3, [pc, #116]	; (800308c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003018:	691b      	ldr	r3, [r3, #16]
 800301a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800301e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003022:	687a      	ldr	r2, [r7, #4]
 8003024:	6892      	ldr	r2, [r2, #8]
 8003026:	0211      	lsls	r1, r2, #8
 8003028:	687a      	ldr	r2, [r7, #4]
 800302a:	6952      	ldr	r2, [r2, #20]
 800302c:	0852      	lsrs	r2, r2, #1
 800302e:	3a01      	subs	r2, #1
 8003030:	0652      	lsls	r2, r2, #25
 8003032:	430a      	orrs	r2, r1
 8003034:	4915      	ldr	r1, [pc, #84]	; (800308c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003036:	4313      	orrs	r3, r2
 8003038:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800303a:	4b14      	ldr	r3, [pc, #80]	; (800308c <RCCEx_PLLSAI1_Config+0x1e0>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a13      	ldr	r2, [pc, #76]	; (800308c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003040:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003044:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003046:	f7fd ff1b 	bl	8000e80 <HAL_GetTick>
 800304a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800304c:	e009      	b.n	8003062 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800304e:	f7fd ff17 	bl	8000e80 <HAL_GetTick>
 8003052:	4602      	mov	r2, r0
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	1ad3      	subs	r3, r2, r3
 8003058:	2b02      	cmp	r3, #2
 800305a:	d902      	bls.n	8003062 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800305c:	2303      	movs	r3, #3
 800305e:	73fb      	strb	r3, [r7, #15]
          break;
 8003060:	e005      	b.n	800306e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003062:	4b0a      	ldr	r3, [pc, #40]	; (800308c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800306a:	2b00      	cmp	r3, #0
 800306c:	d0ef      	beq.n	800304e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800306e:	7bfb      	ldrb	r3, [r7, #15]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d106      	bne.n	8003082 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003074:	4b05      	ldr	r3, [pc, #20]	; (800308c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003076:	691a      	ldr	r2, [r3, #16]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	699b      	ldr	r3, [r3, #24]
 800307c:	4903      	ldr	r1, [pc, #12]	; (800308c <RCCEx_PLLSAI1_Config+0x1e0>)
 800307e:	4313      	orrs	r3, r2
 8003080:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003082:	7bfb      	ldrb	r3, [r7, #15]
}
 8003084:	4618      	mov	r0, r3
 8003086:	3710      	adds	r7, #16
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}
 800308c:	40021000 	.word	0x40021000

08003090 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b084      	sub	sp, #16
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d101      	bne.n	80030a2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	e095      	b.n	80031ce <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d108      	bne.n	80030bc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80030b2:	d009      	beq.n	80030c8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2200      	movs	r2, #0
 80030b8:	61da      	str	r2, [r3, #28]
 80030ba:	e005      	b.n	80030c8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2200      	movs	r2, #0
 80030c0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2200      	movs	r2, #0
 80030c6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2200      	movs	r2, #0
 80030cc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d106      	bne.n	80030e8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2200      	movs	r2, #0
 80030de:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80030e2:	6878      	ldr	r0, [r7, #4]
 80030e4:	f7fd fcb2 	bl	8000a4c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2202      	movs	r2, #2
 80030ec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	681a      	ldr	r2, [r3, #0]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030fe:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	68db      	ldr	r3, [r3, #12]
 8003104:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003108:	d902      	bls.n	8003110 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800310a:	2300      	movs	r3, #0
 800310c:	60fb      	str	r3, [r7, #12]
 800310e:	e002      	b.n	8003116 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003110:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003114:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	68db      	ldr	r3, [r3, #12]
 800311a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800311e:	d007      	beq.n	8003130 <HAL_SPI_Init+0xa0>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	68db      	ldr	r3, [r3, #12]
 8003124:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003128:	d002      	beq.n	8003130 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2200      	movs	r2, #0
 800312e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003140:	431a      	orrs	r2, r3
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	691b      	ldr	r3, [r3, #16]
 8003146:	f003 0302 	and.w	r3, r3, #2
 800314a:	431a      	orrs	r2, r3
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	695b      	ldr	r3, [r3, #20]
 8003150:	f003 0301 	and.w	r3, r3, #1
 8003154:	431a      	orrs	r2, r3
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	699b      	ldr	r3, [r3, #24]
 800315a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800315e:	431a      	orrs	r2, r3
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	69db      	ldr	r3, [r3, #28]
 8003164:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003168:	431a      	orrs	r2, r3
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6a1b      	ldr	r3, [r3, #32]
 800316e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003172:	ea42 0103 	orr.w	r1, r2, r3
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800317a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	430a      	orrs	r2, r1
 8003184:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	699b      	ldr	r3, [r3, #24]
 800318a:	0c1b      	lsrs	r3, r3, #16
 800318c:	f003 0204 	and.w	r2, r3, #4
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003194:	f003 0310 	and.w	r3, r3, #16
 8003198:	431a      	orrs	r2, r3
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800319e:	f003 0308 	and.w	r3, r3, #8
 80031a2:	431a      	orrs	r2, r3
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	68db      	ldr	r3, [r3, #12]
 80031a8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80031ac:	ea42 0103 	orr.w	r1, r2, r3
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	430a      	orrs	r2, r1
 80031bc:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2200      	movs	r2, #0
 80031c2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2201      	movs	r2, #1
 80031c8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80031cc:	2300      	movs	r3, #0
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	3710      	adds	r7, #16
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}

080031d6 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80031d6:	b580      	push	{r7, lr}
 80031d8:	b082      	sub	sp, #8
 80031da:	af00      	add	r7, sp, #0
 80031dc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d101      	bne.n	80031e8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e040      	b.n	800326a <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d106      	bne.n	80031fe <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2200      	movs	r2, #0
 80031f4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80031f8:	6878      	ldr	r0, [r7, #4]
 80031fa:	f7fd fc6b 	bl	8000ad4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2224      	movs	r2, #36	; 0x24
 8003202:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	681a      	ldr	r2, [r3, #0]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f022 0201 	bic.w	r2, r2, #1
 8003212:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003214:	6878      	ldr	r0, [r7, #4]
 8003216:	f000 f8c1 	bl	800339c <UART_SetConfig>
 800321a:	4603      	mov	r3, r0
 800321c:	2b01      	cmp	r3, #1
 800321e:	d101      	bne.n	8003224 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	e022      	b.n	800326a <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003228:	2b00      	cmp	r3, #0
 800322a:	d002      	beq.n	8003232 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800322c:	6878      	ldr	r0, [r7, #4]
 800322e:	f000 fb0f 	bl	8003850 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	685a      	ldr	r2, [r3, #4]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003240:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	689a      	ldr	r2, [r3, #8]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003250:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	681a      	ldr	r2, [r3, #0]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f042 0201 	orr.w	r2, r2, #1
 8003260:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	f000 fb96 	bl	8003994 <UART_CheckIdleState>
 8003268:	4603      	mov	r3, r0
}
 800326a:	4618      	mov	r0, r3
 800326c:	3708      	adds	r7, #8
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}

08003272 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003272:	b580      	push	{r7, lr}
 8003274:	b08a      	sub	sp, #40	; 0x28
 8003276:	af02      	add	r7, sp, #8
 8003278:	60f8      	str	r0, [r7, #12]
 800327a:	60b9      	str	r1, [r7, #8]
 800327c:	603b      	str	r3, [r7, #0]
 800327e:	4613      	mov	r3, r2
 8003280:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003286:	2b20      	cmp	r3, #32
 8003288:	f040 8082 	bne.w	8003390 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d002      	beq.n	8003298 <HAL_UART_Transmit+0x26>
 8003292:	88fb      	ldrh	r3, [r7, #6]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d101      	bne.n	800329c <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003298:	2301      	movs	r3, #1
 800329a:	e07a      	b.n	8003392 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80032a2:	2b01      	cmp	r3, #1
 80032a4:	d101      	bne.n	80032aa <HAL_UART_Transmit+0x38>
 80032a6:	2302      	movs	r3, #2
 80032a8:	e073      	b.n	8003392 <HAL_UART_Transmit+0x120>
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	2201      	movs	r2, #1
 80032ae:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	2200      	movs	r2, #0
 80032b6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	2221      	movs	r2, #33	; 0x21
 80032be:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80032c0:	f7fd fdde 	bl	8000e80 <HAL_GetTick>
 80032c4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	88fa      	ldrh	r2, [r7, #6]
 80032ca:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	88fa      	ldrh	r2, [r7, #6]
 80032d2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032de:	d108      	bne.n	80032f2 <HAL_UART_Transmit+0x80>
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	691b      	ldr	r3, [r3, #16]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d104      	bne.n	80032f2 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80032e8:	2300      	movs	r3, #0
 80032ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	61bb      	str	r3, [r7, #24]
 80032f0:	e003      	b.n	80032fa <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80032f6:	2300      	movs	r3, #0
 80032f8:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	2200      	movs	r2, #0
 80032fe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003302:	e02d      	b.n	8003360 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	9300      	str	r3, [sp, #0]
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	2200      	movs	r2, #0
 800330c:	2180      	movs	r1, #128	; 0x80
 800330e:	68f8      	ldr	r0, [r7, #12]
 8003310:	f000 fb89 	bl	8003a26 <UART_WaitOnFlagUntilTimeout>
 8003314:	4603      	mov	r3, r0
 8003316:	2b00      	cmp	r3, #0
 8003318:	d001      	beq.n	800331e <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800331a:	2303      	movs	r3, #3
 800331c:	e039      	b.n	8003392 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800331e:	69fb      	ldr	r3, [r7, #28]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d10b      	bne.n	800333c <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003324:	69bb      	ldr	r3, [r7, #24]
 8003326:	881a      	ldrh	r2, [r3, #0]
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003330:	b292      	uxth	r2, r2
 8003332:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003334:	69bb      	ldr	r3, [r7, #24]
 8003336:	3302      	adds	r3, #2
 8003338:	61bb      	str	r3, [r7, #24]
 800333a:	e008      	b.n	800334e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800333c:	69fb      	ldr	r3, [r7, #28]
 800333e:	781a      	ldrb	r2, [r3, #0]
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	b292      	uxth	r2, r2
 8003346:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003348:	69fb      	ldr	r3, [r7, #28]
 800334a:	3301      	adds	r3, #1
 800334c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003354:	b29b      	uxth	r3, r3
 8003356:	3b01      	subs	r3, #1
 8003358:	b29a      	uxth	r2, r3
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003366:	b29b      	uxth	r3, r3
 8003368:	2b00      	cmp	r3, #0
 800336a:	d1cb      	bne.n	8003304 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	9300      	str	r3, [sp, #0]
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	2200      	movs	r2, #0
 8003374:	2140      	movs	r1, #64	; 0x40
 8003376:	68f8      	ldr	r0, [r7, #12]
 8003378:	f000 fb55 	bl	8003a26 <UART_WaitOnFlagUntilTimeout>
 800337c:	4603      	mov	r3, r0
 800337e:	2b00      	cmp	r3, #0
 8003380:	d001      	beq.n	8003386 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003382:	2303      	movs	r3, #3
 8003384:	e005      	b.n	8003392 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	2220      	movs	r2, #32
 800338a:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800338c:	2300      	movs	r3, #0
 800338e:	e000      	b.n	8003392 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8003390:	2302      	movs	r3, #2
  }
}
 8003392:	4618      	mov	r0, r3
 8003394:	3720      	adds	r7, #32
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}
	...

0800339c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800339c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033a0:	b08a      	sub	sp, #40	; 0x28
 80033a2:	af00      	add	r7, sp, #0
 80033a4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80033a6:	2300      	movs	r3, #0
 80033a8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	689a      	ldr	r2, [r3, #8]
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	691b      	ldr	r3, [r3, #16]
 80033b4:	431a      	orrs	r2, r3
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	695b      	ldr	r3, [r3, #20]
 80033ba:	431a      	orrs	r2, r3
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	69db      	ldr	r3, [r3, #28]
 80033c0:	4313      	orrs	r3, r2
 80033c2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	681a      	ldr	r2, [r3, #0]
 80033ca:	4b9e      	ldr	r3, [pc, #632]	; (8003644 <UART_SetConfig+0x2a8>)
 80033cc:	4013      	ands	r3, r2
 80033ce:	68fa      	ldr	r2, [r7, #12]
 80033d0:	6812      	ldr	r2, [r2, #0]
 80033d2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80033d4:	430b      	orrs	r3, r1
 80033d6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	68da      	ldr	r2, [r3, #12]
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	430a      	orrs	r2, r1
 80033ec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	699b      	ldr	r3, [r3, #24]
 80033f2:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a93      	ldr	r2, [pc, #588]	; (8003648 <UART_SetConfig+0x2ac>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d004      	beq.n	8003408 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	6a1b      	ldr	r3, [r3, #32]
 8003402:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003404:	4313      	orrs	r3, r2
 8003406:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003418:	430a      	orrs	r2, r1
 800341a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a8a      	ldr	r2, [pc, #552]	; (800364c <UART_SetConfig+0x2b0>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d126      	bne.n	8003474 <UART_SetConfig+0xd8>
 8003426:	4b8a      	ldr	r3, [pc, #552]	; (8003650 <UART_SetConfig+0x2b4>)
 8003428:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800342c:	f003 0303 	and.w	r3, r3, #3
 8003430:	2b03      	cmp	r3, #3
 8003432:	d81b      	bhi.n	800346c <UART_SetConfig+0xd0>
 8003434:	a201      	add	r2, pc, #4	; (adr r2, 800343c <UART_SetConfig+0xa0>)
 8003436:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800343a:	bf00      	nop
 800343c:	0800344d 	.word	0x0800344d
 8003440:	0800345d 	.word	0x0800345d
 8003444:	08003455 	.word	0x08003455
 8003448:	08003465 	.word	0x08003465
 800344c:	2301      	movs	r3, #1
 800344e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003452:	e0ab      	b.n	80035ac <UART_SetConfig+0x210>
 8003454:	2302      	movs	r3, #2
 8003456:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800345a:	e0a7      	b.n	80035ac <UART_SetConfig+0x210>
 800345c:	2304      	movs	r3, #4
 800345e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003462:	e0a3      	b.n	80035ac <UART_SetConfig+0x210>
 8003464:	2308      	movs	r3, #8
 8003466:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800346a:	e09f      	b.n	80035ac <UART_SetConfig+0x210>
 800346c:	2310      	movs	r3, #16
 800346e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003472:	e09b      	b.n	80035ac <UART_SetConfig+0x210>
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a76      	ldr	r2, [pc, #472]	; (8003654 <UART_SetConfig+0x2b8>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d138      	bne.n	80034f0 <UART_SetConfig+0x154>
 800347e:	4b74      	ldr	r3, [pc, #464]	; (8003650 <UART_SetConfig+0x2b4>)
 8003480:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003484:	f003 030c 	and.w	r3, r3, #12
 8003488:	2b0c      	cmp	r3, #12
 800348a:	d82d      	bhi.n	80034e8 <UART_SetConfig+0x14c>
 800348c:	a201      	add	r2, pc, #4	; (adr r2, 8003494 <UART_SetConfig+0xf8>)
 800348e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003492:	bf00      	nop
 8003494:	080034c9 	.word	0x080034c9
 8003498:	080034e9 	.word	0x080034e9
 800349c:	080034e9 	.word	0x080034e9
 80034a0:	080034e9 	.word	0x080034e9
 80034a4:	080034d9 	.word	0x080034d9
 80034a8:	080034e9 	.word	0x080034e9
 80034ac:	080034e9 	.word	0x080034e9
 80034b0:	080034e9 	.word	0x080034e9
 80034b4:	080034d1 	.word	0x080034d1
 80034b8:	080034e9 	.word	0x080034e9
 80034bc:	080034e9 	.word	0x080034e9
 80034c0:	080034e9 	.word	0x080034e9
 80034c4:	080034e1 	.word	0x080034e1
 80034c8:	2300      	movs	r3, #0
 80034ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034ce:	e06d      	b.n	80035ac <UART_SetConfig+0x210>
 80034d0:	2302      	movs	r3, #2
 80034d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034d6:	e069      	b.n	80035ac <UART_SetConfig+0x210>
 80034d8:	2304      	movs	r3, #4
 80034da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034de:	e065      	b.n	80035ac <UART_SetConfig+0x210>
 80034e0:	2308      	movs	r3, #8
 80034e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034e6:	e061      	b.n	80035ac <UART_SetConfig+0x210>
 80034e8:	2310      	movs	r3, #16
 80034ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034ee:	e05d      	b.n	80035ac <UART_SetConfig+0x210>
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a58      	ldr	r2, [pc, #352]	; (8003658 <UART_SetConfig+0x2bc>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d125      	bne.n	8003546 <UART_SetConfig+0x1aa>
 80034fa:	4b55      	ldr	r3, [pc, #340]	; (8003650 <UART_SetConfig+0x2b4>)
 80034fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003500:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003504:	2b30      	cmp	r3, #48	; 0x30
 8003506:	d016      	beq.n	8003536 <UART_SetConfig+0x19a>
 8003508:	2b30      	cmp	r3, #48	; 0x30
 800350a:	d818      	bhi.n	800353e <UART_SetConfig+0x1a2>
 800350c:	2b20      	cmp	r3, #32
 800350e:	d00a      	beq.n	8003526 <UART_SetConfig+0x18a>
 8003510:	2b20      	cmp	r3, #32
 8003512:	d814      	bhi.n	800353e <UART_SetConfig+0x1a2>
 8003514:	2b00      	cmp	r3, #0
 8003516:	d002      	beq.n	800351e <UART_SetConfig+0x182>
 8003518:	2b10      	cmp	r3, #16
 800351a:	d008      	beq.n	800352e <UART_SetConfig+0x192>
 800351c:	e00f      	b.n	800353e <UART_SetConfig+0x1a2>
 800351e:	2300      	movs	r3, #0
 8003520:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003524:	e042      	b.n	80035ac <UART_SetConfig+0x210>
 8003526:	2302      	movs	r3, #2
 8003528:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800352c:	e03e      	b.n	80035ac <UART_SetConfig+0x210>
 800352e:	2304      	movs	r3, #4
 8003530:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003534:	e03a      	b.n	80035ac <UART_SetConfig+0x210>
 8003536:	2308      	movs	r3, #8
 8003538:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800353c:	e036      	b.n	80035ac <UART_SetConfig+0x210>
 800353e:	2310      	movs	r3, #16
 8003540:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003544:	e032      	b.n	80035ac <UART_SetConfig+0x210>
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a3f      	ldr	r2, [pc, #252]	; (8003648 <UART_SetConfig+0x2ac>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d12a      	bne.n	80035a6 <UART_SetConfig+0x20a>
 8003550:	4b3f      	ldr	r3, [pc, #252]	; (8003650 <UART_SetConfig+0x2b4>)
 8003552:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003556:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800355a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800355e:	d01a      	beq.n	8003596 <UART_SetConfig+0x1fa>
 8003560:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003564:	d81b      	bhi.n	800359e <UART_SetConfig+0x202>
 8003566:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800356a:	d00c      	beq.n	8003586 <UART_SetConfig+0x1ea>
 800356c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003570:	d815      	bhi.n	800359e <UART_SetConfig+0x202>
 8003572:	2b00      	cmp	r3, #0
 8003574:	d003      	beq.n	800357e <UART_SetConfig+0x1e2>
 8003576:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800357a:	d008      	beq.n	800358e <UART_SetConfig+0x1f2>
 800357c:	e00f      	b.n	800359e <UART_SetConfig+0x202>
 800357e:	2300      	movs	r3, #0
 8003580:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003584:	e012      	b.n	80035ac <UART_SetConfig+0x210>
 8003586:	2302      	movs	r3, #2
 8003588:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800358c:	e00e      	b.n	80035ac <UART_SetConfig+0x210>
 800358e:	2304      	movs	r3, #4
 8003590:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003594:	e00a      	b.n	80035ac <UART_SetConfig+0x210>
 8003596:	2308      	movs	r3, #8
 8003598:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800359c:	e006      	b.n	80035ac <UART_SetConfig+0x210>
 800359e:	2310      	movs	r3, #16
 80035a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035a4:	e002      	b.n	80035ac <UART_SetConfig+0x210>
 80035a6:	2310      	movs	r3, #16
 80035a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a25      	ldr	r2, [pc, #148]	; (8003648 <UART_SetConfig+0x2ac>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	f040 808a 	bne.w	80036cc <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80035b8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80035bc:	2b08      	cmp	r3, #8
 80035be:	d824      	bhi.n	800360a <UART_SetConfig+0x26e>
 80035c0:	a201      	add	r2, pc, #4	; (adr r2, 80035c8 <UART_SetConfig+0x22c>)
 80035c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035c6:	bf00      	nop
 80035c8:	080035ed 	.word	0x080035ed
 80035cc:	0800360b 	.word	0x0800360b
 80035d0:	080035f5 	.word	0x080035f5
 80035d4:	0800360b 	.word	0x0800360b
 80035d8:	080035fb 	.word	0x080035fb
 80035dc:	0800360b 	.word	0x0800360b
 80035e0:	0800360b 	.word	0x0800360b
 80035e4:	0800360b 	.word	0x0800360b
 80035e8:	08003603 	.word	0x08003603
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80035ec:	f7ff f988 	bl	8002900 <HAL_RCC_GetPCLK1Freq>
 80035f0:	61f8      	str	r0, [r7, #28]
        break;
 80035f2:	e010      	b.n	8003616 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80035f4:	4b19      	ldr	r3, [pc, #100]	; (800365c <UART_SetConfig+0x2c0>)
 80035f6:	61fb      	str	r3, [r7, #28]
        break;
 80035f8:	e00d      	b.n	8003616 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80035fa:	f7ff f8e9 	bl	80027d0 <HAL_RCC_GetSysClockFreq>
 80035fe:	61f8      	str	r0, [r7, #28]
        break;
 8003600:	e009      	b.n	8003616 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003602:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003606:	61fb      	str	r3, [r7, #28]
        break;
 8003608:	e005      	b.n	8003616 <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 800360a:	2300      	movs	r3, #0
 800360c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003614:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003616:	69fb      	ldr	r3, [r7, #28]
 8003618:	2b00      	cmp	r3, #0
 800361a:	f000 8109 	beq.w	8003830 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	685a      	ldr	r2, [r3, #4]
 8003622:	4613      	mov	r3, r2
 8003624:	005b      	lsls	r3, r3, #1
 8003626:	4413      	add	r3, r2
 8003628:	69fa      	ldr	r2, [r7, #28]
 800362a:	429a      	cmp	r2, r3
 800362c:	d305      	bcc.n	800363a <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003634:	69fa      	ldr	r2, [r7, #28]
 8003636:	429a      	cmp	r2, r3
 8003638:	d912      	bls.n	8003660 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003640:	e0f6      	b.n	8003830 <UART_SetConfig+0x494>
 8003642:	bf00      	nop
 8003644:	efff69f3 	.word	0xefff69f3
 8003648:	40008000 	.word	0x40008000
 800364c:	40013800 	.word	0x40013800
 8003650:	40021000 	.word	0x40021000
 8003654:	40004400 	.word	0x40004400
 8003658:	40004800 	.word	0x40004800
 800365c:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003660:	69fb      	ldr	r3, [r7, #28]
 8003662:	2200      	movs	r2, #0
 8003664:	461c      	mov	r4, r3
 8003666:	4615      	mov	r5, r2
 8003668:	f04f 0200 	mov.w	r2, #0
 800366c:	f04f 0300 	mov.w	r3, #0
 8003670:	022b      	lsls	r3, r5, #8
 8003672:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003676:	0222      	lsls	r2, r4, #8
 8003678:	68f9      	ldr	r1, [r7, #12]
 800367a:	6849      	ldr	r1, [r1, #4]
 800367c:	0849      	lsrs	r1, r1, #1
 800367e:	2000      	movs	r0, #0
 8003680:	4688      	mov	r8, r1
 8003682:	4681      	mov	r9, r0
 8003684:	eb12 0a08 	adds.w	sl, r2, r8
 8003688:	eb43 0b09 	adc.w	fp, r3, r9
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	2200      	movs	r2, #0
 8003692:	603b      	str	r3, [r7, #0]
 8003694:	607a      	str	r2, [r7, #4]
 8003696:	e9d7 2300 	ldrd	r2, r3, [r7]
 800369a:	4650      	mov	r0, sl
 800369c:	4659      	mov	r1, fp
 800369e:	f7fc fde7 	bl	8000270 <__aeabi_uldivmod>
 80036a2:	4602      	mov	r2, r0
 80036a4:	460b      	mov	r3, r1
 80036a6:	4613      	mov	r3, r2
 80036a8:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80036aa:	69bb      	ldr	r3, [r7, #24]
 80036ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80036b0:	d308      	bcc.n	80036c4 <UART_SetConfig+0x328>
 80036b2:	69bb      	ldr	r3, [r7, #24]
 80036b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80036b8:	d204      	bcs.n	80036c4 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	69ba      	ldr	r2, [r7, #24]
 80036c0:	60da      	str	r2, [r3, #12]
 80036c2:	e0b5      	b.n	8003830 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80036ca:	e0b1      	b.n	8003830 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	69db      	ldr	r3, [r3, #28]
 80036d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036d4:	d15d      	bne.n	8003792 <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 80036d6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80036da:	2b08      	cmp	r3, #8
 80036dc:	d827      	bhi.n	800372e <UART_SetConfig+0x392>
 80036de:	a201      	add	r2, pc, #4	; (adr r2, 80036e4 <UART_SetConfig+0x348>)
 80036e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036e4:	08003709 	.word	0x08003709
 80036e8:	08003711 	.word	0x08003711
 80036ec:	08003719 	.word	0x08003719
 80036f0:	0800372f 	.word	0x0800372f
 80036f4:	0800371f 	.word	0x0800371f
 80036f8:	0800372f 	.word	0x0800372f
 80036fc:	0800372f 	.word	0x0800372f
 8003700:	0800372f 	.word	0x0800372f
 8003704:	08003727 	.word	0x08003727
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003708:	f7ff f8fa 	bl	8002900 <HAL_RCC_GetPCLK1Freq>
 800370c:	61f8      	str	r0, [r7, #28]
        break;
 800370e:	e014      	b.n	800373a <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003710:	f7ff f90c 	bl	800292c <HAL_RCC_GetPCLK2Freq>
 8003714:	61f8      	str	r0, [r7, #28]
        break;
 8003716:	e010      	b.n	800373a <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003718:	4b4c      	ldr	r3, [pc, #304]	; (800384c <UART_SetConfig+0x4b0>)
 800371a:	61fb      	str	r3, [r7, #28]
        break;
 800371c:	e00d      	b.n	800373a <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800371e:	f7ff f857 	bl	80027d0 <HAL_RCC_GetSysClockFreq>
 8003722:	61f8      	str	r0, [r7, #28]
        break;
 8003724:	e009      	b.n	800373a <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003726:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800372a:	61fb      	str	r3, [r7, #28]
        break;
 800372c:	e005      	b.n	800373a <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 800372e:	2300      	movs	r3, #0
 8003730:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003738:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800373a:	69fb      	ldr	r3, [r7, #28]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d077      	beq.n	8003830 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003740:	69fb      	ldr	r3, [r7, #28]
 8003742:	005a      	lsls	r2, r3, #1
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	085b      	lsrs	r3, r3, #1
 800374a:	441a      	add	r2, r3
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	fbb2 f3f3 	udiv	r3, r2, r3
 8003754:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003756:	69bb      	ldr	r3, [r7, #24]
 8003758:	2b0f      	cmp	r3, #15
 800375a:	d916      	bls.n	800378a <UART_SetConfig+0x3ee>
 800375c:	69bb      	ldr	r3, [r7, #24]
 800375e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003762:	d212      	bcs.n	800378a <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003764:	69bb      	ldr	r3, [r7, #24]
 8003766:	b29b      	uxth	r3, r3
 8003768:	f023 030f 	bic.w	r3, r3, #15
 800376c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800376e:	69bb      	ldr	r3, [r7, #24]
 8003770:	085b      	lsrs	r3, r3, #1
 8003772:	b29b      	uxth	r3, r3
 8003774:	f003 0307 	and.w	r3, r3, #7
 8003778:	b29a      	uxth	r2, r3
 800377a:	8afb      	ldrh	r3, [r7, #22]
 800377c:	4313      	orrs	r3, r2
 800377e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	8afa      	ldrh	r2, [r7, #22]
 8003786:	60da      	str	r2, [r3, #12]
 8003788:	e052      	b.n	8003830 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003790:	e04e      	b.n	8003830 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003792:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003796:	2b08      	cmp	r3, #8
 8003798:	d827      	bhi.n	80037ea <UART_SetConfig+0x44e>
 800379a:	a201      	add	r2, pc, #4	; (adr r2, 80037a0 <UART_SetConfig+0x404>)
 800379c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037a0:	080037c5 	.word	0x080037c5
 80037a4:	080037cd 	.word	0x080037cd
 80037a8:	080037d5 	.word	0x080037d5
 80037ac:	080037eb 	.word	0x080037eb
 80037b0:	080037db 	.word	0x080037db
 80037b4:	080037eb 	.word	0x080037eb
 80037b8:	080037eb 	.word	0x080037eb
 80037bc:	080037eb 	.word	0x080037eb
 80037c0:	080037e3 	.word	0x080037e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80037c4:	f7ff f89c 	bl	8002900 <HAL_RCC_GetPCLK1Freq>
 80037c8:	61f8      	str	r0, [r7, #28]
        break;
 80037ca:	e014      	b.n	80037f6 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80037cc:	f7ff f8ae 	bl	800292c <HAL_RCC_GetPCLK2Freq>
 80037d0:	61f8      	str	r0, [r7, #28]
        break;
 80037d2:	e010      	b.n	80037f6 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80037d4:	4b1d      	ldr	r3, [pc, #116]	; (800384c <UART_SetConfig+0x4b0>)
 80037d6:	61fb      	str	r3, [r7, #28]
        break;
 80037d8:	e00d      	b.n	80037f6 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80037da:	f7fe fff9 	bl	80027d0 <HAL_RCC_GetSysClockFreq>
 80037de:	61f8      	str	r0, [r7, #28]
        break;
 80037e0:	e009      	b.n	80037f6 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80037e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80037e6:	61fb      	str	r3, [r7, #28]
        break;
 80037e8:	e005      	b.n	80037f6 <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 80037ea:	2300      	movs	r3, #0
 80037ec:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80037f4:	bf00      	nop
    }

    if (pclk != 0U)
 80037f6:	69fb      	ldr	r3, [r7, #28]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d019      	beq.n	8003830 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	085a      	lsrs	r2, r3, #1
 8003802:	69fb      	ldr	r3, [r7, #28]
 8003804:	441a      	add	r2, r3
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	fbb2 f3f3 	udiv	r3, r2, r3
 800380e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003810:	69bb      	ldr	r3, [r7, #24]
 8003812:	2b0f      	cmp	r3, #15
 8003814:	d909      	bls.n	800382a <UART_SetConfig+0x48e>
 8003816:	69bb      	ldr	r3, [r7, #24]
 8003818:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800381c:	d205      	bcs.n	800382a <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800381e:	69bb      	ldr	r3, [r7, #24]
 8003820:	b29a      	uxth	r2, r3
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	60da      	str	r2, [r3, #12]
 8003828:	e002      	b.n	8003830 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	2200      	movs	r2, #0
 8003834:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	2200      	movs	r2, #0
 800383a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800383c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003840:	4618      	mov	r0, r3
 8003842:	3728      	adds	r7, #40	; 0x28
 8003844:	46bd      	mov	sp, r7
 8003846:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800384a:	bf00      	nop
 800384c:	00f42400 	.word	0x00f42400

08003850 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003850:	b480      	push	{r7}
 8003852:	b083      	sub	sp, #12
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800385c:	f003 0301 	and.w	r3, r3, #1
 8003860:	2b00      	cmp	r3, #0
 8003862:	d00a      	beq.n	800387a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	430a      	orrs	r2, r1
 8003878:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800387e:	f003 0302 	and.w	r3, r3, #2
 8003882:	2b00      	cmp	r3, #0
 8003884:	d00a      	beq.n	800389c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	430a      	orrs	r2, r1
 800389a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a0:	f003 0304 	and.w	r3, r3, #4
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d00a      	beq.n	80038be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	430a      	orrs	r2, r1
 80038bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c2:	f003 0308 	and.w	r3, r3, #8
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d00a      	beq.n	80038e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	430a      	orrs	r2, r1
 80038de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e4:	f003 0310 	and.w	r3, r3, #16
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d00a      	beq.n	8003902 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	430a      	orrs	r2, r1
 8003900:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003906:	f003 0320 	and.w	r3, r3, #32
 800390a:	2b00      	cmp	r3, #0
 800390c:	d00a      	beq.n	8003924 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	689b      	ldr	r3, [r3, #8]
 8003914:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	430a      	orrs	r2, r1
 8003922:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003928:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800392c:	2b00      	cmp	r3, #0
 800392e:	d01a      	beq.n	8003966 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	430a      	orrs	r2, r1
 8003944:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800394a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800394e:	d10a      	bne.n	8003966 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	430a      	orrs	r2, r1
 8003964:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800396a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800396e:	2b00      	cmp	r3, #0
 8003970:	d00a      	beq.n	8003988 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	430a      	orrs	r2, r1
 8003986:	605a      	str	r2, [r3, #4]
  }
}
 8003988:	bf00      	nop
 800398a:	370c      	adds	r7, #12
 800398c:	46bd      	mov	sp, r7
 800398e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003992:	4770      	bx	lr

08003994 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b086      	sub	sp, #24
 8003998:	af02      	add	r7, sp, #8
 800399a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2200      	movs	r2, #0
 80039a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80039a4:	f7fd fa6c 	bl	8000e80 <HAL_GetTick>
 80039a8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f003 0308 	and.w	r3, r3, #8
 80039b4:	2b08      	cmp	r3, #8
 80039b6:	d10e      	bne.n	80039d6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80039b8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80039bc:	9300      	str	r3, [sp, #0]
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	2200      	movs	r2, #0
 80039c2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80039c6:	6878      	ldr	r0, [r7, #4]
 80039c8:	f000 f82d 	bl	8003a26 <UART_WaitOnFlagUntilTimeout>
 80039cc:	4603      	mov	r3, r0
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d001      	beq.n	80039d6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80039d2:	2303      	movs	r3, #3
 80039d4:	e023      	b.n	8003a1e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f003 0304 	and.w	r3, r3, #4
 80039e0:	2b04      	cmp	r3, #4
 80039e2:	d10e      	bne.n	8003a02 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80039e4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80039e8:	9300      	str	r3, [sp, #0]
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	2200      	movs	r2, #0
 80039ee:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80039f2:	6878      	ldr	r0, [r7, #4]
 80039f4:	f000 f817 	bl	8003a26 <UART_WaitOnFlagUntilTimeout>
 80039f8:	4603      	mov	r3, r0
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d001      	beq.n	8003a02 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80039fe:	2303      	movs	r3, #3
 8003a00:	e00d      	b.n	8003a1e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2220      	movs	r2, #32
 8003a06:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2220      	movs	r2, #32
 8003a0c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2200      	movs	r2, #0
 8003a12:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2200      	movs	r2, #0
 8003a18:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003a1c:	2300      	movs	r3, #0
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	3710      	adds	r7, #16
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd80      	pop	{r7, pc}

08003a26 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003a26:	b580      	push	{r7, lr}
 8003a28:	b09c      	sub	sp, #112	; 0x70
 8003a2a:	af00      	add	r7, sp, #0
 8003a2c:	60f8      	str	r0, [r7, #12]
 8003a2e:	60b9      	str	r1, [r7, #8]
 8003a30:	603b      	str	r3, [r7, #0]
 8003a32:	4613      	mov	r3, r2
 8003a34:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a36:	e0a5      	b.n	8003b84 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a38:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a3a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a3e:	f000 80a1 	beq.w	8003b84 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a42:	f7fd fa1d 	bl	8000e80 <HAL_GetTick>
 8003a46:	4602      	mov	r2, r0
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	1ad3      	subs	r3, r2, r3
 8003a4c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003a4e:	429a      	cmp	r2, r3
 8003a50:	d302      	bcc.n	8003a58 <UART_WaitOnFlagUntilTimeout+0x32>
 8003a52:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d13e      	bne.n	8003ad6 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a60:	e853 3f00 	ldrex	r3, [r3]
 8003a64:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003a66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a68:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003a6c:	667b      	str	r3, [r7, #100]	; 0x64
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	461a      	mov	r2, r3
 8003a74:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003a76:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003a78:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a7a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003a7c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003a7e:	e841 2300 	strex	r3, r2, [r1]
 8003a82:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003a84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d1e6      	bne.n	8003a58 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	3308      	adds	r3, #8
 8003a90:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a94:	e853 3f00 	ldrex	r3, [r3]
 8003a98:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003a9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a9c:	f023 0301 	bic.w	r3, r3, #1
 8003aa0:	663b      	str	r3, [r7, #96]	; 0x60
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	3308      	adds	r3, #8
 8003aa8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003aaa:	64ba      	str	r2, [r7, #72]	; 0x48
 8003aac:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aae:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003ab0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003ab2:	e841 2300 	strex	r3, r2, [r1]
 8003ab6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003ab8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d1e5      	bne.n	8003a8a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	2220      	movs	r2, #32
 8003ac2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	2220      	movs	r2, #32
 8003ac8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2200      	movs	r2, #0
 8003ace:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003ad2:	2303      	movs	r3, #3
 8003ad4:	e067      	b.n	8003ba6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f003 0304 	and.w	r3, r3, #4
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d04f      	beq.n	8003b84 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	69db      	ldr	r3, [r3, #28]
 8003aea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003aee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003af2:	d147      	bne.n	8003b84 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003afc:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b06:	e853 3f00 	ldrex	r3, [r3]
 8003b0a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b0e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003b12:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	461a      	mov	r2, r3
 8003b1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b1c:	637b      	str	r3, [r7, #52]	; 0x34
 8003b1e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b20:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003b22:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003b24:	e841 2300 	strex	r3, r2, [r1]
 8003b28:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003b2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d1e6      	bne.n	8003afe <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	3308      	adds	r3, #8
 8003b36:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	e853 3f00 	ldrex	r3, [r3]
 8003b3e:	613b      	str	r3, [r7, #16]
   return(result);
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	f023 0301 	bic.w	r3, r3, #1
 8003b46:	66bb      	str	r3, [r7, #104]	; 0x68
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	3308      	adds	r3, #8
 8003b4e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003b50:	623a      	str	r2, [r7, #32]
 8003b52:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b54:	69f9      	ldr	r1, [r7, #28]
 8003b56:	6a3a      	ldr	r2, [r7, #32]
 8003b58:	e841 2300 	strex	r3, r2, [r1]
 8003b5c:	61bb      	str	r3, [r7, #24]
   return(result);
 8003b5e:	69bb      	ldr	r3, [r7, #24]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d1e5      	bne.n	8003b30 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2220      	movs	r2, #32
 8003b68:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2220      	movs	r2, #32
 8003b6e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	2220      	movs	r2, #32
 8003b74:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003b80:	2303      	movs	r3, #3
 8003b82:	e010      	b.n	8003ba6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	69da      	ldr	r2, [r3, #28]
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	4013      	ands	r3, r2
 8003b8e:	68ba      	ldr	r2, [r7, #8]
 8003b90:	429a      	cmp	r2, r3
 8003b92:	bf0c      	ite	eq
 8003b94:	2301      	moveq	r3, #1
 8003b96:	2300      	movne	r3, #0
 8003b98:	b2db      	uxtb	r3, r3
 8003b9a:	461a      	mov	r2, r3
 8003b9c:	79fb      	ldrb	r3, [r7, #7]
 8003b9e:	429a      	cmp	r2, r3
 8003ba0:	f43f af4a 	beq.w	8003a38 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ba4:	2300      	movs	r3, #0
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	3770      	adds	r7, #112	; 0x70
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}
	...

08003bb0 <__errno>:
 8003bb0:	4b01      	ldr	r3, [pc, #4]	; (8003bb8 <__errno+0x8>)
 8003bb2:	6818      	ldr	r0, [r3, #0]
 8003bb4:	4770      	bx	lr
 8003bb6:	bf00      	nop
 8003bb8:	2000000c 	.word	0x2000000c

08003bbc <__libc_init_array>:
 8003bbc:	b570      	push	{r4, r5, r6, lr}
 8003bbe:	4d0d      	ldr	r5, [pc, #52]	; (8003bf4 <__libc_init_array+0x38>)
 8003bc0:	4c0d      	ldr	r4, [pc, #52]	; (8003bf8 <__libc_init_array+0x3c>)
 8003bc2:	1b64      	subs	r4, r4, r5
 8003bc4:	10a4      	asrs	r4, r4, #2
 8003bc6:	2600      	movs	r6, #0
 8003bc8:	42a6      	cmp	r6, r4
 8003bca:	d109      	bne.n	8003be0 <__libc_init_array+0x24>
 8003bcc:	4d0b      	ldr	r5, [pc, #44]	; (8003bfc <__libc_init_array+0x40>)
 8003bce:	4c0c      	ldr	r4, [pc, #48]	; (8003c00 <__libc_init_array+0x44>)
 8003bd0:	f000 ffae 	bl	8004b30 <_init>
 8003bd4:	1b64      	subs	r4, r4, r5
 8003bd6:	10a4      	asrs	r4, r4, #2
 8003bd8:	2600      	movs	r6, #0
 8003bda:	42a6      	cmp	r6, r4
 8003bdc:	d105      	bne.n	8003bea <__libc_init_array+0x2e>
 8003bde:	bd70      	pop	{r4, r5, r6, pc}
 8003be0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003be4:	4798      	blx	r3
 8003be6:	3601      	adds	r6, #1
 8003be8:	e7ee      	b.n	8003bc8 <__libc_init_array+0xc>
 8003bea:	f855 3b04 	ldr.w	r3, [r5], #4
 8003bee:	4798      	blx	r3
 8003bf0:	3601      	adds	r6, #1
 8003bf2:	e7f2      	b.n	8003bda <__libc_init_array+0x1e>
 8003bf4:	08004c60 	.word	0x08004c60
 8003bf8:	08004c60 	.word	0x08004c60
 8003bfc:	08004c60 	.word	0x08004c60
 8003c00:	08004c64 	.word	0x08004c64

08003c04 <memset>:
 8003c04:	4402      	add	r2, r0
 8003c06:	4603      	mov	r3, r0
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d100      	bne.n	8003c0e <memset+0xa>
 8003c0c:	4770      	bx	lr
 8003c0e:	f803 1b01 	strb.w	r1, [r3], #1
 8003c12:	e7f9      	b.n	8003c08 <memset+0x4>

08003c14 <iprintf>:
 8003c14:	b40f      	push	{r0, r1, r2, r3}
 8003c16:	4b0a      	ldr	r3, [pc, #40]	; (8003c40 <iprintf+0x2c>)
 8003c18:	b513      	push	{r0, r1, r4, lr}
 8003c1a:	681c      	ldr	r4, [r3, #0]
 8003c1c:	b124      	cbz	r4, 8003c28 <iprintf+0x14>
 8003c1e:	69a3      	ldr	r3, [r4, #24]
 8003c20:	b913      	cbnz	r3, 8003c28 <iprintf+0x14>
 8003c22:	4620      	mov	r0, r4
 8003c24:	f000 f866 	bl	8003cf4 <__sinit>
 8003c28:	ab05      	add	r3, sp, #20
 8003c2a:	9a04      	ldr	r2, [sp, #16]
 8003c2c:	68a1      	ldr	r1, [r4, #8]
 8003c2e:	9301      	str	r3, [sp, #4]
 8003c30:	4620      	mov	r0, r4
 8003c32:	f000 f9bd 	bl	8003fb0 <_vfiprintf_r>
 8003c36:	b002      	add	sp, #8
 8003c38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c3c:	b004      	add	sp, #16
 8003c3e:	4770      	bx	lr
 8003c40:	2000000c 	.word	0x2000000c

08003c44 <std>:
 8003c44:	2300      	movs	r3, #0
 8003c46:	b510      	push	{r4, lr}
 8003c48:	4604      	mov	r4, r0
 8003c4a:	e9c0 3300 	strd	r3, r3, [r0]
 8003c4e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003c52:	6083      	str	r3, [r0, #8]
 8003c54:	8181      	strh	r1, [r0, #12]
 8003c56:	6643      	str	r3, [r0, #100]	; 0x64
 8003c58:	81c2      	strh	r2, [r0, #14]
 8003c5a:	6183      	str	r3, [r0, #24]
 8003c5c:	4619      	mov	r1, r3
 8003c5e:	2208      	movs	r2, #8
 8003c60:	305c      	adds	r0, #92	; 0x5c
 8003c62:	f7ff ffcf 	bl	8003c04 <memset>
 8003c66:	4b05      	ldr	r3, [pc, #20]	; (8003c7c <std+0x38>)
 8003c68:	6263      	str	r3, [r4, #36]	; 0x24
 8003c6a:	4b05      	ldr	r3, [pc, #20]	; (8003c80 <std+0x3c>)
 8003c6c:	62a3      	str	r3, [r4, #40]	; 0x28
 8003c6e:	4b05      	ldr	r3, [pc, #20]	; (8003c84 <std+0x40>)
 8003c70:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003c72:	4b05      	ldr	r3, [pc, #20]	; (8003c88 <std+0x44>)
 8003c74:	6224      	str	r4, [r4, #32]
 8003c76:	6323      	str	r3, [r4, #48]	; 0x30
 8003c78:	bd10      	pop	{r4, pc}
 8003c7a:	bf00      	nop
 8003c7c:	08004559 	.word	0x08004559
 8003c80:	0800457b 	.word	0x0800457b
 8003c84:	080045b3 	.word	0x080045b3
 8003c88:	080045d7 	.word	0x080045d7

08003c8c <_cleanup_r>:
 8003c8c:	4901      	ldr	r1, [pc, #4]	; (8003c94 <_cleanup_r+0x8>)
 8003c8e:	f000 b8af 	b.w	8003df0 <_fwalk_reent>
 8003c92:	bf00      	nop
 8003c94:	080048b1 	.word	0x080048b1

08003c98 <__sfmoreglue>:
 8003c98:	b570      	push	{r4, r5, r6, lr}
 8003c9a:	2268      	movs	r2, #104	; 0x68
 8003c9c:	1e4d      	subs	r5, r1, #1
 8003c9e:	4355      	muls	r5, r2
 8003ca0:	460e      	mov	r6, r1
 8003ca2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003ca6:	f000 f8e5 	bl	8003e74 <_malloc_r>
 8003caa:	4604      	mov	r4, r0
 8003cac:	b140      	cbz	r0, 8003cc0 <__sfmoreglue+0x28>
 8003cae:	2100      	movs	r1, #0
 8003cb0:	e9c0 1600 	strd	r1, r6, [r0]
 8003cb4:	300c      	adds	r0, #12
 8003cb6:	60a0      	str	r0, [r4, #8]
 8003cb8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003cbc:	f7ff ffa2 	bl	8003c04 <memset>
 8003cc0:	4620      	mov	r0, r4
 8003cc2:	bd70      	pop	{r4, r5, r6, pc}

08003cc4 <__sfp_lock_acquire>:
 8003cc4:	4801      	ldr	r0, [pc, #4]	; (8003ccc <__sfp_lock_acquire+0x8>)
 8003cc6:	f000 b8b3 	b.w	8003e30 <__retarget_lock_acquire_recursive>
 8003cca:	bf00      	nop
 8003ccc:	2000020d 	.word	0x2000020d

08003cd0 <__sfp_lock_release>:
 8003cd0:	4801      	ldr	r0, [pc, #4]	; (8003cd8 <__sfp_lock_release+0x8>)
 8003cd2:	f000 b8ae 	b.w	8003e32 <__retarget_lock_release_recursive>
 8003cd6:	bf00      	nop
 8003cd8:	2000020d 	.word	0x2000020d

08003cdc <__sinit_lock_acquire>:
 8003cdc:	4801      	ldr	r0, [pc, #4]	; (8003ce4 <__sinit_lock_acquire+0x8>)
 8003cde:	f000 b8a7 	b.w	8003e30 <__retarget_lock_acquire_recursive>
 8003ce2:	bf00      	nop
 8003ce4:	2000020e 	.word	0x2000020e

08003ce8 <__sinit_lock_release>:
 8003ce8:	4801      	ldr	r0, [pc, #4]	; (8003cf0 <__sinit_lock_release+0x8>)
 8003cea:	f000 b8a2 	b.w	8003e32 <__retarget_lock_release_recursive>
 8003cee:	bf00      	nop
 8003cf0:	2000020e 	.word	0x2000020e

08003cf4 <__sinit>:
 8003cf4:	b510      	push	{r4, lr}
 8003cf6:	4604      	mov	r4, r0
 8003cf8:	f7ff fff0 	bl	8003cdc <__sinit_lock_acquire>
 8003cfc:	69a3      	ldr	r3, [r4, #24]
 8003cfe:	b11b      	cbz	r3, 8003d08 <__sinit+0x14>
 8003d00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d04:	f7ff bff0 	b.w	8003ce8 <__sinit_lock_release>
 8003d08:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003d0c:	6523      	str	r3, [r4, #80]	; 0x50
 8003d0e:	4b13      	ldr	r3, [pc, #76]	; (8003d5c <__sinit+0x68>)
 8003d10:	4a13      	ldr	r2, [pc, #76]	; (8003d60 <__sinit+0x6c>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	62a2      	str	r2, [r4, #40]	; 0x28
 8003d16:	42a3      	cmp	r3, r4
 8003d18:	bf04      	itt	eq
 8003d1a:	2301      	moveq	r3, #1
 8003d1c:	61a3      	streq	r3, [r4, #24]
 8003d1e:	4620      	mov	r0, r4
 8003d20:	f000 f820 	bl	8003d64 <__sfp>
 8003d24:	6060      	str	r0, [r4, #4]
 8003d26:	4620      	mov	r0, r4
 8003d28:	f000 f81c 	bl	8003d64 <__sfp>
 8003d2c:	60a0      	str	r0, [r4, #8]
 8003d2e:	4620      	mov	r0, r4
 8003d30:	f000 f818 	bl	8003d64 <__sfp>
 8003d34:	2200      	movs	r2, #0
 8003d36:	60e0      	str	r0, [r4, #12]
 8003d38:	2104      	movs	r1, #4
 8003d3a:	6860      	ldr	r0, [r4, #4]
 8003d3c:	f7ff ff82 	bl	8003c44 <std>
 8003d40:	68a0      	ldr	r0, [r4, #8]
 8003d42:	2201      	movs	r2, #1
 8003d44:	2109      	movs	r1, #9
 8003d46:	f7ff ff7d 	bl	8003c44 <std>
 8003d4a:	68e0      	ldr	r0, [r4, #12]
 8003d4c:	2202      	movs	r2, #2
 8003d4e:	2112      	movs	r1, #18
 8003d50:	f7ff ff78 	bl	8003c44 <std>
 8003d54:	2301      	movs	r3, #1
 8003d56:	61a3      	str	r3, [r4, #24]
 8003d58:	e7d2      	b.n	8003d00 <__sinit+0xc>
 8003d5a:	bf00      	nop
 8003d5c:	08004bc0 	.word	0x08004bc0
 8003d60:	08003c8d 	.word	0x08003c8d

08003d64 <__sfp>:
 8003d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d66:	4607      	mov	r7, r0
 8003d68:	f7ff ffac 	bl	8003cc4 <__sfp_lock_acquire>
 8003d6c:	4b1e      	ldr	r3, [pc, #120]	; (8003de8 <__sfp+0x84>)
 8003d6e:	681e      	ldr	r6, [r3, #0]
 8003d70:	69b3      	ldr	r3, [r6, #24]
 8003d72:	b913      	cbnz	r3, 8003d7a <__sfp+0x16>
 8003d74:	4630      	mov	r0, r6
 8003d76:	f7ff ffbd 	bl	8003cf4 <__sinit>
 8003d7a:	3648      	adds	r6, #72	; 0x48
 8003d7c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003d80:	3b01      	subs	r3, #1
 8003d82:	d503      	bpl.n	8003d8c <__sfp+0x28>
 8003d84:	6833      	ldr	r3, [r6, #0]
 8003d86:	b30b      	cbz	r3, 8003dcc <__sfp+0x68>
 8003d88:	6836      	ldr	r6, [r6, #0]
 8003d8a:	e7f7      	b.n	8003d7c <__sfp+0x18>
 8003d8c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003d90:	b9d5      	cbnz	r5, 8003dc8 <__sfp+0x64>
 8003d92:	4b16      	ldr	r3, [pc, #88]	; (8003dec <__sfp+0x88>)
 8003d94:	60e3      	str	r3, [r4, #12]
 8003d96:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003d9a:	6665      	str	r5, [r4, #100]	; 0x64
 8003d9c:	f000 f847 	bl	8003e2e <__retarget_lock_init_recursive>
 8003da0:	f7ff ff96 	bl	8003cd0 <__sfp_lock_release>
 8003da4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003da8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003dac:	6025      	str	r5, [r4, #0]
 8003dae:	61a5      	str	r5, [r4, #24]
 8003db0:	2208      	movs	r2, #8
 8003db2:	4629      	mov	r1, r5
 8003db4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003db8:	f7ff ff24 	bl	8003c04 <memset>
 8003dbc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003dc0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003dc4:	4620      	mov	r0, r4
 8003dc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003dc8:	3468      	adds	r4, #104	; 0x68
 8003dca:	e7d9      	b.n	8003d80 <__sfp+0x1c>
 8003dcc:	2104      	movs	r1, #4
 8003dce:	4638      	mov	r0, r7
 8003dd0:	f7ff ff62 	bl	8003c98 <__sfmoreglue>
 8003dd4:	4604      	mov	r4, r0
 8003dd6:	6030      	str	r0, [r6, #0]
 8003dd8:	2800      	cmp	r0, #0
 8003dda:	d1d5      	bne.n	8003d88 <__sfp+0x24>
 8003ddc:	f7ff ff78 	bl	8003cd0 <__sfp_lock_release>
 8003de0:	230c      	movs	r3, #12
 8003de2:	603b      	str	r3, [r7, #0]
 8003de4:	e7ee      	b.n	8003dc4 <__sfp+0x60>
 8003de6:	bf00      	nop
 8003de8:	08004bc0 	.word	0x08004bc0
 8003dec:	ffff0001 	.word	0xffff0001

08003df0 <_fwalk_reent>:
 8003df0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003df4:	4606      	mov	r6, r0
 8003df6:	4688      	mov	r8, r1
 8003df8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003dfc:	2700      	movs	r7, #0
 8003dfe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003e02:	f1b9 0901 	subs.w	r9, r9, #1
 8003e06:	d505      	bpl.n	8003e14 <_fwalk_reent+0x24>
 8003e08:	6824      	ldr	r4, [r4, #0]
 8003e0a:	2c00      	cmp	r4, #0
 8003e0c:	d1f7      	bne.n	8003dfe <_fwalk_reent+0xe>
 8003e0e:	4638      	mov	r0, r7
 8003e10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003e14:	89ab      	ldrh	r3, [r5, #12]
 8003e16:	2b01      	cmp	r3, #1
 8003e18:	d907      	bls.n	8003e2a <_fwalk_reent+0x3a>
 8003e1a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003e1e:	3301      	adds	r3, #1
 8003e20:	d003      	beq.n	8003e2a <_fwalk_reent+0x3a>
 8003e22:	4629      	mov	r1, r5
 8003e24:	4630      	mov	r0, r6
 8003e26:	47c0      	blx	r8
 8003e28:	4307      	orrs	r7, r0
 8003e2a:	3568      	adds	r5, #104	; 0x68
 8003e2c:	e7e9      	b.n	8003e02 <_fwalk_reent+0x12>

08003e2e <__retarget_lock_init_recursive>:
 8003e2e:	4770      	bx	lr

08003e30 <__retarget_lock_acquire_recursive>:
 8003e30:	4770      	bx	lr

08003e32 <__retarget_lock_release_recursive>:
 8003e32:	4770      	bx	lr

08003e34 <sbrk_aligned>:
 8003e34:	b570      	push	{r4, r5, r6, lr}
 8003e36:	4e0e      	ldr	r6, [pc, #56]	; (8003e70 <sbrk_aligned+0x3c>)
 8003e38:	460c      	mov	r4, r1
 8003e3a:	6831      	ldr	r1, [r6, #0]
 8003e3c:	4605      	mov	r5, r0
 8003e3e:	b911      	cbnz	r1, 8003e46 <sbrk_aligned+0x12>
 8003e40:	f000 fb7a 	bl	8004538 <_sbrk_r>
 8003e44:	6030      	str	r0, [r6, #0]
 8003e46:	4621      	mov	r1, r4
 8003e48:	4628      	mov	r0, r5
 8003e4a:	f000 fb75 	bl	8004538 <_sbrk_r>
 8003e4e:	1c43      	adds	r3, r0, #1
 8003e50:	d00a      	beq.n	8003e68 <sbrk_aligned+0x34>
 8003e52:	1cc4      	adds	r4, r0, #3
 8003e54:	f024 0403 	bic.w	r4, r4, #3
 8003e58:	42a0      	cmp	r0, r4
 8003e5a:	d007      	beq.n	8003e6c <sbrk_aligned+0x38>
 8003e5c:	1a21      	subs	r1, r4, r0
 8003e5e:	4628      	mov	r0, r5
 8003e60:	f000 fb6a 	bl	8004538 <_sbrk_r>
 8003e64:	3001      	adds	r0, #1
 8003e66:	d101      	bne.n	8003e6c <sbrk_aligned+0x38>
 8003e68:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8003e6c:	4620      	mov	r0, r4
 8003e6e:	bd70      	pop	{r4, r5, r6, pc}
 8003e70:	20000214 	.word	0x20000214

08003e74 <_malloc_r>:
 8003e74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e78:	1ccd      	adds	r5, r1, #3
 8003e7a:	f025 0503 	bic.w	r5, r5, #3
 8003e7e:	3508      	adds	r5, #8
 8003e80:	2d0c      	cmp	r5, #12
 8003e82:	bf38      	it	cc
 8003e84:	250c      	movcc	r5, #12
 8003e86:	2d00      	cmp	r5, #0
 8003e88:	4607      	mov	r7, r0
 8003e8a:	db01      	blt.n	8003e90 <_malloc_r+0x1c>
 8003e8c:	42a9      	cmp	r1, r5
 8003e8e:	d905      	bls.n	8003e9c <_malloc_r+0x28>
 8003e90:	230c      	movs	r3, #12
 8003e92:	603b      	str	r3, [r7, #0]
 8003e94:	2600      	movs	r6, #0
 8003e96:	4630      	mov	r0, r6
 8003e98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003e9c:	4e2e      	ldr	r6, [pc, #184]	; (8003f58 <_malloc_r+0xe4>)
 8003e9e:	f000 fdbb 	bl	8004a18 <__malloc_lock>
 8003ea2:	6833      	ldr	r3, [r6, #0]
 8003ea4:	461c      	mov	r4, r3
 8003ea6:	bb34      	cbnz	r4, 8003ef6 <_malloc_r+0x82>
 8003ea8:	4629      	mov	r1, r5
 8003eaa:	4638      	mov	r0, r7
 8003eac:	f7ff ffc2 	bl	8003e34 <sbrk_aligned>
 8003eb0:	1c43      	adds	r3, r0, #1
 8003eb2:	4604      	mov	r4, r0
 8003eb4:	d14d      	bne.n	8003f52 <_malloc_r+0xde>
 8003eb6:	6834      	ldr	r4, [r6, #0]
 8003eb8:	4626      	mov	r6, r4
 8003eba:	2e00      	cmp	r6, #0
 8003ebc:	d140      	bne.n	8003f40 <_malloc_r+0xcc>
 8003ebe:	6823      	ldr	r3, [r4, #0]
 8003ec0:	4631      	mov	r1, r6
 8003ec2:	4638      	mov	r0, r7
 8003ec4:	eb04 0803 	add.w	r8, r4, r3
 8003ec8:	f000 fb36 	bl	8004538 <_sbrk_r>
 8003ecc:	4580      	cmp	r8, r0
 8003ece:	d13a      	bne.n	8003f46 <_malloc_r+0xd2>
 8003ed0:	6821      	ldr	r1, [r4, #0]
 8003ed2:	3503      	adds	r5, #3
 8003ed4:	1a6d      	subs	r5, r5, r1
 8003ed6:	f025 0503 	bic.w	r5, r5, #3
 8003eda:	3508      	adds	r5, #8
 8003edc:	2d0c      	cmp	r5, #12
 8003ede:	bf38      	it	cc
 8003ee0:	250c      	movcc	r5, #12
 8003ee2:	4629      	mov	r1, r5
 8003ee4:	4638      	mov	r0, r7
 8003ee6:	f7ff ffa5 	bl	8003e34 <sbrk_aligned>
 8003eea:	3001      	adds	r0, #1
 8003eec:	d02b      	beq.n	8003f46 <_malloc_r+0xd2>
 8003eee:	6823      	ldr	r3, [r4, #0]
 8003ef0:	442b      	add	r3, r5
 8003ef2:	6023      	str	r3, [r4, #0]
 8003ef4:	e00e      	b.n	8003f14 <_malloc_r+0xa0>
 8003ef6:	6822      	ldr	r2, [r4, #0]
 8003ef8:	1b52      	subs	r2, r2, r5
 8003efa:	d41e      	bmi.n	8003f3a <_malloc_r+0xc6>
 8003efc:	2a0b      	cmp	r2, #11
 8003efe:	d916      	bls.n	8003f2e <_malloc_r+0xba>
 8003f00:	1961      	adds	r1, r4, r5
 8003f02:	42a3      	cmp	r3, r4
 8003f04:	6025      	str	r5, [r4, #0]
 8003f06:	bf18      	it	ne
 8003f08:	6059      	strne	r1, [r3, #4]
 8003f0a:	6863      	ldr	r3, [r4, #4]
 8003f0c:	bf08      	it	eq
 8003f0e:	6031      	streq	r1, [r6, #0]
 8003f10:	5162      	str	r2, [r4, r5]
 8003f12:	604b      	str	r3, [r1, #4]
 8003f14:	4638      	mov	r0, r7
 8003f16:	f104 060b 	add.w	r6, r4, #11
 8003f1a:	f000 fd83 	bl	8004a24 <__malloc_unlock>
 8003f1e:	f026 0607 	bic.w	r6, r6, #7
 8003f22:	1d23      	adds	r3, r4, #4
 8003f24:	1af2      	subs	r2, r6, r3
 8003f26:	d0b6      	beq.n	8003e96 <_malloc_r+0x22>
 8003f28:	1b9b      	subs	r3, r3, r6
 8003f2a:	50a3      	str	r3, [r4, r2]
 8003f2c:	e7b3      	b.n	8003e96 <_malloc_r+0x22>
 8003f2e:	6862      	ldr	r2, [r4, #4]
 8003f30:	42a3      	cmp	r3, r4
 8003f32:	bf0c      	ite	eq
 8003f34:	6032      	streq	r2, [r6, #0]
 8003f36:	605a      	strne	r2, [r3, #4]
 8003f38:	e7ec      	b.n	8003f14 <_malloc_r+0xa0>
 8003f3a:	4623      	mov	r3, r4
 8003f3c:	6864      	ldr	r4, [r4, #4]
 8003f3e:	e7b2      	b.n	8003ea6 <_malloc_r+0x32>
 8003f40:	4634      	mov	r4, r6
 8003f42:	6876      	ldr	r6, [r6, #4]
 8003f44:	e7b9      	b.n	8003eba <_malloc_r+0x46>
 8003f46:	230c      	movs	r3, #12
 8003f48:	603b      	str	r3, [r7, #0]
 8003f4a:	4638      	mov	r0, r7
 8003f4c:	f000 fd6a 	bl	8004a24 <__malloc_unlock>
 8003f50:	e7a1      	b.n	8003e96 <_malloc_r+0x22>
 8003f52:	6025      	str	r5, [r4, #0]
 8003f54:	e7de      	b.n	8003f14 <_malloc_r+0xa0>
 8003f56:	bf00      	nop
 8003f58:	20000210 	.word	0x20000210

08003f5c <__sfputc_r>:
 8003f5c:	6893      	ldr	r3, [r2, #8]
 8003f5e:	3b01      	subs	r3, #1
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	b410      	push	{r4}
 8003f64:	6093      	str	r3, [r2, #8]
 8003f66:	da08      	bge.n	8003f7a <__sfputc_r+0x1e>
 8003f68:	6994      	ldr	r4, [r2, #24]
 8003f6a:	42a3      	cmp	r3, r4
 8003f6c:	db01      	blt.n	8003f72 <__sfputc_r+0x16>
 8003f6e:	290a      	cmp	r1, #10
 8003f70:	d103      	bne.n	8003f7a <__sfputc_r+0x1e>
 8003f72:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003f76:	f000 bb33 	b.w	80045e0 <__swbuf_r>
 8003f7a:	6813      	ldr	r3, [r2, #0]
 8003f7c:	1c58      	adds	r0, r3, #1
 8003f7e:	6010      	str	r0, [r2, #0]
 8003f80:	7019      	strb	r1, [r3, #0]
 8003f82:	4608      	mov	r0, r1
 8003f84:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003f88:	4770      	bx	lr

08003f8a <__sfputs_r>:
 8003f8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f8c:	4606      	mov	r6, r0
 8003f8e:	460f      	mov	r7, r1
 8003f90:	4614      	mov	r4, r2
 8003f92:	18d5      	adds	r5, r2, r3
 8003f94:	42ac      	cmp	r4, r5
 8003f96:	d101      	bne.n	8003f9c <__sfputs_r+0x12>
 8003f98:	2000      	movs	r0, #0
 8003f9a:	e007      	b.n	8003fac <__sfputs_r+0x22>
 8003f9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003fa0:	463a      	mov	r2, r7
 8003fa2:	4630      	mov	r0, r6
 8003fa4:	f7ff ffda 	bl	8003f5c <__sfputc_r>
 8003fa8:	1c43      	adds	r3, r0, #1
 8003faa:	d1f3      	bne.n	8003f94 <__sfputs_r+0xa>
 8003fac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003fb0 <_vfiprintf_r>:
 8003fb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fb4:	460d      	mov	r5, r1
 8003fb6:	b09d      	sub	sp, #116	; 0x74
 8003fb8:	4614      	mov	r4, r2
 8003fba:	4698      	mov	r8, r3
 8003fbc:	4606      	mov	r6, r0
 8003fbe:	b118      	cbz	r0, 8003fc8 <_vfiprintf_r+0x18>
 8003fc0:	6983      	ldr	r3, [r0, #24]
 8003fc2:	b90b      	cbnz	r3, 8003fc8 <_vfiprintf_r+0x18>
 8003fc4:	f7ff fe96 	bl	8003cf4 <__sinit>
 8003fc8:	4b89      	ldr	r3, [pc, #548]	; (80041f0 <_vfiprintf_r+0x240>)
 8003fca:	429d      	cmp	r5, r3
 8003fcc:	d11b      	bne.n	8004006 <_vfiprintf_r+0x56>
 8003fce:	6875      	ldr	r5, [r6, #4]
 8003fd0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003fd2:	07d9      	lsls	r1, r3, #31
 8003fd4:	d405      	bmi.n	8003fe2 <_vfiprintf_r+0x32>
 8003fd6:	89ab      	ldrh	r3, [r5, #12]
 8003fd8:	059a      	lsls	r2, r3, #22
 8003fda:	d402      	bmi.n	8003fe2 <_vfiprintf_r+0x32>
 8003fdc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003fde:	f7ff ff27 	bl	8003e30 <__retarget_lock_acquire_recursive>
 8003fe2:	89ab      	ldrh	r3, [r5, #12]
 8003fe4:	071b      	lsls	r3, r3, #28
 8003fe6:	d501      	bpl.n	8003fec <_vfiprintf_r+0x3c>
 8003fe8:	692b      	ldr	r3, [r5, #16]
 8003fea:	b9eb      	cbnz	r3, 8004028 <_vfiprintf_r+0x78>
 8003fec:	4629      	mov	r1, r5
 8003fee:	4630      	mov	r0, r6
 8003ff0:	f000 fb5a 	bl	80046a8 <__swsetup_r>
 8003ff4:	b1c0      	cbz	r0, 8004028 <_vfiprintf_r+0x78>
 8003ff6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003ff8:	07dc      	lsls	r4, r3, #31
 8003ffa:	d50e      	bpl.n	800401a <_vfiprintf_r+0x6a>
 8003ffc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004000:	b01d      	add	sp, #116	; 0x74
 8004002:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004006:	4b7b      	ldr	r3, [pc, #492]	; (80041f4 <_vfiprintf_r+0x244>)
 8004008:	429d      	cmp	r5, r3
 800400a:	d101      	bne.n	8004010 <_vfiprintf_r+0x60>
 800400c:	68b5      	ldr	r5, [r6, #8]
 800400e:	e7df      	b.n	8003fd0 <_vfiprintf_r+0x20>
 8004010:	4b79      	ldr	r3, [pc, #484]	; (80041f8 <_vfiprintf_r+0x248>)
 8004012:	429d      	cmp	r5, r3
 8004014:	bf08      	it	eq
 8004016:	68f5      	ldreq	r5, [r6, #12]
 8004018:	e7da      	b.n	8003fd0 <_vfiprintf_r+0x20>
 800401a:	89ab      	ldrh	r3, [r5, #12]
 800401c:	0598      	lsls	r0, r3, #22
 800401e:	d4ed      	bmi.n	8003ffc <_vfiprintf_r+0x4c>
 8004020:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004022:	f7ff ff06 	bl	8003e32 <__retarget_lock_release_recursive>
 8004026:	e7e9      	b.n	8003ffc <_vfiprintf_r+0x4c>
 8004028:	2300      	movs	r3, #0
 800402a:	9309      	str	r3, [sp, #36]	; 0x24
 800402c:	2320      	movs	r3, #32
 800402e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004032:	f8cd 800c 	str.w	r8, [sp, #12]
 8004036:	2330      	movs	r3, #48	; 0x30
 8004038:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80041fc <_vfiprintf_r+0x24c>
 800403c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004040:	f04f 0901 	mov.w	r9, #1
 8004044:	4623      	mov	r3, r4
 8004046:	469a      	mov	sl, r3
 8004048:	f813 2b01 	ldrb.w	r2, [r3], #1
 800404c:	b10a      	cbz	r2, 8004052 <_vfiprintf_r+0xa2>
 800404e:	2a25      	cmp	r2, #37	; 0x25
 8004050:	d1f9      	bne.n	8004046 <_vfiprintf_r+0x96>
 8004052:	ebba 0b04 	subs.w	fp, sl, r4
 8004056:	d00b      	beq.n	8004070 <_vfiprintf_r+0xc0>
 8004058:	465b      	mov	r3, fp
 800405a:	4622      	mov	r2, r4
 800405c:	4629      	mov	r1, r5
 800405e:	4630      	mov	r0, r6
 8004060:	f7ff ff93 	bl	8003f8a <__sfputs_r>
 8004064:	3001      	adds	r0, #1
 8004066:	f000 80aa 	beq.w	80041be <_vfiprintf_r+0x20e>
 800406a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800406c:	445a      	add	r2, fp
 800406e:	9209      	str	r2, [sp, #36]	; 0x24
 8004070:	f89a 3000 	ldrb.w	r3, [sl]
 8004074:	2b00      	cmp	r3, #0
 8004076:	f000 80a2 	beq.w	80041be <_vfiprintf_r+0x20e>
 800407a:	2300      	movs	r3, #0
 800407c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004080:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004084:	f10a 0a01 	add.w	sl, sl, #1
 8004088:	9304      	str	r3, [sp, #16]
 800408a:	9307      	str	r3, [sp, #28]
 800408c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004090:	931a      	str	r3, [sp, #104]	; 0x68
 8004092:	4654      	mov	r4, sl
 8004094:	2205      	movs	r2, #5
 8004096:	f814 1b01 	ldrb.w	r1, [r4], #1
 800409a:	4858      	ldr	r0, [pc, #352]	; (80041fc <_vfiprintf_r+0x24c>)
 800409c:	f7fc f898 	bl	80001d0 <memchr>
 80040a0:	9a04      	ldr	r2, [sp, #16]
 80040a2:	b9d8      	cbnz	r0, 80040dc <_vfiprintf_r+0x12c>
 80040a4:	06d1      	lsls	r1, r2, #27
 80040a6:	bf44      	itt	mi
 80040a8:	2320      	movmi	r3, #32
 80040aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80040ae:	0713      	lsls	r3, r2, #28
 80040b0:	bf44      	itt	mi
 80040b2:	232b      	movmi	r3, #43	; 0x2b
 80040b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80040b8:	f89a 3000 	ldrb.w	r3, [sl]
 80040bc:	2b2a      	cmp	r3, #42	; 0x2a
 80040be:	d015      	beq.n	80040ec <_vfiprintf_r+0x13c>
 80040c0:	9a07      	ldr	r2, [sp, #28]
 80040c2:	4654      	mov	r4, sl
 80040c4:	2000      	movs	r0, #0
 80040c6:	f04f 0c0a 	mov.w	ip, #10
 80040ca:	4621      	mov	r1, r4
 80040cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80040d0:	3b30      	subs	r3, #48	; 0x30
 80040d2:	2b09      	cmp	r3, #9
 80040d4:	d94e      	bls.n	8004174 <_vfiprintf_r+0x1c4>
 80040d6:	b1b0      	cbz	r0, 8004106 <_vfiprintf_r+0x156>
 80040d8:	9207      	str	r2, [sp, #28]
 80040da:	e014      	b.n	8004106 <_vfiprintf_r+0x156>
 80040dc:	eba0 0308 	sub.w	r3, r0, r8
 80040e0:	fa09 f303 	lsl.w	r3, r9, r3
 80040e4:	4313      	orrs	r3, r2
 80040e6:	9304      	str	r3, [sp, #16]
 80040e8:	46a2      	mov	sl, r4
 80040ea:	e7d2      	b.n	8004092 <_vfiprintf_r+0xe2>
 80040ec:	9b03      	ldr	r3, [sp, #12]
 80040ee:	1d19      	adds	r1, r3, #4
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	9103      	str	r1, [sp, #12]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	bfbb      	ittet	lt
 80040f8:	425b      	neglt	r3, r3
 80040fa:	f042 0202 	orrlt.w	r2, r2, #2
 80040fe:	9307      	strge	r3, [sp, #28]
 8004100:	9307      	strlt	r3, [sp, #28]
 8004102:	bfb8      	it	lt
 8004104:	9204      	strlt	r2, [sp, #16]
 8004106:	7823      	ldrb	r3, [r4, #0]
 8004108:	2b2e      	cmp	r3, #46	; 0x2e
 800410a:	d10c      	bne.n	8004126 <_vfiprintf_r+0x176>
 800410c:	7863      	ldrb	r3, [r4, #1]
 800410e:	2b2a      	cmp	r3, #42	; 0x2a
 8004110:	d135      	bne.n	800417e <_vfiprintf_r+0x1ce>
 8004112:	9b03      	ldr	r3, [sp, #12]
 8004114:	1d1a      	adds	r2, r3, #4
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	9203      	str	r2, [sp, #12]
 800411a:	2b00      	cmp	r3, #0
 800411c:	bfb8      	it	lt
 800411e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004122:	3402      	adds	r4, #2
 8004124:	9305      	str	r3, [sp, #20]
 8004126:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800420c <_vfiprintf_r+0x25c>
 800412a:	7821      	ldrb	r1, [r4, #0]
 800412c:	2203      	movs	r2, #3
 800412e:	4650      	mov	r0, sl
 8004130:	f7fc f84e 	bl	80001d0 <memchr>
 8004134:	b140      	cbz	r0, 8004148 <_vfiprintf_r+0x198>
 8004136:	2340      	movs	r3, #64	; 0x40
 8004138:	eba0 000a 	sub.w	r0, r0, sl
 800413c:	fa03 f000 	lsl.w	r0, r3, r0
 8004140:	9b04      	ldr	r3, [sp, #16]
 8004142:	4303      	orrs	r3, r0
 8004144:	3401      	adds	r4, #1
 8004146:	9304      	str	r3, [sp, #16]
 8004148:	f814 1b01 	ldrb.w	r1, [r4], #1
 800414c:	482c      	ldr	r0, [pc, #176]	; (8004200 <_vfiprintf_r+0x250>)
 800414e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004152:	2206      	movs	r2, #6
 8004154:	f7fc f83c 	bl	80001d0 <memchr>
 8004158:	2800      	cmp	r0, #0
 800415a:	d03f      	beq.n	80041dc <_vfiprintf_r+0x22c>
 800415c:	4b29      	ldr	r3, [pc, #164]	; (8004204 <_vfiprintf_r+0x254>)
 800415e:	bb1b      	cbnz	r3, 80041a8 <_vfiprintf_r+0x1f8>
 8004160:	9b03      	ldr	r3, [sp, #12]
 8004162:	3307      	adds	r3, #7
 8004164:	f023 0307 	bic.w	r3, r3, #7
 8004168:	3308      	adds	r3, #8
 800416a:	9303      	str	r3, [sp, #12]
 800416c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800416e:	443b      	add	r3, r7
 8004170:	9309      	str	r3, [sp, #36]	; 0x24
 8004172:	e767      	b.n	8004044 <_vfiprintf_r+0x94>
 8004174:	fb0c 3202 	mla	r2, ip, r2, r3
 8004178:	460c      	mov	r4, r1
 800417a:	2001      	movs	r0, #1
 800417c:	e7a5      	b.n	80040ca <_vfiprintf_r+0x11a>
 800417e:	2300      	movs	r3, #0
 8004180:	3401      	adds	r4, #1
 8004182:	9305      	str	r3, [sp, #20]
 8004184:	4619      	mov	r1, r3
 8004186:	f04f 0c0a 	mov.w	ip, #10
 800418a:	4620      	mov	r0, r4
 800418c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004190:	3a30      	subs	r2, #48	; 0x30
 8004192:	2a09      	cmp	r2, #9
 8004194:	d903      	bls.n	800419e <_vfiprintf_r+0x1ee>
 8004196:	2b00      	cmp	r3, #0
 8004198:	d0c5      	beq.n	8004126 <_vfiprintf_r+0x176>
 800419a:	9105      	str	r1, [sp, #20]
 800419c:	e7c3      	b.n	8004126 <_vfiprintf_r+0x176>
 800419e:	fb0c 2101 	mla	r1, ip, r1, r2
 80041a2:	4604      	mov	r4, r0
 80041a4:	2301      	movs	r3, #1
 80041a6:	e7f0      	b.n	800418a <_vfiprintf_r+0x1da>
 80041a8:	ab03      	add	r3, sp, #12
 80041aa:	9300      	str	r3, [sp, #0]
 80041ac:	462a      	mov	r2, r5
 80041ae:	4b16      	ldr	r3, [pc, #88]	; (8004208 <_vfiprintf_r+0x258>)
 80041b0:	a904      	add	r1, sp, #16
 80041b2:	4630      	mov	r0, r6
 80041b4:	f3af 8000 	nop.w
 80041b8:	4607      	mov	r7, r0
 80041ba:	1c78      	adds	r0, r7, #1
 80041bc:	d1d6      	bne.n	800416c <_vfiprintf_r+0x1bc>
 80041be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80041c0:	07d9      	lsls	r1, r3, #31
 80041c2:	d405      	bmi.n	80041d0 <_vfiprintf_r+0x220>
 80041c4:	89ab      	ldrh	r3, [r5, #12]
 80041c6:	059a      	lsls	r2, r3, #22
 80041c8:	d402      	bmi.n	80041d0 <_vfiprintf_r+0x220>
 80041ca:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80041cc:	f7ff fe31 	bl	8003e32 <__retarget_lock_release_recursive>
 80041d0:	89ab      	ldrh	r3, [r5, #12]
 80041d2:	065b      	lsls	r3, r3, #25
 80041d4:	f53f af12 	bmi.w	8003ffc <_vfiprintf_r+0x4c>
 80041d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80041da:	e711      	b.n	8004000 <_vfiprintf_r+0x50>
 80041dc:	ab03      	add	r3, sp, #12
 80041de:	9300      	str	r3, [sp, #0]
 80041e0:	462a      	mov	r2, r5
 80041e2:	4b09      	ldr	r3, [pc, #36]	; (8004208 <_vfiprintf_r+0x258>)
 80041e4:	a904      	add	r1, sp, #16
 80041e6:	4630      	mov	r0, r6
 80041e8:	f000 f880 	bl	80042ec <_printf_i>
 80041ec:	e7e4      	b.n	80041b8 <_vfiprintf_r+0x208>
 80041ee:	bf00      	nop
 80041f0:	08004be4 	.word	0x08004be4
 80041f4:	08004c04 	.word	0x08004c04
 80041f8:	08004bc4 	.word	0x08004bc4
 80041fc:	08004c24 	.word	0x08004c24
 8004200:	08004c2e 	.word	0x08004c2e
 8004204:	00000000 	.word	0x00000000
 8004208:	08003f8b 	.word	0x08003f8b
 800420c:	08004c2a 	.word	0x08004c2a

08004210 <_printf_common>:
 8004210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004214:	4616      	mov	r6, r2
 8004216:	4699      	mov	r9, r3
 8004218:	688a      	ldr	r2, [r1, #8]
 800421a:	690b      	ldr	r3, [r1, #16]
 800421c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004220:	4293      	cmp	r3, r2
 8004222:	bfb8      	it	lt
 8004224:	4613      	movlt	r3, r2
 8004226:	6033      	str	r3, [r6, #0]
 8004228:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800422c:	4607      	mov	r7, r0
 800422e:	460c      	mov	r4, r1
 8004230:	b10a      	cbz	r2, 8004236 <_printf_common+0x26>
 8004232:	3301      	adds	r3, #1
 8004234:	6033      	str	r3, [r6, #0]
 8004236:	6823      	ldr	r3, [r4, #0]
 8004238:	0699      	lsls	r1, r3, #26
 800423a:	bf42      	ittt	mi
 800423c:	6833      	ldrmi	r3, [r6, #0]
 800423e:	3302      	addmi	r3, #2
 8004240:	6033      	strmi	r3, [r6, #0]
 8004242:	6825      	ldr	r5, [r4, #0]
 8004244:	f015 0506 	ands.w	r5, r5, #6
 8004248:	d106      	bne.n	8004258 <_printf_common+0x48>
 800424a:	f104 0a19 	add.w	sl, r4, #25
 800424e:	68e3      	ldr	r3, [r4, #12]
 8004250:	6832      	ldr	r2, [r6, #0]
 8004252:	1a9b      	subs	r3, r3, r2
 8004254:	42ab      	cmp	r3, r5
 8004256:	dc26      	bgt.n	80042a6 <_printf_common+0x96>
 8004258:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800425c:	1e13      	subs	r3, r2, #0
 800425e:	6822      	ldr	r2, [r4, #0]
 8004260:	bf18      	it	ne
 8004262:	2301      	movne	r3, #1
 8004264:	0692      	lsls	r2, r2, #26
 8004266:	d42b      	bmi.n	80042c0 <_printf_common+0xb0>
 8004268:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800426c:	4649      	mov	r1, r9
 800426e:	4638      	mov	r0, r7
 8004270:	47c0      	blx	r8
 8004272:	3001      	adds	r0, #1
 8004274:	d01e      	beq.n	80042b4 <_printf_common+0xa4>
 8004276:	6823      	ldr	r3, [r4, #0]
 8004278:	68e5      	ldr	r5, [r4, #12]
 800427a:	6832      	ldr	r2, [r6, #0]
 800427c:	f003 0306 	and.w	r3, r3, #6
 8004280:	2b04      	cmp	r3, #4
 8004282:	bf08      	it	eq
 8004284:	1aad      	subeq	r5, r5, r2
 8004286:	68a3      	ldr	r3, [r4, #8]
 8004288:	6922      	ldr	r2, [r4, #16]
 800428a:	bf0c      	ite	eq
 800428c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004290:	2500      	movne	r5, #0
 8004292:	4293      	cmp	r3, r2
 8004294:	bfc4      	itt	gt
 8004296:	1a9b      	subgt	r3, r3, r2
 8004298:	18ed      	addgt	r5, r5, r3
 800429a:	2600      	movs	r6, #0
 800429c:	341a      	adds	r4, #26
 800429e:	42b5      	cmp	r5, r6
 80042a0:	d11a      	bne.n	80042d8 <_printf_common+0xc8>
 80042a2:	2000      	movs	r0, #0
 80042a4:	e008      	b.n	80042b8 <_printf_common+0xa8>
 80042a6:	2301      	movs	r3, #1
 80042a8:	4652      	mov	r2, sl
 80042aa:	4649      	mov	r1, r9
 80042ac:	4638      	mov	r0, r7
 80042ae:	47c0      	blx	r8
 80042b0:	3001      	adds	r0, #1
 80042b2:	d103      	bne.n	80042bc <_printf_common+0xac>
 80042b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80042b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042bc:	3501      	adds	r5, #1
 80042be:	e7c6      	b.n	800424e <_printf_common+0x3e>
 80042c0:	18e1      	adds	r1, r4, r3
 80042c2:	1c5a      	adds	r2, r3, #1
 80042c4:	2030      	movs	r0, #48	; 0x30
 80042c6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80042ca:	4422      	add	r2, r4
 80042cc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80042d0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80042d4:	3302      	adds	r3, #2
 80042d6:	e7c7      	b.n	8004268 <_printf_common+0x58>
 80042d8:	2301      	movs	r3, #1
 80042da:	4622      	mov	r2, r4
 80042dc:	4649      	mov	r1, r9
 80042de:	4638      	mov	r0, r7
 80042e0:	47c0      	blx	r8
 80042e2:	3001      	adds	r0, #1
 80042e4:	d0e6      	beq.n	80042b4 <_printf_common+0xa4>
 80042e6:	3601      	adds	r6, #1
 80042e8:	e7d9      	b.n	800429e <_printf_common+0x8e>
	...

080042ec <_printf_i>:
 80042ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80042f0:	7e0f      	ldrb	r7, [r1, #24]
 80042f2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80042f4:	2f78      	cmp	r7, #120	; 0x78
 80042f6:	4691      	mov	r9, r2
 80042f8:	4680      	mov	r8, r0
 80042fa:	460c      	mov	r4, r1
 80042fc:	469a      	mov	sl, r3
 80042fe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004302:	d807      	bhi.n	8004314 <_printf_i+0x28>
 8004304:	2f62      	cmp	r7, #98	; 0x62
 8004306:	d80a      	bhi.n	800431e <_printf_i+0x32>
 8004308:	2f00      	cmp	r7, #0
 800430a:	f000 80d8 	beq.w	80044be <_printf_i+0x1d2>
 800430e:	2f58      	cmp	r7, #88	; 0x58
 8004310:	f000 80a3 	beq.w	800445a <_printf_i+0x16e>
 8004314:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004318:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800431c:	e03a      	b.n	8004394 <_printf_i+0xa8>
 800431e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004322:	2b15      	cmp	r3, #21
 8004324:	d8f6      	bhi.n	8004314 <_printf_i+0x28>
 8004326:	a101      	add	r1, pc, #4	; (adr r1, 800432c <_printf_i+0x40>)
 8004328:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800432c:	08004385 	.word	0x08004385
 8004330:	08004399 	.word	0x08004399
 8004334:	08004315 	.word	0x08004315
 8004338:	08004315 	.word	0x08004315
 800433c:	08004315 	.word	0x08004315
 8004340:	08004315 	.word	0x08004315
 8004344:	08004399 	.word	0x08004399
 8004348:	08004315 	.word	0x08004315
 800434c:	08004315 	.word	0x08004315
 8004350:	08004315 	.word	0x08004315
 8004354:	08004315 	.word	0x08004315
 8004358:	080044a5 	.word	0x080044a5
 800435c:	080043c9 	.word	0x080043c9
 8004360:	08004487 	.word	0x08004487
 8004364:	08004315 	.word	0x08004315
 8004368:	08004315 	.word	0x08004315
 800436c:	080044c7 	.word	0x080044c7
 8004370:	08004315 	.word	0x08004315
 8004374:	080043c9 	.word	0x080043c9
 8004378:	08004315 	.word	0x08004315
 800437c:	08004315 	.word	0x08004315
 8004380:	0800448f 	.word	0x0800448f
 8004384:	682b      	ldr	r3, [r5, #0]
 8004386:	1d1a      	adds	r2, r3, #4
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	602a      	str	r2, [r5, #0]
 800438c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004390:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004394:	2301      	movs	r3, #1
 8004396:	e0a3      	b.n	80044e0 <_printf_i+0x1f4>
 8004398:	6820      	ldr	r0, [r4, #0]
 800439a:	6829      	ldr	r1, [r5, #0]
 800439c:	0606      	lsls	r6, r0, #24
 800439e:	f101 0304 	add.w	r3, r1, #4
 80043a2:	d50a      	bpl.n	80043ba <_printf_i+0xce>
 80043a4:	680e      	ldr	r6, [r1, #0]
 80043a6:	602b      	str	r3, [r5, #0]
 80043a8:	2e00      	cmp	r6, #0
 80043aa:	da03      	bge.n	80043b4 <_printf_i+0xc8>
 80043ac:	232d      	movs	r3, #45	; 0x2d
 80043ae:	4276      	negs	r6, r6
 80043b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80043b4:	485e      	ldr	r0, [pc, #376]	; (8004530 <_printf_i+0x244>)
 80043b6:	230a      	movs	r3, #10
 80043b8:	e019      	b.n	80043ee <_printf_i+0x102>
 80043ba:	680e      	ldr	r6, [r1, #0]
 80043bc:	602b      	str	r3, [r5, #0]
 80043be:	f010 0f40 	tst.w	r0, #64	; 0x40
 80043c2:	bf18      	it	ne
 80043c4:	b236      	sxthne	r6, r6
 80043c6:	e7ef      	b.n	80043a8 <_printf_i+0xbc>
 80043c8:	682b      	ldr	r3, [r5, #0]
 80043ca:	6820      	ldr	r0, [r4, #0]
 80043cc:	1d19      	adds	r1, r3, #4
 80043ce:	6029      	str	r1, [r5, #0]
 80043d0:	0601      	lsls	r1, r0, #24
 80043d2:	d501      	bpl.n	80043d8 <_printf_i+0xec>
 80043d4:	681e      	ldr	r6, [r3, #0]
 80043d6:	e002      	b.n	80043de <_printf_i+0xf2>
 80043d8:	0646      	lsls	r6, r0, #25
 80043da:	d5fb      	bpl.n	80043d4 <_printf_i+0xe8>
 80043dc:	881e      	ldrh	r6, [r3, #0]
 80043de:	4854      	ldr	r0, [pc, #336]	; (8004530 <_printf_i+0x244>)
 80043e0:	2f6f      	cmp	r7, #111	; 0x6f
 80043e2:	bf0c      	ite	eq
 80043e4:	2308      	moveq	r3, #8
 80043e6:	230a      	movne	r3, #10
 80043e8:	2100      	movs	r1, #0
 80043ea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80043ee:	6865      	ldr	r5, [r4, #4]
 80043f0:	60a5      	str	r5, [r4, #8]
 80043f2:	2d00      	cmp	r5, #0
 80043f4:	bfa2      	ittt	ge
 80043f6:	6821      	ldrge	r1, [r4, #0]
 80043f8:	f021 0104 	bicge.w	r1, r1, #4
 80043fc:	6021      	strge	r1, [r4, #0]
 80043fe:	b90e      	cbnz	r6, 8004404 <_printf_i+0x118>
 8004400:	2d00      	cmp	r5, #0
 8004402:	d04d      	beq.n	80044a0 <_printf_i+0x1b4>
 8004404:	4615      	mov	r5, r2
 8004406:	fbb6 f1f3 	udiv	r1, r6, r3
 800440a:	fb03 6711 	mls	r7, r3, r1, r6
 800440e:	5dc7      	ldrb	r7, [r0, r7]
 8004410:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004414:	4637      	mov	r7, r6
 8004416:	42bb      	cmp	r3, r7
 8004418:	460e      	mov	r6, r1
 800441a:	d9f4      	bls.n	8004406 <_printf_i+0x11a>
 800441c:	2b08      	cmp	r3, #8
 800441e:	d10b      	bne.n	8004438 <_printf_i+0x14c>
 8004420:	6823      	ldr	r3, [r4, #0]
 8004422:	07de      	lsls	r6, r3, #31
 8004424:	d508      	bpl.n	8004438 <_printf_i+0x14c>
 8004426:	6923      	ldr	r3, [r4, #16]
 8004428:	6861      	ldr	r1, [r4, #4]
 800442a:	4299      	cmp	r1, r3
 800442c:	bfde      	ittt	le
 800442e:	2330      	movle	r3, #48	; 0x30
 8004430:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004434:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004438:	1b52      	subs	r2, r2, r5
 800443a:	6122      	str	r2, [r4, #16]
 800443c:	f8cd a000 	str.w	sl, [sp]
 8004440:	464b      	mov	r3, r9
 8004442:	aa03      	add	r2, sp, #12
 8004444:	4621      	mov	r1, r4
 8004446:	4640      	mov	r0, r8
 8004448:	f7ff fee2 	bl	8004210 <_printf_common>
 800444c:	3001      	adds	r0, #1
 800444e:	d14c      	bne.n	80044ea <_printf_i+0x1fe>
 8004450:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004454:	b004      	add	sp, #16
 8004456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800445a:	4835      	ldr	r0, [pc, #212]	; (8004530 <_printf_i+0x244>)
 800445c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004460:	6829      	ldr	r1, [r5, #0]
 8004462:	6823      	ldr	r3, [r4, #0]
 8004464:	f851 6b04 	ldr.w	r6, [r1], #4
 8004468:	6029      	str	r1, [r5, #0]
 800446a:	061d      	lsls	r5, r3, #24
 800446c:	d514      	bpl.n	8004498 <_printf_i+0x1ac>
 800446e:	07df      	lsls	r7, r3, #31
 8004470:	bf44      	itt	mi
 8004472:	f043 0320 	orrmi.w	r3, r3, #32
 8004476:	6023      	strmi	r3, [r4, #0]
 8004478:	b91e      	cbnz	r6, 8004482 <_printf_i+0x196>
 800447a:	6823      	ldr	r3, [r4, #0]
 800447c:	f023 0320 	bic.w	r3, r3, #32
 8004480:	6023      	str	r3, [r4, #0]
 8004482:	2310      	movs	r3, #16
 8004484:	e7b0      	b.n	80043e8 <_printf_i+0xfc>
 8004486:	6823      	ldr	r3, [r4, #0]
 8004488:	f043 0320 	orr.w	r3, r3, #32
 800448c:	6023      	str	r3, [r4, #0]
 800448e:	2378      	movs	r3, #120	; 0x78
 8004490:	4828      	ldr	r0, [pc, #160]	; (8004534 <_printf_i+0x248>)
 8004492:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004496:	e7e3      	b.n	8004460 <_printf_i+0x174>
 8004498:	0659      	lsls	r1, r3, #25
 800449a:	bf48      	it	mi
 800449c:	b2b6      	uxthmi	r6, r6
 800449e:	e7e6      	b.n	800446e <_printf_i+0x182>
 80044a0:	4615      	mov	r5, r2
 80044a2:	e7bb      	b.n	800441c <_printf_i+0x130>
 80044a4:	682b      	ldr	r3, [r5, #0]
 80044a6:	6826      	ldr	r6, [r4, #0]
 80044a8:	6961      	ldr	r1, [r4, #20]
 80044aa:	1d18      	adds	r0, r3, #4
 80044ac:	6028      	str	r0, [r5, #0]
 80044ae:	0635      	lsls	r5, r6, #24
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	d501      	bpl.n	80044b8 <_printf_i+0x1cc>
 80044b4:	6019      	str	r1, [r3, #0]
 80044b6:	e002      	b.n	80044be <_printf_i+0x1d2>
 80044b8:	0670      	lsls	r0, r6, #25
 80044ba:	d5fb      	bpl.n	80044b4 <_printf_i+0x1c8>
 80044bc:	8019      	strh	r1, [r3, #0]
 80044be:	2300      	movs	r3, #0
 80044c0:	6123      	str	r3, [r4, #16]
 80044c2:	4615      	mov	r5, r2
 80044c4:	e7ba      	b.n	800443c <_printf_i+0x150>
 80044c6:	682b      	ldr	r3, [r5, #0]
 80044c8:	1d1a      	adds	r2, r3, #4
 80044ca:	602a      	str	r2, [r5, #0]
 80044cc:	681d      	ldr	r5, [r3, #0]
 80044ce:	6862      	ldr	r2, [r4, #4]
 80044d0:	2100      	movs	r1, #0
 80044d2:	4628      	mov	r0, r5
 80044d4:	f7fb fe7c 	bl	80001d0 <memchr>
 80044d8:	b108      	cbz	r0, 80044de <_printf_i+0x1f2>
 80044da:	1b40      	subs	r0, r0, r5
 80044dc:	6060      	str	r0, [r4, #4]
 80044de:	6863      	ldr	r3, [r4, #4]
 80044e0:	6123      	str	r3, [r4, #16]
 80044e2:	2300      	movs	r3, #0
 80044e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80044e8:	e7a8      	b.n	800443c <_printf_i+0x150>
 80044ea:	6923      	ldr	r3, [r4, #16]
 80044ec:	462a      	mov	r2, r5
 80044ee:	4649      	mov	r1, r9
 80044f0:	4640      	mov	r0, r8
 80044f2:	47d0      	blx	sl
 80044f4:	3001      	adds	r0, #1
 80044f6:	d0ab      	beq.n	8004450 <_printf_i+0x164>
 80044f8:	6823      	ldr	r3, [r4, #0]
 80044fa:	079b      	lsls	r3, r3, #30
 80044fc:	d413      	bmi.n	8004526 <_printf_i+0x23a>
 80044fe:	68e0      	ldr	r0, [r4, #12]
 8004500:	9b03      	ldr	r3, [sp, #12]
 8004502:	4298      	cmp	r0, r3
 8004504:	bfb8      	it	lt
 8004506:	4618      	movlt	r0, r3
 8004508:	e7a4      	b.n	8004454 <_printf_i+0x168>
 800450a:	2301      	movs	r3, #1
 800450c:	4632      	mov	r2, r6
 800450e:	4649      	mov	r1, r9
 8004510:	4640      	mov	r0, r8
 8004512:	47d0      	blx	sl
 8004514:	3001      	adds	r0, #1
 8004516:	d09b      	beq.n	8004450 <_printf_i+0x164>
 8004518:	3501      	adds	r5, #1
 800451a:	68e3      	ldr	r3, [r4, #12]
 800451c:	9903      	ldr	r1, [sp, #12]
 800451e:	1a5b      	subs	r3, r3, r1
 8004520:	42ab      	cmp	r3, r5
 8004522:	dcf2      	bgt.n	800450a <_printf_i+0x21e>
 8004524:	e7eb      	b.n	80044fe <_printf_i+0x212>
 8004526:	2500      	movs	r5, #0
 8004528:	f104 0619 	add.w	r6, r4, #25
 800452c:	e7f5      	b.n	800451a <_printf_i+0x22e>
 800452e:	bf00      	nop
 8004530:	08004c35 	.word	0x08004c35
 8004534:	08004c46 	.word	0x08004c46

08004538 <_sbrk_r>:
 8004538:	b538      	push	{r3, r4, r5, lr}
 800453a:	4d06      	ldr	r5, [pc, #24]	; (8004554 <_sbrk_r+0x1c>)
 800453c:	2300      	movs	r3, #0
 800453e:	4604      	mov	r4, r0
 8004540:	4608      	mov	r0, r1
 8004542:	602b      	str	r3, [r5, #0]
 8004544:	f7fc fbc2 	bl	8000ccc <_sbrk>
 8004548:	1c43      	adds	r3, r0, #1
 800454a:	d102      	bne.n	8004552 <_sbrk_r+0x1a>
 800454c:	682b      	ldr	r3, [r5, #0]
 800454e:	b103      	cbz	r3, 8004552 <_sbrk_r+0x1a>
 8004550:	6023      	str	r3, [r4, #0]
 8004552:	bd38      	pop	{r3, r4, r5, pc}
 8004554:	20000218 	.word	0x20000218

08004558 <__sread>:
 8004558:	b510      	push	{r4, lr}
 800455a:	460c      	mov	r4, r1
 800455c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004560:	f000 fab2 	bl	8004ac8 <_read_r>
 8004564:	2800      	cmp	r0, #0
 8004566:	bfab      	itete	ge
 8004568:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800456a:	89a3      	ldrhlt	r3, [r4, #12]
 800456c:	181b      	addge	r3, r3, r0
 800456e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004572:	bfac      	ite	ge
 8004574:	6563      	strge	r3, [r4, #84]	; 0x54
 8004576:	81a3      	strhlt	r3, [r4, #12]
 8004578:	bd10      	pop	{r4, pc}

0800457a <__swrite>:
 800457a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800457e:	461f      	mov	r7, r3
 8004580:	898b      	ldrh	r3, [r1, #12]
 8004582:	05db      	lsls	r3, r3, #23
 8004584:	4605      	mov	r5, r0
 8004586:	460c      	mov	r4, r1
 8004588:	4616      	mov	r6, r2
 800458a:	d505      	bpl.n	8004598 <__swrite+0x1e>
 800458c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004590:	2302      	movs	r3, #2
 8004592:	2200      	movs	r2, #0
 8004594:	f000 f9c8 	bl	8004928 <_lseek_r>
 8004598:	89a3      	ldrh	r3, [r4, #12]
 800459a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800459e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80045a2:	81a3      	strh	r3, [r4, #12]
 80045a4:	4632      	mov	r2, r6
 80045a6:	463b      	mov	r3, r7
 80045a8:	4628      	mov	r0, r5
 80045aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80045ae:	f000 b869 	b.w	8004684 <_write_r>

080045b2 <__sseek>:
 80045b2:	b510      	push	{r4, lr}
 80045b4:	460c      	mov	r4, r1
 80045b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80045ba:	f000 f9b5 	bl	8004928 <_lseek_r>
 80045be:	1c43      	adds	r3, r0, #1
 80045c0:	89a3      	ldrh	r3, [r4, #12]
 80045c2:	bf15      	itete	ne
 80045c4:	6560      	strne	r0, [r4, #84]	; 0x54
 80045c6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80045ca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80045ce:	81a3      	strheq	r3, [r4, #12]
 80045d0:	bf18      	it	ne
 80045d2:	81a3      	strhne	r3, [r4, #12]
 80045d4:	bd10      	pop	{r4, pc}

080045d6 <__sclose>:
 80045d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80045da:	f000 b8d3 	b.w	8004784 <_close_r>
	...

080045e0 <__swbuf_r>:
 80045e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045e2:	460e      	mov	r6, r1
 80045e4:	4614      	mov	r4, r2
 80045e6:	4605      	mov	r5, r0
 80045e8:	b118      	cbz	r0, 80045f2 <__swbuf_r+0x12>
 80045ea:	6983      	ldr	r3, [r0, #24]
 80045ec:	b90b      	cbnz	r3, 80045f2 <__swbuf_r+0x12>
 80045ee:	f7ff fb81 	bl	8003cf4 <__sinit>
 80045f2:	4b21      	ldr	r3, [pc, #132]	; (8004678 <__swbuf_r+0x98>)
 80045f4:	429c      	cmp	r4, r3
 80045f6:	d12b      	bne.n	8004650 <__swbuf_r+0x70>
 80045f8:	686c      	ldr	r4, [r5, #4]
 80045fa:	69a3      	ldr	r3, [r4, #24]
 80045fc:	60a3      	str	r3, [r4, #8]
 80045fe:	89a3      	ldrh	r3, [r4, #12]
 8004600:	071a      	lsls	r2, r3, #28
 8004602:	d52f      	bpl.n	8004664 <__swbuf_r+0x84>
 8004604:	6923      	ldr	r3, [r4, #16]
 8004606:	b36b      	cbz	r3, 8004664 <__swbuf_r+0x84>
 8004608:	6923      	ldr	r3, [r4, #16]
 800460a:	6820      	ldr	r0, [r4, #0]
 800460c:	1ac0      	subs	r0, r0, r3
 800460e:	6963      	ldr	r3, [r4, #20]
 8004610:	b2f6      	uxtb	r6, r6
 8004612:	4283      	cmp	r3, r0
 8004614:	4637      	mov	r7, r6
 8004616:	dc04      	bgt.n	8004622 <__swbuf_r+0x42>
 8004618:	4621      	mov	r1, r4
 800461a:	4628      	mov	r0, r5
 800461c:	f000 f948 	bl	80048b0 <_fflush_r>
 8004620:	bb30      	cbnz	r0, 8004670 <__swbuf_r+0x90>
 8004622:	68a3      	ldr	r3, [r4, #8]
 8004624:	3b01      	subs	r3, #1
 8004626:	60a3      	str	r3, [r4, #8]
 8004628:	6823      	ldr	r3, [r4, #0]
 800462a:	1c5a      	adds	r2, r3, #1
 800462c:	6022      	str	r2, [r4, #0]
 800462e:	701e      	strb	r6, [r3, #0]
 8004630:	6963      	ldr	r3, [r4, #20]
 8004632:	3001      	adds	r0, #1
 8004634:	4283      	cmp	r3, r0
 8004636:	d004      	beq.n	8004642 <__swbuf_r+0x62>
 8004638:	89a3      	ldrh	r3, [r4, #12]
 800463a:	07db      	lsls	r3, r3, #31
 800463c:	d506      	bpl.n	800464c <__swbuf_r+0x6c>
 800463e:	2e0a      	cmp	r6, #10
 8004640:	d104      	bne.n	800464c <__swbuf_r+0x6c>
 8004642:	4621      	mov	r1, r4
 8004644:	4628      	mov	r0, r5
 8004646:	f000 f933 	bl	80048b0 <_fflush_r>
 800464a:	b988      	cbnz	r0, 8004670 <__swbuf_r+0x90>
 800464c:	4638      	mov	r0, r7
 800464e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004650:	4b0a      	ldr	r3, [pc, #40]	; (800467c <__swbuf_r+0x9c>)
 8004652:	429c      	cmp	r4, r3
 8004654:	d101      	bne.n	800465a <__swbuf_r+0x7a>
 8004656:	68ac      	ldr	r4, [r5, #8]
 8004658:	e7cf      	b.n	80045fa <__swbuf_r+0x1a>
 800465a:	4b09      	ldr	r3, [pc, #36]	; (8004680 <__swbuf_r+0xa0>)
 800465c:	429c      	cmp	r4, r3
 800465e:	bf08      	it	eq
 8004660:	68ec      	ldreq	r4, [r5, #12]
 8004662:	e7ca      	b.n	80045fa <__swbuf_r+0x1a>
 8004664:	4621      	mov	r1, r4
 8004666:	4628      	mov	r0, r5
 8004668:	f000 f81e 	bl	80046a8 <__swsetup_r>
 800466c:	2800      	cmp	r0, #0
 800466e:	d0cb      	beq.n	8004608 <__swbuf_r+0x28>
 8004670:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8004674:	e7ea      	b.n	800464c <__swbuf_r+0x6c>
 8004676:	bf00      	nop
 8004678:	08004be4 	.word	0x08004be4
 800467c:	08004c04 	.word	0x08004c04
 8004680:	08004bc4 	.word	0x08004bc4

08004684 <_write_r>:
 8004684:	b538      	push	{r3, r4, r5, lr}
 8004686:	4d07      	ldr	r5, [pc, #28]	; (80046a4 <_write_r+0x20>)
 8004688:	4604      	mov	r4, r0
 800468a:	4608      	mov	r0, r1
 800468c:	4611      	mov	r1, r2
 800468e:	2200      	movs	r2, #0
 8004690:	602a      	str	r2, [r5, #0]
 8004692:	461a      	mov	r2, r3
 8004694:	f7fc fac9 	bl	8000c2a <_write>
 8004698:	1c43      	adds	r3, r0, #1
 800469a:	d102      	bne.n	80046a2 <_write_r+0x1e>
 800469c:	682b      	ldr	r3, [r5, #0]
 800469e:	b103      	cbz	r3, 80046a2 <_write_r+0x1e>
 80046a0:	6023      	str	r3, [r4, #0]
 80046a2:	bd38      	pop	{r3, r4, r5, pc}
 80046a4:	20000218 	.word	0x20000218

080046a8 <__swsetup_r>:
 80046a8:	4b32      	ldr	r3, [pc, #200]	; (8004774 <__swsetup_r+0xcc>)
 80046aa:	b570      	push	{r4, r5, r6, lr}
 80046ac:	681d      	ldr	r5, [r3, #0]
 80046ae:	4606      	mov	r6, r0
 80046b0:	460c      	mov	r4, r1
 80046b2:	b125      	cbz	r5, 80046be <__swsetup_r+0x16>
 80046b4:	69ab      	ldr	r3, [r5, #24]
 80046b6:	b913      	cbnz	r3, 80046be <__swsetup_r+0x16>
 80046b8:	4628      	mov	r0, r5
 80046ba:	f7ff fb1b 	bl	8003cf4 <__sinit>
 80046be:	4b2e      	ldr	r3, [pc, #184]	; (8004778 <__swsetup_r+0xd0>)
 80046c0:	429c      	cmp	r4, r3
 80046c2:	d10f      	bne.n	80046e4 <__swsetup_r+0x3c>
 80046c4:	686c      	ldr	r4, [r5, #4]
 80046c6:	89a3      	ldrh	r3, [r4, #12]
 80046c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80046cc:	0719      	lsls	r1, r3, #28
 80046ce:	d42c      	bmi.n	800472a <__swsetup_r+0x82>
 80046d0:	06dd      	lsls	r5, r3, #27
 80046d2:	d411      	bmi.n	80046f8 <__swsetup_r+0x50>
 80046d4:	2309      	movs	r3, #9
 80046d6:	6033      	str	r3, [r6, #0]
 80046d8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80046dc:	81a3      	strh	r3, [r4, #12]
 80046de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80046e2:	e03e      	b.n	8004762 <__swsetup_r+0xba>
 80046e4:	4b25      	ldr	r3, [pc, #148]	; (800477c <__swsetup_r+0xd4>)
 80046e6:	429c      	cmp	r4, r3
 80046e8:	d101      	bne.n	80046ee <__swsetup_r+0x46>
 80046ea:	68ac      	ldr	r4, [r5, #8]
 80046ec:	e7eb      	b.n	80046c6 <__swsetup_r+0x1e>
 80046ee:	4b24      	ldr	r3, [pc, #144]	; (8004780 <__swsetup_r+0xd8>)
 80046f0:	429c      	cmp	r4, r3
 80046f2:	bf08      	it	eq
 80046f4:	68ec      	ldreq	r4, [r5, #12]
 80046f6:	e7e6      	b.n	80046c6 <__swsetup_r+0x1e>
 80046f8:	0758      	lsls	r0, r3, #29
 80046fa:	d512      	bpl.n	8004722 <__swsetup_r+0x7a>
 80046fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80046fe:	b141      	cbz	r1, 8004712 <__swsetup_r+0x6a>
 8004700:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004704:	4299      	cmp	r1, r3
 8004706:	d002      	beq.n	800470e <__swsetup_r+0x66>
 8004708:	4630      	mov	r0, r6
 800470a:	f000 f991 	bl	8004a30 <_free_r>
 800470e:	2300      	movs	r3, #0
 8004710:	6363      	str	r3, [r4, #52]	; 0x34
 8004712:	89a3      	ldrh	r3, [r4, #12]
 8004714:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004718:	81a3      	strh	r3, [r4, #12]
 800471a:	2300      	movs	r3, #0
 800471c:	6063      	str	r3, [r4, #4]
 800471e:	6923      	ldr	r3, [r4, #16]
 8004720:	6023      	str	r3, [r4, #0]
 8004722:	89a3      	ldrh	r3, [r4, #12]
 8004724:	f043 0308 	orr.w	r3, r3, #8
 8004728:	81a3      	strh	r3, [r4, #12]
 800472a:	6923      	ldr	r3, [r4, #16]
 800472c:	b94b      	cbnz	r3, 8004742 <__swsetup_r+0x9a>
 800472e:	89a3      	ldrh	r3, [r4, #12]
 8004730:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004734:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004738:	d003      	beq.n	8004742 <__swsetup_r+0x9a>
 800473a:	4621      	mov	r1, r4
 800473c:	4630      	mov	r0, r6
 800473e:	f000 f92b 	bl	8004998 <__smakebuf_r>
 8004742:	89a0      	ldrh	r0, [r4, #12]
 8004744:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004748:	f010 0301 	ands.w	r3, r0, #1
 800474c:	d00a      	beq.n	8004764 <__swsetup_r+0xbc>
 800474e:	2300      	movs	r3, #0
 8004750:	60a3      	str	r3, [r4, #8]
 8004752:	6963      	ldr	r3, [r4, #20]
 8004754:	425b      	negs	r3, r3
 8004756:	61a3      	str	r3, [r4, #24]
 8004758:	6923      	ldr	r3, [r4, #16]
 800475a:	b943      	cbnz	r3, 800476e <__swsetup_r+0xc6>
 800475c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004760:	d1ba      	bne.n	80046d8 <__swsetup_r+0x30>
 8004762:	bd70      	pop	{r4, r5, r6, pc}
 8004764:	0781      	lsls	r1, r0, #30
 8004766:	bf58      	it	pl
 8004768:	6963      	ldrpl	r3, [r4, #20]
 800476a:	60a3      	str	r3, [r4, #8]
 800476c:	e7f4      	b.n	8004758 <__swsetup_r+0xb0>
 800476e:	2000      	movs	r0, #0
 8004770:	e7f7      	b.n	8004762 <__swsetup_r+0xba>
 8004772:	bf00      	nop
 8004774:	2000000c 	.word	0x2000000c
 8004778:	08004be4 	.word	0x08004be4
 800477c:	08004c04 	.word	0x08004c04
 8004780:	08004bc4 	.word	0x08004bc4

08004784 <_close_r>:
 8004784:	b538      	push	{r3, r4, r5, lr}
 8004786:	4d06      	ldr	r5, [pc, #24]	; (80047a0 <_close_r+0x1c>)
 8004788:	2300      	movs	r3, #0
 800478a:	4604      	mov	r4, r0
 800478c:	4608      	mov	r0, r1
 800478e:	602b      	str	r3, [r5, #0]
 8004790:	f7fc fa67 	bl	8000c62 <_close>
 8004794:	1c43      	adds	r3, r0, #1
 8004796:	d102      	bne.n	800479e <_close_r+0x1a>
 8004798:	682b      	ldr	r3, [r5, #0]
 800479a:	b103      	cbz	r3, 800479e <_close_r+0x1a>
 800479c:	6023      	str	r3, [r4, #0]
 800479e:	bd38      	pop	{r3, r4, r5, pc}
 80047a0:	20000218 	.word	0x20000218

080047a4 <__sflush_r>:
 80047a4:	898a      	ldrh	r2, [r1, #12]
 80047a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80047aa:	4605      	mov	r5, r0
 80047ac:	0710      	lsls	r0, r2, #28
 80047ae:	460c      	mov	r4, r1
 80047b0:	d458      	bmi.n	8004864 <__sflush_r+0xc0>
 80047b2:	684b      	ldr	r3, [r1, #4]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	dc05      	bgt.n	80047c4 <__sflush_r+0x20>
 80047b8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	dc02      	bgt.n	80047c4 <__sflush_r+0x20>
 80047be:	2000      	movs	r0, #0
 80047c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80047c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80047c6:	2e00      	cmp	r6, #0
 80047c8:	d0f9      	beq.n	80047be <__sflush_r+0x1a>
 80047ca:	2300      	movs	r3, #0
 80047cc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80047d0:	682f      	ldr	r7, [r5, #0]
 80047d2:	602b      	str	r3, [r5, #0]
 80047d4:	d032      	beq.n	800483c <__sflush_r+0x98>
 80047d6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80047d8:	89a3      	ldrh	r3, [r4, #12]
 80047da:	075a      	lsls	r2, r3, #29
 80047dc:	d505      	bpl.n	80047ea <__sflush_r+0x46>
 80047de:	6863      	ldr	r3, [r4, #4]
 80047e0:	1ac0      	subs	r0, r0, r3
 80047e2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80047e4:	b10b      	cbz	r3, 80047ea <__sflush_r+0x46>
 80047e6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80047e8:	1ac0      	subs	r0, r0, r3
 80047ea:	2300      	movs	r3, #0
 80047ec:	4602      	mov	r2, r0
 80047ee:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80047f0:	6a21      	ldr	r1, [r4, #32]
 80047f2:	4628      	mov	r0, r5
 80047f4:	47b0      	blx	r6
 80047f6:	1c43      	adds	r3, r0, #1
 80047f8:	89a3      	ldrh	r3, [r4, #12]
 80047fa:	d106      	bne.n	800480a <__sflush_r+0x66>
 80047fc:	6829      	ldr	r1, [r5, #0]
 80047fe:	291d      	cmp	r1, #29
 8004800:	d82c      	bhi.n	800485c <__sflush_r+0xb8>
 8004802:	4a2a      	ldr	r2, [pc, #168]	; (80048ac <__sflush_r+0x108>)
 8004804:	40ca      	lsrs	r2, r1
 8004806:	07d6      	lsls	r6, r2, #31
 8004808:	d528      	bpl.n	800485c <__sflush_r+0xb8>
 800480a:	2200      	movs	r2, #0
 800480c:	6062      	str	r2, [r4, #4]
 800480e:	04d9      	lsls	r1, r3, #19
 8004810:	6922      	ldr	r2, [r4, #16]
 8004812:	6022      	str	r2, [r4, #0]
 8004814:	d504      	bpl.n	8004820 <__sflush_r+0x7c>
 8004816:	1c42      	adds	r2, r0, #1
 8004818:	d101      	bne.n	800481e <__sflush_r+0x7a>
 800481a:	682b      	ldr	r3, [r5, #0]
 800481c:	b903      	cbnz	r3, 8004820 <__sflush_r+0x7c>
 800481e:	6560      	str	r0, [r4, #84]	; 0x54
 8004820:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004822:	602f      	str	r7, [r5, #0]
 8004824:	2900      	cmp	r1, #0
 8004826:	d0ca      	beq.n	80047be <__sflush_r+0x1a>
 8004828:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800482c:	4299      	cmp	r1, r3
 800482e:	d002      	beq.n	8004836 <__sflush_r+0x92>
 8004830:	4628      	mov	r0, r5
 8004832:	f000 f8fd 	bl	8004a30 <_free_r>
 8004836:	2000      	movs	r0, #0
 8004838:	6360      	str	r0, [r4, #52]	; 0x34
 800483a:	e7c1      	b.n	80047c0 <__sflush_r+0x1c>
 800483c:	6a21      	ldr	r1, [r4, #32]
 800483e:	2301      	movs	r3, #1
 8004840:	4628      	mov	r0, r5
 8004842:	47b0      	blx	r6
 8004844:	1c41      	adds	r1, r0, #1
 8004846:	d1c7      	bne.n	80047d8 <__sflush_r+0x34>
 8004848:	682b      	ldr	r3, [r5, #0]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d0c4      	beq.n	80047d8 <__sflush_r+0x34>
 800484e:	2b1d      	cmp	r3, #29
 8004850:	d001      	beq.n	8004856 <__sflush_r+0xb2>
 8004852:	2b16      	cmp	r3, #22
 8004854:	d101      	bne.n	800485a <__sflush_r+0xb6>
 8004856:	602f      	str	r7, [r5, #0]
 8004858:	e7b1      	b.n	80047be <__sflush_r+0x1a>
 800485a:	89a3      	ldrh	r3, [r4, #12]
 800485c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004860:	81a3      	strh	r3, [r4, #12]
 8004862:	e7ad      	b.n	80047c0 <__sflush_r+0x1c>
 8004864:	690f      	ldr	r7, [r1, #16]
 8004866:	2f00      	cmp	r7, #0
 8004868:	d0a9      	beq.n	80047be <__sflush_r+0x1a>
 800486a:	0793      	lsls	r3, r2, #30
 800486c:	680e      	ldr	r6, [r1, #0]
 800486e:	bf08      	it	eq
 8004870:	694b      	ldreq	r3, [r1, #20]
 8004872:	600f      	str	r7, [r1, #0]
 8004874:	bf18      	it	ne
 8004876:	2300      	movne	r3, #0
 8004878:	eba6 0807 	sub.w	r8, r6, r7
 800487c:	608b      	str	r3, [r1, #8]
 800487e:	f1b8 0f00 	cmp.w	r8, #0
 8004882:	dd9c      	ble.n	80047be <__sflush_r+0x1a>
 8004884:	6a21      	ldr	r1, [r4, #32]
 8004886:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004888:	4643      	mov	r3, r8
 800488a:	463a      	mov	r2, r7
 800488c:	4628      	mov	r0, r5
 800488e:	47b0      	blx	r6
 8004890:	2800      	cmp	r0, #0
 8004892:	dc06      	bgt.n	80048a2 <__sflush_r+0xfe>
 8004894:	89a3      	ldrh	r3, [r4, #12]
 8004896:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800489a:	81a3      	strh	r3, [r4, #12]
 800489c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80048a0:	e78e      	b.n	80047c0 <__sflush_r+0x1c>
 80048a2:	4407      	add	r7, r0
 80048a4:	eba8 0800 	sub.w	r8, r8, r0
 80048a8:	e7e9      	b.n	800487e <__sflush_r+0xda>
 80048aa:	bf00      	nop
 80048ac:	20400001 	.word	0x20400001

080048b0 <_fflush_r>:
 80048b0:	b538      	push	{r3, r4, r5, lr}
 80048b2:	690b      	ldr	r3, [r1, #16]
 80048b4:	4605      	mov	r5, r0
 80048b6:	460c      	mov	r4, r1
 80048b8:	b913      	cbnz	r3, 80048c0 <_fflush_r+0x10>
 80048ba:	2500      	movs	r5, #0
 80048bc:	4628      	mov	r0, r5
 80048be:	bd38      	pop	{r3, r4, r5, pc}
 80048c0:	b118      	cbz	r0, 80048ca <_fflush_r+0x1a>
 80048c2:	6983      	ldr	r3, [r0, #24]
 80048c4:	b90b      	cbnz	r3, 80048ca <_fflush_r+0x1a>
 80048c6:	f7ff fa15 	bl	8003cf4 <__sinit>
 80048ca:	4b14      	ldr	r3, [pc, #80]	; (800491c <_fflush_r+0x6c>)
 80048cc:	429c      	cmp	r4, r3
 80048ce:	d11b      	bne.n	8004908 <_fflush_r+0x58>
 80048d0:	686c      	ldr	r4, [r5, #4]
 80048d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d0ef      	beq.n	80048ba <_fflush_r+0xa>
 80048da:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80048dc:	07d0      	lsls	r0, r2, #31
 80048de:	d404      	bmi.n	80048ea <_fflush_r+0x3a>
 80048e0:	0599      	lsls	r1, r3, #22
 80048e2:	d402      	bmi.n	80048ea <_fflush_r+0x3a>
 80048e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80048e6:	f7ff faa3 	bl	8003e30 <__retarget_lock_acquire_recursive>
 80048ea:	4628      	mov	r0, r5
 80048ec:	4621      	mov	r1, r4
 80048ee:	f7ff ff59 	bl	80047a4 <__sflush_r>
 80048f2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80048f4:	07da      	lsls	r2, r3, #31
 80048f6:	4605      	mov	r5, r0
 80048f8:	d4e0      	bmi.n	80048bc <_fflush_r+0xc>
 80048fa:	89a3      	ldrh	r3, [r4, #12]
 80048fc:	059b      	lsls	r3, r3, #22
 80048fe:	d4dd      	bmi.n	80048bc <_fflush_r+0xc>
 8004900:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004902:	f7ff fa96 	bl	8003e32 <__retarget_lock_release_recursive>
 8004906:	e7d9      	b.n	80048bc <_fflush_r+0xc>
 8004908:	4b05      	ldr	r3, [pc, #20]	; (8004920 <_fflush_r+0x70>)
 800490a:	429c      	cmp	r4, r3
 800490c:	d101      	bne.n	8004912 <_fflush_r+0x62>
 800490e:	68ac      	ldr	r4, [r5, #8]
 8004910:	e7df      	b.n	80048d2 <_fflush_r+0x22>
 8004912:	4b04      	ldr	r3, [pc, #16]	; (8004924 <_fflush_r+0x74>)
 8004914:	429c      	cmp	r4, r3
 8004916:	bf08      	it	eq
 8004918:	68ec      	ldreq	r4, [r5, #12]
 800491a:	e7da      	b.n	80048d2 <_fflush_r+0x22>
 800491c:	08004be4 	.word	0x08004be4
 8004920:	08004c04 	.word	0x08004c04
 8004924:	08004bc4 	.word	0x08004bc4

08004928 <_lseek_r>:
 8004928:	b538      	push	{r3, r4, r5, lr}
 800492a:	4d07      	ldr	r5, [pc, #28]	; (8004948 <_lseek_r+0x20>)
 800492c:	4604      	mov	r4, r0
 800492e:	4608      	mov	r0, r1
 8004930:	4611      	mov	r1, r2
 8004932:	2200      	movs	r2, #0
 8004934:	602a      	str	r2, [r5, #0]
 8004936:	461a      	mov	r2, r3
 8004938:	f7fc f9ba 	bl	8000cb0 <_lseek>
 800493c:	1c43      	adds	r3, r0, #1
 800493e:	d102      	bne.n	8004946 <_lseek_r+0x1e>
 8004940:	682b      	ldr	r3, [r5, #0]
 8004942:	b103      	cbz	r3, 8004946 <_lseek_r+0x1e>
 8004944:	6023      	str	r3, [r4, #0]
 8004946:	bd38      	pop	{r3, r4, r5, pc}
 8004948:	20000218 	.word	0x20000218

0800494c <__swhatbuf_r>:
 800494c:	b570      	push	{r4, r5, r6, lr}
 800494e:	460e      	mov	r6, r1
 8004950:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004954:	2900      	cmp	r1, #0
 8004956:	b096      	sub	sp, #88	; 0x58
 8004958:	4614      	mov	r4, r2
 800495a:	461d      	mov	r5, r3
 800495c:	da08      	bge.n	8004970 <__swhatbuf_r+0x24>
 800495e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004962:	2200      	movs	r2, #0
 8004964:	602a      	str	r2, [r5, #0]
 8004966:	061a      	lsls	r2, r3, #24
 8004968:	d410      	bmi.n	800498c <__swhatbuf_r+0x40>
 800496a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800496e:	e00e      	b.n	800498e <__swhatbuf_r+0x42>
 8004970:	466a      	mov	r2, sp
 8004972:	f000 f8bb 	bl	8004aec <_fstat_r>
 8004976:	2800      	cmp	r0, #0
 8004978:	dbf1      	blt.n	800495e <__swhatbuf_r+0x12>
 800497a:	9a01      	ldr	r2, [sp, #4]
 800497c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004980:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004984:	425a      	negs	r2, r3
 8004986:	415a      	adcs	r2, r3
 8004988:	602a      	str	r2, [r5, #0]
 800498a:	e7ee      	b.n	800496a <__swhatbuf_r+0x1e>
 800498c:	2340      	movs	r3, #64	; 0x40
 800498e:	2000      	movs	r0, #0
 8004990:	6023      	str	r3, [r4, #0]
 8004992:	b016      	add	sp, #88	; 0x58
 8004994:	bd70      	pop	{r4, r5, r6, pc}
	...

08004998 <__smakebuf_r>:
 8004998:	898b      	ldrh	r3, [r1, #12]
 800499a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800499c:	079d      	lsls	r5, r3, #30
 800499e:	4606      	mov	r6, r0
 80049a0:	460c      	mov	r4, r1
 80049a2:	d507      	bpl.n	80049b4 <__smakebuf_r+0x1c>
 80049a4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80049a8:	6023      	str	r3, [r4, #0]
 80049aa:	6123      	str	r3, [r4, #16]
 80049ac:	2301      	movs	r3, #1
 80049ae:	6163      	str	r3, [r4, #20]
 80049b0:	b002      	add	sp, #8
 80049b2:	bd70      	pop	{r4, r5, r6, pc}
 80049b4:	ab01      	add	r3, sp, #4
 80049b6:	466a      	mov	r2, sp
 80049b8:	f7ff ffc8 	bl	800494c <__swhatbuf_r>
 80049bc:	9900      	ldr	r1, [sp, #0]
 80049be:	4605      	mov	r5, r0
 80049c0:	4630      	mov	r0, r6
 80049c2:	f7ff fa57 	bl	8003e74 <_malloc_r>
 80049c6:	b948      	cbnz	r0, 80049dc <__smakebuf_r+0x44>
 80049c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80049cc:	059a      	lsls	r2, r3, #22
 80049ce:	d4ef      	bmi.n	80049b0 <__smakebuf_r+0x18>
 80049d0:	f023 0303 	bic.w	r3, r3, #3
 80049d4:	f043 0302 	orr.w	r3, r3, #2
 80049d8:	81a3      	strh	r3, [r4, #12]
 80049da:	e7e3      	b.n	80049a4 <__smakebuf_r+0xc>
 80049dc:	4b0d      	ldr	r3, [pc, #52]	; (8004a14 <__smakebuf_r+0x7c>)
 80049de:	62b3      	str	r3, [r6, #40]	; 0x28
 80049e0:	89a3      	ldrh	r3, [r4, #12]
 80049e2:	6020      	str	r0, [r4, #0]
 80049e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049e8:	81a3      	strh	r3, [r4, #12]
 80049ea:	9b00      	ldr	r3, [sp, #0]
 80049ec:	6163      	str	r3, [r4, #20]
 80049ee:	9b01      	ldr	r3, [sp, #4]
 80049f0:	6120      	str	r0, [r4, #16]
 80049f2:	b15b      	cbz	r3, 8004a0c <__smakebuf_r+0x74>
 80049f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80049f8:	4630      	mov	r0, r6
 80049fa:	f000 f889 	bl	8004b10 <_isatty_r>
 80049fe:	b128      	cbz	r0, 8004a0c <__smakebuf_r+0x74>
 8004a00:	89a3      	ldrh	r3, [r4, #12]
 8004a02:	f023 0303 	bic.w	r3, r3, #3
 8004a06:	f043 0301 	orr.w	r3, r3, #1
 8004a0a:	81a3      	strh	r3, [r4, #12]
 8004a0c:	89a0      	ldrh	r0, [r4, #12]
 8004a0e:	4305      	orrs	r5, r0
 8004a10:	81a5      	strh	r5, [r4, #12]
 8004a12:	e7cd      	b.n	80049b0 <__smakebuf_r+0x18>
 8004a14:	08003c8d 	.word	0x08003c8d

08004a18 <__malloc_lock>:
 8004a18:	4801      	ldr	r0, [pc, #4]	; (8004a20 <__malloc_lock+0x8>)
 8004a1a:	f7ff ba09 	b.w	8003e30 <__retarget_lock_acquire_recursive>
 8004a1e:	bf00      	nop
 8004a20:	2000020c 	.word	0x2000020c

08004a24 <__malloc_unlock>:
 8004a24:	4801      	ldr	r0, [pc, #4]	; (8004a2c <__malloc_unlock+0x8>)
 8004a26:	f7ff ba04 	b.w	8003e32 <__retarget_lock_release_recursive>
 8004a2a:	bf00      	nop
 8004a2c:	2000020c 	.word	0x2000020c

08004a30 <_free_r>:
 8004a30:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004a32:	2900      	cmp	r1, #0
 8004a34:	d044      	beq.n	8004ac0 <_free_r+0x90>
 8004a36:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a3a:	9001      	str	r0, [sp, #4]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	f1a1 0404 	sub.w	r4, r1, #4
 8004a42:	bfb8      	it	lt
 8004a44:	18e4      	addlt	r4, r4, r3
 8004a46:	f7ff ffe7 	bl	8004a18 <__malloc_lock>
 8004a4a:	4a1e      	ldr	r2, [pc, #120]	; (8004ac4 <_free_r+0x94>)
 8004a4c:	9801      	ldr	r0, [sp, #4]
 8004a4e:	6813      	ldr	r3, [r2, #0]
 8004a50:	b933      	cbnz	r3, 8004a60 <_free_r+0x30>
 8004a52:	6063      	str	r3, [r4, #4]
 8004a54:	6014      	str	r4, [r2, #0]
 8004a56:	b003      	add	sp, #12
 8004a58:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004a5c:	f7ff bfe2 	b.w	8004a24 <__malloc_unlock>
 8004a60:	42a3      	cmp	r3, r4
 8004a62:	d908      	bls.n	8004a76 <_free_r+0x46>
 8004a64:	6825      	ldr	r5, [r4, #0]
 8004a66:	1961      	adds	r1, r4, r5
 8004a68:	428b      	cmp	r3, r1
 8004a6a:	bf01      	itttt	eq
 8004a6c:	6819      	ldreq	r1, [r3, #0]
 8004a6e:	685b      	ldreq	r3, [r3, #4]
 8004a70:	1949      	addeq	r1, r1, r5
 8004a72:	6021      	streq	r1, [r4, #0]
 8004a74:	e7ed      	b.n	8004a52 <_free_r+0x22>
 8004a76:	461a      	mov	r2, r3
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	b10b      	cbz	r3, 8004a80 <_free_r+0x50>
 8004a7c:	42a3      	cmp	r3, r4
 8004a7e:	d9fa      	bls.n	8004a76 <_free_r+0x46>
 8004a80:	6811      	ldr	r1, [r2, #0]
 8004a82:	1855      	adds	r5, r2, r1
 8004a84:	42a5      	cmp	r5, r4
 8004a86:	d10b      	bne.n	8004aa0 <_free_r+0x70>
 8004a88:	6824      	ldr	r4, [r4, #0]
 8004a8a:	4421      	add	r1, r4
 8004a8c:	1854      	adds	r4, r2, r1
 8004a8e:	42a3      	cmp	r3, r4
 8004a90:	6011      	str	r1, [r2, #0]
 8004a92:	d1e0      	bne.n	8004a56 <_free_r+0x26>
 8004a94:	681c      	ldr	r4, [r3, #0]
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	6053      	str	r3, [r2, #4]
 8004a9a:	4421      	add	r1, r4
 8004a9c:	6011      	str	r1, [r2, #0]
 8004a9e:	e7da      	b.n	8004a56 <_free_r+0x26>
 8004aa0:	d902      	bls.n	8004aa8 <_free_r+0x78>
 8004aa2:	230c      	movs	r3, #12
 8004aa4:	6003      	str	r3, [r0, #0]
 8004aa6:	e7d6      	b.n	8004a56 <_free_r+0x26>
 8004aa8:	6825      	ldr	r5, [r4, #0]
 8004aaa:	1961      	adds	r1, r4, r5
 8004aac:	428b      	cmp	r3, r1
 8004aae:	bf04      	itt	eq
 8004ab0:	6819      	ldreq	r1, [r3, #0]
 8004ab2:	685b      	ldreq	r3, [r3, #4]
 8004ab4:	6063      	str	r3, [r4, #4]
 8004ab6:	bf04      	itt	eq
 8004ab8:	1949      	addeq	r1, r1, r5
 8004aba:	6021      	streq	r1, [r4, #0]
 8004abc:	6054      	str	r4, [r2, #4]
 8004abe:	e7ca      	b.n	8004a56 <_free_r+0x26>
 8004ac0:	b003      	add	sp, #12
 8004ac2:	bd30      	pop	{r4, r5, pc}
 8004ac4:	20000210 	.word	0x20000210

08004ac8 <_read_r>:
 8004ac8:	b538      	push	{r3, r4, r5, lr}
 8004aca:	4d07      	ldr	r5, [pc, #28]	; (8004ae8 <_read_r+0x20>)
 8004acc:	4604      	mov	r4, r0
 8004ace:	4608      	mov	r0, r1
 8004ad0:	4611      	mov	r1, r2
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	602a      	str	r2, [r5, #0]
 8004ad6:	461a      	mov	r2, r3
 8004ad8:	f7fc f88a 	bl	8000bf0 <_read>
 8004adc:	1c43      	adds	r3, r0, #1
 8004ade:	d102      	bne.n	8004ae6 <_read_r+0x1e>
 8004ae0:	682b      	ldr	r3, [r5, #0]
 8004ae2:	b103      	cbz	r3, 8004ae6 <_read_r+0x1e>
 8004ae4:	6023      	str	r3, [r4, #0]
 8004ae6:	bd38      	pop	{r3, r4, r5, pc}
 8004ae8:	20000218 	.word	0x20000218

08004aec <_fstat_r>:
 8004aec:	b538      	push	{r3, r4, r5, lr}
 8004aee:	4d07      	ldr	r5, [pc, #28]	; (8004b0c <_fstat_r+0x20>)
 8004af0:	2300      	movs	r3, #0
 8004af2:	4604      	mov	r4, r0
 8004af4:	4608      	mov	r0, r1
 8004af6:	4611      	mov	r1, r2
 8004af8:	602b      	str	r3, [r5, #0]
 8004afa:	f7fc f8be 	bl	8000c7a <_fstat>
 8004afe:	1c43      	adds	r3, r0, #1
 8004b00:	d102      	bne.n	8004b08 <_fstat_r+0x1c>
 8004b02:	682b      	ldr	r3, [r5, #0]
 8004b04:	b103      	cbz	r3, 8004b08 <_fstat_r+0x1c>
 8004b06:	6023      	str	r3, [r4, #0]
 8004b08:	bd38      	pop	{r3, r4, r5, pc}
 8004b0a:	bf00      	nop
 8004b0c:	20000218 	.word	0x20000218

08004b10 <_isatty_r>:
 8004b10:	b538      	push	{r3, r4, r5, lr}
 8004b12:	4d06      	ldr	r5, [pc, #24]	; (8004b2c <_isatty_r+0x1c>)
 8004b14:	2300      	movs	r3, #0
 8004b16:	4604      	mov	r4, r0
 8004b18:	4608      	mov	r0, r1
 8004b1a:	602b      	str	r3, [r5, #0]
 8004b1c:	f7fc f8bd 	bl	8000c9a <_isatty>
 8004b20:	1c43      	adds	r3, r0, #1
 8004b22:	d102      	bne.n	8004b2a <_isatty_r+0x1a>
 8004b24:	682b      	ldr	r3, [r5, #0]
 8004b26:	b103      	cbz	r3, 8004b2a <_isatty_r+0x1a>
 8004b28:	6023      	str	r3, [r4, #0]
 8004b2a:	bd38      	pop	{r3, r4, r5, pc}
 8004b2c:	20000218 	.word	0x20000218

08004b30 <_init>:
 8004b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b32:	bf00      	nop
 8004b34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b36:	bc08      	pop	{r3}
 8004b38:	469e      	mov	lr, r3
 8004b3a:	4770      	bx	lr

08004b3c <_fini>:
 8004b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b3e:	bf00      	nop
 8004b40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b42:	bc08      	pop	{r3}
 8004b44:	469e      	mov	lr, r3
 8004b46:	4770      	bx	lr
